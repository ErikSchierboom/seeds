{"Nodes":[{"Key":" ","Fragments":["Thank","1)","2)","3)","Fixed","Explanation:","1.","2.","Hi,","I","1)","2)","3)","Good","Good","I","It","Oops","So","-","-","-","-","-","-","I","const","and","Ya,","Hello,","Good","One","The","As","There","Nice","Hello,","Congratulations","Why","typedef","const","const","const","const","I","Also,","itr-\u003esecond","There","Simple","The","Some","I","-","This","1.","2.","string::reverse_iterator","while","I","3.","4.","yell","Edit:","5.","Can't","theMap[\"Tom-ay-to,","1.","2.","```","return","```","i.e.","3.","4.","5.","A","1.","return","2.","hasUpper","If","3.","return","This","Also,","Satisfying","We","Even","1.","2.","3.","You","About","`rval`","And","`Which","The","1.","2.","3.","I","It","But","-","-","#","From","#","The","##","For","The","This","##","-","-","-","-","-","-","-","The","##","There","#","The","Pretty","A","`protected`","`get_or_insert`","`grade_school::school::colon::grade(...)`","Having","I","`list.push_back(creature(\"fly\"));","list.push_back(creature(\"spider\",","list.push_back(creature(\"bird\",","but","Hello,","Thank","Hello,","Regardless","Hello","As","I","-","-","I","Name","```creature(string","Instead","First","These","Now","-","-","-","-","Furthermore,","-","-","-","-","-","can","`(input%4","-","`return","There","`return","If","`return","But","`return","`leap::is_leap_year","I","-","-","-","`!(year","The","`(!(year","Instead","`(!(year","Instead","`(!(year","Instead","`(!(year","Some","`(!(year","...","`((year","Last,","`year","But","`(year","-","-","-","Instead","Done.","This","Your","You","I","In","While","`::sprintf(...)`","You","`rand(...)","In","I","`rand(...)","In","Oops,","Thanks","Thank","I","Thanks,","Your","You","Or","I","`using","I","Much","Next","I","Hello,","You","Hello,","Wow,","Hello,","Instead","Hello,","Instead","Thanks","I","Be","\u003chttp://en.wikipedia.org/wiki/C_data_types#Size_and_pointer_difference_types\u003e:","\u003e","`size_t`","My","Hello,","Everything","1)","2)","Thanks","1)","2)","Two","First","Second,","Code","In","in","Otherwise,","Would","Some","You","Factors","2","3","4","6","If","```","for","if","//","if","//","}","```","Instead","Primes","Sure,","The","http://stackoverflow.com/questions/4986521/how-to-convert-integer-value-to-roman-numeral-string","Made","Focused","Interesting,","Many,","A","It","```","for(int","if","add","for","flag_vec[j]","pick","```","If","Not","Overall","Nested","Strings","```pop_back```","I","The","From","The","Are","Other","Good","I","Thank","Thanks","I","Interesting","Variable","For","Conditional","Why","Nice","Good","Since","I","Changed","I","Thanks","Simple","I","It","\"I","Otherwise","Do","removed","Fairly","A","Write","Write","Does","Bit","Congratulations","This","Why","Readability","Lack","Did","You","I","Variable","```words```","Yes,","Good","The","You're","Why","Did","This","Equilateral","Why","The","The","Could","Very","I","I'm","Thanks","@eino","Don","So","I","But","Thanks","How","Why","```input```","```NUCLEOTIDE```","Solution","Thank","I'm","Quite","Why","Good","@franz","That's","@cassidy","I","The","I","You","-","-","-","-","```boost::trim_copy```","Congratulations","On","I","I","Also","The","As","\u003eThe","Wow.","Small","This","make","Scanning","[","Linking","ld:","clang:","make[3]:","make[2]:","make[1]:","make:","I'm","Oh,","Congratulations","The","Another","Finally","Good","Assuming","```","#ifndef","#define","#include","namespace","std::string","//","return","}","}","#endif","```","Longer","Exercism","Excellent","No,","I","Google","Good","Making","Thank","I","I","Nice","Small","Congratulations,","Why","To","It","Good","Not","Very","\u003ca","Looks","Another","Why","This","How","It's","ha","Thanks","I","No,","I","But","It","\u003cblockquote","Very","Why","Thanks,","I","Looks","I","Good","Also,","Nice","This","Since","Good","Could","You","Process","\u003cblockquote","Then","\u003cblockquote","The","```","$","$","$","$","$","```","This","in","Your","In","The","I","\u003ccode\u003echeckForSilence()\u003c/code\u003e:","\u003ccode\u003echeckForYelling()\u003c/code\u003e:","\u003ccode\u003echeckForQuestion()\u003c/code\u003e:","Thanks","Ah,","@devyn","~~*","*","*","*","Thanks","A","5","G","59","M","43","S","17","Y","67","I","http://en.wikipedia.org/wiki/Letter_frequency","Instead","Using","You","`flag`","Since","In","Keep","I","My","Thank","Thank","Your","Indeed,","It","Thanks","You","```","for","if","}","```","And","Ok","Awesome!","Updated","oh","i","thanks","I","I'm","What","As","That","Thank","I","The","As","As","I'm","Commented","It","I'm","I've","Since","http://www.cplusplus.com/reference/cctype/isupper/","You","@vergie","Thank","There's","I","in","`exercism","Not","Also","Thanks","I","This","I","huh!,","fixed","First","-","-","The","The","With","The","When","```c++","if","```","Why","Nice","On","```c++","static","```","Multiple","```c++","if(islower(phrase[i]))","```","are","You","```c++","for","```","You","In","In","And","+1","+1","You","`!input.empty()`","All","The","I","With","For","Speaking","Is","Updates","-","-","-","-","-","I","A","-","-","-","Props","My","In","This","If","I","I","hi","i","but","int","try{","return","}","catch","throw","}","};","I","This","i","if","so","if","given","there's","const","you","if","again","I'm","I","The","What","const","For","```c++","for(std::string::const_iterator","if(*it","return","}","```","would","```c++","for","if","return","}","}","```","Nice","Exactly.","Something","I","Any","I","I","For","Nice","The","How","Got","Thanks","If","Instead","```c++","const","```","This","That's","Got","If","Creating","Also,","I","Now","It's","Your","Also,","This","I'm","What","Don't","If","@clementina","When","Interesting,","I","Big","Actually","As","I","`void","Thanks","My","I","Makes","From","Anyways,","The","What","It","Also,","The","```std::map\u003cstd::string,","Also","Is","You","Also","There","I","The","If","Cool,","Thanks,","Why","I","You","they","for","If","*","*","I","`^[^a-z]*[A-Z][^a-z]*$`","Which","*","*","Great","Single","the","`explicit","the","`static","returing","`bool","I","The","I","`return","`IsJustBlanks`","`return","calling","I","i","`static","without","I","```","Running","/home/vidder/exercism/cpp/bob/bob_test.cpp(12):","/home/vidder/exercism/cpp/bob/bob_test.cpp(32):","/home/vidder/exercism/cpp/bob/bob_test.cpp(37):","/home/vidder/exercism/cpp/bob/bob_test.cpp(52):","/home/vidder/exercism/cpp/bob/bob_test.cpp(57):","***","```","this","You","`^[^a-z]*[A-Z][^a-z]*$`","since","I","I","Fixed","Given","compare","clear:","which","which","assignment","which","which","`if","`if(!word.empty())","To","Again,","```","if","output[word]","word.clear();","}","```","to","```","for","if","```","*word_count.h*","I","```plain","It","```","I","```","//","//","```","```","bool","```","For","English","the","Two","First","The","I","@reggie","I","single","I","Thanks","Regarding","Agree","```","The","```","@israel","Please","@forrest","All","Thanks","Thanks","I","I","Great","*","```","anagram::anagram(const","transform(word.begin(),","...","}","```","*","*","*","Great","@kaitlyn","@ottilie","`string","Interesting,","```","/home/driest/exercism/cpp/bob/bob.h:27:25:","In","from","/home/driest/exercism/cpp/bob/bob_test.cpp:","/home/driest/exercism/cpp/bob/bob_test.cpp:78:61:","BOOST_REQUIRE_EQUAL(\"Fine.","```","For","The","Of","Awesome,","the","```plain","/home/****/exercism/cpp/beer-song/beer_song_test.cpp:59:47:","BOOST_REQUIRE_EQUAL(expected,","```","The","2","Take","I","you","you","`Bob(std::string","you","I","You","I","`silence","Only","Instead","It","Opening","It","Very","Also","I","Try","Glad","Interesting","First","I","why","I","Good","Needs","Using","Knowing","yes,","Thanks","`dnaString`","The","The","I","*","*","*","*","This","*dna_m*","save","single","unnecessary","Great","I","*","*","*","*","this","Great","keeping","keeping","the","single","*","*","*","*","*","m_dnastring","@kaylie","storing","Storing","storing","*","*","*m_strDNA*","*strInput*","Excellent","*","*","the","string","string","The","The","The","for","The","input","The","The","Overall","typedefs","*grade*","comparing","Suggest","```","if","if","matches.push_back(*w);","}","}","```","*grade*","Dear","otherwise,","Thanks","Since","call","call","Single","In","```","number.erase(std::remove_if(number.begin(),","```","extra","I","did","did","This","Possible","*","*","*","*","why","single","*input*","doesn't","*input_number*","*extract_number*","good","Pros:","*","*","Cons:","*","*","*","*","Suggest:","*","I","typedefs","Why","if","does","I","*grade*","why","i","why","Looks","I","Parsing","for","Nice","Simple,","I","Dislike","storing","Possible","use","use","Do","Because","If","Is","```","string","string","for","*iter","}","return","}","```","@nora","If","@johathan","Resubmitted","Hello,","It","Never","process_number","This","Joking","The","If","single","*num*","`phone_number(const","So,","I'm","Some","Thanks","In","I","Pushed","I","*","*","*","*","*","I","I","-","-","I'm","Why","I","Your","-","-","-","Your","``transcriptionMap[base]``","Instead,","Passing","Since","But","`auto`","The","Good","I","good","I","This","Also","total","std::pow","you","to","```","return","+","```","But","You","thank","I've","incorporating","although","I","```","BOOST_AUTO_TEST_CASE(validates_nucleotides)","{","BOOST_REQUIRE_THROW(transcription::to_rna('X'),","}","```","-","-","-","Rewrote","hi","i","any","You","Implementing","I","Good","This","Sooo","I","Be","As","Thank","This","In","Removed","I","@roger","To","The","Maybe","Let's","-","-","-","-","Of","Very","ah!","`class","Do","Please","It","The","My","I","If","Are","I","Putting","If","There","*","*","*","*","*","*","*","Or,","Oh,","I","fiddling","I","very","I","The","Please","A","Ahh","same","And","What","Using","Removed","I","Since","The","It","Have","Yes,","Do","Do","i","There","*algorithm*","Would","in","in","in","in","in","time","`BOOST_CHECK_EQUAL(\"00:10\",","`BOOST_CHECK_EQUAL(\"23:50\",","time","BOOST_CHECK_EQUAL(\"00:10\",","BOOST_CHECK_EQUAL(\"23:50\",","in","time","BOOST_CHECK_EQUAL(\"00:10\",","BOOST_CHECK_EQUAL(\"23:50\",","time","BOOST_CHECK_EQUAL(\"00:10\",","BOOST_CHECK_EQUAL(\"23:50\",","**!=**","**minus**","time","`BOOST_CHECK_EQUAL(\"00:10\",","`BOOST_CHECK_EQUAL(\"23:50\",","**constructor**","**!=**","**minus**","time","`BOOST_CHECK_EQUAL(\"00:10\",","`BOOST_CHECK_EQUAL(\"23:50\",","date","**minus**","time","`BOOST_CHECK_EQUAL(\"00:10\",","`BOOST_CHECK_EQUAL(\"23:50\",","time","`BOOST_CHECK_EQUAL(\"01:00\",","`BOOST_CHECK_EQUAL(\"23:50\",","Nice","minus","minus","constructor","constructor","!=","minus","**at**","Single","the","single","Single","single","This","Single","Code","I","You","```","using","using","```","to","```","std::","boost::","```","everywhere.","Isn't","```","else","return","}","```","doing","```","else","return","}","```","?","Otherwise","Header","only","Thanks","Do","single","the","take","single","**long**","single","single","**static","single","single","This","single","single","single","just","if","`m_nAgeInSec","else","what","this","i","single","earth_period","age_in_seconds","there","single","*m_seconds*","single","it","*_seconds*","single","use","single","the","single","if","`exercism","the","the","see","hoist","see","also","hoist","see:","I","hoist","see:","take","hoist","see:","I","http://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%E2%8B%AF","Thanks","Since","take","move","hoist","(see","hoist","hoist","hoist","hoist","the","See:","http://www.cplusplus.com/reference/map/map/insert/","single","you","See:","Thanks","I","Glad","To","@schuyler-fourier","`const","First,","Just","This","Storing","I","hoist","not","This","return","this","The","Good","Ah,","Now","Good","Hurray","Do","Great","I","The","In","@morgan","In","My","Since","Love","I","(http://www.boost.org/doc/libs/1_58_0/libs/integer/doc/html/boost_integer/traits.html)","is_anagram","In","In","You're","Pretty","AskHimaQuestion:","There","YellAtHim:","I'm","please","`exercism","I","I","You","In","```","Using","```","using","```","would","Using","I","How","Please","What's","Putting","With","You","``_blank()``","You","Do","Do","In","Right,","I","I","I","and","and","You've","Initially","What","Sorry,","If","bool","if(allUpper){","bool","if(atleastAlpha","}","Or","instead","if","you","if(clause[clause.length-1]","without","other","But,","This","single","It","First","std::string","also","using","using","instead.","Lastly","example","if","else","if","else","sstm","if","else","if","use","if","sstm","string","if","btlString","}","else{","btlString","};","sstm","}","else{","sstm","}","Using","EDIT:","just","this","You","Default","Interesting.","I","input.back()","Thanks","Someone","Link","There","thx","@domingo","I","@abbie","Code","Exactly","By","You","Your","Only","Not","A","67%","Removed","Removed","Added","Formatted","I","There","Since","you","You","You","Can","Not","i","`convert(\"100c001\")`","pow","oops,","lowercase_inst","Crap,","I","To","Also,","@luella","I","No","`old`","Almost","Should","`to(int","suggest","suggest","Code","Why","@nasir;","unnecessary","You're","Work","@rebekah-fourier","Thank","Thank","Initializaing","Wouldn't","Another","Definite","You","Thank","Thank","All","Considering","You","I","My","I","Thanks","That's","std::pow","convert","**i**","Yes,","True.","Oh,","unnecessary","std::pow","convert","**power**","expBySqrt2","unnecessary","**std::pow**","convert","**i**","convert","**i**","memory","unnecessary","unnecessary","std::pow","erg","size","i","unnecessary","std::pow","*convert*","**i**","how","convert","nice","@alysa","@rusty","I","The","A","It","suggest","I","Fairly","Since","But","You","-","-","-","@garry","Thanks,","Strategy:","The","The","Suggest","suggest","suggest","*i*","suggest","given","TBH","Thank","I","@brody","As","Also","With","And","The","The","straightforward,","Thank","I","I","template","ah!","typedef","typedef","@kiley","Creating","Since","I","Thank","coming","silent,","don't","lowerDetected,","and","this","that'll","closing","exercism","Why","The","I'm","you","s.length()-1","instead","s.find_first_not_of('","without","and","return","would","you","s[s.length()-1]","not","I","If","@ervin","@maida","I","Why","Why","You","I","Love","Any","Try","Consider","Once","If","std::tolower","What","I","Maybe","The","I","Please","I","For","I","Your","I","Prefer","Thanks.","I","So","Please","You","Wow...","Maybe","In","The","It","Props","The","Also,","Maybe","The","This","What","If","I've","I","I","```","i","```","My","I'm","To","operator[]","Yeah,","I","using","I'd","I","Also","This","*age_seconds*","the","@dylan:","hi","starting","you","unnecessary","Yeah,","I","On","I'm","My","I","If","std::map","This","Moving","Moving","I","You","Also,","Maybe","As","using","It","Readable","I","I","Also,","I","```transform(original.begin(),","return","});","```","to","```transform(original.begin(),","```","works","Good","As","I","I","1.","2.","3.","4.","5.","6.","I","Learned","Also,","I","Nice","The","So,","@ebony","```BOOST_REQUIRE_EQUAL(food_chain::verses(1,","If","So","@keira","@hipolito","Nice","As","@kaitlyn","oh,","If","I","char","strcpy(","counter(","But","Personally","I","It","Maybe","When","As","I'm","isWordSeparator","I'm","In","for","It","Thanks","The","I'll","The","I","The","Consider","You're","If","If","(unsigned","You","I'd","My","One","I","Perhaps","@angelica","You're","Done","Any","It's","Oops,","Hey,","Why","Maybe","That","It","+1","Good","I'm","*","*","*","I'd","No","I","Addressing","*How","*How","The","0.","0.","0.","0.","```","if(boost::regex_match(speach,","return","```","I","I","Using","Since","You","Typedefing","Maybe","How","Shouldn't","Yeah,","Thank","Yes","Thank","Fixed","But","Thank","In","Yep,","Something","phone_number","n.area_code();//copies","By","Hi,","My","\u003col\u003e","\u003cli\u003eI","\u003cli\u003eHa!","-","-","Thus,","\u003cli\u003eEntirely","\u003cli\u003eYes,","Regarding","I","Don't","Btw,","Agree,","I","Interesting","Some","\u003col\u003e","\u003cli\u003eWhat","\u003cli\u003eTo","\u003cli\u003eI","\u003c/ol\u003e","Excellent","Phew,","Also","It's","I","As","I","I","return","and","The","rand()","std::string","If","That","I","Based","Maybe","That's","rand","newName","0.","0.","0.","Yeah,","The","Yeah,","This","The","3.","I","But","The","I","And","I","Nope.","I'd","Other","Thank's","According","I","So","You","Glad","For","Being","Maybe","Thanks","Your","This","Thank","Readability","Just","My","I","I","i","where","0","1","2","3","4","where","a","for","a","etc.","the","I'm","The","Also,","implemented","I","1.","2.","Anyway,","Thanks","I","I","I","I","the","digit","mod","9","8","7","6","5","4","3","2","1","0","but","digit","mod","9","8","7","6","5","4","3","2","1","0","i'm","extend","then","yes,","i've","9","8","7","6","5","4","3","2","1","0","to","9","8","7","6","5","4","3","2","1","0","and","Do","Ran","kind(","Consider","My","Consider","Consider","Unfortunately","i've","eg","up","and","I","so","I","Looking","I","I'm","Not","The","return","I","Also,","result","std::string","or","auto","Likewise","But","As","In","!","Question","not","(int)","-70","for","return","gives","or","return","Maybe","yes","return","I","I","I'll","@eleanora","I","Maybe","I","I","and","It","Looks","0.","0.","Worth","`mapLetters[c]`","I'm","Unless","You're","I","Thanks","Yeah,","Not","You","I","thanks","am","(a","*","*","Oops.","Oh!","Too","is_silent()","dynamic","Is","using","what","Is","Are","Used","removed","Q:","A:","---","Q:","A:","---","Q:","A:","I","exercism","works","exercism","Although","$exercism","NAME:","submit","USAGE:","command","OPTIONS:","--test","Looks","`isblank()`","One","Why","Thanks;","`downcase()`:","Thanks.","Less","no","Is","I","Also,","A","I","Is","```","bool","bool","return","});","return","```","or","```","return","std::find_if(begin(msg),","```","What","This","eliminate","I","refactor","The","I","The","for","{","if","if","}","Since","Maybe","std::vector\u003clong\u003e","long","Pretty","std::pow(x,2)","There","void","if","{","out.append(","convert_recursive_impl(","return;","}","...","But","The","Maybe","I","V","X","What's","This","Is","I","Isn't","```","\"Are","```","a","There","Yes.","@josiah","@carey","**LOL!**","You'll","```","if","else","else","else","```","because","Very","@thurman","hey(\"?\")","It","The","MMDCCCLXXXVIII","is","But","total","vs.","total","FWIW","So,","I","That","Anyway,","Ah!","I","```","$","$","```","The","As","And,","Here,","Very","```","void","void","```","Compiling","In","Here","```","template\u003ctypename","void","void","```","Here","Back","I","Your","Lastly,","Don't","In","these","@raphael","@rahul","Nice!","Tried","removed","Tried","Removed","That","Dammit","Also,","If","This","Most","for","and","Keep","Thanks","Yes,","The","Tried","Also,","give","That's","Some","I","Returning","You","1)","2)","3)","or","4)","You","I","Yeah","I","Thanks","Thanks","About","I","Thanks!","I","BTW","Looks","a","```","return","```","would","Your","You","How","how","It's","I","You","Have","You","Do","@anabel","The","```","std::string","format(s);","format(\"1","```","Line","There","I","```","std::string","auto","large*","std::string","//","return","}","```","Above,","Of","Don't","Do","Do","Do","Do","Do","Is","\"Containg","Do","Do","Super","It","ideally","Do","Do","How","Especially","Do","Do","That","I","As","if","return","std::vector\u003cint\u003e","While","That","Maybe...","distance(","Or","OK","First","That","On","Finally,","I","The","`3","I","1)","2)","So","I'm","Did","if","Oh","That","Why","I","*","*","*","*","*","*","Thank","I","Yeah,","For","The","make","For","The","My","Originally","i","I","Only","Also,","The","result.emplace_back(","It's","What","You","std::vector\u003cstd::vector\u003cint\u003e","It's","I","BUT!","I","Now","Sorry","I","Thanks","My","I","Also","Well,","But","Second,","And","It's","message.back()","If","It'd","First","There","-","-","The","-","-","-","-","Overall","I","Or","auto","auto","if","{","return","}","etc.","Point","Perhaps","The","I'm","I","The","dna::next_permutation","and","+1","Thanks","As","How","Doh!","That","As","http://stackoverflow.com/questions/7657718/when-to-use-shared-ptr-and-when-to-use-raw-pointers","http://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/","You","I","Maybe","Since","The","The","\"//Prime","Why's","Maybe","Your","I","Hmm.","*Unless","gcc","$echo","#include","#include","namespace","std::map\u003cstd::string,int\u003e","}","int","auto","for","std::cout","}'","$g++","/tmp/cchsEDrR.o:","b.cpp:(.text+0x116):","/tmp/ccQTq3YY.o:a.cpp:(.text+0x116):","collect2:","and","$g++","abc=\u003e2","def=\u003e1","I","cat","#include","namespace","std::map\u003cstd::string,int\u003e","return","}","}","'","$g++","abc=\u003e2","def=\u003e1","$g++","NO!!=\u003e-1","And","http://llvm.org/docs/LangRef.html#linkage","Handling","True.","Well,","But","And","This","Thanks","Coming","About","```cpp","std::string","auto","if","return","```","Since,","Oh","Removed","Yeah,","By","In","And","Yeah,","class","At","Boost","Your","*","*","Is","*","*","You","I","Pulling","That's","Classes","I'm","While","Incremental","Looks","I","You","One","And","*","*","*","*","*","I","std::pow","So","char","int","is","Anyhow,","auto","Since","for","{","result","switch","Seems","I","to_decimal","using","No","X.h","X.h","I","This","The","\u003e","Yes.","\u003e","`std::accumulate()`","I","\u003e","Why?","\u003e","How","I","I","int","...","auto","i","return","It's","I","``std::vector\u003cunsigned","Thanks","Most","@emmanuel","auto","Both","Thanks","In","Thanks","Updated","Better","Looking","I","Backquestions","--------------------","*","*","*","Explaining","----------------------------------------------","*","*","*","*","So","\u003e","A","*","*","*","I","Sure!","Overall","Speaking","I'd","You","A","The","Overall","I'm","You","The","As","http://programmers.stackexchange.com/questions/133688/is-c11-uniform-initialization-a-replacement-for-the-old-style-syntax","The","http://www.stroustrup.com/C++11FAQ.html#init-list","The","I'm","And","There's","Wall","Thanks","I","The","```","Foo","```","The","```","Foo","```","Can","Additionally","The","It","```","std::string","auto","```","will","```","FrostyLib::String","auto","```","The","Now,","```","namespace","auto","return","}","auto","return","}","}","```","You","As","What","My","Also","*","*","*","I'd","PS:","`[]`","But","Current","The","```sh","#!/usr/bin/env","#","#","exercism","```","*","*","*","*","All","Since","You","Why","`x[i]","`false`","It's","The","Requiring","Having","But,","Which","Anyway,","Because","Regarding","I","In","I'll","I","Your","Yeah,","Why","This","The","If","Two","```","auto","```","will","The","I","It","Building","But","After","Instead","This","If","std::array\u003cint,26\u003e","I","For","setting","sorting","setting","I","Also","Understood.","Honestly","I","Instead","Why","I","Thanks","I","Im","Of","You","```cpp","//","//","std::string","std::string","std::transform(str.cbegin(),","return","}","```","Line","This","I","You","C++","To","boost::to_lower(","To","boost::to_lower_copy(","http://www.boost.org/doc/libs/1_49_0/doc/html/string_algo/reference.html#header.boost.algorithm.string.case_conv_hpp","This","In","As","I","```","int","for(auto","++nucleotides[nucleotide_to_int(n)];","```","But","In","In","I","@estefania","```","std::transform(...,","```","or","```","std::transform(...,","```","or","Thank","When","http://en.cppreference.com/w/cpp/locale/tolower","Requesting","In","static_cast\u003cint(int)\u003e(std::tolower)","which","If","But","That's","For","Sadly","You","But","That","Since","const","?","Yeah,","I'm","For","*","*","*","True,","The","*","*","Personal","You","Comparing","Macros","@mariana:","1.","2.","3.","4.","1.","2.","```plain","square(66)","=","=","=","```","yeah.",":)","Consider","```cpp","#ifndef","#define","//","#endif","```","Lines","Also","I","Why","I","Thanks","I","Thanks","I","It","If","In","I","At","For","```zsh","#!/usr/bin/env","exercism","```","So","I","1.","2.","The","One","I","Probably","Also,","It","I","I","Other","holy","Using","atoi(\u0026current)","char","And","Why","I","I","2.","1.","It's","I","set(CMAKE_CXX_FLAGS","Yupp,","I'm","Hi,","Why","Since","It","You","1.","2.","3.","1.","2.","3.","4.","5.","Well","Why","1:","2:","return","Returning","6::","const","const","LOL,","2:","3:","6:","It","Does","I","Why","Made","Took","```plain","*","*","*","*","*","*","```","Don't","I","Why","@candice:","Well,","Just","is_prime_number","std::make_pair","Instead","@granville","In","Thanks","What","You","@lonzo","I","If","I","I","@marilou:","I","I","When","Your","in.length()","Honestly","I'm","The","Since","@breanne","Reference:","http://en.cppreference.com/w/cpp/string/basic_string/at","http://en.cppreference.com/w/cpp/string/basic_string/operator_at","@lelah","So","For","Thanks","That's","Whether","*","During","```plain","[==========]","[","[","[","Fastest:","Slowest:","Average","Best","Worst","[ITERATIONS]","Fastest:","Slowest:","Average","Best","Worst","[","[","[","Fastest:","Slowest:","Average","Best","Worst","[ITERATIONS]","Fastest:","Slowest:","Average","Best","Worst","[==========]","```","As","Yes,","I","Thanks","I","I","You","With","Nice","*","*","*","Nice","Though","`rd`","`std::uniform_int_distribution`","I","Also","That's","Thanks.","Recursion","Is","A","I","I","```cpp","for","if","sum","break;","}","}","```","Also","Yeah,","Yes,","You","I","Yes,","using","But...","*","*","*","*","Maybe","Your","Since","*","*","And","*","*","*","chess_board()","//...","position","position","Yep,","Instead","As","Your","But","\u003e","`isdigit`","That","Next","replace","Since","@roosevelt","*","*","*","*","*","@roosevelt","Thanks","I'm","There","Every","```","0","0","```","So","Another","`break`","@telly","It","Looping","One","@maximus","@ewald","Combining","I'm","It","Actually,","Why","I","Use","Added","That's","Given","As","I","First","The","2nd","First","I","Aside","Now,","First","You","Another","You","You're","And","Overall","I","I'm","Isn't","It","Awesome","For","Very","*","*","*","*","###","##","#####","#####","#####","#####","#####","#####","#####","###","Hey,","First,","Second,","Lookin'","I","For","I'll","-","-","-","As","-","-","-","-","-","-","Overall","Alright,","Just","The","The","The","However,","I","Lastly,","Thank","Any","I","Hi","I","You","In","You","nitpick","nitpick","`const","####","##","#####","#####","####","##","#####","#####","#####","#####","#####","####","Your","Have","OK.","-","-","So","The","A","The","Cool,","####","I","Or","Also,","I","Now","####","*","*","*","*","@ivory,","That","Have","I'm","const","or","const","@marina","Annoyingly,","The","It's","How","Reduced","Minor","I'm","I","Both","If","```","lc_word","sorted_lc_word","if","(word.length()","(lc_word","(sorted_lc_word",")","{","res.emplace_back(word);","}","```","Note","Very","To","I","But","Since","Hi","The","OK,","Introduced","All","You","*","*","You","They","I've","I","Leaved","I","Regarding","Thinking","But","The","Also,","then","Why","namespace","namespace","{","The","The","Am","How","punct","works?","The","Your","You","1)","2)","3)","message.rend","if","{","if","return","}","Moving","1)","You","template\u003cclass","bool","{","using","using","return","}","And","Gotta","@katlyn","I","As","It's","http://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/","Then","\"Also,","Meh,","Moving","is_blank","return","Also,","return","What","#include","bool","bool","for","if","return","}","else","cased","}","}","return","}","Ooh,","As","I","```cpp","unsigned","unsigned","for","result","result","}","return","}","```","*","*","*","*","-----","So","We","-----","Another","1.","2.","3.","return","-----","And","1.","2.","3.","4.","5.","6.","Return","[![http://mathurl.com/oxbw2cg.png](http://mathurl.com/oxbw2cg.png)](http://mathurl.com/oxbw2cg)","-----","I","@hipolito","Thanks","The","The","```cpp","template\u003cclass","T","BinaryOperation","T","for","acc","}","return","}","```","So","Your","Great","\"Ending","How","The","The","\"Why!?","\"No","\"And","I","One","Did","This","Is","@jaida","I","You","Very","I","When","@frieda","I","If","If,","So","@paul","I","Usage","hmm.","your","i","I'm","Why","@lily","you're","I","@coty","you're","but","mmm,","Changes","```while```","```str_in```","All","It's","Can","@diamond","Was","Not","Oh,","This","You","Default","To","http://stackoverflow.com/questions/262853/c-map-access-discards-qualifiers-const","You","For","Removed","Changed","Make","Made","I","if","but","But","I","If","I","Changed","@graham","I","```nucleotide_count```","@colleen","A","You","EDIT:","Did","I","That","By","This","Well,","It'd","But","For","The","Overall","@seamus","Thanks","1)","2)","3)","*","*","```plain","$","foo.cpp:","foo.cpp:6:10:","return","^","$","int","for(int","int","}","return","}","```","I'll","I","To","All","I","I","I","As","`a","`|`","`ADD`","I","This","Ah,","The","But","as","If","hi","I","Why","If","@hosea","1)","I","2)","3)","hex_bench.h","```","#ifndef","#define","#include","class","private:","unsigned","if","return","}","return","}","return","single","};","public:","void","unsigned","for","unsigned","sum","sum","}","};","void","unsigned","for","unsigned","sum","sum","}","};","};","#endif","```","benchmark.cpp:","```","#include","#include","BENCHMARK(hex,","{","hex().bit(\"234ae7\");","}","BENCHMARK(hex,","{","hex().num(\"234ae7\");","}","```","The","```","[==========]","[","[","[","Fastest:","Slowest:","Average","Best","Worst","[ITERATIONS]","Fastest:","Slowest:","Average","Best","Worst","[","[","[","Fastest:","Slowest:","Average","Best","Worst","[ITERATIONS]","Fastest:","Slowest:","Average","Best","Worst","[==========]","```","So","The","You","Don't","![](http://mathurl.com/qewx4x5.png)","These","In","You","The","You","http://mathandmultimedia.com/2010/09/15/sum-first-n-positive-integers/","It's","Allow","Reason","For","Changed","```clock::plus```","I","New","I","Removed","You","Indeed,","The","I","There","-","-","-","-","You","You","You","You","```asciiOffset```","Hey","This","You","any_of","K,","The","Give","You","I","@maria","Normally,","In","There's","Mechanically","Not","The","One","Do","Reason","Plus,","Just","And","I","Your","This","Also","Also,","Hey,","`matches_upper","There","*","*","*","*","*","Think","At","made","Is","Interesting,","@rashawn","I","With","@ryder","BTW","First","Then","You","I","I","I","You","You","It","Hi,","Certainly","I'm","I","Be","The","I","In","I'd","the","```cpp","auto","auto","auto","auto","```","I","Thanks","Any","Well","```cpp","auto","//...","```","You","```cpp","//","auto","//","auto","//...","}","```","ref:","As","Great,","1.","2.","interesting","@trycia","@trycia","This","Hey","1.","2.","2.5","Hi!","Re.","Given","Also,","Thanks","Couldn't","Cool,","Also","Nice!","You","You","```cpp","all_of(query.begin(),","return","});","```","You","However,","Thanks","1.","2.","2.5.","Threw","Was","Not","Opinion","At","Yeah!","Implementing","I","`is_question`","Opinions","`*(query.rbegin())","versus","`query[query.length()-1]","versus","`boost::algorithm::ends_with(query,","Kind","And","And,","I","Cool,","I","I","Any","Well,","http://en.cppreference.com/w/cpp/experimental/basic_string_view","To","Yup.","I","It's","Be","I","As","But","In","I","I","I","```cpp","bool","return","}","```","On","Update:","Nice.","One","`get_significant_words`","I","`pending_apostrophe`","One","`sort_equal`","Looks","Nice","I","I","Thank","I","Hiya,","1.","2.","3.","1.","2.","3.","1.","2.","1.","2.","3.","4.","Hiya,","1.","2.","Hiya,","1.","2.","3.","4.","That","In","```","if","n","if","ret","}","}","```","will","```","if","n","if","ret","}","}","````","Keeping","I","Have","Incorportating","Well","As","Anyway,","Given","The","Scanning","[","[","Running","***","[100%]","This","The","Perhaps","In","It","A","1.","2.","3.","4.","5.","In","I","Does","Thank","Also","Also","Thanks","Generic","I","Thank","Even","I","Your","Nice,","1.","1(a)","2.","Nice","I","So","and","(alternatively,","I","I'm","I","Also,","`const`","Why","The","Thanks,","Having","The","Ah,","Using","But","Yes,","It","http://www.boost.org/doc/libs/1_57_0/doc/html/string_algo/usage.html#idp430824992","http://www.boost.org/doc/libs/1_54_0/doc/html/boost/algorithm/to_lower.html","to_lower","boost::to_lower(","Thank","Good","1.","2.","3.","I've","As","1.","2.","3.","4.","Wonderful.","Hiya,","1.","2.","3.","4.","I've","1.","2.","3.","The","Had","Ok","Just","Really","Instead","I.E.,","```","using","using","```","you","```","using","```","Use","I","A","-","-","@nikki,","Thanks","\u003e","There's","```cpp","std::vector\u003cstd::unique_ptr\u003csome_type_of_mine_t\u003e\u003e::const_iterator","//","auto","```","Since","\u003e","There's","@avery,","I'm","http://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/","`std::map\u003c...\u003e`","Interesting,","What's","Also,","return","There","What's","The","You","I","This","I","While","Very","`const","Not","Anyhow,","map","And","if","return","Not","I","Man,","Looks","1.","2.","3.","Whatever","The","Some","1.","2.","This","The","Some","1.","2.","3.","4.","5.","I",":","but","Cleaned","There","If","If","word_letter_frequencies","Instead","toLowerInPlace","I","I","Hi","1.","2.","```auto","return","```","3.","4.","5.","6.","7.","8.","If","match","Consider","The","if","result.push_back(","At","auto","std::copy_if(","If","The","*","Ooh,","@samanta","Hi!","2","1.","2.","Just","I","This","is","distance","I","@reed,","\u003e","Well,","\u003e","I","And","Replaced","It","@doug","\u003e","I","\u003e","*Lines","Tested","\u003e","I","1.","2.","I","You","Thanks","1.","2.","3.","Hi","Thanks","1.","2.True","3.","4.","5.","I","Nice!","Shall","\u003cul\u003e","\u003cli\u003eIn","\u003cli\u003eIf","I","Do","\u003c/br\u003e","__REDACTED__","Looks","I","\u003cul\u003e\u003cli\u003econsider","`int","s1.length()","To","`int","\u003c/li\u003e\u003c/ul\u003e","I","Use","\u003e","Let","```cpp","const","const","...","auto","auto","```","So","What","And","\u003e","I","I","I","I","Relating","1.","2.","3.","4.","Hiya,","1.","2.","1.","2.","3.","4.","1.","2.","1.","2.","3.","It","Decided","Yeah,","The","Is","@ayla","1.","2.","I","I","Some","struct","int","S(int","};","This","1.","2.","3.","4.","1.","2.","1.","2.","3.","4.","@rhiannon,","\u003e","Of","\u003e","Unfortunatelly,","With","I","If","const","With","```cpp","std::string","message.erase(std::find_if_not(message.crbegin(),","return","}","```","@bella","\u003e\u003e\u003e\u003eUnfortunatelly,","I","\u003e\u003e\u003e\u003eOf","Interesting","What","I","The","uint32_t","*","*","*","Thanks","My","One","@marie,","\u003e","Unfortunately","I","Did","for","{","accum","accum.push_back(","}","return","Thanks","Oh,","Looks","Could","The","using","using","or","namespace","I'd","template\u003cclass","void","{","using","using","using","sort(","}","That","Nice!","I","-","-","A","If","You","Inside","Premature","When","Or","static","for","I","I","I","```","$","$","$","Character","Words1:","Time:","Max","Words2:","Time:","Max","Words3:","Time:","Max","```","The","One","for(","This","I","A","1)","2)","3)","@hank:","This","You","I'm","I","First","For","I","```using","using","```","I","Secondly","Why","Other","A","Oh","Haven't","@jany","Re","and","http://msdn.microsoft.com/en-us/library/k0t5wee3.aspx","Yeah,","Eliminated","I'm","I","You","exercism","The","std::find_if_not(s.begin(),","I","```cpp","bool","static","return","}","```","Declaring","If","I","I","__Changes","\u003c/hr\u003e","**Took","\u003cul\u003e\u003cli\u003eMade","\u003cli\u003eRemoved","\u003cli\u003eMade","\u003c/ul\u003e\u003cul\u003e","\u003cli\u003e`diff`","__Procedure__","\u003col\u003e\u003cli\u003e","\u003cli\u003e","\u003cli\u003eThe","\u003c/ol\u003e","Naive","Switched","My","But","My","For","So","*Edit*","When","```cpp","for(","if(","else","}","```","The","*Edit2*","Did","std::inner_product","Updated","Added","I","It","There","1.","2.","Rob","I","Is","You've","Doing","I","I","Not","Be","I","*","*","*","The","The","Dramatically","Boost","One","You","Simple,","Nice!","Also,","Pretty","Tiny","-","-","-","Liking","The","Nice","Thinking","I","I","@jenifer","No","Fine,","Also,","Pretty","I","Good","*","*","@america,","I","I","You","I","I","One","Are","Nice","Grr.","naive","quick","not","I","Just","-","-","-","-","I'm","Pretty","Tiny","Correct,","Any","Switch","Clever","Note:","I","Nice","Interesting.","```","std::string","word.resize(std::distance(start,","std::transform(start,","```","For","After","I","Removed","First","thanks","can","Added","I'm","Although","Well,","There","1.","2.","3.","With","See","*","Compact","Note:","I","*","Cya","After","@lilly","I","Very","How","Your","I","Modified","Ah,","one","@gisselle-darling1,","I","I","I","wanted","Hi!","In","[](char","You","std::none_of(message.begin(),","Cheers!","I","Also","You","Recommendation:","Yeah,","How","````","$exercism","NAME:","exercism","USAGE:","exercism","VERSION:","2.2.0","COMMANDS:","debug","configure","demo,","fetch,","restore,","skip","submit,","unsubmit,","upgrade","tracks,","open,","download,","list,","help,","GLOBAL","--config,","--verbose,","--version","--help,","````","I","First","\u003e","Nice","single","single","i've","thanks","single","Ok,","Is","At","I","Nice","Any","I","store","Thanks","Regarding","the","`trim()`","Very","-","-","-","If","Thanks","Following","good","Thanks","Those","bob()","~bob()","The","The","They","Here","I","Thanks","Iteration","I","It","I","Frankly,","And","So","So","PS:","```","Words1:","Words2:","Words3:","Words4:","```","I'm","`resize`","Now,","`exercism","The","implemented","Nothing","-I","-In","@vaughn","I","You","Thank","I","About","Regarding","Used","That's","Object","Anyway,","the","In","-","-","-","The","And","I","I","The","Oh","I","I","Good","I","I","Would've","The","Just","added","This","It's","Usage","I","```++wordMap[wordToAdd]```","if","Changed","Thanks","As","Pretty","The","A","I","In","This","I","__Note:__","I","One","\u003cul\u003e\u003cli\u003eMy","\u003c/ul\u003e","__Procedure__","\u003col\u003e","\u003cli\u003e","\u003cli\u003e","\u003cli\u003eif","\u003cli\u003eThe","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003e","\u003cli\u003eBecause","\u003c/br\u003e","__THIS","*The","__Changes","\u003cul\u003e","\u003cli\u003e","\u003cli\u003eAn","\u003c/ul\u003e","\u003c/br\u003e","__Note:__","I","One","\u003cul\u003e\u003cli\u003eMy","\u003c/ul\u003e","__Procedure__","\u003col\u003e","\u003cli\u003e","\u003cli\u003e","\u003cli\u003eif","\u003cli\u003eThe","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003e","\u003cli\u003eBecause","\u003c/br\u003e","make","Hey","I","He","*","*","*","IMHO","What","(BTW:","Last","And","I","I","Maybe","done","In","######","*","######","*","*","*","Moved","Modified","I","Thanks","Made","I","Solution","Where","Finished","However,","As","Also","Looks","You","If","The","Also","Just","Also","Also","@bailey","I","If","@veronica","Sure...","I","Whoops!","I","Since","I","After","The","@mitchel","Also,","PS.","Thank","Thank","Just","1.","const","2.","This","performance","```","3.","Your","of","```std::map()```.","does","convert","Thank","Thank","Thank","Thank","I","This","It's","You","This","Pretty","Removed","hi","after","I","I'm","the","etc","Yeah","So","Thank","What","\u003ccode\u003estd::string","Oops","I","If","It","$grep","arrayToVector.s,","mapToVector.s,","vector.s,","My","$grep","arrayToVector.cache:==16760==","arrayToVector.cache:==16760==","arrayToVector.cache:==16760==","mapToVector.cache:==16771==","mapToVector.cache:==16771==","mapToVector.cache:==16771==","vector.cache:==16851==","vector.cache:==16851==","vector.cache:==16851==","And","I'd","And","There","I","Switch","Oops,","I","On","On","IIUC","There's","You","text.erase(remove_if(text.begin(),","also","Good","```mapLetters[c]```","True,","Yes","I","`downcase(m.str())`","```","std::string","std::transform(begin(s),","return","});","return","}","```","Here","```","std::string","std::cout","std::cout","```","then","But","```","std::cout","```","then","Your","I'm","I","You","```","if(","else","```","I","```","std::string","if(","else","elee","else","}","```","because","Writing","If","If","all","I","This","I","You","```","if(","```","as","```","if(","```","I","Also,","```","if(","```","as","```","if(","```","it's","The","For","This","This","The","```","3+6+9+...=3*(1+2+3+...)=3*m*(m+1)/2","```","and","I","I'm","Seriously,","Yes,","Maybe","My","made","Improved","-","-","Hey,","Glad","Overall","There","-","-","-","-","-","It","int","for","erg","Haven't","@bethel:","@abraham:","Wow!","My","At","-","-","-","I","Great","I","I","I","One","x","is","x.append(","because","The","static_cast\u003cint(*)(int)\u003e(std::tolower)","Sometimes","std::transform(","and","Is","1.","Making","I","[![http://mathurl.com/nbwdrbc.png](http://mathurl.com/nbwdrbc.png)](http://mathurl.com/nbwdrbc)","This","Also","*","*","*","@santiago","Absolutely","Some","1.","2.","3.","4.","5.","Wait?","You","\u003c\u003c","//vs.","*","do","+","//","|","are","Here's","You're","You're","Most","1)","2)","3)","4)","Bjarne","The","Good","I","Right.","@keagan","While","First","Also,","*","*","Your","I","@rahul","Now","Also,","In","That","You'll","Another","std::string","In","Declaring","However,","const","isn't","Declaring","As","return","For","Similarly","return","Also,","But","for","if","}","And","for","It's","Also,","$g++","#include","#include","int","int\u0026","int","auto","decltype(foo())","std::cout","constant=4;","std::cout","}","$./a.out","33","34","const","auto","$python","\u003e\u003e\u003e","\u003e\u003e\u003e","\u003ctype","\u003e\u003e\u003e","\u003e\u003e\u003e","\u003ctype","vs.","$g++","int","auto","i=\"a\";","}","\u003cstdin\u003e:","\u003cstdin\u003e:4:2:","In","Removed","Mmmh","the","i","(i)","((i))","http://mathforum.org/library/drmath/view/57569.html","i've","(i)","but","((i))","i","Appreciate","Added","I'm","for","Is","Coincidentally","What's","clang++","In","./nucleotide_count.h:17:17:","for","^","1","g++","In","nucleotide_count.h:","nucleotide_count.h:17:17:","for","^","nucleotide_count.h:17:23:","for","^","nucleotide_count.h:17:40:","for","^","nucleotide_count.h:22:9:","}","^","nucleotide_count.h:22:9:","nucleotide_count.h:22:9:","nucleotide_count.h:22:9:","nucleotide_count.h:22:9:","I","1\u003e------","1\u003e","1\u003ec:\\users\\jturpish\\nucleotide_count.h(15):","1\u003ec:\\users\\jturpish\\nucleotide_count.h(15):","1\u003ec:\\users\\jturpish\\nucleotide_count.h(15):","1\u003ec:\\users\\jturpish\\nucleotide_count.h(15):","1\u003ec:\\users\\jturpish\\nucleotide_count.h(15):","1\u003ec:\\users\\jturpish\\nucleotide_count.h(15):","1\u003ec:\\users\\jturpish\\nucleotide_count.h(16):","1\u003ec:\\users\\jturpish\\nucleotide_count.h(16):","==========","By","$cat","#include","the","but","*Conventional","I’ve","what's","*","*","*","Hey,","This","I","There","To","These","This","The","The","Here's","Check","Actually,","@zelma","This","I'm","This","Anyway,","Depending","It's","Anyway,","Nicely","I","You","I","Your","I","I","The","```cpp","int","```","Only","```cpp","int","```","I","```cpp","int","int","int","int","```","Which","```cpp","auto","auto","auto","auto","```","http://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/","Again,","Well,","We","Replaced","I","In","You","I","I've","Line","Is","For","using","Really","12","Super-simple","Incorporating","I","I","Thanks!","Nope,","@adrain","In","The","The","In","(*)","in","namespace","//accesses","Without","$gcc","00000000000001c0","0000000000000000","$gcc","$","With","$gcc","0000000000000000","$gcc","/tmp/ccjWWvms.o:main.cpp","collect2:","With","$gcc","0000000000000000","$gcc","/tmp/ccoMSrck.o:main.cpp:(.rdata$.refptr._ZN14scrabble_score10score_listE[.refptr._ZN14scrabble_score10score_listE]+0x0):","collect2:","score_letter","uint64_t","See","There","The","I","Think","Looks","\u003e","Where","All","Why","@golden,","`(reduce","```cpp","static_assert(size_t{true}","static_assert(size_t{false}","using","return","//","//","```","Although","For","This","I","I","I","The","(In","Function","1)","2)","3)","@marcelina","If","Since","If","```cpp","return","std::plus\u003c\u003e{},","```","And","Using","I","BInary","Good","I","Part","hamming.h","If","If","I","I","Capitals","Maybe","1)","2)","3)","4)","5)","I'd","What's","Fair","Looks","Couple","-","-","Thanks","Yes","As","The","There","As","Also","Finally,","For","exercism","I'm","My","I","self-feedback:","Thanks,","Decided","is","just","and","Thanks","I","I","Yeah,","__Changes","\u003cul\u003e","\u003cli\u003eNote\u003cul\u003e\u003cli\u003eDue","\u003c/li\u003e\u003cli\u003eCompletely","\u003cul\u003e\u003cli\u003eAfter","\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e","__Procedure__","\u003col\u003e","\u003cli\u003e","\u003cli\u003e","\u003cli\u003eThe","\u003cli\u003eEach","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003e","\u003cli\u003eBecause","\u003c/br\u003e","__Too","I'm","Fascinating!","This","yako","__Procedure__","\u003col\u003e\u003cli\u003e","\u003cli\u003e","\u003cli\u003eThe","\u003c/ol\u003e","Hi,","Good","I","Thanks","Hi","Starting","Why","The","You","You","I","I","~Rob","Why","Please","Other","@ayden","The","@ayden","\u003cem\u003ePut","It","```","if(!is_divisible(year,","return","if(!is_divisible(year,","return","if(!is_divisible(year,","return","return","```","Clearly","```is_prime```","If","You","Prefixing","You","Pass","Boost","You've","Use","A","The","Your","You","I","What","Your","Switched","I","I","As","I","`std::string`","C++11","```C++","for","//","}","```","Do","You're","I","In","`std::string`","I","We","This","We're","Of","Cought","This","Since","If","Great!","Similarly,","The","thank","I","a","boost/range/algorithm_ext/for_each.hpp","Of","both","quite","Nice","boost/range/algorithm_ext/for_each.hpp","binary","boost/tokenizer.hpp","Since","converting","seemed","However,","removing","is","I","Funny,","occurs","This","I","However,","When","As","An","Nice!","I","Switched","`split_words`","There","In","with","```C++","for","```","Have","without","I","Also,","Anyway,","`boost::tokenizer\u003c\u003e`","cool,","I","quite","understanding","But","Another","```C++","string","```","which","This","The","or","However,","Better!","What","The","Yeah,","I","Also,","Removing","I","Indeed","Also","I","Two","*","*","Agreed!","What","It","Consider","So","But","I","```C++","const","```","One","It's","```C++","const","if","```","When","```C++","if","```","However,","```C++","namespace","bool","{","return","}","}","//","if","```","We","Doh!","The","So,","This","So","This","However,","There","One","I","The","Your","A","One","I.e.,","I","I","Dialog(const","instead","Dialog(std::string","I","I","Let's","A","It","Running","Any","After","Try","Hi,","I","If","Looks","The","I","Have","http://www.boost.org/doc/libs/1_56_0/libs/tokenizer/tokenizer.htm","While","Thanks!","Mostly","I","I","A","*","*","*","*","If","However,","I","Slightly","I'd","Also,","I've","I","Instead","if","you","if","*","*","1.","1.","1.","I","I","You","The","I","I","I","I","Using","You","I'm","I","(I","Some","I","Doesn't","Has","Just","I'm","Not","```","if(","```","in","The","-","The","-","-","-","-","Why","I","But","`string",",","Also,","This","The","But","Hi","here","1)","2)","For","```cpp","bool","```","That","3)","I'm","I","-","*","-","*","*","The","My","Nice","But","```cpp","int","return","```","There","Also,","Nice","Nice","Just","```cpp","auto","if","it-\u003esecond++;","}","acc[word]","}","```","into","```cpp","acc[word]","```","I","Thank","Got","Integrated","What","Regarding:","using","I","Also,","Here","Also,","bool","bool","string","This","Have","1)","2)","I","I","Some","1)","2)","3)","4)","5)","And","You","Can","Using","Testing","I","You","I","However,","Hi","Thanks","I","What","I","This","your","This","```","namespace","std::string","//code","}","}","```","or,","```","class","public:","static","//code","}","};","```","Good","There","Wasn't","This","Elected","I","Would","Looks","This","Apparently,","And","Iteration","This","Elected","I","Would","bob::hey","Inital","I","In","Looks","1)","2","for","```","in","I","The","You","I","The","You","I","I'm","edit:","I","Have","Alrighty","The","Looks","A","I","I","I","I","(I","I'm","The","```cpp","return","```","which","But","```cpp","const","const","return","query.find_first_of(","```","The","By","1.","2.","3.","-","-","4.","I","But","However,","Personally,","I'm","Almost..","it","```","std::string","```","which","@dillan:","I","namespace","std::string","};","```","Good","I","At","Though,","Also","One","Also,","Complete","Same","Suppose","Added","I'd","Since","I","In","I'd","It","many","As","A","1)","string","of","e.g.","```bool","```","2)","For","```std::all_of(str.begin(),","```","Not","I","In","Try","Your","very","props!","put","```","[`find_first_of`](http://example.com)","```","ok","*","*","Regarding","Generally","Use","It","It's","Isn't","You","I","*","*","*","*","*","*","for","Another","Some","a)","b)","c)","Why","Why","You","Don't","My","I've","I","Basically","To","Since","I","Additionally,","The","Also","data","```for(","```","making","After","The","How","@mina","Two","1)","2)","It","Yes,","Thanks,","Looks","Two","1)","2)","I","In","Through","I'm","I","As","I","Then","I","Anyway,","I","I","Thanks,","I've","Using","Nice","So","The","You'll","Thanks","I","Hey,","It","This","Interesting","The","My","I","I","There","Only","I","I","I","else","return","}","I","If","return","I","Hmm,","Maybe","char","Anyway,","Since","Is","A","```c++","namespace","std::string","}","```","Fixed","@jimmy","What","I've","If","I'm","By","I","I","(1)","(2)","```question.erase(","\u003ctab\u003estd::find_if(","\u003ctab\u003e\u003ctab\u003equestion.rbegin(),","\u003ctab\u003e\u003ctab\u003e[](std::string::value_type","\u003ctab\u003equestion.end());","```","(3)","This","Perhaps","Looking","Your","(*","However,","(1)","(2)","(3)","(4)","@devon-mad","Unfortunately","@devon","Non-member","Checking","So","1)","2)","1)","2)","I","Bob","Looks","__Changes","\u003cul\u003e","\u003cli\u003eThe","\u003cli\u003e`fillDictionary()`","\u003cli\u003eTransforming","\u003cli\u003e`m_anagram`","\u003c/ul\u003e","\u003c/br\u003e","__Note:__","I","One","\u003cul\u003e\u003cli\u003eMy","\u003c/ul\u003e","__Procedure__","\u003col\u003e","\u003cli\u003e","\u003cli\u003e","\u003cli\u003eif","\u003cli\u003eThe","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003e","\u003cli\u003eBecause","\u003c/br\u003e","I","I","-","-","-","-","-","I","What","I'm","it","you","If","something","```","for","char","if","is_anything","}","```","could","```","for","is_anything","```","-","-","-","I","1)","2)","You","You","You","Wanted","I","Yeah.","Thanks","I","I","Remember,","Also,","Wow.","I","There","The","Secondly,","On","Good","As","I","For","Line","I","I","Just","Also,","In","Note","for","There","-","-","-","-","-","-","-","I","I'm","And","Moved","I","Stylistically,","Also,","I","Why","(minor","I","I","I","I'm","Thanks!","This","-","-","Additionally,","-","-","-","This","once","```","istringstream","map\u003cstring,","string","while","++count[word];","}","```","the","The","Inside","@kirstin","Thanks","Don't","I","Hmm,","To","Thanks","1)","2)","I","Oh,","The","Bool","I","This","I","Your","I","```std::string","std::transform(word.begin(),","```","I","So","I","This","Also,","Also,","Something","(See","Your","And","Really","My","Thats","I","Just","Pulled","Thanks,","I","I've","Got","Cleaned","Shortened","Ahoi","1)","2)","3)","4)","I","In","```cpp","void","for(int","s","std::cout","}","```","Say","But","After","To","Would","Looks","In","Also","Sorting","Thoughts?","Yes,","removed","Adding","However","Hopefully","This","I","Nice,","One","I'd","Did","Also","Short","I","The","Thanks.","Funny,","Forgot","The","I","I","Good","Guess","Moved","I","Perhaps","Can","There","Good","The","Encapsulating","First,","Second,","statics","@summer","You","I","I","`namespace","string","//implementation","}","}`","That","Nobody's","this","I","I","It","At","thanks","Nicely","1.","2.","You","-","-","-","-","thanks","Thank","While","I've","Also,","I'm","This","Ty,","I","Well,","Come","Yea","Kinda","A","But","Hey","got","1)","2)","I","I","Example:","```","..!longword@,?...","^","start","```","Basically,","You","(Alternatively,","I'd","One","An","If","I","Example:","```","..!longword@,?...","^","start","```","Basically,","You","I","@murray","I","```cpp","void","std::string","for(int","s_func","std::cout","}","```","I","Clearly","Thanks","Now,","Hi,","You","It","For","I","Have","Which","\u003e","Not","Regarding","I","But","1)","2)","So","This","Yea,","You","You","Lastly,","Ahoi","couple","1)","2)","3)","Getting","std::transform","If","word.reserve(std::distance(start,","Your","C++","I","Use","I","I","```","$","#include","#include","int","{","std::string","int","for(int","{","int","if","std::cout","last","s.push_back('x');","}","}","$","g++","$","0:","1:","2:","3:","5:","9:","17:","33:","65:","129:","257:","513:","```","@zelma","You","```C++","std::all_of(str.begin(),","```","Pass","You","Why","Also,","Hello,","I","Cheers!","edit:","Looks","Also,","Hello","I","I","1.","2.","In","to","Hope","Cheers!","For","Ahoi","Personally,","I","Other","I","Hi!","I'm","`returnValue[wordBuffer]`","The","In","\u003e","the","`find_if`","```cpp","auto","//iterate","while(","//find","auto","//from","auto","//This","std::string","//increment","my_map[word]++;","//we've","//for","curr","}","```","You","@ashley","However","However","Hmm,","I","Because","Why","That","Thanks","Thanks","As","No","Also,","Have","[Here's](http://ideone.com/St5txW)","Yea,","One","If","Usually","But","Thanks,","uses","by","maybe","currently","have","Instead","e.g.","Seriously","C++","__Procedure__","\u003col\u003e","\u003cli\u003e`bob::hey`","\u003cli\u003e`evaluate`","\u003c/li\u003e","\u003cb\u003eiff\u003c/b\u003e","\u003cli\u003e","`isType(const","\u003c/li\u003e","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003eBecause","Hey","*One","\u003cul\u003e\u003cli\u003e","\u003c/ul\u003e","\u003c/br\u003e","__Changes","\u003cul\u003e","\u003cli\u003eCode","\u003c/ul\u003e","__Procedure__","\u003col\u003e","\u003cli\u003e`bob::hey`","\u003cli\u003e`evaluate`","\u003c/li\u003e","\u003cb\u003eiff\u003c/b\u003e","\u003cli\u003e","`isType(const","\u003c/li\u003e","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003eBecause","Did","Did","C++","Yes","At","if(not","I","Basically","Question","int","Is","__Procedure__","\u003col\u003e","\u003cli\u003e","\u003cli\u003e","\u003cli\u003eIf","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003e","\u003c/ul\u003e","\u003c/br\u003e","__Changes","\u003cul\u003e\u003cli\u003eHandles","\u003cul\u003e\u003cli\u003e`line","__Procedure__","\u003col\u003e","\u003cli\u003e","\u003cli\u003e","\u003cli\u003eIf","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003e","\u003c/ul\u003e","\u003c/br\u003e","@adolfo,","__Changes","\u003cul\u003e\u003cli\u003eLarge","\u003cul\u003e\u003cli\u003e.cpp","\u003cli\u003eThe","has","\u003cli\u003eBetter","\u003cli\u003e`regex_search`","\u003cli\u003eExpressions","\u003cli\u003eQuicker","__Procedure__","\u003col\u003e","\u003cli\u003e`bob::hey`","\u003cli\u003e`evaluate`","\u003cli\u003e","`isType(const","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003eBecause","Moved","__Changes","\u003cul\u003e\u003cli\u003e","\u003cli\u003e`enum","\u003cul\u003e\u003cli\u003eI","\u003cli\u003eReformatted","\u003cul\u003e\u003cli\u003eCode","\u003cli\u003e`sentence`","\u003c/ul\u003e\u003c/li\u003e","__Procedure__","\u003col\u003e","\u003cli\u003e`bob::hey`","\u003cli\u003e","`isType(const","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003eBecause","\u003cli\u003eBecause","I","With","Hey","Thanks","I","What","Iostream","Changes","*","*","Question:","```cpp","vector\u003cint\u003e","int","if","cout","}","else{","cout","}","```","EDIT:","Changes","*","*","Hi","You","http://exercism.io/submissions/ccd69a4e96bf6990d6d487fc","Cheers!","The","This","PS.:","I","I","Take","Hi","Peronally","I","Cheers!","`Bob.h`","I","```cpp","if","found_upper","}","```","It's","But","True,","But","I","I","I","First","```cpp","std::string","std::transform(","```","Second","```cpp","std::string","word.reserve(","std::transform(","```","Third","```cpp","std::string","std::transform(","```","The","```","Character","Words1:","Time:","Max","Words2:","Time:","Max","Words3:","Time:","Max","```","Ran","Turns","I","Trade","Looks","Had","```cpp","if","output_map[c]","}","else","++output_map[c];","}","```","to","```","++output_map[c];","```","But","Now","The","Switched","I","I","remove","my","sort()","the","compare","Yes.","Ahh","How","the","Just","Very","I","Changed","Wow!","@wallace","O(n^2","there","http://en.wikipedia.org/wiki/Sorting_algorithm","and","__I","Infact,","I","Thanks","TAOCP","*","*","*","and","The","I","The","...","is_question","Added","Returning","Moved","It","Declaring","This","Perhaps","I","You","```","if(","```","The","You","Hi.","Do","Remember","Thanks","This","Hi.","Just","Hi.","Also","Your","If","Yikes!","__Changes","\u003cul\u003e","\u003cli\u003e`std::sort`","\u003c/ul\u003e","\u003c/br\u003e","__Procedure__","\u003col\u003e","\u003cli\u003e","\u003cli\u003e","\u003cli\u003eif","\u003cli\u003eThe","\u003c/ol\u003e","hello","I","I'll","I","a","I","It","Went","I","Nice,","i","hello","it","if","line","you","hi","if","maybe","so","```","if(letter","++numSpaces;","}","//Counting","else","```","either?","Hi","Thanks","I've","I've","Your","Yes,","I'm","What","I","I","Hi","The","(int_char","(int_char","and","I've","Used","...well","@ruben,","@cameron,","It","1)","2)","Following","There","Comments","About","What","(What","What","@aliya,","1st","2nd","a.","b.","now,","O(len(word))","which","in","*","*","and","input","Rather","Tried","I","oh!,","i","but","I've","if","then","won't","in","(conv.back()","to","letter","Thank","Now,","Instead","Regex","There","I","```C++","if","difference++;","```","instead","Now","This","use","Is","I","D'oh,","I","Converted","Oh","My","This","Line","Lines","Lines","This","The","Also,","This","I","It's","The","It's","Also,","It","This","The","Next,","Lastly,","@liliana","Thanks","It's","Next,","Last,","Code","Thank","While","I","Originally","Feedback","Your","One","This","Thank","I","For","I'm","One","No","Almost:","And","(Then,","cctype","Wow","Thanks","I","I'm","While","Also,","Good","I","I","Also,","The","@haven","I'm","The","Nice","I","Nice","I'm","Similarly,","Let","Great","Thanks","I'm","If","As","But","In","One","Looking","1.","2.","Hello","Reading","One","I","That","I","Trade","-=-=-=-=-=-=-","-xpressive","-added","-used","Changed","Nice","I","After","Nice","I","My","After","Nice","For","Coming","Nice","For","This","I","Now","`checkPoke`","`checkYell`","`checkQuestion`","Again,","Nice!","This","It's","If","\u003e","@ramona,","I","Nice","*","*","@pasquale","In","In","I","I","I","I","PS","Nice","I","Calling","Testing","Using","Changed","Because","The","Your","@micheal","Using","Using","Kept","Your","The","Hi,","I","I","Thank","I","Looking","You","for","{","char","//etc.","}","as","for","{","//etc.","}","you","if","as","if","and","if(","{","return","}","return","as","return","-","-","This","The","P.S:","http://help.exercism.io/getting-started-with-cpp.html","-","-","-","I","You","The","The","I","In","I","From","Nice","-","-","Very","I","Nevertheless,","I","I","Regular","This","I'm","Now","Converted","http://stackoverflow.com/questions/1434937/namespace-functions-versus-static-methods-on-a-class","The","I","Essentially","On","This","When","I","As","I","This","std::valarray","I","The","I","The","Another","Looks","Also,","@joan","I","@everett-au","The","@destini","However","I","You're","In","Anyway,","This","I","If","You","```std::sort(root_word.begin(),","Maybe","Also,","After","I","I","New","For","```c++","BOOST_AUTO_TEST_CASE(count_everything_just_once)","{","const","const","REQUIRE_EQUAL_CONTAINERS(","}","BOOST_AUTO_TEST_CASE(handles_cramped_list)","{","const","const","REQUIRE_EQUAL_CONTAINERS(","}","BOOST_AUTO_TEST_CASE(with_apostrophes)","{","const","const","REQUIRE_EQUAL_CONTAINERS(","}","BOOST_AUTO_TEST_CASE(with_free_standing_apostrophes)","{","const","const","REQUIRE_EQUAL_CONTAINERS(","}","BOOST_AUTO_TEST_CASE(with_apostrophes_as_quotes)","{","const","const","REQUIRE_EQUAL_CONTAINERS(","}","```","@madisen","I","Hmm,","Nice","That","Interesting.","to_lower","I'd","I","I'm","I","The","Really","A","The","Also","As","http://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier","Updated","There's","Decided","Nice","It","Nice","Not","My","1.","2.","For","The","The","I","The","Could","```c++","(!std::isalpha(*it))","```","Is","```c++","!std::islower(*it)","```","This","Was","Thanks","The","It","I","(See","Just","It's","My","####","Firstly,","Your","While","####","In","If","You","Finally,","The","I","I","Nice","You","I","I","I","Using","This","You","Just","My","Rather","You","Also,","Consider","Also","Nice","You","Consider","I","The","Don't","I","Thanks!","Yes,","Thought","I","You","The","A","Nice","Good","I","This","I","I'm","This","I","Nice","I","For","Just","Maintained","Replaced","This","The","Agree","I","While","The","I'll","Thank","Kept","Thought","Positive:","Read","Nice","I'm","I","The","Not","Thanks!","I","Good","Just","The","Here","http://www.cplusplus.com/reference/random/random_device/","That","You","I","I","All","Unfortunately","```~/exercism/cpp/nucleotide-count/nucleotide_count_test.cpp:24:25:","'const","```","```~/exercism/cpp/nucleotide-count/nucleotide_count.h:15:30:","```","Altering","I","So","I","I'm","Fix","Updated","I've","I","Your","Consider","If","You","Consider","The","Good","I","Why","If","C++11","Use","I've","This","When","I","Did","-","-","-","I","I","I","Thanks","Thanks","Correct","I","I","I","The","If","Finally,","I","You","Good","Calling","```string.find_first_not_of()```","Why","You","Initialise","Thanks","@luisa","I","Made","So","The","Thanks","Looks","@noemi-au","I","Other","Do","Thanks.","Thanks.","I","##","Make","page","the","by","I","For","When","I","Thanks","I'm","You're","Thank","To","-","-","-","At","Thanks","I","As","Here","Also","What","```counter::counter(const",":","{","}```","Added","I","Used","Be","Considering","As","Nice","For","Yeah","I'm","On","Then","Nice","In","Using","I","Thank","Thank","@brock","Just","I","Your","In","In","In","Hi","I","My","In","Rather","Edit:","With","The","Nice.","@letitia-mad","After","I","You","http://mirkokiefer.com/blog/2013/03/cmake-by-example/","try","Tried","Made","So","@virginia","I've","The","\"The","So","Now","clear","pros:","easier","cons:","requires","iterates","trim","actually","has","I","Your","Also,","I","It","Is","Since","Have","isSilence","Final","I","hasLetter","Since","string.back()","Good","```C++","if","```","That","```C++","return","```","Why","I","Thanks","Nice","I","I","So","I'm","I","The","A","`hey`","Relatedly,","Finally,","Also,","I","Your","Worrying.","Reverse","Multiply","Changed","I","It","There","The","If","This","Now,","Hey,","I","Your","You","The","As","@effie","Will","I","I","About","You","I","Need","Apparently","You","-","-","Should","`long`","`1e9`","Line","@chaim-slm","Again,","Should","I","#if","line","To","EDIT:I","Since","The","\"The","that","of","Ignoring","@alverta-C","Recursively","It's","New","`for","\u003cb\u003e\u003ch1\u003e","Trimmed","made","Would","Appreciate","I","I","Really,","Are","Looks","Small","This","I","You","Interesting","Minor","Hi","I","I'm","Good","Updated","You","No","Looking","In","To","I","The","You're","My","Removed","Interesting","Have","This","Changes","-","-","Wanted","`main()`","In","In","Okay,","Right","`hey()`","Last","thank","In","maybe","Used","Looks","Only","I","-","-","-","-","In","Thanks","First","As","In","I","That","Lines","Once","Not","I","Once","I","Points","Thanks","\u003ch1\u003eIteration","This","Some","I","Appreciate","There","I","I","N.B.:","```","sing(int","```","in","It","Complete","String","Looks","Also","Looks","IMHO:","-","-","Code","To","Why","Passing","I","Good","You","```for","//","cout","}","````","Note","Just","Bit","This","In","I","Also,","Hi","Also,","Nice","I","Also,","I","Now","Thank","Not","The","This","Added","I","I","Hmmm.","Although","Modulus","you","Seeing","This","Thanks.","But","Could","Thanks","i","It","I","```","Running","/Users/koenlek/exercism/cpp/word-count/word_count_test.cpp:121:","Mismatch","Mismatch","Collections","/Users/koenlek/exercism/cpp/word-count/word_count_test.cpp:137:","Mismatch","Mismatch","Mismatch","Mismatch","Mismatch","Mismatch","Collections","***","make[2]:","make[1]:","make:","```","Not","I","My","Good","EDIT:Never","thanks","No","Not","The","Also,","Looks","I'm","The","Hmmmm.","It","Made","I","https://github.com/exercism/xcpp/issues/22","I","I","-","-","Thanks,","I'm","I","namespace","class","public:","anagram(std::string","}","}","it's","This","Thanks","anyway,","Any","There","Just","This","Neat,","I","I","At","Subsequently,","@tommie","Your","Doesn't","Realized","The","I","I","The","True","It'd","I","However,","That","Good","I","Logic","Yes,","There's","Thanks.","I","Would","¿Por","Buen","Nice","Also,","Great","You've","As","Thanks","I'm","On","I","I'm","I","This","This","This","I","Appreciate","Spent","The","Added","Looks","Since","A","I","My","What","What","I","I","const","isYelling","isQuestion","isNothing's","Another","oh","What's","nice","I","I","I","The","You","````c++","namespace","{","unsigned","{","//etc","}","unsigned","{","//you","}","}","````","You're","I","Keeps","I","Take","Ah,","I","While","```cpp","for","```","It","On","```cpp","transform(dna,","```","All","```cpp","template","void","std::transform(begin(c),","}","```","Pushing","You","```cpp","//","std::string","for","c","```","Also,","```cpp","//","auto","```","It's","There's","I","So","I","I","Made","Looks","Looks","My","You","One","Look","Check","Oh,","Also,","Look","Also,","Look","Good","Look","Look","You","Check","Have","With","1.","```cpp","using","```","2.","```cpp","anagram(const","...","}","```","3.","4.","```cpp","SubjectMap","for","++map[c];","```","5.","```cpp","for","```","6.","You","Three","1.","```cpp","using","StringVec","```","2.","```cpp","for","```","3.","```cpp","for","...","if","continue;","sort(...);","if","matches.push_back(word)","}","```","That","For","-","-","-","-","-","-","I","http://www.boost.org/doc/libs/1_33_1/libs/tokenizer/char_separator.htm","Regarding","`#include","and","`#include","I","What","And","I","using:","windows7","vs2013","The","Hamming.h","I","Now","You're","yes","I","modified","This","Boost","What","JAC42,","I","And","Did","Using","To","Hi,","This","Whew,","Thank","This","Apostrophes","You","```","[]","return","}","```","with","Same","Should","Yes,","`all_of`returns","Your","Might","I've","```","if","return","}","if","return","}","...","return","```","I","Looks","you","std::transform(lowerCaseCandidate.begin(),","to","\u003e","This","So","Please","```","//","std::make_pair(1,","//","{1,","```","Please","Salvaging","I","Thanks","1.","2.","3.","Also","I","I","You","I","1.","2.","If","Yes.","I","whoops","Hi,","First","I'll","HI,","I","space_age()","_Then_","Hi,","The","Hi,","Your","Hello,","Great","Again","Awesome,","The","I","Thanks","yep,","and","Hello,","First,","My","Then","anagram(const","{","Instead","anagram(const","{","/","}","Anyway,","Hello,","This","Only","Hello,","Cool","Thanks","```inline```","Would","\u003ca","Hi,","I","Neat,","Nothing","More","Removed","I","that's","can","I'm","Hello,","Fist,","1)","2)","for","output[character]++;","Then","3)","Good","Hello,","Going","Hello,","Congratulations","1)","2)","3)","4)","Congratulations","Thanks","In","I","I","-","-","Thank","This","In","I","Thanks","2.)","3.)","I","A","Hello,","Congratulations","1)","2)","3)","for","ret.push_back(","Good","Hello,","I","About","for","ouput.push_back(","Good","Hello,","Congratulations","1)","switch(","{","case","return","break;","No","2)","3)","4)","for","tempStrand.push_back(","Anyway,","Hello,","I","1)","2)","3)","Thanks","Not","I","Hello","1)","2)","Pro","\u003cul\u003e\u003cli\u003eFaster*\u003c/li\u003e\u003cli\u003eReadability\u003c/li\u003e\u003cli\u003eError","Pro","\u003cul\u003e\u003cli\u003eFewer","*This","3)"]},{"Key":" Thank","Fragments":["your","you","you","you","Thomas.","you.","you.","you.","you","you","you.","you.","you.","you.","you.","you","you.","you.","you.","you.","you","you!","you","you","you","Carljv,","you","you","you","you","you.","you.","you.","you.","you.","you.","you.","you","you","you","you","you","you","you","you","you","you","you!","you","you"]},{"Key":"Thank your","Fragments":["for"]},{"Key":"your for","Fragments":["your","loop.","loop.","loops","loop.","loop","loop","loop","loop."]},{"Key":"for your","Fragments":["comments","comments.","to_string()","to_string()","specific","feedback.","comment.","explanation,","input.","feedback","conditional","suggestions.","feedback","comment!","feedback,","feedback.","comment,","great","caller","parameter","suggestion.","sorted-string","detailed","nitpick,","comment.","suggestions!","comment's","careful","`for`","comments.","comments.","comments","comments.","code","nitpick.","way.","nitpick!","project","feedback.","IsUpper","yelling","comments.","comment.","valuable","input.","feedback!","suggestions!","feedback!","suggestions!","names.","member","feedback.","comment.","general","nitpick!","input.","time.","total.","score.","hamming","count","\"length\"","\"diff\"","result","\"d\"","thoughtful"]},{"Key":"your comments","Fragments":["and","in","-","are","sooner."]},{"Key":"comments and","Fragments":["encouragement,","no","clear","aptly"]},{"Key":"and encouragement,","Fragments":["JAC42."]},{"Key":"encouragement, JAC42.","Fragments":["The"]},{"Key":"JAC42. The","Fragments":["next"]},{"Key":"The next","Fragments":["iteration","good","logical","test","ones","stem"]},{"Key":"next iteration","Fragments":["includes","and","actually","i","now.","and","instead"]},{"Key":"iteration includes","Fragments":["your"]},{"Key":"includes your","Fragments":["suggestions.","header.","header"]},{"Key":" 1)","Fragments":["(switch)","Since","Your","By","Move","It","The","\"Thinking","That","I","In","map","Boost",".cpp","You","You","You","You","If","Are","You","Yea,","True,","It","True,","You","`returnValue[wordBuffer]","You","You","The","I","Making","Making","In","In","Switched"]},{"Key":"1) (switch)","Fragments":["Using"]},{"Key":"(switch) Using","Fragments":["a"]},{"Key":"Using a","Fragments":["switch","struct","namespace","few","map"]},{"Key":"a switch","Fragments":["reminded","but","needs","statement.","statement","will","for","statement","rather","statement","statement","statement","statement","between","instead","statement"]},{"Key":"switch reminded","Fragments":["me"]},{"Key":"reminded me","Fragments":["to","I"]},{"Key":"me to","Fragments":["handle","see","get","trim","the","do","continue","the","read.","be","add","make","think","align","recommend","know.","know.","it","see","eliminate","see","compare","re-create","either"]},{"Key":"to handle","Fragments":["the","tabs","words","the","```dna_string```","the","all","cases","non-whitespace","it","this","your","some","larger","inputs","the","this","the","states,","either","cases"]},{"Key":"handle the","Fragments":["possibility","counts","last","stripping","leak","sentence.empty()","error","map","case","additional","case","\"last","first","optimizations."]},{"Key":"the possibility","Fragments":["of","of","of"]},{"Key":"possibility of","Fragments":["an","a","specifying","buffer"]},{"Key":"of an","Fragments":["invalid","application","empty","if","empty","if","exercise","expression,","unhappy","int,","unusual","individual","indirect","entire","entire","entire","object.","enum","attempt","object","if..then..else"]},{"Key":"an invalid","Fragments":["argument.","nucleotide","nucleotide","input","input.","object"]},{"Key":"invalid argument.","Fragments":["I"]},{"Key":"argument. I","Fragments":["had","had","prefer"]},{"Key":"I had","Fragments":["considered","a","overlooked.","planned","used","difficulty","compile","tunnel-vision","an","to","not","different","a","lying","some","to","the","wound","in","an","a","simply","to","disagreed","always","never","to","a","set","my","actually","seen","understand","forgotten","to","it","on","only","to","to","the","with","to","seen","overreacted.","to","no","a","to","to","much","to","to","to","to","to","some","to","to","to","no","the","to","considered","to","already","a","to","to","problems","a","a","exaugsted","to","not","though","added","considered"]},{"Key":"had considered","Fragments":["a","using","using"]},{"Key":"considered a","Fragments":["switch","small","the","type","delimiter","non-forceful","word","word","separator"]},{"Key":"switch but","Fragments":["choose"]},{"Key":"but choose","Fragments":["a"]},{"Key":"choose a","Fragments":["map","particular"]},{"Key":"a map","Fragments":["because","of","like","is","of","from","and","where","with","brings","might","is","and","rather","for","I","character","return","return","like","to","to","to","is"]},{"Key":"map because","Fragments":["the"]},{"Key":"because the","Fragments":["mappings","tests","order","external","possible","map","function","range","error","declaration","integer","same","way","letters","optimizer","third","exact","constructed","question","`isSilence`","\u0026","unit","regex","call","trial","subject","first","`if`","_the"]},{"Key":"the mappings","Fragments":["are"]},{"Key":"mappings are","Fragments":["listed"]},{"Key":"are listed","Fragments":["in"]},{"Key":"listed in","Fragments":["a"]},{"Key":"in a","Fragments":["single","namespace","header","constant.","header","header","vector","\"clever\"","warning.","second.","managed","while","hurry","new","single","`if`,","class","function,","container,","`cmake`","more","reference","namespace,","file","day","lambdas...","bug","map","switch","new","case","header,","separate","template","future","header.","std::string,","header.","constant-time-accessible","read-only","few","header","header","way","new","header","lot","place","pure","different","higher-scoped","header","way","header,","header.","different","header","matter","namespace.",".cpp","way","class","code","header","header",".cpp","source","valid,","source","template","single","single","single","std::array\u003cchar,402\u003e","header,","given","header","more","new","particular","variable):","'.'","vector.","vector,","calculation","particular","binary","way",".h","separate","single","unnamed","statement","local","known","meaningful","header,","couple","map","compiler","place","header","(possibly",".cpp","long","local","real-world","way","nice","readable","readable","C++","single","place","couple","single","variable.","moment,","scope","namespace","namespace","statement","header","row.","variable","function.","bigger","header","string:","string;","translation","namespace,","class.","class","separate","header","header.","dictionary","way","namespace","bob","class","readable","readable","negative","namespace","header","default","given","header","couple","separate","const","macro","lot","helper","class","different","header","few","sense","few","situation","debug","dictionary","different","while","future","c++","variable","constructor","pre-initialized","random","case","reference","separate","flag.","git","string","few","round","string,","larger","position","position","position","position","position","position","position","position","number","null","gregorian","single","negative","bob","bit.","register","constructor","few","super","copy","super","reference.","copy","string"]},{"Key":"a single","Fragments":["line","char,","return","line,","equation","function","line,","statement","time.","argument","screen","regex","string?","regular","iteration","iteration","word.","transform()","permutation","pass?","loop,","loop,","function.","file.","item","thing","binary,","digit","string","item","statement.","declaration","authority","function.","straight","alpha","word","unified","vector","vector","definition,","cache","static","return","execution","function","call","task.","function,","match","function","uppercase","pass","`for`","function","call","pass-through","passage","iteration,","step.","character","value","incrementing","variable,","pass"]},{"Key":"single line","Fragments":["where","of",";)"]},{"Key":"line where","Fragments":["a"]},{"Key":"where a","Fragments":["switch","string","std::string","bunch","number-only"]},{"Key":"switch needs","Fragments":["more"]},{"Key":"needs more","Fragments":["vertical"]},{"Key":"more vertical","Fragments":["space"]},{"Key":"vertical space","Fragments":["to"]},{"Key":"space to","Fragments":["express"]},{"Key":"to express","Fragments":["the","your","in","in","in","the","the"]},{"Key":"express the","Fragments":["same","`N`","decision","logic."]},{"Key":"the same","Fragments":["idea.","if","thing:","value","second.","second","second,","value","sequence","name.","two","sequence","as","data","thing;","word\u003e)```?","name?","name.","i.e.","(except","C-style","as","design","NameGenerator","effect","level","so","class","as","namespace?","way","way","way","way","way","way","functionality","thing","comparison","column","size,","basic","effect","as","line","column,","as","as","as","thing.","effect","executable","name*","-","as","program.","thing","arithmetic","name","syntax","as","letter,","letter,","(lexicographical)","word.","string.","reason","problem","symbols","stuff","compilation","header","solution","as","but","program.","value","as","error.","as","scope,","thing,","current","as","function","type.","technique","logic","(in","thing,","(since","loop,","way","type,","style","as","by","logic.","output).","language.","object","case","length","number","performance-wise.","job","thing,","characters.","length","words.","as","length","letters.\u003c/li\u003e","length","letters.\u003c/li\u003e","thing","mistake","as","problem,","functionality,","as","thing,","in","company.","memory","scope","way","goal","program.","logic","as","methods","semantic","executable","effect","semantic","for","way","header.","expression","as","length","characters.","length","letters.\u003c/li\u003e","value","candidate","candidate","if","as","for","code","string","holds","number","way","length","amount","letters","as","and","elements","mapping","dictionary.","as","length).","thing","thing","thing.","but","as","exercise","decision","name","results","(in","mistake.","thing.","length,","problem.","length","size.","in","way","as","type"]},{"Key":" 2)","Fragments":["(for","I","I","I","Write","There","Yes,","I","I","Instead","Less","Const","Header","When","Afaik,","I","Depending","You","Why","True.","I","What","If","You","As","Regexs","Instead","Can","Why","It","I","In","Using","Interesting."]},{"Key":"2) (for","Fragments":["loop)"]},{"Key":"(for loop)","Fragments":["Agreed."]},{"Key":"loop) Agreed.","Fragments":["This"]},{"Key":"Agreed. This","Fragments":["loop"]},{"Key":"This loop","Fragments":["is"]},{"Key":"loop is","Fragments":["much","skipped","appropriate.","when","non-standard.","a","more","bit","iterating"]},{"Key":"is much","Fragments":["more","too","more","more","more","more","more","more","better","like","cleaner.","simpler","longer.","shorter","more","cleaner","more","nicer","simpler.","cleaner","more","faster"]},{"Key":"much more","Fragments":["concise.","modern.","explicit","readable,","compact:","difficult...","convenient","error-prone","code","readable","clear","efficient","importantly","home","sense","sense","clear","complicated","clear","readable","standardized.","readable","succinctly.","easier.","readable","messy"]},{"Key":" 3)","Fragments":["(push_back)","You","Put","I","Thanks,","I","Given","A","IsShouting","RemoveBlankCharacters","std::map","In","Instead","I","You","Use","instead","You","To","Didn't"]},{"Key":"3) (push_back)","Fragments":["Knowing"]},{"Key":"(push_back) Knowing","Fragments":["that"]},{"Key":"Knowing that","Fragments":["the"]},{"Key":"that the","Fragments":["element","string","OR","names","triangle","reply","input","new","numbering/ordering","functions","regex","constructor","vector","constructor","initialization","`hey`","compiler","COUNT","two","fact","code","compiler","original","old","very","input","code","README.md","first","tests","header","`else`","other","`anagrams`","first","iterator","string","definition","other","reference","result","fall","kind","initialisation","advantages","performance","pop_back","values","value","only","use","current","user","code","maximum","arguments","first","result","accepted","speed","treatment","```is_lower```","`switch`-with-`enum`","rules","function","regex","flow","```trim_right```","difference","definition","de-facto","difference","loops","header","test","difference","behavior","other","test","old","temporary","|","value","underscore","generated","compilers","definition","C++","details","remaining","used","address-of","std::isXXX","first","input","input","use","`if(","other","enumeration","\"C","way","mismatched","program","same","underscore","`using`","work","function","verse-building","min_len","length","default","`nameset`","tests","nth","program","tests","string","submitter","map","brute","tests","first","check","distance","compiler","compiler","string","real","duplication"]},{"Key":"the element","Fragments":["mush","is","in","in"]},{"Key":"element mush","Fragments":["be"]},{"Key":"mush be","Fragments":["a"]},{"Key":"be a","Fragments":["single","no-no","PITA","sufficiently","good","fixed","`switch`","const","response","big","yell,","nicer","reference","memeber","bit","straight-forward","performance","good","problem","default","function","better","good","faster","much","leap","const","little","const","good","great","good","help!","change,","few","way","separate","neat","substantial","tiny","way","move","class","problem","part","std::for_each,","slightly","prime","while","problem","string.","char","char[12].","little","'\\0'.","pattern","bit","second","huge","bit","question?","way","'?'.","question?","headache","considerably","divide","memory","good","namespace","useful,","template","nice","```std::pair\u003cint,","member","preceeding","separate","simple","namespace","namespace.","bit","bad","class.","bit","small","third","bit","decent","sort","problem.","premature","copy_if","sign","static","typo.","class","good","const","yell,","good","performance","lot","static","faster","better","good","good","way","loop","lot","more","bit","good","range","letter.","better","bit","shout","little","little","more","match","little","problem","good","pretty","potential","good","`const","bad","nice","bit","good"]},{"Key":"single char,","Fragments":["appending"]},{"Key":"char, appending","Fragments":["with"]},{"Key":"appending with","Fragments":["push_back()"]},{"Key":"with push_back()","Fragments":["makes"]},{"Key":"push_back() makes","Fragments":["sense."]},{"Key":" Fixed","Fragments":["the","the","the","lambda"]},{"Key":"Fixed the","Fragments":["type","accidental","`operator"]},{"Key":"the type","Fragments":["of","changes","up.","of","of","should","is","system.","issues","and","of","of","changes.","of","I","and","choice).","array","of","deduction","of","is","you","of","of"]},{"Key":"type of","Fragments":["`not_equal_to`,","`string`","the","the","a","the","object","a","the","that","the","hey","input.","imput/output","prompt","(c=='1')","something","each","pattern","this","idea","the","idea.","not_equal_to"]},{"Key":"of `not_equal_to`,","Fragments":["thanks"]},{"Key":"`not_equal_to`, thanks","Fragments":["to"]},{"Key":"thanks to","Fragments":["@ari","your","@katlyn's","you!","everybody","@alfredo","well-placed","the","feedback","good","feedback","suggestions"]},{"Key":"to @ari","Fragments":["for"]},{"Key":"@ari for","Fragments":["pointing"]},{"Key":"for pointing","Fragments":["that","that","it","this","this"]},{"Key":"pointing that","Fragments":["out.","out!"]},{"Key":" 1.","Fragments":["It","You","Yes,","You","The","in","You","True,","There","Are","Same","Which","`pow`","This","`c","`c","I","I","The","Apart","Good","Good","Implementation","Consider","Cosider","use","`check_uppercase`","Consider","I","No","Consider","Why","Move","You","I","Why","That's","I","Yes,","Used","Why","hey()","I","bob","basically","Good","If","Have","The","Simplicity.","In","`x","Compiler","This","This","The","Make","to","The","simple","\"Bridge\"","typedef","Take","I","Store"]},{"Key":"1. It","Fragments":["is"]},{"Key":"It is","Fragments":["`char`","also","possible","in","new","used","clearer","difficult","fast,","not","used","common","loaded","very","certainly","easier","possible","also","`gcc","pretty","specific","a","indeed","really","a","not","C++","not","much","faster.","good","not","OK","certainly","really","not","also","using","called","just","possible","pretty","succinct","succinct","more"]},{"Key":"is `char`","Fragments":["because"]},{"Key":"`char` because","Fragments":["that"]},{"Key":"because that","Fragments":["is","doesn't","is","would","only","factor","would"]},{"Key":"that is","Fragments":["the","to","to","not","to","implementation","(to","not","the","what","definitely","implemented","the","safely","just","normally","that","valid","that","an","what","not,","a","to","redundant,","of","something","not","an","part","used","not","more","not","in","already","built","an","not","not","true,","practised","not","easily","defined","the","one","ok.","not","sorted.","a","bigger","embedded","the","correct,","it","pretty","not","1-to-1","talking","as","not","why","returned","not","a","definitive","all","demanded.","used","how","how","how","how","what","checked,","how","truly","not","alphabetic","still","more","acceptable.","not","not","not","it...","not","the","a","actually","needed","more","a"]},{"Key":"is the","Fragments":["value","best","value","root","```for","logical","right","sort","run-time","interface,","same","use","c++","loop","function","one","same.","square.","cause","return","default.","const","same","flexibility","exact","same","code?*","'R'","capacity","same","default","additive","process","issue","best","best","best","sum","case.","way","same","same).","length","same","default.","current","same.","slower","one","video","one","type","website","math","templated","```process_encrypted```","same","name","header","right","using","const","best","google","size","size","2","fastest.","initial","length","anagram","right","meat","same","same","same","summation","substring","same","total","total","standard","overhead","separated","same","same,","purpose","first","obvious","preferred","way","most","same","**reference**","goal","input","better","input","word","tokenizer,","same","first","purpose","most","main","'c'","one","number","new","kind","erroneous","best","same","preferred","common","best","same","default","third.","real","use","call","fastest","C++11","init","actual","largest","use"]},{"Key":"the value","Fragments":["type","of","of","of","changes","in","of","of","of","2888","to","of","to","could","is","of","has","being","of","of","in","will","in","in"]},{"Key":"value type","Fragments":["of","it","needs"]},{"Key":"of `string`","Fragments":["(that's"]},{"Key":"`string` (that's","Fragments":["a"]},{"Key":"(that's a","Fragments":["container)."]},{"Key":" 2.","Fragments":["The","You","reverse_iterator","In","Got","in","You","I","`std::intmax_t`","Have","If","Yeah,","`1","Methodchaining","`c","`c","The","If","I","Use","Consider","As","Consider","Implementation","You","Using","Consider","Consider","I","I","Use","What","Think","It","If","Can","Whithout","To","Created","I","hey()","I","consider","yeah,","You","Explicitly","Why","Everything","Idiomaticity.","The","Why","Apply","to","I","compiler","Understand","initialize","The","I","Restructure"]},{"Key":"2. The","Fragments":["result","functions","constructor","same"]},{"Key":"The result","Fragments":["of","of","of","of","is"]},{"Key":"result of","Fragments":["that","thinking","me","**tolower**","the","the","adding","the","pow.","``prime_factors::of(922)``","the","the","`1`.","`9`.","arithmetic","the","pre-increment","pow:","that","the","`evaluate(sentence)`\u003c/li\u003e","`const","`evaluate(sentence)`\u003c/li\u003e","`const","`evaluate(sentence)`\u003c/li\u003e","back()","kludging"]},{"Key":"of that","Fragments":["comparison","shortcut","into","issue","already","is","expression.","properly.","giant","class","namespace.","grade","space","find_if","variable","code","many","class.","`for`","in","since","when","const","syntax","in","header.","function.","versus","sort","I","sort."]},{"Key":"that comparison","Fragments":["is"]},{"Key":"comparison is","Fragments":["`bool`","`n\u003c0`","done","equal"]},{"Key":"is `bool`","Fragments":["which"]},{"Key":"`bool` which","Fragments":["is"]},{"Key":"which is","Fragments":["passed","somewhat","basically","still","why","figuring","technically","where","not","just","the","which.","the","still","not","not","nice","incompatible.","faster.","fairly","like","a","the","pretty","the","log","constant","why","has","obviously","also","more","comparing","intereseting","why","not","also","great.","C","not","technically","not","O(n^2","mostly","not","comparable","a","apparently","not","also","more","fairly","a","0","rather","good;","IMO","important","very","an","potentially","there","better...","a","simple","a","more","a","why","why","evaluated","unnecessary","why","when","no","much","passed"]},{"Key":"is passed","Fragments":["to","to","off","by","to"]},{"Key":"passed to","Fragments":["`std::plus\u003cstd::size_t\u003e`.","a","`hey`","```hey```","words().","bob::hey.","`matches`","a"]},{"Key":"to `std::plus\u003cstd::size_t\u003e`.","Fragments":["Because"]},{"Key":"`std::plus\u003cstd::size_t\u003e`. Because","Fragments":["the"]},{"Key":"Because the","Fragments":["parameter","value"]},{"Key":"the parameter","Fragments":["type","`strDNA`","by","is","passed","names","by","is","to","before","is","\"s\""]},{"Key":"parameter type","Fragments":["does","you"]},{"Key":"type does","Fragments":["not"]},{"Key":"does not","Fragments":["match,","need","need","return","belong","already","require","need","match","exist","throw","make","affect","solve","have","implement","have","contain","work","always","seem","remain","contain","work","modify","pass.","allow","even","provide","have","add","have","have","handle","belong","pass","have","present","free","fit","convert","use","need","need","match","need","modify","trigger","have","require","require","mention","pass","seem"]},{"Key":"not match,","Fragments":["`bool`"]},{"Key":"match, `bool`","Fragments":["gets"]},{"Key":"`bool` gets","Fragments":["converted"]},{"Key":"gets converted","Fragments":["to"]},{"Key":"converted to","Fragments":["to","a","`double`"]},{"Key":"to to","Fragments":["`std::size_t`","some","then"]},{"Key":"to `std::size_t`","Fragments":["(`true"]},{"Key":"`std::size_t` (`true","Fragments":["=\u003e"]},{"Key":"(`true =\u003e","Fragments":["1`,"]},{"Key":"=\u003e 1`,","Fragments":["`false"]},{"Key":"1`, `false","Fragments":["=\u003e"]},{"Key":"`false =\u003e","Fragments":["0`)."]},{"Key":"=\u003e 0`).","Fragments":["That"]},{"Key":"0`). That","Fragments":["conversation"]},{"Key":"That conversation","Fragments":["is"]},{"Key":"conversation is","Fragments":["safe"]},{"Key":"is safe","Fragments":["as"]},{"Key":"safe as","Fragments":["of"]},{"Key":"as of","Fragments":["https://stackoverflow.com/questions/2725044/can-i-assume-booltrue-int1-for-any-c-compiler"]},{"Key":" I","Fragments":["like","took","had","would","really","like","chose","was","wonder","think","guess","like","forgot","tested","like","did","don't","put","was","changed","have","stuck","was","guess","had","see","only","don't","think","did","agree","think","did","am","wasn't","initially","can't","didn't","really","obtained","went","feel","like","fell","started","think","mostly","left","think","thought","can't","changed","could","know","am","also","like","wanted","don't","was","need","think","think","think","suggest","believe","wanted","enjoyed","just","like","love","made","think","actually","was","like","think","could","think","would","like","like","like","like","didn't","think","like","like","also","like","like","have","guess","would","would","added","would","would","also","was","agree.","see","think","liked","see","personally","think","like","had","don't","politely","personally","like","guess","like","don't","could","personally","agree","will","have","didn't","don't","wrote","hope","am","like","like","like","was","like","am","feel","wanted","think","probably","think","like","don't","disagree","did","think","like","don't","guess","did","disagree","definitely","would","think","disagree","might","do","guess","think","decided","would","do","don't","did","will","just","do","would've","don't","considered","like","see:","would","would","have","realized","decided","borrowed","agree","prefer","humbly","would","might","could","like","don't","was","think","wasn't","really","would","would","think,","usually","couldn't","think","think","prefer","-\u003e","think","come","figure","think","super","would","understand","definitely","normally","actually","mean,","would","think","really","incorporated","tried","feel","started","think","was","wish","agree","think","had","have","consider","also","agree","will","would","honestly","don't","think","meant","didn't","was","can't","don't","had","have","like","think","know","don't","really","uploaded","am","can.","think","did","leave","left","took","understand","knew","went","did","don't","don't","like","apparently","like","don't","don't","think","think","did","think","agree","like","don't","not","do","think","will","hated","can","think","actually","really","don't","could","think","really","don't","would","didn't","set","took","overstated","will","hope","like","feel","think","believe","think","recall","thought","agree","was","moved","have","took","put","forgot","picked","tried","will","agree","have","overlooked","decided","try","personally","chose","like","feel","also","suppose","also","was","think","think","tried","think","went","also","know","exposed","suppose","think","still","also","have","think","feel","like","also","fee","may","believe","simplified","hope","assume","like","think","get","know","have","like","don't","believe,","believe","can't","don't","believe","like","thought","think,","do","just","think","think","think","treid","meant","would","didn't","actually","used","also","don't","like","think","personalty","think","chose","suspect","moved","think","moved","am","tried","borrowed","believe","think","feel","just","think","like","am","haven't","don't","basically","will","have","think","think","wanted","can't","decided","have","made","didn't","see","got","always","think","like","totally","decided","programmed","liked","chose","think","love","think","rethought","also","found","found","wouldn't","personally","thought","don't","like","second","am","took","let","like","could","ultimately","do","agree","think","think","would","gave","also","don't","did","totally","find","think","think","wished","didn't","guess","don't","agree","don't","would","would","think","prefer","prefer","was","would","could","think","guess","guess","didn't","don't","don't","don't","learn","am","have","learnt","applied","only","have","could","broke","see","really","like","like","like","didn't","guess","added","find","think","don't","also","had","like","followed","guess","just","like","always","don't","realized","really","found","am","enjoyed","considered","also","thought","pared","was","have","benchmarked","thought","think","decomposed","don't","can't","don't","like","took","like","have","can't","figured","figured","tend","could","like","would","like","guess","think","actually","could","can't","notice","think","used","like","like","tried","think","studied","ended","test","check","would","tried","tried","really","think","could","first","think","only","didn't","personally","just","guess","found","learned","have","am","like","come","maximize","think","like","like","used","tried","like","like","like","don't","also","put","even","initially","think","agree,","only","got","like","felt","understand","would","wish","like","decided","had","believe","kept","was","decided","feel","moved","think","think","think","saw","guess","understand","figured","don't","don't","agree","wrote","think","have","have","also","like","know","tried","looked","practically","don't","could","would","wasn't","was","think","was","think","have","can","mostly","took","used","suggest","might","could","didn't","totally","like","am","wasn't","had","tried","like","like","originally","do","have","initially","plan","believe","originally","like","like","have","like","believe","am","have","have","chose","would","was","find","realize","agree","wasn't","have","looked","thought","considered","like","checked","like","really","think","really","do","like","don’t","also","actually","like","just","believe","decided","was","reworked","altered","had","also","think","wrote","will","don't","like","agree","like","really","think","used","went","also","was","could","would","think","like","usually","think","like","will","originally","then","took","agree","agree","think","just","would","made","don't","stored","have","can't","like","really","like","like","simplified","think","might","considered","choose","went","also","see","agree","meant","just","reworked","also","know","think","started","wrote","like","could","don't","have","think","admit","assume","had","suppose","got","typically","used","am","considered","was","had","don't","noticed","only","would","didn't","find","actually","did","figured","didn't","copied","would","would","don't","like","thought","tried","used","don't","like","decided","also","like","like","used","will","will","have","just","could","feel","did","should","have","can","agree","don't","would","don't","claim","should","didn't","had","made","did","think","didn't"]},{"Key":"I like","Fragments":["your","this","to","it.","that","the","the","how","it.","it","how","that","how","the","the","the","that","that","the","the","the","it.","construction","your","that","being","the","how","to","the","convertDigit","the","breaking","your","Ogonek,","the","this","the","'em","to","your","it.","the","the","a","writing","the","the","to","your","the","to","your","that","how","how","the","the","about","it","that","the","these","how","this","the","that","the","to","using","how","your","the","the","the","to","that","that","the","your","that","it.","your","your","that.","that","your","your","that","template","the","that","that","that","about","how","the","how","how","the","the","that","the","that","how","the","that","the","the","the","that.","the","your","the","it.","the","the","the","that","that","the","that","the","your","how","the","the","the","how","the","how","reading","that","your","the","your","to","your","that","the","replies","that","that","how","that","that","how","that","to","how","the","how","your","the","the","that"]},{"Key":"like your","Fragments":["new","trying","implementation","idea,","function","use","implementation.","way","to_lower","use","solution","version","`is_`","solution","namespace","use","use","use","intention","intention-revealing","use","use","yelling()","naming","indentation","matches","use","use","use","`verse`","test","use"]},{"Key":"your new","Fragments":["program","functions)","position?"]},{"Key":"new program","Fragments":["much","that"]},{"Key":"program much","Fragments":["better."]},{"Key":"much better.","Fragments":["You"]},{"Key":"better. You","Fragments":["are"]},{"Key":"You are","Fragments":["doing","correct,","iterating","right,","right,","right,","testing","right.","absolutely","right,","using","by","right,","using","iterating","right,","recreating","not","talking","obviously","more","comparing","right.","right,","right,","right","copying","copying","right","absolutely","supposed","supposed","writing","correct"]},{"Key":"are doing","Fragments":["a","in","now.","a","manually","and"]},{"Key":"doing a","Fragments":["good","```scan_string```","memcpy","lot","deep","lot","single","zip.","brute","empty","little","find"]},{"Key":"a good","Fragments":["job.","descriptive","optimization.","place","to","old","alternative","candidate","start","habit","shape","pool","habbit","reason","idea.","reason.","thing","thing.","reason","idea.","chance","default,","point","idea","idea.","idea","ol'","oppurtunity","job","name,","explanation","thing","idea","idea,","indicator","reason","idea","idea,","idea,","level","practice","solution.","thing","solution","idea","reason","idea","point","idea.","recursive","choice.","idea,","deal","idea","thought","decision.","way","idea","fit","bit","tradeoff","way","idea","reason","idea.","expressive","idea.","point.","move;","habit.","enough","chance","opportunity","name","point.","idea.","idea","knowledge","fit","suggestion,","overview","solution","thing!","example.","style","style","idea","start.","write","enough","link","place","practice).","choice.","job.","thing.","idea.","submission!","job,","job,","job,","submission."]},{"Key":"good job.","Fragments":["A","You"]},{"Key":"job. A","Fragments":["couple"]},{"Key":"A couple","Fragments":["nitpicks","of","of","comments:","of","of","very","of","things","people","of","suggestions"]},{"Key":"couple nitpicks","Fragments":["still:"]},{"Key":"1) Since","Fragments":["you"]},{"Key":"Since you","Fragments":["are","already","have","already","return","are","have","have","already","are","were"]},{"Key":"you are","Fragments":["using","trying","that","right.","returning","probably","going","sure","using","trying","looking","saying","looking","modifying","paying","trying","using,","right!","comparing","using","currently","making","trying","using","storing","using","using","adding","interested","from","going","instantiating","changing","absolutely","exactly","traversing","referring","returning","looping","forcing","just","handling","gaining","already","gaining","doing","right.","using","right.","observing","going","doing","using","using","right,","supposed","explicitly","really","trying","already","passing","passing","not","certain","a","iterating","familiar","with","very","also","checking","using","correct,","dealing","not","only","going","coming","missing","really","doing","iterating","iterating","not","copying","supposted","iterating","checking","passing","not","writing","using","using","using","using","using","trying","doing"]},{"Key":"are using","Fragments":["very","c++11,","C++11","boost,","way","the","header","boost","recursion,","the","explicit","will","them","```std::min```,","C++","C++","C++,","C++,","C++,"]},{"Key":"using very","Fragments":["few"]},{"Key":"very few","Fragments":["members"]},{"Key":"few members","Fragments":["of"]},{"Key":"members of","Fragments":["namespace","the","'bob'","a","an"]},{"Key":"of namespace","Fragments":["std::,","std","bob.","bob,"]},{"Key":"namespace std::,","Fragments":["the"]},{"Key":"std::, the","Fragments":["\"using"]},{"Key":"the \"using","Fragments":["namespace","namespace\"","namespace","namespace","namespace"]},{"Key":"\"using namespace","Fragments":["std\"","std\",","std\"","std;\"","std;\"","...\"","std;\"","std\".","std\"?","std\".","std\"."]},{"Key":"namespace std\"","Fragments":["might","whether"]},{"Key":"std\" might","Fragments":["be"]},{"Key":"might be","Fragments":["better","nice","the","a","harder","smaller","easier","more","a","more","easier","somewhat","better","much","a","even","not","expensive","responsible","using","a","signed.","cleaner","better","able","missing","more","a","relevant","a","worthwhile","slightly","an","safe","a","a","just","overkill","even","getting","problematic","quicker.","an","better","more","an","a","right","difficult","added","a","clearer.","less","aware","a","dangerous","wrong,","wiser","used","a","better","good","better","more","able","more","a","used","better","written","a","an","seen","interesting","worst","a","safe","more","worth","questionable.","better","in","nice","appropriate","more"]},{"Key":"be better","Fragments":["off","??","to","to","as","to","because","there?","to","as","to","in","to","trying","to","to","(or","because","if","than","with","by","to","practice/more","that","suited","to","implemented","as","expressed","to","to","form.","C++"]},{"Key":"better off","Fragments":["left","in"]},{"Key":"off left","Fragments":["out"]},{"Key":"left out","Fragments":["and"]},{"Key":"out and","Fragments":["just","saw","Earth"]},{"Key":"and just","Fragments":["saying","do","have","have","removed","use","never","declare","iterate","ignore","ignore","use","chose","reverted","throw","added","removed"]},{"Key":"just saying","Fragments":["\"using","that","them."]},{"Key":"saying \"using","Fragments":["std::string\",","namespace"]},{"Key":"\"using std::string\",","Fragments":["or"]},{"Key":"std::string\", or","Fragments":["what"]},{"Key":"or what","Fragments":["have","not.","have","have"]},{"Key":"what have","Fragments":["you.","you.","you","you)","you."]},{"Key":"2) I","Fragments":["enclosed","know","make","may","did","bet","also","like"]},{"Key":"I enclosed","Fragments":["two"]},{"Key":"enclosed two","Fragments":["functions"]},{"Key":"two functions","Fragments":["in","made","for","together","```is_upper```","you","```generate_word_map_from_vector```","separate","that"]},{"Key":"functions in","Fragments":["a","the","the","\u003ccctype\u003e","an","`hey`","`\u003ccctype\u003e`","[``\u003clocale\u003e``](http://en.cppreference.com/w/cpp/header/locale)","```#\u003calgorithm\u003e```","the","terms","ctype.h."]},{"Key":"a namespace","Fragments":["instead","with","would",",","to","can","I","bob","instead","and","scope","with","was","or","function","function","in","and","work,","and","rather","(even","and","bob","(like","bob","(like","\"bob\"","instead","in","or","or","is","called","as","instead.","called","thanks","but","for","makes","to","which","containing","because","hamming"]},{"Key":"namespace instead","Fragments":["of","of","of","(beware","of","of"]},{"Key":"instead of","Fragments":["using","actually","the","`std::list\u003cstd::string\u003e`)","assembling","a","5.010","`private`:","5035","`class`.","writing","a","the","a","```if(test","a","`c=input[i]`.","`==","C,","cstyle","the","indexed-access","values(I","turning","`find()`","manually","a","just","the","O(N).","specifying","an","by","just","`(1ULL","reference","regex_iterator","`(unsigned","**class**","**substr**","``boost::to_lower``","``std::vector\u003cstd::string\u003e","\"Sure.\".","pair","complete_song","the","doing","one,","`boost::split()`.","\u003c\u003c).","a","`std::string`","a","custom","`BOOST_FOREACH`...","v[v.length()","v.length()","bar","assignment.","self","a","a","a","key.size()","many.","{}.\"","`x","`int","`std::for_each`,","`-1LL`?","multiple","++i","`-\u003e`","[]).","`operator[]`","an","arrays","the","storing","3.","`'0'`","`robot","using","```substr```","map","`std::accumulate`","your","a","'return","```std::isalpha```.","```std::string```","putting","var++","i++.","`vector\u003cstring\u003e`.","`const","the","just","the","const","for()","char*,","boost?","char*,","checking","vector,","this,","that","str[]","class","**what.rbegin()*","```\u003ccctype\u003e```","`for`?","just","checking","a","that","`char","having","`word","a","calculating","member","a","O(s).","constants","manually","`*=`","a","a","raw","two","`assert`","`std::to_string()`","```IM```.","one).","a","saving","a","a","default","a","forcing","manually","comments?","categorizing","`ch","\"one\"","splitting","iterators.","``class``","trying","using","a","\"stdio.h\",","a","using","a","class.","using","external","`(tmp","Bob.","int","a","using","simply","an","making","`string`,","`string","copying","just","checking","`regex_match`","`phrase[phrase.size()-1]`","returning","just","char*","string.","post","converting","character","line","a","just","using","using","`regex_search`).","checking","manual","a","just","outputting","the","calling","n","having","a","writing","assignment","copying","-1","looping","!isupper?","a","looping","creating","a","pointers.","YELL),","the","only","double","`iterator++`","cctype.","a","`switch`","a","using","looping","using","using","\"string::const_iterator\",","using","indexes.","indexes.","`int`","attempting","`int`","a","the","writing","\"ret","just","the"]},{"Key":"of using","Fragments":["a","a","the","multiple","an","cbegin","static","any","the","const","something","them","`const`,","Boost","namespace","namespace","it","by-reference","two","include","the","namespaces","`msg[i]","a","a","the","const","const","an","the","a","`if","a","a","the","a","stringstreams","a","the","a","a","minLength,","indexes.","indexes.","indexes."]},{"Key":"using a","Fragments":["class,","reference","somewhat","`switch`?","struct","reference","sorted","std::string","set","namespace","switch.","struct","target_compile_features","couple","RNG","loop.","series","comparison","few","class","significantly","`for`","reference","namespace.","namespace,","map.","normal","regex","C++11","sledgehammer","double","ranged","namespace.","stringstream,","more",".h","class,","class.","while","class,","`for","counter-based","constructor","bit","map","`namespace","tuple.","c++11","string","char","vector","lambda,","static","reference","std::vector"]},{"Key":"a class,","Fragments":["and","no","but","and","not","so","then","or","after","instead","and","and","when","but","but"]},{"Key":"class, and","Fragments":["I","a","put","defining","to","all"]},{"Key":"and I","Fragments":["love","can't","think","tested","really","hope","believe","didn't","think","guess","added","like","think","prefer","am","am","realised","really","haven't","think","have","don't","think","wished","didn't","suspect","think","seem","am","can","don't","like","try","try","don't","believe","believe","plan","didn't","find","should","know","think","would","assumed","absolutely","can't","believe","forgot","didn't","don't","think","think","think","forgot","had","didn't","won't","like","don't","had","think","just","really","am","am","like","was","should","learned","was","like","spend","almost","have","will","assumed"]},{"Key":"I love","Fragments":["using","it!","that","how","the","it.","the","the","usng"]},{"Key":"love using","Fragments":["classes."]},{"Key":"using classes.","Fragments":["It","hey()"]},{"Key":"classes. It","Fragments":["seemed"]},{"Key":"It seemed","Fragments":["in","to"]},{"Key":"seemed in","Fragments":["this"]},{"Key":"in this","Fragments":["instance","iteration)","code","case,","case,","case.","task","solution","case).","approach).","case","case","case","case,","case","case.","file.","case","case,","case,","solution.","case?","case?)","code.","example,","case?","case,","case.","scope","exercise","scope```","case","case,","case,","soon:","case,","case.","version,","problem.","case,","exercise.","case.","case","case.","case","case","fashion","case,","case","bad","problem.","exercise:","case)","case,","scope","way","fashion","one","case","case;","case.)","scenario","situation.","seemed","way","context","situation.","case,","case.","case","particular","code","case.","exercise","style.","case","solution","specific","case","case.","case","task.","case.","case","exercise,"]},{"Key":"this instance","Fragments":["that"]},{"Key":"instance that","Fragments":["two"]},{"Key":"that two","Fragments":["functions","times","words"]},{"Key":"functions made","Fragments":["more"]},{"Key":"made more","Fragments":["sense","\"functional\""]},{"Key":"more sense","Fragments":["than","to","with","to","to","when","in","to","to","to"]},{"Key":"sense than","Fragments":["the"]},{"Key":"than the","Fragments":["more","overhead","not","highest","constructor","same","constructor.","`format()`","implementation.","vector","usage","one","possible","std","previous","maximum","ususal","```response```","previous","largest","second","complexity","pointer","caller's","previous","problem","number","header.","O(n","first","returned","iterator","sorted","number","candidate.","simple","reverse)","second.","problem","way","comparatively"]},{"Key":"the more","Fragments":["confusing","likely","memory","common","annoying","efficient","times","obscure","bob-specific","functional-loooking","powerful","STL","general","straightforward"]},{"Key":"more confusing","Fragments":["static"]},{"Key":"confusing static","Fragments":["declarations."]},{"Key":"3) You","Fragments":["should","should","don't"]},{"Key":"You should","Fragments":["probably","accept","probably","*consistently*","clear","probably","move","check","be","check","define","be","look","consider","also","put","also","check","put","avoid","have","be","not","just","prefer","use","look","probably"]},{"Key":"should probably","Fragments":["still","inline","inline","say","just","put","declare","make","un-comment","be","be","be","get","be","not","be","be","get","be","be","put","check","just","not","just","throw","not"]},{"Key":"probably still","Fragments":["use","do"]},{"Key":"still use","Fragments":["break","a"]},{"Key":"use break","Fragments":["statements"]},{"Key":"break statements","Fragments":["in"]},{"Key":"statements in","Fragments":["the","your","a","the","headers"]},{"Key":"in the","Fragments":["switch.","strings",".h","cpp",".h","cpp","map","string","class","class.","modification","constructor","last","class","classes","the","raindrops","std::","code.","standard","namespace","particular","`_nucleotides`","second","tests","header?","map","string","bottleneck",".cpp","implementation","header","header","```if```","output","exercise","primes","first","standard.","middle","future.","second","public","sentences","problem","enum","string.","next","range","container,","for","`hey`","IsAllCaps","normal","loop.","cpp","header.","else","struct,","\"checking","`count`","object.","constructor","map,","map.","class.","headerfile","string.","if,","third","header","future.","foreach","sequence.","global","same","same","same","same","same","same","enum,","constructor.","loop,","talk","for","global","if","readme.","Python",".h","prime","string","verses","direction","sieve","`animalExtraDescs`","constructor","verse","case","error","error","error","error","case","error","domain","false","over","conditions,","third","true","false","map","transform?","header.","global","principle","`while`","right","collection,","collection.","code","code","code,","implementation.","runtime","constructor","global","constructor,","map.","header.","cpp","code.","constructor","header,","next","count","count()","header,","US/Canada,","US","constructor?","else","constructor.","return",".cpp,",".h.",".cpp","test","next","BOOST_FOREACH","sequence.","case","first","range","header.","cpp","`if`,","loop?","mindset","first","test","range","wrong","signature:","anagram","next","cpp","requirements,","updated","map.","map.","private","constructor","same","word","source","next","following","algorithm","string","`typedef`","header,","C++","namespace","lambda","return","unit","string.","output,","C++","created","habit","accepted","first","future,","standard","std","file),","std","FrostyLib","`.cpp`",".NET","map","array","strand:","namespace","global","case","documentation.","beginning","\"long","*=.","constructor,","function","very","way","testsuite","random-examples",".cpp","header","header,","actuall","standard","class","loop.","habit","CLI","build,","memory","future..","constructor","`food_chain::verses(const","next","right","loop.","accumulator","same","string","OS","loop.","middle","objects","constructor","constructor","constructor","error","members","unicode","new","end,","end","CPP","header.","cpp","same","long","same","array","smaller-N","```if```","short","header?","cpp","class.","```is_shouty```","function","next","header","`bob`","header?","global","future.","interface...","cpp","constructor.","class.","StringView","blank","`bob`","same","code.","test","bob","header","`if/else","loop","loop","size","header?","`if`","`matches()`","test","4th","STL.","first","second","global","source","source","header","map",".h.","header","cpp","first","test","test","code,","words;","source","last","C++","first","code","main","line.","test","source","header","code,","right","comparison","`boost`","unit","next","loop.","end.","case","error","header","sequence.","case","input","template","habit","std","vector","constructor","outer","numeric","generated","interface.","C++","second","second","lambda","same","header?","header?","implementation","standard","character","same","string","range","argument","`cpp`.","initial",".cpp.","source","source","domain","sieve.","algorithm","static_cast","constructor,","constructor","problem","domain","header,","loop","loop","next","map.","`\u003clocale\u003e`","production","string,","method","beginning","beginning","loop","string.","habit,","message.","C++98,","string","process)","candidate","vector?","implementation","main","long","sequence.","string","input","output","ass.","words.","size","candidate","hey","latter","map.","end","string","string","function?","function?","first","header","container,","guard.","first","second","next","first","middle","same","if-statement.","book","latest","design.","original","would-be","function","correct","twoBeers","text,","text.","hamming","new","text.","string","prompt","string","new","value,","next","next","string","string.","future","case","standard","case","function","end,","simple","more","simple","std::map","first","test","target","for","master","trial","result","```verse()```","```sing()```","C++","constructor","shout","correct","loop","loop","exercise","new","next","previous","header","cpp","body.","constructor.","header","string","string","code,","documentation","README:","middle.","minus()","class.","standard","worst","list.","problem","test","other","2nd","constructor","parentheses","test","squares,","header","header.","header:","loop","STL","boost","song","works","namespace","test","sense","middle","case","if","Bob","tests.","middle","plus","next","initialization","map.","range-for","loop,","following","link","code.","boost","boost","middle","same","following","middle","future","next","file","spirit","next","header","world,","map.","string","string","initial","first","range","way"]},{"Key":"the switch.","Fragments":["I","Honestly,"]},{"Key":"switch. I","Fragments":["know"]},{"Key":"I know","Fragments":["that","the","of.","this","namespace","that","in","that","of","it","I","I","that","that","it'll","I","better","it's","that","C++","trim_left","a","there's","that","a","there's","of","```std::find```","which","that","this","you","this","this","I","I"]},{"Key":"know that","Fragments":["what","classes","the","the","there's","hash","new","the","if","would","Length","that","\"Whoa,","if","from","time","in","you","the","once","things","you","it","perl","they","namespaced","gcc"]},{"Key":"that what","Fragments":["you","I","the","using"]},{"Key":"what you","Fragments":["did","are","are","mean","are","want.","have","get","want).","don't","don't","did","want.","would","want.","want","mean","expect","did","did","mean.","think","suggested","suggest.","really","mean","have","could","expect","will","want","have","are","want","have","wrote.","mean","think!","think!","all","think","mean","are","pointed","are","mean","mean.","have","are","did,"]},{"Key":"you did","Fragments":["works","make","not","better","so","not).","it,","with","is","it.","is","this","template","not","`++iterator`","of","differently","this","a","them.","it","a","a","a","it."]},{"Key":"did works","Fragments":["perfectly"]},{"Key":"works perfectly","Fragments":["well,"]},{"Key":"perfectly well,","Fragments":["I"]},{"Key":"well, I","Fragments":["guess","guess"]},{"Key":"I guess","Fragments":["it's","you","you","the","you","the","you","you","``#include","test","for","I","I'll","it","that","it","my","it","your","ignore","will","I","it","that's","it","it","you","it","I","you","some","you","returning","if","I'm","you","the","it's","I","isxdigit","I","that","someone","he'd","there's","that","I","sort","referencing","it's","this","it's","I","it","I","the","you're","Range","I","in","it's","really","there","it's","it"]},{"Key":"guess it's","Fragments":["just","always","a","mostly","still","neat"]},{"Key":"it's just","Fragments":["confusing","generally","a","too","odd.","listing","annoying.","because","a","kind","as"]},{"Key":"just confusing","Fragments":["to"]},{"Key":"confusing to","Fragments":["people"]},{"Key":"to people","Fragments":["if"]},{"Key":"people if","Fragments":["they"]},{"Key":"if they","Fragments":["don't","were","came","don't","are","are","have","were","are","were","could","know","were","equaled","need","were","need","can","changed","are","person","are","make"]},{"Key":"they don't","Fragments":["see","even","just","change","have","take","conflict.","have","belong.","cover"]},{"Key":"don't see","Fragments":["them.","the","a","a","how","the","any","the","anything","any","a","any","a","a","any","the","anything","a","where","the","the","any","the","how","how","how","how","how","how","how","how","a"]},{"Key":" Good","Fragments":["job","work.","job","point","question!","call","job","luck","research,","luck.","code!","start,","point.","use","point.","points.","point.","point","use","catch.","solution,","encapsulation,","point.","point.","catch","catch","points,","call","use","call","comments","use","use","catch","solution","solution","idea","point","use","job","point,","job","job","work!","work"]},{"Key":"Good job","Fragments":["though.","in","catching","with","in","otherwise."]},{"Key":"job though.","Fragments":["If"]},{"Key":"though. If","Fragments":["you"]},{"Key":"If you","Fragments":["answer","get","use","replace","really","keep","have","are","externalize","put","are","ever","call","meant","want","use","want","were","use","want","don't","wanted","rethink","placed","are","do","are","don't","put","have","see","aim","think","turn","separate","see,","want","really","don't","go","left","say","say","fail","move","passed","want","want","want","have","really","are","want","tried","change","change","mean","do","have","have","compile","have","define","make","do","were","maintained","don't","moved","never","do","find","get","decide","remove","operate","operate","declare","feel","want","compare","want","went","did","try","don't","want","are","put","prefer","replace","trust","like","decide","look","are","prefer","have","know","were","expect","remove","want","want","don't","are","want","are","don't","are","have","wanted","trim","look","look","really","find","go","create"]},{"Key":"you answer","Fragments":["my"]},{"Key":"answer my","Fragments":["nitpicks"]},{"Key":"my nitpicks","Fragments":["(even"]},{"Key":"nitpicks (even","Fragments":["if"]},{"Key":"(even if","Fragments":["its","the","not","you"]},{"Key":"if its","Fragments":["to"]},{"Key":"its to","Fragments":["defend"]},{"Key":"to defend","Fragments":["your"]},{"Key":"defend your","Fragments":["decisions"]},{"Key":"your decisions","Fragments":["and"]},{"Key":"decisions and","Fragments":["not"]},{"Key":"and not","Fragments":["change","by","transform","require","in","performing","use","a","by","their","the","marked","be","'?'","using","modify","```std::string```","distract","add","the","particularly","char*","char*","some","that","a","inside","by","the","only","at","change","native","alpha","rely","even","very","yelling,","0.","well","worrying","really"]},{"Key":"not change","Fragments":["anything)","it.","this","the","ever.","the"]},{"Key":"change anything)","Fragments":["I'll"]},{"Key":"anything) I'll","Fragments":["give"]},{"Key":"I'll give","Fragments":["you","that","them","a","you"]},{"Key":"give you","Fragments":["a","the","a","a","last","a","the","an","a","a","unique","a","some","more","a","a"]},{"Key":"you a","Fragments":["\"looks","better","copy","const","uniform","prime","char.","compile","pair","lot.","more","\"looks"]},{"Key":"a \"looks","Fragments":["great\"!","great\"."]},{"Key":"I took","Fragments":["the","advantage","a","the","a","to","a","FrostyTopaz's","some","any1's","one","the"]},{"Key":"took the","Fragments":["approach","feedback","extra","original","possible"]},{"Key":"the approach","Fragments":["of","(less","of","I"]},{"Key":"approach of","Fragments":["identifying","this","dealing","using"]},{"Key":"of identifying","Fragments":["each"]},{"Key":"identifying each","Fragments":["digit"]},{"Key":"each digit","Fragments":["and","in"]},{"Key":"digit and","Fragments":["then"]},{"Key":"and then","Fragments":["converting","just","go","break,","make","group","never","has","I","executing","_vstring","work","said2[i]","try","remove","unique","try","call","linked","do","testing","required","check","looping","run","one","the","moving","adding","complaining","memoize","add","some","pass","immediately","call","use","overwriting","the","manipulates","generalizing","a","modify","give","the","we","simple","compared","counting","switching","counting","negating","compare","call","also","made","resize/remove","you","modify","calling","compile,","have","convert","a","compare","push","hit",".cpp","changed","I"]},{"Key":"then converting","Fragments":["that"]},{"Key":"converting that","Fragments":["into"]},{"Key":"that into","Fragments":["a","subfunctions"]},{"Key":"into a","Fragments":["roman","function","```std::string```","words","`char[]`?","namespace,","good","separate",".cpp","jump","string.","**const**","**const**","**const**","**const**","**const**","**const**","**const**","**const**","const","namespace","member","local","cpp","source","lot",".cpp",".cpp","tighter","single","loop.","negative","very","helper","Foo","single","similar","separate","`memset`","map","single","source","space","`vector`.\u003c/li\u003e","predicate","functor.","predicate","vector,","separate","separate","std::for_each()","namespace","single","string","for-element","2-step","vector","linear","linear","couple","single","separate","helper","running","new"]},{"Key":"a roman","Fragments":["numeral"]},{"Key":"roman numeral","Fragments":["string."]},{"Key":"numeral string.","Fragments":["Since"]},{"Key":"string. Since","Fragments":["the"]},{"Key":"Since the","Fragments":["logic","domain","only","phone","default","first","function","spec","input"]},{"Key":"the logic","Fragments":["was","on","of","correctly,","in","in","is","so","of","as","into","out","over","becomes","to"]},{"Key":"logic was","Fragments":["the"]},{"Key":"was the","Fragments":["same","contents","motive","sign","copies","faster","ultimate","right","use","minimum","hard","questions","most","most","purpose","apostrophes--they","trick","result"]},{"Key":"same if","Fragments":["it","that"]},{"Key":"if it","Fragments":["was","should","contains","contained","is","succeeds","exists.","has","is","is","would","would","is).","is","is","is","is","was","doesn't","goes","divides","makes","is","is","were","doesn't","would","and","did","and","needs","is","is","is","is","is","is","is","was","did","does","is","is","is.\u003c/li\u003e","would","is","read","is","passes","contradicts","does","is","is","is","ends","bothers","isn't","punctuation","has","has","is","is","made","might","didn't","passes","is","was","were","contains","isn't","appears"]},{"Key":"it was","Fragments":["1","hard","a","fairly","good","intentionally","a","worth","an","meant","meant","clearly","a","indirectly","asked","stored","to","exactly","better","for","and","safe","the","the","an","an","being","empty","a","Scott","a","redundant","for","pretty","luck","familiar","dumb","supposed","supposed","alphanumerics,","fun","a","(to","a","any","short.","because","pretty","easy","a","an","for"]},{"Key":"was 1","Fragments":["or"]},{"Key":"1 or","Fragments":["10","n","n","0."]},{"Key":"or 10","Fragments":["or"]},{"Key":"10 or","Fragments":["100,","11"]},{"Key":"or 100,","Fragments":["I"]},{"Key":"100, I","Fragments":["was"]},{"Key":"I was","Fragments":["able","going","using","suggesting","looking","doing.","thinking","trying","inspired","confused.","looking","in","figuring","still","going","happy","going","writing","surprised","able","going","using","able","able","not","able","thinking","not","wondering","trying","trying","in","just","trapped","trying","trying","originally","going","concerned","just","frustrated","just","probably","lucky.","trying","checking","too","a","wrong","arguing","wrong.","unsure","experimenting","getting","able","having","surprised","still","thinking","going","doing","originally","under","on","kinda","being","typing","getting","told","wrong","missing","just","going","using","getting","thinking","expecting","able","using","initially","going","done.","a","using","running","nitpicking","missing","missing","doing","forced","forced","able","forced","forced","trying","wondering","using","thinking","thinking","unable","struck","thinking","expecting","solving","aiming","thinking","meaning","not","new","just","looking","thinking","probably","passing","storing","trying","stumped","able","getting","unable","thrown","calling,","able","looking","having"]},{"Key":"was able","Fragments":["to","to","to","to","to","to","to","to","to","to"]},{"Key":"able to","Fragments":["encapsulate","use","handle","do","create","remove","reason","declare","provide","properly","find","include","specify","test","RVO","return","tell.","choose","link","submit","find","just","place","took","tell","efficiently","differentiate","choose","pass","put","compile","reference","read","finish","anyhow","call","pass","submit","run","see","achieve","greatly","use","upload","use","make","pass","get","get","express","get","optimize.","take"]},{"Key":"to encapsulate","Fragments":["this","most","the","on","a","the","the","this"]},{"Key":"encapsulate this","Fragments":["into","check"]},{"Key":"this into","Fragments":["a","a"]},{"Key":"a function","Fragments":["and","with","that","[","for","for","like","like","such","``void","that","to","that","but","declaration.","name","object","that","that","called","at","that","is","of","that","to","inside","declaration.","declaration.","hey","hey","in","always","which","named","that","parameter","that","```std::is_permutation```","to","that","called","as","that","only","name?","call.","pointer","for","to"]},{"Key":"function and","Fragments":["then","if","return","name","don't","rely","must","has","an","the","just","I","one","have","I","keep","then"]},{"Key":"then just","Fragments":["passed","put","say"]},{"Key":"just passed","Fragments":["in"]},{"Key":"passed in","Fragments":["the","one","which","the","was","(not"]},{"Key":"the strings","Fragments":["I","by","as","directly","are","to","and","as","back-to-back","length","in","passed","themselves","and","associated","directly.","expected","get","by","and","as","is","weren't","they","as","at","for","on","succinctly,"]},{"Key":"strings I","Fragments":["wanted","used"]},{"Key":"I wanted","Fragments":["to","the","to","to","to","to","to","it","to","to","to","to","a","to","to","to","to","to","to","to","to","to","practice"]},{"Key":"wanted to","Fragments":["get","scan","keep","show","do","find","use","solve","implement","explore","avoid","count","point","your","provide","point","indicate","see","use","use","keep","support","try","dive","try","learn","avoid","keep","preallocate","try","give","know","reuse","submit","get","add","see","represent"]},{"Key":"to get","Fragments":["out","rid","into","feedback","`std::transform`","through","the","rid","it","my","accommodated","used","back","back","rid","this","off","more","something","the","such","one","the","16.0","an","constant","casted","the","casted","some","around","the","to","the","expressed","rid","all","over","the","to","to","its","the","around","through","your","the","`isalpha`,","the","in","out","compilation","it","more","all","some","used","this","but","some","things","some","used","you","information","right.","used","started.","out","rid","the","the","lost.","you","code","a","a","this","everything","around","the","the","a","that,"]},{"Key":"get out","Fragments":["of","of","of"]},{"Key":"out of","Fragments":["it.","the","headers.","it,","time","string","the","scope","the","room","old","your","the","the","the","hand.","the","bounds","the","your","bounds","that","having","the","the","the","range\"","\"Hello\"","type-erasure","boost.","your","map","`is_quiet`.","the","there","it","your","range\"","habit,","time.","the","global","\"programming\"","your","sync","habit","date.","a","scope","the","using","me"]},{"Key":" It","Fragments":["felt","is","might","will","might","should","might","took","feels","was","is","is","is","is","is","looks","might","feels","only","cut","seems","might","seems","wasn't","may","will","does","seems","looks","took","looks","seems","seems","works,","is","looks","may","looks","was","is","took","surprised","might","can","feels","looks","could","may","is","does","seemed","would","actually","was","looks","would","was","would","had","was","seems","actually","feels","does"]},{"Key":"It felt","Fragments":["like"]},{"Key":"felt like","Fragments":["I","regex","going"]},{"Key":"like I","Fragments":["could","did","said,","did.","should","am","could","am","described","did","could"]},{"Key":"I could","Fragments":["reduce","be","not","iterate","only","do","not","improve,","just","figure","have","be","put","use","use","achieve","use","have","maintain","store","probably","have","do,","be","not","calculate","have","modify","elect","manually","have","not","have","have","have","have","have","imaging","come","use","use","figure","understand","use","with","write","have","be","just","not","not","potentially","get","probably","pass","use","directly","probably","be","put","not","use","not","use","have","just","have","have","potentially","potentially","change","probably","make","change","be","help!","be","go","iterate","have","go","reject","make","have","use","just","probably","have","have","have","have","add","pass","optimize","see","have","have","have","not","iterate"]},{"Key":"could reduce","Fragments":["this","the"]},{"Key":"reduce this","Fragments":["more"]},{"Key":"this more","Fragments":["by","maintainable?","obvious?"]},{"Key":"more by","Fragments":["encapsulating"]},{"Key":"by encapsulating","Fragments":["the"]},{"Key":"encapsulating the","Fragments":["pattern"]},{"Key":"the pattern","Fragments":["between"]},{"Key":"pattern between","Fragments":["1-5"]},{"Key":"between 1-5","Fragments":["and"]},{"Key":"1-5 and","Fragments":["6-10,"]},{"Key":"and 6-10,","Fragments":["but"]},{"Key":"6-10, but","Fragments":["I"]},{"Key":"but I","Fragments":["couldn't","didn't","don't","think","didn't","couldn't","would","put","often","could","don't","think","would","think","noticed","think","could","feel","find","tried","hadn't","could","was","guess","couldn't","was","don't","do","find","am","often","started","find","suppose","honestly","would","wanted","really","wanted","know","think","think","have","realized","was","also","get","didn't","want","think","just","think","don't","read","remember","can","'m","thought","really","suppose","think","think","wonder","imagine","am","think","think","don't","am","ended","ran","do","doubt","didn't","think","am","guess","think","think","know","would","promise","think","understand","think","was","don't","didn't","can't","think","didn't","need","don't","love","did","can","don't","still","think","have","didn't","had","really","found","couldn't","think","think","think","don't","thought","don't","would","just","have","haven't","do","do","guess","couldn't","think","don't","suppose","would","prefer","had","wanted","think","get","can","think","really","would","kept","wonder","think","think","don't","never","would","found","suspect","spotted","can","am","can't","don't","don't","would","prefer","will","must","first","will","think"]},{"Key":"I couldn't","Fragments":["find","get","find","figure","figure","help","easily","make","tell","group","really","come","get"]},{"Key":"couldn't find","Fragments":["a","one"]},{"Key":"find a","Fragments":["clean","way","better","way","single","way","better","way","zero-valued","`b`","lot","mismatch","problem","more","good","layout","declaration","C++","better","1.","way"]},{"Key":"a clean","Fragments":["way","slate."]},{"Key":"clean way","Fragments":["of"]},{"Key":"way of","Fragments":["doing","doing","doing","doing","handling","the","solving","getting","'shout'","working","achieving","doing","doing","splitting","doing","making","making","\"uncommenting\"","doing"]},{"Key":"of doing","Fragments":["it.","it.","this","things.","a","simpler","the","things","it,","it","that.","this","this"]},{"Key":" Oops","Fragments":["I","on"]},{"Key":"Oops I","Fragments":["didn't"]},{"Key":"I didn't","Fragments":["need","like","find","know","notice","know","intend","make","know","expect.","bother","outsource","know","notice","think","want","try","want","recognize","know","say","provide","get","think","have","have","copy","check","see","expect","knew","already","use","know","think","need","found","feel","know","think","think","have","think","catch","like","think","mean","know","expect","find","know","realize","do","have","know","realize","understand","quite","know","need","want","know","think","know","use","spend","see","even","even","really","realize","define","think","think","know","even","think","need","think","find","know","think","even","read","really","really","know","know"]},{"Key":"didn't need","Fragments":["to","to","the","to","to"]},{"Key":"need to","Fragments":["include","use","write","check","check","declare","better","check","convert","write","create","check","have","add","modify,","handle","explicitly","iterate","hold","do.","be.","be.","be.","be.","use","use","update","find","go","put","include","check","state","be","maintain","check","be","grow","specify","restrict","copy","keep","be","convert","initialize","write","happen.","repeatedly","conserve","get","save","work","understand.","check","have","include","copy","capture","wrap","include","check","do","call","truncate","be","copy","throw","introduce","test","deduce","profile","read","type","be","link","refer","use","allow","limit","refactor","find","use","//","test","access","be","create","look","create","specify","be","visit","leave","sit","get","compare","be","keep","implement","test","use","be.","modify","initialize","do","do","grant,","check","find","use","trust","copy","think","be","use","be","give","know","do","hold","be","implement","create","say","pass","(potentially)","return","ascertain","be","add","make","parse","access","create","be","be","use","run","return","(and","compare","repeat","enable","end","combine","be","be","modify","throw","know","write","store","keep","use","initialise","create","have","specify","to","be","explicitly","be","store","make","loop","wrap","test","persist","have","set","include","create","create","copy","route","pass,","evaluate","find","refine","provide","create","actually","add","know","do","use","throw","throw","throw","look","a","add","trim","use","clear","correct","declare","make"]},{"Key":"to include","Fragments":["string","the","the","every","libraries","it","for","sections","them","the","the","the","`algorithm`","type","all","bob.cpp,","bob.cpp?","something","some","in","in","the","`\u003ccstdlib\u003e`.","that","bob.h"]},{"Key":" So","Fragments":["this","don't","I","for","I","I","std::pow(3,","concluding","submitting","you","if","`food_chain::verse(0)","for","basically,","really...","using","`is_yelling_string`","what","my","I'll","here","luckily","if","we","I","I'm","you","I","I","made","what","in","I","const","to"]},{"Key":"So this","Fragments":["will","code"]},{"Key":"this will","Fragments":["add","fail.","fail.","end","yield","create","help","be","incur","do:","compile","depend","be"]},{"Key":"will add","Fragments":["any","an","the","the","some"]},{"Key":"add any","Fragments":["char","crazy"]},{"Key":"any char","Fragments":["to","sequence","in"]},{"Key":"char to","Fragments":["your","index)","the","an"]},{"Key":"to your","Fragments":["map,","members","other","suggestions.","question","array","code,","comment","other","default","cpp","last","users.","pointers","function","reasoning","transform.","assumptions.","indentation.","implementation,","file\u003e_INCLUDED.","function","magic","question"]},{"Key":"your map,","Fragments":["not"]},{"Key":"map, not","Fragments":["just"]},{"Key":"not just","Fragments":["A","put","`return","std","just","keep","use","polluting","more","uppercase","uppercase","easier","take","take","iterate","have","get","use","for","the","capacity.","return","use"]},{"Key":"just A","Fragments":["T"]},{"Key":"A T","Fragments":["C"]},{"Key":"T C","Fragments":["G."]},{"Key":"C G.","Fragments":["According"]},{"Key":"G. According","Fragments":["to"]},{"Key":"According to","Fragments":["the","https://gcc.gnu.org/projects/cxx1y.html"]},{"Key":"to the","Fragments":["test","number","reverse","header.","API","stack","square","boost-like","Exercism","constructor","numbering.","candidate","Boost","last","'obligation'","task.","empty","wordcount","cpp","class.","for-loop","actual","test","point","code","stream","scene.","part","compiler","object","classic","table.","map","test,","constructor","constructor.","boilerplateiness","interface","test","different","`std::regex`","new","current","next","wrath","size","call","intention","compilation","previous","'","multiplication.","right","tests.","begin","start","party,","compiler","character","map","stream.","whole","caller","target","implementation","level","previous","next","numbers","actual","test","help","`reset()`","dictionary","original","response","actual","exercise,","caller).","set,","implementation.","power","left.","hayai","job.","constants","hey","statements","world,","correct","ostream","`add`","constructor","Core","cpp,","problem","std","beginning","cpp","difference.\u003c/li\u003e","relevant","problem.","same","latest","test","problem","test","cache.","front","compiler","caller's","tightest","number","number","number","string","person","argument","way","bad","length","constants,","usage","usage","implementer.","correctness","readability.","difference.\u003c/li\u003e","source","source","implementation","search","first","1","scope","\"bob\"","vector","first","start","string","method).","string","check","mutable","different","inside","code.\u003c/li\u003e","usage","constructor","`cctype`","next","word_count","`hey`","eye,","whole","whole","words()","std::strtok","constructor","test,","bit-twiddling","point.","specification,","scale","constructor","specific","library","user","map","\"Whatever.\"","previous","string","three","next","top","plus()","results","left","others.","beginning","last","last","```std::string```","code).","end.","new","same","total","sing","exception","class'","first","list","\"always","tests."]},{"Key":"the test","Fragments":["suite","file.","cases","with","on","cases.","case","is","cases","if","file.","for","framework,","assume","case?","case","suite","suite","suite,","cases","file","file,","suite,","was","case","was","suite","case","word","in","suite","on","suite.","suite","suite","suite","suite","suite","suite","suite","suite","suite,","code","code","driven","methods","I","file","suite","suite","suite,","suite,","suite","framework","suite","file.","suite)","cases","cases","suite","suite,","suite.","required","file","cases","suite).","cases","then","cases","suite","client\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e","cases","for","looks","cases.","description","cases","typedef.","suite","and","instance","case","suite","cases","file","file","cases","passing","input","cases.","framework","routine","file","file.","file.","file.","suite.","suite.","suite.","suite,","suite.","suite.","suite.","cases!"]},{"Key":"test suite","Fragments":["this","doesn't","\"Master","so","as","is","didn't","and","to","more","and","and","to","as","cpp","would","required","exactly","for","is","makes","I","demanded","you","that","doesn't","has","\"Master"]},{"Key":"suite this","Fragments":["in"]},{"Key":"this in","Fragments":["fine.","the","the","my","a","two","many","boost","earlier","any","a","a","other","the"]},{"Key":"in fine.","Fragments":["I"]},{"Key":"fine. I","Fragments":["was","think"]},{"Key":"was going","Fragments":["to","after,","to","wrong","on","for","to","to","to","for","to"]},{"Key":"going to","Fragments":["implement","do","use","make","adopt","break","be","use","be","try","have","add","intersperse","stop","copy","be","enforce","modify","ditch","do","have","happen","dominate","do","have","reply","criticize","use","re-create","criticize","be","be","be","make","exclude","go","warn","modify","avoid","be","do","be","put","be","take","be","alter","want","argue","be","be","improve","be","look","use","beat","declare","be","listen","be","have","leave","modify","say","be,","fix","call","make","be","re-write","learn","pull","be","get","go","see","modify","use","try","modify","kill","get","happen.","modify","make","further","clean"]},{"Key":"to implement","Fragments":["it","```dna::counter```","and","the","it","a","the","it","to","if","a","a","an","the","considering","future"]},{"Key":"implement it","Fragments":["this","yourself.","on","to","the","by","yourself."]},{"Key":"it this","Fragments":["way","way","way:"]},{"Key":"this way","Fragments":["but","will","-","only","might","I","your","(I","of","makes","what","is","I","at","the"]},{"Key":"way but","Fragments":["I"]},{"Key":"didn't like","Fragments":["the","passing","the"]},{"Key":"like the","Fragments":["idea","two","string","shortness","optimization","preprocessor","input","beginning","test","char","`sanatize_string(string\u0026","brevity.","boost","readability.","brevity,","variable","use","use","use","squres_of_sums..","thought","twist","use","most","newer","C++11","way","kind","most","Sieve","second","whole","way","namespace","get_history.","join.","fp-like","shorter","fact","```has_letter```","recursion","way","originality","convention","new","simplicity","insertion/increment","fact","default","one","trinary","variable","former","verbosity","compilers","response","sorts","tests","algorithm","algorithm","perfect","strings","way","boost","breakdown","for","brevity","fact","solution","way","boost","flow","use","overall","overall","efficiency","recursive","idea","use","lack","design","way","idea","explicit","obvious","idea","use","idea","verbosity","code's","to_lower_copy.","bucketizing","idea","approach","use","need","use","neatness","signatures","str.find_last_not_of.","way","use","members"]},{"Key":"the idea","Fragments":["of","of","of","to","of","to","was","of","of","of","of","since"]},{"Key":"idea of","Fragments":["filling","the","returning","how","a","storing","what","shouting","using","using","trimming","needing"]},{"Key":"of filling","Fragments":["the"]},{"Key":"filling the","Fragments":["map","map?"]},{"Key":"the map","Fragments":["with","before","back","is","are","type?","does","and","and","due","during","is","const,","at","unnecessarily","when","lookup","as","for","was","if","building","as","in","of","using","seems","is","it's","could","structure.","you","and","is","fails","*at*","of","inserts.","in","is","name:","and","with","to","data","are","if","is","is","correctly.","with","or","[]"]},{"Key":"map with","Fragments":["any","all","a","at()."]},{"Key":"with any","Fragments":["user","level"]},{"Key":"any user","Fragments":["input."]},{"Key":" -","Fragments":["I'm","The","I'm","The","Used","iostream","`constexpr`","You","The","There","If","Randomly","Chosing","Chosing","Chosing","Chosing","Oops","('A\"","To","`using","Good:","You","You","In","You","In","`input%4","Instead","`class","`struct","`namespace","You","`using","You","Silence","Questions","Shouting","Whatever","use","move","Got","Streamlined","Incorporated","Changed","Changed","The","Right","Try","Why","Do","Please","Why","Why","I","I","Because","check","check","check","-\u003e","The","What","The","```[\\^a-z]*```","```[A-Z]+```","I'm","It's","It'd","key","You","#include","Posting","It","I","There's","I","Your","`vector`","You're","And","Assume","Now","Use","Use","Use","I","Repeated","`compute(s1,","I'm","It","split","move","use","Moved","```#include```ed","changed","used","`#include","`what.back()`","your","I","Removing","Allowing","Using","Added","I","You","It","map's","You","You","It's","There","ranged","why","It's","is_shouting","The","std::string","indexing","If","To","increment","or","You","When","Include","You","It's","I've","I","I've","`is_quiet`","`is_question`","`is_upper`","`using","`contains_alpha`","Maybe","Your","`isQuestion`","`isUpperCasePresent`","`isLowerCasePresent`","`isShouting`","`isQuestion`","Each","I","Lines","Line","I","I","`long","`long`","`int`","Continued","Made","there","trim","is_upper","The","The","The","Need","Loop?","removed","fixed","It","try","Wrapping","you","A","...","is","is","The","Used","Added","Considered","Iteratively","Used","Original","Changed"]},{"Key":"- I'm","Fragments":["not","not","guessing","not"]},{"Key":"I'm not","Fragments":["happy","happy","sure","sure","sure","sure","quite","100%","sure","sure","a","super","making","against","sure","entirely","a","sure","sure","sure","sure","too","sure","\"terrified\"","aware","going","comfortable","sure","going","following","exactly","sure","so","one","sure","sure","all","convinced","sure","sure","sure","sure","familiar","sure","going","sure","sure","sure","sure","positive","sure","sure","sure","seeing","sure","entirely","familiar","summing","sure","modifying","so","getting","using","really","sure","a","sure","sure","familiar","sure","sure","really","sure","sure","sure","sure","too","sure","sure","sure","sure","sure.","convinced","sure","convinced","sure","sure","sure","sure","sure","sure","sure","sure","really","running","sure","considering","an","yet","sure","quite","that"]},{"Key":"not happy","Fragments":["with","with","with","about"]},{"Key":"happy with","Fragments":["instantiating","instantiating","it","the","how","it.","how","it","where","the","it."]},{"Key":"with instantiating","Fragments":["a","a"]},{"Key":"instantiating a","Fragments":["class","class"]},{"Key":"a class","Fragments":["variable","variable","as","when","for","for","instead","or","member.","that","necessary","necessary","per","with","since","with","dedicated","only","body","non","that","variable","or","with","to","with","for","and","which","and","would","with","with","with","and","with","and","with","for","also","as","declaration.","at","is","instead","seems","is","is","so","within","with","to","are","is","is","is","instance,","anagram","for","would"]},{"Key":"class variable","Fragments":["in","in","that","any"]},{"Key":"variable in","Fragments":["the","the","order","a","the","to_rna()."]},{"Key":"the .h","Fragments":["file","file","file","files","file;","file","part","header"]},{"Key":".h file","Fragments":["but","but","like","or"]},{"Key":"file but","Fragments":["that's","that's","cache","as"]},{"Key":"but that's","Fragments":["how","how","wrong.","much","the","not","going","arguably","not","somewhat","less","just"]},{"Key":"that's how","Fragments":["to","to","we","I"]},{"Key":"how to","Fragments":["make","make","follow","return","deal","run","use","encapsulate","make","make","build","use","make","get","test","check","do","do","copy","make","choose…","do","keep","do","use","extend","get","do","use","DO","do","compare","restructure","restructure","use","use","use","do","run","use","do","submit","solve","get","run","do","get","match","do","best","create","handle"]},{"Key":"to make","Fragments":["the","sure","the","sure","\"off-by-one\"","clear,","it","the","the","the","an","it","this","code","this","the","this","a","some","the","sure","a","the","a","copy\u0026paste","them","the","sure","a","RVO","sure","use","it","`sing()`","`the_verses`","boost::range","that","the","them","`normalized`","the","things","a","clear,","sure","it","parts","a","p","it","an","this","the","it","better","your","them","the","sure","it","`is_shouty()`","your","it","them","the","with","the","the","it","this","it","this","the","this","the","better","it","this","your","sure","it","things","cipher","another,","it","this","the","a","'hey'","this","it","the","things","it","the","sure","a","it","sure","an","it","against","the","it","it","it","all","all","all","all","this","code","you","this","the","the","it","this","a","the","the","a","any","sure","sure","bob","it","sure","it","it","at","a","sure","this","it","a","more","the","it","a","a","the"]},{"Key":"make the","Fragments":["exercise","exercise","const","`to_lower`","overall","outer","code","tests","`huh`","whole","```alpha_upper```","check","code","code","constructor","`query`","*_verses*","map","different","string","code","\u003calgorithm\u003e","constructor","constructor","optimizer","check","type","function","compiler","type","constants","errors","intent","sorted-insert","operator","regex","code","code","order","code","case","code","categories","line","rest","line","rest","code","return","code","changes.","decisions.","code","code","default","code","code","last","code","const","correct","string","string","```verses()```","code","compilation","code","program","code","text","code","code","code","code","element"]},{"Key":"the exercise","Fragments":["pass.","pass.","really","really","folder:","with","which","demands,","requires,","requires","to","for","by","is"]},{"Key":"exercise pass.","Fragments":["In","In"]},{"Key":"pass. In","Fragments":["practice","practice"]},{"Key":"In practice","Fragments":["I","I"]},{"Key":"practice I","Fragments":["would","would"]},{"Key":"I would","Fragments":["do","do","put","hope","document","do","use","say,","remove","use","have","like","like","appreciate","be","have","usually","only","expect","have","have","suggest","suggest","use","probably","make","argue,","think","argue","definitely","recommend","declare","recommend","recommend","use","have","need","recommend","agree,","just","suggest","recommend","consider","take","hope","need","not","certainly","argue","agree","be","recommend","use","define","define","do","replace","find","recommend","recommend","think","avoid","look","just","like","blindly","suggest.","argue","recommend","probably","think","recommend","recommend","prefer","nitpick","not","say","not","like","recommend","like","guess","throw","consider","agree","not","have","have","have","use","have","try","have","have","do","probably","sugest:","change","be","suggest","agree","suggest","separate","suggest","have","suggest","caution","interpret","call","prefer","use","also","avoid","have","not","love","think","suggest","prefer","declare","suggest","probably","agree","take","rename","appreciate","suggest","put","avoid","argue","have","make","change","consider","say","put","complain"]},{"Key":"would do","Fragments":["this","this","as","the","two","and","instance"]},{"Key":"do this","Fragments":["in","in","`output[tolower(*ch_interator)]`","using","in","in","that","when","with","I","without","that","one","by","without","then","procedurally","would","exercise."]},{"Key":"the cpp","Fragments":["file","file","file,","file.","file:","exercises","file","file,","file","file.","(or","file,","file,","file"]},{"Key":"cpp file","Fragments":["before","before","and","because","as","which","commented","which","in","so","for"]},{"Key":"file before","Fragments":["creating","creating"]},{"Key":"before creating","Fragments":["robot","robot"]},{"Key":"creating robot","Fragments":["objects.","objects."]},{"Key":"- The","Fragments":["last","last","magic","code","test","type","only","'yelling'","'question'","'silence'","condition"]},{"Key":"The last","Fragments":["test","test","test","one","test","point","thing"]},{"Key":"last test","Fragments":["runs","runs","are","case","case","case.","case?","case","case","and"]},{"Key":"test runs","Fragments":["reset()","reset()"]},{"Key":"runs reset()","Fragments":["1000","1000"]},{"Key":"reset() 1000","Fragments":["times","times"]},{"Key":"1000 times","Fragments":["and","and"]},{"Key":"times and","Fragments":["checks","checks","make","now"]},{"Key":"and checks","Fragments":["to","to","whether"]},{"Key":"checks to","Fragments":["make","make","functions","make","make"]},{"Key":"make sure","Fragments":["we","we","to","to","reset","that","all","leading","they","that","to","the","the","that","that","the","I","I","that"]},{"Key":"sure we","Fragments":["don't","don't"]},{"Key":"we don't","Fragments":["get","get","really","want","know","include","have","have","need","need.","want","want","have","care","extend"]},{"Key":"don't get","Fragments":["any","any","the","a","any","the","a","all"]},{"Key":"get any","Fragments":["repeats.","repeats.","feedback.","errors"]},{"Key":"any repeats.","Fragments":["There","There"]},{"Key":"repeats. There","Fragments":["is","is"]},{"Key":"There is","Fragments":["a","a","the","a","infact","a","no","a","another","literally","also","such","one","newer","a","no","a","no","no","a","no","another","an","no","no","an","one","some","no","no","a","also","a","no","probably","no"]},{"Key":"is a","Fragments":["1","1","good","bit","more","big","little","\"Rule","good","perfectly","word","way","packaging","great","mix","performance","cpp","lot","bug","very","bit","bit","bit","special","static","style","way","little","trade-off","common","tad","way","bit","match,","bit","**static**","**constexpr**","side","space,","further","no-op.","design","no-op","no-op","new","bit","bit","good","reasonable","very","large","terrible,","very","bit","good","big","[string","solid","left-over","subset","great","junk","check","simpler","bit","very","great","response","multiple","bit","clearer","bit","\"cultural\"","bit","bit","double.","semicolon","bit","pro,","pretty","library-centric","`std::pow`","much","huge","memory","fantastic","function","small","huge","good","great","bit","big","remnant","lot","bit","pointer","combining","question.","rather","really","good","good","decent","fault","little","syntax","readability","const","good","real","program","really","container.","proposal","goal/requirement.","little","clearer","RB","good","test","test","quote):","decent","little","very","question,","bit","lot","far","class","tokenizer","redundancy).","submition","_minor_","`string`","different","large","different","large","valuable","relatively","start,","bit","major","template,","runtime","different","lot","version","mistake","situation","simplified","good","little","good","rather","new","universal","header","nice","scoped","namespace","little","shout","majority","compile-time","strange","yell\"","header","[link](http://en.cppreference.com/w/cpp/string/byte/isspace)","lot","bit","char*,","static","namespace.","sequence","very","good","quick","pretty","question.","different","large","separate","problem","class","good","question).","pretty","tricky","function","question","question.","bit","good","question,","much","bit","clever","bit","classical","pitty","nonsense","good","better","_linear_","great","bit","bit","capital","little","good","little","little","good","layout","pretty","better","little","powerful","container","string,","reasonably","very","good","very","nice","good","small","known","'?'","question.","link","link","form","really","yell,","local","huge","question","'!'","more","good","bit","really","little","definitive","mental","completely","pointless","reference","nice","bit","recent","no-no.","new","bad","good","no-no.","bit"]},{"Key":"a 1","Fragments":["in","in"]},{"Key":"1 in","Fragments":["676K","676K"]},{"Key":"in 676K","Fragments":["chance","chance"]},{"Key":"676K chance","Fragments":["that","that"]},{"Key":"chance that","Fragments":["this","this","2^2"]},{"Key":"that this","Fragments":["will","will","is","is","code","was","will","is","header","wasn't","is","is","solution","function","is","decision","extra","is","should","would","has","solution","can","one","leaks","is","was","was","happens,"]},{"Key":"- Used","Fragments":["a","a","regular"]},{"Key":"Used a","Fragments":["do/while","namespace"]},{"Key":"a do/while","Fragments":["to"]},{"Key":"do/while to","Fragments":["remove"]},{"Key":"to remove","Fragments":["redundancy","it.","or","leading","variable","the","the","the","```","it","the","all","the","#include","```","trailing","the","the","the","the","your","it","those","the","the","a","the"]},{"Key":"remove redundancy","Fragments":["from"]},{"Key":"redundancy from","Fragments":["first"]},{"Key":"from first","Fragments":["iteration","character"]},{"Key":"- iostream","Fragments":["is"]},{"Key":"iostream is","Fragments":["included"]},{"Key":"is included","Fragments":["because","but","with"]},{"Key":"included because","Fragments":["I"]},{"Key":"because I","Fragments":["was","like","do","find","am","need","believe","wanted","think","normally","did","just","don't","don't","couldn't","just","don'thave","find","thought","don't","have","don't","know","had","feel","can't","could've","can't","can't","am","know","wanted","saw","find","passed","wanted","thought","wanted","pretended","pretended","was"]},{"Key":"was using","Fragments":["it","it","didnt","string","the","them","all","a"]},{"Key":"using it","Fragments":["for","(complicated","except","for","way","to","otherwise","at","in","in","in"]},{"Key":"it for","Fragments":["testing","debugging.","arrays.","that","defining","you:","more","testing","less","completeness."]},{"Key":"for testing","Fragments":["and",":/"]},{"Key":"testing and","Fragments":["forgot"]},{"Key":"and forgot","Fragments":["to","what","to","to"]},{"Key":"forgot to","Fragments":["remove","remove","get","save","annotate","move","remove","submit","remove","include","remove","remove","remove","switch","remove"]},{"Key":"had a","Fragments":["hard","a","couple","bug","bug","typename","for-loop","single","guaranteed","feeling","feeling","function","null","different","small","global","couple","\"ignore"]},{"Key":"a hard","Fragments":["time","time","coded","coded"]},{"Key":"hard time","Fragments":["figuring","grokking"]},{"Key":"time figuring","Fragments":["our"]},{"Key":"figuring our","Fragments":["exactly"]},{"Key":"our exactly","Fragments":["how"]},{"Key":"exactly how","Fragments":["to","that","many","`string()`","to"]},{"Key":"to follow","Fragments":["the","common","accepted","(not","for"]},{"Key":"follow the","Fragments":["test","first"]},{"Key":"test file.","Fragments":["How","I","G++","I'm","You","Instead"]},{"Key":"file. How","Fragments":["do"]},{"Key":"How do","Fragments":["you","you"]},{"Key":"do you","Fragments":["understand","do","put","mean","know","`strcpy`","need","pass","have","think","have","expect","think","think?","think?","deal","think","mean?","use","mind","pass","mix","think?","mind","think","mean","have","think?","have","think?","use","think","think","think?","define","keep","mean","start","use","use"]},{"Key":"you understand","Fragments":["things"]},{"Key":"understand things","Fragments":["like"]},{"Key":" const","Fragments":["auto","char","char","char","char","string","unsigned","map\u003canwser,","std::array\u003cstd::pair\u003cstd::string,int\u003e,7\u003e","school_roster\u0026","school_grade\u0026","bool","bool","std::string","char","is","reference,","bool","doesn't","string","string","char*","char*","map\u003cstring,","auto","map\u003cstring,","auto","map\u003cstring,","auto","map\u003cstring,","auto","map\u003cstring,","auto","char"]},{"Key":"const auto","Fragments":["clock","actual","actual","actual","actual","actual","actual"]},{"Key":"auto clock","Fragments":["="]},{"Key":"clock =","Fragments":["date_independent::clock::at(10,"]},{"Key":"= date_independent::clock::at(10,","Fragments":["3).minus(70);"]},{"Key":" and","Fragments":["implement","why","adding","maybe","on","so","updated","4999999","v.empty()","then","people","with","`is_question_string`","on","then","if","last","in","he","maybe","the","you","then","holy"]},{"Key":"and implement","Fragments":["it.","an","it","in","it"]},{"Key":"implement it.","Fragments":["This"]},{"Key":"it. This","Fragments":["works,","is","should","is"]},{"Key":"This works,","Fragments":["but"]},{"Key":"works, but","Fragments":["it","might","the","it's","to"]},{"Key":"but it","Fragments":["isn't","seems","should","does","would","seemed","might","should","looks","doesn't","uses","went","doesn't","looks","is","doesn't","never","leads","would","looks","also","has","would","seems","doesn't","would","also","does","might","make","most","is","seems","can","makes","would","will","seemed","just","doesn't","may","is","makes","works.","prevents","seems","allows","modifies","seems","is","is","seems","certainly","seems","works.","does","could","also","seems","would","meets","was","works","fits","works.","felt","should","could've","does","works","doesn't","should","might"]},{"Key":"it isn't","Fragments":["elegant","that","threadsafe.","really","very","getting","particularly","super","high-performance","there","the","present"]},{"Key":"isn't elegant","Fragments":["in"]},{"Key":"elegant in","Fragments":["some"]},{"Key":"in some","Fragments":["ways.","of","cases,","runtime-legal","odd","situations","editors","cases","cases","of","respects.","`assert`s?","other","string,"]},{"Key":"some ways.","Fragments":["I"]},{"Key":"ways. I","Fragments":["don't"]},{"Key":"I don't","Fragments":["like","think","see","see","think","think","know","really","see","understand","like","like","use","know","know","know","really","think","see","disagree","know","think","see","know","have","like","have","know","see","feel","see","like","think","see","agree,","like","know.","know","think","know,","think","like","fully","think","see","like","want","think","know","think","see","care.","think","have","wan't","have","even","think","like","much","need","see","like.","have","like","think","define","want","think","know","think","think","see","get","think","much","think","remember","know","want","see","consider","think","stick","quite","think","think","think","need","have","think","think","think","know.)","have","believe","believe","think","think","think","understand","see","think","particularly","understand","understand","have","know","think","really","need","have","know","know,","think","think","see","see","see","get","have","feel","think","think","know","blame","use","think","think","*really*","think","see","know","know,","think","think","think","think","feel","need","see","have","feel","have","want","know","think","know","quite","really","exactly","believe","think","think","specify","see","really","want","really","think","believe","really","think","know","like","think","have","know","have","really","really","believe","think","think","see","believe","know","think","really","think","see","understand","like","see","see","see","see","see","see","see","see","know","think","think","need","think","have","think"]},{"Key":"don't like","Fragments":["returning","the","the","about","existence","that","creating","my","re-inventing","exposing","this","the","including","to","the","the","its","your"]},{"Key":"like returning","Fragments":["the","the"]},{"Key":"returning the","Fragments":["object","condition","original","strings","value","modified","reference","roster","result","result","information,","correct","reply"]},{"Key":"the object","Fragments":["from","state.","is","that","goes","you","so","is","the","to","constructed","is","you're","might","and","returned"]},{"Key":"object from","Fragments":["clock::plus()"]},{"Key":"from clock::plus()","Fragments":["and"]},{"Key":"clock::plus() and","Fragments":["clock::minus()."]},{"Key":"and clock::minus().","Fragments":["I"]},{"Key":"clock::minus(). I","Fragments":["also"]},{"Key":"I also","Fragments":["don't","don't","found","have","find","redid","checked","tried","think","prefer","added","don't","think","think","disagree","decided","created","streamlined","realise","passes","tried","saw","think","felt","considered","considered","like","did","don't","think","learned","think","could","agree","considered","wanted","like","should","would","changed","find","like","posted","don't","don't","disagree","think","don't","hate"]},{"Key":"also don't","Fragments":["like","know","think","need","need","really","need","need","understand","see","know","need"]},{"Key":"the two","Fragments":["namespaces.","most","months","strings","space","if","cases.","into","strings","each","versions","approaches","strings","pieces","strings,","strings","strings","strings,","versions","strings","variables","strings","to","strings","sorting","sequences","sequences","sequences","sequences","sequences","sizes","sequences","maps?","silence"]},{"Key":"two namespaces.","Fragments":["I'm"]},{"Key":"namespaces. I'm","Fragments":["also"]},{"Key":"I'm also","Fragments":["uncertain","glad","dropping","surprised","using","at"]},{"Key":"also uncertain","Fragments":["whether","why"]},{"Key":"uncertain whether","Fragments":["my"]},{"Key":"whether my","Fragments":["algorithm"]},{"Key":"my algorithm","Fragments":["for","will"]},{"Key":"algorithm for","Fragments":["setting","the","`square_of_sums(...)`","the","this","the"]},{"Key":"for setting","Fragments":["the"]},{"Key":"setting the","Fragments":["time","internal","correct"]},{"Key":"the time","Fragments":["(so","complexity","I","to","I","since","of","to","std::array\u003cint,'z'+1\u003e","of","you","of"]},{"Key":"time (so","Fragments":["it"]},{"Key":"(so it","Fragments":["can"]},{"Key":"it can","Fragments":["go","be","not","be","be","greatly","be","make","be","be","be","go","get","be","represent","be","be","be","change","be","also","be","be","be","refer","more","set","get","never","never","have","be","examine","examine"]},{"Key":"can go","Fragments":["backwards","on","outside","away."]},{"Key":"go backwards","Fragments":["via"]},{"Key":"backwards via","Fragments":["clock::minus()"]},{"Key":"via clock::minus()","Fragments":["over"]},{"Key":"clock::minus() over","Fragments":["midnight"]},{"Key":"over midnight","Fragments":["for"]},{"Key":"midnight for","Fragments":["instance)"]},{"Key":"for instance)","Fragments":["is"]},{"Key":"instance) is","Fragments":["the"]},{"Key":"the best","Fragments":["one,","way","way","of","but","uses","way","approach.","approach.","approach.","way","name","choice","features","return","practices","answer","way","solution","I","way","way","possible","route","alternative","code","implementation","choice.","option","way","way","solution","in"]},{"Key":"best one,","Fragments":["but"]},{"Key":"one, but","Fragments":["it","can't","after"]},{"Key":"it seems","Fragments":["to","I","strange","to","like","it's","as","to","like","really","like","to","inconsistent,","there","to","I","more","to","pretty","like","to","to","to","that","to","like","like","like","rather","plausible","the","to","to"]},{"Key":"seems to","Fragments":["work.","be","perform","be","the","be","hint","handle","behave","be","me","me","always","validate","be","vary","come","come","do","more","speak","be","be","start","me","me","be","really","be","work.","be","fail","sort"]},{"Key":" Ya,","Fragments":["I"]},{"Key":"Ya, I","Fragments":["noticed"]},{"Key":"I noticed","Fragments":["that","most","only","you","that","that","you"]},{"Key":"noticed that","Fragments":["too","I","I've","I","no","the"]},{"Key":"that too","Fragments":["and","verbose","when"]},{"Key":"too and","Fragments":["wondered","would","save"]},{"Key":"and wondered","Fragments":["if"]},{"Key":"wondered if","Fragments":["it"]},{"Key":"it should","Fragments":["throw","still","be","be","be","be","be","be","be","throw","be","fail","be.","be","be","be,","not","probably","be","be","be","be","be","not","be","be","be,","be.\u003c/li\u003e","be.","be","be","be","look","work","be","return","not"]},{"Key":"should throw","Fragments":["an","an","as","an"]},{"Key":"throw an","Fragments":["exception","exception.","exception","exception,","exception","exception","exception.","exception","exception","exception.","exception","exception","error.","error","exception","exception","exception","exception"]},{"Key":"an exception","Fragments":["or","if","rather","for","for","when","when","if","from","yet)","should","in","anymore.","if","would","sounds","or","when","when","or","though","instead"]},{"Key":"exception or","Fragments":["ignore","return","returning"]},{"Key":"or ignore","Fragments":["invalid"]},{"Key":"ignore invalid","Fragments":["characters.","characters"]},{"Key":"invalid characters.","Fragments":["Without"]},{"Key":"characters. Without","Fragments":["a"]},{"Key":"Without a","Fragments":["test"]},{"Key":"a test","Fragments":["case,","case","of","in","case","string\";","string","case","so","of"]},{"Key":"test case,","Fragments":["I","were"]},{"Key":"case, I","Fragments":["hadn't","wouldn't","punted.","guess.","want"]},{"Key":"I hadn't","Fragments":["bothered.","thought","even","realized","thought","considered","considered","even","thought","actually","though"]},{"Key":"hadn't bothered.","Fragments":["I've"]},{"Key":"bothered. I've","Fragments":["now"]},{"Key":"I've now","Fragments":["added","kludged:"]},{"Key":"now added","Fragments":["a"]},{"Key":"added a","Fragments":["check","comment","little","commented-out","small","few","comment","function"]},{"Key":"a check","Fragments":["to","to","for","to","on","_if","for","for"]},{"Key":"check to","Fragments":["see","see","see","see","my","see","a","the","the","reduce"]},{"Key":"to see","Fragments":["if","a","[ranges](https://github.com/ericniebler/range-v3)","what's","how","invocation)","the","if","that","how","if","`total`","total","if","that","the","what's","the","why","which","how","it's","if","or","if","if","someone","that","!key.empty()","that","compiler","those","how","an","if","if","the","it","if","other","if","your","a","STL","if","other","what","knowledge","variable","use","the","the","you","anyone","you","whether","if","if","what","for","how","if","if","what","comments.","a","an","other","the","the","the","where","a","someone","early","how","if","how","if","if","a","the"]},{"Key":"see if","Fragments":["the","the","there","and","shouting","anything","i","a","there","they","it","I","it","anybody","the","the","they","am","string","functions","it","the","we","all","it","they"]},{"Key":"if the","Fragments":["char","string","character","code","phrase","string","current","input","song","vector","constructor","input","input","iterator","decision","function","argument","function","argument","code","object","key","caller","corresponding","key","entire","type","code","DNA","function","string","string","state","object","last","types","object","number","divisors","white_queen","functions","strings'","expression","caller","compiler","?","string","use","hypothetical","tests","string","string","problem","string","string","rules","human","string","sorted","word","string","compiler","comparison","strands","`map`","input","input","current","last","first","string","string","key","input","input","same","string","condition","character","input","use","same","strings","two","same","map","map","grammer","character","whole","comparison","function","default","string","phrase","entire","string","selected","strands","std::chrono","previous","type","last","input","string","buffer","-std=c++11","string","character","alphabetical","string","strands","last","value","first","whole","function","test","current","last","string","string","name","two","sizes","two","two","two","two","sequences","two","two"]},{"Key":"the char","Fragments":["is","array.","in","ranges.","overload.","overload).","*","`'\\0'`","by"]},{"Key":"char is","Fragments":["in","initialized","detected","alphanumeric,","?","a","lowercase","alphanumeric."]},{"Key":"is in","Fragments":["the","\\\u003cstring\\\u003e.","my","use,","iteration","a","a","retrospective","the","ROM","splitting","a","a","`std`,","the","not","`bench.cpp`,","my","a","bob.h?","lower","iteration","the","upper","the","the","an","an","professional","fact","x\\n\";","your","fact","that"]},{"Key":"map before","Fragments":["incrementing."]},{"Key":"job in","Fragments":["general.","general."]},{"Key":"in general.","Fragments":["You","I"]},{"Key":"general. You","Fragments":["think"]},{"Key":"You think","Fragments":["creatively."]},{"Key":" One","Fragments":["nitpick:","thing","efficiency","more","of","optimisation","other","advice","thing","last","qn:","quick","small","thing","thing","thing","actual","thing","more.","question","small","thing","quick","thing","option","minor","last","other","thing","more"]},{"Key":" The","Fragments":["way","matcher","implementation","cost","larger","time","name","boolean","stack","C++","only","comment","all","```min```","issue","`for","logic","generator","rest","range","hey","helper","condition","helper","new","way","regex","standard","sorting","functions","second","famous","code","last","difference","runtime","output","output","output","output","output","output","only","fast","real","body","first","full","way","reason","main","formatting!","formatting!","explicitly","line","amount","using","conversion","biggest","high-level","string","idea","idea","\"matches\"","code","test","choice","else","best","map's","final","declaration","loop","loop","concern","first","for-each","usual","only","process","empty","inner","final","implementation","using","sqrt","'","functionality","one","questions","use","one","primary","above","begin()/end()","same","following","free","first","second","`leap`","only","inner","one","`if`","reason","reason","math","compiler","integer","boost::algorithm::string","other","if","if","reason","use","implementation","example","case","only","second","results","result","formula","previous","solution","statements","typedef","final","constants","call","for","biggest","STL","way","previous","body","argument","underscore","variable","using","result","code","difference","tests/REQUIREMENTS","diagonal","else","value","name","sequence","way","biggest","best","check","other","definition","const","basic","std::ptr_fun","only","second","best","\"problem\"","anonymous","biggest","function","last","program","parens","ordering","using","helper","predicate","loop","algorithm","only","`isUpperCasePresent`","header","good:","bad:","way","yell_or_silence","transform","has_only_digits","conversion","isSilence","issue","library","functions","first","code","first","`\u0026`","way","name","overall","next","entries","message","results","Boost","testing","code","function","code","last","`using","isDNA","`while`","main","use","recusive","way","testing","comparison","basic","processing","second","reason","song","recursion","first","next","rest","indentation","iterator","use","biggest","formatting","in","aim","trade","way","next","only","maximum","end","function","code","last","spec","test","static","deque","boost","instructions","thing","modulus","only","older","square",".h"]},{"Key":"The way","Fragments":["you","yelling","I","this","it's","the","I","you","above,","these","you","that","I","you","that","I"]},{"Key":"way you","Fragments":["check","don't","use","handle","did","process","avoid","save","did","avoid","have","incremented","save","can","have","can","can","converted","don't","keep","avoid","process","separate","can","can","should","don't","are","could","create","did"]},{"Key":"you check","Fragments":["for","if","if","whether","a","if","if"]},{"Key":"check for","Fragments":["an","space","`!yell`","invalid","each","the","its","`isupper()`?","special","nullptr","existence","`s.empty()`","letters","validity,","white_","other_queen","the","a","'?'","more","the","`it","the","empty","anagram","existence","constants","empty","\"yelling\".","a","yelling","spaces","spaces","spaces","all","a","a","a","un-flushed","size","each","its","tabs,","`ispunct()`","alpha","null","empty","any","any","the","any","zero","equality;","random"]},{"Key":"for an","Fragments":["invalid","explanation","arbitrary","arbitrary","arbitrary","arbitrary","all","otherwise","extremely","exercise,","indirection).","imaginary","ordered","normal","empty","algorithms","explanatory","inplace-transform"]},{"Key":"invalid nucleotide","Fragments":["might","as"]},{"Key":"nucleotide might","Fragments":["allow"]},{"Key":"might allow","Fragments":["somebody"]},{"Key":"allow somebody","Fragments":["to"]},{"Key":"somebody to","Fragments":["call"]},{"Key":"to call","Fragments":["nucleotide_counts()","isupper()","`isupper()`","srand","`isWhiteSpace()`","it","the","x.f()","pow","begin","if","isupper,","them.","me","`tolower`","out","```string::compare```","it","```ss.str().empty()```","the","matches"]},{"Key":"call nucleotide_counts()","Fragments":["when"]},{"Key":"nucleotide_counts() when","Fragments":["there"]},{"Key":"when there","Fragments":["was","just","can't","are","is","are","is"]},{"Key":"there was","Fragments":["an","more","such","a","no","an","a","a","very","a","no","an","no"]},{"Key":"was an","Fragments":["invalid","old","option","unsigned","edit","issue","char[].","accidental","example","incorrect","interesting","artifact","equivalent","any()","interesting","exercise","anagram."]},{"Key":"nucleotide as","Fragments":["input."]},{"Key":"as input.","Fragments":["Am","It"]},{"Key":"input. Am","Fragments":["I"]},{"Key":"Am I","Fragments":["right","in","correct?","using"]},{"Key":"I right","Fragments":["in"]},{"Key":"right in","Fragments":["assuming","front","this","stating"]},{"Key":"in assuming","Fragments":["this?"]},{"Key":"assuming this?","Fragments":["I"]},{"Key":"this? I","Fragments":["could"]},{"Key":"could be","Fragments":["mistaken,","written","implemented","improved","useful","mistake","static.","fixed","a","simply","static","flipped","a","a","used","const","a","improved","inline,","eliminated","const,","easily","a","corrected.","quite","a","negative.","either","trivially","valuable","e.g.","an","in","improved","made","dynamic.","`is_question(string)`","VERY","rewritten","something","a","replaced","set","const\u0026.","trying","done","split","accomplished","altered","better?","better","more","more","improved","const.","done","made","static,","a","tremendously","simplified","simply","written","a","categorized","clearly","made","a","`string","wrong.","a","done","rewritten","faster.","optimized","made","replaced","that","better","replaced","simpler","cleaned","read","replaced","improved:","done","replaced","replaced","generated","easily","a","wrong","offloaded","thought","wrong","used","a","an","improved.","moved","missed","expressed","pass","just","`if","a","a","done"]},{"Key":"be mistaken,","Fragments":["but"]},{"Key":"mistaken, but","Fragments":["I"]},{"Key":"don't think","Fragments":["so.","it","the","you","this","the","this","you'll","this","sorting","your","this","I","it","it's","the","it's","the","that","you're","the","you","there's","it","regular","there's","recursion","your","I","that","`upp(s)`","performance","`trim_left_copy(str)`","this","it","there","the","optimization","they're","we","there's","that's","it's","I've","this","that","I've","using","I'm","it's","it","anyone","this","you","you","there","the","you","there"]},{"Key":"think so.","Fragments":["Somebody"]},{"Key":"so. Somebody","Fragments":["would"]},{"Key":"Somebody would","Fragments":["get"]},{"Key":"would get","Fragments":["the","rid","in","a","by"]},{"Key":"get the","Fragments":["map","same","iterator,","same","right","last","performance","sizing","point","test","same","wrong","other","response","benefit","tests","last","same","gist","program","tests","same","to","length","point","job","chance","testing","test","class",".plus","picture","same","readability"]},{"Key":"map back","Fragments":["while"]},{"Key":"back while","Fragments":["having"]},{"Key":"while having","Fragments":["invalid"]},{"Key":"having invalid","Fragments":["input."]},{"Key":" As","Fragments":["a","always","per","for","to","for","to","for","you","a","for","a","counter-intuitive","for","a","for","a","I","for","for","for","a","far","an","with","for","for","for","promised:","for","you","for","for","far","you","for","for","you","you","to","I","for","for","for","for","for","a","always","for","I","for","a"]},{"Key":"As a","Fragments":["minor","reader,","reviewer","consumer","purely","matter","purely","matter","user","purely","strictly","rule","general","minor","result,","matter","final"]},{"Key":"a minor","Fragments":["nitpick,","thing.","maintenance","readability"]},{"Key":"minor nitpick,","Fragments":["I"]},{"Key":"nitpick, I","Fragments":["hate","think","will"]},{"Key":"I hate","Fragments":["it","doing","the","to"]},{"Key":"hate it","Fragments":["when"]},{"Key":"it when","Fragments":["people","I","I","non-const:"]},{"Key":"when people","Fragments":["just","discuss","use","use"]},{"Key":"people just","Fragments":["assume","love"]},{"Key":"just assume","Fragments":["that","I'll"]},{"Key":"assume that","Fragments":["people","this","a","an"]},{"Key":"that people","Fragments":["know","`evaluate`"]},{"Key":"people know","Fragments":["that","right"]},{"Key":"that classes","Fragments":["have"]},{"Key":"classes have","Fragments":["default"]},{"Key":"have default","Fragments":["private","public.","constructor"]},{"Key":"default private","Fragments":["members"]},{"Key":"private members","Fragments":["and","are","of","are"]},{"Key":"members and","Fragments":["structs","keep","you'd","namespace","methods."]},{"Key":"and structs","Fragments":["have"]},{"Key":"structs have","Fragments":["default"]},{"Key":"default public.","Fragments":["To","So"]},{"Key":"public. To","Fragments":["be"]},{"Key":"To be","Fragments":["more","fair,","honest","clear,","thorough","a","concrete,"]},{"Key":"be more","Fragments":["clear,","complex","appropriate","efficient","tightly","idiomatic","readable","modular,","careful","up","efficient","probable)","efficient","correct","significant,","organised","likely","important","efficient","precise...","appropriate","inclined","readable.","concise.","fastidious","efficient;","readable.","efficient.","c++,","readable","optimized","inclusive","readable","expressive","efficient","expressive","characters","appropriate","than","efficient","easily","C++","clear.","appropriate?","readable.","transparent"]},{"Key":"more clear,","Fragments":["it"]},{"Key":"clear, it","Fragments":["might"]},{"Key":"it might","Fragments":["be","not","be","become","be","be","waste","be","help","even","make","not","not","be","get","be","be","be","simplify","be","actually","be","be","give","be","be","make","have","make","be","be","seem","be","be","be"]},{"Key":"be nice","Fragments":["to","as","too,","to","to","if","to"]},{"Key":"nice to","Fragments":["see","read,","know","see","declare","state","see","see","see","see","see","use","know"]},{"Key":"see a","Fragments":["\"private:\"","benefit","problem","lot","way","way.","single","noticeable","legit","reason","greater","few","use","const","lot","straightforward","few","performance","linear","real"]},{"Key":"a \"private:\"","Fragments":["before"]},{"Key":"\"private:\" before","Fragments":["your"]},{"Key":"before your","Fragments":["nucleotide","header,","for"]},{"Key":"your nucleotide","Fragments":["map"]},{"Key":"nucleotide map","Fragments":["in","instead"]},{"Key":"map in","Fragments":["your","the","constructor","the","one"]},{"Key":"in your","Fragments":["class.","head.","map.","switch","whitespace","case)","map","headers.","header","header","headers,","headers,","exception.","project","literal.","function","$PATH","internal","standard","address","constructor?","header","code.","submission","code","case.","implementation)","anticipation.","implementation","code.","code.","constructor","comment","namespace.","header","header","source","header","include","constructor","first","code.","program?","function","code:","for","example","function.","loops","first","`checkPoke`","implementation","code","```verses()```","implementation","source","string.","code,","isSilence","bob.h","`hey`","implementation.","conditional","functions.","code.","\"hamming.h\"","answer.","solution?","program.","code.","program.","answer","matches","isAllCapsAndAlpha()","switch,"]},{"Key":"your class.","Fragments":["This"]},{"Key":"class. This","Fragments":["is","way,"]},{"Key":"This is","Fragments":["just","common","more","extremely","an","a","a","known","similar","mainly","not","great.","an","a","O(n)","indeed","good.","a","because","one","actually","an","just","perfectly","really","a","much","a","a","DbC,","only","looking","really","clearly","not","fantastic","a","visual","great.","the","a","very","dying","just","not","probably","a","a","kind","done","a","related","an","fixed","my","very","a","looking","looking","likely","likely","my","what's","arguably","tested,","definitely","a","my","nice","a","sort","the","pretty","nice","much","another","a","a","a","my","a","easy","because","just","also","a","my","a","a","also","the","basically","not","a","a","bad.","much","way","an","assuming","pretty","not"]},{"Key":"is just","Fragments":["my","reset,","like","evil","the","concealing","a","odd.","something","as","the","as","added","to","begging","a","a","for","directly","done","like","to","used","about","an","not","sloppy.*","a","to","an","a","as","a","a","a"]},{"Key":"just my","Fragments":["bias","habit","opinion.","two"]},{"Key":"my bias","Fragments":["though.","I","on"]},{"Key":" There","Fragments":["are","are","might","are","is","just","is","might","is","is","should","is","is","are","doesn't","are","are","are","is","are","are","is","are","are","is","is","is","is","probably","are","are","are","are","are","is","are","wasn't","is","is"]},{"Key":"There are","Fragments":["no","some","`n","too","solutions","a","lots","times","classes","still","a","whole","a","a","two","a","(as","some","a","no","also","a","quite","certainly","three","plenty","a","a","some"]},{"Key":"are no","Fragments":["test","defects.","letters.","guarantees","private/public","lower-case"]},{"Key":"no test","Fragments":["cases","case"]},{"Key":"test cases","Fragments":["for","requiring","due","require","expect","such","are","that","test","and","I","only","in","(in","and","are","have","have","you"]},{"Key":"cases for","Fragments":["counter(string)","auto"]},{"Key":"for counter(string)","Fragments":["with"]},{"Key":"counter(string) with","Fragments":["invalid"]},{"Key":"with invalid","Fragments":["input"]},{"Key":"invalid input","Fragments":["so","results","you'd","you","you're"]},{"Key":"input so","Fragments":["the","I"]},{"Key":"so the","Fragments":["behavior","pseudo","pieces","second","maximum","risk","name","loop","compiler","loop","return","caller","last","simple","best","compiler","tests","func","class"]},{"Key":"the behavior","Fragments":["is","and","of"]},{"Key":"behavior is","Fragments":["undefined."]},{"Key":"is undefined.","Fragments":["My","See","int"]},{"Key":"undefined. My","Fragments":["choice"]},{"Key":"My choice","Fragments":["was"]},{"Key":"choice was","Fragments":["based"]},{"Key":"was based","Fragments":["on"]},{"Key":"based on","Fragments":["the","the","your","*==*,","**plus**","**==**,","**plus**","**==**,","**plus**","**==**,","**plus**","**==**,","**plus**","**==**,","**plus**","**==**","**plus**","**==**","**plus**","**plus**","plus","plus","==","a","the","the","questions.","first","seeing","cost","your","your","the","the"]},{"Key":"on the","Fragments":["principle","stdlib","application","personal","personal","character.","missing","overflow","number","final","emptry","string","contrary,","map","wall,","wall","compiler)","time","actual","result","CLI","platform)","wall,","wall,","wall,","left","check","compiler","following","last","basic","command","exception","content.","amount","same","second","eyes.","machine","internet","stack.","first","first","other","end","objects.","objects","part","part","arguments","version","fact","use","vast","reference","size","same","foot,","scaffolding.","money.","short-circuit","return","main","application.","rounding","database.","subject.","stack,","fence","best?","StringView","matter","board.","other","reader","data","code","`map\u003cstring,","heap","range","(arguably","caller's","*end*","other","declaration","pros","compiler","reference.","(few)","string","free","right","trailing","compiler","subject.","next","command","other","classes.","set","same","first","first","exercise","subject","commenting","changing","string,","stack","function","ignores_punctuation","if","[exercism","use","respective","implementation","word_count_test.cpp","definition,","variable","string","input","website.","compiler","test"]},{"Key":"the principle","Fragments":["of","of","would"]},{"Key":"principle of","Fragments":["being","least","preferring"]},{"Key":"of being","Fragments":["generous","able","extremely","argumentative,"]},{"Key":"being generous","Fragments":["and"]},{"Key":"generous and","Fragments":["forgiving"]},{"Key":"and forgiving","Fragments":["by"]},{"Key":"forgiving by","Fragments":["returning"]},{"Key":"by returning","Fragments":["a","a","a"]},{"Key":"returning a","Fragments":["map","pair","modified","vector,","raw,","const\u0026","const","```map","`const","literal","double","vector","vector","reference","`double`","school\u0026,","conditional","literal.","```bool```","lazy","by-value","static","boolean"]},{"Key":"map of","Fragments":["the","**char**","the","int"]},{"Key":"of the","Fragments":["nucleotides","class.","exercise","function","object.","robot","`k`-th","function","API","class.","API","robot","constant","variable,","API","function.","different","original","closed","string:","library","sizeof","new","negative","implementation.","simpler","time:","cases,","Standard","Standard",".cpp","function","question","transitions","variable","\u003ccode\u003eremove_doubles\u003c/code\u003e","original","function","loop,","STL","README.","interface,","bob.h","heavy","index","lambda","useless","functions","functionality","c-style","enum","enum,","string","strings.","`create_histogram`","function,","empty()","fact","`if","same","string.","function","test","map","silence","file,","points","exercise","test","string.","input","map.","dna","input","molecure","input","constructor.","string","string","string","string","string","string","STL.","STL","information","class.","map","stl","reserve","\"easy\"","exception","counter","add()","function","ternary","number","bit","other","element","shouting","cases.","solutions","function","problem,","pointer","argument.","member","make,","loop","inner","string.","loop.","problem","integer","unit","formatting,","string.","expression","specified","main","code,","language.","language.","word","sentence.","container.","contents","animals.","`Animal`","code","includes","loop","header","magic","string","string","string","string","string","std::set","ternary","over","code","ternary","true","inner","math","tokenization","best","standard","library.","original","original","binary).","testing","namespaces","struct","lib","header.","latter","string","initializer","loop,","target","missing","code,","function","string","'1'","default","class","other","'1'.","default.","checks","test","public","more","few","different","```bloom","key","other","three.","client","string.","reasons","things","C++11","solutions","empty","string","string","buffer","Boost","time,","C++","first,","string","for","biggest","string.","string","string.","numbers","outer","sub-arrays",".h","automatic","string.","function","cleanKey","recommendations","first","input","object","function,","boost","fact","find_if","function","way","member","class'","genomes.","solution,","loop.","pow","same","cx","time","third","pow","work","standard","better","things","input","std","same","standard","types","input","increment/decrement","fact,","workarounds,","variable","char_type,","literal,","input","input","map.","input,","map","same","alphabet","same","cost","string","local","sortedness","tree,","CLI","tradeoffs","bytes","class","wheel","c++","keys.","modulus","person","caller's","string.","input","atomic","thing","things","header.","week","month","function","following","strings.","best","original","`if-else-if`-chain","multiplication","standard","test","ones","same","range","code.","`const`","code","code","`uniform_int_distribution`s","rare","string,","benefits","tests,","compiled","calculation","it","method.","string","computation","others","string).","logical","strongest","expression","string","macros.","work","sing","sing","secound","program.","code.","exercism","function","regex","string","underlying","work","benchmark","```plus```","namespace.","first","header","implications.","python","interface,","hey","response","header","constants","function","string.","string","program","program","argument","```any_of```","input.","input","bob","is_/has_","best","regexes?","predicate","input.","string.","tests.","StringView","referenced","`StringView`;","low-level","string).","```StringView```","interface","namespace","file.","program","inputs.","string.","check","time*.","time*,","two","`if`.","string.","situations","loop","parameter","main","last[-1].","last[-1].","translation","tests","more","\u003cinclude\u003e","sum","reason","loop","word","type","values","variables","fixed","public","cross","key","`std::min`","operation","copy-construction","project","overhead","standard","better","boost","items.","uppercase","loop","ages","strings","i-th","characters","other.","two","specified","temp","testcases","anonymous","stl","entire","any_of,","function,","code.","isAnagram()","reference","reference","same","same","`copy_string_to_lower()`","iterator.","for","loop,","code.","library","word","group","parameter","class","string.","exercise.","One","split()","punctuation","standard","advantages","subjects","inconsistencies","referenced","mutable","object.","first","for","for","`==`","smallest","two","conversion","```const","input","string,","base","TU","translation","code.","specs","`string`","operation","unnamed","cpp.","header.","same","problem","problem","class","candidates","header","count","time,","method,","problem","domain","problem.","implementation","problem.","characters","problem.","problem.","splitting","problem,","conditions","isYell()","decisions","namespace!","directive","\"cctype\"","input","approach","test","string.","algorithms","Bob","test","previous","functions","```auto```","input","benefits","input?","tests,","strings.","code","letters.\u003c/li\u003e","same","message","word,","using","function","map;","program.","bob","implementation","code","soft","different","vector\u003cchar\u003e","language","input","input","file","bob","responses","string","STL","check","text","text","way","for-loop.","functions","postfix-variant","map","[standard](http://www.cplusplus.com/reference/map/map/operator%5B%5D/)","ways","C++","program,","alphabet","string","string","match.\u003c/li\u003e\u003c/ol\u003e","for","match.\u003c/li\u003e\u003c/ol\u003e","times","\"if\"","same","phraseType","switch","solutions","readme,","conditionals","first","second.","length","input","length","song,","situation","boost","global","word_count","work","start","code","file.","isDNA","strings","other","`bool`","loop,","verse.","program.","dispositions","logic","enum.","single-iteration","xpressive","standard","counts,","standard","std::regex","test","algorithm","functions:","strings","trial","primary),","features","C++","character","original","whole","character","class.","lowerCase","\"int","loop","```verse()```","'magic'","song","time","cases","test","loop?","for-loop","loops.","above","explicit","robot","characters","boost","list","boost","names","random","mod","regex","repetition","song.","input","tests,","for","`compute`","mismatched","functions.","bob","submission.","original","string","cases","other","```counter```","rest","code.","includes/helper","sieve","functions","very","song","hey","snippets","DB","roster","domain_error","Python","program,","three","equation","expected","test","points","boost","for","random","same","type","tests,","program","string,","remark.","code,","string","string","object","problem","constructor,","container","solution","contract","code","word.","`make_pair`","original","string","internal","preprocessor","string","possible","primes?","code.","many","string,","many","string,","original","two","std::","whole"]},{"Key":"the nucleotides","Fragments":["found"]},{"Key":"nucleotides found","Fragments":["in"]},{"Key":"found in","Fragments":["the","sequence","text","other","the","the","the","```#\u003calgorithm\u003e```","the"]},{"Key":"the string","Fragments":["even","contains","is","has","initialize","I","with","being","incurs","contains","constructor","is","is","is","is","is","is","is","is","copy,","once","in","from","is","is","is","is","is","is","picks","member-API","back","literals","would","version","(by","from","once?","copies,","and","made,","I","only","consisted","(one","(depending","tokenizer","anyway,","in-place.","by","in","as","\"!\"),","algorithms","twice.","copy.","earlier.","I","indexing","operator","and","many","_at","right","for","has","validations","into","literals","is","contains","using","copying","you","manipulation","type,","buffer","classification","that","(the","through","has","was","unnecessarily","using","programmatically","one","once","is","is","you","for","will","only","splitting","the","-","lengths","length","comparison","as","argument","in","explicitly","in","told","is","into","into","once","in","is","must","(even","by","as","contains","lenght","is","argumentsby","has","possibly","given","to","(copying","and","passed","first","than","once.","more","(though","letter","in","is","\"*\"","instead","like","library.","once,","each","(e.g.","has","and","and","you","to","until","successfully.","successfully.","is","is","indexing","functions","and","to","and","first","length","lower","without","`const`","to","is","with","just","beforehand.","class,","as","variable","is","class","class","is","expresses.","to","but","and","to","isn't","should","if","to","length","yourself,","to","in","is","is","length","functions","only","and","into","should","every","multiple","was","to","is","is","is","only","has","and","\"?4\"","copy","make","for","passed","and","literal","as","doesn't","class.","length,","for","into","by","by"]},{"Key":"string even","Fragments":["if"]},{"Key":"even if","Fragments":["it","```key```","the","you","`std::map\u003cstd::string,","it's","it","it","it","that","you","that's","it's","there","it","my","that","the","they"]},{"Key":"it contains","Fragments":["whitespace,","no","the"]},{"Key":"contains whitespace,","Fragments":["hyphens,"]},{"Key":"whitespace, hyphens,","Fragments":["quotes,"]},{"Key":"hyphens, quotes,","Fragments":["etc.."]},{"Key":" Nice","Fragments":["function!","use","variable","job.","hey","use","work,","use","validation","and","job","use","and","improvements.","and","solution!","use","solution!","use","clean","and","use","usage","idea","and","code!","code!","use","implementation!","code!","code!","code!","use","and","code!","code!","code!","work.","solution.","solution!","solution!","code!","work.","improvements","and","work!","work"]},{"Key":"Nice function!","Fragments":["It"]},{"Key":"function! It","Fragments":["makes"]},{"Key":"It makes","Fragments":["the","sense","its","the","the","the","for"]},{"Key":"makes the","Fragments":["whole","benefit","code","code","code","code","intent","string","whole","code","code","code","implementation.","implementation.","code","list","code","code","rest","code","final","design","implementation","process","code"]},{"Key":"the whole","Fragments":["code","function","thing","thing","input","string,","string","string","string)","truth","point","class,","range","being","`int`-family","vector.","profile","result.","code","content.","alphabet.","string","school","thing","string","alphabet","string","C++","problem.","thing","string","thing","program","program","program","arrays.","string.","song","string.","```static_cast\u003c\u003e```","name.","song,","thing","string","string","string","thing","namespace","```std```"]},{"Key":"whole code","Fragments":["a","less"]},{"Key":"code a","Fragments":["lot","little","bit","bit","bit","lot.","bit","bit.","little","bit","litte.","lot","little"]},{"Key":"a lot","Fragments":["more","easier.","of","lately","of","more","for","cleaner","simpler.","of","of","of","of","of","bigger","more","of","fewer","more","like","of","of","for","of","of","about","of","like","and","of","more","of","useful","of","of","both","of","more","of","of","of","for","in","of","of","larger","of","for","there,","of","of","cleaner","of","more.","with","of","of","with","shorter.","shorter","of","of","of","of","when","of","of","of","of","to","of","of","of","of","of","simpler","wrong","from","for","less","of","of","faster.","easier","I","of","of","of","simpler.","of","nicer.","simpler!","easier","more","of","of","to","of","of","of","of","of","of","of","of","of"]},{"Key":"lot more","Fragments":["readable!","code","clear","work","of","fun","readable."]},{"Key":" Congratulations","Fragments":["on","for","on","on","on","on","on","on"]},{"Key":"Congratulations on","Fragments":["getting","starting","starting","turning","a","a","getting"]},{"Key":"on getting","Fragments":["something","it","something"]},{"Key":"getting something","Fragments":["that","that"]},{"Key":"something that","Fragments":["worked.","works","makes","resolves","will","might","holds","should","should","took","doesn't","should","is","works.","works."]},{"Key":"that worked.","Fragments":["I"]},{"Key":"worked. I","Fragments":["do"]},{"Key":"I do","Fragments":["however","not","not","know","not","get","agree","understand","actually","not","understand","think","tend","understand","that?","not","not","see","I","a","something","partially","like","have","know","need","feel","like","not","always","not","it","see","have","agree","think","recognise","it.","however"]},{"Key":"do however","Fragments":["have","have"]},{"Key":"however have","Fragments":["some","a"]},{"Key":"have some","Fragments":["nitpicks:","free","spare","more","shortcomings:","details","type","really","template","performance","other","improvement"]},{"Key":" Why","Fragments":["do","does","are","the","isn't","not","did","so","not","the","is","didn't","not","did","not","is","the","not","use","copy","are","do","store","a","don't","not","not","do","did","don't","have","the","are","did","not","not","do","are","does","not","aren't","isn't","don't","are","do","did","do","not","did"]},{"Key":"Why do","Fragments":["you","you","you","you","you","you","you","you","you","you"]},{"Key":"you do","Fragments":["this?","to","decide","it.","a","2","exactly","it","specialize...","find","keep","go","sacrifice","a","bounds-check","arithmetic","not","here","not","not","everything","is","it"]},{"Key":" typedef","Fragments":["std::map\u003cchar,","base_clock\u0026lt;12\u0026gt;","base_clock\u0026lt;24\u0026gt;"]},{"Key":"typedef std::map\u003cchar,","Fragments":["int\u003e"]},{"Key":"std::map\u003cchar, int\u003e","Fragments":["mCharInt;"]},{"Key":"const char","Fragments":["A","T","C","G","from","*test2","c","*","*argv[])","[]","reference","*chars"]},{"Key":"char A","Fragments":["="]},{"Key":"A =","Fragments":["'A';"]},{"Key":"char T","Fragments":["="]},{"Key":"T =","Fragments":["'T';"]},{"Key":"char C","Fragments":["="]},{"Key":"C =","Fragments":["'C';"]},{"Key":"char G","Fragments":["="]},{"Key":"G =","Fragments":["'G';"]},{"Key":"would put","Fragments":["they","an","space"]},{"Key":"put they","Fragments":["typedef"]},{"Key":"they typedef","Fragments":["in"]},{"Key":"typedef in","Fragments":["the"]},{"Key":"the class","Fragments":["myself,","constructor?","definition.","only","definition.","is","into","at","name","body,","I'm","declaration","data","'over-promising'","declaration","best","you'd","doesn't","and","your","definition","definition","`bob`,","and","has","but","definition","adds","structure","body","body."]},{"Key":"class myself,","Fragments":["since"]},{"Key":"myself, since","Fragments":["you"]},{"Key":"since you","Fragments":["don't","don't","only","are","are","are","have","know","are","maintain","wouldn't","require","have","know","have","know","can","know","are","are","can","have","don't","seem","create","gave","are","are","are","aren't"]},{"Key":"you don't","Fragments":["use","use","want","specify","need","need.","have","include.","need","need","need","really","really","want","have","have","need","have","have","have","have","need","have","have","need","have","get","actually","control","need","want","want","use.","need","need","have","change","use,","need","need","do","have","want","have","use","need","want","actually","want","actually","need","need","need","you","have","use","include","need","need","write","have","need","have","know","need","have","have","want","need","use","like","simply","change","mean","have","intend","actually","need","need","get","detect","have","need","modify","need","need","need","need","mind,","really","need","need","want","need","have","need","need.","need","need","want","pass","do","have"]},{"Key":"don't use","Fragments":["it","it","regex","``using","``using","NULL)","the","it","or","\u003ccmath\u003e","it","using","_that_"]},{"Key":"use it","Fragments":["out","too","outside","because","correctly","often","before,","as","at","at","at","on","in","as-is","for","only","in","in","in","in","directly","to","in","in","in","at","in","anywhere","instead"]},{"Key":"it out","Fragments":["of","of","a","of","of","actually","with","into","into"]},{"Key":"the class.","Fragments":["Although","Also,","They","It","You","This","That","FWIW","However,","I"]},{"Key":"class. Although","Fragments":["since"]},{"Key":"Although since","Fragments":["you"]},{"Key":"it too","Fragments":["manny","closely."]},{"Key":"too manny","Fragments":["times,"]},{"Key":"manny times,","Fragments":["I"]},{"Key":"times, I","Fragments":["probably"]},{"Key":"I probably","Fragments":["wouldn't","should","should've","wouldn't","wouldn't","should","should"]},{"Key":"probably wouldn't","Fragments":["have","use","have"]},{"Key":"wouldn't have","Fragments":["used","to","to","to","happened","used","used","worked"]},{"Key":"have used","Fragments":["a","a","a","exceptions","isupper","``std::string::npos``.","`for(auto","`for(std::string::iterator","a","a","a","the","a","a","a","regex","a","a","\u003calgorithm\u003e","`std::logic_error`","boost's","an","operator","string(10,","that","an"]},{"Key":"used a","Fragments":["typedef","T","```std::map\u003cint,","**namespace**","lambda","fixed","`multiset`","variable","lambda","namespace","namespace","pretty","`map`","namespace","namespace","namespace","namespace","switch","bunch","std::unordered_map","regex","regex","namespace","map","map","loop","couple","```using","lot,","flag,","lot.","switch","library","multiset),","stringstream"]},{"Key":"a typedef","Fragments":["anyway.","for"]},{"Key":"typedef anyway.","Fragments":["I'm"]},{"Key":"anyway. I'm","Fragments":["pretty"]},{"Key":"I'm pretty","Fragments":["sure","new","sure","happy","sure","inconsistent","sure","happy","new"]},{"Key":"pretty sure","Fragments":["you","that","its","the","he","the","this"]},{"Key":"sure you","Fragments":["can","gain","could","have"]},{"Key":"you can","Fragments":["always","actually","simply","use","use","remove","write","use","simply","use","index","directly","cache","use","include","mess","avoid","just","do","instead","still","return","see","check","use","avoid","just","post","make","save","make","take","use","let","break","specify","first","also","make","see","also","get","remove","compare","get","use","actually","also","start","make","transform","check","use","also","do","do","(and","call","upload","make","eliminate?","write","solve","handle","do","simply","always","search","write","just","save","access","also","std::begin(const_cast\u003cconst","use","submit","declare","guard","write","get","upload","use","declare","get","figure","get","get","rely","submit","use","consider","just","pass","still","just","change","tighten","use","replace","remove","use","avoid","avoid","shorten","use","use","use","use","use","find","easily","later","definitely","switch","throw","omit","modify","see","just","change","get","use","get","get","express","only","refactor","remove","find","use","usually","use","use","do","rely","try","modify","do","get","*pretend*","simply","save","turn","use","google","implement","make","make","use","replace","try","use","move","save","use","use","skip","have","make.","just","just","replace","simply","remove","use","use","just","in","have","increment","use","eliminate","use","rewrite","rewrite","convert","use","simply","initialise","declare","write","get","simplify","see","just","also","actually","take","generalize","write","get","directly","move","use","imagine,","just","use","deal"]},{"Key":"can always","Fragments":["just","have"]},{"Key":"always just","Fragments":["say"]},{"Key":"just say","Fragments":["dna::mCharint","std::string,","(out.empty())","this","\"using"]},{"Key":"say dna::mCharint","Fragments":["to"]},{"Key":"dna::mCharint to","Fragments":["use"]},{"Key":"to use","Fragments":["it","`leap`","it,","the","or","it.","nested","a","the","trim,","iterators","C++11.","a","a","Boost","seems","*lower_bound*","lower_bound","a","``BOOST_FOREACH``","some","**unit64_t**","c-style","library","polymorphism","c-strings","a","\"isalpha\"","one","```complete_song```","a","subtraction","::tolower","for","\u003c","a",".assign(\"Pling\")","\u0026lt;algorithm\u003e,","a","a","std::string","the","the","anything","`-Wall","it","const","regex","the","the","one","operator[]","an","`boost`","an","\u0026lt;algorithm\u0026gt;","as","that","typed","they're","for-each-syntax","C++11","size_t","converters","a","them","concepts","auto","them","the","it","your","std","a","a","functions,","them.","auto","modern","the","modern","uint32_t","it","`regex_replace`","`int`","polymorphism","the","iterator","`do-while`","`fold`","foreach","only","static","regex","the","\u003ccode\u003eat\u003c/code\u003e","them.","the","boost.","!","braces.","the","hand-written","a","a","std::all_of,","boost::algorithm::ends_with.","it","count_if","const","islower","the","on","a","pointer","that","the","split","`boost::erase_all(sth,","here.","switch","this","#pragma","\"C\"","regular","the","the","C++'s","string","a","two","`g++","a","stdlib","variables","is*","back_inserter,","a","new","new","a","`bool`","names","the","them.","the","some","```std::array\u003csong_verse\u003e```.","```std::string::operator+()```","only","these","the","the","the","the","snprintf","the","range","the","them.","pointers","references","as","it.","preprocessor","long","```protected```","a","a","-\u003e","any","it","range","both","a","an","OOP","iterators","the","iterators","iterators","C++","std::list","libraries","this","a","white","string","```push_back```,"]},{"Key":"it outside","Fragments":["the","the"]},{"Key":"outside the","Fragments":["class.","```while```","for","inner","inner","C","loop","limit","loop","translation","source","loop.","`for`","loop","scope","class"]},{"Key":"class. Also,","Fragments":["why","it"]},{"Key":"Also, why","Fragments":["make"]},{"Key":"why make","Fragments":["the"]},{"Key":"the const","Fragments":["chars?","at","reference!","char*","specifier","qualifier","at","iterator","qualifier.","change"]},{"Key":"const chars?","Fragments":["Everywhere"]},{"Key":"chars? Everywhere","Fragments":["you"]},{"Key":"Everywhere you","Fragments":["used"]},{"Key":"you used","Fragments":["a","two","all","regular","camelCase","boost::tokenizer.","made","macros","the","a","accumulate()","a","a","the","iostream","these","which","iterators","the","anything","a","iterators,"]},{"Key":"a T","Fragments":["for"]},{"Key":"T for","Fragments":["instance,"]},{"Key":"for instance,","Fragments":["you"]},{"Key":"instance, you","Fragments":["could"]},{"Key":"you could","Fragments":["replace","use","use","write","use","do","use:","use","create","save","simplify","refactor","do","have","optimize","use","write","just","replace","just","have","possibly","have","implement","start","just","change","return","avoid","consider","just","call","probably","have","take","very","use","probably","get","start","also","use","say","probably","improve","use","consider","only","potentially","simply","up-front","try","force","try","use","do","repeat","make","just","theoretically","consider","use","check","use","consider","make","do","use","loop","static/anonymous","change","speed","remove","consider","replace","remove","numbers.reserve(s.size())","consider,","restructure","make","consider:","use","do","simplify","use","make","just","count","use","encapsulate","use","not","remove","just","hide","consider","use","rely","instead","also","use","have","leave","solve","just","do","just","save","use","change:","considering","consider","move","consider","scale","omit","define","directly","have","declare","initialize","possibly","use","combine","go","potentially","loop","just","reduce","have","pass","have","have","have","improve","(should!)","reuse","get","have"]},{"Key":"could replace","Fragments":["it","all","most","all","the","the"]},{"Key":"replace it","Fragments":["with","with","with","by"]},{"Key":"it with","Fragments":["'T',","`(a","a","the","a","`boost::tokenizer`","a","the","the","involves","a","regex","some","a","clang","extern","another.","word.","```namespace"]},{"Key":"with 'T',","Fragments":["in"]},{"Key":"'T', in","Fragments":["both"]},{"Key":"in both","Fragments":["the","cases","places","loops","of","the","strings.","strings.","of"]},{"Key":"both the","Fragments":["switch","switch","test","test","```auto```","word","auto","original","current"]},{"Key":"the switch","Fragments":["and","and","statement.","version,","would","version","statement","block","statement,"]},{"Key":"switch and","Fragments":["the","the"]},{"Key":"and the","Fragments":["map.","compact","compiler,","longer","fastest","target","sum","map",".NET","syntax","\u003ccode\u003eclean_beginning_end\u003c/code\u003e","r/cpp","\"","syntax","internal","satement","classification","value","exception","initialization","optimizer","function","two","answer","successive","count","second","creation","smaller","constant","only","true","nice","stripping","```list_of```","second","`trim()`","parameter","whole","same","semicolon","find","other","other","additional","parser","test","most","for_each","raw","least","way","linker","first","second","use","negative","content","errors","results","predicate","constructor","constructor","second","`at`","checks","header","boolean","memcopy?","same","yell","specifics","caller","entire","associated","content","counting","cppreference","boolean","tests","map","iterating","brevity","input","tests","required","last","compiler","`accumulate`.","amount","word","word","evaluation","stackoverflow-originated","would-be","overall","whole","function","number","functions","candidate","final","count()","return","problem","isupper()","```for```s,","last","convention","header","accepted","overheard","auto","code","rest"]},{"Key":" Also,","Fragments":["I","we","since","there","you","is","I","your","please","you","using","by","convert","the","many","C++,","returning","is","binding","is","it's","any","is","`const","grade","you","I","the","you","having","I","try","auto","it's","as","absolutely","in","someone","you're","you're","it","I","I","I","I've","I'm","I","functions","I'd","making","strLenght","the","by","I","not","you","have","while","it's","I","I'm","the","while","in","casting","you","you"]},{"Key":"Also, I","Fragments":["think","had","hoped","don't","covered","showed","didn't","think","think","think","had","think","initially","think","need","like","think","don't","have"]},{"Key":"I think","Fragments":["you","that's","what","that","you","that's","I","a","you","`mphone`","that","what","that's","it's","@paris","the","the","it's","in","it's","this","they","the","you","*unordered_map*","you","it","you","you","the","it","it","the","iteration","I'm","insert","it","I","is","someone","this","using","people","apostrophe","it","you","it","it","something","the","we'd","it's","that","that","searching","i've","I","this","that","it","is","this","you've","that","the","feedback","boost","is","in","it","your","it's","it's","mostly","that","I","that's","I","it","it's","you're","the","it","that","this","doing","pow","insert","it","access","is","calling","that","you","you'd","it's","it","@cedrick","is","it's","I","it's","it","I","my","there","a","it","it's","this","that","const\u0026","you","that","for-each","it","I","your","that","this","calling","I","I've","you","I","it's","what","it's","in","my","there's","it","it","it","I","the","a","the","the","its","it's","it's","moving","it","if","that","the","you","this","this","this","using","I","splitting","it","your","since","the","leaving","@marc","the","you","my","the","you","the","it","I","Google","going","it","it's","`operator","that","in","I","the","it","you","this","it","it","that","however,","I","`\u003ccctype\u003e`","that","that","the","the","all","the","what","would","it's","a","you","I","your","it's","what","you","if","is_yell","being","it's","it","that","there's","what","only","I","the","if","this","that","is","splitting","the","it","it","regex","of","keeping","that","that","it","it","it","this","the","it","that","there","it","you","more","the","declaring","it","you","that","this","you","the","a","a","certain","using","size_t","that","you","you","regular","your","I'll","that","that","it","this","GNU's","the","my","works","it's","it","it","it's","you're","is","if","my","I'd","something","your","you","you","it","it","your","this","a","I","the","`((std::isalpha(*it)","`!std::islower(*it)`","with","you","the","you","streams","you","the","the","you","this","I've","there's","it","what","ran","it","I","it","it","detecting","makes","our","it's","this","you","it","that","that's","that's","you","the","your","using","you","I","it","I","your","I","it","the","it","you","that","it","you","you","you","that"]},{"Key":"think you","Fragments":["could","should","did","can","meant","should","can","can","need","need","are","could","were","will","could","may","might","have,","need","are","should","can","should","can","could","are","could","can't","don't","never","don't","are","can","can","could","are","should","need","should","could","just","used","definitely","did","did","should"]},{"Key":"could use","Fragments":["just","`date","a","range","```\u003ccctype\u003e```'s","4","**erase**","a","a","freemarker","an","that","const.","find","`std::any_of`","strided","some","std::string","std::string","the","the","some","to","some","the","the","```","an","`using","regex","_stringstream_","regex","a","isspace(c)","a","it","the","some","an","the","boost::to_lower_copy","the","the","the","```islower```","```const"]},{"Key":"use just","Fragments":["plain"]},{"Key":"just plain","Fragments":["_counts[c]++"]},{"Key":"plain _counts[c]++","Fragments":["instead"]},{"Key":"_counts[c]++ instead","Fragments":["of"]},{"Key":"of actually","Fragments":["returning","testing"]},{"Key":"actually returning","Fragments":["a"]},{"Key":"a pair","Fragments":["and","of","from","of","for"]},{"Key":"pair and","Fragments":["doing"]},{"Key":"and doing","Fragments":["things","```robot_name"]},{"Key":"doing things","Fragments":["like:","the","like","with"]},{"Key":" itr-\u003esecond","Fragments":["="]},{"Key":"itr-\u003esecond =","Fragments":["itr-\u003esecond"]},{"Key":"= itr-\u003esecond","Fragments":["+"]},{"Key":"itr-\u003esecond +","Fragments":["1;"]},{"Key":"are some","Fragments":["other","things","inefficiencies","room","comments","places","low-level","suggestions","things","specialized","extra","very","closed-form","things"]},{"Key":"some other","Fragments":["minor","convenient","header","reason*)","library",".cpp","mechanism","things","exercises","submissions,","method","context","way","point","flags","people's","submitters","people's","submissions,"]},{"Key":"other minor","Fragments":["things,"]},{"Key":"minor things,","Fragments":["but"]},{"Key":"things, but","Fragments":["I","here","any","not","you're"]},{"Key":"think that's","Fragments":["all","done","due","fine.","OK.","the","too","the","an","another"]},{"Key":"that's all","Fragments":["the","up","I"]},{"Key":"all the","Fragments":["nitpicking","1000","trouble","containers,","methods","work.","fancy","things","counting","suggestions","if/else","data","work","even","mathyness","keys","names","cases","implementations","functions'","memory","integers","multiples","separators","way","negative","declarations","primes.","responses","words","methods","help","type","information","class","work","strings","tests","string","test","tests","helper","string-checking","time,","answers","things,","work","time","tests","tests.)","punctuation","functions","things,","input","letters","constructors,","real","intermediate","const,","compilers","algorithms","jod.","tests.","functions","characters","boilerplate","way","same","tests.","necessary","other","```#include```","curly","relevant","other","ascii","ASCII","letters","methods","tests?","tests?","tests,","characters","logic","algorithms","input","heavy","punctuation.","unit","kings","tests.","tests","work.","boost","code","tests","string","characters","even","tests","tests","strings","names","correct","work.","Alpha","squares.","prime","prime","factors,","tests","tests.","tests","time.","squares","time."]},{"Key":"the nitpicking","Fragments":["I"]},{"Key":"nitpicking I","Fragments":["will"]},{"Key":"I will","Fragments":["do.","fix","follow","give","revisit","add","update","stand","try","spend","take","check","still","address","address","iterate","change","raise...","rewrite","give","look","add","submit","keep","switch","simply","then","do","take","likely","go","make","implement","take","admit","fix","revisit","look","still","revisit","use","fix","start","integrate","use","nitpick!"]},{"Key":"will do.","Fragments":["If"]},{"Key":"do. If","Fragments":["you"]},{"Key":"you get","Fragments":["another","when","more","by","all","SSO","two","when","to","into","stuck,","to","undefined","the","pluses"]},{"Key":"get another","Fragments":["version"]},{"Key":"another version","Fragments":["up,","i"]},{"Key":"version up,","Fragments":["I'll"]},{"Key":"up, I'll","Fragments":["nitpick"]},{"Key":"I'll nitpick","Fragments":["some"]},{"Key":"nitpick some","Fragments":["more.","more"]},{"Key":" Simple","Fragments":["anagram","solution,"]},{"Key":"Simple anagram","Fragments":["check"]},{"Key":"anagram check","Fragments":["by"]},{"Key":"check by","Fragments":["comparing"]},{"Key":"by comparing","Fragments":["lowercase","it","`if"]},{"Key":"comparing lowercase","Fragments":["sorted"]},{"Key":"lowercase sorted","Fragments":["strings."]},{"Key":"sorted strings.","Fragments":["You"]},{"Key":"strings. You","Fragments":["could","will"]},{"Key":"You could","Fragments":["safe","further","pass","pass","put","put","pass","have","use","just","probably","generalize","avoid","pretty","shorten","probably","skip","construct","have","try","do","do","do","also","also","\"simplify\"","skip","skip","skip","safely","just","show","simplify","easily","pass","consider","eliminate","break","use","copy_if","compose","have","move","have","potentially","check","check","use","also","check","transform","potentially","probably","boost","possibly","boost","check","change","make","just","use","even","use","use","also","remove","use","optimize","use","use","replace","just","rewrite","easily"]},{"Key":"could safe","Fragments":["some"]},{"Key":"safe some","Fragments":["memory"]},{"Key":"some memory","Fragments":["by","overhead","from"]},{"Key":"memory by","Fragments":["not"]},{"Key":"by not","Fragments":["storing","throwing","telling"]},{"Key":"not storing","Fragments":["the"]},{"Key":"storing the","Fragments":["sorted","used","dna","sequence","original","score","position","result","whole","song","data","verses","searches","value"]},{"Key":"the sorted","Fragments":["version,","input","ordering","reference","comparison","reference","version","reference","string","order","string"]},{"Key":"sorted version,","Fragments":["but"]},{"Key":"version, but","Fragments":["as"]},{"Key":"but as","Fragments":["a","the","someone","I","“before”","a","far","we","you'll"]},{"Key":"as a","Fragments":["tradeoff","way","non-const","template","familiar","function.","member","`const","singleton,","shortcut,","red-black","reference?","reference?","parameter","const","size","const","**const**","placement","point","number.","map","member","``std::map``,","collection","reference","class","first,","constant","by-value","matter","constant,","problem","member","switch","reference.","reference","/","range-based","range-based","question,","std::string","separator","value","pair","single","Windows","mutable","copy","requirement","shortcut.","copy","template","size_t","seed,","more","progression","const,","const?","function","test","load","const","single","class","set","conversion.","conversion.","predicate","last","utility","reference","library.","return","namespace.","predicate","library.","series","bottleneck","template","result","const\u0026","predicate","simulation","copy","knee-jerk","collection","comment","series","function","copy,","language","trivial","const","const","quick","shout.","bonus","one-liner:","const","class","grep","break.","\"best","rule","constant","separator.","const?","return","maximum.","single","regex,","simplification","quizzical","reference","reference","const","compile","MACRO","hard","separate","question.","bit","reference.","way","header","reference","closed","boolean","side-effect","const","comment"]},{"Key":"a tradeoff","Fragments":["you","there"]},{"Key":"tradeoff you","Fragments":["have"]},{"Key":"you have","Fragments":["resort","to","it","```string```","a","to","an","an","a","to","is","to","to","to","a","to","a","marked","to","said.","a","many","a","is","to","to","provided","a","`static","text","the","in","no","inserted","all","a","`return`","the","an","so","a","to","to","to","O(","reason","reason","it","written","to","a","a","```word=","quite","to","a","mutable","to","to","it","a","to","any","is","to","to","authors","to","'using","to","pre-processed","kept","this","a","trouble","to","are","your","declared.","some","here","opportunities","duplicate","as","left","already","read","a","chosen","isQuestion","any","done","something","previously","`main()`,","the","in"]},{"Key":"have resort","Fragments":["at"]},{"Key":"resort at","Fragments":["each"]},{"Key":"at each","Fragments":["call","step","test","iteration"]},{"Key":"each call","Fragments":["of","within","to","to","to","to","to","to"]},{"Key":"call of","Fragments":["`matches`.","`score()`."]},{"Key":"of `matches`.","Fragments":["So"]},{"Key":"`matches`. So","Fragments":["it's"]},{"Key":"So it's","Fragments":["a","probably","not","more"]},{"Key":"it's a","Fragments":["decision","short","shame","decent","copy","bit","good","good","question","good","triangle","const","tiny,","set.","hexadecimal","very,","new","'?'","concern.","style","kind","clever","personal","really","bad","real","matter","question,","bit","shout","requirement","valid","prolonged","C","matter","little","question,","lot","waste"]},{"Key":"a decision","Fragments":["between"]},{"Key":"decision between","Fragments":["memory"]},{"Key":"between memory","Fragments":["and"]},{"Key":"memory and","Fragments":["performance.","is","is","get","extend"]},{"Key":"The matcher","Fragments":["class"]},{"Key":"matcher class","Fragments":["obviously","to"]},{"Key":"class obviously","Fragments":["lacks"]},{"Key":"obviously lacks","Fragments":["of"]},{"Key":"lacks of","Fragments":["some","readability."]},{"Key":"of some","Fragments":["useful","kind","of","sort,","requirements","overhead.","object."]},{"Key":"some useful","Fragments":["methods"]},{"Key":"useful methods","Fragments":["(see"]},{"Key":"methods (see","Fragments":["comment)."]},{"Key":"(see comment).","Fragments":["But"]},{"Key":"comment). But","Fragments":["it's"]},{"Key":"But it's","Fragments":["a","true","more","only"]},{"Key":"a short","Fragments":["solution","contiguous","is"]},{"Key":"short solution","Fragments":["and"]},{"Key":"solution and","Fragments":["copy+compare","tried","realized,","I","the","how","an","nice","find","explanation.","there's"]},{"Key":"and copy+compare","Fragments":["the"]},{"Key":"copy+compare the","Fragments":["matcher"]},{"Key":"the matcher","Fragments":["is"]},{"Key":"matcher is","Fragments":["not"]},{"Key":"is not","Fragments":["tested.","shout","a","divisible","very","always","valid.","executed","like","a","in","the","a","removed.","very","empty`","empty","my","included.","used","efficient","going","needed.","being","being","used","end","required","the","self","the","the","using","chosen","present.","to","divisible","an","just","yet","yet","true...","an","good","lowercase","lowercase","threadsafe,","a","friendly,","allowed,","necessary,","defined","a","actually","optimal,","immediately","a","0","so","the","needed","a","really","that","needed.","supposed","true:","the","really","an","`\u003c=`","the","a","nessecarily","required","a","stored","an","greater","a","very","very","forced","yet","really","really","necessary.","a","usefull.","much","passed?","expensive.","safe.","safe","*too","evil.","much","very","trying","really","an","pretty,","the","used","important,","guaranteed","its","as","ideaI.","required","required","really","available","specific","that","alpha-numeric","really","an","so","required","defined","whitespace,","important","a","desirable)","necessary.","permitted","empty.","in","done","needed","possible","\"ill-formed\";","empty","detected","a","too","a","really","the","yet","yet","needed.","in","shy","empty,","a","accurate.","implemented","conveniently","enough","going","the","repeated.","marked","a","a","properly","stolen,","a","immediately","yelling.","defined","my","a","the","as","what","minified"]},{"Key":" Some","Fragments":["words","junior","ideas","overhead","comments","people","hints:","hints:","styles","questions/advices","of","comments:","notes:","functions"]},{"Key":"Some words","Fragments":["about"]},{"Key":"words about","Fragments":["the"]},{"Key":"about the","Fragments":["functional","bool","same","original.","point","yelling:","tests,","code,","empty","OO","best","constructor.","usage","lines","tests.","single","two","namespaces.","formatting","operative","constructor.","object","negation","price","lack","using.","dozens","exact","wheel","cost","use","type","parser","code","way","read","limitation","runtime","code","return","difference","string","cache","numbering","benefits","`std::tolower`","validation.","thought","sorting.","scope","premature","[]","crash","isXYZ","2nd","STL","boring","code,","`transform`","duplicates","`auto`","default","underscore","break","strings.","80","performance","keyword","tests.","case","consequences","input","booleans","same","definitions","boost","reply?","public","ugliness","name","boost","inner_product"]},{"Key":"the functional","Fragments":["style:","programming"]},{"Key":"functional style:","Fragments":["I"]},{"Key":"style: I","Fragments":["really"]},{"Key":"I really","Fragments":["want","consider","appreciate","should","can't","think","think","like","appreciate","wanted","want","need","hope,","didn't","enjoy","like","think","like","don't","appreciate","like","liked","need","want","don't","don't","want","like","would","love","like","like","like","like","like","will","like","like","like","liked","like","need","like","needed","appreciate","like"]},{"Key":"really want","Fragments":["to","to","to","the","to","to","to","to","to","is","that"]},{"Key":"want to","Fragments":["see","add","enable","define","look","remove","keep","look","move","call","check","react","mess","have","see","split","either","add","submit","take","clutter","stick","encourage","make","take","template","be","go","think","understand","have","be","avoid","go","think","instance","use","learn","using","learn","stick","maintain","type","return","suddenly","gently","make","use","suddenly","change","rewrite","count","know","store","cover","create","multiply","use","use","use","check","add","give","do","avoid","use","use","pass","pass","be","be","lose","account","check","make","be","argue","see","tie","give","require","look","save","compare","use","leave","use","prefer","omit","find","expose","check","check","add","prefix","do.","learn","read","copy","check","present","fail","restrict","change","save","avoid","learn","rename","consider","state","keep","call","reposition","keep","rework","copy","think","do","setup","\u003ci\u003ethrow\u003c/i\u003e","loop","make","use","use","use","use","use","use","rethink","modify","have","know","think","learn"]},{"Key":"see [ranges](https://github.com/ericniebler/range-v3)","Fragments":["accepted"]},{"Key":"[ranges](https://github.com/ericniebler/range-v3) accepted","Fragments":["for"]},{"Key":"accepted for","Fragments":["C++17,"]},{"Key":"for C++17,","Fragments":["because"]},{"Key":"C++17, because","Fragments":["it"]},{"Key":"because it","Fragments":["would","avoids","means","implements","relies","is","indicates","doesn't","makes","costs","seems","includes","modifies","sure","was","stores","makes","was","offers","is","makes","makes","actually","is","knows","was","makes","would","would","might","_reads_","was","is","feels","extends","made","maintains","avoid","was","has","won't","does","seems","seemed"]},{"Key":"it would","Fragments":["make","make","be","become","be","clean","improve","probably","suit","be","only","not","delete","be","actually","maintain","store","be","be","improve","be","be","be","be","be","be","just","return","also","make","allow","really","be","be","be","be","have","only","be","be","work","be","also","really","stop","be","actually","be","be","be","be","help","certainly","make","actually","make","have","be","be","be","need","make","not","throw","be","never","be","be","be","be","probably","be","be","be","be","be","be","have","make","be","result","make","make","be","have","be","be","work","be","be","be","be","perfect","also","be","be","still","be","help","be","be","be","be","be","be","be","be","be","read","be"]},{"Key":"would make","Fragments":["the","sense","the","count","the","more","you","it","all","this","it","sense","this","changes","it","less","it","sense","it","the","the","the","the","the","everything","your","the","it","the","multiple","the"]},{"Key":"the `to_lower`","Fragments":["function"]},{"Key":"`to_lower` function","Fragments":["way"]},{"Key":"function way","Fragments":["more"]},{"Key":"way more","Fragments":["readable.","complex"]},{"Key":"more readable.","Fragments":["This",":)","Allow","Right","Besides","You","For"]},{"Key":"readable. This","Fragments":["also"]},{"Key":"This also","Fragments":["holds","let"]},{"Key":"also holds","Fragments":["for"]},{"Key":"holds for","Fragments":["the","classes"]},{"Key":"for the","Fragments":["`std::sort`","\"at\"","plus","expression","first","676.000th","square","note.","feedback.","feedback.","special","feedback.","feedback.","helpful","iterator","implementation","problem.","nitpick,","order,","feedback.","output","explanation,","other","tips!","tips.","definition","reminder.","upper","lengthy","hint","suggestions!","problem.","life","input,","area","nitpick!","nitpick!","function","info.","tip.","tip.","declarations.","suggestion.","character.","best","verses.","getters","reason","valid","other","zero","humans","sake","hints.","the","string","compiler.","parameter","change?","straightforward,","path","name","tips.","cpp","`sing()`","other","case","two","floating","interface.","errors","detailed","other)","input","simple","feedback!","encouraging","first","wrong","presence","vector","standard","variable","note!","reference","object","catch.","most","same","last","bracket","helpers","answers","character","feedback.","same","confusion.","benchmark","improvement.","declarations","member","note","pointers!","value","info!","not","method","vector","first","last?","String","Constructor","brevity","trinary","Hungarian","calculation","feedback!","1,","*Prime","different","response","response","type","comment","fact","```contains_letter```","is","feedback.","nits.","check","feedback","0-9","language.","function","hints.","function","for","implementation","minimum","nitpicks.","idea","greatest","thoughtful","verses","prefix.","version","code.","hints","tip","tip!","optimized","`if`s","tip","nitpick.","first","nitpick,","`int`.","caller","sake","sake","sake","comparison,","second","strings","presence","same","other","\"numeric\"","simple","two","overly","algorithm","loop","parentheses","case","comment.","inspiration","in-depth","character","clarification,","iterating","function","job.","interface","other","`isEmpty`","feedback.","corrections.","advice!","implementation,","next","\"silence\"","string","various","testcase.","exact","existence","quiet","`respond()`","arguments","auto","result","complicated","beginning","beginning","hamming","C","advice!","start","tips,","tips,","pass","corresponding","return","corresponding","feedback!","second","`boost::tokenizer`.","nit!__","feedback,","\"==","alphanumeric","suggestion.","cases","extra","last","beginning","sake","feedback","tips.","comparison.","'NULL'","structure","master","test","feedback.","simplest","if","feedback.","entire","function","second","local","regex","tips,","transformation.","feedback.","comments.","to_rna()","feedback","feedback,","inline","suggestion.","suggestion,","feedback.","job.","tip","call","```islower```","last","feedback!","compliments!","preprocessor","suggestion.","ch","feedback!","suggestions!","newline","nits.","feedback!","arg","question","distance,","feedback.","Grains","feedback!","future.","nitpicks.","feedback.","helpful","reply","helpful"]},{"Key":"the `std::sort`","Fragments":["call."]},{"Key":"`std::sort` call.","Fragments":["Check"]},{"Key":"call. Check","Fragments":["out"]},{"Key":"Check out","Fragments":["the","the","my","http://www.cplusplus.com/reference/algorithm/","cctype"]},{"Key":"out the","Fragments":["[documentation](https://ericniebler.github.io/range-v3/)","string","compiler,","difference.","compiler","compiler.","compiler","compiler","compiler.","compiler.","compiler.","compiler.","compiler.","begin","magic","other","string","letters,","right","separators.","response.","repeated","basics,","compiler","hard","duplication","whole","gcc's","need","available","tokenizer","``str2Length``","longest/shortest","checks","three","performance","algorythm","boost"]},{"Key":"the [documentation](https://ericniebler.github.io/range-v3/)","Fragments":["to"]},{"Key":"[documentation](https://ericniebler.github.io/range-v3/) to","Fragments":["see"]},{"Key":"see what's","Fragments":["possible.","going"]},{"Key":"really consider","Fragments":["this"]},{"Key":"consider this","Fragments":["kind","micro-optimization.","a"]},{"Key":"this kind","Fragments":["of","of","of","of","of","of","of","of","of"]},{"Key":"kind of","Fragments":["cheating.","access","hard","criticism.","sudo","locked","apostrophe","messy","examples","duplicate","thing","the","ugly?","issue","bad","people,","makes","rude.","stuff:","assume","forcing","programmer","used","in","trinary","annoying","ridiculous.","`for`","made","object","functionality","silly","collection","type.","function?","std::find_first","borrowing","overkill","task.","things","hoping","obvious","personal","post-increment","whatever.","approach.","cool,","inflexible.","abusing","text`","stupid.","a","cheating…","expensive.","sucks","thing.","weird,","gets","conversion.","crappy","names","problem.","style","meaning."]},{"Key":"of cheating.","Fragments":["It"]},{"Key":"cheating. It","Fragments":["might"]},{"Key":"It might","Fragments":["brake","prevent","be","be","be","improve","be","be","be","segfault,","be","work","make","need"]},{"Key":"might brake","Fragments":["as"]},{"Key":"brake as","Fragments":["soon"]},{"Key":"as soon","Fragments":["the","as","as","as","as"]},{"Key":"soon the","Fragments":["tests"]},{"Key":"the tests","Fragments":["are","in","very","don't","a","use","work","have","finally","expected","are","are","is","had","for","just","passing","if","*most","for","so","(such","passing,","pass","and","though,","given","to","pass,","cases.","don't","as","passed,","using","passed.","within","all","I'm","call","will","passing.","with","are","which","by","can","and","are","are","without","without","failed,"]},{"Key":"tests are","Fragments":["updated.","kind","calling","passed","in","written","passing.","named","really","defined"]},{"Key":"- `constexpr`","Fragments":["needs"]},{"Key":"`constexpr` needs","Fragments":["`-std=c++14`"]},{"Key":"needs `-std=c++14`","Fragments":["(in"]},{"Key":"`-std=c++14` (in","Fragments":["`CMakeList.txt`)"]},{"Key":" This","Fragments":["looks","single","approach","submission","is","exercise","isn't","is","exercise","example","seems","solution","is","way","is","is","works","solution","solution","is","is","can","did","solution","will","does","doesn't","solution","particular","is","is","is","is","is,","is","header","is","way","one","is","is","one","solution","link","certainly","is","is","is","passes","version","solution","is","will","totally","is","should","approach","approach","started","passes","isn't","is","way","version","matches","one","version","is","is","is","is","exercise","is","is","version","seems","will","code","would","makes","is","makes","seemed","is","code","is","was","is","was","looks","is","would","would","seems","is","code","code","code","is","looks","is","code","code","version","feels","code","looks","would","code","would","is","is","seemed","is","is","seemed","is","is","is","exercise","is","is","fails","is","handles","was","is","and","was","is","first"]},{"Key":"This looks","Fragments":["good.","clean,","pretty","like","clean,"]},{"Key":"looks good.","Fragments":["A","Only"]},{"Key":"good. A","Fragments":["few","few","couple"]},{"Key":"A few","Fragments":["more","more","tips","questions/comments","changes","comments:","small","minor","things","general","things"]},{"Key":"few more","Fragments":["suggestions:","comments","points","writes","suggestions"]},{"Key":"1. You","Fragments":["can","can","have","can"]},{"Key":"You can","Fragments":["also","use","construct","replace","then","use","use","combine","save","make","save","save","catch","use","do","take","skip","possibly","drop","remove","implement","use","also","get","even","do","speed","submit","solve","get","give","give","find","submit","also","just","even","see","use","read","use","do","avoid","achive","use","submit","declare","ditch","submit","use","use","just","use","read","simplify","also","simply","make","use","commit","use","compare","leave","use","use","greatly","use","greatly","find","cut","rewrite","compute","move","do","remove","more","now","replace","create","also"]},{"Key":"can also","Fragments":["check","simply","check","implement","try","use","save","overflow,","write","think","express","work","use","define"]},{"Key":"also check","Fragments":["for","out","for","``str2.length()``"]},{"Key":"for space","Fragments":["using"]},{"Key":"space using","Fragments":["`std::isspace`."]},{"Key":"2. You","Fragments":["can","are","can","can"]},{"Key":"can use","Fragments":["`string::reverse_iterator`","`!condition1","`condition1","the","all","`for","a","a","an","*m_Counts.at*","[isalpha(","default","1","`std::transform()`","`all_of`,","find(),","that","range","a","the","the","the","`std::string`","a","say","to","the","'islower'","`std::transform`","namespace","std::string","'islower'","*what.back()*","the","then","it","boost::range","it","it","range-based","std::transform()","instead","`isupper()`","an","[`islower`](http://www.cplusplus.com/reference/cctype/islower/).","[`!isdigit`](http://www.cplusplus.com/reference/cctype/isdigit/)","size_t","[`std::find_if`](http://www.cplusplus.com/reference/algorithm/find_if/)","[`std::find_if`](http://www.cplusplus.com/reference/algorithm/find_if/)","isupper(letter)","isspace(letter)","(that","regular","the","my","this","the"]},{"Key":"use `string::reverse_iterator`","Fragments":["in"]},{"Key":"`string::reverse_iterator` in","Fragments":["`trimTail`."]},{"Key":"in `trimTail`.","Fragments":["For"]},{"Key":"`trimTail`. For","Fragments":["example:"]},{"Key":" string::reverse_iterator","Fragments":["last"]},{"Key":"string::reverse_iterator last","Fragments":["="]},{"Key":"last =","Fragments":["s.rbegin();","0);","-1;","capacity;"]},{"Key":" while","Fragments":["(last","(stream"]},{"Key":"while (last","Fragments":["!="]},{"Key":"(last !=","Fragments":["s.rend()"]},{"Key":"!= s.rend()","Fragments":["\u0026\u0026"]},{"Key":"s.rend() \u0026\u0026","Fragments":["isspace(*last))"]},{"Key":"\u0026\u0026 isspace(*last))","Fragments":["++last;"]},{"Key":"like this","Fragments":["approach","perhaps","-","code.","doesn't","existed","(and","though…","one","approach.","solution,","might","exercise","is","solution","as","effort"]},{"Key":"this approach","Fragments":["because","is","degrades","means","sees"]},{"Key":"approach because","Fragments":["It's","it"]},{"Key":"because It's","Fragments":["a"]},{"Key":"It's a","Fragments":["little","good","problem","private","bit","bit","very","bit","fair","private","bad","good"]},{"Key":"a little","Fragments":["harder","bit","bit","strange","too","more","longer,","bit","less","state","biased","more","time","wrong","bit","bit","bit","restrictive?","bit","bit,","noise","cleaner","bit","hard","bit","bit","vague.","misleading,","clearer","more","to","bit.","explanation","tricky,","more","cleaner,","simpler","more","less","bit","background","more","bit","simpler.","heavy","confusing.","awkward","clever","tricker,","messy","simpler.","'heavy'","simpler.","performance","longer,","hard","less","digging","easier","bit","surprising.","better.","more","more","help."]},{"Key":"little harder","Fragments":["to"]},{"Key":"harder to","Fragments":["make","read","reason","read","read.","read"]},{"Key":"make \"off-by-one\"","Fragments":["errors."]},{"Key":"\"off-by-one\" errors.","Fragments":["You"]},{"Key":"errors. You","Fragments":["don't"]},{"Key":"You don't","Fragments":["have","have","modify","call","need","have","need","need","need","have","need","need","handle","wait","need","gain","expect","handle","seem","have","need","need","need","have","really","gain","have","need","need","need","use","want","need","ever","want","need","use","_have_","need"]},{"Key":"don't have","Fragments":["to","to","to.","the","to","to","to","the","to","too.","to","to","to","a","to","to","to","SSO),","to","SSO","to","begin()","a","to","any","to","that.","to","any","to","much","C++14","your","to","to","one","to","to","a","to","to","VS","a","to","a","time","to","to","to","them","any","to","a","to","to","to"]},{"Key":"have to","Fragments":["add","check","return","be","be","change","do","do","change","count","worry","add","define","sort","redo","sort","make","be","do","traverse","traverse","traverse","test","use","create","be","take","iterate","store","implement","handle","do","examine","evaluate","evaluate","construct","try","remember","stop","get","admit","dereference","worry","give","think","recommend","reallocate","do","deal","pass","subtract","assume","deal","read","copy","rediscover","give","worry","write","call","care.","enter","say,","deal","list","go","convert","do","say,","reiterate","switch","pay","sort","wash","link","measure.","write","do","be","write","open","do","```*3```.","maintain","allocate","return","modify","uncomment","say","be","comment","check","integrate","use","write","change","build","do","keep","shift","shift","increment","wrap","require","be","go","call","say","do","wait","write","comprehend","solve","do","loop","test","type","write","change","say,","do","use","be","implement","be","change","keep","concede","modify","change","admit","write","improve","put","do","admit,","check","remember","look","call","generate","make","be","combine","say","use","keep","resort","be","use","loop","refer","think","deal","change","be","throw","write","disagree","think","search","write","mess"]},{"Key":"to add","Fragments":["or","that","a","a","unit","a","template","attribute","const","all","`line","that","new","the","a","about","a","it","more","more","the","it","more","say","those"]},{"Key":"add or","Fragments":["subtract"]},{"Key":"or subtract","Fragments":["1."]},{"Key":" 3.","Fragments":["`trimTail`","yes,","Why","Good","the","To","Actually,","`std::intmax_t`","Also","**edit**","`c","`c","\"upper_case_percentage\"","Consider","Consider","Consider","`cnt`","charB","Yes,","I","You","I'd","In","In","Agree","Yes,","Used","Consider","Appreciate","Explicit","Consider","Context","In","Same","Find","There's","I","I"]},{"Key":"3. `trimTail`","Fragments":["is"]},{"Key":"`trimTail` is","Fragments":["a","fine."]},{"Key":"good descriptive","Fragments":["name,"]},{"Key":"descriptive name,","Fragments":["but","like"]},{"Key":"name, but","Fragments":["some","regex"]},{"Key":"but some","Fragments":["more","like"]},{"Key":"some more","Fragments":["\"standard\"","elegant",";)","into","cleaning.","information"]},{"Key":"more \"standard\"","Fragments":["names"]},{"Key":"\"standard\" names","Fragments":["used"]},{"Key":"names used","Fragments":["in"]},{"Key":"used in","Fragments":["other","place","the","phone_number::process_number().","this","C++,","```square_of_sums```","this","the","my","some"]},{"Key":"in other","Fragments":["languages","cases)","solutions:","words","languages","areas","places.","places","languages.","languages","functions","places:","words,","languages.","areas","solutions."]},{"Key":"other languages","Fragments":["or","too","might",":-).","plus"]},{"Key":"languages or","Fragments":["libraries"]},{"Key":"or libraries","Fragments":["are","provided","provided"]},{"Key":"libraries are","Fragments":["`trimRight`"]},{"Key":"are `trimRight`","Fragments":["or"]},{"Key":"`trimRight` or","Fragments":["`rtrim`."]},{"Key":"or `rtrim`.","Fragments":["But"]},{"Key":"`rtrim`. But","Fragments":["`trimTail`"]},{"Key":"But `trimTail`","Fragments":["is"]},{"Key":" 4.","Fragments":["I","It","Entry","summing","Because","`c","Similar","The","Consider","Did","A","You","I","Good","Convert","Consider","Consider","Prefer","Why","Done.","Operator[]"]},{"Key":"4. I","Fragments":["am","like"]},{"Key":"I am","Fragments":["not","also","all","using","always","not","trying","sure","following","pretty","not","just","pleased","surprised","handling.","aware","not","wondering","new","trying","doing","fairly","(currently)","fairly","in","trying","sure","here).","gonna","a","keeping","trying","aware","talking","a","not","pretty","having","not","working","quite","glad","disappointed","currently","copy-constructing","brand","supposed","not","under","missing","wondering:","using","pretty","confused","pretty","not","wondering","iterating","quite","confused","not","a","not","a","doing","using","overly","not","using","also","not","missing","not","not","aware","used","generally","not","having","sure","now","not","most","using","curious","missing"]},{"Key":"am not","Fragments":["sure","modifying","yet","a","happy","yelled!\"","aware","really","sure","too","sure","going","sure","familiar","familiar","an","an","surprised"]},{"Key":"not sure","Fragments":["why","C++","I","what","if","if","where","if","if","why","case","the","how","but","whether","what's","which","about","if","I","this","I","what","refactoring","if","how","if","if","what","the","the","what","if","if","if","whether","`std::vector\u003cT","this","it","if","if","if","what's","why","if","it's","why","if","about","why","what","if","how","if","if","if","of","if","it","it's","if","your","it'll","I","how","if","if","was","it","if","exactly","if","I'm","what","if","why."]},{"Key":"sure why","Fragments":["you","I","you","anyone","I","anagram","I","you"]},{"Key":"why you","Fragments":["have","used","made","wrote","say","declared","shouldn't","have","are","mix","did","can't","don't","take","came","can't","chose","didn't","invoke","did","chose","would","would","made","named","did"]},{"Key":"to check","Fragments":["for","candidate","a","```a==c```.","if","if","if","for","what","it","for","and","with","for","less","for","if","for","in","if","an","if","whats","the","if","is","for","for","whether","if","if","if","for","**sregex_iterator**","how","out).","for","from","\u003cstrong\u003eprimes\u003c/strong\u003e","if","for","those","for","for","the","for","if","if","2","if","if","if","if","each","each","Bob's","those","no_lowercase()","the","that","for","for","if","if","whether","if","boundries","for","for","if","for"]},{"Key":"for `!yell`","Fragments":["in","(or"]},{"Key":"`!yell` in","Fragments":["line"]},{"Key":"in line","Fragments":["35.","42","9.","29.","21,","24","53","34","21,","28","9.","14","15","8","13."]},{"Key":"line 35.","Fragments":["I"]},{"Key":"35. I","Fragments":["think"]},{"Key":"think what","Fragments":["you","was","you","I","you're","you","you"]},{"Key":"are trying","Fragments":["to","to","to","to","to","to"]},{"Key":"trying to","Fragments":["do","create","not","improve","get","make","crack","do","examine","retrieve","work","separate","avoid","justify","specify).","get","get","avoid","avoid","see","do","put","figure","come","get","`trim`","avoid","avoid","transfer","provide","specialize","be","read/write","catch","persuade","comply","place","place","get","stay","do","pass","say.","say.","score","be","create","do,","say","address","say.","give","avoid","do","communicate","reinvent","avoid","find","do","incorporate","be","optimize","think","reacquaint","check","avoid","get","slim","improve","come","figure","determine","figure","fix","keep","work","determine","optimize","accomplish","check","check","adapt","work","incorporate","deal"]},{"Key":"to do","Fragments":["can","that.","it.","anything","it.","a","you","`return","this","the","the","this","with","this","it","to","this","them","it.","if","it","it","the","it","implicit","something","conversion","implicit","implicit","implicit","so.","it","it.","the","it.","with","with","the","the","it.","a","one","the","measurements","this","the","is","that","in","it","the","[\u0026i]","in","the","with","[\u0026i]","it.","that","it","multiples.","was","this","something","any","it","with","it","-","this","this","it","with","the","it","divisions/sums","the","with","that","now.","it","it,","it:","it","declare","the","an","an","the","is","lookups.","to","with","to","--","for","that","with","this","that","is","basic","this,","this","it","the","this","this","2","as","is","without","character","some","a","the","it","that,","the","it","it","this.","with","it.","that.","that,","bad","a","a","is","it","this,","that.","this,","it","with","it."]},{"Key":"do can","Fragments":["be"]},{"Key":"can be","Fragments":["written","created","declared","simplified","used","difficult.","improved.","used","reused","improved.","done","avoided","simplified","simplified","shortened.","dangerous.","removed","avoided.","stored","done","done","implemented","implemented","broken","solved","solved","based","based","based","based","based","based","based","based","based","based","based","based","based","**static**","done","solved","found","made","done","solved","solved","solved","added","removed","replaced","one","truncated.","hard","done","**const**","*static*","called","compared","easily","applied","solved","used","hard","left","exercised","replaced","reopened.","a","solved","solved","solved","solved","argued","implemented","used","used","much","const","much","done","great.","compared","used","used","ommited,","no","used","called","used","convenient","deferred","both","simplified","replaced","tricky","expensive.","dangerous","very","done","performed.","just","done","replaced","found","useful","used","a","on","passed,","used","done","written","expensive","contained","called","confused","made","made.","written","dangerous","found","easily","implemented","made","`return","`return","`return","written","a","short","used.","optimized","used","checked","removed.","solved","fixed.","considered","distracting","unmaintainable)","tricky.","avoided.","computed","known","added","added","considerably","no","a","part","used"]},{"Key":"be written","Fragments":["as:","as:","as","like","flat,","with","as","as","at","more"]},{"Key":" yell","Fragments":["="]},{"Key":"yell =","Fragments":["yell"]},{"Key":"= yell","Fragments":["||"]},{"Key":"yell ||","Fragments":["isupper(*it);"]},{"Key":" Edit:","Fragments":["Previous","I"]},{"Key":"Edit: Previous","Fragments":["edit"]},{"Key":"Previous edit","Fragments":["suggested"]},{"Key":"edit suggested","Fragments":["`yell"]},{"Key":"suggested `yell","Fragments":["|="]},{"Key":"`yell |=","Fragments":["isupper(*it);`,"]},{"Key":"|= isupper(*it);`,","Fragments":["but"]},{"Key":"isupper(*it);`, but","Fragments":["that's"]},{"Key":" 5.","Fragments":["The","hasUpper","Inheritance.","Yupp.","`c","I","Think","I","Will","I","You"]},{"Key":"5. The","Fragments":["`yell`"]},{"Key":"The `yell`","Fragments":["variable"]},{"Key":"`yell` variable","Fragments":["is"]},{"Key":"variable is","Fragments":["used","probably","a","no","declared","initialized.","now","already"]},{"Key":"is used","Fragments":["for","storing","to","as","to","in","in","because","before","with","storing","storing","storing","to","up","instead","for"]},{"Key":"used for","Fragments":["checking","this","implicit","generating","checking","that","my","the","complex","a"]},{"Key":"for checking","Fragments":["if","the","isalnum(it[1]).","isalnum(it[1]).","the"]},{"Key":"checking if","Fragments":["the","the","```fact```","each","the","the","the"]},{"Key":"string contains","Fragments":["an","only","yelling","capital","letters.","letters,","a","'%$#'?"]},{"Key":"contains an","Fragments":["uppercase","entry"]},{"Key":"an uppercase","Fragments":["character.","copy","letter","letter"]},{"Key":"uppercase character.","Fragments":["So"]},{"Key":"character. So","Fragments":["perhaps"]},{"Key":"So perhaps","Fragments":["`hasUpper`"]},{"Key":"perhaps `hasUpper`","Fragments":["or"]},{"Key":"`hasUpper` or","Fragments":["`hasUppercase`"]},{"Key":"or `hasUppercase`","Fragments":["documents"]},{"Key":"`hasUppercase` documents","Fragments":["the"]},{"Key":"documents the","Fragments":["code","entire"]},{"Key":"the code","Fragments":["a","will","that","and","isn't","can","more","more","a","would","a","cleaner.","nice","more","is","will","and","very","that","as","is","(in","with","is","on","is.","does","would","and","more","what","you","because","is","make","is","to","fairly","is","is","that","is","though:","to","I","itself","is","runs","runs","might","is","performance","I","is","was","is","is","two","shorter.","flow","into","is","more","neater","better.","comment","because","to","tighter","and","now","is","is","to","could","is","clearer.","easier","cleaner.","that","clearer.","so","quite","itself","look","simpler","a","less","more","much","quite","is","in","returns","here","more","at","up","a","is","with","more","in","more","looks","self","display","a","is","clearer","clear","evolved","too","for","for","to","readability","as","does","clearer.","in","and","is","now,","slightly","harder","you","more","more/less","more","which","more","we","more","so","unnecessarily","looks","could"]},{"Key":"little bit","Fragments":["better.","more","like","faster.","unhappy","overengineered…","two-faced…","faster","more","irresponsible.","less","of","harder.","(streamlined"]},{"Key":" Can't","Fragments":["argue"]},{"Key":"Can't argue","Fragments":["about"]},{"Key":"argue about","Fragments":["code","using"]},{"Key":"about code","Fragments":["that","readability"]},{"Key":"code that","Fragments":["passes","isn't","uses","reduce","is","way.","actually","uses","doesn't","was","is","all","uses","would","will","use"]},{"Key":"that passes","Fragments":["all","the","around"]},{"Key":"passes all","Fragments":["tests!","of","the","of","the","the"]},{"Key":"all tests!","Fragments":[":)","Since"]},{"Key":"tests! :)","Fragments":["But"]},{"Key":":) But","Fragments":["inserting"]},{"Key":"But inserting","Fragments":["into"]},{"Key":"inserting into","Fragments":["the","the"]},{"Key":"into the","Fragments":["map","roster.","random","spirit","Message","map","constructor","loop","struct","constructor","char","global","class","string)","namespace.","namespace","``std::vector\u003cint\u003e``","standard:","boost","weird","lambda.","compiler","header.","names","smallest","global","map","map",".h","local","map","header","match","match","containing","`return`","map.","documentation","function","map,","match","world","std::map.","std::map.","map","match","section","global","global","domain","master","habit","string?","map","habit","match","problem.","testing","global","range","middle","function","vector.","map.","map."]},{"Key":"map is","Fragments":["a","logarithmic","a","a","being","log(n)","the","an","specified","used","created,","not","always","enormous)","large","large","a","neat"]},{"Key":"a bit","Fragments":["verbose.","...","confusing.","deep,","tricky.","more","easier","unreadable,","more","complicated","like","too","cumbersome.","more","heavy.","heavy","like","odd","heavy","strange.","biased",",","crazy.","overkill","more","messy,","odd:","wonky.","odd","too","and","of","disappointed","light","easier.","odd.","about","messy,","odd","embarrassing.","shorter.","weird.","ugly","ugly.","silly","too","of","dangerous","by","with","picky.","misleading.","of","against","overkill,","different","of","of","silly,","like","at","wary","wary","faster","and","of","scary","of","of","too","dubious","(I","from","faster","too","to","more","of","unexpected","more","more","of","annoying","weird.","curious","simpler","heavy-handed","icky.","torn","heavy","of","of","of","clearer","clearer.","heavy-handed","iffy","of","odd","strange,","shorter","mask","heavy","over","to","of","convoluted.","shift","frustrating","fudged","of","more","more,","more","unclear..","trying","too","difficult","too","better.","more","overkill."]},{"Key":"bit verbose.","Fragments":["Consider"]},{"Key":"verbose. Consider","Fragments":["using"]},{"Key":"Consider using","Fragments":["`operator[]`","a","\u003ccctype\u003e.","auto","std::string.","a","```std::transform(...,"]},{"Key":"using `operator[]`","Fragments":["instead:"]},{"Key":" theMap[\"Tom-ay-to,","Fragments":["tom-aaaah-to.\"]"]},{"Key":"theMap[\"Tom-ay-to, tom-aaaah-to.\"]","Fragments":["="]},{"Key":"tom-aaaah-to.\"] =","Fragments":["\"Whatever.\";"]},{"Key":"1. Yes,","Fragments":["isspace().","taking"]},{"Key":"Yes, isspace().","Fragments":["TY."]},{"Key":"2. reverse_iterator","Fragments":["was"]},{"Key":"reverse_iterator was","Fragments":["my"]},{"Key":"was my","Fragments":["first","first","parents'","first","first"]},{"Key":"my first","Fragments":["thought","thought,","submission","submission","approach","solution.","pass.","attempt.","stab","ever","time","incursion","submission","time","c++","encounter"]},{"Key":"first thought","Fragments":["but","of"]},{"Key":"thought but","Fragments":["I"]},{"Key":"didn't find","Fragments":["a","any","this","the","out"]},{"Key":"a way","Fragments":["to","to","to","to","in","to","of","to","to","to","that","to","to","to","only","to","to","to","to","to","compatible","to","to","to","to","that","where","to","to","away","that","that","of","to","of","that's","to","of","to"]},{"Key":"way to","Fragments":["grab","\"short-circuit","tell","do","do","remove","write","make","manage","do","push","do","do","do","do","many","solve","work","do","implement","not","do","avoid","specify","use","avoid","avoid","reuse","clean","solve","solve","solve","solve","put","get","tokenize","do","go","write","make","iterate","pass","write","multiply","get","do","do","go","store","simultaneously","easy","do","do","determine","make","bucket","reinitialize","make","shrink","tell","have","deal","check","control","iterate","increase","stop","use","tackle","go","do","strip","organize","speed","go","do","solve","check","go","my","do","handle","go","know","do","remove","work","encapsulate","recognize","deal","do","fix","check","be","go","do"]},{"Key":"to grab","Fragments":["the"]},{"Key":"grab the","Fragments":["substring."]},{"Key":"the substring.","Fragments":["A"]},{"Key":"substring. A","Fragments":["new"]},{"Key":"A new","Fragments":["string"]},{"Key":"new string","Fragments":["can","directly","and"]},{"Key":"string can","Fragments":["be","have"]},{"Key":"be created","Fragments":["from","the","and"]},{"Key":"created from","Fragments":["an","the"]},{"Key":"from an","Fragments":["iterator","earlier","algorithm","initialization"]},{"Key":"an iterator","Fragments":["but","to","and","or","on","since","to"]},{"Key":"iterator but","Fragments":["I"]},{"Key":"couldn't get","Fragments":["it","this"]},{"Key":"get it","Fragments":["to","rightish","compiled","down","to"]},{"Key":"it to","Fragments":["work","`isdigit()`","a","the","that","**throw**","count","work.","delete","you","make","know","pass","be","be","avoid","work.","see","lower","`1`","handle,","0","with","read","be","throw","the","be","my","you","process_raw_in","the","be","a","a","the","allow","be","`downcase()`,","be","the","some","benefit","3","be","false.","be","compile.","something","be","NOT","implement","the","work.","shreds.","the","enable","learn","you","pass","use","compile"]},{"Key":"to work","Fragments":["with","this","out","together","on","hard","through","without","with","for","correctly,","properly.","with","with","on","out","with","out","out","using","out"]},{"Key":"work with","Fragments":["a","the","gcc","that.","won't","(that's","types,","std::all_of.","C++.","regex","vectors"]},{"Key":"with a","Fragments":["reverse_iterator.","space","few","map\u003cchar,","few","`.h`","```?```","`struct`","empty","link.","sledgehammer,","custom","warning","conditional","character.","default","default","default","very","vector","learning","comment","custom","string","lambda","constant","different","single","custom","one-line","fast","function","static_cast","name","move","?","vector\u003cchar\u003e","default","function","compiler","non","```string_range```","LOT","`const","`std::copy_if()`","`lower_bound`.","non-empty","static","boolean","twist:","namespace,","separate","complex","time_duration.","`public","new","great","name","complete","separate","single","great","fun","static","static","counting_iterator.","static","range","non-const","const","for-loop,","plain","question","custom","default","negative","non-alphanumeric","question","question","question","static","clear,","single,","clear","\"single","regexp","regex","second","more","single","question","couple","helper","match_reslt","grain","readme","range-based","negated","solution","static","compute"]},{"Key":"a reverse_iterator.","Fragments":["I've"]},{"Key":"reverse_iterator. I've","Fragments":["now"]},{"Key":" ```","Fragments":["c++","s.rbegin()","counter(","cpp","const","const"]},{"Key":" return","Fragments":["s.substr(0,","string(s.begin(),","hasUpper","\"Whatever.\";","bases.at(","false;","false;","rna;","((1ULL","\"Sure.\";","\"Sure.\";","type","s.length()","tolower(x);","chat.response;","std::next(","i","(a","(a","i","!std::isalpha(c)","any_of_is_alpha","std::find_if(begin(msg),","a","formatted;","std::vector\u003cint\u003e{};","\"Fine.","{","EMPTY;","r;","the_string.start();","the_string.finish();","result;","*this;","response::QUESTION;","std::none_of(","character","std::none_of(sentence.begin(),","false;","cased;","result;","result","acc;","foo;","foo;","letter","letter","16;","!isalpha(c)","!view.is_empty()","roster_[grade];","std::mismatch(left.begin(),","(*(it","message;","accum","std::regex_match(str,","std::tolower(c);","s;","std::any_of(sentence.begin(),","std::none_of(sentence.begin(),","inner_product(begin(a),","std::inner_product(","false;","true;","false","true","boost::erase_all(sth,","inner_product(a.begin(),","query.find_first_not_of(","query.find_first_of(","\"Whatever.\"","query.back()","false;","true;","containsAlpha;","true;","isalpha(c);","val1;","val2;","default;","'C';"]},{"Key":"return s.substr(0,","Fragments":["s.rend()"]},{"Key":"s.substr(0, s.rend()","Fragments":["-"]},{"Key":"s.rend() -","Fragments":["last);"]},{"Key":" i.e.","Fragments":["the"]},{"Key":"i.e. the","Fragments":["length","default"]},{"Key":"the length","Fragments":["is","of","is","of","of","of","of","of","of","is","check","but","check","of","of","check","of","selection","of","of","is","function","of","of","with","wasn't","equals"]},{"Key":"length is","Fragments":["equal","zero","O(N).","greater","larger","defined","0","0,","one"]},{"Key":"is equal","Fragments":["to","up","to"]},{"Key":"equal to","Fragments":["the","mapWordCount.end()","the","std::string::npos","`m`,","the","`1`","`0`,","2^64","any"]},{"Key":"the number","Fragments":["of","of","being","is","to","of","was","of","as","instead","8","itself.\"","is","0.","of","of","of","(or","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","doesn't"]},{"Key":"number of","Fragments":["chars","robots","robots,","robots,","values","vectors.","instructions","responses","bottles.","characters,","statically-capacitied","allocations","ranges","times","pointers","upper","lower","times","things","iterations","occurences","computations","letters","copies","rice","rice","rice","\u0026","chars","uppers","lowers.","`true`s","other","letter","other","times","letters","upper","space","alphabetic","characters","working","times","times","tests","times","words.","simpler","times","choices","names,","grains"]},{"Key":"of chars","Fragments":["from","it's","equal"]},{"Key":"chars from","Fragments":["\"last\"","`'0'`","a","[start,stop)"]},{"Key":"from \"last\"","Fragments":["back"]},{"Key":"\"last\" back","Fragments":["to"]},{"Key":"back to","Fragments":["the","you.","this","this","you.","this","C++","back","front","this","front","`ends_with`","one.","the","me","the","`tokenizer`.","my","the","something","maintain"]},{"Key":"the reverse","Fragments":["end","loop","is","was"]},{"Key":"reverse end","Fragments":["(beginning)."]},{"Key":"end (beginning).","Fragments":["This"]},{"Key":"(beginning). This","Fragments":["works"]},{"Key":"This works","Fragments":["but","and","with"]},{"Key":"works but","Fragments":["I"]},{"Key":"would hope","Fragments":["there","would"]},{"Key":"hope there","Fragments":["is"]},{"Key":"there is","Fragments":["a","no","bugfree","a","no","a","no","a","`trim_copy`","at","no","a","leading","no","at","nothing","a","no","no","boost::iequals","no","only","one)","no","no","kind","a","an","still","a","an","if","some","just","I'd","no","no","a","nice.","an","a","bound","a","no","nothing","a","an","a","always","the","already","a","a","no","not","no","padding","a","whitespace","a","no","only","no","no","no","some","no","a","always","a","an","ambiguity","no","no","some","no","some","trailing","also","only","no","no","to","no","a","little","always","anything"]},{"Key":"a more","Fragments":["intuitive","descriptive","straight-forward","natural","explicative","descriptive","nit-picky","restrictive","generic","global","robust","readable","readable","organized","explicit","restricted","definite","or","optimal","careful","maintainable","performant","elegant","restrictive","easily","consise","readable","c++","efficient","specific","refined","general"]},{"Key":"more intuitive","Fragments":["solution.","to"]},{"Key":"3. yes,","Fragments":["\"Right\""]},{"Key":"yes, \"Right\"","Fragments":["is"]},{"Key":"\"Right\" is","Fragments":["more"]},{"Key":"is more","Fragments":["obvious","readable?`","general,","readable","difficult","likely","clear","readable,","compact.","readable,","of","readable.","predictable","readable","what","efficient","an","or","descriptive.","universal.","complicated","portable","or","elegant","expressive.","neat.","likely","readable,","clear.","readable","or","readily","expressive","expressive","expressive","common"]},{"Key":"more obvious","Fragments":["than","logic.","IMHO.","by"]},{"Key":"obvious than","Fragments":["\"Tail\"."]},{"Key":"4. It","Fragments":["looks"]},{"Key":"It looks","Fragments":["like","like","as","like","pretty","to","like","like","good.","like","like","like","to","like","good!","a","like","like"]},{"Key":"looks like","Fragments":["the","a","that","a","a","an","a","you'll","you've","it","it","a","that","they","you're","a","your","all","you're","`(reduce","you","rainbows","the","a","you're","the","gcc","this:","you're","you're","your","very","a","a","I've","whenever","it","g++","maybe","you're","a"]},{"Key":"string is","Fragments":["not","empty,","undefined.","created.","an","copied.","excessive.","exessive","copied","known.","known.","known.","known.","copied","known.","known.","long,","very","a","empty","size_t","size_t","*size_t*","size_t","size_t","the","copied","the","a","predictable,","enough","in","performed.","pretty","empty.","```word.clear();```","the","empty","\"HE","empty","not","a","all","ALL","a","analyzed","analyzed","passed","capitals.","only","shorter","all","less","a","empty","now","very","undefined","null","null","null,","empty","capitalized).","uppercase","empty","lower?","\"what's"]},{"Key":"not shout","Fragments":["if"]},{"Key":"shout if","Fragments":["there"]},{"Key":"if there","Fragments":["are","are","is","is","is","was","wasn't","is","are","is","are","is","is","were","are","are","is","is","are","is","is","is","are","are","is"]},{"Key":"there are","Fragments":["any","n","several","better","better","multiple","things","so","no","some","extra","some","no","string","reverse","any","about","also","separate","2","circumstances","because","no","real","some","quite","special","already","any","only","times","so","so","less","some","more","at","locale-aware","no","only","spaces","some","simply","library","a","a","other","some","a","a","alphanumeric","some","some","built","any","nine","other","64","too","some"]},{"Key":"are any","Fragments":["lowercase,","advantages","or","parts"]},{"Key":"any lowercase,","Fragments":["however,"]},{"Key":"lowercase, however,","Fragments":["there"]},{"Key":"however, there","Fragments":["must","are"]},{"Key":"there must","Fragments":["be","be","be"]},{"Key":"must be","Fragments":["one","on","tighter","copy","non-const.","at","true","available","in","reliable,","a","kept","kept","kept","kept","compared"]},{"Key":"be one","Fragments":["or","with"]},{"Key":"one or","Fragments":["more","two","two","more"]},{"Key":"or more","Fragments":["uppercase.","matches","spaces","spaces.","precisely","locations,"]},{"Key":"more uppercase.","Fragments":["Not"]},{"Key":"uppercase. Not","Fragments":["yell,"]},{"Key":"Not yell,","Fragments":["or"]},{"Key":"yell, or","Fragments":["perhaps"]},{"Key":"or perhaps","Fragments":["\"yell","a","string"]},{"Key":"perhaps \"yell","Fragments":["=="]},{"Key":"\"yell ==","Fragments":["false\","]},{"Key":"== false\",","Fragments":["was"]},{"Key":"false\", was","Fragments":["intended"]},{"Key":"was intended","Fragments":["to"]},{"Key":"intended to","Fragments":["short","be","be","be","make","mirror","match"]},{"Key":"to short","Fragments":["circuit","circuit"]},{"Key":"short circuit","Fragments":["having","after","the"]},{"Key":"circuit having","Fragments":["to"]},{"Key":"having to","Fragments":["call","call","copy","traverse","make","do","do","do","do","do","check","double","write","check","modify","to","worry","look","use","loop","recompile","define","write","check","put","scroll","reindex","understand"]},{"Key":"call isupper()","Fragments":["once"]},{"Key":"isupper() once","Fragments":["any"]},{"Key":"once any","Fragments":["uppercase","uppercase"]},{"Key":"any uppercase","Fragments":["char","char"]},{"Key":"uppercase char","Fragments":["has","has"]},{"Key":"char has","Fragments":["been","been"]},{"Key":"has been","Fragments":["found.","found.\"","updated","identified.*\"","a","as","replaced","added","renamed","done,","removed.\u003c/li\u003e","removed","encountered","encountered","removed","implemented","replaced","purged","scrapped.","rewritten","used,"]},{"Key":"been found.","Fragments":["I've"]},{"Key":"found. I've","Fragments":["abandoned"]},{"Key":"I've abandoned","Fragments":["this"]},{"Key":"abandoned this","Fragments":["meaningless"]},{"Key":"this meaningless","Fragments":["optimization"]},{"Key":"meaningless optimization","Fragments":["in"]},{"Key":"optimization in","Fragments":["favor","mind"]},{"Key":"in favor","Fragments":["of","of","of","of","of"]},{"Key":"favor of","Fragments":["more","the","this","a","strings."]},{"Key":"of more","Fragments":["obvious","expensive","common"]},{"Key":"5. hasUpper","Fragments":["is"]},{"Key":"hasUpper is","Fragments":["better."]},{"Key":"is better.","Fragments":["Still,","I","If","Both"]},{"Key":"better. Still,","Fragments":["\"return"]},{"Key":"Still, \"return","Fragments":["hasUpper\""]},{"Key":"\"return hasUpper\"","Fragments":["may"]},{"Key":"hasUpper\" may","Fragments":["not"]},{"Key":"may not","Fragments":["really","be","be","change","change","have","want","happen.","change","be","be","make","be","be"]},{"Key":"not really","Fragments":["convey","a","a","an","that","a","sure","clear.","there","all","modifying","a","big.","necessary","sure","the","sure","sure","in"]},{"Key":"really convey","Fragments":["that"]},{"Key":"convey that","Fragments":["the"]},{"Key":"string has","Fragments":["proven","an","trailing","to","two","no","to","a","any","those"]},{"Key":"has proven","Fragments":["to","to"]},{"Key":"proven to","Fragments":["be","be"]},{"Key":"to be","Fragments":["shouting","immutable.","good","stored","looked","more","generated","wide","unique.","more","a","yelled","able","able","the","a","explicit","very","an","parsed.","able","added,","acounted","a","clearer.","done","domain","evaluated.","meant","explicit","a","had,","prime,","disvisible","able","able","factors,","evaluated","ignorable.","in","able","any","included","included","fair","returned","valid","const,","fun","thread","part","zero,","public.","able","able","UTF-8,","compatible,","that","in","inefficient.","doing.","linked","included;","used","ref","invalid","part","in","other","several","here","called","visible.","right","careful","honest,","(too?)","\"1\".","anagrams:","a","converted","very","not","-1","making","called","any","prime","0,0?).","sure.","in","used","the","a","read","a","modified","hidden.","a","done","allowed,","casted","the","the","more","getting","done","easy.","something","more","all","perfectly","really","honest","4.","compiled","made","a","in","returned","avoiding","in","entirely","a","using","in","const:","millions","done","a","a","specified","so","a","fast.","more","fast.","large","super","super","changed","in","in,","pedantic","clever","performed,","the","using","visible","clear","active","something","the","challenging","challenging","0","implemented","reasonably","inserted.","in","a","1","an","careful","int","anything","able","somewhat","the","much","included","called","part","available","able","very","the","a","removed","easily","white","a","the","able","public","passed","highly","free","succinct/clever.","made","squeezing","challenging","safer,","more","used","made,","ejected","considered","false","aware","enlarged","changed","changed","significantly","implemented","optimized","sure.","more","0","a","static","first,","a","'?',","in","in","(conceptually)","way","present","pedantic,","sure","sure","around","called","calculated","going","a","able","0","the","unsafe","defined","called","exact","consistent","passed","bad","instantiated,","static","the","within","used.","thrown.","a","as","uppercase)","commented","accurate","increased.","without","more","true?","too","a","dereferenced","about","able","the"]},{"Key":"be shouting","Fragments":["but","too"]},{"Key":"shouting but","Fragments":["it"]},{"Key":"should still","Fragments":["be","pass","find","prefer","say"]},{"Key":"still be","Fragments":["readable.","extended","possible","an"]},{"Key":" A","Fragments":["few","note","simple","bit","B","couple","``protected``","combination","helper","container's","culprit","lot","personal","bit","struct","few","somewhat","couple","couple","small","few","strings","switch","couple","few","question","couple","single","good","few","'switch'","couple","very","range"]},{"Key":"more comments","Fragments":["to","on"]},{"Key":"comments to","Fragments":["address","heart","your","regex","make","describe"]},{"Key":"to address","Fragments":["your","or","your","this"]},{"Key":"address your","Fragments":["feedback","code"]},{"Key":"your feedback","Fragments":["from",":)","and"]},{"Key":"feedback from","Fragments":["iteration","the","@chad-au,","@mayra-au","@tod"]},{"Key":"from iteration","Fragments":["3:","1.","2__","3__","1:","2:","5__"]},{"Key":"can construct","Fragments":["a"]},{"Key":"construct a","Fragments":["new","std::string","string_ref","string"]},{"Key":"a new","Fragments":["string","one)","clock","instance","namespace","candidate","thread,","valid","word","key","element","default","version,","language","animal","computer","memory","world.","string","one.","iteration","*non-const*","thing.","iteration","standard","version.","implementation","iteration","revision.","iteration","reference","object,","type","iteration","variable","word","iteration!","allocation","whatever-x-is.","line:","version.","\u003cstrike\u003etoy\u003c/strike\u003e","line","iteration","character","(string,int)","element","iteration","test","sequence","state","``str1Length``","style.","C++11","program","state","project","trick,"]},{"Key":"string directly","Fragments":["from"]},{"Key":"directly from","Fragments":["a"]},{"Key":"from a","Fragments":["pair","squares","function","dictionary","scripting","C","readability","`char`","floating","floating","floating","floating","floating","Java","javascript","co-worker,","return","mostly","clean","function","time","user","hard","string","finite","mathematical","math","class","class","```const","runtime","`map\u003cchar,","fixed","stackoverflow","different","function","callers","C","Java","class","dictionary","raw","maintenance","single","single","PC","better"]},{"Key":"pair of","Fragments":["iterators","eyes","iterators."]},{"Key":"of iterators","Fragments":["on","and","and","as","and","and"]},{"Key":"iterators on","Fragments":["line"]},{"Key":"on line","Fragments":["30:","10.","18","14?","7","10","12?","57","12","12","57.","43","16-18,","40,","19","28","14","26,","37","25?","13.","13;","9","15.","20,","21.","20,","34."]},{"Key":"return string(s.begin(),","Fragments":["last.base());"]},{"Key":"2. In","Fragments":["iteration"]},{"Key":"In iteration","Fragments":["3,","3,"]},{"Key":"iteration 3,","Fragments":["you","I"]},{"Key":"3, you","Fragments":["were"]},{"Key":"you were","Fragments":["checking","obviously","going","sorting","creating","losing","using","not","terrified,","only","talking","concerned.","using","inside","given","trying","thinking","to","going","supposed","using","not"]},{"Key":"were checking","Fragments":["for"]},{"Key":"checking for","Fragments":["`!yell`","divisors","a","alpha","\"HELL\"","whitespace","\"allSpace\"","a","the","each","if","that","alphanumeric","matches.","anagrams","silence","shouting.","the"]},{"Key":"`!yell` (or","Fragments":["`!hasUpper`"]},{"Key":"(or `!hasUpper`","Fragments":["in"]},{"Key":"`!hasUpper` in","Fragments":["this"]},{"Key":"this iteration)","Fragments":["as"]},{"Key":"iteration) as","Fragments":["a"]},{"Key":"to \"short-circuit","Fragments":["having"]},{"Key":"\"short-circuit having","Fragments":["to"]},{"Key":"call `isupper()`","Fragments":["once"]},{"Key":"`isupper()` once","Fragments":["any"]},{"Key":"been found.\"","Fragments":["It's"]},{"Key":"found.\" It's","Fragments":["a"]},{"Key":"good optimization.","Fragments":["I"]},{"Key":"optimization. I","Fragments":["just"]},{"Key":"I just","Fragments":["want","put","did","realized","wanted","realized","like","was","thought","started","pushed","learned","decided","gave","put","wanted","forgot","had","realize,","lets","saved","gave","used","don't","want","say:","wanted","saw","wanted","declared","rewatched","followed","tried","re-stumbled","noticed","hard-coded","tried","wanted","called","used","have","see","checked","don't","tried","looked","need","wasn't","kinda","went","installed","discovered).","thought","move","opened","type","returned","submitted","realized","double","ran","did","figured","used","threw","focused","haven't","forgot"]},{"Key":"just want","Fragments":["to","the","those"]},{"Key":"add that","Fragments":["what","you","it's","as"]},{"Key":"what I","Fragments":["was","had","was","read","implemented.","write.","am","think","thought","want.","want,","can","was","have.","did","expected.","do.","did.","was","would","wrote.","would","mean.","am","needed.","think","was","come","would","felt","have","want","do.","did).","understand,","did","did,"]},{"Key":"was suggesting","Fragments":["does","I"]},{"Key":"suggesting does","Fragments":["the"]},{"Key":"does the","Fragments":["same","test","code","commons_sum","\u003c1000","same","job","\"us\"","same","exact","same"]},{"Key":" hasUpper","Fragments":["="]},{"Key":"hasUpper =","Fragments":["hasUpper"]},{"Key":"= hasUpper","Fragments":["||"]},{"Key":"hasUpper ||","Fragments":["isupper(*it);"]},{"Key":" If","Fragments":["`hasUpper`","you","you","I","anyone","you","you","you","you","I","`T\u0026","you","you","I","strings","you","you","you","you","I","I","you","it","you're","you're","you","you","you're","your","you","you","I","incrased","you","I'm","CMake","i","you","you","\"using","you","I","the","you","you","there","you","you","you","you","you","you","you","you","primes","I","you","I","query.size()","anyone","you'd","you","you","Bob's","I","we","we","you're","you","you","you","it","you","you"]},{"Key":"If `hasUpper`","Fragments":["is"]},{"Key":"`hasUpper` is","Fragments":["`true`,"]},{"Key":"is `true`,","Fragments":["then"]},{"Key":"`true`, then","Fragments":["`isupper(*it)`"]},{"Key":"then `isupper(*it)`","Fragments":["doesn't"]},{"Key":"`isupper(*it)` doesn't","Fragments":["get"]},{"Key":"doesn't get","Fragments":["called.","multiplicated"]},{"Key":"get called.","Fragments":["But"]},{"Key":"called. But","Fragments":["perhaps"]},{"Key":"But perhaps","Fragments":["this","there's"]},{"Key":"perhaps this","Fragments":["is","is"]},{"Key":"this is","Fragments":["less","the","not","intended","the","a","the","better.","a","due","unnecessary","safe.","build","if","worth","highly","not","working,","as","almost","written","an","one","a","just","in","definitely","one","very","the","for","technically","quite","pretty","wrong.","the","very","that","all","common","looking","an","a","probably","an","the","idiomatic,","an","the","a","one","a","very","a","pretty","a","actually","not","about","great.","such","very","the","called","actually","a","(slightly)","not","that","a","a","default","from","a","correct","integer","nearly","mostly","a","the","undefined","neither","a","\"C\",","my","just","a","the","new","a","a","simpler","nicely","treated","a","obviously","a","an","effectively","throw-away","never","ok","needlessly","that","fine","a","better","left","ok","the","outside","the","not","my","ugly,","a","regular","labeled","in","plainer","cumbersome"]},{"Key":"is less","Fragments":["readable?","efficient","efficient","than","safe","that","explicit.","readable","than","important:"]},{"Key":"3. Why","Fragments":["I"]},{"Key":"Why I","Fragments":["suggested"]},{"Key":"I suggested","Fragments":["renaming"]},{"Key":"suggested renaming","Fragments":["`yell`"]},{"Key":"renaming `yell`","Fragments":["to"]},{"Key":"`yell` to","Fragments":["`hasUpper`?"]},{"Key":"to `hasUpper`?","Fragments":["Imagine"]},{"Key":"`hasUpper`? Imagine","Fragments":["if"]},{"Key":"Imagine if","Fragments":["you"]},{"Key":"if you","Fragments":["used","don't","are","ever","change","don't","prefer","want","need.","just","were","seperated","used","are","remove","want","create","want","can","keep","were","used","wanted","decided","want","hoist","hoist","are","are","have","want","have","don't","want","want","think","validated","really,","use","want.","already","intend","use","buy","use","want","were","keep","remove","like","separate","want","took","try","use","run","get","think","pull","try","want","want","want","use","do","want,","wish,","compile","move","need","haven't","list","use","use","don't","want","think","were","dealt","really,","define","overrun","have","do.)","created","use","follow","use","make","happen","like","want","go","want","want","remove","fear","fear","don't","pass","were","use","see","first","want","wanted","get","insert","call","call","pass","like,","can't","just","can","do","manage","oppose","*are*","do","think","wrote","care","have","want","look","want","declare","used","use","use","start","test","insist","set","have","would","detect","know","pass","didn't","use","are","check","get","could","declare","declared","reframe","ever","haven't","were","wanted.","feel","apply","broke","want","want","get","wish.","need","want","swap","reverse","pass","do","are","are","used","want","think","know","don't","did","split"]},{"Key":"used two","Fragments":["boolean"]},{"Key":"two boolean","Fragments":["variables:"]},{"Key":"boolean variables:","Fragments":["`hasUpper`"]},{"Key":"variables: `hasUpper`","Fragments":["and"]},{"Key":"`hasUpper` and","Fragments":["`hasNoLower`."]},{"Key":"and `hasNoLower`.","Fragments":["Then"]},{"Key":"`hasNoLower`. Then","Fragments":["your"]},{"Key":"Then your","Fragments":["return","template","helpers"]},{"Key":"your return","Fragments":["statement","type"]},{"Key":"return statement","Fragments":["could","or","would","already","after"]},{"Key":"statement could","Fragments":["be"]},{"Key":"return hasUpper","Fragments":["\u0026\u0026"]},{"Key":"hasUpper \u0026\u0026","Fragments":["hasNoLower;"]},{"Key":"This single","Fragments":["line"]},{"Key":"line of","Fragments":["documents","the","hey","`hey`","process_raw_in.","code"]},{"Key":"of documents","Fragments":["the"]},{"Key":"the entire","Fragments":["implementation.","vector","input","string.","string","string","definition","solution","string","solution","string","expression","string","song","string","if-statement","input","phrase","string","thing).","thing)."]},{"Key":"entire implementation.","Fragments":["As"]},{"Key":"implementation. As","Fragments":["a","for"]},{"Key":"a reader,","Fragments":["I"]},{"Key":"reader, I","Fragments":["can"]},{"Key":"I can","Fragments":["immediately","see","also","have","just","offer","see","separate","use","(for","reopen","see","call","direct","take","do","think","read","argue,","come","see","think","use","see","totally","think","copy-paste","rely","only","tell","make","see,","come","see","do","add","make.","envision","tell","get.","still","look","better","see","imagine","see","replace","handle","index","think","confirm","get","skip","use","use","change","optimize","easily","get","pass","think","say","see"]},{"Key":"can immediately","Fragments":["guess","return"]},{"Key":"immediately guess","Fragments":["how"]},{"Key":"guess how","Fragments":["`isYell`"]},{"Key":"how `isYell`","Fragments":["works"]},{"Key":"`isYell` works","Fragments":["without"]},{"Key":"works without","Fragments":["looking","it"]},{"Key":"without looking","Fragments":["at","it"]},{"Key":"looking at","Fragments":["the","your","my","a","3","the","other","your","(to-from)","it","other","the","generated","someone","the","this:","other","the","the","the","this.","the","[NebuPookin's](http://exercism.io/NebuPookins)","the","the","other","past","my","the"]},{"Key":"at the","Fragments":["remaining","end","beginning.","critical","top","moment","beginning","end","code","github","more","end","same","end,","bottom)","end","start","end,","time.","bottom)","end","time","final","beginning","back","end","beginning.","very","call","end","letters","beginning","end","function","end","api","api,","api,","point","time","moment","terminating","bottom;","moment.","top,","beginning","test","beginning","beginning","new","default","implementation","point","previous","implementation","next","cppreference","end?","top","same","signatures","same","definition","character","end.","end","end","end","input,","last","end","end?","end","top.","functions","time.","top","expense","very","test","song","multiline","last","problem","top","end","problem.","start","end","source","beginning.","last","other","begining","top","hamming_test.cpp","same","subtle","time","code","code.","onset.","end","other","test","end","test","test","test","test","test","test","very"]},{"Key":"the remaining","Fragments":["code.","case,","values"]},{"Key":"Also, we","Fragments":["could"]},{"Key":"we could","Fragments":["do","avoid","write","just","use","take"]},{"Key":"could do","Fragments":["without","this","it","to","a","both","something","better","about","with","the","with"]},{"Key":"do without","Fragments":["the","being"]},{"Key":"without the","Fragments":["```triangle::kind(int,","character","`\u0026`","need","wrapper","\u0026","trim_copy","need","need","`extern`","rvalue","std::any_of,","redundancy.","nested","null,","reference.","need"]},{"Key":"the ```triangle::kind(int,","Fragments":["int,"]},{"Key":"```triangle::kind(int, int,","Fragments":["int)```"]},{"Key":"int, int)```","Fragments":["overload,"]},{"Key":"int)``` overload,","Fragments":["but"]},{"Key":"overload, but","Fragments":["I"]},{"Key":"I put","Fragments":["it","`to_string\u003c\u003e()`","the","in","another","the","everything","a","in","the","in"]},{"Key":"put it","Fragments":["in","in","inside","in","in","on","all","in","in","all","inside:","into","all","all","on","this"]},{"Key":"it in","Fragments":["for","your","`reset()`","the","a","one","are","line","the","favor","the","reverse,","a","a","a","the","the","the","both","this","C++","the","their","a","Python,","a","that","C++","the","a","one","two","a","production","unencrypted","the","code","`is_question_string`.)","this","a","the","a","terms","[]","the","place","a","both","a","this","a","headers","another","case","the","the","this","a","a","the","my","a","a","iteration","every","the","the","live"]},{"Key":"in for","Fragments":["completeness.","each","loops."]},{"Key":" Satisfying","Fragments":["the"]},{"Key":"Satisfying the","Fragments":["tests"]},{"Key":"tests in","Fragments":["some","Bob,"]},{"Key":"some of","Fragments":["these","the","your","your","the","your","the","the","your","these","them","these","the","the","the","your","these","the","C++","those","the","those","the","the","the","the","the","the","the","the","the","the","the","your","the","the"]},{"Key":"of these","Fragments":["exercises","names","functions","\"row\"s.","objects.","and","rules,","changes","things.","cases).","would","examples","integers","exercises","functions","functions.","code","`break`s.","points","ugly"]},{"Key":"these exercises","Fragments":["drives","I","I'm","between","as","become"]},{"Key":"exercises drives","Fragments":["me"]},{"Key":"drives me","Fragments":["nuts."]},{"Key":"me nuts.","Fragments":["Sometimes"]},{"Key":"nuts. Sometimes","Fragments":["I"]},{"Key":"Sometimes I","Fragments":["come","rely"]},{"Key":"I come","Fragments":["up","from","from","from","from","from","back","up","back"]},{"Key":"come up","Fragments":["with","with","with","with","as","with","with.","for","with","with","with","with","with!","with"]},{"Key":"up with","Fragments":["something","the","something","such","that","suggestions...","what","at","something","doing","a","a","a","something","the","anything","the","a","a","your","a","the"]},{"Key":"with something","Fragments":["that","like","to","else","different.","to","a","like","like"]},{"Key":"that works","Fragments":["and",":P"]},{"Key":"works and","Fragments":["think","is","is","is","is","is","while","meets","was"]},{"Key":"and think","Fragments":["\"is","\"Wait,"]},{"Key":"think \"is","Fragments":["that"]},{"Key":"\"is that","Fragments":["what"]},{"Key":"what the","Fragments":["creator","method","advantages/disadvantages","caller","class","exercise","name","overall","heck,","resource","type","logic","best","program","logic","variable","return","static","underlying","code","lifetime","algorithm","code","exercise","code","purpose","pros","best","other"]},{"Key":"the creator","Fragments":["of"]},{"Key":"creator of","Fragments":["the"]},{"Key":"exercise really","Fragments":["had","is"]},{"Key":"really had","Fragments":["in"]},{"Key":"had in","Fragments":["mind??\"","mind"]},{"Key":" We","Fragments":["don't","have","then","have","can"]},{"Key":"We don't","Fragments":["actually"]},{"Key":"don't actually","Fragments":["need","need","need","want","use"]},{"Key":"actually need","Fragments":["a","the","to."]},{"Key":"need a","Fragments":["separate","keyword","boolean.","copy","multiply","recent","body","different","class.","function","class?","lambda","separate","math","change","class","copy","temporary","little"]},{"Key":"a separate","Fragments":["clock","function.","function","source","function","function.","if","```if()```","count","function.","named","allocation","function","function","named","step?","check.","function","function","method","function.","function","function.","function","function"]},{"Key":"separate clock","Fragments":["namespace."]},{"Key":"clock namespace.","Fragments":["I"]},{"Key":"namespace. I","Fragments":["assume","opted","didn't"]},{"Key":"I assume","Fragments":["you","is","Speech","you","a","you've","that"]},{"Key":"assume you","Fragments":["made","believe","start"]},{"Key":"you made","Fragments":["this","a","the","a","the","that","two"]},{"Key":"made this","Fragments":["for","somewhat","exercise"]},{"Key":"this for","Fragments":["the","you?","fun."]},{"Key":"the \"at\"","Fragments":["function?"]},{"Key":"\"at\" function?","Fragments":["It"]},{"Key":"function? It","Fragments":["can"]},{"Key":"It can","Fragments":["be","be","be","only","take","help","accomplish","be"]},{"Key":"be declared","Fragments":["static","once.","constexpr?","once.","with","in-line.","as"]},{"Key":"declared static","Fragments":["(it"]},{"Key":"static (it","Fragments":["doesn't"]},{"Key":"(it doesn't","Fragments":["operate"]},{"Key":"doesn't operate","Fragments":["on"]},{"Key":"operate on","Fragments":["an","a","a","their","strings","message","std::string","std::string"]},{"Key":"on an","Fragments":["existing","enum","empty","empty","input","example.","FP","exclamation","empty","empty","empty","exception","empty","empty","old"]},{"Key":"an existing","Fragments":["object,","grade."]},{"Key":"existing object,","Fragments":["but"]},{"Key":"object, but","Fragments":["it"]},{"Key":"it does","Fragments":["instantiate","not","not","floating","not","seem","warn","demand","get","have","a","when","exist","not","indeed","is","not,","not","seem","have","expose","get","not","and","not,","work","more"]},{"Key":"does instantiate","Fragments":["and"]},{"Key":"instantiate and","Fragments":["return"]},{"Key":"and return","Fragments":["a","a","it.","the","the","as","a","the","`void`","a","the","it.","which","a","0","0.","when"]},{"Key":"return a","Fragments":["new","new","new","value","\u003ccode\u003estd::pair\u003c/code\u003e","matcher","const","reference).","negative","single","std::string","/","`double`.","vector","const","vector","const","value...","local","bool.","const.","copy","`bool`.","number)","map.","local","local","string","```std::string```","copy.","value","value","`const","boolean"]},{"Key":"new one)","Fragments":["and"]},{"Key":"one) and","Fragments":["then"]},{"Key":"then go","Fragments":["inside"]},{"Key":"go inside","Fragments":["in"]},{"Key":"inside in","Fragments":["the"]},{"Key":" Even","Fragments":["though","if"]},{"Key":"Even though","Fragments":["it","it's","String"]},{"Key":"though it","Fragments":["passes","may","may","would","does"]},{"Key":"it passes","Fragments":["the","the","every"]},{"Key":"passes the","Fragments":["tests,","tests,","given","tests","tests","rules","tests,","tests","given"]},{"Key":"the tests,","Fragments":["I","not","but","I","it","I'm","we","but","this","however","albeit","you","and","you"]},{"Key":"tests, I","Fragments":["think","don't","started"]},{"Key":"think that","Fragments":["returning","was","```std::string","would","leading","would","for","maintaining","if","the","makes","it","way","points","for-each-syntax","this","this","you","the","the","your","you","applies","cleans","boost","for","might","every","`return","is","`std::regex`","using","there","is","the","makes","you","the","people","in","the","is","you","a"]},{"Key":"that returning","Fragments":["a","the"]},{"Key":"a modified","Fragments":["\"this\""]},{"Key":"modified \"this\"","Fragments":["should"]},{"Key":"\"this\" should","Fragments":["be"]},{"Key":"should be","Fragments":["a","private.","a","a","in","your","fine,","private","a","fine,","marked","taking","marked","moved","hidden.","in","able","marked","marked","`const","marked","marked","marked","marked","marked","removed.","a","marked","marked","marked","in","faster","returned","**private**","based","marked","marked","marked","marked","marked","first","marked","marked","marked","marked","marked","marked","marked","marked","marked","marked","**static","**const**","marked","**const**","marked","**const**","marked","marked","**static","marked","marked","**size_t**","marked","simple","taken","size_t,","unique.","eliminated.","a","using","const.","+1","logically","in","static","declared","included","any","in","defined","inline,","simply","easier","template","kept","how","a","a","unsigned","in","``if","referred","kept,","skipped","paying","a","10","declared","perfect","written","able","a","removed","`trimmed`.","`void`.)","able","used","17","private","happy","dclared","defined",":)","a","smart","a","specific","a","avoided,","marked","marked","marked","referencing","removed.","avoided","avoided","receiving","a","equal","possible","a","possible.","with","declared","done","available","separate.)","declared","slightly",":","able","simplified.","passed","replaced","used","avoided","hidden","private.","treated","able","considered","plural,","unreachable.","possible","an","insensitive.","going","comfortable","replaced","boost/algorithm/string.hpp.","passed","used","checked","careful","accessing","passed","done","punctuation","able","private","accessed","able","part","continue,"]},{"Key":"a no-no","Fragments":["for"]},{"Key":"no-no for","Fragments":["the"]},{"Key":"the plus","Fragments":["and","and","side,","side","method"]},{"Key":"plus and","Fragments":["minus","minus","one"]},{"Key":"and minus","Fragments":["functions.","without"]},{"Key":"minus functions.","Fragments":["Pretend"]},{"Key":"functions. Pretend","Fragments":["we"]},{"Key":"Pretend we","Fragments":["were"]},{"Key":"we were","Fragments":["using","forced"]},{"Key":"were using","Fragments":["the","append","isalpha","C."]},{"Key":"using the","Fragments":["symbol","ternary","`inline`","ternary","same","object","same","default","utilities","fancy","regular","nifty","string","[]","vector","keyword","global","(seemingly)","at()","``std::random","`istream_iterator`s","`size()`","loop,","explicit","boost::tokenizer.","bitshift","algorithm","namespace","exclamation","boost","specialized","imcrementor","previously","`map`","`deltas`","build","C","`using`","Boost","switch","using","old","namespace","regex","heavy-handed","`'\\0'`","\u003calgorithm\u003e","struct","else","\"else","functions","`switch`","`upper`","std::string.empty()","[]operator","regex","new","double","new","CMake,","`min`","inline","standard","standard","boost","original","booleans","post-increment","private","compiler"]},{"Key":"the symbol","Fragments":["+"]},{"Key":"symbol +","Fragments":["instead"]},{"Key":"+ instead","Fragments":["of"]},{"Key":"the function","Fragments":["named","instead","`consume_divisor(...)`","returns.","and","declaration","will","as","silencep,","returns.","inserts","```isalnum```that","declaration","uppercasenotnumsentp","names","*words*","could","requires","stores","won't","is","prototype,","is","that","to","as","was","in","is","signature.","signature.","but","body","name.","the","less","definition","that","```const```.","```sing(unsigned","```hexadecimal::convert```.","in","```is_shouty```.","(for","you","could","were","definition?","names.","definitions.","with","body","as","in","as","is","mapping","`hey`.","call","itself.","for","again.","inserts","prototypes","isalnum()","starting","does","would","were","because","might","is","is","pointer.","declaration","was","returns","returns","overloading","shouldn't","everytime","to"]},{"Key":"function named","Fragments":["\"plus\".","\"hey\","]},{"Key":"named \"plus\".","Fragments":["Would"]},{"Key":"\"plus\". Would","Fragments":["it"]},{"Key":"Would it","Fragments":["make","possible","be"]},{"Key":"it make","Fragments":["sense","more","me"]},{"Key":"make sense","Fragments":["for","that","on","to","if","to","to","if"]},{"Key":"sense for","Fragments":["the","it"]},{"Key":"the expression","Fragments":["a+b","does","you're","encodes","to"]},{"Key":"expression a+b","Fragments":["to"]},{"Key":"a+b to","Fragments":["result"]},{"Key":"to result","Fragments":["in","+="]},{"Key":"result in","Fragments":["the","simply","undefined","a","a","broken","a","a"]},{"Key":"the modification","Fragments":["of"]},{"Key":"modification of","Fragments":["a?","the"]},{"Key":"of a?","Fragments":["Instead,"]},{"Key":"a? Instead,","Fragments":["let"]},{"Key":"Instead, let","Fragments":["the"]},{"Key":"let the","Fragments":["\"plus\"","STL","compiler"]},{"Key":"the \"plus\"","Fragments":["function"]},{"Key":"\"plus\" function","Fragments":["return"]},{"Key":"function return","Fragments":["a","and"]},{"Key":"new clock","Fragments":["instance."]},{"Key":"clock instance.","Fragments":["Also,"]},{"Key":"instance. Also,","Fragments":["pretend"]},{"Key":"Also, pretend","Fragments":["that"]},{"Key":"pretend that","Fragments":["we've"]},{"Key":"that we've","Fragments":["designed"]},{"Key":"we've designed","Fragments":["clock"]},{"Key":"designed clock","Fragments":["objects"]},{"Key":"clock objects","Fragments":["to"]},{"Key":"objects to","Fragments":["be"]},{"Key":"be immutable.","Fragments":["Now"]},{"Key":"immutable. Now","Fragments":["we're"]},{"Key":"Now we're","Fragments":["unable","passing"]},{"Key":"we're unable","Fragments":["to"]},{"Key":"unable to","Fragments":["create","decduce","get","solve.","get"]},{"Key":"to create","Fragments":["mutator","a","a","a","an","mine","a","for","a","a",".cpp","and","a","unique","initial","an","a","a","a","a","temporaries","instances","the","variables","the","instances","instances","another","a","the"]},{"Key":"create mutator","Fragments":["functions"]},{"Key":"mutator functions","Fragments":["anyway,"]},{"Key":"functions anyway,","Fragments":["and"]},{"Key":"anyway, and","Fragments":["it"]},{"Key":"and it","Fragments":["would","would","looks","does","would","is","appears","appears","would","can","accepts","makes","doesn't","can","is","worked","makes","just","seems","works,","would","turned","can","compiles","looks","knows","gives","makes","does","didn't","seems","would","functionality","doesn't","would","just","would","also","is","tripped","creates","notifies","looks","brought","can","would","works"]},{"Key":"sense that","Fragments":["any","there's","it"]},{"Key":"that any","Fragments":["such","of","premature"]},{"Key":"any such","Fragments":["functions"]},{"Key":"such functions","Fragments":["have","to"]},{"Key":"functions have","Fragments":["to","a","become","been"]},{"Key":"to return","Fragments":["a","multiple","by","it.","a","the","a","a","variables","variables","anything","an","0","a","a","the","a","from","a","a","actual","the"]},{"Key":"new instance","Fragments":["of"]},{"Key":"instance of","Fragments":["the","a","it","`isWord()`","`bob`.","the"]},{"Key":"1. The","Fragments":[".last()","test","test","rest","goal","hey","test","code","function"]},{"Key":"The .last()","Fragments":["method"]},{"Key":".last() method","Fragments":["was"]},{"Key":"method was","Fragments":["what","so","actually"]},{"Key":"was what","Fragments":["I","I"]},{"Key":"2. Got","Fragments":["it."]},{"Key":"Got it.","Fragments":["On","You"]},{"Key":"it. On","Fragments":["first"]},{"Key":"On first","Fragments":["glance"]},{"Key":"first glance","Fragments":["I'd","was","to"]},{"Key":"glance I'd","Fragments":["failed"]},{"Key":"I'd failed","Fragments":["to"]},{"Key":"failed to","Fragments":["recognize","provide","pull"]},{"Key":"to recognize","Fragments":["that","quotes.","any"]},{"Key":"recognize that","Fragments":["the"]},{"Key":"the OR","Fragments":["would"]},{"Key":"OR would","Fragments":["short"]},{"Key":"would short","Fragments":["circuit"]},{"Key":"circuit after","Fragments":["'true'."]},{"Key":"3. Good","Fragments":["point"]},{"Key":"Good point","Fragments":["about","on","on","on"]},{"Key":"point about","Fragments":["the","c++,","trying","overloading"]},{"Key":"the bool","Fragments":["names","var","to","expressions","variable","as","and"]},{"Key":"bool names","Fragments":["documenting"]},{"Key":"names documenting","Fragments":["the"]},{"Key":"documenting the","Fragments":["code.","potential"]},{"Key":"the code.","Fragments":["I","Just","I","Taking","If","This","++","You"]},{"Key":"code. I","Fragments":["chose","also","don't","think","think","guess","constantly"]},{"Key":"I chose","Fragments":["\"hasLower\"","the","to","to","for","to","to","to","an","an","an","an","to","to"]},{"Key":"chose \"hasLower\"","Fragments":["because"]},{"Key":"\"hasLower\" because","Fragments":["I"]},{"Key":"like to","Fragments":["avoid","learn","see","see","be","keep","always","see","have","have","use","use","make","be","try","add","figure","learn","declare","know","see","give","make","know","use","use","factor","know","look","know","separate","get","investigate","fail","know","use","come"]},{"Key":"to avoid","Fragments":["using","unnecessary","generating","compiler","the","doing","having","doing","implicit","copies.","implicit","the","implicit","implicit","implicit","implicit","implicit","implicit","implicit","a","implicit","reallocations","reallocations","reallocations","reallocations","reallocations","reallocations","reallocations","implicit","this","extra","implicit","the","implicit","a","a","an","the","unwanted","allocating","implicit","a","naming","collision","the","polluting","allocating","the","the","a","having","copying","float","float","floating-point","linker","linker","too","so","linker","iterating","doing","doing","having","depending","some","what's","this)","dereferencing","blowing","using","making","scope/namespace","inefficiency","doing","unneeded","that","using","copying","long","your","the","undefined","the","the","the","the","that.","using","writing","potential","copying","\"using","excessive","a","`using","casting","costly","\"magic","namespace","the","using","using","`str.erase`,","behind-the-scenes","copying.","a","creating","undefined","unnecessary","side"]},{"Key":"avoid using","Fragments":["double","std::array","both.","it","Boost","the","strtok","boost"]},{"Key":"using double","Fragments":["negatives."]},{"Key":" You","Fragments":["should","could","don't","could","solved","only","could","got","might","can","can","are","are","should","could","don't","are","can","can","might","are","might","provide","don't","are","don't","are","can","can","can","are","are","should","don't","might","may","don't","are","obiously","may","know,","could","could","don't","could","could","are","can","have","can","can","are","don't","are","probably","have","might","can","are","right,","have","should","guys","can","are","are","can","can't","are","can","can","can't","are","missed","can","could","are","could","could","could","don't","may","can","could","also","can","could","can","are","don't","make","could","can","can","forgot","can","can","can","should","forgot","also","don't","can","can","made","can","are","forgot","made","could","could","may","should","first","might","could","could","could","should","should","should","might","need","could","rely","can","can","could","could","also","shouldn't","should","can","may","don't","should","can","could","could","test","could","could","can","could","can","can","are","only","might","could","could","still","don't","have","are","could","don't","could","should","need","may","can","have"]},{"Key":"should accept","Fragments":["parameters"]},{"Key":"accept parameters","Fragments":["by"]},{"Key":"parameters by","Fragments":["const-reference"]},{"Key":"by const-reference","Fragments":["(e.g."]},{"Key":"const-reference (e.g.","Fragments":["`const"]},{"Key":"(e.g. `const","Fragments":["std::list\u003cstd::string\u003e\u0026`"]},{"Key":"`const std::list\u003cstd::string\u003e\u0026`","Fragments":["instead"]},{"Key":"std::list\u003cstd::string\u003e\u0026` instead","Fragments":["of"]},{"Key":"of `std::list\u003cstd::string\u003e`)","Fragments":["to"]},{"Key":"`std::list\u003cstd::string\u003e`) to","Fragments":["avoid"]},{"Key":"avoid unnecessary","Fragments":["copies.","copying","extra"]},{"Key":"unnecessary copies.","Fragments":["That"]},{"Key":"copies. That","Fragments":["might"]},{"Key":"That might","Fragments":["not","be","be","be"]},{"Key":"might not","Fragments":["be","compile","compile","be","put","extern","exist.","have","be","work","be","be","be","work.","seem","be","be","be","be"]},{"Key":"not be","Fragments":["important","lulled","a","const,","found:","a","created,","a","what","wasteful,","a","const.","present.","greater","recognized","handled","a","necessary,","changed","a","fixed","longer","trivial","needed","used","clear","significant.","able","categorized","modified.","called","large","so","a","done","needed","aware","in","in","0","able","0","a","used","imposed"]},{"Key":"be important","Fragments":["here,"]},{"Key":"important here,","Fragments":["but"]},{"Key":"here, but","Fragments":["can","unique_ptr","generally,","not"]},{"Key":"but can","Fragments":["really","cause"]},{"Key":"can really","Fragments":["impact","say"]},{"Key":"really impact","Fragments":["the"]},{"Key":"impact the","Fragments":["performance"]},{"Key":"the performance","Fragments":["(up","penalty","impacts","gain","implication","penalty","can","would","penalty","advantage","hit","(see"]},{"Key":"performance (up","Fragments":["to"]},{"Key":"(up to","Fragments":["unusable"]},{"Key":"to unusable","Fragments":["code)"]},{"Key":"unusable code)","Fragments":["when"]},{"Key":"code) when","Fragments":["handling"]},{"Key":"when handling","Fragments":["larger"]},{"Key":"handling larger","Fragments":["amounts"]},{"Key":"larger amounts","Fragments":["of"]},{"Key":"amounts of","Fragments":["data."]},{"Key":"of data.","Fragments":["It"]},{"Key":"data. It","Fragments":["is"]},{"Key":"is also","Fragments":["considered","equivalent","constant,","no","mixed","an","pretty","continuous","a","more","a","commented","a","fine","very","built","an","potentially","not"]},{"Key":"also considered","Fragments":["to","someone","just","trying"]},{"Key":"considered to","Fragments":["be","be"]},{"Key":"be good","Fragments":["style.",";-)","practice","to","if"]},{"Key":"good style.","Fragments":["See"]},{"Key":"style. See","Fragments":["the"]},{"Key":"See the","Fragments":["standard","`std::inner_product()`"]},{"Key":"the standard","Fragments":["library","library.","library","library","library.","note!","slowly.","that","on","library","library.","library).","to","library.","with","is","library","library","behaviour.","library.","library","that","libraries.","C","as","facilities.","library","tool"]},{"Key":"standard library","Fragments":["for","(all_of,","functions.","for","functions","has","implementation","isn't","to","algorithms).","algorithms).","to","headers","algorithms","had","provides","to","functions."]},{"Key":"library for","Fragments":["many","me,","common"]},{"Key":"for many","Fragments":["examples."]},{"Key":" About","Fragments":["`std::list`:","that","keeping","the","your","the","the"]},{"Key":"About `std::list`:","Fragments":["Yes,"]},{"Key":"`std::list`: Yes,","Fragments":["in"]},{"Key":"Yes, in","Fragments":["theory"]},{"Key":"in theory","Fragments":["it","but"]},{"Key":"theory it","Fragments":["is"]},{"Key":"it is","Fragments":["good","possible","to","now","more","easily","same","not","private","better","not","actually","going","of","in","only","still","expecting","useless","kept","concice;","not","not","more","now,","not","better","wasteful","a","not","perfectly","not","now.","possible","having","having","having","having","having","easier","not","kind","fine","largely","preferable","all","important","empty)","how","more","just","for","a","not","true","the","the","the","more","a","in","cast","becoming","almost","`.get()`,","easy","reasonable","enough","as","returning","Eratosthenes'","almost","what","`sum`","valid","standing","just","picking","```num_l```","still","easier","not","already","a","more","more","an","not","premature","also","now","more","incorrect","pretty","probablty","better","a","because","upper-case.","almost","good","better","optimized","your","not","found","an","an","the","an","an","the","that","with","arguably","just","not","not","a","reasonable","not","the","side-effect","indeed","an","still","not","not","in","a","better","not","much","not","compatible","a","empty.\u003c/li\u003e","an","an","the","supposed","the","a","suppose","valid","a","considered","considered","shorter","deleted.","clearer.","huge","only","undefined","an","an","the","either","O(len(word)).","a","undefined","simply","as","only","stateful.","invariant.","doing.","a","possible","a","more","simple","something","implicit","a","not","more","important","better","nothing,","too","not.","more","called.","brilliant.","name"]},{"Key":"is good","Fragments":["when","enough","enough,","that","but","and"]},{"Key":"good when","Fragments":["you"]},{"Key":"when you","Fragments":["append","didn't","could","can","only","have","could","assign","make","don't","*strand1.length()","submit","can","have","are","use","go","want","don't","have","know","declare","are","see","can","hover","use","need","start","consider","don't","use","call","find","exit","are","have","update,","look","add","call","need","pass","could","need"]},{"Key":"you append","Fragments":["a"]},{"Key":"append a","Fragments":["bunch","new"]},{"Key":"a bunch","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"bunch of","Fragments":["elements.","extra","string","nested","horrible","stuff","if/else","private","simple","characters","other","identifiers","errors:","imports","spaces)","time"]},{"Key":"of elements.","Fragments":["But"]},{"Key":"elements. But","Fragments":["in"]},{"Key":"But in","Fragments":["practice","this","this","this","general","general"]},{"Key":"in practice","Fragments":["`std::vector`"]},{"Key":"practice `std::vector`","Fragments":["often"]},{"Key":"`std::vector` often","Fragments":["performs"]},{"Key":"often performs","Fragments":["way"]},{"Key":"performs way","Fragments":["better."]},{"Key":"way better.","Fragments":["The"]},{"Key":"better. The","Fragments":["copying"]},{"Key":"The copying","Fragments":["during"]},{"Key":"copying during","Fragments":["the"]},{"Key":"during the","Fragments":["enlargement","first","loop","objects"]},{"Key":"the enlargement","Fragments":["is"]},{"Key":"enlargement is","Fragments":["heavily"]},{"Key":"is heavily","Fragments":["optimized","insipred"]},{"Key":"heavily optimized","Fragments":["and"]},{"Key":"optimized and","Fragments":["the"]},{"Key":"the compact","Fragments":["storage"]},{"Key":"compact storage","Fragments":["is"]},{"Key":"storage is","Fragments":["a"]},{"Key":"a big","Fragments":["plus.","deal,","performance","fan","deal,","pet","difference","fan","accumulate","improvement.","deal.","efficiency","improvement,","deal,","fan,","deal","part","deal","deal,"]},{"Key":"big plus.","Fragments":["Sure"]},{"Key":"plus. Sure","Fragments":["that"]},{"Key":"Sure that","Fragments":["depends"]},{"Key":"that depends","Fragments":["on"]},{"Key":"depends on","Fragments":["the","the","how","needs","some","something","the","what","what","some","what","whether","your"]},{"Key":"the stdlib","Fragments":["you're"]},{"Key":"stdlib you're","Fragments":["using"]},{"Key":"you're using","Fragments":["and","to","here","boost","+","one","the","`verse_index`","iterators","the","in","the","a","them","a"]},{"Key":"using and","Fragments":["the","try","typedefs,"]},{"Key":"the compiler,","Fragments":["but","creating","I'm","and"]},{"Key":"compiler, but","Fragments":["`std::list`"]},{"Key":"but `std::list`","Fragments":["is"]},{"Key":"`std::list` is","Fragments":["really"]},{"Key":"is really","Fragments":["dump,","about","std::find_if)","well","annoying.","solid.","nice,","a","worth","needed","close","nice.","difficult","efficient","cool,","clean,"]},{"Key":"really dump,","Fragments":["also"]},{"Key":"dump, also","Fragments":["see"]},{"Key":"also see","Fragments":["http://baptiste-wicht.com/posts/2012/12/cpp-benchmark-vector-list-deque.html"]},{"Key":" `rval`","Fragments":["means"]},{"Key":"`rval` means","Fragments":["`return"]},{"Key":"means `return","Fragments":["value`,"]},{"Key":"`return value`,","Fragments":["right?"]},{"Key":"value`, right?","Fragments":["I"]},{"Key":"right? I","Fragments":["got"]},{"Key":"I got","Fragments":["slightly","very","from","it","rid","rid","a","rid","that","it","this","too","into","everything,","to","the","hung"]},{"Key":"got slightly","Fragments":["confused"]},{"Key":"slightly confused","Fragments":["because"]},{"Key":"confused because","Fragments":["nowadays"]},{"Key":"because nowadays","Fragments":["it"]},{"Key":"nowadays it","Fragments":["often"]},{"Key":"it often","Fragments":["means","enough"]},{"Key":"often means","Fragments":["`rvalue`,"]},{"Key":"means `rvalue`,","Fragments":["see"]},{"Key":"`rvalue`, see","Fragments":["http://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c"]},{"Key":"see http://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c","Fragments":["for"]},{"Key":"http://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c for","Fragments":["an"]},{"Key":"an explanation","Fragments":["about","under:","in"]},{"Key":"explanation about","Fragments":["that"]},{"Key":"about that","Fragments":["topic.","and","is","is","on","topic.","since","they","a"]},{"Key":" And","Fragments":["try","you","finally.","in","with","yeah,","now","this","one","iterators,","I've","on","then","stuff","one","then","the","another","I","actually","BTW,","one","indeed","feel","I","indeed","of","if","BTW,","if","yeah,","moving","I","with","I","then"]},{"Key":"And try","Fragments":["to"]},{"Key":"try to","Fragments":["reduce","untruncate","use","pass","avoid","find","make","measure),","explain","link","get","guess","take","use","be","avoid","use","move","have","avoid","get","stick","say.","convince","make","separate","make","simplify","use","think","avoid","keep","use","put","transform/accumulate","learn.","write","iterate","find","immediate","immediate","re-use","get","find","get","apply","find","fix","catch","refrain","write"]},{"Key":"to reduce","Fragments":["your","LoC","LoC","code","the","a","looping","number","strpbrk","the","the"]},{"Key":"reduce your","Fragments":["function"]},{"Key":"your function","Fragments":["to","both","to","only","parameters","naming.","to","and","isn't","for","it","the","into","definition.","will","parameter"]},{"Key":"function to","Fragments":["a","a","one","do","access","being","call,","be","be","be","reduce","express","just","solve","check","perform","normalise","modify","create","determine","determine","be","take","identify"]},{"Key":"to a","Fragments":["single","direct","c-string","number?","`std::string","string,","string.","reference","const","const.","const.","const.","const.","const","const","const","few","floating-point","default","problem","function","range-based","response.","+=","``std::vector\u003cint\u003e``.","point","cpp","single","value","function.","reference","`vector`","substring","string","matrix","+","function","namespace","namespace","```const","rule","non-technical","nested","different","vector","function","variable","maximum","constexpr","namespace","JSON","problem","`string`.","dictionary",".cpp","linking","vector","function","position","static","single","static","function","lower","unary","(range)","static","typo","string","lower-level","wrong","minimum,","word","namespace","0?","result","result","c_string","single","while","minimum.","helper","C++","new","good","more","buffer","regular","line","constructor,","string.\"","reference","`response`","range"]},{"Key":"single return","Fragments":["statement","in"]},{"Key":"statement or","Fragments":["a"]},{"Key":"or a","Fragments":["precondition-check","specialized","*map*","``std::unordered_map``.","TOTHINKABOUT?","template.","template","const","primitive","semicolon,","\u0026","`namespace`","function","size_t,","pointer","class,","lambda","better","```cont","`std::array`","personal","string","some","question?","for","grep","functional","number","number","private","recursive","namespace"]},{"Key":"a precondition-check","Fragments":["(with"]},{"Key":"precondition-check (with","Fragments":["return"]},{"Key":"(with return","Fragments":["or"]},{"Key":"return or","Fragments":["exception)"]},{"Key":"or exception)","Fragments":["and"]},{"Key":"exception) and","Fragments":["a"]},{"Key":"and a","Fragments":["bundled","function","`const","lot","string","header)","bunch","lot","couple","leftover","map","size()","chessboard","functor","lot","relative","coin","pair","new","recurrent","few","std::ostream\u0026","single","string-conversation","fixed","shaved","binary","single","map","struct","check","exclamation","teensy","bigger","function",".cpp,","namespace","while","loop","lambda","use","'getType'","new","function"]},{"Key":"a bundled","Fragments":["return-statement"]},{"Key":"bundled return-statement","Fragments":["block"]},{"Key":"return-statement block","Fragments":["(like"]},{"Key":"block (like","Fragments":["one"]},{"Key":"(like one","Fragments":["if-else"]},{"Key":"one if-else","Fragments":["block"]},{"Key":"if-else block","Fragments":["with"]},{"Key":"block with","Fragments":["only"]},{"Key":"with only","Fragments":["returns","a","one","numbers","numbers","white","one","one","a","one"]},{"Key":"only returns","Fragments":["inside).","positive"]},{"Key":"returns inside).","Fragments":["It"]},{"Key":"inside). It","Fragments":["prevents"]},{"Key":"It prevents","Fragments":["many"]},{"Key":"prevents many","Fragments":["bugs"]},{"Key":"many bugs","Fragments":["while"]},{"Key":"bugs while","Fragments":["working"]},{"Key":"while working","Fragments":["in"]},{"Key":"working in","Fragments":["teams","environments","C++"]},{"Key":"in teams","Fragments":["and"]},{"Key":"teams and","Fragments":["makes"]},{"Key":"and makes","Fragments":["your","the","it","the","more","good","the","the"]},{"Key":"makes your","Fragments":["code","overall","executable","code","code","code","code","code","code"]},{"Key":"your code","Fragments":["easier","a","is","more","a","is","if","but","doesn't","doesn't","compile","by","is","(lines","with","more","will","is","nicer","could","and","because","to","base.","though:","a","with","more","(I","less","is.","while","would","would","a","doesn't","if","isn't","instead","in","but","so","is","is.","is","is","to","more","more","more","more","more","less","looks","difficult","would","up","more","up"]},{"Key":"code easier","Fragments":["to","to","to"]},{"Key":"easier to","Fragments":["read.","read","iterate","read.","read.","split","read.","maintain","maintain","read.","see","see","know","see","read","change","write","read.","spot","generalize","define","take","read","read","understand","understand","reuse","follow,","write","'nitpick'.","understand,","see","read,","read.","understand","read","read","use.","understand.","read.","debug.","read","read,","read","read","compare","read","maintain.","understand.","match","understand","read","understand"]},{"Key":" `Which","Fragments":["way"]},{"Key":"`Which way","Fragments":["is"]},{"Key":"way is","Fragments":["more","just","definitely","kind","much"]},{"Key":"more readable?`","Fragments":["Depends,"]},{"Key":"readable?` Depends,","Fragments":["but"]},{"Key":"Depends, but","Fragments":["I"]},{"Key":"I often","Fragments":["found","find","read","have","grab"]},{"Key":"often found","Fragments":["the"]},{"Key":"found the","Fragments":["lambda","next","multiple","answer"]},{"Key":"the lambda","Fragments":["more","you","capture","on","expression"]},{"Key":"lambda more","Fragments":["explicit"]},{"Key":"more explicit","Fragments":["because","than","style,","what"]},{"Key":"explicit because","Fragments":["you"]},{"Key":"because you","Fragments":["can","call","don't","only","are","always","use","know","needed","were","are","can","made","will","don't","`checkPoke`","do","prefer","never","are"]},{"Key":"can actually","Fragments":["see","check","be","just"]},{"Key":"actually see","Fragments":["the"]},{"Key":"see the","Fragments":["function","necessarity","problem","``auto``","experts","improvements","difference","order","point","methods","header","readme.","last","arguments","speed","speed","additional","all","big","point","necessity","benefit","benefit","flaw","bucket","song","DFA","point","\"using","vowels"]},{"Key":"function instead","Fragments":["of","of","of","of","of","of","of","of"]},{"Key":"of assembling","Fragments":["it"]},{"Key":"assembling it","Fragments":["in"]},{"Key":"The implementation","Fragments":["is","should","of","looks"]},{"Key":"implementation is","Fragments":["straight","small","fine,","effectively","simple","header-only,","16.","more","simple"]},{"Key":"is straight","Fragments":["forward.","forward:"]},{"Key":"straight forward.","Fragments":["I","On","I"]},{"Key":"forward. I","Fragments":["only","like"]},{"Key":"I only","Fragments":["had","have","needed","use","have","use","found","have","did","look","get","needed","made","need","went","found","have","use","cared"]},{"Key":"only had","Fragments":["to","a"]},{"Key":"had to","Fragments":["choose","happen.","use","be","do","make","put","double","lookup","use","test","list","support","look","copy","add","maintain","really","really","switch","wrap","add","use","declare","manually","put","put","skip","nitpick","draw","draw","introduce","alter","handle","mess"]},{"Key":"to choose","Fragments":["where","a","mutable","between"]},{"Key":"choose where","Fragments":["the"]},{"Key":"where the","Fragments":["evaluation","slowdown","verses","response","arabic","problem","default","chess_board","type","difference","size","extra","input","original","exclamation","operators","length","closing","buffer","first"]},{"Key":"the evaluation","Fragments":["had","was","at"]},{"Key":"evaluation had","Fragments":["to"]},{"Key":"1. in","Fragments":["the"]},{"Key":"the constructor","Fragments":["(```dna::counter::counter(...)```)","would","for","private","to","was","and","makes","does","thus","should","(input","and","seems","the","makes","explicit","argument.","argument","will","or","that","I","of","is","is","as","would","will","will","both","could","both","I","if","and","appears","of","as","for","or","does","a","as"]},{"Key":"2. in","Fragments":["```dna::counter::counts()```"]},{"Key":"in ```dna::counter::counts()```","Fragments":["and"]},{"Key":"```dna::counter::counts()``` and","Fragments":["```dna::counter::count(...)```","```dna::counter::count(...)```"]},{"Key":"3. the","Fragments":["first"]},{"Key":"the first","Fragments":["time","time","exercise","place.","if","time","overload","solution","non","one","two","two","check","three","iteration,","pass","zero","signature","time)","time","line","few","obvious","line","character","argument","one","iteration","link","code","case","verse.","time","time","call","verse","punctuation","line","series","character","implementation","has","check","empty","advice.","upload","byte","for","stack","two","one?","case?","thing","time","place.","and","alpha","bullet","iteration,","iteration","time","one","convention,","iteration,","version","lambda","exercise","time","place","'a'","test!","character","passed","or","iteration.","exercise","and","iteration:","place,","inserted","nitpick,","loop,","if","time","sequence","time","argument.","expression","character","default","thing","test","one..","character.","element","string","submission.","function.","time","letter","letter","letter.","character","example","iteration"]},{"Key":"first time","Fragments":["```dna::counter::counts()```","and","might","I","or","that","the","`words[currentWord]`","i've","I'","the","using","using","it"]},{"Key":"time ```dna::counter::counts()```","Fragments":["and"]},{"Key":"and ```dna::counter::count(...)```","Fragments":["are","would"]},{"Key":"```dna::counter::count(...)``` are","Fragments":["called"]},{"Key":"chose the","Fragments":["most","ternary","order","order"]},{"Key":"the most","Fragments":["simple","optimised","obvious","appropriate","helpful","simplistic","nitpicky","part!","predictable","part","about","readable","influencial","reasonable","recently","readable","influence","LLd","expensive","likely","common","common","efficient","readable","efficient","efficient","other","common","readable","readable"]},{"Key":"most simple","Fragments":["solution"]},{"Key":"simple solution","Fragments":["(the","is"]},{"Key":"solution (the","Fragments":["constructor)."]},{"Key":"is possible","Fragments":["to","to","to","to","to","to"]},{"Key":"possible to","Fragments":["implement","generate","submit","pass","have","contruct","only","make","make","do","add","read","avoid","avoid","exit","avoid","submit","make","replace","not","solve","make","pass","determine"]},{"Key":"implement ```dna::counter```","Fragments":["with"]},{"Key":"```dna::counter``` with","Fragments":["an"]},{"Key":"with an","Fragments":["array","integer","*assert*","empty","implicit","array","error","invalid","STL","empty","lvalue,","```std::map\u003cint,","assert","#ifdef","uppercase","exclamation","explicit","access","underscore","instance","```!=```","conversion","empty","unsigned"]},{"Key":"an array","Fragments":["```int[4]```","of","dimension","of","to","instead.","from","to","of","to","mapping","the","of","of"]},{"Key":"array ```int[4]```","Fragments":["instead"]},{"Key":"```int[4]``` instead","Fragments":["of"]},{"Key":"of a","Fragments":["```std::map\u003cchar,","class","validating","while","12+","single","`class`","```for```","`case`","namespace,","list","simple","global","way","feature","coworker","few","do-while...","`std::pair`","robot","lambda","key's","mess","previous","template","class","habit","logical","few","range-based","class.","class","member","concern","`namespace`","class,","namespace...","variable.","pet","Ubuntu","variable","class","wrapper,","grade","comment","couple","string","string,","switch","template","container).","good","little","vector","static","view","string","```StringView```.","range","reference.","difference,","map\u003cchar,int\u003e","lambda","word's","ball","command","string?","few","copy.","larger","wrong","wrong","win","gregorian","ptime","function's","crypto_square","\"cipher\"","crypto_square","piece.","super-cheap","temporary","lambda","string","class","class","char.","class","char","static","static","way","method","better","for","class.","class","way","performance","class,","\"bob\"","namespace?","namespace?","way","good","difference.","larger","class?","class","mash","single","class","class)","`using","separator","lot","tiny","function.","\"hamming","better","c-style","given","string","string","new","previous","given","switch","psudo-random","constructor","cumbersome","class","list","function","chess","return","non-plural","class","stylistic","function","typical","`string`.","word","map.","difficult","better","regular"]},{"Key":"a ```std::map\u003cchar,","Fragments":["int\u003e```."]},{"Key":"```std::map\u003cchar, int\u003e```.","Fragments":["That"]},{"Key":"int\u003e```. That","Fragments":["way"]},{"Key":"That way","Fragments":["```dna::counter```","the","every","(isspace(*b)||isignorablepunct(*b))","there's","you","one","you","if","you","you","you","you","you","you","it"]},{"Key":"way ```dna::counter```","Fragments":["would"]},{"Key":"```dna::counter``` would","Fragments":["use"]},{"Key":"would use","Fragments":["less","a","`resp.empty()`","```using","v.back()","```size_t```.","a","exactly","`phrase.back()`","an"]},{"Key":"use less","Fragments":["space","memory","memory."]},{"Key":"less space","Fragments":["and"]},{"Key":"space and","Fragments":["```dna::counter::count(...)```","are"]},{"Key":"```dna::counter::count(...)``` would","Fragments":["be"]},{"Key":"would be","Fragments":["faster.","interesting","included","better","useful","ok.","OK.","better.","to","nice.","that","a","appreciated.","more","to","in","affected.","in","improved","happy","a","a","a","a","nice","nice","better","good.","to","suboptimal","set","in","possible","push_back","to","to","much","a","doing","totally","better","better","easier","better","better","a","clearer","just","even","3,","pretty","wise","clearer","a","treated","somewhere","spent","if","most","a","closer","64,","worth","doing","prettier","options","more","treatened","pretty","any","compiled","better","also","quite","possible","much","particularly","idiomatic","cool,","much","better","even","beneficial.","creating","concerned","required","needed","crazy,","sort-of","equivalent","slow.","much","better","more","clearer","for","gained","easier","a","greatly","the","better","the","a","more","difficult","something","much","better).","if","replacing","super","if","to","good.","that","npos","to","something","to","caught","slightly","good","a","dangerous?","good","good.","zero-initialized,","higher","0","very","notably","much","less","multiply","OK.","even","the","a","better","to","easy","written","more","happy","indistinguishable","worth","called","better","```CMXCIX```","+","==","unnecessary)","roughly","equally","confusing.","simpler","clearer","clearer","required,","the","considered","discarded","a","a","a","tokenized","to","something","the","normal","greatly","a","better.....","a","significantly","cheaper","impossible","more","constant","faster.","easier","faster","in","to","clearer.","much","to","checked","relatively","relatively","relatively","relatively","better.","an","something","to","that","more","considered","nice","more","better","better","defined","interested","a","overkill.","ok","neat","welcome.","the","to","a","sufficient.","better","helpful.","helpful.","the","able","better","nice.","nice.","1","true)","false).","to","better","in","to","required?","pretty","potentially","nice","to","to","easier","a","better","more","more","better","that","so","more","good","more","easier","cleaner","easier"]},{"Key":" But","Fragments":["to","to","if","I","for","most","@riley","thanks","if","did","speaking","these","I","if","if","then,","OK,","to","I'm","you","array","is","still","then","another","I","it","I","what","then","if","if","I","let's","let","why","I","the","this","usually","I","it","that's","let","even","instead","I","I"]},{"Key":"But to","Fragments":["quote","avoid","quote","do","be"]},{"Key":"to quote","Fragments":["Michael","Michael","cachegrind's"]},{"Key":"quote Michael","Fragments":["Jackson","A."]},{"Key":"Michael Jackson","Fragments":["(not"]},{"Key":"Jackson (not","Fragments":["the"]},{"Key":"(not the","Fragments":["singer):"]},{"Key":"the singer):","Fragments":["\"The"]},{"Key":"singer): \"The","Fragments":["First"]},{"Key":"\"The First","Fragments":["Rule"]},{"Key":"First Rule","Fragments":["of","of"]},{"Key":"Rule of","Fragments":["Program","Program","thumb:","Program","Program"]},{"Key":"of Program","Fragments":["Optimization:","Optimization","Optimization:","Optimization"]},{"Key":"Program Optimization:","Fragments":["Don't","Don't"]},{"Key":"Optimization: Don't","Fragments":["do","do"]},{"Key":"Don't do","Fragments":["it.","it","that.","it.","it","it.","it"]},{"Key":"do it.","Fragments":["The","The","The","Major","I","It's","C++","Returning"]},{"Key":"it. The","Fragments":["Second","second","Second","version","only","process_number","code","compiler","only","return","member","easiest","best"]},{"Key":"The Second","Fragments":["Rule","Rule"]},{"Key":"Second Rule","Fragments":["of","of"]},{"Key":"Program Optimization","Fragments":["(for","(for"]},{"Key":"Optimization (for","Fragments":["experts","experts"]},{"Key":"(for experts","Fragments":["only!):","only!):","only!):"]},{"Key":"experts only!):","Fragments":["Don't","Don't","Don't"]},{"Key":"only!): Don't","Fragments":["do","do","do"]},{"Key":"do it","Fragments":["yet.\"","yet.\"","yet.*\".","in","not","by","by","manually","anyhow","in","all","twice.","in","outside","in","as","that","sometimes","(because","IRL.","in","upfront.","again,","only","until","otherwise.","the","without","better.","without","once","in","as","right.","is"]},{"Key":"- You","Fragments":["call","define","keep","might","include","pass","could","might","seem","have","get","should"]},{"Key":"You call","Fragments":["```srand(time(NULL))```"]},{"Key":"call ```srand(time(NULL))```","Fragments":["in"]},{"Key":"```srand(time(NULL))``` in","Fragments":["```robot_name::robot::reset()```."]},{"Key":"in ```robot_name::robot::reset()```.","Fragments":["That"]},{"Key":"```robot_name::robot::reset()```. That","Fragments":["way"]},{"Key":"way the","Fragments":["pseudo","flow","postfix","tests","original","following","data","way","unit"]},{"Key":"the pseudo","Fragments":["random","random","number"]},{"Key":"pseudo random","Fragments":["number","generator"]},{"Key":"random number","Fragments":["generator","generation","generators","generator","generators","generator","generator","generator"]},{"Key":"number generator","Fragments":["is","remains","and","for","to","to"]},{"Key":"generator is","Fragments":["seeded"]},{"Key":"is seeded","Fragments":["with"]},{"Key":"seeded with","Fragments":["the","the"]},{"Key":"with the","Fragments":["same","current","same","boolean","logic","default,","used","logic","testcases.","process","test","surrounding","char","individual","way","goal","input.","tests.","insert","implementation,","protected,","need","ternary","true","requirement","linear,","Earth's","regexes).","warning","current","value","requested","default","arbitrary","overloads","test",".h.","code","dangerous","different","names","changes.","fact,","function","function","method","is_a_yell","test","range","implicit","implicit","?,","difficulty","/Za","response.","benefits","usage","```all_of```","checks.","check","code.","boost","iterator,","help","words.","words.","c++11","all-space","for","problem.","string","`at`","Makefile","map).","result","two","makefile","first","help","`std::plus\u003c\u003e{}`","`hamming.h`","module","default","strings","static","fact","original","corrections","`find_first_of`","c++","gcc","basic","original","sorted","implementation","syntax","implementation","rest.","`returnValue[wordBuffer]++;`","template","string","`if","boost","vector","`using`","appropriate","`boost:regex`","arguments","longest","NULL","use","other.","standard.","string","number","arguments","new","new","serial","implementation.","slashes;","update.","code.","isNumber","`isNumber`","enclosing","structure","code.","usage","rest","size_t,","{}","triple","geometric","disclaimer"]},{"Key":"same value","Fragments":["for","and","(or","after","twice?"]},{"Key":"value for","Fragments":["each","```ULL```?","a","the","score,"]},{"Key":"for each","Fragments":["call","response.","case,","string,","count","input","factor","nucleotide.","nucleotide","compilation","of","of","existing","language","one","one","node.","syntax.","(const","(const","(const","(const","of","one","candidate","case.","response","test","function","one","N","task","trial","case:","condition","loops.","loop","individual"]},{"Key":"call within","Fragments":["the"]},{"Key":"within the","Fragments":["same","same","same","run","file)","same","code.","std","bob","bob","hamming","full","`bob`","word_count","class.","same","loop","`isalpha`","solution.","feature"]},{"Key":"same second.","Fragments":["If"]},{"Key":"second. If","Fragments":["all"]},{"Key":"If all","Fragments":["the","`main()`"]},{"Key":"the 1000","Fragments":["resets"]},{"Key":"1000 resets","Fragments":["in"]},{"Key":"resets in","Fragments":["the"]},{"Key":"the last","Fragments":["test","element.","for","test.","test","iteration.","test","test","one","few","character","non-\"","tip,","version","of","letter","one","step","byte","4","character","char.","iteration.","thing","character","thing","char","character","character","statement","one)","unit","second.","\"else","condition","character?","character","character","character","iteration.","test.","two","test,","test","submit:","character","character","character","test:","test,","character"]},{"Key":"test are","Fragments":["executed","nicely"]},{"Key":"are executed","Fragments":["within"]},{"Key":"executed within","Fragments":["the"]},{"Key":"same second","Fragments":["(likely),"]},{"Key":"second (likely),","Fragments":["```std::rand()```"]},{"Key":"(likely), ```std::rand()```","Fragments":["is"]},{"Key":"```std::rand()``` is","Fragments":["called"]},{"Key":"is called","Fragments":["2.507.505","for","within","with","where","10","Young","nitpicking","`m_anagram`","a","the","for","to","and"]},{"Key":"called 2.507.505","Fragments":["times"]},{"Key":"2.507.505 times","Fragments":["instead"]},{"Key":"times instead","Fragments":["of","of"]},{"Key":"of 5.010","Fragments":["times."]},{"Key":"The magic","Fragments":["value"]},{"Key":"magic value","Fragments":["65"]},{"Key":"value 65","Fragments":["appears"]},{"Key":"65 appears","Fragments":["without"]},{"Key":"appears without","Fragments":["an"]},{"Key":"without an","Fragments":["explanation.","if,","initialized","appropriate"]},{"Key":"an explanation.","Fragments":["Not"]},{"Key":"explanation. Not","Fragments":["every"]},{"Key":"Not every","Fragments":["junior"]},{"Key":"every junior","Fragments":["developer"]},{"Key":"junior developer","Fragments":["nowadays"]},{"Key":"developer nowadays","Fragments":["knows"]},{"Key":"nowadays knows","Fragments":["that"]},{"Key":"knows that","Fragments":["this","the"]},{"Key":"value of","Fragments":["ASCII","the","the","65535.","`j`","the","that","an","a","i","the","`0`","`1`","32767.","`1`,","0.","stable_partition","its","the","`words[currentWord]`","std::find_if","0.","1","isSayingAnything","the","`hamming_diff`","`food_iter`","this","string::npos."]},{"Key":"of ASCII","Fragments":["```'A'```."]},{"Key":"ASCII ```'A'```.","Fragments":["Also,"]},{"Key":"```'A'```. Also,","Fragments":["IMHO"]},{"Key":"Also, IMHO","Fragments":["```('A'"]},{"Key":"IMHO ```('A'","Fragments":["+"]},{"Key":"```('A' +","Fragments":["rand()"]},{"Key":"+ rand()","Fragments":["%"]},{"Key":"rand() %","Fragments":["26)```","2"]},{"Key":"% 26)```","Fragments":["is"]},{"Key":"26)``` is","Fragments":["a"]},{"Key":"bit more","Fragments":["readable,","while","readable.","carefully!","appropriate","in","memory,","performance","flexible","clear","clear","before"]},{"Key":"more readable,","Fragments":["because","but","nice","but","mostly","but","because","I","in"]},{"Key":"readable, because","Fragments":["it","in","I"]},{"Key":"it avoids","Fragments":["the","the"]},{"Key":"avoids the","Fragments":["cast.","need","first"]},{"Key":" #","Fragments":["When","Prohibit","Miscellaneous","place","and"]},{"Key":"# When","Fragments":["to"]},{"Key":"When to","Fragments":["generate"]},{"Key":"to generate","Fragments":["the","unused","used","all","as","a"]},{"Key":"generate the","Fragments":["name","same"]},{"Key":"the name","Fragments":["of","when","of","used","in","would","std::string,","in","`std::tolower`","of","`hey`","to","of","mangling","\"uniform\".","mangling","is","(which","collision"]},{"Key":"name of","Fragments":["the","the","the","a","the","the"]},{"Key":" From","Fragments":["a","an","what","a"]},{"Key":"From a","Fragments":["behavioural","performance"]},{"Key":"a behavioural","Fragments":["point"]},{"Key":"behavioural point","Fragments":["of"]},{"Key":"point of","Fragments":["view","view,","implementing","conversation,","this","it","the","using","view,","view","rejection.","view","this","copying"]},{"Key":"of view","Fragments":["there","max()","iteration"]},{"Key":"view there","Fragments":["is"]},{"Key":"is no","Fragments":["difference","`static","lowercase","longer","lower","need","overflow","reason","larger","test","year","point","lazy","standard","linking","longer","one-fits-all","good","benefit.","guarantee","need","reason","longer","need","need","\"hey\"","good","need","best","need","longer","change","guarantee","way","need","boost/algorithm.hpp.","real","possible","extra","need","longer","gain","actual","fun","real"]},{"Key":"no difference","Fragments":["between","whatsoever,","whatsoever.","between","in"]},{"Key":"difference between","Fragments":["generating","``std::vector``","(for","the","`enum`","`struct`","the","a","the"]},{"Key":"between generating","Fragments":["the"]},{"Key":"generating the","Fragments":["name","name","appropriate","verses"]},{"Key":"name when","Fragments":["`name()`"]},{"Key":"when `name()`","Fragments":["is"]},{"Key":"`name()` is","Fragments":["called","called."]},{"Key":"called for","Fragments":["the","local","every"]},{"Key":"time and","Fragments":["generating","store","you","will","memory","returns"]},{"Key":"and generating","Fragments":["it"]},{"Key":"generating it","Fragments":["in"]},{"Key":"in `reset()`","Fragments":["even"]},{"Key":"`reset()` even","Fragments":["before"]},{"Key":"even before","Fragments":["`name()`"]},{"Key":"before `name()`","Fragments":["is"]},{"Key":"# Prohibit","Fragments":["name"]},{"Key":"Prohibit name","Fragments":["collisions"]},{"Key":"The cost","Fragments":["of"]},{"Key":"cost of","Fragments":["this","this","copying","the","returning","constructing","iterating","the","such","memory","some"]},{"Key":"of this","Fragments":["constraint","approach","solution.","one","solution","solution","site","via","ternary","code","exercise...","as","as","class,","copy","code.","method.","kind","exercise","(before)","that","exercise","over","header","argument.","code","header","as","problem","exercise","algorithm","application?","method,","ambiguity,","character","project.","in","problem","function","exercise.","writing.","function.","one","call","string"]},{"Key":"this constraint","Fragments":["is"]},{"Key":"constraint is","Fragments":["greater","stronger:"]},{"Key":"is greater","Fragments":["time,","than","then","than"]},{"Key":"greater time,","Fragments":["space,"]},{"Key":"time, space,","Fragments":["and"]},{"Key":"space, and","Fragments":["code","then"]},{"Key":"and code","Fragments":["complexity.","indent","indent","was"]},{"Key":"code complexity.","Fragments":["Either"]},{"Key":"complexity. Either","Fragments":["the"]},{"Key":"Either the","Fragments":["used"]},{"Key":"the used","Fragments":["names","names,","idioms.","namespace"]},{"Key":"used names","Fragments":["have","are","are"]},{"Key":"names have","Fragments":["to","to"]},{"Key":"be stored","Fragments":["and","sperately","and"]},{"Key":"stored and","Fragments":["newly","used","doesn't"]},{"Key":"and newly","Fragments":["generated"]},{"Key":"newly generated","Fragments":["names"]},{"Key":"generated names","Fragments":["have"]},{"Key":"be looked","Fragments":["up,"]},{"Key":"looked up,","Fragments":["or"]},{"Key":"up, or","Fragments":["the"]},{"Key":"or the","Fragments":["random","coding","coding","[C++","standard","index","values","other.","explicit",".h?","class.","`std::plus\u003cint\u003e{}`","cpp,","static","new","'\\w'","result","whole"]},{"Key":"the random","Fragments":["number","permutation","number","header.","library.","nature"]},{"Key":"number generation","Fragments":["has"]},{"Key":"generation has","Fragments":["to","proven"]},{"Key":"has to","Fragments":["be","contain","reprocess","reprocess","reprocess","convert","add","do","do","cope","offer.","fit","follow.","be","start","get","be","be","have","ask","say","be","grow","happen","be","be","be","do","read","traverse","be","return","be","be","do","check","make","be","be"]},{"Key":"more complex","Fragments":["to","headers","than","it","in","routines","than","objects","rules.","cases"]},{"Key":"complex to","Fragments":["avoid"]},{"Key":"avoid generating","Fragments":["duplicate"]},{"Key":"generating duplicate","Fragments":["names."]},{"Key":" ##","Fragments":["Simple","Advanced","Even","Changes","Changes","Changes","Getting"]},{"Key":"## Simple","Fragments":["approach"]},{"Key":" For","Fragments":["a","readability","the","example","example","me","every","your","what","the","line","very","completeness","now","C++","the","each","the","unsigned","me","example,","more","the","me","what","obscenely","the","example","me","example,","example","the","checking","the","the","your","directly","extra","this","nitpicks,","me","me","the"]},{"Key":"For a","Fragments":["small","single","simple","full"]},{"Key":"a small","Fragments":["number","number","FSM","amount","novel","improvement,","handful","boost","margin),","performance","hack","window","degree","overhead","program","amount"]},{"Key":"small number","Fragments":["of","of"]},{"Key":"of robots","Fragments":["it"]},{"Key":"robots it","Fragments":["is"]},{"Key":"generate unused","Fragments":["names"]},{"Key":"unused names","Fragments":["by"]},{"Key":"names by","Fragments":["storing"]},{"Key":"by storing","Fragments":["used","the"]},{"Key":"storing used","Fragments":["ones"]},{"Key":"used ones","Fragments":["and"]},{"Key":"ones and","Fragments":["repeatedly","\"fake\""]},{"Key":"and repeatedly","Fragments":["generating"]},{"Key":"repeatedly generating","Fragments":["new"]},{"Key":"generating new","Fragments":["random"]},{"Key":"new random","Fragments":["names"]},{"Key":"random names","Fragments":["until"]},{"Key":"names until","Fragments":["an"]},{"Key":"until an","Fragments":["unused"]},{"Key":"an unused","Fragments":["name","header)","temporary"]},{"Key":"unused name","Fragments":["is"]},{"Key":"name is","Fragments":["generated.","equivalent","also","unique.","never","never","assigned,","already"]},{"Key":"The larger","Fragments":["the"]},{"Key":"larger the","Fragments":["number"]},{"Key":"of robots,","Fragments":["the","but"]},{"Key":"robots, the","Fragments":["more"]},{"Key":"more likely","Fragments":["it","to","to","to","that","to"]},{"Key":"likely it","Fragments":["is"]},{"Key":"is to","Fragments":["generate","some","some","some","use","say","simply","create","either","only","remove","short","avoid","indicate","return","get","get","declare","limit","avoid","many","specify","leave","broad,","increment","get","compare","avoid","break","get","use","pick","simplify","sacrifice","count","write","use","include","return","build","treat","be","use","use","search","search","use","move","look","move","pass","tokenize","ensure","`bob::hey()`,","initialize","provide"]},{"Key":"generate used","Fragments":["names,"]},{"Key":"used names,","Fragments":["the","and"]},{"Key":"names, the","Fragments":["more","naming"]},{"Key":"more memory","Fragments":["is"]},{"Key":"memory is","Fragments":["used","probably","still","relatively","bad","allocated."]},{"Key":"used storing","Fragments":["the","and","and","and"]},{"Key":"names, and","Fragments":["the","also"]},{"Key":"the longer","Fragments":["the"]},{"Key":"longer the","Fragments":["generation"]},{"Key":"the generation","Fragments":["process"]},{"Key":"generation process","Fragments":["takes."]},{"Key":"This approach","Fragments":["might","has","traverses","is","was"]},{"Key":"approach might","Fragments":["be"]},{"Key":"be the","Fragments":["easiest","next","silent","first","number","declaration","case","declaration","last","same","better","only","most","total","same","return","other","right","condition","most","last","[C++11","idea","hardest","prefered","perfect"]},{"Key":"the easiest","Fragments":["to"]},{"Key":"easiest to","Fragments":["implement","convert"]},{"Key":"implement and","Fragments":["the"]},{"Key":"the fastest","Fragments":["for","integer","way","one","running"]},{"Key":"fastest for","Fragments":["a"]},{"Key":"for a","Fragments":["small","larger","non","structure","map","container","string","mutable","question","new","known","good","question","good","number","histogram","few","good","lot","few","`T`.","different","string","key","begin()","few","string","valid","first","logic","summed","human,","null","function,","use","solution","simple","recommendation","couple","`'\\0'`,","greater","possible","looping","class.","given","string","question","terminating","dedicated","predictable","fact","simplified","number","teenager.","bigger","class,","non-alpha","simple","simple","static","super","shout,","shout","shout","question","question","shout","blank","given","extra","`std::string`","spec","more","maintenance","solution","Boost","\"highly","good","highly-readable","string","'true'","very","while","way","coding","reverse","couple","yell","function","question","total","project","good"]},{"Key":"robots, but","Fragments":["for"]},{"Key":"but for","Fragments":["a","me","numbers","example)","my","longer","this"]},{"Key":"a larger","Fragments":["number","overhead","project),","amount","set","binary","program."]},{"Key":"larger number","Fragments":["of"]},{"Key":"of values","Fragments":["(`robots"]},{"Key":"values (`robots","Fragments":["\u003e\u003e"]},{"Key":"(`robots \u003e\u003e","Fragments":["n`)"]},{"Key":"\u003e\u003e n`)","Fragments":["the"]},{"Key":"n`) the","Fragments":["performance"]},{"Key":"performance penalty","Fragments":["is","for","-","of","that"]},{"Key":"penalty is","Fragments":["unbearable."]},{"Key":"## Advanced","Fragments":["approach"]},{"Key":"- There","Fragments":["are","are"]},{"Key":"are `n","Fragments":["="]},{"Key":"`n =","Fragments":["26^2*10^3"]},{"Key":"= 26^2*10^3","Fragments":["="]},{"Key":"26^2*10^3 =","Fragments":["676.000`"]},{"Key":"= 676.000`","Fragments":["different"]},{"Key":"676.000` different","Fragments":["robot"]},{"Key":"different robot","Fragments":["names."]},{"Key":"- If","Fragments":["there","the","I"]},{"Key":"If there","Fragments":["are","is","was","was","is","is"]},{"Key":"are n","Fragments":["robots","assignments"]},{"Key":"n robots","Fragments":["to"]},{"Key":"robots to","Fragments":["be"]},{"Key":"be generated","Fragments":["all","by","through","in"]},{"Key":"generated all","Fragments":["of","possible"]},{"Key":"all of","Fragments":["these","namespace","the","the","the","the","the","the","the","your","that.","them","the","your","the","std","the","which","update_word_count()","the","the","us,","a","your","the","them","the","the","the","the","the"]},{"Key":"these names","Fragments":["will"]},{"Key":"names will","Fragments":["be","be","outlive"]},{"Key":"will be","Fragments":["used.","a","interesting","wise","the","thrown.","the","inlined","\"small\"","more","0","quite","sorted,","generated","stored","initialized","`0","generated.","called","a","called","clearer","in","`\"hellospaces\"`","easy","slower.","easier","non-negative;","called","faster","preferred","\u003e0","created","easier","always","removed.","read","undefined","linked","working","the","in","created","very","dereferencing","counted","a","present","anagrams.","O(n)","the","an","optimized","a","passed","characters","implicitly","incorrect.","treated","a","inserting","simpler"]},{"Key":"- Randomly","Fragments":["generating"]},{"Key":"Randomly generating","Fragments":["robot"]},{"Key":"generating robot","Fragments":["names"]},{"Key":"robot names","Fragments":["will"]},{"Key":"a PITA","Fragments":["for"]},{"Key":"PITA for","Fragments":["the"]},{"Key":"the 676.000th","Fragments":["robot."]},{"Key":"- Chosing","Fragments":["a","`i`","a","`i`"]},{"Key":"Chosing a","Fragments":["random","random"]},{"Key":"a random","Fragments":["robot","robot","name","number","sci-fi","order."]},{"Key":"random robot","Fragments":["name","name"]},{"Key":"robot name","Fragments":["is","is"]},{"Key":"is equivalent","Fragments":["to","to","to","to","to"]},{"Key":"equivalent to","Fragments":["chosing","creating","``base``","the","a","\"sum","`str[str.size()-1]`,","`(!std::isalpha(*it))","any()"]},{"Key":"to chosing","Fragments":["a"]},{"Key":"chosing a","Fragments":["element"]},{"Key":"a element","Fragments":["of"]},{"Key":"element of","Fragments":["index","index","string.","what","input","in"]},{"Key":"of index","Fragments":["`i`","`i`"]},{"Key":"index `i`","Fragments":["from","from"]},{"Key":"`i` from","Fragments":["the","`S'`"]},{"Key":"from the","Fragments":["sequence","view","long","member","file","class","standard","beginning","multiplication","development","constness","map","end.","std","details,","feedback","current","random","sorting,","`said2`","map","iterators,","beginning,","word","C","first","C","outer","last","web,","boost","compiler","fact,","common","constructor)?","Google","code.","heap","test","overhead","\"check","prior","constructor","extra","fact","improved","first","outside","test","C","very","sieve","vector","same","ends","ends","specification","decisions","isspace","helper","bob::hey","requirement","`hey`","original","person","earlier","readme","simplicity","combinatorial","caller.","trial","primary","same","word","NitPicks","++","call","for","header","last","right","remaining","first","Linux","final","last","input","latter","last","anagram_test.cpp","end","convert.","requirements,","string)"]},{"Key":"the sequence","Fragments":["`S","is"]},{"Key":"sequence `S","Fragments":["="]},{"Key":"`S =","Fragments":["1..n`"]},{"Key":"= 1..n`","Fragments":["where"]},{"Key":"1..n` where","Fragments":["`i`"]},{"Key":"where `i`","Fragments":["was","was"]},{"Key":"`i` was","Fragments":["not","not"]},{"Key":"was not","Fragments":["used","used","included.","sure","worth","able","available","excluding","declared","a","a","well","possible.","declared","well","part","quite","sure","divisable"]},{"Key":"not used","Fragments":["before.","before.","except","outside","outside","boost","to"]},{"Key":"Chosing `i`","Fragments":["as","as"]},{"Key":"`i` as","Fragments":["subsequent","subsequent"]},{"Key":"as subsequent","Fragments":["values","values"]},{"Key":"subsequent values","Fragments":["`0,","`0,"]},{"Key":"values `0,","Fragments":["1,","1,"]},{"Key":"`0, 1,","Fragments":["2,","2,"]},{"Key":"1, 2,","Fragments":["...`","...`","3"]},{"Key":"2, ...`","Fragments":["as","for"]},{"Key":"...` as","Fragments":["indexes"]},{"Key":"as indexes","Fragments":["of"]},{"Key":"indexes of","Fragments":["`S`","`S'`"]},{"Key":"of `S`","Fragments":["produces","with"]},{"Key":"`S` produces","Fragments":["unique"]},{"Key":"produces unique","Fragments":["but","and"]},{"Key":"unique but","Fragments":["predictable"]},{"Key":"but predictable","Fragments":["ascending"]},{"Key":"predictable ascending","Fragments":["values."]},{"Key":"also equivalent","Fragments":["to"]},{"Key":"to creating","Fragments":["a"]},{"Key":"creating a","Fragments":["permutated","`const","class","cpp","brand","new","method","second"]},{"Key":"a permutated","Fragments":["sequence"]},{"Key":"permutated sequence","Fragments":["`S'"]},{"Key":"sequence `S'","Fragments":["="]},{"Key":"`S' =","Fragments":["perm(S)`"]},{"Key":"= perm(S)`","Fragments":["and"]},{"Key":"perm(S)` and","Fragments":["subsequently"]},{"Key":"and subsequently","Fragments":["chosing"]},{"Key":"subsequently chosing","Fragments":["an"]},{"Key":"chosing an","Fragments":["element"]},{"Key":"an element","Fragments":["of","against"]},{"Key":"from `S'`","Fragments":["where"]},{"Key":"`S'` where","Fragments":["`i`"]},{"Key":"...` for","Fragments":["selecting"]},{"Key":"for selecting","Fragments":["indexes"]},{"Key":"selecting indexes","Fragments":["of"]},{"Key":"of `S'`","Fragments":["produces"]},{"Key":"`S'` produces","Fragments":["unique"]},{"Key":"unique and","Fragments":["random"]},{"Key":"and random","Fragments":["values."]},{"Key":"The time","Fragments":["cost"]},{"Key":"time cost","Fragments":["of"]},{"Key":"approach is","Fragments":["paid","to","good.","that","**not**","to","to"]},{"Key":"is paid","Fragments":["once,"]},{"Key":"paid once,","Fragments":["when"]},{"Key":"once, when","Fragments":["the"]},{"Key":"when the","Fragments":["random","function","key","object","predicate","return","input's","constructor","methods","getters","`std::move()`","question","first","side-effect","characters","simple","logic","default","length","robot","user","list"]},{"Key":"random permutation","Fragments":["is"]},{"Key":"permutation is","Fragments":["generated."]},{"Key":"is generated.","Fragments":["If"]},{"Key":"generated. If","Fragments":["this"]},{"Key":"If this","Fragments":["increase","was","seems","passed","was"]},{"Key":"this increase","Fragments":["in"]},{"Key":"increase in","Fragments":["runtime","code","code"]},{"Key":"in runtime","Fragments":["and"]},{"Key":"runtime and","Fragments":["memory"]},{"Key":"and memory","Fragments":["comsumption","footprint,","allocations,","considering","management"]},{"Key":"memory comsumption","Fragments":["is"]},{"Key":"comsumption is","Fragments":["tolerable"]},{"Key":"is tolerable","Fragments":["depends"]},{"Key":"tolerable depends","Fragments":["on"]},{"Key":"the application","Fragments":["and"]},{"Key":"application and","Fragments":["the","then"]},{"Key":"the target","Fragments":["system.","string","types.","string","word."]},{"Key":"target system.","Fragments":["On"]},{"Key":"system. On","Fragments":["a"]},{"Key":"On a","Fragments":["modern","function","point","more","general","side"]},{"Key":"a modern","Fragments":["PC","C++"]},{"Key":"modern PC","Fragments":["this"]},{"Key":"PC this","Fragments":["is"]},{"Key":"not a","Fragments":["problem.","local","upper","yell","(inlined)","programmer","fan","big","reasonable","uniform","fan","function","reference","question\"","huge","part","huge","single","valid","valid","big","question.","huge","major","good","space","big","major","big","fan","really","class","lot.","concern,","good","shout,","fan","class,","letter.","modifier","good","great","string","question","big","space"]},{"Key":"a problem.","Fragments":["The"]},{"Key":"problem. The","Fragments":["increase"]},{"Key":"The increase","Fragments":["in"]},{"Key":"in code","Fragments":["complexity","like","overly","is","that's","I","comment"]},{"Key":"code complexity","Fragments":["is"]},{"Key":"complexity is","Fragments":["small.","still","O(max(len_i)ln(max(len_i)).","O(word_len),","something","no"]},{"Key":"## Even","Fragments":["more"]},{"Key":"Even more","Fragments":["advanced"]},{"Key":"more advanced","Fragments":["approach"]},{"Key":"There might","Fragments":["be","be"]},{"Key":"a sufficiently","Fragments":["fast","low"]},{"Key":"sufficiently fast","Fragments":["algorithm"]},{"Key":"fast algorithm","Fragments":["that"]},{"Key":"algorithm that","Fragments":["generates","can","does","would"]},{"Key":"that generates","Fragments":["the","a"]},{"Key":"generates the","Fragments":["`i`-th"]},{"Key":"the `i`-th","Fragments":["value"]},{"Key":"`i`-th value","Fragments":["of"]},{"Key":"the `k`-th","Fragments":["permutation"]},{"Key":"`k`-th permutation","Fragments":["of"]},{"Key":"permutation of","Fragments":["`S`","the"]},{"Key":"`S` with","Fragments":["a"]},{"Key":"a space","Fragments":["complexity","(probably","if","or","in"]},{"Key":"space complexity","Fragments":["lower"]},{"Key":"complexity lower","Fragments":["than"]},{"Key":"lower than","Fragments":["`O(n)`.","the"]},{"Key":"The name","Fragments":["of","last_non_white","\"in\""]},{"Key":"function `consume_divisor(...)`","Fragments":["is"]},{"Key":"`consume_divisor(...)` is","Fragments":["slightly"]},{"Key":"is slightly","Fragments":["suboptimal.","smaller"]},{"Key":"slightly suboptimal.","Fragments":[";-)"]},{"Key":" Pretty","Fragments":["straight","simple.","sure","simple","compact","simple","simple,","straightforward."]},{"Key":"Pretty straight","Fragments":["forward"]},{"Key":"straight forward","Fragments":["implementation,"]},{"Key":"forward implementation,","Fragments":["small"]},{"Key":"implementation, small","Fragments":["methods,"]},{"Key":"small methods,","Fragments":["good"]},{"Key":"methods, good","Fragments":["readability."]},{"Key":"good readability.","Fragments":["I"]},{"Key":"readability. I","Fragments":["like"]},{"Key":"A note","Fragments":["to"]},{"Key":"note to","Fragments":["keeping","remind","many"]},{"Key":"to keeping","Fragments":["members"]},{"Key":"keeping members","Fragments":["`protected`"]},{"Key":"members `protected`","Fragments":["instead"]},{"Key":"`protected` instead","Fragments":["of"]},{"Key":" `protected`","Fragments":["members"]},{"Key":"`protected` members","Fragments":["are"]},{"Key":"members are","Fragments":["usually","doing","hidden","static,"]},{"Key":"are usually","Fragments":["discouraged","quite"]},{"Key":"usually discouraged","Fragments":["by"]},{"Key":"discouraged by","Fragments":["C++"]},{"Key":"by C++","Fragments":["experts.","because","because"]},{"Key":"C++ experts.","Fragments":["They"]},{"Key":"experts. They","Fragments":["are"]},{"Key":"They are","Fragments":["visible","a","mostly","used"]},{"Key":"are visible","Fragments":["to"]},{"Key":"visible to","Fragments":["inheriting","the","the"]},{"Key":"to inheriting","Fragments":["classes"]},{"Key":"inheriting classes","Fragments":["and"]},{"Key":"classes and","Fragments":["thus","namespaces.","structs,"]},{"Key":"and thus","Fragments":["are","avoid","of","no","much","is","unmodifiable.","inaccessible","there"]},{"Key":"thus are","Fragments":["part"]},{"Key":"are part","Fragments":["of","of"]},{"Key":"part of","Fragments":["the","the","the","a","the","the","the","the","why","the","that,","that","the","the","the","any","compiler","@hilton.","the","the","boost","the","the","the","the","a","the","the","your","me","the","the","```","that","the","the","the","a","a","the","the","my","the","doing","the","a","the","the","the","the","the","a","the"]},{"Key":"the API","Fragments":["of","stable.","of","that","defined"]},{"Key":"API of","Fragments":["the","`robot`."]},{"Key":"class. They","Fragments":["are"]},{"Key":"are a","Fragments":["way","bit","little","few","member","part","small","number","lot","few","few","blessing","couple","very","couple","more","few","few","bad","(string,","lot","few","number","number","bit"]},{"Key":"to tell","Fragments":["the","the","them","that","it","whether"]},{"Key":"tell the","Fragments":["other","Big","story.","string"]},{"Key":"the other","Fragments":["programmer:","two.","submissions","hand,","options.","predicates","hand","components","two","submissions","check,","hand,","typedef.","constructor","returns","way,","two","two","2","way","side","option.","one","hand","one","word","solutions,","characters.","hand,","hand,","hand","side","is","one","hand","3","stuff","approach.","two","hand,","stuff","bools","occurrences","submitions,","functions","characters.","hand,","hand,","code","issues","submissions","solutions","submissions","solutions"]},{"Key":"other programmer:","Fragments":["You"]},{"Key":"programmer: You","Fragments":["may"]},{"Key":"You may","Fragments":["inherit","take","consider","have","improve","find","want","also","want","also","be","also"]},{"Key":"may inherit","Fragments":["from"]},{"Key":"inherit from","Fragments":["this"]},{"Key":"from this","Fragments":["class","is","code"]},{"Key":"this class","Fragments":["and","can't","is"]},{"Key":"class and","Fragments":["use","function,","place_queen()","its","declare","since","not","most","most","I","using","all"]},{"Key":"and use","Fragments":["its","the","of","`isspace(char)`","erase-remove","cases?","```auto```","these","the","the","prefix-increment","`std::isalpha`,","std","`regex_match`","```std::basic_string::compare```","the","various","them","the"]},{"Key":"use its","Fragments":["protected","`to_upper`"]},{"Key":"its protected","Fragments":["members."]},{"Key":"protected members.","Fragments":["Often"]},{"Key":"members. Often","Fragments":["you"]},{"Key":"Often you","Fragments":["don't"]},{"Key":"don't want","Fragments":["to","to","it","to","to","to","to","to","to","to","to","to","to","to","to","anyone","to","to","to","to","to","to"]},{"Key":"to enable","Fragments":["that","``Queen()``","the","you"]},{"Key":"enable that","Fragments":["kind"]},{"Key":"that kind","Fragments":["of","of","of","of","of"]},{"Key":"of access","Fragments":["to"]},{"Key":"access to","Fragments":["your","it?","char","`std::string::iterator`","i.","the","things","it,","it,","string","the"]},{"Key":"your members","Fragments":["and","perform"]},{"Key":"and keep","Fragments":["that","the","a","yourself","code","the"]},{"Key":"keep that","Fragments":["part","digit","piece","in"]},{"Key":"that part","Fragments":["of","of"]},{"Key":" `get_or_insert`","Fragments":["is"]},{"Key":"`get_or_insert` is","Fragments":["much"]},{"Key":"much too","Fragments":["complicated."]},{"Key":"too complicated.","Fragments":["And","What"]},{"Key":"complicated. And","Fragments":["unneccessary."]},{"Key":" `grade_school::school::colon::grade(...)`","Fragments":["could"]},{"Key":"`grade_school::school::colon::grade(...)` could","Fragments":["be"]},{"Key":"be implemented","Fragments":["as","in","without","for","in","as","with"]},{"Key":"implemented as","Fragments":["a","a","free","a","a"]},{"Key":"a non-const","Fragments":["one","iterator.","reference,"]},{"Key":"non-const one","Fragments":["line"]},{"Key":"one line","Fragments":["method","with","becomes","(what","as","of","but,","was"]},{"Key":"line method","Fragments":["(`return"]},{"Key":"method (`return","Fragments":["roster_[grade_number];`),"]},{"Key":"(`return roster_[grade_number];`),","Fragments":["but"]},{"Key":"roster_[grade_number];`), but","Fragments":["then"]},{"Key":"but then","Fragments":["every","I","don't","I","it","you'd","we","you're","had","I","I"]},{"Key":"then every","Fragments":["request","time"]},{"Key":"every request","Fragments":["for"]},{"Key":"request for","Fragments":["a"]},{"Key":"a non","Fragments":["existing","prime","all_of","letter"]},{"Key":"non existing","Fragments":["grade"]},{"Key":"existing grade","Fragments":["would"]},{"Key":"grade would","Fragments":["insert"]},{"Key":"would insert","Fragments":["an"]},{"Key":"insert an","Fragments":["empty"]},{"Key":"an empty","Fragments":["vector","for","string","string.","name","vector","vector","string.","string","string,","string","string","string.","string.","string,","string","entry","string","constructor","string,","string.","string.","string.","string,","string","member","string","file","string.","string,","string?","string","string."]},{"Key":"empty vector","Fragments":["into","is","so"]},{"Key":"vector into","Fragments":["the"]},{"Key":" Having","Fragments":["a","the","said"]},{"Key":"Having a","Fragments":["creature","more","consistent"]},{"Key":"a creature","Fragments":["class"]},{"Key":"creature class","Fragments":["is"]},{"Key":"class is","Fragments":["neat.","all","per","designed","decidedly","named","to","unnecessary","the","probably","used,"]},{"Key":"is neat.","Fragments":["Could"]},{"Key":"neat. Could","Fragments":["there"]},{"Key":"Could there","Fragments":["be"]},{"Key":"there be","Fragments":["fewer","no"]},{"Key":"be fewer","Fragments":["blank"]},{"Key":"fewer blank","Fragments":["inputs"]},{"Key":"blank inputs","Fragments":["in"]},{"Key":"inputs in","Fragments":["the","range"]},{"Key":"class constructor?","Fragments":["Or"]},{"Key":"constructor? Or","Fragments":["encapsulate"]},{"Key":"Or encapsulate","Fragments":["the"]},{"Key":"encapsulate the","Fragments":["special","answers","checks","required"]},{"Key":"the special","Fragments":["case","cases","case"]},{"Key":"special case","Fragments":["logic","when,","for","by","and"]},{"Key":"case logic","Fragments":["in"]},{"Key":"logic in","Fragments":["the","*number*","the","the"]},{"Key":"the classes","Fragments":["(e.g."]},{"Key":"classes (e.g.","Fragments":["the"]},{"Key":"(e.g. the","Fragments":["```horse```"]},{"Key":"the ```horse```","Fragments":["and"]},{"Key":"```horse``` and","Fragments":["```spider```"]},{"Key":"and ```spider```","Fragments":["cases)?"]},{"Key":"was looking","Fragments":["for","at","at","for"]},{"Key":"looking for","Fragments":["a","pure","looking","'\\0'?","looking","'\\0'?","a","-","the","ways","full","in"]},{"Key":"a structure","Fragments":["constructor"]},{"Key":"structure constructor","Fragments":["where"]},{"Key":"constructor where","Fragments":["if"]},{"Key":"where if","Fragments":["you"]},{"Key":"don't specify","Fragments":["the","an"]},{"Key":"specify the","Fragments":["value,","max","locale","trailing","start","seperator"]},{"Key":"the value,","Fragments":["it","but","otherwise","except"]},{"Key":"value, it","Fragments":["will"]},{"Key":"it will","Fragments":["use","be.","throw","become","do","be","submit","add","check","also","find","compile","never","be","(theoretically)","also","disable","normally","work.","be","be","avoid","be","take","take","be","only","allocate","be","would","bite","not","be","use","append","be","do","skip","return","use"]},{"Key":"will use","Fragments":["the","```const","bob","less","forward","only","\"using"]},{"Key":"use the","Fragments":["given","O(0)","STL","function","index","range","tools","h","string","`std::move`","boost","`[]`","maps","three-argument","STL","[]","new","iterator","return","member)","boost","third","following:","`at`","```operator[]```","```operator[]```.","C++03","std::to_string(int)","class","\"always","bob_speech","same","'C'","same","`remove-erase`","member","back","functional","back","`std::string`","std::string","``pow``","std::find_if_not","not1,","same","_isalpha_","number","trinary","find","keyword","global","shiny","unnamed","actual","`_copy`","C++11","gcc","boost","new","bob::hey","*exercism","*exercism","range","function","std::transform","```top```","length","std::sort","member","boost","stringstream","new","resulting","increment","snprintf()","transform","relational","sizeof","```string::operator[]```","functions","variable","syntax:","boost","\"auto\"","variable"]},{"Key":"the given","Fragments":["default","validation","tests","tests?"]},{"Key":"given default","Fragments":["(in"]},{"Key":"default (in","Fragments":["this"]},{"Key":"(in this","Fragments":["case","case","approach)"]},{"Key":"this case","Fragments":["blank),","I","that's","it","we","(since","it","will","will","the","I","it's","it's","you","each","it","for","you","it's","not","it","only","it","(keeping","code","because","yet,","?","I"]},{"Key":"case blank),","Fragments":["so"]},{"Key":"blank), so","Fragments":["something"]},{"Key":"so something","Fragments":["like."]},{"Key":" list.push_back(creature(\"spider\",","Fragments":["\"It"]},{"Key":"list.push_back(creature(\"spider\", \"It","Fragments":["wriggled....\","]},{"Key":"\"It wriggled....\",","Fragments":["\"wriggled...\"));"]},{"Key":" list.push_back(creature(\"bird\",","Fragments":["\"How"]},{"Key":"list.push_back(creature(\"bird\", \"How","Fragments":["absurd"]},{"Key":"\"How absurd","Fragments":["to"]},{"Key":"absurd to","Fragments":["swallow","swallow"]},{"Key":"to swallow","Fragments":["a","a"]},{"Key":"swallow a","Fragments":["bird!\"));`","bird!\\n```"]},{"Key":" but","Fragments":["I","got","from","aesthetically,","in","it's","for","I"]},{"Key":"could not","Fragments":["find","pass","find","choose","compile","get","find","imagine","decide","pass","simply"]},{"Key":"not find","Fragments":["an","a","it"]},{"Key":"find an","Fragments":["example.","index","explanation","alternative","appropriate"]},{"Key":"Thank you","Fragments":["for","for","for","for","for",":)","for","for","for","for","@aisha,","for","very","guys.","for","Vengor","Denisss025,","for","so","for","for","for","so","for","fractalic.","for","for","for","for","for","for","mikedal.","for","for","for"]},{"Key":"you for","Fragments":["showing","your","the","these","the","your","fixing","the","your","your","all","your","the","commenting","your","the","all","the","the","having","your","the","the","your","your","the","your","the","pointing","your","the","your"]},{"Key":"for showing","Fragments":["us"]},{"Key":"showing us","Fragments":["the"]},{"Key":"us the","Fragments":["right"]},{"Key":"the right","Fragments":["way","way","size","output","order","thing","term.","chapter/section","`iterator`","track?","regex","move;","response,","way","shift","content","file?","algorithm","direction,","direction).","call","way","side","choice","choice.","thing.","regex","this"]},{"Key":"right way","Fragments":["of","to","to","to"]},{"Key":"doing it.","Fragments":["Only","Thanks!"]},{"Key":"it. Only","Fragments":["small"]},{"Key":"Only small","Fragments":["nitpick"]},{"Key":"small nitpick","Fragments":["is"]},{"Key":"nitpick is","Fragments":["that","that"]},{"Key":"is that","Fragments":["I","boost?","`isGibberish`","we","the","if","if","it","the","lines","in","you","this","the","it","a","testing","your","assignment","the","your","there","`at()`","guaranteed","you're","it's","variable,","the","the","it's","the","a","your","it","it","`m_word`","you","it","this","anon","you","they","it","it","something","the","I","it","`is_upper`","you","I","I","```#include","c++11","you","you're","you're","using","the","if","some","you","it","a","if","you","I","I","this","you","your","function","you","it","C++","you've","the","removing","you","you","you","you"]},{"Key":"that I","Fragments":["think","forgot","provide","could","do","have","theorized","don't","took.","think","can","did","can't","have","should","will","realised,","wasn't","don't","don't","have","should","am","use","was","have","think","feel","think","think","would","can't","am","should","couldn't","could","don't","only","think","had","could","see","don't","could","called","like","don't","wasn't","ran","need","like,","actually","really","missed,","look","find","understand","may","submitted","thought","don't","could","think","saw","suspect","could","didn't","truly","found","could","think","needed","got","am","over","missed.","needed.","needed","first","could","will","then","didn't"]},{"Key":"you should","Fragments":["probably","probably","probably","probably","probably","declare","pass","still","get","externalize","have,","probably","rename","be","still","be","consider","decide","have","continue","maybe","reassign","use","\"fix\"","use","prefer","pick","consider","consider","consider","also","make","not","not","be","do","limit","do","add","be","never","always","do","use","also","be","never","modify","pass","pass","copy","try","check","check","have","have","limit","never","not","not","check","be","just","see","only","go","consider","store","just","do","probably","add","initialize","do","inline","probably","probably","probably","set"]},{"Key":"probably inline","Fragments":["your","your"]},{"Key":"inline your","Fragments":["functions.","functions","functions.","functions."]},{"Key":"your functions.","Fragments":["I","\"bob::is_asking\"","Others","The","I"]},{"Key":"functions. I","Fragments":["also","only","think","know","also","also"]},{"Key":"don't know","Fragments":["why","about","why...```)","if","which","how","how","how","why","the","why","what","much","why","if","what","all","if","why","what","Italian","why","how","that","how","regex","what","if","how","if","if","why"]},{"Key":"know why","Fragments":["you","I","you","I","`std::pow()`","I'm","they","I","that","`for(char\u0026","you"]},{"Key":"used all","Fragments":["of"]},{"Key":"namespace std","Fragments":["when","in","is","especially","because","excludes","when"]},{"Key":"std when","Fragments":["you","you"]},{"Key":"you didn't","Fragments":["use","use","try","find","want","put","declare"]},{"Key":"didn't use","Fragments":["anything","RegExes.","it.","them","it."]},{"Key":"use anything","Fragments":["from","outside"]},{"Key":"anything from","Fragments":["it?","that.","std::,"]},{"Key":" Regardless","Fragments":["of"]},{"Key":"Regardless of","Fragments":["using"]},{"Key":"a reference","Fragments":["or","to","to","implicitly.","to","to","to","to","to","to","to","to","to","to","to","to","there.","indicates","(i.e.","and","to","over","and","and","to","to","to","you","just","rather","to","thus","to","and","in","to","to","is"]},{"Key":"reference or","Fragments":["not,","copy"]},{"Key":"or not,","Fragments":["you","I"]},{"Key":"not, you","Fragments":["should"]},{"Key":"your functions","Fragments":["if","by","can","supports","could","const","will","are","only","accept","that"]},{"Key":"functions if","Fragments":["you"]},{"Key":"are that","Fragments":["worried","way"]},{"Key":"that worried","Fragments":["about"]},{"Key":"worried about","Fragments":["performance","with"]},{"Key":"about performance","Fragments":["issues.","of","of","in","as","in"]},{"Key":" Hello","Fragments":["again,","and","again!"]},{"Key":"As always","Fragments":["thank","other"]},{"Key":"always thank","Fragments":["you"]},{"Key":"thank you","Fragments":["for","sieben,","very","for","for","for","for","for","for"]},{"Key":"your comments.","Fragments":["I","Another"]},{"Key":"comments. I","Fragments":["should","believe","agree","really","admit","think"]},{"Key":"I should","Fragments":["fix","have","put","have","be","have","have","ask","add","have","update.","get","point","probably","at","put","use","have","think","assume","probably","first","check","use","use","have","be","by","definitely","use","probably","throw","probably","get","have","have","have","have"]},{"Key":"should fix","Fragments":["all"]},{"Key":"fix all","Fragments":["uses"]},{"Key":"all uses","Fragments":["of"]},{"Key":"uses of","Fragments":["```std```","auto.","the"]},{"Key":"of ```std```","Fragments":["but"]},{"Key":"```std``` but","Fragments":["then"]},{"Key":"then I","Fragments":["wouldn't","have","go","could","could","think","poked","could","had","suggest","could","could","can't","think","wonder","would","modified"]},{"Key":"I wouldn't","Fragments":["get","change","be","use","do","normally","expect","want","do","bother","be","really","have"]},{"Key":"wouldn't get","Fragments":["any"]},{"Key":"any feedback.","Fragments":["Use",":)"]},{"Key":"feedback. Use","Fragments":["is"]},{"Key":"Use is","Fragments":["reflexive"]},{"Key":"is reflexive","Fragments":["and"]},{"Key":"reflexive and","Fragments":["has"]},{"Key":"and has","Fragments":["been","no","a","macro","a","no","comments,","negligible","functional","the"]},{"Key":"been updated","Fragments":["here."]},{"Key":"I wonder","Fragments":["how","what","it","if","if","if","if","if","if","if","how"]},{"Key":"wonder how","Fragments":["much","complex","to"]},{"Key":"how much","Fragments":["inlined","simpler","time","one's","I","we","this"]},{"Key":"much inlined","Fragments":["functions"]},{"Key":"inlined functions","Fragments":["improve"]},{"Key":"functions improve","Fragments":["performance."]},{"Key":"improve performance.","Fragments":["I"]},{"Key":"performance. I","Fragments":["suspect","timed"]},{"Key":"I suspect","Fragments":["compilers","few","you'll","you'll","you","you're","was","that","it'll"]},{"Key":"suspect compilers","Fragments":["optimize"]},{"Key":"compilers optimize","Fragments":["this"]},{"Key":"optimize this","Fragments":["already,","check.","by","any"]},{"Key":"this already,","Fragments":["but"]},{"Key":"already, but","Fragments":["it","doesn't"]},{"Key":"be interesting","Fragments":["to","to","combined"]},{"Key":"interesting to","Fragments":["benchmark","see","see","think","look","you"]},{"Key":"to benchmark","Fragments":["and","it.","the","three"]},{"Key":"benchmark and","Fragments":["see."]},{"Key":"- Oops","Fragments":["about"]},{"Key":"Oops about","Fragments":["srand,"]},{"Key":"about srand,","Fragments":["thanks"]},{"Key":"srand, thanks","Fragments":["for"]},{"Key":"thanks for","Fragments":["that.","letting","clarifying.","reminding","your","your","your","pointing","the","pointing","the","the","the","the","sparking","the","helping","commenting!","the","clarifying.","the","your"]},{"Key":"for that.","Fragments":["I",":)","Stealing"]},{"Key":"that. I","Fragments":["had","will","guess","think","quickly","don't"]},{"Key":"had planned","Fragments":["to"]},{"Key":"planned to","Fragments":["call"]},{"Key":"call srand","Fragments":["only"]},{"Key":"srand only","Fragments":["one"]},{"Key":"only one","Fragments":["time","exit","parameter","random","string","file,","iteration","iteration","part","traversal","thing","cycle","line","statement","for","for","iteration","memory"]},{"Key":"one time","Fragments":["somewhere"]},{"Key":"time somewhere","Fragments":["else"]},{"Key":"somewhere else","Fragments":["and","that"]},{"Key":"else and","Fragments":["forgot"]},{"Key":"forgot what","Fragments":["I","class"]},{"Key":"- ('A\"","Fragments":["+"]},{"Key":"('A\" +","Fragments":["rand()%26)"]},{"Key":"+ rand()%26)","Fragments":["Thanks,"]},{"Key":"rand()%26) Thanks,","Fragments":["that's"]},{"Key":"Thanks, that's","Fragments":["a"]},{"Key":"that's a","Fragments":["lot","personal","lie","good","fair","typo.","rather","good","really"]},{"Key":"lot easier.","Fragments":["I"]},{"Key":"easier. I","Fragments":["didn't"]},{"Key":"didn't know","Fragments":["'+'","the","this","that","about","something","about","that.","`map\u003c\u003e`","about","that.","what","why.","the","about","that","about","about","about","```first_kday_after```","if","that","I","about"]},{"Key":"know '+'","Fragments":["was"]},{"Key":"'+' was","Fragments":["overloaded"]},{"Key":"was overloaded","Fragments":["for"]},{"Key":"overloaded for","Fragments":["chars","`std::string`,"]},{"Key":"for chars","Fragments":["like"]},{"Key":"chars like","Fragments":["that."]},{"Key":"that's done","Fragments":["with","in"]},{"Key":"done with","Fragments":["multiple","```#define```","`is_question`,","the","a","the","this","regex"]},{"Key":"with multiple","Fragments":["constructors.","variable"]},{"Key":" Name","Fragments":["only:"]},{"Key":" ```creature(string","Fragments":["name_)"]},{"Key":"```creature(string name_)","Fragments":[":"]},{"Key":"name_) :","Fragments":["name(name_),"]},{"Key":": name(name_),","Fragments":["how_it_is(\"\"),"]},{"Key":"name(name_), how_it_is(\"\"),","Fragments":["what_it_does(\"\"){};```"]},{"Key":" Instead","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of:","of","of","of:"]},{"Key":"Instead of","Fragments":["`bool","`if","using","`condition1","`condition1","`!(year","putting","writing","a","using","using","having","`if","building","a","++j","`!any_of()`","the","handling","```\u003c\u003c1```,","`using`,","a","explicitly","doing","incorrectly","checking","using","`(tmp","speech.at(speech.size()-1)","`for(unsigned","using","creating","a","using","copying"]},{"Key":"of `bool","Fragments":["result"]},{"Key":"`bool result","Fragments":["="]},{"Key":"result =","Fragments":["false;","true;","\"\"","std::string{\"\"};","do_hard_work();","{","0;","0","0","1","3","3","9","0","0","1","3","3","9","10","30","31","93","93","279"]},{"Key":"= false;","Fragments":["if","break;}"]},{"Key":"false; if","Fragments":["(condition)"]},{"Key":"if (condition)","Fragments":["result"]},{"Key":"(condition) result","Fragments":["="]},{"Key":"= true;","Fragments":["return"]},{"Key":"true; return","Fragments":["result;`","false;`"]},{"Key":"return result;`","Fragments":["some"]},{"Key":"result;` some","Fragments":["prefer"]},{"Key":"some prefer","Fragments":["`return"]},{"Key":"prefer `return","Fragments":["condition;`"]},{"Key":"`return condition;`","Fragments":["but","but"]},{"Key":"condition;` but","Fragments":["that","that"]},{"Key":"but that","Fragments":["is","is","is","is","made","might","looks","would","adds","is","LHS","has","doesn't","doesn't","seems","limits","is","would","single","could","means","kind","seems","was","really","kind","would","seemed","introduces","is","seemed","quickly","is","would"]},{"Key":"to some","Fragments":["extent","extent","extent","missed","constant.","large","checking","function","maximum","unsigned","unsigned","magic"]},{"Key":"some extent","Fragments":["depending","depending","a"]},{"Key":"extent depending","Fragments":["on","on"]},{"Key":"depending on","Fragments":["the","the","your","the","Boost","things","the","where","if","if","how"]},{"Key":"the personal","Fragments":["preferences","preferences"]},{"Key":"personal preferences","Fragments":["or","or"]},{"Key":"preferences or","Fragments":["the","the"]},{"Key":"the coding","Fragments":["standard.","standard."]},{"Key":" First","Fragments":["of","in","working","is","experience","you","off,","off,","off,","steps","thing","of","of","(quick)","iteration.","and","off,","impressions"]},{"Key":"First of","Fragments":["all:","all,","all","to"]},{"Key":"of all:","Fragments":["Your"]},{"Key":"all: Your","Fragments":["code"]},{"Key":"Your code","Fragments":["works","is","works","works","is","does","will","is","would","looks","fails","looks"]},{"Key":"code works","Fragments":["and","and","and","is","whether"]},{"Key":"and is","Fragments":["readable.","readable.","much","not","simple","readable,","clean,","nicely","slower","simply","more","less","less","more","now","a","guaranteed","therefore","no","shorter","probably"]},{"Key":" These","Fragments":["are","do","days"]},{"Key":"These are","Fragments":["the","of","implementation","constants,","equivalent"]},{"Key":"are the","Fragments":["two","return","same","contents","same.","same.","fastest","same","same.","same","same.","same","same","preferred","same","same","right","loop","same","global","same","same","same"]},{"Key":"two most","Fragments":["important"]},{"Key":"most important","Fragments":["properties"]},{"Key":"important properties","Fragments":["of"]},{"Key":"properties of","Fragments":["\"good","characters","map::operator[]","the"]},{"Key":"of \"good","Fragments":["code\"."]},{"Key":" Now","Fragments":["the","it's","that","`const`ier.","there","as","that","that","for","we've","for","you","the"]},{"Key":"Now the","Fragments":["nitpicks:","only"]},{"Key":"- To","Fragments":["keep","be"]},{"Key":"To keep","Fragments":["compile","it"]},{"Key":"keep compile","Fragments":["times","times"]},{"Key":"compile times","Fragments":["low,","and","lower","shorter"]},{"Key":"times low,","Fragments":["only"]},{"Key":"low, only","Fragments":["include"]},{"Key":"only include","Fragments":["the","forward"]},{"Key":"include the","Fragments":["headers","header","header","library","const","header.","`.h`","header","source","leading","size","header","proper","header","header,","first","\"using"]},{"Key":"the headers","Fragments":["that"]},{"Key":"headers that","Fragments":["you","you"]},{"Key":"that you","Fragments":["need.","don't","make","implemented","can","can","can","indeed","know","give","came","mention","use","think","calculate","would","then","don't","are","*could*","mention","can","can","either","grabbed","should","could","have","introduced","included","should","control","used","know","lose","tried","will","should","return","don't","seem","are","went","really","declare","reference","used","suggested.","are","have","can","used","chose","should","included","extracted","used","need","didn't","should","really","ignore","used","rely","thought","had","use","made","separated","could","put","qualify","could","may","had","use","should","implemented","used","suggested.","have","hard-coded","didn't","might","run","work","can","could","should","return","can","are","did","are","use","are","still","can","are","don't","shouldn't","could","really","can't","only","did","might","chose","should","used","might","might","used"]},{"Key":"you need.","Fragments":["`robot.h`","Actually,"]},{"Key":"need. `robot.h`","Fragments":["does"]},{"Key":"`robot.h` does","Fragments":["not"]},{"Key":"not need","Fragments":["`cstdlib`,","any","to","to","to","the","a","an","to","to","copies","to"]},{"Key":"need `cstdlib`,","Fragments":["`cstdio`,"]},{"Key":"`cstdlib`, `cstdio`,","Fragments":["and"]},{"Key":"`cstdio`, and","Fragments":["`ctime`."]},{"Key":"and `ctime`.","Fragments":["BTW:"]},{"Key":"`ctime`. BTW:","Fragments":["Your"]},{"Key":"BTW: Your","Fragments":["submission"]},{"Key":"Your submission","Fragments":["doesn't"]},{"Key":"submission doesn't","Fragments":["need"]},{"Key":"doesn't need","Fragments":["`cstdio`","to","to","to","to","to","to","to.","to","a","to","to","to","it's","to","to","to","to","to","to"]},{"Key":"need `cstdio`","Fragments":["at"]},{"Key":"`cstdio` at","Fragments":["all."]},{"Key":"- `using","Fragments":["std::string;`","namespace`","namespace"]},{"Key":"`using std::string;`","Fragments":["in"]},{"Key":"std::string;` in","Fragments":["a"]},{"Key":"a header","Fragments":["makes","is","makes","file","so","is","should","as","file.","file","so","include","-","file","then","file.","file.","file","due","file.","file.","file.","file."]},{"Key":"header makes","Fragments":["this","that"]},{"Key":"makes this","Fragments":["choice","exercise","whole","an","a","quite","really","not","bit"]},{"Key":"this choice","Fragments":["for","for","just"]},{"Key":"choice for","Fragments":["everyone","everyone","score_t.","everyone","that?"]},{"Key":"for everyone","Fragments":["using","who","who","who","including"]},{"Key":"everyone using","Fragments":["your"]},{"Key":"using your","Fragments":["header,","code,"]},{"Key":"your header,","Fragments":["so","but"]},{"Key":"header, so","Fragments":["e.g.","it"]},{"Key":"so e.g.","Fragments":["they"]},{"Key":"e.g. they","Fragments":["can't"]},{"Key":"they can't","Fragments":["do","easily","be"]},{"Key":"can't do","Fragments":["`using","harm","that","any"]},{"Key":"do `using","Fragments":["some_other_library::string;`","namespace"]},{"Key":"`using some_other_library::string;`","Fragments":["themselves."]},{"Key":"some_other_library::string;` themselves.","Fragments":["Generally:"]},{"Key":"themselves. Generally:","Fragments":["Keep"]},{"Key":"Generally: Keep","Fragments":["`using`"]},{"Key":"Keep `using`","Fragments":["directives"]},{"Key":"`using` directives","Fragments":["out"]},{"Key":"directives out","Fragments":["of"]},{"Key":"- Good:","Fragments":["You"]},{"Key":"Good: You","Fragments":["store"]},{"Key":"You store","Fragments":["the"]},{"Key":"store the","Fragments":["length","map.","map.","data?","result","result","raw","responses","10","count","strings","number","responses","longest","question","the","minutes","expressions"]},{"Key":"length of","Fragments":["the","the","the","the","the","the","the","the","the","the","the","the","your","strings","the","the","the","`\u0026text[last]`","less","the","the","zero,","strings.","4","the"]},{"Key":"the robot","Fragments":["in","class","name.","is"]},{"Key":"robot in","Fragments":["a"]},{"Key":"a constant.","Fragments":["Bad"]},{"Key":"constant. Bad","Fragments":["style:"]},{"Key":"Bad style:","Fragments":["You"]},{"Key":"style: You","Fragments":["keep"]},{"Key":"You keep","Fragments":["the","`robot::generateName()`"]},{"Key":"keep the","Fragments":["value","map.","map.","vector","grade","first","exception,","\"using","implementation","constant","loop,","code","number","sorting","design","number","math","functions"]},{"Key":"the constant","Fragments":["in","division","in","names","value"]},{"Key":"constant in","Fragments":["its","decimal"]},{"Key":"in its","Fragments":["name.","own","own","own","own","style.","translation","least-significant","name."]},{"Key":"its name.","Fragments":["If"]},{"Key":"name. If","Fragments":["one","you"]},{"Key":"If one","Fragments":["ever"]},{"Key":"one ever","Fragments":["wants"]},{"Key":"ever wants","Fragments":["to"]},{"Key":"wants to","Fragments":["change","call","know","inline"]},{"Key":"to change","Fragments":["`robot::ROBOT_NAME_LENGTH_5`","the","`alphabet`","the","your","it.","it","(OK,","any","your","every","the","\"for","much","anything","the","those","this","the","line","my"]},{"Key":"change `robot::ROBOT_NAME_LENGTH_5`","Fragments":["he"]},{"Key":"`robot::ROBOT_NAME_LENGTH_5` he","Fragments":["will"]},{"Key":"he will","Fragments":["have","be"]},{"Key":"will have","Fragments":["to","fewer","runtime","been","both","higher","comments.","undefined","access","to","to","to","to"]},{"Key":"change the","Fragments":["name","if","for","order","state.","result.","result,","`Creatures`","behavior","semantics","linkage,","string","name","data","rest","method","`for(int","return","condition","string","whole"]},{"Key":"the variable,","Fragments":["too,","you"]},{"Key":"variable, too,","Fragments":["to"]},{"Key":"too, to","Fragments":["keep"]},{"Key":"to keep","Fragments":["name","it","it","compile","the","it","this","it","recalculating","it","it","it","my","it","our","track","the","one","them","the","them","that","the","in","the","in","track","them","this","the","this","this","track","track","the","them","function","track","the","a","this","them.","`bob::hey`","commenting","it","it","that"]},{"Key":"keep name","Fragments":["and"]},{"Key":"name and","Fragments":["value","thought"]},{"Key":"and value","Fragments":["in","objects","estimates_"]},{"Key":"value in","Fragments":["sync.","return","the","the","my","line","the","every","the","the","more","the","a"]},{"Key":"You define","Fragments":["`robot::~robot()`","what"]},{"Key":"define `robot::~robot()`","Fragments":["as"]},{"Key":"`robot::~robot()` as","Fragments":["`{}`,"]},{"Key":"as `{}`,","Fragments":["i.e."]},{"Key":"`{}`, i.e.","Fragments":["the"]},{"Key":"the default","Fragments":["destructor.","case?","object","constructor","false.","verse","parameter","constructor.","value.","factors","constructor","constructor","position","constructor","(IIRC","argument.","constructor","value","(std::allocator)","implementation","constructor","is","```boost::tokenizer\u003c\u003e```","constructor","response."]},{"Key":"default destructor.","Fragments":["You"]},{"Key":"destructor. You","Fragments":["don't","can"]},{"Key":"do that.","Fragments":["Remove","(Also","You","You"]},{"Key":"that. Remove","Fragments":["that"]},{"Key":"Remove that","Fragments":["line,"]},{"Key":"that line,","Fragments":["code"]},{"Key":"line, code","Fragments":["that"]},{"Key":"that isn't","Fragments":["there","a","required","overloaded","obvious","a","visible","a"]},{"Key":"isn't there","Fragments":["is","already."]},{"Key":"is bugfree","Fragments":["code."]},{"Key":" Furthermore,","Fragments":["in"]},{"Key":"Furthermore, in","Fragments":["C++"]},{"Key":"in C++","Fragments":["there","to","to","because","than","you","(I","on","is","(my","and","code,","yet,","in","or","by","rather","for","yet.","terms","in","I"]},{"Key":"C++ there","Fragments":["is","is"]},{"Key":"a \"Rule","Fragments":["of"]},{"Key":"\"Rule of","Fragments":["Three\""]},{"Key":"of Three\"","Fragments":["(\"Rule"]},{"Key":"Three\" (\"Rule","Fragments":["of"]},{"Key":"(\"Rule of","Fragments":["Five\""]},{"Key":"of Five\"","Fragments":["since"]},{"Key":"Five\" since","Fragments":["C++11,"]},{"Key":"since C++11,","Fragments":["see","and"]},{"Key":"C++11, see","Fragments":["http://en.wikipedia.org/wiki/Rule_of_three_%28C%2B%2B_programming%29)."]},{"Key":"see http://en.wikipedia.org/wiki/Rule_of_three_%28C%2B%2B_programming%29).","Fragments":["It"]},{"Key":"http://en.wikipedia.org/wiki/Rule_of_three_%28C%2B%2B_programming%29). It","Fragments":["says,"]},{"Key":"It says,","Fragments":["if"]},{"Key":"says, if","Fragments":["you"]},{"Key":"you ever","Fragments":["*need*","come","encounter"]},{"Key":"ever *need*","Fragments":["to"]},{"Key":"*need* to","Fragments":["define"]},{"Key":"to define","Fragments":["a","the","i","`slice`","multiple","their","the","several"]},{"Key":"define a","Fragments":["destructor,","destructor).","class,","macro"]},{"Key":"a destructor,","Fragments":["a"]},{"Key":"destructor, a","Fragments":["copy"]},{"Key":"a copy","Fragments":["constructor,","of","anyway,","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","regardless.","of","of","like","of","(though","of","of","of","of","of","of","of","of","of","of","save","of","for","of","of","and","of","of","-","of","of","before","so","of","assigned","constructed","of","and","of","and"]},{"Key":"copy constructor,","Fragments":["or"]},{"Key":"constructor, or","Fragments":["an"]},{"Key":"or an","Fragments":["assignment","array","enum"]},{"Key":"an assignment","Fragments":["operator,","the"]},{"Key":"assignment operator,","Fragments":["you","or","both"]},{"Key":"operator, you","Fragments":["most","can"]},{"Key":"you most","Fragments":["likely"]},{"Key":"most likely","Fragments":["also","by","won't","use","use","not","change"]},{"Key":"likely also","Fragments":["want"]},{"Key":"also want","Fragments":["to","to","to","to","to"]},{"Key":"define the","Fragments":["other","responses","one-parameter","empty","returned"]},{"Key":"keep `robot::generateName()`","Fragments":["public,"]},{"Key":"`robot::generateName()` public,","Fragments":["which"]},{"Key":"public, which","Fragments":["means"]},{"Key":"which means","Fragments":["that","they","for","some","you"]},{"Key":"means that","Fragments":["it","you","`is_divisible()`","it","creating","your","I","if","the","code"]},{"Key":"that it","Fragments":["is","would","has","does","could've","was","avoids","looks","is","is","is","doesn't","is","was","never","would","will","might","is","would","seems","isn't","depends","could","limits","maintains","can","might","must","is","doesn't","will","doesn't","will","gains","can","was.","isn't","can","exists,","doesn't","works","doesn't","will","is","only","takes","works","reduces","would","works.","can","can","would've","can","is","will","needn't","exists.","justifies","would","doesn't","matched","matched","might","is","has","doesn't","would","is","is","is","be","falls","improves","doesn't","produces","builds","works","really","should","can","can","matters,"]},{"Key":"is now","Fragments":["part","O(n)","used","range","possible.","signalled","handled","handled","`phrase`","passed","comparing","in"]},{"Key":"now part","Fragments":["of"]},{"Key":"of `robot`.","Fragments":["From"]},{"Key":"`robot`. From","Fragments":["now"]},{"Key":"From now","Fragments":["on","I'll"]},{"Key":"now on","Fragments":["you"]},{"Key":"on you","Fragments":["if","would"]},{"Key":"you if","Fragments":["you","I","you","you","you"]},{"Key":"you change","Fragments":["its","versions","something"]},{"Key":"change its","Fragments":["signature,"]},{"Key":"its signature,","Fragments":["some"]},{"Key":"signature, some","Fragments":["code"]},{"Key":"some code","Fragments":["that","changes"]},{"Key":"that uses","Fragments":["it","`std::accumulate`","this","these","such"]},{"Key":"uses it","Fragments":["might","reasonably."]},{"Key":"not compile","Fragments":["any","anymore","on","this"]},{"Key":"compile any","Fragments":["more."]},{"Key":"any more.","Fragments":["You","As"]},{"Key":"more. You","Fragments":["even"]},{"Key":"You even","Fragments":["can't"]},{"Key":"even can't","Fragments":["change"]},{"Key":"can't change","Fragments":["what"]},{"Key":"change what","Fragments":["the"]},{"Key":"the method","Fragments":["generates,","you","on","as","calls","you","signature"]},{"Key":"method generates,","Fragments":["because"]},{"Key":"generates, because","Fragments":["someone"]},{"Key":"because someone","Fragments":["might"]},{"Key":"someone might","Fragments":["rely","look"]},{"Key":"might rely","Fragments":["on"]},{"Key":"rely on","Fragments":["it.","the","boost","a","the","ADL","that,","behavior","a","the","the","is","std::algorithms","built-in","```int```'s","the"]},{"Key":"on it.","Fragments":["Rule","I","It"]},{"Key":"it. Rule","Fragments":["of"]},{"Key":"of thumb:","Fragments":["Keep","if"]},{"Key":"thumb: Keep","Fragments":["the"]},{"Key":"Keep the","Fragments":["public"]},{"Key":"the public","Fragments":["and","API.","interface","interface","methods","interface","interface"]},{"Key":"public and","Fragments":["protected","private"]},{"Key":"and protected","Fragments":["part"]},{"Key":"protected part","Fragments":["of"]},{"Key":"class as","Fragments":["small","the"]},{"Key":"as small","Fragments":["as"]},{"Key":"small as","Fragments":["possible."]},{"Key":"- In","Fragments":["the","the"]},{"Key":"In the","Fragments":["definition","definition","Pling","case","constructor","first","second","second","first","original","start","constructor","['?']","C++","exercism.io","second","\"hey\"","scope","process","end,"]},{"Key":"the definition","Fragments":["of","of","of","of","of","of","is","to","is","of"]},{"Key":"definition of","Fragments":["`robot::generateName()`","`robot::generateName()`","valid","numerals?","the","hey","`word_count::words(std::string)'","the","\"int\"","`yell`","*compute(string"]},{"Key":"of `robot::generateName()`","Fragments":["you","the"]},{"Key":"`robot::generateName()` you","Fragments":["start"]},{"Key":"you start","Fragments":["by","unit_number","doing","to","your","making"]},{"Key":"start by","Fragments":["seeding"]},{"Key":"by seeding","Fragments":["the"]},{"Key":"seeding the","Fragments":["pseudo"]},{"Key":"random generator","Fragments":["with"]},{"Key":"generator with","Fragments":["the"]},{"Key":"the current","Fragments":["time.","exercise","test","assignment","string","source","behaviour.","version","`exercism`","`exercism`","value?","function.","position","digit","value","submission","locale.","prime","word","character","number","code"]},{"Key":"current time.","Fragments":["That"]},{"Key":"time. That","Fragments":["way"]},{"Key":"way every","Fragments":["time"]},{"Key":"every time","Fragments":["`robot::generateName()`","you","the","someone","I","a","you","I","`hey`","you","a","we"]},{"Key":"time `robot::generateName()`","Fragments":["is"]},{"Key":"`robot::generateName()` is","Fragments":["called"]},{"Key":"called within","Fragments":["the"]},{"Key":"same second,","Fragments":["`srand(...)`"]},{"Key":"second, `srand(...)`","Fragments":["is"]},{"Key":"`srand(...)` is","Fragments":["called"]},{"Key":"called with","Fragments":["the","an","non","a","one","bob::hey(\"Tom-ay-to,","the"]},{"Key":"value and","Fragments":["`rand()`","not","then","add","converts","return","not","I","parameter","handle","cause","`main()`"]},{"Key":"and `rand()`","Fragments":["produces"]},{"Key":"`rand()` produces","Fragments":["the"]},{"Key":"produces the","Fragments":["same"]},{"Key":"same sequence","Fragments":["of","of"]},{"Key":"sequence of","Fragments":["values.","robot","all","pairs"]},{"Key":"of values.","Fragments":["You","I"]},{"Key":"values. You","Fragments":["end","could"]},{"Key":"You end","Fragments":["up"]},{"Key":"end up","Fragments":["calling","erroneously","in","complicating","doing","in","happening","being","stripping","being","being","being","hiding","predicting","copying","interpreting","in","comparing"]},{"Key":"up calling","Fragments":["`rand()`","'throw"]},{"Key":"calling `rand()`","Fragments":["up"]},{"Key":"`rand()` up","Fragments":["to"]},{"Key":"up to","Fragments":["2.537.640","the","using","sqrt(n)","candidate,","me","is","3999999","2","length","string::npos","a","check","the","traverse","that","the","personal","the","this","me"]},{"Key":"to 2.537.640","Fragments":["times"]},{"Key":"2.537.640 times","Fragments":["instead"]},{"Key":"of 5035","Fragments":["times."]},{"Key":"You might","Fragments":["want","want","ask,","consider","want","consider","want","at","see,","also","want","like","want","get","like","want","also","also","also","use","also","include","also","also","just","consider","also","have","think"]},{"Key":"might want","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"to look","Fragments":["into","carefully","at","it","around","silly.","back","into","it","for","at,","out","out","at","into","for","at","at","out","for","up","into","at"]},{"Key":"look into","Fragments":["the","most","other","that","some","boost::tokenizer.","them.","the","the"]},{"Key":"number generators","Fragments":["of","static,"]},{"Key":"generators of","Fragments":["C++11."]},{"Key":"of C++11.","Fragments":["A","It's"]},{"Key":"C++11. A","Fragments":["good"]},{"Key":"A good","Fragments":["start","programmer","half"]},{"Key":"good start","Fragments":["is","on"]},{"Key":"start is","Fragments":["http://cpp.indi.frih.net/blog/2014/12/the-bell-has-tolled-for-rand/"]},{"Key":"`robot::generateName()` the","Fragments":["magic"]},{"Key":"the magic","Fragments":["number","numbers","string","strings"]},{"Key":"magic number","Fragments":["`52`"]},{"Key":"number `52`","Fragments":["appears."]},{"Key":"`52` appears.","Fragments":["If"]},{"Key":"appears. If","Fragments":["you"]},{"Key":"you use","Fragments":["`alphabet.size()`,",";).","a","```std:map\u003cstd::string,","the","a","*at*","```s.rend()```,","it.","c++,","the","it","\"all","--test","a","`std::array`","it","s","s","`auto","either","a","`std::vector::back`?","it","it","to","the","a","the","```StringView```","it","long","ranges,","a","it","an","`boost::lexical_cast\u003cstring\u003e()`","that","to_lower_copy","a","the","to","it","a","preincrementation","bool","erase/remove","call","a","`const","`const","a","a"]},{"Key":"use `alphabet.size()`,","Fragments":["the"]},{"Key":"`alphabet.size()`, the","Fragments":["code"]},{"Key":"code will","Fragments":["still","save","no","think","fail,","work","print","work"]},{"Key":"will still","Fragments":["work","work","point","not","work.","go"]},{"Key":"still work","Fragments":["if","the"]},{"Key":"work if","Fragments":["one"]},{"Key":"if one","Fragments":["decides","is","value","is","of","histogram","copy"]},{"Key":"one decides","Fragments":["to"]},{"Key":"decides to","Fragments":["change"]},{"Key":"change `alphabet`","Fragments":["to"]},{"Key":"`alphabet` to","Fragments":["only"]},{"Key":"to only","Fragments":["consist","count","traverse","be","walk","submit","using"]},{"Key":"only consist","Fragments":["of"]},{"Key":"consist of","Fragments":["upper"]},{"Key":"of upper","Fragments":["case","case","cases","cases","case"]},{"Key":"upper case","Fragments":["letters.","characters","character","char?","just","by","compare","characters,","letters","it,","against","letters,","letters","and","letters","letters","letters","letters","rather","and"]},{"Key":"- `input%4","Fragments":["=="]},{"Key":"`input%4 ==","Fragments":["0"]},{"Key":"== 0","Fragments":["\u0026\u0026","\u0026\u0026","\u0026\u0026","\u0026\u0026",")","\u0026\u0026","\u0026\u0026","\u0026\u0026","represents",")","well?","(malformed","if"]},{"Key":"0 \u0026\u0026","Fragments":["(input%100","input%400","input%100","(","year","(year","(year"]},{"Key":"\u0026\u0026 (input%100","Fragments":["!="]},{"Key":"(input%100 !=","Fragments":["0"]},{"Key":"!= 0","Fragments":["||","||","||","||","is,"]},{"Key":"0 ||","Fragments":["(input%100","year","year","year"]},{"Key":"|| (input%100","Fragments":["=="]},{"Key":"(input%100 ==","Fragments":["0"]},{"Key":"\u0026\u0026 input%400","Fragments":["=="]},{"Key":"input%400 ==","Fragments":["0))`","0`"]},{"Key":" can","Fragments":["be","I","i"]},{"Key":"be simplified","Fragments":["to","to","to","if","to"]},{"Key":" `(input%4","Fragments":["=="]},{"Key":"`(input%4 ==","Fragments":["0"]},{"Key":"\u0026\u0026 input%100","Fragments":["!="]},{"Key":"input%100 !=","Fragments":["0)"]},{"Key":"!= 0)","Fragments":["||","\u0026\u0026","||","||","{","{"]},{"Key":"0) ||","Fragments":["input%400","(!(year","((year"]},{"Key":"|| input%400","Fragments":["=="]},{"Key":"- Instead","Fragments":["of"]},{"Key":"of `if","Fragments":["(condition)","(a","(valid_11_digit_number(digits))`"]},{"Key":"`if (condition)","Fragments":["return"]},{"Key":"(condition) return","Fragments":["true;"]},{"Key":"return true;","Fragments":["else","else","else","else","return"]},{"Key":"true; else","Fragments":["return","return","return","return"]},{"Key":"else return","Fragments":["false;`","false;","false;","...","false;","...","false;`."]},{"Key":"return false;`","Fragments":["some","or","to"]},{"Key":"false;` some","Fragments":["prefer"]},{"Key":" `return","Fragments":["condition;`","(","year","year","boost::all(input,","!boost::all(input,"]},{"Key":"are too","Fragments":["many","large?","long.","many"]},{"Key":"too many","Fragments":["round","details.","to","ways","(any?)"]},{"Key":"many round","Fragments":["brackets"]},{"Key":"round brackets","Fragments":["in","should"]},{"Key":"brackets in","Fragments":["the"]},{"Key":"the the","Fragments":["code","feedback","string,","song","old","\"Fine"]},{"Key":"that reduce","Fragments":["readability:"]},{"Key":"`return (","Fragments":["(year"]},{"Key":"( (year","Fragments":["%"]},{"Key":"(year %","Fragments":["4)","400)","100","100"]},{"Key":"% 4)","Fragments":["==","?","?","?","\u0026\u0026",":"]},{"Key":"4) ==","Fragments":["0"]},{"Key":"\u0026\u0026 (","Fragments":["(!((year"]},{"Key":"( (!((year","Fragments":["%"]},{"Key":"(!((year %","Fragments":["100)"]},{"Key":"% 100)","Fragments":["==","==","?","?","||","||","?"]},{"Key":"100) ==","Fragments":["0))","0)`"]},{"Key":"== 0))","Fragments":["||"]},{"Key":"0)) ||","Fragments":["(year"]},{"Key":"|| (year","Fragments":["%"]},{"Key":"% 400)","Fragments":["==","?"]},{"Key":"400) ==","Fragments":["0"]},{"Key":"0 )","Fragments":[");`","return"]},{"Key":"you replace","Fragments":["`!((year","the","the"]},{"Key":"replace `!((year","Fragments":["%"]},{"Key":"`!((year %","Fragments":["100)"]},{"Key":"== 0)`","Fragments":["with","you","since"]},{"Key":"0)` with","Fragments":["`year"]},{"Key":"with `year","Fragments":["%"]},{"Key":"`year %","Fragments":["100","4","4","100","4"]},{"Key":"% 100","Fragments":["!=","!=","!=","!=","!=","!=","==","!="]},{"Key":"100 !=","Fragments":["0`","0","0","0)","0)","0","0`."]},{"Key":"!= 0`","Fragments":["technically"]},{"Key":"0` technically","Fragments":["that"]},{"Key":"technically that","Fragments":["expression"]},{"Key":"that expression","Fragments":["does"]},{"Key":"expression does","Fragments":["not","not"]},{"Key":"need any","Fragments":["braces:"]},{"Key":"`return year","Fragments":["%","%"]},{"Key":"year %","Fragments":["4","100","400","4","400","400","x","400`"]},{"Key":"% 4","Fragments":["==","==","==","!=","==","==","=="]},{"Key":"4 ==","Fragments":["0","0","0`,","0)","0","0`"]},{"Key":"\u0026\u0026 year","Fragments":["%"]},{"Key":"|| year","Fragments":["%","%","%"]},{"Key":"% 400","Fragments":["==","==","!=","==","=="]},{"Key":"400 ==","Fragments":["0;`","0);`","0))));`","0);`"]},{"Key":"avoid compiler","Fragments":["warnings,"]},{"Key":"compiler warnings,","Fragments":["assist","I"]},{"Key":"warnings, assist","Fragments":["coworkers"]},{"Key":"assist coworkers","Fragments":["that"]},{"Key":"coworkers that","Fragments":["do"]},{"Key":"that do","Fragments":["not","not","or","one"]},{"Key":"do not","Fragments":["know","represent","think","need","exist.","know","know","think","take","understand","get","know","want","want","need","use","use","check","improve","know","modify","use","see","use","need","even"]},{"Key":"not know","Fragments":["the","why","the","though","about","if","that!","about","the","about","before","how","about","about"]},{"Key":"know the","Fragments":["precedence","tests","word","compiler","C++","final","arity","libraries","difference.","arguments","standard","answer","complete","string"]},{"Key":"the precedence","Fragments":["of"]},{"Key":"precedence of","Fragments":["`\u0026\u0026`"]},{"Key":"of `\u0026\u0026`","Fragments":["over"]},{"Key":"`\u0026\u0026` over","Fragments":["`||`,"]},{"Key":"over `||`,","Fragments":["and"]},{"Key":"`||`, and","Fragments":["to"]},{"Key":"and to","Fragments":["increase","differ","use","avoid","use","describe","factor","check","restrict","the","search"]},{"Key":"to increase","Fragments":["readability,","the","the","readability.","readability."]},{"Key":"increase readability,","Fragments":["one"]},{"Key":"readability, one","Fragments":["level"]},{"Key":"one level","Fragments":["of","or","doesn't"]},{"Key":"level of","Fragments":["round","maintainability.","the","suggestion","abstraction.","dumbassery,","optimization."]},{"Key":"of round","Fragments":["brackets"]},{"Key":"brackets should","Fragments":["do:"]},{"Key":"\u0026\u0026 (year","Fragments":["%","%"]},{"Key":" `leap::is_leap_year","Fragments":["(...)`"]},{"Key":"`leap::is_leap_year (...)`","Fragments":["does"]},{"Key":"(...)` does","Fragments":["not"]},{"Key":"not return","Fragments":["a","0","a"]},{"Key":"a value","Fragments":["if","\u003c","was","parameter,","of","of","copy","in","later.","and","as","and","if"]},{"Key":"value if","Fragments":["called","the","the","the","it"]},{"Key":"if called","Fragments":["with","on"]},{"Key":"an integer","Fragments":["that","other"]},{"Key":"integer that","Fragments":["is"]},{"Key":"not divisible","Fragments":["by","by"]},{"Key":"divisible by","Fragments":["`4`.","another","4","a","it's","400\","]},{"Key":"by `4`.","Fragments":["I"]},{"Key":"`4`. I","Fragments":["guess"]},{"Key":"guess you","Fragments":["meant","wrote","only","thought","are","are","could","could","could"]},{"Key":"you meant","Fragments":["to","that","new","boost/algorithm/string.hpp?"]},{"Key":"meant to","Fragments":["write","be","imply","put","be","refer","use","explicitly","say","be","be","function"]},{"Key":"to write","Fragments":["`else","your","positives","a","a","the","my","``space_age","a","clean","and","and","scalable","function","as","a","std::string","that","`1","a","```std::size_t```?","and","namespaced","a","a","my","four","`hey()`","C++","something","loops","a","an",":)","a","a","and","my","my","\"clever\"","due","just","`vector\u003cstring\u003e::const_iterator`,","functions","std::vector"]},{"Key":"write `else","Fragments":["return"]},{"Key":"`else return","Fragments":["false;`"]},{"Key":"false;` or","Fragments":["simply"]},{"Key":"or simply","Fragments":["`return","a"]},{"Key":"simply `return","Fragments":["false`","vector\u003cstring\u003e();`","plus(-min);`"]},{"Key":"`return false`","Fragments":["at"]},{"Key":"false` at","Fragments":["the"]},{"Key":"the end","Fragments":["of","of","it","by","of","of","of","of","of","of","(or","the","I","of","before","of","would","then","of","might","of","of","of","the","of","of","of","iterator,"]},{"Key":"end of","Fragments":["the","the","each","words.","the","the","a","a","a","it.","the","the","string.","string.","the","the","alpha-numerical","words","alpha-numerical","\"longword\"","words.","said","every","the","either","a","it,","this,","the"]},{"Key":"you wrote","Fragments":["`static","(and","your"]},{"Key":"wrote `static","Fragments":["class`"]},{"Key":"`static class`","Fragments":["coming","that"]},{"Key":"class` coming","Fragments":["from"]},{"Key":"coming from","Fragments":["C#","a","Python,","a","Python,","another"]},{"Key":"from C#","Fragments":["or"]},{"Key":"C# or","Fragments":["Java."]},{"Key":"or Java.","Fragments":["In"]},{"Key":"Java. In","Fragments":["C++"]},{"Key":"In C++","Fragments":["there","it","it","I"]},{"Key":"no `static","Fragments":["class`"]},{"Key":"class` that","Fragments":["can"]},{"Key":"that can","Fragments":["only","only","generate","tell","accept","hold","be","simplify","be","perform","help","handle","be","be"]},{"Key":"can only","Fragments":["have","upload","be","be","return","return","return","return","return","return","use","be","be","see","return","have"]},{"Key":"only have","Fragments":["`static`","two","two","one","to","ops","to","a","one","to"]},{"Key":"have `static`","Fragments":["members,"]},{"Key":"`static` members,","Fragments":["but"]},{"Key":"members, but","Fragments":["there"]},{"Key":"but there","Fragments":["are","has","aren't","are","is","are","is","are","are","were","is","a"]},{"Key":"are several","Fragments":["alternatives:"]},{"Key":"- `class","Fragments":["leap`"]},{"Key":"`class leap`","Fragments":["where"]},{"Key":"leap` where","Fragments":["you","everything"]},{"Key":"where you","Fragments":["make","have","iterate","identify","need","include","noticeably","use","could","tried","basically","yell","only","have","would"]},{"Key":"you make","Fragments":["all","this","a","all","`boost::gregorian::days(kOneGigaSecond","a","it","a","one","with","a","use","the","makemap","for"]},{"Key":"make all","Fragments":["members","the","our","the","my","my","my","my"]},{"Key":"all members","Fragments":["`public","are"]},{"Key":"members `public","Fragments":["static`"]},{"Key":"`public static`","Fragments":["(in","method"]},{"Key":"static` (in","Fragments":["fact,"]},{"Key":"(in fact,","Fragments":["that"]},{"Key":"fact, that","Fragments":["*is*","flagging","I","I"]},{"Key":"that *is*","Fragments":["your"]},{"Key":"*is* your","Fragments":["solution)"]},{"Key":"- `struct","Fragments":["leap`"]},{"Key":"`struct leap`","Fragments":["where"]},{"Key":"where everything","Fragments":["is"]},{"Key":"everything is","Fragments":["`public`","not","as","public","readily","a"]},{"Key":"is `public`","Fragments":["by"]},{"Key":"`public` by","Fragments":["default"]},{"Key":"- `namespace","Fragments":["leap`"]},{"Key":"`namespace leap`","Fragments":["if"]},{"Key":"leap` if","Fragments":["you"]},{"Key":"don't need","Fragments":["to","the","to","the","the","to","to","to","to","``blank``","two","to","to","to","to","to","to","to","non-const","to","that","to","to","to","to","to","```math","to","to","the","to","the","the","the","to","the","an","the","to","to","distinct","to","an","a","the","the","the","the","to","to","the","their","to","to","to","to","to","to","to","to","to","the","a","to","a","to","to","a"]},{"Key":"use `leap`","Fragments":["as"]},{"Key":"`leap` as","Fragments":["a"]},{"Key":"a template","Fragments":["parameter.","function,","function.","parameter","function.","function","function,","function.","function,","function","function","function.","*just*"]},{"Key":" `!(year","Fragments":["%"]},{"Key":"`!(year %","Fragments":["4)`","100"]},{"Key":"% 4)`","Fragments":["might"]},{"Key":"4)` might","Fragments":["be"]},{"Key":"be harder","Fragments":["to"]},{"Key":"to read","Fragments":["for","and","about","solution.","for","this.","and","and","everything","you","the","strings","and","and","too.","'return","outside","and","and","comments","and","the","to","private","and","the","the","http://help.exercism.io/getting-started-with-cpp.html","to","in","that","than","since","if","with","and","if","in","and"]},{"Key":"read for","Fragments":["junior","someone"]},{"Key":"for junior","Fragments":["developers"]},{"Key":"junior developers","Fragments":["than","might"]},{"Key":"developers than","Fragments":["`year"]},{"Key":"than `year","Fragments":["%"]},{"Key":"== 0`,","Fragments":["but"]},{"Key":"0`, but","Fragments":["that"]},{"Key":"extent a","Fragments":["matter"]},{"Key":"a matter","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"matter of","Fragments":["personal","good","style,","seconds,","personal","preference","preference,","principle","taste","style","getting","readability,","peeling","style"]},{"Key":"of personal","Fragments":["choice.","preference,","habit","preference."]},{"Key":"The boolean","Fragments":["expression"]},{"Key":"boolean expression","Fragments":["is","controlling","of","of"]},{"Key":"expression is","Fragments":["not","0."]},{"Key":"not very","Fragments":["readable.","maintainable","responsive","natural","descriptive,","descriptive","strong.","many","helpful:","good","efficient"]},{"Key":" `(!(year","Fragments":["%","%","%","%","%"]},{"Key":"`(!(year %","Fragments":["4)","4)","4)","4)","4"]},{"Key":"4) ?","Fragments":["(!(year","(!(year","((year"]},{"Key":"? (!(year","Fragments":["%","%","%","%"]},{"Key":"(!(year %","Fragments":["100)","400)","100)","400))","400)))","400))));`","400"]},{"Key":"100) ?","Fragments":["(!(year","(!(year","!(year"]},{"Key":"400) ?","Fragments":["true"]},{"Key":"? true","Fragments":[":",":"]},{"Key":"true :","Fragments":["false)","false`","false\""]},{"Key":": false)","Fragments":[":"]},{"Key":"false) :","Fragments":["true"]},{"Key":": true","Fragments":[")",")"]},{"Key":"true )","Fragments":[":",":"]},{"Key":") :","Fragments":["false)`","false);","dnaCounts_"]},{"Key":"the ternary","Fragments":["operator","operator","operator","operator","operator,","operator","the","operator","operator"]},{"Key":"ternary operator","Fragments":["like","after","like","over","to","it","a","to"]},{"Key":"operator like","Fragments":["`condition","that"]},{"Key":"like `condition","Fragments":["?"]},{"Key":"`condition ?","Fragments":["true"]},{"Key":": false`","Fragments":["you","you"]},{"Key":"false` you","Fragments":["can","can"]},{"Key":"can simply","Fragments":["use","san","ignore","be","increment.","write:","write","return"]},{"Key":"simply use","Fragments":["`condition`.","the","a","a"]},{"Key":"% 400))","Fragments":[":"]},{"Key":"400)) :","Fragments":["true"]},{"Key":": false);","Fragments":["`","`"]},{"Key":"of `condition1","Fragments":["?","?"]},{"Key":"`condition1 ?","Fragments":["condition2","condition2"]},{"Key":"? condition2","Fragments":[":",":"]},{"Key":"condition2 :","Fragments":["true`","false`"]},{"Key":": true`","Fragments":["you"]},{"Key":"true` you","Fragments":["can"]},{"Key":"use `!condition1","Fragments":["||"]},{"Key":"`!condition1 ||","Fragments":["condition2`."]},{"Key":"? ((year","Fragments":["%"]},{"Key":"((year %","Fragments":["100)","100)","100","100","400"]},{"Key":"100) ||","Fragments":["(!(year","(!(year"]},{"Key":"|| (!(year","Fragments":["%","%","%"]},{"Key":"% 400)))","Fragments":[":"]},{"Key":"400))) :","Fragments":["false);"]},{"Key":"use `condition1","Fragments":["\u0026\u0026"]},{"Key":"`condition1 \u0026\u0026","Fragments":["condition2`."]},{"Key":"4) \u0026\u0026","Fragments":["((year"]},{"Key":"\u0026\u0026 ((year","Fragments":["%","%","%"]},{"Key":"Some junior","Fragments":["developers"]},{"Key":"developers might","Fragments":["have"]},{"Key":"might have","Fragments":["trouble","added","even","an","good","to","a","to","impact","been","noticed","some","been","been","included","inlined"]},{"Key":"have trouble","Fragments":["with","with"]},{"Key":"trouble with","Fragments":["the","removal"]},{"Key":"the boolean","Fragments":["evaluation","result","result","expression","expression"]},{"Key":"boolean evaluation","Fragments":["of"]},{"Key":"evaluation of","Fragments":["`(a"]},{"Key":"of `(a","Fragments":["%"]},{"Key":"`(a %","Fragments":["b)`.","b","b"]},{"Key":"% b)`.","Fragments":["You"]},{"Key":"b)`. You","Fragments":["can"]},{"Key":"can replace","Fragments":["it","`trim_left`","'std::string'","lines","the"]},{"Key":"with `(a","Fragments":["%"]},{"Key":"% b","Fragments":["!=","!=","=="]},{"Key":"b !=","Fragments":["0)`...","0)`"]},{"Key":"4 !=","Fragments":["0)"]},{"Key":"0) \u0026\u0026","Fragments":["((year","((year"]},{"Key":"400 !=","Fragments":["0))));`"]},{"Key":" ...","Fragments":["and","and"]},{"Key":"... and","Fragments":["simplify","vice","it","some"]},{"Key":"and simplify","Fragments":["`!(a"]},{"Key":"simplify `!(a","Fragments":["%"]},{"Key":"`!(a %","Fragments":["b"]},{"Key":"!= 0)`","Fragments":["to"]},{"Key":"0)` to","Fragments":["`(a"]},{"Key":"to `(a","Fragments":["%"]},{"Key":"b ==","Fragments":["0)`."]},{"Key":" `((year","Fragments":["%"]},{"Key":"`((year %","Fragments":["4"]},{"Key":"== 0)","Fragments":["\u0026\u0026","{","break;`"]},{"Key":"|| ((year","Fragments":["%"]},{"Key":" Last,","Fragments":["you","the"]},{"Key":"Last, you","Fragments":["can"]},{"Key":"can remove","Fragments":["unneccessary","1st","the","the","```school();```","them.","the"]},{"Key":"remove unneccessary","Fragments":["round"]},{"Key":"unneccessary round","Fragments":["brackets:"]},{"Key":" `year","Fragments":["%"]},{"Key":"But if","Fragments":["you","your","you're","it","I","you","exercism","they're","you","you","I'd"]},{"Key":"you prefer","Fragments":["the","explicit","to","one"]},{"Key":"prefer the","Fragments":["ternary","switch","latter.","prefix","pragma","```StringView```","modern","modern","presentation","boost::algorithm","second","latter","shorter","style:"]},{"Key":"operator after","Fragments":["all,"]},{"Key":"after all,","Fragments":["you"]},{"Key":"all, you","Fragments":["still"]},{"Key":"you still","Fragments":["can","would","have","working","need"]},{"Key":"still can","Fragments":["simplify"]},{"Key":"can simplify","Fragments":["that","`getTrimmedString`","`if(strInputSentence.empty())"]},{"Key":"simplify that","Fragments":["expression:","section"]},{"Key":" `(year","Fragments":["%"]},{"Key":"`(year %","Fragments":["100)"]},{"Key":"? !(year","Fragments":["%"]},{"Key":"!(year %","Fragments":["4)","400);`"]},{"Key":"4) :","Fragments":["!(year"]},{"Key":": !(year","Fragments":["%"]},{"Key":"You include","Fragments":["a"]},{"Key":"include a","Fragments":["lot","commented"]},{"Key":"lot of","Fragments":["headers","typing.","memory","allocations","difference","the","repeated","manual","sense","the","ways","non-security-conscious","issues","thought","good","the","programmers","existing","development","copies","cases","sense","my","times","`#define`s.","implementation","memory),","combing","them","wasted","people","branching","bool","people","things","overhead","setup","sense.","scrolling","processing","processing","work","mileage","code","people","const","string","room","cases.","processing","comparisons","reallocations","names","solutions","generally","clarity","time","\"anagram\"s,","maintainability","good.","good\"?","names!","small"]},{"Key":"of headers","Fragments":["that"]},{"Key":"don't need.","Fragments":["This","So","When"]},{"Key":"need. This","Fragments":["will"]},{"Key":"This will","Fragments":["increase","allow","save","loop","give","make","create","make","make","make","avoid","also","overflow","avoid","be"]},{"Key":"will increase","Fragments":["compile","readability.","the"]},{"Key":"increase compile","Fragments":["times"]},{"Key":"and make","Fragments":["your","a","that","sure","it","great","some","it","it"]},{"Key":"make your","Fragments":["coworkers","eyes","life","loop","code","code","code","code","loop","for","LowerCase"]},{"Key":"your coworkers","Fragments":["wonder"]},{"Key":"coworkers wonder","Fragments":["how"]},{"Key":"how complex","Fragments":["your","that"]},{"Key":"complex your","Fragments":["initial"]},{"Key":"your initial","Fragments":["approach","implementation."]},{"Key":"initial approach","Fragments":["was."]},{"Key":"approach was.","Fragments":["You"]},{"Key":"was. You","Fragments":["actually"]},{"Key":"You actually","Fragments":["only"]},{"Key":"actually only","Fragments":["need","storing","the"]},{"Key":"only need","Fragments":["`string`","to","to","to","`bool","the","to","it","to","string)","to"]},{"Key":"need `string`","Fragments":["and"]},{"Key":"`string` and","Fragments":["`stdexcept`."]},{"Key":"`using namespace`","Fragments":["in","in","out"]},{"Key":"namespace` in","Fragments":["a","a"]},{"Key":"header is","Fragments":["bad","actually","not","already","in","a"]},{"Key":"is bad","Fragments":["style,","or","but"]},{"Key":"bad style,","Fragments":["because"]},{"Key":"style, because","Fragments":["it"]},{"Key":"it means","Fragments":["that","that","something","it","the","in"]},{"Key":"make this","Fragments":["choice","more","fast","more","comparison","much","somewhat","work","a","function","function","code","as","even","code","easier","clear","faster,","consistent...","easier.","substitution","a"]},{"Key":"everyone who","Fragments":["is","is","includes","is","is","is","is","uses"]},{"Key":"who is","Fragments":["including","including","used","including","including","including","including"]},{"Key":"is including","Fragments":["it.","it.","them.","your","it.","it."]},{"Key":"including it.","Fragments":["It","Don't"]},{"Key":"it. It","Fragments":["might","may","communicates","does","has"]},{"Key":"might prevent","Fragments":["them"]},{"Key":"prevent them","Fragments":["from"]},{"Key":"them from","Fragments":["writing","header"]},{"Key":"from writing","Fragments":["`using"]},{"Key":"writing `using","Fragments":["another_namespace;`"]},{"Key":"`using another_namespace;`","Fragments":["if"]},{"Key":"another_namespace;` if","Fragments":["two"]},{"Key":"if two","Fragments":["members","strings","different","source","words","words"]},{"Key":"two members","Fragments":["of"]},{"Key":"the different","Fragments":["namespaces","logical","special","parts","types","iterators.","available","reactions","responses.","possible","input"]},{"Key":"different namespaces","Fragments":["have"]},{"Key":"namespaces have","Fragments":["the"]},{"Key":"have the","Fragments":["same","same","member","same","repeatedly","false","prefix","same","potential","semantics","class","ambition","same","parameter","limitation","current","include","check","iterators,","naming","wrong","tradeoff","same","same","functions","same","same","usual","same","transform","advantage","same","initial","whole","3rd","latest","latest","string","\"using"]},{"Key":"You pass","Fragments":["the"]},{"Key":"pass the","Fragments":["strings","parameter","test","last","last","test","given","test","Foo","substring","tests","tests.","tests.","first","tests","test.","tests.","strings","two","strings","tests","ones","last","last"]},{"Key":"strings by","Fragments":["value","const","value","pointer","value","const","reference"]},{"Key":"by value","Fragments":["(`string","and","makes","and","or","currently.","again","means","as","means),","as","in","/","-","and","and","instead"]},{"Key":"value (`string","Fragments":["a,"]},{"Key":"(`string a,","Fragments":["string"]},{"Key":"a, string","Fragments":["b`)"]},{"Key":"string b`)","Fragments":["which"]},{"Key":"b`) which","Fragments":["means"]},{"Key":"means they","Fragments":["are"]},{"Key":"they are","Fragments":["now","very","not","in","more","intertwined","first","constants.","the","the","not","defined","not","(totally)","used","syntactically","completely","used.","used,","nice","simple","in","purely","the","returning","the","more","not","is","a","at","the","probably"]},{"Key":"are now","Fragments":["copies","safe","passed","one"]},{"Key":"now copies","Fragments":["of"]},{"Key":"copies of","Fragments":["the","the","the","the","the","the","the","everything","strings","the","the","the","the","the","data","the","the","the","the","the","the","the"]},{"Key":"the original","Fragments":["parameters.","character","string.","string","string,","string","string","spelling","in","to","string?","sorted","author","function","version","string;","word","to","word","string.","and","word.","word","string","word.","function","test","word","sorted","(instead","string,","(instead"]},{"Key":"original parameters.","Fragments":["You"]},{"Key":"parameters. You","Fragments":["don't"]},{"Key":"don't modify","Fragments":["them,","`prompt`"]},{"Key":"modify them,","Fragments":["so"]},{"Key":"them, so","Fragments":["you"]},{"Key":"so you","Fragments":["don't","have","don't","might","should","can","don't","know","could","can","don't","can","can't","could","can","can","can","don't","can","don't","can","could","won't","can","don't","can","can","may","can","could","can","dont","could","could","could","may","still","could","can","know,"]},{"Key":"have to.","Fragments":["Simply"]},{"Key":"to. Simply","Fragments":["write"]},{"Key":"Simply write","Fragments":["`const"]},{"Key":"write `const","Fragments":["string\u0026"]},{"Key":"`const string\u0026","Fragments":["a,","strand`","input`","prompt`","sentence`","respond","sentence`","respond","respond(const","sentence`","respond(const","bob::hey(cosnt","sentence`"]},{"Key":"string\u0026 a,","Fragments":["const"]},{"Key":"a, const","Fragments":["string\u0026"]},{"Key":"const string\u0026","Fragments":["b`.","as"]},{"Key":"of `!(year","Fragments":["%"]},{"Key":"100 ==","Fragments":["0)`"]},{"Key":"0)` you","Fragments":["can"]},{"Key":"can write","Fragments":["`year","more","begin()/end()","`none_of()`","something","very"]},{"Key":"write `year","Fragments":["%"]},{"Key":" Done.","Fragments":["I"]},{"Key":"Done. I","Fragments":["suppose"]},{"Key":"I suppose","Fragments":["the","needing","one","the","I","you","`const","one","one","an","that","these","it","it","if","the","it's"]},{"Key":"suppose the","Fragments":["bool","excersize","word"]},{"Key":"bool var","Fragments":["was"]},{"Key":"var was","Fragments":["a"]},{"Key":"was a","Fragments":["result","bit","yell","really","problem","happy","bit","fun","managed","better","little","bit","`class`","lot","test","grid","bit","nice","standard","weird","bit","non-owning","class","couple","symbolic","lazy","little","pain","pointless","random","bit","functor,","false","bit","string","really","constructor"]},{"Key":"a result","Fragments":["of","of","word","word"]},{"Key":"of thinking","Fragments":["that","recusively"]},{"Key":"thinking that","Fragments":["it","I","the"]},{"Key":"would become","Fragments":["a","`for(int"]},{"Key":"become a","Fragments":["switch","problem","lot","very"]},{"Key":"switch statement.","Fragments":["However,","Same"]},{"Key":"statement. However,","Fragments":["with"]},{"Key":"However, with","Fragments":["the"]},{"Key":"logic on","Fragments":["a"]},{"Key":"on a","Fragments":["single","map","mathmatical","processor","12","whitelist","single","second","64-bit","Mac,","for-fun","const","second","vector","tangent...","short","platform","position","dedicated","given","reference,","```std::sting```","random","realistic","passwordlist","unrelated","run","register.","transform","new","first","std::string","daily","standard","`char`","type","named","map","chessboard.","string","successful","copy","good"]},{"Key":"single line,","Fragments":["I","such"]},{"Key":"line, I","Fragments":["agree"]},{"Key":"I agree","Fragments":["that","with","that","that","that","when","with","that","with","it'll","with","it's","that","with","there","that","that","`uint32_t`","that","with","that","that","that","with","with","that","with","that","it","that","that","that","with","is","about","with","with"]},{"Key":"agree that","Fragments":["returning","the","they","it","it's","the","handling","additional","your","it's","`is_shouty`","probably","**bob**","it's","using","checking","well","the","fro","for","the","submitting","snprintf","there","globals"]},{"Key":"the condition","Fragments":["is","into","just","where","Is","to","`shouting"]},{"Key":"condition is","Fragments":["preferable.","different","not","equivalent"]},{"Key":"This submission","Fragments":["looks"]},{"Key":"submission looks","Fragments":["a"]},{"Key":"looks a","Fragments":["bit","lot","bit","lot","lot","little","bit"]},{"Key":"bit ...","Fragments":["too"]},{"Key":"... too","Fragments":["minimal"]},{"Key":"too minimal","Fragments":[";-)"]},{"Key":" Your","Fragments":["solution","implementation","`checkForYelling()`","idea","trim","code","code","suggestion","return","code","fix,","code","first","loop","reasons","parameter","string","function","`pow_three()`","accumulator","logic","code","last","implementation","approach","implementation","a","solution","verses","to_lower","implementation","string","functions","code","use","include","approach","solution","functions","implementation","function","flag","helper","solution","if's","`map`","functions","question","code","code"]},{"Key":"Your solution","Fragments":["works,","does","looks","looks"]},{"Key":"solution works,","Fragments":["is"]},{"Key":"works, is","Fragments":["small"]},{"Key":"is small","Fragments":["and","and"]},{"Key":"small and","Fragments":["readble.","simple.","correctly"]},{"Key":"could further","Fragments":["minimize"]},{"Key":"further minimize","Fragments":["it"]},{"Key":"minimize it","Fragments":["by"]},{"Key":"it by","Fragments":["using","hand.","hand,","just","a","reference,","value.","value","value,"]},{"Key":"by using","Fragments":["`namespace`","O(n)","`boost::all`","stuff","stuff","stuff","stuff","stuff","stuff","standard","`std::map::at`","\"else","multiple","```boost/random```.","`regex_iterator`you","stuff","[`std::all_of`,","stuff","stuff","stuff","stuff","the","the","the","the","bitwise-or","your","std::accumulate","I/O","a","```const","some","more","regex","an","the","boost.","[]","an","some"]},{"Key":"using `namespace`","Fragments":["instead"]},{"Key":"`namespace` instead","Fragments":["of"]},{"Key":"like that","Fragments":["you","found","you're","test","it","it","is","you","you","-","-","was","is","semicolon","it","talk.","you","you","the","you're","on","you","you","you","since","for","(all","you're","you","you","now","idea.","your","you","you","you","and","you","you've","the","you've","you've","you","you","you've","you've","it","that","you"]},{"Key":"you implemented","Fragments":["the","a"]},{"Key":"implemented the","Fragments":["closed"]},{"Key":"the closed","Fragments":["form","algorithm"]},{"Key":"closed form","Fragments":["algorithm","rule"]},{"Key":"form algorithm","Fragments":["for"]},{"Key":"the square","Fragments":["of","root","root"]},{"Key":"square of","Fragments":["sums"]},{"Key":"of sums","Fragments":["and"]},{"Key":"sums and","Fragments":["the"]},{"Key":"the sum","Fragments":["of","of","of"]},{"Key":"sum of","Fragments":["squares.","the","all","a","150,","the"]},{"Key":"of squares.","Fragments":["Given"]},{"Key":"squares. Given","Fragments":["that,"]},{"Key":"Given that,","Fragments":["your","I"]},{"Key":"that, your","Fragments":["implementation","implementation"]},{"Key":"your implementation","Fragments":["is","of","of","to","cpp.","file","is","is","with","I","of","of"]},{"Key":"and simple.","Fragments":["Great.","If","I"]},{"Key":" In","Fragments":["`math.h`","short:","short:","```count```,","`checkForQuestion()`","general,","a","a","essence","file","your","hindsight,","fact,","this","summary,","C++03","C++11","function","case","immediate","word_count::words,","this","the","the","`format()`,","neither","this","this","the","the","the","a","such","this","this","C++11,","addition","a","my","function","general,","general,","functions","fact,","the","what","this","that","the","file","file","my","this","addition","C++11","fact,","retrospect,","the","my","any","hey,","general","L13","the","fact,","`is_shout`","this","this","addition","that","your","addition","your","your","your","your","my","`nStringType`,","this","this","this","this","your","my","iteration"]},{"Key":"In `math.h`","Fragments":["`::pow(...)`"]},{"Key":"`math.h` `::pow(...)`","Fragments":["is"]},{"Key":"`::pow(...)` is","Fragments":["defined,"]},{"Key":"is defined,","Fragments":["but","etc."]},{"Key":"defined, but","Fragments":["in"]},{"Key":"but in","Fragments":["`cmath`","more","this","code","the","most","this","a","VS2013+Boost,","terms","the","fact","your","a","this","the","the"]},{"Key":"in `cmath`","Fragments":["it's"]},{"Key":"`cmath` it's","Fragments":["`std::pow(...)`."]},{"Key":"it's `std::pow(...)`.","Fragments":["Your"]},{"Key":"`std::pow(...)`. Your","Fragments":["`cmath`"]},{"Key":"Your `cmath`","Fragments":["implementor"]},{"Key":"`cmath` implementor","Fragments":["might"]},{"Key":"implementor might","Fragments":["also"]},{"Key":"might also","Fragments":["make","require","be","consider","be","entirely","consider","consider","want","consider","use","want","have","(as"]},{"Key":"also make","Fragments":["`::pow(...)`","a","better","it","it","the"]},{"Key":"make `::pow(...)`","Fragments":["available,"]},{"Key":"`::pow(...)` available,","Fragments":["but"]},{"Key":"available, but","Fragments":["that"]},{"Key":"is implementation","Fragments":["dependent."]},{"Key":" While","Fragments":["I","this","writing","this","reviewing","it","I","I","this","using","I","`for_each`"]},{"Key":"While I","Fragments":["can","was","agree","don't","am"]},{"Key":"can see","Fragments":["(and","here:","them","my","that","what","why","now","why","it.","the","the","that","I'm","being","the","from","the"]},{"Key":"see (and","Fragments":["like)"]},{"Key":"(and like)","Fragments":["the"]},{"Key":"like) the","Fragments":["advantage"]},{"Key":"the advantage","Fragments":["of","over","of"]},{"Key":"advantage of","Fragments":["the","the","```int```","the","the","the","using","only","preventing","the","the"]},{"Key":"closed algorithm","Fragments":["for"]},{"Key":"for `square_of_sums(...)`","Fragments":["and"]},{"Key":"`square_of_sums(...)` and","Fragments":["`sum_of_sqares(...)`,"]},{"Key":"and `sum_of_sqares(...)`,","Fragments":["I"]},{"Key":"`sum_of_sqares(...)`, I","Fragments":["don't"]},{"Key":"the necessarity","Fragments":["for"]},{"Key":"necessarity for","Fragments":["`difference(...)`"]},{"Key":"for `difference(...)`","Fragments":["to"]},{"Key":"`difference(...)` to","Fragments":["implement"]},{"Key":"implement the","Fragments":["same","algorithm","logic","```song()```"]},{"Key":"same two","Fragments":["algorithms"]},{"Key":"two algorithms","Fragments":["again."]},{"Key":"algorithms again.","Fragments":["Why"]},{"Key":"again. Why","Fragments":["don't"]},{"Key":"Why don't","Fragments":["you","you","you","you"]},{"Key":"don't you","Fragments":["reuse","make","use","can","feel","look","take"]},{"Key":"you reuse","Fragments":["the"]},{"Key":"reuse the","Fragments":["former","*count*","iterator.","code"]},{"Key":"the former","Fragments":["functions","runs","unnecessarily"]},{"Key":"former functions","Fragments":["and"]},{"Key":"functions and","Fragments":["write","such","avoid","I","I","static","variables","not","data","it"]},{"Key":"and write","Fragments":["`return"]},{"Key":"write `return","Fragments":["square_of_sums(nNum)"]},{"Key":"`return square_of_sums(nNum)","Fragments":["+"]},{"Key":"square_of_sums(nNum) +","Fragments":["sum_of_squares(nNum)`?"]},{"Key":"+ sum_of_squares(nNum)`?","Fragments":["It's"]},{"Key":"sum_of_squares(nNum)`? It's","Fragments":["much"]},{"Key":"It's much","Fragments":["easier","clearer","clearer"]},{"Key":"much easier","Fragments":["to","to","to"]},{"Key":"read and","Fragments":["maintain.","run","saves","understand,","would","check.","more","understand,","generally","changed","everything","understand."]},{"Key":" `::sprintf(...)`","Fragments":["is"]},{"Key":"`::sprintf(...)` is","Fragments":["defined"]},{"Key":"is defined","Fragments":["in","for","inside","to","by","as","in","as","as","as","only"]},{"Key":"defined in","Fragments":["`stdio.h`","\\\u003cstring\\\u003e,","the","the","a","headers","a","the","a","roman","my","the","the"]},{"Key":"in `stdio.h`","Fragments":["(and"]},{"Key":"`stdio.h` (and","Fragments":["`std::snprintf(...)`"]},{"Key":"(and `std::snprintf(...)`","Fragments":["in"]},{"Key":"`std::snprintf(...)` in","Fragments":["`cstdio`)"]},{"Key":"in `cstdio`)","Fragments":["which"]},{"Key":"`cstdio`) which","Fragments":["you"]},{"Key":"which you","Fragments":["don't","don't.","need","would","could","need"]},{"Key":"don't include.","Fragments":["That"]},{"Key":"include. That","Fragments":["you"]},{"Key":"That you","Fragments":["were"]},{"Key":"were obviously","Fragments":["able"]},{"Key":"obviously able","Fragments":["to"]},{"Key":"use it,","Fragments":["is"]},{"Key":"it, is","Fragments":["vendor"]},{"Key":"is vendor","Fragments":["dependent."]},{"Key":"don't call","Fragments":["`::srand(...)`"]},{"Key":"call `::srand(...)`","Fragments":["or"]},{"Key":"`::srand(...)` or","Fragments":["`std::srand(...)`"]},{"Key":"or `std::srand(...)`","Fragments":["anywhere"]},{"Key":"`std::srand(...)` anywhere","Fragments":["so"]},{"Key":"anywhere so","Fragments":["the"]},{"Key":"pseudo number","Fragments":["generator"]},{"Key":"generator remains","Fragments":["seeded"]},{"Key":"remains seeded","Fragments":["with"]},{"Key":"the default,","Fragments":["1."]},{"Key":"default, 1.","Fragments":["That"]},{"Key":"1. That","Fragments":["means"]},{"Key":"That means","Fragments":["every","that","you","having"]},{"Key":"means every","Fragments":["run"]},{"Key":"every run","Fragments":["of"]},{"Key":"run of","Fragments":["your","the","the"]},{"Key":"of your","Fragments":["program","solution.","function","program.","solution","suggested","enum","suggestion","team","function","function","internal","code","methods","variable","suggestions","arguments.","code","make_pair","implementation","code.","header","`break`s","method","questions","method","header","second","own","other","hard","```operator","function,","functions","interface.","file","code.","enums,","`bool`","optimized","advices","way","string,","for","function.","suggestions","bob","function:","approach.","code,","checks","string","arguments.","program","function","members","functions.","use","functions","code","code","algorithm"]},{"Key":"your program","Fragments":["should","can"]},{"Key":"program should","Fragments":["generate","simply"]},{"Key":"should generate","Fragments":["the"]},{"Key":"of robot","Fragments":["names."]},{"Key":" `rand(...)","Fragments":["%","%"]},{"Key":"`rand(...) %","Fragments":["n`","n`"]},{"Key":"% n`","Fragments":["is","is"]},{"Key":"n` is","Fragments":["problematic.","problematic."]},{"Key":"is problematic.","Fragments":["Have","Have"]},{"Key":"problematic. Have","Fragments":["a","a"]},{"Key":"Have a","Fragments":["look","look","typedef"]},{"Key":"a look","Fragments":["at","at","at","at","--","into","into","at","at","at","again","at","at","on","to","to","at","at","at","to","at","at","of","at"]},{"Key":"look at","Fragments":["http://cpp.indi.frih.net/blog/2014/12/the-bell-has-tolled-for-rand/","http://cpp.indi.frih.net/blog/2014/12/the-bell-has-tolled-for-rand/","\u003ca","it","the","my","my","classmates","your","using","the","the","the","the","what","your","the","[`find_first_of`](http://www.cplusplus.com/reference/string/string/find_first_of/)?","its","the","the","it,","my","this.","some","routines","the","Boost.","the","his","the","moving","const","the","other","this:","the","the","this"]},{"Key":"at http://cpp.indi.frih.net/blog/2014/12/the-bell-has-tolled-for-rand/","Fragments":["or","or"]},{"Key":"http://cpp.indi.frih.net/blog/2014/12/the-bell-has-tolled-for-rand/ or","Fragments":["http://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful","http://channel9.msdn.com/Events/GoingNative/2013/rand-Considered-Harmful"]},{"Key":"In short:","Fragments":["Don't","Don't"]},{"Key":"short: Don't","Fragments":["use","use"]},{"Key":"Don't use","Fragments":["`rand()`,","`rand()`,","C-style","`pow()`","`std::move()`"]},{"Key":"use `rand()`,","Fragments":["there","there"]},{"Key":"`rand()`, there","Fragments":["are","are"]},{"Key":"are better","Fragments":["alternatives.","alternatives.","in","for"]},{"Key":"I forgot","Fragments":["one","about","that","about","to","to","about","to","the","to"]},{"Key":"forgot one","Fragments":["important"]},{"Key":"one important","Fragments":["issue:"]},{"Key":" Oops,","Fragments":["moved","I","forgot"]},{"Key":"Oops, moved","Fragments":["everything"]},{"Key":"moved everything","Fragments":["to","to","from"]},{"Key":"everything to","Fragments":["the","a","lower","compile","minutes"]},{"Key":" Thanks","Fragments":["for","for","for","so","for","for","for","for","again","for","for","marzece!","for","for","@trinity,","for","for","a","for","for","for","for","for","@lyric","for","for","for",":)","for","for","for","for","for","for","a","for","@agustina,","again","for","@raoul,","everyone","again",":)","again","for","for","again.","for","for","again,","for","for","Carljv,","for","for","Max!","for","for","for",":)","for","for","for","for","for","to","though!","so","for","again.","for","for","for","for","krOozer","for","for","fractalic,","@cleo.","for","for","again","to","for","for","for","for","for","for","again,","chrishamilton.","for","for","for","for","for","for","for"]},{"Key":"Thanks for","Fragments":["the","reminding","the","the","the","the","the","the","the","your","the","the","the","your","the","the","helping","the","the","the","the","the","taking","the","all","the","the","your","the","the","the","the","the","the","the","the","the","your","explaining","the","the","your","your","the","the","all","clarifying.","the","the","the","your","that.","the","the","the","the","the","the","the","including","the","your","the","the","the","your","your","the","the","the","the","the","the","looking","your","having","pointing","the","the","picking","the","explaning","your","the","copying","the","the","the","the","your","the","the","the","the","the","the","the","the","the","the","the","a"]},{"Key":"I tested","Fragments":["```pow```","```\u003e=4```","it"]},{"Key":"tested ```pow```","Fragments":["in"]},{"Key":"```pow``` in","Fragments":["Visual"]},{"Key":"in Visual","Fragments":["Studio"]},{"Key":"Visual Studio","Fragments":["2013","hasn't","Professional","12.0\\VC\\include\\xstring(1698)"]},{"Key":"Studio 2013","Fragments":["and"]},{"Key":"2013 and","Fragments":["Xcode"]},{"Key":"and Xcode","Fragments":["without"]},{"Key":"Xcode without","Fragments":["problem,"]},{"Key":"without problem,","Fragments":["but"]},{"Key":"problem, but","Fragments":["will","this","in","it's","it"]},{"Key":"but will","Fragments":["update","have","increase","not"]},{"Key":"will update","Fragments":["to","my"]},{"Key":"update to","Fragments":["```std::pow```","VS"]},{"Key":"to ```std::pow```","Fragments":["here","to","thanks"]},{"Key":"```std::pow``` here","Fragments":["per"]},{"Key":"here per","Fragments":["your"]},{"Key":"per your","Fragments":["suggestion.","earlier"]},{"Key":" Thanks,","Fragments":["I","it","both","all","although","I","I","@rebeka!","all!","it"]},{"Key":"Thanks, I","Fragments":["saw","will","got","will"]},{"Key":"I saw","Fragments":["someone","the","it.","it","(the","bob::hey","that","this","this","a","people","what","some","your"]},{"Key":"saw someone","Fragments":["else"]},{"Key":"someone else","Fragments":["use","would","called","having","on","happens"]},{"Key":"else use","Fragments":["the"]},{"Key":"the O(0)","Fragments":["shortcut"]},{"Key":"O(0) shortcut","Fragments":["and"]},{"Key":"shortcut and","Fragments":["liked","implement"]},{"Key":"and liked","Fragments":["it"]},{"Key":"liked it","Fragments":["so"]},{"Key":"it so","Fragments":["much","that","your","it","that","that","that","many","I","I","that","that"]},{"Key":"so much","Fragments":["I","with","for","code","as","doulble-precision","from","different","code.","for","cleaner","for","that","easier?"]},{"Key":"much I","Fragments":["checked","really"]},{"Key":"I checked","Fragments":["the","yours","the","with","it","out"]},{"Key":"checked the","Fragments":["math","first","github"]},{"Key":"the math","Fragments":["and","based","itself.","to","seperate"]},{"Key":"math and","Fragments":["kept"]},{"Key":"and kept","Fragments":["it."]},{"Key":"kept it.","Fragments":["Combining"]},{"Key":"it. Combining","Fragments":["the"]},{"Key":"Combining the","Fragments":["equations"]},{"Key":"the equations","Fragments":["for"]},{"Key":"equations for","Fragments":["```difference```"]},{"Key":"for ```difference```","Fragments":["was"]},{"Key":"```difference``` was","Fragments":["to"]},{"Key":"was to","Fragments":["show","assign","write","add","minimize","ensure","create","keep","use","get","make","make","tie","generate","add","get","make","eliminate","not","ensure","make","make"]},{"Key":"to show","Fragments":["off.","the","you","what","that"]},{"Key":"show off.","Fragments":["I'll"]},{"Key":"off. I'll","Fragments":["updated"]},{"Key":"I'll updated","Fragments":["here"]},{"Key":"updated here","Fragments":["to"]},{"Key":"here to","Fragments":["show","me","learn"]},{"Key":"show the","Fragments":["correct"]},{"Key":"the correct","Fragments":["way","enumeration","solution","overload","output","response","response","order","decision.","way","one.","indexed","order.","masks","index.","magnitude","point"]},{"Key":"correct way","Fragments":["to","around."]},{"Key":"Your implementation","Fragments":["is","does","looks","of","of"]},{"Key":"is fine,","Fragments":["works","but"]},{"Key":"fine, works","Fragments":["and"]},{"Key":"is readable.","Fragments":["Great!"]},{"Key":"could pass","Fragments":["the","in","isalpha","score_t{}","with","in","all"]},{"Key":"parameter `strDNA`","Fragments":["to"]},{"Key":"`strDNA` to","Fragments":["`to_rna(...)`"]},{"Key":"to `to_rna(...)`","Fragments":["by"]},{"Key":"`to_rna(...)` by","Fragments":["const"]},{"Key":"by const","Fragments":["reference","reference?","reference","reference","reference","reference.","reference","reference.","reference.","ref.","reference","reference.","reference","reference"]},{"Key":"const reference","Fragments":["(`const","to","is","(``const","to","to","preferred.","for","as","parameters","instead","unless","in","rather","to","to","to","in","to","rather","?","to","is","or","is","avoids","if","so","so"]},{"Key":"reference (`const","Fragments":["string\u0026"]},{"Key":"(`const string\u0026","Fragments":["strDNA`)"]},{"Key":"string\u0026 strDNA`)","Fragments":["and"]},{"Key":"strDNA`) and","Fragments":["thus"]},{"Key":"thus avoid","Fragments":["copying"]},{"Key":"avoid copying","Fragments":["it.","the","the","string"]},{"Key":"copying it.","Fragments":["This"]},{"Key":"is common","Fragments":["practice","practice","and","in"]},{"Key":"common practice","Fragments":["in","in"]},{"Key":"practice in","Fragments":["C++.","C++","a"]},{"Key":" Or","Fragments":["since","you","maybe","you","refactor","should"]},{"Key":"Or since","Fragments":["`to_rna(...)`"]},{"Key":"since `to_rna(...)`","Fragments":["already"]},{"Key":"`to_rna(...)` already","Fragments":["takes"]},{"Key":"already takes","Fragments":["its","care"]},{"Key":"takes its","Fragments":["parameter","string"]},{"Key":"its parameter","Fragments":["by"]},{"Key":"parameter by","Fragments":["value,","reference","value?","value","value.","copy"]},{"Key":"by value,","Fragments":["you","should","data","then","the"]},{"Key":"value, you","Fragments":["can"]},{"Key":"the STL","Fragments":["to","libraries","to","do","function","algorithm","was","and","since","is"]},{"Key":"STL to","Fragments":["perform","do"]},{"Key":"to perform","Fragments":["an","a","the","the","some","the","all","the","all"]},{"Key":"perform an","Fragments":["in-place"]},{"Key":"an in-place","Fragments":["transformation","edit","string"]},{"Key":"in-place transformation","Fragments":["of"]},{"Key":"transformation of","Fragments":["the"]},{"Key":"the string:","Fragments":["`std::transform(strDNA.begin(),","O(N"]},{"Key":"string: `std::transform(strDNA.begin(),","Fragments":["strDNA.end(),"]},{"Key":"`std::transform(strDNA.begin(), strDNA.end(),","Fragments":["strDNA.begin(),"]},{"Key":"strDNA.end(), strDNA.begin(),","Fragments":["std::ptr_fun\u003cchar,"]},{"Key":"strDNA.begin(), std::ptr_fun\u003cchar,","Fragments":["char\u003e(to_rna));`"]},{"Key":"std::ptr_fun\u003cchar, char\u003e(to_rna));`","Fragments":["As"]},{"Key":"char\u003e(to_rna));` As","Fragments":["with"]},{"Key":"As with","Fragments":["many","pretty"]},{"Key":"with many","Fragments":["STL","of","cases","more","people"]},{"Key":"many STL","Fragments":["constructs"]},{"Key":"STL constructs","Fragments":["readability"]},{"Key":"constructs readability","Fragments":["depends"]},{"Key":"readability depends","Fragments":["on"]},{"Key":"on how","Fragments":["familiar","to","to","to","the","to","'abc'","to","trim"]},{"Key":"how familiar","Fragments":["one","you"]},{"Key":"familiar one","Fragments":["is"]},{"Key":"one is","Fragments":["with","not","leaked","pretty","doing","`vector\u003c\u003e`","willing","kind","alpha","`\"101102\"`:","not","provided","the","the","shouting","more","not"]},{"Key":"is with","Fragments":["the","Boost.Spirit","the"]},{"Key":"the shortness","Fragments":["of"]},{"Key":"shortness of","Fragments":["your"]},{"Key":"your solution.","Fragments":["Works,","My"]},{"Key":"solution. Works,","Fragments":["is"]},{"Key":"Works, is","Fragments":["readable,"]},{"Key":"is readable,","Fragments":["great!","great."]},{"Key":" `using","Fragments":["namespace`"]},{"Key":"makes that","Fragments":["decision"]},{"Key":"that decision","Fragments":["for"]},{"Key":"decision for","Fragments":["everyone"]},{"Key":"it. Don't","Fragments":["do"]},{"Key":"I did","Fragments":["not","that.","not","not","keep","some","the","not","not","with","not","add","to","go","in","consider","not","isspace","not","a","some","not","effectively","it","not","was","not","not","not","the","it","think","some","not","for","not","something","not","agree","with","try","think","this","something","not","this","not","it","not","this","not","make","this","with","not","not","to","without","it.","need","not","it.","the","as","almost"]},{"Key":"did not","Fragments":["check","use","know,","think","want","work","define","think","have","know","use","originally","consider.","want","suggest","use","like","like","realize","know","know","measure","know","support","explore","know","know","know","and","know","seem","update","do","trim","like","have"]},{"Key":"not check","Fragments":["how","for","for"]},{"Key":"check how","Fragments":["big","can"]},{"Key":"how big","Fragments":["a","it","they'll"]},{"Key":"big a","Fragments":["`boost::gregorian::date`","deal,"]},{"Key":"a `boost::gregorian::date`","Fragments":["object"]},{"Key":"`boost::gregorian::date` object","Fragments":["is."]},{"Key":"object is.","Fragments":["Bigger"]},{"Key":"is. Bigger","Fragments":["objects"]},{"Key":"Bigger objects","Fragments":["like"]},{"Key":"objects like","Fragments":["`std::string`","std::maps"]},{"Key":"like `std::string`","Fragments":["are"]},{"Key":"`std::string` are","Fragments":["often"]},{"Key":"are often","Fragments":["passed","used","capitalized","passed"]},{"Key":"often passed","Fragments":["by","by"]},{"Key":"passed by","Fragments":["reference","value,","reference.","value","const","const","reference","reference.","constant"]},{"Key":"by reference","Fragments":["to","because","instead","(coming","to","if","and","is","is","would","would","(so,","so","```const","I","for","in","is","and"]},{"Key":"reference to","Fragments":["avoid","a","the","avoid","its","a","a","a","a","a","a","const","a","it.","**const**.","avoid","avoid","avoid","avoid","an","`count(std::string)`,","``white_queen_``","`query`","the","the","the","`scrabble_score::score_list'","`scrabble_score::score_list'","it.","avoid","a","each","its","prevent","the","basic","a","it"]},{"Key":"avoid the","Fragments":["cost","implicit","copy.","extra","nested","validation,","implicit","ridiculous","use","memoryoverhead","copies","copy","One","temporary","call","function-style","more","iterator","bug","string"]},{"Key":"the cost","Fragments":["of","from","of","of","of","of","of","in"]},{"Key":"of copying","Fragments":["them.","a","it","the","the","the","a"]},{"Key":"copying them.","Fragments":["So"]},{"Key":"them. So","Fragments":["you","even","I"]},{"Key":"So you","Fragments":["could","have","could","could","think","get","can","don't","don't","can","could","would","will","should","could","should","could","should","should"]},{"Key":"use `date","Fragments":["advance(const"]},{"Key":"`date advance(const","Fragments":["date\u0026"]},{"Key":"advance(const date\u0026","Fragments":["d)`."]},{"Key":" Much","Fragments":["better"]},{"Key":"Much better","Fragments":["now"]},{"Key":"better now","Fragments":["that"]},{"Key":"now that","Fragments":["it","I've","you","you've","@candido","I","I've","I"]},{"Key":"it has","Fragments":["actual","an","to","always","its","no","the","a","been","been","essentially","the","a","internal","a","a","to"]},{"Key":"has actual","Fragments":["code!"]},{"Key":" Next","Fragments":["update","iteration"]},{"Key":"Next update","Fragments":["will"]},{"Key":"update will","Fragments":["use"]},{"Key":"use ```const","Fragments":["string\u0026","std::string\u0026"]},{"Key":"```const string\u0026","Fragments":["strDNA```."]},{"Key":"string\u0026 strDNA```.","Fragments":["Is"]},{"Key":"strDNA```. Is","Fragments":["there"]},{"Key":"Is there","Fragments":["a","an","a","a","a","any","a","a","an","any","a","anything","any","anything","a","a","a"]},{"Key":"there a","Fragments":["good","way","lower","reason","good","raw","better","better","reason","good","reason","way","particular","way","reason","reason","specific","reason","couple"]},{"Key":"good place","Fragments":["to","for"]},{"Key":"place to","Fragments":["read","do","do"]},{"Key":"read about","Fragments":["common","floating","it","them"]},{"Key":"about common","Fragments":["C++"]},{"Key":"common C++","Fragments":["practices?"]},{"Key":"C++ practices?","Fragments":["It's"]},{"Key":"practices? It's","Fragments":["a"]},{"Key":"a problem","Fragments":["with","with","using","later.","in","that","on","if","at","with","when","by","that","given","on","in","for.","you'd","because","but","if"]},{"Key":"problem with","Fragments":["many","the","exercises","putting","const","your"]},{"Key":"many of","Fragments":["my","the","them"]},{"Key":"of my","Fragments":["submissions.","head),","class","intentions","head","head","regex","career","library","universitys.","patience.","earlier","headers.","former","`bob::hey()`","hex","favorite","C","reticence","iterations","functions","project,","code","recent","solutions"]},{"Key":"a benefit","Fragments":["to"]},{"Key":"benefit to","Fragments":["using"]},{"Key":"to using","Fragments":["```std::transform```.","```if/else","only","school::stringVec;","std::begin;","`std::inner_product`.","ULL","many","`boost::algorithm::split`","`trim_copy`","a","the","the","MinGW.","single"]},{"Key":"using ```std::transform```.","Fragments":["Readability"]},{"Key":"```std::transform```. Readability","Fragments":["will"]},{"Key":"Readability will","Fragments":["suffer,"]},{"Key":"will suffer,","Fragments":["and"]},{"Key":"suffer, and","Fragments":["an"]},{"Key":"and an","Fragments":["in-place","invalid","istream_iterator","earlier","anonymous","int,","`enum`.","interesting"]},{"Key":"in-place edit","Fragments":["doesn't"]},{"Key":"edit doesn't","Fragments":["match"]},{"Key":"doesn't match","Fragments":["the","iter-\u003esecond++;","the","a"]},{"Key":"match the","Fragments":["tests","key","key","scope","expected","messages"]},{"Key":"tests very","Fragments":["well,"]},{"Key":"very well,","Fragments":["since","right?"]},{"Key":"well, since","Fragments":["the","this"]},{"Key":"since the","Fragments":["function","same","length","length","length","length","length","leading","strings","empty","difference","input","key","thing","API","operations","value","check","same","find","function","reverse","test","file","problem","conditions","specification","string","majority","value","call","function"]},{"Key":"function returns.","Fragments":["```std::transform```","However,"]},{"Key":"returns. ```std::transform```","Fragments":["is"]},{"Key":"```std::transform``` is","Fragments":["a"]},{"Key":"good to","Fragments":["know","me.","me;","see","be","me.","be","make","make","me.","keep","get","check","hear","see","me,"]},{"Key":"to know","Fragments":["though,","that","about,","that","that","why","the","the","which","if","more","so","about","if","if","how","what","which","the","if","if","about","how","is","the","as","there"]},{"Key":"know though,","Fragments":["map"]},{"Key":"though, map","Fragments":["functions"]},{"Key":"map functions","Fragments":["are"]},{"Key":"functions are","Fragments":["useful.","`const`","**static**","called.","obviously","for.","now","just","accessible","short","short","right","internal","great,","empty()","named.","not.","in"]},{"Key":"You solved","Fragments":["the"]},{"Key":"solved the","Fragments":["problem","problem."]},{"Key":"the problem","Fragments":["about","differently","using","using","this","did","description.","set","indeed.","is.","solved,","when","was","with","is","domain.","domain,","domain?","domain","domain","and","of","domain","statement,","as","down","isn't","of","is","can","purely","a","with","spec","asks,","and","(the","is","more"]},{"Key":"problem about","Fragments":["the"]},{"Key":"same as","Fragments":["I,","letter","`for","'nth","1ULL.","std::string","a","std::string","std::numeric_limits\u003cstd::string::size_type\u003e::max()","`x[i]","the","`[a-zA-Z0-9]`!","in","for","push_back().","the","isgraph....","`return","boost::to_lower_copy","*acc[word]","lowercase","another","isNothing?","```boost::to_upper```.","a","your"]},{"Key":"as I,","Fragments":["except"]},{"Key":"I, except","Fragments":["I"]},{"Key":"except I","Fragments":["took","had"]},{"Key":"took advantage","Fragments":["of"]},{"Key":"the library","Fragments":["std::to_string()","functions","in","implementation"]},{"Key":"library std::to_string()","Fragments":["instead"]},{"Key":"std::to_string() instead","Fragments":["of"]},{"Key":"of writing","Fragments":["my","a","(out.length()","maintainable","functional","the","a","your","error","your"]},{"Key":"writing my","Fragments":["own.","own","own"]},{"Key":"my own.","Fragments":["It's","I"]},{"Key":"own. It's","Fragments":["defined"]},{"Key":"It's defined","Fragments":["in"]},{"Key":"in \\\u003cstring\\\u003e,","Fragments":["so"]},{"Key":"\\\u003cstring\\\u003e, so","Fragments":["you"]},{"Key":"have it","Fragments":["at","set","include","be","in","now","disappear","now,","around.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e","done","directly","copied"]},{"Key":"it at","Fragments":["your","all","function","the","the","all,","will.","the","first.","around"]},{"Key":"at your","Fragments":["command.","link,","code","solution","class"]},{"Key":"your command.","Fragments":["I"]},{"Key":"command. I","Fragments":["am"]},{"Key":"am also","Fragments":["uncertain","using"]},{"Key":"uncertain why","Fragments":["you"]},{"Key":"made a","Fragments":["new","difference","wrong","copy","namespace","great","class","helper","Makefile,","new","'hey'"]},{"Key":"new namespace","Fragments":["for"]},{"Key":"namespace for","Fragments":["your","`is_divisible`.","argument","a","this","internals.","isalpha","just"]},{"Key":"your to_string()","Fragments":["function?","function."]},{"Key":"to_string() function?","Fragments":["Why"]},{"Key":"function? Why","Fragments":["not"]},{"Key":"Why not","Fragments":["just","use","use","just","a","use","put","return","just","just","start","using","just","use","use","just","use","check","use","use","tell","just"]},{"Key":"just put","Fragments":["it","in","it","that","\"results[key]++;\".","the","the","sString.back()","this"]},{"Key":"the raindrops","Fragments":["namespace?"]},{"Key":"raindrops namespace?","Fragments":["Finally,"]},{"Key":"namespace? Finally,","Fragments":["I"]},{"Key":"Finally, I","Fragments":["am","would","used"]},{"Key":"am all","Fragments":["for"]},{"Key":"all for","Fragments":["using"]},{"Key":"for using","Fragments":["templates","directives.","an","directive.","auto","variable","boost,","cool"]},{"Key":"using templates","Fragments":["when"]},{"Key":"templates when","Fragments":["necessary,"]},{"Key":"when necessary,","Fragments":["but"]},{"Key":"necessary, but","Fragments":["I","since"]},{"Key":"think it","Fragments":["_is_","is","rather","may","is","is","makes","is","is","is","said","should","would","is","means","should","would","would","might","would","would","improves","was","might","got","depends","would","will","would","was","might","looks","is","will","can","would","would","would","is","makes","could","cold","makes","should","could","might","would","would","would","helps","clutters","is","would","should","should","is","is","boosts","should","would","doesn't.","is","would","would"]},{"Key":"it _is_","Fragments":["necessary"]},{"Key":"_is_ necessary","Fragments":["for"]},{"Key":"necessary for","Fragments":["your","this"]},{"Key":"to_string() function.","Fragments":["You"]},{"Key":"function. You","Fragments":["aren't","might","modify","could"]},{"Key":"You aren't","Fragments":["going"]},{"Key":"aren't going","Fragments":["to"]},{"Key":"do anything","Fragments":["but","with"]},{"Key":"anything but","Fragments":["pass","standard","int."]},{"Key":"but pass","Fragments":["it"]},{"Key":"pass it","Fragments":["an","around,","as","with","to","an","by","as","by","anywhere.","in."]},{"Key":"it an","Fragments":["int,","empty","extension"]},{"Key":"an int,","Fragments":["so","and","any"]},{"Key":"int, so","Fragments":["why"]},{"Key":"so why","Fragments":["a","not","on","reinvent","do","include"]},{"Key":"why a","Fragments":["template?","condition","semicolon"]},{"Key":" Wow,","Fragments":["why"]},{"Key":"Wow, why","Fragments":["go"]},{"Key":"why go","Fragments":["through"]},{"Key":"go through","Fragments":["all","all","the","the","1"]},{"Key":"through all","Fragments":["the","of","of"]},{"Key":"the trouble","Fragments":["of","in"]},{"Key":"trouble of","Fragments":["writing"]},{"Key":"writing a","Fragments":["class","destructor","custom","for"]},{"Key":"class when","Fragments":["you"]},{"Key":"could write","Fragments":["a","``std::vector\u003cstd::string\u003e","it","```size_t```","also","`for"]},{"Key":"write a","Fragments":["function","Sieve","function","polymporphic","ton","lazy","utility","class","lambda","ToLower","generic","helper"]},{"Key":"function with","Fragments":["a","most","just","a","the","a","a","the","default","the","another"]},{"Key":"a few","Fragments":["if","nice","nits","CPU","different","places,","big","reasons:","days,","clock","checks.","issues","issues.","rough","days","conflicting","things...","iterations.","explanations","benefits","solutions","lines","special","suggestions","transformations","lines","more","remarks.","weeks","hours.","of","general","machine","more","too","great","simplifications","details","optmizations?","cpu","words","lines","points","comments,","lines","helper","of","more","from","comments","years.","comments","nitpicks,","other"]},{"Key":"few if","Fragments":["statements?"]},{"Key":"if statements?","Fragments":["I","I"]},{"Key":"statements? I","Fragments":["also","see"]},{"Key":"also found","Fragments":["your"]},{"Key":"found your","Fragments":["code","code"]},{"Key":"bit confusing.","Fragments":["Why"]},{"Key":"confusing. Why","Fragments":["do"]},{"Key":"you put","Fragments":["something","that","the","the","it","up","it","in"]},{"Key":"put something","Fragments":["like"]},{"Key":"something like","Fragments":["this-\u003en,","*catch_qualifier*","AStyle","isignorablechar,","unique_ptr.","std::time(nullptr)+getpid().","this","that),","that","*=","that)","that?","```std::vector\u003c","\"NOT","Boost.Spirit","this:","this:","this.","99%","ispunct().","15","`prev_char_was_apostrophe`","`all_letters_upcase`;","`!any_letters_lcase`","that","`return","std::string::size()","\"text\"","for","this:","for(","`using","that,","that.","`xpr::bos","this","`::islower`","```const","inheritance","```wordsInSentence[word]++```.","```std::transform(...,","```const","this:","that"]},{"Key":"like this-\u003en,","Fragments":["when"]},{"Key":"this-\u003en, when","Fragments":["you"]},{"Key":"simply san","Fragments":["\"n\"."]},{"Key":"san \"n\".","Fragments":["It's"]},{"Key":"\"n\". It's","Fragments":["a"]},{"Key":"a private","Fragments":["variable,","method","member","method","variable."]},{"Key":"private variable,","Fragments":["but"]},{"Key":"variable, but","Fragments":["it's"]},{"Key":"but it's","Fragments":["in","not","really","still","good","more","wasteful.","not","an","close","not","not","only","not","not","a","not","definitely","kind","a","unacceptably","also","probably","looking","worth","probably"]},{"Key":"it's in","Fragments":["its","the","C.","a","your"]},{"Key":"its own","Fragments":["class,","size","copy","copy","file",".h","h/cpp","file.","function,","anagram","forward","helper","C++"]},{"Key":"own class,","Fragments":["so"]},{"Key":"class, so","Fragments":["you","I"]},{"Key":"need the","Fragments":["this-\u003e","`message.length()==0`","calls","associativity","original","lambda.","full","referenced_string","index","lambda","`s`","`m_char_count_vec`.","```#include","intermediate",".h","const","if","`is_numbers_only`","`i`","`break;`","saysNothing()","test","ch"]},{"Key":"the this-\u003e","Fragments":["part."]},{"Key":"this-\u003e part.","Fragments":["It's"]},{"Key":"part. It's","Fragments":["redundant."]},{"Key":"It's redundant.","Fragments":["Above","If"]},{"Key":"redundant. Above","Fragments":["all,"]},{"Key":"Above all,","Fragments":["making"]},{"Key":"all, making","Fragments":["an"]},{"Key":"making an","Fragments":["exercise","unnecessary"]},{"Key":"an exercise","Fragments":["a","in","to","in","I've"]},{"Key":"exercise a","Fragments":["OOP","lot"]},{"Key":"a OOP","Fragments":["one"]},{"Key":"OOP one","Fragments":["is"]},{"Key":"not always","Fragments":["the","lead","100%"]},{"Key":"always the","Fragments":["best","same.","right","overhead"]},{"Key":"best way","Fragments":["to","to","to","to","to","to","I","of","to","that"]},{"Key":"of putting","Fragments":["(output","them"]},{"Key":"putting (output","Fragments":["!="]},{"Key":"(output !=","Fragments":["\"\"),"]},{"Key":"!= \"\"),","Fragments":["you"]},{"Key":"\"\"), you","Fragments":["should"]},{"Key":"probably say","Fragments":["(!"]},{"Key":"say (!","Fragments":["output.empty())."]},{"Key":"(! output.empty()).","Fragments":["I"]},{"Key":"output.empty()). I","Fragments":["also"]},{"Key":"also have","Fragments":["a","this","used"]},{"Key":"have a","Fragments":["pet","bottleneck,","`randomName`","`random`","max","look.","non-number).","few","reason","AnimalFactory","map","map","chain","class","non-template","suitable","look","bit","user-defined","copy","great","local","copy","semi-colon","copy","non-const","Windows","serious","header/source","header/source","large","variable","look","lot","class","single","guaranteed","fairly","`copy-paste`","\"using","lot","feeling","background","working","class","very","execution","header","consistent","single","difference","mix","tranform_if,","compelling","dependence","strict","constructor?","working","love/hate","question",".h","normal","bunch","yell","few","revised","cleaner","little","null-terminated","function","principle","better","look","separate","serious","type","few","feeling","length,","repeating","full","nitpick","window","bit","chance","couple","const","char","semicolon","feeling","\"throw","few","couple","rule"]},{"Key":"a pet","Fragments":["peeve","peeve"]},{"Key":"pet peeve","Fragments":["about","of","of","of"]},{"Key":"peeve about","Fragments":["saying"]},{"Key":"about saying","Fragments":["\"using"]},{"Key":"namespace std\",","Fragments":["when"]},{"Key":"std\", when","Fragments":["you"]},{"Key":"you only","Fragments":["have","use","need","did","have","need","have","use","compare","need"]},{"Key":"have two","Fragments":["things","nitpicks.","ways","questions:","things","O(nlog(n))"]},{"Key":"two things","Fragments":["in","that","intertwined."]},{"Key":"things in","Fragments":["the","different","std","std::,"]},{"Key":"the std::","Fragments":["namespace.","namespace","namespace,"]},{"Key":"std:: namespace.","Fragments":["Just"]},{"Key":"namespace. Just","Fragments":["put"]},{"Key":"Just put","Fragments":["\"using","the"]},{"Key":"put \"using","Fragments":["std::string;"]},{"Key":"\"using std::string;","Fragments":["using"]},{"Key":"std::string; using","Fragments":["std::to_string;\","]},{"Key":"using std::to_string;\",","Fragments":["or"]},{"Key":"std::to_string;\", or","Fragments":["since"]},{"Key":"or since","Fragments":["you"]},{"Key":"only use","Fragments":["them","it","the","const","the","\"using\""]},{"Key":"use them","Fragments":["once","in","at","on","on","myself,","is","to","especially","and","as"]},{"Key":"them once","Fragments":["each,"]},{"Key":"once each,","Fragments":["just"]},{"Key":"each, just","Fragments":["say"]},{"Key":"say std::string,","Fragments":["etc."]},{"Key":"std::string, etc.","Fragments":["in"]},{"Key":"etc. in","Fragments":["the","addition","order"]},{"Key":"code. Just","Fragments":["my"]},{"Key":"Just my","Fragments":["bias","2","bias"]},{"Key":"bias I","Fragments":["guess,"]},{"Key":"I guess,","Fragments":["but","coz"]},{"Key":"guess, but","Fragments":["why"]},{"Key":"but why","Fragments":["bother","convert","not"]},{"Key":"why bother","Fragments":["even"]},{"Key":"bother even","Fragments":["making"]},{"Key":"even making","Fragments":["the"]},{"Key":"making the","Fragments":["std::","CLI","input","last","arguments","anagram","code","code","default","deductions","whole","entire","other","comparision","song","code"]},{"Key":"std:: namespace","Fragments":["then?"]},{"Key":"writing (out.length()","Fragments":["=="]},{"Key":"(out.length() ==","Fragments":["0),"]},{"Key":"== 0),","Fragments":["you"]},{"Key":"0), you","Fragments":["should"]},{"Key":"probably just","Fragments":["say","me","be","print","creating","delete","use"]},{"Key":"say (out.empty())","Fragments":["Also,"]},{"Key":"(out.empty()) Also,","Fragments":["there"]},{"Key":"Also, there","Fragments":["is","is"]},{"Key":"a perfectly","Fragments":["good","reasonable"]},{"Key":"perfectly good","Fragments":["std::to_string()"]},{"Key":"good std::to_string()","Fragments":["function"]},{"Key":"std::to_string() function","Fragments":["in"]},{"Key":"function in","Fragments":["the","the","the","but","a","the","_cctype_","lambdas","namespace","a","that","the"]},{"Key":"standard library.","Fragments":["It","None.","Can"]},{"Key":"library. It","Fragments":["is"]},{"Key":"in \\\u003cstring\\\u003e.","Fragments":["You"]},{"Key":"\\\u003cstring\\\u003e. You","Fragments":["don't"]},{"Key":"write your","Fragments":["own.","own."]},{"Key":"your own.","Fragments":["It"]},{"Key":"own. It","Fragments":["is"]},{"Key":"is new","Fragments":["in","in","to"]},{"Key":"new in","Fragments":["C++11","C++11."]},{"Key":"in C++11","Fragments":["though,","is","you","and"]},{"Key":"C++11 though,","Fragments":["so"]},{"Key":"though, so","Fragments":["most","a","it's","thanks","there's","you","you're"]},{"Key":"so most","Fragments":["people","of"]},{"Key":"most people","Fragments":["don't","would","capitalize"]},{"Key":"people don't","Fragments":["know","need"]},{"Key":"know about","Fragments":["it.","the","this","``std::uniform_int_distribution``,","the","this!","isalpha.","boost::to_lower_copy?","std::isspace(...)","std::all_of,","islower","this","the","the","the","anonymous","splitting","the","the"]},{"Key":"for reminding","Fragments":["me","me."]},{"Key":"reminding me","Fragments":["of"]},{"Key":"me of","Fragments":["`std::to_string\u003c\u003e()`.","transform","Python.","copy_if"]},{"Key":"of `std::to_string\u003c\u003e()`.","Fragments":["I"]},{"Key":"`std::to_string\u003c\u003e()`. I","Fragments":["use"]},{"Key":"I use","Fragments":["my","the","it","`i`","my","the","`this`/`self`","`result`,","`at()`","[zeal](http://zealdocs.org/)","the","it","`auto`","different","a","a","a","a","`else`","an","prefix-increments","the","them","VS2013","iterators","this","::tolower"]},{"Key":"use my","Fragments":["templated","wifes","if"]},{"Key":"my templated","Fragments":["version"]},{"Key":"templated version","Fragments":["so"]},{"Key":"version so","Fragments":["much"]},{"Key":"much with","Fragments":["custom"]},{"Key":"with custom","Fragments":["classes"]},{"Key":"custom classes","Fragments":["that"]},{"Key":"classes that","Fragments":["I","the"]},{"Key":"forgot about","Fragments":["the","that.","that."]},{"Key":"put `to_string\u003c\u003e()`","Fragments":["in"]},{"Key":"`to_string\u003c\u003e()` in","Fragments":["the"]},{"Key":"the namespace","Fragments":["`impl`","`leap`,","in","in","in","then","std","std","version","std,","and","or","or","look-up","correctly,","but","`bob`.","anagram.","or"]},{"Key":"namespace `impl`","Fragments":["to"]},{"Key":"`impl` to","Fragments":["make"]},{"Key":"make clear,","Fragments":["that","that"]},{"Key":"clear, that","Fragments":["it","the"]},{"Key":"not belong","Fragments":["to","to."]},{"Key":"belong to","Fragments":["the","bob,","class","the"]},{"Key":"API that","Fragments":["I","was"]},{"Key":"I provide","Fragments":["with"]},{"Key":"provide with","Fragments":["that"]},{"Key":"with that","Fragments":["header.","key","key","then","table?","too.","came","which","for","(double","change.","key","capability","name","return","syntax,","recommendation"]},{"Key":"that header.","Fragments":["Otherwise","In"]},{"Key":"header. Otherwise","Fragments":["one"]},{"Key":"Otherwise one","Fragments":["could"]},{"Key":"one could","Fragments":["begin","try","typedef","replace"]},{"Key":"could begin","Fragments":["to"]},{"Key":"begin to","Fragments":["use","optimize.","end,"]},{"Key":"and if","Fragments":["I","the","you","you","you","you're","num\u003ei","you","it","larger","you","I","all","that","it's","it's","that's","someone"]},{"Key":"if I","Fragments":["ever","prefer","would","could","could","wasn't","was","get","called","saw","include","include","deal","have","didn't","understand","pass","was","create","remember","were","have","use","did","create","were","do","wanted","see","use","missed","missed","didn't","am","should","can.","ever","should","should","encountered","pushed","was","could","did,","need","could","agree","would","first"]},{"Key":"I ever","Fragments":["want","had"]},{"Key":"ever want","Fragments":["to"]},{"Key":"remove or","Fragments":["modify"]},{"Key":"or modify","Fragments":["it"]},{"Key":"modify it","Fragments":["dependent","go","or","(the","inplace,"]},{"Key":"it dependent","Fragments":["code"]},{"Key":"dependent code","Fragments":["might"]},{"Key":"code might","Fragments":["not","expect"]},{"Key":"compile anymore","Fragments":["or"]},{"Key":"anymore or","Fragments":["get"]},{"Key":"or get","Fragments":["unexpected"]},{"Key":"get unexpected","Fragments":["results."]},{"Key":" Be","Fragments":["careful","careful","careful,","careful,","mean.","careful"]},{"Key":"Be careful","Fragments":["with","with","not","of"]},{"Key":"careful with","Fragments":["`std::size_t`.","premature","`using"]},{"Key":" \u003e","Fragments":["size_t","std::pow","is","it's","why","Match","If","No","A","One","I","I","Have","For","Yes,","Good","If","Explicitly","Interesting","song","To","My","If","`checkPoke`","For"]},{"Key":"\u003e size_t","Fragments":["is"]},{"Key":"size_t is","Fragments":["used","guaranteed"]},{"Key":"used to","Fragments":["represent","returning","seeing","C++","seeing","clarify","be.","the","throw","initialize","get","if","be","this","languages","be","C++98","constructor","making","reading","just","this.","evaluate","work","initialize","check","know","write","find","writing","facilitate","them.","it.","so","using","the","C++"]},{"Key":"to represent","Fragments":["the","the","every"]},{"Key":"represent the","Fragments":["size","histogram"]},{"Key":"the size","Fragments":["of","for","of","of","of","of","of","is","of","of","of","of","and","of","of","and"]},{"Key":"size of","Fragments":["any","26","*ten*","an","the","the","the","the","v","exactly","the","a","left","an","the","each","the","your"]},{"Key":"of any","Fragments":["object","element","source","single","class","kind","test","kind).","element","specific","number","tradeoffs"]},{"Key":"any object","Fragments":["(including"]},{"Key":"object (including","Fragments":["arrays)"]},{"Key":"(including arrays)","Fragments":["in"]},{"Key":"arrays) in","Fragments":["the"]},{"Key":"the particular","Fragments":["implementation."]},{"Key":"particular implementation.","Fragments":["It"]},{"Key":"implementation. It","Fragments":["is"]},{"Key":"used as","Fragments":["the","a","iterators).","possible.","a","a","an","a"]},{"Key":"as the","Fragments":["return","number","idea","business-logic","others.","word","untouched","base","code","full","test","code","first","argument","loop","\"most","need","i","factor,","transformation","only","least","third","next","site","sorted","stored","stored","README","\"most","very","function","last","stored","Romans","strings","beer","stored","`std::equal`","loop","result","first","condition","solution","C-style","buffer","argument.","argument.","general","tests"]},{"Key":"the return","Fragments":["type","values","type,","value","value","from","value?","value?","value.","value","type","value","-","is","statement","type","type","type","value","value","of","value","would","from","type","value","value","type","value","strings.","strings","value","value","value","value"]},{"Key":"return type","Fragments":["of","is","is","leads","to","of","would","and","of","should","on","in","in","either.","for","of","for"]},{"Key":"the sizeof","Fragments":["operator.","operator"]},{"Key":"sizeof operator.","Fragments":["[...]"]},{"Key":"operator. [...]","Fragments":["As"]},{"Key":"[...] As","Fragments":["an"]},{"Key":"As an","Fragments":["unsigned","addition"]},{"Key":"an unsigned","Fragments":["type,","type","type","or","number.","int","long","input.","int","integer","int","int","int","int","int","int"]},{"Key":"unsigned type,","Fragments":["size_t"]},{"Key":"type, size_t","Fragments":["is"]},{"Key":"is guaranteed","Fragments":["to","in","by","to","to","in","to"]},{"Key":"guaranteed to","Fragments":["be","be","work,","hold","be","be","have","have","be","fit","be"]},{"Key":"be wide","Fragments":["enough"]},{"Key":"wide enough","Fragments":["to"]},{"Key":"enough to","Fragments":["accommodate","make","tell","just","find","pick","make","do","optimize","fully","be","consider","bother","hold","be","make","solve","get","do","get"]},{"Key":"to accommodate","Fragments":["at"]},{"Key":"accommodate at","Fragments":["least"]},{"Key":"at least","Fragments":["the","one","one","one","make","one","the","not","not","one","be","use","moving","making","now","const","get","one","not","seems","a","one","for","speaking","not","consider","I","write","as","one","not","an","have","as","not","not","some","some","inside","easier","in","on","not","to","80%","one","``\u003ccctype\u003e``.","one","at","for","the","one","one","64bit","32bit","16bit","be","2","in","one","one","yell"]},{"Key":"least the","Fragments":["value","beginning","test"]},{"Key":" `size_t`","Fragments":["might"]},{"Key":"`size_t` might","Fragments":["be"]},{"Key":"be smaller","Fragments":["than"]},{"Key":"smaller than","Fragments":["`unsigned","64","one","that"]},{"Key":"than `unsigned","Fragments":["int`."]},{"Key":" My","Fragments":["recommendation:","preference","previous","understanding","first","personal","main","answer","first","version","answers/comments:","goal","only","actual","initial","rule","typical","first","guess","best","understanding","regex-fu","main","initial","biggest","code","first","only","only","first","comments","preferred","very","first","only","other","initial","biggest"]},{"Key":"My recommendation:","Fragments":["Use"]},{"Key":"recommendation: Use","Fragments":["`size_t`"]},{"Key":"Use `size_t`","Fragments":["only"]},{"Key":"`size_t` only","Fragments":["with"]},{"Key":"only with","Fragments":["object"]},{"Key":"with object","Fragments":["sizes."]},{"Key":" Everything","Fragments":["looks"]},{"Key":"Everything looks","Fragments":["pretty"]},{"Key":"looks pretty","Fragments":["good.","good","short","good,","clean","good!"]},{"Key":"pretty good.","Fragments":["I","I","How","I"]},{"Key":"good. I","Fragments":["only","like","need","like","wonder"]},{"Key":"1) Your","Fragments":["counter::nucleotide_counts()"]},{"Key":"Your counter::nucleotide_counts()","Fragments":["member"]},{"Key":"counter::nucleotide_counts() member","Fragments":["function"]},{"Key":"member function","Fragments":["is","‘void","‘std::string","should","substr","I","X","will","and","of","size()","'nucleotide_counts'"]},{"Key":"function is","Fragments":["so","very","making","a","`const`","available","very","even","in","enough","not","removed","called.","slightly","fine;","identified","really","then","a","large.","called","a","not","not","easy","very","great."]},{"Key":"is so","Fragments":["small","ugly!","significant.","awesome!","clear"]},{"Key":"so small","Fragments":["you","(for"]},{"Key":"small you","Fragments":["should"]},{"Key":"probably put","Fragments":["it","a"]},{"Key":"it inside","Fragments":["the","```tokenize```.","the","a","the"]},{"Key":"inside the","Fragments":["class","namespace","`word_count`","if","struct's","US","namespace","map.","else","function","implementation","object,","input","```StringView```.","else","namespace","class","namespace","class.","`transform`","`for`","`str()`","constructor","translation","translation","bob","function's","function)","for","namespace","class","iterator.","class"]},{"Key":"class definition.","Fragments":["If","Line"]},{"Key":"definition. If","Fragments":["you"]},{"Key":"you really","Fragments":["want","need","need","need","need","need","need","need","need","want","need","need","need","need","need","need","need","need","need","need","need","want","wanted","gaining","go","want","want.","don't","only","don't","need","want","just","make","need"]},{"Key":"keep it","Fragments":["out","private.","up.","readable,","as","readable,","easily","in","sorted","that","easy","simple","concise.","more"]},{"Key":"of it,","Fragments":["you","then","returning","I","but"]},{"Key":"it, you","Fragments":["should","will"]},{"Key":"should declare","Fragments":["it"]},{"Key":"declare it","Fragments":["inline.","inline","in","inside","as","as"]},{"Key":"tests don't","Fragments":["demand","appear","cover","really"]},{"Key":"don't demand","Fragments":["it,"]},{"Key":"demand it,","Fragments":["but"]},{"Key":"it, but","Fragments":["your","in","wouldn't","no","it's","the","is","being","not","I'm","that's","they","it","expressions","looking","it"]},{"Key":"but your","Fragments":["counter::counter(string","comment","use","solution"]},{"Key":"your counter::counter(string","Fragments":["dna_str)"]},{"Key":"counter::counter(string dna_str)","Fragments":["function"]},{"Key":"dna_str) function","Fragments":["doesn't"]},{"Key":"function doesn't","Fragments":["check","need","seem","have"]},{"Key":"doesn't check","Fragments":["for"]},{"Key":"for invalid","Fragments":["nucleotides.","nucleotides.","characters,"]},{"Key":"invalid nucleotides.","Fragments":["You"]},{"Key":"nucleotides. You","Fragments":["could"]},{"Key":"pass in","Fragments":["any","\"Huh?\"","a","my","`const","a","some","a","a","a","a","a","a","numbers","a"]},{"Key":"in any","Fragments":["old","order.","particular","of","case","forward","language…","way","language","way."]},{"Key":"any old","Fragments":["thing"]},{"Key":"old thing","Fragments":["and"]},{"Key":"thing and","Fragments":["it","one","a"]},{"Key":"be included","Fragments":["in","into","in","in","in","in","just","separately"]},{"Key":"included in","Fragments":["your","the","the","two","every","your","the","the","two","this","the"]},{"Key":"your map.","Fragments":["You","If"]},{"Key":"map. You","Fragments":["should"]},{"Key":"probably declare","Fragments":["it","the"]},{"Key":"it inline","Fragments":["as"]},{"Key":"inline as","Fragments":["well."]},{"Key":"1) By","Fragments":["'inline'"]},{"Key":"By 'inline'","Fragments":["do"]},{"Key":"'inline' do","Fragments":["you"]},{"Key":"you mean","Fragments":["using","to","to","its","by","linearly","remove","please?","by","faster","using","and","with","in","about","when","by"]},{"Key":"mean using","Fragments":["the","higher-level"]},{"Key":"the `inline`","Fragments":["keyword"]},{"Key":"`inline` keyword","Fragments":["or"]},{"Key":"keyword or","Fragments":["combining"]},{"Key":"or combining","Fragments":["the"]},{"Key":"combining the","Fragments":["function","animal","zero"]},{"Key":"function declaration","Fragments":["and","is","syntax.","syntax","so"]},{"Key":"declaration and","Fragments":["implementation?","method","not"]},{"Key":"I make","Fragments":["sure","a","an"]},{"Key":"sure to","Fragments":["only","build","step","make","not","implement"]},{"Key":"only count","Fragments":["keys"]},{"Key":"count keys","Fragments":["that"]},{"Key":"keys that","Fragments":["are"]},{"Key":"that are","Fragments":["already","related","expensive","expensive","hard","cheap","too","less","small.","needed","stored","responsible","now","anagrams.","safer","included","simpler"]},{"Key":"are already","Fragments":["in","working","functions","reserved","using"]},{"Key":"already in","Fragments":["the","the","the","advance,"]},{"Key":"the `_nucleotides`","Fragments":["map"]},{"Key":"`_nucleotides` map","Fragments":["in"]},{"Key":"the second","Fragments":["iteration.","else","is","overload","version","part:","parameter","line","type","more.","case","verse","loop","should","case?","version.","approach","part","version","commented","lambda","lambda","pass,","note","loop.","iteration!","iteration.","iteration,"]},{"Key":" Two","Fragments":["small","words","things","things","comments:","things:"]},{"Key":"Two small","Fragments":["nits.","suggestions."]},{"Key":"First in","Fragments":["```counter```,"]},{"Key":"in ```counter```,","Fragments":["invalid"]},{"Key":"```counter```, invalid","Fragments":["characters"]},{"Key":"invalid characters","Fragments":["shouldn't","in"]},{"Key":"characters shouldn't","Fragments":["fail"]},{"Key":"shouldn't fail","Fragments":["silently,"]},{"Key":"fail silently,","Fragments":["difficult"]},{"Key":"silently, difficult","Fragments":["to"]},{"Key":"difficult to","Fragments":["debug","setup.","understand.","follow,","extend,","follow.","follow,","review","code","read...),","understand","read.","keep","test","glance","understand","read","read.","verify","read","understand.","understand","understand."]},{"Key":"to debug","Fragments":["later."]},{"Key":"debug later.","Fragments":["Even"]},{"Key":"later. Even","Fragments":["though"]},{"Key":"though it's","Fragments":["not","been","the","bad","not"]},{"Key":"it's not","Fragments":["specified","a","the","wholly","already","as","too","hard","changing","just","documented,","zero","a","in","valid","really","clear","too","that","a","actually","fair","part","a","going","so","clear","in","a","saving","really","in","a","even","a","portable.","100%","possible","set","particularly","always","a","clear","a","more","tested,","so","important","immediately","part","worth"]},{"Key":"not specified","Fragments":["in"]},{"Key":"specified in","Fragments":["the","the"]},{"Key":"tests a","Fragments":["message"]},{"Key":"a message","Fragments":["to"]},{"Key":"message to","Fragments":["standard"]},{"Key":"to standard","Fragments":["error"]},{"Key":"standard error","Fragments":["or"]},{"Key":"error or","Fragments":["throwing"]},{"Key":"or throwing","Fragments":["an","an"]},{"Key":"throwing an","Fragments":["error","exception.","exception","exception,","exception,","exception","exception","exception"]},{"Key":"an error","Fragments":["seems","value.","state","mentioning","rather","if","in","from","message;","in","```std::domain_error```","in","condition.","statement."]},{"Key":"error seems","Fragments":["more"]},{"Key":"seems more","Fragments":["appropriate.","appropriate.","like","intuitive","logical","elegant."]},{"Key":" Second,","Fragments":["in","a","I'm","the"]},{"Key":"Second, in","Fragments":["```count```"]},{"Key":"in ```count```","Fragments":["use"]},{"Key":"```count``` use","Fragments":["a"]},{"Key":"use a","Fragments":["try/catch","single","so-called","more","range-based","fair","reverse","map:","regex","```size_t","class","switch/if","global","bloom","macro?","``std::map``","``std::multimap``","``std::set``","sting","C-style","struct.","`range","namespace","string_stream","namespace","better","const","counting-loop,","namespace","member","namespace.","more","user-defined","library","'const","'const","const","\"better\"","`const","switch","fourth","map","dictionary","dictionary","range-based","function","function","range-based","library","handwritten","class,","dictionary","better","for-element","tokenizer","for-element","C++11","return","\"hamming","sort","recursive","new","lambda","switch","std::string","map","namespace","map,","range","temporary."]},{"Key":"a try/catch","Fragments":["block,","block"]},{"Key":"try/catch block,","Fragments":["better"]},{"Key":"block, better","Fragments":["to"]},{"Key":"better to","Fragments":["ask","write","initialize","rename","be","solve","use","do","use","replace","fail","use","take","test","use","have","use","fill","use.","have","remove","operate","dig","calculate","assign","put","avoid","pass","use","implement","pass","be","break","call","just","just","use"]},{"Key":"to ask","Fragments":["forgiveness","how"]},{"Key":"ask forgiveness","Fragments":["then"]},{"Key":"forgiveness then","Fragments":["permission."]},{"Key":" Code","Fragments":["is","looks","looks","looks","was","is"]},{"Key":"Code is","Fragments":["very","being","cleaner","very","good"]},{"Key":"is very","Fragments":["tight","clever.","good","difficult","succinct,","large.","similar","easy","clear","hacky.","readable","tight","tricky","long","optimised","clear.","generic,","concise,","concise","readable.","clean.","similar","similar","unprofessional.","C-like,","readable.","concise,","simple","good.","simple,","C-like.","clear.","C","elaborate.","concise,"]},{"Key":"very tight","Fragments":["otherwise.","code.","solution."]},{"Key":"In ```count```,","Fragments":["a"]},{"Key":"```count```, a","Fragments":["try/catch"]},{"Key":"try/catch block","Fragments":["is"]},{"Key":"block is","Fragments":["more"]},{"Key":"more general,","Fragments":["instead"]},{"Key":"general, instead","Fragments":["of"]},{"Key":"a validating","Fragments":["function."]},{"Key":"validating function.","Fragments":["```at```"]},{"Key":"function. ```at```","Fragments":["throws"]},{"Key":"```at``` throws","Fragments":["an"]},{"Key":"throws an","Fragments":["```out_of_range```","exception"]},{"Key":"an ```out_of_range```","Fragments":["error."]},{"Key":" in","Fragments":["```is_good_nucleotide```","`checkForSilence()`,","future,","the","the","the","the","the","the","main.cpp:","the","the","case","which","the"]},{"Key":"in ```is_good_nucleotide```","Fragments":["better"]},{"Key":"```is_good_nucleotide``` better","Fragments":["to"]},{"Key":"write positives","Fragments":["```if"]},{"Key":"positives ```if","Fragments":["nucleotide"]},{"Key":"```if nucleotide","Fragments":["=="]},{"Key":"nucleotide ==","Fragments":["'A'","'G'"]},{"Key":"== 'A'","Fragments":["||"]},{"Key":"'A' ||","Fragments":["nucleotide"]},{"Key":"|| nucleotide","Fragments":["=="]},{"Key":"== 'G'","Fragments":["||"]},{"Key":"'G' ||","Fragments":["...```"]},{"Key":" Otherwise,","Fragments":["looks"]},{"Key":"Otherwise, looks","Fragments":["good.","fine."]},{"Key":" Would","Fragments":["you","fail","be","be","it","like","storing","you"]},{"Key":"Would you","Fragments":["link","know","expand/link"]},{"Key":"you link","Fragments":["to"]},{"Key":"link to","Fragments":["the","some","boost","cplusplus?","for"]},{"Key":"the stack","Fragments":["overflow","is","on","and"]},{"Key":"stack overflow","Fragments":["discussion?","link","post,","answer:"]},{"Key":"overflow discussion?","Fragments":["This"]},{"Key":"discussion? This","Fragments":["is"]},{"Key":"more readable","Fragments":["then","(in","and","in","and","than","than","to","way","but","way.","than","for","and","by","than","I","without","by","on","and","as","or","string","to","and","is"]},{"Key":"readable then","Fragments":["the"]},{"Key":"then the","Fragments":["greedy","square","for","user","area","counts","line","whole","result","variable","actual","word","word","compiler","indexed","maximum","message","question","word","word"]},{"Key":"the greedy","Fragments":["algorithm"]},{"Key":"greedy algorithm","Fragments":["I"]},{"Key":"algorithm I","Fragments":["used,"]},{"Key":"I used,","Fragments":["and","can"]},{"Key":"used, and","Fragments":["wonder"]},{"Key":"and wonder","Fragments":["what"]},{"Key":"wonder what","Fragments":["the","the"]},{"Key":"the advantages/disadvantages","Fragments":["of"]},{"Key":"advantages/disadvantages of","Fragments":["each"]},{"Key":"of each","Fragments":["approach","word.","key","queen","string","number","of","character","of","other.","word.","letter","character,","function","message"]},{"Key":"each approach","Fragments":["are."]},{"Key":"Some ideas","Fragments":["to","on"]},{"Key":"ideas to","Fragments":["speed"]},{"Key":"to speed","Fragments":["things","it"]},{"Key":"speed things","Fragments":["up."]},{"Key":"You only","Fragments":["need","need","pass"]},{"Key":"check candidate","Fragments":["numbers"]},{"Key":"candidate numbers","Fragments":["up"]},{"Key":"numbers up","Fragments":["to"]},{"Key":" Factors","Fragments":["of"]},{"Key":"Factors of","Fragments":["12:"]},{"Key":" 2","Fragments":["x","bottles","{a","2","2","-","i","questions:",")"]},{"Key":"2 x","Fragments":["6"]},{"Key":" 3","Fragments":["x","{a","3","3","-","i"]},{"Key":"3 x","Fragments":["4"]},{"Key":"x 4","Fragments":["\u003c--"]},{"Key":"4 \u003c--","Fragments":["floor(sqrt(12))"]},{"Key":"\u003c-- floor(sqrt(12))","Fragments":["is"]},{"Key":"floor(sqrt(12)) is","Fragments":["3,"]},{"Key":"is 3,","Fragments":["stop"]},{"Key":"3, stop","Fragments":["here"]},{"Key":" 4","Fragments":["x","{b","4","4","i","i"]},{"Key":"4 x","Fragments":["3"]},{"Key":" 6","Fragments":["x","1","1","v","v"]},{"Key":"6 x","Fragments":["2"]},{"Key":"you keep","Fragments":["your","the","at","that","both","the"]},{"Key":"keep your","Fragments":["found","point"]},{"Key":"your found","Fragments":["primes"]},{"Key":"found primes","Fragments":["in"]},{"Key":"primes in","Fragments":["a","memory"]},{"Key":"a vector","Fragments":["you","of","of","v","of","and","of","is","of","when","rather","in","when","of","of","of","of","of","of","-","and"]},{"Key":"vector you","Fragments":["only"]},{"Key":"check a","Fragments":["new","little.","word."]},{"Key":"new candidate","Fragments":["number"]},{"Key":"candidate number","Fragments":["against"]},{"Key":"number against","Fragments":["known"]},{"Key":"against known","Fragments":["primes"]},{"Key":"known primes","Fragments":["(really","in","is"]},{"Key":"primes (really","Fragments":["only"]},{"Key":"(really only","Fragments":["primes"]},{"Key":"only primes","Fragments":["less"]},{"Key":"primes less","Fragments":["then"]},{"Key":"less then","Fragments":["the","a"]},{"Key":"square root","Fragments":["of"]},{"Key":"root of","Fragments":["the","all"]},{"Key":"the new","Fragments":["number).","if","standard","item","{}","version.","submission.","syntax:","iteration","using","syntax","for-loop","fangled","iteration","approach.","iteration.","```std::array```","\"for\"","iteration","ranged","for","C++11","range","last","string.","name","one."]},{"Key":" for","Fragments":["(int","(int","(auto","(const","(const","more","(size_t","the","consistency,","(auto","(const","5","an","(","(","(","(","(int","(auto","(char","(InputIt","(char","(char","(","each","(","(","(","(","each","each","each","each","(const","(auto","(const","(auto","(int","(auto\u0026","the","(","(char","(auto\u0026","(auto\u0026","(const","(const","(auto\u0026","(...)","(","(","(","("]},{"Key":"for (int","Fragments":["nPrime","j","j","i"]},{"Key":"(int nPrime","Fragments":[":"]},{"Key":"nPrime :","Fragments":["vector\u003cint\u003e"]},{"Key":": vector\u003cint\u003e","Fragments":["knownPrimes)"]},{"Key":"vector\u003cint\u003e knownPrimes)","Fragments":["{"]},{"Key":" if","Fragments":["(num","(sqrt(num)","(flag_vec[i])","(","(str.empty())","(counts.count(n)","(counts.count(n))","(counts.count(n))","(c","(word.size())","(std::isspace(input[i])","(equals(word,","(!iequals(*w,","you","X_PER_EARTH_YEAR","you","(clause.find_last_of(\"?\")","(num","(num","(num","(num","(num","(num","(","(","(","silent(said)","(","(","(","(!end)","(i","(","(","(","(islower(*it)){","I","((int)letter","(n","(n","(n","(n","(","(","you","(","(spaceless","(boost::erase_all(sth,","(is_silent(sth))","(s_trimmed.substr","(s.back()","(it","(c","(capacity","(i","(not","(output_map.count(c)","you","numAlphas==0,","you","(strand1[i]","(anyExpression","(anyExpression)","(message.empty())","(m_wordLower","(wordChars","(","("]},{"Key":"if (num","Fragments":["%","\u003e","==","\u003e","==","\u003e","=="]},{"Key":"(num %","Fragments":["nPrime"]},{"Key":"% nPrime","Fragments":["=="]},{"Key":"nPrime ==","Fragments":["0)"]},{"Key":" //","Fragments":["not","is","Code","A","and","...","lowercase","http://exercism.io/submissions/7edfd0c84ee44f99b14373f5dfa28d4e","Stuff","C++11","C++14","vs","vs.","or","return","...","...","Do","if","static_cast\u003cchar(const","don't","do"]},{"Key":"// not","Fragments":["prime"]},{"Key":"if (sqrt(num)","Fragments":["\u003c="]},{"Key":"(sqrt(num) \u003c=","Fragments":["nPrime)"]},{"Key":"// is","Fragments":["prime"]},{"Key":"a while","Fragments":["loop","loop","to","before","to","to","back.","to","to","loop,","loop","loop,","loop","and","trying"]},{"Key":"while loop","Fragments":["try",":)","that","through","after","is","can","and","instead"]},{"Key":"loop try","Fragments":["```for("]},{"Key":"try ```for(","Fragments":["int"]},{"Key":"```for( int","Fragments":["num"]},{"Key":"int num","Fragments":["="]},{"Key":"num =","Fragments":["3;"]},{"Key":"= 3;","Fragments":["n","result","result"]},{"Key":"3; n","Fragments":["\u003c"]},{"Key":"n \u003c","Fragments":["desired_n;","2"]},{"Key":"\u003c desired_n;","Fragments":["num"]},{"Key":"desired_n; num","Fragments":["+="]},{"Key":"num +=","Fragments":["2)```"]},{"Key":"+= 2)```","Fragments":["and"]},{"Key":"2)``` and","Fragments":["consider"]},{"Key":"and consider","Fragments":["2","whitespace"]},{"Key":"consider 2","Fragments":["a"]},{"Key":"2 a","Fragments":["special"]},{"Key":"a special","Fragments":["case.","case","case"]},{"Key":"special case.","Fragments":["```knowPrimes.size()```"]},{"Key":"case. ```knowPrimes.size()```","Fragments":["can"]},{"Key":"```knowPrimes.size()``` can","Fragments":["be"]},{"Key":"be used","Fragments":["in","anywhere","to","for","to","to","to","when","as","with","with","more","as","in","with","later","after","to","by","for","as","alternatively,","in","to","carefully","to","(like"]},{"Key":"in place","Fragments":["of","of","at","of","and","modification","of"]},{"Key":"place of","Fragments":["```n```","operator[].","\u003c.","more"]},{"Key":" Primes","Fragments":["are"]},{"Key":"Primes are","Fragments":["tricky,"]},{"Key":"are tricky,","Fragments":["good"]},{"Key":"tricky, good","Fragments":["luck."]},{"Key":"The stack","Fragments":["overflow"]},{"Key":"overflow link","Fragments":["is:"]},{"Key":" Made","Fragments":["it","`zip`","a","sure","some","it","it","a"]},{"Key":"Made it","Fragments":["a","a","a"]},{"Key":"it a","Fragments":["whole","try.","bit","const","lot","few","template","`Creature`","little","prerequisite","little","thought","try","good","few","value","const-reference","little","bit","lot","const.","little","try","little","different","bit","bit","little"]},{"Key":"a whole","Fragments":["bunch","line","lot.","ton"]},{"Key":"whole bunch","Fragments":["shorter"]},{"Key":"bunch shorter","Fragments":["after"]},{"Key":"shorter after","Fragments":["learning"]},{"Key":"after learning","Fragments":["about"]},{"Key":"learning about","Fragments":["map","these"]},{"Key":"about map","Fragments":["iterators."]},{"Key":" Focused","Fragments":["on"]},{"Key":"Focused on","Fragments":["trying"]},{"Key":"on trying","Fragments":["to"]},{"Key":"create a","Fragments":["simple","class","letter_count","copy","new","default-initialized","new","copy.","backreference","single","copy","new","method","copy","brand","class","class","namespace,","file","function","mapping","copy","C-style","class","string","constructor"]},{"Key":"a simple","Fragments":["vector","regex.","task?","task?","task?","task?","task?","task?","task?","task?","task","task?","task?","task?","task?","rule:","subtraction).","for","case","clear","case","note:","program,","program,","namespace","`for`","helper","programming","Sieve","for","loop?"]},{"Key":"simple vector","Fragments":["of"]},{"Key":"vector of","Fragments":["words","string","the","size","vectors","strings","words","those","words","words","just","pairs","words","words","string"]},{"Key":"of words","Fragments":["that","not","in","and","and","and","to","and"]},{"Key":"words that","Fragments":["I","are","aren't"]},{"Key":"could iterate","Fragments":["over","over","across"]},{"Key":"iterate over","Fragments":["and","```flag_vec```","the","the","fixing","the","two","the","the","every","the","the","the","the"]},{"Key":"over and","Fragments":["create"]},{"Key":"and create","Fragments":["my","a"]},{"Key":"create my","Fragments":["counter"]},{"Key":"my counter","Fragments":["map"]},{"Key":"counter map","Fragments":["with."]},{"Key":" Interesting,","Fragments":["I","thanks","when","I","didn't"]},{"Key":"Interesting, I","Fragments":["like","assume"]},{"Key":"the optimization","Fragments":["of","suggestion"]},{"Key":"optimization of","Fragments":["extracting"]},{"Key":"of extracting","Fragments":["prime","those"]},{"Key":"extracting prime","Fragments":["numbers"]},{"Key":"prime numbers","Fragments":["after","every","and"]},{"Key":"numbers after","Fragments":["```sqrt(max_num)```"]},{"Key":"after ```sqrt(max_num)```","Fragments":["(lines"]},{"Key":"```sqrt(max_num)``` (lines","Fragments":["48-50)."]},{"Key":" Many,","Fragments":["many"]},{"Key":"Many, many","Fragments":["ways"]},{"Key":"many ways","Fragments":["to","the","to"]},{"Key":"ways to","Fragments":["write","do","ensure","avoid","shorten","do","tune","reject","improve","do"]},{"Key":"a Sieve","Fragments":["or"]},{"Key":"Sieve or","Fragments":["Eratosthenes"]},{"Key":"or Eratosthenes","Fragments":["["]},{"Key":"Eratosthenes [","Fragments":["\u003ca"]},{"Key":"[ \u003ca","Fragments":["href=http://rosettacode.org/wiki/Category:C%2B%2B\u003eRosettacode\u003c/a\u003e","href=http://www.learncpp.com/cpp-tutorial/53-switch-statements/\u003eswitch","href=http://www.cplusplus.com/reference/string/string/operator+=/\u003eoperator+=\u003c/a\u003e","href=http://www.cplusplus.com/reference/string/string/pop_back/\u003epop_back\u003c/a\u003e","href=http://www.cplusplus.com/reference/string/string/empty/\u003estring::empty\u003c/a\u003e","href=http://stackoverflow.com/questions/321068/returning-multiple-values-from-a-c-function\u003eStack","href=http://www.cplusplus.com/reference/string/string/operator%5B%5D/\u003estring::operator[]\u003c/a\u003e","href=http://stackoverflow.com/questions/236129/split-a-string-in-c\u003eSplit","href=http://www.cprogramming.com/c++11/c++11-ranged-for-loop.html\u003eC++11","href=http://stackoverflow.com/questions/5087091/what-does-the-stl-mapkey-return-if-the-key-wasnt-a-initialized-key-in-the-map\u003e","href=http://www.cplusplus.com/doc/tutorial/preprocessor/\u003epreprocessor\u003c/a\u003e"]},{"Key":"\u003ca href=http://rosettacode.org/wiki/Category:C%2B%2B\u003eRosettacode\u003c/a\u003e","Fragments":["]"]},{"Key":"A simple","Fragments":["optimization,","example","for","for"]},{"Key":"simple optimization,","Fragments":["factors"]},{"Key":"optimization, factors","Fragments":["(lines"]},{"Key":"factors (lines","Fragments":["36-37)"]},{"Key":"(lines 36-37)","Fragments":["can"]},{"Key":"36-37) can","Fragments":["start"]},{"Key":"can start","Fragments":["from","at"]},{"Key":"start from","Fragments":["a","2"]},{"Key":"a squares","Fragments":["prime"]},{"Key":"squares prime","Fragments":["when"]},{"Key":"prime when","Fragments":["found"]},{"Key":"when found","Fragments":["in"]},{"Key":"in sequence","Fragments":["like"]},{"Key":"sequence like","Fragments":["this."]},{"Key":"be easier","Fragments":["to","to","on","to","to","to","if","in","to","to","to","to"]},{"Key":"to iterate","Fragments":["over","over","from","(in","over","over","over","over,","over","the"]},{"Key":"over ```flag_vec```","Fragments":["start"]},{"Key":"```flag_vec``` start","Fragments":["from"]},{"Key":"from 2","Fragments":["and","to","to"]},{"Key":"2 and","Fragments":["use","3","comparing"]},{"Key":"the index","Fragments":["as","based","of","at","of"]},{"Key":"index as","Fragments":["the"]},{"Key":"number being","Fragments":["tested."]},{"Key":"being tested.","Fragments":["Saves"]},{"Key":"tested. Saves","Fragments":["building"]},{"Key":"Saves building","Fragments":["```num_vec```,"]},{"Key":"building ```num_vec```,","Fragments":["pseudocode:"]},{"Key":" for(int","Fragments":["i","i","i=0;","i=0;","i=0;"]},{"Key":"for(int i","Fragments":["=","="]},{"Key":"i =","Fragments":["2;","0;","trim_quotes(i);","0`","5;","1;","1","number.begin();i","0;","start;","foo();","0;","1","0;","bobHears.length()-1;","0;","0;","0;","0;","0;","2;","0;","3,","words.begin();"]},{"Key":"= 2;","Fragments":["i"]},{"Key":"2; i","Fragments":["*"]},{"Key":"i *","Fragments":["i","i;"]},{"Key":"* i","Fragments":["\u003c"]},{"Key":"i \u003c","Fragments":["max_num;","input.size();","WHATEVER;","BLAH;","message.length();","length;","question.size();","str1.length()","phrase.length();","word.length().","something.length()`."]},{"Key":"\u003c max_num;","Fragments":["i++)"]},{"Key":" add","Fragments":["prime"]},{"Key":"add prime","Fragments":["i"]},{"Key":"prime i","Fragments":["to"]},{"Key":"i to","Fragments":["answer","be"]},{"Key":"(int j","Fragments":["=",":"]},{"Key":"j =","Fragments":["i","foo();"]},{"Key":"= i","Fragments":["*"]},{"Key":"* i;","Fragments":["j"]},{"Key":"i; j","Fragments":["\u003c="]},{"Key":"j \u003c=","Fragments":["max_num;"]},{"Key":"\u003c= max_num;","Fragments":["j"]},{"Key":"max_num; j","Fragments":["+="]},{"Key":"j +=","Fragments":["i)","numers[i].first,"]},{"Key":" flag_vec[j]","Fragments":["="]},{"Key":"flag_vec[j] =","Fragments":["false;"]},{"Key":" pick","Fragments":["remaining"]},{"Key":"pick remaining","Fragments":["primes"]},{"Key":"remaining primes","Fragments":["from"]},{"Key":"primes from","Fragments":["sieve","files,","1"]},{"Key":"If I","Fragments":["had","am","moved","may","define","see","had","asked","pass","add","didn't","broke","was","didn't","were","have","can,","typed","include","replace","understand","could","had","change","understood","were","pass","wanted","were"]},{"Key":"had used","Fragments":["`count`"]},{"Key":"used `count`","Fragments":["and"]},{"Key":"`count` and","Fragments":["`at`","`step`,"]},{"Key":"and `at`","Fragments":["functions"]},{"Key":"`at` functions","Fragments":["of"]},{"Key":"functions of","Fragments":["`map`,"]},{"Key":"of `map`,","Fragments":["this"]},{"Key":"`map`, this","Fragments":["would"]},{"Key":"this would","Fragments":["have","be","stop","be","simplify","lead","be","be"]},{"Key":"would have","Fragments":["been","been","put","been","to","the","been","to","is","believed","started,","failed?","had","used","to","become","to","no","the","combined","worked","each","been","given","the","failed","to","been","the","to","no","an","*external","been","been","done","to","done","added","used","changed","also","still","had","to","been","wrapped","just","required","confused"]},{"Key":"have been","Fragments":["more","overkill.","similar.","```IVI```.","made","redone","covered","in","but","done","the","better","passed.","linking.","replaced","allocated","declared","declared","a","left","implemented.","easier","found,","a","a","apart","better","so","the","explicitly","more","made.","possible","using.","better","coded","tried","enlightening.","more","cool."]},{"Key":"been more","Fragments":["concise.","readable,","clear."]},{"Key":" Not","Fragments":["sure","sure","the","including","necessary","all","everything","sure","that","sure","recommending","so","a","quite","sure","to","sure","sure","sure","sure","aware","sure","that"]},{"Key":"Not sure","Fragments":["if","why","if","if","if","why","if","on","if","this","if","what","how","the","I'm","if"]},{"Key":"sure if","Fragments":["I","I","switching","this","it","the","this","it","it","it","it's","this","the","either","this","it","it","it","it's","that's","it","it","`static`","this","there","there's","the","I","counting","treating","you","`iends_with`","this","that","your","it","I","I"]},{"Key":"I prefer","Fragments":["my","\u003calgorithm\u003e","to","the","to","++result","to","functional","returning","this","the","the","the","the","the","to","the","the","less","the","callbacks","less","to","to","the","it."]},{"Key":"prefer my","Fragments":["original"]},{"Key":"my original","Fragments":["std::for_each","iteration","submission"]},{"Key":"original std::for_each","Fragments":["version"]},{"Key":"std::for_each version","Fragments":["or"]},{"Key":"version or","Fragments":["this"]},{"Key":"or this","Fragments":["std::transform"]},{"Key":"this std::transform","Fragments":["which"]},{"Key":"std::transform which","Fragments":["makes","I"]},{"Key":"which makes","Fragments":["sense","your","this","them"]},{"Key":"makes sense","Fragments":["but","in","inside","to","if","that","if","since","to","while","to","for","but"]},{"Key":"sense but","Fragments":["has","looks"]},{"Key":"but has","Fragments":["weird","a"]},{"Key":"has weird","Fragments":["syntax..."]},{"Key":"weird syntax...","Fragments":["maybe"]},{"Key":"syntax... maybe","Fragments":["ultimately"]},{"Key":"maybe ultimately","Fragments":["a"]},{"Key":"ultimately a","Fragments":["good"]},{"Key":"good old","Fragments":["for"]},{"Key":"old for","Fragments":["loop"]},{"Key":"for loop","Fragments":["would","nested","won't","to","I","to","this","to","never","inside","and","syntax","in","on","is","not","in","over","is","since","alot","could","completed.","iterating","in","is","to","conditional","is","to","would","will","after","construct","so","in","at","```for","over","with","in","indices","was","would","as","in"]},{"Key":"loop would","Fragments":["be","be","go","have","perform","help","be"]},{"Key":" Overall","Fragments":["quite","great","a","a","this","it","this","a","this"]},{"Key":"Overall quite","Fragments":["good."]},{"Key":"quite good.","Fragments":["A","Some"]},{"Key":"few tips","Fragments":["to"]},{"Key":"tips to","Fragments":["clean"]},{"Key":"to clean","Fragments":["things","it","up,","up"]},{"Key":"clean things","Fragments":["up.","up"]},{"Key":" Nested","Fragments":["```if```/```else```"]},{"Key":"Nested ```if```/```else```","Fragments":["statements"]},{"Key":"```if```/```else``` statements","Fragments":["get"]},{"Key":"statements get","Fragments":["a"]},{"Key":"get a","Fragments":["bit","compile","signed","warning","compile","compiler","bit","bit","lot","by-value","reference","`hey`","length","little","much","bunch","return","precision","divide","positive","default","copy","result"]},{"Key":"bit deep,","Fragments":["a"]},{"Key":"deep, a","Fragments":["switch"]},{"Key":"switch statement","Fragments":["might","in","because","instead","in","to","to","I","for","would"]},{"Key":"statement might","Fragments":["be"]},{"Key":"more appropriate","Fragments":["for","than","to","than","than","here"]},{"Key":"appropriate for","Fragments":["the"]},{"Key":"special cases","Fragments":["of","before","other","like","at","it's","this"]},{"Key":"cases of","Fragments":["beer"]},{"Key":"of beer","Fragments":["[","on","on","on","on","on","since"]},{"Key":"beer [","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://www.learncpp.com/cpp-tutorial/53-switch-statements/\u003eswitch","Fragments":["statement\u003c/a\u003e"]},{"Key":"href=http://www.learncpp.com/cpp-tutorial/53-switch-statements/\u003eswitch statement\u003c/a\u003e","Fragments":["]"]},{"Key":" Strings","Fragments":["support"]},{"Key":"Strings support","Fragments":["```+=```"]},{"Key":"support ```+=```","Fragments":["to"]},{"Key":"```+=``` to","Fragments":["append"]},{"Key":"to append","Fragments":["if","it"]},{"Key":"append if","Fragments":["you"]},{"Key":"you want","Fragments":["[","to","you","to","to","it","you","to","to","to","to","to","before","to","an","to","to","to","to","a","in","it","to","from","to","it",":-)","that","to","to","is","to","to","to","to","them","to","to","depends","to","to","a","the","a","to","to","to","in","to","to","to","to","to","to","to"]},{"Key":"want [","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://www.cplusplus.com/reference/string/string/operator+=/\u003eoperator+=\u003c/a\u003e","Fragments":["]"]},{"Key":" ```pop_back```","Fragments":["might"]},{"Key":"```pop_back``` might","Fragments":["be"]},{"Key":"good alternative","Fragments":["to"]},{"Key":"alternative to","Fragments":["```substr```","this","the","consider","indexing"]},{"Key":"to ```substr```","Fragments":["["]},{"Key":"```substr``` [","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://www.cplusplus.com/reference/string/string/pop_back/\u003epop_back\u003c/a\u003e","Fragments":["]"]},{"Key":"was thinking","Fragments":["about","more","of","of","it","of.","there","of","\"how"]},{"Key":"thinking about","Fragments":["going","it","changing","the","pass-by-value/reference","a","why","the"]},{"Key":"about going","Fragments":["with"]},{"Key":"going with","Fragments":["a","more","a"]},{"Key":"a map\u003cchar,","Fragments":["char\u003e"]},{"Key":"map\u003cchar, char\u003e","Fragments":["but"]},{"Key":"char\u003e but","Fragments":["I"]},{"Key":"think I","Fragments":["think","was","mentioned","can","need","can","need","was","see","misunderstood","left","can","should","did.","made","see","will","get","prefer","tried","missed","need","would.","prefer","understand"]},{"Key":"think a","Fragments":["switch","signed","lot.","lot","`std::map`","better","better","\"beer"]},{"Key":"switch will","Fragments":["outperform"]},{"Key":"will outperform","Fragments":["a"]},{"Key":"outperform a","Fragments":["map."]},{"Key":"a map.","Fragments":["isn't","I"]},{"Key":"map. isn't","Fragments":["worst"]},{"Key":"isn't worst","Fragments":["case"]},{"Key":"worst case","Fragments":["for","(no","time","complexity"]},{"Key":"case for","Fragments":["a","spider","that.","silence","auto.","bob","me.","a","it","the"]},{"Key":"map like","Fragments":["O(N)?","that."]},{"Key":"The C++","Fragments":["Standard","Extended","standard"]},{"Key":"C++ Standard","Fragments":["guarantees","nor","and"]},{"Key":"Standard guarantees","Fragments":["that"]},{"Key":"guarantees that","Fragments":["`find()`"]},{"Key":"that `find()`","Fragments":["for"]},{"Key":"`find()` for","Fragments":["associative"]},{"Key":"for associative","Fragments":["containers"]},{"Key":"associative containers","Fragments":["like"]},{"Key":"containers like","Fragments":["map","string"]},{"Key":"like map","Fragments":["is"]},{"Key":"is logarithmic","Fragments":["(C++"]},{"Key":"logarithmic (C++","Fragments":["Standard"]},{"Key":"(C++ Standard","Fragments":["2003"]},{"Key":"Standard 2003","Fragments":["23.1.2)."]},{"Key":"2003 23.1.2).","Fragments":["But"]},{"Key":"23.1.2). But","Fragments":["for"]},{"Key":"But for","Fragments":["a","some","anything","large","me,"]},{"Key":"a container","Fragments":["of","object."]},{"Key":"container of","Fragments":["constant"]},{"Key":"of constant","Fragments":["`N`"]},{"Key":"constant `N`","Fragments":["`log(N)`"]},{"Key":"`N` `log(N)`","Fragments":["is"]},{"Key":"`log(N)` is","Fragments":["also"]},{"Key":"also constant,","Fragments":["so"]},{"Key":"constant, so","Fragments":["from"]},{"Key":"so from","Fragments":["the"]},{"Key":"the view","Fragments":["of"]},{"Key":"view of","Fragments":["your","the","a"]},{"Key":"function both","Fragments":["the"]},{"Key":"map are","Fragments":["in","a"]},{"Key":"are in","Fragments":["`O(1)`.","your","a","the","the","`namespace","`bob_test.cpp`","the","standard","a","an"]},{"Key":"From an","Fragments":["optimization"]},{"Key":"an optimization","Fragments":["point","to"]},{"Key":"optimization point","Fragments":["of"]},{"Key":"of view,","Fragments":["the","here"]},{"Key":"view, the","Fragments":["difference"]},{"Key":"the difference","Fragments":["might","between","between","of","is","between","will","is","is","in"]},{"Key":"difference might","Fragments":["matter."]},{"Key":"might matter.","Fragments":["E.g."]},{"Key":"matter. E.g.","Fragments":["the"]},{"Key":"E.g. the","Fragments":["compiler"]},{"Key":"the compiler","Fragments":["is","will","to","is","cant","has","has","(","could","can","default","cannot","still","really.","might","will","will","tackles","sees","the","figure","is","to","is","based","to","decide","shouldn't","is","scream.","for","determines","from","understands","cannot","i","(see","that","will","knows","didn't","and","you","you","on","a","optimizations.","automatically","beforehand","looks","will","a","a","(I","deal","will","to","may","directions","to","just"]},{"Key":"compiler is","Fragments":["allowed","very","obligated","not","doing","necessary.","no","picking"]},{"Key":"is allowed","Fragments":["to"]},{"Key":"allowed to","Fragments":["optimize","use"]},{"Key":"to optimize","Fragments":["your","the","for","that","away","everyting.","things"]},{"Key":"optimize your","Fragments":["function"]},{"Key":"a direct","Fragments":["jump","call"]},{"Key":"direct jump","Fragments":["based"]},{"Key":"jump based","Fragments":["on"]},{"Key":"the character.","Fragments":["But","Index"]},{"Key":"character. But","Fragments":["to"]},{"Key":"Michael A.","Fragments":["Jackson:","Jackson"]},{"Key":"A. Jackson:","Fragments":["\"The"]},{"Key":"Jackson: \"The","Fragments":["first"]},{"Key":"\"The first","Fragments":["rule"]},{"Key":"first rule","Fragments":["of"]},{"Key":"rule of","Fragments":["program","program","thumb","thumb","thumb:","thumb","thumb,"]},{"Key":"of program","Fragments":["optimization:","optimization","is"]},{"Key":"program optimization:","Fragments":["Don't"]},{"Key":"optimization: Don't","Fragments":["do"]},{"Key":"The second","Fragments":["rule","is","argument","thing","form","one","has","loop"]},{"Key":"second rule","Fragments":["of"]},{"Key":"program optimization","Fragments":["(for"]},{"Key":"optimization (for","Fragments":["experts"]},{"Key":"The only","Fragments":["thing","improvement","thing","nitpick","reason","\"observable\"","place","significant","reason","condition","real","reason","function","non-performance-related","way","place","change","last","function","downside","real","two","difference","characters","thing","nitpick","thing","trick","part","nitpick","thing"]},{"Key":"only thing","Fragments":["that","that","you","i","i","the","influencing","to","I","I","that","I","I"]},{"Key":"thing that","Fragments":["surprised","could","stands","I","would","makes","came","someone","causes"]},{"Key":"that surprised","Fragments":["me"]},{"Key":"surprised me","Fragments":["was","how"]},{"Key":"me was","Fragments":["that","use"]},{"Key":"was that","Fragments":["`to_rna()`","a","the","it","we"]},{"Key":"that `to_rna()`","Fragments":["returns"]},{"Key":"`to_rna()` returns","Fragments":["`'\\0'`"]},{"Key":"returns `'\\0'`","Fragments":["if"]},{"Key":"`'\\0'` if","Fragments":["the"]},{"Key":"the character","Fragments":["`c`","being","in","'?'.","classification","classification","classification","is","as","occurences","occurences","is","counts","'b'","part","is","is"]},{"Key":"character `c`","Fragments":["is"]},{"Key":"`c` is","Fragments":["not"]},{"Key":"not valid.","Fragments":["From"]},{"Key":"valid. From","Fragments":["the"]},{"Key":"From the","Fragments":["other","name,"]},{"Key":"other submissions","Fragments":["I'm","are","are,","I","`any_of`,","for","look"]},{"Key":"submissions I'm","Fragments":["more"]},{"Key":"I'm more","Fragments":["used"]},{"Key":"more used","Fragments":["to","to"]},{"Key":"to returning","Fragments":["the","a","the"]},{"Key":"original character","Fragments":["or"]},{"Key":"character or","Fragments":["throwing","newline"]},{"Key":"an exception.","Fragments":["You","(see","The"]},{"Key":"exception. You","Fragments":["choice"]},{"Key":"You choice","Fragments":["is"]},{"Key":"choice is","Fragments":["valid,","that"]},{"Key":"is valid,","Fragments":["but"]},{"Key":"valid, but","Fragments":["I"]},{"Key":"would document","Fragments":["it."]},{"Key":" Are","Fragments":["the","strings","the","the","you"]},{"Key":"Are the","Fragments":["triangle","iostreams","iostreams","includes"]},{"Key":"the triangle","Fragments":["types","sides"]},{"Key":"triangle types","Fragments":["defined"]},{"Key":"types defined","Fragments":["in"]},{"Key":"the header?","Fragments":["If","If","This"]},{"Key":"header? If","Fragments":["so","anyone"]},{"Key":"If so","Fragments":["would","you"]},{"Key":"so would","Fragments":["you"]},{"Key":"would you","Fragments":["put","pass","have","move"]},{"Key":"put that","Fragments":["(commented","anonymous","in","aside","in."]},{"Key":"that (commented","Fragments":["out)"]},{"Key":"(commented out)","Fragments":["in"]},{"Key":"out) in","Fragments":["here?"]},{"Key":" Other","Fragments":["then","people's","than","then","than","than","than"]},{"Key":"Other then","Fragments":["that","that"]},{"Key":"then that","Fragments":["looks","looks","fails","i"]},{"Key":"that looks","Fragments":["good.","for","for","like","good","like","good","like"]},{"Key":"point on","Fragments":["the","complexity","the","why","the"]},{"Key":"the missing","Fragments":["header.","permutations,","commas)."]},{"Key":"missing header.","Fragments":["I"]},{"Key":"header. I","Fragments":["used","changed"]},{"Key":"I used","Fragments":["the","the","an","the","the","a","it","for","in","that","the","something","a","the","to","a","to","cout","``namespace``","char","a","the","static","the","in","a","a","only","braces","GCC","a","the","it.","both","back()","the","an","to","protected","a","`if`","word","a","cstring"]},{"Key":"used the","Fragments":["printf","same","reference","ternary","member","boost::Tokenizer","blank","`struct`","char*","_alphaFound_","[`trim()`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html)","boost","cstring","command","same","boost","steps","auto"]},{"Key":"the printf","Fragments":["family"]},{"Key":"printf family","Fragments":["as"]},{"Key":"family as","Fragments":["a"]},{"Key":"a familiar","Fragments":["solution"]},{"Key":"familiar solution","Fragments":["for"]},{"Key":"solution for","Fragments":["zero-filling","your","the","rna-converter,","isShouting","this","what"]},{"Key":"for zero-filling","Fragments":["the"]},{"Key":"zero-filling the","Fragments":["numeric"]},{"Key":"the numeric","Fragments":["part.","header)."]},{"Key":"numeric part.","Fragments":["I've"]},{"Key":"part. I've","Fragments":["since"]},{"Key":"I've since","Fragments":["changed"]},{"Key":"since changed","Fragments":["to"]},{"Key":"changed to","Fragments":["c++","the","use","find_if_not(),"]},{"Key":"to c++","Fragments":["native","and","world,","programming","for"]},{"Key":"c++ native","Fragments":["stringstreams."]},{"Key":"native stringstreams.","Fragments":["Still"]},{"Key":"stringstreams. Still","Fragments":["looks"]},{"Key":"Still looks","Fragments":["kludgy","a"]},{"Key":"looks kludgy","Fragments":["though."]},{"Key":"I changed","Fragments":["to","the","the","my","the","how","my","from","the"]},{"Key":"the boost-like","Fragments":["c++11"]},{"Key":"boost-like c++11","Fragments":["uniform_int_distribution."]},{"Key":"c++11 uniform_int_distribution.","Fragments":["That"]},{"Key":"uniform_int_distribution. That","Fragments":["said,"]},{"Key":"That said,","Fragments":["I","vector","there","a","honestly,","given","I","I","I'll","I","in"]},{"Key":"said, I","Fragments":["don't","am","think","will","suggest","find","think"]},{"Key":"think the","Fragments":["quality","split","only","use","only","explicit","optimal","lyrics","compiler","reason","switch","original","normal","latter","size_t","recursion","precision","from-file","```sum","responses","separation","general","gist","iterator","best","most","code","isEmpty","upside","code","responses","rbegin","answer","code","last","solution","reason","use","conv.empty()","solutiion","creation","new","erase-remove","sorted","test","enumeration","destructor","readability"]},{"Key":"the quality","Fragments":["of"]},{"Key":"quality of","Fragments":["randomness"]},{"Key":"of randomness","Fragments":["is"]},{"Key":"randomness is","Fragments":["important"]},{"Key":"is important","Fragments":["for","to","for","to"]},{"Key":"important for","Fragments":["this","larger","multi-file"]},{"Key":"for this","Fragments":["problem,","exercise).","exercise","problem.","exercise","I","right","case","simple","simple","simple","simple","simple","instead","exercises.","is","even","version...",".cpp's","simple","problem.","kind","exercise?","and","object","problem.","exercise.","exercise.","kind","one,","task?","problem","function?","exercise.","exercise.","exercise.","exercise","variable.","function","code.","case,","task.","task.","job.","task","task.","exercise","exercise.","problem,","particular","example)","exercise.","enum.","two","problem.","function","simple","example","application.","solution.","simple","check,","simple","simple","exercise.","case,","test","problem,","task.","issue","first","one","method","string","simple"]},{"Key":"this problem,","Fragments":["only","probably","passing","especially","using","I"]},{"Key":"problem, only","Fragments":["that"]},{"Key":"only that","Fragments":["the","it"]},{"Key":"the names","Fragments":["are","will","this","you","together","vector.","as","from","it","up"]},{"Key":"names are","Fragments":["likely","clear,","difficult","explicit","oddly","not","put","checked."]},{"Key":"are likely","Fragments":["to"]},{"Key":"likely to","Fragments":["be","resize","be","use","be","fail"]},{"Key":"be unique.","Fragments":["In"]},{"Key":"unique. In","Fragments":["fact,"]},{"Key":"In fact,","Fragments":["an","the","this","casting","a","doing","it's","the","I","if","if","you"]},{"Key":"fact, an","Fragments":["early"]},{"Key":"an early","Fragments":["thought","exit","return","return.","revision.","return"]},{"Key":"early thought","Fragments":["was"]},{"Key":"thought was","Fragments":["to","worth"]},{"Key":"to assign","Fragments":["sequential","that","it","to"]},{"Key":"assign sequential","Fragments":["numbers."]},{"Key":"sequential numbers.","Fragments":["That"]},{"Key":"numbers. That","Fragments":["might"]},{"Key":"more efficient","Fragments":["but","histogram","to","in","than","*and*","in","so","to","than","considering","and,","than","overall","to","erase"]},{"Key":"efficient but","Fragments":["may"]},{"Key":"but may","Fragments":["allow","make"]},{"Key":"may allow","Fragments":["a"]},{"Key":"allow a","Fragments":["third"]},{"Key":"a third","Fragments":["party","element","function","submission"]},{"Key":"third party","Fragments":["to"]},{"Key":"party to","Fragments":["predict"]},{"Key":"to predict","Fragments":["the","and"]},{"Key":"predict the","Fragments":["next"]},{"Key":"the next","Fragments":["name.","best","iteration","part","version","exercise.","test","version.","iteration.","prime","factor","iteration,","ieteration!","iteration","test","test.","recommendation","unstarted","iteration.","loop","iteration","version.","one.","iteration","person.","word","iteration.","stage","iteration.","iteration.","iteration.","test","iteration","line","iteration.","iteration."]},{"Key":"for these","Fragments":["informative","operations.","kind","exercises","exercises","exercises.","two","operations"]},{"Key":"these informative","Fragments":["links."]},{"Key":"Thanks so","Fragments":["much","much"]},{"Key":"much for","Fragments":["feedback","your","your","your","your","looking","those"]},{"Key":"for feedback","Fragments":["!"]},{"Key":"I have","Fragments":["updated","no","in","to","found","would","learned","tried","some","some","two","a","still","it","to!","no","seen","to","to","standard","to","never","to","to","no","to","with","never","already","to","to","run","to","an","in","to","my","two","made","a","a","to","worked","to","to","changed","and","in","that","addressed","auto,","no","with","to","no","checked","to","to","2.5","replaced","helped","to","some","*never*","tried","since","to","a","a","one","no","a","yet","downloaded","not","been","a","no","now","iostream","to","to","a","are","to","to","created","decided","3","3","3","3","a","tried","to","Robert","uploaded","seen","incorporated","to","writen","attempted","a","a","pointers.","come","seen","always","a","not","the","read","never","to","the","the","found","is","considered","ever","a","mixed","to","reverted","a","is","a"]},{"Key":"have updated","Fragments":["the"]},{"Key":"updated the","Fragments":["code","test","is_empty","solution,"]},{"Key":"code and","Fragments":["it","add","also","the","it","see","although","still","testing","that","looked","no","return","not","giving","forgot","the"]},{"Key":"it looks","Fragments":["much","in","like","a","like","like","great.","like","like","like","like","decent.","like","great.","far","more","like","to","like","like","like","like","off.","like","like","like","like"]},{"Key":"looks much","Fragments":["better","better!","better","cleaner.","better","prettier."]},{"Key":"much better","Fragments":["now.","way","readable,","version.","than","for","one","(though","than","design","now.","time."]},{"Key":" Interesting","Fragments":["approach,","use","'classify-oriented'","use-case","way","use","implementation."]},{"Key":"Interesting approach,","Fragments":["I"]},{"Key":"approach, I","Fragments":["like","was","was","was","was"]},{"Key":"like how","Fragments":["you","you","you","``using","meaningful","clear","`hey`","you","you","your","short","short","you","you've","cleanly","you","clear","you","you","clean","you","you"]},{"Key":"how you","Fragments":["didn't","decompose","decomposed","convert","managed","can","attacked","could","can","classified","could","create","make","made","construct","end","decide","check","can","check","do","use","are","could","could","could","could","could","passed","chose"]},{"Key":"use RegExes.","Fragments":["Using"]},{"Key":"RegExes. Using","Fragments":["the"]},{"Key":"Using the","Fragments":["string","same","C++11","C++11","sort","boost"]},{"Key":"string initialize","Fragments":["to"]},{"Key":"initialize to","Fragments":["slice"]},{"Key":"to slice","Fragments":["the"]},{"Key":"slice the","Fragments":["number"]},{"Key":"number is","Fragments":["clever.","an","store","divisible","prime,","prime.","good","defined"]},{"Key":" Variable","Fragments":["names","names"]},{"Key":"Variable names","Fragments":["need","need"]},{"Key":"names need","Fragments":["some","to"]},{"Key":"need some","Fragments":["work,","of","explanation"]},{"Key":"some work,","Fragments":["```rm_fmt```"]},{"Key":"work, ```rm_fmt```","Fragments":["specifically."]},{"Key":"```rm_fmt``` specifically.","Fragments":["```_pnum```"]},{"Key":"specifically. ```_pnum```","Fragments":["and"]},{"Key":"```_pnum``` and","Fragments":["```_areacode```"]},{"Key":"and ```_areacode```","Fragments":["seems"]},{"Key":"```_areacode``` seems","Fragments":["a"]},{"Key":"seems a","Fragments":["good","little","little","little","bit","bit"]},{"Key":"good candidate","Fragments":["for"]},{"Key":"candidate for","Fragments":["camel"]},{"Key":"for camel","Fragments":["case."]},{"Key":"For readability","Fragments":["```'0'"]},{"Key":"readability ```'0'","Fragments":["\u003c="]},{"Key":"```'0' \u003c=","Fragments":["c"]},{"Key":"\u003c= c","Fragments":["\u0026\u0026"]},{"Key":"c \u0026\u0026","Fragments":["c"]},{"Key":"\u0026\u0026 c","Fragments":["\u003c="]},{"Key":"c \u003c=","Fragments":["'9'```"]},{"Key":"\u003c= '9'```","Fragments":["line"]},{"Key":"'9'``` line","Fragments":["39."]},{"Key":" Conditional","Fragments":["to"]},{"Key":"Conditional to","Fragments":["validate"]},{"Key":"to validate","Fragments":["```tmp_pnum```","its","both","their"]},{"Key":"validate ```tmp_pnum```","Fragments":["is"]},{"Key":"```tmp_pnum``` is","Fragments":["unclear"]},{"Key":"is unclear","Fragments":["because"]},{"Key":"unclear because","Fragments":["of"]},{"Key":"because of","Fragments":["the","the","type","this,","the","words","libs","its","this","the","the","the","the","the","dependency","integer","need","people","the","these","this","how","indexing","the","line","the"]},{"Key":"the negative","Fragments":["test","values...","value"]},{"Key":"negative test","Fragments":["in"]},{"Key":"test in","Fragments":["line","count","the","a","order."]},{"Key":"line 42","Fragments":["and"]},{"Key":"42 and","Fragments":["use"]},{"Key":"use of","Fragments":["fall","iterators","```std::pow```","classes,","boost,","boost.","boost!","`phrase.back()`","boost","map","regex","array","the","the","**explicit**","a","a","the","the","bit","**date_duration**","a","iterators","boost","the","`std::set`","anonymous","map.","the","C++","move","C++?*","std::string","regular","std::random_device()","stringstream","a","i","algorithms!","0x10","the","``std::accumulate``","regex","`pow`","the","the","the","a","`std::isxdigit()`","auto,","```std::accumulate```","`std::accumulate()`","```?```","decltype,","iterators","move","all_of()","s","the","std::any_of","the","regex,","`switch`","STL,","static","header","the","an","an","std::transform,","that","it…","`if","`char*`","the","`std::regex`;","inner_product.","std::string","boost","boost","\"algorithm\"","its","boost::for_each.","an","C++'s","string::back(),","the","`int`","`using`","anonymous","string","static","string","boost","the","STL,","exceptions","namespace.","anonymous","the","the","regex","global","iterators","Boost","a","`typedef`,","static","the","tokenizer.","the","random","the","mod","auto","all","`inline`","std","namespaces,","the","the","__sprintf__","iterators,","inner_product()","whitespace.","a"]},{"Key":"of fall","Fragments":["through."]},{"Key":"fall through.","Fragments":["Also"]},{"Key":"through. Also","Fragments":["misses"]},{"Key":"Also misses","Fragments":["case"]},{"Key":"misses case","Fragments":["of"]},{"Key":"case of","Fragments":["a","(multi)map/set/vector","\"HAVE","an","a","`boost::algorithm::trim()`,","single","arrays.","calling","throwing","a","a","wrong","a","a","exercism,","shouting","throwing","`is_question`,","`const`.","subject_","\u003e2","mismatched","1,2","a"]},{"Key":"a 12+","Fragments":["digit"]},{"Key":"12+ digit","Fragments":["phone"]},{"Key":"digit phone","Fragments":["number.","number"]},{"Key":"Why does","Fragments":["```add```","your"]},{"Key":"does ```add```","Fragments":["take"]},{"Key":"```add``` take","Fragments":["a"]},{"Key":"take a","Fragments":["```char*```","look","little","glance","very","const","predicate.","vector","const","look","look","look","bit","reference","long","better","locale).","look","look","non-trivial","look","step"]},{"Key":"a ```char*```","Fragments":["when"]},{"Key":"```char*``` when","Fragments":["you"]},{"Key":"have ```string```","Fragments":["included","in"]},{"Key":"```string``` included","Fragments":["and"]},{"Key":"included and","Fragments":["have"]},{"Key":"and have","Fragments":["```string```","never","a","it","a","completely","them","only","to","you","very","some","the","it","changed","tests"]},{"Key":"```string``` in","Fragments":["the"]},{"Key":"Nice use","Fragments":["of","of","of","of","of","of","of","of","of","of"]},{"Key":"iterators and","Fragments":["sort","algorithms","for-each-loop?","*iterator","STL","looped","transform/for_each.","algorithm","a","went"]},{"Key":"and sort","Fragments":["methods."]},{"Key":"Good question!","Fragments":["I"]},{"Key":"question! I","Fragments":["have"]},{"Key":"have no","Fragments":["idea","ability","need","effect.","access","reason","lookups","idea","idea","opinion","decoration,","decoration,","experience","problem","idea","idea","letters","access"]},{"Key":"no idea","Fragments":["why","about","what","what","what","how","what"]},{"Key":"idea why","Fragments":["I"]},{"Key":"why I","Fragments":["did","went","have","decided","didn't","filled","put","went","tried","care","am","was","thought","shouldn't","missed","didn't","initially","could","have","choose","felt","should","fell","did","should"]},{"Key":"did that.","Fragments":["It's"]},{"Key":"that. It's","Fragments":["fixed","never"]},{"Key":"It's fixed","Fragments":["in"]},{"Key":"fixed in","Fragments":["iteration","the"]},{"Key":"in iteration","Fragments":["2.","2.","7","2.","2","3!","2.","6,"]},{"Key":" Since","Fragments":["I","the","you're","the","the","I","there","both","this","for","``\"convert\"``","you","you're","your","your","you're","the","you're","you","the","I","it","we","both","I","`a`","your","the","the","this","it","you","we","you","you've"]},{"Key":"Since I","Fragments":["only","see","feel","used","added","don't","am"]},{"Key":"only needed","Fragments":["the","variables.","to","for"]},{"Key":"needed the","Fragments":["digits","wrapping","-lboost_unit_test"]},{"Key":"the digits","Fragments":["in"]},{"Key":"digits in","Fragments":["the"]},{"Key":"string I","Fragments":["felt","always","am","would"]},{"Key":"I felt","Fragments":["like","I","compelled","influenced","was"]},{"Key":"like regex","Fragments":["would"]},{"Key":"regex would","Fragments":["have"]},{"Key":"I stuck","Fragments":["with"]},{"Key":"stuck with","Fragments":["snake","C++03","my"]},{"Key":"with snake","Fragments":["case"]},{"Key":"snake case","Fragments":["because"]},{"Key":"case because","Fragments":["the","it"]},{"Key":"tests use","Fragments":["that"]},{"Key":"use that","Fragments":["style","as","returned","is","as","`true`","library","library"]},{"Key":"that style","Fragments":["of"]},{"Key":"style of","Fragments":["function","initialization","Meyers","writing","the"]},{"Key":"of function","Fragments":["names","comes","`tolower()`.","declarations."]},{"Key":"function names","Fragments":["and","you","`anagram`"]},{"Key":"names and","Fragments":["I've","commenting"]},{"Key":"and I've","Fragments":["been","never","been"]},{"Key":"I've been","Fragments":["in","neglecting","doing","on","using","trying","using","using","looking","submitting"]},{"Key":"been in","Fragments":["python","Russian","the"]},{"Key":"in python","Fragments":["land"]},{"Key":"python land","Fragments":["a"]},{"Key":"land a","Fragments":["lot"]},{"Key":"lot lately","Fragments":["so"]},{"Key":"lately so","Fragments":["I'm"]},{"Key":"so I'm","Fragments":["used","going","fine","not","not","the","not","going","not","happy","glad","not"]},{"Key":"I'm used","Fragments":["to","to","to"]},{"Key":"to seeing","Fragments":["it.","it."]},{"Key":" Changed","Fragments":["it","the","Line","the","pass-by-value","\"ctype.h\"","up","to","bob"]},{"Key":"Changed it","Fragments":["to"]},{"Key":"to `isdigit()`","Fragments":["to"]},{"Key":"`isdigit()` to","Fragments":["make"]},{"Key":"make it","Fragments":["even","difficult","more","easier","more","easier","as","much","into","more","executable","chainable","more","behave","more","more","more","a","as","two","a","clearer","clear","really","shorter?","obvious.","obvious.","clearer","behave","virtually","a","a","clearer","more","easy","reasonably","more","failed.","clear","easy","look","easer","more","a","all","easier","better","so","fit","easier","return","look","more","easier","more"]},{"Key":"it even","Fragments":["more","earlier"]},{"Key":"even more","Fragments":["readable.","evil","readable.","obvious","in"]},{"Key":"was trying","Fragments":["to","to","to","to","to","to","to","to","around","for"]},{"Key":"to not","Fragments":["have","have","risk","have","have","worry","use","only","declare","include","losing","use","make","paste","worry","detect","modify","duplicate"]},{"Key":"not have","Fragments":["duplicate","to","to","to","an","an","this","common-linkage","i","i","to","been","a","copy+paste","a","default","an","optimal","made","used","to","to","a","put","the"]},{"Key":"have duplicate","Fragments":["code","copies"]},{"Key":"duplicate code","Fragments":["for"]},{"Key":"code for","Fragments":["assigning","everything","review","pointer","the"]},{"Key":"for assigning","Fragments":["the","std::tuples"]},{"Key":"assigning the","Fragments":["number","response","value."]},{"Key":"number to","Fragments":["\"0000000000\"","be","keep","any"]},{"Key":"to \"0000000000\"","Fragments":["but"]},{"Key":"\"0000000000\" but","Fragments":["that"]},{"Key":"that made","Fragments":["the","it","me"]},{"Key":"made the","Fragments":["conditional","code","function","tests","same","'hey'","same","control","changes","actual","same","program","same","code","makemap"]},{"Key":"the conditional","Fragments":["really"]},{"Key":"conditional really","Fragments":["confusing."]},{"Key":"Simple solution,","Fragments":["very"]},{"Key":"solution, very","Fragments":["readable."]},{"Key":"very readable.","Fragments":["Duplicate","Plus,","For"]},{"Key":"readable. Duplicate","Fragments":["data,"]},{"Key":"Duplicate data,","Fragments":["not"]},{"Key":"data, not","Fragments":["duplicate"]},{"Key":"not duplicate","Fragments":["code.","the"]},{"Key":"guess the","Fragments":["exercise","code","only","mangling","alternative"]},{"Key":"really is","Fragments":["about","just","an"]},{"Key":"is about","Fragments":["not","polluting","creating","string","as","as"]},{"Key":"about not","Fragments":["repeating"]},{"Key":"not repeating","Fragments":["the"]},{"Key":"repeating the","Fragments":["text"]},{"Key":"the text","Fragments":["lines,","algorithmically","consists","could","that"]},{"Key":"text lines,","Fragments":["although"]},{"Key":"lines, although","Fragments":["the"]},{"Key":"although the","Fragments":["code"]},{"Key":"code isn't","Fragments":["very","doing","able"]},{"Key":"isn't very","Fragments":["easy","efficient","important","good"]},{"Key":"very easy","Fragments":["to","to","to"]},{"Key":"easy to","Fragments":["read.","read","read.","forget","miss","understand","extend;","make","read.","follow","use","reason","change","understand","make","stumble","implement","test","solve.","understand,","solve","scale","scale","scale","scale","index","read,","read.","understand.","understand","read,","do"]},{"Key":"It will","Fragments":["be","always","also","not","avoid","probably","be"]},{"Key":"see how","Fragments":["others","range","to","you","it","it","I","to","similar","comes","the","it","they've","that","your","you","you","you","you","you","you","you"]},{"Key":"how others","Fragments":["have","feel"]},{"Key":"others have","Fragments":["solved"]},{"Key":"have solved","Fragments":["it.."]},{"Key":" \"I","Fragments":["know"]},{"Key":"\"I know","Fragments":["an"]},{"Key":"know an","Fragments":["old","answer,"]},{"Key":"an old","Fragments":["lady","Java","c","iteration.","compiler"]},{"Key":"old lady","Fragments":["who"]},{"Key":"lady who","Fragments":["swallowed"]},{"Key":"who swallowed","Fragments":["a\""]},{"Key":"swallowed a\"","Fragments":["is"]},{"Key":"a\" is","Fragments":["repeated"]},{"Key":"is repeated","Fragments":["on"]},{"Key":"repeated on","Fragments":["every"]},{"Key":"on every","Fragments":["index","platform.","char","call"]},{"Key":"every index","Fragments":["of"]},{"Key":"index of","Fragments":["VERSE_FIRST_LINE,","the","every"]},{"Key":"of VERSE_FIRST_LINE,","Fragments":["it"]},{"Key":"VERSE_FIRST_LINE, it","Fragments":["could"]},{"Key":"it could","Fragments":["easily","be","be,","have","be","be","only","be","be","save","arguably","have","simply","be","be","have","happen","possibly","be","make"]},{"Key":"could easily","Fragments":["be","be","use","be","collide"]},{"Key":"easily be","Fragments":["extracted.","looking","of","extracted"]},{"Key":" Otherwise","Fragments":["I","it"]},{"Key":"Otherwise I","Fragments":["like","think","would","would"]},{"Key":" Do","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","not","you","you","not","you"]},{"Key":"Do you","Fragments":["the","mean","really","have","really","really","really","really","really","really","mean","really","mean","really","really","really","really","really","really","really","really","really","really","really","think","really","agree?","think","think","think","know","agree?","agree?","mean","have","really"]},{"Key":"you the","Fragments":["to","trimmed","answer","declaration","distance()","base","longest"]},{"Key":"the to","Fragments":["throw","be","Argument","work","lowercase"]},{"Key":"to throw","Fragments":["a","--","-","-","an","if","an","a","an","a","a","a","a","std::domain_error","a","a"]},{"Key":"throw a","Fragments":["std::domain_error","std::domain_error","std::domain_error","std::domain_error","std::domain_error","std::domain_error","std::domain_error","std::domain_error","std::domain_error"]},{"Key":"a std::domain_error","Fragments":["somewhere?","if","if","if","if","if","if","if","exception"]},{"Key":" removed","Fragments":["guard","unused","the","`transform`"]},{"Key":"removed guard","Fragments":["conditions,"]},{"Key":"guard conditions,","Fragments":["not"]},{"Key":"conditions, not","Fragments":["needed"]},{"Key":" Fairly","Fragments":["easy","trivial."]},{"Key":"Fairly easy","Fragments":["problem"]},{"Key":"easy problem","Fragments":["(though"]},{"Key":"problem (though","Fragments":["phone"]},{"Key":"(though phone","Fragments":["number"]},{"Key":"phone number","Fragments":["formatting","is","has"]},{"Key":"number formatting","Fragments":["in"]},{"Key":"formatting in","Fragments":["general"]},{"Key":"in general","Fragments":["is","think","C++","I","that"]},{"Key":"general is","Fragments":["%hard%)."]},{"Key":"is %hard%).","Fragments":["However,"]},{"Key":"%hard%). However,","Fragments":["I"]},{"Key":"However, I","Fragments":["thought","am","like","don't","notice","think","think","don't"]},{"Key":"I thought","Fragments":["the","`phone`","about","it","it","about","the","it","scanning","there","about","it","about","this","of.","now.","I","that","it","of","using","it","if","of","that","that","was","an","of","one","I","that","the","it"]},{"Key":"thought the","Fragments":["need","test","`verses`","size-diff"]},{"Key":"the need","Fragments":["to","for","for","to","for","to","for","for","for","to","of","for","of","to","for","to","to","for","for","to","for"]},{"Key":"to declare","Fragments":["an","`curr_val`","your","your","non-template","variables","query","variables","something","`num_l`","`i`","functions","a","large"]},{"Key":"declare an","Fragments":["explicit"]},{"Key":"an explicit","Fragments":["conversion","boolean","conversion.","loop","for","way"]},{"Key":"explicit conversion","Fragments":["operator","of"]},{"Key":"conversion operator","Fragments":["was","std::string()","call"]},{"Key":"operator was","Fragments":["a"]},{"Key":"bit tricky.","Fragments":["A"]},{"Key":"tricky. A","Fragments":["hint"]},{"Key":"A hint","Fragments":["of"]},{"Key":"hint of","Fragments":["some"]},{"Key":"some kind","Fragments":["would","of","of"]},{"Key":"kind would","Fragments":["be"]},{"Key":"be useful","Fragments":["here,","for","utilities","for"]},{"Key":"useful here,","Fragments":["as"]},{"Key":"here, as","Fragments":["that","I'm","it"]},{"Key":"as that","Fragments":["is","link","better","is"]},{"Key":"is (to","Fragments":["my"]},{"Key":"(to my","Fragments":["eyes","eyes)","detriment)","mind"]},{"Key":"my eyes","Fragments":["at"]},{"Key":"eyes at","Fragments":["least)"]},{"Key":"at least)","Fragments":["a","go","is","to"]},{"Key":"least) a","Fragments":["non-trivial"]},{"Key":"a non-trivial","Fragments":["bit","(pronounced:"]},{"Key":"non-trivial bit","Fragments":["of"]},{"Key":"bit of","Fragments":["C++.","syntactic","information","a","a","safety","an","work","a","an","simplification.","overhead","efficiency","grepping.","C++","overhead","efficiency","C.","overhead.","memory","overkill,","cleanup.","cleanup.","an","work","unnecessary","code"]},{"Key":"A bit","Fragments":["verbose","about","of"]},{"Key":"bit verbose","Fragments":["but"]},{"Key":"verbose but","Fragments":["quite"]},{"Key":"but quite","Fragments":["good."]},{"Key":"good. Some","Fragments":["alternatives"]},{"Key":"Some alternatives","Fragments":["to"]},{"Key":"alternatives to","Fragments":["writing","solve"]},{"Key":"to writing","Fragments":["out","the","std::move","comments"]},{"Key":"writing out","Fragments":["every","the","what","all"]},{"Key":"out every","Fragments":["function."]},{"Key":" Write","Fragments":["a","an"]},{"Key":"Write a","Fragments":["function"]},{"Key":"function that","Fragments":["returns","looks","specifically","generates","only","it","takes","can","does","does","the","expects","takes","does","needs","does","needs","is","takes","returned","speaks","ignores","is","needs","fits","takes","then","lowercases","returns","checks","the","does"]},{"Key":"that returns","Fragments":["a","the","the","the","false","the"]},{"Key":"returns a","Fragments":["function.","reference","reference","reference","double,","double,","`double`","double","const","`const","pointer,","reference","void,","`MessageType`"]},{"Key":"a function.","Fragments":["C++11","The","You","So","Honestly,","All"]},{"Key":"function. C++11","Fragments":["has"]},{"Key":"C++11 has","Fragments":["\u003ca"]},{"Key":"has \u003ca","Fragments":["href=http://stackoverflow.com/questions/12635184/do-we-have-closures-in-c\u003eclosures\u003c/a\u003e"]},{"Key":"\u003ca href=http://stackoverflow.com/questions/12635184/do-we-have-closures-in-c\u003eclosures\u003c/a\u003e","Fragments":["and"]},{"Key":"href=http://stackoverflow.com/questions/12635184/do-we-have-closures-in-c\u003eclosures\u003c/a\u003e and","Fragments":["\u003ca"]},{"Key":"and \u003ca","Fragments":["href=http://en.cppreference.com/w/cpp/utility/functional/function\u003efunction","href=http://www.learncpp.com/cpp-tutorial/29-hungarian-notation/\u003eHungarian","href=http://discuss.joelonsoftware.com/default.asp?joel.3.21194.19\u003eJoel"]},{"Key":"\u003ca href=http://en.cppreference.com/w/cpp/utility/functional/function\u003efunction","Fragments":["objects\u003c/a\u003e."]},{"Key":"Write an","Fragments":["unknown"]},{"Key":"an unknown","Fragments":["method"]},{"Key":"unknown method","Fragments":["handler."]},{"Key":"method handler.","Fragments":["I'm"]},{"Key":"handler. I'm","Fragments":["not"]},{"Key":"sure C++","Fragments":["has"]},{"Key":"C++ has","Fragments":["this,","a","a","pretty"]},{"Key":"has this,","Fragments":["Python"]},{"Key":"this, Python","Fragments":["has"]},{"Key":"Python has","Fragments":["```__getattr__```"]},{"Key":"has ```__getattr__```","Fragments":["and"]},{"Key":"```__getattr__``` and","Fragments":["Perl"]},{"Key":"and Perl","Fragments":["has"]},{"Key":"Perl has","Fragments":["```AUTOLOAD```."]},{"Key":"has ```AUTOLOAD```.","Fragments":["I'm"]},{"Key":"```AUTOLOAD```. I'm","Fragments":["interested"]},{"Key":"I'm interested","Fragments":["if","in","in","in"]},{"Key":"interested if","Fragments":["there's","there"]},{"Key":"if there's","Fragments":["an","an","no","a","any","whitespace"]},{"Key":"there's an","Fragments":["equivalent","easier","obvious"]},{"Key":"an equivalent","Fragments":["for","algorithm."]},{"Key":"equivalent for","Fragments":["C++."]},{"Key":" Does","Fragments":["```0ULL","this","line"]},{"Key":"Does ```0ULL","Fragments":["-"]},{"Key":"```0ULL -","Fragments":["1```"]},{"Key":"- 1```","Fragments":["rely","would"]},{"Key":"1``` rely","Fragments":["on"]},{"Key":"the overflow","Fragments":["value"]},{"Key":"overflow value","Fragments":["for"]},{"Key":" Bit","Fragments":["twiddling","of"]},{"Key":"Bit twiddling","Fragments":["with"]},{"Key":"twiddling with","Fragments":["```square```"]},{"Key":"with ```square```","Fragments":["is"]},{"Key":"```square``` is","Fragments":["clever."]},{"Key":"Congratulations for","Fragments":["getting"]},{"Key":"for getting","Fragments":["started,"]},{"Key":"getting started,","Fragments":["C++"]},{"Key":"started, C++","Fragments":["is"]},{"Key":"C++ is","Fragments":["difficult","still","famous","to","missing","to","a","fundamentally","the","meant","block"]},{"Key":"is difficult","Fragments":["to","to","to","to","to"]},{"Key":"is extremely","Fragments":["dense"]},{"Key":"extremely dense","Fragments":["and"]},{"Key":"dense and","Fragments":["difficult"]},{"Key":"and difficult","Fragments":["to","to","to"]},{"Key":"to understand.","Fragments":["Try","Consider","After"]},{"Key":"understand. Try","Fragments":["using"]},{"Key":"Try using","Fragments":["\u003ca","\"\\\\\\\\s+\""]},{"Key":"using \u003ca","Fragments":["href=http://www.cplusplus.com/reference/string/string/\u003eC++","href=http://brew.sh/\u003ebrew\u003c/a\u003e:","href=http://www.cmake.org/\u003ecmake\u003c/a\u003e"]},{"Key":"\u003ca href=http://www.cplusplus.com/reference/string/string/\u003eC++","Fragments":["style"]},{"Key":"href=http://www.cplusplus.com/reference/string/string/\u003eC++ style","Fragments":["strings\u003c/a\u003e,"]},{"Key":"style strings\u003c/a\u003e,","Fragments":["it"]},{"Key":"strings\u003c/a\u003e, it","Fragments":["makes"]},{"Key":"it makes","Fragments":["C++","it","up","it","RAII","complete","code","it","the","a","much","much","sense","code","the","sense.","```hey```","sense","a","it","it","the","a","the","the","sense","the","a","it","it","an","the","little"]},{"Key":"makes C++","Fragments":["much"]},{"Key":"C++ much","Fragments":["more"]},{"Key":"more modern.","Fragments":["[\u003ca"]},{"Key":"modern. [\u003ca","Fragments":["href=http://www.learncpp.com/cpp-tutorial/66-c-style-strings/\u003elearncpp\u003c/a\u003e]"]},{"Key":"Why are","Fragments":["the","you","you","you","the"]},{"Key":"return values","Fragments":["in","because"]},{"Key":"values in","Fragments":["variables?","the","C++,","the","a","the","the"]},{"Key":"in variables?","Fragments":["```return"]},{"Key":"variables? ```return","Fragments":["\"Whatever.\"```"]},{"Key":"```return \"Whatever.\"```","Fragments":["is"]},{"Key":"\"Whatever.\"``` is","Fragments":["my"]},{"Key":"is my","Fragments":["preferred","understanding.","bane","first","first","implementation","first","very","oppinion:","first","first","first","first","upper"]},{"Key":"my preferred","Fragments":["option","STL"]},{"Key":"preferred option","Fragments":["and"]},{"Key":"option and","Fragments":["easier"]},{"Key":"and easier","Fragments":["to","to","to","to","to"]},{"Key":" Readability","Fragments":["is","could"]},{"Key":"Readability is","Fragments":["quite"]},{"Key":"is quite","Fragments":["good,","nice,","nice","a","the","a","tricky.","more","readable.","explicit","simple","safe,"]},{"Key":"quite good,","Fragments":["variable"]},{"Key":"good, variable","Fragments":["names"]},{"Key":"variable names","Fragments":["are","are","to","more","like","that","read","would","than"]},{"Key":"are clear,","Fragments":["```list_of```"]},{"Key":"clear, ```list_of```","Fragments":["is"]},{"Key":"```list_of``` is","Fragments":["quite"]},{"Key":"quite nice,","Fragments":["is"]},{"Key":"nice, is","Fragments":["that"]},{"Key":"that boost?","Fragments":["Use"]},{"Key":"boost? Use","Fragments":["of"]},{"Key":"Use of","Fragments":["empty","std::string"]},{"Key":"of empty","Fragments":["strings"]},{"Key":"empty strings","Fragments":["is","that"]},{"Key":"strings is","Fragments":["very","overly","really"]},{"Key":" Lack","Fragments":["of"]},{"Key":"Lack of","Fragments":["spaces"]},{"Key":"of spaces","Fragments":["around"]},{"Key":"spaces around","Fragments":["operators"]},{"Key":"around operators","Fragments":["tripped"]},{"Key":"operators tripped","Fragments":["me"]},{"Key":"tripped me","Fragments":["up,","up"]},{"Key":"me up,","Fragments":["lines"]},{"Key":"up, lines","Fragments":["57"]},{"Key":"lines 57","Fragments":["and"]},{"Key":"57 and","Fragments":["60."]},{"Key":" Did","Fragments":["you","you","you","you","you","you","a","you","this","this","this","you"]},{"Key":"Did you","Fragments":["consider","consider","consider","consider","consider","consider","miss","forget","consider","pass","consider","encounter","think","know"]},{"Key":"you consider","Fragments":["combining","ordering","sorting","distinguishing","returning","using","having","passing","avoiding","moving","how"]},{"Key":"consider combining","Fragments":["the"]},{"Key":"the animal","Fragments":["with"]},{"Key":"animal with","Fragments":["it's"]},{"Key":"with it's","Fragments":["first"]},{"Key":"it's first","Fragments":["line?"]},{"Key":"first line?","Fragments":["Not"]},{"Key":"line? Not","Fragments":["the"]},{"Key":"Not the","Fragments":["logical","most"]},{"Key":"the logical","Fragments":["break","default,","abstraction","and"]},{"Key":"logical break","Fragments":["point"]},{"Key":"break point","Fragments":["but"]},{"Key":"point but","Fragments":["cuts"]},{"Key":"but cuts","Fragments":["down"]},{"Key":"cuts down","Fragments":["on"]},{"Key":"down on","Fragments":["the","the","your"]},{"Key":"of vectors.","Fragments":["e.g."]},{"Key":"vectors. e.g.","Fragments":["```bird.\\n"]},{"Key":"e.g. ```bird.\\n","Fragments":["How"]},{"Key":"```bird.\\n How","Fragments":["absurd"]},{"Key":"How absurd","Fragments":["to"]},{"Key":"could put","Fragments":["the","the","numbersentp","`std::string"]},{"Key":"put the","Fragments":["final","anonymous","while","string","validation","one","ternary","body","name","braces","isSilence","includes","regex","std::sort","call","validation"]},{"Key":"the final","Fragments":["line","line,","mark","test","size","size:","point","size,","choice","logic","punctuation","result","two"]},{"Key":"final line","Fragments":["(```I","looks"]},{"Key":"line (```I","Fragments":["don't"]},{"Key":"(```I don't","Fragments":["know"]},{"Key":"know why...```)","Fragments":["in"]},{"Key":"why...```) in","Fragments":["```body_lines```."]},{"Key":"had difficulty","Fragments":["with"]},{"Key":"difficulty with","Fragments":["the"]},{"Key":"logic of","Fragments":["this","of","the","the"]},{"Key":"this solution.","Fragments":["Short","I"]},{"Key":"solution. Short","Fragments":["variable"]},{"Key":"Short variable","Fragments":["names"]},{"Key":"are difficult","Fragments":["to"]},{"Key":"to follow,","Fragments":["and","```to_lower_case```","adding","do","but"]},{"Key":"follow, and","Fragments":["```words```"]},{"Key":"and ```words```","Fragments":["handles"]},{"Key":"```words``` handles","Fragments":["too"]},{"Key":"handles too","Fragments":["many"]},{"Key":"to better","Fragments":["reflect","reflect","describe","clarify"]},{"Key":"better reflect","Fragments":["the","its"]},{"Key":"reflect the","Fragments":["underlying","abstraction","changes."]},{"Key":"the underlying","Fragments":["logic.","assembler","logic"]},{"Key":"underlying logic.","Fragments":["```s```"]},{"Key":"logic. ```s```","Fragments":["is"]},{"Key":"```s``` is","Fragments":["a"]},{"Key":"a word","Fragments":["candidate","is","has","(or","is","with","was","character","and","and","and","you","if"]},{"Key":"word candidate","Fragments":["correct?"]},{"Key":" ```words```","Fragments":["is"]},{"Key":"```words``` is","Fragments":["handling"]},{"Key":"is handling","Fragments":["much"]},{"Key":"handling much","Fragments":["of"]},{"Key":"much of","Fragments":["the","a","it","the","what's","a","a","my","a","\"algorithm\"","a","the"]},{"Key":"the implementation.","Fragments":["Specifically,"]},{"Key":"implementation. Specifically,","Fragments":["cleaning"]},{"Key":"Specifically, cleaning","Fragments":["the"]},{"Key":"cleaning the","Fragments":["input"]},{"Key":"the input","Fragments":["and","into","should","could","is","contains","string","string","sequence","string","though.","string","that","string","string","string","a","is","@ethel,","range.","string","might","string","you","and","and","anyhow,","given","string.","string.","string","string","string.","into","phrase","was","strings","vector,","is","string,","string","string","string","string","string","string","is","string","by","a","string.","string","string","is","string","multiple","words","pattern,","has","string,","string,","is","of","would-be","words.","\"I","arguments","'abc'","data.","strings.","is","in","and","string","(I.e.","string.","string"]},{"Key":"input and","Fragments":["cleaning","modifying","looked","the","tell","checks"]},{"Key":"and cleaning","Fragments":["each"]},{"Key":"cleaning each","Fragments":["word."]},{"Key":"each word.","Fragments":["Making","So"]},{"Key":"word. Making","Fragments":["each"]},{"Key":"Making each","Fragments":["task"]},{"Key":"each task","Fragments":["it's","(splitting"]},{"Key":"task it's","Fragments":["own"]},{"Key":"it's own","Fragments":["function","function,","function","copy","function,","translation","function"]},{"Key":"own function","Fragments":["(preexisting","and","it","and"]},{"Key":"function (preexisting","Fragments":["or"]},{"Key":"(preexisting or","Fragments":["writing"]},{"Key":"or writing","Fragments":["your"]},{"Key":"writing your","Fragments":["own)","own","own,","own","own."]},{"Key":"your own)","Fragments":["will"]},{"Key":"own) will","Fragments":["make"]},{"Key":"will make","Fragments":["the","the","my","your","large","things","it","it","the","your","the","the"]},{"Key":"the overall","Fragments":["intent","doing","logic","work","organization","control","time","complexity","complexity"]},{"Key":"overall intent","Fragments":["clearer."]},{"Key":" Yes,","Fragments":["list_of","check","it","`trim_copy`","the","surprisingly,","I","of","and","it","you're","thats","I","that's","that's"]},{"Key":"Yes, list_of","Fragments":["is"]},{"Key":"list_of is","Fragments":["boost."]},{"Key":"is boost.","Fragments":["Actually"]},{"Key":"boost. Actually","Fragments":["I"]},{"Key":"Actually I","Fragments":["only","find","hadn't"]},{"Key":"it because","Fragments":["vs2012","the","in"]},{"Key":"because vs2012","Fragments":["doesn't"]},{"Key":"vs2012 doesn't","Fragments":["support"]},{"Key":"doesn't support","Fragments":["initializer","that"]},{"Key":"support initializer","Fragments":["lists."]},{"Key":"Good call","Fragments":["on","on","on"]},{"Key":"call on","Fragments":["the","lines","the","the"]},{"Key":"final line,","Fragments":["I'll"]},{"Key":"line, I'll","Fragments":["change"]},{"Key":"I'll change","Fragments":["that.","that","that","them"]},{"Key":"The comment","Fragments":["about","on"]},{"Key":"comment about","Fragments":["readability","unnamed","static","this"]},{"Key":"about readability","Fragments":["is"]},{"Key":"readability is","Fragments":["really","bad.","better"]},{"Key":"really about","Fragments":["the"]},{"Key":"the point","Fragments":["of","to","in","with","that","where","of","the",":(","across).","of","of"]},{"Key":"of implementing","Fragments":["verse"]},{"Key":"implementing verse","Fragments":["in"]},{"Key":"verse in","Fragments":["a"]},{"Key":"a \"clever\"","Fragments":["way"]},{"Key":"\"clever\" way","Fragments":["vs"]},{"Key":"way vs","Fragments":["simply"]},{"Key":"vs simply","Fragments":["returning"]},{"Key":"simply returning","Fragments":["each","a","if"]},{"Key":"returning each","Fragments":["verse"]},{"Key":"each verse","Fragments":["as","as"]},{"Key":"verse as","Fragments":["I","a"]},{"Key":"as I","Fragments":["have","come","state","could","didn't","am","expected","learned","come","needed","said,","can","didn't","have","can","could.","can","described","could","suspected.","can","can","never","think","expected:","understand","don't","have","wasn't","wanted"]},{"Key":"have in","Fragments":["submission","Haskell,","mind?","progress.","\"rna_transcription.h\""]},{"Key":"in submission","Fragments":["#1."]},{"Key":" You're","Fragments":["absolutely","right,","right.","absolutely","right.","right.","using","right,","right","including","correct,","correct,","now","right","right."]},{"Key":"You're absolutely","Fragments":["right,","right."]},{"Key":"absolutely right,","Fragments":["I","and"]},{"Key":"right, I","Fragments":["completely","could","normally","had","should"]},{"Key":"I completely","Fragments":["missed"]},{"Key":"completely missed","Fragments":["this"]},{"Key":"missed this","Fragments":["and"]},{"Key":"this and","Fragments":["I","see:","my","tried","having","keeps","is","see","add","add","add","add","it"]},{"Key":"I can't","Fragments":["believe","believe","recommend","really","help","excuse","believe","really","touch...","use","tell,","afford","get","do","even","think","see","put","argue","decide","tell","return","think","even","tell","test","think","tell","think","figure","think","return","return","distinguish","reproduce","seem","step","think","shake","see"]},{"Key":"can't believe","Fragments":["gcc","I","I"]},{"Key":"believe gcc","Fragments":["never"]},{"Key":"gcc never","Fragments":["mentioned"]},{"Key":"never mentioned","Fragments":["this"]},{"Key":"mentioned this","Fragments":["to","on"]},{"Key":"this to","Fragments":["me.","refactor--I'm","close","get","link","mean","simplify","be","me?","work.","```strand2.length()","determine","be","work"]},{"Key":"to me.","Fragments":["Clang","Or","Basically","My","On","Though"]},{"Key":"me. Clang","Fragments":["does"]},{"Key":"Clang does","Fragments":["point"]},{"Key":"does point","Fragments":["out"]},{"Key":"point out","Fragments":["this","the","is","that","you"]},{"Key":"out this","Fragments":["omission","smart"]},{"Key":"this omission","Fragments":["in"]},{"Key":"omission in","Fragments":["a"]},{"Key":"a warning.","Fragments":["I"]},{"Key":"warning. I","Fragments":["will"]},{"Key":"will fix","Fragments":["it","that.","that","it"]},{"Key":"fix it","Fragments":["in","if","in","and","a"]},{"Key":"Why the","Fragments":["separate","empty","different","double"]},{"Key":"the separate","Fragments":["```is_divisible```"]},{"Key":"separate ```is_divisible```","Fragments":["function"]},{"Key":"```is_divisible``` function","Fragments":["instead"]},{"Key":"the simpler","Fragments":["```"]},{"Key":"simpler ```","Fragments":["year"]},{"Key":"``` year","Fragments":["%"]},{"Key":"% x","Fragments":["==","=="]},{"Key":"x ==","Fragments":["0```?","0)```?"]},{"Key":"== 0```?","Fragments":["What"]},{"Key":"0```? What","Fragments":["about"]},{"Key":"What about","Fragments":["preprocessor","words","valid","boost/tokenizer.hpp?","leading","the"]},{"Key":"about preprocessor","Fragments":["macros"]},{"Key":"preprocessor macros","Fragments":["```#define"]},{"Key":"macros ```#define","Fragments":["is_divisible(y,"]},{"Key":"```#define is_divisible(y,","Fragments":["x)"]},{"Key":"is_divisible(y, x)","Fragments":["(y"]},{"Key":"x) (y","Fragments":["%"]},{"Key":"(y %","Fragments":["x"]},{"Key":"== 0)```?","Fragments":["[\u003ca"]},{"Key":"0)```? [\u003ca","Fragments":["href=http://www.cplusplus.com/doc/tutorial/preprocessor/\u003epreprocessor\u003c/a\u003e]"]},{"Key":"consider ordering","Fragments":["the"]},{"Key":"ordering the","Fragments":["```if/else```"]},{"Key":"the ```if/else```","Fragments":["statements"]},{"Key":"```if/else``` statements","Fragments":["from"]},{"Key":"statements from","Fragments":["most"]},{"Key":"from most","Fragments":["common"]},{"Key":"most common","Fragments":["to","cases","cases","response:"]},{"Key":"common to","Fragments":["least,"]},{"Key":"to least,","Fragments":["e.g."]},{"Key":"least, e.g.","Fragments":["```year"]},{"Key":"e.g. ```year","Fragments":["%"]},{"Key":"```year %","Fragments":["4```"]},{"Key":"% 4```","Fragments":["first?"]},{"Key":"This exercise","Fragments":["seems","seems","can","can","can","can","can","can","can","can","can","can","can","is","just","was"]},{"Key":"exercise seems","Fragments":["built","built"]},{"Key":"seems built","Fragments":["for","for"]},{"Key":"built for","Fragments":["\u003ca","\u003ca"]},{"Key":"for \u003ca","Fragments":["href=http://www.learncpp.com/cpp-tutorial/45-enumerated-types/\u003eenumerated","href=http://en.wikipedia.org/wiki/Triangular_number\u003eTriangle","href=http://www.learncpp.com/cpp-tutorial/45-enumerated-types/\u003eenumerated"]},{"Key":"\u003ca href=http://www.learncpp.com/cpp-tutorial/45-enumerated-types/\u003eenumerated","Fragments":["types\u003c/a\u003e","types\u003c/a\u003e,"]},{"Key":" Equilateral","Fragments":["doesn't"]},{"Key":"Equilateral doesn't","Fragments":["need"]},{"Key":"Why isn't","Fragments":["scalene","the"]},{"Key":"isn't scalene","Fragments":["the"]},{"Key":"scalene the","Fragments":["default"]},{"Key":"The all","Fragments":["sides"]},{"Key":"all sides","Fragments":["check"]},{"Key":"sides check","Fragments":["seems"]},{"Key":"check seems","Fragments":["excessive."]},{"Key":"seems excessive.","Fragments":["Would"]},{"Key":"excessive. Would","Fragments":["```a"]},{"Key":"Would ```a","Fragments":["*"]},{"Key":"```a *","Fragments":["b"]},{"Key":"* b","Fragments":["*"]},{"Key":"b *","Fragments":["c"]},{"Key":"* c","Fragments":["=="]},{"Key":"c ==","Fragments":["0```"]},{"Key":"== 0```","Fragments":["work?"]},{"Key":"The ```min```","Fragments":["is"]},{"Key":"```min``` is","Fragments":["interesting,","larger"]},{"Key":"is interesting,","Fragments":["did","though."]},{"Key":"interesting, did","Fragments":["you"]},{"Key":"did you","Fragments":["consider","choose","consider","mean","mean","chose","write","include","chose","choose","submit","come","have","choose","get","use","try","run","say?","use","choose","choose","use","use","make"]},{"Key":"consider sorting","Fragments":["an"]},{"Key":"sorting an","Fragments":["array"]},{"Key":"array of","Fragments":["```[a,b,c]```?","strings","strings.","4","vectors;","pairs","vectors)","pairs,","any","pairs"]},{"Key":"of ```[a,b,c]```?","Fragments":["Largest"]},{"Key":"```[a,b,c]```? Largest","Fragments":["element"]},{"Key":"Largest element","Fragments":["is"]},{"Key":"element is","Fragments":["at","constructed","then","the"]},{"Key":"is at","Fragments":["the","least","least","most"]},{"Key":"the beginning.","Fragments":["Also","The"]},{"Key":"beginning. Also","Fragments":["means"]},{"Key":"Also means","Fragments":["only"]},{"Key":"means only","Fragments":["two"]},{"Key":"only two","Fragments":["comparisons","minor","suggestions"]},{"Key":"two comparisons","Fragments":["for"]},{"Key":"comparisons for","Fragments":["isosceles."]},{"Key":" Could","Fragments":["```\u0026plus```","```ONE_BILLION_SECONDS_IN_DAYS```","nucleotide_counts","be","you"]},{"Key":"Could ```\u0026plus```","Fragments":["be"]},{"Key":"```\u0026plus``` be","Fragments":["redefined"]},{"Key":"be redefined","Fragments":["using"]},{"Key":"redefined using","Fragments":["```\u0026minus(-m)```,"]},{"Key":"using ```\u0026minus(-m)```,","Fragments":["sort"]},{"Key":"```\u0026minus(-m)```, sort","Fragments":["of"]},{"Key":"sort of","Fragments":["like","thing","thing","issue","thing.","sentinel","true.","const","STL++.","cache","stuff","had","wondering","dumb.","stupid.","response","depends","what","dispatch","feels","ambiguous,","a"]},{"Key":"of like","Fragments":["```operator!=```?"]},{"Key":" Very","Fragments":["light","nice.","nice","nice.","concise,","true,","often","neat.","interesting","might","true!","clear","readable","nice,","nice."]},{"Key":"Very light","Fragments":["and"]},{"Key":"light and","Fragments":["easy"]},{"Key":"and easy","Fragments":["to","to","to","to","to"]},{"Key":"I see","Fragments":["your","the","where","how","what","it","string","people","it.","an","2","why","that","a","it","you","why","in","a","are","a","no","that","a","two","I","there","right","that","it,","you","what"]},{"Key":"see your","Fragments":["point,","header.","comments,"]},{"Key":"your point,","Fragments":["first"]},{"Key":"point, first","Fragments":["submission"]},{"Key":"first submission","Fragments":["is","to","and","and","to"]},{"Key":"submission is","Fragments":["easier","closer"]},{"Key":"is easier","Fragments":["to","to","for","to","to","and","than","to"]},{"Key":"to read.","Fragments":["On","You're","Maybe","Lots","The"]},{"Key":"read. On","Fragments":["the"]},{"Key":"On the","Fragments":["other","other","other","other","other","other","other","plus","other,","other","other","plus"]},{"Key":"other hand,","Fragments":["it","for","indenting","while","you","for","the"]},{"Key":"hand, it","Fragments":["is"]},{"Key":"more difficult","Fragments":["to","to"]},{"Key":"to extend,","Fragments":["and"]},{"Key":"extend, and","Fragments":["slower"]},{"Key":"and slower","Fragments":["to"]},{"Key":"slower to","Fragments":["find/correct"]},{"Key":"to find/correct","Fragments":["spelling"]},{"Key":"find/correct spelling","Fragments":["mistakes."]},{"Key":"spelling mistakes.","Fragments":["This"]},{"Key":"mistakes. This","Fragments":["seems"]},{"Key":"This seems","Fragments":["like","pretty","like","like","sort","like","like"]},{"Key":"seems like","Fragments":["a","a","it","it","the","you're","a","such","a","bordering","a","an","we","yelling","it","an","it's","an","a","overkill,","the","a","unnecessary,","kind","the","the","you","an","overkill","you","you","your","a","you'd"]},{"Key":"like a","Fragments":["nice","wizard,","hack","good","special","novel","const","good","misuse","cop","bad","lot","minus.","saviour","direction","bug.","good,","good","good","premature","well-defined","good","for()","C","pretty","C++","habit.","rather","RegEx","rather","very","pretty","check","foreach","C","great","contortion","good","nice","problem","maintenance","rabbit"]},{"Key":"a nice","Fragments":["compromise.","solution.","symmetry","little","readable","reference","way","concise","solution.","algorithm","challenging"]},{"Key":" I'm","Fragments":["pretty","now","not","not","having","planning","sorry,","not","wondering","not","not","still","including","sure","not","not","curious","not","confused","not","actually","a","pretty","going","pretty","a","feeling","surprised","trying","not","thinking","new","not","having","curious","still","not","trying","still","not","not","surprised","going","not","kind","not","sure","just","submitting","trying","rather","STUCKED!","kind","not","only","working","working","not","not","a","not","sorry","new","happy","not","not","a","glad","not","just","not","not","not","conflicted","curious","learning","not","also","also","not","curious","assuming"]},{"Key":"pretty new","Fragments":["to","to","C++","to"]},{"Key":"new to","Fragments":["C++","it).","C++'s","C++.","C++,","me.","c++","c++","me!)","C++,","namespaces","C++","me,","this","it","cmake","c++,","me,"]},{"Key":"to C++","Fragments":["and","instead","containers.","after","in","so","class","projects.","as"]},{"Key":"C++ and","Fragments":["wasn't","the","much","the","JS."]},{"Key":"and wasn't","Fragments":["very","passing"]},{"Key":"wasn't very","Fragments":["familiar"]},{"Key":"very familiar","Fragments":["with"]},{"Key":"familiar with","Fragments":["enums.","all","C.","these,","the","the","C++,","that","it.","boost.tokenizer,","the","them","the","it.","the","that","it"]},{"Key":"with enums.","Fragments":["I"]},{"Key":"enums. I","Fragments":["made"]},{"Key":"I made","Fragments":["some","it","it","both","string","random","was","a","was","it","it","them","use","sure","`findSubString`","the","the"]},{"Key":"made some","Fragments":["changes"]},{"Key":"some changes","Fragments":["based"]},{"Key":"changes based","Fragments":["on"]},{"Key":"on your","Fragments":["suggestions.","part,","libstdc++","reasoning","platform,","map.","first","previous","latest","code","code","own,","own","preferences","environment,","suggestions.","machine,","suggestions."]},{"Key":" @eino","Fragments":["Be"]},{"Key":"@eino Be","Fragments":["careful"]},{"Key":"with premature","Fragments":["optimization."]},{"Key":"premature optimization.","Fragments":["The","As","For"]},{"Key":"optimization. The","Fragments":["code"]},{"Key":"The code","Fragments":["is","feels","is","looks","used","should","looks","is","is","does","lacks","looks","is"]},{"Key":"code is","Fragments":["readable","good,","readable","the","not","in","that","descriptive","simple","simple,","fine.\u003c/li\u003e","great.","in","in","clearer","necessary","much","in","portable.","correct.","that","much","so","much","just","the","robust","already","very","in","on","fairly","doing.","doing.","confusing","better","clear","doing","very","very","a","difficult","because","less","very","reasonably","incredibly","nicely","pretty","really","and","obsolete,","compact","compiled","that","the","state","readable","littered","always"]},{"Key":"is readable","Fragments":["and","anyway.",";)","as"]},{"Key":"readable and","Fragments":["has","understandable,","not","concise.","since","straightforward","concise","concise","understandable.","concise","less","robust","concise.","also"]},{"Key":"has no","Fragments":["obvious","effect","impact","members","value","this...","content","major","delete"]},{"Key":"no obvious","Fragments":["pessimizations."]},{"Key":" Don","Fragments":["Knuth"]},{"Key":"Don Knuth","Fragments":["writes:"]},{"Key":"Knuth writes:","Fragments":["\"*We"]},{"Key":"writes: \"*We","Fragments":["should"]},{"Key":"\"*We should","Fragments":["forget"]},{"Key":"should forget","Fragments":["about"]},{"Key":"forget about","Fragments":["small","accumulate!"]},{"Key":"about small","Fragments":["efficiencies,"]},{"Key":"small efficiencies,","Fragments":["say"]},{"Key":"efficiencies, say","Fragments":["about"]},{"Key":"say about","Fragments":["97%"]},{"Key":"about 97%","Fragments":["of"]},{"Key":"97% of","Fragments":["the"]},{"Key":"the time:","Fragments":["premature"]},{"Key":"time: premature","Fragments":["optimization"]},{"Key":"premature optimization","Fragments":["is","is"]},{"Key":"optimization is","Fragments":["the","usually"]},{"Key":"the root","Fragments":["of","cause."]},{"Key":"of all","Fragments":["evil.","names","I'm","allocations,","the","that","upper","the","permutations","I","caps","the","the","you","the","substrings","the","enviroment"]},{"Key":"all evil.","Fragments":["Yet"]},{"Key":"evil. Yet","Fragments":["we"]},{"Key":"Yet we","Fragments":["should"]},{"Key":"we should","Fragments":["not","prefer","in","still","try","be","definitely","certainly"]},{"Key":"should not","Fragments":["pass","be","be","be","be","be","get","be","use","keep","pass","modify","be","use","be","have","need","be","be"]},{"Key":"not pass","Fragments":["up","the","some","the","the","it","all"]},{"Key":"pass up","Fragments":["our"]},{"Key":"up our","Fragments":["opportunities"]},{"Key":"our opportunities","Fragments":["in"]},{"Key":"opportunities in","Fragments":["that"]},{"Key":"in that","Fragments":["critical","specific","case?","case","mode,","while","case.","file.","case","case.","case?","case).","the","version.","way.","corner","area,","it","both","read;","name,"]},{"Key":"that critical","Fragments":["3%."]},{"Key":"critical 3%.","Fragments":["A"]},{"Key":"3%. A","Fragments":["good"]},{"Key":"good programmer","Fragments":["will"]},{"Key":"programmer will","Fragments":["not"]},{"Key":"will not","Fragments":["be","be","be","outlive","live","be","compile","have","need","change","be","be","know","work","be","match.","shorten"]},{"Key":"be lulled","Fragments":["into"]},{"Key":"lulled into","Fragments":["complacency"]},{"Key":"into complacency","Fragments":["by"]},{"Key":"complacency by","Fragments":["such"]},{"Key":"by such","Fragments":["reasoning,"]},{"Key":"such reasoning,","Fragments":["he"]},{"Key":"reasoning, he","Fragments":["will"]},{"Key":"be wise","Fragments":["to","to"]},{"Key":"wise to","Fragments":["look","dedicate"]},{"Key":"look carefully","Fragments":["at"]},{"Key":"carefully at","Fragments":["the"]},{"Key":"the critical","Fragments":["code;"]},{"Key":"critical code;","Fragments":["but"]},{"Key":"code; but","Fragments":["only"]},{"Key":"but only","Fragments":["after","the"]},{"Key":"only after","Fragments":["that"]},{"Key":"after that","Fragments":["code","```nucleotide_count```","replace","commented","was","function","as"]},{"Key":"that code","Fragments":["has","look","point","goes.","maintainer","you"]},{"Key":"code has","Fragments":["been","a","some"]},{"Key":"been identified.*\"","Fragments":["and"]},{"Key":"identified.*\" and","Fragments":["Michael"]},{"Key":"and Michael","Fragments":["A."]},{"Key":"A. Jackson","Fragments":["says:"]},{"Key":"Jackson says:","Fragments":["\"*The"]},{"Key":"says: \"*The","Fragments":["First"]},{"Key":"\"*The First","Fragments":["Rule"]},{"Key":"So don't","Fragments":["waste","give"]},{"Key":"don't waste","Fragments":["time"]},{"Key":"waste time","Fragments":["optimizing","and"]},{"Key":"time optimizing","Fragments":["code"]},{"Key":"optimizing code","Fragments":["that"]},{"Key":"not executed","Fragments":["in"]},{"Key":"executed in","Fragments":["the"]},{"Key":"the bottleneck","Fragments":["of"]},{"Key":"bottleneck of","Fragments":["your"]},{"Key":"your program.","Fragments":["If","This","You"]},{"Key":"program. If","Fragments":["you"]},{"Key":"a bottleneck,","Fragments":["identify"]},{"Key":"bottleneck, identify","Fragments":["its"]},{"Key":"identify its","Fragments":["cause"]},{"Key":"its cause","Fragments":["and"]},{"Key":"cause and","Fragments":["only"]},{"Key":"and only","Fragments":["then","forward-declared","in"]},{"Key":"only then","Fragments":["begin","return"]},{"Key":"then begin","Fragments":["to"]},{"Key":"have one","Fragments":["nit","more","this","tiny","suggestion,"]},{"Key":"one nit","Fragments":["to","to"]},{"Key":"nit to","Fragments":["pick.","pick:"]},{"Key":"to pick.","Fragments":["You"]},{"Key":"pick. You","Fragments":["use"]},{"Key":"You use","Fragments":["an"]},{"Key":"use an","Fragments":["anonymous","`enum`","old","unsigned","explaining","algorithm","approach","unsigned","epsilon.","integer","unordered_map","auto","`istringstream`","unordered_map","if-elseif-else","enum","`unordered_map`","increment","anonymous","iterator","unsigned","unsigned","unsigned","unsigned","unsigned"]},{"Key":"an anonymous","Fragments":["namespace","namespace","namespace.","namespace","namespace,","namespace,","namespace.","namespace,","namespace.","namespace","namespace,","namespace","namespace,","namespace","namespace","namespace","`namespace`.","namespace","namespace.","namespace,","namespace","namespace?","namespace","namespace","namespace.","namespace","namespace,","namespace.","namespace","namespace.","namespace","namespace","name","namespace."]},{"Key":"anonymous namespace","Fragments":["for","inside","in","in","outside","to","(same","that","does?","(where","is","since","only","is","is","to","in","is","in","instead.","wouldn't","to","as","would","in"]},{"Key":"for `is_divisible`.","Fragments":["That"]},{"Key":"`is_divisible`. That","Fragments":["means"]},{"Key":"that `is_divisible()`","Fragments":["or"]},{"Key":"`is_divisible()` or","Fragments":["`::is_divisible()`"]},{"Key":"or `::is_divisible()`","Fragments":["is"]},{"Key":"`::is_divisible()` is","Fragments":["defined"]},{"Key":"defined for","Fragments":["everyone","classes,","sequences"]},{"Key":"who includes","Fragments":["this","bob.h","your"]},{"Key":"includes this","Fragments":["header."]},{"Key":"this header.","Fragments":["You","The"]},{"Key":"header. You","Fragments":["could","may"]},{"Key":"the anonymous","Fragments":["namespace","namespace","namespace","namespace."]},{"Key":"namespace inside","Fragments":["the","your"]},{"Key":"namespace `leap`,","Fragments":["but"]},{"Key":"`leap`, but","Fragments":["even"]},{"Key":"but even","Fragments":["then","so,","then"]},{"Key":"even then","Fragments":["`leap::is_divisible()`","it","you"]},{"Key":"then `leap::is_divisible()`","Fragments":["and"]},{"Key":"`leap::is_divisible()` and","Fragments":["`::leap::is_divisible()`"]},{"Key":"and `::leap::is_divisible()`","Fragments":["are"]},{"Key":"`::leap::is_divisible()` are","Fragments":["visible."]},{"Key":"But I","Fragments":["guess","have","have","should","was","hate","gotta","can't","would","think","guess","think","don't","do","think","don't","can","liked","like","always","always","am","agree,","think","don't","would","like","like","tested","would","wonder","have","agree","can","suppose","do","still","didn't","did't","don't","don't"]},{"Key":"only did","Fragments":["this","the"]},{"Key":"did this","Fragments":["because","one","pass","in","exercise","to","because","exercise,","challenge","for"]},{"Key":"this because","Fragments":["we","the","of","any","I","it"]},{"Key":"because we","Fragments":["can"]},{"Key":"we can","Fragments":["only","see","figure","do","see","just","use","just","fit","turn","extend","really","submit","get"]},{"Key":"only upload","Fragments":["one","one"]},{"Key":"upload one","Fragments":["file","file."]},{"Key":"one file","Fragments":["which","per","on","for","you","as","as","(bob.h)","at","pretty"]},{"Key":"file which","Fragments":["has","is","includes","I","can't"]},{"Key":"which has","Fragments":["to","a","some","a","a","much","the","one"]},{"Key":"to contain","Fragments":["everything,","the","the"]},{"Key":"contain everything,","Fragments":["otherwise"]},{"Key":"everything, otherwise","Fragments":["you"]},{"Key":"otherwise you","Fragments":["would","will"]},{"Key":"you would","Fragments":["have","need","want","want","get","need","have","have","have","only","be","have","get","still","not","need","need","get","then","be","want.","re-implement","return"]},{"Key":"have put","Fragments":["that","these","`using","it","that"]},{"Key":"that anonymous","Fragments":["namespace"]},{"Key":"namespace in","Fragments":["the","the","header","a","a","the","a","the","the","my","addition","the","cpp","this","the","which","the","the"]},{"Key":"the .cpp","Fragments":["file.","file.","file.","which","file","file."]},{"Key":"the helpful","Fragments":["feedback!","feedback,","feedback!"]},{"Key":" How","Fragments":["is","to","about","would","did","did","does","do","would","are","does","does","about","are","did","to"]},{"Key":"How is","Fragments":["the"]},{"Key":"the ```for","Fragments":["each```"]},{"Key":"```for each```","Fragments":["being"]},{"Key":"each``` being","Fragments":["implemented?"]},{"Key":"being implemented?","Fragments":["I"]},{"Key":"implemented? I","Fragments":["like"]},{"Key":"like it","Fragments":["and","should","is","is","should","isn't","can't","should","nonetheless.","was","...","is","to","should","isn't","is","might"]},{"Key":"it and","Fragments":["have","you","have","I","also","checked","looked","try","returning","not","the","the","I'll","I","everything","perhaps","just","got","imitation"]},{"Key":"have never","Fragments":["seen","worked","read","used"]},{"Key":"never seen","Fragments":["it."]},{"Key":"seen it.","Fragments":["What's"]},{"Key":"it. What's","Fragments":["the"]},{"Key":"What's the","Fragments":["advantage","purpose","purpose","benefit","rule"]},{"Key":"advantage over","Fragments":["the","just"]},{"Key":"over the","Fragments":["more","word","regex","pairs","last","top","string.","integers","input","characters","source","string","string","strand","array","`vector`.","perfect","place.","input","input.","other.","place,","input","input.","std","map","string","letters","input.","elements","results","vector,","results","string.","string","input","characters","string.","string","string","input","question","place","array","message","code.","whole","input","top,","C-string","string","top","passed","string,","input","input).","other."]},{"Key":"more common","Fragments":["```for(auto","in","names.","in"]},{"Key":"common ```for(auto","Fragments":["\u0026item"]},{"Key":"```for(auto \u0026item","Fragments":[":"]},{"Key":"\u0026item :","Fragments":["list)```?"]},{"Key":"not use","Fragments":["```counter::nucleotide_counts```","`counter::nucleotide_counts`","square","the","them","`substr`","an","boost.","the","std::isalpha","its","std::tolower()","\"else","appropriately","C++'s","the","\"algorithm\"","backslashes","array","\"remark.back()\"","some","it","islower","`std::stoi`"]},{"Key":"use ```counter::nucleotide_counts```","Fragments":["in"]},{"Key":"```counter::nucleotide_counts``` in","Fragments":["```counter::counts```?"]},{"Key":" ```input```","Fragments":["should"]},{"Key":"```input``` should","Fragments":["be"]},{"Key":" ```NUCLEOTIDE```","Fragments":["needs"]},{"Key":"```NUCLEOTIDE``` needs","Fragments":["to"]},{"Key":"needs to","Fragments":["be","traverse","be","be","be","be","give","change","grow.","be","be","be","check","check","be","check","check","be","make","be.","be","be","be","be"]},{"Key":"more tightly","Fragments":["tied"]},{"Key":"tightly tied","Fragments":["to"]},{"Key":"tied to","Fragments":["```output```,","`VERSE_AMOUNT`."]},{"Key":"to ```output```,","Fragments":["or"]},{"Key":"```output```, or","Fragments":["eliminated"]},{"Key":"or eliminated","Fragments":["entirely."]},{"Key":"eliminated entirely.","Fragments":["Changing"]},{"Key":"entirely. Changing","Fragments":["the"]},{"Key":"Changing the","Fragments":["nucleotide"]},{"Key":"the nucleotide","Fragments":["letters","map","count"]},{"Key":"nucleotide letters","Fragments":["means","defined"]},{"Key":"letters means","Fragments":["changing"]},{"Key":"means changing","Fragments":["the"]},{"Key":"changing the","Fragments":["same","constructor","elements","return","begin","strings.","linkage,","`m`","\"s\"","return"]},{"Key":"same data","Fragments":["in"]},{"Key":"data in","Fragments":["two","the"]},{"Key":"in two","Fragments":["places.","steps","source","places","minds.","source","or"]},{"Key":" Solution","Fragments":["is","to"]},{"Key":"Solution is","Fragments":["clearly"]},{"Key":"is clearly","Fragments":["written,","function-like","explained","superflous,","a"]},{"Key":"clearly written,","Fragments":["with"]},{"Key":"written, with","Fragments":["a"]},{"Key":"few nice","Fragments":["touches"]},{"Key":"nice touches","Fragments":["(nucleotide"]},{"Key":"touches (nucleotide","Fragments":["validation"]},{"Key":"(nucleotide validation","Fragments":["in"]},{"Key":"validation in","Fragments":["```nucleotide_counts```),","the","the"]},{"Key":"in ```nucleotide_counts```),","Fragments":["keep"]},{"Key":"```nucleotide_counts```), keep","Fragments":["up"]},{"Key":"keep up","Fragments":["the"]},{"Key":"up the","Fragments":["good","code","histogram.","file","verses","verse","good","other","map,","map:","array:","possibility","error.","worthwhile","code","submission","`insert_alphabetically`","word","code","pairwise","compiler","code","namespace","compiler","compiler","operation","verse","order","way","constructor","development","documentation.","Scott","string","regular","good"]},{"Key":"the good","Fragments":["work.","news","work.","suggestion","work!"]},{"Key":"I'm now","Fragments":["trying"]},{"Key":"now trying","Fragments":["a"]},{"Key":"trying a","Fragments":["shorter"]},{"Key":"a shorter","Fragments":["approach"]},{"Key":"shorter approach","Fragments":["and"]},{"Key":"approach and","Fragments":["better","after","serves"]},{"Key":"and better","Fragments":["variable"]},{"Key":"better variable","Fragments":["name.","name"]},{"Key":" Quite","Fragments":["happy"]},{"Key":"Quite happy","Fragments":["with"]},{"Key":"with it","Fragments":["now.","additional","as","in","but","generates","as","yet."]},{"Key":"it now.","Fragments":["Apart"]},{"Key":"now. Apart","Fragments":["from"]},{"Key":"Apart from","Fragments":["the","isQuestion(),"]},{"Key":"the long","Fragments":["lines","run.","run."]},{"Key":"long lines","Fragments":["when"]},{"Key":"lines when","Fragments":["initializing"]},{"Key":"when initializing","Fragments":["the"]},{"Key":"initializing the","Fragments":["data"]},{"Key":"the data","Fragments":["it's","needed","and","they","in","a","is","or"]},{"Key":"data it's","Fragments":["very"]},{"Key":"it's very","Fragments":["easy"]},{"Key":"Why did","Fragments":["you","you","you","you","you","you","you","i","you","you"]},{"Key":"you choose","Fragments":["the","`boost::regex`","to","to","to"]},{"Key":"choose the","Fragments":["do"]},{"Key":"the do","Fragments":["a"]},{"Key":"do a","Fragments":["recursive","very","dynamic","deep","\"sort\"","little","v.reserve.","std::tolower","very","pull","key","back()","lot","copy","single","calculation,","comparison."]},{"Key":"a recursive","Fragments":["solution,","call","call"]},{"Key":"recursive solution,","Fragments":["instead"]},{"Key":"solution, instead","Fragments":["of"]},{"Key":"single equation","Fragments":["for"]},{"Key":"equation for","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://en.wikipedia.org/wiki/Triangular_number\u003eTriangle","Fragments":["numbers\u003c/a\u003e?"]},{"Key":"job catching","Fragments":["triangle"]},{"Key":"catching triangle","Fragments":["numbers,"]},{"Key":"triangle numbers,","Fragments":["```sum_of_squares```"]},{"Key":"numbers, ```sum_of_squares```","Fragments":["is"]},{"Key":"```sum_of_squares``` is","Fragments":["similarly"]},{"Key":"is similarly","Fragments":["related"]},{"Key":"similarly related","Fragments":["to"]},{"Key":"related to","Fragments":["\u003ca","`Input.erase`","the","how","that"]},{"Key":"to \u003ca","Fragments":["href=http://en.wikipedia.org/wiki/Square_pyramidal_number\u003eSquare"]},{"Key":"\u003ca href=http://en.wikipedia.org/wiki/Square_pyramidal_number\u003eSquare","Fragments":["pyramidal"]},{"Key":"href=http://en.wikipedia.org/wiki/Square_pyramidal_number\u003eSquare pyramidal","Fragments":["number\u003c/a\u003e"]},{"Key":"pyramidal number\u003c/a\u003e","Fragments":["(Only"]},{"Key":"number\u003c/a\u003e (Only","Fragments":["ever"]},{"Key":"(Only ever","Fragments":["used"]},{"Key":"ever used","Fragments":["for","other","a"]},{"Key":" That's","Fragments":["exactly","actually","a","an","not","an","true.","a","what","an","one"]},{"Key":"That's exactly","Fragments":["the"]},{"Key":"exactly the","Fragments":["point.","same","same...","same","same","same","same.","reasons"]},{"Key":"the point.","Fragments":["I","Just"]},{"Key":"point. I","Fragments":["don't","hadn't","forgot","wasn't","hadn't"]},{"Key":"know if","Fragments":["it's","member","this","that","there","you","I","I","I'm","I'm","the","I’m","the","the","there","I"]},{"Key":"if it's","Fragments":["now","an","empty","declared","not","really","sorted","possible","not","not","crazy-common.","work","a","intended","in","worth","not","a","not","a","a","yelling","a","shouting","silence","unreachable,","worth","true","false.","true","not_.","uppercase,","lowercase,"]},{"Key":"it's now","Fragments":["possible"]},{"Key":"now possible","Fragments":["to"]},{"Key":"to submit","Fragments":["more","the","two","the","two","your","it","your","if","either","the","two","multiple","one"]},{"Key":"submit more","Fragments":["than","than","than"]},{"Key":"more than","Fragments":["one","mere","if","one","once","65535","255","one","multiplying","either","just","just","one","the","convenience,","once)","24","twice","one","a","once?","for_each.","necessary.","once.","once","one","2","99","a","absolutely","the"]},{"Key":"than one","Fragments":["file,","file","consistent","file","test.","for","source","loop","file"]},{"Key":"one file,","Fragments":["but","so","well","or"]},{"Key":"file, but","Fragments":["back","with","due","if","I","not","ended"]},{"Key":"but back","Fragments":["when"]},{"Key":"back when","Fragments":["I"]},{"Key":"when I","Fragments":["submitted","have","try","saw","printed","think","moved","want","iterate","get","have","started","initialised","see","have","did","was","had","had","feel","trim","use","have","simplified","worked","did","find","tried","read","don't","run","was","say","was","find","decided","get","have","was","submitted","wanted","saw","decided","declare","come","get","encounter","call","copy","type","wrote"]},{"Key":"I submitted","Fragments":["this,","and","I've","it,","a"]},{"Key":"submitted this,","Fragments":["I"]},{"Key":"this, I","Fragments":["could","might","realized"]},{"Key":"could only","Fragments":["send","accept","upload","be"]},{"Key":"only send","Fragments":["one"]},{"Key":"send one","Fragments":["file,"]},{"Key":"file, so","Fragments":["I","I"]},{"Key":"so I","Fragments":["skipped","was","was","don't","see","implemented","can","would","think","would","guess","just","had","don't","implemented","have","guess","would","never","only","can","leave","don't","replaced","just","really","find","will","deliberately","stuffed","think","was","can","reverted","figure","will","should","wouldn't","didn't","appreciate","followed","include","don't","checked","recommend","decided","basically","guess","don't","could","didn't","check","am","broke","just","wrote","pressed","read","will","could","replaced","just","wanted","might","left","used","got","still","can","suggest","have","create","just","am","can't","just","used","explicity","hardcoded","thought","would","know","think","don't","could"]},{"Key":"I skipped","Fragments":["the"]},{"Key":"skipped the","Fragments":["actual","chapter"]},{"Key":"the actual","Fragments":["*header","work?","hamming_distance","input.","nitpicking","root","value","code","API","type.","time","`studentRoster`","writing"]},{"Key":"actual *header","Fragments":["file*"]},{"Key":"*header file*","Fragments":["and"]},{"Key":"file* and","Fragments":["sent"]},{"Key":"and sent","Fragments":["the"]},{"Key":"sent the","Fragments":["implementation"]},{"Key":"the implementation","Fragments":["file,","file.","before","into","into","ended","of","needs","so","of","of","(i.e.","to","-","of","of","without","and","rather","in","details","details","since","of","it"]},{"Key":"implementation file,","Fragments":["but","I"]},{"Key":"but with","Fragments":["a","these","my","a","different","constexpr","it","me"]},{"Key":"a `.h`","Fragments":["suffix."]},{"Key":"`.h` suffix.","Fragments":["Ofcourse,"]},{"Key":"suffix. Ofcourse,","Fragments":["normally"]},{"Key":"Ofcourse, normally","Fragments":["I"]},{"Key":"normally I","Fragments":["would"]},{"Key":"do as","Fragments":["you","the","you"]},{"Key":"as you","Fragments":["suggest,","did,","did.","program","gain","have","set","point","want","don't","use","aren't","scan","find","expect.","are","do","both","can","can","said,","know","have","shouldn't","are","don't","keep"]},{"Key":"you suggest,","Fragments":["anonymous"]},{"Key":"suggest, anonymous","Fragments":["namespace"]},{"Key":"don't really","Fragments":["like","care","need","know","support","care","know","add","gain","lose","know","understand","know","understand","need","like","like","agree","go"]},{"Key":"really like","Fragments":["the","your","to","that","the","the","to","your","the","that","it.","the","the","this","this","your","the","this","the","how","it,","your"]},{"Key":"the preprocessor","Fragments":["unless","defines,","macro"]},{"Key":"preprocessor unless","Fragments":["I"]},{"Key":"unless I","Fragments":["have","manually","think","*really*"]},{"Key":"a very","Fragments":["particular","simple","very","niche","nice","long","good","large","clean/clear","solid","clear","small","similar","common","simple","nifty","good","good","succinct","good","advanced","minor","clear","elaborate","tight","common"]},{"Key":"very particular","Fragments":["task"]},{"Key":"particular task","Fragments":["that"]},{"Key":"task that","Fragments":["can"]},{"Key":"only be","Fragments":["done","done","done","answered","declared","considered","declared","used","problematic","anagrams"]},{"Key":"be done","Fragments":["using","with","in","once.","(including","in","for","very","without","without","in","about","to","for","more","more","with","in","with","using","using","without","without","an","with","in"]},{"Key":"done using","Fragments":["it","the","```auto```.","namespace."]},{"Key":"it (complicated","Fragments":["textual"]},{"Key":"(complicated textual","Fragments":["expansion)."]},{"Key":"textual expansion).","Fragments":["`is_divisible`"]},{"Key":"expansion). `is_divisible`","Fragments":["is"]},{"Key":"`is_divisible` is","Fragments":["clearly"]},{"Key":"clearly function-like","Fragments":["so"]},{"Key":"function-like so","Fragments":["why"]},{"Key":"why not","Fragments":["leave","just","make","the","just","also","just","take","have","have","just","(refer","use","to","just","use","to","make"]},{"Key":"not leave","Fragments":["it"]},{"Key":"leave it","Fragments":["as","in","as","out","non-const.","with","as","to"]},{"Key":"it as","Fragments":["a","an","an","a","duplicate-free","a","a","verbose","such","extern","weak,","follows","a","is","a","a","a","expressive","a","is.","I'm","a","a","two","a","(essentially)","all","well.","a","simple","quickly","quickly"]},{"Key":"function. The","Fragments":["compiler","compiler","`for`","tests","\"hey\"","conversion"]},{"Key":"The compiler","Fragments":["is","sees","generates","might","was","should","will"]},{"Key":"very good","Fragments":["at","programmer,","excuse","point,","idea.","that","for","way"]},{"Key":"good at","Fragments":["deciding","fixing"]},{"Key":"at deciding","Fragments":["when"]},{"Key":"deciding when","Fragments":["to"]},{"Key":"when to","Fragments":["inline","choose","use","inline","insert","use"]},{"Key":"to inline","Fragments":["anyway,","a","the"]},{"Key":"inline anyway,","Fragments":["so"]},{"Key":"anyway, so","Fragments":["no","it's"]},{"Key":"so no","Fragments":["worries","need","looping"]},{"Key":"no worries","Fragments":["about"]},{"Key":"worries about","Fragments":["that."]},{"Key":"The issue","Fragments":["of","is","is"]},{"Key":"issue of","Fragments":["reordering"]},{"Key":"of reordering","Fragments":["the"]},{"Key":"reordering the","Fragments":["`if`'s:"]},{"Key":"the `if`'s:","Fragments":["from"]},{"Key":"`if`'s: from","Fragments":["my"]},{"Key":"from my","Fragments":["analysis","initial","lack","first"]},{"Key":"my analysis","Fragments":["of"]},{"Key":"analysis of","Fragments":["the"]},{"Key":"the cases,","Fragments":["it"]},{"Key":"cases, it","Fragments":["seemed"]},{"Key":"it seemed","Fragments":["like","overly","neater","to","easier"]},{"Key":"seemed like","Fragments":["reordering","a","too","a","a","they"]},{"Key":"like reordering","Fragments":["them"]},{"Key":"reordering them","Fragments":["would"]},{"Key":"them would","Fragments":["require"]},{"Key":"would require","Fragments":["nested","traversing"]},{"Key":"require nested","Fragments":["if's."]},{"Key":"nested if's.","Fragments":["This"]},{"Key":"if's. This","Fragments":["way"]},{"Key":"This way","Fragments":["the","you","you'd","you","you","code","you","we","you","you","you","you"]},{"Key":"the flow","Fragments":["is","of","here","from"]},{"Key":"flow is","Fragments":["flat"]},{"Key":"is flat","Fragments":["and"]},{"Key":"flat and","Fragments":["elegant."]},{"Key":"did make","Fragments":["it","the"]},{"Key":"it difficult","Fragments":["for","to","for","to"]},{"Key":"difficult for","Fragments":["yourself.","myself.","me"]},{"Key":"for yourself.","Fragments":["Aim","A"]},{"Key":"yourself. Aim","Fragments":["for"]},{"Key":"Aim for","Fragments":["one"]},{"Key":"for one","Fragments":["```return```","line?","command","or"]},{"Key":"one ```return```","Fragments":["for"]},{"Key":"```return``` for","Fragments":["each"]},{"Key":"You got","Fragments":["a"]},{"Key":"got a","Fragments":["good","string","lot","positive","lot","comment","bit","lot","couple","couple"]},{"Key":"start on","Fragments":["typing","the"]},{"Key":"on typing","Fragments":["the"]},{"Key":"typing the","Fragments":["responses,"]},{"Key":"the responses,","Fragments":["here"]},{"Key":"responses, here","Fragments":["is"]},{"Key":"here is","Fragments":["my","an","that","that","that","pointless.","when","the","basically","to","better.","that","my","that","breaking","mostly"]},{"Key":"- Silence","Fragments":["is"]},{"Key":"Silence is","Fragments":["only","defined"]},{"Key":"is only","Fragments":["white","negative","defined","used","one","used","to","guaranteed","8","a","visible","used","a","the","visible","ASCII-aware.","white","defined"]},{"Key":"only white","Fragments":["space","spaces","space","space,"]},{"Key":"- Questions","Fragments":["end"]},{"Key":"Questions end","Fragments":["with"]},{"Key":"end with","Fragments":["a"]},{"Key":"a ```?```","Fragments":["(```input.back()```)"]},{"Key":"- Shouting","Fragments":["is"]},{"Key":"Shouting is","Fragments":["no"]},{"Key":"no lowercase","Fragments":["letter","characters.","letters","alphabetic","letters,","letters","characters"]},{"Key":"lowercase letter","Fragments":["and"]},{"Key":"letter and","Fragments":["at","no"]},{"Key":"and at","Fragments":["least","least","first","worst","the"]},{"Key":"least one","Fragments":["uppercase","upper","upper","alpha","character","C++","pointless","is","alphabetic","upper-case","uppercase","char","variable","upper"]},{"Key":"one uppercase","Fragments":["(Write","letter"]},{"Key":"uppercase (Write","Fragments":["your"]},{"Key":"(Write your","Fragments":["own"]},{"Key":"your own","Fragments":["function)","calculations","errors","code","copy","code","cpp","memory.","private","implementation","otherwise,","string","helper."]},{"Key":"- Whatever","Fragments":["is"]},{"Key":"Whatever is","Fragments":["anything"]},{"Key":"is anything","Fragments":["else","wrong"]},{"Key":"anything else","Fragments":["(default"]},{"Key":"else (default","Fragments":["case)"]},{"Key":" ```boost::trim_copy```","Fragments":["is"]},{"Key":"```boost::trim_copy``` is","Fragments":["a"]},{"Key":"remove leading","Fragments":["and","whitespace."]},{"Key":"leading and","Fragments":["tailing"]},{"Key":"and tailing","Fragments":["white"]},{"Key":"tailing white","Fragments":["space"]},{"Key":"white space","Fragments":["[\u003ca","sensitive.","you","with","after","exists","makes","a","won't"]},{"Key":"space [\u003ca","Fragments":["href=http://www.boost.org/doc/libs/1_54_0/doc/html/boost/algorithm/trim_copy.html\u003eboost::trim_copy\u003c/a\u003e]"]},{"Key":"on starting","Fragments":["the","the"]},{"Key":"starting the","Fragments":["C++","C++"]},{"Key":"the C++","Fragments":["track,","track.","tests),","mantra","standard","standard","stuff.","standard.","iterator","methods","way,","version","Standard","Standard","wrappers","string","standard","way"]},{"Key":"C++ track,","Fragments":["getting"]},{"Key":"track, getting","Fragments":["the"]},{"Key":"getting the","Fragments":["first","right","`tail`","enum","enum","enum","enum","correct","string"]},{"Key":"first exercise","Fragments":["done","itself","instead"]},{"Key":"exercise done","Fragments":["can"]},{"Key":"done can","Fragments":["be"]},{"Key":" On","Fragments":["investigating,","a","the","a","the","a","some","the","the","topic,","the","a"]},{"Key":"On investigating,","Fragments":["it"]},{"Key":"investigating, it","Fragments":["appears"]},{"Key":"it appears","Fragments":["Visual","that","that","bob","in"]},{"Key":"appears Visual","Fragments":["C++"]},{"Key":"Visual C++","Fragments":["[supports]"]},{"Key":"C++ [supports]","Fragments":["(https://msdn.microsoft.com/en-us/library/ms177202.aspx)"]},{"Key":"[supports] (https://msdn.microsoft.com/en-us/library/ms177202.aspx)","Fragments":["it"]},{"Key":"(https://msdn.microsoft.com/en-us/library/ms177202.aspx) it","Fragments":["but"]},{"Key":"it but","Fragments":["standard","why","it's","I"]},{"Key":"but standard","Fragments":["C++","C++."]},{"Key":"standard C++","Fragments":["does","or"]},{"Key":"C++ does","Fragments":["not."]},{"Key":"does not.","Fragments":["I","Seems"]},{"Key":"not. I","Fragments":["have","wouldn't"]},{"Key":"have found","Fragments":["a","a"]},{"Key":"found a","Fragments":["`for_each`","way","bug.","case","punctuation","character","good","better","bit"]},{"Key":"a `for_each`","Fragments":["[equivalent]"]},{"Key":"`for_each` [equivalent]","Fragments":["(http://www.cplusplus.com/reference/algorithm/for_each/)"]},{"Key":"[equivalent] (http://www.cplusplus.com/reference/algorithm/for_each/)","Fragments":["in"]},{"Key":"(http://www.cplusplus.com/reference/algorithm/for_each/) in","Fragments":["standard"]},{"Key":"in standard","Fragments":["c++.","library"]},{"Key":"use `counter::nucleotide_counts`","Fragments":["in"]},{"Key":"`counter::nucleotide_counts` in","Fragments":["`counter::counts`"]},{"Key":"in `counter::counts`","Fragments":["because"]},{"Key":"`counter::counts` because","Fragments":["their"]},{"Key":"because their","Fragments":["return"]},{"Key":"their return","Fragments":["type"]},{"Key":"type is","Fragments":["different.","too","unambiguous","preferable","inherently","actually"]},{"Key":"agree with","Fragments":["`input`","you,","all","him,","99%","you,","your","`is_lower`","you","@lilly","you","the","you","using","your","@nikko.","you","that.","your","you"]},{"Key":"with `input`","Fragments":["to"]},{"Key":"`input` to","Fragments":["keep"]},{"Key":" Also","Fragments":["having","mixed","the","it's","i","consider","with","line=\"\"","not","of","(just","one","you","I'm","you","`working_copy`","I","I","All","I","i","a","instead","you","you","the","you've","I","as","you","do","you","you","you","if","why","appreciate"]},{"Key":"Also having","Fragments":["nucleotide"]},{"Key":"having nucleotide","Fragments":["letters"]},{"Key":"letters defined","Fragments":["at"]},{"Key":"defined at","Fragments":["two","compile"]},{"Key":"at two","Fragments":["place"]},{"Key":"two place","Fragments":["isn't"]},{"Key":"place isn't","Fragments":["good."]},{"Key":"The `for","Fragments":["each`"]},{"Key":"`for each`","Fragments":["comes"]},{"Key":"each` comes","Fragments":["from"]},{"Key":"comes from","Fragments":["STL/CLR","a","the","C.","the"]},{"Key":"from STL/CLR","Fragments":["Library."]},{"Key":"As per","Fragments":["the"]},{"Key":"per the","Fragments":["documentation.","good"]},{"Key":" \u003eThe","Fragments":["STL/CLR"]},{"Key":"\u003eThe STL/CLR","Fragments":["Library"]},{"Key":"STL/CLR Library","Fragments":["is"]},{"Key":"Library is","Fragments":["a"]},{"Key":"a packaging","Fragments":["of"]},{"Key":"packaging of","Fragments":["the"]},{"Key":"the Standard","Fragments":["Template","C++"]},{"Key":"Standard Template","Fragments":["Library"]},{"Key":"Template Library","Fragments":["(STL),"]},{"Key":"Library (STL),","Fragments":["a"]},{"Key":"(STL), a","Fragments":["subset"]},{"Key":"a subset","Fragments":["of","of"]},{"Key":"subset of","Fragments":["the","`isspace()`"]},{"Key":"Standard C++","Fragments":["Library,"]},{"Key":"C++ Library,","Fragments":["for"]},{"Key":"Library, for","Fragments":["use"]},{"Key":"for use","Fragments":["with","with"]},{"Key":"use with","Fragments":["C++","std::find_if().","Bob."]},{"Key":"with C++","Fragments":["and","classes,","is","was","and"]},{"Key":"the .NET","Fragments":["Framework","languages?","runtime)."]},{"Key":".NET Framework","Fragments":["common"]},{"Key":"Framework common","Fragments":["language"]},{"Key":"common language","Fragments":["runtime"]},{"Key":"language runtime","Fragments":["(CLR)."]},{"Key":"runtime (CLR).","Fragments":["With"]},{"Key":"(CLR). With","Fragments":["STL/CLR,"]},{"Key":"With STL/CLR,","Fragments":["you"]},{"Key":"STL/CLR, you","Fragments":["can"]},{"Key":"use all","Fragments":["the"]},{"Key":"the containers,","Fragments":["iterators,"]},{"Key":"containers, iterators,","Fragments":["and"]},{"Key":"iterators, and","Fragments":["algorithms"]},{"Key":"and algorithms","Fragments":["of","like"]},{"Key":"algorithms of","Fragments":["STL"]},{"Key":"of STL","Fragments":["in"]},{"Key":"STL in","Fragments":["a"]},{"Key":"a managed","Fragments":["environment.","resource."]},{"Key":" Wow.","Fragments":["Much","Regex"]},{"Key":"Wow. Much","Fragments":["more"]},{"Key":"Much more","Fragments":["readable."]},{"Key":" Small","Fragments":["nit,","nit,","nit,"]},{"Key":"Small nit,","Fragments":["would","identifying","why","but"]},{"Key":"nit, would","Fragments":["```if("]},{"Key":"would ```if(","Fragments":["!word.empty()"]},{"Key":"```if( !word.empty()","Fragments":[")"]},{"Key":"!word.empty() )","Fragments":["dictionary[word]++;```"]},{"Key":") dictionary[word]++;```","Fragments":["be"]},{"Key":"dictionary[word]++;``` be","Fragments":["cleaner?"]},{"Key":"be cleaner?","Fragments":["["]},{"Key":"cleaner? [","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://www.cplusplus.com/reference/string/string/empty/\u003estring::empty\u003c/a\u003e","Fragments":["]"]},{"Key":"This isn't","Fragments":["working.","first","the","minified"]},{"Key":"isn't working.","Fragments":["make"]},{"Key":"working. make","Fragments":["gives"]},{"Key":"make gives","Fragments":["me"]},{"Key":"gives me","Fragments":["spurious","the"]},{"Key":"me spurious","Fragments":["errors/"]},{"Key":"spurious errors/","Fragments":["As"]},{"Key":"errors/ As","Fragments":["follows"]},{"Key":" make","Fragments":["bob","-\u003e","*score*"]},{"Key":" Scanning","Fragments":["dependencies","dependencies"]},{"Key":"Scanning dependencies","Fragments":["of","of"]},{"Key":"dependencies of","Fragments":["target","target"]},{"Key":"of target","Fragments":["bob","bob"]},{"Key":" [","Fragments":["50%]","RUN","DONE","RUNS","RUN","DONE","RUNS","RUN","DONE","RUNS","RUN","DONE","RUNS","33%]","66%]"]},{"Key":"[ 50%]","Fragments":["Building"]},{"Key":"50%] Building","Fragments":["CXX"]},{"Key":"Building CXX","Fragments":["object","object"]},{"Key":"CXX object","Fragments":["CMakeFiles/bob.dir/bob.cpp.o","CMakeFiles/bob.dir/bob_test.cpp.o"]},{"Key":" Linking","Fragments":["CXX"]},{"Key":"Linking CXX","Fragments":["executable","executable"]},{"Key":"CXX executable","Fragments":["bob","bob"]},{"Key":" ld:","Fragments":["can't"]},{"Key":"ld: can't","Fragments":["open"]},{"Key":"can't open","Fragments":["output"]},{"Key":"open output","Fragments":["file"]},{"Key":"output file","Fragments":["for"]},{"Key":"file for","Fragments":["writing:","functions","an","iteration","these."]},{"Key":"for writing:","Fragments":["bob,"]},{"Key":"writing: bob,","Fragments":["errno=21"]},{"Key":"bob, errno=21","Fragments":["for"]},{"Key":"errno=21 for","Fragments":["architecture"]},{"Key":"for architecture","Fragments":["x86_64"]},{"Key":" clang:","Fragments":["error:"]},{"Key":"clang: error:","Fragments":["linker"]},{"Key":"error: linker","Fragments":["command"]},{"Key":"linker command","Fragments":["failed"]},{"Key":"command failed","Fragments":["with"]},{"Key":"failed with","Fragments":["exit"]},{"Key":"with exit","Fragments":["code"]},{"Key":"exit code","Fragments":["1"]},{"Key":"code 1","Fragments":["(use"]},{"Key":"1 (use","Fragments":["-v"]},{"Key":"(use -v","Fragments":["to"]},{"Key":"-v to","Fragments":["see"]},{"Key":" make[3]:","Fragments":["***"]},{"Key":"make[3]: ***","Fragments":["[bob]"]},{"Key":"*** [bob]","Fragments":["Error","Error"]},{"Key":"[bob] Error","Fragments":["1","2"]},{"Key":" make[2]:","Fragments":["***","***"]},{"Key":"make[2]: ***","Fragments":["[CMakeFiles/bob.dir/all]","[word-count]"]},{"Key":"*** [CMakeFiles/bob.dir/all]","Fragments":["Error"]},{"Key":"[CMakeFiles/bob.dir/all] Error","Fragments":["2"]},{"Key":" make[1]:","Fragments":["***","***"]},{"Key":"make[1]: ***","Fragments":["[CMakeFiles/bob.dir/rule]","[CMakeFiles/word-count.dir/all]"]},{"Key":"*** [CMakeFiles/bob.dir/rule]","Fragments":["Error"]},{"Key":"[CMakeFiles/bob.dir/rule] Error","Fragments":["2"]},{"Key":" make:","Fragments":["***","***"]},{"Key":"make: ***","Fragments":["[bob]","[all]"]},{"Key":"sure I","Fragments":["understand","buy","follow","understand","do","have"]},{"Key":"I understand","Fragments":["why","most","hiding","how","that","it","it's","many","correctly,","it,","from","the","it!","it.","why","your"]},{"Key":"understand why","Fragments":["we","one","I","you","its","you","you"]},{"Key":"why we","Fragments":["have"]},{"Key":"we have","Fragments":["two","a","not","these","to","two","to","only","`result`","something","`m/k=0`","Visual","a","helper","a","a","to"]},{"Key":"two ways","Fragments":["of","to"]},{"Key":"ways of","Fragments":["denoting","the","checking"]},{"Key":"of denoting","Fragments":["the"]},{"Key":"denoting the","Fragments":["same"]},{"Key":"same thing;","Fragments":["that"]},{"Key":"thing; that","Fragments":["the"]},{"Key":"triangle sides","Fragments":["input"]},{"Key":"sides input","Fragments":["do"]},{"Key":"input do","Fragments":["not"]},{"Key":"not represent","Fragments":["a"]},{"Key":"represent a","Fragments":["valid","range"]},{"Key":"a valid","Fragments":["triangle.","input","test","point,","input","check","thing","char.","regular"]},{"Key":" Oh,","Fragments":["I","because","I","this","nice","and","and"]},{"Key":"Oh, I","Fragments":["didn't","see!"]},{"Key":"didn't notice","Fragments":["that.","that"]},{"Key":"notice that.","Fragments":["Thanks"]},{"Key":"C++ track.","Fragments":["Getting"]},{"Key":"track. Getting","Fragments":["the"]},{"Key":"Getting the","Fragments":["system","whole"]},{"Key":"the system","Fragments":["setup"]},{"Key":"system setup","Fragments":["is"]},{"Key":"setup is","Fragments":["half"]},{"Key":"is half","Fragments":["the"]},{"Key":"half the","Fragments":["problem.","size."]},{"Key":"the problem.","Fragments":["Now","Also,","You","IMO","On","A","Speciallly","Do","However,","You","Nice","Or","One","However,"]},{"Key":"problem. Now","Fragments":["let's"]},{"Key":"Now let's","Fragments":["see","say","try"]},{"Key":"let's see","Fragments":["if","if"]},{"Key":"code can","Fragments":["be","be"]},{"Key":"The logic","Fragments":["of"]},{"Key":"of of","Fragments":["your"]},{"Key":"your solution","Fragments":["is","for","and","does","is","better","a","and","is.","lacks","specifically","=)","is","will","performs","is","handles","as","is","should"]},{"Key":"solution is","Fragments":["difficult","very","not","longer","now","very","O(n).","to","fine","not","readable","tailored","20","heavily","that","basically","that","fairly","probably","suggested","so","correct.","complete.","to"]},{"Key":"to follow.","Fragments":["It","The"]},{"Key":"follow. It","Fragments":["could"]},{"Key":"It could","Fragments":["be","point","return","be","be","have"]},{"Key":"be improved","Fragments":["by","if","by","upon","anymore.","on:","with"]},{"Key":"improved by","Fragments":["doing","moving"]},{"Key":"by doing","Fragments":["a","if","some","this.","(range"]},{"Key":"a ```scan_string```","Fragments":["function"]},{"Key":"```scan_string``` function","Fragments":["that"]},{"Key":"looks for","Fragments":["and","a","an"]},{"Key":"for and","Fragments":["returns","therefore","trust","using"]},{"Key":"and returns","Fragments":["```letters```","a","a","`true`","a","true","a","the","the","the","the","the"]},{"Key":"returns ```letters```","Fragments":["and"]},{"Key":"```letters``` and","Fragments":["```something```."]},{"Key":"and ```something```.","Fragments":["Some"]},{"Key":"```something```. Some","Fragments":["ideas"]},{"Key":"ideas on","Fragments":["how","how","how"]},{"Key":"return multiple","Fragments":["values"]},{"Key":"multiple values","Fragments":["from"]},{"Key":"values from","Fragments":["a","the","file,"]},{"Key":"function [","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://stackoverflow.com/questions/321068/returning-multiple-values-from-a-c-function\u003eStack","Fragments":["Overflow\u003c/a\u003e"]},{"Key":"href=http://stackoverflow.com/questions/321068/returning-multiple-values-from-a-c-function\u003eStack Overflow\u003c/a\u003e","Fragments":["]"]},{"Key":" Another","Fragments":["approach","way","thing","way","pet","example","place","possibility","note:","interesting","note"]},{"Key":"Another approach","Fragments":["is"]},{"Key":"use or","Fragments":["write","could"]},{"Key":"or write","Fragments":["function","my"]},{"Key":"write function","Fragments":["that","similar"]},{"Key":"that specifically","Fragments":["check"]},{"Key":"specifically check","Fragments":["for"]},{"Key":"each case,","Fragments":["e.g."]},{"Key":"case, e.g.","Fragments":["```is_shouting```,"]},{"Key":"e.g. ```is_shouting```,","Fragments":["```is_question```,"]},{"Key":"```is_shouting```, ```is_question```,","Fragments":["etc."]},{"Key":" Finally","Fragments":["you"]},{"Key":"Finally you","Fragments":["can"]},{"Key":"can index","Fragments":["into","`string`s"]},{"Key":"index into","Fragments":["a","an","a","it"]},{"Key":"a ```std::string```","Fragments":["directly,","owns","with","object"]},{"Key":"```std::string``` directly,","Fragments":["no"]},{"Key":"directly, no","Fragments":["need"]},{"Key":"no need","Fragments":["to","to","for:","to","for","to","for","for","to","to","to","for","for","to","for","for","for","to","for","to","to","for"]},{"Key":"to convert","Fragments":["to","back.","it","everything","the","the","a","everything"]},{"Key":"convert to","Fragments":["a","a","`toupper()`","lower","string","hours"]},{"Key":"a c-string","Fragments":["first."]},{"Key":"c-string first.","Fragments":["["]},{"Key":"first. [","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://www.cplusplus.com/reference/string/string/operator%5B%5D/\u003estring::operator[]\u003c/a\u003e","Fragments":["]"]},{"Key":"Good luck","Fragments":["and"]},{"Key":"luck and","Fragments":["welcome"]},{"Key":"and welcome","Fragments":["to"]},{"Key":"welcome to","Fragments":["the"]},{"Key":"the Exercism","Fragments":["C++."]},{"Key":" Assuming","Fragments":["you"]},{"Key":"Assuming you","Fragments":["followed","set"]},{"Key":"you followed","Fragments":["\u003ca"]},{"Key":"followed \u003ca","Fragments":["href=http://help.exercism.io/getting-started-with-cpp.html\u003ethe"]},{"Key":"\u003ca href=http://help.exercism.io/getting-started-with-cpp.html\u003ethe","Fragments":["setup"]},{"Key":"href=http://help.exercism.io/getting-started-with-cpp.html\u003ethe setup","Fragments":["instructions\u003c/a\u003e"]},{"Key":"setup instructions\u003c/a\u003e","Fragments":["for"]},{"Key":"instructions\u003c/a\u003e for","Fragments":["your"]},{"Key":"your specific","Fragments":["OS,"]},{"Key":"specific OS,","Fragments":["try"]},{"Key":"OS, try","Fragments":["writing"]},{"Key":"try writing","Fragments":["this"]},{"Key":"writing this","Fragments":["one","I","I"]},{"Key":"this one","Fragments":["all","and","8","☺.","should","at","was","down","better.","pretty","are","function.","works,","only","doesn't","not","has","a","should","for"]},{"Key":"one all","Fragments":["in"]},{"Key":"all in","Fragments":["the","one","one","one","anonymous","the","one","one","my","one","one","one","one","one","c"]},{"Key":"the header","Fragments":["file.","file","commented","file","file,","that","file","file,","files","anymore,","in","for","twice...hmmmm...","twice.","for","file","file.","file","I","file","file","file.","file","file","file,","file.","file","files","file","and","too.","for","or","guards.","`\u003ccctype\u003e`","and","file,","file.","file.","file","with","file","files.","is"]},{"Key":" #ifndef","Fragments":["BOB_H","FOO","HEX_BENCH_"]},{"Key":" #define","Fragments":["BOB_H","FOO","HEX_BENCH_"]},{"Key":" #include","Fragments":["\u003cstring\u003e","\u003cstring\u003e","\u003ciostream\u003e","\u003cstring\u003e","\u003cstring\u003e","\u003cstring\u003e","\u003chayai.hpp\u003e","\"hex_bench.h\"","\u003ctypeinfo\u003e","\u003ciostream\u003e","\"nucleotide_count.h\"","\u003cstring\u003e","\u003ciostream\u003e"]},{"Key":" namespace","Fragments":["bob","word_count","word_count","FrostyLib","{","response","fs","scrabble_score","{","bob","bob{","bob","anagram","grains"]},{"Key":"namespace bob","Fragments":["{","for","and","and","instead","instead","{","{"]},{"Key":" std::string","Fragments":["hey(std::string","sing(int","name;","result{\"\"};","const","format(std::string","formatted{digits};","hey(const","hello","lowercase(std::string","result","clean(std::string","word;","downcase(std::string","s","hey(std::string","hey(const","hey(const","hey(const","hey(std::string","hey(std::string","s_func","s;","word","word;","word;","word(","rna{dna};"]},{"Key":"std::string hey(std::string","Fragments":["const\u0026","const\u0026","str_in);","const"]},{"Key":"hey(std::string const\u0026","Fragments":["saySomethingToBob)","s)"]},{"Key":"const\u0026 saySomethingToBob)","Fragments":["{"]},{"Key":"// Code","Fragments":["goes"]},{"Key":"Code goes","Fragments":["here"]},{"Key":" Longer","Fragments":["term"]},{"Key":"Longer term","Fragments":["\u003ca"]},{"Key":"term \u003ca","Fragments":["href=http://www.learncpp.com/\u003eLearn"]},{"Key":"\u003ca href=http://www.learncpp.com/\u003eLearn","Fragments":["Cpp\u003c/a\u003e"]},{"Key":"href=http://www.learncpp.com/\u003eLearn Cpp\u003c/a\u003e","Fragments":["is"]},{"Key":"Cpp\u003c/a\u003e is","Fragments":["a"]},{"Key":"a great","Fragments":["introduction","idea.","solution,","use","idea,","optimizer)","idea.","solution","rule","leap","solution","fantastic","stack","style.","optimization."]},{"Key":"great introduction","Fragments":["to"]},{"Key":"introduction to","Fragments":["c++","TDD"]},{"Key":"c++ and","Fragments":["how","looking"]},{"Key":"and how","Fragments":["to","readability","is","I","clean","you","well","broadly"]},{"Key":"to deal","Fragments":["with","with","with","with","with","with","with","with","with","with"]},{"Key":"deal with","Fragments":["classes","char*","const_iterator,","the","all","the","Windows","input","random-access","current[0]","floating-point","is","(or","working_copy","this","this","spaces,","if","getting","it,","inputs","trailing","this"]},{"Key":"with classes","Fragments":["and","than"]},{"Key":" Exercism","Fragments":["only"]},{"Key":"Exercism only","Fragments":["accepts"]},{"Key":"only accepts","Fragments":["one","full"]},{"Key":"accepts one","Fragments":["file"]},{"Key":"file per","Fragments":["solution."]},{"Key":"per solution.","Fragments":["Workarounds"]},{"Key":"solution. Workarounds","Fragments":["for"]},{"Key":"Workarounds for","Fragments":["C++"]},{"Key":"for C++","Fragments":["are","(I","asks"]},{"Key":"C++ are","Fragments":["1)","limited,"]},{"Key":"are 1)","Fragments":["only"]},{"Key":"1) only","Fragments":["in"]},{"Key":"only in","Fragments":["the","that",".cpp","your","the","a","cpp"]},{"Key":"header file","Fragments":["or","(thx",",","could","-","as","it'll","as","for","as","at","doesn't","was","but","since","which","is","or","along","to","has"]},{"Key":"file or","Fragments":["2)","some","you","the","other","not"]},{"Key":"or 2)","Fragments":["include"]},{"Key":"2) include","Fragments":["the"]},{"Key":"header commented","Fragments":["out"]},{"Key":"commented out","Fragments":["at","or","`trim()`","code","code","copy"]},{"Key":"out at","Fragments":["the","C++11","me?"]},{"Key":"the top","Fragments":["of","of","to","of","of","of","of","of","and"]},{"Key":"top of","Fragments":["the","my","my","the","the","the","the","it."]},{"Key":".cpp file.","Fragments":["Look","Did","If","That"]},{"Key":"file. Look","Fragments":["at"]},{"Key":"Look at","Fragments":["other","the","the","the","the","the","the"]},{"Key":"at other","Fragments":["solutions","submissions,","solutions","people's","solutions","places.","submissions","solutions,","people's","solutions."]},{"Key":"other solutions","Fragments":["to","I","I","and","that","to","I"]},{"Key":"solutions to","Fragments":["seem","see","see"]},{"Key":"to seem","Fragments":["implementations."]},{"Key":" Excellent","Fragments":["solution.","work.","point,"]},{"Key":"Excellent solution.","Fragments":["Small"]},{"Key":"solution. Small","Fragments":["nit,"]},{"Key":"nit, identifying","Fragments":["```phone```"]},{"Key":"identifying ```phone```","Fragments":["as"]},{"Key":"```phone``` as","Fragments":["a"]},{"Key":"a member","Fragments":["variable","variable,","variable","variable","function","of","initializer","variable.","function.","function","variable","of"]},{"Key":"member variable","Fragments":["took","indirectly","`const`","from","``board``?","you","instead","word","as","instead"]},{"Key":"variable took","Fragments":["an"]},{"Key":"took an","Fragments":["extra"]},{"Key":"an extra","Fragments":["minute.","mutable","copy","copy","copy","copy.","argument","copy","function","ispunct","copy","break","layer","layer"]},{"Key":"extra minute.","Fragments":["Did"]},{"Key":"minute. Did","Fragments":["you"]},{"Key":"consider distinguishing","Fragments":["```phone```"]},{"Key":"distinguishing ```phone```","Fragments":["either"]},{"Key":"```phone``` either","Fragments":["as"]},{"Key":"either as","Fragments":["```mPhone```"]},{"Key":"as ```mPhone```","Fragments":["or"]},{"Key":"```mPhone``` or","Fragments":["\u003ca"]},{"Key":"or \u003ca","Fragments":["href=http://stackoverflow.com/a/1229360\u003esome"]},{"Key":"\u003ca href=http://stackoverflow.com/a/1229360\u003esome","Fragments":["other"]},{"Key":"href=http://stackoverflow.com/a/1229360\u003esome other","Fragments":["prefix\u003c/a\u003e?"]},{"Key":" No,","Fragments":["I","I"]},{"Key":"No, I","Fragments":["thought","probably"]},{"Key":"thought `phone`","Fragments":["would"]},{"Key":"`phone` would","Fragments":["be"]},{"Key":"be ok.","Fragments":["But"]},{"Key":"ok. But","Fragments":["after"]},{"Key":"But after","Fragments":["looking","I"]},{"Key":"after looking","Fragments":["at","at"]},{"Key":"your link,","Fragments":["it"]},{"Key":"link, it","Fragments":["seems"]},{"Key":"seems I","Fragments":["should've","copy"]},{"Key":"I should've","Fragments":["either"]},{"Key":"should've either","Fragments":["used"]},{"Key":"either used","Fragments":["`mphone`"]},{"Key":"used `mphone`","Fragments":["or"]},{"Key":"`mphone` or","Fragments":["this-\u003ephone."]},{"Key":"think `mphone`","Fragments":["would've"]},{"Key":"`mphone` would've","Fragments":["been"]},{"Key":"would've been","Fragments":["better","an","a"]},{"Key":"been better","Fragments":["option.","to","-","to"]},{"Key":"better option.","Fragments":["I"]},{"Key":"option. I","Fragments":["will"]},{"Key":"will follow","Fragments":["this"]},{"Key":"follow this","Fragments":["convention"]},{"Key":"this convention","Fragments":["now"]},{"Key":"convention now","Fragments":["!"]},{"Key":" Google","Fragments":["has"]},{"Key":"Google has","Fragments":["also"]},{"Key":"has also","Fragments":["defined","been"]},{"Key":"also defined","Fragments":["their"]},{"Key":"defined their","Fragments":["[standard]"]},{"Key":"their [standard]","Fragments":["(http://google-styleguide.googlecode.com/svn/trunk/cppguide.html#Variable_Names)."]},{"Key":"[standard] (http://google-styleguide.googlecode.com/svn/trunk/cppguide.html#Variable_Names).","Fragments":["There"]},{"Key":"(http://google-styleguide.googlecode.com/svn/trunk/cppguide.html#Variable_Names). There","Fragments":["doesn't"]},{"Key":"There doesn't","Fragments":["seem","seem"]},{"Key":"doesn't seem","Fragments":["to","like","to","to","too","to","to","very","that","to","smart"]},{"Key":"seem to","Fragments":["be","be","be","be","handle","be","have","be","me","care","be","be","be","indicate","iterate","cover","be","get","matter.","be"]},{"Key":"a fixed","Fragments":["standard","epsilon,","size","bicycle"]},{"Key":"fixed standard","Fragments":["for","I"]},{"Key":"standard for","Fragments":["c++."]},{"Key":"Good research,","Fragments":["no"]},{"Key":"research, no","Fragments":["fixed"]},{"Key":"no fixed","Fragments":["standard"]},{"Key":"standard I","Fragments":["know"]},{"Key":"know of.","Fragments":["Google's"]},{"Key":"of. Google's","Fragments":["is"]},{"Key":"Google's is","Fragments":["interesting"]},{"Key":"is interesting","Fragments":["because"]},{"Key":"interesting because","Fragments":["it's","it"]},{"Key":"because it's","Fragments":["post-fix.","specifically","in","half","more","a","more","returning","only","a","a","more","not","not","a","encapsulated","easy","simpiler"]},{"Key":" Making","Fragments":["```phone_```","`11574`"]},{"Key":"Making ```phone_```","Fragments":["the"]},{"Key":"```phone_``` the","Fragments":["private"]},{"Key":"the private","Fragments":["variable","data","methods.","`squares()`"]},{"Key":"private variable","Fragments":["and"]},{"Key":"variable and","Fragments":["```phone```","returning","then","check"]},{"Key":"and ```phone```","Fragments":["the"]},{"Key":"```phone``` the","Fragments":["argument"]},{"Key":"the argument","Fragments":["to","is","is","and","fails","my","for","into","type","type","would","to","in-place,","of","of","order"]},{"Key":"argument to","Fragments":["the","*insert*","find_if","the","function","```const"]},{"Key":"constructor would","Fragments":["be","be"]},{"Key":"be OK.","Fragments":["Just"]},{"Key":"OK. Just","Fragments":["some"]},{"Key":"Just some","Fragments":["note","thoughts..."]},{"Key":"some note","Fragments":["to"]},{"Key":"to remind","Fragments":["readers"]},{"Key":"remind readers","Fragments":["that"]},{"Key":"readers that","Fragments":["it's"]},{"Key":"that it's","Fragments":["not","no","potentially","pretty","\u003e","meant","a","especially","an","going","an","possible","possible","better","using","a","become","not","better","a"]},{"Key":"a local","Fragments":["variable.","variable","variable","string.","variable","variable","struct","variable,","reference","Community","reference","reference","variable","copy"]},{"Key":"not know,","Fragments":["that"]},{"Key":"know, that","Fragments":["you"]},{"Key":"can directly","Fragments":["index","use"]},{"Key":"directly index","Fragments":["a"]},{"Key":"index a","Fragments":["\u003ccode\u003estd::string\u003c/code\u003e."]},{"Key":"am using","Fragments":["functions","isupper()","the","clang","OS"]},{"Key":"using functions","Fragments":["now,"]},{"Key":"functions now,","Fragments":["but"]},{"Key":"now, but","Fragments":["decided","have"]},{"Key":"but decided","Fragments":["to","to","to","it","to"]},{"Key":"decided to","Fragments":["write","keep","declare","use","try","make","learn","redo","convert","store","try","ignore","switch","keep","use","switch","just","steal","move","interpret","use","use","rewrite","check","remove","combine","crunch","go","work","use","first","check","do"]},{"Key":"function for","Fragments":["\u003ccode\u003eletters\u003c/code\u003e","\u003ccode\u003esomething\u003c/code\u003e,","call","allUpper","strings.","you.","free.","readability","trimTail()"]},{"Key":"for \u003ccode\u003eletters\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eletters\u003c/code\u003e and","Fragments":["a"]},{"Key":"for \u003ccode\u003esomething\u003c/code\u003e,","Fragments":["because"]},{"Key":"\u003ccode\u003esomething\u003c/code\u003e, because","Fragments":["I"]},{"Key":"not think","Fragments":["it","of","of","of","switch"]},{"Key":"is easily","Fragments":["readable","understandable"]},{"Key":"easily readable","Fragments":["and"]},{"Key":"and understandable,","Fragments":["which"]},{"Key":"understandable, which","Fragments":["boolean"]},{"Key":"which boolean","Fragments":["whould"]},{"Key":"boolean whould","Fragments":["stand"]},{"Key":"whould stand","Fragments":["for"]},{"Key":"stand for","Fragments":["what,"]},{"Key":"for what,","Fragments":["if"]},{"Key":"what, if","Fragments":["I"]},{"Key":"single function","Fragments":["and","exit","call","without","at","so"]},{"Key":"Nice variable","Fragments":["names,"]},{"Key":"variable names,","Fragments":["they"]},{"Key":"names, they","Fragments":["are"]},{"Key":"are very","Fragments":["helpful.","minor","long","correct.","common"]},{"Key":"very helpful.","Fragments":["```string_to_map_and_lowercase```"]},{"Key":"helpful. ```string_to_map_and_lowercase```","Fragments":["and"]},{"Key":"```string_to_map_and_lowercase``` and","Fragments":["```for(std::string"]},{"Key":"and ```for(std::string","Fragments":["test"]},{"Key":"```for(std::string test","Fragments":[":"]},{"Key":"test :","Fragments":["tests)```"]},{"Key":": tests)```","Fragments":["is"]},{"Key":"tests)``` is","Fragments":["especially"]},{"Key":"is especially","Fragments":["nice,"]},{"Key":"especially nice,","Fragments":["readability"]},{"Key":"nice, readability","Fragments":["like"]},{"Key":"readability like","Fragments":["that"]},{"Key":"that found","Fragments":["in"]},{"Key":"in text","Fragments":["books."]},{"Key":"nit, why","Fragments":["put"]},{"Key":"why put","Fragments":["```continue```"]},{"Key":"put ```continue```","Fragments":["in"]},{"Key":"```continue``` in","Fragments":["the"]},{"Key":"the ```if```","Fragments":["instead","on"]},{"Key":"```if``` instead","Fragments":["of"]},{"Key":"of ```if(test","Fragments":["!="]},{"Key":"```if(test !=","Fragments":["value)"]},{"Key":"!= value)","Fragments":["{"]},{"Key":"value) {","Fragments":["erg.push_back(org)","change(value);","change(value);"]},{"Key":"{ erg.push_back(org)","Fragments":["}```?"]},{"Key":"erg.push_back(org) }```?","Fragments":["Or"]},{"Key":"}```? Or","Fragments":["make"]},{"Key":"Or make","Fragments":["the"]},{"Key":"the outer","Fragments":["```if```","loop","scope.","loop."]},{"Key":"outer ```if```","Fragments":["compound,"]},{"Key":"```if``` compound,","Fragments":["```if("]},{"Key":"compound, ```if(","Fragments":["\u003cletters"]},{"Key":"```if( \u003cletters","Fragments":["match\u003e"]},{"Key":"\u003cletters match\u003e","Fragments":["and"]},{"Key":"match\u003e and","Fragments":["\u003cnot"]},{"Key":"and \u003cnot","Fragments":["the"]},{"Key":"\u003cnot the","Fragments":["same"]},{"Key":" Congratulations,","Fragments":["this"]},{"Key":"Congratulations, this","Fragments":["not"]},{"Key":"this not","Fragments":["an","only","difficult."]},{"Key":"not an","Fragments":["easy","anagram","issue,","infinite","apparent","equilateral","upper.","anagram","int.","expert","expert","expert,"]},{"Key":"an easy","Fragments":["problem,"]},{"Key":"easy problem,","Fragments":["but"]},{"Key":"but this","Fragments":["solution","is","is","is","could","is","is","version","version","works","is","seemed","version","way","is","became","is","is","is"]},{"Key":"this solution","Fragments":["is","please","is","might","is","would","is","will","and","is","couldn't","and","is"]},{"Key":"very difficult","Fragments":["to"]},{"Key":"follow, ```to_lower_case```","Fragments":["is"]},{"Key":"```to_lower_case``` is","Fragments":["quite"]},{"Key":"quite nice","Fragments":["though."]},{"Key":"Why so","Fragments":["much"]},{"Key":"much code","Fragments":["duplication","that"]},{"Key":"code duplication","Fragments":["in"]},{"Key":"duplication in","Fragments":["```remove_doubles```","checking"]},{"Key":"in ```remove_doubles```","Fragments":["and"]},{"Key":"```remove_doubles``` and","Fragments":["```clean_beginning_end```?"]},{"Key":" To","Fragments":["increment","help","check","nitpick","make","better","make","do","be","your","speed","explain","prevent","avoid","simplify","keep","make","prevent","prevent","me","summarize:"]},{"Key":"To increment","Fragments":["a"]},{"Key":"increment a","Fragments":["```std::map\u003cstd:string,","nucleotide"]},{"Key":"a ```std::map\u003cstd:string,","Fragments":["int\u003e```"]},{"Key":"```std::map\u003cstd:string, int\u003e```","Fragments":["counter"]},{"Key":"int\u003e``` counter","Fragments":["try"]},{"Key":"counter try","Fragments":["using"]},{"Key":"try using","Fragments":["```map[key]++```.","a","`std::count_if`","namespace","[`#pragma","some","a"]},{"Key":"using ```map[key]++```.","Fragments":["This"]},{"Key":"```map[key]++```. This","Fragments":["should"]},{"Key":"This should","Fragments":["work","be","also","reduce"]},{"Key":"should work","Fragments":["even","and","on","for"]},{"Key":"work even","Fragments":["if","if"]},{"Key":"if ```key```","Fragments":["hasn't"]},{"Key":"```key``` hasn't","Fragments":["been"]},{"Key":"hasn't been","Fragments":["initialized","already","used."]},{"Key":"been initialized","Fragments":["in"]},{"Key":"initialized in","Fragments":["```maps```"]},{"Key":"in ```maps```","Fragments":["yet."]},{"Key":"to split","Fragments":["the","the","words.","up","the"]},{"Key":"split the","Fragments":["input","condition","project"]},{"Key":"input into","Fragments":["a","`str`","a"]},{"Key":"a words","Fragments":["vector"]},{"Key":"words vector","Fragments":["["]},{"Key":"vector [","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://stackoverflow.com/questions/236129/split-a-string-in-c\u003eSplit","Fragments":["strings"]},{"Key":"href=http://stackoverflow.com/questions/236129/split-a-string-in-c\u003eSplit strings","Fragments":["in"]},{"Key":"strings in","Fragments":["C++\u003c/a\u003e","start","hey().","*list*","a","this","bob::hey?"]},{"Key":"in C++\u003c/a\u003e","Fragments":["],"]},{"Key":"C++\u003c/a\u003e ],","Fragments":["iterate"]},{"Key":"], iterate","Fragments":["over"]},{"Key":"the word","Fragments":["vector,","exists.","will","when","it","at","will","scores.","into","is","is","is","is","into","isn't","is","extraction","with","string","string","is","count","being","count","rule"]},{"Key":"word vector,","Fragments":["clean"]},{"Key":"vector, clean","Fragments":["and"]},{"Key":"clean and","Fragments":["lower","self","`hey`","very","separated","it's","consistent.","consistent.","consistent.","simple"]},{"Key":"and lower","Fragments":["each","worst-case","cases"]},{"Key":"lower each","Fragments":["word,"]},{"Key":"each word,","Fragments":["then"]},{"Key":"word, then","Fragments":["increment","remove"]},{"Key":"then increment","Fragments":["the"]},{"Key":"increment the","Fragments":["map.","value","index","result[word]"]},{"Key":"I went","Fragments":["with","ahead","the","mainly","for","back","with","the","for","with","to","for","the","ahead","with","ahead","ahead","through","with"]},{"Key":"went with","Fragments":["a","if/else","the","regexes","what","[]"]},{"Key":"a `struct`","Fragments":["instead"]},{"Key":"`struct` instead","Fragments":["of"]},{"Key":"a `class`","Fragments":["but","or"]},{"Key":"`class` but","Fragments":["both"]},{"Key":"but both","Fragments":["would","solutions"]},{"Key":"both would","Fragments":["have","be","be"]},{"Key":"Very nice.","Fragments":["Small","I","I"]},{"Key":"nice. Small","Fragments":["nit"]},{"Key":"Small nit","Fragments":["```mage```"]},{"Key":"nit ```mage```","Fragments":["looks"]},{"Key":"```mage``` looks","Fragments":["like"]},{"Key":"a wizard,","Fragments":["```mAge```"]},{"Key":"wizard, ```mAge```","Fragments":["or"]},{"Key":"```mAge``` or","Fragments":["```m_age```"]},{"Key":"or ```m_age```","Fragments":["would"]},{"Key":"```m_age``` would","Fragments":["be"]},{"Key":" \u003ca","Fragments":["href=https://www.google.com/search?q=mage\u0026source=lnms\u0026tbm=isch\u0026sa=X\u0026ei=0asFVaGTC87yoATfpID4Bw\u0026ved=0CAcQ_AUoAQ\u0026biw=1285\u0026bih=794#imgdii=_\u003e\u003cimg","href=http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice\u003eQuick"]},{"Key":"\u003ca href=https://www.google.com/search?q=mage\u0026source=lnms\u0026tbm=isch\u0026sa=X\u0026ei=0asFVaGTC87yoATfpID4Bw\u0026ved=0CAcQ_AUoAQ\u0026biw=1285\u0026bih=794#imgdii=_\u003e\u003cimg","Fragments":["src=http://img4.wikia.nocookie.net/__cb20050321020036/finalfantasy/images/e/eb/Blackmage-ff1-art.png\u003e\u003c/a\u003e"]},{"Key":" Looks","Fragments":["great","great,","like","good","great;","good!","like","good","good.","like","great.","like","like","nice.","almost","pretty","great,","good.","good","weird","great!","very","good.","good.","pretty","good.","good!","good:","good","good.","good,","really","good","Great!"]},{"Key":"Looks great","Fragments":["as"]},{"Key":"great as","Fragments":["it"]},{"Key":"as it","Fragments":["is,","exposes","belonged","uses","does","gets.","takes","does","stands,","could","may","could","is","will","was","may","is","masks","may","may","grows","seems","probably","should","will","wouldn't","wouldn't","is","should","currently","could","returns","only","probably","removed","is","is","would","then","grows.","seems","relies","can","can","is","cannot","cannot"]},{"Key":"it is,","Fragments":["the","in"]},{"Key":"is, the","Fragments":["following","default)"]},{"Key":"the following","Fragments":["are","line","way,","laws:","code","error:","parts:","way:","way:"]},{"Key":"following are","Fragments":["offered"]},{"Key":"are offered","Fragments":["as"]},{"Key":"offered as","Fragments":["alternatives."]},{"Key":"Another way","Fragments":["to","is,"]},{"Key":"write the","Fragments":["iterators","loop","\"?","function."]},{"Key":"the iterators","Fragments":["in","in","begin()"]},{"Key":"iterators in","Fragments":["C++11","```convertToRoman()```"]},{"Key":"C++11 is","Fragments":["```for(auto","also"]},{"Key":"is ```for(auto","Fragments":["it:"]},{"Key":"```for(auto it:","Fragments":["list)```"]},{"Key":"it: list)```","Fragments":["["]},{"Key":"list)``` [","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://www.cprogramming.com/c++11/c++11-ranged-for-loop.html\u003eC++11","Fragments":["ranged"]},{"Key":"href=http://www.cprogramming.com/c++11/c++11-ranged-for-loop.html\u003eC++11 ranged","Fragments":["for"]},{"Key":"ranged for","Fragments":["loops\u003c/a\u003e","loop.","will","loop"]},{"Key":"for loops\u003c/a\u003e","Fragments":["]"]},{"Key":"use square","Fragments":["brackets"]},{"Key":"square brackets","Fragments":["for","will"]},{"Key":"brackets for","Fragments":["map"]},{"Key":"for map","Fragments":["access?"]},{"Key":"map access?","Fragments":["```output[tolower(*ch_interator)]"]},{"Key":"access? ```output[tolower(*ch_interator)]","Fragments":["="]},{"Key":"```output[tolower(*ch_interator)] =","Fragments":["it-\u003efirst```"]},{"Key":"is an","Fragments":["amazingly","implementation","idea","inefficient","object,","object","unnecessary","educational","artefact","oversight","easier-to-read","incredibly","end","unfortunate,","algorithm","integral","improvement.","attribute","unnecessary","efficient","alternative,","inmutable","anonymous","efficiency","objective.","open","idea","alpha","empty","anagram;","anagram","anagram;","anagram","overkill;","ovelroad","int","answer","error","undefined","indirect","enum","overkill","overkill","anagram;","anagram","address).","iterator","anagram;","anagram","anagram.","interesting","issue","efficient,","alphabetic","interesting","important"]},{"Key":"an amazingly","Fragments":["clean"]},{"Key":"amazingly clean","Fragments":["implementation."]},{"Key":"clean implementation.","Fragments":["```randomLetter```"]},{"Key":"implementation. ```randomLetter```","Fragments":["and"]},{"Key":"```randomLetter``` and","Fragments":["```randomInteger```"]},{"Key":"and ```randomInteger```","Fragments":["are"]},{"Key":"```randomInteger``` are","Fragments":["spectacular."]},{"Key":"are spectacular.","Fragments":["And"]},{"Key":"spectacular. And","Fragments":["their"]},{"Key":"And their","Fragments":["use"]},{"Key":"their use","Fragments":["in"]},{"Key":"use in","Fragments":["```generateName```","line"]},{"Key":"in ```generateName```","Fragments":["is"]},{"Key":"```generateName``` is","Fragments":["perfect."]},{"Key":"How to","Fragments":["do","submit"]},{"Key":"you know","Fragments":["two","how","that","someone","that","this","I","the","what","that","its","it","of?","already","exactly","all","that","why","about","you","you","-","that","an","that","the"]},{"Key":"know two","Fragments":["robots"]},{"Key":"two robots","Fragments":["don't","don't"]},{"Key":"robots don't","Fragments":["have","get"]},{"Key":"same name?","Fragments":["Usually"]},{"Key":"name? Usually","Fragments":["there's"]},{"Key":"Usually there's","Fragments":["class"]},{"Key":"there's class","Fragments":["variable"]},{"Key":"variable that","Fragments":["keeps","you","is","I","I"]},{"Key":"that keeps","Fragments":["track","getting"]},{"Key":"keeps track","Fragments":["of"]},{"Key":"track of","Fragments":["all","when","what","frequencies","the","both","the"]},{"Key":"all names","Fragments":["in","in"]},{"Key":"names in","Fragments":["use","non","scope,","all","the"]},{"Key":"in use","Fragments":["to","here."]},{"Key":"use to","Fragments":["ensure","benchmark?","add","make","make"]},{"Key":"to ensure","Fragments":["two","generated","i","you","it","`what`","`input.back()`","that","names","the"]},{"Key":"ensure two","Fragments":["robots"]},{"Key":" It's","Fragments":["strange","probably","going","worth","a","also","not","better","unfortunate","not","standard","theoretically","true","two","a","baaaaack...","nice","generally","worth","actually","always","not","just","really","really","cool","too","just","not","about"]},{"Key":"It's strange","Fragments":["to"]},{"Key":"strange to","Fragments":["have","make","me.","have","me"]},{"Key":"to have","Fragments":["the","a","only","a","all","to","both.","all","the","the","the","had","no","a","to","to","a","`zipString`","the","a","the","all","come","begin","the","them","all","always","machine","word_hash,","different","a","to","seen","those.","a","it","split","them","a","a","a","a","the","{0,","it","a","it","the","done","these","to","explicit","it"]},{"Key":"the member","Fragments":["variable","variable","variable","variables","function","string.","functions","values","variable","function","```counted```.","variables"]},{"Key":"variable indirectly","Fragments":["initialized."]},{"Key":"indirectly initialized.","Fragments":["Any"]},{"Key":"initialized. Any","Fragments":["reason"]},{"Key":"Any reason","Fragments":["for","why","why","you're"]},{"Key":"reason for","Fragments":["not","the","including","the","aliasing","that?","the","it?"]},{"Key":"for not","Fragments":["having","doing","RTFM","having","noticing"]},{"Key":"not having","Fragments":["```generateName```","them","thought","static","static"]},{"Key":"having ```generateName```","Fragments":["return"]},{"Key":"```generateName``` return","Fragments":["and"]},{"Key":"return and","Fragments":["doing","arguments"]},{"Key":"doing ```robot_name","Fragments":["="]},{"Key":"```robot_name =","Fragments":["generateName();```?"]},{"Key":" ha","Fragments":["ha"]},{"Key":"ha ha","Fragments":["!"]},{"Key":"ha !","Fragments":["I"]},{"Key":"! I","Fragments":["didn't"]},{"Key":"word exists.","Fragments":["Nice"]},{"Key":"exists. Nice","Fragments":["pic"]},{"Key":"Nice pic","Fragments":["!"]},{"Key":"the iterator","Fragments":["tip.","returned","while","is","errors","to","manually","points","work","contortions","version."]},{"Key":"I wasn't","Fragments":["sure","sure","aware","thinking","breaking","aware","able","able","aware","aware","trying","sure","even","sure","sure","aware","familiar","able","sure","aware"]},{"Key":"wasn't sure","Fragments":["if","about","about","maybe","about","where","about"]},{"Key":"this `output[tolower(*ch_interator)]`","Fragments":["without"]},{"Key":"`output[tolower(*ch_interator)]` without","Fragments":["the"]},{"Key":"character being","Fragments":["in"]},{"Key":"being in","Fragments":["the","a","its"]},{"Key":"the output","Fragments":["map.","without","multiple","is"]},{"Key":"probably should","Fragments":["have","in","be","be","have","not)","have","remove"]},{"Key":"should have","Fragments":["created","done","realized","been","commented","a","been","looked","used","been","dug","array","been","`==","your","coded","used","mentioned","done","used","failed.","been.","considered","probably","prefaced"]},{"Key":"have created","Fragments":["a","a"]},{"Key":"created a","Fragments":["vector","non-recursive","constant"]},{"Key":"of string","Fragments":["to","lenght","is","might","with","copying.","comparisons.","(which","for","size)","(with","to","copying","manipulation","constants","constants","objects","passed"]},{"Key":"string to","Fragments":["ensure","be","the","anagram.","a","lower","char_map","char[].","class","all","avoid","start","reserve","be","simply","lower","actually","lower","determine","`removeSpaces`,","it's","see","return."]},{"Key":"ensure generated","Fragments":["name"]},{"Key":"generated name","Fragments":["is"]},{"Key":"I initially","Fragments":["did","did","reached","thought","thought","thought"]},{"Key":"initially did","Fragments":["the","all"]},{"Key":"did the","Fragments":["same","`char()`","upload,","ruby","fastest","'no-need'","namespace","bare","extra"]},{"Key":"same i.e.","Fragments":["`robot_name"]},{"Key":"i.e. `robot_name","Fragments":["="]},{"Key":"`robot_name =","Fragments":["generateName();`"]},{"Key":"= generateName();`","Fragments":[":)"]},{"Key":"for some","Fragments":["reason","reason","technical","other","reason","reason","reason","reason.","of","later","of","nits","reason,","standards","reason","of"]},{"Key":"some reason","Fragments":["I","I","I","I","haha,","I","I","I"]},{"Key":"reason I","Fragments":["went","ended","didn't...","even","did","like","am","did","use","started","decided","was","can't","have","used","thought"]},{"Key":"went ahead","Fragments":["with","and","and","and"]},{"Key":"ahead with","Fragments":["indirect"]},{"Key":"with indirect","Fragments":["initialization."]},{"Key":"It should","Fragments":["work,","be","not"]},{"Key":"should work,","Fragments":["also"]},{"Key":"work, also","Fragments":["works"]},{"Key":"also works","Fragments":["to"]},{"Key":"works to","Fragments":["increment"]},{"Key":"to increment","Fragments":["```dict[key]++```.","the","```fact```","the"]},{"Key":"increment ```dict[key]++```.","Fragments":["From"]},{"Key":"```dict[key]++```. From","Fragments":["["]},{"Key":"From [","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://stackoverflow.com/questions/5087091/what-does-the-stl-mapkey-return-if-the-key-wasnt-a-initialized-key-in-the-map\u003e","Fragments":["Stack"]},{"Key":"href=http://stackoverflow.com/questions/5087091/what-does-the-stl-mapkey-return-if-the-key-wasnt-a-initialized-key-in-the-map\u003e Stack","Fragments":["Overflow\u003c/a\u003e"]},{"Key":"Stack Overflow\u003c/a\u003e","Fragments":["]"]},{"Key":" \u003cblockquote","Fragments":["cite=http://www.sgi.com/tech/stl/Map.html\u003eIf","style=\"font-size:14px\"","style=\"font-size:14px\""]},{"Key":"\u003cblockquote cite=http://www.sgi.com/tech/stl/Map.html\u003eIf","Fragments":["the"]},{"Key":"cite=http://www.sgi.com/tech/stl/Map.html\u003eIf the","Fragments":["map"]},{"Key":"map does","Fragments":["not"]},{"Key":"not already","Fragments":["contain","there","have"]},{"Key":"already contain","Fragments":["such"]},{"Key":"contain such","Fragments":["an"]},{"Key":"such an","Fragments":["object,","obvious"]},{"Key":"an object,","Fragments":["operator[]","why"]},{"Key":"object, operator[]","Fragments":["inserts"]},{"Key":"operator[] inserts","Fragments":["the"]},{"Key":"inserts the","Fragments":["default"]},{"Key":"default object","Fragments":["data_type().\u003c/blockquote\u003e"]},{"Key":"Very nice","Fragments":["job."]},{"Key":"nice job.","Fragments":["The"]},{"Key":"job. The","Fragments":["mathematical","equilateral"]},{"Key":"The mathematical","Fragments":["optimizations"]},{"Key":"mathematical optimizations","Fragments":["are"]},{"Key":"optimizations are","Fragments":["well"]},{"Key":"are well","Fragments":["implemented,"]},{"Key":"well implemented,","Fragments":["and"]},{"Key":"implemented, and","Fragments":["the"]},{"Key":"the syntax","Fragments":["is","will","on"]},{"Key":"syntax is","Fragments":["clear.","quite","that","cool"]},{"Key":"the empty","Fragments":["```for```","string,","string.","string.","string","string","set","else","string"]},{"Key":"empty ```for```","Fragments":["loop"]},{"Key":"```for``` loop","Fragments":["in"]},{"Key":"loop in","Fragments":["```nth```?","`yelled_at`.","isPrime","square_of_sums","there","slice","`update_primes_until`…","the","```clock::minus```.","matches","the","matches","sing?","`shouting()`.","your","C++","slice,","lines","Python,","`verse`","the","c++11.","to_rna()"]},{"Key":"in ```nth```?","Fragments":["It"]},{"Key":"```nth```? It","Fragments":["seems"]},{"Key":"It seems","Fragments":["better","like","like","like","like","that","people","pointless","to","to","like","that","like","more","odd","the","pretty","like","a","like","strange","to","as"]},{"Key":"seems better","Fragments":["to"]},{"Key":"to initialize","Fragments":["```n```","it","primitives,","std::string","primitives,","bobsAnswer","all"]},{"Key":"initialize ```n```","Fragments":["outside"]},{"Key":"```n``` outside","Fragments":["the"]},{"Key":"the ```while```","Fragments":["loop,"]},{"Key":"```while``` loop,","Fragments":["append"]},{"Key":"loop, append","Fragments":["```if"]},{"Key":"append ```if","Fragments":["is_prime(n)```,"]},{"Key":"```if is_prime(n)```,","Fragments":["and"]},{"Key":"is_prime(n)```, and","Fragments":["increment"]},{"Key":"and increment","Fragments":["by","a"]},{"Key":"increment by","Fragments":["2."]},{"Key":"Thanks, it","Fragments":["was","works"]},{"Key":"was hard","Fragments":["for"]},{"Key":"hard for","Fragments":["me"]},{"Key":"for me","Fragments":["to","the","either.","(or","the","to","to","this","at","to","to","to","is","the","it","to","to"]},{"Key":"problem differently","Fragments":["until"]},{"Key":"differently until","Fragments":["I"]},{"Key":"until I","Fragments":["was","hit","realized","prove","send","saw","used","wrote","ran","got","had"]},{"Key":"was inspired","Fragments":["by"]},{"Key":"inspired by","Fragments":["your"]},{"Key":"by your","Fragments":["solution.","last","`hey`","initialisation","function"]},{"Key":"solution. My","Fragments":["solution"]},{"Key":"My solution","Fragments":["is","is"]},{"Key":"not like","Fragments":["yours","to","this","the"]},{"Key":"like yours","Fragments":["though."]},{"Key":"yours though.","Fragments":["I'm"]},{"Key":"though. I'm","Fragments":["glad"]},{"Key":"I'm glad","Fragments":["that","to","you","it","you","you"]},{"Key":"glad that","Fragments":["there"]},{"Key":"that there","Fragments":["is","are","are","is","was","were","is","is","is","is","are","would","are","is"]},{"Key":"no longer","Fragments":["an","copy","needed.","pass","have","makes","have","return","going","officially","a","redefined","a","need","passes","retarded"]},{"Key":"longer an","Fragments":["empty"]},{"Key":"empty for","Fragments":["loop"]},{"Key":"loop nested","Fragments":["in"]},{"Key":"nested in","Fragments":["a"]},{"Key":"believe I","Fragments":["missed","can","forgot","can"]},{"Key":"I missed","Fragments":["the","it","that.","any","any","removing","the"]},{"Key":"missed the","Fragments":["possibility","ampersand.","header","point"]},{"Key":"a ```for```","Fragments":["loop!"]},{"Key":"Looks great,","Fragments":["keep","very"]},{"Key":"great, keep","Fragments":["it"]},{"Key":"didn't intend","Fragments":["to"]},{"Key":"intend to","Fragments":["submit","extend","modify"]},{"Key":"submit the","Fragments":["bob.h","h",".h","header","\"word_count.h\""]},{"Key":"the bob.h","Fragments":["file","file?"]},{"Key":"Good code!","Fragments":["For"]},{"Key":"code! For","Fragments":["performance"]},{"Key":"For performance","Fragments":["reasons,"]},{"Key":"performance reasons,","Fragments":["you","you"]},{"Key":"reasons, you","Fragments":["can","should"]},{"Key":"can cache","Fragments":["`trimmed.length()`"]},{"Key":"cache `trimmed.length()`","Fragments":["and"]},{"Key":"`trimmed.length()` and","Fragments":["`humanRambling.length()`;"]},{"Key":"and `humanRambling.length()`;","Fragments":["as"]},{"Key":"`humanRambling.length()`; as","Fragments":["well,"]},{"Key":"as well,","Fragments":["why","since","so","but","bob","so","and"]},{"Key":"well, why","Fragments":["do"]},{"Key":"why do","Fragments":["you","we","you","you","you","we","you"]},{"Key":"you `strcpy`","Fragments":["the"]},{"Key":"`strcpy` the","Fragments":["`std::string`"]},{"Key":"the `std::string`","Fragments":["into","class"]},{"Key":"`std::string` into","Fragments":["a"]},{"Key":"a `char[]`?","Fragments":["I"]},{"Key":"`char[]`? I","Fragments":["bet"]},{"Key":"I bet","Fragments":["the","you"]},{"Key":"bet the","Fragments":["copying"]},{"Key":"the copying","Fragments":["takes","nitpicks."]},{"Key":"copying takes","Fragments":["longer"]},{"Key":"takes longer","Fragments":["than"]},{"Key":"longer than","Fragments":["the","`++i`,","15","3-4"]},{"Key":"the overhead","Fragments":["of","seems","of","introduced","of"]},{"Key":"overhead of","Fragments":["just","`back_inserter`","thinking"]},{"Key":"of just","Fragments":["using","having","testing","a","setting","names.","changing","coding","checking","saying","printing"]},{"Key":"just using","Fragments":["`c=humanRambling[i]`","constants)","std!","`std::*`.","things",".back()","a"]},{"Key":"using `c=humanRambling[i]`","Fragments":["instead"]},{"Key":"`c=humanRambling[i]` instead","Fragments":["of"]},{"Key":"of `c=input[i]`.","Fragments":["In"]},{"Key":"`c=input[i]`. In","Fragments":["fact,"]},{"Key":"fact, the","Fragments":["optimiser","site"]},{"Key":"the optimiser","Fragments":["might"]},{"Key":"optimiser might","Fragments":["even"]},{"Key":"might even","Fragments":["optimise","be","argue","think"]},{"Key":"even optimise","Fragments":["the"]},{"Key":"optimise the","Fragments":["whole"]},{"Key":"whole function","Fragments":["call"]},{"Key":"function call","Fragments":["away","instead","operator,"]},{"Key":"call away","Fragments":["and"]},{"Key":"away and","Fragments":["let","it","the"]},{"Key":"and let","Fragments":["there","you","me","the"]},{"Key":"let there","Fragments":["be"]},{"Key":"be no","Fragments":["overhead","carriage.","negative"]},{"Key":"no overhead","Fragments":["at"]},{"Key":"overhead at","Fragments":["all,"]},{"Key":"at all,","Fragments":["given","since","but","it's","since","one","so","but","it's","so"]},{"Key":"all, given","Fragments":["that"]},{"Key":"given that","Fragments":["`str::string::operator[]`","C++","it","that","smaller","empty","you're","if","you","one"]},{"Key":"that `str::string::operator[]`","Fragments":["doesn't"]},{"Key":"`str::string::operator[]` doesn't","Fragments":["do"]},{"Key":"doesn't do","Fragments":["bounds","anything.","what","rounding","what","it"]},{"Key":"do bounds","Fragments":["checking,"]},{"Key":"bounds checking,","Fragments":["unlike"]},{"Key":"checking, unlike","Fragments":["`std::string::at(int)`."]},{"Key":"Also, since","Fragments":["C++11","you're"]},{"Key":"since C++11","Fragments":["you"]},{"Key":"C++11 you","Fragments":["can","can","can"]},{"Key":"use `for","Fragments":["(char","(auto","(auto"]},{"Key":"`for (char","Fragments":["c","c"]},{"Key":"(char c","Fragments":[":",":",":",":",":"]},{"Key":"c :","Fragments":["humanRambling)","str)`","answer)","str)","said2","str","number)`","tern_nmbr)","str)","file","sentence","s","msg)","*msg)`.","input)`","message","prompt)`","question)`","phrase)","str)`","text)","mSubject)"]},{"Key":": humanRambling)","Fragments":["{`"]},{"Key":"humanRambling) {`","Fragments":["and"]},{"Key":"{` and","Fragments":["1."]},{"Key":"and 1.","Fragments":["make"]},{"Key":"1. make","Fragments":["the"]},{"Key":"code more","Fragments":["readable","than","readable","maintainable:","readable.","obvious","complex","readable","readable","organised.","concise.","readable.","readable","complex","readable.","readable","readable","expressive).","expressive.","expressive.","expressive.","expressive.","generic","readable.","readable.","clear.","readable"]},{"Key":"readable (in","Fragments":["my"]},{"Key":"(in my","Fragments":["opinion)","mind)"]},{"Key":"my opinion)","Fragments":["and"]},{"Key":"opinion) and","Fragments":["2."]},{"Key":"and 2.","Fragments":["let"]},{"Key":"2. let","Fragments":["C++"]},{"Key":"let C++","Fragments":["decide"]},{"Key":"C++ decide","Fragments":["for"]},{"Key":"decide for","Fragments":["itself"]},{"Key":"for itself","Fragments":["what"]},{"Key":"itself what","Fragments":["iterating"]},{"Key":"what iterating","Fragments":["method"]},{"Key":"iterating method","Fragments":["is"]},{"Key":"method is","Fragments":["fastest.","an"]},{"Key":"Nice job.","Fragments":["The"]},{"Key":"The equilateral","Fragments":["case"]},{"Key":"equilateral case","Fragments":["is"]},{"Key":"case is","Fragments":["concise,","much","a","a","a","defined","the","now"]},{"Key":"is concise,","Fragments":["```scalene```"]},{"Key":"concise, ```scalene```","Fragments":["is"]},{"Key":"```scalene``` is","Fragments":["the"]},{"Key":"logical default,","Fragments":["and"]},{"Key":"default, and","Fragments":["test"]},{"Key":"and test","Fragments":["are","your","against","cases","if","suite."]},{"Key":"are nicely","Fragments":["laid"]},{"Key":"nicely laid","Fragments":["out."]},{"Key":"href=http://www.learncpp.com/cpp-tutorial/45-enumerated-types/\u003eenumerated types\u003c/a\u003e,","Fragments":["it's"]},{"Key":"types\u003c/a\u003e, it's","Fragments":["a"]},{"Key":"a shame","Fragments":["not"]},{"Key":"shame not","Fragments":["to"]},{"Key":"not to","Fragments":["use","export","follow","use","complex.","use","rely","use","guarantee","modify","modify","couple","use","be","move","nest","be","call","split","use","use","replace","do"]},{"Key":"the domain","Fragments":["error","and","of","of","of","of"]},{"Key":"domain error","Fragments":["test"]},{"Key":"error test","Fragments":["is"]},{"Key":"test is","Fragments":["```triangles_with_no_size_are_illegal```","slow","calling"]},{"Key":"is ```triangles_with_no_size_are_illegal```","Fragments":["actually"]},{"Key":"```triangles_with_no_size_are_illegal``` actually","Fragments":["testing"]},{"Key":"actually testing","Fragments":["for","against"]},{"Key":"testing for","Fragments":["zero","divisibility","floating","\"yelling\"","outputs","the","either","the"]},{"Key":"for zero","Fragments":["size","or","and"]},{"Key":"zero size","Fragments":["seems"]},{"Key":"size seems","Fragments":["more"]},{"Key":"Good start,","Fragments":["use"]},{"Key":"start, use","Fragments":["of"]},{"Key":"of ```std::pow```","Fragments":["helps."]},{"Key":"Could ```ONE_BILLION_SECONDS_IN_DAYS```","Fragments":["be"]},{"Key":"```ONE_BILLION_SECONDS_IN_DAYS``` be","Fragments":["done"]},{"Key":"with ```#define```","Fragments":["without"]},{"Key":"```#define``` without","Fragments":["directly"]},{"Key":"without directly","Fragments":["converting"]},{"Key":"directly converting","Fragments":["it"]},{"Key":"converting it","Fragments":["to"]},{"Key":"a number?","Fragments":["["]},{"Key":"number? [","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://www.cplusplus.com/doc/tutorial/preprocessor/\u003epreprocessor\u003c/a\u003e","Fragments":["]"]},{"Key":"at \u003ca","Fragments":["href=http://help.exercism.io/getting-started-with-cpp.html\u003eGetting"]},{"Key":"\u003ca href=http://help.exercism.io/getting-started-with-cpp.html\u003eGetting","Fragments":["started"]},{"Key":"href=http://help.exercism.io/getting-started-with-cpp.html\u003eGetting started","Fragments":["with"]},{"Key":"started with","Fragments":["C++\u003c/a\u003e","a","C++](http://help.exercism.io/getting-started-with-cpp.html)"]},{"Key":"with C++\u003c/a\u003e","Fragments":["for"]},{"Key":"C++\u003c/a\u003e for","Fragments":["how"]},{"Key":"for how","Fragments":["to","you"]},{"Key":"to run","Fragments":["the","overnight.","I","all","a","the","cmake","as","the","the","down"]},{"Key":"run the","Fragments":["\u003ca","string","test","tests,","tests"]},{"Key":"the \u003ca","Fragments":["href=http://exercism.io/exercises/cpp/word-count\u003eexisting"]},{"Key":"\u003ca href=http://exercism.io/exercises/cpp/word-count\u003eexisting","Fragments":["tests\u003c/a\u003e."]},{"Key":" Process","Fragments":["boils"]},{"Key":"Process boils","Fragments":["down"]},{"Key":"boils down","Fragments":["to","to).","to","to"]},{"Key":"down to","Fragments":["installing","int,","int,","less.","not","exactly","just","a","line","a","asking:","a","referencing","the"]},{"Key":"to installing","Fragments":["boost"]},{"Key":"installing boost","Fragments":["using"]},{"Key":"boost using","Fragments":["\u003ca"]},{"Key":"\u003cblockquote style=\"font-size:14px\"","Fragments":["\u003eMacOS","\u003eMacOS"]},{"Key":"style=\"font-size:14px\" \u003eMacOS","Fragments":["users","with"]},{"Key":"\u003eMacOS users","Fragments":["can"]},{"Key":"users can","Fragments":["install"]},{"Key":"can install","Fragments":["boost"]},{"Key":"install boost","Fragments":["with","here,"]},{"Key":"boost with","Fragments":["Homebrew","Homebrew)"]},{"Key":"with Homebrew","Fragments":["via"]},{"Key":"Homebrew via","Fragments":["```brew"]},{"Key":"via ```brew","Fragments":["install"]},{"Key":"```brew install","Fragments":["boost```.\u003c/blockquote\u003e"]},{"Key":" Then","Fragments":["installing","I'd","I","I","you","there","you"]},{"Key":"Then installing","Fragments":["and"]},{"Key":"installing and","Fragments":["using"]},{"Key":"and using","Fragments":["\u003ca","trim","that","the","SFINAE","them","a","binary","it","a","the"]},{"Key":"\u003eMacOS with","Fragments":["Xcode"]},{"Key":"The generator","Fragments":["name"]},{"Key":"generator name","Fragments":["for"]},{"Key":"name for","Fragments":["CMake","the","the","way","a","this","this","the","the","what"]},{"Key":"for CMake","Fragments":["is"]},{"Key":"CMake is","Fragments":["Xcode."]},{"Key":"is Xcode.","Fragments":["Assuming"]},{"Key":"Xcode. Assuming","Fragments":["the"]},{"Key":"Assuming the","Fragments":["current"]},{"Key":"current exercise","Fragments":["is"]},{"Key":"exercise is","Fragments":["bob","dealing","dumb,","just"]},{"Key":"is bob","Fragments":["and"]},{"Key":"bob and","Fragments":["we're","function","function","questions"]},{"Key":"and we're","Fragments":["in"]},{"Key":"we're in","Fragments":["the"]},{"Key":" $","Fragments":["cp","cp","mkdir","cd","cmake","ruby","brew","g++","cat","g++","ln","./test","cat","make","./capacity"]},{"Key":"$ cp","Fragments":["/dev/null","/dev/null"]},{"Key":"cp /dev/null","Fragments":["bob.h","bob.cpp"]},{"Key":"$ mkdir","Fragments":["build"]},{"Key":"$ cd","Fragments":["build"]},{"Key":"$ cmake","Fragments":["-G"]},{"Key":"cmake -G","Fragments":["Xcode"]},{"Key":"-G Xcode","Fragments":[".."]},{"Key":"This example","Fragments":["shows"]},{"Key":"example shows","Fragments":["creating"]},{"Key":"shows creating","Fragments":["empty"]},{"Key":"creating empty","Fragments":["files"]},{"Key":"empty files","Fragments":["for"]},{"Key":"files for","Fragments":["the","a","these"]},{"Key":"implementation before","Fragments":["running"]},{"Key":"before running","Fragments":["CMake.\u003c/blockquote\u003e"]},{"Key":"in `checkForSilence()`,","Fragments":["you"]},{"Key":"`checkForSilence()`, you","Fragments":["don't"]},{"Key":"the `message.length()==0`","Fragments":["conditional"]},{"Key":"`message.length()==0` conditional","Fragments":["because"]},{"Key":"conditional because","Fragments":["if"]},{"Key":"because if","Fragments":["that's","someone","it's","```n```","string"]},{"Key":"if that's","Fragments":["so,","the","mathematically","what","false,","true,"]},{"Key":"that's so,","Fragments":["the"]},{"Key":"so, the","Fragments":["rest"]},{"Key":"the rest","Fragments":["of","not","easier.","easier.","of","of","of","of","of","of","of"]},{"Key":"rest of","Fragments":["the","the","the","the","the","the","the","the","the","the","the","the"]},{"Key":"function will","Fragments":["just","be","be","return","be"]},{"Key":"will just","Fragments":["behave"]},{"Key":"just behave","Fragments":["correctly,"]},{"Key":"behave correctly,","Fragments":["returning"]},{"Key":"correctly, returning","Fragments":["`true`."]},{"Key":"Your `checkForYelling()`","Fragments":["function"]},{"Key":"`checkForYelling()` function","Fragments":["is,"]},{"Key":"function is,","Fragments":["I"]},{"Key":"is, I","Fragments":["think,","think,","believe,","think,","assume,"]},{"Key":"I think,","Fragments":["not","cleaner,","optimizing","the","that","that's","more"]},{"Key":"think, not","Fragments":["as"]},{"Key":"not as","Fragments":["the","obvious","straightforward","good.","part","\"C++-esque\"","painful","a","efficient"]},{"Key":"the question","Fragments":["was.",":(","\"Is","has","response","mark.","mark","first","test","test","twice","mark","in","mark."]},{"Key":"question was.","Fragments":["The"]},{"Key":"was. The","Fragments":["intention"]},{"Key":"The intention","Fragments":["was"]},{"Key":"intention was","Fragments":["for"]},{"Key":"was for","Fragments":["a","nil,","comparison","the","fun.","..."]},{"Key":"a string","Fragments":["to","contains","have","that","is","with","is","and","or","if","consisting","in","constructor,","changes","is","that","that","to","(not","versus","database","can","contains","contains","with","of","inside","equality","and","as","containing","containing","containing","into","to","with","in","starting","object","array,","like","with","into","of","past","or","iterator","is","literal.","containing","as","containing","that","constructor","return","just","like"]},{"Key":"be yelled","Fragments":["if"]},{"Key":"yelled if","Fragments":["it"]},{"Key":"it contained","Fragments":["uppercase"]},{"Key":"contained uppercase","Fragments":["characters"]},{"Key":"uppercase characters","Fragments":["but","separately"]},{"Key":"characters but","Fragments":["no"]},{"Key":"but no","Fragments":["lowercase","one","definitions.","lower-case","lower","tests"]},{"Key":"lowercase characters.","Fragments":["I'n"]},{"Key":"characters. I'n","Fragments":["not"]},{"Key":"I'n not","Fragments":["sure"]},{"Key":"sure what","Fragments":["you're","to","happens","the","the","the","you","an"]},{"Key":"what you're","Fragments":["doing","saying","going","doing","initializing","trying","doing","trying","saying","trying","hoping"]},{"Key":"you're doing","Fragments":["here","a","that","here.","something","and","via","this,","is"]},{"Key":"doing here","Fragments":["and"]},{"Key":"here and","Fragments":["what","ended","now,"]},{"Key":"and what","Fragments":["things","can","are","to","you're","are"]},{"Key":"what things","Fragments":["you're","may"]},{"Key":"things you're","Fragments":["calling","doing"]},{"Key":"you're calling","Fragments":["\"numbers\".","it","a"]},{"Key":"calling \"numbers\".","Fragments":["(In"]},{"Key":"\"numbers\". (In","Fragments":["my"]},{"Key":"(In my","Fragments":["speaking,"]},{"Key":"my speaking,","Fragments":["\"numbers\""]},{"Key":"speaking, \"numbers\"","Fragments":["are"]},{"Key":"\"numbers\" are","Fragments":["0-9.)"]},{"Key":"In `checkForQuestion()`","Fragments":["you"]},{"Key":"`checkForQuestion()` you","Fragments":["don't"]},{"Key":"the calls","Fragments":["to","to"]},{"Key":"calls to","Fragments":["your","count","nucleotide_counts","grade","`is_silent()`,","strcopy","`transform`"]},{"Key":"your other","Fragments":["functions","comments.","one","class"]},{"Key":"other functions","Fragments":["because","should","like","like"]},{"Key":"functions because","Fragments":["you","they're","anonymous"]},{"Key":"you call","Fragments":["those","`anagram::anagram`","```on_earth()```,","at()","the","often","`downcase()`","one","the","string::back()"]},{"Key":"call those","Fragments":["before"]},{"Key":"those before","Fragments":["`checkForQuestion()`"]},{"Key":"before `checkForQuestion()`","Fragments":["in"]},{"Key":"`checkForQuestion()` in","Fragments":["`hey()`"]},{"Key":"in `hey()`","Fragments":["anyway."]},{"Key":"`hey()` anyway.","Fragments":["That"]},{"Key":"anyway. That","Fragments":["saves"]},{"Key":"That saves","Fragments":["quite"]},{"Key":"saves quite","Fragments":["some"]},{"Key":"quite some","Fragments":["cpu","room","in","flaws"]},{"Key":"some cpu","Fragments":["time."]},{"Key":"The rest","Fragments":["looks","0.25s","of","of","of","of"]},{"Key":"rest looks","Fragments":["great,"]},{"Key":"looks great,","Fragments":["making","just"]},{"Key":"great, making","Fragments":["use"]},{"Key":"making use","Fragments":["of"]},{"Key":"of classes,","Fragments":["the"]},{"Key":"classes, the","Fragments":["C++11"]},{"Key":"the C++11","Fragments":["`for(...","function","standard.","function","version)","`for","on","`for`","```std::stoi```","version."]},{"Key":"C++11 `for(...","Fragments":[":"]},{"Key":"`for(... :","Fragments":["...)`-construct."]},{"Key":": ...)`-construct.","Fragments":["I"]},{"Key":"...)`-construct. I","Fragments":["would"]},{"Key":"would say,","Fragments":["though,"]},{"Key":"say, though,","Fragments":["that"]},{"Key":"though, that","Fragments":["it","I","I"]},{"Key":"it could've","Fragments":["been","been"]},{"Key":"could've been","Fragments":["slightly","done"]},{"Key":"been slightly","Fragments":["shorter..."]},{"Key":"really appreciate","Fragments":["your","the","them.","them."]},{"Key":"appreciate your","Fragments":["feedback.","feedback,"]},{"Key":"your feedback.","Fragments":["C++","I","I"]},{"Key":"feedback. C++","Fragments":["is"]},{"Key":"is still","Fragments":["muddy","present","suboptimal","the","somewhat","a","a","32","a","the","used","a","in","a","in","not"]},{"Key":"still muddy","Fragments":["to"]},{"Key":"muddy to","Fragments":["me"]},{"Key":"to me","Fragments":["so","to","due",";)","that","is","since","I","but","and","than","like","if","when","that","that",":)","like","all","(I've","what","but","that","why","that","like","like","this","that","that","that","that","all","for","that","mainly","I","is","in","here.","here."]},{"Key":"me so","Fragments":["any","much,","much"]},{"Key":"so any","Fragments":["feedback","and"]},{"Key":"any feedback","Fragments":["is"]},{"Key":"feedback is","Fragments":["helpful.","greatly","welcome."]},{"Key":" \u003ccode\u003echeckForSilence()\u003c/code\u003e:","Fragments":["Ahh,"]},{"Key":"\u003ccode\u003echeckForSilence()\u003c/code\u003e: Ahh,","Fragments":["you"]},{"Key":"Ahh, you","Fragments":["are"]},{"Key":"are right.","Fragments":["If","Your","I","Just","The"]},{"Key":"right. If","Fragments":["the"]},{"Key":"If the","Fragments":["length","input","array","number","main","argument","punct","requirements","function","iterator","class","string","regex","same","number","original"]},{"Key":"is zero","Fragments":["then","end","then","because"]},{"Key":"zero then","Fragments":["the","the"]},{"Key":"the for","Fragments":["loop","loops","loop.","loop","loop","loop","loop.","loop","loop","loop","loop","loop","loop's","loop,","loop","loop","loop","loop,","loop,","loop,","loop","loop","loop.","loop","loop.","loop"]},{"Key":"loop won't","Fragments":["execute,"]},{"Key":"won't execute,","Fragments":["correct?"]},{"Key":"execute, correct?","Fragments":["I"]},{"Key":"correct? I","Fragments":["think"]},{"Key":"that was","Fragments":["an","exactly","the","dumb.","common).","to","pointed","easy.","foolhardy","released","to","added","not","difficult","to","something","too","given","getting","an","happening","not","silly"]},{"Key":"old Java","Fragments":["habit"]},{"Key":"Java habit","Fragments":["with"]},{"Key":"habit with","Fragments":["all"]},{"Key":"with all","Fragments":["these","the","the","of","the","the","the","the"]},{"Key":"all these","Fragments":["exceptions.","things,","things","custom"]},{"Key":"these exceptions.","Fragments":["Maybe"]},{"Key":"exceptions. Maybe","Fragments":["it"]},{"Key":"Maybe it","Fragments":["is","warrants"]},{"Key":"is same","Fragments":["with"]},{"Key":"same with","Fragments":["Java."]},{"Key":" \u003ccode\u003echeckForYelling()\u003c/code\u003e:","Fragments":["This"]},{"Key":"\u003ccode\u003echeckForYelling()\u003c/code\u003e: This","Fragments":["method"]},{"Key":"This method","Fragments":["gave"]},{"Key":"method gave","Fragments":["me"]},{"Key":"gave me","Fragments":["some","a"]},{"Key":"me some","Fragments":["troubles"]},{"Key":"some troubles","Fragments":["with"]},{"Key":"troubles with","Fragments":["numbers."]},{"Key":"with numbers.","Fragments":["bob_test.cpp"]},{"Key":"numbers. bob_test.cpp","Fragments":["contains"]},{"Key":"bob_test.cpp contains","Fragments":["a"]},{"Key":"contains a","Fragments":["test","single","'return'"]},{"Key":"test case","Fragments":["where","is","fails","to","`BOOST_EQUAL(triangle::illegal,","for","that","is","I","failed.","calls","it","since","missing","where","and","4).","at","took","of"]},{"Key":"case where","Fragments":["a","(1)","the","the","only","there","there","I"]},{"Key":"contains only","Fragments":["digits,"]},{"Key":"only digits,","Fragments":["\"1,"]},{"Key":"digits, \"1,","Fragments":["2,"]},{"Key":"\"1, 2,","Fragments":["3\",","3,"]},{"Key":"2, 3\",","Fragments":["and"]},{"Key":"3\", and","Fragments":["my"]},{"Key":"and my","Fragments":["method","submition","design","code","peers"]},{"Key":"my method","Fragments":["thought","of"]},{"Key":"method thought","Fragments":["it"]},{"Key":"thought it","Fragments":["was","made","was","was","was","might","would","was","was","was","kept","would","would"]},{"Key":"a yell","Fragments":["so","(as","impossible","on","and","(\"Whoa,"]},{"Key":"yell so","Fragments":["it"]},{"Key":"so it","Fragments":["returned","can","doesn't","is","should","just","would","will","probably","risks","would","is","calls","is","would","shouldn't","took","will","basically","becomes","makes","could","wouldn't","can't","could","matters","would","is","seems","probably","took","might","might","outputs"]},{"Key":"it returned","Fragments":["true."]},{"Key":"returned true.","Fragments":["I"]},{"Key":"true. I","Fragments":["wrote","hadn't"]},{"Key":"I wrote","Fragments":["this","this","would","it,","it.","start()","a","it","up","in","the","a","a","two","a","this.","it"]},{"Key":"wrote this","Fragments":["method","code","code"]},{"Key":"this method","Fragments":["pretty","take","so"]},{"Key":"method pretty","Fragments":["late"]},{"Key":"pretty late","Fragments":["in"]},{"Key":"late in","Fragments":["night"]},{"Key":"in night","Fragments":["so"]},{"Key":"night so","Fragments":["I"]},{"Key":"was confused.","Fragments":["I","Having"]},{"Key":"confused. I","Fragments":["will"]},{"Key":"will give","Fragments":["it","you","you","you","you","them","another","you"]},{"Key":"give it","Fragments":["another","another","special","a","a","a"]},{"Key":"it another","Fragments":["shot.","go."]},{"Key":"another shot.","Fragments":["The"]},{"Key":"shot. The","Fragments":["original"]},{"Key":"The original","Fragments":["method"]},{"Key":"original method","Fragments":["contained"]},{"Key":"method contained","Fragments":["only"]},{"Key":"contained only","Fragments":["a"]},{"Key":"only a","Fragments":["for","few","memcpy.","matter","single"]},{"Key":"a for","Fragments":["loop","loop","loop","loop"]},{"Key":"loop to","Fragments":["check","use","then","help","help","help","help","cover","add","check","the","happen","perform","examine","a","iterate"]},{"Key":"check if","Fragments":["it","a","a","there","all","the","it's","any","the","empty","a","two","the","the","every","`cnt","letter","character","it","one","the","for","someone","bob","the","`total_upper`","the","it's","a","the","it's","it's","a","the","the","the","only","all","```input```","both","the","the"]},{"Key":"a upper","Fragments":["letter"]},{"Key":"upper letter","Fragments":["then"]},{"Key":"letter then","Fragments":["return"]},{"Key":"then return","Fragments":["false.","false.","the","*iter"]},{"Key":"return false.","Fragments":["For","A","Then"]},{"Key":"false. For","Fragments":["some"]},{"Key":"For some","Fragments":["reason,","reason","domains","reason"]},{"Key":"some reason,","Fragments":["it","remember"]},{"Key":"reason, it","Fragments":["didn't"]},{"Key":"it didn't","Fragments":["work.","work","need"]},{"Key":"didn't work.","Fragments":["I"]},{"Key":"work. I","Fragments":["fixed","could"]},{"Key":"I fixed","Fragments":["the","the"]},{"Key":"fixed the","Fragments":["problem","code","includes.","issue."]},{"Key":"problem using","Fragments":["a","functions,","boost,","boost"]},{"Key":"a somewhat","Fragments":["hackish","hidden"]},{"Key":"somewhat hackish","Fragments":["solution"]},{"Key":"hackish solution","Fragments":["to"]},{"Key":"solution to","Fragments":["check","the","the","999","me.","this","this","use","the","find"]},{"Key":"if a","Fragments":["string","string","number","value","word","`map\u003cint,","temporary","constructor","number","string","letter","string","word","given","character","lower","string","function"]},{"Key":"string have","Fragments":["numbers"]},{"Key":"have numbers","Fragments":["only"]},{"Key":"numbers only","Fragments":["then"]},{"Key":" \u003ccode\u003echeckForQuestion()\u003c/code\u003e:","Fragments":["I"]},{"Key":"\u003ccode\u003echeckForQuestion()\u003c/code\u003e: I","Fragments":["made"]},{"Key":"made it","Fragments":["as","look","clear","work,","accessible…","difficult","short,","more"]},{"Key":"as an","Fragments":["independent","array","extra","example:","implicit","index","error","interface","ifdef—","early","argument.","`int`.","implementation","interface","argument","rvalue","argument.","FSM/language","object","int","anagram","alternative","argument,","example"]},{"Key":"an independent","Fragments":["function"]},{"Key":"independent function","Fragments":["so"]},{"Key":"function so","Fragments":["it","that","that","I","checks"]},{"Key":"used anywhere","Fragments":["in"]},{"Key":"anywhere in","Fragments":["any"]},{"Key":"any order.","Fragments":["It"]},{"Key":"order. It","Fragments":["doesn't"]},{"Key":"It doesn't","Fragments":["matter..","cause","require"]},{"Key":"doesn't matter..","Fragments":["Since"]},{"Key":"matter.. Since","Fragments":["it"]},{"Key":"Since it","Fragments":["is","looks","is"]},{"Key":"is private","Fragments":["method."]},{"Key":"Thanks again","Fragments":["for","for","everyone!",":)","@dustin!","for","for"]},{"Key":"again for","Fragments":["your","the","your","you"]},{"Key":" Ah,","Fragments":["I","that","thanks!","ok.","ok","I"]},{"Key":"Ah, I","Fragments":["was","didn't"]},{"Key":"at my","Fragments":["local","workplace)","editor","submissions","stuff!","solution,","local"]},{"Key":"my local","Fragments":["copy","copy,"]},{"Key":"local copy","Fragments":["and","of","inplace.","before"]},{"Key":"copy and","Fragments":["it's","compare","change","trimming","the","lowercasing","lowercasing"]},{"Key":"and it's","Fragments":["not","also","not","storing","runtime-cheap.","safer","one","theoretically","funny","probably","going","not","nice","clear","Friday,","nice","used"]},{"Key":"not the","Fragments":["same.","same","way","other","whole","bottleneck.","usual","simplest","north-east","right","cost","buffer.","best","fastes","case","test","actual","last","whole","declaritive.","simple","complete","case.","other","case","**address","length","same","one","approach","best"]},{"Key":"the same.","Fragments":["My","You","if","That's","So","Either","I'll"]},{"Key":"same. My","Fragments":["mistake,"]},{"Key":"My mistake,","Fragments":["apologies."]},{"Key":" @devyn","Fragments":["True"]},{"Key":"@devyn True","Fragments":["about"]},{"Key":"True about","Fragments":["the"]},{"Key":"the yelling:","Fragments":["it"]},{"Key":"yelling: it","Fragments":["isn't"]},{"Key":"isn't that","Fragments":["obvious","great."]},{"Key":"that obvious","Fragments":["what"]},{"Key":"obvious what","Fragments":["is","gains","the"]},{"Key":"what is","Fragments":["actually","actually","this","`iostream`","in","happening","going","the","the","expected","recommended.","being","different","the","in"]},{"Key":"is actually","Fragments":["meant","faster","a","detected.","inefficient","an","what","faster","`const`.","wanted","less","Scrabble","the","doing?","`isAlphaPresent`","being","supported.","being","__slower__"]},{"Key":"actually meant","Fragments":["with"]},{"Key":"meant with","Fragments":["the"]},{"Key":"the testcases.","Fragments":["Testing"]},{"Key":"testcases. Testing","Fragments":["for"]},{"Key":"Testing for","Fragments":["numbers"]},{"Key":"for numbers","Fragments":["is","are","as","less","1","containing","larger"]},{"Key":"numbers is","Fragments":["in"]},{"Key":"in my","Fragments":["opinion","editor.","future","opinion,","opinion,","everyday","previous","opinion.","case,","oppinion.","case","opinion","opinion","solution,","opinion,","implementation","collection,","opinion,","approach,","own","mind).","code.","normal","opinion,","own","next","answer","opinion,","own","repertoire","submission).","head","real","version","new","own","opinion.","head","code.","code.","opinion.","everyday","translation","opinion.","code","opinion.","own","opinion","former","code.","opinion","environment","second","program.","oppion.","editor","day","opinion","previous","system,","solution.","next","vim","code.","ruby","implementation.","own","studies","opinion"]},{"Key":"my opinion","Fragments":["a","less","unless","that","there","it","it","this","you","it","they","private","get","is"]},{"Key":"opinion a","Fragments":["hack"]},{"Key":"a hack","Fragments":["to","to"]},{"Key":"hack to","Fragments":["make","me","guarantee"]},{"Key":"tests work","Fragments":["(which"]},{"Key":"work (which","Fragments":["is"]},{"Key":"(which is","Fragments":["only","probably","really","an","another","pretty","a","an","expressed","O(n*log2(n)))","O(n^2","what"]},{"Key":"only negative","Fragments":["about"]},{"Key":"negative about","Fragments":["the"]},{"Key":"tests, not","Fragments":["about"]},{"Key":"not about","Fragments":["the"]},{"Key":"the code,","Fragments":["really","I","especially","having","a","but","but","the","but","so","and"]},{"Key":"code, really","Fragments":[":P),"]},{"Key":"really :P),","Fragments":["but"]},{"Key":":P), but","Fragments":["I"]},{"Key":"what was","Fragments":["meant","there","going","asked","your","available"]},{"Key":"was meant","Fragments":["is","for","for"]},{"Key":"meant is","Fragments":["`contains(uppercase)","that,"]},{"Key":"is `contains(uppercase)","Fragments":["and"]},{"Key":"`contains(uppercase) and","Fragments":["(not"]},{"Key":"and (not","Fragments":["contains(lowercase))`,"]},{"Key":"(not contains(lowercase))`,","Fragments":["in"]},{"Key":"contains(lowercase))`, in","Fragments":["pseudocode."]},{"Key":" ~~*","Fragments":["42-45"]},{"Key":"~~* 42-45","Fragments":["feels"]},{"Key":"42-45 feels","Fragments":["like"]},{"Key":"feels like","Fragments":["it","cheating","there","a","the","a","something","`hey`","an","I","there's","a","it","I"]},{"Key":"a `switch`","Fragments":["statement."]},{"Key":"`switch` statement.","Fragments":["Wasn't","`array\u003cpair\u003cDisposition,string\u003e\u003e`"]},{"Key":"statement. Wasn't","Fragments":["sure"]},{"Key":"Wasn't sure","Fragments":["if","about"]},{"Key":"if switching","Fragments":["on"]},{"Key":"switching on","Fragments":["an"]},{"Key":"an enum","Fragments":["was","as","to","indexed","class.","class?","to","which","that","would","that","and","and","for"]},{"Key":"enum was","Fragments":["okay"]},{"Key":"was okay","Fragments":["and"]},{"Key":"okay and","Fragments":["ran"]},{"Key":"and ran","Fragments":["out"]},{"Key":"ran out","Fragments":["of","of"]},{"Key":"of time","Fragments":["to","I","complexity?","you","randomly","to","looking"]},{"Key":"time to","Fragments":["try","find","think","compare.","read","do","do","take","figure","solve","boot","install","figure","check","parse","sort","take","assign"]},{"Key":"to try","Fragments":["it.","out","to","it","to","using","this","using","it.","that","and"]},{"Key":"try it.","Fragments":["Would"]},{"Key":"it. Would","Fragments":["that"]},{"Key":"Would that","Fragments":["be"]},{"Key":"that be","Fragments":["more","silence?","a"]},{"Key":"more idiomatic","Fragments":["in"]},{"Key":"idiomatic in","Fragments":["C++?~~","this"]},{"Key":"in C++?~~","Fragments":["Changed"]},{"Key":"C++?~~ Changed","Fragments":["in"]},{"Key":"Changed in","Fragments":["iteration"]},{"Key":" *","Fragments":["Is","Does","I","there","All","It","It","You","use","if","Code","Single","extra","if","the","stratnd","because","Single","the","single","keeping","single","contructor","`explicit","single","sequence","single","dnaStrand","This","Parsing","if","if","good","avoids","full","each","each","each","process","Readability","Make","You","In","Don't","Always","Prefer","Prefer","Consider","Prefer","Prefer","Don't","I","It","The","Solution","Replaced","No","Function","Add","Use","Use","Using-declaratives","Added","replaced","Perhaps","`mymap_t`","**`split()`","**boost**:","**copying**:","**default","**variable","**initialization-style**:","**global","**mutable","`[[:alnum:]]`","`(?:pattern)`","`pattern*`","`pattern?`","Sprinkled","switched","Used","Const","named","reverse","Instead","if","`i++`","current","removed","added","using","removed","I'd","2","3","5","7","11","13","In","Are","I","Last","It's","It's","It's","int","Uniform","Maybe","You","Your","If","Yes,","Bounds","Yes,","I","This","Instead","You","By","Instead","Use","Make","Added","changed","Please!","Also","Line","In","In","After","Don't","Just","`ends_with(...,","Maybe","Need","Maybe","Either","If","short","uint_fast8_t","uint_least8_t","put","Use","Store","Use","STL","http://stackoverflow.com/a/1435105/1145239","Everything","_Estimate","_Triage","_Collect","if","no","`currentWorld`","favor","What","What","What","2","I","This","`letter`","It","If","While","For","In","Do","Range-based","Oh,","`bob::hey()`","Bob's","Emptiness","We","Yells","good","instead","c-style","using","You","What","You","The","changed","move","The","changed","it","you","the","sort()","is_permutation","It","I"]},{"Key":"* Is","Fragments":["this"]},{"Key":"Is this","Fragments":["the","bad","really","ugly"]},{"Key":"this the","Fragments":["right","C(++)","first"]},{"Key":"the `huh`","Fragments":["and"]},{"Key":"`huh` and","Fragments":["`BobHears`"]},{"Key":"and `BobHears`","Fragments":["namespace-private?"]},{"Key":"`BobHears` namespace-private?","Fragments":["Or"]},{"Key":"namespace-private? Or","Fragments":["do"]},{"Key":"Or do","Fragments":["I"]},{"Key":"do I","Fragments":["need","know?","put","increase"]},{"Key":"I need","Fragments":["a","to","to","to","to","to","to","to","to","to","to","to","to","to","the","to","to","two","to","to","my","some","to","to","to"]},{"Key":"a keyword","Fragments":["somewhere?"]},{"Key":"* Does","Fragments":["my"]},{"Key":"Does my","Fragments":["indentation"]},{"Key":"my indentation","Fragments":["make"]},{"Key":"indentation make","Fragments":["your"]},{"Key":"your eyes","Fragments":["bleed?"]},{"Key":"* I","Fragments":["considered","would've","guess","liked","see","see"]},{"Key":"I considered","Fragments":["a","having","using","using","whether","non-alpha"]},{"Key":"small FSM","Fragments":["(two"]},{"Key":"FSM (two","Fragments":["enums"]},{"Key":"(two enums","Fragments":["for"]},{"Key":"enums for","Fragments":["states"]},{"Key":"for states","Fragments":["and"]},{"Key":"states and","Fragments":["events,"]},{"Key":"and events,","Fragments":["and"]},{"Key":"events, and","Fragments":["a"]},{"Key":"a `const","Fragments":["static`","string\u0026`","bool`","size_t","char*`","char*`","string\u0026`","char`","char`--but","string\u0026","string\u0026","string\u0026","string\u0026","string`","string"]},{"Key":"`const static`","Fragments":["2-D"]},{"Key":"static` 2-D","Fragments":["transition"]},{"Key":"2-D transition","Fragments":["table),"]},{"Key":"transition table),","Fragments":["but"]},{"Key":"table), but","Fragments":["I"]},{"Key":"noticed most","Fragments":["of"]},{"Key":"most of","Fragments":["the","the","the","all","the","the","the","your","it)","these","the","the","the","the","the","the","the","the","the","the"]},{"Key":"the transitions","Fragments":["are"]},{"Key":"transitions are","Fragments":["the"]},{"Key":"same (except","Fragments":["YELLING"]},{"Key":"(except YELLING","Fragments":["and"]},{"Key":"YELLING and","Fragments":["QUESTION)."]},{"Key":"and QUESTION).","Fragments":["I"]},{"Key":"QUESTION). I","Fragments":["still"]},{"Key":"I still","Fragments":["think","don't","think","can't","like","got","think","got","get","wouldn't","have","often"]},{"Key":"still think","Fragments":["it's","that","the"]},{"Key":"think it's","Fragments":["a","neat","good","a","easier","a","better","cleaner","a","probably","not","pretty","fine","completely","just","realistic","required","fair","fine.","also","impossible","more","reasonable","the","not","too","always","wrong,","a","arguable","really","broken"]},{"Key":"a decent","Fragments":["option,","guess","chance","argument.","habit","solution","portion","shot"]},{"Key":"decent option,","Fragments":["but"]},{"Key":"option, but","Fragments":["it"]},{"Key":"seemed overly","Fragments":["complicated"]},{"Key":"overly complicated","Fragments":["for","for","the"]},{"Key":"complicated for","Fragments":["the","this"]},{"Key":"problem. Also,","Fragments":["I"]},{"Key":"had compile","Fragments":["errors"]},{"Key":"compile errors","Fragments":["when","though,"]},{"Key":"errors when","Fragments":["using"]},{"Key":"when using","Fragments":["an","VS2013+Boost","string","a"]},{"Key":"using an","Fragments":["enum","array","array","int","iterator","array","epsilon,","enum","if-break","assembly","old-fashioned","iterator","anonymous","iterator.","unsigned","unsigned","`int`"]},{"Key":"enum as","Fragments":["an"]},{"Key":"array dimension","Fragments":["during"]},{"Key":"dimension during","Fragments":["declaration"]},{"Key":"during declaration","Fragments":["(but"]},{"Key":"declaration (but","Fragments":["I"]},{"Key":"(but I","Fragments":["think","decided","can't","guess"]},{"Key":"that's due","Fragments":["to"]},{"Key":"due to","Fragments":["scoped","the","`is_upper`","maintainability","some","how","limitations","working","the","rounding.","the","a","a","the","the","something","having"]},{"Key":"to scoped","Fragments":["enums"]},{"Key":"scoped enums","Fragments":["requiring"]},{"Key":"enums requiring","Fragments":["a"]},{"Key":"requiring a","Fragments":["`static_cast\u003cint\u003e`--that"]},{"Key":"a `static_cast\u003cint\u003e`--that","Fragments":["bit"]},{"Key":"`static_cast\u003cint\u003e`--that bit","Fragments":["of"]},{"Key":"of syntactic","Fragments":["vinegar"]},{"Key":"syntactic vinegar","Fragments":["was"]},{"Key":"vinegar was","Fragments":["another"]},{"Key":"was another","Fragments":["reason"]},{"Key":"another reason","Fragments":["I","that"]},{"Key":"I ended","Fragments":["up","up","up","up"]},{"Key":"ended up","Fragments":["simplifying","being","with","learning","giving","using","the","not","that"]},{"Key":"up simplifying","Fragments":["it)."]},{"Key":"the nitpick,","Fragments":["absurdist.","I"]},{"Key":"nitpick, absurdist.","Fragments":["No"]},{"Key":"absurdist. No","Fragments":["particular"]},{"Key":"No particular","Fragments":["reason","reason."]},{"Key":"particular reason","Fragments":["for","to"]},{"Key":"the order,","Fragments":["I"]},{"Key":"order, I","Fragments":["was"]},{"Key":"was in","Fragments":["a","the","your","the"]},{"Key":"a hurry","Fragments":["when"]},{"Key":"hurry when","Fragments":["coding"]},{"Key":"when coding","Fragments":["this"]},{"Key":"coding this","Fragments":["one."]},{"Key":"this one.","Fragments":["So","This","No","At","It","And"]},{"Key":"one. So","Fragments":["after"]},{"Key":"So after","Fragments":["aeiou,"]},{"Key":"after aeiou,","Fragments":["I"]},{"Key":"aeiou, I","Fragments":["just"]},{"Key":"put in","Fragments":["the","the","the","some","a","a","a","explicit","blank","the"]},{"Key":"the primes","Fragments":["randomly."]},{"Key":"primes randomly.","Fragments":["Below"]},{"Key":"randomly. Below","Fragments":["is"]},{"Key":"Below is","Fragments":["probably"]},{"Key":"is probably","Fragments":["a","a","important","not","a","closer","closer","(rightly)","what","more","an","more","really","better","better","doable,","overkill","the","negligible","not","a","going","an","not","faster"]},{"Key":"probably a","Fragments":["better","personal","bad","bit","little","little","good","better"]},{"Key":"a better","Fragments":["ordered","chance","chance","chance","way","way","way","name","way","way","way","variable","distribution","grasp","look","runtime","name","name","substitute","approach","approach","strategy","way","structure","way","algorithm,","way","solution","name","way","way","way","one.","use"]},{"Key":"better ordered","Fragments":["array:"]},{"Key":"A B","Fragments":["C"]},{"Key":"B C","Fragments":["D"]},{"Key":"C D","Fragments":["E"]},{"Key":"D E","Fragments":["F"]},{"Key":" 5","Fragments":["71","0","0","v","v"]},{"Key":"5 71","Fragments":["37"]},{"Key":"71 37","Fragments":["31"]},{"Key":"37 31","Fragments":["2"]},{"Key":"31 2","Fragments":["47"]},{"Key":" G","Fragments":["H"]},{"Key":"G H","Fragments":["I"]},{"Key":"H I","Fragments":["J"]},{"Key":"I J","Fragments":["K"]},{"Key":"J K","Fragments":["L"]},{"Key":" 59","Fragments":["23"]},{"Key":"59 23","Fragments":["11"]},{"Key":"23 11","Fragments":["89"]},{"Key":"11 89","Fragments":["79"]},{"Key":"89 79","Fragments":["29"]},{"Key":" M","Fragments":["N"]},{"Key":"M N","Fragments":["O"]},{"Key":"N O","Fragments":["P"]},{"Key":"O P","Fragments":["Q"]},{"Key":"P Q","Fragments":["R"]},{"Key":" 43","Fragments":["13"]},{"Key":"43 13","Fragments":["7"]},{"Key":"13 7","Fragments":["53"]},{"Key":"7 53","Fragments":["97"]},{"Key":"53 97","Fragments":["19"]},{"Key":" S","Fragments":["T"]},{"Key":"S T","Fragments":["U"]},{"Key":"T U","Fragments":["V"]},{"Key":"U V","Fragments":["W"]},{"Key":"V W","Fragments":["X"]},{"Key":" 17","Fragments":["3"]},{"Key":"17 3","Fragments":["41"]},{"Key":"3 41","Fragments":["73"]},{"Key":"41 73","Fragments":["61"]},{"Key":"73 61","Fragments":["83"]},{"Key":" Y","Fragments":["Z"]},{"Key":" 67","Fragments":["101"]},{"Key":"I obtained","Fragments":["this"]},{"Key":"obtained this","Fragments":["frequency"]},{"Key":"this frequency","Fragments":["list"]},{"Key":"frequency list","Fragments":["from"]},{"Key":"list from","Fragments":["wikipedia"]},{"Key":"from wikipedia","Fragments":["which"]},{"Key":"wikipedia which","Fragments":["I"]},{"Key":"which I","Fragments":["should","used","think","think","end","find","think","think","would","don't","mean","wouldn't","think","can","used","did","think","think","just","agree"]},{"Key":"have done","Fragments":["in","it","everything","something","in","differently,","a","it","better.","in"]},{"Key":"done in","Fragments":["the","O(n)","O(1).","O(N)","a","the","O(max(len_i)),","the","C.","argument","the"]},{"Key":"using multiple","Fragments":["return","return","string::find"]},{"Key":"multiple return","Fragments":["statements","statements.","statements."]},{"Key":"return statements","Fragments":["in"]},{"Key":"your switch","Fragments":["statement,","statement,"]},{"Key":"switch statement,","Fragments":["consider","and","why"]},{"Key":"statement, consider","Fragments":["assigning"]},{"Key":"consider assigning","Fragments":["to"]},{"Key":"assigning to","Fragments":["a","`l`.","isNothing."]},{"Key":"a `std::string","Fragments":["answer;`","const\u0026`"]},{"Key":"`std::string answer;`","Fragments":["variable."]},{"Key":"answer;` variable.","Fragments":["You"]},{"Key":"variable. You","Fragments":["can"]},{"Key":"can then","Fragments":["return"]},{"Key":"return the","Fragments":["answer","value","`result`","result","\"Chill","same","reply","result","strings","string","appropriate","same","same","precomputed","equivalent","proper","nth"]},{"Key":"the answer","Fragments":["after","to","i","to","is","(e.g.,","to","here:"]},{"Key":"answer after","Fragments":["the"]},{"Key":"after the","Fragments":["switch","generous","for","call.","result","songs?","last","`for`","first","last","first","\"?\"","trimming","return","operator+=","question","algorithm","string","question","'?'","?.","for","'?'","Bob","loop","```if```s","?.","`?`"]},{"Key":"statement. Same","Fragments":["goes"]},{"Key":"Same goes","Fragments":["with"]},{"Key":"goes with","Fragments":["the"]},{"Key":"the process","Fragments":["function","anyway;","of","is","of","more"]},{"Key":"process function","Fragments":["where"]},{"Key":"function where","Fragments":["you"]},{"Key":"the if","Fragments":["statements","statements","statement","statement","statements","statement","statement","statement.","with","condition."]},{"Key":"if statements","Fragments":["to","are","in","the","to","can"]},{"Key":"statements to","Fragments":["an","test","avoid","just"]},{"Key":"to an","Fragments":["if-else","integer.","integer.","integer.","integer.","integer.","object","`int`,","ovelroad","infinite","object","`int`","int","`int`","old","inline'd","uppercased","anonymous","int.","integer.","else","anonymous","anonymous","`unsigned","existing"]},{"Key":"an if-else","Fragments":["if-statement."]},{"Key":" Using","Fragments":["`regex`","`boost::split`","regex_token_iterator","some","some","std::move","an","`copy_if`","unsigned","std::accumulate...","a","`\u003calgorithm\u003e`","boost","stl","boost","`char","the","the"]},{"Key":"Using `regex`","Fragments":["was"]},{"Key":"`regex` was","Fragments":["my"]},{"Key":"first thought,","Fragments":["therefore"]},{"Key":"thought, therefore","Fragments":["I"]},{"Key":"therefore I","Fragments":["gave"]},{"Key":"I gave","Fragments":["it","up","in.","in.","in.","@ramona","up"]},{"Key":"gave it","Fragments":["a","in"]},{"Key":"a try.","Fragments":["Turned","I"]},{"Key":"try. Turned","Fragments":["out"]},{"Key":"Turned out","Fragments":["that"]},{"Key":"out that","Fragments":["it","if","it's","since","punctuation","for","you"]},{"Key":"was fairly","Fragments":["easy,"]},{"Key":"fairly easy,","Fragments":["however"]},{"Key":"easy, however","Fragments":["not"]},{"Key":"however not","Fragments":["that"]},{"Key":"not that","Fragments":["readable.","readable.","test","important","big","familiar"]},{"Key":"that readable.","Fragments":["Saving","It"]},{"Key":"readable. Saving","Fragments":["the"]},{"Key":"Saving the","Fragments":["expressions"]},{"Key":"the expressions","Fragments":["in","as"]},{"Key":"expressions in","Fragments":["variables"]},{"Key":"in variables","Fragments":["solved"]},{"Key":"variables solved","Fragments":["that"]},{"Key":"solved that","Fragments":["problem."]},{"Key":"that problem.","Fragments":["I"]},{"Key":"problem. I","Fragments":["think","learned","probably","could","was"]},{"Key":"it's neat","Fragments":["now.","to"]},{"Key":"neat now.","Fragments":["Looking"]},{"Key":"now. Looking","Fragments":["forward"]},{"Key":"Looking forward","Fragments":["to","to"]},{"Key":"forward to","Fragments":["your","feedback","additional"]},{"Key":"a so-called","Fragments":["for-in"]},{"Key":"so-called for-in","Fragments":["loop"]},{"Key":"for-in loop","Fragments":["in"]},{"Key":"in `yelled_at`.","Fragments":["`for(char"]},{"Key":"`yelled_at`. `for(char","Fragments":["c"]},{"Key":"`for(char c","Fragments":[":",":",":"]},{"Key":": str)`","Fragments":["saves","iteration"]},{"Key":"str)` saves","Fragments":["the"]},{"Key":"saves the","Fragments":["usage"]},{"Key":"the usage","Fragments":["of","of","(\"key\").","of","of","of","you","of","there,"]},{"Key":"usage of","Fragments":["the","call","std::accumulate","its","the","regex!","return","auto.","your","the","brackets.","return","\"goto\""]},{"Key":"the variable","Fragments":["`it`","for","cannot","cannot","names","exactly","will","actually","animal","names","naming","is","names","initialization.","name","to"]},{"Key":"variable `it`","Fragments":["and"]},{"Key":"`it` and","Fragments":["a"]},{"Key":" `flag`","Fragments":["in"]},{"Key":"`flag` in","Fragments":["`isYelling`"]},{"Key":"in `isYelling`","Fragments":["could"]},{"Key":"`isYelling` could","Fragments":["use"]},{"Key":"more descriptive","Fragments":["name,","-","message","like","variable"]},{"Key":"name, like","Fragments":["`hasUppercase`."]},{"Key":"Since you're","Fragments":["into","maintaining","already","not","not"]},{"Key":"you're into","Fragments":["C"]},{"Key":"into C","Fragments":["things,"]},{"Key":"C things,","Fragments":["you"]},{"Key":"things, you","Fragments":["can"]},{"Key":"can include","Fragments":["`\u003ccctype\u003e`"]},{"Key":"include `\u003ccctype\u003e`","Fragments":["(or","and"]},{"Key":"`\u003ccctype\u003e` (or","Fragments":["`\u003cctype.h\u003e`)"]},{"Key":"(or `\u003cctype.h\u003e`)","Fragments":["and"]},{"Key":"`\u003cctype.h\u003e`) and","Fragments":["use"]},{"Key":"use `isspace(char)`","Fragments":["instead"]},{"Key":"`isspace(char)` instead","Fragments":["of"]},{"Key":"of `==","Fragments":["32`"]},{"Key":"`== 32`","Fragments":["in"]},{"Key":"32` in","Fragments":["`isQuestion`"]},{"Key":"in `isQuestion`","Fragments":["and"]},{"Key":"`isQuestion` and","Fragments":["`isNothing`","`isSilence`"]},{"Key":"and `isNothing`","Fragments":["to"]},{"Key":"`isNothing` to","Fragments":["be"]},{"Key":"be able","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to).","to","to","to"]},{"Key":"handle tabs","Fragments":["and"]},{"Key":"tabs and","Fragments":["other","spaces","line"]},{"Key":"and other","Fragments":["cruft","undesirable","exercises.","things"]},{"Key":"other cruft","Fragments":["as"]},{"Key":"cruft as","Fragments":["well."]},{"Key":"In general,","Fragments":["your","I","this","try","regex"]},{"Key":"general, your","Fragments":["code"]},{"Key":"is good,","Fragments":["but"]},{"Key":"good, but","Fragments":["it","there","I'll","it","the"]},{"Key":"be somewhat","Fragments":["hard","interesting","misleading"]},{"Key":"somewhat hard","Fragments":["to"]},{"Key":"hard to","Fragments":["read","read.","debug.","find.","read","follow,","see","explicitly","get","address","keep","fix.","follow,","find.","follow.","read","work","read,","get"]},{"Key":"for someone","Fragments":["who"]},{"Key":"someone who","Fragments":["is","doesn't,","uses","combines"]},{"Key":"C++ instead","Fragments":["of"]},{"Key":"of C,","Fragments":["and"]},{"Key":"C, and","Fragments":["it's"]},{"Key":"it's also","Fragments":["somewhat","a","good","a","correct"]},{"Key":"also somewhat","Fragments":["long."]},{"Key":"somewhat long.","Fragments":["For"]},{"Key":"long. For","Fragments":["an"]},{"Key":"For an","Fragments":["example"]},{"Key":"an example","Fragments":["in","where","of","where","of"]},{"Key":"example in","Fragments":["which","the","your"]},{"Key":"in which","Fragments":["I","case","case","case","is","the","case","you've"]},{"Key":"same C-style","Fragments":["as"]},{"Key":"C-style as","Fragments":["you"]},{"Key":"you did,","Fragments":["but","because","so"]},{"Key":"did, but","Fragments":["which"]},{"Key":"but which","Fragments":["is"]},{"Key":"is somewhat","Fragments":["shorter,"]},{"Key":"somewhat shorter,","Fragments":["see"]},{"Key":"shorter, see","Fragments":["[this](http://exercism.io/submissions/5ae0842e56fe4dedafa0a919d9978741)."]},{"Key":" Keep","Fragments":["in","up"]},{"Key":"Keep in","Fragments":["mind"]},{"Key":"in mind","Fragments":["that","was","there's","I","that","working","significant","that","when","for"]},{"Key":"mind that","Fragments":["`#pragma","the","they","application"]},{"Key":"that `#pragma","Fragments":["once`","once`"]},{"Key":"`#pragma once`","Fragments":["is","was"]},{"Key":"once` is","Fragments":["not"]},{"Key":"not in","Fragments":["the","the","O(n).","the","the","the","face","the","h","the","the","the","map","map,","x\\n\";"]},{"Key":"went the","Fragments":["way","route","Boost"]},{"Key":"the way","Fragments":["I","it","I","you","you","it","it","your","this","I","at","to","the","around","it","you","your","it","it","response","your","the","you've","you","for","from","variables","it's","down","we","you","to","that","you've","you","the","the","the","it","this","you","I","you"]},{"Key":"way I","Fragments":["went","sorted","have","agree","don't","read","could","thought","could","sort","understand","see","did"]},{"Key":"went mainly","Fragments":["because"]},{"Key":"mainly because","Fragments":["I","you're"]},{"Key":"I find","Fragments":["it's","the","it","it","interesting","it","the","it","is","the","it","it","them","it","the","it","it","it","some","the","the","this","better","it","it","iterators","your","it","this","that"]},{"Key":"find it's","Fragments":["too"]},{"Key":"it's too","Fragments":["easy","bad"]},{"Key":"too easy","Fragments":["to"]},{"Key":"to forget","Fragments":["a","that"]},{"Key":"forget a","Fragments":["`break`"]},{"Key":"a `break`","Fragments":["inside","statement"]},{"Key":"`break` inside","Fragments":["of"]},{"Key":"inside of","Fragments":["a","an","a","the","the","a","a","common","the","your","the","`const","the"]},{"Key":"a `case`","Fragments":["and"]},{"Key":"`case` and","Fragments":["end"]},{"Key":"and end","Fragments":["up","of","(begin","free","iterators.","iterators","iterators,","up","iterators.","iterators","would","of","of","of","of","of","of"]},{"Key":"up erroneously","Fragments":["reseting"]},{"Key":"erroneously reseting","Fragments":["the"]},{"Key":"reseting the","Fragments":["`answer`"]},{"Key":"the `answer`","Fragments":["variable."]},{"Key":"My preference","Fragments":["would"]},{"Key":"preference would","Fragments":["be"]},{"Key":"be to","Fragments":["be","keep","save","move","using","old?","perform","remove","test","return","specify","use","include","sort","store","initialize","defer","change","parse.","move","look"]},{"Key":"do `return","Fragments":["switch"]},{"Key":"`return switch","Fragments":["{...}`,","...`"]},{"Key":"switch {...}`,","Fragments":["but"]},{"Key":"{...}`, but","Fragments":["given"]},{"Key":"but given","Fragments":["that","that"]},{"Key":"that C++","Fragments":["isn't","would","is"]},{"Key":"C++ isn't","Fragments":["expression","good","the"]},{"Key":"isn't expression","Fragments":["oriented,"]},{"Key":"expression oriented,","Fragments":["embedding"]},{"Key":"oriented, embedding","Fragments":["the"]},{"Key":"embedding the","Fragments":["`return`s"]},{"Key":"the `return`s","Fragments":["inside"]},{"Key":"`return`s inside","Fragments":["seems"]},{"Key":"inside seems","Fragments":["to"]},{"Key":"next best","Fragments":["thing,"]},{"Key":"best thing,","Fragments":["given"]},{"Key":"thing, given","Fragments":["that"]},{"Key":"need for","Fragments":["a","comments.","iterators,","```bool","animals[].","it.","`static","quotes","more","the","a","str.empty()","multiple","strip_punctuation","further","a","two","the","this","the","this","any","boost).","looping","the","me","length"]},{"Key":"a mutable","Fragments":["local","local"]},{"Key":"mutable local","Fragments":["variable.","copy"]},{"Key":"Your idea","Fragments":["worked"]},{"Key":"idea worked","Fragments":["great"]},{"Key":"worked great","Fragments":["and"]},{"Key":"great and","Fragments":["allowed"]},{"Key":"and allowed","Fragments":["me"]},{"Key":"allowed me","Fragments":["to"]},{"Key":"get rid","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"rid of","Fragments":["the","the","'answer':","the","the","the","that","boost/algorithm/string.hpp.","a","static","the","pow","the","the","the","the","the","the","the","those","the","the","the","them","these","it","the"]},{"Key":"the \u003ccode\u003eremove_doubles\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eremove_doubles\u003c/code\u003e and","Fragments":["the"]},{"Key":"the \u003ccode\u003eclean_beginning_end\u003c/code\u003e","Fragments":["functions."]},{"Key":" Indeed,","Fragments":["`return","sorry"]},{"Key":"Indeed, `return","Fragments":["switch"]},{"Key":"switch ...`","Fragments":["would"]},{"Key":"...` would","Fragments":["be"]},{"Key":"be nice.","Fragments":["Whether","In"]},{"Key":"nice. Whether","Fragments":["to"]},{"Key":"Whether to","Fragments":["use","take"]},{"Key":"use nested","Fragments":["returns","ifs"]},{"Key":"nested returns","Fragments":["vs"]},{"Key":"returns vs","Fragments":["an"]},{"Key":"vs an","Fragments":["extra"]},{"Key":"extra mutable","Fragments":["variable"]},{"Key":"mutable variable","Fragments":["is"]},{"Key":"a personal","Fragments":["preference.","preference.","preference,","preference","copy"]},{"Key":"personal preference.","Fragments":["Your","I'm","I"]},{"Key":"preference. Your","Fragments":["code"]},{"Key":"to rename","Fragments":["`process(..)`","your","the"]},{"Key":"rename `process(..)`","Fragments":["to"]},{"Key":"`process(..)` to","Fragments":["something"]},{"Key":"to something","Fragments":["more","like","which","faster,","like","that's","like","like","known","a","like"]},{"Key":"something more","Fragments":["meaningful","robust."]},{"Key":"more meaningful","Fragments":["like"]},{"Key":"meaningful like","Fragments":["`get_type_of_speach(..)`"]},{"Key":"like `get_type_of_speach(..)`","Fragments":["(I'm"]},{"Key":"`get_type_of_speach(..)` (I'm","Fragments":["really"]},{"Key":"(I'm really","Fragments":["bad"]},{"Key":"really bad","Fragments":["at"]},{"Key":"bad at","Fragments":["choosing"]},{"Key":"at choosing","Fragments":["names)."]},{"Key":"a range-based","Fragments":["for-loop;","for","for.","for,","for.","for","for","for","for","for"]},{"Key":"range-based for-loop;","Fragments":["it's"]},{"Key":"for-loop; it's","Fragments":["more"]},{"Key":"it's more","Fragments":["readable.","descriptive","\"right\"","thorough/rugged,","general","effort","code.","likely","like","of"]},{"Key":"for (auto","Fragments":["c","iter","it=sentence.begin();","\u0026\u0026word:","it","letter"]},{"Key":"(auto c","Fragments":[":",":",":",":"]},{"Key":": answer)","Fragments":["{"]},{"Key":"if (","Fragments":["isalpha(c)","number","i","number","i","n","num","begin_it","punct","*punct","i","left.size()","is_match(strings[i])","!std::isblank(c)","is_match","test1","test2"]},{"Key":"( isalpha(c)","Fragments":[")"]},{"Key":"isalpha(c) )","Fragments":["{"]},{"Key":") {","Fragments":["..."]},{"Key":"{ ...","Fragments":["}","}`.","use(c)","}```.","}```."]},{"Key":"And you","Fragments":["should","know","might","don't","also"]},{"Key":"should pass","Fragments":["answer","a","as","it"]},{"Key":"pass answer","Fragments":["as"]},{"Key":"answer as","Fragments":["a"]},{"Key":"`const string\u0026`","Fragments":["and","and","and","as","arguments","to"]},{"Key":"string\u0026` and","Fragments":["make","then","`string"]},{"Key":"make a","Fragments":["local","big","mistake","public","separate","local","local","lot","copy","single","wraper","`inStatmentLow","mental","copy","decent","difference;","habit","lowercase","copy","copy","class","template","copy?","mistake","good","`bool","3rd","copy","copy","few","choice","first","copy","working","local","copy","`createCharCountMap`","little","little"]},{"Key":"local variable","Fragments":["that","to","in","that","score","with"]},{"Key":"can mess","Fragments":["with."]},{"Key":" Ok","Fragments":["thanks","figured"]},{"Key":" Awesome!","Fragments":["Good"]},{"Key":"Awesome! Good","Fragments":["nitpicks."]},{"Key":"Good nitpicks.","Fragments":["I'll"]},{"Key":"nitpicks. I'll","Fragments":["have"]},{"Key":"I'll have","Fragments":["another","another","to","to","to"]},{"Key":"have another","Fragments":["iteration","iteration"]},{"Key":"another iteration","Fragments":["up","with","up","up","removing","for"]},{"Key":"iteration up","Fragments":["here","here","but"]},{"Key":"up here","Fragments":["soon.","soon."]},{"Key":" Updated","Fragments":["with","to","using","solution","to","as"]},{"Key":"Updated with","Fragments":["additional"]},{"Key":"with additional","Fragments":["comments."]},{"Key":" oh","Fragments":["thats'","good"]},{"Key":"oh thats'","Fragments":["funny,"]},{"Key":" i","Fragments":["thought","liked","like","think","think","like","like","don't","think","could","=","realised","give","*=","was","=","might","think","misread","like"]},{"Key":"i thought","Fragments":["you","they"]},{"Key":"thought you","Fragments":["method"]},{"Key":"you method","Fragments":["was"]},{"Key":"was so","Fragments":["clever","trivial."]},{"Key":"so clever","Fragments":["that"]},{"Key":"clever that","Fragments":["i"]},{"Key":"that i","Fragments":["assumed","think","think","would"]},{"Key":"i assumed","Fragments":["there","a"]},{"Key":"assumed there","Fragments":["was"]},{"Key":"was more","Fragments":["than","an","complex","portable."]},{"Key":"than mere","Fragments":["randomness"]},{"Key":"mere randomness","Fragments":["to"]},{"Key":"randomness to","Fragments":["the"]},{"Key":"the numbering.","Fragments":["I'd"]},{"Key":"numbering. I'd","Fragments":["considered"]},{"Key":"I'd considered","Fragments":["that"]},{"Key":"considered that","Fragments":["letter","a"]},{"Key":"that letter","Fragments":["frequency"]},{"Key":"letter frequency","Fragments":["in","in"]},{"Key":"frequency in","Fragments":["language","words"]},{"Key":"in language","Fragments":["is"]},{"Key":"language is","Fragments":["not"]},{"Key":"as letter","Fragments":["frequency"]},{"Key":"in words","Fragments":["-"]},{"Key":"words -","Fragments":["some"]},{"Key":"- some","Fragments":["words"]},{"Key":"some words","Fragments":["are","by"]},{"Key":"words are","Fragments":["used","anagrams","the","the"]},{"Key":"are used","Fragments":["more","in","nowhere"]},{"Key":"used more","Fragments":["often,","flexibly."]},{"Key":"more often,","Fragments":["and"]},{"Key":"often, and","Fragments":["that"]},{"Key":"and that","Fragments":["perhaps","of","will","it","was","will","it's","ensures","would","we'd","matters","value","isn't","empty","saves","is","is","someone","eliminates","makes","made","is","the","makes","makes","makes","adds"]},{"Key":"that perhaps","Fragments":["you"]},{"Key":"perhaps you","Fragments":["had","should"]},{"Key":"you had","Fragments":["done","your","me","a","left","to"]},{"Key":"had done","Fragments":["your"]},{"Key":"done your","Fragments":["own"]},{"Key":"own calculations","Fragments":["from"]},{"Key":"calculations from","Fragments":["a"]},{"Key":"a dictionary","Fragments":["list.","a","search","a","is","a","order.","has"]},{"Key":" thanks","Fragments":["for","trophy,","for","bro!","@carmel","@royal","mharpe2"]},{"Key":"for letting","Fragments":["me"]},{"Key":"letting me","Fragments":["know."]},{"Key":"I feel","Fragments":["like","this","like","bad","pretty","kind","compelled","much","like","however","the","comfortable","your","this","embarrassed","like","tipsy","like","that","the","like","current","like","this"]},{"Key":"feel like","Fragments":["the","boost","this","it.","trying","I","it","doing","it.","the","they're","the","it's","using","I","sharing.","it"]},{"Key":"input should","Fragments":["be"]},{"Key":"a const","Fragments":["\u0026,","reference","nazi,","reference.","conversion","reference","to","to","to","and","reference.","reference","reference","ref","variable","char*","function?","map\u0026","std::string\u0026?","value","(or","string","char*.","reference.","reference","string\u0026,","iterator.","or","std::string,","std::string\u0026","reference,","reference","char","statically-initialized","reference","reference.","reference","reference","reference","reference.","reference","string\u0026,","reference","string","qualifier","reference","implementation.","object"]},{"Key":"const \u0026,","Fragments":["but"]},{"Key":"\u0026, but","Fragments":["making"]},{"Key":"but making","Fragments":["that"]},{"Key":"making that","Fragments":["definition"]},{"Key":"that definition","Fragments":["breaks"]},{"Key":"definition breaks","Fragments":["the"]},{"Key":"breaks the","Fragments":["loop","loop."]},{"Key":"the loop","Fragments":["on","over","since","since","so","to","after","at","that","as","condition,","is","will","and","it","initializer","inside","as","in","with","in","you","later","and","in","body.","is","instead","myself).","sooner,","and","variables","to","to","over","of","index","to","would","body","structure","condition,","condition.","terminated.","it","and","body"]},{"Key":"loop on","Fragments":["line","int","line"]},{"Key":"if this","Fragments":["will","can","is","were","is","is","were","really","is","iterative","pattern","is","were","is","were","passes","syntax","is","were"]},{"Key":"will end","Fragments":["up","up","up"]},{"Key":"up in","Fragments":["a","a","the","re-enabling","a","to","the"]},{"Key":"new thread,","Fragments":["but"]},{"Key":"thread, but","Fragments":["this"]},{"Key":"is intended","Fragments":["to","to","to"]},{"Key":"a response","Fragments":["to","to","type","type","for"]},{"Key":"response to","Fragments":["@paris's","Bob","`\"#\u0026!\"`","nonsense,"]},{"Key":"to @paris's","Fragments":["last"]},{"Key":"@paris's last","Fragments":["comment:"]},{"Key":" What","Fragments":["I","do","is","I","do","would","a","is","does","does","I'm","would","compiler","happens","platform","I'm","you","about","happens","happens","I","do","happens","if","comes","is","do","I","I","if","if","was","are"]},{"Key":"What I","Fragments":["think","don't","find","like","wanted","really","like","mean","think"]},{"Key":"think @paris","Fragments":["meant"]},{"Key":"@paris meant","Fragments":["is"]},{"Key":"is that,","Fragments":["because"]},{"Key":"that, because","Fragments":["`to_rna`","the"]},{"Key":"because `to_rna`","Fragments":["is"]},{"Key":"`to_rna` is","Fragments":["taking"]},{"Key":"is taking","Fragments":["its"]},{"Key":"taking its","Fragments":["argument"]},{"Key":"its argument","Fragments":["by","but","in"]},{"Key":"argument by","Fragments":["value","copy","value"]},{"Key":"not by","Fragments":["reference,","a","accident","the","an","100"]},{"Key":"by reference,","Fragments":["it's","e.g.","since","and"]},{"Key":"reference, it's","Fragments":["a"]},{"Key":"copy of","Fragments":["the","the","`input`","`mesage`.","`msg`","the","string","*dna_code*","the","the","the","the","the","input","number","the","its","the","the","the","the","the","vector.","input","input","input","input","arguments.","that","the","the","the","the","this","that","the","the","the","the","the","the","the","a","it","it","your","the","the","the","what's","each","its","the","the","the","the","your","a","and","Windows","the","a","the","the","both","the","it","it","the"]},{"Key":"original string.","Fragments":["You've"]},{"Key":"string. You've","Fragments":["got"]},{"Key":"You've got","Fragments":["a","a","definitions","an"]},{"Key":"string that","Fragments":["is","was","are","could","I'm","contains","is","is","is","is","contains"]},{"Key":"right size","Fragments":["for"]},{"Key":"size for","Fragments":["the","the","a"]},{"Key":"output without","Fragments":["any"]},{"Key":"without any","Fragments":["work","using","structure","following"]},{"Key":"any work","Fragments":["on"]},{"Key":"work on","Fragments":["your","primitive","an","that.","two","all","11-digit","multiple","is"]},{"Key":"your part,","Fragments":["so"]},{"Key":"part, so","Fragments":["you"]},{"Key":"you might","Fragments":["as","add","run","be","get","pass","as","have","theoretically","try","be","even","also","be","could","have","notice","want","be","have","consider","since","want","find","be","want","want","see","consider","use","also","want","use","want","want","use","do","have","care","inline","want","want"]},{"Key":"might as","Fragments":["well","well","well","well"]},{"Key":"as well","Fragments":["write","as","be","as","use","(if","do","as","with","as","as","as","not","as","as","as","as","as","as","as","as","as","to","as","when","that","as","as","as","as","have","have"]},{"Key":"well write","Fragments":["into"]},{"Key":"write into","Fragments":["that"]},{"Key":"into that","Fragments":["string","template","later;"]},{"Key":"that string","Fragments":["using","streams"]},{"Key":"string using","Fragments":["`std::transform`","the","`isblank()`"]},{"Key":"using `std::transform`","Fragments":["and"]},{"Key":"`std::transform` and","Fragments":["return"]},{"Key":"return it.","Fragments":["The","I","No"]},{"Key":"The version","Fragments":["of"]},{"Key":"version of","Fragments":["the","the","lower_bound...","rand","the","`exercism`","`exercism`","gcc","a","VS","the","it),","gcc","this","the","the","bob","*Prime","`bob::hey()`","your","tolower","the","the","c++11,","the"]},{"Key":"function as","Fragments":["written","the","each","a","static","static","static,","a","possible."]},{"Key":"as written","Fragments":["may","here."]},{"Key":"written may","Fragments":["re-allocate"]},{"Key":"may re-allocate","Fragments":["in"]},{"Key":"re-allocate in","Fragments":["the"]},{"Key":"the middle","Fragments":["of","of","of","of","of","of","of","even"]},{"Key":"middle of","Fragments":["the","the","a","an","the","the","the"]},{"Key":"the loop,","Fragments":["which","to","I","I","as","I'd","the","even","less"]},{"Key":"loop, which","Fragments":["may","sort"]},{"Key":"which may","Fragments":["not","not","differ","differ","not"]},{"Key":"big deal,","Fragments":["but","but","I","but"]},{"Key":"deal, but","Fragments":["is","consider","in","it"]},{"Key":"but is","Fragments":["the","also","there","atypical.","a","a","a"]},{"Key":"the sort","Fragments":["of","of","and"]},{"Key":"of thing","Fragments":["C++","-","definitively"]},{"Key":"thing C++","Fragments":["programmers"]},{"Key":"C++ programmers","Fragments":["care"]},{"Key":"programmers care","Fragments":["about"]},{"Key":"care about","Fragments":["sometimes.","the","code","anyway).","are"]},{"Key":"As for","Fragments":["resources,","run-time","`for","the","item","consuming","internal","the","the","the","mutability.","this","the","your","the","the","a","\"modern\"","using","the","traversing","the","`is_shout`","`is_shout`,","the","the","the","the"]},{"Key":"for resources,","Fragments":["I"]},{"Key":"resources, I","Fragments":["can't"]},{"Key":"can't recommend","Fragments":["Scott"]},{"Key":"recommend Scott","Fragments":["Meyers's"]},{"Key":"Scott Meyers's","Fragments":["\"Effective"]},{"Key":"Meyers's \"Effective","Fragments":["C++\""]},{"Key":"\"Effective C++\"","Fragments":["books"]},{"Key":"C++\" books","Fragments":["enough,"]},{"Key":"books enough,","Fragments":["and"]},{"Key":"enough, and","Fragments":["the","on"]},{"Key":"the r/cpp","Fragments":["subreddit"]},{"Key":"r/cpp subreddit","Fragments":["is"]},{"Key":"subreddit is","Fragments":["always"]},{"Key":"is always","Fragments":["educational.","getting","100%","to","least-to-greatest","equal","equal","a","the","tail","a"]},{"Key":" That","Fragments":["makes","first","said,","particular","`const","...","test","said,","said,","said","combination","string","deeply","is","is","allows","is","way,","would","doesn't","phrase","said,","being","piece","said,","said,","way"]},{"Key":"That makes","Fragments":["the","sense(I've","it","a"]},{"Key":"the benefit","Fragments":["clearer.","of","of","of","of","of"]},{"Key":"benefit clearer.","Fragments":["I"]},{"Key":"clearer. I","Fragments":["should"]},{"Key":"should put","Fragments":["more","some","\"const","this"]},{"Key":"put more","Fragments":["time"]},{"Key":"more time","Fragments":["to"]},{"Key":"to find","Fragments":["these","the","out","it","an","anything","a","a","a","some","a","primes","factors","a","anagrams,","where","code","a","the","a","out","this","a","the","a","and","a","an","the","a","the","a","all","anagrams."]},{"Key":"find these","Fragments":["optimizations"]},{"Key":"these optimizations","Fragments":["in"]},{"Key":"optimizations in","Fragments":["the","which"]},{"Key":"the explanation,","Fragments":["and"]},{"Key":"explanation, and","Fragments":["book/subreddit"]},{"Key":"and book/subreddit","Fragments":["recommendation."]},{"Key":"you decompose","Fragments":["the"]},{"Key":"decompose the","Fragments":["problem"]},{"Key":"using functions,","Fragments":["constants,"]},{"Key":"functions, constants,","Fragments":["auto"]},{"Key":"constants, auto","Fragments":["and"]},{"Key":"auto and","Fragments":["for.","why:","then","loop"]},{"Key":"and for.","Fragments":["(I'm"]},{"Key":"for. (I'm","Fragments":["yet"]},{"Key":"(I'm yet","Fragments":["to"]},{"Key":"yet to","Fragments":["learn","correct","see"]},{"Key":"to learn","Fragments":["the","it","some","that","boost.range,","C++,","the","things","more","rather","more","C++","that.","assembly","more","C++","about","more","to"]},{"Key":"learn the","Fragments":["latter","newer","C++","ins"]},{"Key":"the latter","Fragments":["two","much","will","two","more","route","approach","because","you","(this"]},{"Key":"latter two","Fragments":["myself!)","requirements"]},{"Key":"two myself!)","Fragments":["However,"]},{"Key":"myself!) However,","Fragments":["I'm"]},{"Key":"However, I'm","Fragments":["not","not"]},{"Key":"it succeeds","Fragments":["the"]},{"Key":"succeeds the","Fragments":["tests."]},{"Key":"the tests.","Fragments":["Does","They","I","It","Did","Did","Now","You","I","It","As","It","I'm","Note"]},{"Key":"tests. Does","Fragments":["it"]},{"Key":"Does it","Fragments":["really","count","provide"]},{"Key":"it really","Fragments":["work","won't","good","easier","clear","is","make?","fits","calculates"]},{"Key":"really work","Fragments":["as","100%."]},{"Key":"work as","Fragments":["intended","well.","overload","you","expected."]},{"Key":"as intended","Fragments":["on"]},{"Key":"intended on","Fragments":["the"]},{"Key":"the emptry","Fragments":["string"]},{"Key":"emptry string","Fragments":["and"]},{"Key":"string and","Fragments":["the","moved","char*,","a","after","instead","preallocate","the","just","assign","then","comparing","returned","we","to","just","just","then","with","we","make","trying","checking","check","then","find","process","sticks","process","sticks"]},{"Key":"the \"","Fragments":["\""]},{"Key":"\" \"","Fragments":["inputs?","is"]},{"Key":"\" inputs?","Fragments":["What"]},{"Key":"inputs? What","Fragments":["is"]},{"Key":"What is","Fragments":["the","this","CleanUp,","`extern`","the","the","the","the","wrong"]},{"Key":"the run-time","Fragments":["complexity"]},{"Key":"run-time complexity","Fragments":["and"]},{"Key":"complexity and","Fragments":["what","memory"]},{"Key":"what can","Fragments":["you"]},{"Key":"can you","Fragments":["do","implement","imagine","imagine","imagine","imagine","imagine","do","explain","replace","explain","explain"]},{"Key":"do to","Fragments":["improve","improve","get","avoid","get","test"]},{"Key":"to improve","Fragments":["it?","it.","this","my","readability","readability.","the","readability","in","my","readability.","the","it.","this:"]},{"Key":"The range","Fragments":["for"]},{"Key":"range for","Fragments":["was","loops,","loop,","would","loop.","syntax","loops","loop","in","will","will","loop","loop.","loop"]},{"Key":"for was","Fragments":["a"]},{"Key":"a really","Fragments":["nice","stupid","clear,","good","interesting","good","dumb","elegant","clever"]},{"Key":"really nice","Fragments":["new","now.","that"]},{"Key":"nice new","Fragments":["thing"]},{"Key":"new thing","Fragments":["in"]},{"Key":"thing in","Fragments":["C++11.","a","my","a"]},{"Key":"in C++11.","Fragments":[":)","It's","For","The","It","ie"]},{"Key":"As to","Fragments":["your","returning","why"]},{"Key":"your question","Fragments":["about","from",":)","I"]},{"Key":"question about","Fragments":["the","const","lines"]},{"Key":"empty string,","Fragments":["it","you","so","not","because","this"]},{"Key":"string, it","Fragments":["handles"]},{"Key":"it handles","Fragments":["them"]},{"Key":"handles them","Fragments":["in"]},{"Key":"them in","Fragments":["the","the","a","the","any","`.cpp`","`.h`.","from","a","a","the","the","`bob::answer`","the","C++,","your","a","the","some","another","the","a","order"]},{"Key":"second else","Fragments":["if,"]},{"Key":"else if,","Fragments":["by"]},{"Key":"if, by","Fragments":["the"]},{"Key":"by the","Fragments":["function","thousands","*Readme*","Song","test","fact","way.","way,","way","tokenizer.","proper","tests,","compiler","way,","tests.","tests,","README…","way,","programme","C++","tests","standard,","function","test","dicussion","type","same","standard","shortest","algorithm","tests","way.","standard),","compiler,","response","shortest","test","tests,","way.","C++11","tests","regex","way:","next","test","boost","word","constructor.","```words()```","exercises.","colliding","\"auto\""]},{"Key":"function silencep,","Fragments":["which"]},{"Key":"silencep, which","Fragments":["is"]},{"Key":"is basically","Fragments":["just","a","for","the","the","how"]},{"Key":"basically just","Fragments":["a","threw"]},{"Key":"just a","Fragments":["synonym","choice","personal","coincidence","thing","function,","bit","single","string","benign","`char`?","std::string","std::string","simple","`namespace`.","single","tool","different","trivial","namespace","comment?","quirk","matter","good","matter","couple","fun","habit,","couple"]},{"Key":"a synonym","Fragments":["for"]},{"Key":"synonym for","Fragments":["word.empty()."]},{"Key":"for word.empty().","Fragments":["By"]},{"Key":"word.empty(). By","Fragments":["stripping"]},{"Key":"By stripping","Fragments":["the"]},{"Key":"stripping the","Fragments":["whitespace"]},{"Key":"the whitespace","Fragments":["first,","so","input"]},{"Key":"whitespace first,","Fragments":["the"]},{"Key":"first, the","Fragments":["case"]},{"Key":"the case","Fragments":["\"","that","the","of","of","conversion,","of","out","of","with","here.","maybe","all","of","of","it","of","either","where","where","where","I","individually","of","of","of","of","of","where"]},{"Key":"case \"","Fragments":["\""]},{"Key":"\" is","Fragments":["handled"]},{"Key":"is handled","Fragments":["as","gracefully","by"]},{"Key":"handled as","Fragments":["well,","one"]},{"Key":"since this","Fragments":["will","apparently","code","isn't","is","is","was","is"]},{"Key":"will yield","Fragments":["the"]},{"Key":"yield the","Fragments":["empty"]},{"Key":"for run-time","Fragments":["complexity,"]},{"Key":"run-time complexity,","Fragments":["I"]},{"Key":"complexity, I","Fragments":["haven't"]},{"Key":"I haven't","Fragments":["analysed","written","done","taken","taken","thought","done","gotten","analyzed","found","spend","used","seen.","had"]},{"Key":"haven't analysed","Fragments":["that."]},{"Key":"analysed that.","Fragments":["I'll"]},{"Key":"that. I'll","Fragments":["take","solve","try"]},{"Key":"I'll take","Fragments":["some","your","a"]},{"Key":"take some","Fragments":["time"]},{"Key":"some time","Fragments":["to","studying","to","playing"]},{"Key":"to think","Fragments":["about","about","outside","about","about","about","that's","a","about","of","more","of","in","of","about","that","about.","to","about","more"]},{"Key":"think about","Fragments":["that","the","when","upfront","would","the","handling","what","that,","the","the","what","returning","that","it","memoization),","the","names","a","efficiency.","whether","a","the","how","it,","every"]},{"Key":"that and","Fragments":["get","have","leave","figured"]},{"Key":"and get","Fragments":["back","the","rid","to","both","a","rid"]},{"Key":"get back","Fragments":["to","in","in"]},{"Key":"to you.","Fragments":["Thanks!","It"]},{"Key":"I'm having","Fragments":["problem","some","trouble"]},{"Key":"having problem","Fragments":["compiling"]},{"Key":"problem compiling","Fragments":["the"]},{"Key":"compiling the","Fragments":["bob"]},{"Key":"the bob","Fragments":["test:","implementation.","namespace","namespace,","namespace","namespace,","function","class","problem."]},{"Key":"bob test:","Fragments":["https://github.com/exercism/xcpp/issues/37"]},{"Key":" Commented","Fragments":["code"]},{"Key":"Commented code","Fragments":["removed."]},{"Key":"It took","Fragments":["me","me","me","me","me","me","me"]},{"Key":"took me","Fragments":["a","a","a","so","a","a","considerably","forever","about"]},{"Key":"me a","Fragments":["while","minute...","while","`char`.","'.'","bit,","while","link,","while","long","feeling","bit"]},{"Key":"while to","Fragments":["understand","figure","figure","figure","understand"]},{"Key":"to understand","Fragments":["TDD","functions.","how","why","if","that","the","w/o","what","at","this","your","what","some","solution.","the","than","the","and"]},{"Key":"understand TDD","Fragments":["but"]},{"Key":"TDD but","Fragments":["i"]},{"Key":"but i","Fragments":["finally","did"]},{"Key":"i finally","Fragments":["did"]},{"Key":"finally did","Fragments":["it."]},{"Key":"I'm planning","Fragments":["on"]},{"Key":"planning on","Fragments":["coming"]},{"Key":"on coming","Fragments":["back"]},{"Key":"coming back","Fragments":["to","to"]},{"Key":"to this","Fragments":["to","code","question","to","one.","workflow","iteration.","solution.","exercise","would","one:","header","problem,","one.","example","site,","because","kind","bound.","string"]},{"Key":"to refactor--I'm","Fragments":["just"]},{"Key":"refactor--I'm just","Fragments":["tired"]},{"Key":"just tired","Fragments":["of"]},{"Key":"tired of","Fragments":["this","seeing"]},{"Key":"one and","Fragments":["want"]},{"Key":"and want","Fragments":["to","hidden/private","to"]},{"Key":"to move","Fragments":["on/solidify","it","that","fact","everything","the","the","stuff","those","testing","your","your","the","the","the"]},{"Key":"move on/solidify","Fragments":["my"]},{"Key":"on/solidify my","Fragments":["understanding"]},{"Key":"my understanding","Fragments":["of","of","goes."]},{"Key":"understanding of","Fragments":["some","OO","input","the","exactly"]},{"Key":"STL libraries","Fragments":["with","being"]},{"Key":"libraries with","Fragments":["another"]},{"Key":"with another","Fragments":["problem.","input","function"]},{"Key":"another problem.","Fragments":["I"]},{"Key":"I learned","Fragments":["how","the","about","C++","some"]},{"Key":"learned how","Fragments":["to"]},{"Key":"a fair","Fragments":["amount","cop","point,"]},{"Key":"fair amount","Fragments":["of"]},{"Key":"amount of","Fragments":["`\u003calgorithm\u003e`","time","code","string","typing","code","work.","letters","data","exception-case","whitespace,","time","checks","characters","possible","possible","data","data","possible","possible","the","the"]},{"Key":"of `\u003calgorithm\u003e`","Fragments":["while"]},{"Key":"`\u003calgorithm\u003e` while","Fragments":["I"]},{"Key":"while I","Fragments":["was","use","do","was"]},{"Key":"was figuring","Fragments":["this"]},{"Key":"figuring this","Fragments":["out,"]},{"Key":"this out,","Fragments":["and"]},{"Key":"out, and","Fragments":["I"]},{"Key":"the split","Fragments":["function"]},{"Key":"split function","Fragments":["would"]},{"Key":"function would","Fragments":["probably","probably","look","make","return","be"]},{"Key":"would probably","Fragments":["benefit","be","be","ruin","be","do","(IMO)","find","be","look","do","be","be","be","benefit","declare","generate"]},{"Key":"probably benefit","Fragments":["from","from"]},{"Key":"benefit from","Fragments":["that.","using","std::any_of.","the","the","a"]},{"Key":" I've","Fragments":["also","posted","used","actually","often","commented","been","forgotten","tried","dabbled","tried","decided","certainly","tried","allready","removed","only","just","seen","update","seen"]},{"Key":"I've also","Fragments":["been","definitely","seen","had","factored"]},{"Key":"also been","Fragments":["ignoring","included."]},{"Key":"been ignoring","Fragments":["Boost"]},{"Key":"ignoring Boost","Fragments":["(I'd"]},{"Key":"Boost (I'd","Fragments":["like"]},{"Key":"(I'd like","Fragments":["to"]},{"Key":"learn it","Fragments":["better"]},{"Key":"it better","Fragments":["at","to","to","to","would"]},{"Key":"better at","Fragments":["some"]},{"Key":"at some","Fragments":["point,","point).","point.","of","point","documentation","other","point","of"]},{"Key":"some point,","Fragments":["it's"]},{"Key":"point, it's","Fragments":["just"]},{"Key":"just generally","Fragments":["frowned"]},{"Key":"generally frowned","Fragments":["upon"]},{"Key":"frowned upon","Fragments":["at"]},{"Key":"upon at","Fragments":["my"]},{"Key":"my workplace)","Fragments":["and"]},{"Key":"workplace) and","Fragments":["coming"]},{"Key":"and coming","Fragments":["from"]},{"Key":"a scripting","Fragments":["background,"]},{"Key":"scripting background,","Fragments":["`\u003cregex\u003e`"]},{"Key":"background, `\u003cregex\u003e`","Fragments":["feels"]},{"Key":"`\u003cregex\u003e` feels","Fragments":["like"]},{"Key":"like cheating","Fragments":["(although","to"]},{"Key":"cheating (although","Fragments":["I'll"]},{"Key":"(although I'll","Fragments":["probably"]},{"Key":"I'll probably","Fragments":["switch","tweak"]},{"Key":"probably switch","Fragments":["to"]},{"Key":"switch to","Fragments":["those","both","```const","some","some","isalpha","just","a"]},{"Key":"to those","Fragments":["at","unfamiliar","who","that"]},{"Key":"those at","Fragments":["some"]},{"Key":"the only","Fragments":["method","suggestion","thing","thing","thing","reason","legal","part","different","real","exception).","thing","bit","thing","way","thing","way","thing","other","thing"]},{"Key":"only method","Fragments":["being"]},{"Key":"method being","Fragments":["tested"]},{"Key":"being tested","Fragments":["is","for."]},{"Key":"tested is","Fragments":["`hey()`,"]},{"Key":"is `hey()`,","Fragments":["that"]},{"Key":"`hey()`, that","Fragments":["suggests"]},{"Key":"that suggests","Fragments":["that"]},{"Key":"suggests that","Fragments":["only"]},{"Key":"that only","Fragments":["`hey()`","returns","work","makes","erases","containers","gets","has","implements","runs"]},{"Key":"only `hey()`","Fragments":["should"]},{"Key":"`hey()` should","Fragments":["be"]},{"Key":"be in","Fragments":["the","cpp","the","the","order.","a","the","the","the","a","one","a","a","the","the","another","the","one","the","the","a","the","the","contiguous","a","a","this","global","the","response","sync","about","order."]},{"Key":"public API.","Fragments":["For"]},{"Key":"API. For","Fragments":["instance"]},{"Key":"For instance","Fragments":["would","there"]},{"Key":"instance would","Fragments":["users"]},{"Key":"would users","Fragments":["of"]},{"Key":"users of","Fragments":["bob","my","my","your","that"]},{"Key":"of bob","Fragments":["really","should"]},{"Key":"bob really","Fragments":["want"]},{"Key":"call `isWhiteSpace()`","Fragments":["etc?"]},{"Key":"are correct,","Fragments":["there","removing"]},{"Key":"correct, there","Fragments":["is."]},{"Key":" @vergie","Fragments":["Thanks"]},{"Key":"@vergie Thanks","Fragments":["for"]},{"Key":"your comment.","Fragments":["That","I'm"]},{"Key":"comment. That","Fragments":["makes"]},{"Key":"makes sense(I've","Fragments":["been"]},{"Key":"sense(I've been","Fragments":["coding"]},{"Key":"been coding","Fragments":["for"]},{"Key":"coding for","Fragments":["6"]},{"Key":"for 6","Fragments":["months"]},{"Key":"6 months","Fragments":["and"]},{"Key":"months and","Fragments":["i"]},{"Key":"and i","Fragments":["couldn't","am"]},{"Key":"i couldn't","Fragments":["figure","figure"]},{"Key":"couldn't figure","Fragments":["out","out","one","out","out"]},{"Key":"figure out","Fragments":["why","how.","the","how","what","how","what","what","an","how","the","exactly","whether","the","what","why,","what","where","how","how","how"]},{"Key":"out why","Fragments":["do","```m_count[nuc]```"]},{"Key":"do we","Fragments":["use","need"]},{"Key":"we use","Fragments":["private","them","the","the"]},{"Key":"use private","Fragments":["or"]},{"Key":"private or","Fragments":["public"]},{"Key":"or public","Fragments":["members"]},{"Key":"public members","Fragments":["until"]},{"Key":"members until","Fragments":["now)."]},{"Key":"your explanation,","Fragments":["I"]},{"Key":"explanation, I","Fragments":["was"]},{"Key":"was still","Fragments":["thinking","working"]},{"Key":"still thinking","Fragments":["in"]},{"Key":"thinking in","Fragments":["C."]},{"Key":"in C.","Fragments":["That","It's","I"]},{"Key":"C. That","Fragments":["should"]},{"Key":"That should","Fragments":["corrected"]},{"Key":"should corrected","Fragments":["now."]},{"Key":" There's","Fragments":["something","a","a","no","absolutely","also","not","quite","really"]},{"Key":"There's something","Fragments":["weird"]},{"Key":"something weird","Fragments":["in"]},{"Key":"weird in","Fragments":["how"]},{"Key":"in how","Fragments":["tabs"]},{"Key":"how tabs","Fragments":["translate..."]},{"Key":"tabs translate...","Fragments":["It's"]},{"Key":"translate... It's","Fragments":["not"]},{"Key":"It's not","Fragments":["the","just","just","the","old.","good","typesafe.","valuesafe","descriptive","really","in","one","Knuth","clear","needed","for"]},{"Key":"way it","Fragments":["looks","is","is","used","converts","expects","currently","also"]},{"Key":"looks in","Fragments":["my"]},{"Key":"I fell","Fragments":["in","back"]},{"Key":"fell in","Fragments":["love"]},{"Key":"in love","Fragments":["with"]},{"Key":"love with","Fragments":["stringstreams,"]},{"Key":"with stringstreams,","Fragments":["though."]},{"Key":"stringstreams, though.","Fragments":[":)"]},{"Key":"in future,","Fragments":["please"]},{"Key":"future, please","Fragments":["include"]},{"Key":"please include","Fragments":["the"]},{"Key":" `exercism","Fragments":["s","s","s","s"]},{"Key":"`exercism s","Fragments":["beer_song.h","space_age.h","nucleotide_count.h","hamming.{cpp,h}`.","hamming.cpp","word_count.cpp","etl.cpp"]},{"Key":"s beer_song.h","Fragments":["beer_song.cpp`"]},{"Key":"most optimised","Fragments":["code"]},{"Key":"optimised code","Fragments":["(pass"]},{"Key":"code (pass","Fragments":["by"]},{"Key":"(pass by","Fragments":["value)"]},{"Key":"by value)","Fragments":["and"]},{"Key":"value) and","Fragments":["has"]},{"Key":"has a","Fragments":["heavy","larger","worst-case","better","better","point.","couple","to_lower","value","very","templated","data()","small","runtime","slightly","very","response::QUESTION","good","default","better","zero","prefetcher","decent","trailing","glaring","defined","question","back()-method,","tolower(char)","min","corresponding","corresponding","O(word_len*log2(word_len)","trim()","spelling","default","function","check","lot","bug","lot","more","good","look","single"]},{"Key":"a heavy","Fragments":["use"]},{"Key":"heavy use","Fragments":["of","of","of"]},{"Key":"of boost,","Fragments":["but"]},{"Key":"boost, but","Fragments":["didn't","there's","it"]},{"Key":"but didn't","Fragments":["feel","really","due","like"]},{"Key":"didn't feel","Fragments":["like","like","like"]},{"Key":"like boost","Fragments":["was"]},{"Key":"boost was","Fragments":["a"]},{"Key":"cases requiring","Fragments":["it"]},{"Key":"requiring it","Fragments":["anyway."]},{"Key":"Also mixed","Fragments":["boost"]},{"Key":"mixed boost","Fragments":["and"]},{"Key":"boost and","Fragments":["simple","to","std","go"]},{"Key":"and simple","Fragments":["STL","compiler","C++","implementation","but","to","solutions"]},{"Key":"simple STL","Fragments":["with"]},{"Key":"STL with","Fragments":["excluding"]},{"Key":"with excluding","Fragments":["ends_with"]},{"Key":"excluding ends_with","Fragments":["from"]},{"Key":"ends_with from","Fragments":["boost."]},{"Key":"I started","Fragments":["off","down","down","this","playing","with","using","reviewing","off"]},{"Key":"started off","Fragments":["with","the","with"]},{"Key":"off with","Fragments":["this","simple"]},{"Key":"with this","Fragments":["function","much","solution","simple","problem","particular","(and","implementation,","sites","exercise","one,","design.","implementation","one.","problem","code","one","problem"]},{"Key":"this function","Fragments":["as","deserves","does","w/o","to","to","is","should","that","should","if","to","will","is"]},{"Key":"the business-logic","Fragments":["of"]},{"Key":"business-logic of","Fragments":["testing"]},{"Key":"of testing","Fragments":["conditions","for","for"]},{"Key":"testing conditions","Fragments":["to"]},{"Key":"conditions to","Fragments":["the"]},{"Key":"the candidate","Fragments":["words","list?","list","'abc'."]},{"Key":"candidate words","Fragments":["in"]},{"Key":"words in","Fragments":["the","```cipher_out```),","a","the"]},{"Key":"the sentences","Fragments":["as"]},{"Key":"sentences as","Fragments":["much"]},{"Key":"as much","Fragments":["as","as","as","sense","of","c++11","as"]},{"Key":"much as","Fragments":["possible.","StringBuilder.","you","possible.","possible"]},{"Key":"as possible.","Fragments":["Therefore,","const","That's","So","Whilst","That","The","Code's"]},{"Key":"possible. Therefore,","Fragments":["I"]},{"Key":"Therefore, I","Fragments":["delegated"]},{"Key":"I delegated","Fragments":["the"]},{"Key":"delegated the","Fragments":["individual"]},{"Key":"the individual","Fragments":["checks","characters"]},{"Key":"individual checks","Fragments":["and"]},{"Key":"checks and","Fragments":["string","omit"]},{"Key":"and string","Fragments":["to"]},{"Key":"the Boost","Fragments":["library","libraries,","requirement","requirement.","dependency","regex","Regex"]},{"Key":"Boost library","Fragments":["whenever","dependency"]},{"Key":"library whenever","Fragments":["I"]},{"Key":"whenever I","Fragments":["can."]},{"Key":"I can.","Fragments":["This","I"]},{"Key":"can. This","Fragments":["ensures"]},{"Key":"This ensures","Fragments":["that"]},{"Key":"ensures that","Fragments":["I","a"]},{"Key":"write my","Fragments":["own","own,","own,","own","own"]},{"Key":"my own","Fragments":["implementation","test","source","as","string","just","compare","implementation.","UnaryPredicate","```pow```","app.","implementation","convenience,","projects.","code,","submission","isupper(),","trim.","version","code,","edification,"]},{"Key":"own implementation","Fragments":["of","of","as"]},{"Key":"implementation of","Fragments":["those","the","which","what","wc_shift.","isShouted","`map`","is_a_yell","a","`std::accumulate()`","string","`has_letter`","the","is_upper","`hey`.","getLowerCase","the","std::allocator","isCaps,","GetNextWord()","isCaps,","`removeSpaces`.","the"]},{"Key":"of those","Fragments":["checks","already","structures.","cases","numbers","who","when","strings","functions,","methods.","words","pointless","cases,","changes!","to"]},{"Key":"those checks","Fragments":["when"]},{"Key":"checks when","Fragments":["very"]},{"Key":"when very","Fragments":["capable"]},{"Key":"very capable","Fragments":["implementations"]},{"Key":"capable implementations","Fragments":["of"]},{"Key":"implementations of","Fragments":["those","uint16_t","yelling"]},{"Key":"those already","Fragments":["exist."]},{"Key":"seems pretty","Fragments":["good.","neat.","different"]},{"Key":"that you're","Fragments":["making","propagating","not","using","not","taking","passing","doing","not","not"]},{"Key":"you're making","Fragments":["good"]},{"Key":"making good","Fragments":["use"]},{"Key":"good use","Fragments":["of","of","of","of","of","of"]},{"Key":"only suggestion","Fragments":["that","is","would"]},{"Key":"suggestion that","Fragments":["I"]},{"Key":"have would","Fragments":["be"]},{"Key":"be that","Fragments":["you","if","when","the","the","way","you"]},{"Key":"can avoid","Fragments":["another","yet","copy","doing","doing"]},{"Key":"avoid another","Fragments":["map"]},{"Key":"another map","Fragments":["lookup"]},{"Key":"map lookup","Fragments":["by"]},{"Key":"lookup by","Fragments":["reusing"]},{"Key":"by reusing","Fragments":["the"]},{"Key":"reusing the","Fragments":["iterator"]},{"Key":"iterator returned","Fragments":["by","by"]},{"Key":"returned by","Fragments":["std::map::find().","the","`begin()`","your"]},{"Key":"by std::map::find().","Fragments":["If"]},{"Key":"std::map::find(). If","Fragments":["that"]},{"Key":"If that","Fragments":["iterator","happens,","pointer","happens,","were"]},{"Key":"that iterator","Fragments":["isn't"]},{"Key":"iterator isn't","Fragments":["equal"]},{"Key":"isn't equal","Fragments":["to"]},{"Key":"to mapWordCount.end()","Fragments":["you"]},{"Key":"mapWordCount.end() you","Fragments":["can"]},{"Key":"can just","Fragments":["increment","`||`","suggest","go","define","check","do","use","do","include","use","return","use","tell","use","use"]},{"Key":"just increment","Fragments":["iter-\u003esecond."]},{"Key":" huh!,","Fragments":["turns"]},{"Key":"huh!, turns","Fragments":["out"]},{"Key":"turns out","Fragments":["I"]},{"Key":"out I","Fragments":["made"]},{"Key":"it look","Fragments":["easy,","a","that"]},{"Key":"look easy,","Fragments":["but"]},{"Key":"easy, but","Fragments":["there's"]},{"Key":"but there's","Fragments":["bugs","a","more","a","other","some","something"]},{"Key":"there's bugs","Fragments":["in"]},{"Key":"bugs in","Fragments":["it!"]},{"Key":" fixed","Fragments":["case"]},{"Key":"fixed case","Fragments":["sensitive"]},{"Key":"case sensitive","Fragments":["behaviour","checking"]},{"Key":"First working","Fragments":["version,"]},{"Key":"working version,","Fragments":["to"]},{"Key":"version, to","Fragments":["dos:"]},{"Key":"- use","Fragments":["std::string","boost's","an"]},{"Key":"use std::string","Fragments":["instead","and","as","as","*back()*","\u0026"]},{"Key":"std::string instead","Fragments":["of","of","of","of","of","of"]},{"Key":"of cstyle","Fragments":["strings"]},{"Key":"- move","Fragments":["the","some"]},{"Key":"move the","Fragments":["checks","logic","`using`s","creation","```#include","`using","string","definition","class","length","sorted","`using`","sorting","factorization"]},{"Key":"the checks","Fragments":["to","and","can","for","within","for"]},{"Key":"to functions","Fragments":["to"]},{"Key":"functions to","Fragments":["make","references","give","refer","avoid","replace","analyze","passing","make","make","prevent","classify","the","an","aid","do","make","std::string"]},{"Key":"whole thing","Fragments":["more","in","would","is","is","to","in"]},{"Key":"thing more","Fragments":["readable"]},{"Key":"The hey","Fragments":["function","function"]},{"Key":"hey function","Fragments":["is","with","does","could","looks","must","for","difficult"]},{"Key":"very succinct,","Fragments":["that's"]},{"Key":"succinct, that's","Fragments":["cool,"]},{"Key":"that's cool,","Fragments":["it"]},{"Key":"cool, it","Fragments":["almost"]},{"Key":"it almost","Fragments":["reads","a"]},{"Key":"almost reads","Fragments":["like"]},{"Key":"reads like","Fragments":["the","a"]},{"Key":"the beginning","Fragments":["of","of","characters","([C++","or","to","of","of","of","I","of","would","would","and","and","and","of"]},{"Key":"beginning of","Fragments":["the","the","a","your","those","a","the","alphanumerical","a"]},{"Key":"The helper","Fragments":["functions,","functions","functions"]},{"Key":"helper functions,","Fragments":["as","with","each"]},{"Key":"functions, as","Fragments":["they"]},{"Key":"as they","Fragments":["are","were","do","are","modify","reveal","may","were","call","are"]},{"Key":"are not","Fragments":["described","consistent","linear","validated.","self","identical","what","just","dropped).","multiples,","possible.","compliant.","allowed","reliable.","part","recommended","quite","going","needed","suitable","going","repeated.","to","yelling.","going","clonable","there.","removing","equal","equal.","equal"]},{"Key":"not described","Fragments":["as"]},{"Key":"described as","Fragments":["part"]},{"Key":"as part","Fragments":["of","of","of"]},{"Key":"the interface,","Fragments":["could","and","your"]},{"Key":"interface, could","Fragments":["go"]},{"Key":"could go","Fragments":["in","either","back,","with"]},{"Key":"go in","Fragments":["an","and"]},{"Key":"in an","Fragments":["anonymous","anonymous","unoptimized","unpredictable","anonymous","anonymous","anonymous","anonymous","anonymous","anonymous","interview","anonymous","explanation","anonymous","efficient","anonymous","anonymous","anonymous","anonymous","anonymous","exclamation","implementation","inner","anonymous","exclamation","anonymous","onlinecompiler","array;","early","else","exclamation","assignment"]},{"Key":"namespace outside","Fragments":["of"]},{"Key":"outside of","Fragments":["`bob`.","it.","the","constructor,","construction.","the","the","the","`std`","the","your","the","its","construction","your","the","the","class","debug","the","our","the","the","its"]},{"Key":" With","Fragments":["the","regards","member","\u003ccode\u003e\u0026\u0026\u003c/code\u003e,","*zero","the","`'\\0'`","C++11","all","const:","anonymous","classes,","C++11","that"]},{"Key":"With the","Fragments":["for","test","original","C++11's","initialization"]},{"Key":"for loops","Fragments":["in","and","by","with","for","that","(as","(`for","with","to","lower","so","don't","seems","too,","before"]},{"Key":"loops in","Fragments":["`isNumber`","c++,"]},{"Key":"in `isNumber`","Fragments":["and"]},{"Key":"`isNumber` and","Fragments":["`isUpper`,"]},{"Key":"and `isUpper`,","Fragments":["you"]},{"Key":"`isUpper`, you","Fragments":["could"]},{"Key":"use range","Fragments":["based","for","for","for:"]},{"Key":"range based","Fragments":["for","for","for","loops","for","for","for","ones","for","for","for","list","loop","loops","for","for"]},{"Key":"based for","Fragments":["loops","loop","loops(didn't","is","loop.","loops,","loop?","loops","loops","loops","loop.","loop"]},{"Key":"loops and","Fragments":["increase","complex"]},{"Key":"and increase","Fragments":["readability."]},{"Key":"increase readability.","Fragments":["Also,"]},{"Key":"readability. Also,","Fragments":["calling"]},{"Key":"Also, calling","Fragments":["those"]},{"Key":"calling those","Fragments":["two"]},{"Key":"those two","Fragments":["will"]},{"Key":"two will","Fragments":["iterate"]},{"Key":"will iterate","Fragments":["twice","soon..."]},{"Key":"iterate twice","Fragments":["when"]},{"Key":"twice when","Fragments":["you","you"]},{"Key":"in one","Fragments":["go.","pass.","branch","solution.","file.","place","place.","buffer","allocation.","of","place...","place","place.","big","place.","place","case","of","loop.","file,","pass","of","go","line","file","file","iteration","file","pass,","of"]},{"Key":"The condition","Fragments":["for","that"]},{"Key":"condition for","Fragments":["a","this"]},{"Key":"a question","Fragments":["is","mark,","mark","AND","mark.","of","with","mark.","instead.","because","mark","mark,","mark","mark","mark.","mark","as","contains","mark.","and","mark,","mark","like:","passed"]},{"Key":"question is","Fragments":["too","how","clearly","what","unanswered","are","are","empty."]},{"Key":"is too","Fragments":["simple,","small.","darn","much","long"]},{"Key":"too simple,","Fragments":["how"]},{"Key":"simple, how","Fragments":["does"]},{"Key":"how does","Fragments":["it","this","it","c++"]},{"Key":"does it","Fragments":["pass","accept","scale?","work?","works","behave","know","need","really","return","lead"]},{"Key":"it pass","Fragments":["the","two"]},{"Key":"test with","Fragments":["trailing","`gdb`"]},{"Key":"with trailing","Fragments":["space?","whitespace."]},{"Key":" When","Fragments":["you","I","it","it","I","I","you","I","we","we","I","I'm","I"]},{"Key":"When you","Fragments":["want","pass","say","pass","take","see"]},{"Key":"is empty,","Fragments":["it"]},{"Key":"empty, it","Fragments":["is"]},{"Key":"is better","Fragments":["to","than","code","to","than","than","than","to","to","to","code!).","than","to","than","than","and","than","C++","to","idea?","than"]},{"Key":"be explicit","Fragments":["and","about","with"]},{"Key":"explicit and","Fragments":["do","correct."]},{"Key":"Why is","Fragments":["this","the","being","suggestion","this"]},{"Key":"is this","Fragments":["a","handy","string?\"","code","regex","in","in"]},{"Key":"this a","Fragments":["cpp","lot.","go","more","while","little","heck","sin.","function."]},{"Key":"a cpp","Fragments":["file","file","file","file,","file"]},{"Key":"file and","Fragments":["what","reading","implement","not","in","run","noticed"]},{"Key":"what are","Fragments":["the","you","you","some","objects.","you"]},{"Key":"the contents","Fragments":["of","of","of","of","of"]},{"Key":"contents of","Fragments":["the","the","```int","two","this","bob.h","```input```."]},{"Key":"Nice hey","Fragments":["function"]},{"Key":"with most","Fragments":["of"]},{"Key":"the heavy","Fragments":["stuff","lifting"]},{"Key":"heavy stuff","Fragments":["abstracted"]},{"Key":"stuff abstracted","Fragments":["away,"]},{"Key":"abstracted away,","Fragments":["reads"]},{"Key":"away, reads","Fragments":["well."]},{"Key":"function like","Fragments":["`hey`,","`checkEmpty`"]},{"Key":"like `hey`,","Fragments":["where"]},{"Key":"`hey`, where","Fragments":["we"]},{"Key":"where we","Fragments":["want","start"]},{"Key":"we want","Fragments":["to","to","those"]},{"Key":"to react","Fragments":["to"]},{"Key":"react to","Fragments":["a","\"4?\""]},{"Key":"a string,","Fragments":["and","that","I","you","which","you"]},{"Key":"string, and","Fragments":["not","then","the","then"]},{"Key":"not transform","Fragments":["it,"]},{"Key":"transform it,","Fragments":["one"]},{"Key":"it, one","Fragments":["should"]},{"Key":"one should","Fragments":["pass","to","look","remember","generally","create","maybe"]},{"Key":"pass a","Fragments":["const","the","string","string","memory","char*.","delimited","reference","custom"]},{"Key":"a string.","Fragments":["Also,","Also","And"]},{"Key":"string. Also,","Fragments":["the"]},{"Key":"Also, the","Fragments":["return","static","focus","code","test","only"]},{"Key":"return type,","Fragments":["since","but"]},{"Key":"type, since","Fragments":["you"]},{"Key":"are returning","Fragments":["by","``this``","now."]},{"Key":"returning by","Fragments":["value,"]},{"Key":"value, should","Fragments":["not"]},{"Key":"be const,","Fragments":["you","since","which"]},{"Key":"const, you","Fragments":["don't"]},{"Key":"really care","Fragments":["what","if","about"]},{"Key":"care what","Fragments":["the","it"]},{"Key":"the caller","Fragments":["does","wants","that","who","shouldn't","can","that","will","is","can"]},{"Key":"caller does","Fragments":["with","decide"]},{"Key":"does with","Fragments":["it."]},{"Key":"with it.","Fragments":["This","You","In","Prefixing","The","I","The"]},{"Key":"be your","Fragments":["signature:"]},{"Key":" static","Fragments":["string","std::regex","std::regex","std::string"]},{"Key":"static string","Fragments":["hey(const","for","hey(string"]},{"Key":"string hey(const","Fragments":["string\u0026","string\u0026"]},{"Key":"hey(const string\u0026","Fragments":["phrase)","input)`","msg);`"]},{"Key":" Multiple","Fragments":["statements"]},{"Key":"Multiple statements","Fragments":["in"]},{"Key":"line, such","Fragments":["as:"]},{"Key":" if(islower(phrase[i]))","Fragments":["{shout"]},{"Key":"if(islower(phrase[i])) {shout","Fragments":["="]},{"Key":"{shout =","Fragments":["false;"]},{"Key":" are","Fragments":["really","different"]},{"Key":"are really","Fragments":["easy","hunting","conflicted","sufficient"]},{"Key":"really easy","Fragments":["to"]},{"Key":"to miss","Fragments":["and"]},{"Key":"miss and","Fragments":["are"]},{"Key":"and are","Fragments":["not","of","implemented","replaced","reusable","just"]},{"Key":"not consistent","Fragments":["with"]},{"Key":"consistent with","Fragments":["the","the"]},{"Key":"the surrounding","Fragments":["code."]},{"Key":"surrounding code.","Fragments":["Avoid."]},{"Key":"are iterating","Fragments":["on","`strand`","through","over","the","through"]},{"Key":"iterating on","Fragments":["the"]},{"Key":"string with","Fragments":["its","single/multiple","index.","boost...","spaces","a","only","upper,","your","that"]},{"Key":"with its","Fragments":["indexes,","return","length","own"]},{"Key":"its indexes,","Fragments":["old"]},{"Key":"indexes, old","Fragments":["style."]},{"Key":"old style.","Fragments":["Today,"]},{"Key":"style. Today,","Fragments":["you"]},{"Key":"Today, you","Fragments":["can"]},{"Key":"can do","Fragments":["this:","what","with","this","mathematically","all","better.","something","all","more","even","good.","it","with","that","that","that","a","of","away","the","it!"]},{"Key":"for (const","Fragments":["auto\u0026","char\u0026","auto","char","auto\u0026","auto\u0026","auto\u0026"]},{"Key":"(const auto\u0026","Fragments":["myChar","value","c","word"]},{"Key":"auto\u0026 myChar","Fragments":[":"]},{"Key":"myChar :","Fragments":["phrase)"]},{"Key":"should *consistently*","Fragments":["use"]},{"Key":"*consistently* use","Fragments":["braces"]},{"Key":"use braces","Fragments":["around","around"]},{"Key":"braces around","Fragments":["a","the","single"]},{"Key":"around a","Fragments":["single","single","bit","bit","bit"]},{"Key":"single statement","Fragments":["in","if-elses."]},{"Key":"statement in","Fragments":["a","that","the","the","place.","`hey`."]},{"Key":"a `if`,","Fragments":["or"]},{"Key":"`if`, or","Fragments":["not."]},{"Key":"or not.","Fragments":["But","Right","A","Most","A","It","But"]},{"Key":"not. But","Fragments":["in","who","the"]},{"Key":"this code","Fragments":["there","is","and","i","will","as","or","above","is","nothing","or","is","doing\"","seems","is.","now,","lucid","is","before","`for","is","even","in","could","as","adheres","where","further.","I","properly","interesting","is"]},{"Key":"code there","Fragments":["is"]},{"Key":"a mix","Fragments":["of","of"]},{"Key":"mix of","Fragments":["both.","old-school"]},{"Key":"of both.","Fragments":["I"]},{"Key":"both. I","Fragments":["recommend"]},{"Key":"I recommend","Fragments":["that","it","following"]},{"Key":"recommend that","Fragments":["you","you"]},{"Key":"you indeed","Fragments":["do"]},{"Key":"indeed do","Fragments":["it."]},{"Key":"In a","Fragments":["function","function","lot","sense","constructor","library,"]},{"Key":"like `checkEmpty`","Fragments":["you"]},{"Key":"`checkEmpty` you","Fragments":["don't"]},{"Key":"really need","Fragments":["a","to","boost-lib","boost-lib","boost-lib","boost-lib","boost-lib","boost-lib","boost-lib","boost-library","boost-lib","boost-lib","boost-lib","boost-lib","boost-lib","boost-lib","boost-lib","boost-lib","boost-lib","boost-lib","Windows","to","case","in","to","dynamic"]},{"Key":"a boolean.","Fragments":["It"]},{"Key":"boolean. It","Fragments":["is"]},{"Key":"is clearer","Fragments":["if","than","when","than","for"]},{"Key":"clearer if","Fragments":["there","you"]},{"Key":"are multiple","Fragments":["returns,"]},{"Key":"multiple returns,","Fragments":["so"]},{"Key":"returns, so","Fragments":["when"]},{"Key":"so when","Fragments":["you"]},{"Key":"you assign","Fragments":["empty=false"]},{"Key":"assign empty=false","Fragments":["and"]},{"Key":"empty=false and","Fragments":["then"]},{"Key":"then break,","Fragments":["you"]},{"Key":"break, you","Fragments":["can"]},{"Key":"can instead","Fragments":["just"]},{"Key":"instead just","Fragments":["return","use","assumed"]},{"Key":"just return","Fragments":["false","a","the","false","true","whatever","0.","0","0","a","the","the","`pow(2,"]},{"Key":"return false","Fragments":["there.","the","for","out"]},{"Key":"false there.","Fragments":["And"]},{"Key":"there. And","Fragments":["below"]},{"Key":"And below","Fragments":["return"]},{"Key":"below return","Fragments":["always"]},{"Key":"return always","Fragments":["true."]},{"Key":"function such","Fragments":["as"]},{"Key":"such as","Fragments":["checkQuestion,","\"\\t\"","`uint64_t`","integers","`any_of(str.begin(),","isupper(),","the","extracting","length()"]},{"Key":"as checkQuestion,","Fragments":["where"]},{"Key":"checkQuestion, where","Fragments":["you"]},{"Key":"you iterate","Fragments":["in","and"]},{"Key":"iterate in","Fragments":["reverse,"]},{"Key":"in reverse,","Fragments":["you","you"]},{"Key":"reverse, you","Fragments":["cannot","only"]},{"Key":"you cannot","Fragments":["use"]},{"Key":"cannot use","Fragments":["the"]},{"Key":"the range","Fragments":["based","based","based","is","[0,999]","of","based","base","is","adaptors,","for","based","based","for"]},{"Key":"loop I","Fragments":["mentioned"]},{"Key":"I mentioned","Fragments":["before,","this"]},{"Key":"mentioned before,","Fragments":["but"]},{"Key":"before, but","Fragments":["you","the","I","not","I'd"]},{"Key":"but you","Fragments":["can","have","can","did","can","may","may","wouldn't","could","might","say","have","don't","have","need","always","might","should"]},{"Key":"can still","Fragments":["use","do","pass","be","figure"]},{"Key":"a reverse","Fragments":["iterator","Sieve"]},{"Key":"reverse iterator","Fragments":["instead","in","to"]},{"Key":"iterator instead","Fragments":["of"]},{"Key":"index based","Fragments":["iteration."]},{"Key":"And finally.","Fragments":["There"]},{"Key":"finally. There","Fragments":["was"]},{"Key":"There was","Fragments":["really","an","no"]},{"Key":"was really","Fragments":["no"]},{"Key":"really no","Fragments":["need","need","reason","good"]},{"Key":"class for","Fragments":["this.","now","each","this","grains"]},{"Key":"for this.","Fragments":["When","Constructing","That's","Otherwise"]},{"Key":"this. When","Fragments":["all"]},{"Key":"When all","Fragments":["the"]},{"Key":"the methods","Fragments":["in","argument","on","you","are","as"]},{"Key":"methods in","Fragments":["you","Message,"]},{"Key":"in you","Fragments":["class"]},{"Key":"you class","Fragments":["are"]},{"Key":"class are","Fragments":["static,","fine."]},{"Key":"are static,","Fragments":["you","there's"]},{"Key":"static, you","Fragments":["are"]},{"Key":"are probably","Fragments":["looking","unnecessary","slower","small"]},{"Key":"probably looking","Fragments":["at"]},{"Key":"at a","Fragments":["namespace","bare","loss","more","time,","time.","time","glance.","time","sufficiently","minimum","local","time,","cost","time.","loss","minimum,"]},{"Key":"namespace with","Fragments":["functions.","*matcher*","plain","a","unneeded"]},{"Key":" +1","Fragments":["for","for","for","To"]},{"Key":"+1 for","Fragments":["trimming","short","the","self-documenting","that."]},{"Key":"for trimming","Fragments":["with","and"]},{"Key":"trimming with","Fragments":["boost!"]},{"Key":"for short","Fragments":["and"]},{"Key":"short and","Fragments":["readable!","concise","do","sweet.","to","simple"]},{"Key":"pass isalpha","Fragments":["directly"]},{"Key":"isalpha directly","Fragments":["to"]},{"Key":"directly to","Fragments":["find_if,"]},{"Key":"to find_if,","Fragments":["its"]},{"Key":"find_if, its","Fragments":["signature"]},{"Key":"its signature","Fragments":["and"]},{"Key":"signature and","Fragments":["that"]},{"Key":"that of","Fragments":["the","any","isNothingToSay?","the"]},{"Key":"lambda you","Fragments":["wrapped"]},{"Key":"you wrapped","Fragments":["it"]},{"Key":"wrapped it","Fragments":["in"]},{"Key":"in are","Fragments":["the"]},{"Key":" `!input.empty()`","Fragments":["is"]},{"Key":"`!input.empty()` is","Fragments":["clearer"]},{"Key":"clearer than","Fragments":["`input","my","this."]},{"Key":"than `input","Fragments":["!="]},{"Key":"`input !=","Fragments":["\"\"`"]},{"Key":"!= \"\"`","Fragments":["and"]},{"Key":"\"\"` and","Fragments":["it"]},{"Key":"not require","Fragments":["temporary","boost.","a","class"]},{"Key":"require temporary","Fragments":["object"]},{"Key":"temporary object","Fragments":["construction.","is"]},{"Key":" All","Fragments":["of","excellent","of","four","of","vectors","of","I've","information","that"]},{"Key":"All of","Fragments":["these","your","your","the"]},{"Key":"these functions","Fragments":["should","with","are","aren't","that","are","yourself."]},{"Key":"functions should","Fragments":["take","either","be","probably","be"]},{"Key":"should take","Fragments":["const","the"]},{"Key":"take const","Fragments":["references"]},{"Key":"const references","Fragments":["as","to","and","whenever","are"]},{"Key":"references as","Fragments":["parameters."]},{"Key":"as parameters.","Fragments":["Maybe"]},{"Key":"parameters. Maybe","Fragments":["not"]},{"Key":"Maybe not","Fragments":["`find_caps`,","the"]},{"Key":"not `find_caps`,","Fragments":["but"]},{"Key":"`find_caps`, but","Fragments":["then"]},{"Key":"then don't","Fragments":["make"]},{"Key":"don't make","Fragments":["another","legibility"]},{"Key":"make another","Fragments":["copy."]},{"Key":"helper functions","Fragments":["should","`next_letter()`","are","out","here","(or","with","or","you","should","each","are","as","don't","in","that","don't","have","as"]},{"Key":"should either","Fragments":["be","be"]},{"Key":"either be","Fragments":["static","in"]},{"Key":"be static","Fragments":["or","since","or","function","members,","since","here"]},{"Key":"static or","Fragments":["be","in","within","inline"]},{"Key":"or be","Fragments":["enclosed","a"]},{"Key":"be enclosed","Fragments":["in"]},{"Key":"enclosed in","Fragments":["an"]},{"Key":"I mostly","Fragments":["love","code"]},{"Key":"mostly love","Fragments":["this"]},{"Key":"love this","Fragments":["answer,"]},{"Key":"this answer,","Fragments":["so"]},{"Key":"answer, so","Fragments":["succinct."]},{"Key":"so succinct.","Fragments":["I"]},{"Key":"succinct. I","Fragments":["don't"]},{"Key":"using boost,","Fragments":["on","you","why","too."]},{"Key":"boost, on","Fragments":["the"]},{"Key":"the contrary,","Fragments":["I"]},{"Key":"contrary, I","Fragments":["think"]},{"Key":"it's good","Fragments":["engineering","practice","to","best","to","that","you"]},{"Key":"good engineering","Fragments":["to"]},{"Key":"engineering to","Fragments":["use"]},{"Key":"the tools","Fragments":["available.","(exercism"]},{"Key":"With regards","Fragments":["to"]},{"Key":"regards to","Fragments":["passing"]},{"Key":"to passing","Fragments":["by","by"]},{"Key":"passing by","Fragments":["value.","reference,","reference","const","reference.","value","reference"]},{"Key":"by value.","Fragments":["One","You're","This","That","Less"]},{"Key":"value. One","Fragments":["could"]},{"Key":"One could","Fragments":["say"]},{"Key":"could say","Fragments":["that","add"]},{"Key":"say that","Fragments":["since","the","making","passing","all","I","@hertha","swapping","you","readability","regex","making","you","it","a"]},{"Key":"that since","Fragments":["you","`std::string::operator[]()`","I","the","I","asking"]},{"Key":"are going","Fragments":["to","to","to","for","to","to"]},{"Key":"use trim,","Fragments":["you"]},{"Key":"trim, you","Fragments":["would","could"]},{"Key":"would need","Fragments":["a","to","to","to","to","to","to","instances.","to","to"]},{"Key":"copy anyway,","Fragments":["but"]},{"Key":"anyway, but","Fragments":["this","I"]},{"Key":"interface, and","Fragments":["using"]},{"Key":"using trim","Fragments":["is"]},{"Key":"trim is","Fragments":["an","implemented)"]},{"Key":"an implementation","Fragments":["detail,","detail","is","detail.","in","file","that"]},{"Key":"implementation detail,","Fragments":["so"]},{"Key":"detail, so","Fragments":["you"]},{"Key":"still pass","Fragments":["by","the"]},{"Key":"pass by","Fragments":["`const","reference","value","value","{reference,pointer}.","const-reference.","reference/copy","reference","reference","value"]},{"Key":"by `const","Fragments":["string\u0026`"]},{"Key":"then make","Fragments":["copies"]},{"Key":"make copies","Fragments":["if"]},{"Key":"copies if","Fragments":["you"]},{"Key":"need. Actually,","Fragments":["there"]},{"Key":"Actually, there","Fragments":["is"]},{"Key":"is `trim_copy`","Fragments":["which"]},{"Key":"`trim_copy` which","Fragments":["will"]},{"Key":"which will","Fragments":["give","get","throw","do","always","be","break","return","return","allow","make","invariably"]},{"Key":"the trimmed","Fragments":["copy."]},{"Key":"For the","Fragments":["question,","`multiple_sum()`","size_t","most","`back_inserter`","sake","yelling","rest,","first","all","sake","input,","input,","second"]},{"Key":"the question,","Fragments":["c++11"]},{"Key":"question, c++11","Fragments":["introduces"]},{"Key":"c++11 introduces","Fragments":["a"]},{"Key":"introduces a","Fragments":["`back`"]},{"Key":"a `back`","Fragments":["member,"]},{"Key":"`back` member,","Fragments":["which"]},{"Key":"member, which","Fragments":["returns"]},{"Key":"which returns","Fragments":["a","an"]},{"Key":"last element.","Fragments":["But"]},{"Key":"element. But","Fragments":["watch"]},{"Key":"But watch","Fragments":["out,"]},{"Key":"watch out,","Fragments":["calling"]},{"Key":"out, calling","Fragments":["it"]},{"Key":"calling it","Fragments":["with","a","on","on"]},{"Key":"a empty","Fragments":["string","check"]},{"Key":"empty string","Fragments":["results","is","and","is","is","passing","returns","`\"\"`","would","-","and","or","(","-","to","\"\"","is","when"]},{"Key":"string results","Fragments":["in"]},{"Key":"results in","Fragments":["undefined","```nucleotide_count()```","0."]},{"Key":"in undefined","Fragments":["behaviour,","behavior"]},{"Key":"undefined behaviour,","Fragments":["but"]},{"Key":"behaviour, but","Fragments":["it"]},{"Key":"be fine,","Fragments":["you","right?","right?"]},{"Key":"fine, you","Fragments":["rule"]},{"Key":"you rule","Fragments":["out"]},{"Key":"rule out","Fragments":["the"]},{"Key":"string being","Fragments":["empty","shorter/longer","short/long."]},{"Key":"being empty","Fragments":["before."]},{"Key":" Speaking","Fragments":["of","of"]},{"Key":"Speaking of","Fragments":["that,","iterators,"]},{"Key":"of that,","Fragments":["`say.empty()`","so"]},{"Key":"that, `say.empty()`","Fragments":["is"]},{"Key":"`say.empty()` is","Fragments":["much"]},{"Key":"explicit than","Fragments":["`say.size()"]},{"Key":"than `say.size()","Fragments":["=="]},{"Key":"`say.size() ==","Fragments":["0`."]},{"Key":" Is","Fragments":["there","there","this","a","boost","it","it","there","this","there","it","raw_in","there","that","there","there","`1'000'000'000L`","there","a","there","that","it","a","not"]},{"Key":"there an","Fragments":["```isUpper```","advantage","easier","option"]},{"Key":"an ```isUpper```","Fragments":["for","function"]},{"Key":"```isUpper``` for","Fragments":["strings?"]},{"Key":" Updates","Fragments":["after"]},{"Key":"Updates after","Fragments":["the"]},{"Key":"the generous","Fragments":["feedback:"]},{"Key":"- Got","Fragments":["rid"]},{"Key":"Got rid","Fragments":["of","of","of","of"]},{"Key":"the useless","Fragments":["bools"]},{"Key":"useless bools","Fragments":["and"]},{"Key":"bools and","Fragments":["break"]},{"Key":"and break","Fragments":["statements","code"]},{"Key":"- Streamlined","Fragments":["the"]},{"Key":"Streamlined the","Fragments":["if"]},{"Key":"- Incorporated","Fragments":["the"]},{"Key":"Incorporated the","Fragments":["range"]},{"Key":"for loops(didn't","Fragments":["know"]},{"Key":"loops(didn't know","Fragments":["they"]},{"Key":"know they","Fragments":["existed,"]},{"Key":"they existed,","Fragments":["very"]},{"Key":"existed, very","Fragments":["neat)"]},{"Key":"- Changed","Fragments":["the","the","from"]},{"Key":"Changed the","Fragments":["last","parameters","Argument","formular"]},{"Key":"last for","Fragments":["loop"]},{"Key":"use iterators","Fragments":["instead","and","instead","instead","instead"]},{"Key":"iterators instead","Fragments":["of","of","of","of","of","of","of"]},{"Key":"the parameters","Fragments":["of"]},{"Key":"parameters of","Fragments":["the"]},{"Key":"the functions","Fragments":["to","are","from","that","look","yet.","i","members","in","available","the","isupper","you","in","it","small","inline,"]},{"Key":"to references","Fragments":["instead"]},{"Key":"references instead","Fragments":["of","of"]},{"Key":"of values(I","Fragments":["assume"]},{"Key":"values(I assume","Fragments":["this"]},{"Key":"assume this","Fragments":["is"]},{"Key":"a performance","Fragments":["thing?)","problem).","analysis","hit","concern","point","benefits"]},{"Key":"I left","Fragments":["the","commented-out","cleanKey","them","it"]},{"Key":"left the","Fragments":["whole"]},{"Key":"for now","Fragments":["instead"]},{"Key":"now instead","Fragments":["of"]},{"Key":"of turning","Fragments":["it"]},{"Key":"turning it","Fragments":["into","into"]},{"Key":"it into","Fragments":["a","two","a","2","a","a","sanitizeWord.","the","std","the","its","prefix","a","\"thisis\".","a","rna.","the","the","the"]},{"Key":"a namespace,","Fragments":["since","you","which","but","a","instead","i.e."]},{"Key":"namespace, since","Fragments":["I","it's"]},{"Key":"since I","Fragments":["do","don't","downloaded","had","often","don't","think","didn't","did","don't","wrote","have","haven't","used","feel"]},{"Key":"do know","Fragments":["nothing","that"]},{"Key":"know nothing","Fragments":["about"]},{"Key":"nothing about","Fragments":["that."]},{"Key":"about that.","Fragments":["I","Thank"]},{"Key":"will revisit","Fragments":["this","this","this"]},{"Key":"revisit this","Fragments":["once","using","later."]},{"Key":"this once","Fragments":["I","before"]},{"Key":"once I","Fragments":["have","change","started","remembered"]},{"Key":"have learned","Fragments":["enough"]},{"Key":"learned enough","Fragments":["to"]},{"Key":"make an","Fragments":["assessment","anagram","instance","optimized","array","answer"]},{"Key":"an assessment","Fragments":["myself."]},{"Key":"couple of","Fragments":["notes:","points","integers.","things.","parameters","boost","questions/comments:","comments:","minor","lines,","things","points.","things","reallocations","things","things:","characters","smaller","loops","tests","days.","unnecessary","questions","optional","two-line","nitpicks:"]},{"Key":"code feels","Fragments":["overcommented,"]},{"Key":"feels overcommented,","Fragments":["which"]},{"Key":"overcommented, which","Fragments":["hurts"]},{"Key":"which hurts","Fragments":["readability."]},{"Key":"hurts readability.","Fragments":["Variables"]},{"Key":"readability. Variables","Fragments":["like"]},{"Key":"Variables like","Fragments":["\"bIsShouting\""]},{"Key":"like \"bIsShouting\"","Fragments":["already"]},{"Key":"\"bIsShouting\" already","Fragments":["speak"]},{"Key":"already speak","Fragments":["for"]},{"Key":"speak for","Fragments":["themselves."]},{"Key":"- Right","Fragments":["now"]},{"Key":"Right now","Fragments":["your","you're","your","anyone","the"]},{"Key":"now your","Fragments":["hey","answer"]},{"Key":"your hey","Fragments":["function","function"]},{"Key":"function does","Fragments":["all","accept","not","its","not"]},{"Key":"does all","Fragments":["the","the","the","the","the"]},{"Key":"the work.","Fragments":["Splitting","The"]},{"Key":"work. Splitting","Fragments":["it"]},{"Key":"Splitting it","Fragments":["up"]},{"Key":"it up","Fragments":["among","i","with","is","on","pretty","a","to","on","is","with","a"]},{"Key":"up among","Fragments":["private"]},{"Key":"among private","Fragments":["member"]},{"Key":"private member","Fragments":["functions","of"]},{"Key":"member functions","Fragments":["will","need","such"]},{"Key":"functions will","Fragments":["increase","work"]},{"Key":"- Try","Fragments":["to"]},{"Key":"Try to","Fragments":["utilize","declare","avoid","be"]},{"Key":"to utilize","Fragments":["more"]},{"Key":"utilize more","Fragments":["return"]},{"Key":"more return","Fragments":["statements,"]},{"Key":"return statements,","Fragments":["e.g."]},{"Key":"statements, e.g.","Fragments":["after"]},{"Key":"e.g. after","Fragments":["you"]},{"Key":"after you","Fragments":["are","n","pointed"]},{"Key":"are sure","Fragments":["that"]},{"Key":"sure that","Fragments":["the","the","common","at","sorting","the","I","the","query","at","anyone"]},{"Key":"the reply","Fragments":["will","string","based","as","to","strings,"]},{"Key":"reply will","Fragments":["be"]},{"Key":"the silent","Fragments":["treatment,"]},{"Key":"silent treatment,","Fragments":["you"]},{"Key":"treatment, you","Fragments":["can"]},{"Key":"can return","Fragments":["immediately","simple"]},{"Key":"return immediately","Fragments":["and"]},{"Key":"immediately and","Fragments":["don't"]},{"Key":"and don't","Fragments":["need","assign","know","require","quite","really","run"]},{"Key":" Props","Fragments":["for","for"]},{"Key":"Props for","Fragments":["powering","doing"]},{"Key":"for powering","Fragments":["through"]},{"Key":"powering through","Fragments":["without"]},{"Key":"through without","Fragments":["any"]},{"Key":"any using","Fragments":["declarations"]},{"Key":"using declarations","Fragments":[";)","there;"]},{"Key":"My previous","Fragments":["approach","experience"]},{"Key":"previous approach","Fragments":["utilized","and"]},{"Key":"approach utilized","Fragments":["global"]},{"Key":"utilized global","Fragments":["state"]},{"Key":"global state","Fragments":["with"]},{"Key":"state with","Fragments":["static"]},{"Key":"with static","Fragments":["lifetime.","regex","members!","methods"]},{"Key":"static lifetime.","Fragments":["I"]},{"Key":"lifetime. I","Fragments":["figure"]},{"Key":"I figure","Fragments":["it's","you've","it's","it's"]},{"Key":"figure it's","Fragments":["better","safe","alright."]},{"Key":"it's better","Fragments":["to","if","to","to","to"]},{"Key":"to solve","Fragments":["this","the","this","this","this","this","this","a","the","a","on","the","it","this","isShouting","this","this","the","the"]},{"Key":"solve this","Fragments":["as","problem","without","only","only","only","only","but","problem.","assignment"]},{"Key":"this as","Fragments":["a","it","well.","you","a","easy","counting","yelling.","an","simple","I"]},{"Key":"a singleton,","Fragments":["that"]},{"Key":"singleton, that","Fragments":["can"]},{"Key":"can generate","Fragments":["characters/numbers"]},{"Key":"generate characters/numbers","Fragments":["and"]},{"Key":"characters/numbers and","Fragments":["have"]},{"Key":"a `randomName`","Fragments":["function"]},{"Key":"`randomName` function","Fragments":["that"]},{"Key":"generates a","Fragments":["random","temporary"]},{"Key":"random name","Fragments":["using","collisions,"]},{"Key":"name using","Fragments":["that"]},{"Key":"using that","Fragments":["singleton.","value"]},{"Key":"In essence","Fragments":["this","that"]},{"Key":"essence this","Fragments":["is"]},{"Key":"same design","Fragments":["as"]},{"Key":"design as","Fragments":["before,","simple"]},{"Key":"as before,","Fragments":["but"]},{"Key":"but the","Fragments":["robot","average","using","implementation","rest","part","other","early-terminating","best","linker","tests","boost","performance","simplest","implementation","types","author","previous","principle","compiler","one","way","fact","other","argument","negations","number","fact","exercise","concept","unit","gain","tests","way","function","string","trim","validity","`==","readme","very","rest"]},{"Key":"robot class","Fragments":["does"]},{"Key":"class does","Fragments":["not"]},{"Key":"a `random`","Fragments":["name"]},{"Key":"`random` name","Fragments":["function"]},{"Key":"name function","Fragments":["anymore."]},{"Key":"This solution","Fragments":["is","is","is","should","takes","is","uses"]},{"Key":"is longer","Fragments":["by","than"]},{"Key":"longer by","Fragments":["about"]},{"Key":"by about","Fragments":["10","37%.","47%.","52%.","67%."]},{"Key":"about 10","Fragments":["lines,","minutes"]},{"Key":"10 lines,","Fragments":["but"]},{"Key":"lines, but","Fragments":["feels"]},{"Key":"but feels","Fragments":["better,","cleaner."]},{"Key":"feels better,","Fragments":["since"]},{"Key":"better, since","Fragments":["the"]},{"Key":"same NameGenerator","Fragments":["can"]},{"Key":"NameGenerator can","Fragments":["be"]},{"Key":"be reused","Fragments":["in"]},{"Key":"reused in","Fragments":["different"]},{"Key":"in different","Fragments":["parts","methods,..."]},{"Key":"different parts","Fragments":["of","variables?"]},{"Key":"parts of","Fragments":["an","that","code.","the","that"]},{"Key":"an application","Fragments":["(after"]},{"Key":"application (after","Fragments":["renaming)."]},{"Key":"If anyone","Fragments":["has","imports","can"]},{"Key":"anyone has","Fragments":["comments"]},{"Key":"has comments","Fragments":["about"]},{"Key":"comments about","Fragments":["the","the"]},{"Key":"the OO","Fragments":["aspects"]},{"Key":"OO aspects","Fragments":["of"]},{"Key":"aspects of","Fragments":["this","c++","the"]},{"Key":"solution please","Fragments":["write."]},{"Key":"please write.","Fragments":["I"]},{"Key":"write. I","Fragments":["am"]},{"Key":"am always","Fragments":["questioning"]},{"Key":"always questioning","Fragments":["my"]},{"Key":"questioning my","Fragments":["understanding"]},{"Key":"of OO","Fragments":["and"]},{"Key":"OO and","Fragments":["trying"]},{"Key":"and trying","Fragments":["to","to","to","to","to"]},{"Key":"think in","Fragments":["terms","this","my","c++11","C++"]},{"Key":"in terms","Fragments":["of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"terms of","Fragments":["matching","your","time","module","`digits`.","those","time/cpu","scalability,","container","performance,","the","the","the"]},{"Key":"of matching","Fragments":["the"]},{"Key":"matching the","Fragments":["responses"]},{"Key":"the responses","Fragments":["as","without","based","versus","are","inside","don't","in","should","(it","instead"]},{"Key":"responses as","Fragments":["laid"]},{"Key":"as laid","Fragments":["out"]},{"Key":"laid out","Fragments":["in"]},{"Key":"out in","Fragments":["the","the","the","my"]},{"Key":"problem this","Fragments":["is"]},{"Key":"better. I","Fragments":["realize"]},{"Key":"I realize","Fragments":["though","this"]},{"Key":"realize though","Fragments":["that"]},{"Key":"though that","Fragments":["my","is","i"]},{"Key":"that my","Fragments":["last","knowledge","yell-detection"]},{"Key":"my last","Fragments":["comment","hint…"]},{"Key":"last comment","Fragments":["was","on"]},{"Key":"comment was","Fragments":["misleading."]},{"Key":"was misleading.","Fragments":["An"]},{"Key":"misleading. An","Fragments":["issue"]},{"Key":"An issue","Fragments":["I","is"]},{"Key":"issue I","Fragments":["was","found"]},{"Key":"going after,","Fragments":["which"]},{"Key":"after, which","Fragments":["is"]},{"Key":"still present","Fragments":["here,"]},{"Key":"present here,","Fragments":["is"]},{"Key":"here, is","Fragments":["that"]},{"Key":"that `isGibberish`","Fragments":["seems"]},{"Key":"`isGibberish` seems","Fragments":["to"]},{"Key":"perform a","Fragments":["different","copy"]},{"Key":"a different","Fragments":["job","approach","range","name","path","statement","environment)","post.","exercise?","type","string","epsilon","order","dictionary","dictionary","effect),","object).","object","interpretation","dictionary","scope.","approach","word.\u003c/li\u003e","format,","language","direction,","hamming_test.cpp","reply"]},{"Key":"different job","Fragments":["than"]},{"Key":"job than","Fragments":["advertised:"]},{"Key":"than advertised:","Fragments":["really"]},{"Key":"advertised: really","Fragments":["it's"]},{"Key":"really it's","Fragments":["checking"]},{"Key":"it's checking","Fragments":["if","empty"]},{"Key":"the phrase","Fragments":["is","they","is"]},{"Key":"phrase is","Fragments":["not","all","capitalized."]},{"Key":"yell (as","Fragments":["in,"]},{"Key":"(as in,","Fragments":["you've"]},{"Key":"in, you've","Fragments":["defined"]},{"Key":"you've defined","Fragments":["\"gibberish\"","`is_nothing_string`"]},{"Key":"defined \"gibberish\"","Fragments":["here"]},{"Key":"\"gibberish\" here","Fragments":["as"]},{"Key":"here as","Fragments":["anything","I","it","is","well"]},{"Key":"as anything","Fragments":["that"]},{"Key":"anything that","Fragments":["isn't","MUST","has","has","has","shouldn't","doesn't","makes","has"]},{"Key":"isn't a","Fragments":["yell).","need","simpler","member","number","date","problem."]},{"Key":"a yell).","Fragments":["Also,","Then"]},{"Key":"yell). Also,","Fragments":["\"I"]},{"Key":"Also, \"I","Fragments":["GREATLY"]},{"Key":"\"I GREATLY","Fragments":["ENJOY"]},{"Key":"GREATLY ENJOY","Fragments":["COOKIES\""]},{"Key":"ENJOY COOKIES\"","Fragments":["would"]},{"Key":"COOKIES\" would","Fragments":["be"]},{"Key":"a yell,","Fragments":["but","the","unless"]},{"Key":"yell, but","Fragments":["it"]},{"Key":"that test","Fragments":["would","will","instace"]},{"Key":"test would","Fragments":["fail.","fail."]},{"Key":"thought about","Fragments":["this,","it","your","relying","multiplying","avoiding","a","this","checking"]},{"Key":"about this,","Fragments":["and","by","though,"]},{"Key":"this, and","Fragments":["decided","`auto`","end","I'm","I","your"]},{"Key":"and decided","Fragments":["I","to"]},{"Key":"decided I","Fragments":["was"]},{"Key":"was happy","Fragments":["that"]},{"Key":"happy that","Fragments":["the","the","I"]},{"Key":"input could","Fragments":["extend"]},{"Key":"could extend","Fragments":["the"]},{"Key":"extend the","Fragments":["definition"]},{"Key":"of valid","Fragments":["base","input"]},{"Key":"valid base","Fragments":["pairs."]},{"Key":"base pairs.","Fragments":["If"]},{"Key":"pairs. If","Fragments":["the"]},{"Key":"input is","Fragments":["\"ATTCXXX\"","created.","wasteful","handled","always","`\"100\"`:","a","\"\".","a","not","yelled","not","empty","a"]},{"Key":"is \"ATTCXXX\"","Fragments":["then"]},{"Key":"\"ATTCXXX\" then","Fragments":["the"]},{"Key":"the user","Fragments":["has","actually","that","typed"]},{"Key":"user has","Fragments":["declared"]},{"Key":"has declared","Fragments":["X"]},{"Key":"declared X","Fragments":["a"]},{"Key":"X a","Fragments":["new"]},{"Key":"new valid","Fragments":["base"]},{"Key":" hi","Fragments":["jac,","odetis,","greenca,","trophy,","trophy,","atifhans,"]},{"Key":"i liked","Fragments":["your"]},{"Key":"liked your","Fragments":["try","last"]},{"Key":"your try","Fragments":["catch"]},{"Key":"try catch","Fragments":["block"]},{"Key":"catch block","Fragments":["and"]},{"Key":"block and","Fragments":["copied"]},{"Key":"and copied","Fragments":["it,"]},{"Key":"but got","Fragments":["rid"]},{"Key":"got rid","Fragments":["of","of","of","of","of","of"]},{"Key":" int","Fragments":["count(const","main(int","+","i","nucleotides[]","main()","foo","m_;","multiplier","constant","main()","main()","a,","a","a","b","c","d","minLength","main(int","last","capacity","alphabet[26]","i"]},{"Key":"int count(const","Fragments":["char"]},{"Key":"count(const char","Fragments":["base)"]},{"Key":"char base)","Fragments":["const"]},{"Key":"base) const","Fragments":["{"]},{"Key":"return bases.at(","Fragments":["base"]},{"Key":"bases.at( base","Fragments":[");"]},{"Key":" catch","Fragments":["(const"]},{"Key":"catch (const","Fragments":["out_of_range"]},{"Key":"(const out_of_range","Fragments":["\u0026e"]},{"Key":"out_of_range \u0026e","Fragments":["){"]},{"Key":" throw","Fragments":["std::invalid_argument(\"invalid"]},{"Key":"throw std::invalid_argument(\"invalid","Fragments":["base.\");"]},{"Key":"can't really","Fragments":["see","tell","handle"]},{"Key":"really see","Fragments":["how"]},{"Key":"how range","Fragments":["based"]},{"Key":"based loops","Fragments":["would","in"]},{"Key":"loops would","Fragments":["improve"]},{"Key":"would improve","Fragments":["readability","readability","readability","readability.","performance"]},{"Key":"improve readability","Fragments":["in","if","and","aka","to","(std::","either.","if"]},{"Key":"readability in","Fragments":["this","my"]},{"Key":"this case,","Fragments":["could","I","it","since","but","but","map","if","I","doesn't","the","the","because","but","but","as","but"]},{"Key":"case, could","Fragments":["you"]},{"Key":"could you","Fragments":["give","make"]},{"Key":"you give","Fragments":["me","a","examples","me","me"]},{"Key":"give me","Fragments":["an","a","its","a","the","an"]},{"Key":"me an","Fragments":["example?","example"]},{"Key":"file because","Fragments":["it"]},{"Key":"it implements","Fragments":["the"]},{"Key":"implements the","Fragments":["functions.","more"]},{"Key":"the functions.","Fragments":["I","I"]},{"Key":"the h","Fragments":["file","file"]},{"Key":"h file","Fragments":["for"]},{"Key":"for functions","Fragments":["prototypes.","which","come"]},{"Key":"functions prototypes.","Fragments":["Is"]},{"Key":"prototypes. Is","Fragments":["that"]},{"Key":"Is that","Fragments":["unusual?","conditiion","the","a","proper"]},{"Key":"i like","Fragments":["the","your","the","that:","it,","the"]},{"Key":"test on","Fragments":["input:","line","line","line"]},{"Key":"if (counts.count(n)","Fragments":["\u003e"]},{"Key":"(counts.count(n) \u003e","Fragments":["0)"]},{"Key":" so","Fragments":["i","i","maybe"]},{"Key":"so i","Fragments":["copied","can","demonstrate","don't"]},{"Key":"i copied","Fragments":["it,"]},{"Key":"copied it,","Fragments":["and"]},{"Key":"it, and","Fragments":["trimmed","the","wrapping","acquire","it","got","you","you"]},{"Key":"and trimmed","Fragments":["it"]},{"Key":"trimmed it","Fragments":["to:"]},{"Key":" given","Fragments":["that","that"]},{"Key":"that that","Fragments":["works,","it","does","is","didn't"]},{"Key":" there's","Fragments":["no"]},{"Key":"there's no","Fragments":["need","way","dynamic",";","i","harm.","punctuation","'?'.","begin","internal","copying","real","need","comments.","namespace","clear","need","(english)"]},{"Key":"const string","Fragments":["bases","that","is","\u0026.","references,","upper","spaceless","and"]},{"Key":"string bases","Fragments":["="]},{"Key":"bases =","Fragments":["\"ATCG\";"]},{"Key":" you","Fragments":["could","could","can","use","can","could","could","can","can","can","could","can","can","should","know","can","made","can"]},{"Key":"I'm sorry,","Fragments":["I"]},{"Key":"sorry, I","Fragments":["don't"]},{"Key":"don't understand","Fragments":["the","what","what","what","why","why","why"]},{"Key":"understand the","Fragments":["question","```classify_statement```","incomprehensible","exercises","benefit","regular","flow"]},{"Key":"changed the","Fragments":["`string","CMakeLists.txt","unit","return","`map\u003cstring,","implementation","loop","loop","function"]},{"Key":"the `string","Fragments":["input`"]},{"Key":"`string input`","Fragments":["to"]},{"Key":"input` to","Fragments":["`const"]},{"Key":"to `const","Fragments":["string"]},{"Key":"`const string","Fragments":["\u0026","\u0026`","*msg`.","\u0026msg`","\u0026\u0026`"]},{"Key":"string \u0026","Fragments":["input`"]},{"Key":"\u0026 input`","Fragments":["because"]},{"Key":"input` because","Fragments":["I"]},{"Key":"not modifying","Fragments":["`input`'s","them.","input","the","the"]},{"Key":"modifying `input`'s","Fragments":["value."]},{"Key":"`input`'s value.","Fragments":["I"]},{"Key":"value. I","Fragments":["got","don't"]},{"Key":"got very","Fragments":["large"]},{"Key":"very large","Fragments":["runtime","number).","number."]},{"Key":"large runtime","Fragments":["speed"]},{"Key":"runtime speed","Fragments":["boosts."]},{"Key":"The new","Fragments":["range"]},{"Key":"new range","Fragments":["based","for"]},{"Key":"for is","Fragments":["pretty,"]},{"Key":"is pretty,","Fragments":["but"]},{"Key":"pretty, but","Fragments":["depending","I"]},{"Key":"but depending","Fragments":["on"]},{"Key":"your libstdc++","Fragments":["implementation"]},{"Key":"libstdc++ implementation","Fragments":["std::transform"]},{"Key":"implementation std::transform","Fragments":["can"]},{"Key":"std::transform can","Fragments":["run"]},{"Key":"can run","Fragments":["in"]},{"Key":"run in","Fragments":["parallel."]},{"Key":"What do","Fragments":["you","you","you","you","you","you","you","you","you","you","you","you"]},{"Key":"you need","Fragments":["cctype","to","to","exception","a","with","to","them","it","to","a","to","to","to","to","to","to","a","to","it.","to","to","a","integer.","to","to","to.","in","to","to","to","to","to","modify","to."]},{"Key":"need cctype","Fragments":["for?"]},{"Key":"const unsigned","Fragments":["int\u0026"]},{"Key":"unsigned int\u0026","Fragments":["?"]},{"Key":"int\u0026 ?","Fragments":["Why"]},{"Key":"? Why","Fragments":["would"]},{"Key":"Why would","Fragments":["you"]},{"Key":"you pass","Fragments":["an","a","ctor","all","`const","it","an","variables","in","in","in","it"]},{"Key":"pass an","Fragments":["integral","`int","int","int","rvalue:"]},{"Key":"an integral","Fragments":["type","type"]},{"Key":"integral type","Fragments":["by","on"]},{"Key":"type by","Fragments":["const"]},{"Key":"For example","Fragments":["this:","I'm","in","I","the","your","'shouting_with_no_exclamation_mark'","have","my","consider","each","it"]},{"Key":" for(std::string::const_iterator","Fragments":["it=str.begin();"]},{"Key":"for(std::string::const_iterator it=str.begin();","Fragments":["it!=str.end();"]},{"Key":"it=str.begin(); it!=str.end();","Fragments":["++it){"]},{"Key":" if(*it","Fragments":["!="]},{"Key":"if(*it !=","Fragments":["'"]},{"Key":"!= '","Fragments":["'){","')","';`","';","')","')"]},{"Key":" would","Fragments":["turn","clarify","suffice.","work"]},{"Key":"would turn","Fragments":["into"]},{"Key":"turn into","Fragments":["this:"]},{"Key":"(const char\u0026","Fragments":["c"]},{"Key":"char\u0026 c","Fragments":[":",":"]},{"Key":": str)","Fragments":["{","{"]},{"Key":"if (c","Fragments":["!=","!="]},{"Key":"(c !=","Fragments":["'","'"]},{"Key":"' ')","Fragments":["{","{"]},{"Key":"of boost!","Fragments":["Very"]},{"Key":"boost! Very","Fragments":["clear"]},{"Key":"Very clear","Fragments":["and","and"]},{"Key":"clear and","Fragments":["understandable.","straight-forward","readable","has","self-documenting."]},{"Key":"and understandable.","Fragments":["The"]},{"Key":"understandable. The","Fragments":["only"]},{"Key":"only improvement","Fragments":["that"]},{"Key":"improvement that","Fragments":["comes"]},{"Key":"that comes","Fragments":["to","from"]},{"Key":"comes to","Fragments":["mind","style","portability,","the"]},{"Key":"to mind","Fragments":["is","when"]},{"Key":"mind is","Fragments":["the"]},{"Key":"the use","Fragments":["of","of","of","of","of","of","of","of","of","of","of","on","of","of","of","is","case","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"]},{"Key":"of `phrase.back()`","Fragments":["([link](http://www.cplusplus.com/reference/string/string/back/))"]},{"Key":"`phrase.back()` ([link](http://www.cplusplus.com/reference/string/string/back/))","Fragments":["instead"]},{"Key":"([link](http://www.cplusplus.com/reference/string/string/back/)) instead","Fragments":["of"]},{"Key":"of `find()`","Fragments":["and"]},{"Key":"`find()` and","Fragments":["`length()`,"]},{"Key":"and `length()`,","Fragments":["if"]},{"Key":"`length()`, if","Fragments":["you're"]},{"Key":"if you're","Fragments":["willing","dealing","just","doing","willing","writing","using","going","throwing","going","describing","already","interested).","concerned","using","using","interested.","throwing","working"]},{"Key":"you're willing","Fragments":["to","to"]},{"Key":"willing to","Fragments":["use","bet","make","say","bet","sacrifice"]},{"Key":" Something","Fragments":["something","I","called"]},{"Key":"Something something","Fragments":["functional"]},{"Key":"something functional","Fragments":["programming."]},{"Key":"last test.","Fragments":["The","Take"]},{"Key":"test. The","Fragments":["error","bob_test.cpp","other"]},{"Key":"The error","Fragments":["is"]},{"Key":"error is","Fragments":[":","as"]},{"Key":"is :","Fragments":["\"double"]},{"Key":": \"double","Fragments":["free"]},{"Key":"\"double free","Fragments":["or"]},{"Key":"free or","Fragments":["corruption\"."]},{"Key":" Any","Fragments":["help","reason","use","reason","feedback","suggestions","specific","reason","pointers","feed"]},{"Key":"Any help","Fragments":["would"]},{"Key":"help would","Fragments":["be"]},{"Key":"know this","Fragments":["is","doesn't","project","is","is","is","should"]},{"Key":"more code","Fragments":["than","and","than","somewhere","comments"]},{"Key":"code than","Fragments":["necessary.","in","one"]},{"Key":"than necessary.","Fragments":["My","In"]},{"Key":"necessary. My","Fragments":["Python"]},{"Key":"My Python","Fragments":["solution"]},{"Key":"Python solution","Fragments":["has"]},{"Key":"solution has","Fragments":["9"]},{"Key":"has 9","Fragments":["lines"]},{"Key":"9 lines","Fragments":["of"]},{"Key":"lines of","Fragments":["code","code","code","code","code","code","comments.","code,","code","code"]},{"Key":"of code","Fragments":[";).","jumps.","it","in","(because","within","compared","...","that","at","after","that","is","out","by","to","is","appear","are","and","is","slower,","is"]},{"Key":"code ;).","Fragments":["However,"]},{"Key":";). However,","Fragments":["I"]},{"Key":"am trying","Fragments":["to","to","to","to"]},{"Key":"get into","Fragments":["the","ranges","the","less"]},{"Key":"the spirit","Fragments":["of","of"]},{"Key":"spirit of","Fragments":["writing","cpp"]},{"Key":"writing maintainable","Fragments":["and"]},{"Key":"maintainable and","Fragments":["readable"]},{"Key":"and readable","Fragments":["C++","things","implementation."]},{"Key":"readable C++","Fragments":["code,"]},{"Key":"C++ code,","Fragments":["which","and"]},{"Key":"code, which","Fragments":["is","proved"]},{"Key":"is why","Fragments":["I","I","they","code","you","I","this","the","it"]},{"Key":"have tried","Fragments":["to","to","to"]},{"Key":"tried to","Fragments":["encapsulate","make","use","keep","incorporate","build","pass","call","structure","get","make","use","avoid","be","keep","make","create","make","keep","separate","roll","explain","keep","minimize","find","keep","do","avoid","do","compile","use","do","avoid"]},{"Key":"encapsulate most","Fragments":["of"]},{"Key":"the functionality","Fragments":["into","such","of"]},{"Key":"functionality into","Fragments":["the","methods"]},{"Key":"the Message","Fragments":["class."]},{"Key":"am sure","Fragments":["there","this,","there"]},{"Key":"sure there","Fragments":["are","is","are","are","must","is"]},{"Key":"are things","Fragments":["I"]},{"Key":"things I","Fragments":["could","found","originally","would","would","noticed:"]},{"Key":"could improve,","Fragments":["so"]},{"Key":"improve, so","Fragments":["please"]},{"Key":"so please","Fragments":["nitpick","allow"]},{"Key":"please nitpick","Fragments":["away"]},{"Key":"nitpick away","Fragments":[":)"]},{"Key":"example I'm","Fragments":["not"]},{"Key":"not quite","Fragments":["sure","what","ready","mature","a","sure"]},{"Key":"quite sure","Fragments":["how","that","why"]},{"Key":"sure how","Fragments":["to","I","std::string(phone)","`find_first_of`","familiar","to","domain_error","I"]},{"Key":"the answers","Fragments":["better","into"]},{"Key":"answers better","Fragments":["than"]},{"Key":"better than","Fragments":["I","setting","I","find_if.","letting","the","a","nothing.","just","mine","mine,","O(n²).","nesting","find_if?","mine.","explain","I","constructions","trying","passing","the","map","my","a","throwing","the"]},{"Key":"than I","Fragments":["currently","-","can.","am.","was,","had."]},{"Key":"I currently","Fragments":["did"]},{"Key":"currently did","Fragments":["with"]},{"Key":"did with","Fragments":["the","the","your","sing.","Bob,"]},{"Key":"char array.","Fragments":["I"]},{"Key":"array. I","Fragments":["used"]},{"Key":"used an","Fragments":["enum","xpr::icase","enum","unsigned"]},{"Key":"enum to","Fragments":["make","logically"]},{"Key":"it more","Fragments":["readable,","readable.","of","clear","readable.","readable","confusing.","structured.","readable.","explicit","readable.","readable","clear.","readable.","consistent","like:","readable."]},{"Key":"readable, but","Fragments":["maintainability","3","it's","I"]},{"Key":"but maintainability","Fragments":["is"]},{"Key":"maintainability is","Fragments":["still"]},{"Key":"still suboptimal","Fragments":["because"]},{"Key":"suboptimal because","Fragments":["the"]},{"Key":"the order","Fragments":["in","they","of","from","of","goes","of","of","(why"]},{"Key":"order in","Fragments":["the","cpp","memory."]},{"Key":"the enum","Fragments":["implicitly","altogether","and","value","value","value","value"]},{"Key":"enum implicitly","Fragments":["indexes"]},{"Key":"implicitly indexes","Fragments":["the"]},{"Key":"indexes the","Fragments":["array.","strings."]},{"Key":"the array.","Fragments":["If"]},{"Key":"array. If","Fragments":["the"]},{"Key":"the array","Fragments":["got","used","could","for","version.","are","size","elements,"]},{"Key":"array got","Fragments":["large,"]},{"Key":"got large,","Fragments":["one"]},{"Key":"large, one","Fragments":["would"]},{"Key":"one would","Fragments":["have","come","have"]},{"Key":"to count","Fragments":["by","keep","as","a","right","the","the"]},{"Key":"count by","Fragments":["hand"]},{"Key":"by hand","Fragments":["to","for"]},{"Key":"hand to","Fragments":["find","determine"]},{"Key":"find the","Fragments":["correct","latter","using","latter","C++11","first","```classify_statement```","shortest","usual","documentation","documentation","address","start","start","non-regex","full","right","shortest","correct","next"]},{"Key":"correct enumeration","Fragments":["when"]},{"Key":"enumeration when","Fragments":["updating"]},{"Key":"when updating","Fragments":["the"]},{"Key":"updating the","Fragments":["array,","includes."]},{"Key":"the array,","Fragments":["which"]},{"Key":"array, which","Fragments":["of"]},{"Key":"which of","Fragments":["course","the"]},{"Key":"of course","Fragments":["could","it's","this","subject","there's","little","putting","that"]},{"Key":"course could","Fragments":["lead"]},{"Key":"could lead","Fragments":["to"]},{"Key":"lead to","Fragments":["subtle","bugs","it","an","more","a","problems","extra","a","pollution","the","a","redundant"]},{"Key":"to subtle","Fragments":["errors."]},{"Key":"subtle errors.","Fragments":["Any"]},{"Key":"errors. Any","Fragments":["ideas"]},{"Key":"Any ideas","Fragments":["on","on"]},{"Key":"Nice work,","Fragments":["one"]},{"Key":"work, one","Fragments":["small"]},{"Key":"one small","Fragments":["thing:"]},{"Key":"way yelling","Fragments":["is"]},{"Key":"yelling is","Fragments":["detected"]},{"Key":"is detected","Fragments":["is","which"]},{"Key":"detected is","Fragments":["kind"]},{"Key":"is kind","Fragments":["of","of","of","of","of","of","of","of","of"]},{"Key":"of hard","Fragments":["to"]},{"Key":"read. You're","Fragments":["using"]},{"Key":"You're using","Fragments":["```boost::to_upper_copy```","C-style"]},{"Key":"using ```boost::to_upper_copy```","Fragments":["as"]},{"Key":"```boost::to_upper_copy``` as","Fragments":["a"]},{"Key":"a shortcut,","Fragments":["because"]},{"Key":"shortcut, because","Fragments":["you"]},{"Key":"to mess","Fragments":["with","the","with.","up","with","around"]},{"Key":"mess with","Fragments":["the","the"]},{"Key":"individual characters","Fragments":["directly."]},{"Key":"characters directly.","Fragments":["However,"]},{"Key":"directly. However,","Fragments":["you"]},{"Key":"However, you","Fragments":["end","will","must","might","could","may"]},{"Key":"you end","Fragments":["up","up"]},{"Key":"up complicating","Fragments":["your"]},{"Key":"complicating your","Fragments":["code"]},{"Key":"than if","Fragments":["you","else"]},{"Key":"you just","Fragments":["checked","check","want","need","gave","need","had","need","need","because","might","get"]},{"Key":"just checked","Fragments":["for","others"]},{"Key":"checked for","Fragments":["upper","empty()","emptyness","whether","emptyness","first,"]},{"Key":"for upper","Fragments":["case","case"]},{"Key":"case characters","Fragments":["yourself,","in","constituted"]},{"Key":"characters yourself,","Fragments":["because"]},{"Key":"yourself, because","Fragments":["now"]},{"Key":"because now","Fragments":["you"]},{"Key":"now you","Fragments":["need","have","have","have"]},{"Key":"add a","Fragments":["check","comment","line","new","null-terminated","test","check","kindergartener","test,","touch","new"]},{"Key":"one upper","Fragments":["case","case","case"]},{"Key":"case character","Fragments":["in","is"]},{"Key":"character in","Fragments":["the","container","front","the","both","the","a"]},{"Key":"How about","Fragments":["you","performance"]},{"Key":"about you","Fragments":["check"]},{"Key":"no lower","Fragments":["case","case","is","case"]},{"Key":"lower case","Fragments":["char","letter?\"","letter","conversion","then","again","letter","and","sorted","letters","initially","letters","letters","character","letters,","but","and","characters","characters"]},{"Key":"case char","Fragments":["and"]},{"Key":"char and","Fragments":["at","an"]},{"Key":"case char?","Fragments":["That"]},{"Key":"char? That","Fragments":["would"]},{"Key":"That would","Fragments":["have","also","actually","simplify","certainly","be","definitely","resolve"]},{"Key":"same effect","Fragments":["but","for","on","as"]},{"Key":"effect but","Fragments":["be"]},{"Key":"but be","Fragments":["more","able"]},{"Key":" Got","Fragments":["rid","rid","the","rid"]},{"Key":"the c-style","Fragments":["string"]},{"Key":"c-style string","Fragments":["and"]},{"Key":"and moved","Fragments":["more","its"]},{"Key":"moved more","Fragments":["functionality"]},{"Key":"more functionality","Fragments":["into","(like"]},{"Key":"into methods","Fragments":["in"]},{"Key":"in Message,","Fragments":["makes"]},{"Key":"Message, makes","Fragments":["the"]},{"Key":"readable in","Fragments":["bob.","my"]},{"Key":"the tips!","Fragments":["I"]},{"Key":"tips! I","Fragments":["made"]},{"Key":"made both","Fragments":["of"]},{"Key":"both of","Fragments":["your","which","them","our","my","these","those","which","them","these"]},{"Key":"your suggested","Fragments":["changes","syntax"]},{"Key":"suggested changes","Fragments":["in"]},{"Key":"changes in","Fragments":["the"]},{"Key":"iteration and","Fragments":["agree","this","added","it"]},{"Key":"and agree","Fragments":["that"]},{"Key":"new if","Fragments":["conditions"]},{"Key":"if conditions","Fragments":["are"]},{"Key":"conditions are","Fragments":["more","being"]},{"Key":"are more","Fragments":["succinct","performant.","likely","probable).","from","than","upper","scalable","descriptive.","C++,","flexible\u003c/li\u003e\u003c/ul\u003e"]},{"Key":"more succinct","Fragments":["and","with"]},{"Key":"succinct and","Fragments":["easier","elegant,","works.","gets"]},{"Key":"using c++11,","Fragments":["here"]},{"Key":"c++11, here","Fragments":["is"]},{"Key":"an idea","Fragments":["since","of"]},{"Key":"idea since","Fragments":["you","you"]},{"Key":"make code","Fragments":["more","shorter,","more"]},{"Key":"of strings","Fragments":["for","then.","before","lie"]},{"Key":"strings for","Fragments":["answers,","the"]},{"Key":"for answers,","Fragments":["use"]},{"Key":"answers, use","Fragments":["a"]},{"Key":"const map\u003canwser,","Fragments":["std::string\u003e"]},{"Key":"map\u003canwser, std::string\u003e","Fragments":["bob::anwsers"]},{"Key":"std::string\u003e bob::anwsers","Fragments":["="]},{"Key":"bob::anwsers =","Fragments":["{{OK,"]},{"Key":"= {{OK,","Fragments":["\"Sure.\"},"]},{"Key":"{{OK, \"Sure.\"},","Fragments":["{RELAX,"]},{"Key":"\"Sure.\"}, {RELAX,","Fragments":["\"Whoa,"]},{"Key":"{RELAX, \"Whoa,","Fragments":["chill"]},{"Key":"\"Whoa, chill","Fragments":["out!\"},","out!\"},...}```?","out!\"","out!\"","out!\"","out!\"","out!\"","out!\";","out!\",","out!\"","out!\"","out!\""]},{"Key":"chill out!\"},","Fragments":["{ANNOYED,"]},{"Key":"out!\"}, {ANNOYED,","Fragments":["\"Fine."]},{"Key":"{ANNOYED, \"Fine.","Fragments":["Be"]},{"Key":"\"Fine. Be","Fragments":["that","that","that","that","that","that","that","that","that"]},{"Key":"Be that","Fragments":["way!\"},","way!\",","way!\";`","way!\";","way!\"};","way!\";","way!\"","way!\"","way!\"`,","way!\";","way!\".","way!\"","way!\"`","way!\"`"]},{"Key":"that way!\"},","Fragments":["{INDIFFERENT,"]},{"Key":"way!\"}, {INDIFFERENT,","Fragments":["\"Whatever.\"}};"]},{"Key":"to worry","Fragments":["that","about","about","about","about"]},{"Key":"worry that","Fragments":["the"]},{"Key":"the numbering/ordering","Fragments":["of"]},{"Key":"numbering/ordering of","Fragments":["your"]},{"Key":"your enum","Fragments":["numbers"]},{"Key":"enum numbers","Fragments":["aligns"]},{"Key":"numbers aligns","Fragments":["perfectly"]},{"Key":"aligns perfectly","Fragments":["to"]},{"Key":"perfectly to","Fragments":["your"]},{"Key":"your array","Fragments":["of"]},{"Key":"That's actually","Fragments":["a"]},{"Key":"actually a","Fragments":["great","worse","singleton.","job"]},{"Key":"great idea.","Fragments":["Now","I"]},{"Key":"idea. Now","Fragments":["if"]},{"Key":"Now if","Fragments":["I","I","you"]},{"Key":"could just","Fragments":["get","include","store","make","return","write","include","check","post","as","return","sort","add","keep","return","do","change","put","be","return","as"]},{"Key":"just get","Fragments":["rid","the","some","rid","a"]},{"Key":"enum altogether","Fragments":[";)."]},{"Key":"altogether ;).","Fragments":["Perhaps"]},{"Key":";). Perhaps","Fragments":["a"]},{"Key":"Perhaps a","Fragments":["```const","boost::zip_iterator","very"]},{"Key":"a ```const","Fragments":["map\u003cstring,","std::string","std::string```."]},{"Key":"```const map\u003cstring,","Fragments":["string\u003e"]},{"Key":"map\u003cstring, string\u003e","Fragments":["answers"]},{"Key":"string\u003e answers","Fragments":["="]},{"Key":"answers =","Fragments":["{{\"OK\","]},{"Key":"= {{\"OK\",","Fragments":["\"Sure.\"},"]},{"Key":"{{\"OK\", \"Sure.\"},","Fragments":["{\"RELAX\","]},{"Key":"\"Sure.\"}, {\"RELAX\",","Fragments":["\"Whoa,"]},{"Key":"{\"RELAX\", \"Whoa,","Fragments":["chill"]},{"Key":"chill out!\"},...}```?","Fragments":["Since"]},{"Key":"out!\"},...}```? Since","Fragments":["```std::map```"]},{"Key":"Since ```std::map```","Fragments":["is"]},{"Key":"```std::map``` is","Fragments":["implemented","ordered."]},{"Key":"is implemented","Fragments":["as","later.","in"]},{"Key":"a red-black","Fragments":["tree","tree),"]},{"Key":"red-black tree","Fragments":["the"]},{"Key":"tree the","Fragments":["key"]},{"Key":"the key","Fragments":["type","of","is","is","is","to","isn't","inside","and","to","word,","already","and","of"]},{"Key":"key type","Fragments":["shouldn't"]},{"Key":"type shouldn't","Fragments":["make"]},{"Key":"shouldn't make","Fragments":["a"]},{"Key":"big performance","Fragments":["difference"]},{"Key":"performance difference","Fragments":["and"]},{"Key":"difference and","Fragments":["it"]},{"Key":"would clean","Fragments":["up"]},{"Key":"clean up","Fragments":["the","a","a"]},{"Key":"more while","Fragments":["keeping"]},{"Key":"while keeping","Fragments":["the","the","the","the"]},{"Key":"keeping the","Fragments":["same","roster","sieve","code","string","suggestion","same","class","code","helper","product"]},{"Key":"same level","Fragments":["of"]},{"Key":"the enum,","Fragments":["now","then"]},{"Key":"enum, now","Fragments":["it's"]},{"Key":"now it's","Fragments":["a","not"]},{"Key":"bit easier","Fragments":["to"]},{"Key":"to maintain","Fragments":["the","and","the","both","that","a","too","compatibility","it."]},{"Key":"maintain the","Fragments":["responses","string_ref,","size","code"]},{"Key":"responses without","Fragments":["loosing"]},{"Key":"without loosing","Fragments":["expressiveness."]},{"Key":"you externalize","Fragments":["the"]},{"Key":"externalize the","Fragments":["different","yelling"]},{"Key":"different logical","Fragments":["parts"]},{"Key":"logical parts","Fragments":["into"]},{"Key":"parts into","Fragments":["their"]},{"Key":"into their","Fragments":["own","final","own","respective"]},{"Key":"their own","Fragments":["function","``coord``","source","unique","namespaces","standards","code,","named","begin","namespace","completely","copies"]},{"Key":"and name","Fragments":["them"]},{"Key":"name them","Fragments":["appropriately,","(as"]},{"Key":"them appropriately,","Fragments":["you"]},{"Key":"appropriately, you","Fragments":["don't"]},{"Key":"a comment","Fragments":["every","that","to","I","that","or","\u0026","against","at","there","would","in"]},{"Key":"comment every","Fragments":["2"]},{"Key":"every 2","Fragments":["lines"]},{"Key":"2 lines","Fragments":["explaining"]},{"Key":"lines explaining","Fragments":["what"]},{"Key":"explaining what","Fragments":["they"]},{"Key":"what they","Fragments":["do","logically","literally","wanted,","are,","say","say.","say","do(might","are"]},{"Key":"they do","Fragments":[";).","the","try","more","what","not"]},{"Key":"do ;).","Fragments":["Also"]},{"Key":";). Also","Fragments":["the"]},{"Key":"Also the","Fragments":["code","way","string","map"]},{"Key":"code would","Fragments":["be","have","also","be","be","not","always","be","benefit"]},{"Key":"more modular,","Fragments":["easier"]},{"Key":"modular, easier","Fragments":["to"]},{"Key":"maintain and","Fragments":["reusable."]},{"Key":" Creating","Fragments":["an","map"]},{"Key":"Creating an","Fragments":["uppercase"]},{"Key":"uppercase copy","Fragments":["of"]},{"Key":"string incurs","Fragments":["an"]},{"Key":"incurs an","Fragments":["O(n)"]},{"Key":"an O(n)","Fragments":["memory","approach,"]},{"Key":"O(n) memory","Fragments":["penalty,"]},{"Key":"memory penalty,","Fragments":["so"]},{"Key":"penalty, so","Fragments":["if"]},{"Key":"so if","Fragments":["you","you","it","we"]},{"Key":"were going","Fragments":["to","for"]},{"Key":"this fast","Fragments":["and"]},{"Key":"fast and","Fragments":["lean","the","easy"]},{"Key":"and lean","Fragments":["you"]},{"Key":"lean you","Fragments":["should"]},{"Key":"should get","Fragments":["rid","used","an"]},{"Key":"that shortcut","Fragments":["and"]},{"Key":"implement an","Fragments":["algorithm","algorithm","empty"]},{"Key":"an algorithm","Fragments":["that","but","that","that","or","for","of","to","analysis"]},{"Key":"can tell","Fragments":["if","the","that","in"]},{"Key":"tell if","Fragments":["the","this","this"]},{"Key":"contains yelling","Fragments":["without"]},{"Key":"yelling without","Fragments":["making"]},{"Key":"without making","Fragments":["a","a","your"]},{"Key":"making a","Fragments":["copy.","copy.","copy","copy","deep","copy.","copy","`hamming`","copy","temporary","copy","efficient","class,","mistake"]},{"Key":"a bug","Fragments":["in","report","in","-","when","on","in","to","to"]},{"Key":"bug in","Fragments":["your","increment","the"]},{"Key":"your whitespace","Fragments":["removal"]},{"Key":"whitespace removal","Fragments":["function.","algorithm."]},{"Key":"removal function.","Fragments":["It"]},{"Key":"function. It","Fragments":["really","is","needed","might"]},{"Key":"It really","Fragments":["does"]},{"Key":"really does","Fragments":["only","anything"]},{"Key":"does only","Fragments":["remove"]},{"Key":"only remove","Fragments":["trailing"]},{"Key":"remove trailing","Fragments":["whitespace.","white"]},{"Key":"trailing whitespace.","Fragments":["If","The","Perhaps"]},{"Key":"whitespace. If","Fragments":["there"]},{"Key":"is leading","Fragments":["whitespace"]},{"Key":"leading whitespace","Fragments":["it"]},{"Key":"whitespace it","Fragments":["is","would"]},{"Key":"not removed.","Fragments":["Try"]},{"Key":"removed. Try","Fragments":["this"]},{"Key":"Try this","Fragments":["and"]},{"Key":"and see:","Fragments":["http://ideone.com/jVphqZ"]},{"Key":"also find","Fragments":["it","that"]},{"Key":"find it","Fragments":["a","is","almost","interesting","surprising","kind","helpful","less","useful","really","improves","just","really","difficult","distracting","interesting","neither","weird","difficult","good","helps"]},{"Key":"bit unreadable,","Fragments":["but"]},{"Key":"unreadable, but","Fragments":["that"]},{"Key":"that might","Fragments":["just","be","disappear.","explain","reasonably","be","be","be","broaden","be","have","be","apply"]},{"Key":"might just","Fragments":["be","be","as"]},{"Key":"just be","Fragments":["me","expensive.","boilerplate.","`matches_upper`?","a","better","{","always","an"]},{"Key":"be me","Fragments":["being","not"]},{"Key":"me being","Fragments":["not","a","lazy."]},{"Key":"being not","Fragments":["familiar"]},{"Key":"not familiar","Fragments":["with","with","with","with","with","with","enough","with"]},{"Key":"the fancy","Fragments":["library","boost"]},{"Key":"fancy library","Fragments":["functions"]},{"Key":"library functions","Fragments":["you","you're","for","makes","and","that","that","to"]},{"Key":"functions you","Fragments":["use","can","use","have"]},{"Key":"Now it's","Fragments":["much"]},{"Key":"it's much","Fragments":["more","cleaner","larger","more"]},{"Key":"readable, nice","Fragments":["work.","one!"]},{"Key":"nice work.","Fragments":["perhaps"]},{"Key":"work. perhaps","Fragments":["you"]},{"Key":"should externalize","Fragments":["the"]},{"Key":"the yelling","Fragments":["check","detection,"]},{"Key":"yelling check","Fragments":["into"]},{"Key":"check into","Fragments":["it's","a"]},{"Key":"into it's","Fragments":["own","own","own"]},{"Key":"own function,","Fragments":["or","removed","since"]},{"Key":"function, or","Fragments":["at","else","a"]},{"Key":"or at","Fragments":["least","worst,","a","least","least","least","least","least","least"]},{"Key":"least make","Fragments":["the"]},{"Key":"the ```alpha_upper```","Fragments":["and"]},{"Key":"```alpha_upper``` and","Fragments":["```alpha_lower```"]},{"Key":"and ```alpha_lower```","Fragments":["strings"]},{"Key":"```alpha_lower``` strings","Fragments":["a"]},{"Key":"strings a","Fragments":["named"]},{"Key":"a named","Fragments":["constant,","scope","lambda"]},{"Key":"named constant,","Fragments":["to"]},{"Key":"constant, to","Fragments":["make"]},{"Key":"the check","Fragments":["more","if","with","for","during","functions","functions","functions,","at","for","```word","to","for"]},{"Key":"check more","Fragments":["readable."]},{"Key":"It's probably","Fragments":["just","a","possible"]},{"Key":"just me","Fragments":["being"]},{"Key":"being a","Fragments":["const","reference,","bit","class.","different","beginner"]},{"Key":"const nazi,","Fragments":["but"]},{"Key":"nazi, but","Fragments":["I"]},{"Key":"good habit","Fragments":["to"]},{"Key":"habit to","Fragments":["always","be"]},{"Key":"to always","Fragments":["const","use","return","have"]},{"Key":"always const","Fragments":["all"]},{"Key":"const all","Fragments":["the"]},{"Key":"the things","Fragments":["you","that's","I","that"]},{"Key":"things you","Fragments":["don't","can","could"]},{"Key":"to modify,","Fragments":["especially"]},{"Key":"modify, especially","Fragments":["iterators"]},{"Key":"especially iterators","Fragments":["like"]},{"Key":"iterators like","Fragments":["the"]},{"Key":"char in","Fragments":["the","the","iMsg"]},{"Key":"for loop.","Fragments":["That","It","I'm","That","It","You","A","It","You","Then"]},{"Key":"loop. That","Fragments":["way,","way"]},{"Key":"That way,","Fragments":["when","m1","the"]},{"Key":"way, when","Fragments":["you"]},{"Key":"a mistake","Fragments":["and","and","on","in","while"]},{"Key":"mistake and","Fragments":["accidentally","get"]},{"Key":"and accidentally","Fragments":["write"]},{"Key":"accidentally write","Fragments":["to"]},{"Key":"write to","Fragments":["it,"]},{"Key":"to it,","Fragments":["the","and","and","but","const","so"]},{"Key":"it, the","Fragments":["compiler","two","correct"]},{"Key":"compiler will","Fragments":["catch","probably","probably","verify","find","decide","take","reason","automatically","handle"]},{"Key":"will catch","Fragments":["it."]},{"Key":"Your trim","Fragments":["function"]},{"Key":"trim function","Fragments":["should","by"]},{"Key":"function should","Fragments":["also","be","not","pass-by-value"]},{"Key":"should also","Fragments":["remove","do","submit","be","be","avoid","avoid","use"]},{"Key":"also remove","Fragments":["leading"]},{"Key":"leading whitespace.","Fragments":["While"]},{"Key":"whitespace. While","Fragments":["the"]},{"Key":"While the","Fragments":["current"]},{"Key":"current test","Fragments":["suite"]},{"Key":"suite doesn't","Fragments":["catch","test"]},{"Key":"doesn't catch","Fragments":["this"]},{"Key":"catch this","Fragments":["yet,","an"]},{"Key":"this yet,","Fragments":["it"]},{"Key":"yet, it","Fragments":["might"]},{"Key":"might become","Fragments":["a","more"]},{"Key":"problem later.","Fragments":["As"]},{"Key":"later. As","Fragments":["you","a"]},{"Key":"As you","Fragments":["can","said","point","are","use","can","return","don't","noticed","might","can"]},{"Key":"see here:","Fragments":["https://ideone.com/BCUaJb"]},{"Key":"here: https://ideone.com/BCUaJb","Fragments":["your"]},{"Key":"https://ideone.com/BCUaJb your","Fragments":["function"]},{"Key":"function only","Fragments":["removes","has"]},{"Key":"only removes","Fragments":["trailing","elements"]},{"Key":"removes trailing","Fragments":["whitespace."]},{"Key":"Also, you","Fragments":["could","may","can","can","can","are","might","don't","might","might","should"]},{"Key":"use ```\u003ccctype\u003e```'s","Fragments":["```is_upper```"]},{"Key":"```\u003ccctype\u003e```'s ```is_upper```","Fragments":["and"]},{"Key":"```is_upper``` and","Fragments":["```is_lower```","```is_lower```"]},{"Key":"and ```is_lower```","Fragments":["instead","and"]},{"Key":"```is_lower``` instead","Fragments":["of"]},{"Key":"of manually","Fragments":["checking","adding","checking"]},{"Key":"manually checking","Fragments":["the","ascii"]},{"Key":"checking the","Fragments":["char","length","histogram","?","type","edit","strings.","last","letter"]},{"Key":"char ranges.","Fragments":["This"]},{"Key":"ranges. This","Fragments":["would"]},{"Key":"This would","Fragments":["make","offer","also","prevent","be","express","be","also","be","avoid"]},{"Key":"very simple","Fragments":["and","conversion","so"]},{"Key":"simple and","Fragments":["naive","readable.","beautiful","readable.","straightforward","straight","avoided","compare","limit"]},{"Key":"and naive","Fragments":["code...."]},{"Key":"not 100%","Fragments":["happy","on","identical."]},{"Key":"100% happy","Fragments":["with"]},{"Key":"I sorted","Fragments":["out"]},{"Key":"sorted out","Fragments":["apostrophes","now,"]},{"Key":"out apostrophes","Fragments":["around"]},{"Key":"apostrophes around","Fragments":["words."]},{"Key":"around words.","Fragments":["It"]},{"Key":"words. It","Fragments":["seems"]},{"Key":"to trim","Fragments":["it","any","the","the"]},{"Key":"trim it","Fragments":["inside"]},{"Key":"inside ```tokenize```.","Fragments":["Any"]},{"Key":"```tokenize```. Any","Fragments":["ideas"]},{"Key":"this handy","Fragments":["cec"]},{"Key":"handy cec","Fragments":["library"]},{"Key":"cec library","Fragments":["you're"]},{"Key":"library you're","Fragments":["using"]},{"Key":"using to","Fragments":["avoid"]},{"Key":"avoid doing","Fragments":["the","any","primitive","work","subtraction","while","while","the","this,"]},{"Key":"doing the","Fragments":["actual","right","lookup","unnessecary","work","right","substr","right","non-space","non-space","lowercasing","same","same","regex_search(es)"]},{"Key":"actual work?","Fragments":[";)"]},{"Key":" Don't","Fragments":["you","worry,","give","equate","like","see","call","know","give"]},{"Key":"Don't you","Fragments":["think","think"]},{"Key":"you think","Fragments":["that","about","needs","the","would","it's","you","about","the","@lelah","it","that's","about","you","(i.e.","confuses/distracts","it","your","of","of","your","of","of","of","of","of","`d.isEmpty()`","about","about","about","it","about"]},{"Key":"that ```std::string","Fragments":["substr"]},{"Key":"```std::string substr","Fragments":["="]},{"Key":"substr =","Fragments":["str.substr(start,"]},{"Key":"= str.substr(start,","Fragments":["end"]},{"Key":"str.substr(start, end","Fragments":["-"]},{"Key":"end -","Fragments":["start"]},{"Key":"- start","Fragments":["-"]},{"Key":"start -","Fragments":["((str[end-1]"]},{"Key":"- ((str[end-1]","Fragments":["=="]},{"Key":"((str[end-1] ==","Fragments":["'\\'')"]},{"Key":"== '\\'')","Fragments":["?"]},{"Key":"'\\'') ?","Fragments":["1"]},{"Key":"? 1","Fragments":[":",":",":"]},{"Key":"1 :","Fragments":["0));```","0`","0;`,"]},{"Key":": 0));```","Fragments":["is"]},{"Key":"0));``` is","Fragments":["quite"]},{"Key":"quite a","Fragments":["lot","lot.","while","few","few","few","bit","lot","bit.","lot","good","few","bit!","few"]},{"Key":"lot for","Fragments":["one","your","your","them,","its"]},{"Key":"one line?","Fragments":[";)."]},{"Key":"line? ;).","Fragments":["It"]},{"Key":";). It","Fragments":["might"]},{"Key":"might improve","Fragments":["readability"]},{"Key":"readability if","Fragments":["you","you"]},{"Key":"you seperated","Fragments":["it"]},{"Key":"seperated it","Fragments":["into"]},{"Key":"into two","Fragments":["steps.","files."]},{"Key":"the while","Fragments":["loop"]},{"Key":"loop that","Fragments":["looks","just","follows","does"]},{"Key":"new word","Fragments":["into","has","with"]},{"Key":"word into","Fragments":["it's","the","a","a"]},{"Key":"function it","Fragments":["would","works","is","is"]},{"Key":"readability and","Fragments":["alleviate","efficiency."]},{"Key":"and alleviate","Fragments":["the"]},{"Key":"alleviate the","Fragments":["need"]},{"Key":" @clementina","Fragments":["The"]},{"Key":"@clementina The","Fragments":["C++"]},{"Key":"C++ Extended","Fragments":["Container"]},{"Key":"Extended Container","Fragments":["library"]},{"Key":"Container library","Fragments":["is"]},{"Key":"library is","Fragments":["something","supposed","header-only.","not"]},{"Key":"is something","Fragments":["I'm","a","like","like:","with"]},{"Key":"something I'm","Fragments":["developing"]},{"Key":"I'm developing","Fragments":["at"]},{"Key":"developing at","Fragments":["the"]},{"Key":"the moment","Fragments":["with","you","the","I","it's","a","you"]},{"Key":"moment with","Fragments":["the"]},{"Key":"the goal","Fragments":["of","without","of"]},{"Key":"goal of","Fragments":["adding","this"]},{"Key":"of adding","Fragments":["some","blank","two"]},{"Key":"adding some","Fragments":["convenient","comments","whitespace"]},{"Key":"some convenient","Fragments":["utility"]},{"Key":"convenient utility","Fragments":["functions"]},{"Key":"utility functions","Fragments":["and","with"]},{"Key":"and such","Fragments":["to"]},{"Key":"such to","Fragments":["C++"]},{"Key":"C++ containers.","Fragments":["Once"]},{"Key":"containers. Once","Fragments":["I"]},{"Key":"Once I","Fragments":["have","recognized","got"]},{"Key":"some free","Fragments":["time,"]},{"Key":"free time,","Fragments":["I"]},{"Key":"time, I","Fragments":["plan","can","aimed"]},{"Key":"I plan","Fragments":["on","to","to"]},{"Key":"plan on","Fragments":["getting"]},{"Key":"getting it","Fragments":["into","to"]},{"Key":"good shape","Fragments":["and"]},{"Key":"shape and","Fragments":["putting"]},{"Key":"and putting","Fragments":["it"]},{"Key":"putting it","Fragments":["on","in","inside"]},{"Key":"it on","Fragments":["github.","one","the","characters","a","(although","my","an","empty"]},{"Key":"on github.","Fragments":["The"]},{"Key":"github. The","Fragments":["exercises"]},{"Key":"The exercises","Fragments":["here","are"]},{"Key":"exercises here","Fragments":["seemed"]},{"Key":"here seemed","Fragments":["like"]},{"Key":"good pool","Fragments":["of"]},{"Key":"pool of","Fragments":["somewhat"]},{"Key":"of somewhat","Fragments":["practical"]},{"Key":"somewhat practical","Fragments":["problems"]},{"Key":"practical problems","Fragments":["to"]},{"Key":"problems to","Fragments":["test","find"]},{"Key":"to test","Fragments":["it","with","and","for","for","find_first_not_of","``\u0026pos","any","for","for","and","the","for","Bob's","for","our","for","for"]},{"Key":"test it","Fragments":["against.","against","myself,"]},{"Key":"When I","Fragments":["make","wrote","really","have","see","said","saw","run","saw","run","went","back","did","declare","test","ran","run"]},{"Key":"a public","Fragments":["repo,","default"]},{"Key":"public repo,","Fragments":["I"]},{"Key":"repo, I","Fragments":["will"]},{"Key":"add an","Fragments":["iteration","early"]},{"Key":"an iteration","Fragments":["or","over","that","2"]},{"Key":"iteration or","Fragments":["comment","pairs"]},{"Key":"or comment","Fragments":["with"]},{"Key":"comment with","Fragments":["a"]},{"Key":"Interesting, thanks","Fragments":["for"]},{"Key":"for clarifying.","Fragments":["If"]},{"Key":"clarifying. If","Fragments":["you"]},{"Key":"are looking","Fragments":["to","for","for"]},{"Key":"looking to","Fragments":["get","see"]},{"Key":"get feedback","Fragments":["it"]},{"Key":"feedback it","Fragments":["would"]},{"Key":"probably be","Fragments":["beneficial","a","const.","more","able","made","avoided.","a","expressed","an","wrong","split","inside","put","more","because","`wordlist.erase(wordlist.end()-1);`","to","a","a","some"]},{"Key":"be beneficial","Fragments":["to"]},{"Key":"beneficial to","Fragments":["include"]},{"Key":"functions you're","Fragments":["using","using"]},{"Key":"using here","Fragments":["so"]},{"Key":"here so","Fragments":["we","I'm"]},{"Key":"so we","Fragments":["can","have","can","could","can"]},{"Key":"see them","Fragments":["and"]},{"Key":"them and","Fragments":["comment","compare.","repush","writing","I","when","try","let","comparing,"]},{"Key":"and comment","Fragments":["on","on"]},{"Key":"comment on","Fragments":["them.","your","your","my","this","the","line","line"]},{"Key":"you decomposed","Fragments":["the"]},{"Key":"decomposed the","Fragments":["solution","problem"]},{"Key":"the solution","Fragments":["into","is","at","you","could","will","to","though!","is","for","is","becomes","looks","just"]},{"Key":"solution into","Fragments":["easy"]},{"Key":"into easy","Fragments":["to"]},{"Key":"understand functions.","Fragments":["What"]},{"Key":"functions. What","Fragments":["if"]},{"Key":"What if","Fragments":["you","we","the","someone","the","the"]},{"Key":"used regular","Fragments":["expressions"]},{"Key":"regular expressions","Fragments":["to","should","solution","was","when","but","on","would","(regex)","improve","so","to","I","can","as","instead","are","for","where"]},{"Key":"expressions to","Fragments":["tokenize","do","express"]},{"Key":"to tokenize","Fragments":["the","the","the","on"]},{"Key":"tokenize the","Fragments":["input?","input.","input."]},{"Key":"the input?","Fragments":["Did"]},{"Key":"input? Did","Fragments":["you"]},{"Key":"consider returning","Fragments":["vector","a","a"]},{"Key":"returning vector","Fragments":["from"]},{"Key":"vector from","Fragments":["tokenize","1st","2nd"]},{"Key":"from tokenize","Fragments":["as"]},{"Key":"tokenize as","Fragments":["opposed"]},{"Key":"as opposed","Fragments":["to","to","to","to","to","to"]},{"Key":"opposed to","Fragments":["modifying","just","either","how","ints","`*it","run-time","coming","any","a"]},{"Key":"to modifying","Fragments":["an"]},{"Key":"modifying an","Fragments":["input"]},{"Key":"an input","Fragments":["reference?","like"]},{"Key":" Big","Fragments":["Prime"]},{"Key":"Big Prime","Fragments":["test"]},{"Key":"Prime test","Fragments":["is"]},{"Key":"is slow","Fragments":["but"]},{"Key":"slow but","Fragments":["passes."]},{"Key":"but passes.","Fragments":["not"]},{"Key":"passes. not","Fragments":["sure"]},{"Key":"sure where","Fragments":["the","to"]},{"Key":"the slowdown","Fragments":["is."]},{"Key":" Actually","Fragments":["a"]},{"Key":"Actually a","Fragments":["regex"]},{"Key":"a regex","Fragments":["might","just","version","is","is","for","since","for"]},{"Key":"regex might","Fragments":["be"]},{"Key":"be much","Fragments":["cleaner","faster","worse","easier","better","more","easier","more","of","faster.","greater","smaller"]},{"Key":"much cleaner","Fragments":["here,","now","than","than","if","and","on"]},{"Key":"cleaner here,","Fragments":["thanks"]},{"Key":"here, thanks","Fragments":["for"]},{"Key":"reminding me.","Fragments":["I'll"]},{"Key":"me. I'll","Fragments":["try"]},{"Key":"I'll try","Fragments":["that","that.","to","to","them","to"]},{"Key":"try that","Fragments":["tomorrow","out."]},{"Key":"that tomorrow","Fragments":["when"]},{"Key":"tomorrow when","Fragments":["I"]},{"Key":"some spare","Fragments":["time.","time"]},{"Key":"a vector,","Fragments":["I","calling","which","and"]},{"Key":"vector, I","Fragments":["wasn't","could"]},{"Key":"sure about","Fragments":["the","returning","when","the","``place_queen(...)``.","what","the","implementing","this"]},{"Key":"to manage","Fragments":["memory"]},{"Key":"manage memory","Fragments":["here"]},{"Key":"memory here","Fragments":["as"]},{"Key":"come from","Fragments":["a","Python","a","a","the","a","the"]},{"Key":"a C","Fragments":["background.","approach","standard","background,","programmer,","header","program."]},{"Key":"C background.","Fragments":["I"]},{"Key":"background. I","Fragments":["used"]},{"Key":"the reference","Fragments":["to","an","an","from","does","thing,","count,","around","word","word.","string"]},{"Key":"avoid having","Fragments":["to","to","to","to","multiple","to"]},{"Key":"to copy","Fragments":["the","are","by","can","(e.g.,","it","construct.","every","the","\u0026","(Java,","it","the","that","the","them.","a","the","the","it,"]},{"Key":"copy the","Fragments":["entire","input","string","string","string","whole","string","string","```input```"]},{"Key":"entire vector","Fragments":["when"]},{"Key":"vector when","Fragments":["the","I'm","the"]},{"Key":"returns. However,","Fragments":["after"]},{"Key":"However, after","Fragments":["reading","going"]},{"Key":"after reading","Fragments":["up","first","first","first","the","the"]},{"Key":"reading up","Fragments":["on"]},{"Key":"up on","Fragments":["modern","my","that","here","that"]},{"Key":"on modern","Fragments":["compilers,","multi-core"]},{"Key":"modern compilers,","Fragments":["a"]},{"Key":"compilers, a","Fragments":["C++11"]},{"Key":"a C++11","Fragments":["compiler","compiler.","compiler."]},{"Key":"C++11 compiler","Fragments":["will"]},{"Key":"will probably","Fragments":["perform","be","be","end","appear","just"]},{"Key":"probably perform","Fragments":["return"]},{"Key":"perform return","Fragments":["value"]},{"Key":"return value","Fragments":["optimization","optimization","is","int?","from","in","of","of","for","is","of","type","of","(and","for","of","a","and","if","if","`mResponses.at(foo)`\u003c/ul\u003e\u003c/li\u003e","of","and","from","in","of","of"]},{"Key":"value optimization","Fragments":["so","but"]},{"Key":"optimization so","Fragments":["it"]},{"Key":"it doesn't","Fragments":["matter","seem","need","need","really","have","work,","add","use","match","change","need","come","exist","see","recognize","execute","have","need","cause","make","look","need","play","really","matter","work.","matter","really","need","do","output","seem","seem","matter"]},{"Key":"doesn't matter","Fragments":["and","too","for","much,","at"]},{"Key":"matter and","Fragments":["the"]},{"Key":"syntax will","Fragments":["look"]},{"Key":"will look","Fragments":["much","it","better","at"]},{"Key":"look much","Fragments":["better,"]},{"Key":"much better,","Fragments":["right?","and"]},{"Key":"wanted the","Fragments":["hey"]},{"Key":"the hey","Fragments":["method","function.","function.","function","function.","function"]},{"Key":"hey method","Fragments":["to"]},{"Key":"method to","Fragments":["have","use","make","make"]},{"Key":"have only","Fragments":["one","`\"1\"`","one","one"]},{"Key":"one exit","Fragments":["point,"]},{"Key":"exit point,","Fragments":["but","that"]},{"Key":"point, but","Fragments":["I'm"]},{"Key":"but I'm","Fragments":["not","mostly","pretty","not","not","not","not","curious","wondering","uncertain","not","curious","not","able","not","a","just","not","not","not","not"]},{"Key":"current assignment","Fragments":["to"]},{"Key":"assignment to","Fragments":["response","``other_queen``"]},{"Key":"to response","Fragments":["leads"]},{"Key":"response leads","Fragments":["to"]},{"Key":"leads to","Fragments":["unnecessary","at","truncation.","chaos","a","couple","a","more","buffer"]},{"Key":"to unnecessary","Fragments":["copies"]},{"Key":"unnecessary copies","Fragments":["of"]},{"Key":" `void","Fragments":["Trim();`"]},{"Key":"`void Trim();`","Fragments":["should"]},{"Key":"Trim();` should","Fragments":["be"]},{"Key":"be private","Fragments":["as","as","in","and"]},{"Key":"private as","Fragments":["it","long"]},{"Key":"it exposes","Fragments":["internals"]},{"Key":"exposes internals","Fragments":["otherwise."]},{"Key":"the tips.","Fragments":["I","I","Submitted"]},{"Key":"tips. I","Fragments":["agree","fixed"]},{"Key":"that they","Fragments":["make","are","can","no","can","can","are","aren't","don't","don't","are","both","are","may","both"]},{"Key":"they make","Fragments":["the","you","code","it","my","the","the"]},{"Key":"My understanding","Fragments":["is","of"]},{"Key":"understanding is","Fragments":["the"]},{"Key":"the c++","Fragments":["compiler","standard,","ropes","versions"]},{"Key":"c++ compiler","Fragments":["is"]},{"Key":"is obligated","Fragments":["to"]},{"Key":"obligated to","Fragments":["invoke"]},{"Key":"to invoke","Fragments":["the"]},{"Key":"invoke the","Fragments":["move"]},{"Key":"the move","Fragments":["constructor,","constructor"]},{"Key":"move constructor,","Fragments":["if"]},{"Key":"constructor, if","Fragments":["it"]},{"Key":"it exists.","Fragments":["This"]},{"Key":"exists. This","Fragments":["is"]},{"Key":"is known","Fragments":["as","to","at"]},{"Key":"known as","Fragments":["return","the","uniform","\"argument","the"]},{"Key":"as return","Fragments":["value","value","type","type","std::ceil(","values?"]},{"Key":"optimization but","Fragments":["it","with"]},{"Key":"seem like","Fragments":["an","a","they","the","nothing.","overkill.","the","that's","range","a","a","it's"]},{"Key":"like an","Fragments":["optimization","O(n)-thing","char","excuse","odd","unlikely","odd","expression","expression","actual","interesting"]},{"Key":"optimization to","Fragments":["me","be"]},{"Key":"me due","Fragments":["to"]},{"Key":"the 'obligation'","Fragments":["bit."]},{"Key":"'obligation' bit.","Fragments":["I"]},{"Key":"bit. I","Fragments":["feel","was","spent"]},{"Key":"feel this","Fragments":["style","is","is"]},{"Key":"this style","Fragments":["both","has"]},{"Key":"style both","Fragments":["reads"]},{"Key":"both reads","Fragments":["and"]},{"Key":"reads and","Fragments":["looks"]},{"Key":"and looks","Fragments":["better."]},{"Key":"the `sanatize_string(string\u0026","Fragments":["string)`"]},{"Key":"`sanatize_string(string\u0026 string)`","Fragments":["method."]},{"Key":"string)` method.","Fragments":["Does"]},{"Key":"method. Does","Fragments":["anyone"]},{"Key":"Does anyone","Fragments":["have"]},{"Key":"anyone have","Fragments":["some"]},{"Key":"more elegant","Fragments":["suggestions?","-","(i.e."]},{"Key":" Makes","Fragments":["sense,"]},{"Key":"Makes sense,","Fragments":["fixed.","definitevly.","thanks!"]},{"Key":"From what","Fragments":["I","I"]},{"Key":"I read","Fragments":["C++11","quite","about","the","`hey`","about","your"]},{"Key":"read C++11","Fragments":["allows"]},{"Key":"C++11 allows","Fragments":["the","us","definitions"]},{"Key":"allows the","Fragments":["compiler","interfaces","linker","compiler"]},{"Key":"compiler to","Fragments":["optimize","check","make","treat","optimize","(potentially)"]},{"Key":"optimize the","Fragments":["move"]},{"Key":"move constructor","Fragments":["away"]},{"Key":"constructor away","Fragments":["using"]},{"Key":"away using","Fragments":["move"]},{"Key":"using move","Fragments":["semantics"]},{"Key":"move semantics","Fragments":["if","in"]},{"Key":"semantics if","Fragments":["it's"]},{"Key":"it's an","Fragments":["rvalue,","object","improvement.","option","application/domain","interesting"]},{"Key":"an rvalue,","Fragments":["so"]},{"Key":"rvalue, so","Fragments":["it"]},{"Key":"actually faster","Fragments":["than","for"]},{"Key":"faster than","Fragments":["the","moving,","using","move.","this","`at()`","doing","using"]},{"Key":"the not","Fragments":["so","getting"]},{"Key":"not so","Fragments":["optimal","far,","idiomatic","bad","sure","sure","obvious","great.","sure","clear.","much."]},{"Key":"so optimal","Fragments":["\"return"]},{"Key":"optimal \"return","Fragments":["value"]},{"Key":"\"return value","Fragments":["optimization\"."]},{"Key":" Anyways,","Fragments":["I"]},{"Key":"Anyways, I","Fragments":["agree"]},{"Key":"lot cleaner","Fragments":["so","and"]},{"Key":"cleaner so","Fragments":["I'm"]},{"Key":"I'm going","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"to adopt","Fragments":["this"]},{"Key":"adopt this","Fragments":["in"]},{"Key":"my future","Fragments":["code."]},{"Key":"future code.","Fragments":["I"]},{"Key":"also redid","Fragments":["the"]},{"Key":"redid the","Fragments":["exercise"]},{"Key":"exercise with","Fragments":["regular","all"]},{"Key":"with regular","Fragments":["expressions,","expressions"]},{"Key":"regular expressions,","Fragments":["it's","but"]},{"Key":"expressions, it's","Fragments":["much"]},{"Key":"cleaner now","Fragments":[":)"]},{"Key":"The regex","Fragments":["is"]},{"Key":"regex is","Fragments":["a","right,","an","really","overkill","cheating","kind","a"]},{"Key":"bit complicated","Fragments":["because"]},{"Key":"complicated because","Fragments":["I"]},{"Key":"handle words","Fragments":["containing"]},{"Key":"words containing","Fragments":["an","apostrophes"]},{"Key":"containing an","Fragments":["apostrophe"]},{"Key":"an apostrophe","Fragments":["```'```,"]},{"Key":"apostrophe ```'```,","Fragments":["not"]},{"Key":"```'```, not","Fragments":["sure"]},{"Key":"this can","Fragments":["be","be","be","be","be","be","be","be","be","be"]},{"Key":"like about","Fragments":["this","`response`","your"]},{"Key":"about this","Fragments":["code","(depends","solution,","implementation","temporary.","way","code","topic","is","variant","and","though:","I","problem,","is","one,"]},{"Key":"loop over","Fragments":["the","COMMAS","all","the","the","to"]},{"Key":"the regex","Fragments":["matches.","I","and","facilities.","says","for","calls","version","be.","to","library","searches","which","was","test","for","idea.","iterator","separators","classes"]},{"Key":"regex matches.","Fragments":["It"]},{"Key":"matches. It","Fragments":["feels"]},{"Key":"It feels","Fragments":["like","a","a","like","like","like","like"]},{"Key":"like there","Fragments":["should","is,"]},{"Key":"there should","Fragments":["be","not","be","be","probably"]},{"Key":"a nicer","Fragments":["way"]},{"Key":"nicer way","Fragments":["to"]},{"Key":"this using","Fragments":["c++11","`const","string.pop_back()","`std::min`"]},{"Key":"using c++11","Fragments":["range","features"]},{"Key":"c++11 range","Fragments":["based","for,","for"]},{"Key":"for loops,","Fragments":["but","eg."]},{"Key":"loops, but","Fragments":["I"]},{"Key":"could figure","Fragments":["out","to"]},{"Key":"out how.","Fragments":["Any"]},{"Key":"how. Any","Fragments":["ideas?"]},{"Key":"feels a","Fragments":["bit","bit","little"]},{"Key":"bit like","Fragments":["your","premature","cheating","a"]},{"Key":"your trying","Fragments":["to"]},{"Key":"to crack","Fragments":["a","a"]},{"Key":"crack a","Fragments":["walnut","nut."]},{"Key":"a walnut","Fragments":["with"]},{"Key":"walnut with","Fragments":["a"]},{"Key":"a sledgehammer,","Fragments":["the"]},{"Key":"sledgehammer, the","Fragments":["way"]},{"Key":"regex just","Fragments":["to"]},{"Key":"just to","Fragments":["find","get","group","save","work","make","use","have","be","be","prevent","avoid","achieve"]},{"Key":"find out","Fragments":["if","that","whether","how"]},{"Key":"out if","Fragments":["the"]},{"Key":"input contains","Fragments":["letters,"]},{"Key":"contains letters,","Fragments":["or","only"]},{"Key":"letters, or","Fragments":["how","b)"]},{"Key":"or how","Fragments":["you","to","I"]},{"Key":"you convert","Fragments":["the","the"]},{"Key":"convert the","Fragments":["entire","original","string","`s`","loop"]},{"Key":"entire input","Fragments":["to"]},{"Key":"input to","Fragments":["upper","be"]},{"Key":"to upper","Fragments":["case","case","and"]},{"Key":"case just","Fragments":["so"]},{"Key":"just so","Fragments":["you","clear","I","happens"]},{"Key":"can check","Fragments":["if","if"]},{"Key":"if all","Fragments":["letters","chars","of","the","the"]},{"Key":"all letters","Fragments":["are"]},{"Key":"letters are","Fragments":["upper","found","present"]},{"Key":"are upper","Fragments":["case","case","case),"]},{"Key":"case by","Fragments":["comparing","comparing"]},{"Key":"comparing it","Fragments":["with","to"]},{"Key":"the input.","Fragments":["It","I","This","The","There","(None","Using"]},{"Key":"input. It","Fragments":["certainly","builds"]},{"Key":"It certainly","Fragments":["helps"]},{"Key":"certainly helps","Fragments":["to"]},{"Key":"helps to","Fragments":["avoid"]},{"Key":"doing any","Fragments":["heavy","arithmetic","math"]},{"Key":"any heavy","Fragments":["lifting"]},{"Key":"heavy lifting","Fragments":["yourself,","for"]},{"Key":"lifting yourself,","Fragments":["just"]},{"Key":"yourself, just","Fragments":["feels"]},{"Key":"just feels","Fragments":["a"]},{"Key":"bit too","Fragments":["much","ambitious","tightly","heavy","much","complicated.","much),"]},{"Key":"too much","Fragments":["to","work.","careful","work","trouble","of","in","of","code","either","for","so","effort.","here.","visual"]},{"Key":"much to","Fragments":["me","understand","explain","see,","talk","see."]},{"Key":"Also, is","Fragments":["there","it","it","there"]},{"Key":"is there","Fragments":["an","a","a","a","a","any","only","a","a","an","something","a","isn't"]},{"Key":"an advantage","Fragments":["to","over"]},{"Key":"advantage to","Fragments":["using","either,","making"]},{"Key":"using ```if/else","Fragments":["if/else"]},{"Key":"```if/else if/else","Fragments":["if```"]},{"Key":"if/else if```","Fragments":["over"]},{"Key":"if``` over","Fragments":["```if/if/return```?"]},{"Key":"over ```if/if/return```?","Fragments":["I"]},{"Key":"```if/if/return```? I","Fragments":["find"]},{"Key":"latter much","Fragments":["nicer"]},{"Key":"much nicer","Fragments":["to",":)"]},{"Key":"nicer to","Fragments":["read.","read","read."]},{"Key":"The standard","Fragments":["constructor","requires","talks","allows","requires"]},{"Key":"standard constructor","Fragments":["is"]},{"Key":"constructor is","Fragments":["implicitly","called,","a","called,","preferable","entered."]},{"Key":"is implicitly","Fragments":["called"]},{"Key":"implicitly called","Fragments":["for"]},{"Key":"for local","Fragments":["objects"]},{"Key":"local objects","Fragments":["in"]},{"Key":"objects in","Fragments":["a","your","a"]},{"Key":"a function,","Fragments":["so","that","and","it's","why"]},{"Key":"function, so","Fragments":["there","I'm","you","all","it's"]},{"Key":"so there","Fragments":["is","is","shouldn't","is","is","was","was"]},{"Key":"to explicitly","Fragments":["call","construct","put","include","use"]},{"Key":"explicitly call","Fragments":["it"]},{"Key":"call it","Fragments":["in","with","like","on"]},{"Key":"line 9.","Fragments":["This","I'll"]},{"Key":"9. This","Fragments":["should"]},{"Key":"also do","Fragments":["the","what's","certain"]},{"Key":"do the","Fragments":["job","nucleotide","work","work","const-reference,","calculations","reverse","to-lowering","\"check","same.","same","plus","counting","copy","composition","return","return","::tolower","trick,","least","same","job","same","same.","memory","same","same","following:","same","work","job","trick","refactoring","same","trick."]},{"Key":"the job","Fragments":["and","of","for","and","done","done."]},{"Key":"job and","Fragments":["is","that"]},{"Key":" ```std::map\u003cstd::string,","Fragments":["int\u003e"]},{"Key":"```std::map\u003cstd::string, int\u003e","Fragments":["counts;```"]},{"Key":"you handle","Fragments":["the"]},{"Key":"the counts","Fragments":["map","will","and"]},{"Key":"counts map","Fragments":["is"]},{"Key":"bit cumbersome.","Fragments":["The"]},{"Key":"cumbersome. The","Fragments":["```[]```"]},{"Key":"The ```[]```","Fragments":["operator"]},{"Key":"```[]``` operator","Fragments":["is"]},{"Key":"operator is","Fragments":["explicitly","really","just","used","now","the"]},{"Key":"is explicitly","Fragments":["defined","coded"]},{"Key":"explicitly defined","Fragments":["to","(e.g."]},{"Key":"defined to","Fragments":["insert","be","ignore"]},{"Key":"to insert","Fragments":["a","a"]},{"Key":"insert a","Fragments":["new","newline"]},{"Key":"new key","Fragments":["into"]},{"Key":"key into","Fragments":["the"]},{"Key":"map and","Fragments":["call","indirections.","manipulate","returning","will","return"]},{"Key":"and call","Fragments":["the","CleanUp","convert_recursive_impl","std::sort","them","strip","the"]},{"Key":"call the","Fragments":["default","method","function.","function","helper","first"]},{"Key":"default constructor","Fragments":["for","and","for","could","doesn't","with","and","and","behavior","is","private.","as","was"]},{"Key":"constructor for","Fragments":["its","`Message`","int","only"]},{"Key":"for its","Fragments":["value","result","error","size","entire","clarity.","being","`islower()`","benefit"]},{"Key":"its value","Fragments":["when"]},{"Key":"value when","Fragments":["a","they're"]},{"Key":"when a","Fragments":["key","string","newline","is","factor","variable","`string`","new","non","non-unix","question"]},{"Key":"a key","Fragments":["can","that","lookup."]},{"Key":"key can","Fragments":["not"]},{"Key":"can not","Fragments":["be","be","simply"]},{"Key":"be found:","Fragments":["*If"]},{"Key":"found: *If","Fragments":["k"]},{"Key":"*If k","Fragments":["does"]},{"Key":"k does","Fragments":["not","not"]},{"Key":"not match","Fragments":["the","the"]},{"Key":"key of","Fragments":["any","any"]},{"Key":"any element","Fragments":["in","in"]},{"Key":"element in","Fragments":["the","the","the","the","the","the"]},{"Key":"the container,","Fragments":["the"]},{"Key":"container, the","Fragments":["function"]},{"Key":"function inserts","Fragments":["a","a"]},{"Key":"inserts a","Fragments":["new","new","new","new"]},{"Key":"new element","Fragments":["with","with"]},{"Key":"element with","Fragments":["that","that"]},{"Key":"that key","Fragments":["and","and","and"]},{"Key":"key and","Fragments":["returns","returns","set","initializes","returns"]},{"Key":"to its","Fragments":["mapped","own","iteration.","implementation","mapped"]},{"Key":"its mapped","Fragments":["value.","value."]},{"Key":"mapped value.","Fragments":["[...]"]},{"Key":"value. [...]","Fragments":["the"]},{"Key":"[...] the","Fragments":["element"]},{"Key":"is constructed","Fragments":["using","from"]},{"Key":"constructed using","Fragments":["its"]},{"Key":"using its","Fragments":["default"]},{"Key":"its default","Fragments":["constructor.*"]},{"Key":"default constructor.*","Fragments":["[(see"]},{"Key":"constructor.* [(see","Fragments":["c++98"]},{"Key":"[(see c++98","Fragments":["reference)](http://www.cplusplus.com/reference/map/map/operator[]/)"]},{"Key":"way in","Fragments":["C++"]},{"Key":"C++ to","Fragments":["lower","pass","use"]},{"Key":"to lower","Fragments":["the","worst-case","the","case","case","case.","case","case","case.","case."]},{"Key":"lower the","Fragments":["visibility","boundary","verbosity"]},{"Key":"the visibility","Fragments":["level","of"]},{"Key":"visibility level","Fragments":["of"]},{"Key":"the `create_histogram`","Fragments":["method,"]},{"Key":"`create_histogram` method,","Fragments":["but"]},{"Key":"method, but","Fragments":["still","I","it","I"]},{"Key":"but still","Fragments":["have","readable.","it"]},{"Key":"still have","Fragments":["anagram","a","to","a","it.","just","to"]},{"Key":"have anagram","Fragments":["and"]},{"Key":"anagram and","Fragments":["subject","contains"]},{"Key":"and subject","Fragments":["having"]},{"Key":"subject having","Fragments":["access"]},{"Key":"having access","Fragments":["to"]},{"Key":"define i","Fragments":["at","as"]},{"Key":"i at","Fragments":["the"]},{"Key":"the function,","Fragments":["even","and","and","it's","but"]},{"Key":"function, even","Fragments":["C99"]},{"Key":"even C99","Fragments":["supports"]},{"Key":"C99 supports","Fragments":["defining"]},{"Key":"supports defining","Fragments":["it"]},{"Key":"defining it","Fragments":["in","as"]},{"Key":"Also it's","Fragments":["a"]},{"Key":"good habbit","Fragments":["to"]},{"Key":"habbit to","Fragments":["always"]},{"Key":"always use","Fragments":["braces","header","an"]},{"Key":"around the","Fragments":["body","sun.","single","64","construction","fact"]},{"Key":"the body","Fragments":["of","of","of","of","of"]},{"Key":"body of","Fragments":["conditionals.","the","the","the","a","the","the"]},{"Key":"of conditionals.","Fragments":["If"]},{"Key":"conditionals. If","Fragments":["you"]},{"Key":"ever come","Fragments":["back"]},{"Key":"come back","Fragments":["to","and","to","later","to","later.","at","(that","and"]},{"Key":"and add","Fragments":["a","stuff","can","that","responses","responses","responses","responses"]},{"Key":"a line","Fragments":["there,","above","in"]},{"Key":"line there,","Fragments":["things"]},{"Key":"there, things","Fragments":["are"]},{"Key":"things are","Fragments":["going","a","more","going"]},{"Key":"to break","Fragments":["and","exercism's","contains_alpha()","contains_alpha()","it"]},{"Key":"break and","Fragments":["it"]},{"Key":"is going","Fragments":["to","to","to","on.","to","to"]},{"Key":"be very","Fragments":["hard","explicit.","very","interesting","small.","formal","surprised"]},{"Key":"very hard","Fragments":["to"]},{"Key":"function ```isalnum```that","Fragments":["could"]},{"Key":"```isalnum```that could","Fragments":["simplify"]},{"Key":"could simplify","Fragments":["```containsLettersOrNumbers```.","those","the","this"]},{"Key":"simplify ```containsLettersOrNumbers```.","Fragments":["Otherwise"]},{"Key":"```containsLettersOrNumbers```. Otherwise","Fragments":["nice"]},{"Key":"Otherwise nice","Fragments":["use"]},{"Key":"nice use","Fragments":["of","of"]},{"Key":"of boost","Fragments":[":)","trim","junk.","used","functions","or","libraries","for","for","and"]},{"Key":"a ```size_t","Fragments":["histogram[sizeof(unsigned"]},{"Key":"```size_t histogram[sizeof(unsigned","Fragments":["char)];```"]},{"Key":"histogram[sizeof(unsigned char)];```","Fragments":["first,"]},{"Key":"char)];``` first,","Fragments":["but"]},{"Key":"first, but","Fragments":["after","the","that","that"]},{"Key":"but after","Fragments":["typedefing","the","looking","I"]},{"Key":"after typedefing","Fragments":["and"]},{"Key":"typedefing and","Fragments":["casting"]},{"Key":"and casting","Fragments":["things"]},{"Key":"casting things","Fragments":["around"]},{"Key":"things around","Fragments":["I","anymore."]},{"Key":"around I","Fragments":["realized"]},{"Key":"I realized","Fragments":["I","what","afterwards","you","that","there","that","this","I"]},{"Key":"realized I","Fragments":["was","didn't"]},{"Key":"was writing","Fragments":["C,"]},{"Key":"writing C,","Fragments":["not"]},{"Key":"C, not","Fragments":["C++"]},{"Key":"not C++","Fragments":[";)."]},{"Key":"C++ ;).","Fragments":["The"]},{"Key":";). The","Fragments":["hashmap"]},{"Key":"The hashmap","Fragments":["has"]},{"Key":"hashmap has","Fragments":["a"]},{"Key":"larger overhead","Fragments":["and"]},{"Key":"overhead and","Fragments":["memory","no"]},{"Key":"memory footprint,","Fragments":["but"]},{"Key":"footprint, but","Fragments":["the"]},{"Key":"the average","Fragments":["case"]},{"Key":"average case","Fragments":["complexity"]},{"Key":"case complexity","Fragments":["is","of"]},{"Key":"still the","Fragments":["same","COW"]},{"Key":"same so","Fragments":["it"]},{"Key":"The sorting","Fragments":["operation"]},{"Key":"sorting operation","Fragments":["makes"]},{"Key":"operation makes","Fragments":["the"]},{"Key":"code nice","Fragments":["to"]},{"Key":"to read,","Fragments":["but","and","thanks","but","it","thanks"]},{"Key":"read, but","Fragments":["introduces","for"]},{"Key":"but introduces","Fragments":["O(n*log(n))"]},{"Key":"introduces O(n*log(n))","Fragments":["complexity."]},{"Key":"O(n*log(n)) complexity.","Fragments":["This"]},{"Key":"complexity. This","Fragments":["can"]},{"Key":"This can","Fragments":["be","be","be","help","be","be","lead"]},{"Key":"in O(n)","Fragments":["by","time"]},{"Key":"O(n) by","Fragments":["using"]},{"Key":"using O(n)","Fragments":["memory."]},{"Key":"call `anagram::anagram`","Fragments":["a"]},{"Key":"`anagram::anagram` a","Fragments":["second"]},{"Key":"a second","Fragments":["time,","version,","thought,","pair","iteration","function","function.","iteration"]},{"Key":"second time,","Fragments":["it"]},{"Key":"time, it","Fragments":["messes","still","will","doesn't"]},{"Key":"it messes","Fragments":["up"]},{"Key":"messes up","Fragments":["the","your"]},{"Key":"the histogram.","Fragments":["You"]},{"Key":"histogram. You","Fragments":["should"]},{"Key":"should clear","Fragments":["the"]},{"Key":"clear the","Fragments":["map,","way","code"]},{"Key":"the map,","Fragments":["or","`value_type(x,","you","and","this"]},{"Key":"map, or","Fragments":["return"]},{"Key":"or return","Fragments":["a","0."]},{"Key":"a matcher","Fragments":["object"]},{"Key":"matcher object","Fragments":["on"]},{"Key":"object on","Fragments":["which"]},{"Key":"on which","Fragments":["`matches`","format"]},{"Key":"which `matches`","Fragments":["is"]},{"Key":"`matches` is","Fragments":["called."]},{"Key":" Cool,","Fragments":["thanks.","thanks","didn't","closing"]},{"Key":"Cool, thanks.","Fragments":["Obvious"]},{"Key":"thanks. Obvious","Fragments":["really,"]},{"Key":"Obvious really,","Fragments":["and"]},{"Key":"really, and","Fragments":["makes"]},{"Key":"Thanks, both","Fragments":["nice"]},{"Key":"both nice","Fragments":["suggestions."]},{"Key":"nice suggestions.","Fragments":["I"]},{"Key":"suggestions. I","Fragments":["wasn't","have","feel"]},{"Key":"wasn't aware","Fragments":["of","that","that","that","of","that","of"]},{"Key":"aware of","Fragments":["the","that","something","the","this)---that","that","the","the","boost::trim,","any","this"]},{"Key":"the empty()","Fragments":["method"]},{"Key":"empty() method","Fragments":["for"]},{"Key":"method for","Fragments":["strings","both","handling"]},{"Key":"for strings","Fragments":["-","I","that"]},{"Key":"strings -","Fragments":["I"]},{"Key":"- I","Fragments":["really","know","thought","dunno.","loathe","hadn't","just","feel","am","honestly","was","doubt","really","really","got","just","think","think","return","don't","think","only","guess","use","do","sugest","made","used"]},{"Key":"really should","Fragments":["read","be"]},{"Key":"should read","Fragments":["the"]},{"Key":"read the","Fragments":["documentation","strings","memory","first","read-me","intent","Kernighan","unit","string","[getting","code","instructions"]},{"Key":"the documentation","Fragments":["a","for","is","to","of"]},{"Key":"documentation a","Fragments":["bit"]},{"Key":"more carefully!","Fragments":[":)"]},{"Key":"Why didn't","Fragments":["you"]},{"Key":"didn't you","Fragments":["use"]},{"Key":"use ```std:map\u003cstd::string,","Fragments":["int\u003e```"]},{"Key":"```std:map\u003cstd::string, int\u003e```","Fragments":["for"]},{"Key":"int\u003e``` for","Fragments":["the"]},{"Key":"of numerals?","Fragments":["Not"]},{"Key":"numerals? Not","Fragments":["saying"]},{"Key":"Not saying","Fragments":["you"]},{"Key":"saying you","Fragments":["should"]},{"Key":"should have,","Fragments":["just"]},{"Key":"have, just","Fragments":["asking."]},{"Key":"just asking.","Fragments":[":)"]},{"Key":"the pairs","Fragments":["in"]},{"Key":"pairs in","Fragments":["that","the"]},{"Key":"that specific","Fragments":["order."]},{"Key":"specific order.","Fragments":["If"]},{"Key":"order. If","Fragments":["the"]},{"Key":"number was","Fragments":["5","not"]},{"Key":"was 5","Fragments":["and"]},{"Key":"5 and","Fragments":["I","7","7."]},{"Key":"tested ```\u003e=4```","Fragments":["before"]},{"Key":"```\u003e=4``` before","Fragments":["```\u003e=5```,"]},{"Key":"before ```\u003e=5```,","Fragments":["the"]},{"Key":"```\u003e=5```, the","Fragments":["(wrong)"]},{"Key":"the (wrong)","Fragments":["result"]},{"Key":"(wrong) result","Fragments":["would"]},{"Key":"result would","Fragments":["have"]},{"Key":"are right,","Fragments":["I","of","in","a","the","I","and","if","hoisting"]},{"Key":"could have","Fragments":["used","simply","been","used","used","done","moved","done","use","been","been","used","used.","just","changed","simply","a","done","used","used","been","thrown","a","initialized","used","used","used","problem","moved","improved","used","used","a","been","used","used","messed","returned","moved","been","done","changed","used","used","imported","passed","passed","passed","passed","iterated","easily"]},{"Key":"a ```std::map\u003cint,","Fragments":["std::string\u003e```"]},{"Key":"```std::map\u003cint, std::string\u003e```","Fragments":["as"]},{"Key":"std::string\u003e``` as","Fragments":["you"]},{"Key":"you did.","Fragments":["I"]},{"Key":"did. I","Fragments":["just"]},{"Key":"just did","Fragments":["not","the"]},{"Key":"think of","Fragments":["the","a","that.","that.","sorting?","iterators","the","extracting","a","a","several","specialized","using","that.","regular","that","something","this","inner","ways","a","a","a","how","how","how","how","a","anything","one","a","a","doing","it,","is","how.","two","your"]},{"Key":"the fact","Fragments":["that","that","that","that","that","that","that","it","is","that","that","i","that","that","that","that","that","that","that"]},{"Key":"fact that","Fragments":["```std::map```","you","`new_sys`","not","the","in","you","you","they","there","strings","CMakeLists.txt","even","the","I","you","it's","the"]},{"Key":"that ```std::map```","Fragments":["is"]},{"Key":"is ordered.","Fragments":["Thanks"]},{"Key":"ordered. Thanks","Fragments":["for"]},{"Key":" they","Fragments":["`hey`"]},{"Key":"they `hey`","Fragments":["function"]},{"Key":"`hey` function","Fragments":["is","you","makes","is","that","by","can"]},{"Key":"is making","Fragments":["an","a","my"]},{"Key":"an unnecessary","Fragments":["copy","copy","copy","overhead.","overhead.","check","conversion","copy."]},{"Key":"unnecessary copy","Fragments":["of","of","of","of","of","of","of","of","of","of"]},{"Key":"of `input`","Fragments":["this"]},{"Key":"`input` this","Fragments":["can"]},{"Key":"be avoided","Fragments":["by","at","at","at"]},{"Key":"avoided by","Fragments":["making"]},{"Key":"by making","Fragments":["it","bob"]},{"Key":"making it","Fragments":["a","variadic","a","efficient","easier"]},{"Key":"const reference.","Fragments":["`string","Though","Can't","For","To","You"]},{"Key":"reference. `string","Fragments":["hey(const"]},{"Key":"`string hey(const","Fragments":["string\u0026"]},{"Key":"for more","Fragments":["consistency","details:","dropping","kinds","compact","succinctly:","info.","complex","than"]},{"Key":"more consistency","Fragments":["in","with"]},{"Key":"consistency in","Fragments":["the"]},{"Key":"the `hey`","Fragments":["function","function","function","function","function,"]},{"Key":"function you","Fragments":["could","need","would","want","define","should","resort"]},{"Key":"could create","Fragments":["`isEmpty`"]},{"Key":"create `isEmpty`","Fragments":["and"]},{"Key":"`isEmpty` and","Fragments":["make"]},{"Key":"make that","Fragments":["part","assumption","change"]},{"Key":"the `if","Fragments":["else`","(e.second.size()"]},{"Key":"`if else`","Fragments":["chain."]},{"Key":"else` chain.","Fragments":["As"]},{"Key":"chain. As","Fragments":["it"]},{"Key":"As it","Fragments":["stands","stands","stands,"]},{"Key":"it stands","Fragments":["it","it"]},{"Key":"stands it","Fragments":["looks","should"]},{"Key":"case when,","Fragments":["in"]},{"Key":"when, in","Fragments":["my"]},{"Key":"my opinion,","Fragments":["it","is","not","the","bizarre","either","preferable"]},{"Key":"opinion, it","Fragments":["is"]},{"Key":"is of","Fragments":["the","a","course","type","type","absolutely"]},{"Key":"same class","Fragments":["of"]},{"Key":"class of","Fragments":["check"]},{"Key":"of check","Fragments":["as"]},{"Key":"check as","Fragments":["the","its"]},{"Key":"am following","Fragments":["the"]},{"Key":"following the","Fragments":["logic","pattern:","boost"]},{"Key":"logic correctly,","Fragments":["it"]},{"Key":"correctly, it","Fragments":["states"]},{"Key":"* there","Fragments":["is"]},{"Key":"one alpha","Fragments":["character"]},{"Key":"* All","Fragments":["alpha"]},{"Key":"All alpha","Fragments":["characters"]},{"Key":"alpha characters","Fragments":["are","are"]},{"Key":"characters are","Fragments":["upper","upper/lowercase.","on","not","non-alphanumeric,","ordered.","uppercase"]},{"Key":"think this","Fragments":["can","passes","only","function","implementation","(the","will","is","way","has","is","looks","is","is","version","keeps","is","optimization","way","matches","code","is","is","solution","should","one","is","really","would"]},{"Key":" Which","Fragments":["is","ubuntu","is","makes"]},{"Key":"Which is","Fragments":["to","silly,","fine.","kinda","worth","why","really","a"]},{"Key":"* It","Fragments":["must","must","means","is","seems"]},{"Key":"It must","Fragments":["contain","not"]},{"Key":"must contain","Fragments":["1","at"]},{"Key":"contain 1","Fragments":["uppercase"]},{"Key":"1 uppercase","Fragments":["letter."]},{"Key":"must not","Fragments":["contain"]},{"Key":"not contain","Fragments":["a","``'1'``","461,"]},{"Key":"contain a","Fragments":["lowercase"]},{"Key":"a lowercase","Fragments":["letter.","string","name","char;","value","character."]},{"Key":" Great","Fragments":["remark","improvement.","improvement!","use","sutff.","idea.","logic","job!","finds,","idea.","work."]},{"Key":"Great remark","Fragments":["@sigurd,"]},{"Key":"remark @sigurd,","Fragments":["thanks!"]},{"Key":" Single","Fragments":["argument","argument","argument","argument","argument"]},{"Key":"Single argument","Fragments":["constructors","constructors","constructors","constructors","constructors","constructors","constructors"]},{"Key":"argument constructors","Fragments":["should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should","should"]},{"Key":"constructors should","Fragments":["be","be","be","be","be","be","be","be","be","be","be","be","me","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be","be"]},{"Key":"be marked","Fragments":["`explicit`","*explicit*","**explicit**","**explicit**","**explicit**","explicit","explicit","explict","explicit","explicit","explicit","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explict**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**","**explicit**"]},{"Key":"marked `explicit`","Fragments":["to"]},{"Key":"`explicit` to","Fragments":["avoid"]},{"Key":"avoid implicit","Fragments":["conversion.","conversion.","conversion.","conversion.","conversion","conversion.","conversion","conversion.","conversions.","conversion","conversion.","conversion.","conversion.","conversion"]},{"Key":" the","Fragments":["constructor","`hey`","algorithm","test","constructor","string","**SecondAsFractionOfPlanetYear**","OrbitalSeconds","ratios","only","only","problem","conversion","algorithm","test","\"always","class","'equal'","new","information","author","`for(char","function","occurence","problem","basic"]},{"Key":"for `Message`","Fragments":["makes"]},{"Key":"`Message` makes","Fragments":["an"]},{"Key":"makes an","Fragments":["unnecessary","unnecessary","if-statement"]},{"Key":" `explicit","Fragments":["Message(const"]},{"Key":"`explicit Message(const","Fragments":["string\u0026"]},{"Key":"Message(const string\u0026","Fragments":["message);`"]},{"Key":"function makes","Fragments":["an"]},{"Key":" `static","Fragments":["string","std::string"]},{"Key":"`static string","Fragments":["hey(const","str`."]},{"Key":" returing","Fragments":["a"]},{"Key":"returing a","Fragments":["`const"]},{"Key":"`const bool`","Fragments":["doesn't","or","inside"]},{"Key":"bool` doesn't","Fragments":["do"]},{"Key":"do anything.","Fragments":["If"]},{"Key":"anything. If","Fragments":["you"]},{"Key":"meant that","Fragments":["the"]},{"Key":"are `const`","Fragments":["(which","themselves."]},{"Key":"`const` (which","Fragments":["I"]},{"Key":"(which I","Fragments":["think","assume","noticed","think"]},{"Key":"think they","Fragments":["are","would"]},{"Key":"your case)","Fragments":["than"]},{"Key":"case) than","Fragments":["they"]},{"Key":"than they","Fragments":["should"]},{"Key":"they should","Fragments":["read","return","be"]},{"Key":" `bool","Fragments":["IsYelling()"]},{"Key":"`bool IsYelling()","Fragments":["const;`"]},{"Key":"of map","Fragments":["is","is","itself.","for","defaut"]},{"Key":"bit heavy.","Fragments":["I"]},{"Key":"heavy. I","Fragments":["suppose"]},{"Key":"suppose needing","Fragments":["to"]},{"Key":"needing to","Fragments":["lookup","save","handle"]},{"Key":"to lookup","Fragments":["the","tgmath.h"]},{"Key":"lookup the","Fragments":["values"]},{"Key":"the values","Fragments":["dynamically","`false`","will","in","range"]},{"Key":"values dynamically","Fragments":["could"]},{"Key":"dynamically could","Fragments":["be"]},{"Key":"useful for","Fragments":["localization","extending","this"]},{"Key":"for localization","Fragments":["(as"]},{"Key":"localization (as","Fragments":["opposed"]},{"Key":"(as opposed","Fragments":["to","to"]},{"Key":"to just","Fragments":["using","use","set-up","throw","sort","adding,","define","declare","keep","do...","ignore","they","moving","the","assume","ignore","return","put","store"]},{"Key":"using constants)","Fragments":["but"]},{"Key":"constants) but","Fragments":["even"]},{"Key":"even so,","Fragments":["you","since"]},{"Key":"so, you","Fragments":["can"]},{"Key":"an `enum`","Fragments":["to"]},{"Key":"`enum` to","Fragments":["index"]},{"Key":"to index","Fragments":["into","into","through","```s1[5]"]},{"Key":"into an","Fragments":["array","anonymous","int.","ordinary","anonymous","anonymous","Intro","int"]},{"Key":"array to","Fragments":["save","represent","do"]},{"Key":"to save","Fragments":["memory","it.","a","before","a","any","a","an","some","a"]},{"Key":"save memory","Fragments":["on"]},{"Key":"memory on","Fragments":["the","two"]},{"Key":"The functions","Fragments":["should","```is_lower```","`all_of`,"]},{"Key":"be taking","Fragments":["the","out"]},{"Key":"taking the","Fragments":["strings","time","advice","argument"]},{"Key":"strings as","Fragments":["const","constants","well.","```const","const","return","const","global","constants","much","reference"]},{"Key":"as const","Fragments":["references","reference","if","variables","reference?","is","string","reference.","references","correctness","variables."]},{"Key":"references to","Fragments":["avoid","input-only","things","make","local"]},{"Key":"avoid yet","Fragments":["another"]},{"Key":"yet another","Fragments":["copy","thing"]},{"Key":"another copy","Fragments":["in"]},{"Key":"copy in","Fragments":["the","anagrams","`downcase()`","the"]},{"Key":"the IsAllCaps","Fragments":["method"]},{"Key":"IsAllCaps method","Fragments":["by"]},{"Key":"`return boost::all(input,","Fragments":["boost::is_upper());`"]},{"Key":"boost::all(input, boost::is_upper());`","Fragments":["if"]},{"Key":"boost::is_upper());` if","Fragments":["for"]},{"Key":"if for","Fragments":["whatever","example","no","lower-case"]},{"Key":"for whatever","Fragments":["reason","reason..."]},{"Key":"whatever reason","Fragments":["this"]},{"Key":"reason this","Fragments":["misclassifies"]},{"Key":"this misclassifies","Fragments":["punctuation"]},{"Key":"misclassifies punctuation","Fragments":["then"]},{"Key":"punctuation then","Fragments":["you"]},{"Key":"then you","Fragments":["can","don't","can","don't","can","have","might","could","should","shouldn't","are","take","will"]},{"Key":"just `||`","Fragments":["the"]},{"Key":"`||` the","Fragments":["other"]},{"Key":"other predicates","Fragments":["into"]},{"Key":"predicates into","Fragments":["it."]},{"Key":" `IsJustBlanks`","Fragments":["can"]},{"Key":"`IsJustBlanks` can","Fragments":["be"]},{"Key":"`return !boost::all(input,","Fragments":["boost::is_space());`"]},{"Key":" calling","Fragments":["`std::string`'s"]},{"Key":"calling `std::string`'s","Fragments":["`back`"]},{"Key":"`std::string`'s `back`","Fragments":["method"]},{"Key":"`back` method","Fragments":["on"]},{"Key":"method on","Fragments":["an","the","this","a"]},{"Key":"undefined. See","Fragments":["exception"]},{"Key":"See exception","Fragments":["safety"]},{"Key":"exception safety","Fragments":["http://www.cplusplus.com/reference/string/string/back/#exceptions"]},{"Key":"I suggest","Fragments":["`return","using","you","having","adding","you","adding","the","a","an","that","using","you","putting","referring","its"]},{"Key":"suggest `return","Fragments":["!input.empty()"]},{"Key":"`return !input.empty()","Fragments":["\u0026\u0026"]},{"Key":"!input.empty() \u0026\u0026","Fragments":["input.back()"]},{"Key":"\u0026\u0026 input.back()","Fragments":["=="]},{"Key":"input.back() ==","Fragments":["'?';`","'?';"]},{"Key":"i think","Fragments":["you","you","that","it","this","i'll","it's","it","[this](http://exercism.io/submissions/2431ab859b6241f093bcda42cc04b17f)","iteration","the"]},{"Key":"`static std::string","Fragments":["hey(const"]},{"Key":"std::string hey(const","Fragments":["std::string\u0026","std::string","std::string\u0026","std::string\u0026","std::string\u0026","std::string\u0026"]},{"Key":"hey(const std::string\u0026","Fragments":["s)","sentence)","something)","something)","str)"]},{"Key":"std::string\u0026 s)","Fragments":["const;`"]},{"Key":" without","Fragments":["the","looking","checking,","requiring"]},{"Key":"the `\u0026`","Fragments":["you"]},{"Key":"`\u0026` you","Fragments":["have"]},{"Key":"have an","Fragments":["extra","`enum`,","advantage","implentation","explicit","older","array","error","up-to-date","in-place","entry","error.","intention-revealing"]},{"Key":"extra copy","Fragments":["of","of","of","is","is","of","by","operations"]},{"Key":"the string.","Fragments":["the","multiple","Worst-case","But","But","I","This","However","Without","Otherwise,","Why","Change","Finally","For","Why"]},{"Key":"string. the","Fragments":["const"]},{"Key":"const at","Fragments":["the","the"]},{"Key":"declaration is","Fragments":["the","short,","why","really"]},{"Key":"the one","Fragments":["that","overload","function","it","I","who","function","of","that","that","hand,","that","on"]},{"Key":"one that","Fragments":["says","becomes","was","requires","you","doesn't","needs"]},{"Key":"that says","Fragments":["\"this"]},{"Key":"says \"this","Fragments":["doesn't","is"]},{"Key":"\"this doesn't","Fragments":["mutate"]},{"Key":"doesn't mutate","Fragments":["the"]},{"Key":"mutate the","Fragments":["object\""]},{"Key":"I believe","Fragments":["this","`std::string::clear`","I","handling","this","one","in","that","it's","i","process_encrypted","that","you","the","that","both","calling","my","my","that","my","you","that","that","that","that","that","that","the"]},{"Key":"believe this","Fragments":["fails","is","is"]},{"Key":"this fails","Fragments":["one"]},{"Key":"fails one","Fragments":["of"]},{"Key":"one of","Fragments":["the","the","these","the","the","the","the","the","the","the","the","those","the","the","my","us","the","the","the","these","those","the","the","the","the","the","the","the","the","them","the","the","the","the","them","the","my","the","them","the","these","the","the","you","the","the","the","the","the","C++","them.","my","them."]},{"Key":"test cases.","Fragments":["Specifically","For","I'll"]},{"Key":"cases. Specifically","Fragments":["when"]},{"Key":"Specifically when","Fragments":["running"]},{"Key":"when running","Fragments":["this"]},{"Key":"running this","Fragments":["code"]},{"Key":"code i","Fragments":["get"]},{"Key":" Running","Fragments":["16","1","this","13"]},{"Key":"Running 16","Fragments":["test"]},{"Key":"16 test","Fragments":["cases..."]},{"Key":" /home/vidder/exercism/cpp/bob/bob_test.cpp(12):","Fragments":["fatal"]},{"Key":"/home/vidder/exercism/cpp/bob/bob_test.cpp(12): fatal","Fragments":["error"]},{"Key":"fatal error","Fragments":["in","in","in","in","in","in","in","in"]},{"Key":"error in","Fragments":["\"shouting\":","\"forceful_questions\":","\"shouting_numbers\":","\"shouting_with_special_characters\":","\"shouting_with_no_exclamation_mark\":","your","your","the","\"silence\":","\"with_apostrophes\":","\"with_apostrophes_as_quotes\":","your"]},{"Key":"in \"shouting\":","Fragments":["critical"]},{"Key":"\"shouting\": critical","Fragments":["check"]},{"Key":"critical check","Fragments":["\"Whoa,","\"Whoa,","\"Whoa,","\"Whoa,","\"Whoa,","{","{"]},{"Key":"check \"Whoa,","Fragments":["chill","chill","chill","chill","chill"]},{"Key":"chill out!\"","Fragments":["==","==","==","==","==","instead","is","return,","response."]},{"Key":"out!\" ==","Fragments":["bob::hey(\"WATCH","bob::hey(\"WHAT","bob::hey(\"1,","bob::hey(\"ZOMG","bob::hey(\"I"]},{"Key":"== bob::hey(\"WATCH","Fragments":["OUT!\")"]},{"Key":"bob::hey(\"WATCH OUT!\")","Fragments":["failed"]},{"Key":"OUT!\") failed","Fragments":["[Whoa,"]},{"Key":"failed [Whoa,","Fragments":["chill","chill","chill","chill","chill"]},{"Key":"[Whoa, chill","Fragments":["out!","out!","out!","out!","out!"]},{"Key":"chill out!","Fragments":["!=","!=","!=","!=","!="]},{"Key":"out! !=","Fragments":["Whatever.]","Sure.]","Whatever.]","Whatever.]","Whatever.]"]},{"Key":" /home/vidder/exercism/cpp/bob/bob_test.cpp(32):","Fragments":["fatal"]},{"Key":"/home/vidder/exercism/cpp/bob/bob_test.cpp(32): fatal","Fragments":["error"]},{"Key":"in \"forceful_questions\":","Fragments":["critical"]},{"Key":"\"forceful_questions\": critical","Fragments":["check"]},{"Key":"== bob::hey(\"WHAT","Fragments":["THE"]},{"Key":"bob::hey(\"WHAT THE","Fragments":["HELL"]},{"Key":"THE HELL","Fragments":["WERE"]},{"Key":"HELL WERE","Fragments":["YOU"]},{"Key":"WERE YOU","Fragments":["THINKING?\")"]},{"Key":"YOU THINKING?\")","Fragments":["failed"]},{"Key":"THINKING?\") failed","Fragments":["[Whoa,"]},{"Key":" /home/vidder/exercism/cpp/bob/bob_test.cpp(37):","Fragments":["fatal"]},{"Key":"/home/vidder/exercism/cpp/bob/bob_test.cpp(37): fatal","Fragments":["error"]},{"Key":"in \"shouting_numbers\":","Fragments":["critical"]},{"Key":"\"shouting_numbers\": critical","Fragments":["check"]},{"Key":"== bob::hey(\"1,","Fragments":["2,"]},{"Key":"bob::hey(\"1, 2,","Fragments":["3"]},{"Key":"2, 3","Fragments":["GO!\")","test"]},{"Key":"3 GO!\")","Fragments":["failed"]},{"Key":"GO!\") failed","Fragments":["[Whoa,"]},{"Key":" /home/vidder/exercism/cpp/bob/bob_test.cpp(52):","Fragments":["fatal"]},{"Key":"/home/vidder/exercism/cpp/bob/bob_test.cpp(52): fatal","Fragments":["error"]},{"Key":"in \"shouting_with_special_characters\":","Fragments":["critical"]},{"Key":"\"shouting_with_special_characters\": critical","Fragments":["check"]},{"Key":"== bob::hey(\"ZOMG","Fragments":["THE"]},{"Key":"bob::hey(\"ZOMG THE","Fragments":["%^*@#$(*^"]},{"Key":"THE %^*@#$(*^","Fragments":["ZOMBIES"]},{"Key":"%^*@#$(*^ ZOMBIES","Fragments":["ARE"]},{"Key":"ZOMBIES ARE","Fragments":["COMING!!11!!1!\")"]},{"Key":"ARE COMING!!11!!1!\")","Fragments":["failed"]},{"Key":"COMING!!11!!1!\") failed","Fragments":["[Whoa,"]},{"Key":" /home/vidder/exercism/cpp/bob/bob_test.cpp(57):","Fragments":["fatal"]},{"Key":"/home/vidder/exercism/cpp/bob/bob_test.cpp(57): fatal","Fragments":["error"]},{"Key":"in \"shouting_with_no_exclamation_mark\":","Fragments":["critical"]},{"Key":"\"shouting_with_no_exclamation_mark\": critical","Fragments":["check"]},{"Key":"== bob::hey(\"I","Fragments":["HATE"]},{"Key":"bob::hey(\"I HATE","Fragments":["YOU\")"]},{"Key":"HATE YOU\")","Fragments":["failed"]},{"Key":"YOU\") failed","Fragments":["[Whoa,"]},{"Key":" ***","Fragments":["5","No","2"]},{"Key":"*** 5","Fragments":["failures"]},{"Key":"5 failures","Fragments":["detected"]},{"Key":"failures detected","Fragments":["in","in"]},{"Key":"detected in","Fragments":["test","test"]},{"Key":"in test","Fragments":["suite","file","case","suite"]},{"Key":"suite \"Master","Fragments":["Test","Test"]},{"Key":"\"Master Test","Fragments":["Suite\"","Suite\""]},{"Key":" this","Fragments":["is","will","will","can","seems","isn't","exercise"]},{"Key":"is due","Fragments":["to","to"]},{"Key":"to `is_upper`","Fragments":["being"]},{"Key":"`is_upper` being","Fragments":["insufficient"]},{"Key":"being insufficient","Fragments":["to"]},{"Key":"insufficient to","Fragments":["the"]},{"Key":"can combine","Fragments":["the"]},{"Key":"combine the","Fragments":["no_lowercase","two","header"]},{"Key":"the no_lowercase","Fragments":["and"]},{"Key":"no_lowercase and","Fragments":["has_uppercase"]},{"Key":"and has_uppercase","Fragments":["regexes"]},{"Key":"has_uppercase regexes","Fragments":["into"]},{"Key":" since","Fragments":["you"]},{"Key":"an `enum`,","Fragments":["did"]},{"Key":"`enum`, did","Fragments":["you"]},{"Key":"consider using","Fragments":["a","a","something","map.at()","map's","the","some","a","Standard","std::array\u003cint,26\u003e","ranges*","array","`isalpha()`","an","an","iterators","iterators","an","const"]},{"Key":"to scan","Fragments":["the","through"]},{"Key":"scan the","Fragments":["input","input"]},{"Key":"input string","Fragments":["in","in","is","is","is","is","is","(or","are","contains","is","inside","and","is","ends","each","more","to","a","is","always","is","length.","(you'll","in"]},{"Key":"string in","Fragments":["one","the","by","the","order","with","each","line","the","the","your","as","that","the","the","your","these"]},{"Key":"one pass.","Fragments":["I","But"]},{"Key":"pass. I","Fragments":["guess"]},{"Key":"very maintainable","Fragments":["given"]},{"Key":"maintainable given","Fragments":["the"]},{"Key":"given the","Fragments":["different","straightforward","way"]},{"Key":"different special","Fragments":["cases."]},{"Key":"I enjoyed","Fragments":["learning","it"]},{"Key":"enjoyed learning","Fragments":["about"]},{"Key":"about these","Fragments":["boost:all","as"]},{"Key":"these boost:all","Fragments":["constructions."]},{"Key":"the accidental","Fragments":["wrong"]},{"Key":"accidental wrong","Fragments":["headers"]},{"Key":"wrong headers","Fragments":["in"]},{"Key":"headers in","Fragments":["word_count.cpp","there"]},{"Key":" Given","Fragments":["your","that","that,","the"]},{"Key":"Given your","Fragments":["focus"]},{"Key":"your focus","Fragments":["on"]},{"Key":"focus on","Fragments":["speed.","(e.g.","making","simplified"]},{"Key":"on speed.","Fragments":["I"]},{"Key":"speed. I","Fragments":["believe"]},{"Key":"believe `std::string::clear`","Fragments":["is"]},{"Key":"`std::string::clear` is","Fragments":["better"]},{"Key":"than setting","Fragments":["it"]},{"Key":"setting it","Fragments":["to","to"]},{"Key":"empty string.","Fragments":["This","Note","It's","I","So","However,","You're","A"]},{"Key":"string. This","Fragments":["_should_","is","*can*"]},{"Key":"This _should_","Fragments":["result"]},{"Key":"_should_ result","Fragments":["in"]},{"Key":"in simply","Fragments":["setting"]},{"Key":"simply setting","Fragments":["the"]},{"Key":"the internal","Fragments":["length","buff[0]","details","database.","implementation."]},{"Key":"internal length","Fragments":["variable"]},{"Key":"length variable","Fragments":["to"]},{"Key":"variable to","Fragments":["0,","return","help","help","help","help","help","help","be","return","something","get","refer"]},{"Key":"to 0,","Fragments":["and"]},{"Key":"0, and","Fragments":["the","I","both"]},{"Key":"internal buff[0]","Fragments":["="]},{"Key":"buff[0] =","Fragments":["0;","0;"]},{"Key":"= 0;","Fragments":["(two",")","i","result","result","i","i","i","i","i","i","i","i"]},{"Key":"0; (two","Fragments":["operations)"]},{"Key":"(two operations)","Fragments":["as"]},{"Key":"operations) as","Fragments":["opposed"]},{"Key":"to either","Fragments":["the","*reserve*","have","find"]},{"Key":"either the","Fragments":["implicit","header","last"]},{"Key":"the implicit","Fragments":["conversion","conversion","conversion","contract","contract"]},{"Key":"implicit conversion","Fragments":["of","`counter::counter(const","operator.","until","from","from","from","from","from","from","from","of","from"]},{"Key":"conversion of","Fragments":["`const","signed","bool","string","chars.","const"]},{"Key":"of `const","Fragments":["char","std::string`","char","std::string\u0026`","string\u0026","string\u0026","string\u0026"]},{"Key":"`const char","Fragments":["*`","*`","*`","*","*`"]},{"Key":"char *`","Fragments":["to","might","versus","or"]},{"Key":"*` to","Fragments":["`std::string`","a"]},{"Key":"to `std::string`","Fragments":["then","instead"]},{"Key":"`std::string` then","Fragments":["going"]},{"Key":"then going","Fragments":["through"]},{"Key":"going through","Fragments":["the","some"]},{"Key":"through the","Fragments":["assignment","string","loop","public","string","program","input;","input","string","string","input","string","w","string","string","characters","characters","string","string","elements","std","process","entire","string","strings.","matches.","string","string,","string","string","git","string","string.","setup,","string"]},{"Key":"the assignment","Fragments":["operator,"]},{"Key":"operator, or","Fragments":["a"]},{"Key":"a specialized","Fragments":["assignment"]},{"Key":"specialized assignment","Fragments":["operator,"]},{"Key":"operator, both","Fragments":["of"]},{"Key":"of which","Fragments":["would","could","are","would","is","is","are","will"]},{"Key":"which would","Fragments":["end","result","have","cause","look","have","allow","not","allow","make","increase","cover","be","be","seem","leave","also","be","match","indicate"]},{"Key":"would end","Fragments":["up","up"]},{"Key":"up doing","Fragments":["a"]},{"Key":"a memcpy","Fragments":["in"]},{"Key":"memcpy in","Fragments":["the"]},{"Key":"the normal","Fragments":["case,","MO","trim","assumption"]},{"Key":"normal case,","Fragments":["which,"]},{"Key":"case, which,","Fragments":["in"]},{"Key":"which, in","Fragments":["my"]},{"Key":"opinion, is","Fragments":["more"]},{"Key":"to resize","Fragments":["the"]},{"Key":"resize the","Fragments":["string."]},{"Key":" clear:","Fragments":["https://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a00998_source.html#l00813"]},{"Key":" which","Fragments":["degrades","falls","degrades","degrades","I","avoids","has","means","is"]},{"Key":"which degrades","Fragments":["into","into","into"]},{"Key":"degrades into","Fragments":["_M_mutate","assign(const","assign(const"]},{"Key":"into _M_mutate","Fragments":["https://gcc.gnu.org/onlinedocs/gcc-4.6.3/libstdc++/api/a00771_source.html#l00471"]},{"Key":"which falls","Fragments":["down"]},{"Key":"falls down","Fragments":["the"]},{"Key":"down the","Fragments":["path","code","line","if","rabbit","road","three","test","fat.","route"]},{"Key":"the path","Fragments":["that","of"]},{"Key":"path that","Fragments":["I"]},{"Key":"I theorized","Fragments":["(at"]},{"Key":"theorized (at","Fragments":["the"]},{"Key":"(at the","Fragments":["bottom,","call"]},{"Key":"the bottom,","Fragments":["interal"]},{"Key":"bottom, interal","Fragments":["length"]},{"Key":"interal length","Fragments":["="]},{"Key":"length =","Fragments":["0,"]},{"Key":"= 0,","Fragments":["buff[0]","b","c","d"]},{"Key":"0, buff[0]","Fragments":["="]},{"Key":" assignment","Fragments":["operator:"]},{"Key":"assignment operator:","Fragments":["https://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a00998_source.html#l00562"]},{"Key":"into assign(const","Fragments":["char*)","char*,"]},{"Key":"assign(const char*)","Fragments":["https://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a00998_source.html#l01146"]},{"Key":"assign(const char*,","Fragments":["size_type)"]},{"Key":"char*, size_type)","Fragments":["https://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a00999_source.html#l00259"]},{"Key":" `if","Fragments":["(word.size())"]},{"Key":"`if (word.size())","Fragments":["{"]},{"Key":"(word.size()) {","Fragments":["//","//"]},{"Key":"{ //","Fragments":["word","word"]},{"Key":"// word","Fragments":["is","is"]},{"Key":"word is","Fragments":["not","not","not","the","disqualified","inserted","inserted","not","not","not","inserted","going","not","inserted"]},{"Key":"not empty`","Fragments":["comment"]},{"Key":"empty` comment","Fragments":["is"]},{"Key":"comment is","Fragments":["nice","true,"]},{"Key":"is nice","Fragments":["but","if","and","and","for","in","for","and","and"]},{"Key":"nice but","Fragments":["perhaps"]},{"Key":"but perhaps","Fragments":["simply"]},{"Key":"perhaps simply","Fragments":["coding"]},{"Key":"simply coding","Fragments":["what"]},{"Key":"coding what","Fragments":["you"]},{"Key":" `if(!word.empty())","Fragments":["{`"]},{"Key":"To help","Fragments":["out"]},{"Key":"help out","Fragments":["the","the","the","the","the","the","the","the","the","the","the"]},{"Key":"compiler, creating","Fragments":["a"]},{"Key":"`const size_t","Fragments":["input_size"]},{"Key":"size_t input_size","Fragments":["="]},{"Key":"input_size =","Fragments":["input.size()`"]},{"Key":"= input.size()`","Fragments":["and"]},{"Key":"input.size()` and","Fragments":["using"]},{"Key":"that value","Fragments":["will","supports","never"]},{"Key":"value will","Fragments":["give","wrap","be","never"]},{"Key":"better chance","Fragments":["at","at","at"]},{"Key":"chance at","Fragments":["reducing","optimizing","optimizing"]},{"Key":"at reducing","Fragments":["the"]},{"Key":"reducing the","Fragments":["number"]},{"Key":"of instructions","Fragments":["per"]},{"Key":"instructions per","Fragments":["loop"]},{"Key":"per loop","Fragments":["and"]},{"Key":"loop and","Fragments":["removing","it","dismissing","return","a","you","iterate","go","return"]},{"Key":"and removing","Fragments":["data","counts"]},{"Key":"removing data","Fragments":["dependencies."]},{"Key":" Again,","Fragments":["if","this","it's","needs"]},{"Key":"Again, if","Fragments":["you"]},{"Key":"for pure","Fragments":["speed,"]},{"Key":"pure speed,","Fragments":["duplicating"]},{"Key":"speed, duplicating","Fragments":["the"]},{"Key":"duplicating the","Fragments":["code","section"]},{"Key":"will save","Fragments":["you","on"]},{"Key":"save you","Fragments":["branch","one","that"]},{"Key":"you branch","Fragments":["prediction"]},{"Key":"branch prediction","Fragments":["costs","misses","will"]},{"Key":"prediction costs","Fragments":["in"]},{"Key":"costs in","Fragments":["the"]},{"Key":"the loop.","Fragments":["Consider","I","In","Can","Just","`result`","You"]},{"Key":"loop. Consider","Fragments":["duplicating"]},{"Key":"Consider duplicating","Fragments":["the"]},{"Key":"if (word.size())","Fragments":["{"]},{"Key":" output[word]","Fragments":["+="]},{"Key":"output[word] +=","Fragments":["1;"]},{"Key":"+= 1;","Fragments":["//"]},{"Key":"1; //","Fragments":["works"]},{"Key":"// works","Fragments":["because"]},{"Key":"works because","Fragments":["int","the","string","C++","isSilence"]},{"Key":"because int","Fragments":["initializes"]},{"Key":"int initializes","Fragments":["to","it"]},{"Key":"initializes to","Fragments":["0"]},{"Key":" word.clear();","Fragments":["//"]},{"Key":"word.clear(); //","Fragments":["outside"]},{"Key":"// outside","Fragments":["the"]},{"Key":"loop this","Fragments":["is"]},{"Key":"is unnecessary","Fragments":["as","since","because","since","and","as"]},{"Key":"unnecessary as","Fragments":["the","the"]},{"Key":"word will","Fragments":["never","not"]},{"Key":"will never","Fragments":["be","change.","been","change,","be","be","be","convert","be"]},{"Key":"never be","Fragments":["referenced","earlier","the","closed.","NULL","equal.","UNDEFed","a","more","less","less"]},{"Key":"be referenced","Fragments":["again,"]},{"Key":"referenced again,","Fragments":["but"]},{"Key":"again, but","Fragments":["better","as"]},{"Key":"but better","Fragments":["safe","than"]},{"Key":"better safe","Fragments":["than"]},{"Key":"safe than","Fragments":["sorry"]},{"Key":" to","Fragments":["after","fix","your","additive","the","conver"]},{"Key":"to after","Fragments":["the"]},{"Key":"to then","Fragments":["change","shuffle"]},{"Key":"then change","Fragments":["the","to"]},{"Key":"for (size_t","Fragments":["i","i"]},{"Key":"(size_t i","Fragments":["=","="]},{"Key":"0; i","Fragments":["\u003c","\u003c=","\u003c","\u003c","\u003c","\u003c","\u003c","\u003c","\u003c"]},{"Key":"\u003c input.size();","Fragments":["i++)"]},{"Key":"input.size(); i++)","Fragments":["{"]},{"Key":"if (std::isspace(input[i])","Fragments":["||"]},{"Key":"(std::isspace(input[i]) ||","Fragments":["input[i]"]},{"Key":"|| input[i]","Fragments":["=="]},{"Key":"input[i] ==","Fragments":["',')"]},{"Key":"== ',')","Fragments":["{"]},{"Key":" *word_count.h*","Fragments":["includes"]},{"Key":"*word_count.h* includes","Fragments":["`map`"]},{"Key":"includes `map`","Fragments":["but"]},{"Key":"`map` but","Fragments":["not"]},{"Key":"but not","Fragments":["`string`","mutated.","using","used.","the","simple.","relying","both.","changing","by","the","the","least,","full","here.","necessarily","by","with","least:","massively.","visible","both?","this.","```yelling```.","with","least,","the","other"]},{"Key":"just realized","Fragments":["both","that","that"]},{"Key":"realized both","Fragments":["this"]},{"Key":"both this","Fragments":["and"]},{"Key":"my submition","Fragments":["would"]},{"Key":"submition would","Fragments":["also"]},{"Key":"would also","Fragments":["fail","allow","let","match","make","eliminate","compare","work","make","return","get"]},{"Key":"also fail","Fragments":["the"]},{"Key":"fail the","Fragments":["test","apostrophes."]},{"Key":"It was","Fragments":["my","copied","actually","likely","just","a","fun","difficult","also","for","the","literally"]},{"Key":"my parents'","Fragments":["piano,"]},{"Key":"parents' piano,","Fragments":["as"]},{"Key":"piano, as","Fragments":["it"]},{"Key":"it belonged","Fragments":["to"]},{"Key":"belonged to","Fragments":["both"]},{"Key":"to both","Fragments":["my","because"]},{"Key":"both my","Fragments":["mother"]},{"Key":"my mother","Fragments":["and"]},{"Key":"mother and","Fragments":["father."]},{"Key":"the brevity.","Fragments":["You"]},{"Key":"brevity. You","Fragments":["can"]},{"Key":"can save","Fragments":["the","a","some","branch","the","yourself","yourself"]},{"Key":"save the","Fragments":["extra","nucleotide","first","string"]},{"Key":"the extra","Fragments":["allocation","lines","cost","time","int","chars.","type.","length,","lines","length.","length","credit"]},{"Key":"extra allocation","Fragments":["for"]},{"Key":"allocation for","Fragments":["the","the","you.","every","each"]},{"Key":"the upper","Fragments":["case"]},{"Key":"case compare","Fragments":["by"]},{"Key":"compare by","Fragments":["saying"]},{"Key":"// A","Fragments":["statement"]},{"Key":"A statement","Fragments":["is"]},{"Key":"statement is","Fragments":["shouted","relying","absurd!","yelling","moderately","when","a"]},{"Key":"is shouted","Fragments":["(ALL"]},{"Key":"shouted (ALL","Fragments":["CAPS)"]},{"Key":"(ALL CAPS)","Fragments":["if"]},{"Key":"CAPS) if","Fragments":["it"]},{"Key":"has an","Fragments":["alphabetical","_alloca.","accumulator","`int`","overload","implicit","error","alpha","algorithm","isalnum","direct","error"]},{"Key":"an alphabetical","Fragments":["character"]},{"Key":"// and","Fragments":["the"]},{"Key":"the satement","Fragments":["contains"]},{"Key":"satement contains","Fragments":["no"]},{"Key":"contains no","Fragments":["lowercase","non-static","lowercase"]},{"Key":" bool","Fragments":["has_no_lowercase","allUpper","atleastAlpha","any_of_is_alpha","all_alphas_are_uppercase","is_empty(","is_a_yell(const","cased","is_shouty(StringView","isBlank(std::string","is_silent(const","MapsEqual(const","silence(string","isShout(string"]},{"Key":"bool has_no_lowercase","Fragments":["="]},{"Key":"has_no_lowercase =","Fragments":["boost::all(statement,"]},{"Key":"= boost::all(statement,","Fragments":["!boost::is_lower());"]},{"Key":"For me","Fragments":["this","personally,","it","this","this","on","on"]},{"Key":"me this","Fragments":["was","is","is","works:","way.","feels"]},{"Key":"this was","Fragments":["more","so","in","actually","my","a","going","php","not","a","an","far","used","part","submitted"]},{"Key":"more an","Fragments":["exercise","implementation"]},{"Key":"exercise in","Fragments":["regex","haskell","ruby.","mind.","cut","itself,"]},{"Key":"in regex","Fragments":["than"]},{"Key":"regex than","Fragments":["c++"]},{"Key":"than c++","Fragments":["since"]},{"Key":"c++ since","Fragments":["I"]},{"Key":"use regex","Fragments":["in","all","for","instead","[like"]},{"Key":"regex in","Fragments":["my","this","that","a"]},{"Key":"my everyday","Fragments":["life","work"]},{"Key":"everyday life","Fragments":["and"]},{"Key":"life and","Fragments":["know"]},{"Key":"and know","Fragments":["very"]},{"Key":"know very","Fragments":["little"]},{"Key":"very little","Fragments":["of"]},{"Key":"little of","Fragments":["them."]},{"Key":"of them.","Fragments":["I","`return`","I","Most"]},{"Key":"them. I","Fragments":["am","used","have","also","would","was"]},{"Key":"am pretty","Fragments":["sure","sure","picky):","new","sure"]},{"Key":"regex I","Fragments":["used,"]},{"Key":"used, can","Fragments":["be"]},{"Key":" English","Fragments":["is"]},{"Key":"English is","Fragments":["not"]},{"Key":"not my","Fragments":["primary","cup"]},{"Key":"my primary","Fragments":["language,"]},{"Key":"primary language,","Fragments":["so"]},{"Key":"language, so","Fragments":["I","to","whatever"]},{"Key":"was surprised","Fragments":["that","that"]},{"Key":"surprised that","Fragments":["words","it","the","your"]},{"Key":"that words","Fragments":["with"]},{"Key":"words with","Fragments":["apostrophes"]},{"Key":"with apostrophes","Fragments":["are"]},{"Key":"apostrophes are","Fragments":["considered"]},{"Key":"are considered","Fragments":["words","okay.","non-forceful"]},{"Key":"considered words","Fragments":["also."]},{"Key":"words also.","Fragments":["What"]},{"Key":"also. What","Fragments":["about"]},{"Key":"about words","Fragments":["like"]},{"Key":"words like","Fragments":["\"","I","\"she's\"","\"she's\""]},{"Key":"like \"","Fragments":["Ross'"]},{"Key":"\" Ross'","Fragments":["\"?"]},{"Key":"Ross' \"?","Fragments":["Does"]},{"Key":"\"? Does","Fragments":["it"]},{"Key":"it count","Fragments":["as"]},{"Key":"count as","Fragments":["\"","shouting."]},{"Key":"as \"","Fragments":["ross"]},{"Key":"\" ross","Fragments":["\""]},{"Key":"ross \"","Fragments":["or"]},{"Key":"\" or","Fragments":["\""]},{"Key":"or \"","Fragments":["ross'"]},{"Key":"\" ross'","Fragments":["\"?"]},{"Key":"the algorithm","Fragments":["is","described","didn't","the","header","```std::all_of```","to","by","is","header","+","is","is","and","and","and","the"]},{"Key":"algorithm is","Fragments":["doing","better,","doing","done,","the","similar"]},{"Key":"is doing","Fragments":["too","number-crunching","the","(adding","after"]},{"Key":"doing too","Fragments":["much"]},{"Key":"much work.","Fragments":["Also"]},{"Key":"work. Also","Fragments":["you"]},{"Key":"Also you","Fragments":["are","don't","could","don't","could","can","could","could","test","have","will","have","can","might","don't"]},{"Key":"are modifying","Fragments":["the","the"]},{"Key":"modifying the","Fragments":["iterator","object","string.","return.","input","characters","elements","`word`.","tests"]},{"Key":"iterator while","Fragments":["it"]},{"Key":"while it","Fragments":["is","compiles","shouldn't.","uses","looks"]},{"Key":"in use,","Fragments":["this"]},{"Key":"use, this","Fragments":["can"]},{"Key":"Two words","Fragments":["are"]},{"Key":"are anagrams","Fragments":["if"]},{"Key":"anagrams if","Fragments":["their","they"]},{"Key":"if their","Fragments":["letter"]},{"Key":"their letter","Fragments":["counts"]},{"Key":"letter counts","Fragments":["are"]},{"Key":"counts are","Fragments":["the"]},{"Key":"same. You","Fragments":["can"]},{"Key":"can make","Fragments":["this","an","the","the","a","use","the","a","it...","things","a","this","the","the"]},{"Key":"this comparison","Fragments":["two"]},{"Key":"comparison two","Fragments":["ways:"]},{"Key":"First is","Fragments":["to"]},{"Key":"to simply","Fragments":["sort","`matches`","building","use","not","say"]},{"Key":"simply sort","Fragments":["both"]},{"Key":"sort both","Fragments":["of"]},{"Key":"of them","Fragments":["and","by","tonight","have","are","is","in","is","to","causes","regex_match","are","return","I"]},{"Key":"and compare.","Fragments":["This"]},{"Key":"compare. This","Fragments":["saves","will"]},{"Key":"This saves","Fragments":["work"]},{"Key":"saves work","Fragments":["because"]},{"Key":"work because","Fragments":["you","it's","silence"]},{"Key":"to sort","Fragments":["the","on","to","two","the","just","it","correctly"]},{"Key":"sort the","Fragments":["_subject_","characters","two","characters","strings"]},{"Key":"the _subject_","Fragments":["at"]},{"Key":"_subject_ at","Fragments":["construction"]},{"Key":"at construction","Fragments":["time.","and","time","time."]},{"Key":"construction time.","Fragments":["Each"]},{"Key":"time. Each","Fragments":["word"]},{"Key":"Each word","Fragments":["then"]},{"Key":"word then","Fragments":["only"]},{"Key":"then only","Fragments":["takes"]},{"Key":"only takes","Fragments":["n","2","in"]},{"Key":"takes n","Fragments":["log(n)"]},{"Key":"n log(n)","Fragments":["+"]},{"Key":"log(n) +","Fragments":["n"]},{"Key":"+ n","Fragments":["time",");"]},{"Key":"n time","Fragments":["to"]},{"Key":"second is","Fragments":["to","slow!"]},{"Key":"a letter_count","Fragments":["and"]},{"Key":"letter_count and","Fragments":["compare"]},{"Key":"and compare","Fragments":["that.","in","to","might","would","it","things","that"]},{"Key":"compare that.","Fragments":["This"]},{"Key":"that. This","Fragments":["is"]},{"Key":"is similar","Fragments":["to","to","to"]},{"Key":"similar to","Fragments":["the","my","mine","`trim`","my","the","split_words","your","`square()`","a","mine.","mine,","the","how","the"]},{"Key":"the wordcount","Fragments":["problem"]},{"Key":"wordcount problem","Fragments":["just"]},{"Key":"problem just","Fragments":["simpler."]},{"Key":"love it!","Fragments":["My"]},{"Key":"it! My","Fragments":["only"]},{"Key":"My only","Fragments":["quibble","concern","suggestion","nitpick","nitpick","gripe"]},{"Key":"only quibble","Fragments":["is"]},{"Key":"quibble is","Fragments":["about"]},{"Key":"about polluting","Fragments":["the"]},{"Key":"polluting the","Fragments":["global","map.","namespace"]},{"Key":"the global","Fragments":["namespace","namespace.","namespace.","namespace.","namespace","namespace","begin()","namespace","namespace:","namespace,","namespace","namespace","begin()/end()","namespace,","scope.","namespace.","strings","used","namespace."]},{"Key":"global namespace","Fragments":["with","but","in","in","in","which","is","with","pollution,"]},{"Key":" @reggie","Fragments":["if"]},{"Key":"@reggie if","Fragments":["it"]},{"Key":"only defined","Fragments":["in","for"]},{"Key":"cpp file,","Fragments":["then","and","but,","added","changed","and"]},{"Key":"file, then","Fragments":["it"]},{"Key":"then it","Fragments":["won't","wouldn't","requires","just","would","shouldn't","works","was","was","was","is","is","doesn't","automatically"]},{"Key":"it won't","Fragments":["exist","be","pass"]},{"Key":"won't exist","Fragments":["outside"]},{"Key":"exist outside","Fragments":["of"]},{"Key":"made string","Fragments":["length"]},{"Key":"string length","Fragments":["check","check","comparisons","before","before","is","at","and"]},{"Key":"length check","Fragments":["into","in","at","is","to","was"]},{"Key":"separate function.","Fragments":["Function","Each","The"]},{"Key":"function. Function","Fragments":["hey()"]},{"Key":"Function hey()","Fragments":["really"]},{"Key":"hey() really","Fragments":["looks"]},{"Key":"really looks","Fragments":["better,"]},{"Key":"looks better,","Fragments":["more"]},{"Key":"better, more","Fragments":["like"]},{"Key":"more like","Fragments":["a","a","a","a","an","you"]},{"Key":"a novel","Fragments":["or"]},{"Key":"novel or","Fragments":["pseudocode."]},{"Key":"or pseudocode.","Fragments":["On"]},{"Key":"pseudocode. On","Fragments":["the"]},{"Key":"other hand","Fragments":["it","can","```BoardPosition```","can"]},{"Key":"hand it","Fragments":["is"]},{"Key":"still somewhat","Fragments":["strange"]},{"Key":"somewhat strange","Fragments":["to"]},{"Key":"separate function","Fragments":["out","allowed","someone","that","because","because","calls","that","so","you"]},{"Key":"function out","Fragments":["of","of"]},{"Key":"string lenght","Fragments":["check.","is"]},{"Key":" single","Fragments":["argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","argument","digit","argument","argument","argument"]},{"Key":"single argument","Fragments":["constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructors","constructor","constructor","constructors","constructors","constructors","constructors"]},{"Key":"marked *explicit*","Fragments":["to"]},{"Key":"*explicit* to","Fragments":["avoid"]},{"Key":"think *unordered_map*","Fragments":["is"]},{"Key":"*unordered_map* is","Fragments":["actually"]},{"Key":"a worse","Fragments":["choice"]},{"Key":"worse choice","Fragments":["than"]},{"Key":"choice than","Fragments":["a"]},{"Key":"than a","Fragments":["regular","singleton","mixture.","word","buffer","ranged","member","class.","named","few","simple","value","search","\"beer","range-based","couple","static","loop"]},{"Key":"a regular","Fragments":["*map*","string?","pointer),","for"]},{"Key":"regular *map*","Fragments":["because"]},{"Key":"*map* because","Fragments":["you"]},{"Key":"are paying","Fragments":["for"]},{"Key":"paying for","Fragments":["hashing","nothing","an"]},{"Key":"for hashing","Fragments":["but"]},{"Key":"hashing but","Fragments":["you"]},{"Key":"a max","Fragments":["size"]},{"Key":"max size","Fragments":["of","of","of"]},{"Key":"of 26","Fragments":["entries."]},{"Key":"26 entries.","Fragments":["This"]},{"Key":"entries. This","Fragments":["means"]},{"Key":"This means","Fragments":["regular","the","it","that","that","that"]},{"Key":"means regular","Fragments":["map"]},{"Key":"regular map","Fragments":["will"]},{"Key":"map will","Fragments":["have","default"]},{"Key":"have fewer","Fragments":["cache"]},{"Key":"fewer cache","Fragments":["misses"]},{"Key":"cache misses","Fragments":["etc."]},{"Key":"Thanks @trinity,","Fragments":["glad"]},{"Key":"@trinity, glad","Fragments":["to"]},{"Key":"glad to","Fragments":["learn","see"]},{"Key":"learn some","Fragments":["aspects"]},{"Key":"some aspects","Fragments":["of"]},{"Key":"of c++","Fragments":["on"]},{"Key":"c++ on","Fragments":["even"]},{"Key":"on even","Fragments":["simple"]},{"Key":"even simple","Fragments":["examples"]},{"Key":"simple examples","Fragments":["--"]},{"Key":"examples --","Fragments":["coming"]},{"Key":"-- coming","Fragments":["from"]},{"Key":"from Python,","Fragments":["there","const"]},{"Key":"Python, there","Fragments":["sure"]},{"Key":"there sure","Fragments":["are"]},{"Key":"sure are","Fragments":["lots"]},{"Key":"are lots","Fragments":["of","of"]},{"Key":"lots of","Fragments":["interesting","names","people","floating","these","superflous","implementation","comments","obscure","`std::`s","good"]},{"Key":"of interesting","Fragments":["details."]},{"Key":" Regarding","Fragments":["your","point","VS15,","auto","static","the","the","your","backslashes,"]},{"Key":"Regarding your","Fragments":["first","comment"]},{"Key":"your first","Fragments":["comment","and","iteration","iteration","version","example","commit,","question","iteration."]},{"Key":"first comment","Fragments":["I"]},{"Key":"comment I","Fragments":["believe","just","tend","would"]},{"Key":"also simply","Fragments":["use"]},{"Key":"string constructor","Fragments":["`std::string","to"]},{"Key":"constructor `std::string","Fragments":["word;`"]},{"Key":"`std::string word;`","Fragments":["to"]},{"Key":"word;` to","Fragments":["create"]},{"Key":"create an","Fragments":["empty","object","additional","empty"]},{"Key":" Agree","Fragments":["with","with"]},{"Key":"Agree with","Fragments":["your","@gregg."]},{"Key":"with your","Fragments":["other","own","solution.","constructor.","code.","comment,","most","test","naming","for-loop.","version?","code.","numeric","code","code","feedback"]},{"Key":"other comments.","Fragments":["I"]},{"Key":"believe handling","Fragments":["the"]},{"Key":"handling the","Fragments":["last","single","iterators:","iterator","plurality","whitespace"]},{"Key":"more difficult...","Fragments":["Would"]},{"Key":"difficult... Would","Fragments":["require"]},{"Key":"Would require","Fragments":["some"]},{"Key":"require some","Fragments":["parenthesis"]},{"Key":"some parenthesis","Fragments":["parsing"]},{"Key":"parenthesis parsing","Fragments":["and"]},{"Key":"parsing and","Fragments":["heuristics"]},{"Key":"and heuristics","Fragments":["to"]},{"Key":"heuristics to","Fragments":["make"]},{"Key":"make some","Fragments":["choices,","of"]},{"Key":"some choices,","Fragments":["as"]},{"Key":"choices, as","Fragments":["in"]},{"Key":"The famous","Fragments":["book"]},{"Key":"famous book","Fragments":["'parents'"]},{"Key":"book 'parents'","Fragments":["kitchens'..."]},{"Key":" @israel","Fragments":["Thanks"]},{"Key":"@israel Thanks","Fragments":["for"]},{"Key":"your input.","Fragments":["I","I'll"]},{"Key":"input. I","Fragments":["revised","just","would","kept","can't","guess"]},{"Key":"I revised","Fragments":["the"]},{"Key":"revised the","Fragments":["code"]},{"Key":"and also","Fragments":["separated","because","sorted","because","maybe","to","to","this","include","by","that","just"]},{"Key":"also separated","Fragments":["the"]},{"Key":"separated the","Fragments":["implementation"]},{"Key":"implementation into","Fragments":["a","a"]},{"Key":"a .cpp","Fragments":["file.","file","file.","file,","or","and","file."]},{"Key":"file. Did","Fragments":["I"]},{"Key":"Did I","Fragments":["use"]},{"Key":"the `std::move`","Fragments":["in"]},{"Key":"`std::move` in","Fragments":["`auto"]},{"Key":"in `auto","Fragments":["anagram(const"]},{"Key":"`auto anagram(const","Fragments":["string\u0026"]},{"Key":"anagram(const string\u0026","Fragments":["reference)`"]},{"Key":"string\u0026 reference)`","Fragments":["correctly?"]},{"Key":" Please","Fragments":["continue","don't","don't","don't","don't","don't","be","get","tell"]},{"Key":"Please continue","Fragments":["with"]},{"Key":"continue with","Fragments":["iteration"]},{"Key":"with iteration","Fragments":["#4."]},{"Key":"iteration #4.","Fragments":["It"]},{"Key":"#4. It","Fragments":["also"]},{"Key":"It also","Fragments":["includes","escapes","gets"]},{"Key":"also includes","Fragments":["the"]},{"Key":"includes the","Fragments":[".cpp","right","header","using"]},{"Key":" @forrest","Fragments":["I've"]},{"Key":"@forrest I've","Fragments":["adjusted"]},{"Key":"I've adjusted","Fragments":["the"]},{"Key":"adjusted the","Fragments":["regex"]},{"Key":"regex and","Fragments":["added","other"]},{"Key":"and added","Fragments":["the","comments.","to","comments","the","a"]},{"Key":"added the","Fragments":["switch.","reserve","call","typedef.","logic"]},{"Key":"switch. Honestly,","Fragments":["I"]},{"Key":"Honestly, I","Fragments":["seldom","don't"]},{"Key":"I seldom","Fragments":["bother"]},{"Key":"seldom bother","Fragments":["with"]},{"Key":"bother with","Fragments":["using","uint_least16_t,"]},{"Key":"with using","Fragments":["switches,","namespace,","the","a","bool"]},{"Key":"using switches,","Fragments":["but"]},{"Key":"switches, but","Fragments":["I've"]},{"Key":"but I've","Fragments":["come","heard","never"]},{"Key":"I've come","Fragments":["to","to"]},{"Key":"come to","Fragments":["learn","basically","the","lean","mind","mind:"]},{"Key":"learn that","Fragments":["they"]},{"Key":"more performant.","Fragments":["Thx!"]},{"Key":"All excellent","Fragments":["points,"]},{"Key":"excellent points,","Fragments":["fixed."]},{"Key":"the lengthy","Fragments":["review."]},{"Key":"lengthy review.","Fragments":["I"]},{"Key":"review. I","Fragments":["didn't"]},{"Key":"didn't make","Fragments":["```Message()```"]},{"Key":"make ```Message()```","Fragments":["and"]},{"Key":"```Message()``` and","Fragments":["```hey()```"]},{"Key":"and ```hey()```","Fragments":["pass"]},{"Key":"```hey()``` pass","Fragments":["by"]},{"Key":"reference because","Fragments":["that"]},{"Key":"that doesn't","Fragments":["work","require","exist","return","change","work.","do","save","seem","take","compile","have","need","require","match","match"]},{"Key":"doesn't work","Fragments":["with","on","in","for"]},{"Key":"tests. They","Fragments":["call"]},{"Key":"They call","Fragments":["these"]},{"Key":"call these","Fragments":["functions"]},{"Key":"functions with","Fragments":["```const","same","same","regexes","no","the","`isYell`","descriptive"]},{"Key":"with ```const","Fragments":["char"]},{"Key":"```const char","Fragments":["*```","*```","*```","*```","*```","*```","*```."]},{"Key":"char *```","Fragments":["which","instead","and","afterwards).","if","into","will"]},{"Key":"*``` which","Fragments":["doesn't"]},{"Key":"which doesn't","Fragments":["convert","exist","seem","sound","support"]},{"Key":"doesn't convert","Fragments":["to"]},{"Key":"the hint","Fragments":["with"]},{"Key":"hint with","Fragments":["const,"]},{"Key":"with const,","Fragments":["I"]},{"Key":"const, I","Fragments":["didn't"]},{"Key":"this doesn't","Fragments":["work","break","give","matter.","wrap"]},{"Key":"on primitive","Fragments":["data"]},{"Key":"primitive data","Fragments":["types."]},{"Key":"I actually","Fragments":["had","find","made","prefer","find","struggled","found","think","prefer","also","do","feel","designed","had","made","agree,","think"]},{"Key":"actually had","Fragments":["an","to"]},{"Key":"had an","Fragments":["enum","earlier","extra","initialization","additional"]},{"Key":"enum indexed","Fragments":["array"]},{"Key":"indexed array","Fragments":["in"]},{"Key":"array in","Fragments":["my"]},{"Key":"my previous","Fragments":["iterations,","revision.","two","implementation","implementation"]},{"Key":"previous iterations,","Fragments":["but"]},{"Key":"iterations, but","Fragments":["abandoned"]},{"Key":"but abandoned","Fragments":["it"]},{"Key":"abandoned it","Fragments":["in"]},{"Key":"map due","Fragments":["to"]},{"Key":"to maintainability","Fragments":["issues."]},{"Key":"create mine","Fragments":["with"]},{"Key":"mine with","Fragments":["const"]},{"Key":"with const","Fragments":["std::string\u0026","qualifier.","\u0026.","reference"]},{"Key":"const std::string\u0026","Fragments":["without","?","you","or","and","in"]},{"Key":"std::string\u0026 without","Fragments":["issues."]},{"Key":"without issues.","Fragments":["If"]},{"Key":"issues. If","Fragments":["you"]},{"Key":"want you","Fragments":["can","can"]},{"Key":"can post","Fragments":["the"]},{"Key":"post the","Fragments":["compile"]},{"Key":"the compile","Fragments":["error"]},{"Key":"compile error","Fragments":["you","at"]},{"Key":"error you","Fragments":["received"]},{"Key":"you received","Fragments":["and"]},{"Key":"received and","Fragments":["maybe"]},{"Key":"and maybe","Fragments":["we","silent","you","character"]},{"Key":"maybe we","Fragments":["can","just","can"]},{"Key":"can figure","Fragments":["out","it"]},{"Key":"Great improvement.","Fragments":["A"]},{"Key":"improvement. A","Fragments":["couple"]},{"Key":"* You","Fragments":["can","can","could","could","deal","are"]},{"Key":"save a","Fragments":["extra","hash","copy!","little","few","couple"]},{"Key":"a extra","Fragments":["string","variable."]},{"Key":"extra string","Fragments":["copy"]},{"Key":"string copy","Fragments":["in","of","and"]},{"Key":"in anagrams","Fragments":["constructor"]},{"Key":"anagrams constructor","Fragments":["by"]},{"Key":" anagram::anagram(const","Fragments":["std::string\u0026"]},{"Key":"anagram::anagram(const std::string\u0026","Fragments":["word)"]},{"Key":"std::string\u0026 word)","Fragments":["{"]},{"Key":" transform(word.begin(),","Fragments":["word.end(),"]},{"Key":"transform(word.begin(), word.end(),","Fragments":["this-\u003eword.begin(),"]},{"Key":"word.end(), this-\u003eword.begin(),","Fragments":["tolower);"]},{"Key":"* use","Fragments":["either"]},{"Key":"use either","Fragments":["a","of","`algorithm::sort()`"]},{"Key":"either a","Fragments":["prefix","functor","length","hamming"]},{"Key":"a prefix","Fragments":["or"]},{"Key":"prefix or","Fragments":["suffice"]},{"Key":"or suffice","Fragments":["naming"]},{"Key":"suffice naming","Fragments":["convention"]},{"Key":"naming convention","Fragments":["on","of","and"]},{"Key":"convention on","Fragments":["member"]},{"Key":"on member","Fragments":["variables"]},{"Key":"member variables","Fragments":["to","for","to","and","if","``w``/``b``","to","should"]},{"Key":"variables to","Fragments":["remove","the","lambda","where","other","keep","a","namespace.","indicate"]},{"Key":"remove variable","Fragments":["ambiguity"]},{"Key":"variable ambiguity","Fragments":["(notably"]},{"Key":"ambiguity (notably","Fragments":["word)"]},{"Key":"* if","Fragments":["you","you","the","you","you","you"]},{"Key":"you remove","Fragments":["the","the","*line","this","that"]},{"Key":"remove the","Fragments":["copy,","magic","special","\"horse\"","member","cast","use","const","need","first","unnecessary","first","`iostream`","big","use","header","header.","recursion","else","iostream-include","\u003ccstring\u003e","chance","`evaluate()`","\"inline\"","\"isSayingAnything\"-method.","debug","duplicate","need","word."]},{"Key":"the copy,","Fragments":["make"]},{"Key":"copy, make","Fragments":["sure"]},{"Key":"to build","Fragments":["the","the","some","either","a","objects,"]},{"Key":"build the","Fragments":["histogram","verse","string","entire","thing"]},{"Key":"the histogram","Fragments":["from","-","contents,"]},{"Key":"histogram from","Fragments":["the"]},{"Key":"* Code","Fragments":["is"]},{"Key":"is being","Fragments":["repeated","counted","defined","explicit","copied.","passed,","tested"]},{"Key":"being repeated","Fragments":["(building"]},{"Key":"repeated (building","Fragments":["the"]},{"Key":"(building the","Fragments":["histogram),"]},{"Key":"the histogram),","Fragments":["you"]},{"Key":"histogram), you","Fragments":["already"]},{"Key":"you already","Fragments":["can","have","have","have","have","have","did","has","have.","have","used","wrote,"]},{"Key":"already can","Fragments":["make"]},{"Key":"an anagram","Fragments":["object,","for","of","if","if","if","if","if","of"]},{"Key":"anagram object,","Fragments":["consider"]},{"Key":"object, consider","Fragments":["adding"]},{"Key":"consider adding","Fragments":["an","comments"]},{"Key":"adding an","Fragments":["`ismatch(const","else"]},{"Key":"an `ismatch(const","Fragments":["anagram\u0026"]},{"Key":"`ismatch(const anagram\u0026","Fragments":["other)`"]},{"Key":"anagram\u0026 other)`","Fragments":["to"]},{"Key":"other)` to","Fragments":["compare"]},{"Key":"to compare","Fragments":["two","values","against","floating-point","the","it","it.","outputs","the","length","against.","and","the"]},{"Key":"compare two","Fragments":["anagrams.","floats","maps"]},{"Key":"two anagrams.","Fragments":["This"]},{"Key":"anagrams. This","Fragments":["will","will"]},{"Key":"will allow","Fragments":["you","you"]},{"Key":"allow you","Fragments":["to","to","to","to","to","to"]},{"Key":"you to","Fragments":["simply","parse","add","pay","avoid","format","operate","a","re-iterate.","do","drop","use","consider","only","learn","write","either).","check","use","use","avoid","use","delete","return","remove","not","index","check","copy","decide."]},{"Key":"simply `matches`","Fragments":["to"]},{"Key":"`matches` to","Fragments":["simply"]},{"Key":"simply building","Fragments":["an"]},{"Key":"building an","Fragments":["anagram"]},{"Key":"anagram for","Fragments":["each"]},{"Key":"each string,","Fragments":["then"]},{"Key":"string, then","Fragments":["comparing"]},{"Key":"then comparing","Fragments":["those"]},{"Key":"comparing those","Fragments":["anagrams"]},{"Key":"those anagrams","Fragments":["to"]},{"Key":"anagrams to","Fragments":["yourself."]},{"Key":"Great improvement!","Fragments":["Looks"]},{"Key":"improvement! Looks","Fragments":["like"]},{"Key":"Looks like","Fragments":["the","you","a","you","i","you're","isalpha"]},{"Key":"the boost","Fragments":["include","string","namespaces","part).","one.","library","one","build.","function.","test","library.","libraries","string","string","trim.","tokenizer?","functions","convention","unit","regex","iostreams.","regex","string","tokenizer.","string","utilities!","builtin","libraries","tokenizer","algorithms...","library","plus","string","library","library","library.","function,"]},{"Key":"boost include","Fragments":["should","...","to"]},{"Key":"include should","Fragments":["be"]},{"Key":"be moved","Fragments":["to","to"]},{"Key":"moved to","Fragments":["the","a","anonymous","`isType`","the"]},{"Key":"cpp file.","Fragments":["This"]},{"Key":"file. This","Fragments":["is"]},{"Key":"is mainly","Fragments":["just","an"]},{"Key":"mainly just","Fragments":["good"]},{"Key":"just good","Fragments":["practice"]},{"Key":"good practice","Fragments":["to","to","in","IMO","to","to","to","to","to","(but","to"]},{"Key":"practice to","Fragments":["keep","include","do","do","have","rely","return","return","define","have","write","mention","const","put"]},{"Key":"times lower","Fragments":["on"]},{"Key":"lower on","Fragments":["larger"]},{"Key":"on larger","Fragments":["projects."]},{"Key":" @kaitlyn","Fragments":["I","That's"]},{"Key":"@kaitlyn I","Fragments":["am"]},{"Key":"not yet","Fragments":["well","in","clear","discovered?","clearly","contained","optimal:","familiar"]},{"Key":"yet well","Fragments":["versed"]},{"Key":"well versed","Fragments":["in"]},{"Key":"versed in","Fragments":["\"move\""]},{"Key":"in \"move\"","Fragments":["semantics,"]},{"Key":"\"move\" semantics,","Fragments":["sorry"]},{"Key":"semantics, sorry","Fragments":["I"]},{"Key":"sorry I","Fragments":["can't"]},{"Key":"can't help","Fragments":["there."]},{"Key":" @ottilie","Fragments":["it"]},{"Key":"@ottilie it","Fragments":["looks"]},{"Key":"const conversion","Fragments":["problem."]},{"Key":"conversion problem.","Fragments":["Is"]},{"Key":"problem. Is","Fragments":["the"]},{"Key":"Is the","Fragments":["signature"]},{"Key":"the signature","Fragments":["you"]},{"Key":"signature you","Fragments":["are"]},{"Key":" `string","Fragments":["bob::hey(const","word"]},{"Key":"`string bob::hey(const","Fragments":["string\u0026"]},{"Key":"bob::hey(const string\u0026","Fragments":["text)"]},{"Key":"string\u0026 text)","Fragments":["{`?"]},{"Key":"Interesting, when","Fragments":["I"]},{"Key":"I try","Fragments":["this","to","to","to","to","to","to","to","develop","to"]},{"Key":"try this","Fragments":["I","new","tutorial,"]},{"Key":"this I","Fragments":["get:","was","can","was","use","was","assumed","would","think"]},{"Key":" /home/driest/exercism/cpp/bob/bob.h:27:25:","Fragments":["note:"]},{"Key":"/home/driest/exercism/cpp/bob/bob.h:27:25: note:","Fragments":["no"]},{"Key":"note: no","Fragments":["known"]},{"Key":"no known","Fragments":["conversion"]},{"Key":"known conversion","Fragments":["for"]},{"Key":"conversion for","Fragments":["argument"]},{"Key":"for argument","Fragments":["1","in"]},{"Key":"argument 1","Fragments":["from"]},{"Key":"1 from","Fragments":["‘const"]},{"Key":"from ‘const","Fragments":["char","char*’"]},{"Key":"‘const char","Fragments":["[1]’"]},{"Key":"char [1]’","Fragments":["to"]},{"Key":"[1]’ to","Fragments":["‘std::string\u0026"]},{"Key":"to ‘std::string\u0026","Fragments":["{aka"]},{"Key":"‘std::string\u0026 {aka","Fragments":["std::basic_string\u003cchar\u003e\u0026}’"]},{"Key":"In file","Fragments":["included","included","included"]},{"Key":"file included","Fragments":["from","from","from"]},{"Key":"included from","Fragments":["/usr/include/boost/test/unit_test.hpp:19:0,","a.cpp:1:","a.cpp:1:0:"]},{"Key":" from","Fragments":["/home/driest/exercism/cpp/bob/bob_test.cpp:3:"]},{"Key":" /home/driest/exercism/cpp/bob/bob_test.cpp:","Fragments":["In"]},{"Key":"/home/driest/exercism/cpp/bob/bob_test.cpp: In","Fragments":["member"]},{"Key":"In member","Fragments":["function"]},{"Key":"function ‘void","Fragments":["prolonged_silence::test_method()’:"]},{"Key":" /home/driest/exercism/cpp/bob/bob_test.cpp:78:61:","Fragments":["error:"]},{"Key":"/home/driest/exercism/cpp/bob/bob_test.cpp:78:61: error:","Fragments":["no"]},{"Key":"error: no","Fragments":["matching"]},{"Key":"no matching","Fragments":["function"]},{"Key":"matching function","Fragments":["for"]},{"Key":"for call","Fragments":["to"]},{"Key":"call to","Fragments":["‘bob::hey(const","*number*","*area_code*","string","reserve","`format()`,","boost::trim_copy_if()","my","`std::transform`.","the","tolower","a","`.count()`","substr.","validate","use","a","yourself","hey,","`std::string`","```fill_map```-method","swap","boost::algorithm::to_lower","```std::transform```","```matches()```.","swap","find()","new","push_back","yelling","```std::pow```","```std::pow```","a","anagram::anagram(std::string)"]},{"Key":"to ‘bob::hey(const","Fragments":["char"]},{"Key":"‘bob::hey(const char","Fragments":["[4])’"]},{"Key":" BOOST_REQUIRE_EQUAL(\"Fine.","Fragments":["Be"]},{"Key":"BOOST_REQUIRE_EQUAL(\"Fine. Be","Fragments":["that"]},{"Key":"that way!\",","Fragments":["bob::hey(\""]},{"Key":"way!\", bob::hey(\"","Fragments":["\"));"]},{"Key":"For every","Fragments":["invocation","place"]},{"Key":"every invocation","Fragments":["of"]},{"Key":"invocation of","Fragments":["```bob::hey()```."]},{"Key":"iteration 7","Fragments":["if"]},{"Key":"7 if","Fragments":["you"]},{"Key":"a look.","Fragments":["Thanks"]},{"Key":"look. Thanks","Fragments":["for"]},{"Key":"for helping","Fragments":["me","me"]},{"Key":"helping me","Fragments":["out","do","get"]},{"Key":"me out","Fragments":["here.","on"]},{"Key":" Of","Fragments":["course.","course","course,","course","course,","course,","course,"]},{"Key":"Of course.","Fragments":["Using"]},{"Key":"course. Using","Fragments":["boost"]},{"Key":"Using boost","Fragments":["is","'iequals'","for"]},{"Key":"boost is","Fragments":["merely","invoked","mandated"]},{"Key":"is merely","Fragments":["an"]},{"Key":"merely an","Fragments":["implementation"]},{"Key":"implementation detail","Fragments":["and"]},{"Key":"detail and","Fragments":["should"]},{"Key":"and should","Fragments":["be","probably","perform","be","be","probably","be"]},{"Key":" Awesome,","Fragments":["that","thanks!"]},{"Key":"Awesome, that","Fragments":["was"]},{"Key":"was exactly","Fragments":["it","that,"]},{"Key":"exactly it","Fragments":[";)","means"]},{"Key":"it ;)","Fragments":["Thanks"]},{"Key":";) Thanks","Fragments":["again."]},{"Key":"is calling","Fragments":["`beer::verse(number)`","reserve"]},{"Key":"calling `beer::verse(number)`","Fragments":["this"]},{"Key":"`beer::verse(number)` this","Fragments":["means"]},{"Key":"this means","Fragments":["that","I"]},{"Key":"is expecting","Fragments":["a"]},{"Key":"expecting a","Fragments":["static"]},{"Key":"a static","Fragments":["method","const","constant,","member","public","function","function","method.","method.","or","method.","member","member","function","class","method","method","implementation,","public","method","method","string","member","function.","member","member","compute"]},{"Key":"static method","Fragments":["for","in","in","of","on"]},{"Key":"for both","Fragments":["_verse_"]},{"Key":"both _verse_","Fragments":["and"]},{"Key":"_verse_ and","Fragments":["_sing_."]},{"Key":"and _sing_.","Fragments":["I"]},{"Key":"_sing_. I","Fragments":["don't"]},{"Key":"know which","Fragments":["compiler","best","way","cases","'to_rna'"]},{"Key":"which compiler","Fragments":["you"]},{"Key":"compiler you","Fragments":["are","use.","choose,","use"]},{"Key":"are using,","Fragments":["but"]},{"Key":"using, but","Fragments":["for"]},{"Key":"me the","Fragments":["error","answer","first","readbility","following","```clean_number()```"]},{"Key":"the error","Fragments":["is","case.","case.","case.","case.","case.","result","will","case...","case,","case","case."]},{"Key":"is as","Fragments":["follows:","simple","easy","easy","fast","usual:","concise","straight-forward"]},{"Key":" /home/****/exercism/cpp/beer-song/beer_song_test.cpp:59:47:","Fragments":["error:"]},{"Key":"/home/****/exercism/cpp/beer-song/beer_song_test.cpp:59:47: error:","Fragments":["cannot"]},{"Key":"error: cannot","Fragments":["call"]},{"Key":"cannot call","Fragments":["member"]},{"Key":"call member","Fragments":["function"]},{"Key":"function ‘std::string","Fragments":["beer::sing(int,"]},{"Key":"‘std::string beer::sing(int,","Fragments":["int)’"]},{"Key":"beer::sing(int, int)’","Fragments":["without"]},{"Key":"int)’ without","Fragments":["object"]},{"Key":" BOOST_REQUIRE_EQUAL(expected,","Fragments":["beer::sing(3));"]},{"Key":"case fails","Fragments":["because"]},{"Key":"fails because","Fragments":["2"]},{"Key":"because 2","Fragments":["bottles"]},{"Key":"2 bottles","Fragments":["is","of","of"]},{"Key":"bottles is","Fragments":["a"]},{"Key":"bottles of","Fragments":["beer","beer","beer","beer"]},{"Key":"beer on","Fragments":["the","the","the","the","the"]},{"Key":"the wall,","Fragments":["2","\";","\"","no"]},{"Key":"wall, 2","Fragments":["bottles"]},{"Key":" Take","Fragments":["it","a","a"]},{"Key":"Take it","Fragments":["down","by"]},{"Key":"it down","Fragments":["and","to","to","to","really"]},{"Key":"down and","Fragments":["pass","commit"]},{"Key":"and pass","Fragments":["it","in"]},{"Key":"it around,","Fragments":["1"]},{"Key":"around, 1","Fragments":["bottle(SINGULAR)"]},{"Key":"1 bottle(SINGULAR)","Fragments":["of"]},{"Key":"bottle(SINGULAR) of","Fragments":["beer"]},{"Key":"the readability.","Fragments":["Very"]},{"Key":"readability. Very","Fragments":["straight"]},{"Key":"Very straight","Fragments":["forward."]},{"Key":"forward. On","Fragments":["a"]},{"Key":"a point","Fragments":["about","of","in"]},{"Key":"about c++,","Fragments":["implementations"]},{"Key":"c++, implementations","Fragments":["should"]},{"Key":"implementations should","Fragments":["be","do"]},{"Key":"in cpp","Fragments":["files","file","\u0026"]},{"Key":"cpp files","Fragments":["and","for"]},{"Key":"files and","Fragments":["not","see"]},{"Key":"the header.","Fragments":["Because","And","It","Surprising","Using","What","I","Usally"]},{"Key":"header. Because","Fragments":["you"]},{"Key":"Because you","Fragments":["chose","want"]},{"Key":"you chose","Fragments":["to","the","to","to","to","to","it","sort","the"]},{"Key":"chose to","Fragments":["use","compute","use","determine","ignore","take","have","use","make","use","compare","pad","check"]},{"Key":"class instead","Fragments":["of","of","of"]},{"Key":"namespace, you","Fragments":["should"]},{"Key":"probably make","Fragments":["the","a"]},{"Key":"constructor private","Fragments":["so"]},{"Key":"private so","Fragments":["that"]},{"Key":"so that","Fragments":["one","the","a","it","it","that","all","it","array","it","they","the","it","you","can","I","the","the","same","as","it's","changing","non","it","`algo.h`","the","everything","it","the","I","it","ist","was","your","could","the","I","the","you","\"Whatever\"","it","it","makes","a","you","it","it"]},{"Key":"that one","Fragments":["couldn't","line","until","issue,","effectively…","way","of","can"]},{"Key":"one couldn't","Fragments":["not"]},{"Key":"couldn't not","Fragments":["accidentally"]},{"Key":"not accidentally","Fragments":["instantiate"]},{"Key":"accidentally instantiate","Fragments":["the"]},{"Key":"instantiate the","Fragments":["class"]},{"Key":"class only","Fragments":["to","containing"]},{"Key":"only to","Fragments":["find","avoid","tell","know","do"]},{"Key":"is useless","Fragments":["(thinking"]},{"Key":"useless (thinking","Fragments":["autocomplete"]},{"Key":"(thinking autocomplete","Fragments":["etc)"]},{"Key":"could save","Fragments":["yourself","time).","quite"]},{"Key":"save yourself","Fragments":["the","an","the","having","the"]},{"Key":"yourself the","Fragments":["copy","forward","`i`"]},{"Key":"the copy","Fragments":["and","version.","in","that","(or"]},{"Key":"compare in","Fragments":["find_caps"]},{"Key":"in find_caps","Fragments":["by"]},{"Key":"find_caps by","Fragments":["answer"]},{"Key":"by answer","Fragments":["the"]},{"Key":"answer the","Fragments":["question","question"]},{"Key":"question \"Is","Fragments":["there"]},{"Key":"\"Is there","Fragments":["a"]},{"Key":"a lower","Fragments":["case","level?","case"]},{"Key":"the `query`","Fragments":["member"]},{"Key":"`query` member","Fragments":["variable"]},{"Key":"variable `const`","Fragments":["by"]},{"Key":"`const` by","Fragments":["changing"]},{"Key":"by changing","Fragments":["the","the","the","`\u003c65`"]},{"Key":" `Bob(std::string","Fragments":["\u0026q)"]},{"Key":"`Bob(std::string \u0026q)","Fragments":[":"]},{"Key":"\u0026q) :","Fragments":["query(boost::trim_copy(q)){}`"]},{"Key":"boost string","Fragments":["trim,","algorithm","algorithms.","algo","algorithms","routines","algorithms."]},{"Key":"string trim,","Fragments":["you"]},{"Key":"simplify those","Fragments":["for"]},{"Key":"those for","Fragments":["loops"]},{"Key":"loops by","Fragments":["using","hand"]},{"Key":"using `boost::all`","Fragments":["and"]},{"Key":"`boost::all` and","Fragments":["the"]},{"Key":"the classification","Fragments":["predicates","functions"]},{"Key":"classification predicates","Fragments":["supplied"]},{"Key":"predicates supplied","Fragments":["by"]},{"Key":"supplied by","Fragments":["boost"]},{"Key":"by boost","Fragments":["algorithm"]},{"Key":"boost algorithm","Fragments":["string"]},{"Key":"should rename","Fragments":["`allDigits`"]},{"Key":"rename `allDigits`","Fragments":["to"]},{"Key":"`allDigits` to","Fragments":["`hasAlpha`"]},{"Key":"to `hasAlpha`","Fragments":["since"]},{"Key":"`hasAlpha` since","Fragments":["that"]},{"Key":"since that","Fragments":["is","is","would","is"]},{"Key":"is what","Fragments":["is","you","it'll","will","@cedrick","used","prompted","do","I","you","I","took","const","is","I","I"]},{"Key":"save some","Fragments":["compares","typing."]},{"Key":"some compares","Fragments":["on"]},{"Key":"compares on","Fragments":["space","for"]},{"Key":"on space","Fragments":["characters"]},{"Key":"space characters","Fragments":["by"]},{"Key":"characters by","Fragments":["**continue**"]},{"Key":"by **continue**","Fragments":["in"]},{"Key":"**continue** in","Fragments":["the"]},{"Key":"the else","Fragments":["clause","if","could","if","clauses.","statement,","if"]},{"Key":"else clause","Fragments":["of","and"]},{"Key":"clause of","Fragments":["the"]},{"Key":"the silence","Fragments":["check;","response"]},{"Key":"silence check;","Fragments":["however"]},{"Key":"check; however","Fragments":["this"]},{"Key":"however this","Fragments":["might","implies"]},{"Key":"this might","Fragments":["also","still","blow","work","not"]},{"Key":"also require","Fragments":["chaining"]},{"Key":"require chaining","Fragments":["the"]},{"Key":"chaining the","Fragments":["*isQuestion*"]},{"Key":"the *isQuestion*","Fragments":["check"]},{"Key":"*isQuestion* check","Fragments":["a"]},{"Key":"be mistake","Fragments":["about"]},{"Key":"mistake about","Fragments":["this"]},{"Key":"this (depends","Fragments":["on"]},{"Key":"(depends on","Fragments":["the","your"]},{"Key":"the compiler)","Fragments":["but"]},{"Key":"compiler) but","Fragments":["you"]},{"Key":"save branch","Fragments":["prediction"]},{"Key":"prediction misses","Fragments":["by"]},{"Key":"misses by","Fragments":["saying"]},{"Key":" `silence","Fragments":["\u0026="]},{"Key":"`silence \u0026=","Fragments":["inputString[i]"]},{"Key":"\u0026= inputString[i]","Fragments":["!="]},{"Key":"inputString[i] !=","Fragments":["'"]},{"Key":" Only","Fragments":["provide","considering","if","the","numbers","nit","thing"]},{"Key":"Only provide","Fragments":["output"]},{"Key":"provide output","Fragments":["for"]},{"Key":"output for","Fragments":["inputs","the","a"]},{"Key":"for inputs","Fragments":["in"]},{"Key":"in range","Fragments":["{1"]},{"Key":"range {1","Fragments":["-"]},{"Key":"{1 -","Fragments":["8}."]},{"Key":"of having","Fragments":["3","a","one","to","them","a","a","to","to"]},{"Key":"having 3","Fragments":["separate"]},{"Key":"3 separate","Fragments":["structures","iterations"]},{"Key":"separate structures","Fragments":["that"]},{"Key":"structures that","Fragments":["are","must","must","must","must"]},{"Key":"are related","Fragments":["by"]},{"Key":"related by","Fragments":["index"]},{"Key":"by index","Fragments":["only,"]},{"Key":"index only,","Fragments":["consider"]},{"Key":"only, consider","Fragments":["using"]},{"Key":"a struct","Fragments":["or","with","here","is"]},{"Key":"struct or","Fragments":["class"]},{"Key":"or class","Fragments":["to"]},{"Key":"class to","Fragments":["encapsulate","overuse","a","operate","operate","abstract","a","the","perform","namespace","namespace"]},{"Key":"encapsulate on","Fragments":["of"]},{"Key":"on of","Fragments":["these"]},{"Key":"these \"row\"s.","Fragments":["Once"]},{"Key":"\"row\"s. Once","Fragments":["this"]},{"Key":"Once this","Fragments":["collection"]},{"Key":"this collection","Fragments":["of"]},{"Key":"collection of","Fragments":["row","\"marked\"","things","objects."]},{"Key":"of row","Fragments":["objects"]},{"Key":"row objects","Fragments":["is"]},{"Key":"objects is","Fragments":["in","a","```std::vector\u003cstd::string\u003e"]},{"Key":"a container,","Fragments":["you","but"]},{"Key":"container, you","Fragments":["should"]},{"Key":"magic numbers","Fragments":["and"]},{"Key":"numbers and","Fragments":["allow","numbers","factors.","a"]},{"Key":"and allow","Fragments":["for","splitting"]},{"Key":"allow for","Fragments":["simple","any","typos."]},{"Key":"for simple","Fragments":["expansion","searches.","patterns"]},{"Key":"simple expansion","Fragments":["if"]},{"Key":"expansion if","Fragments":["the"]},{"Key":"the song","Fragments":["were","structure!","assembly","be","lyrics.","data","verse","verse","from","(0"]},{"Key":"song were","Fragments":["to"]},{"Key":"were to","Fragments":["grow.","be","expand","benchmark","happen,","take"]},{"Key":"to review","Fragments":["this"]},{"Key":"review this","Fragments":["because"]},{"Key":"the external","Fragments":["dependency"]},{"Key":"external dependency","Fragments":["is","that's"]},{"Key":"dependency is","Fragments":["not"]},{"Key":" Opening","Fragments":["up"]},{"Key":"Opening up","Fragments":["the"]},{"Key":"the file","Fragments":["and","but","later,","that","that","can't","and","it's","you"]},{"Key":"and reading","Fragments":["for"]},{"Key":"reading for","Fragments":["every"]},{"Key":"for every","Fragments":["verse","single","iteration,","type","character.","element.","word","iteration","verse).","iteration,","possible","input.","word"]},{"Key":"every verse","Fragments":["is"]},{"Key":"verse is","Fragments":["expensive","sometimes","output","output."]},{"Key":"is expensive","Fragments":["and","with"]},{"Key":"expensive and","Fragments":["unnecessary."]},{"Key":"and unnecessary.","Fragments":["You"]},{"Key":"unnecessary. You","Fragments":["could","could"]},{"Key":"have simply","Fragments":["had","use"]},{"Key":"simply had","Fragments":["a"]},{"Key":"a a","Fragments":["static"]},{"Key":"static const","Fragments":["string","defined.\u003c/li\u003e","objects"]},{"Key":"the file,","Fragments":["or"]},{"Key":"file, or","Fragments":["at","at"]},{"Key":"at worst,","Fragments":["read"]},{"Key":"worst, read","Fragments":["from"]},{"Key":"read from","Fragments":["the","later."]},{"Key":"but cache","Fragments":["the"]},{"Key":"cache the","Fragments":["resultant"]},{"Key":"the resultant","Fragments":["structure.","iterator,"]},{"Key":"is fast,","Fragments":["and"]},{"Key":"fast, and","Fragments":["easy"]},{"Key":"to extend;","Fragments":["however,"]},{"Key":"extend; however,","Fragments":["I"]},{"Key":"however, I","Fragments":["think","don't","don't","would"]},{"Key":"it rather","Fragments":["misses"]},{"Key":"rather misses","Fragments":["one"]},{"Key":"misses one","Fragments":["of"]},{"Key":"the points","Fragments":["of","made"]},{"Key":"points of","Fragments":["the","Mr.","possible"]},{"Key":"exercise which","Fragments":["is"]},{"Key":"is figuring","Fragments":["out"]},{"Key":"figuring out","Fragments":["how"]},{"Key":"out how","Fragments":["to","to","to","to","to","to","to","to","to"]},{"Key":"the verse","Fragments":["chain","chain","so","function"]},{"Key":"verse chain","Fragments":["dynamically.","based"]},{"Key":"nice. I","Fragments":["would","probably","also"]},{"Key":"would remove","Fragments":["the","the"]},{"Key":"for spider","Fragments":["by"]},{"Key":"spider by","Fragments":["adding"]},{"Key":"by adding","Fragments":["a","a","the","a"]},{"Key":"adding a","Fragments":["third","flag","comment","game","enum","constructor/destructor","bunch","`Disposition`,","corresponding","const"]},{"Key":"third element","Fragments":["in"]},{"Key":"the struct,","Fragments":["something"]},{"Key":"struct, something","Fragments":["like"]},{"Key":"like *catch_qualifier*","Fragments":["that"]},{"Key":"*catch_qualifier* that","Fragments":["defaults"]},{"Key":"that defaults","Fragments":["to"]},{"Key":"defaults to","Fragments":["\"\""]},{"Key":"Also i","Fragments":["would","should"]},{"Key":"i would","Fragments":["remove","say","use","need","make"]},{"Key":"the \"horse\"","Fragments":["special"]},{"Key":"\"horse\" special","Fragments":["case"]},{"Key":"comparing `if","Fragments":["(current"]},{"Key":"`if (current","Fragments":["=="]},{"Key":"(current ==","Fragments":["*_verses.back())`"]},{"Key":"== *_verses.back())`","Fragments":["**Note**"]},{"Key":"*_verses.back())` **Note**","Fragments":["normally"]},{"Key":"**Note** normally","Fragments":["one"]},{"Key":"normally one","Fragments":["must"]},{"Key":"one must","Fragments":["check"]},{"Key":"must check","Fragments":["if","if"]},{"Key":"the vector","Fragments":["is","sorted","is","by","still","and","constructor","constructor","no","costs","`words`.","after","and","from","from","of"]},{"Key":"vector is","Fragments":["empty","a","already","inserted.","not","constructed"]},{"Key":"is empty","Fragments":["before",",","and","or","or","or","by","it","requiring"]},{"Key":"empty before","Fragments":["accessing","I"]},{"Key":"before accessing","Fragments":["*back*"]},{"Key":"accessing *back*","Fragments":["but"]},{"Key":"*back* but","Fragments":["because"]},{"Key":"but because","Fragments":["this","I","I","I","I"]},{"Key":"because this","Fragments":["vector","will","transforms","example"]},{"Key":"this vector","Fragments":["is"]},{"Key":"static constant,","Fragments":["this"]},{"Key":"constant, this","Fragments":["is"]},{"Key":"is safe.","Fragments":["consider"]},{"Key":"safe. consider","Fragments":["guarding"]},{"Key":"consider guarding","Fragments":["with"]},{"Key":"guarding with","Fragments":["an"]},{"Key":"the *_verses*","Fragments":["**const**"]},{"Key":" Try","Fragments":["building","to","using","to"]},{"Key":"Try building","Fragments":["up"]},{"Key":"building up","Fragments":["the","the"]},{"Key":"the verses","Fragments":["instead","are","and","to","instead","of","as"]},{"Key":"verses instead","Fragments":["of","of"]},{"Key":"just having","Fragments":["constant","this"]},{"Key":"having constant","Fragments":["values."]},{"Key":"constant values.","Fragments":["This"]},{"Key":"values. This","Fragments":["current"]},{"Key":"This current","Fragments":["method"]},{"Key":"current method","Fragments":["while"]},{"Key":"method while","Fragments":["effective"]},{"Key":"while effective","Fragments":["is"]},{"Key":"effective is","Fragments":["maintenance"]},{"Key":"is maintenance","Fragments":["nightmare."]},{"Key":" Glad","Fragments":["to","to","I","to"]},{"Key":"Glad to","Fragments":["see","see","see"]},{"Key":"see that","Fragments":["this","there,","`regex_match`","you","this","it","it","you","you","`spaceless`","you","yelling","in","the"]},{"Key":"is build","Fragments":["up"]},{"Key":"build up","Fragments":["of","the"]},{"Key":"up of","Fragments":["parts."]},{"Key":"of parts.","Fragments":["I"]},{"Key":"parts. I","Fragments":["think"]},{"Key":"can take","Fragments":["this","```s.rend()```","multiple","a","from","a","multiple","what"]},{"Key":"take this","Fragments":["further","input","to"]},{"Key":"this further","Fragments":["by"]},{"Key":"further by","Fragments":["creating"]},{"Key":"by creating","Fragments":["a"]},{"Key":"class or","Fragments":["struct","take","struct","function"]},{"Key":"or struct","Fragments":["to","-"]},{"Key":"struct to","Fragments":["encapsulate","limit","store"]},{"Key":"encapsulate a","Fragments":["verse"]},{"Key":"a verse","Fragments":["and","dynamically."]},{"Key":"verse and","Fragments":["build","after"]},{"Key":"and build","Fragments":["up","a"]},{"Key":"chain based","Fragments":["off"]},{"Key":"based off","Fragments":["of","that."]},{"Key":"off of","Fragments":["a","cleanKey()"]},{"Key":"a list","Fragments":["of","of","of","of","of","because"]},{"Key":"list of","Fragments":["those","primes","prime","all","known","commands","ways","responses","books","every","tests,","the"]},{"Key":"Interesting use","Fragments":["of","of"]},{"Key":"of regex","Fragments":["to","over","in","or","libraries"]},{"Key":"regex to","Fragments":["parse","not","make","load"]},{"Key":"to parse","Fragments":["the","in","and","through","the","at","the"]},{"Key":"parse the","Fragments":["table.","string","string"]},{"Key":"the table.","Fragments":["Consider","Had"]},{"Key":"table. Consider","Fragments":["a"]},{"Key":"Consider a","Fragments":["different","reference","reference","reference","constructor"]},{"Key":"different approach","Fragments":["where","to"]},{"Key":"approach where","Fragments":["the","the"]},{"Key":"verses are","Fragments":["built","changed."]},{"Key":"are built","Fragments":["rather","in"]},{"Key":"built rather","Fragments":["than"]},{"Key":"rather than","Fragments":["looked","\"","one","const","take","just","overloading,","operator[].","modify","its","the","+=.","marking","const","magic","returning","the","build","walking","modifying","`s.add(\"A\",","std::array\u003cint,4\u003e","specific","if","inside","testing","when","a","defining","a","include","implicitly","\"ctype.h\"","boost::regex.",".h","by","using","to","two","a","63","performance,","burying","making","not","not","going","make","splitting","by","explicit","copying","the","a","the","checking","using","throw","`std::runtime_error`.","dropping","implementing","`O(n","allow","needing","write","from","perform","on","boost::format","punctuation","`auto","```const","streams","just","-1","integers.","throw","recompute","ignoring","simply","a","just","by","a"]},{"Key":"than looked","Fragments":["up."]},{"Key":"First experience","Fragments":["with"]},{"Key":"experience with","Fragments":["C++","C++","that,","c++"]},{"Key":"C++ classes,","Fragments":["input"]},{"Key":"classes, input","Fragments":["appreciated"]},{"Key":"input appreciated","Fragments":[":)"]},{"Key":"use `resp.empty()`","Fragments":["over"]},{"Key":"`resp.empty()` over","Fragments":["`!resp.length()`"]},{"Key":"over `!resp.length()`","Fragments":["to"]},{"Key":"`!resp.length()` to","Fragments":["avoid"]},{"Key":" why","Fragments":["not","not","query","not"]},{"Key":"just `return","Fragments":["!std::isalpha(c)`?"]},{"Key":"the brevity,","Fragments":["but"]},{"Key":"brevity, but","Fragments":["I"]},{"Key":"this perhaps","Fragments":["isn't"]},{"Key":"perhaps isn't","Fragments":["passing"]},{"Key":"isn't passing","Fragments":["all"]},{"Key":"passing all","Fragments":["of","tests.","the"]},{"Key":"cases due","Fragments":["to"]},{"Key":"some missed","Fragments":["conditions"]},{"Key":"missed conditions","Fragments":[":p"]},{"Key":"Good point.","Fragments":["I","That's","I","Clearly"]},{"Key":"hadn't thought","Fragments":["too","of","of."]},{"Key":"thought too","Fragments":["hard"]},{"Key":"too hard","Fragments":["about","to"]},{"Key":"hard about","Fragments":["it."]},{"Key":"about it.","Fragments":["I","There","It"]},{"Key":"it. I","Fragments":["had","would","mean,","know","had","shouldn't","suppose","get","think","would","opted","didn't","didn't","really","don't","still","then"]},{"Key":"had tunnel-vision","Fragments":["down"]},{"Key":"tunnel-vision down","Fragments":["that"]},{"Key":"down that","Fragments":["same","route"]},{"Key":"that same","Fragments":["path.","temporary"]},{"Key":"same path.","Fragments":["Revising"]},{"Key":"path. Revising","Fragments":["it"]},{"Key":"Revising it","Fragments":["to"]},{"Key":"to that","Fragments":["makes","after","could","function.","for","point,","in","function"]},{"Key":"that makes","Fragments":["it","it","more","the","sense","members","a","this","this","it","your","your","your","your","up","your"]},{"Key":"makes it","Fragments":["a","also","hard","impossible","seem","easier","into","more","not","clear","a","clear","slightly","so","a","pass"]},{"Key":"lot simpler.","Fragments":["Thanks","I'm"]},{"Key":"simpler. Thanks","Fragments":["for"]},{"Key":" Needs","Fragments":["rewrite"]},{"Key":"Needs rewrite","Fragments":["using"]},{"Key":"rewrite using","Fragments":["`__getattr__`"]},{"Key":"Using `boost::split`","Fragments":["is"]},{"Key":"`boost::split` is","Fragments":["definitely"]},{"Key":"is definitely","Fragments":["something","clever","a","right","better.","not"]},{"Key":"definitely something","Fragments":["I","I'll"]},{"Key":"something I","Fragments":["didn't","decided","recently","miss","have","was","did"]},{"Key":"didn't expect.","Fragments":["I"]},{"Key":"expect. I","Fragments":["personally"]},{"Key":"I personally","Fragments":["used","don't","do","think","like","like","like","like","think"]},{"Key":"personally used","Fragments":["`boost::tokenizer`"]},{"Key":"used `boost::tokenizer`","Fragments":["mixed"]},{"Key":"`boost::tokenizer` mixed","Fragments":["with"]},{"Key":"mixed with","Fragments":["a","a"]},{"Key":"a custom","Fragments":["`boost::char_separator\u003cchar\u003e`.","_compare_","struct)?","iterator","`trim`","comparison","ctype.","class"]},{"Key":" Knowing","Fragments":["how"]},{"Key":"Knowing how","Fragments":["to"]},{"Key":"use Boost","Fragments":["and"]},{"Key":"Boost and","Fragments":["what","do","having"]},{"Key":"what to","Fragments":["use","do","change","do","return"]},{"Key":"use seems","Fragments":["to"]},{"Key":"be an","Fragments":["accomplishment","iota","enum","issue","enum","exaggeration.","improvement,","issue).","offset","excellent","aggregate","amortized","attempt","less-than.","inequality","alias"]},{"Key":"an accomplishment","Fragments":["in"]},{"Key":"accomplishment in","Fragments":["and"]},{"Key":"in and","Fragments":["of","commented,","make"]},{"Key":"and of","Fragments":["itself."]},{"Key":"of itself.","Fragments":["Good","But","Since"]},{"Key":"itself. Good","Fragments":["job!"]},{"Key":" yes,","Fragments":["you","ive"]},{"Key":"yes, you","Fragments":["are"]},{"Key":"are right!","Fragments":["i'll"]},{"Key":"right! i'll","Fragments":["update"]},{"Key":"i'll update","Fragments":["this"]},{"Key":"update this","Fragments":["script!"]},{"Key":"this script!","Fragments":["thanks"]},{"Key":"script! thanks","Fragments":["for"]},{"Key":"Thanks a","Fragments":["lot,","lot","lot"]},{"Key":"a lot,","Fragments":["gotta","I"]},{"Key":"lot, gotta","Fragments":["be"]},{"Key":"gotta be","Fragments":["more"]},{"Key":"more careful","Fragments":["next","look"]},{"Key":"careful next","Fragments":["time."]},{"Key":" `dnaString`","Fragments":["is"]},{"Key":"`dnaString` is","Fragments":["not"]},{"Key":"used except","Fragments":["during"]},{"Key":"except during","Fragments":["construction."]},{"Key":"during construction.","Fragments":["Should"]},{"Key":"construction. Should","Fragments":["be"]},{"Key":"Should be","Fragments":["removed","**const**","speedy?"]},{"Key":"be removed","Fragments":["as","by","if","from"]},{"Key":"removed as","Fragments":["it"]},{"Key":"it uses","Fragments":["a","ANSI","1","logic","the","a"]},{"Key":"uses a","Fragments":["lot","single","combination","while","lot"]},{"Key":"of memory","Fragments":["for","access","usage","(26*sizeof(int)"]},{"Key":"memory for","Fragments":["any","any","empty"]},{"Key":"for any","Fragments":["non","char","non","hints","C-locale","meaningful","integer","real","single-call","type","imaginable","further","of","lower","character","conditions"]},{"Key":"any non","Fragments":["trivial","trivial"]},{"Key":"non trivial","Fragments":["dns","dna"]},{"Key":"trivial dns","Fragments":["sequence"]},{"Key":"The difference","Fragments":["here","between","with"]},{"Key":"difference here","Fragments":["is"]},{"Key":"that we","Fragments":["no","have","both","have","don't","know","aren't","don't","do","don't","care","care","are","are"]},{"Key":"we no","Fragments":["longer"]},{"Key":"longer copy","Fragments":["the"]},{"Key":"the \"checking","Fragments":["for"]},{"Key":"\"checking for","Fragments":["question\""]},{"Key":"for question\"","Fragments":["case."]},{"Key":"The runtime","Fragments":["complexity"]},{"Key":"runtime complexity","Fragments":["of"]},{"Key":"complexity of","Fragments":["this","the","sorting","sort","```O(N^2)```.","allUpper"]},{"Key":"now O(n)","Fragments":["with"]},{"Key":"O(n) with","Fragments":["memory"]},{"Key":"with memory","Fragments":["consumption"]},{"Key":"memory consumption","Fragments":["O(1)","O(1)","of"]},{"Key":"is kept","Fragments":["const.","simpler"]},{"Key":"* Single","Fragments":["argument","argument"]},{"Key":"marked **explicit**","Fragments":["to","to","to","to","to"]},{"Key":"**explicit** to","Fragments":["avoid","avoid","avoid","avoid","avoid"]},{"Key":"* extra","Fragments":["copy"]},{"Key":"is created.","Fragments":["consider","consider"]},{"Key":"created. consider","Fragments":["`dna::counter::counter(const","taking"]},{"Key":"consider `dna::counter::counter(const","Fragments":["string\u0026"]},{"Key":"`dna::counter::counter(const string\u0026","Fragments":["s)`"]},{"Key":"you create","Fragments":["the","one","default","a","a","the","a"]},{"Key":"create the","Fragments":["map","constructor/destructor.","general","magnitude","separator.","maps:"]},{"Key":"map during","Fragments":["construction,"]},{"Key":"during construction,","Fragments":["you"]},{"Key":"construction, you","Fragments":["don't"]},{"Key":"the repeatedly","Fragments":["query"]},{"Key":"repeatedly query","Fragments":["in"]},{"Key":"query in","Fragments":["the"]},{"Key":"the `count`","Fragments":["method."]},{"Key":"`count` method.","Fragments":["Conversely,"]},{"Key":"method. Conversely,","Fragments":["you"]},{"Key":"Conversely, you","Fragments":["could"]},{"Key":"could refactor","Fragments":["the"]},{"Key":"refactor the","Fragments":["*nucleotide_counts*","codes"]},{"Key":"the *nucleotide_counts*","Fragments":["to"]},{"Key":"*nucleotide_counts* to","Fragments":["reuse"]},{"Key":"to reuse","Fragments":["the","code,","StringView.","\u0026","the"]},{"Key":"the *count*","Fragments":["function"]},{"Key":"* the","Fragments":["input","input","algorithms"]},{"Key":"input sequence","Fragments":["is"]},{"Key":"sequence is","Fragments":["held","excessive,","copied.","stored"]},{"Key":"is held","Fragments":["in"]},{"Key":"held in","Fragments":["the"]},{"Key":"the object.","Fragments":["This"]},{"Key":"object. This","Fragments":["is"]},{"Key":"not efficient","Fragments":["storage"]},{"Key":"efficient storage","Fragments":["for"]},{"Key":"storage for","Fragments":["the","this."]},{"Key":"problem. You","Fragments":["could","try"]},{"Key":"use 4","Fragments":["member"]},{"Key":"4 member","Fragments":["variables"]},{"Key":"variables for","Fragments":["each","avoiding","the","the"]},{"Key":"each count","Fragments":["or"]},{"Key":"count or","Fragments":["a"]},{"Key":"is great.","Fragments":["I","I'll","I'm","Short,","It"]},{"Key":"great. I","Fragments":["think","might","had"]},{"Key":"that could","Fragments":["improve","be","throw,","reasonably","be","be","hold","play","be","be","be","make","be","be","do","be","be","answer"]},{"Key":"could improve","Fragments":["this","the","the"]},{"Key":"improve this","Fragments":["is","IMO"]},{"Key":"is if","Fragments":["the","the","the","the","the","(","you","the"]},{"Key":"constructor was","Fragments":["somehow","automatically"]},{"Key":"was somehow","Fragments":["templated"]},{"Key":"somehow templated","Fragments":["to"]},{"Key":"templated to","Fragments":["allow"]},{"Key":"to allow","Fragments":["for","multiple","Bob","or","for"]},{"Key":"char sequence","Fragments":["not"]},{"Key":"sequence not","Fragments":["just"]},{"Key":"just std","Fragments":["string."]},{"Key":" *dna_m*","Fragments":["is"]},{"Key":"*dna_m* is","Fragments":["only"]},{"Key":"only used","Fragments":["in","for","twice,","to"]},{"Key":"constructor and","Fragments":["can","saving","places","destructor.","thus","destructor","that","destructor."]},{"Key":"and can","Fragments":["be","be","be","not","be","be","do","cause","stop","lead","immediately"]},{"Key":" save","Fragments":["the"]},{"Key":"map instead","Fragments":["of"]},{"Key":"string. multiple","Fragments":["calls"]},{"Key":"multiple calls","Fragments":["to"]},{"Key":"count keep","Fragments":["causing"]},{"Key":"keep causing","Fragments":["the"]},{"Key":"causing the","Fragments":["whole"]},{"Key":"whole input","Fragments":["to"]},{"Key":"be parsed.","Fragments":["Also"]},{"Key":"parsed. Also","Fragments":["the"]},{"Key":"an inefficient","Fragments":["storage","way"]},{"Key":"inefficient storage","Fragments":["for"]},{"Key":" unnecessary","Fragments":["copy","copy","copy","copy","copy","copy","double","copy"]},{"Key":"of *dna_code*","Fragments":["in"]},{"Key":"*dna_code* in","Fragments":["constructor."]},{"Key":"in constructor.","Fragments":["Use"]},{"Key":"constructor. Use","Fragments":["a"]},{"Key":"Use a","Fragments":["const","header"]},{"Key":"Great use","Fragments":["of","of"]},{"Key":"of array","Fragments":["for"]},{"Key":"array for","Fragments":["storage","each","animals","improved"]},{"Key":"for storage","Fragments":["here."]},{"Key":"storage here.","Fragments":["Super"]},{"Key":"here. Super","Fragments":["compact,"]},{"Key":"Super compact,","Fragments":["lookup"]},{"Key":"compact, lookup","Fragments":["is"]},{"Key":"lookup is","Fragments":["fast"]},{"Key":"is fast","Fragments":["as","and","too!","here,","enough"]},{"Key":"fast as","Fragments":["hell","I","possible"]},{"Key":"as hell","Fragments":["too"]},{"Key":"hell too","Fragments":["because"]},{"Key":"too because","Fragments":["the"]},{"Key":"the possible","Fragments":["key","values","anagrams","sorted"]},{"Key":"possible key","Fragments":["values"]},{"Key":"key values","Fragments":["are"]},{"Key":"values are","Fragments":["so"]},{"Key":"are so","Fragments":["small","few","simple,","many","many","ubiquitous"]},{"Key":"small (for","Fragments":["converting"]},{"Key":"(for converting","Fragments":["char"]},{"Key":"converting char","Fragments":["to"]},{"Key":"is concice;","Fragments":["however"]},{"Key":"concice; however","Fragments":["the"]},{"Key":"however the","Fragments":["compiler","solution"]},{"Key":"not going","Fragments":["to","to","to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"to reason","Fragments":["about","about.","about","about."]},{"Key":"reason about","Fragments":["the","arguments"]},{"Key":"* stratnd","Fragments":["is"]},{"Key":"stratnd is","Fragments":["copied,"]},{"Key":"is copied,","Fragments":["should"]},{"Key":"copied, should","Fragments":["be"]},{"Key":"be `const","Fragments":["string\u0026"]},{"Key":"* because","Fragments":["the"]},{"Key":"being counted","Fragments":["and"]},{"Key":"counted and","Fragments":["the"]},{"Key":"value changes","Fragments":["the"]},{"Key":"changes the","Fragments":["compiler","name","table"]},{"Key":"compiler cant","Fragments":["optimize"]},{"Key":"cant optimize","Fragments":["this"]},{"Key":"this check.","Fragments":["If"]},{"Key":"check. If","Fragments":["you"]},{"Key":"a switch/if","Fragments":["statment"]},{"Key":"switch/if statment","Fragments":["against"]},{"Key":"statment against","Fragments":["constant"]},{"Key":"against constant","Fragments":["values,"]},{"Key":"constant values,","Fragments":["this"]},{"Key":"values, this","Fragments":["turns"]},{"Key":"this turns","Fragments":["into"]},{"Key":"turns into","Fragments":["a"]},{"Key":"a jump","Fragments":["table."]},{"Key":"is copied.","Fragments":["`const","use"]},{"Key":"copied. `const","Fragments":["string\u0026"]},{"Key":"string\u0026 input`","Fragments":["avoids"]},{"Key":"input` avoids","Fragments":["this"]},{"Key":"avoids this","Fragments":["copy","problem."]},{"Key":"will create","Fragments":["nucleotide","a","a"]},{"Key":"create nucleotide","Fragments":["counts"]},{"Key":"nucleotide counts","Fragments":["for"]},{"Key":"counts for","Fragments":["invalid"]},{"Key":"Great sutff.","Fragments":["You"]},{"Key":"sutff. You","Fragments":["don't"]},{"Key":"to hold","Fragments":["onto","up","a","that","any","any","the"]},{"Key":"hold onto","Fragments":["the"]},{"Key":"onto the","Fragments":["input"]},{"Key":"input though.","Fragments":["Given"]},{"Key":"though. Given","Fragments":["that"]},{"Key":"Given that","Fragments":["dns","we","the","it"]},{"Key":"that dns","Fragments":["sequences"]},{"Key":"dns sequences","Fragments":["are"]},{"Key":"sequences are","Fragments":["usually","not","unequal.","not","different","different","unequal","not"]},{"Key":"usually quite","Fragments":["large,"]},{"Key":"quite large,","Fragments":["efficient"]},{"Key":"large, efficient","Fragments":["memory"]},{"Key":"efficient memory","Fragments":["is"]},{"Key":"probably important","Fragments":["here."]},{"Key":" keeping","Fragments":["a","a"]},{"Key":"keeping a","Fragments":["copy","copy","copy"]},{"Key":"is excessive.","Fragments":["Just"]},{"Key":"excessive. Just","Fragments":["keep"]},{"Key":"Just keep","Fragments":["a","the"]},{"Key":"keep a","Fragments":["copy","sorted","reference","single"]},{"Key":"the map.","Fragments":["This","_strand","Then","Also","I","Since","Hence,","So","For"]},{"Key":"map. This","Fragments":["makes"]},{"Key":"This makes","Fragments":["memory","sense.","your","pretty","pretty","your"]},{"Key":"makes memory","Fragments":["consumption"]},{"Key":"consumption O(1)","Fragments":["instead"]},{"Key":"O(1) instead","Fragments":["of","of"]},{"Key":"of O(N).","Fragments":["Also"]},{"Key":"O(N). Also","Fragments":["you"]},{"Key":"to redo","Fragments":["the","it"]},{"Key":"redo the","Fragments":["count"]},{"Key":"the count","Fragments":["every","method","function","functions","map","index","`word_count[word]"]},{"Key":"count every","Fragments":["query."]},{"Key":"the dna","Fragments":["strand","string"]},{"Key":"dna strand","Fragments":["hogs"]},{"Key":"strand hogs","Fragments":["memory"]},{"Key":"hogs memory","Fragments":["and"]},{"Key":"not needed.","Fragments":["Just",":)"]},{"Key":"needed. Just","Fragments":["keep"]},{"Key":"constructor makes","Fragments":["a","sense"]},{"Key":"makes a","Fragments":["copy","lot","lot","difference.","lot","whole","copy,","yell","few","more"]},{"Key":"input that","Fragments":["it"]},{"Key":"marked explicit","Fragments":["to","to","to","to","to","to"]},{"Key":"explicit to","Fragments":["avoid","avoid","avoid","avoid","avoid","avoid","avoid"]},{"Key":"implicit conversion.","Fragments":["`counter(const","(This"]},{"Key":"conversion. `counter(const","Fragments":["string\u0026"]},{"Key":"`counter(const string\u0026","Fragments":["dna_strand);`"]},{"Key":"* single","Fragments":["argument","argument","argument","argument"]},{"Key":"conversion `counter::counter(const","Fragments":["std::string\u0026"]},{"Key":"`counter::counter(const std::string\u0026","Fragments":["molecule)`"]},{"Key":"* keeping","Fragments":["a"]},{"Key":"the molecure","Fragments":["is"]},{"Key":"molecure is","Fragments":["execssive."]},{"Key":"is execssive.","Fragments":["just"]},{"Key":"execssive. just","Fragments":["do"]},{"Key":"just do","Fragments":["the","what","a","this."]},{"Key":"nucleotide count","Fragments":["once"]},{"Key":"count once","Fragments":["at"]},{"Key":"once at","Fragments":["construction"]},{"Key":"construction and","Fragments":["store","should"]},{"Key":"and store","Fragments":["the","that.","`original`","each"]},{"Key":"marked explict","Fragments":["to"]},{"Key":"explict to","Fragments":["avoid"]},{"Key":"* contructor","Fragments":["is"]},{"Key":"contructor is","Fragments":["makes"]},{"Key":"is makes","Fragments":["2"]},{"Key":"makes 2","Fragments":["copies"]},{"Key":"2 copies","Fragments":["of"]},{"Key":"* `explicit","Fragments":["counter(const"]},{"Key":"`explicit counter(const","Fragments":["std::string\u0026"]},{"Key":"counter(const std::string\u0026","Fragments":["dnastring)`"]},{"Key":" m_dnastring","Fragments":["is"]},{"Key":"m_dnastring is","Fragments":["unused"]},{"Key":"is unused","Fragments":["outside"]},{"Key":"unused outside","Fragments":["of"]},{"Key":"the constructor.","Fragments":["remove.","Better","That","But","I","It","Not","All","From","The"]},{"Key":"constructor. remove.","Fragments":["it"]},{"Key":"remove. it","Fragments":["hogs"]},{"Key":"it hogs","Fragments":["memory."]},{"Key":" @kaylie","Fragments":["If"]},{"Key":"@kaylie If","Fragments":["you"]},{"Key":"map const,","Fragments":["see"]},{"Key":"const, see","Fragments":["my"]},{"Key":"see my","Fragments":["implementation.","solution"]},{"Key":"my implementation.","Fragments":["http://exercism.io/submissions/68e11eebbcc842adaf160495687f32a6","As"]},{"Key":" storing","Fragments":["the","the","of"]},{"Key":"dna string","Fragments":["is"]},{"Key":"is exessive","Fragments":["on"]},{"Key":"exessive on","Fragments":["memory"]},{"Key":"on memory","Fragments":["for","use.","(I"]},{"Key":"trivial dna","Fragments":["sequence."]},{"Key":"dna sequence.","Fragments":["Just"]},{"Key":"sequence. Just","Fragments":["compute"]},{"Key":"Just compute","Fragments":["the"]},{"Key":"compute the","Fragments":["map","distinct","lengths","character"]},{"Key":"map at","Fragments":["construction","every"]},{"Key":"construction time","Fragments":["and"]},{"Key":" Storing","Fragments":["the","the"]},{"Key":"Storing the","Fragments":["strand","sorted"]},{"Key":"the strand","Fragments":["is","and"]},{"Key":"strand is","Fragments":["excessive,"]},{"Key":"is excessive,","Fragments":["just","just"]},{"Key":"excessive, just","Fragments":["keep","store"]},{"Key":"just keep","Fragments":["the","the","everything","track"]},{"Key":"map. _strand","Fragments":["is"]},{"Key":"_strand is","Fragments":["unused."]},{"Key":"just store","Fragments":["the","character","the","the"]},{"Key":"* sequence","Fragments":["is"]},{"Key":"copied. use","Fragments":["`counter(const"]},{"Key":"use `counter(const","Fragments":["std::string\u0026"]},{"Key":"`counter(const std::string\u0026","Fragments":["sequence`"]},{"Key":"std::string\u0026 sequence`","Fragments":["to"]},{"Key":"sequence` to","Fragments":["avoid."]},{"Key":" *m_strDNA*","Fragments":["is"]},{"Key":"*m_strDNA* is","Fragments":["unusd"]},{"Key":"is unusd","Fragments":["outside"]},{"Key":"unusd outside","Fragments":["of"]},{"Key":"of constructor,","Fragments":["should"]},{"Key":"constructor, should","Fragments":["be"]},{"Key":" *strInput*","Fragments":["should"]},{"Key":"*strInput* should","Fragments":["be"]},{"Key":"const to","Fragments":["avoid","avoid","avoid","grade","show"]},{"Key":"avoid a","Fragments":["copy.","copy","copy.","copy.","lot","temporary.","useless","copy."]},{"Key":"Excellent work.","Fragments":["you"]},{"Key":"work. you","Fragments":["can"]},{"Key":"use *m_Counts.at*","Fragments":["if"]},{"Key":"*m_Counts.at* if","Fragments":["you"]},{"Key":"want it","Fragments":["to","to","to","to","or","to","to"]},{"Key":"to **throw**","Fragments":["to"]},{"Key":"**throw** to","Fragments":["*catch*"]},{"Key":"to *catch*","Fragments":["and"]},{"Key":"*catch* and","Fragments":["re"]},{"Key":"and re","Fragments":["throw"]},{"Key":"* dnaStrand","Fragments":["is"]},{"Key":"dnaStrand is","Fragments":["copied"]},{"Key":"is copied","Fragments":["unnecessarily,","and","and","and","and","but","twice.","in"]},{"Key":"copied unnecessarily,","Fragments":["refactor"]},{"Key":"unnecessarily, refactor","Fragments":["to"]},{"Key":"refactor to","Fragments":["counter(const","more"]},{"Key":"to counter(const","Fragments":["sring\u0026"]},{"Key":"counter(const sring\u0026","Fragments":["dnaStrand)"]},{"Key":"sring\u0026 dnaStrand)","Fragments":["to"]},{"Key":"dnaStrand) to","Fragments":["avoid"]},{"Key":"copied and","Fragments":["doesn't","doesn't","doesn't","doesn't"]},{"Key":"and doesn't","Fragments":["need","need","need","need","need","reveal"]},{"Key":"to be.","Fragments":["Consider","Consider","Consider","Consider","it","You"]},{"Key":"be. Consider","Fragments":["using","a","a","a"]},{"Key":" string","Fragments":["nucleotides","*dna*","transcription::to_rna(const","rna(symbols);","btlString;","sing(unsigned","hey(string","in","word;","hey(string"]},{"Key":"string nucleotides","Fragments":["is"]},{"Key":"nucleotides is","Fragments":["copied"]},{"Key":"string *dna*","Fragments":["is"]},{"Key":"*dna* is","Fragments":["copied"]},{"Key":"The output","Fragments":["length","length","length","length","length","length"]},{"Key":"output length","Fragments":["of","of","of","of","of","of"]},{"Key":"is known.","Fragments":["Call","Call","Call","Call","Call","Call"]},{"Key":"known. Call","Fragments":["`std::string::reserve`","`std::string::reserve`","`std::string::reserve`","`std::string::reserve`","`std::string::reserve`","`std::string::reserve`"]},{"Key":"Call `std::string::reserve`","Fragments":["to","to","to","to","to","to"]},{"Key":"`std::string::reserve` to","Fragments":["avoid","avoid","avoid","avoid","avoid","avoid"]},{"Key":"the life","Fragments":["of","of","of"]},{"Key":"life of","Fragments":["me","the","a"]},{"Key":"of me","Fragments":["i","being","that","if"]},{"Key":"me i","Fragments":["couldn't"]},{"Key":"get `std::transform`","Fragments":["to"]},{"Key":"`std::transform` to","Fragments":["work.","modify"]},{"Key":"to work.","Fragments":["Now","It","Please"]},{"Key":"work. Now","Fragments":["i"]},{"Key":"Now i","Fragments":["see"]},{"Key":"i see","Fragments":["i","your"]},{"Key":"see i","Fragments":["just"]},{"Key":"i just","Fragments":["needed","used"]},{"Key":"just needed","Fragments":["to","to"]},{"Key":"needed to","Fragments":["cast","get","operate","write","realize","do","move","do.","make","eek","do","take","take"]},{"Key":"to cast","Fragments":["the","away"]},{"Key":"cast the","Fragments":["unary","compiler"]},{"Key":"the unary","Fragments":["operator."]},{"Key":"unary operator.","Fragments":["Thanks."]},{"Key":" input","Fragments":["string","words..."]},{"Key":"Overall great","Fragments":["work."]},{"Key":"great work.","Fragments":["Straight"]},{"Key":"work. Straight","Fragments":["forward."]},{"Key":"Straight forward.","Fragments":["Easy"]},{"Key":"forward. Easy","Fragments":["to"]},{"Key":"Easy to","Fragments":["undertand."]},{"Key":"to undertand.","Fragments":["Good"]},{"Key":"undertand. Good","Fragments":["use"]},{"Key":"Good use","Fragments":["of","of","of","of","of","of","of","of"]},{"Key":" typedefs","Fragments":["might","might"]},{"Key":"typedefs might","Fragments":["help.","make"]},{"Key":" *grade*","Fragments":["function","pollutes","function"]},{"Key":"*grade* function","Fragments":["creates","pollutes"]},{"Key":"function creates","Fragments":["empty"]},{"Key":"creates empty","Fragments":["entries"]},{"Key":"empty entries","Fragments":["in"]},{"Key":"entries in","Fragments":["your","the"]},{"Key":"your map","Fragments":["when","can","at"]},{"Key":"map when","Fragments":["querying","called"]},{"Key":"when querying","Fragments":["for"]},{"Key":"querying for","Fragments":["grades"]},{"Key":"for grades","Fragments":["that","1..10.","which"]},{"Key":"grades that","Fragments":["do"]},{"Key":"not exist.","Fragments":["This"]},{"Key":"exist. This","Fragments":["pollutes"]},{"Key":"This pollutes","Fragments":["the"]},{"Key":"pollutes the","Fragments":["map","map.","map"]},{"Key":"map unnecessarily","Fragments":["and"]},{"Key":"unnecessarily and","Fragments":["can"]},{"Key":" comparing","Fragments":["iequals"]},{"Key":"comparing iequals","Fragments":["on"]},{"Key":"iequals on","Fragments":["things"]},{"Key":"on things","Fragments":["that","they"]},{"Key":"things that","Fragments":["aren't","might","I","happen","could","belong","could","make","he","could","bother","seemed"]},{"Key":"that aren't","Fragments":["even","completely","the","covered","used"]},{"Key":"aren't even","Fragments":["validated"]},{"Key":"even validated","Fragments":["as"]},{"Key":"validated as","Fragments":["anagrams"]},{"Key":"as anagrams","Fragments":["means"]},{"Key":"anagrams means","Fragments":["you"]},{"Key":"means you","Fragments":["are","are","gain","will"]},{"Key":"are comparing","Fragments":["twice","double"]},{"Key":"comparing twice","Fragments":["when"]},{"Key":"if (equals(word,","Fragments":["sortedSubject))"]},{"Key":"(equals(word, sortedSubject))","Fragments":["{"]},{"Key":"if (!iequals(*w,","Fragments":["subject))"]},{"Key":"(!iequals(*w, subject))","Fragments":["{"]},{"Key":"*grade* pollutes","Fragments":["the"]},{"Key":" Dear","Fragments":["god"]},{"Key":"Dear god","Fragments":["man,"]},{"Key":"god man,","Fragments":["the"]},{"Key":"man, the","Fragments":["alignment!!!"]},{"Key":" otherwise,","Fragments":["good"]},{"Key":"otherwise, good","Fragments":["use"]},{"Key":"the work","Fragments":["for","for","of","in","using","in","in","in","happens","cost","of","currently","of","of","of","of","of"]},{"Key":"work for","Fragments":["you.","you","me","arbitrary","types","huge","any","input","a","you","the","you.","shorter","the","you?","mismatch","given","anything"]},{"Key":"the input,","Fragments":["rewrote","sort","and","broadly","did","did"]},{"Key":"input, rewrote","Fragments":["it"]},{"Key":"rewrote it","Fragments":["so"]},{"Key":"constructor does","Fragments":["all","all"]},{"Key":"the phone","Fragments":["number"]},{"Key":"object, why","Fragments":["not"]},{"Key":"not make","Fragments":["the","sense","a","any","much","a"]},{"Key":" call","Fragments":["*reserve*","*reserve*"]},{"Key":"call *reserve*","Fragments":["on","on"]},{"Key":"*reserve* on","Fragments":["formatted","validated_number"]},{"Key":"on formatted","Fragments":["number"]},{"Key":"formatted number","Fragments":["since"]},{"Key":"number since","Fragments":["you"]},{"Key":"know how","Fragments":["many","to","to","to","this","to","long","spread","to","std::transform","doing","I"]},{"Key":"how many","Fragments":["characters","extra","seconds","elements","elements","times"]},{"Key":"many characters","Fragments":["it"]},{"Key":"characters it","Fragments":["will"]},{"Key":"will be.","Fragments":["This","In"]},{"Key":"be. This","Fragments":["will"]},{"Key":"save on","Fragments":["reallocations"]},{"Key":"on reallocations","Fragments":["to"]},{"Key":"reallocations to","Fragments":["grow"]},{"Key":"to grow","Fragments":["the","out","before"]},{"Key":"grow the","Fragments":["string."]},{"Key":"on validated_number","Fragments":["to"]},{"Key":"validated_number to","Fragments":["avoid"]},{"Key":"In your","Fragments":["constructor","hey(),","loop","checkQuestion","checkYell","checkSilence","constructor","```add()```","switch","default"]},{"Key":"your constructor","Fragments":["you","is","word(word)","quite","argument","instead"]},{"Key":"constructor you","Fragments":["can"]},{"Key":"can let","Fragments":["the"]},{"Key":"STL do","Fragments":["the"]},{"Key":" number.erase(std::remove_if(number.begin(),","Fragments":["number.end(),"]},{"Key":"number.erase(std::remove_if(number.begin(), number.end(),","Fragments":["!boost::is_digit()),"]},{"Key":"number.end(), !boost::is_digit()),","Fragments":["number.end());"]},{"Key":" extra","Fragments":["copy"]},{"Key":"of input","Fragments":["is","string.","string.","string","string.","streams","so","by"]},{"Key":"consider taking","Fragments":["a","a"]},{"Key":"taking a","Fragments":["reference","reference","by-value","%","vector,","look"]},{"Key":"avoid this","Fragments":["copy.","you"]},{"Key":"variable for","Fragments":["the","your","the","`currentWord`?","\"sentence[i]\"","that."]},{"Key":"the area","Fragments":["code,","is"]},{"Key":"area code,","Fragments":["why"]},{"Key":"code, why","Fragments":["not"]},{"Key":"other components","Fragments":["as"]},{"Key":"components as","Fragments":["well?"]},{"Key":" did","Fragments":["you","you"]},{"Key":"mean to","Fragments":["take","take","upload"]},{"Key":"to take","Fragments":["*s*","*s*","`x","a","that","a","advantage","by","by-value","in","a","input","a","these","note","a","`dna`","in","in","in","in"]},{"Key":"take *s*","Fragments":["as","as"]},{"Key":"*s* as","Fragments":["a","a"]},{"Key":"a reference?","Fragments":["It","It"]},{"Key":"reference? It","Fragments":["seems","seems"]},{"Key":"not being","Fragments":["mutated.","mutated.","a","const.","static.","familiar","declared","clear","declared"]},{"Key":"being mutated.","Fragments":["Without","Without"]},{"Key":"mutated. Without","Fragments":["the","the"]},{"Key":"Without the","Fragments":["reference","reference","unit"]},{"Key":"reference an","Fragments":["extra","extra"]},{"Key":"copy is","Fragments":["created.","created.","not"]},{"Key":"is simple","Fragments":["to","because","and","in","enough","printf()"]},{"Key":"simple to","Fragments":["reason","do","use.","use."]},{"Key":" Possible","Fragments":["improvements.","solutions:"]},{"Key":"* This","Fragments":["is","header","way"]},{"Key":"an object","Fragments":["so","-","of","being","called","and","type,","`bob`,","anywhere.","factory.","oriented","oriented","oriented","oriented","are","in"]},{"Key":"object so","Fragments":["the","it"]},{"Key":"the pieces","Fragments":["can"]},{"Key":"pieces can","Fragments":["be"]},{"Key":"stored sperately","Fragments":["to"]},{"Key":"sperately to","Fragments":["avoid"]},{"Key":"avoid extra","Fragments":["copies."]},{"Key":"* Parsing","Fragments":["of"]},{"Key":"Parsing of","Fragments":["the"]},{"Key":"the information","Fragments":["actually","as","on","about"]},{"Key":"information actually","Fragments":["doing"]},{"Key":"actually doing","Fragments":["a"]},{"Key":"of allocations","Fragments":["through","is","possible"]},{"Key":"allocations through","Fragments":["substr"]},{"Key":"through substr","Fragments":["etc."]},{"Key":"is long,","Fragments":["this"]},{"Key":"long, this","Fragments":["doesn't"]},{"Key":"doesn't break","Fragments":["out"]},{"Key":"break out","Fragments":["early.","early","early","the"]},{"Key":"can break","Fragments":["out"]},{"Key":"out early","Fragments":["you","if"]},{"Key":"early you","Fragments":["can"]},{"Key":"can specify","Fragments":["the"]},{"Key":"the max","Fragments":["size","size","number"]},{"Key":"of *ten*","Fragments":["avoiing"]},{"Key":"*ten* avoiing","Fragments":["reallocations."]},{"Key":"just just","Fragments":["`not"]},{"Key":"just `not","Fragments":["is"]},{"Key":"`not is","Fragments":["digit`"]},{"Key":"is digit`","Fragments":["instead"]},{"Key":"digit` instead","Fragments":["of"]},{"Key":"of specifying","Fragments":["special","the"]},{"Key":"specifying special","Fragments":["characters?"]},{"Key":" *input*","Fragments":["is"]},{"Key":"*input* is","Fragments":["copied"]},{"Key":"copied but","Fragments":["not"]},{"Key":"not mutated.","Fragments":["consider"]},{"Key":"mutated. consider","Fragments":["a"]},{"Key":"consider a","Fragments":["referenc","`namespace`.","project","design","```using"]},{"Key":"a referenc","Fragments":["to"]},{"Key":"referenc to","Fragments":["a"]},{"Key":" doesn't","Fragments":["not"]},{"Key":"doesn't not","Fragments":["break"]},{"Key":"not break","Fragments":["out"]},{"Key":"early if","Fragments":["the","a"]},{"Key":" *input_number*","Fragments":["should"]},{"Key":"*input_number* should","Fragments":["not"]},{"Key":"a memeber","Fragments":["of"]},{"Key":"memeber of","Fragments":["the"]},{"Key":"class. It","Fragments":["is","made"]},{"Key":"used outside","Fragments":["of","of","it's"]},{"Key":" *extract_number*","Fragments":["function"]},{"Key":"*extract_number* function","Fragments":["signature"]},{"Key":"function signature","Fragments":["will","could"]},{"Key":"signature will","Fragments":["make"]},{"Key":"string copy,","Fragments":["`extract_number(std::string(raw))`"]},{"Key":"copy, `extract_number(std::string(raw))`","Fragments":["creates"]},{"Key":"`extract_number(std::string(raw))` creates","Fragments":["an"]},{"Key":"creates an","Fragments":["extra"]},{"Key":" good","Fragments":["point.","use","suggestion"]},{"Key":"good point.","Fragments":["I","Sometimes","There"]},{"Key":"forgot that","Fragments":["after","the"]},{"Key":"that after","Fragments":["*extract_number*,","globbing)","the"]},{"Key":"after *extract_number*,","Fragments":["*raw*"]},{"Key":"*extract_number*, *raw*","Fragments":["is"]},{"Key":"*raw* is","Fragments":["never"]},{"Key":"is never","Fragments":["used","asked","strictly","guaranteed.","assigned"]},{"Key":"never used","Fragments":["again.","it","ranges","it"]},{"Key":"* good","Fragments":["use","idea"]},{"Key":"of **explicit**","Fragments":["keyword."]},{"Key":"* avoids","Fragments":["extra"]},{"Key":"avoids extra","Fragments":["copy"]},{"Key":"of number","Fragments":["on","is"]},{"Key":"number on","Fragments":["construction."]},{"Key":"* full","Fragments":["input"]},{"Key":"full input","Fragments":["of"]},{"Key":"input of","Fragments":["number","matches","```const"]},{"Key":"is store","Fragments":["in"]},{"Key":"store in","Fragments":["perpetuity."]},{"Key":"* each","Fragments":["call","call","call"]},{"Key":"to *number*","Fragments":["has"]},{"Key":"*number* has","Fragments":["to"]},{"Key":"to reprocess","Fragments":["the","the","the"]},{"Key":"reprocess the","Fragments":["string","string","string"]},{"Key":"to *area_code*","Fragments":["has"]},{"Key":"*area_code* has","Fragments":["to"]},{"Key":"to string","Fragments":["conversion","functions","operator","done","const","\u0026.","member"]},{"Key":"string conversion","Fragments":["has","is"]},{"Key":"conversion has","Fragments":["to"]},{"Key":"* process","Fragments":["the"]},{"Key":"process the","Fragments":["string","error.","entire","strings"]},{"Key":"string once","Fragments":["during","and","is","and","one"]},{"Key":"once during","Fragments":["construction"]},{"Key":"during construction","Fragments":["saving"]},{"Key":"construction saving","Fragments":["the"]},{"Key":"saving the","Fragments":["information","size","map"]},{"Key":"information as","Fragments":["member"]},{"Key":"as member","Fragments":["variables"]},{"Key":"didn't bother","Fragments":["creating"]},{"Key":"bother creating","Fragments":["a"]},{"Key":"file as","Fragments":["this","an","an","well","it","it","a"]},{"Key":"as this","Fragments":["was","to","is","is","problem","trumps"]},{"Key":"might make","Fragments":["it","a","sense","`isYell`","the","it","an","more"]},{"Key":"it easier","Fragments":["to","to","to","to","to","to","to","to"]},{"Key":"vector sorted","Fragments":["during"]},{"Key":"sorted during","Fragments":["add?","add,"]},{"Key":"the grade","Fragments":["sorted"]},{"Key":"grade sorted","Fragments":["during"]},{"Key":"during add,","Fragments":["you"]},{"Key":"add, you","Fragments":["don't"]},{"Key":"sort on","Fragments":["retrieve"]},{"Key":" does","Fragments":["this","not"]},{"Key":"does this","Fragments":["actually","pass","in","prevent","\u0026","\u0026","even"]},{"Key":"this actually","Fragments":["have"]},{"Key":"actually have","Fragments":["an","both","a"]},{"Key":"over just","Fragments":["keeping","shouting,"]},{"Key":"just keeping","Fragments":["the"]},{"Key":"the roster","Fragments":["sorted","of","is","is"]},{"Key":"roster sorted","Fragments":["at"]},{"Key":"sorted at","Fragments":["add"]},{"Key":"at add","Fragments":["time?"]},{"Key":"add time?","Fragments":["As"]},{"Key":"time? As","Fragments":["far"]},{"Key":"As far","Fragments":["as","as","as"]},{"Key":"far as","Fragments":["i","I","my","bob","I","i","the","not","required"]},{"Key":"as i","Fragments":["can","can","feel"]},{"Key":"i can","Fragments":["tell","suggest","suggest","consistently","tell,"]},{"Key":"the Big","Fragments":["O"]},{"Key":"Big O","Fragments":["is"]},{"Key":"O is","Fragments":["the"]},{"Key":"it may","Fragments":["be","seem,","depend","help,","end","just","iterate","be","be","jump","naively","seem","not","be"]},{"Key":"may be","Fragments":["better","costly","worth","thinking","a","misunderstanding","more","worth","wrong","worth","a","possible","interested","easier","needed.","heavy","more","somewhat","preferable.","more"]},{"Key":"use *lower_bound*","Fragments":["with"]},{"Key":"*lower_bound* with","Fragments":["the"]},{"Key":"the insert","Fragments":["with"]},{"Key":"insert with","Fragments":["hint."]},{"Key":"with hint.","Fragments":["This"]},{"Key":"hint. This","Fragments":["leverages"]},{"Key":"This leverages","Fragments":["the"]},{"Key":"leverages the","Fragments":["fact"]},{"Key":"is already","Fragments":["sorted","created)","known","provided","greater","summed","handled","familiar","a","correct.","bool.","taken."]},{"Key":"already sorted","Fragments":["and"]},{"Key":"sorted and","Fragments":["not","unsorted"]},{"Key":"not performing","Fragments":["checks"]},{"Key":"performing checks","Fragments":["that"]},{"Key":"checks that","Fragments":["would","there"]},{"Key":"that would","Fragments":["otherwise","have","probably","be","easily","create","be","be","make","work.","make","be","make","end","have","be","work","help.","help","be","throw","lead","perform","be","work.","work","be","allow","mean","mean","handle","invoke","be","be","be","be","have","severely"]},{"Key":"would otherwise","Fragments":["be"]},{"Key":"otherwise be","Fragments":["needed"]},{"Key":"be needed","Fragments":["if","in","with","any"]},{"Key":"needed if","Fragments":["you"]},{"Key":"were sorting","Fragments":["a"]},{"Key":"sorting a","Fragments":["completetly"]},{"Key":"a completetly","Fragments":["unsorted"]},{"Key":"completetly unsorted","Fragments":["vector."]},{"Key":"function pollutes","Fragments":["the"]},{"Key":"when called","Fragments":["with"]},{"Key":"with non","Fragments":["present"]},{"Key":"non present","Fragments":["values."]},{"Key":"why query","Fragments":["for"]},{"Key":"query for","Fragments":["a","grades"]},{"Key":"a known","Fragments":["value?","order","idiom"]},{"Key":"known value?","Fragments":["simply"]},{"Key":"value? simply","Fragments":["`return"]},{"Key":"`return vector\u003cstring\u003e();`","Fragments":["and"]},{"Key":"vector\u003cstring\u003e();` and","Fragments":["avoid"]},{"Key":"and avoid","Fragments":["cost","having","string","it","having","static","doing"]},{"Key":"avoid cost","Fragments":["of"]},{"Key":"use lower_bound","Fragments":["not"]},{"Key":"lower_bound not","Fragments":["uppoer"]},{"Key":"not also","Fragments":["using"]},{"Key":"also using","Fragments":["for","namespace","the","std::string","xubuntu"]},{"Key":"using for","Fragments":["`map`"]},{"Key":"for `map`","Fragments":["and"]},{"Key":"`map` and","Fragments":["`vector`"]},{"Key":"like you","Fragments":["forgot","said,","were","suggested","already","might","recommmended.","could","should","could","have.","were"]},{"Key":"you forgot","Fragments":["to","the"]},{"Key":"variable from","Fragments":["the","`counts`"]},{"Key":"definition. Line","Fragments":["16"]},{"Key":"Line 16","Fragments":["of"]},{"Key":"16 of","Fragments":["nucleotide_count.h"]},{"Key":" Parsing","Fragments":["/"]},{"Key":"Parsing /","Fragments":["validation"]},{"Key":"/ validation","Fragments":["should"]},{"Key":"validation should","Fragments":["only","happen"]},{"Key":"should only","Fragments":["be","be","have"]},{"Key":"done once.","Fragments":["just"]},{"Key":"once. just","Fragments":["move"]},{"Key":"just move","Fragments":["the","that"]},{"Key":"in *number*","Fragments":["into"]},{"Key":"*number* into","Fragments":["the"]},{"Key":"constructor thus","Fragments":["simplifying"]},{"Key":"thus simplifying","Fragments":["the"]},{"Key":"simplifying the","Fragments":["other","code"]},{"Key":"other two","Fragments":["functions.","to","options","checks:"]},{"Key":"for consistency,","Fragments":["i"]},{"Key":"consistency, i","Fragments":["would"]},{"Key":"would say","Fragments":["that","that","that","to","is"]},{"Key":"constructor should","Fragments":["call","(almost)"]},{"Key":"should call","Fragments":["*reset*"]},{"Key":"call *reset*","Fragments":["thus"]},{"Key":"*reset* thus","Fragments":["not"]},{"Key":"thus not","Fragments":["leading","needing"]},{"Key":"not leading","Fragments":["to"]},{"Key":"leading to","Fragments":["inconsistency","undefined"]},{"Key":"a global","Fragments":["id.","id","using","constant","`allRobotNames`"]},{"Key":"global id.","Fragments":["I"]},{"Key":"id. I","Fragments":["like"]},{"Key":"the stl","Fragments":["for","methods","libraries"]},{"Key":"stl for","Fragments":["creating"]},{"Key":"for creating","Fragments":["the"]},{"Key":"creating the","Fragments":["name.","default","word.","names"]},{"Key":"the name.","Fragments":["If"]},{"Key":"were creating","Fragments":["robots"]},{"Key":"creating robots","Fragments":["by"]},{"Key":"robots by","Fragments":["the"]},{"Key":"the thousands","Fragments":["the"]},{"Key":"thousands the","Fragments":["stringstream"]},{"Key":"the stringstream","Fragments":["might","approach"]},{"Key":"stringstream might","Fragments":["be"]},{"Key":"bit heavy","Fragments":["though","here,","handed;","to"]},{"Key":"heavy though","Fragments":[";)"]},{"Key":" Simple,","Fragments":["fast,","but"]},{"Key":"Simple, fast,","Fragments":["I"]},{"Key":"fast, I","Fragments":["like"]},{"Key":"like it.","Fragments":["The","Quick","(Sorry,","Thanks!"]},{"Key":"thing you","Fragments":["could","know","did","want","might","should","can","have","have","did"]},{"Key":"this IMO","Fragments":["is"]},{"Key":"IMO is","Fragments":["to"]},{"Key":"either *reserve*","Fragments":["the"]},{"Key":"*reserve* the","Fragments":["5"]},{"Key":"the 5","Fragments":["characters"]},{"Key":"5 characters","Fragments":["before"]},{"Key":"characters before","Fragments":["string","we"]},{"Key":"before string","Fragments":["construction,"]},{"Key":"string construction,","Fragments":["or"]},{"Key":"construction, or","Fragments":["just"]},{"Key":"or just","Fragments":["use","that","hard-code","an","use","printing","a","not"]},{"Key":"just use","Fragments":["an","the","[].","`isspace()`.","`exercism","at()","the","it","`for","library","`char`","appropriately","speech.back().","const","`bob::hey`","the","namespace","a","auto:","boost's"]},{"Key":"old c","Fragments":["style"]},{"Key":"c style","Fragments":["string"]},{"Key":"style string","Fragments":["("]},{"Key":"string (","Fragments":["nulll","input[input.length()"]},{"Key":"( nulll","Fragments":["terminated"]},{"Key":"nulll terminated","Fragments":["char"]},{"Key":"terminated char","Fragments":["array"]},{"Key":"char array","Fragments":[")","based"]},{"Key":"like construction","Fragments":["is"]},{"Key":"construction is","Fragments":["just","different."]},{"Key":"just reset,","Fragments":["simple"]},{"Key":"reset, simple","Fragments":["getter"]},{"Key":"simple getter","Fragments":["functions,","functions."]},{"Key":"getter functions,","Fragments":["separation"]},{"Key":"functions, separation","Fragments":["of"]},{"Key":"separation of","Fragments":["name","hey()","`classify`"]},{"Key":"of name","Fragments":["generation."]},{"Key":"storing of","Fragments":["previous","previous"]},{"Key":"of previous","Fragments":["names.","names"]},{"Key":"previous names.","Fragments":["storing"]},{"Key":"names. storing","Fragments":["of"]},{"Key":"previous names","Fragments":["in"]},{"Key":"in non","Fragments":["sorted"]},{"Key":"non sorted","Fragments":["manner"]},{"Key":"sorted manner","Fragments":["making"]},{"Key":"manner making","Fragments":["new"]},{"Key":"making new","Fragments":["name"]},{"Key":"new name","Fragments":["generation","is"]},{"Key":"name generation","Fragments":["order"]},{"Key":"generation order","Fragments":["N^2"]},{"Key":" use","Fragments":["a","a","**uint64_t**","something","boost::tokenizer"]},{"Key":"global id","Fragments":["counter,"]},{"Key":"id counter,","Fragments":["turn"]},{"Key":"counter, turn","Fragments":["that"]},{"Key":"turn that","Fragments":["counter"]},{"Key":"that counter","Fragments":["into"]},{"Key":"counter into","Fragments":["a"]},{"Key":"a bloom","Fragments":["filter","filter"]},{"Key":"bloom filter","Fragments":["http://en.wikipedia.org/wiki/Bloom_filter","or"]},{"Key":"mean its","Fragments":["more"]},{"Key":"its more","Fragments":["consistent","compile","error"]},{"Key":"more consistent","Fragments":["reading","code","with"]},{"Key":"consistent reading","Fragments":["wise?"]},{"Key":" Because","Fragments":["I","of","`i`","the"]},{"Key":"Because I","Fragments":["think","use","use","used","use","used","used","wanted"]},{"Key":"more clear","Fragments":["the","from","what's","where","than","cut","than","without","but","that","that"]},{"Key":"is now,","Fragments":["calling"]},{"Key":"now, calling","Fragments":["reset"]},{"Key":"calling reset","Fragments":["on"]},{"Key":"reset on","Fragments":["an"]},{"Key":"empty name","Fragments":["seems"]},{"Key":"name seems","Fragments":["a"]},{"Key":"little strange","Fragments":["to"]},{"Key":"If `T\u0026","Fragments":["operator[](const"]},{"Key":"`T\u0026 operator[](const","Fragments":["key_type\u0026"]},{"Key":"operator[](const key_type\u0026","Fragments":["x)`"]},{"Key":"key_type\u0026 x)`","Fragments":["is"]},{"Key":"x)` is","Fragments":["called"]},{"Key":"called where","Fragments":["`x`"]},{"Key":"where `x`","Fragments":["does"]},{"Key":"`x` does","Fragments":["not"]},{"Key":"not exist","Fragments":["in"]},{"Key":"exist in","Fragments":["the","a","a","the"]},{"Key":"map, `value_type(x,","Fragments":["T())`"]},{"Key":"`value_type(x, T())`","Fragments":["is"]},{"Key":"T())` is","Fragments":["inserted."]},{"Key":"is inserted.","Fragments":["i.e.:","I"]},{"Key":"inserted. i.e.:","Fragments":["an"]},{"Key":"i.e.: an","Fragments":["empty"]},{"Key":"inserted. I","Fragments":["don't"]},{"Key":"with `gdb`","Fragments":["in"]},{"Key":"`gdb` in","Fragments":["a"]},{"Key":"a `cmake`","Fragments":["environment,"]},{"Key":"`cmake` environment,","Fragments":["so"]},{"Key":"environment, so","Fragments":["I"]},{"Key":"check what","Fragments":["you"]},{"Key":"mean by","Fragments":["polluting","\"better\".","persistent"]},{"Key":"by polluting","Fragments":["the"]},{"Key":"this bad","Fragments":["practice?","case"]},{"Key":"string transcription::to_rna(const","Fragments":["string"]},{"Key":"transcription::to_rna(const string","Fragments":["\u0026symbols){"]},{"Key":"(auto iter","Fragments":["="]},{"Key":"iter =","Fragments":["rna.begin();"]},{"Key":"= rna.begin();","Fragments":["iter"]},{"Key":"rna.begin(); iter","Fragments":["!="]},{"Key":"iter !=","Fragments":["rna.end();"]},{"Key":"!= rna.end();","Fragments":["++iter){"]},{"Key":" *iter","Fragments":["="]},{"Key":"*iter =","Fragments":["transcription::to_rna(*iter);"]},{"Key":" @nora","Fragments":["consider"]},{"Key":"@nora consider","Fragments":["the"]},{"Key":"consider the","Fragments":["initial","subject"]},{"Key":"the initial","Fragments":["condition.","value","checks","string","```compute()```","state"]},{"Key":"initial condition.","Fragments":["i.e."]},{"Key":"condition. i.e.","Fragments":["no"]},{"Key":"i.e. no","Fragments":["entries"]},{"Key":"no entries","Fragments":["in"]},{"Key":"map. Then","Fragments":["query"]},{"Key":"Then query","Fragments":["for"]},{"Key":"grades 1..10.","Fragments":["The"]},{"Key":"1..10. The","Fragments":["map"]},{"Key":"The map","Fragments":["now"]},{"Key":"map now","Fragments":["contains"]},{"Key":"now contains","Fragments":["10"]},{"Key":"contains 10","Fragments":["empty"]},{"Key":"10 empty","Fragments":["vectors."]},{"Key":"empty vectors.","Fragments":["Lookup"]},{"Key":"vectors. Lookup","Fragments":["time"]},{"Key":"Lookup time","Fragments":["on"]},{"Key":"time on","Fragments":["a","searching"]},{"Key":"is log(n)","Fragments":["thus"]},{"Key":"log(n) thus","Fragments":["this"]},{"Key":"thus this","Fragments":["approach"]},{"Key":"approach degrades","Fragments":["performance."]},{"Key":"degrades performance.","Fragments":["Space"]},{"Key":"performance. Space","Fragments":["increases"]},{"Key":"Space increases","Fragments":["by"]},{"Key":"increases by","Fragments":["size"]},{"Key":"by size","Fragments":["of"]},{"Key":"vector so","Fragments":["memory"]},{"Key":"so memory","Fragments":["pressure"]},{"Key":"memory pressure","Fragments":["will"]},{"Key":"pressure will","Fragments":["also"]},{"Key":"will also","Fragments":["be","do","search","be","speed","have","detect","make"]},{"Key":"also be","Fragments":["created.","a","divisible","in","constant.","used","able","faster","trying","called"]},{"Key":"use *at*","Fragments":["an"]},{"Key":"*at* an","Fragments":["entry"]},{"Key":"an entry","Fragments":["will","that","at"]},{"Key":"entry will","Fragments":["not"]},{"Key":"be created,","Fragments":["and"]},{"Key":"created, and","Fragments":["exception"]},{"Key":"and exception","Fragments":["will"]},{"Key":"exception will","Fragments":["be"]},{"Key":"be thrown.","Fragments":["You"]},{"Key":"thrown. You","Fragments":["can"]},{"Key":"can catch","Fragments":["this"]},{"Key":"this an","Fragments":["rethrow","O(n)"]},{"Key":"an rethrow","Fragments":["the"]},{"Key":"rethrow the","Fragments":["proper"]},{"Key":"the proper","Fragments":["exception","overloads","header","type","response."]},{"Key":"proper exception","Fragments":["OR"]},{"Key":"exception OR","Fragments":["you"]},{"Key":"OR you","Fragments":["can"]},{"Key":"can first","Fragments":["call"]},{"Key":"first call","Fragments":["*find*","would"]},{"Key":"call *find*","Fragments":["do"]},{"Key":"*find* do","Fragments":["get"]},{"Key":"do get","Fragments":["the","that's"]},{"Key":"the iterator,","Fragments":["if","you"]},{"Key":"iterator, if","Fragments":["the","it"]},{"Key":"iterator is","Fragments":["not"]},{"Key":"not end","Fragments":["then"]},{"Key":"end then","Fragments":["return","the"]},{"Key":" @johathan","Fragments":["Yes,"]},{"Key":"@johathan Yes,","Fragments":["there"]},{"Key":"Yes, there","Fragments":["is"]},{"Key":"is nothing","Fragments":["wrong","said"]},{"Key":"nothing wrong","Fragments":["with"]},{"Key":"wrong with","Fragments":["the","number==0?","writing","what","it,","the","that?","just","that,"]},{"Key":"the implementation,","Fragments":["I","I"]},{"Key":"implementation, I","Fragments":["am","think.","really","opted"]},{"Key":"am just","Fragments":["saying"]},{"Key":"saying that","Fragments":["for"]},{"Key":"that for","Fragments":["mainanence,","a","the","some","you","the","every","the","some","each","loop,","such","this"]},{"Key":"for mainanence,","Fragments":["now"]},{"Key":"mainanence, now","Fragments":["you"]},{"Key":"sure reset","Fragments":["and"]},{"Key":"reset and","Fragments":["constructor"]},{"Key":"and constructor","Fragments":["are"]},{"Key":"constructor are","Fragments":["always"]},{"Key":"are always","Fragments":["the","considered","conscious","reserved","welcome."]},{"Key":"same. if","Fragments":["for"]},{"Key":"for example","Fragments":["another","in","we","something","here:","here:","`reset`,","easier.","the","`boost::algorithm::trim(str)`"]},{"Key":"example another","Fragments":["field"]},{"Key":"another field","Fragments":["were"]},{"Key":"field were","Fragments":["to"]},{"Key":"be added,","Fragments":["that"]},{"Key":"added, that","Fragments":["would"]},{"Key":"be acounted","Fragments":["for."]},{"Key":" Resubmitted","Fragments":["only"]},{"Key":"Resubmitted only","Fragments":["the"]},{"Key":"only the","Fragments":["header","moment","very","uncomplete","characters","first","first"]},{"Key":"header file,","Fragments":["as","I","moved","the","that","that","the","these"]},{"Key":"file, as","Fragments":["the"]},{"Key":"the untouched","Fragments":["source"]},{"Key":"untouched source","Fragments":["file"]},{"Key":"source file","Fragments":["from","which","point,","or","or","is","in","too","while","it"]},{"Key":"file from","Fragments":["revision"]},{"Key":"from revision","Fragments":["2"]},{"Key":"revision 2","Fragments":["was"]},{"Key":"2 was","Fragments":["making"]},{"Key":"was making","Fragments":["the"]},{"Key":"the CLI","Fragments":["return","(I","when","to"]},{"Key":"CLI return","Fragments":["(400)"]},{"Key":"return (400)","Fragments":["with"]},{"Key":"(400) with","Fragments":["a"]},{"Key":"a warning","Fragments":["about","about","for"]},{"Key":"warning about","Fragments":["a","it"]},{"Key":"about a","Fragments":["duplicate","somewhat","`map\u003cchar,","million","copy","class,","material","case","word","better","potentially","direct"]},{"Key":"a duplicate","Fragments":["iteration.","of"]},{"Key":"in phone_number::process_number().","Fragments":["Therefore"]},{"Key":"phone_number::process_number(). Therefore","Fragments":["it"]},{"Key":"Therefore it","Fragments":["should"]},{"Key":" Never","Fragments":["heard"]},{"Key":"Never heard","Fragments":["of"]},{"Key":"heard of","Fragments":["the","the","them."]},{"Key":"the reserve","Fragments":["function","and"]},{"Key":"reserve function","Fragments":["before,"]},{"Key":"function before,","Fragments":["thanks"]},{"Key":"before, thanks","Fragments":["a"]},{"Key":"thanks a","Fragments":["lot","lot.","lot"]},{"Key":" process_number","Fragments":["should"]},{"Key":"process_number should","Fragments":["take"]},{"Key":"take the","Fragments":["number","map","parameter","half","`input`","vector","string","parameter","functor.","stance","two","return"]},{"Key":"number as","Fragments":["a"]},{"Key":"a parameter","Fragments":["thus","that","that"]},{"Key":"parameter thus","Fragments":["not"]},{"Key":"not needing","Fragments":["to"]},{"Key":"save it.","Fragments":["The"]},{"Key":"The process_number","Fragments":["could"]},{"Key":"process_number could","Fragments":["be"]},{"Key":"very similar","Fragments":["to","types","word","to","to","syntactically","to","to","to"]},{"Key":"to my","Fragments":["own,","rv","lambda","attention...","`result`.","subtle","required","comment","conversation","functions","functions","classes.","previous","unfortold","desktop","knowledge.","code.","house","pushing","previous"]},{"Key":"my own,","Fragments":["and","or","and"]},{"Key":"own, and","Fragments":["thus","I"]},{"Key":"thus of","Fragments":["course"]},{"Key":"course it's","Fragments":["good!"]},{"Key":"it's good!","Fragments":[";)"]},{"Key":"good! ;)","Fragments":["Good"]},{"Key":";) Good","Fragments":["thing"]},{"Key":"Good thing","Fragments":["to"]},{"Key":"thing to","Fragments":["do","do","guard","know","point","do","do,","make","add","look","look","look","work","me.","a","notice"]},{"Key":"the const-reference,","Fragments":["I'll"]},{"Key":"const-reference, I'll","Fragments":["actually"]},{"Key":"I'll actually","Fragments":["steal"]},{"Key":"actually steal","Fragments":["that"]},{"Key":"steal that","Fragments":["straight"]},{"Key":"that straight","Fragments":["from"]},{"Key":"straight from","Fragments":["you."]},{"Key":"from you.","Fragments":["I"]},{"Key":"you. I","Fragments":["usually","like"]},{"Key":"I usually","Fragments":["pay","submit","do","write","write"]},{"Key":"usually pay","Fragments":["attention"]},{"Key":"pay attention","Fragments":["those"]},{"Key":"attention those","Fragments":["things,"]},{"Key":"those things,","Fragments":["but"]},{"Key":"but here","Fragments":["for","the","is","are","it"]},{"Key":"here for","Fragments":["some","more"]},{"Key":" Joking","Fragments":["aside,"]},{"Key":"Joking aside,","Fragments":["I"]},{"Key":"aside, I","Fragments":["don't"]},{"Key":"really know","Fragments":["how","regex,","if","which"]},{"Key":"more straight-forward","Fragments":["way."]},{"Key":"only nitpick","Fragments":["I","for","I","is","I"]},{"Key":"nitpick I","Fragments":["would","can","have"]},{"Key":"have is","Fragments":["a","O(n)","nice","better.","that","the"]},{"Key":"a style","Fragments":["issue.","thing,","that"]},{"Key":"style issue.","Fragments":["The"]},{"Key":"issue. The","Fragments":["line","issue"]},{"Key":"The line","Fragments":["spacing","breaks"]},{"Key":"line spacing","Fragments":["suggests","would"]},{"Key":"spacing suggests","Fragments":["to"]},{"Key":"suggests to","Fragments":["me"]},{"Key":"me that","Fragments":["the","much","you","you","suspects","yes,","I","regular","one","the","it","it","`*phrase.rbegin()`"]},{"Key":"the initialization","Fragments":["of","of","list","list"]},{"Key":"initialization of","Fragments":["hamming_distance","the","`verse_index`"]},{"Key":"of hamming_distance","Fragments":["and"]},{"Key":"hamming_distance and","Fragments":["the"]},{"Key":"the exception","Fragments":["handling","handling","message","while","code","constructor"]},{"Key":"exception handling","Fragments":["are","and","here"]},{"Key":"handling are","Fragments":["somehow"]},{"Key":"are somehow","Fragments":["logically"]},{"Key":"somehow logically","Fragments":["connected"]},{"Key":"logically connected","Fragments":["and"]},{"Key":"connected and","Fragments":["unrelated"]},{"Key":"and unrelated","Fragments":["to"]},{"Key":"unrelated to","Fragments":["the"]},{"Key":"the for-loop","Fragments":["calculating","was"]},{"Key":"for-loop calculating","Fragments":["the"]},{"Key":"calculating the","Fragments":["distance.","whole","distance"]},{"Key":"the distance.","Fragments":["To"]},{"Key":"distance. To","Fragments":["me,"]},{"Key":"To me,","Fragments":["a","private"]},{"Key":"me, a","Fragments":["more"]},{"Key":"more natural","Fragments":["line"]},{"Key":"natural line","Fragments":["spacing"]},{"Key":"spacing would","Fragments":["be"]},{"Key":"first if","Fragments":["by","statement."]},{"Key":"if by","Fragments":["itself"]},{"Key":"by itself","Fragments":["and"]},{"Key":"itself and","Fragments":["then"]},{"Key":"then group","Fragments":["the"]},{"Key":"group the","Fragments":["three","names","students"]},{"Key":"the three","Fragments":["rows","bools","bools","cases","cases,"]},{"Key":"three rows","Fragments":["relating"]},{"Key":"rows relating","Fragments":["to"]},{"Key":"relating to","Fragments":["the"]},{"Key":"actual hamming_distance","Fragments":["together."]},{"Key":"check out","Fragments":["my","Boost","this","my"]},{"Key":"out my","Fragments":["for-loop","hamming","submission"]},{"Key":"my for-loop","Fragments":["with"]},{"Key":"for-loop with","Fragments":["a","manually"]},{"Key":"a conditional","Fragments":["operator","rather"]},{"Key":"conditional operator","Fragments":["instead"]},{"Key":"operator instead","Fragments":["of"]},{"Key":"an if","Fragments":["statement.","inside","should","statement"]},{"Key":"if statement.","Fragments":["I","Yes","This","I"]},{"Key":"statement. I","Fragments":["thought","will"]},{"Key":"it made","Fragments":["the","a","it","sense","my"]},{"Key":"code very","Fragments":["succinct."]},{"Key":"should me","Fragments":["marked"]},{"Key":"me marked","Fragments":["explicit"]},{"Key":"conversion. (This","Fragments":["would"]},{"Key":"(This would","Fragments":["be"]},{"Key":"the headerfile","Fragments":["which"]},{"Key":"headerfile which","Fragments":["was"]},{"Key":"which was","Fragments":["not","one","unecessary","introduced","failing.","an"]},{"Key":"not included.","Fragments":["Just"]},{"Key":"included. Just","Fragments":["pass"]},{"Key":"Just pass","Fragments":["it"]},{"Key":"extra argument","Fragments":["when"]},{"Key":"argument when","Fragments":["submitting"]},{"Key":"when submitting","Fragments":["*exercism"]},{"Key":"submitting *exercism","Fragments":["s"]},{"Key":"*exercism s","Fragments":["phone_number.h"]},{"Key":"s phone_number.h","Fragments":["phone_number.cpp*"]},{"Key":" *num*","Fragments":["is"]},{"Key":"*num* is","Fragments":["copied"]},{"Key":"copied twice.","Fragments":["consider"]},{"Key":"twice. consider","Fragments":["taking"]},{"Key":" `phone_number(const","Fragments":["string\u0026"]},{"Key":"`phone_number(const string\u0026","Fragments":["num)`"]},{"Key":" So,","Fragments":["finally","that","I","one"]},{"Key":"So, finally","Fragments":["getting"]},{"Key":"finally getting","Fragments":["back"]},{"Key":"getting back","Fragments":["to"]},{"Key":"you. It","Fragments":["looks"]},{"Key":"an O(n)-thing","Fragments":["to"]},{"Key":"O(n)-thing to","Fragments":["me,"]},{"Key":"to me,","Fragments":["with","because","but","but","since","indeed!).","but","but","so"]},{"Key":"me, with","Fragments":["n","or"]},{"Key":"with n","Fragments":["="]},{"Key":"n =","Fragments":["#characters"]},{"Key":"= #characters","Fragments":["in"]},{"Key":"#characters in","Fragments":["the"]},{"Key":"string. Worst-case","Fragments":["is"]},{"Key":"Worst-case is","Fragments":["2n"]},{"Key":"is 2n","Fragments":["(no"]},{"Key":"2n (no","Fragments":["whitespace"]},{"Key":"(no whitespace","Fragments":["and"]},{"Key":"whitespace and","Fragments":["we","other","not","alphanumeric"]},{"Key":"and we","Fragments":["have","should","could","iterate"]},{"Key":"a non-number).","Fragments":["The"]},{"Key":"non-number). The","Fragments":["stripWhitespace"]},{"Key":"The stripWhitespace","Fragments":["has"]},{"Key":"stripWhitespace has","Fragments":["a"]},{"Key":"a worst-case","Fragments":["as"]},{"Key":"worst-case as","Fragments":["n"]},{"Key":"as n","Fragments":["(back"]},{"Key":"n (back","Fragments":["is"]},{"Key":"(back is","Fragments":["specified"]},{"Key":"is specified","Fragments":["as","as"]},{"Key":"specified as","Fragments":["constant","a"]},{"Key":"as constant","Fragments":["and","anyways"]},{"Key":"constant and","Fragments":["pop_back,","thus","not"]},{"Key":"and pop_back,","Fragments":["while"]},{"Key":"pop_back, while","Fragments":["unspecified"]},{"Key":"while unspecified","Fragments":["is"]},{"Key":"unspecified is","Fragments":["presumably"]},{"Key":"is presumably","Fragments":["constant"]},{"Key":"presumably constant","Fragments":["complexity)."]},{"Key":"I'm wondering","Fragments":["if","why","if","if"]},{"Key":"wondering if","Fragments":["there","it","you","this","there","\u003e=","it","you're"]},{"Key":"to push","Fragments":["this"]},{"Key":"push this","Fragments":["lower."]},{"Key":"this lower.","Fragments":["I"]},{"Key":"lower. I","Fragments":["could"]},{"Key":"put numbersentp","Fragments":["and"]},{"Key":"numbersentp and","Fragments":["uppercasep"]},{"Key":"and uppercasep","Fragments":["together"]},{"Key":"uppercasep together","Fragments":["and"]},{"Key":"together and","Fragments":["lower","happily"]},{"Key":"lower worst-case","Fragments":["to","runtime."]},{"Key":"worst-case to","Fragments":["n."]},{"Key":"to n.","Fragments":["Perhaps"]},{"Key":"n. Perhaps","Fragments":["this"]},{"Key":"Perhaps this","Fragments":["is"]},{"Key":"is worth","Fragments":["a","the","mentioning","one","it."]},{"Key":"worth a","Fragments":["try,","using","read"]},{"Key":"a try,","Fragments":["to"]},{"Key":"try, to","Fragments":["see"]},{"Key":"if and","Fragments":["how"]},{"Key":"how readability","Fragments":["would"]},{"Key":"readability would","Fragments":["be"]},{"Key":"be affected.","Fragments":["Since"]},{"Key":"affected. Since","Fragments":["they"]},{"Key":"Since they","Fragments":["are","are"]},{"Key":"are intertwined","Fragments":["in"]},{"Key":"intertwined in","Fragments":["the"]},{"Key":"the if,","Fragments":["there"]},{"Key":"if, there","Fragments":["doesn't"]},{"Key":"there doesn't","Fragments":["seem"]},{"Key":"a straight-forward","Fragments":["justification"]},{"Key":"straight-forward justification","Fragments":["for"]},{"Key":"justification for","Fragments":["keeping"]},{"Key":"for keeping","Fragments":["them","commented","that"]},{"Key":"keeping them","Fragments":["separate."]},{"Key":"them separate.","Fragments":["See"]},{"Key":"separate. See","Fragments":["my"]},{"Key":"See my","Fragments":["attempt"]},{"Key":"my attempt","Fragments":["in"]},{"Key":"attempt in","Fragments":["iteration"]},{"Key":"Some overhead","Fragments":["for"]},{"Key":"overhead for","Fragments":["function"]},{"Key":"for function","Fragments":["calls","prototypes"]},{"Key":"function calls","Fragments":["of","one","or","like","from"]},{"Key":"calls of","Fragments":["the"]},{"Key":"the \"easy\"","Fragments":["functions"]},{"Key":"\"easy\" functions","Fragments":["could"]},{"Key":"functions could","Fragments":["be","operate"]},{"Key":"be fixed","Fragments":["by","because"]},{"Key":"fixed by","Fragments":["inline,"]},{"Key":"by inline,","Fragments":["of"]},{"Key":"inline, of","Fragments":["course."]},{"Key":"the nitpick!","Fragments":["I"]},{"Key":"nitpick! I","Fragments":["checked"]},{"Key":"checked yours","Fragments":["out"]},{"Key":"yours out","Fragments":["and"]},{"Key":"and saw","Fragments":["your"]},{"Key":"saw your","Fragments":["revision","solution"]},{"Key":"your revision","Fragments":["to"]},{"Key":"revision to","Fragments":["include"]},{"Key":"In hindsight,","Fragments":["you're"]},{"Key":"hindsight, you're","Fragments":["right,"]},{"Key":"you're right,","Fragments":["my","it","I'm"]},{"Key":"right, my","Fragments":["logical"]},{"Key":"my logical","Fragments":["grouping"]},{"Key":"logical grouping","Fragments":["of"]},{"Key":"grouping of","Fragments":["the"]},{"Key":"handling and","Fragments":["the"]},{"Key":"the counter","Fragments":["isn't","with"]},{"Key":"counter isn't","Fragments":["that"]},{"Key":"that great.","Fragments":["I"]},{"Key":"I might","Fragments":["go","go","be","solve","leave","have","even","suggest","give","be","be","copy","try","make","see","look","need","suggest","mention"]},{"Key":"might go","Fragments":["ahead","steal","with"]},{"Key":"go ahead","Fragments":["and","and","and","and"]},{"Key":"ahead and","Fragments":["change","remove","leave","comment","implemented","boiled","submitted","put"]},{"Key":"and change","Fragments":["that","the","that,","my"]},{"Key":"change that","Fragments":["to","in","in","affect","too"]},{"Key":"that to","Fragments":["be","get","work"]},{"Key":"also checked","Fragments":["out"]},{"Key":"checked out","Fragments":["your","what","the"]},{"Key":"out your","Fragments":["solution"]},{"Key":"your conditional","Fragments":["statement","statement."]},{"Key":"conditional statement","Fragments":["and"]},{"Key":"statement and","Fragments":["using","does"]},{"Key":"definitely clever","Fragments":["but"]},{"Key":"clever but","Fragments":["I","I"]},{"Key":"almost a","Fragments":["little","word-for-word"]},{"Key":"little too","Fragments":["terse,"]},{"Key":"too terse,","Fragments":["in"]},{"Key":"terse, in","Fragments":["my"]},{"Key":"my opinion.","Fragments":["I"]},{"Key":"opinion. I","Fragments":["think"]},{"Key":"the explicit","Fragments":["if-statement","copy","signature","character","call","iterator","formulas"]},{"Key":"explicit if-statement","Fragments":["is"]},{"Key":"if-statement is","Fragments":["a"]},{"Key":"little more","Fragments":["clear","obscure,","readable.","C++","closely.","descriptive","sense","sense"]},{"Key":"clear from","Fragments":["a","the"]},{"Key":"a readability","Fragments":["standpoint,","thing"]},{"Key":"readability standpoint,","Fragments":["but"]},{"Key":"standpoint, but","Fragments":["both"]},{"Key":"both solutions","Fragments":["are"]},{"Key":"solutions are","Fragments":["equally"]},{"Key":"are equally","Fragments":["valid."]},{"Key":"equally valid.","Fragments":["Thanks"]},{"Key":"valid. Thanks","Fragments":["for"]},{"Key":" Pushed","Fragments":["together"]},{"Key":"Pushed together","Fragments":["uppercasep"]},{"Key":"together uppercasep","Fragments":["and"]},{"Key":"uppercasep and","Fragments":["notnumsentp"]},{"Key":"and notnumsentp","Fragments":["to"]},{"Key":"notnumsentp to","Fragments":["lower"]},{"Key":"worst-case runtime.","Fragments":["This"]},{"Key":"runtime. This","Fragments":["is"]},{"Key":"a trade-off","Fragments":["in"]},{"Key":"trade-off in","Fragments":["readability,"]},{"Key":"in readability,","Fragments":["though,"]},{"Key":"readability, though,","Fragments":["so"]},{"Key":"so a","Fragments":["more","120-char","comment","class","range"]},{"Key":"more explicative","Fragments":["name"]},{"Key":"explicative name","Fragments":["for"]},{"Key":"function uppercasenotnumsentp","Fragments":["would"]},{"Key":"uppercasenotnumsentp would","Fragments":["be"]},{"Key":"the add()","Fragments":["method"]},{"Key":"* Readability","Fragments":["would"]},{"Key":"Readability would","Fragments":["be"]},{"Key":"improved if","Fragments":["you"]},{"Key":"used camelCase","Fragments":["or"]},{"Key":"camelCase or","Fragments":["underscores"]},{"Key":"or underscores","Fragments":["for"]},{"Key":"underscores for","Fragments":["all"]},{"Key":"for all","Fragments":["of","the","robots.","the","the","your","of","you","the","their","using","the","of","uppercase","the","capitals","capital"]},{"Key":"names you","Fragments":["create.","specify,","don't"]},{"Key":"* Make","Fragments":["sure","the"]},{"Key":"Make sure","Fragments":["the","you"]},{"Key":"sure the","Fragments":["lines","variable","variable","precondition","README","linkers","sorted","prerequisite","best","test","silence","mapped","string","tests","character"]},{"Key":"the lines","Fragments":["following","11","in","of","of"]},{"Key":"lines following","Fragments":["your"]},{"Key":"following your","Fragments":["if"]},{"Key":"your if","Fragments":["statements"]},{"Key":"statements are","Fragments":["properly","there","kinda"]},{"Key":"are properly","Fragments":["indented."]},{"Key":"properly indented.","Fragments":["In"]},{"Key":"indented. In","Fragments":["uppercasenotnumsentp,"]},{"Key":"In uppercasenotnumsentp,","Fragments":["they're"]},{"Key":"uppercasenotnumsentp, they're","Fragments":["not."]},{"Key":"use [isalpha(","Fragments":["c"]},{"Key":"[isalpha( c","Fragments":[")](http://www.cplusplus.com/reference/cctype/isalpha/)"]},{"Key":"c )](http://www.cplusplus.com/reference/cctype/isalpha/)","Fragments":["to"]},{"Key":")](http://www.cplusplus.com/reference/cctype/isalpha/) to","Fragments":["directly"]},{"Key":"to directly","Fragments":["determine"]},{"Key":"directly determine","Fragments":["if"]},{"Key":"determine if","Fragments":["you're","the","input","a","the","non-whitespace","they","the","the","the","I"]},{"Key":"you're dealing","Fragments":["with"]},{"Key":"dealing with","Fragments":["a","bool.","not","queries","was","indices.","```std::string```","psuedo-random","here:"]},{"Key":"* In","Fragments":["stripWhitespace","my","line","line","C++,"]},{"Key":"In stripWhitespace","Fragments":["you"]},{"Key":"stripWhitespace you","Fragments":["can"]},{"Key":"return by","Fragments":["passing","reference?"]},{"Key":"by passing","Fragments":["the","it","in","in"]},{"Key":"passing the","Fragments":["string","tests?","test","values.","positions","wrong","std::string","units","tests.","question_with_trailing_whitespace","tests."]},{"Key":"in by","Fragments":["value.","`#include"]},{"Key":"value. You're","Fragments":["passing"]},{"Key":"You're passing","Fragments":["in"]},{"Key":"passing in","Fragments":["a","`const","the","values"]},{"Key":"const and","Fragments":["then","logically","perhaps","allows"]},{"Key":"then never","Fragments":["using"]},{"Key":"never using","Fragments":["it"]},{"Key":"it except","Fragments":["to"]},{"Key":"except to","Fragments":["make"]},{"Key":"* Don't","Fragments":["be","use","see"]},{"Key":"Don't be","Fragments":["afraid"]},{"Key":"be afraid","Fragments":["of"]},{"Key":"afraid of","Fragments":["adding"]},{"Key":"adding blank","Fragments":["lines"]},{"Key":"blank lines","Fragments":["between","around"]},{"Key":"lines between","Fragments":["segments"]},{"Key":"between segments","Fragments":["of"]},{"Key":"segments of","Fragments":["code."]},{"Key":"of code.","Fragments":["It"]},{"Key":"code. It","Fragments":["helps"]},{"Key":"It helps","Fragments":["readability."]},{"Key":"give a","Fragments":["name","quick","reader","lowercase","namespace-specific","look","different"]},{"Key":"a name","Fragments":["to","space","space,","would","is"]},{"Key":"name to","Fragments":["the","start","mean","my","std::pair\u003cint,int\u003e"]},{"Key":"test if","Fragments":["a","the","they","a"]},{"Key":"a number","Fragments":["is","to","known","of","for","indicating","doesn't","of","is","at","of","of","of","of","of","of","times","to"]},{"Key":"is divisible","Fragments":["by","by"]},{"Key":"by another","Fragments":["number.","part"]},{"Key":"- Why","Fragments":["do","did","did"]},{"Key":"a the","Fragments":["year","performance"]},{"Key":"the year","Fragments":["by"]},{"Key":"year by","Fragments":["reference"]},{"Key":"reference instead","Fragments":["of","of"]},{"Key":"of by","Fragments":["value?"]},{"Key":"by value?","Fragments":["That","Also,","This"]},{"Key":"value? That","Fragments":["is"]},{"Key":"That is","Fragments":["a","a","an","what","how"]},{"Key":"a common","Fragments":["thing"]},{"Key":"common thing","Fragments":["to","that"]},{"Key":"do with","Fragments":["objects","`std::numeric_limits\u003cchar\u003e::min()`","readability?","them","allowing","visibility","it.","conversion","the","a","sentences","just","an","trim,","letter"]},{"Key":"with objects","Fragments":["that"]},{"Key":"objects that","Fragments":["are","are","could","it's"]},{"Key":"are expensive","Fragments":["to","to"]},{"Key":"expensive to","Fragments":["copy,","copy","copy","copy?","copy"]},{"Key":"to copy,","Fragments":["but"]},{"Key":"copy, but","Fragments":["AFAIK"]},{"Key":"but AFAIK","Fragments":["it's"]},{"Key":"AFAIK it's","Fragments":["rather"]},{"Key":"it's rather","Fragments":["uncommon"]},{"Key":"rather uncommon","Fragments":["with"]},{"Key":"uncommon with","Fragments":["primitive"]},{"Key":"with primitive","Fragments":["values."]},{"Key":"- Do","Fragments":["you"]},{"Key":"a macro?","Fragments":["Why"]},{"Key":"macro? Why","Fragments":["not"]},{"Key":"a (inlined)","Fragments":["function?"]},{"Key":"(inlined) function?","Fragments":["This"]},{"Key":"function? This","Fragments":["smells"]},{"Key":"This smells","Fragments":["a"]},{"Key":"smells a","Fragments":["bit"]},{"Key":"like premature","Fragments":["optimization."]},{"Key":"wrote (and","Fragments":["indented)"]},{"Key":"(and indented)","Fragments":["the"]},{"Key":"indented) the","Fragments":["code"]},{"Key":"that way.","Fragments":["It","However","For","so","I","You"]},{"Key":"way. It","Fragments":["looks"]},{"Key":"looks as","Fragments":["if"]},{"Key":"as if","Fragments":["you","a","I","it","the","they","he","the","C++"]},{"Key":"you wanted","Fragments":["to","to","to","to","to"]},{"Key":"it readable,","Fragments":["and","because"]},{"Key":"readable, and","Fragments":["therefore"]},{"Key":"and therefore","Fragments":["avoided","I'll","optimizations","they","additional","the"]},{"Key":"therefore avoided","Fragments":["``\u0026\u0026``,"]},{"Key":"avoided ``\u0026\u0026``,","Fragments":["``||``"]},{"Key":"``\u0026\u0026``, ``||``","Fragments":["and"]},{"Key":"``||`` and","Fragments":["parentheses,"]},{"Key":"and parentheses,","Fragments":["used"]},{"Key":"parentheses, used","Fragments":["indentation,"]},{"Key":"used indentation,","Fragments":["new"]},{"Key":"indentation, new","Fragments":["lines"]},{"Key":"new lines","Fragments":["and"]},{"Key":"lines and","Fragments":["explicit"]},{"Key":"and explicit","Fragments":["boolean","with","with"]},{"Key":"explicit boolean","Fragments":["values,","value"]},{"Key":"boolean values,","Fragments":["but"]},{"Key":"values, but","Fragments":["you"]},{"Key":"not want","Fragments":["to","to","to","necessarily","to"]},{"Key":"condition into","Fragments":["smaller","a"]},{"Key":"into smaller","Fragments":["parts."]},{"Key":"operator over","Fragments":["binary"]},{"Key":"over binary","Fragments":["operators"]},{"Key":"binary operators","Fragments":["or","is"]},{"Key":"operators or","Fragments":["separate"]},{"Key":"or separate","Fragments":["``if``"]},{"Key":"separate ``if``","Fragments":["statements?"]},{"Key":"``if`` statements?","Fragments":["Why"]},{"Key":"statements? Why","Fragments":["did"]},{"Key":"you write","Fragments":["explicitly","inside","more","more"]},{"Key":"write explicitly","Fragments":["``true``"]},{"Key":"explicitly ``true``","Fragments":["and"]},{"Key":"``true`` and","Fragments":["``false``"]},{"Key":"and ``false``","Fragments":["in"]},{"Key":"``false`` in","Fragments":["one"]},{"Key":"one branch","Fragments":["of"]},{"Key":"branch of","Fragments":["the","the","the","this","the"]},{"Key":"ternary operator,","Fragments":["but"]},{"Key":"operator, but","Fragments":["used","I"]},{"Key":"but used","Fragments":["``year%400==0``"]},{"Key":"used ``year%400==0``","Fragments":["in"]},{"Key":"``year%400==0`` in","Fragments":["the"]},{"Key":"the third","Fragments":["place?","case","function","parameter","argument.","version","check"]},{"Key":"you thought","Fragments":["about","about","of"]},{"Key":"about it","Fragments":["and","when","when","being","in","[here](http://stackoverflow.com/questions/154469/unnamed-anonymous-namespaces-vs-static-functions).","sooner.","seems"]},{"Key":"and you","Fragments":["had","would","need","know","wouldn't","don't","get","just","don't","can","can","want","don't","don't","don't","don't","import","can","don't","run","might","don't","should"]},{"Key":"had your","Fragments":["reasons."]},{"Key":"your reasons.","Fragments":["So"]},{"Key":"reasons. So","Fragments":["mostly,"]},{"Key":"So mostly,","Fragments":["I'm"]},{"Key":"mostly, I'm","Fragments":["just"]},{"Key":"I'm just","Fragments":["curious.","learning","trying","not","learning","going","more"]},{"Key":"readable, great.","Fragments":["But"]},{"Key":"great. But","Fragments":["I","I","it"]},{"Key":"few nits","Fragments":["to"]},{"Key":"nits to","Fragments":["pick:","pick:"]},{"Key":"- Please","Fragments":["don't"]},{"Key":"Please don't","Fragments":["use","write","use","write","write","using","hesitate"]},{"Key":"use ``using","Fragments":["namespace","...``"]},{"Key":"``using namespace","Fragments":["std;``","std;``"]},{"Key":"namespace std;``","Fragments":["in","in"]},{"Key":"std;`` in","Fragments":["your","your"]},{"Key":"your headers.","Fragments":["It"]},{"Key":"headers. It","Fragments":["enforces"]},{"Key":"It enforces","Fragments":["this","this","this"]},{"Key":"enforces this","Fragments":["decision","decision","decision","decision"]},{"Key":"this decision","Fragments":["onto","onto","on","on","can"]},{"Key":"decision onto","Fragments":["everyone","everyone"]},{"Key":"onto everyone","Fragments":["who","who"]},{"Key":"you include","Fragments":["``getprimes(int","the","the"]},{"Key":"include ``getprimes(int","Fragments":["i)``"]},{"Key":"``getprimes(int i)``","Fragments":["in"]},{"Key":"i)`` in","Fragments":["your"]},{"Key":"your header","Fragments":["file?","files.","I","file.","you're","file.","in","access","gets","file,","file?","as:","as","would"]},{"Key":"header file?","Fragments":["Only","I"]},{"Key":"file? Only","Fragments":["``convert(int"]},{"Key":"Only ``convert(int","Fragments":["i)``"]},{"Key":"``convert(int i)``","Fragments":["was"]},{"Key":"i)`` was","Fragments":["required."]},{"Key":"to compute","Fragments":["the","the"]},{"Key":"the distinct","Fragments":["prime"]},{"Key":"distinct prime","Fragments":["factors"]},{"Key":"prime factors","Fragments":["of","each","before"]},{"Key":"factors of","Fragments":["the","3"]},{"Key":"number instead","Fragments":["of"]},{"Key":"just testing","Fragments":["for"]},{"Key":"for divisibility","Fragments":["by"]},{"Key":"divisibility by","Fragments":["3,"]},{"Key":"by 3,","Fragments":["5,"]},{"Key":"3, 5,","Fragments":["and","and"]},{"Key":"5, and","Fragments":["7?","7."]},{"Key":"is clean,","Fragments":["great."]},{"Key":"clean, great.","Fragments":["But"]},{"Key":"have still","Fragments":["nits","needed"]},{"Key":"still nits","Fragments":["to"]},{"Key":" ``transcriptionMap[base]``","Fragments":["does"]},{"Key":"``transcriptionMap[base]`` does","Fragments":["not"]},{"Key":"not throw","Fragments":["an"]},{"Key":"exception. (see","Fragments":["http://en.cppreference.com/w/cpp/container/map/operator_at)."]},{"Key":" Instead,","Fragments":["if"]},{"Key":"Instead, if","Fragments":["no"]},{"Key":"if no","Fragments":["key","function","other"]},{"Key":"no key","Fragments":["equivalent"]},{"Key":"key equivalent","Fragments":["to"]},{"Key":"to ``base``","Fragments":["exists"]},{"Key":"``base`` exists","Fragments":["in"]},{"Key":"exists in","Fragments":["``transcriptionMap``,","std","your","the"]},{"Key":"in ``transcriptionMap``,","Fragments":["it"]},{"Key":"``transcriptionMap``, it","Fragments":["inserts"]},{"Key":"it inserts","Fragments":["a"]},{"Key":"new default","Fragments":["value"]},{"Key":"default value","Fragments":["(``'\\0'``)","extends","when","of","of","and"]},{"Key":"value (``'\\0'``)","Fragments":["with"]},{"Key":"(``'\\0'``) with","Fragments":["that"]},{"Key":"to it.","Fragments":["If","This"]},{"Key":"it. If","Fragments":["somebody","you","all","I"]},{"Key":"If somebody","Fragments":["calls"]},{"Key":"somebody calls","Fragments":["``transcription::to_rna('x')``"]},{"Key":"calls ``transcription::to_rna('x')``","Fragments":["a"]},{"Key":"``transcription::to_rna('x')`` a","Fragments":["null"]},{"Key":"a null","Fragments":["character","string)","byte","date."]},{"Key":"null character","Fragments":["is"]},{"Key":"character is","Fragments":["returned","compared","lower-case,","found?","compared","lowercase,","probably","white","whitespace.","found","uppercase.","found","a","alphabetical,","upper","a","a","an","uppercase"]},{"Key":"is returned","Fragments":["and","as","is"]},{"Key":"returned and","Fragments":["``transcriptionMap``"]},{"Key":"and ``transcriptionMap``","Fragments":["afterwards"]},{"Key":"``transcriptionMap`` afterwards","Fragments":["contains"]},{"Key":"afterwards contains","Fragments":["an"]},{"Key":"entry that","Fragments":["maps"]},{"Key":"that maps","Fragments":["``'x'``","can"]},{"Key":"maps ``'x'``","Fragments":["to"]},{"Key":"``'x'`` to","Fragments":["``'\\0'``."]},{"Key":"to ``'\\0'``.","Fragments":["I"]},{"Key":"``'\\0'``. I","Fragments":["don't"]},{"Key":"need exception","Fragments":["handling"]},{"Key":"handling here","Fragments":["at"]},{"Key":"here at","Fragments":["all,"]},{"Key":"all, since","Fragments":["it","it"]},{"Key":"since it","Fragments":["is","know","know","is","would","contains","was","would","confuses","added","wouldn't","has","really","will","was","is","only","will","spreads","is","uses","is","has"]},{"Key":"not required","Fragments":["by","by","here.","to","to","by"]},{"Key":"required by","Fragments":["the","posix).","the","the","the"]},{"Key":"the *Readme*","Fragments":["or"]},{"Key":"*Readme* or","Fragments":["*Test"]},{"Key":"or *Test","Fragments":["Suite*."]},{"Key":" Passing","Fragments":["a","strings"]},{"Key":"Passing a","Fragments":["``char``"]},{"Key":"a ``char``","Fragments":["by"]},{"Key":"``char`` by","Fragments":["const"]},{"Key":"reference is","Fragments":["an","not","ideal","redudant.","what","that","better","actually"]},{"Key":"unnecessary overhead.","Fragments":["Fundamental","IIRC"]},{"Key":"overhead. Fundamental","Fragments":["data"]},{"Key":"Fundamental data","Fragments":["types"]},{"Key":"data types","Fragments":["(``char``,","that","and"]},{"Key":"types (``char``,","Fragments":["``int``,"]},{"Key":"(``char``, ``int``,","Fragments":["``bool``,"]},{"Key":"``int``, ``bool``,","Fragments":["pointer)"]},{"Key":"``bool``, pointer)","Fragments":["are"]},{"Key":"pointer) are","Fragments":["commonly"]},{"Key":"are commonly","Fragments":["passed","passed"]},{"Key":"commonly passed","Fragments":["by","by"]},{"Key":"value, data","Fragments":["types"]},{"Key":"types that","Fragments":["are","don't","cannot"]},{"Key":"copy are","Fragments":["commonly"]},{"Key":"the ``auto``","Fragments":["keyword,"]},{"Key":"``auto`` keyword,","Fragments":["I"]},{"Key":"keyword, I","Fragments":["guess"]},{"Key":"using C++11","Fragments":["or"]},{"Key":"C++11 or","Fragments":["higher."]},{"Key":"or higher.","Fragments":["Is"]},{"Key":"higher. Is","Fragments":["there"]},{"Key":"a reason","Fragments":["to","for","for","why","to","I'm","why","you","for"]},{"Key":"reason to","Fragments":["use","do","include","believe","believe","use","make","make","use","believe","believe","have","use","have","support","declare","delete","use","have","make","do","use"]},{"Key":"use ``BOOST_FOREACH``","Fragments":["in"]},{"Key":"``BOOST_FOREACH`` in","Fragments":["C++11?"]},{"Key":"But most","Fragments":["of"]},{"Key":"all I'm","Fragments":["curious"]},{"Key":"I'm curious","Fragments":["how","about","as","why","though","if","about","about","for"]},{"Key":"curious how","Fragments":["you","you"]},{"Key":"you managed","Fragments":["to"]},{"Key":"managed to","Fragments":["submit","benchmark","get","store"]},{"Key":"submit two","Fragments":["files","files","files,","files?","files?"]},{"Key":"two files","Fragments":["at","instead","(h"]},{"Key":"files at","Fragments":["once.","once.","once","once"]},{"Key":" `auto`","Fragments":["is"]},{"Key":"`auto` is","Fragments":["available"]},{"Key":"is available","Fragments":["in","at"]},{"Key":"available in","Fragments":["VS","VS2013.","the","cctype","the","the","the","the"]},{"Key":"in VS","Fragments":["version","2015"]},{"Key":"VS version","Fragments":["10,"]},{"Key":"version 10,","Fragments":["but"]},{"Key":"10, but","Fragments":["`for`"]},{"Key":"but `for`","Fragments":["construct"]},{"Key":"`for` construct","Fragments":["isn't"]},{"Key":"construct isn't","Fragments":["until"]},{"Key":"isn't until","Fragments":["11"]},{"Key":"The fast","Fragments":["approach"]},{"Key":"fast approach","Fragments":["you"]},{"Key":"approach you","Fragments":["have"]},{"Key":"is O(n)","Fragments":["where","most"]},{"Key":"O(n) where","Fragments":["N"]},{"Key":"where N","Fragments":["is"]},{"Key":"N is","Fragments":["the"]},{"Key":"the square.","Fragments":["This"]},{"Key":"square. This","Fragments":["can"]},{"Key":"done (including","Fragments":["total)"]},{"Key":"(including total)","Fragments":["in"]},{"Key":"total) in","Fragments":["O(1)."]},{"Key":"in O(1).","Fragments":["For"]},{"Key":"O(1). For","Fragments":["hints,"]},{"Key":"For hints,","Fragments":["you"]},{"Key":"hints, you","Fragments":["can"]},{"Key":"my solution","Fragments":["2","I","for","significantly.","leans","of","in","counts","also","based","may"]},{"Key":"solution 2","Fragments":["(first"]},{"Key":"2 (first","Fragments":["is"]},{"Key":"(first is","Fragments":["recursive"]},{"Key":"is recursive","Fragments":["for"]},{"Key":"recursive for","Fragments":["readability)"]},{"Key":"the bit","Fragments":["twiddling."]},{"Key":"would like","Fragments":["to","to","to","to","to","to","to","another"]},{"Key":"see `total`","Fragments":["implemented"]},{"Key":"`total` implemented","Fragments":["for"]},{"Key":"implemented for","Fragments":["an","an","their"]},{"Key":"an arbitrary","Fragments":["N","N","N","N","number"]},{"Key":"of bit","Fragments":["twidling."]},{"Key":"see total","Fragments":["implemented"]},{"Key":"total implemented","Fragments":["for"]},{"Key":"is O(n).","Fragments":["It","This"]},{"Key":"O(n). It","Fragments":["can"]},{"Key":"Also consider","Fragments":["implementing"]},{"Key":"consider implementing","Fragments":["total"]},{"Key":"implementing total","Fragments":["for"]},{"Key":"total for","Fragments":["an","an","arbitrary"]},{"Key":"arbitrary N","Fragments":["with","with","with"]},{"Key":"N with","Fragments":["a","a","a"]},{"Key":"a default","Fragments":["of","of","value","constructor.","value","value","Value","visibility","value,","value","case","cause","constructed","constructor,"]},{"Key":"default of","Fragments":["64","64"]},{"Key":" total","Fragments":["can","heap","heap"]},{"Key":"total can","Fragments":["be"]},{"Key":"implemented in","Fragments":["O(1).","library","an","the"]},{"Key":" std::pow","Fragments":["is","is","is","is","is","returns"]},{"Key":"std::pow is","Fragments":["actually","inefficient","inefficient","inefficient","inefficient"]},{"Key":"actually inefficient","Fragments":["here"]},{"Key":"inefficient here","Fragments":["as"]},{"Key":"does floating","Fragments":["point"]},{"Key":"floating point","Fragments":["and","equality","warning.","math","math.","numbers","arithmetic"]},{"Key":"point and","Fragments":["then","clean"]},{"Key":"then has","Fragments":["to"]},{"Key":"also implement","Fragments":["total"]},{"Key":"implement total","Fragments":["for"]},{"Key":"to fix","Fragments":["your","it,","up","it.","it","that"]},{"Key":"fix your","Fragments":["total"]},{"Key":"your total","Fragments":["do","function"]},{"Key":"total do","Fragments":["this"]},{"Key":"return ((1ULL","Fragments":["\u003c\u003c"]},{"Key":"((1ULL \u003c\u003c","Fragments":["n-1)","n-1)"]},{"Key":"\u003c\u003c n-1)","Fragments":["//","-"]},{"Key":"n-1) //","Fragments":["Toggle"]},{"Key":"// Toggle","Fragments":["the","all"]},{"Key":"Toggle the","Fragments":["highest"]},{"Key":"the highest","Fragments":["bit","bit"]},{"Key":" +","Fragments":["((1ULL","(c=='1')"]},{"Key":"+ ((1ULL","Fragments":["\u003c\u003c"]},{"Key":"n-1) -","Fragments":["1ULL);"]},{"Key":"- 1ULL);","Fragments":["//"]},{"Key":"1ULL); //","Fragments":["Toggle"]},{"Key":"Toggle all","Fragments":["bits"]},{"Key":"all bits","Fragments":["lower"]},{"Key":"bits lower","Fragments":["than"]},{"Key":"But @riley","Fragments":["why"]},{"Key":"@riley why","Fragments":["do"]},{"Key":"two steps","Fragments":["instead"]},{"Key":"steps instead","Fragments":["of"]},{"Key":"of `(1ULL","Fragments":["\u003c\u003c"]},{"Key":"`(1ULL \u003c\u003c","Fragments":["n)","n)`"]},{"Key":"\u003c\u003c n)","Fragments":["-"]},{"Key":"n) -","Fragments":["1`?"]},{"Key":"might ask,","Fragments":["well"]},{"Key":"ask, well","Fragments":["the"]},{"Key":"well the","Fragments":["reason"]},{"Key":"the reason","Fragments":["is","you've","string_ref","I","for","for","I"]},{"Key":"reason is","Fragments":["simple,"]},{"Key":"is simple,","Fragments":["when","and"]},{"Key":"simple, when","Fragments":["`n"]},{"Key":"when `n","Fragments":["=="]},{"Key":"`n ==","Fragments":["64`"]},{"Key":"== 64`","Fragments":["then"]},{"Key":"64` then","Fragments":["`(1ULL"]},{"Key":"then `(1ULL","Fragments":["\u003c\u003c"]},{"Key":"\u003c\u003c n)`","Fragments":["overflows"]},{"Key":"n)` overflows","Fragments":["which"]},{"Key":"overflows which","Fragments":["is"]},{"Key":"is technically","Fragments":["undefined","not","legal"]},{"Key":"technically undefined","Fragments":["behavior"]},{"Key":"undefined behavior","Fragments":["and","(because","(but","in","if","if","or","when","when","when","to","if","on"]},{"Key":"behavior and","Fragments":["the","will","hence"]},{"Key":"the optimizer","Fragments":["can","super","*does*"]},{"Key":"optimizer can","Fragments":["do"]},{"Key":"do what","Fragments":["it","I","you","this","they","they","it","you"]},{"Key":"what it","Fragments":["wants","was.","supports.","does.","is","could","is","does.","does"]},{"Key":"it wants","Fragments":["with","to"]},{"Key":"wants with","Fragments":["that,"]},{"Key":"with that,","Fragments":["in","neat.","but"]},{"Key":"that, in","Fragments":["my","their"]},{"Key":"my case,","Fragments":["it"]},{"Key":"case, it","Fragments":["removes","works","could","might"]},{"Key":"it removes","Fragments":["it."]},{"Key":"removes it.","Fragments":["By"]},{"Key":"it. By","Fragments":["splitting"]},{"Key":"By splitting","Fragments":["it"]},{"Key":"splitting it","Fragments":["into","into","up."]},{"Key":"into 2","Fragments":["operations,","parts"]},{"Key":"2 operations,","Fragments":["there"]},{"Key":"operations, there","Fragments":["is"]},{"Key":"no overflow","Fragments":["and"]},{"Key":"overflow and","Fragments":["thus"]},{"Key":"thus no","Fragments":["undefined"]},{"Key":"no undefined","Fragments":["behavior."]},{"Key":" thank","Fragments":["you","you","you!"]},{"Key":"I've posted","Fragments":["a"]},{"Key":"posted a","Fragments":["new","polymorphic"]},{"Key":" incorporating","Fragments":["your"]},{"Key":"incorporating your","Fragments":["suggestions,"]},{"Key":" although","Fragments":["I"]},{"Key":"although I","Fragments":["did","have","know"]},{"Key":"did keep","Fragments":["the"]},{"Key":"I added","Fragments":["my","some","an","the","a","a","a","unit"]},{"Key":"added my","Fragments":["own"]},{"Key":"own test","Fragments":["case"]},{"Key":"case to","Fragments":["check","determine"]},{"Key":"check it","Fragments":["work"]},{"Key":"it work","Fragments":["working"]},{"Key":"work working","Fragments":["correctly:"]},{"Key":" BOOST_REQUIRE_THROW(transcription::to_rna('X'),","Fragments":["std::invalid_argument);"]},{"Key":"know namespace","Fragments":["std"]},{"Key":"std in","Fragments":["headers"]},{"Key":"in headers","Fragments":["is","--","though).","can"]},{"Key":"headers is","Fragments":["bad,","to"]},{"Key":"is bad,","Fragments":["result"]},{"Key":"bad, result","Fragments":["of"]},{"Key":"being lazy.","Fragments":["Removed."]},{"Key":"was good","Fragments":["practice"]},{"Key":"include every","Fragments":["function"]},{"Key":"every function","Fragments":["in"]},{"Key":"header that","Fragments":["is","work"]},{"Key":"- Because","Fragments":["apparently"]},{"Key":"Because apparently","Fragments":["I"]},{"Key":"apparently I","Fragments":["like"]},{"Key":"like being","Fragments":["inefficient,"]},{"Key":"being inefficient,","Fragments":["fixed."]},{"Key":" Rewrote","Fragments":["it,"]},{"Key":"Rewrote it,","Fragments":["should"]},{"Key":"it, should","Fragments":["be"]},{"Key":"be faster","Fragments":["but","than","on","if","than","than"]},{"Key":"faster but","Fragments":["still","clunkier"]},{"Key":"still readable.","Fragments":["I"]},{"Key":"readable. I","Fragments":["didn't","tend"]},{"Key":"didn't outsource","Fragments":["the"]},{"Key":"outsource the","Fragments":["checking"]},{"Key":"the checking","Fragments":["for"]},{"Key":"for divisors","Fragments":["to"]},{"Key":"divisors to","Fragments":["another"]},{"Key":"to another","Fragments":["function","would"]},{"Key":"another function","Fragments":["this","that"]},{"Key":"function this","Fragments":["time,"]},{"Key":"this time,","Fragments":["it","but"]},{"Key":"it still","Fragments":["seems","works?","had","has"]},{"Key":"still seems","Fragments":["to"]},{"Key":"point to","Fragments":["me.","\\t"]},{"Key":"your idea,","Fragments":["but"]},{"Key":"idea, but","Fragments":["haven't","could","using","I'd"]},{"Key":"but haven't","Fragments":["found"]},{"Key":"haven't found","Fragments":["a","any","an"]},{"Key":"doing this","Fragments":["without","kind","exercises","completely","way","is","but"]},{"Key":"this without","Fragments":["writing","modifying","modifying","that"]},{"Key":"without writing","Fragments":["specialisations","it","it"]},{"Key":"writing specialisations","Fragments":["for"]},{"Key":"specialisations for","Fragments":["string"]},{"Key":"for string","Fragments":["and","equality","equality","manipulation.","length","length","of"]},{"Key":"and char*,","Fragments":["which"]},{"Key":"char*, which","Fragments":["defeats"]},{"Key":"which defeats","Fragments":["the","some"]},{"Key":"defeats the","Fragments":["purpose."]},{"Key":" any","Fragments":["suggestions?"]},{"Key":"right, of","Fragments":["course"]},{"Key":"course this","Fragments":["can","is"]},{"Key":"implemented without","Fragments":["a"]},{"Key":"without a","Fragments":["loop.","need","clear","test","loop"]},{"Key":" Implementing","Fragments":["total","@fay"]},{"Key":"Implementing total","Fragments":["for"]},{"Key":"for arbitrary","Fragments":["N","multiples.size()"]},{"Key":"value extends","Fragments":["the"]},{"Key":"extends the","Fragments":["problem."]},{"Key":"problem. IMO","Fragments":["this"]},{"Key":"IMO this","Fragments":["should"]},{"Key":"this should","Fragments":["only","beat","be","be","be","be"]},{"Key":"done for","Fragments":["a","such","any","performance","you."]},{"Key":"good reason","Fragments":["since","to","why","to","not","to","to"]},{"Key":"reason since","Fragments":["then"]},{"Key":"since then","Fragments":["one"]},{"Key":"then one","Fragments":["also","O(n)"]},{"Key":"one also","Fragments":["has"]},{"Key":"also has","Fragments":["to","a","an"]},{"Key":"add unit","Fragments":["tests"]},{"Key":"unit tests","Fragments":["and","as","the","to","would","to","require","which","are","that","have"]},{"Key":"tests and","Fragments":["support","that's","that","the","checked","interpret"]},{"Key":"and support","Fragments":["this","this"]},{"Key":"support this","Fragments":["extended","interface"]},{"Key":"this extended","Fragments":["interface"]},{"Key":"extended interface","Fragments":["in"]},{"Key":"interface in","Fragments":["the"]},{"Key":"the future.","Fragments":["Without","You"]},{"Key":"future. Without","Fragments":["an"]},{"Key":"Without an","Fragments":["objective"]},{"Key":"an objective","Fragments":["value"]},{"Key":"objective value","Fragments":["in"]},{"Key":"in return","Fragments":["this"]},{"Key":"return this","Fragments":["may"]},{"Key":"this may","Fragments":["just"]},{"Key":"may just","Fragments":["be","be"]},{"Key":"would appreciate","Fragments":["feedback","if"]},{"Key":"appreciate feedback","Fragments":["especially"]},{"Key":"feedback especially","Fragments":["about"]},{"Key":"especially about","Fragments":["the","a"]},{"Key":"of call","Fragments":["by"]},{"Key":"call by","Fragments":["reference","reference"]},{"Key":"reference (coming","Fragments":["from"]},{"Key":"(coming from","Fragments":["Java"]},{"Key":"from Java","Fragments":["I'm","generics"]},{"Key":"Java I'm","Fragments":["new"]},{"Key":"I'm new","Fragments":["to","to","to","to","to"]},{"Key":"to it).","Fragments":["For"]},{"Key":"it). For","Fragments":["example,"]},{"Key":"For example,","Fragments":["did","I","v.reserve(n)","the","if","number","do","do","\"aAA\"","your","you","the","what","a","it","it"]},{"Key":"example, did","Fragments":["I"]},{"Key":"did I","Fragments":["use","not","include"]},{"Key":"it correctly","Fragments":["in","in"]},{"Key":"correctly in","Fragments":["the","other"]},{"Key":"the foreach","Fragments":["loop?"]},{"Key":"foreach loop?","Fragments":["Or"]},{"Key":"loop? Or","Fragments":["is"]},{"Key":"Or is","Fragments":["`for","it","it"]},{"Key":"is `for","Fragments":["(auto\u0026"]},{"Key":"`for (auto\u0026","Fragments":["e"]},{"Key":"(auto\u0026 e","Fragments":[":"]},{"Key":"e :","Fragments":["sequence)`","sequence)`?","sequence)`","sequence)`","sequence)`"]},{"Key":": sequence)`","Fragments":["the","vs","the","which"]},{"Key":"sequence)` the","Fragments":["same","latter"]},{"Key":"as `for","Fragments":["(auto"]},{"Key":"`for (auto","Fragments":["e","\u0026","e","const","c","current_char","c","c","i"]},{"Key":"(auto e","Fragments":[":",":"]},{"Key":"point. That's","Fragments":["a"]},{"Key":"That's a","Fragments":["much","good","good","valid","good","very","great"]},{"Key":"a much","Fragments":["better","simpler","better","better","cleaner"]},{"Key":"better way","Fragments":["of","to","than","and","to","to","to","to","than","to","to","to","to"]},{"Key":"O(n) most","Fragments":["of"]},{"Key":"submissions are","Fragments":["not"]},{"Key":"not linear","Fragments":["time"]},{"Key":"linear time","Fragments":["so","if"]},{"Key":"time so","Fragments":["this","I"]},{"Key":"so this","Fragments":["should","was"]},{"Key":"should beat","Fragments":["them"]},{"Key":"beat them","Fragments":["speed"]},{"Key":"them speed","Fragments":["wise."]},{"Key":" Sooo","Fragments":["I'm"]},{"Key":"Sooo I'm","Fragments":["not"]},{"Key":"a programmer","Fragments":["but","down"]},{"Key":"programmer but","Fragments":["I"]},{"Key":"I tried","Fragments":["to","to","the","to","to","benchmarking","to","to","to","this","to","to","to","to","to","to","a","to","to","to","some","to","to"]},{"Key":"code as","Fragments":["readable","a","far","its","either","clean","my","simple"]},{"Key":"as readable","Fragments":["as","as"]},{"Key":"readable as","Fragments":["possible.","I","well","long"]},{"Key":"be happy","Fragments":["about","with","with","and"]},{"Key":"happy about","Fragments":["any","the","is","[reusing](http://en.cppreference.com/w/cpp/algorithm/move)"]},{"Key":"about any","Fragments":["kind","system"]},{"Key":"any kind","Fragments":["of","of","of","of"]},{"Key":"careful not","Fragments":["to","to"]},{"Key":"to export","Fragments":["unnecessary"]},{"Key":"export unnecessary","Fragments":["functions"]},{"Key":"unnecessary functions","Fragments":["(see"]},{"Key":"functions (see","Fragments":["your"]},{"Key":"(see your","Fragments":["bob.h"]},{"Key":"your bob.h","Fragments":["header).","file."]},{"Key":"for `for","Fragments":["(auto"]},{"Key":"(auto \u0026","Fragments":["e"]},{"Key":"\u0026 e","Fragments":[":",":"]},{"Key":"sequence)` vs","Fragments":["`for"]},{"Key":"vs `for","Fragments":["(auto"]},{"Key":"latter will","Fragments":["give"]},{"Key":"the sequence.","Fragments":["If","If"]},{"Key":"sequence. If","Fragments":["you","there"]},{"Key":"to update","Fragments":["the"]},{"Key":"update the","Fragments":["element,","iterators,","other"]},{"Key":"the element,","Fragments":["you"]},{"Key":"element, you","Fragments":["want"]},{"Key":"either have","Fragments":["that"]},{"Key":"have that","Fragments":["copy","math","check)"]},{"Key":"that copy","Fragments":["or","forever)."]},{"Key":"copy or","Fragments":["use","modification"]},{"Key":"or use","Fragments":["`for","a","a"]},{"Key":"(auto const","Fragments":["\u0026"]},{"Key":"const \u0026","Fragments":["e","until","not","it"]},{"Key":"sequence)` which","Fragments":["will"]},{"Key":"will get","Fragments":["you","its","an","promoted","in","a","a"]},{"Key":"get you","Fragments":["a","the","started.","going."]},{"Key":"reference. Though","Fragments":["for"]},{"Key":"Though for","Fragments":["small"]},{"Key":"for small","Fragments":["values","exercises.","values","maps,","objects)."]},{"Key":"small values","Fragments":["it","of"]},{"Key":"values it","Fragments":["really"]},{"Key":"really won't","Fragments":["make"]},{"Key":"won't make","Fragments":["a","the"]},{"Key":"of difference","Fragments":["(obviously"]},{"Key":"difference (obviously","Fragments":["large"]},{"Key":"(obviously large","Fragments":["copies"]},{"Key":"large copies","Fragments":["would"]},{"Key":"copies would","Fragments":["be"]},{"Key":"is indeed","Fragments":["in","not","dedicated","rather"]},{"Key":"indeed in","Fragments":["O(n),","the"]},{"Key":"in O(n),","Fragments":["but"]},{"Key":"O(n), but","Fragments":["most"]},{"Key":"but most","Fragments":["other"]},{"Key":"most other","Fragments":["submissions","words"]},{"Key":"submissions are,","Fragments":["too."]},{"Key":"are, too.","Fragments":["I"]},{"Key":"too. I","Fragments":["couldn't","did","agree"]},{"Key":"find one","Fragments":["which"]},{"Key":"one which","Fragments":["isn't","aggressively","works"]},{"Key":"which isn't","Fragments":["and","great.","an","particularly"]},{"Key":"isn't and","Fragments":["I"]},{"Key":"really can't","Fragments":["think"]},{"Key":"can't think","Fragments":["of","of","of","of","of","of","of"]},{"Key":"it not","Fragments":["in","called","being","accessible"]},{"Key":"fact, this","Fragments":["solution"]},{"Key":"solution might","Fragments":["be"]},{"Key":"be even","Fragments":["slower","easier","smaller","better","better"]},{"Key":"even slower","Fragments":["than"]},{"Key":"slower than","Fragments":["most","just","the","copying","the","making","a","`ends_with`"]},{"Key":"than most","Fragments":["others,"]},{"Key":"most others,","Fragments":["because"]},{"Key":"others, because","Fragments":["you"]},{"Key":"you always","Fragments":["traverse","want"]},{"Key":"always traverse","Fragments":["the"]},{"Key":"traverse the","Fragments":["whole","entire","whole","whole","whole","entire","string","string","string"]},{"Key":"whole string,","Fragments":["even"]},{"Key":"string, even","Fragments":["if"]},{"Key":"the decision","Fragments":["what","using"]},{"Key":"decision what","Fragments":["should"]},{"Key":"what should","Fragments":["be"]},{"Key":"be returned","Fragments":["could","-","by"]},{"Key":"returned could","Fragments":["have"]},{"Key":"been made","Fragments":["earlier."]},{"Key":" Removed","Fragments":["private","lambdas.","the","the","unnecessary","the","the","the","private","the","method","the","```using"]},{"Key":"Removed private","Fragments":["functions","methods."]},{"Key":"private functions","Fragments":["from","into"]},{"Key":"functions from","Fragments":["header","the","the","there"]},{"Key":"from header","Fragments":["file","to","file,"]},{"Key":"file (thx","Fragments":["@cynthia)."]},{"Key":"also tried","Fragments":["to","to"]},{"Key":"use some","Fragments":["functions","improvements.","kind","of","library","helper","of","OOP"]},{"Key":"some functions","Fragments":["from","can"]},{"Key":"library (all_of,","Fragments":["any_of)"]},{"Key":"(all_of, any_of)","Fragments":["in"]},{"Key":"any_of) in","Fragments":["conjunction"]},{"Key":"in conjunction","Fragments":["with","with"]},{"Key":"conjunction with","Fragments":["lambdas.","using"]},{"Key":" @roger","Fragments":["okay,"]},{"Key":"@roger okay,","Fragments":["so"]},{"Key":"okay, so","Fragments":["I"]},{"Key":"see where","Fragments":["I","you","the"]},{"Key":"where I","Fragments":["was","store","can","only","wasn't","am","got","was","check","could","break","can","did"]},{"Key":"going wrong","Fragments":["on"]},{"Key":"wrong on","Fragments":["the","this."]},{"Key":"time complexity","Fragments":["thing,","of","is","of"]},{"Key":"complexity thing,","Fragments":["however,"]},{"Key":"thing, however,","Fragments":["I"]},{"Key":"can get","Fragments":["around","a","its","the","the","*UGLY*,","used","away","your","rid","rid","that","a","it","the","away","a","all","challening","a","you","dicey"]},{"Key":"get around","Fragments":["having","this,","to","the","this?"]},{"Key":"around having","Fragments":["to"]},{"Key":"to traverse","Fragments":["the","the","the","the","the","from","the","the"]},{"Key":"To check","Fragments":["if"]},{"Key":"it's empty","Fragments":["you"]},{"Key":"empty you","Fragments":["have"]},{"Key":"whole string","Fragments":["(see","(see","and","lowercase,","is","is","is","when"]},{"Key":"string (see","Fragments":["if","that"]},{"Key":"(see if","Fragments":["all"]},{"Key":"all chars","Fragments":["are","are"]},{"Key":"chars are","Fragments":["empty),","upper","uints","ignored."]},{"Key":"are empty),","Fragments":["to"]},{"Key":"empty), to","Fragments":["see"]},{"Key":"if shouting","Fragments":["you"]},{"Key":"shouting you","Fragments":["have"]},{"Key":"(see that","Fragments":["all"]},{"Key":"that all","Fragments":["chars","this","the","macros","the","operates","but"]},{"Key":"upper case),","Fragments":["the"]},{"Key":"case), the","Fragments":["whatever"]},{"Key":"the whatever","Fragments":["case"]},{"Key":"whatever case","Fragments":["would"]},{"Key":"case would","Fragments":["require"]},{"Key":"require traversing","Fragments":["the"]},{"Key":"traversing the","Fragments":["entire","\"wrong\"","string","string"]},{"Key":"entire string","Fragments":["(involves","because","once","every","up","lower_case","instead"]},{"Key":"string (involves","Fragments":["invalidating"]},{"Key":"(involves invalidating","Fragments":["the"]},{"Key":"invalidating the","Fragments":["previous"]},{"Key":"the previous","Fragments":["two","submission","value","2!","bullet","versions","version.","iteration.","two","three","attempt.","classifications.","robot","implementation.","commit"]},{"Key":"previous two","Fragments":["cases","functional","and"]},{"Key":"two cases","Fragments":["that"]},{"Key":"cases that","Fragments":["require","I","are","aren't"]},{"Key":"that require","Fragments":["traversal).","wstring_ref?),"]},{"Key":"require traversal).","Fragments":["The"]},{"Key":"traversal). The","Fragments":["question"]},{"Key":"The question","Fragments":["case"]},{"Key":"question case","Fragments":["(while"]},{"Key":"case (while","Fragments":["appearing"]},{"Key":"(while appearing","Fragments":["to"]},{"Key":"appearing to","Fragments":["not"]},{"Key":"whole string)","Fragments":["still"]},{"Key":"string) still","Fragments":["needs"]},{"Key":"still needs","Fragments":["to"]},{"Key":"string because","Fragments":["of"]},{"Key":"the shouting","Fragments":["question","check,","case","test"]},{"Key":"shouting question","Fragments":["case."]},{"Key":"The real","Fragments":["question"]},{"Key":"real question","Fragments":["is","is"]},{"Key":"is how","Fragments":["many","I","namespaces","a","a","a","a","the"]},{"Key":"many extra","Fragments":["traversals","variables"]},{"Key":"extra traversals","Fragments":["one"]},{"Key":"traversals one","Fragments":["has"]},{"Key":"one has","Fragments":["to","to","to","all"]},{"Key":"get through","Fragments":["all","this."]},{"Key":"the cases.","Fragments":["The"]},{"Key":"cases. The","Fragments":["way"]},{"Key":"it set","Fragments":["up","up"]},{"Key":"set up","Fragments":["there's","all","before,","your","like","initially","was"]},{"Key":"up there's","Fragments":["just"]},{"Key":"there's just","Fragments":["the"]},{"Key":"just the","Fragments":["single","best","namespace","scores","german","first","first","necessary","content","absence","first","standard"]},{"Key":"the single","Fragments":["traversal","argument","quotes","statement"]},{"Key":"single traversal","Fragments":["of"]},{"Key":"traversal of","Fragments":["every","the"]},{"Key":"of every","Fragments":["character.","higher","word","word"]},{"Key":"every character.","Fragments":["A","MSVC"]},{"Key":"character. A","Fragments":["lot"]},{"Key":"A lot","Fragments":["of","of","of","of"]},{"Key":"the solutions","Fragments":["tended","for","submitted","I"]},{"Key":"solutions tended","Fragments":["to"]},{"Key":"tended to","Fragments":["search"]},{"Key":"to search","Fragments":["for","in","for","for","for","through","around","and"]},{"Key":"search for","Fragments":["non","upper","a","that.","the","the","uppercase","prime","this"]},{"Key":"for non","Fragments":["empty","matches"]},{"Key":"non empty","Fragments":["characters,"]},{"Key":"empty characters,","Fragments":["then"]},{"Key":"characters, then","Fragments":["search","search"]},{"Key":"then search","Fragments":["for","for"]},{"Key":"case characters,","Fragments":["then"]},{"Key":"question mark,","Fragments":["etc...","but","the"]},{"Key":"mark, etc...","Fragments":["which"]},{"Key":"etc... which","Fragments":["leads"]},{"Key":"which leads","Fragments":["to"]},{"Key":"to at","Fragments":["least","least"]},{"Key":"beginning characters","Fragments":["being"]},{"Key":"characters being","Fragments":["traversed","used"]},{"Key":"being traversed","Fragments":["multiple"]},{"Key":"traversed multiple","Fragments":["times."]},{"Key":"multiple times.","Fragments":["(in","Even"]},{"Key":"times. (in","Fragments":["fact"]},{"Key":"(in fact","Fragments":["I","I"]},{"Key":"fact I","Fragments":["had","started","think"]},{"Key":"an earlier","Fragments":["solution","version.","check","version","implementation"]},{"Key":"earlier solution","Fragments":["that"]},{"Key":"solution that","Fragments":["did","is","looks","doesn't","much","directly","could"]},{"Key":"that did","Fragments":["just"]},{"Key":"did just","Fragments":["this)."]},{"Key":" Maybe","Fragments":["I'm","be","anagram::matches","instead","the","not","the","roster","name","total","compute","convert","++i","there's","(honestly","n","use","I","I'm","you","you","there"]},{"Key":"Maybe I'm","Fragments":["missing","missing","asking"]},{"Key":"I'm missing","Fragments":["something","something","something,","any"]},{"Key":"missing something","Fragments":["here","but","though."]},{"Key":"something here","Fragments":["but"]},{"Key":"here but","Fragments":["I'd"]},{"Key":"but I'd","Fragments":["think","want","bet","also","like","recommend","definitely"]},{"Key":"I'd think","Fragments":["the","something"]},{"Key":"the optimal","Fragments":["solution"]},{"Key":"optimal solution","Fragments":["is"]},{"Key":"only traverse","Fragments":["each"]},{"Key":"traverse each","Fragments":["character"]},{"Key":"each character","Fragments":["a","is","(though"]},{"Key":"character a","Fragments":["single"]},{"Key":" Let's","Fragments":["take","take"]},{"Key":"Let's take","Fragments":["this","a"]},{"Key":"this input","Fragments":["as"]},{"Key":"input as","Fragments":["an","output"]},{"Key":"an example:","Fragments":["`\"x"]},{"Key":"example: `\"x","Fragments":["!\"`"]},{"Key":"- check","Fragments":["shouting:","is","is"]},{"Key":"check shouting:","Fragments":["returns"]},{"Key":"shouting: returns","Fragments":["false"]},{"Key":"returns false","Fragments":["after","after","after","when"]},{"Key":"false after","Fragments":["reading","reading","reading"]},{"Key":"reading first","Fragments":["character","character","(last)"]},{"Key":"first character","Fragments":["(not","you","of","is","whether","compared","of"]},{"Key":"character (not","Fragments":["uppercase)"]},{"Key":"check is","Fragments":["all","question:","not","if","if","explicitly","redundant."]},{"Key":"is all","Fragments":["blank:","about.","in","quite","spaces.","capital","that","whitespace","upper"]},{"Key":"all blank:","Fragments":["returns"]},{"Key":"blank: returns","Fragments":["false"]},{"Key":"is question:","Fragments":["traverse"]},{"Key":"question: traverse","Fragments":["the"]},{"Key":"string from","Fragments":["end","left","different","matches"]},{"Key":"from end","Fragments":["to"]},{"Key":"end to","Fragments":["beginning:"]},{"Key":"to beginning:","Fragments":["returns"]},{"Key":"beginning: returns","Fragments":["false"]},{"Key":"first (last)","Fragments":["character"]},{"Key":"- -\u003e","Fragments":["\"Whatever.\""]},{"Key":"-\u003e \"Whatever.\"","Fragments":["(after"]},{"Key":"\"Whatever.\" (after","Fragments":["looking"]},{"Key":"(after looking","Fragments":["at"]},{"Key":"at 3","Fragments":["characters)"]},{"Key":"Of course","Fragments":["this","it","the","suggestions","they"]},{"Key":"is highly","Fragments":["dependent"]},{"Key":"highly dependent","Fragments":["on"]},{"Key":"dependent on","Fragments":["the","whether","a"]},{"Key":"actual input.","Fragments":["I"]},{"Key":"just wanted","Fragments":["to","to","to","to","to"]},{"Key":"show you","Fragments":["that","the"]},{"Key":"you that","Fragments":["performance","(don't","the"]},{"Key":"that performance","Fragments":["evaluation","increase"]},{"Key":"performance evaluation","Fragments":["needs"]},{"Key":"evaluation needs","Fragments":["to"]},{"Key":"done very","Fragments":["carefully."]},{"Key":"very carefully.","Fragments":["What"]},{"Key":"carefully. What","Fragments":["we"]},{"Key":"What we","Fragments":["think"]},{"Key":"we think","Fragments":["is"]},{"Key":"think is","Fragments":["obvious","correct,","the","cleaner:","a","what","reasonable","inefficient,"]},{"Key":"is obvious","Fragments":["when"]},{"Key":"obvious when","Fragments":["we","making"]},{"Key":"when we","Fragments":["look","don't","don't","are","change","find"]},{"Key":"we look","Fragments":["at"]},{"Key":"at it","Fragments":["the","now","now,"]},{"Key":"it the","Fragments":["first","hard","other","most","for-loop-way,","solution"]},{"Key":"time might","Fragments":["be"]},{"Key":"be not","Fragments":["the","as","interested."]},{"Key":"whole truth","Fragments":[";)"]},{"Key":"Very concise,","Fragments":["with","just"]},{"Key":"concise, with","Fragments":["clear"]},{"Key":"with clear","Fragments":["names"]},{"Key":"clear names","Fragments":["for"]},{"Key":"names for","Fragments":["variables."]},{"Key":"for variables.","Fragments":["Really"]},{"Key":"variables. Really","Fragments":["good!"]},{"Key":" ah!","Fragments":["that"]},{"Key":"ah! that","Fragments":["add"]},{"Key":"that add","Fragments":["is"]},{"Key":"add is","Fragments":["clever,"]},{"Key":"is clever,","Fragments":["I"]},{"Key":"clever, I","Fragments":["might"]},{"Key":"go steal","Fragments":["it.."]},{"Key":" `class","Fragments":["bob`"]},{"Key":"`class bob`","Fragments":["is"]},{"Key":"bob` is","Fragments":["being"]},{"Key":"being defined","Fragments":["two"]},{"Key":"defined two","Fragments":["times"]},{"Key":"two times","Fragments":["in","is"]},{"Key":"times in","Fragments":["same","`nucleotide_counts`,","the","your"]},{"Key":"in same","Fragments":["header"]},{"Key":"same header","Fragments":["file","twice"]},{"Key":"file ,","Fragments":["you","which"]},{"Key":", you","Fragments":["can"]},{"Key":"remove 1st","Fragments":["occurence"]},{"Key":"1st occurence","Fragments":["safely."]},{"Key":"for including","Fragments":["but","the","a"]},{"Key":"including but","Fragments":["not"]},{"Key":"not using","Fragments":["*iostream*?","the","regexes","std::placeholders","any","```const","`accumulate`","it","`auto`","classes.","two","if","too"]},{"Key":"don't write","Fragments":["``using","``using","\"using","production"]},{"Key":"write ``using","Fragments":["namespace","...``"]},{"Key":"header files.","Fragments":["If","Only"]},{"Key":"files. If","Fragments":["enforces"]},{"Key":"If enforces","Fragments":["this"]},{"Key":"including your","Fragments":["header.","own","header."]},{"Key":"to pass","Fragments":["arguments","only","you","before.","an","std::less\u003cValueType\u003e().","-\u003e","negative","`strand`s","in","an","`char*`","as","the","`const","const","one","one","a","arguments","was","all","a","the","the","one","by","the","all","the","each","but","in","in","a","in","the","in"]},{"Key":"pass arguments","Fragments":["that","as"]},{"Key":"arguments that","Fragments":["might","modify","they"]},{"Key":"be expensive","Fragments":["to","if"]},{"Key":"copy by","Fragments":["const","using","reference"]},{"Key":"reference (``const","Fragments":["std::string\u0026"]},{"Key":"(``const std::string\u0026","Fragments":["words``)."]},{"Key":"The body","Fragments":["of","of"]},{"Key":"function *words*","Fragments":["is"]},{"Key":"*words* is","Fragments":["47"]},{"Key":"is 47","Fragments":["lines"]},{"Key":"47 lines","Fragments":["long."]},{"Key":"lines long.","Fragments":["You"]},{"Key":"long. You","Fragments":["might"]},{"Key":"might consider","Fragments":["refactoring","returning","declaring","using","declaring"]},{"Key":"consider refactoring","Fragments":["parts"]},{"Key":"refactoring parts","Fragments":["of"]},{"Key":"into subfunctions","Fragments":["to"]},{"Key":"subfunctions to","Fragments":["structure"]},{"Key":"to structure","Fragments":["and","the"]},{"Key":"structure and","Fragments":["clarify"]},{"Key":"and clarify","Fragments":["your"]},{"Key":"clarify your","Fragments":["approach."]},{"Key":"My first","Fragments":["attempt","code","guess","regex","attempt","exercism.","experience"]},{"Key":"first attempt","Fragments":["of","to"]},{"Key":"attempt of","Fragments":["writing"]},{"Key":"writing functional","Fragments":["C++11"]},{"Key":"functional C++11","Fragments":["code."]},{"Key":"C++11 code.","Fragments":["Still"]},{"Key":"code. Still","Fragments":["looks"]},{"Key":"bit odd","Fragments":["to","but","having","to"]},{"Key":"odd to","Fragments":["me.","me.","someone","me"]},{"Key":"for debugging.","Fragments":["You're"]},{"Key":"debugging. You're","Fragments":["right"]},{"Key":"You're right","Fragments":["that","about","about","that"]},{"Key":"right that","Fragments":["it's","that","the","string","it"]},{"Key":"it's no","Fragments":["longer"]},{"Key":"I moved","Fragments":["`using","the","```using","```getChunk```","`using","everything","everything"]},{"Key":"moved `using","Fragments":["namespace","namespace"]},{"Key":"`using namespace","Fragments":["std;`","std`","std;`)","std;`","std;`","...`","std`","std`","std;`","std`","std`.","std`","std`","std`","std`)","std`"]},{"Key":"namespace std;`","Fragments":["inside","to","in","can"]},{"Key":"std;` inside","Fragments":["the"]},{"Key":"the `word_count`","Fragments":["namespace,"]},{"Key":"`word_count` namespace,","Fragments":["then"]},{"Key":"namespace, then","Fragments":["it"]},{"Key":"it wouldn't","Fragments":["affect","work","fit","be","link","link"]},{"Key":"wouldn't affect","Fragments":["anybody"]},{"Key":"affect anybody","Fragments":["else,"]},{"Key":"anybody else,","Fragments":["right?"]},{"Key":"Are strings","Fragments":["expensive"]},{"Key":"strings expensive","Fragments":["to"]},{"Key":"to copy?","Fragments":["Or"]},{"Key":"copy? Or","Fragments":["is"]},{"Key":"is it","Fragments":["because","not","just","possible","waiting","waiting","good","best","good","good","better","enough","an","makes","isn't","possible","idiomatic"]},{"Key":"function could","Fragments":["conceivably","also","be","be","be","be"]},{"Key":"could conceivably","Fragments":["be"]},{"Key":"conceivably be","Fragments":["called"]},{"Key":"be called","Fragments":["with","more","will","_vstring","on","with","to","at","by","from","with","on","`isAllCaps`","with","externally"]},{"Key":"very very","Fragments":["long","long,"]},{"Key":"very long","Fragments":["string?","strings.","time,","and","strings...","strings.","and","will"]},{"Key":"I agree.","Fragments":["Refactoring"]},{"Key":"agree. Refactoring","Fragments":["would"]},{"Key":"Refactoring would","Fragments":["be"]},{"Key":" Putting","Fragments":["``using","``typedef"]},{"Key":"Putting ``using","Fragments":["namespaces"]},{"Key":"``using namespaces","Fragments":["std;``"]},{"Key":"namespaces std;``","Fragments":["inside"]},{"Key":"std;`` inside","Fragments":["a"]},{"Key":"inside a","Fragments":["namespace","class","namespace","more","template","namespace","namespace","nameless","class","namespace"]},{"Key":"namespace would","Fragments":["solve","help"]},{"Key":"would solve","Fragments":["half"]},{"Key":"solve half","Fragments":["of"]},{"Key":"half of","Fragments":["the","all","their","the"]},{"Key":"the problem,","Fragments":["but","all","delegating"]},{"Key":"in more","Fragments":["complex","code,","detail.","complicated","complex"]},{"Key":"complex headers","Fragments":["this"]},{"Key":"headers this","Fragments":["might"]},{"Key":"might still","Fragments":["lead"]},{"Key":"still lead","Fragments":["to"]},{"Key":"to bugs","Fragments":["that"]},{"Key":"bugs that","Fragments":["are"]},{"Key":"are hard","Fragments":["to","to","to"]},{"Key":"to find.","Fragments":["For","For"]},{"Key":"find. For","Fragments":["more","my"]},{"Key":"For more","Fragments":["on","info:"]},{"Key":"more on","Fragments":["this"]},{"Key":"on this","Fragments":["topic","site!!","machine","one:","a","one.","iteration,","sort","solution,","that","one.","simple","code.","crap?","one.","exercise","one","one.","because","one.","total,"]},{"Key":"this topic","Fragments":["see","in"]},{"Key":"topic see","Fragments":["the"]},{"Key":"the experts","Fragments":["at"]},{"Key":"experts at","Fragments":["[gotw.ca](http://www.gotw.ca/gotw/053.htm)"]},{"Key":"at [gotw.ca](http://www.gotw.ca/gotw/053.htm)","Fragments":["and"]},{"Key":"[gotw.ca](http://www.gotw.ca/gotw/053.htm) and","Fragments":["[isocpp.org](https://isocpp.org/wiki/faq/coding-standards#using-namespace-std)"]},{"Key":"and [isocpp.org](https://isocpp.org/wiki/faq/coding-standards#using-namespace-std)","Fragments":["or"]},{"Key":"[isocpp.org](https://isocpp.org/wiki/faq/coding-standards#using-namespace-std) or","Fragments":["the"]},{"Key":"the [C++","Fragments":["Coding"]},{"Key":"[C++ Coding","Fragments":["Standards","Standards"]},{"Key":"Coding Standards","Fragments":["§59](http://www.gotw.ca/publications/c++cs.htm).","§25](http://www.gotw.ca/publications/c++cs.htm)):","§8](http://www.gotw.ca/publications/c++cs.htm)"]},{"Key":"If strings","Fragments":["are"]},{"Key":"strings are","Fragments":["*too*","completetly","different.","the","not","static","stored","then","templates","moveable,","constant."]},{"Key":"are *too*","Fragments":["expensive"]},{"Key":"*too* expensive","Fragments":["to"]},{"Key":"copy can","Fragments":["only"]},{"Key":"be answered","Fragments":["after"]},{"Key":"answered after","Fragments":["profiling."]},{"Key":"after profiling.","Fragments":["In"]},{"Key":"profiling. In","Fragments":["most"]},{"Key":"In most","Fragments":["small","cases"]},{"Key":"most small","Fragments":["or"]},{"Key":"small or","Fragments":["middle"]},{"Key":"or middle","Fragments":["size"]},{"Key":"middle size","Fragments":["applications"]},{"Key":"size applications","Fragments":["this"]},{"Key":"applications this","Fragments":["is"]},{"Key":"the bottleneck.","Fragments":["(In"]},{"Key":"bottleneck. (In","Fragments":["large"]},{"Key":"(In large","Fragments":["applications"]},{"Key":"large applications","Fragments":["std::string"]},{"Key":"applications std::string","Fragments":["might"]},{"Key":"std::string might","Fragments":["be"]},{"Key":"be responsible","Fragments":["for"]},{"Key":"responsible for","Fragments":["nearly","only"]},{"Key":"for nearly","Fragments":["half"]},{"Key":"nearly half","Fragments":["of"]},{"Key":"all allocations,","Fragments":["see"]},{"Key":"allocations, see","Fragments":["[this"]},{"Key":"see [this","Fragments":["post"]},{"Key":"[this post","Fragments":["on"]},{"Key":"post on","Fragments":["chromium-dev](https://groups.google.com/a/chromium.org/forum/#!msg/chromium-dev/EUqoIz2iFU4/kPZ5ZK0K3gEJ)."]},{"Key":"There just","Fragments":["is"]},{"Key":"just is","Fragments":["no"]},{"Key":"no reason","Fragments":["not","to","why","to","to","other","to"]},{"Key":"reason not","Fragments":["to","to","to"]},{"Key":"follow common","Fragments":["practices"]},{"Key":"common practices","Fragments":["that","are"]},{"Key":"practices that","Fragments":["avoid"]},{"Key":"that avoid","Fragments":["these"]},{"Key":"avoid these","Fragments":["problems","things"]},{"Key":"these problems","Fragments":["from","is"]},{"Key":"problems from","Fragments":["the"]},{"Key":"beginning ([C++","Fragments":["Coding"]},{"Key":"([C++ Coding","Fragments":["Standards"]},{"Key":"* Always","Fragments":["**const**-qualify"]},{"Key":"Always **const**-qualify","Fragments":["all"]},{"Key":"**const**-qualify all","Fragments":["pointers"]},{"Key":"all pointers","Fragments":["of"]},{"Key":"pointers of","Fragments":["references"]},{"Key":"of references","Fragments":["to"]},{"Key":"to input-only","Fragments":["parameters."]},{"Key":"* Prefer","Fragments":["taking","taking","passing","passing"]},{"Key":"Prefer taking","Fragments":["inputs","inputs"]},{"Key":"taking inputs","Fragments":["of","of"]},{"Key":"inputs of","Fragments":["primitive","other","bigger"]},{"Key":"of primitive","Fragments":["types"]},{"Key":"primitive types","Fragments":["(e.g.,"]},{"Key":"types (e.g.,","Fragments":["**char**,"]},{"Key":"(e.g., **char**,","Fragments":["**float**)"]},{"Key":"**char**, **float**)","Fragments":["and"]},{"Key":"**float**) and","Fragments":["value"]},{"Key":"value objects","Fragments":["that"]},{"Key":"are cheap","Fragments":["to"]},{"Key":"cheap to","Fragments":["copy"]},{"Key":"copy (e.g.,","Fragments":["**Point**,"]},{"Key":"(e.g., **Point**,","Fragments":["**complex\u0026lt;float\u0026gt;**)"]},{"Key":"**Point**, **complex\u0026lt;float\u0026gt;**)","Fragments":["by"]},{"Key":"**complex\u0026lt;float\u0026gt;**) by","Fragments":["value."]},{"Key":"of other","Fragments":["user-defined","functions.","things.","errors.","people"]},{"Key":"other user-defined","Fragments":["types"]},{"Key":"user-defined types","Fragments":["by"]},{"Key":"types by","Fragments":["reference"]},{"Key":"* Consider","Fragments":["pass-by-value"]},{"Key":"Consider pass-by-value","Fragments":["instead"]},{"Key":"pass-by-value instead","Fragments":["of"]},{"Key":"of reference","Fragments":["if"]},{"Key":"reference if","Fragments":["the","the","in"]},{"Key":"function requires","Fragments":["a"]},{"Key":"requires a","Fragments":["copy","total","heap","new","different","bunch","domain_error"]},{"Key":"of its","Fragments":["argument.","own.","contents,","compactness.","length","translation","string","algorithm","domain."]},{"Key":"Prefer passing","Fragments":["[output","[output"]},{"Key":"passing [output","Fragments":["or","or"]},{"Key":"[output or","Fragments":["input/output","input/output"]},{"Key":"or input/output","Fragments":["parameters]","parameters]"]},{"Key":"input/output parameters]","Fragments":["by","by"]},{"Key":"parameters] by","Fragments":["(smart)","reference"]},{"Key":"by (smart)","Fragments":["pointer"]},{"Key":"(smart) pointer","Fragments":["if"]},{"Key":"pointer if","Fragments":["the"]},{"Key":"argument is","Fragments":["optional","required","signed","int","optional?"]},{"Key":"is optional","Fragments":["([...])"]},{"Key":"optional ([...])","Fragments":["or"]},{"Key":"([...]) or","Fragments":["if"]},{"Key":"or if","Fragments":["the","you","it","you","you","this","you","bob","it","my","there's","they","I","`0"]},{"Key":"function stores","Fragments":["a"]},{"Key":"stores a","Fragments":["copy"]},{"Key":"the pointer","Fragments":["or","to","overloads","overhead"]},{"Key":"pointer or","Fragments":["otherwise"]},{"Key":"or otherwise","Fragments":["manipulates","affect","obvious,"]},{"Key":"otherwise manipulates","Fragments":["ownership"]},{"Key":"manipulates ownership","Fragments":["of"]},{"Key":"ownership of","Fragments":["the"]},{"Key":"is required","Fragments":["and","to","to","in"]},{"Key":"required and","Fragments":["the","this","no"]},{"Key":"function won't","Fragments":["store"]},{"Key":"won't store","Fragments":["a"]},{"Key":"store a","Fragments":["pointer","lot"]},{"Key":"a pointer","Fragments":["to","into","and","type","(std::string::iterator"]},{"Key":"pointer to","Fragments":["it","transfer","see"]},{"Key":"to it","Fragments":["or","being","willy-nilly,","(unless","in","was","so","to"]},{"Key":"it or","Fragments":["otherwise","not.","do","not,"]},{"Key":"otherwise affect","Fragments":["its"]},{"Key":"affect its","Fragments":["ownership."]},{"Key":"use C-style","Fragments":["varargs."]},{"Key":" Or,","Fragments":["summarized:"]},{"Key":"Or, summarized:","Fragments":["\"Don't"]},{"Key":"summarized: \"Don't","Fragments":["pessimize"]},{"Key":"\"Don't pessimize","Fragments":["prematurely\"."]},{"Key":"pessimize prematurely\".","Fragments":["[C++"]},{"Key":"prematurely\". [C++","Fragments":["Coding"]},{"Key":"Oh, because","Fragments":["other"]},{"Key":"because other","Fragments":["files"]},{"Key":"other files","Fragments":["might","where"]},{"Key":"files might","Fragments":["be","not"]},{"Key":"be using","Fragments":["the","a","-std=c++1y","std::map","memory"]},{"Key":"same namespace?","Fragments":["So"]},{"Key":"namespace? So","Fragments":["the"]},{"Key":"So the","Fragments":["header","more","increase","conclusion","first","code","real","main","final","`erase`","constructor","string"]},{"Key":"file could","Fragments":["still"]},{"Key":"could still","Fragments":["mess","be"]},{"Key":"still mess","Fragments":["them"]},{"Key":"mess them","Fragments":["up,"]},{"Key":"them up,","Fragments":["in"]},{"Key":"up, in","Fragments":["that"]},{"Key":"that case?","Fragments":["Good"]},{"Key":"case? Good","Fragments":["point."]},{"Key":"how it","Fragments":["could","worked","makes","allows"]},{"Key":"problem in","Fragments":["large","C++.","each","isSilence()","future"]},{"Key":"in large","Fragments":["applications.","projects."]},{"Key":"large applications.","Fragments":["I'm"]},{"Key":"applications. I'm","Fragments":["sure"]},{"Key":"I'm sure","Fragments":["that","there's","someone","there","you've","there","there's","there","it"]},{"Key":"that common","Fragments":["practices"]},{"Key":"practices are","Fragments":["such"]},{"Key":"are such","Fragments":["for"]},{"Key":"such for","Fragments":["a"]},{"Key":"good reason.","Fragments":["Thanks"]},{"Key":"reason. Thanks","Fragments":["for"]},{"Key":" fiddling","Fragments":["with"]},{"Key":"fiddling with","Fragments":["naming"]},{"Key":"think iteration","Fragments":["1","12"]},{"Key":"iteration 1","Fragments":["is","and"]},{"Key":"1 is","Fragments":["more","promoted","probably"]},{"Key":"but 3","Fragments":["is"]},{"Key":"3 is","Fragments":["better"]},{"Key":" very","Fragments":["nice","nice"]},{"Key":"I liked","Fragments":["this","your","the","the","that","that"]},{"Key":"liked this","Fragments":["a"]},{"Key":"The first","Fragments":["impression","line","is","is","and","time,","part,","is","paragraph","cycle"]},{"Key":"first impression","Fragments":["I"]},{"Key":"impression I","Fragments":["got"]},{"Key":"got from","Fragments":["looking"]},{"Key":"from looking","Fragments":["at","at","at"]},{"Key":"a tad","Fragments":["bit"]},{"Key":"tad bit","Fragments":["long"]},{"Key":"bit long","Fragments":["and"]},{"Key":"long and","Fragments":["can","annoying","gave","one","very","could","\"contains_alpha\"","\"contains_alpha\"","not","very"]},{"Key":"be broken","Fragments":["apart."]},{"Key":"broken apart.","Fragments":["That"]},{"Key":"apart. That","Fragments":["will"]},{"Key":"That will","Fragments":["surely","indicate"]},{"Key":"will surely","Fragments":["make"]},{"Key":"surely make","Fragments":["it"]},{"Key":"``using ...``","Fragments":["in","in"]},{"Key":"...`` in","Fragments":["your","your"]},{"Key":"your headers,","Fragments":["at","at"]},{"Key":"headers, at","Fragments":["least","least"]},{"Key":"least not","Fragments":["in","in","clearly,","by","with","when","more","if"]},{"Key":"global namespace.","Fragments":["It","It","Consider"]},{"Key":"namespace. It","Fragments":["enforces","enforces"]},{"Key":"decision on","Fragments":["everyone","everyone"]},{"Key":"on everyone","Fragments":["who","who"]},{"Key":"A ``protected``","Fragments":["section"]},{"Key":"``protected`` section","Fragments":["is"]},{"Key":"section is","Fragments":["mainly"]},{"Key":"mainly an","Fragments":["interface"]},{"Key":"an interface","Fragments":["for","declaration.","before,"]},{"Key":"interface for","Fragments":["deriving","a"]},{"Key":"for deriving","Fragments":["classes."]},{"Key":"deriving classes.","Fragments":["So"]},{"Key":"classes. So","Fragments":["you"]},{"Key":"test and","Fragments":["support","iterate!","can","call","I"]},{"Key":"this interface","Fragments":["to"]},{"Key":"interface to","Fragments":["not"]},{"Key":"not risk","Fragments":["breaking"]},{"Key":"risk breaking","Fragments":["someone's"]},{"Key":"breaking someone's","Fragments":["code."]},{"Key":"someone's code.","Fragments":["In"]},{"Key":"code. In","Fragments":["most"]},{"Key":"most cases","Fragments":["you","I'd","I'd","except"]},{"Key":"cases you","Fragments":["would","wouldn't","are"]},{"Key":"would want","Fragments":["a","to","to","to"]},{"Key":"want a","Fragments":["``private``","const","reference","reference"]},{"Key":"a ``private``","Fragments":["section"]},{"Key":"``private`` section","Fragments":["instead."]},{"Key":" Ahh","Fragments":["I","I"]},{"Key":"Ahh I","Fragments":["have","see,"]},{"Key":"have to!","Fragments":["Thanks"]},{"Key":"to! Thanks","Fragments":["Sieben,"]},{"Key":"Thanks Sieben,","Fragments":["If"]},{"Key":"Sieben, If","Fragments":["you'd"]},{"Key":"If you'd","Fragments":["asked","like"]},{"Key":"you'd asked","Fragments":["me,"]},{"Key":"asked me,","Fragments":["I"]},{"Key":"me, I","Fragments":["would","had","just"]},{"Key":"have believed","Fragments":["all"]},{"Key":"believed all","Fragments":["those"]},{"Key":"all those","Fragments":["using","response"]},{"Key":"those using","Fragments":["statements"]},{"Key":"using statements","Fragments":["were","are","inside","only","in","are."]},{"Key":"statements were","Fragments":["in"]},{"Key":"were in","Fragments":["a","the","an"]},{"Key":"namespace, which","Fragments":["is"]},{"Key":"is where","Fragments":["they"]},{"Key":"where they","Fragments":["would","are","differ","are","are","don't","really","line"]},{"Key":"they would","Fragments":["have","be","be","be","not","copy."]},{"Key":"have started,","Fragments":["I"]},{"Key":"started, I","Fragments":["must"]},{"Key":"I must","Fragments":["have","have","nitpick!"]},{"Key":"must have","Fragments":["peeled","typed","the","had"]},{"Key":"have peeled","Fragments":["it"]},{"Key":"peeled it","Fragments":["away"]},{"Key":"it away","Fragments":["without"]},{"Key":"away without","Fragments":["thinking"]},{"Key":"without thinking","Fragments":["about","about"]},{"Key":"saw the","Fragments":["test","solutions"]},{"Key":" same","Fragments":["story"]},{"Key":"same story","Fragments":["with"]},{"Key":"story with","Fragments":["the"]},{"Key":"the protected,","Fragments":["I'm"]},{"Key":"protected, I'm","Fragments":["quite"]},{"Key":"I'm quite","Fragments":["surprised","newbie"]},{"Key":"quite surprised","Fragments":["to"]},{"Key":"surprised to","Fragments":["see","see"]},{"Key":"that there,","Fragments":["I"]},{"Key":"there, I","Fragments":["must"]},{"Key":"have typed","Fragments":["it."]},{"Key":"And in","Fragments":["both","that","case"]},{"Key":"both cases","Fragments":["I"]},{"Key":"cases I","Fragments":["looked","decided"]},{"Key":"I looked","Fragments":["and","into","at","at","at","through"]},{"Key":"looked and","Fragments":["updated"]},{"Key":"and updated","Fragments":["this","my","the"]},{"Key":"updated this","Fragments":["file"]},{"Key":"this file","Fragments":["several","into","compile?"]},{"Key":"file several","Fragments":["times"]},{"Key":"several times","Fragments":["believing"]},{"Key":"times believing","Fragments":["I"]},{"Key":"believing I","Fragments":["knew"]},{"Key":"I knew","Fragments":["what","you","given","it","about"]},{"Key":"knew what","Fragments":["was"]},{"Key":"was there","Fragments":["and"]},{"Key":"there and","Fragments":["never","not"]},{"Key":"and never","Fragments":["saw","used."]},{"Key":"never saw","Fragments":["it."]},{"Key":"lines 11","Fragments":["to","to"]},{"Key":"11 to","Fragments":["13?","12","`currentWord.append(1,"]},{"Key":"Using regex_token_iterator","Fragments":["instead"]},{"Key":"regex_token_iterator instead","Fragments":["of"]},{"Key":"of regex_iterator","Fragments":["and"]},{"Key":"regex_iterator and","Fragments":["got"]},{"Key":"and got","Fragments":["rid","this","all","it"]},{"Key":"see what","Fragments":["you're","string","a","it","i","I","you","the","each"]},{"Key":"you're saying","Fragments":["about","about"]},{"Key":"saying about","Fragments":["the","choosing"]},{"Key":"tests. I","Fragments":["took","usually","know","removed","like"]},{"Key":"took a","Fragments":["look","closer","look","couple","string","few"]},{"Key":"the github","Fragments":["history","repo"]},{"Key":"github history","Fragments":["for"]},{"Key":"history for","Fragments":["this"]},{"Key":"this exercise","Fragments":["and","should","it","in","as","i","does","with","three","in",":)","and","a","it","are","is","was","to","too","we're","for","using","way"]},{"Key":"exercise and","Fragments":["it","declaring"]},{"Key":"appears that","Fragments":["between","this"]},{"Key":"that between","Fragments":["the"]},{"Key":"between the","Fragments":["time","const","find","first","first","two.","begin"]},{"Key":"time I","Fragments":["submitted","spent","just","wrote","need","called","needed"]},{"Key":"submitted and","Fragments":["the"]},{"Key":"two months","Fragments":["later"]},{"Key":"months later","Fragments":["that"]},{"Key":"later that","Fragments":["you"]},{"Key":"you came","Fragments":["in","down","up"]},{"Key":"came in","Fragments":["and"]},{"Key":"and commented,","Fragments":["the"]},{"Key":"commented, the","Fragments":["tests"]},{"Key":"tests have","Fragments":["been","changed."]},{"Key":"been redone","Fragments":["extensively"]},{"Key":"redone extensively","Fragments":["and"]},{"Key":"extensively and","Fragments":["it"]},{"Key":"will no","Fragments":["longer"]},{"Key":"longer pass","Fragments":["those"]},{"Key":"pass those","Fragments":["tests."]},{"Key":"those tests.","Fragments":["That's"]},{"Key":"tests. That's","Fragments":["why"]},{"Key":"That's why","Fragments":["the","it's","I","I","boost::trim","such","saysNothing","you'd","I"]},{"Key":"why the","Fragments":["difference.","hell","whole","roster"]},{"Key":"Since there","Fragments":["are"]},{"Key":"so few","Fragments":["working"]},{"Key":"few working","Fragments":["on"]},{"Key":"working on","Fragments":["CPP,","a","it.","both","the","derivative","the","allowing","this","an"]},{"Key":"on CPP,","Fragments":["I"]},{"Key":"CPP, I","Fragments":["think"]},{"Key":"think I'm","Fragments":["going","having","using"]},{"Key":"try out","Fragments":["a"]},{"Key":"out a","Fragments":["new","window)","specific","lot","working","separate","range"]},{"Key":"new language","Fragments":["to"]},{"Key":"language to","Fragments":["practice","parse,"]},{"Key":"to practice","Fragments":["with."]},{"Key":"practice with.","Fragments":["Thanks"]},{"Key":"with. Thanks","Fragments":["for"]},{"Key":"for taking","Fragments":["the"]},{"Key":"The full","Fragments":["song"]},{"Key":"full song","Fragments":["is"]},{"Key":"song is","Fragments":["stored"]},{"Key":"is stored","Fragments":["in","as","and","in"]},{"Key":"stored in","Fragments":["a","the","a","the"]},{"Key":"a file","Fragments":["called","bob.h,"]},{"Key":"file called","Fragments":["\"song.txt\""]},{"Key":"called \"song.txt\"","Fragments":["in"]},{"Key":"\"song.txt\" in","Fragments":["upper"]},{"Key":"in upper","Fragments":["directory","case,","case."]},{"Key":"upper directory","Fragments":["level."]},{"Key":"is loaded","Fragments":["by"]},{"Key":"loaded by","Fragments":["the"]},{"Key":"the Song","Fragments":["class."]},{"Key":" Have","Fragments":["you","you","you","you","learned","you","you","you","you","you","you","some","you","you"]},{"Key":"Have you","Fragments":["considered","considered","considered","considered","considered","thought","considered","considered","tried","tried","tried","considered","considered","considered","actually","taken","noticed","noticed","included","considered","considered"]},{"Key":"you considered","Fragments":["using","std::vector\u003cstd::pair\u003cstd::string,std::string\u003e","doing","a","using","iterating","moving","shifting","using","std::is_permutation?","using","using","std::is_permutation()?","iterators","using","using"]},{"Key":"considered using","Fragments":["`UINT64_MAX`","`UINT64_MAX`","`regex`","standard","boost::tokenizer?","regular","a","the","c++11","defines"]},{"Key":"using `UINT64_MAX`","Fragments":["instead","instead"]},{"Key":"`UINT64_MAX` instead","Fragments":["of","of"]},{"Key":"of `(unsigned","Fragments":["long"]},{"Key":"`(unsigned long","Fragments":["long)0xFFFFFFFFFFFFFFFF`?"]},{"Key":"Yes, check","Fragments":["e.g."]},{"Key":"check e.g.","Fragments":["[my"]},{"Key":"e.g. [my","Fragments":["submission](http://exercism.io/submissions/82745cc83a214f16a2fbc3caddc59141)"]},{"Key":"[my submission](http://exercism.io/submissions/82745cc83a214f16a2fbc3caddc59141)","Fragments":["for"]},{"Key":"submission](http://exercism.io/submissions/82745cc83a214f16a2fbc3caddc59141) for","Fragments":["this"]},{"Key":"need boost-lib","Fragments":["for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for","for"]},{"Key":"boost-lib for","Fragments":["such","such","such","such","such","such","such","this","such","this","this","this","this","such","such","such","such"]},{"Key":"for such","Fragments":["a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a"]},{"Key":"such a","Fragments":["simple","simple","simple","simple","simple","simple","stupid","small","minor","requirement,","simple","simple","simple","simple","simple","solution?","simple","simple","thing","simple,","thing","dependency.","big","degree","regex","text,","case,","string","case,","simple","small","small"]},{"Key":"simple task?","Fragments":["This","This","This","This","This","This","This","There","This","This","This","This"]},{"Key":"task? This","Fragments":["exercise","exercise","exercise","exercise","exercise","exercise","exercise","exercise","exercise","exercise","exercise"]},{"Key":"exercise can","Fragments":["be","be","be","be","be","be","be","be","be","be","be"]},{"Key":"be solved","Fragments":["only","only","only","only","only","only","only","only","only","only","only","both","in"]},{"Key":"solved only","Fragments":["by","by","by","by","by","by","by","by","by","by","by"]},{"Key":"only by","Fragments":["using","using","using","using","using","using","using","using","using","using","using","luck."]},{"Key":"using stuff","Fragments":["from","from","from","from","from","from","from","from","from","from","from"]},{"Key":"stuff from","Fragments":["`std`","`std`","`std`","`std`","`std`","`std`","`std`","`std`","`std`","`std`","`std`","the","stl."]},{"Key":"from `std`","Fragments":["easily.","easily.","easily.","easily.","easily.","easily.","easily.","easily.","easily.","easily.","easily."]},{"Key":"this that","Fragments":["doesn't","I","you","I"]},{"Key":"doesn't require","Fragments":["knowledge","to","typing"]},{"Key":"require knowledge","Fragments":["of"]},{"Key":"knowledge of","Fragments":["how","the","C++","map's","`boost::tokenizer`.","the","C"]},{"Key":"of how","Fragments":["many","to","big","many","I'm","I","I","you","we","to","to","I","I","I","I","I","I","the","the","to","I'm"]},{"Key":"many seconds","Fragments":["are"]},{"Key":"seconds are","Fragments":["in"]},{"Key":"a day","Fragments":[";)"]},{"Key":" *algorithm*","Fragments":["is"]},{"Key":"*algorithm* is","Fragments":["included"]},{"Key":"included but","Fragments":["not"]},{"Key":"Would fail","Fragments":["test"]},{"Key":"fail test","Fragments":["case","by"]},{"Key":"case `BOOST_EQUAL(triangle::illegal,","Fragments":["triangle::kind(-5,"]},{"Key":"`BOOST_EQUAL(triangle::illegal, triangle::kind(-5,","Fragments":["-5,"]},{"Key":"triangle::kind(-5, -5,","Fragments":["-5));`"]},{"Key":"same way","Fragments":["*!=*","**!=**","**!=**","**!=**","**!=**","**!=**","and","and","as","as","you"]},{"Key":"way *!=*","Fragments":["is"]},{"Key":"*!=* is","Fragments":["based"]},{"Key":"is based","Fragments":["on","on","on","on","on","on"]},{"Key":"on *==*,","Fragments":["**minus**"]},{"Key":"*==*, **minus**","Fragments":["can"]},{"Key":"**minus** can","Fragments":["be","be","be","be","be","be","be","be","be"]},{"Key":"be based","Fragments":["on","on","on","on","on","on","on","on","on","on","on","on","on","on"]},{"Key":"way **!=**","Fragments":["is","is","is","is","is"]},{"Key":"**!=** is","Fragments":["based","based","based","based","based"]},{"Key":"on **==**,","Fragments":["**minus**","**minus**","**minus**","**minus**","**minus**"]},{"Key":"**==**, **minus**","Fragments":["can","can","can","can","can"]},{"Key":"on **plus**","Fragments":["(or","(or","(or","(or","(or"]},{"Key":"**plus** (or","Fragments":["vice","vice","vice","vice","vice"]},{"Key":"(or vice","Fragments":["versa)","versa)","versa)","versa)","versa)"]},{"Key":" time","Fragments":["isn't","isn't","isn't","isn't","isn't","isn't","isn't","isn't"]},{"Key":"time isn't","Fragments":["validated","validated","validated","validated","validated","validated","validated","validated"]},{"Key":"isn't validated","Fragments":["during","during","during","during","during","during","during","correctly"]},{"Key":"validated during","Fragments":["construction","construction","construction","construction","construction","construction","construction"]},{"Key":" `BOOST_CHECK_EQUAL(\"00:10\",","Fragments":["clock::at(24,10))`","clock::at(24,10))`","clock::at(24,10))`","clock::at(24,10))`"]},{"Key":"`BOOST_CHECK_EQUAL(\"00:10\", clock::at(24,10))`","Fragments":["would","would","would","would"]},{"Key":"clock::at(24,10))` would","Fragments":["fail","fail","fail","fail"]},{"Key":" `BOOST_CHECK_EQUAL(\"23:50\",","Fragments":["clock::at(24,-10))`","clock::at(24,-10))`","clock::at(24,-10))`","clock::at(24,-10))`","clock::at(24,-10))`"]},{"Key":"`BOOST_CHECK_EQUAL(\"23:50\", clock::at(24,-10))`","Fragments":["would","would","would","would","would"]},{"Key":"clock::at(24,-10))` would","Fragments":["fail","fail","fail","fail","fail"]},{"Key":" BOOST_CHECK_EQUAL(\"00:10\",","Fragments":["clock::at(24,10))","clock::at(24,10))","clock::at(24,10))"]},{"Key":"BOOST_CHECK_EQUAL(\"00:10\", clock::at(24,10))","Fragments":["would","would","would"]},{"Key":"clock::at(24,10)) would","Fragments":["fail","fail","fail"]},{"Key":" BOOST_CHECK_EQUAL(\"23:50\",","Fragments":["clock::at(24,-10))","clock::at(24,-10))","clock::at(24,-10))"]},{"Key":"BOOST_CHECK_EQUAL(\"23:50\", clock::at(24,-10))","Fragments":["would","would","would"]},{"Key":"clock::at(24,-10)) would","Fragments":["fail","fail","fail"]},{"Key":" **!=**","Fragments":["can","can"]},{"Key":"**!=** can","Fragments":["be","be"]},{"Key":"on **==**","Fragments":["to","to"]},{"Key":"**==** to","Fragments":["reduce","reduce"]},{"Key":" **minus**","Fragments":["can","can","can"]},{"Key":" **constructor**","Fragments":["should"]},{"Key":"**constructor** should","Fragments":["be"]},{"Key":" date","Fragments":["members"]},{"Key":"date members","Fragments":["shouldn't"]},{"Key":"members shouldn't","Fragments":["be"]},{"Key":"shouldn't be","Fragments":["public.","required","so","passing","an","including","too","numeric","any","exported","able"]},{"Key":"validated correctly","Fragments":["during"]},{"Key":"correctly during","Fragments":["construction"]},{"Key":" `BOOST_CHECK_EQUAL(\"01:00\",","Fragments":["clock::at(25,"]},{"Key":"`BOOST_CHECK_EQUAL(\"01:00\", clock::at(25,","Fragments":["0))`"]},{"Key":"clock::at(25, 0))`","Fragments":["would"]},{"Key":"0))` would","Fragments":["fail"]},{"Key":"Nice validation","Fragments":["of"]},{"Key":"validation of","Fragments":["arguments!"]},{"Key":" minus","Fragments":["can","can","could"]},{"Key":"minus can","Fragments":["be","be"]},{"Key":"on plus","Fragments":["to"]},{"Key":"plus to","Fragments":["reduce"]},{"Key":"reduce code","Fragments":["duplication"]},{"Key":" constructor","Fragments":["arguments","/"]},{"Key":"constructor arguments","Fragments":["are"]},{"Key":"arguments are","Fragments":["not","good."]},{"Key":"constructor /","Fragments":["at"]},{"Key":"/ at","Fragments":["arguments"]},{"Key":"at arguments","Fragments":["not"]},{"Key":"arguments not","Fragments":["validated"]},{"Key":"not validated","Fragments":["or","(consider"]},{"Key":"validated or","Fragments":["dealt"]},{"Key":"or dealt","Fragments":["with"]},{"Key":" !=","Fragments":["should"]},{"Key":"!= should","Fragments":["be"]},{"Key":"minus could","Fragments":["be"]},{"Key":"be simply","Fragments":["`return","return","i","free"]},{"Key":" **at**","Fragments":["args"]},{"Key":"**at** args","Fragments":["not"]},{"Key":"args not","Fragments":["validated"]},{"Key":"validated (consider","Fragments":["negative"]},{"Key":"(consider negative","Fragments":["inputs"]},{"Key":"negative inputs","Fragments":["for"]},{"Key":"inputs for","Fragments":["example)"]},{"Key":"the **SecondAsFractionOfPlanetYear**","Fragments":["elements"]},{"Key":"**SecondAsFractionOfPlanetYear** elements","Fragments":["can"]},{"Key":"elements can","Fragments":["be"]},{"Key":"done without","Fragments":["making","having","the","using","a"]},{"Key":"a copy.","Fragments":["This","Whether","The","```","Also"]},{"Key":"copy. This","Fragments":["currently"]},{"Key":"This currently","Fragments":["requires"]},{"Key":"currently requires","Fragments":["O(N)"]},{"Key":"requires O(N)","Fragments":["additional"]},{"Key":"O(N) additional","Fragments":["space.","space,"]},{"Key":"Code looks","Fragments":["great!","great!","good,"]},{"Key":"personally don't","Fragments":["like"]},{"Key":"like existence","Fragments":["of"]},{"Key":"existence of","Fragments":["functions","the","at","a"]},{"Key":"of functions","Fragments":["strip_quotes()","`const`","instead","don't","with","like"]},{"Key":"functions strip_quotes()","Fragments":["and"]},{"Key":"strip_quotes() and","Fragments":["to_lower()","to_lower()."]},{"Key":"and to_lower()","Fragments":["since"]},{"Key":"to_lower() since","Fragments":["these"]},{"Key":"since these","Fragments":["functionalities","anagrams"]},{"Key":"these functionalities","Fragments":["have"]},{"Key":"functionalities have","Fragments":["already"]},{"Key":"have already","Fragments":["been","moved","generated"]},{"Key":"already been","Fragments":["implemented","encountered.","told"]},{"Key":"been implemented","Fragments":["in","inside"]},{"Key":"in library","Fragments":["methods."]},{"Key":"library methods.","Fragments":["You"]},{"Key":"methods. You","Fragments":["could"]},{"Key":"just include","Fragments":["some","a","`\u003ccctype\u003e`","bob"]},{"Key":"include some","Fragments":["headers","hash"]},{"Key":"some headers","Fragments":["and"]},{"Key":"headers and","Fragments":["get","cpp"]},{"Key":"same functionality","Fragments":["without"]},{"Key":"functionality without","Fragments":["writing"]},{"Key":"writing it","Fragments":["yourself","in"]},{"Key":"it yourself","Fragments":["and"]},{"Key":"yourself and","Fragments":["without"]},{"Key":"and without","Fragments":["making","error","using","comparing","the","regexes,"]},{"Key":"making your","Fragments":["own","code"]},{"Key":"own errors","Fragments":["strip_quotes()"]},{"Key":"errors strip_quotes()","Fragments":["and"]},{"Key":" using","Fragments":["namespace","namespace","namespace","std::string;","std::stringstream;","both","baseMap","quotes","namespace","Position","std::begin;//You","std::end;","std::domain_error;","std::string;","namespace","std::map;","std::string;","std::begin;","std::end;","std::sort;","std::map;","BoardPosition","namespace","namespace","SubjectMap","StringVec"]},{"Key":"using namespace","Fragments":["boost;","std;","std;","std","in","std","in","std;","is","std;","trinary,","std;","std;","std;","boost).","bob","for","std;","instead","std;","std;"]},{"Key":"your code,","Fragments":["then","because","and","should","e.g.","you"]},{"Key":"code, then","Fragments":["you"]},{"Key":" else","Fragments":["if","if","sstm","sstm","sstm","if","if","return","if","c","return","if(","return","{","{"]},{"Key":"else if","Fragments":["(question.find_first_not_of(\"0123456789?\")","(question.back()",":","shout(said)","question(said)","(!","((int)letter","curlies.","on","expressions"]},{"Key":"if (question.find_first_not_of(\"0123456789?\")","Fragments":["=="]},{"Key":"(question.find_first_not_of(\"0123456789?\") ==","Fragments":["std::string::npos){"]},{"Key":" doing","Fragments":["exactly"]},{"Key":"doing exactly","Fragments":["the"]},{"Key":"same thing","Fragments":["as","conceptually,","in","without","what"]},{"Key":"if (question.back()","Fragments":["=="]},{"Key":"(question.back() ==","Fragments":["'?')"]},{"Key":"== '?')","Fragments":["{"]},{"Key":"Otherwise it","Fragments":["looks"]},{"Key":" Header","Fragments":["is"]},{"Key":"Header is","Fragments":["not","the"]},{"Key":"not self","Fragments":["contained","documenting"]},{"Key":"self contained","Fragments":["(does"]},{"Key":"contained (does","Fragments":["not"]},{"Key":"(does not","Fragments":["include"]},{"Key":"not include","Fragments":["vector)","the"]},{"Key":" only","Fragments":["reason"]},{"Key":"only reason","Fragments":["code","I","I","I","the"]},{"Key":"reason code","Fragments":["works"]},{"Key":"works is","Fragments":["because"]},{"Key":"is because","Fragments":["includ","I","this","I","it","the","I","the","of","of","it"]},{"Key":"because includ","Fragments":["order"]},{"Key":"includ order","Fragments":["in"]},{"Key":"the usual","Fragments":["include","`std::`","case\u003c/em\u003e"]},{"Key":"usual include","Fragments":["order."]},{"Key":"include order.","Fragments":["Meaning"]},{"Key":"order. Meaning","Fragments":["sieve.h"]},{"Key":"Meaning sieve.h","Fragments":["should"]},{"Key":"sieve.h should","Fragments":["be"]},{"Key":"the tip.","Fragments":["I","I"]},{"Key":"tip. I","Fragments":["did","don't"]},{"Key":"did some","Fragments":["research","research","Javascript","of"]},{"Key":"some research","Fragments":["and","on"]},{"Key":"research and","Fragments":["the"]},{"Key":"answer to","Fragments":["this","`IsEmpty`?","number","this:","[this](http://stackoverflow.com/questions/3009543/passing-integers-as-constant-references-versus-copying)","your"]},{"Key":"this question","Fragments":["is","in"]},{"Key":"clearly explained","Fragments":["here"]},{"Key":"explained here","Fragments":["-"]},{"Key":"here -","Fragments":["http://stackoverflow.com/questions/121162/what-does-the-explicit-keyword-in-c-mean","I","especially"]},{"Key":"the OrbitalSeconds","Fragments":["should"]},{"Key":"OrbitalSeconds should","Fragments":["all"]},{"Key":"should all","Fragments":["be"]},{"Key":"all be","Fragments":["**static","in"]},{"Key":"be **static","Fragments":["const**","const**","const**"]},{"Key":"**static const**","Fragments":["so","variables"]},{"Key":"const** so","Fragments":["they"]},{"Key":"so they","Fragments":["aren't","can","don't"]},{"Key":"they aren't","Fragments":["allocated","primes","visible"]},{"Key":"aren't allocated","Fragments":["every"]},{"Key":"allocated every","Fragments":["time"]},{"Key":"time you","Fragments":["create","call","call","spend","check","never","extract","find"]},{"Key":"create one","Fragments":["of"]},{"Key":" take","Fragments":["the","map","*old_sys*"]},{"Key":"map as","Fragments":["a","const","a"]},{"Key":" **long**","Fragments":["as"]},{"Key":"**long** as","Fragments":["a"]},{"Key":"a size","Fragments":["was","limit,","limit"]},{"Key":"size was","Fragments":["insufficient"]},{"Key":"was insufficient","Fragments":["for"]},{"Key":"insufficient for","Fragments":["me,"]},{"Key":"for me,","Fragments":["I","since","but","with","and","the","I"]},{"Key":"use **unit64_t**","Fragments":["from"]},{"Key":"**unit64_t** from","Fragments":["**stdint.h**"]},{"Key":" **static","Fragments":["const**"]},{"Key":"const** variables","Fragments":["are"]},{"Key":"variables are","Fragments":["preferable","declared"]},{"Key":"are preferable","Fragments":["to"]},{"Key":"preferable to","Fragments":["preprocessor","keep","calling","own","use","default"]},{"Key":"to preprocessor","Fragments":["directives."]},{"Key":"This did","Fragments":["not"]},{"Key":"not work","Fragments":["for","on","in","for","for"]},{"Key":"me either.","Fragments":["I","So,"]},{"Key":"either. I","Fragments":["suggest","prefer","saw"]},{"Key":"suggest using","Fragments":["`uint64_t`","**size_t*","the","the","a"]},{"Key":"using `uint64_t`","Fragments":["from"]},{"Key":"`uint64_t` from","Fragments":["`stdint.h`"]},{"Key":" just","Fragments":["on","like","curious:"]},{"Key":"just on","Fragments":["a"]},{"Key":"a mathmatical","Fragments":["note,"]},{"Key":"mathmatical note,","Fragments":["it"]},{"Key":"note, it","Fragments":["is"]},{"Key":"if X_PER_EARTH_YEAR","Fragments":["\u003e"]},{"Key":"X_PER_EARTH_YEAR \u003e","Fragments":["0"]},{"Key":" `m_nAgeInSec","Fragments":["/"]},{"Key":"`m_nAgeInSec /","Fragments":["SEC_PER_EARTH_YEAR"]},{"Key":"/ SEC_PER_EARTH_YEAR","Fragments":["/"]},{"Key":"SEC_PER_EARTH_YEAR /","Fragments":["X_PER_EARTH_YEAR`"]},{"Key":" what","Fragments":["you","os"]},{"Key":"are currently","Fragments":["doing"]},{"Key":"will help","Fragments":["avoid","me","you","as","me"]},{"Key":"help avoid","Fragments":["overflow","these"]},{"Key":"avoid overflow","Fragments":["from"]},{"Key":"overflow from","Fragments":["the"]},{"Key":"the multiplication","Fragments":["which","has"]},{"Key":"multiplication which","Fragments":["would"]},{"Key":"would result","Fragments":["in","in"]},{"Key":"behavior (because","Fragments":["this"]},{"Key":"(because this","Fragments":["can"]},{"Key":"be found","Fragments":["at","in","in"]},{"Key":"found at","Fragments":["compile","index"]},{"Key":"at compile","Fragments":["time,","time.","time.","time.","time,","time.","time,","time","time","time.","time","time.","time","time."]},{"Key":"compile time,","Fragments":["it","its","is"]},{"Key":"will throw","Fragments":["it","in","an"]},{"Key":"throw it","Fragments":["out"]},{"Key":"i don't","Fragments":["know","remember","remeber","seem","need","like"]},{"Key":"how this","Fragments":["is","turned","iterator","one"]},{"Key":"is working,","Fragments":["you"]},{"Key":"working, you","Fragments":["truncate"]},{"Key":"you truncate","Fragments":["in"]},{"Key":"truncate in","Fragments":["the"]},{"Key":"enum, then","Fragments":["try"]},{"Key":"then try","Fragments":["to","to","to"]},{"Key":"to untruncate","Fragments":["it?"]},{"Key":" earth_period","Fragments":["should"]},{"Key":"earth_period should","Fragments":["be"]},{"Key":" age_in_seconds","Fragments":["should"]},{"Key":"age_in_seconds should","Fragments":["be"]},{"Key":" there","Fragments":["should","are"]},{"Key":" *m_seconds*","Fragments":["should"]},{"Key":"*m_seconds* should","Fragments":["be"]},{"Key":" it","Fragments":["is","should","would","looks"]},{"Key":"is wasteful","Fragments":["to","as"]},{"Key":"wasteful to","Fragments":["have"]},{"Key":"have all","Fragments":["of","the","kinds","`#include`s","information","the"]},{"Key":"variables and","Fragments":["do","extract","functions"]},{"Key":"and do","Fragments":["the","the","a","most","this","both","what"]},{"Key":"the calculations","Fragments":["in"]},{"Key":"calculations in","Fragments":["the"]},{"Key":"constructor. Better","Fragments":["to"]},{"Key":"Better to","Fragments":["do","practise"]},{"Key":"do them","Fragments":["on"]},{"Key":"them on","Fragments":["demand.","chars","a"]},{"Key":" *_seconds*","Fragments":["should"]},{"Key":"*_seconds* should","Fragments":["be"]},{"Key":"be **const**","Fragments":["(as","reference"]},{"Key":"**const** (as","Fragments":["well"]},{"Key":"(as well","Fragments":["as"]},{"Key":"well as","Fragments":["any","repeated","learn","not","incrementing","the","shortening","u16string","making","the","range","uppercase,","references","const","the","for","source","inherently","you","removing","the"]},{"Key":"as any","Fragments":["other","string","string"]},{"Key":"any other","Fragments":["member","optimizations)","even","operation;"]},{"Key":"other member","Fragments":["variables","function"]},{"Key":"variables if","Fragments":["you","they","they"]},{"Key":"you decided","Fragments":["to"]},{"Key":"keep this","Fragments":["structure)","as","issue","as","code","design"]},{"Key":"use **uint64_t**","Fragments":["from"]},{"Key":"**uint64_t** from","Fragments":["**stdint.h**"]},{"Key":"from **stdint.h**","Fragments":["for"]},{"Key":"**stdint.h** for","Fragments":["cross"]},{"Key":"for cross","Fragments":["platform"]},{"Key":"cross platform","Fragments":["support."]},{"Key":"the ratios","Fragments":["should"]},{"Key":"ratios should","Fragments":["be"]},{"Key":"s space_age.h","Fragments":["space_age.cpp`"]},{"Key":"thing i","Fragments":["can","can"]},{"Key":"can suggest","Fragments":["here","here"]},{"Key":"suggest here","Fragments":["is","is"]},{"Key":"that if","Fragments":["you","you","I","the","the","you","you","you","the","the","you're","statement","you","you","you","isSayingAnything","the","you","s2","block","there","I","it","not"]},{"Key":"you hoist","Fragments":["**i.first**","**valueLetters.first**"]},{"Key":"hoist **i.first**","Fragments":["into"]},{"Key":"**i.first** into","Fragments":["a"]},{"Key":"a **const**","Fragments":["variable","variable","variable","reference","variable","variable","variable","variable","variable"]},{"Key":"**const** variable","Fragments":["the","the","to","to","to","outside","outside","outside"]},{"Key":"variable the","Fragments":["compiler","compiler"]},{"Key":"compiler has","Fragments":["a","a"]},{"Key":"at optimizing","Fragments":["the","the"]},{"Key":"optimizing the","Fragments":["loop","loop"]},{"Key":"loop since","Fragments":["it","it","I"]},{"Key":"it know","Fragments":["for","for","to"]},{"Key":"know for","Fragments":["sure","sure","a"]},{"Key":"for sure","Fragments":["the","the"]},{"Key":"variable cannot","Fragments":["change.","change."]},{"Key":"hoist **valueLetters.first**","Fragments":["into"]},{"Key":"**valueLetters.first** into","Fragments":["a"]},{"Key":" see","Fragments":["https://www.youtube.com/watch?v=GPpD4BBtA1Y","https://www.youtube.com/watch?v=GPpD4BBtA1Y"]},{"Key":" hoist","Fragments":["**item.first**","keyvalue.first","p.first","old_.first","**item.first**","*kv.first*","**kv.first**","*value.first*","*score_range.first*","*input_element.first*"]},{"Key":"hoist **item.first**","Fragments":["into","into"]},{"Key":"**item.first** into","Fragments":["a","a"]},{"Key":"to help","Fragments":["out","out","out","the","out","the","out","out","out","out","out","you","avoid","solve...\u003cul\u003e\u003cli\u003eMy","out","clarify","solve...\u003cul\u003e\u003cli\u003eMy","with"]},{"Key":" also","Fragments":["you","using","!isaplha"]},{"Key":"also you","Fragments":["are"]},{"Key":"are making","Fragments":["a"]},{"Key":"the make,","Fragments":["take"]},{"Key":"make, take","Fragments":["it"]},{"Key":"take it","Fragments":["as","by"]},{"Key":"hoist keyvalue.first","Fragments":["into"]},{"Key":"keyvalue.first into","Fragments":["const"]},{"Key":"into const","Fragments":["variable","variable","variable"]},{"Key":"const variable","Fragments":["to","to","to","outside"]},{"Key":" see:","Fragments":["https://www.youtube.com/watch?v=GPpD4BBtA1Y","https://www.youtube.com/watch?v=GPpD4BBtA1Y","https://www.youtube.com/watch?v=GPpD4BBtA1Y"]},{"Key":"think insert","Fragments":["is","-1"]},{"Key":"insert is","Fragments":["a"]},{"Key":"heavy here,","Fragments":["why"]},{"Key":"here, why","Fragments":["not"]},{"Key":"the `[]`","Fragments":["operator?"]},{"Key":"hoist p.first","Fragments":["into"]},{"Key":"p.first into","Fragments":["const"]},{"Key":"take map","Fragments":["as"]},{"Key":"hoist old_.first","Fragments":["into"]},{"Key":"old_.first into","Fragments":["const"]},{"Key":"help the","Fragments":["compiler","compiler"]},{"Key":"the squres_of_sums..","Fragments":["for"]},{"Key":"squres_of_sums.. for","Fragments":["reference"]},{"Key":"for reference","Fragments":["for"]},{"Key":"reference for","Fragments":["anyone","function,","reading","some"]},{"Key":"for anyone","Fragments":["else","who"]},{"Key":"the suggestions","Fragments":["@justice."]},{"Key":"suggestions @justice.","Fragments":["It's"]},{"Key":"@justice. It's","Fragments":["of"]},{"Key":"It's of","Fragments":["great"]},{"Key":"of great","Fragments":["help!"]},{"Key":"Since both","Fragments":["functions","the","of"]},{"Key":"both functions","Fragments":["are"]},{"Key":"are **static**","Fragments":["you"]},{"Key":"**static** you","Fragments":["could"]},{"Key":"a **namespace**","Fragments":["instead"]},{"Key":"**namespace** instead","Fragments":["of"]},{"Key":"take *old_sys*","Fragments":["as"]},{"Key":"*old_sys* as","Fragments":["a"]},{"Key":"**const** reference","Fragments":["i.e."]},{"Key":"reference i.e.","Fragments":["`const"]},{"Key":"i.e. `const","Fragments":["map\u003cint,"]},{"Key":"`const map\u003cint,","Fragments":["vector\u003cchar\u003e"]},{"Key":"map\u003cint, vector\u003cchar\u003e","Fragments":["\u003e\u0026"]},{"Key":"vector\u003cchar\u003e \u003e\u0026","Fragments":["old_sys`"]},{"Key":"\u003e\u0026 old_sys`","Fragments":["to"]},{"Key":"old_sys` to","Fragments":["avoid"]},{"Key":"avoid an","Fragments":["extra"]},{"Key":" move","Fragments":["**curr_val**"]},{"Key":"move **curr_val**","Fragments":["and"]},{"Key":"**curr_val** and","Fragments":["**cur_vec**"]},{"Key":"and **cur_vec**","Fragments":["into"]},{"Key":"**cur_vec** into","Fragments":["the"]},{"Key":"loop so","Fragments":["they","that"]},{"Key":"they can","Fragments":["be","have","never","pull","use","be","clearly"]},{"Key":"be made","Fragments":["**const**","`static","simpler.","in","easier","the","more","much","and","slightly"]},{"Key":"made **const**","Fragments":["to"]},{"Key":"**const** to","Fragments":["help","help"]},{"Key":"compiler (","Fragments":["see:"]},{"Key":"( see:","Fragments":["https://www.youtube.com/watch?v=GPpD4BBtA1Y"]},{"Key":"see: https://www.youtube.com/watch?v=GPpD4BBtA1Y","Fragments":[")"]},{"Key":" (see","Fragments":["https://www.youtube.com/watch?v=GPpD4BBtA1Y)"]},{"Key":"hoist *kv.first*","Fragments":["into"]},{"Key":"*kv.first* into","Fragments":["a"]},{"Key":"the compiler.","Fragments":["(see","(see","(see","(see","(see","I"]},{"Key":"compiler. (see","Fragments":["https://www.youtube.com/watch?v=GPpD4BBtA1Y)","https://www.youtube.com/watch?v=GPpD4BBtA1Y)","https://www.youtube.com/watch?v=GPpD4BBtA1Y)","https://www.youtube.com/watch?v=GPpD4BBtA1Y)","https://www.youtube.com/watch?v=GPpD4BBtA1Y)"]},{"Key":"hoist **kv.first**","Fragments":["into"]},{"Key":"**kv.first** into","Fragments":["a"]},{"Key":"variable outside","Fragments":["of","of","the","the","of"]},{"Key":"hoist *value.first*","Fragments":["into"]},{"Key":"*value.first* into","Fragments":["a"]},{"Key":"the inner","Fragments":["loop","loop","loop","ternary."]},{"Key":"inner loop","Fragments":["to","to","to","of","reminds"]},{"Key":"hoist *score_range.first*","Fragments":["into"]},{"Key":"*score_range.first* into","Fragments":["a"]},{"Key":"problem did","Fragments":["not"]},{"Key":"not define","Fragments":["duplicates"]},{"Key":"define duplicates","Fragments":["to"]},{"Key":"duplicates to","Fragments":["be"]},{"Key":"be domain","Fragments":["errors"]},{"Key":"domain errors","Fragments":["as"]},{"Key":"errors as","Fragments":["such;"]},{"Key":"as such;","Fragments":["however,"]},{"Key":"such; however,","Fragments":["I"]},{"Key":"don't disagree","Fragments":["with"]},{"Key":"disagree with","Fragments":["taking","the","01freeman","you","the","previous","that"]},{"Key":"with taking","Fragments":["that"]},{"Key":"taking that","Fragments":["stance."]},{"Key":"that stance.","Fragments":["In"]},{"Key":"stance. In","Fragments":["that"]},{"Key":"In that","Fragments":["case,","case,","case,","case","case","case,","algorithm"]},{"Key":"that case,","Fragments":["you","I'm","declaring","you"]},{"Key":"case, you","Fragments":["could","could","can","might"]},{"Key":"could optimize","Fragments":["this","them","a","these"]},{"Key":"this by","Fragments":["not","const","looking"]},{"Key":"not throwing","Fragments":["away"]},{"Key":"throwing away","Fragments":["the"]},{"Key":"away the","Fragments":["work","cache","double","entire"]},{"Key":"work of","Fragments":["*find*.","looking","counting","parsing","analysing","parsing","splitting"]},{"Key":"of *find*.","Fragments":["By"]},{"Key":"*find*. By","Fragments":["switching"]},{"Key":"By switching","Fragments":["from"]},{"Key":"switching from","Fragments":["*find*"]},{"Key":"from *find*","Fragments":["to"]},{"Key":"*find* to","Fragments":["*lower_bound*"]},{"Key":"to *lower_bound*","Fragments":["you"]},{"Key":"*lower_bound* you","Fragments":["can"]},{"Key":"can compare","Fragments":["the","two"]},{"Key":"compare the","Fragments":["resultant","'\\0'","lengths","results,","vector","two","whole","choices","two"]},{"Key":"resultant iterator,","Fragments":["if"]},{"Key":"a match,","Fragments":["reject"]},{"Key":"match, reject","Fragments":["it,"]},{"Key":"reject it,","Fragments":["if"]},{"Key":"it, if","Fragments":["not,","you","you"]},{"Key":"if not,","Fragments":["use"]},{"Key":"not, use","Fragments":["as"]},{"Key":"use as","Fragments":["first","a","much"]},{"Key":"as first","Fragments":["argument"]},{"Key":"first argument","Fragments":["to","to"]},{"Key":"to *insert*","Fragments":["as"]},{"Key":"*insert* as","Fragments":["a"]},{"Key":"a placement","Fragments":["hint."]},{"Key":" See:","Fragments":["http://www.cplusplus.com/reference/map/map/lower_bound/","http://www.cplusplus.com/reference/string/string/erase/"]},{"Key":" http://www.cplusplus.com/reference/map/map/insert/","Fragments":["(with"]},{"Key":"http://www.cplusplus.com/reference/map/map/insert/ (with","Fragments":["hint"]},{"Key":"(with hint","Fragments":["is"]},{"Key":"hint is","Fragments":["(2))"]},{"Key":"use **erase**","Fragments":["instead"]},{"Key":"**erase** instead","Fragments":["of"]},{"Key":"of **substr**","Fragments":["to"]},{"Key":"**substr** to","Fragments":["not"]},{"Key":"I decided","Fragments":["to","to","to","to","to","to","to","to","to","the","early","to","to","to","to","to","to","to","instead","that","to","to","to","against"]},{"Key":"declare `curr_val`","Fragments":["and"]},{"Key":"`curr_val` and","Fragments":["`curr_vec`"]},{"Key":"and `curr_vec`","Fragments":["outside"]},{"Key":"`curr_vec` outside","Fragments":["of"]},{"Key":"loop. I","Fragments":["would"]},{"Key":"would usually","Fragments":["have"]},{"Key":"usually have","Fragments":["just"]},{"Key":"have just","Fragments":["put","put","one","been"]},{"Key":"loop, to","Fragments":["avoid"]},{"Key":"extra lines","Fragments":["for","of","of"]},{"Key":"lines for","Fragments":["the"]},{"Key":"the declarations.","Fragments":["I"]},{"Key":"declarations. I","Fragments":["didn't","suppose"]},{"Key":"compiler could","Fragments":["optimize"]},{"Key":"optimize them","Fragments":["better"]},{"Key":"them better","Fragments":["that"]},{"Key":"better that","Fragments":["way,","way.","way."]},{"Key":"that way,","Fragments":["though,","you"]},{"Key":"way, though,","Fragments":["so"]},{"Key":"so it's","Fragments":["nice","enough","the","best","not","actually","much","all","still","ok","definitely","good","just","hard"]},{"Key":"it's nice","Fragments":["to","to","to","to","and"]},{"Key":"that there's","Fragments":["a","no","anything","a","no"]},{"Key":"there's a","Fragments":["real","compelling","good","lot","tradeoff","range","big","semi-colon","pretty","decent","realm","huge","big","lot","huge","test","problem","reason","hash","pre-baked","lot","way","smarter","potential","bug"]},{"Key":"a real","Fragments":["reason","life","nuisance","\"bob\"","difference"]},{"Key":"real reason","Fragments":["to","to","to"]},{"Key":"had not","Fragments":["considered","read"]},{"Key":"not considered","Fragments":["constructors"]},{"Key":"considered constructors","Fragments":["being"]},{"Key":"constructors being","Fragments":["invoked"]},{"Key":"being invoked","Fragments":["implicitly.","implicitly"]},{"Key":"invoked implicitly.","Fragments":["That"]},{"Key":"implicitly. That","Fragments":["does"]},{"Key":"That does","Fragments":["seem","seem","open"]},{"Key":"does seem","Fragments":["like","like","stupid.","like"]},{"Key":"good thing","Fragments":["to","-","to"]},{"Key":"to guard","Fragments":["against."]},{"Key":"the improvements","Fragments":["over"]},{"Key":"improvements over","Fragments":["the","my"]},{"Key":"To nitpick","Fragments":["some"]},{"Key":"more ;)","Fragments":["clang"]},{"Key":";) clang","Fragments":["at"]},{"Key":"clang at","Fragments":["the"]},{"Key":"more annoying","Fragments":["level"]},{"Key":"annoying level","Fragments":["would"]},{"Key":"level would","Fragments":["tell"]},{"Key":"would tell","Fragments":["you"]},{"Key":"tell you","Fragments":["not","what","not","much","what"]},{"Key":"you not","Fragments":["to","to"]},{"Key":"use c-style","Fragments":["casts."]},{"Key":"c-style casts.","Fragments":["In"]},{"Key":"casts. In","Fragments":["fact,"]},{"Key":"fact, casting","Fragments":["here"]},{"Key":"casting here","Fragments":["is"]},{"Key":"is pointless.","Fragments":["My"]},{"Key":"pointless. My","Fragments":["suggestion"]},{"Key":"My suggestion","Fragments":["is","thus"]},{"Key":"suggestion is","Fragments":["to","to"]},{"Key":"the cast","Fragments":["on","the","value"]},{"Key":"cast on","Fragments":["the"]},{"Key":"the result","Fragments":["of","of","of","of","of","is","of","of","of","of","is","of","string.","of","of","of","of","of","of","into","doesn't","map.","of","vector","of"]},{"Key":" @schuyler-fourier","Fragments":["I"]},{"Key":"@schuyler-fourier I","Fragments":["do"]},{"Key":"you say","Fragments":["that","\"measure","\"things","that's","\"storing"]},{"Key":"that making","Fragments":["the","the"]},{"Key":"input a","Fragments":["const","reference.","const"]},{"Key":"const ref","Fragments":["breaks"]},{"Key":"ref breaks","Fragments":["the"]},{"Key":"loop. In","Fragments":["my"]},{"Key":"In my","Fragments":["solution","function","opinion,","mind","version","code","opinion","opinion","opinion","opinion","opinion","exercise","opinion","head","original","example","version","original","second"]},{"Key":"solution I","Fragments":["was"]},{"Key":" `const","Fragments":["std::map\u003cint,","std::string","\u0026`"]},{"Key":"`const std::map\u003cint,","Fragments":["std::vector\u003cchar\u003e"]},{"Key":"std::map\u003cint, std::vector\u003cchar\u003e","Fragments":["\u003e\u0026"]},{"Key":"std::vector\u003cchar\u003e \u003e\u0026","Fragments":["in`"]},{"Key":"\u003e\u0026 in`","Fragments":["without"]},{"Key":"in` without","Fragments":["issue"]},{"Key":" First,","Fragments":["great","you","the","you"]},{"Key":"First, great","Fragments":["job,"]},{"Key":"great job,","Fragments":["this"]},{"Key":"job, this","Fragments":["is"]},{"Key":"as simple","Fragments":["as","as","as","to","as","as","as","as","as"]},{"Key":"simple as","Fragments":["it","it","it","possible","I","possible.","possible.","possible"]},{"Key":" Just","Fragments":["as","personal","some","to","removed","fixed","a","a","a","a","looked","testing","one","looking","another","a","a","a","my","wrote","fixing","did","a","so"]},{"Key":"Just as","Fragments":["a"]},{"Key":"of conversation,","Fragments":["I"]},{"Key":"conversation, I","Fragments":["find"]},{"Key":"it interesting","Fragments":["how","that"]},{"Key":"interesting how","Fragments":["people"]},{"Key":"how people","Fragments":["chose"]},{"Key":"people chose","Fragments":["the"]},{"Key":"order they","Fragments":["use"]},{"Key":"they use","Fragments":["for","algorithm"]},{"Key":"use for","Fragments":["these","higher"]},{"Key":"these operations.","Fragments":["I"]},{"Key":"operations. I","Fragments":["believe"]},{"Key":"is almost","Fragments":["a","certainly","like","entirely","C","free"]},{"Key":"a word-for-word","Fragments":["interpretation"]},{"Key":"word-for-word interpretation","Fragments":["of"]},{"Key":"interpretation of","Fragments":["the","testing","the","the"]},{"Key":"problem description.","Fragments":["This"]},{"Key":"description. This","Fragments":["is"]},{"Key":"is good.","Fragments":["What","Actually","To"]},{"Key":"good. What","Fragments":["I"]},{"Key":"find interesting","Fragments":["is"]},{"Key":"interesting is","Fragments":["that"]},{"Key":"the simplest","Fragments":["way","command","way","solution"]},{"Key":"simplest way","Fragments":["to","to"]},{"Key":"do if","Fragments":["you"]},{"Key":"by hand.","Fragments":["If"]},{"Key":"hand. If","Fragments":["you"]},{"Key":"by hand,","Fragments":["first"]},{"Key":"hand, first","Fragments":["you"]},{"Key":"first you","Fragments":["would"]},{"Key":"take `x","Fragments":["="]},{"Key":"`x =","Fragments":["year","x","x","foo;"]},{"Key":"= year","Fragments":["%"]},{"Key":"% 400`","Fragments":["if"]},{"Key":"400` if","Fragments":["x"]},{"Key":"if x","Fragments":["is"]},{"Key":"x is","Fragments":["zero","always"]},{"Key":"zero end","Fragments":["success,","fail,","success,"]},{"Key":"end success,","Fragments":["then","else"]},{"Key":"success, then","Fragments":["`x"]},{"Key":"then `x","Fragments":["=","="]},{"Key":"= x","Fragments":["%","%"]},{"Key":"x %","Fragments":["100`","4`"]},{"Key":"% 100`","Fragments":["if"]},{"Key":"100` if","Fragments":["zero"]},{"Key":"if zero","Fragments":["end","end"]},{"Key":"end fail,","Fragments":["then"]},{"Key":"fail, then","Fragments":["`x"]},{"Key":"% 4`","Fragments":["if"]},{"Key":"4` if","Fragments":["zero"]},{"Key":"success, else","Fragments":["end"]},{"Key":"else end","Fragments":["fail."]},{"Key":"end fail.","Fragments":["In"]},{"Key":"fail. In","Fragments":["this"]},{"Key":"In this","Fragments":["way,","case","case,","case","specific","version,","case","case","case,","case","case","iteration","case","iteration","iteration","case","case","particular","iteration","case","few","version","version","case","exercise","case","iteration,","iteration,","iteration,","iteration,"]},{"Key":"this way,","Fragments":["x","we","and"]},{"Key":"way, x","Fragments":["is"]},{"Key":"always getting","Fragments":["smaller"]},{"Key":"getting smaller","Fragments":["and"]},{"Key":"smaller and","Fragments":["the","gives","more","more"]},{"Key":"the successive","Fragments":["operations"]},{"Key":"successive operations","Fragments":["are"]},{"Key":"operations are","Fragments":["easier.","quick","friends!"]},{"Key":"are easier.","Fragments":["This"]},{"Key":"easier. This","Fragments":["of"]},{"Key":"This of","Fragments":["course,"]},{"Key":"of course,","Fragments":["does","is"]},{"Key":"course, does","Fragments":["not"]},{"Key":"sense on","Fragments":["a"]},{"Key":"a processor","Fragments":["as"]},{"Key":"processor as","Fragments":["size"]},{"Key":"as size","Fragments":["of"]},{"Key":"the integer","Fragments":["does","argument"]},{"Key":"integer does","Fragments":["not"]},{"Key":"not affect","Fragments":["the"]},{"Key":"affect the","Fragments":["speed"]},{"Key":"the speed","Fragments":["of","of","is","gain.","gain.","of"]},{"Key":"speed of","Fragments":["finding","following","`sort`and"]},{"Key":"of finding","Fragments":["the"]},{"Key":"finding the","Fragments":["modulo.","anagram"]},{"Key":"solution should","Fragments":["work","include"]},{"Key":"work and","Fragments":["is","appears"]},{"Key":"is nicely","Fragments":["structured.","done","modular,"]},{"Key":"sorted input","Fragments":["is"]},{"Key":"wasteful as","Fragments":["it"]},{"Key":"it takes","Fragments":["O(N)","a","no"]},{"Key":"takes O(N)","Fragments":["additional"]},{"Key":"additional space,","Fragments":["O(n"]},{"Key":"space, O(n","Fragments":["log"]},{"Key":"O(n log","Fragments":["n)"]},{"Key":"log n)","Fragments":["complexity."]},{"Key":"n) complexity.","Fragments":["If"]},{"Key":"complexity. If","Fragments":["you"]},{"Key":"you rethink","Fragments":["the"]},{"Key":"rethink the","Fragments":["problem,"]},{"Key":"problem, all","Fragments":["that"]},{"Key":"all that","Fragments":["matters","without","stuff","other","other","well.","happy","clear.","is"]},{"Key":"that matters","Fragments":["is","a"]},{"Key":"matters is","Fragments":["that"]},{"Key":"the COUNT","Fragments":["of"]},{"Key":"COUNT of","Fragments":["characters"]},{"Key":"of characters","Fragments":["matters.","over","long.","which","cut","to","which","change"]},{"Key":"characters matters.","Fragments":["Storing"]},{"Key":"matters. Storing","Fragments":["a"]},{"Key":"Storing a","Fragments":["map","pointer"]},{"Key":"of **char**","Fragments":["to"]},{"Key":"**char** to","Fragments":["**int**"]},{"Key":"to **int**","Fragments":["(the"]},{"Key":"**int** (the","Fragments":["implementation"]},{"Key":"(the implementation","Fragments":["of"]},{"Key":"which could","Fragments":["simply","replace","be","be","be","happen","be","be"]},{"Key":"could simply","Fragments":["be","never","be:","read:"]},{"Key":"simply be","Fragments":["*char","reused.","a","three"]},{"Key":"be *char","Fragments":["counts[26]"]},{"Key":"*char counts[26]","Fragments":["="]},{"Key":"counts[26] =","Fragments":["{0};*"]},{"Key":"= {0};*","Fragments":["indexed"]},{"Key":"{0};* indexed","Fragments":["by"]},{"Key":"indexed by","Fragments":["*c"]},{"Key":"by *c","Fragments":["-"]},{"Key":"*c -","Fragments":["'a'*"]},{"Key":"- 'a'*","Fragments":["allows"]},{"Key":"'a'* allows","Fragments":["you"]},{"Key":"allows you","Fragments":["to","to"]},{"Key":"parse in","Fragments":["O(n)"]},{"Key":"O(n) time","Fragments":["with"]},{"Key":"time with","Fragments":["O(1)","duplicate","iterators)."]},{"Key":"with O(1)","Fragments":["additional"]},{"Key":"O(1) additional","Fragments":["overhead"]},{"Key":"this passes","Fragments":["all","the","all"]},{"Key":"the unit","Fragments":["tests","tests","tests","tests.","tests","tests,","tests","tests","tests","tests,","tests","test"]},{"Key":"tests as","Fragments":["it","there"]},{"Key":"not solve","Fragments":["the"]},{"Key":"solve the","Fragments":["described","problem","problem","\"spider\"","first.","problem","problem.","problem"]},{"Key":"the described","Fragments":["problem."]},{"Key":"hoist *input_element.first*","Fragments":["into"]},{"Key":"*input_element.first* into","Fragments":["a"]},{"Key":" not","Fragments":["a","saying","quite:","a"]},{"Key":"a fan","Fragments":["of","of","of","of","of","of"]},{"Key":"fan of","Fragments":["the","all","nesting","string_ref,","being","how","the","using","algorithms,"]},{"Key":"the formatting,","Fragments":["consider"]},{"Key":"formatting, consider","Fragments":["using"]},{"Key":"using something","Fragments":["like","like","like","like"]},{"Key":"like AStyle","Fragments":["(http://astyle.sourceforge.net/)"]},{"Key":"AStyle (http://astyle.sourceforge.net/)","Fragments":["or"]},{"Key":"(http://astyle.sourceforge.net/) or","Fragments":["Uncrustify"]},{"Key":"or Uncrustify","Fragments":["(http://uncrustify.sourceforge.net/)"]},{"Key":"will loop","Fragments":["indefinitly"]},{"Key":"loop indefinitly","Fragments":["when"]},{"Key":"indefinitly when","Fragments":["you"]},{"Key":"you *strand1.length()","Fragments":["\u003e"]},{"Key":"*strand1.length() \u003e","Fragments":["std::number_limits\u003cint\u003e::max()*."]},{"Key":"\u003e std::number_limits\u003cint\u003e::max()*.","Fragments":["suggest"]},{"Key":"std::number_limits\u003cint\u003e::max()*. suggest","Fragments":["using"]},{"Key":"using **size_t*","Fragments":["for"]},{"Key":"**size_t* for","Fragments":["*i*"]},{"Key":"too small.","Fragments":["should"]},{"Key":"small. should","Fragments":["be"]},{"Key":"be **size_t**","Fragments":["(consider"]},{"Key":"**size_t** (consider","Fragments":["the"]},{"Key":"(consider the","Fragments":["case"]},{"Key":"case that","Fragments":["the","hits"]},{"Key":"two strings","Fragments":["are","are","and","and","you","char-for-char","are","is","were","and","where"]},{"Key":"are completetly","Fragments":["different"]},{"Key":"completetly different","Fragments":["and"]},{"Key":"different and","Fragments":["are"]},{"Key":"are of","Fragments":["maximum","type","different"]},{"Key":"of maximum","Fragments":["size."]},{"Key":"without having","Fragments":["to","to","to","to"]},{"Key":"way this","Fragments":["is","eliminated","class"]},{"Key":"is written","Fragments":["is","following"]},{"Key":"written is","Fragments":["to"]},{"Key":"circuit the","Fragments":["evaluation."]},{"Key":"the evaluation.","Fragments":["If"]},{"Key":"evaluation. If","Fragments":["`year"]},{"Key":"If `year","Fragments":["%"]},{"Key":"== 0`","Fragments":["-\u003e"]},{"Key":"0` -\u003e","Fragments":["`False`,"]},{"Key":"-\u003e `False`,","Fragments":["the"]},{"Key":"`False`, the","Fragments":["next"]},{"Key":"next part","Fragments":["of"]},{"Key":"Good points.","Fragments":["Thanks!"]},{"Key":"Ah, that","Fragments":["was"]},{"Key":"was dumb.","Fragments":["I"]},{"Key":"dumb. I","Fragments":["did","seem"]},{"Key":"the `char()`","Fragments":["thing"]},{"Key":"`char()` thing","Fragments":["because"]},{"Key":"thing because","Fragments":["when","I"]},{"Key":"because when","Fragments":["I","I","you"]},{"Key":"I printed","Fragments":["the"]},{"Key":"printed the","Fragments":["results"]},{"Key":"the results","Fragments":["of","are","were","of","of","you"]},{"Key":"results of","Fragments":["`tolower()`,","['?']","the","square()","calling","the"]},{"Key":"of `tolower()`,","Fragments":["it"]},{"Key":"`tolower()`, it","Fragments":["came"]},{"Key":"it came","Fragments":["out","across","to"]},{"Key":"came out","Fragments":["as","with","in","to"]},{"Key":"out as","Fragments":["a","zero,"]},{"Key":"a number.","Fragments":["But"]},{"Key":"number. But","Fragments":["I"]},{"Key":"have realized","Fragments":["that"]},{"Key":"realized that","Fragments":["the","it's","the","was","rather","is","I"]},{"Key":"that `new_sys`","Fragments":["is"]},{"Key":"`new_sys` is","Fragments":["declared"]},{"Key":"is declared","Fragments":["as","and"]},{"Key":"declared as","Fragments":["a","`const`,","such","const?","const?\"","private","an","part"]},{"Key":"map from","Fragments":["a"]},{"Key":"a `char`","Fragments":["would","type"]},{"Key":"`char` would","Fragments":["take"]},{"Key":"would take","Fragments":["care","the","the","in"]},{"Key":"take care","Fragments":["of","of","of","of"]},{"Key":"care of","Fragments":["that.","single","this","that","a","it","that."]},{"Key":"Now that","Fragments":["you","I","I"]},{"Key":"you mention","Fragments":["it,","it"]},{"Key":"mention it,","Fragments":["the"]},{"Key":"two space","Fragments":["indenting"]},{"Key":"space indenting","Fragments":["is"]},{"Key":"indenting is","Fragments":["a"]},{"Key":"bit strange.","Fragments":["Clearly"]},{"Key":"strange. Clearly","Fragments":["I'm"]},{"Key":"Clearly I'm","Fragments":["going"]},{"Key":"my editor","Fragments":["configuration,","and"]},{"Key":"editor configuration,","Fragments":["and"]},{"Key":"configuration, and","Fragments":["pick"]},{"Key":"and pick","Fragments":["a"]},{"Key":"pick a","Fragments":["standard","single","certain","convention"]},{"Key":"a standard","Fragments":["style","container?","feature","function","80x24","function"]},{"Key":"standard style","Fragments":["to"]},{"Key":"style to","Fragments":["conform","get","adopt.","have","adopt."]},{"Key":"to conform","Fragments":["to."]},{"Key":"wasn't thinking","Fragments":["of"]},{"Key":"thinking of","Fragments":["very","regex","my","split","having","having","this,","using"]},{"Key":"of very","Fragments":["long"]},{"Key":"long strings.","Fragments":["Which"]},{"Key":"strings. Which","Fragments":["is"]},{"Key":"is silly,","Fragments":["considering"]},{"Key":"silly, considering","Fragments":["the"]},{"Key":"considering the","Fragments":["application.","simple"]},{"Key":" Hurray","Fragments":["for"]},{"Key":"Hurray for","Fragments":["formatting!"]},{"Key":"for formatting!","Fragments":["Thank"]},{"Key":"formatting! Thank","Fragments":["you"]},{"Key":"Great idea.","Fragments":["Frankly,"]},{"Key":"idea. Frankly,","Fragments":["I"]},{"Key":"Frankly, I","Fragments":["did"]},{"Key":"I politely","Fragments":["disagree."]},{"Key":"The reason","Fragments":["one","I","that","that","I","that"]},{"Key":"reason one","Fragments":["might"]},{"Key":"one might","Fragments":["make","hope","suppose","not"]},{"Key":"argument constructor","Fragments":["**explicit**","being"]},{"Key":"constructor **explicit**","Fragments":["is"]},{"Key":"**explicit** is","Fragments":["to"]},{"Key":"avoid unwanted","Fragments":["conversions."]},{"Key":"unwanted conversions.","Fragments":["``std::vector\u003c...\u003e::vector(size_type"]},{"Key":"conversions. ``std::vector\u003c...\u003e::vector(size_type","Fragments":["count,"]},{"Key":"``std::vector\u003c...\u003e::vector(size_type count,","Fragments":["...)``"]},{"Key":"count, ...)``","Fragments":["constructs"]},{"Key":"...)`` constructs","Fragments":["a"]},{"Key":"constructs a","Fragments":["vector","temporary","new","value"]},{"Key":"the specified","Fragments":["size,","exercise"]},{"Key":"specified size,","Fragments":["the"]},{"Key":"size, the","Fragments":["statement"]},{"Key":"the statement","Fragments":["``std::vector\u003c...\u003e","to","is"]},{"Key":"statement ``std::vector\u003c...\u003e","Fragments":["v"]},{"Key":"``std::vector\u003c...\u003e v","Fragments":["="]},{"Key":"v =","Fragments":["1;``"]},{"Key":"= 1;``","Fragments":["is"]},{"Key":"1;`` is","Fragments":["probably"]},{"Key":"probably not","Fragments":["intended","even","concern","as","buying","worth","your","necessary.","have","have"]},{"Key":"not intended","Fragments":["as"]},{"Key":"intended as","Fragments":["_construct"]},{"Key":"as _construct","Fragments":["a"]},{"Key":"_construct a","Fragments":["vector"]},{"Key":"vector v","Fragments":["with"]},{"Key":"v with","Fragments":["size"]},{"Key":"with size","Fragments":["1_."]},{"Key":"size 1_.","Fragments":["Another"]},{"Key":"1_. Another","Fragments":["example"]},{"Key":"Another example","Fragments":["would","input"]},{"Key":"example would","Fragments":["be"]},{"Key":"function ``void","Fragments":["func(const"]},{"Key":"``void func(const","Fragments":["std::vector\u003c...\u003e\u0026)``,"]},{"Key":"func(const std::vector\u003c...\u003e\u0026)``,","Fragments":["where"]},{"Key":"std::vector\u003c...\u003e\u0026)``, where","Fragments":["``func(1)``"]},{"Key":"where ``func(1)``","Fragments":["is"]},{"Key":"``func(1)`` is","Fragments":["unlikely"]},{"Key":"is unlikely","Fragments":["to"]},{"Key":"unlikely to","Fragments":["be","recognize"]},{"Key":"be meant","Fragments":["as"]},{"Key":"meant as","Fragments":["_call","an","a"]},{"Key":"as _call","Fragments":["func"]},{"Key":"_call func","Fragments":["with"]},{"Key":"func with","Fragments":["a"]},{"Key":"of size","Fragments":["1_.","4,"]},{"Key":"case I","Fragments":["think","can","forgot","only","compare","suppose.","think","have","find"]},{"Key":"is perfectly","Fragments":["reasonable","fine,","acceptable,"]},{"Key":"perfectly reasonable","Fragments":["to","implementation."]},{"Key":"reasonable to","Fragments":["write","use","assume","assume"]},{"Key":"write ``space_age","Fragments":["sa"]},{"Key":"``space_age sa","Fragments":["="]},{"Key":"sa =","Fragments":["5873;``"]},{"Key":"= 5873;``","Fragments":["or"]},{"Key":"5873;`` or","Fragments":["``print_spaceage(5873);``."]},{"Key":" @morgan","Fragments":["You"]},{"Key":"@morgan You","Fragments":["are"]},{"Key":"right, in","Fragments":["this"]},{"Key":"wouldn't change","Fragments":["existing"]},{"Key":"change existing","Fragments":["code."]},{"Key":"existing code.","Fragments":["The"]},{"Key":"code. The","Fragments":["only"]},{"Key":"I even","Fragments":["mention","compiled"]},{"Key":"even mention","Fragments":["it"]},{"Key":"mention it","Fragments":["at","allowing"]},{"Key":"at all","Fragments":["is","but","when","is","but","is","since","and","with","times","costs.\u003c/li\u003e.\u003c/ul\u003e","costs.\u003c/li\u003e.\u003c/ul\u003e","costs.\u003c/li\u003e.\u003c/ul\u003e"]},{"Key":"all is","Fragments":["because","needlessly","because"]},{"Key":"believe one","Fragments":["of"]},{"Key":"the main","Fragments":["benefits","logic","goal","goal","thread","points","function.","difference","body","reason)."]},{"Key":"main benefits","Fragments":["of"]},{"Key":"benefits of","Fragments":["this","C++","`const","using","using","going","using","using"]},{"Key":"this site","Fragments":["is","asks","is"]},{"Key":"site is","Fragments":["practice,","so"]},{"Key":"is practice,","Fragments":["and"]},{"Key":"practice, and","Fragments":["learning"]},{"Key":"and learning","Fragments":["techniques."]},{"Key":"learning techniques.","Fragments":["Personally"]},{"Key":"techniques. Personally","Fragments":["I"]},{"Key":"Personally I","Fragments":["hadn't","don't","love","prefer"]},{"Key":"hadn't even","Fragments":["considered","considered"]},{"Key":"even considered","Fragments":["a","```typedef```"]},{"Key":"performance impacts","Fragments":["mentioned"]},{"Key":"impacts mentioned","Fragments":["in"]},{"Key":"mentioned in","Fragments":["the","section","the"]},{"Key":"the talk","Fragments":["before"]},{"Key":"talk before","Fragments":["I"]},{"Key":"before I","Fragments":["saw","whine.","came","can","use","re-read","read"]},{"Key":"In summary,","Fragments":["the"]},{"Key":"summary, the","Fragments":["solution"]},{"Key":"is fine","Fragments":["as","to","but"]},{"Key":"fine as","Fragments":["it"]},{"Key":"it stands,","Fragments":["and","I"]},{"Key":"stands, and","Fragments":["I"]},{"Key":"I hope","Fragments":["I","to","this","you","me"]},{"Key":"hope I","Fragments":["was"]},{"Key":"to provide","Fragments":["you","a","a","overloads","a","was","```isalpha```","the","an"]},{"Key":"provide you","Fragments":["(or"]},{"Key":"you (or","Fragments":["someone"]},{"Key":"(or someone","Fragments":["reading"]},{"Key":"someone reading","Fragments":["this)","the"]},{"Key":"reading this)","Fragments":["with"]},{"Key":"this) with","Fragments":["a"]},{"Key":"a learning","Fragments":["resource."]},{"Key":"My personal","Fragments":["preference"]},{"Key":"personal preference","Fragments":["in","thing,","thing,","I","I","thing.","but"]},{"Key":"preference in","Fragments":["such"]},{"Key":"in such","Fragments":["things","simple"]},{"Key":"such things","Fragments":["is","-"]},{"Key":"things is","Fragments":["to"]},{"Key":"to indicate","Fragments":["with","an","for","I","when","a","the"]},{"Key":"indicate with","Fragments":["a"]},{"Key":"comment that","Fragments":["it","any","suggested"]},{"Key":"was intentionally","Fragments":["left"]},{"Key":"intentionally left","Fragments":["as"]},{"Key":"left as","Fragments":["an"]},{"Key":"an implicit","Fragments":["conversion","copy","conversion","conversion"]},{"Key":"conversion operator.","Fragments":["As"]},{"Key":"operator. As","Fragments":["a"]},{"Key":"a reviewer","Fragments":["of"]},{"Key":"reviewer of","Fragments":["the"]},{"Key":"code, I","Fragments":["have","have","don't","am","decided","made"]},{"Key":"no ability","Fragments":["to"]},{"Key":"ability to","Fragments":["distinguish","stop"]},{"Key":"to distinguish","Fragments":["between"]},{"Key":"distinguish between","Fragments":["an","uppercase"]},{"Key":"between an","Fragments":["oversight"]},{"Key":"an oversight","Fragments":["that","on","in"]},{"Key":"oversight that","Fragments":["may"]},{"Key":"that may","Fragments":["be","improve"]},{"Key":"be costly","Fragments":["to"]},{"Key":"costly to","Fragments":["the"]},{"Key":"code (in","Fragments":["a"]},{"Key":"(in a","Fragments":["larger","peculiar"]},{"Key":"larger project),","Fragments":["and"]},{"Key":"project), and","Fragments":["intentional"]},{"Key":"and intentional","Fragments":["use"]},{"Key":"intentional use","Fragments":["of"]},{"Key":"a feature","Fragments":["of"]},{"Key":"feature of","Fragments":["the","C++11."]},{"Key":"Since this","Fragments":["is","is"]},{"Key":"an educational","Fragments":["site"]},{"Key":"educational site","Fragments":["and"]},{"Key":"site and","Fragments":["there"]},{"Key":"and there","Fragments":["is","is","are","are","to","are"]},{"Key":"no larger","Fragments":["project"]},{"Key":"larger project","Fragments":["from"]},{"Key":"project from","Fragments":["which"]},{"Key":"from which","Fragments":["to"]},{"Key":"which to","Fragments":["draw"]},{"Key":"to draw","Fragments":["context,","a","a"]},{"Key":"draw context,","Fragments":["I"]},{"Key":"context, I","Fragments":["simply"]},{"Key":"I simply","Fragments":["assume","removed","took"]},{"Key":"simply assume","Fragments":["a"]},{"Key":"assume a","Fragments":["lack","sentence"]},{"Key":"a lack","Fragments":["of"]},{"Key":"lack of","Fragments":["knowledge","the","understanding","any","optimizations","descriptiveness"]},{"Key":"of knowledge","Fragments":["about"]},{"Key":"knowledge about","Fragments":["a","C++","the"]},{"Key":"somewhat hidden","Fragments":["part"]},{"Key":"hidden part","Fragments":["of"]},{"Key":"the language.","Fragments":["I","On"]},{"Key":"language. I","Fragments":["myself"]},{"Key":"I myself","Fragments":["didn't","would"]},{"Key":"myself didn't","Fragments":["know"]},{"Key":"constructor being","Fragments":["used"]},{"Key":"being used","Fragments":["for","in","multiple","simply","there","twice,"]},{"Key":"for implicit","Fragments":["conversion"]},{"Key":"conversion until","Fragments":["a"]},{"Key":"until a","Fragments":["code","certain"]},{"Key":"a code","Fragments":["review","review"]},{"Key":"code review","Fragments":["of","from","I'd"]},{"Key":"review of","Fragments":["a"]},{"Key":"a coworker","Fragments":["pointed"]},{"Key":"coworker pointed","Fragments":["it"]},{"Key":"pointed it","Fragments":["out.","out.","out.","out."]},{"Key":" Love","Fragments":["the","the"]},{"Key":"Love the","Fragments":["solution!","comments"]},{"Key":"personally do","Fragments":["not"]},{"Key":"compiler can","Fragments":["do","do"]},{"Key":"with `std::numeric_limits\u003cchar\u003e::min()`","Fragments":["but"]},{"Key":"`std::numeric_limits\u003cchar\u003e::min()` but","Fragments":["if"]},{"Key":"but if","Fragments":["you","you","you","performance","you","you","we","you're","there","you're","added","it's","there","they","you're","I","it","you","that","you","it","more","there","you","a","it","you"]},{"Key":"boost, you","Fragments":["can"]},{"Key":"a compile","Fragments":["time","with","error.","error","option."]},{"Key":"compile time","Fragments":["const","efficient,","for","and","and","at","opposed"]},{"Key":"time const","Fragments":["of"]},{"Key":"const of","Fragments":["this"]},{"Key":"this via","Fragments":["integer"]},{"Key":"via integer","Fragments":["traits"]},{"Key":" is_anagram","Fragments":["is"]},{"Key":"is_anagram is","Fragments":["making"]},{"Key":"word when","Fragments":["it"]},{"Key":"when it","Fragments":["doesn't","does","ends.","was","would","is","casts","is"]},{"Key":"need to.","Fragments":["there","You","You"]},{"Key":"to. there","Fragments":["is"]},{"Key":"is boost::iequals","Fragments":["and"]},{"Key":"boost::iequals and","Fragments":["the"]},{"Key":"count method","Fragments":["could"]},{"Key":"method could","Fragments":["lower"]},{"Key":"could lower","Fragments":["case"]},{"Key":"case letter","Fragments":["by","is"]},{"Key":"letter by","Fragments":["letter","letter?"]},{"Key":"by letter","Fragments":["to"]},{"Key":"letter to","Fragments":["avoid"]},{"Key":"avoid allocating","Fragments":["N","new"]},{"Key":"allocating N","Fragments":["aditional"]},{"Key":"N aditional","Fragments":["space."]},{"Key":"In C++03","Fragments":["``std::numeric_limits\u003c...\u003e::min()``"]},{"Key":"C++03 ``std::numeric_limits\u003c...\u003e::min()``","Fragments":["is"]},{"Key":"``std::numeric_limits\u003c...\u003e::min()`` is","Fragments":["a","a"]},{"Key":"a **static**","Fragments":["method"]},{"Key":"**static** method","Fragments":["(see"]},{"Key":"method (see","Fragments":["[§18.2.1.1](http://e-maxx.ru/bookz/files/cpp_standard.pdf#page=362))."]},{"Key":"In C++11","Fragments":["``std::numeric_limits\u003c...\u003e::min()``","we"]},{"Key":"C++11 ``std::numeric_limits\u003c...\u003e::min()``","Fragments":["is"]},{"Key":"a **constexpr**","Fragments":["(see"]},{"Key":"**constexpr** (see","Fragments":["[§18.2.3.2](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3337.pdf#page=442))."]},{"Key":"You're right,","Fragments":["using","I","that's"]},{"Key":"right, using","Fragments":["``boost::iequals``"]},{"Key":"using ``boost::iequals``","Fragments":["and"]},{"Key":"``boost::iequals`` and","Fragments":["``std::tolower``"]},{"Key":"and ``std::tolower``","Fragments":["instead"]},{"Key":"``std::tolower`` instead","Fragments":["of"]},{"Key":"of ``boost::to_lower``","Fragments":["seems"]},{"Key":"``boost::to_lower`` seems","Fragments":["reasonable."]},{"Key":"seems reasonable.","Fragments":["Thanks"]},{"Key":"reasonable. Thanks","Fragments":["for"]},{"Key":"Pretty simple.","Fragments":["I"]},{"Key":"simple. I","Fragments":["chose","like"]},{"Key":"use library","Fragments":["functions","cctype"]},{"Key":"functions for","Fragments":["conciseness.","sing,","strings","case","`is_quiet`","string","each"]},{"Key":"reverse loop","Fragments":["-"]},{"Key":"loop -","Fragments":["I"]},{"Key":"not super","Fragments":["happy"]},{"Key":"super happy","Fragments":["about"]},{"Key":"two if","Fragments":["statements"]},{"Key":" please","Fragments":["provide"]},{"Key":"please provide","Fragments":["header"]},{"Key":"provide header","Fragments":["file."]},{"Key":"header file.","Fragments":["You","Now","Since","Not","Most","But","Was","That","I","It"]},{"Key":"file. You","Fragments":["can","have"]},{"Key":"this when","Fragments":["you","I"]},{"Key":"you submit","Fragments":["by","two"]},{"Key":"submit by","Fragments":["specifying"]},{"Key":"by specifying","Fragments":["more"]},{"Key":"specifying more","Fragments":["than"]},{"Key":"file on","Fragments":["the"]},{"Key":"s nucleotide_count.h","Fragments":["nucleotide_count.cpp`"]},{"Key":"how ``using","Fragments":["Queen"]},{"Key":"``using Queen","Fragments":["="]},{"Key":"Queen =","Fragments":["std::pair\u003cint,"]},{"Key":"= std::pair\u003cint,","Fragments":["int\u003e``"]},{"Key":"std::pair\u003cint, int\u003e``","Fragments":["improves"]},{"Key":"int\u003e`` improves","Fragments":["readability."]},{"Key":"guess ``#include","Fragments":["\u003ciostream\u003e``"]},{"Key":"``#include \u003ciostream\u003e``","Fragments":["is"]},{"Key":"\u003ciostream\u003e`` is","Fragments":["an"]},{"Key":"an artefact","Fragments":["from"]},{"Key":"artefact from","Fragments":["the"]},{"Key":"the development","Fragments":["process.","environment"]},{"Key":"You provide","Fragments":["one"]},{"Key":"provide one","Fragments":["constructor"]},{"Key":"one constructor","Fragments":["with"]},{"Key":"constructor with","Fragments":["two","initialization"]},{"Key":"with two","Fragments":["default","incrementers"]},{"Key":"two default","Fragments":["parameters"]},{"Key":"default parameters","Fragments":["to"]},{"Key":"parameters to","Fragments":["enable","be","something","const"]},{"Key":"enable ``Queen()``","Fragments":["and"]},{"Key":"``Queen()`` and","Fragments":["``Queen(std::make_pair(0,"]},{"Key":"and ``Queen(std::make_pair(0,","Fragments":["0),"]},{"Key":"``Queen(std::make_pair(0, 0),","Fragments":["std::make_pair(7,"]},{"Key":"0), std::make_pair(7,","Fragments":["7))``."]},{"Key":"std::make_pair(7, 7))``.","Fragments":["That"]},{"Key":"7))``. That","Fragments":["makes"]},{"Key":"it also","Fragments":["possible","improves","has","helps","says","felt","helps","extends","becomes"]},{"Key":"also possible","Fragments":["to"]},{"Key":"pass only","Fragments":["one"]},{"Key":"one parameter","Fragments":["(``Queen(std::make_pair(7,"]},{"Key":"parameter (``Queen(std::make_pair(7,","Fragments":["3))``),"]},{"Key":"(``Queen(std::make_pair(7, 3))``),","Fragments":["which"]},{"Key":"3))``), which","Fragments":["might"]},{"Key":"which might","Fragments":["not","lead"]},{"Key":"be what","Fragments":["you","you"]},{"Key":"In function","Fragments":["```","`word_count::words(std::string)':","‘int","```in_english```","```validateChar()```:","‘int"]},{"Key":"function ```","Fragments":["AskHimAQuestion()"]},{"Key":"``` AskHimAQuestion()","Fragments":["```"]},{"Key":"AskHimAQuestion() ```","Fragments":["you"]},{"Key":"``` you","Fragments":["don't"]},{"Key":"``` s.rbegin()","Fragments":["```"]},{"Key":"s.rbegin() ```","Fragments":["."]},{"Key":"``` .","Fragments":["You"]},{"Key":". You","Fragments":["can"]},{"Key":"take ```s.rend()```","Fragments":["and"]},{"Key":"```s.rend()``` and","Fragments":["move"]},{"Key":"and move","Fragments":["one","the"]},{"Key":"move one","Fragments":["item"]},{"Key":"one item","Fragments":["backwards"]},{"Key":"item backwards","Fragments":["(```s---;```)."]},{"Key":"backwards (```s---;```).","Fragments":["This"]},{"Key":"(```s---;```). This","Fragments":["will"]},{"Key":"you last","Fragments":["character"]},{"Key":"last character","Fragments":["of","of","to","on","in","of","to","in","is","in","is","is","is"]},{"Key":"character of","Fragments":["the","the","each","the","the","the","the","the"]},{"Key":"would clarify","Fragments":["code"]},{"Key":"clarify code","Fragments":["a"]},{"Key":"Using some","Fragments":["standard","nesting"]},{"Key":"some standard","Fragments":["container","functions"]},{"Key":"standard container","Fragments":["(map,"]},{"Key":"container (map,","Fragments":["vector"]},{"Key":"(map, vector","Fragments":["etc)"]},{"Key":"vector etc)","Fragments":["would"]},{"Key":"etc) would","Fragments":["enable"]},{"Key":"would enable","Fragments":["to"]},{"Key":"enable to","Fragments":["remove"]},{"Key":"remove ```","Fragments":["char_to_index()```","#include"]},{"Key":"``` char_to_index()```","Fragments":["."]},{"Key":"explicit about","Fragments":["the","accepting","the"]},{"Key":"the namespaces.","Fragments":["Personal"]},{"Key":"namespaces. Personal","Fragments":["style,"]},{"Key":"Personal style,","Fragments":["I"]},{"Key":"style, I","Fragments":["guess.","would"]},{"Key":"How would","Fragments":["``std::vector``","I"]},{"Key":"would ``std::vector``","Fragments":["make"]},{"Key":"``std::vector`` make","Fragments":["``char_to_index``"]},{"Key":"make ``char_to_index``","Fragments":["unnecessary?"]},{"Key":"``char_to_index`` unnecessary?","Fragments":["Isn't"]},{"Key":"unnecessary? Isn't","Fragments":["``std::array``"]},{"Key":"Isn't ``std::array``","Fragments":["a"]},{"Key":"``std::array`` a","Fragments":["standard"]},{"Key":" What's","Fragments":["the","wrong","the","the","stdexcept","with","with"]},{"Key":"the purpose","Fragments":["of","of","for","of","of","of","and","of"]},{"Key":"purpose of","Fragments":["member","the","a","the","the","shuffling","all"]},{"Key":"of member","Fragments":["variable","data.","functions."]},{"Key":"Putting ``typedef","Fragments":["..."]},{"Key":"``typedef ...","Fragments":["coord;``"]},{"Key":"... coord;``","Fragments":["into"]},{"Key":"coord;`` into","Fragments":["``namespace"]},{"Key":"into ``namespace","Fragments":["queen_attack``"]},{"Key":"``namespace queen_attack``","Fragments":["prevents"]},{"Key":"queen_attack`` prevents","Fragments":["name"]},{"Key":"prevents name","Fragments":["collisions"]},{"Key":"name collisions","Fragments":["for"]},{"Key":"collisions for","Fragments":["users"]},{"Key":"for users","Fragments":["that","of"]},{"Key":"users that","Fragments":["have"]},{"Key":"that have","Fragments":["their","at","been","been","no"]},{"Key":"have their","Fragments":["own","args"]},{"Key":"own ``coord``","Fragments":["type."]},{"Key":"With member","Fragments":["variables"]},{"Key":"variables ``w``/``b``","Fragments":["and"]},{"Key":"``w``/``b`` and","Fragments":["``x1``/``x2``/``y1``/``y2``"]},{"Key":"and ``x1``/``x2``/``y1``/``y2``","Fragments":["you"]},{"Key":"``x1``/``x2``/``y1``/``y2`` you","Fragments":["are"]},{"Key":"are storing","Fragments":["some"]},{"Key":"storing some","Fragments":["redundant"]},{"Key":"some redundant","Fragments":["data."]},{"Key":"need ``blank``","Fragments":["as"]},{"Key":"``blank`` as","Fragments":["a"]},{"Key":"member variable,","Fragments":["because"]},{"Key":"variable, because","Fragments":["instead"]},{"Key":"because instead","Fragments":["of"]},{"Key":"of ``std::vector\u003cstd::string\u003e","Fragments":["blank_copy(this-\u003eblank);``"]},{"Key":"``std::vector\u003cstd::string\u003e blank_copy(this-\u003eblank);``","Fragments":["you"]},{"Key":"blank_copy(this-\u003eblank);`` you","Fragments":["could"]},{"Key":"write ``std::vector\u003cstd::string\u003e","Fragments":["blank_copy(_blank());``"]},{"Key":" ``_blank()``","Fragments":["could"]},{"Key":"``_blank()`` could","Fragments":["be"]},{"Key":"static since","Fragments":["it","the"]},{"Key":"are testing","Fragments":["the","the"]},{"Key":"testing the","Fragments":["north-west","program","string","first"]},{"Key":"the north-west","Fragments":["/"]},{"Key":"north-west /","Fragments":["south-east"]},{"Key":"/ south-east","Fragments":["diagonal,"]},{"Key":"south-east diagonal,","Fragments":["but"]},{"Key":"diagonal, but","Fragments":["not"]},{"Key":"the north-east","Fragments":["/"]},{"Key":"north-east /","Fragments":["south-west"]},{"Key":"/ south-west","Fragments":["diagonal."]},{"Key":"south-west diagonal.","Fragments":["To"]},{"Key":"diagonal. To","Fragments":["be"]},{"Key":"be fair,","Fragments":["there"]},{"Key":"fair, there","Fragments":["is"]},{"Key":"In case","Fragments":["of","of"]},{"Key":"of (multi)map/set/vector","Fragments":["you"]},{"Key":"(multi)map/set/vector you","Fragments":["could"]},{"Key":"store character","Fragments":["in"]},{"Key":"in container","Fragments":["without"]},{"Key":"container without","Fragments":["the"]},{"Key":"an index","Fragments":["for","is"]},{"Key":"index for","Fragments":["the"]},{"Key":"character. Index","Fragments":["is"]},{"Key":"Index is","Fragments":["found"]},{"Key":"is found","Fragments":["by","the","in","in","is"]},{"Key":"found by","Fragments":["container"]},{"Key":"by container","Fragments":["itself"]},{"Key":"container itself","Fragments":["automagically."]},{"Key":" Right,","Fragments":["I"]},{"Key":"Right, I","Fragments":["could"]},{"Key":"a ``std::map``","Fragments":["or"]},{"Key":"``std::map`` or","Fragments":["a"]},{"Key":"between ``std::vector``","Fragments":["and"]},{"Key":"``std::vector`` and","Fragments":["``std::array``"]},{"Key":"and ``std::array``","Fragments":["in"]},{"Key":"``std::array`` in","Fragments":["this"]},{"Key":"this case.","Fragments":["Using","And","Maybe.","What","Wrapping"]},{"Key":"case. Using","Fragments":["``char``"]},{"Key":"Using ``char``","Fragments":["as"]},{"Key":"``char`` as","Fragments":["an"]},{"Key":"index is","Fragments":["dangerous,"]},{"Key":"is dangerous,","Fragments":["because"]},{"Key":"dangerous, because","Fragments":["(depending"]},{"Key":"because (depending","Fragments":["on"]},{"Key":"(depending on","Fragments":["the","library","std:string's","visibility)."]},{"Key":"the platform)","Fragments":["``char``"]},{"Key":"platform) ``char``","Fragments":["might"]},{"Key":"``char`` might","Fragments":["be"]},{"Key":"a ``std::multimap``","Fragments":["as"]},{"Key":"``std::multimap`` as","Fragments":["a"]},{"Key":"a ``std::map``,","Fragments":["or"]},{"Key":"``std::map``, or","Fragments":["use"]},{"Key":"a ``std::set``","Fragments":["with"]},{"Key":"``std::set`` with","Fragments":["a"]},{"Key":"custom _compare_","Fragments":["function,"]},{"Key":"_compare_ function,","Fragments":["but"]},{"Key":"function, but","Fragments":["that","here","I've","decided","that's","not"]},{"Key":"a misuse","Fragments":["of"]},{"Key":"misuse of","Fragments":["the"]},{"Key":"personally think","Fragments":["you","your"]},{"Key":"using way","Fragments":["to"]},{"Key":"to many","Fragments":["get","errors.","languages…","\"if\"s,","others."]},{"Key":"many get","Fragments":["and"]},{"Key":"get and","Fragments":["set"]},{"Key":"and set","Fragments":["functions.","the"]},{"Key":"and why","Fragments":["do"]},{"Key":"a AnimalFactory","Fragments":["and"]},{"Key":"AnimalFactory and","Fragments":["Animal"]},{"Key":"and Animal","Fragments":["class?"]},{"Key":"Animal class?","Fragments":["Why"]},{"Key":"class? Why","Fragments":["not"]},{"Key":"the maps","Fragments":["you"]},{"Key":"maps you","Fragments":["already"]},{"Key":"already have","Fragments":["to","a","(if","a","the","almost","a","a"]},{"Key":"to store","Fragments":["the","all","temporal","it","the","the","the","the","the","the","the","both","all"]},{"Key":"and adding","Fragments":["some"]},{"Key":"some comments","Fragments":["would","would","for","explaining","on"]},{"Key":"comments would","Fragments":["probably","help","help."]},{"Key":" You've","Fragments":["got","got","named","crunched"]},{"Key":"of repeated","Fragments":["code","subtraction"]},{"Key":"repeated code","Fragments":["here."]},{"Key":"code here.","Fragments":["To"]},{"Key":"here. To","Fragments":["avoid"]},{"Key":"To avoid","Fragments":["this","recompiling","linker","being","adding","some","making","making"]},{"Key":"this you","Fragments":["could","can"]},{"Key":"replace all","Fragments":["of","those","of"]},{"Key":"of ```int","Fragments":["to(int"]},{"Key":"```int to(int","Fragments":["limitNum)```"]},{"Key":"to(int limitNum)```","Fragments":["with"]},{"Key":"limitNum)``` with","Fragments":["```return"]},{"Key":"with ```return","Fragments":["to({3,"]},{"Key":"```return to({3,","Fragments":["5},"]},{"Key":"to({3, 5},","Fragments":["limitNum);```"]},{"Key":" Initially","Fragments":["I"]},{"Key":"Initially I","Fragments":["had"]},{"Key":"had different","Fragments":["bools"]},{"Key":"different bools","Fragments":["like"]},{"Key":"bools like","Fragments":["allUpper"]},{"Key":"like allUpper","Fragments":[",atleastAlpha"]},{"Key":"allUpper ,atleastAlpha","Fragments":[","]},{"Key":",atleastAlpha ,","Fragments":["allDigit"]},{"Key":", allDigit","Fragments":[","]},{"Key":"allDigit ,","Fragments":["atleastDigit"]},{"Key":", atleastDigit","Fragments":[","]},{"Key":"atleastDigit ,","Fragments":["but"]},{"Key":", but","Fragments":["at","why","you"]},{"Key":"but at","Fragments":["the","least","different","the","least","least","least"]},{"Key":"end it","Fragments":["rounded"]},{"Key":"it rounded","Fragments":["up"]},{"Key":"rounded up","Fragments":["to"]},{"Key":"using only","Fragments":["two.","one","one"]},{"Key":"only two.","Fragments":["Also"]},{"Key":"two. Also","Fragments":["I'm"]},{"Key":"Also I'm","Fragments":["using","very"]},{"Key":"I'm using","Fragments":["lamdas","gcc","the","only","a","all","only"]},{"Key":"using lamdas","Fragments":["so"]},{"Key":"lamdas so","Fragments":["they're"]},{"Key":"so they're","Fragments":["going"]},{"Key":"they're going","Fragments":["offscreen","to"]},{"Key":"going offscreen","Fragments":["here"]},{"Key":"offscreen here","Fragments":[","]},{"Key":"here ,","Fragments":["should"]},{"Key":", should","Fragments":["I"]},{"Key":"should I","Fragments":["inser","force","declare","be"]},{"Key":"I inser","Fragments":["line"]},{"Key":"inser line","Fragments":["breaks"]},{"Key":"line breaks","Fragments":["b/w","and","were"]},{"Key":"breaks b/w","Fragments":["them?"]},{"Key":"What would","Fragments":["this","happen","be"]},{"Key":"would this","Fragments":["return"]},{"Key":"this return","Fragments":["in"]},{"Key":"return in","Fragments":["case","a"]},{"Key":"in case","Fragments":["of","of,","you","you","of","of","of","someone","the","the","the"]},{"Key":"of \"HAVE","Fragments":["YOU"]},{"Key":"\"HAVE YOU","Fragments":["CALLED"]},{"Key":"YOU CALLED","Fragments":["911?\""]},{"Key":"CALLED 911?\"","Fragments":["I"]},{"Key":"911?\" I","Fragments":["guess"]},{"Key":"guess test","Fragments":["would"]},{"Key":" Sorry,","Fragments":["I"]},{"Key":"Sorry, I","Fragments":["didn't"]},{"Key":"notice that","Fragments":["you","`is_shouting`","you","you"]},{"Key":"use ```s.rend()```,","Fragments":["not"]},{"Key":"```s.rend()```, not","Fragments":["```s.end()```."]},{"Key":"not ```s.end()```.","Fragments":["In"]},{"Key":"```s.end()```. In","Fragments":["this"]},{"Key":"it works","Fragments":["just","without","just","with","in","for","as","and","now.","well.","alright","by","just"]},{"Key":"works just","Fragments":["fine","fine,","fine,"]},{"Key":"just fine","Fragments":["the","and"]},{"Key":"fine the","Fragments":["way"]},{"Key":"you placed","Fragments":["the"]},{"Key":"placed the","Fragments":["allUpper"]},{"Key":"the allUpper","Fragments":["and"]},{"Key":"allUpper and","Fragments":["atleastAlpha","aleastAlpha."]},{"Key":"and atleastAlpha","Fragments":["checks"]},{"Key":"atleastAlpha checks","Fragments":["in"]},{"Key":"checks in","Fragments":["the","each","the","the"]},{"Key":"if statement","Fragments":["you","before","faster","works.","is","in","instead","either.","for","starting"]},{"Key":"statement you","Fragments":["would"]},{"Key":"few CPU","Fragments":["cycles,"]},{"Key":"CPU cycles,","Fragments":["but"]},{"Key":"cycles, but","Fragments":["that"]},{"Key":"probably ruin","Fragments":["readability."]},{"Key":"ruin readability.","Fragments":["You"]},{"Key":"readability. You","Fragments":["could"]},{"Key":"could probably","Fragments":["use","get","make","be","still","accomplish","be","j","just","have","rewrite","drop","use","remove"]},{"Key":"probably use","Fragments":["nested","boost::format"]},{"Key":"nested ifs","Fragments":["to"]},{"Key":"ifs to","Fragments":["have"]},{"Key":"bool allUpper","Fragments":["="]},{"Key":"allUpper =","Fragments":["std::all_of(s.begin()"]},{"Key":"= std::all_of(s.begin()","Fragments":[","]},{"Key":"std::all_of(s.begin() ,","Fragments":["s.end()"]},{"Key":", s.end()","Fragments":[",",","]},{"Key":"s.end() ,","Fragments":["[](char","[](char"]},{"Key":", [](char","Fragments":["ch){","ch){"]},{"Key":"[](char ch){","Fragments":["if(std::isupper(ch)","if(std::isalpha(ch))"]},{"Key":"ch){ if(std::isupper(ch)","Fragments":["||"]},{"Key":"if(std::isupper(ch) ||","Fragments":["!std::isalpha(ch))"]},{"Key":"|| !std::isalpha(ch))","Fragments":["return"]},{"Key":"!std::isalpha(ch)) return","Fragments":["true;"]},{"Key":"return false;","Fragments":["});","});"]},{"Key":"bool atleastAlpha","Fragments":["="]},{"Key":"atleastAlpha =","Fragments":["std::any_of(s.begin()"]},{"Key":"= std::any_of(s.begin()","Fragments":[","]},{"Key":"std::any_of(s.begin() ,","Fragments":["s.end()"]},{"Key":"ch){ if(std::isalpha(ch))","Fragments":["return"]},{"Key":"if(std::isalpha(ch)) return","Fragments":["true;"]},{"Key":" if(atleastAlpha","Fragments":["\u0026\u0026"]},{"Key":"if(atleastAlpha \u0026\u0026","Fragments":["!s.empty())return"]},{"Key":"\u0026\u0026 !s.empty())return","Fragments":["\"Whoa,"]},{"Key":"!s.empty())return \"Whoa,","Fragments":["chill"]},{"Key":"Or you","Fragments":["could","could","could","could","could"]},{"Key":"just make","Fragments":["a","your"]},{"Key":"a wraper","Fragments":["function"]},{"Key":"wraper function","Fragments":["for"]},{"Key":"for allUpper","Fragments":["and"]},{"Key":" instead","Fragments":["of","of","of","of"]},{"Key":"if (clause.find_last_of(\"?\")","Fragments":["=="]},{"Key":"(clause.find_last_of(\"?\") ==","Fragments":["clause.length()-1)"]},{"Key":"== clause.length()-1)","Fragments":["//Line"]},{"Key":"clause.length()-1) //Line","Fragments":["31"]},{"Key":" if(clause[clause.length-1]","Fragments":["=="]},{"Key":"if(clause[clause.length-1] ==","Fragments":["\"?\")"]},{"Key":"looking it","Fragments":["up","(and"]},{"Key":"up i","Fragments":["think"]},{"Key":"a faster","Fragments":["implementation.","but","way"]},{"Key":" other","Fragments":["then"]},{"Key":"other then","Fragments":["that","discovering"]},{"Key":"looks good","Fragments":["to","to","enough."]},{"Key":" But,","Fragments":["the","the"]},{"Key":"But, the","Fragments":["first","situation's"]},{"Key":"first overload","Fragments":["is"]},{"Key":"overload is","Fragments":["fast","fast"]},{"Key":"is slow!","Fragments":["You"]},{"Key":"slow! You","Fragments":["could"]},{"Key":"could generalize","Fragments":["the"]},{"Key":"generalize the","Fragments":["first"]},{"Key":"first solution","Fragments":["so"]},{"Key":"solution so","Fragments":["the"]},{"Key":"second overload","Fragments":["is"]},{"Key":"This does","Fragments":["not"]},{"Key":"not implement","Fragments":["the"]},{"Key":"algorithm described","Fragments":["in"]},{"Key":"described in","Fragments":["the"]},{"Key":"the readme.","Fragments":["the","Let"]},{"Key":"readme. the","Fragments":["sieve"]},{"Key":"the sieve","Fragments":["saves","as","reduced","again.","from","and"]},{"Key":"sieve saves","Fragments":["times"]},{"Key":"saves times","Fragments":["by"]},{"Key":"times by","Fragments":["advancing","many"]},{"Key":"by advancing","Fragments":["by"]},{"Key":"advancing by","Fragments":["multiples,"]},{"Key":"by multiples,","Fragments":["this"]},{"Key":"multiples, this","Fragments":["advances"]},{"Key":"this advances","Fragments":["by"]},{"Key":"advances by","Fragments":["1."]},{"Key":"by 1.","Fragments":["This"]},{"Key":"1. This","Fragments":["is","is","is","seems"]},{"Key":"a side","Fragments":["effect","note,","note:"]},{"Key":"side effect","Fragments":["of","of"]},{"Key":"effect of","Fragments":["not","the","stopping"]},{"Key":"of not","Fragments":["keeping","`islower()`\"","terminating"]},{"Key":"not keeping","Fragments":["the"]},{"Key":"sieve as","Fragments":["a","asked"]},{"Key":"a collection","Fragments":["of","of"]},{"Key":"of \"marked\"","Fragments":["numbers."]},{"Key":"like you'll","Fragments":["react"]},{"Key":"you'll react","Fragments":["to"]},{"Key":"to \"4?\"","Fragments":["with"]},{"Key":"\"4?\" with","Fragments":["\"Woah,"]},{"Key":"with \"Woah,","Fragments":["chill"]},{"Key":"\"Woah, chill","Fragments":["out!\""]},{"Key":"out!\" instead","Fragments":["of"]},{"Key":"of \"Sure.\".","Fragments":["At"]},{"Key":"\"Sure.\". At","Fragments":["least,"]},{"Key":"At least,","Fragments":["in"]},{"Key":"least, in","Fragments":["the"]},{"Key":"the Python","Fragments":["version","provides.","is_upper()"]},{"Key":"Python version","Fragments":["(I"]},{"Key":"version (I","Fragments":["don't"]},{"Key":"(I don't","Fragments":["know"]},{"Key":"C++ tests),","Fragments":["you'd"]},{"Key":"tests), you'd","Fragments":["also"]},{"Key":"you'd also","Fragments":["make"]},{"Key":"a `inStatmentLow","Fragments":["="]},{"Key":"`inStatmentLow =","Fragments":["boost::to_lower_copy`"]},{"Key":"= boost::to_lower_copy`","Fragments":["and"]},{"Key":"boost::to_lower_copy` and","Fragments":["make"]},{"Key":"that at","Fragments":["least","least","least"]},{"Key":"one character","Fragments":["has","at"]},{"Key":"character has","Fragments":["`inStatementCap[i]"]},{"Key":"has `inStatementCap[i]","Fragments":["!="]},{"Key":"`inStatementCap[i] !=","Fragments":["inStatementLow[i]`"]},{"Key":"!= inStatementLow[i]`","Fragments":["for"]},{"Key":"inStatementLow[i]` for","Fragments":["it"]},{"Key":"for it","Fragments":["to","to","to","if","the","again;","to","as"]},{"Key":"First you","Fragments":["don't"]},{"Key":"need two","Fragments":["functions","separate"]},{"Key":"for sing,","Fragments":["you"]},{"Key":"sing, you","Fragments":["can"]},{"Key":"use default","Fragments":["values"]},{"Key":"default values","Fragments":["in","in"]},{"Key":"file like","Fragments":["this"]},{"Key":"std::string sing(int","Fragments":["first,"]},{"Key":"sing(int first,","Fragments":["int"]},{"Key":"first, int","Fragments":["last"]},{"Key":"int last","Fragments":["=","="]},{"Key":"std is","Fragments":["considered"]},{"Key":"is considered","Fragments":["bad","better,","a","a","a"]},{"Key":"considered bad","Fragments":["practice,"]},{"Key":"bad practice,","Fragments":["for","but","or"]},{"Key":"practice, for","Fragments":["the"]},{"Key":"best of","Fragments":["both"]},{"Key":"of both","Fragments":["worlds","words","words","the","inputs"]},{"Key":"both worlds","Fragments":["use"]},{"Key":" Lastly","Fragments":["i"]},{"Key":"Lastly i","Fragments":["am"]},{"Key":"i am","Fragments":["not","pretty","already","too","nitpicking,","really"]},{"Key":"big fan","Fragments":["of","of"]},{"Key":"the if/else","Fragments":["statements,"]},{"Key":"if/else statements,","Fragments":["it"]},{"Key":"statements, it","Fragments":["makes"]},{"Key":"it hard","Fragments":["to"]},{"Key":"and run","Fragments":["time",":D","cmake"]},{"Key":"run time","Fragments":["ineffective","optimization."]},{"Key":"time ineffective","Fragments":["since"]},{"Key":"ineffective since","Fragments":["you"]},{"Key":"same comparison","Fragments":["multiple"]},{"Key":"comparison multiple","Fragments":["times."]},{"Key":" example","Fragments":["instead"]},{"Key":"example instead","Fragments":["of:"]},{"Key":"(num \u003e","Fragments":["0)","0)","0){"]},{"Key":"\u003e 0)","Fragments":["sstm","sstm"]},{"Key":"0) sstm","Fragments":["\u003c\u003c","\u003c\u003c"]},{"Key":"sstm \u003c\u003c","Fragments":["num;","\"No","\"","\"","\"","num;","\"no","\"","num;","num","\"No"]},{"Key":"else sstm","Fragments":["\u003c\u003c","\u003c\u003c","\u003c\u003c"]},{"Key":"\u003c\u003c \"No","Fragments":["more\";","more"]},{"Key":"(num ==","Fragments":["1)","1)","1){"]},{"Key":"== 1)","Fragments":["sstm","sstm"]},{"Key":"1) sstm","Fragments":["\u003c\u003c","\u003c\u003c"]},{"Key":"\u003c\u003c \"","Fragments":["bottle\";","bottles\";","of","bottle\";","of"]},{"Key":" sstm","Fragments":["\u003c\u003c","\u003c\u003c","\u003c\u003c","\u003c\u003c"]},{"Key":"\" of","Fragments":["beer","beer"]},{"Key":"\u003c\u003c \"no","Fragments":["more\";"]},{"Key":"use something","Fragments":["like(its","like"]},{"Key":"something like(its","Fragments":["kind"]},{"Key":"like(its kind","Fragments":["of"]},{"Key":"of sudo","Fragments":["code"]},{"Key":"sudo code","Fragments":["since"]},{"Key":"code since","Fragments":["i"]},{"Key":"since i","Fragments":["haven't","did","check","was"]},{"Key":"i haven't","Fragments":["compiled"]},{"Key":"haven't compiled","Fragments":["it):"]},{"Key":" btlString","Fragments":["=","="]},{"Key":"btlString =","Fragments":["\"","\""]},{"Key":"= \"","Fragments":["bottle\";","bottles\";"]},{"Key":"\u003c\u003c num","Fragments":["\u003c\u003c","\u003c\u003c"]},{"Key":"num \u003c\u003c","Fragments":["btlString","btlString;"]},{"Key":"\u003c\u003c btlString","Fragments":["\u003c\u003c"]},{"Key":"btlString \u003c\u003c","Fragments":["\""]},{"Key":"wall, \"","Fragments":["\u003c\u003c"]},{"Key":"\" \u003c\u003c","Fragments":["num","capacity"]},{"Key":"\"No more","Fragments":["bottles"]},{"Key":"more bottles","Fragments":["of"]},{"Key":"wall, no","Fragments":["more"]},{"Key":"no more","Fragments":["bottles\";","than","than"]},{"Key":"some nesting","Fragments":["makes"]},{"Key":"nesting makes","Fragments":["readability"]},{"Key":"makes readability","Fragments":["much"]},{"Key":"readability much","Fragments":["better,"]},{"Key":"better, and","Fragments":["the"]},{"Key":"the creation","Fragments":["and","of","of","of"]},{"Key":"creation and","Fragments":["assigning"]},{"Key":"and assigning","Fragments":["of"]},{"Key":"assigning of","Fragments":["string"]},{"Key":"string might","Fragments":["take"]},{"Key":"might take","Fragments":["a"]},{"Key":"little longer,","Fragments":["i","but"]},{"Key":"longer, i","Fragments":["think"]},{"Key":"makes up","Fragments":["for","most"]},{"Key":"up for","Fragments":["it.","me","a"]},{"Key":" EDIT:","Fragments":["fixed","Today","I've"]},{"Key":"EDIT: fixed","Fragments":["some"]},{"Key":"fixed some","Fragments":["spelling"]},{"Key":"some spelling","Fragments":["and"]},{"Key":"spelling and","Fragments":["grammatical"]},{"Key":"and grammatical","Fragments":["errors."]},{"Key":"just like","Fragments":["in","my","an","std::.","to","mine"]},{"Key":"like in","Fragments":["the","PHP"]},{"Key":"the prime","Fragments":["exersize,","factors...","factorizations","factors"]},{"Key":"prime exersize,","Fragments":["you"]},{"Key":"exersize, you","Fragments":["only"]},{"Key":"to go","Fragments":["up","either","that","into","down","all","for","back","through","yet.","w/","for","through","about","about","for","about","down","down","about"]},{"Key":"go up","Fragments":["to"]},{"Key":"to sqrt(n)","Fragments":["not"]},{"Key":"sqrt(n) not","Fragments":["(n)"]},{"Key":"not (n)","Fragments":["(line"]},{"Key":"(n) (line","Fragments":["16)"]},{"Key":"this seems","Fragments":["to","mysterious,"]},{"Key":"much simpler","Fragments":["implementation","that","to"]},{"Key":"simpler implementation","Fragments":["of"]},{"Key":"of what","Fragments":["I","you","the","would","things","we","suffix","I"]},{"Key":"to put","Fragments":["isspace","using","the","the","it","all","them","```scores```","them","all","code","another","it","all","into","into","them","it","it","it","the"]},{"Key":"put isspace","Fragments":["or"]},{"Key":"isspace or","Fragments":["isupper"]},{"Key":"or isupper","Fragments":["in"]},{"Key":"isupper in","Fragments":["a"]},{"Key":" Default","Fragments":["values!","values"]},{"Key":"Default values!","Fragments":["The"]},{"Key":"values! The","Fragments":["obvious"]},{"Key":"The obvious","Fragments":["solution."]},{"Key":"obvious solution.","Fragments":["I"]},{"Key":"solution. I","Fragments":["don't","guess","am","like","do","like","would","don't"]},{"Key":"didn't think","Fragments":["of","it","of","of","about","of","of","of","about","they","to","through","too","I"]},{"Key":" Interesting.","Fragments":["I","How","I"]},{"Key":"Interesting. I","Fragments":["knew","used"]},{"Key":"knew you","Fragments":["weren't"]},{"Key":"you weren't","Fragments":["supposed"]},{"Key":"weren't supposed","Fragments":["to"]},{"Key":"supposed to","Fragments":["put","move","go","be","communicate","include","work.","help","be","be","do.","be","respond","output","do.","be","ignore","ignore","do","just","keep","be","throw","iterate","make","be","throw","throw","throw","throw"]},{"Key":"put using","Fragments":["namespace"]},{"Key":"in header","Fragments":["files,","files","files.","files","files."]},{"Key":"header files,","Fragments":["but"]},{"Key":"files, but","Fragments":["I","it's"]},{"Key":"hadn't realized","Fragments":["that"]},{"Key":"it's potentially","Fragments":["dangerous"]},{"Key":"potentially dangerous","Fragments":["anywhere."]},{"Key":"it's pretty","Fragments":["hard","safe","silly"]},{"Key":"pretty hard","Fragments":["to"]},{"Key":"follow, adding","Fragments":["individual"]},{"Key":"adding individual","Fragments":["words"]},{"Key":"individual words","Fragments":["to","like"]},{"Key":"words to","Fragments":["the","a","see","put","lowercase,"]},{"Key":"the stream","Fragments":["like"]},{"Key":"stream like","Fragments":["that."]},{"Key":"like that.","Fragments":["Using","Anyhow,","Which","I",":)","Lesson","Thanks"]},{"Key":"that. Using","Fragments":["variables"]},{"Key":"Using variables","Fragments":["so"]},{"Key":"variables so","Fragments":["that"]},{"Key":"that a","Fragments":["whole","word","map","TODO","namespace","different","forced","sort","```std::string```","bit---so","traditional","look.","question","pattern","shout","shout","substring","char","text","string","programmer","`string`","step","class","name","class","size","switch"]},{"Key":"whole line","Fragments":["can"]},{"Key":"line can","Fragments":["be"]},{"Key":"be added","Fragments":["at","in","automatically","to.","to"]},{"Key":"added at","Fragments":["once"]},{"Key":"at once","Fragments":["would","and","with","using","is","instead"]},{"Key":"once would","Fragments":["definitely"]},{"Key":"would definitely","Fragments":["make","have","be","be","make","want","incur"]},{"Key":"definitely make","Fragments":["it","that","sense"]},{"Key":"what's going","Fragments":["on.","on:","on.","on"]},{"Key":" input.back()","Fragments":["might"]},{"Key":"input.back() might","Fragments":["be"]},{"Key":"be cleaner","Fragments":["then","as","to"]},{"Key":"cleaner then","Fragments":["input[input.length()"]},{"Key":"then input[input.length()","Fragments":["-"]},{"Key":"input[input.length() -","Fragments":["1]","1]"]},{"Key":"Thanks @lyric","Fragments":["for"]},{"Key":"@lyric for","Fragments":["your"]},{"Key":"your suggestions.","Fragments":["I'm","I"]},{"Key":"suggestions. I'm","Fragments":["a"]},{"Key":"I'm a","Fragments":["bit","tiny","crappy","big","big","fan","way","pretty","bit","bit"]},{"Key":"bit biased","Fragments":["towards"]},{"Key":"biased towards","Fragments":["readablity"]},{"Key":"towards readablity","Fragments":["but"]},{"Key":"readablity but","Fragments":["I"]},{"Key":"could achieve","Fragments":["same"]},{"Key":"achieve same","Fragments":["what"]},{"Key":"same what","Fragments":["you've"]},{"Key":"what you've","Fragments":["suggested","done"]},{"Key":"you've suggested","Fragments":["by","later.As"]},{"Key":"suggested by","Fragments":["moving","FrostyTopaz","the","@marvin)"]},{"Key":"by moving","Fragments":["up","the","the","the"]},{"Key":"moving up","Fragments":["`if(s.empty())"]},{"Key":"up `if(s.empty())","Fragments":["return"]},{"Key":"`if(s.empty()) return","Fragments":["\"Fine."]},{"Key":"return \"Fine.","Fragments":["Be","Be","Be"]},{"Key":"that way!\";`","Fragments":["just"]},{"Key":"way!\";` just","Fragments":["below"]},{"Key":"just below","Fragments":["removing"]},{"Key":"below removing","Fragments":["aa"]},{"Key":"removing aa","Fragments":["the"]},{"Key":"aa the","Fragments":["whitespace"]},{"Key":"whitespace so","Fragments":["that"]},{"Key":"it never","Fragments":["calculates","does"]},{"Key":"never calculates","Fragments":["`allUpper`"]},{"Key":"calculates `allUpper`","Fragments":["and"]},{"Key":"`allUpper` and","Fragments":["`atleastAlpha`"]},{"Key":"and `atleastAlpha`","Fragments":["when"]},{"Key":"`atleastAlpha` when","Fragments":["not"]},{"Key":"when not","Fragments":["needed."]},{"Key":" Someone","Fragments":["might"]},{"Key":"Someone might","Fragments":["call","add"]},{"Key":"might call","Fragments":["Bob"]},{"Key":"call Bob","Fragments":["with"]},{"Key":"Bob with","Fragments":["an"]},{"Key":"string. Note","Fragments":[","]},{"Key":"Note ,","Fragments":["an"]},{"Key":", an","Fragments":["empty"]},{"Key":"with single/multiple","Fragments":["strings"]},{"Key":"single/multiple strings","Fragments":["are"]},{"Key":" Link","Fragments":[":"]},{"Key":"Link :","Fragments":["http://ideone.com/FalebG"]},{"Key":"is infact","Fragments":["a"]},{"Key":"infact a","Fragments":["case"]},{"Key":"a case","Fragments":["for","like","insensitive","statement","without","like","like:"]},{"Key":"for silence","Fragments":["(","and","and","before","first","and"]},{"Key":"silence (","Fragments":["2nd"]},{"Key":"( 2nd","Fragments":["last"]},{"Key":"2nd last","Fragments":["I"]},{"Key":"last I","Fragments":["guess)"]},{"Key":"I guess)","Fragments":["in"]},{"Key":"guess) in","Fragments":["test"]},{"Key":"test file","Fragments":[",","and","to","to","defined","there","as","any"]},{"Key":", which","Fragments":["would","is"]},{"Key":" thx","Fragments":["man"]},{"Key":"thx man","Fragments":[","]},{"Key":"man ,","Fragments":["good"]},{"Key":", good","Fragments":["idea"]},{"Key":"good idea","Fragments":[",","to","to","too.","of","to","for","to","to","to","to","as","to"]},{"Key":"idea ,","Fragments":["I"]},{"Key":", I","Fragments":["was"]},{"Key":"sure case","Fragments":["I"]},{"Key":"can have","Fragments":["access","std::string","their","any","different","degeneracies.","a","unwanted","either"]},{"Key":"have access","Fragments":["to","to","to"]},{"Key":"to char","Fragments":["of","..."]},{"Key":"char of","Fragments":["string","some"]},{"Key":" @domingo","Fragments":["hmm,"]},{"Key":"@domingo hmm,","Fragments":["i"]},{"Key":"hmm, i","Fragments":["don't"]},{"Key":"don't remember","Fragments":["failing","the"]},{"Key":"remember failing","Fragments":["the"]},{"Key":"failing the","Fragments":["test,"]},{"Key":"the test,","Fragments":["but","because","so"]},{"Key":"test, but","Fragments":["they"]},{"Key":"but they","Fragments":["might","shouldn't","require","might","are","would","might"]},{"Key":"they might","Fragments":["have","not","have","need"]},{"Key":"have added","Fragments":["more","a","some"]},{"Key":"added more","Fragments":["tests"]},{"Key":"more tests","Fragments":["since"]},{"Key":"tests since","Fragments":["i"]},{"Key":"i did","Fragments":["this","the","this"]},{"Key":"one 8","Fragments":["months"]},{"Key":"8 months","Fragments":["ago."]},{"Key":"update my","Fragments":["files","solution"]},{"Key":"my files","Fragments":["and"]},{"Key":"and see","Fragments":["if","how","it","how","if","what"]},{"Key":"if anything","Fragments":["has","this"]},{"Key":"anything has","Fragments":["changed."]},{"Key":" @abbie","Fragments":["Nope"]},{"Key":"@abbie Nope","Fragments":["no"]},{"Key":"Nope no","Fragments":["errors,"]},{"Key":"no errors,","Fragments":["since"]},{"Key":"errors, since","Fragments":["i"]},{"Key":"i check","Fragments":["if"]},{"Key":"if any","Fragments":["char","lowercase"]},{"Key":"a space,","Fragments":["when"]},{"Key":"space, when","Fragments":["a"]},{"Key":"empty ,","Fragments":["the"]},{"Key":", the","Fragments":["for"]},{"Key":"loop never","Fragments":["runs"]},{"Key":"never runs","Fragments":["so"]},{"Key":"runs so","Fragments":["it"]},{"Key":"it just","Fragments":["returns","for","felt","works.","adds","hasn't","feel","shifted","now","once,","seems","that","reads"]},{"Key":"just returns","Fragments":["the","an"]},{"Key":"returns the","Fragments":["default","value","previous","last","result","result","shorter","result","boolean","boolean","'NULL'"]},{"Key":"looks great!","Fragments":["You"]},{"Key":"great! You","Fragments":["can"]},{"Key":"can skip","Fragments":["namespace","marking","the","the"]},{"Key":"skip namespace","Fragments":["for"]},{"Key":"argument in","Fragments":["line","place"]},{"Key":"line 29.","Fragments":["You","Unfortunately,"]},{"Key":"29. You","Fragments":["may"]},{"Key":"may take","Fragments":["care","away"]},{"Key":"of single","Fragments":["function","quotes"]},{"Key":"function exit","Fragments":["point,"]},{"Key":"point, that","Fragments":["may"]},{"Key":"may improve","Fragments":["readability","your"]},{"Key":"readability aka","Fragments":["code"]},{"Key":"aka code","Fragments":["analysis"]},{"Key":"code analysis","Fragments":["a"]},{"Key":"analysis a","Fragments":["bit."]},{"Key":" Exactly","Fragments":["that"]},{"Key":"Exactly that","Fragments":["is"]},{"Key":"the cause","Fragments":["why"]},{"Key":"cause why","Fragments":["I"]},{"Key":"I filled","Fragments":["in","a"]},{"Key":"filled in","Fragments":["a"]},{"Key":"bug report","Fragments":["earlier"]},{"Key":"report earlier","Fragments":["the"]},{"Key":"earlier the","Fragments":["day:"]},{"Key":"the day:","Fragments":["https://github.com/exercism/xcpp/issues/49"]},{"Key":" By","Fragments":["having","the","the","position","the","the","the"]},{"Key":"By having","Fragments":["an"]},{"Key":"having an","Fragments":["`Animal`","anonymous"]},{"Key":"an `Animal`","Fragments":["and"]},{"Key":"`Animal` and","Fragments":["`AnimalFactory`"]},{"Key":"and `AnimalFactory`","Fragments":["class,"]},{"Key":"`AnimalFactory` class,","Fragments":["I"]},{"Key":"class, I","Fragments":["think","just"]},{"Key":"to properly","Fragments":["model"]},{"Key":"properly model","Fragments":["the"]},{"Key":"model the","Fragments":["animals"]},{"Key":"the animals","Fragments":["in"]},{"Key":"animals in","Fragments":["the"]},{"Key":"verses and","Fragments":["most"]},{"Key":"and most","Fragments":["importantly","algorithms","algorithms"]},{"Key":"most importantly","Fragments":["the"]},{"Key":"importantly the","Fragments":["food","first","\u0026."]},{"Key":"the food","Fragments":["chain"]},{"Key":"food chain","Fragments":["that"]},{"Key":"chain that","Fragments":["exists"]},{"Key":"that exists","Fragments":["among","in"]},{"Key":"exists among","Fragments":["them,"]},{"Key":"among them,","Fragments":["just"]},{"Key":"them, just","Fragments":["how"]},{"Key":"just how","Fragments":["the"]},{"Key":"how the","Fragments":["problem","normal","parser","`nucleotide_counts()`","allocator","set","code","loop"]},{"Key":"problem set","Fragments":["puts"]},{"Key":"set puts","Fragments":["it."]},{"Key":"puts it.","Fragments":["Of"]},{"Key":"it. Of","Fragments":["course"]},{"Key":"course it","Fragments":["is"]},{"Key":"data needed","Fragments":["in"]},{"Key":"needed in","Fragments":["a","future","their"]},{"Key":"and manipulate","Fragments":["that"]},{"Key":"manipulate that","Fragments":["to"]},{"Key":"right output","Fragments":["for"]},{"Key":"the verses.","Fragments":["But"]},{"Key":"verses. But","Fragments":["I","I"]},{"Key":"thinking more","Fragments":["in"]},{"Key":"more in","Fragments":["the","details,","some","the","the","Knuth's"]},{"Key":"the direction","Fragments":["of"]},{"Key":"direction of","Fragments":["having"]},{"Key":"having a","Fragments":["setup","hard","single","namespace","namespace","one-line","completely","single","full","look","global","look","look"]},{"Key":"a setup","Fragments":["that"]},{"Key":"setup that","Fragments":["would"]},{"Key":"would easily","Fragments":["allow","handle"]},{"Key":"easily allow","Fragments":["you"]},{"Key":"new animal","Fragments":["/"]},{"Key":"animal /","Fragments":["verse"]},{"Key":"/ verse","Fragments":["to"]},{"Key":"verse to","Fragments":["the"]},{"Key":"the scene.","Fragments":["You've"]},{"Key":"scene. You've","Fragments":["noticed"]},{"Key":"You've noticed","Fragments":["that"]},{"Key":"map where","Fragments":["I"]},{"Key":"I store","Fragments":["similar"]},{"Key":"store similar","Fragments":["looking"]},{"Key":"similar looking","Fragments":["/"]},{"Key":"looking /","Fragments":["repetitive"]},{"Key":"/ repetitive","Fragments":["lines"]},{"Key":"repetitive lines","Fragments":["because"]},{"Key":"lines because","Fragments":["that"]},{"Key":"is safely","Fragments":["included"]},{"Key":"safely included","Fragments":["the"]},{"Key":"included the","Fragments":["chain","relevant"]},{"Key":"the chain","Fragments":["property"]},{"Key":"chain property","Fragments":["of"]},{"Key":"property of","Fragments":["the"]},{"Key":"the animals.","Fragments":["That"]},{"Key":"animals. That","Fragments":["was"]},{"Key":"That was","Fragments":["the","clever"]},{"Key":"the motive","Fragments":["behind"]},{"Key":"motive behind","Fragments":["my"]},{"Key":"behind my","Fragments":["implementation."]},{"Key":"the getters","Fragments":["\u0026","just","were"]},{"Key":"getters \u0026","Fragments":["setters,"]},{"Key":"\u0026 setters,","Fragments":["those"]},{"Key":"setters, those","Fragments":["can"]},{"Key":"those can","Fragments":["be"]},{"Key":"removed by","Fragments":["simply"]},{"Key":"by simply","Fragments":["exposing"]},{"Key":"simply exposing","Fragments":["the"]},{"Key":"exposing the","Fragments":["fields"]},{"Key":"the fields","Fragments":["of"]},{"Key":"fields of","Fragments":["the"]},{"Key":"the `Animal`","Fragments":["class."]},{"Key":"`Animal` class.","Fragments":["It's"]},{"Key":"class. It's","Fragments":["just"]},{"Key":"It's just","Fragments":["a","a","a","so","a"]},{"Key":"a choice","Fragments":["that","for"]},{"Key":"choice that","Fragments":["I"]},{"Key":"I took.","Fragments":["And"]},{"Key":"took. And","Fragments":["lastly,"]},{"Key":"And lastly,","Fragments":["I"]},{"Key":"lastly, I","Fragments":["didn't"]},{"Key":"didn't want","Fragments":["to","to","to","to","used"]},{"Key":"to clutter","Fragments":["the"]},{"Key":"clutter the","Fragments":["code"]},{"Key":"code with","Fragments":["comments,","their","some","that","old-style","algorithm","this.","this.","and"]},{"Key":"with comments,","Fragments":["especially"]},{"Key":"comments, especially","Fragments":["if"]},{"Key":"especially if","Fragments":["the","they're","the","they","Bob"]},{"Key":"is descriptive","Fragments":["enough"]},{"Key":"descriptive enough","Fragments":["to"]},{"Key":"the story.","Fragments":["But"]},{"Key":"story. But","Fragments":["please"]},{"Key":"But please","Fragments":["point"]},{"Key":"please point","Fragments":["me"]},{"Key":"point me","Fragments":["to","to"]},{"Key":"the part","Fragments":["that","where","of","of"]},{"Key":"part that","Fragments":["you"]},{"Key":"think needs","Fragments":["some"]},{"Key":"needs some","Fragments":["comments."]},{"Key":"some comments.","Fragments":["Any"]},{"Key":"comments. Any","Fragments":["further"]},{"Key":"Any further","Fragments":["feedback"]},{"Key":"further feedback","Fragments":["would"]},{"Key":"feedback would","Fragments":["be","be"]},{"Key":"nice as","Fragments":["well."]},{"Key":"right. Your","Fragments":["comment"]},{"Key":"Your comment","Fragments":["got","is"]},{"Key":"comment got","Fragments":["me"]},{"Key":"got me","Fragments":["curious,","repeatedly","thinking"]},{"Key":"me curious,","Fragments":["so"]},{"Key":"curious, so","Fragments":["I"]},{"Key":"I implemented","Fragments":["four","it","a","helper"]},{"Key":"implemented four","Fragments":["optimizations"]},{"Key":"four optimizations","Fragments":["of"]},{"Key":"optimizations of","Fragments":["the"]},{"Key":"code on","Fragments":["the"]},{"Key":"the left","Fragments":["and","```ret"]},{"Key":"left and","Fragments":["measured"]},{"Key":"and measured","Fragments":["the"]},{"Key":"measured the","Fragments":["performance."]},{"Key":"the performance.","Fragments":["(see"]},{"Key":"performance. (see","Fragments":["https://gist.github.com/8e64d25bfe5e1f4df700"]},{"Key":"(see https://gist.github.com/8e64d25bfe5e1f4df700","Fragments":["and"]},{"Key":"https://gist.github.com/8e64d25bfe5e1f4df700 and","Fragments":["https://docs.google.com/spreadsheets/d/1h_5MEG_cepsQjMUwKGykat_ZJUd-BYc3l8iZqbrDFFs/edit?usp=sharing#)"]},{"Key":"Your suggestion","Fragments":["(without"]},{"Key":"suggestion (without","Fragments":["any"]},{"Key":"(without any","Fragments":["other"]},{"Key":"other optimizations)","Fragments":["reduced"]},{"Key":"optimizations) reduced","Fragments":["the"]},{"Key":"reduced the","Fragments":["runtime","runtime","runtime","runtime"]},{"Key":"the runtime","Fragments":["by","by","by","by","complexity.","structure.","of","of"]},{"Key":"runtime by","Fragments":["about","about","about","about"]},{"Key":"Only considering","Fragments":["odd"]},{"Key":"considering odd","Fragments":["numbers"]},{"Key":"odd numbers","Fragments":["(and"]},{"Key":"numbers (and","Fragments":["2,"]},{"Key":"(and 2,","Fragments":["of"]},{"Key":"2, of","Fragments":["course)"]},{"Key":"of course)","Fragments":["reduced"]},{"Key":"course) reduced","Fragments":["the"]},{"Key":"Not including","Fragments":["even"]},{"Key":"including even","Fragments":["numbers"]},{"Key":"even numbers","Fragments":["in","since","aren't","aren't","are"]},{"Key":"numbers in","Fragments":["the"]},{"Key":"sieve reduced","Fragments":["the","the"]},{"Key":"A combination","Fragments":["of"]},{"Key":"combination of","Fragments":["your","the","no","searching","`\\r`"]},{"Key":"your suggestion","Fragments":["and","makes","in"]},{"Key":"suggestion and","Fragments":["the"]},{"Key":"the smaller","Fragments":["sieve"]},{"Key":"smaller sieve","Fragments":["reduced"]},{"Key":" 67%","Fragments":["is"]},{"Key":"67% is","Fragments":["pretty"]},{"Key":"is pretty","Fragments":["impressive","important","much","cool,","straight","solid)","much","much","sound,","much","clean","complicated,","much","confusing.","clever.","similar.","ugly","straightforward.","C-like,","bad","minimal","clearly","much"]},{"Key":"pretty impressive","Fragments":["IMHO."]},{"Key":"Removed the","Fragments":["setters","redundant","unneeded","Member","```cmath```","size","redundant","call"]},{"Key":"the setters","Fragments":["and"]},{"Key":"setters and","Fragments":["getters"]},{"Key":"and getters","Fragments":["that"]},{"Key":"getters that","Fragments":["cluttered"]},{"Key":"that cluttered","Fragments":["the"]},{"Key":"cluttered the","Fragments":["code."]},{"Key":"the redundant","Fragments":["empty","condition"]},{"Key":"redundant empty","Fragments":["strings"]},{"Key":"strings that","Fragments":["were","are","don't"]},{"Key":"that were","Fragments":["in","the","able","the","to"]},{"Key":"the `animalExtraDescs`","Fragments":["map."]},{"Key":" Added","Fragments":["constant","missing","regular","**using**","a","boost::trim(words)","missing","the","two","a"]},{"Key":"Added constant","Fragments":["canned"]},{"Key":"constant canned","Fragments":["strings"]},{"Key":"canned strings","Fragments":[","]},{"Key":"strings ,","Fragments":["replaced"]},{"Key":", replaced","Fragments":["whitespace"]},{"Key":"replaced whitespace","Fragments":["removal"]},{"Key":" Formatted","Fragments":["and"]},{"Key":"Formatted and","Fragments":["added"]},{"Key":"added comments.","Fragments":["No"]},{"Key":"comments. No","Fragments":["code"]},{"Key":"No code","Fragments":["change."]},{"Key":"have seen","Fragments":["this","'?'","on","a"]},{"Key":"seen this","Fragments":["numerous","described"]},{"Key":"this numerous","Fragments":["time"]},{"Key":"numerous time","Fragments":[","]},{"Key":"time ,","Fragments":["but"]},{"Key":"why convert","Fragments":["to"]},{"Key":"to `toupper()`","Fragments":["and"]},{"Key":"`toupper()` and","Fragments":["check"]},{"Key":"and check","Fragments":["for","their","that","if","all","each"]},{"Key":"its result","Fragments":["when"]},{"Key":"result when","Fragments":["you"]},{"Key":"actually check","Fragments":["for"]},{"Key":"for `isupper()`?","Fragments":["you"]},{"Key":"`isupper()`? you","Fragments":["can"]},{"Key":"also try","Fragments":["reserving","picking"]},{"Key":"try reserving","Fragments":["static"]},{"Key":"reserving static","Fragments":["strings"]},{"Key":"static strings","Fragments":["in"]},{"Key":"in start","Fragments":["and"]},{"Key":"start and","Fragments":["returning","end","end","end","end"]},{"Key":"and returning","Fragments":["const\u0026","the","``*this``.","a","on","them,","it","the"]},{"Key":"returning const\u0026","Fragments":["strings"]},{"Key":"const\u0026 strings","Fragments":["since"]},{"Key":"strings since","Fragments":["number"]},{"Key":"since number","Fragments":["of"]},{"Key":"of responses","Fragments":["are","to","to","easily"]},{"Key":"responses are","Fragments":["actually","part"]},{"Key":"are actually","Fragments":["limited."]},{"Key":"a further","Fragments":["optimization"]},{"Key":"further optimization","Fragments":["to"]},{"Key":"be had,","Fragments":["the"]},{"Key":"had, the","Fragments":["initial"]},{"Key":"initial value","Fragments":["of"]},{"Key":"Since for","Fragments":["a"]},{"Key":"be prime,","Fragments":["it"]},{"Key":"prime, it","Fragments":["had"]},{"Key":"it had","Fragments":["to"]},{"Key":"be disvisible","Fragments":["by"]},{"Key":"disvisible by","Fragments":["a"]},{"Key":"by a","Fragments":["value","number","destructor?","unique),","whole","'\\0'...","smart","non","function","combining","```contains_letter```","little","multiplicative","transform.","question","great"]},{"Key":"value \u003c","Fragments":["sqrt"]},{"Key":"\u003c sqrt","Fragments":["of"]},{"Key":"sqrt of","Fragments":["it,"]},{"Key":"it, then","Fragments":["if","`myString`"]},{"Key":"then if","Fragments":["you"]},{"Key":"have marked","Fragments":["sieved"]},{"Key":"marked sieved","Fragments":["all"]},{"Key":"sieved all","Fragments":["primes"]},{"Key":"all primes","Fragments":["up","from"]},{"Key":"primes up","Fragments":["to"]},{"Key":"to candidate,","Fragments":["then"]},{"Key":"candidate, then","Fragments":["you"]},{"Key":"start at","Fragments":["`candidate","1","*1*","the","int"]},{"Key":"at `candidate","Fragments":["*"]},{"Key":"`candidate *","Fragments":["candidate`"]},{"Key":"* candidate`","Fragments":["(you"]},{"Key":"candidate` (you","Fragments":["can"]},{"Key":"(you can","Fragments":["skip","use","see"]},{"Key":"skip marking","Fragments":["false"]},{"Key":"marking false","Fragments":["anything"]},{"Key":"false anything","Fragments":["that"]},{"Key":"that MUST","Fragments":["have"]},{"Key":"MUST have","Fragments":["been"]},{"Key":"been covered","Fragments":["by"]},{"Key":"covered by","Fragments":["something","the","the"]},{"Key":"by something","Fragments":["previously)."]},{"Key":"something previously).","Fragments":["This"]},{"Key":"previously). This","Fragments":["is"]},{"Key":"first non","Fragments":["prime"]},{"Key":"non prime","Fragments":["that","number"]},{"Key":"prime that","Fragments":["hasn't"]},{"Key":"that hasn't","Fragments":["been"]},{"Key":"been already","Fragments":["marked"]},{"Key":"already marked","Fragments":["false"]},{"Key":"marked false","Fragments":["by"]},{"Key":"false by","Fragments":["previous"]},{"Key":"by previous","Fragments":["divisors."]},{"Key":"make use","Fragments":["of","of","of.","of","of","of"]},{"Key":"algorithms like","Fragments":["`any_of`","that","that"]},{"Key":"like `any_of`","Fragments":["\u0026"]},{"Key":"`any_of` \u0026","Fragments":["`all_of`"]},{"Key":"\u0026 `all_of`","Fragments":["for"]},{"Key":"`all_of` for","Fragments":["finding"]},{"Key":"for finding","Fragments":["properties"]},{"Key":"finding properties","Fragments":["of"]},{"Key":"characters over","Fragments":["a"]},{"Key":"over a","Fragments":["string.","bunch.","case","range,"]},{"Key":"string. Also","Fragments":["you"]},{"Key":"could possibly","Fragments":["eliminate","work...","compare.","be","just","be.","reject"]},{"Key":"possibly eliminate","Fragments":["use"]},{"Key":"eliminate use","Fragments":["of"]},{"Key":"boost trim","Fragments":["function"]},{"Key":"function by","Fragments":["using","defining","using","reference."]},{"Key":"using standard","Fragments":["library","library"]},{"Key":"can possibly","Fragments":["simplify"]},{"Key":"possibly simplify","Fragments":["your"]},{"Key":"simplify your","Fragments":["code","code","loops","code?","yelling"]},{"Key":"bit ,","Fragments":["merge"]},{"Key":", merge","Fragments":["two"]},{"Key":"merge two","Fragments":["functions"]},{"Key":"functions together","Fragments":["when"]},{"Key":"together when","Fragments":["possible."]},{"Key":"when possible.","Fragments":["It"]},{"Key":"possible. It","Fragments":["would"]},{"Key":"It would","Fragments":["help","cause","also","silently","change","be","be","be","be","be","be","boost","improve","be","be","definitely","reduce","add","be","be","be","be"]},{"Key":"would help","Fragments":["in","since","is","however","encapsulate","readability","in","this."]},{"Key":"help in","Fragments":["readablity","any"]},{"Key":"in readablity","Fragments":["by"]},{"Key":"readablity by","Fragments":["reducing"]},{"Key":"by reducing","Fragments":["no."]},{"Key":"reducing no.","Fragments":["of"]},{"Key":"no. of","Fragments":["code"]},{"Key":"can drop","Fragments":["boost"]},{"Key":"drop boost","Fragments":["for"]},{"Key":"boost for","Fragments":["trimming","the","unittesting,","a","a","trimming."]},{"Key":"trimming and","Fragments":["use"]},{"Key":"use erase-remove","Fragments":["from"]},{"Key":"erase-remove from","Fragments":["standard"]},{"Key":"from standard","Fragments":["library."]},{"Key":" Can","Fragments":["you","*only*","you","you","make"]},{"Key":"Can you","Fragments":["explain","point","explain","really","please","explain","give","think","think","think","think","think","think","think","break","clarify","infer"]},{"Key":"you explain","Fragments":["what","the","what","what","to","what"]},{"Key":"explain what","Fragments":["regex","you","the","contains_alpha"]},{"Key":"what regex","Fragments":["does?"]},{"Key":"regex does?","Fragments":["And"]},{"Key":"does? And","Fragments":["I've"]},{"Key":"And I've","Fragments":["no","been"]},{"Key":"I've no","Fragments":["idea"]},{"Key":"idea about","Fragments":["performance"]},{"Key":"performance of","Fragments":["regex","locales?"]},{"Key":"regex over","Fragments":["traditional"]},{"Key":"over traditional","Fragments":["parse-filtering"]},{"Key":"traditional parse-filtering","Fragments":["of"]},{"Key":"parse-filtering of","Fragments":["data"]},{"Key":"of data","Fragments":["so","through","generated","on","on","on"]},{"Key":"data so","Fragments":["I"]},{"Key":"just suggest","Fragments":["you"]},{"Key":"suggest you","Fragments":["could","make","do","either","look"]},{"Key":"done it","Fragments":["without","here","with","correct."]},{"Key":"it without","Fragments":["regex","declaring","modification,","using","putting","the"]},{"Key":"without regex","Fragments":[","]},{"Key":"regex ,","Fragments":["unless"]},{"Key":", unless","Fragments":["whole"]},{"Key":"unless whole","Fragments":["of"]},{"Key":"whole of","Fragments":["your"]},{"Key":"your team","Fragments":["knows"]},{"Key":"team knows","Fragments":["ways"]},{"Key":"knows ways","Fragments":["around"]},{"Key":"ways around","Fragments":["them."]},{"Key":"Not necessary","Fragments":[","]},{"Key":"necessary ,","Fragments":["but"]},{"Key":"can transform","Fragments":["that"]},{"Key":"transform that","Fragments":["class"]},{"Key":"that class","Fragments":["into","type"]},{"Key":"class into","Fragments":["a","just"]},{"Key":"namespace ,","Fragments":["and"]},{"Key":", and","Fragments":["get","`none_of`"]},{"Key":"of static","Fragments":["functions.","objects","regex.","locals","variables"]},{"Key":"static functions.","Fragments":["Rest"]},{"Key":"functions. Rest","Fragments":["is"]},{"Key":"Rest is","Fragments":["good!"]},{"Key":"this only","Fragments":["happens","using","using","using","using"]},{"Key":"only happens","Fragments":["to"]},{"Key":"happens to","Fragments":["handle","correspond","guess","the"]},{"Key":" `convert(\"100c001\")`","Fragments":["would"]},{"Key":"`convert(\"100c001\")` would","Fragments":["not"]},{"Key":"would not","Fragments":["return","become","be","bother","need","change.","be","be","have","increase","pass","recommend","have","use","bring","be"]},{"Key":" pow","Fragments":["is"]},{"Key":"pow is","Fragments":["inefficient"]},{"Key":"is inefficient","Fragments":["because","here.","here.","here.","here.","here."]},{"Key":"inefficient because","Fragments":["of"]},{"Key":"of type","Fragments":["conversion.","`std::string::const_iterator`.","`T`,","std::string,","is","`char`,"]},{"Key":" oops,","Fragments":["that's"]},{"Key":"oops, that's","Fragments":["true!"]},{"Key":"that's true!","Fragments":[":)"]},{"Key":" lowercase_inst","Fragments":["can"]},{"Key":"lowercase_inst can","Fragments":["be"]},{"Key":"be replaced","Fragments":["with","by","with","by","with","by:","to","with","by","by","to","with","with","with","with"]},{"Key":"replaced with","Fragments":["boost::iequals","constants","a","```for```","```bp.second","a","`std::string`.","just","std","the","something","```if","```ret[word]++;```.","its","`std::is_permutation`\u003c/li\u003e","the"]},{"Key":"with boost::iequals","Fragments":["so"]},{"Key":"boost::iequals so","Fragments":["you"]},{"Key":" Crap,","Fragments":["that"]},{"Key":"Crap, that","Fragments":["is"]},{"Key":"like my","Fragments":["entry.","implementation","dna_to_rna","stripped"]},{"Key":"my entry.","Fragments":["Only"]},{"Key":"entry. Only","Fragments":["shorter"]},{"Key":"Only shorter","Fragments":["and"]},{"Key":"shorter and","Fragments":["without","simpler","makes","clearer."]},{"Key":"without error","Fragments":["message."]},{"Key":"didn't try","Fragments":["to","to"]},{"Key":"use polymorphism","Fragments":["in","for"]},{"Key":"polymorphism in","Fragments":["this"]},{"Key":"this task","Fragments":["since","but"]},{"Key":"task since","Fragments":["replacing"]},{"Key":"since replacing","Fragments":["4"]},{"Key":"replacing 4","Fragments":["cases"]},{"Key":"4 cases","Fragments":["in","(silence,"]},{"Key":"cases in","Fragments":["a","retrospect;"]},{"Key":"switch for","Fragments":["several"]},{"Key":"for several","Fragments":["small"]},{"Key":"several small","Fragments":["classes"]},{"Key":"small classes","Fragments":["was"]},{"Key":"classes was","Fragments":["not"]},{"Key":"not worth","Fragments":["the","the","the","worrying"]},{"Key":"worth the","Fragments":["trouble","while.","tiny","effort.","loss","effort."]},{"Key":"trouble in","Fragments":["my"]},{"Key":"To make","Fragments":["things","a","the","things"]},{"Key":"make things","Fragments":["more","easy","cleaner.","slightly","more","easier","clear,"]},{"Key":"things more","Fragments":["interesting,","efficient","the"]},{"Key":"more interesting,","Fragments":["this"]},{"Key":"interesting, this","Fragments":["exercise"]},{"Key":"exercise should","Fragments":["have"]},{"Key":"in Russian","Fragments":["where"]},{"Key":"Russian where","Fragments":["declination"]},{"Key":"where declination","Fragments":["rules"]},{"Key":"declination rules","Fragments":["for"]},{"Key":"rules for","Fragments":["numbers","`classify_statement`"]},{"Key":"numbers are","Fragments":["way","more","in","more","counted","immediately"]},{"Key":"are way","Fragments":["more","too"]},{"Key":"complex than","Fragments":["in","it"]},{"Key":"than in","Fragments":["English","the","process_raw_in","c++"]},{"Key":"in English","Fragments":["(plus","class"]},{"Key":"English (plus","Fragments":["Unicode,"]},{"Key":"(plus Unicode,","Fragments":["of"]},{"Key":"Unicode, of","Fragments":["course)."]},{"Key":"I hoped","Fragments":["I"]},{"Key":"hoped I","Fragments":["could"]},{"Key":"use freemarker","Fragments":["(http://freemarker.org/),"]},{"Key":"freemarker (http://freemarker.org/),","Fragments":["but"]},{"Key":"(http://freemarker.org/), but","Fragments":["I"]},{"Key":"not able","Fragments":["to"]},{"Key":"find anything","Fragments":["similar"]},{"Key":"anything similar","Fragments":["for"]},{"Key":"similar for","Fragments":["C++"]},{"Key":"C++ (I","Fragments":["didn't","skipped"]},{"Key":"(I didn't","Fragments":["spend","think","test"]},{"Key":"didn't spend","Fragments":["much","much"]},{"Key":"spend much","Fragments":["time","(any)"]},{"Key":"much time","Fragments":["on","it","in"]},{"Key":"on searching","Fragments":["too)."]},{"Key":" @luella","Fragments":["The"]},{"Key":"@luella The","Fragments":["optimisation"]},{"Key":"The optimisation","Fragments":["was"]},{"Key":"optimisation was","Fragments":["just"]},{"Key":"was just","Fragments":["set","happy","trying","too","as","curious","immediately","the","trying","trying","a"]},{"Key":"just set","Fragments":["to"]},{"Key":"set to","Fragments":["the","optimize","a","empty.\u003c/li\u003e","empty.\u003c/li\u003e"]},{"Key":"compiler default","Fragments":["AFAIK"]},{"Key":"default AFAIK","Fragments":["(compiler"]},{"Key":"AFAIK (compiler","Fragments":["used"]},{"Key":"(compiler used","Fragments":["was"]},{"Key":"used was","Fragments":["gcc"]},{"Key":"was gcc","Fragments":["4.9)."]},{"Key":"you calculate","Fragments":["results"]},{"Key":"calculate results","Fragments":["in"]},{"Key":"in ```nucleotide_count()```","Fragments":["and"]},{"Key":"```nucleotide_count()``` and","Fragments":["```count()```"]},{"Key":"and ```count()```","Fragments":["each"]},{"Key":"```count()``` each","Fragments":["time"]},{"Key":"each time","Fragments":["these","in","or","you","(O(n^2)).","to","they","you","you"]},{"Key":"time these","Fragments":["functions"]},{"Key":"are called.","Fragments":["When","Clearly"]},{"Key":"called. When","Fragments":["your"]},{"Key":"When your","Fragments":["```counter```","code"]},{"Key":"your ```counter```","Fragments":["object"]},{"Key":"```counter``` object","Fragments":["is"]},{"Key":"object is","Fragments":["initialized","already","left","const.","managed","what"]},{"Key":"is initialized","Fragments":["with","to","to","to","to"]},{"Key":"initialized with","Fragments":["a"]},{"Key":"and after","Fragments":["that","that","optimization","every"]},{"Key":"that ```nucleotide_count```","Fragments":["is"]},{"Key":"```nucleotide_count``` is","Fragments":["called"]},{"Key":"called 10","Fragments":["times,"]},{"Key":"10 times,","Fragments":["you"]},{"Key":"times, you","Fragments":["have"]},{"Key":"handle ```dna_string```","Fragments":["ten"]},{"Key":"```dna_string``` ten","Fragments":["times."]},{"Key":"ten times.","Fragments":["I"]},{"Key":"times. I","Fragments":["suggest"]},{"Key":"work in","Fragments":["the","```count```.","the","header","the","the","the","the","real","`endswith`","a","embedded","every"]},{"Key":"constructor (input","Fragments":["string"]},{"Key":"(input string","Fragments":["can't"]},{"Key":"string can't","Fragments":["be"]},{"Key":"can't be","Fragments":["changed","const","prime.","any","included","changed,","expected","included","shouting","negative).","less","less"]},{"Key":"be changed","Fragments":["anyway","but","later.","in","in"]},{"Key":"changed anyway","Fragments":["if"]},{"Key":"anyway if","Fragments":["the"]},{"Key":"already created)","Fragments":["and"]},{"Key":"created) and","Fragments":["```nucleotide_count```"]},{"Key":"and ```nucleotide_count```","Fragments":["and"]},{"Key":"```nucleotide_count``` and","Fragments":["```count```"]},{"Key":"and ```count```","Fragments":["should"]},{"Key":"```count``` should","Fragments":["be"]},{"Key":"be simple","Fragments":["getter"]},{"Key":" No","Fragments":["need","offense,","header","solution","particular","problem!","real","real","temporary"]},{"Key":"No need","Fragments":["for","to","to","to","for","to","to"]},{"Key":"for iterators,","Fragments":["just"]},{"Key":"iterators, just","Fragments":["use"]},{"Key":" `old`","Fragments":["should"]},{"Key":"`old` should","Fragments":["be"]},{"Key":"be taken","Fragments":["as"]},{"Key":"taken as","Fragments":["a"]},{"Key":" Almost","Fragments":["same"]},{"Key":"Almost same","Fragments":["as"]},{"Key":"as 'nth","Fragments":["prime'."]},{"Key":" Should","Fragments":["exclude","use","exclude","use"]},{"Key":"Should exclude","Fragments":["all","all"]},{"Key":"exclude all","Fragments":["the","the"]},{"Key":"the even","Fragments":["numbers.","numbers."]},{"Key":" `to(int","Fragments":["value,"]},{"Key":"`to(int value,","Fragments":["int"]},{"Key":"value, int","Fragments":["number)`"]},{"Key":"int number)`","Fragments":["does"]},{"Key":"number)` does","Fragments":["not"]},{"Key":" suggest","Fragments":["i","`std::set`","`std::set`","to","`std::set`","`std::set`"]},{"Key":"suggest i","Fragments":["start"]},{"Key":"i start","Fragments":["at"]},{"Key":"at 1","Fragments":["since","and"]},{"Key":"1 since","Fragments":["erg+=0"]},{"Key":"since erg+=0","Fragments":["is"]},{"Key":"erg+=0 is","Fragments":["a"]},{"Key":"suggest `std::set`","Fragments":["since","for","for","for"]},{"Key":"`std::set` since","Fragments":["duplicate"]},{"Key":"since duplicate","Fragments":["factors","factors"]},{"Key":"duplicate factors","Fragments":["are","are","should","are"]},{"Key":"factors are","Fragments":["irrelevant.","irrelevant.","irrelevant."]},{"Key":"looks good,","Fragments":["but","works","but"]},{"Key":"there has","Fragments":["been"]},{"Key":"been a","Fragments":["lot","lot","gentle","medieval","separate","relatively","long"]},{"Key":"of manual","Fragments":["labor","checks"]},{"Key":"manual labor","Fragments":["done."]},{"Key":"labor done.","Fragments":["String"]},{"Key":"done. String","Fragments":["cleaning"]},{"Key":"String cleaning","Fragments":["and"]},{"Key":"cleaning and","Fragments":["cutting"]},{"Key":"and cutting","Fragments":["can"]},{"Key":"cutting can","Fragments":["be"]},{"Key":"one with","Fragments":["library","default","the","the","STL","Boost."]},{"Key":"with library","Fragments":["functions,"]},{"Key":"library functions,","Fragments":["regex"]},{"Key":"functions, regex","Fragments":["etc."]},{"Key":"regex etc.","Fragments":["You"]},{"Key":"etc. You","Fragments":["don't","could","don't"]},{"Key":"it manually","Fragments":["yourself."]},{"Key":"manually yourself.","Fragments":["Using"]},{"Key":"yourself. Using","Fragments":["library"]},{"Key":"Using library","Fragments":["functions"]},{"Key":"functions makes","Fragments":["code","sense."]},{"Key":"makes code","Fragments":["smaller","much","more","more","easier"]},{"Key":"code smaller","Fragments":["and"]},{"Key":"and gives","Fragments":["more","you"]},{"Key":"gives more","Fragments":["confindence"]},{"Key":"more confindence","Fragments":["that"]},{"Key":"confindence that","Fragments":["there"]},{"Key":"not put","Fragments":["```result","the","```using"]},{"Key":"put ```result","Fragments":["+="]},{"Key":"```result +=","Fragments":["i;```"]},{"Key":"+= i;```","Fragments":["inside"]},{"Key":"i;``` inside","Fragments":["the"]},{"Key":"statement before","Fragments":["line"]},{"Key":"before line","Fragments":["31"]},{"Key":"line 31","Fragments":["and"]},{"Key":"31 and","Fragments":["dispense","43*"]},{"Key":"and dispense","Fragments":["with"]},{"Key":"dispense with","Fragments":["the"]},{"Key":"for ```bool","Fragments":["multiple```?"]},{"Key":" @nasir;","Fragments":["is"]},{"Key":"@nasir; is","Fragments":["there"]},{"Key":"include libraries","Fragments":["in"]},{"Key":"libraries in","Fragments":["any"]},{"Key":"any particular","Fragments":["order,"]},{"Key":"particular order,","Fragments":["other"]},{"Key":"order, other","Fragments":["than"]},{"Key":"other than","Fragments":["\"convention\"?","the","skip","in","something","that","score()'s","the","personal","a","that"]},{"Key":"than \"convention\"?","Fragments":["The"]},{"Key":"\"convention\"? The","Fragments":["order"]},{"Key":"The order","Fragments":["of"]},{"Key":"order of","Fragments":["the","importance","magnitude.","the","operation","namespaces?","global","operation","the"]},{"Key":"the includes","Fragments":["in","for","in"]},{"Key":"includes in","Fragments":["this","the","h"]},{"Key":"not chosen","Fragments":["accidentaly,"]},{"Key":"chosen accidentaly,","Fragments":["precicely"]},{"Key":"accidentaly, precicely","Fragments":["for"]},{"Key":"precicely for","Fragments":["the"]},{"Key":"reason you've","Fragments":["commented"]},{"Key":"you've commented","Fragments":["on."]},{"Key":"of vector.","Fragments":["const"]},{"Key":"vector. const","Fragments":["reference"]},{"Key":"You're right.","Fragments":["I","`int","That","I"]},{"Key":"right. I","Fragments":["would","should","might"]},{"Key":"would only","Fragments":["need","become","appear","be","need","be","let"]},{"Key":"need `bool","Fragments":["multiple`"]},{"Key":"`bool multiple`","Fragments":["if"]},{"Key":"multiple` if","Fragments":["I"]},{"Key":"wasn't breaking","Fragments":["out"]},{"Key":"breaking out","Fragments":["of","of","with","the"]},{"Key":"loop after","Fragments":["finding","you","detecting"]},{"Key":"after finding","Fragments":["a"]},{"Key":"finding a","Fragments":["multiple.","lowercase"]},{"Key":" Work","Fragments":["in"]},{"Key":"Work in","Fragments":["Progress....."]},{"Key":" @rebekah-fourier","Fragments":["As"]},{"Key":"@rebekah-fourier As","Fragments":["a"]},{"Key":"a consumer","Fragments":["of"]},{"Key":"consumer of","Fragments":["the"]},{"Key":"file, I","Fragments":["would","see","think"]},{"Key":"would expect","Fragments":["to","it","to"]},{"Key":"expect to","Fragments":["be","get","do","handle","happen."]},{"Key":"include it","Fragments":["and","(possibly","and"]},{"Key":"it include","Fragments":["its"]},{"Key":"include its","Fragments":["dependencies."]},{"Key":"its dependencies.","Fragments":["e.g."]},{"Key":"dependencies. e.g.","Fragments":["I"]},{"Key":"e.g. I","Fragments":["don't"]},{"Key":"to examine","Fragments":["curl.h","the","both"]},{"Key":"examine curl.h","Fragments":["to"]},{"Key":"curl.h to","Fragments":["figure"]},{"Key":"to figure","Fragments":["out","out","out,","out","out","out","out","out","out","out","out","it","out","out","out"]},{"Key":"out what","Fragments":["else","I","boost","caused","`islower`","the","you"]},{"Key":"what else","Fragments":["i"]},{"Key":"else i","Fragments":["need"]},{"Key":"i need","Fragments":["to"]},{"Key":"include for","Fragments":["it","boost/algo/string"]},{"Key":" Initializaing","Fragments":["random"]},{"Key":"Initializaing random","Fragments":["number"]},{"Key":"generator and","Fragments":["providing"]},{"Key":"and providing","Fragments":["a"]},{"Key":"providing a","Fragments":["seed"]},{"Key":"a seed","Fragments":["would"]},{"Key":"seed would","Fragments":["be"]},{"Key":"nice too,","Fragments":["but"]},{"Key":"too, but","Fragments":["I","I","feels"]},{"Key":"guess for","Fragments":["this"]},{"Key":"exercise it","Fragments":["works","dawned"]},{"Key":"without it","Fragments":["also.","but"]},{"Key":" Wouldn't","Fragments":["it"]},{"Key":"Wouldn't it","Fragments":["make","be"]},{"Key":"make more","Fragments":["sense","sense.","sense","sense?","readable."]},{"Key":"sense to","Fragments":["check","go","combine","loop","check","use","return","just","use","consider","pass","pass","have","me","me"]},{"Key":"for special","Fragments":["cases","situations,","characters?"]},{"Key":"cases before","Fragments":["you"]},{"Key":"before you","Fragments":["assemble","use","do","guys","even","look","check","start"]},{"Key":"you assemble","Fragments":["default"]},{"Key":"assemble default","Fragments":["verse?"]},{"Key":"default verse?","Fragments":["At"]},{"Key":"verse? At","Fragments":["the"]},{"Key":"At the","Fragments":["moment","very","end","end","moment","time","expense","end","end"]},{"Key":"moment you","Fragments":["create","encounter"]},{"Key":"create default","Fragments":["verse"]},{"Key":"default verse","Fragments":["and","is"]},{"Key":"that replace","Fragments":["texts"]},{"Key":"replace texts","Fragments":["in"]},{"Key":"texts in","Fragments":["the"]},{"Key":"verse so","Fragments":["that"]},{"Key":"would suit","Fragments":["to"]},{"Key":"suit to","Fragments":["number"]},{"Key":"to number","Fragments":["of","3."]},{"Key":"of bottles.","Fragments":["Using"]},{"Key":"bottles. Using","Fragments":["this"]},{"Key":"Using this","Fragments":["approach"]},{"Key":"approach means","Fragments":["that"]},{"Key":"that creating","Fragments":["the"]},{"Key":"is sometimes","Fragments":["totally"]},{"Key":"sometimes totally","Fragments":["useless."]},{"Key":"Another thing","Fragments":["is","I'm"]},{"Key":"thing is","Fragments":["that","that","much","not","less"]},{"Key":"that lines","Fragments":["like"]},{"Key":"lines like","Fragments":["this:"]},{"Key":"like this:","Fragments":["```line+=","`exercism"]},{"Key":"this: ```line+=","Fragments":["lyrics[3];```"]},{"Key":"```line+= lyrics[3];```","Fragments":["are"]},{"Key":"lyrics[3];``` are","Fragments":["not"]},{"Key":"self documenting","Fragments":["code."]},{"Key":"documenting code.","Fragments":["I"]},{"Key":"know what","Fragments":["text","to","happens.","memory","type","the","I'm","that","`false`","it","the","you","you","kind"]},{"Key":"what text","Fragments":["is"]},{"Key":"text is","Fragments":["added"]},{"Key":"is added","Fragments":["to","to","to","to"]},{"Key":"added to","Fragments":["```line```","``result``.","improve","make","`verse_index`.","C++","the","has","better","improve","the","get"]},{"Key":"to ```line```","Fragments":["unless"]},{"Key":"```line``` unless","Fragments":["I"]},{"Key":"I manually","Fragments":["count"]},{"Key":"manually count","Fragments":["the"]},{"Key":"count the","Fragments":["lines","occurence","appearance","number","number"]},{"Key":"lines in","Fragments":["```lyrics```","the"]},{"Key":"in ```lyrics```","Fragments":["."]},{"Key":"```lyrics``` .","Fragments":["It"]},{"Key":". It","Fragments":["is"]},{"Key":"make copy\u0026paste","Fragments":["errors"]},{"Key":"copy\u0026paste errors","Fragments":["in"]},{"Key":"errors in","Fragments":["code","mine"]},{"Key":"code like","Fragments":["this."]},{"Key":" Definite","Fragments":["improvement."]},{"Key":"magic string","Fragments":["\"ACTG\"","literals,","constants."]},{"Key":"string \"ACTG\"","Fragments":["by"]},{"Key":"\"ACTG\" by","Fragments":["using"]},{"Key":"using `std::map::at`","Fragments":["which"]},{"Key":"`std::map::at` which","Fragments":["will"]},{"Key":"throw in","Fragments":["the","case","`cctype`","all"]},{"Key":"case the","Fragments":["key","range-based","implementation","test","return","```find_if`()```","input","2nd","maximum","function","string","function","function"]},{"Key":"key is","Fragments":["not","present","not","not"]},{"Key":"not present.","Fragments":["This"]},{"Key":"present. This","Fragments":["allows"]},{"Key":"This allows","Fragments":["for","the","sing"]},{"Key":"allows for","Fragments":["the","weird","easy"]},{"Key":"the valid","Fragments":["nucleotides"]},{"Key":"valid nucleotides","Fragments":["to"]},{"Key":"nucleotides to","Fragments":["only"]},{"Key":"function parameters","Fragments":["seem"]},{"Key":"parameters seem","Fragments":["like"]},{"Key":"like they","Fragments":["would","actually","might"]},{"Key":"better as","Fragments":["const\u0026,","no","return","it"]},{"Key":"as const\u0026,","Fragments":["since"]},{"Key":"const\u0026, since","Fragments":["you're"]},{"Key":"since you're","Fragments":["not","also","specifying","using"]},{"Key":"you're not","Fragments":["modifying","familiar","using","using","making","taking","doing","changing","really","generating","using","correctly"]},{"Key":" Considering","Fragments":["how","the"]},{"Key":"Considering how","Fragments":["often"]},{"Key":"how often","Fragments":["you"]},{"Key":"often you","Fragments":["call"]},{"Key":"call ```on_earth()```,","Fragments":["you"]},{"Key":"```on_earth()```, you","Fragments":["might"]},{"Key":"might add","Fragments":["age","an"]},{"Key":"add age","Fragments":["in"]},{"Key":"age in","Fragments":["years","seconds"]},{"Key":"in years","Fragments":["as"]},{"Key":"years as","Fragments":["a"]},{"Key":"are absolutely","Fragments":["right.","right,","right"]},{"Key":"a first,","Fragments":["temporary"]},{"Key":"first, temporary","Fragments":["solution"]},{"Key":"temporary solution","Fragments":["and"]},{"Key":"and tried","Fragments":["to","it","to"]},{"Key":"as duplicate-free","Fragments":["as"]},{"Key":"duplicate-free as","Fragments":["possible,"]},{"Key":"as possible,","Fragments":["as"]},{"Key":"possible, as","Fragments":["instructed."]},{"Key":"My main","Fragments":["goal","goal"]},{"Key":"main goal","Fragments":["was","is","was","was"]},{"Key":"goal was","Fragments":["to","to","to","to"]},{"Key":"a polymporphic","Fragments":["approach,"]},{"Key":"polymporphic approach,","Fragments":["but"]},{"Key":"approach, but","Fragments":["I","I"]},{"Key":"figure one","Fragments":["out,"]},{"Key":"one out,","Fragments":["got"]},{"Key":"out, got","Fragments":["frustrated"]},{"Key":"got frustrated","Fragments":["and"]},{"Key":"frustrated and","Fragments":["uploaded"]},{"Key":"and uploaded","Fragments":["this"]},{"Key":"uploaded this","Fragments":["soltution"]},{"Key":"this soltution","Fragments":["instead."]},{"Key":"hope to","Fragments":["upgrade"]},{"Key":"to upgrade","Fragments":["the"]},{"Key":"upgrade the","Fragments":["solution"]},{"Key":"solution at","Fragments":["some"]},{"Key":"good idea.","Fragments":["Silly","It",":)","Although","It","This"]},{"Key":"idea. Silly","Fragments":["to"]},{"Key":"Silly to","Fragments":["keep"]},{"Key":"keep recalculating","Fragments":["it"]},{"Key":"recalculating it","Fragments":["like"]},{"Key":"it like","Fragments":["that.","this:","it","this"]},{"Key":"inefficient here.","Fragments":["it","it","it","it","it"]},{"Key":"here. it","Fragments":["is","is","is","is","is"]},{"Key":"is having","Fragments":["to","to","to","to","to"]},{"Key":"do implicit","Fragments":["conversion","conversion","conversion","conversion"]},{"Key":"conversion from","Fragments":["a","a","a","a","a","string","the","anything","const","from","a","string","‘const","Speech","bool"]},{"Key":"a floating","Fragments":["precision","precision","precision","precision","precision"]},{"Key":"floating precision","Fragments":["type","type","type","type","type"]},{"Key":"precision type","Fragments":["to","to","to","to","to"]},{"Key":"type to","Fragments":["an","an","an","an","an","document","a","handle","eliminate"]},{"Key":" convert","Fragments":["can","can","can","can","can","can"]},{"Key":"convert can","Fragments":["only","only","only","only","only","only"]},{"Key":"only return","Fragments":["positive","positive","positive","positive","positive","positive","positive"]},{"Key":"return positive","Fragments":["numbers,","numbers,","numbers,","numbers,","numbers,","numbers","numbers,"]},{"Key":"positive numbers,","Fragments":["even","even","even","even","even","even"]},{"Key":"numbers, even","Fragments":["in","in","in","in","in","in"]},{"Key":"even in","Fragments":["the","the","the","the","the","forward","the","old"]},{"Key":" **i**","Fragments":["could","could","can","could"]},{"Key":"**i** could","Fragments":["overflow","overflow","overflow"]},{"Key":"could overflow","Fragments":["since","since","since","since","since"]},{"Key":"overflow since","Fragments":["the","the","the","the","the","int"]},{"Key":"Yes, it","Fragments":["would","is"]},{"Key":"be good.","Fragments":["But","As","I"]},{"Key":"good. But","Fragments":["it"]},{"Key":"But it","Fragments":["runs","wasn't","sure","sure","sure","does","kind","wont","is","looks","seems","doesn't","isn't","does","was"]},{"Key":"it runs","Fragments":["too","the"]},{"Key":"runs too","Fragments":["fast"]},{"Key":"too fast","Fragments":["to"]},{"Key":"fast to","Fragments":["seed"]},{"Key":"to seed","Fragments":["with","`rnd_eng`"]},{"Key":"seed with","Fragments":["time"]},{"Key":"with time","Fragments":["(in"]},{"Key":"time (in","Fragments":["seconds),"]},{"Key":"(in seconds),","Fragments":["so"]},{"Key":"seconds), so","Fragments":["I"]},{"Key":"have had","Fragments":["to","to","something","separate"]},{"Key":"do something","Fragments":["ugly.","that","about","terrible","*/","nifty","not","about","like:","like:"]},{"Key":"something ugly.","Fragments":["(Otherwise"]},{"Key":"ugly. (Otherwise","Fragments":["the"]},{"Key":"(Otherwise the","Fragments":["test"]},{"Key":"test for","Fragments":["different","full","overflow","after","each","3","a","silence","shouting?","silence.","emptyness","it","empty","(numSpaces","all","string","string","if","all","this","question","an","shouting.","a"]},{"Key":"for different","Fragments":["robots"]},{"Key":"different robots","Fragments":["having"]},{"Key":"robots having","Fragments":["different"]},{"Key":"having different","Fragments":["names"]},{"Key":"different names","Fragments":["fails.)"]},{"Key":" True.","Fragments":["This","Will"]},{"Key":"True. This","Fragments":["is"]},{"Key":"is one","Fragments":["way","assembly","of","place","of","of","conditional","of","way"]},{"Key":"one way","Fragments":["to","or","or","to","or","to"]},{"Key":"problem indeed.","Fragments":["I"]},{"Key":"indeed. I","Fragments":["made"]},{"Key":"made random","Fragments":["number"]},{"Key":"generators static,","Fragments":["so"]},{"Key":"static, so","Fragments":["there"]},{"Key":"one random","Fragments":["number"]},{"Key":"generator for","Fragments":["all"]},{"Key":"all robots.","Fragments":["Also,"]},{"Key":"robots. Also,","Fragments":["in"]},{"Key":"Also, in","Fragments":["my","general","answer"]},{"Key":"my case","Fragments":["it"]},{"Key":"case it","Fragments":["made","means","would","does","would","would","does.","would","means","would've","might","may"]},{"Key":"a difference","Fragments":["which","(which"]},{"Key":"difference which","Fragments":["random","you"]},{"Key":"which random","Fragments":["number"]},{"Key":"generator to","Fragments":["use.","give"]},{"Key":"I see!","Fragments":["You're"]},{"Key":"see! You're","Fragments":["going"]},{"Key":"You're going","Fragments":["with"]},{"Key":"with more","Fragments":["sophisticated","than"]},{"Key":"more sophisticated","Fragments":["random","approaches"]},{"Key":"sophisticated random","Fragments":["numbers"]},{"Key":"random numbers","Fragments":["than","\u003e","(A-Z)","instead"]},{"Key":"numbers than","Fragments":["`rand()`."]},{"Key":"than `rand()`.","Fragments":["Interesting!"]},{"Key":"`rand()`. Interesting!","Fragments":["Probably"]},{"Key":"Interesting! Probably","Fragments":["a"]},{"Key":"Probably a","Fragments":["useful"]},{"Key":"a useful","Fragments":["thing","suggestion,"]},{"Key":"useful thing","Fragments":["to"]},{"Key":"know about,","Fragments":["in"]},{"Key":"about, in","Fragments":["order"]},{"Key":"in order","Fragments":["to","to","to","to","to","to","to","to","to","is","to","to"]},{"Key":"order to","Fragments":["be","return","satisfy","ignore","get","assign","its","avoid","make.","boost","compare","satisfy","get"]},{"Key":"to specify","Fragments":["different","it","inline","school()","the","the","the"]},{"Key":"specify different","Fragments":["distributions,"]},{"Key":"different distributions,","Fragments":["etc."]},{"Key":"do conversion","Fragments":["from"]},{"Key":"an integer.","Fragments":["(you","To"]},{"Key":"integer. (you","Fragments":["can"]},{"Key":"use 1","Fragments":["\u003c\u003c"]},{"Key":"1 \u003c\u003c","Fragments":["exponent)","exponent","64."]},{"Key":" **power**","Fragments":["could"]},{"Key":"**power** could","Fragments":["overflow"]},{"Key":" expBySqrt2","Fragments":["is"]},{"Key":"expBySqrt2 is","Fragments":["simply"]},{"Key":"is simply","Fragments":["`","dividing","good"]},{"Key":"simply `","Fragments":["1"]},{"Key":"` 1","Fragments":["\u003c\u003c"]},{"Key":"\u003c\u003c exponent","Fragments":["`"]},{"Key":"exponent `","Fragments":["this"]},{"Key":"` this","Fragments":["is"]},{"Key":"one assembly","Fragments":["instruction"]},{"Key":"assembly instruction","Fragments":["of"]},{"Key":"instruction of","Fragments":["arithmetic"]},{"Key":"of arithmetic","Fragments":["shift","that"]},{"Key":"arithmetic shift","Fragments":["left"]},{"Key":"shift left","Fragments":["(https://en.wikipedia.org/?title=Arithmetic_shift)"]},{"Key":" **std::pow**","Fragments":["is"]},{"Key":"**std::pow** is","Fragments":["inefficient"]},{"Key":"**i** can","Fragments":["be"]},{"Key":"be truncated.","Fragments":["`std::string::length`"]},{"Key":"truncated. `std::string::length`","Fragments":["is"]},{"Key":"`std::string::length` is","Fragments":["*size_t*"]},{"Key":"is *size_t*","Fragments":["(see:"]},{"Key":"*size_t* (see:","Fragments":["http://www.cplusplus.com/reference/string/string/length/)"]},{"Key":" memory","Fragments":["access"]},{"Key":"memory access","Fragments":["violation","violation","is"]},{"Key":"access violation","Fragments":["on","you"]},{"Key":"violation on","Fragments":["empty"]},{"Key":"on empty","Fragments":["string.","string.","string.","strings.\"","string\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e","string","string."]},{"Key":" erg","Fragments":["is","+="]},{"Key":"erg is","Fragments":["wrong"]},{"Key":"is wrong","Fragments":["type,","with","with"]},{"Key":"wrong type,","Fragments":["implicitly","that's"]},{"Key":"type, implicitly","Fragments":["conversion"]},{"Key":"implicitly conversion","Fragments":["of"]},{"Key":"of signed","Fragments":["to"]},{"Key":"signed to","Fragments":["unsigned."]},{"Key":" size","Fragments":["should"]},{"Key":"size should","Fragments":["be"]},{"Key":"be size_t,","Fragments":["in"]},{"Key":"size_t, in","Fragments":["the"]},{"Key":"string, you","Fragments":["would","can","can","can"]},{"Key":"check and","Fragments":["return.","then"]},{"Key":"i could","Fragments":["overflow","have","write","write","have","just"]},{"Key":"unnecessary double","Fragments":["scan"]},{"Key":"double scan","Fragments":["of"]},{"Key":"scan of","Fragments":["string","std::find."]},{"Key":" *convert*","Fragments":["can"]},{"Key":"*convert* can","Fragments":["only"]},{"Key":" how","Fragments":["does","did"]},{"Key":"this pass","Fragments":["the","the","all","all"]},{"Key":" nice","Fragments":["solution","iterator-based"]},{"Key":" @alysa","Fragments":["It"]},{"Key":"@alysa It","Fragments":["returns"]},{"Key":"It returns","Fragments":["\"Whoa,"]},{"Key":"returns \"Whoa,","Fragments":["chill"]},{"Key":"chill out!\",","Fragments":["which"]},{"Key":"out!\", which","Fragments":["I"]},{"Key":"is correct,","Fragments":["since","and"]},{"Key":"correct, since","Fragments":["yelling"]},{"Key":"since yelling","Fragments":["takes"]},{"Key":"yelling takes","Fragments":["precedence"]},{"Key":"takes precedence","Fragments":["over"]},{"Key":"precedence over","Fragments":["questions.","silence,","just"]},{"Key":" @rusty","Fragments":["thanks"]},{"Key":"@rusty thanks","Fragments":["for"]},{"Key":"am pleased","Fragments":["with"]},{"Key":"pleased with","Fragments":["how","this"]},{"Key":"with how","Fragments":["compact","complex","this","I"]},{"Key":"how compact","Fragments":["the"]},{"Key":"compact the","Fragments":["code"]},{"Key":"The main","Fragments":["while","point","issue"]},{"Key":"main while","Fragments":["loop"]},{"Key":"loop through","Fragments":["the","the","it","every","the","the","your","a","and"]},{"Key":"string picks","Fragments":["out"]},{"Key":"picks out","Fragments":["the"]},{"Key":"the begin","Fragments":["and","and","and","and"]},{"Key":"begin and","Fragments":["end","end","end","end","end","end","end","end","end"]},{"Key":"A helper","Fragments":["function"]},{"Key":"helper function","Fragments":["isignorablepunct","and","would","to","within","\"strtolower\""]},{"Key":"function isignorablepunct","Fragments":["handles"]},{"Key":"isignorablepunct handles","Fragments":["the"]},{"Key":"handles the","Fragments":["complicated"]},{"Key":"the complicated","Fragments":["rules","code"]},{"Key":"complicated rules","Fragments":["about"]},{"Key":"rules about","Fragments":["apostrophes.","what"]},{"Key":"use c-strings","Fragments":["and"]},{"Key":"c-strings and","Fragments":["avoid"]},{"Key":"check with","Fragments":["s.begin()","a"]},{"Key":"with s.begin()","Fragments":["and"]},{"Key":"s.begin() and","Fragments":["s.end()"]},{"Key":"and s.end()","Fragments":["repeatedly."]},{"Key":"`std::set` for","Fragments":["factors","factors,","numbers"]},{"Key":"for factors","Fragments":["as"]},{"Key":"factors as","Fragments":["duplicate"]},{"Key":"as duplicate","Fragments":["factors","factors"]},{"Key":"the thought","Fragments":["behind","process.","behind"]},{"Key":"thought behind","Fragments":["a","the"]},{"Key":"behind a","Fragments":["set"]},{"Key":"a set","Fragments":["of","is","(which","of","of"]},{"Key":"set of","Fragments":["multiples;","possible","containers","functions","functions","functions,","Boolean"]},{"Key":"of multiples;","Fragments":["however,"]},{"Key":"multiples; however,","Fragments":["this"]},{"Key":"however, this","Fragments":["wastes"]},{"Key":"this wastes","Fragments":["memory"]},{"Key":"wastes memory","Fragments":["and"]},{"Key":"is slower","Fragments":["than","than","than"]},{"Key":"than just","Fragments":["accumulating","beer_song.cpp.","push","passing","comparing","checking","the","'throw","using"]},{"Key":"just accumulating","Fragments":["the"]},{"Key":"accumulating the","Fragments":["value."]},{"Key":"Since ``\"convert\"``","Fragments":["does"]},{"Key":"``\"convert\"`` does","Fragments":["not"]},{"Key":"contain ``'1'``","Fragments":["nothing"]},{"Key":"``'1'`` nothing","Fragments":["is"]},{"Key":"nothing is","Fragments":["added","actually","found."]},{"Key":"But thanks","Fragments":["to"]},{"Key":"your comment","Fragments":["I","just","why","for","points","on"]},{"Key":"code does","Fragments":["not","not","not","not,","not","not"]},{"Key":"input like","Fragments":["``\"c++11\"``.","{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,...(thousands"]},{"Key":"right, a","Fragments":["function"]},{"Key":"returns positive","Fragments":["values"]},{"Key":"positive values","Fragments":["should"]},{"Key":"values should","Fragments":["use"]},{"Key":"should use","Fragments":["an","a","a","macros","boost","them.","boost","boost::to_lower_copy","std::string"]},{"Key":"unsigned type","Fragments":["to","I","to","(`unsigned`,"]},{"Key":"to document","Fragments":["that."]},{"Key":"document that.","Fragments":["The"]},{"Key":"that. The","Fragments":["type","exception"]},{"Key":"The type","Fragments":["issue","size","may","of"]},{"Key":"type issue","Fragments":["is"]},{"Key":"issue is","Fragments":["even","that","the","that","that","that","that"]},{"Key":"is even","Fragments":["deeper","better.","better,"]},{"Key":"even deeper","Fragments":["than"]},{"Key":"deeper than","Fragments":["that,"]},{"Key":"than that,","Fragments":["because","your","I","a"]},{"Key":"range is","Fragments":["a","over"]},{"Key":"a design","Fragments":["decision:","that"]},{"Key":"The test","Fragments":["cases","could","makes","on","on","suite","file","suite"]},{"Key":"cases require","Fragments":["that"]},{"Key":"require that","Fragments":["an"]},{"Key":"that an","Fragments":["invalid","11","exception","extra"]},{"Key":"input results","Fragments":["in"]},{"Key":"in 0.","Fragments":["But"]},{"Key":"0. But","Fragments":["that"]},{"Key":"But that","Fragments":["makes","loop","said"]},{"Key":"it impossible","Fragments":["to"]},{"Key":"impossible to","Fragments":["differentiate","predict","access"]},{"Key":"to differentiate","Fragments":["between","between"]},{"Key":"differentiate between","Fragments":["a","two"]},{"Key":"between a","Fragments":["valid","static"]},{"Key":"valid input","Fragments":["representing","**and**","for"]},{"Key":"input representing","Fragments":["0"]},{"Key":"representing 0","Fragments":["and"]},{"Key":"0 and","Fragments":["an","with","it"]},{"Key":"invalid input.","Fragments":["I"]},{"Key":"used exceptions","Fragments":["or"]},{"Key":"exceptions or","Fragments":["``-1``"]},{"Key":"or ``-1``","Fragments":["as"]},{"Key":"``-1`` as","Fragments":["an"]},{"Key":"- What","Fragments":["about"]},{"Key":"about valid","Fragments":["inputs"]},{"Key":"valid inputs","Fragments":["that"]},{"Key":"inputs that","Fragments":["are"]},{"Key":"too large?","Fragments":["In"]},{"Key":"large? In","Fragments":["my"]},{"Key":"my function","Fragments":["the","in","```isupper_str()```"]},{"Key":"function the","Fragments":["signed","number","moment"]},{"Key":"the signed","Fragments":["variable"]},{"Key":"signed variable","Fragments":["``result``"]},{"Key":"variable ``result``","Fragments":["overflows"]},{"Key":"``result`` overflows","Fragments":["leading"]},{"Key":"overflows leading","Fragments":["to"]},{"Key":"to undefined","Fragments":["behaviour."]},{"Key":"undefined behaviour.","Fragments":["An"]},{"Key":"behaviour. An","Fragments":["unsigned"]},{"Key":"An unsigned","Fragments":["return"]},{"Key":"unsigned return","Fragments":["type"]},{"Key":"type leads","Fragments":["to"]},{"Key":"to truncation.","Fragments":["Both"]},{"Key":"truncation. Both","Fragments":["should"]},{"Key":"Both should","Fragments":["at"]},{"Key":"should at","Fragments":["least","least","least","least"]},{"Key":"least be","Fragments":["documented,","clear."]},{"Key":"be documented,","Fragments":["if"]},{"Key":"documented, if","Fragments":["not"]},{"Key":"if not","Fragments":["avoided.","most","exact).","set,"]},{"Key":"type size","Fragments":["influences"]},{"Key":"size influences","Fragments":["the"]},{"Key":"influences the","Fragments":["speed"]},{"Key":"of following","Fragments":["operations."]},{"Key":"following operations.","Fragments":["AFAIK"]},{"Key":"operations. AFAIK","Fragments":["``int``"]},{"Key":"AFAIK ``int``","Fragments":["and"]},{"Key":"``int`` and","Fragments":["``unsigned"]},{"Key":"and ``unsigned","Fragments":["int``"]},{"Key":"``unsigned int``","Fragments":["are","as"]},{"Key":"int`` are","Fragments":["the"]},{"Key":"fastest integer","Fragments":["types,"]},{"Key":"integer types,","Fragments":["smaller"]},{"Key":"types, smaller","Fragments":["types"]},{"Key":"smaller types","Fragments":["are"]},{"Key":"types are","Fragments":["promoted","kind","unambiguously","super"]},{"Key":"are promoted","Fragments":["to"]},{"Key":"promoted to","Fragments":["``(unsigned)","size_t","int","std::size_t"]},{"Key":"to ``(unsigned)","Fragments":["int``,"]},{"Key":"``(unsigned) int``,","Fragments":["processing"]},{"Key":"int``, processing","Fragments":["larger"]},{"Key":"processing larger","Fragments":["types"]},{"Key":"larger types","Fragments":["takes"]},{"Key":"types takes","Fragments":["significantly"]},{"Key":"takes significantly","Fragments":["longer."]},{"Key":" @garry","Fragments":["I"]},{"Key":"@garry I","Fragments":["agree"]},{"Key":"agree when","Fragments":["what"]},{"Key":"when what","Fragments":["you"]},{"Key":"have said.","Fragments":["On"]},{"Key":"said. On","Fragments":["my"]},{"Key":"On my","Fragments":["way","linux","machine","solution"]},{"Key":"my way","Fragments":["to"]},{"Key":"work this","Fragments":["morning"]},{"Key":"this morning","Fragments":["I"]},{"Key":"morning I","Fragments":["thought"]},{"Key":"about your","Fragments":["solution","choice","thinking---I","implementations:","private","solution","way?"]},{"Key":"and realized,","Fragments":["while"]},{"Key":"realized, while","Fragments":["simpler,"]},{"Key":"while simpler,","Fragments":["causes"]},{"Key":"simpler, causes","Fragments":["wasteful"]},{"Key":"causes wasteful","Fragments":["operations."]},{"Key":"wasteful operations.","Fragments":["On"]},{"Key":"operations. On","Fragments":["zero"]},{"Key":"On zero","Fragments":["you"]},{"Key":"zero you","Fragments":["need"]},{"Key":"a multiply","Fragments":["instruction."]},{"Key":"multiply instruction.","Fragments":["By"]},{"Key":"instruction. By","Fragments":["parsing"]},{"Key":"By parsing","Fragments":["it","the"]},{"Key":"parsing it","Fragments":["in"]},{"Key":"have ops","Fragments":["on"]},{"Key":"ops on","Fragments":["'1's"]},{"Key":"Thanks, all","Fragments":["good"]},{"Key":"all good","Fragments":["points.","points."]},{"Key":" Strategy:","Fragments":["sort"]},{"Key":"Strategy: sort","Fragments":["the"]},{"Key":"the characters","Fragments":["within","in","in","in","in","were","in","(although","at","in","in","differ.","doesn't.","'ACGT'","escaping","of","are"]},{"Key":"characters within","Fragments":["words"]},{"Key":"within words","Fragments":["before"]},{"Key":"words before","Fragments":["comparing","entering"]},{"Key":"before comparing","Fragments":["them.","the"]},{"Key":"The formatting!","Fragments":["It","It"]},{"Key":"formatting! It","Fragments":["Burns!","Burns!!!"]},{"Key":" Suggest","Fragments":["use"]},{"Key":"Suggest use","Fragments":["of"]},{"Key":"of `std::set`","Fragments":["as"]},{"Key":"`std::set` as","Fragments":["the"]},{"Key":"the base","Fragments":["mults","type,","file"]},{"Key":"base mults","Fragments":["should"]},{"Key":"mults should","Fragments":["be"]},{"Key":"suggest to","Fragments":["start","rename"]},{"Key":"to start","Fragments":["*i*","in","with","on","with","of","with:"]},{"Key":"start *i*","Fragments":["at"]},{"Key":"*i* at","Fragments":["*1*"]},{"Key":"at *1*","Fragments":["since","since"]},{"Key":"*1* since","Fragments":["`result","`sum"]},{"Key":"since `result","Fragments":["+="]},{"Key":"`result +=","Fragments":["0`"]},{"Key":"+= 0`","Fragments":["is","is"]},{"Key":"0` is","Fragments":["a","a","the"]},{"Key":"for factors,","Fragments":["since"]},{"Key":"factors, since","Fragments":["duplicate"]},{"Key":"factors should","Fragments":["be"]},{"Key":" *i*","Fragments":["should"]},{"Key":"*i* should","Fragments":["start"]},{"Key":"should start","Fragments":["at"]},{"Key":"since `sum","Fragments":["+="]},{"Key":"`sum +=","Fragments":["0`"]},{"Key":"numbers as","Fragments":["duplicate","the","we"]},{"Key":"that smaller","Fragments":["numbers"]},{"Key":"smaller numbers","Fragments":["are"]},{"Key":"be factors,","Fragments":["the"]},{"Key":"factors, the","Fragments":["sortedness"]},{"Key":"the sortedness","Fragments":["of","of"]},{"Key":"sortedness of","Fragments":["the","the"]},{"Key":"the std::set","Fragments":["helps"]},{"Key":"std::set helps","Fragments":["detect"]},{"Key":"helps detect","Fragments":["a"]},{"Key":"detect a","Fragments":["multiple"]},{"Key":"a multiple","Fragments":["faster","of"]},{"Key":"multiple faster","Fragments":["for"]},{"Key":"faster for","Fragments":["larger","length-agnostic","numbers","small","increment"]},{"Key":"for larger","Fragments":["lists","projects."]},{"Key":"larger lists","Fragments":["of"]},{"Key":"lists of","Fragments":["factors."]},{"Key":" TBH","Fragments":["i"]},{"Key":"TBH i","Fragments":["don't"]},{"Key":"don't remeber","Fragments":["all"]},{"Key":"remeber all","Fragments":["the"]},{"Key":"the mathyness","Fragments":["involved"]},{"Key":"mathyness involved","Fragments":["in"]},{"Key":"involved in","Fragments":["modulos"]},{"Key":"in modulos","Fragments":["of"]},{"Key":"modulos of","Fragments":["negative"]},{"Key":"of negative","Fragments":["numbers,"]},{"Key":"negative numbers,","Fragments":["because","so"]},{"Key":"numbers, because","Fragments":["of"]},{"Key":"of this,","Fragments":["i","which","I"]},{"Key":"this, i","Fragments":["assumed"]},{"Key":"assumed a","Fragments":["constraint"]},{"Key":"a constraint","Fragments":["that"]},{"Key":"constraint that","Fragments":["this"]},{"Key":"domain and","Fragments":["range","knowing"]},{"Key":"and range","Fragments":["of","based"]},{"Key":"range of","Fragments":["positive","chars","zero","char.","`i`.","stuff"]},{"Key":"of positive","Fragments":["numbers."]},{"Key":"for fixing","Fragments":["the"]},{"Key":"fixing the","Fragments":["formatting.","not-singleton-ness","symptom,"]},{"Key":"the formatting.","Fragments":["Looks"]},{"Key":"formatting. Looks","Fragments":["great!"]},{"Key":"like convertDigit","Fragments":["approach!"]},{"Key":" @brody","Fragments":["calling"]},{"Key":"@brody calling","Fragments":["`on_earth()`"]},{"Key":"calling `on_earth()`","Fragments":["will"]},{"Key":"`on_earth()` will","Fragments":["not"]},{"Key":"be wasteful,","Fragments":["the"]},{"Key":"wasteful, the","Fragments":["function"]},{"Key":"is `const`","Fragments":["and"]},{"Key":"`const` and","Fragments":["is","some","have"]},{"Key":"simply dividing","Fragments":["by"]},{"Key":"dividing by","Fragments":["a","2"]},{"Key":"number known","Fragments":["at"]},{"Key":"known at","Fragments":["compile","compile","compile"]},{"Key":"compile time.","Fragments":["at","By","I","Your","Like","I"]},{"Key":"time. at","Fragments":["-o2"]},{"Key":"at -o2","Fragments":["these"]},{"Key":"-o2 these","Fragments":["calls"]},{"Key":"these calls","Fragments":["will"]},{"Key":"calls will","Fragments":["be"]},{"Key":"be inlined","Fragments":["and","into"]},{"Key":"inlined and","Fragments":["the"]},{"Key":"constant division","Fragments":["calculated"]},{"Key":"division calculated","Fragments":["at"]},{"Key":"calculated at","Fragments":["compile"]},{"Key":"time. By","Fragments":["turning"]},{"Key":"By turning","Fragments":["it"]},{"Key":"variable you","Fragments":["are"]},{"Key":"are adding","Fragments":["size"]},{"Key":"adding size","Fragments":["to"]},{"Key":"size to","Fragments":["the"]},{"Key":"object that","Fragments":["the","complies","complies"]},{"Key":"compiler cannot","Fragments":["remove.","decide"]},{"Key":"you said","Fragments":["I"]},{"Key":"said I","Fragments":["used"]},{"Key":"operator to","Fragments":["keep","increase","not"]},{"Key":"because in","Fragments":["the","C","my","a","C++,","principle","the","the"]},{"Key":"the false","Fragments":["branch","branch","part","start"]},{"Key":"false branch","Fragments":["of","a"]},{"Key":"ternary the","Fragments":["return"]},{"Key":"value is","Fragments":["already","a","stored","not","unsigned","passed","probably","[value-initialized](http://en.cppreference.com/w/cpp/container/map/operator_at),","found."]},{"Key":"already known","Fragments":["and"]},{"Key":"known and","Fragments":["in"]},{"Key":"and in","Fragments":["the","my","the","each","another","those","the","the"]},{"Key":"the over","Fragments":["branch","two"]},{"Key":"over branch","Fragments":["the"]},{"Key":"branch the","Fragments":["statement"]},{"Key":"statement to","Fragments":["be","me.","make","have","increase"]},{"Key":"be evaluated","Fragments":["is"]},{"Key":"evaluated is","Fragments":["not"]},{"Key":"Also with","Fragments":["the"]},{"Key":"operator it","Fragments":["is"]},{"Key":"of importance","Fragments":["in"]},{"Key":"importance in","Fragments":["the"]},{"Key":"the conditions,","Fragments":["like"]},{"Key":"conditions, like","Fragments":["if"]},{"Key":"like if","Fragments":["year"]},{"Key":"if year","Fragments":["is"]},{"Key":"year is","Fragments":["not"]},{"Key":"by 4","Fragments":["it","(2*2","bits","and"]},{"Key":"4 it","Fragments":["can"]},{"Key":"a leap","Fragments":["year"]},{"Key":"leap year","Fragments":["unimportant"]},{"Key":"year unimportant","Fragments":["of"]},{"Key":"unimportant of","Fragments":["the"]},{"Key":"over two","Fragments":["conditions.","sequences","containers"]},{"Key":"With \u003ccode\u003e\u0026\u0026\u003c/code\u003e,","Fragments":["\u003ccode\u003e||\u003c/code\u003e"]},{"Key":"\u003ccode\u003e\u0026\u0026\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003e||\u003c/code\u003e and","Fragments":["parentheses"]},{"Key":"and parentheses","Fragments":["you"]},{"Key":"parentheses you","Fragments":["would"]},{"Key":"to evaluate","Fragments":["the","the","them,","if","if"]},{"Key":"evaluate the","Fragments":["complete","\u003ccode\u003eyear%400==0\u003c/code\u003e"]},{"Key":"the complete","Fragments":["expression","message","type","life"]},{"Key":"complete expression","Fragments":["and"]},{"Key":"expression and","Fragments":["can","returns","returns"]},{"Key":"not simply","Fragments":["see","alter"]},{"Key":"simply see","Fragments":["this."]},{"Key":"And with","Fragments":["separated","`find_first_of`I","allCaps,"]},{"Key":"with separated","Fragments":["if"]},{"Key":"separated if","Fragments":["statements"]},{"Key":"statements the","Fragments":["code"]},{"Key":"have become","Fragments":["a","much","so"]},{"Key":"lot bigger","Fragments":["and"]},{"Key":"bigger and","Fragments":["in"]},{"Key":"opinion less","Fragments":["readable."]},{"Key":"The explicitly","Fragments":["\u003ccode\u003etrue\u003c/code\u003e"]},{"Key":"explicitly \u003ccode\u003etrue\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003etrue\u003c/code\u003e and","Fragments":["\u003ccode\u003efalse\u003c/code\u003e"]},{"Key":"and \u003ccode\u003efalse\u003c/code\u003e","Fragments":["statements"]},{"Key":"\u003ccode\u003efalse\u003c/code\u003e statements","Fragments":["are"]},{"Key":"are there","Fragments":["as","to","any","any"]},{"Key":"there as","Fragments":["I"]},{"Key":"I state","Fragments":["above"]},{"Key":"state above","Fragments":["to"]},{"Key":"above to","Fragments":["increase"]},{"Key":"increase the","Fragments":["readability","power","count","distance"]},{"Key":"the readability","Fragments":["of","of","of","is","as","of"]},{"Key":"readability of","Fragments":["the","your","your","the","your"]},{"Key":"boolean value","Fragments":["in"]},{"Key":"third case","Fragments":["is,"]},{"Key":"case is,","Fragments":["that"]},{"Key":"is, that","Fragments":["you","`\"foo''bar\"`"]},{"Key":"the \u003ccode\u003eyear%400==0\u003c/code\u003e","Fragments":["statement"]},{"Key":"\u003ccode\u003eyear%400==0\u003c/code\u003e statement","Fragments":["in"]},{"Key":"that case","Fragments":["too","*punct","those","it","the","in"]},{"Key":"case too","Fragments":["and"]},{"Key":"and would","Fragments":["get","have","make","likely","do","be","make","check","not"]},{"Key":"get in","Fragments":["the","trouble","the","the"]},{"Key":"the true","Fragments":["branch","branch","and","branch"]},{"Key":"true branch","Fragments":["of","of","of"]},{"Key":"operator a","Fragments":["true"]},{"Key":"a true","Fragments":["and","`bob`","`bob`","`bob`","`bob`"]},{"Key":"true and","Fragments":["in","the","false.","OTHER","0"]},{"Key":"branch a","Fragments":["false,"]},{"Key":"a false,","Fragments":["so"]},{"Key":"false, so","Fragments":["it","the"]},{"Key":"only become","Fragments":["more"]},{"Key":"become more","Fragments":["code","readable.","involved"]},{"Key":"not become","Fragments":["more"]},{"Key":"breaks and","Fragments":["indentations"]},{"Key":"and indentations","Fragments":["are"]},{"Key":"indentations are","Fragments":["there"]},{"Key":"there to","Fragments":["keep","be","handle","be","check","extract"]},{"Key":"it easily","Fragments":["readable,"]},{"Key":"easily readable,","Fragments":["though"]},{"Key":"readable, though","Fragments":["I"]},{"Key":"though I","Fragments":["could","haven't","imagine","don't","notice","think"]},{"Key":"have moved","Fragments":["the","the","those"]},{"Key":"moved the","Fragments":["false","#ifdef","third"]},{"Key":"false part","Fragments":["2"]},{"Key":"part 2","Fragments":["spaces"]},{"Key":"2 spaces","Fragments":["back,"]},{"Key":"spaces back,","Fragments":["to"]},{"Key":"back, to","Fragments":["have"]},{"Key":"false start","Fragments":["at"]},{"Key":"same column","Fragments":["as"]},{"Key":"column as","Fragments":["year"]},{"Key":"as year","Fragments":["of"]},{"Key":"year of","Fragments":["the"]},{"Key":"this ternary","Fragments":["like"]},{"Key":"ternary like","Fragments":["I"]},{"Key":" straightforward,","Fragments":["I'm"]},{"Key":"straightforward, I'm","Fragments":["going"]},{"Key":"add template","Fragments":["\u0026lt;"]},{"Key":"template \u0026lt;","Fragments":["typename","int"]},{"Key":"\u0026lt; typename","Fragments":["Length"]},{"Key":"typename Length","Fragments":["\u0026gt;"]},{"Key":"Length \u0026gt;","Fragments":["to"]},{"Key":"\u0026gt; to","Fragments":["mine"]},{"Key":"the twist","Fragments":["at"]},{"Key":"twist at","Fragments":["the"]},{"Key":"was wondering","Fragments":["why:","too.","what","about"]},{"Key":" template","Fragments":["\u0026lt;","\u003cclass"]},{"Key":"\u0026lt; int","Fragments":["HOURS"]},{"Key":"int HOURS","Fragments":["\u0026gt;"]},{"Key":"typedef base_clock\u0026lt;12\u0026gt;","Fragments":["twelve_hour_clock;"]},{"Key":"typedef base_clock\u0026lt;24\u0026gt;","Fragments":["twenty_four_hour_clock;"]},{"Key":" @kiley","Fragments":["Does"]},{"Key":"@kiley Does","Fragments":["that"]},{"Key":"Does that","Fragments":["only","match"]},{"Key":"only work","Fragments":["because"]},{"Key":"it's specifically","Fragments":["declared"]},{"Key":"specifically declared","Fragments":["as"]},{"Key":"as `const`,","Fragments":["or"]},{"Key":"`const`, or","Fragments":["would"]},{"Key":"or would","Fragments":["the"]},{"Key":"would the","Fragments":["compiler"]},{"Key":"compiler still","Fragments":["recognize"]},{"Key":"still recognize","Fragments":["it"]},{"Key":"recognize it","Fragments":["as"]},{"Key":"a constant","Fragments":["function","if","too?","with","string","string","and"]},{"Key":"constant function","Fragments":["otherwise?"]},{"Key":"Creating map","Fragments":["in"]},{"Key":"in constructor","Fragments":["feels"]},{"Key":"constructor feels","Fragments":["like"]},{"Key":"a cop","Fragments":["out"]},{"Key":"cop out","Fragments":["from"]},{"Key":"out from","Fragments":["the","loop","the"]},{"Key":"the constness","Fragments":["of"]},{"Key":"constness of","Fragments":["functions."]},{"Key":"the keys","Fragments":["added"]},{"Key":"keys added","Fragments":["you"]},{"Key":"added you","Fragments":["can"]},{"Key":"is present","Fragments":["in","multiple","in"]},{"Key":"present in","Fragments":["the","the","the","the","the","the"]},{"Key":"map for","Fragments":["validateChar","the","traversal,","C++,"]},{"Key":"for validateChar","Fragments":["function."]},{"Key":"like breaking","Fragments":["the","out"]},{"Key":"breaking the","Fragments":["conditions","switch"]},{"Key":"the conditions","Fragments":["out","in","at","for","for"]},{"Key":"conditions out","Fragments":["into"]},{"Key":"out into","Fragments":["well-named","separate","the","individual","a","other","constants.","functions,","functions"]},{"Key":"into well-named","Fragments":["functions."]},{"Key":"well-named functions.","Fragments":["I'd"]},{"Key":"functions. I'd","Fragments":["recommend"]},{"Key":"I'd recommend","Fragments":["using","at","a","documenting","is_leap_year","against"]},{"Key":"recommend using","Fragments":["is_space","auto\u0026","an","nonmember"]},{"Key":"using is_space","Fragments":["rather"]},{"Key":"is_space rather","Fragments":["than"]},{"Key":"than \"","Fragments":["\\t\\n\\r\"."]},{"Key":"\" \\t\\n\\r\".","Fragments":["Next"]},{"Key":"\\t\\n\\r\". Next","Fragments":["thing"]},{"Key":"Next thing","Fragments":["you"]},{"Key":"know someone","Fragments":["will","is"]},{"Key":"someone will","Fragments":["try"]},{"Key":"will try","Fragments":["to","to","my"]},{"Key":"pass you","Fragments":["\\v,"]},{"Key":"you \\v,","Fragments":["but"]},{"Key":"\\v, but","Fragments":["besides"]},{"Key":"but besides","Fragments":["it's"]},{"Key":"besides it's","Fragments":["more"]},{"Key":"descriptive -","Fragments":["same"]},{"Key":"- same","Fragments":["reason"]},{"Key":"same reason","Fragments":["I","as"]},{"Key":" coming","Fragments":["back"]},{"Key":"to close","Fragments":["it","with."]},{"Key":"close it","Fragments":["off,"]},{"Key":"it off,","Fragments":["I"]},{"Key":"off, I","Fragments":["find","guess!","find"]},{"Key":" silent,","Fragments":["lower,"]},{"Key":"silent, lower,","Fragments":["upper"]},{"Key":"lower, upper","Fragments":["and"]},{"Key":"upper and","Fragments":["question","lower","lower"]},{"Key":" don't","Fragments":["quite"]},{"Key":"don't quite","Fragments":["convey","get","understand.","understand"]},{"Key":" lowerDetected,","Fragments":["upperDetected"]},{"Key":"lowerDetected, upperDetected","Fragments":["and"]},{"Key":"upperDetected and","Fragments":["questionDetected"]},{"Key":"maybe silent","Fragments":["could"]},{"Key":"silent could","Fragments":["be"]},{"Key":"be flipped","Fragments":["to"]},{"Key":"flipped to","Fragments":["soundDetected"]},{"Key":"this isn't","Fragments":["as","any","performance-critical","meant","relevant","covered","the","really","tragic.","necessarily","the"]},{"Key":"isn't as","Fragments":["simple","good","clear","good"]},{"Key":"could be,","Fragments":["but"]},{"Key":"be, but","Fragments":["I"]},{"Key":"examine the","Fragments":["minimum","contents","original","original"]},{"Key":"the minimum","Fragments":["number","while","required","input"]},{"Key":"minimum number","Fragments":["of"]},{"Key":"of characters,","Fragments":["and"]},{"Key":"characters, and","Fragments":["having","so","the"]},{"Key":"and having","Fragments":["done","duplicated","to","to"]},{"Key":"having done","Fragments":["that","that."]},{"Key":"done that","Fragments":["i","it"]},{"Key":"think i'll","Fragments":["stop"]},{"Key":"i'll stop","Fragments":["here"]},{"Key":" that'll","Fragments":["do"]},{"Key":"that'll do","Fragments":["for"]},{"Key":"do for","Fragments":["now","this","me."]},{"Key":" closing","Fragments":["this"]},{"Key":"closing this","Fragments":["off,","one"]},{"Key":"this off,","Fragments":["number"]},{"Key":"off, number","Fragments":["3"]},{"Key":"number 3","Fragments":["isn't"]},{"Key":"3 isn't","Fragments":["necessarily"]},{"Key":"isn't necessarily","Fragments":["the","an"]},{"Key":"necessarily the","Fragments":["best"]},{"Key":"best but","Fragments":["tried"]},{"Key":"but tried","Fragments":["it"]},{"Key":"tried it","Fragments":["a","out.","with","out."]},{"Key":"few different","Fragments":["ways"]},{"Key":"different ways","Fragments":["and","to"]},{"Key":"ways and","Fragments":["that"]},{"Key":"that will","Fragments":["do","make","work","not","be","be","never","help","spell"]},{"Key":" exercism","Fragments":["submit","submit","submit","submit","submit","submit","-","[global","submit"]},{"Key":"exercism submit","Fragments":["can","raindrops.cpp","--test","$1.cpp","$1.cpp","bob.h","bob.h"]},{"Key":"submit can","Fragments":["take"]},{"Key":"take multiple","Fragments":["arguments","ranges,"]},{"Key":"multiple arguments","Fragments":["to"]},{"Key":"arguments to","Fragments":["upload","go","kind","string","`compute`","our","the"]},{"Key":"to upload","Fragments":["multiple","it).","your"]},{"Key":"upload multiple","Fragments":["files","files"]},{"Key":"multiple files","Fragments":["(e.g.","to","at","in"]},{"Key":"files (e.g.","Fragments":["a"]},{"Key":"(e.g. a","Fragments":["source"]},{"Key":"a source","Fragments":["and","file,","file,","file","of","file..."]},{"Key":"source and","Fragments":["a"]},{"Key":"a header)","Fragments":["in"]},{"Key":"header) in","Fragments":["one"]},{"Key":"value int?","Fragments":["I"]},{"Key":"int? I","Fragments":["don't","guess"]},{"Key":"see any","Fragments":["negative","reason","usage","reasons","problems,","problems"]},{"Key":"any negative","Fragments":["values"]},{"Key":"negative values","Fragments":["getting","is"]},{"Key":"values getting","Fragments":["returned."]},{"Key":"The amount","Fragments":["of"]},{"Key":"I spent","Fragments":["trying","some","about"]},{"Key":"spent trying","Fragments":["to"]},{"Key":"to retrieve","Fragments":["values"]},{"Key":"retrieve values","Fragments":["from"]},{"Key":"map was","Fragments":["considerable!"]},{"Key":"I'm still","Fragments":["trying","working","not","really","trying","not","not"]},{"Key":"still trying","Fragments":["to","to","to"]},{"Key":"work out","Fragments":["why","of","from","the","a","how","the"]},{"Key":"why ```m_count[nuc]```","Fragments":["doesn't"]},{"Key":"```m_count[nuc]``` doesn't","Fragments":["work"]},{"Key":" s.find_first_not_of('","Fragments":["')"]},{"Key":"without checking,","Fragments":["i"]},{"Key":"checking, i","Fragments":["am"]},{"Key":"sure its","Fragments":["more"]},{"Key":"more compile","Fragments":["time"]},{"Key":"time efficient,","Fragments":["it"]},{"Key":"efficient, it","Fragments":["also"]},{"Key":"also improves","Fragments":["readability."]},{"Key":"and on","Fragments":["the","my","a"]},{"Key":"return s.length()","Fragments":["=="]},{"Key":"s.length() ==","Fragments":["0;"]},{"Key":"also use","Fragments":["a","the","const","proper","a","an","std::numeric_limits\u003c\u003e::max().","an"]},{"Key":"a sting","Fragments":["just"]},{"Key":"sting just","Fragments":["like"]},{"Key":"an char","Fragments":["array."]},{"Key":"not saying","Fragments":[".at"]},{"Key":"saying .at","Fragments":["is"]},{"Key":".at is","Fragments":["wrong,"]},{"Key":"is wrong,","Fragments":["just"]},{"Key":"wrong, just","Fragments":["a","a"]},{"Key":"am surprised","Fragments":["you"]},{"Key":"surprised you","Fragments":["don't"]},{"Key":"a signed","Fragments":["unsigned","int","`int`"]},{"Key":"signed unsigned","Fragments":["conversion"]},{"Key":"unsigned conversion","Fragments":["warning.","seems"]},{"Key":"are interested","Fragments":["in"]},{"Key":"interested in","Fragments":["optimizations","shortening","the","switching","having","feedback","the","that"]},{"Key":"in optimizations","Fragments":["for"]},{"Key":"optimizations for","Fragments":["speed,"]},{"Key":"for speed,","Fragments":["let","the"]},{"Key":"speed, let","Fragments":["me"]},{"Key":"let me","Fragments":["know,","know.","drive","know","do","know","move","know","know!","know.","add"]},{"Key":"me know,","Fragments":["there"]},{"Key":"know, there","Fragments":["are"]},{"Key":"some things","Fragments":["you","that","will","to","would","researching","I'm"]},{"Key":"do mathematically","Fragments":["to"]},{"Key":"mathematically to","Fragments":["reduce"]},{"Key":"reduce the","Fragments":["runtime","length","overall","amount","space","required","required","number","number","string","complexity"]},{"Key":" @ervin","Fragments":["Yeah,"]},{"Key":"@ervin Yeah,","Fragments":["it"]},{"Key":"Yeah, it","Fragments":["was","should"]},{"Key":"a happy","Fragments":["accident"]},{"Key":"happy accident","Fragments":["really,"]},{"Key":"accident really,","Fragments":["I"]},{"Key":"really, I","Fragments":["initially"]},{"Key":"did all","Fragments":["of","the"]},{"Key":"math based","Fragments":["on"]},{"Key":"a 12","Fragments":["hour"]},{"Key":"12 hour","Fragments":["clock"]},{"Key":"hour clock","Fragments":["until"]},{"Key":"clock until","Fragments":["I"]},{"Key":"I hit","Fragments":["a"]},{"Key":"hit a","Fragments":["unit","wall"]},{"Key":"a unit","Fragments":["test"]},{"Key":"unit test","Fragments":["that","was","that"]},{"Key":"test that","Fragments":["made","requires"]},{"Key":"it clear","Fragments":["they","that","I'm","what","when"]},{"Key":"clear they","Fragments":["expected"]},{"Key":"they expected","Fragments":["a"]},{"Key":"expected a","Fragments":["24"]},{"Key":"a 24","Fragments":["hour"]},{"Key":"24 hour","Fragments":["clock."]},{"Key":" @maida","Fragments":["Depends"]},{"Key":"@maida Depends","Fragments":["on"]},{"Key":"Depends on","Fragments":["the"]},{"Key":"compiler really.","Fragments":["It"]},{"Key":"really. It","Fragments":["is"]},{"Key":"is certainly","Fragments":["more","more"]},{"Key":"certainly more","Fragments":["reliable","concise."]},{"Key":"more reliable","Fragments":["with"]},{"Key":"reliable with","Fragments":["const"]},{"Key":"const qualifier.","Fragments":["I","On"]},{"Key":"qualifier. I","Fragments":["strongly"]},{"Key":"I strongly","Fragments":["suggest"]},{"Key":"strongly suggest","Fragments":["watching"]},{"Key":"suggest watching","Fragments":["http://www.gdcvault.com/play/1021866/Code-Clinic-2015-How-to"]},{"Key":"feel bad","Fragments":["that"]},{"Key":"bad that","Fragments":["I'm"]},{"Key":"that I'm","Fragments":["not","recommending","transforming","unable"]},{"Key":"not making","Fragments":["any","explicit","me"]},{"Key":"making any","Fragments":["attempt"]},{"Key":"any attempt","Fragments":["at"]},{"Key":"attempt at","Fragments":["handling","handling"]},{"Key":"at handling","Fragments":["any","the"]},{"Key":"handling any","Fragments":["character"]},{"Key":"any character","Fragments":["outside","that"]},{"Key":"character outside","Fragments":["Latin-1."]},{"Key":"outside Latin-1.","Fragments":["I"]},{"Key":"Latin-1. I","Fragments":["like"]},{"Key":"like Ogonek,","Fragments":["but"]},{"Key":"Ogonek, but","Fragments":["this"]},{"Key":"new computer","Fragments":["and"]},{"Key":"computer and","Fragments":["its"]},{"Key":"and its","Fragments":["installation","regex","vector","implications.","member.","memory","implementation.","good","calls"]},{"Key":"its installation","Fragments":["is"]},{"Key":"installation is","Fragments":["a"]},{"Key":"different types","Fragments":["of","in"]},{"Key":"types of","Fragments":["loops","errors.","your","errors","solutions"]},{"Key":"of loops","Fragments":["rather","over"]},{"Key":"loops rather","Fragments":["than"]},{"Key":"one consistent","Fragments":["style?","syntax"]},{"Key":"consistent style?","Fragments":["There's"]},{"Key":"style? There's","Fragments":["the"]},{"Key":"There's the","Fragments":["old-fashioned"]},{"Key":"the old-fashioned","Fragments":["one"]},{"Key":"old-fashioned one","Fragments":["in"]},{"Key":"one in","Fragments":["checkQuestion,","checkShouting,","```classify```","```hey```","a","theory","the"]},{"Key":"in checkQuestion,","Fragments":["the","and"]},{"Key":"checkQuestion, the","Fragments":["range-based"]},{"Key":"the range-based","Fragments":["one","for"]},{"Key":"range-based one","Fragments":["in"]},{"Key":"in checkShouting,","Fragments":["the"]},{"Key":"checkShouting, the","Fragments":["string"]},{"Key":"string member-API","Fragments":["in"]},{"Key":"member-API in","Fragments":["checkQuestion,"]},{"Key":"checkQuestion, and","Fragments":["all_of"]},{"Key":"and all_of","Fragments":["with"]},{"Key":"all_of with","Fragments":["a"]},{"Key":"a lambda","Fragments":["in","to","and","(which","(see","construct.","function","function","function","function.","to","is","function"]},{"Key":"lambda in","Fragments":["checkEmpty.","there;"]},{"Key":"in checkEmpty.","Fragments":["I"]},{"Key":"checkEmpty. I","Fragments":["prefer"]},{"Key":"prefer \u003calgorithm\u003e","Fragments":["stuff"]},{"Key":"\u003calgorithm\u003e stuff","Fragments":["which"]},{"Key":"stuff which","Fragments":["can"]},{"Key":"which can","Fragments":["do","be","show","be","have","be","cause","help","have"]},{"Key":"do all","Fragments":["these","that","hold,","this"]},{"Key":"these things,","Fragments":["but"]},{"Key":"but any","Fragments":["one","caller"]},{"Key":"any one","Fragments":["style","side"]},{"Key":"one style","Fragments":["is","over"]},{"Key":"style is","Fragments":["preferable","used","clean","clean","clean","good.","longer"]},{"Key":"is preferable","Fragments":["in","to","since","to"]},{"Key":"preferable in","Fragments":["my"]},{"Key":"opinion unless","Fragments":["there's"]},{"Key":"unless there's","Fragments":["a","a"]},{"Key":"a compelling","Fragments":["reason.","reason"]},{"Key":"const char*","Fragments":["from","that","is","argv[]){","(a","to","lower","upper","and"]},{"Key":"char* from","Fragments":["hey?"]},{"Key":"from hey?","Fragments":["Doing"]},{"Key":"hey? Doing","Fragments":["it"]},{"Key":"Doing it","Fragments":["this","even"]},{"Key":"way will","Fragments":["always"]},{"Key":"will always","Fragments":["result","have","be","be","index"]},{"Key":"always result","Fragments":["in"]},{"Key":"new memory","Fragments":["allocation"]},{"Key":"memory allocation","Fragments":["on","per-call,","is","(e.g.","on","for"]},{"Key":"allocation on","Fragments":["some","startup,"]},{"Key":"on some","Fragments":["older","machines,","level.","constants.","external","still-relevant","detailed"]},{"Key":"some older","Fragments":["compilers","code"]},{"Key":"older compilers","Fragments":["(that","ONLY"]},{"Key":"compilers (that","Fragments":["don't"]},{"Key":"(that don't","Fragments":["have"]},{"Key":"have SSO),","Fragments":["and"]},{"Key":"SSO), and","Fragments":["if"]},{"Key":"caller wants","Fragments":["that"]},{"Key":"wants that","Fragments":["they"]},{"Key":"have std::string","Fragments":["var"]},{"Key":"std::string var","Fragments":["="]},{"Key":"var =","Fragments":["bob::hey();"]},{"Key":"probably un-comment","Fragments":["yoru"]},{"Key":"un-comment yoru","Fragments":["inclusion"]},{"Key":"yoru inclusion","Fragments":["of"]},{"Key":"inclusion of","Fragments":["\u003cstring\u003e,","extra"]},{"Key":"of \u003cstring\u003e,","Fragments":["because"]},{"Key":"\u003cstring\u003e, because","Fragments":["you"]},{"Key":"use it.","Fragments":["It","I"]},{"Key":"It may","Fragments":["compile","be","be","be","be"]},{"Key":"may compile","Fragments":["now"]},{"Key":"compile now","Fragments":["because"]},{"Key":"now because","Fragments":["your"]},{"Key":"because your","Fragments":[".cpp","function","way"]},{"Key":"your .cpp","Fragments":["files"]},{"Key":".cpp files","Fragments":["may","even","generally"]},{"Key":"files may","Fragments":["include"]},{"Key":"may include","Fragments":["it"]},{"Key":"it (possibly","Fragments":["indirectly)"]},{"Key":"(possibly indirectly)","Fragments":["before"]},{"Key":"indirectly) before","Fragments":["your"]},{"Key":"header, but","Fragments":["they","IMHO","implementation","that's"]},{"Key":"they shouldn't","Fragments":["be","modify"]},{"Key":"be required","Fragments":["to","if"]},{"Key":"required to","Fragments":["do","do","behave","deal","get","value-initialize","create","create","understand","pass"]},{"Key":"way than","Fragments":["this","comparing"]},{"Key":"than this","Fragments":["loop,","iterator-based"]},{"Key":"this loop,","Fragments":["perhaps"]},{"Key":"loop, perhaps","Fragments":["one"]},{"Key":"perhaps one","Fragments":["of","of"]},{"Key":"the tokenization","Fragments":["methods"]},{"Key":"tokenization methods","Fragments":["from"]},{"Key":"methods from","Fragments":["boost."]},{"Key":"from boost.","Fragments":["But"]},{"Key":"boost. But","Fragments":["I"]},{"Key":"hate doing","Fragments":["boost::split"]},{"Key":"doing boost::split","Fragments":["in"]},{"Key":"boost::split in","Fragments":["a","my"]},{"Key":"case like","Fragments":["this","this,","this."]},{"Key":"this -","Fragments":["so","I"]},{"Key":"- so","Fragments":["incredibly","they","only","lower","you","you","you"]},{"Key":"so incredibly","Fragments":["wasteful"]},{"Key":"incredibly wasteful","Fragments":["-"]},{"Key":"wasteful -","Fragments":["and"]},{"Key":"- and","Fragments":["it's","we","header","probably","you","if","that's","that","this","there's","the","I"]},{"Key":"not wholly","Fragments":["obvious"]},{"Key":"wholly obvious","Fragments":["how"]},{"Key":"obvious how","Fragments":["to"]},{"Key":"it anyhow","Fragments":["since","(even"]},{"Key":"anyhow since","Fragments":["the"]},{"Key":"the leading","Fragments":["condition","quote","1","1","0,"]},{"Key":"leading condition","Fragments":["is"]},{"Key":"is different","Fragments":["from","about"]},{"Key":"different from","Fragments":["the","haskells","some","one"]},{"Key":"the end.","Fragments":["Yeah,"]},{"Key":"end. Yeah,","Fragments":["I"]},{"Key":"Yeah, I","Fragments":["could've","am","think","have"]},{"Key":"I could've","Fragments":["made","tried","gotten","sworn","using"]},{"Key":"could've made","Fragments":["it"]},{"Key":"it work,","Fragments":["but"]},{"Key":"work, but","Fragments":["I","I","you'll"]},{"Key":"don't feel","Fragments":["like","like","like","like"]},{"Key":"the comments","Fragments":["-","with","about"]},{"Key":"comments -","Fragments":["they","I"]},{"Key":"- they","Fragments":["really","generally","couldn't","only","would"]},{"Key":"they really","Fragments":["clear","global","help","should","work"]},{"Key":"really clear","Fragments":["it","what"]},{"Key":"clear it","Fragments":["up."]},{"Key":"it up.","Fragments":["Unfortunately"]},{"Key":"up. Unfortunately","Fragments":["they're"]},{"Key":"Unfortunately they're","Fragments":["necessary."]},{"Key":"they're necessary.","Fragments":["An"]},{"Key":"necessary. An","Fragments":["if"]},{"Key":"An if","Fragments":["inside"]},{"Key":"if inside","Fragments":["of","of"]},{"Key":"a do-while...","Fragments":["I"]},{"Key":"do-while... I","Fragments":["think"]},{"Key":"think someone","Fragments":["comfortable"]},{"Key":"someone comfortable","Fragments":["with"]},{"Key":"comfortable with","Fragments":["boost::tokenizer","them","it.","those","classes","recusion"]},{"Key":"with boost::tokenizer","Fragments":["can"]},{"Key":"boost::tokenizer can","Fragments":["do"]},{"Key":"reason why","Fragments":["you","this","you","you","it","you","when","you"]},{"Key":"you declared","Fragments":["item","another"]},{"Key":"declared item","Fragments":["(in"]},{"Key":"item (in","Fragments":["the"]},{"Key":"(in the","Fragments":["loop"]},{"Key":"loop at","Fragments":["the","1"]},{"Key":"the bottom)","Fragments":["as","was"]},{"Key":"bottom) as","Fragments":["a"]},{"Key":"a by-value","Fragments":["copy","parameter)","copy","*temporary*"]},{"Key":"by-value copy","Fragments":["rather","of"]},{"Key":"copy rather","Fragments":["than"]},{"Key":"than const","Fragments":["auto\u0026","std::string\u0026"]},{"Key":"const auto\u0026","Fragments":["?","p"]},{"Key":"declare your","Fragments":["variables","loop","strings","char","```str2Length```"]},{"Key":"your variables","Fragments":["close","at"]},{"Key":"variables close","Fragments":["to","to"]},{"Key":"close to","Fragments":["where","it","where","declaring","opening","`0`","your","the","hitting"]},{"Key":"to where","Fragments":["they","they're","this","they"]},{"Key":"are first","Fragments":["used."]},{"Key":"first used.","Fragments":["And"]},{"Key":"used. And","Fragments":["why"]},{"Key":"And why","Fragments":["declare"]},{"Key":"why declare","Fragments":["b"]},{"Key":"declare b","Fragments":["and"]},{"Key":"b and","Fragments":["e"]},{"Key":"and e","Fragments":["and"]},{"Key":"e and","Fragments":["not"]},{"Key":"the transform?","Fragments":["Also,"]},{"Key":"transform? Also,","Fragments":["iterators"]},{"Key":"Also, iterators","Fragments":["are"]},{"Key":"iterators are","Fragments":["one","sufficient."]},{"Key":"are one","Fragments":["of"]},{"Key":"best uses","Fragments":["of"]},{"Key":"of auto.","Fragments":["No"]},{"Key":"auto. No","Fragments":["need"]},{"Key":"to state","Fragments":["r","it","your","as"]},{"Key":"state r","Fragments":["="]},{"Key":"r =","Fragments":["\"\"","a"]},{"Key":"= \"\"","Fragments":["-","is"]},{"Key":"\"\" -","Fragments":["the"]},{"Key":"- the","Fragments":["empty","more","exact","frequency","return","compiler","one","compiler","bool","bool"]},{"Key":"the default.","Fragments":["Don't","Makes"]},{"Key":"default. Don't","Fragments":["using"]},{"Key":"Don't using","Fragments":["namespace"]},{"Key":"std especially","Fragments":["in"]},{"Key":"especially in","Fragments":["a","a"]},{"Key":"a header,","Fragments":["you're","so","maybe","which"]},{"Key":"header, you're","Fragments":["begging"]},{"Key":"you're begging","Fragments":["for"]},{"Key":"begging for","Fragments":["collisions","it."]},{"Key":"for collisions","Fragments":["(especially"]},{"Key":"collisions (especially","Fragments":["since"]},{"Key":"(especially since","Fragments":["boost"]},{"Key":"since boost","Fragments":["is","is"]},{"Key":"is invoked","Fragments":["by"]},{"Key":"invoked by","Fragments":["the"]},{"Key":"test framework,","Fragments":["so"]},{"Key":"framework, so","Fragments":["things"]},{"Key":"so things","Fragments":["like"]},{"Key":"things like","Fragments":["std::bind","word_count::find_if","trinary::next_permutation","using","anagram::anagram::stable_sort,","size()","non-breaking","that.","this.","`\"this,is\"`.","lookaheads","\"AAA\"","this","i,","trailing","integer","punctuation","regex)","regex)"]},{"Key":"like std::bind","Fragments":["vs."]},{"Key":"std::bind vs.","Fragments":["boost::bind"]},{"Key":"vs. boost::bind","Fragments":["or"]},{"Key":"boost::bind or","Fragments":["shared_ptr"]},{"Key":"or shared_ptr","Fragments":["or"]},{"Key":"shared_ptr or","Fragments":["thread"]},{"Key":"or thread","Fragments":["etc.)."]},{"Key":" Consider","Fragments":["replacing","being","trying","combining","trying","using","replacing","putting","changing","using","using","a"]},{"Key":"Consider replacing","Fragments":["isignorablepunct","your"]},{"Key":"replacing isignorablepunct","Fragments":["with"]},{"Key":"isignorablepunct with","Fragments":["something"]},{"Key":"like isignorablechar,","Fragments":["and"]},{"Key":"isignorablechar, and","Fragments":["consider"]},{"Key":"consider whitespace","Fragments":["to"]},{"Key":"whitespace to","Fragments":["be","illustrate"]},{"Key":"be ignorable.","Fragments":["That"]},{"Key":"ignorable. That","Fragments":["way"]},{"Key":"way (isspace(*b)||isignorablepunct(*b))","Fragments":["becomes"]},{"Key":"(isspace(*b)||isignorablepunct(*b)) becomes","Fragments":["isignorablechar(*b)"]},{"Key":"becomes isignorablechar(*b)","Fragments":["and"]},{"Key":"isignorablechar(*b) and","Fragments":["!isspace(*e)"]},{"Key":"and !isspace(*e)","Fragments":["\u0026\u0026"]},{"Key":"!isspace(*e) \u0026\u0026","Fragments":["!"]},{"Key":"\u0026\u0026 !","Fragments":["isignorablepunct(*c)","matches_lower`","std::any_of(sentence.begin(),"]},{"Key":"! isignorablepunct(*c)","Fragments":["becomes"]},{"Key":"isignorablepunct(*c) becomes","Fragments":["!isignorablechar(*e)."]},{"Key":" Once","Fragments":["you've","I","I"]},{"Key":"Once you've","Fragments":["done","passed"]},{"Key":"you've done","Fragments":["that","and","with"]},{"Key":"will become","Fragments":["that","a"]},{"Key":"become that","Fragments":["much"]},{"Key":"that much","Fragments":["more","to","better","better","is","time"]},{"Key":"more convenient","Fragments":["to"]},{"Key":"convenient to","Fragments":["replace"]},{"Key":"to replace","Fragments":["these","\"else","`==","`last[-1]`","size","my","```boost::algorithm::ends_with(str2,","some","namespaces.\""]},{"Key":"replace these","Fragments":["while"]},{"Key":"these while","Fragments":["loops"]},{"Key":"while loops","Fragments":["with","..."]},{"Key":"loops with","Fragments":["find_if","std::any/al/none_of","std::any/all/none_of"]},{"Key":"with find_if","Fragments":["and"]},{"Key":"find_if and","Fragments":["find_if_not"]},{"Key":"and find_if_not","Fragments":[":)"]},{"Key":"do decide","Fragments":["to"]},{"Key":"decide to","Fragments":["use","move","use."]},{"Key":"a C-style","Fragments":["string","string"]},{"Key":"C-style string","Fragments":["parameter","that"]},{"Key":"string parameter","Fragments":["instead,","by"]},{"Key":"parameter instead,","Fragments":["presumably"]},{"Key":"instead, presumably","Fragments":["for"]},{"Key":"presumably for","Fragments":["performance"]},{"Key":"for performance","Fragments":["reasons,","reasons:","reasons"]},{"Key":"still find","Fragments":["begin"]},{"Key":"find begin","Fragments":["and"]},{"Key":"end (begin","Fragments":["is"]},{"Key":"(begin is","Fragments":["the"]},{"Key":"char* that","Fragments":["is"]},{"Key":"is normally","Fragments":["passed"]},{"Key":"normally passed","Fragments":["around,"]},{"Key":"passed around,","Fragments":["end"]},{"Key":"around, end","Fragments":["is"]},{"Key":"end is","Fragments":["std::strchr(begin,'\\0')","reached."]},{"Key":"is std::strchr(begin,'\\0')","Fragments":[")"]},{"Key":" std::tolower","Fragments":["has"]},{"Key":"std::tolower has","Fragments":["no"]},{"Key":"no effect","Fragments":["on"]},{"Key":"effect on","Fragments":["!isupper","functions"]},{"Key":"on !isupper","Fragments":["chars."]},{"Key":"!isupper chars.","Fragments":["So"]},{"Key":"chars. So","Fragments":["your"]},{"Key":"So your","Fragments":["word_count::to_lower","`private:`","header"]},{"Key":"your word_count::to_lower","Fragments":["is"]},{"Key":"word_count::to_lower is","Fragments":["equivalent"]},{"Key":"the classic","Fragments":["std::transform("]},{"Key":"classic std::transform(","Fragments":["std::begin(s),"]},{"Key":"std::transform( std::begin(s),","Fragments":["std::end(s),"]},{"Key":"std::begin(s), std::end(s),","Fragments":["std::begin(s),"]},{"Key":"std::end(s), std::begin(s),","Fragments":["::tolower"]},{"Key":"std::begin(s), ::tolower","Fragments":[");"]},{"Key":"::tolower );","Fragments":["except"]},{"Key":"); except","Fragments":["that"]},{"Key":"except that","Fragments":["you","it","this"]},{"Key":"you then","Fragments":["copy"]},{"Key":"then copy","Fragments":["the"]},{"Key":"string back","Fragments":["rather"]},{"Key":"back rather","Fragments":["than"]},{"Key":"than take","Fragments":["the"]},{"Key":"reference and","Fragments":["do","found","returning","then","a","then","modified"]},{"Key":"the to-lowering","Fragments":["in-place"]},{"Key":"to-lowering in-place","Fragments":["(which"]},{"Key":"in-place (which","Fragments":["is"]},{"Key":"a bad","Fragments":["idea","idea","idea,","decision.","idea","idea,","example","idea.","idea.","idea."]},{"Key":"bad idea","Fragments":["in","to","```using"]},{"Key":"idea in","Fragments":["this"]},{"Key":"What a","Fragments":["perfectly"]},{"Key":"reasonable implementation.","Fragments":["So"]},{"Key":"implementation. So","Fragments":["now"]},{"Key":"So now","Fragments":["I'll"]},{"Key":"now I'll","Fragments":["pick","just","research"]},{"Key":"I'll pick","Fragments":["on"]},{"Key":"pick on","Fragments":["minor"]},{"Key":"on minor","Fragments":["details."]},{"Key":"function deserves","Fragments":["to"]},{"Key":"deserves to","Fragments":["be","be"]},{"Key":"separate source","Fragments":["file,","file"]},{"Key":"source file,","Fragments":["with","the","especially","like","but","the","making","but","so"]},{"Key":"file, with","Fragments":["external"]},{"Key":"with external","Fragments":["linkage,","linkage"]},{"Key":"external linkage,","Fragments":["and"]},{"Key":"linkage, and","Fragments":["only"]},{"Key":"only forward-declared","Fragments":["in"]},{"Key":"forward-declared in","Fragments":["the"]},{"Key":"header. And","Fragments":["maybe","it's"]},{"Key":"And maybe","Fragments":["a","use"]},{"Key":"maybe a","Fragments":["more","free","sign"]},{"Key":"descriptive message","Fragments":["in"]},{"Key":"message in","Fragments":["your"]},{"Key":"Maybe be","Fragments":["consistent"]},{"Key":"be consistent","Fragments":["about","in"]},{"Key":"consistent about","Fragments":["the"]},{"Key":"the formatting","Fragments":["of"]},{"Key":"formatting of","Fragments":["one-line"]},{"Key":"of one-line","Fragments":["if"]},{"Key":"one-line if","Fragments":["statements:"]},{"Key":"if statements:","Fragments":["I'd"]},{"Key":"statements: I'd","Fragments":["prefer"]},{"Key":"I'd prefer","Fragments":["having","to","readability","readability","to","prefix"]},{"Key":"prefer having","Fragments":["++count"]},{"Key":"having ++count","Fragments":["on"]},{"Key":"++count on","Fragments":["the"]},{"Key":"following line","Fragments":["and"]},{"Key":"line and","Fragments":["indented","replace"]},{"Key":"and indented","Fragments":["the"]},{"Key":"indented the","Fragments":["way"]},{"Key":"way your","Fragments":["throw","implementation","constructor","functions"]},{"Key":"your throw","Fragments":["is."]},{"Key":"The using","Fragments":["statements","namespace","namespace","std::string"]},{"Key":"are kinda","Fragments":["dumb,"]},{"Key":"kinda dumb,","Fragments":["I"]},{"Key":"dumb, I","Fragments":["know.","just"]},{"Key":"I know.","Fragments":["That's"]},{"Key":"know. That's","Fragments":["good"]},{"Key":"That's good","Fragments":["practice"]},{"Key":"template function,","Fragments":["but","finally.","like"]},{"Key":"here the","Fragments":["types","change"]},{"Key":"the types","Fragments":["are","of","are","are"]},{"Key":"are kind","Fragments":["of","of","of"]},{"Key":"of locked","Fragments":["in,"]},{"Key":"locked in,","Fragments":["it's"]},{"Key":"in, it's","Fragments":["mostly"]},{"Key":"it's mostly","Fragments":["about","preference"]},{"Key":"mostly about","Fragments":["the"]},{"Key":"the operative","Fragments":["lines"]},{"Key":"operative lines","Fragments":["not"]},{"Key":"lines not","Fragments":["ending"]},{"Key":"not ending","Fragments":["up"]},{"Key":"ending up","Fragments":["huge."]},{"Key":"probably should've","Fragments":["#included"]},{"Key":"should've #included","Fragments":["\u003cstdexcept\u003e"]},{"Key":"#included \u003cstdexcept\u003e","Fragments":["and"]},{"Key":"\u003cstdexcept\u003e and","Fragments":["\u003calgorithm\u003e"]},{"Key":"and \u003calgorithm\u003e","Fragments":["just"]},{"Key":"\u003calgorithm\u003e just","Fragments":["as"]},{"Key":"just as","Fragments":["a","C","specified","good:","easily","`+xpr::space`","concise","valid","well","well","well"]},{"Key":"of good","Fragments":["practice.","things","points"]},{"Key":"good practice.","Fragments":["I"]},{"Key":"practice. I","Fragments":["shouldn't","removed"]},{"Key":"I shouldn't","Fragments":["rely","really","have"]},{"Key":"shouldn't rely","Fragments":["on"]},{"Key":"on boost","Fragments":["to"]},{"Key":"boost to","Fragments":["include","execute"]},{"Key":"include sections","Fragments":["of"]},{"Key":"sections of","Fragments":["the"]},{"Key":"me, since","Fragments":["it's","I"]},{"Key":"since it's","Fragments":["just","defined","being","passed","doing","only","const*.","longer"]},{"Key":"a coincidence","Fragments":["and"]},{"Key":"coincidence and","Fragments":["they're"]},{"Key":"and they're","Fragments":["free"]},{"Key":"they're free","Fragments":["to"]},{"Key":"free to","Fragments":["remove","pick","poke","go","suggest"]},{"Key":"remove it","Fragments":["in","until",":)"]},{"Key":"a future","Fragments":["version","revision."]},{"Key":"future version","Fragments":["of"]},{"Key":"write \"using","Fragments":["namespace\""]},{"Key":"\"using namespace\"","Fragments":["in","out"]},{"Key":"namespace\" in","Fragments":["a"]},{"Key":"think using","Fragments":["classes","regex","a","two","OOP"]},{"Key":"using classes","Fragments":["is"]},{"Key":"classes is","Fragments":["a"]},{"Key":"bit overkill","Fragments":["here."]},{"Key":"For your","Fragments":["`any_alpha`","`SILENT`,","purpose"]},{"Key":"your `any_alpha`","Fragments":["and"]},{"Key":"`any_alpha` and","Fragments":["`no_lower`"]},{"Key":"and `no_lower`","Fragments":["function,"]},{"Key":"`no_lower` function,","Fragments":["using"]},{"Key":"function, using","Fragments":["`find_if`"]},{"Key":"using `find_if`","Fragments":["can"]},{"Key":"`find_if` can","Fragments":["reduce"]},{"Key":"can reduce","Fragments":["the","complexity."]},{"Key":"to one","Fragments":["or","of","loop","in","style."]},{"Key":"or two","Fragments":["lines.","levels"]},{"Key":"of anonymous","Fragments":["namespace","namespaces","namespace"]},{"Key":"namespace to","Fragments":["avoid","group","make","them","keep","find","keep","match"]},{"Key":"avoid naming","Fragments":["collisions"]},{"Key":"naming collisions","Fragments":["in"]},{"Key":"collisions in","Fragments":["the"]},{"Key":"Your return","Fragments":["value"]},{"Key":"value from","Fragments":["bob::hey","`removeSpaces`"]},{"Key":"from bob::hey","Fragments":["should"]},{"Key":"bob::hey should","Fragments":["not"]},{"Key":"be const.","Fragments":["(returning","Mostly"]},{"Key":"const. (returning","Fragments":["const"]},{"Key":"(returning const","Fragments":["values"]},{"Key":"const values","Fragments":["doesn't"]},{"Key":"values doesn't","Fragments":["make"]},{"Key":"doesn't make","Fragments":["much","any","any"]},{"Key":"make much","Fragments":["sense)","difference"]},{"Key":"point in","Fragments":["copying","using","the","checking","mind"]},{"Key":"in copying","Fragments":["your"]},{"Key":"copying your","Fragments":["responseString","result"]},{"Key":"your responseString","Fragments":["into"]},{"Key":"responseString into","Fragments":["a"]},{"Key":"would suggest","Fragments":["adding","moving","changing","using","refactoing","changing","changing","refactoring","trying","using"]},{"Key":"suggest adding","Fragments":["an","a","comments"]},{"Key":"an else","Fragments":["clause","I","that"]},{"Key":"clause and","Fragments":["returning"]},{"Key":"strings directly","Fragments":["within"]},{"Key":"directly within","Fragments":["each"]},{"Key":"within each","Fragments":["conditional."]},{"Key":" Prefer","Fragments":["to"]},{"Key":"Prefer to","Fragments":["use"]},{"Key":"use \"isalpha\"","Fragments":["and"]},{"Key":"\"isalpha\" and","Fragments":["\"isupper\""]},{"Key":"and \"isupper\"","Fragments":["from"]},{"Key":"\"isupper\" from","Fragments":["the"]},{"Key":"the std","Fragments":["namespace.","namespace.","versions","namespace.","namespace","versions,","version","namespace","namespace,","namespace"]},{"Key":" Thanks.","Fragments":["Will","I","I'm","I",":)","I","I'll","That's"]},{"Key":"Thanks. Will","Fragments":["do."]},{"Key":"I disagree","Fragments":["with","with","with"]},{"Key":"the requirement","Fragments":["that","that","of"]},{"Key":"requirement that","Fragments":["a","the","it"]},{"Key":"anagram of","Fragments":["itself.","the","itself.","'cca'.","'cca'."]},{"Key":"itself. But","Fragments":["what"]},{"Key":"But what","Fragments":["really","happens","would","will","is"]},{"Key":"what really","Fragments":["perturbs"]},{"Key":"really perturbs","Fragments":["me"]},{"Key":"perturbs me","Fragments":["about"]},{"Key":"me about","Fragments":["that","this.","it:","10"]},{"Key":"that in","Fragments":["order","the","case","the","there.","a","a","your","my","iteration","c++","C++","more","my","C++","the","your","the","your","a","the","mind.","my","an"]},{"Key":"to satisfy","Fragments":["it","the"]},{"Key":"satisfy it","Fragments":["I"]},{"Key":"it I","Fragments":["need","changed","would","think","think","think"]},{"Key":"for full","Fragments":["equality","anagrams."]},{"Key":"full equality","Fragments":["-"]},{"Key":"equality -","Fragments":["the"]},{"Key":"efficient histogram","Fragments":["structure"]},{"Key":"histogram structure","Fragments":["is"]},{"Key":"structure is","Fragments":["insufficient.","very"]},{"Key":"So I","Fragments":["had","would","will","reached","looked","just","would","alphabetically","managed","almost","would","just","put","need","split","need","would","wrestled","gone","implemented","use","challenged"]},{"Key":"a couple","Fragments":["options.","issues:","of","of","of","tries","of","specific","reasons:","things","of","things","times","of","glances.","of","of","of","of","of","flags","of","tests","of","extra","things,","of","of","of","of","nitpicks.","of","things"]},{"Key":"couple options.","Fragments":["I"]},{"Key":"options. I","Fragments":["could"]},{"Key":"could maintain","Fragments":["the"]},{"Key":"the string_ref,","Fragments":["but"]},{"Key":"string_ref, but","Fragments":["that"]},{"Key":"that adds","Fragments":["the","to","an","a"]},{"Key":"adds the","Fragments":["requirement","key","boost"]},{"Key":"original string","Fragments":["must","since","(which","with"]},{"Key":"string must","Fragments":["outlive","contain"]},{"Key":"must outlive","Fragments":["the"]},{"Key":"outlive the","Fragments":["anagram","roster.","function,"]},{"Key":"the anagram","Fragments":["object.","object.","of","based","into"]},{"Key":"anagram object.","Fragments":["That's"]},{"Key":"object. That's","Fragments":["not"]},{"Key":"That's not","Fragments":["how","really","much","shouting,","what"]},{"Key":"not how","Fragments":["other"]},{"Key":"how other","Fragments":["similar"]},{"Key":"other similar","Fragments":["classes,"]},{"Key":"similar classes,","Fragments":["e.g."]},{"Key":"classes, e.g.","Fragments":["std::regex,"]},{"Key":"e.g. std::regex,","Fragments":["behave"]},{"Key":"std::regex, behave","Fragments":["so"]},{"Key":"behave so","Fragments":["I"]},{"Key":"think people","Fragments":["would"]},{"Key":"people would","Fragments":["find","recommend","do,","agree"]},{"Key":"would find","Fragments":["it","this"]},{"Key":"it surprising","Fragments":["and"]},{"Key":"surprising and","Fragments":["I"]},{"Key":"believe in","Fragments":["the"]},{"Key":"of least","Fragments":["surprise.","resistance"]},{"Key":"least surprise.","Fragments":["I"]},{"Key":"surprise. I","Fragments":["could"]},{"Key":"could store","Fragments":["it"]},{"Key":"store it","Fragments":["in","in","in"]},{"Key":"a std::string,","Fragments":["but"]},{"Key":"std::string, but","Fragments":["there's","even"]},{"Key":"good chance","Fragments":["(depending","to"]},{"Key":"chance (depending","Fragments":["on"]},{"Key":"on library","Fragments":["and"]},{"Key":"library and","Fragments":["possibly","found","there","even"]},{"Key":"and possibly","Fragments":["string","save","read.","even"]},{"Key":"possibly string","Fragments":["length)"]},{"Key":"string length)","Fragments":["that"]},{"Key":"length) that","Fragments":["this"]},{"Key":"will incur","Fragments":["a"]},{"Key":"incur a","Fragments":["dynamic"]},{"Key":"a dynamic","Fragments":["memory","memory","constructed"]},{"Key":"dynamic memory","Fragments":["allocation,","allocation","allocation,","allocations?","allocation","allocation.","is","allocation"]},{"Key":"memory allocation,","Fragments":["which","when"]},{"Key":"allocation, which","Fragments":["is"]},{"Key":"just evil","Fragments":["especially"]},{"Key":"evil especially","Fragments":["considering"]},{"Key":"especially considering","Fragments":["it's"]},{"Key":"considering it's","Fragments":["being"]},{"Key":"it's being","Fragments":["done","used","assigned."]},{"Key":"being done","Fragments":["for"]},{"Key":"a stupid","Fragments":["reason."]},{"Key":"stupid reason.","Fragments":["The"]},{"Key":"reason. The","Fragments":["third"]},{"Key":"The third","Fragments":["option"]},{"Key":"third option","Fragments":["would"]},{"Key":"option would","Fragments":["be","be","be","be","be"]},{"Key":"a hash","Fragments":["of","collision)"]},{"Key":"hash of","Fragments":["the","the"]},{"Key":"original string,","Fragments":["but","so"]},{"Key":"string, but","Fragments":["that's"]},{"Key":"that's much","Fragments":["more"]},{"Key":"more error-prone","Fragments":["and"]},{"Key":"error-prone and","Fragments":["difficult"]},{"Key":"to code","Fragments":["properly."]},{"Key":"code properly.","Fragments":["I"]},{"Key":"properly. I","Fragments":["guess"]},{"Key":"guess I","Fragments":["could've","could","could","still","should","went","didn't","got","had"]},{"Key":"could've tried","Fragments":["std::hash\u003cstd::string\u003e"]},{"Key":"tried std::hash\u003cstd::string\u003e","Fragments":["in"]},{"Key":"std::hash\u003cstd::string\u003e in","Fragments":["addition"]},{"Key":"in addition","Fragments":["to","to","to"]},{"Key":"addition to","Fragments":["saving","pulling","what","single-parameter","changing","Cpp","spaces","making","the"]},{"Key":"to saving","Fragments":["the"]},{"Key":"other check,","Fragments":["but"]},{"Key":"check, but","Fragments":["then","ran","it's"]},{"Key":"to construct","Fragments":["a","(at","your"]},{"Key":"a std::string","Fragments":["anyhow!","for","or","rather","is","\u0026","\u0026","unless","\u0026"]},{"Key":"std::string anyhow!","Fragments":["And"]},{"Key":"anyhow! And","Fragments":["you"]},{"Key":"that hash","Fragments":["would"]},{"Key":"hash would","Fragments":["be"]},{"Key":"be suboptimal","Fragments":["anyhow"]},{"Key":"suboptimal anyhow","Fragments":["because"]},{"Key":"anyhow because","Fragments":["they"]},{"Key":"because they","Fragments":["have","can","own","are","know","don't","do","make"]},{"Key":"they have","Fragments":["to","so","functions","on"]},{"Key":"avoid collision","Fragments":["with"]},{"Key":"collision with","Fragments":["strings"]},{"Key":"with strings","Fragments":["of"]},{"Key":"strings of","Fragments":["varying"]},{"Key":"of varying","Fragments":["sizes."]},{"Key":"don't using","Fragments":["namespace"]},{"Key":"a header.","Fragments":["It's","Even"]},{"Key":"header. It's","Fragments":["not"]},{"Key":"just polluting","Fragments":["your"]},{"Key":"polluting your","Fragments":["global"]},{"Key":"your global","Fragments":["namespace","namespace"]},{"Key":"namespace but","Fragments":["also","since","I"]},{"Key":"but also","Fragments":["that","sometimes","it","to","your","practically","numbers"]},{"Key":"also that","Fragments":["of","I"]},{"Key":"any source","Fragments":["file"]},{"Key":"which includes","Fragments":["your"]},{"Key":"your header.","Fragments":["And","If"]},{"Key":"And it's","Fragments":["especially","easier","almost"]},{"Key":"it's especially","Fragments":["dangerous","useful"]},{"Key":"especially dangerous","Fragments":["because"]},{"Key":"dangerous because","Fragments":["you"]},{"Key":"this project","Fragments":["is","to","to","to"]},{"Key":"project is","Fragments":["using"]},{"Key":"is using","Fragments":["both","std::regex","the","regular"]},{"Key":"using both","Fragments":["std","std"]},{"Key":"both std","Fragments":["and","and"]},{"Key":"std and","Fragments":["boost,","boost","boost,"]},{"Key":"and boost,","Fragments":["which","at"]},{"Key":"boost, which","Fragments":["have","makes"]},{"Key":"which have","Fragments":["all"]},{"Key":"all kinds","Fragments":["of","of","of","of"]},{"Key":"kinds of","Fragments":["collisions","containers","whitespace.","responses","responses","things.","string","strange"]},{"Key":"of collisions","Fragments":["(thread,","between"]},{"Key":"collisions (thread,","Fragments":["shared_ptr,"]},{"Key":"(thread, shared_ptr,","Fragments":["regex,"]},{"Key":"shared_ptr, regex,","Fragments":["tuple,"]},{"Key":"regex, tuple,","Fragments":["bind,"]},{"Key":"tuple, bind,","Fragments":["etc.)"]},{"Key":"bind, etc.)","Fragments":["including"]},{"Key":"etc.) including","Fragments":["the"]},{"Key":"including the","Fragments":["super","`boost/algorithm/string.hpp`","header","header","same","header","fact","whole"]},{"Key":"the super","Fragments":["insidious"]},{"Key":"super insidious","Fragments":["std::function"]},{"Key":"insidious std::function","Fragments":["vs."]},{"Key":"std::function vs.","Fragments":["boost::function"]},{"Key":"vs. boost::function","Fragments":["which"]},{"Key":"boost::function which","Fragments":["appear"]},{"Key":"which appear","Fragments":["to"]},{"Key":"appear to","Fragments":["work","be"]},{"Key":"work together","Fragments":["but"]},{"Key":"together but","Fragments":["can"]},{"Key":"can cause","Fragments":["you","unexpected","some","a"]},{"Key":"cause you","Fragments":["to"]},{"Key":"to pay","Fragments":["an","any"]},{"Key":"pay an","Fragments":["arbitrarily"]},{"Key":"an arbitrarily","Fragments":["high"]},{"Key":"arbitrarily high","Fragments":["performance"]},{"Key":"high performance","Fragments":["penalty"]},{"Key":"penalty for","Fragments":["no"]},{"Key":"for no","Fragments":["reason.","other","real","reason","real"]},{"Key":"string since","Fragments":["you're"]},{"Key":"you're also","Fragments":["storing"]},{"Key":"also storing","Fragments":["the"]},{"Key":"string (which","Fragments":["stores","return","I"]},{"Key":"(which stores","Fragments":["its"]},{"Key":"stores its","Fragments":["own"]},{"Key":"own size","Fragments":["in"]},{"Key":"size in","Fragments":["a","theVerse's"]},{"Key":"a constant-time-accessible","Fragments":["member"]},{"Key":"constant-time-accessible member","Fragments":["variable."]},{"Key":"member variable.","Fragments":["These","That"]},{"Key":"variable. These","Fragments":["aren't"]},{"Key":"These aren't","Fragments":["C-style"]},{"Key":"aren't C-style","Fragments":["strings"]},{"Key":"C-style strings","Fragments":["where","(char"]},{"Key":"strings where","Fragments":["determining","they","the"]},{"Key":"where determining","Fragments":["the"]},{"Key":"determining the","Fragments":["length"]},{"Key":" Wow...","Fragments":["how"]},{"Key":"Wow... how","Fragments":["did"]},{"Key":"how did","Fragments":["I","anyone","you"]},{"Key":"I not","Fragments":["think","so"]},{"Key":"of sorting?","Fragments":["That's"]},{"Key":"sorting? That's","Fragments":["so"]},{"Key":"That's so","Fragments":["straightforward"]},{"Key":"so straightforward","Fragments":["and"]},{"Key":"straightforward and","Fragments":["obvious"]},{"Key":"and obvious","Fragments":["now"]},{"Key":"obvious now","Fragments":["that","you've"]},{"Key":"that I've","Fragments":["seen","worked","missed","uploaded","seen"]},{"Key":"I've seen","Fragments":["you","you","plenty","that","him","some","a","the","people","is"]},{"Key":"seen you","Fragments":["do","use","doing"]},{"Key":"it. Major","Fragments":["props."]},{"Key":"Maybe anagram::matches","Fragments":["could"]},{"Key":"anagram::matches could","Fragments":["be"]},{"Key":"In immediate","Fragments":["retrospect,"]},{"Key":"immediate retrospect,","Fragments":["since"]},{"Key":"retrospect, since","Fragments":["the"]},{"Key":"same size,","Fragments":["I"]},{"Key":"size, I","Fragments":["could"]},{"Key":"probably get","Fragments":["away","around","used","into"]},{"Key":"get away","Fragments":["with","with","with","with","with","with"]},{"Key":"away with","Fragments":["just","holding","reaching","fewer","committing","a","only"]},{"Key":"with just","Fragments":["one","what.","something","`trim`.","'string'.","a","counts[word]","returning"]},{"Key":"just one","Fragments":["comparison","question","public","big","pass"]},{"Key":"one comparison","Fragments":["in"]},{"Key":"comparison in","Fragments":["the","the","this"]},{"Key":"the `while`","Fragments":["condition."]},{"Key":"The conversion","Fragments":["warning","to","between"]},{"Key":"conversion warning","Fragments":["would"]},{"Key":"warning would","Fragments":["only"]},{"Key":"only appear","Fragments":["if"]},{"Key":"appear if","Fragments":["the"]},{"Key":"the corresponding","Fragments":["compiler","type","type"]},{"Key":"corresponding compiler","Fragments":["flags"]},{"Key":"compiler flags","Fragments":["would"]},{"Key":"flags would","Fragments":["be"]},{"Key":"be set","Fragments":["in","inside"]},{"Key":"set in","Fragments":["cmake"]},{"Key":"in cmake","Fragments":["(see"]},{"Key":"cmake (see","Fragments":["http://stackoverflow.com/questions/765709/why-compiler-is-not-giving-error-when-signed-value-is-assigned-to-unsigned-integ)"]},{"Key":"cheating to","Fragments":["treat"]},{"Key":"to treat","Fragments":["each","this","functions","```input```"]},{"Key":"treat each","Fragments":["verse"]},{"Key":"a constant,","Fragments":["but"]},{"Key":"constant, but","Fragments":["realistically"]},{"Key":"but realistically","Fragments":["this"]},{"Key":"realistically this","Fragments":["is","choice"]},{"Key":"I mean,","Fragments":["really,","the","constructively","I","I"]},{"Key":"mean, really,","Fragments":["they"]},{"Key":"really, they","Fragments":["are"]},{"Key":"are constants.","Fragments":["Treating"]},{"Key":"constants. Treating","Fragments":["them"]},{"Key":"Treating them","Fragments":["as"]},{"Key":"them as","Fragments":["such","const","const","a","static","such.","```char*```"]},{"Key":"as such","Fragments":["is","(like","and","by"]},{"Key":"such is","Fragments":["not"]},{"Key":"just more","Fragments":["performant","used","comfortable"]},{"Key":"more performant","Fragments":["than","than","iteration"]},{"Key":"performant than","Fragments":["massaging","what"]},{"Key":"than massaging","Fragments":["them"]},{"Key":"massaging them","Fragments":["into"]},{"Key":"them into","Fragments":["their","the","individual","the","const\u0026","function"]},{"Key":"their final","Fragments":["form"]},{"Key":"final form","Fragments":["at"]},{"Key":"form at","Fragments":["runtime,"]},{"Key":"at runtime,","Fragments":["it's"]},{"Key":"runtime, it's","Fragments":["also"]},{"Key":"also a","Fragments":["lot","bit","to_lower.","lot","source","matter","bit","regex","matter"]},{"Key":"clear what's","Fragments":["going","going"]},{"Key":"going on:","Fragments":["KISS."]},{"Key":"for doing","Fragments":["it","that"]},{"Key":"doing it","Fragments":["the","in","which","word"]},{"Key":"the hard","Fragments":["way.","way","way!","way","part"]},{"Key":"The biggest","Fragments":["thing","issue","obstacle","difference","issue","reason"]},{"Key":"biggest thing","Fragments":["that"]},{"Key":"that stands","Fragments":["out"]},{"Key":"stands out","Fragments":["to"]},{"Key":"out to","Fragments":["me","complete","me","be","me"]},{"Key":"me is","Fragments":["that","that","better)."]},{"Key":"the associativity","Fragments":["that"]},{"Key":"associativity that","Fragments":["a"]},{"Key":"map brings","Fragments":["to"]},{"Key":"brings to","Fragments":["the"]},{"Key":"table. Had","Fragments":["you"]},{"Key":"Had you","Fragments":["considered"]},{"Key":"considered std::vector\u003cstd::pair\u003cstd::string,std::string\u003e","Fragments":["\u003e"]},{"Key":"std::vector\u003cstd::pair\u003cstd::string,std::string\u003e \u003e","Fragments":["(or"]},{"Key":"\u003e (or","Fragments":["instead"]},{"Key":"(or instead","Fragments":["of"]},{"Key":"of pair","Fragments":["tuple"]},{"Key":"pair tuple","Fragments":["or"]},{"Key":"tuple or","Fragments":["perhaps"]},{"Key":"perhaps a","Fragments":["custom"]},{"Key":"custom struct)?","Fragments":["Then"]},{"Key":"struct)? Then","Fragments":["they'd"]},{"Key":"Then they'd","Fragments":["already"]},{"Key":"they'd already","Fragments":["be"]},{"Key":"already be","Fragments":["in"]},{"Key":"right order","Fragments":["and"]},{"Key":"order and","Fragments":["you"]},{"Key":"Also, your","Fragments":["constants"]},{"Key":"your constants","Fragments":["should"]},{"Key":"constants should","Fragments":["probably"]},{"Key":"const. Mostly","Fragments":["for"]},{"Key":"Mostly for","Fragments":["expressing"]},{"Key":"for expressing","Fragments":["intent"]},{"Key":"expressing intent","Fragments":["and","to"]},{"Key":"intent and","Fragments":["helping","may"]},{"Key":"and helping","Fragments":["to"]},{"Key":"helping to","Fragments":["catch"]},{"Key":"to catch","Fragments":["mistakes,","more","a","up,","the","questions"]},{"Key":"catch mistakes,","Fragments":["but"]},{"Key":"mistakes, but","Fragments":["also"]},{"Key":"also sometimes","Fragments":["a"]},{"Key":"sometimes a","Fragments":["compiler"]},{"Key":"a compiler","Fragments":["can","vendor","where","error,","creates","you","error"]},{"Key":"makes more","Fragments":["sense","sense","sense.\u003c/li\u003e","sense"]},{"Key":"sense with","Fragments":["a"]},{"Key":"constant if","Fragments":["it's"]},{"Key":"it's declared","Fragments":["as","in;"]},{"Key":"such (like","Fragments":["placing"]},{"Key":"(like placing","Fragments":["it"]},{"Key":"placing it","Fragments":["in"]},{"Key":"a read-only","Fragments":["section"]},{"Key":"read-only section","Fragments":["of"]},{"Key":"section of","Fragments":["the","`matches`"]},{"Key":"Maybe instead","Fragments":["of"]},{"Key":"of complete_song","Fragments":["you"]},{"Key":"complete_song you","Fragments":["could"]},{"Key":"could implement","Fragments":["sing()"]},{"Key":"implement sing()","Fragments":["by"]},{"Key":"sing() by","Fragments":["calling"]},{"Key":"by calling","Fragments":["into","```verses(1,",".begin","foo","```substr()```"]},{"Key":"calling into","Fragments":["verses()?"]},{"Key":"The high-level","Fragments":["approach"]},{"Key":"high-level approach","Fragments":["is"]},{"Key":"good. Actually","Fragments":["probably"]},{"Key":"Actually probably","Fragments":["a"]},{"Key":"appropriate than","Fragments":["mine.","struct","struct"]},{"Key":"than mine.","Fragments":["But","Or","I"]},{"Key":"mine. But","Fragments":["I"]},{"Key":"I gotta","Fragments":["say"]},{"Key":"gotta say","Fragments":["it"]},{"Key":"say it","Fragments":["-","to","was"]},{"Key":"it -","Fragments":["it","not"]},{"Key":"- it","Fragments":["looks","would","allows","will","builds","grows","is"]},{"Key":"like you've","Fragments":["written","done"]},{"Key":"you've written","Fragments":["Java."]},{"Key":"This doesn't","Fragments":["strike"]},{"Key":"doesn't strike","Fragments":["me"]},{"Key":"strike me","Fragments":["as"]},{"Key":"me as","Fragments":["a","odd"]},{"Key":"problem that","Fragments":["justifies","is","we"]},{"Key":"that justifies","Fragments":["dynamic"]},{"Key":"justifies dynamic","Fragments":["memory"]},{"Key":"allocation per-call,","Fragments":["but"]},{"Key":"per-call, but","Fragments":["I"]},{"Key":"get that's","Fragments":["the"]},{"Key":"that's the","Fragments":["most","only","whole","name","case","case...","intent"]},{"Key":"most obvious","Fragments":["and","to"]},{"Key":"obvious and","Fragments":["clear"]},{"Key":"and clear","Fragments":["way","enough.","approach.","code.","variable"]},{"Key":"clear way","Fragments":["to"]},{"Key":"implement a","Fragments":["factory","function","simple"]},{"Key":"a factory","Fragments":["method,"]},{"Key":"factory method,","Fragments":["so..."]},{"Key":"method, so...","Fragments":["OK."]},{"Key":"so... OK.","Fragments":["But"]},{"Key":"OK. But","Fragments":["I","I"]},{"Key":"can't excuse","Fragments":["returning"]},{"Key":"excuse returning","Fragments":["a"]},{"Key":"a raw,","Fragments":["primitive"]},{"Key":"raw, primitive","Fragments":["pointer"]},{"Key":"primitive pointer","Fragments":["to"]},{"Key":"to transfer","Fragments":["ownership.","knowledge"]},{"Key":"transfer ownership.","Fragments":["Raw"]},{"Key":"ownership. Raw","Fragments":["pointers"]},{"Key":"Raw pointers","Fragments":["are"]},{"Key":"pointers are","Fragments":["either","often"]},{"Key":"are either","Fragments":["A)","immutable","mostly"]},{"Key":"either A)","Fragments":["iterators"]},{"Key":"A) iterators","Fragments":["or"]},{"Key":"iterators or","Fragments":["B)","range-based"]},{"Key":"or B)","Fragments":["for"]},{"Key":"B) for","Fragments":["observing"]},{"Key":"for observing","Fragments":["objects"]},{"Key":"observing objects","Fragments":["whose"]},{"Key":"objects whose","Fragments":["lifetime"]},{"Key":"whose lifetime","Fragments":["you"]},{"Key":"lifetime you","Fragments":["don't"]},{"Key":"don't control","Fragments":["and"]},{"Key":"control and","Fragments":["which"]},{"Key":"and which","Fragments":["may","are"]},{"Key":"be present.","Fragments":["I'd"]},{"Key":"present. I'd","Fragments":["try"]},{"Key":"I'd try","Fragments":["to","to"]},{"Key":"have this","Fragments":["factory","extra","problem.","function."]},{"Key":"this factory","Fragments":["method"]},{"Key":"factory method","Fragments":["calling"]},{"Key":"method calling","Fragments":["new"]},{"Key":"calling new","Fragments":["(or"]},{"Key":"new (or","Fragments":["equivalent)"]},{"Key":"(or equivalent)","Fragments":["at"]},{"Key":"equivalent) at","Fragments":["all,"]},{"Key":"all, but","Fragments":["if","if","I"]},{"Key":"to stick","Fragments":["with","to","to","with","to"]},{"Key":"stick with","Fragments":["that","it."]},{"Key":"that then","Fragments":["at","becomes"]},{"Key":"then at","Fragments":["least","the"]},{"Key":"least use","Fragments":["something"]},{"Key":"is CleanUp,","Fragments":["and"]},{"Key":"CleanUp, and","Fragments":["how"]},{"Key":"how is","Fragments":["it","it"]},{"Key":"not called","Fragments":["by"]},{"Key":"called by","Fragments":["a","a","the","`hey`","`words.`","the","your"]},{"Key":"a destructor?","Fragments":["Coincidentally,"]},{"Key":"destructor? Coincidentally,","Fragments":["you"]},{"Key":"Coincidentally, you","Fragments":["don't"]},{"Key":"for nullptr","Fragments":["(oh"]},{"Key":"nullptr (oh","Fragments":["yeah,"]},{"Key":"(oh yeah,","Fragments":["don't"]},{"Key":"yeah, don't","Fragments":["use"]},{"Key":"use NULL)","Fragments":["before"]},{"Key":"NULL) before","Fragments":["calling"]},{"Key":"before calling","Fragments":["delete."]},{"Key":"calling delete.","Fragments":["delete"]},{"Key":"delete. delete","Fragments":["nullptr"]},{"Key":"delete nullptr","Fragments":["does"]},{"Key":"nullptr does","Fragments":["nothing"]},{"Key":"does nothing","Fragments":["at","for"]},{"Key":"nothing at","Fragments":["all,","all,"]},{"Key":"all, it's","Fragments":["perfectly","eluding"]},{"Key":"it's perfectly","Fragments":["safe.","valid.","fine"]},{"Key":"perfectly safe.","Fragments":["This"]},{"Key":"safe. This","Fragments":["is"]},{"Key":"actually an","Fragments":["excellent"]},{"Key":"an excellent","Fragments":["example","opportunity"]},{"Key":"excellent example","Fragments":["of"]},{"Key":"example of","Fragments":["why","how","a","that","a"]},{"Key":"of why","Fragments":["you","it","the"]},{"Key":"you shouldn't","Fragments":["use","check","lose","be","use"]},{"Key":"shouldn't use","Fragments":["raw","the"]},{"Key":"use raw","Fragments":["pointers"]},{"Key":"raw pointers","Fragments":["this"]},{"Key":"pointers this","Fragments":["way"]},{"Key":"way -","Fragments":["if"]},{"Key":"- if","Fragments":["you","it's","it's","some","I"]},{"Key":"a chain","Fragments":["of","of"]},{"Key":"chain of","Fragments":["three","range"]},{"Key":"of three","Fragments":["animals","by"]},{"Key":"three animals","Fragments":["and"]},{"Key":"animals and","Fragments":["call"]},{"Key":"call CleanUp","Fragments":["on"]},{"Key":"CleanUp on","Fragments":["the"]},{"Key":"last one","Fragments":["the","is","can"]},{"Key":"one the","Fragments":["first"]},{"Key":"first one","Fragments":["is","it","should"]},{"Key":"is leaked","Fragments":["memory,"]},{"Key":"leaked memory,","Fragments":["because"]},{"Key":"memory, because","Fragments":["CleanUp"]},{"Key":"because CleanUp","Fragments":["doesn't"]},{"Key":"CleanUp doesn't","Fragments":["recurse"]},{"Key":"doesn't recurse","Fragments":["(which"]},{"Key":"recurse (which","Fragments":["I'm"]},{"Key":"(which I'm","Fragments":["guessing","not"]},{"Key":"I'm guessing","Fragments":["it","a","the","you","it"]},{"Key":"guessing it","Fragments":["probably","ended"]},{"Key":"it probably","Fragments":["should","should","makes","could","makes","has"]},{"Key":"should in","Fragments":["this","general"]},{"Key":"this approach).","Fragments":["If"]},{"Key":"approach). If","Fragments":["instead"]},{"Key":"If instead","Fragments":["animalBefore"]},{"Key":"instead animalBefore","Fragments":["were"]},{"Key":"animalBefore were","Fragments":["a"]},{"Key":"were a","Fragments":["unique_ptr,","performance-critical","production,","long","\"real"]},{"Key":"a unique_ptr,","Fragments":["auto_ptr,"]},{"Key":"unique_ptr, auto_ptr,","Fragments":["shared_ptr,"]},{"Key":"auto_ptr, shared_ptr,","Fragments":["etc."]},{"Key":"shared_ptr, etc.","Fragments":["(I'm"]},{"Key":"etc. (I'm","Fragments":["not"]},{"Key":"(I'm not","Fragments":["100%","sure","sure"]},{"Key":"100% on","Fragments":["what"]},{"Key":"on what","Fragments":["you're","version","I","you","type","i've","you","you","you"]},{"Key":"you're going","Fragments":["for","to","to","to","to","to","to","to","to","to","to","for","to"]},{"Key":"going for","Fragments":["here,","readability.","speed","the","brevity","a","fewest"]},{"Key":"for here,","Fragments":["but"]},{"Key":"but unique_ptr","Fragments":["is"]},{"Key":"unique_ptr is","Fragments":["a"]},{"Key":"good default,","Fragments":["IMO)"]},{"Key":"default, IMO)","Fragments":["in"]},{"Key":"IMO) in","Fragments":["any"]},{"Key":"any of","Fragments":["those","this","the","the","us","them","the","the","how","your","the"]},{"Key":"those cases","Fragments":["you","\"auto\"","anything"]},{"Key":"you wouldn't","Fragments":["write","have","risk","be","have","have","need","want","want","be","need"]},{"Key":"wouldn't write","Fragments":["any"]},{"Key":"write any","Fragments":["of"]},{"Key":"code or","Fragments":["call","depends","that"]},{"Key":"or call","Fragments":["it."]},{"Key":"call it.","Fragments":["When"]},{"Key":"it. When","Fragments":["the"]},{"Key":"When the","Fragments":["object","compiler","test"]},{"Key":"object goes","Fragments":["out"]},{"Key":"goes out","Fragments":["of"]},{"Key":"of scope","Fragments":["it","there."]},{"Key":"scope it","Fragments":["would","out,","does"]},{"Key":"would delete","Fragments":["the"]},{"Key":"delete the","Fragments":["animalBefore"]},{"Key":"the animalBefore","Fragments":["(if"]},{"Key":"animalBefore (if","Fragments":["there"]},{"Key":"(if there","Fragments":["is"]},{"Key":"is one)","Fragments":["which"]},{"Key":"one) which","Fragments":["would"]},{"Key":"would cause","Fragments":["it","things"]},{"Key":"cause it","Fragments":["to"]},{"Key":"to delete","Fragments":["its","that","your","each","line"]},{"Key":"delete its","Fragments":["animalBefore..."]},{"Key":"its animalBefore...","Fragments":["all"]},{"Key":"animalBefore... all","Fragments":["without"]},{"Key":"all without","Fragments":["you"]},{"Key":"without you","Fragments":["even","meaning"]},{"Key":"you even","Fragments":["writing","get"]},{"Key":"even writing","Fragments":["a"]},{"Key":"a destructor","Fragments":["(because"]},{"Key":"destructor (because","Fragments":["your"]},{"Key":"(because your","Fragments":["member"]},{"Key":"your member","Fragments":["variable's","variable"]},{"Key":"member variable's","Fragments":["class"]},{"Key":"variable's class","Fragments":["DID"]},{"Key":"class DID","Fragments":["define"]},{"Key":"DID define","Fragments":["a"]},{"Key":"are from","Fragments":["a","frustration."]},{"Key":"a Java","Fragments":["background","background"]},{"Key":"Java background","Fragments":["you","and"]},{"Key":"background you","Fragments":["may"]},{"Key":"you may","Fragments":["appreciate","consider","want","not","make","not","not","be","end","modify","want","want","want","consider","want","want","want","want"]},{"Key":"may appreciate","Fragments":["that"]},{"Key":"appreciate that","Fragments":["our"]},{"Key":"that our","Fragments":["string"]},{"Key":"our string","Fragments":["class"]},{"Key":"string class","Fragments":["isn't","has","constructor."]},{"Key":"class isn't","Fragments":["like"]},{"Key":"isn't like","Fragments":["String"]},{"Key":"like String","Fragments":["so"]},{"Key":"String so","Fragments":["much"]},{"Key":"as StringBuilder.","Fragments":["Calling"]},{"Key":"StringBuilder. Calling","Fragments":["+="]},{"Key":"Calling +=","Fragments":["or"]},{"Key":"+= or","Fragments":[".append()","append"]},{"Key":"or .append()","Fragments":["and"]},{"Key":".append() and","Fragments":["modifying"]},{"Key":"and modifying","Fragments":["the","it"]},{"Key":"object you","Fragments":["already","throw.","hang"]},{"Key":"have (if","Fragments":["it's"]},{"Key":"(if it's","Fragments":["acceptable"]},{"Key":"it's acceptable","Fragments":["semantics)"]},{"Key":"acceptable semantics)","Fragments":["is"]},{"Key":"semantics) is","Fragments":["frequently"]},{"Key":"is frequently","Fragments":["better-performing."]},{"Key":"I've used","Fragments":["boost::split","the","has","its"]},{"Key":"used boost::split","Fragments":["in"]},{"Key":"my solution,","Fragments":["makes","which"]},{"Key":"solution, makes","Fragments":["the"]},{"Key":"know though","Fragments":["that"]},{"Key":"is valid","Fragments":["to","in","C++11"]},{"Key":"valid to","Fragments":["increment"]},{"Key":"the collection,","Fragments":["when"]},{"Key":"collection, when","Fragments":["the"]},{"Key":"yet in","Fragments":["the"]},{"Key":"the collection.","Fragments":["Used"]},{"Key":"collection. Used","Fragments":["that"]},{"Key":"Used that","Fragments":["bit"]},{"Key":"that bit","Fragments":["of","cleaner."]},{"Key":"of information","Fragments":["to","on","and"]},{"Key":"information to","Fragments":["improve","know"]},{"Key":"improve my","Fragments":["solution.","skills"]},{"Key":"my solution.","Fragments":[":-)"]},{"Key":"think apostrophe","Fragments":["handling"]},{"Key":"apostrophe handling","Fragments":["is"]},{"Key":"handling is","Fragments":["still"]},{"Key":"still a","Fragments":["bit","bit","question,","reasonable","lot","lot","function","bit"]},{"Key":"bit messy,","Fragments":["it","but"]},{"Key":"messy, it","Fragments":["comes"]},{"Key":"it comes","Fragments":["up","to","to","at"]},{"Key":"comes up","Fragments":["in","when"]},{"Key":"few places,","Fragments":["and"]},{"Key":"places, and","Fragments":["imho"]},{"Key":"and imho","Fragments":["it"]},{"Key":"imho it","Fragments":["is"]},{"Key":"yet clear","Fragments":["in"]},{"Key":"clear in","Fragments":["the"]},{"Key":"code what","Fragments":["kind"]},{"Key":"what kind","Fragments":["of","of"]},{"Key":"of apostrophe","Fragments":["I"]},{"Key":"apostrophe I","Fragments":["am"]},{"Key":"am handling.","Fragments":["thinking"]},{"Key":"handling. thinking","Fragments":["about"]},{"Key":"about changing","Fragments":["line"]},{"Key":"changing line","Fragments":["20"]},{"Key":"line 20","Fragments":["to","instead"]},{"Key":"My answer","Fragments":["focuses"]},{"Key":"answer focuses","Fragments":["on"]},{"Key":"focuses on","Fragments":["the"]},{"Key":"the basic","Fragments":["two","if-else","information"]},{"Key":"basic two","Fragments":["elements"]},{"Key":"two elements","Fragments":["that"]},{"Key":"elements that","Fragments":["determine"]},{"Key":"that determine","Fragments":["the","if"]},{"Key":"determine the","Fragments":["answer:","correct","reply","upper-bound","appropriate"]},{"Key":"the answer:","Fragments":["the"]},{"Key":"answer: the","Fragments":["final"]},{"Key":"final mark","Fragments":["(whether"]},{"Key":"mark (whether","Fragments":["it's"]},{"Key":"(whether it's","Fragments":["a"]},{"Key":"question mark","Fragments":["or","be","as","at","is","(which","or","elegantly","(if"]},{"Key":"mark or","Fragments":["not)","the"]},{"Key":"or not)","Fragments":["and"]},{"Key":"not) and","Fragments":["whether"]},{"Key":"and whether","Fragments":["the","you"]},{"Key":"whether the","Fragments":["alpha","length","code","statement","input","string","string","string","STL","string","message","message","message","length"]},{"Key":"the alpha","Fragments":["characters"]},{"Key":"are upper/lowercase.","Fragments":["I"]},{"Key":"upper/lowercase. I","Fragments":["used"]},{"Key":"lambda to","Fragments":["extract","call"]},{"Key":"to extract","Fragments":["the","the","them"]},{"Key":"extract the","Fragments":["alphanumerical","words,"]},{"Key":"the alphanumerical","Fragments":["characters"]},{"Key":"alphanumerical characters","Fragments":["just"]},{"Key":"characters just","Fragments":["for"]},{"Key":"just for","Fragments":["fun,","convenience?","you","using","fun","documentation","`min()`","that.","the","debugging","faster","faster"]},{"Key":"for fun,","Fragments":["as"]},{"Key":"fun, as","Fragments":["I"]},{"Key":"done everything","Fragments":["without"]},{"Key":"everything without","Fragments":["using"]},{"Key":"without using","Fragments":["it.","regex","a","anything","statics.","regex,","\"ctype.h\","]},{"Key":"I'm including","Fragments":["a"]},{"Key":"including a","Fragments":["bunch","better","C"]},{"Key":"of extra","Fragments":["files","header"]},{"Key":"extra files","Fragments":["because"]},{"Key":"files because","Fragments":["I","they"]},{"Key":"use one","Fragments":["of","memory","that","of"]},{"Key":"the testing","Fragments":["facilities","to","procedures"]},{"Key":"testing facilities","Fragments":["I"]},{"Key":"facilities I","Fragments":["had"]},{"Key":"had lying","Fragments":["around","around,"]},{"Key":"lying around","Fragments":["for"]},{"Key":"around for","Fragments":["Boost.Test.","and","using","a"]},{"Key":"for Boost.Test.","Fragments":["Specifically,"]},{"Key":"Boost.Test. Specifically,","Fragments":["if"]},{"Key":"Specifically, if","Fragments":["two"]},{"Key":"not identical","Fragments":["it"]},{"Key":"identical it","Fragments":["can"]},{"Key":"be hard","Fragments":["to","to","to"]},{"Key":"see why","Fragments":["especially","it's","it","it","you","I","I"]},{"Key":"why especially","Fragments":["if"]},{"Key":"if they're","Fragments":["long.","the","concerned","included"]},{"Key":"they're long.","Fragments":["texteq"]},{"Key":"long. texteq","Fragments":["tests"]},{"Key":"texteq tests","Fragments":["for"]},{"Key":"tests for","Fragments":["string","illegal","the","this","a"]},{"Key":"string equality","Fragments":["but","test--with","checks."]},{"Key":"equality but","Fragments":["it"]},{"Key":"uses ANSI","Fragments":["escape"]},{"Key":"ANSI escape","Fragments":["sequence"]},{"Key":"escape sequence","Fragments":["to"]},{"Key":"sequence to","Fragments":["color"]},{"Key":"to color","Fragments":["the"]},{"Key":"color the","Fragments":["strings"]},{"Key":"strings to","Fragments":["help","descriptive","```unsigned```","const","the"]},{"Key":"help you","Fragments":["identify","at","if","to"]},{"Key":"you identify","Fragments":["where","questions"]},{"Key":"identify where","Fragments":["they"]},{"Key":"they differ","Fragments":["(most"]},{"Key":"differ (most","Fragments":["useful"]},{"Key":"(most useful","Fragments":["on"]},{"Key":"useful on","Fragments":["the"]},{"Key":"the command","Fragments":["line).","you","on","line..."]},{"Key":"command line).","Fragments":["It"]},{"Key":"line). It","Fragments":["also"]},{"Key":"also escapes","Fragments":["non-readable"]},{"Key":"escapes non-readable","Fragments":["characters"]},{"Key":"non-readable characters","Fragments":["(other"]},{"Key":"characters (other","Fragments":["than"]},{"Key":"(other than","Fragments":["space)"]},{"Key":"than space)","Fragments":["to"]},{"Key":"space) to","Fragments":["make"]},{"Key":"make them","Fragments":["more","not","more","easy.","non-static","less"]},{"Key":"them more","Fragments":["visible.","visible)"]},{"Key":"To better","Fragments":["enable"]},{"Key":"better enable","Fragments":["it"]},{"Key":"enable it","Fragments":["I"]},{"Key":"the CMakeLists.txt","Fragments":["to","start"]},{"Key":"CMakeLists.txt to","Fragments":["glob"]},{"Key":"to glob","Fragments":["and"]},{"Key":"glob and","Fragments":["include"]},{"Key":"and include","Fragments":["*.cpp"]},{"Key":"include *.cpp","Fragments":["rather"]},{"Key":"*.cpp rather","Fragments":["than"]},{"Key":"just beer_song.cpp.","Fragments":["Honestly"]},{"Key":"beer_song.cpp. Honestly","Fragments":["it"]},{"Key":"Honestly it","Fragments":["should've"]},{"Key":"it should've","Fragments":["always"]},{"Key":"should've always","Fragments":["been"]},{"Key":"always been","Fragments":["like","harder"]},{"Key":"been like","Fragments":["that"]},{"Key":"that -","Fragments":["I","especially","for","floating"]},{"Key":"I loathe","Fragments":["build"]},{"Key":"loathe build","Fragments":["systems"]},{"Key":"build systems","Fragments":["that"]},{"Key":"systems that","Fragments":["rely"]},{"Key":"that rely","Fragments":["on"]},{"Key":"a whitelist","Fragments":["of"]},{"Key":"whitelist of","Fragments":["explicitly-mentioned"]},{"Key":"of explicitly-mentioned","Fragments":["source"]},{"Key":"explicitly-mentioned source","Fragments":["files."]},{"Key":"source files.","Fragments":["We"]},{"Key":"files. We","Fragments":["should"]},{"Key":"We should","Fragments":["always"]},{"Key":"should always","Fragments":["strive","use"]},{"Key":"always strive","Fragments":["to"]},{"Key":"strive to","Fragments":["lower"]},{"Key":"the boundary","Fragments":["to"]},{"Key":"boundary to","Fragments":["doing"]},{"Key":"to doing","Fragments":["the","primitive","a"]},{"Key":"right thing","Fragments":["-"]},{"Key":"thing -","Fragments":["and","is","you"]},{"Key":"should prefer","Fragments":["many","the","calling"]},{"Key":"prefer many","Fragments":["small"]},{"Key":"many small","Fragments":["source"]},{"Key":"small source","Fragments":["files"]},{"Key":"source files","Fragments":["to","that","include","that","include","in","that"]},{"Key":"files to","Fragments":["a","exercism","avoid"]},{"Key":"few big","Fragments":["ones."]},{"Key":" operator[]","Fragments":["will"]},{"Key":"operator[] will","Fragments":["add"]},{"Key":"add the","Fragments":["key","key","current","leading","exception","BOOST_TEST..."]},{"Key":"key to","Fragments":["the","the"]},{"Key":"map if","Fragments":["it's","it"]},{"Key":"already there","Fragments":["-"]},{"Key":"there -","Fragments":["it's","there's","[]","and","at"]},{"Key":"- it's","Fragments":["map-specific","just","not","effectively","a","just"]},{"Key":"it's map-specific","Fragments":["behavior."]},{"Key":"map-specific behavior.","Fragments":["If"]},{"Key":"behavior. If","Fragments":["you"]},{"Key":"to you","Fragments":["call","as","too","and","to"]},{"Key":"call at()","Fragments":["which"]},{"Key":"at() which","Fragments":["is"]},{"Key":"same basic","Fragments":["thing"]},{"Key":"basic thing","Fragments":["but"]},{"Key":"thing but","Fragments":["throws"]},{"Key":"but throws","Fragments":["an"]},{"Key":"exception if","Fragments":["the","the","passed","the"]},{"Key":"key isn't","Fragments":["present."]},{"Key":" Yeah,","Fragments":["split","I","OK,","now","I'm","you're","this","that's","that","it","I","this","you're","it's","this","you're","I"]},{"Key":"Yeah, split","Fragments":["is"]},{"Key":"split is","Fragments":["a"]},{"Key":"a reasonable","Fragments":["approach.","or","default","user","balance"]},{"Key":"reasonable approach.","Fragments":["I"]},{"Key":"approach. I","Fragments":["don't"]},{"Key":"like creating","Fragments":["a"]},{"Key":"a brand","Fragments":["new","new"]},{"Key":"brand new","Fragments":["vector,","to","temporary"]},{"Key":"new vector,","Fragments":["which"]},{"Key":"vector, which","Fragments":["will","is"]},{"Key":"will do","Fragments":["a","a","the","it.","too.","all","is"]},{"Key":"allocation, when","Fragments":["there"]},{"Key":"there just","Fragments":["doesn't","using"]},{"Key":"just doesn't","Fragments":["seem","feel"]},{"Key":"be any","Fragments":["need","of","more","point","more","difference","more","significant"]},{"Key":"any need","Fragments":["for","for"]},{"Key":"for it.","Fragments":["Something","I","Similarly,"]},{"Key":"it. Something","Fragments":["like"]},{"Key":"Something like","Fragments":["split_iterator","that.","\"4!\".","\"exponent\""]},{"Key":"like split_iterator","Fragments":["would"]},{"Key":"split_iterator would","Fragments":["probably"]},{"Key":"more up","Fragments":["my"]},{"Key":"up my","Fragments":["alley,","system","linux-machine","conversion"]},{"Key":"my alley,","Fragments":["but"]},{"Key":"alley, but","Fragments":["it's"]},{"Key":"as obvious","Fragments":["as"]},{"Key":"obvious as","Fragments":["I'd"]},{"Key":"as I'd","Fragments":["like.","like,"]},{"Key":"I'd like.","Fragments":["Maybe"]},{"Key":"like. Maybe","Fragments":["I"]},{"Key":"Maybe I","Fragments":["should","could","come"]},{"Key":"little less","Fragments":["lazy.","verbose","mystifying."]},{"Key":"this code.","Fragments":["You","Pulling","But","Would","Also,","Do"]},{"Key":"code. You","Fragments":["could","implement","don't"]},{"Key":"could avoid","Fragments":["the","the","this?"]},{"Key":"the nested","Fragments":["conditions","lambda","loops."]},{"Key":"nested conditions","Fragments":["at"]},{"Key":"conditions at","Fragments":["the","once."]},{"Key":"end by","Fragments":["using"]},{"Key":"using \"else","Fragments":["if\""]},{"Key":"\"else if\"","Fragments":["or","with","since","-","for","just"]},{"Key":"if\" or","Fragments":["by"]},{"Key":"or by","Fragments":["using","reference"]},{"Key":"and boost","Fragments":["seems","with","1.56.0."]},{"Key":"boost seems","Fragments":["dangerous"]},{"Key":"seems dangerous","Fragments":["to"]},{"Key":"dangerous to","Fragments":["me"]},{"Key":"me since","Fragments":["they"]},{"Key":"since they","Fragments":["have","aren't","didn't","are","are"]},{"Key":"have so","Fragments":["many","many"]},{"Key":"so many","Fragments":["naming","copy-concatenations.","symbols","variables","points,","tools","special","ways","times.","deeply"]},{"Key":"many naming","Fragments":["conflicts"]},{"Key":"naming conflicts","Fragments":["(tuple,"]},{"Key":"conflicts (tuple,","Fragments":["function,"]},{"Key":"(tuple, function,","Fragments":["bind,"]},{"Key":"function, bind,","Fragments":["thread,"]},{"Key":"bind, thread,","Fragments":["shared_ptr,"]},{"Key":"thread, shared_ptr,","Fragments":["regex"]},{"Key":"shared_ptr, regex","Fragments":["off"]},{"Key":"regex off","Fragments":["the"]},{"Key":"off the","Fragments":["top","[return","ground.","bool","exercise","bat,","list"]},{"Key":"my head),","Fragments":["but"]},{"Key":"head), but","Fragments":["my"]},{"Key":"but my","Fragments":["main","knowledge","guess","thought"]},{"Key":"my main","Fragments":["complaint"]},{"Key":"main complaint","Fragments":["about"]},{"Key":"complaint about","Fragments":["that"]},{"Key":"file -","Fragments":["and"]},{"Key":"and header","Fragments":["files","will"]},{"Key":"header files","Fragments":["were","should","or","in","because","(even","shared","(mostly"]},{"Key":"files were","Fragments":["meant"]},{"Key":"were meant","Fragments":["to"]},{"Key":"included into","Fragments":["other"]},{"Key":"into other","Fragments":["people's","solutions.","files"]},{"Key":"other people's","Fragments":["source,","submissions","code.","implementations","solutions.","opinions.","solutions"]},{"Key":"people's source,","Fragments":["so"]},{"Key":"source, so","Fragments":["you're"]},{"Key":"so you're","Fragments":["negating","forcing","right,"]},{"Key":"you're negating","Fragments":["the"]},{"Key":"negating the","Fragments":["value","results)"]},{"Key":"the namespaces","Fragments":["for","of"]},{"Key":"namespaces for","Fragments":["others."]},{"Key":" I'd","Fragments":["recommend","also","also","say","like","like","never","put","rather","recommend","like","prefer","like","also","say","be"]},{"Key":"recommend at","Fragments":["least"]},{"Key":"least moving","Fragments":["the"]},{"Key":"moving the","Fragments":["using","implementation","validation","conditionals","remove_if","`sum`","line","conditions","i","string","isQuestion","word","actions","declaration"]},{"Key":"the using","Fragments":["statements","code","and","declaration","declarations","statements","statement"]},{"Key":"statements inside","Fragments":["of"]},{"Key":"the struct","Fragments":["to","negates","to"]},{"Key":"to limit","Fragments":["their","the","my"]},{"Key":"limit their","Fragments":["scope."]},{"Key":"the lyrics","Fragments":["array"]},{"Key":"lyrics array","Fragments":["buys"]},{"Key":"array buys","Fragments":["you"]},{"Key":"buys you","Fragments":["enough."]},{"Key":"you enough.","Fragments":["If"]},{"Key":"enough. If","Fragments":["you"]},{"Key":"string literals","Fragments":["in","and","into"]},{"Key":"literals in","Fragments":["the"]},{"Key":"code you","Fragments":["wouldn't","write","have","already"]},{"Key":"to remember","Fragments":["which","myself","many","to"]},{"Key":"remember which","Fragments":["is"]},{"Key":"Also line=\"\"","Fragments":["is,"]},{"Key":"line=\"\" is,","Fragments":["in"]},{"Key":"is, in","Fragments":["my","my","my"]},{"Key":"opinion, not","Fragments":["as"]},{"Key":"as straightforward","Fragments":["as","as"]},{"Key":"straightforward as","Fragments":["line.clear()","possible."]},{"Key":"as line.clear()","Fragments":["(and"]},{"Key":"line.clear() (and","Fragments":["in"]},{"Key":"(and in","Fragments":["an"]},{"Key":"an unoptimized","Fragments":["build"]},{"Key":"unoptimized build","Fragments":["might"]},{"Key":"build might","Fragments":["actually"]},{"Key":"might actually","Fragments":["be","be"]},{"Key":"actually be","Fragments":["not","faster","slower","useful","faster","slower,"]},{"Key":"solution takes","Fragments":["O(N^2)"]},{"Key":"takes O(N^2)","Fragments":["time."]},{"Key":"O(N^2) time.","Fragments":["It"]},{"Key":"time. It","Fragments":["can"]},{"Key":"in O(N)","Fragments":["time.","time"]},{"Key":" *age_seconds*","Fragments":["can"]},{"Key":"*age_seconds* can","Fragments":["be"]},{"Key":"the conversion","Fragments":["factors","from"]},{"Key":"conversion factors","Fragments":["can"]},{"Key":"factors can","Fragments":["be","never"]},{"Key":"be *static*","Fragments":["(this"]},{"Key":"*static* (this","Fragments":["reduces"]},{"Key":"(this reduces","Fragments":["object"]},{"Key":"reduces object","Fragments":["size"]},{"Key":"object size","Fragments":["and"]},{"Key":"size and","Fragments":["helps","error","simplified","just"]},{"Key":"and helps","Fragments":["cache"]},{"Key":"helps cache","Fragments":["friendliness."]},{"Key":" @dylan:","Fragments":["Agreed."]},{"Key":"@dylan: Agreed.","Fragments":["It"]},{"Key":"Agreed. It","Fragments":["does"]},{"Key":"It does","Fragments":["clutter","not,","look","change","make","look","the","the"]},{"Key":"does clutter","Fragments":["things"]},{"Key":"clutter things","Fragments":["a"]},{"Key":"things a","Fragments":["bit.","bit.","lot","bit","bit."]},{"Key":"a bit.","Fragments":["I","For","Finally,","I"]},{"Key":"to separate","Fragments":["the","```hey```","out","implementation","functions","functions.","the","control","the"]},{"Key":"separate the","Fragments":["main","lower","header","final","bool"]},{"Key":"main logic","Fragments":["from"]},{"Key":"logic from","Fragments":["the"]},{"Key":"the details,","Fragments":["but"]},{"Key":"details, but","Fragments":["it"]},{"Key":"it went","Fragments":["too"]},{"Key":"went too","Fragments":["far."]},{"Key":" starting","Fragments":["at"]},{"Key":"starting at","Fragments":["int"]},{"Key":"at int","Fragments":["i=0,","i=1"]},{"Key":"int i=0,","Fragments":["means"]},{"Key":"i=0, means","Fragments":["a"]},{"Key":"means a","Fragments":["pass","leading","question.\"","lot"]},{"Key":"a pass","Fragments":["through"]},{"Key":"pass through","Fragments":["the","it","the"]},{"Key":"that just","Fragments":["adds","taking","fine.","reference","returns","using","wraps"]},{"Key":"just adds","Fragments":["0,","noise."]},{"Key":"could start","Fragments":["at","typing"]},{"Key":"of arguments.","Fragments":["Should"]},{"Key":"arguments. Should","Fragments":["be"]},{"Key":"am aware","Fragments":["of","off,","you"]},{"Key":"that issue","Fragments":["with"]},{"Key":"issue with","Fragments":["using","other","global","this","a"]},{"Key":"using namespace,","Fragments":["but"]},{"Key":"namespace, but","Fragments":["I","is","very","any"]},{"Key":"it kind","Fragments":["of","of"]},{"Key":"of messy","Fragments":["to"]},{"Key":"messy to","Fragments":["have"]},{"Key":"the prefix","Fragments":["of","version"]},{"Key":"prefix of","Fragments":["the"]},{"Key":"the lib","Fragments":["everywhere"]},{"Key":"lib everywhere","Fragments":["in"]},{"Key":"everywhere in","Fragments":["the","my"]},{"Key":"code, especially","Fragments":["as"]},{"Key":"especially as","Fragments":["exercism"]},{"Key":"as exercism","Fragments":["is"]},{"Key":"exercism is","Fragments":["about","to"]},{"Key":"about creating","Fragments":["clean","the"]},{"Key":"creating clean","Fragments":["readable"]},{"Key":"clean readable","Fragments":["code"]},{"Key":"readable code","Fragments":["as"]},{"Key":"as far","Fragments":["as've","as","as","as","as","as","as"]},{"Key":"far as've","Fragments":["understood"]},{"Key":"as've understood","Fragments":["the"]},{"Key":"understood the","Fragments":["idea.","build"]},{"Key":"guess I'll","Fragments":["be"]},{"Key":"I'll be","Fragments":["moving"]},{"Key":"be moving","Fragments":["the"]},{"Key":"file, and","Fragments":["keep","the"]},{"Key":"namespace\" out","Fragments":["of"]},{"Key":"hand, for","Fragments":["these","just"]},{"Key":"these kind","Fragments":["of"]},{"Key":"of examples","Fragments":["it","of"]},{"Key":"examples it","Fragments":["is"]},{"Key":"of duplicate","Fragments":["effort"]},{"Key":"duplicate effort","Fragments":["to"]},{"Key":"effort to","Fragments":["maintain"]},{"Key":"maintain both","Fragments":["header"]},{"Key":"both header","Fragments":["and"]},{"Key":"header and","Fragments":["implementation","then","add","move","implementation","body."]},{"Key":"and implementation","Fragments":["file,","details.","for"]},{"Key":"see it","Fragments":["more","there…","optimized","spelled","clearly."]},{"Key":"more of","Fragments":["an","this","a","the","this","a"]},{"Key":"exercise to","Fragments":["write","show","see"]},{"Key":"write clean","Fragments":["code,"]},{"Key":"clean code,","Fragments":["and"]},{"Key":"code, and","Fragments":["for","it","this","your","I","you're"]},{"Key":"and for","Fragments":["that","some","me","each","each","problems","each","each","this"]},{"Key":"for that","Fragments":["I","as","method.",":).","iteration","should","matter.","test","reason.","case"]},{"Key":"fine to","Fragments":["assume","fail","me,","call"]},{"Key":"to assume","Fragments":["that","all","you","I","dna","`string()`","they","that"]},{"Key":"this header","Fragments":["is","and","file,","file,","file.","in"]},{"Key":"actually what","Fragments":["would"]},{"Key":"what would","Fragments":["be","be","isalpha","effectively"]},{"Key":"sure there's","Fragments":["an","a"]},{"Key":"an easier","Fragments":["way","way"]},{"Key":"easier way","Fragments":["to","to"]},{"Key":"the \"check","Fragments":["for","for"]},{"Key":"\"check for","Fragments":["shouting","anagram\""]},{"Key":"for shouting","Fragments":["case\"."]},{"Key":"first code","Fragments":["had","uses"]},{"Key":"code had","Fragments":["some"]},{"Key":"had some","Fragments":["small","decent","errors.","trouble","errors"]},{"Key":"some small","Fragments":["silly"]},{"Key":"small silly","Fragments":["issues."]},{"Key":"silly issues.","Fragments":["I"]},{"Key":"issues. I","Fragments":["added","did"]},{"Key":"added some","Fragments":["debug","comments"]},{"Key":"some debug","Fragments":["prints","code"]},{"Key":"debug prints","Fragments":["to"]},{"Key":"prints to","Fragments":["this"]},{"Key":"did add","Fragments":["#include"]},{"Key":"add #include","Fragments":["\u003cmap\u003e"]},{"Key":"#include \u003cmap\u003e","Fragments":["to"]},{"Key":"\u003cmap\u003e to","Fragments":["the"]},{"Key":"test, because","Fragments":["it"]},{"Key":"it relies","Fragments":["on","on","on"]},{"Key":"relies on","Fragments":["it","someone","it","the","undefined","bitwise"]},{"Key":"on it","Fragments":["and","not","then","(not","being","though,"]},{"Key":"to encourage","Fragments":["users","you"]},{"Key":"encourage users","Fragments":["of"]},{"Key":"my class","Fragments":["to","assignments.","definition?"]},{"Key":"to overuse","Fragments":["that"]},{"Key":"overuse that","Fragments":["already-overused"]},{"Key":"that already-overused","Fragments":["niche"]},{"Key":"already-overused niche","Fragments":["container."]},{"Key":"I may","Fragments":["rant...","switch","be","have","be","have"]},{"Key":" std::map","Fragments":["is"]},{"Key":"std::map is","Fragments":["a"]},{"Key":"very niche","Fragments":["container."]},{"Key":"niche container.","Fragments":["It's"]},{"Key":"container. It's","Fragments":["appropriate"]},{"Key":"It's appropriate","Fragments":["when"]},{"Key":"appropriate when","Fragments":["you"]},{"Key":"have many","Fragments":["keys,"]},{"Key":"many keys,","Fragments":["you"]},{"Key":"keys, you","Fragments":["are"]},{"Key":"to intersperse","Fragments":["lookups"]},{"Key":"intersperse lookups","Fragments":["with"]},{"Key":"lookups with","Fragments":["insertions"]},{"Key":"with insertions","Fragments":["and"]},{"Key":"insertions and","Fragments":["deletions,"]},{"Key":"and deletions,","Fragments":["and"]},{"Key":"deletions, and","Fragments":["either"]},{"Key":"and either","Fragments":["your"]},{"Key":"either your","Fragments":["key","massive"]},{"Key":"your key","Fragments":["or"]},{"Key":"key or","Fragments":["value"]},{"Key":"or value","Fragments":["is"]},{"Key":"a large","Fragments":["type.","logical","performance","performance","amount","performance","amount","amount"]},{"Key":"large type.","Fragments":["If"]},{"Key":"type. If","Fragments":["either"]},{"Key":"If either","Fragments":["of"]},{"Key":"either of","Fragments":["the","those,","those","these"]},{"Key":"two requirements","Fragments":["doesn't","for"]},{"Key":"requirements doesn't","Fragments":["hold"]},{"Key":"doesn't hold","Fragments":["you"]},{"Key":"hold you","Fragments":["should"]},{"Key":"a sorted","Fragments":["vector,","string","and"]},{"Key":"sorted vector,","Fragments":["and"]},{"Key":"vector, and","Fragments":["if","the"]},{"Key":"the \u003calgorithm\u003e","Fragments":["calls","library."]},{"Key":"\u003calgorithm\u003e calls","Fragments":["yourself,"]},{"Key":"calls yourself,","Fragments":["I"]},{"Key":"yourself, I","Fragments":["get"]},{"Key":"I get","Fragments":["that,","some","home","the","that","a","a","the","a","squeeze","home","rid","a","back."]},{"Key":"get that,","Fragments":["Google","I've"]},{"Key":"that, Google","Fragments":["for"]},{"Key":"Google for","Fragments":["sorted"]},{"Key":"for sorted","Fragments":["vector"]},{"Key":"sorted vector","Fragments":["class"]},{"Key":"vector class","Fragments":["or"]},{"Key":"or take","Fragments":["the"]},{"Key":"the half","Fragments":["hour"]},{"Key":"half hour","Fragments":["to"]},{"Key":"hour to","Fragments":["write"]},{"Key":"write and","Fragments":["test","less","possibly","run"]},{"Key":"test your","Fragments":["own."]},{"Key":"This particular","Fragments":["case"]},{"Key":"particular case","Fragments":["is"]},{"Key":"a terrible,","Fragments":["terrible"]},{"Key":"terrible, terrible","Fragments":["use"]},{"Key":"terrible use","Fragments":["of"]},{"Key":"of map.","Fragments":["It"]},{"Key":"map. It","Fragments":["will"]},{"Key":"always have","Fragments":["exactly","to","more","issues","size"]},{"Key":"have exactly","Fragments":["four","one"]},{"Key":"exactly four","Fragments":["keys","integers?"]},{"Key":"four keys","Fragments":["-","-"]},{"Key":"keys -","Fragments":["the","so"]},{"Key":"the exact","Fragments":["same","same","type","amount","sentence,","same","opposite","same"]},{"Key":"exact same","Fragments":["four","memory","performance","thing,"]},{"Key":"same four","Fragments":["keys"]},{"Key":"don't even","Fragments":["need","have"]},{"Key":"even need","Fragments":["to","to","is_upper"]},{"Key":"runtime structure.","Fragments":["It's"]},{"Key":"structure. It's","Fragments":["always"]},{"Key":"It's always","Fragments":["small,","a"]},{"Key":"always small,","Fragments":["and"]},{"Key":"small, and","Fragments":["it's"]},{"Key":"it's storing","Fragments":["small"]},{"Key":"storing small","Fragments":["things."]},{"Key":"small things.","Fragments":["It's"]},{"Key":"things. It's","Fragments":["set"]},{"Key":"It's set","Fragments":["up"]},{"Key":"up all","Fragments":["at","`square()`s","the"]},{"Key":"all at","Fragments":["once","once."]},{"Key":"once and","Fragments":["read","get","then","do","checking","are"]},{"Key":"and read","Fragments":["from"]},{"Key":"from later.","Fragments":["We're"]},{"Key":"later. We're","Fragments":["really"]},{"Key":"We're really","Fragments":["just"]},{"Key":"really just","Fragments":["asking","reaching","need"]},{"Key":"just asking","Fragments":["for","if"]},{"Key":"asking for","Fragments":["a","its"]},{"Key":"a histogram","Fragments":["of"]},{"Key":"histogram of","Fragments":["size"]},{"Key":"size 4,","Fragments":["so"]},{"Key":"4, so","Fragments":["why"]},{"Key":"why on","Fragments":["Earth"]},{"Key":"on Earth","Fragments":["would"]},{"Key":"Earth would","Fragments":["we"]},{"Key":"would we","Fragments":["do"]},{"Key":"we do","Fragments":["multiple","a","that,","that,","this,","arrive"]},{"Key":"do multiple","Fragments":["dynamic"]},{"Key":"multiple dynamic","Fragments":["memory"]},{"Key":" Moving","Fragments":["them","the","some","on"]},{"Key":"Moving them","Fragments":["into"]},{"Key":"struct negates","Fragments":["the"]},{"Key":"negates the","Fragments":["problems"]},{"Key":"the problems","Fragments":["for"]},{"Key":"problems for","Fragments":["others"]},{"Key":"for others","Fragments":["and"]},{"Key":"others and","Fragments":["would"]},{"Key":"effect for","Fragments":["code"]},{"Key":"for code","Fragments":["you","readability"]},{"Key":"write inside","Fragments":["the"]},{"Key":"the struct's","Fragments":["scope."]},{"Key":"struct's scope.","Fragments":["It"]},{"Key":"scope. It","Fragments":["would"]},{"Key":"cause things","Fragments":["like"]},{"Key":"like word_count::find_if","Fragments":["(which"]},{"Key":"word_count::find_if (which","Fragments":["is"]},{"Key":"really std::find_if)","Fragments":["to"]},{"Key":"std::find_if) to","Fragments":["exist,"]},{"Key":"to exist,","Fragments":["but"]},{"Key":"exist, but","Fragments":["the"]},{"Key":"using code","Fragments":["really"]},{"Key":"code really","Fragments":["shouldn't"]},{"Key":"really shouldn't","Fragments":["care."]},{"Key":"Moving the","Fragments":["map"]},{"Key":"map building","Fragments":["to"]},{"Key":"building to","Fragments":["the"]},{"Key":"and saving","Fragments":["the"]},{"Key":"variable instead","Fragments":["of","of"]},{"Key":"string would","Fragments":["make","be","crash"]},{"Key":"make count","Fragments":["much"]},{"Key":"count much","Fragments":["faster"]},{"Key":"much faster","Fragments":["as","to","(pointer","than"]},{"Key":"faster as","Fragments":["well","well!).","well."]},{"Key":"as repeated","Fragments":["calls"]},{"Key":"repeated calls","Fragments":["to","to"]},{"Key":"to nucleotide_counts","Fragments":["(since"]},{"Key":"nucleotide_counts (since","Fragments":["you"]},{"Key":"(since you","Fragments":["could","don't"]},{"Key":"with 01freeman","Fragments":["-"]},{"Key":"01freeman -","Fragments":["constructing"]},{"Key":"- constructing","Fragments":["the"]},{"Key":"constructing the","Fragments":["map"]},{"Key":"constructor seems","Fragments":["like"]},{"Key":"most appropriate","Fragments":["place"]},{"Key":"appropriate place","Fragments":["to"]},{"Key":"it. It's","Fragments":["what","just"]},{"Key":"It's what","Fragments":["the"]},{"Key":"a const\u0026","Fragments":["from","on"]},{"Key":"const\u0026 from","Fragments":["nucleotide_counts"]},{"Key":"from nucleotide_counts","Fragments":["instead","is"]},{"Key":"nucleotide_counts instead","Fragments":["of"]},{"Key":"a deep","Fragments":["copy.","copy","copy"]},{"Key":"Also, please","Fragments":["move"]},{"Key":"please move","Fragments":["using"]},{"Key":"move using","Fragments":["namespace"]},{"Key":"namespace std;","Fragments":["either","is","return","in","was"]},{"Key":"std; either","Fragments":["into"]},{"Key":"either into","Fragments":["a"]},{"Key":"file, the","Fragments":["class,","extern",".cpp","extern"]},{"Key":"the class,","Fragments":["or"]},{"Key":"class, or","Fragments":["at","adding","if"]},{"Key":"a bare","Fragments":["minimum"]},{"Key":"bare minimum","Fragments":["the","in"]},{"Key":"minimum the","Fragments":["namespace."]},{"Key":"the namespace.","Fragments":["It's","Fortunately,"]},{"Key":"namespace. It's","Fragments":["dangerous","in"]},{"Key":"It's dangerous","Fragments":["and"]},{"Key":"dangerous and","Fragments":["bad","not"]},{"Key":"and bad","Fragments":["practice,"]},{"Key":"practice, but","Fragments":["if"]},{"Key":"take that","Fragments":["risk","a"]},{"Key":"that risk","Fragments":["with"]},{"Key":"risk with","Fragments":["your"]},{"Key":"own code","Fragments":["it's","for"]},{"Key":"code it's","Fragments":["not"]},{"Key":"not too","Fragments":["bad...","keen","burdensome.","familiar","modular","concerned","complex.","concerned"]},{"Key":"too bad...","Fragments":["until"]},{"Key":"bad... until","Fragments":["you"]},{"Key":"until you","Fragments":["put","asked,","were","have"]},{"Key":"header so","Fragments":["you're","give"]},{"Key":"you're forcing","Fragments":["that"]},{"Key":"forcing that","Fragments":["on"]},{"Key":"that on","Fragments":["anyone","people","some","my"]},{"Key":"on anyone","Fragments":["who"]},{"Key":"anyone who","Fragments":["#includes","includes","includes","didn't"]},{"Key":"who #includes","Fragments":["your"]},{"Key":"#includes your","Fragments":["header."]},{"Key":"Maybe the","Fragments":["validation","constructor"]},{"Key":"the validation","Fragments":["should","to","into","in"]},{"Key":"should happen","Fragments":["in"]},{"Key":"happen in","Fragments":["the","count."]},{"Key":"the constructor,","Fragments":["to","that's","it","otherwise"]},{"Key":"constructor, to","Fragments":["catch"]},{"Key":"catch more","Fragments":["misuses"]},{"Key":"more misuses","Fragments":["and"]},{"Key":"misuses and","Fragments":["sooner."]},{"Key":"and sooner.","Fragments":["Otherwise"]},{"Key":"sooner. Otherwise","Fragments":["pretty"]},{"Key":"Otherwise pretty","Fragments":["darn"]},{"Key":"pretty darn","Fragments":["solid."]},{"Key":"a purely","Fragments":["personal","personal","personal"]},{"Key":"purely personal","Fragments":["preference","preference","preference"]},{"Key":"preference thing,","Fragments":["I","I"]},{"Key":"thing, I","Fragments":["like","happen","didn't","didn't"]},{"Key":"the newer","Fragments":["using","C++11","standards"]},{"Key":"newer using","Fragments":["syntax"]},{"Key":"using syntax","Fragments":["over"]},{"Key":"syntax over","Fragments":["typedef."]},{"Key":"using baseMap","Fragments":["="]},{"Key":"baseMap =","Fragments":["std::map\u003cchar,int\u003e;"]},{"Key":"It only","Fragments":["really","works"]},{"Key":"only really","Fragments":["matters"]},{"Key":"really matters","Fragments":["if"]},{"Key":"matters if","Fragments":["you"]},{"Key":"to template","Fragments":["it,"]},{"Key":"template it,","Fragments":["which"]},{"Key":"it, which","Fragments":["you"]},{"Key":" Readable","Fragments":["solution"]},{"Key":"Readable solution","Fragments":["is"]},{"Key":"I definitely","Fragments":["like","meant"]},{"Key":"definitely like","Fragments":["your","to"]},{"Key":"your use","Fragments":["of","of","of","of","of","of","of","of","of","of","of","when","of"]},{"Key":"the initializer","Fragments":["list"]},{"Key":"initializer list","Fragments":["for","in"]},{"Key":"list for","Fragments":["the","your"]},{"Key":"the zero","Fragments":["counts","and"]},{"Key":"zero counts","Fragments":["in"]},{"Key":"counts in","Fragments":["the"]},{"Key":"map. Also","Fragments":["-"]},{"Key":"Also -","Fragments":["using"]},{"Key":"- using","Fragments":["prefix"]},{"Key":"using prefix","Fragments":["increment"]},{"Key":"prefix increment","Fragments":["-","which"]},{"Key":"increment -","Fragments":["I've"]},{"Key":"- I've","Fragments":["been","gotten","omitted","also","worked"]},{"Key":"been neglecting","Fragments":["that"]},{"Key":"neglecting that","Fragments":["myself."]},{"Key":"suggest moving","Fragments":["the"]},{"Key":"validation to","Fragments":["the"]},{"Key":"constructor. That","Fragments":["way"]},{"Key":"way there's","Fragments":["no"]},{"Key":"no way","Fragments":["to","for"]},{"Key":"the validation,","Fragments":["and"]},{"Key":"validation, and","Fragments":["while"]},{"Key":"and while","Fragments":["count()","I'm","it","handling"]},{"Key":"while count()","Fragments":["can"]},{"Key":"count() can","Fragments":["be"]},{"Key":"called more","Fragments":["often"]},{"Key":"more often","Fragments":["than","than","than"]},{"Key":"often than","Fragments":["the","adding","a"]},{"Key":"constructor the","Fragments":["reverse"]},{"Key":"reverse is","Fragments":["not"]},{"Key":"not true...","Fragments":["so"]},{"Key":"true... so","Fragments":["you'd"]},{"Key":"so you'd","Fragments":["have","still"]},{"Key":"you'd have","Fragments":["the","to","to","a","letter_worth.at(toupper(letter)-'A'),","O(","to","some","to","to","a"]},{"Key":"the potential","Fragments":["to","issue","for","to"]},{"Key":"potential to","Fragments":["check","be"]},{"Key":"check less","Fragments":["often"]},{"Key":"less often","Fragments":["(aside","they're"]},{"Key":"often (aside","Fragments":["from"]},{"Key":"(aside from","Fragments":["being"]},{"Key":"from being","Fragments":["more","constructed","invoked"]},{"Key":"being more","Fragments":["thorough).","portable","C++","restrictive"]},{"Key":"may consider","Fragments":["returning","using","is...*"]},{"Key":"const map\u0026","Fragments":["from"]},{"Key":"map\u0026 from","Fragments":["nucleotide_counts."]},{"Key":"from nucleotide_counts.","Fragments":["Returning"]},{"Key":"nucleotide_counts. Returning","Fragments":["by"]},{"Key":"Returning by","Fragments":["value","value"]},{"Key":"value makes","Fragments":["a"]},{"Key":"of sense","Fragments":["if","compared"]},{"Key":"sense if","Fragments":["you","you","I","minimizing","these"]},{"Key":"compiler might","Fragments":["be","need","save"]},{"Key":"to RVO","Fragments":["or"]},{"Key":"RVO or","Fragments":["move"]},{"Key":"or move","Fragments":["it,","to"]},{"Key":"move it,","Fragments":["but"]},{"Key":"case that's","Fragments":["definitely","currently"]},{"Key":"that's definitely","Fragments":["not","going"]},{"Key":"definitely not","Fragments":["true","be","what"]},{"Key":"not true","Fragments":["since"]},{"Key":"true since","Fragments":["you"]},{"Key":"you maintain","Fragments":["your"]},{"Key":"maintain your","Fragments":["own"]},{"Key":"own copy","Fragments":["afterward,","(compiler-dependent).","of","of"]},{"Key":"copy afterward,","Fragments":["so"]},{"Key":"afterward, so","Fragments":["it"]},{"Key":"deep copy","Fragments":["of","of"]},{"Key":"that already","Fragments":["very","do"]},{"Key":"already very","Fragments":["expensive"]},{"Key":"very expensive","Fragments":["data"]},{"Key":"expensive data","Fragments":["structure."]},{"Key":"could change","Fragments":["lines","to","the","one","them"]},{"Key":"change lines","Fragments":["11"]},{"Key":"to 12","Fragments":["from"]},{"Key":" ```transform(original.begin(),","Fragments":["original.end(),","original.end(),"]},{"Key":"```transform(original.begin(), original.end(),","Fragments":["original.begin(),","original.begin(),"]},{"Key":"original.end(), original.begin(),","Fragments":["[](char","tolower);"]},{"Key":"original.begin(), [](char","Fragments":["x)"]},{"Key":"[](char x)","Fragments":["{"]},{"Key":" works","Fragments":["the","for"]},{"Key":"works the","Fragments":["same,"]},{"Key":"the same,","Fragments":["and","the","but","but","minus","while"]},{"Key":"same, and","Fragments":["is"]},{"Key":"on complexity","Fragments":["of"]},{"Key":"loop, I","Fragments":["removed","didn't","return"]},{"Key":"I removed","Fragments":["unnecessary","extraneous","the","the","my"]},{"Key":"removed unnecessary","Fragments":["cruft.","`#include`","variables,"]},{"Key":"unnecessary cruft.","Fragments":["Although"]},{"Key":"cruft. Although","Fragments":["now"]},{"Key":"Although now","Fragments":["I"]},{"Key":"now I","Fragments":["am","have","took","see","see","have","think","have","have","have","have","thought"]},{"Key":"complex that","Fragments":["while"]},{"Key":"that while","Fragments":["condition","loop","loop"]},{"Key":"while condition","Fragments":["is."]},{"Key":"for item","Fragments":["not"]},{"Key":"item not","Fragments":["being"]},{"Key":"a reference,","Fragments":["that","it","since"]},{"Key":"reference, that","Fragments":["is"]},{"Key":"oversight on","Fragments":["my"]},{"Key":"on my","Fragments":["part.","part","reading","phone,","own","own.","machine,","submissions!","machine","submission","platform.","version,","system","JS","sample.","machine","lack","yelling","list","approach","linux","mac"]},{"Key":"with you","Fragments":["on","about","that","about","on","on"]},{"Key":"you on","Fragments":["separate","trophy?","all","default"]},{"Key":"on separate","Fragments":["source"]},{"Key":"file point,","Fragments":["I"]},{"Key":"point, I","Fragments":["think"]},{"Key":"is largely","Fragments":["irrelevant."]},{"Key":"largely irrelevant.","Fragments":["In"]},{"Key":"irrelevant. In","Fragments":["fact"]},{"Key":"In fact","Fragments":["for","I","I'm"]},{"Key":"fact for","Fragments":["such"]},{"Key":"small amount","Fragments":["of","of"]},{"Key":"code it","Fragments":["is"]},{"Key":"header. It","Fragments":["is"]},{"Key":"easier for","Fragments":["the","the"]},{"Key":"the humans","Fragments":["to"]},{"Key":"humans to","Fragments":["parse"]},{"Key":"parse and","Fragments":["maintain"]},{"Key":"and maintain","Fragments":["the"]},{"Key":"code because","Fragments":["it","at","a","of"]},{"Key":"be missing","Fragments":["a"]},{"Key":"missing a","Fragments":["few,","new","more","parentheses"]},{"Key":"a few,","Fragments":["but"]},{"Key":"few, but","Fragments":["here"]},{"Key":"is when","Fragments":["I","a","you","we","I"]},{"Key":"important to","Fragments":["implement","note"]},{"Key":"You have","Fragments":["a","zero","at","`#include`d","commented","defined","exposed","it","four","a","a","them","`if(question[question.size()-1]","a","to","multiple","multiple"]},{"Key":"class that","Fragments":["you","only","can"]},{"Key":"are instantiating","Fragments":["in"]},{"Key":"instantiating in","Fragments":["the"]},{"Key":"using header","Fragments":["file"]},{"Key":"3. To","Fragments":["avoid"]},{"Key":"avoid recompiling","Fragments":["tons"]},{"Key":"recompiling tons","Fragments":["of"]},{"Key":"tons of","Fragments":["things"]},{"Key":"of things","Fragments":["when","I'll","that","about","and","that","you","that","I"]},{"Key":"things when","Fragments":["you"]},{"Key":"are changing","Fragments":["function"]},{"Key":"changing function","Fragments":["implementation"]},{"Key":"function implementation","Fragments":["without"]},{"Key":"implementation without","Fragments":["changing","forcing"]},{"Key":"without changing","Fragments":["signatures.","it"]},{"Key":"changing signatures.","Fragments":["This"]},{"Key":"signatures. This","Fragments":["one"]},{"Key":"This one","Fragments":["is","was","started","(on","was"]},{"Key":"pretty important","Fragments":["for"]},{"Key":"4. Entry","Fragments":["point."]},{"Key":" 6.","Fragments":["Strictly","`c","Most","Instead"]},{"Key":"6. Strictly","Fragments":["enforced"]},{"Key":"Strictly enforced","Fragments":["style."]},{"Key":"do agree","Fragments":["on","with"]},{"Key":"agree on","Fragments":["the"]},{"Key":"exception message","Fragments":["(pure","suggests"]},{"Key":"message (pure","Fragments":["laziness"]},{"Key":"(pure laziness","Fragments":["on"]},{"Key":"laziness on","Fragments":["my"]},{"Key":"my part","Fragments":["of"]},{"Key":"why it","Fragments":["is","might","would","would","doesn't","looks"]},{"Key":"is empty)","Fragments":["and"]},{"Key":"empty) and","Fragments":["more"]},{"Key":"and more","Fragments":["consistent","concise.","cohesive?","modern","concise.","understandable","readable."]},{"Key":"consistent code","Fragments":["formatting"]},{"Key":"code formatting","Fragments":["and"]},{"Key":"formatting and","Fragments":["presentation","code","code","heavy"]},{"Key":"and presentation","Fragments":["points."]},{"Key":" Learned","Fragments":["from"]},{"Key":"Learned from","Fragments":["looking"]},{"Key":"other submissions,","Fragments":["that","I","I"]},{"Key":"submissions, that","Fragments":["maps"]},{"Key":"maps can","Fragments":["be"]},{"Key":"be compared","Fragments":["directly,","anyway.","to","with"]},{"Key":"compared directly,","Fragments":["and"]},{"Key":"directly, and","Fragments":["that"]},{"Key":"efficient to","Fragments":["initialise","move","pass","do"]},{"Key":"to initialise","Fragments":["the","the"]},{"Key":"initialise the","Fragments":["map","arrays"]},{"Key":"target string","Fragments":["in","to"]},{"Key":"Also, using","Fragments":["next_permutation"]},{"Key":"using next_permutation","Fragments":["is"]},{"Key":"next_permutation is","Fragments":["a"]},{"Key":"very nice","Fragments":["touch,","and"]},{"Key":"nice touch,","Fragments":["but"]},{"Key":"touch, but","Fragments":["shouldn't"]},{"Key":"but shouldn't","Fragments":["you"]},{"Key":"shouldn't you","Fragments":["do"]},{"Key":"a \"sort\"","Fragments":["on"]},{"Key":"\"sort\" on","Fragments":["perm,"]},{"Key":"on perm,","Fragments":["before"]},{"Key":"perm, before","Fragments":["invoking"]},{"Key":"before invoking","Fragments":["it"]},{"Key":"invoking it","Fragments":["to"]},{"Key":"sure all","Fragments":["permutations"]},{"Key":"all permutations","Fragments":["are","of"]},{"Key":"permutations are","Fragments":["included?"]},{"Key":"guess it","Fragments":["passed","has","might","could","doesn't","would","would've","boils","doesn't"]},{"Key":"it passed","Fragments":["the"]},{"Key":"passed the","Fragments":["tests,","day","test"]},{"Key":"tests, but","Fragments":["I","I'm"]},{"Key":"am wondering","Fragments":["if","if"]},{"Key":"be possible","Fragments":["to","even","on","to","to","to"]},{"Key":"to contruct","Fragments":["a"]},{"Key":"contruct a","Fragments":["valid"]},{"Key":"valid test","Fragments":["case"]},{"Key":"that hits","Fragments":["one"]},{"Key":"hits one","Fragments":["of"]},{"Key":"missing permutations,","Fragments":[".."]},{"Key":"Nice and","Fragments":["clean","short","clear.","simple.","concise!","simple.","simple."]},{"Key":"and clean","Fragments":["implementation.","things"]},{"Key":"The string","Fragments":["is","\"one,","is"]},{"Key":"copied in","Fragments":["2-3"]},{"Key":"in 2-3","Fragments":["places"]},{"Key":"2-3 places","Fragments":["depending"]},{"Key":"places depending","Fragments":["on"]},{"Key":"the content.","Fragments":["That"]},{"Key":"content. That","Fragments":["could"]},{"Key":"That could","Fragments":["cause","be"]},{"Key":"could cause","Fragments":["performance"]},{"Key":"cause performance","Fragments":["bottlenecks,"]},{"Key":"performance bottlenecks,","Fragments":["but"]},{"Key":"bottlenecks, but","Fragments":["if"]},{"Key":"if performance","Fragments":["is"]},{"Key":"performance is","Fragments":["not","_that_"]},{"Key":"an issue,","Fragments":["this","I"]},{"Key":"issue, this","Fragments":["is"]},{"Key":"definitely a","Fragments":["nice"]},{"Key":"So, that","Fragments":["it"]},{"Key":"how I","Fragments":["might","need","got","approached","write","can","did","implement","implement","implement","can","solved","created","created","created","created","defined","grew","could","defined","coded,","can","was","can","approached"]},{"Key":"might solve","Fragments":["this,"]},{"Key":"solve this,","Fragments":["to","without"]},{"Key":"this, to","Fragments":["avoid"]},{"Key":"avoid polluting","Fragments":["the"]},{"Key":"the header,","Fragments":["but","it's","most","but","but","which"]},{"Key":"but IMHO","Fragments":["that"]},{"Key":"IMHO that","Fragments":["adds"]},{"Key":"adds to","Fragments":["the"]},{"Key":"the boilerplateiness","Fragments":["of"]},{"Key":"boilerplateiness of","Fragments":["the"]},{"Key":"code, having","Fragments":["two"]},{"Key":"having two","Fragments":["files","writable"]},{"Key":"files instead","Fragments":["of"]},{"Key":"of one,","Fragments":["and"]},{"Key":"one, and","Fragments":["having"]},{"Key":"having duplicated","Fragments":["the"]},{"Key":"duplicated the","Fragments":["function"]},{"Key":"function prototype,","Fragments":["..."]},{"Key":"prototype, ...","Fragments":["well,"]},{"Key":"... well,","Fragments":["I"]},{"Key":"guess that","Fragments":["is","a","I","is","is"]},{"Key":"get when","Fragments":["you","trying"]},{"Key":"use c++,","Fragments":["..."]},{"Key":" @ebony","Fragments":["In"]},{"Key":"@ebony In","Fragments":["my"]},{"Key":"opinion, the","Fragments":["final"]},{"Key":"final test","Fragments":["case"]},{"Key":" ```BOOST_REQUIRE_EQUAL(food_chain::verses(1,","Fragments":["8),"]},{"Key":"```BOOST_REQUIRE_EQUAL(food_chain::verses(1, 8),","Fragments":["food_chain::sing());```"]},{"Key":"I define","Fragments":["```sing()```"]},{"Key":"define ```sing()```","Fragments":["by"]},{"Key":"```sing()``` by","Fragments":["calling"]},{"Key":"calling ```verses(1,","Fragments":["8)```,"]},{"Key":"```verses(1, 8)```,","Fragments":["then"]},{"Key":"8)```, then","Fragments":["we"]},{"Key":"then we","Fragments":["are","probably","wouldn't","know"]},{"Key":"we are","Fragments":["testing","missing","trying","modifying","looking","not","in","dealing"]},{"Key":"the program","Fragments":["against","in","is","did,","doesn't","is","is","will","could","running,","would","better?","returns","should","quit","fail","(see","in","to"]},{"Key":"program against","Fragments":["itself,"]},{"Key":"against itself,","Fragments":["not"]},{"Key":"itself, not","Fragments":["against"]},{"Key":"not against","Fragments":["any","a"]},{"Key":"against any","Fragments":["external"]},{"Key":"any external","Fragments":["criteria!"]},{"Key":"So for","Fragments":["the","every","example","`m\u003ck`,"]},{"Key":"the sake","Fragments":["of","of","of","of","of","of","of"]},{"Key":"sake of","Fragments":["actually","construction","arithmetics","...","coming","simplicity.","being"]},{"Key":"testing against","Fragments":["something"]},{"Key":"against something","Fragments":["I"]},{"Key":" @keira","Fragments":["Thanks!"]},{"Key":"@keira Thanks!","Fragments":["All"]},{"Key":"Thanks! All","Fragments":["those"]},{"Key":"All those","Fragments":["algorithms"]},{"Key":"those algorithms","Fragments":["classes"]},{"Key":"algorithms classes","Fragments":["paid"]},{"Key":"classes paid","Fragments":["off,"]},{"Key":"paid off,","Fragments":["I"]},{"Key":" @hipolito","Fragments":["Thank","Thank"]},{"Key":"@hipolito Thank","Fragments":["you","you"]},{"Key":"the hints.","Fragments":["I"]},{"Key":"hints. I","Fragments":["can"]},{"Key":"can offer","Fragments":["one"]},{"Key":"offer one","Fragments":["minor"]},{"Key":"one minor","Fragments":["advantage"]},{"Key":"minor advantage","Fragments":["of"]},{"Key":"of ```int```","Fragments":[","]},{"Key":"```int``` ,","Fragments":["which"]},{"Key":"the flexibility","Fragments":["of"]},{"Key":"flexibility of","Fragments":["being"]},{"Key":"being able","Fragments":["to","to","to"]},{"Key":"a negative","Fragments":["value","number,","value.","direction.","to","number?"]},{"Key":"negative value","Fragments":["to","will"]},{"Key":"value to","Fragments":["indicate","a","0","be"]},{"Key":"indicate an","Fragments":["error.","anagram."]},{"Key":"Nice job","Fragments":["using"]},{"Key":"job using","Fragments":["the"]},{"Key":"default parameter","Fragments":["in"]},{"Key":"parameter in","Fragments":["```sing```"]},{"Key":"in ```sing```","Fragments":["-"]},{"Key":"```sing``` -","Fragments":["I"]},{"Key":"thought of","Fragments":["that.","the","that","this","using","making","it","as","using","using"]},{"Key":"of style,","Fragments":["I"]},{"Key":"use ```using","Fragments":["std::string```"]},{"Key":"```using std::string```","Fragments":["and","directive","to","would","in"]},{"Key":"std::string``` and","Fragments":["```using"]},{"Key":"and ```using","Fragments":["std::uint16_t```"]},{"Key":"```using std::uint16_t```","Fragments":["for"]},{"Key":"std::uint16_t``` for","Fragments":["readability."]},{"Key":"@kaitlyn That's","Fragments":["a"]},{"Key":"good point","Fragments":["about","on","about"]},{"Key":"about trying","Fragments":["to"]},{"Key":"allocating new","Fragments":["stringstreams"]},{"Key":"new stringstreams","Fragments":["and"]},{"Key":"stringstreams and","Fragments":["strings.","minimizing"]},{"Key":"and strings.","Fragments":["Do"]},{"Key":"strings. Do","Fragments":["you"]},{"Key":"mean linearly","Fragments":["growing?"]},{"Key":"linearly growing?","Fragments":["I"]},{"Key":"growing? I","Fragments":["don't"]},{"Key":"see anything","Fragments":["logarithmic","wrong"]},{"Key":"anything logarithmic","Fragments":["going"]},{"Key":"logarithmic going","Fragments":["on."]},{"Key":" oh,","Fragments":["i"]},{"Key":"oh, i","Fragments":["didn't"]},{"Key":"i didn't","Fragments":["even","use","know"]},{"Key":"didn't even","Fragments":["know","think","go","consider","consider"]},{"Key":"even know","Fragments":["that","about"]},{"Key":"that new","Fragments":["syntax,"]},{"Key":"new syntax,","Fragments":["nice"]},{"Key":"syntax, nice","Fragments":["one"]},{"Key":"a non-template","Fragments":["overload"]},{"Key":"non-template overload","Fragments":["for"]},{"Key":"overload for","Fragments":["string_ref","`operator[]`"]},{"Key":"for string_ref","Fragments":["(currently"]},{"Key":"string_ref (currently","Fragments":["in"]},{"Key":"(currently in","Fragments":["Boost,"]},{"Key":"in Boost,","Fragments":["IIRC"]},{"Key":"Boost, IIRC","Fragments":["planned"]},{"Key":"IIRC planned","Fragments":["for"]},{"Key":"planned for","Fragments":["std?)"]},{"Key":"for std?)","Fragments":["that'll"]},{"Key":"std?) that'll","Fragments":["cover"]},{"Key":"that'll cover","Fragments":["std::string,"]},{"Key":"cover std::string,","Fragments":["const"]},{"Key":"std::string, const","Fragments":["char*,"]},{"Key":"const char*,","Fragments":["other","but"]},{"Key":"char*, other","Fragments":["string_ref..."]},{"Key":"other string_ref...","Fragments":["and"]},{"Key":"string_ref... and","Fragments":["I"]},{"Key":"think something","Fragments":["else?","like:","like"]},{"Key":"something else?","Fragments":["Then"]},{"Key":"else? Then","Fragments":["your"]},{"Key":"your template","Fragments":["would","instead"]},{"Key":"template would","Fragments":["only"]},{"Key":"be considered","Fragments":["for","\"shouty\",","a","speech","as","a","\"special\""]},{"Key":"considered for","Fragments":["things"]},{"Key":"for things","Fragments":["string_ref","like","like"]},{"Key":"things string_ref","Fragments":["can't"]},{"Key":"string_ref can't","Fragments":["handle","construct"]},{"Key":"can't handle","Fragments":["(because"]},{"Key":"handle (because","Fragments":["non-templates"]},{"Key":"(because non-templates","Fragments":["are"]},{"Key":"non-templates are","Fragments":["always"]},{"Key":"always considered","Fragments":["first)."]},{"Key":"reason string_ref","Fragments":["can't"]},{"Key":"can't construct","Fragments":["from","an"]},{"Key":"construct from","Fragments":["anything","as"]},{"Key":"from anything","Fragments":["that","that"]},{"Key":"that has","Fragments":["begin()","a","a","a","begin","two","more","been","a","the"]},{"Key":"has begin()","Fragments":["and"]},{"Key":"begin() and","Fragments":["end()","end()","end()","end()","end().","end()","end()","end(),"]},{"Key":"and end()","Fragments":["that","functions","family","members.","which","every"]},{"Key":"end() that","Fragments":["dereference"]},{"Key":"that dereference","Fragments":["to"]},{"Key":"dereference to","Fragments":["char_type"]},{"Key":"to char_type","Fragments":["-"]},{"Key":"char_type -","Fragments":["and"]},{"Key":"and probably","Fragments":["something","be","faster."]},{"Key":"probably something","Fragments":["we"]},{"Key":"something we","Fragments":["should","need"]},{"Key":"general think","Fragments":["about","of"]},{"Key":"about when","Fragments":["doing","to"]},{"Key":"when doing","Fragments":["this"]},{"Key":"- is","Fragments":["that","that","G++","the"]},{"Key":"the old","Fragments":["C-style","singular","map","cstring.","data"]},{"Key":"old C-style","Fragments":["usage:"]},{"Key":" char","Fragments":["buf[99];","*","current[2]","const","c","c"]},{"Key":" strcpy(","Fragments":["buf,"]},{"Key":"strcpy( buf,","Fragments":["\"Yep.\""]},{"Key":"buf, \"Yep.\"","Fragments":[");"]},{"Key":" counter(","Fragments":["buf"]},{"Key":"counter( buf","Fragments":[");"]},{"Key":"buf );","Fragments":["//end(buf)"]},{"Key":"); //end(buf)","Fragments":["refers"]},{"Key":"//end(buf) refers","Fragments":["to"]},{"Key":"refers to","Fragments":["buf"]},{"Key":"to buf","Fragments":["+"]},{"Key":"buf +","Fragments":["99"]},{"Key":"if your","Fragments":["template","`domain_error`","class","supposed","string"]},{"Key":"template instead","Fragments":["referred"]},{"Key":"instead referred","Fragments":["to"]},{"Key":"referred to","Fragments":[".data()","as","the"]},{"Key":"to .data()","Fragments":["and"]},{"Key":".data() and","Fragments":[".size()"]},{"Key":"and .size()","Fragments":["I"]},{"Key":".size() I","Fragments":["think"]},{"Key":"think we'd","Fragments":["be"]},{"Key":"we'd be","Fragments":["fine,"]},{"Key":" Personally","Fragments":["I've"]},{"Key":"Personally I've","Fragments":["only"]},{"Key":"I've only","Fragments":["been","found","recently"]},{"Key":"only been","Fragments":["defining"]},{"Key":"been defining","Fragments":["string_ref"]},{"Key":"defining string_ref","Fragments":["parameters."]},{"Key":"string_ref parameters.","Fragments":["If"]},{"Key":"parameters. If","Fragments":["someone"]},{"Key":"If someone","Fragments":["wants"]},{"Key":"someone wants","Fragments":["to"]},{"Key":"different range","Fragments":["of"]},{"Key":"chars it's","Fragments":["not"]},{"Key":"not hard","Fragments":["to"]},{"Key":"explicitly construct","Fragments":["a"]},{"Key":"a string_ref","Fragments":["from","from"]},{"Key":"string_ref from","Fragments":["whatever,","name,"]},{"Key":"from whatever,","Fragments":["and"]},{"Key":"whatever, and","Fragments":["it's"]},{"Key":"try it","Fragments":["with","if"]},{"Key":"with `boost::tokenizer`","Fragments":["instead"]},{"Key":"`boost::tokenizer` instead","Fragments":["of"]},{"Key":"It cut","Fragments":["down"]},{"Key":"cut down","Fragments":["on","on"]},{"Key":"the amount","Fragments":["of","of","of","of","of","of","of","of","of","of"]},{"Key":"string copying.","Fragments":["Also"]},{"Key":"copying. Also","Fragments":["used"]},{"Key":"Also used","Fragments":["`boost::trim_if()`"]},{"Key":"used `boost::trim_if()`","Fragments":["to"]},{"Key":"`boost::trim_if()` to","Fragments":["strip"]},{"Key":"to strip","Fragments":["off","it","out","the"]},{"Key":"strip off","Fragments":["any"]},{"Key":"off any","Fragments":["parentheses"]},{"Key":"any parentheses","Fragments":["at"]},{"Key":"parentheses at","Fragments":["the"]},{"Key":"the start","Fragments":["or","of","of","index","would","and","and","and","and","to"]},{"Key":"start or","Fragments":["end"]},{"Key":"or end","Fragments":["of","of","and"]},{"Key":"right term.","Fragments":["When"]},{"Key":"term. When","Fragments":["std"]},{"Key":"When std","Fragments":["containers"]},{"Key":"std containers","Fragments":["like"]},{"Key":"like string","Fragments":["run"]},{"Key":"string run","Fragments":["out"]},{"Key":"run out","Fragments":["of"]},{"Key":"of room","Fragments":["they","for"]},{"Key":"room they","Fragments":["don't"]},{"Key":"don't just","Fragments":["allocate"]},{"Key":"just allocate","Fragments":["one"]},{"Key":"allocate one","Fragments":["more"]},{"Key":"one more","Fragments":["element","thing","iteration","power","copy","thing.","thing","question,","iteration.","thing,"]},{"Key":"more element","Fragments":["-"]},{"Key":"element -","Fragments":["they"]},{"Key":"they generally","Fragments":["double"]},{"Key":"generally double","Fragments":["their"]},{"Key":"double their","Fragments":["capacity"]},{"Key":"their capacity","Fragments":["(or"]},{"Key":"capacity (or","Fragments":["increase"]},{"Key":"(or increase","Fragments":["by"]},{"Key":"increase by","Fragments":["some"]},{"Key":"by some","Fragments":["other","means"]},{"Key":"other convenient","Fragments":["multiplicative"]},{"Key":"convenient multiplicative","Fragments":["factor)."]},{"Key":"multiplicative factor).","Fragments":["So"]},{"Key":"factor). So","Fragments":["the"]},{"Key":"more times","Fragments":["they've","than"]},{"Key":"times they've","Fragments":["allocated"]},{"Key":"they've allocated","Fragments":["the"]},{"Key":"allocated the","Fragments":["less"]},{"Key":"the less","Fragments":["often","than"]},{"Key":"often they're","Fragments":["allocating"]},{"Key":"they're allocating","Fragments":["-"]},{"Key":"allocating -","Fragments":["the"]},{"Key":"the frequency","Fragments":["of"]},{"Key":"frequency of","Fragments":["allocations"]},{"Key":"allocations is","Fragments":["decreasing."]},{"Key":"When it","Fragments":["comes","comes","came"]},{"Key":"to style","Fragments":["my"]},{"Key":"style my","Fragments":["#1"]},{"Key":"my #1","Fragments":["rule","recommendation"]},{"Key":"#1 rule","Fragments":["is"]},{"Key":"rule is","Fragments":["consistency"]},{"Key":"is consistency","Fragments":["with"]},{"Key":"consistency with","Fragments":["whatever","them","std::string::size_type."]},{"Key":"with whatever","Fragments":["project","data","data"]},{"Key":"whatever project","Fragments":["you're"]},{"Key":"project you're","Fragments":["working"]},{"Key":"you're working","Fragments":["in,","on"]},{"Key":"working in,","Fragments":["so"]},{"Key":"in, so","Fragments":["I"]},{"Key":"probably do","Fragments":["that","that"]},{"Key":"do that","Fragments":["if","(for","even","you","-","by","soon.",":)","with","because","as","and","in","it","either,"]},{"Key":"your project","Fragments":[":)","to"]},{"Key":"As counter-intuitive","Fragments":["as"]},{"Key":"counter-intuitive as","Fragments":["it"]},{"Key":"may seem,","Fragments":["though,"]},{"Key":"seem, though,","Fragments":["I"]},{"Key":"though, I","Fragments":["actually","have","haven't","checked","suppose","guess"]},{"Key":"actually find","Fragments":["(e.g.)","it"]},{"Key":"find (e.g.)","Fragments":["std::string"]},{"Key":"(e.g.) std::string","Fragments":["more"]},{"Key":"std::string more","Fragments":["readable,"]},{"Key":"readable, mostly","Fragments":["because"]},{"Key":"mostly because","Fragments":["I'm","I"]},{"Key":"because I'm","Fragments":["so","not","trying"]},{"Key":"I'm so","Fragments":["used"]},{"Key":"so used","Fragments":["to"]},{"Key":"seeing it.","Fragments":["So"]},{"Key":"it. So","Fragments":["when","I"]},{"Key":"So when","Fragments":["I'm"]},{"Key":"when I'm","Fragments":["out-of-context","just","reading"]},{"Key":"I'm out-of-context","Fragments":["that's"]},{"Key":"out-of-context that's","Fragments":["what"]},{"Key":"that's what","Fragments":["I","I","you're","I","came","I"]},{"Key":"I write.","Fragments":["If"]},{"Key":"write. If","Fragments":["I"]},{"Key":"see string","Fragments":["I"]},{"Key":"I always","Fragments":["have","find","use","remember","remember","liked","put","find"]},{"Key":"to stop","Fragments":["and","commenting","iteration","early"]},{"Key":"stop and","Fragments":["think"]},{"Key":"think \"Wait,","Fragments":["what"]},{"Key":"\"Wait, what","Fragments":["is"]},{"Key":"this string?\"","Fragments":["and"]},{"Key":"string?\" and","Fragments":["then"]},{"Key":"I go","Fragments":["find"]},{"Key":"go find","Fragments":["the"]},{"Key":"and try","Fragments":["to","to","to","again.","using","and","to"]},{"Key":"a mental","Fragments":["note","optimization"]},{"Key":"mental note","Fragments":["of"]},{"Key":"note of","Fragments":["it."]},{"Key":"of it.","Fragments":["uint16_t","You're","So","And,","I","A","The"]},{"Key":"it. uint16_t","Fragments":["isn't"]},{"Key":"uint16_t isn't","Fragments":["so"]},{"Key":"isn't so","Fragments":["bad,","nice."]},{"Key":"so bad,","Fragments":["because","eh?"]},{"Key":"bad, because","Fragments":["in"]},{"Key":"in C","Fragments":["code","for","is","and","or","before","Parts"]},{"Key":"C code","Fragments":["that's"]},{"Key":"code that's","Fragments":["the","definitely"]},{"Key":"only legal","Fragments":["way"]},{"Key":"legal way","Fragments":["to"]},{"Key":"specify it","Fragments":["and"]},{"Key":"also because","Fragments":["there's","each","this"]},{"Key":"because there's","Fragments":["a"]},{"Key":"lot fewer","Fragments":["independent"]},{"Key":"fewer independent","Fragments":["implementations"]},{"Key":"independent implementations","Fragments":["of"]},{"Key":"of uint16_t","Fragments":["out"]},{"Key":"uint16_t out","Fragments":["there"]},{"Key":"out there","Fragments":["-","just","to"]},{"Key":"- there's","Fragments":["half","always"]},{"Key":"there's half","Fragments":["a"]},{"Key":"half a","Fragments":["kagillion"]},{"Key":"a kagillion","Fragments":["strings"]},{"Key":"kagillion strings","Fragments":["running"]},{"Key":"strings running","Fragments":["about"]},{"Key":"running about","Fragments":["(though"]},{"Key":"about (though","Fragments":["to"]},{"Key":"(though to","Fragments":["be"]},{"Key":"be fair","Fragments":["most"]},{"Key":"fair most","Fragments":["are"]},{"Key":"most are","Fragments":["String"]},{"Key":"are String","Fragments":["or"]},{"Key":"String or","Fragments":["SomethingString)."]},{"Key":"against a","Fragments":["using","response","response"]},{"Key":"a using","Fragments":["like","statement).","or"]},{"Key":"using like","Fragments":["that"]},{"Key":"- especially","Fragments":["since","if"]},{"Key":"especially since","Fragments":["you're","the","this","it","there","If"]},{"Key":"you're specifying","Fragments":["one"]},{"Key":"specifying one","Fragments":["particular"]},{"Key":"one particular","Fragments":["typename."]},{"Key":"particular typename.","Fragments":["Certainly"]},{"Key":"typename. Certainly","Fragments":["consistency"]},{"Key":"Certainly consistency","Fragments":["wins"]},{"Key":"consistency wins","Fragments":["over"]},{"Key":"wins over","Fragments":["such"]},{"Key":"over such","Fragments":["a"]},{"Key":"minor thing.","Fragments":["I"]},{"Key":"thing. I","Fragments":["just"]},{"Key":" isWordSeparator","Fragments":["can"]},{"Key":"isWordSeparator can","Fragments":["likely"]},{"Key":"can likely","Fragments":["be"]},{"Key":"likely be","Fragments":["const/static","inlined"]},{"Key":"be const/static","Fragments":["(ln"]},{"Key":"const/static (ln","Fragments":["28)."]},{"Key":"the precondition","Fragments":["check","that"]},{"Key":"precondition check","Fragments":["on"]},{"Key":"check on","Fragments":["23","the","empty"]},{"Key":"on 23","Fragments":["is"]},{"Key":"23 is","Fragments":["worthwhile"]},{"Key":"is worthwhile","Fragments":["given"]},{"Key":"worthwhile given","Fragments":["that"]},{"Key":"that empty","Fragments":["input","tokens"]},{"Key":"empty input","Fragments":["is"]},{"Key":"handled gracefully","Fragments":["already."]},{"Key":"In word_count::words,","Fragments":["why"]},{"Key":"word_count::words, why","Fragments":["isn't"]},{"Key":"why isn't","Fragments":["your"]},{"Key":"isn't your","Fragments":["main"]},{"Key":"your main","Fragments":["loop"]},{"Key":"main loop","Fragments":["just:"]},{"Key":"(const auto","Fragments":["\u0026"]},{"Key":"auto \u0026","Fragments":["word"]},{"Key":"\u0026 word","Fragments":[":"]},{"Key":"word :","Fragments":["words)","words)","wordList)"]},{"Key":": words)","Fragments":["wordCountMap[word]++;"]},{"Key":"like you're","Fragments":["doing","not","aiming","using","copying","trying","trying","testing","calling","running"]},{"Key":"more work","Fragments":["there","algorithmically."]},{"Key":"work there","Fragments":["than","because"]},{"Key":"there than","Fragments":["you"]},{"Key":"than you","Fragments":["need"]},{"Key":"need with","Fragments":["potentially"]},{"Key":"with potentially","Fragments":["two"]},{"Key":"potentially two","Fragments":["map"]},{"Key":"two map","Fragments":["look"]},{"Key":"map look","Fragments":["ups"]},{"Key":"look ups","Fragments":["and"]},{"Key":"ups and","Fragments":["a"]},{"Key":"the feedback","Fragments":["TrophyNinjaShrub.","guide:","from","@cesar.","fractalic!","dcook-au."]},{"Key":"The idea","Fragments":["of","to","is","is"]},{"Key":"of returning","Fragments":["a","it","in"]},{"Key":"a ```map","Fragments":["const\u0026```"]},{"Key":"```map const\u0026```","Fragments":["from"]},{"Key":"const\u0026``` from","Fragments":["nucleotide_counts"]},{"Key":"nucleotide_counts is","Fragments":["in"]},{"Key":"in retrospective","Fragments":["absolutely"]},{"Key":"retrospective absolutely","Fragments":["sensible."]},{"Key":"absolutely sensible.","Fragments":["I"]},{"Key":"sensible. I","Fragments":["can't"]},{"Key":" I'll","Fragments":["change","submit","check","respond","explain","change","give","give"]},{"Key":"idea to","Fragments":["put","mark","separate","me,","read","replace","use","narrow","imbue","explicitly","use","use","map","stick"]},{"Key":"validation into","Fragments":["the"]},{"Key":"sense in","Fragments":["real","this"]},{"Key":"in real","Fragments":["life,","applications","life."]},{"Key":"real life,","Fragments":["but"]},{"Key":"life, but","Fragments":["that"]},{"Key":"is not,","Fragments":["what"]},{"Key":"not, what","Fragments":["the"]},{"Key":"exercise demands,","Fragments":["and"]},{"Key":"demands, and","Fragments":["therefore"]},{"Key":"therefore I'll","Fragments":["leave"]},{"Key":"I'll leave","Fragments":["it","it"]},{"Key":"constructor explicit","Fragments":["to","prevents"]},{"Key":"from string","Fragments":["to","to"]},{"Key":"The \"matches\"","Fragments":["member"]},{"Key":"\"matches\" member","Fragments":["function"]},{"Key":"Consider being","Fragments":["explicit","more"]},{"Key":"being explicit","Fragments":["about","in"]},{"Key":"about accepting","Fragments":["the"]},{"Key":"accepting the","Fragments":["compiler-generated"]},{"Key":"the compiler-generated","Fragments":["default"]},{"Key":"compiler-generated default","Fragments":["copy"]},{"Key":"default copy","Fragments":["constructors"]},{"Key":"copy constructors","Fragments":["using"]},{"Key":"constructors using","Fragments":["\"="]},{"Key":"using \"=","Fragments":["default\"."]},{"Key":"\"= default\".","Fragments":["It's"]},{"Key":"default\". It's","Fragments":["happening"]},{"Key":"It's happening","Fragments":["anyway,"]},{"Key":"happening anyway,","Fragments":["but"]},{"Key":"often find","Fragments":["it"]},{"Key":"it helpful","Fragments":["to"]},{"Key":"helpful to","Fragments":["think","think"]},{"Key":"about upfront","Fragments":["for"]},{"Key":"upfront for","Fragments":["new"]},{"Key":"for new","Fragments":["types"]},{"Key":"new types","Fragments":["I'm"]},{"Key":"types I'm","Fragments":["creating"]},{"Key":"I'm creating","Fragments":["(i.e."]},{"Key":"creating (i.e.","Fragments":["should"]},{"Key":"(i.e. should","Fragments":["it"]},{"Key":"should it","Fragments":["be"]},{"Key":"it be","Fragments":["copyable,","so","tied","at","written:","okay","that,","more","better","better","all","static"]},{"Key":"be copyable,","Fragments":["movable,"]},{"Key":"copyable, movable,","Fragments":["default-constructable,"]},{"Key":"movable, default-constructable,","Fragments":["etc)."]},{"Key":"absolutely right.","Fragments":["I'm"]},{"Key":"right. I'm","Fragments":["going"]},{"Key":"stop commenting","Fragments":["about"]},{"Key":"commenting about","Fragments":["that"]},{"Key":"on people","Fragments":["who"]},{"Key":"people who","Fragments":["did","sort-of","include","love"]},{"Key":"who did","Fragments":["their"]},{"Key":"did their","Fragments":["validation"]},{"Key":"their validation","Fragments":["in"]},{"Key":"the count()","Fragments":[":)","function"]},{"Key":"count() :)","Fragments":["I"]},{"Key":":) I","Fragments":["missed","really","will","also"]},{"Key":"missed it","Fragments":["because"]},{"Key":"my implementation","Fragments":["it","of","of"]},{"Key":"implementation it","Fragments":["would","throws.","appears"]},{"Key":"would actually","Fragments":["(indirectly)","be","confuse","be"]},{"Key":"actually (indirectly)","Fragments":["do"]},{"Key":"(indirectly) do","Fragments":["it"]},{"Key":"both places","Fragments":["-"]},{"Key":"places -","Fragments":["I"]},{"Key":"just was","Fragments":["only"]},{"Key":"was only","Fragments":["thinking","10000"]},{"Key":"only thinking","Fragments":["about"]},{"Key":"constructor. But","Fragments":["yeah,"]},{"Key":"But yeah,","Fragments":["they","I","if"]},{"Key":"yeah, they","Fragments":["want"]},{"Key":"they want","Fragments":["count","it"]},{"Key":"want count","Fragments":["to"]},{"Key":"count to","Fragments":["validate","slide"]},{"Key":"validate its","Fragments":["argument"]},{"Key":"argument but","Fragments":["didn't"]},{"Key":"didn't really","Fragments":["care","demand","think","like","take","take"]},{"Key":"care if","Fragments":["you"]},{"Key":"you validated","Fragments":["the"]},{"Key":"validated the","Fragments":["constructor","input."]},{"Key":"constructor argument.","Fragments":["Mea"]},{"Key":"argument. Mea","Fragments":["culpa."]},{"Key":"If it","Fragments":["were","was","compiles","somehow","is","returns","was","is","does"]},{"Key":"it were","Fragments":["up","int","up"]},{"Key":"were up","Fragments":["to","to"]},{"Key":"me I","Fragments":["would've","ought","would"]},{"Key":"I would've","Fragments":["chosen","used","returned","thought","thought","done","expected","thought"]},{"Key":"would've chosen","Fragments":["a"]},{"Key":"chosen a","Fragments":["different"]},{"Key":"different name","Fragments":["for"]},{"Key":"string version","Fragments":["rather"]},{"Key":"version rather","Fragments":["than"]},{"Key":"than overloading,","Fragments":["if"]},{"Key":"overloading, if","Fragments":["for"]},{"Key":"no other","Fragments":["reason","overhead","behavior,","case"]},{"Key":"other reason","Fragments":["than"]},{"Key":"reason than","Fragments":["avoiding"]},{"Key":"than avoiding","Fragments":["the"]},{"Key":"avoiding the","Fragments":["silly","float"]},{"Key":"the silly","Fragments":["cast"]},{"Key":"silly cast","Fragments":["(which"]},{"Key":"cast (which","Fragments":["selects"]},{"Key":"(which selects","Fragments":["the"]},{"Key":"selects the","Fragments":["overload,"]},{"Key":"the overload,","Fragments":["btw)."]},{"Key":"If you're","Fragments":["wondering","going","not","concerned","going","only","unfamiliar,","going","going","familiar","going"]},{"Key":"you're wondering","Fragments":["why"]},{"Key":"wondering why","Fragments":["I","you"]},{"Key":"one overload","Fragments":["in"]},{"Key":"overload in","Fragments":["the","locale:"]},{"Key":"header, it's","Fragments":["to"]},{"Key":"it's to","Fragments":["make","such","do"]},{"Key":"make RVO","Fragments":["easier"]},{"Key":"RVO easier","Fragments":["for"]},{"Key":"compiler. I","Fragments":["want"]},{"Key":"I want","Fragments":["it","my","to","const","to","to","to","to","in","to"]},{"Key":"the very","Fragments":["same","least,","first","least.","first","early","start","first","least","helpful","beginning","beginning"]},{"Key":"very same","Fragments":["string","value"]},{"Key":"same string","Fragments":["object","from"]},{"Key":"string object","Fragments":["it's","just","in"]},{"Key":"object it's","Fragments":["about"]},{"Key":"it's about","Fragments":["to"]},{"Key":"about to","Fragments":["create","be"]},{"Key":"create for","Fragments":["the"]},{"Key":"parameter is","Fragments":["the","of","a","indeed","actually","copying"]},{"Key":"same memory","Fragments":["that's","on"]},{"Key":"memory that's","Fragments":["about"]},{"Key":"that's about","Fragments":["to"]},{"Key":"returned -","Fragments":["so"]},{"Key":"so only","Fragments":["one"]},{"Key":"one string","Fragments":["ever","and","and"]},{"Key":"string ever","Fragments":["gets"]},{"Key":"ever gets","Fragments":["created."]},{"Key":"gets created.","Fragments":["And"]},{"Key":"created. And","Fragments":["it's"]},{"Key":"it's easier","Fragments":["to","to"]},{"Key":"entire definition","Fragments":["of"]},{"Key":"available at","Fragments":["compile"]},{"Key":" (unsigned","Fragments":["long"]},{"Key":"(unsigned long","Fragments":["long)1"]},{"Key":"long long)1","Fragments":["is"]},{"Key":"long)1 is","Fragments":["the"]},{"Key":"as 1ULL.","Fragments":["I"]},{"Key":"1ULL. I","Fragments":["find"]},{"Key":"latter more","Fragments":["readable,"]},{"Key":"it's really","Fragments":["personal","useful","not","not","necessary","better,","good"]},{"Key":"really personal","Fragments":["preference."]},{"Key":"preference. I'm","Fragments":["sure"]},{"Key":"sure someone","Fragments":["else"]},{"Key":"else would","Fragments":["recommend"]},{"Key":"would recommend","Fragments":["static_cast.","using","declaring","making","you","moving","a","using","just","mWord.","moving","in","you","you","using"]},{"Key":"using map.at()","Fragments":["rather"]},{"Key":"map.at() rather","Fragments":["than"]},{"Key":"than operator[].","Fragments":["Thus"]},{"Key":"operator[]. Thus","Fragments":["if"]},{"Key":"Thus if","Fragments":["given"]},{"Key":"if given","Fragments":["invalid"]},{"Key":"given invalid","Fragments":["input"]},{"Key":"input you'd","Fragments":["throw"]},{"Key":"you'd throw","Fragments":["an"]},{"Key":"exception rather","Fragments":["than"]},{"Key":"than modify","Fragments":["your"]},{"Key":"modify your","Fragments":["replace_map","prototypes"]},{"Key":"your replace_map","Fragments":["(and"]},{"Key":"replace_map (and","Fragments":["henceforth"]},{"Key":"(and henceforth","Fragments":["mapping"]},{"Key":"henceforth mapping","Fragments":["Q"]},{"Key":"mapping Q","Fragments":["to"]},{"Key":"Q to","Fragments":["'\\0')."]},{"Key":"to '\\0').","Fragments":["Though"]},{"Key":"'\\0'). Though","Fragments":["I"]},{"Key":"Though I","Fragments":["do","understand","think","think"]},{"Key":"do understand","Fragments":["there's","some","that"]},{"Key":"understand there's","Fragments":["a"]},{"Key":"tradeoff there","Fragments":["-"]},{"Key":"- []","Fragments":["is"]},{"Key":"[] is","Fragments":["roughly"]},{"Key":"is roughly","Fragments":["one"]},{"Key":"roughly one","Fragments":["if"]},{"Key":"one if","Fragments":["statement"]},{"Key":"statement faster","Fragments":["so"]},{"Key":"faster so","Fragments":["if"]},{"Key":"you really,","Fragments":["really","really"]},{"Key":"really, really","Fragments":["trust","tried,","common"]},{"Key":"really trust","Fragments":["your"]},{"Key":"trust your","Fragments":["caller..."]},{"Key":"I'd also","Fragments":["recommend","recommend","be","split"]},{"Key":"also recommend","Fragments":["removing","marking"]},{"Key":"recommend removing","Fragments":["the"]},{"Key":"removing the","Fragments":["cost","dependency","private","else","counts"]},{"Key":"cost from","Fragments":["input"]},{"Key":"from input","Fragments":["and"]},{"Key":"modifying it","Fragments":["then","anymore.","in-place,"]},{"Key":"it then","Fragments":["returning","continue","includes"]},{"Key":"then returning","Fragments":["it,"]},{"Key":"returning it,","Fragments":["or"]},{"Key":"it, or","Fragments":["at","really"]},{"Key":"least making","Fragments":["input"]},{"Key":"making input","Fragments":["a"]},{"Key":"a reference.","Fragments":["Why","No","I","It","This","I"]},{"Key":"reference. Why","Fragments":["bother"]},{"Key":"Why bother","Fragments":["making"]},{"Key":"bother making","Fragments":["a"]},{"Key":"string (by","Fragments":["taking"]},{"Key":"(by taking","Fragments":["a"]},{"Key":"by-value parameter)","Fragments":["if"]},{"Key":"parameter) if","Fragments":["you're"]},{"Key":"you're just","Fragments":["going","doing"]},{"Key":"just going","Fragments":["to","to"]},{"Key":"copy it","Fragments":["again?","over","via","into"]},{"Key":"My version","Fragments":["is"]},{"Key":"version is","Fragments":["like","easier","slower","faster.","a","clearer"]},{"Key":"is like","Fragments":["halfway","what","1:40"]},{"Key":"like halfway","Fragments":["between"]},{"Key":"halfway between","Fragments":["your"]},{"Key":"between your","Fragments":["first","variable"]},{"Key":"first and","Fragments":["second","then","returning","third","using","(in","if","last"]},{"Key":"and second","Fragments":["revision,"]},{"Key":"second revision,","Fragments":["so"]},{"Key":"revision, so","Fragments":["you"]},{"Key":"know I","Fragments":["like","could","could","often","could","don't","could"]},{"Key":"like 'em","Fragments":[":)"]},{"Key":"One thing","Fragments":["you","I","that","you","to","to","that","to","I","I","though,"]},{"Key":"did better","Fragments":["than"]},{"Key":"I -","Fragments":["making"]},{"Key":"- making","Fragments":["nucleo_switch","it"]},{"Key":"making nucleo_switch","Fragments":["a"]},{"Key":"nucleo_switch a","Fragments":["separate"]},{"Key":"function allowed","Fragments":["you"]},{"Key":"allowed you","Fragments":["to"]},{"Key":"the ridiculous","Fragments":["cast"]},{"Key":"ridiculous cast","Fragments":["I"]},{"Key":"cast I","Fragments":["did"]},{"Key":"did to","Fragments":["select","store"]},{"Key":"to select","Fragments":["the","candidate"]},{"Key":"select the","Fragments":["char"]},{"Key":"char overload.","Fragments":["This"]},{"Key":"overload. This","Fragments":["is"]},{"Key":"an easier-to-read","Fragments":["approach"]},{"Key":"easier-to-read approach","Fragments":["and"]},{"Key":"after optimization","Fragments":["I'm"]},{"Key":"optimization I'm","Fragments":["willing"]},{"Key":"I'm willing","Fragments":["to","to"]},{"Key":"to bet","Fragments":["it's","that"]},{"Key":"bet it's","Fragments":["identical"]},{"Key":"it's identical","Fragments":["in"]},{"Key":"identical in","Fragments":["performance"]},{"Key":"in performance","Fragments":["(nucleo_switch","at"]},{"Key":"performance (nucleo_switch","Fragments":["will"]},{"Key":"(nucleo_switch will","Fragments":["likely"]},{"Key":"will likely","Fragments":["be","keep"]},{"Key":"inlined into","Fragments":["the"]},{"Key":"char overload).","Fragments":["Kudos."]},{"Key":"do actually","Fragments":["prefer"]},{"Key":"actually prefer","Fragments":["the","this","the"]},{"Key":"switch version,","Fragments":["though."]},{"Key":"version, though.","Fragments":["Could"]},{"Key":"though. Could","Fragments":["you"]},{"Key":"Could you","Fragments":["elaborate","elaborate?","give","please","give"]},{"Key":"you elaborate","Fragments":["on"]},{"Key":"elaborate on","Fragments":["your","how"]},{"Key":"your reasoning","Fragments":["for","behind"]},{"Key":"reasoning for","Fragments":["the"]},{"Key":"the change?","Fragments":["I"]},{"Key":"change? I","Fragments":["really"]},{"Key":"really think","Fragments":["the","it","that","of"]},{"Key":"switch would","Fragments":["perform","be"]},{"Key":"would perform","Fragments":["better","the","zero"]},{"Key":"perform better","Fragments":["with","on"]},{"Key":"better with","Fragments":["many","the","style"]},{"Key":"many cases","Fragments":["(though","and","where"]},{"Key":"cases (though","Fragments":["I"]},{"Key":"(though I","Fragments":["suppose","see"]},{"Key":"suppose one","Fragments":["could","could","could"]},{"Key":"could try","Fragments":["to","to","to","it"]},{"Key":"to measure),","Fragments":["so"]},{"Key":"measure), so","Fragments":["I"]},{"Key":"with readability?","Fragments":["I'm"]},{"Key":"readability? I'm","Fragments":["not"]},{"Key":"not entirely","Fragments":["convinced","sure"]},{"Key":"entirely convinced","Fragments":["it"]},{"Key":"convinced it","Fragments":["is","simplifies"]},{"Key":"see which","Fragments":["two"]},{"Key":"which two","Fragments":["characters"]},{"Key":"two characters","Fragments":["are","are"]},{"Key":"are on","Fragments":["the"]},{"Key":"same line","Fragments":["than"]},{"Key":"line than","Fragments":["the"]},{"Key":"same column,","Fragments":["but"]},{"Key":"column, but","Fragments":["maybe"]},{"Key":"but maybe","Fragments":["that's","not.","this"]},{"Key":"maybe that's","Fragments":["just"]},{"Key":"that's just","Fragments":["me.","not","my","me."]},{"Key":"just me.","Fragments":["But"]},{"Key":"me. But","Fragments":["the"]},{"Key":"But the","Fragments":["bigger","circumstances","makefile","```clock::minus```","getters","guy","test","simplest","conditions","new"]},{"Key":"the bigger","Fragments":["question..."]},{"Key":"bigger question...","Fragments":["do"]},{"Key":"question... do","Fragments":["you"]},{"Key":"you expect","Fragments":["them","to","to","in","large"]},{"Key":"expect them","Fragments":["to"]},{"Key":"them to","Fragments":["discover","copy","be","include","a","have.","get","the","the","avoid","get","other","other","something","upper","mark"]},{"Key":"to discover","Fragments":["many"]},{"Key":"discover many","Fragments":["more"]},{"Key":"many more","Fragments":["nucleotides","types"]},{"Key":"more nucleotides","Fragments":["in"]},{"Key":"nucleotides in","Fragments":["DNA","DNA","your"]},{"Key":"in DNA","Fragments":["or","and"]},{"Key":"DNA or","Fragments":["RNA"]},{"Key":"or RNA","Fragments":["that"]},{"Key":"RNA that","Fragments":["we"]},{"Key":"have not","Fragments":["yet","used","tried"]},{"Key":" Perhaps","Fragments":["you","verse","they","a","a","make"]},{"Key":"Perhaps you","Fragments":["should","meant","can"]},{"Key":"should consider","Fragments":["using","a","using","using","using","error"]},{"Key":"using map's","Fragments":["at"]},{"Key":"map's at","Fragments":["function"]},{"Key":"at function","Fragments":["rather","return"]},{"Key":"function rather","Fragments":["than","than","than","than"]},{"Key":"than its","Fragments":["[]"]},{"Key":"its []","Fragments":["operator."]},{"Key":"[] operator.","Fragments":["Unless"]},{"Key":"operator. Unless","Fragments":["you"]},{"Key":"Unless you","Fragments":["believe","really","have"]},{"Key":"you believe","Fragments":["that","input","it's"]},{"Key":"believe that","Fragments":["the","`#include","numbers","function","it","maintains","is","is","is","is","in","if"]},{"Key":"always 100%","Fragments":["guaranteed","obvious"]},{"Key":"100% guaranteed","Fragments":["to"]},{"Key":"be valid","Fragments":["(the"]},{"Key":"valid (the","Fragments":["results"]},{"Key":"(the results","Fragments":["of"]},{"Key":"of ['?']","Fragments":["are"]},{"Key":"['?'] are","Fragments":["not"]},{"Key":"not what","Fragments":["you","they","you","a","makes"]},{"Key":"you want).","Fragments":["It"]},{"Key":"want). It","Fragments":["would"]},{"Key":"also allow","Fragments":["your"]},{"Key":"allow your","Fragments":["transcript","code"]},{"Key":"your transcript","Fragments":["variable"]},{"Key":"transcript variable","Fragments":["to"]},{"Key":"const, since","Fragments":["you"]},{"Key":"wouldn't risk","Fragments":["modifying"]},{"Key":"risk modifying","Fragments":["it"]},{"Key":" @angelica","Fragments":["any"]},{"Key":"@angelica any","Fragments":["more"]},{"Key":"any more","Fragments":["comments","efficient","prime-factors","expensive","complicated","than"]},{"Key":"comments on","Fragments":["this?","my","readability","this"]},{"Key":"right. `int","Fragments":["i"]},{"Key":"`int i","Fragments":["="]},{"Key":"= 0`","Fragments":["must","after"]},{"Key":"0` must","Fragments":["be"]},{"Key":"be on","Fragments":["autopilot.","the","some"]},{"Key":" Done","Fragments":["primarily"]},{"Key":"Done primarily","Fragments":["in"]},{"Key":"primarily in","Fragments":["C"]},{"Key":"C for","Fragments":["simplicity"]},{"Key":"for simplicity","Fragments":["and"]},{"Key":"simplicity and","Fragments":["performance.","verbosity"]},{"Key":"Any use","Fragments":["of"]},{"Key":"of C++","Fragments":["added","I","I","is","I","are","i","'nice'","stipulate","advantages"]},{"Key":"C++ added","Fragments":["complexity"]},{"Key":"added complexity","Fragments":["and"]},{"Key":"memory allocations,","Fragments":["while","I"]},{"Key":"allocations, while","Fragments":["adding"]},{"Key":"while adding","Fragments":["nothing."]},{"Key":"It's going","Fragments":["to"]},{"Key":"be fun","Fragments":["trying"]},{"Key":"fun trying","Fragments":["to"]},{"Key":"to justify","Fragments":["this"]},{"Key":"justify this","Fragments":["one"]},{"Key":"one ☺.","Fragments":["I"]},{"Key":"☺. I","Fragments":["had"]},{"Key":"some decent","Fragments":["ideas,"]},{"Key":"decent ideas,","Fragments":["but"]},{"Key":"ideas, but","Fragments":["the"]},{"Key":"implementation ended","Fragments":["up"]},{"Key":"up being","Fragments":["a","as","called","the","wasteful","less","incredibly"]},{"Key":"Oops, I","Fragments":["left"]},{"Key":"left commented-out","Fragments":["dead"]},{"Key":"commented-out dead","Fragments":["code"]},{"Key":"dead code","Fragments":["in"]},{"Key":"code in","Fragments":["there.","C++","your","real","a","other","header","Coliru,","a","any","an","C,","the","1","my","`main()`?"]},{"Key":"in there.","Fragments":["That's","The"]},{"Key":"there. That's","Fragments":["bad"]},{"Key":"That's bad","Fragments":["form."]},{"Key":" Hey,","Fragments":["is","great","thanks","where","it's"]},{"Key":"Hey, is","Fragments":["anyone"]},{"Key":"is anyone","Fragments":["else"]},{"Key":"anyone else","Fragments":["bothered","do","stress"]},{"Key":"else bothered","Fragments":["by"]},{"Key":"bothered by","Fragments":["the"]},{"Key":"that not","Fragments":["only","very"]},{"Key":"not only","Fragments":["does","is","adhere","would","when","saying","ensures"]},{"Key":"only does","Fragments":["the","this","convince"]},{"Key":"test assume","Fragments":["these"]},{"Key":"assume these","Fragments":["numbers"]},{"Key":"these numbers","Fragments":["are"]},{"Key":"the US/Canada,","Fragments":["but"]},{"Key":"US/Canada, but","Fragments":["then"]},{"Key":"it requires","Fragments":["you"]},{"Key":"requires you","Fragments":["to","to"]},{"Key":"to format","Fragments":["them"]},{"Key":"format them","Fragments":["in"]},{"Key":"way that","Fragments":["only","it","wouldn't","you're","doesn't","you","you","I've"]},{"Key":"only makes","Fragments":["sense"]},{"Key":"sense inside","Fragments":["the"]},{"Key":"the US","Fragments":["and","or"]},{"Key":"US and","Fragments":["Canada?"]},{"Key":"and Canada?","Fragments":["It's"]},{"Key":"Canada? It's","Fragments":["2015,"]},{"Key":"It's 2015,","Fragments":["folks,"]},{"Key":"2015, folks,","Fragments":["why"]},{"Key":"folks, why","Fragments":["are"]},{"Key":"why are","Fragments":["we","you"]},{"Key":"are we","Fragments":["still"]},{"Key":"we still","Fragments":["clinging"]},{"Key":"still clinging","Fragments":["to"]},{"Key":"clinging to","Fragments":["obsolete"]},{"Key":"to obsolete","Fragments":["nationalistic"]},{"Key":"obsolete nationalistic","Fragments":["formatting?"]},{"Key":"nationalistic formatting?","Fragments":["That"]},{"Key":"formatting? That","Fragments":["number"]},{"Key":"That number","Fragments":["should"]},{"Key":"number should","Fragments":["be"]},{"Key":"be +1","Fragments":["123"]},{"Key":"+1 123","Fragments":["456"]},{"Key":"123 456","Fragments":["7890"]},{"Key":"456 7890","Fragments":["(assuming"]},{"Key":"7890 (assuming","Fragments":["it's"]},{"Key":"(assuming it's","Fragments":["in"]},{"Key":"US or","Fragments":["Canada,"]},{"Key":"or Canada,","Fragments":["but"]},{"Key":"Canada, but","Fragments":["at"]},{"Key":"least now","Fragments":["we're"]},{"Key":"now we're","Fragments":["trying"]},{"Key":"we're trying","Fragments":["to"]},{"Key":"Why use","Fragments":["ss","`i`","things"]},{"Key":"use ss","Fragments":["and"]},{"Key":"ss and","Fragments":["str"]},{"Key":"and str","Fragments":["in"]},{"Key":"str in","Fragments":["the"]},{"Key":"the constructor?","Fragments":["cleaned_number"]},{"Key":"constructor? cleaned_number","Fragments":["can"]},{"Key":"cleaned_number can","Fragments":["do"]},{"Key":"that without","Fragments":["creating"]},{"Key":"without creating","Fragments":["separate","a"]},{"Key":"creating separate","Fragments":["buffers."]},{"Key":"separate buffers.","Fragments":["(it"]},{"Key":"buffers. (it","Fragments":["would"]},{"Key":"(it would","Fragments":["be"]},{"Key":"be push_back","Fragments":["instead"]},{"Key":"push_back instead","Fragments":["of"]},{"Key":"of \u003c\u003c).","Fragments":["That"]},{"Key":"\u003c\u003c). That","Fragments":["would"]},{"Key":"also let","Fragments":["you","me"]},{"Key":"let you","Fragments":["get","know","know"]},{"Key":"get more","Fragments":["efficient","structured","consistency","feedback"]},{"Key":"efficient in","Fragments":["the","terms"]},{"Key":"if :","Fragments":["cleaned_number.erase("]},{"Key":": cleaned_number.erase(","Fragments":["cleaned_number.begin()"]},{"Key":"cleaned_number.erase( cleaned_number.begin()","Fragments":[");"]},{"Key":"constructor argument","Fragments":["number","to","could"]},{"Key":"argument number","Fragments":["could"]},{"Key":"number could","Fragments":["be"]},{"Key":"That first","Fragments":["loop"]},{"Key":"first loop","Fragments":["looks"]},{"Key":"loop looks","Fragments":["a"]},{"Key":"lot like","Fragments":["std::copy_if.","the","accumulate."]},{"Key":"to mark","Fragments":["your","word"]},{"Key":"mark your","Fragments":["conversion"]},{"Key":"your conversion","Fragments":["operator"]},{"Key":"operator std::string()","Fragments":["as"]},{"Key":"std::string() as","Fragments":["explicit."]},{"Key":"the straightforward,","Fragments":["clean"]},{"Key":"straightforward, clean","Fragments":["implementation"]},{"Key":"clean implementation","Fragments":["and"]},{"Key":"implementation and","Fragments":["the","this","being"]},{"Key":"the nice","Fragments":["doxy","side"]},{"Key":"nice doxy","Fragments":["comments."]},{"Key":"of move","Fragments":["semantics","that"]},{"Key":"semantics in","Fragments":["the"]},{"Key":"constructor. I","Fragments":["almost"]},{"Key":"I almost","Fragments":["criticized","always","began","forgot","went"]},{"Key":"almost criticized","Fragments":["having"]},{"Key":"criticized having","Fragments":["two"]},{"Key":"two writable","Fragments":["strings"]},{"Key":"writable strings","Fragments":["on-hand,"]},{"Key":"strings on-hand,","Fragments":["until"]},{"Key":"on-hand, until","Fragments":["I"]},{"Key":"realized what","Fragments":["was"]},{"Key":"going on","Fragments":["and","with"]},{"Key":"on and","Fragments":["how"]},{"Key":"grow out","Fragments":["of","of"]},{"Key":"of old","Fragments":["habits."]},{"Key":"old habits.","Fragments":["We"]},{"Key":"habits. We","Fragments":["live"]},{"Key":"We live","Fragments":["in"]},{"Key":"live in","Fragments":["a","its"]},{"Key":"curious about","Fragments":["your","your","the","ways","whether"]},{"Key":"your choice","Fragments":["to"]},{"Key":"choice to","Fragments":["handle","copy"]},{"Key":"the stripping","Fragments":["of","of"]},{"Key":"stripping of","Fragments":["the","the"]},{"Key":"the '1'","Fragments":["in"]},{"Key":"'1' in","Fragments":["number()"]},{"Key":"in number()","Fragments":["rather"]},{"Key":"number() rather","Fragments":["than"]},{"Key":"constructor. It","Fragments":["strikes"]},{"Key":"It strikes","Fragments":["me"]},{"Key":"strikes me","Fragments":["as"]},{"Key":"as odd","Fragments":["for"]},{"Key":"odd for","Fragments":["a"]},{"Key":"would've used","Fragments":["the"]},{"Key":"function substr","Fragments":["to"]},{"Key":"substr to","Fragments":["strip"]},{"Key":"strip it","Fragments":["in"]},{"Key":"It means","Fragments":["a","if"]},{"Key":"a leading","Fragments":["'1'"]},{"Key":"leading '1'","Fragments":["could"]},{"Key":"'1' could","Fragments":["end"]},{"Key":"could end","Fragments":["up","up"]},{"Key":"return from","Fragments":["area_code()","grade","`downcase()`,","that.","the"]},{"Key":"* The","Fragments":["test","for","length"]},{"Key":"test could","Fragments":["end"]},{"Key":"up happening","Fragments":["more"]},{"Key":"happening more","Fragments":["than"]},{"Key":"than once","Fragments":["per","in"]},{"Key":"once per","Fragments":["object,"]},{"Key":"per object,","Fragments":["whereas"]},{"Key":"object, whereas","Fragments":["the"]},{"Key":"whereas the","Fragments":["constructor"]},{"Key":"constructor will","Fragments":["happen","be","be"]},{"Key":"will happen","Fragments":["exactly"]},{"Key":"happen exactly","Fragments":["once."]},{"Key":"recommend marking","Fragments":["your"]},{"Key":"marking your","Fragments":["operator"]},{"Key":"your operator","Fragments":["string()"]},{"Key":"operator string()","Fragments":["as","and"]},{"Key":"string() as","Fragments":["explicit."]},{"Key":"No offense,","Fragments":["but"]},{"Key":"offense, but","Fragments":["your"]},{"Key":"comment just","Fragments":["sounds"]},{"Key":"just sounds","Fragments":["like"]},{"Key":"sounds like","Fragments":["an"]},{"Key":"an excuse","Fragments":["for"]},{"Key":"excuse for","Fragments":["not"]},{"Key":"not doing","Fragments":["it","that.","any","low"]},{"Key":"C++ because","Fragments":["you're","I","I"]},{"Key":"because you're","Fragments":["more","moving","using","currently","wrapping"]},{"Key":"you're more","Fragments":["familiar"]},{"Key":"more familiar","Fragments":["with","to"]},{"Key":"don't agree,","Fragments":["that"]},{"Key":"agree, that","Fragments":["the"]},{"Key":"simple because","Fragments":["it's"]},{"Key":"C. It's","Fragments":["low-level"]},{"Key":"It's low-level","Fragments":["but"]},{"Key":"low-level but","Fragments":["not"]},{"Key":" Addressing","Fragments":["points"]},{"Key":"Addressing points","Fragments":["from"]},{"Key":"points from","Fragments":["the"]},{"Key":" *How","Fragments":["does","readable"]},{"Key":"*How does","Fragments":["the"]},{"Key":"code make","Fragments":["use"]},{"Key":"of C++?*","Fragments":["It"]},{"Key":"C++?* It","Fragments":["does"]},{"Key":"does not,","Fragments":["but","however,","it","it"]},{"Key":"not, but","Fragments":["that's"]},{"Key":"whole point","Fragments":["of"]},{"Key":"*How readable","Fragments":["is"]},{"Key":"readable is","Fragments":["the","a"]},{"Key":"the code?*","Fragments":["The"]},{"Key":"code?* The","Fragments":["`hey()`"]},{"Key":"The `hey()`","Fragments":["function"]},{"Key":"`hey()` function","Fragments":["is"]},{"Key":"very clear","Fragments":["to","implementation.","implementation,"]},{"Key":"clear to","Fragments":["me","me","me","me"]},{"Key":"me but","Fragments":["the","gosh,"]},{"Key":"rest not","Fragments":["easy"]},{"Key":"not easy","Fragments":["to"]},{"Key":"code looks","Fragments":["clear","great,","much","great.","pretty","pretty","acceptable.","great.","cleaner"]},{"Key":"looks clear","Fragments":["to"]},{"Key":"me and","Fragments":["can"]},{"Key":"be easily","Fragments":["understood.","converted","readable.","confused","rewritten"]},{"Key":"easily understood.","Fragments":["A"]},{"Key":"understood. A","Fragments":["few"]},{"Key":"few questions/comments","Fragments":["though:"]},{"Key":" 0.","Fragments":["Why","the","Importing","Using","The","The","Are","If","Also,"]},{"Key":"0. Why","Fragments":["did"]},{"Key":"choose `boost::regex`","Fragments":["over"]},{"Key":"`boost::regex` over","Fragments":["`std::regex`?"]},{"Key":"over `std::regex`?","Fragments":["Are"]},{"Key":"`std::regex`? Are","Fragments":["there"]},{"Key":"Are there","Fragments":["specific"]},{"Key":"there specific","Fragments":["differences"]},{"Key":"specific differences","Fragments":["you're"]},{"Key":"differences you're","Fragments":["exploiting"]},{"Key":"you're exploiting","Fragments":["here?"]},{"Key":"exploiting here?","Fragments":["I"]},{"Key":"here? I","Fragments":["can"]},{"Key":"that `regex_match`","Fragments":["only"]},{"Key":"`regex_match` only","Fragments":["takes"]},{"Key":"takes 2","Fragments":["parameters;"]},{"Key":"2 parameters;","Fragments":["is"]},{"Key":"parameters; is","Fragments":["it"]},{"Key":"0. the","Fragments":["`regYelling`"]},{"Key":"the `regYelling`","Fragments":["expression,"]},{"Key":"`regYelling` expression,","Fragments":["could"]},{"Key":"expression, could","Fragments":["use"]},{"Key":"an explaining","Fragments":["comment,"]},{"Key":"explaining comment,","Fragments":["but"]},{"Key":"comment, but","Fragments":["this"]},{"Key":"this could","Fragments":["as","have","be","be","possibly","be"]},{"Key":"could as","Fragments":["well"]},{"Key":"well be","Fragments":["me"]},{"Key":"me not","Fragments":["using","being"]},{"Key":"using regexes","Fragments":["in"]},{"Key":"regexes in","Fragments":["every","their"]},{"Key":"in every","Fragments":["day","compilation","language","case.","situation,","iteration,"]},{"Key":"every day","Fragments":["work."]},{"Key":"0. Importing","Fragments":["namespaces"]},{"Key":"Importing namespaces","Fragments":["into"]},{"Key":"namespaces into","Fragments":["the"]},{"Key":"not good","Fragments":["style.","practice"]},{"Key":"0. Using","Fragments":["a"]},{"Key":"struct with","Fragments":["named"]},{"Key":"with named","Fragments":["members"]},{"Key":"named members","Fragments":["instead"]},{"Key":"members instead","Fragments":["of"]},{"Key":"a `std::pair`","Fragments":["could"]},{"Key":"`std::pair` could","Fragments":["be"]},{"Key":"to clarify","Fragments":["the","a"]},{"Key":"clarify the","Fragments":["content","meanings"]},{"Key":"the content","Fragments":["of","of","of","of","of","is","of","of"]},{"Key":"content of","Fragments":["`hey()`'s","that","message.rend()","the","a","the","for"]},{"Key":"of `hey()`'s","Fragments":["loop,"]},{"Key":"`hey()`'s loop,","Fragments":["e.g.:"]},{"Key":" if(boost::regex_match(speach,","Fragments":["chat.pattern))"]},{"Key":"did go","Fragments":["for"]},{"Key":"go for","Fragments":["the","signalling","a","it","code"]},{"Key":"path of","Fragments":["least"]},{"Key":"least resistance","Fragments":["this"]},{"Key":"resistance this","Fragments":["time,"]},{"Key":"time, but","Fragments":["I","it"]},{"Key":"started down","Fragments":["a","a"]},{"Key":"down a","Fragments":["different","road","character"]},{"Key":"different path","Fragments":["and"]},{"Key":"path and","Fragments":["forgot"]},{"Key":"will stand","Fragments":["by"]},{"Key":"stand by","Fragments":["my"]},{"Key":"by my","Fragments":["use"]},{"Key":"my use","Fragments":["of","of"]},{"Key":"of std::string","Fragments":["here,","but","and","is"]},{"Key":"std::string here,","Fragments":["though."]},{"Key":"here, though.","Fragments":["I"]},{"Key":"though. I","Fragments":["could've","don't"]},{"Key":"could've gotten","Fragments":["away"]},{"Key":"gotten away","Fragments":["with"]},{"Key":"with holding","Fragments":["string_ref"]},{"Key":"holding string_ref","Fragments":["in"]},{"Key":"string_ref in","Fragments":["my"]},{"Key":"my collection,","Fragments":["but"]},{"Key":"collection, but","Fragments":["that's"]},{"Key":"that's not","Fragments":["a","what","simple","making","quite","going","a","the","such","the"]},{"Key":"reasonable or","Fragments":["realistic"]},{"Key":"or realistic","Fragments":["usage"]},{"Key":"realistic usage","Fragments":["for"]},{"Key":"usage for","Fragments":["real"]},{"Key":"for real","Fragments":["life"]},{"Key":"real life","Fragments":["-","problem","problem."]},{"Key":"life -","Fragments":["it's"]},{"Key":"just too","Fragments":["burdensome","tired"]},{"Key":"too burdensome","Fragments":["to"]},{"Key":"burdensome to","Fragments":["assume"]},{"Key":"assume all","Fragments":["the"]},{"Key":"will outlive","Fragments":["the"]},{"Key":"Using std::move","Fragments":["is"]},{"Key":"std::move is","Fragments":["almost"]},{"Key":"almost certainly","Fragments":["a","be"]},{"Key":"certainly a","Fragments":["mistake,","good"]},{"Key":"a mistake,","Fragments":["and"]},{"Key":"mistake, and","Fragments":["often"]},{"Key":"and often","Fragments":["is"]},{"Key":"often is","Fragments":["-"]},{"Key":"is -","Fragments":["if"]},{"Key":"really useful","Fragments":["the"]},{"Key":"useful the","Fragments":["compiler"]},{"Key":"to tell.","Fragments":["In"]},{"Key":"tell. In","Fragments":["this"]},{"Key":"that your","Fragments":["object","individual","solution","suggested","solution","end","`count_words`","object","functions","loop","helper","total"]},{"Key":"your object","Fragments":["is","isn't"]},{"Key":"is left","Fragments":["in","over","to"]},{"Key":"left in","Fragments":["an","from","a"]},{"Key":"an unpredictable","Fragments":["(probably"]},{"Key":"unpredictable (probably","Fragments":["safe"]},{"Key":"(probably safe","Fragments":["but"]},{"Key":"safe but","Fragments":["wrong)"]},{"Key":"but wrong)","Fragments":["state"]},{"Key":"wrong) state","Fragments":["after"]},{"Key":"state after","Fragments":["those"]},{"Key":"after those","Fragments":["function"]},{"Key":"those function","Fragments":["calls,"]},{"Key":"function calls,","Fragments":["because"]},{"Key":"calls, because","Fragments":["you're"]},{"Key":"you're moving","Fragments":["out"]},{"Key":"moving out","Fragments":["of"]},{"Key":"your internal","Fragments":["data","map"]},{"Key":"internal data","Fragments":["structures."]},{"Key":"you're maintaining","Fragments":["the"]},{"Key":"maintaining the","Fragments":["collections","invariants","code..."]},{"Key":"the collections","Fragments":["internally"]},{"Key":"collections internally","Fragments":["anyhow,"]},{"Key":"internally anyhow,","Fragments":["you"]},{"Key":"anyhow, you","Fragments":["could"]},{"Key":"could return","Fragments":["from","directly"]},{"Key":"from grade","Fragments":["and"]},{"Key":"grade and","Fragments":["roster","roster.","pull"]},{"Key":"and roster","Fragments":["by"]},{"Key":"roster by","Fragments":["reference,"]},{"Key":"reference, e.g.","Fragments":["stringVec"]},{"Key":"e.g. stringVec","Fragments":["const\u0026"]},{"Key":"stringVec const\u0026","Fragments":["grade("]},{"Key":"const\u0026 grade(","Fragments":["int"]},{"Key":"grade( int","Fragments":[").","i"]},{"Key":"int ).","Fragments":["That"]},{"Key":"). That","Fragments":["would"]},{"Key":"than moving,","Fragments":["but"]},{"Key":"moving, but","Fragments":["more"]},{"Key":"but more","Fragments":["importantly","general."]},{"Key":"more importantly","Fragments":["it","the","the"]},{"Key":"importantly it","Fragments":["would"]},{"Key":"would maintain","Fragments":["a"]},{"Key":"maintain a","Fragments":["correct","separate"]},{"Key":"a correct","Fragments":["state"]},{"Key":"correct state","Fragments":["for"]},{"Key":"state for","Fragments":["repeated"]},{"Key":"for repeated","Fragments":["calls"]},{"Key":"to grade","Fragments":["and","and/or"]},{"Key":"specify inline","Fragments":["on"]},{"Key":"inline on","Fragments":["functions"]},{"Key":"on functions","Fragments":["declared","defined","and","and"]},{"Key":"functions declared","Fragments":["inside"]},{"Key":"declared inside","Fragments":["their"]},{"Key":"inside their","Fragments":["class"]},{"Key":"their class","Fragments":["declaration"]},{"Key":"class declaration","Fragments":["-","is","and"]},{"Key":"declaration -","Fragments":["in"]},{"Key":"- in","Fragments":["fact"]},{"Key":"in fact","Fragments":["you","re-writing","there","`\"Fine.","an"]},{"Key":"fact you","Fragments":["can't"]},{"Key":"you can't","Fragments":["make","use","use","use","see","declare","use","remember"]},{"Key":"can't make","Fragments":["them"]},{"Key":"them not","Fragments":["inline.","to"]},{"Key":" Typedefing","Fragments":["stringVec"]},{"Key":"Typedefing stringVec","Fragments":["twice"]},{"Key":"stringVec twice","Fragments":["but"]},{"Key":"twice but","Fragments":["at"]},{"Key":"at different","Fragments":["scopes"]},{"Key":"different scopes","Fragments":["seems"]},{"Key":"scopes seems","Fragments":["confusing."]},{"Key":"seems confusing.","Fragments":["I'd"]},{"Key":"confusing. I'd","Fragments":["probably"]},{"Key":"I'd probably","Fragments":["refer"]},{"Key":"probably refer","Fragments":["to"]},{"Key":"refer to","Fragments":["school::stringVec","some","an","a","valid","a","a","Iteration","lines","all","this"]},{"Key":"to school::stringVec","Fragments":["in"]},{"Key":"school::stringVec in","Fragments":["the"]},{"Key":"the .cpp,","Fragments":["but"]},{"Key":".cpp, but","Fragments":["another","exercism.io"]},{"Key":"but another","Fragments":["option"]},{"Key":"another option","Fragments":["would","would"]},{"Key":"move it","Fragments":["out","into"]},{"Key":"into just","Fragments":["the"]},{"Key":"the .h.","Fragments":["Yet"]},{"Key":".h. Yet","Fragments":["another"]},{"Key":"Yet another","Fragments":["option"]},{"Key":"using school::stringVec;","Fragments":["inside"]},{"Key":"school::stringVec; inside","Fragments":["the"]},{"Key":".cpp which","Fragments":["is"]},{"Key":"odd but","Fragments":["I"]},{"Key":"it less","Fragments":["confusing"]},{"Key":"less confusing","Fragments":["because"]},{"Key":"confusing because","Fragments":["it"]},{"Key":"it indicates","Fragments":["the"]},{"Key":"indicates the","Fragments":["presence","intent"]},{"Key":"the presence","Fragments":["of","of","of"]},{"Key":"presence of","Fragments":["the","any","a","lower"]},{"Key":"Maybe roster","Fragments":["or"]},{"Key":"roster or","Fragments":["grade"]},{"Key":"or grade","Fragments":["could"]},{"Key":"grade could","Fragments":["be"]},{"Key":"be const","Fragments":["functions","and","which","references."]},{"Key":"const functions","Fragments":["and/or"]},{"Key":"functions and/or","Fragments":["return"]},{"Key":"and/or return","Fragments":["by"]},{"Key":"How did","Fragments":["this","you","the"]},{"Key":"test case?","Fragments":["There's"]},{"Key":"case? There's","Fragments":["an"]},{"Key":"There's an","Fragments":["obvious"]},{"Key":"an obvious","Fragments":["bug.","omission.","difference."]},{"Key":" Shouldn't","Fragments":["roster"]},{"Key":"Shouldn't roster","Fragments":["be"]},{"Key":"roster be","Fragments":["simply"]},{"Key":"simply return","Fragments":["roster_?","the","a","the","false."]},{"Key":"return roster_?","Fragments":["std::map"]},{"Key":"roster_? std::map","Fragments":["knows"]},{"Key":"std::map knows","Fragments":["how"]},{"Key":"knows how","Fragments":["to"]},{"Key":"Yeah, OK,","Fragments":["I"]},{"Key":"OK, I","Fragments":["have"]},{"Key":"it rightish","Fragments":["before"]},{"Key":"rightish before","Fragments":["I"]},{"Key":"I whine.","Fragments":["Sorry"]},{"Key":"whine. Sorry","Fragments":["'bout"]},{"Key":"Sorry 'bout","Fragments":["that."]},{"Key":"'bout that.","Fragments":["Still"]},{"Key":"that. Still","Fragments":["not"]},{"Key":"Still not","Fragments":["sure"]},{"Key":"got it","Fragments":["to","now.","to"]},{"Key":"pass before.","Fragments":["I'm"]},{"Key":"before. I'm","Fragments":["thinking"]},{"Key":"I'm thinking","Fragments":["when","that","of","of","of","to"]},{"Key":"thinking when","Fragments":["I"]},{"Key":"the #ifdef","Fragments":["down"]},{"Key":"#ifdef down","Fragments":["in"]},{"Key":"down in","Fragments":["the","favor"]},{"Key":"save before","Fragments":["rebuilding"]},{"Key":"before rebuilding","Fragments":["\u0026"]},{"Key":"rebuilding \u0026","Fragments":["rerunning."]},{"Key":" Yes","Fragments":["thank","you","it","I"]},{"Key":"Yes thank","Fragments":["you."]},{"Key":"the `operator","Fragments":["string()`"]},{"Key":"`operator string()`","Fragments":["and","does"]},{"Key":"string()` and","Fragments":["the"]},{"Key":"But did","Fragments":["not"]},{"Key":"use `substr`","Fragments":["because"]},{"Key":"`substr` because","Fragments":["that"]},{"Key":"would create","Fragments":["a"]},{"Key":"and instead","Fragments":["used","change","having","use"]},{"Key":"instead used","Fragments":["`erase`"]},{"Key":"used `erase`","Fragments":["because"]},{"Key":"`erase` because","Fragments":["that"]},{"Key":"only erases","Fragments":["from"]},{"Key":"erases from","Fragments":["the"]},{"Key":"current string","Fragments":["without"]},{"Key":"string without","Fragments":["creating","changing"]},{"Key":"your feedback,","Fragments":["TrophyNinjaShrub","@mandy."]},{"Key":"this specific","Fragments":["case","problem,","case"]},{"Key":"specific case","Fragments":["(","the"]},{"Key":"case (","Fragments":["nucleotides"]},{"Key":"( nucleotides","Fragments":["in"]},{"Key":"DNA and","Fragments":["RNA)"]},{"Key":"and RNA)","Fragments":["the"]},{"Key":"RNA) the","Fragments":["switch"]},{"Key":"switch version","Fragments":["work"]},{"Key":"version work","Fragments":["perfectly."]},{"Key":"work perfectly.","Fragments":["But"]},{"Key":"perfectly. But","Fragments":["I"]},{"Key":"would argue,","Fragments":["that"]},{"Key":"argue, that","Fragments":["in","it"]},{"Key":"case of,","Fragments":["let's"]},{"Key":"of, let's","Fragments":["say"]},{"Key":"let's say","Fragments":["a","I","I'm"]},{"Key":"say a","Fragments":["hundred"]},{"Key":"a hundred","Fragments":["cases,"]},{"Key":"hundred cases,","Fragments":["the"]},{"Key":"cases, the","Fragments":["second"]},{"Key":"second version","Fragments":["I","by"]},{"Key":"version I","Fragments":["wrote","did","use","avoid"]},{"Key":"wrote would","Fragments":["be"]},{"Key":"faster to","Fragments":["write","just"]},{"Key":"and less","Fragments":["prone","maintenance","clear","error","in","realistically","about"]},{"Key":"less prone","Fragments":["to"]},{"Key":"prone to","Fragments":["errors.","use"]},{"Key":" Yep,","Fragments":["erase","that's"]},{"Key":"Yep, erase","Fragments":["is"]},{"Key":"erase is","Fragments":["even"]},{"Key":"Something I","Fragments":["noticed,","forget"]},{"Key":"I noticed,","Fragments":["though:"]},{"Key":" phone_number","Fragments":["n(\"\");"]},{"Key":" n.area_code();//copies","Fragments":["three"]},{"Key":"n.area_code();//copies three","Fragments":["bytes"]},{"Key":"three bytes","Fragments":["of"]},{"Key":"bytes of","Fragments":["illegal"]},{"Key":"of illegal","Fragments":["memory,"]},{"Key":"illegal memory,","Fragments":["right?"]},{"Key":"By the","Fragments":["way,","way,","use","way,","way,","way,"]},{"Key":"the way,","Fragments":["std::less","trim_copy","keep","it's","and","but","a.cpp","how","is"]},{"Key":"way, std::less","Fragments":["is"]},{"Key":"std::less is","Fragments":["what's"]},{"Key":"is what's","Fragments":["used","come"]},{"Key":"what's used","Fragments":["if"]},{"Key":"used if","Fragments":["you"]},{"Key":"the three-argument","Fragments":["version"]},{"Key":"three-argument version","Fragments":["of"]},{"Key":"of lower_bound...","Fragments":["it's"]},{"Key":"lower_bound... it's","Fragments":["kind"]},{"Key":"it's kind","Fragments":["of","of"]},{"Key":"default. Makes","Fragments":["no"]},{"Key":"Makes no","Fragments":["difference"]},{"Key":"difference whatsoever,","Fragments":["I"]},{"Key":"whatsoever, I","Fragments":["just"]},{"Key":"just thought","Fragments":["it","I'd","it"]},{"Key":"was worth","Fragments":["mentioning","mentioning"]},{"Key":"worth mentioning","Fragments":["that","that","-","that","are"]},{"Key":"mentioning that","Fragments":["you","if","auto"]},{"Key":"you *could*","Fragments":["skip"]},{"Key":"*could* skip","Fragments":["that"]},{"Key":"skip that","Fragments":["argument"]},{"Key":"that argument","Fragments":["if"]},{"Key":"argument if","Fragments":["you","access"]},{"Key":" Hi,","Fragments":["first","just","I","a","thank"]},{"Key":"Hi, first","Fragments":["of"]},{"Key":"first of","Fragments":["all,"]},{"Key":"of all,","Fragments":["thanks","I","and"]},{"Key":"all, thanks","Fragments":["for"]},{"Key":" \u003cli\u003eI","Fragments":["wanted","think"]},{"Key":"\u003cli\u003eI wanted","Fragments":["to"]},{"Key":"this problem","Fragments":["using","and","in","as","a","use","was","but","other","nicely.","(by"]},{"Key":"using boost","Fragments":["(just","for","for","and","because"]},{"Key":"boost (just","Fragments":["to"]},{"Key":"(just to","Fragments":["practice)."]},{"Key":"to practice).","Fragments":["But"]},{"Key":"practice). But","Fragments":["it's"]},{"Key":"it's true","Fragments":["that","and","and"]},{"Key":"true that","Fragments":["with","there's","with","distances"]},{"Key":"that with","Fragments":["my","auto","either","the"]},{"Key":"with my","Fragments":["sophisticated","usual","current","solution","thinking","character","class","machine."]},{"Key":"my sophisticated","Fragments":[":)"]},{"Key":"sophisticated :)","Fragments":["use"]},{"Key":":) use","Fragments":["of"]},{"Key":"of regular","Fragments":["expression,","expressions"]},{"Key":"regular expression,","Fragments":["i","but"]},{"Key":"expression, i","Fragments":["could"]},{"Key":"have use","Fragments":["std.\u003c/li\u003e"]},{"Key":" \u003cli\u003eHa!","Fragments":["Yes..."]},{"Key":"\u003cli\u003eHa! Yes...","Fragments":["I"]},{"Key":"Yes... I","Fragments":["should"]},{"Key":"have commented","Fragments":["others","out"]},{"Key":"commented others","Fragments":["too."]},{"Key":"others too.","Fragments":["I"]},{"Key":"did in","Fragments":["the"]},{"Key":"next exercise.","Fragments":["I"]},{"Key":"exercise. I","Fragments":["will","will"]},{"Key":"to explain","Fragments":["you:","its","my","here."]},{"Key":"- ```[\\^a-z]*```","Fragments":[":"]},{"Key":"```[\\^a-z]*``` :","Fragments":["anything"]},{"Key":": anything","Fragments":["which"]},{"Key":"anything which","Fragments":["is"]},{"Key":"not lowercase","Fragments":["letters,","letters.\u003c/li\u003e"]},{"Key":"lowercase letters,","Fragments":["0,","however"]},{"Key":"letters, 0,","Fragments":["1"]},{"Key":"0, 1","Fragments":["or"]},{"Key":"or n","Fragments":["times.","times."]},{"Key":"- ```[A-Z]+```","Fragments":[":"]},{"Key":"```[A-Z]+``` :","Fragments":["only"]},{"Key":": only","Fragments":["uppercase"]},{"Key":"only uppercase","Fragments":["letters"]},{"Key":"uppercase letters","Fragments":["1"]},{"Key":"letters 1","Fragments":["or"]},{"Key":" Thus,","Fragments":["my"]},{"Key":"Thus, my","Fragments":["regex"]},{"Key":"my regex","Fragments":["means","is,","isn't"]},{"Key":"regex means","Fragments":[":"]},{"Key":"means :","Fragments":["uppercase"]},{"Key":": uppercase","Fragments":["letters,"]},{"Key":"uppercase letters,","Fragments":["with","they're","it's"]},{"Key":"letters, with","Fragments":["anything"]},{"Key":"with anything","Fragments":["you","that","that's"]},{"Key":"anything you","Fragments":["want","need."]},{"Key":"want before","Fragments":["or"]},{"Key":"before or","Fragments":["after","after"]},{"Key":"or after","Fragments":["which","the"]},{"Key":"after which","Fragments":["is"]},{"Key":" \u003cli\u003eEntirely","Fragments":["true,"]},{"Key":"\u003cli\u003eEntirely true,","Fragments":["i"]},{"Key":"true, i","Fragments":["will"]},{"Key":"i will","Fragments":["remove","get","get","end"]},{"Key":"will remove","Fragments":["them"]},{"Key":"remove them","Fragments":["and"]},{"Key":"and repush","Fragments":["the"]},{"Key":"repush the","Fragments":["file"]},{"Key":"file later,","Fragments":["my"]},{"Key":"later, my","Fragments":["bad...\u003c/li\u003e"]},{"Key":" \u003cli\u003eYes,","Fragments":["i"]},{"Key":"\u003cli\u003eYes, i","Fragments":["was"]},{"Key":"i was","Fragments":["wondering","just","just","using"]},{"Key":"wondering too.","Fragments":["I"]},{"Key":"with you,","Fragments":["but","``::tolower``"]},{"Key":"you, but","Fragments":["as"]},{"Key":"simple, and","Fragments":["the"]},{"Key":"the ```list_of```","Fragments":["declaration"]},{"Key":"```list_of``` declaration","Fragments":["not"]},{"Key":"declaration not","Fragments":["so"]},{"Key":"so far,","Fragments":["i"]},{"Key":"far, i","Fragments":["chose"]},{"Key":"i chose","Fragments":["not"]},{"Key":"chose not","Fragments":["to"]},{"Key":"a struct.","Fragments":["People","So,"]},{"Key":"struct. People","Fragments":["can"]},{"Key":"People can","Fragments":["see"]},{"Key":"what string","Fragments":["(.first)"]},{"Key":"string (.first)","Fragments":["and"]},{"Key":"(.first) and","Fragments":["boost::regex"]},{"Key":"and boost::regex","Fragments":["(.second)"]},{"Key":"boost::regex (.second)","Fragments":["refer"]},{"Key":"(.second) refer","Fragments":["to.\u003c/li\u003e"]},{"Key":"Regarding point","Fragments":["4"]},{"Key":"point 4","Fragments":["I"]},{"Key":"4 I","Fragments":["agree,"]},{"Key":"I agree,","Fragments":["it's","these","I","but","the","and"]},{"Key":"agree, it's","Fragments":["insignificant,"]},{"Key":"it's insignificant,","Fragments":["as"]},{"Key":"insignificant, as","Fragments":["the"]},{"Key":"the full","Fragments":["code","power","suite.","source","text."]},{"Key":"full code","Fragments":["fits"]},{"Key":"code fits","Fragments":["on"]},{"Key":"fits on","Fragments":["a"]},{"Key":"single screen","Fragments":["page."]},{"Key":"just started","Fragments":["this"]},{"Key":"started this","Fragments":["yesterday","it"]},{"Key":"this yesterday","Fragments":["and"]},{"Key":"yesterday and","Fragments":["I"]},{"Key":"guess my","Fragments":["\"nit"]},{"Key":"my \"nit","Fragments":["picking\""]},{"Key":"\"nit picking\"","Fragments":["was"]},{"Key":"picking\" was","Fragments":["a"]},{"Key":"too ambitious","Fragments":[":-)"]},{"Key":"Don't worry,","Fragments":["i"]},{"Key":"worry, i","Fragments":["always"]},{"Key":"i always","Fragments":["appreciate","got","forget"]},{"Key":"always appreciate","Fragments":["when"]},{"Key":"appreciate when","Fragments":["people"]},{"Key":"people discuss","Fragments":["about"]},{"Key":"discuss about","Fragments":["my"]},{"Key":"about my","Fragments":["code","performance."]},{"Key":"my code","Fragments":[";)","will","has","I","shows","shows","could","nicer.","as","shows","that","and","is","around","more","lacks","which","in","and","to"]},{"Key":" Btw,","Fragments":["i"]},{"Key":"Btw, i","Fragments":["pushed"]},{"Key":"i pushed","Fragments":["another"]},{"Key":"pushed another","Fragments":["version."]},{"Key":" Agree,","Fragments":["fixed"]},{"Key":"Agree, fixed","Fragments":["that."]},{"Key":"think switch","Fragments":["statement"]},{"Key":"the BOOST_FOREACH","Fragments":["is"]},{"Key":"BOOST_FOREACH is","Fragments":["a"]},{"Key":"idea. It","Fragments":["would","looks"]},{"Key":"would silently","Fragments":["drop"]},{"Key":"silently drop","Fragments":["any"]},{"Key":"drop any","Fragments":["unexpected"]},{"Key":"any unexpected","Fragments":["characters"]},{"Key":"unexpected characters","Fragments":["in"]},{"Key":"characters in","Fragments":["the","the","natural","the","the","a","a","the","the","the","both","the","both","isUpper(I"]},{"Key":"was such","Fragments":["a"]},{"Key":"a requirement,","Fragments":["this"]},{"Key":"requirement, this","Fragments":["would"]},{"Key":"great solution,","Fragments":["but"]},{"Key":"solution, but","Fragments":["otherwise","as","it","in","I","I"]},{"Key":"but otherwise","Fragments":["it"]},{"Key":"otherwise it","Fragments":["is","increments"]},{"Key":"just concealing","Fragments":["the"]},{"Key":"concealing the","Fragments":["problem."]},{"Key":"Interesting 'classify-oriented'","Fragments":["code."]},{"Key":"Some comments","Fragments":["though"]},{"Key":"comments though","Fragments":[":"]},{"Key":" \u003cli\u003eWhat","Fragments":["is"]},{"Key":"\u003cli\u003eWhat is","Fragments":["the"]},{"Key":"the 'R'","Fragments":["in"]},{"Key":"'R' in","Fragments":["```endsInquestionMark```"]},{"Key":"in ```endsInquestionMark```","Fragments":["declaration"]},{"Key":"```endsInquestionMark``` declaration","Fragments":["?"]},{"Key":"declaration ?","Fragments":["(line"]},{"Key":"? (line","Fragments":["20)\u003c/li\u003e"]},{"Key":" \u003cli\u003eTo","Fragments":["me,"]},{"Key":"\u003cli\u003eTo me,","Fragments":["you"]},{"Key":"me, you","Fragments":["can"]},{"Key":"do more","Fragments":["efficient.","or"]},{"Key":"more efficient.","Fragments":["If"]},{"Key":"efficient. If","Fragments":["you"]},{"Key":"you see","Fragments":["at","it","an","anagram::anagram,"]},{"Key":"see at","Fragments":["global"]},{"Key":"at global","Fragments":["view,","scope"]},{"Key":"global view,","Fragments":["you"]},{"Key":"view, you","Fragments":["do"]},{"Key":"do 2","Fragments":["```if/switch```","iterations"]},{"Key":"2 ```if/switch```","Fragments":["statements:"]},{"Key":"```if/switch``` statements:","Fragments":["one"]},{"Key":"statements: one","Fragments":["in"]},{"Key":"in ```classify```","Fragments":["(if/else),"]},{"Key":"```classify``` (if/else),","Fragments":["one"]},{"Key":"(if/else), one","Fragments":["in"]},{"Key":"in ```hey```","Fragments":["(switch/case)."]},{"Key":"```hey``` (switch/case).","Fragments":["However,"]},{"Key":"(switch/case). However,","Fragments":["i"]},{"Key":"However, i","Fragments":["think"]},{"Key":"separate ```hey```","Fragments":["and"]},{"Key":"```hey``` and","Fragments":["```classify```."]},{"Key":"and ```classify```.","Fragments":["If"]},{"Key":"```classify```. If","Fragments":["the"]},{"Key":"goal is","Fragments":["efficiency,","to","to"]},{"Key":"is efficiency,","Fragments":["classify"]},{"Key":"efficiency, classify","Fragments":["should"]},{"Key":"classify should","Fragments":["return"]},{"Key":"should return","Fragments":["directly","const","const\u0026?","0,","a","false."]},{"Key":"return directly","Fragments":["strings.","the"]},{"Key":"directly strings.","Fragments":["If"]},{"Key":"strings. If","Fragments":["you"]},{"Key":"you aim","Fragments":["to"]},{"Key":"aim to","Fragments":["write"]},{"Key":"write scalable","Fragments":["software,"]},{"Key":"scalable software,","Fragments":["your"]},{"Key":"software, your","Fragments":["code"]},{"Key":"\u003cli\u003eI think","Fragments":["it's"]},{"Key":"better if","Fragments":["strings","the","you","that","it","you"]},{"Key":"if strings","Fragments":["are"]},{"Key":"are static","Fragments":["const","functions?"]},{"Key":"Excellent point,","Fragments":["fixed"]},{"Key":"point, fixed","Fragments":["that."]},{"Key":" Phew,","Fragments":["caught"]},{"Key":"Phew, caught","Fragments":["my"]},{"Key":"caught my","Fragments":["bug","bug"]},{"Key":"my bug","Fragments":["before","before"]},{"Key":"bug before","Fragments":["y'all","you"]},{"Key":"before y'all","Fragments":["did,"]},{"Key":"y'all did,","Fragments":["and"]},{"Key":"did, and","Fragments":["I"]},{"Key":"added an","Fragments":["intrusive","extra"]},{"Key":"an intrusive","Fragments":["test","pointer."]},{"Key":"intrusive test","Fragments":["because"]},{"Key":"test because","Fragments":["verifying"]},{"Key":"because verifying","Fragments":["that"]},{"Key":"verifying that","Fragments":["sort"]},{"Key":"that sort","Fragments":["of","and"]},{"Key":"thing definitively","Fragments":["through"]},{"Key":"definitively through","Fragments":["the"]},{"Key":"public interface","Fragments":["is","then","for","you"]},{"Key":"interface is","Fragments":["pretty"]},{"Key":"pretty much","Fragments":["impossible.","every","build","never","an","what","any","one","makes","anything","every","a","behave","everywhere","everything.","turned","guarenteed","requires","a","exactly"]},{"Key":"Also not","Fragments":["shown:","in"]},{"Key":"not shown:","Fragments":["I"]},{"Key":"shown: I","Fragments":["updated"]},{"Key":"I updated","Fragments":["the"]},{"Key":"suite so","Fragments":["that"]},{"Key":"would store","Fragments":["local"]},{"Key":"store local","Fragments":["variables"]},{"Key":"local variables","Fragments":["in","have","const"]},{"Key":"variables in","Fragments":["std::string,","`classify()`?","a","a","the","each","a"]},{"Key":"in std::string,","Fragments":["not"]},{"Key":"std::string, not","Fragments":["auto.","std::string\u0026"]},{"Key":"not auto.","Fragments":["Storing"]},{"Key":"auto. Storing","Fragments":["a"]},{"Key":"pointer into","Fragments":["internal"]},{"Key":"into internal","Fragments":["memory"]},{"Key":"internal memory","Fragments":["didn't"]},{"Key":"memory didn't","Fragments":["have"]},{"Key":"didn't have","Fragments":["the","the","a","the","to","access","to","to","a"]},{"Key":"the semantics","Fragments":["desired","of"]},{"Key":"semantics desired","Fragments":["-"]},{"Key":"desired -","Fragments":["they"]},{"Key":"they couldn't","Fragments":["compare"]},{"Key":"couldn't compare","Fragments":["against"]},{"Key":"compare against","Fragments":["what","both"]},{"Key":"against what","Fragments":["the"]},{"Key":"name used","Fragments":["to"]},{"Key":"It's worth","Fragments":["noting","mentioning","a"]},{"Key":"worth noting","Fragments":["that"]},{"Key":"noting that","Fragments":["the","the"]},{"Key":"the README.md","Fragments":["seems"]},{"Key":"README.md seems","Fragments":["to"]},{"Key":"to hint","Fragments":["at"]},{"Key":"hint at","Fragments":["generating","an"]},{"Key":"at generating","Fragments":["the"]},{"Key":"name in","Fragments":["name().","the","the"]},{"Key":"in name().","Fragments":["This"]},{"Key":"name(). This","Fragments":["seems"]},{"Key":"me, because","Fragments":["then","it"]},{"Key":"because then","Fragments":["name()","it","you're","it's","`s`"]},{"Key":"then name()","Fragments":["can't"]},{"Key":"name() can't","Fragments":["be"]},{"Key":"and logically","Fragments":["it's"]},{"Key":"logically it's","Fragments":["not"]},{"Key":"not changing","Fragments":["anything","the","the"]},{"Key":"changing anything","Fragments":["about"]},{"Key":"anything about","Fragments":["the","the"]},{"Key":"be logically","Fragments":["const."]},{"Key":"logically const.","Fragments":["The"]},{"Key":"const. The","Fragments":["only","const_iterator"]},{"Key":"only \"observable\"","Fragments":["change"]},{"Key":"\"observable\" change","Fragments":["to"]},{"Key":"change to","Fragments":["the","\"improve\"","```++accum```.","that","a","unsigned"]},{"Key":"the interface","Fragments":["I","and","would"]},{"Key":"interface I","Fragments":["actually"]},{"Key":"actually made","Fragments":["is","a"]},{"Key":"made is","Fragments":["in"]},{"Key":"a robot","Fragments":["whose"]},{"Key":"robot whose","Fragments":["name"]},{"Key":"whose name","Fragments":["is"]},{"Key":"never asked","Fragments":["-"]},{"Key":"asked -","Fragments":["he'd"]},{"Key":"- he'd","Fragments":["still"]},{"Key":"he'd still","Fragments":["consume"]},{"Key":"still consume","Fragments":["entropy."]},{"Key":"consume entropy.","Fragments":["But"]},{"Key":"entropy. But","Fragments":["if"]},{"Key":"doing that","Fragments":["it","aren't","in"]},{"Key":"seems strange","Fragments":["to","to"]},{"Key":"class at","Fragments":["all,","all?","a"]},{"Key":"be doing","Fragments":["nothing.","if"]},{"Key":"doing nothing.","Fragments":["As"]},{"Key":"nothing. As","Fragments":["for"]},{"Key":"for consuming","Fragments":["entropy"]},{"Key":"consuming entropy","Fragments":["-"]},{"Key":"entropy -","Fragments":["I"]},{"Key":"feel pretty","Fragments":["awful"]},{"Key":"pretty awful","Fragments":["about"]},{"Key":"awful about","Fragments":["this,"]},{"Key":"this, by","Fragments":["the"]},{"Key":"the way.","Fragments":["But","Feel"]},{"Key":"way. But","Fragments":["it's","I"]},{"Key":"more \"right\"","Fragments":["then"]},{"Key":"\"right\" then","Fragments":["basing"]},{"Key":"then basing","Fragments":["it,"]},{"Key":"basing it,","Fragments":["by"]},{"Key":"it, by","Fragments":["default,"]},{"Key":"by default,","Fragments":["on","so","but","but"]},{"Key":"default, on","Fragments":["something"]},{"Key":"on something","Fragments":["like","I","that"]},{"Key":"like std::time(nullptr)+getpid().","Fragments":["I"]},{"Key":"std::time(nullptr)+getpid(). I","Fragments":["provided"]},{"Key":"I provided","Fragments":["the"]},{"Key":"provided the","Fragments":["other"]},{"Key":"other constructor","Fragments":["so"]},{"Key":"constructor so","Fragments":["you","there's"]},{"Key":"of std::random_device()","Fragments":["if"]},{"Key":"std::random_device() if","Fragments":["you"]},{"Key":"a suitable","Fragments":["source"]},{"Key":"suitable source","Fragments":["of"]},{"Key":"source of","Fragments":["pseudorandomness.","trouble","random","bugs."]},{"Key":"of pseudorandomness.","Fragments":["I"]},{"Key":"pseudorandomness. I","Fragments":["did"]},{"Key":"did consider","Fragments":["having"]},{"Key":"consider having","Fragments":["globals","detail::multiple_sums"]},{"Key":"having globals","Fragments":["handle"]},{"Key":"globals handle","Fragments":["this,"]},{"Key":"handle this,","Fragments":["but"]},{"Key":"this, but","Fragments":["I'd","I","then","surely","I'm","my","I'm","wondering","in"]},{"Key":"I'd want","Fragments":["it","to"]},{"Key":"be thread","Fragments":["safe"]},{"Key":"thread safe","Fragments":["and"]},{"Key":"safe and","Fragments":["thread"]},{"Key":"and thread","Fragments":["local"]},{"Key":"thread local","Fragments":["stuff"]},{"Key":"local stuff","Fragments":["is"]},{"Key":"stuff is","Fragments":["expensive,","the"]},{"Key":"is expensive,","Fragments":["so"]},{"Key":"expensive, so","Fragments":["I"]},{"Key":"just pushed","Fragments":["the"]},{"Key":"pushed the","Fragments":["handling"]},{"Key":"the handling","Fragments":["of"]},{"Key":"handling of","Fragments":["all"]},{"Key":"that stuff","Fragments":["unto"]},{"Key":"stuff unto","Fragments":["the"]},{"Key":"unto the","Fragments":["caller,"]},{"Key":"the caller,","Fragments":["basically."]},{"Key":"would've returned","Fragments":["a"]},{"Key":"returned a","Fragments":["string_ref","boost::sliced_range","`regex_iterator`","string"]},{"Key":"from name,","Fragments":["but"]},{"Key":"but regex","Fragments":["doesn't"]},{"Key":"regex doesn't","Fragments":["know"]},{"Key":"doesn't know","Fragments":["what","that"]},{"Key":"with them","Fragments":["yet","than","and","while","and"]},{"Key":"them yet","Fragments":["and"]},{"Key":"yet and","Fragments":["I"]},{"Key":"keep my","Fragments":["changes"]},{"Key":"my changes","Fragments":["to","and"]},{"Key":"changes to","Fragments":["the","improve:","the"]},{"Key":"suite as","Fragments":["minimal","well"]},{"Key":"as minimal","Fragments":["as"]},{"Key":"minimal as","Fragments":["possible."]},{"Key":"possible. const","Fragments":["char*"]},{"Key":"char* is","Fragments":["actually"]},{"Key":"for length-agnostic","Fragments":["purposes"]},{"Key":"length-agnostic purposes","Fragments":["anyhow,"]},{"Key":"purposes anyhow,","Fragments":["because"]},{"Key":"anyhow, because","Fragments":["it's"]},{"Key":"it's half","Fragments":["the"]},{"Key":"for internal","Fragments":["representation,"]},{"Key":"internal representation,","Fragments":["yeah"]},{"Key":"representation, yeah","Fragments":["using"]},{"Key":"yeah using","Fragments":["a"]},{"Key":"std::string for","Fragments":["the","your","example"]},{"Key":"name would","Fragments":["be","improve","be"]},{"Key":"be totally","Fragments":["reasonable."]},{"Key":"totally reasonable.","Fragments":["The"]},{"Key":"reasonable. The","Fragments":["standard"]},{"Key":"standard requires","Fragments":["SSO","the"]},{"Key":"requires SSO","Fragments":["and"]},{"Key":"SSO and","Fragments":["5"]},{"Key":"and 5","Fragments":["bytes","count"]},{"Key":"5 bytes","Fragments":["will"]},{"Key":"bytes will","Fragments":["be"]},{"Key":"be \"small\"","Fragments":["on"]},{"Key":"\"small\" on","Fragments":["every"]},{"Key":"every platform.","Fragments":["There's"]},{"Key":"platform. There's","Fragments":["a"]},{"Key":"There's a","Fragments":["number","trailing","C++","remote","semantic","big"]},{"Key":"of statically-capacitied","Fragments":["string"]},{"Key":"statically-capacitied string","Fragments":["implementations"]},{"Key":"string implementations","Fragments":["running"]},{"Key":"implementations running","Fragments":["about,"]},{"Key":"running about,","Fragments":["though,"]},{"Key":"about, though,","Fragments":["and"]},{"Key":"though, and","Fragments":["they","maybe"]},{"Key":"and they","Fragments":["would","don't","made","are"]},{"Key":"better because","Fragments":["you'd","these"]},{"Key":"because you'd","Fragments":["use"]},{"Key":"you'd use","Fragments":["less"]},{"Key":"less memory","Fragments":["and"]},{"Key":"get to","Fragments":["avoid","begin","my","know","begin","begin"]},{"Key":"and omit","Fragments":["code"]},{"Key":"omit code","Fragments":["regarding"]},{"Key":"code regarding","Fragments":["reallocation"]},{"Key":"regarding reallocation","Fragments":["-"]},{"Key":"reallocation -","Fragments":["don't"]},{"Key":"- don't","Fragments":["pay"]},{"Key":"don't pay","Fragments":["for","for"]},{"Key":"pay for","Fragments":["what","what"]},{"Key":"for what","Fragments":["you","you","I","I","it"]},{"Key":"don't use.","Fragments":["But"]},{"Key":"use. But","Fragments":["in"]},{"Key":"case we","Fragments":["can","really"]},{"Key":"do even","Fragments":["better:"]},{"Key":"even better:","Fragments":["not"]},{"Key":"better: not","Fragments":["only"]},{"Key":"only is","Fragments":["the"]},{"Key":"the capacity","Fragments":["known"]},{"Key":"capacity known","Fragments":["at"]},{"Key":"time, its","Fragments":["size"]},{"Key":"its size","Fragments":["is.","doesn't"]},{"Key":"size is.","Fragments":["And"]},{"Key":"is. And","Fragments":["that's"]},{"Key":"And that's","Fragments":["why","even","just","enough","enough","why","why"]},{"Key":"that's why","Fragments":["I","I","it","I"]},{"Key":"went for","Fragments":["a","template","count_if","the","a","the"]},{"Key":"good ol'","Fragments":["char"]},{"Key":"ol' char","Fragments":["array."]},{"Key":"of wc_shift.","Fragments":["I"]},{"Key":"wc_shift. I","Fragments":["mean,"]},{"Key":"mean, the","Fragments":["concept"]},{"Key":"the concept","Fragments":["seems","now"]},{"Key":"concept seems","Fragments":["fine,"]},{"Key":"seems fine,","Fragments":["but"]},{"Key":"fine, but","Fragments":["doesn't","a","I'd","I'm"]},{"Key":"but doesn't","Fragments":["that","do","really"]},{"Key":"doesn't that","Fragments":["code"]},{"Key":"code look","Fragments":["kind","more","less"]},{"Key":"look kind","Fragments":["of"]},{"Key":"of ugly?","Fragments":["What"]},{"Key":"ugly? What","Fragments":["do"]},{"Key":"think would","Fragments":["be","be"]},{"Key":"considered having","Fragments":["functions"]},{"Key":"having functions","Fragments":["to"]},{"Key":"to give","Fragments":["names","it","this","you","bob","you","nitpicks","a","the","some","a","them","\"priorities\"","stringstreams","a"]},{"Key":"give names","Fragments":["to"]},{"Key":"names to","Fragments":["the","reflect","make","an"]},{"Key":"different iterators.","Fragments":["Their"]},{"Key":"iterators. Their","Fragments":["bodies"]},{"Key":"Their bodies","Fragments":["would"]},{"Key":"bodies would","Fragments":["basically"]},{"Key":"would basically","Fragments":["be"]},{"Key":"return std::next(","Fragments":["name_.begin(),"]},{"Key":"std::next( name_.begin(),","Fragments":["2"]},{"Key":"name_.begin(), 2","Fragments":[");"]},{"Key":"and so","Fragments":["on.","that's","on.","on.","on.","it","on.","on.","that","by","it"]},{"Key":"so on.","Fragments":["Is","That's","Since","That"]},{"Key":"on. Is","Fragments":["it"]},{"Key":"Is it","Fragments":["worth","possible","necessary?","better","better","possible","acceptable"]},{"Key":"it worth","Fragments":["it?"]},{"Key":"worth it?","Fragments":["What"]},{"Key":"it? What","Fragments":["do"]},{"Key":"test makes","Fragments":["it"]},{"Key":"it seem","Fragments":["that"]},{"Key":"seem that","Fragments":["the","great"]},{"Key":"first two","Fragments":["characters","positions.","functions"]},{"Key":"just uppercase","Fragments":["letters,","letters,"]},{"Key":"letters, they're","Fragments":["any"]},{"Key":"they're any","Fragments":["\"word"]},{"Key":"any \"word","Fragments":["chars\"."]},{"Key":"\"word chars\".","Fragments":["A-Z,"]},{"Key":"chars\". A-Z,","Fragments":["a-z,"]},{"Key":"A-Z, a-z,","Fragments":["0-9,"]},{"Key":"a-z, 0-9,","Fragments":["_."]},{"Key":"0-9, _.","Fragments":["No"]},{"Key":"_. No","Fragments":["need"]},{"Key":"to restrict","Fragments":["the","it","yourself"]},{"Key":"restrict the","Fragments":["names"]},{"Key":"names this","Fragments":["much."]},{"Key":" rand()","Fragments":["has"]},{"Key":"rand() has","Fragments":["serious"]},{"Key":"has serious","Fragments":["problems."]},{"Key":"serious problems.","Fragments":["My"]},{"Key":"problems. My","Fragments":["biggest"]},{"Key":"My biggest","Fragments":["issue","problem","nitpick"]},{"Key":"biggest issue","Fragments":["is","were","is"]},{"Key":"isn't threadsafe.","Fragments":["And"]},{"Key":"threadsafe. And","Fragments":["you're"]},{"Key":"And you're","Fragments":["assuming"]},{"Key":"you're assuming","Fragments":["someone"]},{"Key":"assuming someone","Fragments":["else"]},{"Key":"else called","Fragments":["srand"]},{"Key":"called srand","Fragments":["for","first,"]},{"Key":"srand for","Fragments":["you."]},{"Key":"for you.","Fragments":["There's","This","I"]},{"Key":"you. There's","Fragments":["also"]},{"Key":"There's also","Fragments":["the","a","the"]},{"Key":"also the","Fragments":["issue","theory"]},{"Key":"the issue","Fragments":["that","you","with"]},{"Key":"issue that","Fragments":["just","would"]},{"Key":"just taking","Fragments":["a"]},{"Key":"a %","Fragments":["like"]},{"Key":"% like","Fragments":["this"]},{"Key":"doesn't give","Fragments":["you"]},{"Key":"a uniform","Fragments":["distribution,","distribution.","distribution"]},{"Key":"uniform distribution,","Fragments":["(earlier"]},{"Key":"distribution, (earlier","Fragments":["characters"]},{"Key":"(earlier characters","Fragments":["will"]},{"Key":"characters will","Fragments":["be"]},{"Key":"more probable)","Fragments":["but"]},{"Key":"probable) but","Fragments":["I"]},{"Key":"the excersize","Fragments":["didn't"]},{"Key":"excersize didn't","Fragments":["really"]},{"Key":"really demand","Fragments":["a"]},{"Key":"demand a","Fragments":["uniform"]},{"Key":"std::string name;","Fragments":["is"]},{"Key":"name; is","Fragments":["the"]},{"Key":"as std::string","Fragments":["name{\"\"};","convert;"]},{"Key":"std::string name{\"\"};","Fragments":["and"]},{"Key":"name{\"\"}; and","Fragments":["cleaner,"]},{"Key":"and cleaner,","Fragments":["IMO."]},{"Key":"to enforce","Fragments":["no"]},{"Key":"enforce no","Fragments":["collisions"]},{"Key":"no collisions","Fragments":["(I"]},{"Key":"collisions (I","Fragments":["didn't"]},{"Key":"it said","Fragments":["we","that"]},{"Key":"said we","Fragments":["had"]},{"Key":"we had","Fragments":["to),"]},{"Key":"had to),","Fragments":["I'd"]},{"Key":"to), I'd","Fragments":["recommend"]},{"Key":"recommend a","Fragments":["bloom","range-based"]},{"Key":"filter or","Fragments":["something"]},{"Key":"or something","Fragments":["else","which","like","like","like","similar","else.","like","similar."]},{"Key":"something else","Fragments":["that's","from"]},{"Key":"else that's","Fragments":["more"]},{"Key":"that's more","Fragments":["performant"]},{"Key":"than what","Fragments":["you're","they","exists","you"]},{"Key":"said, vector","Fragments":["isn't"]},{"Key":"vector isn't","Fragments":["bad."]},{"Key":"isn't bad.","Fragments":["But"]},{"Key":"bad. But","Fragments":["you"]},{"Key":"But you","Fragments":["should","still","don't","don't","might"]},{"Key":"should decide","Fragments":["if"]},{"Key":"decide if","Fragments":["it's","you","a"]},{"Key":"it's sorted","Fragments":["or"]},{"Key":"sorted or","Fragments":["not."]},{"Key":"not. Right","Fragments":["now"]},{"Key":"now you're","Fragments":["paying"]},{"Key":"you're paying","Fragments":["the","for"]},{"Key":"paying the","Fragments":["extra","performance"]},{"Key":"extra cost","Fragments":["to"]},{"Key":"cost to","Fragments":["keep","the"]},{"Key":"it sorted","Fragments":["with"]},{"Key":"sorted with","Fragments":["lower_bound"]},{"Key":"with lower_bound","Fragments":["(rather"]},{"Key":"lower_bound (rather","Fragments":["than"]},{"Key":"(rather than","Fragments":["just","what","use","trim_copy)","the","the"]},{"Key":"just push","Fragments":["back)"]},{"Key":"push back)","Fragments":["but"]},{"Key":"back) but","Fragments":["not"]},{"Key":"not relying","Fragments":["on","on"]},{"Key":"relying on","Fragments":["that","its","it","default","-1LL","the","a"]},{"Key":"on that","Fragments":["when","would","case.","using","the","string.","particular","though.","yet"]},{"Key":"that when","Fragments":["you","iterating","I","you're"]},{"Key":"you go","Fragments":["to","the","with","with"]},{"Key":"go to","Fragments":["look"]},{"Key":"look it","Fragments":["up","up!","up."]},{"Key":"the linear,","Fragments":["full"]},{"Key":"linear, full","Fragments":["scan"]},{"Key":"full scan","Fragments":["of"]},{"Key":"of std::find.","Fragments":["There's"]},{"Key":"std::find. There's","Fragments":["good"]},{"Key":"There's good","Fragments":["arguments"]},{"Key":"good arguments","Fragments":["to"]},{"Key":"go either","Fragments":["way,","way"]},{"Key":"either way,","Fragments":["but","computing","just","so"]},{"Key":"way, but","Fragments":["not","it","the"]},{"Key":"your implementation.","Fragments":["It's","I","What"]},{"Key":"implementation. It's","Fragments":["similar"]},{"Key":"It's similar","Fragments":["to"]},{"Key":"to mine","Fragments":["in"]},{"Key":"mine in","Fragments":["a"]},{"Key":"of ways","Fragments":["(including","to","to"]},{"Key":"ways (including","Fragments":["the"]},{"Key":"(including the","Fragments":["up-front"]},{"Key":"the up-front","Fragments":["approach),"]},{"Key":"up-front approach),","Fragments":["but"]},{"Key":"approach), but","Fragments":["your"]},{"Key":"of stringstream","Fragments":["seems"]},{"Key":"stringstream seems","Fragments":["intuitive"]},{"Key":"seems intuitive","Fragments":["and"]},{"Key":"intuitive and","Fragments":["reasonable."]},{"Key":" Based","Fragments":["on"]},{"Key":"Based on","Fragments":["my","the"]},{"Key":"my reading","Fragments":["of"]},{"Key":"reading of","Fragments":["the"]},{"Key":"test suite,","Fragments":["it's","so","but","but","if","`hey`","you"]},{"Key":"suite, it's","Fragments":["not"]},{"Key":"letters, it's","Fragments":["any"]},{"Key":"it's any","Fragments":["\\w"]},{"Key":"any \\w","Fragments":["-"]},{"Key":"\\w -","Fragments":["so"]},{"Key":"so lower","Fragments":["case,"]},{"Key":"lower case,","Fragments":["digits,","and"]},{"Key":"case, digits,","Fragments":["and"]},{"Key":"digits, and","Fragments":["_"]},{"Key":"and _","Fragments":["are"]},{"Key":"_ are","Fragments":["all"]},{"Key":"are all","Fragments":["allowed"]},{"Key":"all allowed","Fragments":["in"]},{"Key":"allowed in","Fragments":["the"]},{"Key":"two positions.","Fragments":["I"]},{"Key":"positions. I","Fragments":["also"]},{"Key":"also think","Fragments":["that","about","that","that","it","that","the","it"]},{"Key":"that leading","Fragments":["zeros"]},{"Key":"leading zeros","Fragments":["are","are"]},{"Key":"zeros are","Fragments":["allowed","not"]},{"Key":"are allowed","Fragments":["on"]},{"Key":"allowed on","Fragments":["the"]},{"Key":"second part:","Fragments":["00000"]},{"Key":"part: 00000","Fragments":["is"]},{"Key":"00000 is","Fragments":["completely"]},{"Key":"is completely","Fragments":["valid."]},{"Key":"completely valid.","Fragments":["So"]},{"Key":"valid. So","Fragments":["I"]},{"Key":"would think","Fragments":["your","that's","the","this","keeping"]},{"Key":"think your","Fragments":["three_digit_number","trim","solution","code","code","code","size()","code","code","code","implementation","test","solution","solution","compiler"]},{"Key":"your three_digit_number","Fragments":["should"]},{"Key":"three_digit_number should","Fragments":["be"]},{"Key":"range [0,999]","Fragments":["(and"]},{"Key":"[0,999] (and","Fragments":["then"]},{"Key":"(and then","Fragments":["use"]},{"Key":"then use","Fragments":["std::setprecision","it"]},{"Key":"use std::setprecision","Fragments":["and"]},{"Key":"std::setprecision and","Fragments":["std::setfill"]},{"Key":"and std::setfill","Fragments":["from"]},{"Key":"std::setfill from","Fragments":["iomanip"]},{"Key":"from iomanip","Fragments":["header"]},{"Key":"iomanip header","Fragments":["to"]},{"Key":"header to","Fragments":["make","code?"]},{"Key":"sure leading","Fragments":["zeros"]},{"Key":"Maybe name","Fragments":["should"]},{"Key":"name should","Fragments":["return"]},{"Key":"return const","Fragments":["std::string\u0026","map\u0026?","iterators"]},{"Key":"That's an","Fragments":["interesting","interesting","interesting"]},{"Key":"an interesting","Fragments":["comment","take","point.","approach,","approach","implementation.","exercise","choice.","use","idea","container","introduction"]},{"Key":"interesting comment","Fragments":["block"]},{"Key":"comment block","Fragments":["-"]},{"Key":"block -","Fragments":["is"]},{"Key":"a TODO","Fragments":["or"]},{"Key":"TODO or","Fragments":["a"]},{"Key":" rand","Fragments":["is"]},{"Key":"rand is","Fragments":["not"]},{"Key":"not threadsafe,","Fragments":["it"]},{"Key":"threadsafe, it","Fragments":["relies"]},{"Key":"on someone","Fragments":["else"]},{"Key":"else having","Fragments":["called"]},{"Key":"having called","Fragments":["srand"]},{"Key":"srand first,","Fragments":["and"]},{"Key":"first, and","Fragments":["rand()%26","then","eh..."]},{"Key":"and rand()%26","Fragments":["is"]},{"Key":"rand()%26 is","Fragments":["not"]},{"Key":"uniform distribution","Fragments":["(lower"]},{"Key":"distribution (lower","Fragments":["numbers"]},{"Key":"(lower numbers","Fragments":["are"]},{"Key":"more probable).","Fragments":["Maybe"]},{"Key":"probable). Maybe","Fragments":["none"]},{"Key":"Maybe none","Fragments":["of"]},{"Key":"none of","Fragments":["that","the","the"]},{"Key":"but consider","Fragments":["using"]},{"Key":"the utilities","Fragments":["from"]},{"Key":"utilities from","Fragments":["the"]},{"Key":" newName","Fragments":["should"]},{"Key":"newName should","Fragments":["be"]},{"Key":"or in","Fragments":["an","an","an","an","other","modern","an"]},{"Key":"namespace (same","Fragments":["effect),"]},{"Key":"(same effect),","Fragments":["or"]},{"Key":"effect), or","Fragments":["if","(my"]},{"Key":"you intend","Fragments":["it"]},{"Key":"intend it","Fragments":["to"]},{"Key":"be part","Fragments":["of","of","of","of","of"]},{"Key":"interface then","Fragments":["forward"]},{"Key":"then forward","Fragments":["declare"]},{"Key":"forward declare","Fragments":["it"]},{"Key":"header. Surprising","Fragments":["people"]},{"Key":"Surprising people","Fragments":["at"]},{"Key":"people at","Fragments":["link"]},{"Key":"at link","Fragments":["time","time."]},{"Key":"link time","Fragments":["with"]},{"Key":"with duplicate","Fragments":["symbols"]},{"Key":"duplicate symbols","Fragments":["is"]},{"Key":"symbols is","Fragments":["not"]},{"Key":"not friendly,","Fragments":["and"]},{"Key":"friendly, and","Fragments":["letting"]},{"Key":"and letting","Fragments":["people","black","the"]},{"Key":"letting people","Fragments":["get"]},{"Key":"people get","Fragments":["away"]},{"Key":"with reaching","Fragments":["into"]},{"Key":"reaching into","Fragments":["your"]},{"Key":"into your","Fragments":["internals","loop","else"]},{"Key":"your internals","Fragments":["by"]},{"Key":"internals by","Fragments":["forward-declaring"]},{"Key":"by forward-declaring","Fragments":["it"]},{"Key":"forward-declaring it","Fragments":["in"]},{"Key":"in their","Fragments":["own","own","own","own","function"]},{"Key":"own source","Fragments":["file...","file"]},{"Key":"source file...","Fragments":["leads","so"]},{"Key":"file... leads","Fragments":["to"]},{"Key":"to chaos","Fragments":["(believe"]},{"Key":"chaos (believe","Fragments":["me:"]},{"Key":"(believe me:","Fragments":["I"]},{"Key":"me: I","Fragments":["worked"]},{"Key":"I worked","Fragments":["in","on"]},{"Key":"worked in","Fragments":["a"]},{"Key":"a place","Fragments":["where","that","like"]},{"Key":"place where","Fragments":["stealing","you","they"]},{"Key":"where stealing","Fragments":["functions"]},{"Key":"stealing functions","Fragments":["like"]},{"Key":"functions like","Fragments":["that","this","std::isalpha()","IsQuestion,","`isShouting`,","`isQuestion`","std::isalpha","std::strcmp","this."]},{"Key":"0. The","Fragments":["R","separation"]},{"Key":"The R","Fragments":["is"]},{"Key":"R is","Fragments":["a"]},{"Key":"a [string","Fragments":["literal](http://en.cppreference.com/w/cpp/language/string_literal),"]},{"Key":"[string literal](http://en.cppreference.com/w/cpp/language/string_literal),","Fragments":["meaning"]},{"Key":"literal](http://en.cppreference.com/w/cpp/language/string_literal), meaning","Fragments":["\"raw"]},{"Key":"meaning \"raw","Fragments":["string\"."]},{"Key":"\"raw string\".","Fragments":["I"]},{"Key":"string\". I","Fragments":["used"]},{"Key":"used it","Fragments":["to","for","correctly","before","to"]},{"Key":"to double","Fragments":["escape","check"]},{"Key":"double escape","Fragments":["the"]},{"Key":"escape the","Fragments":["'?'"]},{"Key":"the '?'","Fragments":["with","at","as"]},{"Key":"'?' with","Fragments":["\"\\\\\"."]},{"Key":"with \"\\\\\".","Fragments":["I'm"]},{"Key":"\"\\\\\". I'm","Fragments":["mostly"]},{"Key":"I'm mostly","Fragments":["stuck","coming","referring"]},{"Key":"mostly stuck","Fragments":["with"]},{"Key":"with C++03","Fragments":["so"]},{"Key":"C++03 so","Fragments":["my"]},{"Key":"so my","Fragments":["C++11","inclination","file"]},{"Key":"my C++11","Fragments":["experience"]},{"Key":"C++11 experience","Fragments":["is"]},{"Key":"experience is","Fragments":["thin."]},{"Key":"is thin.","Fragments":["This"]},{"Key":"thin. This","Fragments":["is"]},{"Key":"a thing","Fragments":["I","as","because"]},{"Key":"thing I","Fragments":["remembered","notice","hate","notice","might","thought","can","notice","would","would","noticed","was","keep","might","can","might","would","would"]},{"Key":"I remembered","Fragments":["reading","that"]},{"Key":"remembered reading","Fragments":["about"]},{"Key":"reading about","Fragments":["and"]},{"Key":"about and","Fragments":["figured","that"]},{"Key":"and figured","Fragments":["it'd","there","I"]},{"Key":"figured it'd","Fragments":["be"]},{"Key":"it'd be","Fragments":["a","x86/ARM/MIPS","worth"]},{"Key":"good oppurtunity","Fragments":["to"]},{"Key":"oppurtunity to","Fragments":["make"]},{"Key":"use of.","Fragments":["I"]},{"Key":"of. I","Fragments":["can't","also"]},{"Key":"really tell","Fragments":["if"]},{"Key":"more obscure","Fragments":["C++11"]},{"Key":"obscure C++11","Fragments":["features."]},{"Key":"The separation","Fragments":["of"]},{"Key":"of hey()","Fragments":["and"]},{"Key":"hey() and","Fragments":["and"]},{"Key":"and and","Fragments":["classify()"]},{"Key":"and classify()","Fragments":["is"]},{"Key":"classify() is","Fragments":["due"]},{"Key":"to how","Fragments":["I","I","it's","I","many","this"]},{"Key":"I approached","Fragments":["the","the"]},{"Key":"approached the","Fragments":["problem:","problem.","problem."]},{"Key":"the problem:","Fragments":["First","http://stackoverflow.com/questions/20531335/compilation-error-with-for-each-loop-in-c-vs2010"]},{"Key":"problem: First","Fragments":["I"]},{"Key":"First I","Fragments":["gathered"]},{"Key":"I gathered","Fragments":["Bob's","you"]},{"Key":"gathered Bob's","Fragments":["responses,"]},{"Key":"Bob's responses,","Fragments":["then"]},{"Key":"responses, then","Fragments":["it"]},{"Key":"just felt","Fragments":["natural"]},{"Key":"felt natural","Fragments":["to"]},{"Key":"natural to","Fragments":["classify","me,"]},{"Key":"to classify","Fragments":["the","the"]},{"Key":"classify the","Fragments":["input.","input."]},{"Key":"I kept","Fragments":["it","failing","the","the"]},{"Key":"kept it","Fragments":["as"]},{"Key":"statement because","Fragments":["of"]},{"Key":"the few","Fragments":["cases."]},{"Key":"few cases.","Fragments":["A"]},{"Key":"cases. A","Fragments":["table-driven"]},{"Key":"A table-driven","Fragments":["approach"]},{"Key":"table-driven approach","Fragments":["where"]},{"Key":"the response","Fragments":["and","but","with","will","constants","on","strings","function","without","function."]},{"Key":"response and","Fragments":["its","replace"]},{"Key":"its regex","Fragments":["are"]},{"Key":"regex are","Fragments":["tied","simply"]},{"Key":"are tied","Fragments":["together"]},{"Key":"tied together","Fragments":["in"]},{"Key":"together in","Fragments":["one"]},{"Key":"one place","Fragments":["would","where","so","(i.e.,"]},{"Key":"place would","Fragments":["scale"]},{"Key":"would scale","Fragments":["better"]},{"Key":"scale better","Fragments":["but"]},{"Key":"better but","Fragments":["I"]},{"Key":"I honestly","Fragments":["didn't","don't","had","think"]},{"Key":"honestly didn't","Fragments":["have"]},{"Key":"the ambition","Fragments":["to"]},{"Key":"ambition to","Fragments":["find"]},{"Key":"single regex","Fragments":["for"]},{"Key":"regex for","Fragments":["each","me!","mine,","this","each","the","the","\"asking","\"shouting\"","`NOTYELLING`,"]},{"Key":"each input","Fragments":["type.","case"]},{"Key":"input type.","Fragments":["It","Here,"]},{"Key":"type. It","Fragments":["nearly"]},{"Key":"It nearly","Fragments":["went"]},{"Key":"nearly went","Fragments":["nuts"]},{"Key":"went nuts","Fragments":["when"]},{"Key":"nuts when","Fragments":["changes"]},{"Key":"when changes","Fragments":["for"]},{"Key":"changes for","Fragments":["making","whatever"]},{"Key":"for making","Fragments":["the","my","the"]},{"Key":"last few","Fragments":["tests"]},{"Key":"few tests","Fragments":["pass"]},{"Key":"tests pass","Fragments":["kept","as"]},{"Key":"pass kept","Fragments":["on"]},{"Key":"kept on","Fragments":["breaking"]},{"Key":"on breaking","Fragments":["previous"]},{"Key":"breaking previous","Fragments":["ones"]},{"Key":"previous ones","Fragments":["so"]},{"Key":"ones so","Fragments":["I"]},{"Key":"as verbose","Fragments":["as"]},{"Key":"verbose as","Fragments":["this"]},{"Key":"get my","Fragments":["thoughts"]},{"Key":"my thoughts","Fragments":["straight."]},{"Key":"thoughts straight.","Fragments":["I"]},{"Key":"straight. I","Fragments":["was"]},{"Key":"just happy","Fragments":["that"]},{"Key":"tests finally","Fragments":["passed."]},{"Key":"0. Are","Fragments":["you"]},{"Key":"Are you","Fragments":["referring","missing","actually","looking","looking","guaranteed","attempting","still"]},{"Key":"you referring","Fragments":["to"]},{"Key":"referring to","Fragments":["the","the","though","specific","Scott"]},{"Key":"the `std::regex`","Fragments":["variables"]},{"Key":"`std::regex` variables","Fragments":["in"]},{"Key":"in `classify()`?","Fragments":["I"]},{"Key":"`classify()`? I","Fragments":["agree,"]},{"Key":"agree, these","Fragments":["can"]},{"Key":"these can","Fragments":["probably"]},{"Key":"can probably","Fragments":["be"]},{"Key":"made `static","Fragments":["const`."]},{"Key":"`static const`.","Fragments":["When"]},{"Key":"const`. When","Fragments":["I"]},{"Key":"wrote it,","Fragments":["I"]},{"Key":"it, I","Fragments":["faintly","just","think","don't"]},{"Key":"I faintly","Fragments":["remembered"]},{"Key":"faintly remembered","Fragments":["once"]},{"Key":"remembered once","Fragments":["having"]},{"Key":"once having","Fragments":["problems"]},{"Key":"having problems","Fragments":["with"]},{"Key":"problems with","Fragments":["static","your","my","the","your","the"]},{"Key":"static regex","Fragments":["objects."]},{"Key":"regex objects.","Fragments":["But"]},{"Key":"objects. But","Fragments":["the"]},{"Key":"the circumstances","Fragments":["were"]},{"Key":"circumstances were","Fragments":["rather"]},{"Key":"were rather","Fragments":["special,","surprising."]},{"Key":"rather special,","Fragments":["I"]},{"Key":"special, I","Fragments":["guess."]},{"Key":"I guess.","Fragments":["I","But"]},{"Key":"guess. I","Fragments":["normally"]},{"Key":"I normally","Fragments":["would","`inline`","work","submit","avoid"]},{"Key":"normally would","Fragments":["expect"]},{"Key":"expect it","Fragments":["to"]},{"Key":"Yeah, now","Fragments":["that"]},{"Key":"it allowing","Fragments":["negative"]},{"Key":"allowing negative","Fragments":["years"]},{"Key":"negative years","Fragments":["gets"]},{"Key":"years gets","Fragments":["confusing."]},{"Key":"gets confusing.","Fragments":["There"]},{"Key":"confusing. There","Fragments":["is"]},{"Key":"no year","Fragments":["zero,"]},{"Key":"year zero,","Fragments":["so"]},{"Key":"zero, so","Fragments":["presumably","that"]},{"Key":"so presumably","Fragments":["year","it"]},{"Key":"presumably year","Fragments":["=="]},{"Key":"year ==","Fragments":["0"]},{"Key":"0 represents","Fragments":["1B.C.."]},{"Key":"represents 1B.C..","Fragments":["Hmm."]},{"Key":"1B.C.. Hmm.","Fragments":["I"]},{"Key":"Hmm. I","Fragments":["don't"]},{"Key":"The choice","Fragments":["of","I"]},{"Key":"choice of","Fragments":["long","response"]},{"Key":"of long","Fragments":["is"]},{"Key":"long is","Fragments":["interesting,","not","large"]},{"Key":"interesting, though.","Fragments":["Leap"]},{"Key":"though. Leap","Fragments":["years"]},{"Key":"Leap years","Fragments":["exist"]},{"Key":"years exist","Fragments":["to"]},{"Key":"exist to","Fragments":["keep"]},{"Key":"keep our","Fragments":["calendar"]},{"Key":"our calendar","Fragments":["synchronized"]},{"Key":"calendar synchronized","Fragments":["with"]},{"Key":"synchronized with","Fragments":["the"]},{"Key":"the Earth's","Fragments":["movement"]},{"Key":"Earth's movement","Fragments":["around"]},{"Key":"movement around","Fragments":["the"]},{"Key":"the sun.","Fragments":["The"]},{"Key":"sun. The","Fragments":["sun"]},{"Key":"The sun","Fragments":["will"]},{"Key":"sun will","Fragments":["burn"]},{"Key":"will burn","Fragments":["out"]},{"Key":"burn out","Fragments":["and"]},{"Key":"and Earth","Fragments":["will"]},{"Key":"Earth will","Fragments":["cease"]},{"Key":"will cease","Fragments":["to","to"]},{"Key":"cease to","Fragments":["exist","exist"]},{"Key":"to exist","Fragments":["before","in"]},{"Key":"exist before","Fragments":["year"]},{"Key":"before year","Fragments":["std::numeric_limits\u003cint\u003e::max()"]},{"Key":"Yeah, I'm","Fragments":["not"]},{"Key":"of nesting","Fragments":["ternaries."]},{"Key":"nesting ternaries.","Fragments":["You"]},{"Key":"ternaries. You","Fragments":["can"]},{"Key":"can implement","Fragments":["it","begin/end"]},{"Key":"on one","Fragments":["line","line","line"]},{"Key":"line with","Fragments":["boolean"]},{"Key":"with boolean","Fragments":["expressions"]},{"Key":"boolean expressions","Fragments":["and"]},{"Key":"expressions and","Fragments":["I"]},{"Key":"easier on","Fragments":["the"]},{"Key":"perfectly fine,","Fragments":["though."]},{"Key":"The else","Fragments":["is","if"]},{"Key":"else is","Fragments":["clearly","much","in","passed"]},{"Key":"clearly superflous,","Fragments":["but"]},{"Key":"superflous, but","Fragments":["I"]},{"Key":"would argue","Fragments":["it","that","that","that"]},{"Key":"argue it","Fragments":["would"]},{"Key":"replace \"else","Fragments":["if\""]},{"Key":"if\" with","Fragments":["\"return\""]},{"Key":"with \"return\"","Fragments":["-"]},{"Key":"\"return\" -","Fragments":["that"]},{"Key":"- that","Fragments":["is"]},{"Key":"that expression.","Fragments":["But"]},{"Key":"expression. But","Fragments":["that's"]},{"Key":"But that's","Fragments":["a","not","weird","probably","just","a","my"]},{"Key":"personal preference,","Fragments":["I","I","to"]},{"Key":"preference, I","Fragments":["do","think"]},{"Key":"understand some","Fragments":["people","chapters"]},{"Key":"some people","Fragments":["like","think","think"]},{"Key":"people like","Fragments":["to","the"]},{"Key":"always return","Fragments":["literals","false,"]},{"Key":"return literals","Fragments":["when"]},{"Key":"literals when","Fragments":["dealing"]},{"Key":"when dealing","Fragments":["with"]},{"Key":"3. Actually,","Fragments":["i"]},{"Key":"Actually, i","Fragments":["talked","felt"]},{"Key":"i talked","Fragments":["about"]},{"Key":"talked about","Fragments":["strings","that,","*Defensive"]},{"Key":"about strings","Fragments":["in"]},{"Key":"in hey().","Fragments":["But"]},{"Key":"hey(). But","Fragments":["yes,"]},{"Key":"But yes,","Fragments":["it"]},{"Key":"yes, it","Fragments":["can","is"]},{"Key":"be applied","Fragments":["also"]},{"Key":"applied also","Fragments":["with"]},{"Key":"also with","Fragments":["regex"]},{"Key":"with regex","Fragments":["strings","to","libraries","but","matching."]},{"Key":"regex strings","Fragments":[":)"]},{"Key":"I see:","Fragments":["I"]},{"Key":"see: I","Fragments":["would"]},{"Key":"definitely have","Fragments":["put"]},{"Key":"put these","Fragments":["strings"]},{"Key":"these strings","Fragments":["into","were"]},{"Key":"strings into","Fragments":["static"]},{"Key":"into static","Fragments":["const"]},{"Key":"const objects","Fragments":["if"]},{"Key":"objects if","Fragments":["they"]},{"Key":"they were","Fragments":["used","not","not","more","tied)","there","equal.","inserted"]},{"Key":"were used","Fragments":["at"]},{"Key":"used at","Fragments":["multiple"]},{"Key":"at multiple","Fragments":["places,"]},{"Key":"multiple places,","Fragments":["or"]},{"Key":"places, or","Fragments":["if"]},{"Key":"readability to","Fragments":["name","encapsulate","use","encapsulate"]},{"Key":"to name","Fragments":["them","a"]},{"Key":"them (as","Fragments":["with"]},{"Key":"(as with","Fragments":["the"]},{"Key":"But speaking","Fragments":["of"]},{"Key":"speaking of","Fragments":["it,"]},{"Key":"it, returning","Fragments":["a"]},{"Key":"`const char*`","Fragments":["here","or","to","to","instead","variables,"]},{"Key":"char*` here","Fragments":["instead"]},{"Key":"here instead","Fragments":["of"]},{"Key":"of `std::string`","Fragments":["would"]},{"Key":"`std::string` would","Fragments":["be"]},{"Key":"as no","Fragments":["memory"]},{"Key":"no memory","Fragments":["allocation","write"]},{"Key":"allocation is","Fragments":["required."]},{"Key":"The best","Fragments":["I","thing","part","way"]},{"Key":"best I","Fragments":["could","could"]},{"Key":"could do,","Fragments":["was"]},{"Key":"do, was","Fragments":["to"]},{"Key":"add attribute","Fragments":["```const```,"]},{"Key":"attribute ```const```,","Fragments":["since"]},{"Key":"```const```, since","Fragments":["```constexpr```"]},{"Key":"since ```constexpr```","Fragments":["was"]},{"Key":"```constexpr``` was","Fragments":["not"]},{"Key":"not available","Fragments":["in","elsewhere."]},{"Key":"using auto\u0026","Fragments":["and"]},{"Key":"auto\u0026 and","Fragments":["auto"]},{"Key":"and auto","Fragments":["to"]},{"Key":"auto to","Fragments":["declare"]},{"Key":"your loop","Fragments":["variables,","rather","a","(logically,","can","slightly","could","to","you","with."]},{"Key":"loop variables,","Fragments":["or"]},{"Key":"variables, or","Fragments":["at"]},{"Key":"least const","Fragments":["decltype(old)::value_type\u0026."]},{"Key":"const decltype(old)::value_type\u0026.","Fragments":["It's"]},{"Key":"decltype(old)::value_type\u0026. It's","Fragments":["not"]},{"Key":"just easier","Fragments":["to"]},{"Key":"and saves","Fragments":["on","a"]},{"Key":"saves on","Fragments":["typing,"]},{"Key":"on typing,","Fragments":["it"]},{"Key":"typing, it","Fragments":["makes"]},{"Key":"change your","Fragments":["code","loop","code.","isQuestion","method"]},{"Key":"code if","Fragments":["the","`hey()`","don't","anyone","they"]},{"Key":"type changes","Fragments":["a"]},{"Key":"changes a","Fragments":["bit"]},{"Key":"bit and","Fragments":["gives","it"]},{"Key":"gives you","Fragments":["fewer","invalid","the","all"]},{"Key":"you fewer","Fragments":["opportunities"]},{"Key":"fewer opportunities","Fragments":["to"]},{"Key":"opportunities to","Fragments":["mess","skip"]},{"Key":"mess the","Fragments":["type"]},{"Key":"And yeah,","Fragments":["I","boost::tokenizer"]},{"Key":"yeah, I","Fragments":["would","think"]},{"Key":"would declare","Fragments":["old_","i","something"]},{"Key":"declare old_","Fragments":["as"]},{"Key":"old_ as","Fragments":["a"]},{"Key":"reference. No","Fragments":["need"]},{"Key":"copy every","Fragments":["vector."]},{"Key":"recommend declaring","Fragments":["valueLetters"]},{"Key":"declaring valueLetters","Fragments":["as"]},{"Key":"valueLetters as","Fragments":["a"]},{"Key":"copying the","Fragments":["vector.","input","map,","whole","string","strings.","elements","buffer","input","string","string","string.","code","string","whole"]},{"Key":" Nope.","Fragments":["I"]},{"Key":"Nope. I","Fragments":["have"]},{"Key":"have standard","Fragments":["VS2013"]},{"Key":"standard VS2013","Fragments":["project"]},{"Key":"VS2013 project","Fragments":["created"]},{"Key":"project created","Fragments":["by"]},{"Key":"created by","Fragments":["cmake."]},{"Key":"I'd say","Fragments":["`isWhiteSpace()`and","that","that's","that","that","that"]},{"Key":"say `isWhiteSpace()`and","Fragments":["`isUpperCase()`"]},{"Key":"`isWhiteSpace()`and `isUpperCase()`","Fragments":["are"]},{"Key":"`isUpperCase()` are","Fragments":["ok"]},{"Key":"are ok","Fragments":["but","and"]},{"Key":"ok but","Fragments":["the"]},{"Key":"part where","Fragments":["you"]},{"Key":"identify questions","Fragments":["is"]},{"Key":"questions is","Fragments":["very"]},{"Key":"Other people's","Fragments":["solutions"]},{"Key":"people's solutions","Fragments":["involve","I"]},{"Key":"solutions involve","Fragments":["`boost::regex`or"]},{"Key":"involve `boost::regex`or","Fragments":["`std::regex`."]},{"Key":"`boost::regex`or `std::regex`.","Fragments":["If"]},{"Key":"`std::regex`. If","Fragments":["you're"]},{"Key":"with these,","Fragments":["you"]},{"Key":"these, you","Fragments":["should"]},{"Key":"look --","Fragments":["it"]},{"Key":"-- it","Fragments":["can"]},{"Key":"can greatly","Fragments":["simplify","reduce","reduce"]},{"Key":"greatly simplify","Fragments":["string","food_chain::sing()"]},{"Key":"simplify string","Fragments":["pattern"]},{"Key":"string pattern","Fragments":["problems."]},{"Key":" Thank's","Fragments":["a"]},{"Key":"Thank's a","Fragments":["lot"]},{"Key":"your comment,","Fragments":["TrophyNinjaShrub!","one"]},{"Key":" According","Fragments":["```rand()```,"]},{"Key":"According ```rand()```,","Fragments":["you"]},{"Key":"```rand()```, you","Fragments":["are"]},{"Key":"right, and","Fragments":["i","that's"]},{"Key":"am already","Fragments":["working"]},{"Key":"already working","Fragments":["on","inside"]},{"Key":"second version,","Fragments":["that"]},{"Key":"version, that","Fragments":["tackles"]},{"Key":"that tackles","Fragments":["this"]},{"Key":"tackles this","Fragments":["problem,"]},{"Key":"problem, probably","Fragments":["by"]},{"Key":"probably by","Fragments":["using"]},{"Key":"to admit","Fragments":["that","feeling","though,"]},{"Key":"admit that","Fragments":["my","the"]},{"Key":"my knowledge","Fragments":["of","about","of"]},{"Key":"different available","Fragments":["containers"]},{"Key":"available containers","Fragments":["is"]},{"Key":"containers is","Fragments":["shaky","easier"]},{"Key":"is shaky","Fragments":["at"]},{"Key":"shaky at","Fragments":["best"]},{"Key":"at best","Fragments":["and","do","do"]},{"Key":"best and","Fragments":["I've"]},{"Key":"I've never","Fragments":["even","attempted","done","included"]},{"Key":"never even","Fragments":["heard"]},{"Key":"even heard","Fragments":["of"]},{"Key":"the ```bloom","Fragments":["filter```."]},{"Key":"will spend","Fragments":["this"]},{"Key":"spend this","Fragments":["weekend,"]},{"Key":"this weekend,","Fragments":["trying"]},{"Key":"weekend, trying","Fragments":["to"]},{"Key":"get accommodated","Fragments":["with"]},{"Key":"accommodated with","Fragments":["these"]},{"Key":"with these","Fragments":["topics.","exercises","other"]},{"Key":"are by","Fragments":["far"]},{"Key":"by far","Fragments":["the"]},{"Key":"far the","Fragments":["most"]},{"Key":"most helpful","Fragments":["person","from"]},{"Key":"helpful person","Fragments":["I"]},{"Key":"person I","Fragments":["had"]},{"Key":"had the","Fragments":["pleasure","same","exact","chance"]},{"Key":"the pleasure","Fragments":["to"]},{"Key":"pleasure to","Fragments":["talk"]},{"Key":"to talk","Fragments":["to","about"]},{"Key":"talk to","Fragments":["on"]},{"Key":"to on","Fragments":["this"]},{"Key":"this site!!","Fragments":[":)"]},{"Key":"Glad I","Fragments":["could"]},{"Key":"For what","Fragments":["it's","it's","it's"]},{"Key":"what it's","Fragments":["worth,","supposed","worth","worth","supposed"]},{"Key":"it's worth,","Fragments":["I"]},{"Key":"worth, I","Fragments":["think"]},{"Key":"of non-security-conscious","Fragments":["applications"]},{"Key":"non-security-conscious applications","Fragments":["rand_r"]},{"Key":"applications rand_r","Fragments":["is"]},{"Key":"rand_r is","Fragments":["good"]},{"Key":"good enough","Fragments":["(that's","reason","balance"]},{"Key":"enough (that's","Fragments":["the"]},{"Key":"(that's the","Fragments":["reentrant,"]},{"Key":"the reentrant,","Fragments":["thread-safe"]},{"Key":"reentrant, thread-safe","Fragments":["version"]},{"Key":"thread-safe version","Fragments":["of"]},{"Key":"of rand","Fragments":["that's"]},{"Key":"rand that's","Fragments":["required"]},{"Key":"that's required","Fragments":["by"]},{"Key":"by posix).","Fragments":["But"]},{"Key":"posix). But","Fragments":["I'm"]},{"Key":"But I'm","Fragments":["trying","not","not","kind","curious","really"]},{"Key":"I'm trying","Fragments":["to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"get used","Fragments":["to","to","to","to","to","to","to."]},{"Key":"new standard","Fragments":["library's","was"]},{"Key":"standard library's","Fragments":["[http://en.cppreference.com/w/cpp/numeric/random](random)","ctype.h"]},{"Key":"library's [http://en.cppreference.com/w/cpp/numeric/random](random)","Fragments":["header"]},{"Key":"[http://en.cppreference.com/w/cpp/numeric/random](random) header","Fragments":["stuff,"]},{"Key":"header stuff,","Fragments":["because"]},{"Key":"stuff, because","Fragments":["it's"]},{"Key":"more thorough/rugged,","Fragments":["and"]},{"Key":"thorough/rugged, and","Fragments":["if"]},{"Key":"often enough","Fragments":["it'll"]},{"Key":"enough it'll","Fragments":["get"]},{"Key":"it'll get","Fragments":["familiar","promoted"]},{"Key":"get familiar","Fragments":["and"]},{"Key":"familiar and","Fragments":["comfortable.","the"]},{"Key":" Being","Fragments":["able"]},{"Key":"Being able","Fragments":["to"]},{"Key":"a particular","Fragments":["square","algorithm,","type,","triangle","reason,","letter","design,"]},{"Key":"particular square","Fragments":["to"]},{"Key":"square to","Fragments":["total","check"]},{"Key":"to total","Fragments":["up"]},{"Key":"total up","Fragments":["to"]},{"Key":"to is","Fragments":["pretty"]},{"Key":"pretty cool,","Fragments":["but"]},{"Key":"cool, but","Fragments":["for","don't"]},{"Key":"numbers less","Fragments":["than"]},{"Key":"less than","Fragments":["64","52,","'b'.","perfection","three","6,","the","comparison","1,","zero","zero,","zero).","zero,","zero,","zero,"]},{"Key":"than 64","Fragments":["I'd","bit","otherwise"]},{"Key":"64 I'd","Fragments":["prefer"]},{"Key":"prefer to","Fragments":["use","use","use","use","include","make","have","remove","do","use","see"]},{"Key":"use subtraction","Fragments":["than"]},{"Key":"subtraction than","Fragments":["rely"]},{"Key":"than rely","Fragments":["on"]},{"Key":"the machine","Fragments":["using"]},{"Key":"machine using","Fragments":["2's"]},{"Key":"using 2's","Fragments":["complement."]},{"Key":"2's complement.","Fragments":["e.g."]},{"Key":"complement. e.g.","Fragments":["2"]},{"Key":"e.g. 2","Fragments":["\u003c\u003c"]},{"Key":"2 \u003c\u003c","Fragments":["(number+1)"]},{"Key":"\u003c\u003c (number+1)","Fragments":["-"]},{"Key":"(number+1) -","Fragments":["1"]},{"Key":"Maybe total","Fragments":["should"]},{"Key":"total should","Fragments":["be"]},{"Key":"code to","Fragments":["use","normalize","support","be","handle","be","reconcile","do","be","improve","not","create","improve","be"]},{"Key":"use ::tolower","Fragments":["instead","here"]},{"Key":"::tolower instead","Fragments":["of"]},{"Key":"lambda and","Fragments":["also"]},{"Key":"also sorted","Fragments":["the"]},{"Key":"sorted the","Fragments":["array"]},{"Key":"array used","Fragments":["for"]},{"Key":"for generating","Fragments":["permutations.","the"]},{"Key":"great. I'll","Fragments":["just"]},{"Key":"I'll just","Fragments":["add","only","use","paste","get"]},{"Key":"just add","Fragments":["that","all"]},{"Key":"can (and","Fragments":["should!)","should)"]},{"Key":"(and should!)","Fragments":["submit"]},{"Key":"should!) submit","Fragments":["the"]},{"Key":".h files","Fragments":["as","are"]},{"Key":"files as","Fragments":["well.","arguments)."]},{"Key":"as well.","Fragments":["The","I","*shrug*","I've","Beyond","(at","(And","But","IE","Using","I"]},{"Key":"well. The","Fragments":["exercism"]},{"Key":"The exercism","Fragments":["command","CLI"]},{"Key":"exercism command","Fragments":["line"]},{"Key":"command line","Fragments":["tool","tool"]},{"Key":"line tool","Fragments":["accepts","to"]},{"Key":"tool accepts","Fragments":["multiple"]},{"Key":"accepts multiple","Fragments":["filenames,"]},{"Key":"multiple filenames,","Fragments":["so"]},{"Key":"filenames, so","Fragments":["you"]},{"Key":"can call","Fragments":["it","things","cleanWord","to"]},{"Key":"this: `exercism","Fragments":["submit"]},{"Key":"`exercism submit","Fragments":["bob.h","foo.cpp","bob.h","bob.cpp"]},{"Key":"submit bob.h","Fragments":["bob.cpp`","bob.cpp```","bob.cpp`","bob.cpp","bob.cpp'.","bob.cpp"]},{"Key":"really well","Fragments":["structured,"]},{"Key":"well structured,","Fragments":["I"]},{"Key":"structured, I","Fragments":["like"]},{"Key":"it. Quick","Fragments":["question,"]},{"Key":"Quick question,","Fragments":["though:"]},{"Key":"question, though:","Fragments":["why"]},{"Key":"though: why","Fragments":["are"]},{"Key":"are you","Fragments":["using","on","using","heard","using?","really","using","trying","trying","invoking","taking","catching","using","using"]},{"Key":"you using","Fragments":["`auto","a","the","\"std::isupper\"","the","the"]},{"Key":"using `auto","Fragments":["f(...)"]},{"Key":"`auto f(...)","Fragments":["-\u003e"]},{"Key":"f(...) -\u003e","Fragments":["string`"]},{"Key":"-\u003e string`","Fragments":["for"]},{"Key":"string` for","Fragments":["functions","the"]},{"Key":"functions which","Fragments":["return","are","can"]},{"Key":"which return","Fragments":["a","const"]},{"Key":"Thank you!","Fragments":["The","I"]},{"Key":"you! The","Fragments":["help"]},{"Key":"The help","Fragments":["section"]},{"Key":"help section","Fragments":["for"]},{"Key":"section for","Fragments":["the"]},{"Key":"cpp exercises","Fragments":["still"]},{"Key":"exercises still","Fragments":["says"]},{"Key":"still says","Fragments":["that"]},{"Key":"says that","Fragments":["the","the","you","the","if","there"]},{"Key":"files should","Fragments":["be"]},{"Key":"file commented","Fragments":["out"]},{"Key":"out or","Fragments":["as"]},{"Key":"or as","Fragments":["an","a","close"]},{"Key":"an ifdef—","Fragments":["so"]},{"Key":"ifdef— so","Fragments":["exercism"]},{"Key":"so exercism","Fragments":["supports"]},{"Key":"exercism supports","Fragments":["multiple"]},{"Key":"supports multiple","Fragments":["file"]},{"Key":"multiple file","Fragments":["submission","submissions."]},{"Key":"file submission","Fragments":["for"]},{"Key":"submission for","Fragments":["c++","the","that"]},{"Key":"for c++","Fragments":["now?"]},{"Key":"Readability could","Fragments":["be"]},{"Key":"the conditionals","Fragments":["out","are","in"]},{"Key":"conditionals out","Fragments":["into"]},{"Key":"into separate","Fragments":["boolean","functions","loops","functions","functions,"]},{"Key":"separate boolean","Fragments":["functions..."]},{"Key":"boolean functions...","Fragments":["currently"]},{"Key":"functions... currently","Fragments":["\"is_yelled_at\""]},{"Key":"currently \"is_yelled_at\"","Fragments":["is"]},{"Key":"\"is_yelled_at\" is","Fragments":["true"]},{"Key":"is true","Fragments":["when","that","then","-"]},{"Key":"true when","Fragments":["all","you"]},{"Key":"when all","Fragments":["characters","you"]},{"Key":"all characters","Fragments":["are","of","in","to"]},{"Key":"are non-alphanumeric,","Fragments":["which"]},{"Key":"non-alphanumeric, which","Fragments":["works"]},{"Key":"which works","Fragments":["in","and"]},{"Key":"works in","Fragments":["terms","that","O(N)"]},{"Key":"code but","Fragments":["isn't","realized","there","later"]},{"Key":"but isn't","Fragments":["intuitive."]},{"Key":"Just personal","Fragments":["preference."]},{"Key":"preference. I","Fragments":["like"]},{"Key":"C++11 function","Fragments":["declaration","declaration"]},{"Key":"My goal","Fragments":["was"]},{"Key":"to minimize","Fragments":["redundancy","passes","the"]},{"Key":"minimize redundancy","Fragments":["while"]},{"Key":"redundancy while","Fragments":["keeping"]},{"Key":"code fairly","Fragments":["readable."]},{"Key":"realized afterwards","Fragments":["that,"]},{"Key":"afterwards that,","Fragments":["except"]},{"Key":"that, except","Fragments":["for"]},{"Key":"except for","Fragments":["the","`bob::hey`,","personal"]},{"Key":"the `sing()`","Fragments":["function,"]},{"Key":"`sing()` function,","Fragments":["I"]},{"Key":"function, I","Fragments":["had","had","would"]},{"Key":"had wound","Fragments":["up"]},{"Key":"wound up","Fragments":["writing"]},{"Key":"up writing","Fragments":["it"]},{"Key":"a pure","Fragments":["functional"]},{"Key":"pure functional","Fragments":["style.","as"]},{"Key":"make `sing()`","Fragments":["pure"]},{"Key":"`sing()` pure","Fragments":["functional"]},{"Key":"functional as","Fragments":["well."]},{"Key":"well. I","Fragments":["like","used"]},{"Key":"this eliminated","Fragments":["the"]},{"Key":"eliminated the","Fragments":["need","enum"]},{"Key":"keep track","Fragments":["of","of","of","of","of","of"]},{"Key":"of when","Fragments":["a"]},{"Key":"a newline","Fragments":["separator","there?"]},{"Key":"newline separator","Fragments":["is"]},{"Key":"separator is","Fragments":["needed.","ambiguous"]},{"Key":"i realised","Fragments":["that"]},{"Key":"realised that","Fragments":["roman","all","I"]},{"Key":"that roman","Fragments":["numerals"]},{"Key":"roman numerals","Fragments":["follow"]},{"Key":"numerals follow","Fragments":["a"]},{"Key":"follow a","Fragments":["pattern"]},{"Key":" where","Fragments":["the","for"]},{"Key":"the arabic","Fragments":["digit"]},{"Key":"arabic digit","Fragments":["mod"]},{"Key":"digit mod","Fragments":["5"]},{"Key":"mod 5","Fragments":["is","digit","digit"]},{"Key":"5 is","Fragments":["written"]},{"Key":"written following","Fragments":["the"]},{"Key":" 0","Fragments":["{a}","0","0","-","==","=="]},{"Key":" 1","Fragments":["{a","1","1","-","i","error"]},{"Key":"1 {a","Fragments":["b}"]},{"Key":"2 {a","Fragments":["b"]},{"Key":"{a b","Fragments":["b}","b"]},{"Key":"3 {a","Fragments":["b"]},{"Key":"b b","Fragments":["b}"]},{"Key":"4 {b","Fragments":["c}"]},{"Key":"where for","Fragments":["0"]},{"Key":"for 0","Fragments":["to","vs."]},{"Key":"0 to","Fragments":["4","25","hamming_diff.","top-1."]},{"Key":" a","Fragments":["=","=","question?","`bool`","for_each-alike","string"]},{"Key":"a =","Fragments":["\"\",","\"V\",","0,","0;","0;"]},{"Key":"= \"\",","Fragments":["b"]},{"Key":"\"\", b","Fragments":["=\"I\","]},{"Key":"b =\"I\",","Fragments":["c","c"]},{"Key":"=\"I\", c","Fragments":["=","="]},{"Key":"c =","Fragments":["\"V\"","\"X\"","'A'`","toupper(","tolower(","0,","0;","0;","message[i];","phrase.at(","to_rna(c);","to_rna(c);"]},{"Key":"for 5","Fragments":["to"]},{"Key":"5 to","Fragments":["9"]},{"Key":"= \"V\",","Fragments":["b"]},{"Key":"\"V\", b","Fragments":["=\"I\","]},{"Key":"algorithm didn't","Fragments":["end"]},{"Key":"didn't end","Fragments":["up"]},{"Key":"being as","Fragments":["simple"]},{"Key":"been but","Fragments":["I"]},{"Key":"it worked","Fragments":["out","great."]},{"Key":"sure but","Fragments":["couldn't"]},{"Key":"but couldn't","Fragments":["you","figure"]},{"Key":"couldn't you","Fragments":["use"]},{"Key":"use \"all","Fragments":["of"]},{"Key":"\"all of","Fragments":["not"]},{"Key":"not `islower()`\"","Fragments":["and"]},{"Key":"`islower()`\" and","Fragments":["\"any"]},{"Key":"and \"any","Fragments":["of"]},{"Key":"\"any of","Fragments":["`isupper()`\""]},{"Key":"of `isupper()`\"","Fragments":["instead"]},{"Key":"`isupper()`\" instead","Fragments":["of"]},{"Key":"of custom","Fragments":["lambda"]},{"Key":"custom lambda","Fragments":["functions?"]},{"Key":"The map's","Fragments":["`operator[]`"]},{"Key":"map's `operator[]`","Fragments":["will"]},{"Key":"`operator[]` will","Fragments":["create"]},{"Key":"a default-initialized","Fragments":["element,"]},{"Key":"default-initialized element,","Fragments":["which"]},{"Key":"element, which","Fragments":["means"]},{"Key":"means for","Fragments":["`int`"]},{"Key":"for `int`","Fragments":["value"]},{"Key":"`int` value","Fragments":["type","of"]},{"Key":"type it","Fragments":["will","is"]},{"Key":"be 0","Fragments":["on","on","(`'\\0'`)","difference","anyway.","by","by"]},{"Key":"0 on","Fragments":["first","initialization."]},{"Key":"on first","Fragments":["access","access","5"]},{"Key":"first access","Fragments":["of","of"]},{"Key":"access of","Fragments":["a","each"]},{"Key":"a key's","Fragments":["value."]},{"Key":"key's value.","Fragments":["This"]},{"Key":"value. This","Fragments":["way","epsilon","means","is"]},{"Key":"way you'd","Fragments":["save"]},{"Key":"you'd save","Fragments":["the"]},{"Key":"first check","Fragments":["for","that's"]},{"Key":"for existence","Fragments":["of","in"]},{"Key":"key inside","Fragments":["the"]},{"Key":"Also, by","Fragments":["using","adding"]},{"Key":"using `regex_iterator`you","Fragments":["could"]},{"Key":"`regex_iterator`you could","Fragments":["get"]},{"Key":"could get","Fragments":["away","more","copied","the","the"]},{"Key":"with fewer","Fragments":["memory","things","iterations","arguments"]},{"Key":"fewer memory","Fragments":["allocations,"]},{"Key":"allocations, I","Fragments":["believe."]},{"Key":" implemented","Fragments":["to","suggestions"]},{"Key":"implemented to","Fragments":["3000"]},{"Key":"to 3000","Fragments":["to"]},{"Key":"3000 to","Fragments":["meet"]},{"Key":"to meet","Fragments":["test"]},{"Key":"meet test","Fragments":["cases,"]},{"Key":"test cases,","Fragments":["intend","was","but","which"]},{"Key":"cases, intend","Fragments":["to"]},{"Key":"to extend","Fragments":["to","it."]},{"Key":"extend to","Fragments":["higher"]},{"Key":"to higher","Fragments":["numbers,"]},{"Key":"higher numbers,","Fragments":["once"]},{"Key":"numbers, once","Fragments":["i"]},{"Key":"once i","Fragments":["decide"]},{"Key":"i decide","Fragments":["on"]},{"Key":"decide on","Fragments":["which"]},{"Key":"which format","Fragments":["to"]},{"Key":"format to","Fragments":["use"]},{"Key":"for higher","Fragments":["numbers"]},{"Key":"I borrowed","Fragments":["the","the"]},{"Key":"borrowed the","Fragments":["normalize_text","rtrim"]},{"Key":"the normalize_text","Fragments":["from"]},{"Key":"normalize_text from","Fragments":["exercism's"]},{"Key":"from exercism's","Fragments":["examples,"]},{"Key":"exercism's examples,","Fragments":["after"]},{"Key":"examples, after","Fragments":["having"]},{"Key":"after having","Fragments":["issues"]},{"Key":"having issues","Fragments":["removing","getting","using"]},{"Key":"issues removing","Fragments":["non-alphanumeric"]},{"Key":"removing non-alphanumeric","Fragments":["characters"]},{"Key":"non-alphanumeric characters","Fragments":["per-word."]},{"Key":"1. True,","Fragments":["i"]},{"Key":"True, i","Fragments":["am"]},{"Key":"am too","Fragments":["much","lazy"]},{"Key":"much careful","Fragments":["about"]},{"Key":"careful about","Fragments":["default-initialized","return"]},{"Key":"about default-initialized","Fragments":["stuff..."]},{"Key":"2. I","Fragments":["don't","screwed","think","suggest","suggest","suggest","like","think","didn't"]},{"Key":"know much","Fragments":["about"]},{"Key":"much about","Fragments":["it,","its","naming"]},{"Key":"about it,","Fragments":["i'll","if","if","does"]},{"Key":"it, i'll","Fragments":["take"]},{"Key":"i'll take","Fragments":["a"]},{"Key":"a glance","Fragments":["at"]},{"Key":"glance at","Fragments":["this"]},{"Key":"at this","Fragments":["```regex_iterator```","point.","point.","point","line","point","exercise","again"]},{"Key":" Anyway,","Fragments":["new","like","I'm","it","since","if","sorry","so","rip","this","I'm","just","you"]},{"Key":"Anyway, new","Fragments":["upstream"]},{"Key":"new upstream","Fragments":["coming."]},{"Key":"the `else`","Fragments":["is"]},{"Key":"`else` is","Fragments":["redundant."]},{"Key":"is redundant.","Fragments":["I","Any"]},{"Key":"redundant. I","Fragments":["generally"]},{"Key":"I generally","Fragments":["like"]},{"Key":"generally like","Fragments":["returning"]},{"Key":"an expression,","Fragments":["but,"]},{"Key":"expression, but,","Fragments":["in"]},{"Key":"but, in","Fragments":["this"]},{"Key":"case, since","Fragments":["I'm"]},{"Key":"since I'm","Fragments":["already","currently"]},{"Key":"I'm already","Fragments":["returning"]},{"Key":"already returning","Fragments":["a"]},{"Key":"a literal","Fragments":["in"]},{"Key":"literal in","Fragments":["the"]},{"Key":"the `if`,","Fragments":["it"]},{"Key":"`if`, it","Fragments":["seemed"]},{"Key":"seemed neater","Fragments":["for"]},{"Key":"neater for","Fragments":["the"]},{"Key":"other returns","Fragments":["to"]},{"Key":"returns to","Fragments":["do","do"]},{"Key":"use \u003c","Fragments":["and"]},{"Key":"\u003c and","Fragments":["\u003e"]},{"Key":"and \u003e","Fragments":["with"]},{"Key":"\u003e with","Fragments":["#include"]},{"Key":"with #include","Fragments":["unless"]},{"Key":"#include unless","Fragments":["I"]},{"Key":"think searching","Fragments":["relative"]},{"Key":"searching relative","Fragments":["to"]},{"Key":"relative to","Fragments":["the"]},{"Key":"current source","Fragments":["file's"]},{"Key":"source file's","Fragments":["directory"]},{"Key":"file's directory","Fragments":["might"]},{"Key":"directory might","Fragments":["be"]},{"Key":"be relevant","Fragments":["(and"]},{"Key":"relevant (and","Fragments":["useful"]},{"Key":"(and useful","Fragments":["if"]},{"Key":"useful if","Fragments":["it","the"]},{"Key":"I humbly","Fragments":["bow"]},{"Key":"humbly bow","Fragments":["as"]},{"Key":"bow as","Fragments":["I"]},{"Key":"didn't recognize","Fragments":["how"]},{"Key":"recognize how","Fragments":["much"]},{"Key":"simpler that","Fragments":["was."]},{"Key":"that was.","Fragments":["I"]},{"Key":"was. I","Fragments":["was"]},{"Key":"was trapped","Fragments":["in"]},{"Key":"trapped in","Fragments":["thinking"]},{"Key":"in thinking","Fragments":["the","from"]},{"Key":"thinking the","Fragments":["second"]},{"Key":"second parameter","Fragments":["was"]},{"Key":"parameter was","Fragments":["time"]},{"Key":"was time","Fragments":["of"]},{"Key":"time of","Fragments":["day.","writing","the","this"]},{"Key":"recommend making","Fragments":["advance"]},{"Key":"making advance","Fragments":["inline,"]},{"Key":"advance inline,","Fragments":["static,"]},{"Key":"inline, static,","Fragments":["in","in","or","or","or","in"]},{"Key":"static, in","Fragments":["an","an","an"]},{"Key":"anonymous namespace,","Fragments":["or","or","since","\"static\",","though","or","so","so"]},{"Key":"namespace, or","Fragments":["a","a","just","declared","moved"]},{"Key":"a template.","Fragments":["To"]},{"Key":"template. To","Fragments":["avoid"]},{"Key":"avoid linker","Fragments":["errors.","errors.","errors.","errors","errors"]},{"Key":"cases expect","Fragments":["this"]},{"Key":"expect this","Fragments":["format:","behavior"]},{"Key":" mod","Fragments":["5","5"]},{"Key":" 9","Fragments":["4","4","i","v"]},{"Key":"9 4","Fragments":["i","v"]},{"Key":"4 i","Fragments":["x","v","v","i"]},{"Key":" 8","Fragments":["3","3","v","v"]},{"Key":"8 3","Fragments":["v","v"]},{"Key":"3 v","Fragments":["i","i"]},{"Key":"v i","Fragments":["i","i","i","i","i","i","i","i","i","i"]},{"Key":"i i","Fragments":["i","i","i","i","i","i","i","i","i","i","i","i","i","i","i"]},{"Key":" 7","Fragments":["2","2","v","v"]},{"Key":"7 2","Fragments":["v","v"]},{"Key":"2 v","Fragments":["i","i"]},{"Key":"6 1","Fragments":["v","v"]},{"Key":"1 v","Fragments":["i","i"]},{"Key":"5 0","Fragments":["v","v"]},{"Key":"4 4","Fragments":["i","-"]},{"Key":"3 3","Fragments":["-","-"]},{"Key":"3 -","Fragments":["i","i","i"]},{"Key":"- i","Fragments":["i","i","i","i","i","i","i"]},{"Key":"2 2","Fragments":["-","-"]},{"Key":"2 -","Fragments":["i","i","i","1","1","1","1"]},{"Key":"1 1","Fragments":["-","-"]},{"Key":"1 -","Fragments":["i","i","i","1"]},{"Key":"0 0","Fragments":["-","-"]},{"Key":"but from","Fragments":["what"]},{"Key":"from what","Fragments":["i"]},{"Key":"what i","Fragments":["read","mean."]},{"Key":"i read","Fragments":["this"]},{"Key":"read this","Fragments":["was","output,","function"]},{"Key":"was actually","Fragments":["more","mentioned","quite","my","performing"]},{"Key":"actually more","Fragments":["common"]},{"Key":"common in","Fragments":["rome","other","my","code","scripting"]},{"Key":"4 v","Fragments":["i"]},{"Key":"4 -","Fragments":["i","line"]},{"Key":" i'm","Fragments":["going"]},{"Key":"i'm going","Fragments":["to","to"]},{"Key":"to modify","Fragments":["the","my","the","it","a","string.","the","it","the","it,","a","the","their","its","the","them?","it","it,"]},{"Key":"modify the","Fragments":["test","test.","string","container's","object.","contents","argument","object","copy","phrase","variable,","value","string,","string,","string.","string.","program"]},{"Key":" extend","Fragments":["it"]},{"Key":"extend it","Fragments":["beyond","to","for"]},{"Key":"it beyond","Fragments":["3999"]},{"Key":" then","Fragments":["ill","how","`downcase()`","the","when"]},{"Key":"then ill","Fragments":["clean"]},{"Key":"ill clean","Fragments":["up"]},{"Key":"up a","Fragments":["bit,","map","list","bit","new","bit:","bit,","class?","class","refactoring","little.","bit.","bit.","bit,","lot."]},{"Key":"a bit,","Fragments":["eg","and","you're","and","I","I","I","good"]},{"Key":"bit, eg","Fragments":["get"]},{"Key":"eg get","Fragments":["rid"]},{"Key":"yes, ive","Fragments":["broken"]},{"Key":"ive broken","Fragments":["the"]},{"Key":"broken the","Fragments":["rules!"]},{"Key":" i've","Fragments":["switched","got","followed","seen"]},{"Key":"i've switched","Fragments":["from"]},{"Key":"switched from","Fragments":["subtractive"]},{"Key":"from subtractive","Fragments":["notation"]},{"Key":"9 i","Fragments":["x"]},{"Key":"8 v","Fragments":["i","i"]},{"Key":"7 v","Fragments":["i","i"]},{"Key":"6 v","Fragments":["i","i"]},{"Key":"to additive","Fragments":["notatation"]},{"Key":"9 v","Fragments":["i"]},{"Key":"3 i","Fragments":["i"]},{"Key":"2 i","Fragments":["i"]},{"Key":"updated my","Fragments":["test"]},{"Key":"my test","Fragments":["header"]},{"Key":" Ran","Fragments":["into","with"]},{"Key":"Ran into","Fragments":["a"]},{"Key":"of issues","Fragments":["so"]},{"Key":"issues so","Fragments":["borrowed"]},{"Key":"so borrowed","Fragments":["heavily"]},{"Key":"borrowed heavily","Fragments":["from"]},{"Key":"heavily from","Fragments":["exercism"]},{"Key":"from exercism","Fragments":["examples."]},{"Key":" kind(","Fragments":["0,"]},{"Key":"kind( 0,","Fragments":["999,"]},{"Key":"0, 999,","Fragments":["999"]},{"Key":"999, 999","Fragments":[")"]},{"Key":"999 )","Fragments":["should"]},{"Key":") should","Fragments":["throw"]},{"Key":"an exception,","Fragments":["I","which","stating"]},{"Key":"exception, I","Fragments":["believe,"]},{"Key":"I believe,","Fragments":["because","mathematically","that"]},{"Key":"believe, because","Fragments":["it's"]},{"Key":"a triangle","Fragments":["with"]},{"Key":"triangle with","Fragments":["no"]},{"Key":"with no","Fragments":["size","other","problem...","allocated","real","upper","relation","colisions"]},{"Key":"no size","Fragments":["(area)."]},{"Key":"Consider trying","Fragments":["to","to"]},{"Key":"avoid float","Fragments":["==","=="]},{"Key":"float ==","Fragments":["or","or"]},{"Key":"== or","Fragments":["!=","!=","!="]},{"Key":"or !=","Fragments":["tests.","tests.","tests."]},{"Key":"!= tests.","Fragments":["https://isocpp.org/wiki/faq/newbie#floating-point-arith","https://isocpp.org/wiki/faq/newbie#floating-point-arith","https://isocpp.org/wiki/faq/newbie#floating-point-arith"]},{"Key":"only concern","Fragments":["is"]},{"Key":"concern is","Fragments":["that","about","that"]},{"Key":"that testing","Fragments":["for"]},{"Key":"for floating","Fragments":["point"]},{"Key":"point equality","Fragments":["or"]},{"Key":"equality or","Fragments":["inequality"]},{"Key":"or inequality","Fragments":["is"]},{"Key":"inequality is","Fragments":["[https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/](tricky),"]},{"Key":"is [https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/](tricky),","Fragments":["and"]},{"Key":"[https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/](tricky), and","Fragments":["should"]},{"Key":"Consider combining","Fragments":["the"]},{"Key":"zero and","Fragments":["negative","negative"]},{"Key":"and negative","Fragments":["tests","lookaheads","drops"]},{"Key":"negative tests","Fragments":["for"]},{"Key":"for illegal","Fragments":["into"]},{"Key":"illegal into","Fragments":["one"]},{"Key":"into one","Fragments":["\u003c=","program.","logical","giant","regex","procedural"]},{"Key":"one \u003c=","Fragments":["0."]},{"Key":"\u003c= 0.","Fragments":["I"]},{"Key":"0. I","Fragments":["know","think"]},{"Key":"a change,","Fragments":["since"]},{"Key":"change, since","Fragments":["you"]},{"Key":"you require","Fragments":["side1"]},{"Key":"require side1","Fragments":["and"]},{"Key":"side1 and","Fragments":["one"]},{"Key":"and one","Fragments":["of","should","thing","learns","side","is","for","with","in","with","problem"]},{"Key":"two to","Fragments":["be","determine"]},{"Key":"be zero,","Fragments":["but"]},{"Key":"zero, but","Fragments":["I"]},{"Key":"the three.","Fragments":["If"]},{"Key":"three. If","Fragments":["any"]},{"Key":"If any","Fragments":["one","lower"]},{"Key":"one side","Fragments":["is","that's"]},{"Key":"side is","Fragments":["zero"]},{"Key":"area is","Fragments":["zero."]},{"Key":" Unfortunately","Fragments":["we","`std::string`","query.back()","there"]},{"Key":"Unfortunately we","Fragments":["know"]},{"Key":"we know","Fragments":["that","for","this","someone","that"]},{"Key":"that Length","Fragments":["will"]},{"Key":"Length will","Fragments":["sometimes"]},{"Key":"will sometimes","Fragments":["resolve"]},{"Key":"sometimes resolve","Fragments":["to"]},{"Key":"resolve to","Fragments":["a"]},{"Key":"a floating-point","Fragments":["type,"]},{"Key":"floating-point type,","Fragments":["in"]},{"Key":"type, in","Fragments":["particular"]},{"Key":"in particular","Fragments":["double,","isn't","because"]},{"Key":"particular double,","Fragments":["and"]},{"Key":"double, and","Fragments":["one"]},{"Key":"should to","Fragments":["avoid"]},{"Key":"avoid floating-point","Fragments":["=="]},{"Key":"floating-point ==","Fragments":["or"]},{"Key":"i've got","Fragments":["this","another"]},{"Key":"got this","Fragments":["working","answer","thing","tip"]},{"Key":"this working","Fragments":["for","took"]},{"Key":"working for","Fragments":["additive"]},{"Key":"for additive","Fragments":["and"]},{"Key":"additive and","Fragments":["subtractive"]},{"Key":"and subtractive","Fragments":["form"]},{"Key":" eg","Fragments":["(4"]},{"Key":"eg (4","Fragments":["="]},{"Key":"(4 =","Fragments":["iiii"]},{"Key":"= iiii","Fragments":["or"]},{"Key":"iiii or","Fragments":["iv)"]},{"Key":" up","Fragments":["to"]},{"Key":"to 3999999","Fragments":["for"]},{"Key":"3999999 for","Fragments":["subtractive"]},{"Key":"and 4999999","Fragments":["for"]},{"Key":"4999999 for","Fragments":["additive"]},{"Key":"might leave","Fragments":["this"]},{"Key":"leave this","Fragments":["as"]},{"Key":"is for","Fragments":["a","a","the","the"]},{"Key":"few days,","Fragments":["and"]},{"Key":"days, and","Fragments":["come"]},{"Key":"and come","Fragments":["back"]},{"Key":"back and","Fragments":["change","see","dug","forth.","forth","look"]},{"Key":"order from","Fragments":["\"smallest"]},{"Key":"from \"smallest","Fragments":["to"]},{"Key":"\"smallest to","Fragments":["biggest\""]},{"Key":"to biggest\"","Fragments":["to"]},{"Key":"biggest\" to","Fragments":["\"biggest"]},{"Key":"to \"biggest","Fragments":["to"]},{"Key":"\"biggest to","Fragments":["smallest\""]},{"Key":"can consistently","Fragments":["build"]},{"Key":"consistently build","Fragments":["the"]},{"Key":"from left","Fragments":["to"]},{"Key":"left to","Fragments":["right","run","the"]},{"Key":"a `range","Fragments":["for`"]},{"Key":"`range for`","Fragments":["loop"]},{"Key":"for` loop","Fragments":["instead"]},{"Key":"loop instead","Fragments":["of","of","of","of","of"]},{"Key":" Looking","Fragments":["at","at","at","forward","good!","at"]},{"Key":"Looking at","Fragments":["other","other","it","some","other","the"]},{"Key":"solutions I","Fragments":["realized,","came","have","think","know"]},{"Key":"I realized,","Fragments":["that"]},{"Key":"realized, that","Fragments":["since"]},{"Key":"since `std::string::operator[]()`","Fragments":["has"]},{"Key":"`std::string::operator[]()` has","Fragments":["O(1)"]},{"Key":"has O(1)","Fragments":["complexity,"]},{"Key":"O(1) complexity,","Fragments":["there"]},{"Key":"complexity, there","Fragments":["is"]},{"Key":"no point","Fragments":["in"]},{"Key":"in using","Fragments":["the","one","namespaces","auto","auto","regex","reference"]},{"Key":"fancy boost","Fragments":["stuff"]},{"Key":"boost stuff","Fragments":["at"]},{"Key":"stuff at","Fragments":["all."]},{"Key":"lot about","Fragments":["this"]},{"Key":"this solution,","Fragments":["especially","but","because","please"]},{"Key":"solution, especially","Fragments":["stylistically."]},{"Key":"especially stylistically.","Fragments":["I"]},{"Key":"stylistically. I","Fragments":["do"]},{"Key":"do think","Fragments":["that","that"]},{"Key":"that maintaining","Fragments":["hour_"]},{"Key":"maintaining hour_","Fragments":["and"]},{"Key":"hour_ and","Fragments":["min_"]},{"Key":"and min_","Fragments":["separately"]},{"Key":"min_ separately","Fragments":["complicates"]},{"Key":"separately complicates","Fragments":["things"]},{"Key":"complicates things","Fragments":["a","and"]},{"Key":"bit. For","Fragments":["example,"]},{"Key":"example, I","Fragments":["don't"]},{"Key":"this implementation","Fragments":["would","approach","is","that"]},{"Key":"implementation would","Fragments":["handle","be"]},{"Key":"would handle","Fragments":["plus(","not"]},{"Key":"handle plus(","Fragments":["60"]},{"Key":"plus( 60","Fragments":["*"]},{"Key":"60 *","Fragments":["25"]},{"Key":"* 25","Fragments":["+"]},{"Key":"25 +","Fragments":["1"]},{"Key":"+ 1","Fragments":[")",")","//","wherever","=","=","=","="]},{"Key":"1 )","Fragments":["very"]},{"Key":") very","Fragments":["well."]},{"Key":"very well.","Fragments":["But","Your","What"]},{"Key":"well. But","Fragments":["otherwise,","the"]},{"Key":"But otherwise,","Fragments":["super"]},{"Key":"otherwise, super","Fragments":["solid."]},{"Key":"I'm confused","Fragments":["why","about"]},{"Key":"confused why","Fragments":["floating-point"]},{"Key":"why floating-point","Fragments":["math"]},{"Key":"floating-point math","Fragments":["came","is"]},{"Key":"math came","Fragments":["into"]},{"Key":"came into","Fragments":["this."]},{"Key":"into this.","Fragments":["Isn't"]},{"Key":"this. Isn't","Fragments":["(int)floor(a/60.0)"]},{"Key":"Isn't (int)floor(a/60.0)","Fragments":["the"]},{"Key":"(int)floor(a/60.0) the","Fragments":["same"]},{"Key":"a /","Fragments":["60","60"]},{"Key":"/ 60","Fragments":["...","==","-"]},{"Key":"60 ...","Fragments":["but"]},{"Key":"... but","Fragments":["slower?"]},{"Key":"Not all","Fragments":["of"]},{"Key":"your methods","Fragments":["need","returning","and"]},{"Key":"methods need","Fragments":["to"]},{"Key":"be public.","Fragments":["Why"]},{"Key":"public. Why","Fragments":["make"]},{"Key":"Why make","Fragments":["the"]},{"Key":"constructor or","Fragments":["str","a"]},{"Key":"or str","Fragments":["public,"]},{"Key":"str public,","Fragments":["for"]},{"Key":"public, for","Fragments":["instance?"]},{"Key":"The final","Fragments":["line","few","solution","check"]},{"Key":"line looks","Fragments":["like"]},{"Key":"different statement","Fragments":["to"]},{"Key":"me. Or","Fragments":["in"]},{"Key":"Or in","Fragments":["a"]},{"Key":"a higher-scoped","Fragments":["ternary"]},{"Key":"higher-scoped ternary","Fragments":["like"]},{"Key":"return i","Fragments":["%","%"]},{"Key":"i %","Fragments":["3","5","7","3","5","7"]},{"Key":"% 3","Fragments":["\u0026\u0026","\u0026\u0026"]},{"Key":"3 \u0026\u0026","Fragments":["i","i"]},{"Key":"\u0026\u0026 i","Fragments":["%","%","%","%","\u003c"]},{"Key":"% 5","Fragments":["\u0026\u0026","\u0026\u0026"]},{"Key":"5 \u0026\u0026","Fragments":["i","i"]},{"Key":"% 7","Fragments":["?","?"]},{"Key":"7 ?","Fragments":["to_string(i)","to_string(i)"]},{"Key":"? to_string(i)","Fragments":[":",":"]},{"Key":"to_string(i) :","Fragments":["(","("]},{"Key":": (","Fragments":["all","all"]},{"Key":"( all","Fragments":["that","that"]},{"Key":"that other","Fragments":["stuff","stuff","stuff","file"]},{"Key":"other stuff","Fragments":[");",");","later.","brought","from"]},{"Key":"don't know,","Fragments":["adding","it","but"]},{"Key":"know, adding","Fragments":["\"\""]},{"Key":"adding \"\"","Fragments":["every"]},{"Key":"\"\" every","Fragments":["time"]},{"Key":"time the","Fragments":["first","function","requirements"]},{"Key":"first three","Fragments":["expressions"]},{"Key":"three expressions","Fragments":["have"]},{"Key":"expressions have","Fragments":["meaning"]},{"Key":"have meaning","Fragments":["(and"]},{"Key":"meaning (and","Fragments":["throwing"]},{"Key":"(and throwing","Fragments":["them"]},{"Key":"throwing them","Fragments":["away"]},{"Key":"them away","Fragments":["in","and"]},{"Key":"away in","Fragments":["other"]},{"Key":"other cases)","Fragments":["seems"]},{"Key":"cases) seems","Fragments":["odd"]},{"Key":"seems odd","Fragments":["to","that"]},{"Key":"Also, convert","Fragments":["being"]},{"Key":"convert being","Fragments":["in"]},{"Key":"header should","Fragments":["be"]},{"Key":"be defined","Fragments":["in","inside","as","in"]},{"Key":"linker errors.","Fragments":["Like"]},{"Key":"errors. Like","Fragments":["inline,"]},{"Key":"Like inline,","Fragments":["static,"]},{"Key":" result","Fragments":["=","*=","*=","+="]},{"Key":"\"\" is","Fragments":["redundant,"]},{"Key":"is redundant,","Fragments":["since","at","which"]},{"Key":"redundant, since","Fragments":["the"]},{"Key":"default value.","Fragments":["It's"]},{"Key":"value. It's","Fragments":["the"]},{"Key":"It's the","Fragments":["same","cost","last","same"]},{"Key":"std::string convert;","Fragments":["and"]},{"Key":"convert; and","Fragments":["I"]},{"Key":"the latter.","Fragments":["If"]},{"Key":"latter. If","Fragments":["you"]},{"Key":"it's cleaner","Fragments":["this"]},{"Key":"cleaner this","Fragments":["way,"]},{"Key":"way, we","Fragments":["should"]},{"Key":"still prefer","Fragments":["uniform"]},{"Key":"prefer uniform","Fragments":["initialization"]},{"Key":"uniform initialization","Fragments":["like:","because","is","syntax"]},{"Key":" or","Fragments":["if","maybe","a","pass","only","into"]},{"Key":"you buy","Fragments":["into"]},{"Key":"buy into","Fragments":["AAA"]},{"Key":"into AAA","Fragments":["(almost"]},{"Key":"AAA (almost","Fragments":["always"]},{"Key":"(almost always","Fragments":["auto)"]},{"Key":" auto","Fragments":["result","const","begin_it","end_it","m","end","would","r","end","start_of_hello","start_of_hello","begin(String","end(String","my_string","RESPONSE_TO_SILENCE","RESPONSE_TO_YELLING","RESPONSE_TO_QUESTIONS","DEFAULT_RESPONSE","RESPONSE_TO_SILENCE","hey(std::string","hey(std::string","cbegin()","functor","result1","result2","i","is","i","a","b","c","d","it","curr","wordStart","wordEnd","translate"]},{"Key":"auto result","Fragments":["="]},{"Key":" Likewise","Fragments":["=="]},{"Key":"Likewise ==","Fragments":["\"\""]},{"Key":"== \"\"","Fragments":["seems",")"]},{"Key":"\"\" seems","Fragments":["less"]},{"Key":"seems less","Fragments":["idiomatic"]},{"Key":"less idiomatic","Fragments":["to"]},{"Key":"idiomatic to","Fragments":["me","write"]},{"Key":"me than","Fragments":[".empty()"]},{"Key":"But these","Fragments":["are"]},{"Key":"these are","Fragments":["pretty","private","function","set","just"]},{"Key":"are pretty","Fragments":["tiny","nitpicky:","simple"]},{"Key":"pretty tiny","Fragments":["issues."]},{"Key":"tiny issues.","Fragments":["This"]},{"Key":"issues. This","Fragments":["is"]},{"Key":"a solid","Fragments":["implementation.","first"]},{"Key":"I happen","Fragments":["to"]},{"Key":"happen to","Fragments":["prefer","me","be","be"]},{"Key":"to prefer","Fragments":[".append(\"Plang\")","`!work.empty()`","a","std::algorithms.","```using"]},{"Key":"prefer .append(\"Plang\")","Fragments":["to"]},{"Key":".append(\"Plang\") to","Fragments":["+="]},{"Key":"to +=","Fragments":["\"Plang\"."]},{"Key":"+= \"Plang\".","Fragments":["But"]},{"Key":"\"Plang\". But","Fragments":["they"]},{"Key":"But they","Fragments":["do"]},{"Key":"the Pling","Fragments":["case"]},{"Key":"Pling case","Fragments":["maybe"]},{"Key":"case maybe","Fragments":["it","I"]},{"Key":"maybe it","Fragments":["would","should","wants","would"]},{"Key":"be clearer","Fragments":["to","what","to","as","if","in"]},{"Key":"clearer to","Fragments":["use","see","read","have"]},{"Key":"use .assign(\"Pling\")","Fragments":["or"]},{"Key":".assign(\"Pling\") or","Fragments":["output"]},{"Key":"or output","Fragments":["="]},{"Key":"output =","Fragments":["\"Pling\"."]},{"Key":"= \"Pling\".","Fragments":["I"]},{"Key":"\"Pling\". I","Fragments":["know"]},{"Key":"know in","Fragments":["English"]},{"Key":"English class","Fragments":["they"]},{"Key":"class they","Fragments":["taught"]},{"Key":"they taught","Fragments":["us"]},{"Key":"taught us","Fragments":["parallel"]},{"Key":"us parallel","Fragments":["construction"]},{"Key":"parallel construction","Fragments":["was"]},{"Key":"construction was","Fragments":["the"]},{"Key":"the sign","Fragments":["of"]},{"Key":"sign of","Fragments":["mature"]},{"Key":"of mature","Fragments":["writing,"]},{"Key":"mature writing,","Fragments":["but"]},{"Key":"writing, but","Fragments":["in"]},{"Key":"code overly","Fragments":["similar"]},{"Key":"overly similar","Fragments":["lines"]},{"Key":"similar lines","Fragments":["has"]},{"Key":"lines has","Fragments":["led"]},{"Key":"has led","Fragments":["to"]},{"Key":"led to","Fragments":["many"]},{"Key":"many errors.","Fragments":["http://www.researchgate.net/publication/276969092_The_Last_Line_Effect"]},{"Key":" !","Fragments":["ret.empty()"]},{"Key":"! ret.empty()","Fragments":["or"]},{"Key":"ret.empty() or","Fragments":["ret.size()"]},{"Key":"or ret.size()","Fragments":["!="]},{"Key":"ret.size() !=","Fragments":["0"]},{"Key":"0 is,","Fragments":["I"]},{"Key":"think, cleaner,","Fragments":["but"]},{"Key":"cleaner, but","Fragments":["it","not"]},{"Key":"doesn't really","Fragments":["matter.","rise","encapsulate","prevent","matter","matter."]},{"Key":"really matter.","Fragments":["If"]},{"Key":"matter. If","Fragments":["you"]},{"Key":"you turn","Fragments":["off","off"]},{"Key":"turn off","Fragments":["all","all","the"]},{"Key":"off all","Fragments":["optimizations","optimizations","the"]},{"Key":"all optimizations","Fragments":["I","in"]},{"Key":"optimizations I","Fragments":["guess"]},{"Key":"few clock","Fragments":["cycles"]},{"Key":"clock cycles","Fragments":["faster"]},{"Key":"cycles faster","Fragments":["because"]},{"Key":"faster because","Fragments":["it"]},{"Key":"doesn't have","Fragments":["to","to","an","any","much","pointless","an","a","a"]},{"Key":"to dereference","Fragments":["the"]},{"Key":"dereference the","Fragments":["pointer"]},{"Key":"see it's","Fragments":["pointing"]},{"Key":"it's pointing","Fragments":["to"]},{"Key":"pointing to","Fragments":["'\\0'."]},{"Key":" Question","Fragments":["to","about"]},{"Key":"Question to","Fragments":["all:"]},{"Key":"to all:","Fragments":["where"]},{"Key":"all: where","Fragments":["should"]},{"Key":"where should","Fragments":["constants"]},{"Key":"should constants","Fragments":["like"]},{"Key":"constants like","Fragments":["my"]},{"Key":"my dna_to_rna","Fragments":["be"]},{"Key":"dna_to_rna be","Fragments":["placed,"]},{"Key":"be placed,","Fragments":["for"]},{"Key":"placed, for","Fragments":["good"]},{"Key":"for good","Fragments":["c++"]},{"Key":"good c++","Fragments":["style?"]},{"Key":"c++ style?","Fragments":["I'm"]},{"Key":"style? I'm","Fragments":["always"]},{"Key":"I'm always","Fragments":["at","happy","learning","going"]},{"Key":"always at","Fragments":["a"]},{"Key":"a loss","Fragments":["when","as"]},{"Key":"loss when","Fragments":["I"]},{"Key":"want my","Fragments":["functions"]},{"Key":"my functions","Fragments":["to","and","and","have","because"]},{"Key":"to refer","Fragments":["to","to","to","to","to"]},{"Key":" (int)","Fragments":["floor("]},{"Key":"(int) floor(","Fragments":["-"]},{"Key":"floor( -","Fragments":["70"]},{"Key":"- 70","Fragments":["/"]},{"Key":"70 /","Fragments":["60.0)"]},{"Key":"/ 60.0)","Fragments":["=="]},{"Key":"60.0) ==","Fragments":["-2"]},{"Key":" -70","Fragments":["/"]},{"Key":"-70 /","Fragments":["60"]},{"Key":"60 ==","Fragments":["-1"]},{"Key":"an all","Fragments":["int"]},{"Key":"all int","Fragments":["version:"]},{"Key":"return (a","Fragments":["/","/"]},{"Key":"(a /","Fragments":["60)","60)"]},{"Key":"/ 60)","Fragments":["-","-"]},{"Key":"60) -","Fragments":["(int)(a","(a"]},{"Key":"- (int)(a","Fragments":["%"]},{"Key":"(int)(a %","Fragments":["60"]},{"Key":"% 60","Fragments":["\u003c","\u003c","\u003c","\u003c"]},{"Key":"60 \u003c","Fragments":["0","0","0?1:0","0);"]},{"Key":"\u003c 0","Fragments":[");","?1:0)"]},{"Key":" gives","Fragments":["me"]},{"Key":"answer i","Fragments":["want"]},{"Key":"- (a","Fragments":["%","%"]},{"Key":"(a %","Fragments":["60","60","60"]},{"Key":"Maybe compute","Fragments":["should"]},{"Key":"compute should","Fragments":["be"]},{"Key":"be inline,","Fragments":["static,","static,","static,"]},{"Key":"static, or","Fragments":["in","in","in"]},{"Key":"anonymous namespace.","Fragments":["It's","Is","This"]},{"Key":"It's in","Fragments":["a"]},{"Key":"it risks","Fragments":["being"]},{"Key":"risks being","Fragments":["included"]},{"Key":"being included","Fragments":["in"]},{"Key":"two source","Fragments":["files","files","files"]},{"Key":"files that","Fragments":["want","include","contained","will"]},{"Key":"that want","Fragments":["to"]},{"Key":"to link","Fragments":["together.","together","together,","to","to"]},{"Key":" yes","Fragments":["i","good"]},{"Key":"yes i","Fragments":["like"]},{"Key":"if i","Fragments":["could","have","want","have","wrote:","could"]},{"Key":"write it","Fragments":["without"]},{"Key":"without declaring","Fragments":["any","them"]},{"Key":"declaring any","Fragments":["variables."]},{"Key":"think i've","Fragments":["got"]},{"Key":"got another","Fragments":["version"]},{"Key":"version i","Fragments":["never","is"]},{"Key":"i never","Fragments":["submitted,"]},{"Key":"I'll submit","Fragments":["and","a"]},{"Key":"submit and","Fragments":["have"]},{"Key":"a mess","Fragments":["around"]},{"Key":" @eleanora","Fragments":["You're"]},{"Key":"@eleanora You're","Fragments":["right,"]},{"Key":"normally `inline`","Fragments":["such"]},{"Key":"`inline` such","Fragments":["functions"]},{"Key":"aware that","Fragments":["the","there","exercism","there","indexing"]},{"Key":"two options","Fragments":["you"]},{"Key":"options you","Fragments":["mentioned,"]},{"Key":"you mentioned,","Fragments":["have"]},{"Key":"mentioned, have","Fragments":["the"]},{"Key":"functions defined","Fragments":["in","in"]},{"Key":"headers --","Fragments":["thanks"]},{"Key":"-- thanks","Fragments":["for"]},{"Key":"Maybe convert","Fragments":["could"]},{"Key":"convert could","Fragments":["be"]},{"Key":"it's defined","Fragments":["in"]},{"Key":"your way","Fragments":["of","is","is","to"]},{"Key":"of handling","Fragments":["mod.","the"]},{"Key":"handling mod.","Fragments":["Mine"]},{"Key":"mod. Mine","Fragments":["is,"]},{"Key":"Mine is,","Fragments":["I"]},{"Key":"believe, mathematically","Fragments":["equivalent"]},{"Key":"mathematically equivalent","Fragments":["but"]},{"Key":"equivalent but","Fragments":["clunkier."]},{"Key":"but clunkier.","Fragments":["And"]},{"Key":"clunkier. And","Fragments":["it"]},{"Key":"And it","Fragments":["seems","is,","wasn't","will","wont"]},{"Key":"handle all","Fragments":["the"]},{"Key":"the cases","Fragments":["properly,","when","seemed","are"]},{"Key":"cases properly,","Fragments":["doesn't"]},{"Key":"properly, doesn't","Fragments":["it?"]},{"Key":"use v.back()","Fragments":["instead"]},{"Key":"v.back() instead","Fragments":["of"]},{"Key":"of v[v.length()","Fragments":["-"]},{"Key":"v[v.length() -","Fragments":["1]"]},{"Key":"and v.empty()","Fragments":["instead"]},{"Key":"v.empty() instead","Fragments":["of"]},{"Key":"of v.length()","Fragments":["=="]},{"Key":"v.length() ==","Fragments":["0"]},{"Key":"seems that","Fragments":["the","you","just"]},{"Key":"the `anagrams`","Fragments":["member"]},{"Key":"`anagrams` member","Fragments":["is"]},{"Key":"member is","Fragments":["a","only"]},{"Key":"a left-over","Fragments":["of"]},{"Key":"left-over of","Fragments":["a"]},{"Key":"a previous","Fragments":["approach","attempt"]},{"Key":"and serves","Fragments":["no"]},{"Key":"serves no","Fragments":["purpose"]},{"Key":"no purpose","Fragments":["anymore."]},{"Key":"Looks good","Fragments":["to","and","and","though."]},{"Key":"to me;","Fragments":["I"]},{"Key":"me; I","Fragments":["noticed"]},{"Key":"noticed only","Fragments":["two"]},{"Key":"two minor","Fragments":["issues:"]},{"Key":"0. If","Fragments":["you","I","you"]},{"Key":"you separate","Fragments":["the","into","the"]},{"Key":"the lower","Fragments":["case","case","case"]},{"Key":"case conversion","Fragments":["from","of"]},{"Key":"the sorting,","Fragments":["and"]},{"Key":"sorting, and","Fragments":["store"]},{"Key":"store `original`","Fragments":["in"]},{"Key":"`original` in","Fragments":["lower"]},{"Key":"in lower","Fragments":["case","case."]},{"Key":"case then","Fragments":["you"]},{"Key":"convert it","Fragments":["to","once","back."]},{"Key":"case again","Fragments":["each"]},{"Key":"again each","Fragments":["time"]},{"Key":"time in","Fragments":["`matches()`'s","c++."]},{"Key":"in `matches()`'s","Fragments":["loop."]},{"Key":"0. Also,","Fragments":["since"]},{"Key":"case conversion,","Fragments":["I"]},{"Key":"conversion, I","Fragments":["believe"]},{"Key":"that `#include","Fragments":["\u003ccctype\u003e`"]},{"Key":"`#include \u003ccctype\u003e`","Fragments":["isn't"]},{"Key":"\u003ccctype\u003e` isn't","Fragments":["necessary."]},{"Key":" Worth","Fragments":["pointing"]},{"Key":"Worth pointing","Fragments":["out."]},{"Key":"pointing out.","Fragments":["I"]},{"Key":"out. I","Fragments":["do","don't"]},{"Key":"do tend","Fragments":["to"]},{"Key":"tend to","Fragments":["forget","think","prefer","think","use","spend","prefer","prefer"]},{"Key":"forget that","Fragments":["things"]},{"Key":"that things","Fragments":["get","became"]},{"Key":"things get","Fragments":["initialized","converted"]},{"Key":"get initialized","Fragments":["to"]},{"Key":"initialized to","Fragments":["a","1.","1.","0","`true`,"]},{"Key":"when they're","Fragments":["declared.","local","done,"]},{"Key":"they're declared.","Fragments":["Thanks."]},{"Key":" `mapLetters[c]`","Fragments":["will"]},{"Key":"`mapLetters[c]` will","Fragments":["default-initialize"]},{"Key":"will default-initialize","Fragments":["to"]},{"Key":"default-initialize to","Fragments":["`0`"]},{"Key":"to `0`","Fragments":["on","."]},{"Key":"`0` on","Fragments":["first"]},{"Key":"each key","Fragments":["so"]},{"Key":"key so","Fragments":["you"]},{"Key":"initialize it","Fragments":["to","once","as"]},{"Key":"to `1`","Fragments":["\"manually\".","and"]},{"Key":"`1` \"manually\".","Fragments":["But"]},{"Key":"\"manually\". But","Fragments":["I"]},{"Key":"this on","Fragments":["another","gcc"]},{"Key":"on another","Fragments":["occasion","person's"]},{"Key":"another occasion","Fragments":["already"]},{"Key":"occasion already","Fragments":[":-)"]},{"Key":"sure whether","Fragments":["the","it's"]},{"Key":"check in","Fragments":["`matches()`","numerous","the","a"]},{"Key":"in `matches()`","Fragments":["is"]},{"Key":"`matches()` is","Fragments":["meant"]},{"Key":"is meant","Fragments":["as","as","to"]},{"Key":"early exit","Fragments":["to"]},{"Key":"exit to","Fragments":["avoid"]},{"Key":"avoid too","Fragments":["much"]},{"Key":"much work","Fragments":["but"]},{"Key":"work but","Fragments":["it","with","it"]},{"Key":"isn't really","Fragments":["necessary","necessary","a"]},{"Key":"really necessary","Fragments":["and","though.","for","to"]},{"Key":"necessary and","Fragments":["`containsSameLettersAs()`"]},{"Key":"and `containsSameLettersAs()`","Fragments":["will"]},{"Key":"`containsSameLettersAs()` will","Fragments":["take"]},{"Key":"will take","Fragments":["care","a","a","1","1","care","a","your"]},{"Key":" Unless","Fragments":["you"]},{"Key":"want the","Fragments":["class","test","`const`","elements","\"value\""]},{"Key":"class name","Fragments":["to"]},{"Key":"start in","Fragments":["upper"]},{"Key":"upper case,","Fragments":["the","but"]},{"Key":"case, the","Fragments":["need","definition","next"]},{"Key":"for `static","Fragments":["Anagram"]},{"Key":"`static Anagram","Fragments":["anagram()`"]},{"Key":"Anagram anagram()`","Fragments":["could"]},{"Key":"anagram()` could","Fragments":["be"]},{"Key":"be eliminated","Fragments":["by"]},{"Key":"eliminated by","Fragments":["renaming"]},{"Key":"by renaming","Fragments":["`class"]},{"Key":"renaming `class","Fragments":["Anagram`"]},{"Key":"`class Anagram`","Fragments":["to"]},{"Key":"Anagram` to","Fragments":["`class"]},{"Key":"to `class","Fragments":["anagram`."]},{"Key":"right. That","Fragments":["test"]},{"Key":"That test","Fragments":["doesn't","for"]},{"Key":"test doesn't","Fragments":["make"]},{"Key":"make any","Fragments":["sense.","difference","mistakes","copies"]},{"Key":"any sense.","Fragments":["or/or"]},{"Key":"sense. or/or","Fragments":["would"]},{"Key":"or/or would","Fragments":["make"]},{"Key":"have combined","Fragments":["\u003c=0,"]},{"Key":"combined \u003c=0,","Fragments":["except"]},{"Key":"\u003c=0, except","Fragments":["the"]},{"Key":"except the","Fragments":["tests"]},{"Key":"tests expected","Fragments":["different"]},{"Key":"expected different","Fragments":["results"]},{"Key":"different results","Fragments":["for"]},{"Key":"results for","Fragments":["the"]},{"Key":"two cases.","Fragments":["(I'm"]},{"Key":"cases. (I'm","Fragments":["not"]},{"Key":"sure what's","Fragments":["so","intended/desired,"]},{"Key":"what's so","Fragments":["special"]},{"Key":"so special","Fragments":["about"]},{"Key":"special about","Fragments":["zero","the"]},{"Key":"about zero","Fragments":["that"]},{"Key":"zero that","Fragments":["requires"]},{"Key":"that requires","Fragments":["an","you","a"]},{"Key":"requires an","Fragments":["error,"]},{"Key":"an error,","Fragments":["when"]},{"Key":"error, when","Fragments":["negatives"]},{"Key":"when negatives","Fragments":["do"]},{"Key":"negatives do","Fragments":["not.)"]},{"Key":"the floating","Fragments":["point"]},{"Key":"point warning.","Fragments":["That"]},{"Key":"warning. That","Fragments":["does"]},{"Key":"the kind","Fragments":["of","of","of"]},{"Key":"of issue","Fragments":["that","would"]},{"Key":"make you","Fragments":["think","list","code"]},{"Key":"were losing","Fragments":["your"]},{"Key":"losing your","Fragments":["mind.","place"]},{"Key":"Yeah, you're","Fragments":["right","right,","right."]},{"Key":"you're right","Fragments":["the","that","of","that","about","about","in"]},{"Key":"right the","Fragments":["results"]},{"Key":"results are","Fragments":["different","kind","reconstructed"]},{"Key":"are different","Fragments":["for","instructions,","lengths","sizes.","sizes."]},{"Key":"different for","Fragments":["0"]},{"Key":"0 vs.","Fragments":["-."]},{"Key":"vs. -.","Fragments":["And"]},{"Key":"-. And","Fragments":["it"]},{"Key":"opinion, bizarre","Fragments":["to"]},{"Key":"bizarre to","Fragments":["sometimes"]},{"Key":"to sometimes","Fragments":["return"]},{"Key":"sometimes return","Fragments":["an"]},{"Key":"return an","Fragments":["error","unsigned","enum,"]},{"Key":"error state","Fragments":["and"]},{"Key":"state and","Fragments":["sometimes"]},{"Key":"and sometimes","Fragments":["throw","not."]},{"Key":"sometimes throw","Fragments":["for"]},{"Key":"throw for","Fragments":["very"]},{"Key":"for very","Fragments":["similar","long"]},{"Key":"similar types","Fragments":["of"]},{"Key":"of errors.","Fragments":["Oh"]},{"Key":"errors. Oh","Fragments":["well."]},{"Key":"Not everything","Fragments":["does"]},{"Key":"everything does","Fragments":["in"]},{"Key":"does in","Fragments":["all"]},{"Key":"in all","Fragments":["cases","the","cases)","cases","of","its"]},{"Key":"all cases","Fragments":["(a","those","so"]},{"Key":"cases (a","Fragments":["local"]},{"Key":"(a local","Fragments":["int"]},{"Key":"local int","Fragments":["variable"]},{"Key":"int variable","Fragments":["would"]},{"Key":"variable would","Fragments":["be"]},{"Key":"be just","Fragments":["whatever),","me,","a","kept"]},{"Key":"just whatever),","Fragments":["but"]},{"Key":"whatever), but","Fragments":["classes"]},{"Key":"but classes","Fragments":["with"]},{"Key":"classes with","Fragments":["constructors","dropping"]},{"Key":"with constructors","Fragments":["and"]},{"Key":"constructors and","Fragments":["destructors"]},{"Key":"and destructors","Fragments":["get"]},{"Key":"destructors get","Fragments":["them"]},{"Key":"get them","Fragments":["called"]},{"Key":"them called","Fragments":["when"]},{"Key":"called when","Fragments":["they're","`input`"]},{"Key":"they're local","Fragments":["variables,"]},{"Key":"local variables,","Fragments":["and","for"]},{"Key":"variables, and","Fragments":["that's","compilers"]},{"Key":"and that's","Fragments":["really","something.","why","what","without","what","that.","all","it,"]},{"Key":"that's really","Fragments":["awesome"]},{"Key":"really awesome","Fragments":["because"]},{"Key":"awesome because","Fragments":["it"]},{"Key":"makes RAII","Fragments":["easy."]},{"Key":"You obiously","Fragments":["put"]},{"Key":"obiously put","Fragments":["a"]},{"Key":"put a","Fragments":["lot","global","little","\u0026","link","block"]},{"Key":"of thought","Fragments":["into"]},{"Key":"thought into","Fragments":["this!"]},{"Key":"think, optimizing","Fragments":["(that"]},{"Key":"optimizing (that","Fragments":["much)"]},{"Key":"(that much)","Fragments":["isn't"]},{"Key":"much) isn't","Fragments":["really"]},{"Key":"necessary though.","Fragments":["The"]},{"Key":"though. The","Fragments":["tests","idea","total","=="]},{"Key":"The tests","Fragments":["provide","will","are","were","don't"]},{"Key":"tests provide","Fragments":["no"]},{"Key":"provide no","Fragments":["input"]},{"Key":"no input","Fragments":["set","by"]},{"Key":"input set","Fragments":["to"]},{"Key":"optimize for","Fragments":["and"]},{"Key":"therefore optimizations","Fragments":["applied"]},{"Key":"optimizations applied","Fragments":["in"]},{"Key":"applied in","Fragments":["these"]},{"Key":"in these","Fragments":["solutions","functions,"]},{"Key":"these solutions","Fragments":["cannot"]},{"Key":"solutions cannot","Fragments":["be"]},{"Key":"cannot be","Fragments":["compared","modified","names","less","less"]},{"Key":"thanks trophy,","Fragments":["that"]},{"Key":"trophy, that","Fragments":["was"]},{"Key":"ensure i","Fragments":["always"]},{"Key":"always got","Fragments":["a"]},{"Key":"a positive","Fragments":["output","age"]},{"Key":"positive output","Fragments":["when"]},{"Key":"output when","Fragments":["a"]},{"Key":"a is","Fragments":["negative."]},{"Key":"is negative.","Fragments":["I"]},{"Key":"negative. I","Fragments":["was"]},{"Key":"minus without","Fragments":["an"]},{"Key":" am","Fragments":["a"]},{"Key":"am a","Fragments":["bit","jerk,","little","C","fan"]},{"Key":"bit disappointed","Fragments":["to"]},{"Key":"disappointed to","Fragments":["have"]},{"Key":" (a","Fragments":["%"]},{"Key":"\u003c 0?1:0","Fragments":[")"]},{"Key":"0?1:0 )","Fragments":["in"]},{"Key":") in","Fragments":["there"]},{"Key":"* Solution","Fragments":["divided"]},{"Key":"Solution divided","Fragments":["into"]},{"Key":"divided into","Fragments":["two"]},{"Key":"* Replaced","Fragments":["`find_if`"]},{"Key":"Replaced `find_if`","Fragments":["with"]},{"Key":"`find_if` with","Fragments":["`any_of`","a"]},{"Key":"with `any_of`","Fragments":["and"]},{"Key":"`any_of` and","Fragments":["removed","`all_of`"]},{"Key":"and removed","Fragments":["all","an"]},{"Key":"removed all","Fragments":["lambdas.","outer"]},{"Key":" Oops.","Fragments":["Forgot"]},{"Key":"Oops. Forgot","Fragments":["to"]},{"Key":"Forgot to","Fragments":["un-name","pass","remove"]},{"Key":"to un-name","Fragments":["the"]},{"Key":"un-name the","Fragments":["parameter."]},{"Key":"the parameter.","Fragments":["Wassup"]},{"Key":"parameter. Wassup","Fragments":["with"]},{"Key":"Wassup with","Fragments":["the"]},{"Key":"the warning","Fragments":["level?"]},{"Key":" Oh!","Fragments":["I'm"]},{"Key":"Oh! I'm","Fragments":["supposed"]},{"Key":"I'm supposed","Fragments":["to"]},{"Key":"move that","Fragments":["`#define`","got","if"]},{"Key":"that `#define`","Fragments":["on"]},{"Key":"`#define` on","Fragments":["to"]},{"Key":"on to","Fragments":["the","that","the","this"]},{"Key":"next test","Fragments":["and","by","of","requires"]},{"Key":"and iterate!","Fragments":["Ok!"]},{"Key":" Too","Fragments":["many"]},{"Key":"Too many","Fragments":["calls"]},{"Key":"many calls","Fragments":["to"]},{"Key":"to `is_silent()`,","Fragments":["I"]},{"Key":"`is_silent()`, I","Fragments":["find..."]},{"Key":" is_silent()","Fragments":["checks"]},{"Key":"is_silent() checks","Fragments":["for"]},{"Key":"checks for","Fragments":["alnum,","edge","commas","hasAlpha","special","a","each","each","silence"]},{"Key":"for alnum,","Fragments":["is"]},{"Key":"alnum, is","Fragments":["all."]},{"Key":"is all.","Fragments":["this"]},{"Key":"all. this","Fragments":["way"]},{"Key":"way only","Fragments":["text","using"]},{"Key":"only text","Fragments":["matters."]},{"Key":" dynamic","Fragments":["programming"]},{"Key":"dynamic programming","Fragments":["is_silent()."]},{"Key":"programming is_silent().","Fragments":["so"]},{"Key":"is_silent(). so","Fragments":["is_shouting()"]},{"Key":"so is_shouting()","Fragments":["and"]},{"Key":"is_shouting() and","Fragments":["is_question()"]},{"Key":"and is_question()","Fragments":["assume"]},{"Key":"is_question() assume","Fragments":["not"]},{"Key":"assume not","Fragments":["is_silent()."]},{"Key":"Is a","Fragments":["class","class","signed","good"]},{"Key":"class necessary","Fragments":["here?","here?"]},{"Key":"using quotes","Fragments":["eg"]},{"Key":"quotes eg","Fragments":["'XI'"]},{"Key":"eg 'XI'","Fragments":["instead"]},{"Key":"'XI' instead","Fragments":["of"]},{"Key":"of bar","Fragments":["over"]},{"Key":"bar over","Fragments":["the"]},{"Key":"top to","Fragments":["indicate","bottom."]},{"Key":"indicate for","Fragments":["thousands"]},{"Key":"for thousands","Fragments":["in"]},{"Key":"thousands in","Fragments":["numbers"]},{"Key":"in numbers","Fragments":["4000","greater"]},{"Key":"numbers 4000","Fragments":["and"]},{"Key":"4000 and","Fragments":["over,"]},{"Key":"and over,","Fragments":["will"]},{"Key":"over, will","Fragments":["implement"]},{"Key":"will implement","Fragments":["||","your","in"]},{"Key":"implement ||","Fragments":["notation"]},{"Key":"|| notation","Fragments":["for"]},{"Key":"notation for","Fragments":["hundreds"]},{"Key":"for hundreds","Fragments":["of"]},{"Key":"hundreds of","Fragments":["thousands"]},{"Key":"of thousands","Fragments":["etc."]},{"Key":"what os","Fragments":["are"]},{"Key":"os are","Fragments":["you"]},{"Key":"on trophy?","Fragments":["from"]},{"Key":"trophy? from","Fragments":["osx"]},{"Key":"from osx","Fragments":["i"]},{"Key":"osx i","Fragments":["don't"]},{"Key":"don't seem","Fragments":["to","to"]},{"Key":"files (h","Fragments":["and"]},{"Key":"(h and","Fragments":["cpp)"]},{"Key":"and cpp)","Fragments":["only"]},{"Key":"cpp) only","Fragments":["one"]},{"Key":"Is boost","Fragments":["necessary","necessary"]},{"Key":"boost necessary","Fragments":["here?","here?"]},{"Key":"the iostreams","Fragments":["necessary","necessary"]},{"Key":"iostreams necessary","Fragments":["here?","here?"]},{"Key":" Used","Fragments":["const","case","the","the","C++"]},{"Key":"Used const","Fragments":["reference"]},{"Key":"removed unused","Fragments":["include","`regex_match`"]},{"Key":" Q:","Fragments":["Is","Is","Are"]},{"Key":"Q: Is","Fragments":["a","boost"]},{"Key":" A:","Fragments":["No.","Yes.","No."]},{"Key":"A: No.","Fragments":["I've","I've"]},{"Key":"No. I've","Fragments":["did","forgotten"]},{"Key":"I've did","Fragments":["some"]},{"Key":"research on","Fragments":["the"]},{"Key":"the internet","Fragments":["and"]},{"Key":"internet and","Fragments":["namespaces"]},{"Key":"and namespaces","Fragments":["are","are"]},{"Key":"namespaces are","Fragments":["better","not","the","used","Egyptian","not"]},{"Key":"better in","Fragments":["C++","the","this"]},{"Key":"C++ than","Fragments":["\"static"]},{"Key":"than \"static","Fragments":["classes\"."]},{"Key":"A: Yes.","Fragments":["Without"]},{"Key":"Yes. Without","Fragments":["it"]},{"Key":"Without it","Fragments":["I","you"]},{"Key":"function similar","Fragments":["to"]},{"Key":"to `trim`","Fragments":["and","is"]},{"Key":"`trim` and","Fragments":["`all`"]},{"Key":"and `all`","Fragments":["myself."]},{"Key":"`all` myself.","Fragments":["So"]},{"Key":"myself. So","Fragments":["why"]},{"Key":"So why","Fragments":["reinvent"]},{"Key":"why reinvent","Fragments":["the","the"]},{"Key":"reinvent the","Fragments":["wheel?","wheel?","`std::inner_product()`"]},{"Key":"Q: Are","Fragments":["the"]},{"Key":"I've forgotten","Fragments":["to","a"]},{"Key":"forgotten to","Fragments":["delete"]},{"Key":"delete that","Fragments":["from","part)."]},{"Key":"that from","Fragments":["an","many","[my"]},{"Key":"usually submit","Fragments":["on"]},{"Key":"submit on","Fragments":["Ubuntu,"]},{"Key":"on Ubuntu,","Fragments":["but"]},{"Key":"Ubuntu, but","Fragments":["sometimes"]},{"Key":"but sometimes","Fragments":["inside"]},{"Key":"sometimes inside","Fragments":["Cygwin"]},{"Key":"inside Cygwin","Fragments":["on"]},{"Key":"Cygwin on","Fragments":["Windows"]},{"Key":"on Windows","Fragments":["(but"]},{"Key":"Windows (but","Fragments":["using"]},{"Key":"(but using","Fragments":["the"]},{"Key":"the regular","Fragments":["Windows","expression","expression","expressions"]},{"Key":"regular Windows","Fragments":["client)."]},{"Key":"submit raindrops.cpp","Fragments":["raindrops.hpp"]},{"Key":"works for","Fragments":["me","some","sure.","you.","this"]},{"Key":"me (or","Fragments":["something"]},{"Key":"(or something","Fragments":["that"]},{"Key":"that resolves","Fragments":["to"]},{"Key":"resolves to","Fragments":["that"]},{"Key":"after globbing)","Fragments":["and"]},{"Key":"globbing) and","Fragments":["if"]},{"Key":"use --test","Fragments":["you"]},{"Key":"--test you","Fragments":["can"]},{"Key":"can upload","Fragments":["the","multiple"]},{"Key":"upload the","Fragments":["test"]},{"Key":"test file,","Fragments":["too"]},{"Key":"submit --test","Fragments":["*.?pp"]},{"Key":" Although","Fragments":["it","it","the","you're"]},{"Key":"Although it","Fragments":["may","is"]},{"Key":"may depend","Fragments":["on"]},{"Key":"depend on","Fragments":["what","where","the"]},{"Key":"what version","Fragments":["(age,"]},{"Key":"version (age,","Fragments":["release)"]},{"Key":"(age, release)","Fragments":["of"]},{"Key":"release) of","Fragments":["the"]},{"Key":"the client","Fragments":["you"]},{"Key":"client you","Fragments":["use,"]},{"Key":"you use,","Fragments":["since"]},{"Key":"use, since","Fragments":["this"]},{"Key":"this apparently","Fragments":["did"]},{"Key":"apparently did","Fragments":["not"]},{"Key":"not originally","Fragments":["exist"]},{"Key":"originally exist","Fragments":["and"]},{"Key":"exist and","Fragments":["was","implement"]},{"Key":"and was","Fragments":["added","trying","sort","trying","confused."]},{"Key":"was added","Fragments":["later:","to","to","to","just"]},{"Key":"added later:","Fragments":["https://github.com/exercism/exercism.io/issues/1165"]},{"Key":" $exercism","Fragments":["help","--help"]},{"Key":"$exercism help","Fragments":["submit"]},{"Key":" submit","Fragments":["-"]},{"Key":"submit -","Fragments":["Submits"]},{"Key":"- Submits","Fragments":["a"]},{"Key":"Submits a","Fragments":["new","new"]},{"Key":"new iteration","Fragments":["to","until","without","soon.","a","to","accordingly.","when","based","though","form,"]},{"Key":"iteration to","Fragments":["a","another,","a","the"]},{"Key":"problem on","Fragments":["exercism.io.","exercism.io."]},{"Key":" command","Fragments":["submit"]},{"Key":"command submit","Fragments":["[command"]},{"Key":"submit [command","Fragments":["options]"]},{"Key":"[command options]","Fragments":["[arguments...]","[arguments...]"]},{"Key":" --test","Fragments":["allow"]},{"Key":"--test allow","Fragments":["submission"]},{"Key":"allow submission","Fragments":["of"]},{"Key":"submission of","Fragments":["test","the"]},{"Key":"of test","Fragments":["files"]},{"Key":"Looks great;","Fragments":["I"]},{"Key":"great; I","Fragments":["only"]},{"Key":"only found","Fragments":["one","floating","that"]},{"Key":"found one","Fragments":["nit"]},{"Key":"to pick:","Fragments":["The"]},{"Key":"pick: The","Fragments":["`word_`"]},{"Key":"The `word_`","Fragments":["member"]},{"Key":"`word_` member","Fragments":["is"]},{"Key":"length but","Fragments":["the"]},{"Key":"other 2","Fragments":["members"]},{"Key":"2 members","Fragments":["can"]},{"Key":"members can","Fragments":["be"]},{"Key":"that as","Fragments":["well.","its","a","the","it","I","empty.","long"]},{"Key":" `isblank()`","Fragments":["is"]},{"Key":"`isblank()` is","Fragments":["a"]},{"Key":"of `isspace()`","Fragments":["so"]},{"Key":"`isspace()` so","Fragments":["it's"]},{"Key":"it's enough","Fragments":["to"]},{"Key":"use `isspace()`.","Fragments":["See"]},{"Key":"`isspace()`. See","Fragments":["here"]},{"Key":"See here","Fragments":["for"]},{"Key":"more details:","Fragments":["[CPP"]},{"Key":"details: [CPP","Fragments":["Reference](http://en.cppreference.com/w/cpp/string/byte/isblank)"]},{"Key":"One efficiency","Fragments":["consideration,"]},{"Key":"efficiency consideration,","Fragments":["if"]},{"Key":"consideration, if","Fragments":["we're"]},{"Key":"if we're","Fragments":["going","only","going"]},{"Key":"we're going","Fragments":["to","to"]},{"Key":"to ditch","Fragments":["C++"]},{"Key":"ditch C++","Fragments":["for"]},{"Key":"C++ for","Fragments":["performance","this"]},{"Key":"performance reasons:","Fragments":["is"]},{"Key":"reasons: is","Fragments":["it"]},{"Key":"it possible","Fragments":["to","to","to","to","to"]},{"Key":"only walk","Fragments":["the"]},{"Key":"walk the","Fragments":["string"]},{"Key":"string once?","Fragments":["At"]},{"Key":"once? At","Fragments":["the"]},{"Key":"very least,","Fragments":["couldn't"]},{"Key":"least, couldn't","Fragments":["`IsQuestion`"]},{"Key":"couldn't `IsQuestion`","Fragments":["also"]},{"Key":"`IsQuestion` also","Fragments":["give"]},{"Key":"also give","Fragments":["you"]},{"Key":"Why copy","Fragments":["`input`"]},{"Key":"copy `input`","Fragments":["in"]},{"Key":"`input` in","Fragments":["the"]},{"Key":"the loop?","Fragments":["Why","If"]},{"Key":"loop? Why","Fragments":["not"]},{"Key":"just take","Fragments":["the","`digits`"]},{"Key":"the `input`","Fragments":["parameter"]},{"Key":"`input` parameter","Fragments":["by"]},{"Key":"value? Also,","Fragments":["there's"]},{"Key":"Also, there's","Fragments":["a"]},{"Key":"a range","Fragments":["overload","(i.e.","of","of","based","based","that","for","for","for","for"]},{"Key":"range overload","Fragments":["to"]},{"Key":"overload to","Fragments":["`regex_search()`."]},{"Key":" Thanks;","Fragments":["I"]},{"Key":"Thanks; I","Fragments":["am"]},{"Key":"am new","Fragments":["to"]},{"Key":"to C++'s","Fragments":["regex"]},{"Key":"C++'s regex","Fragments":["facilities","library"]},{"Key":"regex facilities","Fragments":["and"]},{"Key":"facilities and","Fragments":["figured"]},{"Key":"figured there","Fragments":["must"]},{"Key":"be tighter","Fragments":["ways"]},{"Key":"tighter ways","Fragments":["to"]},{"Key":" `downcase()`:","Fragments":["You"]},{"Key":"`downcase()`: You","Fragments":["can"]},{"Key":"use `std::transform()`","Fragments":["in-place."]},{"Key":"`std::transform()` in-place.","Fragments":["It's"]},{"Key":"in-place. It's","Fragments":["more"]},{"Key":"It's more","Fragments":["efficient"]},{"Key":"efficient than","Fragments":["iteratively","x","the","using","a"]},{"Key":"than iteratively","Fragments":["growing"]},{"Key":"iteratively growing","Fragments":["a"]},{"Key":"growing a","Fragments":["copy"]},{"Key":"Thanks. I","Fragments":["was","am","think"]},{"Key":"was originally","Fragments":["going","meant","going"]},{"Key":"originally going","Fragments":["to","to"]},{"Key":"little state","Fragments":["machine,"]},{"Key":"state machine,","Fragments":["but"]},{"Key":"machine, but","Fragments":["I"]},{"Key":"to explore","Fragments":["the"]},{"Key":"explore the","Fragments":["regex"]},{"Key":"regex facilities.","Fragments":["BTW"]},{"Key":"facilities. BTW","Fragments":["I"]},{"Key":"BTW I","Fragments":["really"]},{"Key":"appreciate the","Fragments":["copying","help.","feedback,","resources!__","issue","help!","call"]},{"Key":"copying nitpicks.","Fragments":["(Coming"]},{"Key":"nitpicks. (Coming","Fragments":["back"]},{"Key":"(Coming back","Fragments":["to"]},{"Key":"C++ after","Fragments":["many"]},{"Key":"after many","Fragments":["years"]},{"Key":"many years","Fragments":["away"]},{"Key":"years away","Fragments":["and"]},{"Key":"back in","Fragments":["the","that","it,","college"]},{"Key":"the mindset","Fragments":["of"]},{"Key":"mindset of","Fragments":["always"]},{"Key":"of always","Fragments":["thinking"]},{"Key":"always thinking","Fragments":["about"]},{"Key":"about pass-by-value/reference","Fragments":["and"]},{"Key":"pass-by-value/reference and","Fragments":["where"]},{"Key":"and where","Fragments":["copies","the"]},{"Key":"where copies","Fragments":["might"]},{"Key":"copies might","Fragments":["happen"]},{"Key":"might happen","Fragments":["or"]},{"Key":"happen or","Fragments":["need"]},{"Key":"or need","Fragments":["to"]},{"Key":"to happen.","Fragments":["One","I'm"]},{"Key":"happen. One","Fragments":["of"]},{"Key":"One of","Fragments":["the","the","my","the","the"]},{"Key":"the reasons","Fragments":["I'm","you"]},{"Key":"reasons I'm","Fragments":["doing"]},{"Key":"I'm doing","Fragments":["these","this","gets","something"]},{"Key":"doing these","Fragments":["problems"]},{"Key":"problems is","Fragments":["to"]},{"Key":"that mode,","Fragments":["as"]},{"Key":"mode, as","Fragments":["well"]},{"Key":"as learn","Fragments":["the"]},{"Key":"newer C++11","Fragments":["concepts.)"]},{"Key":" Less","Fragments":["code,"]},{"Key":"Less code,","Fragments":["less"]},{"Key":"code, less","Fragments":["functional."]},{"Key":"less functional.","Fragments":["An"]},{"Key":"functional. An","Fragments":["improvement?"]},{"Key":"An improvement?","Fragments":["You"]},{"Key":"improvement? You","Fragments":["tell"]},{"Key":"You tell","Fragments":["me."]},{"Key":" no","Fragments":["need"]},{"Key":"to repeatedly","Fragments":["sort"]},{"Key":"repeatedly sort","Fragments":["and"]},{"Key":"sort and","Fragments":["downcase","then","compare","compare","it","transform"]},{"Key":"and downcase","Fragments":["the"]},{"Key":"downcase the","Fragments":["member"]},{"Key":"make `the_verses`","Fragments":["a"]},{"Key":"`the_verses` a","Fragments":["`std::vector\u003cconst"]},{"Key":"a `std::vector\u003cconst","Fragments":["std::string\u003e`?"]},{"Key":"`std::vector\u003cconst std::string\u003e`?","Fragments":["One"]},{"Key":"std::string\u003e`? One","Fragments":["of"]},{"Key":"things that's","Fragments":["nice"]},{"Key":"that's nice","Fragments":["about","to"]},{"Key":"nice about","Fragments":["this"]},{"Key":"implementation approach","Fragments":["is"]},{"Key":"your individual","Fragments":["verse"]},{"Key":"individual verse","Fragments":["returns"]},{"Key":"verse returns","Fragments":["could"]},{"Key":"returns could","Fragments":["be"]},{"Key":"const, which","Fragments":["is","is"]},{"Key":"nice if","Fragments":["the","I"]},{"Key":"in ROM","Fragments":["and"]},{"Key":"ROM and","Fragments":["you"]},{"Key":"to conserve","Fragments":["RAM.","space."]},{"Key":"make boost::range","Fragments":["use"]},{"Key":"boost::range use","Fragments":["composable"]},{"Key":"use composable","Fragments":["transforms/functions/whatever"]},{"Key":"composable transforms/functions/whatever","Fragments":["such"]},{"Key":"transforms/functions/whatever such","Fragments":["that"]},{"Key":"such that","Fragments":["I","only","the"]},{"Key":"can separate","Fragments":["their"]},{"Key":"separate their","Fragments":["definition"]},{"Key":"their definition","Fragments":["form"]},{"Key":"definition form","Fragments":["calling"]},{"Key":"form calling","Fragments":["them."]},{"Key":"the static","Fragments":["lambda","cast","class","class"]},{"Key":"static lambda","Fragments":["variables"]},{"Key":"lambda variables","Fragments":["look"]},{"Key":"variables look","Fragments":["ugly"]},{"Key":"look ugly","Fragments":["to"]},{"Key":"ugly to","Fragments":["me,","me."]},{"Key":"me, but","Fragments":["I'm","I'd","I'll","I","if","since"]},{"Key":"mostly coming","Fragments":["from"]},{"Key":"a javascript","Fragments":["where"]},{"Key":"javascript where","Fragments":["all"]},{"Key":"where all","Fragments":["scopes","my"]},{"Key":"all scopes","Fragments":["are"]},{"Key":"scopes are","Fragments":["created"]},{"Key":"are created","Fragments":["more"]},{"Key":"created more","Fragments":["or"]},{"Key":"more or","Fragments":["less","less","less","less","less.","less","less"]},{"Key":"or less","Fragments":["equal.","the","than","clear/maintainable,","the","technical","(I'm","readable"]},{"Key":"A container's","Fragments":["`value_type`"]},{"Key":"container's `value_type`","Fragments":["must"]},{"Key":"`value_type` must","Fragments":["be"]},{"Key":"be copy","Fragments":["assignable"]},{"Key":"copy assignable","Fragments":["or"]},{"Key":"assignable or","Fragments":["moveable."]},{"Key":"or moveable.","Fragments":["If"]},{"Key":"moveable. If","Fragments":["T"]},{"Key":"If T","Fragments":["is"]},{"Key":"T is","Fragments":["const"]},{"Key":"is const","Fragments":["then","has","-"]},{"Key":"const then","Fragments":["that"]},{"Key":"that fails","Fragments":["this"]},{"Key":"fails this","Fragments":["requirement."]},{"Key":"this (the","Fragments":["requirements)"]},{"Key":"(the requirements)","Fragments":["is"]},{"Key":"requirements) is","Fragments":["mentioned"]},{"Key":"is mentioned","Fragments":["in"]},{"Key":"in section","Fragments":["23.2.1/13"]},{"Key":"section 23.2.1/13","Fragments":["of"]},{"Key":"23.2.1/13 of","Fragments":["the"]},{"Key":"it necessary?","Fragments":["Where?"]},{"Key":"necessary? Where?","Fragments":["In"]},{"Key":"Where? In","Fragments":["`isYell()`?"]},{"Key":"In `isYell()`?","Fragments":["How"]},{"Key":"`isYell()`? How","Fragments":["about"]},{"Key":"bool any_of_is_alpha","Fragments":["="]},{"Key":"any_of_is_alpha =","Fragments":["std::any_of(begin(msg),"]},{"Key":"= std::any_of(begin(msg),","Fragments":["end(msg),"]},{"Key":"std::any_of(begin(msg), end(msg),","Fragments":["::isalpha);"]},{"Key":"bool all_alphas_are_uppercase","Fragments":["="]},{"Key":"all_alphas_are_uppercase =","Fragments":["std::all_of(begin(msg),"]},{"Key":"= std::all_of(begin(msg),","Fragments":["end(msg),"]},{"Key":"std::all_of(begin(msg), end(msg),","Fragments":["[](char"]},{"Key":"end(msg), [](char","Fragments":["c)"]},{"Key":"[](char c)","Fragments":["{","{","{","{","{","{","{","{"]},{"Key":"return !std::isalpha(c)","Fragments":["||"]},{"Key":"!std::isalpha(c) ||","Fragments":["std::isupper(c);"]},{"Key":"return any_of_is_alpha","Fragments":["\u0026\u0026"]},{"Key":"any_of_is_alpha \u0026\u0026","Fragments":["all_alphas_are_uppercase;"]},{"Key":"return std::find_if(begin(msg),","Fragments":["end(msg),"]},{"Key":"std::find_if(begin(msg), end(msg),","Fragments":["::islower)","::isupper)"]},{"Key":"end(msg), ::islower)","Fragments":["=="]},{"Key":"::islower) ==","Fragments":["end(msg)"]},{"Key":"== end(msg)","Fragments":["\u0026\u0026"]},{"Key":" std::find_if(begin(msg),","Fragments":["end(msg),"]},{"Key":"end(msg), ::isupper)","Fragments":["!="]},{"Key":"::isupper) !=","Fragments":["end(msg);"]},{"Key":"What does","Fragments":["`hey(\"?\")`","erg","the"]},{"Key":"does `hey(\"?\")`","Fragments":["return?"]},{"Key":"`hey(\"?\")` return?","Fragments":["Shouldn't"]},{"Key":"return? Shouldn't","Fragments":["that"]},{"Key":"Shouldn't that","Fragments":["be"]},{"Key":"first iteration,","Fragments":["in","function","the"]},{"Key":"iteration, in","Fragments":["exchange"]},{"Key":"in exchange","Fragments":["for"]},{"Key":"exchange for","Fragments":["runtime"]},{"Key":"for runtime","Fragments":["performance:"]},{"Key":"runtime performance:","Fragments":["we"]},{"Key":"performance: we","Fragments":["only"]},{"Key":"we only","Fragments":["do","had"]},{"Key":"only do","Fragments":["the","one"]},{"Key":"the counting","Fragments":["once,","of","phase"]},{"Key":"counting once,","Fragments":["at"]},{"Key":"once, at","Fragments":["construction,"]},{"Key":"at construction,","Fragments":["and"]},{"Key":"construction, and","Fragments":["subsequent"]},{"Key":"and subsequent","Fragments":["count"]},{"Key":"subsequent count","Fragments":["calls"]},{"Key":"count calls","Fragments":["retrieve"]},{"Key":"calls retrieve","Fragments":["the"]},{"Key":"retrieve the","Fragments":["cached","cached"]},{"Key":"the cached","Fragments":["counts.","counting,"]},{"Key":"cached counts.","Fragments":["So"]},{"Key":"counts. So","Fragments":["the"]},{"Key":"the increase","Fragments":["in"]},{"Key":"in splitting","Fragments":["the"]},{"Key":"splitting the","Fragments":["count","string"]},{"Key":"count functions","Fragments":["into"]},{"Key":"functions into","Fragments":["\"real\"","an"]},{"Key":"into \"real\"","Fragments":["ones"]},{"Key":"\"real\" ones","Fragments":["and"]},{"Key":"and \"fake\"","Fragments":["ones:"]},{"Key":"\"fake\" ones:","Fragments":["functions"]},{"Key":"ones: functions","Fragments":["that"]},{"Key":"functions that","Fragments":["really","retrieve","were","you","already","determine","are","work","encapsulate","could","can","extend","return","this","help","I","can","don't","return"]},{"Key":"that really","Fragments":["count","applies.","depends","helps!"]},{"Key":"really count","Fragments":["--"]},{"Key":"count --","Fragments":["these"]},{"Key":"-- these","Fragments":["are"]},{"Key":"are private","Fragments":["--"]},{"Key":"private --","Fragments":["and"]},{"Key":"-- and","Fragments":["functions"]},{"Key":"and functions","Fragments":["that","similarly","makes","are"]},{"Key":"that retrieve","Fragments":["the"]},{"Key":"cached counting,","Fragments":["for"]},{"Key":"counting, for","Fragments":["the"]},{"Key":" eliminate","Fragments":["unnecessary"]},{"Key":"eliminate unnecessary","Fragments":["member"]},{"Key":"unnecessary member","Fragments":["privileges."]},{"Key":"the DNA","Fragments":["strand"]},{"Key":"DNA strand","Fragments":["never"]},{"Key":"strand never","Fragments":["changes"]},{"Key":"never changes","Fragments":["then"]},{"Key":"changes then","Fragments":["the"]},{"Key":"counts will","Fragments":["never"]},{"Key":" refactor","Fragments":["`normalize_number()`."]},{"Key":"The declaration","Fragments":["of"]},{"Key":"declaration of","Fragments":["your","a","the","variables","type"]},{"Key":"your variable","Fragments":["it","declarations"]},{"Key":"variable it","Fragments":["is"]},{"Key":"great use","Fragments":["case","of"]},{"Key":"use case","Fragments":["for","a","where","for","for","is"]},{"Key":"for auto.","Fragments":["But"]},{"Key":"auto. But","Fragments":["that"]},{"Key":"that loop","Fragments":["would","that","does:","in"]},{"Key":"even easier","Fragments":["to","when"]},{"Key":"write as","Fragments":["a"]},{"Key":"range-based for","Fragments":["loop.","here:","might","loops","more","loop","loops","loop?","in"]},{"Key":"use \u0026lt;algorithm\u003e,","Fragments":["but"]},{"Key":"\u0026lt;algorithm\u003e, but","Fragments":["the"]},{"Key":"the early-terminating","Fragments":["algorithms"]},{"Key":"early-terminating algorithms","Fragments":["are"]},{"Key":"algorithms are","Fragments":["a","just","just","implemented"]},{"Key":"bit light","Fragments":["so"]},{"Key":"light so","Fragments":["I"]},{"Key":"think you'll","Fragments":["do"]},{"Key":"you'll do","Fragments":["better"]},{"Key":"do better","Fragments":["than","by","if","your"]},{"Key":"The loop","Fragments":["in","in","in"]},{"Key":"in isPrime","Fragments":["would"]},{"Key":"isPrime would","Fragments":["probably"]},{"Key":"probably (IMO)","Fragments":["be"]},{"Key":"(IMO) be","Fragments":["cleaner"]},{"Key":"cleaner as","Fragments":["a"]},{"Key":"for (","Fragments":["auto","auto","auto","auto","auto","auto","auto","auto","const","std::string::size_type","auto","auto","auto","auto"]},{"Key":"( auto","Fragments":["i","c","w","c","i","digit","c","it","character","element","element","nucleotide"]},{"Key":"auto i","Fragments":[":","=","=","="]},{"Key":"i :","Fragments":["primes","str_in)","ret)","ret)"]},{"Key":": primes","Fragments":[")"]},{"Key":"( number","Fragments":["%","\u003e="]},{"Key":"number %","Fragments":["i"]},{"Key":"% i","Fragments":["=="]},{"Key":"i ==","Fragments":["0","...","w.size()","end"]},{"Key":") return","Fragments":["false;","true;","false;","true;","...","...","...","false;","\"Fine."]},{"Key":"( i","Fragments":["\u003e","==","=="]},{"Key":"i \u003e","Fragments":["sqrt_num","end;"]},{"Key":"\u003e sqrt_num","Fragments":[")"]},{"Key":"sqrt_num )","Fragments":["return"]},{"Key":"Since your","Fragments":["primes","argument","implementation"]},{"Key":"your primes","Fragments":["will"]},{"Key":"primes will","Fragments":["not"]},{"Key":"not outlive","Fragments":["the"]},{"Key":"function, and","Fragments":["you","static","its"]},{"Key":"final size","Fragments":["upfront,"]},{"Key":"size upfront,","Fragments":["you"]},{"Key":"upfront, you","Fragments":["could"]},{"Key":"could consider","Fragments":["trying","if","using","using","declaring","uint_fast16_t.","is","restrictive","creating"]},{"Key":"consider trying","Fragments":["to"]},{"Key":"the stack.","Fragments":["Though"]},{"Key":"stack. Though","Fragments":["I"]},{"Key":"understand most","Fragments":["of"]},{"Key":"solutions for","Fragments":["doing","checking","the"]},{"Key":"aren't completely","Fragments":["portable,"]},{"Key":"completely portable,","Fragments":["alloca"]},{"Key":"portable, alloca","Fragments":["exists"]},{"Key":"alloca exists","Fragments":["on"]},{"Key":"exists on","Fragments":["pretty"]},{"Key":"on pretty","Fragments":["much"]},{"Key":"much every","Fragments":["OS","other"]},{"Key":"every OS","Fragments":["-"]},{"Key":"OS -","Fragments":["even"]},{"Key":"- even","Fragments":["Windows"]},{"Key":"even Windows","Fragments":["has"]},{"Key":"Windows has","Fragments":["an"]},{"Key":"Maybe ++i","Fragments":["followed"]},{"Key":"++i followed","Fragments":["by"]},{"Key":"followed by","Fragments":["an","a","many","a","a","a","everything","a","an","```std::string.erase()```","your"]},{"Key":"by an","Fragments":["if","exclamation","astonishing","uppercase"]},{"Key":"if should","Fragments":["be"]},{"Key":"simply i","Fragments":["+="]},{"Key":"i +=","Fragments":["2;"]},{"Key":"+= 2;","Fragments":["I"]},{"Key":"2; I","Fragments":["do"]},{"Key":"understand that","Fragments":["the","the","way.","expression,"]},{"Key":"first pass","Fragments":["through","at"]},{"Key":"through it","Fragments":["would","once","once,"]},{"Key":"be 3,","Fragments":["but"]},{"Key":"3, but","Fragments":["would"]},{"Key":"but would","Fragments":["it","it"]},{"Key":"would it","Fragments":["be","still","not?","be","be"]},{"Key":"be so","Fragments":["bad","bad.","picky","obvious","much"]},{"Key":"so bad","Fragments":["to","in"]},{"Key":"bad to","Fragments":["prime"]},{"Key":"to prime","Fragments":["the"]},{"Key":"prime the","Fragments":["p_list"]},{"Key":"the p_list","Fragments":["to"]},{"Key":"p_list to","Fragments":["skip"]},{"Key":"to skip","Fragments":["over","over","these","processing"]},{"Key":"skip over","Fragments":["that","a"]},{"Key":"over that","Fragments":["one?"]},{"Key":" std::vector\u003clong\u003e","Fragments":["p_list"]},{"Key":"std::vector\u003clong\u003e p_list","Fragments":["="]},{"Key":"p_list =","Fragments":["{"]},{"Key":"= {","Fragments":["2L,","2","0","'\\0',","0,","7,"]},{"Key":"{ 2L,","Fragments":["3L"]},{"Key":"2L, 3L","Fragments":["};"]},{"Key":" long","Fragments":["i"]},{"Key":"long i","Fragments":["="]},{"Key":"Pretty sure","Fragments":["the"]},{"Key":"the README","Fragments":["said","asked","requests."]},{"Key":"README said","Fragments":["you"]},{"Key":"said you","Fragments":["don't"]},{"Key":"worry about","Fragments":["numbers","numbers","it.","the","how"]},{"Key":"about numbers","Fragments":["over","greater"]},{"Key":"numbers over","Fragments":["3000,"]},{"Key":"over 3000,","Fragments":["but"]},{"Key":"3000, but","Fragments":["if"]},{"Key":"go that","Fragments":["way,"]},{"Key":"way, you","Fragments":["may","know"]},{"Key":"may want","Fragments":["to","to","to","to","to","to","to","to","to","to","to"]},{"Key":"think outside","Fragments":["the"]},{"Key":"the C","Fragments":["locale.","standard","standard","includes","standard","versions","headers,"]},{"Key":"C locale.","Fragments":["On"]},{"Key":"locale. On","Fragments":["just"]},{"Key":"On just","Fragments":["about"]},{"Key":"just about","Fragments":["any","expressing"]},{"Key":"any system","Fragments":["I"]},{"Key":"system I","Fragments":["deal"]},{"Key":"I deal","Fragments":["with","with","with"]},{"Key":"with char*","Fragments":["and"]},{"Key":"char* and","Fragments":["std::string","use","use","the"]},{"Key":"and std::string","Fragments":["are","iterators;"]},{"Key":"std::string are","Fragments":["assumed"]},{"Key":"are assumed","Fragments":["to"]},{"Key":"assumed to","Fragments":["be"]},{"Key":"be UTF-8,","Fragments":["and"]},{"Key":"UTF-8, and","Fragments":["if"]},{"Key":"that assumption","Fragments":["(or"]},{"Key":"assumption (or","Fragments":["a"]},{"Key":"(or a","Fragments":["comparable"]},{"Key":"a comparable","Fragments":["one"]},{"Key":"comparable one","Fragments":["in"]},{"Key":"different environment)","Fragments":["putting"]},{"Key":"environment) putting","Fragments":["a"]},{"Key":"putting a","Fragments":["line"]},{"Key":"line above","Fragments":["would"]},{"Key":"above would","Fragments":["be"]},{"Key":"be pretty","Fragments":["easy","reasonable","easy,"]},{"Key":"pretty easy","Fragments":["-"]},{"Key":"easy -","Fragments":["you"]},{"Key":"- you","Fragments":["could","don't","could","could","can","cold","can","should","know","don't","don't"]},{"Key":"just write","Fragments":["X̅"]},{"Key":"write X̅","Fragments":["in"]},{"Key":"X̅ in","Fragments":["your","the"]},{"Key":" std::pow(x,2)","Fragments":["is"]},{"Key":"std::pow(x,2) is","Fragments":["less"]},{"Key":"less efficient","Fragments":["than","than"]},{"Key":"than x","Fragments":["*"]},{"Key":"x *","Fragments":["x"]},{"Key":"* x","Fragments":["because"]},{"Key":"x because","Fragments":["it's"]},{"Key":"more general","Fragments":["(the","sense,","```using"]},{"Key":"general (the","Fragments":["exponent"]},{"Key":"(the exponent","Fragments":["is"]},{"Key":"exponent is","Fragments":["dynamic),"]},{"Key":"is dynamic),","Fragments":["and"]},{"Key":"dynamic), and","Fragments":["because"]},{"Key":"and because","Fragments":["it's","of","passing"]},{"Key":"it's returning","Fragments":["a"]},{"Key":"a double","Fragments":["when","mainly","for-loop"]},{"Key":"double when","Fragments":["you"]},{"Key":"want an","Fragments":["int."]},{"Key":"There should","Fragments":["probably","be","be","really"]},{"Key":"avoid so","Fragments":["many"]},{"Key":"many copy-concatenations.","Fragments":["Maybe"]},{"Key":"copy-concatenations. Maybe","Fragments":["have"]},{"Key":"Maybe have","Fragments":["a"]},{"Key":"a user-defined","Fragments":["convert(","data"]},{"Key":"user-defined convert(","Fragments":["int"]},{"Key":"convert( int","Fragments":[")"]},{"Key":"int )","Fragments":["construct"]},{"Key":") construct","Fragments":["a"]},{"Key":"string or","Fragments":["stringstream","a","not."]},{"Key":"or stringstream","Fragments":["and"]},{"Key":"stringstream and","Fragments":["call"]},{"Key":"call convert_recursive_impl","Fragments":["or"]},{"Key":"convert_recursive_impl or","Fragments":["something"]},{"Key":"something which","Fragments":["would","is"]},{"Key":"would look","Fragments":["only","at.","like","like","reasonably"]},{"Key":"look only","Fragments":["slightly","at"]},{"Key":"only slightly","Fragments":["different:"]},{"Key":" void","Fragments":["convert_recursive_impl(","change(int\u0026","process(int","change(T\u0026","process(int","bit(const","num(const","foo(","func(std::string","func(std::string","transform(C\u0026"]},{"Key":"void convert_recursive_impl(","Fragments":["unsigned"]},{"Key":"convert_recursive_impl( unsigned","Fragments":["number,"]},{"Key":"unsigned number,","Fragments":["std::string\u0026"]},{"Key":"number, std::string\u0026","Fragments":["out"]},{"Key":"std::string\u0026 out","Fragments":[")"]},{"Key":"number \u003e=","Fragments":["1000"]},{"Key":"\u003e= 1000","Fragments":[")"]},{"Key":" out.append(","Fragments":["\"M\""]},{"Key":"out.append( \"M\"","Fragments":[");"]},{"Key":" convert_recursive_impl(","Fragments":["number"]},{"Key":"convert_recursive_impl( number","Fragments":["-"]},{"Key":"number -","Fragments":["1000,"]},{"Key":"- 1000,","Fragments":["out"]},{"Key":"1000, out","Fragments":[");"]},{"Key":"guess your","Fragments":["version"]},{"Key":"your version","Fragments":["is","of","does","compiling?"]},{"Key":"read. Maybe","Fragments":["you"]},{"Key":"Maybe you","Fragments":["can","should","could","could","can","were"]},{"Key":"optimizer super","Fragments":["good"]},{"Key":"super good","Fragments":["at"]},{"Key":"at fixing","Fragments":["this"]},{"Key":"fixing this","Fragments":["for"]},{"Key":"in square_of_sums","Fragments":["looks"]},{"Key":"square_of_sums looks","Fragments":["a"]},{"Key":"most simplistic","Fragments":["usage"]},{"Key":"simplistic usage","Fragments":["of"]},{"Key":"Maybe there's","Fragments":["some"]},{"Key":"there's some","Fragments":["way","really"]},{"Key":"some way","Fragments":["to"]},{"Key":"reuse code,","Fragments":["since"]},{"Key":"code, since","Fragments":["the"]},{"Key":"between (for","Fragments":["instance)"]},{"Key":"(for instance)","Fragments":["singles"]},{"Key":"instance) singles","Fragments":["and"]},{"Key":"singles and","Fragments":["tens"]},{"Key":"and tens","Fragments":["is"]},{"Key":"tens is","Fragments":["simply"]},{"Key":"I -\u003e","Fragments":["X"]},{"Key":" V","Fragments":["-\u003e"]},{"Key":"V -\u003e","Fragments":["L"]},{"Key":" X","Fragments":["-\u003e"]},{"Key":"X -\u003e","Fragments":["C"]},{"Key":"What's wrong","Fragments":["with"]},{"Key":"with number==0?","Fragments":["Please"]},{"Key":"number==0? Please","Fragments":["sum"]},{"Key":"Please sum","Fragments":["for"]},{"Key":"sum for","Fragments":["me"]},{"Key":"first zero","Fragments":["natural"]},{"Key":"zero natural","Fragments":["numbers."]},{"Key":"natural numbers.","Fragments":["Zero,"]},{"Key":"numbers. Zero,","Fragments":["right?"]},{"Key":"Zero, right?","Fragments":["The"]},{"Key":"right? The","Fragments":["sum"]},{"Key":"The sum","Fragments":["of","can"]},{"Key":"empty set","Fragments":["is"]},{"Key":"set is","Fragments":["zero","serious","going","arranged"]},{"Key":"zero because","Fragments":["zero"]},{"Key":"because zero","Fragments":["is"]},{"Key":"zero is","Fragments":["the","not"]},{"Key":"the additive","Fragments":["identity,"]},{"Key":"additive identity,","Fragments":["right?"]},{"Key":"identity, right?","Fragments":["Or"]},{"Key":"right? Or","Fragments":["maybe"]},{"Key":"Or maybe","Fragments":["I'm","with"]},{"Key":"maybe I'm","Fragments":["wrong"]},{"Key":"I'm wrong","Fragments":["on","but"]},{"Key":"a junk","Fragments":["submission"]},{"Key":"junk submission","Fragments":["-"]},{"Key":"submission -","Fragments":["I"]},{"Key":"a raw","Fragments":["loop","array"]},{"Key":"raw loop","Fragments":["in"]},{"Key":"in there","Fragments":["you","here","that","or","that","since"]},{"Key":"there you","Fragments":["can"]},{"Key":"to dedicate","Fragments":["a"]},{"Key":"dedicate a","Fragments":["function"]},{"Key":"do one","Fragments":["thing","thing","thing."]},{"Key":"one thing","Fragments":["and","only.","I'm","that","can","each","for","about"]},{"Key":" \"Are","Fragments":["you"]},{"Key":"\"Are you","Fragments":["home?"]},{"Key":"you home?","Fragments":["\""]},{"Key":"a question?","Fragments":["There's","do","do"]},{"Key":"question? There's","Fragments":["a"]},{"Key":"a trailing","Fragments":["whitespace","const"]},{"Key":"trailing whitespace","Fragments":["there,","before","from"]},{"Key":"whitespace there,","Fragments":["but"]},{"Key":"there, but","Fragments":["it's","4.9","I","I'll","you"]},{"Key":"it's still","Fragments":["a","frsh","a","considered"]},{"Key":"a question,","Fragments":["no?","but","shouting,","but","and","or","yell"]},{"Key":"for `s.empty()`","Fragments":["that"]},{"Key":"`s.empty()` that","Fragments":["is"]},{"Key":"redundant, at","Fragments":["the"]},{"Key":"the end,","Fragments":["I","but","I","I"]},{"Key":"end, I","Fragments":["think.","chickened","went"]},{"Key":" Yes.","Fragments":["You","I","It"]},{"Key":"Yes. You","Fragments":["could"]},{"Key":"could pretty","Fragments":["much"]},{"Key":"much build","Fragments":["the"]},{"Key":"entire solution","Fragments":["around","in"]},{"Key":"solution around","Fragments":["a"]},{"Key":"single regular","Fragments":["expression."]},{"Key":"regular expression.","Fragments":["That","I"]},{"Key":"expression. That","Fragments":["would"]},{"Key":"would simplify","Fragments":["everything","your"]},{"Key":"simplify everything","Fragments":["a"]},{"Key":"everything a","Fragments":["lot"]},{"Key":"lot and","Fragments":["would"]},{"Key":"it much","Fragments":["shorter."]},{"Key":" @josiah","Fragments":["The"]},{"Key":"@josiah The","Fragments":["comparison"]},{"Key":"The comparison","Fragments":["is","is","of"]},{"Key":"is `n\u003c0`","Fragments":["**not**"]},{"Key":"`n\u003c0` **not**","Fragments":["`n\u003c=0`"]},{"Key":" @carey","Fragments":["If"]},{"Key":"@carey If","Fragments":["i"]},{"Key":"If i","Fragments":["needed","wrote"]},{"Key":"i needed","Fragments":["to"]},{"Key":"string copies,","Fragments":["I"]},{"Key":"copies, I","Fragments":["could"]},{"Key":"could calculate","Fragments":["the"]},{"Key":"calculate the","Fragments":["max","final","sums","prime"]},{"Key":"and preallocate","Fragments":["the"]},{"Key":"preallocate the","Fragments":["buffer;","size"]},{"Key":"the buffer;","Fragments":["however,"]},{"Key":"buffer; however,","Fragments":["for"]},{"Key":"however, for","Fragments":["this","a"]},{"Key":" **LOL!**","Fragments":["Why"]},{"Key":"**LOL!** Why","Fragments":["`//"]},{"Key":"Why `//","Fragments":["Fuck"]},{"Key":"`// Fuck","Fragments":["you"]},{"Key":"Fuck you","Fragments":["in"]},{"Key":"you in","Fragments":["particular`"]},{"Key":"in particular`","Fragments":["?"]},{"Key":"particular` ?","Fragments":["You"]},{"Key":"? You","Fragments":["realize"]},{"Key":"You realize","Fragments":["that"]},{"Key":"realize that","Fragments":["loop","one","would","`\u003cstring\u003e`","a","tokenizer's"]},{"Key":"that follows","Fragments":["doesn't"]},{"Key":"follows doesn't","Fragments":["perform"]},{"Key":"doesn't perform","Fragments":["very"]},{"Key":"perform very","Fragments":["well,"]},{"Key":"well, right?","Fragments":[":)"]},{"Key":" You'll","Fragments":["discover","see","notice"]},{"Key":"You'll discover","Fragments":["you"]},{"Key":"discover you","Fragments":["can"]},{"Key":"write more","Fragments":["efficient","generic","like"]},{"Key":"efficient *and*","Fragments":["clearer"]},{"Key":"*and* clearer","Fragments":["code"]},{"Key":"clearer code","Fragments":["if"]},{"Key":"if `hey()`","Fragments":["was"]},{"Key":"`hey()` was","Fragments":["defined"]},{"Key":"was defined","Fragments":["like","it"]},{"Key":"if silent(said)","Fragments":["return"]},{"Key":"silent(said) return","Fragments":["..."]},{"Key":"if shout(said)","Fragments":["return"]},{"Key":"shout(said) return","Fragments":["..."]},{"Key":"if question(said)","Fragments":["return"]},{"Key":"question(said) return","Fragments":["..."]},{"Key":" because","Fragments":["then","it","in"]},{"Key":"clearer what","Fragments":["the","is","conditions","the"]},{"Key":"overall doing","Fragments":["of"]},{"Key":"doing of","Fragments":["`hey()`"]},{"Key":"of `hey()`","Fragments":["is,"]},{"Key":"`hey()` is,","Fragments":["and"]},{"Key":"is, and","Fragments":["also","what"]},{"Key":"because each","Fragments":["component,","instance"]},{"Key":"each component,","Fragments":["each"]},{"Key":"component, each","Fragments":["check,"]},{"Key":"each check,","Fragments":["would"]},{"Key":"check, would","Fragments":["be"]},{"Key":"function. Each","Fragments":["being"]},{"Key":"Each being","Fragments":["smaller,"]},{"Key":"being smaller,","Fragments":["it"]},{"Key":"smaller, it","Fragments":["should"]},{"Key":"to spot","Fragments":["efficiency"]},{"Key":"spot efficiency","Fragments":["or"]},{"Key":"efficiency or","Fragments":["correctness"]},{"Key":"or correctness","Fragments":["issues."]},{"Key":"correctness issues.","Fragments":["What"]},{"Key":"issues. What","Fragments":["do"]},{"Key":"Very true,","Fragments":["I"]},{"Key":"true, I","Fragments":["might've"]},{"Key":"I might've","Fragments":["missed","missed"]},{"Key":"might've missed","Fragments":["that.","some"]},{"Key":"missed that.","Fragments":["The"]},{"Key":"The exception","Fragments":["message","is"]},{"Key":"message suggests","Fragments":["zero"]},{"Key":"suggests zero","Fragments":["is"]},{"Key":"not allowed,","Fragments":["though."]},{"Key":" @thurman","Fragments":["composing"]},{"Key":"@thurman composing","Fragments":["range"]},{"Key":"composing range","Fragments":["operators"]},{"Key":"range operators","Fragments":["and"]},{"Key":"operators and","Fragments":["then"]},{"Key":"then executing","Fragments":["them"]},{"Key":"executing them","Fragments":["is"]},{"Key":"them is","Fragments":["not","unnecessary","the","to"]},{"Key":"not necessary,","Fragments":["rather","otherwise"]},{"Key":"necessary, rather","Fragments":["something"]},{"Key":"rather something","Fragments":["I'd"]},{"Key":"something I'd","Fragments":["want","never"]},{"Key":"understand how","Fragments":["it's","to"]},{"Key":"how it's","Fragments":["done.","checking"]},{"Key":"it's done.","Fragments":["certainly"]},{"Key":"done. certainly","Fragments":["the"]},{"Key":"certainly the","Fragments":["code"]},{"Key":"clearer when","Fragments":["just","it"]},{"Key":"when just","Fragments":["using"]},{"Key":" hey(\"?\")","Fragments":["would"]},{"Key":"hey(\"?\") would","Fragments":["be"]},{"Key":"be treated","Fragments":["as","as","as"]},{"Key":"treated as","Fragments":["a","a","shouting,","speech,","a"]},{"Key":"question, but","Fragments":["it","there"]},{"Key":"not defined","Fragments":["in","as","imho"]},{"Key":"suite, so","Fragments":["I'm"]},{"Key":"I'm fine","Fragments":["with"]},{"Key":"fine with","Fragments":["the","your"]},{"Key":"It wasn't","Fragments":["the","in"]},{"Key":"wasn't the","Fragments":["size","root","best"]},{"Key":"the buffer","Fragments":["I","each","length","size","size"]},{"Key":"buffer I","Fragments":["was"]},{"Key":"was concerned","Fragments":["about."]},{"Key":"concerned about.","Fragments":["The"]},{"Key":"about. The","Fragments":["problem"]},{"Key":"The problem","Fragments":["said","didn't","with"]},{"Key":"problem said","Fragments":["to"]},{"Key":"said to","Fragments":["not","bob"]},{"Key":"not worry","Fragments":["about","much"]},{"Key":"numbers greater","Fragments":["than","than"]},{"Key":"greater than","Fragments":["3000,","n.","0","the","1778","`total_lower,`","64","99?"]},{"Key":"than 3000,","Fragments":["so"]},{"Key":"3000, so","Fragments":["the"]},{"Key":"the maximum","Fragments":["number","possible","value","precision","number","string"]},{"Key":"maximum number","Fragments":["of","in"]},{"Key":"allocations possible","Fragments":["would"]},{"Key":"possible would","Fragments":["be"]},{"Key":"be somewhere","Fragments":["in"]},{"Key":"somewhere in","Fragments":["the","that","your"]},{"Key":"of zero","Fragments":["up","for"]},{"Key":"zero up","Fragments":["to"]},{"Key":"to 2","Fragments":["if","on"]},{"Key":"2 if","Fragments":["you"]},{"Key":"using append","Fragments":["or"]},{"Key":"append or","Fragments":["+=."]},{"Key":"The concern","Fragments":["was","is"]},{"Key":"concern was","Fragments":["the"]},{"Key":"the copies","Fragments":["from","of"]},{"Key":"copies from","Fragments":["recursion."]},{"Key":" is","Fragments":["built","accumulate","straight","potentially","boost","large."]},{"Key":"is built","Fragments":["from","exactly"]},{"Key":"built from","Fragments":["14"]},{"Key":"from 14","Fragments":["distinct"]},{"Key":"14 distinct","Fragments":["std::string"]},{"Key":"distinct std::string","Fragments":["objects,"]},{"Key":"std::string objects,","Fragments":["because"]},{"Key":"objects, because","Fragments":["you're"]},{"Key":"using +","Fragments":["rather"]},{"Key":"+ rather","Fragments":["than"]},{"Key":"no dynamic","Fragments":["memory","memory","anything,"]},{"Key":"allocation (e.g.","Fragments":["with"]},{"Key":"(e.g. with","Fragments":["SSO","the"]},{"Key":"with SSO","Fragments":["on"]},{"Key":"SSO on","Fragments":["a"]},{"Key":"a 64-bit","Fragments":["system),"]},{"Key":"64-bit system),","Fragments":["maybe"]},{"Key":"system), maybe","Fragments":["we"]},{"Key":"we just","Fragments":["don't","say","send","eliminated","have"]},{"Key":"just don't","Fragments":["care.","like","care"]},{"Key":"don't care.","Fragments":["The"]},{"Key":"care. The","Fragments":["problem"]},{"Key":"problem didn't","Fragments":["say"]},{"Key":"didn't say","Fragments":["be","you"]},{"Key":"say be","Fragments":["super"]},{"Key":"be super","Fragments":["efficient,","ugly","portable","portable"]},{"Key":"super efficient,","Fragments":["and"]},{"Key":"efficient, and","Fragments":["this"]},{"Key":"and this","Fragments":["is","number","allows","isn't","might","one","one.","code","has","solution."]},{"Key":"very readable","Fragments":["this","solution.","answer","and"]},{"Key":"readable this","Fragments":["way."]},{"Key":"this way.","Fragments":["I'm"]},{"Key":"way. I'm","Fragments":["probably"]},{"Key":"I'm probably","Fragments":["a","just"]},{"Key":"little biased","Fragments":["because"]},{"Key":"biased because","Fragments":["I"]},{"Key":"normally work","Fragments":["with"]},{"Key":"with gcc","Fragments":["versions","4.8.3","but","4.9.1."]},{"Key":"gcc versions","Fragments":["earlier"]},{"Key":"versions earlier","Fragments":["than"]},{"Key":"earlier than","Fragments":["5","the"]},{"Key":"than 5","Fragments":["which"]},{"Key":"5 which","Fragments":["don't"]},{"Key":"which don't","Fragments":["have"]},{"Key":"have SSO","Fragments":["under"]},{"Key":"SSO under","Fragments":["the"]},{"Key":"under the","Fragments":["name","impression","impression","hood"]},{"Key":"name std::string,","Fragments":["but"]},{"Key":"it shouldn't","Fragments":["be","be"]},{"Key":"so bad.","Fragments":["Just"]},{"Key":"bad. Just","Fragments":["for"]},{"Key":"Just for","Fragments":["kicks"]},{"Key":"for kicks","Fragments":["I"]},{"Key":"kicks I","Fragments":["ran"]},{"Key":"I ran","Fragments":["this","it","into","it","into","into"]},{"Key":"ran this","Fragments":["under"]},{"Key":"this under","Fragments":["valgrind"]},{"Key":"under valgrind","Fragments":["with"]},{"Key":"valgrind with","Fragments":["the"]},{"Key":"value 2888","Fragments":["using"]},{"Key":"2888 using","Fragments":["my"]},{"Key":"using my","Fragments":["std::string","code"]},{"Key":"my std::string","Fragments":["and"]},{"Key":"std::string and","Fragments":["then","std::map","the"]},{"Key":"then _vstring","Fragments":["(the"]},{"Key":"_vstring (the","Fragments":["one"]},{"Key":"(the one","Fragments":["that","from","you're"]},{"Key":"that becomes","Fragments":["std::string"]},{"Key":"becomes std::string","Fragments":["in"]},{"Key":"std::string in","Fragments":["gcc"]},{"Key":"in gcc","Fragments":["5)"]},{"Key":"gcc 5)","Fragments":["and"]},{"Key":"5) and","Fragments":["saw"]},{"Key":"total heap","Fragments":["usage:","usage:"]},{"Key":"heap usage:","Fragments":["5","0"]},{"Key":"usage: 5","Fragments":["allocs,"]},{"Key":"5 allocs,","Fragments":["5"]},{"Key":"allocs, 5","Fragments":["frees,"]},{"Key":"5 frees,","Fragments":["156"]},{"Key":"frees, 156","Fragments":["bytes"]},{"Key":"156 bytes","Fragments":["allocated"]},{"Key":"usage: 0","Fragments":["allocs,"]},{"Key":"0 allocs,","Fragments":["0"]},{"Key":"allocs, 0","Fragments":["frees,"]},{"Key":"0 frees,","Fragments":["0"]},{"Key":"frees, 0","Fragments":["bytes"]},{"Key":"0 bytes","Fragments":["allocated"]},{"Key":" FWIW","Fragments":["optimization"]},{"Key":"FWIW optimization","Fragments":["seemed"]},{"Key":"optimization seemed","Fragments":["to"]},{"Key":"seemed to","Fragments":["have","say","me","work","me","be","make","make"]},{"Key":"So, I","Fragments":["guess","agree,","need"]},{"Key":"guess ignore","Fragments":["me."]},{"Key":"ignore me.","Fragments":["I"]},{"Key":"me. I","Fragments":["was","see"]},{"Key":"just trying","Fragments":["to","to","to","to","to"]},{"Key":"to come","Fragments":["up","up","up","from","with","up","back"]},{"Key":"something to","Fragments":["say.","ensure","nitpick,","handle","\"figure","compare","consider."]},{"Key":"to say.","Fragments":["Probably","C++","With","What"]},{"Key":"say. Probably","Fragments":["should've"]},{"Key":"Probably should've","Fragments":["stuck"]},{"Key":"should've stuck","Fragments":["with"]},{"Key":"my usual","Fragments":["schtick","\"this"]},{"Key":"usual schtick","Fragments":["of"]},{"Key":"schtick of","Fragments":["reminding"]},{"Key":"of reminding","Fragments":["people"]},{"Key":"reminding people","Fragments":["to"]},{"Key":"people to","Fragments":["declare","adhere","define"]},{"Key":"declare non-template","Fragments":["functions"]},{"Key":"non-template functions","Fragments":["defined"]},{"Key":"header as","Fragments":["inline,","a","well"]},{"Key":"as inline,","Fragments":["static,"]},{"Key":"from Python","Fragments":["and"]},{"Key":"Python and","Fragments":["I"]},{"Key":"am fairly","Fragments":["new","new"]},{"Key":"fairly new","Fragments":["to","to","to"]},{"Key":"to C++.","Fragments":["Plus,","I"]},{"Key":"C++. Plus,","Fragments":["I"]},{"Key":"Plus, I","Fragments":["am","don't"]},{"Key":"am (currently)","Fragments":["developing"]},{"Key":"(currently) developing","Fragments":["on"]},{"Key":"developing on","Fragments":["a"]},{"Key":"a Mac,","Fragments":["which"]},{"Key":"Mac, which","Fragments":["seems"]},{"Key":"which seems","Fragments":["more","like","to","to"]},{"Key":"a minus.","Fragments":["I"]},{"Key":"minus. I","Fragments":["was"]},{"Key":"was frustrated","Fragments":["by"]},{"Key":"frustrated by","Fragments":["how"]},{"Key":"by how","Fragments":["much","much"]},{"Key":"time it","Fragments":["took","hits","runs"]},{"Key":"it took","Fragments":["to","a","me"]},{"Key":"took to","Fragments":["just","your"]},{"Key":"just set-up","Fragments":["the"]},{"Key":"set-up the","Fragments":["damn"]},{"Key":"the damn","Fragments":["system"]},{"Key":"damn system","Fragments":["to"]},{"Key":"system to","Fragments":["at"]},{"Key":"least get","Fragments":["it"]},{"Key":"it compiled","Fragments":["somehow"]},{"Key":"compiled somehow","Fragments":["(changed"]},{"Key":"somehow (changed","Fragments":["development"]},{"Key":"(changed development","Fragments":["environment"]},{"Key":"development environment","Fragments":["Vim","expected"]},{"Key":"environment Vim","Fragments":["-\u003e"]},{"Key":"Vim -\u003e","Fragments":["XCode"]},{"Key":"-\u003e XCode","Fragments":["-\u003e"]},{"Key":"XCode -\u003e","Fragments":["CLion)."]},{"Key":"-\u003e CLion).","Fragments":["I"]},{"Key":"CLion). I","Fragments":["heard"]},{"Key":"I heard","Fragments":["a"]},{"Key":"heard a","Fragments":["lot"]},{"Key":"good things","Fragments":["about"]},{"Key":"things about","Fragments":["boost,","const-ness"]},{"Key":"about boost,","Fragments":["and"]},{"Key":"boost, and","Fragments":["at","[Core"]},{"Key":"at first","Fragments":["it","glance","whether","had","glance","glance.","as"]},{"Key":"first it","Fragments":["looked"]},{"Key":"it looked","Fragments":["like"]},{"Key":"looked like","Fragments":["a"]},{"Key":"a saviour","Fragments":["in"]},{"Key":"saviour in","Fragments":["doing"]},{"Key":"in doing","Fragments":["various"]},{"Key":"doing various","Fragments":["string"]},{"Key":"various string","Fragments":["manipulations."]},{"Key":"string manipulations.","Fragments":["But"]},{"Key":"manipulations. But","Fragments":["it"]},{"Key":"it wasn't","Fragments":["so","clear"]},{"Key":"wasn't so","Fragments":["straightforward."]},{"Key":"That particular","Fragments":["`trim`"]},{"Key":"particular `trim`","Fragments":["function"]},{"Key":"`trim` function","Fragments":["threw","was"]},{"Key":"function threw","Fragments":["some"]},{"Key":"threw some","Fragments":["error","exceptions."]},{"Key":"some error","Fragments":["related","checking.","checking"]},{"Key":"error related","Fragments":["to"]},{"Key":"to `Input.erase`","Fragments":["needing"]},{"Key":"`Input.erase` needing","Fragments":["an"]},{"Key":"needing an","Fragments":["iterator."]},{"Key":"an iterator.","Fragments":["And","In"]},{"Key":"iterator. And","Fragments":["I"]},{"Key":"And I","Fragments":["thought,","think","can't","always","wouldn't","agree,","just","honestly","feel","think","like","really","put","want"]},{"Key":"I thought,","Fragments":["I"]},{"Key":"thought, I","Fragments":["haven't","think"]},{"Key":"haven't written","Fragments":["that"]},{"Key":"written that","Fragments":["`trim`"]},{"Key":"that `trim`","Fragments":["code,"]},{"Key":"`trim` code,","Fragments":["and"]},{"Key":"it accepts","Fragments":["a"]},{"Key":"accepts a","Fragments":["`string`,"]},{"Key":"a `string`,","Fragments":["but"]},{"Key":"`string`, but","Fragments":["it"]},{"Key":"doesn't work,","Fragments":["then"]},{"Key":"work, then","Fragments":["why"]},{"Key":"then why","Fragments":["does","use"]},{"Key":"why does","Fragments":["it","this"]},{"Key":"it accept","Fragments":["a"]},{"Key":"accept a","Fragments":["string","std::string.","single"]},{"Key":"string if","Fragments":["the","that","you"]},{"Key":"it depends","Fragments":["on","on"]},{"Key":"on needs","Fragments":["an"]},{"Key":"needs an","Fragments":["iterator?!!","asterix"]},{"Key":"an iterator?!!","Fragments":["If"]},{"Key":"iterator?!! If","Fragments":["you"]},{"Key":"you see,","Fragments":["that"]},{"Key":"see, that","Fragments":["said2","after"]},{"Key":"that said2","Fragments":["is"]},{"Key":"said2 is","Fragments":["me"]},{"Key":"is me","Fragments":["just"]},{"Key":"me just","Fragments":["trying"]},{"Key":"get this","Fragments":["thing","running","to","to"]},{"Key":"this thing","Fragments":["finished.","\"differently\"..."]},{"Key":"thing finished.","Fragments":["I"]},{"Key":"finished. I","Fragments":["certainly"]},{"Key":"I certainly","Fragments":["have"]},{"Key":"certainly have","Fragments":["to"]},{"Key":"Anyway, like","Fragments":["I"]},{"Key":"I said,","Fragments":["I","you"]},{"Key":"to C++,","Fragments":["and","I"]},{"Key":"C++, and","Fragments":["TDD","I'm"]},{"Key":"and TDD","Fragments":["in"]},{"Key":"TDD in","Fragments":["general."]},{"Key":"general. I","Fragments":["like"]},{"Key":"like writing","Fragments":["short"]},{"Key":"writing short","Fragments":["code,"]},{"Key":"short code,","Fragments":["but"]},{"Key":"code, but","Fragments":["I","while","it","you","that","lets","I've"]},{"Key":"that does","Fragments":["not","what","what","the","this","this","this","two","what","the"]},{"Key":"always lead","Fragments":["to"]},{"Key":"it being","Fragments":["very","sorted,","ignored.","a"]},{"Key":"being very","Fragments":["readable."]},{"Key":"readable. Plus,","Fragments":["I"]},{"Key":"like re-inventing","Fragments":["the"]},{"Key":"re-inventing the","Fragments":["wheel"]},{"Key":"the wheel","Fragments":["(more","in","will"]},{"Key":"wheel (more","Fragments":["like"]},{"Key":"(more like","Fragments":["don't"]},{"Key":"like don't","Fragments":["trust"]},{"Key":"don't trust","Fragments":["myself"]},{"Key":"trust myself","Fragments":["with"]},{"Key":"myself with","Fragments":["it).","it"]},{"Key":"with it).","Fragments":["But"]},{"Key":"it). But","Fragments":["hey,"]},{"Key":"But hey,","Fragments":["that's"]},{"Key":"hey, that's","Fragments":["how"]},{"Key":"how we","Fragments":["learn","could"]},{"Key":"we learn","Fragments":["stuff."]},{"Key":"learn stuff.","Fragments":["(Bob:"]},{"Key":"stuff. (Bob:","Fragments":["\"Whatever.\")"]},{"Key":" Ah!","Fragments":["In"]},{"Key":"Ah! In","Fragments":["that"]},{"Key":"case, I'm","Fragments":["sorry"]},{"Key":"I'm sorry","Fragments":["for","to","but"]},{"Key":"sorry for","Fragments":["sounding","that","the"]},{"Key":"for sounding","Fragments":["pushy"]},{"Key":"sounding pushy","Fragments":["or"]},{"Key":"pushy or","Fragments":["teasy"]},{"Key":"or teasy","Fragments":["in"]},{"Key":"teasy in","Fragments":["the"]},{"Key":"the wrong","Fragments":["way.","reason.","answer.","answer.","answer.","type,"]},{"Key":"figure you've","Fragments":["already"]},{"Key":"you've already","Fragments":["set","considered","handled"]},{"Key":"already set","Fragments":["yourself"]},{"Key":"set yourself","Fragments":["up."]},{"Key":"yourself up.","Fragments":["I'll"]},{"Key":"up. I'll","Fragments":["list"]},{"Key":"I'll list","Fragments":["what"]},{"Key":"list what","Fragments":["I"]},{"Key":"process anyway;","Fragments":["I"]},{"Key":"anyway; I","Fragments":["haven't"]},{"Key":"haven't done","Fragments":["it","any"]},{"Key":"it here","Fragments":["because"]},{"Key":"here because","Fragments":["I've"]},{"Key":"because I've","Fragments":["had","read"]},{"Key":"I've had","Fragments":["it","lying"]},{"Key":"had it","Fragments":["set","explained","returning"]},{"Key":"up before,","Fragments":["but"]},{"Key":"$ ruby","Fragments":["-e"]},{"Key":"ruby -e","Fragments":["\"$(curl"]},{"Key":"-e \"$(curl","Fragments":["-fsSL"]},{"Key":"\"$(curl -fsSL","Fragments":["https://raw.githubusercontent.com/Homebrew/install/master/install)\""]},{"Key":"$ brew","Fragments":["install"]},{"Key":"brew install","Fragments":["llvm36"]},{"Key":"install llvm36","Fragments":["--with-clang"]},{"Key":"llvm36 --with-clang","Fragments":["boost"]},{"Key":"--with-clang boost","Fragments":["cmake"]},{"Key":"first line","Fragments":["install","of","of","of","of"]},{"Key":"line install","Fragments":["[HomeBrew](http://brew.sh/),"]},{"Key":"install [HomeBrew](http://brew.sh/),","Fragments":["and"]},{"Key":"[HomeBrew](http://brew.sh/), and","Fragments":["the"]},{"Key":"second line","Fragments":["uses"]},{"Key":"line uses","Fragments":["brew"]},{"Key":"uses brew","Fragments":["to"]},{"Key":"brew to","Fragments":["install"]},{"Key":"to install","Fragments":["a","some","boost"]},{"Key":"install a","Fragments":["modern"]},{"Key":"modern C++","Fragments":["compiler","style."]},{"Key":"C++ compiler","Fragments":["(LLVM/Clang),"]},{"Key":"compiler (LLVM/Clang),","Fragments":["a"]},{"Key":"(LLVM/Clang), a","Fragments":["fairly"]},{"Key":"a fairly","Fragments":["recent","slow"]},{"Key":"fairly recent","Fragments":["version","so"]},{"Key":"recent version","Fragments":["of","of"]},{"Key":"Boost libraries,","Fragments":["and"]},{"Key":"libraries, and","Fragments":["CMake,"]},{"Key":"and CMake,","Fragments":["a"]},{"Key":"CMake, a","Fragments":["build"]},{"Key":"a build","Fragments":["system."]},{"Key":"build system.","Fragments":["This"]},{"Key":"system. This","Fragments":["I"]},{"Key":"This I","Fragments":["guess"]},{"Key":"guess will","Fragments":["take"]},{"Key":"long time,","Fragments":["and"]},{"Key":"time, and","Fragments":["render","added"]},{"Key":"and render","Fragments":["your"]},{"Key":"render your","Fragments":["computer"]},{"Key":"your computer","Fragments":["not"]},{"Key":"computer not","Fragments":["very"]},{"Key":"very responsive","Fragments":["while"]},{"Key":"responsive while","Fragments":["it"]},{"Key":"it compiles","Fragments":["LLVM,","without","and"]},{"Key":"compiles LLVM,","Fragments":["Clang,"]},{"Key":"LLVM, Clang,","Fragments":["and"]},{"Key":"Clang, and","Fragments":["Boost."]},{"Key":"and Boost.","Fragments":["Maybe"]},{"Key":"Boost. Maybe","Fragments":["this"]},{"Key":"Maybe this","Fragments":["can"]},{"Key":"be left","Fragments":["to"]},{"Key":"the errors","Fragments":["you've","start","easier"]},{"Key":"errors you've","Fragments":["seen"]},{"Key":"you've seen","Fragments":["about"]},{"Key":"seen about","Fragments":["`trim`:"]},{"Key":"about `trim`:","Fragments":["I"]},{"Key":"`trim`: I","Fragments":["think"]},{"Key":"think you've","Fragments":["just"]},{"Key":"you've just","Fragments":["been","implemented"]},{"Key":"just been","Fragments":["exposed","unnecessary"]},{"Key":"been exposed","Fragments":["to"]},{"Key":"exposed to","Fragments":["the","your"]},{"Key":"the wrath","Fragments":["of"]},{"Key":"wrath of","Fragments":["an"]},{"Key":"an unhappy","Fragments":["C++"]},{"Key":"unhappy C++","Fragments":["compiler."]},{"Key":"C++ compiler.","Fragments":["You"]},{"Key":"compiler. You","Fragments":["will"]},{"Key":"You will","Fragments":["see","need","probably","want","have"]},{"Key":"will see","Fragments":["a","that"]},{"Key":"you program","Fragments":["in"]},{"Key":"program in","Fragments":["C++,","one","order"]},{"Key":"in C++,","Fragments":["I'm","after","in","and","only","those","is","e.g."]},{"Key":"C++, I'm","Fragments":["sorry"]},{"Key":"sorry to","Fragments":["say."]},{"Key":"say. C++","Fragments":["is"]},{"Key":"is famous","Fragments":["for"]},{"Key":"famous for","Fragments":["its"]},{"Key":"its error","Fragments":["messages..."]},{"Key":"error messages...","Fragments":["**But**,"]},{"Key":"messages... **But**,","Fragments":["as"]},{"Key":"**But**, as","Fragments":["you"]},{"Key":"you gain","Fragments":["experience","a","a"]},{"Key":"gain experience","Fragments":["in"]},{"Key":"experience in","Fragments":["C++","using","using","C++"]},{"Key":"C++ you","Fragments":["will","might","might"]},{"Key":"you will","Fragments":["start","become","compare","accept","perform","find","encounter","turn","be","always,","see","be","always","get","need","get","first","be","have"]},{"Key":"will start","Fragments":["feeling","with"]},{"Key":"start feeling","Fragments":["\"mastery\""]},{"Key":"feeling \"mastery\"","Fragments":["of"]},{"Key":"\"mastery\" of","Fragments":["sorts"]},{"Key":"of sorts","Fragments":["in"]},{"Key":"sorts in","Fragments":["reading"]},{"Key":"in reading","Fragments":["these","it,"]},{"Key":"reading these","Fragments":["compiler"]},{"Key":"these compiler","Fragments":["error"]},{"Key":"compiler error","Fragments":["messages,","did","when","messages."]},{"Key":"error messages,","Fragments":["pages"]},{"Key":"messages, pages","Fragments":["and"]},{"Key":"pages and","Fragments":["pages"]},{"Key":"and pages","Fragments":["of"]},{"Key":"pages of","Fragments":["'em,"]},{"Key":"of 'em,","Fragments":["in"]},{"Key":"'em, in","Fragments":["a"]},{"Key":"of seconds,","Fragments":["and"]},{"Key":"seconds, and","Fragments":["understanding"]},{"Key":"and understanding","Fragments":["what"]},{"Key":"understanding what","Fragments":["they're"]},{"Key":"what they're","Fragments":["saying,"]},{"Key":"they're saying,","Fragments":["what"]},{"Key":"saying, what","Fragments":["and"]},{"Key":"what and","Fragments":["where"]},{"Key":"problem is.","Fragments":["Most"]},{"Key":"is. Most","Fragments":["of"]},{"Key":"Most of","Fragments":["the","the","my","their","std's","the","the","these","my"]},{"Key":"the time,","Fragments":["say","that","need"]},{"Key":"time, say","Fragments":["4"]},{"Key":"say 4","Fragments":["seconds,"]},{"Key":"4 seconds,","Fragments":["would"]},{"Key":"seconds, would","Fragments":["be"]},{"Key":"be spent","Fragments":["scrolling"]},{"Key":"spent scrolling","Fragments":["up."]},{"Key":"scrolling up.","Fragments":["Today's"]},{"Key":"up. Today's","Fragments":["UX"]},{"Key":"Today's UX","Fragments":["limitation,"]},{"Key":"UX limitation,","Fragments":["sorry."]},{"Key":"limitation, sorry.","Fragments":["The"]},{"Key":"sorry. The","Fragments":["rest"]},{"Key":"rest 0.25s","Fragments":["is"]},{"Key":"0.25s is","Fragments":["what"]},{"Key":"what it'll","Fragments":["take"]},{"Key":"it'll take","Fragments":["your"]},{"Key":"take your","Fragments":["brain","word","advice"]},{"Key":"your brain","Fragments":["to"]},{"Key":"brain to","Fragments":["process"]},{"Key":"to process","Fragments":["the"]},{"Key":" And,","Fragments":["the","as"]},{"Key":"And, the","Fragments":["good"]},{"Key":"good news","Fragments":["is,"]},{"Key":"news is,","Fragments":["if"]},{"Key":"is, if","Fragments":["you","the"]},{"Key":"keep at","Fragments":["it,"]},{"Key":"at it,","Fragments":["you","it"]},{"Key":"good programmer,","Fragments":["because"]},{"Key":"programmer, because","Fragments":["a"]},{"Key":"because a","Fragments":["lot","loop"]},{"Key":"C++ mantra","Fragments":["is"]},{"Key":"mantra is","Fragments":["applicable"]},{"Key":"is applicable","Fragments":["in"]},{"Key":"applicable in","Fragments":["many"]},{"Key":"in many","Fragments":["other","cases","if"]},{"Key":"many other","Fragments":["languages,","alphanumerics","gurus"]},{"Key":"other languages,","Fragments":["and"]},{"Key":"languages, and","Fragments":["a"]},{"Key":"lot useful","Fragments":["principles"]},{"Key":"useful principles","Fragments":["from"]},{"Key":"principles from","Fragments":["other"]},{"Key":"from other","Fragments":["programming","pieces","part","solutions","peoples"]},{"Key":"other programming","Fragments":["languages"]},{"Key":"programming languages","Fragments":["can"]},{"Key":"languages can","Fragments":["be"]},{"Key":"be exercised","Fragments":["in"]},{"Key":"exercised in","Fragments":["C++."]},{"Key":"in C++.","Fragments":["So","I","Now","Thanks","`boost::zip_iterator`","I","You"]},{"Key":"C++. So","Fragments":["don't"]},{"Key":"don't give","Fragments":["up!"]},{"Key":" Here,","Fragments":["`said2`"]},{"Key":"Here, `said2`","Fragments":["is"]},{"Key":"`said2` is","Fragments":["marked"]},{"Key":"is marked","Fragments":["const."]},{"Key":"marked const.","Fragments":["This"]},{"Key":"const. This","Fragments":["means"]},{"Key":"means the","Fragments":["compiler","this"]},{"Key":"will verify","Fragments":["you"]},{"Key":"verify you","Fragments":["don't"]},{"Key":"don't change","Fragments":["`said2`.","anything...","the"]},{"Key":"change `said2`.","Fragments":["The"]},{"Key":"`said2`. The","Fragments":["`boost::algorithm::trim()`"]},{"Key":"The `boost::algorithm::trim()`","Fragments":["function"]},{"Key":"`boost::algorithm::trim()` function","Fragments":["works"]},{"Key":"function works","Fragments":["in-place,","so"]},{"Key":"works in-place,","Fragments":["and"]},{"Key":"in-place, and","Fragments":["modifies"]},{"Key":"and modifies","Fragments":["its"]},{"Key":"modifies its","Fragments":["argument."]},{"Key":"its argument.","Fragments":["So,"]},{"Key":"argument. So,","Fragments":["this"]},{"Key":"So, this","Fragments":["is"]},{"Key":"issue you","Fragments":["experienced:"]},{"Key":"you experienced:","Fragments":["an"]},{"Key":"experienced: an","Fragments":["incompatibility"]},{"Key":"an incompatibility","Fragments":["between"]},{"Key":"incompatibility between","Fragments":["the"]},{"Key":"const specifier","Fragments":["set"]},{"Key":"specifier set","Fragments":["for"]},{"Key":"set for","Fragments":["`said2`,"]},{"Key":"for `said2`,","Fragments":["and"]},{"Key":"`said2`, and","Fragments":["the"]},{"Key":"the `trim()`","Fragments":["function."]},{"Key":"Very often","Fragments":["this"]},{"Key":"often this","Fragments":["sort"]},{"Key":"this sort","Fragments":["of","of"]},{"Key":"issue would","Fragments":["give"]},{"Key":"would give","Fragments":["a","you","a","an","me"]},{"Key":"a quick","Fragments":["and","note","implementation","test","test","comment:"]},{"Key":"quick and","Fragments":["simple"]},{"Key":"simple compiler","Fragments":["error:"]},{"Key":"void change(int\u0026","Fragments":["number)"]},{"Key":"change(int\u0026 number)","Fragments":["{"]},{"Key":"number) {","Fragments":["++number;","++number;"]},{"Key":"{ ++number;","Fragments":["}","}"]},{"Key":"void process(int","Fragments":["const\u0026","const\u0026"]},{"Key":"process(int const\u0026","Fragments":["value)","value)"]},{"Key":"const\u0026 value)","Fragments":["{","{"]},{"Key":"{ change(value);","Fragments":["}","}"]},{"Key":" Compiling","Fragments":["this"]},{"Key":"Compiling this","Fragments":["code"]},{"Key":"code above","Fragments":["should"]},{"Key":"above should","Fragments":["give"]},{"Key":"should give","Fragments":["you"]},{"Key":"you an","Fragments":["error","an"]},{"Key":"error mentioning","Fragments":["passing"]},{"Key":"mentioning passing","Fragments":["a"]},{"Key":"passing a","Fragments":["const","reference","char*","negative"]},{"Key":"const value","Fragments":["to"]},{"Key":"that takes","Fragments":["an","a","a","num_bottles","two","regex"]},{"Key":"takes an","Fragments":["lvalue"]},{"Key":"an lvalue","Fragments":["reference."]},{"Key":"lvalue reference.","Fragments":["The"]},{"Key":"reference. The","Fragments":["compiler"]},{"Key":"compiler sees","Fragments":["the","no"]},{"Key":"sees the","Fragments":["first"]},{"Key":"first signature","Fragments":["as"]},{"Key":"signature as","Fragments":["`void"]},{"Key":"as `void","Fragments":["change(int\u0026)`,"]},{"Key":"`void change(int\u0026)`,","Fragments":["and"]},{"Key":"change(int\u0026)`, and","Fragments":["the"]},{"Key":"parameter passed","Fragments":["is"]},{"Key":"passed is","Fragments":["`int"]},{"Key":"is `int","Fragments":["const\u0026`,"]},{"Key":"`int const\u0026`,","Fragments":["which"]},{"Key":"const\u0026`, which","Fragments":["is"]},{"Key":"of `boost::algorithm::trim()`,","Fragments":["things"]},{"Key":"`boost::algorithm::trim()`, things","Fragments":["are"]},{"Key":"more obscure,","Fragments":["because"]},{"Key":"obscure, because","Fragments":["`trim()`"]},{"Key":"because `trim()`","Fragments":["is"]},{"Key":"`trim()` is","Fragments":["not","also"]},{"Key":"function but","Fragments":["a","somewhere","it","I"]},{"Key":"but a","Fragments":["*function","struct?","simple","little","little","`regex`","good","range"]},{"Key":"a *function","Fragments":["template*."]},{"Key":"*function template*.","Fragments":["It"]},{"Key":"template*. It","Fragments":["takes"]},{"Key":"It takes","Fragments":["a","exactly"]},{"Key":"takes a","Fragments":["parameter","`const","ResponseType","lot","vector","vector","phrase.","vector","`const","`const","phrase.","phrase.","`const","`const","vector"]},{"Key":"parameter that","Fragments":["is","would"]},{"Key":"template parameter","Fragments":["type."]},{"Key":"parameter type.","Fragments":["This","Once"]},{"Key":"type. This","Fragments":["allows","works"]},{"Key":"the interfaces","Fragments":["to"]},{"Key":"interfaces to","Fragments":["be"]},{"Key":"be compatible,","Fragments":["and"]},{"Key":"compatible, and","Fragments":["error"]},{"Key":"and error","Fragments":["will","checks","protection","prone"]},{"Key":"error will","Fragments":["fire","suck."]},{"Key":"will fire","Fragments":["only"]},{"Key":"fire only","Fragments":["the"]},{"Key":"moment the","Fragments":["compiler"]},{"Key":"compiler tackles","Fragments":["the"]},{"Key":"tackles the","Fragments":["code"]},{"Key":"that actually","Fragments":["uses"]},{"Key":"actually uses","Fragments":["the"]},{"Key":"uses the","Fragments":["argument","vector","current","ascii","input"]},{"Key":"argument and","Fragments":["relies","not"]},{"Key":"and relies","Fragments":["on","on"]},{"Key":" Here","Fragments":["is","the","is","`downcase()`","is","is","is"]},{"Key":"Here is","Fragments":["a","a","a","some","a","a"]},{"Key":"a simpler","Fragments":["example:","approach"]},{"Key":" template\u003ctypename","Fragments":["T\u003e"]},{"Key":"void change(T\u0026","Fragments":["number)"]},{"Key":"change(T\u0026 number)","Fragments":["{"]},{"Key":"Here the","Fragments":["compiler","check"]},{"Key":"sees no","Fragments":["issue"]},{"Key":"no issue","Fragments":["in"]},{"Key":"issue in","Fragments":["the","this","mind,"]},{"Key":"the signature:","Fragments":["it's"]},{"Key":"signature: it's","Fragments":["okay"]},{"Key":"it's okay","Fragments":["to"]},{"Key":"okay to","Fragments":["pass","just"]},{"Key":"an `int","Fragments":["const\u0026`"]},{"Key":"`int const\u0026`","Fragments":["for"]},{"Key":"const\u0026` for","Fragments":["a"]},{"Key":"a `T`.","Fragments":["However,"]},{"Key":"`T`. However,","Fragments":["then"]},{"Key":"However, then","Fragments":["the"]},{"Key":"the line","Fragments":["`++number`","\"#if","so","too","too"]},{"Key":"line `++number`","Fragments":["raises"]},{"Key":"`++number` raises","Fragments":["an"]},{"Key":"raises an","Fragments":["error."]},{"Key":" Back","Fragments":["to"]},{"Key":"Back to","Fragments":["`trim()`,"]},{"Key":"to `trim()`,","Fragments":["a"]},{"Key":"`trim()`, a","Fragments":["`std::string"]},{"Key":"`std::string const\u0026`","Fragments":["datum"]},{"Key":"const\u0026` datum","Fragments":["can"]},{"Key":"datum can","Fragments":["only"]},{"Key":"use const","Fragments":["iterators.","iterators","reference).","reference","references","strings"]},{"Key":"const iterators.","Fragments":["These"]},{"Key":"iterators. These","Fragments":["are"]},{"Key":"type `std::string::const_iterator`.","Fragments":["You"]},{"Key":"`std::string::const_iterator`. You","Fragments":["(or"]},{"Key":"You (or","Fragments":["`trim()`)"]},{"Key":"(or `trim()`)","Fragments":["have"]},{"Key":"`trim()`) have","Fragments":["no"]},{"Key":"no access","Fragments":["to","to"]},{"Key":"to `std::string::iterator`","Fragments":["when"]},{"Key":"`std::string::iterator` when","Fragments":["the"]},{"Key":"is const.","Fragments":["The"]},{"Key":"The const_iterator","Fragments":["allows"]},{"Key":"const_iterator allows","Fragments":["traversing"]},{"Key":"allows traversing","Fragments":["a"]},{"Key":"traversing a","Fragments":["container,","prime"]},{"Key":"container, but","Fragments":["not"]},{"Key":"the elements","Fragments":["within.","to","with","is","of","in"]},{"Key":"iterator errors","Fragments":["you"]},{"Key":"errors you","Fragments":["saw"]},{"Key":"you saw","Fragments":["talked"]},{"Key":"saw talked","Fragments":["about"]},{"Key":"about that,","Fragments":["in","and"]},{"Key":"own unique","Fragments":["verbose"]},{"Key":"unique verbose","Fragments":["way..."]},{"Key":"verbose way...","Fragments":["\"Can't"]},{"Key":"way... \"Can't","Fragments":["deal"]},{"Key":"\"Can't deal","Fragments":["with"]},{"Key":"with const_iterator,","Fragments":["gimme"]},{"Key":"const_iterator, gimme","Fragments":["iterator\"."]},{"Key":"Your fix,","Fragments":["after"]},{"Key":"fix, after","Fragments":["that"]},{"Key":"that commented","Fragments":["out"]},{"Key":"out `trim()`","Fragments":["line,"]},{"Key":"`trim()` line,","Fragments":["was"]},{"Key":"line, was","Fragments":["to"]},{"Key":"new *non-const*","Fragments":["string"]},{"Key":"*non-const* string","Fragments":["copy"]},{"Key":"the first,","Fragments":["and"]},{"Key":"then work","Fragments":["on"]},{"Key":"on that.","Fragments":["You'd","so","They"]},{"Key":"that. You'd","Fragments":["find"]},{"Key":"You'd find","Fragments":["that"]},{"Key":"find that","Fragments":["calling","too","it","there","the","it","it's"]},{"Key":"that calling","Fragments":["`trim()`"]},{"Key":"calling `trim()`","Fragments":["on"]},{"Key":"`trim()` on","Fragments":["that"]},{"Key":"would work.","Fragments":["So","Great"]},{"Key":"work. So","Fragments":["the"]},{"Key":"the conclusion","Fragments":["ought"]},{"Key":"conclusion ought","Fragments":["to"]},{"Key":"ought to","Fragments":["be","be","learn"]},{"Key":"const qualifier","Fragments":["from","to"]},{"Key":"qualifier from","Fragments":["the"]},{"Key":"the `said2`","Fragments":["parameter"]},{"Key":"`said2` parameter","Fragments":["things"]},{"Key":"parameter things","Fragments":["should"]},{"Key":"things should","Fragments":["work."]},{"Key":" Lastly,","Fragments":["I'll","I","you","is"]},{"Key":"Lastly, I'll","Fragments":["mention"]},{"Key":"I'll mention","Fragments":["that"]},{"Key":"mention that","Fragments":["you"]},{"Key":"can solve","Fragments":["this","this,"]},{"Key":"without modifying","Fragments":["the","it,"]},{"Key":"string. But","Fragments":["this","I"]},{"Key":"But this","Fragments":["is","is","solution","isn't","is"]},{"Key":"Don't give","Fragments":["up!","up,"]},{"Key":"give up!","Fragments":["You're"]},{"Key":"up! You're","Fragments":["doing"]},{"Key":"You're doing","Fragments":["well!"]},{"Key":"In `format()`,","Fragments":["is"]},{"Key":"`format()`, is","Fragments":["`formatted`"]},{"Key":"is `formatted`","Fragments":["necessary?"]},{"Key":"`formatted` necessary?","Fragments":["Why"]},{"Key":"necessary? Why","Fragments":["not"]},{"Key":"take `digits`","Fragments":["by"]},{"Key":"`digits` by","Fragments":["value?"]},{"Key":"value? This","Fragments":["would"]},{"Key":"would offer","Fragments":["the"]},{"Key":"offer the","Fragments":["compiler"]},{"Key":"compiler the","Fragments":["opportunity"]},{"Key":"the opportunity","Fragments":["to"]},{"Key":"opportunity to","Fragments":["save","use","use"]},{"Key":" these","Fragments":["should"]},{"Key":"these should","Fragments":["be"]},{"Key":"be template","Fragments":["or"]},{"Key":"template or","Fragments":["constexpr"]},{"Key":"or constexpr","Fragments":["functions."]},{"Key":"constexpr functions.","Fragments":["but"]},{"Key":"functions. but","Fragments":["i'm"]},{"Key":"but i'm","Fragments":["too"]},{"Key":"i'm too","Fragments":["lazy"]},{"Key":"too lazy","Fragments":["for","and","to","to"]},{"Key":"lazy for","Fragments":["this"]},{"Key":"this right","Fragments":["now."]},{"Key":" @raphael","Fragments":["thanks!"]},{"Key":"@raphael thanks!","Fragments":["Your"]},{"Key":"thanks! Your","Fragments":["comment"]},{"Key":"is true,","Fragments":["however","where","doesn't"]},{"Key":"true, however","Fragments":["I"]},{"Key":"however I","Fragments":["think","do"]},{"Key":"original spelling","Fragments":["of"]},{"Key":"spelling of","Fragments":["`word`"]},{"Key":"of `word`","Fragments":["should"]},{"Key":"`word` should","Fragments":["be","be"]},{"Key":"be kept","Fragments":["in","in","in","in","in"]},{"Key":"kept in","Fragments":["the","sync","sync","sync","sync"]},{"Key":" @rahul","Fragments":["good","Thank"]},{"Key":"@rahul good","Fragments":["point,"]},{"Key":"good point,","Fragments":["I'll","thank"]},{"Key":"point, I'll","Fragments":["change"]},{"Key":" Tried","Fragments":["the","the","the","to","to"]},{"Key":"Tried the","Fragments":["singleton","singleton","singleton"]},{"Key":"the singleton","Fragments":["approach.","approach.","approach."]},{"Key":"singleton approach.","Fragments":["Not","Not","Not"]},{"Key":"approach. Not","Fragments":["sure","sure","sure"]},{"Key":"best approach.","Fragments":["But","But","But"]},{"Key":"approach. But","Fragments":["it","it","it"]},{"Key":"it sure","Fragments":["works.","works.","works.","is"]},{"Key":"removed the","Fragments":["unnecessary","unneeded","QueenColor","`strip_punctuation`","unreferenced","prototypes","need"]},{"Key":"the unnecessary","Fragments":["boost","Hungarian"]},{"Key":"unnecessary boost","Fragments":["include"]},{"Key":"include ...","Fragments":["dammit"]},{"Key":"... dammit","Fragments":[".."]},{"Key":"dammit ..","Fragments":["what"]},{"Key":".. what","Fragments":["is"]},{"Key":"is `iostream`","Fragments":["doing"]},{"Key":"`iostream` doing","Fragments":["there?"]},{"Key":"Removed unnecessary","Fragments":["includes."]},{"Key":"That `const","Fragments":["string\u0026`"]},{"Key":"and `string","Fragments":["const\u0026`"]},{"Key":"`string const\u0026`","Fragments":["is"]},{"Key":"const\u0026` is","Fragments":["making"]},{"Key":"making my","Fragments":["brain","code"]},{"Key":"my brain","Fragments":["twitch."]},{"Key":"brain twitch.","Fragments":["I"]},{"Key":"twitch. I","Fragments":["need"]},{"Key":"get off","Fragments":["my"]},{"Key":"off my","Fragments":["computer.","computer,"]},{"Key":" Dammit","Fragments":["..."]},{"Key":"Dammit ...","Fragments":["you"]},{"Key":"... you","Fragments":["had"]},{"Key":"had me","Fragments":["at"]},{"Key":"me at","Fragments":["`const`.","least"]},{"Key":"at `const`.","Fragments":["Of"]},{"Key":"`const`. Of","Fragments":["course,"]},{"Key":"Of course,","Fragments":["it","you","I","you","a","this","that","if"]},{"Key":"course, it","Fragments":["makes"]},{"Key":"makes complete","Fragments":["sense."]},{"Key":"complete sense.","Fragments":["May"]},{"Key":"sense. May","Fragments":["be"]},{"Key":"May be","Fragments":["I","will"]},{"Key":"be I","Fragments":["was"]},{"Key":"too tired","Fragments":["at"]},{"Key":"tired at","Fragments":["the"]},{"Key":"Also, many","Fragments":["thanks"]},{"Key":"many thanks","Fragments":["for"]},{"Key":"the detailed","Fragments":["explanation."]},{"Key":"detailed explanation.","Fragments":["And"]},{"Key":"explanation. And","Fragments":["no,"]},{"Key":"And no,","Fragments":["you"]},{"Key":"no, you","Fragments":["were","may"]},{"Key":"were not","Fragments":["pushy.","in","needed","using"]},{"Key":"not pushy.","Fragments":["I"]},{"Key":"pushy. I","Fragments":["am"]},{"Key":"am in","Fragments":["fact"]},{"Key":"fact re-writing","Fragments":["`hey()`"]},{"Key":"re-writing `hey()`","Fragments":["as"]},{"Key":"`hey()` as","Fragments":["per","something"]},{"Key":"as per","Fragments":["your","user"]},{"Key":"your earlier","Fragments":["suggestion"]},{"Key":"earlier suggestion","Fragments":["(will"]},{"Key":"suggestion (will","Fragments":["be"]},{"Key":"(will be","Fragments":["delayed,"]},{"Key":"be delayed,","Fragments":["final"]},{"Key":"delayed, final","Fragments":["exams"]},{"Key":"final exams","Fragments":["and"]},{"Key":"exams and","Fragments":["all"]},{"Key":"and all","Fragments":["here).","bets","are","that,","criticism","bets","that.","the","will","of","we've","the"]},{"Key":"all here).","Fragments":["One"]},{"Key":"here). One","Fragments":["of"]},{"Key":"my intentions","Fragments":["with"]},{"Key":"intentions with","Fragments":["C++"]},{"Key":"more structured","Fragments":["in"]},{"Key":"structured in","Fragments":["my"]},{"Key":"my approach,","Fragments":["as"]},{"Key":"approach, as","Fragments":["opposed"]},{"Key":"I write","Fragments":["in","the"]},{"Key":"write in","Fragments":["Python"]},{"Key":"in Python","Fragments":["for"]},{"Key":"Python for","Fragments":["my"]},{"Key":"for my","Fragments":["class","anagram","own","functions","own"]},{"Key":"class assignments.","Fragments":["And"]},{"Key":"assignments. And","Fragments":["I"]},{"Key":"think feedback","Fragments":["like"]},{"Key":"feedback like","Fragments":["your's"]},{"Key":"like your's","Fragments":["is"]},{"Key":"your's is","Fragments":["what"]},{"Key":"what will","Fragments":["make","a"]},{"Key":"make my","Fragments":["stint","life","code"]},{"Key":"my stint","Fragments":["with"]},{"Key":"stint with","Fragments":["exercism.io"]},{"Key":"with exercism.io","Fragments":["worth"]},{"Key":"exercism.io worth","Fragments":["the"]},{"Key":"the while.","Fragments":["Thumbs"]},{"Key":"while. Thumbs","Fragments":["up."]},{"Key":"string made,","Fragments":["by"]},{"Key":"made, by","Fragments":["the"]},{"Key":"way, trim_copy","Fragments":["does"]},{"Key":"trim_copy does","Fragments":["a"]},{"Key":"does a","Fragments":["good","good","value","character"]},{"Key":"good job","Fragments":["of"]},{"Key":"job of","Fragments":["that.","a"]},{"Key":"of that.","Fragments":["That","It"]},{"Key":"that. That","Fragments":["can"]},{"Key":"That can","Fragments":["take"]},{"Key":"const (or","Fragments":["not)"]},{"Key":"(or not)","Fragments":["string,"]},{"Key":"not) string,","Fragments":["because"]},{"Key":"string, because","Fragments":["it's","you"]},{"Key":"it's only","Fragments":["modifying","called","used","relevant","an"]},{"Key":"only modifying","Fragments":["the"]},{"Key":"This is,","Fragments":["I","if"]},{"Key":"think, the","Fragments":["normal"]},{"Key":"normal MO","Fragments":["of"]},{"Key":"MO of","Fragments":["most"]},{"Key":"of most","Fragments":["APIs"]},{"Key":"most APIs","Fragments":["in"]},{"Key":"APIs in","Fragments":["most"]},{"Key":"in most","Fragments":["languages.","regex","implementations).","places","cases."]},{"Key":"most languages.","Fragments":["I"]},{"Key":"languages. I","Fragments":["think"]},{"Key":"think boost","Fragments":["wasn't"]},{"Key":"boost wasn't","Fragments":["assuming"]},{"Key":"wasn't assuming","Fragments":["that"]},{"Key":"assuming that","Fragments":["should","looking","it"]},{"Key":"that should","Fragments":["be","be.","be","save","be","be","be"]},{"Key":"be how","Fragments":["the"]},{"Key":"normal trim","Fragments":["works"]},{"Key":"trim works","Fragments":["(and"]},{"Key":"works (and","Fragments":["trim_inplace"]},{"Key":"(and trim_inplace","Fragments":["for"]},{"Key":"trim_inplace for","Fragments":["the"]},{"Key":"the other)","Fragments":["because"]},{"Key":"other) because","Fragments":["it"]},{"Key":"it costs","Fragments":["more","performance."]},{"Key":"costs more","Fragments":["to"]},{"Key":"more to","Fragments":["do","its"]},{"Key":"copy version.","Fragments":["By"]},{"Key":"version. By","Fragments":["default,"]},{"Key":"By default,","Fragments":["don't"]},{"Key":"default, don't","Fragments":["pay"]},{"Key":"don't use,","Fragments":["right?"]},{"Key":" Most","Fragments":["of","important,","of"]},{"Key":"loop inside","Fragments":["the","charmaps_match"]},{"Key":"else could","Fragments":["be"]},{"Key":"easily converted","Fragments":["to"]},{"Key":"range-based for,","Fragments":["which"]},{"Key":"for, which","Fragments":["I","would"]},{"Key":"auto c","Fragments":[":",":",":","=",":"]},{"Key":": said2","Fragments":[")//or"]},{"Key":"said2 )//or","Fragments":["be"]},{"Key":")//or be","Fragments":["explicit"]},{"Key":"explicit with","Fragments":["\"char","code","code."]},{"Key":"with \"char","Fragments":["c\""]},{"Key":"\"char c\"","Fragments":["if","variable"]},{"Key":"c\" if","Fragments":["you"]},{"Key":"then said2[i]","Fragments":["can"]},{"Key":"said2[i] can","Fragments":["be"]},{"Key":"replaced by","Fragments":["c.","using","boost::to_lower","the","```question.back()```."]},{"Key":"by c.","Fragments":["The"]},{"Key":"c. The","Fragments":["only"]},{"Key":"only place","Fragments":["you'd","we"]},{"Key":"place you'd","Fragments":["have"]},{"Key":"about would","Fragments":["be"]},{"Key":"be if","Fragments":["(","it","it"]},{"Key":"== ...","Fragments":[")"]},{"Key":"... )","Fragments":["since"]},{"Key":") since","Fragments":["you'd"]},{"Key":"since you'd","Fragments":["no"]},{"Key":"you'd no","Fragments":["longer"]},{"Key":"longer have","Fragments":["easy","the"]},{"Key":"have easy","Fragments":["access"]},{"Key":"easy access","Fragments":["to"]},{"Key":"Keep up","Fragments":["the","the"]},{"Key":"input @ethel,","Fragments":["I"]},{"Key":"@ethel, I","Fragments":["agree"]},{"Key":"that. It","Fragments":["completely","depends"]},{"Key":"It completely","Fragments":["slipped"]},{"Key":"completely slipped","Fragments":["my"]},{"Key":"slipped my","Fragments":["mind"]},{"Key":"my mind","Fragments":["that","I","because","at"]},{"Key":"`trim` is","Fragments":["actually"]},{"Key":"actually `const`.","Fragments":["Once"]},{"Key":"`const`. Once","Fragments":["that"]},{"Key":"Once that","Fragments":["was"]},{"Key":"was pointed","Fragments":["out,","out"]},{"Key":"pointed out,","Fragments":["everything","remove_if"]},{"Key":"out, everything","Fragments":["else"]},{"Key":"everything else","Fragments":["made","you","is","in"]},{"Key":"else made","Fragments":["sense."]},{"Key":"Yes, `trim_copy`","Fragments":["was"]},{"Key":"`trim_copy` was","Fragments":["an"]},{"Key":"an option","Fragments":["that","-","that"]},{"Key":"option that","Fragments":["I","can"]},{"Key":"not consider.","Fragments":["I"]},{"Key":"consider. I","Fragments":["was"]},{"Key":"was probably","Fragments":["too","one","lost","mixing"]},{"Key":"probably too","Fragments":["frustrated,"]},{"Key":"too frustrated,","Fragments":["or"]},{"Key":"frustrated, or","Fragments":["what"]},{"Key":"what not.","Fragments":["But"]},{"Key":"But who","Fragments":["cares!","cares."]},{"Key":"who cares!","Fragments":["I"]},{"Key":"cares! I","Fragments":["just"]},{"Key":"just learned","Fragments":["a"]},{"Key":"learned a","Fragments":["new","lot"]},{"Key":"new thing.","Fragments":["In"]},{"Key":"thing. In","Fragments":["fact,"]},{"Key":"fact, a","Fragments":["ton"]},{"Key":"a ton","Fragments":["of","of"]},{"Key":"ton of","Fragments":["new","code.","difference."]},{"Key":"of new","Fragments":["things.","mappings"]},{"Key":"new things.","Fragments":["Like"]},{"Key":"things. Like","Fragments":["how"]},{"Key":"Like how","Fragments":["I"]},{"Key":"use `all_of`,","Fragments":["`none_of`,"]},{"Key":"`all_of`, `none_of`,","Fragments":["etc"]},{"Key":"`none_of`, etc","Fragments":["standard"]},{"Key":"etc standard","Fragments":["library"]},{"Key":"avoid string","Fragments":["manipulation"]},{"Key":"string manipulation","Fragments":["entirely.","stuff","functions"]},{"Key":"manipulation entirely.","Fragments":["Not"]},{"Key":"entirely. Not","Fragments":["paying"]},{"Key":"Not paying","Fragments":["for"]},{"Key":"for nothing","Fragments":["extra"]},{"Key":"nothing extra","Fragments":["what-so-ever."]},{"Key":"The for-each","Fragments":["loop,"]},{"Key":"for-each loop,","Fragments":["I"]},{"Key":"know something","Fragments":["like"]},{"Key":"this existed","Fragments":["in"]},{"Key":"existed in","Fragments":["C++"]},{"Key":"(I skipped","Fragments":["the"]},{"Key":"the chapter","Fragments":["on"]},{"Key":"chapter on","Fragments":["control"]},{"Key":"on control","Fragments":["flow"]},{"Key":"control flow","Fragments":[";-p).","clean","in","of","branches,"]},{"Key":"flow ;-p).","Fragments":["I"]},{"Key":";-p). I","Fragments":["loved"]},{"Key":"I loved","Fragments":["it"]},{"Key":"loved it","Fragments":["in"]},{"Key":"in Python,","Fragments":["and","where","especially"]},{"Key":"Python, and","Fragments":["I","a"]},{"Key":"sure this,","Fragments":["and"]},{"Key":"and `auto`","Fragments":["(another"]},{"Key":"`auto` (another","Fragments":["something"]},{"Key":"(another something","Fragments":["I"]},{"Key":"I recently","Fragments":["discovered),"]},{"Key":"recently discovered),","Fragments":["are"]},{"Key":"discovered), are","Fragments":["gonna"]},{"Key":"are gonna","Fragments":["make"]},{"Key":"gonna make","Fragments":["my"]},{"Key":"my life","Fragments":["a","much"]},{"Key":"life a","Fragments":["bit"]},{"Key":"Also, C++,","Fragments":["not"]},{"Key":"C++, not","Fragments":["so","boost."]},{"Key":"so idiomatic","Fragments":["ala"]},{"Key":"idiomatic ala","Fragments":["Python."]},{"Key":"ala Python.","Fragments":["But,"]},{"Key":"Python. But,","Fragments":["..."]},{"Key":"But, ...","Fragments":["ohh"]},{"Key":"... ohh","Fragments":["wait"]},{"Key":"ohh wait","Fragments":["..."]},{"Key":"wait ...","Fragments":["why"]},{"Key":"... why","Fragments":["the"]},{"Key":"the hell","Fragments":["am","out"]},{"Key":"hell am","Fragments":["I"]},{"Key":"am I","Fragments":["including"]},{"Key":"I including","Fragments":["the"]},{"Key":" give","Fragments":["me"]},{"Key":"really a","Fragments":["singleton.","good","class.","recommendation","big","class"]},{"Key":"a singleton.","Fragments":["A","After"]},{"Key":"singleton. A","Fragments":["singleton"]},{"Key":"A singleton","Fragments":["has"]},{"Key":"singleton has","Fragments":["one"]},{"Key":"has one","Fragments":["instance","problem","`switch`"]},{"Key":"one instance","Fragments":["of"]},{"Key":"class per","Fragments":["process."]},{"Key":"per process.","Fragments":["You"]},{"Key":"process. You","Fragments":["have"]},{"Key":"have zero","Fragments":["instances"]},{"Key":"zero instances","Fragments":["of"]},{"Key":"instances of","Fragments":["this","class","the","some","(!,"]},{"Key":"this class,","Fragments":["ever."]},{"Key":"class, ever.","Fragments":["Which"]},{"Key":"ever. Which","Fragments":["is"]},{"Key":"is fine.","Fragments":["Certainly"]},{"Key":"fine. Certainly","Fragments":["more"]},{"Key":"Certainly more","Fragments":["reasonable"]},{"Key":"more reasonable","Fragments":["than"]},{"Key":"reasonable than","Fragments":["a"]},{"Key":"a singleton","Fragments":["for"]},{"Key":"singleton for","Fragments":["this"]},{"Key":"case (since","Fragments":["you"]},{"Key":"save any","Fragments":["data)"]},{"Key":"any data)","Fragments":["and"]},{"Key":"data) and","Fragments":["it's"]},{"Key":"it's safer","Fragments":["in"]},{"Key":"safer in","Fragments":["any"]},{"Key":"any case","Fragments":["(no","where"]},{"Key":"case (no","Fragments":["race","duplicate"]},{"Key":"(no race","Fragments":["conditions"]},{"Key":"race conditions","Fragments":["between"]},{"Key":"conditions between","Fragments":["threads,"]},{"Key":"between threads,","Fragments":["etc)."]},{"Key":"Some people","Fragments":["would"]},{"Key":"recommend you","Fragments":["use","to","to"]},{"Key":"to group","Fragments":["functions","the"]},{"Key":"group functions","Fragments":["like"]},{"Key":"this (and","Fragments":["if","not"]},{"Key":"(and if","Fragments":["you","so,"]},{"Key":"separate into","Fragments":["a"]},{"Key":".cpp file","Fragments":["scoping","or","just","was","by"]},{"Key":"file scoping","Fragments":["the"]},{"Key":"scoping the","Fragments":["privates"]},{"Key":"the privates","Fragments":["actually"]},{"Key":"privates actually","Fragments":["makes"]},{"Key":"actually makes","Fragments":["them","this"]},{"Key":"makes them","Fragments":["arguably","easier"]},{"Key":"them arguably","Fragments":["more"]},{"Key":"arguably more","Fragments":["private)."]},{"Key":"more private).","Fragments":["I"]},{"Key":"private). I","Fragments":["know"]},{"Key":"know of","Fragments":["at","the"]},{"Key":"of at","Fragments":["least","least"]},{"Key":"one C++","Fragments":["expert"]},{"Key":"C++ expert","Fragments":["who"]},{"Key":"expert who","Fragments":["strongly"]},{"Key":"who strongly","Fragments":["advises"]},{"Key":"strongly advises","Fragments":["against"]},{"Key":"advises against","Fragments":["that"]},{"Key":"against that","Fragments":["for","on","by"]},{"Key":"the simple","Fragments":["reason","for","space","and","solution","case","case","cases","for"]},{"Key":"simple reason","Fragments":["that"]},{"Key":"reason that","Fragments":["a","I","I","I","the","less-than"]},{"Key":"namespace can","Fragments":["be"]},{"Key":"be reopened.","Fragments":["So..."]},{"Key":"reopened. So...","Fragments":["like,"]},{"Key":"So... like,","Fragments":["whatever."]},{"Key":"I super","Fragments":["love"]},{"Key":"super love","Fragments":["where"]},{"Key":"love where","Fragments":["you're"]},{"Key":"where you're","Fragments":["headed","in","going"]},{"Key":"you're headed","Fragments":["with"]},{"Key":"headed with","Fragments":["this."]},{"Key":"with this.","Fragments":["Using","Additionally,"]},{"Key":"this. Using","Fragments":["named","string"]},{"Key":"Using named","Fragments":["algorithms"]},{"Key":"named algorithms","Fragments":["like","like"]},{"Key":"something a","Fragments":["lot","little","little"]},{"Key":"of programmers","Fragments":["buck"]},{"Key":"programmers buck","Fragments":["at"]},{"Key":"buck at","Fragments":["and"]},{"Key":"at and","Fragments":["it's"]},{"Key":"it's one","Fragments":["of","of"]},{"Key":"the biggest","Fragments":["things"]},{"Key":"biggest things","Fragments":["a"]},{"Key":"of existing","Fragments":["C++"]},{"Key":"existing C++","Fragments":["is"]},{"Key":"is missing","Fragments":["that"]},{"Key":"missing that","Fragments":["would"]},{"Key":"all our","Fragments":["lives"]},{"Key":"our lives","Fragments":["easier,"]},{"Key":"lives easier,","Fragments":["IMO."]},{"Key":" Returning","Fragments":["a","a","as"]},{"Key":"Returning a","Fragments":["const","reference","new"]},{"Key":"bit odd.","Fragments":["Here's"]},{"Key":"odd. Here's","Fragments":["an"]},{"Key":"Here's an","Fragments":["object"]},{"Key":"object -","Fragments":["not"]},{"Key":"- not","Fragments":["a","someone","only","sure","too","using"]},{"Key":"object of","Fragments":["mine","that"]},{"Key":"of mine","Fragments":["but","where","is,"]},{"Key":"mine but","Fragments":["an"]},{"Key":"but an","Fragments":["actual","anonymous"]},{"Key":"an actual","Fragments":["copy","string","sentence?","person;"]},{"Key":"actual copy","Fragments":["just"]},{"Key":"copy just","Fragments":["for"]},{"Key":"for you","Fragments":["-","the","anyway","to","to","there.","implicitly.","to","comments.","just"]},{"Key":"you -","Fragments":["but"]},{"Key":"- but","Fragments":["you","I","if"]},{"Key":"change it.","Fragments":["Sure,"]},{"Key":"it. Sure,","Fragments":["you"]},{"Key":"Sure, you","Fragments":["may"]},{"Key":"may make","Fragments":["a","sense"]},{"Key":"this copy","Fragments":["and","that"]},{"Key":"change that,","Fragments":["but"]},{"Key":"that, but","Fragments":["you","'a'","const","exercism's","if"]},{"Key":"change this","Fragments":["copy","to"]},{"Key":"copy that","Fragments":["I","piece","set","your"]},{"Key":"can't touch...","Fragments":["it's"]},{"Key":"touch... it's","Fragments":["just"]},{"Key":"just odd.","Fragments":["I","If"]},{"Key":"odd. I","Fragments":["think"]},{"Key":"be most","Fragments":["obvious","worried"]},{"Key":"obvious to","Fragments":["return","me.","most"]},{"Key":"std::string or","Fragments":["a"]},{"Key":"may have","Fragments":["meant","some","been","been","to"]},{"Key":"have meant","Fragments":["to"]},{"Key":"to imply","Fragments":["that"]},{"Key":"imply that","Fragments":["the"]},{"Key":"of hey","Fragments":["(the","might","from"]},{"Key":"hey (the","Fragments":["part"]},{"Key":"(the part","Fragments":["at"]},{"Key":"part at","Fragments":["the"]},{"Key":"bottom) was","Fragments":["supposed"]},{"Key":"was supposed","Fragments":["to","to","to","to","to"]},{"Key":"go into","Fragments":["a"]},{"Key":"file. If","Fragments":["so,"]},{"Key":"If so,","Fragments":["great.","a","is"]},{"Key":"so, great.","Fragments":["Otherwise"]},{"Key":"great. Otherwise","Fragments":["I'm"]},{"Key":"Otherwise I'm","Fragments":["going","pretty"]},{"Key":"to recommend","Fragments":["that","them"]},{"Key":"1) Move","Fragments":["it"]},{"Key":"Move it","Fragments":["back"]},{"Key":"it back","Fragments":["into","down","down"]},{"Key":"back into","Fragments":["the","an","a"]},{"Key":"class body,","Fragments":["where"]},{"Key":"body, where","Fragments":["it"]},{"Key":"where it","Fragments":["gains","differs","is."]},{"Key":"it gains","Fragments":["inline","inline"]},{"Key":"gains inline","Fragments":["without","by"]},{"Key":"inline without","Fragments":["writing"]},{"Key":"2) Write","Fragments":["inline"]},{"Key":"Write inline","Fragments":["in"]},{"Key":"inline in","Fragments":["front"]},{"Key":"in front","Fragments":["of","of","of","of","of"]},{"Key":"front of","Fragments":["it","it.","them.","the","::tolower","a"]},{"Key":"3) Put","Fragments":["it,"]},{"Key":"Put it,","Fragments":["and"]},{"Key":"whole class,","Fragments":["into"]},{"Key":"class, into","Fragments":["an"]},{"Key":" 4)","Fragments":["Make","Assuming","Helper","Also,","Instead","You","You"]},{"Key":"4) Make","Fragments":["it"]},{"Key":"Make it","Fragments":["a"]},{"Key":"You know,","Fragments":["to"]},{"Key":"know, to","Fragments":["avoid"]},{"Key":"linker errors","Fragments":["if","and"]},{"Key":"errors if","Fragments":["two"]},{"Key":"two different","Fragments":["source","things.","variables","threads","methods","word,"]},{"Key":"different source","Fragments":["files"]},{"Key":"files include","Fragments":["this","it"]},{"Key":"include this","Fragments":["header","to","I","header?","header"]},{"Key":"link together","Fragments":["into"]},{"Key":"together into","Fragments":["one"]},{"Key":"recommend moving","Fragments":["the","score_list"]},{"Key":"the remove_if","Fragments":["into"]},{"Key":"remove_if into","Fragments":["your"]},{"Key":"loop rather","Fragments":["than"]},{"Key":"than marking","Fragments":["things"]},{"Key":"marking things","Fragments":["as"]},{"Key":"things as","Fragments":["zero."]},{"Key":"as zero.","Fragments":["If"]},{"Key":"zero. If","Fragments":["you're"]},{"Key":"you're concerned","Fragments":["about","about","about"]},{"Key":"concerned about","Fragments":["performance...","accumulate","it","that","the","performance...","cases","factoring"]},{"Key":"about performance...","Fragments":["I'm","you"]},{"Key":"performance... I'm","Fragments":["really"]},{"Key":"I'm really","Fragments":["not","hoping","don't","just"]},{"Key":"really not","Fragments":["sure","much","your","much"]},{"Key":"sure which","Fragments":["is"]},{"Key":"is faster.","Fragments":["Measure"]},{"Key":"faster. Measure","Fragments":["it."]},{"Key":"Measure it.","Fragments":["I"]},{"Key":"know it","Fragments":["sounds","won't","can","gets"]},{"Key":"it sounds","Fragments":["silly"]},{"Key":"sounds silly","Fragments":["to"]},{"Key":"silly to","Fragments":["do","not"]},{"Key":"do measurements","Fragments":["on"]},{"Key":"measurements on","Fragments":["a"]},{"Key":"a for-fun","Fragments":["exercise,"]},{"Key":"for-fun exercise,","Fragments":["but"]},{"Key":"exercise, but","Fragments":["it's","I"]},{"Key":"practice IMO","Fragments":["and"]},{"Key":"IMO and","Fragments":["can"]},{"Key":"a neat","Fragments":["learning"]},{"Key":"neat learning","Fragments":["experience."]},{"Key":" Yeah","Fragments":["you're","I","I"]},{"Key":"Yeah you're","Fragments":["right"]},{"Key":"not actually","Fragments":["a","needed."]},{"Key":"singleton. After","Fragments":["getting"]},{"Key":"After getting","Fragments":["off"]},{"Key":"getting off","Fragments":["my"]},{"Key":"my computer,","Fragments":["I"]},{"Key":"computer, I","Fragments":["couldn't"]},{"Key":"couldn't help","Fragments":["but"]},{"Key":"help but","Fragments":["poke"]},{"Key":"but poke","Fragments":["around"]},{"Key":"poke around","Fragments":["a","at"]},{"Key":"bit about","Fragments":["singletons","how"]},{"Key":"about singletons","Fragments":["in"]},{"Key":"singletons in","Fragments":["C++"]},{"Key":"C++ on","Fragments":["youtube"]},{"Key":"on youtube","Fragments":["on"]},{"Key":"youtube on","Fragments":["my"]},{"Key":"my phone,","Fragments":["and"]},{"Key":"phone, and","Fragments":["I"]},{"Key":"I realised","Fragments":["that"]},{"Key":"all this","Fragments":["could","functionality","mess","work"]},{"Key":"been done","Fragments":["in","when","without"]},{"Key":"a namespace.","Fragments":["Anyway,","As","I"]},{"Key":"namespace. Anyway,","Fragments":["was"]},{"Key":"Anyway, was","Fragments":["a"]},{"Key":"a fun","Fragments":["experience.","gotcha","fact","self-imposed"]},{"Key":"understand hiding","Fragments":["the"]},{"Key":"hiding the","Fragments":["real"]},{"Key":"the real","Fragments":["implementation","question","work.","star","answer"]},{"Key":"real implementation","Fragments":["in"]},{"Key":"implementation in","Fragments":["a","JS","a","my"]},{"Key":".cpp file,","Fragments":["but","but"]},{"Key":"but due","Fragments":["to"]},{"Key":"to limitations","Fragments":["of"]},{"Key":"limitations of","Fragments":["exercism.io,"]},{"Key":"of exercism.io,","Fragments":["where"]},{"Key":"exercism.io, where","Fragments":["I"]},{"Key":"can (for","Fragments":["now)"]},{"Key":"(for now)","Fragments":["submit"]},{"Key":"now) submit","Fragments":["only"]},{"Key":"submit only","Fragments":["one"]},{"Key":"file, well","Fragments":["..."]},{"Key":"the encouraging","Fragments":["remark."]},{"Key":"encouraging remark.","Fragments":["I"]},{"Key":"remark. I","Fragments":["think"]},{"Key":"a habit","Fragments":["due","of","of"]},{"Key":"habit due","Fragments":["to"]},{"Key":"to working","Fragments":["(basically"]},{"Key":"working (basically","Fragments":["learning"]},{"Key":"(basically learning","Fragments":["programming"]},{"Key":"learning programming","Fragments":["for"]},{"Key":"programming for","Fragments":["the"]},{"Key":"first time)","Fragments":["in"]},{"Key":"time) in","Fragments":["Python,"]},{"Key":"Python, where","Fragments":["writing"]},{"Key":"where writing","Fragments":["your"]},{"Key":"for everything","Fragments":["is"]},{"Key":"not optimal,","Fragments":["especially"]},{"Key":"optimal, especially","Fragments":["when"]},{"Key":"especially when","Fragments":["one","you","you","you"]},{"Key":"when one","Fragments":["is"]},{"Key":"doing number-crunching","Fragments":["scientific-stuff,"]},{"Key":"number-crunching scientific-stuff,","Fragments":["and"]},{"Key":"scientific-stuff, and","Fragments":["one"]},{"Key":"one learns","Fragments":["to"]},{"Key":"learns to","Fragments":["look"]},{"Key":"look around","Fragments":["for"]},{"Key":"and trust","Fragments":["existing"]},{"Key":"trust existing","Fragments":["libraries"]},{"Key":"existing libraries","Fragments":["(which"]},{"Key":"libraries (which","Fragments":["are"]},{"Key":"(which are","Fragments":["written","themselves","new"]},{"Key":"are written","Fragments":["in","requires"]},{"Key":"written in","Fragments":["C/C++,","something","great","C++."]},{"Key":"in C/C++,","Fragments":["and"]},{"Key":"C/C++, and","Fragments":["hence"]},{"Key":"and hence","Fragments":["the","should","have"]},{"Key":"hence the","Fragments":["reason","comment"]},{"Key":"About that","Fragments":["returned"]},{"Key":"that returned","Fragments":["`const","iterator","from","a"]},{"Key":"returned `const","Fragments":["string`,"]},{"Key":"`const string`,","Fragments":["hmm"]},{"Key":"string`, hmm","Fragments":["..."]},{"Key":"hmm ...","Fragments":["now"]},{"Key":"... now","Fragments":["that"]},{"Key":"that you've","Fragments":["explained","only","checked","only","speeded","avoided","used","offloaded","got","kept"]},{"Key":"you've explained","Fragments":["it,"]},{"Key":"explained it,","Fragments":["it"]},{"Key":"it, it","Fragments":["does","was","does","causes"]},{"Key":"seem stupid.","Fragments":["I"]},{"Key":"stupid. I","Fragments":["am"]},{"Key":"am gonna","Fragments":["do"]},{"Key":"gonna do","Fragments":["something"]},{"Key":"something about","Fragments":["it","constant","the","how","that."]},{"Key":"I iterate","Fragments":["over","4"]},{"Key":"over fixing","Fragments":["the"]},{"Key":"the not-singleton-ness","Fragments":["of"]},{"Key":"not-singleton-ness of","Fragments":["this."]},{"Key":"definitely meant","Fragments":["to"]},{"Key":"put all","Fragments":["the","the","the"]},{"Key":"the implementations","Fragments":["in"]},{"Key":"implementations in","Fragments":["the"]},{"Key":"file, but,","Fragments":["well,"]},{"Key":"but, well,","Fragments":["exercism.io"]},{"Key":"well, exercism.io","Fragments":["limitations."]},{"Key":"exercism.io limitations.","Fragments":["However,"]},{"Key":"limitations. However,","Fragments":["that"]},{"Key":"However, that","Fragments":["template"]},{"Key":"that template","Fragments":["function","function"]},{"Key":"template function","Fragments":["option,","and","you","called","of"]},{"Key":"function option,","Fragments":["that"]},{"Key":"option, that","Fragments":["looks"]},{"Key":"a direction","Fragments":["to"]},{"Key":"direction to","Fragments":["head","consider"]},{"Key":"to head","Fragments":["in"]},{"Key":"head in","Fragments":["to."]},{"Key":"in to.","Fragments":["I"]},{"Key":"to. I","Fragments":["have"]},{"Key":"never worked","Fragments":["on"]},{"Key":"worked on","Fragments":["templates","where","it,"]},{"Key":"on templates","Fragments":["before,"]},{"Key":"templates before,","Fragments":["'bout"]},{"Key":"before, 'bout","Fragments":["time."]},{"Key":"normally submit","Fragments":["two"]},{"Key":"two files,","Fragments":["but"]},{"Key":"more effort","Fragments":["and"]},{"Key":"effort and","Fragments":["apparently","lines"]},{"Key":"and apparently","Fragments":["some"]},{"Key":"apparently some","Fragments":["clients"]},{"Key":"some clients","Fragments":["don't"]},{"Key":"clients don't","Fragments":["do"]},{"Key":"don't do","Fragments":["that","it","this?"]},{"Key":"that (for","Fragments":["me"]},{"Key":"(for me","Fragments":["it's"]},{"Key":"me it's","Fragments":["just"]},{"Key":"just listing","Fragments":["more"]},{"Key":"listing more","Fragments":["files"]},{"Key":"more files","Fragments":["as"]},{"Key":" BTW","Fragments":["the","for"]},{"Key":"BTW the","Fragments":["expert"]},{"Key":"the expert","Fragments":["I"]},{"Key":"expert I","Fragments":["had"]},{"Key":"mind was","Fragments":["John"]},{"Key":"was John","Fragments":["Lakos."]},{"Key":"John Lakos.","Fragments":["He'd"]},{"Key":"Lakos. He'd","Fragments":["suggest"]},{"Key":"He'd suggest","Fragments":["you"]},{"Key":"do exactly","Fragments":["what","the"]},{"Key":"exactly what","Fragments":["you","I","you","you","the","all","is","you","I","you"]},{"Key":"did so","Fragments":["that"]},{"Key":"the functions'","Fragments":["declarations"]},{"Key":"functions' declarations","Fragments":["are"]},{"Key":"declarations are","Fragments":["forced","restrictive,"]},{"Key":"are forced","Fragments":["to"]},{"Key":"forced to","Fragments":["be","use","invest","make","make","make","make"]},{"Key":"one place.","Fragments":["With","You"]},{"Key":"place. With","Fragments":["a"]},{"Key":"With a","Fragments":["namespace","task","custom"]},{"Key":"namespace I","Fragments":["can"]},{"Key":"can reopen","Fragments":["your"]},{"Key":"reopen your","Fragments":["namespace"]},{"Key":"your namespace","Fragments":["in","or"]},{"Key":"or some","Fragments":["other","other","such)."]},{"Key":"other header","Fragments":["and"]},{"Key":"add stuff","Fragments":["to"]},{"Key":"stuff to","Fragments":["it","that"]},{"Key":"it willy-nilly,","Fragments":["making"]},{"Key":"willy-nilly, making","Fragments":["ADL"]},{"Key":"making ADL","Fragments":["wacky."]},{"Key":"ADL wacky.","Fragments":["I"]},{"Key":"wacky. I","Fragments":["don't"]},{"Key":"don't fully","Fragments":["agree"]},{"Key":"fully agree","Fragments":["with"]},{"Key":"with him,","Fragments":["but"]},{"Key":"him, but","Fragments":["he"]},{"Key":"but he","Fragments":["has"]},{"Key":"he has","Fragments":["a"]},{"Key":"a `bool`","Fragments":["converts"]},{"Key":"`bool` converts","Fragments":["to"]},{"Key":"converts to","Fragments":["an","bool.","string"]},{"Key":"an `int`,","Fragments":["so","and","however."]},{"Key":"60 -","Fragments":["(a"]},{"Key":"would work","Fragments":["as","correctly.","for","there","in","just"]},{"Key":"not seem","Fragments":["to","like","like","to"]},{"Key":"handle cases","Fragments":["where","where"]},{"Key":"cases where","Fragments":["there","there","early","I'm","I","the","someone"]},{"Key":"where there","Fragments":["are","were","is","are","aren't"]},{"Key":"are extra","Fragments":["spaces"]},{"Key":"extra spaces","Fragments":["at"]},{"Key":"spaces at","Fragments":["the","the","the","the"]},{"Key":"could shorten","Fragments":["your"]},{"Key":"shorten your","Fragments":["functions","`clean()`"]},{"Key":"functions by","Fragments":["using"]},{"Key":"using [`std::all_of`,","Fragments":["`std::none_of`,"]},{"Key":"[`std::all_of`, `std::none_of`,","Fragments":["and"]},{"Key":"`std::none_of`, and","Fragments":["`std::any_of`](http://en.cppreference.com/w/cpp/algorithm/all_any_none_of)."]},{"Key":"did anyone","Fragments":["else"]},{"Key":"else do","Fragments":["this?"]},{"Key":"messy, but","Fragments":["the"]},{"Key":"clean it","Fragments":["up"]},{"Key":"up is","Fragments":["not","to"]},{"Key":"not immediately","Fragments":["obvious","obvious","clear"]},{"Key":"immediately obvious","Fragments":["to","so"]},{"Key":"me. Basically","Fragments":["I"]},{"Key":"Basically I","Fragments":["just","tried","make"]},{"Key":"just decided","Fragments":["to"]},{"Key":"learn boost.range,","Fragments":["and"]},{"Key":"boost.range, and","Fragments":["I'm"]},{"Key":"and I'm","Fragments":["still","not","really","kind","not","not","not","really","interested","trying","always"]},{"Key":"still working","Fragments":["on","on","on"]},{"Key":"prefer this","Fragments":["solution,","answer:"]},{"Key":"as someone","Fragments":["pointed"]},{"Key":"someone pointed","Fragments":["out","out"]},{"Key":"pointed out","Fragments":["on","to","that","to"]},{"Key":"out on","Fragments":["another","my","code"]},{"Key":"another person's","Fragments":["submission,"]},{"Key":"person's submission,","Fragments":["this"]},{"Key":"submission, this","Fragments":["is"]},{"Key":"technically not","Fragments":["quite","guaranteed"]},{"Key":"quite what","Fragments":["was"]},{"Key":"was asked","Fragments":["for","for."]},{"Key":"asked for","Fragments":["in","by","numbers"]},{"Key":"for in","Fragments":["README.","the","C++11:","my","your"]},{"Key":"in README.","Fragments":["So"]},{"Key":"README. So","Fragments":["resubmitting"]},{"Key":"So resubmitting","Fragments":["with"]},{"Key":"resubmitting with","Fragments":["the"]},{"Key":"the requested","Fragments":["algorithm."]},{"Key":"decent guess","Fragments":["as"]},{"Key":"guess as","Fragments":["to"]},{"Key":"as to","Fragments":["the","the","where","your","what","whether","whether","how","avoid","avoid","why"]},{"Key":"of v","Fragments":["and"]},{"Key":"v and","Fragments":["do"]},{"Key":"a v.reserve.","Fragments":["For"]},{"Key":"v.reserve. For","Fragments":["example,"]},{"Key":"example, v.reserve(n)","Fragments":["guarantees"]},{"Key":"v.reserve(n) guarantees","Fragments":["you'll"]},{"Key":"guarantees you'll","Fragments":["never"]},{"Key":"you'll never","Fragments":["have"]},{"Key":"never have","Fragments":["to","response","to"]},{"Key":"to reallocate","Fragments":["v,"]},{"Key":"reallocate v,","Fragments":["since"]},{"Key":"v, since","Fragments":["v.size()"]},{"Key":"since v.size()","Fragments":["will"]},{"Key":"v.size() will","Fragments":["definitely"]},{"Key":"will definitely","Fragments":["not"]},{"Key":"be greater","Fragments":["than","or"]},{"Key":"considered doing","Fragments":["result.reserve(limit-2);"]},{"Key":"doing result.reserve(limit-2);","Fragments":["between"]},{"Key":"result.reserve(limit-2); between","Fragments":["lines"]},{"Key":"between lines","Fragments":["20"]},{"Key":"lines 20","Fragments":["and"]},{"Key":"20 and","Fragments":["21?"]},{"Key":"don't handle","Fragments":["primes(1)","the"]},{"Key":"handle primes(1)","Fragments":["very"]},{"Key":"primes(1) very","Fragments":["well."]},{"Key":"well. Your","Fragments":["call"]},{"Key":"Your call","Fragments":["to"]},{"Key":"to reserve","Fragments":["would","enough"]},{"Key":"reserve would","Fragments":["ask"]},{"Key":"would ask","Fragments":["for"]},{"Key":"ask for","Fragments":["all"]},{"Key":"the memory","Fragments":["(-1","usage.","preceding","allocation"]},{"Key":"memory (-1","Fragments":["cast"]},{"Key":"(-1 cast","Fragments":["to"]},{"Key":"cast to","Fragments":["unsigned","double.\"","the","bool","make"]},{"Key":"to unsigned","Fragments":["is","conversion","integers."]},{"Key":"unsigned is","Fragments":["a"]},{"Key":"mean remove","Fragments":["const"]},{"Key":"remove const","Fragments":["from"]},{"Key":"const from","Fragments":["`digits`"]},{"Key":"from `digits`","Fragments":["and"]},{"Key":"`digits` and","Fragments":["then"]},{"Key":"then remove","Fragments":["non-digit","it"]},{"Key":"remove non-digit","Fragments":["elements"]},{"Key":"non-digit elements","Fragments":["from"]},{"Key":"elements from","Fragments":["it?","the"]},{"Key":" @anabel","Fragments":["it"]},{"Key":"@anabel it","Fragments":["can"]},{"Key":"a difference;","Fragments":["the"]},{"Key":"difference; the","Fragments":["difference"]},{"Key":"difference of","Fragments":["making"]},{"Key":"of making","Fragments":["a","a","the","the","these","a","a","it"]},{"Key":"copy. Whether","Fragments":["that"]},{"Key":"Whether that","Fragments":["would"]},{"Key":"a substantial","Fragments":["difference"]},{"Key":"substantial difference","Fragments":["is"]},{"Key":"difference is","Fragments":["of","less","the","returned.\u003c/li\u003e","so","that","that","that","returned.\u003c/li\u003e"]},{"Key":"course subject","Fragments":["for"]},{"Key":"subject for","Fragments":["measurement."]},{"Key":"for measurement.","Fragments":["But"]},{"Key":"measurement. But","Fragments":["replacing"]},{"Key":"But replacing","Fragments":["the"]},{"Key":"replacing the","Fragments":["explicit","`find_if`","loop"]},{"Key":"explicit copy","Fragments":["with"]},{"Key":"copy with","Fragments":["an"]},{"Key":"implicit copy","Fragments":["can't"]},{"Key":"copy can't","Fragments":["do"]},{"Key":"do harm","Fragments":["and"]},{"Key":"harm and","Fragments":["can"]},{"Key":"The usual","Fragments":["motivation"]},{"Key":"usual motivation","Fragments":["goes"]},{"Key":"motivation goes","Fragments":["something"]},{"Key":"goes something","Fragments":["along"]},{"Key":"something along","Fragments":["the","these"]},{"Key":"along the","Fragments":["lines"]},{"Key":"std::string const","Fragments":["s"]},{"Key":"const s","Fragments":["="]},{"Key":"s =","Fragments":["\"1","\"Hello\";"]},{"Key":"= \"1","Fragments":["800"]},{"Key":"\"1 800","Fragments":["555-5555\";"]},{"Key":" format(\"1","Fragments":["800"]},{"Key":"format(\"1 800","Fragments":["555-5555\");"]},{"Key":" Line","Fragments":["2","5","41","64","6:","25"]},{"Key":"Line 2","Fragments":["above","initialises"]},{"Key":"2 above","Fragments":["creates"]},{"Key":"above creates","Fragments":["a"]},{"Key":"creates a","Fragments":["copy","temporary","string","larger"]},{"Key":"copy regardless.","Fragments":["Line"]},{"Key":"regardless. Line","Fragments":["3"]},{"Key":"Line 3","Fragments":["however"]},{"Key":"3 however","Fragments":["doesn't"]},{"Key":"however doesn't","Fragments":["*have"]},{"Key":"doesn't *have","Fragments":["to*"]},{"Key":"*have to*","Fragments":["create"]},{"Key":"to* create","Fragments":["a"]},{"Key":"copy. The","Fragments":["compiler"]},{"Key":"compiler generates","Fragments":["a"]},{"Key":"a temporary","Fragments":["string","is","`std::string`","string","for","without","variable"]},{"Key":"temporary string","Fragments":["object","with","it","that"]},{"Key":"object just","Fragments":["prior"]},{"Key":"just prior","Fragments":["to","to"]},{"Key":"prior to","Fragments":["the","the","calling","calling","returning","entering"]},{"Key":"the call","Fragments":["to","site!),","site.","to","to","to","to","to","to","to","is","to","to","out"]},{"Key":"to `format()`,","Fragments":["this"]},{"Key":"`format()`, this","Fragments":["temporary"]},{"Key":"this temporary","Fragments":["will"]},{"Key":"temporary will","Fragments":["not"]},{"Key":"not live","Fragments":["past"]},{"Key":"live past","Fragments":["the"]},{"Key":"past the","Fragments":["`format()`","life","next","end"]},{"Key":"the `format()`","Fragments":["call,","scope"]},{"Key":"`format()` call,","Fragments":["and"]},{"Key":"call, and","Fragments":["no"]},{"Key":"and no","Fragments":["one","code","abstraction.","dynamic","dynamic","letters,","dice,","other","compiler","lowercase","input","requirements","difference","lowercase","lower"]},{"Key":"no one","Fragments":["other","of","else","was"]},{"Key":"one other","Fragments":["than","point","point"]},{"Key":"`format()` scope","Fragments":["gets"]},{"Key":"scope gets","Fragments":["to"]},{"Key":"gets to","Fragments":["see"]},{"Key":"see or","Fragments":["even"]},{"Key":"or even","Fragments":["know","vector","const","better","better,","possibly","`!std::islower(*it)`."]},{"Key":"this temporary.","Fragments":["`format()`"]},{"Key":"temporary. `format()`","Fragments":["might"]},{"Key":"`format()` might","Fragments":["as"]},{"Key":"well use","Fragments":["that"]},{"Key":"as its","Fragments":["dedicated","pythonic","own"]},{"Key":"its dedicated","Fragments":["copy"]},{"Key":"dedicated copy","Fragments":["to"]},{"Key":"copy to","Fragments":["mess","mutch"]},{"Key":"is another","Fragments":["thing","fantastic","approach","defensive"]},{"Key":"another thing","Fragments":["though.","altogether."]},{"Key":"thing though.","Fragments":["This"]},{"Key":"though. This","Fragments":["can"]},{"Key":"can help","Fragments":["with","address","with","accomplish"]},{"Key":"help with","Fragments":["exception","this).","understanding","readability."]},{"Key":"with exception","Fragments":["safety."]},{"Key":"exception safety.","Fragments":["If"]},{"Key":"safety. If","Fragments":["the"]},{"Key":"argument fails","Fragments":["to"]},{"Key":"fails to","Fragments":["construct"]},{"Key":"construct (at","Fragments":["the"]},{"Key":"call site!),","Fragments":["`format()`"]},{"Key":"site!), `format()`","Fragments":["doesn't"]},{"Key":"`format()` doesn't","Fragments":["even"]},{"Key":"doesn't even","Fragments":["get","compile."]},{"Key":"even get","Fragments":["to","there.","started."]},{"Key":"to begin","Fragments":["its","\u0026","\u0026"]},{"Key":"begin its","Fragments":["business."]},{"Key":"its business.","Fragments":["There"]},{"Key":"business. There","Fragments":["is"]},{"Key":"is literally","Fragments":["nothing"]},{"Key":"literally nothing","Fragments":["for","you"]},{"Key":"nothing for","Fragments":["it","me,"]},{"Key":"to handle,","Fragments":["nothing"]},{"Key":"handle, nothing","Fragments":["to"]},{"Key":"nothing to","Fragments":["clean"]},{"Key":"clean up,","Fragments":["and"]},{"Key":"up, and","Fragments":["no"]},{"Key":"no code","Fragments":["is"]},{"Key":"is necessary","Fragments":["to"]},{"Key":"necessary to","Fragments":["worry","check","make"]},{"Key":"it. There","Fragments":["is"]},{"Key":"also no","Fragments":["room"]},{"Key":"no room","Fragments":["for"]},{"Key":"room for","Fragments":["unnecessarily","improvement","future","error","improvements,"]},{"Key":"for unnecessarily","Fragments":["paying"]},{"Key":"unnecessarily paying","Fragments":["in"]},{"Key":"paying in","Fragments":["performance"]},{"Key":"performance at","Fragments":["runtime."]},{"Key":"at runtime.","Fragments":["You"]},{"Key":"runtime. You","Fragments":["can't"]},{"Key":"You can't","Fragments":["do","construct","declare","overload","submit"]},{"Key":"that even","Fragments":["if","O(1)","numbers"]},{"Key":"std::string format(std::string","Fragments":["const\u0026"]},{"Key":"format(std::string const\u0026","Fragments":["digits)"]},{"Key":"const\u0026 digits)","Fragments":["{"]},{"Key":"auto const","Fragments":["result","\u0026"]},{"Key":"const result","Fragments":["="]},{"Key":" large*","Fragments":["large_object"]},{"Key":"large* large_object","Fragments":["="]},{"Key":"large_object =","Fragments":["new"]},{"Key":"= new","Fragments":["large{result};"]},{"Key":" Above,","Fragments":["`digits`"]},{"Key":"Above, `digits`","Fragments":["is"]},{"Key":"`digits` is","Fragments":["dirt-cheap"]},{"Key":"is dirt-cheap","Fragments":["to"]},{"Key":"dirt-cheap to","Fragments":["set"]},{"Key":"to set","Fragments":["up,","sentence","is_upper"]},{"Key":"set up,","Fragments":["because","I"]},{"Key":"up, because","Fragments":["it's"]},{"Key":"reference. Can't","Fragments":["fail."]},{"Key":"Can't fail.","Fragments":["However,"]},{"Key":"fail. However,","Fragments":["`formatted`"]},{"Key":"However, `formatted`","Fragments":["later"]},{"Key":"`formatted` later","Fragments":["on"]},{"Key":"later on","Fragments":["can","down"]},{"Key":"on can","Fragments":["fail"]},{"Key":"can fail","Fragments":["to"]},{"Key":"fail to","Fragments":["construct.","acquire,","compile","compile","compile."]},{"Key":"to construct.","Fragments":["If"]},{"Key":"construct. If","Fragments":["that"]},{"Key":"that happens,","Fragments":["well,","it's"]},{"Key":"happens, well,","Fragments":["all"]},{"Key":"well, all","Fragments":["your"]},{"Key":"all your","Fragments":["hard","functions","help!","new","iteration","errors","tests"]},{"Key":"your hard","Fragments":["work","work"]},{"Key":"hard work","Fragments":["from","avoiding"]},{"Key":"work from","Fragments":["`do_hard_word()`"]},{"Key":"from `do_hard_word()`","Fragments":["was"]},{"Key":"`do_hard_word()` was","Fragments":["for"]},{"Key":"for nil,","Fragments":["and,"]},{"Key":"nil, and,","Fragments":["what's"]},{"Key":"and, what's","Fragments":["more,"]},{"Key":"what's more,","Fragments":["`large_object`"]},{"Key":"more, `large_object`","Fragments":["leaked."]},{"Key":"course, you","Fragments":["can","can"]},{"Key":"can handle","Fragments":["the","those","the"]},{"Key":"the leak","Fragments":["with"]},{"Key":"leak with","Fragments":["RAII,"]},{"Key":"with RAII,","Fragments":["if"]},{"Key":"RAII, if","Fragments":["`large_object`"]},{"Key":"if `large_object`","Fragments":["was"]},{"Key":"`large_object` was","Fragments":["a"]},{"Key":"managed resource.","Fragments":["But"]},{"Key":"resource. But","Fragments":["you"]},{"Key":"still would","Fragments":["have","like"]},{"Key":"have worked","Fragments":["hard","with.","with"]},{"Key":"worked hard","Fragments":["before"]},{"Key":"hard before","Fragments":["failing."]},{"Key":"before failing.","Fragments":["It's"]},{"Key":"failing. It's","Fragments":["better"]},{"Key":"It's better","Fragments":["to","to"]},{"Key":"to fail","Fragments":["without","to","and","noisily,","test","the"]},{"Key":"fail without","Fragments":["working"]},{"Key":"without working","Fragments":["hard"]},{"Key":"working hard","Fragments":["before,"]},{"Key":"hard before,","Fragments":["you"]},{"Key":"before, you","Fragments":["know."]},{"Key":"Don't equate","Fragments":["that"]},{"Key":"equate that","Fragments":["last"]},{"Key":"that last","Fragments":["sentence"]},{"Key":"last sentence","Fragments":["to"]},{"Key":"sentence to","Fragments":["real"]},{"Key":"to real","Fragments":["life."]},{"Key":"real life.","Fragments":["I'm","See"]},{"Key":"life. I'm","Fragments":["talking"]},{"Key":"I'm talking","Fragments":["about","about"]},{"Key":"talking about","Fragments":["machines,","memory","a","\u003c","is","line","simulating","unicode","a","anonymous","the"]},{"Key":"about machines,","Fragments":["time,"]},{"Key":"machines, time,","Fragments":["money,"]},{"Key":"time, money,","Fragments":["energy."]},{"Key":"money, energy.","Fragments":["Dead"]},{"Key":"energy. Dead","Fragments":["trees."]},{"Key":"Dead trees.","Fragments":["Irresponsibly"]},{"Key":"trees. Irresponsibly","Fragments":["wasted"]},{"Key":"Irresponsibly wasted","Fragments":["fossil"]},{"Key":"wasted fossil","Fragments":["fuel,"]},{"Key":"fossil fuel,","Fragments":["global"]},{"Key":"fuel, global","Fragments":["warming,"]},{"Key":"global warming,","Fragments":["killing"]},{"Key":"warming, killing","Fragments":["the"]},{"Key":"killing the","Fragments":["rain"]},{"Key":"the rain","Fragments":["forest."]},{"Key":"rain forest.","Fragments":["Burning"]},{"Key":"forest. Burning","Fragments":["energy"]},{"Key":"Burning energy","Fragments":["unwisely."]},{"Key":"energy unwisely.","Fragments":["Un-zen-like."]},{"Key":"unwisely. Un-zen-like.","Fragments":["That"]},{"Key":"Un-zen-like. That","Fragments":["sort"]},{"Key":"That sort","Fragments":["of"]},{"Key":"need boost-library","Fragments":["for"]},{"Key":"boost-library for","Fragments":["such"]},{"Key":"task? There","Fragments":["are"]},{"Key":"are solutions","Fragments":["out"]},{"Key":"solutions out","Fragments":["there"]},{"Key":"this simple","Fragments":["task","task","task","task","task","problem,","exercise,","it","example","algorithm","formatted","with","exercise","format","algorithm","problem,"]},{"Key":"simple task","Fragments":["or","or","or","or","or","or"]},{"Key":"task or","Fragments":["can","can","can","can","can","can"]},{"Key":"or can","Fragments":["you","you","you","you","you","you"]},{"Key":"you implement","Fragments":["it"]},{"Key":"by just","Fragments":["using","writing","looking","examining"]},{"Key":"using things","Fragments":["from","from"]},{"Key":"things from","Fragments":["`std`?","`std`?"]},{"Key":"you imagine","Fragments":["a","a","a","a","a"]},{"Key":"imagine a","Fragments":["way","way","way","way","way","bunch"]},{"Key":"only using","Fragments":["things","`std`-stuff?","`std`-stuff?","`std`-stuff?","`std`-stuff?","it","the"]},{"Key":"this really","Fragments":["passing","buys","achieved?","easy.","improved"]},{"Key":"really passing","Fragments":["the"]},{"Key":" \"Containg","Fragments":["a"]},{"Key":"\"Containg a","Fragments":["?"]},{"Key":"a ?","Fragments":["is","means"]},{"Key":"? is","Fragments":["not","found"]},{"Key":"a question\"","Fragments":["should","and"]},{"Key":"question\" should","Fragments":["not"]},{"Key":"be recognized","Fragments":["as"]},{"Key":"recognized as","Fragments":["question,","yelled"]},{"Key":"as question,","Fragments":["also"]},{"Key":"question, also","Fragments":["\"i"]},{"Key":"also \"i","Fragments":["am"]},{"Key":"\"i am","Fragments":["not"]},{"Key":"not yelled!\"","Fragments":["should"]},{"Key":"yelled!\" should","Fragments":["not"]},{"Key":"not get","Fragments":["recognized","no","that"]},{"Key":"get recognized","Fragments":["as"]},{"Key":"as yelled","Fragments":["while"]},{"Key":"yelled while","Fragments":["\"I"]},{"Key":"while \"I","Fragments":["AM"]},{"Key":"\"I AM","Fragments":["YELLING\""]},{"Key":"AM YELLING\"","Fragments":["should."]},{"Key":" Super","Fragments":["minor"]},{"Key":"Super minor","Fragments":["issue,"]},{"Key":"minor issue,","Fragments":["but"]},{"Key":"issue, but","Fragments":["I"]},{"Key":"your trim","Fragments":["would"]},{"Key":"trim would","Fragments":["be"]},{"Key":"be closer","Fragments":["to"]},{"Key":"closer to","Fragments":["boost::trim_copy,","std::none_of,","std::any_of.","what"]},{"Key":"to boost::trim_copy,","Fragments":["has_no_lowercase"]},{"Key":"boost::trim_copy, has_no_lowercase","Fragments":["is"]},{"Key":"has_no_lowercase is","Fragments":["probably"]},{"Key":"probably closer","Fragments":["to","to"]},{"Key":"to std::none_of,","Fragments":["and"]},{"Key":"std::none_of, and","Fragments":["your"]},{"Key":"and your","Fragments":["has_some_uppercase","cpp","implementation","functions","choices.","comment","general","code"]},{"Key":"your has_some_uppercase","Fragments":["is"]},{"Key":"has_some_uppercase is","Fragments":["probably"]},{"Key":"be worth","Fragments":["mentioning","declaring","considering","attempting","a","passing","checking"]},{"Key":"you took","Fragments":["what"]},{"Key":"took what","Fragments":["as"]},{"Key":"what as","Fragments":["a"]},{"Key":"std::string rather","Fragments":["than"]},{"Key":"std::string\u0026 you","Fragments":["could"]},{"Key":"could call","Fragments":["boost::trim"]},{"Key":"call boost::trim","Fragments":["directly"]},{"Key":"boost::trim directly","Fragments":["on"]},{"Key":"directly on","Fragments":["it"]},{"Key":"then continue","Fragments":["to"]},{"Key":"continue to","Fragments":["function","work.","work."]},{"Key":"to function","Fragments":["with","\"hey\"","(for"]},{"Key":"just what.","Fragments":["I"]},{"Key":"what. I","Fragments":["think"]},{"Key":"a tiny,","Fragments":["tiny"]},{"Key":"tiny, tiny","Fragments":["bit"]},{"Key":"tiny bit","Fragments":["neater,","faster.","concerned","better","of","in","of"]},{"Key":"bit neater,","Fragments":["and"]},{"Key":"neater, and","Fragments":["it's"]},{"Key":"it's theoretically","Fragments":["possible"]},{"Key":"theoretically possible","Fragments":["that","(if"]},{"Key":"possible that","Fragments":["it","someone","someone","a"]},{"Key":"a tiny","Fragments":["bit","one:","bit","bit","bit","bit","bit"]},{"Key":" ideally","Fragments":["i'd"]},{"Key":"ideally i'd","Fragments":["load"]},{"Key":"i'd load","Fragments":["primes"]},{"Key":"load primes","Fragments":["from"]},{"Key":"from files,","Fragments":["i"]},{"Key":"files, i","Fragments":["think,"]},{"Key":"i think,","Fragments":["to"]},{"Key":"think, to","Fragments":["ease"]},{"Key":"to ease","Fragments":["on"]},{"Key":"ease on","Fragments":["memory"]},{"Key":"memory use.","Fragments":["but"]},{"Key":"use. but","Fragments":["exercism"]},{"Key":"but exercism","Fragments":["isn't","seems"]},{"Key":"exercism isn't","Fragments":["keen"]},{"Key":"isn't keen","Fragments":["on"]},{"Key":"keen on","Fragments":["that.","is"]},{"Key":"that. so","Fragments":["i"]},{"Key":"i demonstrate","Fragments":["the"]},{"Key":"demonstrate the","Fragments":["point"]},{"Key":"point with","Fragments":["an"]},{"Key":"How does","Fragments":["one","the","the","it","it","it"]},{"Key":"does one","Fragments":["come"]},{"Key":"one come","Fragments":["up"]},{"Key":"with such","Fragments":["a","short"]},{"Key":" Especially","Fragments":["how"]},{"Key":"Especially how","Fragments":["did"]},{"Key":"you come","Fragments":["up"]},{"Key":"That ...","Fragments":["doesn't"]},{"Key":"... doesn't","Fragments":["look"]},{"Key":"doesn't look","Fragments":["like","like"]},{"Key":"look like","Fragments":["the","it","you're","the","`bool","this","a","is:","there"]},{"Key":"the Sieve","Fragments":["of"]},{"Key":"Sieve of","Fragments":["Eratosthenes","Erastothenes."]},{"Key":"of Eratosthenes","Fragments":["algorithm"]},{"Key":"Eratosthenes algorithm","Fragments":["..."]},{"Key":"algorithm ...","Fragments":["is"]},{"Key":"... is","Fragments":["it?"]},{"Key":"would agree,","Fragments":["I"]},{"Key":"agree, I","Fragments":["don't","think"]},{"Key":"quite the","Fragments":["algorithm"]},{"Key":"algorithm the","Fragments":["README","same)"]},{"Key":"README asked","Fragments":["for."]},{"Key":"asked for.","Fragments":["It's"]},{"Key":"for. It's","Fragments":["a"]},{"Key":"odd having","Fragments":["the"]},{"Key":"having the","Fragments":["internal","all","whole"]},{"Key":"internal details","Fragments":["specified"]},{"Key":"details specified","Fragments":["in"]},{"Key":"the requirements,","Fragments":["but","so"]},{"Key":"requirements, but","Fragments":["that's","the"]},{"Key":"that's going","Fragments":["to","to"]},{"Key":"to happen","Fragments":["with","in","once"]},{"Key":"happen with","Fragments":["exercises."]},{"Key":"it's probably","Fragments":["worth","slightly","slightly","better","not","better","not","cleaner","good","slower."]},{"Key":"probably worth","Fragments":["using"]},{"Key":"worth using","Fragments":["the"]},{"Key":"the nifty","Fragments":["initializer_list"]},{"Key":"nifty initializer_list","Fragments":["syntax"]},{"Key":"initializer_list syntax","Fragments":["we"]},{"Key":"syntax we","Fragments":["have"]},{"Key":"have these","Fragments":["days.","two"]},{"Key":"these days.","Fragments":["I'd"]},{"Key":"days. I'd","Fragments":["think"]},{"Key":"( n","Fragments":["\u003c"]},{"Key":"\u003c 2","Fragments":[")"]},{"Key":" std::vector\u003cint\u003e","Fragments":["result"]},{"Key":"std::vector\u003cint\u003e result","Fragments":["="]},{"Key":"{ 2","Fragments":["};"]},{"Key":"While this","Fragments":["does","passes","implementation"]},{"Key":"this does","Fragments":["pass"]},{"Key":"does pass","Fragments":["the"]},{"Key":"given validation","Fragments":["test,"]},{"Key":"validation test,","Fragments":["\"carrot\""]},{"Key":"test, \"carrot\"","Fragments":["and"]},{"Key":"\"carrot\" and","Fragments":["\"convert\""]},{"Key":"and \"convert\"","Fragments":["come"]},{"Key":"\"convert\" come","Fragments":["out"]},{"Key":"come out","Fragments":["as","of"]},{"Key":"as zero,","Fragments":["it's"]},{"Key":"zero, it's","Fragments":["for"]},{"Key":"it's for","Fragments":["the"]},{"Key":"wrong reason.","Fragments":["This"]},{"Key":"reason. This","Fragments":["algorithm"]},{"Key":"This algorithm","Fragments":["treats"]},{"Key":"algorithm treats","Fragments":["any"]},{"Key":"treats any","Fragments":["non-'1'"]},{"Key":"any non-'1'","Fragments":["character"]},{"Key":"non-'1' character","Fragments":["as"]},{"Key":"character as","Fragments":["'0'.","_index_"]},{"Key":"as '0'.","Fragments":["So"]},{"Key":"'0'. So","Fragments":["1carrot"]},{"Key":"So 1carrot","Fragments":["would"]},{"Key":"1carrot would","Fragments":["be"]},{"Key":"be 64,","Fragments":["which"]},{"Key":"64, which","Fragments":["is"]},{"Key":"is fairly","Fragments":["surprising.","new","readable.","long","recent","robust."]},{"Key":"for overflow","Fragments":["is"]},{"Key":"overflow is","Fragments":["a"]},{"Key":"great idea,","Fragments":["but"]},{"Key":"but could","Fragments":["probably","have.","make"]},{"Key":"be expressed","Fragments":["more","as"]},{"Key":"expressed more","Fragments":["clearly."]},{"Key":"more clearly.","Fragments":["I'm"]},{"Key":"clearly. I'm","Fragments":["guessing"]},{"Key":"guessing a","Fragments":["separate"]},{"Key":"separate if","Fragments":["statement,"]},{"Key":"if statement,","Fragments":["for"]},{"Key":"statement, for","Fragments":["one."]},{"Key":"for one.","Fragments":["It"]},{"Key":"one. It","Fragments":["also","took"]},{"Key":"also gets","Fragments":["really"]},{"Key":"gets really","Fragments":["wacky"]},{"Key":"really wacky","Fragments":["if"]},{"Key":"wacky if","Fragments":["the"]},{"Key":"string only","Fragments":["has","once.","once.","twice","to"]},{"Key":"only has","Fragments":["'0's","static","a"]},{"Key":"has '0's","Fragments":["-"]},{"Key":"'0's -","Fragments":["which"]},{"Key":"- which","Fragments":["at"]},{"Key":"which at","Fragments":["first"]},{"Key":"glance was","Fragments":["what"]},{"Key":"test was","Fragments":["about.","by","a","ever"]},{"Key":" Maybe...","Fragments":["maybe"]},{"Key":"Maybe... maybe","Fragments":["this"]},{"Key":"maybe this","Fragments":["isn't","could"]},{"Key":"isn't any","Fragments":["better,"]},{"Key":"any better,","Fragments":["but"]},{"Key":"better, but","Fragments":["that","then"]},{"Key":"that LHS","Fragments":["expression"]},{"Key":"LHS expression","Fragments":["could"]},{"Key":"expression could","Fragments":["be"]},{"Key":" distance(","Fragments":["find(begin(str),end(str),'1'),"]},{"Key":"distance( find(begin(str),end(str),'1'),","Fragments":["end(str)"]},{"Key":"find(begin(str),end(str),'1'), end(str)","Fragments":[")"]},{"Key":"maybe with","Fragments":["trim"]},{"Key":"with trim","Fragments":["the"]},{"Key":"trim the","Fragments":["zeros","```cstr_range```,","string","message.","input"]},{"Key":"the zeros","Fragments":["first,"]},{"Key":"zeros first,","Fragments":["and"]},{"Key":" OK","Fragments":["I"]},{"Key":"OK I","Fragments":["failed"]},{"Key":"I failed","Fragments":["to"]},{"Key":"provide a","Fragments":["useful","way","more","begin()","means"]},{"Key":"useful suggestion,","Fragments":["so"]},{"Key":"suggestion, so","Fragments":["here's"]},{"Key":"so here's","Fragments":["a"]},{"Key":"here's a","Fragments":["tiny","couple"]},{"Key":"tiny one:","Fragments":["I"]},{"Key":"one: I","Fragments":["prefer"]},{"Key":"prefer ++result","Fragments":["to"]},{"Key":"++result to","Fragments":["result"]},{"Key":"result +=","Fragments":["1.","c"]},{"Key":"+= 1.","Fragments":["Doesn't"]},{"Key":"1. Doesn't","Fragments":["really"]},{"Key":"Doesn't really","Fragments":["matter,"]},{"Key":"really matter,","Fragments":["so"]},{"Key":"matter, so","Fragments":["whatever."]},{"Key":"First off,","Fragments":["the","it's","I","thanks"]},{"Key":"off, the","Fragments":["solution"]},{"Key":"solution you","Fragments":["have"]},{"Key":"nice and","Fragments":["clean.","tight,","clean.","efficient","clean.","terse.","clean,","simple","compact"]},{"Key":"and clean.","Fragments":["You","However,"]},{"Key":"clean. You","Fragments":["accomplished"]},{"Key":"You accomplished","Fragments":["the"]},{"Key":"accomplished the","Fragments":["goal"]},{"Key":"goal without","Fragments":["having","the"]},{"Key":"said, there","Fragments":["are"]},{"Key":"some inefficiencies","Fragments":["here"]},{"Key":"inefficiencies here","Fragments":["that"]},{"Key":"here that","Fragments":["could","needs"]},{"Key":"be corrected.","Fragments":["For"]},{"Key":"corrected. For","Fragments":["example,"]},{"Key":"example, the","Fragments":["method","regex"]},{"Key":"method you","Fragments":["chose","chose."]},{"Key":"to determine","Fragments":["if","which","if","which","that","if","if","the","the","if","if","if","if","the","if","the","a"]},{"Key":"string consisted","Fragments":["of"]},{"Key":"consisted of","Fragments":["all","a"]},{"Key":"all upper","Fragments":["case","case"]},{"Key":"case letters","Fragments":["requires","and","are","and","will","in","in","which"]},{"Key":"letters requires","Fragments":["a"]},{"Key":"a total","Fragments":["of","board."]},{"Key":"total of","Fragments":["3","all"]},{"Key":"of 3","Fragments":["separate","and"]},{"Key":"separate iterations","Fragments":["of"]},{"Key":"iterations of","Fragments":["the"]},{"Key":"string (one","Fragments":["to"]},{"Key":"(one to","Fragments":["check"]},{"Key":"for letters","Fragments":["at"]},{"Key":"letters at","Fragments":["all,"]},{"Key":"all, one","Fragments":["to"]},{"Key":"one to","Fragments":["upper","write","nitpick"]},{"Key":"case it,","Fragments":["another"]},{"Key":"it, another","Fragments":["to"]},{"Key":"another to","Fragments":["compare)"]},{"Key":"to compare)","Fragments":["and"]},{"Key":"compare) and","Fragments":["likely"]},{"Key":"and likely","Fragments":["requires"]},{"Key":"likely requires","Fragments":["a"]},{"Key":"a heap","Fragments":["allocation","allocation"]},{"Key":"heap allocation","Fragments":["to","at"]},{"Key":"allocation to","Fragments":["copy"]},{"Key":"string (depending","Fragments":["on"]},{"Key":"on std:string's","Fragments":["implementation)."]},{"Key":"std:string's implementation).","Fragments":["Sometimes"]},{"Key":"implementation). Sometimes","Fragments":["it's"]},{"Key":"Sometimes it's","Fragments":["helpful"]},{"Key":"it's helpful","Fragments":["to"]},{"Key":"the negation","Fragments":["of"]},{"Key":"negation of","Fragments":["a"]},{"Key":"a logical","Fragments":["condition."]},{"Key":"logical condition.","Fragments":["Checking"]},{"Key":"condition. Checking","Fragments":["for"]},{"Key":"Checking for","Fragments":["the","whitespace"]},{"Key":"any single","Fragments":["lower"]},{"Key":"single lower","Fragments":["case","character"]},{"Key":"letter is","Fragments":["trivial","in","lowercase","a","of","upper/lower","the","uppercase"]},{"Key":"is trivial","Fragments":["and","to"]},{"Key":"trivial and","Fragments":["requires"]},{"Key":"and requires","Fragments":["at"]},{"Key":"requires at","Fragments":["most"]},{"Key":"at most","Fragments":["a","64","```const","instead","4","be"]},{"Key":"most a","Fragments":["single"]},{"Key":"single iteration","Fragments":["of","over"]},{"Key":"iteration of","Fragments":["the","the","N","the","the"]},{"Key":"more nit-picky","Fragments":["note,"]},{"Key":"nit-picky note,","Fragments":["only_numbers()"]},{"Key":"note, only_numbers()","Fragments":["is"]},{"Key":"only_numbers() is","Fragments":["misnamed."]},{"Key":"is misnamed.","Fragments":["It's"]},{"Key":"misnamed. It's","Fragments":["checking"]},{"Key":"It's checking","Fragments":["that"]},{"Key":"checking that","Fragments":["there","the"]},{"Key":" Finally,","Fragments":["your","you","since","as","using"]},{"Key":"Finally, your","Fragments":["code"]},{"Key":"code doesn't","Fragments":["indicate","know","feel","do"]},{"Key":"doesn't indicate","Fragments":["the"]},{"Key":"indicate the","Fragments":["logical","abstraction","qualities"]},{"Key":"logical abstraction","Fragments":["at"]},{"Key":"abstraction at","Fragments":["work."]},{"Key":"at work.","Fragments":["There's"]},{"Key":"work. There's","Fragments":["no"]},{"Key":"There's no","Fragments":["context","reason","real","need"]},{"Key":"no context","Fragments":["for"]},{"Key":"context for","Fragments":["why"]},{"Key":"for why","Fragments":["a"]},{"Key":"a condition","Fragments":["leads"]},{"Key":"condition leads","Fragments":["to"]},{"Key":"a response.","Fragments":["Someone"]},{"Key":"response. Someone","Fragments":["looking"]},{"Key":"Someone looking","Fragments":["at"]},{"Key":"that \"Whoa,","Fragments":["chill"]},{"Key":"out!\" is","Fragments":["a"]},{"Key":"to Bob","Fragments":["being","-","causes"]},{"Key":"Bob being","Fragments":["yelled"]},{"Key":"being yelled","Fragments":["at."]},{"Key":"yelled at.","Fragments":["Naming"]},{"Key":"at. Naming","Fragments":["methods"]},{"Key":"Naming methods","Fragments":["by"]},{"Key":"methods by","Fragments":["what"]},{"Key":"by what","Fragments":["they"]},{"Key":"they logically","Fragments":["mean"]},{"Key":"logically mean","Fragments":["(rather"]},{"Key":"mean (rather","Fragments":["than"]},{"Key":"they literally","Fragments":["check)"]},{"Key":"literally check)","Fragments":["helps"]},{"Key":"check) helps","Fragments":["with"]},{"Key":"helps with","Fragments":["this.","that?","self-documentation"]},{"Key":"this. Additionally,","Fragments":["using"]},{"Key":"Additionally, using","Fragments":["well"]},{"Key":"using well","Fragments":["named"]},{"Key":"well named","Fragments":["constants,","test","variables"]},{"Key":"named constants,","Fragments":["rather"]},{"Key":"constants, rather","Fragments":["than"]},{"Key":"than magic","Fragments":["string"]},{"Key":"string literals,","Fragments":["adds"]},{"Key":"literals, adds","Fragments":["meaning."]},{"Key":"think mostly","Fragments":["this"]},{"Key":"mostly this","Fragments":["is"]},{"Key":"pretty straight","Fragments":["forward.","forward,"]},{"Key":"only significant","Fragments":["trade-off"]},{"Key":"significant trade-off","Fragments":["I"]},{"Key":"trade-off I","Fragments":["made"]},{"Key":"made was","Fragments":["to","to"]},{"Key":"of isShouted","Fragments":["simple."]},{"Key":"isShouted simple.","Fragments":["It"]},{"Key":"simple. It","Fragments":["is"]},{"Key":"iteration over","Fragments":["the","the","the","the"]},{"Key":"the intent","Fragments":["less","clear.","upfront","of","and"]},{"Key":"intent less","Fragments":["clear."]},{"Key":" `3","Fragments":["+"]},{"Key":"`3 +","Fragments":["6"]},{"Key":"+ 6","Fragments":["+"]},{"Key":"6 +","Fragments":["9"]},{"Key":"+ 9","Fragments":["+"]},{"Key":"9 +","Fragments":["...","0","1"]},{"Key":"+ ...","Fragments":["="]},{"Key":"... =","Fragments":["3"]},{"Key":"= 3","Fragments":["*","+","*","+","*"]},{"Key":"3 *","Fragments":["(1","3","3"]},{"Key":"* (1","Fragments":["+"]},{"Key":"(1 +","Fragments":["2"]},{"Key":"+ 2","Fragments":["+","=","*"]},{"Key":"2 +","Fragments":["3","1"]},{"Key":"+ 3","Fragments":["+"]},{"Key":"3 +","Fragments":["...)`","0","0"]},{"Key":"really wanted","Fragments":["to","to"]},{"Key":"avoid iterating","Fragments":["over"]},{"Key":"iterating over","Fragments":["the","the","the","`conversion`","the","the","an","the","the","the","a","indices","two","all","the","the","it","the"]},{"Key":"the integers","Fragments":["which","[0,bound).","with"]},{"Key":"integers which","Fragments":["are"]},{"Key":"which are","Fragments":["not","hard","a","either","a","not.","hard","whitespace...","in","identifying","capitalized,","called","in"]},{"Key":"not multiples,","Fragments":["and"]},{"Key":"multiples, and","Fragments":["I"]},{"Key":"doing primitive","Fragments":["raw","stuff."]},{"Key":"primitive raw","Fragments":["for"]},{"Key":"raw for","Fragments":["loops.","loops"]},{"Key":"for loops.","Fragments":["So","Instead,","I"]},{"Key":"loops. So","Fragments":["I"]},{"Key":"I reached","Fragments":["for"]},{"Key":"reached for","Fragments":["boost::strided,","count_if,"]},{"Key":"for boost::strided,","Fragments":["of"]},{"Key":"boost::strided, of","Fragments":["course."]},{"Key":"of course.","Fragments":["And","In","Sorry"]},{"Key":"course. And","Fragments":["it"]},{"Key":"wasn't clear","Fragments":["at"]},{"Key":"clear at","Fragments":["first","first"]},{"Key":"first whether","Fragments":["they"]},{"Key":"whether they","Fragments":["wanted","want"]},{"Key":"they wanted","Fragments":["to"]},{"Key":"count a","Fragments":["number"]},{"Key":"number for","Fragments":["each"]},{"Key":"each factor","Fragments":["it"]},{"Key":"factor it","Fragments":["is"]},{"Key":"multiple of","Fragments":["(e.g."]},{"Key":"of (e.g.","Fragments":["with"]},{"Key":"default factors","Fragments":["of"]},{"Key":"3 and","Fragments":["5"]},{"Key":"5 count","Fragments":["15"]},{"Key":"count 15","Fragments":["twice),"]},{"Key":"15 twice),","Fragments":["so"]},{"Key":"twice), so","Fragments":["I"]},{"Key":"implemented it","Fragments":["as"]},{"Key":"such and","Fragments":["that"]},{"Key":"was easy.","Fragments":["But"]},{"Key":"easy. But","Fragments":["that's"]},{"Key":"they wanted,","Fragments":["as"]},{"Key":"wanted, as","Fragments":["the"]},{"Key":"case failed.","Fragments":["So"]},{"Key":"failed. So","Fragments":["I"]},{"Key":"looked into","Fragments":["set_union"]},{"Key":"into set_union","Fragments":["(presumably"]},{"Key":"set_union (presumably","Fragments":["followed"]},{"Key":"(presumably followed","Fragments":["by"]},{"Key":"a unique),","Fragments":["but"]},{"Key":"unique), but","Fragments":["that"]},{"Key":"1) It","Fragments":["takes","would"]},{"Key":"takes exactly","Fragments":["two"]},{"Key":"exactly two","Fragments":["ranges.","-"]},{"Key":"two ranges.","Fragments":["Boo!"]},{"Key":"ranges. Boo!","Fragments":["So"]},{"Key":"Boo! So","Fragments":["to"]},{"Key":"So to","Fragments":["do","do","answer"]},{"Key":"this with","Fragments":["the","a","a","no"]},{"Key":"the arbitrary","Fragments":["number"]},{"Key":"arbitrary number","Fragments":["of","of"]},{"Key":"of ranges","Fragments":["I'd"]},{"Key":"ranges I'd","Fragments":["have"]},{"Key":"I'd have","Fragments":["to","written","no","put"]},{"Key":"the composition","Fragments":["via"]},{"Key":"composition via","Fragments":["recursion."]},{"Key":"2) There","Fragments":["apparently"]},{"Key":"There apparently","Fragments":["is"]},{"Key":"apparently is","Fragments":["no"]},{"Key":"no lazy","Fragments":["set_union"]},{"Key":"lazy set_union","Fragments":["in"]},{"Key":"set_union in","Fragments":["either"]},{"Key":"in either","Fragments":["boost","collection"]},{"Key":"either boost","Fragments":["or"]},{"Key":"boost or","Fragments":["the","some","*[std::transform](http://en.cppreference.com/w/cpp/algorithm/transform)*"]},{"Key":"library. None.","Fragments":["So"]},{"Key":"None. So","Fragments":["I'd"]},{"Key":"So I'd","Fragments":["either","move"]},{"Key":"I'd either","Fragments":["allocate"]},{"Key":"either allocate","Fragments":["memory,"]},{"Key":"allocate memory,","Fragments":["which"]},{"Key":"memory, which","Fragments":["is"]},{"Key":"like what","Fragments":["the"]},{"Key":"the heck,","Fragments":["or"]},{"Key":"heck, or","Fragments":["write"]},{"Key":"own, or","Fragments":["resort"]},{"Key":"or resort","Fragments":["to"]},{"Key":"resort to","Fragments":["doing","the"]},{"Key":"just gave","Fragments":["up","this","ends"]},{"Key":"gave up","Fragments":["and","and","somewhere","after"]},{"Key":"up and","Fragments":["iterated","submitted.","down","counting","I"]},{"Key":"and iterated","Fragments":["over"]},{"Key":"iterated over","Fragments":["all","a"]},{"Key":"over all","Fragments":["the","the","characters","elements.","existing"]},{"Key":"integers [0,bound).","Fragments":["Maybe"]},{"Key":"[0,bound). Maybe","Fragments":["someday"]},{"Key":"Maybe someday","Fragments":["if"]},{"Key":"someday if","Fragments":["I"]},{"Key":"get some","Fragments":["spare","experience","memory","practise","comments","suggestions"]},{"Key":"spare time","Fragments":["I'll"]},{"Key":"time I'll","Fragments":["write"]},{"Key":"I'll write","Fragments":["a"]},{"Key":"a lazy","Fragments":["set_union,","range","way"]},{"Key":"lazy set_union,","Fragments":["because"]},{"Key":"set_union, because","Fragments":["it"]},{"Key":"like such","Fragments":["an"]},{"Key":"obvious omission.","Fragments":["Though"]},{"Key":"omission. Though","Fragments":["I"]},{"Key":"why it's","Fragments":["exactly","sorted."]},{"Key":"it's exactly","Fragments":["two"]},{"Key":"two -","Fragments":["making"]},{"Key":"it variadic","Fragments":["will"]},{"Key":"variadic will","Fragments":["be"]},{"Key":"be quite","Fragments":["tricky","nasty","appropriate.","frowned"]},{"Key":"quite tricky","Fragments":["as"]},{"Key":"tricky as","Fragments":["you"]},{"Key":"the overloads","Fragments":["that"]},{"Key":"overloads that","Fragments":["do"]},{"Key":"do or","Fragments":["do"]},{"Key":"or do","Fragments":["not","call-by-ref","whatever","not"]},{"Key":"not take","Fragments":["a","a"]},{"Key":"a predicate.","Fragments":["Maybe"]},{"Key":"predicate. Maybe","Fragments":["I'll"]},{"Key":"Maybe I'll","Fragments":["just","drop","come"]},{"Key":"just only","Fragments":["provide"]},{"Key":"only provide","Fragments":["the"]},{"Key":"provide the","Fragments":["predicate","exception"]},{"Key":"the predicate","Fragments":["version","evaluates","```isupper```.","to","object"]},{"Key":"predicate version","Fragments":["and"]},{"Key":"version and","Fragments":["you'll","applied","they"]},{"Key":"and you'll","Fragments":["have","use","be"]},{"Key":"you'll have","Fragments":["to","exactly"]},{"Key":"I'm actually","Fragments":["having","not","going"]},{"Key":"actually having","Fragments":["a"]},{"Key":"time grokking","Fragments":["this,"]},{"Key":"grokking this,","Fragments":["which"]},{"Key":"this, which","Fragments":["is","is"]},{"Key":"bit embarrassing.","Fragments":["How"]},{"Key":"embarrassing. How","Fragments":["does"]},{"Key":"the commons_sum","Fragments":["(which"]},{"Key":"commons_sum (which","Fragments":["I"]},{"Key":"assume is","Fragments":["the"]},{"Key":"the multiples","Fragments":["that"]},{"Key":"multiples that","Fragments":["got"]},{"Key":"that got","Fragments":["counted","me","me"]},{"Key":"got counted","Fragments":["multiple"]},{"Key":"counted multiple","Fragments":["times?)"]},{"Key":"multiple times?)","Fragments":["work"]},{"Key":"times?) work","Fragments":["for"]},{"Key":"arbitrary multiples.size()","Fragments":["?"]},{"Key":"multiples.size() ?","Fragments":["Like"]},{"Key":"? Like","Fragments":["if"]},{"Key":"Like if","Fragments":["I"]},{"Key":"I called","Fragments":["to({1,2,4},","[Sort","make"]},{"Key":"called to({1,2,4},","Fragments":["5)"]},{"Key":"to({1,2,4}, 5)","Fragments":["multiples_sum"]},{"Key":"5) multiples_sum","Fragments":["would"]},{"Key":"multiples_sum would","Fragments":["contain"]},{"Key":"would contain","Fragments":["the"]},{"Key":"contain the","Fragments":["number","underscore","entire","regexes"]},{"Key":"number 8","Fragments":["because"]},{"Key":"8 because","Fragments":["4"]},{"Key":"because 4","Fragments":["was"]},{"Key":"4 was","Fragments":["counted"]},{"Key":"was counted","Fragments":["three"]},{"Key":"counted three","Fragments":["times"]},{"Key":"three times","Fragments":["and"]},{"Key":"and now","Fragments":["you","I","mine's","the","require"]},{"Key":"to subtract","Fragments":["2*4"]},{"Key":"subtract 2*4","Fragments":["back"]},{"Key":"2*4 back","Fragments":["out?"]},{"Key":"having detail::multiple_sums","Fragments":["take"]},{"Key":"detail::multiple_sums take","Fragments":["the"]},{"Key":"vector by","Fragments":["non-const"]},{"Key":"by non-const","Fragments":["ref"]},{"Key":"non-const ref","Fragments":["rather"]},{"Key":"ref rather","Fragments":["than"]},{"Key":"than returning","Fragments":["the"]},{"Key":"the modified","Fragments":["copy?","version"]},{"Key":"( num","Fragments":["\u003e"]},{"Key":"num \u003e","Fragments":["i"]},{"Key":"\u003e i","Fragments":[")"]},{"Key":"i )","Fragments":["break;","const;"]},{"Key":") break;","Fragments":["seems","encrypted.push_back(w[i]);"]},{"Key":"break; seems","Fragments":["like"]},{"Key":"a bug.","Fragments":["I","The"]},{"Key":"bug. I","Fragments":["don't"]},{"Key":"any reason","Fragments":["to","why","to","for","why"]},{"Key":"to believe","Fragments":["that","this","anagram::anagram","anagram::anagram"]},{"Key":"that numbers","Fragments":["will"]},{"Key":"numbers will","Fragments":["be"]},{"Key":"be sorted,","Fragments":["and"]},{"Key":"sorted, and","Fragments":["if"]},{"Key":"if num\u003ei","Fragments":["then"]},{"Key":"num\u003ei then","Fragments":["i%num"]},{"Key":"then i%num","Fragments":["is"]},{"Key":"i%num is","Fragments":["not"]},{"Key":"not 0","Fragments":["anyhow."]},{"Key":"0 anyhow.","Fragments":["So"]},{"Key":"anyhow. So","Fragments":["I"]},{"Key":"would just","Fragments":["remove","pick","switch","be"]},{"Key":"just remove","Fragments":["that"]},{"Key":"remove that","Fragments":["line.","method,"]},{"Key":" Oh","Fragments":["because","looks","wait,","man,","cool"]},{"Key":"Oh because","Fragments":["it's"]},{"Key":"a set.","Fragments":["That's"]},{"Key":"set. That's","Fragments":["why"]},{"Key":"it's sorted.","Fragments":["My"]},{"Key":"sorted. My","Fragments":["mistake."]},{"Key":"said, a","Fragments":["set"]},{"Key":"is serious","Fragments":["overkill"]},{"Key":"serious overkill","Fragments":["for"]},{"Key":"overkill for","Fragments":["this.","this?","this","simple","this"]},{"Key":"this. Constructing","Fragments":["that"]},{"Key":"Constructing that","Fragments":["set"]},{"Key":"that set","Fragments":["is","to","the"]},{"Key":"to dominate","Fragments":["over","over"]},{"Key":"dominate over","Fragments":["everything","other","instructions"]},{"Key":"over everything","Fragments":["else"]},{"Key":"else you","Fragments":["do,"]},{"Key":"you do,","Fragments":["so"]},{"Key":"do, so","Fragments":["little","that's"]},{"Key":"so little","Fragments":["optimizations"]},{"Key":"little optimizations","Fragments":["like"]},{"Key":"optimizations like","Fragments":["breaking","RVO","the"]},{"Key":"the numbers","Fragments":["loop","black_queen_","out"]},{"Key":"numbers loop","Fragments":["start"]},{"Key":"loop start","Fragments":["to"]},{"Key":"start to","Fragments":["look","refactor","get","define","look","find"]},{"Key":"look silly.","Fragments":["If"]},{"Key":"silly. If","Fragments":["you"]},{"Key":"go down","Fragments":["that","this","a"]},{"Key":"that route","Fragments":["why"]},{"Key":"route why","Fragments":["not"]},{"Key":"vector and","Fragments":["call","its","you'll","clears","checking"]},{"Key":"call std::sort","Fragments":["on"]},{"Key":"std::sort on","Fragments":["it"]},{"Key":"it (not","Fragments":["that"]},{"Key":"(not that","Fragments":["I'm","```i"]},{"Key":"I'm recommending","Fragments":["this"]},{"Key":"recommending this","Fragments":["-"]},{"Key":"honestly don't","Fragments":["think"]},{"Key":"think sorting","Fragments":["is"]},{"Key":"sorting is","Fragments":["worth"]},{"Key":"the tiny","Fragments":["improvement"]},{"Key":"tiny improvement","Fragments":["you"]},{"Key":"improvement you","Fragments":["get"]},{"Key":"get by","Fragments":["relying","sorting"]},{"Key":"by relying","Fragments":["on"]},{"Key":"on its","Fragments":["sortedness)."]},{"Key":"set (which","Fragments":["is"]},{"Key":"an incredibly","Fragments":["expensive"]},{"Key":"incredibly expensive","Fragments":["RB"]},{"Key":"expensive RB","Fragments":["tree)?"]},{"Key":"RB tree)?","Fragments":["You're"]},{"Key":"tree)? You're","Fragments":["not"]},{"Key":"You're not","Fragments":["relying","requiring","going","calling"]},{"Key":"being sorted,","Fragments":["so"]},{"Key":"sorted, so","Fragments":["I"]},{"Key":"believe input","Fragments":["like"]},{"Key":"like {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,...(thousands","Fragments":["more)}"]},{"Key":"{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,...(thousands more)}","Fragments":["is"]},{"Key":"more)} is","Fragments":["common"]},{"Key":"common and","Fragments":["should"]},{"Key":"should perform","Fragments":["well."]},{"Key":"perform well.","Fragments":["Even"]},{"Key":"well. Even","Fragments":["if"]},{"Key":"Even if","Fragments":["that","you're","there","they're","they","it","it's","I"]},{"Key":"if that","Fragments":["were","is","is","didn't","other","were","passes,","would","iteration","is","is","is"]},{"Key":"were the","Fragments":["case,","\"cover","testcases","case","isalpha()"]},{"Key":"the case,","Fragments":["you"]},{"Key":"still do","Fragments":["better","compute("]},{"Key":"better by","Fragments":["taking","being"]},{"Key":"by taking","Fragments":["a"]},{"Key":"vector, calling","Fragments":["sort"]},{"Key":"calling sort","Fragments":["and"]},{"Key":"then unique","Fragments":["on"]},{"Key":"unique on","Fragments":["it."]},{"Key":"I incorporated","Fragments":["changes"]},{"Key":"incorporated changes","Fragments":["suggested"]},{"Key":"changes suggested","Fragments":["by"]},{"Key":"by FrostyTopaz","Fragments":["and"]},{"Key":"FrostyTopaz and","Fragments":["things"]},{"Key":"and things","Fragments":["I"]},{"Key":"I found","Fragments":["in","most","a","me","it","this","this","this","it","out","this","out","a","myself","useful","that","that","one.","your"]},{"Key":"* No","Fragments":["more"]},{"Key":"No more","Fragments":["magic"]},{"Key":"more magic","Fragments":["strings"]},{"Key":"* Function","Fragments":["names"]},{"Key":"Function names","Fragments":["now"]},{"Key":"names now","Fragments":["indicate"]},{"Key":"now indicate","Fragments":["the"]},{"Key":"the abstraction","Fragments":["rather","(like"]},{"Key":"abstraction rather","Fragments":["than"]},{"Key":"* Add","Fragments":["comments"]},{"Key":"Add comments","Fragments":["I"]},{"Key":"comments I","Fragments":["found"]},{"Key":"found most","Fragments":["helpful"]},{"Key":"helpful from","Fragments":["FrostyTopaz's"]},{"Key":"from FrostyTopaz's","Fragments":["solution."]},{"Key":"* Use","Fragments":["brace","string.back()","`rd`","str.at()","iterators"]},{"Key":"Use brace","Fragments":["constructor"]},{"Key":"brace constructor","Fragments":["instead"]},{"Key":"constructor instead","Fragments":["of","of"]},{"Key":"Use string.back()","Fragments":["instead"]},{"Key":"string.back() instead","Fragments":["of"]},{"Key":"of self","Fragments":["implemented"]},{"Key":"self implemented","Fragments":["function"]},{"Key":"implemented function","Fragments":["to"]},{"Key":"to access","Fragments":["last","an","and","this","it","isYell,"]},{"Key":"access last","Fragments":["element"]},{"Key":"last element","Fragments":["of","of"]},{"Key":"* Using-declaratives","Fragments":["for"]},{"Key":"Using-declaratives for","Fragments":["readability."]},{"Key":"your great","Fragments":["suggestions!"]},{"Key":"to incorporate","Fragments":["them","the","because"]},{"Key":"incorporate them","Fragments":["in"]},{"Key":"the updated","Fragments":["solution."]},{"Key":"Yeah, this","Fragments":["is","one","is"]},{"Key":"is wrong.","Fragments":["Some"]},{"Key":"wrong. Some","Fragments":["numbers"]},{"Key":"Some numbers","Fragments":["are"]},{"Key":"are counted","Fragments":["twice"]},{"Key":"counted twice","Fragments":["and"]},{"Key":"twice and","Fragments":["I"]},{"Key":"haven't taken","Fragments":["care","the"]},{"Key":"taken care","Fragments":["of"]},{"Key":"the `multiple_sum()`","Fragments":["vector"]},{"Key":"`multiple_sum()` vector","Fragments":["parameter,"]},{"Key":"vector parameter,","Fragments":["I"]},{"Key":"parameter, I","Fragments":["think","tried"]},{"Key":"that's fine.","Fragments":["`sum_of_multiples()`","Constructing"]},{"Key":"fine. `sum_of_multiples()`","Fragments":["uses"]},{"Key":"`sum_of_multiples()` uses","Fragments":["the"]},{"Key":"vector still","Fragments":["after","requires"]},{"Key":"still after","Fragments":["the"]},{"Key":"the call.","Fragments":["I"]},{"Key":"call. I","Fragments":["think"]},{"Key":"on two","Fragments":["vectors.","different"]},{"Key":"The process","Fragments":["went"]},{"Key":"process went","Fragments":["like"]},{"Key":"went like","Fragments":["this:"]},{"Key":"make -\u003e","Fragments":["broke","..."]},{"Key":"-\u003e broke","Fragments":["-\u003e"]},{"Key":"broke -\u003e","Fragments":["do"]},{"Key":"-\u003e do","Fragments":["minimum"]},{"Key":"do minimum","Fragments":["to"]},{"Key":"minimum to","Fragments":["pass","make"]},{"Key":"pass -\u003e","Fragments":["make"]},{"Key":"-\u003e make","Fragments":["-\u003e"]},{"Key":"For line","Fragments":["14"]},{"Key":"line 14","Fragments":["and","has","becomes)"]},{"Key":"14 and","Fragments":["15","17."]},{"Key":"and 15","Fragments":["I"]},{"Key":"15 I","Fragments":["know"]},{"Key":"used isupper","Fragments":["or"]},{"Key":"isupper or","Fragments":["islower"]},{"Key":"or islower","Fragments":["but"]},{"Key":"islower but","Fragments":["at"]},{"Key":"there. The","Fragments":["only","function"]},{"Key":"did isspace","Fragments":["is"]},{"Key":"isspace is","Fragments":["because"]},{"Key":"about handling","Fragments":["tabs"]},{"Key":"handling tabs","Fragments":["or"]},{"Key":"tabs or","Fragments":["newlines"]},{"Key":"or newlines","Fragments":["if"]},{"Key":"newlines if","Fragments":["they"]},{"Key":"they came","Fragments":["up"]},{"Key":"came up","Fragments":["later.","with","with","with,"]},{"Key":"The empty","Fragments":["string"]},{"Key":"string passing","Fragments":["the"]},{"Key":"was by","Fragments":["mistake."]},{"Key":"by mistake.","Fragments":["Magically","Why"]},{"Key":"mistake. Magically","Fragments":["isBlank"]},{"Key":"Magically isBlank","Fragments":["was"]},{"Key":"isBlank was","Fragments":["correct"]},{"Key":"was correct","Fragments":["the"]},{"Key":"correct the","Fragments":["first"]},{"Key":"My actual","Fragments":["first"]},{"Key":"actual first","Fragments":["iteration"]},{"Key":"first iteration","Fragments":["I","here.","well.","but","first:","and","was","(let's"]},{"Key":"iteration I","Fragments":["did","removed","removed","simply","changed","changed"]},{"Key":"did a","Fragments":["parser","little","fetch,","good","good","good","good"]},{"Key":"a parser","Fragments":["almost."]},{"Key":"parser almost.","Fragments":["It"]},{"Key":"almost. It","Fragments":["worked"]},{"Key":"It worked","Fragments":["but"]},{"Key":"worked but","Fragments":["looked"]},{"Key":"but looked","Fragments":["awful."]},{"Key":"looked awful.","Fragments":["I"]},{"Key":"awful. I","Fragments":["decided"]},{"Key":"redo it","Fragments":["and"]},{"Key":"and checked","Fragments":["out","the"]},{"Key":"what boost","Fragments":["had"]},{"Key":"boost had","Fragments":["since"]},{"Key":"had since","Fragments":["I"]},{"Key":"I downloaded","Fragments":["1.5GB"]},{"Key":"downloaded 1.5GB","Fragments":["of"]},{"Key":"1.5GB of","Fragments":["boost"]},{"Key":"boost junk.","Fragments":["Ended"]},{"Key":"junk. Ended","Fragments":["up"]},{"Key":"Ended up","Fragments":["using"]},{"Key":"up using","Fragments":["the","iterators","the","a","whitespace"]},{"Key":"string tokenizer","Fragments":["and"]},{"Key":"tokenizer and","Fragments":["now"]},{"Key":"the separators","Fragments":["instead"]},{"Key":"separators instead","Fragments":["of"]},{"Key":" Originally","Fragments":["I","I"]},{"Key":"Originally I","Fragments":["had","went"]},{"Key":"extra function","Fragments":["called"]},{"Key":"function called","Fragments":["insert","by","by","`empty()`"]},{"Key":"called insert","Fragments":["which"]},{"Key":"insert which","Fragments":["tested"]},{"Key":"which tested","Fragments":["to"]},{"Key":"tested to","Fragments":["see"]},{"Key":"value was","Fragments":["already"]},{"Key":"was already","Fragments":["in"]},{"Key":"map. I","Fragments":["hated","guess"]},{"Key":"I hated","Fragments":["it","this"]},{"Key":"hated it","Fragments":["and"]},{"Key":"and looked","Fragments":["online","up","for"]},{"Key":"looked online","Fragments":["to"]},{"Key":"online to","Fragments":["see"]},{"Key":"way and","Fragments":["found","be","had","code"]},{"Key":"and found","Fragments":["out","this","a"]},{"Key":"found out","Fragments":["that","the","you"]},{"Key":"you try","Fragments":["to","to","to","hard"]},{"Key":"get something","Fragments":["from"]},{"Key":"something from","Fragments":["the","the"]},{"Key":"map using","Fragments":["the"]},{"Key":"the []","Fragments":["operator","operator","in"]},{"Key":"[] operator","Fragments":["which","for","automatically","doesn't"]},{"Key":"operator which","Fragments":["doesn't"]},{"Key":"doesn't exist","Fragments":["it","it","and"]},{"Key":"exist it","Fragments":["calls","will"]},{"Key":"it calls","Fragments":["the","std::string's","`nStringType(sInput)`"]},{"Key":"calls the","Fragments":["default"]},{"Key":"and places","Fragments":["the"]},{"Key":"places the","Fragments":["new"]},{"Key":"new item","Fragments":["in"]},{"Key":"item in","Fragments":["the"]},{"Key":"map. Since","Fragments":["the"]},{"Key":"for int","Fragments":["initializes"]},{"Key":"initializes it","Fragments":["to"]},{"Key":"to 0","Fragments":["I","if","(even","for","and","for","rather"]},{"Key":"0 I","Fragments":["was"]},{"Key":"i give","Fragments":["up"]},{"Key":"feel kind","Fragments":["of"]},{"Key":"of bad","Fragments":["about"]},{"Key":"bad about","Fragments":["returning"]},{"Key":"about returning","Fragments":["a","the","a"]},{"Key":"of vectors","Fragments":["like"]},{"Key":"vectors like","Fragments":["this."]},{"Key":"like this.","Fragments":["There","But","You"]},{"Key":"this. There","Fragments":["should"]},{"Key":"put them","Fragments":["all","in","into","in"]},{"Key":"them all","Fragments":["in","in","in","in","instead"]},{"Key":"one buffer","Fragments":["so"]},{"Key":"buffer so","Fragments":["you"]},{"Key":"it all","Fragments":["in","in","into","in","in","out.","lowercase"]},{"Key":"one allocation.","Fragments":["But"]},{"Key":"allocation. But","Fragments":["doing"]},{"Key":"But doing","Fragments":["that"]},{"Key":"way compatible","Fragments":["with"]},{"Key":"compatible with","Fragments":["the"]},{"Key":"suite is","Fragments":["really","`bob::hey`,"]},{"Key":"Only if","Fragments":["you","word"]},{"Key":"use `std::array`","Fragments":["or"]},{"Key":"`std::array` or","Fragments":["a"]},{"Key":"a primitive","Fragments":["array.","array"]},{"Key":"primitive array.","Fragments":["`std::vector`"]},{"Key":"array. `std::vector`","Fragments":["can"]},{"Key":"`std::vector` can","Fragments":["grow,"]},{"Key":"can grow,","Fragments":["so"]},{"Key":"grow, so","Fragments":["you"]},{"Key":"can't use","Fragments":["one","`cbegin()`","the","the","an"]},{"Key":"one memory","Fragments":["block","location."]},{"Key":"memory block","Fragments":["for"]},{"Key":"block for","Fragments":["the"]},{"Key":"its vector","Fragments":["elements."]},{"Key":"Also, returning","Fragments":["a"]},{"Key":"bad in","Fragments":["C++11."]},{"Key":"C++11. It's","Fragments":["about","not."]},{"Key":"It's about","Fragments":["the","the"]},{"Key":"the price","Fragments":["of"]},{"Key":"price of","Fragments":["copying"]},{"Key":"copying a","Fragments":["pointer","reference/pointer","map,"]},{"Key":"pointer and","Fragments":["a","the"]},{"Key":"The inner","Fragments":["loop","loop","namespace"]},{"Key":"loop of","Fragments":["slice","4","repeated","the"]},{"Key":"of slice","Fragments":["is"]},{"Key":"slice is","Fragments":["less"]},{"Key":"vector constructor","Fragments":["which","that"]},{"Key":"constructor which","Fragments":["takes"]},{"Key":"which takes","Fragments":["the"]},{"Key":"takes the","Fragments":["whole"]},{"Key":"whole range","Fragments":["all"]},{"Key":"range all","Fragments":["at"]},{"Key":"at once.","Fragments":["Something","```exercism","However,","But"]},{"Key":"once. Something","Fragments":["like"]},{"Key":" result.emplace_back(","Fragments":["d.begin()"]},{"Key":"result.emplace_back( d.begin()","Fragments":["+"]},{"Key":"d.begin() +","Fragments":["i,","i"]},{"Key":"+ i,","Fragments":["d.begin()"]},{"Key":"i, d.begin()","Fragments":["+"]},{"Key":"+ i","Fragments":["+"]},{"Key":"i +","Fragments":["n","1"]},{"Key":"It's also","Fragments":["a","very"]},{"Key":"does erg","Fragments":["stand"]},{"Key":"erg stand","Fragments":["for?"]},{"Key":"stand for?","Fragments":["I've"]},{"Key":"for? I've","Fragments":["seen"]},{"Key":"it before,","Fragments":["and","I"]},{"Key":"before, and","Fragments":["I"]},{"Key":"means something","Fragments":["similar"]},{"Key":"something similar","Fragments":["to","by","to","to"]},{"Key":"my rv","Fragments":["(which"]},{"Key":"rv (which","Fragments":["stands"]},{"Key":"(which stands","Fragments":["for"]},{"Key":"stands for","Fragments":["return"]},{"Key":"for return","Fragments":["value"]},{"Key":"could skip","Fragments":["the","all","all","dividing"]},{"Key":"skip the","Fragments":["first","first","check","comparison","if"]},{"Key":"outer loop","Fragments":["in"]},{"Key":"in slice","Fragments":["and"]},{"Key":"slice and","Fragments":["theoretically"]},{"Key":"and theoretically","Fragments":["maybe"]},{"Key":"theoretically maybe","Fragments":["save"]},{"Key":"maybe save","Fragments":["a","checks"]},{"Key":"little time","Fragments":["if"]},{"Key":"time if","Fragments":["digits","that"]},{"Key":"if digits","Fragments":["is"]},{"Key":"digits is","Fragments":["huge"]},{"Key":"is huge","Fragments":["by"]},{"Key":"huge by","Fragments":["using"]},{"Key":"constructor that","Fragments":["starts","could","converts"]},{"Key":"that starts","Fragments":["it"]},{"Key":"starts it","Fragments":["off"]},{"Key":"it off","Fragments":["at"]},{"Key":"off at","Fragments":["the"]},{"Key":" std::vector\u003cstd::vector\u003cint\u003e","Fragments":["\u003e"]},{"Key":"std::vector\u003cstd::vector\u003cint\u003e \u003e","Fragments":["erg("]},{"Key":"\u003e erg(","Fragments":["digits.length()"]},{"Key":"erg( digits.length()","Fragments":["-"]},{"Key":"digits.length() -","Fragments":["size"]},{"Key":"- size","Fragments":["+"]},{"Key":"size +","Fragments":["1"]},{"Key":"returning it","Fragments":["that","will","will","at"]},{"Key":"it that","Fragments":["bothers","way.","way."]},{"Key":"that bothers","Fragments":["me"]},{"Key":"bothers me","Fragments":["so","though.","a"]},{"Key":"so much,","Fragments":["which"]},{"Key":"much, which","Fragments":["by"]},{"Key":"which by","Fragments":["the"]},{"Key":"agree it'll","Fragments":["almost"]},{"Key":"it'll almost","Fragments":["certainly"]},{"Key":"certainly be","Fragments":["a","more","much"]},{"Key":"a move","Fragments":["so","constructor)","instead)."]},{"Key":"move so","Fragments":["it's"]},{"Key":"it's the","Fragments":["structure","maximum","best","best","return","cleanest","way"]},{"Key":"the structure","Fragments":["getting","of","it","of"]},{"Key":"structure getting","Fragments":["copied"]},{"Key":"getting copied","Fragments":["not"]},{"Key":"copied not","Fragments":["the"]},{"Key":"the buffer.","Fragments":["It's"]},{"Key":"buffer. It's","Fragments":["the"]},{"Key":"of constructing","Fragments":["it."]},{"Key":"a road","Fragments":["of"]},{"Key":"road of","Fragments":["having"]},{"Key":"having one","Fragments":["vector"]},{"Key":"one vector","Fragments":["which"]},{"Key":"vector which","Fragments":["would"]},{"Key":"have each","Fragments":["of"]},{"Key":"each of","Fragments":["the","which","which","those","regex,","the","the","the","the","the","them.","your","the"]},{"Key":"the sub-arrays","Fragments":["back"]},{"Key":"sub-arrays back","Fragments":["to"]},{"Key":"to back","Fragments":["in"]},{"Key":"in it,","Fragments":["and","and"]},{"Key":"and wrapping","Fragments":["that"]},{"Key":"wrapping that","Fragments":["in"]},{"Key":"class with","Fragments":["a","static","static","(static)","a","a","a","a","a","a","a","a"]},{"Key":"custom iterator","Fragments":["which"]},{"Key":"iterator which","Fragments":["returned"]},{"Key":"which returned","Fragments":["a"]},{"Key":"a boost::sliced_range","Fragments":["from"]},{"Key":"boost::sliced_range from","Fragments":["dereference."]},{"Key":"from dereference.","Fragments":["Then"]},{"Key":"dereference. Then","Fragments":["I"]},{"Key":"Then I","Fragments":["realized","didn't","don't","check","remember"]},{"Key":"realized you","Fragments":["would"]},{"Key":"original in","Fragments":["the"]},{"Key":"private data","Fragments":["member."]},{"Key":" BUT!","Fragments":["You"]},{"Key":"BUT! You","Fragments":["can't"]},{"Key":"construct an","Fragments":["array"]},{"Key":"array from","Fragments":["that."]},{"Key":"from that.","Fragments":["You","Try"]},{"Key":"that. You","Fragments":["could","want","might"]},{"Key":"could construct","Fragments":["it"]},{"Key":"construct it","Fragments":["from","after"]},{"Key":"it from","Fragments":["the","even","being","being","a","outside."]},{"Key":"the iterators,","Fragments":["so","why","increase"]},{"Key":"iterators, so","Fragments":["I","a"]},{"Key":"could modify","Fragments":["the"]},{"Key":"the test.","Fragments":["Meh,"]},{"Key":"test. Meh,","Fragments":["it's"]},{"Key":"Meh, it's","Fragments":["just"]},{"Key":"just annoying.","Fragments":["If"]},{"Key":"annoying. If","Fragments":["I"]},{"Key":"in increment","Fragments":["or"]},{"Key":"increment or","Fragments":["something..."]},{"Key":"or something...","Fragments":["just"]},{"Key":"something... just","Fragments":["not"]},{"Key":"just not","Fragments":["worth","right.","willing","appropriate.","elegant"]},{"Key":"the effort.","Fragments":["Maybe"]},{"Key":"effort. Maybe","Fragments":["if","I'll"]},{"Key":"Maybe if","Fragments":["this"]},{"Key":"this were","Fragments":["a","a","in","a","some"]},{"Key":"a performance-critical","Fragments":["scenario"]},{"Key":"performance-critical scenario","Fragments":["and"]},{"Key":"scenario and","Fragments":["involves"]},{"Key":"and involves","Fragments":["huge","less","a"]},{"Key":"involves huge","Fragments":["inputs,"]},{"Key":"huge inputs,","Fragments":["but"]},{"Key":"inputs, but","Fragments":["I"]},{"Key":"not documented,","Fragments":["at"]},{"Key":"documented, at","Fragments":["least"]},{"Key":"not clearly,","Fragments":["but"]},{"Key":"clearly, but","Fragments":["if"]},{"Key":"you run","Fragments":["`exercism","this","through","boost::to_lower_copy(subject_)","back()"]},{"Key":"run `exercism","Fragments":["submit"]},{"Key":"submit foo.cpp","Fragments":["foo.h`"]},{"Key":"foo.cpp foo.h`","Fragments":["it"]},{"Key":"foo.h` it","Fragments":["will"]},{"Key":"will submit","Fragments":["both","another"]},{"Key":"submit both","Fragments":["files.","files","files","cpp"]},{"Key":"Now `const`ier.","Fragments":["I'm"]},{"Key":"`const`ier. I'm","Fragments":["not"]},{"Key":"reference from","Fragments":["`nucleotide_counts`,"]},{"Key":"from `nucleotide_counts`,","Fragments":["though."]},{"Key":"`nucleotide_counts`, though.","Fragments":["I"]},{"Key":"like exposing","Fragments":["references"]},{"Key":"exposing references","Fragments":["to"]},{"Key":"to things","Fragments":["that","like"]},{"Key":" Sorry","Fragments":["about"]},{"Key":"Sorry about","Fragments":["the","that.","that."]},{"Key":"the lack","Fragments":["of","of","of"]},{"Key":".h file;","Fragments":["I"]},{"Key":"file; I","Fragments":["accidentally"]},{"Key":"I accidentally","Fragments":["submitted"]},{"Key":"accidentally submitted","Fragments":["without,"]},{"Key":"submitted without,","Fragments":["then"]},{"Key":"without, then","Fragments":["couldn't"]},{"Key":"then couldn't","Fragments":["submit"]},{"Key":"couldn't submit","Fragments":["again"]},{"Key":"submit again","Fragments":["with"]},{"Key":"again with","Fragments":["the"]},{"Key":"doing work","Fragments":["in"]},{"Key":"could throw,","Fragments":["but"]},{"Key":"throw, but","Fragments":["I"]},{"Key":"was foolhardy","Fragments":["and"]},{"Key":"foolhardy and","Fragments":["a"]},{"Key":"a leftover","Fragments":["from","from"]},{"Key":"leftover from","Fragments":["working","when"]},{"Key":"from working","Fragments":["in"]},{"Key":"in environments","Fragments":["where"]},{"Key":"environments where","Fragments":["exceptions"]},{"Key":"where exceptions","Fragments":["weren't"]},{"Key":"exceptions weren't","Fragments":["used."]},{"Key":"My initial","Fragments":["approach,","implementation","solutions"]},{"Key":"initial approach,","Fragments":["based"]},{"Key":"approach, based","Fragments":["on"]},{"Key":"first few","Fragments":["test"]},{"Key":"few test","Fragments":["cases,"]},{"Key":"cases, was","Fragments":["to"]},{"Key":"a string_stream","Fragments":["and"]},{"Key":"string_stream and","Fragments":["an"]},{"Key":"an istream_iterator","Fragments":["to"]},{"Key":"istream_iterator to","Fragments":["tokenize"]},{"Key":"input. This","Fragments":["broke"]},{"Key":"This broke","Fragments":["down"]},{"Key":"broke down","Fragments":["when"]},{"Key":"down when","Fragments":["needing"]},{"Key":"when needing","Fragments":["to"]},{"Key":"handle non-whitespace","Fragments":["separators."]},{"Key":"I wish","Fragments":["I","they","some"]},{"Key":"wish I","Fragments":["had"]},{"Key":"had simply","Fragments":["used"]},{"Key":"simply used","Fragments":["the"]},{"Key":"the boost::Tokenizer","Fragments":["from"]},{"Key":"boost::Tokenizer from","Fragments":["the"]},{"Key":"the beginning,","Fragments":["as"]},{"Key":"beginning, as","Fragments":["the"]},{"Key":"and concise.","Fragments":["It","Well"]},{"Key":"concise. It","Fragments":["even"]},{"Key":"It even","Fragments":["exposes"]},{"Key":"even exposes","Fragments":["begin()"]},{"Key":"exposes begin()","Fragments":["and"]},{"Key":"end() functions","Fragments":["allowing"]},{"Key":"functions allowing","Fragments":["use"]},{"Key":"allowing use","Fragments":["of"]},{"Key":"Also of","Fragments":["note,"]},{"Key":"of note,","Fragments":["I'm"]},{"Key":"note, I'm","Fragments":["taking"]},{"Key":"I'm taking","Fragments":["advantage"]},{"Key":"taking advantage","Fragments":["of","of"]},{"Key":"the automatic","Fragments":["initialization"]},{"Key":"automatic initialization","Fragments":["properties"]},{"Key":"initialization properties","Fragments":["of"]},{"Key":"of map::operator[]","Fragments":["to"]},{"Key":"map::operator[] to","Fragments":["avoid"]},{"Key":"word has","Fragments":["already","to"]},{"Key":"has already","Fragments":["been"]},{"Key":" Well,","Fragments":["first","if","in","first","the","in","there","the","I"]},{"Key":"Well, first","Fragments":["off,","off"]},{"Key":"first off,","Fragments":["this"]},{"Key":"off, this","Fragments":["is"]},{"Key":"tight code.","Fragments":["Super"]},{"Key":"code. Super","Fragments":["concise."]},{"Key":"Super concise.","Fragments":["If"]},{"Key":"concise. If","Fragments":["I"]},{"Key":"I asked","Fragments":["this"]},{"Key":"asked this","Fragments":["question"]},{"Key":"question in","Fragments":["an","2)?","a"]},{"Key":"an interview","Fragments":["and"]},{"Key":"interview and","Fragments":["got"]},{"Key":"this answer","Fragments":["I'd"]},{"Key":"answer I'd","Fragments":["be"]},{"Key":"I'd be","Fragments":["happy","more","glad","very","interested","taking","interested","most"]},{"Key":"saw it","Fragments":["in","in"]},{"Key":"review from","Fragments":["a"]},{"Key":"a co-worker,","Fragments":["I'd"]},{"Key":"co-worker, I'd","Fragments":["send"]},{"Key":"I'd send","Fragments":["it"]},{"Key":"send it","Fragments":["back."]},{"Key":"it back.","Fragments":["First","Writing"]},{"Key":"back. First","Fragments":["and"]},{"Key":"First and","Fragments":["foremost,","foremost"]},{"Key":"and foremost,","Fragments":["you"]},{"Key":"foremost, you","Fragments":["have"]},{"Key":"have provided","Fragments":["no"]},{"Key":"provided no","Fragments":["comments"]},{"Key":"no comments","Fragments":["and"]},{"Key":"no abstraction.","Fragments":["To"]},{"Key":"abstraction. To","Fragments":["understand"]},{"Key":"To understand","Fragments":["this"]},{"Key":"understand this","Fragments":["code,","as"]},{"Key":"this code,","Fragments":["I"]},{"Key":"read everything","Fragments":["first"]},{"Key":"everything first","Fragments":["and"]},{"Key":"to guess","Fragments":["at","the"]},{"Key":"guess at","Fragments":["what"]},{"Key":"at what","Fragments":["it's","those"]},{"Key":"it's supposed","Fragments":["to","to"]},{"Key":"be doing.","Fragments":["That"]},{"Key":"doing. That","Fragments":["seriously"]},{"Key":"That seriously","Fragments":["degrades"]},{"Key":"seriously degrades","Fragments":["the"]},{"Key":"degrades the","Fragments":["maintainability"]},{"Key":"the maintainability","Fragments":["of"]},{"Key":"maintainability of","Fragments":["this"]},{"Key":"code. Pulling","Fragments":["out"]},{"Key":"Pulling out","Fragments":["the"]},{"Key":"magic strings","Fragments":["as","pulled"]},{"Key":"as constants","Fragments":["with","to","and","at"]},{"Key":"constants with","Fragments":["meaningful"]},{"Key":"with meaningful","Fragments":["names"]},{"Key":"meaningful names","Fragments":["and"]},{"Key":"and commenting","Fragments":["as"]},{"Key":"commenting as","Fragments":["to","well."]},{"Key":"the intention","Fragments":["of","of"]},{"Key":"intention of","Fragments":["various","using"]},{"Key":"of various","Fragments":["lines"]},{"Key":"various lines","Fragments":["would"]},{"Key":"lines would","Fragments":["make"]},{"Key":"this much","Fragments":["clearer.","better"]},{"Key":"Second, a","Fragments":["big"]},{"Key":"big pet","Fragments":["peeve"]},{"Key":"peeve of","Fragments":["mine,","mine","mine."]},{"Key":"of mine,","Fragments":["you've"]},{"Key":"mine, you've","Fragments":["put"]},{"Key":"you've put","Fragments":["a"]},{"Key":"global using","Fragments":["directive"]},{"Key":"using directive","Fragments":["in","inside"]},{"Key":"directive in","Fragments":["a"]},{"Key":"file. Now","Fragments":["anyone"]},{"Key":"Now anyone","Fragments":["who"]},{"Key":"includes bob.h","Fragments":["gets"]},{"Key":"bob.h gets","Fragments":["that"]},{"Key":"gets that","Fragments":["\"using"]},{"Key":"that \"using","Fragments":["namespace"]},{"Key":"std\" whether","Fragments":["they"]},{"Key":"not. A","Fragments":["great","query"]},{"Key":"A great","Fragments":["rule"]},{"Key":"great rule","Fragments":["of","of"]},{"Key":"of thumb","Fragments":["in","is","for"]},{"Key":"thumb in","Fragments":["C++"]},{"Key":"declare variables","Fragments":["right","at","as"]},{"Key":"variables right","Fragments":["where"]},{"Key":"right where","Fragments":["you"]},{"Key":"need them","Fragments":["(to"]},{"Key":"them (to","Fragments":["limit","a"]},{"Key":"(to limit","Fragments":["scope"]},{"Key":"limit scope","Fragments":["and"]},{"Key":"scope and","Fragments":["prevent","both"]},{"Key":"and prevent","Fragments":["unneeded"]},{"Key":"prevent unneeded","Fragments":["construction)."]},{"Key":"unneeded construction).","Fragments":["The"]},{"Key":"construction). The","Fragments":["same"]},{"Key":"The same","Fragments":["applies","code","job","goes","reflection","apply","concerns"]},{"Key":"same applies","Fragments":["for"]},{"Key":"applies for","Fragments":["using"]},{"Key":"using directives.","Fragments":["Moving"]},{"Key":"directives. Moving","Fragments":["it"]},{"Key":"Moving it","Fragments":["into","inside"]},{"Key":"a tighter","Fragments":["scope"]},{"Key":"tighter scope","Fragments":["(like"]},{"Key":"scope (like","Fragments":["the"]},{"Key":"(like the","Fragments":["one","type","standard","standard"]},{"Key":"one function","Fragments":["you","ends","externally"]},{"Key":"need it","Fragments":["in)","to",":p","in"]},{"Key":"it in)","Fragments":["prevents"]},{"Key":"in) prevents","Fragments":["this"]},{"Key":"prevents this","Fragments":["from"]},{"Key":"this from","Fragments":["breaking"]},{"Key":"from breaking","Fragments":["someone"]},{"Key":"breaking someone","Fragments":["else's"]},{"Key":"someone else's","Fragments":["code.","C++","code","submission"]},{"Key":"And now","Fragments":["(for"]},{"Key":"now (for","Fragments":["the"]},{"Key":"(for the","Fragments":["most","C++11","C++14"]},{"Key":"most nitpicky","Fragments":["parts):"]},{"Key":"bob for","Fragments":["this"]},{"Key":"this instead","Fragments":["of"]},{"Key":"a class.","Fragments":["There's","You're","A","I","Namespaces"]},{"Key":"class. There's","Fragments":["no"]},{"Key":"why this","Fragments":["should","site"]},{"Key":"class since","Fragments":["it"]},{"Key":"no non-static","Fragments":["members"]},{"Key":"non-static members","Fragments":["and"]},{"Key":"and you'd","Fragments":["never"]},{"Key":"you'd never","Fragments":["want"]},{"Key":"never want","Fragments":["to"]},{"Key":"to instance","Fragments":["a"]},{"Key":"instance a","Fragments":["bob"]},{"Key":"a bob","Fragments":["object.","class.","class.","namespace"]},{"Key":" message.back()","Fragments":["is"]},{"Key":"message.back() is","Fragments":["a"]},{"Key":"a clearer","Fragments":["way","way?","and"]},{"Key":"clearer way","Fragments":["to"]},{"Key":"need non-const","Fragments":["iterators,"]},{"Key":"non-const iterators,","Fragments":["make"]},{"Key":"iterators, make","Fragments":["a"]},{"Key":"habit of","Fragments":["using","using","using","declaring/instantiating","declaring","using","declaring","reusing","writing","commenting"]},{"Key":"using cbegin","Fragments":["and"]},{"Key":"cbegin and","Fragments":["cend."]},{"Key":" It'd","Fragments":["be","be","be"]},{"Key":"It'd be","Fragments":["better","slightly","more","nice","great","great","nicer"]},{"Key":"reference as","Fragments":["an"]},{"Key":"an argument.","Fragments":["Move-semantics","I"]},{"Key":"argument. Move-semantics","Fragments":["and/or"]},{"Key":"Move-semantics and/or","Fragments":["copy-elision"]},{"Key":"and/or copy-elision","Fragments":["may"]},{"Key":"copy-elision may","Fragments":["come"]},{"Key":"may come","Fragments":["into"]},{"Key":"come into","Fragments":["play,"]},{"Key":"into play,","Fragments":["but"]},{"Key":"play, but","Fragments":["they're"]},{"Key":"but they're","Fragments":["not","getting","still"]},{"Key":"they're not","Fragments":["guaranteed","a","passing","included"]},{"Key":"not guaranteed","Fragments":["in","to","to"]},{"Key":"guaranteed in","Fragments":["this","one","one"]},{"Key":"case. And","Fragments":["the","then"]},{"Key":"And the","Fragments":["very","final","last","stack","function","use"]},{"Key":"very first","Fragments":["thing","digit","thing","serious","submission"]},{"Key":"first thing","Fragments":["you're","I","when","that"]},{"Key":"thing you're","Fragments":["going"]},{"Key":"do is","Fragments":["copy","resolve","kind","check","take","use","check"]},{"Key":"is copy","Fragments":["the"]},{"Key":"string anyway,","Fragments":["so"]},{"Key":"it's best","Fragments":["to","practice"]},{"Key":"best to","Fragments":["ensure","do","use"]},{"Key":"ensure you","Fragments":["don't"]},{"Key":"off, it's","Fragments":["great"]},{"Key":"it's great","Fragments":["to","that"]},{"Key":"great to","Fragments":["see","get","get"]},{"Key":"see someone","Fragments":["using","put"]},{"Key":"someone using","Fragments":["a"]},{"Key":"static members!","Fragments":["I'm"]},{"Key":"members! I'm","Fragments":["also"]},{"Key":"also glad","Fragments":["you"]},{"Key":"glad you","Fragments":["used","liked","did,","pointed"]},{"Key":"used boost::tokenizer.","Fragments":["It's"]},{"Key":"boost::tokenizer. It's","Fragments":["a"]},{"Key":"very clean/clear","Fragments":["way"]},{"Key":"clean/clear way","Fragments":["to"]},{"Key":"few issues","Fragments":["I"]},{"Key":"issues I","Fragments":["have","would"]},{"Key":"have with","Fragments":["the","this"]},{"Key":"guessing the","Fragments":["intention"]},{"Key":"using static","Fragments":["with"]},{"Key":"static with","Fragments":["cleanKey"]},{"Key":"with cleanKey","Fragments":["is"]},{"Key":"cleanKey is","Fragments":["to"]},{"Key":"limit the","Fragments":["visibility","scope","width"]},{"Key":"visibility of","Fragments":["this","functions.","\"public\",","functions;","the"]},{"Key":"this method.","Fragments":["Chances"]},{"Key":"method. Chances","Fragments":["are"]},{"Key":"Chances are","Fragments":["you"]},{"Key":"you heard","Fragments":["that"]},{"Key":"heard that","Fragments":["it","virtually"]},{"Key":"it limits","Fragments":["the"]},{"Key":"limits the","Fragments":["function","functionality"]},{"Key":"to being","Fragments":["used"]},{"Key":"this file.","Fragments":["Sadly"]},{"Key":"file. Sadly","Fragments":["that's"]},{"Key":"Sadly that's","Fragments":["a"]},{"Key":"a lie","Fragments":["we"]},{"Key":"lie we","Fragments":["tell"]},{"Key":"we tell","Fragments":["CS"]},{"Key":"tell CS","Fragments":["students."]},{"Key":"CS students.","Fragments":["Actually"]},{"Key":"students. Actually","Fragments":["it's"]},{"Key":"Actually it's","Fragments":["limited"]},{"Key":"it's limited","Fragments":["to"]},{"Key":"limited to","Fragments":["the","the"]},{"Key":"the compilation","Fragments":["unit.","work."]},{"Key":"compilation unit.","Fragments":["And"]},{"Key":"unit. And","Fragments":["since"]},{"Key":"And since","Fragments":["this","the","programs"]},{"Key":"file it'll","Fragments":["be"]},{"Key":"it'll be","Fragments":["included","a","really","invisible","added"]},{"Key":"every compilation","Fragments":["unit"]},{"Key":"compilation unit","Fragments":["where","can","will","(in","from"]},{"Key":"unit where","Fragments":["you"]},{"Key":"header. Using","Fragments":["static"]},{"Key":"Using static","Fragments":["in"]},{"Key":"static in","Fragments":["this"]},{"Key":"case will","Fragments":["at","at"]},{"Key":"will at","Fragments":["best","best"]},{"Key":"best do","Fragments":["nothing,","nothing\""]},{"Key":"do nothing,","Fragments":["and"]},{"Key":"nothing, and","Fragments":["at"]},{"Key":"at worst","Fragments":["bloat"]},{"Key":"worst bloat","Fragments":["your"]},{"Key":"bloat your","Fragments":["binary"]},{"Key":"your binary","Fragments":["with"]},{"Key":"binary with","Fragments":["copies"]},{"Key":"with copies","Fragments":["of"]},{"Key":"as each","Fragments":["compilation","on","function"]},{"Key":"each compilation","Fragments":["unit","unit","unit","unit)"]},{"Key":"unit can","Fragments":["get"]},{"Key":"get its","Fragments":["own","own","responsibility","last"]},{"Key":"copy (compiler-dependent).","Fragments":["I"]},{"Key":"(compiler-dependent). I","Fragments":["actually"]},{"Key":"it useful","Fragments":["to"]},{"Key":"useful to","Fragments":["separate"]},{"Key":"separate out","Fragments":[".h"]},{"Key":"out .h","Fragments":["and"]},{"Key":".h and","Fragments":[".cpp",".cpp",".cpp","a",".cpp"]},{"Key":"and .cpp","Fragments":["files","files).","as","file","file,"]},{"Key":"files even","Fragments":["for"]},{"Key":"even for","Fragments":["small","1"]},{"Key":"- It's","Fragments":["good","preferable","quite","good"]},{"Key":"It's good","Fragments":["to","practice"]},{"Key":"you grabbed","Fragments":["the"]},{"Key":"grabbed the","Fragments":["tokenizer"]},{"Key":"the tokenizer","Fragments":["from","seperators"]},{"Key":"tokenizer from","Fragments":["boost,"]},{"Key":"from boost,","Fragments":["but","but"]},{"Key":"there's more","Fragments":["you"]},{"Key":"more you","Fragments":["could"]},{"Key":"have used.","Fragments":["For"]},{"Key":"used. For","Fragments":["instance"]},{"Key":"instance there","Fragments":["are"]},{"Key":"are string","Fragments":["algorithms"]},{"Key":"string algorithms","Fragments":["(specifically","that","(which","which"]},{"Key":"algorithms (specifically","Fragments":["trim"]},{"Key":"(specifically trim","Fragments":["functions)"]},{"Key":"trim functions)","Fragments":["which"]},{"Key":"functions) which","Fragments":["could"]},{"Key":"replace most","Fragments":["of"]},{"Key":"the cleanKey","Fragments":["function"]},{"Key":"cleanKey function","Fragments":["with"]},{"Key":"a one-line","Fragments":["call.","```isEmpty```"]},{"Key":"one-line call.","Fragments":["There's"]},{"Key":"call. There's","Fragments":["also"]},{"Key":"final few","Fragments":["points"]},{"Key":"few points","Fragments":["are","of"]},{"Key":"points are","Fragments":["pretty"]},{"Key":"- It'd","Fragments":["be"]},{"Key":"be slightly","Fragments":["clearer","better.","simpler","faster."]},{"Key":"slightly clearer","Fragments":["to"]},{"Key":"see !key.empty()","Fragments":["instead"]},{"Key":"!key.empty() instead","Fragments":["of"]},{"Key":"of key.size()","Fragments":["\u003e"]},{"Key":"key.size() \u003e","Fragments":["0"]},{"Key":"- key","Fragments":["is"]},{"Key":"best name","Fragments":["choice."]},{"Key":"name choice.","Fragments":["Better"]},{"Key":"choice. Better","Fragments":["for"]},{"Key":"Better for","Fragments":["the"]},{"Key":"to reflect","Fragments":["the","the","all"]},{"Key":"abstraction (like","Fragments":["\"word\")"]},{"Key":"(like \"word\")","Fragments":["than"]},{"Key":"\"word\") than","Fragments":["the"]},{"Key":"- #include","Fragments":["\u003csstream\u003e"]},{"Key":"#include \u003csstream\u003e","Fragments":["is"]},{"Key":"\u003csstream\u003e is","Fragments":["left"]},{"Key":"left over","Fragments":["from","from"]},{"Key":"over from","Fragments":["your","past"]},{"Key":"from your","Fragments":["initial","first","code","first","previous"]},{"Key":"initial implementation.","Fragments":["And"]},{"Key":"implementation. And","Fragments":["is"]},{"Key":"And is","Fragments":["silently"]},{"Key":"is silently","Fragments":["making"]},{"Key":"silently making","Fragments":["your"]},{"Key":"code compile","Fragments":["because"]},{"Key":"compile because","Fragments":["it"]},{"Key":"it includes","Fragments":["\u003cstring\u003e"]},{"Key":"includes \u003cstring\u003e","Fragments":["somewhere"]},{"Key":"\u003cstring\u003e somewhere","Fragments":["(which"]},{"Key":"somewhere (which","Fragments":["you"]},{"Key":"(which you","Fragments":["did","can"]},{"Key":"Overall a","Fragments":["very","very","solid"]},{"Key":"very solid","Fragments":["solution"]},{"Key":"solid solution","Fragments":["with"]},{"Key":"solution with","Fragments":["only"]},{"Key":"few issues.","Fragments":["None"]},{"Key":"issues. None","Fragments":["of"]},{"Key":"None of","Fragments":["which","the"]},{"Key":"address or","Fragments":["show"]},{"Key":"or show","Fragments":["fundamental"]},{"Key":"show fundamental","Fragments":["problems"]},{"Key":"fundamental problems","Fragments":["with"]},{"Key":"with 99%","Fragments":["of"]},{"Key":"99% of","Fragments":["the","the"]},{"Key":"the recommendations","Fragments":["of"]},{"Key":"recommendations of","Fragments":["FrostyTopaz."]},{"Key":"of FrostyTopaz.","Fragments":["However,"]},{"Key":"FrostyTopaz. However,","Fragments":["erase"]},{"Key":"However, erase","Fragments":["won't"]},{"Key":"erase won't","Fragments":["allow"]},{"Key":"won't allow","Fragments":["you"]},{"Key":"to operate","Fragments":["on","on","with","with","over"]},{"Key":"const string\u0026,","Fragments":["because","will","because"]},{"Key":"string\u0026, because","Fragments":["it","then"]},{"Key":"it modifies","Fragments":["the","the"]},{"Key":"modifies the","Fragments":["string","strings","argument"]},{"Key":"string in-place.","Fragments":["So"]},{"Key":"in-place. So","Fragments":["the"]},{"Key":"first obvious","Fragments":["lesson"]},{"Key":"obvious lesson","Fragments":["from"]},{"Key":"lesson from","Fragments":["this"]},{"Key":"that assignment","Fragments":["on"]},{"Key":"assignment on","Fragments":["the"]},{"Key":"hey might","Fragments":["do"]},{"Key":"might do","Fragments":["nothing","things"]},{"Key":"do nothing","Fragments":["(if"]},{"Key":"nothing (if","Fragments":["you"]},{"Key":"(if you","Fragments":["have"]},{"Key":"great optimizer)","Fragments":["or"]},{"Key":"optimizer) or","Fragments":["it"]},{"Key":"or it","Fragments":["might","can"]},{"Key":"might waste","Fragments":["time,"]},{"Key":"waste time,","Fragments":["but"]},{"Key":"never does","Fragments":["anything"]},{"Key":"does anything","Fragments":["useful.","in"]},{"Key":"anything useful.","Fragments":["Just"]},{"Key":"useful. Just","Fragments":["call"]},{"Key":"Just call","Fragments":["erase"]},{"Key":"call erase","Fragments":["and","but"]},{"Key":"erase and","Fragments":["don't"]},{"Key":"don't assign","Fragments":["its"]},{"Key":"assign its","Fragments":["return"]},{"Key":"its return","Fragments":["to","value"]},{"Key":"return to","Fragments":["anything."]},{"Key":"to anything.","Fragments":["But"]},{"Key":"anything. But","Fragments":["to"]},{"Key":"should continue","Fragments":["taking"]},{"Key":"continue taking","Fragments":["your"]},{"Key":"taking your","Fragments":["string"]},{"Key":"your string","Fragments":["by-value.","globals","is","if"]},{"Key":"could take","Fragments":["the","it"]},{"Key":"string by","Fragments":["const\u0026,","separating","const","const"]},{"Key":"by const\u0026,","Fragments":["do"]},{"Key":"const\u0026, do","Fragments":["_not_"]},{"Key":"do _not_","Fragments":["call"]},{"Key":"_not_ call","Fragments":["erase"]},{"Key":"erase but","Fragments":["rather"]},{"Key":"but rather","Fragments":["simply","hashmap-based).","the","are","a"]},{"Key":"rather simply","Fragments":["have"]},{"Key":"simply have","Fragments":["a"]},{"Key":"an end","Fragments":["iterator"]},{"Key":"end iterator","Fragments":["or","should"]},{"Key":"iterator or","Fragments":["the","std::for_each."]},{"Key":"character you","Fragments":["wish"]},{"Key":"you wish","Fragments":["to"]},{"Key":"wish to","Fragments":["ignore"]},{"Key":"to ignore","Fragments":["(your","certain","this","it.","extra","the","the"]},{"Key":"ignore (your","Fragments":["preference)"]},{"Key":"(your preference)","Fragments":["and"]},{"Key":"preference) and","Fragments":["work"]},{"Key":"and work","Fragments":["with"]},{"Key":"with that.","Fragments":["For","I'll","For"]},{"Key":"that. For","Fragments":["example:","me,"]},{"Key":"auto begin_it","Fragments":["="]},{"Key":"begin_it =","Fragments":["message.cbegin();"]},{"Key":"auto end_it","Fragments":["="]},{"Key":"end_it =","Fragments":["std::find_if_not("]},{"Key":"= std::find_if_not(","Fragments":["message.crbegin(),","wordStart,"]},{"Key":"std::find_if_not( message.crbegin(),","Fragments":["message.crend(),"]},{"Key":"message.crbegin(), message.crend(),","Fragments":["::isspace"]},{"Key":"message.crend(), ::isspace","Fragments":[").base();"]},{"Key":"( begin_it","Fragments":["=="]},{"Key":"begin_it ==","Fragments":["end_it"]},{"Key":"== end_it","Fragments":[")"]},{"Key":" Point","Fragments":["is"]},{"Key":"Point is","Fragments":["you"]},{"Key":"is you","Fragments":["don't","have","check"]},{"Key":"copy \u0026","Fragments":["modify"]},{"Key":"\u0026 modify","Fragments":["the"]},{"Key":"ignore certain","Fragments":["characters,"]},{"Key":"certain characters,","Fragments":["you"]},{"Key":"characters, you","Fragments":["can"]},{"Key":"simply ignore","Fragments":["them.","extra"]},{"Key":"ignore them.","Fragments":["And"]},{"Key":"them. And","Fragments":["that's"]},{"Key":"that's even","Fragments":["easier"]},{"Key":"easier when","Fragments":["those"]},{"Key":"when those","Fragments":["elements"]},{"Key":"those elements","Fragments":["are"]},{"Key":"elements are","Fragments":["at"]},{"Key":"are at","Fragments":["the","least","the"]},{"Key":"beginning or","Fragments":["end"]},{"Key":"Perhaps verse","Fragments":["should"]},{"Key":"verse should","Fragments":["return"]},{"Key":"return const\u0026?","Fragments":["And"]},{"Key":"const\u0026? And","Fragments":["maybe"]},{"Key":"maybe use","Fragments":["the_verses.at(n-1)"]},{"Key":"use the_verses.at(n-1)","Fragments":["or"]},{"Key":"the_verses.at(n-1) or","Fragments":["document"]},{"Key":"or document","Fragments":["the"]},{"Key":"document the","Fragments":["precondition"]},{"Key":"precondition that","Fragments":["you're"]},{"Key":"you're propagating","Fragments":["up"]},{"Key":"propagating up","Fragments":["from"]},{"Key":"up from","Fragments":["operator[]."]},{"Key":"implementation should","Fragments":["either"]},{"Key":".cpp or","Fragments":["have"]},{"Key":"or have","Fragments":["static"]},{"Key":"have static","Fragments":["on"]},{"Key":"static on","Fragments":["all","cleanKey"]},{"Key":"on all","Fragments":["these","kinds","C++","variable","point,"]},{"Key":"these things","Fragments":["(or","very","being"]},{"Key":"things (or","Fragments":["put"]},{"Key":"(or put","Fragments":["it"]},{"Key":"in anonymous","Fragments":["namespace)."]},{"Key":"anonymous namespace).","Fragments":["If"]},{"Key":"namespace). If","Fragments":["you"]},{"Key":"go the","Fragments":["latter"]},{"Key":"latter route","Fragments":["it"]},{"Key":"route it","Fragments":["allows"]},{"Key":"it allows","Fragments":["source","for","the","to","to"]},{"Key":"allows source","Fragments":["files"]},{"Key":"that include","Fragments":["this","the"]},{"Key":"link together,","Fragments":["but"]},{"Key":"together, but","Fragments":["they'd"]},{"Key":"but they'd","Fragments":["each"]},{"Key":"they'd each","Fragments":["have"]},{"Key":"each have","Fragments":["a"]},{"Key":"that giant","Fragments":["constant"]},{"Key":"giant constant","Fragments":["which"]},{"Key":"constant which","Fragments":["isn't"]},{"Key":"bit concerned","Fragments":["about"]},{"Key":"about accumulate","Fragments":["in"]},{"Key":"accumulate in","Fragments":["this"]},{"Key":"case, but","Fragments":["if","some","if","I'm","I","I","these"]},{"Key":"if we","Fragments":["just","just","test","did","do","just","don't","can","put"]},{"Key":"say this","Fragments":["isn't"]},{"Key":"isn't performance-critical","Fragments":["code"]},{"Key":"performance-critical code","Fragments":["I'll"]},{"Key":"code I'll","Fragments":["look"]},{"Key":"I'll look","Fragments":["the","into","into"]},{"Key":"look the","Fragments":["other","same,"]},{"Key":"other way","Fragments":["because","around.","to"]},{"Key":"way because","Fragments":["it","I'm"]},{"Key":"sure is","Fragments":["elegant."]},{"Key":"is elegant.","Fragments":["The"]},{"Key":"elegant. The","Fragments":["concern"]},{"Key":"about string","Fragments":["copies","thing."]},{"Key":"string copies","Fragments":["-"]},{"Key":"copies -","Fragments":["so"]},{"Key":"could very","Fragments":["easily"]},{"Key":"very easily","Fragments":["be"]},{"Key":"be looking","Fragments":["at"]},{"Key":"at (to-from)","Fragments":["or"]},{"Key":"(to-from) or","Fragments":["so"]},{"Key":"or so","Fragments":["allocations"]},{"Key":"so allocations","Fragments":["which"]},{"Key":"allocations which","Fragments":["could"]},{"Key":"quite nasty","Fragments":["compared"]},{"Key":"nasty compared","Fragments":["to"]},{"Key":"compared to","Fragments":["a","a","one","writing","the","if-then-else","time","my","mine.","sorting","opt","other's"]},{"Key":"a +=","Fragments":["or"]},{"Key":"or append","Fragments":["version."]},{"Key":"think you're","Fragments":["fine","going","hinting"]},{"Key":"you're fine","Fragments":["returning"]},{"Key":"fine returning","Fragments":["a"]},{"Key":"reference there.","Fragments":["Raw"]},{"Key":"there. Raw","Fragments":["references"]},{"Key":"Raw references","Fragments":["are"]},{"Key":"references are","Fragments":["supposed","good"]},{"Key":"are supposed","Fragments":["to","to","to","to","to"]},{"Key":"to communicate","Fragments":["that","that"]},{"Key":"communicate that","Fragments":["the","what"]},{"Key":"other side","Fragments":["does","(reading)"]},{"Key":"side does","Fragments":["*not*"]},{"Key":"does *not*","Fragments":["own"]},{"Key":"*not* own","Fragments":["this"]},{"Key":"own this","Fragments":["thing,"]},{"Key":"this thing,","Fragments":["they're"]},{"Key":"thing, they're","Fragments":["merely"]},{"Key":"they're merely","Fragments":["observing."]},{"Key":"merely observing.","Fragments":["When"]},{"Key":"observing. When","Fragments":["that"]},{"Key":"When that","Fragments":["comes"]},{"Key":"a return","Fragments":["value","type","statement","variable","statement","type;","value","forest"]},{"Key":"function I","Fragments":["think","use","write)."]},{"Key":"normal assumption","Fragments":["is"]},{"Key":"assumption is","Fragments":["that"]},{"Key":"reference does","Fragments":["not"]},{"Key":"not remain","Fragments":["valid"]},{"Key":"remain valid","Fragments":["past"]},{"Key":"valid past","Fragments":["the"]},{"Key":"object the","Fragments":["function"]},{"Key":"function was","Fragments":["called","a","added","called","also"]},{"Key":"was called","Fragments":["on.","on","on","multiple"]},{"Key":"namespace is","Fragments":["a","an","just","probably","probably","a","not","very","not","considered","a","much"]},{"Key":"bit weird.","Fragments":["It","I"]},{"Key":"weird. It","Fragments":["means"]},{"Key":"means if","Fragments":["I"]},{"Key":"I include","Fragments":["this","your","it.","this","it?"]},{"Key":"call things","Fragments":["like:"]},{"Key":"and people","Fragments":["using","kind","just"]},{"Key":"people using","Fragments":["my","regex"]},{"Key":"will think","Fragments":["I'm"]},{"Key":"having some","Fragments":["Darwinian"]},{"Key":"some Darwinian","Fragments":["fun."]},{"Key":"+1 To","Fragments":["FrostyTopaz"]},{"Key":"To FrostyTopaz","Fragments":["again,"]},{"Key":"FrostyTopaz again,","Fragments":["but"]},{"Key":"a jerk,","Fragments":["a"]},{"Key":"jerk, a","Fragments":["subtle"]},{"Key":"a subtle","Fragments":["disagreement:"]},{"Key":"subtle disagreement:","Fragments":["\"in"]},{"Key":"disagreement: \"in","Fragments":["this"]},{"Key":"\"in this","Fragments":["case"]},{"Key":"do nothing\"","Fragments":["actually"]},{"Key":"nothing\" actually","Fragments":["it'll"]},{"Key":"actually it'll","Fragments":["avoid"]},{"Key":"it'll avoid","Fragments":["linker"]},{"Key":"errors and","Fragments":["that's"]},{"Key":"that's something.","Fragments":["As"]},{"Key":"something. As","Fragments":["you"]},{"Key":"you point","Fragments":["out,","me","out."]},{"Key":"point out,","Fragments":["each"]},{"Key":"out, each","Fragments":["compilation"]},{"Key":"unit will","Fragments":["get"]},{"Key":"and static","Fragments":["allows","only"]},{"Key":"static allows","Fragments":["those"]},{"Key":"allows those","Fragments":["different"]},{"Key":"those different","Fragments":["copies"]},{"Key":"different copies","Fragments":["to"]},{"Key":"copies to","Fragments":["be"]},{"Key":"be linked","Fragments":["together","together."]},{"Key":"linked together","Fragments":["and"]},{"Key":"and happily","Fragments":["bloat"]},{"Key":"happily bloat","Fragments":["the"]},{"Key":"bloat the","Fragments":["executable."]},{"Key":"the executable.","Fragments":["If"]},{"Key":"executable. If","Fragments":["you"]},{"Key":"you left","Fragments":["it"]},{"Key":"left it","Fragments":["as","there","out."]},{"Key":"as extern","Fragments":["(that"]},{"Key":"extern (that","Fragments":["is,"]},{"Key":"(that is,","Fragments":["the","never"]},{"Key":"the default)","Fragments":["you'd"]},{"Key":"default) you'd","Fragments":["still"]},{"Key":"you'd still","Fragments":["get","have"]},{"Key":"still get","Fragments":["multiple","failures"]},{"Key":"get multiple","Fragments":["copies"]},{"Key":"multiple copies","Fragments":["but","of"]},{"Key":"copies but","Fragments":["the"]},{"Key":"the linker","Fragments":["wouldn't","blew","to","cannot","to"]},{"Key":"linker wouldn't","Fragments":["feel"]},{"Key":"wouldn't feel","Fragments":["comfortable"]},{"Key":"feel comfortable","Fragments":["putting","with"]},{"Key":"comfortable putting","Fragments":["them"]},{"Key":"putting them","Fragments":["all","in","in"]},{"Key":"same executable","Fragments":["and","include"]},{"Key":"executable and","Fragments":["would"]},{"Key":"would likely","Fragments":["exit"]},{"Key":"likely exit","Fragments":["with"]},{"Key":"exit with","Fragments":["an"]},{"Key":"error rather","Fragments":["than"]},{"Key":"than build","Fragments":["the"]},{"Key":"the thing","Fragments":["(I'm","being","changes","I"]},{"Key":"thing (I'm","Fragments":["assuming"]},{"Key":"(I'm assuming","Fragments":["you"]},{"Key":"assuming you","Fragments":["probably"]},{"Key":"you probably","Fragments":["don't","want","want"]},{"Key":"probably don't","Fragments":["link","want"]},{"Key":"don't link","Fragments":["with"]},{"Key":"link with","Fragments":["the"]},{"Key":"the dangerous","Fragments":["muldefs"]},{"Key":"dangerous muldefs","Fragments":["flag)."]},{"Key":"the note!","Fragments":["This"]},{"Key":"note! This","Fragments":["is"]},{"Key":"a \"cultural\"","Fragments":["aspect"]},{"Key":"\"cultural\" aspect","Fragments":["of"]},{"Key":"aspect of","Fragments":["C++"]},{"Key":"C++ I","Fragments":["need","don't","wrote","thought","would","think"]},{"Key":"As I","Fragments":["mentioned,","learn","was"]},{"Key":"I mentioned,","Fragments":["this"]},{"Key":"mentioned, this","Fragments":["isn't"]},{"Key":"isn't meant","Fragments":["to"]},{"Key":"be included;","Fragments":["I"]},{"Key":"included; I","Fragments":["never"]},{"Key":"I never","Fragments":["`using","really","use","used","used"]},{"Key":"never `using","Fragments":["namespace"]},{"Key":"namespace std`","Fragments":["in","because","but","or","can","is","is","here."]},{"Key":"std` in","Fragments":["headers."]},{"Key":"in headers.","Fragments":["The"]},{"Key":"headers. The","Fragments":["header"]},{"Key":"The header","Fragments":["attached","guards","is","file"]},{"Key":"header attached","Fragments":["to"]},{"Key":"attached to","Fragments":["the"]},{"Key":"previous submission","Fragments":["is"]},{"Key":"is closer","Fragments":["to"]},{"Key":"to what","Fragments":["this","your","@leila","you","you"]},{"Key":"what this","Fragments":["one","site","program","part"]},{"Key":"should look","Fragments":["like.","into","like","at"]},{"Key":"you deal","Fragments":["with"]},{"Key":"different reactions","Fragments":["to"]},{"Key":"reactions to","Fragments":["the"]},{"Key":"the '","Fragments":["character"]},{"Key":"' character","Fragments":["that","isn't","can"]},{"Key":"character that","Fragments":["depend","maybe","was","is","is"]},{"Key":"that depend","Fragments":["on"]},{"Key":"on where","Fragments":["in","doing","it's"]},{"Key":"where in","Fragments":["the"]},{"Key":"word it","Fragments":["falls?"]},{"Key":"it falls?","Fragments":["Or"]},{"Key":"falls? Or","Fragments":["was"]},{"Key":"Or was","Fragments":["that"]},{"Key":" Doh!","Fragments":["You're","While"]},{"Key":"Doh! You're","Fragments":["right"]},{"Key":"right about","Fragments":["the","the","the","the","the","the","the"]},{"Key":"the using.","Fragments":["Sorry!"]},{"Key":"using. Sorry!","Fragments":["I"]},{"Key":"Sorry! I","Fragments":["agree"]},{"Key":"agree it's","Fragments":["really"]},{"Key":"not much","Fragments":["of","indeed","of","better.","to","to","to"]},{"Key":"a concern","Fragments":["in"]},{"Key":"concern in","Fragments":["a"]},{"Key":"file, especially","Fragments":["given"]},{"Key":"especially given","Fragments":["that","the","it's"]},{"Key":"using std::placeholders","Fragments":["and"]},{"Key":"std::placeholders and","Fragments":["you're"]},{"Key":"and you're","Fragments":["not","otherwise","concerned","unlikely"]},{"Key":"using any","Fragments":["of","of"]},{"Key":"boost namespaces","Fragments":["so"]},{"Key":"namespaces so","Fragments":["the","I","I"]},{"Key":"the risk","Fragments":["of"]},{"Key":"risk of","Fragments":["collision"]},{"Key":"of collision","Fragments":["is"]},{"Key":"collision is","Fragments":["low."]},{"Key":"That said","Fragments":["it"]},{"Key":"said it","Fragments":["probably"]},{"Key":"probably makes","Fragments":["sense","sense.","sense"]},{"Key":"go all","Fragments":["one","the"]},{"Key":"all one","Fragments":["way"]},{"Key":"way or","Fragments":["other.","the","another"]},{"Key":"or other.","Fragments":["I"]},{"Key":"other. I","Fragments":["prefer","just"]},{"Key":"and std::map","Fragments":["etc.,"]},{"Key":"std::map etc.,","Fragments":["but"]},{"Key":"etc., but","Fragments":["if"]},{"Key":"you're writing","Fragments":["map"]},{"Key":"writing map","Fragments":["you"]},{"Key":"map you","Fragments":["should","should"]},{"Key":"should maybe","Fragments":["also","specify"]},{"Key":"maybe also","Fragments":["write"]},{"Key":"also write","Fragments":["just","`x","`++x`"]},{"Key":"write just","Fragments":["string.","two"]},{"Key":"reference thing,","Fragments":["here's"]},{"Key":"thing, here's","Fragments":["some"]},{"Key":"here's some","Fragments":["references"]},{"Key":"some references","Fragments":[":)"]},{"Key":" http://stackoverflow.com/questions/7657718/when-to-use-shared-ptr-and-when-to-use-raw-pointers","Fragments":["(the"]},{"Key":"http://stackoverflow.com/questions/7657718/when-to-use-shared-ptr-and-when-to-use-raw-pointers (the","Fragments":["accepted"]},{"Key":"(the accepted","Fragments":["answer"]},{"Key":"accepted answer","Fragments":["is","in","gets","to"]},{"Key":"answer is","Fragments":["pretty","no.","the"]},{"Key":" http://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/","Fragments":["(Herb's"]},{"Key":"http://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/ (Herb's","Fragments":["just"]},{"Key":"(Herb's just","Fragments":["an"]},{"Key":"just an","Fragments":["awesomely","`anagram`","include:","\"else\"?","int"]},{"Key":"an awesomely","Fragments":["smart"]},{"Key":"awesomely smart","Fragments":["guy)"]},{"Key":"take advantage","Fragments":["of","of","of"]},{"Key":"the find_if","Fragments":["should"]},{"Key":"find_if should","Fragments":["never"]},{"Key":"should never","Fragments":["be","compare","ever","end","cause"]},{"Key":"be earlier","Fragments":["than"]},{"Key":"one it","Fragments":["found","came"]},{"Key":"it found","Fragments":["last","a"]},{"Key":"found last","Fragments":["time."]},{"Key":"last time.","Fragments":["So"]},{"Key":"time. So","Fragments":["you","the"]},{"Key":"returned iterator","Fragments":["as"]},{"Key":"iterator as","Fragments":["the"]},{"Key":"to find_if","Fragments":["to"]},{"Key":"find_if to","Fragments":["skip"]},{"Key":"double check","Fragments":["to"]},{"Key":"this wasn't","Fragments":["mine."]},{"Key":"wasn't mine.","Fragments":["It's"]},{"Key":"mine. It's","Fragments":["truly"]},{"Key":"It's truly","Fragments":["remarkably"]},{"Key":"truly remarkably","Fragments":["similar."]},{"Key":"remarkably similar.","Fragments":["Go"]},{"Key":"similar. Go","Fragments":["us?"]},{"Key":"Maybe (honestly","Fragments":["not"]},{"Key":"(honestly not","Fragments":["sure)"]},{"Key":"not sure)","Fragments":["it"]},{"Key":"sure) it","Fragments":["would"]},{"Key":"worth declaring","Fragments":["prime"]},{"Key":"declaring prime","Fragments":["static"]},{"Key":"prime static","Fragments":["so"]},{"Key":"static so","Fragments":["that"]},{"Key":"it maintains","Fragments":["its","a"]},{"Key":"maintains its","Fragments":["list"]},{"Key":"its list","Fragments":["of"]},{"Key":"of primes","Fragments":["between"]},{"Key":"primes between","Fragments":["calls."]},{"Key":"between calls.","Fragments":["It"]},{"Key":"calls. It","Fragments":["would"]},{"Key":"would change","Fragments":["your","is","anything"]},{"Key":"loop a","Fragments":["bit,"]},{"Key":"bit, and","Fragments":["you","makes"]},{"Key":"wouldn't be","Fragments":["threadsafe","invalid","hard","surprised","any","using","adding","bothered,"]},{"Key":"be threadsafe","Fragments":["anymore,"]},{"Key":"threadsafe anymore,","Fragments":["but"]},{"Key":"anymore, but","Fragments":["you"]},{"Key":"to rediscover","Fragments":["the"]},{"Key":"rediscover the","Fragments":["list"]},{"Key":"the list","Fragments":["of","of","of","a","until","(","gets"]},{"Key":"of prime","Fragments":["numbers"]},{"Key":"numbers every","Fragments":["time"]},{"Key":"time someone","Fragments":["called"]},{"Key":"someone called","Fragments":["your"]},{"Key":"called your","Fragments":["function."]},{"Key":"your argument","Fragments":["is"]},{"Key":"is signed","Fragments":["you're"]},{"Key":"signed you're","Fragments":["implying"]},{"Key":"you're implying","Fragments":["it's"]},{"Key":"implying it's","Fragments":["OK"]},{"Key":"it's OK","Fragments":["to"]},{"Key":"OK to","Fragments":["pass","declare"]},{"Key":"pass negative","Fragments":["numbers,"]},{"Key":"numbers, so","Fragments":["I"]},{"Key":"suggest changing","Fragments":["n","to","from"]},{"Key":"changing n","Fragments":["=="]},{"Key":"n ==","Fragments":["1","0"]},{"Key":"== 1","Fragments":["to","(the"]},{"Key":"1 to","Fragments":["n","10,","this"]},{"Key":"to n","Fragments":["\u003c="]},{"Key":"n \u003c=","Fragments":["1."]},{"Key":"\u003c= 1.","Fragments":["Right"]},{"Key":"1. Right","Fragments":["now"]},{"Key":"your answer","Fragments":["for","(I"]},{"Key":"answer for","Fragments":["negative"]},{"Key":"for negative","Fragments":["values"]},{"Key":"values is","Fragments":["just","not"]},{"Key":"odd. If","Fragments":["it"]},{"Key":"type I","Fragments":["could","chose"]},{"Key":"could elect","Fragments":["to"]},{"Key":"elect to","Fragments":["see"]},{"Key":"see compiler","Fragments":["warnings"]},{"Key":"compiler warnings","Fragments":["about"]},{"Key":"warnings about","Fragments":["me"]},{"Key":"about me","Fragments":["passing"]},{"Key":"me passing","Fragments":["-4."]},{"Key":"The sqrt","Fragments":["trick"]},{"Key":"sqrt trick","Fragments":["might"]},{"Key":"trick might","Fragments":["be"]},{"Key":"be worthwhile","Fragments":["for"]},{"Key":"worthwhile for","Fragments":["me"]},{"Key":"do in","Fragments":["mine.","one-line"]},{"Key":"in mine.","Fragments":["Maybe"]},{"Key":"mine. Maybe","Fragments":["you","I'll"]},{"Key":"should reassign","Fragments":["it"]},{"Key":"reassign it","Fragments":["in"]},{"Key":"you n","Fragments":["/="]},{"Key":"n /=","Fragments":["i."]},{"Key":"The '","Fragments":["character"]},{"Key":"character isn't","Fragments":["used"]},{"Key":"isn't used","Fragments":["as"]},{"Key":"a separator","Fragments":["by","list?","is","list."]},{"Key":"separator by","Fragments":["the"]},{"Key":"the tokenizer.","Fragments":["So"]},{"Key":"tokenizer. So","Fragments":["strings"]},{"Key":"So strings","Fragments":["like"]},{"Key":"strings like","Fragments":["\"\\'Don\\'t\"","this."]},{"Key":"like \"\\'Don\\'t\"","Fragments":["(apostrophes"]},{"Key":"\"\\'Don\\'t\" (apostrophes","Fragments":["escaped"]},{"Key":"(apostrophes escaped","Fragments":["to"]},{"Key":"escaped to","Fragments":["make"]},{"Key":"more visible)","Fragments":["make"]},{"Key":"visible) make","Fragments":["it"]},{"Key":"into sanitizeWord.","Fragments":["The"]},{"Key":"sanitizeWord. The","Fragments":["call"]},{"Key":"The call","Fragments":["to","to","to"]},{"Key":"to boost::trim_copy_if()","Fragments":["uses"]},{"Key":"boost::trim_copy_if() uses","Fragments":["boost::algorithm::is_alnum()"]},{"Key":"uses boost::algorithm::is_alnum()","Fragments":["(ultimately)"]},{"Key":"boost::algorithm::is_alnum() (ultimately)","Fragments":["to"]},{"Key":"(ultimately) to","Fragments":["trim"]},{"Key":"trim any","Fragments":["non-aplha-numeric"]},{"Key":"any non-aplha-numeric","Fragments":["characters"]},{"Key":"non-aplha-numeric characters","Fragments":["from"]},{"Key":"characters from","Fragments":["the","the"]},{"Key":"word at","Fragments":["that"]},{"Key":"at that","Fragments":["stage.","point.","time.","end"]},{"Key":" \"//Prime","Fragments":["factors"]},{"Key":"\"//Prime factors","Fragments":["can"]},{"Key":"can never","Fragments":["be","be","be","be","be"]},{"Key":" Why's","Fragments":["that?"]},{"Key":"Maybe n","Fragments":["should"]},{"Key":"n should","Fragments":["be"]},{"Key":"be unsigned","Fragments":["int?"]},{"Key":"unsigned int?","Fragments":["I","Why"]},{"Key":"problem if","Fragments":["someone","a","one"]},{"Key":"if someone","Fragments":["gave","gives","calls","also","is","provides","did"]},{"Key":"someone gave","Fragments":["you"]},{"Key":"gave you","Fragments":["a"]},{"Key":"a prime","Fragments":["number","number","factor"]},{"Key":"prime number","Fragments":["too","and","if","it"]},{"Key":"number too","Fragments":["large"]},{"Key":"too large","Fragments":["to"]},{"Key":"large to","Fragments":["fit"]},{"Key":"to fit","Fragments":["into","into","inside","the"]},{"Key":"fit into","Fragments":["an","the","the"]},{"Key":"Your first","Fragments":["observation"]},{"Key":"first observation","Fragments":["is"]},{"Key":"observation is","Fragments":["definitely"]},{"Key":"definitely right","Fragments":["-"]},{"Key":"right -","Fragments":["having"]},{"Key":"- having","Fragments":["static"]},{"Key":"having static","Fragments":["on","members","string"]},{"Key":"on cleanKey","Fragments":["doesn't"]},{"Key":"cleanKey doesn't","Fragments":["help"]},{"Key":"doesn't help","Fragments":["because"]},{"Key":"help because","Fragments":["of"]},{"Key":"words not","Fragments":["being"]},{"Key":"being static.","Fragments":["Mea"]},{"Key":"static. Mea","Fragments":["culpa"]},{"Key":"Mea culpa","Fragments":["there."]},{"Key":"never read","Fragments":["standardeze"]},{"Key":"read standardeze","Fragments":["on"]},{"Key":"standardeze on","Fragments":["ODR,"]},{"Key":"on ODR,","Fragments":["but"]},{"Key":"ODR, but","Fragments":["I'm"]},{"Key":"the linkers","Fragments":["I"]},{"Key":"linkers I","Fragments":["work"]},{"Key":"I work","Fragments":["with","in"]},{"Key":"with won't","Fragments":["examine"]},{"Key":"won't examine","Fragments":["the"]},{"Key":"of two","Fragments":["\"text","(`std::transform()`","containers.","values.","evils.","ways"]},{"Key":"two \"text","Fragments":["symbols\""]},{"Key":"\"text symbols\"","Fragments":["with"]},{"Key":"symbols\" with","Fragments":["external"]},{"Key":"external linkage","Fragments":["and"]},{"Key":"linkage and","Fragments":["the"]},{"Key":"same name*","Fragments":["and"]},{"Key":"name* and","Fragments":["link"]},{"Key":"and link","Fragments":["if"]},{"Key":"link if","Fragments":["they're"]},{"Key":"they're the","Fragments":["same"]},{"Key":"same -","Fragments":["it'll"]},{"Key":"- it'll","Fragments":["just"]},{"Key":"it'll just","Fragments":["refuse"]},{"Key":"just refuse","Fragments":["and"]},{"Key":"refuse and","Fragments":["exit."]},{"Key":"and exit.","Fragments":["There"]},{"Key":"exit. There","Fragments":["is"]},{"Key":"is such","Fragments":["a","a"]},{"Key":"thing as","Fragments":["common","well"]},{"Key":"as common","Fragments":["linkage,"]},{"Key":"common linkage,","Fragments":["which"]},{"Key":"linkage, which","Fragments":["would"]},{"Key":"would allow","Fragments":["such","f(x)","the","i","you","you","me"]},{"Key":"allow such","Fragments":["things"]},{"Key":"things -","Fragments":["it","and"]},{"Key":"just pick","Fragments":["the"]},{"Key":"pick the","Fragments":["first"]},{"Key":"came across","Fragments":["which"]},{"Key":"across which","Fragments":["may"]},{"Key":"may differ","Fragments":["between","in"]},{"Key":"differ between","Fragments":["one"]},{"Key":"between one","Fragments":["linker"]},{"Key":"one linker","Fragments":["and"]},{"Key":"linker and","Fragments":["another"]},{"Key":"and another","Fragments":["(the","ends","that's"]},{"Key":"another (the","Fragments":["default"]},{"Key":"(the default","Fragments":["one"]},{"Key":"default one","Fragments":["on","is"]},{"Key":"one on","Fragments":["AIX","the"]},{"Key":"on AIX","Fragments":["is"]},{"Key":"AIX is","Fragments":["surprisingly"]},{"Key":"is surprisingly","Fragments":["not"]},{"Key":"surprisingly not","Fragments":["single-pass"]},{"Key":"not single-pass","Fragments":["but"]},{"Key":"single-pass but","Fragments":["rather"]},{"Key":"rather hashmap-based).","Fragments":["But"]},{"Key":"hashmap-based). But","Fragments":["A)"]},{"Key":"But A)","Fragments":["I've"]},{"Key":"A) I've","Fragments":["never"]},{"Key":"never attempted","Fragments":["a"]},{"Key":"attempted a","Fragments":["common-linkage"]},{"Key":"a common-linkage","Fragments":["function,"]},{"Key":"common-linkage function,","Fragments":["so"]},{"Key":"it's possible","Fragments":["B)","to","that","that","that"]},{"Key":"possible B)","Fragments":["defining"]},{"Key":"B) defining","Fragments":["things"]},{"Key":"defining things","Fragments":["with"]},{"Key":"things with","Fragments":["common","iterators"]},{"Key":"with common","Fragments":["linkage"]},{"Key":"common linkage","Fragments":["in"]},{"Key":"linkage in","Fragments":["C"]},{"Key":"C is","Fragments":["very"]},{"Key":"very tricky","Fragments":["and"]},{"Key":"tricky and","Fragments":["C)"]},{"Key":"and C)","Fragments":["IIRC"]},{"Key":"C) IIRC","Fragments":["there"]},{"Key":"IIRC there","Fragments":["is"]},{"Key":"no standard","Fragments":["way"]},{"Key":"standard way","Fragments":["to"]},{"Key":"C++ (my","Fragments":["former"]},{"Key":"(my former","Fragments":["employer"]},{"Key":"former employer","Fragments":["browbeat"]},{"Key":"employer browbeat","Fragments":["a"]},{"Key":"browbeat a","Fragments":["compiler"]},{"Key":"compiler vendor","Fragments":["into"]},{"Key":"vendor into","Fragments":["adding"]},{"Key":"into adding","Fragments":["a"]},{"Key":"a flag","Fragments":["that"]},{"Key":"flag that","Fragments":["allowed"]},{"Key":"that allowed","Fragments":["C"]},{"Key":"allowed C","Fragments":["rules"]},{"Key":"C rules","Fragments":["in"]},{"Key":"rules in","Fragments":["C++).","the"]},{"Key":" Hmm.","Fragments":["I'm"]},{"Key":"Hmm. I'm","Fragments":["going"]},{"Key":"give this","Fragments":["a"]},{"Key":"a go","Fragments":["when","since"]},{"Key":"go when","Fragments":["I"]},{"Key":"get home","Fragments":["and","such"]},{"Key":"home and","Fragments":["let"]},{"Key":" *Unless","Fragments":["you"]},{"Key":"*Unless you","Fragments":["tell"]},{"Key":"you tell","Fragments":["it","them"]},{"Key":"tell it","Fragments":["to","to)."]},{"Key":"to with","Fragments":["muldefs"]},{"Key":"with muldefs","Fragments":["in"]},{"Key":"muldefs in","Fragments":["which"]},{"Key":"which case","Fragments":["it","the","the","you","the","the","the"]},{"Key":"does warn","Fragments":["only"]},{"Key":"warn only","Fragments":["if"]},{"Key":"only if","Fragments":["there's","I","you","necessary."]},{"Key":" gcc","Fragments":["at"]},{"Key":"gcc at","Fragments":["least"]},{"Key":"least seems","Fragments":["to"]},{"Key":"to behave","Fragments":["as","exactly"]},{"Key":"behave as","Fragments":["I"]},{"Key":" $echo","Fragments":["'#include"]},{"Key":"$echo '#include","Fragments":["\"word_count.h\"'"]},{"Key":"'#include \"word_count.h\"'","Fragments":["|"]},{"Key":"\"word_count.h\"' |","Fragments":["tee"]},{"Key":"| tee","Fragments":["a.cpp"]},{"Key":"tee a.cpp","Fragments":["\u003e"]},{"Key":"a.cpp \u003e","Fragments":["b.cpp"]},{"Key":"\u003e b.cpp","Fragments":[";","\u003c\u003c\u003c"]},{"Key":"b.cpp ;","Fragments":["echo"]},{"Key":"; echo","Fragments":["'#include"]},{"Key":"echo '#include","Fragments":["\u003cmap\u003e"]},{"Key":"namespace word_count","Fragments":["{","{"]},{"Key":" std::map\u003cstd::string,int\u003e","Fragments":["words(","words("]},{"Key":"std::map\u003cstd::string,int\u003e words(","Fragments":["std::string","std::string"]},{"Key":"words( std::string","Fragments":["words","words"]},{"Key":"std::string words","Fragments":[");",")"]},{"Key":"int main(int","Fragments":["argc,","argc,"]},{"Key":"main(int argc,","Fragments":["const","const"]},{"Key":"argc, const","Fragments":["char*","char"]},{"Key":"auto m","Fragments":["="]},{"Key":"m =","Fragments":["word_count::words("]},{"Key":"= word_count::words(","Fragments":["argv[1]","\"all","\"one,two,three\"","\"First:","\"go","\"She"]},{"Key":"word_count::words( argv[1]","Fragments":[");"]},{"Key":"auto w","Fragments":[":"]},{"Key":"w :","Fragments":["m"]},{"Key":": m","Fragments":[")"]},{"Key":" std::cout","Fragments":["\u003c\u003c","\u003c\u003c","\u003c\u003c","\u003c\u003c","\u003c\u003c","\u003c\u003c","\u003c\u003c","\u003c\u003c","\u003c\u003c"]},{"Key":"std::cout \u003c\u003c","Fragments":["w.first","downcase(s)","s","downcase(\"Hello\")","i","i","s;","s_func;","i"]},{"Key":"\u003c\u003c w.first","Fragments":["\u003c\u003c"]},{"Key":"w.first \u003c\u003c","Fragments":["\"=\u003e\""]},{"Key":"\u003c\u003c \"=\u003e\"","Fragments":["\u003c\u003c"]},{"Key":"\"=\u003e\" \u003c\u003c","Fragments":["w.second"]},{"Key":"\u003c\u003c w.second","Fragments":["\u003c\u003c"]},{"Key":"w.second \u003c\u003c","Fragments":["std::endl;"]},{"Key":" }'","Fragments":["\u003e"]},{"Key":"}' \u003e","Fragments":["c.cpp"]},{"Key":" $g++","Fragments":["-std=c++11","-std=c++11","-std=c++11","-std=c++11","-xc++","-xc++"]},{"Key":"$g++ -std=c++11","Fragments":["?.cpp","?.cpp","{a,b,c}.cpp","{b,a,c}.cpp"]},{"Key":"-std=c++11 ?.cpp","Fragments":["\u0026\u0026","-Wl,-z,muldefs"]},{"Key":"?.cpp \u0026\u0026","Fragments":["./a.out"]},{"Key":"\u0026\u0026 ./a.out","Fragments":["\"abc","\"abc","\"abc","\"abc"]},{"Key":"./a.out \"abc","Fragments":["def","def","def","def"]},{"Key":"\"abc def","Fragments":["abc\"","abc\"","abc\"","abc\""]},{"Key":" /tmp/cchsEDrR.o:","Fragments":["In"]},{"Key":"/tmp/cchsEDrR.o: In","Fragments":["function"]},{"Key":" b.cpp:(.text+0x116):","Fragments":["multiple"]},{"Key":"b.cpp:(.text+0x116): multiple","Fragments":["definition"]},{"Key":"multiple definition","Fragments":["of"]},{"Key":" /tmp/ccQTq3YY.o:a.cpp:(.text+0x116):","Fragments":["first"]},{"Key":"/tmp/ccQTq3YY.o:a.cpp:(.text+0x116): first","Fragments":["defined"]},{"Key":"first defined","Fragments":["here"]},{"Key":" collect2:","Fragments":["error:","error:","error:"]},{"Key":"collect2: error:","Fragments":["ld","ld","ld"]},{"Key":"error: ld","Fragments":["returned","returned","returned"]},{"Key":"ld returned","Fragments":["1","1","1"]},{"Key":"returned 1","Fragments":["exit","exit","exit"]},{"Key":"1 exit","Fragments":["status","status","status"]},{"Key":"and with","Fragments":["muldefs","less","that","the","no","the"]},{"Key":"?.cpp -Wl,-z,muldefs","Fragments":["\u0026\u0026"]},{"Key":"-Wl,-z,muldefs \u0026\u0026","Fragments":["./a.out","./a.out","./a.out"]},{"Key":"I consider","Fragments":["muldefs","it","neither"]},{"Key":"consider muldefs","Fragments":["dangerous,"]},{"Key":"muldefs dangerous,","Fragments":["because:"]},{"Key":" cat","Fragments":["\u003e"]},{"Key":"cat \u003e","Fragments":["b.cpp"]},{"Key":"b.cpp \u003c\u003c\u003c","Fragments":["'#include"]},{"Key":"\u003c\u003c\u003c '#include","Fragments":["\u003cmap\u003e"]},{"Key":"words )","Fragments":["{"]},{"Key":"return {","Fragments":["std::make_pair("]},{"Key":"{ std::make_pair(","Fragments":["\"NO!!\","]},{"Key":"std::make_pair( \"NO!!\",","Fragments":["-1"]},{"Key":"\"NO!!\", -1","Fragments":[")"]},{"Key":"-1 )","Fragments":["};"]},{"Key":"-std=c++11 {a,b,c}.cpp","Fragments":["-Wl,-z,muldefs"]},{"Key":"{a,b,c}.cpp -Wl,-z,muldefs","Fragments":["\u0026\u0026"]},{"Key":"-std=c++11 {b,a,c}.cpp","Fragments":["-Wl,-z,muldefs"]},{"Key":"{b,a,c}.cpp -Wl,-z,muldefs","Fragments":["\u0026\u0026"]},{"Key":"And this","Fragments":["nifty","is"]},{"Key":"this nifty","Fragments":["rundown"]},{"Key":"nifty rundown","Fragments":["from"]},{"Key":"rundown from","Fragments":["LLVM"]},{"Key":"from LLVM","Fragments":["clears"]},{"Key":"LLVM clears","Fragments":["up"]},{"Key":"clears up","Fragments":["that"]},{"Key":"up that","Fragments":["no,","habit","tree,","I","memory"]},{"Key":"that no,","Fragments":["you"]},{"Key":"have common-linkage","Fragments":["functions."]},{"Key":"common-linkage functions.","Fragments":["Not"]},{"Key":"functions. Not","Fragments":["that"]},{"Key":"Not that","Fragments":["any","there's","I","it"]},{"Key":"of us","Fragments":["wanted","made","aren't"]},{"Key":"us wanted","Fragments":["to,"]},{"Key":"wanted to,","Fragments":["but"]},{"Key":"to, but","Fragments":["you","anything"]},{"Key":"probably accomplish","Fragments":["something"]},{"Key":"accomplish something","Fragments":["similar"]},{"Key":"similar by","Fragments":["defining"]},{"Key":"by defining","Fragments":["it","functions"]},{"Key":"as weak,","Fragments":["but"]},{"Key":"weak, but","Fragments":["this"]},{"Key":"all quite","Fragments":["beside"]},{"Key":"quite beside","Fragments":["the"]},{"Key":"beside the","Fragments":["point.","point."]},{"Key":"point. Just","Fragments":["put"]},{"Key":"the source","Fragments":["file,","code","code","file","file,","file,","file.","file).","file","file","file,","file,","file.","file"]},{"Key":"file, like","Fragments":["you"]},{"Key":"you said,","Fragments":["unless","but"]},{"Key":"said, unless","Fragments":["you're"]},{"Key":"unless you're","Fragments":["doing","going","compiling"]},{"Key":"doing something","Fragments":["really","reasonable.","that"]},{"Key":"something really","Fragments":["weird."]},{"Key":" Handling","Fragments":["the"]},{"Key":"Handling the","Fragments":["edge"]},{"Key":"the edge","Fragments":["case"]},{"Key":"edge case","Fragments":["of"]},{"Key":"single quotes","Fragments":["is","is"]},{"Key":"quotes is","Fragments":["a","a"]},{"Key":"bit ugly","Fragments":["in"]},{"Key":"ugly in","Fragments":["my"]},{"Key":"my code.","Fragments":[":-\\","(And","I"]},{"Key":"True. Will","Fragments":["do."]},{"Key":"Well, if","Fragments":["an"]},{"Key":"if an","Fragments":["operation"]},{"Key":"an operation","Fragments":["can",":","on"]},{"Key":"operation can","Fragments":["throw,"]},{"Key":"can throw,","Fragments":["I"]},{"Key":"throw, I","Fragments":["think"]},{"Key":"throw as","Fragments":["early"]},{"Key":"as early","Fragments":["as"]},{"Key":"early as","Fragments":["possible."]},{"Key":"possible. That's","Fragments":["just"]},{"Key":"That's just","Fragments":["me,","my","due"]},{"Key":"just me,","Fragments":["and","but"]},{"Key":"me, and","Fragments":["bosses","it's"]},{"Key":"and bosses","Fragments":["I"]},{"Key":"bosses I","Fragments":["had"]},{"Key":"had disagreed","Fragments":["with"]},{"Key":"disagreed with","Fragments":["me"]},{"Key":"with me","Fragments":["on","either.","not"]},{"Key":"me on","Fragments":["that.","this","my","my"]},{"Key":"that. They","Fragments":["were"]},{"Key":"They were","Fragments":["the"]},{"Key":"the \"cover","Fragments":["it"]},{"Key":"\"cover it","Fragments":["up\""]},{"Key":"it up\"","Fragments":["kind"]},{"Key":"up\" kind","Fragments":["of"]},{"Key":"of people,","Fragments":["so"]},{"Key":"people, so","Fragments":["I've"]},{"Key":"so I've","Fragments":["aligned","added","sometimes"]},{"Key":"I've aligned","Fragments":["with"]},{"Key":"aligned with","Fragments":["that"]},{"Key":"But then,","Fragments":["on"]},{"Key":"then, on","Fragments":["a"]},{"Key":"second thought,","Fragments":["I"]},{"Key":"be argued","Fragments":["either"]},{"Key":"argued either","Fragments":["way,"]},{"Key":"way, computing","Fragments":["or"]},{"Key":"computing or","Fragments":["holding"]},{"Key":"or holding","Fragments":["state,"]},{"Key":"holding state,","Fragments":["if"]},{"Key":"state, if","Fragments":["the"]},{"Key":"the state","Fragments":["doesn't","or","of"]},{"Key":"state doesn't","Fragments":["change."]},{"Key":"doesn't change.","Fragments":["If","You"]},{"Key":"change. If","Fragments":["you"]},{"Key":"say \"measure","Fragments":["first\""]},{"Key":"\"measure first\"","Fragments":["I'd"]},{"Key":"first\" I'd","Fragments":["totally"]},{"Key":"I'd totally","Fragments":["nod."]},{"Key":"totally nod.","Fragments":["If"]},{"Key":"nod. If","Fragments":["you"]},{"Key":"say \"things","Fragments":["are"]},{"Key":"\"things are","Fragments":["simpler"]},{"Key":"are simpler","Fragments":["if","(to"]},{"Key":"simpler if","Fragments":["you","approached","your","you"]},{"Key":"get all","Fragments":["work","the","the","instances","your"]},{"Key":"all work","Fragments":["out"]},{"Key":"way at","Fragments":["construction\"","first"]},{"Key":"at construction\"","Fragments":["I'd"]},{"Key":"construction\" I'd","Fragments":["nod."]},{"Key":"And one","Fragments":["more","final","more","I"]},{"Key":"more thing","Fragments":["about","to"]},{"Key":"thing about","Fragments":["exceptions:","this","exercism.io"]},{"Key":"about exceptions:","Fragments":["this"]},{"Key":"exceptions: this","Fragments":["isn't"]},{"Key":"isn't relevant","Fragments":["here,","because","to"]},{"Key":"relevant here,","Fragments":["but"]},{"Key":"but generally,","Fragments":["in"]},{"Key":"generally, in","Fragments":["RAII,"]},{"Key":"in RAII,","Fragments":["exceptions"]},{"Key":"RAII, exceptions","Fragments":["is"]},{"Key":"exceptions is","Fragments":["the","reasonable."]},{"Key":"for signalling","Fragments":["resource"]},{"Key":"signalling resource","Fragments":["acquiring"]},{"Key":"resource acquiring","Fragments":["issues."]},{"Key":"acquiring issues.","Fragments":["You"]},{"Key":"issues. You","Fragments":["define"]},{"Key":"define what","Fragments":["the"]},{"Key":"the resource","Fragments":["is,","at"]},{"Key":"resource is,","Fragments":["assign"]},{"Key":"is, assign","Fragments":["a"]},{"Key":"assign a","Fragments":["class"]},{"Key":"class dedicated","Fragments":["to"]},{"Key":"dedicated to","Fragments":["it,"]},{"Key":"and acquire","Fragments":["the"]},{"Key":"acquire the","Fragments":["resource"]},{"Key":"resource at","Fragments":["construction."]},{"Key":"at construction.","Fragments":["If","This"]},{"Key":"construction. If","Fragments":["you"]},{"Key":"you fail","Fragments":["to"]},{"Key":"to acquire,","Fragments":["this"]},{"Key":"acquire, this","Fragments":["class"]},{"Key":"class can't","Fragments":["get"]},{"Key":"can't get","Fragments":["its","optimzed","away"]},{"Key":"its responsibility","Fragments":["done,"]},{"Key":"responsibility done,","Fragments":["and"]},{"Key":"done, and","Fragments":["all"]},{"Key":"all bets","Fragments":["are","are"]},{"Key":"bets are","Fragments":["off.","off."]},{"Key":"are off.","Fragments":["To","So"]},{"Key":"off. To","Fragments":["avoid"]},{"Key":"avoid being","Fragments":["left"]},{"Key":"being left","Fragments":["with"]},{"Key":"left with","Fragments":["an"]},{"Key":"invalid object","Fragments":["you"]},{"Key":"you throw.","Fragments":["You"]},{"Key":"throw. You","Fragments":["don't"]},{"Key":"don't wait","Fragments":["for"]},{"Key":"wait for","Fragments":["the"]},{"Key":"object to","Fragments":["be","work","read"]},{"Key":"throw --","Fragments":["you"]},{"Key":"-- you","Fragments":["throw","just"]},{"Key":"you throw","Fragments":["at"]},{"Key":"throw at","Fragments":["construction."]},{"Key":"construction. This","Fragments":["way,"]},{"Key":"This way,","Fragments":["you","it"]},{"Key":"object constructed","Fragments":["it"]},{"Key":"constructed it","Fragments":["is"]},{"Key":"a valid,","Fragments":["determined,"]},{"Key":"valid, determined,","Fragments":["useable"]},{"Key":"determined, useable","Fragments":["state."]},{"Key":"useable state.","Fragments":["None"]},{"Key":"state. None","Fragments":["of"]},{"Key":"functions need","Fragments":["to"]},{"Key":"for validity,","Fragments":["apart"]},{"Key":"validity, apart","Fragments":["from"]},{"Key":"apart from","Fragments":["maintaining","the"]},{"Key":"from maintaining","Fragments":["the"]},{"Key":"the invariants","Fragments":["when"]},{"Key":"invariants when","Fragments":["they"]},{"Key":"when they","Fragments":["change","could","never","are"]},{"Key":"they change","Fragments":["the"]},{"Key":"is DbC,","Fragments":["and"]},{"Key":"DbC, and","Fragments":["it"]},{"Key":"code much","Fragments":["much","clearer"]},{"Key":"much much","Fragments":["simpler,"]},{"Key":"much simpler,","Fragments":["shorter,"]},{"Key":"simpler, shorter,","Fragments":["faster."]},{"Key":"shorter, faster.","Fragments":["But"]},{"Key":"faster. But","Fragments":["it"]},{"Key":"does demand","Fragments":["that"]},{"Key":"demand that","Fragments":["you,"]},{"Key":"that you,","Fragments":["the"]},{"Key":"you, the","Fragments":["programmer,","cost"]},{"Key":"the programmer,","Fragments":["are"]},{"Key":"programmer, are","Fragments":["always"]},{"Key":"always conscious","Fragments":["of"]},{"Key":"conscious of","Fragments":["the"]},{"Key":"the class'","Fragments":["invariants.","internals,"]},{"Key":"class' invariants.","Fragments":["Which"]},{"Key":"invariants. Which","Fragments":["reminds"]},{"Key":"Which reminds","Fragments":["us"]},{"Key":"reminds us","Fragments":["to"]},{"Key":"us to","Fragments":["work","chose","use"]},{"Key":"work hard","Fragments":["to"]},{"Key":"keep one","Fragments":["responsibility"]},{"Key":"one responsibility","Fragments":["per"]},{"Key":"responsibility per","Fragments":["class"]},{"Key":"per class","Fragments":["and"]},{"Key":"and function,","Fragments":["or"]},{"Key":"or else","Fragments":["these"]},{"Key":"else these","Fragments":["things"]},{"Key":"things very","Fragments":["quickly"]},{"Key":"very quickly","Fragments":["grow"]},{"Key":"quickly grow","Fragments":["out"]},{"Key":"lot both","Fragments":["@cyrus"]},{"Key":"both @cyrus","Fragments":["and"]},{"Key":"@cyrus and","Fragments":["@cyrus"]},{"Key":"and @cyrus","Fragments":["for"]},{"Key":"@cyrus for","Fragments":["feedback."]},{"Key":"for feedback.","Fragments":["This"]},{"Key":"feedback. This","Fragments":["was"]},{"Key":"This was","Fragments":["my","a","way","actually","helpful.","an","pointed"]},{"Key":"submission to","Fragments":["Exercism","exercism,"]},{"Key":"to Exercism","Fragments":["and"]},{"Key":"Exercism and","Fragments":["happy"]},{"Key":"and happy","Fragments":["to"]},{"Key":"happy to","Fragments":["get","tear","learn"]},{"Key":"get such","Fragments":["quality"]},{"Key":"such quality","Fragments":["feedback,"]},{"Key":"quality feedback,","Fragments":["should"]},{"Key":"feedback, should","Fragments":["motivate"]},{"Key":"should motivate","Fragments":["me"]},{"Key":"motivate me","Fragments":["to"]},{"Key":"to continue","Fragments":["here."]},{"Key":"continue here.","Fragments":[":)"]},{"Key":" Coming","Fragments":["from","up"]},{"Key":"Coming from","Fragments":["a"]},{"Key":"a mostly","Fragments":["C"]},{"Key":"mostly C","Fragments":["background,"]},{"Key":"C background,","Fragments":["STL","so"]},{"Key":"background, STL","Fragments":["is"]},{"Key":"STL is","Fragments":["fairly","a"]},{"Key":"me. My","Fragments":["previous"]},{"Key":"previous experience","Fragments":["with","in"]},{"Key":"C++ was","Fragments":["just","not"]},{"Key":"as C","Fragments":["with"]},{"Key":"C with","Fragments":["Classes.","classes."]},{"Key":"with Classes.","Fragments":["Incorporating"]},{"Key":"Classes. Incorporating","Fragments":["most"]},{"Key":"Incorporating most","Fragments":["of"]},{"Key":"your suggestions","Fragments":["in","in","for","at","in"]},{"Key":"suggestions in","Fragments":["the","the","the"]},{"Key":"About keeping","Fragments":["the"]},{"Key":"string as","Fragments":["a","a","I've","well","a","it","a","a"]},{"Key":"value parameter,","Fragments":["I"]},{"Key":"tried the","Fragments":["suggestion"]},{"Key":"the suggestion","Fragments":["in","about","from","of","about"]},{"Key":"suggestion in","Fragments":["the","the"]},{"Key":"following way,","Fragments":["but"]},{"Key":"it leads","Fragments":["to"]},{"Key":"to couple","Fragments":["other","it"]},{"Key":"couple other","Fragments":["tests"]},{"Key":"other tests","Fragments":["failing.","don't"]},{"Key":"hey(const std::string","Fragments":["\u0026message)","\u0026string)\""]},{"Key":"std::string \u0026message)","Fragments":["{"]},{"Key":"auto end","Fragments":["=","="]},{"Key":"end =","Fragments":["message.find_last_not_of(\"","message.find_last_not_of(\"","0)"]},{"Key":"= message.find_last_not_of(\"","Fragments":["\\n\\r\\t\");","\\n\\r\\t\")"]},{"Key":"if (!end)","Fragments":["{"]},{"Key":" Since,","Fragments":["this"]},{"Key":"Since, this","Fragments":["was"]},{"Key":"submission and","Fragments":["I","I'm"]},{"Key":"already moved","Fragments":["forward"]},{"Key":"moved forward","Fragments":["with"]},{"Key":"forward with","Fragments":["second"]},{"Key":"with second","Fragments":["exercise,"]},{"Key":"second exercise,","Fragments":["I"]},{"Key":"exercise, I","Fragments":["am","love","also"]},{"Key":"am keeping","Fragments":["the"]},{"Key":"suggestion about","Fragments":["using","using"]},{"Key":"about using","Fragments":["const","them","`auto`","`const","class","`static_assert`","an","namespaces."]},{"Key":"using const","Fragments":["reference","\u0026","inputs","inputs","char","std::string"]},{"Key":"reference parameters","Fragments":["at","are"]},{"Key":"parameters at","Fragments":["the"]},{"Key":"the back","Fragments":["of","function","function"]},{"Key":"back of","Fragments":["my"]},{"Key":"my head","Fragments":["for","I","around","but","at","I"]},{"Key":"head for","Fragments":["future"]},{"Key":"for future","Fragments":["use.","enhancements","developers."]},{"Key":"Oh looks","Fragments":["like"]},{"Key":"that semicolon","Fragments":["is"]},{"Key":"semicolon is","Fragments":["not","not"]},{"Key":"not needed","Fragments":["at","and","at","for","for"]},{"Key":"needed at","Fragments":["the","all."]},{"Key":"a `namespace`","Fragments":["declaration.","but"]},{"Key":"the unneeded","Fragments":["assignment","namespace"]},{"Key":"unneeded assignment","Fragments":["in"]},{"Key":"assignment in","Fragments":["first","the","one"]},{"Key":"in first","Fragments":["line"]},{"Key":"of `hey`","Fragments":["and"]},{"Key":"`hey` and","Fragments":["the"]},{"Key":"the semicolon","Fragments":["to"]},{"Key":"semicolon to","Fragments":["end"]},{"Key":"to end","Fragments":["the","in"]},{"Key":"end the","Fragments":["`namespace`.","result","result"]},{"Key":"Yeah, that's","Fragments":["fine."]},{"Key":"fine. Constructing","Fragments":["one"]},{"Key":"Constructing one","Fragments":["copy"]},{"Key":"one copy","Fragments":["is","changes"]},{"Key":"a huge","Fragments":["deal.","deal","issue.","pet-peeve","number","issue.","gain","advantage","room"]},{"Key":"way, keep","Fragments":["in"]},{"Key":"keep in","Fragments":["mind","mind","mind"]},{"Key":"mind there's","Fragments":["a"]},{"Key":"big difference","Fragments":["between"]},{"Key":"the find","Fragments":["functions","free","inside","function"]},{"Key":"find functions","Fragments":["which"]},{"Key":"member of","Fragments":["string","`bob`?","class","`bob`."]},{"Key":"(which return","Fragments":["integer"]},{"Key":"return integer","Fragments":["indexes"]},{"Key":"integer indexes","Fragments":["into"]},{"Key":"indexes into","Fragments":["the"]},{"Key":"the string)","Fragments":["and","at"]},{"Key":"string) and","Fragments":["the"]},{"Key":"find free","Fragments":["functions"]},{"Key":"free functions","Fragments":["in","because","std::cbegin","instead","in","`bool"]},{"Key":"algorithm header","Fragments":["that","(I"]},{"Key":"that work","Fragments":["on","on"]},{"Key":"of containers","Fragments":["(and","that"]},{"Key":"containers (and","Fragments":["return"]},{"Key":"(and return","Fragments":["iterators)."]},{"Key":"In neither","Fragments":["case,"]},{"Key":"neither case,","Fragments":["though,"]},{"Key":"case, though,","Fragments":["would"]},{"Key":"though, would","Fragments":["!end"]},{"Key":"would !end","Fragments":["be"]},{"Key":"!end be","Fragments":["what"]},{"Key":"you want.","Fragments":["The","In"]},{"Key":"want. The","Fragments":["index"]},{"Key":"The index","Fragments":["evaluates"]},{"Key":"index evaluates","Fragments":["to"]},{"Key":"evaluates to","Fragments":["0","`true`","false,"]},{"Key":"0 if","Fragments":["the","word","a.size()","it's","it"]},{"Key":"last non-\"","Fragments":["\\n\\r\\t\""]},{"Key":"non-\" \\n\\r\\t\"","Fragments":["was"]},{"Key":"\\n\\r\\t\" was","Fragments":["found"]},{"Key":"was found","Fragments":["at"]},{"Key":"at index","Fragments":["0"]},{"Key":"index 0","Fragments":["(so"]},{"Key":"0 (so","Fragments":["for"]},{"Key":"(so for","Fragments":["example"]},{"Key":"string \"!\"),","Fragments":["and"]},{"Key":"\"!\"), and","Fragments":["only"]},{"Key":"that case.","Fragments":["If","The"]},{"Key":"case. If","Fragments":["there","you"]},{"Key":"was no","Fragments":["such","need","need","real"]},{"Key":"no such","Fragments":["character"]},{"Key":"such character","Fragments":["found"]},{"Key":"character found","Fragments":["it"]},{"Key":"found it","Fragments":["would","makes","most","matched","to"]},{"Key":"would return","Fragments":["std::string::npos","`true`.","\"Whatever.\"","a"]},{"Key":"return std::string::npos","Fragments":["which"]},{"Key":"std::string::npos which","Fragments":["is"]},{"Key":"as std::numeric_limits\u003cstd::string::size_type\u003e::max()","Fragments":["-"]},{"Key":"std::numeric_limits\u003cstd::string::size_type\u003e::max() -","Fragments":["it's"]},{"Key":"not zero","Fragments":["it's"]},{"Key":"zero it's","Fragments":["the"]},{"Key":"maximum possible","Fragments":["value"]},{"Key":"possible value","Fragments":["a"]},{"Key":"value a","Fragments":["(depends","constant"]},{"Key":"a (depends","Fragments":["on"]},{"Key":"your platform,","Fragments":["but"]},{"Key":"platform, but","Fragments":["for"]},{"Key":"for example)","Fragments":["64-bit"]},{"Key":"example) 64-bit","Fragments":["unsigned"]},{"Key":"64-bit unsigned","Fragments":["integer"]},{"Key":"unsigned integer","Fragments":["can","i","for"]},{"Key":"integer can","Fragments":["take."]},{"Key":"And iterators,","Fragments":["they"]},{"Key":"iterators, they","Fragments":["pretty"]},{"Key":"they pretty","Fragments":["much"]},{"Key":"much never","Fragments":["evaluate"]},{"Key":"never evaluate","Fragments":["to"]},{"Key":"evaluate to","Fragments":["false","false,"]},{"Key":"to false","Fragments":["unless"]},{"Key":"false unless","Fragments":["it's"]},{"Key":"unless it's","Fragments":["some","something"]},{"Key":"it's some","Fragments":["sort"]},{"Key":"some sort","Fragments":["of","of"]},{"Key":"of sentinel","Fragments":["iterator"]},{"Key":"sentinel iterator","Fragments":["like"]},{"Key":"iterator like","Fragments":["boost::filesystem::directory_iterator()."]},{"Key":"Yeah, that","Fragments":["got"]},{"Key":"me repeatedly","Fragments":["for"]},{"Key":"repeatedly for","Fragments":["years."]},{"Key":"for years.","Fragments":["But"]},{"Key":"years. But","Fragments":["it"]},{"Key":"of makes","Fragments":["sense"]},{"Key":"about what","Fragments":["you","`matches_lower`","the","constitutes","to"]},{"Key":"doing if","Fragments":["there","("]},{"Key":"there wasn't","Fragments":["an"]},{"Key":"wasn't an","Fragments":["immediate"]},{"Key":"an immediate","Fragments":["semicolon."]},{"Key":"immediate semicolon.","Fragments":["At"]},{"Key":"semicolon. At","Fragments":["the"]},{"Key":"class, no","Fragments":[";"]},{"Key":"no ;","Fragments":["?","needed."]},{"Key":"; ?","Fragments":["you're"]},{"Key":"? you're","Fragments":["declaring"]},{"Key":"you're declaring","Fragments":["a"]},{"Key":"declaring a","Fragments":["variable","static"]},{"Key":"a variable","Fragments":["of","but","that","changed","before","if","and","that"]},{"Key":"variable of","Fragments":["that"]},{"Key":"class type","Fragments":["right"]},{"Key":"type right","Fragments":["then"]},{"Key":"right then","Fragments":["and","and"]},{"Key":"then and","Fragments":["there.","there.","there"]},{"Key":"and there.","Fragments":["Like"]},{"Key":" class","Fragments":["K","hex{","bob","anagram"]},{"Key":"class K","Fragments":["{}"]},{"Key":"K {}","Fragments":["my_k;"]},{"Key":" At","Fragments":["the","least","this","this","which","first","this","first","line","line","this","the"]},{"Key":"a namespace...","Fragments":["what?"]},{"Key":"namespace... what?","Fragments":["There's"]},{"Key":"what? There's","Fragments":["nothing"]},{"Key":"There's nothing","Fragments":["that","here"]},{"Key":"nothing that","Fragments":["could"]},{"Key":"could reasonably","Fragments":["be"]},{"Key":"reasonably be","Fragments":["a"]},{"Key":"a part","Fragments":["of","of","of","of"]},{"Key":"that, so","Fragments":["there's","that"]},{"Key":"so there's","Fragments":["no","a","no","no","that.."]},{"Key":" Boost","Fragments":["has","rocks!","is","tokenizer"]},{"Key":"Boost has","Fragments":["a"]},{"Key":"a to_lower","Fragments":["in"]},{"Key":"to_lower in","Fragments":["algorithm/string"]},{"Key":"in algorithm/string","Fragments":["that"]},{"Key":"algorithm/string that","Fragments":["does"]},{"Key":"does what","Fragments":["your","you","it's"]},{"Key":"what your","Fragments":["downcase","question"]},{"Key":"your downcase","Fragments":["does."]},{"Key":"downcase does.","Fragments":["Not"]},{"Key":"does. Not","Fragments":["that"]},{"Key":"there's anything","Fragments":["wrong"]},{"Key":"anything wrong","Fragments":["with","with","with","with","in"]},{"Key":"with writing","Fragments":["your"]},{"Key":"your own,","Fragments":["especially","to"]},{"Key":"own, especially","Fragments":["given"]},{"Key":"the straightforward","Fragments":["way","implementation"]},{"Key":"straightforward way","Fragments":["you"]},{"Key":"did it,","Fragments":["I"]},{"Key":"to point","Fragments":["out","out","out","them"]},{"Key":"Your loop","Fragments":["could"]},{"Key":"loop could","Fragments":["also","get","be","however"]},{"Key":"could also","Fragments":["be","write","use","try","be","use","check","use","be","use"]},{"Key":"a std::for_each,","Fragments":["but"]},{"Key":"std::for_each, but","Fragments":["honestly"]},{"Key":"but honestly","Fragments":["I","i"]},{"Key":"honestly I","Fragments":["think"]},{"Key":"way might","Fragments":["be"]},{"Key":"slightly better.","Fragments":["Pretty"]},{"Key":"better. Pretty","Fragments":["comparable"]},{"Key":"Pretty comparable","Fragments":["anyhow."]},{"Key":"* Added","Fragments":["a","helper"]},{"Key":"Added a","Fragments":["`typedef","test","check"]},{"Key":"a `typedef","Fragments":["std::map\u003cstd::string,"]},{"Key":"`typedef std::map\u003cstd::string,","Fragments":["int\u003e"]},{"Key":"std::map\u003cstd::string, int\u003e","Fragments":["histogram;`"]},{"Key":"int\u003e histogram;`","Fragments":["inside"]},{"Key":"histogram;` inside","Fragments":["namespace"]},{"Key":"inside namespace","Fragments":["`word_count`,","in"]},{"Key":"* replaced","Fragments":["every"]},{"Key":"replaced every","Fragments":["occurence"]},{"Key":"every occurence","Fragments":["of","of"]},{"Key":"occurence of","Fragments":["`std::map\u003cstd::string,","the","all","this"]},{"Key":"of `std::map\u003cstd::string,","Fragments":["int\u003e`"]},{"Key":"`std::map\u003cstd::string, int\u003e`","Fragments":["with","is"]},{"Key":"int\u003e` with","Fragments":["`word_count::histogram`/`histogram`"]},{"Key":"with `word_count::histogram`/`histogram`","Fragments":["(depending"]},{"Key":"`word_count::histogram`/`histogram` (depending","Fragments":["on"]},{"Key":"there any","Fragments":["reason","difference","reason","reason","clear","clear"]},{"Key":"have `static","Fragments":["bool"]},{"Key":"`static bool","Fragments":["is_apostrophe(const"]},{"Key":"bool is_apostrophe(const","Fragments":["std::string"]},{"Key":"is_apostrophe(const std::string","Fragments":["\u0026str);`"]},{"Key":"std::string \u0026str);`","Fragments":["publicly"]},{"Key":"\u0026str);` publicly","Fragments":["visible?"]},{"Key":"* Perhaps","Fragments":["adding"]},{"Key":"Perhaps adding","Fragments":["some"]},{"Key":"some whitespace","Fragments":["would"]},{"Key":"whitespace would","Fragments":["make"]},{"Key":"clear where","Fragments":["one"]},{"Key":"where one","Fragments":["function","begins"]},{"Key":"function ends","Fragments":["and"]},{"Key":"ends and","Fragments":["the"]},{"Key":"other one","Fragments":["starts.","`vector\u003c\u003e","for","only"]},{"Key":"one starts.","Fragments":["I'd"]},{"Key":"starts. I'd","Fragments":["recommomend"]},{"Key":"I'd recommomend","Fragments":["at"]},{"Key":"recommomend at","Fragments":["least"]},{"Key":"least a","Fragments":["blank"]},{"Key":"a blank","Fragments":["line","response."]},{"Key":"blank line","Fragments":["between"]},{"Key":"line between","Fragments":["functions."]},{"Key":"* `mymap_t`","Fragments":["is"]},{"Key":"`mymap_t` is","Fragments":["not"]},{"Key":"good name,","Fragments":["even"]},{"Key":"name, even","Fragments":["if"]},{"Key":"if `std::map\u003cstd::string,","Fragments":["int\u003e`"]},{"Key":"int\u003e` is","Fragments":["very"]},{"Key":"and annoying","Fragments":["to"]},{"Key":"annoying to","Fragments":["type,"]},{"Key":"to type,","Fragments":["its"]},{"Key":"type, its","Fragments":["purpose"]},{"Key":"its purpose","Fragments":["is","very"]},{"Key":"purpose is","Fragments":["much"]},{"Key":"clear than","Fragments":["`mymap_t`.","it","building"]},{"Key":"than `mymap_t`.","Fragments":["So"]},{"Key":"`mymap_t`. So","Fragments":["either"]},{"Key":"So either","Fragments":["you","my"]},{"Key":"either you","Fragments":["should"]},{"Key":"better name","Fragments":["in","for","for","for"]},{"Key":"the `typedef`","Fragments":["or"]},{"Key":"`typedef` or","Fragments":["ommit"]},{"Key":"or ommit","Fragments":["it"]},{"Key":"ommit it","Fragments":["completely."]},{"Key":"right, the","Fragments":["``if``"]},{"Key":"the ``if``","Fragments":["condition"]},{"Key":"``if`` condition","Fragments":["is"]},{"Key":"readable. It","Fragments":["is"]},{"Key":"also mixed","Fragments":["with"]},{"Key":"a fast","Fragments":["path"]},{"Key":"fast path","Fragments":["for"]},{"Key":"path for","Fragments":["a"]},{"Key":"string consisting","Fragments":["only"]},{"Key":"consisting only","Fragments":["of"]},{"Key":"only of","Fragments":["zeros"]},{"Key":"of zeros","Fragments":["(which"]},{"Key":"zeros (which","Fragments":["only"]},{"Key":"(which only","Fragments":["works"]},{"Key":"only works","Fragments":["because","with","on","on","because"]},{"Key":"error result","Fragments":["is"]},{"Key":"result is","Fragments":["the","compared","identical","what","correct.","the"]},{"Key":"also prefer","Fragments":["``++result``"]},{"Key":"prefer ``++result``","Fragments":["in"]},{"Key":"``++result`` in","Fragments":["C++."]},{"Key":"C++. I","Fragments":["did","just","don't"]},{"Key":"some Javascript","Fragments":["recently"]},{"Key":"Javascript recently","Fragments":["where"]},{"Key":"recently where","Fragments":["*jslint*","he"]},{"Key":"where *jslint*","Fragments":["wants"]},{"Key":"*jslint* wants","Fragments":["the"]},{"Key":"wants the","Fragments":["``+="]},{"Key":"the ``+=","Fragments":["1``"]},{"Key":"``+= 1``","Fragments":["variant."]},{"Key":"1`` variant.","Fragments":["Thanks"]},{"Key":"variant. Thanks","Fragments":["for"]},{"Key":" Pulling","Fragments":["everything"]},{"Key":"Pulling everything","Fragments":["into"]},{"Key":"everything into","Fragments":["global"]},{"Key":"into global","Fragments":["scope"]},{"Key":"global scope","Fragments":["what","like","in"]},{"Key":"scope what","Fragments":["is"]},{"Key":"in `std`,","Fragments":["`boost`,"]},{"Key":"`std`, `boost`,","Fragments":["and"]},{"Key":"`boost`, and","Fragments":["`boost::algorith`"]},{"Key":"and `boost::algorith`","Fragments":["is"]},{"Key":"`boost::algorith` is","Fragments":["quite"]},{"Key":"a lot.","Fragments":["And","I'm","It","Declaring","It","Will","But"]},{"Key":"lot. And","Fragments":["everyone"]},{"Key":"And everyone","Fragments":["who"]},{"Key":"who uses","Fragments":["your","it"]},{"Key":"uses your","Fragments":["“lib”"]},{"Key":"your “lib”","Fragments":["has"]},{"Key":"“lib” has","Fragments":["to"]},{"Key":"to cope","Fragments":["with"]},{"Key":"cope with","Fragments":["it."]},{"Key":"it. You","Fragments":["should","are","should","duplicated"]},{"Key":"should move","Fragments":["the"]},{"Key":"the `using`s","Fragments":["into"]},{"Key":"`using`s into","Fragments":["the"]},{"Key":"interesting take","Fragments":["on"]},{"Key":"take on","Fragments":["it.","that?","the","the"]},{"Key":"had always","Fragments":["had"]},{"Key":"always had","Fragments":["it"]},{"Key":"it explained","Fragments":["that"]},{"Key":"explained that","Fragments":["namespaces"]},{"Key":"that namespaces","Fragments":["didn't"]},{"Key":"namespaces didn't","Fragments":["have"]},{"Key":"a semi-colon","Fragments":["after","because"]},{"Key":"semi-colon after","Fragments":["them"]},{"Key":"after them","Fragments":["because"]},{"Key":"them because","Fragments":["they"]},{"Key":"be closed.","Fragments":["That"]},{"Key":"closed. That","Fragments":["is,"]},{"Key":"That is,","Fragments":["you","I","we","one"]},{"Key":"is, you","Fragments":["can"]},{"Key":"have more","Fragments":["code"]},{"Key":"code somewhere","Fragments":["else"]},{"Key":"else that","Fragments":["is","excludes"]},{"Key":"is part","Fragments":["of","of","of"]},{"Key":" Classes","Fragments":["on"]},{"Key":"Classes on","Fragments":["the"]},{"Key":"hand can","Fragments":["only","be"]},{"Key":"declared once.","Fragments":["It"]},{"Key":"once. It","Fragments":["makes"]},{"Key":"semi-colon because","Fragments":["the"]},{"Key":"the declaration","Fragments":["ends","of","of","of","should","is","inside"]},{"Key":"declaration ends","Fragments":["at"]},{"Key":"ends at","Fragments":["that"]},{"Key":"pretty happy","Fragments":["with","with"]},{"Key":"this turned","Fragments":["out."]},{"Key":"turned out.","Fragments":["The"]},{"Key":"out. The","Fragments":["one"]},{"Key":"The one","Fragments":["thing","other","thing","object","other","good"]},{"Key":"thing I'm","Fragments":["not","not"]},{"Key":"too keen","Fragments":["on"]},{"Key":"on is","Fragments":["the","that","the"]},{"Key":"check at","Fragments":["the","line"]},{"Key":"beginning. The","Fragments":["way"]},{"Key":"way it's","Fragments":["implemented","currently"]},{"Key":"it's implemented","Fragments":["limits"]},{"Key":"implemented limits","Fragments":["the"]},{"Key":"functionality such","Fragments":["that"]},{"Key":"only containers","Fragments":["with"]},{"Key":"containers with","Fragments":["random"]},{"Key":"with random","Fragments":["access"]},{"Key":"random access","Fragments":["iterators"]},{"Key":"access iterators","Fragments":["will"]},{"Key":"iterators will","Fragments":["work."]},{"Key":"While writing","Fragments":["this"]},{"Key":"was checking","Fragments":["my"]},{"Key":"checking my","Fragments":["preferred","code."]},{"Key":"preferred STL","Fragments":["reference"]},{"Key":"STL reference","Fragments":["and"]},{"Key":"found this","Fragments":["(http://www.cplusplus.com/reference/iterator/distance/)","one","project","project","out","project"]},{"Key":"this (http://www.cplusplus.com/reference/iterator/distance/)","Fragments":["which"]},{"Key":"(http://www.cplusplus.com/reference/iterator/distance/) which","Fragments":["does"]},{"Key":"which does","Fragments":["exactly","run","something","something","not","not","just"]},{"Key":"does exactly","Fragments":["what","what","what"]},{"Key":" Incremental","Fragments":["improvement"]},{"Key":"Incremental improvement","Fragments":["over"]},{"Key":"improvement over","Fragments":["my","my"]},{"Key":"over my","Fragments":["previous","submission","first","aversion"]},{"Key":"previous revision.","Fragments":["Just"]},{"Key":"revision. Just","Fragments":["changed"]},{"Key":"Just changed","Fragments":["to"]},{"Key":"STL function","Fragments":["distance()"]},{"Key":"function distance()","Fragments":["to"]},{"Key":"distance() to","Fragments":["compute"]},{"Key":"the lengths","Fragments":["of","of","*after*"]},{"Key":"lengths of","Fragments":["the","the"]},{"Key":"the genomes.","Fragments":["This"]},{"Key":"genomes. This","Fragments":["expands"]},{"Key":"This expands","Fragments":["the"]},{"Key":"expands the","Fragments":["usability"]},{"Key":"the usability","Fragments":["of"]},{"Key":"usability of","Fragments":["the"]},{"Key":"the solution,","Fragments":["while","and","thanks"]},{"Key":"solution, while","Fragments":["maintaining"]},{"Key":"while maintaining","Fragments":["performance"]},{"Key":"maintaining performance","Fragments":["where"]},{"Key":"performance where","Fragments":["possible."]},{"Key":"a good,","Fragments":["clean"]},{"Key":"good, clean","Fragments":["solution"]},{"Key":"clean solution","Fragments":["for"]},{"Key":"that handling","Fragments":["the"]},{"Key":"bit ugly.","Fragments":["Check"]},{"Key":"ugly. Check","Fragments":["out"]},{"Key":"algorithms that","Fragments":["boost"]},{"Key":"that boost","Fragments":["has","uses","library."]},{"Key":"boost has","Fragments":["to"]},{"Key":"also save","Fragments":["yourself"]},{"Key":"yourself an","Fragments":["iteration"]},{"Key":"string (or","Fragments":["most"]},{"Key":"(or most","Fragments":["of"]},{"Key":"of it)","Fragments":["if"]},{"Key":"it) if","Fragments":["you"]},{"Key":"you pull","Fragments":["the"]},{"Key":"pull the","Fragments":["code","creation","int"]},{"Key":"to normalize","Fragments":["the"]},{"Key":"normalize the","Fragments":["case"]},{"Key":"case out","Fragments":["of","of"]},{"Key":"One more","Fragments":["point.","possibility","thing,"]},{"Key":"more point.","Fragments":["map"]},{"Key":"point. map","Fragments":["will"]},{"Key":"will default","Fragments":["numeric","to"]},{"Key":"default numeric","Fragments":["value"]},{"Key":"numeric value","Fragments":["types","types"]},{"Key":"value types","Fragments":["to","will"]},{"Key":"types to","Fragments":["0"]},{"Key":"0 (even","Fragments":["in"]},{"Key":"(even in","Fragments":["release)."]},{"Key":"in release).","Fragments":["So"]},{"Key":"release). So","Fragments":["if"]},{"Key":"So if","Fragments":["you","`c`","you're","you","we","it's"]},{"Key":"operator for","Fragments":["a"]},{"Key":"key that","Fragments":["doesn't"]},{"Key":"set the","Fragments":["value","reply","type"]},{"Key":"0 for","Fragments":["you.","non-existent","ints."]},{"Key":"been doing","Fragments":["ruby"]},{"Key":"doing ruby","Fragments":["on"]},{"Key":"ruby on","Fragments":["exercism"]},{"Key":"on exercism","Fragments":["where"]},{"Key":"exercism where","Fragments":["++a"]},{"Key":"where ++a","Fragments":["_does_"]},{"Key":"++a _does_","Fragments":["exist"]},{"Key":"_does_ exist","Fragments":["but"]},{"Key":"exist but","Fragments":["doesn't"]},{"Key":"I want,","Fragments":["as"]},{"Key":"want, as","Fragments":["I"]},{"Key":"learned the","Fragments":["hard"]},{"Key":"hard way","Fragments":["(it's","myself"]},{"Key":"way (it's","Fragments":["+(+a)"]},{"Key":"(it's +(+a)","Fragments":["aka"]},{"Key":"+(+a) aka","Fragments":["a)."]},{"Key":"* **`split()`","Fragments":["helper**:"]},{"Key":"**`split()` helper**:","Fragments":["It"]},{"Key":"helper**: It","Fragments":["was"]},{"Key":"was copied","Fragments":["as"]},{"Key":"copied as","Fragments":["a","is"]},{"Key":"pair from","Fragments":["SO"]},{"Key":"from SO","Fragments":[":)"]},{"Key":"SO :)","Fragments":["Perhaps"]},{"Key":":) Perhaps","Fragments":["I"]},{"Key":"Perhaps I","Fragments":["could"]},{"Key":"could manually","Fragments":["inline"]},{"Key":"manually inline","Fragments":["it,"]},{"Key":"inline it,","Fragments":["but"]},{"Key":"but wouldn't","Fragments":["help"]},{"Key":"wouldn't help","Fragments":["me"]},{"Key":"help me","Fragments":["that","remember","here.","in"]},{"Key":"why one","Fragments":["is"]},{"Key":"is `vector\u003c\u003e`","Fragments":["and"]},{"Key":"`vector\u003c\u003e` and","Fragments":["the"]},{"Key":"one `vector\u003c\u003e","Fragments":["\u0026`"]},{"Key":"* **boost**:","Fragments":["Nope!"]},{"Key":"**boost**: Nope!","Fragments":["The"]},{"Key":"Nope! The","Fragments":["exercises"]},{"Key":"exercises are","Fragments":["using"]},{"Key":"for unittesting,","Fragments":["OK."]},{"Key":"unittesting, OK.","Fragments":["But"]},{"Key":"anything outside","Fragments":["of"]},{"Key":"of `std`","Fragments":["for"]},{"Key":"`std` for","Fragments":["this"]},{"Key":"this exercises.","Fragments":["I"]},{"Key":"exercises. I","Fragments":["want"]},{"Key":"learn C++,","Fragments":["not"]},{"Key":"* **copying**:","Fragments":["Comming"]},{"Key":"**copying**: Comming","Fragments":["mostly"]},{"Key":"Comming mostly","Fragments":["from"]},{"Key":"mostly from","Fragments":["languages"]},{"Key":"from languages","Fragments":["which"]},{"Key":"languages which","Fragments":["are"]},{"Key":"either immutable","Fragments":["(Haskell)"]},{"Key":"immutable (Haskell)","Fragments":["or"]},{"Key":"(Haskell) or","Fragments":["do"]},{"Key":"do call-by-ref","Fragments":["unless"]},{"Key":"call-by-ref unless","Fragments":["you"]},{"Key":"unless you","Fragments":["tell","believe","went","are","need","will"]},{"Key":"tell them","Fragments":["to","apart."]},{"Key":"copy (Java,","Fragments":["Ruby),"]},{"Key":"(Java, Ruby),","Fragments":["I"]},{"Key":"Ruby), I","Fragments":["just"]},{"Key":"just forgot","Fragments":["to","to"]},{"Key":"to annotate","Fragments":["parameters"]},{"Key":"annotate parameters","Fragments":["to"]},{"Key":"be ref","Fragments":["ones."]},{"Key":"* **default","Fragments":["values**:"]},{"Key":"**default values**:","Fragments":["Wow!"]},{"Key":"values**: Wow!","Fragments":["I"]},{"Key":"Wow! I","Fragments":["had","had"]},{"Key":"had never","Fragments":["thought"]},{"Key":"never thought","Fragments":["about"]},{"Key":"about relying","Fragments":["on"]},{"Key":"on default","Fragments":["values","constructor."]},{"Key":"C++, after","Fragments":["my"]},{"Key":"after my","Fragments":["C"]},{"Key":"my C","Fragments":["lessons","programming"]},{"Key":"C lessons","Fragments":["last","during"]},{"Key":"lessons last","Fragments":["semester"]},{"Key":"last semester","Fragments":["where"]},{"Key":"semester where","Fragments":["about"]},{"Key":"where about","Fragments":["every"]},{"Key":"about every","Fragments":["other","subtle"]},{"Key":"every other","Fragments":["sentence","member"]},{"Key":"other sentence","Fragments":["in"]},{"Key":"sentence in","Fragments":["our"]},{"Key":"in our","Fragments":["documentation"]},{"Key":"our documentation","Fragments":["was"]},{"Key":"documentation was","Fragments":["\"behaviour"]},{"Key":"was \"behaviour","Fragments":["under"]},{"Key":"\"behaviour under","Fragments":["\u003cevery"]},{"Key":"under \u003cevery","Fragments":["day"]},{"Key":"\u003cevery day","Fragments":["circumstances\u003e"]},{"Key":"day circumstances\u003e","Fragments":["undefined\""]},{"Key":"circumstances\u003e undefined\"","Fragments":[":)"]},{"Key":"* **variable","Fragments":["declaration"]},{"Key":"**variable declaration","Fragments":["before"]},{"Key":"declaration before","Fragments":["using**:"]},{"Key":"before using**:","Fragments":["A"]},{"Key":"using**: A","Fragments":["habit"]},{"Key":"A habit","Fragments":["from"]},{"Key":"habit from","Fragments":["our"]},{"Key":"from our","Fragments":["C"]},{"Key":"our C","Fragments":["lessons"]},{"Key":"lessons during","Fragments":["winter,"]},{"Key":"during winter,","Fragments":["we"]},{"Key":"winter, we","Fragments":["were"]},{"Key":"were forced","Fragments":["to"]},{"Key":"use `-Wall","Fragments":["-ansi"]},{"Key":"`-Wall -ansi","Fragments":["-pedantic`"]},{"Key":"into most","Fragments":["of"]},{"Key":"these and","Fragments":["submit"]},{"Key":"and submit","Fragments":["a","both","your"]},{"Key":"submit a","Fragments":["new","more"]},{"Key":"iteration until","Fragments":["weekend"]},{"Key":"until weekend","Fragments":["(except"]},{"Key":"weekend (except","Fragments":["the"]},{"Key":"(except the","Fragments":["boost","literal"]},{"Key":"std::pow returns","Fragments":["a","a"]},{"Key":"a double,","Fragments":["right?","right?"]},{"Key":"double, right?","Fragments":["\"If"]},{"Key":"right? \"If","Fragments":["any"]},{"Key":"\"If any","Fragments":["argument"]},{"Key":"any argument","Fragments":["has"]},{"Key":"argument has","Fragments":["integral","type"]},{"Key":"has integral","Fragments":["type,"]},{"Key":"integral type,","Fragments":["it"]},{"Key":"type, it","Fragments":["is","does't"]},{"Key":"is cast","Fragments":["to"]},{"Key":"So std::pow(3,","Fragments":["i++)"]},{"Key":"std::pow(3, i++)","Fragments":["is"]},{"Key":"i++) is","Fragments":["a"]},{"Key":"char *","Fragments":["double","case.","converts","const"]},{"Key":"* double","Fragments":["is"]},{"Key":"double is","Fragments":["double","double"]},{"Key":"int +","Fragments":["double"]},{"Key":"+ double","Fragments":["is"]},{"Key":"is accumulate","Fragments":["casting","casting"]},{"Key":"accumulate casting","Fragments":["it","it"]},{"Key":"casting it","Fragments":["back","back"]},{"Key":"back down","Fragments":["to","to"]},{"Key":"to int,","Fragments":["or","or"]},{"Key":"int, or","Fragments":["is","is"]},{"Key":"or is","Fragments":["it","it","empty?","better","it"]},{"Key":"it waiting","Fragments":["until","until"]},{"Key":"waiting until","Fragments":["it's","it's"]},{"Key":"until it's","Fragments":["time","time"]},{"Key":"it's time","Fragments":["to","to"]},{"Key":" Anyhow,","Fragments":["I","right"]},{"Key":"Anyhow, I","Fragments":["think","think"]},{"Key":"think doing","Fragments":["so"]},{"Key":"doing so","Fragments":["much"]},{"Key":"much doulble-precision","Fragments":["floating-point"]},{"Key":"doulble-precision floating-point","Fragments":["math"]},{"Key":"math is","Fragments":["rather","really,"]},{"Key":"is rather","Fragments":["unfortunate","slow."]},{"Key":"rather unfortunate","Fragments":["since"]},{"Key":"unfortunate since","Fragments":["fractions"]},{"Key":"since fractions","Fragments":["are"]},{"Key":"fractions are","Fragments":["not"]},{"Key":"not possible.","Fragments":["Since","Since"]},{"Key":"possible. Since","Fragments":["you're","there's"]},{"Key":"you're already","Fragments":["binding","using","using"]},{"Key":"already binding","Fragments":["i"]},{"Key":"binding i","Fragments":["by-ref"]},{"Key":"i by-ref","Fragments":["(by"]},{"Key":"by-ref (by","Fragments":["the"]},{"Key":"(by the","Fragments":["way,","way"]},{"Key":"way, it's","Fragments":["probably","really"]},{"Key":"probably slightly","Fragments":["better","better"]},{"Key":"slightly better","Fragments":["practice","practice","habit"]},{"Key":"better practice","Fragments":["to","to"]},{"Key":"do [\u0026i]","Fragments":["than","than"]},{"Key":"[\u0026i] than","Fragments":["[\u0026]","[\u0026]"]},{"Key":"than [\u0026]","Fragments":["just","just"]},{"Key":"[\u0026] just","Fragments":["in","in"]},{"Key":"just in","Fragments":["case","case","case"]},{"Key":"case you","Fragments":["use","use","just","would","can","could"]},{"Key":"use s","Fragments":["by","by"]},{"Key":"s by","Fragments":["accident","accident"]},{"Key":"by accident","Fragments":["or","or","rather"]},{"Key":"accident or","Fragments":["something","something"]},{"Key":"like that),","Fragments":["why"]},{"Key":"that), why","Fragments":["not"]},{"Key":"have i","Fragments":["store","store"]},{"Key":"i store","Fragments":["the","the"]},{"Key":"the pow","Fragments":["instead?","instead?"]},{"Key":"pow instead?","Fragments":["I"]},{"Key":"instead? I","Fragments":["guess"]},{"Key":"guess that's","Fragments":["not"]},{"Key":"not simple","Fragments":["to"]},{"Key":"in one-line","Fragments":["since"]},{"Key":"one-line since","Fragments":["there's"]},{"Key":"since there's","Fragments":["no","a","not","no"]},{"Key":"no i","Fragments":["*="]},{"Key":"i *=","Fragments":["3","3;","16"]},{"Key":"*= 3","Fragments":["that"]},{"Key":"3 that","Fragments":["returns"]},{"Key":"of i","Fragments":["prior","I"]},{"Key":"i prior","Fragments":["to"]},{"Key":"auto would","Fragments":["be"]},{"Key":"be prettier","Fragments":["and"]},{"Key":"prettier and","Fragments":["less"]},{"Key":"less maintenance","Fragments":["work"]},{"Key":"maintenance work","Fragments":["than"]},{"Key":"work than","Fragments":["std::string::const_reverse_iterator"]},{"Key":"making explicit","Fragments":["use"]},{"Key":"explicit use","Fragments":["of"]},{"Key":"i I","Fragments":["would"]},{"Key":": str","Fragments":[")"]},{"Key":"result *=","Fragments":["3;","3;"]},{"Key":" switch","Fragments":["("]},{"Key":"switch (","Fragments":["c"]},{"Key":"( c","Fragments":[")"]},{"Key":" Seems","Fragments":["a"]},{"Key":"Seems a","Fragments":["touch"]},{"Key":"a touch","Fragments":["cleaner","cleaner","more"]},{"Key":"touch cleaner","Fragments":["to","if"]},{"Key":"cleaner to","Fragments":["me,","have","simply"]},{"Key":"I'd bet","Fragments":["it","money","this"]},{"Key":"bet it","Fragments":["performs"]},{"Key":"it performs","Fragments":["either"]},{"Key":"performs either","Fragments":["identically"]},{"Key":"either identically","Fragments":["or"]},{"Key":"identically or","Fragments":["close"]},{"Key":"or close","Fragments":["to"]},{"Key":"it (unless","Fragments":["you"]},{"Key":"(unless you","Fragments":["turn"]},{"Key":"for might","Fragments":["be"]},{"Key":"an iota","Fragments":["faster?)."]},{"Key":"would consider","Fragments":["\"1!?\"","that","renaming","using"]},{"Key":"consider \"1!?\"","Fragments":["and"]},{"Key":"\"1!?\" and","Fragments":["\"199\""]},{"Key":"and \"199\"","Fragments":["to"]},{"Key":"\"199\" to","Fragments":["be"]},{"Key":"be invalid","Fragments":["and","for"]},{"Key":"invalid and","Fragments":["therefore"]},{"Key":"therefore they","Fragments":["should"]},{"Key":"return 0,","Fragments":["and"]},{"Key":"solution does","Fragments":["that.","not"]},{"Key":"does that.","Fragments":["isalpha"]},{"Key":"that. isalpha","Fragments":["isn't"]},{"Key":"isalpha isn't","Fragments":["broad"]},{"Key":"isn't broad","Fragments":["enough."]},{"Key":" to_decimal","Fragments":["is"]},{"Key":"to_decimal is","Fragments":["risking"]},{"Key":"is risking","Fragments":["a"]},{"Key":"risking a","Fragments":["linker"]},{"Key":"a linker","Fragments":["error"]},{"Key":"linker error","Fragments":["if"]},{"Key":"error if","Fragments":["two","the"]},{"Key":"same program.","Fragments":["Either","It's"]},{"Key":"program. Either","Fragments":["its"]},{"Key":"Either its","Fragments":["body"]},{"Key":"its body","Fragments":["should"]},{"Key":"body should","Fragments":["be"]},{"Key":"or you","Fragments":["should","could","could","can"]},{"Key":"should \"fix\"","Fragments":["it"]},{"Key":"\"fix\" it","Fragments":["in"]},{"Key":"header, most","Fragments":["likely"]},{"Key":"likely by","Fragments":["using"]},{"Key":"the keyword","Fragments":["inline","constexpr,","inline,","```inline```."]},{"Key":"keyword inline","Fragments":["(anonymous"]},{"Key":"inline (anonymous","Fragments":["namespace"]},{"Key":"(anonymous namespace","Fragments":["or"]},{"Key":"namespace or","Fragments":["static","a","even","better","the","the","removed","importing"]},{"Key":"or static","Fragments":["would"]},{"Key":"static would","Fragments":["be"]},{"Key":"be options","Fragments":["too)."]},{"Key":"std; is","Fragments":["generally"]},{"Key":"is generally","Fragments":["a","discouraged","easier"]},{"Key":"generally a","Fragments":["bad"]},{"Key":"bad idea,","Fragments":["but","if"]},{"Key":"but using","Fragments":["it"]},{"Key":"it way","Fragments":["up"]},{"Key":"way up","Fragments":["there"]},{"Key":"up there","Fragments":["is","will"]},{"Key":"of rude.","Fragments":["Now"]},{"Key":"rude. Now","Fragments":["if"]},{"Key":"include your","Fragments":["header","header","header"]},{"Key":"header I","Fragments":["have","think."]},{"Key":"the dozens","Fragments":["of"]},{"Key":"dozens of","Fragments":["collisions"]},{"Key":"collisions between","Fragments":["std"]},{"Key":"between std","Fragments":["and"]},{"Key":"boost, at","Fragments":["the"]},{"Key":"very least.","Fragments":["If"]},{"Key":"least. If","Fragments":["you"]},{"Key":"you move","Fragments":["it","to","them"]},{"Key":"namespace then","Fragments":["it's"]},{"Key":"then it's","Fragments":["pretty","a","not","not","probably"]},{"Key":"pretty safe","Fragments":["for"]},{"Key":"safe for","Fragments":["your"]},{"Key":"your caller","Fragments":["(unless","does","to"]},{"Key":"caller (unless","Fragments":["they"]},{"Key":"(unless they","Fragments":["using"]},{"Key":"they using","Fragments":["namespace"]},{"Key":"namespace trinary,","Fragments":["which"]},{"Key":"trinary, which","Fragments":["they"]},{"Key":"which they","Fragments":["shouldn't)"]},{"Key":"they shouldn't)","Fragments":["-"]},{"Key":"shouldn't) -","Fragments":["it"]},{"Key":"for weird","Fragments":["things"]},{"Key":"weird things","Fragments":["like"]},{"Key":"like trinary::next_permutation","Fragments":["but"]},{"Key":"trinary::next_permutation but","Fragments":["whatever."]},{"Key":"but whatever.","Fragments":["Moving"]},{"Key":"whatever. Moving","Fragments":["it"]},{"Key":"even better,","Fragments":["but","create"]},{"Key":"then you'd","Fragments":["have"]},{"Key":"write std::string","Fragments":["for"]},{"Key":"your parameter","Fragments":["type.","doesn't","names"]},{"Key":"No header","Fragments":["in"]},{"Key":"header in","Fragments":["the","the","the","CMakeLists.txt).","my"]},{"Key":"C++ standard","Fragments":["library","that","proposal","library","library","rather"]},{"Key":"library has","Fragments":[".h"]},{"Key":"has .h","Fragments":["on"]},{"Key":".h on","Fragments":["the"]},{"Key":"it. You're","Fragments":["supposed"]},{"Key":"You're supposed","Fragments":["to"]},{"Key":"include them","Fragments":["by"]},{"Key":"them by","Fragments":["way","mistake."]},{"Key":"by way","Fragments":["of"]},{"Key":"the cx","Fragments":["versions"]},{"Key":"cx versions","Fragments":["(cctype"]},{"Key":"versions (cctype","Fragments":["cstdlib"]},{"Key":"(cctype cstdlib","Fragments":["etc)."]},{"Key":"cstdlib etc).","Fragments":["It"]},{"Key":"etc). It","Fragments":["might","would"]},{"Key":"be safe","Fragments":["most","99%"]},{"Key":"safe most","Fragments":["of"]},{"Key":"time since","Fragments":["they're","I"]},{"Key":"since they're","Fragments":["by","constants,","all","vastly"]},{"Key":"they're by","Fragments":["standard"]},{"Key":"by standard","Fragments":["pulling"]},{"Key":"standard pulling","Fragments":["in"]},{"Key":"pulling in","Fragments":["stuff"]},{"Key":"in stuff","Fragments":["from"]},{"Key":"C standard","Fragments":["with","library's","library","library"]},{"Key":"standard with","Fragments":["the","super-strict"]},{"Key":"you specify,","Fragments":["but"]},{"Key":"specify, but","Fragments":["watch"]},{"Key":"but watch","Fragments":["out"]},{"Key":"watch out","Fragments":["for:","in"]},{"Key":" X.h","Fragments":["version","might"]},{"Key":"X.h version","Fragments":["might"]},{"Key":"version might","Fragments":["not","be"]},{"Key":"std because","Fragments":["it"]},{"Key":"meant for","Fragments":["C","C"]},{"Key":"X.h might","Fragments":["not"]},{"Key":"not extern","Fragments":["\"C\""]},{"Key":"extern \"C\"","Fragments":["them"]},{"Key":"\"C\" them","Fragments":["for"]},{"Key":"them for","Fragments":["you,","you"]},{"Key":"for you,","Fragments":["since"]},{"Key":"you, since","Fragments":["it"]},{"Key":"honestly had","Fragments":["to"]},{"Key":"lookup tgmath.h","Fragments":["because"]},{"Key":"tgmath.h because","Fragments":["I"]},{"Key":"just had","Fragments":["no","one"]},{"Key":"had no","Fragments":["idea","desire","Idea"]},{"Key":"idea what","Fragments":["it","stdexcept","```|=```","good","this"]},{"Key":"it was.","Fragments":["It"]},{"Key":"was. It","Fragments":["wasn't"]},{"Key":"wasn't in","Fragments":["my"]},{"Key":"my normal","Fragments":["C++"]},{"Key":"normal C++","Fragments":["reference"]},{"Key":"C++ reference","Fragments":["materials,"]},{"Key":"reference materials,","Fragments":["but"]},{"Key":"materials, but","Fragments":["Google"]},{"Key":"but Google","Fragments":["found"]},{"Key":"Google found","Fragments":["me"]},{"Key":"found me","Fragments":["this:","a"]},{"Key":"This header","Fragments":["simply","only"]},{"Key":"header simply","Fragments":["includes"]},{"Key":"simply includes","Fragments":["\u003ccmath\u003e"]},{"Key":"includes \u003ccmath\u003e","Fragments":["and"]},{"Key":"\u003ccmath\u003e and","Fragments":["\u003cccomplex\u003e.","\u003cccomplex\u003e"]},{"Key":"The functionality","Fragments":["provided"]},{"Key":"functionality provided","Fragments":["by"]},{"Key":"provided by","Fragments":["this","the","boost,","std-lib.","C++","C++"]},{"Key":"by this","Fragments":["C","implementation.","time.","logic"]},{"Key":"this C","Fragments":["header"]},{"Key":"C header","Fragments":["is","more"]},{"Key":"already provided","Fragments":["by"]},{"Key":"proper overloads","Fragments":["in"]},{"Key":"overloads in","Fragments":["\u003ccmath\u003e","the"]},{"Key":"in \u003ccmath\u003e","Fragments":["and"]},{"Key":"and \u003cccomplex\u003e","Fragments":["in"]},{"Key":"\u003cccomplex\u003e in","Fragments":["C++."]},{"Key":"\u003e std::pow","Fragments":["returns"]},{"Key":"\u003e is","Fragments":["accumulate"]},{"Key":" `std::accumulate()`","Fragments":["maintains"]},{"Key":"`std::accumulate()` maintains","Fragments":["an"]},{"Key":"maintains an","Fragments":["accumulator"]},{"Key":"an accumulator","Fragments":["of","of"]},{"Key":"accumulator of","Fragments":["type","its"]},{"Key":"type `T`,","Fragments":["the"]},{"Key":"`T`, the","Fragments":["second"]},{"Key":"second type","Fragments":["parameter,"]},{"Key":"type parameter,","Fragments":["or"]},{"Key":"parameter, or","Fragments":["in"]},{"Key":"other words","Fragments":["the","(of"]},{"Key":"words the","Fragments":["type"]},{"Key":"third function","Fragments":["argument.","that"]},{"Key":"function argument.","Fragments":["Here,"]},{"Key":"argument. Here,","Fragments":["that's"]},{"Key":"Here, that's","Fragments":["an"]},{"Key":"that's an","Fragments":["`int`,","error"]},{"Key":"`int`, and","Fragments":["so"]},{"Key":"so that's","Fragments":["what's","ispunct","what","where"]},{"Key":"that's what's","Fragments":["maintained,","being"]},{"Key":"what's maintained,","Fragments":["and"]},{"Key":"maintained, and","Fragments":["after"]},{"Key":"after every","Fragments":["call"]},{"Key":"every call","Fragments":["to","of","to"]},{"Key":"my lambda","Fragments":["the"]},{"Key":"lambda the","Fragments":["`double`"]},{"Key":"the `double`","Fragments":["value"]},{"Key":"`double` value","Fragments":["is"]},{"Key":"stored as","Fragments":["an","a"]},{"Key":"why `std::pow()`","Fragments":["returns"]},{"Key":"`std::pow()` returns","Fragments":["a"]},{"Key":"a `double`","Fragments":["value.","or"]},{"Key":"`double` value.","Fragments":["I"]},{"Key":"this has","Fragments":["anything","the","the","to"]},{"Key":"has anything","Fragments":["to"]},{"Key":"anything to","Fragments":["do","the"]},{"Key":"with allowing","Fragments":["for"]},{"Key":"allowing for","Fragments":["fractions."]},{"Key":"for fractions.","Fragments":["Some"]},{"Key":"fractions. Some","Fragments":["say"]},{"Key":"Some say","Fragments":["it's"]},{"Key":"say it's","Fragments":["because"]},{"Key":"it's because","Fragments":["the","of","of","each"]},{"Key":"integer argument","Fragments":["can"]},{"Key":"argument can","Fragments":["easily"]},{"Key":"can easily","Fragments":["overflow,","switch","run"]},{"Key":"easily overflow,","Fragments":["but"]},{"Key":"overflow, but","Fragments":["I'm","that"]},{"Key":"I buy","Fragments":["this"]},{"Key":"buy this","Fragments":["argument"]},{"Key":"this argument","Fragments":["either."]},{"Key":"argument either.","Fragments":["The"]},{"Key":"either. The","Fragments":["result"]},{"Key":"adding two","Fragments":["`int`"]},{"Key":"two `int`","Fragments":["values"]},{"Key":"`int` values","Fragments":["can"]},{"Key":"values can","Fragments":["also"]},{"Key":"also overflow,","Fragments":["but"]},{"Key":"doesn't return","Fragments":["a"]},{"Key":"\u003e it's","Fragments":["probably"]},{"Key":" Why?","Fragments":["There"]},{"Key":"Why? There","Fragments":["are"]},{"Key":"of names","Fragments":["in","into","your"]},{"Key":"in scope,","Fragments":["and"]},{"Key":"scope, and","Fragments":["I'm"]},{"Key":"not \"terrified\"","Fragments":["of"]},{"Key":"\"terrified\" of","Fragments":["using"]},{"Key":"mistake. Why","Fragments":["is"]},{"Key":"explicit in","Fragments":["the"]},{"Key":"lambda capture","Fragments":["any"]},{"Key":"capture any","Fragments":["better"]},{"Key":"any better","Fragments":["than"]},{"Key":"than letting","Fragments":["the"]},{"Key":"letting the","Fragments":["compiler","compiler"]},{"Key":"compiler figure","Fragments":["it"]},{"Key":"figure it","Fragments":["out?","out.","out:"]},{"Key":"\u003e why","Fragments":["not"]},{"Key":"would I","Fragments":["do","set"]},{"Key":"do that?","Fragments":["I"]},{"Key":"that? I","Fragments":["use"]},{"Key":"use `i`","Fragments":["for","for"]},{"Key":"`i` for","Fragments":["indexing","two","all"]},{"Key":"for indexing","Fragments":["the"]},{"Key":"indexing the","Fragments":["order","string"]},{"Key":"of magnitude.","Fragments":["Also,"]},{"Key":"magnitude. Also,","Fragments":["why?"]},{"Key":"Also, why?","Fragments":["`std::accumulate()`"]},{"Key":"why? `std::accumulate()`","Fragments":["has"]},{"Key":"`std::accumulate()` has","Fragments":["an"]},{"Key":"its own.","Fragments":["Why"]},{"Key":"own. Why","Fragments":["use"]},{"Key":"for two","Fragments":["things?","reasons:","reasons.","global"]},{"Key":"think pow","Fragments":["returns"]},{"Key":"pow returns","Fragments":["a"]},{"Key":"double mainly","Fragments":["for"]},{"Key":"mainly for","Fragments":["fractions"]},{"Key":"for fractions","Fragments":["in"]},{"Key":"fractions in","Fragments":["the"]},{"Key":"return value.","Fragments":["The","In"]},{"Key":"value. The","Fragments":["second"]},{"Key":"second argument","Fragments":["could"]},{"Key":"argument could","Fragments":["be","be","be","be"]},{"Key":"I meant","Fragments":["using","my","to","to","using"]},{"Key":"meant using","Fragments":["i","something"]},{"Key":"using i","Fragments":["for"]},{"Key":"i for","Fragments":["the"]},{"Key":"thing conceptually,","Fragments":["but"]},{"Key":"conceptually, but","Fragments":["after"]},{"Key":"of pow.","Fragments":["Something"]},{"Key":"pow. Something","Fragments":["like"]},{"Key":"int i","Fragments":["=",")","=","="]},{"Key":"auto r","Fragments":["="]},{"Key":"= a","Fragments":["+","|"]},{"Key":"a +","Fragments":["(c","b,"]},{"Key":"+ (c","Fragments":["-"]},{"Key":"(c -","Fragments":["'0')","1)"]},{"Key":"- '0')","Fragments":["*"]},{"Key":"'0') *","Fragments":["i;"]},{"Key":"It's unfortunate","Fragments":["that"]},{"Key":"unfortunate that","Fragments":["one"]},{"Key":"line becomes","Fragments":["three,"]},{"Key":"becomes three,","Fragments":["but"]},{"Key":"three, but","Fragments":["I'm"]},{"Key":"not aware","Fragments":["of","of."]},{"Key":"of something","Fragments":["like","like","declared"]},{"Key":"like *=","Fragments":["that"]},{"Key":"*= that","Fragments":["returns"]},{"Key":"previous value","Fragments":["the"]},{"Key":"value the","Fragments":["way"]},{"Key":"the postfix","Fragments":["++"]},{"Key":"postfix ++","Fragments":["does."]},{"Key":"++ does.","Fragments":["A"]},{"Key":"does. A","Fragments":["cleverer"]},{"Key":"A cleverer","Fragments":["person"]},{"Key":"cleverer person","Fragments":["would"]},{"Key":"person would","Fragments":["probably"]},{"Key":"probably find","Fragments":["a"]},{"Key":"write that","Fragments":["than"]},{"Key":"that than","Fragments":["I"]},{"Key":"say you","Fragments":["were","should"]},{"Key":"were terrified,","Fragments":["so"]},{"Key":"terrified, so","Fragments":["no"]},{"Key":"for quotes","Fragments":["there."]},{"Key":"quotes there.","Fragments":["Having"]},{"Key":"there. Having","Fragments":["a"]},{"Key":"more restrictive","Fragments":["scope","with","`using"]},{"Key":"restrictive scope","Fragments":["with"]},{"Key":"scope with","Fragments":["fewer"]},{"Key":"fewer things","Fragments":["visible"]},{"Key":"things visible","Fragments":["in"]},{"Key":"visible in","Fragments":["it","your","its"]},{"Key":"in it","Fragments":["may","and"]},{"Key":"may help,","Fragments":["in"]},{"Key":"help, in","Fragments":["some"]},{"Key":"some cases,","Fragments":["to"]},{"Key":"cases, to","Fragments":["catch","allow"]},{"Key":"catch a","Fragments":["problem"]},{"Key":"problem at","Fragments":["compile"]},{"Key":"time. I","Fragments":["did","wouldn't","can't"]},{"Key":"not suggest","Fragments":["it"]},{"Key":"suggest it","Fragments":["mattered"]},{"Key":"it mattered","Fragments":["here,"]},{"Key":"mattered here,","Fragments":["just"]},{"Key":"here, just","Fragments":["that"]},{"Key":"just that","Fragments":["it","it's","little"]},{"Key":"a slightly","Fragments":["better","different"]},{"Key":"better habit","Fragments":["since"]},{"Key":"habit since","Fragments":["someday"]},{"Key":"since someday","Fragments":["it"]},{"Key":"someday it","Fragments":["might"]},{"Key":"might help","Fragments":["catch"]},{"Key":"help catch","Fragments":["something."]},{"Key":" ``std::vector\u003cunsigned","Fragments":["int\u003e"]},{"Key":"``std::vector\u003cunsigned int\u003e","Fragments":["of(unsigned"]},{"Key":"int\u003e of(unsigned","Fragments":["int"]},{"Key":"of(unsigned int","Fragments":["n)``"]},{"Key":"int n)``","Fragments":["should"]},{"Key":"n)`` should","Fragments":["have"]},{"Key":"been the","Fragments":["signature,","first"]},{"Key":"the signature,","Fragments":["but"]},{"Key":"signature, but","Fragments":["in"]},{"Key":"tests the","Fragments":["result"]},{"Key":"is compared","Fragments":["to","and","and"]},{"Key":"a ``std::vector\u003cint\u003e``.","Fragments":["I"]},{"Key":"``std::vector\u003cint\u003e``. I","Fragments":["could"]},{"Key":"have changed","Fragments":["the","my","lines","and","recently.","how","my"]},{"Key":"tests to","Fragments":["expect","pass","figure"]},{"Key":"to expect","Fragments":["another","this"]},{"Key":"expect another","Fragments":["return"]},{"Key":"another return","Fragments":["type,"]},{"Key":"type, but","Fragments":["I","everything's"]},{"Key":"was too","Fragments":["lazy.","easily"]},{"Key":"too lazy.","Fragments":["And"]},{"Key":"lazy. And","Fragments":["since"]},{"Key":"input might","Fragments":["be"]},{"Key":"number and","Fragments":["this","\u003c","a"]},{"Key":"this number","Fragments":["has"]},{"Key":"number has","Fragments":["to","to"]},{"Key":"the ``std::vector\u003cint\u003e``","Fragments":["I"]},{"Key":"``std::vector\u003cint\u003e`` I","Fragments":["could"]},{"Key":"not choose","Fragments":["``unsigned"]},{"Key":"choose ``unsigned","Fragments":["int``"]},{"Key":"int`` as","Fragments":["parameter"]},{"Key":"as parameter","Fragments":["type.","and","and"]},{"Key":"type. Once","Fragments":["too"]},{"Key":"Once too","Fragments":["lazy"]},{"Key":"lazy and","Fragments":["my"]},{"Key":"my design","Fragments":["is","to"]},{"Key":"design is","Fragments":["flawed..."]},{"Key":"is flawed...","Fragments":[";-)"]},{"Key":"your suggestion.","Fragments":["Recomputing"]},{"Key":"suggestion. Recomputing","Fragments":["``max_candidate``"]},{"Key":"Recomputing ``max_candidate``","Fragments":["significantly"]},{"Key":"``max_candidate`` significantly","Fragments":["improves"]},{"Key":"significantly improves","Fragments":["the"]},{"Key":"improves the","Fragments":["runtime."]},{"Key":"Most important,","Fragments":["by"]},{"Key":"important, by","Fragments":["re-examining"]},{"Key":"by re-examining","Fragments":["the"]},{"Key":"re-examining the","Fragments":["code"]},{"Key":"code I","Fragments":["found","declared","got","have","think","have"]},{"Key":"bug. The","Fragments":["result"]},{"Key":"of ``prime_factors::of(922)``","Fragments":["does"]},{"Key":"``prime_factors::of(922)`` does","Fragments":["not"]},{"Key":"contain 461,","Fragments":["because"]},{"Key":"461, because","Fragments":["that"]},{"Key":"that factor","Fragments":["is"]},{"Key":"factor is","Fragments":["bigger","found"]},{"Key":"is bigger","Fragments":["than","than","I"]},{"Key":"bigger than","Fragments":["``sqrt(922)``.","mine.","int","an"]},{"Key":"than ``sqrt(922)``.","Fragments":["Line"]},{"Key":"``sqrt(922)``. Line","Fragments":["22"]},{"Key":"Line 22","Fragments":["should"]},{"Key":"22 should","Fragments":["be"]},{"Key":"be ``if","Fragments":["(n"]},{"Key":"``if (n","Fragments":["\u003e"]},{"Key":"(n \u003e","Fragments":["1)``."]},{"Key":" @emmanuel","Fragments":["you"]},{"Key":"@emmanuel you","Fragments":["are"]},{"Key":"are exactly","Fragments":["right,"]},{"Key":"exactly right,","Fragments":["I"]},{"Key":"as follows","Fragments":["instead:"]},{"Key":"message.find_last_not_of(\" \\n\\r\\t\")","Fragments":["+"]},{"Key":"\\n\\r\\t\") +","Fragments":["1;"]},{"Key":" Both","Fragments":["takes","Nobbz"]},{"Key":"Both takes","Fragments":["seem"]},{"Key":"takes seem","Fragments":["interesting"]},{"Key":"seem interesting","Fragments":["and"]},{"Key":"interesting and","Fragments":["will"]},{"Key":"and will","Fragments":["help","throw","pass","never","be","thus","cease","it"]},{"Key":"me remember","Fragments":["why"]},{"Key":"remember why","Fragments":["a"]},{"Key":"a semicolon","Fragments":["is","another","at"]},{"Key":"Thanks @agustina,","Fragments":["I"]},{"Key":"@agustina, I","Fragments":["will"]},{"Key":"will check","Fragments":["out","in"]},{"Key":"out Boost","Fragments":["libraries"]},{"Key":"Boost libraries","Fragments":["eventually,"]},{"Key":"libraries eventually,","Fragments":["but"]},{"Key":"eventually, but","Fragments":["with"]},{"Key":"exercises I","Fragments":["am"]},{"Key":"avoid depending","Fragments":["on"]},{"Key":"on Boost","Fragments":["and","and"]},{"Key":"do most","Fragments":["of"]},{"Key":"work using","Fragments":["std","the","regular"]},{"Key":"using std","Fragments":["library","clutters"]},{"Key":"std library","Fragments":["(C++11)","functions."]},{"Key":"library (C++11)","Fragments":["as"]},{"Key":"(C++11) as","Fragments":["I"]},{"Key":"clean slate.","Fragments":["Have"]},{"Key":"slate. Have","Fragments":["heard"]},{"Key":"Have heard","Fragments":["Boost"]},{"Key":"heard Boost","Fragments":["is"]},{"Key":"Boost is","Fragments":["known","not"]},{"Key":"known to","Fragments":["reduce"]},{"Key":"reduce a","Fragments":["lot"]},{"Key":"of development","Fragments":["effort"]},{"Key":"development effort","Fragments":["and"]},{"Key":"and lines","Fragments":["of"]},{"Key":"and much","Fragments":["of","more","more"]},{"Key":"of it","Fragments":["is","(though","was","anyhow","(and","is","for","and","will","once","before,","in","into","in","into","into"]},{"Key":"is becoming","Fragments":["part"]},{"Key":"becoming part","Fragments":["of"]},{"Key":"this version,","Fragments":["normalize","I"]},{"Key":"version, normalize","Fragments":["(`tolower`)"]},{"Key":"normalize (`tolower`)","Fragments":["is"]},{"Key":"(`tolower`) is","Fragments":["done"]},{"Key":"is done","Fragments":["minimal","using","for"]},{"Key":"done minimal","Fragments":["number"]},{"Key":"minimal number","Fragments":["of"]},{"Key":"of times","Fragments":["over","the",":/","a","\"a\"","\"a\"","the","you"]},{"Key":"times over","Fragments":["the"]},{"Key":"string. I","Fragments":["couldn't","was","did"]},{"Key":"couldn't easily","Fragments":["do"]},{"Key":"easily do","Fragments":["it"]},{"Key":"loop as","Fragments":["I","before.","I","opposed"]},{"Key":"I needed","Fragments":["to","to","to","to","to","to"]},{"Key":"strings then.","Fragments":["Doing"]},{"Key":"then. Doing","Fragments":["it"]},{"Key":"even earlier","Fragments":["would"]},{"Key":"earlier would","Fragments":["mean"]},{"Key":"would mean","Fragments":["I","iterating","looping"]},{"Key":"mean I","Fragments":["call"]},{"Key":"I call","Fragments":["`tolower`","string::back()"]},{"Key":"call `tolower`","Fragments":["unnecessarily","without"]},{"Key":"`tolower` unnecessarily","Fragments":["on"]},{"Key":"unnecessarily on","Fragments":["characters"]},{"Key":"on characters","Fragments":["which","of"]},{"Key":"characters which","Fragments":["I","translates","will","are","is"]},{"Key":"I end","Fragments":["up"]},{"Key":"up stripping","Fragments":["away"]},{"Key":"stripping away","Fragments":["later."]},{"Key":"away later.","Fragments":["I"]},{"Key":"later. I","Fragments":["do","used"]},{"Key":"not understand","Fragments":["internals"]},{"Key":"understand internals","Fragments":["of"]},{"Key":"internals of","Fragments":["`transform`,"]},{"Key":"of `transform`,","Fragments":["but"]},{"Key":"`transform`, but","Fragments":["do","if"]},{"Key":"but do","Fragments":["you","not"]},{"Key":"latter approach","Fragments":["would"]},{"Key":"approach would","Fragments":["be","be","be","be."]},{"Key":"last tip,","Fragments":["I"]},{"Key":"tip, I","Fragments":["should"]},{"Key":"have looked","Fragments":["it"]},{"Key":"looked it","Fragments":["up"]},{"Key":"own as","Fragments":["this"]},{"Key":"languages too","Fragments":["IIRC.","frequently."]},{"Key":"too IIRC.","Fragments":["Uploaded"]},{"Key":"IIRC. Uploaded","Fragments":["new"]},{"Key":"Uploaded new","Fragments":["iteration."]},{"Key":"Updated to","Fragments":["use","use"]},{"Key":"const iterators","Fragments":["wherever","to"]},{"Key":"iterators wherever","Fragments":["possible."]},{"Key":" Better","Fragments":["upsert"]},{"Key":"Better upsert","Fragments":["as"]},{"Key":"upsert as","Fragments":["suggested"]},{"Key":"as suggested","Fragments":["in"]},{"Key":"suggested in","Fragments":["previous"]},{"Key":"in previous","Fragments":["iteration."]},{"Key":"previous iteration.","Fragments":[":)"]},{"Key":"people's submissions","Fragments":["made"]},{"Key":"submissions made","Fragments":["me"]},{"Key":"made me","Fragments":["realize","wonder.","very","have","use"]},{"Key":"me realize","Fragments":["I"]},{"Key":"realize I","Fragments":["had","could"]},{"Key":"bug -","Fragments":["my"]},{"Key":"- my","Fragments":["parameter"]},{"Key":"my parameter","Fragments":["allowed"]},{"Key":"parameter allowed","Fragments":["values"]},{"Key":"allowed values","Fragments":["higher"]},{"Key":"values higher","Fragments":["than"]},{"Key":"higher than","Fragments":["the","in","the"]},{"Key":"possible values","Fragments":["of","instead."]},{"Key":"values of","Fragments":["int","n.","true"]},{"Key":"of int","Fragments":["in","to","to"]},{"Key":"int in","Fragments":["the","a","your"]},{"Key":"the output,","Fragments":["and"]},{"Key":"output, and","Fragments":["the"]},{"Key":"the additional","Fragments":["range","calls","case"]},{"Key":"additional range","Fragments":["included"]},{"Key":"range included","Fragments":["prime"]},{"Key":"included prime","Fragments":["numbers."]},{"Key":"prime numbers.","Fragments":["If"]},{"Key":"numbers. If","Fragments":["you"]},{"Key":"you passed","Fragments":["in","all"]},{"Key":"those numbers","Fragments":["as"]},{"Key":"argument my","Fragments":["loop"]},{"Key":"my loop","Fragments":["would"]},{"Key":"would go","Fragments":["all","through"]},{"Key":"way around","Fragments":["INT_MAX,"]},{"Key":"around INT_MAX,","Fragments":["hit"]},{"Key":"INT_MAX, hit","Fragments":["undefined"]},{"Key":"hit undefined","Fragments":["behavior"]},{"Key":"behavior (but","Fragments":["realistically"]},{"Key":"(but realistically","Fragments":["wrap"]},{"Key":"realistically wrap","Fragments":["around)"]},{"Key":"wrap around)","Fragments":["traverse"]},{"Key":"around) traverse","Fragments":["all"]},{"Key":"traverse all","Fragments":["the"]},{"Key":"negative values...","Fragments":["and"]},{"Key":"values... and","Fragments":["I"]},{"Key":"insert -1","Fragments":["as"]},{"Key":"-1 as","Fragments":["your"]},{"Key":"as your","Fragments":["only","method","method","method","iteration","input","`Teenager`."]},{"Key":"your only","Fragments":["prime"]},{"Key":"only prime","Fragments":["factor?"]},{"Key":"prime factor?","Fragments":["Something"]},{"Key":"factor? Something","Fragments":["like"]},{"Key":"that. Anyhow,","Fragments":["it"]},{"Key":"Anyhow, it","Fragments":["was"]},{"Key":"was clearly","Fragments":["the"]},{"Key":"clearly the","Fragments":["wrong"]},{"Key":"wrong answer.","Fragments":["Using","But"]},{"Key":"answer. Using","Fragments":["the"]},{"Key":"same arithmetic","Fragments":["type"]},{"Key":"arithmetic type","Fragments":["on"]},{"Key":"type on","Fragments":["input","a","make_zip_iterator."]},{"Key":"on input","Fragments":["as"]},{"Key":"as output","Fragments":["is"]},{"Key":"output is","Fragments":["safer.","quite"]},{"Key":"little wrong","Fragments":["about"]},{"Key":"wrong about","Fragments":["my","the","performance"]},{"Key":"my performance.","Fragments":["I"]},{"Key":"I timed","Fragments":["it"]},{"Key":"timed it","Fragments":["compared"]},{"Key":"it compared","Fragments":["to"]},{"Key":"the better","Fragments":["implementations","route.","calls","alternative.","approach."]},{"Key":"better implementations","Fragments":["I"]},{"Key":"implementations I","Fragments":["saw","am"]},{"Key":"saw (the","Fragments":["one"]},{"Key":"one from","Fragments":["@miracle"]},{"Key":"from @miracle","Fragments":[")"]},{"Key":"@miracle )","Fragments":["and"]},{"Key":") and","Fragments":["he","that"]},{"Key":"and he","Fragments":["was","is"]},{"Key":"he was","Fragments":["beating","referring","doing","being"]},{"Key":"was beating","Fragments":["me"]},{"Key":"beating me","Fragments":["pretty"]},{"Key":"me pretty","Fragments":["handily."]},{"Key":"pretty handily.","Fragments":["I"]},{"Key":"handily. I","Fragments":["did"]},{"Key":"did effectively","Fragments":["steal"]},{"Key":"effectively steal","Fragments":["the"]},{"Key":"steal the","Fragments":["sqrt"]},{"Key":"the sqrt","Fragments":["as"]},{"Key":"sqrt as","Fragments":["the"]},{"Key":"loop condition,","Fragments":["which","or"]},{"Key":"condition, which","Fragments":["was"]},{"Key":"was one","Fragments":["of","of"]},{"Key":"I originally","Fragments":["felt","split","had","started","had"]},{"Key":"originally felt","Fragments":["was"]},{"Key":"felt was","Fragments":["a","the"]},{"Key":"bit silly","Fragments":["-"]},{"Key":"silly -","Fragments":["I"]},{"Key":"was wrong","Fragments":["-","about"]},{"Key":"wrong -","Fragments":["but"]},{"Key":"also added","Fragments":["the"]},{"Key":"reserve and","Fragments":["now"]},{"Key":"now mine's","Fragments":["faster"]},{"Key":"mine's faster","Fragments":["for"]},{"Key":"numbers 1","Fragments":["through","through"]},{"Key":"1 through","Fragments":["99999.","9"]},{"Key":"* **initialization-style**:","Fragments":["\u003cbr/\u003e"]},{"Key":"**initialization-style**: \u003cbr/\u003e","Fragments":["Can"]},{"Key":"\u003cbr/\u003e Can","Fragments":["you"]},{"Key":"right chapter/section","Fragments":["in"]},{"Key":"chapter/section in","Fragments":["the"]},{"Key":"standard that","Fragments":["explains","explains","a"]},{"Key":"that explains","Fragments":["differences","the"]},{"Key":"explains differences","Fragments":["and"]},{"Key":"differences and","Fragments":["use"]},{"Key":"* **global","Fragments":["`begin()`/`end()`**:"]},{"Key":"**global `begin()`/`end()`**:","Fragments":["\u003cbr/\u003e"]},{"Key":"`begin()`/`end()`**: \u003cbr/\u003e","Fragments":["Are"]},{"Key":"\u003cbr/\u003e Are","Fragments":["they"]},{"Key":"Are they","Fragments":["really"]},{"Key":"really global","Fragments":["or"]},{"Key":"global or","Fragments":["are"]},{"Key":"or are","Fragments":["they","the"]},{"Key":"are they","Fragments":["in"]},{"Key":"they in","Fragments":["`std`-namespace?"]},{"Key":"in `std`-namespace?","Fragments":["My"]},{"Key":"`std`-namespace? My","Fragments":["google-foo"]},{"Key":"My google-foo","Fragments":["isn't"]},{"Key":"google-foo isn't","Fragments":["strong"]},{"Key":"isn't strong","Fragments":["enough","enough"]},{"Key":"strong enough","Fragments":["to","to"]},{"Key":"find some","Fragments":["usefull","time"]},{"Key":"some usefull","Fragments":["information"]},{"Key":"usefull information","Fragments":["about"]},{"Key":"information about","Fragments":["that","it","```random_device```."]},{"Key":"* **mutable","Fragments":["objects**:"]},{"Key":"**mutable objects**:","Fragments":["\u003cbr/\u003e"]},{"Key":"objects**: \u003cbr/\u003e","Fragments":["Which"]},{"Key":"\u003cbr/\u003e Which","Fragments":["ones"]},{"Key":"Which ones","Fragments":["do"]},{"Key":"ones do","Fragments":["you"]},{"Key":"you mean?","Fragments":["On"]},{"Key":"mean? On","Fragments":["top"]},{"Key":"On top","Fragments":["of"]},{"Key":"head I","Fragments":["clearly","thought"]},{"Key":"I clearly","Fragments":["see"]},{"Key":"clearly see","Fragments":["the","that"]},{"Key":"methods argument","Fragments":["`text`,"]},{"Key":"argument `text`,","Fragments":["and"]},{"Key":"`text`, and","Fragments":["I"]},{"Key":"I wished","Fragments":["I'd","I","there"]},{"Key":"wished I'd","Fragments":["see"]},{"Key":"I'd see","Fragments":["a"]},{"Key":"make `normalized`","Fragments":["immutable,"]},{"Key":"`normalized` immutable,","Fragments":["but"]},{"Key":"immutable, but","Fragments":["with"]},{"Key":"my current","Fragments":["knowledge"]},{"Key":"current knowledge","Fragments":["of"]},{"Key":"a way.","Fragments":["\u003cbr/\u003e"]},{"Key":"way. \u003cbr/\u003e","Fragments":["Also"]},{"Key":"\u003cbr/\u003e Also","Fragments":["I"]},{"Key":"Also I","Fragments":["often","think,","totally","used","am","used"]},{"Key":"often read","Fragments":["something"]},{"Key":"read something","Fragments":["about"]},{"Key":"about constant","Fragments":["iterators,"]},{"Key":"constant iterators,","Fragments":["but"]},{"Key":"iterators, but","Fragments":["wasn't","you","a"]},{"Key":"but wasn't","Fragments":["sure"]},{"Key":"choose mutable","Fragments":["and"]},{"Key":"mutable and","Fragments":["immutable"]},{"Key":"and immutable","Fragments":["ones"]},{"Key":"immutable ones","Fragments":["or"]},{"Key":"ones or","Fragments":["how"]},{"Key":" Explaining","Fragments":["the"]},{"Key":"Explaining the","Fragments":["regular"]},{"Key":"* `[[:alnum:]]`","Fragments":["matches"]},{"Key":"`[[:alnum:]]` matches","Fragments":["every"]},{"Key":"matches every","Fragments":["alphanumeric"]},{"Key":"every alphanumeric","Fragments":["character,"]},{"Key":"alphanumeric character,","Fragments":["it","whenever"]},{"Key":"character, it","Fragments":["is"]},{"Key":"almost like","Fragments":["`[0-9a-zA-Z]`","an"]},{"Key":"like `[0-9a-zA-Z]`","Fragments":["but"]},{"Key":"`[0-9a-zA-Z]` but","Fragments":["in"]},{"Key":"most regex","Fragments":["implementations"]},{"Key":"regex implementations","Fragments":["I"]},{"Key":"aware off,","Fragments":["`[[:alnum:]]`"]},{"Key":"off, `[[:alnum:]]`","Fragments":["is"]},{"Key":"`[[:alnum:]]` is","Fragments":["unicode-safe,"]},{"Key":"is unicode-safe,","Fragments":["so"]},{"Key":"unicode-safe, so","Fragments":["it"]},{"Key":"also match","Fragments":["arabic"]},{"Key":"match arabic","Fragments":["letters"]},{"Key":"arabic letters","Fragments":["or"]},{"Key":"letters or","Fragments":["japanese"]},{"Key":"or japanese","Fragments":["numbers"]},{"Key":"japanese numbers","Fragments":["etc."]},{"Key":"* `(?:pattern)`","Fragments":["means"]},{"Key":"`(?:pattern)` means","Fragments":["group"]},{"Key":"means group","Fragments":["this"]},{"Key":"group this","Fragments":["pattern"]},{"Key":"this pattern","Fragments":["logically","really","to"]},{"Key":"pattern logically","Fragments":["but"]},{"Key":"logically but","Fragments":["don't"]},{"Key":"but don't","Fragments":["create","overdo"]},{"Key":"don't create","Fragments":["a"]},{"Key":"a backreference","Fragments":["group."]},{"Key":"backreference group.","Fragments":["This"]},{"Key":"group. This","Fragments":["is"]},{"Key":"avoid some","Fragments":["memory","compiler"]},{"Key":"memory overhead","Fragments":["in","(no"]},{"Key":"overhead in","Fragments":["the","constructing"]},{"Key":"the created","Fragments":["`std::smatch`"]},{"Key":"created `std::smatch`","Fragments":["for"]},{"Key":"`std::smatch` for","Fragments":["an"]},{"Key":"an otherwise","Fragments":["unused","meaningful"]},{"Key":"otherwise unused","Fragments":["“submatch”."]},{"Key":"* `pattern*`","Fragments":["means"]},{"Key":"`pattern*` means","Fragments":["0"]},{"Key":"means 0","Fragments":["or","or"]},{"Key":"0 or","Fragments":["more","1","they"]},{"Key":"more matches","Fragments":["of"]},{"Key":"matches of","Fragments":["`pattern`"]},{"Key":"* `pattern?`","Fragments":["means"]},{"Key":"`pattern?` means","Fragments":["0"]},{"Key":"or 1","Fragments":["match"]},{"Key":"1 match","Fragments":["of"]},{"Key":"match of","Fragments":["`pattern`"]},{"Key":"So concluding","Fragments":["this,"]},{"Key":"concluding this,","Fragments":["the"]},{"Key":"this, the","Fragments":["regex"]},{"Key":"regex says","Fragments":["something"]},{"Key":"says something","Fragments":["along"]},{"Key":"along these","Fragments":["lines:"]},{"Key":"\u003e Match","Fragments":["every"]},{"Key":"Match every","Fragments":["alphanumerical"]},{"Key":"every alphanumerical","Fragments":["character"]},{"Key":"alphanumerical character","Fragments":["that"]},{"Key":"that maybe","Fragments":["followed","it"]},{"Key":"maybe followed","Fragments":["by"]},{"Key":"by many","Fragments":["other","people."]},{"Key":"other alphanumerics","Fragments":["or"]},{"Key":"alphanumerics or","Fragments":["a"]},{"Key":"a semicolon,","Fragments":["but"]},{"Key":"semicolon, but","Fragments":["if"]},{"Key":"semicolon another","Fragments":["alphanumeric"]},{"Key":"another alphanumeric","Fragments":["has"]},{"Key":"alphanumeric has","Fragments":["to"]},{"Key":"A culprit","Fragments":["of"]},{"Key":"culprit of","Fragments":["my"]},{"Key":"regex is,","Fragments":["that"]},{"Key":"that `\"foo''bar\"`","Fragments":["would"]},{"Key":"`\"foo''bar\"` would","Fragments":["be"]},{"Key":"be treatened","Fragments":["as"]},{"Key":"treatened as","Fragments":["a"]},{"Key":"single word.","Fragments":["But"]},{"Key":"word. But","Fragments":["since"]},{"Key":"But since","Fragments":["this","`square_of_sums`"]},{"Key":"isn't covered","Fragments":["by"]},{"Key":"* Sprinkled","Fragments":["some"]},{"Key":"Sprinkled some","Fragments":["`const`s"]},{"Key":"some `const`s","Fragments":["over"]},{"Key":"`const`s over","Fragments":["the"]},{"Key":"* switched","Fragments":["to"]},{"Key":"switched to","Fragments":["“uniform","std::string.length()","using"]},{"Key":"to “uniform","Fragments":["initialization”"]},{"Key":"* Used","Fragments":["`constant_iterator`"]},{"Key":"Used `constant_iterator`","Fragments":["where"]},{"Key":"`constant_iterator` where","Fragments":["possible"]},{"Key":"use `cbegin()`","Fragments":["and"]},{"Key":"`cbegin()` and","Fragments":["`cend()`"]},{"Key":"and `cend()`","Fragments":["as"]},{"Key":"`cend()` as","Fragments":["functions"]},{"Key":"as functions","Fragments":["though,"]},{"Key":"functions though,","Fragments":["I"]},{"Key":"the objects.","Fragments":["I"]},{"Key":"objects. I","Fragments":["had"]},{"Key":"had set","Fragments":["`-std=c++14`"]},{"Key":"set `-std=c++14`","Fragments":["in"]},{"Key":"`-std=c++14` in","Fragments":["CMakeLists.txt."]},{"Key":"in CMakeLists.txt.","Fragments":["Might"]},{"Key":"CMakeLists.txt. Might","Fragments":["my"]},{"Key":"Might my","Fragments":["`gcc`"]},{"Key":"my `gcc`","Fragments":["be"]},{"Key":"`gcc` be","Fragments":["to"]},{"Key":"to old?","Fragments":["It"]},{"Key":"old? It","Fragments":["is"]},{"Key":"is `gcc","Fragments":["(Ubuntu"]},{"Key":"`gcc (Ubuntu","Fragments":["4.9.2-0ubuntu1~14.04)"]},{"Key":"(Ubuntu 4.9.2-0ubuntu1~14.04)","Fragments":["4.9.2`."]},{"Key":" Sure!","Fragments":["I'm"]},{"Key":"Sure! I'm","Fragments":["always"]},{"Key":"always happy","Fragments":["to"]},{"Key":"to tear","Fragments":["apart..."]},{"Key":"tear apart...","Fragments":["I"]},{"Key":"apart... I","Fragments":["mean,"]},{"Key":"mean, constructively","Fragments":["criticize"]},{"Key":"constructively criticize","Fragments":["code."]},{"Key":"clear implementation.","Fragments":["Great"]},{"Key":"implementation. Great","Fragments":["use"]},{"Key":"of algorithms!","Fragments":["There"]},{"Key":"algorithms! There","Fragments":["is"]},{"Key":"you noticeably","Fragments":["did"]},{"Key":"noticeably did","Fragments":["not"]},{"Key":"algorithm but","Fragments":["could"]},{"Key":"could have.","Fragments":["Remember"]},{"Key":"have. Remember","Fragments":["there"]},{"Key":"Remember there","Fragments":["are"]},{"Key":"are reverse","Fragments":["iterators."]},{"Key":"reverse iterators.","Fragments":["(And"]},{"Key":"iterators. (And","Fragments":["const"]},{"Key":"(And const","Fragments":["iterators!)"]},{"Key":"of iterators,","Fragments":["it's","but"]},{"Key":"iterators, it's","Fragments":["also"]},{"Key":"also good","Fragments":["to"]},{"Key":"the habit","Fragments":["of","of","of","of","of"]},{"Key":"global begin()","Fragments":["and"]},{"Key":"end() family","Fragments":["of"]},{"Key":"family of","Fragments":["functions."]},{"Key":"of functions.","Fragments":["Makes","Right"]},{"Key":"functions. Makes","Fragments":["it"]},{"Key":"Makes it","Fragments":["easier","a"]},{"Key":"to generalize","Fragments":["code"]},{"Key":"generalize code","Fragments":["to"]},{"Key":"to support","Fragments":["types","single-ticks","an","specifying"]},{"Key":"support types","Fragments":["that"]},{"Key":"that don't","Fragments":["have","support","contain","correspond"]},{"Key":"have begin()","Fragments":["and"]},{"Key":"I'd like","Fragments":["to","to","to","to","to","to"]},{"Key":"see those","Fragments":["magic"]},{"Key":"those magic","Fragments":["strings","string"]},{"Key":"strings pulled","Fragments":["out"]},{"Key":"pulled out","Fragments":["to"]},{"Key":"to complete","Fragments":["the","the"]},{"Key":"complete the","Fragments":["abstraction.","work."]},{"Key":"have at","Fragments":["least","most"]},{"Key":"one pointless","Fragments":["include"]},{"Key":"pointless include","Fragments":["(probably"]},{"Key":"include (probably","Fragments":["left"]},{"Key":"(probably left","Fragments":["in"]},{"Key":"in from","Fragments":["debugging).","when"]},{"Key":"of copies","Fragments":["of","of"]},{"Key":"string are","Fragments":["getting"]},{"Key":"are getting","Fragments":["made."]},{"Key":"getting made.","Fragments":["Make"]},{"Key":"made. Make","Fragments":["a"]},{"Key":"Make a","Fragments":["habit"]},{"Key":"\u0026 until","Fragments":["proven"]},{"Key":"until proven","Fragments":["otherwise."]},{"Key":"other point","Fragments":["I'll","I'd","that","and"]},{"Key":"point I'll","Fragments":["raise"]},{"Key":"I'll raise","Fragments":["here,"]},{"Key":"raise here,","Fragments":["which"]},{"Key":"here, which","Fragments":["I"]},{"Key":"find is","Fragments":["often"]},{"Key":"is often","Fragments":["a"]},{"Key":"often a","Fragments":["problem"]},{"Key":"with exercises","Fragments":["like"]},{"Key":"exercises like","Fragments":["this,"]},{"Key":"like this,","Fragments":["is","and","but","but"]},{"Key":"this, is","Fragments":["that"]},{"Key":"is tailored","Fragments":["a"]},{"Key":"tailored a","Fragments":["bit"]},{"Key":"too tightly","Fragments":["to"]},{"Key":"tightly to","Fragments":["the"]},{"Key":"tests. It","Fragments":["wouldn't","ended","would"]},{"Key":"It wouldn't","Fragments":["be","be","hurt"]},{"Key":"invalid for","Fragments":["there"]},{"Key":"for there","Fragments":["to","to"]},{"Key":"be other","Fragments":["test"]},{"Key":"other test","Fragments":["cases","cases"]},{"Key":"cases such","Fragments":["as"]},{"Key":"as \"\\t\"","Fragments":["or"]},{"Key":"\"\\t\" or","Fragments":["\"\\n\"."]},{"Key":"or \"\\n\".","Fragments":["Both"]},{"Key":"\"\\n\". Both","Fragments":["of"]},{"Key":"Both of","Fragments":["which"]},{"Key":"be handled","Fragments":["as"]},{"Key":"as one","Fragments":["might","with","glyph","line","of"]},{"Key":"might hope","Fragments":["by"]},{"Key":"hope by","Fragments":["this"]},{"Key":"this implementation.","Fragments":["A"]},{"Key":"implementation. A","Fragments":["pretty","couple","few"]},{"Key":"A pretty","Fragments":["small"]},{"Key":"pretty small","Fragments":["change"]},{"Key":"small change","Fragments":["would","mostly"]},{"Key":"change would","Fragments":["easily","be"]},{"Key":"easily handle","Fragments":["those"]},{"Key":"handle those","Fragments":["cases.","edge"]},{"Key":"Overall this","Fragments":["is","is","looks"]},{"Key":"is looking","Fragments":["very","really","better!","really"]},{"Key":"looking very","Fragments":["clean."]},{"Key":"very clean.","Fragments":["Just","In"]},{"Key":"clean. Just","Fragments":["a"]},{"Key":"Just a","Fragments":["few","stub","side","bit","couple","bit","bit","matter","quick","minor"]},{"Key":"few rough","Fragments":["edges"]},{"Key":"rough edges","Fragments":["to"]},{"Key":"edges to","Fragments":["smooth"]},{"Key":"to smooth","Fragments":["out."]},{"Key":"to reply","Fragments":["to"]},{"Key":"reply to","Fragments":["what","silence,","`\"Fine."]},{"Key":"question from","Fragments":["the"]},{"Key":"performance gain","Fragments":["because","(unless"]},{"Key":"gain because","Fragments":["you're"]},{"Key":"you're currently","Fragments":["iterating"]},{"Key":"currently iterating","Fragments":["over"]},{"Key":"string twice.","Fragments":["Once"]},{"Key":"twice. Once","Fragments":["to","for"]},{"Key":"Once to","Fragments":["strip"]},{"Key":"strip out","Fragments":["punctuation","the"]},{"Key":"out punctuation","Fragments":["and"]},{"Key":"punctuation and","Fragments":["once","convert","lowering"]},{"Key":"and once","Fragments":["to","on"]},{"Key":"once to","Fragments":["lower-case"]},{"Key":"to lower-case","Fragments":["the","only","letters"]},{"Key":"lower-case the","Fragments":["letters."]},{"Key":"the letters.","Fragments":["I"]},{"Key":"letters. I","Fragments":["think","think"]},{"Key":"to combine","Fragments":["the","all","my","the"]},{"Key":"two into","Fragments":["a"]},{"Key":"single transform()","Fragments":["call."]},{"Key":"transform() call.","Fragments":["That"]},{"Key":"call. That","Fragments":["way"]},{"Key":"you process","Fragments":["the","the"]},{"Key":"get both","Fragments":["effects."]},{"Key":"The questions","Fragments":["weren't"]},{"Key":"questions weren't","Fragments":["for"]},{"Key":"weren't for","Fragments":["me,"]},{"Key":"but I'll","Fragments":["chime","say","watch","do","see"]},{"Key":"I'll chime","Fragments":["in"]},{"Key":"chime in","Fragments":["anyhow,"]},{"Key":"in anyhow,","Fragments":["'cause"]},{"Key":"anyhow, 'cause","Fragments":["I'm"]},{"Key":"'cause I'm","Fragments":["annoying"]},{"Key":"I'm annoying","Fragments":["like"]},{"Key":"annoying like","Fragments":["that."]},{"Key":"the bracket","Fragments":["initialization"]},{"Key":"bracket initialization","Fragments":["style,"]},{"Key":"initialization style,","Fragments":["this"]},{"Key":"style, this","Fragments":["isn't"]},{"Key":"isn't the","Fragments":["standardese,","most","parameter","cleanest","best","best","most","best"]},{"Key":"the standardese,","Fragments":["but"]},{"Key":"standardese, but","Fragments":["there's"]},{"Key":"a pretty","Fragments":["good","reasonable","strangely","solid","old","straightforward","perfect","new","horrific","minor","straightforward"]},{"Key":"pretty good","Fragments":["rundown","though."]},{"Key":"good rundown","Fragments":["and"]},{"Key":"rundown and","Fragments":["discussion"]},{"Key":"and discussion","Fragments":["here:"]},{"Key":"The use","Fragments":["cases","of","of","of","of"]},{"Key":"use cases","Fragments":["are","for","returning"]},{"Key":"cases are","Fragments":["largely","added","pretty","true"]},{"Key":"are largely","Fragments":["the"]},{"Key":"largely the","Fragments":["same,"]},{"Key":"same, the","Fragments":["main"]},{"Key":"get one","Fragments":["consistent","pass."]},{"Key":"consistent syntax","Fragments":["instead"]},{"Key":"syntax instead","Fragments":["of"]},{"Key":"of many.","Fragments":["Actually"]},{"Key":"many. Actually","Fragments":["Bjarne"]},{"Key":"Actually Bjarne","Fragments":["does"]},{"Key":"Bjarne does","Fragments":["a"]},{"Key":"good explanation","Fragments":["of"]},{"Key":"explanation of","Fragments":["this","my","why"]},{"Key":"have run","Fragments":["across"]},{"Key":"run across","Fragments":["the"]},{"Key":"across the","Fragments":["guy","map","chars"]},{"Key":"the guy","Fragments":["in","who","to","who"]},{"Key":"guy in","Fragments":["the"]},{"Key":"the accepted","Fragments":["answer","answer","answer"]},{"Key":"answer in","Fragments":["the"]},{"Key":"first link","Fragments":["also"]},{"Key":"link also","Fragments":["mentions:"]},{"Key":"also mentions:","Fragments":["\"In"]},{"Key":"mentions: \"In","Fragments":["order"]},{"Key":"\"In order","Fragments":["to"]},{"Key":"the sizing","Fragments":["constructor,"]},{"Key":"sizing constructor,","Fragments":["you"]},{"Key":"constructor, you","Fragments":["must"]},{"Key":"you must","Fragments":["use","use","specify"]},{"Key":"must use","Fragments":["()","the"]},{"Key":"use ()","Fragments":["instead"]},{"Key":"() instead","Fragments":["of"]},{"Key":"sure he","Fragments":["was"]},{"Key":"was referring","Fragments":["to"]},{"Key":"end free","Fragments":["functions,"]},{"Key":"free functions,","Fragments":["which"]},{"Key":"functions, which","Fragments":["are","means","is"]},{"Key":"std namespace.","Fragments":["They're","But","The"]},{"Key":"namespace. They're","Fragments":["free"]},{"Key":"They're free","Fragments":["functions"]},{"Key":"because they're","Fragments":["not"]},{"Key":"any class","Fragments":["or"]},{"Key":"struct -","Fragments":["they"]},{"Key":"they only","Fragments":["operate"]},{"Key":"only operate","Fragments":["on"]},{"Key":"on their","Fragments":["arguments.","way"]},{"Key":"their arguments.","Fragments":["I'm"]},{"Key":"arguments. I'm","Fragments":["pretty"]},{"Key":"pretty inconsistent","Fragments":["about"]},{"Key":"inconsistent about","Fragments":["using"]},{"Key":"using them","Fragments":["myself,","over","after.","in","like","to"]},{"Key":"them myself,","Fragments":["so","but"]},{"Key":"myself, so","Fragments":["I'm","you"]},{"Key":"to criticize","Fragments":["someone","anyone"]},{"Key":"criticize someone","Fragments":["who"]},{"Key":"who doesn't,","Fragments":["but"]},{"Key":"doesn't, but","Fragments":["I"]},{"Key":"point that","Fragments":["you","bugs"]},{"Key":"them than","Fragments":["by"]},{"Key":"than by","Fragments":["calling","value","value.","design."]},{"Key":"calling .begin","Fragments":["and"]},{"Key":".begin and","Fragments":[".end"]},{"Key":"and .end","Fragments":["since"]},{"Key":".end since","Fragments":["more"]},{"Key":"since more","Fragments":["containers"]},{"Key":"more containers","Fragments":["support"]},{"Key":"containers support","Fragments":["std::begin"]},{"Key":"support std::begin","Fragments":["(in"]},{"Key":"std::begin (in","Fragments":["particular"]},{"Key":"(in particular","Fragments":["old-school","the"]},{"Key":"particular old-school","Fragments":["raw"]},{"Key":"old-school raw","Fragments":["arrays)."]},{"Key":"And on","Fragments":["a"]},{"Key":"a C++","Fragments":["standard","book.","idiom.","way","style"]},{"Key":"standard proposal","Fragments":["that"]},{"Key":"proposal that","Fragments":["would"]},{"Key":"this somewhat","Fragments":["irrelevant","difficult"]},{"Key":"somewhat irrelevant","Fragments":["in"]},{"Key":"irrelevant in","Fragments":["the"]},{"Key":"the future,","Fragments":["if"]},{"Key":"future, if","Fragments":["accepted,"]},{"Key":"if accepted,","Fragments":["since"]},{"Key":"accepted, since","Fragments":["it"]},{"Key":"allow f(x)","Fragments":["to"]},{"Key":"f(x) to","Fragments":["call"]},{"Key":"call x.f()","Fragments":["if"]},{"Key":"x.f() if","Fragments":["no"]},{"Key":"no function","Fragments":["matching"]},{"Key":"function matching","Fragments":["f(x)","for"]},{"Key":"matching f(x)","Fragments":["was"]},{"Key":"f(x) was","Fragments":["declared"]},{"Key":"was declared","Fragments":["..."]},{"Key":"declared ...","Fragments":["and"]},{"Key":"and vice","Fragments":["versa.","versa.","versa."]},{"Key":"vice versa.","Fragments":["So","I","As"]},{"Key":"versa. So","Fragments":["you"]},{"Key":"start typing","Fragments":["things"]},{"Key":"typing things","Fragments":["like"]},{"Key":"like using","Fragments":["namespace","an","STL","\\\u003ciostream\\\u003e","the"]},{"Key":"std; return","Fragments":["4.pow(2);"]},{"Key":"return 4.pow(2);","Fragments":["and"]},{"Key":"4.pow(2); and","Fragments":["expect"]},{"Key":"and expect","Fragments":["to"]},{"Key":"get 16.0","Fragments":["returned."]},{"Key":"16.0 returned.","Fragments":["Which"]},{"Key":"returned. Which","Fragments":["is"]},{"Key":"is kinda","Fragments":["crazy,","crazy,"]},{"Key":"kinda crazy,","Fragments":["but","honestly."]},{"Key":"crazy, but","Fragments":["it","if"]},{"Key":"would really","Fragments":["help","narrow"]},{"Key":"really help","Fragments":["for","is"]},{"Key":"help for","Fragments":["those","one"]},{"Key":"for those","Fragments":["situations","are","simple"]},{"Key":"those situations","Fragments":["where"]},{"Key":"situations where","Fragments":["you're","doing","it'd"]},{"Key":"you're in","Fragments":["a"]},{"Key":"if member","Fragments":["function"]},{"Key":"function X","Fragments":["exists"]},{"Key":"X exists","Fragments":["or"]},{"Key":"exists or","Fragments":["maybe"]},{"Key":"or maybe","Fragments":["a","it'll","std"]},{"Key":"a free","Fragments":["function"]},{"Key":"free function","Fragments":["of","`hey`"]},{"Key":"function of","Fragments":["the","the","any","class","namespace","the","the"]},{"Key":"same name","Fragments":["-","being"]},{"Key":"name -","Fragments":["sort"]},{"Key":"- sort","Fragments":["swap"]},{"Key":"sort swap","Fragments":["begin"]},{"Key":"swap begin","Fragments":["end"]},{"Key":"begin end","Fragments":["etc","and/or"]},{"Key":"end etc","Fragments":["-"]},{"Key":"etc -","Fragments":["and"]},{"Key":"using std::begin;","Fragments":["in"]},{"Key":"std::begin; in","Fragments":["your"]},{"Key":"and rely","Fragments":["on"]},{"Key":"on ADL","Fragments":["and"]},{"Key":"ADL and","Fragments":["expecting"]},{"Key":"and expecting","Fragments":["class"]},{"Key":"expecting class","Fragments":["writers"]},{"Key":"class writers","Fragments":["to"]},{"Key":"writers to","Fragments":["overload"]},{"Key":"to overload","Fragments":["as"]},{"Key":"overload as","Fragments":["necessary"]},{"Key":"as necessary","Fragments":["in"]},{"Key":"necessary in","Fragments":["their"]},{"Key":"own namespaces","Fragments":["those"]},{"Key":"namespaces those","Fragments":["functions"]},{"Key":"those functions","Fragments":["which","in","to","might"]},{"Key":"for their","Fragments":["classes"]},{"Key":"their classes","Fragments":["better","are"]},{"Key":"classes better","Fragments":["than"]},{"Key":"std versions","Fragments":["do"]},{"Key":"versions do","Fragments":["it."]},{"Key":" Wall","Fragments":["of"]},{"Key":"Wall of","Fragments":["text"]},{"Key":"of text","Fragments":["warning."]},{"Key":"for explaining","Fragments":["the"]},{"Key":"explaining the","Fragments":["regex"]},{"Key":"for me!","Fragments":["Most"]},{"Key":"me! Most","Fragments":["of"]},{"Key":"my career","Fragments":["has","got"]},{"Key":"career has","Fragments":["been"]},{"Key":"been as","Fragments":["a"]},{"Key":"a Windows","Fragments":["and/or","copy."]},{"Key":"Windows and/or","Fragments":["games"]},{"Key":"and/or games","Fragments":["developer"]},{"Key":"games developer","Fragments":["so"]},{"Key":"developer so","Fragments":["I"]},{"Key":"never really","Fragments":["learned","thought","seen"]},{"Key":"really learned","Fragments":["to"]},{"Key":"learned to","Fragments":["use"]},{"Key":"regex all","Fragments":["that"]},{"Key":"can direct","Fragments":["you"]},{"Key":"direct you","Fragments":["to"]},{"Key":"explains the","Fragments":["differences,","problem:"]},{"Key":"the differences,","Fragments":["mostly"]},{"Key":"differences, mostly","Fragments":["because"]},{"Key":"standard on","Fragments":["this"]},{"Key":"this machine","Fragments":["and"]},{"Key":"machine and","Fragments":["am","treat"]},{"Key":"and am","Fragments":["too","definitely"]},{"Key":"lazy to","Fragments":["track","write"]},{"Key":"to track","Fragments":["one"]},{"Key":"track one","Fragments":["down."]},{"Key":"one down.","Fragments":["The"]},{"Key":"down. The","Fragments":["{}"]},{"Key":"The {}","Fragments":["style"]},{"Key":"{} style","Fragments":["of"]},{"Key":"of initialization","Fragments":["should"]},{"Key":"initialization should","Fragments":["be"]},{"Key":"be referred","Fragments":["to"]},{"Key":"to as","Fragments":["\"uniform"]},{"Key":"as \"uniform","Fragments":["initialization\""]},{"Key":"\"uniform initialization\"","Fragments":["so"]},{"Key":"initialization\" so","Fragments":["you"]},{"Key":"can search","Fragments":["for"]},{"Key":"The primary","Fragments":["reason"]},{"Key":"primary reason","Fragments":["to"]},{"Key":"new {}","Fragments":["form"]},{"Key":"{} form","Fragments":["is"]},{"Key":"form is","Fragments":["to","a","also"]},{"Key":"avoid what's","Fragments":["known"]},{"Key":"what's known","Fragments":["as","as"]},{"Key":"the \"most","Fragments":["vexing","vexing"]},{"Key":"\"most vexing","Fragments":["parse\".","parse\"."]},{"Key":"vexing parse\".","Fragments":["This","Google"]},{"Key":"parse\". This","Fragments":["comes"]},{"Key":"This comes","Fragments":["up"]},{"Key":"up when","Fragments":["an"]},{"Key":"when an","Fragments":["object"]},{"Key":"object being","Fragments":["initialized"]},{"Key":"being initialized","Fragments":["is","is"]},{"Key":"initialized is","Fragments":["indistinguishable","a"]},{"Key":"is indistinguishable","Fragments":["from"]},{"Key":"indistinguishable from","Fragments":["a","a"]},{"Key":"function declaration.","Fragments":["A","In","This"]},{"Key":"declaration. A","Fragments":["simple"]},{"Key":"simple example","Fragments":["is:","?"]},{"Key":" Foo","Fragments":["bar();","bar{};"]},{"Key":"The above","Fragments":["line","changes"]},{"Key":"above line","Fragments":["could"]},{"Key":"line could","Fragments":["be"]},{"Key":"be either","Fragments":["and"]},{"Key":"either and","Fragments":["the"]},{"Key":"the parser","Fragments":["certainly","actually","(oh"]},{"Key":"parser certainly","Fragments":["can't"]},{"Key":"certainly can't","Fragments":["read"]},{"Key":"can't read","Fragments":["your"]},{"Key":"read your","Fragments":["mind","solution,"]},{"Key":"your mind","Fragments":["and"]},{"Key":"mind and","Fragments":["just"]},{"Key":"want. In","Fragments":["contrast:"]},{"Key":"Can *only*","Fragments":["be"]},{"Key":"*only* be","Fragments":["the"]},{"Key":" Additionally","Fragments":["it's"]},{"Key":"Additionally it's","Fragments":["known"]},{"Key":"it's known","Fragments":["as"]},{"Key":"as uniform","Fragments":["initialization"]},{"Key":"initialization because","Fragments":["the"]},{"Key":"same syntax","Fragments":["can"]},{"Key":"syntax can","Fragments":["be"]},{"Key":"initialize primitives,","Fragments":["arrays,","objects,"]},{"Key":"primitives, arrays,","Fragments":["and"]},{"Key":"arrays, and","Fragments":["objects."]},{"Key":"and objects.","Fragments":["So"]},{"Key":"objects. So","Fragments":["code"]},{"Key":"So code","Fragments":["becomes"]},{"Key":"code becomes","Fragments":["more..."]},{"Key":"becomes more...","Fragments":["uniform."]},{"Key":"The begin()/end()","Fragments":["that"]},{"Key":"begin()/end() that","Fragments":["would"]},{"Key":"being called","Fragments":["here"]},{"Key":"called here","Fragments":["are"]},{"Key":"here are","Fragments":["indeed","defined","long","a"]},{"Key":"are indeed","Fragments":["in"]},{"Key":"namespace. But","Fragments":["you"]},{"Key":"to care.","Fragments":["When"]},{"Key":"care. When","Fragments":["the"]},{"Key":"the lookup","Fragments":["to"]},{"Key":"lookup to","Fragments":["decide"]},{"Key":"to decide","Fragments":["which","if"]},{"Key":"decide which","Fragments":["function","oft","of","is"]},{"Key":"which function","Fragments":["to"]},{"Key":"to call,","Fragments":["it"]},{"Key":"call, it","Fragments":["will"]},{"Key":"in numerous","Fragments":["scopes"]},{"Key":"numerous scopes","Fragments":["for"]},{"Key":"scopes for","Fragments":["function","loops."]},{"Key":"function prototypes","Fragments":["that","inside"]},{"Key":"prototypes that","Fragments":["match"]},{"Key":"that match","Fragments":["your","up"]},{"Key":"match your","Fragments":["call."]},{"Key":"your call.","Fragments":["The"]},{"Key":"call. The","Fragments":["current"]},{"Key":"The current","Fragments":["class/namespace/whatever"]},{"Key":"current class/namespace/whatever","Fragments":["functions"]},{"Key":"class/namespace/whatever functions","Fragments":["are"]},{"Key":"are obviously","Fragments":["visible","very"]},{"Key":"obviously visible","Fragments":["(declared"]},{"Key":"visible (declared","Fragments":["earlier"]},{"Key":"(declared earlier","Fragments":["in"]},{"Key":"earlier in","Fragments":["the"]},{"Key":"the file),","Fragments":["et"]},{"Key":"file), et","Fragments":["cetera."]},{"Key":"do what's","Fragments":["known"]},{"Key":"as \"argument","Fragments":["dependent"]},{"Key":"\"argument dependent","Fragments":["lookup\"."]},{"Key":"dependent lookup\".","Fragments":["This"]},{"Key":"lookup\". This","Fragments":["means"]},{"Key":"means it","Fragments":["will","traversed"]},{"Key":"also search","Fragments":["the"]},{"Key":"search the","Fragments":["namespaces"]},{"Key":"namespaces of","Fragments":["the"]},{"Key":"your arguments.","Fragments":["So"]},{"Key":"arguments. So","Fragments":["this"]},{"Key":"std::string hello","Fragments":["{"]},{"Key":"hello {","Fragments":["\"hello\"","\"hello\""]},{"Key":"{ \"hello\"","Fragments":["};","};"]},{"Key":"auto start_of_hello","Fragments":["{","{"]},{"Key":"start_of_hello {","Fragments":["begin(hello)","begin(hello)"]},{"Key":"{ begin(hello)","Fragments":["};","};"]},{"Key":" will","Fragments":["cause","get","change"]},{"Key":"will cause","Fragments":["the","undefined","more","the"]},{"Key":"cause the","Fragments":["compiler","linker"]},{"Key":"std namespace","Fragments":["for","that","to","holds"]},{"Key":"a begin()","Fragments":["function","and"]},{"Key":"begin() function","Fragments":["that"]},{"Key":"can accept","Fragments":["a"]},{"Key":"a std::string.","Fragments":["And"]},{"Key":"std::string. And","Fragments":["it"]},{"Key":"will find","Fragments":["one.","2","a"]},{"Key":"find one.","Fragments":["Now"]},{"Key":"one. Now","Fragments":["let's"]},{"Key":"say I","Fragments":["had","wrote","would've"]},{"Key":"had my","Fragments":["own"]},{"Key":"own string","Fragments":["implementation","word_chars,"]},{"Key":" FrostyLib::String","Fragments":["hello"]},{"Key":"FrostyLib::String hello","Fragments":["{"]},{"Key":"same code","Fragments":["can","as"]},{"Key":"get an","Fragments":["iterator","object","anagram*"]},{"Key":"iterator to","Fragments":["the","modify","loop","test","traverse"]},{"Key":"start of","Fragments":["hello.","the","string"]},{"Key":"of hello.","Fragments":["Even"]},{"Key":"hello. Even","Fragments":["though"]},{"Key":"though String","Fragments":["is"]},{"Key":"String is","Fragments":["in"]},{"Key":"the FrostyLib","Fragments":["namespace."]},{"Key":" Now,","Fragments":["let's","on","I","I'm","there","I"]},{"Key":"Now, let's","Fragments":["say"]},{"Key":"say I'm","Fragments":["a","in"]},{"Key":"a crappy","Fragments":["developer"]},{"Key":"crappy developer","Fragments":["who"]},{"Key":"developer who","Fragments":["doesn't"]},{"Key":"who doesn't","Fragments":["bother"]},{"Key":"doesn't bother","Fragments":["to"]},{"Key":"bother to","Fragments":["follow"]},{"Key":"follow accepted","Fragments":["standards"]},{"Key":"accepted standards","Fragments":["and"]},{"Key":"standards and","Fragments":["I"]},{"Key":"didn't provide","Fragments":["begin()"]},{"Key":"provide begin()","Fragments":["and"]},{"Key":"and end().","Fragments":["Let's"]},{"Key":"end(). Let's","Fragments":["say"]},{"Key":"Let's say","Fragments":["I"]},{"Key":"wrote start()","Fragments":["and"]},{"Key":"start() and","Fragments":["finish()"]},{"Key":"and finish()","Fragments":["member"]},{"Key":"finish() member","Fragments":["functions."]},{"Key":"member functions.","Fragments":["As","It's","To"]},{"Key":"functions. As","Fragments":["a"]},{"Key":"a user","Fragments":["of","giving"]},{"Key":"user of","Fragments":["my"]},{"Key":"my library","Fragments":["you"]},{"Key":"library you","Fragments":["can"]},{"Key":"write begin()/end()","Fragments":["yourself"]},{"Key":"begin()/end() yourself","Fragments":["without"]},{"Key":"yourself without","Fragments":["having"]},{"Key":"modify my","Fragments":["library."]},{"Key":"namespace FrostyLib","Fragments":["{"]},{"Key":"auto begin(String","Fragments":["\u0026the_string)-\u003edecltype(the_string.start())"]},{"Key":"begin(String \u0026the_string)-\u003edecltype(the_string.start())","Fragments":["{"]},{"Key":"auto end(String","Fragments":["\u0026the_string)-\u003edecltype(the_string.finish())"]},{"Key":"end(String \u0026the_string)-\u003edecltype(the_string.finish())","Fragments":["{"]},{"Key":"can even","Fragments":["make","use"]},{"Key":"even make","Fragments":["this","this"]},{"Key":"this work","Fragments":["for","for","for"]},{"Key":"for types","Fragments":["that","larger"]},{"Key":"that cannot","Fragments":["possibly"]},{"Key":"cannot possibly","Fragments":["have"]},{"Key":"possibly have","Fragments":["members."]},{"Key":"have members.","Fragments":["Check"]},{"Key":"members. Check","Fragments":["out"]},{"Key":"my hamming","Fragments":["solution"]},{"Key":"hamming solution","Fragments":["(http://exercism.io/submissions/2fc5030a7a724a9daa6dfe64eb303361)"]},{"Key":"solution (http://exercism.io/submissions/2fc5030a7a724a9daa6dfe64eb303361)","Fragments":["to"]},{"Key":"(http://exercism.io/submissions/2fc5030a7a724a9daa6dfe64eb303361) to","Fragments":["see"]},{"Key":"did it","Fragments":["for","your","while","as","without","to","more"]},{"Key":"for arrays.","Fragments":["So"]},{"Key":"arrays. So","Fragments":["using"]},{"Key":"So using","Fragments":["the","bitshift","the"]},{"Key":"the (seemingly)","Fragments":["global"]},{"Key":"(seemingly) global","Fragments":["functions"]},{"Key":"global functions","Fragments":["lets"]},{"Key":"functions lets","Fragments":["you"]},{"Key":"lets you","Fragments":["write"]},{"Key":"more generic","Fragments":["code.","`zip`,","via"]},{"Key":"for mutability.","Fragments":["The"]},{"Key":"mutability. The","Fragments":["one"]},{"Key":"one object","Fragments":["you"]},{"Key":"you hang","Fragments":["on"]},{"Key":"hang on","Fragments":["to"]},{"Key":"be trivially","Fragments":["marked"]},{"Key":"trivially marked","Fragments":["const"]},{"Key":"marked const","Fragments":["(I"]},{"Key":"const (I","Fragments":["believe)"]},{"Key":"(I believe)","Fragments":["is"]},{"Key":"believe) is","Fragments":["your"]},{"Key":"is your","Fragments":["regex","friend.","code,","upper"]},{"Key":"your regex","Fragments":["expression"]},{"Key":"regex expression","Fragments":["re."]},{"Key":"What I'm","Fragments":["mostly","trying"]},{"Key":"mostly referring","Fragments":["to"]},{"Key":"to though","Fragments":["is"]},{"Key":"though is","Fragments":["a"]},{"Key":"mine where","Fragments":["people"]},{"Key":"where people","Fragments":["use"]},{"Key":"people use","Fragments":["non-const","std::move","std::move"]},{"Key":"use non-const","Fragments":["iterators"]},{"Key":"non-const iterators","Fragments":["when"]},{"Key":"iterators when","Fragments":["they"]},{"Key":"they could","Fragments":["use","be"]},{"Key":"use const.","Fragments":["In"]},{"Key":"const. In","Fragments":["general"]},{"Key":"In general","Fragments":["think","it","they","there","you","if","I"]},{"Key":"iterators as","Fragments":["working","an"]},{"Key":"as working","Fragments":["like"]},{"Key":"working like","Fragments":["pointers"]},{"Key":"like pointers","Fragments":["(which"]},{"Key":"pointers (which","Fragments":["are"]},{"Key":"are themselves","Fragments":["iterators)."]},{"Key":"themselves iterators).","Fragments":["If"]},{"Key":"iterators). If","Fragments":["you're"]},{"Key":"the container's","Fragments":["contents"]},{"Key":"container's contents","Fragments":["you"]},{"Key":"contents you","Fragments":["need"]},{"Key":"non-const iterator.","Fragments":["If"]},{"Key":"iterator. If","Fragments":["you're"]},{"Key":"you're only","Fragments":["using","counting","running"]},{"Key":"read you","Fragments":["should"]},{"Key":"My rule","Fragments":["of"]},{"Key":"thumb is","Fragments":["always"]},{"Key":"always to","Fragments":["assume"]},{"Key":"assume I","Fragments":["want"]},{"Key":"want const","Fragments":["until"]},{"Key":"const until","Fragments":["I"]},{"Key":"I prove","Fragments":["to"]},{"Key":"prove to","Fragments":["myself"]},{"Key":"to myself","Fragments":["that"]},{"Key":"myself that","Fragments":["it","this","this","they","I"]},{"Key":"it must","Fragments":["be","be","go"]},{"Key":"be non-const.","Fragments":["Use"]},{"Key":"non-const. Use","Fragments":["cbegin()/cend()"]},{"Key":"Use cbegin()/cend()","Fragments":["to"]},{"Key":"cbegin()/cend() to","Fragments":["get"]},{"Key":"get constant","Fragments":["iterators."]},{"Key":"constant iterators.","Fragments":["And"]},{"Key":"iterators. And","Fragments":["crbegin()/crend()"]},{"Key":"And crbegin()/crend()","Fragments":["for"]},{"Key":"crbegin()/crend() for","Fragments":["constant"]},{"Key":"for constant","Fragments":["reverse"]},{"Key":"constant reverse","Fragments":["iterators."]},{"Key":"Also (just","Fragments":["noticed"]},{"Key":"(just noticed","Fragments":["this),"]},{"Key":"noticed this),","Fragments":["since"]},{"Key":"this), since","Fragments":["you"]},{"Key":"have text","Fragments":["as"]},{"Key":"text as","Fragments":["a"]},{"Key":"input you","Fragments":["can","don't"]},{"Key":"just go","Fragments":["ahead"]},{"Key":"and remove","Fragments":["normalized","the","an","most"]},{"Key":"remove normalized","Fragments":["all"]},{"Key":"normalized all","Fragments":["together."]},{"Key":"all together.","Fragments":["transform()"]},{"Key":"together. transform()","Fragments":["can"]},{"Key":"transform() can","Fragments":["work"]},{"Key":"can work","Fragments":["in-place"]},{"Key":"work in-place","Fragments":["so"]},{"Key":"in-place so","Fragments":["you"]},{"Key":"* Const","Fragments":["references"]},{"Key":"Const references","Fragments":["of","in"]},{"Key":"references of","Fragments":["string","any"]},{"Key":"string for","Fragments":["the","example","silence","responses","each","every","trailing","things"]},{"Key":"* named","Fragments":["constants"]},{"Key":"named constants","Fragments":["for"]},{"Key":"constants for","Fragments":["the","the"]},{"Key":"* reverse","Fragments":["iterator"]},{"Key":"iterator in","Fragments":["`isQuestion()`"]},{"Key":"have `zipString`","Fragments":["a"]},{"Key":"`zipString` a","Fragments":["more"]},{"Key":"generic `zip`,","Fragments":["but"]},{"Key":"`zip`, but","Fragments":["I"]},{"Key":"didn't get","Fragments":["how"]},{"Key":"get how","Fragments":["to"]},{"Key":"it. C++","Fragments":["templates"]},{"Key":"C++ templates","Fragments":["differ"]},{"Key":"templates differ","Fragments":["so"]},{"Key":"differ so","Fragments":["much"]},{"Key":"much from","Fragments":["Java"]},{"Key":"Java generics","Fragments":["or"]},{"Key":"generics or","Fragments":["haskells"]},{"Key":"or haskells","Fragments":["polymorphism-mechanism…"]},{"Key":" PS:","Fragments":["I","I'll"]},{"Key":"PS: I","Fragments":["know"]},{"Key":"a counting-loop,","Fragments":["but"]},{"Key":"counting-loop, but","Fragments":["I"]},{"Key":"C++ stuff.","Fragments":["That"]},{"Key":"stuff. That","Fragments":["simple"]},{"Key":"That simple","Fragments":["loop"]},{"Key":"simple loop","Fragments":["could"]},{"Key":"get copied","Fragments":["as"]},{"Key":"as is","Fragments":["to","and","the","without"]},{"Key":" `[]`","Fragments":["is"]},{"Key":"`[]` is","Fragments":["overloaded","much"]},{"Key":"is overloaded","Fragments":["for"]},{"Key":"for `std::string`,","Fragments":["so"]},{"Key":"`std::string`, so","Fragments":["you"]},{"Key":"can access","Fragments":["like"]},{"Key":"access like","Fragments":["tis"]},{"Key":"like tis","Fragments":["`a[i]`,"]},{"Key":"tis `a[i]`,","Fragments":["might"]},{"Key":"`a[i]`, might","Fragments":["be"]},{"Key":"think access","Fragments":["using"]},{"Key":"access using","Fragments":["`[]`"]},{"Key":"using `[]`","Fragments":["is"]},{"Key":"better readable,","Fragments":["just"]},{"Key":"readable, just","Fragments":["beause"]},{"Key":"just beause","Fragments":["one"]},{"Key":"beause one","Fragments":["uses"]},{"Key":"one uses","Fragments":["`[]`"]},{"Key":"uses `[]`","Fragments":["nearly"]},{"Key":"`[]` nearly","Fragments":["in"]},{"Key":"nearly in","Fragments":["every"]},{"Key":"every language","Fragments":["while","supports"]},{"Key":"language while","Fragments":["`.at()`"]},{"Key":"while `.at()`","Fragments":["is"]},{"Key":"`.at()` is","Fragments":["some"]},{"Key":"is some","Fragments":["name","redundancy","kind-of-recursively","duplication","other","more","possibility","deterministic"]},{"Key":"some name","Fragments":["that","clashes,"]},{"Key":"name that","Fragments":["is"]},{"Key":"C++, in","Fragments":["Java","terms"]},{"Key":"in Java","Fragments":["it","and","that"]},{"Key":"Java it","Fragments":["is"]},{"Key":"is `.get()`,","Fragments":["other"]},{"Key":"`.get()`, other","Fragments":["languages"]},{"Key":"languages might","Fragments":["have"]},{"Key":"have even","Fragments":["other"]},{"Key":"even other","Fragments":["names."]},{"Key":"But OK,","Fragments":["not","that's"]},{"Key":"OK, not","Fragments":["every"]},{"Key":"not every","Fragments":["language"]},{"Key":"language supports","Fragments":["`[]`."]},{"Key":" Current","Fragments":["version"]},{"Key":"Current version","Fragments":["of"]},{"Key":"of `exercism`","Fragments":["CLI","CLI"]},{"Key":"`exercism` CLI","Fragments":["can","can","can","then"]},{"Key":"CLI can","Fragments":["submitt","submit","submitt"]},{"Key":"can submitt","Fragments":["multiple","multiple"]},{"Key":"submitt multiple","Fragments":["files.","files."]},{"Key":"multiple files.","Fragments":["On","The","Seems"]},{"Key":"files. On","Fragments":["my"]},{"Key":"my linux","Fragments":["system","system,"]},{"Key":"linux system","Fragments":["it"]},{"Key":"system it","Fragments":["is"]},{"Key":"is easy","Fragments":["as","to","with","to"]},{"Key":"easy as","Fragments":["`exercism","`exercism","`escpp","possible"]},{"Key":"as `exercism","Fragments":["s","s"]},{"Key":"The following","Fragments":["shell-script"]},{"Key":"following shell-script","Fragments":["wraps"]},{"Key":"shell-script wraps","Fragments":["it,"]},{"Key":"wraps it,","Fragments":["so"]},{"Key":"it, so","Fragments":["I","I","I"]},{"Key":"to enter","Fragments":["`escpp"]},{"Key":"enter `escpp","Fragments":["hamming`:"]},{"Key":" #!/usr/bin/env","Fragments":["zsh","zsh"]},{"Key":"# place","Fragments":["this"]},{"Key":"place this","Fragments":["file"]},{"Key":"file into","Fragments":["some"]},{"Key":"into some","Fragments":["folder","sort","STL","functional"]},{"Key":"some folder","Fragments":["in"]},{"Key":"folder in","Fragments":["your"]},{"Key":"# and","Fragments":["make"]},{"Key":"it executable","Fragments":["at"]},{"Key":"executable at","Fragments":["least"]},{"Key":"least for","Fragments":["owner","linux","me."]},{"Key":"submit $1.cpp","Fragments":["$1.h","$1.h"]},{"Key":"* Instead","Fragments":["of","of","of"]},{"Key":"`if (a","Fragments":["!="]},{"Key":"(a !=","Fragments":["b)"]},{"Key":"!= b)","Fragments":["x"]},{"Key":"b) x","Fragments":["+="]},{"Key":"x +=","Fragments":["1;`","y.substr(a,"]},{"Key":"+= 1;`","Fragments":["you"]},{"Key":"1;` you","Fragments":["can"]},{"Key":"write `x","Fragments":["+="]},{"Key":"`x +=","Fragments":["a","1`."]},{"Key":"+= a","Fragments":["!="]},{"Key":"a !=","Fragments":["b`","b"]},{"Key":"stick to","Fragments":["`if`","whatever","a","one","std::vectors."]},{"Key":"to `if`","Fragments":["you"]},{"Key":"`if` you","Fragments":["could"]},{"Key":"write `++x`","Fragments":["instead"]},{"Key":"`++x` instead","Fragments":["of"]},{"Key":"of `x","Fragments":["+="]},{"Key":"* `i++`","Fragments":["takes"]},{"Key":"`i++` takes","Fragments":["slightly"]},{"Key":"takes slightly","Fragments":["longer"]},{"Key":"slightly longer","Fragments":["than"]},{"Key":"than `++i`,","Fragments":["especially"]},{"Key":"`++i`, especially","Fragments":["when"]},{"Key":"the increment/decrement","Fragments":["operators"]},{"Key":"increment/decrement operators","Fragments":["you"]},{"Key":"operators you","Fragments":["should"]},{"Key":"prefix version","Fragments":["over"]},{"Key":"version over","Fragments":["suffix.","the"]},{"Key":"over suffix.","Fragments":["But"]},{"Key":"suffix. But","Fragments":["also"]},{"Key":"But also","Fragments":["I","because"]},{"Key":"also I","Fragments":["have"]},{"Key":"to say,","Fragments":["`gcc`","it","the"]},{"Key":"say, `gcc`","Fragments":["and"]},{"Key":"`gcc` and","Fragments":["`clang`","`clang`?"]},{"Key":"and `clang`","Fragments":["do"]},{"Key":"`clang` do","Fragments":["recognize"]},{"Key":"do recognize","Fragments":["this"]},{"Key":"recognize this","Fragments":["in"]},{"Key":"cases and","Fragments":["optimise,","functions,","compiler","built"]},{"Key":"and optimise,","Fragments":["so"]},{"Key":"optimise, so","Fragments":["it"]},{"Key":"is reasonable","Fragments":["today","for","for"]},{"Key":"reasonable today","Fragments":["to"]},{"Key":"today to","Fragments":["stick"]},{"Key":"to whatever","Fragments":["one"]},{"Key":"whatever one","Fragments":["thinks"]},{"Key":"one thinks","Fragments":["is"]},{"Key":"thinks is","Fragments":["more"]},{"Key":"* current","Fragments":["version"]},{"Key":"current version","Fragments":["of","of"]},{"Key":"can submit","Fragments":["multiple","multiple","more","multiple","both","the","both","multiple"]},{"Key":"submit multiple","Fragments":["files,","files,","files","files","files."]},{"Key":"multiple files,","Fragments":["so","so"]},{"Key":"files, so","Fragments":["you","you"]},{"Key":"the `.h`","Fragments":["in"]},{"Key":"`.h` in","Fragments":["the"]},{"Key":"the `.cpp`","Fragments":["anymore,"]},{"Key":"`.cpp` anymore,","Fragments":["just"]},{"Key":"anymore, just","Fragments":["use"]},{"Key":"use `exercism","Fragments":["s"]},{"Key":"s hamming.cpp","Fragments":["hamming.h`"]},{"Key":"All four","Fragments":["nits"]},{"Key":"four nits","Fragments":["are"]},{"Key":"nits are","Fragments":["very"]},{"Key":"very minor","Fragments":["and","things:","things:","thing,"]},{"Key":"minor and","Fragments":["don't"]},{"Key":"don't require","Fragments":["you"]},{"Key":"require you","Fragments":["to","to"]},{"Key":"code uses","Fragments":["boost,","a"]},{"Key":"uses boost,","Fragments":["I"]},{"Key":"boost, I","Fragments":["like"]},{"Key":"second more.","Fragments":["Anyway,"]},{"Key":"more. Anyway,","Fragments":["I"]},{"Key":"Anyway, I","Fragments":["prefer"]},{"Key":"prefer functional","Fragments":["style,"]},{"Key":"functional style,","Fragments":["thats"]},{"Key":"style, thats","Fragments":["why"]},{"Key":"thats why","Fragments":["I"]},{"Key":"build some","Fragments":["`zip`-like"]},{"Key":"some `zip`-like","Fragments":["function"]},{"Key":"`zip`-like function","Fragments":["on"]},{"Key":"function on","Fragments":["my","an"]},{"Key":"using recursion,","Fragments":["which"]},{"Key":"recursion, which","Fragments":["I"]},{"Key":"a pro,","Fragments":["but"]},{"Key":"pro, but","Fragments":["you"]},{"Key":"might run","Fragments":["your"]},{"Key":"run your","Fragments":["stack","code"]},{"Key":"your stack","Fragments":["into"]},{"Key":"stack into","Fragments":["trouble"]},{"Key":"into trouble","Fragments":["for"]},{"Key":"trouble for","Fragments":["longer","this"]},{"Key":"for longer","Fragments":["input,","ones"]},{"Key":"longer input,","Fragments":["because"]},{"Key":"input, because","Fragments":["your"]},{"Key":"function isn't","Fragments":["tail-recursive,"]},{"Key":"isn't tail-recursive,","Fragments":["so"]},{"Key":"tail-recursive, so","Fragments":["recursion"]},{"Key":"so recursion","Fragments":["can't"]},{"Key":"recursion can't","Fragments":["get"]},{"Key":"get optimzed","Fragments":["into"]},{"Key":"optimzed into","Fragments":["a"]},{"Key":"use `auto","Fragments":["f()"]},{"Key":"`auto f()","Fragments":["-\u003e"]},{"Key":"f() -\u003e","Fragments":["int`"]},{"Key":"-\u003e int`","Fragments":["instead"]},{"Key":"int` instead","Fragments":["of"]},{"Key":"of `int","Fragments":["f()`?"]},{"Key":" `x[i]","Fragments":["!="]},{"Key":"`x[i] !=","Fragments":["y[i]","y[i]`."]},{"Key":"!= y[i]","Fragments":["?"]},{"Key":"y[i] ?","Fragments":["1"]},{"Key":": 0`","Fragments":["is"]},{"Key":"as `x[i]","Fragments":["!="]},{"Key":" `false`","Fragments":["has"]},{"Key":"`false` has","Fragments":["an"]},{"Key":"an `int`","Fragments":["value","before","before","(signed/unsigned)"]},{"Key":"of `0`","Fragments":["while"]},{"Key":"`0` while","Fragments":["`true`"]},{"Key":"while `true`","Fragments":["has"]},{"Key":"`true` has","Fragments":["a"]},{"Key":"of `1`","Fragments":["in"]},{"Key":"`1` in","Fragments":["C"]},{"Key":"C and","Fragments":["C++","Java"]},{"Key":"and C++","Fragments":["(in","STL","11"]},{"Key":"C++ (in","Fragments":["C"]},{"Key":"(in C","Fragments":["there"]},{"Key":"C there","Fragments":["isn't"]},{"Key":"there isn't","Fragments":["even","a","a","much","anything","anything"]},{"Key":"isn't even","Fragments":["a","guaranteed.","able","finished."]},{"Key":"even a","Fragments":["type"]},{"Key":"a type","Fragments":["`bool`","that","erasure","accessible","that"]},{"Key":"type `bool`","Fragments":["or"]},{"Key":"`bool` or","Fragments":["the"]},{"Key":"values `false`","Fragments":["and"]},{"Key":"`false` and","Fragments":["`true`)."]},{"Key":"not old.","Fragments":["There"]},{"Key":"old. There","Fragments":["is"]},{"Key":"is newer","Fragments":["out"]},{"Key":"newer out","Fragments":["there,"]},{"Key":"out there,","Fragments":["but","but"]},{"Key":"but 4.9","Fragments":["really"]},{"Key":"4.9 really","Fragments":["isn't"]},{"Key":"really isn't","Fragments":["bad."]},{"Key":"The free","Fragments":["functions"]},{"Key":"functions std::cbegin","Fragments":["and"]},{"Key":"std::cbegin and","Fragments":["std::cend"]},{"Key":"and std::cend","Fragments":["are"]},{"Key":"std::cend are","Fragments":["bizarrely"]},{"Key":"are bizarrely","Fragments":["late"]},{"Key":"bizarrely late","Fragments":["to"]},{"Key":"late to","Fragments":["the"]},{"Key":"the party,","Fragments":["pretty"]},{"Key":"party, pretty","Fragments":["much"]},{"Key":"much an","Fragments":["oversight"]},{"Key":"oversight in","Fragments":["C++11."]},{"Key":"C++11. For","Fragments":["what"]},{"Key":"it's worth","Fragments":["I","having","I'm","looking","understanding"]},{"Key":"worth I","Fragments":["think"]},{"Key":"think calling","Fragments":["the","it"]},{"Key":"calling the","Fragments":["methods","function"]},{"Key":"methods on","Fragments":["the","it,","`bob`,","`std::string`"]},{"Key":"the objects","Fragments":["is","is","construction"]},{"Key":"pretty reasonable","Fragments":["temporary","to"]},{"Key":"reasonable temporary","Fragments":["workaround."]},{"Key":"temporary workaround.","Fragments":["Or"]},{"Key":"workaround. Or","Fragments":["using"]},{"Key":"Or using","Fragments":["std::begin"]},{"Key":"using std::begin","Fragments":["-"]},{"Key":"std::begin -","Fragments":["and"]},{"Key":"maintain that","Fragments":["constness"]},{"Key":"that constness","Fragments":["you"]},{"Key":"constness you","Fragments":["can"]},{"Key":"can std::begin(const_cast\u003cconst","Fragments":["std::string\u0026\u003e(text))"]},{"Key":"std::begin(const_cast\u003cconst std::string\u0026\u003e(text))","Fragments":["which"]},{"Key":"std::string\u0026\u003e(text)) which","Fragments":["is"]},{"Key":"much what","Fragments":["cbegin"]},{"Key":"what cbegin","Fragments":["will"]},{"Key":"cbegin will","Fragments":["do."]},{"Key":" Requiring","Fragments":["the"]},{"Key":"Requiring the","Fragments":["flag"]},{"Key":"the flag","Fragments":["is"]},{"Key":"flag is","Fragments":["an"]},{"Key":"an unfortunate,","Fragments":["but"]},{"Key":"unfortunate, but","Fragments":["understandable,"]},{"Key":"but understandable,","Fragments":["choice"]},{"Key":"understandable, choice","Fragments":["on"]},{"Key":"choice on","Fragments":["the","the"]},{"Key":"of compiler","Fragments":["vendors."]},{"Key":"compiler vendors.","Fragments":["There's"]},{"Key":"vendors. There's","Fragments":["a"]},{"Key":"a remote","Fragments":["chance"]},{"Key":"remote chance","Fragments":["the"]},{"Key":"chance the","Fragments":["newer"]},{"Key":"newer standards","Fragments":["could"]},{"Key":"standards could","Fragments":["potentially"]},{"Key":"could potentially","Fragments":["break","have","copy","reduce","improve","cause","copy","copy","doing"]},{"Key":"potentially break","Fragments":["old"]},{"Key":"break old","Fragments":["code"]},{"Key":"old code","Fragments":["(though","with"]},{"Key":"code (though","Fragments":["they"]},{"Key":"(though they","Fragments":["do"]},{"Key":"do try","Fragments":["to"]},{"Key":"avoid this)","Fragments":["and"]},{"Key":"this) and","Fragments":["people"]},{"Key":"people kind","Fragments":["of"]},{"Key":"of assume","Fragments":["they"]},{"Key":"assume they","Fragments":["can","know"]},{"Key":"can pull","Fragments":["out"]},{"Key":"pull out","Fragments":["their","all"]},{"Key":"out their","Fragments":["old"]},{"Key":"their old","Fragments":["code","Makefile"]},{"Key":"with their","Fragments":["old","associated"]},{"Key":"old Makefile","Fragments":["and"]},{"Key":"Makefile and","Fragments":["everything","modified"]},{"Key":"and everything","Fragments":["will","whats","else)","would","continue","is"]},{"Key":"everything will","Fragments":["still"]},{"Key":"work the","Fragments":["way","same,"]},{"Key":"it used","Fragments":["to"]},{"Key":"to if","Fragments":["they"]},{"Key":"change anything...","Fragments":["so"]},{"Key":"anything... so","Fragments":["it'll"]},{"Key":"so it'll","Fragments":["be"]},{"Key":"while before","Fragments":["C+11"]},{"Key":"before C+11","Fragments":["or"]},{"Key":"C+11 or","Fragments":["C++14"]},{"Key":"or C++14","Fragments":["is"]},{"Key":"C++14 is","Fragments":["the"]},{"Key":"Having the","Fragments":["CMakeLists.txt"]},{"Key":"CMakeLists.txt start","Fragments":["out"]},{"Key":"start out","Fragments":["at"]},{"Key":"at C++11","Fragments":["is"]},{"Key":"also an","Fragments":["understandable","explicit"]},{"Key":"an understandable","Fragments":["choice"]},{"Key":"understandable choice","Fragments":["on"]},{"Key":"of @hilton.","Fragments":["Lots"]},{"Key":"@hilton. Lots","Fragments":["of"]},{"Key":"Lots of","Fragments":["compilers","std::vector\u003cdouble\u003es.","ifs,"]},{"Key":"of compilers","Fragments":["don't"]},{"Key":"compilers don't","Fragments":["really"]},{"Key":"really support","Fragments":["C++14"]},{"Key":"support C++14","Fragments":["yet.","yet,"]},{"Key":"C++14 yet.","Fragments":["Even"]},{"Key":"yet. Even","Fragments":["if"]},{"Key":"using one","Fragments":["which","way"]},{"Key":"which aggressively","Fragments":["supports"]},{"Key":"aggressively supports","Fragments":["new"]},{"Key":"supports new","Fragments":["standards,"]},{"Key":"new standards,","Fragments":["like"]},{"Key":"standards, like","Fragments":["clang"]},{"Key":"like clang","Fragments":["or"]},{"Key":"clang or","Fragments":["gcc,"]},{"Key":"or gcc,","Fragments":["it"]},{"Key":"gcc, it","Fragments":["would"]},{"Key":"was released","Fragments":["a"]},{"Key":"released a","Fragments":["year"]},{"Key":"a year","Fragments":["ago"]},{"Key":"year ago","Fragments":["or"]},{"Key":"ago or","Fragments":["whatever."]},{"Key":"or whatever.","Fragments":["According"]},{"Key":"whatever. According","Fragments":["to"]},{"Key":"to https://gcc.gnu.org/projects/cxx1y.html","Fragments":["even"]},{"Key":"https://gcc.gnu.org/projects/cxx1y.html even","Fragments":["your"]},{"Key":"even your","Fragments":["version"]},{"Key":"of gcc","Fragments":["doesn't","std::string"]},{"Key":"gcc doesn't","Fragments":["fully"]},{"Key":"doesn't fully","Fragments":["100%"]},{"Key":"fully 100%","Fragments":["support"]},{"Key":"100% support","Fragments":["C++14"]},{"Key":"C++14 yet,","Fragments":["and"]},{"Key":"yet, and","Fragments":["lots","I"]},{"Key":"and lots","Fragments":["of"]},{"Key":"of people","Fragments":["have","it","disagreeing.","who","aren't","not"]},{"Key":"people have","Fragments":["older","broadened"]},{"Key":"have older","Fragments":["versions."]},{"Key":"older versions.","Fragments":["I"]},{"Key":"versions. I","Fragments":["have"]},{"Key":"an older","Fragments":["version","version"]},{"Key":"older version","Fragments":["-","of"]},{"Key":"version -","Fragments":["4.8"]},{"Key":"- 4.8","Fragments":["which"]},{"Key":"4.8 which","Fragments":["is"]},{"Key":"a Ubuntu","Fragments":["LTS"]},{"Key":"Ubuntu LTS","Fragments":["release"]},{"Key":"LTS release","Fragments":["that's"]},{"Key":"release that's","Fragments":["still"]},{"Key":"that's still","Fragments":["supported."]},{"Key":"the situation's","Fragments":["improving."]},{"Key":"situation's improving.","Fragments":["It"]},{"Key":"improving. It","Fragments":["used"]},{"Key":"It used","Fragments":["to"]},{"Key":"be several","Fragments":["years"]},{"Key":"several years","Fragments":["before"]},{"Key":"years before","Fragments":["a"]},{"Key":"before a","Fragments":["new"]},{"Key":"standard was","Fragments":["widely"]},{"Key":"was widely","Fragments":["implemented."]},{"Key":"widely implemented.","Fragments":["Granted,"]},{"Key":"implemented. Granted,","Fragments":["Visual"]},{"Key":"Granted, Visual","Fragments":["Studio"]},{"Key":"Studio hasn't","Fragments":["finished"]},{"Key":"hasn't finished","Fragments":["C++11"]},{"Key":"finished C++11","Fragments":["yet,"]},{"Key":"C++11 yet,","Fragments":["but"]},{"Key":"yet, but","Fragments":["they're"]},{"Key":"they're getting","Fragments":["close"]},{"Key":"getting close","Fragments":["in","to"]},{"Key":"close in","Fragments":["VS"]},{"Key":"VS 2015","Fragments":["I","later"]},{"Key":"2015 I","Fragments":["think?"]},{"Key":"Which ubuntu","Fragments":["are"]},{"Key":"ubuntu are","Fragments":["you"]},{"Key":"you using?","Fragments":["my"]},{"Key":"using? my","Fragments":["14.04"]},{"Key":"my 14.04","Fragments":["is"]},{"Key":"14.04 is","Fragments":["LTS'ed"]},{"Key":"is LTS'ed","Fragments":["and"]},{"Key":"LTS'ed and","Fragments":["gcc"]},{"Key":"and gcc","Fragments":["is"]},{"Key":"gcc is","Fragments":["pulled"]},{"Key":"is pulled","Fragments":["from"]},{"Key":"pulled from","Fragments":["canonicals"]},{"Key":"from canonicals","Fragments":["repositorys"]},{"Key":"canonicals repositorys","Fragments":["because"]},{"Key":"repositorys because","Fragments":["I"]},{"Key":"don't wan't","Fragments":["to"]},{"Key":"wan't to","Fragments":["mess"]},{"Key":"mess up","Fragments":["my"]},{"Key":"my system","Fragments":["because","(gcc,"]},{"Key":"system because","Fragments":["of"]},{"Key":"of libs","Fragments":["compiled"]},{"Key":"libs compiled","Fragments":["with"]},{"Key":"compiled with","Fragments":["different","compilers"]},{"Key":"with different","Fragments":["versions","implementations."]},{"Key":"different versions","Fragments":["of","of"]},{"Key":"versions of","Fragments":["gcc.","Boost","`compute`.","`AnagramMatcher`","`to_rna`","the","the","these","the"]},{"Key":"Anyway, I'm","Fragments":["aware","glad"]},{"Key":"I'm aware","Fragments":["of"]},{"Key":"the fact,","Fragments":["that","that","that"]},{"Key":"that flagging","Fragments":["the"]},{"Key":"flagging the","Fragments":["version"]},{"Key":"the version","Fragments":["to","next","where"]},{"Key":"version to","Fragments":["the"]},{"Key":"is necessary.","Fragments":["I","This"]},{"Key":"necessary. I","Fragments":["know","think"]},{"Key":"from many","Fragments":["languages."]},{"Key":"Because of","Fragments":["the"]},{"Key":"the workarounds,","Fragments":["I"]},{"Key":"workarounds, I","Fragments":["don't"]},{"Key":"have any","Fragments":["prefferences","meaningful","experience","size_t","data","thoughts","previous","includes"]},{"Key":"any prefferences","Fragments":["in"]},{"Key":"prefferences in","Fragments":["using"]},{"Key":"the other.","Fragments":["I'm","(`forceful_questions`","The"]},{"Key":"other. I'm","Fragments":["just"]},{"Key":"just learning","Fragments":["C++","C++."]},{"Key":"learning C++","Fragments":["while"]},{"Key":"C++ while","Fragments":["doing"]},{"Key":"while doing","Fragments":["this"]},{"Key":"this exercises","Fragments":["and"]},{"Key":"exercises and","Fragments":["trying"]},{"Key":"transfer knowledge","Fragments":["I"]},{"Key":"knowledge I","Fragments":["have"]},{"Key":"in Haskell,","Fragments":["Java,"]},{"Key":"Haskell, Java,","Fragments":["C,"]},{"Key":"Java, C,","Fragments":["Erlang,"]},{"Key":"C, Erlang,","Fragments":["Ruby,"]},{"Key":"Erlang, Ruby,","Fragments":["Elixir,"]},{"Key":"Ruby, Elixir,","Fragments":["etc"]},{"Key":"Elixir, etc","Fragments":["over"]},{"Key":"etc over","Fragments":["to"]},{"Key":"over to","Fragments":["C++.","C++.","game","range"]},{"Key":"Regarding VS15,","Fragments":["what"]},{"Key":"VS15, what","Fragments":["do"]},{"Key":"what do","Fragments":["I","you","you"]},{"Key":"I know?","Fragments":["Who"]},{"Key":"know? Who","Fragments":["cares"]},{"Key":"Who cares","Fragments":["about"]},{"Key":"cares about","Fragments":["Microsoft?"]},{"Key":"about Microsoft?","Fragments":["Does"]},{"Key":"Microsoft? Does","Fragments":["Edge"]},{"Key":"Does Edge","Fragments":["have"]},{"Key":"Edge have","Fragments":["full"]},{"Key":"have full","Fragments":["support"]},{"Key":"full support","Fragments":["for"]},{"Key":"support for","Fragments":["HTML5,"]},{"Key":"for HTML5,","Fragments":["CSS3?"]},{"Key":"HTML5, CSS3?","Fragments":["Does"]},{"Key":"CSS3? Does","Fragments":["Microsoft"]},{"Key":"Does Microsoft","Fragments":["even"]},{"Key":"Microsoft even","Fragments":["fullfil"]},{"Key":"even fullfil","Fragments":["their"]},{"Key":"fullfil their","Fragments":["own"]},{"Key":"own standards","Fragments":["in"]},{"Key":"standards in","Fragments":["the"]},{"Key":".NET languages?","Fragments":["I"]},{"Key":"languages? I","Fragments":["can't"]},{"Key":"can't tell,","Fragments":["I"]},{"Key":"tell, I","Fragments":["can't"]},{"Key":"can't afford","Fragments":["to"]},{"Key":"afford to","Fragments":["buy"]},{"Key":"to buy","Fragments":["the"]},{"Key":"buy the","Fragments":["standard."]},{"Key":"the standard.","Fragments":["I"]},{"Key":"standard. I","Fragments":["don't","think"]},{"Key":"even have","Fragments":["a"]},{"Key":"Windows copy.","Fragments":["When"]},{"Key":"copy. When","Fragments":["I"]},{"Key":"need Windows","Fragments":["I"]},{"Key":"Windows I","Fragments":["use"]},{"Key":"my wifes","Fragments":["computer"]},{"Key":"wifes computer","Fragments":["or"]},{"Key":"computer or","Fragments":["one"]},{"Key":"or one","Fragments":["of","of"]},{"Key":"had actually","Fragments":["been"]},{"Key":"actually been","Fragments":["thinking"]},{"Key":"been thinking","Fragments":["that"]},{"Key":"should ask","Fragments":["you"]},{"Key":"ask you","Fragments":["about"]},{"Key":"you about","Fragments":["that","the","the"]},{"Key":"had seen","Fragments":["you","the"]},{"Key":"you doing","Fragments":["it."]},{"Key":"implementation needs","Fragments":["to"]},{"Key":"be here","Fragments":["anyway"]},{"Key":"here anyway","Fragments":["because"]},{"Key":"anyway because","Fragments":["these","of"]},{"Key":"because these","Fragments":["are","methods"]},{"Key":"are function","Fragments":["templates."]},{"Key":"function templates.","Fragments":["The"]},{"Key":"templates. The","Fragments":["actual"]},{"Key":"The actual","Fragments":["code","meaning","implementation"]},{"Key":"actual code","Fragments":["to","is"]},{"Key":"called will","Fragments":["be"]},{"Key":"generated by","Fragments":["the","the"]},{"Key":"compiler based","Fragments":["on"]},{"Key":"the arguments","Fragments":["at","to","for","of","to","are","to","is","the","in"]},{"Key":"arguments at","Fragments":["the"]},{"Key":"call site.","Fragments":["So"]},{"Key":"site. So","Fragments":["the"]},{"Key":"code itself","Fragments":["has","is"]},{"Key":"itself has","Fragments":["to"]},{"Key":"I'll check","Fragments":["on"]},{"Key":"version next","Fragments":["time"]},{"Key":"next time","Fragments":["I'm"]},{"Key":"time I'm","Fragments":["at"]},{"Key":"I'm at","Fragments":["home,"]},{"Key":"at home,","Fragments":["but"]},{"Key":"home, but","Fragments":["it"]},{"Key":"they actually","Fragments":["have"]},{"Key":"have both","Fragments":["4.8","the"]},{"Key":"both 4.8","Fragments":["and"]},{"Key":"4.8 and","Fragments":["4.9"]},{"Key":"and 4.9","Fragments":["in"]},{"Key":"4.9 in","Fragments":["14.04:"]},{"Key":"in 14.04:","Fragments":["http://askubuntu.com/questions/466651/how-do-i-use-the-latest-gcc-4-9-on-ubuntu-14-04"]},{"Key":"with Windows","Fragments":["(and"]},{"Key":"Windows (and","Fragments":["Solaris,"]},{"Key":"(and Solaris,","Fragments":["and"]},{"Key":"Solaris, and","Fragments":["soon"]},{"Key":"and soon","Fragments":["Linux)"]},{"Key":"soon Linux)","Fragments":["at"]},{"Key":"Linux) at","Fragments":["work,"]},{"Key":"at work,","Fragments":["so"]},{"Key":"work, so","Fragments":["I'm"]},{"Key":"I'm the","Fragments":["guy"]},{"Key":"guy who","Fragments":["cares.","really"]},{"Key":"who cares.","Fragments":["I","Works"]},{"Key":"cares. I","Fragments":["can't"]},{"Key":"with committing","Fragments":["the"]},{"Key":"committing the","Fragments":["keyword"]},{"Key":"keyword constexpr,","Fragments":["for"]},{"Key":"constexpr, for","Fragments":["example,"]},{"Key":"for example,","Fragments":["because","*[to_lower_copy](http://www.boost.org/doc/libs/1_59_0/doc/html/boost/algorithm/to_lower_copy.html)*"]},{"Key":"example, because","Fragments":["our"]},{"Key":"because our","Fragments":["version"]},{"Key":"our version","Fragments":["of"]},{"Key":"of VS","Fragments":["doesn't"]},{"Key":"VS doesn't","Fragments":["recognize"]},{"Key":"doesn't recognize","Fragments":["it.","and"]},{"Key":"recognize it.","Fragments":["We'll"]},{"Key":"it. We'll","Fragments":["update"]},{"Key":"We'll update","Fragments":["to"]},{"Key":"to VS","Fragments":["2015"]},{"Key":"2015 later","Fragments":["this"]},{"Key":"later this","Fragments":["year","evening.__Thanks"]},{"Key":"this year","Fragments":["-"]},{"Key":"year -","Fragments":["and"]},{"Key":"I care","Fragments":["what"]},{"Key":"Your reasons","Fragments":["for"]},{"Key":"reasons for","Fragments":["caring"]},{"Key":"for caring","Fragments":["about"]},{"Key":"caring about","Fragments":["VS"]},{"Key":"about VS","Fragments":["are"]},{"Key":"VS are","Fragments":["understandable"]},{"Key":"are understandable","Fragments":[":)"]},{"Key":"understandable :)","Fragments":["I"]},{"Key":"really hope,","Fragments":["that"]},{"Key":"hope, that","Fragments":["a"]},{"Key":"a forced","Fragments":["toolset"]},{"Key":"forced toolset","Fragments":["will"]},{"Key":"toolset will","Fragments":["not"]},{"Key":"problem when","Fragments":["I","I"]},{"Key":"have my","Fragments":["bachelor…","own","own"]},{"Key":"be kept,","Fragments":["I"]},{"Key":"kept, I","Fragments":["think"]},{"Key":"that way","Fragments":["too,","and","because","response.\"","(automatically"]},{"Key":"way too,","Fragments":["but"]},{"Key":"just realize,","Fragments":["that"]},{"Key":"realize, that","Fragments":["we"]},{"Key":"we both","Fragments":["do"]},{"Key":"both do","Fragments":["save"]},{"Key":"do save","Fragments":["it,"]},{"Key":"save it,","Fragments":["but"]},{"Key":"us made","Fragments":["it"]},{"Key":"Why store","Fragments":["word_lowercase_"]},{"Key":"store word_lowercase_","Fragments":["and"]},{"Key":"word_lowercase_ and","Fragments":["word_lowercase_sorted_"]},{"Key":"and word_lowercase_sorted_","Fragments":["if"]},{"Key":"word_lowercase_sorted_ if","Fragments":["you're"]},{"Key":"to re-create","Fragments":["them","it."]},{"Key":"re-create them","Fragments":["(rather"]},{"Key":"them (rather","Fragments":["than"]},{"Key":"than use","Fragments":["the"]},{"Key":"the member)","Fragments":["inside"]},{"Key":"member) inside","Fragments":["matches()"]},{"Key":"inside matches()","Fragments":["anyhow?"]},{"Key":"looking really","Fragments":["good!","good!"]},{"Key":"really good!","Fragments":["I","I"]},{"Key":"good! I","Fragments":["have","like","have"]},{"Key":"still point","Fragments":["out."]},{"Key":"first is","Fragments":["just","probably","that"]},{"Key":"just something","Fragments":["that","like"]},{"Key":"your life","Fragments":["easier."]},{"Key":"life easier.","Fragments":["There"]},{"Key":"easier. There","Fragments":["are"]},{"Key":"are times","Fragments":["when","when"]},{"Key":"times when","Fragments":["we","size","it"]},{"Key":"exact type","Fragments":["of"]},{"Key":"variable but","Fragments":["just"]},{"Key":"but just","Fragments":["need","`using"]},{"Key":"just need","Fragments":["it","to","a","to","to","to","to"]},{"Key":"be right","Fragments":["(such","in"]},{"Key":"right (such","Fragments":["as"]},{"Key":"(such as","Fragments":["pretty","`only_numbers`).","'Jesus'"]},{"Key":"as pretty","Fragments":["much"]},{"Key":"much any","Fragments":["time"]},{"Key":"any time","Fragments":["with","it","soon.","I"]},{"Key":"with iterators).","Fragments":["And,"]},{"Key":"iterators). And,","Fragments":["being"]},{"Key":"And, being","Fragments":["lazy"]},{"Key":"being lazy","Fragments":["computer"]},{"Key":"lazy computer","Fragments":["programmers"]},{"Key":"computer programmers","Fragments":["we"]},{"Key":"programmers we","Fragments":["don't"]},{"Key":"to type","Fragments":["mouthfuls","`at`","begin()"]},{"Key":"type mouthfuls","Fragments":["like"]},{"Key":"mouthfuls like","Fragments":["\"std::string::const_reverse_iterator\""]},{"Key":"like \"std::string::const_reverse_iterator\"","Fragments":["or"]},{"Key":"\"std::string::const_reverse_iterator\" or","Fragments":["worse"]},{"Key":"or worse","Fragments":["(I"]},{"Key":"worse (I","Fragments":["once"]},{"Key":"(I once","Fragments":["had"]},{"Key":"once had","Fragments":["a"]},{"Key":"a typename","Fragments":["over"]},{"Key":"typename over","Fragments":["80"]},{"Key":"over 80","Fragments":["chars"]},{"Key":"80 chars","Fragments":["long!)."]},{"Key":"chars long!).","Fragments":["In"]},{"Key":"long!). In","Fragments":["those"]},{"Key":"In those","Fragments":["cases"]},{"Key":"cases \"auto\"","Fragments":["is"]},{"Key":"\"auto\" is","Fragments":["your"]},{"Key":"you're unfamiliar,","Fragments":["auto"]},{"Key":"unfamiliar, auto","Fragments":["tells"]},{"Key":"auto tells","Fragments":["the"]},{"Key":"tells the","Fragments":["compiler"]},{"Key":"variable exactly","Fragments":["match"]},{"Key":"exactly match","Fragments":["what"]},{"Key":"match what","Fragments":["you're"]},{"Key":"you're initializing","Fragments":["it","it"]},{"Key":"initializing it","Fragments":["to.","with"]},{"Key":"it to.","Fragments":["It","The"]},{"Key":"to. It","Fragments":["can"]},{"Key":"used when","Fragments":["you're"]},{"Key":"when you're","Fragments":["directly","only","iterating"]},{"Key":"you're directly","Fragments":["initializing"]},{"Key":"directly initializing","Fragments":["and"]},{"Key":"initializing and","Fragments":["it"]},{"Key":"doesn't add","Fragments":["any"]},{"Key":"any crazy","Fragments":["dynamic"]},{"Key":"crazy dynamic","Fragments":["typing"]},{"Key":"dynamic typing","Fragments":["to"]},{"Key":"typing to","Fragments":["C++."]},{"Key":"just lets","Fragments":["the"]},{"Key":"lets the","Fragments":["compiler"]},{"Key":"compiler decide","Fragments":["what"]},{"Key":"decide what","Fragments":["the","to"]},{"Key":"type should","Fragments":["be.","be"]},{"Key":"Two things","Fragments":["to","come"]},{"Key":"things to","Fragments":["be","improve","take","think"]},{"Key":"be careful","Fragments":["of:","about","with","O(N^2","not"]},{"Key":"careful of:","Fragments":["The"]},{"Key":"of: The","Fragments":["type"]},{"Key":"type may","Fragments":["surprise"]},{"Key":"may surprise","Fragments":["you."]},{"Key":"auto my_string","Fragments":["{\"hello"]},{"Key":"my_string {\"hello","Fragments":["world\");"]},{"Key":"object called","Fragments":["my_string"]},{"Key":"called my_string","Fragments":["that"]},{"Key":"my_string that","Fragments":["contains"]},{"Key":"that contains","Fragments":["\"hello","all","all","all","all","a","non-dna"]},{"Key":"contains \"hello","Fragments":["world\"."]},{"Key":"\"hello world\".","Fragments":["But"]},{"Key":"world\". But","Fragments":["it"]},{"Key":"it wont","Fragments":["be","be"]},{"Key":"wont be","Fragments":["a","a"]},{"Key":"string. And","Fragments":["it"]},{"Key":"a char","Fragments":["*.","and","that","to","for","*."]},{"Key":"char *.","Fragments":["It'll","You're"]},{"Key":"*. It'll","Fragments":["be"]},{"Key":"It'll be","Fragments":["a"]},{"Key":"a char[12].","Fragments":["And"]},{"Key":"char[12]. And","Fragments":["auto"]},{"Key":"And auto","Fragments":["still"]},{"Key":"auto still","Fragments":["makes"]},{"Key":"still makes","Fragments":["you"]},{"Key":"makes you","Fragments":["decide"]},{"Key":"you decide","Fragments":["if","you","the","when"]},{"Key":"const or","Fragments":["a","enum."]},{"Key":"a \u0026","Fragments":["object.","in"]},{"Key":"\u0026 object.","Fragments":["The"]},{"Key":"object. The","Fragments":["standard"]},{"Key":"standard talks","Fragments":["about"]},{"Key":"talks about","Fragments":["these","some","const"]},{"Key":"these as","Fragments":["cv"]},{"Key":"as cv","Fragments":["qualifiers."]},{"Key":"second thing","Fragments":["to"]},{"Key":"out is","Fragments":["that"]},{"Key":"want in","Fragments":["isQuestion.","those","my"]},{"Key":"in isQuestion.","Fragments":["I"]},{"Key":"isQuestion. I","Fragments":["don't"]},{"Key":"efficient so","Fragments":["it's"]},{"Key":"huge deal","Fragments":["or"]},{"Key":"deal or","Fragments":["anything."]},{"Key":"whole being","Fragments":["generic"]},{"Key":"being generic","Fragments":["about"]},{"Key":"generic about","Fragments":["string"]},{"Key":"string thing.","Fragments":["You're"]},{"Key":"thing. You're","Fragments":["not"]},{"Key":"not requiring","Fragments":["much"]},{"Key":"requiring much","Fragments":["of"]},{"Key":"the char_type,","Fragments":["even."]},{"Key":"char_type, even.","Fragments":["When"]},{"Key":"even. When","Fragments":["the"]},{"Key":"case calls","Fragments":["it"]},{"Key":"calls it","Fragments":["I","from"]},{"Key":"will compare","Fragments":["the"]},{"Key":"the '\\0'","Fragments":["characters"]},{"Key":"'\\0' characters","Fragments":["at"]},{"Key":"characters at","Fragments":["the","a","the"]},{"Key":"the literal,","Fragments":["but"]},{"Key":"literal, but","Fragments":["that","please"]},{"Key":"doesn't change","Fragments":["the","the","the"]},{"Key":"does look","Fragments":["like","like"]},{"Key":"it can't","Fragments":["really","be","be"]},{"Key":"really handle","Fragments":["const"]},{"Key":"handle const","Fragments":["char*,"]},{"Key":"char*, but","Fragments":["then"]},{"Key":"we probably","Fragments":["shouldn't"]},{"Key":"probably shouldn't","Fragments":["be"]},{"Key":"be passing","Fragments":["those"]},{"Key":"passing those","Fragments":["things"]},{"Key":"those things","Fragments":["around"]},{"Key":" Building","Fragments":["up"]},{"Key":"Building up","Fragments":["a"]},{"Key":"map might","Fragments":["be"]},{"Key":"be overkill","Fragments":["here."]},{"Key":"be honest,","Fragments":["my"]},{"Key":"honest, my","Fragments":["first"]},{"Key":"first approach","Fragments":["of"]},{"Key":"in haskell","Fragments":["built"]},{"Key":"haskell built","Fragments":["up"]},{"Key":"built up","Fragments":["a","the"]},{"Key":"permutations of","Fragments":["the"]},{"Key":"looked up","Fragments":["the"]},{"Key":"other word","Fragments":["in"]},{"Key":"word in","Fragments":["it.","map","the","the"]},{"Key":" After","Fragments":["that","seeing","reading","some","viewing","reading","taking","some","looking","some","looking"]},{"Key":"After that","Fragments":["I"]},{"Key":"I realised,","Fragments":["that"]},{"Key":"realised, that","Fragments":["it"]},{"Key":"is enough","Fragments":["to","to","for","to"]},{"Key":"to pick","Fragments":["a","mine,","a","up"]},{"Key":"single permutation","Fragments":["which"]},{"Key":"permutation which","Fragments":["follows"]},{"Key":"which follows","Fragments":["a"]},{"Key":"follows a","Fragments":["simple"]},{"Key":"simple rule:","Fragments":["every"]},{"Key":"rule: every","Fragments":["character"]},{"Key":"every character","Fragments":["shall","will"]},{"Key":"character shall","Fragments":["be"]},{"Key":"shall be","Fragments":["greater"]},{"Key":"greater or","Fragments":["equal","less"]},{"Key":"or equal","Fragments":["to","size)"]},{"Key":"I alphabetically","Fragments":["sorted"]},{"Key":"alphabetically sorted","Fragments":["all"]},{"Key":"sorted all","Fragments":["characters"]},{"Key":"characters of","Fragments":["the","different","the"]},{"Key":"test word","Fragments":["and"]},{"Key":"word and","Fragments":["compared","return","by","one","iterate","_then_","inserted","inserted","sorted"]},{"Key":"and compared","Fragments":["the"]},{"Key":"compared the","Fragments":["resulting"]},{"Key":"the resulting","Fragments":["strings.","iterator"]},{"Key":"resulting strings.","Fragments":["This"]},{"Key":"strings. This","Fragments":["way"]},{"Key":"you avoid","Fragments":["the","needing","unnecessary"]},{"Key":"the memoryoverhead","Fragments":["of"]},{"Key":"memoryoverhead of","Fragments":["the"]},{"Key":"of building","Fragments":["up","the"]},{"Key":"map, you","Fragments":["should"]},{"Key":"should pick","Fragments":["a"]},{"Key":"a certain","Fragments":["permutation","n"]},{"Key":"certain permutation","Fragments":["of"]},{"Key":"input, sort","Fragments":["it!"]},{"Key":"you save","Fragments":["up","CPU"]},{"Key":"save up","Fragments":["your"]},{"Key":"up your","Fragments":["valuable","first","indentation,","function"]},{"Key":"your valuable","Fragments":["memory,","suggestions."]},{"Key":"valuable memory,","Fragments":["it"]},{"Key":"memory, it","Fragments":["might"]},{"Key":"even be","Fragments":["a"]},{"Key":"If your","Fragments":["\"map\"","language","functions"]},{"Key":"your \"map\"","Fragments":["was"]},{"Key":"\"map\" was","Fragments":["a"]},{"Key":"think you'd","Fragments":["have"]},{"Key":"a serious","Fragments":["run","problem."]},{"Key":"serious run","Fragments":["for"]},{"Key":"run for","Fragments":["your"]},{"Key":"your sorted-string","Fragments":["money."]},{"Key":"sorted-string money.","Fragments":["The"]},{"Key":"money. The","Fragments":["same"]},{"Key":"same job","Fragments":["as","(and"]},{"Key":"job as","Fragments":["map"]},{"Key":"as map","Fragments":["but"]},{"Key":"map but","Fragments":["much"]},{"Key":"but much","Fragments":["faster"]},{"Key":"faster (pointer","Fragments":["arithmetic"]},{"Key":"(pointer arithmetic","Fragments":["rather"]},{"Key":"arithmetic rather","Fragments":["than"]},{"Key":"than walking","Fragments":["a"]},{"Key":"walking a","Fragments":["red-black"]},{"Key":"red-black tree),","Fragments":["extremely"]},{"Key":"tree), extremely","Fragments":["compact,"]},{"Key":"extremely compact,","Fragments":["and"]},{"Key":"compact, and","Fragments":["no"]},{"Key":"For very","Fragments":["long"]},{"Key":" setting","Fragments":["up","up"]},{"Key":"setting up","Fragments":["the","the","a","a","an","the"]},{"Key":"the map:","Fragments":["O(N"]},{"Key":"map: O(N","Fragments":["log"]},{"Key":"O(N log","Fragments":["N)","N)","N)"]},{"Key":"log N)","Fragments":["(N","(quicksort,","in"]},{"Key":"N) (N","Fragments":["insertions"]},{"Key":"(N insertions","Fragments":["each"]},{"Key":"insertions each","Fragments":["of"]},{"Key":"is log","Fragments":["N)"]},{"Key":" sorting","Fragments":["the"]},{"Key":"sorting the","Fragments":["string:","characters"]},{"Key":"string: O(N","Fragments":["log"]},{"Key":"N) (quicksort,","Fragments":["heapsort,"]},{"Key":"(quicksort, heapsort,","Fragments":["something"]},{"Key":"heapsort, something","Fragments":["like"]},{"Key":"the array:","Fragments":["O(N)"]},{"Key":"array: O(N)","Fragments":["(n"]},{"Key":"O(N) (n","Fragments":["increments"]},{"Key":"(n increments","Fragments":["each"]},{"Key":"increments each","Fragments":["of"]},{"Key":"is constant","Fragments":["time)"]},{"Key":"that time","Fragments":["complexity"]},{"Key":"of sorting","Fragments":["and"]},{"Key":"sorting and","Fragments":["a","walking"]},{"Key":"same. That's","Fragments":["why"]},{"Key":"am talking","Fragments":["about"]},{"Key":"about memory","Fragments":["complexity."]},{"Key":"memory complexity.","Fragments":["We"]},{"Key":"complexity. We","Fragments":["are"]},{"Key":"We are","Fragments":["talking"]},{"Key":"are talking","Fragments":["about","about"]},{"Key":"a `map\u003cchar,","Fragments":["int\u003e`","char\u003e`"]},{"Key":"`map\u003cchar, int\u003e`","Fragments":["(assuming"]},{"Key":"int\u003e` (assuming","Fragments":["32"]},{"Key":"(assuming 32","Fragments":["bit"]},{"Key":"32 bit","Fragments":["int)"]},{"Key":"bit int)","Fragments":["which"]},{"Key":"int) which","Fragments":["needs"]},{"Key":"which needs","Fragments":["worst"]},{"Key":"needs worst","Fragments":["case"]},{"Key":"(no duplicate","Fragments":["letters)"]},{"Key":"duplicate letters)","Fragments":["5"]},{"Key":"letters) 5","Fragments":["byte"]},{"Key":"5 byte","Fragments":["per","up"]},{"Key":"byte per","Fragments":["letter.","character,"]},{"Key":"per letter.","Fragments":["In"]},{"Key":"letter. In","Fragments":["general"]},{"Key":"general it","Fragments":["memory"]},{"Key":"it memory","Fragments":["consumption"]},{"Key":"consumption of","Fragments":["the"]},{"Key":"map seems","Fragments":["very","like"]},{"Key":"seems very","Fragments":["impredicatable"]},{"Key":"very impredicatable","Fragments":["for"]},{"Key":"impredicatable for","Fragments":["me."]},{"Key":"for me.","Fragments":["It","I've"]},{"Key":"me. It","Fragments":["can"]},{"Key":"take from","Fragments":["5"]},{"Key":"from 5","Fragments":["byte"]},{"Key":"byte up","Fragments":["to"]},{"Key":"to length","Fragments":["*"]},{"Key":"length *","Fragments":["5"]},{"Key":"* 5","Fragments":["byte,","="]},{"Key":"5 byte,","Fragments":["while"]},{"Key":"byte, while","Fragments":["a"]},{"Key":"while a","Fragments":["sorted"]},{"Key":"sorted string","Fragments":["is","comparison","method"]},{"Key":"is predictable,","Fragments":["it"]},{"Key":"predictable, it","Fragments":["uses"]},{"Key":"uses 1","Fragments":["byte"]},{"Key":"1 byte","Fragments":["per"]},{"Key":"per character,","Fragments":["not"]},{"Key":"character, not","Fragments":["more,"]},{"Key":"not more,","Fragments":["not"]},{"Key":"more, not","Fragments":["less."]},{"Key":"not less.","Fragments":["Overhead"]},{"Key":"less. Overhead","Fragments":["excluded."]},{"Key":"Also one","Fragments":["should"]},{"Key":"should remember","Fragments":["that"]},{"Key":"remember that","Fragments":["even","Python","it's","it's","`str.back()`","when"]},{"Key":"even O(1)","Fragments":["can"]},{"Key":"O(1) can","Fragments":["be"]},{"Key":"much worse","Fragments":["in"]},{"Key":"worse in","Fragments":["wall-time"]},{"Key":"in wall-time","Fragments":["than"]},{"Key":"wall-time than","Fragments":["O(n²)"]},{"Key":"than O(n²)","Fragments":["until"]},{"Key":"O(n²) until","Fragments":["a"]},{"Key":"certain n","Fragments":["is"]},{"Key":"n is","Fragments":["reached.","the"]},{"Key":"is reached.","Fragments":["And","An"]},{"Key":"reached. And","Fragments":["I"]},{"Key":"do any","Fragments":["benchmarks","special"]},{"Key":"any benchmarks","Fragments":["right"]},{"Key":"benchmarks right","Fragments":["now,"]},{"Key":"right now,","Fragments":["that","but","the","my"]},{"Key":"now, that","Fragments":["express"]},{"Key":"that express","Fragments":["the"]},{"Key":"the `N`","Fragments":["in"]},{"Key":"`N` in","Fragments":["O(N"]},{"Key":"in O(N","Fragments":["log"]},{"Key":"N) in","Fragments":["milliseconds."]},{"Key":" Understood.","Fragments":["std::map"]},{"Key":"Understood. std::map","Fragments":["has"]},{"Key":"std::map has","Fragments":["a"]},{"Key":"very small","Fragments":["niche"]},{"Key":"small niche","Fragments":["where"]},{"Key":"niche where","Fragments":["it's"]},{"Key":"where it's","Fragments":["the","used)."]},{"Key":"best choice","Fragments":["(boost::flat_map"]},{"Key":"choice (boost::flat_map","Fragments":["really"]},{"Key":"(boost::flat_map really","Fragments":["encroaches"]},{"Key":"really encroaches","Fragments":["a"]},{"Key":"encroaches a","Fragments":["lot),"]},{"Key":"a lot),","Fragments":["which"]},{"Key":"lot), which","Fragments":["is"]},{"Key":"was arguing","Fragments":["for"]},{"Key":"arguing for","Fragments":["using"]},{"Key":"histogram -","Fragments":["since"]},{"Key":"- since","Fragments":["the"]},{"Key":"short contiguous","Fragments":["range"]},{"Key":"contiguous range","Fragments":["(specifically"]},{"Key":"range (specifically","Fragments":["0"]},{"Key":"(specifically 0","Fragments":["to"]},{"Key":"to 25","Fragments":["after"]},{"Key":"25 after","Fragments":["a"]},{"Key":"after a","Fragments":["simple","day,","bit","couple","question"]},{"Key":" Honestly","Fragments":["I","I"]},{"Key":"Honestly I","Fragments":["doubt","think"]},{"Key":"I doubt","Fragments":["anyone","you'd","string_ref::iterator","it.","that"]},{"Key":"doubt anyone","Fragments":["would"]},{"Key":"anyone would","Fragments":["pass","think"]},{"Key":"would pass","Fragments":["a"]},{"Key":"in with","Fragments":["more"]},{"Key":"than 65535","Fragments":["copies"]},{"Key":"65535 copies","Fragments":["of"]},{"Key":"same letter,","Fragments":["so","but"]},{"Key":"letter, so","Fragments":["that"]},{"Key":"that array","Fragments":["could"]},{"Key":"array could","Fragments":["easily","beat"]},{"Key":"be of","Fragments":["uint16_t,"]},{"Key":"of uint16_t,","Fragments":["bringing"]},{"Key":"uint16_t, bringing","Fragments":["the"]},{"Key":"bringing the","Fragments":["total","`std`"]},{"Key":"the total","Fragments":["memory","when","when","when","of"]},{"Key":"total memory","Fragments":["usage"]},{"Key":"memory usage","Fragments":["to","is","thing?","is"]},{"Key":"usage to","Fragments":["two","a"]},{"Key":"to two","Fragments":["bytes"]},{"Key":"two bytes","Fragments":["per"]},{"Key":"bytes per","Fragments":["letter"]},{"Key":"per letter","Fragments":["of"]},{"Key":"letter of","Fragments":["the","a","message?","the","the","the"]},{"Key":"the alphabet","Fragments":["(regardless","to"]},{"Key":"alphabet (regardless","Fragments":["of"]},{"Key":"(regardless of","Fragments":["string"]},{"Key":"string size)","Fragments":["with"]},{"Key":"size) with","Fragments":["no"]},{"Key":"other overhead","Fragments":["and"]},{"Key":"dynamic anything,","Fragments":["and"]},{"Key":"anything, and","Fragments":["the"]},{"Key":"most predictable","Fragments":["memory"]},{"Key":"predictable memory","Fragments":["layout"]},{"Key":"memory layout","Fragments":["one"]},{"Key":"layout one","Fragments":["can"]},{"Key":"one can","Fragments":["ask","argue","be","pass"]},{"Key":"can ask","Fragments":["for."]},{"Key":"ask for.","Fragments":["On"]},{"Key":"for. On","Fragments":["my"]},{"Key":"my machine","Fragments":["an","32-bit","without"]},{"Key":"machine an","Fragments":["SSO"]},{"Key":"an SSO","Fragments":["string"]},{"Key":"SSO string","Fragments":["that's"]},{"Key":"string that's","Fragments":["small"]},{"Key":"that's small","Fragments":["enough"]},{"Key":"small enough","Fragments":["that","and","to"]},{"Key":"enough that","Fragments":["it"]},{"Key":"doesn't use","Fragments":["dynamic","this"]},{"Key":"use dynamic","Fragments":["memory"]},{"Key":"still 32","Fragments":["bytes,"]},{"Key":"32 bytes,","Fragments":["which"]},{"Key":"bytes, which","Fragments":["admittedly"]},{"Key":"which admittedly","Fragments":["is"]},{"Key":"admittedly is","Fragments":["less"]},{"Key":"than 52,","Fragments":["but"]},{"Key":"52, but","Fragments":["not"]},{"Key":"whole lot.","Fragments":["Of"]},{"Key":"lot. Of","Fragments":["course"]},{"Key":"course the","Fragments":["array"]},{"Key":"could beat","Fragments":["even"]},{"Key":"beat even","Fragments":["that"]},{"Key":"even that","Fragments":["short"]},{"Key":"that short","Fragments":["case"]},{"Key":"short case","Fragments":["if"]},{"Key":"case if","Fragments":["one"]},{"Key":"is willing","Fragments":["to"]},{"Key":"to say","Fragments":["no","that","I'm","on","is","that","auto\u0026","that","that","with"]},{"Key":"say no","Fragments":["more"]},{"Key":"than 255","Fragments":["copies"]},{"Key":"255 copies","Fragments":["of"]},{"Key":"letter, but","Fragments":["that"]},{"Key":"that seems","Fragments":["like","a","sort","more"]},{"Key":"like bordering","Fragments":["on"]},{"Key":"bordering on","Fragments":["sacrificing"]},{"Key":"on sacrificing","Fragments":["correctness."]},{"Key":"this though…","Fragments":["I"]},{"Key":"though… I","Fragments":["only"]},{"Key":"the upload,","Fragments":["so"]},{"Key":"upload, so","Fragments":["I"]},{"Key":"other solutions.","Fragments":["I'm"]},{"Key":"solutions. I'm","Fragments":["open"]},{"Key":"I'm open","Fragments":["for","to"]},{"Key":"open for","Fragments":["nits!"]},{"Key":"only containing","Fragments":["`static`","the"]},{"Key":"containing `static`","Fragments":["methods,"]},{"Key":"`static` methods,","Fragments":["you"]},{"Key":"methods, you","Fragments":["should"]},{"Key":"Why a","Fragments":["struct?"]},{"Key":"a struct?","Fragments":["I"]},{"Key":"struct? I","Fragments":["had"]},{"Key":"had understand","Fragments":["if"]},{"Key":"understand if","Fragments":["it","you"]},{"Key":"`class` or","Fragments":["a"]},{"Key":"`namespace` but","Fragments":["a"]},{"Key":"really didn't","Fragments":["want"]},{"Key":"iterate (in","Fragments":["a"]},{"Key":"a peculiar","Fragments":["fashion)"]},{"Key":"peculiar fashion)","Fragments":["over"]},{"Key":"fashion) over","Fragments":["internal"]},{"Key":"over internal","Fragments":["memory."]},{"Key":"internal memory.","Fragments":["But"]},{"Key":"memory. But","Fragments":["lazy"]},{"Key":"But lazy","Fragments":["ranges..."]},{"Key":"lazy ranges...","Fragments":["I'm"]},{"Key":"ranges... I'm","Fragments":["not"]},{"Key":"not comfortable","Fragments":["with"]},{"Key":"and writing","Fragments":["my"]},{"Key":"own just","Fragments":["yet,"]},{"Key":"just yet,","Fragments":["and"]},{"Key":"suspect few","Fragments":["are."]},{"Key":"Thanks @raoul,","Fragments":["admittedly,"]},{"Key":"@raoul, admittedly,","Fragments":["I"]},{"Key":"admittedly, I","Fragments":["didn't"]},{"Key":"of iterating","Fragments":["over"]},{"Key":"string earlier.","Fragments":["This"]},{"Key":"earlier. This","Fragments":["makes"]},{"Key":"I uploaded","Fragments":["another","another"]},{"Key":"uploaded another","Fragments":["iteration","iteration."]},{"Key":"iteration with","Fragments":["the","3"]},{"Key":" Im","Fragments":["really"]},{"Key":"Im really","Fragments":["unhappy"]},{"Key":"really unhappy","Fragments":["with"]},{"Key":"unhappy with","Fragments":["`get_line()`,","the","the"]},{"Key":"with `get_line()`,","Fragments":["suggestions"]},{"Key":"`get_line()`, suggestions","Fragments":["welcome!"]},{"Key":"course suggestions","Fragments":["are"]},{"Key":"suggestions are","Fragments":["welcomed","welcome."]},{"Key":"are welcomed","Fragments":["for"]},{"Key":"welcomed for","Fragments":["every"]},{"Key":"every single","Fragments":["line"]},{"Key":"need that","Fragments":["lambda","performance"]},{"Key":"that lambda","Fragments":["as"]},{"Key":"lambda as","Fragments":["4th"]},{"Key":"as 4th","Fragments":["argument"]},{"Key":"4th argument","Fragments":["of"]},{"Key":"argument of","Fragments":["`transform`:","function","a","0.","your","```isUppercase```"]},{"Key":"// lowercase","Fragments":["functions"]},{"Key":"lowercase functions","Fragments":["for"]},{"Key":"my anagram","Fragments":["solution"]},{"Key":"std::string lowercase(std::string","Fragments":["const"]},{"Key":"lowercase(std::string const","Fragments":["\u0026str)"]},{"Key":"const \u0026str)","Fragments":["{"]},{"Key":"std::string result","Fragments":["{str};"]},{"Key":" std::transform(str.cbegin(),","Fragments":["str.cend(),"]},{"Key":"std::transform(str.cbegin(), str.cend(),","Fragments":["result.begin(),"]},{"Key":"str.cend(), result.begin(),","Fragments":["::tolower);"]},{"Key":"Line 5","Fragments":["shows"]},{"Key":"5 shows","Fragments":["the"]},{"Key":"shows the","Fragments":["important"]},{"Key":"the important","Fragments":["part,"]},{"Key":"important part,","Fragments":["the"]},{"Key":"part, the","Fragments":["call"]},{"Key":"one was","Fragments":["a","kind","painful","taking"]},{"Key":"more fun","Fragments":["than"]},{"Key":"fun than","Fragments":["the"]},{"Key":"bit unhappy","Fragments":["with"]},{"Key":"wasn't able","Fragments":["to","to","to"]},{"Key":"pass `strand`s","Fragments":["reference"]},{"Key":"`strand`s reference","Fragments":["to"]},{"Key":"to `count(std::string)`,","Fragments":["but"]},{"Key":"`count(std::string)`, but","Fragments":["need"]},{"Key":"but need","Fragments":["to"]},{"Key":"it over","Fragments":["there…","appending"]},{"Key":"iterating `strand`","Fragments":["4"]},{"Key":"`strand` 4","Fragments":["times"]},{"Key":"4 times","Fragments":["in","\u003ci\u003ei.e."]},{"Key":"in `nucleotide_counts`,","Fragments":["can"]},{"Key":"`nucleotide_counts`, can","Fragments":["you"]},{"Key":" C++","Fragments":["is","provides","has","has"]},{"Key":"a library-centric","Fragments":["language,"]},{"Key":"library-centric language,","Fragments":["so"]},{"Key":"so to","Fragments":["make","speak."]},{"Key":"things easy","Fragments":["you"]},{"Key":"easy you","Fragments":["pick"]},{"Key":"you pick","Fragments":["libraries"]},{"Key":"pick libraries","Fragments":["that"]},{"Key":"libraries that","Fragments":["make","I"]},{"Key":"that make","Fragments":["them","use","little"]},{"Key":"them easy.","Fragments":["Like"]},{"Key":"easy. Like","Fragments":["I"]},{"Key":"Like I","Fragments":["think","couldn't"]},{"Key":"pretty silly","Fragments":["to"]},{"Key":"lowercase string","Fragments":["with"]},{"Key":" boost::to_lower(","Fragments":["str","w"]},{"Key":"boost::to_lower( str","Fragments":[");"]},{"Key":"To do","Fragments":["it"]},{"Key":"copy like","Fragments":["your"]},{"Key":"your to_lower","Fragments":["does,"]},{"Key":"to_lower does,","Fragments":["rather"]},{"Key":"does, rather","Fragments":["than"]},{"Key":"than modifying","Fragments":["it"]},{"Key":" boost::to_lower_copy(","Fragments":["str"]},{"Key":"boost::to_lower_copy( str","Fragments":[");"]},{"Key":"constructor I","Fragments":["probably","now","was"]},{"Key":"wouldn't use","Fragments":["operator[],","such","this"]},{"Key":"use operator[],","Fragments":["because"]},{"Key":"operator[], because","Fragments":["if"]},{"Key":"someone gives","Fragments":["you"]},{"Key":"you invalid","Fragments":["input"]},{"Key":"to suddenly","Fragments":["store","start"]},{"Key":"suddenly store","Fragments":["'#'"]},{"Key":"store '#'","Fragments":["nucleotides"]},{"Key":"'#' nucleotides","Fragments":["in"]},{"Key":"internal map","Fragments":["(which"]},{"Key":"map (which","Fragments":["would","is"]},{"Key":"(which would","Fragments":["allow","still"]},{"Key":"allow the","Fragments":["test"]},{"Key":"in count","Fragments":["to"]},{"Key":"to slide","Fragments":["by)"]},{"Key":"slide by)","Fragments":["-"]},{"Key":"by) -","Fragments":["if"]},{"Key":"map it's","Fragments":["not"]},{"Key":"not valid","Fragments":["and"]},{"Key":"valid and","Fragments":["should"]},{"Key":"be skipped","Fragments":["or"]},{"Key":"skipped or","Fragments":["throw"]},{"Key":"or throw","Fragments":["or"]},{"Key":"throw or","Fragments":["something."]},{"Key":"or something.","Fragments":["If"]},{"Key":"something. If","Fragments":["you"]},{"Key":"throw -","Fragments":["that's","but"]},{"Key":"- that's","Fragments":["easy","who"]},{"Key":"that's easy","Fragments":["just"]},{"Key":"easy just","Fragments":["use"]},{"Key":"use at()","Fragments":["in"]},{"Key":"at() in","Fragments":["place"]},{"Key":"of operator[].","Fragments":["If"]},{"Key":"operator[]. If","Fragments":["you"]},{"Key":"to gently","Fragments":["skip"]},{"Key":"gently skip","Fragments":["it"]},{"Key":"skip it","Fragments":["you"]},{"Key":"it you","Fragments":["can","want"]},{"Key":"use find(),","Fragments":["test"]},{"Key":"find(), test","Fragments":["it"]},{"Key":"it against","Fragments":["end()"]},{"Key":"against end()","Fragments":["and","to"]},{"Key":"end() and","Fragments":["if"]},{"Key":"preference I","Fragments":["like","prefer"]},{"Key":"parameter names","Fragments":["available","with","are"]},{"Key":"names available","Fragments":["even"]},{"Key":"available even","Fragments":["in"]},{"Key":"in forward","Fragments":["declarations"]},{"Key":"forward declarations","Fragments":["-","is","in"]},{"Key":"declarations -","Fragments":["like"]},{"Key":"- like","Fragments":["the","using"]},{"Key":"your constructor.","Fragments":["But,"]},{"Key":"constructor. But,","Fragments":["in"]},{"Key":"But, in","Fragments":["my"]},{"Key":"opinion, either","Fragments":["having"]},{"Key":"either having","Fragments":["the"]},{"Key":"the all","Fragments":["names","side-by-side","caps"]},{"Key":"the declarations","Fragments":["or","in"]},{"Key":"declarations or","Fragments":["not"]},{"Key":"or not","Fragments":["having","multiple","it","this","but","(I","--","_","\"beer\"","to"]},{"Key":"having them","Fragments":["in","in"]},{"Key":"any forward","Fragments":["declarations"]},{"Key":"declarations is","Fragments":["better"]},{"Key":"can. I","Fragments":["might"]},{"Key":"of 4","Fragments":["integers,","operations.","cases","meaning"]},{"Key":"4 integers,","Fragments":["one"]},{"Key":"integers, one","Fragments":["integer"]},{"Key":"one integer","Fragments":["for"]},{"Key":"integer for","Fragments":["each","your"]},{"Key":"each nucleotide.","Fragments":["Then,"]},{"Key":"nucleotide. Then,","Fragments":["iterate"]},{"Key":"Then, iterate","Fragments":["over"]},{"Key":"strand and","Fragments":["increment"]},{"Key":"a nucleotide","Fragments":["integer"]},{"Key":"nucleotide integer","Fragments":["in"]},{"Key":"integer in","Fragments":["the"]},{"Key":"each nucleotide","Fragments":["I"]},{"Key":"nucleotide I","Fragments":["encounter"]},{"Key":"I encounter","Fragments":["in","an"]},{"Key":"encounter in","Fragments":["the"]},{"Key":"int nucleotides[]","Fragments":["="]},{"Key":"nucleotides[] =","Fragments":["{"]},{"Key":"{ 0","Fragments":["};"]},{"Key":" for(auto","Fragments":["const\u0026"]},{"Key":"for(auto const\u0026","Fragments":["n"]},{"Key":"const\u0026 n","Fragments":[":"]},{"Key":"n :","Fragments":["strand)"]},{"Key":"sure this","Fragments":["is","is","code","could"]},{"Key":"an improvement.","Fragments":["First,"]},{"Key":"improvement. First,","Fragments":["because"]},{"Key":"First, because","Fragments":["it's"]},{"Key":"more code.","Fragments":["But"]},{"Key":"code. But","Fragments":["also","if","consider"]},{"Key":"this transforms","Fragments":["4"]},{"Key":"transforms 4","Fragments":["loops"]},{"Key":"4 loops","Fragments":["of"]},{"Key":"loops of","Fragments":["one"]},{"Key":"of one","Fragments":["operation","generic"]},{"Key":"one operation","Fragments":["to"]},{"Key":"operation to","Fragments":["one","have"]},{"Key":"one loop","Fragments":["of","that"]},{"Key":"first case","Fragments":["I"]},{"Key":"only look","Fragments":["for"]},{"Key":"look for","Fragments":["'A's","'?'.","and","properties","words.","the","only","a"]},{"Key":"for 'A's","Fragments":["in"]},{"Key":"'A's in","Fragments":["a"]},{"Key":"single loop,","Fragments":["then","and"]},{"Key":"loop, then","Fragments":["for","check"]},{"Key":"then for","Fragments":["'T's"]},{"Key":"for 'T's","Fragments":["in"]},{"Key":"'T's in","Fragments":["a"]},{"Key":"loop, and","Fragments":["so","have","there","descends"]},{"Key":"second case","Fragments":["I"]},{"Key":"I compare","Fragments":["an"]},{"Key":"compare an","Fragments":["element"]},{"Key":"element against","Fragments":["'A',"]},{"Key":"against 'A',","Fragments":["'T',"]},{"Key":"'A', 'T',","Fragments":["'C',"]},{"Key":"'T', 'C',","Fragments":["and"]},{"Key":"'C', and","Fragments":["'G'"]},{"Key":"and 'G'","Fragments":["in"]},{"Key":"'G' in","Fragments":["each"]},{"Key":"in each","Fragments":["iteration.","case","method","verse,","language.","if","call?","word","function"]},{"Key":"with input","Fragments":["iterators,"]},{"Key":"input iterators,","Fragments":["where"]},{"Key":"iterators, where","Fragments":["I"]},{"Key":"only get","Fragments":["one"]},{"Key":"pass. But","Fragments":["here"]},{"Key":"But here","Fragments":["I","the"]},{"Key":"here I","Fragments":["deal","think;"]},{"Key":"with random-access","Fragments":["iterators."]},{"Key":" @estefania","Fragments":["he"]},{"Key":"@estefania he","Fragments":["does"]},{"Key":"he does","Fragments":["need"]},{"Key":"does need","Fragments":["the","to"]},{"Key":"the lambda.","Fragments":["Or"]},{"Key":"lambda. Or","Fragments":["else"]},{"Key":"Or else","Fragments":["replace"]},{"Key":"else replace","Fragments":["it"]},{"Key":"function name","Fragments":["of"]},{"Key":" std::transform(...,","Fragments":["mytoupper)","mytoupper{});"]},{"Key":"function object","Fragments":["wrapper,"]},{"Key":"or pass","Fragments":["it","the","it"]},{"Key":"function signature.","Fragments":["The","That"]},{"Key":"signature. The","Fragments":["standard"]},{"Key":"standard allows","Fragments":["library"]},{"Key":"allows library","Fragments":["vendors"]},{"Key":"library vendors","Fragments":["to"]},{"Key":"vendors to","Fragments":["provide"]},{"Key":"provide overloads","Fragments":["of"]},{"Key":"overloads of","Fragments":["`std::tolower()`,"]},{"Key":"of `std::tolower()`,","Fragments":["so"]},{"Key":"`std::tolower()`, so","Fragments":["the"]},{"Key":"name `std::tolower`","Fragments":["can"]},{"Key":"`std::tolower` can","Fragments":["refer"]},{"Key":"can refer","Fragments":["to","to"]},{"Key":"an ovelroad","Fragments":["set","of"]},{"Key":"ovelroad set","Fragments":["and"]},{"Key":"set and","Fragments":["not"]},{"Key":"single function.","Fragments":["The"]},{"Key":"might need","Fragments":["help.","a","to","a"]},{"Key":"need help.","Fragments":["If"]},{"Key":"help. If","Fragments":["it"]},{"Key":"compiles without","Fragments":["the","errors."]},{"Key":"the wrapper","Fragments":["or"]},{"Key":"wrapper or","Fragments":["the"]},{"Key":"explicit signature","Fragments":["doesn't"]},{"Key":"signature doesn't","Fragments":["mean"]},{"Key":"doesn't mean","Fragments":["the"]},{"Key":"mean the","Fragments":["code","same"]},{"Key":"you @aisha,","Fragments":["that"]},{"Key":"@aisha, that","Fragments":["might"]},{"Key":"might explain","Fragments":["my"]},{"Key":"explain my","Fragments":["problems","thought"]},{"Key":"my problems","Fragments":["with"]},{"Key":"for rna-converter,","Fragments":["where"]},{"Key":"rna-converter, where","Fragments":["I"]},{"Key":"just throw","Fragments":["my","in"]},{"Key":"throw my","Fragments":["function"]},{"Key":"in but","Fragments":["needed","this"]},{"Key":"but needed","Fragments":["the"]},{"Key":"the wrapping","Fragments":["lambda."]},{"Key":"to portability,","Fragments":["I"]},{"Key":"portability, I","Fragments":["think"]},{"Key":"think @cedrick","Fragments":["is"]},{"Key":"@cedrick is","Fragments":["right"]},{"Key":"is right","Fragments":["here."]},{"Key":"right here.","Fragments":["The"]},{"Key":"here. The","Fragments":["standard","common"]},{"Key":"requires the","Fragments":["overload"]},{"Key":"the overload","Fragments":["you","which"]},{"Key":"overload you","Fragments":["want"]},{"Key":"want from","Fragments":["cctype"]},{"Key":"from cctype","Fragments":["but"]},{"Key":"cctype but","Fragments":["it"]},{"Key":"a templated","Fragments":["overload","implicit"]},{"Key":"templated overload","Fragments":["in"]},{"Key":" Requesting","Fragments":["it"]},{"Key":"Requesting it","Fragments":["*NOT*"]},{"Key":"it *NOT*","Fragments":["in"]},{"Key":"*NOT* in","Fragments":["the"]},{"Key":"std excludes","Fragments":["the"]},{"Key":"excludes the","Fragments":["locale"]},{"Key":"the locale","Fragments":["overloads","for"]},{"Key":"locale overloads","Fragments":["and"]},{"Key":"overloads and","Fragments":["relies"]},{"Key":"your standard","Fragments":["library"]},{"Key":"library implementation","Fragments":["(like","so"]},{"Key":"implementation (like","Fragments":["most)"]},{"Key":"(like most)","Fragments":["leaves"]},{"Key":"most) leaves","Fragments":["the"]},{"Key":"leaves the","Fragments":["functions","current"]},{"Key":"library's ctype.h","Fragments":["in"]},{"Key":"ctype.h in","Fragments":["the"]},{"Key":"to pulling","Fragments":["it"]},{"Key":"pulling it","Fragments":["into","out"]},{"Key":"into std","Fragments":["(probably"]},{"Key":"std (probably","Fragments":["via"]},{"Key":"(probably via","Fragments":["a"]},{"Key":"via a","Fragments":["using","reference"]},{"Key":"using statement).","Fragments":["But"]},{"Key":"statement). But","Fragments":["someone"]},{"Key":"But someone","Fragments":["else's"]},{"Key":"else's C++","Fragments":["standard"]},{"Key":"library isn't","Fragments":["actually"]},{"Key":"isn't actually","Fragments":["required"]},{"Key":"actually required","Fragments":["to"]},{"Key":"- for","Fragments":["them","assigning","some"]},{"Key":"for them","Fragments":["::tolower","to","using"]},{"Key":"them ::tolower","Fragments":["might"]},{"Key":"::tolower might","Fragments":["not"]},{"Key":"of cases","Fragments":["I'd"]},{"Key":"cases I'd","Fragments":["fix","prefer","prefer"]},{"Key":"I'd fix","Fragments":["this"]},{"Key":"fix this","Fragments":["with","(you"]},{"Key":"what @cedrick","Fragments":["meant"]},{"Key":"@cedrick meant","Fragments":["by"]},{"Key":"meant by","Fragments":["passing"]},{"Key":"passing it","Fragments":["with"]},{"Key":"signature. That","Fragments":["said,"]},{"Key":"said, honestly,","Fragments":["I"]},{"Key":"honestly, I","Fragments":["usually"]},{"Key":"usually do","Fragments":["the"]},{"Key":"the ::tolower","Fragments":["and"]},{"Key":"::tolower and","Fragments":["figure"]},{"Key":"and figure","Fragments":["I'll"]},{"Key":"figure I'll","Fragments":["fix"]},{"Key":"I'll fix","Fragments":["it","that","it","that"]},{"Key":"it if","Fragments":["I'm","you","it's","you","you","necessary.","possible:"]},{"Key":"if I'm","Fragments":["ever","missing","using","doing","wrong","mistaken!"]},{"Key":"I'm ever","Fragments":["on"]},{"Key":"ever on","Fragments":["a"]},{"Key":"a platform","Fragments":["where"]},{"Key":"platform where","Fragments":["that"]},{"Key":"where that","Fragments":["doesn't","character","would"]},{"Key":"doesn't work.","Fragments":["It","Is"]},{"Key":"work. It","Fragments":["wouldn't","failed"]},{"Key":"to fix.","Fragments":["But"]},{"Key":"fix. But","Fragments":["I'm"]},{"Key":"criticize anyone","Fragments":["for"]},{"Key":"anyone for","Fragments":["being"]},{"Key":"for being","Fragments":["more"]},{"Key":"more portable","Fragments":["than","and"]},{"Key":"portable than","Fragments":["I"]},{"Key":"then call","Fragments":["boost::to_lower","trim","a","```size()```"]},{"Key":"call boost::to_lower","Fragments":["on"]},{"Key":"boost::to_lower on","Fragments":["it."]},{"Key":"It communicates","Fragments":["the"]},{"Key":"communicates the","Fragments":["performance"]},{"Key":"performance implication","Fragments":["upfront"]},{"Key":"implication upfront","Fragments":["and"]},{"Key":"upfront and","Fragments":["involves"]},{"Key":"involves less","Fragments":["writing."]},{"Key":"to. You","Fragments":["could","should","can"]},{"Key":"a std::tolower","Fragments":["inside"]},{"Key":"std::tolower inside","Fragments":["your"]},{"Key":"inside your","Fragments":["lambda.","methods,","private","cpp"]},{"Key":"That's true.","Fragments":["I"]},{"Key":"hadn't considered","Fragments":["the","that"]},{"Key":"considered the","Fragments":["char"]},{"Key":"For completeness","Fragments":["I"]},{"Key":"completeness I","Fragments":["should"]},{"Key":"should add","Fragments":["a","some","something"]},{"Key":"a null-terminated","Fragments":["pointer","c"]},{"Key":"null-terminated pointer","Fragments":["case"]},{"Key":"pointer case","Fragments":["I"]},{"Key":"I suppose.","Fragments":["It's","The"]},{"Key":"suppose. It's","Fragments":["a"]},{"Key":"bit dangerous","Fragments":["though"]},{"Key":"dangerous though","Fragments":["as"]},{"Key":"though as","Fragments":["missing"]},{"Key":"as missing","Fragments":["the"]},{"Key":"missing the","Fragments":["terminator","point"]},{"Key":"the terminator","Fragments":["will"]},{"Key":"terminator will","Fragments":["lead"]},{"Key":"will lead","Fragments":["to"]},{"Key":"an infinite","Fragments":["loop.","loop","number"]},{"Key":"infinite loop.","Fragments":["As"]},{"Key":"loop. As","Fragments":["it"]},{"Key":"should fail","Fragments":["to"]},{"Key":"to compile","Fragments":["at","on","with","it.","it.","while","and"]},{"Key":"compile at","Fragments":["least."]},{"Key":"at least.","Fragments":["That's"]},{"Key":"least. That's","Fragments":["better"]},{"Key":"That's better","Fragments":["than"]},{"Key":"than nothing.","Fragments":["Though"]},{"Key":"nothing. Though","Fragments":["the"]},{"Key":"Though the","Fragments":["error","rules"]},{"Key":" Sadly","Fragments":["trying"]},{"Key":"Sadly trying","Fragments":["to"]},{"Key":"to specialize","Fragments":["for"]},{"Key":"specialize for","Fragments":["pointer"]},{"Key":"for pointer","Fragments":["types","work."]},{"Key":"pointer types","Fragments":["wont"]},{"Key":"types wont","Fragments":["work"]},{"Key":"wont work","Fragments":["as"]},{"Key":"as overload","Fragments":["resolution"]},{"Key":"overload resolution","Fragments":["will"]},{"Key":"resolution will","Fragments":["select"]},{"Key":"will select","Fragments":["that"]},{"Key":"select that","Fragments":["version"]},{"Key":"that version","Fragments":["over"]},{"Key":"array version.","Fragments":["I"]},{"Key":"version. I","Fragments":["had"]},{"Key":"had forgotten","Fragments":["this"]},{"Key":"forgotten this","Fragments":["and"]},{"Key":"it out.","Fragments":["I","First,","Thanks!","Addressed"]},{"Key":"don't much","Fragments":["feel","like"]},{"Key":"much feel","Fragments":["like"]},{"Key":"like trying","Fragments":["to"]},{"Key":"be (too?)","Fragments":["clever"]},{"Key":"(too?) clever","Fragments":["and"]},{"Key":"clever and","Fragments":["using","handles","clear","may"]},{"Key":"using SFINAE","Fragments":["to"]},{"Key":"SFINAE to","Fragments":["exclude"]},{"Key":"to exclude","Fragments":["the","invalid"]},{"Key":"exclude the","Fragments":["pointer"]},{"Key":"pointer overloads","Fragments":["in"]},{"Key":"of arrays.","Fragments":["I"]},{"Key":"arrays. I","Fragments":["believe"]},{"Key":"believe it's","Fragments":["possible","part","necessary."]},{"Key":"You probably","Fragments":["don't"]},{"Key":"use operator[]","Fragments":["on"]},{"Key":"operator[] on","Fragments":["your"]},{"Key":"map. If","Fragments":["I"]},{"Key":"I pass","Fragments":["in","an","in"]},{"Key":"in \"Huh?\"","Fragments":["you"]},{"Key":"\"Huh?\" you","Fragments":["don't"]},{"Key":"suddenly start","Fragments":["storing"]},{"Key":"start storing","Fragments":["the"]},{"Key":"the score","Fragments":["of"]},{"Key":"score of","Fragments":["zero"]},{"Key":"zero for","Fragments":["the","the"]},{"Key":"character '?'.","Fragments":["Well"]},{"Key":"'?'. Well","Fragments":["I"]},{"Key":"Well I","Fragments":["guess","think"]},{"Key":"the result,","Fragments":["but"]},{"Key":"result, but","Fragments":["it's"]},{"Key":"it's wasteful.","Fragments":["at()"]},{"Key":"wasteful. at()","Fragments":["would"]},{"Key":"at() would","Fragments":["throw"]},{"Key":"would throw","Fragments":["an","an","an","an","in"]},{"Key":"exception for","Fragments":["invalid","this"]},{"Key":"invalid characters,","Fragments":["or"]},{"Key":"characters, or","Fragments":["you"]},{"Key":"use find","Fragments":["and"]},{"Key":"find and","Fragments":["test","replace"]},{"Key":"test against","Fragments":["end()"]},{"Key":"end() to","Fragments":["handle"]},{"Key":"handle it","Fragments":["however"]},{"Key":"it however","Fragments":["you"]},{"Key":"however you","Fragments":["like.","do","could"]},{"Key":"you like.","Fragments":["And"]},{"Key":"like. And","Fragments":["if"]},{"Key":"And if","Fragments":["you","the","it's","you","you","hasAlpha=false,","you've"]},{"Key":"of those,","Fragments":["your"]},{"Key":"those, your","Fragments":["map"]},{"Key":"map can","Fragments":["be"]},{"Key":"const which","Fragments":["seems"]},{"Key":"actually want","Fragments":["to"]},{"Key":"But array","Fragments":["or"]},{"Key":"array or","Fragments":["even","a"]},{"Key":"even vector","Fragments":["would"]},{"Key":"vector would","Fragments":["accomplish","use"]},{"Key":"would accomplish","Fragments":["the"]},{"Key":"accomplish the","Fragments":["task","string","task","same"]},{"Key":"the task","Fragments":["more","of","at","is","and"]},{"Key":"task more","Fragments":["efficiently"]},{"Key":"more efficiently","Fragments":["and"]},{"Key":"efficiently and","Fragments":["with"]},{"Key":"with less","Fragments":["typing","potential"]},{"Key":"less typing","Fragments":["than"]},{"Key":"typing than","Fragments":["map"]},{"Key":"than map","Fragments":["(because"]},{"Key":"map (because","Fragments":["you"]},{"Key":"(because you","Fragments":["wouldn't","might","might","don't"]},{"Key":"to list","Fragments":["out","out"]},{"Key":"list out","Fragments":["the","the"]},{"Key":"the letters,","Fragments":["just"]},{"Key":"letters, just","Fragments":["the"]},{"Key":"the scores","Fragments":["in"]},{"Key":"scores in","Fragments":["order)."]},{"Key":"in order).","Fragments":["Instead"]},{"Key":"order). Instead","Fragments":["letter_worth.at(toupper(letter))"]},{"Key":"Instead letter_worth.at(toupper(letter))","Fragments":["you'd"]},{"Key":"letter_worth.at(toupper(letter)) you'd","Fragments":["have"]},{"Key":"have letter_worth.at(toupper(letter)-'A'),","Fragments":["which"]},{"Key":"letter_worth.at(toupper(letter)-'A'), which","Fragments":["doesn't"]},{"Key":"seem too","Fragments":["bad."]},{"Key":"That combination","Fragments":["of"]},{"Key":"the local","Fragments":["variable","system","generate"]},{"Key":"variable score","Fragments":["and"]},{"Key":"score and","Fragments":["the","one"]},{"Key":"the for_each","Fragments":["looks"]},{"Key":"for_each looks","Fragments":["an"]},{"Key":"looks an","Fragments":["awful"]},{"Key":"an awful","Fragments":["lot"]},{"Key":"awful lot","Fragments":["like"]},{"Key":"not taking","Fragments":["advantage"]},{"Key":"the tree,","Fragments":["map"]},{"Key":"tree, map","Fragments":["seems"]},{"Key":"an odd","Fragments":["choice.","choice"]},{"Key":"odd choice.","Fragments":["Why"]},{"Key":"choice. Why","Fragments":["not"]},{"Key":"const std::array\u003cstd::pair\u003cstd::string,int\u003e,7\u003e","Fragments":["scores"]},{"Key":"it's fine","Fragments":["to"]},{"Key":"compile on","Fragments":["that","machines"]},{"Key":"case. The","Fragments":["caller","thing"]},{"Key":"The caller","Fragments":["can"]},{"Key":"caller can","Fragments":["still","deal","make"]},{"Key":"do compute(","Fragments":["string_ref(ptr1),"]},{"Key":"compute( string_ref(ptr1),","Fragments":["string_ref(ptr2)"]},{"Key":"string_ref(ptr1), string_ref(ptr2)","Fragments":[")"]},{"Key":"string_ref(ptr2) )","Fragments":["and"]},{"Key":"will work","Fragments":["fine","exactly","for","even","fine","because","just","for"]},{"Key":"work fine","Fragments":["with","if"]},{"Key":"your code.","Fragments":["But","Also,","You","Making","For","Please"]},{"Key":"do specialize...","Fragments":["it's"]},{"Key":"specialize... it's","Fragments":["not"]},{"Key":"really an","Fragments":["infinite"]},{"Key":"infinite loop","Fragments":[":)","in"]},{"Key":"loop :)","Fragments":["There's"]},{"Key":":) There's","Fragments":["not"]},{"Key":"There's not","Fragments":["an","much"]},{"Key":"infinite number","Fragments":["of"]},{"Key":"of pointers","Fragments":["in","to","and"]},{"Key":"pointers in","Fragments":["your"]},{"Key":"your address","Fragments":["space."]},{"Key":"address space.","Fragments":["It"]},{"Key":"space. It","Fragments":["might","allocates"]},{"Key":"might segfault,","Fragments":["or"]},{"Key":"segfault, or","Fragments":["maybe"]},{"Key":"maybe it'll","Fragments":["find"]},{"Key":"it'll find","Fragments":["a"]},{"Key":"a zero-valued","Fragments":["byte"]},{"Key":"zero-valued byte","Fragments":["in"]},{"Key":"byte in","Fragments":["some"]},{"Key":"some runtime-legal","Fragments":["(but"]},{"Key":"runtime-legal (but","Fragments":["completely"]},{"Key":"(but completely","Fragments":["unrelated)"]},{"Key":"completely unrelated)","Fragments":["chunk"]},{"Key":"unrelated) chunk","Fragments":["of"]},{"Key":"chunk of","Fragments":["memory."]},{"Key":"of memory.","Fragments":["Either","If"]},{"Key":"memory. Either","Fragments":["way,"]},{"Key":"Either way,","Fragments":["it's","I","your","not"]},{"Key":"not your","Fragments":["fault","intention"]},{"Key":"your fault","Fragments":["or"]},{"Key":"fault or","Fragments":["problem."]},{"Key":"of string_ref,","Fragments":["by"]},{"Key":"string_ref, by","Fragments":["the"]},{"Key":"way, and","Fragments":["I'm","regular"]},{"Key":"really hoping","Fragments":["it"]},{"Key":"hoping it","Fragments":["makes"]},{"Key":"the standard:","Fragments":["http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3442.html"]},{"Key":"For now","Fragments":["I'll"]},{"Key":"boost one.","Fragments":["Either"]},{"Key":"one. Either","Fragments":["way,"]},{"Key":"way, I","Fragments":["wish"]},{"Key":"wish they","Fragments":["defined"]},{"Key":"they defined","Fragments":["a"]},{"Key":"defined a","Fragments":["templated","class"]},{"Key":"templated implicit","Fragments":["conversion"]},{"Key":"a data()","Fragments":["and"]},{"Key":"data() and","Fragments":["a"]},{"Key":"a size()","Fragments":["returning"]},{"Key":"size() returning","Fragments":["compatible"]},{"Key":"returning compatible","Fragments":["types..."]},{"Key":"compatible types...","Fragments":["I"]},{"Key":"types... I","Fragments":["wonder"]},{"Key":"logic is","Fragments":["in","very"]},{"Key":"in not","Fragments":["doing","using"]},{"Key":"doing that.","Fragments":["Maybe","going"]},{"Key":"that. Maybe","Fragments":["they're"]},{"Key":"Maybe they're","Fragments":["afraid"]},{"Key":"they're afraid","Fragments":["I'll"]},{"Key":"afraid I'll","Fragments":["pass"]},{"Key":"I'll pass","Fragments":["in"]},{"Key":"a std::array\u003cchar,402\u003e","Fragments":["that's"]},{"Key":"std::array\u003cchar,402\u003e that's","Fragments":["actually"]},{"Key":"that's actually","Fragments":["only"]},{"Key":"only storing","Fragments":["42"]},{"Key":"storing 42","Fragments":["valid"]},{"Key":"42 valid","Fragments":["characters"]},{"Key":"valid characters","Fragments":["followed","in"]},{"Key":"characters followed","Fragments":["by"]},{"Key":"a '\\0'...","Fragments":["or"]},{"Key":"'\\0'... or","Fragments":["something?"]},{"Key":"or something?","Fragments":["Not"]},{"Key":"something? Not","Fragments":["sure"]},{"Key":"why anyone","Fragments":["would"]},{"Key":"* removed","Fragments":["test","unnecessary"]},{"Key":"removed test","Fragments":["of"]},{"Key":"test of","Fragments":["`result[1]`","my","the","how"]},{"Key":"of `result[1]`","Fragments":["in"]},{"Key":"`result[1]` in","Fragments":["line"]},{"Key":"line 21,","Fragments":["I","how"]},{"Key":"21, I","Fragments":["misunderstood"]},{"Key":"I misunderstood","Fragments":["the","the"]},{"Key":"misunderstood the","Fragments":["testcases","task"]},{"Key":"the testcases","Fragments":["name","with","directly"]},{"Key":"testcases name","Fragments":["and"]},{"Key":"and thought","Fragments":["that"]},{"Key":"thought that","Fragments":["an","using","you","allCaps","if"]},{"Key":"an 11","Fragments":["digit"]},{"Key":"11 digit","Fragments":["phone"]},{"Key":"start with","Fragments":["\"11\",","no","this"]},{"Key":"with \"11\",","Fragments":["but"]},{"Key":"\"11\", but","Fragments":["only"]},{"Key":"first digit","Fragments":["needs"]},{"Key":"digit needs","Fragments":["to"]},{"Key":"* added","Fragments":["a"]},{"Key":"comment to","Fragments":["make"]},{"Key":"the fall","Fragments":["through"]},{"Key":"fall through","Fragments":["in"]},{"Key":"through in","Fragments":["line"]},{"Key":"line 24","Fragments":["is","to"]},{"Key":"24 is","Fragments":["actually"]},{"Key":"actually wanted","Fragments":["and"]},{"Key":"wanted and","Fragments":["not"]},{"Key":"* using","Fragments":["`std::accumulate`","statements"]},{"Key":"using `std::accumulate`","Fragments":["instead"]},{"Key":"`std::accumulate` instead","Fragments":["of"]},{"Key":"of `std::for_each`,","Fragments":["this"]},{"Key":"`std::for_each`, this","Fragments":["way"]},{"Key":"to capture","Fragments":["something"]},{"Key":"capture something","Fragments":["from"]},{"Key":" True,","Fragments":["sure.","but","I"]},{"Key":"The `leap`","Fragments":["problem"]},{"Key":"`leap` problem","Fragments":["after"]},{"Key":"problem after","Fragments":["the"]},{"Key":"the songs?","Fragments":["Funny"]},{"Key":"songs? Funny","Fragments":["world…"]},{"Key":"unnecessary `#include`","Fragments":["of"]},{"Key":"`#include` of","Fragments":["`algorithm`"]},{"Key":"* I'd","Fragments":["really"]},{"Key":"I'd really","Fragments":["like","like"]},{"Key":"an approach","Fragments":["that"]},{"Key":"approach that","Fragments":["uses","is","I"]},{"Key":"uses `std::accumulate`","Fragments":["for"]},{"Key":"`std::accumulate` for","Fragments":["this,"]},{"Key":"for this,","Fragments":["but","but"]},{"Key":"to wrap","Fragments":["my","function","them","functions"]},{"Key":"wrap my","Fragments":["head"]},{"Key":"head around","Fragments":["that"]},{"Key":"around that","Fragments":["first."]},{"Key":"that first.","Fragments":["`std::accumulate`"]},{"Key":"first. `std::accumulate`","Fragments":["works"]},{"Key":"`std::accumulate` works","Fragments":["so"]},{"Key":"works so","Fragments":["much","that"]},{"Key":"much different","Fragments":["from"]},{"Key":"from haskells","Fragments":["`foldr`/`foldl`"]},{"Key":"haskells `foldr`/`foldl`","Fragments":["functions…"]},{"Key":" Personal","Fragments":["preference."]},{"Key":"Personal preference.","Fragments":["After"]},{"Key":"preference. After","Fragments":["spending"]},{"Key":"After spending","Fragments":["some"]},{"Key":"spending some","Fragments":["time"]},{"Key":"time studying","Fragments":["the"]},{"Key":"studying the","Fragments":["likes"]},{"Key":"the likes","Fragments":["of"]},{"Key":"likes of","Fragments":["SML,"]},{"Key":"of SML,","Fragments":["Haskell"]},{"Key":"SML, Haskell","Fragments":["\u0026"]},{"Key":"Haskell \u0026","Fragments":["Scala,"]},{"Key":"\u0026 Scala,","Fragments":["I"]},{"Key":"Scala, I","Fragments":["find"]},{"Key":"declaration syntax","Fragments":["more"]},{"Key":"syntax more","Fragments":["intuitive."]},{"Key":"have `#include`d","Fragments":["`algorithm`"]},{"Key":"`#include`d `algorithm`","Fragments":["but"]},{"Key":"`algorithm` but","Fragments":["I"]},{"Key":"any usage","Fragments":["of"]},{"Key":"its contents,","Fragments":["do"]},{"Key":"contents, do","Fragments":["you"]},{"Key":"you mind","Fragments":["using","to"]},{"Key":"mind using","Fragments":["or"]},{"Key":"using or","Fragments":["removing","typedef"]},{"Key":"or removing","Fragments":["it?"]},{"Key":" Comparing","Fragments":["the"]},{"Key":"Comparing the","Fragments":["other"]},{"Key":"other solutions,","Fragments":["mine","I"]},{"Key":"solutions, mine","Fragments":["seems"]},{"Key":"mine seems","Fragments":["a"]},{"Key":" Macros","Fragments":["for"]},{"Key":"Macros for","Fragments":["repetative"]},{"Key":"for repetative","Fragments":["tasks…"]},{"Key":"repetative tasks…","Fragments":["Great"]},{"Key":"tasks… Great","Fragments":["idea!"]},{"Key":" @mariana:","Fragments":["can"]},{"Key":"@mariana: can","Fragments":["you"]},{"Key":"explain the","Fragments":["`explicit`"]},{"Key":"the `explicit`","Fragments":["stuff"]},{"Key":"`explicit` stuff","Fragments":["a"]},{"Key":"stuff a","Fragments":["bit?"]},{"Key":"1. There","Fragments":["is"]},{"Key":"a `std::pow`","Fragments":["which"]},{"Key":"`std::pow` which","Fragments":["returns"]},{"Key":"returns an","Fragments":["`int`-type?","Anagrammer","`int`,"]},{"Key":"an `int`-type?","Fragments":["I've"]},{"Key":"`int`-type? I've","Fragments":["only"]},{"Key":"found floating","Fragments":["points"]},{"Key":"floating points","Fragments":["in"]},{"Key":"points in","Fragments":["the","there."]},{"Key":"the documentation.","Fragments":["Anyway,","Hopefully"]},{"Key":"documentation. Anyway,","Fragments":["`pow(2,"]},{"Key":"Anyway, `pow(2,","Fragments":["n)`"]},{"Key":"`pow(2, n)`","Fragments":["is"]},{"Key":"n)` is","Fragments":["the"]},{"Key":"the slower","Fragments":["way"]},{"Key":"slower way","Fragments":["to"]},{"Key":"write `1","Fragments":["\u003c\u003c"]},{"Key":"`1 \u003c\u003c","Fragments":["n`.","x`"]},{"Key":"2. `std::intmax_t`","Fragments":["is"]},{"Key":"`std::intmax_t` is","Fragments":["signed,"]},{"Key":"is signed,","Fragments":["so"]},{"Key":"signed, so","Fragments":["on"]},{"Key":"so on","Fragments":["machines"]},{"Key":"on machines","Fragments":["that","that"]},{"Key":"machines that","Fragments":["have","don't"]},{"Key":"most 64","Fragments":["bit"]},{"Key":"64 bit","Fragments":["width,","on","length"]},{"Key":"bit width,","Fragments":["that"]},{"Key":"width, that","Fragments":["is"]},{"Key":"not supposed","Fragments":["to"]},{"Key":"3. `std::intmax_t`","Fragments":["might"]},{"Key":"`std::intmax_t` might","Fragments":["be"]},{"Key":"even smaller","Fragments":["than"]},{"Key":"bit on","Fragments":["some"]},{"Key":"some machines,","Fragments":["it"]},{"Key":"machines, it","Fragments":["will"]},{"Key":"will compile","Fragments":["there","down"]},{"Key":"compile there","Fragments":["but"]},{"Key":"there but","Fragments":["will"]},{"Key":"have runtime","Fragments":["errors."]},{"Key":"runtime errors.","Fragments":["Have"]},{"Key":"errors. Have","Fragments":["you"]},{"Key":"type that","Fragments":["will","doesn't","should","is","isn't"]},{"Key":"don't support","Fragments":["that","declarations"]},{"Key":"support that","Fragments":["large","feature."]},{"Key":"that large","Fragments":["numbers?"]},{"Key":"4. summing","Fragments":["up"]},{"Key":"summing up","Fragments":["all","1","2","`n`"]},{"Key":"all `square()`s","Fragments":["is"]},{"Key":"`square()`s is","Fragments":["fast"]},{"Key":"fast here,","Fragments":["but"]},{"Key":"the fastes","Fragments":["possible"]},{"Key":"fastes possible","Fragments":["solution."]},{"Key":"1. Are","Fragments":["you"]},{"Key":"you missing","Fragments":["an"]},{"Key":"missing an","Fragments":["`#include`?"]},{"Key":"2. Have","Fragments":["you"]},{"Key":" square(66)","Fragments":["/"]},{"Key":"square(66) /","Fragments":["2"]},{"Key":"/ 2","Fragments":["-","-","-"]},{"Key":"- 1","Fragments":["|","|","=","|","\\\\","\\\\","is"]},{"Key":"1 |","Fragments":["substitute","66","pow(2,"]},{"Key":"| substitute","Fragments":["function"]},{"Key":"substitute function","Fragments":["call"]},{"Key":" =","Fragments":["pow(2,","pow(2,","pow(2,"]},{"Key":"= pow(2,","Fragments":["66","65)","n","64)"]},{"Key":"pow(2, 66","Fragments":["-"]},{"Key":"66 -","Fragments":["1)","1"]},{"Key":"- 1)","Fragments":["/","%","==","=="]},{"Key":"1) /","Fragments":["2"]},{"Key":"| 66","Fragments":["-"]},{"Key":"1 =","Fragments":["65","1`","1;`","10;`","31;`"]},{"Key":"pow(2, 65)","Fragments":["/"]},{"Key":"65) /","Fragments":["2"]},{"Key":"| pow(2,","Fragments":["n)"]},{"Key":"pow(2, n)","Fragments":["="]},{"Key":"n) =","Fragments":["pow(2,"]},{"Key":"pow(2, n","Fragments":["-"]},{"Key":"n -","Fragments":["1)"]},{"Key":"pow(2, 64)","Fragments":["-","-1"]},{"Key":"64) -","Fragments":["1"]},{"Key":" yeah.","Fragments":["updated."]},{"Key":" Lines","Fragments":["up","30-31:","62-63:","61"]},{"Key":"Lines up","Fragments":["very"]},{"Key":"up very","Fragments":["well"]},{"Key":"very well","Fragments":[";)"]},{"Key":"header anymore,","Fragments":["the"]},{"Key":"anymore, the","Fragments":["current"]},{"Key":"current `exercism`","Fragments":["CLI","CLI"]},{"Key":"use `boost`","Fragments":["but"]},{"Key":"`boost` but","Fragments":["the"]},{"Key":"of forcing","Fragments":["me","it"]},{"Key":"forcing me","Fragments":["to…"]},{"Key":"make `boost::gregorian::days(kOneGigaSecond","Fragments":["/"]},{"Key":"`boost::gregorian::days(kOneGigaSecond /","Fragments":["kSecondsPerDay)`"]},{"Key":"/ kSecondsPerDay)`","Fragments":["a"]},{"Key":"kSecondsPerDay)` a","Fragments":["constant"]},{"Key":"I leave","Fragments":["for","it"]},{"Key":"leave for","Fragments":["a"]},{"Key":"few days","Fragments":["and"]},{"Key":"days and","Fragments":["my"]},{"Key":"small novel","Fragments":["attached!"]},{"Key":"Thanks everyone","Fragments":["for"]},{"Key":"everyone for","Fragments":["the"]},{"Key":"the feedback.","Fragments":["I","Going","I","There's","I","I","Geometric"]},{"Key":"feedback. I","Fragments":["have","need","think","agree","didn't","have"]},{"Key":"have made","Fragments":["my","a"]},{"Key":"made my","Fragments":["changes","life","solution"]},{"Key":"changes and","Fragments":["submitted","it"]},{"Key":"and submitted","Fragments":["a","a","one"]},{"Key":"submitted a","Fragments":["new","new","second","3rd"]},{"Key":"new version.","Fragments":["So","So"]},{"Key":"version. So","Fragments":["does","far"]},{"Key":"So does","Fragments":["that"]},{"Key":"does that","Fragments":["mean","you"]},{"Key":"that mean","Fragments":["that"]},{"Key":"mean that","Fragments":["static","you","for"]},{"Key":"that static","Fragments":["does","access"]},{"Key":"static does","Fragments":["not"]},{"Key":"files or","Fragments":["source"]},{"Key":"or source","Fragments":["files?"]},{"Key":"left cleanKey","Fragments":["(not"]},{"Key":"cleanKey (not","Fragments":["cleanWord)"]},{"Key":"(not cleanWord)","Fragments":["as"]},{"Key":"cleanWord) as","Fragments":["static"]},{"Key":"as static","Fragments":["for","local","?","won't","was","because","local"]},{"Key":"static for","Fragments":["when","my"]},{"Key":"for when","Fragments":["it","a"]},{"Key":"does get","Fragments":["moved","the"]},{"Key":"get moved","Fragments":["to"]},{"Key":"hope would","Fragments":["be"]},{"Key":"be compiled","Fragments":["to","with"]},{"Key":"compiled to","Fragments":["an"]},{"Key":"object and","Fragments":["then","using"]},{"Key":"then linked","Fragments":["to."]},{"Key":"last version","Fragments":["and"]},{"Key":"and applied","Fragments":["it."]},{"Key":"applied it.","Fragments":["Hopefully"]},{"Key":"it. Hopefully","Fragments":["this"]},{"Key":"Hopefully this","Fragments":["is"]},{"Key":"seems people","Fragments":["like"]},{"Key":"namespace version","Fragments":["but"]},{"Key":"version but","Fragments":["that"]},{"Key":"that limits","Fragments":["on"]},{"Key":"limits on","Fragments":["what"]},{"Key":"with visibility","Fragments":["of"]},{"Key":"functions. Right","Fragments":["now"]},{"Key":"now anyone","Fragments":["can"]},{"Key":"anyone can","Fragments":["call","give"]},{"Key":"call cleanWord","Fragments":["which"]},{"Key":"cleanWord which","Fragments":["I"]},{"Key":"don't like.","Fragments":["But"]},{"Key":"like. But","Fragments":["if"]},{"Key":"if exercism","Fragments":["didn't"]},{"Key":"exercism didn't","Fragments":["have"]},{"Key":"the limitation","Fragments":["of","in"]},{"Key":"limitation of","Fragments":["requiring"]},{"Key":"of requiring","Fragments":["to"]},{"Key":"requiring to","Fragments":["include"]},{"Key":"source code","Fragments":["then"]},{"Key":"code then","Fragments":["I"]},{"Key":"a header/source","Fragments":["combination.","file."]},{"Key":"CLI then","Fragments":["you"]},{"Key":"can declare","Fragments":["in","upfront","most","```retStrand```"]},{"Key":"declare in","Fragments":["`.h`"]},{"Key":"in `.h`","Fragments":["and"]},{"Key":"`.h` and","Fragments":["implement"]},{"Key":"implement in","Fragments":["`.cpp`","the"]},{"Key":"in `.cpp`","Fragments":["and","without"]},{"Key":"`.cpp` and","Fragments":["submit"]},{"Key":"both files","Fragments":["then,","at","at"]},{"Key":"files then,","Fragments":["take"]},{"Key":"then, take","Fragments":["a"]},{"Key":"my submissions","Fragments":["to",":)"]},{"Key":"submissions to","Fragments":["see"]},{"Key":"see an","Fragments":["example.","@","improvement.","implementation"]},{"Key":"In such","Fragments":["exercises","cases","a","a","a"]},{"Key":"such exercises","Fragments":["where"]},{"Key":"exercises where","Fragments":["you"]},{"Key":"namespace and","Fragments":["want","header","recieved","removed","not","avoid","made"]},{"Key":"want hidden/private","Fragments":["functions,"]},{"Key":"hidden/private functions,","Fragments":["only"]},{"Key":"functions, only","Fragments":["implement"]},{"Key":"only implement","Fragments":["them"]},{"Key":"implement them","Fragments":["in"]},{"Key":"`.cpp` without","Fragments":["declaring"]},{"Key":"declaring them","Fragments":["in","where","as","outside"]},{"Key":"keep them","Fragments":["hidden","all","private","out"]},{"Key":"them hidden","Fragments":["if"]},{"Key":"hidden if","Fragments":["I"]},{"Key":"header/source file.","Fragments":["But"]},{"Key":"file. But","Fragments":["when","I"]},{"Key":"But when","Fragments":["I","I"]},{"Key":"this it","Fragments":["said","seems"]},{"Key":"said that","Fragments":["for"]},{"Key":"some technical","Fragments":["reason"]},{"Key":"technical reason","Fragments":["it"]},{"Key":"reason it","Fragments":["could"]},{"Key":"only accept","Fragments":["a"]},{"Key":"single file.","Fragments":["Will"]},{"Key":"file. Will","Fragments":["have"]},{"Key":"Will have","Fragments":["to","a"]},{"Key":"go back","Fragments":["and"]},{"Key":"At least","Fragments":["for","you"]},{"Key":"for linux","Fragments":["it"]},{"Key":"linux it","Fragments":["is"]},{"Key":"as easy","Fragments":["as","as","as"]},{"Key":"s word_count.cpp","Fragments":["word_count.h`."]},{"Key":"word_count.cpp word_count.h`.","Fragments":["But"]},{"Key":"word_count.h`. But","Fragments":["as"]},{"Key":"But as","Fragments":["I"]},{"Key":"said, you","Fragments":["need"]},{"Key":"a recent","Fragments":["version","addition"]},{"Key":"CLI (I","Fragments":["have"]},{"Key":"(I have","Fragments":["2.2.0).","no"]},{"Key":"For C++","Fragments":["I"]},{"Key":"wrote a","Fragments":["shellscript:","quick","quick","return","couple"]},{"Key":"So submitting","Fragments":["is"]},{"Key":"submitting is","Fragments":["as"]},{"Key":"as `escpp","Fragments":["word_count`."]},{"Key":"knew given","Fragments":["two"]},{"Key":"given two","Fragments":["words"]},{"Key":"two words","Fragments":["there","are","have","are"]},{"Key":"words there","Fragments":["were"]},{"Key":"there were","Fragments":["two","digits","separate","a","problems","no"]},{"Key":"were two","Fragments":["requirements"]},{"Key":"requirements for","Fragments":["them","score_t,"]},{"Key":"1. Same","Fragments":["length"]},{"Key":"2. If","Fragments":["sorted","I","you"]},{"Key":"If sorted","Fragments":["equal"]},{"Key":"sorted equal","Fragments":["the"]},{"Key":"equal the","Fragments":["same"]},{"Key":"only condition","Fragments":["I"]},{"Key":"condition I","Fragments":["had"]},{"Key":"for after","Fragments":["that"]},{"Key":"sure they","Fragments":["were"]},{"Key":"in face","Fragments":["the"]},{"Key":"face the","Fragments":["same"]},{"Key":"the tradeoffs","Fragments":["I"]},{"Key":"tradeoffs I","Fragments":["did"]},{"Key":"did was","Fragments":["with"]},{"Key":"was with","Fragments":["clarity"]},{"Key":"with clarity","Fragments":["maybe?"]},{"Key":"clarity maybe?","Fragments":["I"]},{"Key":"maybe? I","Fragments":["decided"]},{"Key":"convert everything","Fragments":["in","to"]},{"Key":"everything in","Fragments":["the","the","the","a","`hey`","the"]},{"Key":"beginning to","Fragments":["lower","dominate","end,"]},{"Key":"case and","Fragments":["keep","didn't","sorted).","I","you","sorted","no"]},{"Key":"and unsorted","Fragments":["version"]},{"Key":"unsorted version","Fragments":["for"]},{"Key":"version for","Fragments":["later.","any"]},{"Key":"for later.","Fragments":["This"]},{"Key":"later. This","Fragments":["means"]},{"Key":"original to","Fragments":["lowercase","check"]},{"Key":"to lowercase","Fragments":["every","if","is","converted"]},{"Key":"lowercase every","Fragments":["time"]},{"Key":"went back","Fragments":["and"]},{"Key":"and dug","Fragments":["into","myself"]},{"Key":"dug into","Fragments":["the"]},{"Key":"boost library","Fragments":["and","does","for","or","is"]},{"Key":"case insensitive","Fragments":["compare","compare"]},{"Key":"insensitive compare","Fragments":["function","functions"]},{"Key":"compare function","Fragments":["for","which"]},{"Key":"for strings.","Fragments":["Now"]},{"Key":"strings. Now","Fragments":["I"]},{"Key":"Now I","Fragments":["all","have","know","do,"]},{"Key":"I all","Fragments":["I"]},{"Key":"all I","Fragments":["would","can","would","really"]},{"Key":"do was","Fragments":["make"]},{"Key":"was make","Fragments":["sure"]},{"Key":"that sorting","Fragments":["ends","the"]},{"Key":"sorting ends","Fragments":["up"]},{"Key":"ends up","Fragments":["being","being","traversing"]},{"Key":"being the","Fragments":["same.","only"]},{"Key":"same. So","Fragments":["to"]},{"Key":"third parameter","Fragments":["to"]},{"Key":"parameter to","Fragments":["sort","matches()"]},{"Key":"sort to","Fragments":["pass"]},{"Key":"own compare","Fragments":["function"]},{"Key":"function which","Fragments":["just","can"]},{"Key":"which just","Fragments":["looks"]},{"Key":"just looks","Fragments":["at"]},{"Key":"looks at","Fragments":["the","one"]},{"Key":"the letters","Fragments":["themselves","and","have","_twice_.","in","that","instead"]},{"Key":"letters themselves","Fragments":["and"]},{"Key":"themselves and","Fragments":["not"]},{"Key":"not their","Fragments":["case"]},{"Key":"their case","Fragments":["to"]},{"Key":"determine which","Fragments":["goes","characters"]},{"Key":"which goes","Fragments":["first."]},{"Key":" Probably","Fragments":["should"]},{"Key":"Probably should","Fragments":["check"]},{"Key":"should check","Fragments":["length","your","the","the","for","if","if","against"]},{"Key":"check length","Fragments":["of"]},{"Key":"strings before","Fragments":["seeing"]},{"Key":"before seeing","Fragments":["if"]},{"Key":"seeing if","Fragments":["they"]},{"Key":"same string.","Fragments":["is_permutation"]},{"Key":"string. is_permutation","Fragments":["has"]},{"Key":"is_permutation has","Fragments":["a","worst"]},{"Key":"a runtime","Fragments":["of","call","difference"]},{"Key":"runtime of","Fragments":["O(n^2),","new.","your"]},{"Key":"of O(n^2),","Fragments":["but"]},{"Key":"O(n^2), but","Fragments":["sort"]},{"Key":"but sort","Fragments":["is"]},{"Key":"sort is","Fragments":["nlog(n)."]},{"Key":"is nlog(n).","Fragments":["It"]},{"Key":"nlog(n). It","Fragments":["would"]},{"Key":"the \"long","Fragments":["run\""]},{"Key":"\"long run\"","Fragments":["to"]},{"Key":"run\" to","Fragments":["just"]},{"Key":"just sort","Fragments":["the","the"]},{"Key":"strings and","Fragments":["compare","then","you","that","map","test","use","not"]},{"Key":"compare to","Fragments":["see"]},{"Key":"it good","Fragments":["practice","practice","practice","practise"]},{"Key":"large logical","Fragments":["statement"]},{"Key":"logical statement","Fragments":["instead"]},{"Key":"statement instead","Fragments":["of","of","of"]},{"Key":"of multiple","Fragments":["if"]},{"Key":"multiple if","Fragments":["statements?"]},{"Key":"see people","Fragments":["do"]},{"Key":"people do","Fragments":["it"]},{"Key":"it sometimes","Fragments":["but"]},{"Key":"sometimes but","Fragments":["it"]},{"Key":"has always","Fragments":["been"]},{"Key":"been harder","Fragments":["for"]},{"Key":"harder for","Fragments":["me"]},{"Key":"one at","Fragments":["all.","a"]},{"Key":"at all.","Fragments":["It","I'm","With","Which","I","So"]},{"Key":"all. It","Fragments":["is"]},{"Key":"much one","Fragments":["that"]},{"Key":"something terrible","Fragments":["no"]},{"Key":"terrible no","Fragments":["matter"]},{"Key":"no matter","Fragments":["what.","how","what","the"]},{"Key":"the get_history.","Fragments":["I"]},{"Key":"get_history. I","Fragments":["just"]},{"Key":"just saved","Fragments":["each"]},{"Key":"saved each","Fragments":["line"]},{"Key":"each line","Fragments":["verbatim"]},{"Key":"line verbatim","Fragments":["and"]},{"Key":"verbatim and","Fragments":["had"]},{"Key":"and had","Fragments":["a","`word`","two"]},{"Key":"a for-loop","Fragments":["to"]},{"Key":"for-loop to","Fragments":["append"]},{"Key":"append it","Fragments":["to"]},{"Key":"the stream.","Fragments":["Then"]},{"Key":"stream. Then","Fragments":["I"]},{"Key":"any special","Fragments":["cases"]},{"Key":"cases other","Fragments":["than"]},{"Key":"than skip","Fragments":["the"]},{"Key":"Other than","Fragments":["that","that,","that,","that","that,"]},{"Key":"than that","Fragments":["looks","simple","won't","of","as","implies"]},{"Key":" holy","Fragments":["sewer"]},{"Key":"holy sewer","Fragments":["waters"]},{"Key":"sewer waters","Fragments":["of"]},{"Key":"waters of","Fragments":["fuck"]},{"Key":"of fuck","Fragments":["if"]},{"Key":"fuck if","Fragments":["anything"]},{"Key":"anything this","Fragments":["was","small"]},{"Key":"Using an","Fragments":["exception"]},{"Key":"probably (rightly)","Fragments":["controversial."]},{"Key":"(rightly) controversial.","Fragments":["It's"]},{"Key":"controversial. It's","Fragments":["my"]},{"Key":"It's my","Fragments":["opinion"]},{"Key":"opinion that","Fragments":["the"]},{"Key":"of programmer","Fragments":["who"]},{"Key":"programmer who","Fragments":["calls"]},{"Key":"who calls","Fragments":["hexadecimal::convert"]},{"Key":"calls hexadecimal::convert","Fragments":["without"]},{"Key":"hexadecimal::convert without","Fragments":["being"]},{"Key":"without being","Fragments":["sure","flashy","altered."]},{"Key":"being sure","Fragments":["it's"]},{"Key":"sure it's","Fragments":["a","the","really"]},{"Key":"a hexadecimal","Fragments":["character"]},{"Key":"hexadecimal character","Fragments":["-"]},{"Key":"character -","Fragments":["that's"]},{"Key":"that's who","Fragments":["should"]},{"Key":"who should","Fragments":["be"]},{"Key":"be paying","Fragments":["the"]},{"Key":"penalty -","Fragments":["not"]},{"Key":"not someone","Fragments":["who"]},{"Key":" atoi(\u0026current)","Fragments":["seems"]},{"Key":"atoi(\u0026current) seems","Fragments":["dangerous."]},{"Key":"seems dangerous.","Fragments":["What"]},{"Key":"dangerous. What","Fragments":["byte"]},{"Key":"What byte","Fragments":["is"]},{"Key":"byte is","Fragments":["immediately"]},{"Key":"is immediately","Fragments":["after"]},{"Key":"immediately after","Fragments":["current?"]},{"Key":"after current?","Fragments":["Because"]},{"Key":"current? Because","Fragments":["you"]},{"Key":"a '\\0'.","Fragments":["Seems"]},{"Key":"'\\0'. Seems","Fragments":["like"]},{"Key":"Seems like","Fragments":["there's","it"]},{"Key":"like there's","Fragments":["a","a"]},{"Key":"decent chance","Fragments":["it's"]},{"Key":"chance it's","Fragments":["one"]},{"Key":"the bytes","Fragments":["in"]},{"Key":"bytes in","Fragments":["add."]},{"Key":"in add.","Fragments":["You"]},{"Key":"add. You","Fragments":["could"]},{"Key":"char current[2]","Fragments":["="]},{"Key":"current[2] =","Fragments":["{"]},{"Key":"{ '\\0',","Fragments":["'\\0'"]},{"Key":"'\\0', '\\0'","Fragments":["};"]},{"Key":"And then","Fragments":["deal","it","in","at","there"]},{"Key":"then deal","Fragments":["with"]},{"Key":"with current[0]","Fragments":["or"]},{"Key":"current[0] or","Fragments":["atoi(current)."]},{"Key":"or atoi(current).","Fragments":["Or"]},{"Key":"atoi(current). Or","Fragments":["you"]},{"Key":"say add","Fragments":["="]},{"Key":"add =","Fragments":["value[i]"]},{"Key":"= value[i]","Fragments":["-"]},{"Key":"value[i] -","Fragments":["'0';"]},{"Key":"not start","Fragments":["i"]},{"Key":"start i","Fragments":["="]},{"Key":"= 1","Fragments":["and","*","*"]},{"Key":"1 and","Fragments":["then",".cpp","not","then"]},{"Key":"then do","Fragments":["i"]},{"Key":"do i","Fragments":["*="]},{"Key":"*= 16","Fragments":["instead"]},{"Key":"16 instead","Fragments":["of"]},{"Key":"of ++i","Fragments":["?"]},{"Key":"++i ?","Fragments":["The"]},{"Key":"? The","Fragments":["you"]},{"Key":"The you","Fragments":["wouldn't"]},{"Key":"wouldn't need","Fragments":["to","to","the"]},{"Key":"call pow","Fragments":["or"]},{"Key":"pow or","Fragments":["deal"]},{"Key":"or deal","Fragments":["with"]},{"Key":"with floating-point","Fragments":["math."]},{"Key":"it's completely","Fragments":["guaranteed"]},{"Key":"completely guaranteed","Fragments":["that"]},{"Key":"guaranteed that","Fragments":["-1","map[word]"]},{"Key":"that -1","Fragments":["casts"]},{"Key":"-1 casts","Fragments":["up"]},{"Key":"casts up","Fragments":["to"]},{"Key":"to string::npos","Fragments":["if","instead"]},{"Key":"string::npos if","Fragments":["it"]},{"Key":"it goes","Fragments":["unsigned,"]},{"Key":"goes unsigned,","Fragments":["since"]},{"Key":"unsigned, since","Fragments":["2's"]},{"Key":"since 2's","Fragments":["complement"]},{"Key":"2's complement","Fragments":["isn't"]},{"Key":"complement isn't","Fragments":["even"]},{"Key":"even guaranteed.","Fragments":["So"]},{"Key":"guaranteed. So","Fragments":["it's"]},{"Key":"probably better","Fragments":["to","not","suited","off"]},{"Key":"test find_first_not_of","Fragments":["against"]},{"Key":"find_first_not_of against","Fragments":["std::string::npos,"]},{"Key":"against std::string::npos,","Fragments":["or"]},{"Key":"std::string::npos, or","Fragments":["std::numeric_limits\u003cstd::string::size_type\u003e::max(),"]},{"Key":"or std::numeric_limits\u003cstd::string::size_type\u003e::max(),","Fragments":["or"]},{"Key":"std::numeric_limits\u003cstd::string::size_type\u003e::max(), or","Fragments":["just"]},{"Key":"it's \u003e","Fragments":["str.size()."]},{"Key":"of 0x10","Fragments":["in"]},{"Key":"0x10 in","Fragments":["the"]},{"Key":"the *=.","Fragments":["That"]},{"Key":"*=. That","Fragments":["makes"]},{"Key":"sense compared","Fragments":["to"]},{"Key":"writing the","Fragments":["constant","comment.","code,",".h"]},{"Key":"in decimal","Fragments":["like"]},{"Key":"decimal like","Fragments":["I"]},{"Key":"I did.","Fragments":["+1","Getting"]},{"Key":"did. +1","Fragments":["for"]},{"Key":"for self-documenting","Fragments":["code."]},{"Key":"2. Yeah,","Fragments":["relying"]},{"Key":"Yeah, relying","Fragments":["on"]},{"Key":"on -1LL","Fragments":["being"]},{"Key":"-1LL being","Fragments":["maximum"]},{"Key":"being maximum","Fragments":["value"]},{"Key":"maximum value","Fragments":["once","representable"]},{"Key":"value once","Fragments":["cast..."]},{"Key":"once cast...","Fragments":["unnecessary,"]},{"Key":"cast... unnecessary,","Fragments":["technically"]},{"Key":"unnecessary, technically","Fragments":["not"]},{"Key":"to work,","Fragments":["and","although"]},{"Key":"work, and","Fragments":["less","perhaps"]},{"Key":"less clear","Fragments":["than","/"]},{"Key":"than it","Fragments":["should","was","would","would","needs","probobly"]},{"Key":"should be.","Fragments":["My","That","I"]},{"Key":"be. My","Fragments":["bad."]},{"Key":"My bad.","Fragments":["Re-submitting"]},{"Key":"bad. Re-submitting","Fragments":["using"]},{"Key":"Re-submitting using","Fragments":["numeric_limits."]},{"Key":"1. Which","Fragments":["header"]},{"Key":"Which header","Fragments":["did"]},{"Key":"header did","Fragments":["you"]},{"Key":"in mind?","Fragments":["cstdint"]},{"Key":"mind? cstdint","Fragments":["or"]},{"Key":"cstdint or","Fragments":["something"]},{"Key":"It's standard","Fragments":["now."]},{"Key":"standard now.","Fragments":["https://en.wikipedia.org/wiki/C%2B%2B14#Digit_separators"]},{"Key":"I apparently","Fragments":["set"]},{"Key":"apparently set","Fragments":["that"]},{"Key":"set that","Fragments":["flag","up","variable."]},{"Key":"that flag","Fragments":["on"]},{"Key":"flag on","Fragments":["this"]},{"Key":" set(CMAKE_CXX_FLAGS","Fragments":["\"-std=c++1y\")"]},{"Key":" Yupp,","Fragments":["`cstdint`"]},{"Key":"Yupp, `cstdint`","Fragments":["is"]},{"Key":"`cstdint` is","Fragments":["the"]},{"Key":"one I","Fragments":["mean,","need"]},{"Key":"mean, I","Fragments":["didn't","just"]},{"Key":"whole `int`-family","Fragments":["without"]},{"Key":"`int`-family without","Fragments":["it."]},{"Key":"I'm feeling","Fragments":["quite"]},{"Key":"feeling quite","Fragments":["repeatative"]},{"Key":"quite repeatative","Fragments":["hear,"]},{"Key":"repeatative hear,","Fragments":["but"]},{"Key":"hear, but","Fragments":["also"]},{"Key":"also it","Fragments":["feels"]},{"Key":"it feels","Fragments":["as","like"]},{"Key":"feels as","Fragments":["if"]},{"Key":"a `map\u003cint,","Fragments":["string\u003e`"]},{"Key":"`map\u003cint, string\u003e`","Fragments":["or"]},{"Key":"string\u003e` or","Fragments":["`vector\u003cpair\u003cint,"]},{"Key":"or `vector\u003cpair\u003cint,","Fragments":["string\u003e\u003e`"]},{"Key":"`vector\u003cpair\u003cint, string\u003e\u003e`","Fragments":["would"]},{"Key":"string\u003e\u003e` would","Fragments":["be"]},{"Key":"be also","Fragments":["overkill,"]},{"Key":"also overkill,","Fragments":["so"]},{"Key":"overkill, so","Fragments":["I"]},{"Key":"is and","Fragments":["refactor","how"]},{"Key":"and refactor","Fragments":["as"]},{"Key":"refactor as","Fragments":["the"]},{"Key":"more dropping","Fragments":["sounds"]},{"Key":"dropping sounds","Fragments":["arises."]},{"Key":"Hi, just","Fragments":["one"]},{"Key":"one question","Fragments":[":"]},{"Key":"question :","Fragments":["why"]},{"Key":": why","Fragments":["do"]},{"Key":"pass ctor","Fragments":["string"]},{"Key":"ctor string","Fragments":["argument"]},{"Key":"string argument","Fragments":["by","could"]},{"Key":"by copy","Fragments":["?","?"]},{"Key":"using ```const","Fragments":["std::string\u0026","std::string\u0026```"]},{"Key":"```const std::string\u0026","Fragments":["s```","input```","str```"]},{"Key":"std::string\u0026 s```","Fragments":["?"]},{"Key":"no lookups","Fragments":["and"]},{"Key":"lookups and","Fragments":["inserts"]},{"Key":"and inserts","Fragments":["(thats"]},{"Key":"inserts (thats","Fragments":["what"]},{"Key":"(thats what","Fragments":["a"]},{"Key":"what a","Fragments":["`map`","translation","caller"]},{"Key":"a `map`","Fragments":["is","`return`"]},{"Key":"`map` is","Fragments":["great","large"]},{"Key":"is great","Fragments":["for),"]},{"Key":"great for),","Fragments":["but"]},{"Key":"for), but","Fragments":["are"]},{"Key":"but are","Fragments":["only"]},{"Key":"are only","Fragments":["iterating","some","visible","numbers","dealing"]},{"Key":"only iterating","Fragments":["over","over"]},{"Key":"over `conversion`","Fragments":["you"]},{"Key":"`conversion` you","Fragments":["should"]},{"Key":"using some","Fragments":["container","of","helper","of","of","standard","OOP","OOP"]},{"Key":"some container","Fragments":["that"]},{"Key":"container that","Fragments":["is"]},{"Key":"more predictable","Fragments":["when","with"]},{"Key":"predictable when","Fragments":["iterating."]},{"Key":"figure out,","Fragments":["why"]},{"Key":"out, why","Fragments":["you"]},{"Key":"are traversing","Fragments":["backwards,"]},{"Key":"traversing backwards,","Fragments":["when"]},{"Key":"backwards, when","Fragments":["you"]},{"Key":"have inserted","Fragments":["the"]},{"Key":"inserted the","Fragments":["`{1000,"]},{"Key":"the `{1000,","Fragments":["\"M\"}`"]},{"Key":"`{1000, \"M\"}`","Fragments":["first."]},{"Key":"\"M\"}` first.","Fragments":["I"]},{"Key":"first. I","Fragments":["think"]},{"Key":"just because","Fragments":["the","it","you"]},{"Key":"of `map`","Fragments":["works,"]},{"Key":"`map` works,","Fragments":["but"]},{"Key":"but might","Fragments":["break","look","at"]},{"Key":"might break","Fragments":["on"]},{"Key":"break on","Fragments":["other"]},{"Key":"on other","Fragments":["implemantations","factors"]},{"Key":"other implemantations","Fragments":["of"]},{"Key":"implemantations of","Fragments":["stdlib."]},{"Key":"to rewrite","Fragments":["line","this"]},{"Key":"rewrite line","Fragments":["32"]},{"Key":"line 32","Fragments":["in"]},{"Key":"32 in","Fragments":["terms"]},{"Key":"of module","Fragments":["(`%`)."]},{"Key":"1. `pow`","Fragments":["is"]},{"Key":"`pow` is","Fragments":["returning"]},{"Key":"is returning","Fragments":["a","the"]},{"Key":"`double` or","Fragments":["`float`"]},{"Key":"or `float`","Fragments":["which"]},{"Key":"`float` which","Fragments":["you"]},{"Key":"to truncate","Fragments":["to"]},{"Key":"truncate to","Fragments":["an"]},{"Key":"`int` before","Fragments":["returning","getting"]},{"Key":"before returning","Fragments":["it."]},{"Key":"returning it.","Fragments":["Also"]},{"Key":"it. Also","Fragments":["its"]},{"Key":"Also its","Fragments":["arguments"]},{"Key":"its arguments","Fragments":["need"]},{"Key":"arguments need","Fragments":["to"]},{"Key":"be converted","Fragments":["to"]},{"Key":"to `double`","Fragments":["before","for","now,"]},{"Key":"`double` before","Fragments":["actually"]},{"Key":"before actually","Fragments":["calling","solving"]},{"Key":"actually calling","Fragments":["it."]},{"Key":"2. `1","Fragments":["\u003c\u003c"]},{"Key":"\u003c\u003c x`","Fragments":["should"]},{"Key":"x` should","Fragments":["be"]},{"Key":"a pattern","Fragments":["well","like"]},{"Key":"pattern well","Fragments":["known"]},{"Key":"well known","Fragments":["by"]},{"Key":"known by","Fragments":["every"]},{"Key":"by every","Fragments":["programmer."]},{"Key":"3. Also","Fragments":["every"]},{"Key":"Also every","Fragments":["programmer"]},{"Key":"every programmer","Fragments":["should"]},{"Key":"programmer should","Fragments":["see"]},{"Key":"should see","Fragments":["how","that"]},{"Key":"how similar","Fragments":["`uint64_t`","it"]},{"Key":"similar `uint64_t`","Fragments":["and"]},{"Key":"`uint64_t` and","Fragments":["a"]},{"Key":"a chessboard","Fragments":["are."]},{"Key":"clearly a","Fragments":["leftover"]},{"Key":"from when","Fragments":["I","I","I"]},{"Key":"I initialised","Fragments":["`roster_`"]},{"Key":"initialised `roster_`","Fragments":["in"]},{"Key":"`roster_` in","Fragments":["the"]},{"Key":"constructor, that's","Fragments":["not"]},{"Key":"making me","Fragments":["iterate."]},{"Key":"2. Methodchaining","Fragments":["`s.add(\"A\","]},{"Key":"Methodchaining `s.add(\"A\",","Fragments":["1)-\u003eadd(\"B\","]},{"Key":"`s.add(\"A\", 1)-\u003eadd(\"B\",","Fragments":["1);`"]},{"Key":"1)-\u003eadd(\"B\", 1);`","Fragments":["rather"]},{"Key":"1);` rather","Fragments":["than"]},{"Key":"than `s.add(\"A\",","Fragments":["1);"]},{"Key":"`s.add(\"A\", 1);","Fragments":["s.add(\"B\","]},{"Key":"1); s.add(\"B\",","Fragments":["1);`."]},{"Key":"s.add(\"B\", 1);`.","Fragments":["I'd"]},{"Key":"1);`. I'd","Fragments":["like"]},{"Key":"it chainable","Fragments":["with"]},{"Key":"chainable with","Fragments":["`.`"]},{"Key":"with `.`","Fragments":["(dot)"]},{"Key":"`.` (dot)","Fragments":["instead"]},{"Key":"(dot) instead","Fragments":["of"]},{"Key":"of `-\u003e`","Fragments":["but"]},{"Key":"`-\u003e` but","Fragments":["my"]},{"Key":"about C++","Fragments":["isn't"]},{"Key":"isn't good","Fragments":["enough."]},{"Key":"good enough.","Fragments":["But"]},{"Key":"enough. But","Fragments":["I'm"]},{"Key":"I'm kind","Fragments":["of","of","of","of"]},{"Key":"of used","Fragments":["to"]},{"Key":"this workflow","Fragments":["from"]},{"Key":"workflow from","Fragments":["Java,"]},{"Key":"from Java,","Fragments":["Ruby"]},{"Key":"Java, Ruby","Fragments":["and"]},{"Key":"Ruby and","Fragments":["even"]},{"Key":"and even","Fragments":["kind","if","if","then"]},{"Key":"even kind","Fragments":["of"]},{"Key":"of in","Fragments":["Haskell.","the"]},{"Key":"3. **edit**","Fragments":["In"]},{"Key":"**edit** In","Fragments":["my"]},{"Key":"mind I","Fragments":["had","am"]},{"Key":"it returning","Fragments":["school"]},{"Key":"returning school","Fragments":["for"]},{"Key":"school for","Fragments":["the"]},{"Key":"reason as","Fragments":["explained"]},{"Key":"as explained","Fragments":["in"]},{"Key":"explained in","Fragments":["2."]},{"Key":"in 2.","Fragments":["But"]},{"Key":"2. But","Fragments":["now"]},{"Key":"But now","Fragments":["I"]},{"Key":"a closer","Fragments":["look"]},{"Key":"closer look","Fragments":["and"]},{"Key":"look and","Fragments":["just"]},{"Key":"just have","Fragments":["to","it","3","three","to","to"]},{"Key":"say, it","Fragments":["is"]},{"Key":"roster of","Fragments":["a"]},{"Key":"a grade","Fragments":["as"]},{"Key":"grade as","Fragments":["specified"]},{"Key":"as specified","Fragments":["by","by"]},{"Key":"specified by","Fragments":["the","the"]},{"Key":"4. Because","Fragments":["I'm"]},{"Key":"Because I'm","Fragments":["used"]},{"Key":"to languages","Fragments":["that"]},{"Key":"languages that","Fragments":["are"]},{"Key":"are less","Fragments":["bare","than"]},{"Key":"less bare","Fragments":["metal"]},{"Key":"bare metal","Fragments":["and","on"]},{"Key":"metal and","Fragments":["hide"]},{"Key":"and hide","Fragments":["this","functionality"]},{"Key":"hide this","Fragments":["decission"]},{"Key":"this decission","Fragments":["from"]},{"Key":"decission from","Fragments":["me"]},{"Key":"from me","Fragments":["by"]},{"Key":"me by","Fragments":["design."]},{"Key":"5. Yupp.","Fragments":["Personal"]},{"Key":"Yupp. Personal","Fragments":["thing."]},{"Key":"Personal thing.","Fragments":["When"]},{"Key":"thing. When","Fragments":["I"]},{"Key":"don't define","Fragments":["in"]},{"Key":"define in","Fragments":["the"]},{"Key":"but somewhere","Fragments":["else,"]},{"Key":"somewhere else,","Fragments":["I"]},{"Key":"else, I","Fragments":["use"]},{"Key":"use `this`/`self`","Fragments":["to"]},{"Key":"`this`/`self` to","Fragments":["remember"]},{"Key":"remember myself","Fragments":["that"]},{"Key":"an attribute","Fragments":["of"]},{"Key":"attribute of","Fragments":["the"]},{"Key":"class I'm","Fragments":["working"]},{"Key":"I'm working","Fragments":["with","on","within","to"]},{"Key":"working with","Fragments":["and","a","windows","inside","c++"]},{"Key":"with and","Fragments":["to","without"]},{"Key":"to differ","Fragments":["it"]},{"Key":"differ it","Fragments":["from"]},{"Key":"from even","Fragments":["more"]},{"Key":"more evil","Fragments":["side"]},{"Key":"evil side","Fragments":["effects"]},{"Key":"side effects","Fragments":["at","throughout"]},{"Key":"effects at","Fragments":["a"]},{"Key":"more global","Fragments":["scope"]},{"Key":"scope like","Fragments":["static","your"]},{"Key":"like static","Fragments":["stuff"]},{"Key":"static stuff","Fragments":["defined"]},{"Key":"stuff defined","Fragments":["somewhere"]},{"Key":"defined somewhere","Fragments":["in"]},{"Key":" Well","Fragments":["mine","I","you"]},{"Key":"Well mine","Fragments":["was"]},{"Key":"mine was","Fragments":["compiling,"]},{"Key":"was compiling,","Fragments":["so"]},{"Key":"compiling, so","Fragments":["presumably"]},{"Key":"presumably it","Fragments":["was"]},{"Key":"was indirectly","Fragments":["included"]},{"Key":"indirectly included","Fragments":["by"]},{"Key":"included by","Fragments":["string.","the"]},{"Key":"by string.","Fragments":["It's"]},{"Key":"string. It's","Fragments":["not","not","an"]},{"Key":"to rely","Fragments":["on","on","on"]},{"Key":"on that,","Fragments":["though,"]},{"Key":"that, though,","Fragments":["so","you"]},{"Key":"so thanks","Fragments":["for","for"]},{"Key":"pointing it","Fragments":["out."]},{"Key":"you mix","Fragments":["C-style-for-","manual"]},{"Key":"mix C-style-for-","Fragments":["and"]},{"Key":"C-style-for- and","Fragments":["for-each-style-loops?"]},{"Key":" 1:","Fragments":["An","1"]},{"Key":"1: An","Fragments":["option,"]},{"Key":"An option,","Fragments":["if"]},{"Key":"option, if","Fragments":["you"]},{"Key":"you want,","Fragments":["is"]},{"Key":"want, is","Fragments":["to"]},{"Key":"specify school()","Fragments":["="]},{"Key":"school() =","Fragments":["default;"]},{"Key":"= default;","Fragments":["Unnecessary"]},{"Key":"default; Unnecessary","Fragments":["in"]},{"Key":"Unnecessary in","Fragments":["this"]},{"Key":"some like","Fragments":["to"]},{"Key":" 2:","Fragments":["You","I","2"]},{"Key":"2: You","Fragments":["can"]},{"Key":"that by","Fragments":["returning","failing"]},{"Key":"a school\u0026,","Fragments":["which"]},{"Key":"school\u0026, which","Fragments":["is"]},{"Key":"is has","Fragments":["a"]},{"Key":"slightly different","Fragments":["implication..."]},{"Key":"reference indicates","Fragments":["to"]},{"Key":"indicates to","Fragments":["the","the"]},{"Key":"caller that","Fragments":["it","the"]},{"Key":"never been","Fragments":["nullptr"]},{"Key":"been nullptr","Fragments":["-"]},{"Key":"nullptr -","Fragments":["there"]},{"Key":"- there","Fragments":["will","are","are","is"]},{"Key":"there will","Fragments":["always","be","be.","be"]},{"Key":"always be","Fragments":["something","expensive.","initialized","split"]},{"Key":"be something","Fragments":["there","like","like:","like","you'd","wrong","like:","like"]},{"Key":"something there","Fragments":["-"]},{"Key":"it's meant","Fragments":["to"]},{"Key":"single item","Fragments":["(since","of"]},{"Key":"item (since","Fragments":["pointers"]},{"Key":"(since pointers","Fragments":["are"]},{"Key":"often used","Fragments":["as"]},{"Key":"as iterators).","Fragments":["In"]},{"Key":"iterators). In","Fragments":["this"]},{"Key":" 6::","Fragments":["Would"]},{"Key":"6:: Would","Fragments":["it"]},{"Key":"add const","Fragments":["to"]},{"Key":"grade and/or","Fragments":["roster?"]},{"Key":"const school_roster\u0026","Fragments":["roster()"]},{"Key":"school_roster\u0026 roster()","Fragments":["const;"]},{"Key":"const school_grade\u0026","Fragments":["grade("]},{"Key":"school_grade\u0026 grade(","Fragments":["int"]},{"Key":" LOL,","Fragments":["excellent"]},{"Key":"LOL, excellent","Fragments":["point."]},{"Key":"2: I","Fragments":["will"]},{"Key":"will address","Fragments":["that","that"]},{"Key":"address that","Fragments":["in","then"]},{"Key":"my next","Fragments":["iteration,","iteration."]},{"Key":"next iteration,","Fragments":["thank","thank"]},{"Key":"iteration, thank","Fragments":["you!","you"]},{"Key":" 3:","Fragments":["There","4"]},{"Key":"3: There","Fragments":["was"]},{"Key":"an edit","Fragments":["in"]},{"Key":"edit in","Fragments":["my"]},{"Key":"my answer","Fragments":["to"]},{"Key":"number 3.","Fragments":["`school_grade"]},{"Key":"3. `school_grade","Fragments":["grade(int);`"]},{"Key":"`school_grade grade(int);`","Fragments":["is"]},{"Key":"grade(int);` is","Fragments":["just"]},{"Key":"tests, it","Fragments":["returns","still"]},{"Key":"it returns","Fragments":["all","```map.end()```,","true.","the"]},{"Key":"returns all","Fragments":["pupils"]},{"Key":"all pupils","Fragments":["of"]},{"Key":"pupils of","Fragments":["that"]},{"Key":"that grade","Fragments":["it"]},{"Key":"grade it","Fragments":["was"]},{"Key":" 6:","Fragments":["Makes"]},{"Key":"6: Makes","Fragments":["sense,"]},{"Key":"sense, definitevly.","Fragments":["I"]},{"Key":"definitevly. I","Fragments":["have"]},{"Key":"to reiterate","Fragments":["soon,"]},{"Key":"reiterate soon,","Fragments":["I"]},{"Key":"soon, I","Fragments":["will"]},{"Key":"looks to","Fragments":["me","a","me"]},{"Key":"me like","Fragments":["less_than_twenty","a","a","there'd"]},{"Key":"like less_than_twenty","Fragments":["actually"]},{"Key":"less_than_twenty actually","Fragments":["doesn't"]},{"Key":"actually doesn't","Fragments":["handle"]},{"Key":"doesn't handle","Fragments":["numbers"]},{"Key":"handle numbers","Fragments":["1"]},{"Key":"through 9","Fragments":["so"]},{"Key":"9 so","Fragments":["maybe"]},{"Key":"so maybe","Fragments":["the","you"]},{"Key":"maybe the","Fragments":["assert("]},{"Key":"the assert(","Fragments":["n"]},{"Key":"assert( n","Fragments":["\u003e="]},{"Key":"n \u003e=","Fragments":["1"]},{"Key":"\u003e= 1","Fragments":[");"]},{"Key":"1 );","Fragments":["should"]},{"Key":"); should","Fragments":["be"]},{"Key":"be 10","Fragments":["instead?"]},{"Key":"Does this","Fragments":["handle","even"]},{"Key":"this handle","Fragments":["n"]},{"Key":"handle n","Fragments":["=="]},{"Key":"the join.","Fragments":["That"]},{"Key":"join. That","Fragments":["was"]},{"Key":"was clever","Fragments":["and"]},{"Key":"and handles","Fragments":["those"]},{"Key":"handles those","Fragments":["odd"]},{"Key":"those odd","Fragments":["cases"]},{"Key":"odd cases","Fragments":["all","(e.g."]},{"Key":"cases all","Fragments":["in"]},{"Key":"one place...","Fragments":["nice."]},{"Key":"choose to","Fragments":["make","omit,","place","sieve","use","use"]},{"Key":"make parts","Fragments":["a"]},{"Key":"parts a","Fragments":["vector"]},{"Key":"vector rather","Fragments":["than"]},{"Key":"than std::array\u003cint,4\u003e","Fragments":["?"]},{"Key":"Made `zip`","Fragments":["a"]},{"Key":"`zip` a","Fragments":["template"]},{"Key":"function, finally.","Fragments":["I"]},{"Key":"finally. I","Fragments":["wonder"]},{"Key":"wonder it","Fragments":["would"]},{"Key":"possible even","Fragments":["simplier."]},{"Key":" Took","Fragments":["me"]},{"Key":"Took me","Fragments":["quite"]},{"Key":"me quite","Fragments":["a"]},{"Key":"what caused","Fragments":["that"]},{"Key":"caused that","Fragments":["infinite"]},{"Key":"that infinite","Fragments":["loop"]},{"Key":"in `update_primes_until`…","Fragments":["I"]},{"Key":"`update_primes_until`… I","Fragments":["made"]},{"Key":"a wrong","Fragments":["assumption","input.","output","input.","result."]},{"Key":"wrong assumption","Fragments":["about"]},{"Key":"assumption about","Fragments":["the"]},{"Key":"wheel in","Fragments":["the"]},{"Key":"very early","Fragments":["stages."]},{"Key":"early stages.","Fragments":["I"]},{"Key":"stages. I","Fragments":["assumed"]},{"Key":"I assumed","Fragments":["that","the","that","that","wrapping"]},{"Key":"assumed that","Fragments":["every","the","C++","this"]},{"Key":"that every","Fragments":["step","variable"]},{"Key":"every step","Fragments":["of"]},{"Key":"step of","Fragments":["the"]},{"Key":"wheel will","Fragments":["hit"]},{"Key":"will hit","Fragments":["one"]},{"Key":"hit one","Fragments":["prime"]},{"Key":"one prime","Fragments":["at"]},{"Key":"prime at","Fragments":["most,"]},{"Key":"at most,","Fragments":["but"]},{"Key":"most, but","Fragments":["that"]},{"Key":"* 2","Fragments":["given","-","+","and","to"]},{"Key":"2 given","Fragments":["as"]},{"Key":"given as","Fragments":["initial","initial","input.","a"]},{"Key":"* 3","Fragments":["given","=","=","=","=","=","=","=","=","=","="]},{"Key":"3 given","Fragments":["as"]},{"Key":"5 =","Fragments":["6"]},{"Key":"= 6","Fragments":["*","*","*","*"]},{"Key":"6 *","Fragments":["1","1","2","2"]},{"Key":"* 1","Fragments":["-","+"]},{"Key":"* 7","Fragments":["="]},{"Key":"7 =","Fragments":["6"]},{"Key":"1 +","Fragments":["1//","acc`"]},{"Key":"+ 1//","Fragments":["Hit"]},{"Key":"1// Hit","Fragments":["by"]},{"Key":"Hit by","Fragments":["same","same"]},{"Key":"by same","Fragments":["step","step"]},{"Key":"same step","Fragments":["(i","(i"]},{"Key":"step (i","Fragments":["=","="]},{"Key":"(i =","Fragments":["1)","2)"]},{"Key":"* 11","Fragments":["="]},{"Key":"11 =","Fragments":["6"]},{"Key":"* 13","Fragments":["="]},{"Key":"13 =","Fragments":["6"]},{"Key":"1 //","Fragments":["Hit"]},{"Key":"// Hit","Fragments":["by"]},{"Key":"Don't like","Fragments":["this."]},{"Key":"this. But","Fragments":["it"]},{"Key":"is Eratosthenes'","Fragments":["sieve"]},{"Key":"Eratosthenes' sieve","Fragments":["as"]},{"Key":"as asked","Fragments":["for"]},{"Key":"for by","Fragments":["the"]},{"Key":"count right","Fragments":["now,"]},{"Key":"but have","Fragments":["you","yet","fun","you"]},{"Key":"have you","Fragments":["covered","gained?","considered","got","considered","forgotten","considered"]},{"Key":"you covered","Fragments":["`INT_MAX`?"]},{"Key":" @candice:","Fragments":["Feel"]},{"Key":"@candice: Feel","Fragments":["free"]},{"Key":"Feel free","Fragments":["to","to","to"]},{"Key":"pick mine,","Fragments":["since"]},{"Key":"mine, since","Fragments":["@candice"]},{"Key":"since @candice","Fragments":["seems"]},{"Key":"@candice seems","Fragments":["to"]},{"Key":"Well, in","Fragments":["retrospect","the"]},{"Key":"in retrospect","Fragments":["I"]},{"Key":"retrospect I","Fragments":["think"]},{"Key":"was wrong.","Fragments":["The"]},{"Key":"wrong. The","Fragments":["exercise"]},{"Key":"The exercise","Fragments":["required","was"]},{"Key":"exercise required","Fragments":["a"]},{"Key":"required a","Fragments":["particular","class,"]},{"Key":"particular algorithm,","Fragments":["and"]},{"Key":"algorithm, and","Fragments":["I"]},{"Key":"think my","Fragments":["recommendation","habit","#1","code","use"]},{"Key":"my recommendation","Fragments":["goes"]},{"Key":"recommendation goes","Fragments":["against"]},{"Key":"goes against","Fragments":["that"]},{"Key":" is_prime_number","Fragments":["could"]},{"Key":"is_prime_number could","Fragments":["probably"]},{"Key":"enum class.","Fragments":["There"]},{"Key":"class. There","Fragments":["are"]},{"Key":"are classes","Fragments":["out","and"]},{"Key":"classes out","Fragments":["there"]},{"Key":"handle this","Fragments":["kind","better."]},{"Key":"of trinary","Fragments":["state,"]},{"Key":"trinary state,","Fragments":["by"]},{"Key":"state, by","Fragments":["the"]},{"Key":"boost one","Fragments":["is"]},{"Key":"of annoying","Fragments":["in"]},{"Key":"annoying in","Fragments":["the"]},{"Key":"it converts","Fragments":["to"]},{"Key":" std::make_pair","Fragments":["is,"]},{"Key":"std::make_pair is,","Fragments":["in"]},{"Key":"opinion, preferable","Fragments":["to"]},{"Key":"to calling","Fragments":["out","get_letters)?","get_letters)?"]},{"Key":"calling out","Fragments":["a"]},{"Key":"a specific","Fragments":["instantiation","solution.","advantage?"]},{"Key":"specific instantiation","Fragments":["of"]},{"Key":"instantiation of","Fragments":["std::pair,"]},{"Key":"of std::pair,","Fragments":["especially"]},{"Key":"std::pair, especially","Fragments":["if"]},{"Key":"are unambiguously","Fragments":["identical"]},{"Key":"unambiguously identical","Fragments":["to"]},{"Key":"identical to","Fragments":["the","just"]},{"Key":"of ++j","Fragments":["and"]},{"Key":"++j and","Fragments":["then"]},{"Key":"then testing","Fragments":["%"]},{"Key":"testing %","Fragments":["you"]},{"Key":"% you","Fragments":["could"]},{"Key":"probably j","Fragments":["+="]},{"Key":"+= numers[i].first,","Fragments":["as"]},{"Key":"numers[i].first, as","Fragments":["long"]},{"Key":"as long","Fragments":["as","as","as","as","as","as"]},{"Key":"long as","Fragments":["you","you","they're","the","you","you"]},{"Key":"you set","Fragments":["up","it","hasAlpha=true","that"]},{"Key":"iteration well.","Fragments":["Could"]},{"Key":"well. Could","Fragments":["potentially"]},{"Key":"Could potentially","Fragments":["skip"]},{"Key":"potentially skip","Fragments":["a"]},{"Key":"skip a","Fragments":["lot."]},{"Key":" @granville","Fragments":["I'm"]},{"Key":"@granville I'm","Fragments":["pretty"]},{"Key":"sorted ordering","Fragments":["of"]},{"Key":"ordering of","Fragments":["map","the"]},{"Key":"a requirement","Fragments":["of","from"]},{"Key":"requirement of","Fragments":["the","a"]},{"Key":"c++ standard,","Fragments":["so"]},{"Key":"standard, so","Fragments":["there"]},{"Key":"there shouldn't","Fragments":["be"]},{"Key":"an issue","Fragments":["with","and","with","where","where"]},{"Key":"with other","Fragments":["implementations","objects'.","parts"]},{"Key":"other implementations","Fragments":["unless"]},{"Key":"implementations unless","Fragments":["they"]},{"Key":"unless they","Fragments":["are"]},{"Key":"not compliant.","Fragments":["It's"]},{"Key":"compliant. It's","Fragments":["a"]},{"Key":"fair cop","Fragments":["that"]},{"Key":"cop that","Fragments":["the"]},{"Key":"the initialisation","Fragments":["of"]},{"Key":"initialisation of","Fragments":["conversion","variables."]},{"Key":"of conversion","Fragments":["is","from"]},{"Key":"conversion is","Fragments":["confusing,","better"]},{"Key":"is confusing,","Fragments":["as","but"]},{"Key":"confusing, as","Fragments":["it"]},{"Key":"and used","Fragments":["by","few","functions","it","```inline```"]},{"Key":"used by","Fragments":["the","Nobbz.","more","the","bob::hey()."]},{"Key":"the programme","Fragments":["in"]},{"Key":"programme in","Fragments":["ascending"]},{"Key":"in ascending","Fragments":["order"]},{"Key":"ascending order","Fragments":["of"]},{"Key":"the keys.","Fragments":["Also,"]},{"Key":"keys. Also,","Fragments":["good"]},{"Key":"Also, good","Fragments":["point"]},{"Key":"the modulus","Fragments":["operator."]},{"Key":"case, map","Fragments":["is"]},{"Key":"used because","Fragments":["it","it","I"]},{"Key":"it stores","Fragments":["pairs"]},{"Key":"stores pairs","Fragments":["of"]},{"Key":"pairs of","Fragments":["values.","grade,name."]},{"Key":"values. I","Fragments":["suppose","understand","like","think"]},{"Key":"suppose I","Fragments":["could"]},{"Key":"done something","Fragments":["like"]},{"Key":"like ```std::vector\u003c","Fragments":["std::pair"]},{"Key":"```std::vector\u003c std::pair","Fragments":["\u003cint,"]},{"Key":"std::pair \u003cint,","Fragments":["std::string"]},{"Key":"\u003cint, std::string","Fragments":["\u003e\u003e```"]},{"Key":"std::string \u003e\u003e```","Fragments":["but"]},{"Key":"\u003e\u003e``` but","Fragments":["it's"]},{"Key":"not clear","Fragments":["to","what","to","from"]},{"Key":"me if","Fragments":["there","I'm","I","I'm","I"]},{"Key":"any advantages","Fragments":["to","of"]},{"Key":"advantages to","Fragments":["this.","a"]},{"Key":"would happen","Fragments":["on"]},{"Key":"happen on","Fragments":["`binary::convert(\"2\")`?"]},{"Key":"on `binary::convert(\"2\")`?","Fragments":["Wouldn't"]},{"Key":"`binary::convert(\"2\")`? Wouldn't","Fragments":["that"]},{"Key":"Wouldn't that","Fragments":["return"]},{"Key":"that return","Fragments":["`2`","int","bool.","value.","a"]},{"Key":"return `2`","Fragments":["which"]},{"Key":"`2` which","Fragments":["is"]},{"Key":"is obviously","Fragments":["wrong?","a","the","no"]},{"Key":"can speed","Fragments":["that"]},{"Key":"speed that","Fragments":["up"]},{"Key":"that up","Fragments":["a","so"]},{"Key":"bit by","Fragments":["`\u003c\u003c`"]},{"Key":"by `\u003c\u003c`","Fragments":["and"]},{"Key":"`\u003c\u003c` and","Fragments":["`|`."]},{"Key":" @lonzo","Fragments":["I'm"]},{"Key":"@lonzo I'm","Fragments":["not"]},{"Key":"not following","Fragments":["how"]},{"Key":"following how","Fragments":["```in```"]},{"Key":"how ```in```","Fragments":["is"]},{"Key":"```in``` is","Fragments":["being"]},{"Key":"being copied.","Fragments":["Could"]},{"Key":"copied. Could","Fragments":["you"]},{"Key":"the size_t","Fragments":["variable","vs"]},{"Key":"size_t variable","Fragments":["is"]},{"Key":"huge issue.","Fragments":["I","I"]},{"Key":"issue. I","Fragments":["guess","can"]},{"Key":"unsigned or","Fragments":["a"]},{"Key":"a size_t,","Fragments":["but"]},{"Key":"size_t, but","Fragments":["it"]},{"Key":"be problematic","Fragments":["for","if"]},{"Key":"problematic for","Fragments":["very","values"]},{"Key":"I add","Fragments":["a"]},{"Key":"the testsuite","Fragments":["to"]},{"Key":"testsuite to","Fragments":["check"]},{"Key":"check an","Fragments":["empty"]},{"Key":"string returns","Fragments":["zero"]},{"Key":"returns zero","Fragments":["it","for"]},{"Key":"zero it","Fragments":["works"]},{"Key":"just fine,","Fragments":["so","thanks"]},{"Key":"fine, so","Fragments":["I"]},{"Key":"what memory","Fragments":["access"]},{"Key":"violation you","Fragments":["are"]},{"Key":"are referring","Fragments":["to.."]},{"Key":"think there","Fragments":["are","is","are","are","is"]},{"Key":"are about","Fragments":["a"]},{"Key":"a million","Fragments":["primes","chars"]},{"Key":"million primes","Fragments":["there."]},{"Key":"primes there.","Fragments":["Don't"]},{"Key":"there. Don't","Fragments":["remember."]},{"Key":"Don't remember.","Fragments":["Copy-pasted"]},{"Key":"remember. Copy-pasted","Fragments":["from"]},{"Key":"Copy-pasted from","Fragments":["the"]},{"Key":"the web,","Fragments":["got"]},{"Key":"web, got","Fragments":["the"]},{"Key":"got the","Fragments":["problem","2nd","framework"]},{"Key":"problem solved,","Fragments":["and"]},{"Key":"solved, and","Fragments":["still"]},{"Key":"and still","Fragments":["fastest,","have","retain"]},{"Key":"still fastest,","Fragments":["clearest,"]},{"Key":"fastest, clearest,","Fragments":["and"]},{"Key":"clearest, and","Fragments":["simplest"]},{"Key":"and simplest","Fragments":["implementation"]},{"Key":"simplest implementation","Fragments":["I"]},{"Key":"implementation I","Fragments":["can","really","was","should"]},{"Key":"can think","Fragments":["of.","of","of","of","of"]},{"Key":"signed int","Fragments":["is"]},{"Key":"int is","Fragments":["only","too","a"]},{"Key":"only guaranteed","Fragments":["to"]},{"Key":"hold up","Fragments":["to"]},{"Key":"of 32767.","Fragments":["But"]},{"Key":"32767. But","Fragments":["who"]},{"Key":"cares. Works","Fragments":["on"]},{"Key":"Works on","Fragments":["my"]},{"Key":"my machine,","Fragments":["passes"]},{"Key":"machine, passes","Fragments":["the"]},{"Key":"tests, I'm","Fragments":["good"]},{"Key":"I'm good","Fragments":["with"]},{"Key":"good with","Fragments":["that."]},{"Key":"I'll solve","Fragments":["the"]},{"Key":"not realize","Fragments":["that"]},{"Key":"one until","Fragments":["you"]},{"Key":"you asked,","Fragments":["even"]},{"Key":"asked, even","Fragments":["while"]},{"Key":"even while","Fragments":["I"]},{"Key":"use `result`,","Fragments":["`erg`"]},{"Key":"`result`, `erg`","Fragments":["(or"]},{"Key":"`erg` (or","Fragments":["`ergebnis`)"]},{"Key":"(or `ergebnis`)","Fragments":["feels"]},{"Key":"`ergebnis`) feels","Fragments":["quiete"]},{"Key":"feels quiete","Fragments":["natural"]},{"Key":"quiete natural","Fragments":["to"]},{"Key":"often have","Fragments":["a"]},{"Key":"at classmates","Fragments":["code"]},{"Key":"classmates code","Fragments":["and"]},{"Key":"it there…","Fragments":["“Ergebnis”"]},{"Key":"there… “Ergebnis”","Fragments":["is"]},{"Key":"“Ergebnis” is","Fragments":["just"]},{"Key":"the german","Fragments":["word"]},{"Key":"german word","Fragments":["for"]},{"Key":"word for","Fragments":["“result”","“result”."]},{"Key":"for “result”","Fragments":["and"]},{"Key":"“result” and","Fragments":["“erg”"]},{"Key":"and “erg”","Fragments":["is"]},{"Key":"“erg” is","Fragments":["meant"]},{"Key":"a shortcut.","Fragments":["Perhaps"]},{"Key":"shortcut. Perhaps","Fragments":["@marilou"]},{"Key":"Perhaps @marilou","Fragments":["is"]},{"Key":"@marilou is","Fragments":["speaking"]},{"Key":"is speaking","Fragments":["german"]},{"Key":"speaking german","Fragments":["too"]},{"Key":"german too","Fragments":["or"]},{"Key":"too or","Fragments":["at"]},{"Key":"least speaking","Fragments":["a"]},{"Key":"speaking a","Fragments":["language"]},{"Key":"a language","Fragments":["that","and","to"]},{"Key":"language that","Fragments":["has","targets","I"]},{"Key":"similar word","Fragments":["for"]},{"Key":"define `slice`","Fragments":["in"]},{"Key":"`slice` in","Fragments":["terms"]},{"Key":"an @","Fragments":["name"]},{"Key":"@ name","Fragments":["at"]},{"Key":"name at","Fragments":["the"]},{"Key":"I tend","Fragments":["to","to","to","to","to"]},{"Key":"the person","Fragments":["writing","reading","who"]},{"Key":"person writing","Fragments":["the"]},{"Key":"the comment.","Fragments":["My"]},{"Key":"comment. My","Fragments":["apologies"]},{"Key":"My apologies","Fragments":["for","all","for"]},{"Key":"apologies for","Fragments":["the","not"]},{"Key":"Your parameter","Fragments":["is"]},{"Key":"type std::string,","Fragments":["not"]},{"Key":"not std::string\u0026","Fragments":["or"]},{"Key":"std::string\u0026 or","Fragments":["const","a"]},{"Key":"or const","Fragments":["std::string\u0026","auto\u0026","char*"]},{"Key":"pointer type","Fragments":["or"]},{"Key":"type or","Fragments":["what"]},{"Key":"have you.","Fragments":["C++","Ok,"]},{"Key":"you. C++","Fragments":["is"]},{"Key":"is fundamentally","Fragments":["a"]},{"Key":"fundamentally a","Fragments":["pass-by-value"]},{"Key":"a pass-by-value","Fragments":["language,"]},{"Key":"pass-by-value language,","Fragments":["so"]},{"Key":"so whatever","Fragments":["type"]},{"Key":"whatever type","Fragments":["you"]},{"Key":"type you","Fragments":["put","can","mentioned"]},{"Key":"put up","Fragments":["there","a"]},{"Key":"be initialized","Fragments":["as","over"]},{"Key":"initialized as","Fragments":["a","suggested."]},{"Key":"copy (though","Fragments":["copying"]},{"Key":"(though copying","Fragments":["a"]},{"Key":"a reference/pointer","Fragments":["is"]},{"Key":"reference/pointer is","Fragments":["much"]},{"Key":"much like","Fragments":["passing","that"]},{"Key":"like passing","Fragments":["by","references"]},{"Key":"reference, since","Fragments":["the","you"]},{"Key":"thing being","Fragments":["initialized"]},{"Key":"a memory","Fragments":["address).","usage","write.","address"]},{"Key":"memory address).","Fragments":["In"]},{"Key":"address). In","Fragments":["this"]},{"Key":"case it's","Fragments":["an","probably","not"]},{"Key":"object type,","Fragments":["so"]},{"Key":"type, so","Fragments":["it"]},{"Key":"calls std::string's","Fragments":["copy"]},{"Key":"std::string's copy","Fragments":["constructor"]},{"Key":"copy constructor","Fragments":["(or"]},{"Key":"constructor (or","Fragments":["if"]},{"Key":"(or if","Fragments":["a"]},{"Key":"temporary is","Fragments":["being"]},{"Key":"being passed,","Fragments":["possibly"]},{"Key":"passed, possibly","Fragments":["a"]},{"Key":"possibly a","Fragments":["move"]},{"Key":"move constructor)","Fragments":["to"]},{"Key":"constructor) to","Fragments":["make"]},{"Key":"the caller's","Fragments":["object.","copy","string.","part"]},{"Key":" in.length()","Fragments":["-"]},{"Key":"in.length() -","Fragments":["1"]},{"Key":"is promoted","Fragments":["to"]},{"Key":"to size_t","Fragments":["-"]},{"Key":"size_t -","Fragments":["an"]},{"Key":"- an","Fragments":["unsigned","actual"]},{"Key":"unsigned number.","Fragments":["If"]},{"Key":"number. If","Fragments":["in.empty()","it"]},{"Key":"If in.empty()","Fragments":["then"]},{"Key":"in.empty() then","Fragments":["it's"]},{"Key":"a very,","Fragments":["very"]},{"Key":"very, very","Fragments":["large"]},{"Key":"large number.","Fragments":["If"]},{"Key":"it somehow","Fragments":["fit"]},{"Key":"somehow fit","Fragments":["inside"]},{"Key":"fit inside","Fragments":["int","short."]},{"Key":"inside int","Fragments":["you'd"]},{"Key":"int you'd","Fragments":["be"]},{"Key":"you'd be","Fragments":["accessing","interested","skipping"]},{"Key":"be accessing","Fragments":["memory","parts"]},{"Key":"accessing memory","Fragments":["out"]},{"Key":"memory out","Fragments":["of"]},{"Key":"of bounds","Fragments":["(massively)","element...instead"]},{"Key":"bounds (massively)","Fragments":["on"]},{"Key":"(massively) on","Fragments":["line"]},{"Key":"line 18","Fragments":["(which"]},{"Key":"18 (which","Fragments":["you"]},{"Key":"can guard","Fragments":["against,"]},{"Key":"guard against,","Fragments":["if"]},{"Key":"against, if","Fragments":["you"]},{"Key":"you wish,","Fragments":["by"]},{"Key":"wish, by","Fragments":["using"]},{"Key":"the at()","Fragments":["method"]},{"Key":"at() method","Fragments":["instead"]},{"Key":"method instead","Fragments":["of","of"]},{"Key":"of []).","Fragments":["However,"]},{"Key":"[]). However,","Fragments":["in"]},{"Key":"However, in","Fragments":["order","this","this","this"]},{"Key":"assign that","Fragments":["huge"]},{"Key":"that huge","Fragments":["number"]},{"Key":"huge number","Fragments":["back","and"]},{"Key":"number back","Fragments":["into"]},{"Key":"an ordinary","Fragments":["int,"]},{"Key":"ordinary int,","Fragments":["i,"]},{"Key":"int, i,","Fragments":["it"]},{"Key":"i, it","Fragments":["seems"]},{"Key":"seems it's","Fragments":["getting"]},{"Key":"it's getting","Fragments":["wrapped","pulled"]},{"Key":"getting wrapped","Fragments":["back"]},{"Key":"wrapped back","Fragments":["into"]},{"Key":"negative number,","Fragments":["so"]},{"Key":"number, so","Fragments":["the"]},{"Key":"is skipped","Fragments":["over."]},{"Key":"it's realistic","Fragments":["to"]},{"Key":"realistic to","Fragments":["expect"]},{"Key":"this behavior","Fragments":["on"]},{"Key":"behavior on","Fragments":["the","an"]},{"Key":"the vast","Fragments":["majority"]},{"Key":"vast majority","Fragments":["of"]},{"Key":"majority of","Fragments":["platforms","upper","a"]},{"Key":"of platforms","Fragments":["-"]},{"Key":"platforms -","Fragments":["basically"]},{"Key":"- basically","Fragments":["every"]},{"Key":"basically every","Fragments":["realistic"]},{"Key":"every realistic","Fragments":["modern"]},{"Key":"realistic modern","Fragments":["platform."]},{"Key":"modern platform.","Fragments":["I"]},{"Key":"platform. I","Fragments":["don't"]},{"Key":"it's required","Fragments":["to"]},{"Key":"behave exactly","Fragments":["as"]},{"Key":"exactly as","Fragments":["such,","this"]},{"Key":"as such,","Fragments":["though,"]},{"Key":"such, though,","Fragments":["at"]},{"Key":"though, at","Fragments":["least"]},{"Key":"C++ standard.","Fragments":["I"]},{"Key":"the video","Fragments":["I"]},{"Key":"video I","Fragments":["watched"]},{"Key":"I watched","Fragments":["recently"]},{"Key":"watched recently","Fragments":["where"]},{"Key":"where he","Fragments":["really","showed"]},{"Key":"he really","Fragments":["got"]},{"Key":"really got","Fragments":["into","ugly"]},{"Key":"got into","Fragments":["the","the"]},{"Key":"the weird","Fragments":["corner-case"]},{"Key":"weird corner-case","Fragments":["platforms"]},{"Key":"corner-case platforms","Fragments":["(his"]},{"Key":"platforms (his","Fragments":["library"]},{"Key":"(his library","Fragments":["is"]},{"Key":"is supposed","Fragments":["to","to","to","to","to","to","to"]},{"Key":"things being","Fragments":["undefined):"]},{"Key":"being undefined):","Fragments":["http://www.youtube.com/watch?v=hgeErnYxAUw"]},{"Key":"I'm surprised","Fragments":["p-\u003esecond","that"]},{"Key":"surprised p-\u003esecond","Fragments":["and"]},{"Key":"p-\u003esecond and","Fragments":["p-\u003efirst"]},{"Key":"and p-\u003efirst","Fragments":["compiles."]},{"Key":"p-\u003efirst compiles.","Fragments":["I"]},{"Key":"compiles. I","Fragments":["would've"]},{"Key":"would've thought","Fragments":["you'd","they","it"]},{"Key":"thought you'd","Fragments":["need"]},{"Key":"you'd need","Fragments":["p.first,"]},{"Key":"need p.first,","Fragments":["since"]},{"Key":"p.first, since","Fragments":["auto"]},{"Key":"since auto","Fragments":["p"]},{"Key":"auto p","Fragments":["should"]},{"Key":"p should","Fragments":["deduce"]},{"Key":"should deduce","Fragments":["std::pair\u003cint,std::vector\u003cchar\u003e"]},{"Key":"deduce std::pair\u003cint,std::vector\u003cchar\u003e","Fragments":["\u003e."]},{"Key":"std::pair\u003cint,std::vector\u003cchar\u003e \u003e.","Fragments":["Huh."]},{"Key":"\u003e. Huh.","Fragments":["Anyhow,"]},{"Key":"Huh. Anyhow,","Fragments":["I"]},{"Key":"that points","Fragments":["out"]},{"Key":"points out","Fragments":["it"]},{"Key":"out it","Fragments":["could","can","matters"]},{"Key":"be valuable","Fragments":["to"]},{"Key":"valuable to","Fragments":["make"]},{"Key":"make p","Fragments":["a"]},{"Key":"p a","Fragments":["reference"]},{"Key":"reference (i.e.","Fragments":["auto\u0026"]},{"Key":"(i.e. auto\u0026","Fragments":["p"]},{"Key":"auto\u0026 p","Fragments":["or","or"]},{"Key":"p or","Fragments":["const","auto\u0026\u0026"]},{"Key":"or auto\u0026\u0026","Fragments":["p)"]},{"Key":"auto\u0026\u0026 p)","Fragments":["so"]},{"Key":"p) so","Fragments":["that"]},{"Key":"loop reminds","Fragments":["me"]},{"Key":"reminds me","Fragments":["of","of","of"]},{"Key":"of transform","Fragments":["(with"]},{"Key":"transform (with","Fragments":["std::inserter"]},{"Key":"(with std::inserter","Fragments":["and"]},{"Key":"std::inserter and","Fragments":["a"]},{"Key":"a functor","Fragments":["capturing","or"]},{"Key":"functor capturing","Fragments":["p.first)."]},{"Key":"capturing p.first).","Fragments":["I"]},{"Key":"p.first). I","Fragments":["like"]},{"Key":"use \u0026lt;algorithm\u0026gt;","Fragments":["calls"]},{"Key":"\u0026lt;algorithm\u0026gt; calls","Fragments":["wherever"]},{"Key":"calls wherever","Fragments":["it's"]},{"Key":"wherever it's","Fragments":["not","used,"]},{"Key":"function body","Fragments":["is","but"]},{"Key":"body is","Fragments":["entirely","a"]},{"Key":"is entirely","Fragments":["in"]},{"Key":"entirely in","Fragments":["a"]},{"Key":"header, maybe","Fragments":["it"]},{"Key":"declared with","Fragments":["\"inline\",","auto"]},{"Key":"with \"inline\",","Fragments":["in"]},{"Key":"\"inline\", in","Fragments":["an"]},{"Key":"namespace, \"static\",","Fragments":["or"]},{"Key":"\"static\", or","Fragments":["as"]},{"Key":" @breanne","Fragments":["The"]},{"Key":"@breanne The","Fragments":["reason"]},{"Key":"use `at()`","Fragments":["instead"]},{"Key":"`at()` instead","Fragments":["of"]},{"Key":"of `operator[]`","Fragments":["is"]},{"Key":"`operator[]` is","Fragments":["that","because"]},{"Key":"that `at()`","Fragments":["has"]},{"Key":"`at()` has","Fragments":["bounds"]},{"Key":"has bounds","Fragments":["checking"]},{"Key":"bounds checking","Fragments":["and","would"]},{"Key":"checking and","Fragments":["will"]},{"Key":"exception when","Fragments":["trying","attempting","you","I"]},{"Key":"when trying","Fragments":["to","to","set"]},{"Key":"to read/write","Fragments":["outside"]},{"Key":"read/write outside","Fragments":["the"]},{"Key":"the limit","Fragments":["of"]},{"Key":"limit of","Fragments":["the"]},{"Key":"case with","Fragments":["`operator[]`"]},{"Key":"with `operator[]`","Fragments":["and"]},{"Key":"`operator[]` and","Fragments":["is"]},{"Key":"less safe","Fragments":["to"]},{"Key":"safe to","Fragments":["use.","create","move","assume"]},{"Key":" @lelah","Fragments":["Firstly,"]},{"Key":"@lelah Firstly,","Fragments":["thank"]},{"Key":"Firstly, thank","Fragments":["you"]},{"Key":"you very","Fragments":["much","much"]},{"Key":"very much","Fragments":["for","for","for","again","agree"]},{"Key":"your detailed","Fragments":["comments"]},{"Key":"detailed comments","Fragments":["on"]},{"Key":"my submissions!","Fragments":[":)"]},{"Key":"think @lelah","Fragments":["was"]},{"Key":"@lelah was","Fragments":["suggesting"]},{"Key":"suggesting I","Fragments":["say"]},{"Key":"I say","Fragments":["```int","\"HELLO?\"?"]},{"Key":"say ```int","Fragments":["binary::convert(const"]},{"Key":"```int binary::convert(const","Fragments":["std::string"]},{"Key":"binary::convert(const std::string","Fragments":["\u0026in)```"]},{"Key":"std::string \u0026in)```","Fragments":["on"]},{"Key":"\u0026in)``` on","Fragments":["line"]},{"Key":"line 14?","Fragments":["A"]},{"Key":"14? A","Fragments":["lot"]},{"Key":"my earlier","Fragments":["submissions","versions."]},{"Key":"earlier submissions","Fragments":["used"]},{"Key":"submissions used","Fragments":["this"]},{"Key":"used this","Fragments":["method,"]},{"Key":"this method,","Fragments":["but","you"]},{"Key":"read quite","Fragments":["a"]},{"Key":"few conflicting","Fragments":["comments"]},{"Key":"conflicting comments","Fragments":["in"]},{"Key":"comments in","Fragments":["various","a","there"]},{"Key":"in various","Fragments":["places"]},{"Key":"various places","Fragments":["that"]},{"Key":"places that","Fragments":["seemed","I"]},{"Key":"that seemed","Fragments":["to","as","unneccessary.","like"]},{"Key":"that passing","Fragments":["by"]},{"Key":"really that","Fragments":["much"]},{"Key":"just passing","Fragments":["the"]},{"Key":"the values.","Fragments":["I"]},{"Key":"the advantages","Fragments":["are","to"]},{"Key":"advantages are","Fragments":["most"]},{"Key":"are most","Fragments":["clearly"]},{"Key":"most clearly","Fragments":["defined"]},{"Key":"clearly defined","Fragments":["for","with"]},{"Key":"for classes,","Fragments":["as"]},{"Key":"classes, as","Fragments":["you"]},{"Key":"size_t vs","Fragments":["int"]},{"Key":"vs int","Fragments":["issue,"]},{"Key":"int issue,","Fragments":["I"]},{"Key":"issue, I","Fragments":["see","think","think"]},{"Key":"see 2","Fragments":["possible"]},{"Key":"2 possible","Fragments":["solutions"]},{"Key":"possible solutions","Fragments":["/"]},{"Key":"solutions /","Fragments":["improvements."]},{"Key":"/ improvements.","Fragments":["1)"]},{"Key":"improvements. 1)","Fragments":["cast"]},{"Key":"1) cast","Fragments":["in.length()"]},{"Key":"cast in.length()","Fragments":["to"]},{"Key":"in.length() to","Fragments":["an"]},{"Key":"an int","Fragments":["before","because","where","into","because","(0).","is","it"]},{"Key":"int before","Fragments":["the"]},{"Key":"before the","Fragments":["subtraction","test","loop.","buffer).","loop","question","advent","string.","for","loop.","loop.","body","new"]},{"Key":"the subtraction","Fragments":["of"]},{"Key":"subtraction of","Fragments":["1,"]},{"Key":"of 1,","Fragments":["which"]},{"Key":"1, which","Fragments":["would"]},{"Key":"allow i","Fragments":["to"]},{"Key":"be -1","Fragments":["when"]},{"Key":"-1 when","Fragments":["in.empty()."]},{"Key":"when in.empty().","Fragments":["2)"]},{"Key":"in.empty(). 2)","Fragments":["just"]},{"Key":"2) just","Fragments":["define"]},{"Key":"just define","Fragments":["i","them","it"]},{"Key":"i as","Fragments":["a"]},{"Key":"a size_t","Fragments":["instead"]},{"Key":"size_t instead","Fragments":["of","of"]},{"Key":"int, and","Fragments":["replace"]},{"Key":"and replace","Fragments":["i","all","`const","`const","any","every"]},{"Key":"replace i","Fragments":["with"]},{"Key":"i with","Fragments":["i"]},{"Key":"with i","Fragments":["+"]},{"Key":"1 wherever","Fragments":["it's"]},{"Key":"it's used,","Fragments":["as"]},{"Key":"used, as","Fragments":["the"]},{"Key":"the i","Fragments":["\u003e=","=="]},{"Key":"i \u003e=","Fragments":["0","0;","0;"]},{"Key":"\u003e= 0","Fragments":["check"]},{"Key":"0 check","Fragments":["no"]},{"Key":"check no","Fragments":["longer"]},{"Key":"longer makes","Fragments":["sense."]},{"Key":"makes sense.","Fragments":["I"]},{"Key":"sense. I","Fragments":["rather"]},{"Key":"I rather","Fragments":["like"]},{"Key":"rather like","Fragments":["using"]},{"Key":"int because","Fragments":["it","0"]},{"Key":"string indexing","Fragments":["more","with"]},{"Key":"indexing more","Fragments":["easy"]},{"Key":"more easy","Fragments":["to"]},{"Key":"follow (not","Fragments":["that"]},{"Key":"that ```i","Fragments":["-"]},{"Key":"```i -","Fragments":["1```"]},{"Key":"1``` would","Fragments":["be"]},{"Key":"be particularly","Fragments":["difficult"]},{"Key":"particularly difficult","Fragments":["to"]},{"Key":"to read...),","Fragments":["but"]},{"Key":"read...), but","Fragments":["avoiding"]},{"Key":"but avoiding","Fragments":["casts"]},{"Key":"avoiding casts","Fragments":["is"]},{"Key":"casts is","Fragments":["obviously"]},{"Key":"obviously a","Fragments":["good"]},{"Key":"valid point,","Fragments":["thank"]},{"Key":"point, thank","Fragments":["you!","you!"]},{"Key":" Whether","Fragments":["to"]},{"Key":"take by","Fragments":["value"]},{"Key":"value or","Fragments":["by"]},{"Key":"is ideal","Fragments":["actually"]},{"Key":"ideal actually","Fragments":["is"]},{"Key":"actually is","Fragments":["quite","for","the"]},{"Key":"quite tricky.","Fragments":["If"]},{"Key":"tricky. If","Fragments":["you're"]},{"Key":"be making","Fragments":["a"]},{"Key":"input anyhow,","Fragments":["the"]},{"Key":"anyhow, the","Fragments":["parameter"]},{"Key":"a fantastic","Fragments":["place","time"]},{"Key":"fantastic place","Fragments":["to"]},{"Key":"it (because","Fragments":["you"]},{"Key":"be getting","Fragments":["a","anything"]},{"Key":"getting a","Fragments":["move).","false","compiler","better","bit","error","reasonable"]},{"Key":"a move).","Fragments":["If"]},{"Key":"move). If","Fragments":["you'll"]},{"Key":"If you'll","Fragments":["be"]},{"Key":"you'll be","Fragments":["returning","sure"]},{"Key":"be returning","Fragments":["that"]},{"Key":"returning that","Fragments":["very"]},{"Key":"that very","Fragments":["same"]},{"Key":"value (or","Fragments":["the"]},{"Key":"(or the","Fragments":["modified"]},{"Key":"modified version","Fragments":["of"]},{"Key":"of it),","Fragments":["again"]},{"Key":"it), again","Fragments":["a"]},{"Key":"again a","Fragments":["fantastic","private"]},{"Key":"fantastic time","Fragments":["to"]},{"Key":"take by-value","Fragments":["(because"]},{"Key":"by-value (because","Fragments":["you"]},{"Key":"might get","Fragments":["RVO).","pretty","NULL"]},{"Key":"get RVO).","Fragments":["The"]},{"Key":"RVO). The","Fragments":["way"]},{"Key":"are calling","Fragments":["you,"]},{"Key":"calling you,","Fragments":["where"]},{"Key":"you, where","Fragments":["they're"]},{"Key":"where they're","Fragments":["not","going","really"]},{"Key":"not passing","Fragments":["strings"]},{"Key":"passing strings","Fragments":["at","by","by","by","by"]},{"Key":"strings at","Fragments":["all","the"]},{"Key":"all but","Fragments":["rather","rather","the"]},{"Key":"rather the","Fragments":["argument"]},{"Key":"argument for","Fragments":["a"]},{"Key":"string constructor,","Fragments":["it"]},{"Key":"constructor, it","Fragments":["pretty","should"]},{"Key":"it pretty","Fragments":["much"]},{"Key":"much makes","Fragments":["no"]},{"Key":"makes no","Fragments":["difference","copies","guarantees"]},{"Key":"difference whatsoever.","Fragments":["But"]},{"Key":"whatsoever. But","Fragments":["yeah,"]},{"Key":"think const\u0026","Fragments":["is"]},{"Key":"const\u0026 is","Fragments":["still"]},{"Key":"reasonable default","Fragments":["for"]},{"Key":"default for","Fragments":["types"]},{"Key":"types larger","Fragments":["than"]},{"Key":"larger than","Fragments":["a","unsigned","two","15","the","a","10^4."]},{"Key":"word (or","Fragments":["more"]},{"Key":"(or more","Fragments":["expensive"]},{"Key":"more expensive","Fragments":["for","than","find","library","library"]},{"Key":"expensive for","Fragments":["some"]},{"Key":"other reason*)","Fragments":["in"]},{"Key":"reason*) in","Fragments":["many"]},{"Key":"many if","Fragments":["not"]},{"Key":"not most","Fragments":["circumstances."]},{"Key":"my version","Fragments":["of","I","there"]},{"Key":"gcc std::string","Fragments":["is"]},{"Key":"std::string is","Fragments":["still","what","expected,","far"]},{"Key":"the COW","Fragments":["string,"]},{"Key":"COW string,","Fragments":["so"]},{"Key":"string, so","Fragments":["it's","as","as","I"]},{"Key":"it's actually","Fragments":["the","a","used"]},{"Key":"actually the","Fragments":["size","loop","shorter"]},{"Key":"of exactly","Fragments":["one","what"]},{"Key":"exactly one","Fragments":["word","allocation","allocation"]},{"Key":"one word","Fragments":["-"]},{"Key":"word -","Fragments":["it's"]},{"Key":"it's effectively","Fragments":["an"]},{"Key":"effectively an","Fragments":["intrusive"]},{"Key":"intrusive pointer.","Fragments":["The"]},{"Key":"pointer. The","Fragments":["expense"]},{"Key":"The expense","Fragments":["of"]},{"Key":"expense of","Fragments":["copying","greater","a"]},{"Key":"copying it","Fragments":["is","and"]},{"Key":"almost entirely","Fragments":["about","digits)"]},{"Key":"entirely about","Fragments":["the"]},{"Key":"the atomic","Fragments":["increment"]},{"Key":"atomic increment","Fragments":["on"]},{"Key":"increment on","Fragments":["the"]},{"Key":"reference count,","Fragments":["which"]},{"Key":"count, which","Fragments":["is"]},{"Key":"also pretty","Fragments":["cheap"]},{"Key":"pretty cheap","Fragments":["if"]},{"Key":"cheap if","Fragments":["you"]},{"Key":"you compile","Fragments":["without","with"]},{"Key":"compile without","Fragments":["threading","it:"]},{"Key":"without threading","Fragments":["enabled."]},{"Key":"threading enabled.","Fragments":["But"]},{"Key":"enabled. But","Fragments":["then"]},{"Key":"But then","Fragments":["the","you","I","I"]},{"Key":"whole profile","Fragments":["of"]},{"Key":"profile of","Fragments":["the"]},{"Key":"thing changes","Fragments":["if"]},{"Key":"changes if","Fragments":["you"]},{"Key":"move to","Fragments":["gcc","the"]},{"Key":"to gcc","Fragments":["5"]},{"Key":"gcc 5","Fragments":["where"]},{"Key":"5 where","Fragments":["std::string"]},{"Key":"where std::string","Fragments":["is"]},{"Key":"what used","Fragments":["to"]},{"Key":"called _vstring","Fragments":["(and"]},{"Key":"_vstring (and","Fragments":["is"]},{"Key":"(and is","Fragments":["compliant"]},{"Key":"is compliant","Fragments":["with"]},{"Key":"compliant with","Fragments":["C++11)"]},{"Key":"with C++11)","Fragments":["and"]},{"Key":"C++11) and","Fragments":["you"]},{"Key":"get SSO","Fragments":["so"]},{"Key":"SSO so","Fragments":["it's"]},{"Key":"much larger","Fragments":["but"]},{"Key":"larger but","Fragments":["the"]},{"Key":"performance can","Fragments":["be"]},{"Key":"better for","Fragments":["strings","scoping","future","large"]},{"Key":"are small.","Fragments":["See?"]},{"Key":"small. See?","Fragments":["Totally"]},{"Key":"See? Totally","Fragments":["tricky."]},{"Key":" During","Fragments":["writing"]},{"Key":"During writing","Fragments":["this"]},{"Key":"was unsure","Fragments":["if"]},{"Key":"unsure if","Fragments":["`acc"]},{"Key":"if `acc","Fragments":["*"]},{"Key":"`acc *","Fragments":["3`"]},{"Key":"* 3`","Fragments":["or"]},{"Key":"3` or","Fragments":["`acc"]},{"Key":"or `acc","Fragments":["\u003c\u003c"]},{"Key":"`acc \u003c\u003c","Fragments":["1"]},{"Key":"\u003c\u003c 1","Fragments":["+"]},{"Key":"+ acc`","Fragments":["was"]},{"Key":"acc` was","Fragments":["the"]},{"Key":"the faster","Fragments":["way"]},{"Key":"faster way","Fragments":["to","to"]},{"Key":"to multiply","Fragments":["with","by"]},{"Key":"multiply with","Fragments":["3."]},{"Key":"with 3.","Fragments":["So"]},{"Key":"3. So","Fragments":["I","for"]},{"Key":"I managed","Fragments":["to","to"]},{"Key":"benchmark it.","Fragments":["The"]},{"Key":"code used","Fragments":["for"]},{"Key":"the benchmark","Fragments":["is","surprises."]},{"Key":"benchmark is","Fragments":["in"]},{"Key":"in `bench.cpp`,","Fragments":["the"]},{"Key":"`bench.cpp`, the","Fragments":["actuall"]},{"Key":"the actuall","Fragments":["result","implementation"]},{"Key":"actuall result","Fragments":["follows"]},{"Key":"result follows","Fragments":["below:"]},{"Key":" [==========]","Fragments":["Running","Ran","Running","Ran"]},{"Key":"[==========] Running","Fragments":["2","2"]},{"Key":"Running 2","Fragments":["benchmarks.","benchmarks."]},{"Key":"[ RUN","Fragments":["]","]","]","]"]},{"Key":"RUN ]","Fragments":["times_3.shift_and_add","times_3.using_times","hex.BITSHIFT_OPERATORS","hex.REGULAR_BINARY_OPERATORS"]},{"Key":"] times_3.shift_and_add","Fragments":["(1000","(544.815242"]},{"Key":"times_3.shift_and_add (1000","Fragments":["runs,"]},{"Key":"(1000 runs,","Fragments":["10000000","10000000","10000","10000"]},{"Key":"runs, 10000000","Fragments":["iterations","iterations"]},{"Key":"10000000 iterations","Fragments":["per","per"]},{"Key":"iterations per","Fragments":["run)","run)","run)","run)"]},{"Key":"[ DONE","Fragments":["]","]","]","]"]},{"Key":"DONE ]","Fragments":["times_3.shift_and_add","times_3.using_times","hex.BITSHIFT_OPERATORS","hex.REGULAR_BINARY_OPERATORS"]},{"Key":"times_3.shift_and_add (544.815242","Fragments":["ms)"]},{"Key":"[ RUNS","Fragments":["]","]","]","]"]},{"Key":"RUNS ]","Fragments":["Average","Average","Average","Average"]},{"Key":"] Average","Fragments":["time:","time:","time:","time:"]},{"Key":"Average time:","Fragments":["544.815","0.000","718.144","0.000","2246.888","0.225","2193.754","0.219"]},{"Key":"time: 544.815","Fragments":["us"]},{"Key":" Fastest:","Fragments":["0.000","0.000","0.000","0.000","1946.537","0.195","1936.537","0.194"]},{"Key":"Fastest: 0.000","Fragments":["us","us","us","us"]},{"Key":"0.000 us","Fragments":["(-544.815","(-0.000","(-718.144","(-0.000"]},{"Key":"us (-544.815","Fragments":["us"]},{"Key":"(-544.815 us","Fragments":["/"]},{"Key":"us /","Fragments":["-100.000","+1174.880","-100.000","+1174.880","-100.000","+1171.017","-100.000","+1171.017","-13.367","+24.285","-13.367","+24.285","-11.725","+19.044","-11.725","+19.044"]},{"Key":"/ -100.000","Fragments":["%)","%)","%)","%)"]},{"Key":" Slowest:","Fragments":["6945.738","0.001","9127.738","0.001","2792.537","0.279","2611.537","0.261"]},{"Key":"Slowest: 6945.738","Fragments":["us"]},{"Key":"6945.738 us","Fragments":["(+6400.923"]},{"Key":"us (+6400.923","Fragments":["us"]},{"Key":"(+6400.923 us","Fragments":["/"]},{"Key":"/ +1174.880","Fragments":["%)","%)"]},{"Key":" Average","Fragments":["performance:","performance:","performance:","performance:","performance:","performance:","performance:","performance:"]},{"Key":"Average performance:","Fragments":["1835.48462","18354846247.12463","1392.47746","13924774618.95905","445.06001","4450600.11892","455.83962","4558396.24680"]},{"Key":"performance: 1835.48462","Fragments":["runs/s"]},{"Key":" Best","Fragments":["performance:","performance:","performance:","performance:","performance:","performance:","performance:","performance:"]},{"Key":"Best performance:","Fragments":["inf","inf","inf","inf","513.73285","5137328.49671","516.38569","5163856.92605"]},{"Key":"performance: inf","Fragments":["runs/s","iterations/s","runs/s","iterations/s"]},{"Key":"inf runs/s","Fragments":["(+inf","(+inf"]},{"Key":"runs/s (+inf","Fragments":["runs/s","runs/s"]},{"Key":"(+inf runs/s","Fragments":["/","/"]},{"Key":"runs/s /","Fragments":["+inf","-92.15612","+inf","-92.13228","+15.43002","-19.53954","+13.28232","-15.99759"]},{"Key":"/ +inf","Fragments":["%)","%)","%)","%)"]},{"Key":" Worst","Fragments":["performance:","performance:","performance:","performance:","performance:","performance:","performance:","performance:"]},{"Key":"Worst performance:","Fragments":["143.97318","1439731818.27475","109.55617","1095561682.42340","358.09731","3580973.14378","382.91627","3829162.67317"]},{"Key":"performance: 143.97318","Fragments":["runs/s"]},{"Key":"143.97318 runs/s","Fragments":["(-1691.51144"]},{"Key":"runs/s (-1691.51144","Fragments":["runs/s"]},{"Key":"(-1691.51144 runs/s","Fragments":["/"]},{"Key":"/ -92.15612","Fragments":["%)","%)"]},{"Key":" [ITERATIONS]","Fragments":["Average","Average","Average","Average"]},{"Key":"[ITERATIONS] Average","Fragments":["time:","time:","time:","time:"]},{"Key":"time: 0.000","Fragments":["us","us"]},{"Key":"us (-0.000","Fragments":["us","us"]},{"Key":"(-0.000 us","Fragments":["/","/"]},{"Key":"Slowest: 0.001","Fragments":["us","us"]},{"Key":"0.001 us","Fragments":["(+0.001","(+0.001"]},{"Key":"us (+0.001","Fragments":["us","us"]},{"Key":"(+0.001 us","Fragments":["/","/"]},{"Key":"performance: 18354846247.12463","Fragments":["iterations/s"]},{"Key":"inf iterations/s","Fragments":["(+inf","(+inf"]},{"Key":"iterations/s (+inf","Fragments":["iterations/s","iterations/s"]},{"Key":"(+inf iterations/s","Fragments":["/","/"]},{"Key":"iterations/s /","Fragments":["+inf","-92.15612","+inf","-92.13228","+15.43002","-19.53954","+13.28232","-15.99759"]},{"Key":"performance: 1439731818.27475","Fragments":["iterations/s"]},{"Key":"1439731818.27475 iterations/s","Fragments":["(-16915114428.84989"]},{"Key":"iterations/s (-16915114428.84989","Fragments":["iterations/s"]},{"Key":"(-16915114428.84989 iterations/s","Fragments":["/"]},{"Key":"] times_3.using_times","Fragments":["(1000","(718.144478"]},{"Key":"times_3.using_times (1000","Fragments":["runs,"]},{"Key":"times_3.using_times (718.144478","Fragments":["ms)"]},{"Key":"time: 718.144","Fragments":["us"]},{"Key":"us (-718.144","Fragments":["us"]},{"Key":"(-718.144 us","Fragments":["/"]},{"Key":"Slowest: 9127.738","Fragments":["us"]},{"Key":"9127.738 us","Fragments":["(+8409.594"]},{"Key":"us (+8409.594","Fragments":["us"]},{"Key":"(+8409.594 us","Fragments":["/"]},{"Key":"/ +1171.017","Fragments":["%)","%)"]},{"Key":"performance: 1392.47746","Fragments":["runs/s"]},{"Key":"performance: 109.55617","Fragments":["runs/s"]},{"Key":"109.55617 runs/s","Fragments":["(-1282.92129"]},{"Key":"runs/s (-1282.92129","Fragments":["runs/s"]},{"Key":"(-1282.92129 runs/s","Fragments":["/"]},{"Key":"/ -92.13228","Fragments":["%)","%)"]},{"Key":"performance: 13924774618.95905","Fragments":["iterations/s"]},{"Key":"performance: 1095561682.42340","Fragments":["iterations/s"]},{"Key":"1095561682.42340 iterations/s","Fragments":["(-12829212936.53566"]},{"Key":"iterations/s (-12829212936.53566","Fragments":["iterations/s"]},{"Key":"(-12829212936.53566 iterations/s","Fragments":["/"]},{"Key":"[==========] Ran","Fragments":["2","2"]},{"Key":"Ran 2","Fragments":["benchmarks.","benchmarks."]},{"Key":"can read","Fragments":["this","this","about"]},{"Key":"this output,","Fragments":["bitshiftift"]},{"Key":"output, bitshiftift","Fragments":["and"]},{"Key":"bitshiftift and","Fragments":["add"]},{"Key":"add can","Fragments":["be"]},{"Key":"done about","Fragments":["1.5"]},{"Key":"about 1.5","Fragments":["times"]},{"Key":"1.5 times","Fragments":["as"]},{"Key":"times as","Fragments":["often"]},{"Key":"as often","Fragments":["in"]},{"Key":"often in","Fragments":["a"]},{"Key":"a given","Fragments":["time","number","language","case,","sequence","string","length","message"]},{"Key":"given time","Fragments":["than"]},{"Key":"time than","Fragments":["using"]},{"Key":"than using","Fragments":["multiplication.","the","`+`","a","a","a"]},{"Key":"Yes, the","Fragments":["``std::ptr_fun``"]},{"Key":"the ``std::ptr_fun``","Fragments":["is"]},{"Key":"``std::ptr_fun`` is","Fragments":["an"]},{"Key":"overhead. IIRC","Fragments":["I"]},{"Key":"IIRC I","Fragments":["was"]},{"Key":"was experimenting","Fragments":["with"]},{"Key":"experimenting with","Fragments":["lambdas"]},{"Key":"with lambdas","Fragments":["and"]},{"Key":"lambdas and","Fragments":["function"]},{"Key":"and function","Fragments":["pointers","hey()","hey()","pointers."]},{"Key":"function pointers","Fragments":["at"]},{"Key":"pointers at","Fragments":["that"]},{"Key":"you, ``::tolower``","Fragments":["was"]},{"Key":"``::tolower`` was","Fragments":["available"]},{"Key":"was available","Fragments":["on","in"]},{"Key":"available on","Fragments":["all"]},{"Key":"all C++","Fragments":["compilers"]},{"Key":"C++ compilers","Fragments":["that","work:"]},{"Key":"compilers that","Fragments":["I","support"]},{"Key":"solution better","Fragments":["than"]},{"Key":"than mine","Fragments":["because"]},{"Key":"mine because","Fragments":["of"]},{"Key":"the recursion","Fragments":["is","in","though.","seems"]},{"Key":"recursion is","Fragments":["necessary,","typical"]},{"Key":"is necessary,","Fragments":["but"]},{"Key":"but since","Fragments":["you","I","it","this"]},{"Key":"know its","Fragments":["depth"]},{"Key":"its depth","Fragments":["there's"]},{"Key":"depth there's","Fragments":["no"]},{"Key":"used ``std::string::npos``.","Fragments":["That's"]},{"Key":"``std::string::npos``. That's","Fragments":["one"]},{"Key":"That's one","Fragments":["of","complicated","thing"]},{"Key":"that happen","Fragments":["to"]},{"Key":"me when","Fragments":["I"]},{"Key":"to switch","Fragments":["between","to","from","to","the","back"]},{"Key":"switch between","Fragments":["languages","signed/unsigned"]},{"Key":"between languages","Fragments":["too"]},{"Key":"With *zero","Fragments":["overhead"]},{"Key":"*zero overhead","Fragments":["exceptions*"]},{"Key":"overhead exceptions*","Fragments":["a"]},{"Key":"exceptions* a","Fragments":["reasonable"]},{"Key":"reasonable user","Fragments":["will"]},{"Key":"user will","Fragments":["not"]},{"Key":"pay any","Fragments":["price."]},{"Key":"any price.","Fragments":["I"]},{"Key":"price. I","Fragments":["would"]},{"Key":"not bother","Fragments":["too"]},{"Key":"bother too","Fragments":["hard,"]},{"Key":"too hard,","Fragments":["since"]},{"Key":"hard, since","Fragments":["the"]},{"Key":"API defined","Fragments":["by"]},{"Key":"defined by","Fragments":["the","an"]},{"Key":"tests is","Fragments":["awful.","fast"]},{"Key":"is awful.","Fragments":["``0``"]},{"Key":"awful. ``0``","Fragments":["as"]},{"Key":"``0`` as","Fragments":["return"]},{"Key":"input **and**","Fragments":["the"]},{"Key":"**and** the","Fragments":["error"]},{"Key":"of ``std::accumulate``","Fragments":["BTW."]},{"Key":"* Are","Fragments":["you"]},{"Key":"you actually","Fragments":["using","checked"]},{"Key":"actually using","Fragments":["the"]},{"Key":"the ``std::random","Fragments":["device``"]},{"Key":"``std::random device``","Fragments":["from"]},{"Key":"device`` from","Fragments":["line"]},{"Key":"from line","Fragments":["5?","4"]},{"Key":"returning ``this``","Fragments":["for"]},{"Key":"``this`` for","Fragments":["method"]},{"Key":"for method","Fragments":["chaining."]},{"Key":"method chaining.","Fragments":["That"]},{"Key":"chaining. That","Fragments":["might"]},{"Key":"problematic if","Fragments":["the"]},{"Key":"is managed","Fragments":["by"]},{"Key":"managed by","Fragments":["a"]},{"Key":"a smart","Fragments":["pointer"]},{"Key":"smart pointer","Fragments":["and"]},{"Key":"the raw","Fragments":["pointer","input."]},{"Key":"raw pointer","Fragments":["is"]},{"Key":"pointer is","Fragments":["still","not","const","not"]},{"Key":"still used","Fragments":["because"]},{"Key":"was stored","Fragments":["or"]},{"Key":"stored or","Fragments":["passed"]},{"Key":"or passed","Fragments":["to"]},{"Key":"might at","Fragments":["least","least"]},{"Key":"least consider","Fragments":["changing"]},{"Key":"consider changing","Fragments":["the"]},{"Key":"* Last","Fragments":["not"]},{"Key":"Last not","Fragments":["least:","least:"]},{"Key":"not least:","Fragments":["I","Thanks","is"]},{"Key":"least: I","Fragments":["did"]},{"Key":"about ``std::uniform_int_distribution``,","Fragments":["thank"]},{"Key":"``std::uniform_int_distribution``, thank","Fragments":["you."]},{"Key":"and short","Fragments":["solution!"]},{"Key":" Though","Fragments":["I"]},{"Key":"improve the","Fragments":["readability","implementation.","loop","legibility","following"]},{"Key":"code by","Fragments":["separating","moving"]},{"Key":"by separating","Fragments":["business","the"]},{"Key":"separating business","Fragments":["logic"]},{"Key":"business logic","Fragments":["and"]},{"Key":"logic and","Fragments":["implementation","increasing"]},{"Key":"implementation details.","Fragments":["Also"]},{"Key":"details. Also","Fragments":["think"]},{"Key":"Also think","Fragments":["of"]},{"Key":"extracting those","Fragments":["magic"]},{"Key":" `rd`","Fragments":["was"]},{"Key":"`rd` was","Fragments":["originally"]},{"Key":"originally meant","Fragments":["to"]},{"Key":"a seed,","Fragments":["but"]},{"Key":"seed, but","Fragments":["it"]},{"Key":"seems as","Fragments":["if","if"]},{"Key":"didn't copy","Fragments":["that"]},{"Key":"that piece","Fragments":["of","of"]},{"Key":"piece of","Fragments":["code.","code","code.","code","code","code"]},{"Key":" `std::uniform_int_distribution`","Fragments":["was"]},{"Key":"`std::uniform_int_distribution` was","Fragments":["actually"]},{"Key":"actually mentioned","Fragments":["in"]},{"Key":"the random-examples","Fragments":["of"]},{"Key":"random-examples of","Fragments":["[dash](https://kapeli.com/dash)'s"]},{"Key":"of [dash](https://kapeli.com/dash)'s","Fragments":["docset"]},{"Key":"[dash](https://kapeli.com/dash)'s docset","Fragments":["for"]},{"Key":"docset for","Fragments":["C++,"]},{"Key":"for C++,","Fragments":["I","which"]},{"Key":"C++, I","Fragments":["use","have","think"]},{"Key":"use [zeal](http://zealdocs.org/)","Fragments":["as"]},{"Key":"[zeal](http://zealdocs.org/) as","Fragments":["docset-viewer"]},{"Key":"as docset-viewer","Fragments":["for"]},{"Key":"docset-viewer for","Fragments":["linux,"]},{"Key":"for linux,","Fragments":["AFAIK"]},{"Key":"linux, AFAIK","Fragments":["there"]},{"Key":"AFAIK there","Fragments":["are"]},{"Key":"are also","Fragments":["(semi-)official","some","redundant.","using"]},{"Key":"also (semi-)official","Fragments":["ports"]},{"Key":"(semi-)official ports","Fragments":["to"]},{"Key":"ports to","Fragments":["Windows"]},{"Key":"to Windows","Fragments":["and"]},{"Key":"Windows and","Fragments":["various"]},{"Key":"and various","Fragments":["mobile"]},{"Key":"various mobile","Fragments":["devices."]},{"Key":"so sure","Fragments":["about","about","that"]},{"Key":"I'm very","Fragments":["thankful"]},{"Key":"very thankful","Fragments":["for"]},{"Key":"thankful for","Fragments":["any"]},{"Key":"any hints","Fragments":["to"]},{"Key":"hints to","Fragments":["make"]},{"Key":"That's what","Fragments":["I"]},{"Key":"was getting","Fragments":["at","a","reacquainted","a","really","close"]},{"Key":"getting at","Fragments":["-"]},{"Key":"at -","Fragments":["with"]},{"Key":"- with","Fragments":["zero-cost"]},{"Key":"with zero-cost","Fragments":["exceptions"]},{"Key":"zero-cost exceptions","Fragments":["the"]},{"Key":"exceptions the","Fragments":["caller"]},{"Key":"caller who","Fragments":["passes"]},{"Key":"who passes","Fragments":["in"]},{"Key":"passes in","Fragments":["invalid"]},{"Key":"in invalid","Fragments":["stuff"]},{"Key":"invalid stuff","Fragments":["is"]},{"Key":"one who","Fragments":["pays"]},{"Key":"who pays","Fragments":["a"]},{"Key":"pays a","Fragments":["_huge_"]},{"Key":"a _huge_","Fragments":["penalty"]},{"Key":"_huge_ penalty","Fragments":["and"]},{"Key":"penalty and","Fragments":["those"]},{"Key":"and those","Fragments":["who"]},{"Key":"those who","Fragments":["do","would","don't"]},{"Key":"who do","Fragments":["not"]},{"Key":"get no","Fragments":["overhead."]},{"Key":"Thanks. I'm","Fragments":["a"]},{"Key":"big accumulate","Fragments":["fan."]},{"Key":"accumulate fan.","Fragments":["mismatch"]},{"Key":"fan. mismatch","Fragments":["has"]},{"Key":"mismatch has","Fragments":["probably"]},{"Key":"has probably","Fragments":["been"]},{"Key":"probably been","Fragments":["my"]},{"Key":"been my","Fragments":["favorite,"]},{"Key":"my favorite,","Fragments":["but"]},{"Key":"favorite, but","Fragments":["it"]},{"Key":"doesn't come","Fragments":["up"]},{"Key":"up as","Fragments":["often."]},{"Key":" Recursion","Fragments":["is"]},{"Key":"Recursion is","Fragments":["never"]},{"Key":"never strictly","Fragments":["necessary,"]},{"Key":"strictly necessary,","Fragments":["of"]},{"Key":"necessary, of","Fragments":["course."]},{"Key":"course. In","Fragments":["this"]},{"Key":"not even","Fragments":["the","mean","the","taken","need"]},{"Key":"even the","Fragments":["clearest","same"]},{"Key":"the clearest","Fragments":["solution."]},{"Key":"clearest solution.","Fragments":["I"]},{"Key":"it would've","Fragments":["made","been","made","been"]},{"Key":"would've made","Fragments":["sense","as"]},{"Key":"made sense","Fragments":["to","to"]},{"Key":"to loop","Fragments":["over","through","through","through","through","through","through"]},{"Key":"over COMMAS","Fragments":["(and"]},{"Key":"COMMAS (and","Fragments":["a"]},{"Key":"(and a","Fragments":["number","short"]},{"Key":"number indicating","Fragments":["their"]},{"Key":"indicating their","Fragments":["magnitude)"]},{"Key":"their magnitude)","Fragments":["and"]},{"Key":"magnitude) and","Fragments":["in"]},{"Key":"each case","Fragments":["call"]},{"Key":"case call","Fragments":["a"]},{"Key":"call a","Fragments":["function","hamming::compute_impl()","good","function,"]},{"Key":"the \u003c1000","Fragments":["case"]},{"Key":"\u003c1000 case","Fragments":["that's"]},{"Key":"that's currently","Fragments":["the"]},{"Key":"currently the","Fragments":["remainder"]},{"Key":"the remainder","Fragments":["of","and"]},{"Key":"remainder of","Fragments":["impl."]},{"Key":"of impl.","Fragments":["What"]},{"Key":"impl. What","Fragments":["do"]},{"Key":"the include","Fragments":["for"]},{"Key":"for boost/algo/string","Fragments":["in"]},{"Key":"boost/algo/string in","Fragments":["the"]},{"Key":"the .h?","Fragments":["It"]},{"Key":".h? It","Fragments":["is"]},{"Key":"is specific","Fragments":["to"]},{"Key":"specific to","Fragments":["the"]},{"Key":"implementation so","Fragments":["my","could"]},{"Key":"my inclination","Fragments":["is"]},{"Key":"inclination is","Fragments":["to"]},{"Key":"to leave","Fragments":["it","that","room","it"]},{"Key":"header. What","Fragments":["would"]},{"Key":"be idiomatic","Fragments":["in"]},{"Key":"A personal","Fragments":["habbit"]},{"Key":"personal habbit","Fragments":["of"]},{"Key":"habbit of","Fragments":["mine"]},{"Key":"mine is,","Fragments":["to"]},{"Key":"is, to","Fragments":["have","hold"]},{"Key":"all `#include`s","Fragments":["that"]},{"Key":"`#include`s that","Fragments":["are"]},{"Key":"are needed","Fragments":["for"]},{"Key":"needed for","Fragments":["the","the","this","'if'"]},{"Key":"declarations in","Fragments":["the","the","the"]},{"Key":"but implementation","Fragments":["specific"]},{"Key":"implementation specific","Fragments":["`#include`s"]},{"Key":"specific `#include`s","Fragments":["do"]},{"Key":"`#include`s do","Fragments":["I"]},{"Key":"actuall implementation","Fragments":["file."]},{"Key":"is idiomatic,","Fragments":["but"]},{"Key":"idiomatic, but","Fragments":["at"]},{"Key":"least I","Fragments":["can"]},{"Key":"can argue,","Fragments":["that"]},{"Key":"will (theoretically)","Fragments":["reduce"]},{"Key":"(theoretically) reduce","Fragments":["compile"]},{"Key":"reduce compile","Fragments":["time"]},{"Key":"time for","Fragments":["users"]},{"Key":"my headers.","Fragments":["Why"]},{"Key":"headers. Why","Fragments":["should"]},{"Key":"Why should","Fragments":["I"]},{"Key":"I force","Fragments":["them"]},{"Key":"force them","Fragments":["to"]},{"Key":"include `algorithm`","Fragments":["when"]},{"Key":"`algorithm` when","Fragments":["they"]},{"Key":"they never","Fragments":["use"]},{"Key":"never use","Fragments":["it?","the","the","it!"]},{"Key":"that for-each-syntax","Fragments":["is"]},{"Key":"for-each-syntax is","Fragments":["more"]},{"Key":"readable than","Fragments":["having","explicit","the","comparing","the"]},{"Key":"than having","Fragments":["old-style","a","to"]},{"Key":"having old-style","Fragments":["for-loop"]},{"Key":"old-style for-loop","Fragments":["with"]},{"Key":"with manually","Fragments":["handling"]},{"Key":"manually handling","Fragments":["the"]},{"Key":"j :","Fragments":["factors)"]},{"Key":": factors)","Fragments":["{"]},{"Key":"if (i","Fragments":["%",":"]},{"Key":"(i %","Fragments":["j"]},{"Key":"% j","Fragments":["=="]},{"Key":"j ==","Fragments":["0)"]},{"Key":" sum","Fragments":["+=","\u003c\u003c=","|=","*=","+="]},{"Key":"sum +=","Fragments":["i;","num_l;"]},{"Key":"use `std::any_of`","Fragments":["from"]},{"Key":"`std::any_of` from","Fragments":["`algorithm`,"]},{"Key":"from `algorithm`,","Fragments":["which"]},{"Key":"`algorithm`, which","Fragments":["does"]},{"Key":"does run","Fragments":["over"]},{"Key":"run over","Fragments":["an"]},{"Key":"over an","Fragments":["iterator","initialization","entire"]},{"Key":"iterator and","Fragments":["checking"]},{"Key":"and checking","Fragments":["a","all","for","if","them","to"]},{"Key":"checking a","Fragments":["predicate"]},{"Key":"a predicate","Fragments":["and","of","that","for","function","function:"]},{"Key":"predicate and","Fragments":["returns"]},{"Key":"returns `true`","Fragments":["when","when"]},{"Key":"`true` when","Fragments":["the","char"]},{"Key":"predicate evaluates","Fragments":["to"]},{"Key":"to `true`","Fragments":["the"]},{"Key":"`true` the","Fragments":["first"]},{"Key":"time or","Fragments":["`false`","both"]},{"Key":"or `false`","Fragments":["when"]},{"Key":"`false` when","Fragments":["end"]},{"Key":"when end","Fragments":["is"]},{"Key":"reached. An","Fragments":["example"]},{"Key":"An example","Fragments":["of"]},{"Key":"was kind","Fragments":["of","of"]},{"Key":"of ridiculous.","Fragments":["It"]},{"Key":"ridiculous. It","Fragments":["pushed"]},{"Key":"It pushed","Fragments":["you"]},{"Key":"pushed you","Fragments":["strongly"]},{"Key":"you strongly","Fragments":["toward"]},{"Key":"strongly toward","Fragments":["boost::gregorian"]},{"Key":"toward boost::gregorian","Fragments":["which"]},{"Key":"boost::gregorian which","Fragments":["already"]},{"Key":"which already","Fragments":["contains"]},{"Key":"already contains","Fragments":["the"]},{"Key":"contains the","Fragments":["solution,","same","'guts'","name"]},{"Key":"solution, and","Fragments":["then","I"]},{"Key":"then required","Fragments":["scores"]},{"Key":"required scores","Fragments":["of"]},{"Key":"scores of","Fragments":["individual"]},{"Key":"of individual","Fragments":["but"]},{"Key":"individual but","Fragments":["nearly"]},{"Key":"but nearly","Fragments":["identical"]},{"Key":"nearly identical","Fragments":["functions"]},{"Key":"identical functions","Fragments":["be"]},{"Key":"functions be","Fragments":["declared...","static"]},{"Key":"be declared...","Fragments":["a"]},{"Key":"declared... a","Fragments":["pretty"]},{"Key":"pretty strangely","Fragments":["designed"]},{"Key":"strangely designed","Fragments":["exercise."]},{"Key":"designed exercise.","Fragments":["The"]},{"Key":"exercise. The","Fragments":["ruby","exercism","generalization,"]},{"Key":"The ruby","Fragments":["version"]},{"Key":"ruby version","Fragments":["passed","of"]},{"Key":"version passed","Fragments":["the","all"]},{"Key":"the day","Fragments":["of"]},{"Key":"day of","Fragments":["the"]},{"Key":"the week","Fragments":["and"]},{"Key":"week and","Fragments":["week"]},{"Key":"and week","Fragments":["of"]},{"Key":"week of","Fragments":["the"]},{"Key":"the month","Fragments":["to"]},{"Key":"month to","Fragments":["you"]},{"Key":"you as","Fragments":["arguments,"]},{"Key":"as arguments,","Fragments":["not"]},{"Key":"arguments, not","Fragments":["as"]},{"Key":"Yes, surprisingly,","Fragments":["```p-\u003e```"]},{"Key":"surprisingly, ```p-\u003e```","Fragments":["works..."]},{"Key":"```p-\u003e``` works...","Fragments":["I'm"]},{"Key":"works... I'm","Fragments":["not"]},{"Key":"not exactly","Fragments":["sure","the"]},{"Key":"exactly sure","Fragments":["why..."]},{"Key":"You right,","Fragments":["i"]},{"Key":"right, i","Fragments":["should"]},{"Key":"i should","Fragments":["at","do"]},{"Key":"least write","Fragments":["```auto\u0026"]},{"Key":"write ```auto\u0026","Fragments":["p```,"]},{"Key":"```auto\u0026 p```,","Fragments":["at"]},{"Key":"p```, at","Fragments":["most"]},{"Key":"most ```const","Fragments":["auto\u0026"]},{"Key":"```const auto\u0026","Fragments":["p```."]},{"Key":"Yes, I","Fragments":["too","should","did","missed"]},{"Key":"I too","Fragments":["initially"]},{"Key":"too initially","Fragments":["started"]},{"Key":"initially started","Fragments":["with"]},{"Key":"using Position","Fragments":["="]},{"Key":"Position =","Fragments":["std::pair\u003cint,int\u003e;"]},{"Key":"* It's","Fragments":["not","not","not"]},{"Key":"not valuesafe","Fragments":["(no"]},{"Key":"valuesafe (no","Fragments":["bounds"]},{"Key":"(no bounds","Fragments":["checking)"]},{"Key":"not descriptive","Fragments":["(what's"]},{"Key":"descriptive (what's","Fragments":["a"]},{"Key":"(what's a","Fragments":[".first"]},{"Key":"a .first","Fragments":["in"]},{"Key":".first in","Fragments":["this"]},{"Key":"* int","Fragments":["is"]},{"Key":"too darn","Fragments":["big."]},{"Key":"darn big.","Fragments":["Yes"]},{"Key":"big. Yes","Fragments":["I"]},{"Key":"Yes I","Fragments":["know","have."]},{"Key":"know it'll","Fragments":["get"]},{"Key":"get promoted","Fragments":["to","to"]},{"Key":"to int","Fragments":["any","in","in","unless","(rather"]},{"Key":"int any","Fragments":["time"]},{"Key":"it hits","Fragments":["a","a"]},{"Key":"hits a","Fragments":["register,","non-alphanumeric"]},{"Key":"a register,","Fragments":["but"]},{"Key":"register, but","Fragments":["there's"]},{"Key":"there's other","Fragments":["times"]},{"Key":"other times","Fragments":["when"]},{"Key":"when size","Fragments":["does"]},{"Key":"size does","Fragments":["matter."]},{"Key":"Maybe use","Fragments":["a"]},{"Key":"member initializer","Fragments":["list"]},{"Key":"list in","Fragments":["your"]},{"Key":"your constructor?","Fragments":["Yeah"]},{"Key":"constructor? Yeah","Fragments":["it"]},{"Key":"Yeah it","Fragments":["may"]},{"Key":"may end","Fragments":["up","up"]},{"Key":"being wasteful","Fragments":["if"]},{"Key":"wasteful if","Fragments":["you"]},{"Key":"you're throwing","Fragments":["these","an"]},{"Key":"throwing these","Fragments":["sorts"]},{"Key":"these sorts","Fragments":["of"]},{"Key":"sorts of","Fragments":["almost-non-existent","things"]},{"Key":"of almost-non-existent","Fragments":["costs"]},{"Key":"almost-non-existent costs","Fragments":["will"]},{"Key":"costs will","Fragments":["seem"]},{"Key":"will seem","Fragments":["like"]},{"Key":"Your string","Fragments":["conversion","arguments"]},{"Key":"than mine,","Fragments":["and"]},{"Key":"mine, and","Fragments":["it's","I"]},{"Key":"it's funny","Fragments":["because"]},{"Key":"funny because","Fragments":["when"]},{"Key":"the ruby","Fragments":["version"]},{"Key":"this (before)","Fragments":["I"]},{"Key":"(before) I","Fragments":["did"]},{"Key":"it your","Fragments":["way."]},{"Key":"feel compelled","Fragments":["to","to"]},{"Key":"compelled to","Fragments":["come","point","write"]},{"Key":"* Uniform","Fragments":["initialization"]},{"Key":"Uniform initialization","Fragments":["is"]},{"Key":"initialization is","Fragments":["cool,","cool."]},{"Key":"is cool,","Fragments":["and","but"]},{"Key":"cool, and","Fragments":["a","makes"]},{"Key":"times the","Fragments":["type","function"]},{"Key":"is unambiguous","Fragments":["so"]},{"Key":"unambiguous so","Fragments":["your"]},{"Key":"so your","Fragments":["some","way","functions"]},{"Key":"your some","Fragments":["of"]},{"Key":"your make_pair","Fragments":["calls"]},{"Key":"make_pair calls","Fragments":["could"]},{"Key":"calls could","Fragments":["be"]},{"Key":"be e.g.","Fragments":["{0,3}"]},{"Key":"* Maybe","Fragments":["bounds","switch","move"]},{"Key":"Maybe bounds","Fragments":["checking"]},{"Key":"checking would","Fragments":["be"]},{"Key":"be cool,","Fragments":["even"]},{"Key":"cool, even","Fragments":["though"]},{"Key":"even though","Fragments":["the","it","it's","it's","it","cleanKey()","the","this","it's"]},{"Key":"though the","Fragments":["test","first"]},{"Key":"suite didn't","Fragments":["call"]},{"Key":"didn't call","Fragments":["for"]},{"Key":"call for","Fragments":["it."]},{"Key":"shouldn't really","Fragments":["be"]},{"Key":"really be","Fragments":["able","improved","a","an"]},{"Key":"to place","Fragments":["the","a","a","all"]},{"Key":"place the","Fragments":["white"]},{"Key":"the white","Fragments":["queen","position","position"]},{"Key":"white queen","Fragments":["on"]},{"Key":"queen on","Fragments":["-200,"]},{"Key":"on -200,","Fragments":["98103"]},{"Key":"And stuff","Fragments":["you"]},{"Key":"stuff you","Fragments":["could"]},{"Key":"consider if","Fragments":["you"]},{"Key":"you haven't","Fragments":["already,","already."]},{"Key":"haven't already,","Fragments":["but"]},{"Key":"really rise","Fragments":["to"]},{"Key":"rise to","Fragments":["the"]},{"Key":"the level","Fragments":["of"]},{"Key":"of suggestion","Fragments":["because"]},{"Key":"suggestion because","Fragments":["your"]},{"Key":"do both","Fragments":["constructors","checks."]},{"Key":"both constructors","Fragments":["as"]},{"Key":"constructors as","Fragments":["one"]},{"Key":"with default","Fragments":["arguments.","end","arguments."]},{"Key":"default arguments.","Fragments":["That","Over"]},{"Key":"arguments. That","Fragments":["does"]},{"Key":"does open","Fragments":["up"]},{"Key":"open up","Fragments":["the","an"]},{"Key":"specifying the","Fragments":["white","white","namespace"]},{"Key":"white position","Fragments":["and","while"]},{"Key":"position and","Fragments":["letting"]},{"Key":"letting black","Fragments":["go"]},{"Key":"black go","Fragments":["default,"]},{"Key":"go default,","Fragments":["though,"]},{"Key":"default, though,","Fragments":["and"]},{"Key":"maybe you","Fragments":["wouldn't","don't","don't","used"]},{"Key":"wouldn't want","Fragments":["that.","to","to"]},{"Key":"* Your","Fragments":["default"]},{"Key":"Your default","Fragments":["constructor"]},{"Key":"constructor could","Fragments":["delegate","be"]},{"Key":"could delegate","Fragments":["to"]},{"Key":"delegate to","Fragments":["your"]},{"Key":"one for","Fragments":["an","a","plus","or.","the","loop","loop","now."]},{"Key":"an extremely","Fragments":["similar"]},{"Key":"extremely similar","Fragments":["amount"]},{"Key":"similar amount","Fragments":["of"]},{"Key":"of typing","Fragments":["and"]},{"Key":"typing and","Fragments":["readability.","make"]},{"Key":"and readability.","Fragments":["Oh","This"]},{"Key":"readability. Oh","Fragments":["actually"]},{"Key":"Oh actually","Fragments":["that"]},{"Key":"actually that","Fragments":["adds"]},{"Key":"adds an","Fragments":["unnecessary"]},{"Key":"unnecessary check","Fragments":["for"]},{"Key":"for white_","Fragments":["=="]},{"Key":"white_ ==","Fragments":["black_"]},{"Key":"== black_","Fragments":["when"]},{"Key":"black_ when","Fragments":["you"]},{"Key":"won't be","Fragments":["since","able","gaining","needlessly","any"]},{"Key":"be since","Fragments":["they're"]},{"Key":"they're constants,","Fragments":["so"]},{"Key":"constants, so","Fragments":["your"]},{"Key":"definitely better.","Fragments":["Crud,"]},{"Key":"better. Crud,","Fragments":["that"]},{"Key":"Crud, that","Fragments":["applies"]},{"Key":"that applies","Fragments":["to","to"]},{"Key":"applies to","Fragments":["the","constructors","all","all"]},{"Key":"previous bullet","Fragments":["as"]},{"Key":"bullet as","Fragments":["well."]},{"Key":"* If","Fragments":["you","you","you"]},{"Key":"your default","Fragments":["constructor","`return","in"]},{"Key":"constructor doesn't","Fragments":["need"]},{"Key":" chess_board()","Fragments":["="]},{"Key":"chess_board() =","Fragments":["default;"]},{"Key":" position","Fragments":["white_","black_"]},{"Key":"position white_","Fragments":["="]},{"Key":"white_ =","Fragments":["{"]},{"Key":"{ 0,","Fragments":["3"]},{"Key":"0, 3","Fragments":["};"]},{"Key":"position black_","Fragments":["="]},{"Key":"black_ =","Fragments":["{"]},{"Key":"{ 7,","Fragments":["3"]},{"Key":"7, 3","Fragments":["};"]},{"Key":"Yep, that's","Fragments":["it."]},{"Key":"that's it.","Fragments":["That's"]},{"Key":"it. That's","Fragments":["all","not"]},{"Key":"That's all","Fragments":["I"]},{"Key":"can come","Fragments":["up","back"]},{"Key":"up with.","Fragments":["I"]},{"Key":"with. I","Fragments":["can't"]},{"Key":"can't even","Fragments":["give","pass"]},{"Key":"even give","Fragments":["my"]},{"Key":"give my","Fragments":["usual"]},{"Key":"usual \"this","Fragments":["function"]},{"Key":"\"this function","Fragments":["is"]},{"Key":"so give","Fragments":["it"]},{"Key":"it special","Fragments":["linkage"]},{"Key":"special linkage","Fragments":["blah"]},{"Key":"linkage blah","Fragments":["blah"]},{"Key":"blah blah","Fragments":["blah\""]},{"Key":"blah blah\"","Fragments":["nonsense"]},{"Key":"blah\" nonsense","Fragments":["because"]},{"Key":"nonsense because","Fragments":["when"]},{"Key":"you declare","Fragments":["it","a","your","function","your"]},{"Key":"class body","Fragments":["like","is"]},{"Key":"body like","Fragments":["that"]},{"Key":"inline by","Fragments":["default,"]},{"Key":"default, so","Fragments":["it's"]},{"Key":"it's all","Fragments":["good.","good,"]},{"Key":"of `!any_of()`","Fragments":["you"]},{"Key":"`!any_of()` you","Fragments":["can"]},{"Key":"an addition","Fragments":["to"]},{"Key":"what @leila","Fragments":["said,"]},{"Key":"@leila said,","Fragments":["I"]},{"Key":"think for-each","Fragments":["syntax"]},{"Key":"for-each syntax","Fragments":["is"]},{"Key":"quite more","Fragments":["readable"]},{"Key":"than explicit","Fragments":["iterator","loops."]},{"Key":"explicit iterator","Fragments":["handling.","declarations"]},{"Key":"Your function","Fragments":["does","signature"]},{"Key":"does accept","Fragments":["`\"321\"`"]},{"Key":"accept `\"321\"`","Fragments":["or"]},{"Key":"`\"321\"` or","Fragments":["`\"9\"`"]},{"Key":"or `\"9\"`","Fragments":["as"]},{"Key":"`\"9\"` as","Fragments":["valid","input"]},{"Key":"as valid","Fragments":["input,","as"]},{"Key":"valid input,","Fragments":["while"]},{"Key":"input, while","Fragments":["it"]},{"Key":"But is","Fragments":["against"]},{"Key":"is against","Fragments":["the"]},{"Key":"against the","Fragments":["rules:","number","reference","string","string","string","characters"]},{"Key":"\u003e If","Fragments":["your","you","k"]},{"Key":"your language","Fragments":["provides"]},{"Key":"language provides","Fragments":["a"]},{"Key":"provides a","Fragments":["method","type","good"]},{"Key":"a method","Fragments":["in","that","that","for"]},{"Key":"method in","Fragments":["the","a","a","namespace"]},{"Key":"library to","Fragments":["perform","memory...","get","remove","use"]},{"Key":"perform the","Fragments":["conversion,","modulo","best.","work","work","work","test"]},{"Key":"the conversion,","Fragments":["pretend"]},{"Key":"conversion, pretend","Fragments":["it"]},{"Key":"pretend it","Fragments":["doesn't"]},{"Key":" `isdigit`","Fragments":["is"]},{"Key":"`isdigit` is","Fragments":["to"]},{"Key":"to broad,","Fragments":["you"]},{"Key":"broad, you","Fragments":["will"]},{"Key":"will accept","Fragments":["`\"9\"`"]},{"Key":"accept `\"9\"`","Fragments":["as"]},{"Key":"as input","Fragments":["while"]},{"Key":"input while","Fragments":["you"]},{"Key":"while you","Fragments":["shouldn't.","write"]},{"Key":"That string","Fragments":["operator"]},{"Key":"string operator","Fragments":["is","with","!"]},{"Key":"really nice,","Fragments":["I'm"]},{"Key":"nice, I'm","Fragments":["stealing"]},{"Key":"I'm stealing","Fragments":["it"]},{"Key":"stealing it","Fragments":["too!"]},{"Key":"Next iteration","Fragments":[":"]},{"Key":" replace","Fragments":["the"]},{"Key":"replace the","Fragments":["string","`for`","second","first","map","string","body"]},{"Key":"operator with","Fragments":["this","the"]},{"Key":"better one","Fragments":["by"]},{"Key":"one by","Fragments":["@ronny","one"]},{"Key":"by @ronny","Fragments":["http://exercism.io/submissions/e4df7c6ba1dd4d80a718b16a3c7ab836"]},{"Key":"any arithmetic","Fragments":["with"]},{"Key":"arithmetic with","Fragments":["it,"]},{"Key":"with it,","Fragments":["perhaps","but","although"]},{"Key":"it, perhaps","Fragments":["QueenColor"]},{"Key":"perhaps QueenColor","Fragments":["could"]},{"Key":"QueenColor could","Fragments":["be"]},{"Key":" @roosevelt","Fragments":["Thanks","Take"]},{"Key":"@roosevelt Thanks","Fragments":["a"]},{"Key":"your nitpick,","Fragments":["I"]},{"Key":"it improves","Fragments":["my","what","legibility"]},{"Key":"improves my","Fragments":["solution"]},{"Key":"solution significantly.","Fragments":["I'm"]},{"Key":"significantly. I'm","Fragments":["used"]},{"Key":"to C++98","Fragments":["and"]},{"Key":"C++98 and","Fragments":["while"]},{"Key":"while I'm","Fragments":["trying"]},{"Key":"catch up,","Fragments":["there"]},{"Key":"up, there","Fragments":["is"]},{"Key":"lot in","Fragments":["my"]},{"Key":"my repertoire","Fragments":["that"]},{"Key":"repertoire that","Fragments":["I"]},{"Key":"* Yes,","Fragments":["uniform","I"]},{"Key":"Yes, uniform","Fragments":["initialization"]},{"Key":"is cool.","Fragments":["Note"]},{"Key":"cool. Note","Fragments":["to"]},{"Key":"Note to","Fragments":["myself:"]},{"Key":"to myself:","Fragments":["brace-or-equal"]},{"Key":"myself: brace-or-equal","Fragments":["initializers"]},{"Key":"brace-or-equal initializers","Fragments":["make"]},{"Key":"initializers make","Fragments":["a"]},{"Key":"class non","Fragments":["*aggregate*"]},{"Key":"non *aggregate*","Fragments":["in"]},{"Key":"*aggregate* in","Fragments":["C++11,"]},{"Key":"in C++11,","Fragments":["changed","use"]},{"Key":"C++11, changed","Fragments":["again"]},{"Key":"changed again","Fragments":["in"]},{"Key":"again in","Fragments":["C++14.","a"]},{"Key":"* Bounds","Fragments":["checking"]},{"Key":"Bounds checking","Fragments":["looks"]},{"Key":"checking looks","Fragments":["like"]},{"Key":"good idea,","Fragments":["I","though.","still","it","but"]},{"Key":"idea, I","Fragments":["would"]},{"Key":"would certainly","Fragments":["do","work,","be","be"]},{"Key":"certainly do","Fragments":["it"]},{"Key":"it IRL.","Fragments":["BTW:"]},{"Key":"IRL. BTW:","Fragments":["John"]},{"Key":"BTW: John","Fragments":["Lakos"]},{"Key":"John Lakos","Fragments":["talked"]},{"Key":"Lakos talked","Fragments":["about"]},{"Key":"about *Defensive","Fragments":["Programming*"]},{"Key":"*Defensive Programming*","Fragments":["at"]},{"Key":"Programming* at","Fragments":["CppCon"]},{"Key":"at CppCon","Fragments":["2014"]},{"Key":"CppCon 2014","Fragments":["(https://www.youtube.com/watch?v=1QhtXRMp3Hg)."]},{"Key":"2014 (https://www.youtube.com/watch?v=1QhtXRMp3Hg).","Fragments":["I"]},{"Key":"(https://www.youtube.com/watch?v=1QhtXRMp3Hg). I","Fragments":["like"]},{"Key":"to constructor","Fragments":["delegation."]},{"Key":"your last","Fragments":["suggestion","comment","paragraph.","suggestion."]},{"Key":"last suggestion","Fragments":["the"]},{"Key":"suggestion the","Fragments":["most."]},{"Key":"the most.","Fragments":["An"]},{"Key":"most. An","Fragments":["explicitly"]},{"Key":"An explicitly","Fragments":["stated"]},{"Key":"explicitly stated","Fragments":["default"]},{"Key":"stated default","Fragments":["constructor"]},{"Key":"with initialization","Fragments":["for"]},{"Key":"initialization for","Fragments":["the"]},{"Key":"member values","Fragments":["in"]},{"Key":"is short,","Fragments":["clean"]},{"Key":"short, clean","Fragments":["and"]},{"Key":"and self","Fragments":["documenting."]},{"Key":"header only","Fragments":["solution","does"]},{"Key":"only solution","Fragments":["was","(most"]},{"Key":"solution was","Fragments":["from"]},{"Key":"was from","Fragments":["a"]},{"Key":"a time","Fragments":["where","testing","and"]},{"Key":"time where","Fragments":["you"]},{"Key":"@roosevelt Take","Fragments":["as"]},{"Key":"Take as","Fragments":["much"]},{"Key":"the note","Fragments":["on"]},{"Key":"note on","Fragments":["="]},{"Key":"on =","Fragments":["default."]},{"Key":"= default.","Fragments":["Learn"]},{"Key":"default. Learn","Fragments":["something"]},{"Key":"Learn something","Fragments":["new"]},{"Key":"something new","Fragments":["every","whether"]},{"Key":"new every","Fragments":["day,"]},{"Key":"every day,","Fragments":["right?"]},{"Key":"to persuade","Fragments":["myself","myself"]},{"Key":"persuade myself","Fragments":["that","that"]},{"Key":"an efficient","Fragments":["way","manner"]},{"Key":"efficient way","Fragments":["of","to","of"]},{"Key":"of solving","Fragments":["the"]},{"Key":"solving the","Fragments":["problem.","\"eight"]},{"Key":"problem. On","Fragments":["line"]},{"Key":"On line","Fragments":["12","11","11"]},{"Key":"line 12","Fragments":["where","passes,","does","not"]},{"Key":"12 where","Fragments":["the"]},{"Key":"default position","Fragments":["is"]},{"Key":"position is","Fragments":["to"]},{"Key":"increment ```fact```","Fragments":["by"]},{"Key":"```fact``` by","Fragments":["1"]},{"Key":"by 1","Fragments":["it","means","if"]},{"Key":"1 it","Fragments":["would"]},{"Key":"move fact","Fragments":["to"]},{"Key":"fact to","Fragments":["the","close"]},{"Key":"next prime","Fragments":["number"]},{"Key":"number if","Fragments":["there"]},{"Key":"in boost","Fragments":["or"]},{"Key":"other library","Fragments":["that"]},{"Key":"library that","Fragments":["I"]},{"Key":"any point","Fragments":["in"]},{"Key":"in checking","Fragments":["if","the","values"]},{"Key":"if ```fact```","Fragments":["is"]},{"Key":"```fact``` is","Fragments":["prime"]},{"Key":"is prime","Fragments":["before"]},{"Key":"prime before","Fragments":["the"]},{"Key":"line 7","Fragments":["because"]},{"Key":"7 because","Fragments":["if"]},{"Key":"test will","Fragments":["fail"]},{"Key":"will fail","Fragments":["automatically","if"]},{"Key":"fail automatically","Fragments":["because"]},{"Key":"automatically because","Fragments":["if"]},{"Key":"if ```n```","Fragments":["is"]},{"Key":"```n``` is","Fragments":["divisible"]},{"Key":"number it","Fragments":["will"]},{"Key":"be divisible","Fragments":["by"]},{"Key":"by it's","Fragments":["prime"]},{"Key":"it's prime","Fragments":["factors,"]},{"Key":"prime factors,","Fragments":["and"]},{"Key":"factors, and","Fragments":["an"]},{"Key":"earlier check","Fragments":["will"]},{"Key":"check will","Fragments":["have"]},{"Key":" Every","Fragments":["prime"]},{"Key":"Every prime","Fragments":["except"]},{"Key":"prime except","Fragments":["2"]},{"Key":"except 2","Fragments":["and"]},{"Key":"and 3","Fragments":["obbeys"]},{"Key":"3 obbeys","Fragments":["one"]},{"Key":"obbeys one","Fragments":["of"]},{"Key":"0 ==","Fragments":["(c","(c"]},{"Key":"== (c","Fragments":["-","+"]},{"Key":"1) %","Fragments":["6","6"]},{"Key":"(c +","Fragments":["1)"]},{"Key":"+ 1)","Fragments":["%"]},{"Key":"if `c`","Fragments":["(the"]},{"Key":"`c` (the","Fragments":["candidate)"]},{"Key":"(the candidate)","Fragments":["is"]},{"Key":"candidate) is","Fragments":["neither"]},{"Key":"is neither","Fragments":["2,","silence"]},{"Key":"neither 2,","Fragments":["nor"]},{"Key":"2, nor","Fragments":["3,"]},{"Key":"nor 3,","Fragments":["nor"]},{"Key":"3, nor","Fragments":["does"]},{"Key":"nor does","Fragments":["follow","it"]},{"Key":"does follow","Fragments":["one"]},{"Key":"follow one","Fragments":["of"]},{"Key":"these rules,","Fragments":["it"]},{"Key":"rules, it","Fragments":["can't"]},{"Key":"way is,","Fragments":["to"]},{"Key":"hold a","Fragments":["`vector\u003cint\u003e`"]},{"Key":"a `vector\u003cint\u003e`","Fragments":["of"]},{"Key":"`vector\u003cint\u003e` of","Fragments":["known"]},{"Key":"of known","Fragments":["primes","primes"]},{"Key":"in memory","Fragments":["and","from"]},{"Key":"and extend","Fragments":["when"]},{"Key":"extend when","Fragments":["necessary"]},{"Key":"when necessary","Fragments":["(as"]},{"Key":"necessary (as","Fragments":["seen"]},{"Key":"(as seen","Fragments":["in"]},{"Key":"seen in","Fragments":["my"]},{"Key":" `break`","Fragments":["out"]},{"Key":"`break` out","Fragments":["from"]},{"Key":"from loop","Fragments":["when"]},{"Key":"loop when","Fragments":["there","iterating"]},{"Key":"there can't","Fragments":["be"]},{"Key":"more prime-factors","Fragments":["(line"]},{"Key":"prime-factors (line","Fragments":["36)"]},{"Key":" @telly","Fragments":["Thanks"]},{"Key":"@telly Thanks","Fragments":["for"]},{"Key":"seems pointless","Fragments":["to"]},{"Key":"pointless to","Fragments":["check"]},{"Key":"is prime,","Fragments":["and"]},{"Key":"prime, and","Fragments":["then"]},{"Key":"then check","Fragments":["to","whether","if"]},{"Key":"it divides","Fragments":["the"]},{"Key":"divides the","Fragments":["input"]},{"Key":"input given","Fragments":["that"]},{"Key":"the divisors","Fragments":["of"]},{"Key":"divisors of","Fragments":["n"]},{"Key":"of n","Fragments":["are","times"]},{"Key":"n are","Fragments":["guaranteed"]},{"Key":"are guaranteed","Fragments":["to"]},{"Key":"be prime","Fragments":["with"]},{"Key":"prime with","Fragments":["the"]},{"Key":"method as","Fragments":["written"]},{"Key":" Looping","Fragments":["through"]},{"Key":"Looping through","Fragments":["a"]},{"Key":"through a","Fragments":["list","randomizer","string,","particular"]},{"Key":"primes is","Fragments":["an"]},{"Key":"an alternative,","Fragments":["but"]},{"Key":"alternative, but","Fragments":["won't"]},{"Key":"but won't","Fragments":["work"]},{"Key":"won't work","Fragments":["for","in","as"]},{"Key":"for huge","Fragments":["numbers"]},{"Key":"huge numbers","Fragments":["as"]},{"Key":"as we","Fragments":["don't","are","can't"]},{"Key":"know all","Fragments":["the","of"]},{"Key":"the primes.","Fragments":["If"]},{"Key":"primes. If","Fragments":["you","a"]},{"Key":"are looping","Fragments":["to"]},{"Key":"looping to","Fragments":["find"]},{"Key":"find primes","Fragments":["and"]},{"Key":"primes and","Fragments":["then"]},{"Key":"then looping","Fragments":["through"]},{"Key":"looping through","Fragments":["primes","the","the","keys","the"]},{"Key":"through primes","Fragments":["to"]},{"Key":"primes to","Fragments":["find","ensure"]},{"Key":"find factors","Fragments":["what"]},{"Key":"factors what","Fragments":["have"]},{"Key":"One optimisation","Fragments":["I"]},{"Key":"optimisation I","Fragments":["can"]},{"Key":"see now","Fragments":["is"]},{"Key":"now is","Fragments":["when","branch","to"]},{"Key":"a factor","Fragments":["is"]},{"Key":"next factor","Fragments":["must"]},{"Key":"factor must","Fragments":["be"]},{"Key":"be at","Fragments":["least","least"]},{"Key":"least as","Fragments":["large","long","nice"]},{"Key":"as large","Fragments":["as"]},{"Key":"large as","Fragments":["the"]},{"Key":"the factor,","Fragments":["so"]},{"Key":"factor, so","Fragments":["reinitialising"]},{"Key":"so reinitialising","Fragments":["```fact```"]},{"Key":"reinitialising ```fact```","Fragments":["to"]},{"Key":"```fact``` to","Fragments":["2"]},{"Key":"2 on","Fragments":["line"]},{"Key":"line 10","Fragments":["is","to"]},{"Key":"10 is","Fragments":["wasteful."]},{"Key":" @maximus","Fragments":["great"]},{"Key":"@maximus great","Fragments":["suggestion,"]},{"Key":"great suggestion,","Fragments":["I"]},{"Key":"suggestion, I","Fragments":["will","am"]},{"Key":"will change","Fragments":["that.","into","the"]},{"Key":" @ewald","Fragments":["I'm"]},{"Key":"@ewald I'm","Fragments":["not"]},{"Key":"I follow","Fragments":["you."]},{"Key":"follow you.","Fragments":["The"]},{"Key":"you. The","Fragments":["acumulator"]},{"Key":"The acumulator","Fragments":["is"]},{"Key":"acumulator is","Fragments":["multiplied"]},{"Key":"is multiplied","Fragments":["at"]},{"Key":"multiplied at","Fragments":["each"]},{"Key":"each step","Fragments":["in"]},{"Key":"step in","Fragments":["the"]},{"Key":"loop. Can","Fragments":["you"]},{"Key":" Combining","Fragments":["both"]},{"Key":"Combining both","Fragments":["if"]},{"Key":"both if","Fragments":["clauses","they"]},{"Key":"if clauses","Fragments":["is"]},{"Key":"clauses is","Fragments":["a"]},{"Key":"small improvement,","Fragments":["but"]},{"Key":"improvement, but","Fragments":["it's"]},{"Key":"about ``place_queen(...)``.","Fragments":["It"]},{"Key":"``place_queen(...)``. It","Fragments":["seems"]},{"Key":"all information","Fragments":["in"]},{"Key":"information in","Fragments":["place","the"]},{"Key":"place at","Fragments":["``chess_board(position,"]},{"Key":"at ``chess_board(position,","Fragments":["position)``"]},{"Key":"``chess_board(position, position)``","Fragments":["but"]},{"Key":"position)`` but","Fragments":["when"]},{"Key":"but when","Fragments":["passing","accessing","I","I","using"]},{"Key":"when passing","Fragments":["the","to","an"]},{"Key":"the positions","Fragments":["to"]},{"Key":"positions to","Fragments":["``place_queen(...)``"]},{"Key":"to ``place_queen(...)``","Fragments":["you"]},{"Key":"``place_queen(...)`` you","Fragments":["need"]},{"Key":"to introduce","Fragments":["``enum","such","a","recursion"]},{"Key":"introduce ``enum","Fragments":["class"]},{"Key":"``enum class","Fragments":["QueenColor``","QueenColor``"]},{"Key":"class QueenColor``","Fragments":["only","only"]},{"Key":"QueenColor`` only","Fragments":["to","because"]},{"Key":"them apart.","Fragments":["Did"]},{"Key":"apart. Did","Fragments":["you"]},{"Key":"consider passing","Fragments":["a"]},{"Key":"to ``white_queen_``","Fragments":["or"]},{"Key":"``white_queen_`` or","Fragments":["``black_queen_``?"]},{"Key":"or ``black_queen_``?","Fragments":["The"]},{"Key":"``black_queen_``? The","Fragments":["assignment"]},{"Key":"The assignment","Fragments":["to"]},{"Key":"to ``other_queen``","Fragments":["would"]},{"Key":"``other_queen`` would","Fragments":["then"]},{"Key":"would then","Fragments":["need","call"]},{"Key":"then need","Fragments":["to"]},{"Key":"test ``\u0026pos","Fragments":["=="]},{"Key":"``\u0026pos ==","Fragments":["\u0026white_queen_``."]},{"Key":"you introduced","Fragments":["``enum"]},{"Key":"introduced ``enum","Fragments":["class"]},{"Key":"only because","Fragments":["you"]},{"Key":"you needed","Fragments":["it"]},{"Key":"needed it","Fragments":["for"]},{"Key":" Actually,","Fragments":["now","i"]},{"Key":"Actually, now","Fragments":["that"]},{"Key":"that @candido","Fragments":["brings"]},{"Key":"@candido brings","Fragments":["it"]},{"Key":"brings it","Fragments":["to"]},{"Key":"Why have","Fragments":["the"]},{"Key":"for other_queen","Fragments":["=="]},{"Key":"other_queen ==","Fragments":["pos"]},{"Key":"== pos","Fragments":["inside"]},{"Key":"pos inside","Fragments":["place_queen?"]},{"Key":"inside place_queen?","Fragments":["It's"]},{"Key":"place_queen? It's","Fragments":["a"]},{"Key":"private method","Fragments":["that","called"]},{"Key":"method that","Fragments":["only","takes","returns"]},{"Key":"only gets","Fragments":["called"]},{"Key":"gets called","Fragments":["in"]},{"Key":"called in","Fragments":["one"]},{"Key":"place so","Fragments":["pulling"]},{"Key":"so pulling","Fragments":["it"]},{"Key":"out actually","Fragments":["reduces"]},{"Key":"actually reduces","Fragments":["the"]},{"Key":"reduces the","Fragments":["amount","lines"]},{"Key":"code (because","Fragments":["you"]},{"Key":"to deduce","Fragments":["the"]},{"Key":"deduce the","Fragments":["other_queen,"]},{"Key":"the other_queen,","Fragments":["you"]},{"Key":"other_queen, you","Fragments":["just"]},{"Key":"just check","Fragments":["white_queen","the","if","if"]},{"Key":"check white_queen","Fragments":["=="]},{"Key":"white_queen ==","Fragments":["black_queen),"]},{"Key":"== black_queen),","Fragments":["and"]},{"Key":"black_queen), and","Fragments":["much"]},{"Key":"time that","Fragments":["validation"]},{"Key":"that validation","Fragments":["check"]},{"Key":"validation check","Fragments":["happens"]},{"Key":"check happens","Fragments":["it's","after"]},{"Key":"happens it's","Fragments":["not"]},{"Key":"valid check","Fragments":["-"]},{"Key":"check -","Fragments":["you"]},{"Key":"potentially have","Fragments":["an"]},{"Key":"the white_queen","Fragments":["is"]},{"Key":"white_queen is","Fragments":["placed"]},{"Key":"is placed","Fragments":["on"]},{"Key":"placed on","Fragments":["a"]},{"Key":"a position","Fragments":["that","*before*","1:","4:","1:","2:","3:","4:","5:","6:"]},{"Key":"position that","Fragments":["happens","belongs"]},{"Key":"that happens","Fragments":["to"]},{"Key":"to correspond","Fragments":["to"]},{"Key":"correspond to","Fragments":["the","a"]},{"Key":"numbers black_queen_","Fragments":["has"]},{"Key":"black_queen_ has","Fragments":["before"]},{"Key":"has before","Fragments":["it"]},{"Key":"before it","Fragments":["has","reaches","can"]},{"Key":"has its","Fragments":["position"]},{"Key":"its position","Fragments":["(..."]},{"Key":"position (...","Fragments":["is"]},{"Key":"(... is","Fragments":["that"]},{"Key":"that guaranteed","Fragments":["to"]},{"Key":"be 0,0?).","Fragments":["And"]},{"Key":"0,0?). And","Fragments":["that's"]},{"Key":"not right.","Fragments":["Having"]},{"Key":"right. Having","Fragments":["it"]},{"Key":"Having it","Fragments":["skip","be"]},{"Key":"it skip","Fragments":["the"]},{"Key":"check during","Fragments":["the"]},{"Key":"call would","Fragments":["seem"]},{"Key":"would seem","Fragments":["wonky,","to"]},{"Key":"seem wonky,","Fragments":["but"]},{"Key":"wonky, but","Fragments":["it"]},{"Key":"hated this","Fragments":["exercise."]},{"Key":"this exercise.","Fragments":["The","It","Pretty","Makes","This","I"]},{"Key":"exercism CLI","Fragments":["could","you"]},{"Key":"CLI could","Fragments":["not"]},{"Key":"compile this","Fragments":["but"]},{"Key":"this but","Fragments":["the","I","it"]},{"Key":"simplest command","Fragments":["ever"]},{"Key":"command ever","Fragments":["`g++"]},{"Key":"ever `g++","Fragments":["food_chain.cpp"]},{"Key":"`g++ food_chain.cpp","Fragments":["-o"]},{"Key":"food_chain.cpp -o","Fragments":["FOODC"]},{"Key":"-o FOODC","Fragments":["-L."]},{"Key":"FOODC -L.","Fragments":["--std=c++11`"]},{"Key":"-L. --std=c++11`","Fragments":["worked"]},{"Key":"--std=c++11` worked","Fragments":["just"]},{"Key":"worked just","Fragments":["fine."]},{"Key":"just fine.","Fragments":["This","But"]},{"Key":"fine. This","Fragments":["software"]},{"Key":"This software","Fragments":["will"]},{"Key":"software will","Fragments":["pass"]},{"Key":"will pass","Fragments":["the","the"]},{"Key":"test suite.","Fragments":["Tell","You","You","You","It's","You","You"]},{"Key":"suite. Tell","Fragments":["me"]},{"Key":"Tell me","Fragments":["if"]},{"Key":"something but","Fragments":["exercism"]},{"Key":"exercism seems","Fragments":["to"]},{"Key":"have issues","Fragments":["linking"]},{"Key":"issues linking","Fragments":["C++."]},{"Key":" Use","Fragments":["an","references","`isspace`","std::min","of","prefix-","\u003climits\u003e"]},{"Key":"Use an","Fragments":["unordered"]},{"Key":"an unordered","Fragments":["map"]},{"Key":"unordered map","Fragments":["to"]},{"Key":"map to","Fragments":["store","reduce","see","array","transcribe","check","transcribe"]},{"Key":"store all","Fragments":["the","the"]},{"Key":"responses based","Fragments":["on"]},{"Key":"on questions.","Fragments":["For"]},{"Key":"questions. For","Fragments":["this"]},{"Key":"For this","Fragments":["particular","exercism","example"]},{"Key":"this particular","Fragments":["case,","case,","exercise","problem.","case."]},{"Key":"particular case,","Fragments":["nothing","`bob`"]},{"Key":"case, nothing","Fragments":["more"]},{"Key":"nothing more","Fragments":["elaborate","than"]},{"Key":"more elaborate","Fragments":["was"]},{"Key":"elaborate was","Fragments":["required"]},{"Key":"was required","Fragments":["and"]},{"Key":"this allows","Fragments":["for"]},{"Key":"for easy","Fragments":["addition"]},{"Key":"easy addition","Fragments":["of"]},{"Key":"addition of","Fragments":["new"]},{"Key":"new mappings","Fragments":["as"]},{"Key":"mappings as","Fragments":["required."]},{"Key":"Added missing","Fragments":["const","include."]},{"Key":"missing const","Fragments":["on"]},{"Key":"const on","Fragments":["iterator."]},{"Key":"interesting point.","Fragments":["I"]},{"Key":"a sort","Fragments":["and","of","of"]},{"Key":"compare might","Fragments":["be"]},{"Key":"sort two","Fragments":["strings"]},{"Key":"then run","Fragments":["a"]},{"Key":"run a","Fragments":["comparison"]},{"Key":"a comparison","Fragments":["on","to","of"]},{"Key":"comparison on","Fragments":["them"]},{"Key":"on them","Fragments":["we","just"]},{"Key":"them we","Fragments":["have"]},{"Key":"two O(nlog(n))","Fragments":["operations"]},{"Key":"O(nlog(n)) operations","Fragments":["(sort"]},{"Key":"operations (sort","Fragments":["both"]},{"Key":"(sort both","Fragments":["strings)"]},{"Key":"both strings)","Fragments":["and"]},{"Key":"strings) and","Fragments":["then"]},{"Key":"one O(n)","Fragments":["(compare"]},{"Key":"O(n) (compare","Fragments":["them)."]},{"Key":"(compare them).","Fragments":["I'm"]},{"Key":"them). I'm","Fragments":["willing"]},{"Key":"bet that","Fragments":["the"]},{"Key":"performance would","Fragments":["depend"]},{"Key":"would depend","Fragments":["very"]},{"Key":"depend very","Fragments":["heavily"]},{"Key":"very heavily","Fragments":["on"]},{"Key":"heavily on","Fragments":["the","loops"]},{"Key":"the strings.","Fragments":["The","(though","Happy","However,","One","C++","The","Using","It"]},{"Key":"strings. The","Fragments":["single","std::min"]},{"Key":"The single","Fragments":["O(n\u003csup\u003e2\u003c/sup\u003e)"]},{"Key":"single O(n\u003csup\u003e2\u003c/sup\u003e)","Fragments":["is"]},{"Key":"O(n\u003csup\u003e2\u003c/sup\u003e) is","Fragments":["likely"]},{"Key":"is likely","Fragments":["faster","my","my"]},{"Key":"likely faster","Fragments":["for","to"]},{"Key":"with pretty","Fragments":["much"]},{"Key":"much anything","Fragments":["performance"]},{"Key":"anything performance","Fragments":["related,"]},{"Key":"performance related,","Fragments":["would"]},{"Key":"related, would","Fragments":["need"]},{"Key":"to profile","Fragments":["to","\u0026","\u0026"]},{"Key":"profile to","Fragments":["be"]},{"Key":"really good","Fragments":["to","point)","that","also","use","to"]},{"Key":"of declaring/instantiating","Fragments":["variables"]},{"Key":"declaring/instantiating variables","Fragments":["as"]},{"Key":"variables as","Fragments":["close","late","references,","size_t"]},{"Key":"as close","Fragments":["to","to"]},{"Key":"possible. So","Fragments":["I'd","line"]},{"Key":"I'd move","Fragments":["the","back"]},{"Key":"creation of","Fragments":["`wcmap`","zip","a"]},{"Key":"of `wcmap`","Fragments":["to"]},{"Key":"`wcmap` to","Fragments":["right"]},{"Key":"to right","Fragments":["before"]},{"Key":"right before","Fragments":["your","you","the"]},{"Key":"loop. It","Fragments":["wont","doesn't","dates","seems"]},{"Key":"It wont","Fragments":["have"]},{"Key":"wont have","Fragments":["any"]},{"Key":"any meaningful","Fragments":["effect","usage"]},{"Key":"meaningful effect","Fragments":["in"]},{"Key":"effect in","Fragments":["this"]},{"Key":"But consider","Fragments":["a"]},{"Key":"a project","Fragments":["with","this"]},{"Key":"project with","Fragments":["code"]},{"Key":"with code","Fragments":["being","and"]},{"Key":"code being","Fragments":["changed"]},{"Key":"being changed","Fragments":["many"]},{"Key":"changed many","Fragments":["times"]},{"Key":"many times","Fragments":["by","to","but","that"]},{"Key":"many people.","Fragments":["Someone"]},{"Key":"people. Someone","Fragments":["might"]},{"Key":"early return","Fragments":["after","from"]},{"Key":"return after","Fragments":["some"]},{"Key":"after some","Fragments":["error"]},{"Key":"error checking.","Fragments":["In"]},{"Key":"checking. In","Fragments":["that"]},{"Key":"case, declaring","Fragments":["`wcmap`"]},{"Key":"declaring `wcmap`","Fragments":["as"]},{"Key":"`wcmap` as","Fragments":["late"]},{"Key":"as late","Fragments":["as","as"]},{"Key":"late as","Fragments":["possible","possible"]},{"Key":"as possible","Fragments":["might","to","in","and","and","in","to","and","while","while"]},{"Key":"possible might","Fragments":["save"]},{"Key":"might save","Fragments":["it","you"]},{"Key":"save it","Fragments":["from"]},{"Key":"being constructed","Fragments":["at"]},{"Key":"constructed at","Fragments":["all"]},{"Key":"all when","Fragments":["it's"]},{"Key":"when it's","Fragments":["not","actually"]},{"Key":"point I'd","Fragments":["raise"]},{"Key":"I'd raise","Fragments":["is"]},{"Key":"raise is","Fragments":["that"]},{"Key":"the `istream_iterator`s","Fragments":["to"]},{"Key":"`istream_iterator`s to","Fragments":["add"]},{"Key":"add all","Fragments":["the","the"]},{"Key":"the words","Fragments":["to","in","to"]},{"Key":"a `vector`","Fragments":["before"]},{"Key":"`vector` before","Fragments":["iterating"]},{"Key":"before iterating","Fragments":["over"]},{"Key":"the `vector`.","Fragments":["Since"]},{"Key":"`vector`. Since","Fragments":["you"]},{"Key":"iterators, why","Fragments":["not"]},{"Key":"just iterate","Fragments":["using","over"]},{"Key":"iterate using","Fragments":["them?"]},{"Key":" 2nd","Fragments":["iteration","step:"]},{"Key":"2nd iteration","Fragments":["removed"]},{"Key":"iteration removed","Fragments":["the"]},{"Key":"unneeded namespace","Fragments":["qualifiers"]},{"Key":"namespace qualifiers","Fragments":["I"]},{"Key":"qualifiers I","Fragments":["had"]},{"Key":"had on","Fragments":["some"]},{"Key":"some constants.","Fragments":["Seems"]},{"Key":"constants. Seems","Fragments":["there's"]},{"Key":"Seems there's","Fragments":["always"]},{"Key":"there's always","Fragments":["something","const_cast"]},{"Key":"always something","Fragments":["I"]},{"Key":"I miss","Fragments":["until"]},{"Key":"miss until","Fragments":["I"]},{"Key":"I send","Fragments":["code"]},{"Key":"send code","Fragments":["for"]},{"Key":"for review","Fragments":[":P"]},{"Key":"First steps","Fragments":["with"]},{"Key":"steps with","Fragments":["``boost/preprocessor``."]},{"Key":"with ``boost/preprocessor``.","Fragments":["Now"]},{"Key":"``boost/preprocessor``. Now","Fragments":["I"]},{"Key":"to wash","Fragments":["my"]},{"Key":"wash my","Fragments":["hands."]},{"Key":"been linking.","Fragments":["You've"]},{"Key":"linking. You've","Fragments":["got"]},{"Key":"got definitions","Fragments":["of"]},{"Key":"definitions of","Fragments":["static","the","64bit","each"]},{"Key":"static objects","Fragments":["in"]},{"Key":"file. Since","Fragments":["both"]},{"Key":"suite and","Fragments":["your","the","with"]},{"Key":"your cpp","Fragments":["include","should","file."]},{"Key":"cpp include","Fragments":["your"]},{"Key":"header you're","Fragments":["getting"]},{"Key":"you're getting","Fragments":["multiple"]},{"Key":"getting multiple","Fragments":["definitions."]},{"Key":"multiple definitions.","Fragments":["Simply"]},{"Key":"definitions. Simply","Fragments":["moving"]},{"Key":"Simply moving","Fragments":["those"]},{"Key":"moving those","Fragments":["to"]},{"Key":"those to","Fragments":["your","match.","simplify"]},{"Key":"cpp should","Fragments":["do"]},{"Key":"should do","Fragments":["the","this","the","to","this","the","that,","the","something"]},{"Key":"the trick,","Fragments":["I"]},{"Key":"trick, I","Fragments":["think."]},{"Key":"I think.","Fragments":["Once","So","However,"]},{"Key":"think. Once","Fragments":["you"]},{"Key":"Once you","Fragments":["can"]},{"Key":"suite to","Fragments":["run","read"]},{"Key":"run I","Fragments":["suspect"]},{"Key":"suspect you'll","Fragments":["spot","get"]},{"Key":"you'll spot","Fragments":["an"]},{"Key":"spot an","Fragments":["error"]},{"Key":" Aside","Fragments":["from"]},{"Key":"Aside from","Fragments":["that"]},{"Key":"from that","Fragments":["one","`if`","of"]},{"Key":"one issue,","Fragments":["I"]},{"Key":"is correct.","Fragments":["It's","Given","I","However"]},{"Key":"correct. It's","Fragments":["straight-forward"]},{"Key":"It's straight-forward","Fragments":["and"]},{"Key":"straight-forward and","Fragments":["clear"]},{"Key":"Now, on","Fragments":["to"]},{"Key":"actual nitpicking","Fragments":["(keep"]},{"Key":"nitpicking (keep","Fragments":["in"]},{"Key":"(keep in","Fragments":["mind"]},{"Key":"First thing","Fragments":["I"]},{"Key":"I notice","Fragments":["is","is","now","that","is","that"]},{"Key":"notice is","Fragments":["you","that","that"]},{"Key":"of `#define`s.","Fragments":["While"]},{"Key":"`#define`s. While","Fragments":["I'm"]},{"Key":"While I'm","Fragments":["not"]},{"Key":"not one","Fragments":["of","of"]},{"Key":"who would","Fragments":["say"]},{"Key":"all macros","Fragments":["are"]},{"Key":"macros are","Fragments":["evil,"]},{"Key":"are evil,","Fragments":["it"]},{"Key":"evil, it","Fragments":["would"]},{"Key":"use typed","Fragments":["constants."]},{"Key":"typed constants.","Fragments":["IMO"]},{"Key":"constants. IMO","Fragments":["one"]},{"Key":"IMO one","Fragments":["of"]},{"Key":"best features","Fragments":["of"]},{"Key":"features of","Fragments":["C++","C++.","today's","the"]},{"Key":"type system.","Fragments":["It's"]},{"Key":"system. It's","Fragments":["very"]},{"Key":"It's very","Fragments":["powerful.","close","readable."]},{"Key":"very powerful.","Fragments":["Use"]},{"Key":"powerful. Use","Fragments":["it."]},{"Key":"out code","Fragments":["in","is"]},{"Key":"your submission","Fragments":["(this","still"]},{"Key":"submission (this","Fragments":["is"]},{"Key":"(this is","Fragments":["a","my"]},{"Key":"huge pet-peeve","Fragments":["of"]},{"Key":"pet-peeve of","Fragments":["mine)."]},{"Key":"of mine).","Fragments":["The"]},{"Key":"mine). The","Fragments":["one"]},{"Key":"one good","Fragments":["argument"]},{"Key":"good argument","Fragments":["I've"]},{"Key":"argument I've","Fragments":["heard"]},{"Key":"I've heard","Fragments":["for","that","differing"]},{"Key":"heard for","Fragments":["keeping"]},{"Key":"keeping commented","Fragments":["out"]},{"Key":"new implementation","Fragments":["which"]},{"Key":"implementation which","Fragments":["depends","passes"]},{"Key":"which depends","Fragments":["on"]},{"Key":"some external","Fragments":["dependency"]},{"Key":"dependency that's","Fragments":["not"]},{"Key":"quite ready","Fragments":["yet."]},{"Key":"ready yet.","Fragments":["Obviously"]},{"Key":"yet. Obviously","Fragments":["that's"]},{"Key":"Obviously that's","Fragments":["not"]},{"Key":"Another pet","Fragments":["peeve"]},{"Key":"of mine.","Fragments":["You"]},{"Key":"mine. You","Fragments":["have"]},{"Key":"have defined","Fragments":["a"]},{"Key":"has static","Fragments":["member"]},{"Key":"static member","Fragments":["functions.","of","variables,","function.","function","function,","function.","function,","function."]},{"Key":"functions. It's","Fragments":["not","been","very"]},{"Key":"class. You're","Fragments":["not"]},{"Key":"an instance","Fragments":["of","of"]},{"Key":"it (though","Fragments":["from"]},{"Key":"(though from","Fragments":["this"]},{"Key":"code nothing","Fragments":["stops"]},{"Key":"nothing stops","Fragments":["you"]},{"Key":"stops you","Fragments":["from"]},{"Key":"you from","Fragments":["doing","the"]},{"Key":"from doing","Fragments":["that)."]},{"Key":"doing that).","Fragments":["It'd"]},{"Key":"that). It'd","Fragments":["be"]},{"Key":"more correct","Fragments":["to"]},{"Key":"correct to","Fragments":["simply"]},{"Key":"check your","Fragments":["includes."]},{"Key":"your includes.","Fragments":["I"]},{"Key":"includes. I","Fragments":["don't"]},{"Key":"single thing","Fragments":["that's"]},{"Key":"thing that's","Fragments":["declared"]},{"Key":"that's declared","Fragments":["in","elsewhere."]},{"Key":"declared in","Fragments":["`iostream`.","this","this","the","python,","this","class"]},{"Key":"in `iostream`.","Fragments":["But"]},{"Key":"`iostream`. But","Fragments":["I"]},{"Key":"do see","Fragments":["something","the"]},{"Key":"see something","Fragments":["that's"]},{"Key":"something that's","Fragments":["declared","clearer"]},{"Key":"using C-style","Fragments":["arrays."]},{"Key":"C-style arrays.","Fragments":["While"]},{"Key":"arrays. While","Fragments":["they're"]},{"Key":"While they're","Fragments":["fast"]},{"Key":"they're fast","Fragments":["and"]},{"Key":"use they're","Fragments":["also"]},{"Key":"they're also","Fragments":["error-prone."]},{"Key":"also error-prone.","Fragments":["`vector`"]},{"Key":"error-prone. `vector`","Fragments":["is"]},{"Key":"`vector` is","Fragments":["as","returned\u003c/li\u003e","returned\u003c/li\u003e","returned\u003c/li\u003e","returned\u003c/li\u003e"]},{"Key":"as fast","Fragments":["(in","as","as"]},{"Key":"fast (in","Fragments":["most"]},{"Key":"(in most","Fragments":["cases)"]},{"Key":"most cases)","Fragments":["and"]},{"Key":"cases) and","Fragments":["provides","all"]},{"Key":"and provides","Fragments":["more","its"]},{"Key":"provides more","Fragments":["functionality"]},{"Key":"functionality (like","Fragments":["range-checking"]},{"Key":"(like range-checking","Fragments":["in"]},{"Key":"range-checking in","Fragments":["debug"]},{"Key":"in debug","Fragments":["in"]},{"Key":"debug in","Fragments":["most"]},{"Key":"most implementations).","Fragments":["And"]},{"Key":"implementations). And","Fragments":["it's"]},{"Key":"it's almost","Fragments":["as"]},{"Key":"almost as","Fragments":["simple"]},{"Key":"one final","Fragments":["point."]},{"Key":"final point.","Fragments":["You"]},{"Key":"point. You","Fragments":["have"]},{"Key":"have exposed","Fragments":["some"]},{"Key":"exposed some","Fragments":["of"]},{"Key":"implementation to","Fragments":["users","use","give"]},{"Key":"to users","Fragments":["of","of"]},{"Key":"Overall it","Fragments":["looks"]},{"Key":"looks decent.","Fragments":["A"]},{"Key":"decent. A","Fragments":["few"]},{"Key":"few changes","Fragments":["and"]},{"Key":"actually struggled","Fragments":["a"]},{"Key":"struggled a","Fragments":["bit"]},{"Key":"bit with","Fragments":["the","the"]},{"Key":"the is_a_yell","Fragments":["method,"]},{"Key":"is_a_yell method,","Fragments":["because"]},{"Key":"method, because","Fragments":["I"]},{"Key":"couldn't make","Fragments":["it"]},{"Key":"it behave","Fragments":["correctly","on","the"]},{"Key":"behave correctly","Fragments":["for"]},{"Key":"correctly for","Fragments":["cases"]},{"Key":"for cases","Fragments":["where"]},{"Key":"were digits","Fragments":["and"]},{"Key":"digits and","Fragments":["no"]},{"Key":"no letters,","Fragments":["but"]},{"Key":"letters, but","Fragments":["I","also"]},{"Key":"I remember","Fragments":["that","correctly.","I"]},{"Key":"that Python","Fragments":["handled"]},{"Key":"Python handled","Fragments":["that"]},{"Key":"handled that","Fragments":["beautifully"]},{"Key":"that beautifully","Fragments":["and"]},{"Key":"beautifully and","Fragments":["check"]},{"Key":"check their","Fragments":["algorithm."]},{"Key":"their algorithm.","Fragments":["It"]},{"Key":"algorithm. It","Fragments":["was"]},{"Key":"actually quite","Fragments":["simple,","interesting"]},{"Key":"quite simple,","Fragments":["as"]},{"Key":"simple, as","Fragments":["all"]},{"Key":"as all","Fragments":["things","the","lower","caps"]},{"Key":"all things","Fragments":["once"]},{"Key":"things once","Fragments":["it"]},{"Key":"once it","Fragments":["clicks.","must"]},{"Key":"the pop_back","Fragments":["use"]},{"Key":"pop_back use","Fragments":["in"]},{"Key":"line 53","Fragments":["could"]},{"Key":"53 could","Fragments":["be"]},{"Key":"in another","Fragments":["method,","case","place...","unnamed"]},{"Key":"another method,","Fragments":["trying"]},{"Key":"method, trying","Fragments":["to"]},{"Key":"to comply","Fragments":["more"]},{"Key":"comply more","Fragments":["with"]},{"Key":"more with","Fragments":["SRP."]},{"Key":" Isn't","Fragments":["your","it"]},{"Key":"Isn't your","Fragments":["solution"]},{"Key":"solution a","Fragments":["little"]},{"Key":"little restrictive?","Fragments":["If"]},{"Key":"restrictive? If","Fragments":["a"]},{"Key":"If a","Fragments":["letter","number","standard","word's"]},{"Key":"a letter","Fragments":["of","isn't"]},{"Key":"string changes","Fragments":["would"]},{"Key":"changes would","Fragments":["it"]},{"Key":"It works,","Fragments":["obviously,"]},{"Key":"works, obviously,","Fragments":["but"]},{"Key":"obviously, but","Fragments":["does"]},{"Key":"but does","Fragments":["it","it"]},{"Key":" Awesome","Fragments":["solution"]},{"Key":"Awesome solution","Fragments":["for"]},{"Key":"for isShouting","Fragments":["and"]},{"Key":"isShouting and","Fragments":["isShoutingChar."]},{"Key":"and isShoutingChar.","Fragments":["Let"]},{"Key":"isShoutingChar. Let","Fragments":["me"]},{"Key":"Let me","Fragments":["see","create","know","show","know","know","tell"]},{"Key":"me see","Fragments":["if"]},{"Key":"understand it","Fragments":["correctly...","at"]},{"Key":"For each","Fragments":["char","response"]},{"Key":"each char","Fragments":["in","case.","\"isalpha(c)"]},{"Key":"in iMsg","Fragments":["returns"]},{"Key":"iMsg returns","Fragments":["true"]},{"Key":"returns true","Fragments":["if","then","then","(terminating","then","then","if"]},{"Key":"true if","Fragments":["at","both"]},{"Key":"if at","Fragments":["least"]},{"Key":"is alpha","Fragments":["and"]},{"Key":"alpha and","Fragments":["all"]},{"Key":"all are","Fragments":["upper?"]},{"Key":"are upper?","Fragments":["What"]},{"Key":"upper? What","Fragments":["purpose"]},{"Key":"What purpose","Fragments":["does"]},{"Key":"purpose does","Fragments":["!isalpha(c)"]},{"Key":"does !isalpha(c)","Fragments":["fills?"]},{"Key":"Very neat.","Fragments":["Does"]},{"Key":"neat. Does","Fragments":["all"]},{"Key":"Does all","Fragments":["the"]},{"Key":"methods you","Fragments":["used"]},{"Key":"used made","Fragments":["a"]},{"Key":"the `if-else-if`-chain","Fragments":["you"]},{"Key":"`if-else-if`-chain you","Fragments":["should"]},{"Key":"the following:","Fragments":["`'0'"]},{"Key":"following: `'0'","Fragments":["-"]},{"Key":"`'0' -","Fragments":["'0'"]},{"Key":"- '0'","Fragments":["=","=",")"]},{"Key":"'0' =","Fragments":["0`;","1`;"]},{"Key":"= 0`;","Fragments":["`'1'"]},{"Key":"0`; `'1'","Fragments":["-"]},{"Key":"`'1' -","Fragments":["'0'"]},{"Key":"= 1`;","Fragments":["…"]},{"Key":"* By","Fragments":["the"]},{"Key":"of `pow`","Fragments":["you"]},{"Key":"`pow` you","Fragments":["are"]},{"Key":"are forcing","Fragments":["casts"]},{"Key":"forcing casts","Fragments":["from"]},{"Key":"casts from","Fragments":["`unsigned"]},{"Key":"from `unsigned","Fragments":["int`"]},{"Key":"`unsigned int`","Fragments":["to"]},{"Key":"int` to","Fragments":["`double`"]},{"Key":"`double` for","Fragments":["`count`"]},{"Key":"for `count`","Fragments":["and"]},{"Key":"and `step`,","Fragments":["and"]},{"Key":"`step`, and","Fragments":["then"]},{"Key":"multiplication has","Fragments":["to"]},{"Key":"get casted","Fragments":["backwards","to"]},{"Key":"casted backwards","Fragments":["from"]},{"Key":"backwards from","Fragments":["`double`"]},{"Key":"from `double`","Fragments":["to"]},{"Key":"`double` to","Fragments":["`unsigned"]},{"Key":"to `unsigned","Fragments":["int`."]},{"Key":"`unsigned int`.","Fragments":["Have"]},{"Key":"int`. Have","Fragments":["you"]},{"Key":"considered iterating","Fragments":["forwards"]},{"Key":"iterating forwards","Fragments":["and"]},{"Key":"forwards and","Fragments":["then"]},{"Key":"then moving","Fragments":["the"]},{"Key":"the `sum`","Fragments":["and"]},{"Key":"`sum` and","Fragments":["simply"]},{"Key":"and simply","Fragments":["adding","returning"]},{"Key":"simply adding","Fragments":["`step`"]},{"Key":"adding `step`","Fragments":["on"]},{"Key":"`step` on","Fragments":["top?"]},{"Key":"iterator manually","Fragments":["it"]},{"Key":"manually it","Fragments":["whould"]},{"Key":"it whould","Fragments":["be"]},{"Key":"whould be","Fragments":["far"]},{"Key":"be far","Fragments":["more"]},{"Key":"far more","Fragments":["readable","confusing."]},{"Key":"readable to","Fragments":["use","replace","have","use"]},{"Key":"use for-each-syntax","Fragments":["here"]},{"Key":"for-each-syntax here","Fragments":["(`for"]},{"Key":"here (`for","Fragments":["(auto"]},{"Key":"(`for (auto","Fragments":["i","value"]},{"Key":"(auto i","Fragments":[":","="]},{"Key":": str_in)","Fragments":["{"]},{"Key":"str_in) {","Fragments":["/*"]},{"Key":"{ /*","Fragments":["do","other","stuff"]},{"Key":"/* do","Fragments":["something"]},{"Key":"something */","Fragments":["}`)."]},{"Key":" ###","Fragments":["After","In"]},{"Key":"### After","Fragments":["taking"]},{"Key":"After taking","Fragments":["the","a"]},{"Key":"the advice","Fragments":["of","of"]},{"Key":"advice of","Fragments":["sir","@joaquin**"]},{"Key":"of sir","Fragments":["@annie"]},{"Key":"sir @annie","Fragments":["I"]},{"Key":"@annie I","Fragments":["have"]},{"Key":"changed my","Fragments":["design","mind,","code","code"]},{"Key":"design to","Fragments":["not"]},{"Key":"only adhere","Fragments":["to"]},{"Key":"adhere to","Fragments":["the","the"]},{"Key":"suite more","Fragments":["accurately"]},{"Key":"more accurately","Fragments":["but"]},{"Key":"accurately but","Fragments":["to"]},{"Key":"but to","Fragments":["also","be","generate","be","anything"]},{"Key":"to also","Fragments":["make"]},{"Key":"make better","Fragments":["use","use","use"]},{"Key":"better use","Fragments":["of","of","of","one","of","of"]},{"Key":" #####","Fragments":["`std::vector\u003cstd::string\u003e`","Defines","The","The","An","Various","The","All","The","Separate","The","The","The","The"]},{"Key":"##### `std::vector\u003cstd::string\u003e`","Fragments":["is"]},{"Key":"`std::vector\u003cstd::string\u003e` is","Fragments":["now"]},{"Key":"now used","Fragments":["instead"]},{"Key":"used instead","Fragments":["of","of"]},{"Key":"of arrays","Fragments":["of"]},{"Key":"arrays of","Fragments":["`std::string`"]},{"Key":"##### Defines","Fragments":["have"]},{"Key":"Defines have","Fragments":["been"]},{"Key":"been replaced","Fragments":["with","with","with"]},{"Key":"with constants","Fragments":["to"]},{"Key":"constants to","Fragments":["include","avoid","make"]},{"Key":"include type","Fragments":["safety"]},{"Key":"type safety","Fragments":["as"]},{"Key":"safety as","Fragments":["memory"]},{"Key":"as memory","Fragments":["usage"]},{"Key":"usage is","Fragments":["not","not"]},{"Key":"an apparent","Fragments":["issue"]},{"Key":"apparent issue","Fragments":["ATM"]},{"Key":"##### The","Fragments":["largest","OOP","above","`for`","`Creatures`","`VERSE_AMOUNT`","spider","`repeating_phrases`"]},{"Key":"The largest","Fragments":["number"]},{"Key":"largest number","Fragments":["I'm"]},{"Key":"number I'm","Fragments":["required"]},{"Key":"I'm required","Fragments":["to"]},{"Key":"with is","Fragments":["only"]},{"Key":"only 8","Fragments":["and"]},{"Key":"8 and","Fragments":["the","use"]},{"Key":"the least","Fragments":["is","significant","amount"]},{"Key":"least is","Fragments":["0"]},{"Key":"is 0","Fragments":["so","for","and"]},{"Key":"0 so","Fragments":["I"]},{"Key":"I replaced","Fragments":["the","the","the"]},{"Key":"replaced the","Fragments":["integers","counter","comments","rbegin()"]},{"Key":"integers with","Fragments":["8bit"]},{"Key":"with 8bit","Fragments":["unsigned"]},{"Key":"8bit unsigned","Fragments":["integers"]},{"Key":"unsigned integers","Fragments":["to"]},{"Key":"integers to","Fragments":["conserve"]},{"Key":"conserve space.","Fragments":["The"]},{"Key":"space. The","Fragments":["program"]},{"Key":"The program","Fragments":["could","will","itself"]},{"Key":"program could","Fragments":["still","possibly"]},{"Key":"be extended","Fragments":["to"]},{"Key":"extended to","Fragments":["256"]},{"Key":"to 256","Fragments":["verses."]},{"Key":"The OOP","Fragments":["class"]},{"Key":"OOP class","Fragments":["structure"]},{"Key":"class structure","Fragments":["has","right."]},{"Key":"structure has","Fragments":["been"]},{"Key":"name space","Fragments":["which"]},{"Key":"space which","Fragments":["more"]},{"Key":"which more","Fragments":["cohesively"]},{"Key":"more cohesively","Fragments":["meshes"]},{"Key":"cohesively meshes","Fragments":["with"]},{"Key":"meshes with","Fragments":["the"]},{"Key":"it expects","Fragments":["values"]},{"Key":"##### An","Fragments":["`enum`"]},{"Key":"An `enum`","Fragments":["for"]},{"Key":"`enum` for","Fragments":["`Creatures`"]},{"Key":"for `Creatures`","Fragments":["has"]},{"Key":"`Creatures` has","Fragments":["been"]},{"Key":"been added","Fragments":["to"]},{"Key":"##### Various","Fragments":["size"]},{"Key":"Various size","Fragments":["and"]},{"Key":"error checks","Fragments":["were"]},{"Key":"checks were","Fragments":["added"]},{"Key":"were added","Fragments":["to","much"]},{"Key":"more robust","Fragments":["program"]},{"Key":"above changes","Fragments":["allowed"]},{"Key":"changes allowed","Fragments":["the"]},{"Key":"allowed the","Fragments":["passing"]},{"Key":"the passing","Fragments":["of"]},{"Key":"passing of","Fragments":["the"]},{"Key":"that came","Fragments":["functional","with","to"]},{"Key":"came functional","Fragments":["additions."]},{"Key":"### In","Fragments":["this"]},{"Key":"this iteration","Fragments":["I","I","I","I"]},{"Key":"removed extraneous","Fragments":["variables,"]},{"Key":"extraneous variables,","Fragments":["made"]},{"Key":"variables, made","Fragments":["better"]},{"Key":"made better","Fragments":["use"]},{"Key":"the ones","Fragments":["I","below"]},{"Key":"ones I","Fragments":["have"]},{"Key":"have and","Fragments":["renamed"]},{"Key":"and renamed","Fragments":["the"]},{"Key":"renamed the","Fragments":["vectors"]},{"Key":"the vectors","Fragments":["so"]},{"Key":"vectors so","Fragments":["that"]},{"Key":"they no","Fragments":["longer"]},{"Key":"the naming","Fragments":["convention","format"]},{"Key":"convention of","Fragments":["member","members"]},{"Key":"Hey, great","Fragments":["solution!"]},{"Key":"great solution!","Fragments":["This"]},{"Key":"solution! This","Fragments":["is"]},{"Key":"is fantastic","Fragments":["for"]},{"Key":"fantastic for","Fragments":["a"]},{"Key":"a first","Fragments":["iteration","reading.","pass"]},{"Key":"iteration but","Fragments":["this"]},{"Key":"the website","Fragments":["for"]},{"Key":"website for","Fragments":["nitpicking"]},{"Key":"for nitpicking","Fragments":["so"]},{"Key":"nitpicking so","Fragments":["please"]},{"Key":"please allow","Fragments":["me"]},{"Key":"allow me","Fragments":["to","to"]},{"Key":"First, you","Fragments":["can","get"]},{"Key":"to exercism","Fragments":["if"]},{"Key":"exercism if","Fragments":["you"]},{"Key":"you list","Fragments":["them","them"]},{"Key":"list them","Fragments":["both","out"]},{"Key":"them both","Fragments":["in"]},{"Key":"both in","Fragments":["the"]},{"Key":"CLI when","Fragments":["submitting."]},{"Key":"when submitting.","Fragments":["I'd"]},{"Key":"submitting. I'd","Fragments":["love"]},{"Key":"I'd love","Fragments":["to","to"]},{"Key":"love to","Fragments":["see","know.","hear","here","use"]},{"Key":"header for","Fragments":["this","safety","the","reference."]},{"Key":"this even","Fragments":["though","more","need","compile."]},{"Key":"Second, I'm","Fragments":["a"]},{"Key":"being extremely","Fragments":["deliberate"]},{"Key":"extremely deliberate","Fragments":["and"]},{"Key":"deliberate and","Fragments":["explicit","explicit"]},{"Key":"and although","Fragments":["it"]},{"Key":"although it","Fragments":["might","makes","is"]},{"Key":"be necessary,","Fragments":["making"]},{"Key":"necessary, making","Fragments":["`return`"]},{"Key":"making `return`","Fragments":["values"]},{"Key":"`return` values","Fragments":["and"]},{"Key":"values and","Fragments":["arguments","it"]},{"Key":"and arguments","Fragments":["of","passing"]},{"Key":"arguments of","Fragments":["functions","your"]},{"Key":"functions `const`","Fragments":["whenever"]},{"Key":"`const` whenever","Fragments":["possible"]},{"Key":"whenever possible","Fragments":["is","to","instead"]},{"Key":"possible is","Fragments":["a"]},{"Key":"good indicator","Fragments":["of"]},{"Key":"indicator of","Fragments":["what"]},{"Key":"it. In","Fragments":["this","this"]},{"Key":"read strings","Fragments":["from"]},{"Key":"strings from","Fragments":["it"]},{"Key":"from it","Fragments":["so","if"]},{"Key":"functions can","Fragments":["all","be"]},{"Key":"can all","Fragments":["return"]},{"Key":"all return","Fragments":["`const`"]},{"Key":"return `const`","Fragments":["and","but"]},{"Key":"and some","Fragments":["can","comments","would","more","`static"]},{"Key":"some can","Fragments":["have"]},{"Key":"their args","Fragments":["be"]},{"Key":"args be","Fragments":["`const`"]},{"Key":" Lookin'","Fragments":["good!"]},{"Key":"Lookin' good!","Fragments":["So"]},{"Key":"good! So","Fragments":["it's"]},{"Key":"not fair","Fragments":["because"]},{"Key":"fair because","Fragments":["I"]},{"Key":"gave this","Fragments":["nitpick"]},{"Key":"this nitpick","Fragments":["to"]},{"Key":"nitpick to","Fragments":["someone"]},{"Key":"to someone","Fragments":["else","not"]},{"Key":"else on","Fragments":["the"]},{"Key":"same problem","Fragments":["so"]},{"Key":"problem so","Fragments":["it's"]},{"Key":"still frsh","Fragments":["in"]},{"Key":"frsh in","Fragments":["my"]},{"Key":"head but","Fragments":["I'll"]},{"Key":"I'll say","Fragments":["it"]},{"Key":"you too","Fragments":["I"]},{"Key":"too I","Fragments":["suppose."]},{"Key":"really enjoy","Fragments":["being"]},{"Key":"enjoy being","Fragments":["deliberate"]},{"Key":"being deliberate","Fragments":["and"]},{"Key":"with code.","Fragments":["I"]},{"Key":"solution would","Fragments":["be"]},{"Key":"even better","Fragments":["if","inside","use","than","is"]},{"Key":"were able","Fragments":["to","to"]},{"Key":"to took","Fragments":["as"]},{"Key":"took as","Fragments":["arguments"]},{"Key":"as arguments","Fragments":["and","to"]},{"Key":"arguments and","Fragments":["returned","made"]},{"Key":"and returned","Fragments":["`const`","a"]},{"Key":"returned `const`","Fragments":["variables."]},{"Key":"most part","Fragments":["you"]},{"Key":"part you","Fragments":["are"]},{"Key":"are just","Fragments":["reading","algorithms","functions","functions","used","the","a"]},{"Key":"just reading","Fragments":["in"]},{"Key":"reading in","Fragments":["strings"]},{"Key":"in strings","Fragments":["or"]},{"Key":"strings or","Fragments":["returning"]},{"Key":"or returning","Fragments":["`string`s","an"]},{"Key":"returning `string`s","Fragments":["to"]},{"Key":"`string`s to","Fragments":["be"]},{"Key":"be read","Fragments":["so","by","by"]},{"Key":"read so","Fragments":["using"]},{"Key":"so using","Fragments":["`const`","gcc"]},{"Key":"using `const`","Fragments":["should"]},{"Key":"`const` should","Fragments":["be"]},{"Key":"be perfect","Fragments":["in"]},{"Key":"perfect in","Fragments":["most"]},{"Key":"most places","Fragments":["here"]},{"Key":"places here","Fragments":["like"]},{"Key":"here like","Fragments":["`const"]},{"Key":"like `const","Fragments":["bool`"]},{"Key":"bool` or","Fragments":["`const"]},{"Key":"or `const","Fragments":["std::string`","char[]","std::string`)"]},{"Key":"`const std::string`","Fragments":["wherever","in"]},{"Key":"std::string` wherever","Fragments":["possible."]},{"Key":"I'll respond","Fragments":["to"]},{"Key":"respond to","Fragments":["your","almost-always"]},{"Key":"- Posting","Fragments":["work-in-progress"]},{"Key":"Posting work-in-progress","Fragments":["is"]},{"Key":"work-in-progress is","Fragments":["a"]},{"Key":"idea. I","Fragments":["know"]},{"Key":"often grab","Fragments":["someone"]},{"Key":"grab someone","Fragments":["to"]},{"Key":"someone to","Fragments":["be"]},{"Key":"second pair","Fragments":["of"]},{"Key":"of eyes","Fragments":["on"]},{"Key":"eyes on","Fragments":["something"]},{"Key":"in progress.","Fragments":["And"]},{"Key":"progress. And","Fragments":["I"]},{"Key":"always find","Fragments":["it","it"]},{"Key":"improves what","Fragments":["I"]},{"Key":"- It","Fragments":["was","feels","looks","looks"]},{"Key":"was likely","Fragments":["compiling"]},{"Key":"likely compiling","Fragments":["under"]},{"Key":"compiling under","Fragments":["gcc"]},{"Key":"under gcc","Fragments":["because"]},{"Key":"gcc because","Fragments":["you"]},{"Key":"were only","Fragments":["including"]},{"Key":"only including","Fragments":["your"]},{"Key":"own cpp","Fragments":["file"]},{"Key":"file in","Fragments":["the","the"]},{"Key":"the build,","Fragments":["and"]},{"Key":"build, and","Fragments":["not"]},{"Key":"well (if","Fragments":["I'm"]},{"Key":"(if I'm","Fragments":["reading"]},{"Key":"I'm reading","Fragments":["the","a"]},{"Key":"reading the","Fragments":["command","code","code","test","code.","`cpp`","public","README."]},{"Key":"command you","Fragments":["included"]},{"Key":"you included","Fragments":["correctly).","an","in","your","the"]},{"Key":"included correctly).","Fragments":["But"]},{"Key":"correctly). But","Fragments":["the"]},{"Key":"the makefile","Fragments":["will","that"]},{"Key":"makefile will","Fragments":["have"]},{"Key":"suite cpp","Fragments":["and"]},{"Key":"cpp and","Fragments":["your","h"]},{"Key":"implementation cpp.","Fragments":["So"]},{"Key":"cpp. So","Fragments":["you"]},{"Key":"get two","Fragments":["object"]},{"Key":"two object","Fragments":["files"]},{"Key":"object files","Fragments":["that","(one"]},{"Key":"that contained","Fragments":["the"]},{"Key":"contained the","Fragments":["definitions"]},{"Key":"the definitions","Fragments":["of","of"]},{"Key":"same symbols","Fragments":["and"]},{"Key":"symbols and","Fragments":["the"]},{"Key":"linker blew","Fragments":["up."]},{"Key":"doubt you'd","Fragments":["see"]},{"Key":"you'd see","Fragments":["a"]},{"Key":"a noticeable","Fragments":["difference"]},{"Key":"noticeable difference","Fragments":["in"]},{"Key":"difference in","Fragments":["the","size","term","performance.","expressiveness."]},{"Key":"memory usage.","Fragments":["Even","To","To"]},{"Key":"usage. Even","Fragments":["if"]},{"Key":"are separate","Fragments":["copies"]},{"Key":"separate copies","Fragments":["of"]},{"Key":"of everything","Fragments":["being"]},{"Key":"everything being","Fragments":["kept"]},{"Key":"being kept","Fragments":["around,"]},{"Key":"kept around,","Fragments":["you're"]},{"Key":"around, you're","Fragments":["talking"]},{"Key":"you're talking","Fragments":["about"]},{"Key":"about \u003c","Fragments":["1KB."]},{"Key":"\u003c 1KB.","Fragments":["And"]},{"Key":"1KB. And","Fragments":["I"]},{"Key":"be surprised","Fragments":["to"]},{"Key":"it optimized","Fragments":["down"]},{"Key":"optimized down","Fragments":["to"]},{"Key":"this version...","Fragments":["I"]},{"Key":"version... I","Fragments":["think"]},{"Key":"this looks","Fragments":["much","like","and"]},{"Key":"much better!","Fragments":["There"]},{"Key":"better! There","Fragments":["are"]},{"Key":"are still","Fragments":["some","welcome."]},{"Key":"still some","Fragments":["things","scrap"]},{"Key":"improved upon","Fragments":["(as"]},{"Key":"upon (as","Fragments":["there"]},{"Key":"(as there","Fragments":["always","always"]},{"Key":"there always","Fragments":["are):","are)"]},{"Key":"- There's","Fragments":["still"]},{"Key":"There's still","Fragments":["a"]},{"Key":"of implementation","Fragments":["details","details"]},{"Key":"implementation details","Fragments":["being","surfacing","making","and","(like","in","from"]},{"Key":"details being","Fragments":["exposed"]},{"Key":"being exposed","Fragments":["to"]},{"Key":"your users.","Fragments":["I'd"]},{"Key":"users. I'd","Fragments":["try"]},{"Key":"move everything","Fragments":["possible"]},{"Key":"everything possible","Fragments":["out"]},{"Key":"possible out","Fragments":["of"]},{"Key":"file. Not","Fragments":["only"]},{"Key":"Not only","Fragments":["does","could"]},{"Key":"this prevent","Fragments":["people"]},{"Key":"prevent people","Fragments":["from"]},{"Key":"people from","Fragments":["erroneously"]},{"Key":"from erroneously","Fragments":["depending"]},{"Key":"erroneously depending","Fragments":["on"]},{"Key":"things they","Fragments":["shouldn't,"]},{"Key":"they shouldn't,","Fragments":["but"]},{"Key":"shouldn't, but","Fragments":["it"]},{"Key":"also helps","Fragments":["make","in"]},{"Key":"helps make","Fragments":["compile"]},{"Key":"make compile","Fragments":["times"]},{"Key":"times shorter","Fragments":["in"]},{"Key":"shorter in","Fragments":["large"]},{"Key":"included an","Fragments":["enum"]},{"Key":"to logically","Fragments":["differentiate"]},{"Key":"logically differentiate","Fragments":["specific"]},{"Key":"differentiate specific","Fragments":["verses."]},{"Key":"specific verses.","Fragments":["But"]},{"Key":"a `Creature`","Fragments":["enum"]},{"Key":"`Creature` enum","Fragments":["is"]},{"Key":"enum is","Fragments":["a","a"]},{"Key":"bit misleading.","Fragments":["Everywhere"]},{"Key":"misleading. Everywhere","Fragments":["it's"]},{"Key":"Everywhere it's","Fragments":["used"]},{"Key":"it's used","Fragments":["it's","a"]},{"Key":"used it's","Fragments":["referring"]},{"Key":"it's referring","Fragments":["to"]},{"Key":"to specific","Fragments":["verses"]},{"Key":"specific verses","Fragments":["rather"]},{"Key":"verses rather","Fragments":["than"]},{"Key":"than specific","Fragments":["creatures."]},{"Key":"- Your","Fragments":["initialization","helper"]},{"Key":"Your initialization","Fragments":["of"]},{"Key":"of `verse_index`","Fragments":["could"]},{"Key":"`verse_index` could","Fragments":["be"]},{"Key":"made simpler.","Fragments":["What"]},{"Key":"simpler. What","Fragments":["are"]},{"Key":"What are","Fragments":["you","you"]},{"Key":"really gaining","Fragments":["from","from"]},{"Key":"gaining from","Fragments":["that","it."]},{"Key":"that `if`","Fragments":["on"]},{"Key":"`if` on","Fragments":["line"]},{"Key":"- `vector`","Fragments":["has"]},{"Key":"`vector` has","Fragments":["an"]},{"Key":"an overload","Fragments":["for","(wrapper)"]},{"Key":"for `operator[]`","Fragments":["so"]},{"Key":"`operator[]` so","Fragments":["you"]},{"Key":"type `at`","Fragments":["everywhere."]},{"Key":"- You're","Fragments":["returning"]},{"Key":"You're returning","Fragments":["objects"]},{"Key":"returning objects","Fragments":["as"]},{"Key":"objects as","Fragments":["`const`"]},{"Key":"as `const`","Fragments":["everywhere."]},{"Key":"`const` everywhere.","Fragments":["You"]},{"Key":"everywhere. You","Fragments":["don't","can"]},{"Key":"don't gain","Fragments":["anything","anything"]},{"Key":"gain anything","Fragments":["from","here","by"]},{"Key":"that. Try","Fragments":["a"]},{"Key":"Try a","Fragments":["compile"]},{"Key":"compile with","Fragments":["`-Wall`.","the","gcc","the"]},{"Key":"with `-Wall`.","Fragments":["I"]},{"Key":"`-Wall`. I","Fragments":["suspect"]},{"Key":"you'll get","Fragments":["a"]},{"Key":"- And","Fragments":["the"]},{"Key":"final point","Fragments":["I"]},{"Key":"point I","Fragments":["will","can"]},{"Key":"will raise...","Fragments":["your"]},{"Key":"raise... your","Fragments":["math"]},{"Key":"your math","Fragments":["on"]},{"Key":"math on","Fragments":["line"]},{"Key":"line 57","Fragments":["is"]},{"Key":"57 is","Fragments":["needlessly"]},{"Key":"is needlessly","Fragments":["complicated.","complicated.","complex."]},{"Key":"needlessly complicated.","Fragments":["In"]},{"Key":"complicated. In","Fragments":["fact,"]},{"Key":"fact, doing","Fragments":["any"]},{"Key":"any math","Fragments":["there"]},{"Key":"math there","Fragments":["at"]},{"Key":"there at","Fragments":["all","point"]},{"Key":"big improvement.","Fragments":["Keep"]},{"Key":"improvement. Keep","Fragments":["it"]},{"Key":"Keep it","Fragments":["up!"]},{"Key":" Alright,","Fragments":["thanks"]},{"Key":"Alright, thanks","Fragments":["for"]},{"Key":"the pointers!","Fragments":["I"]},{"Key":"pointers! I","Fragments":["appreciate"]},{"Key":"I appreciate","Fragments":["the","the","your","the"]},{"Key":"Just to","Fragments":["clarify"]},{"Key":"clarify a","Fragments":["few"]},{"Key":"The `if`","Fragments":["statement"]},{"Key":"`if` statement","Fragments":["on","in","will"]},{"Key":"statement on","Fragments":["`line"]},{"Key":"on `line","Fragments":["12`","54`"]},{"Key":"`line 12`","Fragments":["guards"]},{"Key":"12` guards","Fragments":["from"]},{"Key":"guards from","Fragments":["a"]},{"Key":"user giving","Fragments":["the"]},{"Key":"giving the","Fragments":["function"]},{"Key":"number 0.","Fragments":["If"]},{"Key":"didn't check","Fragments":["that"]},{"Key":"check that","Fragments":["`verse_number`","two","each","along"]},{"Key":"that `verse_number`","Fragments":["is"]},{"Key":"`verse_number` is","Fragments":["already"]},{"Key":"already greater","Fragments":["than"]},{"Key":"than 0","Fragments":["then"]},{"Key":"0 then","Fragments":["the"]},{"Key":"variable will","Fragments":["wrap"]},{"Key":"will wrap","Fragments":["when","around"]},{"Key":"wrap when","Fragments":["decremented"]},{"Key":"when decremented","Fragments":["and"]},{"Key":"decremented and","Fragments":["added"]},{"Key":"the `at`","Fragments":["function","operator.","implementation"]},{"Key":"`at` function","Fragments":["versus"]},{"Key":"function versus","Fragments":["`operator[]`"]},{"Key":"versus `operator[]`","Fragments":["is"]},{"Key":"it offers","Fragments":["a"]},{"Key":"offers a","Fragments":["bit"]},{"Key":"of safety","Fragments":["and"]},{"Key":"safety and","Fragments":["error"]},{"Key":"error protection","Fragments":["like"]},{"Key":"protection like","Fragments":["throwing"]},{"Key":"like throwing","Fragments":["an"]},{"Key":"when attempting","Fragments":["to","to"]},{"Key":"attempting to","Fragments":["access","find","scan"]},{"Key":"access an","Fragments":["out"]},{"Key":"an out","Fragments":["of"]},{"Key":"bounds element...instead","Fragments":["of"]},{"Key":"element...instead of","Fragments":["undefined"]},{"Key":"of undefined","Fragments":["behavior."]},{"Key":"undefined behavior.","Fragments":["In","Some"]},{"Key":"behavior. In","Fragments":["fact,"]},{"Key":"fact, it's","Fragments":["because"]},{"Key":"tell that","Fragments":["there","you've"]},{"Key":"issue and","Fragments":["it","a"]},{"Key":"what prompted","Fragments":["me"]},{"Key":"prompted me","Fragments":["to","to"]},{"Key":"add `line","Fragments":["12`."]},{"Key":"that math","Fragments":["was"]},{"Key":"math was","Fragments":["to"]},{"Key":"function less","Fragments":["reliant"]},{"Key":"less reliant","Fragments":["on"]},{"Key":"reliant on","Fragments":["other"]},{"Key":"other factors","Fragments":["and"]},{"Key":"factors and","Fragments":["just"]},{"Key":"be tied","Fragments":["to"]},{"Key":" However,","Fragments":["once","in","right","there","is_permutation","the","we","it","it","you","it","I","I'd"]},{"Key":"However, once","Fragments":["I"]},{"Key":"I change","Fragments":["the","the"]},{"Key":"the `Creatures`","Fragments":["`enum`,"]},{"Key":"`Creatures` `enum`,","Fragments":["I"]},{"Key":"`enum`, I","Fragments":["can"]},{"Key":"readable way","Fragments":["to","to"]},{"Key":"same stuff","Fragments":["done"]},{"Key":"stuff done","Fragments":["but"]},{"Key":"done but","Fragments":["I'm"]},{"Key":"change it","Fragments":["to.","to","at"]},{"Key":"to. The","Fragments":["point"]},{"Key":"The point","Fragments":["of"]},{"Key":"to tie","Fragments":["verse","your"]},{"Key":"tie verse","Fragments":["numbers"]},{"Key":"verse numbers","Fragments":["to"]},{"Key":"numbers to","Fragments":["animal"]},{"Key":"to animal","Fragments":["names"]},{"Key":"animal names","Fragments":["to"]},{"Key":"readable but","Fragments":["I"]},{"Key":"any errors","Fragments":["about"]},{"Key":"errors about","Fragments":["ignored"]},{"Key":"about ignored","Fragments":["qualifiers"]},{"Key":"ignored qualifiers","Fragments":["from"]},{"Key":"qualifiers from","Fragments":["`const`,"]},{"Key":"from `const`,","Fragments":["it's"]},{"Key":"`const`, it's","Fragments":["all"]},{"Key":"all good,","Fragments":["but"]},{"Key":"I'll watch","Fragments":["out"]},{"Key":"Lastly, I","Fragments":["always"]},{"Key":"use header","Fragments":["guards"]},{"Key":"header guards","Fragments":["so","prevent","and"]},{"Key":"guards so","Fragments":["the"]},{"Key":"compiler shouldn't","Fragments":["be"]},{"Key":"be including","Fragments":["the"]},{"Key":"the help","Fragments":["so","of","of","of"]},{"Key":"help so","Fragments":["far!"]},{"Key":"so far!","Fragments":["I'll"]},{"Key":"far! I'll","Fragments":["have"]},{"Key":"mix manual","Fragments":["iterators"]},{"Key":"manual iterators","Fragments":["and"]},{"Key":"used `for(auto","Fragments":["i"]},{"Key":"`for(auto i","Fragments":[":","="]},{"Key":": ret)","Fragments":["{}`","{}`"]},{"Key":"ret) {}`","Fragments":["but","instead"]},{"Key":"{}` but","Fragments":["that"]},{"Key":"have given","Fragments":["me"]},{"Key":"given me","Fragments":["a","things"]},{"Key":"a `char`.","Fragments":["I"]},{"Key":"`char`. I","Fragments":["guess"]},{"Key":"used `for(std::string::iterator","Fragments":["i"]},{"Key":"`for(std::string::iterator i","Fragments":[":"]},{"Key":"{}` instead","Fragments":["but"]},{"Key":"instead but","Fragments":["I","I"]},{"Key":"I 'm","Fragments":["just"]},{"Key":"'m just","Fragments":["more"]},{"Key":"to making","Fragments":["this","the","it"]},{"Key":"making this","Fragments":["kind"]},{"Key":"of `for`","Fragments":["loop"]},{"Key":"`for` loop","Fragments":["instead","and","in","simply","as","in","in","to","style"]},{"Key":"based ones","Fragments":["but"]},{"Key":"ones but","Fragments":["when"]},{"Key":"when accessing","Fragments":["the"]},{"Key":"accessing the","Fragments":["`complements`"]},{"Key":"the `complements`","Fragments":["`map`"]},{"Key":"`complements` `map`","Fragments":["I"]},{"Key":"`map` I","Fragments":["was"]},{"Key":"was having","Fragments":["issues","trouble"]},{"Key":"issues getting","Fragments":["the"]},{"Key":"right `iterator`","Fragments":["so"]},{"Key":"`iterator` so","Fragments":["I"]},{"Key":"just used","Fragments":["`auto`","as","one","a","by","static"]},{"Key":"used `auto`","Fragments":["with"]},{"Key":"`auto` with","Fragments":["the"]},{"Key":"range base","Fragments":["`for`"]},{"Key":"base `for`","Fragments":["loop"]},{"Key":" Hi","Fragments":["CMLL,","Nobbz,","--","Dennis,","@catherine,","there,","JuBan1,","again.","there!","absurdist,","DiagonalSlash,","All,","Chris.","Chaitanya-git"]},{"Key":"task of","Fragments":["this"]},{"Key":"exercise as","Fragments":["I"]},{"Key":"didn't see","Fragments":["the","if"]},{"Key":"readme. Let","Fragments":["me"]},{"Key":"me create","Fragments":["another"]},{"Key":"create another","Fragments":["iteration.","matcher"]},{"Key":"You guys","Fragments":["are"]},{"Key":"guys are","Fragments":["totally"]},{"Key":"are totally","Fragments":["right,"]},{"Key":"totally right,","Fragments":["trying"]},{"Key":"right, trying","Fragments":["to"]},{"Key":"place a","Fragments":["queen","queen"]},{"Key":"a queen","Fragments":["at","at"]},{"Key":"queen at","Fragments":["(0,0)","(0,0)."]},{"Key":"at (0,0)","Fragments":["would"]},{"Key":"(0,0) would","Fragments":["throw"]},{"Key":"exception. The","Fragments":["QueenColor"]},{"Key":"The QueenColor","Fragments":["enum"]},{"Key":"QueenColor enum","Fragments":["is","class"]},{"Key":"a remnant","Fragments":["from"]},{"Key":"remnant from","Fragments":["my"]},{"Key":"my initial","Fragments":["design"]},{"Key":"initial design","Fragments":["where"]},{"Key":"design where","Fragments":["the"]},{"Key":"the chess_board","Fragments":["class"]},{"Key":"chess_board class","Fragments":["was"]},{"Key":"class was","Fragments":["a"]},{"Key":"a grid","Fragments":["instead"]},{"Key":"grid instead","Fragments":["of"]},{"Key":"of storing","Fragments":["the","a","the"]},{"Key":"the position","Fragments":["of"]},{"Key":"position of","Fragments":["each"]},{"Key":"each queen","Fragments":["directly."]},{"Key":"queen directly.","Fragments":["I'm"]},{"Key":"directly. I'm","Fragments":["pushing"]},{"Key":"I'm pushing","Fragments":["a"]},{"Key":"pushing a","Fragments":["new"]},{"Key":"iteration without","Fragments":["it."]},{"Key":"the QueenColor","Fragments":["enum"]},{"Key":"enum class","Fragments":["and"]},{"Key":"and place_queen()","Fragments":["as"]},{"Key":"place_queen() as","Fragments":["they"]},{"Key":"needed and","Fragments":["introduced"]},{"Key":"and introduced","Fragments":["a","some"]},{"Key":"introduced a","Fragments":["bug"]},{"Key":"bug when","Fragments":["trying"]},{"Key":"an exercise,","Fragments":["you"]},{"Key":"exercise, you","Fragments":["should"]},{"Key":"also submit","Fragments":["your"]},{"Key":"submit your","Fragments":["anagram.h","implementation?","solution","work","code"]},{"Key":"your anagram.h","Fragments":["as"]},{"Key":"anagram.h as","Fragments":["we"]},{"Key":"are missing","Fragments":["part","testing"]},{"Key":"missing part","Fragments":["of"]},{"Key":" nitpick","Fragments":["#1","#2"]},{"Key":"nitpick #1","Fragments":[":"]},{"Key":"#1 :","Fragments":["in"]},{"Key":": in","Fragments":["C++11",")"]},{"Key":"loops, eg.","Fragments":["`for(auto"]},{"Key":"eg. `for(auto","Fragments":["i"]},{"Key":"= number.begin();i","Fragments":["!="]},{"Key":"number.begin();i !=","Fragments":["number.end();"]},{"Key":"!= number.end();","Fragments":["i++)`"]},{"Key":"number.end(); i++)`","Fragments":["becomes"]},{"Key":"i++)` becomes","Fragments":["`for"]},{"Key":"becomes `for","Fragments":["(auto"]},{"Key":": number)`","Fragments":["and"]},{"Key":"number)` and","Fragments":["`*i`"]},{"Key":"and `*i`","Fragments":["becomes"]},{"Key":"`*i` becomes","Fragments":["`c`."]},{"Key":"nitpick #2","Fragments":[":"]},{"Key":"#2 :","Fragments":["for"]},{"Key":": for","Fragments":["`phone_number::number()`"]},{"Key":"for `phone_number::number()`","Fragments":["and"]},{"Key":"`phone_number::number()` and","Fragments":["`phone_number::area_code()`,"]},{"Key":"and `phone_number::area_code()`,","Fragments":["you"]},{"Key":"`phone_number::area_code()`, you","Fragments":["probably"]},{"Key":"probably want","Fragments":["the","to","to"]},{"Key":"the `const`","Fragments":["at","identifier"]},{"Key":"`const` at","Fragments":["the"]},{"Key":"end (or","Fragments":["both)"]},{"Key":"(or both)","Fragments":[":"]},{"Key":"`const std::string","Fragments":["phone_number::number()`"]},{"Key":"std::string phone_number::number()`","Fragments":["returns"]},{"Key":"phone_number::number()` returns","Fragments":["a"]},{"Key":"const std::string,","Fragments":["`std::string"]},{"Key":"std::string, `std::string","Fragments":["phone_number::number()"]},{"Key":"`std::string phone_number::number()","Fragments":["const`"]},{"Key":"phone_number::number() const`","Fragments":["declares"]},{"Key":"const` declares","Fragments":["that"]},{"Key":"declares that","Fragments":["this"]},{"Key":"not modify","Fragments":["the","that","the","the","its","the"]},{"Key":" ####","Fragments":["This","This","In","This","Changelog:","Variables","Structure"]},{"Key":"#### This","Fragments":["iteration","iteration","iteration"]},{"Key":"This iteration","Fragments":["was","was","eliminated"]},{"Key":"iteration was","Fragments":["due","brought","in"]},{"Key":"was due","Fragments":["to"]},{"Key":"help of","Fragments":["@samara.","implicit","`boost::zip_iterator`"]},{"Key":"of @samara.","Fragments":["{He/She}"]},{"Key":"@samara. {He/She}","Fragments":["helped"]},{"Key":"{He/She} helped","Fragments":["me"]},{"Key":"helped me","Fragments":["to"]},{"Key":"`const` identifier","Fragments":["and"]},{"Key":"identifier and","Fragments":["to"]},{"Key":"use C++11","Fragments":["constructs"]},{"Key":"C++11 constructs","Fragments":["in"]},{"Key":"constructs in","Fragments":["a","C++11."]},{"Key":"##### All","Fragments":["`functions`"]},{"Key":"All `functions`","Fragments":["no"]},{"Key":"`functions` no","Fragments":["longer"]},{"Key":"longer return","Fragments":["`const`"]},{"Key":"`const` but","Fragments":["rather"]},{"Key":"rather are","Fragments":["`const`"]},{"Key":"`const` themselves.","Fragments":["Although"]},{"Key":"themselves. Although","Fragments":["I"]},{"Key":"Although I","Fragments":["may","prefer"]},{"Key":"may switch","Fragments":["to"]},{"Key":"both because","Fragments":["I"]},{"Key":"I don'thave","Fragments":["any"]},{"Key":"don'thave any","Fragments":["need"]},{"Key":"be modified","Fragments":["afterwards."]},{"Key":"The `for`","Fragments":["loop","loop"]},{"Key":"constructor of","Fragments":["`class`","AC.","a"]},{"Key":"of `class`","Fragments":["`phone_number`"]},{"Key":"`class` `phone_number`","Fragments":["is"]},{"Key":"`phone_number` is","Fragments":["now"]},{"Key":"now range","Fragments":["based"]},{"Key":"was brought","Fragments":["on"]},{"Key":"brought on","Fragments":["by"]},{"Key":"on by","Fragments":["@evans"]},{"Key":"by @evans","Fragments":["and"]},{"Key":"@evans and","Fragments":["eventually"]},{"Key":"and eventually","Fragments":["brought"]},{"Key":"eventually brought","Fragments":["with"]},{"Key":"brought with","Fragments":["it"]},{"Key":"it additional","Fragments":["changes."]},{"Key":"##### Separate","Fragments":["constant"]},{"Key":"Separate constant","Fragments":["strings"]},{"Key":"constant strings","Fragments":["have"]},{"Key":"strings have","Fragments":["been","the"]},{"Key":"been allocated","Fragments":["to"]},{"Key":"allocated to","Fragments":["appropriate"]},{"Key":"to appropriate","Fragments":["`const`"]},{"Key":"appropriate `const`","Fragments":["vectors"]},{"Key":"`const` vectors","Fragments":["to"]},{"Key":"vectors to","Fragments":["still"]},{"Key":"to still","Fragments":["ensure"]},{"Key":"still ensure","Fragments":["that"]},{"Key":"ensure that","Fragments":["the","a"]},{"Key":"values will","Fragments":["still"]},{"Key":"still not","Fragments":["be","sure","sure","necessary,","sure"]},{"Key":"changed but","Fragments":["also"]},{"Key":"also to","Fragments":["provide","pull","filter"]},{"Key":"more organized","Fragments":["means"]},{"Key":"organized means","Fragments":["to"]},{"Key":"means to","Fragments":["access","use"]},{"Key":"access and","Fragments":["assign"]},{"Key":"and assign","Fragments":["them.","the"]},{"Key":"The `Creatures`","Fragments":["`enum`"]},{"Key":"`Creatures` `enum`","Fragments":["has"]},{"Key":"`enum` has","Fragments":["been"]},{"Key":"been renamed","Fragments":["to"]},{"Key":"renamed to","Fragments":["`Verses`"]},{"Key":"to `Verses`","Fragments":["to"]},{"Key":"`Verses` to","Fragments":["better"]},{"Key":"reflect its","Fragments":["use"]},{"Key":"The `VERSE_AMOUNT`","Fragments":["constant"]},{"Key":"`VERSE_AMOUNT` constant","Fragments":["was"]},{"Key":"constant was","Fragments":["removed"]},{"Key":"was removed","Fragments":["and","since"]},{"Key":"removed and","Fragments":["replaced","replaced","is","the","its"]},{"Key":"and replaced","Fragments":["by","with","the"]},{"Key":"the `size()`","Fragments":["of"]},{"Key":"`size()` of","Fragments":["`swallowed_creatures`"]},{"Key":"The spider","Fragments":["quirk"]},{"Key":"spider quirk","Fragments":["implementation"]},{"Key":"quirk implementation","Fragments":["was"]},{"Key":"implementation was","Fragments":["changed"]},{"Key":"was changed","Fragments":["from"]},{"Key":"changed from","Fragments":["a","class"]},{"Key":"hard coded","Fragments":["`string`","value"]},{"Key":"coded `string`","Fragments":["to"]},{"Key":"`string` to","Fragments":["a"]},{"Key":"a substring","Fragments":["`erase()`","is"]},{"Key":"substring `erase()`","Fragments":["and"]},{"Key":"`erase()` and","Fragments":["concatenation"]},{"Key":"and concatenation","Fragments":["method."]},{"Key":"The `repeating_phrases`","Fragments":["`vector`"]},{"Key":"`repeating_phrases` `vector`","Fragments":["replaces"]},{"Key":"`vector` replaces","Fragments":["the"]},{"Key":"replaces the","Fragments":["old"]},{"Key":"old singular","Fragments":["`const`"]},{"Key":"singular `const`","Fragments":["`string`s"]},{"Key":"`const` `string`s","Fragments":["and"]},{"Key":"`string`s and","Fragments":["has"]},{"Key":"has macro","Fragments":["definitions"]},{"Key":"macro definitions","Fragments":["to"]},{"Key":"definitions to","Fragments":["improve","be"]},{"Key":"#### In","Fragments":["this"]},{"Key":"simply removed","Fragments":["a"]},{"Key":"removed a","Fragments":["redundant"]},{"Key":"a redundant","Fragments":["`if`","assignment."]},{"Key":"redundant `if`","Fragments":["statement"]},{"Key":"the `food_chain::verses(const","Fragments":["int,"]},{"Key":"`food_chain::verses(const int,","Fragments":["const"]},{"Key":"int, const","Fragments":["int)`"]},{"Key":"const int)`","Fragments":["function."]},{"Key":"int)` function.","Fragments":["The"]},{"Key":"loop simply","Fragments":["won't"]},{"Key":"simply won't","Fragments":["execute"]},{"Key":"won't execute","Fragments":["if"]},{"Key":"execute if","Fragments":["one","the"]},{"Key":"one value","Fragments":["is"]},{"Key":"not `\u003c=`","Fragments":["the"]},{"Key":"`\u003c=` the","Fragments":["other."]},{"Key":"Your `pow_three()`","Fragments":["is"]},{"Key":"`pow_three()` is","Fragments":["O(n)."]},{"Key":"O(n). This","Fragments":["makes"]},{"Key":"your overall","Fragments":["algorithm"]},{"Key":"overall algorithm","Fragments":["somewhere"]},{"Key":"algorithm somewhere","Fragments":["worse"]},{"Key":"somewhere worse","Fragments":["than"]},{"Key":"worse than","Fragments":["O(n)"]},{"Key":"than O(n)","Fragments":["but"]},{"Key":"O(n) but","Fragments":["better"]},{"Key":"about multiplying","Fragments":["your"]},{"Key":"multiplying your","Fragments":["accumulator"]},{"Key":"your accumulator","Fragments":["instead"]},{"Key":"accumulator instead","Fragments":["and"]},{"Key":"instead and","Fragments":["then"]},{"Key":"then adding","Fragments":["the"]},{"Key":"adding the","Fragments":["current","cast"]},{"Key":" OK.","Fragments":["I"]},{"Key":"OK. I","Fragments":["would"]},{"Key":"argue that","Fragments":["if","this","having","one","it's"]},{"Key":"exclude invalid","Fragments":["input"]},{"Key":"input you're","Fragments":["best"]},{"Key":"you're best","Fragments":["to"]},{"Key":"place. You","Fragments":["have"]},{"Key":"two places","Fragments":["in"]},{"Key":"places in","Fragments":["your","this"]},{"Key":"code (lines","Fragments":["9"]},{"Key":"(lines 9","Fragments":["and"]},{"Key":"9 and","Fragments":["12)."]},{"Key":"and 12).","Fragments":["Also,"]},{"Key":"12). Also,","Fragments":["make"]},{"Key":"Also, make","Fragments":["sure"]},{"Key":"to step","Fragments":["through"]},{"Key":"step through","Fragments":["your"]},{"Key":"through your","Fragments":["code","implementation","string.","string","submission,"]},{"Key":"with some","Fragments":["sample","random","lambdas"]},{"Key":"some sample","Fragments":["values"]},{"Key":"sample values","Fragments":["(particularly"]},{"Key":"values (particularly","Fragments":["some"]},{"Key":"(particularly some","Fragments":["invalid"]},{"Key":"some invalid","Fragments":["values):"]},{"Key":"- Assume","Fragments":["`verse_number`"]},{"Key":"Assume `verse_number`","Fragments":["=="]},{"Key":"`verse_number` ==","Fragments":["1","0"]},{"Key":"1 (the","Fragments":["correct"]},{"Key":"(the correct","Fragments":["input"]},{"Key":"correct input","Fragments":["case)."]},{"Key":"input case).","Fragments":["On"]},{"Key":"case). On","Fragments":["line"]},{"Key":"line 11","Fragments":["`verse_index`","`verse_index`","to"]},{"Key":"11 `verse_index`","Fragments":["is","is"]},{"Key":"`verse_index` is","Fragments":["initialized","assigned","initialized"]},{"Key":"to 1.","Fragments":["The","The"]},{"Key":"12 passes,","Fragments":["and"]},{"Key":"passes, and","Fragments":["`verse_index`"]},{"Key":"and `verse_index`","Fragments":["is"]},{"Key":"is assigned","Fragments":["`verse_number"]},{"Key":"assigned `verse_number","Fragments":["-"]},{"Key":"`verse_number -","Fragments":["1`","1`"]},{"Key":"- 1`","Fragments":["(==","wasn't"]},{"Key":"1` (==","Fragments":["0)."]},{"Key":"(== 0).","Fragments":["The"]},{"Key":"0). The","Fragments":["rest"]},{"Key":"code runs","Fragments":["and","and"]},{"Key":"runs and","Fragments":["the","the"]},{"Key":"first verse","Fragments":["is"]},{"Key":"is output","Fragments":["as"]},{"Key":"output as","Fragments":["expected."]},{"Key":"- Now","Fragments":["let's"]},{"Key":"let's try","Fragments":["with"]},{"Key":"try with","Fragments":["`verse_number`"]},{"Key":"with `verse_number`","Fragments":["=="]},{"Key":"0 (malformed","Fragments":["input)."]},{"Key":"(malformed input).","Fragments":["On"]},{"Key":"input). On","Fragments":["line"]},{"Key":"12 does","Fragments":["not"]},{"Key":"not pass.","Fragments":["`verse_index`"]},{"Key":"pass. `verse_index`","Fragments":["=="]},{"Key":"`verse_index` ==","Fragments":["1."]},{"Key":"== 1.","Fragments":["The"]},{"Key":"second verse","Fragments":["is"]},{"Key":"So `food_chain::verse(0)","Fragments":["=="]},{"Key":"`food_chain::verse(0) ==","Fragments":["food_chain::verse(2)`."]},{"Key":"== food_chain::verse(2)`.","Fragments":["But"]},{"Key":"food_chain::verse(2)`. But","Fragments":["`food_chain::verse(42)"]},{"Key":"But `food_chain::verse(42)","Fragments":["=="]},{"Key":"`food_chain::verse(42) ==","Fragments":["\"\"`"]},{"Key":"== \"\"`","Fragments":["which"]},{"Key":"\"\"` which","Fragments":["is"]},{"Key":"more what","Fragments":["I'd"]},{"Key":"what I'd","Fragments":["expect","actually"]},{"Key":"I'd expect","Fragments":["for"]},{"Key":"expect for","Fragments":["error"]},{"Key":"for error","Fragments":["handling.","in"]},{"Key":"error handling.","Fragments":["You've"]},{"Key":"handling. You've","Fragments":["fallen"]},{"Key":"You've fallen","Fragments":["into"]},{"Key":"fallen into","Fragments":["a"]},{"Key":"very common","Fragments":["trap","in","task,"]},{"Key":"common trap","Fragments":["here."]},{"Key":"trap here.","Fragments":["You"]},{"Key":"here. You","Fragments":["corrected"]},{"Key":"You corrected","Fragments":["a"]},{"Key":"corrected a","Fragments":["problem"]},{"Key":"problem by","Fragments":["fixing"]},{"Key":"by fixing","Fragments":["the"]},{"Key":"the symptom,","Fragments":["but"]},{"Key":"symptom, but","Fragments":["not"]},{"Key":"actual root","Fragments":["cause."]},{"Key":"root cause.","Fragments":["Initializing","The"]},{"Key":"cause. Initializing","Fragments":["`verse_index`"]},{"Key":"Initializing `verse_index`","Fragments":["to"]},{"Key":"`verse_index` to","Fragments":["`verse_number","have"]},{"Key":"to `verse_number","Fragments":["-"]},{"Key":"1` wasn't","Fragments":["the"]},{"Key":"cause. The","Fragments":["root"]},{"Key":"The root","Fragments":["cause"]},{"Key":"root cause","Fragments":["was"]},{"Key":"cause was","Fragments":["not"]},{"Key":"not excluding","Fragments":["0"]},{"Key":"excluding 0","Fragments":["at"]},{"Key":"0 at","Fragments":["line"]},{"Key":"at line","Fragments":["9.","42?","29).","27,"]},{"Key":"The math","Fragments":["I'm"]},{"Key":"math I'm","Fragments":["talking"]},{"Key":"about is","Fragments":["on","the","the"]},{"Key":"is on","Fragments":["line","cleanliness","the","lines"]},{"Key":"line 57.","Fragments":["Try"]},{"Key":"57. Try","Fragments":["simplifying"]},{"Key":"Try simplifying","Fragments":["`VERSE_AMOUNT"]},{"Key":"simplifying `VERSE_AMOUNT","Fragments":["-"]},{"Key":"`VERSE_AMOUNT -","Fragments":["(VERSE_AMOUNT"]},{"Key":"- (VERSE_AMOUNT","Fragments":["-"]},{"Key":"(VERSE_AMOUNT -","Fragments":["1)`."]},{"Key":"- 1)`.","Fragments":["Using"]},{"Key":"1)`. Using","Fragments":["`VERSE_AMOUNT`"]},{"Key":"Using `VERSE_AMOUNT`","Fragments":["in"]},{"Key":"`VERSE_AMOUNT` in","Fragments":["particular"]},{"Key":"particular isn't","Fragments":["an"]},{"Key":"isn't an","Fragments":["issue.","official","issue,"]},{"Key":"an issue.","Fragments":["The"]},{"Key":"about how","Fragments":["C++","Yelling","you","you","to","this","much","others","you"]},{"Key":"how C++","Fragments":["compilers"]},{"Key":"compiler was","Fragments":["including"]},{"Key":"was including","Fragments":["the"]},{"Key":"header twice.","Fragments":["Once"]},{"Key":"Once for","Fragments":["each"]},{"Key":"unit (in","Fragments":["this"]},{"Key":"case each","Fragments":["cpp"]},{"Key":"each cpp","Fragments":["file)."]},{"Key":"cpp file).","Fragments":["The"]},{"Key":"file). The","Fragments":["header"]},{"Key":"guards prevent","Fragments":["the"]},{"Key":"prevent the","Fragments":["same","same"]},{"Key":"same compilation","Fragments":["unit"]},{"Key":"unit from","Fragments":["including"]},{"Key":"from including","Fragments":["the"]},{"Key":"header twice","Fragments":["(which"]},{"Key":"twice (which","Fragments":["wouldn't"]},{"Key":"(which wouldn't","Fragments":["have"]},{"Key":"have happened","Fragments":["here"]},{"Key":"happened here","Fragments":["anyway)."]},{"Key":"here anyway).","Fragments":["Then"]},{"Key":"anyway). Then","Fragments":["the"]},{"Key":"Then the","Fragments":["linker,","code"]},{"Key":"the linker,","Fragments":["working"]},{"Key":"linker, working","Fragments":["on"]},{"Key":"on both","Fragments":["object","the"]},{"Key":"both object","Fragments":["files"]},{"Key":"files (one","Fragments":["from"]},{"Key":"(one from","Fragments":["each"]},{"Key":"from each","Fragments":["compilation"]},{"Key":"compilation unit)","Fragments":["to"]},{"Key":"unit) to","Fragments":["create"]},{"Key":"single binary,","Fragments":["found"]},{"Key":"binary, found","Fragments":["the"]},{"Key":"the multiple","Fragments":["definitions","variables"]},{"Key":"multiple definitions","Fragments":["and"]},{"Key":"definitions and","Fragments":["threw"]},{"Key":"and threw","Fragments":["up"]},{"Key":"threw up","Fragments":["the"]},{"Key":"Cool, thanks","Fragments":["for","very"]},{"Key":"the info!","Fragments":["I"]},{"Key":"info! I","Fragments":["put"]},{"Key":"put another","Fragments":["iteration","cycle"]},{"Key":"up but","Fragments":["have"]},{"Key":"have yet","Fragments":["to","to"]},{"Key":"to correct","Fragments":["line","me","with"]},{"Key":"correct line","Fragments":["9."]},{"Key":"9. I'll","Fragments":["do"]},{"Key":"I'll do","Fragments":["that","that,","my","another"]},{"Key":"iteration eliminated","Fragments":["one"]},{"Key":"eliminated one","Fragments":["of"]},{"Key":"the `uniform_int_distribution`s","Fragments":["and"]},{"Key":"`uniform_int_distribution`s and","Fragments":["moved"]},{"Key":"moved its","Fragments":["initialization"]},{"Key":"its initialization","Fragments":["to"]},{"Key":"initialization to","Fragments":["the"]},{"Key":"the `reset()`","Fragments":["function"]},{"Key":"`reset()` function","Fragments":["so"]},{"Key":"value could","Fragments":["be"]},{"Key":"the rare","Fragments":["cases"]},{"Key":"rare cases","Fragments":["where"]},{"Key":"where early","Fragments":["escape"]},{"Key":"early escape","Fragments":["(aka"]},{"Key":"escape (aka","Fragments":["`continue`)"]},{"Key":"(aka `continue`)","Fragments":["is"]},{"Key":"`continue`) is","Fragments":["better"]},{"Key":"than nesting","Fragments":["this"]},{"Key":"nesting this","Fragments":["deep."]},{"Key":"Or refactor","Fragments":["to"]},{"Key":"to more","Fragments":["functions,","kinds","cache","clearly","expressive","quickly"]},{"Key":"more functions,","Fragments":["let"]},{"Key":"functions, let","Fragments":["copies"]},{"Key":"let copies","Fragments":["of"]},{"Key":"strings lie","Fragments":["around"]},{"Key":"lie around","Fragments":["and"]},{"Key":"around and","Fragments":["start"]},{"Key":"and start","Fragments":["to"]},{"Key":"to refactor","Fragments":["when","your","all"]},{"Key":"refactor when","Fragments":["memory"]},{"Key":"when memory","Fragments":["becomes"]},{"Key":"memory becomes","Fragments":["an"]},{"Key":"becomes an","Fragments":["issue."]},{"Key":"Also, binding","Fragments":["yourself"]},{"Key":"binding yourself","Fragments":["boost"]},{"Key":"yourself boost","Fragments":["on"]},{"Key":"boost on","Fragments":["the","the"]},{"Key":"the foot,","Fragments":["and"]},{"Key":"foot, and","Fragments":["then"]},{"Key":"then complaining","Fragments":["about"]},{"Key":"complaining about","Fragments":["a"]},{"Key":"string, that","Fragments":["seems"]},{"Key":"bit two-faced…","Fragments":["My"]},{"Key":"two-faced… My","Fragments":["solution"]},{"Key":"is 20","Fragments":["lines"]},{"Key":"20 lines","Fragments":["less"]},{"Key":"lines less","Fragments":["and"]},{"Key":"less and","Fragments":["`std`"]},{"Key":"and `std`","Fragments":["only."]},{"Key":"should make","Fragments":["`swallowed_creatures`,","the"]},{"Key":"make `swallowed_creatures`,","Fragments":["`creature_phrases`,"]},{"Key":"`swallowed_creatures`, `creature_phrases`,","Fragments":["and"]},{"Key":"`creature_phrases`, and","Fragments":["`repeating_phrases`"]},{"Key":"and `repeating_phrases`","Fragments":["“public”."]},{"Key":"`repeating_phrases` “public”.","Fragments":["These"]},{"Key":"“public”. These","Fragments":["are"]},{"Key":"are implementation","Fragments":["details,","dependent,"]},{"Key":"implementation details,","Fragments":["that"]},{"Key":"details, that","Fragments":["need"]},{"Key":"that need","Fragments":["to","to"]},{"Key":"be hidden.","Fragments":["Have"]},{"Key":"hidden. Have","Fragments":["you"]},{"Key":"considered moving","Fragments":["them"]},{"Key":"moving them","Fragments":["from"]},{"Key":"Now there","Fragments":["are"]},{"Key":"are 2","Fragments":["divisibility"]},{"Key":"2 divisibility","Fragments":["tests"]},{"Key":"divisibility tests","Fragments":["at"]},{"Key":"tests at","Fragments":["most"]},{"Key":"most instead","Fragments":["of"]},{"Key":"Use `rd`","Fragments":["to"]},{"Key":"`rd` to","Fragments":["seed"]},{"Key":"seed `rnd_eng`","Fragments":["now."]},{"Key":"Make the","Fragments":["`number_generator`","Constructor"]},{"Key":"the `number_generator`","Fragments":["generate"]},{"Key":"`number_generator` generate","Fragments":["chars"]},{"Key":"generate chars","Fragments":["from"]},{"Key":"from `'0'`","Fragments":["to"]},{"Key":"`'0'` to","Fragments":["`'9'`","`'1'`."]},{"Key":"to `'9'`","Fragments":["now,"]},{"Key":"`'9'` now,","Fragments":["instead"]},{"Key":"now, instead","Fragments":["of"]},{"Key":"of `'0'`","Fragments":["to"]},{"Key":"Added helper","Fragments":["functions"]},{"Key":"functions `next_letter()`","Fragments":["and"]},{"Key":"`next_letter()` and","Fragments":["`next_digit()`."]},{"Key":"* changed","Fragments":["return-type","the","```matches_out.insert(matches_out.end(),"]},{"Key":"changed return-type","Fragments":["of"]},{"Key":"return-type of","Fragments":["`reset()`"]},{"Key":"of `reset()`","Fragments":["to"]},{"Key":"`reset()` to","Fragments":["`robot"]},{"Key":"to `robot","Fragments":["\u0026`"]},{"Key":"`robot \u0026`","Fragments":["instead"]},{"Key":"\u0026` instead","Fragments":["of"]},{"Key":"of `robot","Fragments":["*`."]},{"Key":" @ivory,","Fragments":["I"]},{"Key":"@ivory, I","Fragments":["have"]},{"Key":"have addressed","Fragments":["your"]},{"Key":"addressed your","Fragments":["issues"]},{"Key":"your issues","Fragments":["in"]},{"Key":"issues in","Fragments":["the","most"]},{"Key":"That deeply","Fragments":["nested"]},{"Key":"deeply nested","Fragments":["`if`","loops"]},{"Key":"nested `if`","Fragments":["is"]},{"Key":"`if` is","Fragments":["hard"]},{"Key":"is hard","Fragments":["to"]},{"Key":"follow, do","Fragments":["you"]},{"Key":"mind to","Fragments":["refactor?"]},{"Key":"considered shifting","Fragments":["the"]},{"Key":"shifting the","Fragments":["accumulator"]},{"Key":"the accumulator","Fragments":["and","is","has"]},{"Key":"accumulator and","Fragments":["always"]},{"Key":"and always","Fragments":["binary-or"]},{"Key":"always binary-or","Fragments":["at"]},{"Key":"binary-or at","Fragments":["bit"]},{"Key":"at bit","Fragments":["position"]},{"Key":"bit position","Fragments":["0?"]},{"Key":"c++ world,","Fragments":["coming"]},{"Key":"world, coming","Fragments":["from"]},{"Key":"Python, const","Fragments":["is"]},{"Key":"const is","Fragments":["an","my","nice","just"]},{"Key":"an inmutable","Fragments":["variable,"]},{"Key":"inmutable variable,","Fragments":["right?"]},{"Key":"variable, right?","Fragments":["What"]},{"Key":"right? What","Fragments":["benefits"]},{"Key":"What benefits","Fragments":["brings"]},{"Key":"benefits brings","Fragments":["the"]},{"Key":"brings the","Fragments":["use"]},{"Key":"use on","Fragments":["const?","line"]},{"Key":"on const?","Fragments":["Can"]},{"Key":"const? Can","Fragments":["I"]},{"Key":"Can I","Fragments":["use","structure","do"]},{"Key":"arguments passing","Fragments":["like..."]},{"Key":"const bool","Fragments":["is_a_yell(const","is_question;","is_a_yell(const"]},{"Key":"bool is_a_yell(const","Fragments":["std::string","std::string\u0026","std::string\u0026"]},{"Key":"is_a_yell(const std::string","Fragments":["sentence)"]},{"Key":"or only","Fragments":["at"]},{"Key":"only at","Fragments":["variable","the"]},{"Key":"at variable","Fragments":["declaration"]},{"Key":"variable declaration","Fragments":["like","should"]},{"Key":" @marina","Fragments":["Thank"]},{"Key":"@marina Thank","Fragments":["you."]},{"Key":"Thank you.","Fragments":["I've"]},{"Key":"you. I've","Fragments":["addresed"]},{"Key":"I've addresed","Fragments":["your"]},{"Key":"addresed your","Fragments":["comments"]},{"Key":" Annoyingly,","Fragments":["trinary.h"]},{"Key":"Annoyingly, trinary.h","Fragments":["hasn't"]},{"Key":"trinary.h hasn't","Fragments":["submitted."]},{"Key":"hasn't submitted.","Fragments":["Odd..."]},{"Key":"submitted. Odd...","Fragments":["I"]},{"Key":"Odd... I","Fragments":["think"]},{"Key":"think I've","Fragments":["got","gotten","ever","fallen"]},{"Key":"I've got","Fragments":["all"]},{"Key":"got all","Fragments":["the","messed"]},{"Key":"type issues","Fragments":["sorted"]},{"Key":"issues sorted","Fragments":["out"]},{"Key":"out now,","Fragments":["and","and"]},{"Key":"now, and","Fragments":["the","at","upon","given"]},{"Key":"switch rather","Fragments":["than"]},{"Key":"if else","Fragments":["is","to"]},{"Key":"The integer","Fragments":["type"]},{"Key":"integer type","Fragments":["choices"]},{"Key":"type choices","Fragments":["are"]},{"Key":"choices are","Fragments":["surprising."]},{"Key":"are surprising.","Fragments":["Why"]},{"Key":"surprising. Why","Fragments":["loop"]},{"Key":"Why loop","Fragments":["on"]},{"Key":"on int","Fragments":["when"]},{"Key":"int when","Fragments":["the"]},{"Key":"is unsigned","Fragments":["int?"]},{"Key":"int? Why","Fragments":["choose"]},{"Key":"Why choose","Fragments":["either"]},{"Key":"choose either","Fragments":["of"]},{"Key":"those when","Fragments":["the"]},{"Key":"the input's","Fragments":["length"]},{"Key":"input's length","Fragments":["if"]},{"Key":"length if","Fragments":["of"]},{"Key":"if of","Fragments":["std::size_t"]},{"Key":"of std::size_t","Fragments":["which"]},{"Key":"std::size_t which","Fragments":["on"]},{"Key":"which on","Fragments":["many"]},{"Key":"on many","Fragments":["modern","mobile"]},{"Key":"many modern","Fragments":["machines"]},{"Key":"modern machines","Fragments":["is"]},{"Key":"machines is","Fragments":["a"]},{"Key":"lot larger","Fragments":["than"]},{"Key":"than unsigned","Fragments":["int"]},{"Key":"unsigned int","Fragments":["(e.g.","trinary::to_decimal(std::string","result","char_to_int(char","sum","num_l","sum","num_l","(or","for","for","for","for","for","for","for"]},{"Key":"int (e.g.","Fragments":["on"]},{"Key":"(e.g. on","Fragments":["my"]},{"Key":"machine 32-bit","Fragments":["vs."]},{"Key":"32-bit vs.","Fragments":["64-bit),"]},{"Key":"vs. 64-bit),","Fragments":["so"]},{"Key":"64-bit), so","Fragments":["there's"]},{"Key":"a realm","Fragments":["of"]},{"Key":"realm of","Fragments":["valid"]},{"Key":"input for","Fragments":["which"]},{"Key":"for which","Fragments":["you","that","use"]},{"Key":"It's theoretically","Fragments":["possible"]},{"Key":"possible (if","Fragments":["you've"]},{"Key":"(if you've","Fragments":["got"]},{"Key":"you've got","Fragments":["a","a","so"]},{"Key":"of memory),","Fragments":["to"]},{"Key":"memory), to","Fragments":["make"]},{"Key":"loop (logically,","Fragments":["at"]},{"Key":"(logically, at","Fragments":["least)"]},{"Key":"least) go","Fragments":["infinite"]},{"Key":"go infinite","Fragments":["if"]},{"Key":"infinite if","Fragments":["the"]},{"Key":"the strings'","Fragments":["length"]},{"Key":"strings' length","Fragments":["is"]},{"Key":"value representable","Fragments":["by"]},{"Key":"representable by","Fragments":["i"]},{"Key":"by i","Fragments":["(which"]},{"Key":"i (which","Fragments":["would"]},{"Key":"would still","Fragments":["be","need","behave"]},{"Key":"possible on","Fragments":["old"]},{"Key":"on old","Fragments":["32-bit"]},{"Key":"old 32-bit","Fragments":["machines"]},{"Key":"32-bit machines","Fragments":["where"]},{"Key":"machines where","Fragments":["sizeof(int)==sizeof(std::size_t))."]},{"Key":"where sizeof(int)==sizeof(std::size_t)).","Fragments":["In"]},{"Key":"sizeof(int)==sizeof(std::size_t)). In","Fragments":["reality"]},{"Key":"In reality","Fragments":["I"]},{"Key":"reality I","Fragments":["believe"]},{"Key":"believe i","Fragments":["will"]},{"Key":"to std::size_t","Fragments":["before"]},{"Key":"std::size_t before","Fragments":["comparison"]},{"Key":"before comparison","Fragments":["and"]},{"Key":"comparison and","Fragments":["the"]},{"Key":"wrap around","Fragments":["to"]},{"Key":"around to","Fragments":["be","really","fixing"]},{"Key":"and \u003c","Fragments":["will"]},{"Key":"\u003c will","Fragments":["evaluate"]},{"Key":"will evaluate","Fragments":["to"]},{"Key":"to false,","Fragments":["so","although"]},{"Key":"loop will","Fragments":["stop","be","simply"]},{"Key":"will stop","Fragments":["you'd"]},{"Key":"stop you'd","Fragments":["just"]},{"Key":"you'd just","Fragments":["get"]},{"Key":"answer. But","Fragments":["that's"]},{"Key":"that's weird","Fragments":["and"]},{"Key":"weird and","Fragments":["it's"]},{"Key":"better not","Fragments":["to","to"]},{"Key":"on behavior","Fragments":["that"]},{"Key":"behavior that","Fragments":["isn't"]},{"Key":"isn't required","Fragments":["by"]},{"Key":"the standard,","Fragments":["even"]},{"Key":"standard, even","Fragments":["if"]},{"Key":"How are","Fragments":["m_MAX_GRADE","you"]},{"Key":"are m_MAX_GRADE","Fragments":["and"]},{"Key":"m_MAX_GRADE and","Fragments":["m_MAX_NAME_LENGTH"]},{"Key":"and m_MAX_NAME_LENGTH","Fragments":["used?"]},{"Key":"m_MAX_NAME_LENGTH used?","Fragments":["Any"]},{"Key":"used? Any","Fragments":["particular"]},{"Key":"Any particular","Fragments":["reason"]},{"Key":"them non-static","Fragments":["(i.e."]},{"Key":"non-static (i.e.","Fragments":["per-object)?"]},{"Key":" Reduced","Fragments":["the"]},{"Key":"Reduced the","Fragments":["complexity"]},{"Key":"the complexity","Fragments":["by","is","of"]},{"Key":"complexity by","Fragments":["removing"]},{"Key":"by removing","Fragments":["the","punctuation","redundant","the"]},{"Key":"the dependency","Fragments":["on"]},{"Key":"dependency on","Fragments":["boost::regexp","Boost","boost,","\u003cstring\u003e"]},{"Key":"on boost::regexp","Fragments":["for"]},{"Key":"boost::regexp for","Fragments":["simple"]},{"Key":"simple searches.","Fragments":["Prefer"]},{"Key":"searches. Prefer","Fragments":["using"]},{"Key":"Prefer using","Fragments":["std::algorithm"]},{"Key":"using std::algorithm","Fragments":["when"]},{"Key":"std::algorithm when","Fragments":["possible."]},{"Key":" Minor","Fragments":["improvement","nit,"]},{"Key":"Minor improvement","Fragments":["to"]},{"Key":"improvement to","Fragments":["use"]},{"Key":"use size_t","Fragments":["as","instead"]},{"Key":"size_t as","Fragments":["opposed"]},{"Key":"to ints","Fragments":["for"]},{"Key":"ints for","Fragments":["consistency"]},{"Key":"for consistency","Fragments":["with"]},{"Key":"sure refactoring","Fragments":["here"]},{"Key":"refactoring here","Fragments":["would"]},{"Key":"here would","Fragments":["be"]},{"Key":"be beneficial.","Fragments":["I"]},{"Key":"beneficial. I","Fragments":["wrote"]},{"Key":"wrote it","Fragments":["as","I"]},{"Key":"a progression","Fragments":["of"]},{"Key":"progression of","Fragments":["steps"]},{"Key":"of steps","Fragments":["since"]},{"Key":"steps since","Fragments":["work"]},{"Key":"since work","Fragments":["needs"]},{"Key":"work needs","Fragments":["to"]},{"Key":"done to","Fragments":["the"]},{"Key":"the dictionary","Fragments":["word"]},{"Key":"dictionary word","Fragments":["so","that","that","that"]},{"Key":"word so","Fragments":["that"]},{"Key":"original sorted","Fragments":["word.","word"]},{"Key":"sorted word.","Fragments":["If"]},{"Key":"word. If","Fragments":["I","it"]},{"Key":"I broke","Fragments":["out","this","up"]},{"Key":"broke out","Fragments":["those"]},{"Key":"out those","Fragments":["steps,"]},{"Key":"those steps,","Fragments":["It"]},{"Key":"steps, It","Fragments":["seems"]},{"Key":"like we","Fragments":["would"]},{"Key":"we would","Fragments":["be","either","definitely"]},{"Key":"be creating","Fragments":["additional"]},{"Key":"creating additional","Fragments":["std::strings"]},{"Key":"additional std::strings","Fragments":["to"]},{"Key":"std::strings to","Fragments":["hold"]},{"Key":"hold that","Fragments":["result."]},{"Key":"would agree","Fragments":["that","about","that","about","that"]},{"Key":"that additional","Fragments":["comments","`case`'s"]},{"Key":"additional comments","Fragments":["could"]},{"Key":"comments could","Fragments":["help,"]},{"Key":"could help,","Fragments":["so"]},{"Key":"help, so","Fragments":["I've"]},{"Key":"I've added","Fragments":["that"]},{"Key":"added that","Fragments":["in","enforce"]},{"Key":"iteration 2","Fragments":["to","states","with"]},{"Key":"2 to","Fragments":["see","the","sqrt(n).","sqrt(n)."]},{"Key":"Both Nobbz","Fragments":["and"]},{"Key":"Nobbz and","Fragments":["I"]},{"Key":"I seem","Fragments":["to","to"]},{"Key":"have come","Fragments":["to","across,"]},{"Key":"to basically","Fragments":["the"]},{"Key":"basically the","Fragments":["same","same","same."]},{"Key":"same solution","Fragments":["which"]},{"Key":"solution which","Fragments":["is"]},{"Key":"is comparing","Fragments":["the"]},{"Key":"comparing the","Fragments":["lower","optimized","optimized","string","strings","two","two","length","strings."]},{"Key":"case sorted","Fragments":["version"]},{"Key":"sorted version","Fragments":["of","of"]},{"Key":"the string,","Fragments":["which","and","and","updating","cutting","without","which","so","how","setting","I","or","or"]},{"Key":"string, which","Fragments":["seems","seems","should"]},{"Key":"validate both","Fragments":["of"]},{"Key":"of our","Fragments":["approaches.","functions.","memory.","current"]},{"Key":"our approaches.","Fragments":["Nobbz"]},{"Key":"approaches. Nobbz","Fragments":["also"]},{"Key":"Nobbz also","Fragments":["brings"]},{"Key":"also brings","Fragments":["up"]},{"Key":"brings up","Fragments":["the"]},{"Key":"the worthwhile","Fragments":["comment"]},{"Key":"worthwhile comment","Fragments":["that"]},{"Key":"any premature","Fragments":["optimization"]},{"Key":"is usually","Fragments":["a"]},{"Key":"usually a","Fragments":["bad"]},{"Key":"If incrased","Fragments":["clarity"]},{"Key":"incrased clarity","Fragments":["was"]},{"Key":"clarity was","Fragments":["the"]},{"Key":"the ultimate","Fragments":["goal"]},{"Key":"ultimate goal","Fragments":["then"]},{"Key":"goal then","Fragments":["I"]},{"Key":"could imaging","Fragments":["making:"]},{"Key":" lc_word","Fragments":["="]},{"Key":"lc_word =","Fragments":["boost::algorithm::to_lower(word);"]},{"Key":" sorted_lc_word","Fragments":["="]},{"Key":"sorted_lc_word =","Fragments":["std::sort(lc_word.begin(),"]},{"Key":"= std::sort(lc_word.begin(),","Fragments":["lc_word.end());"]},{"Key":" (word.length()","Fragments":["=="]},{"Key":"(word.length() ==","Fragments":["m_sorted_word.length())"]},{"Key":"== m_sorted_word.length())","Fragments":["\u0026\u0026"]},{"Key":" (lc_word","Fragments":["!="]},{"Key":"(lc_word !=","Fragments":["m_original_word)"]},{"Key":"!= m_original_word)","Fragments":["\u0026\u0026"]},{"Key":" (sorted_lc_word","Fragments":["=="]},{"Key":"(sorted_lc_word ==","Fragments":["m_sorted_word)"]},{"Key":" Note","Fragments":["that","that","you"]},{"Key":"Note that","Fragments":["the","I","this"]},{"Key":"only part","Fragments":["of","of"]},{"Key":"boost used","Fragments":["here"]},{"Key":"used here","Fragments":["is"]},{"Key":"the templated","Fragments":["to_lower"]},{"Key":"templated to_lower","Fragments":["function,"]},{"Key":"to_lower function,","Fragments":["which"]},{"Key":"function, which","Fragments":["as","would","is","has"]},{"Key":"which as","Fragments":["an"]},{"Key":"is effectively","Fragments":["the","what"]},{"Key":"effectively the","Fragments":["same"]},{"Key":"the transformation","Fragments":["used"]},{"Key":"transformation used","Fragments":["by"]},{"Key":"Very interesting","Fragments":["pointers,"]},{"Key":"interesting pointers,","Fragments":["thanks"]},{"Key":"pointers, thanks","Fragments":["a"]},{"Key":"lot. I'm","Fragments":["going"]},{"Key":"them tonight","Fragments":["and"]},{"Key":"tonight and","Fragments":["see"]},{"Key":"how comes","Fragments":["the"]},{"Key":"comes the","Fragments":["new"]},{"Key":"So far","Fragments":["I"]},{"Key":"far I","Fragments":["had"]},{"Key":"had only","Fragments":["regarded"]},{"Key":"only regarded","Fragments":["const"]},{"Key":"regarded const","Fragments":["variables"]},{"Key":"const variables","Fragments":["for","somewhere"]},{"Key":"for avoiding","Fragments":["race"]},{"Key":"avoiding race","Fragments":["conditions."]},{"Key":"race conditions.","Fragments":["Is","Not"]},{"Key":"conditions. Is","Fragments":["interesting"]},{"Key":"Is interesting","Fragments":["to"]},{"Key":"see other","Fragments":["uses.","peoples","creative"]},{"Key":"be honest","Fragments":["I","an"]},{"Key":"honest I","Fragments":["didn't"]},{"Key":"didn't expect","Fragments":["the","an"]},{"Key":"expect the","Fragments":["const","code"]},{"Key":"function definition","Fragments":["to"]},{"Key":"definition to","Fragments":["be","a","the","avoid","get"]},{"Key":"be allowed,","Fragments":["I"]},{"Key":"allowed, I","Fragments":["was"]},{"Key":"didn't knew","Fragments":["of"]},{"Key":"knew of","Fragments":["auto,"]},{"Key":"of auto,","Fragments":["it","if"]},{"Key":"auto, it","Fragments":["kinda"]},{"Key":"it kinda","Fragments":["of"]},{"Key":"kinda of","Fragments":["reminds"]},{"Key":"of reminds","Fragments":["me"]},{"Key":"of Python.","Fragments":["One"]},{"Key":"Python. One","Fragments":["of"]},{"Key":"the benefits","Fragments":["of","of","of","of"]},{"Key":"exactly that,","Fragments":["static"]},{"Key":"that, static","Fragments":["typing,"]},{"Key":"static typing,","Fragments":["that"]},{"Key":"typing, that","Fragments":["avoided"]},{"Key":"that avoided","Fragments":["weird"]},{"Key":"avoided weird","Fragments":["bugs"]},{"Key":"weird bugs","Fragments":["when"]},{"Key":"bugs when","Fragments":["a"]},{"Key":"variable changed","Fragments":["type"]},{"Key":"changed type","Fragments":["for"]},{"Key":"type for","Fragments":["a","this","the"]},{"Key":"a logic","Fragments":["error."]},{"Key":"logic error.","Fragments":["Does"]},{"Key":"error. Does","Fragments":["auto"]},{"Key":"Does auto","Fragments":["helps"]},{"Key":"auto helps","Fragments":["with"]},{"Key":"But still","Fragments":["you"]},{"Key":"still you","Fragments":["need"]},{"Key":"some large","Fragments":["object-file"]},{"Key":"large object-file","Fragments":["provided"]},{"Key":"object-file provided","Fragments":["by"]},{"Key":"by boost,","Fragments":["which"]},{"Key":"your executable","Fragments":["unnecessary"]},{"Key":"executable unnecessary","Fragments":["bigger"]},{"Key":"unnecessary bigger","Fragments":["than"]},{"Key":"mine. Or","Fragments":["if"]},{"Key":"Or if","Fragments":["dynamically"]},{"Key":"if dynamically","Fragments":["linked,"]},{"Key":"dynamically linked,","Fragments":["forces"]},{"Key":"linked, forces","Fragments":["your"]},{"Key":"forces your","Fragments":["client"]},{"Key":"your client","Fragments":["to","will"]},{"Key":"client to","Fragments":["install"]},{"Key":"install some","Fragments":["big"]},{"Key":"some big","Fragments":["dependency."]},{"Key":"Since we","Fragments":["have","only","want","can't"]},{"Key":"to boost","Fragments":["anyway","readability."]},{"Key":"boost anyway","Fragments":["because"]},{"Key":"tests, we","Fragments":["can't"]},{"Key":"we can't","Fragments":["compare","see","submit"]},{"Key":"can't compare","Fragments":["that"]},{"Key":"compare that","Fragments":["one","against"]},{"Key":"The boost::algorithm::string","Fragments":["library"]},{"Key":"boost::algorithm::string library","Fragments":["is"]},{"Key":"is header-only.","Fragments":["There"]},{"Key":"header-only. There","Fragments":["is"]},{"Key":"no linking","Fragments":["to"]},{"Key":"linking to","Fragments":["any"]},{"Key":"to any","Fragments":["SO/DLL","actual","feedback.","of","of"]},{"Key":"any SO/DLL","Fragments":["created"]},{"Key":"SO/DLL created","Fragments":["from"]},{"Key":"boost build.","Fragments":["I"]},{"Key":"build. I","Fragments":["think"]},{"Key":"be thinking","Fragments":["of"]},{"Key":"regex or","Fragments":["one"]},{"Key":"the compiled","Fragments":["libs"]},{"Key":"compiled libs","Fragments":["from"]},{"Key":"libs from","Fragments":["boost."]},{"Key":" OK,","Fragments":["header"]},{"Key":"OK, header","Fragments":["only"]},{"Key":"does convince","Fragments":["me."]},{"Key":" Introduced","Fragments":["some"]},{"Key":"Introduced some","Fragments":["`const`ness."]},{"Key":"your `break`s","Fragments":["are"]},{"Key":"`break`s are","Fragments":["unreachable,"]},{"Key":"are unreachable,","Fragments":["since"]},{"Key":"unreachable, since","Fragments":["you"]},{"Key":"have `return`","Fragments":["right"]},{"Key":"`return` right","Fragments":["in"]},{"Key":"them. `return`","Fragments":["leaves"]},{"Key":"`return` leaves","Fragments":["the"]},{"Key":"are recreating","Fragments":["and"]},{"Key":"recreating and","Fragments":["refilling"]},{"Key":"and refilling","Fragments":["your"]},{"Key":"refilling your","Fragments":["map"]},{"Key":"at every","Fragments":["call","loop.."]},{"Key":"of `score()`.","Fragments":["Don't"]},{"Key":"`score()`. Don't","Fragments":["you"]},{"Key":"was better","Fragments":["to","after"]},{"Key":"to fill","Fragments":["it","the"]},{"Key":"fill it","Fragments":["only"]},{"Key":"it only","Fragments":["once","in","in","goes","exists","needs","once?"]},{"Key":"only once","Fragments":["and","in"]},{"Key":"then memoize","Fragments":["it"]},{"Key":"memoize it","Fragments":["somewhere?"]},{"Key":"* Please!","Fragments":["Don't"]},{"Key":"Please! Don't","Fragments":["use"]},{"Key":"use `pow()`","Fragments":["when"]},{"Key":"`pow()` when","Fragments":["you"]},{"Key":"are handling","Fragments":["with"]},{"Key":"handling with","Fragments":["integers!","```default```\u003c/li\u003e\u003c/ul\u003e"]},{"Key":"with integers!","Fragments":["Every"]},{"Key":"integers! Every","Fragments":["single"]},{"Key":"Every single","Fragments":["value"]},{"Key":"single value","Fragments":["in","deriving"]},{"Key":"line 34","Fragments":["(except"]},{"Key":"34 (except","Fragments":["the"]},{"Key":"the literal","Fragments":["`16`)"]},{"Key":"literal `16`)","Fragments":["has"]},{"Key":"`16`) has","Fragments":["to"]},{"Key":"be casted","Fragments":["to"]},{"Key":"casted to","Fragments":["`double`","an"]},{"Key":"`double` now,","Fragments":["and"]},{"Key":"the calculation","Fragments":["is","so"]},{"Key":"calculation is","Fragments":["returned"]},{"Key":"returned as","Fragments":["`double`,"]},{"Key":"as `double`,","Fragments":["just"]},{"Key":"`double`, just","Fragments":["to"]},{"Key":"before getting","Fragments":["passed"]},{"Key":"getting passed","Fragments":["again"]},{"Key":"passed again","Fragments":["into"]},{"Key":"again into","Fragments":["the"]},{"Key":"* Also","Fragments":["I"]},{"Key":"think, that","Fragments":["the"]},{"Key":"of `std::isxdigit()`","Fragments":["is"]},{"Key":"`std::isxdigit()` is","Fragments":["a"]},{"Key":"bit against","Fragments":["“first"]},{"Key":"against “first","Fragments":["principles”."]},{"Key":"not allowed","Fragments":["to"]},{"Key":"use converters","Fragments":["provided"]},{"Key":"converters provided","Fragments":["by"]},{"Key":" They","Fragments":["aren't.","are"]},{"Key":"They aren't.","Fragments":["I"]},{"Key":"aren't. I","Fragments":["think"]},{"Key":"left them","Fragments":["in"]},{"Key":"the scaffolding.","Fragments":["I'll"]},{"Key":"scaffolding. I'll","Fragments":["fix"]},{"Key":"fix that","Fragments":["soon.","in","in","would"]},{"Key":"I've actually","Fragments":["already"]},{"Key":"actually already","Fragments":["been"]},{"Key":"been told","Fragments":["that"]},{"Key":"told that","Fragments":["and"]},{"Key":"have completely","Fragments":["forgotten."]},{"Key":"completely forgotten.","Fragments":["I'll"]},{"Key":"forgotten. I'll","Fragments":["put"]},{"Key":"I'll put","Fragments":["up"]},{"Key":"I set","Fragments":["a","that"]},{"Key":"set a","Fragments":["couple"]},{"Key":"of parameters","Fragments":["as"]},{"Key":"parameters as","Fragments":["const,"]},{"Key":"as const,","Fragments":["updated"]},{"Key":"const, updated","Fragments":["the"]},{"Key":"the is_empty","Fragments":["method"]},{"Key":"is_empty method","Fragments":["to"]},{"Key":"explicit style,","Fragments":["and"]},{"Key":"style, and","Fragments":["declared"]},{"Key":"and declared","Fragments":["my"]},{"Key":"declared my","Fragments":["own"]},{"Key":"own UnaryPredicate","Fragments":["for"]},{"Key":"UnaryPredicate for","Fragments":["practice."]},{"Key":" Leaved","Fragments":["is_a_yell"]},{"Key":"Leaved is_a_yell","Fragments":["as"]},{"Key":"is_a_yell as","Fragments":["it"]},{"Key":"for comparison","Fragments":["purposes"]},{"Key":"comparison purposes","Fragments":["with"]},{"Key":"purposes with","Fragments":["is_empty,"]},{"Key":"with is_empty,","Fragments":["as"]},{"Key":"is_empty, as","Fragments":["they"]},{"Key":"less the","Fragments":["same","same"]},{"Key":"same but","Fragments":["the","what"]},{"Key":"of is_a_yell","Fragments":["does"]},{"Key":"is_a_yell does","Fragments":["not"]},{"Key":"not allow","Fragments":["to"]},{"Key":"allow to","Fragments":["set","state"]},{"Key":"set sentence","Fragments":["as","const"]},{"Key":"sentence as","Fragments":["a"]},{"Key":"a const,","Fragments":["which"]},{"Key":"is intereseting","Fragments":["as"]},{"Key":"intereseting as","Fragments":["the"]},{"Key":"only different","Fragments":["thing"]},{"Key":"different thing","Fragments":["seems"]},{"Key":"thing seems","Fragments":["the"]},{"Key":"seems the","Fragments":["to","whole","test"]},{"Key":"the it","Fragments":["iterator."]},{"Key":"your pointers","Fragments":["and"]},{"Key":"pointers and","Fragments":["updated","memory"]},{"Key":"solution, thanks","Fragments":["a"]},{"Key":"for them,","Fragments":["they"]},{"Key":"them, they","Fragments":["set"]},{"Key":"they set","Fragments":["me"]},{"Key":"set me","Fragments":["to"]},{"Key":"Regarding auto","Fragments":["declaration,"]},{"Key":"auto declaration,","Fragments":["as"]},{"Key":"declaration, as","Fragments":["they"]},{"Key":"are defined","Fragments":["at","without","as","to"]},{"Key":"time, is","Fragments":["it"]},{"Key":"it best","Fragments":["to"]},{"Key":"them at","Fragments":["the","the","http://www.comeaucomputing.com/techtalk/#nostatic"]},{"Key":"the api","Fragments":["boundaries"]},{"Key":"api boundaries","Fragments":["of"]},{"Key":"boundaries of","Fragments":["methods"]},{"Key":"of methods","Fragments":["or"]},{"Key":"methods or","Fragments":["with"]},{"Key":"or with","Fragments":["internal","a","complex"]},{"Key":"with internal","Fragments":["variables.","linkage\","]},{"Key":" Thinking","Fragments":["about","about"]},{"Key":"Thinking about","Fragments":["it,","this"]},{"Key":"the api,","Fragments":["you","you"]},{"Key":"api, you","Fragments":["are","are"]},{"Key":"are gaining","Fragments":["at","at"]},{"Key":"gaining at","Fragments":["scalabillity","scalabillity"]},{"Key":"at scalabillity","Fragments":["as","as"]},{"Key":"scalabillity as","Fragments":["your","your"]},{"Key":"your method","Fragments":["can","right?","can","right?\"","doesn't","parameters"]},{"Key":"method can","Fragments":["be","be"]},{"Key":"used with","Fragments":["whatever","whatever","another","lambda"]},{"Key":"whatever data","Fragments":["structure","structure"]},{"Key":"data structure","Fragments":["or","or","the","to","had","in"]},{"Key":"structure or","Fragments":["object","object","clear"]},{"Key":"or object","Fragments":["that","that"]},{"Key":"that complies","Fragments":["with","with"]},{"Key":"complies with","Fragments":["the","the"]},{"Key":"implicit contract","Fragments":["of","of"]},{"Key":"contract of","Fragments":["your","your"]},{"Key":"the tradeoff","Fragments":["of"]},{"Key":"tradeoff of","Fragments":["having"]},{"Key":"some checking","Fragments":["'cause"]},{"Key":"checking 'cause","Fragments":["the"]},{"Key":"'cause the","Fragments":["compiler"]},{"Key":"longer going","Fragments":["to"]},{"Key":"to warn","Fragments":["you"]},{"Key":"warn you","Fragments":["if"]},{"Key":"int where","Fragments":["a"]},{"Key":"is expected,","Fragments":["as"]},{"Key":"expected, as","Fragments":["I"]},{"Key":"have auto,","Fragments":["right?"]},{"Key":"auto, right?","Fragments":["Am"]},{"Key":"right? Am","Fragments":["I"]},{"Key":"I in","Fragments":["the"]},{"Key":"The other","Fragments":["place","test","tests"]},{"Key":"other place","Fragments":["is"]},{"Key":"place is","Fragments":["inside"]},{"Key":"is inside","Fragments":["your"]},{"Key":"your methods,","Fragments":["in"]},{"Key":"methods, in","Fragments":["private"]},{"Key":"in private","Fragments":["variables"]},{"Key":"private variables","Fragments":["that","in"]},{"Key":"variables that","Fragments":["you","have","have"]},{"Key":"you control","Fragments":["to"]},{"Key":"control to","Fragments":["store"]},{"Key":"store temporal","Fragments":["or"]},{"Key":"temporal or","Fragments":["even"]},{"Key":"even const","Fragments":["ones"]},{"Key":"const ones","Fragments":["to"]},{"Key":"ones to","Fragments":["return,"]},{"Key":"to return,","Fragments":["but"]},{"Key":"return, but","Fragments":["then,","when"]},{"Key":"but then,","Fragments":["you"]},{"Key":"then, you","Fragments":["expect"]},{"Key":"handle your","Fragments":["objects"]},{"Key":"your objects","Fragments":["in"]},{"Key":"particular type,","Fragments":["correct?"]},{"Key":"type, correct?","Fragments":["You"]},{"Key":"correct? You","Fragments":["don't"]},{"Key":"don't expect","Fragments":["a"]},{"Key":"expect a","Fragments":["different"]},{"Key":"different type","Fragments":["of"]},{"Key":"of object","Fragments":["because","but"]},{"Key":"object because","Fragments":["you","you"]},{"Key":"working inside","Fragments":["your"]},{"Key":"your private","Fragments":["part","members?","variables"]},{"Key":"private part","Fragments":["of"]},{"Key":"return variables","Fragments":["that","that","in"]},{"Key":"been declared","Fragments":["as","as"]},{"Key":"as const?","Fragments":["If"]},{"Key":"const? If","Fragments":["so,"]},{"Key":"then how","Fragments":["can"]},{"Key":"how can","Fragments":["I","you","I","I"]},{"Key":"can I","Fragments":["declare","improve","ask","put","use","use"]},{"Key":"I declare","Fragments":["response",":","```lower_str```","`string"]},{"Key":"declare response","Fragments":["as"]},{"Key":"response as","Fragments":["a"]},{"Key":"a const?","Fragments":["In"]},{"Key":"const? In","Fragments":["my"]},{"Key":"I declared","Fragments":["at"]},{"Key":"declared at","Fragments":["start,"]},{"Key":"at start,","Fragments":["and"]},{"Key":"start, and","Fragments":["initialize","combining"]},{"Key":"and initialize","Fragments":["it"]},{"Key":"it once","Fragments":["according","\u0026","and","my","in"]},{"Key":"once according","Fragments":["to"]},{"Key":"according to","Fragments":["the","requirements,","the"]},{"Key":"response but","Fragments":["that"]},{"Key":"that single","Fragments":["change"]},{"Key":"single change","Fragments":["from"]},{"Key":"change from","Fragments":["Null"]},{"Key":"from Null","Fragments":["to"]},{"Key":"Null to","Fragments":["a"]},{"Key":"the double","Fragments":["declaration","leading"]},{"Key":"double declaration","Fragments":["in"]},{"Key":"declaration in","Fragments":["namespace?"]},{"Key":"The if","Fragments":["in","in"]},{"Key":"if in","Fragments":["line","line","the"]},{"Key":"21, how","Fragments":["does"]},{"Key":"it work?","Fragments":["It"]},{"Key":"work? It","Fragments":["compares"]},{"Key":"It compares","Fragments":["the"]},{"Key":"compares the","Fragments":["number","two","sentence","sentence","sentence","sentence"]},{"Key":"case against","Fragments":["the"]},{"Key":"of lower","Fragments":["case","case"]},{"Key":"letters and","Fragments":["if","number","digits","ending","uppercase","upper","that"]},{"Key":"if larger","Fragments":["enter?"]},{"Key":"larger enter?","Fragments":["Wouldn't"]},{"Key":"enter? Wouldn't","Fragments":["enter"]},{"Key":"Wouldn't enter","Fragments":["if"]},{"Key":"enter if","Fragments":["message"]},{"Key":"if message","Fragments":["was"]},{"Key":"message was","Fragments":["something","this:"]},{"Key":"was something","Fragments":["like","I'd","I"]},{"Key":"like \"NOT","Fragments":["YELLINg\"?"]},{"Key":"line 28","Fragments":["reads","would"]},{"Key":"28 reads","Fragments":["something"]},{"Key":"reads something","Fragments":["like..."]},{"Key":"something like...","Fragments":["From"]},{"Key":"like... From","Fragments":["back"]},{"Key":"From back","Fragments":["to"]},{"Key":"to front","Fragments":["find","and"]},{"Key":"front find","Fragments":["the"]},{"Key":"first punctuation","Fragments":["character"]},{"Key":"punctuation character","Fragments":["and"]},{"Key":"character and","Fragments":["give","no"]},{"Key":"and give","Fragments":["me","non-unique"]},{"Key":"me its","Fragments":["pointer."]},{"Key":"its pointer.","Fragments":["If"]},{"Key":"pointer. If","Fragments":["that"]},{"Key":"that pointer","Fragments":["is"]},{"Key":"last of","Fragments":["the"]},{"Key":"that space","Fragments":["is"]},{"Key":"space is","Fragments":["'?'"]},{"Key":"is '?'","Fragments":["return"]},{"Key":"'?' return","Fragments":["Question."]},{"Key":" Am","Fragments":["I"]},{"Key":" punct","Fragments":["!="]},{"Key":"punct !=","Fragments":["message.rend()","message.rend()"]},{"Key":" works?","Fragments":["Isn't"]},{"Key":"works? Isn't","Fragments":["'?'"]},{"Key":"Isn't '?'","Fragments":["supposed"]},{"Key":"'?' supposed","Fragments":["to"]},{"Key":"last letter","Fragments":["of"]},{"Key":"started playing","Fragments":["with"]},{"Key":"playing with","Fragments":["exercism","indices.","that"]},{"Key":"with exercism","Fragments":["is"]},{"Key":"some experience","Fragments":["using"]},{"Key":"experience using","Fragments":["C++"]},{"Key":"using C++","Fragments":["11.","you","using"]},{"Key":"C++ 11.","Fragments":["So,"]},{"Key":"11. So,","Fragments":["my"]},{"Key":"So, my","Fragments":["solution"]},{"Key":"solution leans","Fragments":["more"]},{"Key":"leans more","Fragments":["towards"]},{"Key":"more towards","Fragments":["new"]},{"Key":"towards new","Fragments":["stuff"]},{"Key":"new stuff","Fragments":["and"]},{"Key":"stuff and","Fragments":["algorithms."]},{"Key":"and algorithms.","Fragments":["Looking"]},{"Key":"algorithms. Looking","Fragments":["at"]},{"Key":"it now","Fragments":["I","it"]},{"Key":"very efficient","Fragments":["as","as"]},{"Key":"efficient as","Fragments":["it","the","it","making"]},{"Key":"may iterate","Fragments":["through"]},{"Key":"iterate through","Fragments":["the","the","each"]},{"Key":"string many","Fragments":["times.","times."]},{"Key":"Your accumulator","Fragments":["is"]},{"Key":"accumulator is","Fragments":["just","that"]},{"Key":"just added","Fragments":["up.","an"]},{"Key":"added up.","Fragments":["To"]},{"Key":"up. To","Fragments":["be"]},{"Key":"be clear,","Fragments":["the"]},{"Key":"clear, the","Fragments":["accumulator"]},{"Key":"that variable,","Fragments":["that"]},{"Key":"variable, that","Fragments":["carries","is"]},{"Key":"that carries","Fragments":["the"]},{"Key":"carries the","Fragments":["intermediate"]},{"Key":"the intermediate","Fragments":["results","capturing","variable"]},{"Key":"intermediate results","Fragments":["of"]},{"Key":"the computation","Fragments":["from","to"]},{"Key":"computation from","Fragments":["one"]},{"Key":"from one","Fragments":["iteration","team/project","another"]},{"Key":"one iteration","Fragments":["to","in","over",":|","through"]},{"Key":"to another,","Fragments":["so"]},{"Key":"another, so","Fragments":["it"]},{"Key":"is `sum`","Fragments":["in"]},{"Key":"`sum` in","Fragments":["your"]},{"Key":"your case.","Fragments":["That"]},{"Key":"case. That","Fragments":["one","being"]},{"Key":"That one","Fragments":["doesn't"]},{"Key":"one doesn't","Fragments":["get","resort"]},{"Key":"get multiplicated","Fragments":["with"]},{"Key":"multiplicated with","Fragments":["anything."]},{"Key":"this, without","Fragments":["knowing"]},{"Key":"without knowing","Fragments":["the"]},{"Key":"knowing the","Fragments":["current"]},{"Key":"current position","Fragments":["in"]},{"Key":"position in","Fragments":["the"]},{"Key":"loop. Just","Fragments":["pretend,"]},{"Key":"Just pretend,","Fragments":["that"]},{"Key":"pretend, that","Fragments":["the"]},{"Key":"current digit","Fragments":["is"]},{"Key":"digit is","Fragments":["least"]},{"Key":"is least","Fragments":["significant,"]},{"Key":"least significant,","Fragments":["and"]},{"Key":"significant, and","Fragments":["everything"]},{"Key":"everything whats","Fragments":["already"]},{"Key":"whats already","Fragments":["in"]},{"Key":"accumulator has","Fragments":["to"]},{"Key":"more significant,","Fragments":["so"]},{"Key":"significant, so","Fragments":["multiply"]},{"Key":"so multiply","Fragments":["the"]},{"Key":"multiply the","Fragments":["acc"]},{"Key":"the acc","Fragments":["and"]},{"Key":"acc and","Fragments":["then"]},{"Key":"then add","Fragments":["current"]},{"Key":"add current","Fragments":["digits"]},{"Key":"current digits","Fragments":["value."]},{"Key":"1) The","Fragments":["outer","comment"]},{"Key":"The outer","Fragments":["namespace"]},{"Key":"outer namespace","Fragments":["is"]},{"Key":"namespace that","Fragments":["guarantees","isn't"]},{"Key":"that guarantees","Fragments":["those"]},{"Key":"guarantees those","Fragments":["declarations"]},{"Key":"those declarations","Fragments":["aren't"]},{"Key":"declarations aren't","Fragments":["visible"]},{"Key":"aren't visible","Fragments":["outside","in"]},{"Key":"visible outside","Fragments":["that","the"]},{"Key":"outside that","Fragments":["translation","translation"]},{"Key":"that translation","Fragments":["unit","unit,"]},{"Key":"translation unit","Fragments":["-","meant.","that","to","containing","(eg."]},{"Key":"unit -","Fragments":["if"]},{"Key":"if some","Fragments":["other"]},{"Key":"other .cpp","Fragments":["has"]},{"Key":".cpp has","Fragments":["a"]},{"Key":"a response::QUESTION","Fragments":["declared"]},{"Key":"response::QUESTION declared","Fragments":["they'll"]},{"Key":"declared they'll","Fragments":["live"]},{"Key":"they'll live","Fragments":["happily"]},{"Key":"live happily","Fragments":["side-by-side"]},{"Key":"happily side-by-side","Fragments":["in"]},{"Key":"side-by-side in","Fragments":["the"]},{"Key":"program. It's","Fragments":["very"]},{"Key":"very close","Fragments":["to","numbers","to"]},{"Key":"to declaring","Fragments":["each"]},{"Key":"declaring each","Fragments":["of","variable"]},{"Key":"those strings","Fragments":["static.","are","and","manually"]},{"Key":"strings static.","Fragments":["Might"]},{"Key":"static. Might","Fragments":["be"]},{"Key":"Might be","Fragments":["a"]},{"Key":"bit overkill,","Fragments":["I"]},{"Key":"overkill, I","Fragments":["suppose."]},{"Key":"suppose. The","Fragments":["inner"]},{"Key":"inner namespace","Fragments":["is"]},{"Key":"names together","Fragments":["for"]},{"Key":"together for","Fragments":["this"]},{"Key":"this .cpp's","Fragments":["sake."]},{"Key":"2) Yes,","Fragments":["that's"]},{"Key":"Yes, that's","Fragments":["exactly","a","looking"]},{"Key":"that's exactly","Fragments":["how"]},{"Key":"how that","Fragments":["count_if","might","logic"]},{"Key":"that count_if","Fragments":["if"]},{"Key":"count_if if","Fragments":["statement"]},{"Key":"statement works.","Fragments":["My"]},{"Key":"works. My","Fragments":["interpretation"]},{"Key":"My interpretation","Fragments":["of"]},{"Key":"for \"yelling\"","Fragments":["was"]},{"Key":"\"yelling\" was","Fragments":["a"]},{"Key":"bit different","Fragments":["from"]},{"Key":"from some","Fragments":["of"]},{"Key":"the others","Fragments":["I've"]},{"Key":"others I've","Fragments":["seen."]},{"Key":"I've seen.","Fragments":["NOT"]},{"Key":"seen. NOT","Fragments":["YELLINg"]},{"Key":"NOT YELLINg","Fragments":["sure"]},{"Key":"YELLINg sure","Fragments":["seems"]},{"Key":"sure seems","Fragments":["like"]},{"Key":"like yelling","Fragments":["to"]},{"Key":"yelling to","Fragments":["me"]},{"Key":"3) I","Fragments":["doubt","tried","think"]},{"Key":"doubt string_ref::iterator","Fragments":["is"]},{"Key":"string_ref::iterator is","Fragments":["a"]},{"Key":"pointer (std::string::iterator","Fragments":["isn't),"]},{"Key":"(std::string::iterator isn't),","Fragments":["but"]},{"Key":"isn't), but","Fragments":["it's"]},{"Key":"it's close","Fragments":["and"]},{"Key":"close and","Fragments":["functions"]},{"Key":"functions similarly","Fragments":["and"]},{"Key":"similarly and","Fragments":["you're"]},{"Key":"you're otherwise","Fragments":["right"]},{"Key":"otherwise right","Fragments":["on"]},{"Key":"right on","Fragments":["the"]},{"Key":"the money.","Fragments":["Do"]},{"Key":"money. Do","Fragments":["you"]},{"Key":"that's too","Fragments":["loose?"]},{"Key":"too loose?","Fragments":["Should"]},{"Key":"loose? Should","Fragments":["this"]},{"Key":"Should this","Fragments":["be"]},{"Key":"this be","Fragments":["a","a","replaced?","replaced","replaced"]},{"Key":"question? do","Fragments":["ya","ya"]},{"Key":"do ya","Fragments":["think","think\""]},{"Key":" message.rend","Fragments":["will"]},{"Key":"message.rend will","Fragments":["come"]},{"Key":"will come","Fragments":["out","back","back"]},{"Key":"that find_if","Fragments":["if"]},{"Key":"find_if if","Fragments":["there's"]},{"Key":"no punctuation","Fragments":["in"]},{"Key":"punctuation in","Fragments":["the"]},{"Key":"string _at","Fragments":["all_"]},{"Key":"_at all_","Fragments":["so"]},{"Key":"all_ so","Fragments":["of"]},{"Key":"so of","Fragments":["course"]},{"Key":"course there's","Fragments":["no"]},{"Key":"no '?'.","Fragments":["And"]},{"Key":"'?'. And","Fragments":["in"]},{"Key":"case *punct","Fragments":["is"]},{"Key":"*punct is","Fragments":["not"]},{"Key":"valid thing","Fragments":["to"]},{"Key":"do -","Fragments":["rend"]},{"Key":"- rend","Fragments":["doesn't"]},{"Key":"rend doesn't","Fragments":["need"]},{"Key":"to valid","Fragments":["memory"]},{"Key":"valid memory","Fragments":["(and"]},{"Key":"memory (and","Fragments":["even"]},{"Key":"(and even","Fragments":["if"]},{"Key":"valid in","Fragments":["the"]},{"Key":"the OS","Fragments":["sense"]},{"Key":"OS sense","Fragments":["whether"]},{"Key":"sense whether","Fragments":["it's"]},{"Key":"whether it's","Fragments":["a","equal","better","a"]},{"Key":"a '?'","Fragments":["isn't","to"]},{"Key":"'?' isn't","Fragments":["relevant"]},{"Key":"relevant because","Fragments":["it's"]},{"Key":"not part","Fragments":["of","of","of","of","of","of"]},{"Key":"the string).","Fragments":["So"]},{"Key":"string). So","Fragments":["that"]},{"Key":"So that","Fragments":["if","doesn't","brings"]},{"Key":"is relying","Fragments":["on"]},{"Key":"the short-circuit","Fragments":["nature"]},{"Key":"short-circuit nature","Fragments":["of"]},{"Key":"nature of","Fragments":["the","creating"]},{"Key":"logical and","Fragments":["to"]},{"Key":"avoid dereferencing","Fragments":["rend,"]},{"Key":"dereferencing rend,","Fragments":["it's"]},{"Key":"rend, it's","Fragments":["equivalent"]},{"Key":"it's equivalent","Fragments":["to:","to"]},{"Key":"( punct","Fragments":["!="]},{"Key":"!= message.rend()","Fragments":[")"]},{"Key":" {","Fragments":["//we","/*","original_word"]},{"Key":"{ //we","Fragments":["found"]},{"Key":"//we found","Fragments":["a"]},{"Key":"a punctuation","Fragments":["char"]},{"Key":"punctuation char","Fragments":["of"]},{"Key":"some sort,","Fragments":["punct"]},{"Key":"sort, punct","Fragments":["'points'"]},{"Key":"punct 'points'","Fragments":["to"]},{"Key":"'points' to","Fragments":["it"]},{"Key":"( *punct","Fragments":["=="]},{"Key":"*punct ==","Fragments":["'?'"]},{"Key":"== '?'","Fragments":[")",")",")","in"]},{"Key":"Moving some","Fragments":["of"]},{"Key":"your questions","Fragments":["forward:"]},{"Key":"1) \"Thinking","Fragments":["about"]},{"Key":"\"Thinking about","Fragments":["it,"]},{"Key":"can't declare","Fragments":["parameters","something"]},{"Key":"declare parameters","Fragments":["auto"]},{"Key":"parameters auto","Fragments":["until"]},{"Key":"auto until","Fragments":["C++17"]},{"Key":"until C++17","Fragments":["which"]},{"Key":"C++17 which","Fragments":["isn't"]},{"Key":"an official","Fragments":["standard"]},{"Key":"official standard","Fragments":["yet,"]},{"Key":"standard yet,","Fragments":["much"]},{"Key":"yet, much","Fragments":["less"]},{"Key":"much less","Fragments":["implemented."]},{"Key":"less implemented.","Fragments":["If"]},{"Key":"implemented. If","Fragments":["you"]},{"Key":"want that","Fragments":["functionality","capability,"]},{"Key":"that functionality","Fragments":["today"]},{"Key":"functionality today","Fragments":["you"]},{"Key":"today you","Fragments":["make"]},{"Key":"function, like","Fragments":["so:"]},{"Key":" template\u003cclass","Fragments":["StringType\u003e","InputIt,","T\u003e"]},{"Key":"bool is_empty(","Fragments":["const"]},{"Key":"is_empty( const","Fragments":["StringType\u0026"]},{"Key":"const StringType\u0026","Fragments":["sentence"]},{"Key":"StringType\u0026 sentence","Fragments":[")"]},{"Key":"using std::begin;//You","Fragments":["may"]},{"Key":"std::begin;//You may","Fragments":["not"]},{"Key":"why I'm","Fragments":["doing"]},{"Key":"return std::none_of(","Fragments":["begin(sentence),"]},{"Key":"std::none_of( begin(sentence),","Fragments":["end(sentence),"]},{"Key":"begin(sentence), end(sentence),","Fragments":["is_blank);"]},{"Key":"works with","Fragments":["anything","those","test","the","many"]},{"Key":"has begin","Fragments":["and"]},{"Key":" Gotta","Fragments":["go,"]},{"Key":"Gotta go,","Fragments":["will"]},{"Key":"go, will","Fragments":["come"]},{"Key":" @katlyn","Fragments":["Got"]},{"Key":"@katlyn Got","Fragments":["it."]},{"Key":"about line","Fragments":["29."]},{"Key":"29. Unfortunately,","Fragments":["that's"]},{"Key":"Unfortunately, that's","Fragments":["as"]},{"Key":"that's as","Fragments":["far"]},{"Key":"as my","Fragments":["understanding","compiler.","Python","\"magic"]},{"Key":"understanding goes.","Fragments":["I"]},{"Key":"goes. I","Fragments":["took"]},{"Key":"am having","Fragments":["trouble","issues"]},{"Key":"having trouble","Fragments":["following","finding","getting"]},{"Key":"trouble following","Fragments":["it."]},{"Key":"I overstated","Fragments":["that"]},{"Key":"overstated that","Fragments":["slightly."]},{"Key":"that slightly.","Fragments":["It"]},{"Key":"slightly. It","Fragments":["has"]},{"Key":"It has","Fragments":["to","to","the","served","a"]},{"Key":"have begin","Fragments":["and"]},{"Key":"end iterators","Fragments":["and","you"]},{"Key":"and *iterator","Fragments":["needs"]},{"Key":"*iterator needs","Fragments":["to"]},{"Key":"a char.","Fragments":["std::wstring","I"]},{"Key":"char. std::wstring","Fragments":["would"]},{"Key":"std::wstring would","Fragments":["give"]},{"Key":"not getting","Fragments":["an","boost::regex"]},{"Key":"getting an","Fragments":["error"]},{"Key":"error from","Fragments":["the"]},{"Key":"compiler for","Fragments":["passing"]},{"Key":"for passing","Fragments":["the"]},{"Key":"type, that's","Fragments":["sort"]},{"Key":"that's sort","Fragments":["of"]},{"Key":"of true.","Fragments":["If"]},{"Key":"true. If","Fragments":["you"]},{"Key":"you tried","Fragments":["to","to","to","removing","removing","running"]},{"Key":"int into","Fragments":["that"]},{"Key":"error at","Fragments":["the"]},{"Key":"point where","Fragments":["you"]},{"Key":"call begin","Fragments":["(assuming"]},{"Key":"begin (assuming","Fragments":["there's"]},{"Key":"(assuming there's","Fragments":["no"]},{"Key":"no begin","Fragments":["declared"]},{"Key":"begin declared","Fragments":["for"]},{"Key":"declared for","Fragments":["int)."]},{"Key":"for int).","Fragments":["And"]},{"Key":"int). And","Fragments":["those"]},{"Key":"And those","Fragments":["types","range"]},{"Key":"those types","Fragments":["of","of"]},{"Key":"of errors","Fragments":["can"]},{"Key":"errors can","Fragments":["get"]},{"Key":"get *UGLY*,","Fragments":["which"]},{"Key":"*UGLY*, which","Fragments":["is"]},{"Key":"why they","Fragments":["just","make"]},{"Key":"they just","Fragments":["came"]},{"Key":"just came","Fragments":["out"]},{"Key":"out with","Fragments":["concepts","g++","the","any"]},{"Key":"with concepts","Fragments":["lite"]},{"Key":"concepts lite","Fragments":["-"]},{"Key":"lite -","Fragments":["so"]},{"Key":"declare upfront","Fragments":["what"]},{"Key":"upfront what","Fragments":["must"]},{"Key":"what must","Fragments":["be"]},{"Key":"be true","Fragments":["about"]},{"Key":"true about","Fragments":["the"]},{"Key":"type and","Fragments":["the","intent","still","storing"]},{"Key":"errors start","Fragments":["there"]},{"Key":"start there","Fragments":["rather"]},{"Key":"there rather","Fragments":["than"]},{"Key":"than inside","Fragments":["the"]},{"Key":"user actually","Fragments":["called"]},{"Key":"actually called","Fragments":["incorrectly."]},{"Key":"called incorrectly.","Fragments":["Most"]},{"Key":"incorrectly. Most","Fragments":["people"]},{"Key":"Most people","Fragments":["don't","would"]},{"Key":"use concepts","Fragments":["often,"]},{"Key":"concepts often,","Fragments":["because"]},{"Key":"often, because","Fragments":["you"]},{"Key":"to reading","Fragments":["errors"]},{"Key":"reading errors","Fragments":["nested"]},{"Key":"errors nested","Fragments":["one"]},{"Key":"nested one","Fragments":["or"]},{"Key":"two levels","Fragments":["deep."]},{"Key":"levels deep.","Fragments":["But"]},{"Key":"deep. But","Fragments":["something"]},{"Key":"But something","Fragments":["like"]},{"Key":"like Boost.Spirit","Fragments":["is"]},{"Key":"Boost.Spirit is","Fragments":["just"]},{"Key":"just begging","Fragments":["for"]},{"Key":"It's true","Fragments":["that"]},{"Key":"with auto","Fragments":["you","is"]},{"Key":"auto you","Fragments":["almost"]},{"Key":"you almost","Fragments":["always"]},{"Key":"almost always","Fragments":["know","assume"]},{"Key":"always know","Fragments":["what"]},{"Key":"what type","Fragments":["it","that","of","of"]},{"Key":"is standing","Fragments":["in"]},{"Key":"standing in","Fragments":["for,"]},{"Key":"in for,","Fragments":["and"]},{"Key":"for, and","Fragments":["if"]},{"Key":"out. First,","Fragments":["check"]},{"Key":"First, check","Fragments":["out"]},{"Key":"this smart","Fragments":["guy's"]},{"Key":"smart guy's","Fragments":["opinions"]},{"Key":"guy's opinions","Fragments":["on"]},{"Key":"opinions on","Fragments":["when","the"]},{"Key":"on when","Fragments":["to"]},{"Key":"use auto","Fragments":["and","type","for"]},{"Key":"Then I'd","Fragments":["just"]},{"Key":"I'd just","Fragments":["like","prefer"]},{"Key":"especially useful","Fragments":["if"]},{"Key":"expression you're","Fragments":["initializing"]},{"Key":"with involves","Fragments":["using"]},{"Key":"involves using","Fragments":["someone"]},{"Key":"using someone","Fragments":["else's"]},{"Key":"else's code","Fragments":["or"]},{"Key":"or depends","Fragments":["on"]},{"Key":"might reasonably","Fragments":["change"]},{"Key":"reasonably change","Fragments":["(like"]},{"Key":"change (like","Fragments":["the"]},{"Key":"a container).","Fragments":["Perhaps"]},{"Key":"container). Perhaps","Fragments":["one"]},{"Key":"Perhaps one","Fragments":["of"]},{"Key":"the strongest","Fragments":["use"]},{"Key":"strongest use","Fragments":["cases"]},{"Key":"for auto","Fragments":["is","in"]},{"Key":"auto is","Fragments":["with","very","determined"]},{"Key":"with Boost.Spirit","Fragments":["where"]},{"Key":"Boost.Spirit where","Fragments":["the"]},{"Key":"expression encodes","Fragments":["all"]},{"Key":"encodes all","Fragments":["the"]},{"Key":"information on","Fragments":["how","hand","setting"]},{"Key":"parser actually","Fragments":["works,"]},{"Key":"actually works,","Fragments":["and"]},{"Key":"works, and","Fragments":["when"]},{"Key":"and when","Fragments":["you","unreasonable","required.","that","they","you","to"]},{"Key":"it spelled","Fragments":["out"]},{"Key":"spelled out","Fragments":["it"]},{"Key":"go on","Fragments":["for"]},{"Key":"on for","Fragments":["pages.","each"]},{"Key":"for pages.","Fragments":["If"]},{"Key":"pages. If","Fragments":["you"]},{"Key":"change versions","Fragments":["of"]},{"Key":"of Boost","Fragments":["the","to_upper_copy"]},{"Key":"Boost the","Fragments":["type"]},{"Key":"type changes.","Fragments":["If"]},{"Key":"changes. If","Fragments":["you"]},{"Key":"change something","Fragments":["about"]},{"Key":"parser (oh","Fragments":["we"]},{"Key":"(oh we","Fragments":["need"]},{"Key":"we need","Fragments":["to","to","a","only","to","to","the","to"]},{"Key":"allow multiple","Fragments":["spaces"]},{"Key":"multiple spaces","Fragments":["here)"]},{"Key":"spaces here)","Fragments":["the"]},{"Key":"here) the","Fragments":["type"]},{"Key":"that variable","Fragments":["needs","is","during"]},{"Key":"variable needs","Fragments":["to"]},{"Key":"change (OK,","Fragments":["Spirit"]},{"Key":"(OK, Spirit","Fragments":["provides"]},{"Key":"Spirit provides","Fragments":["a"]},{"Key":"type erasure","Fragments":["class"]},{"Key":"erasure class","Fragments":["that"]},{"Key":"can hold","Fragments":["any"]},{"Key":"hold any","Fragments":["parser","value","strings"]},{"Key":"any parser","Fragments":["to"]},{"Key":"parser to","Fragments":["get"]},{"Key":"around this,","Fragments":["but"]},{"Key":"then you're","Fragments":["paying","guaranteed"]},{"Key":" \"Also,","Fragments":["is"]},{"Key":"\"Also, is","Fragments":["it"]},{"Key":" Meh,","Fragments":["either"]},{"Key":"Meh, either","Fragments":["way."]},{"Key":"either way.","Fragments":["Return","But"]},{"Key":"way. Return","Fragments":["them"]},{"Key":"Return them","Fragments":["as"]},{"Key":"const if","Fragments":["the"]},{"Key":"caller shouldn't","Fragments":["modify"]},{"Key":"shouldn't modify","Fragments":["them.","the"]},{"Key":"modify them.","Fragments":["In"]},{"Key":"them. In","Fragments":["your"]},{"Key":"your hey(),","Fragments":["though,"]},{"Key":"hey(), though,","Fragments":["(by"]},{"Key":"though, (by","Fragments":["the"]},{"Key":"way response","Fragments":["can"]},{"Key":"response can","Fragments":["never"]},{"Key":"be NULL","Fragments":["or"]},{"Key":"NULL or","Fragments":["in"]},{"Key":"in modern","Fragments":["syntax"]},{"Key":"modern syntax","Fragments":["nullptr)"]},{"Key":"syntax nullptr)","Fragments":["whether"]},{"Key":"nullptr) whether","Fragments":["response"]},{"Key":"whether response","Fragments":["is"]},{"Key":"response is","Fragments":["const","supposed","\"Whatever.\""]},{"Key":"const has","Fragments":["no"]},{"Key":"no impact","Fragments":["on"]},{"Key":"impact on","Fragments":["the"]},{"Key":"return -","Fragments":["the"]},{"Key":"return is","Fragments":["conceptually"]},{"Key":"is conceptually","Fragments":["a"]},{"Key":"conceptually a","Fragments":["copy"]},{"Key":"anyhow (even","Fragments":["if"]},{"Key":"compiler determines","Fragments":["that"]},{"Key":"determines that","Fragments":["it"]},{"Key":"move instead).","Fragments":["Which"]},{"Key":"instead). Which","Fragments":["is"]},{"Key":"mentioning -","Fragments":["and"]},{"Key":"a recommendation","Fragments":["just","in"]},{"Key":"recommendation just","Fragments":["pointing"]},{"Key":"just pointing","Fragments":["out"]},{"Key":"pointing out","Fragments":["that"]},{"Key":"option -","Fragments":["you"]},{"Key":"simply never","Fragments":["have"]},{"Key":"have response","Fragments":["and"]},{"Key":"those response","Fragments":["="]},{"Key":"response =","Fragments":["lines"]},{"Key":"= lines","Fragments":["with"]},{"Key":"lines with","Fragments":["return."]},{"Key":"with return.","Fragments":["That"]},{"Key":"return. That","Fragments":["works"]},{"Key":"That works","Fragments":["because"]},{"Key":"because string","Fragments":["has"]},{"Key":"from const","Fragments":["char*"]},{"Key":"char* (a","Fragments":["constructor"]},{"Key":"(a constructor","Fragments":["taking"]},{"Key":"constructor taking","Fragments":["one"]},{"Key":"taking one","Fragments":["argument"]},{"Key":"one argument","Fragments":["and","(still"]},{"Key":"not marked","Fragments":["explicit)","const```"]},{"Key":"marked explicit)","Fragments":["so"]},{"Key":"explicit) so","Fragments":["the"]},{"Key":"statement would","Fragments":["construct","be"]},{"Key":"would construct","Fragments":["the"]},{"Key":"construct the","Fragments":["string","verses"]},{"Key":"string right","Fragments":["then"]},{"Key":"Moving on","Fragments":["to"]},{"Key":" is_blank","Fragments":[":"]},{"Key":"is_blank :","Fragments":["As"]},{"Key":": As","Fragments":["a"]},{"Key":"a strictly","Fragments":["personal"]},{"Key":"strictly personal","Fragments":["preference"]},{"Key":"prefer returning","Fragments":["a"]},{"Key":"conditional rather","Fragments":["than"]},{"Key":"than testing","Fragments":["it"]},{"Key":"testing it","Fragments":["and"]},{"Key":"a literal.","Fragments":["i.e."]},{"Key":"return character","Fragments":["!="]},{"Key":"character !=","Fragments":["'"]},{"Key":"Also, it's","Fragments":["small","not","great","good"]},{"Key":"it's small","Fragments":["enough"]},{"Key":"enough and","Fragments":["used"]},{"Key":"used few","Fragments":["enough"]},{"Key":"few enough","Fragments":["places"]},{"Key":"enough places","Fragments":["that"]},{"Key":"it's fair","Fragments":["to"]},{"Key":"fair to","Fragments":["not"]},{"Key":"not declare","Fragments":["it"]},{"Key":"function at","Fragments":["all","the","all."]},{"Key":"rather a","Fragments":["lambda"]},{"Key":"lambda (which","Fragments":["is"]},{"Key":"another fantastic","Fragments":["use"]},{"Key":"fantastic use","Fragments":["of"]},{"Key":"auto, if","Fragments":["you"]},{"Key":"return std::none_of(sentence.begin(),","Fragments":["sentence.end(),","sentence.end(),"]},{"Key":"std::none_of(sentence.begin(), sentence.end(),","Fragments":["[](char","::isgraph);"]},{"Key":"sentence.end(), [](char","Fragments":["c){return"]},{"Key":"[](char c){return","Fragments":["c!='"]},{"Key":"c){return c!='","Fragments":["';}"]},{"Key":"c!=' ';}","Fragments":[");"]},{"Key":"What compiler","Fragments":["error"]},{"Key":"error did","Fragments":["you"]},{"Key":"trying set","Fragments":["sentence"]},{"Key":"sentence const","Fragments":["in"]},{"Key":"const in","Fragments":["is_a_yell?"]},{"Key":"in is_a_yell?","Fragments":["This"]},{"Key":"is_a_yell? This","Fragments":["compiled"]},{"Key":"This compiled","Fragments":["for"]},{"Key":"compiled for","Fragments":["me,"]},{"Key":"with or","Fragments":["without"]},{"Key":"or without","Fragments":["the"]},{"Key":"is_a_yell(const std::string\u0026","Fragments":["sentence)","sentence)"]},{"Key":"std::string\u0026 sentence)","Fragments":["{","const"]},{"Key":"bool cased","Fragments":["="]},{"Key":"cased =","Fragments":["false;","true;"]},{"Key":"(auto it=sentence.begin();","Fragments":["it"]},{"Key":"it=sentence.begin(); it","Fragments":["!="]},{"Key":"it !=","Fragments":["sentence.end();","last;"]},{"Key":"!= sentence.end();","Fragments":["it++)"]},{"Key":"sentence.end(); it++)","Fragments":["{"]},{"Key":"if (!","Fragments":["cased"]},{"Key":"(! cased","Fragments":["\u0026\u0026"]},{"Key":"cased \u0026\u0026","Fragments":["isupper(*it)){"]},{"Key":" cased","Fragments":["="]},{"Key":" Ooh,","Fragments":["I","consistent"]},{"Key":"Ooh, I","Fragments":["see"]},{"Key":"a legit","Fragments":["nitpick!"]},{"Key":"legit nitpick!","Fragments":["You"]},{"Key":"nitpick! You","Fragments":["don't"]},{"Key":"the sentence.empty()","Fragments":["case"]},{"Key":"sentence.empty() case","Fragments":["well."]},{"Key":"case well.","Fragments":[".back()"]},{"Key":"well. .back()","Fragments":["does"]},{"Key":".back() does","Fragments":["undefined"]},{"Key":"does undefined","Fragments":["behavior"]},{"Key":"behavior in","Fragments":["that"]},{"Key":"your comment's","Fragments":["question"]},{"Key":"comment's question","Fragments":["about"]},{"Key":"about const","Fragments":["parameter...","references."]},{"Key":"const parameter...","Fragments":["no"]},{"Key":"parameter... no","Fragments":["I"]},{"Key":"no I","Fragments":["think"]},{"Key":"did is","Fragments":["better.","probably"]},{"Key":"better. If","Fragments":["you're"]},{"Key":"it go","Fragments":["ahead"]},{"Key":"and leave","Fragments":["it","it"]},{"Key":"it non-const.","Fragments":["There"]},{"Key":"non-const. There","Fragments":["may"]},{"Key":"There may","Fragments":["be"]},{"Key":"modifying it,","Fragments":["but"]},{"Key":"will rewrite","Fragments":["it"]},{"Key":"rewrite it","Fragments":["a","in"]},{"Key":"little bit,","Fragments":["not"]},{"Key":"bit, not","Fragments":["using"]},{"Key":"using `accumulate`","Fragments":["but"]},{"Key":"`accumulate` but","Fragments":["a"]},{"Key":"simple for","Fragments":["loop","syntax","loop,","loop","loop","loop"]},{"Key":"and dismissing","Fragments":["the"]},{"Key":"dismissing the","Fragments":["error-check:"]},{"Key":" unsigned","Fragments":["int","int","int","int","int","int","int","long","long"]},{"Key":"int trinary::to_decimal(std::string","Fragments":["const"]},{"Key":"trinary::to_decimal(std::string const","Fragments":["\u0026tern_nmbr)"]},{"Key":"const \u0026tern_nmbr)","Fragments":["{"]},{"Key":"int result","Fragments":["="]},{"Key":"for (char","Fragments":["c","l","l","c"]},{"Key":": tern_nmbr)","Fragments":["{"]},{"Key":"+= c","Fragments":["-"]},{"Key":"c -","Fragments":["'0';"]},{"Key":"* Line","Fragments":["2"]},{"Key":"2 initialises","Fragments":["my"]},{"Key":"initialises my","Fragments":["accumulator,"]},{"Key":"my accumulator,","Fragments":["`result`"]},{"Key":"accumulator, `result`","Fragments":["to"]},{"Key":"`result` to","Fragments":["0."]},{"Key":"In line","Fragments":["5,","6,"]},{"Key":"line 5,","Fragments":["I"]},{"Key":"5, I","Fragments":["multiply"]},{"Key":"I multiply","Fragments":["everything"]},{"Key":"multiply everything","Fragments":["that"]},{"Key":"everything that","Fragments":["is","you'd"]},{"Key":"already summed","Fragments":["up"]},{"Key":"summed up","Fragments":["by"]},{"Key":"up by","Fragments":["3."]},{"Key":"by 3.","Fragments":["So"]},{"Key":"every iteration,","Fragments":["I","which","you"]},{"Key":"iteration, I","Fragments":["do","changed"]},{"Key":"I increase","Fragments":["the"]},{"Key":"the power","Fragments":["of","of","of"]},{"Key":"power of","Fragments":["three","4\"","two,","it.","2"]},{"Key":"three by","Fragments":["one."]},{"Key":"line 6,","Fragments":["I"]},{"Key":"6, I","Fragments":["do"]},{"Key":"simple conversion","Fragments":["from"]},{"Key":"from from","Fragments":["char","first"]},{"Key":"from char","Fragments":["to"]},{"Key":"actual value","Fragments":["and"]},{"Key":"least significant","Fragments":["part"]},{"Key":"significant part","Fragments":["to"]},{"Key":"part to","Fragments":["my"]},{"Key":"* After","Fragments":["finishing"]},{"Key":"After finishing","Fragments":["the"]},{"Key":"finishing the","Fragments":["loop,"]},{"Key":"I return","Fragments":["the","by-value"]},{"Key":"the `result`","Fragments":["in"]},{"Key":"`result` in","Fragments":["line"]},{"Key":"example we","Fragments":["have"]},{"Key":"only `\"1\"`","Fragments":["as"]},{"Key":"`\"1\"` as","Fragments":["input:"]},{"Key":"We have","Fragments":["only","a","lots"]},{"Key":"iteration in","Fragments":["the"]},{"Key":"loop. `result`","Fragments":["will"]},{"Key":"`result` will","Fragments":["be"]},{"Key":"be `0","Fragments":["*"]},{"Key":"`0 *","Fragments":["3"]},{"Key":"3 =","Fragments":["0`","0;","3;","9;","0;","3;","9;","30;","93;","279;"]},{"Key":"0` after","Fragments":["line"]},{"Key":"after line","Fragments":["5.","26."]},{"Key":"line 5.","Fragments":["Then"]},{"Key":"5. Then","Fragments":["add"]},{"Key":"Then add","Fragments":["the"]},{"Key":"current value","Fragments":["of"]},{"Key":"of `1`,","Fragments":["so"]},{"Key":"`1`, so","Fragments":["we"]},{"Key":"have `result`","Fragments":["="]},{"Key":"`result` =","Fragments":["`1`."]},{"Key":"= `1`.","Fragments":["Since"]},{"Key":"`1`. Since","Fragments":["we"]},{"Key":"single digit","Fragments":["we","in"]},{"Key":"digit we","Fragments":["exit"]},{"Key":"we exit","Fragments":["the"]},{"Key":"exit the","Fragments":["loop","loop","loop,"]},{"Key":"example input","Fragments":["is"]},{"Key":"1. `c","Fragments":["=","="]},{"Key":"`c =","Fragments":["'1';","'0';","'0';","'1';","'0';","'1';","'1';","'0';","'2';"]},{"Key":"= '1';","Fragments":["result","result","result","result"]},{"Key":"'1'; result","Fragments":["=","=","=","="]},{"Key":"= 0","Fragments":["*","+","*","+"]},{"Key":"0 *","Fragments":["3","3"]},{"Key":"0; result","Fragments":["=","="]},{"Key":"0 +","Fragments":["1","1"]},{"Key":"2. `c","Fragments":["=","="]},{"Key":"= '0';","Fragments":["result","result","result","result"]},{"Key":"'0'; result","Fragments":["=","=","=","="]},{"Key":"1 *","Fragments":["3","3"]},{"Key":"3; result","Fragments":["=","="]},{"Key":"+ 0","Fragments":["=","=","=","="]},{"Key":"0 =","Fragments":["3`","9`","3;`","93;`"]},{"Key":"3. `c","Fragments":["=","="]},{"Key":"= 9;","Fragments":["result","result"]},{"Key":"9; result","Fragments":["=","="]},{"Key":"= 9","Fragments":["+","+"]},{"Key":"return result","Fragments":["of"]},{"Key":"4. `c","Fragments":["="]},{"Key":"= 10","Fragments":["*"]},{"Key":"10 *","Fragments":["3"]},{"Key":"= 30;","Fragments":["result"]},{"Key":"30; result","Fragments":["="]},{"Key":"= 30","Fragments":["+"]},{"Key":"30 +","Fragments":["1"]},{"Key":"5. `c","Fragments":["="]},{"Key":"= 31","Fragments":["*"]},{"Key":"31 *","Fragments":["3"]},{"Key":"= 93;","Fragments":["result"]},{"Key":"93; result","Fragments":["="]},{"Key":"= 93","Fragments":["+","*"]},{"Key":"93 +","Fragments":["0"]},{"Key":"6. `c","Fragments":["="]},{"Key":"= '2';","Fragments":["result"]},{"Key":"'2'; result","Fragments":["="]},{"Key":"93 *","Fragments":["3"]},{"Key":"= 279;","Fragments":["result"]},{"Key":"279; result","Fragments":["="]},{"Key":"= 279","Fragments":["+"]},{"Key":"279 +","Fragments":["2"]},{"Key":"2 =","Fragments":["281;`"]},{"Key":" Return","Fragments":["`281`"]},{"Key":"Return `281`","Fragments":["as"]},{"Key":"`281` as","Fragments":["result."]},{"Key":"as result.","Fragments":["You"]},{"Key":"result. You","Fragments":["might"]},{"Key":"might see,","Fragments":["that"]},{"Key":"last step","Fragments":["we"]},{"Key":"step we","Fragments":["have"]},{"Key":"have something","Fragments":["like","like:","to"]},{"Key":"hope this","Fragments":["explanation"]},{"Key":"this explanation","Fragments":["helps."]},{"Key":"your careful","Fragments":["reply."]},{"Key":"careful reply.","Fragments":["It's"]},{"Key":"reply. It's","Fragments":["much"]},{"Key":"much clearer","Fragments":["what","IMHO","and"]},{"Key":"is happening","Fragments":["now."]},{"Key":"happening now.","Fragments":["I"]},{"Key":"now. I","Fragments":["presume","kept"]},{"Key":"I presume","Fragments":["the"]},{"Key":"presume the","Fragments":["use"]},{"Key":"of ```std::accumulate```","Fragments":["is"]},{"Key":"```std::accumulate``` is","Fragments":["more"]},{"Key":"loop, as","Fragments":["your"]},{"Key":"method doesn't","Fragments":["remove"]},{"Key":"doesn't remove","Fragments":["the"]},{"Key":"a summed","Fragments":["accumulator?"]},{"Key":"summed accumulator?","Fragments":["I'm"]},{"Key":"accumulator? I'm","Fragments":["sure"]},{"Key":"an efficiency","Fragments":["improvement","of"]},{"Key":"efficiency improvement","Fragments":["over"]},{"Key":"my submission","Fragments":["in","for","on"]},{"Key":"submission in","Fragments":["other"]},{"Key":"other areas","Fragments":["though."]},{"Key":"Thanks again.","Fragments":[":)",":)"]},{"Key":"of `std::accumulate()`","Fragments":["in","might"]},{"Key":"`std::accumulate()` in","Fragments":["my"]},{"Key":"my real","Fragments":["solution"]},{"Key":"real solution","Fragments":["comes"]},{"Key":"solution comes","Fragments":["from"]},{"Key":"feel much","Fragments":["more"]},{"Key":"more home","Fragments":["in"]},{"Key":"home in","Fragments":["functional"]},{"Key":"in functional","Fragments":["programming"]},{"Key":"functional programming","Fragments":["(describe","features","approaches.","feel"]},{"Key":"programming (describe","Fragments":["**what**"]},{"Key":"(describe **what**","Fragments":["to"]},{"Key":"**what** to","Fragments":["do,"]},{"Key":"to do,","Fragments":["not","and","so"]},{"Key":"do, not","Fragments":["**how**"]},{"Key":"not **how**","Fragments":["to"]},{"Key":"**how** to","Fragments":["do),"]},{"Key":"to do),","Fragments":["so"]},{"Key":"do), so","Fragments":["I"]},{"Key":"the fp-like","Fragments":["stuff"]},{"Key":"fp-like stuff","Fragments":["that"]},{"Key":"stuff that","Fragments":["was","not"]},{"Key":"C++ in","Fragments":["2011.","a","a"]},{"Key":"`std::accumulate()` might","Fragments":["look"]},{"Key":"might look","Fragments":["something","only","nice,","for"]},{"Key":"look something","Fragments":["like"]},{"Key":"template\u003cclass InputIt,","Fragments":["class"]},{"Key":"InputIt, class","Fragments":["T,"]},{"Key":"class T,","Fragments":["class"]},{"Key":"T, class","Fragments":["BinaryOperation\u003e"]},{"Key":" T","Fragments":["accumulate(InputIt","acc"]},{"Key":"T accumulate(InputIt","Fragments":["first,"]},{"Key":"accumulate(InputIt first,","Fragments":["InputIt"]},{"Key":"first, InputIt","Fragments":["last,"]},{"Key":"InputIt last,","Fragments":["T"]},{"Key":"last, T","Fragments":["init,"]},{"Key":" BinaryOperation","Fragments":["op)"]},{"Key":"BinaryOperation op)","Fragments":["{"]},{"Key":"T acc","Fragments":["{init};"]},{"Key":"for (InputIt","Fragments":["it"]},{"Key":"(InputIt it","Fragments":["="]},{"Key":"it =","Fragments":["first;","s.cend();","sentence.begin();","acc.find(word);"]},{"Key":"= first;","Fragments":["it"]},{"Key":"first; it","Fragments":["!="]},{"Key":"!= last;","Fragments":["++it)"]},{"Key":"last; ++it)","Fragments":["{"]},{"Key":" acc","Fragments":["="]},{"Key":"acc =","Fragments":["op(acc,"]},{"Key":"= op(acc,","Fragments":["*it);"]},{"Key":"So basically,","Fragments":["it"]},{"Key":"basically, it","Fragments":["is"]},{"Key":"function, that","Fragments":["is","is"]},{"Key":"built exactly","Fragments":["like"]},{"Key":"exactly like","Fragments":["my"]},{"Key":"my stripped","Fragments":["one"]},{"Key":"stripped one","Fragments":["above,"]},{"Key":"one above,","Fragments":["but"]},{"Key":"above, but","Fragments":["more","I","were"]},{"Key":"Your logic","Fragments":["for"]},{"Key":"logic for","Fragments":["YELLINg","the","that","choosing"]},{"Key":"for YELLINg","Fragments":["is"]},{"Key":"YELLINg is","Fragments":["pretty"]},{"Key":"pretty sound,","Fragments":["but"]},{"Key":"sound, but","Fragments":["if"]},{"Key":"if added","Fragments":["as"]},{"Key":"added as","Fragments":["a"]},{"Key":"really narrow","Fragments":["the"]},{"Key":"narrow the","Fragments":["correct","scope","scope"]},{"Key":"correct solution","Fragments":["to"]},{"Key":"the exercise,","Fragments":["don't"]},{"Key":"exercise, don't","Fragments":["know"]},{"Key":"an objective.","Fragments":["Maybe"]},{"Key":"objective. Maybe","Fragments":["do"]},{"Key":"Maybe do","Fragments":["a"]},{"Key":"a pull","Fragments":["request","request"]},{"Key":"pull request","Fragments":["to","to"]},{"Key":"request to","Fragments":["see","modify/clarify/extend/get","response."]},{"Key":"if anybody","Fragments":["agrees"]},{"Key":"anybody agrees","Fragments":["with"]},{"Key":"agrees with","Fragments":["this?"]},{"Key":"Great logic","Fragments":["right"]},{"Key":"logic right","Fragments":["there"]},{"Key":"right there","Fragments":["at"]},{"Key":"at point","Fragments":["3,"]},{"Key":"point 3,","Fragments":["now"]},{"Key":"3, now","Fragments":["I"]},{"Key":"it clearly.","Fragments":["If"]},{"Key":"clearly. If","Fragments":["the"]},{"Key":"the punct","Fragments":["equals"]},{"Key":"punct equals","Fragments":["the"]},{"Key":"equals the","Fragments":["content"]},{"Key":"of message.rend()","Fragments":["it"]},{"Key":"message.rend() it","Fragments":["means"]},{"Key":"it traversed","Fragments":["the"]},{"Key":"traversed the","Fragments":["complete"]},{"Key":"complete message","Fragments":["from"]},{"Key":"message from","Fragments":["back"]},{"Key":"from back","Fragments":["to"]},{"Key":"front and","Fragments":["didn't"]},{"Key":"and didn't","Fragments":["find","actually","backport"]},{"Key":"find any","Fragments":["punctuation","factor."]},{"Key":"any punctuation","Fragments":["sign.","with"]},{"Key":"punctuation sign.","Fragments":["But"]},{"Key":"sign. But","Fragments":["what"]},{"Key":"what happens","Fragments":["if","with","here","if","is","when","during"]},{"Key":"happens if","Fragments":["the","multiple","we","the","it's","the","you"]},{"Key":"the ?","Fragments":["is"]},{"Key":"example something","Fragments":["like"]},{"Key":" \"Ending","Fragments":["with"]},{"Key":"\"Ending with","Fragments":["a"]},{"Key":"? means","Fragments":["a"]},{"Key":"The example","Fragments":["you"]},{"Key":"example you","Fragments":["just"]},{"Key":"gave ends","Fragments":["in"]},{"Key":"ends in","Fragments":["a","the","the"]},{"Key":"a '.'","Fragments":["which","so"]},{"Key":"'.' which","Fragments":["ispunct,"]},{"Key":"which ispunct,","Fragments":["so"]},{"Key":"ispunct, so","Fragments":["it"]},{"Key":"would stop","Fragments":["there","the"]},{"Key":"stop there","Fragments":["and"]},{"Key":"a '?'.","Fragments":["Omitting"]},{"Key":"'?'. Omitting","Fragments":["that,"]},{"Key":"Omitting that,","Fragments":["though,"]},{"Key":"though, you","Fragments":["get","run","don't"]},{"Key":"my subtle","Fragments":["hint"]},{"Key":"subtle hint","Fragments":["at"]},{"Key":"at an","Fragments":["example"]},{"Key":"example where","Fragments":["it","that"]},{"Key":"it differs","Fragments":["from"]},{"Key":"differs from","Fragments":["the"]},{"Key":"the common","Fragments":["interpretation:","thing"]},{"Key":"common interpretation:","Fragments":["\"Should"]},{"Key":"interpretation: \"Should","Fragments":["this"]},{"Key":"\"Should this","Fragments":["be"]},{"Key":"The case","Fragments":["we"]},{"Key":"we really","Fragments":["want","only"]},{"Key":"to cover","Fragments":["there","them","a","his"]},{"Key":"cover there","Fragments":["is"]},{"Key":"has trailing","Fragments":["spaces,"]},{"Key":"trailing spaces,","Fragments":["newlines,","but"]},{"Key":"spaces, newlines,","Fragments":["carriage"]},{"Key":"newlines, carriage","Fragments":["returns,"]},{"Key":"carriage returns,","Fragments":["control"]},{"Key":"returns, control","Fragments":["characters,"]},{"Key":"control characters,","Fragments":["combining"]},{"Key":"characters, combining","Fragments":["characters,"]},{"Key":"combining characters,","Fragments":["and"]},{"Key":"on. That's","Fragments":["why"]},{"Key":"thought scanning","Fragments":["for"]},{"Key":"scanning for","Fragments":["any"]},{"Key":"any C-locale","Fragments":["punctuation"]},{"Key":"C-locale punctuation","Fragments":["makes"]},{"Key":"punctuation makes","Fragments":["sense,"]},{"Key":"makes sense,","Fragments":["but"]},{"Key":"sense, but","Fragments":["it"]},{"Key":"does have","Fragments":["some","that","the","a"]},{"Key":" \"Why!?","Fragments":["Do"]},{"Key":"\"Why!? Do","Fragments":["not"]},{"Key":"Do not","Fragments":["do","put","convert"]},{"Key":"not do","Fragments":["that\"","that"]},{"Key":"do that\"","Fragments":["//as"]},{"Key":"that\" //as","Fragments":["discussed"]},{"Key":" \"No","Fragments":["unicode‽\""]},{"Key":"\"No unicode‽\"","Fragments":["//because"]},{"Key":"unicode‽\" //because","Fragments":["ispunct"]},{"Key":"//because ispunct","Fragments":["looks"]},{"Key":"ispunct looks","Fragments":["at"]},{"Key":"at one","Fragments":["byte"]},{"Key":"one byte","Fragments":["at"]},{"Key":"byte at","Fragments":["a"]},{"Key":"a time,","Fragments":["it","and"]},{"Key":"doesn't see","Fragments":["one"]},{"Key":"see one","Fragments":["punctuation"]},{"Key":"one punctuation","Fragments":["mark"]},{"Key":"punctuation mark","Fragments":["it"]},{"Key":"mark it","Fragments":["sees"]},{"Key":"it sees","Fragments":["3","a"]},{"Key":"sees 3","Fragments":["\"characters\""]},{"Key":"3 \"characters\"","Fragments":["it"]},{"Key":"\"characters\" it","Fragments":["doesn't"]},{"Key":"recognize and","Fragments":["skips"]},{"Key":"and skips","Fragments":["right"]},{"Key":"skips right","Fragments":["over"]},{"Key":"right over","Fragments":["it"]},{"Key":" \"And","Fragments":["yet?̮"]},{"Key":"\"And yet?̮","Fragments":["\""]},{"Key":"yet?̮ \"","Fragments":["//That"]},{"Key":"\" //That","Fragments":["last"]},{"Key":"//That last","Fragments":["mark"]},{"Key":"last mark","Fragments":["is"]},{"Key":"mark is","Fragments":["a","considered"]},{"Key":"a combining","Fragments":["code","codepoint"]},{"Key":"combining code","Fragments":["point,"]},{"Key":"code point,","Fragments":["it"]},{"Key":"point, it","Fragments":["should"]},{"Key":"written as","Fragments":["one","one","```for("]},{"Key":"one glyph","Fragments":["with"]},{"Key":"glyph with","Fragments":["the"]},{"Key":"the ?,","Fragments":["so"]},{"Key":"?, so","Fragments":["clearly"]},{"Key":"so clearly","Fragments":["this"]},{"Key":"clearly this","Fragments":["is"]},{"Key":"a question.","Fragments":["And","Since","This","But"]},{"Key":"question. And","Fragments":["yet"]},{"Key":"And yet","Fragments":["my"]},{"Key":"yet my","Fragments":["algorithm"]},{"Key":"algorithm will","Fragments":["stop,"]},{"Key":"will stop,","Fragments":["see"]},{"Key":"stop, see","Fragments":["the"]},{"Key":"last byte","Fragments":["of"]},{"Key":"byte of","Fragments":["that"]},{"Key":"code point","Fragments":["(in"]},{"Key":"point (in","Fragments":["UTF-8"]},{"Key":"(in UTF-8","Fragments":["at"]},{"Key":"UTF-8 at","Fragments":["least)"]},{"Key":"least) is","Fragments":["0x2e"]},{"Key":"is 0x2e","Fragments":["..."]},{"Key":"0x2e ...","Fragments":["hey"]},{"Key":"... hey","Fragments":["I"]},{"Key":"hey I","Fragments":["found"]},{"Key":"'.' so","Fragments":["that's"]},{"Key":"that's ispunct","Fragments":["and"]},{"Key":"ispunct and","Fragments":["not"]},{"Key":"not '?'","Fragments":["..."]},{"Key":"'?' ...","Fragments":["not"]},{"Key":"... not","Fragments":["a"]},{"Key":"how meaningful","Fragments":["and"]},{"Key":"meaningful and","Fragments":["readable"]},{"Key":"readable things","Fragments":["become"]},{"Key":"things become","Fragments":["because"]},{"Key":"become because","Fragments":["of"]},{"Key":"the macros.","Fragments":["But"]},{"Key":"macros. But","Fragments":["I"]},{"Key":"used macros","Fragments":["to"]},{"Key":"macros to","Fragments":["accomplish"]},{"Key":"to accomplish","Fragments":["it.","the","the"]},{"Key":"accomplish it.","Fragments":["Why"]},{"Key":"it. Why","Fragments":["not"]},{"Key":"have 3","Fragments":["const","different","different","different","different"]},{"Key":"3 const","Fragments":["strings"]},{"Key":"const strings","Fragments":["with","instead"]},{"Key":"strings with","Fragments":["those","a"]},{"Key":"with those","Fragments":["names?","numbers.","so"]},{"Key":"those names?","Fragments":["You"]},{"Key":"names? You","Fragments":["don't"]},{"Key":"getting anything","Fragments":["out"]},{"Key":"anything out","Fragments":["of"]},{"Key":"One other","Fragments":["point","thing","thought;"]},{"Key":"that bugs","Fragments":["me"]},{"Key":"bugs me","Fragments":["a"]},{"Key":"bit, you're","Fragments":["using"]},{"Key":"using `verse_index`","Fragments":["as"]},{"Key":"`verse_index` as","Fragments":["your"]},{"Key":"your iteration","Fragments":["variable","variable","to"]},{"Key":"iteration variable","Fragments":["for","outside","explicitly"]},{"Key":"your `for`","Fragments":["loop."]},{"Key":"`for` loop.","Fragments":["It","I'm"]},{"Key":"doesn't cause","Fragments":["any","conflicts"]},{"Key":"cause any","Fragments":["problems"]},{"Key":"any problems","Fragments":["in","with"]},{"Key":"problems in","Fragments":["this","general.","your"]},{"Key":"this example,","Fragments":["and"]},{"Key":"example, and","Fragments":["I"]},{"Key":"can totally","Fragments":["see"]},{"Key":"totally see","Fragments":["why"]},{"Key":"did it.","Fragments":["It's","If","I"]},{"Key":"an unusual","Fragments":["pattern."]},{"Key":"unusual pattern.","Fragments":["I"]},{"Key":"pattern. I","Fragments":["would"]},{"Key":"be concerned","Fragments":["about"]},{"Key":"in production","Fragments":["code"]},{"Key":"production code","Fragments":["where",":)","-"]},{"Key":"code where","Fragments":["someone","I"]},{"Key":"where someone","Fragments":["reading","yells"]},{"Key":"might expect","Fragments":["`verse_index`"]},{"Key":"expect `verse_index`","Fragments":["to"]},{"Key":"value after","Fragments":["the"]},{"Key":"the `for`","Fragments":["loop","loop","loop.\u003c/li\u003e\u003c/ul\u003e","loops,","and","statement","in"]},{"Key":"you miss","Fragments":["to"]},{"Key":"miss to","Fragments":["submit"]},{"Key":"a rather","Fragments":["long","minor","unusual","elegant","roundabout"]},{"Key":"rather long","Fragments":["one."]},{"Key":"long one.","Fragments":["The"]},{"Key":"one. The","Fragments":["choice","old"]},{"Key":"choice I","Fragments":["made"]},{"Key":"generate all","Fragments":["the","the"]},{"Key":"class data","Fragments":["when"]},{"Key":"data when","Fragments":["the"]},{"Key":"is called,","Fragments":["rather","then"]},{"Key":"called, rather","Fragments":["than"]},{"Key":"than when","Fragments":["the"]},{"Key":"methods are","Fragments":["called.","called","dependent"]},{"Key":"called. Clearly","Fragments":["there"]},{"Key":"Clearly there","Fragments":["is"]},{"Key":"some redundancy","Fragments":["here,"]},{"Key":"redundancy here,","Fragments":["because"]},{"Key":"here, because","Fragments":["data"]},{"Key":"because data","Fragments":["that"]},{"Key":"data that","Fragments":["is","supports"]},{"Key":"not nessecarily","Fragments":["required"]},{"Key":"nessecarily required","Fragments":["for"]},{"Key":"required for","Fragments":["the"]},{"Key":"method calls","Fragments":["used"]},{"Key":"calls used","Fragments":["will"]},{"Key":"used will","Fragments":["be"]},{"Key":"be generated.","Fragments":["The"]},{"Key":"generated. The","Fragments":["converse"]},{"Key":"The converse","Fragments":["is"]},{"Key":"converse is","Fragments":["that"]},{"Key":"simpler to","Fragments":["read","accomplish","follow"]},{"Key":"and understand,","Fragments":["as","without"]},{"Key":"understand, as","Fragments":["a"]},{"Key":"a load","Fragments":["of"]},{"Key":"load of","Fragments":["checks"]},{"Key":"of checks","Fragments":["in","to"]},{"Key":"each method","Fragments":["to"]},{"Key":"the prerequisite","Fragments":["data"]},{"Key":"prerequisite data","Fragments":["had"]},{"Key":"data had","Fragments":["been"]},{"Key":"had been","Fragments":["generated","in","pointed"]},{"Key":"been generated","Fragments":["would"]},{"Key":"generated would","Fragments":["be"]},{"Key":"required if","Fragments":["data"]},{"Key":"if data","Fragments":["is"]},{"Key":"data is","Fragments":["generated","stored"]},{"Key":"is generated","Fragments":["on"]},{"Key":"generated on","Fragments":["method"]},{"Key":"on method","Fragments":["call."]},{"Key":"Is raw_in","Fragments":["ever"]},{"Key":"raw_in ever","Fragments":["used"]},{"Key":"used other","Fragments":["than"]},{"Key":"in process_raw_in","Fragments":["(called"]},{"Key":"process_raw_in (called","Fragments":["from"]},{"Key":"(called from","Fragments":["the"]},{"Key":"the constructor)?","Fragments":["If"]},{"Key":"constructor)? If","Fragments":["not"]},{"Key":"If not","Fragments":["you","possible,"]},{"Key":"not you","Fragments":["might"]},{"Key":"might pass","Fragments":["it"]},{"Key":"to process_raw_in","Fragments":["as"]},{"Key":"process_raw_in as","Fragments":["a"]},{"Key":"std::string\u0026 and","Fragments":["save"]},{"Key":"and save","Fragments":["building","yourself","1/2"]},{"Key":"save building","Fragments":["a"]},{"Key":"building a","Fragments":["copy"]},{"Key":"it (and","Fragments":["saving","function"]},{"Key":"(and saving","Fragments":["that"]},{"Key":"saving that","Fragments":["copy"]},{"Key":"copy forever).","Fragments":["Or"]},{"Key":"forever). Or","Fragments":["store"]},{"Key":"Or store","Fragments":["it"]},{"Key":"in unencrypted","Fragments":["and"]},{"Key":"unencrypted and","Fragments":["remove"]},{"Key":" @jaida","Fragments":["Yes,"]},{"Key":"@jaida Yes,","Fragments":["I"]},{"Key":"did think","Fragments":["about","of"]},{"Key":"that, and","Fragments":["for"]},{"Key":"raw input.","Fragments":["I"]},{"Key":"in future","Fragments":["though.","versions"]},{"Key":"future though.","Fragments":["Another"]},{"Key":"though. Another","Fragments":["unneeded"]},{"Key":"Another unneeded","Fragments":["variable"]},{"Key":"unneeded variable","Fragments":["stored"]},{"Key":"variable stored","Fragments":["in"]},{"Key":"is ```std::vector\u003cstd::string\u003e","Fragments":["en_segs```"]},{"Key":"```std::vector\u003cstd::string\u003e en_segs```","Fragments":["(the"]},{"Key":"en_segs``` (the","Fragments":["vector"]},{"Key":"(the vector","Fragments":["of"]},{"Key":"in ```cipher_out```),","Fragments":["which"]},{"Key":"```cipher_out```), which","Fragments":["is"]},{"Key":"suite, but","Fragments":["I","in"]},{"Key":"thought there","Fragments":["was"]},{"Key":"nice symmetry","Fragments":["to"]},{"Key":"symmetry to","Fragments":["storing"]},{"Key":"to storing","Fragments":["it."]},{"Key":"storing it.","Fragments":[":)"]},{"Key":"should point","Fragments":["out","1"]},{"Key":"the operations","Fragments":["are"]},{"Key":"are quick","Fragments":["here,"]},{"Key":"quick here,","Fragments":["doing"]},{"Key":"here, doing","Fragments":["the"]},{"Key":"the unnessecary","Fragments":["work"]},{"Key":"unnessecary work","Fragments":["is"]},{"Key":"work is","Fragments":["not"]},{"Key":"of several","Fragments":["real"]},{"Key":"several real","Fragments":["world"]},{"Key":"real world","Fragments":["examples"]},{"Key":"world examples","Fragments":["that"]},{"Key":"examples that","Fragments":["I've","the"]},{"Key":"I've worked","Fragments":["on","with"]},{"Key":"where doing","Fragments":["all","the"]},{"Key":"doing all","Fragments":["the"]},{"Key":"really stupid","Fragments":["thing"]},{"Key":"stupid thing","Fragments":["to"]},{"Key":"do, and","Fragments":["it","if"]},{"Key":"makes much","Fragments":["more","more"]},{"Key":"check whats","Fragments":["been"]},{"Key":"whats been","Fragments":["done"]},{"Key":"done when","Fragments":["methods"]},{"Key":"when methods","Fragments":["are"]},{"Key":"are called","Fragments":["and","by"]},{"Key":"called and","Fragments":["generate","that's"]},{"Key":"and generate","Fragments":["only"]},{"Key":"generate only","Fragments":["needed"]},{"Key":"obviously very","Fragments":["experienced"]},{"Key":"very experienced","Fragments":["with"]},{"Key":"experienced with","Fragments":["c++."]},{"Key":"with c++.","Fragments":["What"]},{"Key":"c++. What","Fragments":["do"]},{"Key":"code performance","Fragments":["vs"]},{"Key":"performance vs","Fragments":["maintainability"]},{"Key":"vs maintainability","Fragments":["issue"]},{"Key":"maintainability issue","Fragments":["in"]},{"Key":"Very might","Fragments":["be"]},{"Key":"it's fine.","Fragments":["I"]},{"Key":"constructor as","Fragments":["well.","deleted","it","well"]},{"Key":"well. I've","Fragments":["also"]},{"Key":"also definitely","Fragments":["run"]},{"Key":"definitely run","Fragments":["into"]},{"Key":"run into","Fragments":["situations"]},{"Key":"into situations","Fragments":["where","where"]},{"Key":"be crazy,","Fragments":["but"]},{"Key":"it's work","Fragments":["that"]},{"Key":"work that","Fragments":["_has_"]},{"Key":"that _has_","Fragments":["to"]},{"Key":"_has_ to","Fragments":["be"]},{"Key":"meaningful usage","Fragments":["and"]},{"Key":"usage and","Fragments":["there's"]},{"Key":"and there's","Fragments":["not","plenty","something","lots"]},{"Key":"there's not","Fragments":["something","large"]},{"Key":"not something","Fragments":["special"]},{"Key":"something special","Fragments":["about"]},{"Key":"called, then","Fragments":["you"]},{"Key":"well do","Fragments":["it"]},{"Key":"it upfront.","Fragments":["You"]},{"Key":"upfront. You","Fragments":["can"]},{"Key":"get your","Fragments":["errors","version","last"]},{"Key":"your errors","Fragments":["more","rather"]},{"Key":"errors more","Fragments":["promptly"]},{"Key":"more promptly","Fragments":["and"]},{"Key":"promptly and","Fragments":["possibly"]},{"Key":"possibly save","Fragments":["work"]},{"Key":"save work","Fragments":["in"]},{"Key":"error case,","Fragments":["and"]},{"Key":"case, and","Fragments":["also","another","makes","once"]},{"Key":"also maybe","Fragments":["save"]},{"Key":"save checks","Fragments":["in"]},{"Key":"the members","Fragments":["like","of,"]},{"Key":"members like","Fragments":["you"]},{"Key":"were talking","Fragments":["about."]},{"Key":"I said","Fragments":["\"something"]},{"Key":"said \"something","Fragments":["special\""]},{"Key":"\"something special\"","Fragments":["I"]},{"Key":"special\" I","Fragments":["was"]},{"Key":"my former","Fragments":["employer.","(wrong)"]},{"Key":"former employer.","Fragments":["Most"]},{"Key":"employer. Most","Fragments":["of"]},{"Key":"of their","Fragments":["classes","time","contents"]},{"Key":"classes are","Fragments":["constructed"]},{"Key":"are constructed","Fragments":["sequentially"]},{"Key":"constructed sequentially","Fragments":["on"]},{"Key":"sequentially on","Fragments":["the"]},{"Key":"main thread","Fragments":["at"]},{"Key":"thread at","Fragments":["normal","realtime"]},{"Key":"at normal","Fragments":["priority"]},{"Key":"normal priority","Fragments":["while"]},{"Key":"priority while","Fragments":["pretty"]},{"Key":"while pretty","Fragments":["much"]},{"Key":"called on","Fragments":["a","word_","word_","empty","an"]},{"Key":"a dedicated","Fragments":["thread","object"]},{"Key":"dedicated thread","Fragments":["at"]},{"Key":"at realtime","Fragments":["priority"]},{"Key":"realtime priority","Fragments":["in"]},{"Key":"priority in","Fragments":["parallel"]},{"Key":"in parallel","Fragments":["with"]},{"Key":"parallel with","Fragments":["other"]},{"Key":"other objects'.","Fragments":["In"]},{"Key":"objects'. In","Fragments":["that"]},{"Key":"case those","Fragments":["considerations"]},{"Key":"those considerations","Fragments":["often"]},{"Key":"considerations often","Fragments":["dominate"]},{"Key":"often dominate","Fragments":["over"]},{"Key":"over other","Fragments":["concerns"]},{"Key":"other concerns","Fragments":["as"]},{"Key":"concerns as","Fragments":["to"]},{"Key":"where this","Fragments":["code"]},{"Key":"or that","Fragments":["code"]},{"Key":" @frieda","Fragments":["Cool,"]},{"Key":"@frieda Cool,","Fragments":["thanks"]},{"Key":"thanks very","Fragments":["much"]},{"Key":"comments. Another","Fragments":["thing"]},{"Key":"not all","Fragments":["that","about"]},{"Key":"that happy","Fragments":["about"]},{"Key":"the ```process_encrypted```","Fragments":["function,"]},{"Key":"```process_encrypted``` function,","Fragments":["as"]},{"Key":"function, as","Fragments":["it"]},{"Key":"is picking","Fragments":["chars","up"]},{"Key":"picking chars","Fragments":["from"]},{"Key":"are stored","Fragments":["continuously","in"]},{"Key":"stored continuously","Fragments":["in"]},{"Key":"continuously in","Fragments":["memory"]},{"Key":"memory from","Fragments":["non","the"]},{"Key":"from non","Fragments":["consecutive"]},{"Key":"non consecutive","Fragments":["points"]},{"Key":"consecutive points","Fragments":["(and"]},{"Key":"points (and","Fragments":["those"]},{"Key":"(and those","Fragments":["strings"]},{"Key":"also continuous","Fragments":["in"]},{"Key":"continuous in","Fragments":["memory)."]},{"Key":"in memory).","Fragments":["Is"]},{"Key":"memory). Is","Fragments":["there"]},{"Key":"believe process_encrypted","Fragments":["is"]},{"Key":"process_encrypted is","Fragments":["equivalent"]},{"Key":"a matrix","Fragments":["transpose."]},{"Key":"matrix transpose.","Fragments":["And"]},{"Key":"transpose. And","Fragments":["honestly"]},{"Key":"And honestly","Fragments":["what"]},{"Key":"honestly what","Fragments":["you"]},{"Key":"probably what","Fragments":["most"]},{"Key":"what most","Fragments":["people"]},{"Key":"would do,","Fragments":["I"]},{"Key":"do, I","Fragments":["think."]},{"Key":"think. So","Fragments":["the"]},{"Key":"mean faster","Fragments":["my"]},{"Key":"faster my","Fragments":["best"]},{"Key":"my best","Fragments":["recommendation"]},{"Key":"best recommendation","Fragments":["is"]},{"Key":"recommendation is","Fragments":["calling"]},{"Key":"calling reserve","Fragments":["before"]},{"Key":"reserve before","Fragments":["the"]},{"Key":"loop. You","Fragments":["should","detect","don't","don't"]},{"Key":"to efficiently","Fragments":["calculate"]},{"Key":"efficiently calculate","Fragments":["the"]},{"Key":"final size,","Fragments":["and"]},{"Key":"size, and","Fragments":["that","instead"]},{"Key":"that ensures","Fragments":["you'll"]},{"Key":"ensures you'll","Fragments":["have"]},{"Key":"one allocation","Fragments":["for","(not"]},{"Key":"vector no","Fragments":["matter"]},{"Key":"matter how","Fragments":["big","you"]},{"Key":"big it","Fragments":["needs"]},{"Key":"it needs","Fragments":["to","to","to"]},{"Key":"to grow.","Fragments":["I"]},{"Key":"grow. I","Fragments":["guess"]},{"Key":"could up-front","Fragments":["size"]},{"Key":"up-front size","Fragments":["the"]},{"Key":"size the","Fragments":["strings"]},{"Key":"well. Beyond","Fragments":["that..."]},{"Key":"Beyond that...","Fragments":["I"]},{"Key":"that... I","Fragments":["don't"]},{"Key":"avoid blowing","Fragments":["away"]},{"Key":"blowing away","Fragments":["the"]},{"Key":"the cache","Fragments":["by","you"]},{"Key":"cache by","Fragments":["traversing"]},{"Key":"by traversing","Fragments":["the"]},{"Key":"the \"wrong\"","Fragments":["order,"]},{"Key":"\"wrong\" order,","Fragments":["at"]},{"Key":"order, at","Fragments":["least"]},{"Key":"not with","Fragments":["large","the","the"]},{"Key":"with large","Fragments":["input.","strings\u003c/li\u003e\u003c/ul\u003e"]},{"Key":"large input.","Fragments":["I"]},{"Key":"guess some","Fragments":["people"]},{"Key":"people think","Fragments":["you","that"]},{"Key":"have good","Fragments":["luck"]},{"Key":"good luck","Fragments":["with"]},{"Key":"luck with","Fragments":["this:"]},{"Key":"with this:","Fragments":["https://en.wikipedia.org/wiki/Cache-oblivious_algorithm#Examples"]},{"Key":"this: https://en.wikipedia.org/wiki/Cache-oblivious_algorithm#Examples","Fragments":["but"]},{"Key":"https://en.wikipedia.org/wiki/Cache-oblivious_algorithm#Examples but","Fragments":["I"]},{"Key":"really don't","Fragments":["know.","want","know.","think","need.","need","understand"]},{"Key":"don't know.","Fragments":["You'd"]},{"Key":"know. You'd","Fragments":["have"]},{"Key":"You'd have","Fragments":["to"]},{"Key":"to measure.","Fragments":["You"]},{"Key":"measure. You","Fragments":["could"]},{"Key":"try picking","Fragments":["a"]},{"Key":"picking a","Fragments":["different","string"]},{"Key":"different string","Fragments":["type"]},{"Key":"string type","Fragments":["if"]},{"Key":"type if","Fragments":["you","needed."]},{"Key":"you have,","Fragments":["at"]},{"Key":"have, at","Fragments":["the"]},{"Key":"code, a","Fragments":["good"]},{"Key":"big they'll","Fragments":["be"]},{"Key":"they'll be","Fragments":["-"]},{"Key":"be -","Fragments":["so"]},{"Key":"have them","Fragments":["all","confirm","declared","available","inside"]},{"Key":"one big","Fragments":["buffer","regular"]},{"Key":"big buffer","Fragments":["rather"]},{"Key":"buffer rather","Fragments":["than"]},{"Key":"a buffer","Fragments":["of","overflow","overflow."]},{"Key":"buffer of","Fragments":["pointers"]},{"Key":"pointers to","Fragments":["buffers"]},{"Key":"to buffers","Fragments":["(by"]},{"Key":"buffers (by","Fragments":["picking"]},{"Key":"(by picking","Fragments":["a"]},{"Key":"could hold","Fragments":["your"]},{"Key":"hold your","Fragments":["guessed"]},{"Key":"your guessed","Fragments":["size"]},{"Key":"guessed size","Fragments":["internally)."]},{"Key":"size internally).","Fragments":["Or"]},{"Key":"internally). Or","Fragments":["I"]},{"Key":"Or I","Fragments":["guess"]},{"Key":"could force","Fragments":["it"]},{"Key":"force it","Fragments":["with"]},{"Key":"a vector\u003cchar\u003e","Fragments":["storing"]},{"Key":"vector\u003cchar\u003e storing","Fragments":["all"]},{"Key":"storing all","Fragments":["the"]},{"Key":"strings back-to-back","Fragments":["and"]},{"Key":"back-to-back and","Fragments":["then"]},{"Key":"then some","Fragments":["other"]},{"Key":"other mechanism","Fragments":["for"]},{"Key":"mechanism for","Fragments":["knowing","controlling"]},{"Key":"for knowing","Fragments":["where"]},{"Key":"knowing where","Fragments":["one"]},{"Key":"one begins","Fragments":["and"]},{"Key":"begins and","Fragments":["another"]},{"Key":"another ends","Fragments":["(and"]},{"Key":"ends (and","Fragments":["I"]},{"Key":"(and I","Fragments":["guess","don't","didn't"]},{"Key":"guess returning","Fragments":["vector\u003cstring_ref\u003e"]},{"Key":"returning vector\u003cstring_ref\u003e","Fragments":["or"]},{"Key":"vector\u003cstring_ref\u003e or","Fragments":["something"]},{"Key":"the caller).","Fragments":["I'm"]},{"Key":"caller). I'm","Fragments":["not"]},{"Key":"not convinced","Fragments":["you'll","it","they"]},{"Key":"convinced you'll","Fragments":["gain"]},{"Key":"you'll gain","Fragments":["a"]},{"Key":"gain a","Fragments":["lot","lot","bit"]},{"Key":"lot there,","Fragments":["but"]},{"Key":"suppose you","Fragments":["could"]},{"Key":"were concerned.","Fragments":["If"]},{"Key":"concerned. If","Fragments":["you"]},{"Key":"do find","Fragments":["another"]},{"Key":"find another","Fragments":["algorithm"]},{"Key":"another algorithm","Fragments":["is"]},{"Key":"is better,","Fragments":["please"]},{"Key":"better, please","Fragments":["let"]},{"Key":"please let","Fragments":["me"]},{"Key":"me know.","Fragments":["I'm"]},{"Key":"know. I'm","Fragments":["honestly"]},{"Key":"I'm honestly","Fragments":["curious."]},{"Key":"honestly curious.","Fragments":["reserve"]},{"Key":"curious. reserve","Fragments":["is"]},{"Key":"reserve is","Fragments":["a"]},{"Key":"idea, though.","Fragments":["And"]},{"Key":"though. And","Fragments":["you"]},{"Key":"might theoretically","Fragments":["gain"]},{"Key":"theoretically gain","Fragments":["something"]},{"Key":"gain something","Fragments":["by"]},{"Key":"something by","Fragments":["doing"]},{"Key":"== w.size()","Fragments":[")"]},{"Key":"w.size() )","Fragments":["break;"]},{"Key":"break; encrypted.push_back(w[i]);","Fragments":["-"]},{"Key":"encrypted.push_back(w[i]); -","Fragments":["just"]},{"Key":"- just","Fragments":["to"]},{"Key":" If,","Fragments":["however,"]},{"Key":"If, however,","Fragments":["by"]},{"Key":"however, by","Fragments":["\"better\""]},{"Key":"by \"better\"","Fragments":["you"]},{"Key":"\"better\" you","Fragments":["mean"]},{"Key":"using higher-level","Fragments":["constructs"]},{"Key":"higher-level constructs","Fragments":["with"]},{"Key":"constructs with","Fragments":["fancy"]},{"Key":"with fancy","Fragments":["names,"]},{"Key":"fancy names,","Fragments":["you"]},{"Key":"names, you","Fragments":["certainly"]},{"Key":"you certainly","Fragments":["could"]},{"Key":"certainly could","Fragments":["do","be"]},{"Key":"something nifty","Fragments":["with"]},{"Key":"nifty with","Fragments":["boost::range,"]},{"Key":"with boost::range,","Fragments":["but"]},{"Key":"boost::range, but","Fragments":["it's"]},{"Key":"be easy.","Fragments":["zipped"]},{"Key":"easy. zipped","Fragments":["wants"]},{"Key":"zipped wants","Fragments":["to"]},{"Key":"the arity","Fragments":["at"]},{"Key":"arity at","Fragments":["compile"]},{"Key":"have that.","Fragments":["I"]},{"Key":"guess if","Fragments":["you"]},{"Key":"you dealt","Fragments":["with"]},{"Key":"dealt with","Fragments":["it"]},{"Key":"single string","Fragments":["you"]},{"Key":"string you","Fragments":["could","are","can","can"]},{"Key":"use strided","Fragments":["and"]},{"Key":"strided and","Fragments":["that"]},{"Key":"be sort-of","Fragments":["clean,"]},{"Key":"sort-of clean,","Fragments":["I"]},{"Key":"clean, I","Fragments":["guess."]},{"Key":"guess. But","Fragments":["going"]},{"Key":"But going","Fragments":["down"]},{"Key":"going down","Fragments":["this","to","the"]},{"Key":"down this","Fragments":["path","path"]},{"Key":"this path","Fragments":["will","to"]},{"Key":"path will","Fragments":["be"]},{"Key":"a headache","Fragments":["-"]},{"Key":"headache -","Fragments":["I've"]},{"Key":"I've gotten","Fragments":["annoyed","the"]},{"Key":"gotten annoyed","Fragments":["with"]},{"Key":"annoyed with","Fragments":["the"]},{"Key":"the difficulty","Fragments":["of"]},{"Key":"difficulty of","Fragments":["doing"]},{"Key":"doing simpler","Fragments":["things"]},{"Key":"simpler things","Fragments":["-"]},{"Key":"there's plenty","Fragments":["of"]},{"Key":"plenty of","Fragments":["people","others","information","examples"]},{"Key":"people it","Fragments":["would"]},{"Key":"actually confuse","Fragments":["more"]},{"Key":"confuse more","Fragments":["so"]},{"Key":"more so","Fragments":["one","than"]},{"Key":"so one","Fragments":["has"]},{"Key":"ask how","Fragments":["much"]},{"Key":"much one's","Fragments":["really"]},{"Key":"one's really","Fragments":["gaining"]},{"Key":"So really...","Fragments":["I"]},{"Key":"really... I","Fragments":["guess"]},{"Key":"guess I'm","Fragments":["saying"]},{"Key":"I'm saying","Fragments":["I"]},{"Key":"saying I","Fragments":["believe"]},{"Key":"that function","Fragments":["to","call.","up","calls","could","argument"]},{"Key":"like 99%","Fragments":["ideal."]},{"Key":"99% ideal.","Fragments":["Maybe"]},{"Key":"ideal. Maybe","Fragments":["you"]},{"Key":"really tried,","Fragments":["but"]},{"Key":"tried, but","Fragments":["diminishing"]},{"Key":"but diminishing","Fragments":["returns"]},{"Key":"diminishing returns","Fragments":["and"]},{"Key":"returns and","Fragments":["all.","the"]},{"Key":" @paul","Fragments":["Thank"]},{"Key":"@paul Thank","Fragments":["you,"]},{"Key":"Thank you,","Fragments":["I"]},{"Key":"you, I","Fragments":["uploaded"]},{"Key":"my habit","Fragments":["of","of"]},{"Key":"of declaring","Fragments":["variables","all"]},{"Key":"declaring variables","Fragments":["close"]},{"Key":"to opening","Fragments":["of"]},{"Key":"opening of","Fragments":["function"]},{"Key":"function comes","Fragments":["from"]},{"Key":"from C.","Fragments":["Point"]},{"Key":"C. Point","Fragments":["noted."]},{"Key":" Usage","Fragments":["of","of"]},{"Key":"Usage of","Fragments":["`istream_iterator`","variable"]},{"Key":"of `istream_iterator`","Fragments":["stemmed"]},{"Key":"`istream_iterator` stemmed","Fragments":["from"]},{"Key":"stemmed from","Fragments":["my"]},{"Key":"my lack","Fragments":["of","of"]},{"Key":"of understanding","Fragments":["of"]},{"Key":"input streams","Fragments":["in"]},{"Key":"streams in","Fragments":["C++."]},{"Key":"C++. Now","Fragments":["I"]},{"Key":"know better","Fragments":["after"]},{"Key":"better after","Fragments":["you","all."]},{"Key":"you pointed","Fragments":["it","and","it"]},{"Key":" hmm.","Fragments":["good"]},{"Key":"hmm. good","Fragments":["idea,"]},{"Key":"idea, still","Fragments":["would"]},{"Key":"out an","Fragments":["infinitely","error"]},{"Key":"an infinitely","Fragments":["recursive"]},{"Key":"infinitely recursive","Fragments":["version,"]},{"Key":"recursive version,","Fragments":["or"]},{"Key":"version, or","Fragments":["at"]},{"Key":"least an","Fragments":["algorithm"]},{"Key":"any integer","Fragments":["data"]},{"Key":"integer data","Fragments":["size."]},{"Key":" your","Fragments":["right","hey"]},{"Key":"your right","Fragments":["about"]},{"Key":"the read","Fragments":["me,"]},{"Key":"just curious","Fragments":["bout","about"]},{"Key":"curious bout","Fragments":["how"]},{"Key":"bout how","Fragments":["to"]},{"Key":"trouble finding","Fragments":["X̅"]},{"Key":"finding X̅","Fragments":["in"]},{"Key":"the unicode","Fragments":["chart,"]},{"Key":"unicode chart,","Fragments":["might"]},{"Key":"chart, might","Fragments":["have"]},{"Key":"a utility","Fragments":["to","struct,"]},{"Key":"utility to","Fragments":["figure"]},{"Key":"explicit character","Fragments":["class"]},{"Key":"character class","Fragments":["`[a-zA-Z0-9]`"]},{"Key":"class `[a-zA-Z0-9]`","Fragments":["for"]},{"Key":"`[a-zA-Z0-9]` for","Fragments":["the"]},{"Key":"first series","Fragments":["of"]},{"Key":"series of","Fragments":["letters","`const","four","steps,","4","functions"]},{"Key":"of letters","Fragments":["but","found.","is","are"]},{"Key":"letters but","Fragments":["`\\w`","no","ending"]},{"Key":"but `\\w`","Fragments":["for"]},{"Key":"`\\w` for","Fragments":["the"]},{"Key":"the last?","Fragments":["`\\w`"]},{"Key":"last? `\\w`","Fragments":["does"]},{"Key":"`\\w` does","Fragments":["not","contain"]},{"Key":"even mean","Fragments":["the"]},{"Key":"as `[a-zA-Z0-9]`!","Fragments":["`\\w`"]},{"Key":"`[a-zA-Z0-9]`! `\\w`","Fragments":["does"]},{"Key":"does contain","Fragments":["the"]},{"Key":"the underscore","Fragments":["in","is","in","_"]},{"Key":"underscore in","Fragments":["addition.","the"]},{"Key":" you're","Fragments":["right,","right"]},{"Key":"I recall","Fragments":["i"]},{"Key":"recall i","Fragments":["fussed"]},{"Key":"i fussed","Fragments":["over"]},{"Key":"fussed over","Fragments":["the"]},{"Key":"the perfect","Fragments":["name","fit","application"]},{"Key":"perfect name","Fragments":["for"]},{"Key":"for way","Fragments":["too"]},{"Key":"way too","Fragments":["long","verbose","much","simple.","high"]},{"Key":"too long","Fragments":["and","and","and","and"]},{"Key":"and gave","Fragments":["up"]},{"Key":"right of","Fragments":["course,"]},{"Key":"but aesthetically,","Fragments":["I"]},{"Key":"aesthetically, I","Fragments":["just"]},{"Key":"like including","Fragments":["implicit"]},{"Key":"including implicit","Fragments":["conversion"]},{"Key":"of bool","Fragments":["to","flags"]},{"Key":"bool to","Fragments":["int","unsigned,","make","int"]},{"Key":" mmm,","Fragments":["one"]},{"Key":"mmm, one","Fragments":["more"]},{"Key":"more iteration","Fragments":["then.."]},{"Key":" Changes","Fragments":["from","from","from","from"]},{"Key":"Changes from","Fragments":["r1:","iteration","iteration","the"]},{"Key":" ```while```","Fragments":["replaced"]},{"Key":"```while``` replaced","Fragments":["with"]},{"Key":" ```str_in```","Fragments":["is"]},{"Key":"```str_in``` is","Fragments":["not"]},{"Key":"not stored","Fragments":["as"]},{"Key":"variable any","Fragments":["more."]},{"Key":"All vectors","Fragments":["and"]},{"Key":"vectors and","Fragments":["strings"]},{"Key":"and strings","Fragments":["now"]},{"Key":"strings now","Fragments":["have"]},{"Key":"now have","Fragments":["space","three"]},{"Key":"have space","Fragments":["allocated"]},{"Key":"space allocated","Fragments":["for"]},{"Key":"allocated for","Fragments":["them"]},{"Key":"them using","Fragments":["```.reserve()```"]},{"Key":"It's two","Fragments":["code"]},{"Key":"two code","Fragments":["points,"]},{"Key":"code points,","Fragments":["X"]},{"Key":"points, X","Fragments":["followed"]},{"Key":"X followed","Fragments":["by"]},{"Key":"combining codepoint","Fragments":["for"]},{"Key":"codepoint for","Fragments":["line-over."]},{"Key":"for line-over.","Fragments":["I"]},{"Key":"line-over. I","Fragments":["don't"]},{"Key":"remember the","Fragments":["value,","first"]},{"Key":"value, but","Fragments":["there","```'0'```."]},{"Key":"there aren't","Fragments":["a","breaks"]},{"Key":"aren't a","Fragments":["lot"]},{"Key":"of combing","Fragments":["codepoints"]},{"Key":"combing codepoints","Fragments":["so"]},{"Key":"codepoints so","Fragments":["it"]},{"Key":"be too","Fragments":["hard","interesting:"]},{"Key":"For my","Fragments":["compiler","own"]},{"Key":"my compiler","Fragments":["I"]},{"Key":"compiler I","Fragments":["can"]},{"Key":"can copy-paste","Fragments":["UTF-8"]},{"Key":"copy-paste UTF-8","Fragments":["into"]},{"Key":"UTF-8 into","Fragments":["string"]},{"Key":"into string","Fragments":["literals"]},{"Key":"literals and","Fragments":["it"]},{"Key":"really go","Fragments":["infinite?","there,"]},{"Key":"go infinite?","Fragments":["I"]},{"Key":"infinite? I","Fragments":["think"]},{"Key":"think there's","Fragments":["only","a","a","no","a","a"]},{"Key":"there's only","Fragments":["so"]},{"Key":"only so","Fragments":["many"]},{"Key":"many symbols","Fragments":["defined"]},{"Key":"symbols defined","Fragments":["in"]},{"Key":"in roman","Fragments":["numerals."]},{"Key":"roman numerals.","Fragments":["I"]},{"Key":"numerals. I","Fragments":["guess"]},{"Key":"could repeat","Fragments":["your"]},{"Key":"repeat your","Fragments":["largest"]},{"Key":"your largest","Fragments":["symbol"]},{"Key":"largest symbol","Fragments":["an"]},{"Key":"symbol an","Fragments":["arbitrary"]},{"Key":" @diamond","Fragments":["Thanks"]},{"Key":"@diamond Thanks","Fragments":["very"]},{"Key":"Thanks very","Fragments":["much"]},{"Key":"much again","Fragments":[":)"]},{"Key":"again :)","Fragments":["I've"]},{"Key":":) I've","Fragments":["incorporated"]},{"Key":"I've incorporated","Fragments":["your"]},{"Key":"incorporated your","Fragments":["suggestions","suggestion"]},{"Key":" Was","Fragments":["quite","pondering","going"]},{"Key":"Was quite","Fragments":["happy"]},{"Key":"quite happy","Fragments":["with","with"]},{"Key":"end, but","Fragments":["couldn't"]},{"Key":"right regex","Fragments":["to","for"]},{"Key":"leading quote","Fragments":["mark"]},{"Key":"quote mark","Fragments":["of"]},{"Key":"mark of","Fragments":["'let's,"]},{"Key":"of 'let's,","Fragments":["in"]},{"Key":"'let's, in","Fragments":["the"]},{"Key":"end I","Fragments":["checked"]},{"Key":"each string","Fragments":["and"]},{"Key":"just removed","Fragments":["it","all"]},{"Key":"removed it","Fragments":["before"]},{"Key":"it before","Fragments":["adding","in"]},{"Key":"before adding","Fragments":["it","it."]},{"Key":"adding it","Fragments":["to"]},{"Key":"the set,","Fragments":["which"]},{"Key":"set, which","Fragments":["spoilt"]},{"Key":"which spoilt","Fragments":["the"]},{"Key":"spoilt the","Fragments":["code."]},{"Key":"very optimised","Fragments":["as"]},{"Key":"optimised as","Fragments":["I'm"]},{"Key":"as I'm","Fragments":["new","not","certain","interested"]},{"Key":"c++ programming","Fragments":["and"]},{"Key":"programming and","Fragments":["was","using"]},{"Key":"the libraries","Fragments":["as"]},{"Key":"libraries as","Fragments":["much"]},{"Key":"Oh, this","Fragments":["code"]},{"Key":"so ugly!","Fragments":["I"]},{"Key":"ugly! I","Fragments":["wanted"]},{"Key":"wanted it","Fragments":["to"]},{"Key":"more organised","Fragments":["than"]},{"Key":"organised than","Fragments":["it"]},{"Key":"was and","Fragments":["it"]},{"Key":"be all","Fragments":["over","in"]},{"Key":"all over","Fragments":["the","the","the"]},{"Key":"the place.","Fragments":["If"]},{"Key":"place. If","Fragments":["I"]},{"Key":"it again,","Fragments":["I"]},{"Key":"again, I","Fragments":["think"]},{"Key":"better trying","Fragments":["it"]},{"Key":"trying it","Fragments":["with"]},{"Key":"one started","Fragments":["out"]},{"Key":"started out","Fragments":["pretty","much"]},{"Key":"out pretty","Fragments":["cleanly"]},{"Key":"pretty cleanly","Fragments":["with"]},{"Key":"cleanly with","Fragments":["using"]},{"Key":"the boost::tokenizer.","Fragments":["But"]},{"Key":"boost::tokenizer. But","Fragments":["then"]},{"Key":"it got","Fragments":["ugly"]},{"Key":"got ugly","Fragments":["when","when"]},{"Key":"ugly when","Fragments":["I","I"]},{"Key":"the separators.","Fragments":["I"]},{"Key":"separators. I","Fragments":["don't"]},{"Key":"them out","Fragments":["instead","of","into","in"]},{"Key":"out instead","Fragments":["of"]},{"Key":"like ispunct().","Fragments":["Then"]},{"Key":"ispunct(). Then","Fragments":["things"]},{"Key":"Then things","Fragments":["really"]},{"Key":"things really","Fragments":["got"]},{"Key":"support single-ticks","Fragments":["'."]},{"Key":"can give","Fragments":["the","the","some"]},{"Key":"give the","Fragments":["to","function","right","exhaustive"]},{"Key":"to Argument","Fragments":["of"]},{"Key":"Argument of","Fragments":["the"]},{"Key":"the sing","Fragments":["method","method","function"]},{"Key":"sing method","Fragments":["a","with"]},{"Key":"method a","Fragments":["default"]},{"Key":"of 0.","Fragments":["With","So"]},{"Key":"0. With","Fragments":["this"]},{"Key":"With this","Fragments":["you","I"]},{"Key":"method with","Fragments":["one"]},{"Key":"with one","Fragments":["argument.","argument,","argument","solution","of"]},{"Key":"Default values","Fragments":["for"]},{"Key":"values for","Fragments":["arguments…","word,"]},{"Key":"for arguments…","Fragments":["Something"]},{"Key":"arguments… Something","Fragments":["I"]},{"Key":"I forget","Fragments":["quite"]},{"Key":"forget quite","Fragments":["often"]},{"Key":"quite often","Fragments":["that"]},{"Key":"often that","Fragments":["it"]},{"Key":"it exists,","Fragments":["in"]},{"Key":"exists, in","Fragments":["any"]},{"Key":"To your","Fragments":["comment"]},{"Key":"comment why","Fragments":["you"]},{"Key":"the ```operator[]```","Fragments":["at"]},{"Key":"```operator[]``` at","Fragments":["this"]},{"Key":"this point.","Fragments":["It's"]},{"Key":"point. It's","Fragments":["because"]},{"Key":"It's because","Fragments":["you"]},{"Key":"function ```const```.","Fragments":["At"]},{"Key":"```const```. At","Fragments":["this"]},{"Key":"At this","Fragments":["point","point","point","stage","point"]},{"Key":"this point","Fragments":["you","the","my",";).","I","we"]},{"Key":"point you","Fragments":["can't"]},{"Key":"the ```operator[]```.","Fragments":["I"]},{"Key":"```operator[]```. I","Fragments":["had"]},{"Key":"function ```sing(unsigned","Fragments":["starting_num,"]},{"Key":"```sing(unsigned starting_num,","Fragments":["unsigned"]},{"Key":"starting_num, unsigned","Fragments":["ending_num)```","ending_num"]},{"Key":"unsigned ending_num)```","Fragments":["a"]},{"Key":"ending_num)``` a","Fragments":["default"]},{"Key":"default Value","Fragments":["for"]},{"Key":"Value for","Fragments":["```ending_num```."]},{"Key":"for ```ending_num```.","Fragments":["So"]},{"Key":"```ending_num```. So","Fragments":["you"]},{"Key":"the secound","Fragments":["sing"]},{"Key":"secound sing","Fragments":["function."]},{"Key":"sing function.","Fragments":["Like:"]},{"Key":"function. Like:","Fragments":["```"]},{"Key":"Like: ```","Fragments":["std::string"]},{"Key":"``` std::string","Fragments":["sing(unsigned"]},{"Key":"std::string sing(unsigned","Fragments":["starting_num,"]},{"Key":"sing(unsigned starting_num,","Fragments":["unsigned"]},{"Key":"unsigned ending_num","Fragments":["="]},{"Key":"ending_num =","Fragments":["0);```"]},{"Key":"For unsigned","Fragments":["integer"]},{"Key":"integer i","Fragments":["would"]},{"Key":"the Member","Fragments":["variable"]},{"Key":"Member variable","Fragments":["for"]},{"Key":"the String","Fragments":["because"]},{"Key":"String because","Fragments":["i"]},{"Key":"because i","Fragments":["didn't","thought"]},{"Key":"the Argument","Fragments":["for"]},{"Key":"Argument for","Fragments":["the"]},{"Key":"the Constructor","Fragments":["to","```explicit```"]},{"Key":"Constructor to","Fragments":["```const"]},{"Key":"to ```const","Fragments":["std::string\u0026```","char","std::string"]},{"Key":" Make","Fragments":["the","sure"]},{"Key":"Made a","Fragments":["Mistake","mistake."]},{"Key":"a Mistake","Fragments":["in"]},{"Key":"Mistake in","Fragments":["the"]},{"Key":"the CPP","Fragments":["file."]},{"Key":"CPP file.","Fragments":["Header"]},{"Key":"file. Header","Fragments":["is"]},{"Key":"as in","Fragments":["Iteration","_valid_word_char_","`isThisPattern`.","a"]},{"Key":"in Iteration","Fragments":["2"]},{"Key":"about avoiding","Fragments":["the"]},{"Key":"the float","Fragments":["comparison,"]},{"Key":"float comparison,","Fragments":["but"]},{"Key":"comparison, but","Fragments":["I","in"]},{"Key":"was doing","Fragments":["an","just","this"]},{"Key":"doing an","Fragments":["operation"]},{"Key":"operation :","Fragments":["a"]},{"Key":": a","Fragments":["*"]},{"Key":"a *","Fragments":["2"]},{"Key":"and comparing","Fragments":["to","the","the","the","the","two"]},{"Key":"comparing to","Fragments":["a","the","the","the","the","string::npos"]},{"Key":"+ b,","Fragments":["i"]},{"Key":"b, i","Fragments":["would"]},{"Key":"limit my","Fragments":["equality"]},{"Key":"my equality","Fragments":["check"]},{"Key":"equality check","Fragments":["to"]},{"Key":"my required","Fragments":["precision."]},{"Key":"required precision.","Fragments":["(which"]},{"Key":"precision. (which","Fragments":["I"]},{"Key":"noticed you","Fragments":["included","didn't"]},{"Key":"case, if","Fragments":["the"]},{"Key":"use is","Fragments":["to","in"]},{"Key":"compare values","Fragments":["from"]},{"Key":"from file,","Fragments":["I"]},{"Key":"can rely","Fragments":["on","on","on"]},{"Key":"given number","Fragments":["eg"]},{"Key":"number eg","Fragments":["'4.26'"]},{"Key":"eg '4.26'","Fragments":["always"]},{"Key":"'4.26' always","Fragments":["being"]},{"Key":"always being","Fragments":["represented"]},{"Key":"being represented","Fragments":["in"]},{"Key":"represented in","Fragments":["consistent"]},{"Key":"in consistent","Fragments":["manner,"]},{"Key":"consistent manner,","Fragments":["within"]},{"Key":"manner, within","Fragments":["the"]},{"Key":"the run","Fragments":["of"]},{"Key":"But another","Fragments":["reason"]},{"Key":"the precision","Fragments":["you've"]},{"Key":"precision you've","Fragments":["implemented"]},{"Key":"you've implemented","Fragments":["is"]},{"Key":"implemented is","Fragments":["a"]},{"Key":"idea, it","Fragments":["prevents"]},{"Key":"it prevents","Fragments":["the","a"]},{"Key":"prevents the","Fragments":["class","TL;DR"]},{"Key":"class 'over-promising'","Fragments":["being"]},{"Key":"'over-promising' being","Fragments":["able"]},{"Key":"between two","Fragments":["very","DNA","maps"]},{"Key":"two very","Fragments":["close"]},{"Key":"close numbers","Fragments":["where"]},{"Key":"numbers where","Fragments":["the"]},{"Key":"less that","Fragments":["the"]},{"Key":"agree there","Fragments":["are"]},{"Key":"are circumstances","Fragments":["when"]},{"Key":"circumstances when","Fragments":["you"]},{"Key":"the rounding","Fragments":["being"]},{"Key":"rounding being","Fragments":["consistent"]},{"Key":"being consistent","Fragments":["(even"]},{"Key":"consistent (even","Fragments":["if"]},{"Key":"not exact).","Fragments":["I'm"]},{"Key":"exact). I'm","Fragments":["not"]},{"Key":"the hypothetical","Fragments":["caller"]},{"Key":"hypothetical caller","Fragments":["is"]},{"Key":"caller is","Fragments":["providing","passing,"]},{"Key":"is providing","Fragments":["those"]},{"Key":"providing those","Fragments":["guarantees"]},{"Key":"those guarantees","Fragments":["in"]},{"Key":"guarantees in","Fragments":["this"]},{"Key":"case. Maybe.","Fragments":["Maybe"]},{"Key":"Maybe. Maybe","Fragments":["you"]},{"Key":"could make","Fragments":["it","a","this","the","the","`checkQuestion`","the","it","the","it"]},{"Key":"a prerequisite","Fragments":["or"]},{"Key":"prerequisite or","Fragments":["simply"]},{"Key":"simply a","Fragments":["note"]},{"Key":"a note","Fragments":["about"]},{"Key":"note about","Fragments":["the","isNothing."]},{"Key":"limitation in","Fragments":["documentation."]},{"Key":"If I'm","Fragments":["going","going"]},{"Key":"be perfectly","Fragments":["honest"]},{"Key":"perfectly honest","Fragments":["about"]},{"Key":"honest about","Fragments":["this,"]},{"Key":"this, though,","Fragments":["I"]},{"Key":"taken the","Fragments":["time","char"]},{"Key":"out exactly","Fragments":["which"]},{"Key":"exactly which","Fragments":["situations"]},{"Key":"which situations","Fragments":["are"]},{"Key":"situations are","Fragments":["reliable"]},{"Key":"are reliable","Fragments":["portably"]},{"Key":"reliable portably","Fragments":["and"]},{"Key":"portably and","Fragments":["which"]},{"Key":"are not.","Fragments":["So","Any"]},{"Key":"not. So","Fragments":["I"]},{"Key":"always assume","Fragments":["=="]},{"Key":"assume ==","Fragments":["and"]},{"Key":"== and","Fragments":["!="]},{"Key":"and !=","Fragments":["are"]},{"Key":"!= are","Fragments":["not"]},{"Key":"not reliable.","Fragments":["I"]},{"Key":"reliable. I","Fragments":["think"]},{"Key":"them have","Fragments":["to"]},{"Key":"with conversion","Fragments":["from"]},{"Key":"a finite","Fragments":["type"]},{"Key":"finite type","Fragments":["like"]},{"Key":"type like","Fragments":["int","decltype"]},{"Key":"like int","Fragments":["or"]},{"Key":"int or","Fragments":["perhaps","char,"]},{"Key":"perhaps string","Fragments":["(which"]},{"Key":"the from-file","Fragments":["case"]},{"Key":"from-file case","Fragments":["boils"]},{"Key":"case boils","Fragments":["down"]},{"Key":"down to).","Fragments":["I"]},{"Key":"to). I","Fragments":["should"]},{"Key":"to really","Fragments":["studying","dig","dig","mean"]},{"Key":"really studying","Fragments":["that"]},{"Key":"studying that","Fragments":["-"]},{"Key":"- floating","Fragments":["point"]},{"Key":"point math","Fragments":["is"]},{"Key":"is really,","Fragments":["really"]},{"Key":"really common","Fragments":["in"]},{"Key":"my new","Fragments":["position.","job."]},{"Key":"put ```scores```","Fragments":["in"]},{"Key":"```scores``` in","Fragments":["the"]},{"Key":"my mind,","Fragments":["but"]},{"Key":"mind, but","Fragments":["forgot"]},{"Key":"but forgot","Fragments":["to","to"]},{"Key":"the ```#include","Fragments":["\u003cmap\u003e```","\u003cvector\u003e```"]},{"Key":"```#include \u003cmap\u003e```","Fragments":["directive","is"]},{"Key":"\u003cmap\u003e``` directive","Fragments":["to"]},{"Key":"directive to","Fragments":["the","remove"]},{"Key":"Changed Line","Fragments":["30."]},{"Key":"Line 30.","Fragments":["Use"]},{"Key":"30. Use","Fragments":["```erase```"]},{"Key":"Use ```erase```","Fragments":["instead"]},{"Key":"```erase``` instead","Fragments":["of"]},{"Key":" @graham","Fragments":["Static"]},{"Key":"@graham Static","Fragments":["would"]},{"Key":"Static would","Fragments":["save"]},{"Key":"would save","Fragments":["space"]},{"Key":"save space","Fragments":["only"]},{"Key":"space only","Fragments":["if"]},{"Key":"I create","Fragments":["multiple","two","an"]},{"Key":"create multiple","Fragments":["instances"]},{"Key":"multiple instances","Fragments":["of"]},{"Key":"of class","Fragments":["```space_age```;","and","'bob'.","'bob'.","bob","LackadaisicalTeenager."]},{"Key":"class ```space_age```;","Fragments":["there"]},{"Key":"```space_age```; there","Fragments":["wouldn't"]},{"Key":"there wouldn't","Fragments":["be"]},{"Key":"any difference","Fragments":["in","(you","between"]},{"Key":"in size","Fragments":["if","from"]},{"Key":"size if","Fragments":["there"]},{"Key":"item of","Fragments":["```space_age```."]},{"Key":"moved ```using","Fragments":["namespace"]},{"Key":"```using namespace","Fragments":["std```","std;```","std```","myAppNamespace```),","std```,","std;```","std```","std```","std```"]},{"Key":"namespace std```","Fragments":["into","in","makes","within","and"]},{"Key":"std``` into","Fragments":["```namespace"]},{"Key":"into ```namespace","Fragments":["dna```"]},{"Key":"```namespace dna```","Fragments":["since"]},{"Key":"dna``` since","Fragments":["I"]},{"Key":"create .cpp","Fragments":["file"]},{"Key":"file just","Fragments":["for"]},{"Key":" ```nucleotide_count```","Fragments":["now"]},{"Key":"```nucleotide_count``` now","Fragments":["returns"]},{"Key":"now returns","Fragments":["const"]},{"Key":"returns const","Fragments":["reference"]},{"Key":" @colleen","Fragments":["Don't"]},{"Key":"@colleen Don't","Fragments":["worry!"]},{"Key":"Don't worry!","Fragments":["Multiple"]},{"Key":"worry! Multiple","Fragments":["use"]},{"Key":"Multiple use","Fragments":["of"]},{"Key":"of ```?```","Fragments":["operator"]},{"Key":"```?``` operator","Fragments":["is"]},{"Key":"for fun","Fragments":["here."]},{"Key":"fun here.","Fragments":["I"]},{"Key":"here. I","Fragments":["wouldn't","guess","think"]},{"Key":"use such","Fragments":["code"]},{"Key":"such code","Fragments":["in"]},{"Key":"real applications","Fragments":["since"]},{"Key":"applications since","Fragments":["it"]},{"Key":"it confuses","Fragments":["other"]},{"Key":"confuses other","Fragments":["readers."]},{"Key":"A struct","Fragments":["is"]},{"Key":"struct is","Fragments":["basically","per"]},{"Key":"basically a","Fragments":["class,"]},{"Key":"class, but","Fragments":["with","then","the","that"]},{"Key":"default visibility","Fragments":["of"]},{"Key":"of \"public\",","Fragments":["using"]},{"Key":"\"public\", using","Fragments":["a"]},{"Key":"struct here","Fragments":["is"]},{"Key":"basically for","Fragments":["the"]},{"Key":"the brevity","Fragments":["of","of","of"]},{"Key":"brevity of","Fragments":["the","the","your"]},{"Key":"can't overload","Fragments":["the"]},{"Key":"overload the","Fragments":["std::string"]},{"Key":"the std::string","Fragments":["constructor,","class","argument"]},{"Key":"std::string constructor,","Fragments":["so"]},{"Key":"constructor, so","Fragments":["I'm"]},{"Key":"how std::string(phone)","Fragments":["could"]},{"Key":"std::string(phone) could","Fragments":["possibly"]},{"Key":"EDIT: Today","Fragments":["I"]},{"Key":"Today I","Fragments":["learned"]},{"Key":"learned about","Fragments":["conversion","std::transform"]},{"Key":"about conversion","Fragments":["operators."]},{"Key":"you forget","Fragments":[".cpp"]},{"Key":"forget .cpp","Fragments":["file?"]},{"Key":".cpp file?","Fragments":["I"]},{"Key":"file? I","Fragments":["can","guess"]},{"Key":"only see","Fragments":["declarations,"]},{"Key":"see declarations,","Fragments":["but"]},{"Key":"declarations, but","Fragments":["no"]},{"Key":"what stdexcept","Fragments":["is"]},{"Key":"stdexcept is","Fragments":["doing."]},{"Key":"is doing.","Fragments":["Perhaps","Calling"]},{"Key":"doing. Perhaps","Fragments":["an"]},{"Key":"Perhaps an","Fragments":["earlier"]},{"Key":"earlier version","Fragments":["threw"]},{"Key":"version threw","Fragments":["some"]},{"Key":"decent argument.","Fragments":["This"]},{"Key":"argument. This","Fragments":["exercise"]},{"Key":"is dealing","Fragments":["with"]},{"Key":"with not","Fragments":["some"]},{"Key":"not some","Fragments":["practical","object"]},{"Key":"some practical","Fragments":["situation"]},{"Key":"practical situation","Fragments":["but"]},{"Key":"situation but","Fragments":["math"]},{"Key":"but math","Fragments":["itself."]},{"Key":"math itself.","Fragments":["A"]},{"Key":"itself. A","Fragments":["triangle"]},{"Key":"A triangle","Fragments":["that"]},{"Key":"triangle that","Fragments":["has"]},{"Key":"has two","Fragments":["sides","advantages."]},{"Key":"two sides","Fragments":["1E9km"]},{"Key":"sides 1E9km","Fragments":["long"]},{"Key":"1E9km long","Fragments":["and"]},{"Key":"side that's","Fragments":["(1E9km"]},{"Key":"that's (1E9km","Fragments":["-"]},{"Key":"(1E9km -","Fragments":["1nm)"]},{"Key":"- 1nm)","Fragments":["long"]},{"Key":"1nm) long","Fragments":["is"]},{"Key":"an equilateral","Fragments":["triangle."]},{"Key":"equilateral triangle.","Fragments":["I"]},{"Key":"triangle. I","Fragments":["guess"]},{"Key":"only real","Fragments":["concern","problem","hurdle"]},{"Key":"real concern","Fragments":["is"]},{"Key":"to kind","Fragments":["could"]},{"Key":"kind could","Fragments":["the"]},{"Key":"could the","Fragments":["result"]},{"Key":"arithmetic that","Fragments":["*should*,"]},{"Key":"that *should*,","Fragments":["mathematically,"]},{"Key":"*should*, mathematically,","Fragments":["result"]},{"Key":"mathematically, result","Fragments":["in"]},{"Key":"particular triangle","Fragments":["but"]},{"Key":"triangle but","Fragments":["didn't"]},{"Key":"didn't due","Fragments":["to"]},{"Key":"to rounding.","Fragments":["But"]},{"Key":"rounding. But","Fragments":["if"]},{"Key":"they're concerned","Fragments":["about"]},{"Key":"user-defined data","Fragments":["type"]},{"Key":"data type","Fragments":["that","before"]},{"Key":"do rounding","Fragments":["(perhaps"]},{"Key":"rounding (perhaps","Fragments":["a"]},{"Key":"(perhaps a","Fragments":["Rational"]},{"Key":"a Rational","Fragments":["with"]},{"Key":"Rational with","Fragments":["BigInt"]},{"Key":"with BigInt","Fragments":["numerator"]},{"Key":"BigInt numerator","Fragments":["and"]},{"Key":"numerator and","Fragments":["denominator)"]},{"Key":"and denominator)","Fragments":["and"]},{"Key":"denominator) and","Fragments":["your"]},{"Key":"functions supports","Fragments":["that"]},{"Key":"supports that","Fragments":["just"]},{"Key":"fine. But","Fragments":["yeah,"]},{"Key":"yeah, if","Fragments":["this"]},{"Key":"a production,","Fragments":["real-life"]},{"Key":"production, real-life","Fragments":["code"]},{"Key":"real-life code","Fragments":["review"]},{"Key":"review I'd","Fragments":["recommend"]},{"Key":"recommend documenting","Fragments":["the"]},{"Key":"potential issue","Fragments":["so"]},{"Key":"issue so","Fragments":["the"]},{"Key":"can deal","Fragments":["with","with"]},{"Key":"with (or","Fragments":["avoid"]},{"Key":"(or avoid","Fragments":["it)"]},{"Key":"avoid it)","Fragments":["it"]},{"Key":"it) it","Fragments":["if"]},{"Key":"By position","Fragments":["I"]},{"Key":"position I","Fragments":["meant"]},{"Key":"meant my","Fragments":["new"]},{"Key":"new job.","Fragments":["I'm"]},{"Key":"job. I'm","Fragments":["working"]},{"Key":"on derivative","Fragments":["valuations."]},{"Key":"derivative valuations.","Fragments":["Lots"]},{"Key":"valuations. Lots","Fragments":["of"]},{"Key":"heavily insipred","Fragments":["by"]},{"Key":"insipred by","Fragments":["the"]},{"Key":"the dicussion","Fragments":["I"]},{"Key":"dicussion I","Fragments":["had"]},{"Key":"had with","Fragments":["@dustin"]},{"Key":"with @dustin","Fragments":["on"]},{"Key":"@dustin on","Fragments":["my"]},{"Key":"the trinary","Fragments":["problem","if-then-else","operator"]},{"Key":"trinary problem","Fragments":["in"]},{"Key":"C++. Thanks","Fragments":["again"]},{"Key":"again @dustin!","Fragments":[":)"]},{"Key":"first off","Fragments":["I"]},{"Key":"off I","Fragments":["like","love"]},{"Key":"how clear","Fragments":["and","the"]},{"Key":"and straight-forward","Fragments":["your"]},{"Key":"straight-forward your","Fragments":["solution"]},{"Key":"solution is.","Fragments":["It's"]},{"Key":"is. It's","Fragments":["also"]},{"Key":"also very","Fragments":["nicely","good"]},{"Key":"very nicely","Fragments":["commented"]},{"Key":"nicely commented","Fragments":["and"]},{"Key":"commented and","Fragments":["has"]},{"Key":"good level","Fragments":["of"]},{"Key":"header. If","Fragments":["you"]},{"Key":"an up-to-date","Fragments":["version"]},{"Key":"up-to-date version","Fragments":["of"]},{"Key":"the exercism","Fragments":["CLI","client"]},{"Key":"CLI you","Fragments":["can"]},{"Key":"once. ```exercism","Fragments":["submit"]},{"Key":"```exercism submit","Fragments":["bob.h"]},{"Key":"bob.h bob.cpp```","Fragments":["Or"]},{"Key":"bob.cpp``` Or","Fragments":["you"]},{"Key":"a commented","Fragments":["out"]},{"Key":"out copy","Fragments":["of"]},{"Key":"file so","Fragments":["we"]},{"Key":"you've only","Fragments":["exposed","passed"]},{"Key":"only exposed","Fragments":["the"]},{"Key":"exposed the","Fragments":["one","`StringView`"]},{"Key":"function externally","Fragments":["which"]},{"Key":"externally which","Fragments":["is"]},{"Key":"me personally,","Fragments":["I"]},{"Key":"personally, I","Fragments":["don't"]},{"Key":"the Hungarian","Fragments":["notation."]},{"Key":"Hungarian notation.","Fragments":["I","It"]},{"Key":"notation. I","Fragments":["know"]},{"Key":"know it's","Fragments":["a"]},{"Key":"style thing,","Fragments":["but"]},{"Key":"thing, but","Fragments":["the","the","may"]},{"Key":"are super","Fragments":["obvious","easy"]},{"Key":"super obvious","Fragments":["so"]},{"Key":"obvious so","Fragments":["I","a"]},{"Key":"adds noise.","Fragments":["If"]},{"Key":"noise. If","Fragments":["you"]},{"Key":"many variables","Fragments":["or"]},{"Key":"variables or","Fragments":["such"]},{"Key":"or such","Fragments":["long"]},{"Key":"such long","Fragments":["functions"]},{"Key":"long functions","Fragments":["that"]},{"Key":"you lose","Fragments":["track"]},{"Key":"lose track","Fragments":["you"]},{"Key":"track you","Fragments":["need"]},{"Key":"refactor your","Fragments":["code."]},{"Key":"code. Also,","Fragments":["IDE's","I"]},{"Key":"Also, IDE's","Fragments":["which"]},{"Key":"IDE's which","Fragments":["can"]},{"Key":"can show","Fragments":["you"]},{"Key":"of variables","Fragments":["when"]},{"Key":"variables when","Fragments":["you"]},{"Key":"you hover","Fragments":["the"]},{"Key":"hover the","Fragments":["cursor"]},{"Key":"the cursor","Fragments":["over"]},{"Key":"cursor over","Fragments":["them"]},{"Key":"over them","Fragments":["kind","together"]},{"Key":"them kind","Fragments":["of"]},{"Key":"of made","Fragments":["Hungarian"]},{"Key":"made Hungarian","Fragments":["notation"]},{"Key":"Hungarian notation","Fragments":["useless","would"]},{"Key":"notation useless","Fragments":["anyway."]},{"Key":"real problem","Fragments":["I"]},{"Key":"problem I","Fragments":["have","would"]},{"Key":"it's going","Fragments":["to","to","to"]},{"Key":"be really","Fragments":["slow.","unclear"]},{"Key":"really slow.","Fragments":["You"]},{"Key":"slow. You","Fragments":["have"]},{"Key":"have four","Fragments":["full"]},{"Key":"four full","Fragments":["regex"]},{"Key":"full regex","Fragments":["searches"]},{"Key":"regex searches","Fragments":["over","return"]},{"Key":"searches over","Fragments":["the"]},{"Key":"input string.","Fragments":["This","The","Yes,","It","It"]},{"Key":"This *can*","Fragments":["be"]},{"Key":"*can* be","Fragments":["solved"]},{"Key":"solved both","Fragments":["with"]},{"Key":"both with","Fragments":["fewer","upper"]},{"Key":"fewer iterations","Fragments":["(down"]},{"Key":"iterations (down","Fragments":["to"]},{"Key":"(down to","Fragments":["one"]},{"Key":"theory but","Fragments":["it"]},{"Key":"get pretty","Fragments":["messy)","verbose"]},{"Key":"pretty messy)","Fragments":["and"]},{"Key":"messy) and","Fragments":["without"]},{"Key":"using regex","Fragments":["which","makes","instead","I'm","libraries,","and","in"]},{"Key":"regex which","Fragments":["will","check"]},{"Key":"solid first","Fragments":["solution."]},{"Key":"1) That","Fragments":["would"]},{"Key":"certainly work,","Fragments":["and"]},{"Key":"and perhaps","Fragments":["this","more","another"]},{"Key":"a fault","Fragments":["with"]},{"Key":"fault with","Fragments":["my"]},{"Key":"my thinking","Fragments":["but"]},{"Key":"thinking but","Fragments":["it"]},{"Key":"make me","Fragments":["really"]},{"Key":"me really","Fragments":["uncomfortable"]},{"Key":"really uncomfortable","Fragments":["to"]},{"Key":"uncomfortable to","Fragments":["see"]},{"Key":"a greater","Fragments":["/","range"]},{"Key":"greater /","Fragments":["less","less"]},{"Key":"/ less","Fragments":["operation","thing","maintainable"]},{"Key":"less operation","Fragments":["on"]},{"Key":"operation on","Fragments":["chars.","each"]},{"Key":"on chars.","Fragments":["I"]},{"Key":"chars. I","Fragments":["know"]},{"Key":"in c++","Fragments":["chars"]},{"Key":"c++ chars","Fragments":["are"]},{"Key":"are uints","Fragments":["and"]},{"Key":"uints and","Fragments":["all"]},{"Key":"all that,","Fragments":["but","I"]},{"Key":"but 'a'","Fragments":["is"]},{"Key":"'a' is","Fragments":["not"]},{"Key":"not greater","Fragments":["or"]},{"Key":"than 'b'.","Fragments":["The"]},{"Key":"'b'. The","Fragments":["statement"]},{"Key":"The statement","Fragments":["is"]},{"Key":"is absurd!","Fragments":["The"]},{"Key":"absurd! The","Fragments":["only"]},{"Key":"reason the","Fragments":["greater"]},{"Key":"the greater","Fragments":["/"]},{"Key":"less thing","Fragments":["works"]},{"Key":"thing works","Fragments":["at"]},{"Key":"works at","Fragments":["all"]},{"Key":"and number","Fragments":["characters"]},{"Key":"number characters","Fragments":["are"]},{"Key":"be misunderstanding","Fragments":["this,"]},{"Key":"misunderstanding this,","Fragments":["but"]},{"Key":"but surely","Fragments":["if","they"]},{"Key":"surely if","Fragments":["it"]},{"Key":"is ```num_l```","Fragments":["is"]},{"Key":"```num_l``` is","Fragments":["defined"]},{"Key":"defined inside","Fragments":["or","namespace"]},{"Key":"inside or","Fragments":["outside"]},{"Key":"or outside","Fragments":["the","of"]},{"Key":"loop it","Fragments":["is","will"]},{"Key":"still in","Fragments":["the","there."]},{"Key":"same scope,","Fragments":["the"]},{"Key":"scope, the","Fragments":["scope"]},{"Key":"the scope","Fragments":["of","of","of","of","of","of","of","of","operator","of"]},{"Key":"scope of","Fragments":["the","`i`","such","visibility.","visibility","variable","namespace","the","this"]},{"Key":"function ```hexadecimal::convert```.","Fragments":["I"]},{"Key":"```hexadecimal::convert```. I","Fragments":["wasn't"]},{"Key":"were separate","Fragments":["scopes"]},{"Key":"separate scopes","Fragments":["for"]},{"Key":"3) Thanks,","Fragments":["I"]},{"Key":"give them","Fragments":["a","\"internal","and"]},{"Key":"them a","Fragments":["try.","pull"]},{"Key":"try. I","Fragments":["have"]},{"Key":"honest an","Fragments":["say"]},{"Key":"an say","Fragments":["that"]},{"Key":"the ```sum","Fragments":["\u003c\u003c="]},{"Key":"```sum \u003c\u003c=","Fragments":["4```"]},{"Key":"\u003c\u003c= 4```","Fragments":["would"]},{"Key":"4``` would","Fragments":["be"]},{"Key":"be equivalent","Fragments":["to"]},{"Key":"to \"sum","Fragments":["="]},{"Key":"\"sum =","Fragments":["sum"]},{"Key":"= sum","Fragments":["*"]},{"Key":"sum *","Fragments":["2"]},{"Key":"of 4\"","Fragments":["using"]},{"Key":"4\" using","Fragments":["the"]},{"Key":"the bitshift","Fragments":["operator."]},{"Key":"bitshift operator.","Fragments":["I"]},{"Key":"operator. I","Fragments":["have"]},{"Key":"what ```|=```","Fragments":["means"]},{"Key":"```|=``` means","Fragments":["so"]},{"Key":"means so","Fragments":["I"]},{"Key":"Don't see","Fragments":["`\u003c`","`char`"]},{"Key":"see `\u003c`","Fragments":["as"]},{"Key":"`\u003c` as","Fragments":["`\u003e`"]},{"Key":"as `\u003e`","Fragments":["“lesser"]},{"Key":"`\u003e` “lesser","Fragments":["than”"]},{"Key":"“lesser than”","Fragments":["or"]},{"Key":"than” or","Fragments":["“greater"]},{"Key":"or “greater","Fragments":["than“,"]},{"Key":"“greater than“,","Fragments":["but"]},{"Key":"than“, but","Fragments":["as"]},{"Key":"as “before”","Fragments":["or"]},{"Key":"“before” or","Fragments":["“after”."]},{"Key":"or “after”.","Fragments":["Then"]},{"Key":"“after”. Then","Fragments":["it"]},{"Key":"Then it","Fragments":["makes","duplicates","checks"]},{"Key":"on chars","Fragments":["as"]},{"Key":"chars as","Fragments":["well."]},{"Key":"well. (at","Fragments":["least"]},{"Key":"(at least","Fragments":["as"]},{"Key":"of different","Fragments":["case)","characters","lengths."]},{"Key":"* Just","Fragments":["try:"]},{"Key":"$ g++","Fragments":["foo.cpp","-O3"]},{"Key":" foo.cpp:","Fragments":["In"]},{"Key":"foo.cpp: In","Fragments":["function"]},{"Key":"function ‘int","Fragments":["main()’:","main()’:"]},{"Key":" foo.cpp:6:10:","Fragments":["error:"]},{"Key":"foo.cpp:6:10: error:","Fragments":["‘foo’"]},{"Key":"error: ‘foo’","Fragments":["was"]},{"Key":"‘foo’ was","Fragments":["not"]},{"Key":"not declared","Fragments":["in","in"]},{"Key":"$ cat","Fragments":["foo.cpp","capacity.cpp"]},{"Key":"int main()","Fragments":["{","{","{"]},{"Key":"i \u003c=","Fragments":["10;"]},{"Key":"\u003c= 10;","Fragments":["++i)"]},{"Key":"10; ++i)","Fragments":["{"]},{"Key":"int foo","Fragments":["="]},{"Key":"foo =","Fragments":["0;"]},{"Key":"I'll explain","Fragments":["that"]},{"Key":"explain that","Fragments":["other"]},{"Key":"took FrostyTopaz's","Fragments":["comments"]},{"Key":"FrostyTopaz's comments","Fragments":["to"]},{"Key":"to heart","Fragments":["that"]},{"Key":"heart that","Fragments":["the"]},{"Key":"first implementation","Fragments":["would"]},{"Key":"be slow.","Fragments":[":("]},{"Key":"To speed","Fragments":["up"]},{"Key":"speed up","Fragments":["the","the","`total()`"]},{"Key":"regex calls","Fragments":["and"]},{"Key":"calls and","Fragments":["now"]},{"Key":"now the","Fragments":["code","variable","code"]},{"Key":"much longer.","Fragments":["I"]},{"Key":"longer. I","Fragments":["liked"]},{"Key":"liked the","Fragments":["shorter","exercise.","idea","tack","suggestion"]},{"Key":"the shorter","Fragments":["version","code","one.","of","code."]},{"Key":"shorter version","Fragments":["because"]},{"Key":"version because","Fragments":["it"]},{"Key":"take in","Fragments":["but","\"real\"","a","the","a","the"]},{"Key":"this version","Fragments":["of","works","cannot","is","should","here","I","I"]},{"Key":"bob should","Fragments":["be","give,"]},{"Key":"a considerably","Fragments":["faster."]},{"Key":"string validations","Fragments":["contain"]},{"Key":"validations contain","Fragments":["early"]},{"Key":"contain early","Fragments":["returns"]},{"Key":"early returns","Fragments":["to"]},{"Key":"least amount","Fragments":["of"]},{"Key":"the braces","Fragments":["back"]},{"Key":"braces back","Fragments":["around"]},{"Key":"back around","Fragments":["the"]},{"Key":"statement if-elses.","Fragments":["I"]},{"Key":"if-elses. I","Fragments":["like"]},{"Key":"shorter code","Fragments":["as"]},{"Key":"its pythonic","Fragments":["and"]},{"Key":"pythonic and","Fragments":["gets"]},{"Key":"and gets","Fragments":["ride","the"]},{"Key":"gets ride","Fragments":["of"]},{"Key":"ride of","Fragments":["a"]},{"Key":"little noise","Fragments":["but"]},{"Key":"noise but","Fragments":["I"]},{"Key":"think its","Fragments":["more"]},{"Key":"more error","Fragments":["prone"]},{"Key":"error prone","Fragments":["in","to"]},{"Key":"prone in","Fragments":["the"]},{"Key":"unnecessary Hungarian","Fragments":["notation."]},{"Key":"notation. It","Fragments":["is"]},{"Key":"little cleaner","Fragments":["now."]},{"Key":"I picked","Fragments":["up"]},{"Key":"picked up","Fragments":["that"]},{"Key":"that habit","Fragments":["reading"]},{"Key":"habit reading","Fragments":["through"]},{"Key":"reading through","Fragments":["www.learncpp.com","some"]},{"Key":"through www.learncpp.com","Fragments":["tutorials."]},{"Key":" `a","Fragments":["\u003c\u003c"]},{"Key":"`a \u003c\u003c","Fragments":["b`"]},{"Key":"\u003c\u003c b`","Fragments":["does"]},{"Key":"b` does","Fragments":["shift"]},{"Key":"does shift","Fragments":["the"]},{"Key":"shift the","Fragments":["bits","whole"]},{"Key":"the bits","Fragments":["of"]},{"Key":"bits of","Fragments":["`a`","information"]},{"Key":"of `a`","Fragments":["by"]},{"Key":"`a` by","Fragments":["`b`","4"]},{"Key":"by `b`","Fragments":["digits"]},{"Key":"`b` digits","Fragments":["to"]},{"Key":"digits to","Fragments":["the"]},{"Key":"the left.","Fragments":["since"]},{"Key":"left. since","Fragments":["each"]},{"Key":"since each","Fragments":["digit","name","letter"]},{"Key":"digit in","Fragments":["a","hex"]},{"Key":"a binary","Fragments":["system","function."]},{"Key":"binary system","Fragments":["is"]},{"Key":"system is","Fragments":["worth","recognized.\u003c/li\u003e"]},{"Key":"worth one","Fragments":["more"]},{"Key":"more power","Fragments":["of"]},{"Key":"of two,","Fragments":["a"]},{"Key":"two, a","Fragments":["shift"]},{"Key":"a shift","Fragments":["by","in"]},{"Key":"shift by","Fragments":["1"]},{"Key":"1 means","Fragments":["multiplying"]},{"Key":"means multiplying","Fragments":["by","by"]},{"Key":"multiplying by","Fragments":["2.","4","16,","16,"]},{"Key":"by 2.","Fragments":["Shifting"]},{"Key":"2. Shifting","Fragments":["by"]},{"Key":"Shifting by","Fragments":["2"]},{"Key":"by 2","Fragments":["is","since","is"]},{"Key":"2 is","Fragments":["multiplying","the"]},{"Key":"is multiplying","Fragments":["by"]},{"Key":"4 (2*2","Fragments":["="]},{"Key":"(2*2 =","Fragments":["2^2),"]},{"Key":"= 2^2),","Fragments":["shifting"]},{"Key":"2^2), shifting","Fragments":["by"]},{"Key":"shifting by","Fragments":["3"]},{"Key":"by 3","Fragments":["means"]},{"Key":"3 means","Fragments":["2*2*2"]},{"Key":"means 2*2*2","Fragments":["="]},{"Key":"2*2*2 =","Fragments":["2^3"]},{"Key":"= 2^3","Fragments":["and"]},{"Key":"2^3 and","Fragments":["so"]},{"Key":"on. Since","Fragments":["we"]},{"Key":"multiply by","Fragments":["16,"]},{"Key":"by 16,","Fragments":["we","and","but"]},{"Key":"16, we","Fragments":["need"]},{"Key":"a `b`","Fragments":["that"]},{"Key":"`b` that","Fragments":["means"]},{"Key":"that means","Fragments":["multiplying","looping","that"]},{"Key":"16, and","Fragments":["16"]},{"Key":"and 16","Fragments":["is"]},{"Key":"16 is","Fragments":["2^4,"]},{"Key":"is 2^4,","Fragments":["so"]},{"Key":"2^4, so","Fragments":["`b`"]},{"Key":"so `b`","Fragments":["needs"]},{"Key":"`b` needs","Fragments":["to"]},{"Key":" `|`","Fragments":["means"]},{"Key":"`|` means","Fragments":["bit-wise-or."]},{"Key":"means bit-wise-or.","Fragments":["So"]},{"Key":"bit-wise-or. So","Fragments":["`a"]},{"Key":"So `a","Fragments":["|="]},{"Key":"`a |=","Fragments":["b`"]},{"Key":"|= b`","Fragments":["means,"]},{"Key":"b` means,","Fragments":["`a"]},{"Key":"means, `a","Fragments":["="]},{"Key":"`a =","Fragments":["a"]},{"Key":"a |","Fragments":["b`."]},{"Key":"| b`.","Fragments":["We"]},{"Key":"b`. We","Fragments":["know"]},{"Key":"We know","Fragments":["`b`"]},{"Key":"know `b`","Fragments":["is"]},{"Key":"`b` is","Fragments":["at"]},{"Key":"most 4","Fragments":["bits"]},{"Key":"4 bits","Fragments":["wide,","left,","are"]},{"Key":"bits wide,","Fragments":["while"]},{"Key":"wide, while","Fragments":["we"]},{"Key":"while we","Fragments":["shifted"]},{"Key":"we shifted","Fragments":["`a`"]},{"Key":"shifted `a`","Fragments":["by"]},{"Key":"bits left,","Fragments":["so"]},{"Key":"left, so","Fragments":["the"]},{"Key":"last 4","Fragments":["bits"]},{"Key":"bits are","Fragments":["0."]},{"Key":"are 0.","Fragments":["That"]},{"Key":"0. That","Fragments":["again"]},{"Key":"That again","Fragments":["means,"]},{"Key":"again means,","Fragments":["that"]},{"Key":"means, that","Fragments":["the"]},{"Key":"is identical","Fragments":["to"]},{"Key":"just adding,","Fragments":["but"]},{"Key":"adding, but","Fragments":["a"]},{"Key":"bit faster","Fragments":["than","now...","and"]},{"Key":"using `+`","Fragments":["because"]},{"Key":"`+` because","Fragments":["of"]},{"Key":"underlying assembler","Fragments":["instructions."]},{"Key":" `ADD`","Fragments":["in"]},{"Key":"`ADD` in","Fragments":["assembler"]},{"Key":"in assembler","Fragments":["is"]},{"Key":"assembler is","Fragments":["some"]},{"Key":"some kind-of-recursively","Fragments":["applyied"]},{"Key":"kind-of-recursively applyied","Fragments":["bitwise-xor"]},{"Key":"applyied bitwise-xor","Fragments":["with"]},{"Key":"bitwise-xor with","Fragments":["carriage"]},{"Key":"with carriage","Fragments":["handling."]},{"Key":"carriage handling.","Fragments":["All"]},{"Key":"handling. All","Fragments":["this"]},{"Key":"All this","Fragments":["carriage"]},{"Key":"this carriage","Fragments":["handling"]},{"Key":"carriage handling","Fragments":["can"]},{"Key":"handling can","Fragments":["be"]},{"Key":"be ommited,","Fragments":["since"]},{"Key":"ommited, since","Fragments":["you"]},{"Key":"know already","Fragments":["in"]},{"Key":"in advance,","Fragments":["there"]},{"Key":"advance, there","Fragments":["can"]},{"Key":"there can","Fragments":["be","be"]},{"Key":"no carriage.","Fragments":["You"]},{"Key":"carriage. You","Fragments":["do"]},{"Key":"You do","Fragments":["tell"]},{"Key":"do tell","Fragments":["this"]},{"Key":"tell this","Fragments":["the"]},{"Key":"the C(++)","Fragments":["compiler"]},{"Key":"C(++) compiler","Fragments":["by"]},{"Key":"compiler by","Fragments":["using"]},{"Key":"using bitwise-or","Fragments":["(`|`)."]},{"Key":"structure the","Fragments":["function","type","program"]},{"Key":"doesn't execute","Fragments":["unnecessary"]},{"Key":"execute unnecessary","Fragments":["checks"]},{"Key":"unnecessary checks","Fragments":["by"]},{"Key":"checks by","Fragments":["putting"]},{"Key":"by putting","Fragments":["important","an"]},{"Key":"putting important","Fragments":["decisions"]},{"Key":"important decisions","Fragments":["first"]},{"Key":"decisions first","Fragments":["and"]},{"Key":"returning on","Fragments":["matches."]},{"Key":"This link","Fragments":["explains"]},{"Key":"link explains","Fragments":["the"]},{"Key":"problem: http://stackoverflow.com/questions/20531335/compilation-error-with-for-each-loop-in-c-vs2010","Fragments":["."]},{"Key":"http://stackoverflow.com/questions/20531335/compilation-error-with-for-each-loop-in-c-vs2010 .","Fragments":["This"]},{"Key":". This","Fragments":["is"]},{"Key":"is visual","Fragments":["studio"]},{"Key":"visual studio","Fragments":["specific"]},{"Key":"studio specific","Fragments":["syntax."]},{"Key":"Ah, thanks!","Fragments":["It's","I"]},{"Key":"thanks! It's","Fragments":["weird"]},{"Key":"It's weird","Fragments":["that"]},{"Key":"weird that","Fragments":["the"]},{"Key":"answer gets","Fragments":["it"]},{"Key":"gets it","Fragments":["sort-of"]},{"Key":"it sort-of","Fragments":["wrong,"]},{"Key":"sort-of wrong,","Fragments":["for_each"]},{"Key":"wrong, for_each","Fragments":["is"]},{"Key":"for_each is","Fragments":["yet"]},{"Key":"is yet","Fragments":["another"]},{"Key":"thing altogether.","Fragments":["I"]},{"Key":"altogether. I","Fragments":["prefer"]},{"Key":"second form","Fragments":["is"]},{"Key":"a syntax","Fragments":["that"]},{"Key":"syntax that","Fragments":["leaked"]},{"Key":"that leaked","Fragments":["into"]},{"Key":"leaked into","Fragments":["the"]},{"Key":"compiler from","Fragments":["C++/CLI"]},{"Key":"from C++/CLI","Fragments":["(an"]},{"Key":"C++/CLI (an","Fragments":["entirely"]},{"Key":"(an entirely","Fragments":["different"]},{"Key":"entirely different","Fragments":["language"]},{"Key":"different language","Fragments":["that","when"]},{"Key":"that targets","Fragments":["the"]},{"Key":"targets the","Fragments":[".NET"]},{"Key":".NET runtime).","Fragments":["I"]},{"Key":"runtime). I","Fragments":["filled"]},{"Key":"filled a","Fragments":["bug"]},{"Key":"bug on","Fragments":["this","\""]},{"Key":"while back.","Fragments":["If"]},{"Key":"back. If","Fragments":["you"]},{"Key":"the /Za","Fragments":["switch,"]},{"Key":"/Za switch,","Fragments":["it"]},{"Key":"switch, it","Fragments":["will"]},{"Key":"will disable","Fragments":["this"]},{"Key":"disable this","Fragments":["language"]},{"Key":"this language","Fragments":["extension."]},{"Key":"language extension.","Fragments":["You"]},{"Key":"extension. You","Fragments":["will"]},{"Key":"will need","Fragments":["to","to","to"]},{"Key":"the C++03","Fragments":["for"]},{"Key":"C++03 for","Fragments":["loop"]},{"Key":"loop syntax","Fragments":["using","in"]},{"Key":"syntax using","Fragments":["an"]},{"Key":"version does","Fragments":["support"]},{"Key":"does support","Fragments":["the"]},{"Key":"support the","Fragments":["new"]},{"Key":"new syntax:","Fragments":["https://msdn.microsoft.com/en-us/library/jj203382.aspx"]},{"Key":" as","Fragments":["that"]},{"Key":"that link","Fragments":["mentions"]},{"Key":"link mentions","Fragments":["you"]},{"Key":"mentions you","Fragments":["need"]},{"Key":"to //","Fragments":["compile"]},{"Key":"// compile","Fragments":["by"]},{"Key":"compile by","Fragments":["using:"]},{"Key":"by using:","Fragments":["cl"]},{"Key":"using: cl","Fragments":["/EHsc"]},{"Key":"cl /EHsc","Fragments":["/nologo"]},{"Key":"/EHsc /nologo","Fragments":["/W4"]},{"Key":"If CMake","Fragments":["isn't"]},{"Key":"CMake isn't","Fragments":["giving"]},{"Key":"isn't giving","Fragments":["you"]},{"Key":"giving you","Fragments":["those"]},{"Key":"you those","Fragments":["arguments"]},{"Key":"those arguments","Fragments":["you","the"]},{"Key":"arguments you","Fragments":["might"]},{"Key":"might try","Fragments":["using","a"]},{"Key":"a target_compile_features","Fragments":["-"]},{"Key":"target_compile_features -","Fragments":["or"]},{"Key":"- or","Fragments":["just","insert"]},{"Key":"just hard-code","Fragments":["those"]},{"Key":"hard-code those","Fragments":["arguments"]},{"Key":"arguments the","Fragments":["way","correct"]},{"Key":"original author","Fragments":["did"]},{"Key":"author did","Fragments":["for"]},{"Key":"did for","Fragments":["g++","the"]},{"Key":"for g++","Fragments":["(arguably"]},{"Key":"g++ (arguably","Fragments":["unnecessarily)."]},{"Key":"hi trophy,","Fragments":["I"]},{"Key":"trophy, I","Fragments":["gathered"]},{"Key":"gathered you","Fragments":["meant"]},{"Key":"meant new","Fragments":["job,"]},{"Key":"new job,","Fragments":["was"]},{"Key":"job, was","Fragments":["wondering"]},{"Key":"wondering what","Fragments":["field"]},{"Key":"what field","Fragments":["involved"]},{"Key":"field involved","Fragments":["lots"]},{"Key":"involved lots","Fragments":["of"]},{"Key":"of floating","Fragments":["point"]},{"Key":"point math.","Fragments":["I"]},{"Key":"math. I","Fragments":["do"]},{"Key":"something not","Fragments":["totally"]},{"Key":"not totally","Fragments":["unrelated,"]},{"Key":"totally unrelated,","Fragments":["but"]},{"Key":"unrelated, but","Fragments":["we're"]},{"Key":"but we're","Fragments":["not","not"]},{"Key":"we're not","Fragments":["doing","going","copying","talking"]},{"Key":"doing low","Fragments":["latency"]},{"Key":"low latency","Fragments":["calculations,"]},{"Key":"latency calculations,","Fragments":["so"]},{"Key":"calculations, so","Fragments":["most"]},{"Key":"work happens","Fragments":["on"]},{"Key":"happens on","Fragments":["the"]},{"Key":"add some","Fragments":["form","logic","extra","extra"]},{"Key":"some form","Fragments":["of"]},{"Key":"form of","Fragments":["precision","flattery,"]},{"Key":"of precision","Fragments":["to"]},{"Key":"precision to","Fragments":["this,"]},{"Key":"to this,","Fragments":["just"]},{"Key":"this, just","Fragments":["to"]},{"Key":"work through","Fragments":["it,"]},{"Key":"through it,","Fragments":["but"]},{"Key":"the author","Fragments":["you","you"]},{"Key":"author you","Fragments":["linked","linked"]},{"Key":"you linked","Fragments":["to","to"]},{"Key":"linked to","Fragments":["has","has"]},{"Key":"to has","Fragments":["so","a","some"]},{"Key":"has so","Fragments":["many"]},{"Key":"many points,","Fragments":["all"]},{"Key":"points, all","Fragments":["with"]},{"Key":"all with","Fragments":["caveats","efficiency"]},{"Key":"with caveats","Fragments":["and"]},{"Key":"caveats and","Fragments":["traps,"]},{"Key":"and traps,","Fragments":["i'm"]},{"Key":"traps, i'm","Fragments":["not"]},{"Key":"i'm not","Fragments":["certain","familiar"]},{"Key":"not certain","Fragments":["which"]},{"Key":"certain which","Fragments":["way"]},{"Key":"which way","Fragments":["to","has"]},{"Key":"did i","Fragments":["have"]},{"Key":"i have","Fragments":["to","my","tested","my"]},{"Key":"write ```std::size_t```?","Fragments":["In"]},{"Key":"```std::size_t```? In","Fragments":["perhaps"]},{"Key":"In perhaps","Fragments":["the"]},{"Key":"perhaps the","Fragments":["rna","more"]},{"Key":"the rna","Fragments":["exercise"]},{"Key":"rna exercise","Fragments":["i"]},{"Key":"exercise i","Fragments":["could","became"]},{"Key":"i wrote","Fragments":["```size_t```","this"]},{"Key":"wrote ```size_t```","Fragments":["in"]},{"Key":"```size_t``` in","Fragments":["this"]},{"Key":"i became","Fragments":["an"]},{"Key":"became an","Fragments":["```not"]},{"Key":"an ```not","Fragments":["declared"]},{"Key":"```not declared","Fragments":["in"]},{"Key":"this scope```","Fragments":["error"]},{"Key":" @hosea","Fragments":["Thanks"]},{"Key":"@hosea Thanks","Fragments":["again"]},{"Key":"appreciate them.","Fragments":[":)","That"]},{"Key":"1) I","Fragments":["come","think"]},{"Key":"a mathematical","Fragments":["background,"]},{"Key":"mathematical background,","Fragments":["so"]},{"Key":"background, so","Fragments":["```\u003c```","trying"]},{"Key":"so ```\u003c```","Fragments":["and"]},{"Key":"```\u003c``` and","Fragments":["```\u003e```"]},{"Key":"and ```\u003e```","Fragments":["are"]},{"Key":"```\u003e``` are","Fragments":["mathematical"]},{"Key":"are mathematical","Fragments":["operators"]},{"Key":"mathematical operators","Fragments":["for"]},{"Key":"operators for","Fragments":["me,"]},{"Key":"of work","Fragments":["to","for","to"]},{"Key":"work to","Fragments":["persuade","create","manipulate","do."]},{"Key":"suggested syntax","Fragments":["would"]},{"Key":"syntax would","Fragments":["be","have"]},{"Key":"same thing,","Fragments":["so","although","but","and"]},{"Key":"thing, so","Fragments":["in"]},{"Key":"so in","Fragments":["this","functions"]},{"Key":"know that!","Fragments":["Neat!"]},{"Key":"that! Neat!","Fragments":[":)"]},{"Key":"tried benchmarking","Fragments":["the"]},{"Key":"benchmarking the","Fragments":["alternatives,"]},{"Key":"the alternatives,","Fragments":["bitwise"]},{"Key":"alternatives, bitwise","Fragments":["operators"]},{"Key":"bitwise operators","Fragments":["vs"]},{"Key":"operators vs","Fragments":["numerical"]},{"Key":"vs numerical","Fragments":["ones,"]},{"Key":"numerical ones,","Fragments":["and"]},{"Key":"ones, and","Fragments":["the","added"]},{"Key":"results were","Fragments":["rather","as"]},{"Key":"rather surprising.","Fragments":["First"]},{"Key":"surprising. First","Fragments":["the"]},{"Key":"First the","Fragments":["code:"]},{"Key":"int char_to_int(char","Fragments":["letter){"]},{"Key":"if ((int)letter","Fragments":["\u003e","\u003e"]},{"Key":"((int)letter \u003e","Fragments":["47","96"]},{"Key":"\u003e 47","Fragments":["\u0026\u0026"]},{"Key":"47 \u0026\u0026","Fragments":["(int)letter"]},{"Key":"\u0026\u0026 (int)letter","Fragments":["\u003c","\u003c"]},{"Key":"(int)letter \u003c","Fragments":["58){","103){"]},{"Key":"return letter","Fragments":["-","+"]},{"Key":"letter -","Fragments":["'0';"]},{"Key":" }","Fragments":["else","else"]},{"Key":"} else","Fragments":["if","{"]},{"Key":"\u003e 96","Fragments":["\u0026\u0026"]},{"Key":"96 \u0026\u0026","Fragments":["(int)letter"]},{"Key":"letter +","Fragments":["10"]},{"Key":"+ 10","Fragments":["-"]},{"Key":"10 -","Fragments":["'a';"]},{"Key":"return 16;","Fragments":["/*"]},{"Key":"16; /*","Fragments":["smallest"]},{"Key":"/* smallest","Fragments":["number"]},{"Key":"smallest number","Fragments":["that"]},{"Key":"number that","Fragments":["is"]},{"Key":"in hex","Fragments":["*/"]},{"Key":"void bit(const","Fragments":["std::string"]},{"Key":"bit(const std::string","Fragments":["\u0026str_in){"]},{"Key":"int sum","Fragments":["=","="]},{"Key":"sum =","Fragments":["0;","0;"]},{"Key":"(char l","Fragments":[":",":"]},{"Key":"l :","Fragments":["str_in){","str_in){"]},{"Key":"int num_l","Fragments":["=","="]},{"Key":"num_l =","Fragments":["char_to_int(l);","char_to_int(l);"]},{"Key":"sum \u003c\u003c=","Fragments":["4;"]},{"Key":"sum |=","Fragments":["num_l;"]},{"Key":"void num(const","Fragments":["std::string"]},{"Key":"num(const std::string","Fragments":["\u0026str_in){"]},{"Key":"sum *=","Fragments":["16;"]},{"Key":" BENCHMARK(hex,","Fragments":["BITSHIFT_OPERATORS,","REGULAR_BINARY_OPERATORS,"]},{"Key":"BENCHMARK(hex, BITSHIFT_OPERATORS,","Fragments":["1000,"]},{"Key":"BITSHIFT_OPERATORS, 1000,","Fragments":["10000)"]},{"Key":"BENCHMARK(hex, REGULAR_BINARY_OPERATORS,","Fragments":["1000,"]},{"Key":"REGULAR_BINARY_OPERATORS, 1000,","Fragments":["10000)"]},{"Key":"The results","Fragments":["were","are","are"]},{"Key":"were as","Fragments":["follows:"]},{"Key":"] hex.BITSHIFT_OPERATORS","Fragments":["(1000","(2246.888000"]},{"Key":"hex.BITSHIFT_OPERATORS (1000","Fragments":["runs,"]},{"Key":"runs, 10000","Fragments":["iterations","iterations"]},{"Key":"10000 iterations","Fragments":["per","per"]},{"Key":"hex.BITSHIFT_OPERATORS (2246.888000","Fragments":["ms)"]},{"Key":"time: 2246.888","Fragments":["us"]},{"Key":"Fastest: 1946.537","Fragments":["us"]},{"Key":"1946.537 us","Fragments":["(-300.351"]},{"Key":"us (-300.351","Fragments":["us"]},{"Key":"(-300.351 us","Fragments":["/"]},{"Key":"/ -13.367","Fragments":["%)","%)"]},{"Key":"Slowest: 2792.537","Fragments":["us"]},{"Key":"2792.537 us","Fragments":["(+545.649"]},{"Key":"us (+545.649","Fragments":["us"]},{"Key":"(+545.649 us","Fragments":["/"]},{"Key":"/ +24.285","Fragments":["%)","%)"]},{"Key":"performance: 445.06001","Fragments":["runs/s"]},{"Key":"performance: 513.73285","Fragments":["runs/s"]},{"Key":"513.73285 runs/s","Fragments":["(+68.67284"]},{"Key":"runs/s (+68.67284","Fragments":["runs/s"]},{"Key":"(+68.67284 runs/s","Fragments":["/"]},{"Key":"/ +15.43002","Fragments":["%)","%)"]},{"Key":"performance: 358.09731","Fragments":["runs/s"]},{"Key":"358.09731 runs/s","Fragments":["(-86.96270"]},{"Key":"runs/s (-86.96270","Fragments":["runs/s"]},{"Key":"(-86.96270 runs/s","Fragments":["/"]},{"Key":"/ -19.53954","Fragments":["%)","%)"]},{"Key":"time: 0.225","Fragments":["us"]},{"Key":"Fastest: 0.195","Fragments":["us"]},{"Key":"0.195 us","Fragments":["(-0.030"]},{"Key":"us (-0.030","Fragments":["us"]},{"Key":"(-0.030 us","Fragments":["/"]},{"Key":"Slowest: 0.279","Fragments":["us"]},{"Key":"0.279 us","Fragments":["(+0.055"]},{"Key":"us (+0.055","Fragments":["us"]},{"Key":"(+0.055 us","Fragments":["/"]},{"Key":"performance: 4450600.11892","Fragments":["iterations/s"]},{"Key":"performance: 5137328.49671","Fragments":["iterations/s"]},{"Key":"5137328.49671 iterations/s","Fragments":["(+686728.37779"]},{"Key":"iterations/s (+686728.37779","Fragments":["iterations/s"]},{"Key":"(+686728.37779 iterations/s","Fragments":["/"]},{"Key":"performance: 3580973.14378","Fragments":["iterations/s"]},{"Key":"3580973.14378 iterations/s","Fragments":["(-869626.97514"]},{"Key":"iterations/s (-869626.97514","Fragments":["iterations/s"]},{"Key":"(-869626.97514 iterations/s","Fragments":["/"]},{"Key":"] hex.REGULAR_BINARY_OPERATORS","Fragments":["(1000","(2193.754000"]},{"Key":"hex.REGULAR_BINARY_OPERATORS (1000","Fragments":["runs,"]},{"Key":"hex.REGULAR_BINARY_OPERATORS (2193.754000","Fragments":["ms)"]},{"Key":"time: 2193.754","Fragments":["us"]},{"Key":"Fastest: 1936.537","Fragments":["us"]},{"Key":"1936.537 us","Fragments":["(-257.217"]},{"Key":"us (-257.217","Fragments":["us"]},{"Key":"(-257.217 us","Fragments":["/"]},{"Key":"/ -11.725","Fragments":["%)","%)"]},{"Key":"Slowest: 2611.537","Fragments":["us"]},{"Key":"2611.537 us","Fragments":["(+417.783"]},{"Key":"us (+417.783","Fragments":["us"]},{"Key":"(+417.783 us","Fragments":["/"]},{"Key":"/ +19.044","Fragments":["%)","%)"]},{"Key":"performance: 455.83962","Fragments":["runs/s"]},{"Key":"performance: 516.38569","Fragments":["runs/s"]},{"Key":"516.38569 runs/s","Fragments":["(+60.54607"]},{"Key":"runs/s (+60.54607","Fragments":["runs/s"]},{"Key":"(+60.54607 runs/s","Fragments":["/"]},{"Key":"/ +13.28232","Fragments":["%)","%)"]},{"Key":"performance: 382.91627","Fragments":["runs/s"]},{"Key":"382.91627 runs/s","Fragments":["(-72.92336"]},{"Key":"runs/s (-72.92336","Fragments":["runs/s"]},{"Key":"(-72.92336 runs/s","Fragments":["/"]},{"Key":"/ -15.99759","Fragments":["%)","%)"]},{"Key":"time: 0.219","Fragments":["us"]},{"Key":"Fastest: 0.194","Fragments":["us"]},{"Key":"0.194 us","Fragments":["(-0.026"]},{"Key":"us (-0.026","Fragments":["us"]},{"Key":"(-0.026 us","Fragments":["/"]},{"Key":"Slowest: 0.261","Fragments":["us"]},{"Key":"0.261 us","Fragments":["(+0.042"]},{"Key":"us (+0.042","Fragments":["us"]},{"Key":"(+0.042 us","Fragments":["/"]},{"Key":"performance: 4558396.24680","Fragments":["iterations/s"]},{"Key":"performance: 5163856.92605","Fragments":["iterations/s"]},{"Key":"5163856.92605 iterations/s","Fragments":["(+605460.67925"]},{"Key":"iterations/s (+605460.67925","Fragments":["iterations/s"]},{"Key":"(+605460.67925 iterations/s","Fragments":["/"]},{"Key":"performance: 3829162.67317","Fragments":["iterations/s"]},{"Key":"3829162.67317 iterations/s","Fragments":["(-729233.57363"]},{"Key":"iterations/s (-729233.57363","Fragments":["iterations/s"]},{"Key":"(-729233.57363 iterations/s","Fragments":["/"]},{"Key":"using bitshift","Fragments":["operators"]},{"Key":"bitshift operators","Fragments":["is"]},{"Key":"operators is","Fragments":["ever","the"]},{"Key":"is ever","Fragments":["so"]},{"Key":"ever so","Fragments":["slightly"]},{"Key":"so slightly","Fragments":["slower"]},{"Key":"slightly slower","Fragments":["than"]},{"Key":"the ususal","Fragments":["binary"]},{"Key":"ususal binary","Fragments":["operators,"]},{"Key":"binary operators,","Fragments":["accoring"]},{"Key":"operators, accoring","Fragments":["to"]},{"Key":"accoring to","Fragments":["the"]},{"Key":"the hayai","Fragments":["library"]},{"Key":"hayai library","Fragments":["at"]},{"Key":"library at","Fragments":["least."]},{"Key":"benchmark surprises.","Fragments":["What"]},{"Key":"surprises. What","Fragments":["optimisation"]},{"Key":"What optimisation","Fragments":["level"]},{"Key":"optimisation level","Fragments":["did"]},{"Key":"level did","Fragments":["you"]},{"Key":"more from","Fragments":["a"]},{"Key":"a math","Fragments":["background?","university"]},{"Key":"math background?","Fragments":["So"]},{"Key":"background? So","Fragments":["then:"]},{"Key":"see `char`","Fragments":["as"]},{"Key":"`char` as","Fragments":["some"]},{"Key":"as some","Fragments":["magic"]},{"Key":"some magic","Fragments":["types,","integer."]},{"Key":"magic types,","Fragments":["but"]},{"Key":"types, but","Fragments":["as"]},{"Key":"of possible","Fragments":["values","responses","responses","responses","responses","improvement"]},{"Key":"values instead.","Fragments":["So"]},{"Key":"instead. So","Fragments":["read"]},{"Key":"So read","Fragments":["`char"]},{"Key":"read `char","Fragments":["c"]},{"Key":"`char c","Fragments":["="]},{"Key":"= 'A'`","Fragments":["as"]},{"Key":"'A'` as","Fragments":["![c"]},{"Key":"as ![c","Fragments":["\\in"]},{"Key":"![c \\in","Fragments":["\\text{\\tt"]},{"Key":"\\in \\text{\\tt","Fragments":["char}"]},{"Key":"\\text{\\tt char}","Fragments":[":"]},{"Key":"char} :","Fragments":["c"]},{"Key":": c","Fragments":["\\equiv"]},{"Key":"c \\equiv","Fragments":["\\text{\\tt"]},{"Key":"\\equiv \\text{\\tt","Fragments":["'A'}](http://mathurl.com/nhctzug.png)."]},{"Key":"\\text{\\tt 'A'}](http://mathurl.com/nhctzug.png).","Fragments":["Also"]},{"Key":"'A'}](http://mathurl.com/nhctzug.png). Also","Fragments":["consider:"]},{"Key":"These do","Fragments":["all"]},{"Key":"all hold,","Fragments":["even"]},{"Key":"hold, even","Fragments":["id"]},{"Key":"even id","Fragments":["it"]},{"Key":"id it","Fragments":["is"]},{"Key":"very natural","Fragments":["for"]},{"Key":"natural for","Fragments":["a"]},{"Key":"a human,","Fragments":["but"]},{"Key":"human, but","Fragments":["still,"]},{"Key":"but still,","Fragments":["they"]},{"Key":"still, they","Fragments":["hold."]},{"Key":"In C++11,","Fragments":["you"]},{"Key":"C++11, you","Fragments":["can"]},{"Key":"the std::to_string(int)","Fragments":["function."]},{"Key":"std::to_string(int) function.","Fragments":["http://www.cplusplus.com/reference/string/to_string/"]},{"Key":"You missed","Fragments":["my"]},{"Key":"missed my","Fragments":["last"]},{"Key":"The formula","Fragments":["I"]},{"Key":"formula I","Fragments":["used"]},{"Key":"in ```square_of_sums```","Fragments":["is"]},{"Key":"```square_of_sums``` is","Fragments":["called"]},{"Key":"called Young","Fragments":["Gauss."]},{"Key":"can find","Fragments":["an","string::back","it.","the"]},{"Key":"idea ```using","Fragments":["namespace"]},{"Key":"namespace std;```","Fragments":["in","in"]},{"Key":"std;``` in","Fragments":["a","the"]},{"Key":"a .h","Fragments":["file.","and","and"]},{"Key":" Allow","Fragments":["yourself"]},{"Key":"Allow yourself","Fragments":["to"]},{"Key":"yourself to","Fragments":["do","adjust","using"]},{"Key":"in .cpp","Fragments":["files.","rather","files."]},{"Key":" Reason","Fragments":[":","is"]},{"Key":"Reason :","Fragments":["your"]},{"Key":": your","Fragments":["clients"]},{"Key":"your clients","Fragments":["do"]},{"Key":"clients do","Fragments":["not"]},{"Key":"want necessarily","Fragments":["to"]},{"Key":"necessarily to","Fragments":["bring"]},{"Key":"to bring","Fragments":["std"]},{"Key":"bring std","Fragments":["to"]},{"Key":"std to","Fragments":["their"]},{"Key":"to their","Fragments":["namespace,","own","heart's"]},{"Key":"their namespace,","Fragments":["especially"]},{"Key":"namespace, especially","Fragments":["if"]},{"Key":"have functions","Fragments":["with"]},{"Key":"with same","Fragments":["name/params","name/params"]},{"Key":"same name/params","Fragments":["as","in"]},{"Key":"name/params as","Fragments":["std"]},{"Key":"as std","Fragments":["functions,"]},{"Key":"std functions,","Fragments":["but"]},{"Key":"functions, but","Fragments":["with","I'm","decided"]},{"Key":"example, if","Fragments":["i"]},{"Key":"own ```pow```","Fragments":["implementation,"]},{"Key":"```pow``` implementation,","Fragments":["i"]},{"Key":"implementation, i","Fragments":["will"]},{"Key":"in trouble","Fragments":["by"]},{"Key":"trouble by","Fragments":["using"]},{"Key":"code, because","Fragments":["compiler"]},{"Key":"because compiler","Fragments":["will"]},{"Key":"find 2","Fragments":["functions"]},{"Key":"2 functions","Fragments":["with"]},{"Key":"name/params in","Fragments":["the"]},{"Key":"same current","Fragments":["namespace."]},{"Key":"the formular","Fragments":["for"]},{"Key":"formular for","Fragments":["the"]},{"Key":"calculation so","Fragments":["i"]},{"Key":"need ```math","Fragments":["pow"]},{"Key":"```math pow","Fragments":["```"]},{"Key":" ```clock::plus```","Fragments":["will"]},{"Key":"```clock::plus``` will","Fragments":["fail"]},{"Key":"fail if","Fragments":["input"]},{"Key":"if input","Fragments":["```min```","string","is","is","or","comes"]},{"Key":"input ```min```","Fragments":["is"]},{"Key":"is larger","Fragments":["than","than","than"]},{"Key":"than two","Fragments":["days","vectors"]},{"Key":"two days","Fragments":["(i.e."]},{"Key":"days (i.e.","Fragments":["2880"]},{"Key":"(i.e. 2880","Fragments":["minutes)."]},{"Key":"2880 minutes).","Fragments":["The"]},{"Key":"minutes). The","Fragments":["same"]},{"Key":"same goes","Fragments":["for"]},{"Key":"goes for","Fragments":["```clock::minus```.","```is_shouty```"]},{"Key":"have checked","Fragments":["this."]},{"Key":"checked this.","Fragments":["The"]},{"Key":"this. The","Fragments":["```"]},{"Key":"The ```","Fragments":["clock::plus```"]},{"Key":"``` clock::plus```","Fragments":["function"]},{"Key":"clock::plus``` function","Fragments":["fails."]},{"Key":"function fails.","Fragments":["But"]},{"Key":"fails. But","Fragments":["the"]},{"Key":"the ```clock::minus```","Fragments":["works"]},{"Key":"```clock::minus``` works","Fragments":["i"]},{"Key":"works i","Fragments":["have"]},{"Key":"have tested","Fragments":["it"]},{"Key":"tested it","Fragments":["with","-","just"]},{"Key":"some random","Fragments":["numbers"]},{"Key":"numbers \u003e","Fragments":["2880."]},{"Key":" New","Fragments":["Implementation","proposition,","implementation"]},{"Key":"New Implementation","Fragments":["of"]},{"Key":"Implementation of","Fragments":["the"]},{"Key":"the ```plus```","Fragments":["Method"]},{"Key":"I overlooked","Fragments":["```while```"]},{"Key":"overlooked ```while```","Fragments":["loop"]},{"Key":"```while``` loop","Fragments":["in"]},{"Key":"in ```clock::minus```.","Fragments":["This"]},{"Key":"```clock::minus```. This","Fragments":["will"]},{"Key":"make large","Fragments":["decrements"]},{"Key":"large decrements","Fragments":["work."]},{"Key":"the ```cmath```","Fragments":["Include"]},{"Key":"could \"simplify\"","Fragments":["```squares::difference```"]},{"Key":"\"simplify\" ```squares::difference```","Fragments":["to"]},{"Key":"```squares::difference``` to","Fragments":["```(3*(i*i*i*i)"]},{"Key":"to ```(3*(i*i*i*i)","Fragments":["+"]},{"Key":"```(3*(i*i*i*i) +","Fragments":["2"]},{"Key":"2 *","Fragments":["(i*i*i)-","sum"]},{"Key":"* (i*i*i)-","Fragments":["3*(i*i)"]},{"Key":"(i*i*i)- 3*(i*i)","Fragments":["-"]},{"Key":"3*(i*i) -","Fragments":["2*i)"]},{"Key":"- 2*i)","Fragments":["/"]},{"Key":"2*i) /","Fragments":["12```."]},{"Key":"Indeed, sorry","Fragments":["for"]},{"Key":"The previous","Fragments":["version","version"]},{"Key":"previous version","Fragments":["would","used"]},{"Key":"version would","Fragments":["have","certainly"]},{"Key":"have failed","Fragments":["if"]},{"Key":"failed if","Fragments":["the"]},{"Key":"tests had","Fragments":["asked"]},{"Key":"had asked","Fragments":["for"]},{"Key":"numbers containing","Fragments":["\"twelve\""]},{"Key":"containing \"twelve\"","Fragments":["or"]},{"Key":"\"twelve\" or","Fragments":["\"eleven\""]},{"Key":"or \"eleven\"","Fragments":["but"]},{"Key":"\"eleven\" but","Fragments":["this"]},{"Key":"version works","Fragments":["with"]},{"Key":"those numbers.","Fragments":["I"]},{"Key":"numbers. I","Fragments":["think"]},{"Key":"cleaner and","Fragments":["easier","easier"]},{"Key":"using `std::count_if`","Fragments":["instead"]},{"Key":"`std::count_if` instead","Fragments":["of"]},{"Key":"of `std::accumulate`","Fragments":["and"]},{"Key":"`std::accumulate` and","Fragments":["also"]},{"Key":"to pull","Fragments":["the","out","it"]},{"Key":"of zip","Fragments":["iterators"]},{"Key":"zip iterators","Fragments":["into"]},{"Key":"iterators into","Fragments":["a"]},{"Key":"a helper","Fragments":["function.","class","function","function.","```compute_impl()```","function.","function."]},{"Key":"helper function.","Fragments":["I'm","You'd","Also,","More"]},{"Key":"function. I'm","Fragments":["not","guessing"]},{"Key":"if either","Fragments":["of"]},{"Key":"these changes","Fragments":["are"]},{"Key":"changes are","Fragments":["necessarily","not"]},{"Key":"are necessarily","Fragments":["improvements"]},{"Key":"necessarily improvements","Fragments":["over"]},{"Key":"small handful","Fragments":["of"]},{"Key":"handful of","Fragments":["changes:"]},{"Key":"- Use","Fragments":["Boost's","`std::copy_if`","a"]},{"Key":"Use Boost's","Fragments":["`to_lower_copy`"]},{"Key":"Boost's `to_lower_copy`","Fragments":["function"]},{"Key":"`to_lower_copy` function","Fragments":["rather"]},{"Key":"than defining","Fragments":["my","your"]},{"Key":"defining my","Fragments":["own."]},{"Key":"Use `std::copy_if`","Fragments":["rather"]},{"Key":"`std::copy_if` rather","Fragments":["than"]},{"Key":"a ranged","Fragments":["for","'for'"]},{"Key":"loop. I'm","Fragments":["not","going"]},{"Key":"really buys","Fragments":["me"]},{"Key":"buys me","Fragments":["anything"]},{"Key":"me anything","Fragments":["with"]},{"Key":"anything with","Fragments":["respect","it."]},{"Key":"with respect","Fragments":["to","to"]},{"Key":"respect to","Fragments":["readability.","the"]},{"Key":"header include","Fragments":["guard."]},{"Key":"include guard.","Fragments":["For"]},{"Key":"guard. For","Fragments":["some"]},{"Key":"was under","Fragments":["the"]},{"Key":"the impression","Fragments":["that","that"]},{"Key":"impression that","Fragments":["`#pragma","we"]},{"Key":"once` was","Fragments":["a"]},{"Key":"standard feature","Fragments":["of"]},{"Key":"It's not.","Fragments":["Although"]},{"Key":"not. Although","Fragments":["I"]},{"Key":"the pragma","Fragments":["rather"]},{"Key":"pragma rather","Fragments":["than"]},{"Key":"than include","Fragments":["guards"]},{"Key":"include guards","Fragments":["and","could"]},{"Key":"guards and","Fragments":["would","cleaner"]},{"Key":"definitely going","Fragments":["to","to"]},{"Key":"with compilers","Fragments":["that"]},{"Key":"that support","Fragments":["it,"]},{"Key":"support it,","Fragments":["for"]},{"Key":"it, for","Fragments":["these"]},{"Key":"exercises I'm","Fragments":["trying"]},{"Key":"to stay","Fragments":["as"]},{"Key":"stay as","Fragments":["standards-compliant"]},{"Key":"as standards-compliant","Fragments":["as"]},{"Key":"standards-compliant as","Fragments":["possible."]},{"Key":"namespace. Fortunately,","Fragments":["the"]},{"Key":"Fortunately, the","Fragments":["test"]},{"Key":"test code","Fragments":["works","is"]},{"Key":"works whether","Fragments":["you"]},{"Key":"whether you","Fragments":["have","have"]},{"Key":"or function","Fragments":["names"]},{"Key":"names `anagram`","Fragments":["within"]},{"Key":"`anagram` within","Fragments":["an"]},{"Key":"within an","Fragments":["`anagram`","anonymous","anonymous","Ubuntu","anonymous"]},{"Key":"an `anagram`","Fragments":["namespace,","class"]},{"Key":"`anagram` namespace,","Fragments":["or"]},{"Key":"`anagram` class","Fragments":["in"]},{"Key":"class in","Fragments":["which","this","more"]},{"Key":"just directly","Fragments":["rather"]},{"Key":"directly rather","Fragments":["than"]},{"Key":"than implicitly","Fragments":["referencing"]},{"Key":"implicitly referencing","Fragments":["the"]},{"Key":"referencing the","Fragments":["constructor."]},{"Key":"constructor. Not","Fragments":["great"]},{"Key":"Not great","Fragments":["style,"]},{"Key":"great style,","Fragments":["but"]},{"Key":"style, but","Fragments":["nesting","I"]},{"Key":"but nesting","Fragments":["the"]},{"Key":"nesting the","Fragments":["class"]},{"Key":"and method","Fragments":["definition"]},{"Key":"method definition","Fragments":["inside"]},{"Key":"definition inside","Fragments":["a"]},{"Key":"namespace scope","Fragments":["was"]},{"Key":"scope was","Fragments":["bugging"]},{"Key":"was bugging","Fragments":["me"]},{"Key":"bugging me","Fragments":["stylistically"]},{"Key":"me stylistically","Fragments":["regardless"]},{"Key":"stylistically regardless","Fragments":["of"]},{"Key":"regardless of","Fragments":["whether","historical","the"]},{"Key":"of whether","Fragments":["the"]},{"Key":"code was","Fragments":["indented","very","more"]},{"Key":"was indented","Fragments":["one"]},{"Key":"indented one","Fragments":["level"]},{"Key":"level or","Fragments":["not."]},{"Key":"not. Most","Fragments":["style"]},{"Key":"Most style","Fragments":["guides"]},{"Key":"style guides","Fragments":["advocate"]},{"Key":"guides advocate","Fragments":["no"]},{"Key":"advocate no","Fragments":["indentation"]},{"Key":"no indentation","Fragments":["of"]},{"Key":"indentation of","Fragments":["code"]},{"Key":"code within","Fragments":["namespace"]},{"Key":"within namespace","Fragments":["scope,","bounds,"]},{"Key":"namespace scope,","Fragments":["which"]},{"Key":"scope, which","Fragments":["looks"]},{"Key":"which looks","Fragments":["ugly"]},{"Key":"looks ugly","Fragments":["to"]},{"Key":"me. On","Fragments":["the"]},{"Key":"hand, indenting","Fragments":["class"]},{"Key":"indenting class","Fragments":["declarations"]},{"Key":"class declarations","Fragments":["and"]},{"Key":"declarations and","Fragments":["function/method","functions","the"]},{"Key":"and function/method","Fragments":["definitions"]},{"Key":"function/method definitions","Fragments":["one"]},{"Key":"definitions one","Fragments":["level"]},{"Key":"level doesn't","Fragments":["sit"]},{"Key":"doesn't sit","Fragments":["well"]},{"Key":"sit well","Fragments":["with"]},{"Key":"well with","Fragments":["me","`exercism"]},{"Key":"either. So,","Fragments":["in"]},{"Key":"So, in","Fragments":["this"]},{"Key":"I punted.","Fragments":[";-)"]},{"Key":"comparing double","Fragments":["type"]},{"Key":"double type","Fragments":["as"]},{"Key":"type as","Fragments":["if","a"]},{"Key":"were int","Fragments":["type."]},{"Key":"int type.","Fragments":["This"]},{"Key":"with test","Fragments":["data,"]},{"Key":"test data,","Fragments":["but"]},{"Key":"data, but","Fragments":["it"]},{"Key":"it most","Fragments":["likely","interesting"]},{"Key":"likely won't","Fragments":["work"]},{"Key":"life. See","Fragments":["for"]},{"Key":"See for","Fragments":["example","example"]},{"Key":"example here:","Fragments":["https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/","http://www.algebra.com/algebra/homework/Sequences-and-series/Sequences-and-series.faq.question.427328.html"]},{"Key":"here: https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/","Fragments":["."]},{"Key":"https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/ .","Fragments":["There"]},{"Key":". There","Fragments":["are"]},{"Key":"are whole","Fragments":["books"]},{"Key":"whole books","Fragments":["written","about"]},{"Key":"books written","Fragments":["on"]},{"Key":"written on","Fragments":["the"]},{"Key":"skip all","Fragments":["even","even"]},{"Key":"all even","Fragments":["numbers","numbers,"]},{"Key":"numbers since","Fragments":["they"]},{"Key":"aren't primes","Fragments":["anyway"]},{"Key":"primes anyway","Fragments":["(with"]},{"Key":"anyway (with","Fragments":["2"]},{"Key":"(with 2","Fragments":["being"]},{"Key":"2 being","Fragments":["the"]},{"Key":"even numbers,","Fragments":["since"]},{"Key":"numbers, since","Fragments":["even"]},{"Key":"since even","Fragments":["numbers","numbers"]},{"Key":"numbers aren't","Fragments":["primes.","primes."]},{"Key":"aren't primes.","Fragments":["THe","If"]},{"Key":"primes. THe","Fragments":["only"]},{"Key":"THe only","Fragments":["exception"]},{"Key":"only exception","Fragments":["is"]},{"Key":"exception is","Fragments":["2,","the","a"]},{"Key":"is 2,","Fragments":["but"]},{"Key":"2, but","Fragments":["it"]},{"Key":"already handled","Fragments":["in","the"]},{"Key":"handled in","Fragments":["a"]},{"Key":"skip dividing","Fragments":["by"]},{"Key":"2 since","Fragments":["even"]},{"Key":"number doesn't","Fragments":["divide","divide"]},{"Key":"doesn't divide","Fragments":["by","equally."]},{"Key":"divide by","Fragments":["2,","zero","4.","zero"]},{"Key":"by 2,","Fragments":["then"]},{"Key":"2, then","Fragments":["there","option"]},{"Key":"then there","Fragments":["isn't","is","is","is"]},{"Key":"a need","Fragments":["to","to"]},{"Key":"test any","Fragments":["other"]},{"Key":"other even","Fragments":["number."]},{"Key":" ```asciiOffset```","Fragments":["shouldn't"]},{"Key":"```asciiOffset``` shouldn't","Fragments":["be"]},{"Key":"be numeric","Fragments":["value,"]},{"Key":"numeric value,","Fragments":["but"]},{"Key":"but ```'0'```.","Fragments":["At"]},{"Key":"```'0'```. At","Fragments":["the"]},{"Key":"moment I","Fragments":["have"]},{"Key":"to open","Fragments":["up"]},{"Key":"up an","Fragments":["ASCII","array"]},{"Key":"an ASCII","Fragments":["chart"]},{"Key":"ASCII chart","Fragments":["to"]},{"Key":"chart to","Fragments":["verify"]},{"Key":"to verify","Fragments":["that","the"]},{"Key":"verify that","Fragments":["```'0'"]},{"Key":"that ```'0'","Fragments":["=="]},{"Key":"```'0' ==","Fragments":["48```."]},{"Key":" Hey","Fragments":["@jessika,","--","man,","there,","@aliyah,","@monte"]},{"Key":"Hey @jessika,","Fragments":["while"]},{"Key":"@jessika, while","Fragments":["I"]},{"Key":"do partially","Fragments":["agree"]},{"Key":"partially agree","Fragments":["with"]},{"Key":"comment, one","Fragments":["should"]},{"Key":"should generally","Fragments":["know"]},{"Key":"generally know","Fragments":["when"]},{"Key":"know when","Fragments":["to"]},{"Key":"inline a","Fragments":["function,"]},{"Key":"its implications.","Fragments":["This"]},{"Key":"implications. This","Fragments":["StackOverflow"]},{"Key":"This StackOverflow","Fragments":["answer"]},{"Key":"StackOverflow answer","Fragments":["sums"]},{"Key":"answer sums","Fragments":["it"]},{"Key":"sums it","Fragments":["up"]},{"Key":"up pretty","Fragments":["well:"]},{"Key":"pretty well:","Fragments":["http://stackoverflow.com/questions/1759300/when-should-i-write-the-keyword-inline-for-a-function-method/1759575#1759575"]},{"Key":"This certainly","Fragments":["works,"]},{"Key":"certainly works,","Fragments":["but"]},{"Key":"previous versions","Fragments":["were"]},{"Key":"versions were","Fragments":["less"]},{"Key":"were less","Fragments":["resource"]},{"Key":"less resource","Fragments":["hungry."]},{"Key":"do divisions/sums","Fragments":["at"]},{"Key":"divisions/sums at","Fragments":["all"]},{"Key":"all since","Fragments":["there"]},{"Key":"since there","Fragments":["exist","are","is","are"]},{"Key":"there exist","Fragments":["formulas"]},{"Key":"exist formulas","Fragments":["for"]},{"Key":"formulas for","Fragments":["calculating","these"]},{"Key":"for calculating","Fragments":["the"]},{"Key":"whole result.","Fragments":["See"]},{"Key":"result. See","Fragments":["for"]},{"Key":" any_of","Fragments":["might"]},{"Key":"any_of might","Fragments":["fit"]},{"Key":"might fit","Fragments":["the"]},{"Key":"fit the","Fragments":["use","previous","to"]},{"Key":"case a","Fragments":["tiny"]},{"Key":"bit better","Fragments":["than"]},{"Key":" K,","Fragments":["so"]},{"Key":"K, so","Fragments":["it"]},{"Key":"couple tries","Fragments":["to"]},{"Key":"tries to","Fragments":["submit"]},{"Key":"submit it","Fragments":["right;"]},{"Key":"it right;","Fragments":["First"]},{"Key":"right; First","Fragments":["CPP"]},{"Key":"First CPP","Fragments":["I've"]},{"Key":"CPP I've","Fragments":["written"]},{"Key":"I've written","Fragments":["in","two","it."]},{"Key":"in something","Fragments":["like","that"]},{"Key":"like 15","Fragments":["years..."]},{"Key":"15 years...","Fragments":["how'd"]},{"Key":"years... how'd","Fragments":["I"]},{"Key":"how'd I","Fragments":["do?"]},{"Key":"The solution","Fragments":["is"]},{"Key":"as for","Fragments":["exercise","reducing"]},{"Key":"for exercise","Fragments":["\"binary\"."]},{"Key":"exercise \"binary\".","Fragments":["Instead"]},{"Key":"\"binary\". Instead","Fragments":["of"]},{"Key":"of ```\u003c\u003c1```,","Fragments":["now"]},{"Key":"```\u003c\u003c1```, now","Fragments":["I"]},{"Key":" Give","Fragments":["up"]},{"Key":"Give up","Fragments":["using"]},{"Key":"improve your","Fragments":["algorithm"]},{"Key":"your algorithm","Fragments":["by","is","return","a"]},{"Key":"algorithm by","Fragments":["using","replacing"]},{"Key":"using std::accumulate","Fragments":["instead"]},{"Key":"std::accumulate instead","Fragments":["of"]},{"Key":"your second","Fragments":["for-loop.","thought."]},{"Key":"using std::array","Fragments":["or"]},{"Key":"std::array or","Fragments":["native"]},{"Key":"or native","Fragments":["arrays,"]},{"Key":"native arrays,","Fragments":["because"]},{"Key":"arrays, because","Fragments":["I"]},{"Key":"find them","Fragments":["cumbersome"]},{"Key":"them cumbersome","Fragments":["and"]},{"Key":"cumbersome and","Fragments":["haven't","not"]},{"Key":"and haven't","Fragments":["found"]},{"Key":"found any","Fragments":["real","explicit"]},{"Key":"any real","Fragments":["advantage","life"]},{"Key":"real advantage","Fragments":["of"]},{"Key":"them over","Fragments":["vectors,"]},{"Key":"over vectors,","Fragments":["but"]},{"Key":"vectors, but","Fragments":["if"]},{"Key":"is I'd","Fragments":["love"]},{"Key":" @maria","Fragments":["To"]},{"Key":"@maria To","Fragments":["quote"]},{"Key":"To quote","Fragments":["from"]},{"Key":"quote from","Fragments":["the"]},{"Key":"the Google","Fragments":["C++"]},{"Key":"Google C++","Fragments":["Style"]},{"Key":"C++ Style","Fragments":["Guide:"]},{"Key":" Normally,","Fragments":["if"]},{"Key":"Normally, if","Fragments":["a"]},{"Key":"a constructor","Fragments":["can","explicit","so","any","initialisation","initialization","initialiser","is","of","I","without","from"]},{"Key":"constructor can","Fragments":["be"]},{"Key":"one argument,","Fragments":["it"]},{"Key":"argument, it","Fragments":["can"]},{"Key":"a conversion.","Fragments":["For"]},{"Key":"conversion. For","Fragments":["instance,"]},{"Key":"For instance,","Fragments":["if","acronyms","the","in"]},{"Key":"instance, if","Fragments":["you"]},{"Key":"you define","Fragments":["Foo::Foo(string","`string","a","would"]},{"Key":"define Foo::Foo(string","Fragments":["name)"]},{"Key":"Foo::Foo(string name)","Fragments":["and"]},{"Key":"name) and","Fragments":["then"]},{"Key":"then pass","Fragments":["a"]},{"Key":"that expects","Fragments":["a"]},{"Key":"expects a","Fragments":["Foo,"]},{"Key":"a Foo,","Fragments":["the"]},{"Key":"Foo, the","Fragments":["constructor"]},{"Key":"called to","Fragments":["convert","once"]},{"Key":"string into","Fragments":["a","functions","a","lower","words,","a","tokens"]},{"Key":"a Foo","Fragments":["and"]},{"Key":"Foo and","Fragments":["will"]},{"Key":"the Foo","Fragments":["to"]},{"Key":"Foo to","Fragments":["your"]},{"Key":"you. This","Fragments":["can"]},{"Key":"be convenient","Fragments":["but"]},{"Key":"convenient but","Fragments":["is"]},{"Key":"of trouble","Fragments":["when"]},{"Key":"trouble when","Fragments":["things"]},{"Key":"when things","Fragments":["get"]},{"Key":"get converted","Fragments":["and"]},{"Key":"converted and","Fragments":["new"]},{"Key":"and new","Fragments":["objects"]},{"Key":"new objects","Fragments":["created"]},{"Key":"objects created","Fragments":["without"]},{"Key":"created without","Fragments":["you"]},{"Key":"you meaning","Fragments":["them"]},{"Key":"meaning them","Fragments":["to."]},{"Key":"them to.","Fragments":["Declaring"]},{"Key":"to. Declaring","Fragments":["a"]},{"Key":"Declaring a","Fragments":["constructor","member","static"]},{"Key":"explicit prevents","Fragments":["it"]},{"Key":"prevents it","Fragments":["from"]},{"Key":"invoked implicitly","Fragments":["as"]},{"Key":"implicitly as","Fragments":["a"]},{"Key":"In addition","Fragments":["to","to","you","to"]},{"Key":"to single-parameter","Fragments":["constructors,"]},{"Key":"single-parameter constructors,","Fragments":["this"]},{"Key":"constructors, this","Fragments":["also"]},{"Key":"this also","Fragments":["applies"]},{"Key":"also applies","Fragments":["to"]},{"Key":"to constructors","Fragments":["where"]},{"Key":"constructors where","Fragments":["every"]},{"Key":"where every","Fragments":["parameter"]},{"Key":"every parameter","Fragments":["after"]},{"Key":"parameter after","Fragments":["the"]},{"Key":"first has","Fragments":["a"]},{"Key":"default value,","Fragments":["e.g.,"]},{"Key":"value, e.g.,","Fragments":["Foo::Foo(string"]},{"Key":"e.g., Foo::Foo(string","Fragments":["name,"]},{"Key":"Foo::Foo(string name,","Fragments":["int"]},{"Key":"name, int","Fragments":["id"]},{"Key":"int id","Fragments":["="]},{"Key":"id =","Fragments":["42)."]},{"Key":"a semantic","Fragments":["difference:"]},{"Key":"semantic difference:","Fragments":["a"]},{"Key":"difference: a","Fragments":["std::array"]},{"Key":"a std::array","Fragments":["(which"]},{"Key":"std::array (which","Fragments":["is"]},{"Key":"much a","Fragments":["native","1-line"]},{"Key":"a native","Fragments":["array"]},{"Key":"native array","Fragments":["with"]},{"Key":"array with","Fragments":["convenience"]},{"Key":"with convenience","Fragments":["functions)"]},{"Key":"convenience functions)","Fragments":["always"]},{"Key":"functions) always","Fragments":["have"]},{"Key":"have size","Fragments":["=="]},{"Key":"size ==","Fragments":["capacity."]},{"Key":"== capacity.","Fragments":["So"]},{"Key":"capacity. So","Fragments":["if"]},{"Key":"you're describing","Fragments":["something"]},{"Key":"describing something","Fragments":["for"]},{"Key":"something for","Fragments":["which"]},{"Key":"which that","Fragments":["is"]},{"Key":"true, where","Fragments":["the"]},{"Key":"size is","Fragments":["known"]},{"Key":"never change,","Fragments":["there's"]},{"Key":"change, there's","Fragments":["a"]},{"Key":"huge gain","Fragments":["to"]},{"Key":"gain to","Fragments":["be"]},{"Key":"made in","Fragments":["saying"]},{"Key":"in saying","Fragments":["what"]},{"Key":"saying what","Fragments":["you"]},{"Key":"you mean.","Fragments":["If","I"]},{"Key":"mean. If","Fragments":["you"]},{"Key":"separate count","Fragments":["of"]},{"Key":"count of","Fragments":["how"]},{"Key":"many elements","Fragments":["in","as","there"]},{"Key":"elements in","Fragments":["the","the","a","distinct","the"]},{"Key":"array are","Fragments":["valid,"]},{"Key":"are valid,","Fragments":["then"]},{"Key":"valid, then","Fragments":["it's"]},{"Key":"so obvious","Fragments":["what","when"]},{"Key":"what gains","Fragments":["there"]},{"Key":"gains there","Fragments":["are"]},{"Key":"are because","Fragments":["you've"]},{"Key":"because you've","Fragments":["just","already"]},{"Key":"just implemented","Fragments":["a"]},{"Key":"implemented a","Fragments":["faster","bob","simple"]},{"Key":"but clunkier","Fragments":["vector."]},{"Key":" Mechanically","Fragments":["there's"]},{"Key":"Mechanically there's","Fragments":["the"]},{"Key":"there's the","Fragments":["huge"]},{"Key":"the huge","Fragments":["difference"]},{"Key":"huge difference","Fragments":["that"]},{"Key":"difference that","Fragments":["vector"]},{"Key":"that vector","Fragments":["dynamically"]},{"Key":"vector dynamically","Fragments":["allocates"]},{"Key":"dynamically allocates","Fragments":["(using"]},{"Key":"allocates (using","Fragments":["new"]},{"Key":"(using new","Fragments":["by"]},{"Key":"new by","Fragments":["default)"]},{"Key":"by default)","Fragments":["its"]},{"Key":"default) its","Fragments":["buffer"]},{"Key":"its buffer","Fragments":["and"]},{"Key":"buffer and","Fragments":["potentially"]},{"Key":"and potentially","Fragments":["multiple"]},{"Key":"potentially multiple","Fragments":["times"]},{"Key":"multiple times","Fragments":["if","in","doesn't","in"]},{"Key":"times if","Fragments":["you"]},{"Key":"you overrun","Fragments":["capacity."]},{"Key":"overrun capacity.","Fragments":["array"]},{"Key":"capacity. array","Fragments":["holds"]},{"Key":"array holds","Fragments":["all"]},{"Key":"holds all","Fragments":["its"]},{"Key":"all its","Fragments":["data","code"]},{"Key":"its data","Fragments":["inside"]},{"Key":"data inside","Fragments":["the"]},{"Key":"the object,","Fragments":["and"]},{"Key":"object, and","Fragments":["so"]},{"Key":"will normally","Fragments":["be"]},{"Key":"normally be","Fragments":["on"]},{"Key":"the stack,","Fragments":["and"]},{"Key":"stack, and","Fragments":["thus"]},{"Key":"thus much","Fragments":["faster."]},{"Key":"much faster.","Fragments":["For","Thanks"]},{"Key":"faster. For","Fragments":["some"]},{"Key":"some domains","Fragments":["it"]},{"Key":"domains it","Fragments":["may"]},{"Key":"more important","Fragments":["that","issue"]},{"Key":"important that","Fragments":["the"]},{"Key":"speed is","Fragments":["also"]},{"Key":"also more","Fragments":["predictable"]},{"Key":"predictable with","Fragments":["stack"]},{"Key":"with stack","Fragments":["allocation"]},{"Key":"stack allocation","Fragments":["-"]},{"Key":"allocation -","Fragments":["there"]},{"Key":"no guarantees","Fragments":["about","-"]},{"Key":"guarantees about","Fragments":["the"]},{"Key":"vector in","Fragments":["normal"]},{"Key":"in normal","Fragments":["cases."]},{"Key":"normal cases.","Fragments":["Code"]},{"Key":"cases. Code","Fragments":["is"]},{"Key":"is cleaner","Fragments":["when"]},{"Key":"cleaner when","Fragments":["you"]},{"Key":"class best","Fragments":["suited"]},{"Key":"best suited","Fragments":["to"]},{"Key":"suited to","Fragments":["the","Python"]},{"Key":"the job.","Fragments":["And","This"]},{"Key":"job. And","Fragments":["array"]},{"Key":"And array","Fragments":["can"]},{"Key":"array can","Fragments":["actually"]},{"Key":"be slower","Fragments":["in"]},{"Key":"slower in","Fragments":["some"]},{"Key":"some odd","Fragments":["cases","checks"]},{"Key":"cases (e.g.","Fragments":["if"]},{"Key":"(e.g. if","Fragments":["you"]},{"Key":"to allocate","Fragments":["a"]},{"Key":"allocate a","Fragments":["lot","new"]},{"Key":"of wasted","Fragments":["space"]},{"Key":"wasted space","Fragments":["you"]},{"Key":"space you","Fragments":["may","could"]},{"Key":"being less","Fragments":["cache-friendly"]},{"Key":"less cache-friendly","Fragments":["in"]},{"Key":"cache-friendly in","Fragments":["the"]},{"Key":"the smaller-N","Fragments":["cases)."]},{"Key":"smaller-N cases).","Fragments":["And"]},{"Key":"cases). And","Fragments":["the"]},{"Key":"stack is","Fragments":["what,"]},{"Key":"is what,","Fragments":["like"]},{"Key":"what, like","Fragments":["tens"]},{"Key":"like tens","Fragments":["of"]},{"Key":"tens of","Fragments":["megabytes?"]},{"Key":"of megabytes?","Fragments":["A"]},{"Key":"megabytes? A","Fragments":["vector"]},{"Key":"A vector","Fragments":["can","will"]},{"Key":"vector can","Fragments":["store","outperform"]},{"Key":"can store","Fragments":["a"]},{"Key":"lot more.","Fragments":["But"]},{"Key":"more. But","Fragments":["in"]},{"Key":"case, doesn't","Fragments":["parts"]},{"Key":"doesn't parts","Fragments":["always"]},{"Key":"parts always","Fragments":["contain"]},{"Key":"always contain","Fragments":["exactly"]},{"Key":"contain exactly","Fragments":["four"]},{"Key":"The statements","Fragments":["like"]},{"Key":"statements like","Fragments":["```(bp.second"]},{"Key":"like ```(bp.second","Fragments":["-"]},{"Key":"```(bp.second -","Fragments":["wp.second)"]},{"Key":"- wp.second)","Fragments":["/"]},{"Key":"wp.second) /","Fragments":["(bp.first"]},{"Key":"/ (bp.first","Fragments":["-"]},{"Key":"(bp.first -","Fragments":["wp.first)"]},{"Key":"- wp.first)","Fragments":["=="]},{"Key":"wp.first) ==","Fragments":["1```"]},{"Key":"== 1```","Fragments":["could"]},{"Key":"1``` could","Fragments":["(and"]},{"Key":"could (and","Fragments":["really"]},{"Key":"(and really","Fragments":["should)"]},{"Key":"really should)","Fragments":["be"]},{"Key":"should) be","Fragments":["replaced","const"]},{"Key":"with ```bp.second","Fragments":["-"]},{"Key":"```bp.second -","Fragments":["wp.second"]},{"Key":"- wp.second","Fragments":["=="]},{"Key":"wp.second ==","Fragments":["bp.first"]},{"Key":"== bp.first","Fragments":["-"]},{"Key":"bp.first -","Fragments":["wp.first```."]},{"Key":"- wp.first```.","Fragments":["I"]},{"Key":"wp.first```. I","Fragments":["think"]},{"Key":"it's impossible","Fragments":["for"]},{"Key":"impossible for","Fragments":["there"]},{"Key":"a divide","Fragments":["by","by"]},{"Key":"by zero","Fragments":["error,","answer,"]},{"Key":"zero error,","Fragments":["because"]},{"Key":"error, because","Fragments":["of"]},{"Key":"check that's","Fragments":["done"]},{"Key":"```if``` on","Fragments":["line"]},{"Key":"One advice","Fragments":["for"]},{"Key":"advice for","Fragments":["header"]},{"Key":"for header","Fragments":["files:"]},{"Key":"put ```using","Fragments":["namespace"]},{"Key":"std``` in","Fragments":["header"]},{"Key":"Reason is","Fragments":["simple:"]},{"Key":"is simple:","Fragments":["if"]},{"Key":"simple: if","Fragments":["i"]},{"Key":"i want","Fragments":["to"]},{"Key":"use your","Fragments":["phone_number"]},{"Key":"your phone_number","Fragments":["class,"]},{"Key":"phone_number class,","Fragments":["maybe"]},{"Key":"class, maybe","Fragments":["i"]},{"Key":"maybe i","Fragments":["do"]},{"Key":"i do","Fragments":["not"]},{"Key":"use std","Fragments":["everywhere","library"]},{"Key":"std everywhere","Fragments":["in"]},{"Key":" Plus,","Fragments":["if"]},{"Key":"Plus, if","Fragments":["i"]},{"Key":"string (with","Fragments":["```using"]},{"Key":"(with ```using","Fragments":["namespace"]},{"Key":"namespace myAppNamespace```),","Fragments":["compiler"]},{"Key":"myAppNamespace```), compiler","Fragments":["won't"]},{"Key":"compiler won't","Fragments":["be"]},{"Key":"choose between","Fragments":["```myAppNamespace::string```"]},{"Key":"between ```myAppNamespace::string```","Fragments":["and"]},{"Key":"```myAppNamespace::string``` and","Fragments":["```std::string```."]},{"Key":"Just removed","Fragments":["unused"]},{"Key":"unused `regex_match`","Fragments":["import."]},{"Key":"And another","Fragments":["reuse"]},{"Key":"another reuse","Fragments":["of"]},{"Key":"reuse of","Fragments":["project"]},{"Key":"of project","Fragments":["\"binary\"."]},{"Key":"personally like","Fragments":["bitshifting","the","the","the"]},{"Key":"like bitshifting","Fragments":["more"]},{"Key":"bitshifting more","Fragments":["than"]},{"Key":"than multiplying","Fragments":["by"]},{"Key":"16, but","Fragments":["this"]},{"Key":"this works","Fragments":["also.","because"]},{"Key":"will fail,","Fragments":["if"]},{"Key":"fail, if","Fragments":["input"]},{"Key":"contains capital","Fragments":["letters."]},{"Key":"capital letters.","Fragments":["For"]},{"Key":"letters. For","Fragments":["example,"]},{"Key":"example, number","Fragments":["0xFF"]},{"Key":"number 0xFF","Fragments":["will"]},{"Key":"0xFF will","Fragments":["return"]},{"Key":"will return","Fragments":["zero,","once","true","true","false","```string::npos```","false.","1","a","1","true"]},{"Key":"return zero,","Fragments":["not"]},{"Key":"zero, not","Fragments":["255."]},{"Key":"great. I'm","Fragments":["confused"]},{"Key":"confused about","Fragments":["what"]},{"Key":"what `matches_lower`","Fragments":["does,"]},{"Key":"`matches_lower` does,","Fragments":["though?"]},{"Key":"does, though?","Fragments":["Is"]},{"Key":"though? Is","Fragments":["that"]},{"Key":"that conditiion","Fragments":["necessary--why"]},{"Key":"conditiion necessary--why","Fragments":["can't"]},{"Key":"necessary--why can't","Fragments":["the"]},{"Key":"can't the","Fragments":["condition"]},{"Key":"condition just","Fragments":["be"]},{"Key":"Also `working_copy`","Fragments":["is"]},{"Key":"`working_copy` is","Fragments":["not"]},{"Key":"very descriptive,","Fragments":["esp."]},{"Key":"descriptive, esp.","Fragments":["since"]},{"Key":"esp. since","Fragments":["it's"]},{"Key":"used multiple","Fragments":["times."]},{"Key":"times. Even","Fragments":["in"]},{"Key":"Even in","Fragments":["the"]},{"Key":"the short","Fragments":["function,"]},{"Key":"short function,","Fragments":["I"]},{"Key":"look back","Fragments":["up"]},{"Key":"back up","Fragments":["to"]},{"Key":"check the","Fragments":["definition.","content","boundaries.","question","case","map","value","return"]},{"Key":"the definition.","Fragments":["Maybe"]},{"Key":"definition. Maybe","Fragments":["just"]},{"Key":"Maybe just","Fragments":["`query_trimmed`?"]},{"Key":"Also, any","Fragments":["reason"]},{"Key":"make `is_shouty()`","Fragments":["a"]},{"Key":"`is_shouty()` a","Fragments":["standalone"]},{"Key":"a standalone","Fragments":["function"]},{"Key":"standalone function","Fragments":["instead"]},{"Key":"of `bob`?","Fragments":["(I"]},{"Key":"`bob`? (I","Fragments":["have"]},{"Key":"no opinion","Fragments":["either"]},{"Key":"opinion either","Fragments":["way,"]},{"Key":"way, just","Fragments":["wondering"]},{"Key":"just wondering","Fragments":["if"]},{"Key":"Hey, thanks","Fragments":["for"]},{"Key":" `matches_upper","Fragments":["\u0026\u0026"]},{"Key":"`matches_upper \u0026\u0026","Fragments":["!"]},{"Key":"! matches_lower`","Fragments":["was"]},{"Key":"matches_lower` was","Fragments":["a"]},{"Key":"a weird","Fragments":["check"]},{"Key":"weird check","Fragments":["for"]},{"Key":"the 1,","Fragments":["2,"]},{"Key":"3 test","Fragments":["case"]},{"Key":"case since","Fragments":["that'd"]},{"Key":"since that'd","Fragments":["be"]},{"Key":"that'd be","Fragments":["considered"]},{"Key":"considered \"shouty\",","Fragments":["so"]},{"Key":"\"shouty\", so","Fragments":["it"]},{"Key":"it basically","Fragments":["flips"]},{"Key":"basically flips","Fragments":["it"]},{"Key":"flips it","Fragments":["both"]},{"Key":"it both","Fragments":["ways"]},{"Key":"both ways","Fragments":["to"]},{"Key":"ensure it","Fragments":["isn't"]},{"Key":"isn't getting","Fragments":["a"]},{"Key":"a false","Fragments":["positive,","alarm"]},{"Key":"false positive,","Fragments":["if"]},{"Key":"positive, if","Fragments":["I"]},{"Key":"remember correctly.","Fragments":["`is_shouty`"]},{"Key":"correctly. `is_shouty`","Fragments":["is"]},{"Key":"`is_shouty` is","Fragments":["a"]},{"Key":"readability thing","Fragments":["as"]},{"Key":"as not","Fragments":["concerning","having"]},{"Key":"not concerning","Fragments":["`hey`"]},{"Key":"concerning `hey`","Fragments":["with"]},{"Key":"`hey` with","Fragments":["what"]},{"Key":"with what","Fragments":["qualifies","you","I","I"]},{"Key":"what qualifies","Fragments":["as"]},{"Key":"qualifies as","Fragments":["shouty."]},{"Key":"things I'll","Fragments":["probably"]},{"Key":"probably tweak","Fragments":["in"]},{"Key":"tweak in","Fragments":["this"]},{"Key":"* `ends_with(...,","Fragments":["\"?\")`"]},{"Key":"`ends_with(..., \"?\")`","Fragments":["could"]},{"Key":"\"?\")` could","Fragments":["be"]},{"Key":"be `is_question(string)`","Fragments":["for"]},{"Key":"`is_question(string)` for","Fragments":["readability"]},{"Key":"Maybe switch","Fragments":["from"]},{"Key":"switch from","Fragments":["a","a"]},{"Key":"static methods","Fragments":["to"]},{"Key":"methods to","Fragments":["a"]},{"Key":"with plain","Fragments":["old"]},{"Key":"plain old","Fragments":["functions.","array"]},{"Key":"* Need","Fragments":["to"]},{"Key":"Need to","Fragments":["move"]},{"Key":"the `using","Fragments":["namespace`"]},{"Key":"namespace` out","Fragments":["of"]},{"Key":"for safety","Fragments":["/"]},{"Key":"safety /","Fragments":["good"]},{"Key":"/ good","Fragments":["practice."]},{"Key":"Maybe move","Fragments":["the"]},{"Key":"literals into","Fragments":["some"]},{"Key":"of const","Fragments":["data","reference","std::string\u0026","char","referencing"]},{"Key":"const data","Fragments":["structure?"]},{"Key":"* Either","Fragments":["clarify"]},{"Key":"Either clarify","Fragments":["that"]},{"Key":"clarify that","Fragments":["`hey(string"]},{"Key":"that `hey(string","Fragments":["query)`"]},{"Key":"`hey(string query)`","Fragments":["is"]},{"Key":"query)` is","Fragments":["a"]},{"Key":"const reference,","Fragments":["or","instead"]},{"Key":"reference, or","Fragments":["just","when"]},{"Key":"it as-is","Fragments":["without"]},{"Key":"as-is without","Fragments":["the"]},{"Key":"the trim_copy","Fragments":["since"]},{"Key":"trim_copy since","Fragments":["it's"]},{"Key":"it's passed","Fragments":["by"]},{"Key":" Think","Fragments":["this","about"]},{"Key":"Think this","Fragments":["is"]},{"Key":"pretty clean","Fragments":["and","overall."]},{"Key":"and `hey`","Fragments":["is"]},{"Key":"`hey` is","Fragments":["about","unaffected.","easy","a","operating","filled","called."]},{"Key":"about as","Fragments":["readable","far"]},{"Key":"make it...","Fragments":["I"]},{"Key":"it... I","Fragments":["think"]},{"Key":"think moving","Fragments":["from"]},{"Key":"moving from","Fragments":["a"]},{"Key":"namespace was","Fragments":["the"]},{"Key":"right move;","Fragments":["`bob`"]},{"Key":"move; `bob`","Fragments":["doesn't"]},{"Key":"`bob` doesn't","Fragments":["really"]},{"Key":"really encapsulate","Fragments":["anything"]},{"Key":"encapsulate anything","Fragments":["since"]},{"Key":"anything since","Fragments":["the"]},{"Key":"to `hey`","Fragments":["versus"]},{"Key":"`hey` versus","Fragments":["a"]},{"Key":"versus a","Fragments":["constructor","series"]},{"Key":"no internal","Fragments":["state,"]},{"Key":"internal state,","Fragments":["and"]},{"Key":"state, and","Fragments":["is_shouty"]},{"Key":"and is_shouty","Fragments":["/"]},{"Key":"is_shouty /","Fragments":["is_question"]},{"Key":"/ is_question","Fragments":["could"]},{"Key":"is_question could","Fragments":["actually"]},{"Key":"could actually","Fragments":["be"]},{"Key":"useful utilities","Fragments":["elsewhere..."]},{"Key":"point the","Fragments":["thing","next","variable"]},{"Key":"hate the","Fragments":["most"]},{"Key":"most about","Fragments":["the"]},{"Key":"name `hey`","Fragments":["haha"]},{"Key":" made","Fragments":["`hey(string)`","`bob`","'if'"]},{"Key":"made `hey(string)`","Fragments":["pass"]},{"Key":"`hey(string)` pass","Fragments":["by"]},{"Key":"value again","Fragments":["since"]},{"Key":"again since","Fragments":["i"]},{"Key":"just immediately","Fragments":["copying"]},{"Key":"immediately copying","Fragments":["it"]},{"Key":"it otherwise","Fragments":["anyway."]},{"Key":"responses versus","Fragments":["a"]},{"Key":"a series","Fragments":["of","of","of","of"]},{"Key":"std::string` in","Fragments":["the"]},{"Key":"assume Speech","Fragments":["is"]},{"Key":"Speech is","Fragments":["in"]},{"Key":"in bob.h?","Fragments":["You"]},{"Key":"bob.h? You","Fragments":["can"]},{"Key":"once with","Fragments":["`exercism"]},{"Key":"with `exercism","Fragments":["submit","submit"]},{"Key":"bob.h bob.cpp`","Fragments":[":)"]},{"Key":" @rashawn","Fragments":["You"]},{"Key":"@rashawn You","Fragments":["are"]},{"Key":"least have","Fragments":["used"]},{"Key":"fixed epsilon,","Fragments":["but..."]},{"Key":"ignore this","Fragments":["because"]},{"Key":"the implications.","Fragments":["Comparing"]},{"Key":"implications. Comparing","Fragments":["floating"]},{"Key":"Comparing floating","Fragments":["point"]},{"Key":"point numbers","Fragments":["for"]},{"Key":"numbers for","Fragments":["equality"]},{"Key":"for equality","Fragments":["means","–"]},{"Key":"equality means","Fragments":["introducing"]},{"Key":"means introducing","Fragments":["an"]},{"Key":"introducing an","Fragments":["epsilon"]},{"Key":"an epsilon","Fragments":["value."]},{"Key":"epsilon value.","Fragments":["This"]},{"Key":"This epsilon","Fragments":["value"]},{"Key":"epsilon value","Fragments":["should"]},{"Key":"value should","Fragments":["not"]},{"Key":"fixed because","Fragments":["large"]},{"Key":"because large","Fragments":["values"]},{"Key":"large values","Fragments":["need","for"]},{"Key":"values need","Fragments":["a"]},{"Key":"different epsilon","Fragments":["than"]},{"Key":"epsilon than","Fragments":["values"]},{"Key":"than values","Fragments":["between"]},{"Key":"values between","Fragments":["`0`"]},{"Key":"between `0`","Fragments":["and"]},{"Key":"`0` and","Fragments":["`1`,"]},{"Key":"and `1`,","Fragments":["and"]},{"Key":"`1`, and","Fragments":["a"]},{"Key":"a relative","Fragments":["epsilon"]},{"Key":"relative epsilon","Fragments":["is"]},{"Key":"epsilon is","Fragments":["problematic"]},{"Key":"is problematic","Fragments":["for"]},{"Key":"for values","Fragments":["very"]},{"Key":"values very","Fragments":["close"]},{"Key":"`0` .","Fragments":["All"]},{"Key":". All","Fragments":["the"]},{"Key":"All the","Fragments":["texts"]},{"Key":"the texts","Fragments":["I"]},{"Key":"texts I","Fragments":["read"]},{"Key":"about floating","Fragments":["point"]},{"Key":"point arithmetic","Fragments":["agree"]},{"Key":"arithmetic agree","Fragments":["that"]},{"Key":"an application/domain","Fragments":["specific"]},{"Key":"application/domain specific","Fragments":["problem"]},{"Key":"specific problem","Fragments":["and"]},{"Key":"problem and","Fragments":["there","for","less","one","realized"]},{"Key":"no one-fits-all","Fragments":["algorithm."]},{"Key":"one-fits-all algorithm.","Fragments":["So"]},{"Key":"algorithm. So","Fragments":["we"]},{"Key":"So we","Fragments":["would","can","might","should"]},{"Key":"would either","Fragments":["need"]},{"Key":"either need","Fragments":["refined"]},{"Key":"need refined","Fragments":["requirements"]},{"Key":"refined requirements","Fragments":["that"]},{"Key":"requirements that","Fragments":["enable","might"]},{"Key":"that enable","Fragments":["us"]},{"Key":"enable us","Fragments":["to"]},{"Key":"to chose","Fragments":["an"]},{"Key":"chose an","Fragments":["algorithm","object","object","object","object"]},{"Key":"algorithm or","Fragments":["additional","ternary"]},{"Key":"or additional","Fragments":["input"]},{"Key":"additional input","Fragments":["parameters"]},{"Key":"input parameters","Fragments":["and"]},{"Key":"parameters and","Fragments":["therefore"]},{"Key":"therefore additional","Fragments":["tests."]},{"Key":"additional tests.","Fragments":["That"]},{"Key":"tests. That","Fragments":["seemed"]},{"Key":"That seemed","Fragments":["like"]},{"Key":"like too","Fragments":["much"]},{"Key":"much trouble","Fragments":["for"]},{"Key":"simple problem,","Fragments":["so","but"]},{"Key":"problem, so","Fragments":["I"]},{"Key":"I deliberately","Fragments":["decided"]},{"Key":"deliberately decided","Fragments":["to"]},{"Key":"test driven","Fragments":["approach"]},{"Key":"driven approach","Fragments":["that"]},{"Key":"is practised","Fragments":["here"]},{"Key":"practised here","Fragments":["one"]},{"Key":"here one","Fragments":["can"]},{"Key":"can argue","Fragments":["that"]},{"Key":"decision can","Fragments":["be"]},{"Key":"be deferred","Fragments":["until"]},{"Key":"deferred until","Fragments":["further"]},{"Key":"until further","Fragments":["requirements"]},{"Key":"further requirements","Fragments":["and"]},{"Key":"requirements and","Fragments":["test"]},{"Key":"are added","Fragments":["that"]},{"Key":"that enforce","Fragments":["a"]},{"Key":"enforce a","Fragments":["specific"]},{"Key":"specific solution.","Fragments":["That"]},{"Key":"solution. That","Fragments":["way"]},{"Key":"way one","Fragments":["is"]},{"Key":"not forced","Fragments":["to"]},{"Key":"to invest","Fragments":["time"]},{"Key":"invest time","Fragments":["to"]},{"Key":"solve a","Fragments":["problem","problem"]},{"Key":"yet clearly","Fragments":["formulated."]},{"Key":" @ryder","Fragments":["You"]},{"Key":"@ryder You","Fragments":["are"]},{"Key":"the *Prime","Fragments":["Factors*"]},{"Key":"*Prime Factors*","Fragments":["exercise.","I"]},{"Key":"Factors* exercise.","Fragments":["On"]},{"Key":"exercise. On","Fragments":["my"]},{"Key":"solution of","Fragments":["the","storing"]},{"Key":"the python","Fragments":["version"]},{"Key":"python version","Fragments":["of"]},{"Key":"of *Prime","Fragments":["Factors*"]},{"Key":"Factors* I","Fragments":["got"]},{"Key":"that suggested","Fragments":["that"]},{"Key":"suggested that","Fragments":["this"]},{"Key":"this extra","Fragments":["treatment","copy."]},{"Key":"extra treatment","Fragments":["should"]},{"Key":"treatment should","Fragments":["be"]},{"Key":"removed if","Fragments":["speed"]},{"Key":"if speed","Fragments":["was"]},{"Key":"speed was","Fragments":["not"]},{"Key":"a major","Fragments":["concern","goal","cause,"]},{"Key":"major concern","Fragments":["since"]},{"Key":"concern since","Fragments":["it"]},{"Key":"it added","Fragments":["complexity."]},{"Key":"added complexity.","Fragments":["I"]},{"Key":"complexity. I","Fragments":["guess"]},{"Key":"it's always","Fragments":["a","the"]},{"Key":"always a","Fragments":["trade","chance","good","good"]},{"Key":"a trade","Fragments":["off"]},{"Key":"trade off","Fragments":["between","here"]},{"Key":"off between","Fragments":["high"]},{"Key":"between high","Fragments":["speed"]},{"Key":"high speed","Fragments":["and"]},{"Key":"speed and","Fragments":["low","readability."]},{"Key":"and low","Fragments":["complexity."]},{"Key":"BTW for","Fragments":["any"]},{"Key":"life problem","Fragments":["I"]},{"Key":"a library","Fragments":["like","function","data"]},{"Key":"library like","Fragments":["GMP"]},{"Key":"like GMP","Fragments":["that"]},{"Key":"GMP that","Fragments":["has"]},{"Key":"has more","Fragments":["sophisticated","advantages.","of"]},{"Key":"sophisticated approaches","Fragments":["to"]},{"Key":"approaches to","Fragments":["decide"]},{"Key":"all, I","Fragments":["don't"]},{"Key":"don't consider","Fragments":["it"]},{"Key":"consider it","Fragments":["is","to"]},{"Key":"define multiple","Fragments":["variables"]},{"Key":"multiple variables","Fragments":["in","in"]},{"Key":"interface, your","Fragments":["client"]},{"Key":"client will","Fragments":["not","use"]},{"Key":"access this","Fragments":["constants."]},{"Key":"this constants.","Fragments":["For"]},{"Key":"constants. For","Fragments":["me"]},{"Key":"me it","Fragments":["is","looks"]},{"Key":"implementation detail.","Fragments":["Therefore"]},{"Key":"detail. Therefore","Fragments":["I"]},{"Key":"Therefore I","Fragments":["would","would","tried","don't"]},{"Key":"would define","Fragments":["the","4"]},{"Key":"responses inside","Fragments":["an"]},{"Key":"inside an","Fragments":["unnamed","initializer."]},{"Key":"an unnamed","Fragments":["namespace"]},{"Key":"unnamed namespace","Fragments":["in","inside","for","instead"]},{"Key":"hey function.","Fragments":["Do","Also,"]},{"Key":"function. Do","Fragments":["you"]},{"Key":"a 'const","Fragments":["string","char"]},{"Key":"'const string","Fragments":["\u0026'"]},{"Key":"string \u0026'","Fragments":["or"]},{"Key":"\u0026' or","Fragments":["should"]},{"Key":"or should","Fragments":["you"]},{"Key":"should you","Fragments":["use"]},{"Key":"'const char","Fragments":["*'"]},{"Key":"char *'","Fragments":["instead."]},{"Key":"*' instead.","Fragments":["In"]},{"Key":"instead. In","Fragments":["my"]},{"Key":"opinion there","Fragments":["is"]},{"Key":"no good","Fragments":["answer","reason","reason"]},{"Key":"good answer","Fragments":["here."]},{"Key":"answer here.","Fragments":["It"]},{"Key":"here. It","Fragments":["depends","might","looks","only"]},{"Key":"It depends","Fragments":["on","on"]},{"Key":"think (i.e.","Fragments":["want)"]},{"Key":"(i.e. want)","Fragments":["the"]},{"Key":"want) the","Fragments":["'client'"]},{"Key":"the 'client'","Fragments":["to"]},{"Key":"'client' to","Fragments":["do"]},{"Key":"response with","Fragments":["only"]},{"Key":"feel however","Fragments":["that"]},{"Key":"however that","Fragments":["your"]},{"Key":"solution lacks","Fragments":["of"]},{"Key":"of readability.","Fragments":["First"]},{"Key":"readability. First","Fragments":["of"]},{"Key":"define 4","Fragments":["constants"]},{"Key":"4 constants","Fragments":["for"]},{"Key":"different responses.","Fragments":["It"]},{"Key":"responses. It","Fragments":["would"]},{"Key":"read 'return","Fragments":["RESPONSE_WHATEVER'"]},{"Key":"'return RESPONSE_WHATEVER'","Fragments":["instead"]},{"Key":"RESPONSE_WHATEVER' instead","Fragments":["of"]},{"Key":"of 'return","Fragments":["RESPONSES[0]'."]},{"Key":"class. A","Fragments":["namespace"]},{"Key":"A namespace","Fragments":["with","is","is"]},{"Key":"enough for","Fragments":["this","me","me","me","you","me\"."]},{"Key":"this problem.","Fragments":["Moreover,","Using","One","Great","In","In"]},{"Key":"problem. Moreover,","Fragments":["the"]},{"Key":"Moreover, the","Fragments":["responses"]},{"Key":"responses don't","Fragments":["need"]},{"Key":"class. You","Fragments":["can"]},{"Key":"define them","Fragments":["in","as"]},{"Key":"a unnamed","Fragments":["namespace"]},{"Key":"could safely","Fragments":["remove"]},{"Key":"safely remove","Fragments":["the"]},{"Key":"first empty","Fragments":["check."]},{"Key":"empty check.","Fragments":["It"]},{"Key":"check. It","Fragments":["will"]},{"Key":"clearer as","Fragments":["all"]},{"Key":"response will","Fragments":["be"]},{"Key":"You also","Fragments":["don't","don't","made","don't","don't","don't"]},{"Key":"create and","Fragments":["specify"]},{"Key":"and specify","Fragments":["the"]},{"Key":"locale for","Fragments":["isalpha,"]},{"Key":"for isalpha,","Fragments":["islower"]},{"Key":"isalpha, islower","Fragments":["and"]},{"Key":"islower and","Fragments":["isdigit.","isupper?","isupper"]},{"Key":"and isdigit.","Fragments":["A"]},{"Key":"isdigit. A","Fragments":["default"]},{"Key":"A default","Fragments":["one"]},{"Key":"is provided","Fragments":["for"]},{"Key":"provided for","Fragments":["you."]},{"Key":"indeed not","Fragments":["required"]},{"Key":"required here.","Fragments":["But"]},{"Key":"here. But","Fragments":["I","I"]},{"Key":"the exercise.","Fragments":[";)","The"]},{"Key":"Hi, I","Fragments":["appreciate"]},{"Key":" Certainly","Fragments":["interesting"]},{"Key":"Certainly interesting","Fragments":["to"]},{"Key":"best return","Fragments":["type"]},{"Key":"type would","Fragments":["be"]},{"Key":"be for","Fragments":["`hey`,"]},{"Key":"for `hey`,","Fragments":["at"]},{"Key":"`hey`, at","Fragments":["the"]},{"Key":"moment it's","Fragments":["dictated"]},{"Key":"it's dictated","Fragments":["by"]},{"Key":"dictated by","Fragments":["the"]},{"Key":"chose for","Fragments":["the"]},{"Key":"response constants","Fragments":["-"]},{"Key":"constants -","Fragments":["I"]},{"Key":"want those","Fragments":["to","definitions"]},{"Key":"to match.","Fragments":["I"]},{"Key":"match. I","Fragments":["suppose","suggest"]},{"Key":"suppose `const","Fragments":["char"]},{"Key":"*` might","Fragments":["be"]},{"Key":"efficient considering","Fragments":["that"]},{"Key":"considering that","Fragments":["I"]},{"Key":"can't see","Fragments":["whatever's","why","it,","it,","any"]},{"Key":"see whatever's","Fragments":["calling"]},{"Key":"whatever's calling","Fragments":["this"]},{"Key":"calling this","Fragments":["procedure","function"]},{"Key":"this procedure","Fragments":["doing"]},{"Key":"procedure doing","Fragments":["anything"]},{"Key":"doing anything","Fragments":["more"]},{"Key":"anything more","Fragments":["than","complex,"]},{"Key":"than either","Fragments":["comparing"]},{"Key":"either comparing","Fragments":["to"]},{"Key":"the constants","Fragments":["(why","(for","private,"]},{"Key":"constants (why","Fragments":["they're"]},{"Key":"(why they're","Fragments":["accessible),"]},{"Key":"they're accessible),","Fragments":["or"]},{"Key":"accessible), or","Fragments":["just"]},{"Key":"just printing","Fragments":["out","out"]},{"Key":"printing out","Fragments":["the","an"]},{"Key":"the response.","Fragments":["Hm."]},{"Key":"response. Hm.","Fragments":["I'm"]},{"Key":"Hm. I'm","Fragments":["not"]},{"Key":"*` versus","Fragments":["`const"]},{"Key":"versus `const","Fragments":["string"]},{"Key":"string \u0026`","Fragments":["-"]},{"Key":"\u0026` -","Fragments":["would"]},{"Key":"- would","Fragments":["that"]},{"Key":"would that","Fragments":["be"]},{"Key":"curious as","Fragments":["to"]},{"Key":"reasoning behind","Fragments":["the"]},{"Key":"behind the","Fragments":["multiple","ordering"]},{"Key":"a statement","Fragments":["bit;","is"]},{"Key":"statement bit;","Fragments":["I"]},{"Key":"bit; I","Fragments":["feel"]},{"Key":"feel the","Fragments":["indentation","code","erasing"]},{"Key":"the indentation","Fragments":["and"]},{"Key":"indentation and","Fragments":["naming"]},{"Key":"and naming","Fragments":["make"]},{"Key":"naming make","Fragments":["the"]},{"Key":"and intent","Fragments":["obvious,"]},{"Key":"intent obvious,","Fragments":["so"]},{"Key":"obvious, so","Fragments":["what","it's"]},{"Key":"so what","Fragments":["would","difference"]},{"Key":"be gained","Fragments":["by"]},{"Key":"gained by","Fragments":["splitting"]},{"Key":"by splitting","Fragments":["them"]},{"Key":"splitting them","Fragments":["into"]},{"Key":"into individual","Fragments":["declarations?","functions;"]},{"Key":"individual declarations?","Fragments":["I"]},{"Key":"declarations? I","Fragments":["might"]},{"Key":"even argue","Fragments":["that"]},{"Key":"that having","Fragments":["a"]},{"Key":"single declaration","Fragments":["of"]},{"Key":"preferable since","Fragments":["they're"]},{"Key":"they're all","Fragments":["intended"]},{"Key":"all intended","Fragments":["to"]},{"Key":"same function","Fragments":["and"]},{"Key":"and must","Fragments":["have"]},{"Key":"could typedef","Fragments":["the"]},{"Key":"typedef the","Fragments":["return"]},{"Key":"single authority","Fragments":["on"]},{"Key":"authority on","Fragments":["what"]},{"Key":"be. That","Fragments":["might"]},{"Key":"an improvement,","Fragments":["and"]},{"Key":"improvement, and","Fragments":["allow"]},{"Key":"allow splitting","Fragments":["multiple"]},{"Key":"splitting multiple","Fragments":["lines?"]},{"Key":"Be careful,","Fragments":["you","your"]},{"Key":"careful, you","Fragments":["changed"]},{"Key":"you changed","Fragments":["the"]},{"Key":"hey from","Fragments":["a","the"]},{"Key":"```const std::string","Fragments":["\u0026```","\u0026```","\u0026```"]},{"Key":"std::string \u0026```","Fragments":["to","as","to"]},{"Key":"\u0026``` to","Fragments":["a","avoid"]},{"Key":"```const std::string```.","Fragments":["This"]},{"Key":"std::string```. This","Fragments":["mean"]},{"Key":"This mean","Fragments":["that"]},{"Key":"will perform","Fragments":["a"]},{"Key":"response on","Fragments":["each"]},{"Key":"on each","Fragments":["call","value"]},{"Key":"The typedef","Fragments":["might"]},{"Key":"typedef might","Fragments":["be"]},{"Key":"good solution.","Fragments":["I"]},{"Key":"really sure","Fragments":["you","how","what","how"]},{"Key":"lot with","Fragments":["it","this"]},{"Key":"not (refer","Fragments":["to"]},{"Key":"(refer to","Fragments":["my"]},{"Key":"my comment","Fragments":["on"]},{"Key":"your previous","Fragments":["commit","solution","iteration."]},{"Key":"previous commit","Fragments":["for","which"]},{"Key":"commit for","Fragments":["the"]},{"Key":"the treatment","Fragments":["you"]},{"Key":"treatment you","Fragments":["are"]},{"Key":"doing in","Fragments":["the"]},{"Key":"the ```is_shouty```","Fragments":["function"]},{"Key":"```is_shouty``` function","Fragments":["is"]},{"Key":"really clear.","Fragments":["I"]},{"Key":"clear. I","Fragments":["think","like","personally","included","think"]},{"Key":"you created","Fragments":["two"]},{"Key":"created two","Fragments":["functions"]},{"Key":"functions ```is_upper```","Fragments":["and"]},{"Key":"```is_lower``` and","Fragments":["call","```is_upper```"]},{"Key":"call them","Fragments":["in"]},{"Key":"a sense","Fragments":["you","you"]},{"Key":"sense you","Fragments":["are","are"]},{"Key":"right. Just","Fragments":["that"]},{"Key":"Just that","Fragments":["I"]},{"Key":"am working","Fragments":["with"]},{"Key":"compiler where","Fragments":["two"]},{"Key":"where two","Fragments":["floats"]},{"Key":"two floats","Fragments":["are","for"]},{"Key":"floats are","Fragments":["never"]},{"Key":"are never","Fragments":["equal"]},{"Key":"never equal","Fragments":["and"]},{"Key":"equal and","Fragments":["for"]},{"Key":"I'd never","Fragments":["really","really"]},{"Key":"really thought","Fragments":["of"]},{"Key":"interface before,","Fragments":["interesting."]},{"Key":"before, interesting.","Fragments":["Submitted"]},{"Key":"interesting. Submitted","Fragments":["another"]},{"Key":"Submitted another","Fragments":["iteration."]},{"Key":"another iteration.","Fragments":["Definitely"]},{"Key":"iteration. Definitely","Fragments":["agree"]},{"Key":"Definitely agree","Fragments":["that"]},{"Key":"that `is_shouty`","Fragments":["needed"]},{"Key":"`is_shouty` needed","Fragments":["fixing."]},{"Key":"needed fixing.","Fragments":[":)"]},{"Key":"the \"always","Fragments":["`auto`\"","```auto```\"","use"]},{"Key":"\"always `auto`\"","Fragments":["convention"]},{"Key":"`auto`\" convention","Fragments":["seems"]},{"Key":"convention seems","Fragments":["beneficial"]},{"Key":"seems beneficial","Fragments":["but"]},{"Key":"beneficial but","Fragments":["I"]},{"Key":"wonder if","Fragments":["this","the","I","i","the","this","it's"]},{"Key":"actually less","Fragments":["clear"]},{"Key":"clear /","Fragments":["less"]},{"Key":"less maintainable","Fragments":["than"]},{"Key":"maintainable than","Fragments":["before?"]},{"Key":"auto RESPONSE_TO_SILENCE","Fragments":["=","="]},{"Key":"RESPONSE_TO_SILENCE =","Fragments":["bob_speech{\"Fine.","\"Fine."]},{"Key":"= bob_speech{\"Fine.","Fragments":["Be"]},{"Key":"bob_speech{\"Fine. Be","Fragments":["that"]},{"Key":"auto RESPONSE_TO_YELLING","Fragments":["="]},{"Key":"RESPONSE_TO_YELLING =","Fragments":["bob_speech{\"Whoa,"]},{"Key":"= bob_speech{\"Whoa,","Fragments":["chill"]},{"Key":"bob_speech{\"Whoa, chill","Fragments":["out!\"};"]},{"Key":"auto RESPONSE_TO_QUESTIONS","Fragments":["="]},{"Key":"RESPONSE_TO_QUESTIONS =","Fragments":["bob_speech{\"Sure.\"};"]},{"Key":"auto DEFAULT_RESPONSE","Fragments":["="]},{"Key":"DEFAULT_RESPONSE =","Fragments":["bob_speech{\"Whatever.\"};"]},{"Key":"was on","Fragments":["the"]},{"Key":"the fence","Fragments":["about"]},{"Key":"fence about","Fragments":["whether"]},{"Key":"about whether","Fragments":["bob","reference","I","we"]},{"Key":"whether bob","Fragments":["would"]},{"Key":"bob would","Fragments":["be"]},{"Key":"a coin","Fragments":["toss"]},{"Key":"coin toss","Fragments":["decided."]},{"Key":"the comment","Fragments":["about","in"]},{"Key":"about unnamed","Fragments":["namespaces,"]},{"Key":"unnamed namespaces,","Fragments":["I'll"]},{"Key":"namespaces, I'll","Fragments":["definitely"]},{"Key":"I'll definitely","Fragments":["use","use"]},{"Key":"definitely use","Fragments":["it","these"]},{"Key":"for defining","Fragments":["the"]},{"Key":"defining the","Fragments":["responses"]},{"Key":"responses in","Fragments":["the"]},{"Key":"Any feedback","Fragments":["would","is","wil"]},{"Key":"be greatly","Fragments":["appreciated","appreciated."]},{"Key":"greatly appreciated","Fragments":["as"]},{"Key":"appreciated as","Fragments":["I've"]},{"Key":"as I've","Fragments":["just","written"]},{"Key":"I've just","Fragments":["recently","tried","realised"]},{"Key":"just recently","Fragments":["started"]},{"Key":"recently started","Fragments":["learning"]},{"Key":"started learning","Fragments":["C++."]},{"Key":"think if","Fragments":["you","you","you","this"]},{"Key":"\"always ```auto```\"","Fragments":["convention"]},{"Key":"```auto```\" convention","Fragments":["you"]},{"Key":"convention you","Fragments":["should"]},{"Key":"the bob_speech","Fragments":["type"]},{"Key":"bob_speech type","Fragments":["but"]},{"Key":"type but","Fragments":["only:"]},{"Key":"= \"Fine.","Fragments":["Be"]},{"Key":"even use","Fragments":["auto"]},{"Key":"auto type","Fragments":["deduction."]},{"Key":"type deduction.","Fragments":["However,"]},{"Key":"deduction. However,","Fragments":["in"]},{"Key":"constants (for","Fragments":["the"]},{"Key":"C++11 version)","Fragments":["or"]},{"Key":"version) or","Fragments":["of"]},{"Key":"or of","Fragments":["the"]},{"Key":"function (for","Fragments":["the","example,"]},{"Key":"the C++14","Fragments":["version)"]},{"Key":"C++14 version)","Fragments":["must"]},{"Key":"version) must","Fragments":["be"]},{"Key":"be available","Fragments":["in","in","inside"]},{"Key":"auto hey(std::string","Fragments":["query)","query)"]},{"Key":"hey(std::string query)","Fragments":["-\u003e","{"]},{"Key":"query) -\u003e","Fragments":["decltype(RESPONSE_TO_SILENCE);"]},{"Key":" ref:","Fragments":["https://isocpp.org/wiki/faq/cpp14-language#generalized-return"]},{"Key":"fact it","Fragments":["is"]},{"Key":"less clear/maintainable,","Fragments":["it"]},{"Key":"clear/maintainable, it","Fragments":["is"]},{"Key":"an open","Fragments":["question."]},{"Key":"open question.","Fragments":["You"]},{"Key":"question. You","Fragments":["can"]},{"Key":"arguments for","Fragments":["auto","two"]},{"Key":"auto in","Fragments":["Herb's","function","line","line"]},{"Key":"in Herb's","Fragments":["post."]},{"Key":"Herb's post.","Fragments":["However,"]},{"Key":"post. However,","Fragments":["you"]},{"Key":"people disagreeing.","Fragments":["Personally"]},{"Key":"disagreeing. Personally","Fragments":["I"]},{"Key":"don't stick","Fragments":["to"]},{"Key":"a rule","Fragments":["and","of","of","for"]},{"Key":"rule and","Fragments":["use"]},{"Key":"use ```auto```","Fragments":["when"]},{"Key":"```auto``` when","Fragments":["I"]},{"Key":" Great,","Fragments":["I"]},{"Key":"Great, I","Fragments":["find"]},{"Key":"really easier","Fragments":["to"]},{"Key":"way. However","Fragments":["I"]},{"Key":"However I","Fragments":["would","wonder"]},{"Key":"do two","Fragments":["more"]},{"Key":"two more","Fragments":["changes."]},{"Key":"1. I","Fragments":["think","don't","like","think","tend","suggest","should"]},{"Key":"the ```is_lower```","Fragments":["check"]},{"Key":"```is_lower``` check","Fragments":["is"]},{"Key":"really there","Fragments":["to"]},{"Key":"lower case.","Fragments":["The","And","[More","It","Then","That","It'll"]},{"Key":"The thing","Fragments":["you","I","I'd","you"]},{"Key":"contains letters.","Fragments":["Therefore"]},{"Key":"letters. Therefore","Fragments":["I"]},{"Key":"would replace","Fragments":["it"]},{"Key":"a ```contains_letter```","Fragments":["function."]},{"Key":"functions ```is_lower```","Fragments":["and"]},{"Key":"and ```is_upper```","Fragments":["performs"]},{"Key":"```is_upper``` performs","Fragments":["a"]},{"Key":"performs a","Fragments":["copy"]},{"Key":"string. However","Fragments":["this"]},{"Key":"However this","Fragments":["is","is"]},{"Key":"not necessary.","Fragments":["You","I'll"]},{"Key":"necessary. You","Fragments":["could"]},{"Key":"algorithm ```std::all_of```","Fragments":["and"]},{"Key":"```std::all_of``` and","Fragments":["the"]},{"Key":"predicate ```isupper```.","Fragments":["You"]},{"Key":"```isupper```. You","Fragments":["can"]},{"Key":"same technique","Fragments":["for"]},{"Key":"technique for","Fragments":["the"]},{"Key":"the ```contains_letter```","Fragments":["function"]},{"Key":"```contains_letter``` function","Fragments":["if"]},{"Key":"function if","Fragments":["you","I","you","you"]},{"Key":"you follow","Fragments":["the"]},{"Key":" interesting","Fragments":["use"]},{"Key":"interesting use","Fragments":["of","of"]},{"Key":"of decltype,","Fragments":["don't"]},{"Key":"decltype, don't","Fragments":["have"]},{"Key":"any experience","Fragments":["with"]},{"Key":"that, neat.","Fragments":["thanks"]},{"Key":"neat. thanks","Fragments":["again!"]},{"Key":" @trycia","Fragments":["Thanks!","Yeah,"]},{"Key":"@trycia Thanks!","Fragments":["Was"]},{"Key":"Thanks! Was","Fragments":["wondering"]},{"Key":"Was wondering","Fragments":["how"]},{"Key":"wondering how","Fragments":["to"]},{"Key":"that :)","Fragments":["The"]},{"Key":":) The","Fragments":["header","only","[]"]},{"Key":"@trycia Yeah,","Fragments":["you"]},{"Key":"Yeah, you","Fragments":["might"]},{"Key":"case. What","Fragments":["I"]},{"Key":"about `response`","Fragments":["is"]},{"Key":"`response` is","Fragments":["that"]},{"Key":"the `switch`-with-`enum`","Fragments":["isolates"]},{"Key":"`switch`-with-`enum` isolates","Fragments":["the"]},{"Key":"isolates the","Fragments":["overall"]},{"Key":"overall logic","Fragments":["of","is"]},{"Key":"place (i.e.,","Fragments":["`bob`"]},{"Key":"(i.e., `bob`","Fragments":["is"]},{"Key":"`bob` is","Fragments":["a","a"]},{"Key":"a program","Fragments":["that"]},{"Key":"program that","Fragments":["responds","passes","uses"]},{"Key":"that responds","Fragments":["to"]},{"Key":"responds to","Fragments":["yelling","yelling","yelling."]},{"Key":"to yelling","Fragments":["with","with","by"]},{"Key":"yelling with","Fragments":["\"Whoa","\"Whoa!"]},{"Key":"with \"Whoa","Fragments":["chill"]},{"Key":"\"Whoa chill","Fragments":["out\","]},{"Key":"chill out\",","Fragments":["etc.)"]},{"Key":"out\", etc.)","Fragments":["You"]},{"Key":"etc.) You","Fragments":["can"]},{"Key":"function w/o","Fragments":["having"]},{"Key":"w/o having","Fragments":["to"]},{"Key":"how Yelling","Fragments":["is"]},{"Key":"Yelling is","Fragments":["defined,","defined"]},{"Key":"defined, etc.","Fragments":["You"]},{"Key":"could show","Fragments":["it"]},{"Key":"show it","Fragments":["to"]},{"Key":"a non-technical","Fragments":["client"]},{"Key":"non-technical client","Fragments":["and"]},{"Key":"client and","Fragments":["have"]},{"Key":"them confirm","Fragments":["the"]},{"Key":"confirm the","Fragments":["program","speed"]},{"Key":"program is","Fragments":["correct.","very","(bob","basically","supposed"]},{"Key":"correct. Given","Fragments":["that"]},{"Key":"the rules","Fragments":["for","about","of","say"]},{"Key":"for `classify_statement`","Fragments":["are"]},{"Key":"`classify_statement` are","Fragments":["so"]},{"Key":"so simple,","Fragments":["the"]},{"Key":"simple, the","Fragments":["functions"]},{"Key":"functions look","Fragments":["the"]},{"Key":"same, but","Fragments":["if","i"]},{"Key":"were more","Fragments":["complicated,","than"]},{"Key":"more complicated,","Fragments":["I"]},{"Key":"complicated, I","Fragments":["think"]},{"Key":"the separation","Fragments":["of"]},{"Key":"of `classify`","Fragments":["and"]},{"Key":"`classify` and","Fragments":["`response`"]},{"Key":"and `response`","Fragments":["would"]},{"Key":"`response` would","Fragments":["appear"]},{"Key":"would appear","Fragments":["more"]},{"Key":"appear more","Fragments":["useful."]},{"Key":"for iteration","Fragments":["2."]},{"Key":"iteration 2.","Fragments":["I"]},{"Key":"I screwed","Fragments":["up"]},{"Key":"screwed up","Fragments":["the"]},{"Key":"the submission","Fragments":["for"]},{"Key":"that iteration","Fragments":[":/","it"]},{"Key":"Hey --","Fragments":["Really"]},{"Key":"-- Really","Fragments":["nice"]},{"Key":"Really nice","Fragments":["use","solution."]},{"Key":"and STL","Fragments":["algorithms!"]},{"Key":"STL algorithms!","Fragments":["I"]},{"Key":"algorithms! I","Fragments":["have"]},{"Key":"have 2.5","Fragments":["comments:"]},{"Key":"quite get","Fragments":["what","your"]},{"Key":"get what","Fragments":["building","you're","you're"]},{"Key":"what building","Fragments":["all"]},{"Key":"building all","Fragments":["this"]},{"Key":"this functionality","Fragments":["around"]},{"Key":"functionality around","Fragments":["C-style"]},{"Key":"around C-style","Fragments":["strings"]},{"Key":"strings (char","Fragments":["arrays)"]},{"Key":"(char arrays)","Fragments":["gets"]},{"Key":"arrays) gets","Fragments":["you"]},{"Key":"gets you","Fragments":["over"]},{"Key":"you over","Fragments":["using"]},{"Key":"over using","Fragments":["`std::string`s"]},{"Key":"using `std::string`s","Fragments":["and"]},{"Key":"`std::string`s and","Fragments":["their"]},{"Key":"and their","Fragments":["iterators."]},{"Key":"their iterators.","Fragments":["It"]},{"Key":"iterators. It","Fragments":["looks"]},{"Key":"like all","Fragments":["your"]},{"Key":"could operate","Fragments":["on"]},{"Key":"on strings","Fragments":["exactly","with","does"]},{"Key":"strings exactly","Fragments":["the"]},{"Key":"didn't already","Fragments":["know"]},{"Key":"already know","Fragments":["what"]},{"Key":"program did,","Fragments":["I"]},{"Key":"did, I","Fragments":["would","suspect"]},{"Key":"find this","Fragments":["a","obvious","out.","exercise,","funny","code"]},{"Key":"little hard","Fragments":["to","to"]},{"Key":"follow. The","Fragments":["actual"]},{"Key":"actual meaning","Fragments":["of"]},{"Key":"meaning of","Fragments":["the"]},{"Key":"program doesn't","Fragments":["start","parse"]},{"Key":"doesn't start","Fragments":["to"]},{"Key":"get expressed","Fragments":["until"]},{"Key":"expressed until","Fragments":["line"]},{"Key":"until line","Fragments":["55."]},{"Key":"line 55.","Fragments":["Until"]},{"Key":"55. Until","Fragments":["then,"]},{"Key":"Until then,","Fragments":["it's"]},{"Key":"then, it's","Fragments":["not"]},{"Key":"clear what","Fragments":["all","that","sort","this"]},{"Key":"what all","Fragments":["these","the"]},{"Key":"these custom","Fragments":["data"]},{"Key":"custom data","Fragments":["types"]},{"Key":"types and","Fragments":["helper","its"]},{"Key":"and helper","Fragments":["functions"]},{"Key":" 2.5","Fragments":["`trimed`"]},{"Key":"2.5 `trimed`","Fragments":["should"]},{"Key":"`trimed` should","Fragments":["be"]},{"Key":" Hi!","Fragments":["This","This"]},{"Key":"Hi! This","Fragments":["is","is"]},{"Key":"really clear,","Fragments":["straightforward"]},{"Key":"clear, straightforward","Fragments":["implementation,"]},{"Key":"straightforward implementation,","Fragments":["I"]},{"Key":" Re.","Fragments":["`strip`--since"]},{"Key":"Re. `strip`--since","Fragments":["it's"]},{"Key":"`strip`--since it's","Fragments":["operating"]},{"Key":"it's operating","Fragments":["on"]},{"Key":"operating on","Fragments":["a"]},{"Key":"reference, it","Fragments":["doesn't"]},{"Key":"return anything","Fragments":["(i.e.,"]},{"Key":"anything (i.e.,","Fragments":["it's"]},{"Key":"(i.e., it's","Fragments":["return"]},{"Key":"it's return","Fragments":["type"]},{"Key":"be `void`.)","Fragments":["If"]},{"Key":"`void`.) If","Fragments":["you"]},{"Key":"define `string","Fragments":["myString"]},{"Key":"`string myString","Fragments":["\"hello"]},{"Key":"myString \"hello","Fragments":["spaces\"`"]},{"Key":"\"hello spaces\"`","Fragments":["and"]},{"Key":"spaces\"` and","Fragments":["call"]},{"Key":"call strip","Fragments":["on"]},{"Key":"strip on","Fragments":["it,"]},{"Key":"on it,","Fragments":["then","but","and","it"]},{"Key":"then `myString`","Fragments":["will"]},{"Key":"`myString` will","Fragments":["be"]},{"Key":"be `\"hellospaces\"`","Fragments":["after"]},{"Key":"`\"hellospaces\"` after","Fragments":["that"]},{"Key":"function call.","Fragments":["Returning"]},{"Key":"call. Returning","Fragments":["a"]},{"Key":"new reference","Fragments":["is"]},{"Key":"that, I","Fragments":["would","hadn't","don't","think","like","was"]},{"Key":"recommend just","Fragments":["having"]},{"Key":"having this","Fragments":["method"]},{"Key":"method take","Fragments":["just"]},{"Key":"take just","Fragments":["a"]},{"Key":"string (not","Fragments":["a"]},{"Key":"(not a","Fragments":["`string","criticism,"]},{"Key":"a `string","Fragments":["\u0026`)."]},{"Key":"`string \u0026`).","Fragments":["This"]},{"Key":"\u0026`). This","Fragments":["will"]},{"Key":"argument into","Fragments":["`s`,"]},{"Key":"into `s`,","Fragments":["and"]},{"Key":"`s`, and","Fragments":["not"]},{"Key":"modify that","Fragments":["variable."]},{"Key":"that variable.","Fragments":["It's"]},{"Key":"variable. It's","Fragments":["harder","redundant."]},{"Key":"It's harder","Fragments":["to"]},{"Key":"about arguments","Fragments":["that"]},{"Key":"that modify","Fragments":["their"]},{"Key":"modify their","Fragments":["arguments,","signatures","arguments,"]},{"Key":"their arguments,","Fragments":["and","so"]},{"Key":"arguments, and","Fragments":["I"]},{"Key":"big efficiency","Fragments":["gain"]},{"Key":"efficiency gain","Fragments":["here."]},{"Key":"don't include","Fragments":["those","other"]},{"Key":"include those","Fragments":["functions"]},{"Key":"the `bob`","Fragments":["namespace,","namespace;","namespace."]},{"Key":"`bob` namespace,","Fragments":["or"]},{"Key":"or declared","Fragments":["in"]},{"Key":"anyone imports","Fragments":["bob"]},{"Key":"imports bob","Fragments":["into"]},{"Key":"bob into","Fragments":["their"]},{"Key":"own code,","Fragments":["I","I","but"]},{"Key":" Couldn't","Fragments":["get"]},{"Key":"Couldn't get","Fragments":["`all_of`"]},{"Key":"get `all_of`","Fragments":["working,"]},{"Key":"`all_of` working,","Fragments":["will"]},{"Key":"working, will","Fragments":["need"]},{"Key":"that later;","Fragments":["very"]},{"Key":"later; very","Fragments":["much"]},{"Key":"much agree","Fragments":["with"]},{"Key":"with `is_lower`","Fragments":["being"]},{"Key":"`is_lower` being","Fragments":["inappropriate,"]},{"Key":"being inappropriate,","Fragments":["so"]},{"Key":"inappropriate, so","Fragments":["replaced"]},{"Key":"so replaced","Fragments":["with"]},{"Key":"non all_of","Fragments":["implementation"]},{"Key":"all_of implementation","Fragments":["of"]},{"Key":"Cool, didn't","Fragments":["know"]},{"Key":"between `enum`","Fragments":["and"]},{"Key":"`enum` and","Fragments":["`enum"]},{"Key":"and `enum","Fragments":["class`"]},{"Key":"`enum class`","Fragments":["until"]},{"Key":"class` until","Fragments":["reading"]},{"Key":"until reading","Fragments":["this"]},{"Key":"reading this","Fragments":["and"]},{"Key":"I totally","Fragments":["botched","get","agree","get","agree","agree"]},{"Key":"totally botched","Fragments":["the"]},{"Key":"botched the","Fragments":["first"]},{"Key":"first upload","Fragments":["on"]},{"Key":"upload on","Fragments":["mine,"]},{"Key":"on mine,","Fragments":["too."]},{"Key":"mine, too.","Fragments":[":)"]},{"Key":" Nice!","Fragments":["I","I",":+1:","I","I","I"]},{"Key":"Nice! I","Fragments":["really","like","haven't","had","went"]},{"Key":"the ```has_letter```","Fragments":["function."]},{"Key":"```has_letter``` function.","Fragments":["It"]},{"Key":"big improvement,","Fragments":["especially"]},{"Key":"improvement, especially","Fragments":["with"]},{"Key":"especially with","Fragments":["the","large"]},{"Key":"the ```any_of```","Fragments":["algorithm."]},{"Key":"simplify the","Fragments":["any_of","math,","algorithm","design"]},{"Key":"the any_of","Fragments":["statement"]},{"Key":"any_of statement","Fragments":["using"]},{"Key":"statement using","Fragments":["directly"]},{"Key":"using directly","Fragments":["the"]},{"Key":"directly the","Fragments":["```isalpha```","response"]},{"Key":"the ```isalpha```","Fragments":["function"]},{"Key":"```isalpha``` function","Fragments":["as"]},{"Key":"predicate of","Fragments":["any_of."]},{"Key":"of any_of.","Fragments":["However,"]},{"Key":"any_of. However,","Fragments":["you"]},{"Key":"the 'C'","Fragments":["version"]},{"Key":"'C' version","Fragments":["instead"]},{"Key":"version instead","Fragments":["of"]},{"Key":"of ```std::isalpha```.","Fragments":["As"]},{"Key":"```std::isalpha```. As","Fragments":["you"]},{"Key":"namespace std,","Fragments":["you"]},{"Key":"std, you","Fragments":["must"]},{"Key":"must specify","Fragments":["that"]},{"Key":"specify that","Fragments":["the","you"]},{"Key":"want is","Fragments":["in","if"]},{"Key":"global namespace:","Fragments":["```::isalpha```."]},{"Key":"same logic","Fragments":["for","and"]},{"Key":"the is","Fragments":["upper"]},{"Key":"is upper","Fragments":["function","etc)","case\"","case."]},{"Key":"upper function","Fragments":["with"]},{"Key":"the ```all_of```","Fragments":["algorithm."]},{"Key":"```all_of``` algorithm.","Fragments":["Your"]},{"Key":"algorithm. Your","Fragments":["predicate"]},{"Key":"Your predicate","Fragments":["must"]},{"Key":"predicate must","Fragments":["check"]},{"Key":"if every","Fragments":["letter"]},{"Key":"every letter","Fragments":["is","of"]},{"Key":"upper case.","Fragments":["You"]},{"Key":"case. You","Fragments":["can"]},{"Key":"with either","Fragments":["a"]},{"Key":"functor or","Fragments":["a"]},{"Key":"lambda (see","Fragments":["below)."]},{"Key":" all_of(query.begin(),","Fragments":["query.end(),"]},{"Key":"all_of(query.begin(), query.end(),","Fragments":["[](char"]},{"Key":"query.end(), [](char","Fragments":["c)"]},{"Key":"return !isalpha(c)","Fragments":["||"]},{"Key":"!isalpha(c) ||","Fragments":["isupper(c);"]},{"Key":"right, if","Fragments":["the"]},{"Key":"problem was","Fragments":["more","written."]},{"Key":"complex it","Fragments":["might"]},{"Key":"be difficult","Fragments":["to","in"]},{"Key":"the ```classify_statement```","Fragments":["function.","more"]},{"Key":"version, I","Fragments":["find"]},{"Key":"```classify_statement``` more","Fragments":["readable"]},{"Key":"the ```response```","Fragments":["one."]},{"Key":"```response``` one.","Fragments":["In"]},{"Key":"one. In","Fragments":["my"]},{"Key":"opinion it","Fragments":["is","would","is"]},{"Key":"complex in","Fragments":["anticipation"]},{"Key":"in anticipation","Fragments":["of"]},{"Key":"anticipation of","Fragments":["some"]},{"Key":"some requirements","Fragments":["that"]},{"Key":"added in","Fragments":["the"]},{"Key":"future. You","Fragments":["will"]},{"Key":"be wrong","Fragments":["in","here;","because","about"]},{"Key":"wrong in","Fragments":["your","the"]},{"Key":"The goal","Fragments":["is"]},{"Key":"avoid making","Fragments":["copies","unecessary","copies","copies","copies"]},{"Key":"making copies","Fragments":["of","of","of","of"]},{"Key":"input. The","Fragments":["```cstr_range```"]},{"Key":"The ```cstr_range```","Fragments":["struct","should"]},{"Key":"```cstr_range``` struct","Fragments":["represent"]},{"Key":"struct represent","Fragments":["a"]},{"Key":"range (i.e.","Fragments":["a"]},{"Key":"(i.e. a","Fragments":["view)"]},{"Key":"a view)","Fragments":["inside"]},{"Key":"view) inside","Fragments":["the"]},{"Key":"string. The","Fragments":["trimming","two"]},{"Key":"The trimming","Fragments":["operation"]},{"Key":"trimming operation","Fragments":["is"]},{"Key":"operation is","Fragments":["just","determined","determined"]},{"Key":"just done","Fragments":["by"]},{"Key":"done by","Fragments":["changing","first","the"]},{"Key":"end iterators,","Fragments":["no"]},{"Key":"iterators, no","Fragments":["copy"]},{"Key":"no copy","Fragments":["or"]},{"Key":"or modification","Fragments":["of"]},{"Key":"is performed.","Fragments":["I"]},{"Key":"performed. I","Fragments":["chose"]},{"Key":"take input","Fragments":["strings"]},{"Key":"input strings","Fragments":["as","have","to"]},{"Key":"as ```const","Fragments":["char","size_t"]},{"Key":"*``` instead","Fragments":["of"]},{"Key":"of ```std::string```","Fragments":["and"]},{"Key":"```std::string``` and","Fragments":["therefore"]},{"Key":"therefore the","Fragments":["range"]},{"Key":"is over","Fragments":["```const"]},{"Key":"over ```const","Fragments":["char"]},{"Key":"*``` and","Fragments":["not"]},{"Key":"not ```std::string```","Fragments":["but"]},{"Key":"```std::string``` but","Fragments":["the"]},{"Key":"principle would","Fragments":["be"]},{"Key":"same (in","Fragments":["fact","which"]},{"Key":"a ```string_range```","Fragments":["struct"]},{"Key":"```string_range``` struct","Fragments":["and"]},{"Key":"struct and","Fragments":["decided"]},{"Key":"right. The","Fragments":["code"]},{"Key":"code should","Fragments":["probably"]},{"Key":"be split","Fragments":["between","up","between"]},{"Key":"split between","Fragments":["multiple","header"]},{"Key":"between multiple","Fragments":["files."]},{"Key":"files. The","Fragments":["```cstr_range```"]},{"Key":"```cstr_range``` should","Fragments":["live"]},{"Key":"should live","Fragments":["in"]},{"Key":"own file","Fragments":["and"]},{"Key":"not distract","Fragments":["the"]},{"Key":"distract the","Fragments":["reader"]},{"Key":"the reader","Fragments":["of","less,","to"]},{"Key":"reader of","Fragments":["the"]},{"Key":" 2.5.","Fragments":["Thanks"]},{"Key":"2.5. Thanks","Fragments":[";)."]},{"Key":" Threw","Fragments":["the"]},{"Key":"Threw the","Fragments":["`is_upper`"]},{"Key":"the `is_upper`","Fragments":["with"]},{"Key":"`is_upper` with","Fragments":["lambda"]},{"Key":"with lambda","Fragments":["in","functions,","```isBlank```"]},{"Key":"in there;","Fragments":["at"]},{"Key":"there; at","Fragments":["first"]},{"Key":"first had","Fragments":["`!isalpha(c)"]},{"Key":"had `!isalpha(c)","Fragments":["||"]},{"Key":"`!isalpha(c) ||","Fragments":["(isalpha(c)"]},{"Key":"|| (isalpha(c)","Fragments":["\u0026\u0026"]},{"Key":"(isalpha(c) \u0026\u0026","Fragments":["isupper(c))`"]},{"Key":"\u0026\u0026 isupper(c))`","Fragments":["then"]},{"Key":"isupper(c))` then","Fragments":["realized"]},{"Key":"then realized","Fragments":["the"]},{"Key":"realized the","Fragments":["2nd"]},{"Key":"the 2nd","Fragments":["`isalpha`","iteration?","step","and","bottle"]},{"Key":"2nd `isalpha`","Fragments":["was"]},{"Key":"`isalpha` was","Fragments":["implied"]},{"Key":"was implied","Fragments":["and"]},{"Key":"implied and","Fragments":["ended"]},{"Key":"and ended","Fragments":["up","here\"."]},{"Key":"you suggested","Fragments":["anyway,","because"]},{"Key":"suggested anyway,","Fragments":["hah."]},{"Key":"Was pondering","Fragments":["eliminating"]},{"Key":"pondering eliminating","Fragments":["the"]},{"Key":"eliminating the","Fragments":["Boost"]},{"Key":"Boost requirement","Fragments":["completely"]},{"Key":"requirement completely","Fragments":["but"]},{"Key":"completely but","Fragments":["felt"]},{"Key":"but felt","Fragments":["writing"]},{"Key":"felt writing","Fragments":["a"]},{"Key":"custom `trim`","Fragments":["function"]},{"Key":"bit silly,","Fragments":["so"]},{"Key":"silly, so","Fragments":["leaving"]},{"Key":"so leaving","Fragments":["that"]},{"Key":"leaving that","Fragments":["as-is."]},{"Key":"that as-is.","Fragments":["Otherwise"]},{"Key":"as-is. Otherwise","Fragments":["I"]},{"Key":"as bob","Fragments":["can"]},{"Key":"bob can","Fragments":["go.","simply"]},{"Key":"can go.","Fragments":["I"]},{"Key":"go. I","Fragments":["suppose"]},{"Key":"the is_/has_","Fragments":["functions"]},{"Key":"is_/has_ functions","Fragments":["with"]},{"Key":"with regexes","Fragments":["but","but"]},{"Key":"regexes but","Fragments":["I","after"]},{"Key":"I imagine","Fragments":["simple","I","for"]},{"Key":"imagine simple","Fragments":["char"]},{"Key":"simple char","Fragments":["iterators"]},{"Key":"char iterators","Fragments":["are"]},{"Key":"sure on","Fragments":["what"]},{"Key":"what i've","Fragments":["done"]},{"Key":"i've done","Fragments":["with"]},{"Key":"with `is_question`,","Fragments":["it"]},{"Key":"`is_question`, it","Fragments":["isn't","seems","is"]},{"Key":"isn't particularly","Fragments":["safe","relevant","useful"]},{"Key":"particularly safe","Fragments":["(doesn't"]},{"Key":"safe (doesn't","Fragments":["check"]},{"Key":"(doesn't check","Fragments":["for"]},{"Key":"null string)","Fragments":["but"]},{"Key":"string) but","Fragments":["it's"]},{"Key":"only called","Fragments":["by"]},{"Key":"by `hey`","Fragments":["(which"]},{"Key":"`hey` (which","Fragments":["does"]},{"Key":"(which does","Fragments":["have"]},{"Key":"that check)","Fragments":["and"]},{"Key":"check) and","Fragments":["it's"]},{"Key":"the interface...","Fragments":["might"]},{"Key":"interface... might","Fragments":["switch"]},{"Key":"might switch","Fragments":["that"]},{"Key":"switch that","Fragments":["back","throws"]},{"Key":"that back","Fragments":["to"]},{"Key":"to `ends_with`","Fragments":["for"]},{"Key":"`ends_with` for","Fragments":["clarity,"]},{"Key":"for clarity,","Fragments":["despite"]},{"Key":"clarity, despite","Fragments":["the"]},{"Key":"despite the","Fragments":["Boost"]},{"Key":" Opinion","Fragments":["on"]},{"Key":"Opinion on","Fragments":["using"]},{"Key":"on using","Fragments":["Boost","them.","some","const"]},{"Key":"using Boost","Fragments":["seems","Format","for","Range,"]},{"Key":"Boost seems","Fragments":["to"]},{"Key":"to vary","Fragments":["from"]},{"Key":"vary from","Fragments":["person"]},{"Key":"from person","Fragments":["to"]},{"Key":"person to","Fragments":["person;"]},{"Key":"to person;","Fragments":["Isn't"]},{"Key":"person; Isn't","Fragments":["one"]},{"Key":"Isn't one","Fragments":["of"]},{"Key":"best practices","Fragments":["supposed","I"]},{"Key":"practices supposed","Fragments":["to"]},{"Key":"be avoiding","Fragments":["premature"]},{"Key":"avoiding premature","Fragments":["optimization?"]},{"Key":"premature optimization?","Fragments":["I"]},{"Key":"optimization? I","Fragments":["wonder"]},{"Key":"string copying","Fragments":["versus","that"]},{"Key":"copying versus","Fragments":["lambda"]},{"Key":"versus lambda","Fragments":["is"]},{"Key":"lambda is","Fragments":["really","nice","a"]},{"Key":"really worth","Fragments":["the"]},{"Key":"the loss","Fragments":["of"]},{"Key":"loss of","Fragments":["clarity.","generality"]},{"Key":"of clarity.","Fragments":["I"]},{"Key":"clarity. I","Fragments":["know"]},{"Key":"know C++","Fragments":["isn't"]},{"Key":"most readable","Fragments":["language","way","implementation","solution","for"]},{"Key":"readable language","Fragments":["but"]},{"Key":"language but","Fragments":["it"]},{"Key":"should be,","Fragments":["and","what"]},{"Key":"be, and","Fragments":["people"]},{"Key":"just love","Fragments":["shoving"]},{"Key":"love shoving","Fragments":["a"]},{"Key":"shoving a","Fragments":["bunch"]},{"Key":"of nested","Fragments":["stuff"]},{"Key":"nested stuff","Fragments":["on"]},{"Key":"stuff on","Fragments":["one"]},{"Key":"line (what","Fragments":["i"]},{"Key":"(what i","Fragments":["call"]},{"Key":"i call","Fragments":["Rubyist"]},{"Key":"call Rubyist","Fragments":["Syndrome),"]},{"Key":"Rubyist Syndrome),","Fragments":["e.g."]},{"Key":"Syndrome), e.g.","Fragments":["the"]},{"Key":"e.g. the","Fragments":["best"]},{"Key":"best answer","Fragments":["here:"]},{"Key":"answer here:","Fragments":["http://stackoverflow.com/questions/216823/whats-the-best-way-to-trim-stdstring","http://stackoverflow.com/questions/24853/what-is-the-difference-between-i-and-i"]},{"Key":"point my","Fragments":["goal"]},{"Key":"my goal","Fragments":["is"]},{"Key":"break exercism's","Fragments":["UI."]},{"Key":" Yeah!","Fragments":["I"]},{"Key":"Yeah! I","Fragments":["totally"]},{"Key":"totally get","Fragments":["why","what"]},{"Key":"get why","Fragments":["you're"]},{"Key":"why you're","Fragments":["using"]},{"Key":"using iterators","Fragments":["here.","instead","instead"]},{"Key":"iterators here.","Fragments":["I"]},{"Key":"still don't","Fragments":["get","pass"]},{"Key":"benefit of","Fragments":["building","passing","choosing","keyword","making"]},{"Key":"building the","Fragments":["`_range`","board"]},{"Key":"the `_range`","Fragments":["struct,"]},{"Key":"`_range` struct,","Fragments":["when"]},{"Key":"struct, when","Fragments":["a"]},{"Key":"a `string`","Fragments":["comes","constructor","will"]},{"Key":"`string` comes","Fragments":["with"]},{"Key":"comes with","Fragments":["iterators"]},{"Key":"with iterators","Fragments":["built","and"]},{"Key":"iterators built","Fragments":["in,"]},{"Key":"built in,","Fragments":["and"]},{"Key":"in, and","Fragments":["users"]},{"Key":"and users","Fragments":["should"]},{"Key":"users should","Fragments":["be"]},{"Key":"pass `char*`","Fragments":["arguments"]},{"Key":"`char*` arguments","Fragments":["to"]},{"Key":"string functions","Fragments":["with","like","that","trying","that","that"]},{"Key":"Implementing @fay","Fragments":["'s"]},{"Key":"@fay 's","Fragments":["suggestion"]},{"Key":"'s suggestion","Fragments":["to"]},{"Key":"suggestion to","Fragments":["collapse","the"]},{"Key":"to collapse","Fragments":["the"]},{"Key":"collapse the","Fragments":["classification/response"]},{"Key":"the classification/response","Fragments":["logic"]},{"Key":"classification/response logic","Fragments":["into"]},{"Key":"logic into","Fragments":["a","one"]},{"Key":"great. Short,","Fragments":["simple,"]},{"Key":"Short, simple,","Fragments":["fairly"]},{"Key":"simple, fairly","Fragments":["readable."]},{"Key":"fairly readable.","Fragments":["Maybe"]},{"Key":"readable. Maybe","Fragments":["clarify"]},{"Key":"Maybe clarify","Fragments":["the"]},{"Key":"the meanings","Fragments":["of"]},{"Key":"meanings of","Fragments":["the"]},{"Key":"the regexes?","Fragments":["They're"]},{"Key":"regexes? They're","Fragments":["obvious"]},{"Key":"They're obvious","Fragments":["to"]},{"Key":"to most","Fragments":["but","folks."]},{"Key":"most but","Fragments":["they"]},{"Key":"they require","Fragments":["a"]},{"Key":"require a","Fragments":["shift","string\u0026","loop."]},{"Key":"shift in","Fragments":["thinking"]},{"Key":"thinking from","Fragments":["\"what"]},{"Key":"from \"what","Fragments":["is"]},{"Key":"\"what is","Fragments":["this","this"]},{"Key":"code doing\"","Fragments":["to"]},{"Key":"doing\" to","Fragments":["\"what"]},{"Key":"to \"what","Fragments":["is"]},{"Key":"this regex","Fragments":["looking"]},{"Key":"regex looking","Fragments":["for\"."]},{"Key":"looking for\".","Fragments":["Either"]},{"Key":"for\". Either","Fragments":["a"]},{"Key":"Either a","Fragments":["comment"]},{"Key":"comment or","Fragments":["a"]},{"Key":"variable name","Fragments":["would","for","```i```,"]},{"Key":" `is_question`","Fragments":["should"]},{"Key":"`is_question` should","Fragments":["probably"]},{"Key":"not concern","Fragments":["itself"]},{"Key":"concern itself","Fragments":["with"]},{"Key":"itself with","Fragments":["whether"]},{"Key":"with whether","Fragments":["the"]},{"Key":"is yelling","Fragments":["or","at"]},{"Key":"yelling or","Fragments":["not.","questions"]},{"Key":"A query","Fragments":["can"]},{"Key":"query can","Fragments":["be"]},{"Key":"be both","Fragments":["a"]},{"Key":"both a","Fragments":["question"]},{"Key":"question AND","Fragments":["yelling,"]},{"Key":"AND yelling,","Fragments":["the"]},{"Key":"yelling, the","Fragments":["tests"]},{"Key":"tests just","Fragments":["explicitly"]},{"Key":"just explicitly","Fragments":["prioritize"]},{"Key":"explicitly prioritize","Fragments":["one"]},{"Key":"prioritize one","Fragments":["over"]},{"Key":"one over","Fragments":["the"]},{"Key":"other. (`forceful_questions`","Fragments":["test)"]},{"Key":" Opinions","Fragments":["on"]},{"Key":"Opinions on","Fragments":["the"]},{"Key":" `*(query.rbegin())","Fragments":["=="]},{"Key":"`*(query.rbegin()) ==","Fragments":["'?'`"]},{"Key":" `query[query.length()-1]","Fragments":["=="]},{"Key":"`query[query.length()-1] ==","Fragments":["'?'`"]},{"Key":" `boost::algorithm::ends_with(query,","Fragments":["'?')`"]},{"Key":" Kind","Fragments":["of"]},{"Key":"Kind of","Fragments":["splitting"]},{"Key":"of splitting","Fragments":["hairs","it","up","up"]},{"Key":"splitting hairs","Fragments":["at"]},{"Key":"hairs at","Fragments":["this"]},{"Key":"version cannot","Fragments":["really"]},{"Key":"cannot really","Fragments":["be"]},{"Key":"And, as","Fragments":["a"]},{"Key":"a last","Fragments":["note,"]},{"Key":"last note,","Fragments":["I"]},{"Key":"note, I","Fragments":["don't"]},{"Key":"think regular","Fragments":["expressions","expressions"]},{"Key":"expressions should","Fragments":["be"]},{"Key":"problem. Using","Fragments":["simple"]},{"Key":"Using simple","Fragments":["standard"]},{"Key":"simple standard","Fragments":["algorithms"]},{"Key":"standard algorithms","Fragments":["provides","only"]},{"Key":"algorithms provides","Fragments":["a"]},{"Key":"good solution","Fragments":["that","if"]},{"Key":"easily understandable","Fragments":["and"]},{"Key":"understandable and","Fragments":["easy"]},{"Key":"reason about.","Fragments":["If"]},{"Key":"about. If","Fragments":["the"]},{"Key":"the requirements","Fragments":["changes","change"]},{"Key":"requirements changes","Fragments":["it"]},{"Key":"changes it","Fragments":["will"]},{"Key":"be easy","Fragments":["to","to"]},{"Key":"change any","Fragments":["of"]},{"Key":"predicate to","Fragments":["reflect","copy_if"]},{"Key":"regex makes","Fragments":["the"]},{"Key":"code less","Fragments":["clear.","readable.","readable,","maintainable."]},{"Key":"less clear.","Fragments":["And","tolower"]},{"Key":"clear. And","Fragments":["you"]},{"Key":"full power","Fragments":["of"]},{"Key":"it. And,","Fragments":["last"]},{"Key":"And, last","Fragments":["but"]},{"Key":"last but","Fragments":["not","not"]},{"Key":"not least,","Fragments":["I","you"]},{"Key":"least, I","Fragments":["did","wasn't"]},{"Key":"not measure","Fragments":["but"]},{"Key":"measure but","Fragments":["I"]},{"Key":"am quite","Fragments":["sure","buried"]},{"Key":"regex version","Fragments":["will","in"]},{"Key":"version will","Fragments":["be"]},{"Key":"Cool, closing","Fragments":["this"]},{"Key":"one down","Fragments":["then."]},{"Key":"down then.","Fragments":["Thanks"]},{"Key":"then. Thanks","Fragments":["for"]},{"Key":"as expressive","Fragments":["as"]},{"Key":"expressive as","Fragments":["I"]},{"Key":"put some","Fragments":["more"]},{"Key":"more into","Fragments":["it"]},{"Key":"into it","Fragments":["so","in"]},{"Key":"it becomes","Fragments":["shorter","trivial"]},{"Key":"becomes shorter","Fragments":["and"]},{"Key":"Any suggestions","Fragments":["are","on"]},{"Key":"Well, the","Fragments":["fact","difference"]},{"Key":"fact is","Fragments":["that"]},{"Key":"```std::string``` owns","Fragments":["its"]},{"Key":"owns its","Fragments":["character"]},{"Key":"its character","Fragments":["sequence."]},{"Key":"character sequence.","Fragments":["It"]},{"Key":"sequence. It","Fragments":["is"]},{"Key":"a container.","Fragments":["What"]},{"Key":"container. What","Fragments":["I"]},{"Key":"provide was","Fragments":["a"]},{"Key":"a non-owning","Fragments":["view"]},{"Key":"non-owning view","Fragments":["of"]},{"Key":"input. There","Fragments":["is"]},{"Key":"a proposal","Fragments":["for"]},{"Key":"proposal for","Fragments":["this"]},{"Key":"object but","Fragments":["it"]},{"Key":"can represent","Fragments":["only"]},{"Key":"represent only","Fragments":["one"]},{"Key":"one part","Fragments":["of"]},{"Key":"To explain","Fragments":["a"]},{"Key":"explain a","Fragments":["little"]},{"Key":"in details,","Fragments":["when"]},{"Key":"details, when","Fragments":["I"]},{"Key":"I trim","Fragments":["the"]},{"Key":"the ```cstr_range```,","Fragments":["I"]},{"Key":"```cstr_range```, I","Fragments":["don't"]},{"Key":"new object,","Fragments":["I"]},{"Key":"object, I","Fragments":["don't"]},{"Key":"modify a","Fragments":["string,","string"]},{"Key":"string, I","Fragments":["just","get","search"]},{"Key":"just say:","Fragments":["\"hey,"]},{"Key":"say: \"hey,","Fragments":["act"]},{"Key":"\"hey, act","Fragments":["as"]},{"Key":"act as","Fragments":["if","if"]},{"Key":"are observing","Fragments":["right"]},{"Key":"observing right","Fragments":["now"]},{"Key":"right now","Fragments":["started","you","they","there's","inside","otherwise"]},{"Key":"now started","Fragments":["here"]},{"Key":"started here","Fragments":["and"]},{"Key":"ended here\".","Fragments":["The"]},{"Key":"here\". The","Fragments":["std::string"]},{"Key":"The std::string","Fragments":["objects"]},{"Key":"std::string objects","Fragments":["does"]},{"Key":"objects does","Fragments":["not"]},{"Key":"not provide","Fragments":["this"]},{"Key":"provide this","Fragments":["kind"]},{"Key":"of functionality","Fragments":["because"]},{"Key":"functionality because","Fragments":["they"]},{"Key":"they own","Fragments":["the"]},{"Key":"own the","Fragments":["data"]},{"Key":"data and","Fragments":["therefore,","trying"]},{"Key":"and therefore,","Fragments":["their"]},{"Key":"therefore, their","Fragments":["iterators"]},{"Key":"their iterators","Fragments":["must"]},{"Key":"iterators must","Fragments":["reflected"]},{"Key":"must reflected","Fragments":["the"]},{"Key":"reflected the","Fragments":["whole"]},{"Key":" Yup.","Fragments":["Totally"]},{"Key":"Yup. Totally","Fragments":["get"]},{"Key":"Totally get","Fragments":["what"]},{"Key":"you're trying","Fragments":["to","to","to","to","to"]},{"Key":"do now.","Fragments":["Feels"]},{"Key":"now. Feels","Fragments":["a"]},{"Key":"Feels a","Fragments":["bit"]},{"Key":"a premature","Fragments":["optimization,","optimization."]},{"Key":"premature optimization,","Fragments":["but"]},{"Key":"optimization, but","Fragments":["it"]},{"Key":"if minimizing","Fragments":["copying"]},{"Key":"minimizing copying","Fragments":["is"]},{"Key":"copying is","Fragments":["a"]},{"Key":"a goal/requirement.","Fragments":["Thanks"]},{"Key":"goal/requirement. Thanks","Fragments":["for"]},{"Key":"with if/else","Fragments":["statements"]},{"Key":"if/else statements","Fragments":["over"]},{"Key":"statements over","Fragments":["a"]},{"Key":"case statement","Fragments":["due"]},{"Key":"statement due","Fragments":["to"]},{"Key":"the statements","Fragments":["needing"]},{"Key":"statements needing","Fragments":["specific"]},{"Key":"needing specific","Fragments":["code"]},{"Key":"specific code","Fragments":["to"]},{"Key":"handle some","Fragments":["of"]},{"Key":"It's baaaaack...","Fragments":["after"]},{"Key":"baaaaack... after","Fragments":["checking"]},{"Key":"after checking","Fragments":["out"]},{"Key":"checking out","Fragments":["@fannie's","the"]},{"Key":"out @fannie's","Fragments":["implementation"]},{"Key":"@fannie's implementation","Fragments":["I"]},{"Key":"really liked","Fragments":["the","the"]},{"Key":"a view","Fragments":["of"]},{"Key":"string versus","Fragments":["trimming,"]},{"Key":"versus trimming,","Fragments":["but"]},{"Key":"trimming, but","Fragments":["didn't"]},{"Key":"passing references","Fragments":["all","is"]},{"Key":"references all","Fragments":["over"]},{"Key":"the place,","Fragments":["so"]},{"Key":"place, so","Fragments":["I"]},{"Key":"I stuffed","Fragments":["all"]},{"Key":"stuffed all","Fragments":["the"]},{"Key":"manipulation stuff","Fragments":["into"]},{"Key":"stuff into","Fragments":["a"]},{"Key":"a similar","Fragments":["struct.","interface","mapping."]},{"Key":"similar struct.","Fragments":["Kept"]},{"Key":"struct. Kept","Fragments":["the"]},{"Key":"Kept the","Fragments":["string"]},{"Key":"string type,","Fragments":["but","you"]},{"Key":"but everything's","Fragments":["a"]},{"Key":"everything's a","Fragments":["reference."]},{"Key":"reference. I","Fragments":["love","was","could","implemented"]},{"Key":"love that","Fragments":["none"]},{"Key":"that none","Fragments":["of"]},{"Key":"the StringView","Fragments":["methods","as","as"]},{"Key":"StringView methods","Fragments":["take"]},{"Key":"methods take","Fragments":["any"]},{"Key":"take any","Fragments":["parameters."]},{"Key":"careful, your","Fragments":["```trim_left()```"]},{"Key":"your ```trim_left()```","Fragments":["and"]},{"Key":"```trim_left()``` and","Fragments":["```trim_right()```"]},{"Key":"and ```trim_right()```","Fragments":["methods"]},{"Key":"```trim_right()``` methods","Fragments":["can"]},{"Key":"methods can","Fragments":["go","use"]},{"Key":"go outside","Fragments":["of"]},{"Key":"the referenced","Fragments":["string.","object"]},{"Key":"referenced string.","Fragments":["You"]},{"Key":"string. You","Fragments":["should"]},{"Key":"your end","Fragments":["iterator"]},{"Key":"iterator should","Fragments":["point"]},{"Key":"point 1","Fragments":["after"]},{"Key":"1 after","Fragments":["the","you've"]},{"Key":"character to","Fragments":["respect","word.","an","be"]},{"Key":"to respect","Fragments":["the"]},{"Key":"respect the","Fragments":["C++"]},{"Key":"C++ iterator","Fragments":["philosophy."]},{"Key":"use ```StringView```","Fragments":["only"]},{"Key":"```StringView``` only","Fragments":["in"]},{"Key":"implementation file","Fragments":["the","(.cpp,"]},{"Key":"file the","Fragments":["declaration"]},{"Key":"declaration should","Fragments":["also","be"]},{"Key":"cpp (or","Fragments":["in"]},{"Key":"(or in","Fragments":["its"]},{"Key":"own .h","Fragments":["and"]},{"Key":".cpp files).","Fragments":["You"]},{"Key":"files). You","Fragments":["also"]},{"Key":"the referenced_string","Fragments":["member"]},{"Key":"referenced_string member","Fragments":["as"]},{"Key":"member as","Fragments":["you"]},{"Key":"constructor. All","Fragments":["your"]},{"Key":"All your","Fragments":["methods"]},{"Key":"methods returning","Fragments":["a"]},{"Key":"a ```bool```","Fragments":["should"]},{"Key":"```bool``` should","Fragments":["also"]},{"Key":"test methods","Fragments":["(```is_shouty```...)"]},{"Key":"methods (```is_shouty```...)","Fragments":["implemented"]},{"Key":"(```is_shouty```...) implemented","Fragments":["as"]},{"Key":"as free","Fragments":["functions"]},{"Key":"functions instead","Fragments":["of","of","of","of"]},{"Key":"way, it","Fragments":["will"]},{"Key":"reuse StringView.","Fragments":["And"]},{"Key":"StringView. And","Fragments":["the"]},{"Key":"another input","Fragments":["type"]},{"Key":"input type","Fragments":["if"]},{"Key":"if needed.","Fragments":["The"]},{"Key":"needed. The","Fragments":["trim"]},{"Key":"The trim","Fragments":["methods","functions"]},{"Key":"trim methods","Fragments":["however"]},{"Key":"methods however","Fragments":["can"]},{"Key":"however can","Fragments":["stay"]},{"Key":"can stay","Fragments":["in"]},{"Key":"stay in","Fragments":["the"]},{"Key":"StringView as","Fragments":["they","a"]},{"Key":"they modify","Fragments":["it."]},{"Key":"know trim_left","Fragments":["stops"]},{"Key":"trim_left stops","Fragments":["at"]},{"Key":"stops at","Fragments":["the"]},{"Key":"the terminating","Fragments":["null,"]},{"Key":"terminating null,","Fragments":["but"]},{"Key":"null, but","Fragments":["I'm"]},{"Key":"happens with","Fragments":["`trim_right`"]},{"Key":"with `trim_right`","Fragments":["except"]},{"Key":"`trim_right` except","Fragments":["that"]},{"Key":"reason haha,","Fragments":["that's"]},{"Key":"haha, that's","Fragments":["probably"]},{"Key":"that's probably","Fragments":["a","premature/not"]},{"Key":"I exposed","Fragments":["the"]},{"Key":"the `StringView`","Fragments":["implementation"]},{"Key":"`StringView` implementation","Fragments":["because"]},{"Key":"implementation because","Fragments":["I"]},{"Key":"a useful,","Fragments":["so"]},{"Key":"useful, so","Fragments":["I"]},{"Key":"think splitting","Fragments":["it","tokenization"]},{"Key":"into its","Fragments":["own"]},{"Key":"own h/cpp","Fragments":["would"]},{"Key":"h/cpp would","Fragments":["be"]},{"Key":"suppose an","Fragments":["external"]},{"Key":"an external","Fragments":["is_shouty"]},{"Key":"external is_shouty","Fragments":["is"]},{"Key":"is_shouty is","Fragments":["virtually"]},{"Key":"is virtually","Fragments":["the"]},{"Key":"virtually the","Fragments":["same"]},{"Key":"bool is_shouty(StringView","Fragments":["\u0026view)"]},{"Key":"is_shouty(StringView \u0026view)","Fragments":["{"]},{"Key":"return !view.is_empty()","Fragments":["\u0026\u0026"]},{"Key":"!view.is_empty() \u0026\u0026","Fragments":["view.has_letter()"]},{"Key":"\u0026\u0026 view.has_letter()","Fragments":["\u0026\u0026"]},{"Key":"view.has_letter() \u0026\u0026","Fragments":["view.is_upper();"]},{"Key":"hand, while","Fragments":["it's"]},{"Key":"while it's","Fragments":["a","not"]},{"Key":"a kind","Fragments":["of"]},{"Key":"of silly","Fragments":["name"]},{"Key":"silly name","Fragments":["for"]},{"Key":"function, it's","Fragments":["still","nice"]},{"Key":"the `StringView`;","Fragments":["Maybe"]},{"Key":"`StringView`; Maybe","Fragments":["a"]},{"Key":"Maybe a","Fragments":["`BobStringView`"]},{"Key":"a `BobStringView`","Fragments":["local"]},{"Key":"`BobStringView` local","Fragments":["struct"]},{"Key":"local struct","Fragments":["that","that"]},{"Key":"struct that","Fragments":["only","expands"]},{"Key":"only implements","Fragments":["the"]},{"Key":"more bob-specific","Fragments":["methods?"]},{"Key":" Update:","Fragments":["I"]},{"Key":"Update: I","Fragments":["moved"]},{"Key":"moved ```getChunk```","Fragments":["and"]},{"Key":"```getChunk``` and","Fragments":["```spellOut```"]},{"Key":"and ```spellOut```","Fragments":["function"]},{"Key":"```spellOut``` function","Fragments":["declarations"]},{"Key":"function declarations","Fragments":["to","any"]},{"Key":"declarations to","Fragments":["cpp","the"]},{"Key":"to cpp","Fragments":["(no","file,"]},{"Key":"cpp (no","Fragments":["iteration)."]},{"Key":" Nice.","Fragments":["I","Sum"]},{"Key":"Nice. I","Fragments":["like"]},{"Key":"flow of","Fragments":["data","the"]},{"Key":"data through","Fragments":["the"]},{"Key":"your `count_words`","Fragments":["is"]},{"Key":"`count_words` is","Fragments":["very"]},{"Key":"very generic,","Fragments":["and"]},{"Key":"generic, and","Fragments":["could"]},{"Key":"and could","Fragments":["probably","be","use","have"]},{"Key":"of collection","Fragments":["containing"]},{"Key":"collection containing","Fragments":["any"]},{"Key":"containing any","Fragments":["kind"]},{"Key":"of type.","Fragments":["Overkill,"]},{"Key":"type. Overkill,","Fragments":["probably,"]},{"Key":"Overkill, probably,","Fragments":["but"]},{"Key":"probably, but","Fragments":["it","since"]},{"Key":"nice little","Fragments":["utility"]},{"Key":"little utility","Fragments":["function"]},{"Key":"utility function","Fragments":["or"]},{"Key":"function or","Fragments":["class.","iterators."]},{"Key":" `get_significant_words`","Fragments":["is"]},{"Key":"`get_significant_words` is","Fragments":["pretty"]},{"Key":"pretty complicated,","Fragments":["and"]},{"Key":"complicated, and","Fragments":["some"]},{"Key":"help since","Fragments":["there's"]},{"Key":"of branching","Fragments":["and"]},{"Key":"branching and","Fragments":["going"]},{"Key":"and going","Fragments":["back"]},{"Key":"going back","Fragments":["and","to"]},{"Key":"help is","Fragments":["to","if"]},{"Key":"the low-level","Fragments":["`while`/`subject_cursor`"]},{"Key":"low-level `while`/`subject_cursor`","Fragments":["looping,"]},{"Key":"`while`/`subject_cursor` looping,","Fragments":["and"]},{"Key":"looping, and","Fragments":["just"]},{"Key":"(auto current_char","Fragments":[":"]},{"Key":"current_char :","Fragments":["subject)"]},{"Key":": subject)","Fragments":["{"]},{"Key":"subject) {","Fragments":["..."]},{"Key":"... }`.","Fragments":["I"]},{"Key":"}`. I","Fragments":["think"]},{"Key":"work exactly","Fragments":["the"]},{"Key":"same (since","Fragments":["you're"]},{"Key":"(since you're","Fragments":["just"]},{"Key":"just doing","Fragments":["a"]},{"Key":"single straight","Fragments":["traversal"]},{"Key":"straight traversal","Fragments":["of"]},{"Key":" `pending_apostrophe`","Fragments":["is"]},{"Key":"`pending_apostrophe` is","Fragments":["fine,"]},{"Key":"little vague.","Fragments":["Maybe"]},{"Key":"vague. Maybe","Fragments":["something"]},{"Key":"Maybe something","Fragments":["like","has"]},{"Key":"like `prev_char_was_apostrophe`","Fragments":["would"]},{"Key":"`prev_char_was_apostrophe` would","Fragments":["be"]},{"Key":"One last","Fragments":["nit:","thing,","thing,","point:"]},{"Key":"last nit:","Fragments":["I"]},{"Key":"nit: I","Fragments":["tend"]},{"Key":"prefer `!work.empty()`","Fragments":["to"]},{"Key":"`!work.empty()` to","Fragments":["`work.length()"]},{"Key":"to `work.length()","Fragments":["\u003e"]},{"Key":"`work.length() \u003e","Fragments":["0`."]},{"Key":" `sort_equal`","Fragments":["is"]},{"Key":"`sort_equal` is","Fragments":["a"]},{"Key":"little misleading,","Fragments":["since"]},{"Key":"misleading, since","Fragments":["it's"]},{"Key":"it's doing","Fragments":["more"]},{"Key":"doing more","Fragments":["than"]},{"Key":"just comparing","Fragments":["after"]},{"Key":"comparing after","Fragments":["sorting."]},{"Key":"Nice improvements.","Fragments":["I"]},{"Key":"improvements. I","Fragments":["prefer","especially"]},{"Key":"the ```StringView```","Fragments":["being","class."]},{"Key":"```StringView``` being","Fragments":["in"]},{"Key":"own file.","Fragments":["The"]},{"Key":"file. The","Fragments":["trim"]},{"Key":"trim functions","Fragments":["are"]},{"Key":"now safe","Fragments":["with"]},{"Key":"safe with","Fragments":["the"]},{"Key":"the checks.","Fragments":["What"]},{"Key":"checks. What","Fragments":["happened"]},{"Key":"What happened","Fragments":["before"]},{"Key":"happened before","Fragments":["was"]},{"Key":"before was","Fragments":["that"]},{"Key":"the ```trim_right```","Fragments":["read"]},{"Key":"```trim_right``` read","Fragments":["the"]},{"Key":"memory preceding","Fragments":["the"]},{"Key":"preceding the","Fragments":["string"]},{"Key":"string buffer","Fragments":["until"]},{"Key":"buffer until","Fragments":["it"]},{"Key":"until it","Fragments":["found","worked."]},{"Key":"a character","Fragments":["that","is","that","matching","by"]},{"Key":"space (probably","Fragments":["the"]},{"Key":"(probably the","Fragments":["first","former)."]},{"Key":"first byte","Fragments":["before"]},{"Key":"byte before","Fragments":["the"]},{"Key":"the buffer).","Fragments":["It's"]},{"Key":"buffer). It's","Fragments":["never"]},{"Key":"It's never","Fragments":["a","going"]},{"Key":"never a","Fragments":["good"]},{"Key":"read outside","Fragments":["of"]},{"Key":"not keep","Fragments":["a"]},{"Key":"reference over","Fragments":["the"]},{"Key":"string inside","Fragments":["the","the"]},{"Key":"the ```StringView```.","Fragments":["It"]},{"Key":"```StringView```. It","Fragments":["is"]},{"Key":"also disagree","Fragments":["with","with"]},{"Key":"check functions","Fragments":["beeing","aren't"]},{"Key":"functions beeing","Fragments":["part"]},{"Key":"beeing part","Fragments":["of"]},{"Key":"a ```StringView```.","Fragments":["These"]},{"Key":"```StringView```. These","Fragments":["functions"]},{"Key":"These functions","Fragments":["are","are"]},{"Key":"just algorithms","Fragments":["characterizing"]},{"Key":"algorithms characterizing","Fragments":["the"]},{"Key":"characterizing the","Fragments":["content"]},{"Key":"of char.","Fragments":["You"]},{"Key":"char. You","Fragments":["could"]},{"Key":"easily use","Fragments":["them"]},{"Key":"a ```std::sting```","Fragments":["or"]},{"Key":"```std::sting``` or","Fragments":["a"]},{"Key":"a ```cont","Fragments":["char"]},{"Key":"```cont char","Fragments":["*```"]},{"Key":"*``` if","Fragments":["they"]},{"Key":"have replaced","Fragments":["for"]},{"Key":"replaced for","Fragments":["loops"]},{"Key":"1. Apart","Fragments":["from"]},{"Key":"from isQuestion(),","Fragments":["you"]},{"Key":"isQuestion(), you","Fragments":["can"]},{"Key":"can consider","Fragments":["using"]},{"Key":"using Standard","Fragments":["libraries"]},{"Key":"Standard libraries","Fragments":["for"]},{"Key":"libraries for","Fragments":["all"]},{"Key":"other class","Fragments":["methods."]},{"Key":"2. Use","Fragments":["++var","++i"]},{"Key":"Use ++var","Fragments":["instead"]},{"Key":"++var instead","Fragments":["of"]},{"Key":"of var++","Fragments":["wherever"]},{"Key":"var++ wherever","Fragments":["possible,"]},{"Key":"wherever possible,","Fragments":["the","they"]},{"Key":"possible, the","Fragments":["former"]},{"Key":"former runs","Fragments":["faster"]},{"Key":"3. \"upper_case_percentage\"","Fragments":["logic"]},{"Key":"\"upper_case_percentage\" logic","Fragments":["might"]},{"Key":"logic might","Fragments":["not"]},{"Key":"for input","Fragments":["\"NO!!!!!!!!!!!!\""]},{"Key":"1. Good","Fragments":["to","that","use"]},{"Key":"Good to","Fragments":["see"]},{"Key":"see STL","Fragments":["libraries"]},{"Key":"libraries being","Fragments":["used"]},{"Key":"2. Consider","Fragments":["taking","not","moving","putting"]},{"Key":"Consider taking","Fragments":["in","in","in","in"]},{"Key":"taking in","Fragments":["const","const","const","const","const","a","a"]},{"Key":"in const","Fragments":["string","string\u0026,","string\u0026","string\u0026","string\u0026"]},{"Key":"string \u0026.","Fragments":["It"]},{"Key":"\u0026. It","Fragments":["will"]},{"Key":"will avoid","Fragments":["copy","modification","copy.","creating","making","that"]},{"Key":"avoid copy","Fragments":["everytime","+"]},{"Key":"copy everytime","Fragments":["hey()"]},{"Key":"everytime hey()","Fragments":["is"]},{"Key":"hey() is","Fragments":["invoked","exposed","trimmed"]},{"Key":"3. Consider","Fragments":["not","using","avoiding","renaming","using"]},{"Key":"Consider not","Fragments":["modifying","modifying"]},{"Key":"modifying input","Fragments":["string."]},{"Key":"string. Yes,","Fragments":["your"]},{"Key":"Yes, your","Fragments":["check","post"]},{"Key":"your check","Fragments":["for","of"]},{"Key":"for '?'","Fragments":["might"]},{"Key":"'?' might","Fragments":["become"]},{"Key":"more involved","Fragments":["but"]},{"Key":"involved but","Fragments":["it"]},{"Key":"avoid modification","Fragments":["for"]},{"Key":"modification for","Fragments":["every"]},{"Key":"every type","Fragments":["of"]},{"Key":"Good that","Fragments":["you've"]},{"Key":"you've checked","Fragments":["for"]},{"Key":"for empty()","Fragments":["first"]},{"Key":"2. As","Fragments":["written"]},{"Key":"As written","Fragments":["by"]},{"Key":"written by","Fragments":["\"slepasteur\",","myself"]},{"Key":"by \"slepasteur\",","Fragments":["try"]},{"Key":"\"slepasteur\", try","Fragments":["to"]},{"Key":"tests passing","Fragments":["\u0026","and"]},{"Key":"passing \u0026","Fragments":["you"]},{"Key":"\u0026 you","Fragments":["will"]},{"Key":"will encounter","Fragments":["other"]},{"Key":"encounter other","Fragments":["issues"]},{"Key":"other issues","Fragments":["with","as"]},{"Key":"issues with","Fragments":["the","this"]},{"Key":"1. Implementation","Fragments":["looks"]},{"Key":"Implementation looks","Fragments":["good","good"]},{"Key":"string. It","Fragments":["can","had","seems","could"]},{"Key":"help address","Fragments":["future"]},{"Key":"address future","Fragments":["test"]},{"Key":"future test","Fragments":["patterns."]},{"Key":"using \u003ccctype\u003e.","Fragments":["It"]},{"Key":"\u003ccctype\u003e. It","Fragments":["is"]},{"Key":"is C++","Fragments":["header"]},{"Key":"C++ header","Fragments":["rather"]},{"Key":"header rather","Fragments":["than"]},{"Key":"than \"ctype.h\"","Fragments":["which"]},{"Key":"\"ctype.h\" which","Fragments":["is"]},{"Key":"4. Similar","Fragments":["comments"]},{"Key":"Similar comments","Fragments":["as"]},{"Key":"comments as","Fragments":["\"carjiv\""]},{"Key":"1. Consider","Fragments":["taking","taking","taking"]},{"Key":"string\u0026, will","Fragments":["avoid"]},{"Key":"2. Implementation","Fragments":["looks"]},{"Key":"1. Cosider","Fragments":["taking"]},{"Key":"Cosider taking","Fragments":["in"]},{"Key":"copy +","Fragments":["compare"]},{"Key":"+ compare","Fragments":["\u0026"]},{"Key":"compare \u0026","Fragments":["do"]},{"Key":"\u0026 do","Fragments":["just"]},{"Key":"do just","Fragments":["compare"]},{"Key":"just compare","Fragments":["on"]},{"Key":"compare on","Fragments":["every"]},{"Key":"every char","Fragments":["\u0026"]},{"Key":"char \u0026","Fragments":["still"]},{"Key":"\u0026 still","Fragments":["avoid"]},{"Key":"still avoid","Fragments":["raw"]},{"Key":"avoid raw","Fragments":["for"]},{"Key":"Consider avoiding","Fragments":["trim"]},{"Key":"avoiding trim","Fragments":["+"]},{"Key":"trim +","Fragments":["copy."]},{"Key":"4. The","Fragments":["implementation","compiler"]},{"Key":"implementation looks","Fragments":["clean","much"]},{"Key":"looks clean","Fragments":["\u0026"]},{"Key":"clean \u0026","Fragments":["concise"]},{"Key":"storing a","Fragments":["string"]},{"Key":"string database","Fragments":["in"]},{"Key":"database in","Fragments":["switch"]},{"Key":"in switch","Fragments":["statements."]},{"Key":"function ```in_english```","Fragments":["you"]},{"Key":"```in_english``` you","Fragments":["use"]},{"Key":"use long","Fragments":["numeric","instead"]},{"Key":"long numeric","Fragments":["values"]},{"Key":"numeric values","Fragments":["which","and"]},{"Key":"values which","Fragments":["are"]},{"Key":"and check.","Fragments":["You"]},{"Key":"check. You","Fragments":["should"]},{"Key":"should define","Fragments":["them","if"]},{"Key":"variables somewhere","Fragments":["and"]},{"Key":"somewhere and","Fragments":["use"]},{"Key":"use these","Fragments":["variables","more.","lessons"]},{"Key":"these variables","Fragments":["instead.","have"]},{"Key":"variables instead.","Fragments":["This"]},{"Key":"instead. This","Fragments":["way"]},{"Key":"if (n","Fragments":["\u003e=","/1000000","\u003e=","/million"]},{"Key":"(n \u003e=","Fragments":["1000000)","million)"]},{"Key":"\u003e= 1000000)","Fragments":["{"]},{"Key":" n","Fragments":["%=","%="]},{"Key":"n %=","Fragments":["1000000000;","billion;"]},{"Key":"(n /1000000","Fragments":["!="]},{"Key":"/1000000 !=","Fragments":["0)"]},{"Key":" ret","Fragments":["\u003c\u003c","\u003c\u003c"]},{"Key":"ret \u003c\u003c","Fragments":["say_thousand(n","say_thousand(n"]},{"Key":"\u003c\u003c say_thousand(n","Fragments":["/","/"]},{"Key":"say_thousand(n /","Fragments":["1000000)","million)"]},{"Key":"/ 1000000)","Fragments":["\u003c\u003c"]},{"Key":"1000000) \u003c\u003c","Fragments":["\"million"]},{"Key":"\u003c\u003c \"million","Fragments":["\";","\";"]},{"Key":"\u003e= million)","Fragments":["{"]},{"Key":"(n /million","Fragments":["!="]},{"Key":"/million !=","Fragments":["0)"]},{"Key":"/ million)","Fragments":["\u003c\u003c"]},{"Key":"million) \u003c\u003c","Fragments":["\"million"]},{"Key":" Keeping","Fragments":["the"]},{"Key":"Keeping the","Fragments":["reference"]},{"Key":"reference around","Fragments":["has"]},{"Key":"around has","Fragments":["potential"]},{"Key":"has potential","Fragments":["uses"]},{"Key":"potential uses","Fragments":["if"]},{"Key":"uses if","Fragments":["I"]},{"Key":"I were","Fragments":["to","exposing","writing","to","writing"]},{"Key":"to expand","Fragments":["on"]},{"Key":"expand on","Fragments":["the"]},{"Key":"utility struct,","Fragments":["for"]},{"Key":"struct, for","Fragments":["example"]},{"Key":"example `reset`,","Fragments":["`reset_(left|right)`"]},{"Key":"`reset`, `reset_(left|right)`","Fragments":["for"]},{"Key":"`reset_(left|right)` for","Fragments":["resetting"]},{"Key":"for resetting","Fragments":["the"]},{"Key":"resetting the","Fragments":["trim"]},{"Key":"the trim","Fragments":["operations.","will"]},{"Key":"trim operations.","Fragments":["Worth"]},{"Key":"operations. Worth","Fragments":["keeping"]},{"Key":"Worth keeping","Fragments":["around,"]},{"Key":"keeping around,","Fragments":["IMO."]},{"Key":"around, IMO.","Fragments":["So,"]},{"Key":"IMO. So,","Fragments":["situational."]},{"Key":"think since","Fragments":["the"]},{"Key":"functions aren't","Fragments":["part","meant"]},{"Key":"aren't part","Fragments":["of"]},{"Key":"interface and","Fragments":["are"]},{"Key":"are implemented","Fragments":["only","using"]},{"Key":"implemented only","Fragments":["in"]},{"Key":"that expands","Fragments":["on"]},{"Key":"expands on","Fragments":["StringView's"]},{"Key":"on StringView's","Fragments":["capabilities,"]},{"Key":"StringView's capabilities,","Fragments":["it's"]},{"Key":"capabilities, it's","Fragments":["perfectly"]},{"Key":"perfectly valid.","Fragments":["If"]},{"Key":"valid. If","Fragments":["I"]},{"Key":"were exposing","Fragments":["`is_shouty`"]},{"Key":"exposing `is_shouty`","Fragments":["et.al."]},{"Key":"`is_shouty` et.al.","Fragments":["to"]},{"Key":"et.al. to","Fragments":["the"]},{"Key":"the world,","Fragments":["it","but"]},{"Key":"world, it","Fragments":["would"]},{"Key":"appropriate to","Fragments":["make"]},{"Key":"them less","Fragments":["dependent"]},{"Key":"less dependent","Fragments":["upon"]},{"Key":"dependent upon","Fragments":["a"]},{"Key":"upon a","Fragments":["struct."]},{"Key":"struct. So,","Fragments":["I"]},{"Key":"agree, but","Fragments":["again"]},{"Key":"but again","Fragments":["it's","the"]},{"Key":"again it's","Fragments":["situational."]},{"Key":"Have learned","Fragments":["a"]},{"Key":"simple exercise,","Fragments":["thanks"]},{"Key":"exercise, thanks","Fragments":["for"]},{"Key":" Incorportating","Fragments":["good"]},{"Key":"Incorportating good","Fragments":["suggestions"]},{"Key":"good suggestions","Fragments":["by"]},{"Key":"suggestions by","Fragments":["@mikel"]},{"Key":"by @mikel","Fragments":["and"]},{"Key":"@mikel and","Fragments":["@mikel."]},{"Key":"Well you","Fragments":["pay"]},{"Key":"you pay","Fragments":["a"]},{"Key":"pay a","Fragments":["prize"]},{"Key":"a prize","Fragments":["for"]},{"Key":"prize for","Fragments":["keeping"]},{"Key":"keeping that","Fragments":["reference."]},{"Key":"that reference.","Fragments":["Each"]},{"Key":"reference. Each","Fragments":["StringView"]},{"Key":"Each StringView","Fragments":["object"]},{"Key":"StringView object","Fragments":["will"]},{"Key":"object will","Fragments":["include"]},{"Key":"will include","Fragments":["the"]},{"Key":"reference. It","Fragments":["is"]},{"Key":"much indeed","Fragments":["but"]},{"Key":"indeed but","Fragments":["still"]},{"Key":"still it","Fragments":["is"]},{"Key":"is premature","Fragments":["pessimization"]},{"Key":"premature pessimization","Fragments":["in"]},{"Key":"pessimization in","Fragments":["my"]},{"Key":"check functions,","Fragments":["it"]},{"Key":"functions, it","Fragments":["would","is"]},{"Key":"make changes","Fragments":["from"]},{"Key":"changes from","Fragments":["StringView","a"]},{"Key":"from StringView","Fragments":["to"]},{"Key":"StringView to","Fragments":["std::string"]},{"Key":"to std::string","Fragments":["for","versions"]},{"Key":"Anyway, it","Fragments":["is"]},{"Key":"of preference","Fragments":["at"]},{"Key":"preference at","Fragments":["this"]},{"Key":"point ;).","Fragments":["I"]},{"Key":";). I","Fragments":["am"]},{"Key":"am glad","Fragments":["if"]},{"Key":"glad if","Fragments":["I"]},{"Key":"have helped","Fragments":["you."]},{"Key":"Given the","Fragments":["number"]},{"Key":"of iterations","Fragments":["I'm"]},{"Key":"iterations I'm","Fragments":["sure"]},{"Key":"sure you've","Fragments":["already"]},{"Key":"already considered","Fragments":["this,"]},{"Key":"considered this,","Fragments":["but"]},{"Key":"curious why","Fragments":["you","you"]},{"Key":"you take","Fragments":["query","a","a","the","`hey()`"]},{"Key":"take query","Fragments":["as"]},{"Key":"query as","Fragments":["a","simply"]},{"Key":"then immediately","Fragments":["copy"]},{"Key":"immediately copy","Fragments":["it."]},{"Key":"copy it.","Fragments":["Wouldn't"]},{"Key":"it. Wouldn't","Fragments":["it"]},{"Key":"as nice","Fragments":["to"]},{"Key":"declare query","Fragments":["as"]},{"Key":"as simply","Fragments":["string"]},{"Key":"simply string","Fragments":["(thereby"]},{"Key":"string (thereby","Fragments":["getting"]},{"Key":"(thereby getting","Fragments":["your"]},{"Key":"getting your","Fragments":["own","next"]},{"Key":"own private","Fragments":["copy)"]},{"Key":"private copy)","Fragments":["and"]},{"Key":"copy) and","Fragments":["then"]},{"Key":"call trim","Fragments":["(rather"]},{"Key":"trim (rather","Fragments":["than"]},{"Key":"than trim_copy)","Fragments":["on"]},{"Key":"trim_copy) on","Fragments":["it..."]},{"Key":"on it...","Fragments":["and"]},{"Key":"it... and","Fragments":["just"]},{"Key":"just never","Fragments":["deal"]},{"Key":"never deal","Fragments":["with"]},{"Key":"with working_copy","Fragments":["at"]},{"Key":"working_copy at","Fragments":["all?"]},{"Key":"final solution","Fragments":["makes"]},{"Key":"solution makes","Fragments":["no"]},{"Key":"no copies","Fragments":["at"]},{"Key":"copies at","Fragments":["all"]},{"Key":"all and","Fragments":["works"]},{"Key":"and works","Fragments":["entirely"]},{"Key":"works entirely","Fragments":["via"]},{"Key":"entirely via","Fragments":["a"]},{"Key":"of iterators.","Fragments":["I"]},{"Key":"iterators. I","Fragments":["don't"]},{"Key":"huge advantage","Fragments":["to"]},{"Key":"to either,","Fragments":["honestly,"]},{"Key":"either, honestly,","Fragments":["unless"]},{"Key":"honestly, unless","Fragments":["we're"]},{"Key":"unless we're","Fragments":["talking"]},{"Key":"we're talking","Fragments":["about"]},{"Key":"about simulating","Fragments":["1,000,000"]},{"Key":"simulating 1,000,000","Fragments":["Bobs,"]},{"Key":"1,000,000 Bobs,","Fragments":["but"]},{"Key":"Bobs, but","Fragments":["I"]},{"Key":"the general","Fragments":["convention","case","case."]},{"Key":"general convention","Fragments":["is"]},{"Key":"convention is","Fragments":["to"]},{"Key":"reference unless","Fragments":["you're"]},{"Key":"to alter","Fragments":["the","the"]},{"Key":"alter the","Fragments":["string;","nucleotide_count_test.cpp"]},{"Key":"the string;","Fragments":["in","the"]},{"Key":"string; in","Fragments":["this"]},{"Key":"iteration actually","Fragments":["does"]},{"Key":"actually does","Fragments":["exactly","not"]},{"Key":"you suggest.","Fragments":[":)"]},{"Key":"[ 33%]","Fragments":["Building"]},{"Key":"33%] Building","Fragments":["CXX"]},{"Key":"[ 66%]","Fragments":["Linking"]},{"Key":"66%] Linking","Fragments":["CXX"]},{"Key":"Running 1","Fragments":["test"]},{"Key":"1 test","Fragments":["case..."]},{"Key":"*** No","Fragments":["errors"]},{"Key":"No errors","Fragments":["detected"]},{"Key":" [100%]","Fragments":["Built"]},{"Key":"[100%] Built","Fragments":["target"]},{"Key":"Built target","Fragments":["bob"]},{"Key":"very concise,","Fragments":["and","yet","and"]},{"Key":"concise, and","Fragments":["I","hopefully","I"]},{"Key":"recursion in","Fragments":["`is_question`.","your"]},{"Key":"in `is_question`.","Fragments":["I"]},{"Key":"`is_question`. I","Fragments":["don't"]},{"Key":"think recursion","Fragments":["is"]},{"Key":"is typical","Fragments":["in"]},{"Key":"typical in","Fragments":["C++"]},{"Key":"might blow","Fragments":["the"]},{"Key":"blow the","Fragments":["stack"]},{"Key":"stack on","Fragments":["strings"]},{"Key":"a LOT","Fragments":["of"]},{"Key":"LOT of","Fragments":["trailing"]},{"Key":"of trailing","Fragments":["spaces,"]},{"Key":"spaces, but","Fragments":["otherwise,","what"]},{"Key":"but otherwise,","Fragments":["it's","I"]},{"Key":"otherwise, it's","Fragments":["a"]},{"Key":"a clever","Fragments":["and","way"]},{"Key":"The constants","Fragments":["in"]},{"Key":"constants in","Fragments":["the"]},{"Key":"the blank","Fragments":["namespace","namespace"]},{"Key":"blank namespace","Fragments":["bug","to"]},{"Key":"namespace bug","Fragments":["me"]},{"Key":"bug me","Fragments":["for"]},{"Key":"me for","Fragments":["some","this"]},{"Key":"can't put","Fragments":["my"]},{"Key":"put my","Fragments":["finger"]},{"Key":"my finger","Fragments":["on."]},{"Key":"finger on.","Fragments":["The"]},{"Key":"on. The","Fragments":["\"answers\"","first"]},{"Key":"The \"answers\"","Fragments":["seem"]},{"Key":"\"answers\" seem","Fragments":["to"]},{"Key":"a well-defined","Fragments":["collection"]},{"Key":"well-defined collection","Fragments":["of"]},{"Key":"that belong","Fragments":["to"]},{"Key":"to bob,","Fragments":["but","so"]},{"Key":"bob, but","Fragments":["here"]},{"Key":"defined without","Fragments":["any"]},{"Key":"any structure","Fragments":["or"]},{"Key":"or clear","Fragments":["relationship"]},{"Key":"clear relationship","Fragments":["to"]},{"Key":"relationship to","Fragments":["bob."]},{"Key":"Perhaps they","Fragments":["ought"]},{"Key":"they ought","Fragments":["to"]},{"Key":"`bob` namespace;","Fragments":["e.g."]},{"Key":"namespace; e.g.","Fragments":["putting"]},{"Key":"e.g. putting","Fragments":["them"]},{"Key":"in `bob::answer`","Fragments":["would"]},{"Key":"`bob::answer` would","Fragments":["allow"]},{"Key":"to drop","Fragments":["the"]},{"Key":"drop the","Fragments":["`Answer`","regex"]},{"Key":"the `Answer`","Fragments":["postfix."]},{"Key":"general, I","Fragments":["think"]},{"Key":"think leaving","Fragments":["all"]},{"Key":"leaving all","Fragments":["the"]},{"Key":"the helper","Fragments":["functions","functions","functions","with","functions"]},{"Key":"functions out","Fragments":["of"]},{"Key":"header will","Fragments":["prevent"]},{"Key":"will prevent","Fragments":["others","it,"]},{"Key":"prevent others","Fragments":["from"]},{"Key":"others from","Fragments":["using","having"]},{"Key":"from using","Fragments":["`bob`","STL","boost"]},{"Key":"using `bob`","Fragments":["as"]},{"Key":"`bob` as","Fragments":["a"]},{"Key":"a library.","Fragments":["(Which","My"]},{"Key":"library. (Which","Fragments":["is"]},{"Key":"(Which is","Fragments":["ok"]},{"Key":"is ok","Fragments":["if","as","or"]},{"Key":"ok if","Fragments":["it's"]},{"Key":"it's intended","Fragments":["to","purpose."]},{"Key":"be entirely","Fragments":["standalone;"]},{"Key":"entirely standalone;","Fragments":["I"]},{"Key":"standalone; I","Fragments":["see"]},{"Key":"see you","Fragments":["did","added","used","sometimes"]},{"Key":"in earlier","Fragments":["iterations.)"]},{"Key":"you're aiming","Fragments":["to"]},{"Key":"aiming to","Fragments":["minimize"]},{"Key":"minimize passes","Fragments":["through"]},{"Key":"passes through","Fragments":["the"]},{"Key":"the input;","Fragments":["it's"]},{"Key":"input; it's","Fragments":["an"]},{"Key":"interesting approach,","Fragments":["and"]},{"Key":"approach, and","Fragments":["concisely","I"]},{"Key":"and concisely","Fragments":["done!"]},{"Key":"1. use","Fragments":["`const"]},{"Key":"use `const","Fragments":["string\u0026`","unsigned","unsigned"]},{"Key":"string\u0026` as","Fragments":["your"]},{"Key":"your input","Fragments":["type.","file,"]},{"Key":"type. Here,","Fragments":["you're"]},{"Key":"Here, you're","Fragments":["copying"]},{"Key":"you're copying","Fragments":["the","your"]},{"Key":"into `str`","Fragments":["for"]},{"Key":"`str` for","Fragments":["no"]},{"Key":"no real","Fragments":["reason,","benefit","use","reason","effort","need","benefit.","reason","alternative"]},{"Key":"real reason,","Fragments":["which"]},{"Key":"reason, which","Fragments":["defeats"]},{"Key":"defeats some","Fragments":["of"]},{"Key":"work avoiding","Fragments":["traversals."]},{"Key":"2. Using","Fragments":["the"]},{"Key":"C++11 `for","Fragments":["(auto"]},{"Key":"str) {","Fragments":["..."]},{"Key":"... use(c)","Fragments":["..."]},{"Key":"use(c) ...","Fragments":["}`"]},{"Key":"... }`","Fragments":["will"]},{"Key":"}` will","Fragments":["make"]},{"Key":"things cleaner.","Fragments":["I"]},{"Key":"cleaner. I","Fragments":["*think*"]},{"Key":"I *think*","Fragments":["you"]},{"Key":"*think* you","Fragments":["can"]},{"Key":"if `cnt","Fragments":["\u003e"]},{"Key":"`cnt \u003e","Fragments":["1`"]},{"Key":"\u003e 1`","Fragments":["and"]},{"Key":"1` and","Fragments":["return"]},{"Key":"the \"Chill","Fragments":["out\""]},{"Key":"\"Chill out\"","Fragments":["response"]},{"Key":"out\" response","Fragments":["right"]},{"Key":"response right","Fragments":["after"]},{"Key":"right after","Fragments":["the"]},{"Key":"first for","Fragments":["loop.","that"]},{"Key":"avoid needing","Fragments":["the"]},{"Key":"needing the","Fragments":["index.","insert()"]},{"Key":"the index.","Fragments":["In"]},{"Key":"index. In","Fragments":["the"]},{"Key":"second loop","Fragments":["you","is"]},{"Key":"loop you","Fragments":["don't","already","have"]},{"Key":"index at","Fragments":["all,"]},{"Key":"all, so","Fragments":["the","it"]},{"Key":"for syntax","Fragments":["works","makes"]},{"Key":"syntax works","Fragments":["for"]},{"Key":"3. `cnt`","Fragments":["is"]},{"Key":"`cnt` is","Fragments":["(1)"]},{"Key":"is (1)","Fragments":["not"]},{"Key":"(1) not","Fragments":["very"]},{"Key":"very descriptive","Fragments":["and"]},{"Key":"descriptive and","Fragments":["(2)"]},{"Key":"and (2)","Fragments":["counting","we're","adding"]},{"Key":"(2) counting","Fragments":["two"]},{"Key":"counting two","Fragments":["different"]},{"Key":"different things.","Fragments":["If"]},{"Key":"things. If","Fragments":["you"]},{"Key":"it two","Fragments":["different"]},{"Key":"different variables","Fragments":["(`cnt_upper_chars`"]},{"Key":"variables (`cnt_upper_chars`","Fragments":["and"]},{"Key":"(`cnt_upper_chars` and","Fragments":["`cnt_spaces`)"]},{"Key":"and `cnt_spaces`)","Fragments":["it"]},{"Key":"`cnt_spaces`) it","Fragments":["might"]},{"Key":"be clearer.","Fragments":["You"]},{"Key":"clearer. You","Fragments":["might"]},{"Key":"same loop,","Fragments":["and"]},{"Key":"one traversal","Fragments":["over"]},{"Key":"traversal over","Fragments":["the"]},{"Key":"4. Consider","Fragments":["assigning","using","making"]},{"Key":"Consider assigning","Fragments":["the"]},{"Key":"response strings","Fragments":["to"]},{"Key":"to descriptive","Fragments":["variables"]},{"Key":"descriptive variables","Fragments":["like"]},{"Key":"variables like","Fragments":["`shouting_response`,","subject_lower_."]},{"Key":"like `shouting_response`,","Fragments":["`silence_response`,"]},{"Key":"`shouting_response`, `silence_response`,","Fragments":["etc."]},{"Key":"`silence_response`, etc.","Fragments":["This"]},{"Key":"etc. This","Fragments":["will"]},{"Key":"little clearer","Fragments":["what"]},{"Key":"what conditions","Fragments":["are"]},{"Key":"are being","Fragments":["checked","brought"]},{"Key":"being checked","Fragments":["in","could"]},{"Key":"checked in","Fragments":["the"]},{"Key":"5. I","Fragments":["don't","think","think"]},{"Key":"is robust","Fragments":["to"]},{"Key":"robust to","Fragments":["non-space"]},{"Key":"to non-space","Fragments":["whitespace."]},{"Key":"non-space whitespace.","Fragments":["So,"]},{"Key":"whitespace. So,","Fragments":["e.g.,"]},{"Key":"So, e.g.,","Fragments":["if"]},{"Key":"e.g., if","Fragments":["we"]},{"Key":"just send","Fragments":["bob"]},{"Key":"send bob","Fragments":["a"]},{"Key":"bob a","Fragments":["tab","class,","static"]},{"Key":"a tab","Fragments":["character,"]},{"Key":"tab character,","Fragments":["he'll"]},{"Key":"character, he'll","Fragments":["not"]},{"Key":"he'll not","Fragments":["give"]},{"Key":"not give","Fragments":["the"]},{"Key":"right response,","Fragments":["b/c"]},{"Key":"response, b/c","Fragments":["you're"]},{"Key":"b/c you're","Fragments":["only"]},{"Key":"only counting","Fragments":["`'"]},{"Key":"counting `'","Fragments":["'`s."]},{"Key":"`' '`s.","Fragments":["Try"]},{"Key":"'`s. Try","Fragments":["looking"]},{"Key":"Try looking","Fragments":["up"]},{"Key":"looking up","Fragments":["functions","grades/rosters"]},{"Key":"up functions","Fragments":["to"]},{"Key":"replace `==","Fragments":["'"]},{"Key":"`== '","Fragments":["'`"]},{"Key":"' '`","Fragments":["that","(it"]},{"Key":"'` that","Fragments":["check"]},{"Key":"that check","Fragments":["for"]},{"Key":"more kinds","Fragments":["of","of","of"]},{"Key":"general, this","Fragments":["code"]},{"Key":"code seems","Fragments":["designed"]},{"Key":"seems designed","Fragments":["for"]},{"Key":"designed for","Fragments":["a","use"]},{"Key":"a use","Fragments":["case","of","of"]},{"Key":"where (1)","Fragments":["Input"]},{"Key":"(1) Input","Fragments":["strings"]},{"Key":"Input strings","Fragments":["could"]},{"Key":"strings could","Fragments":["be","only"]},{"Key":"be VERY","Fragments":["long,"]},{"Key":"VERY long,","Fragments":["so"]},{"Key":"long, so","Fragments":["multiple"]},{"Key":"so multiple","Fragments":["traversals"]},{"Key":"multiple traversals","Fragments":["are"]},{"Key":"traversals are","Fragments":["expensive,"]},{"Key":"are expensive,","Fragments":["and"]},{"Key":"expensive, and","Fragments":["(2)"]},{"Key":"(2) we're","Fragments":["not"]},{"Key":"to want","Fragments":["to"]},{"Key":"add new","Fragments":["kinds"]},{"Key":"new kinds","Fragments":["of"]},{"Key":"responses to","Fragments":["bob,","more","bob;","bob;","bob;","bob;"]},{"Key":"bob, so","Fragments":["it's"]},{"Key":"it's ok","Fragments":["to","for"]},{"Key":"ok to","Fragments":["tightly"]},{"Key":"to tightly","Fragments":["couple"]},{"Key":"tightly couple","Fragments":["all"]},{"Key":"couple all","Fragments":["the"]},{"Key":"the string-checking","Fragments":["code."]},{"Key":"string-checking code.","Fragments":["This"]},{"Key":"code. This","Fragments":["seems","happens","probably"]},{"Key":"an unlikely","Fragments":["use"]},{"Key":"unlikely use","Fragments":["case"]},{"Key":"for bob","Fragments":["to"]},{"Key":"bob to","Fragments":["me---I","elicit","reflect"]},{"Key":"to me---I","Fragments":["think"]},{"Key":"me---I think","Fragments":["it's"]},{"Key":"likely that","Fragments":["bob"]},{"Key":"that bob","Fragments":["will","should"]},{"Key":"bob will","Fragments":["respond","assume"]},{"Key":"will respond","Fragments":["to"]},{"Key":"to almost-always","Fragments":["relatively"]},{"Key":"almost-always relatively","Fragments":["short"]},{"Key":"relatively short","Fragments":["strings"]},{"Key":"short strings","Fragments":["(sentences,","this"]},{"Key":"strings (sentences,","Fragments":["not"]},{"Key":"(sentences, not","Fragments":["documents),"]},{"Key":"not documents),","Fragments":["and"]},{"Key":"documents), and","Fragments":["that"]},{"Key":"that we'd","Fragments":["want"]},{"Key":"we'd want","Fragments":["to"]},{"Key":"give bob","Fragments":["more"]},{"Key":"bob more","Fragments":["kinds"]},{"Key":"of things.","Fragments":["That"]},{"Key":"things. That","Fragments":["would"]},{"Key":"difficult in","Fragments":["your"]},{"Key":"feel your","Fragments":["pain"]},{"Key":"your pain","Fragments":["on"]},{"Key":"pain on","Fragments":["this"]},{"Key":"one. This","Fragments":["is"]},{"Key":"is dying","Fragments":["for"]},{"Key":"dying for","Fragments":["a"]},{"Key":"a solution","Fragments":["that","for.","that","and","that"]},{"Key":"like `(reduce","Fragments":["+"]},{"Key":"`(reduce +","Fragments":["(map","(map"]},{"Key":"+ (map","Fragments":["=","="]},{"Key":"(map =","Fragments":["left","left"]},{"Key":"= left","Fragments":["right))`,","right))`"]},{"Key":"left right))`,","Fragments":["but"]},{"Key":"right))`, but","Fragments":["as"]},{"Key":"can see,","Fragments":["the"]},{"Key":"see, the","Fragments":["C++"]},{"Key":"C++ methods","Fragments":["for"]},{"Key":"methods for","Fragments":["those"]},{"Key":"those are","Fragments":["way","both"]},{"Key":"too verbose","Fragments":["for","consider"]},{"Key":"verbose for","Fragments":["a"]},{"Key":"simple case","Fragments":["like","of","before","before"]},{"Key":"up hiding","Fragments":["too"]},{"Key":"hiding too","Fragments":["much"]},{"Key":"of what's","Fragments":["going","in"]},{"Key":"going on.","Fragments":["If","A"]},{"Key":"on. If","Fragments":["the"]},{"Key":"function were","Fragments":["more","handed"]},{"Key":"just checking","Fragments":["equality","all_caps()."]},{"Key":"checking equality","Fragments":["and"]},{"Key":"equality and","Fragments":["summing,"]},{"Key":"and summing,","Fragments":["I'd"]},{"Key":"summing, I'd","Fragments":["be"]},{"Key":"more inclined","Fragments":["to"]},{"Key":"inclined to","Fragments":["go"]},{"Key":"go w/","Fragments":["the"]},{"Key":"w/ the","Fragments":["more"]},{"Key":"more functional-loooking","Fragments":["solutions."]},{"Key":"Does line","Fragments":["12"]},{"Key":"12 not","Fragments":["make"]},{"Key":"a copy?","Fragments":["I"]},{"Key":"copy? I","Fragments":["think"]},{"Key":"think @marc","Fragments":["is"]},{"Key":"@marc is","Fragments":["wondering"]},{"Key":"is wondering","Fragments":["wny"]},{"Key":"wondering wny","Fragments":["you"]},{"Key":"wny you","Fragments":["can't/don't"]},{"Key":"you can't/don't","Fragments":["just"]},{"Key":"can't/don't just","Fragments":["pass"]},{"Key":"just pass","Fragments":["`query`"]},{"Key":"pass `query`","Fragments":["by"]},{"Key":"`query` by","Fragments":["value,"]},{"Key":"value, then","Fragments":["trim"]},{"Key":"then trim","Fragments":["that"]},{"Key":"trim that","Fragments":["local"]},{"Key":"that local","Fragments":["copy"]},{"Key":"copy inplace.","Fragments":["Here"]},{"Key":"inplace. Here","Fragments":["you"]},{"Key":"Here you","Fragments":["take","could","could"]},{"Key":"to `query`","Fragments":["and"]},{"Key":"`query` and","Fragments":["copy"]},{"Key":"and copy","Fragments":["it","elision),","operations","constructor."]},{"Key":"it via","Fragments":["`trim_copy`."]},{"Key":"via `trim_copy`.","Fragments":["(Maybe"]},{"Key":"`trim_copy`. (Maybe","Fragments":["boost"]},{"Key":"(Maybe boost","Fragments":["doesn't"]},{"Key":"boost doesn't","Fragments":["have"]},{"Key":"in-place string","Fragments":["trimmer;"]},{"Key":"string trimmer;","Fragments":["I"]},{"Key":"trimmer; I","Fragments":["don't"]},{"Key":"you guys.","Fragments":["I"]},{"Key":"guys. I","Fragments":["wasn't"]},{"Key":"that exercism","Fragments":["means","provides."]},{"Key":"exercism means","Fragments":["to"]},{"Key":"use functions,","Fragments":["not"]},{"Key":"functions, not","Fragments":["classes.","C"]},{"Key":"not classes.","Fragments":["When"]},{"Key":"classes. When","Fragments":["I"]},{"Key":"saw bob::hey","Fragments":["in"]},{"Key":"bob::hey in","Fragments":["the"]},{"Key":"test I","Fragments":["thought"]},{"Key":"class, not","Fragments":["namespaces."]},{"Key":"used that","Fragments":["lambda,","in"]},{"Key":"that lambda,","Fragments":["because"]},{"Key":"lambda, because","Fragments":["this"]},{"Key":"this example","Fragments":["didn't","from","I","though,"]},{"Key":"example didn't","Fragments":["compile"]},{"Key":"didn't compile","Fragments":["without"]},{"Key":"without it:","Fragments":["isupper"]},{"Key":"it: isupper","Fragments":["argument"]},{"Key":"isupper argument","Fragments":["is"]},{"Key":"is int","Fragments":["type,"]},{"Key":"int type,","Fragments":["not"]},{"Key":"type, not","Fragments":["char.","the"]},{"Key":"Also All","Fragments":["tests"]},{"Key":"All tests","Fragments":["are"]},{"Key":"are passed","Fragments":["on"]},{"Key":"passed on","Fragments":["my"]},{"Key":"my platform.","Fragments":["Can"]},{"Key":"platform. Can","Fragments":["you"]},{"Key":"you please","Fragments":["show","tell"]},{"Key":"please show","Fragments":["me"]},{"Key":"show me","Fragments":["tests"]},{"Key":"me tests","Fragments":["which"]},{"Key":"tests which","Fragments":["is","is","might"]},{"Key":" Generic","Fragments":["way."]},{"Key":"like these","Fragments":["macros."]},{"Key":"these macros.","Fragments":["I"]},{"Key":"macros. I","Fragments":["didn't"]},{"Key":"myself, but","Fragments":["it"]},{"Key":"me all","Fragments":["the","too"]},{"Key":"time, that","Fragments":["I"]},{"Key":"use macros","Fragments":["in"]},{"Key":"macros in","Fragments":["this"]},{"Key":"feedback @cesar.","Fragments":["I"]},{"Key":"@cesar. I","Fragments":["don't"]},{"Key":"have much","Fragments":["experience","in"]},{"Key":"much experience","Fragments":["in"]},{"Key":"using namespaces","Fragments":["so","in"]},{"Key":"was kinda","Fragments":["unsure"]},{"Key":"kinda unsure","Fragments":["how"]},{"Key":"unsure how","Fragments":["to"]},{"Key":"use them.","Fragments":["I","This","The","I"]},{"Key":"constants private,","Fragments":["however,"]},{"Key":"private, however,","Fragments":["your"]},{"Key":"however, your","Fragments":["suggestion"]},{"Key":"suggestion makes","Fragments":["sense."]},{"Key":"they're included","Fragments":["in"]},{"Key":"bob namespace","Fragments":["they","doesn't","and"]},{"Key":"namespace they","Fragments":["will"]},{"Key":"they will","Fragments":["pretty","be","not"]},{"Key":"will pretty","Fragments":["much"]},{"Key":"much behave","Fragments":["the"]},{"Key":"behave the","Fragments":["same","way","same"]},{"Key":"and be","Fragments":["private"]},{"Key":"as they're","Fragments":["not"]},{"Key":"not included","Fragments":["in","by"]},{"Key":"also decided","Fragments":["to"]},{"Key":"constant names","Fragments":["unchanged"]},{"Key":"names unchanged","Fragments":["and"]},{"Key":"unchanged and","Fragments":["not"]},{"Key":"not add","Fragments":["them","more"]},{"Key":"add them","Fragments":["to"]},{"Key":"a nested","Fragments":["namespace"]},{"Key":"nested namespace","Fragments":["like"]},{"Key":"namespace like","Fragments":["you"]},{"Key":"suggested because","Fragments":["I've"]},{"Key":"I've read","Fragments":["that"]},{"Key":"read that","Fragments":["nested","comment,","book"]},{"Key":"that nested","Fragments":["namespaces"]},{"Key":"nested namespaces","Fragments":["are"]},{"Key":"not recommended","Fragments":["in"]},{"Key":"recommended in","Fragments":["C++."]},{"Key":"Your last","Fragments":["post"]},{"Key":"last post","Fragments":["suggest"]},{"Key":"post suggest","Fragments":["that"]},{"Key":"suggest that","Fragments":["you've","you"]},{"Key":"only passed","Fragments":["one"]},{"Key":"passed one","Fragments":["test."]},{"Key":"one test.","Fragments":["The","Once"]},{"Key":"The bob_test.cpp","Fragments":["file"]},{"Key":"bob_test.cpp file","Fragments":["contains","to"]},{"Key":"file contains","Fragments":["more"]},{"Key":"contains more","Fragments":["than"]},{"Key":"test. Once","Fragments":["you've"]},{"Key":"you've passed","Fragments":["a"]},{"Key":"passed a","Fragments":["test,","parameter","copy"]},{"Key":"a test,","Fragments":["you","for"]},{"Key":"test, you","Fragments":["have"]},{"Key":"to uncomment","Fragments":["the"]},{"Key":"uncomment the","Fragments":["next"]},{"Key":"test by","Fragments":["moving","test.","test"]},{"Key":"line \"#if","Fragments":["defined(EXERCISM_RUN_ALL_TESTS)\""]},{"Key":"\"#if defined(EXERCISM_RUN_ALL_TESTS)\"","Fragments":["past"]},{"Key":"defined(EXERCISM_RUN_ALL_TESTS)\" past","Fragments":["the"]},{"Key":"next test.","Fragments":["Repeat"]},{"Key":"test. Repeat","Fragments":["this"]},{"Key":"Repeat this","Fragments":["process"]},{"Key":"this process","Fragments":["until"]},{"Key":"process until","Fragments":["you've"]},{"Key":"until you've","Fragments":["reached","figured"]},{"Key":"you've reached","Fragments":["the"]},{"Key":"reached the","Fragments":["end"]},{"Key":"the file.","Fragments":["There","However,"]},{"Key":"file. There","Fragments":["should"]},{"Key":"be 17","Fragments":["test"]},{"Key":"17 test","Fragments":["cases."]},{"Key":" Nice,","Fragments":["straightforward","but","i"]},{"Key":"Nice, straightforward","Fragments":["implementation."]},{"Key":"straightforward implementation.","Fragments":["A","A"]},{"Key":"1. `check_uppercase`","Fragments":["could"]},{"Key":"`check_uppercase` could","Fragments":["be"]},{"Key":"be rewritten","Fragments":["with","as"]},{"Key":"rewritten with","Fragments":["an"]},{"Key":"an STL","Fragments":["algorithm:"]},{"Key":"STL algorithm:","Fragments":["`return"]},{"Key":"algorithm: `return","Fragments":["!any_of(begin(c),"]},{"Key":"`return !any_of(begin(c),","Fragments":["end(c),"]},{"Key":"!any_of(begin(c), end(c),","Fragments":["[](char"]},{"Key":"end(c), [](char","Fragments":["c)"]},{"Key":"c) {","Fragments":["return","return","return","return","return","return"]},{"Key":"{ return","Fragments":["isalpha(c)","isalpha(c)","isspace(c);","std::islower(c);","constant;","!std::isspace(val);","to_rna(c);","to_rna(c);"]},{"Key":"return isalpha(c)","Fragments":["\u0026\u0026","\u0026\u0026"]},{"Key":"isalpha(c) \u0026\u0026","Fragments":["islower(c)","(0"]},{"Key":"\u0026\u0026 islower(c)","Fragments":["}"]},{"Key":"islower(c) }","Fragments":[")`"]},{"Key":" 1(a)","Fragments":["If"]},{"Key":"1(a) If","Fragments":["you"]},{"Key":"do keep","Fragments":["the"]},{"Key":"loop, I'd","Fragments":["rename"]},{"Key":"I'd rename","Fragments":["`ok`"]},{"Key":"rename `ok`","Fragments":["to"]},{"Key":"`ok` to","Fragments":["something"]},{"Key":"like `all_letters_upcase`;","Fragments":["or"]},{"Key":"`all_letters_upcase`; or","Fragments":["reverse"]},{"Key":"or reverse","Fragments":["the"]},{"Key":"reverse the","Fragments":["logic"]},{"Key":"logic so","Fragments":["that"]},{"Key":"you return","Fragments":["something","a","the","a"]},{"Key":"return something","Fragments":["like"]},{"Key":"Consider moving","Fragments":["the"]},{"Key":"conditions in","Fragments":["the","your","your"]},{"Key":"the `if/else","Fragments":["if/else`"]},{"Key":"`if/else if/else`","Fragments":["to"]},{"Key":"if/else` to","Fragments":["their"]},{"Key":"own named","Fragments":["function."]},{"Key":"named function.","Fragments":["This","I'm"]},{"Key":"function. This","Fragments":["will","code","function"]},{"Key":"it clearer","Fragments":["what","when","and"]},{"Key":"is (bob","Fragments":["responds"]},{"Key":"(bob responds","Fragments":["to"]},{"Key":"with \"Whoa!","Fragments":["Chill"]},{"Key":"\"Whoa! Chill","Fragments":["out!\","]},{"Key":"Chill out!\",","Fragments":["to"]},{"Key":"out!\", to","Fragments":["questions"]},{"Key":"to questions","Fragments":["with"]},{"Key":"questions with","Fragments":["\"Sure\",","numbers.","regex"]},{"Key":"with \"Sure\",","Fragments":["etc.)"]},{"Key":"\"Sure\", etc.)","Fragments":["And"]},{"Key":"etc.) And","Fragments":["if"]},{"Key":"what constitutes","Fragments":["yelling"]},{"Key":"constitutes yelling","Fragments":["or"]},{"Key":"or questions","Fragments":["changes,"]},{"Key":"questions changes,","Fragments":["`hey`"]},{"Key":"changes, `hey`","Fragments":["is"]},{"Key":"and clear.","Fragments":["I","A"]},{"Key":"how `hey`","Fragments":["is"]},{"Key":"understand w/o","Fragments":["worrying"]},{"Key":"w/o worrying","Fragments":["about"]},{"Key":"worrying about","Fragments":["the","(using","and"]},{"Key":"string classification","Fragments":["details."]},{"Key":"I fee","Fragments":["like"]},{"Key":"fee like","Fragments":["your"]},{"Key":"your `is_`","Fragments":["functions"]},{"Key":"`is_` functions","Fragments":["would"]},{"Key":"functions would","Fragments":["benefit"]},{"Key":"would benefit","Fragments":["from","from"]},{"Key":"using STL","Fragments":["algorithms.","algos"]},{"Key":"STL algorithms.","Fragments":["`any_of`"]},{"Key":"algorithms. `any_of`","Fragments":["and"]},{"Key":"and `all_of`","Fragments":["shouldn't"]},{"Key":"`all_of` shouldn't","Fragments":["be"]},{"Key":"expensive than","Fragments":["your"]},{"Key":"than your","Fragments":["loops","first","code","sequential"]},{"Key":"your loops","Fragments":["(i.e.","on","as"]},{"Key":"loops (i.e.","Fragments":["they'll"]},{"Key":"(i.e. they'll","Fragments":["only"]},{"Key":"they'll only","Fragments":["pass"]},{"Key":"only pass","Fragments":["over","a","by"]},{"Key":"pass over","Fragments":["as","the","the"]},{"Key":"over as","Fragments":["many"]},{"Key":"as many","Fragments":["elements"]},{"Key":"elements as","Fragments":["needed)."]},{"Key":"So `is_yelling_string`","Fragments":["would"]},{"Key":"`is_yelling_string` would","Fragments":["be"]},{"Key":"something like:","Fragments":["`return"]},{"Key":"like: `return","Fragments":["!any_of(begin(input),"]},{"Key":"`return !any_of(begin(input),","Fragments":["end(input),"]},{"Key":"!any_of(begin(input), end(input),","Fragments":["[](char"]},{"Key":"end(input), [](char","Fragments":["c)","c)"]},{"Key":"\u0026\u0026 (0","Fragments":["=="]},{"Key":"(0 ==","Fragments":["isupper(c));"]},{"Key":"== isupper(c));","Fragments":["}`"]},{"Key":"and `is_question_string`","Fragments":["would"]},{"Key":"`is_question_string` would","Fragments":["be:"]},{"Key":"would be:","Fragments":["`all_of(begin(input)"]},{"Key":"be: `all_of(begin(input)","Fragments":["+"]},{"Key":"`all_of(begin(input) +","Fragments":["pos,"]},{"Key":"+ pos,","Fragments":["end(input),"]},{"Key":"pos, end(input),","Fragments":["[](char"]},{"Key":"return isspace(c);","Fragments":["})`"]},{"Key":" (alternatively,","Fragments":["since"]},{"Key":"(alternatively, since","Fragments":["you've"]},{"Key":"since you've","Fragments":["defined"]},{"Key":"defined `is_nothing_string`","Fragments":["you"]},{"Key":"`is_nothing_string` you","Fragments":["can"]},{"Key":"can pass","Fragments":["the","a","in"]},{"Key":"the substring","Fragments":["after","just"]},{"Key":"substring after","Fragments":["the"]},{"Key":"the \"?\"","Fragments":["position"]},{"Key":"\"?\" position","Fragments":["to"]},{"Key":"position to","Fragments":["it","reduce"]},{"Key":"some details","Fragments":["wrong"]},{"Key":"details wrong","Fragments":["above,"]},{"Key":"wrong above,","Fragments":["but"]},{"Key":"the gist","Fragments":["is","of"]},{"Key":"gist is","Fragments":["clear."]},{"Key":"to simultaneously","Fragments":["iterate"]},{"Key":"simultaneously iterate","Fragments":["over"]},{"Key":"two sequences","Fragments":["in","are","are","are","are","are","are"]},{"Key":"sequences in","Fragments":["C++.","the","the"]},{"Key":"C++. `boost::zip_iterator`","Fragments":["feels"]},{"Key":"`boost::zip_iterator` feels","Fragments":["too"]},{"Key":"feels too","Fragments":["heavy"]},{"Key":"too heavy","Fragments":["for","approach"]},{"Key":"heavy for","Fragments":["most"]},{"Key":"for most","Fragments":["cases."]},{"Key":"most cases.","Fragments":["Using"]},{"Key":"cases. Using","Fragments":["`int"]},{"Key":"Using `int","Fragments":["i`"]},{"Key":"`int i`","Fragments":["indexes"]},{"Key":"i` indexes","Fragments":["is"]},{"Key":"indexes is","Fragments":["lighter"]},{"Key":"is lighter","Fragments":["but"]},{"Key":"lighter but","Fragments":["less"]},{"Key":"but less","Fragments":["expressive."]},{"Key":"less expressive.","Fragments":["I"]},{"Key":"expressive. I","Fragments":["like","like"]},{"Key":"believe you","Fragments":["can","need","can"]},{"Key":"tests if","Fragments":["your","you"]},{"Key":"your `domain_error`","Fragments":["has"]},{"Key":"`domain_error` has","Fragments":["an"]},{"Key":"error message;","Fragments":["that"]},{"Key":"message; that","Fragments":["would"]},{"Key":"Also, `const","Fragments":["string\u0026`"]},{"Key":"string\u0026` arguments","Fragments":["would"]},{"Key":"arguments would","Fragments":["avoid"]},{"Key":"would avoid","Fragments":["making","doing","a","stream","the","it"]},{"Key":"making unecessary","Fragments":["copies"]},{"Key":"unecessary copies","Fragments":["of"]},{"Key":" `const`","Fragments":["qualifiers"]},{"Key":"`const` qualifiers","Fragments":["in"]},{"Key":"qualifiers in","Fragments":["the"]},{"Key":"loop initializer","Fragments":["would"]},{"Key":"initializer would","Fragments":["make"]},{"Key":"clear that","Fragments":["you're","64","64","this"]},{"Key":"strings. (though","Fragments":["this"]},{"Key":"(though this","Fragments":["is"]},{"Key":"a simple,","Fragments":["short"]},{"Key":"simple, short","Fragments":["loop"]},{"Key":"short loop","Fragments":["it's"]},{"Key":"loop it's","Fragments":["not"]},{"Key":"deal, I","Fragments":["guess.)"]},{"Key":"use std::isalpha","Fragments":["(and/or"]},{"Key":"std::isalpha (and/or","Fragments":["isdigit)?"]},{"Key":"(and/or isdigit)?","Fragments":["Concerned"]},{"Key":"isdigit)? Concerned","Fragments":["about"]},{"Key":"Concerned about","Fragments":["performance"]},{"Key":"to tolower","Fragments":["is"]},{"Key":"tolower is","Fragments":["unnecessary/wasted","not"]},{"Key":"is unnecessary/wasted","Fragments":["for"]},{"Key":"unnecessary/wasted for","Fragments":["the"]},{"Key":"the 0-9","Fragments":["case."]},{"Key":"0-9 case.","Fragments":["If"]},{"Key":"using isalpha","Fragments":["you"]},{"Key":"isalpha you","Fragments":["wouldn't"]},{"Key":"it until","Fragments":["you","all"]},{"Key":"were inside","Fragments":["the"]},{"Key":"Thanks, although","Fragments":["I"]},{"Key":"I'm in","Fragments":["two"]},{"Key":"two minds.","Fragments":["If"]},{"Key":"minds. If","Fragments":["I"]},{"Key":"some type","Fragments":["that"]},{"Key":"a ```std::pair\u003cint,","Fragments":["int\u003e```,"]},{"Key":"```std::pair\u003cint, int\u003e```,","Fragments":["simply","would"]},{"Key":"int\u003e```, simply","Fragments":["writing"]},{"Key":"simply writing","Fragments":["```std::pair\u003cint,"]},{"Key":"writing ```std::pair\u003cint,","Fragments":["int\u003e```,"]},{"Key":"int\u003e```, would","Fragments":["give"]},{"Key":"a reader","Fragments":["a"]},{"Key":"reader a","Fragments":["simple"]},{"Key":"simple clear","Fragments":["idea"]},{"Key":"clear idea","Fragments":["of"]},{"Key":"variable actually","Fragments":["is"]},{"Key":"language. On","Fragments":["the"]},{"Key":"hand ```BoardPosition```","Fragments":["is"]},{"Key":"```BoardPosition``` is","Fragments":["more"]},{"Key":"more descriptive.","Fragments":["It"]},{"Key":"descriptive. It","Fragments":["would"]},{"Key":"clear cut","Fragments":["if"]},{"Key":"cut if","Fragments":["there"]},{"Key":"a long","Fragments":["nested","route","time.","time","time","time"]},{"Key":"long nested","Fragments":["set"]},{"Key":"nested set","Fragments":["of"]},{"Key":"containers that","Fragments":["was"]},{"Key":"was difficult","Fragments":["to","for"]},{"Key":"Having said","Fragments":["all"]},{"Key":"said all","Fragments":["that,","you"]},{"Key":"considered ```typedef```","Fragments":["or"]},{"Key":"```typedef``` or","Fragments":["```using```"]},{"Key":"or ```using```","Fragments":["so"]},{"Key":"```using``` so","Fragments":["thanks"]},{"Key":"for sparking","Fragments":["the"]},{"Key":"sparking the","Fragments":["thought."]},{"Key":"the thought.","Fragments":["Modern"]},{"Key":"thought. Modern","Fragments":["C++"]},{"Key":"Modern C++","Fragments":["contains"]},{"Key":"C++ contains","Fragments":["so"]},{"Key":"contains so","Fragments":["many"]},{"Key":"many tools","Fragments":["I"]},{"Key":"tools I","Fragments":["find"]},{"Key":"head at","Fragments":["once!"]},{"Key":"The for","Fragments":["loop","loop"]},{"Key":"in matches","Fragments":["reminds","probably"]},{"Key":"matches reminds","Fragments":["me"]},{"Key":"Ah, ok.","Fragments":["Thank"]},{"Key":"ok. Thank","Fragments":["you."]},{"Key":"Using `copy_if`","Fragments":["to"]},{"Key":"`copy_if` to","Fragments":["select"]},{"Key":"select candidate","Fragments":["strings,"]},{"Key":"candidate strings,","Fragments":["per"]},{"Key":"strings, per","Fragments":["the"]},{"Key":"good suggestion","Fragments":["from"]},{"Key":"suggestion from","Fragments":["@ova","@naomie","previous"]},{"Key":"would isalpha","Fragments":["give"]},{"Key":"isalpha give","Fragments":["me?"]},{"Key":"give me?","Fragments":["Hex"]},{"Key":"me? Hex","Fragments":["numbers"]},{"Key":"Hex numbers","Fragments":["contain"]},{"Key":"numbers contain","Fragments":["only"]},{"Key":"contain only","Fragments":["6"]},{"Key":"only 6","Fragments":["letters,"]},{"Key":"6 letters,","Fragments":["not"]},{"Key":"letters, not","Fragments":["the"]},{"Key":"Yes, of","Fragments":["course."]},{"Key":"course. Sorry","Fragments":["I"]},{"Key":"Sorry I","Fragments":["was"]},{"Key":"was being","Fragments":["stupid","operated","yelle"]},{"Key":"being stupid","Fragments":["for"]},{"Key":"stupid for","Fragments":["some"]},{"Key":"some reason.","Fragments":["I"]},{"Key":"reason. I","Fragments":["guess","could"]},{"Key":"guess isxdigit","Fragments":["would"]},{"Key":"isxdigit would","Fragments":["work"]},{"Key":"there because","Fragments":["you've"]},{"Key":"handled the","Fragments":["digits,"]},{"Key":"the digits,","Fragments":["but"]},{"Key":"digits, but","Fragments":["it's"]},{"Key":"not saving","Fragments":["much"]},{"Key":"saving much","Fragments":["and"]},{"Key":"much and","Fragments":["might"]},{"Key":"and might","Fragments":["be","contain","be"]},{"Key":"be less","Fragments":["clear.","work","than","than","than","than","than","than"]},{"Key":"clear. tolower","Fragments":["is"]},{"Key":"worth considering","Fragments":["using"]},{"Key":"considering using","Fragments":["a"]},{"Key":"boost functions","Fragments":["that","for"]},{"Key":"already do","Fragments":["some","for"]},{"Key":"do some","Fragments":["of","manipulation"]},{"Key":"these things.","Fragments":["In"]},{"Key":"things. In","Fragments":["particular"]},{"Key":"In particular","Fragments":["I'm","for"]},{"Key":"particular I'm","Fragments":["thinking"]},{"Key":"of split","Fragments":["which"]},{"Key":"split which","Fragments":["does"]},{"Key":"does something","Fragments":["very","very"]},{"Key":"something very","Fragments":["similar","similar","different)."]},{"Key":"to split_words","Fragments":["and"]},{"Key":"split_words and","Fragments":["to_lower"]},{"Key":"and to_lower","Fragments":["which"]},{"Key":"to_lower which","Fragments":["does"]},{"Key":"your transform.","Fragments":["I"]},{"Key":"transform. I","Fragments":["don't"]},{"Key":"don't believe","Fragments":["these","you","so,","it's","it","I"]},{"Key":"believe these","Fragments":["will"]},{"Key":"these will","Fragments":["help"]},{"Key":"you at","Fragments":["all"]},{"Key":"with efficiency","Fragments":["(maybe"]},{"Key":"efficiency (maybe","Fragments":["even"]},{"Key":"(maybe even","Fragments":["hurt"]},{"Key":"even hurt","Fragments":["slightly),"]},{"Key":"hurt slightly),","Fragments":["but"]},{"Key":"slightly), but","Fragments":["you"]},{"Key":"say that's","Fragments":["not","up"]},{"Key":"major goal","Fragments":["here"]},{"Key":"goal here","Fragments":["anyhow."]},{"Key":"here anyhow.","Fragments":["Where"]},{"Key":"anyhow. Where","Fragments":["they"]},{"Key":"Where they","Fragments":["really"]},{"Key":"the human","Fragments":["reading"]},{"Key":"human reading","Fragments":["the"]},{"Key":"already familiar","Fragments":["with"]},{"Key":" to_lower","Fragments":["doesn't","is"]},{"Key":"to_lower doesn't","Fragments":["provide"]},{"Key":"doesn't provide","Fragments":["an"]},{"Key":"provide an","Fragments":["example,","overload"]},{"Key":"an example,","Fragments":["so:"]},{"Key":"boost::to_lower( w","Fragments":[");"]},{"Key":"Good catch.","Fragments":["I","Addressed"]},{"Key":"catch. I","Fragments":["didn't"]},{"Key":"know that.","Fragments":["I'll","About"]},{"Key":"string\u0026 as","Fragments":["arguments"]},{"Key":"Consider putting","Fragments":["in","the","it"]},{"Key":"putting in","Fragments":["an","too"]},{"Key":"explanation in","Fragments":["domain_error"]},{"Key":"3. charB","Fragments":["is"]},{"Key":"charB is","Fragments":["used"]},{"Key":"used before","Fragments":["declaring"]},{"Key":"I've often","Fragments":["regretted"]},{"Key":"often regretted","Fragments":["there"]},{"Key":"regretted there","Fragments":["isn't"]},{"Key":"simpler approach","Fragments":["to"]},{"Key":"approach to","Fragments":["doing","this","this","tokenizing"]},{"Key":"a zip.","Fragments":["It"]},{"Key":"zip. It","Fragments":["gets"]},{"Key":"It gets","Fragments":["a"]},{"Key":"gets a","Fragments":["touch","lot"]},{"Key":"cleaner if","Fragments":["you","a"]},{"Key":"use ranges,","Fragments":["but"]},{"Key":"ranges, but","Fragments":["heaven"]},{"Key":"but heaven","Fragments":["help"]},{"Key":"heaven help","Fragments":["you"]},{"Key":"compiler error,","Fragments":["and"]},{"Key":"error, and","Fragments":["mistakes","that"]},{"Key":"and mistakes","Fragments":["are","harder"]},{"Key":"mistakes are","Fragments":["super"]},{"Key":"super easy","Fragments":["to"]},{"Key":"make with","Fragments":["boost","other"]},{"Key":"with boost","Fragments":["ranges.","yet,"]},{"Key":"boost ranges.","Fragments":["Maybe"]},{"Key":"ranges. Maybe","Fragments":["C++17"]},{"Key":"Maybe C++17","Fragments":["concepts"]},{"Key":"C++17 concepts","Fragments":["will"]},{"Key":"concepts will","Fragments":["make"]},{"Key":"errors easier","Fragments":["to"]},{"Key":"follow, but","Fragments":["they're"]},{"Key":"they're still","Fragments":["way"]},{"Key":"still way","Fragments":["to"]},{"Key":"to easy","Fragments":["to"]},{"Key":"to stumble","Fragments":["upon"]},{"Key":"stumble upon","Fragments":["through"]},{"Key":"upon through","Fragments":["doing"]},{"Key":"through doing","Fragments":["something"]},{"Key":"recommendation in","Fragments":["there"]},{"Key":"there here","Fragments":["and"]},{"Key":"and now,","Fragments":["if"]},{"Key":"now, if","Fragments":["you"]},{"Key":"you happen","Fragments":["to"]},{"Key":"using -std=c++1y","Fragments":["or"]},{"Key":"-std=c++1y or","Fragments":["feel"]},{"Key":"or feel","Fragments":["OK"]},{"Key":"feel OK","Fragments":["with"]},{"Key":"OK with","Fragments":["doing"]},{"Key":"with doing","Fragments":["that,","things"]},{"Key":"doing that,","Fragments":["I"]},{"Key":"the trailing","Fragments":["return","space."]},{"Key":"trailing return","Fragments":["type"]},{"Key":"on make_zip_iterator.","Fragments":["That's"]},{"Key":"make_zip_iterator. That's","Fragments":["not"]},{"Key":"a difference,","Fragments":["but"]},{"Key":"difference, but","Fragments":["slightly","that"]},{"Key":"but slightly","Fragments":["less"]},{"Key":"slightly less","Fragments":["verbose."]},{"Key":"way you've","Fragments":["used","approached"]},{"Key":"you've used","Fragments":["std::transform","prefix","a"]},{"Key":"suggest having","Fragments":["using"]},{"Key":"having using","Fragments":["statements"]},{"Key":"statements only","Fragments":["in"]},{"Key":"cpp \u0026","Fragments":["not"]},{"Key":"\u0026 not","Fragments":["in","copying","have"]},{"Key":"in h","Fragments":["files","file?"]},{"Key":"h files","Fragments":["to"]},{"Key":"avoid scope/namespace","Fragments":["conflicts"]},{"Key":"3. Yes,","Fragments":["your","will"]},{"Key":"your post","Fragments":["inc"]},{"Key":"post inc","Fragments":["needs"]},{"Key":"inc needs","Fragments":["a"]},{"Key":"needs a","Fragments":["comment"]},{"Key":"comment \u0026","Fragments":["so"]},{"Key":"\u0026 so","Fragments":["does"]},{"Key":"so does","Fragments":["your","not"]},{"Key":"does your","Fragments":["regex.","`raindops`"]},{"Key":"4. Did","Fragments":["you"]},{"Key":"consider avoiding","Fragments":["constructing"]},{"Key":"avoiding constructing","Fragments":["vector"]},{"Key":"constructing vector","Fragments":["\u0026"]},{"Key":"vector \u0026","Fragments":["directly"]},{"Key":"\u0026 directly","Fragments":["filling"]},{"Key":"directly filling","Fragments":["the"]},{"Key":" Wonderful.","Fragments":[":)"]},{"Key":"Wonderful. :)","Fragments":["It"]},{"Key":":) It","Fragments":["is","is"]},{"Key":"much shorter","Fragments":["than"]},{"Key":"shorter than","Fragments":["your","that"]},{"Key":"first version","Fragments":["yet","passed"]},{"Key":"version yet","Fragments":["even"]},{"Key":"yet even","Fragments":["more"]},{"Key":"readable. Allow","Fragments":["me"]},{"Key":"Allow me","Fragments":["one"]},{"Key":"me one","Fragments":["last"]},{"Key":"one last","Fragments":["remark","revision"]},{"Key":"last remark","Fragments":["concerning"]},{"Key":"remark concerning","Fragments":["the"]},{"Key":"concerning the","Fragments":["_using"]},{"Key":"the _using","Fragments":["directives_"]},{"Key":"_using directives_","Fragments":["in"]},{"Key":"directives_ in","Fragments":["lines"]},{"Key":"in lines","Fragments":["5-6:","13-20"]},{"Key":"lines 5-6:","Fragments":["using"]},{"Key":"5-6: using","Fragments":["```using"]},{"Key":"using ```using","Fragments":["some::namespace```"]},{"Key":"```using some::namespace```","Fragments":["causes"]},{"Key":"some::namespace``` causes","Fragments":["namespace"]},{"Key":"causes namespace","Fragments":["pollution;"]},{"Key":"namespace pollution;","Fragments":["see"]},{"Key":"pollution; see","Fragments":["http://stackoverflow.com/questions/6973161/c-using-keyword"]},{"Key":"see http://stackoverflow.com/questions/6973161/c-using-keyword","Fragments":["(first"]},{"Key":"http://stackoverflow.com/questions/6973161/c-using-keyword (first","Fragments":["answer)"]},{"Key":"(first answer)","Fragments":["or"]},{"Key":"answer) or","Fragments":["http://programmers.stackexchange.com/questions/236404/what-is-using-namespace-pollution"]},{"Key":"or http://programmers.stackexchange.com/questions/236404/what-is-using-namespace-pollution","Fragments":["."]},{"Key":"1. No","Fragments":["real"]},{"Key":"No real","Fragments":["benefit","benefit","issues","issues"]},{"Key":"real benefit","Fragments":["in","in","in"]},{"Key":"benefit in","Fragments":["using","using","not"]},{"Key":"using auto","Fragments":["as","as","in","in"]},{"Key":"auto as","Fragments":["return","return"]},{"Key":"type in","Fragments":["this","this"]},{"Key":"comment against","Fragments":["last[-1]"]},{"Key":"against last[-1]","Fragments":["just"]},{"Key":"last[-1] just","Fragments":["to"]},{"Key":"3. I","Fragments":["like","prefer","wasn't"]},{"Key":"you're taking","Fragments":["const"]},{"Key":"taking const","Fragments":["\u0026"]},{"Key":"not copying","Fragments":["any","the"]},{"Key":"copying any","Fragments":["string"]},{"Key":"4. A","Fragments":["namespace"]},{"Key":"probably more","Fragments":["appropriate","appropriate"]},{"Key":"than struct","Fragments":["in","in"]},{"Key":"struct in","Fragments":["this","this"]},{"Key":"I've commented","Fragments":["on"]},{"Key":"commented on","Fragments":["your"]},{"Key":"your latest","Fragments":["iteration"]},{"Key":"Use ++i","Fragments":["instead"]},{"Key":"++i instead","Fragments":["of"]},{"Key":"of i++.","Fragments":["It"]},{"Key":"i++. It","Fragments":["is"]},{"Key":"3. You","Fragments":["needn't"]},{"Key":"You needn't","Fragments":["use"]},{"Key":"needn't use","Fragments":["custom"]},{"Key":"use custom","Fragments":["locale"]},{"Key":"custom locale","Fragments":["as"]},{"Key":"locale as","Fragments":["you"]},{"Key":"you aren't","Fragments":["introducing","wasting","using","changing"]},{"Key":"aren't introducing","Fragments":["anything"]},{"Key":"introducing anything","Fragments":["new"]},{"Key":"anything new","Fragments":["than"]},{"Key":"new than","Fragments":["what"]},{"Key":"what exists","Fragments":["in"]},{"Key":"issue were","Fragments":["the"]},{"Key":"testcases with","Fragments":["only"]},{"Key":"only numbers","Fragments":["and","that","and","with"]},{"Key":"and numbers","Fragments":["with"]},{"Key":"numbers with","Fragments":["shouting,","a","an"]},{"Key":"with shouting,","Fragments":["otherwise"]},{"Key":"shouting, otherwise","Fragments":["the"]},{"Key":"otherwise the","Fragments":["solution"]},{"Key":"solution could","Fragments":["have"]},{"Key":" Had","Fragments":["an","I"]},{"Key":"Had an","Fragments":["Idea"]},{"Key":"an Idea","Fragments":["to"]},{"Key":"Idea to","Fragments":["put"]},{"Key":"answers into","Fragments":["the"]},{"Key":"header. Usally","Fragments":["it"]},{"Key":"Usally it","Fragments":["wouldn't"]},{"Key":"wouldn't work","Fragments":["but"]},{"Key":"with constexpr","Fragments":["and"]},{"Key":"constexpr and","Fragments":["cpp11"]},{"Key":"and cpp11","Fragments":["it"]},{"Key":"cpp11 it","Fragments":["is"]},{"Key":"Ok figured","Fragments":["out"]},{"Key":"figured out","Fragments":["a","a"]},{"Key":"lot shorter","Fragments":["solution,"]},{"Key":"shorter solution,","Fragments":["than"]},{"Key":"solution, than","Fragments":["the"]},{"Key":"Just fixed","Fragments":["the"]},{"Key":" Really","Fragments":["short","great","small","nice"]},{"Key":"Really short","Fragments":["solution,"]},{"Key":"short solution,","Fragments":["i"]},{"Key":"solution, i","Fragments":["like"]},{"Key":"like it,","Fragments":["but","or"]},{"Key":"auto for","Fragments":["the"]},{"Key":"of `using`,","Fragments":["try"]},{"Key":"`using`, try","Fragments":["`using"]},{"Key":"try `using","Fragments":["namespace`."]},{"Key":"`using namespace`.","Fragments":["This"]},{"Key":"namespace`. This","Fragments":["will"]},{"Key":"code nicer","Fragments":["to"]},{"Key":" I.E.,","Fragments":["instead"]},{"Key":"I.E., instead","Fragments":["of"]},{"Key":"Use references","Fragments":["and"]},{"Key":"references and","Fragments":["constants","pointers","pass"]},{"Key":"and constants","Fragments":["to"]},{"Key":"avoid inefficiency","Fragments":["and"]},{"Key":"inefficiency and","Fragments":["accidental"]},{"Key":"and accidental","Fragments":["parameter"]},{"Key":"accidental parameter","Fragments":["modification."]},{"Key":"I simplified","Fragments":["```can_attack()```","the","this"]},{"Key":"simplified ```can_attack()```","Fragments":["function,"]},{"Key":"```can_attack()``` function,","Fragments":["though"]},{"Key":"function, though","Fragments":["now"]},{"Key":"though now","Fragments":["it"]},{"Key":"now it","Fragments":["should","does"]},{"Key":"pass some","Fragments":["additional"]},{"Key":"some additional","Fragments":["tests"]},{"Key":"A somewhat","Fragments":["silly"]},{"Key":"somewhat silly","Fragments":["recursive"]},{"Key":"silly recursive","Fragments":["version."]},{"Key":"- Repeated","Fragments":["calling"]},{"Key":"Repeated calling","Fragments":["of"]},{"Key":"calling of","Fragments":["`s.substr(1)`"]},{"Key":"of `s.substr(1)`","Fragments":["is"]},{"Key":"`s.substr(1)` is","Fragments":["probably"]},{"Key":"probably an","Fragments":["inefficient","```isUpper```"]},{"Key":"inefficient way","Fragments":["of"]},{"Key":"of getting","Fragments":["the","a","the"]},{"Key":"the `tail`","Fragments":["of"]},{"Key":"`tail` of","Fragments":["the"]},{"Key":"- `compute(s1,","Fragments":["s1,"]},{"Key":"`compute(s1, s1,","Fragments":["acc)`"]},{"Key":"s1, acc)`","Fragments":["should"]},{"Key":"acc)` should","Fragments":["be"]},{"Key":"private in","Fragments":["practice."]},{"Key":"in practice.","Fragments":["This","I"]},{"Key":"practice. This","Fragments":["suggests"]},{"Key":"This suggests","Fragments":["making"]},{"Key":"suggests making","Fragments":["a"]},{"Key":"a `hamming`","Fragments":["class"]},{"Key":"`hamming` class","Fragments":["with"]},{"Key":"with (static)","Fragments":["public"]},{"Key":"(static) public","Fragments":["and"]},{"Key":"and private","Fragments":["versions"]},{"Key":"private versions","Fragments":["of"]},{"Key":"\u003e No","Fragments":["real"]},{"Key":"using `auto`","Fragments":["as","for"]},{"Key":"`auto` as","Fragments":["a"]},{"Key":"type either.","Fragments":["I"]},{"Key":"the modern","Fragments":["C++11","C++"]},{"Key":"modern C++11","Fragments":["style"]},{"Key":"C++11 style","Fragments":["because"]},{"Key":"style because","Fragments":["it"]},{"Key":"readable for","Fragments":["me.","generating"]},{"Key":" std::vector\u003cstd::unique_ptr\u003csome_type_of_mine_t\u003e\u003e::const_iterator","Fragments":["cbegin()"]},{"Key":"std::vector\u003cstd::unique_ptr\u003csome_type_of_mine_t\u003e\u003e::const_iterator cbegin()","Fragments":["const;"]},{"Key":"auto cbegin()","Fragments":["const"]},{"Key":"cbegin() const","Fragments":["-\u003e"]},{"Key":"const -\u003e","Fragments":["std::vector\u003cstd::unique_ptr\u003csome_type_of_mine_t\u003e\u003e::const_iterator;"]},{"Key":"my `bob::hey()`","Fragments":["functions"]},{"Key":"`bob::hey()` functions","Fragments":["return"]},{"Key":"functions return","Fragments":["the"]},{"Key":"same type,","Fragments":["it"]},{"Key":"it does't","Fragments":["matter"]},{"Key":"does't matter","Fragments":["if"]},{"Key":"matter if","Fragments":["I"]},{"Key":"use `auto`","Fragments":["or"]},{"Key":"`auto` or","Fragments":["don't."]},{"Key":"or don't.","Fragments":["But"]},{"Key":"don't. But","Fragments":["when"]},{"Key":"use different","Fragments":["types"]},{"Key":"types in","Fragments":["return,","the","bigger"]},{"Key":"in return,","Fragments":["the"]},{"Key":"return, the","Fragments":["`auto`"]},{"Key":"the `auto`","Fragments":["keyword","keyword","syntax,"]},{"Key":"`auto` keyword","Fragments":["helps","makes"]},{"Key":"keyword helps","Fragments":["me"]},{"Key":"helps me","Fragments":["to","to"]},{"Key":"to align","Fragments":["the"]},{"Key":"align the","Fragments":["function"]},{"Key":"\u003e A","Fragments":["namespace"]},{"Key":"There's absolutely","Fragments":["no"]},{"Key":"absolutely no","Fragments":["difference","concern."]},{"Key":"between `struct`","Fragments":["and"]},{"Key":"`struct` and","Fragments":["`namespace`"]},{"Key":"and `namespace`","Fragments":["in"]},{"Key":"`namespace` in","Fragments":["this"]},{"Key":"me. I've","Fragments":["used"]},{"Key":"the `struct`","Fragments":["just"]},{"Key":"`struct` just","Fragments":["because"]},{"Key":"code two","Fragments":["lines"]},{"Key":"two lines","Fragments":["shorter.","could"]},{"Key":"to argue","Fragments":["about","with"]},{"Key":"`auto` for","Fragments":["the"]},{"Key":"function definitions.","Fragments":["I"]},{"Key":"definitions. I","Fragments":["prefer"]},{"Key":"C++ style.","Fragments":["I","An"]},{"Key":"style. I","Fragments":["believe"]},{"Key":"believe the","Fragments":["`auto`","shouting"]},{"Key":"keyword makes","Fragments":["code"]},{"Key":"and since","Fragments":["the","I","I'm","you"]},{"Key":"same style","Fragments":["is"]},{"Key":"lambda functions,","Fragments":["it"]},{"Key":" `std::map\u003c...\u003e`","Fragments":["replaced"]},{"Key":"`std::map\u003c...\u003e` replaced","Fragments":["with"]},{"Key":"Interesting, didn't","Fragments":["know"]},{"Key":"know `map\u003c\u003e`","Fragments":["had"]},{"Key":"`map\u003c\u003e` had","Fragments":["a"]},{"Key":"a guaranteed","Fragments":["iterator","order"]},{"Key":"guaranteed iterator","Fragments":["order."]},{"Key":"iterator order.","Fragments":["I"]},{"Key":"order. I","Fragments":["suppose"]},{"Key":"suppose that","Fragments":["makes"]},{"Key":"sense since","Fragments":["it'd"]},{"Key":"since it'd","Fragments":["want"]},{"Key":"it'd want","Fragments":["the"]},{"Key":"elements to","Fragments":["be"]},{"Key":"known order","Fragments":["for"]},{"Key":"order for","Fragments":["key"]},{"Key":"for key","Fragments":["searches."]},{"Key":"line 42?","Fragments":["If"]},{"Key":"42? If","Fragments":["the"]},{"Key":"iterator points","Fragments":["to"]},{"Key":"points to","Fragments":["end(),","the","start"]},{"Key":"to end(),","Fragments":["insert()"]},{"Key":"end(), insert()","Fragments":["will"]},{"Key":"insert() will","Fragments":["do"]},{"Key":"Also, grade","Fragments":["can"]},{"Key":"grade can","Fragments":["be"]},{"Key":"simplified if","Fragments":["it"]},{"Key":"bool flags","Fragments":["in"]},{"Key":"flags in","Fragments":["use"]},{"Key":"use here.","Fragments":["Perhaps"]},{"Key":"here. Perhaps","Fragments":["there"]},{"Key":"Perhaps there","Fragments":["is"]},{"Key":"of passing","Fragments":["char","begin","each"]},{"Key":"passing char","Fragments":["as"]},{"Key":"char as","Fragments":["const","an"]},{"Key":"The STL","Fragments":["provides"]},{"Key":"STL provides","Fragments":["an"]},{"Key":"provides an","Fragments":["algorithm"]},{"Key":"line 16-18,","Fragments":["check"]},{"Key":"16-18, check","Fragments":["std::transform()"]},{"Key":"lambda on","Fragments":["line"]},{"Key":"line 40,","Fragments":["just"]},{"Key":"40, just","Fragments":["cast"]},{"Key":"just cast","Fragments":["to"]},{"Key":"correct overload","Fragments":["of"]},{"Key":"overload of","Fragments":["to_rna."]},{"Key":"hope you","Fragments":["don't"]},{"Key":"write production","Fragments":["code"]},{"Key":"This passes","Fragments":["the","the"]},{"Key":"given tests","Fragments":["*most"]},{"Key":"tests *most","Fragments":["of","of"]},{"Key":"*most of","Fragments":["the","the"]},{"Key":"the time*.","Fragments":["But"]},{"Key":"time*. But","Fragments":["relying"]},{"Key":"But relying","Fragments":["on"]},{"Key":"you unique","Fragments":["values"]},{"Key":"unique values","Fragments":["is"]},{"Key":"start unit_number","Fragments":["at"]},{"Key":"unit_number at","Fragments":["100"]},{"Key":"at 100","Fragments":["to"]},{"Key":"100 to","Fragments":["have"]},{"Key":"have always","Fragments":["three-digit","found"]},{"Key":"always three-digit","Fragments":["numbers"]},{"Key":"three-digit numbers","Fragments":["when"]},{"Key":"numbers when","Fragments":["passing"]},{"Key":"passing to","Fragments":["the"]},{"Key":"the ostream","Fragments":["buff."]},{"Key":"ostream buff.","Fragments":["You"]},{"Key":"buff. You","Fragments":["can"]},{"Key":"can achive","Fragments":["the"]},{"Key":"achive the","Fragments":["same"]},{"Key":"same by","Fragments":["using"]},{"Key":"using I/O","Fragments":["manipulators"]},{"Key":"I/O manipulators","Fragments":["std::setfill('0')"]},{"Key":"manipulators std::setfill('0')","Fragments":["and"]},{"Key":"std::setfill('0') and","Fragments":["std::setw(3)."]},{"Key":"the time*,","Fragments":["using"]},{"Key":"time*, using","Fragments":["a"]},{"Key":"a RNG","Fragments":["is"]},{"Key":"RNG is","Fragments":["not"]},{"Key":"not safe","Fragments":["to"]},{"Key":"create unique","Fragments":["values."]},{"Key":"`const \u0026`","Fragments":["all"]},{"Key":"\u0026` all","Fragments":["the"]},{"Key":"the things,","Fragments":["extracted","in"]},{"Key":"things, extracted","Fragments":["key/value"]},{"Key":"extracted key/value","Fragments":["test"]},{"Key":"key/value test","Fragments":["to"]},{"Key":"test to","Fragments":["its","see","benchmark"]},{"Key":"function, removed","Fragments":["`using`"]},{"Key":"removed `using`","Fragments":["from"]},{"Key":"`using` from","Fragments":["header"]},{"Key":"file, moved","Fragments":["boost"]},{"Key":"moved boost","Fragments":["include"]},{"Key":"include to","Fragments":["cpp"]},{"Key":"file, added","Fragments":["another"]},{"Key":"added another","Fragments":["typedef"]},{"Key":"another typedef","Fragments":["`stringlist`"]},{"Key":"typedef `stringlist`","Fragments":["for"]},{"Key":"`stringlist` for","Fragments":["`std::vector\u003cstd::string\u003e`."]},{"Key":"Not recommending","Fragments":["a"]},{"Key":"recommending a","Fragments":["change"]},{"Key":"a change","Fragments":["here","to"]},{"Key":"change here","Fragments":["-"]},{"Key":"with where","Fragments":["it"]},{"Key":"it is.","Fragments":["I","With","I"]},{"Key":"is. I","Fragments":["just","think"]},{"Key":"out you","Fragments":["could","can"]},{"Key":"could theoretically","Fragments":["use"]},{"Key":"theoretically use","Fragments":["a"]},{"Key":"a \"better\"","Fragments":["algorithm"]},{"Key":"\"better\" algorithm","Fragments":["in"]},{"Key":"algorithm in","Fragments":["the","a","general,"]},{"Key":"inside charmaps_match","Fragments":["..."]},{"Key":"charmaps_match ...","Fragments":["which"]},{"Key":"... which","Fragments":["isn't"]},{"Key":"particularly relevant","Fragments":["since"]},{"Key":"relevant since","Fragments":["these"]},{"Key":"these anagrams","Fragments":["aren't"]},{"Key":"anagrams aren't","Fragments":["likely"]},{"Key":"aren't likely","Fragments":["to"]},{"Key":"be millions","Fragments":["of"]},{"Key":"millions of","Fragments":["characters"]},{"Key":"Anyhow, right","Fragments":["now"]},{"Key":"have O(","Fragments":["N","max(N,"]},{"Key":"O( N","Fragments":["*"]},{"Key":"N *","Fragments":["log(M)"]},{"Key":"* log(M)","Fragments":["),"]},{"Key":"log(M) ),","Fragments":["since"]},{"Key":"), since","Fragments":["the"]},{"Key":"find inside","Fragments":["map_has_key_and_value"]},{"Key":"inside map_has_key_and_value","Fragments":["is"]},{"Key":"map_has_key_and_value is","Fragments":["logarithmic."]},{"Key":"is logarithmic.","Fragments":["If"]},{"Key":"logarithmic. If","Fragments":["you"]},{"Key":"you maintained","Fragments":["two"]},{"Key":"maintained two","Fragments":["iterators"]},{"Key":"two iterators","Fragments":["and"]},{"Key":"and looped","Fragments":["over"]},{"Key":"looped over","Fragments":["them"]},{"Key":"them together","Fragments":["(incrementing"]},{"Key":"together (incrementing","Fragments":["the"]},{"Key":"(incrementing the","Fragments":["lesser"]},{"Key":"the lesser","Fragments":["of","of"]},{"Key":"lesser of","Fragments":["the","two"]},{"Key":"two each","Fragments":["time"]},{"Key":"or both","Fragments":["if"]},{"Key":"were tied)","Fragments":["you'd"]},{"Key":"tied) you'd","Fragments":["have"]},{"Key":"O( max(N,","Fragments":["M)"]},{"Key":"max(N, M)","Fragments":[")"]},{"Key":"M) )","Fragments":["by"]},{"Key":") by","Fragments":["which"]},{"Key":"by which","Fragments":["I"]},{"Key":"I mean","Fragments":["it's","is"]},{"Key":"mean it's","Fragments":["linear"]},{"Key":"it's linear","Fragments":["in"]},{"Key":"linear in","Fragments":["the"]},{"Key":"of left","Fragments":["or"]},{"Key":"left or","Fragments":["right","right"]},{"Key":"or right","Fragments":["whichever","pointer,"]},{"Key":"right whichever","Fragments":["is"]},{"Key":"whichever is","Fragments":["larger."]},{"Key":"is larger.","Fragments":["The"]},{"Key":"larger. The","Fragments":["\"optimization\""]},{"Key":"The \"optimization\"","Fragments":["(not"]},{"Key":"\"optimization\" (not","Fragments":["sure"]},{"Key":"(not sure","Fragments":["if"]},{"Key":"faster on","Fragments":["a"]},{"Key":"a realistic","Fragments":["data"]},{"Key":"realistic data","Fragments":["set)"]},{"Key":"data set)","Fragments":["really"]},{"Key":"set) really","Fragments":["boils"]},{"Key":"really boils","Fragments":["down"]},{"Key":"not losing","Fragments":["your"]},{"Key":"your place","Fragments":["inside"]},{"Key":"place inside","Fragments":["\"right\""]},{"Key":"inside \"right\"","Fragments":["as"]},{"Key":"\"right\" as","Fragments":["you"]},{"Key":"you scan","Fragments":["through."]},{"Key":" map","Fragments":["(which"]},{"Key":"a RB","Fragments":["tree)"]},{"Key":"RB tree)","Fragments":["does,"]},{"Key":"tree) does,","Fragments":["and"]},{"Key":"does, and","Fragments":["you"]},{"Key":"can change","Fragments":["it","your","it","that"]},{"Key":"different order","Fragments":["if"]},{"Key":"order if","Fragments":["you"]},{"Key":"you like","Fragments":["(the","and","the"]},{"Key":"like (the","Fragments":["third"]},{"Key":"(the third","Fragments":["template"]},{"Key":"third template","Fragments":["parameter)"]},{"Key":"template parameter)","Fragments":["but"]},{"Key":"parameter) but","Fragments":["by"]},{"Key":"but by","Fragments":["default"]},{"Key":"by default","Fragments":["it's","and","and"]},{"Key":"default it's","Fragments":["\u003c."]},{"Key":"it's \u003c.","Fragments":["unordered_map"]},{"Key":"\u003c. unordered_map","Fragments":["(a"]},{"Key":"unordered_map (a","Fragments":["hash"]},{"Key":"(a hash","Fragments":["map)"]},{"Key":"hash map)","Fragments":["does"]},{"Key":"map) does","Fragments":["not"]},{"Key":"guaranteed order","Fragments":["to"]},{"Key":"And actually","Fragments":["the"]},{"Key":"I described","Fragments":["is","or"]},{"Key":"described is","Fragments":["more"]},{"Key":"more complicated","Fragments":["than","with","scenarios.","that"]},{"Key":"complicated than","Fragments":["what"]},{"Key":"really want.","Fragments":["You"]},{"Key":"want. You","Fragments":["don't"]},{"Key":"to visit","Fragments":["every"]},{"Key":"visit every","Fragments":["element"]},{"Key":"every element","Fragments":["of","(there's"]},{"Key":"would effectively","Fragments":["be"]},{"Key":"effectively be","Fragments":["their"]},{"Key":"be their","Fragments":["set"]},{"Key":"their set","Fragments":["union,"]},{"Key":"set union,","Fragments":["because"]},{"Key":"union, because","Fragments":["as"]},{"Key":"because as","Fragments":["soon"]},{"Key":"soon as","Fragments":["you","my","you","one"]},{"Key":"you find","Fragments":["a","that","the","that","non-space.","any","yourself"]},{"Key":"a mismatch","Fragments":["you're","is"]},{"Key":"mismatch you're","Fragments":["done."]},{"Key":"you're done.","Fragments":["So"]},{"Key":"done. So","Fragments":["maybe"]},{"Key":"So maybe","Fragments":["it's"]},{"Key":"maybe it's","Fragments":["actually"]},{"Key":"a job","Fragments":["for"]},{"Key":"job for","Fragments":["std::mismatch.","you.)"]},{"Key":"for std::mismatch.","Fragments":["If"]},{"Key":"std::mismatch. If","Fragments":["you"]},{"Key":"have C++14","Fragments":["turned"]},{"Key":"C++14 turned","Fragments":["on"]},{"Key":"turned on","Fragments":["you"]},{"Key":"still need","Fragments":["to","to"]},{"Key":"leave that","Fragments":["size-comparing"]},{"Key":"that size-comparing","Fragments":["if"]},{"Key":"size-comparing if","Fragments":["statement"]},{"Key":"( left.size()","Fragments":["!="]},{"Key":"left.size() !=","Fragments":["right.size()"]},{"Key":"!= right.size()","Fragments":[")"]},{"Key":"right.size() )","Fragments":["return"]},{"Key":"return std::mismatch(left.begin(),","Fragments":["left.end(),"]},{"Key":"std::mismatch(left.begin(), left.end(),","Fragments":["right.begin()).first"]},{"Key":"left.end(), right.begin()).first","Fragments":["=="]},{"Key":"right.begin()).first ==","Fragments":["left.end();"]},{"Key":"Not so","Fragments":["bad,"]},{"Key":"bad, eh?","Fragments":["I"]},{"Key":"eh? I","Fragments":["wonder"]},{"Key":"did something","Fragments":["like","way"]},{"Key":"my version,","Fragments":["because"]},{"Key":"version, because","Fragments":["I"]},{"Key":"the originality","Fragments":["of"]},{"Key":"originality of","Fragments":["your"]},{"Key":"your ```operator","Fragments":["string()```"]},{"Key":"```operator string()```","Fragments":[";)"]},{"Key":" Man,","Fragments":["I"]},{"Key":"Man, I","Fragments":["really"]},{"Key":"to sit","Fragments":["down"]},{"Key":"sit down","Fragments":["and"]},{"Key":"and commit","Fragments":["the"]},{"Key":"commit the","Fragments":["STL"]},{"Key":"STL algorithm","Fragments":["library"]},{"Key":"algorithm library","Fragments":["to"]},{"Key":"Looks good.","Fragments":["A","I","I'm","You","Making"]},{"Key":"1. Why","Fragments":["`unit32_t`?","return","is"]},{"Key":"Why `unit32_t`?","Fragments":["I"]},{"Key":"`unit32_t`? I","Fragments":["get"]},{"Key":"get that","Fragments":["the","from","to"]},{"Key":"difference will","Fragments":["be"]},{"Key":"be non-negative;","Fragments":["but"]},{"Key":"non-negative; but","Fragments":["I'm"]},{"Key":"came down","Fragments":["in"]},{"Key":"this over","Fragments":["`unsigned"]},{"Key":"over `unsigned","Fragments":["int`---which"]},{"Key":"`unsigned int`---which","Fragments":["I"]},{"Key":"int`---which I","Fragments":["_believe_"]},{"Key":"I _believe_","Fragments":["is"]},{"Key":"_believe_ is","Fragments":["more"]},{"Key":"portable and","Fragments":["faster"]},{"Key":"and faster","Fragments":["for","than"]},{"Key":"for increment","Fragments":["ops."]},{"Key":"increment ops.","Fragments":["(Though"]},{"Key":"ops. (Though","Fragments":["I"]},{"Key":"(Though I","Fragments":["may"]},{"Key":"wrong here;","Fragments":["ultimately"]},{"Key":"here; ultimately","Fragments":["just"]},{"Key":"ultimately just","Fragments":["curious"]},{"Key":"your thinking---I","Fragments":["tend"]},{"Key":"thinking---I tend","Fragments":["to"]},{"Key":"of specialized","Fragments":["integer"]},{"Key":"specialized integer","Fragments":["types"]},{"Key":"integer types","Fragments":["as","(char)."]},{"Key":"types as","Fragments":["premature"]},{"Key":"as premature","Fragments":["optimizations)."]},{"Key":"2. What","Fragments":["is"]},{"Key":"is `extern`","Fragments":["for"]},{"Key":"`extern` for","Fragments":["in"]},{"Key":"3. I'd","Fragments":["suggest"]},{"Key":"I'd suggest","Fragments":["putting","to"]},{"Key":"suggest putting","Fragments":["brackets","some"]},{"Key":"putting brackets","Fragments":["around"]},{"Key":"brackets around","Fragments":["`++diff`"]},{"Key":"around `++diff`","Fragments":["in"]},{"Key":"`++diff` in","Fragments":["the"]},{"Key":"the `if`","Fragments":["statement.","statement"]},{"Key":"`if` statement.","Fragments":["If","In"]},{"Key":"statement. If","Fragments":["by"]},{"Key":"If by","Fragments":["some"]},{"Key":"some means","Fragments":["some"]},{"Key":"means some","Fragments":["editor","copying"]},{"Key":"some editor","Fragments":["messes"]},{"Key":"editor messes","Fragments":["up"]},{"Key":"your indentation,","Fragments":["it'll"]},{"Key":"indentation, it'll","Fragments":["be"]},{"Key":"really unclear","Fragments":["whether"]},{"Key":"unclear whether","Fragments":["`++c1_itr`"]},{"Key":"whether `++c1_itr`","Fragments":["happens"]},{"Key":"`++c1_itr` happens","Fragments":["in"]},{"Key":"happens in","Fragments":["or","the"]},{"Key":"in or","Fragments":["outside"]},{"Key":" Whatever","Fragments":["works"]},{"Key":"Whatever works","Fragments":["for"]},{"Key":"learn things","Fragments":["a"]},{"Key":"bit at","Fragments":["a"]},{"Key":"a time.","Fragments":["And","One"]},{"Key":"time. And","Fragments":["if"]},{"Key":"a meaningful","Fragments":["context"]},{"Key":"meaningful context","Fragments":["I'll"]},{"Key":"context I'll","Fragments":["remember"]},{"Key":"I'll remember","Fragments":["it"]},{"Key":"remember it","Fragments":["better."]},{"Key":"it better.","Fragments":["Like"]},{"Key":"better. Like","Fragments":["I"]},{"Key":"couldn't tell","Fragments":["you"]},{"Key":"you what","Fragments":["the","I"]},{"Key":"of stable_partition","Fragments":["is"]},{"Key":"stable_partition is","Fragments":["because"]},{"Key":"have *never*","Fragments":["used"]},{"Key":"*never* used","Fragments":["it."]},{"Key":"used it.","Fragments":["Not"]},{"Key":"it. Not","Fragments":["once."]},{"Key":"Not once.","Fragments":["I"]},{"Key":"once. I","Fragments":["know","think","don't"]},{"Key":"know a","Fragments":["guy","lot"]},{"Key":"a guy","Fragments":["who's"]},{"Key":"guy who's","Fragments":["a"]},{"Key":"who's a","Fragments":["big"]},{"Key":"big fan,","Fragments":["but"]},{"Key":"fan, but","Fragments":["it"]},{"Key":"just hasn't","Fragments":["come"]},{"Key":"hasn't come","Fragments":["up"]},{"Key":"not when","Fragments":["I've"]},{"Key":"when I've","Fragments":["noticed."]},{"Key":"first stack","Fragments":["overflow"]},{"Key":"overflow post,","Fragments":["`using"]},{"Key":"post, `using","Fragments":["a::b;`"]},{"Key":"`using a::b;`","Fragments":["is"]},{"Key":"a::b;` is","Fragments":["the"]},{"Key":"do it,","Fragments":["since"]},{"Key":"it, since","Fragments":["that"]},{"Key":"using declaration","Fragments":["and"]},{"Key":"the declaritive.","Fragments":["The"]},{"Key":"declaritive. The","Fragments":["second"]},{"Key":"second one","Fragments":["says"]},{"Key":"one says","Fragments":["to"]},{"Key":"says to","Fragments":["possibly","submit"]},{"Key":"to possibly","Fragments":["scope"]},{"Key":"possibly scope","Fragments":["it"]},{"Key":"it out,","Fragments":["so","it's"]},{"Key":"out, so","Fragments":["`map`"]},{"Key":"so `map`","Fragments":["should"]},{"Key":"`map` should","Fragments":["have"]},{"Key":"been left","Fragments":["off"]},{"Key":"left off","Fragments":["since"]},{"Key":"off since","Fragments":["it's"]},{"Key":"used twice,","Fragments":["but","I"]},{"Key":"twice, but","Fragments":["string"]},{"Key":"but string","Fragments":["is"]},{"Key":"much everywhere","Fragments":["so"]},{"Key":"everywhere so","Fragments":["it"]},{"Key":"1. Move","Fragments":["`transform(...);"]},{"Key":"Move `transform(...);","Fragments":["sort(...);`"]},{"Key":"`transform(...); sort(...);`","Fragments":["into"]},{"Key":"sort(...);` into","Fragments":["a"]},{"Key":"2. Think","Fragments":["about"]},{"Key":"Think about","Fragments":["using","how","how","using"]},{"Key":"using `const","Fragments":["vector\u003cstring\u003e\u0026`","char*`","unsigned"]},{"Key":"`const vector\u003cstring\u003e\u0026`","Fragments":["instead"]},{"Key":"vector\u003cstring\u003e\u0026` instead","Fragments":["of"]},{"Key":"of `vector\u003cstring\u003e`.","Fragments":["(i.e."]},{"Key":"`vector\u003cstring\u003e`. (i.e.","Fragments":["use"]},{"Key":"(i.e. use","Fragments":["const"]},{"Key":"const reference).","Fragments":["Or"]},{"Key":"reference). Or","Fragments":["use"]},{"Key":"Or use","Fragments":["the"]},{"Key":"the `remove-erase`","Fragments":["idiom."]},{"Key":"This version","Fragments":["pushes","would","is","only","might"]},{"Key":"version pushes","Fragments":["nearly"]},{"Key":"pushes nearly","Fragments":["all"]},{"Key":"nearly all","Fragments":["the"]},{"Key":"work cost","Fragments":["to"]},{"Key":"the `add`","Fragments":["method."]},{"Key":"`add` method.","Fragments":["We"]},{"Key":"method. We","Fragments":["have"]},{"Key":"fairly slow","Fragments":["sorted"]},{"Key":"slow sorted","Fragments":["insert"]},{"Key":"sorted insert","Fragments":["into"]},{"Key":"insert into","Fragments":["the"]},{"Key":"names vector.","Fragments":["But"]},{"Key":"vector. But","Fragments":["the"]},{"Key":"getters just","Fragments":["do"]},{"Key":"key lookup.","Fragments":["So,"]},{"Key":"lookup. So,","Fragments":["here"]},{"Key":"So, here","Fragments":["I'm"]},{"Key":"here I'm","Fragments":["assuming"]},{"Key":"I'm assuming","Fragments":["that","it's"]},{"Key":"that looking","Fragments":["up"]},{"Key":"up grades/rosters","Fragments":["is"]},{"Key":"grades/rosters is","Fragments":["going"]},{"Key":"done more","Fragments":["often","elegantly"]},{"Key":"than adding","Fragments":["new"]},{"Key":"adding new","Fragments":["students."]},{"Key":"version used","Fragments":["a"]},{"Key":"a `multiset`","Fragments":["to"]},{"Key":"`multiset` to","Fragments":["make"]},{"Key":"the sorted-insert","Fragments":["fast,"]},{"Key":"sorted-insert fast,","Fragments":["but"]},{"Key":"fast, but","Fragments":["then"]},{"Key":"then had","Fragments":["to"]},{"Key":"getters were","Fragments":["called."]},{"Key":"use `std::string`","Fragments":["instead"]},{"Key":"`std::string` instead","Fragments":["of","of"]},{"Key":"`const std::string\u0026`","Fragments":["as","and","with","or","with","for"]},{"Key":"std::string\u0026` as","Fragments":["an"]},{"Key":"an argument","Fragments":["of"]},{"Key":"function `tolower()`.","Fragments":["In"]},{"Key":"`tolower()`. In","Fragments":["this"]},{"Key":"the `s`","Fragments":["variable.","string"]},{"Key":"`s` variable.","Fragments":["And"]},{"Key":"variable. And","Fragments":["in"]},{"Key":"of calling","Fragments":["the","boost::tokenizer\u003c\u003e","append"]},{"Key":"char*` or","Fragments":["`char*`"]},{"Key":"or `char*`","Fragments":["parameter,"]},{"Key":"`char*` parameter,","Fragments":["it"]},{"Key":"parameter, it","Fragments":["would"]},{"Key":"make less","Fragments":["copies"]},{"Key":"less copies","Fragments":["of"]},{"Key":"2. It","Fragments":["seems"]},{"Key":"3. In","Fragments":["*line","the","function"]},{"Key":"In *line","Fragments":["56*"]},{"Key":"*line 56*","Fragments":["you"]},{"Key":"56* you","Fragments":["convert"]},{"Key":"`s` string","Fragments":["to"]},{"Key":"then in","Fragments":["*line","this"]},{"Key":"in *line","Fragments":["60*","15*.","20*."]},{"Key":"*line 60*","Fragments":["you"]},{"Key":"60* you","Fragments":["repeat"]},{"Key":"you repeat","Fragments":["this"]},{"Key":"repeat this","Fragments":["operation."]},{"Key":"4. You","Fragments":["have"]},{"Key":"a `copy-paste`","Fragments":["anti-pattern"]},{"Key":"`copy-paste` anti-pattern","Fragments":["in"]},{"Key":"anti-pattern in","Fragments":["your"]},{"Key":"You implement","Fragments":["an"]},{"Key":"algorithm of","Fragments":["conversion"]},{"Key":"to char_map","Fragments":["twice."]},{"Key":"5. Think","Fragments":["how"]},{"Key":"Think how","Fragments":["can"]},{"Key":"the `matches()`","Fragments":["function"]},{"Key":"`matches()` function","Fragments":["with"]},{"Key":"a `std::copy_if()`","Fragments":["function."]},{"Key":"#1 recommendation","Fragments":["here"]},{"Key":"recommendation here","Fragments":["is"]},{"Key":"a convention","Fragments":["that"]},{"Key":"convention that","Fragments":["makes"]},{"Key":"makes members","Fragments":["look"]},{"Key":"members look","Fragments":["different"]},{"Key":"look different","Fragments":["somehow"]},{"Key":"different somehow","Fragments":["from"]},{"Key":"somehow from","Fragments":["parameters."]},{"Key":"from parameters.","Fragments":["For"]},{"Key":"parameters. For","Fragments":["example"]},{"Key":"constructor word(word)","Fragments":["-"]},{"Key":"word(word) -","Fragments":["the"]},{"Key":"compiler understands","Fragments":["what"]},{"Key":"understands what","Fragments":["you"]},{"Key":"mean and","Fragments":["it"]},{"Key":"it works,","Fragments":["but"]},{"Key":"really all","Fragments":["that"]},{"Key":"that clear.","Fragments":["I"]},{"Key":"the convention","Fragments":["of","there"]},{"Key":"of members","Fragments":["end"]},{"Key":"members end","Fragments":["in"]},{"Key":"end in","Fragments":["_","\"!\"","whitespace."]},{"Key":"in _","Fragments":["so"]},{"Key":"_ so","Fragments":["it"]},{"Key":" :","Fragments":["word_(boost::to_upper_copy(word))","strand(inputStrand)"]},{"Key":"preference thing.","Fragments":["A"]},{"Key":"thing. A","Fragments":["lot"]},{"Key":"who sort-of","Fragments":["recall"]},{"Key":"sort-of recall","Fragments":["Hungarian"]},{"Key":"recall Hungarian","Fragments":["notation"]},{"Key":"notation would","Fragments":["recommend"]},{"Key":" Cleaned","Fragments":["up","the"]},{"Key":"Cleaned up","Fragments":["the"]},{"Key":"the `insert_alphabetically`","Fragments":["by"]},{"Key":"`insert_alphabetically` by","Fragments":["replacing"]},{"Key":"by replacing","Fragments":["the","your"]},{"Key":"the `find_if`","Fragments":["with"]},{"Key":"no benefit.","Fragments":["Nothing"]},{"Key":"benefit. Nothing","Fragments":["gained"]},{"Key":"Nothing gained","Fragments":["or"]},{"Key":"gained or","Fragments":["lost"]},{"Key":"or lost","Fragments":["by"]},{"Key":"lost by","Fragments":["trying"]},{"Key":"by trying","Fragments":["to"]},{"Key":"pass as","Fragments":["ref.","fast","argument"]},{"Key":"as ref.","Fragments":["It's"]},{"Key":"ref. It's","Fragments":["just"]},{"Key":"a benign","Fragments":["habit."]},{"Key":"you moved","Fragments":["your"]},{"Key":"moved your","Fragments":["using"]},{"Key":"your using","Fragments":["inside","directive"]},{"Key":"using inside","Fragments":["the"]},{"Key":"better inside","Fragments":["the"]},{"Key":"class you'd","Fragments":["minimize"]},{"Key":"you'd minimize","Fragments":["the"]},{"Key":"minimize the","Fragments":["impact","amount","amount"]},{"Key":"the impact","Fragments":["they"]},{"Key":"impact they","Fragments":["have"]},{"Key":"have on","Fragments":["code"]},{"Key":"on code","Fragments":["that","generation"]},{"Key":"uses this","Fragments":["header."]},{"Key":"you never","Fragments":["use","have","use","know","initialize"]},{"Key":"variable word","Fragments":["why"]},{"Key":"word why","Fragments":["have"]},{"Key":"why have","Fragments":["it?"]},{"Key":" word_letter_frequencies","Fragments":["could"]},{"Key":"word_letter_frequencies could","Fragments":["be"]},{"Key":"variable. That","Fragments":["way"]},{"Key":"way if","Fragments":["someone"]},{"Key":"someone calls","Fragments":["matches","me"]},{"Key":"calls matches","Fragments":["twice"]},{"Key":"matches twice","Fragments":["it'll"]},{"Key":"twice it'll","Fragments":["simply"]},{"Key":"it'll simply","Fragments":["be"]},{"Key":"be reused.","Fragments":["Generally"]},{"Key":"reused. Generally","Fragments":["the"]},{"Key":"Generally the","Fragments":["constructor"]},{"Key":"called at","Fragments":["least"]},{"Key":"not more","Fragments":["often","efficient,"]},{"Key":"a map\u003cchar,int\u003e","Fragments":["you"]},{"Key":"map\u003cchar,int\u003e you","Fragments":["could"]},{"Key":"using std::array\u003cint,26\u003e","Fragments":["or"]},{"Key":"std::array\u003cint,26\u003e or","Fragments":["if"]},{"Key":"doing subtraction","Fragments":["(ch-'a')"]},{"Key":"subtraction (ch-'a')","Fragments":["all"]},{"Key":"(ch-'a') all","Fragments":["the"]},{"Key":"time std::array\u003cint,'z'+1\u003e","Fragments":["(though"]},{"Key":"std::array\u003cint,'z'+1\u003e (though","Fragments":["uppercase"]},{"Key":"(though uppercase","Fragments":["would"]},{"Key":"uppercase would","Fragments":["be"]},{"Key":" toLowerInPlace","Fragments":["could"]},{"Key":"toLowerInPlace could","Fragments":["be"]},{"Key":"by boost::to_lower","Fragments":["(but"]},{"Key":"boost::to_lower (but","Fragments":["it"]},{"Key":"(but it","Fragments":["would"]},{"Key":"a preceeding","Fragments":["statement"]},{"Key":"preceeding statement","Fragments":["as"]},{"Key":"statement as","Fragments":["to_lower"]},{"Key":"as to_lower","Fragments":["returns"]},{"Key":"to_lower returns","Fragments":["void)."]},{"Key":"bit wary","Fragments":["when","when"]},{"Key":"wary when","Fragments":["people","people"]},{"Key":"use std::move","Fragments":["too","too"]},{"Key":"std::move too","Fragments":["often.","often."]},{"Key":"too often.","Fragments":["Your"]},{"Key":"often. Your","Fragments":["uses"]},{"Key":"Your uses","Fragments":["seem"]},{"Key":"uses seem","Fragments":["safe"]},{"Key":"seem safe","Fragments":["here"]},{"Key":"safe here","Fragments":["to"]},{"Key":"me (I've","Fragments":["definitely"]},{"Key":"(I've definitely","Fragments":["seen"]},{"Key":"definitely seen","Fragments":["unsafe"]},{"Key":"seen unsafe","Fragments":["uses"]},{"Key":"unsafe uses","Fragments":["here"]},{"Key":"uses here","Fragments":["on"]},{"Key":"here on","Fragments":["exercism),"]},{"Key":"on exercism),","Fragments":["but"]},{"Key":"exercism), but","Fragments":["at"]},{"Key":"least some","Fragments":["of","of"]},{"Key":"them are","Fragments":["probably","not"]},{"Key":"probably unnecessary","Fragments":["(the"]},{"Key":"unnecessary (the","Fragments":["compiler"]},{"Key":"(the compiler","Fragments":["will"]},{"Key":"will decide","Fragments":["to"]},{"Key":"move stuff","Fragments":["anyhow"]},{"Key":"stuff anyhow","Fragments":["in"]},{"Key":"anyhow in","Fragments":["at"]},{"Key":"in at","Fragments":["least","the"]},{"Key":"these cases).","Fragments":["Have"]},{"Key":"cases). Have","Fragments":["you"]},{"Key":"tried removing","Fragments":["some","some"]},{"Key":"removing some","Fragments":["and","and"]},{"Key":"some and","Fragments":["comparing","comparing"]},{"Key":"the optimized","Fragments":["assembly?","assembly?","build."]},{"Key":"know there's","Fragments":["been","no"]},{"Key":"there's been","Fragments":["some"]},{"Key":"been some","Fragments":["debate"]},{"Key":"some debate","Fragments":["about"]},{"Key":"debate about","Fragments":["whether"]},{"Key":"whether reference","Fragments":["parameters"]},{"Key":"parameters are","Fragments":["helpful"]},{"Key":"are helpful","Fragments":["or"]},{"Key":"helpful or","Fragments":["hurtful"]},{"Key":"or hurtful","Fragments":["in"]},{"Key":"hurtful in","Fragments":["some"]},{"Key":"some situations","Fragments":["(because"]},{"Key":"situations (because","Fragments":["of"]},{"Key":"(because of","Fragments":["optimizations"]},{"Key":"of optimizations","Fragments":["like",":)"]},{"Key":"like RVO","Fragments":["and"]},{"Key":"RVO and","Fragments":["copy"]},{"Key":"copy elision),","Fragments":["but"]},{"Key":"elision), but","Fragments":["I"]},{"Key":"to all","Fragments":["of","your","of","caps","existing"]},{"Key":"the situations","Fragments":["you've"]},{"Key":"situations you've","Fragments":["avoided"]},{"Key":"you've avoided","Fragments":["them","`using"]},{"Key":"avoided them","Fragments":["here."]},{"Key":"them here.","Fragments":["For"]},{"Key":"here. For","Fragments":["example,"]},{"Key":"example, do","Fragments":["you","you"]},{"Key":"have reason","Fragments":["to","to"]},{"Key":"believe anagram::anagram","Fragments":["is","is"]},{"Key":"anagram::anagram is","Fragments":["faster","faster"]},{"Key":"is faster","Fragments":["with","with","by","and"]},{"Key":"faster with","Fragments":["copy-then-move","copy-then-move"]},{"Key":"with copy-then-move","Fragments":["than","than"]},{"Key":"copy-then-move than","Fragments":["it","it"]},{"Key":"constructor both","Fragments":["took","took"]},{"Key":"both took","Fragments":["const\u0026","const\u0026"]},{"Key":"took const\u0026","Fragments":["arguments","arguments"]},{"Key":"const\u0026 arguments","Fragments":["(and","(and"]},{"Key":"arguments (and","Fragments":["presumably","presumably"]},{"Key":"(and presumably","Fragments":["to_lower","to_lower"]},{"Key":"presumably to_lower","Fragments":["was","was"]},{"Key":"to_lower was","Fragments":["called","called"]},{"Key":"on word_","Fragments":["prior","prior"]},{"Key":"word_ prior","Fragments":["to","to"]},{"Key":"Hi --","Fragments":["this"]},{"Key":"-- this","Fragments":["is"]},{"Key":"very concise","Fragments":["and"]},{"Key":"concise and","Fragments":["clear.","well-composed.","clean."]},{"Key":"clear. A","Fragments":["couple"]},{"Key":"iterator work","Fragments":["in"]},{"Key":"in `endswith`","Fragments":["can"]},{"Key":"`endswith` can","Fragments":["be"]},{"Key":"like `return","Fragments":["s.back()"]},{"Key":"`return s.back()","Fragments":["=="]},{"Key":"s.back() ==","Fragments":["c`"]},{"Key":"do go","Fragments":["with"]},{"Key":"go with","Fragments":["the","remove-erase","the","standard","one","option"]},{"Key":"iterator, you","Fragments":["can"]},{"Key":"can tighten","Fragments":["that"]},{"Key":"tighten that","Fragments":["function"]},{"Key":"function up","Fragments":["a"]},{"Key":" ```auto","Fragments":["it"]},{"Key":"```auto it","Fragments":["="]},{"Key":"= s.cend();","Fragments":["//"]},{"Key":"s.cend(); //","Fragments":["cend"]},{"Key":"// cend","Fragments":["is"]},{"Key":"cend is","Fragments":["the"]},{"Key":"return (*(it","Fragments":["-"]},{"Key":"(*(it -","Fragments":["1)"]},{"Key":"1) ==","Fragments":["c);","'?'"]},{"Key":"string\u0026` to","Fragments":["avoid"]},{"Key":"avoid unneeded","Fragments":["copies."]},{"Key":"STL algos","Fragments":["like"]},{"Key":"algos like","Fragments":["`transform`,"]},{"Key":"like `transform`,","Fragments":["but"]},{"Key":"already using","Fragments":["boost,","a","`toupper()`"]},{"Key":"boost, why","Fragments":["not"]},{"Key":"its `to_upper`","Fragments":["function?"]},{"Key":"replace `trim_left`","Fragments":["and"]},{"Key":"`trim_left` and","Fragments":["`trim_right`"]},{"Key":"and `trim_right`","Fragments":["with"]},{"Key":"`trim_right` with","Fragments":["just"]},{"Key":"6. Most","Fragments":["importantly,"]},{"Key":"Most importantly,","Fragments":["I"]},{"Key":"importantly, I","Fragments":["don't"]},{"Key":"think `upp(s)`","Fragments":["is"]},{"Key":"`upp(s)` is","Fragments":["sufficient"]},{"Key":"is sufficient","Fragments":["to"]},{"Key":"sufficient to","Fragments":["pass"]},{"Key":"tests. Did","Fragments":["you","you"]},{"Key":"pass all","Fragments":["the","tests","the","the","the","tests","tests?"]},{"Key":"this exercise?","Fragments":["Or"]},{"Key":"exercise? Or","Fragments":["just"]},{"Key":"Or just","Fragments":["the"]},{"Key":"first one?","Fragments":["(You"]},{"Key":"one? (You","Fragments":["have"]},{"Key":"(You have","Fragments":["to"]},{"Key":"to comment","Fragments":["out","on"]},{"Key":"comment out","Fragments":["some"]},{"Key":"out some","Fragments":["lines"]},{"Key":"some lines","Fragments":["in"]},{"Key":"file to","Fragments":["run","include","even","make","the"]},{"Key":"run all","Fragments":["the"]},{"Key":" 7.","Fragments":["Remember"]},{"Key":"7. Remember","Fragments":["to"]},{"Key":"Remember to","Fragments":["delete","nitpick"]},{"Key":"delete your","Fragments":["commented"]},{"Key":"your commented","Fragments":["scratch"]},{"Key":"commented scratch","Fragments":["code"]},{"Key":"scratch code","Fragments":["at"]},{"Key":"code at","Fragments":["the","other","all."]},{"Key":"the bottom;","Fragments":["and"]},{"Key":"bottom; and","Fragments":["you"]},{"Key":"the `iostream`","Fragments":["import"]},{"Key":"`iostream` import","Fragments":["too."]},{"Key":" 8.","Fragments":["You"]},{"Key":"8. You","Fragments":["can"]},{"Key":"submit bob.cpp","Fragments":["bob.h`."]},{"Key":"If \"using","Fragments":["namespace"]},{"Key":"namespace std;\"","Fragments":["appears","somewhere","That"]},{"Key":"std;\" appears","Fragments":["in"]},{"Key":"appears in","Fragments":["a","the","the","the","the"]},{"Key":"header, which","Fragments":["I","can"]},{"Key":"wouldn't do","Fragments":["anyhow,","it..."]},{"Key":"do anyhow,","Fragments":["it"]},{"Key":"anyhow, it","Fragments":["should"]},{"Key":"be inside","Fragments":["the"]},{"Key":"or better","Fragments":["yet","yet","-"]},{"Key":"better yet","Fragments":["inside","`wordlist.pop_back();`"]},{"Key":"yet inside","Fragments":["the"]},{"Key":"class. That","Fragments":["still"]},{"Key":"That still","Fragments":["gives"]},{"Key":"still gives","Fragments":["people"]},{"Key":"gives people","Fragments":["who"]},{"Key":"who include","Fragments":["your"]},{"Key":"header access","Fragments":["to"]},{"Key":"like anagram::anagram::stable_sort,","Fragments":["but"]},{"Key":"anagram::anagram::stable_sort, but","Fragments":["it"]},{"Key":"cause conflicts","Fragments":["between"]},{"Key":"conflicts between","Fragments":["e.g."]},{"Key":"between e.g.","Fragments":["boost::function"]},{"Key":"e.g. boost::function","Fragments":["and"]},{"Key":"boost::function and","Fragments":["std::function."]},{"Key":"and std::function.","Fragments":["Generally"]},{"Key":"std::function. Generally","Fragments":["that"]},{"Key":"Generally that","Fragments":["statement"]},{"Key":"that statement","Fragments":["is"]},{"Key":"is moderately","Fragments":["dangerous"]},{"Key":"moderately dangerous","Fragments":["and"]},{"Key":"not particularly","Fragments":["best","useful."]},{"Key":"particularly best","Fragments":["practice."]},{"Key":" match","Fragments":["could"]},{"Key":"match could","Fragments":["be"]},{"Key":"set inside","Fragments":["an"]},{"Key":"replacing your","Fragments":["transforms","lambda"]},{"Key":"your transforms","Fragments":["with"]},{"Key":"transforms with","Fragments":["boost::to_lower"]},{"Key":"matches probably","Fragments":["deserves"]},{"Key":"probably deserves","Fragments":["to"]},{"Key":"separate named","Fragments":["function,","function."]},{"Key":"named function,","Fragments":["which"]},{"Key":"what that","Fragments":["loop","means,"]},{"Key":"( is_match(strings[i])","Fragments":[")"]},{"Key":" result.push_back(","Fragments":["strings[i]"]},{"Key":"result.push_back( strings[i]","Fragments":[");"]},{"Key":"At which","Fragments":["point"]},{"Key":"which point","Fragments":["the"]},{"Key":"next recommendation","Fragments":["would"]},{"Key":"recommendation would","Fragments":["be"]},{"Key":"be replacing","Fragments":["the"]},{"Key":"loop with","Fragments":["copy_if,","```std::lower_bound()```","a"]},{"Key":"with copy_if,","Fragments":["since"]},{"Key":"copy_if, since","Fragments":["that's"]},{"Key":"since that's","Fragments":["what"]},{"Key":"doing and","Fragments":["it's","is"]},{"Key":"state it","Fragments":["upfront."]},{"Key":"auto functor","Fragments":["="]},{"Key":"functor =","Fragments":["std::bind("]},{"Key":"= std::bind(","Fragments":["is_match,"]},{"Key":"std::bind( is_match,","Fragments":["this,"]},{"Key":"is_match, this,","Fragments":["std::placeholders::_1"]},{"Key":"this, std::placeholders::_1","Fragments":[");"]},{"Key":" std::copy_if(","Fragments":["strings.begin(),"]},{"Key":"std::copy_if( strings.begin(),","Fragments":["strings.end(),"]},{"Key":"strings.begin(), strings.end(),","Fragments":["std::back_inserter(result),"]},{"Key":"strings.end(), std::back_inserter(result),","Fragments":["functor"]},{"Key":"std::back_inserter(result), functor","Fragments":[");"]},{"Key":"verbose consider","Fragments":["using"]},{"Key":"using ranges*","Fragments":["and/or"]},{"Key":"ranges* and/or","Fragments":["a"]},{"Key":"and/or a","Fragments":["lambda."]},{"Key":"a lambda.","Fragments":["Or,"]},{"Key":"lambda. Or,","Fragments":["if"]},{"Key":"Or, if","Fragments":["you"]},{"Key":"with remove-erase","Fragments":["as"]},{"Key":"remove-erase as","Fragments":["@janiya"]},{"Key":"as @janiya","Fragments":["pointed"]},{"Key":"@janiya pointed","Fragments":["out,"]},{"Key":"out, remove_if","Fragments":["would"]},{"Key":"remove_if would","Fragments":["take"]},{"Key":"The argument","Fragments":["to"]},{"Key":"be const\u0026.","Fragments":["You"]},{"Key":"const\u0026. You","Fragments":["may"]},{"Key":"may find","Fragments":["that"]},{"Key":"difference (you","Fragments":["could"]},{"Key":"(you could","Fragments":["generate"]},{"Key":"could generate","Fragments":["optimized"]},{"Key":"generate optimized","Fragments":["assembly"]},{"Key":"optimized assembly","Fragments":["and"]},{"Key":"assembly and","Fragments":["compare,"]},{"Key":"and compare,","Fragments":["if"]},{"Key":"compare, if","Fragments":["you're"]},{"Key":"into ranges","Fragments":["you"]},{"Key":"ranges you","Fragments":["might"]},{"Key":"even think","Fragments":["about","about"]},{"Key":"lazy range","Fragments":["so"]},{"Key":"range so","Fragments":["there's"]},{"Key":"no copying","Fragments":["of"]},{"Key":"copying of","Fragments":["the","their","your"]},{"Key":"to matches()","Fragments":["at"]},{"Key":"matches() at","Fragments":["all."]},{"Key":"all. I'm","Fragments":["not"]},{"Key":"suite would","Fragments":["accept"]},{"Key":"would accept","Fragments":["it"]},{"Key":"accept it","Fragments":["without"]},{"Key":"without modification,","Fragments":["and"]},{"Key":"modification, and","Fragments":["even"]},{"Key":"it did","Fragments":["unless","perform"]},{"Key":"did unless","Fragments":["you're"]},{"Key":"you're compiling","Fragments":["with"]},{"Key":"compiling with","Fragments":["C++14"]},{"Key":"with C++14","Fragments":["the"]},{"Key":"C++14 the","Fragments":["return"]},{"Key":"type needs","Fragments":["to"]},{"Key":"be specified","Fragments":["and"]},{"Key":"specified and","Fragments":["it"]},{"Key":"super ugly","Fragments":["where"]},{"Key":"ugly where","Fragments":["you"]},{"Key":"you basically","Fragments":["repeat"]},{"Key":"basically repeat","Fragments":["the"]},{"Key":"repeat the","Fragments":["function"]},{"Key":"body but","Fragments":["inside"]},{"Key":"but inside","Fragments":["decltype."]},{"Key":"inside decltype.","Fragments":["But"]},{"Key":"decltype. But","Fragments":["in"]},{"Key":"general C++","Fragments":["ranges","tips","comment"]},{"Key":"C++ ranges","Fragments":["are"]},{"Key":"ranges are","Fragments":["not"]},{"Key":"quite mature","Fragments":["enough"]},{"Key":"mature enough","Fragments":["for"]},{"Key":"recommend them","Fragments":["broadly."]},{"Key":"Ooh, consistent","Fragments":["naming"]},{"Key":"consistent naming","Fragments":["convention."]},{"Key":"naming convention.","Fragments":["Your","I'm"]},{"Key":"convention. Your","Fragments":["data"]},{"Key":"Your data","Fragments":["members"]},{"Key":"data members","Fragments":["have","or","of"]},{"Key":"members have","Fragments":["no"]},{"Key":"no decoration,","Fragments":["your","in"]},{"Key":"decoration, your","Fragments":["local"]},{"Key":"your local","Fragments":["variables"]},{"Key":"variables have","Fragments":["no","better"]},{"Key":"decoration, in","Fragments":["one"]},{"Key":"one case","Fragments":["your"]},{"Key":"case your","Fragments":["parameter"]},{"Key":"parameter doesn't","Fragments":["and"]},{"Key":"doesn't and","Fragments":["in"]},{"Key":"another case","Fragments":["it"]},{"Key":"it does.","Fragments":["Pick"]},{"Key":"does. Pick","Fragments":["some"]},{"Key":"Pick some","Fragments":["convention"]},{"Key":"some convention","Fragments":["and"]},{"Key":"convention and","Fragments":["try","your"]},{"Key":"it. Prefixing","Fragments":["with"]},{"Key":"Prefixing with","Fragments":["_"]},{"Key":"with _","Fragments":["can"]},{"Key":"_ can","Fragments":["be"]},{"Key":"be tricky","Fragments":["because"]},{"Key":"tricky because","Fragments":["in"]},{"Key":"couple specific","Fragments":["circumstances"]},{"Key":"specific circumstances","Fragments":["it's"]},{"Key":"circumstances it's","Fragments":["reserved"]},{"Key":"it's reserved","Fragments":["for"]},{"Key":"reserved for","Fragments":["the"]},{"Key":"implementation (i.e.","Fragments":["the"]},{"Key":"(i.e. the","Fragments":["standard","source"]},{"Key":" @samanta","Fragments":["Thaks"]},{"Key":"@samanta Thaks","Fragments":["for"]},{"Key":"Thaks for","Fragments":["linkt"]},{"Key":"for linkt","Fragments":["to"]},{"Key":"linkt to","Fragments":["sutters"]},{"Key":"to sutters","Fragments":["article,"]},{"Key":"sutters article,","Fragments":["very"]},{"Key":"article, very","Fragments":["interesting"]},{"Key":"very interesting","Fragments":["read.","for"]},{"Key":"interesting read.","Fragments":["Sutter"]},{"Key":"read. Sutter","Fragments":["is"]},{"Key":"Sutter is","Fragments":["obviously"]},{"Key":"obviously the","Fragments":["guy"]},{"Key":"guy to","Fragments":["listen"]},{"Key":"to listen","Fragments":["two","to"]},{"Key":"listen two","Fragments":["when"]},{"Key":"two when","Fragments":["he"]},{"Key":"when he","Fragments":["gives"]},{"Key":"he gives","Fragments":["any"]},{"Key":"gives any","Fragments":["c++"]},{"Key":"any c++","Fragments":["advice,"]},{"Key":"c++ advice,","Fragments":["but"]},{"Key":"advice, but","Fragments":["honestly"]},{"Key":"honestly i","Fragments":["dont"]},{"Key":"i dont","Fragments":["see"]},{"Key":"dont see","Fragments":["auto"]},{"Key":"see auto","Fragments":["catching"]},{"Key":"auto catching","Fragments":["on"]},{"Key":"catching on","Fragments":["in"]},{"Key":"on in","Fragments":["function"]},{"Key":"in function","Fragments":["declarations","declarations),"]},{"Key":"declarations any","Fragments":["time"]},{"Key":"time soon.","Fragments":["But"]},{"Key":"soon. But","Fragments":["given"]},{"Key":"But given","Fragments":["that"]},{"Key":"you seem","Fragments":["to","to"]},{"Key":"to care","Fragments":["about"]},{"Key":"code readability","Fragments":["(and","on","a"]},{"Key":"readability (and","Fragments":["that"]},{"Key":"(and that","Fragments":["is"]},{"Key":"main points","Fragments":["of"]},{"Key":"of Mr.","Fragments":["Sutter"]},{"Key":"Mr. Sutter","Fragments":["for"]},{"Key":"Sutter for","Fragments":["using"]},{"Key":"function declarations),","Fragments":["than"]},{"Key":"declarations), than","Fragments":["your"]},{"Key":"code could","Fragments":["use","be","be","be","simply"]},{"Key":"some improvements.","Fragments":["I"]},{"Key":"I especially","Fragments":["mean","mean"]},{"Key":"especially mean","Fragments":["formatting","formatting"]},{"Key":"mean formatting","Fragments":["and","and"]},{"Key":"code indent","Fragments":["and","and"]},{"Key":"indent and","Fragments":["setting","setting"]},{"Key":"and setting","Fragments":["of","of"]},{"Key":"setting of","Fragments":["braces.","braces."]},{"Key":"of braces.","Fragments":["Especially"]},{"Key":"braces. Especially","Fragments":["the"]},{"Key":"Especially the","Fragments":["3rd"]},{"Key":"the 3rd","Fragments":["if","edition"]},{"Key":"3rd if","Fragments":["statement."]},{"Key":"statement. Yes","Fragments":["i"]},{"Key":"Yes i","Fragments":["am"]},{"Key":"am nitpicking,","Fragments":["but"]},{"Key":"nitpicking, but","Fragments":["thas"]},{"Key":"but thas","Fragments":["what"]},{"Key":"thas what","Fragments":["people"]},{"Key":"what people","Fragments":["are"]},{"Key":"people are","Fragments":["supposed"]},{"Key":"to do.","Fragments":["One","`string(\u0026text[first],","When"]},{"Key":"do. One","Fragments":["last"]},{"Key":"last thing,","Fragments":["if","if"]},{"Key":"thing, if","Fragments":["you","you"]},{"Key":"use modern","Fragments":["c++","c++"]},{"Key":"modern c++","Fragments":["you","you"]},{"Key":"c++ you","Fragments":["could","could"]},{"Key":"std::string as","Fragments":["parameter","parameter"]},{"Key":"parameter and","Fragments":["not","not","you"]},{"Key":"not char*","Fragments":["and","and"]},{"Key":"back function","Fragments":["instead","instead"]},{"Key":"like mine","Fragments":["w/"]},{"Key":"mine w/","Fragments":["some"]},{"Key":"w/ some","Fragments":["minor"]},{"Key":"some minor","Fragments":["differences.","cosmetic"]},{"Key":"minor differences.","Fragments":["(Resizing"]},{"Key":"differences. (Resizing","Fragments":["is"]},{"Key":"(Resizing is","Fragments":["a"]},{"Key":"idea for","Fragments":["potentially"]},{"Key":"for potentially","Fragments":["long"]},{"Key":"potentially long","Fragments":["RNA"]},{"Key":"long RNA","Fragments":["strands!)"]},{"Key":"Why return","Fragments":["a"]},{"Key":"char from","Fragments":["`to_rna`"]},{"Key":"from `to_rna`","Fragments":["instead"]},{"Key":"`to_rna` instead","Fragments":["of"]},{"Key":"2. Can","Fragments":["you"]},{"Key":"static cast","Fragments":["inside"]},{"Key":"cast inside","Fragments":["the"]},{"Key":"the `transform`","Fragments":["is","and"]},{"Key":"`transform` is","Fragments":["doing?","guaranteed"]},{"Key":"is doing?","Fragments":["It"]},{"Key":"doing? It","Fragments":["seems"]},{"Key":"like it's","Fragments":["casting","to","not"]},{"Key":"it's casting","Fragments":["`to_rna`"]},{"Key":"casting `to_rna`","Fragments":["to"]},{"Key":"`to_rna` to","Fragments":["a","use."]},{"Key":"`const char`","Fragments":["and"]},{"Key":"char` and","Fragments":["returns"]},{"Key":"`const char`--but","Fragments":["isn't"]},{"Key":"char`--but isn't","Fragments":["`to_rna`"]},{"Key":"isn't `to_rna`","Fragments":["already"]},{"Key":"`to_rna` already","Fragments":["that"]},{"Key":"already that","Fragments":["kind"]},{"Key":"a stub","Fragments":["that"]},{"Key":"stub that","Fragments":["passes"]},{"Key":"tests so","Fragments":["I"]},{"Key":"back later","Fragments":["and"]},{"Key":"later and","Fragments":["do"]},{"Key":"one better.","Fragments":["But"]},{"Key":"better. But","Fragments":["it"]},{"Key":"seems really","Fragments":["boring"]},{"Key":"really boring","Fragments":[":/"]},{"Key":"programming features","Fragments":["of"]},{"Key":"solution uses","Fragments":["std::mismatch()"]},{"Key":"uses std::mismatch()","Fragments":["algorithm"]},{"Key":"std::mismatch() algorithm","Fragments":["and"]},{"Key":"algorithm and","Fragments":["std::string","functional","avoid","is"]},{"Key":"std::string iterators;","Fragments":["the"]},{"Key":"iterators; the","Fragments":["algorithm"]},{"Key":"straight forward:","Fragments":["every"]},{"Key":"forward: every","Fragments":["time"]},{"Key":"time a","Fragments":["mismatch","count"]},{"Key":"mismatch is","Fragments":["found,"]},{"Key":"is found,","Fragments":["update"]},{"Key":"found, update","Fragments":["the"]},{"Key":"iterators, increase","Fragments":["the"]},{"Key":" distance","Fragments":["and"]},{"Key":"distance and","Fragments":["loop"]},{"Key":"and loop","Fragments":["once","advice,","can"]},{"Key":"loop once","Fragments":["more."]},{"Key":"you attacked","Fragments":["this"]},{"Key":"attacked this","Fragments":["problem."]},{"Key":"problem. One","Fragments":["thing","critique"]},{"Key":"help however","Fragments":["is"]},{"Key":"however is","Fragments":["to","pretty"]},{"Key":"to simplify","Fragments":["your","the","the","your"]},{"Key":"still retain","Fragments":["the"]},{"Key":"retain the","Fragments":["same"]},{"Key":"same logic.","Fragments":["Think"]},{"Key":"logic. Think","Fragments":["about"]},{"Key":"could check","Fragments":["for","that","for","for","if"]},{"Key":"minimum while","Fragments":["assigning"]},{"Key":"while assigning","Fragments":["to","to"]},{"Key":"to `l`.","Fragments":["I"]},{"Key":"`l`. I","Fragments":["think"]},{"Key":"best solution","Fragments":["may",")."]},{"Key":"solution may","Fragments":["involve","look"]},{"Key":"may involve","Fragments":["a"]},{"Key":"involve a","Fragments":["`std`"]},{"Key":"a `std`","Fragments":["algorithm"]},{"Key":"`std` algorithm","Fragments":["or"]},{"Key":"or ternary","Fragments":["operator."]},{"Key":"ternary operator.","Fragments":["What"]},{"Key":"operator. What","Fragments":["do"]},{"Key":" @reed,","Fragments":["Thanks"]},{"Key":"@reed, Thanks","Fragments":["for"]},{"Key":"\u003e One","Fragments":["last"]},{"Key":"the 4th","Fragments":["iteration,"]},{"Key":"4th iteration,","Fragments":["I've"]},{"Key":"iteration, I've","Fragments":["written"]},{"Key":"written two","Fragments":["version"]},{"Key":"two version","Fragments":["of"]},{"Key":"of `bob::hey()`","Fragments":["functions."]},{"Key":"`bob::hey()` functions.","Fragments":["And"]},{"Key":"functions. And","Fragments":["thanks"]},{"Key":"And thanks","Fragments":["for"]},{"Key":"replace `last[-1]`","Fragments":["with"]},{"Key":"`last[-1]` with","Fragments":["something","`*std::prev(last)`."]},{"Key":"else from","Fragments":["*modern"]},{"Key":"from *modern","Fragments":["c++*."]},{"Key":"\u003e I","Fragments":["especially","get"]},{"Key":"understand what","Fragments":["did","are","are","exactly","it","they","he"]},{"Key":"what did","Fragments":["you"]},{"Key":"And BTW,","Fragments":["I","something"]},{"Key":"BTW, I","Fragments":["don't"]},{"Key":"any reasons","Fragments":["to"]},{"Key":"reasons to","Fragments":["give","help"]},{"Key":"give nitpicks","Fragments":["to"]},{"Key":"nitpicks to","Fragments":["an"]},{"Key":" Replaced","Fragments":["`last[-1]`","for","my"]},{"Key":"Replaced `last[-1]`","Fragments":["with"]},{"Key":"good. Only","Fragments":["thing"]},{"Key":"Only thing","Fragments":["I","I","I"]},{"Key":"might suggest","Fragments":["is","is"]},{"Key":"suggest is","Fragments":["using","inlining"]},{"Key":"using std::regex","Fragments":["rather"]},{"Key":"std::regex rather","Fragments":["than"]},{"Key":"than boost::regex.","Fragments":["It"]},{"Key":"boost::regex. It","Fragments":["just"]},{"Key":"It just","Fragments":["decouples","so"]},{"Key":"just decouples","Fragments":["the"]},{"Key":"decouples the","Fragments":["Boost"]},{"Key":"Boost dependency","Fragments":["for"]},{"Key":"dependency for","Fragments":["this"]},{"Key":"and keeps","Fragments":["everything"]},{"Key":"keeps everything","Fragments":["in"]},{"Key":" @doug","Fragments":["Thanks"]},{"Key":"@doug Thanks","Fragments":["for"]},{"Key":"the greatest","Fragments":["nitpick"]},{"Key":"greatest nitpick","Fragments":["I've"]},{"Key":"nitpick I've","Fragments":["received"]},{"Key":"I've received","Fragments":["by"]},{"Key":"received by","Fragments":["this"]},{"Key":"believe, that","Fragments":["two"]},{"Key":"times is","Fragments":["not"]},{"Key":"not *too","Fragments":["often*."]},{"Key":"\u003e Have","Fragments":["you"]},{"Key":" *Lines","Fragments":["31"]},{"Key":"*Lines 31","Fragments":["and"]},{"Key":" Tested","Fragments":["with"]},{"Key":"Tested with","Fragments":["`clang++-3.5`,"]},{"Key":"with `clang++-3.5`,","Fragments":["`clang++-3.8`"]},{"Key":"`clang++-3.5`, `clang++-3.8`","Fragments":["and"]},{"Key":"`clang++-3.8` and","Fragments":["`g++-4.8.4`"]},{"Key":"and `g++-4.8.4`","Fragments":["with"]},{"Key":"`g++-4.8.4` with","Fragments":["`-O2`"]},{"Key":"with `-O2`","Fragments":["and"]},{"Key":"`-O2` and","Fragments":["`-O3`"]},{"Key":"and `-O3`","Fragments":["flags."]},{"Key":"`-O3` flags.","Fragments":["In"]},{"Key":"flags. In","Fragments":["all"]},{"Key":"In all","Fragments":["cases"]},{"Key":"cases those","Fragments":["compilers"]},{"Key":"those compilers","Fragments":["use"]},{"Key":"compilers use","Fragments":["copy-ctor"]},{"Key":"use copy-ctor","Fragments":["calls"]},{"Key":"copy-ctor calls","Fragments":["when"]},{"Key":"calls when","Fragments":["the"]},{"Key":"the `std::move()`","Fragments":["function"]},{"Key":"`std::move()` function","Fragments":["is"]},{"Key":"is removed","Fragments":["from"]},{"Key":"removed from","Fragments":["the","the"]},{"Key":"\u003e For","Fragments":["example,","the"]},{"Key":"faster if","Fragments":["I"]},{"Key":"create two","Fragments":["versions"]},{"Key":"two versions","Fragments":["of","of","was","one"]},{"Key":"of `AnagramMatcher`","Fragments":["ctors."]},{"Key":"`AnagramMatcher` ctors.","Fragments":["One"]},{"Key":"ctors. One","Fragments":["should"]},{"Key":"One should","Fragments":["receive"]},{"Key":"should receive","Fragments":["`const","`const"]},{"Key":"receive `const","Fragments":["std::string\u0026`","char*`."]},{"Key":"std::string\u0026` and","Fragments":["the"]},{"Key":"second should","Fragments":["receive"]},{"Key":"1. That's","Fragments":["just"]},{"Key":"using `const`,","Fragments":["whenever"]},{"Key":"`const`, whenever","Fragments":["possible."]},{"Key":"2. Whithout","Fragments":["the"]},{"Key":"Whithout the","Fragments":["cast"]},{"Key":"cannot decide","Fragments":["which"]},{"Key":"which oft","Fragments":["the"]},{"Key":"oft the","Fragments":["two"]},{"Key":"of `to_rna`","Fragments":["to"]},{"Key":"can't argue","Fragments":["with"]},{"Key":"argue with","Fragments":["empirical","Mike"]},{"Key":"with empirical","Fragments":["evidence,"]},{"Key":"empirical evidence,","Fragments":["but"]},{"Key":"evidence, but","Fragments":["I"]},{"Key":"am disappointed","Fragments":["in"]},{"Key":"disappointed in","Fragments":["those"]},{"Key":"in those","Fragments":["compilers.","cases","places"]},{"Key":"those compilers.","Fragments":["I"]},{"Key":"compilers. I","Fragments":["would've"]},{"Key":"thought they","Fragments":["would've","make"]},{"Key":"they would've","Fragments":["realized"]},{"Key":"would've realized","Fragments":["it"]},{"Key":"realized it","Fragments":["was"]},{"Key":"was safe","Fragments":["to"]},{"Key":"move those","Fragments":["values.","functions"]},{"Key":"those values.","Fragments":["If"]},{"Key":"values. If","Fragments":["that's"]},{"Key":"If that's","Fragments":["the"]},{"Key":"maybe I","Fragments":["need","should"]},{"Key":"get over","Fragments":["my"]},{"Key":"my aversion","Fragments":["to"]},{"Key":"aversion to","Fragments":["writing"]},{"Key":"writing std::move","Fragments":["with"]},{"Key":"std::move with","Fragments":["one"]},{"Key":"argument (still","Fragments":["not"]},{"Key":"(still not","Fragments":["happy"]},{"Key":"about [reusing](http://en.cppreference.com/w/cpp/algorithm/move)","Fragments":["the"]},{"Key":"[reusing](http://en.cppreference.com/w/cpp/algorithm/move) the","Fragments":["name"]},{"Key":"to mean","Fragments":["something","a"]},{"Key":"mean something","Fragments":["very"]},{"Key":"You make","Fragments":["a"]},{"Key":"about overloading","Fragments":["on"]},{"Key":"overloading on","Fragments":["const"]},{"Key":"on const","Fragments":["char*."]},{"Key":"const char*.","Fragments":["I"]},{"Key":"char*. I","Fragments":["wouldn't"]},{"Key":"wouldn't normally","Fragments":["push"]},{"Key":"normally push","Fragments":["such"]},{"Key":"push such","Fragments":["a"]},{"Key":"think performance","Fragments":["is"]},{"Key":"is _that_","Fragments":["important"]},{"Key":"_that_ important","Fragments":["here."]},{"Key":"important here.","Fragments":["I"]},{"Key":"me thinking","Fragments":["along"]},{"Key":"thinking along","Fragments":["those"]},{"Key":"along those","Fragments":["lines."]},{"Key":"those lines.","Fragments":["If"]},{"Key":"lines. If","Fragments":["you"]},{"Key":"decide you","Fragments":["are"]},{"Key":"for speed","Fragments":["then"]},{"Key":"speed then","Fragments":["yeah"]},{"Key":"then yeah","Fragments":["I"]},{"Key":"yeah I","Fragments":["agree"]},{"Key":"that probably","Fragments":["makes"]},{"Key":"use uint32_t","Fragments":["since"]},{"Key":"uint32_t since","Fragments":["\u003ccstdint\u003e"]},{"Key":"since \u003ccstdint\u003e","Fragments":["was"]},{"Key":"\u003ccstdint\u003e was","Fragments":["introduced"]},{"Key":"was introduced","Fragments":["because","in"]},{"Key":"introduced because","Fragments":["then"]},{"Key":"you're guaranteed","Fragments":["to"]},{"Key":"have machine","Fragments":["independent"]},{"Key":"machine independent","Fragments":["definition"]},{"Key":"independent definition","Fragments":["of"]},{"Key":"2. To","Fragments":["the"]},{"Key":"To the","Fragments":["file","file"]},{"Key":"file that","Fragments":["includes","includes"]},{"Key":"that includes","Fragments":["of","of"]},{"Key":"includes of","Fragments":["this","this"]},{"Key":"the extern","Fragments":["says","says"]},{"Key":"extern says","Fragments":["that","that"]},{"Key":"definition is","Fragments":["guaranteed","guaranteed"]},{"Key":"the translation","Fragments":["units","units","unit,","unit","unit"]},{"Key":"translation units","Fragments":["(cpp","(cpp","in"]},{"Key":"units (cpp","Fragments":["files).","files)."]},{"Key":"(cpp files).","Fragments":["Also,","Also,"]},{"Key":"files). Also,","Fragments":["C++","C++"]},{"Key":"Also, C++","Fragments":["mandates","mandates"]},{"Key":"C++ mandates","Fragments":["you","you"]},{"Key":"mandates you","Fragments":["to","to"]},{"Key":"this fashion","Fragments":["for","for"]},{"Key":"fashion for","Fragments":["exposing","exposing"]},{"Key":"for exposing","Fragments":["variables/functions","variables/functions"]},{"Key":"exposing variables/functions","Fragments":["in","in"]},{"Key":"variables/functions in","Fragments":["custom","custom"]},{"Key":"in custom","Fragments":["namaespaces","namaespaces"]},{"Key":"3. Agree","Fragments":[":)"]},{"Key":"Yes, taking","Fragments":["just","just"]},{"Key":"taking just","Fragments":["a","a"]},{"Key":"std::string \u0026","Fragments":["returning","returning","?","str.","statement."]},{"Key":"\u0026 returning","Fragments":["it","it"]},{"Key":"take 1","Fragments":["constructor","constructor"]},{"Key":"1 constructor","Fragments":["less","less"]},{"Key":"constructor less","Fragments":["(thanks","(thanks"]},{"Key":"less (thanks","Fragments":["to","to"]},{"Key":"(thanks to","Fragments":["std::move?)","std::move?)"]},{"Key":"Yes, will","Fragments":["convert"]},{"Key":"will convert","Fragments":["it"]},{"Key":"once \u0026","Fragments":["reuse"]},{"Key":"4. Good","Fragments":["catch!"]},{"Key":"Good catch!","Fragments":["I'm","I'm"]},{"Key":"catch! I'm","Fragments":["thinking","thinking"]},{"Key":"namespace function","Fragments":["that","that"]},{"Key":"this \u0026","Fragments":["reuse.","reuse."]},{"Key":"\u0026 reuse.","Fragments":["Let","Let"]},{"Key":"reuse. Let","Fragments":["me","me"]},{"Key":"me know","Fragments":["your","your","if","if","what","what"]},{"Key":"know your","Fragments":["thoughts.","thoughts."]},{"Key":"5. Will","Fragments":["give"]},{"Key":"Will give","Fragments":["it"]},{"Key":"don't particularly","Fragments":["like"]},{"Key":"particularly like","Fragments":["this"]},{"Key":"solution, because","Fragments":["of"]},{"Key":"of dependency","Fragments":["on"]},{"Key":"use `regex_replace`","Fragments":["in"]},{"Key":"`regex_replace` in","Fragments":["each"]},{"Key":"each verse,","Fragments":["and"]},{"Key":"verse, and","Fragments":["twice"]},{"Key":"and twice","Fragments":["at"]},{"Key":"twice at","Fragments":["that."]},{"Key":"at that.","Fragments":["But"]},{"Key":"that. But","Fragments":["this","after"]},{"Key":"could come","Fragments":["up"]},{"Key":"with at","Fragments":["the"]},{"Key":"solution specifically","Fragments":["how"]},{"Key":"specifically how","Fragments":["short"]},{"Key":"how short","Fragments":["and","it","it"]},{"Key":"and concise","Fragments":["this","manner","manner","manner"]},{"Key":"concise this","Fragments":["code"]},{"Key":" Shall","Fragments":["we"]},{"Key":"Shall we","Fragments":["make"]},{"Key":"we make","Fragments":["it"]},{"Key":" \u003cli\u003eIn","Fragments":["your"]},{"Key":"\u003cli\u003eIn your","Fragments":["code"]},{"Key":"because at","Fragments":["all"]},{"Key":"all times","Fragments":["`i"]},{"Key":"times `i","Fragments":["="]},{"Key":"`i =","Fragments":["j`"]},{"Key":"= j`","Fragments":["one"]},{"Key":"j` one","Fragments":["of"]},{"Key":"unnecessary since","Fragments":["you","your"]},{"Key":"use say","Fragments":["just"]},{"Key":"say just","Fragments":["`i`"]},{"Key":"just `i`","Fragments":["for"]},{"Key":"all you","Fragments":["operations.\u003c/li\u003e","have","wanted","really"]},{"Key":" \u003cli\u003eIf","Fragments":["you","a","a"]},{"Key":"\u003cli\u003eIf you","Fragments":["find"]},{"Key":"the shortest","Fragments":["string","length.\u003c/li\u003e","length.\u003c/li\u003e","one"]},{"Key":"shortest string","Fragments":["and"]},{"Key":"assign the","Fragments":["value"]},{"Key":"its length","Fragments":["to","returned"]},{"Key":"length to","Fragments":["a","0."]},{"Key":"variable before","Fragments":["hand"]},{"Key":"before hand","Fragments":["this"]},{"Key":"hand this","Fragments":["would"]},{"Key":"stop the","Fragments":["need"]},{"Key":"against both","Fragments":["size"]},{"Key":"both size","Fragments":["values"]},{"Key":"size values","Fragments":["with"]},{"Key":"values with","Fragments":["two","```true/false```","your"]},{"Key":"two incrementers","Fragments":["inside"]},{"Key":"incrementers inside","Fragments":["the"]},{"Key":"believe both","Fragments":["of"]},{"Key":"these would","Fragments":["drastically"]},{"Key":"would drastically","Fragments":["improve"]},{"Key":"drastically improve","Fragments":["readability."]},{"Key":"already did","Fragments":["it","all"]},{"Key":"it while","Fragments":["I"]},{"Key":"was typing","Fragments":["this."]},{"Key":"typing this.","Fragments":["Nice!"]},{"Key":"iteration a","Fragments":["lot!"]},{"Key":"a lot!","Fragments":["I"]},{"Key":"lot! I","Fragments":["hate"]},{"Key":"hate to","Fragments":["be","see"]},{"Key":"so picky","Fragments":["but"]},{"Key":"picky but","Fragments":["this"]},{"Key":"called nitpicking","Fragments":["so..."]},{"Key":" \u003cul\u003e\u003cli\u003econsider","Fragments":["changing"]},{"Key":" `int","Fragments":["l","l"]},{"Key":"`int l","Fragments":["=","="]},{"Key":"l =","Fragments":["0;","s2.length();`","s1.length()"]},{"Key":" s1.length()","Fragments":["\u003c"]},{"Key":"s1.length() \u003c","Fragments":["s2.length()?","s2.length()?"]},{"Key":"\u003c s2.length()?","Fragments":["l=s1.length()","s1.length()"]},{"Key":"s2.length()? l=s1.length()","Fragments":[":"]},{"Key":"l=s1.length() :","Fragments":["l"]},{"Key":": l","Fragments":["="]},{"Key":"= s1.length()","Fragments":["\u003c"]},{"Key":"s2.length()? s1.length()","Fragments":[":"]},{"Key":"s1.length() :","Fragments":["s2.length();`"]},{"Key":"thought this","Fragments":["was"]},{"Key":"of throwing","Fragments":["values","an","an"]},{"Key":"throwing values","Fragments":["in"]},{"Key":"returning them,","Fragments":["but"]},{"Key":"them, but","Fragments":["I"]},{"Key":"up learning","Fragments":["a"]},{"Key":"learning a","Fragments":["lot"]},{"Key":"about const-ness","Fragments":["and"]},{"Key":"const-ness and","Fragments":["the"]},{"Key":"Use `isspace`","Fragments":["without"]},{"Key":"`isspace` without","Fragments":["the"]},{"Key":"need of","Fragments":["a","input","the"]},{"Key":"lambda construct.","Fragments":["Makes"]},{"Key":"construct. Makes","Fragments":["the"]},{"Key":"Makes the","Fragments":["code"]},{"Key":"\u003e Yes,","Fragments":["taking"]},{"Key":" Let","Fragments":["me","me"]},{"Key":"me show","Fragments":["on"]},{"Key":"show on","Fragments":["an"]},{"Key":"const std::string","Fragments":["test1","\u0026","instead"]},{"Key":"std::string test1","Fragments":["="]},{"Key":"test1 =","Fragments":["\"this"]},{"Key":"= \"this","Fragments":["is","is"]},{"Key":"\"this is","Fragments":["a","a","a","silence\"","a"]},{"Key":"char *test2","Fragments":["="]},{"Key":"*test2 =","Fragments":["\"this"]},{"Key":"test string","Fragments":["(const"]},{"Key":"string (const","Fragments":["char*)\";"]},{"Key":"auto result1","Fragments":["="]},{"Key":"result1 =","Fragments":["tolower(test1);"]},{"Key":"auto result2","Fragments":["="]},{"Key":"result2 =","Fragments":["tolower(test2);"]},{"Key":"So what","Fragments":["happens","do","I","is"]},{"Key":"happens here","Fragments":["in"]},{"Key":"here in","Fragments":["the"]},{"Key":"first case?","Fragments":["With"]},{"Key":"case? With","Fragments":["the"]},{"Key":"original function","Fragments":["it","calls"]},{"Key":"works as","Fragments":["you"]},{"Key":"you expect.","Fragments":["If"]},{"Key":"expect. If","Fragments":["you"]},{"Key":"remove *line","Fragments":["15*"]},{"Key":"*line 15*","Fragments":["and"]},{"Key":"15* and","Fragments":["replace"]},{"Key":"replace `const","Fragments":["std::string\u0026`","std::string\u0026`"]},{"Key":"std::string\u0026` with","Fragments":["`std::string`,","`std::string`,"]},{"Key":"with `std::string`,","Fragments":["the","you"]},{"Key":"`std::string`, the","Fragments":["behaviour"]},{"Key":"the behaviour","Fragments":["would"]},{"Key":"behaviour would","Fragments":["not"]},{"Key":"What happens","Fragments":["in","if","if","if","if","to","if"]},{"Key":"second case?","Fragments":["When"]},{"Key":"case? When","Fragments":["you"]},{"Key":"pass `const","Fragments":["char*`","char*`"]},{"Key":"char*` to","Fragments":["some","my"]},{"Key":"some function","Fragments":["that"]},{"Key":"that needs","Fragments":["`const","to","to","to","improvement,","to"]},{"Key":"needs `const","Fragments":["std::string\u0026`"]},{"Key":"std::string\u0026` or","Fragments":["`std::string`,"]},{"Key":"or `std::string`,","Fragments":["a"]},{"Key":"`std::string`, a","Fragments":["compiler"]},{"Key":"compiler creates","Fragments":["a"]},{"Key":"temporary `std::string`","Fragments":["object"]},{"Key":"`std::string` object","Fragments":["with"]},{"Key":"object with","Fragments":["the"]},{"Key":"of implicit","Fragments":["ctor"]},{"Key":"implicit ctor","Fragments":["`std::string(const"]},{"Key":"ctor `std::string(const","Fragments":["char*)`."]},{"Key":"`std::string(const char*)`.","Fragments":["In"]},{"Key":"char*)`. In","Fragments":["the"]},{"Key":"original version","Fragments":["of"]},{"Key":"your function,","Fragments":["you","so"]},{"Key":"function, you","Fragments":["make","could","could"]},{"Key":"make one","Fragments":["more"]},{"Key":"more copy","Fragments":["for"]},{"Key":"copy for","Fragments":["this","`downcase()`."]},{"Key":"this object","Fragments":["in"]},{"Key":"object in","Fragments":["*line","order","the"]},{"Key":"*line 15*.","Fragments":["And"]},{"Key":"15*. And","Fragments":["if"]},{"Key":"remove this","Fragments":["line"]},{"Key":"this line","Fragments":["and","`std::string::npos"]},{"Key":"`std::string`, you","Fragments":["won't"]},{"Key":"you won't","Fragments":["have","be","need"]},{"Key":"won't have","Fragments":["this"]},{"Key":"more thing.","Fragments":["Don't"]},{"Key":"thing. Don't","Fragments":["use"]},{"Key":"use `std::move()`","Fragments":["in"]},{"Key":"`std::move()` in","Fragments":["this"]},{"Key":"case, because","Fragments":["you"]},{"Key":"will turn","Fragments":["off"]},{"Key":"the [return","Fragments":["value"]},{"Key":"[return value","Fragments":["optimization](https://en.wikipedia.org/wiki/Return_value_optimization)"]},{"Key":"value optimization](https://en.wikipedia.org/wiki/Return_value_optimization)","Fragments":["(aka"]},{"Key":"optimization](https://en.wikipedia.org/wiki/Return_value_optimization) (aka","Fragments":["RVO)"]},{"Key":"(aka RVO)","Fragments":["in"]},{"Key":"RVO) in","Fragments":["a"]},{"Key":"you use.","Fragments":["And"]},{"Key":"use. And","Fragments":["RVO"]},{"Key":"And RVO","Fragments":["works"]},{"Key":"RVO works","Fragments":["better"]},{"Key":"works better","Fragments":["and"]},{"Key":"better and","Fragments":["faster","by"]},{"Key":"\u003e Good","Fragments":["catch!"]},{"Key":"think, that's","Fragments":["a"]},{"Key":"do like","Fragments":["a","the"]},{"Key":"good recursive","Fragments":["solution."]},{"Key":"just saw","Fragments":["the","that"]},{"Key":"solutions submitted","Fragments":["by"]},{"Key":"submitted by","Fragments":["other"]},{"Key":"by other","Fragments":["users."]},{"Key":"for myself.","Fragments":["Also"]},{"Key":"myself. Also","Fragments":["it"]},{"Key":"Also it","Fragments":["is"]},{"Key":"is incorrect","Fragments":["for","here."]},{"Key":"incorrect for","Fragments":["some"]},{"Key":"tests (such","Fragments":["as"]},{"Key":" Relating","Fragments":["to"]},{"Key":"Relating to","Fragments":["my"]},{"Key":"my conversation","Fragments":["with"]},{"Key":"conversation with","Fragments":["Dennis:"]},{"Key":"1. Used","Fragments":["std::string"]},{"Key":"Used std::string","Fragments":["instead"]},{"Key":"reference in","Fragments":["tolower()","all","for","your","the"]},{"Key":"2. Created","Fragments":["fill_char_map()"]},{"Key":"Created fill_char_map()","Fragments":["to"]},{"Key":"fill_char_map() to","Fragments":["reuse"]},{"Key":"reuse \u0026","Fragments":["not"]},{"Key":"have copy+paste","Fragments":["anti-pattern"]},{"Key":"3. Used","Fragments":["copy_if"]},{"Key":"Used copy_if","Fragments":["instead"]},{"Key":"copy_if instead","Fragments":["of"]},{"Key":"of for()","Fragments":["in"]},{"Key":"for() in","Fragments":["matches()"]},{"Key":"4. Convert","Fragments":["to"]},{"Key":"Convert to","Fragments":["lower-case"]},{"Key":"lower-case only","Fragments":["once"]},{"Key":"once in","Fragments":["matches()","my","case","your"]},{"Key":"is suggestion","Fragments":["logic"]},{"Key":"suggestion logic","Fragments":["_ONLY_"]},{"Key":"logic _ONLY_","Fragments":["based"]},{"Key":"_ONLY_ based","Fragments":["on"]},{"Key":"first 5","Fragments":["char?"]},{"Key":"you either","Fragments":["operate"]},{"Key":"either operate","Fragments":["on"]},{"Key":"on message","Fragments":["or"]},{"Key":"message or","Fragments":["cleaned_message"]},{"Key":"or cleaned_message","Fragments":["\u0026"]},{"Key":"cleaned_message \u0026","Fragments":["avoid"]},{"Key":"\u0026 avoid","Fragments":["using"]},{"Key":"using both.","Fragments":["If"]},{"Key":"both. If","Fragments":["not"]},{"Key":"not possible,","Fragments":["please"]},{"Key":"possible, please","Fragments":["add","suggest"]},{"Key":"please add","Fragments":["suitable"]},{"Key":"add suitable","Fragments":["comments"]},{"Key":"suitable comments","Fragments":["to"]},{"Key":"1. hey()","Fragments":["should"]},{"Key":"hey() should","Fragments":["be","be"]},{"Key":"be dclared","Fragments":["extern"]},{"Key":"dclared extern","Fragments":["in"]},{"Key":"extern in","Fragments":[".h"]},{"Key":"2. hey()","Fragments":["should"]},{"Key":"Consider renaming","Fragments":["to"]},{"Key":"renaming to","Fragments":["all_upper_char()"]},{"Key":"adding comments","Fragments":["for","to"]},{"Key":"comments for","Fragments":["regex","you","each"]},{"Key":"the simplicity","Fragments":["in","of","and","of"]},{"Key":"simplicity in","Fragments":["calling"]},{"Key":"in calling","Fragments":["regex_search()"]},{"Key":"1. bob","Fragments":["can"]},{"Key":"2. consider","Fragments":["adding"]},{"Key":"to regex","Fragments":["\u0026"]},{"Key":"regex \u0026","Fragments":["the"]},{"Key":"\u0026 the","Fragments":["assumptions"]},{"Key":"the assumptions","Fragments":["you've"]},{"Key":"assumptions you've","Fragments":["made"]},{"Key":"3. Appreciate","Fragments":["the"]},{"Key":"Appreciate the","Fragments":["simplicity","reminder.","help!","help!","help!"]},{"Key":"simplicity of","Fragments":["checks","the"]},{"Key":"thought of.","Fragments":["I"]},{"Key":"also created","Fragments":["a"]},{"Key":"a non-recursive","Fragments":["solution."]},{"Key":" Decided","Fragments":["to","to","to"]},{"Key":"Decided to","Fragments":["take","pass","use"]},{"Key":"long route","Fragments":["here"]},{"Key":"route here","Fragments":["to"]},{"Key":"learn more","Fragments":["about","about","about","about","about"]},{"Key":"more about","Fragments":["finding","the","pass","it.","the","the","_how_"]},{"Key":"about finding","Fragments":["prime"]},{"Key":"finding prime","Fragments":["numbers"]},{"Key":"and factors.","Fragments":["A"]},{"Key":"factors. A","Fragments":["simpler"]},{"Key":"A simpler","Fragments":["answer"]},{"Key":"simpler answer","Fragments":["would"]},{"Key":"answer would","Fragments":["be"]},{"Key":"the modulo","Fragments":["operation"]},{"Key":"modulo operation","Fragments":["of"]},{"Key":"operation of","Fragments":["3,"]},{"Key":"of 3,","Fragments":["5"]},{"Key":"3, 5","Fragments":["and","and"]},{"Key":"and 7","Fragments":["of"]},{"Key":"7 of","Fragments":["each"]},{"Key":"right, it","Fragments":["is"]},{"Key":"The underscore","Fragments":["suffix"]},{"Key":"underscore suffix","Fragments":["for"]},{"Key":"suffix for","Fragments":["members"]},{"Key":"for members","Fragments":["is"]},{"Key":"members is","Fragments":["the"]},{"Key":"the google","Fragments":["convention,"]},{"Key":"google convention,","Fragments":["right"]},{"Key":"convention, right","Fragments":["?"]},{"Key":"the de-facto","Fragments":["standard"]},{"Key":"de-facto standard","Fragments":["these"]},{"Key":"standard these","Fragments":["days"]},{"Key":"these days","Fragments":["?","is"]},{"Key":"1. basically","Fragments":["it"]},{"Key":"basically it","Fragments":["was"]},{"Key":"minimum required","Fragments":["to"]},{"Key":"tests passing,","Fragments":["no"]},{"Key":"passing, no","Fragments":["specs"]},{"Key":"no specs","Fragments":["so"]},{"Key":"specs so","Fragments":["not"]},{"Key":"so not","Fragments":["sure","complaining"]},{"Key":"underlying logic","Fragments":["for"]},{"Key":"2. yeah,","Fragments":["that's"]},{"Key":"yeah, that's","Fragments":["a"]},{"Key":"fair point,","Fragments":["got"]},{"Key":"point, got","Fragments":["left"]},{"Key":"got left","Fragments":["over"]},{"Key":"from past","Fragments":["iterations"]},{"Key":"past iterations","Fragments":["i"]},{"Key":"iterations i","Fragments":["guess."]},{"Key":"i guess.","Fragments":["Good"]},{"Key":"guess. Good","Fragments":["catch!"]},{"Key":"think Google","Fragments":["was"]},{"Key":"Google was","Fragments":["one"]},{"Key":"more powerful","Fragments":["factors"]},{"Key":"powerful factors","Fragments":["in"]},{"Key":"factors in","Fragments":["popularizing"]},{"Key":"in popularizing","Fragments":["it."]},{"Key":"popularizing it.","Fragments":["IMO"]},{"Key":"it. IMO","Fragments":["the"]},{"Key":"IMO the","Fragments":["most"]},{"Key":"most influencial","Fragments":["styles"]},{"Key":"influencial styles","Fragments":["are"]},{"Key":"styles are","Fragments":["STL,"]},{"Key":"are STL,","Fragments":["boost,"]},{"Key":"STL, boost,","Fragments":["and"]},{"Key":"and [Core","Fragments":["Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md)."]},{"Key":"[Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md).","Fragments":["But"]},{"Key":"Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md). But","Fragments":["I've"]},{"Key":"But I've","Fragments":["seen"]},{"Key":"seen plenty","Fragments":["of"]},{"Key":"of others","Fragments":["-"]},{"Key":"others -","Fragments":["almost"]},{"Key":"- almost","Fragments":["every"]},{"Key":"almost every","Fragments":["group"]},{"Key":"every group","Fragments":["seems"]},{"Key":"group seems","Fragments":["to"]},{"Key":"something different.","Fragments":["I"]},{"Key":"different. I","Fragments":["now"]},{"Key":"I now","Fragments":["work","create","have"]},{"Key":"now work","Fragments":["in"]},{"Key":"place that","Fragments":["prefixes"]},{"Key":"that prefixes","Fragments":["members"]},{"Key":"prefixes members","Fragments":["with"]},{"Key":"members with","Fragments":["underscore,"]},{"Key":"with underscore,","Fragments":["which"]},{"Key":"underscore, which","Fragments":["is"]},{"Key":"technically legal","Fragments":["because"]},{"Key":"legal because","Fragments":["it's"]},{"Key":"global namespace,","Fragments":["but","where"]},{"Key":"is atypical.","Fragments":["I've"]},{"Key":"atypical. I've","Fragments":["also"]},{"Key":"also seen","Fragments":["m_"]},{"Key":"seen m_","Fragments":["and"]},{"Key":"m_ and","Fragments":["m"]},{"Key":"and m","Fragments":["prefixes"]},{"Key":"m prefixes","Fragments":["and"]},{"Key":"prefixes and","Fragments":["so"]},{"Key":"think going","Fragments":["forward"]},{"Key":"going forward","Fragments":["we"]},{"Key":"forward we","Fragments":["should"]},{"Key":"should try","Fragments":["to","to"]},{"Key":"to convince","Fragments":["people"]},{"Key":"convince people","Fragments":["to"]},{"Key":"to adhere","Fragments":["to"]},{"Key":"the Core","Fragments":["Guidelines"]},{"Key":"Core Guidelines","Fragments":["whenever"]},{"Key":"Guidelines whenever","Fragments":["reasonable,"]},{"Key":"whenever reasonable,","Fragments":["and"]},{"Key":"reasonable, and","Fragments":["when"]},{"Key":"when unreasonable","Fragments":["send"]},{"Key":"unreasonable send","Fragments":["them"]},{"Key":"send them","Fragments":["a"]},{"Key":"to modify/clarify/extend/get","Fragments":["more"]},{"Key":"modify/clarify/extend/get more","Fragments":["specific."]},{"Key":"more specific.","Fragments":["Having"]},{"Key":"specific. Having","Fragments":["a"]},{"Key":"a consistent","Fragments":["plan","format","feel."]},{"Key":"consistent plan","Fragments":["from"]},{"Key":"plan from","Fragments":["one"]},{"Key":"one team/project","Fragments":["to"]},{"Key":"team/project to","Fragments":["another"]},{"Key":"another would","Fragments":["be"]},{"Key":"good. As","Fragments":["of"]},{"Key":"As of","Fragments":["right"]},{"Key":"of right","Fragments":["now,"]},{"Key":"now, the","Fragments":["only","overall"]},{"Key":"thing the","Fragments":["CG"]},{"Key":"the CG","Fragments":["has"]},{"Key":"CG has","Fragments":["to"]},{"Key":"say on","Fragments":["the"]},{"Key":"the matter","Fragments":["is"]},{"Key":"matter is","Fragments":["(all"]},{"Key":"is (all","Fragments":["following"]},{"Key":"(all following","Fragments":["is"]},{"Key":"following is","Fragments":["a"]},{"Key":"Some styles","Fragments":["distinguishes"]},{"Key":"styles distinguishes","Fragments":["members"]},{"Key":"distinguishes members","Fragments":["from"]},{"Key":"members from","Fragments":["local"]},{"Key":"from local","Fragments":["variable,"]},{"Key":"local variable,","Fragments":["and/or","then"]},{"Key":"variable, and/or","Fragments":["from"]},{"Key":"and/or from","Fragments":["global"]},{"Key":"from global","Fragments":["variable."]},{"Key":" struct","Fragments":["S"]},{"Key":"struct S","Fragments":["{"]},{"Key":" S(int","Fragments":["m)"]},{"Key":"S(int m)","Fragments":[":m_{abs(m)}"]},{"Key":"m) :m_{abs(m)}","Fragments":["{"]},{"Key":":m_{abs(m)} {","Fragments":["}"]},{"Key":"of all_of()","Fragments":["\u0026"]},{"Key":"all_of() \u0026","Fragments":["any_of()."]},{"Key":"\u0026 any_of().","Fragments":["Code"]},{"Key":"any_of(). Code","Fragments":["is"]},{"Key":"declare most","Fragments":["of"]},{"Key":"the \u003cinclude\u003e","Fragments":["(except"]},{"Key":"\u003cinclude\u003e (except","Fragments":["string)"]},{"Key":"(except string)","Fragments":["in"]},{"Key":"string) in","Fragments":[".cpp"]},{"Key":".cpp rather","Fragments":["than"]},{"Key":"than .h","Fragments":["as"]},{"Key":".h as","Fragments":["that's","iteration","version"]},{"Key":"as that's","Fragments":["where"]},{"Key":"that's where","Fragments":["they're","we"]},{"Key":"they're really","Fragments":["used."]},{"Key":"3. Explicit","Fragments":["C"]},{"Key":"Explicit C","Fragments":["style"]},{"Key":"C style","Fragments":["cast","arrays)"]},{"Key":"style cast","Fragments":["to"]},{"Key":"to bool","Fragments":["for"]},{"Key":"bool for","Fragments":["isspace()"]},{"Key":"for isspace()","Fragments":["is"]},{"Key":"isspace() is","Fragments":["unnecessary"]},{"Key":"Consider making","Fragments":["the","them"]},{"Key":"functions const","Fragments":["std::string\u0026,"]},{"Key":"const std::string\u0026,","Fragments":["as"]},{"Key":"std::string\u0026, as","Fragments":["you're"]},{"Key":"as you're","Fragments":["not"]},{"Key":"really modifying","Fragments":["them"]},{"Key":"1. If","Fragments":["you"]},{"Key":"you operate","Fragments":["on","on"]},{"Key":"on std::string","Fragments":["instead","instead"]},{"Key":"of char*,","Fragments":["you","you"]},{"Key":"char*, you","Fragments":["can","can"]},{"Key":"doing while","Fragments":["(*it","(*it"]},{"Key":"while (*it","Fragments":["\u0026\u0026","\u0026\u0026"]},{"Key":"(*it \u0026\u0026","Fragments":["...)","...)"]},{"Key":"\u0026\u0026 ...)","Fragments":["to","to"]},{"Key":"...) to","Fragments":["get","get"]},{"Key":"begin \u0026","Fragments":["end","end","end"]},{"Key":"\u0026 end","Fragments":["of","are","of"]},{"Key":"of string.","Fragments":["They're","They're"]},{"Key":"string. They're","Fragments":["readily","readily"]},{"Key":"They're readily","Fragments":["available","available"]},{"Key":"2. Explicitly","Fragments":["state"]},{"Key":"Explicitly state","Fragments":["your","your"]},{"Key":"state your","Fragments":["assumption","assumption","intent"]},{"Key":"your assumption","Fragments":["for","for"]},{"Key":"assumption for","Fragments":["checking","checking"]},{"Key":"checking isalnum(it[1]).","Fragments":["Are","Are"]},{"Key":"isalnum(it[1]). Are","Fragments":["you","you"]},{"Key":"you looking","Fragments":["for","for"]},{"Key":"for looking","Fragments":["for","for","and","at"]},{"Key":"for '\\0'?","Fragments":["Its","Its"]},{"Key":"'\\0'? Its","Fragments":["good","good"]},{"Key":"Its good","Fragments":["to","to"]},{"Key":"1. Have","Fragments":["a"]},{"Key":"typedef for","Fragments":["vector\u003cstring\u003e"]},{"Key":"2. Why","Fragments":["not","returning"]},{"Key":"use std::tolower()","Fragments":["instead"]},{"Key":"std::tolower() instead","Fragments":["of"]},{"Key":"of boost?","Fragments":["It'll"]},{"Key":"boost? It'll","Fragments":["avoid"]},{"Key":"It'll avoid","Fragments":["inclusion"]},{"Key":"avoid inclusion","Fragments":["of"]},{"Key":"using std::string.","Fragments":["begin","That's"]},{"Key":"std::string. begin","Fragments":["\u0026"]},{"Key":"end are","Fragments":["readily"]},{"Key":"are readily","Fragments":["available"]},{"Key":"4. Prefer","Fragments":["std::for_each"]},{"Key":"Prefer std::for_each","Fragments":["or"]},{"Key":"std::for_each or","Fragments":["copy_if()"]},{"Key":"or copy_if()","Fragments":["to"]},{"Key":"copy_if() to","Fragments":["while(!end)"]},{"Key":" @rhiannon,","Fragments":["You"]},{"Key":"@rhiannon, You","Fragments":["wrote:"]},{"Key":"course, I","Fragments":["could","could"]},{"Key":"`std::string` class","Fragments":["to"]},{"Key":"operate with","Fragments":["the","the"]},{"Key":"the words.","Fragments":["But","But","If"]},{"Key":"words. But","Fragments":["I","I"]},{"Key":"always remember","Fragments":["that","that"]},{"Key":"that someone","Fragments":["would","would","in","would","names"]},{"Key":"someone would","Fragments":["want","want","say"]},{"Key":"\u003e Explicitly","Fragments":["state"]},{"Key":" Unfortunatelly,","Fragments":["I"]},{"Key":"Unfortunatelly, I","Fragments":["don't"]},{"Key":"you trying","Fragments":["to","to"]},{"Key":"With `'\\0'`","Fragments":["the"]},{"Key":"`'\\0'` the","Fragments":["`isalnum()`"]},{"Key":"the `isalnum()`","Fragments":["function"]},{"Key":"`isalnum()` function","Fragments":["returns"]},{"Key":"function returns","Fragments":["`false`.","false.","double,","1,","0,"]},{"Key":"returns `false`.","Fragments":["And"]},{"Key":"`false`. And","Fragments":["that's"]},{"Key":"that's enough","Fragments":["for","for"]},{"Key":"I treid","Fragments":["a"]},{"Key":"treid a","Fragments":["namespace"]},{"Key":"and recieved","Fragments":["boost"]},{"Key":"recieved boost","Fragments":["errors."]},{"Key":"boost errors.","Fragments":["I"]},{"Key":"errors. I","Fragments":["assumed"]},{"Key":"assumed the","Fragments":["boost"]},{"Key":"boost test","Fragments":["suite"]},{"Key":"suite required","Fragments":["a"]},{"Key":"I reverted","Fragments":["back","to"]},{"Key":"reverted back","Fragments":["to"]},{"Key":"to one.","Fragments":["I"]},{"Key":"one. I","Fragments":["have","know","didn't","simply"]},{"Key":"have since","Fragments":["made"]},{"Key":"since made","Fragments":["a"]},{"Key":"namespace work,","Fragments":["I"]},{"Key":"work, I","Fragments":["should"]},{"Key":"have dug","Fragments":["deeper."]},{"Key":"I can,","Fragments":["I"]},{"Key":"can, I","Fragments":["try"]},{"Key":"separate implementation","Fragments":["from"]},{"Key":"implementation from","Fragments":["declaration."]},{"Key":"from declaration.","Fragments":["With"]},{"Key":"declaration. With","Fragments":["a"]},{"Key":"a task","Fragments":["this"]},{"Key":"task this","Fragments":["simple"]},{"Key":"simple it","Fragments":["is"]},{"Key":"is probablty","Fragments":["overkill."]},{"Key":"my bane","Fragments":["in"]},{"Key":"bane in","Fragments":["C++."]},{"Key":"With C++11","Fragments":["you","lambdas"]},{"Key":"can shorten","Fragments":["your"]},{"Key":"your `clean()`","Fragments":["function."]},{"Key":"std::string clean(std::string","Fragments":["message)"]},{"Key":"clean(std::string message)","Fragments":["{"]},{"Key":" message.erase(std::find_if_not(message.crbegin(),","Fragments":["message.crend(),"]},{"Key":"message.erase(std::find_if_not(message.crbegin(), message.crend(),","Fragments":["::isspace).base(),"]},{"Key":"message.crend(), ::isspace).base(),","Fragments":["message.cend());"]},{"Key":" @bella","Fragments":["very"]},{"Key":"@bella very","Fragments":["neat."]},{"Key":"very neat.","Fragments":["Thanks"]},{"Key":"neat. Thanks","Fragments":["for"]},{"Key":" \u003e\u003e\u003e\u003eUnfortunatelly,","Fragments":["I"]},{"Key":"\u003e\u003e\u003e\u003eUnfortunatelly, I","Fragments":["don't"]},{"Key":"say. With","Fragments":["'\\0'"]},{"Key":"With '\\0'","Fragments":["the"]},{"Key":"'\\0' the","Fragments":["isalnum()"]},{"Key":"the isalnum()","Fragments":["function"]},{"Key":"isalnum() function","Fragments":["returns"]},{"Key":"returns false.","Fragments":["And"]},{"Key":"false. And","Fragments":["that's"]},{"Key":"explicitly put","Fragments":["'\\0'"]},{"Key":"put '\\0'","Fragments":["in"]},{"Key":"'\\0' in","Fragments":["your"]},{"Key":"comment for","Fragments":["your","you","your"]},{"Key":" \u003e\u003e\u003e\u003eOf","Fragments":["course,"]},{"Key":"\u003e\u003e\u003e\u003eOf course,","Fragments":["I"]},{"Key":"std::string class","Fragments":["to"]},{"Key":"pass const","Fragments":["char*"]},{"Key":"char* to","Fragments":["my","allocating"]},{"Key":"Interesting use-case","Fragments":["to","to"]},{"Key":"use-case to","Fragments":["profile","profile"]},{"Key":"profile \u0026","Fragments":["see","see"]},{"Key":"\u0026 see","Fragments":["the","the"]},{"Key":"speed gain.","Fragments":["For","For"]},{"Key":"gain. For","Fragments":["most","most"]},{"Key":"For most","Fragments":["cases","cases"]},{"Key":"prefer readability","Fragments":["\u0026","\u0026"]},{"Key":"readability \u0026","Fragments":["maintainability","maintainability"]},{"Key":"\u0026 maintainability","Fragments":["over","over"]},{"Key":"maintainability over","Fragments":["speed.","speed."]},{"Key":"What platform","Fragments":["did"]},{"Key":"platform did","Fragments":["you"]},{"Key":"run this","Fragments":["on?","with"]},{"Key":"this on?","Fragments":["There"]},{"Key":"on? There","Fragments":["is"]},{"Key":"no guarantee","Fragments":["that","in"]},{"Key":"guarantee that","Fragments":["long","the"]},{"Key":"that long","Fragments":["is"]},{"Key":"is large","Fragments":["enough,","then","then","then"]},{"Key":"large enough,","Fragments":["and"]},{"Key":"system (gcc,","Fragments":["x86_64)"]},{"Key":"(gcc, x86_64)","Fragments":["this"]},{"Key":"x86_64) this","Fragments":["won't"]},{"Key":"this won't","Fragments":["work."]},{"Key":"moving score_list","Fragments":["to"]},{"Key":"score_list to","Fragments":["the"]},{"Key":"the cpp,","Fragments":["unless","but"]},{"Key":"cpp, unless","Fragments":["you"]},{"Key":"it's part","Fragments":["of"]},{"Key":"your interface.","Fragments":["To"]},{"Key":"interface. To","Fragments":["be"]},{"Key":"be thorough","Fragments":["you"]},{"Key":"thorough you","Fragments":["might"]},{"Key":"also consider","Fragments":["declaring","using","using","using"]},{"Key":"consider declaring","Fragments":["it","the","them","the"]},{"Key":"declaring it","Fragments":["static","as"]},{"Key":"it static","Fragments":["or"]},{"Key":"or within","Fragments":["an"]},{"Key":"namespace, though","Fragments":["I'm"]},{"Key":"though I'm","Fragments":["unconvinced"]},{"Key":"I'm unconvinced","Fragments":["that's"]},{"Key":"unconvinced that's","Fragments":["necessary"]},{"Key":"that's necessary","Fragments":["especially"]},{"Key":"necessary especially","Fragments":["given"]},{"Key":"given it's","Fragments":["in"]},{"Key":"The variable","Fragments":["init"]},{"Key":"variable init","Fragments":["is"]},{"Key":"init is","Fragments":["unnecessary."]},{"Key":"is unnecessary.","Fragments":["You"]},{"Key":"pass score_t{}","Fragments":["or"]},{"Key":"score_t{} or","Fragments":["score_t{0}"]},{"Key":"or score_t{0}","Fragments":["as"]},{"Key":"score_t{0} as","Fragments":["the"]},{"Key":" uint32_t","Fragments":["seems"]},{"Key":"uint32_t seems","Fragments":["like"]},{"Key":"odd choice","Fragments":["for"]},{"Key":"for score_t.","Fragments":["There's"]},{"Key":"score_t. There's","Fragments":["really"]},{"Key":"There's really","Fragments":["two","no","not","no","no"]},{"Key":"really two","Fragments":["hard"]},{"Key":"two hard","Fragments":["requirements"]},{"Key":"hard requirements","Fragments":["for"]},{"Key":"for score_t,","Fragments":["one"]},{"Key":"score_t, one","Fragments":["is"]},{"Key":"an individual","Fragments":["score","`bob`"]},{"Key":"individual score","Fragments":["and"]},{"Key":"a word's","Fragments":["scores.","letter"]},{"Key":"word's scores.","Fragments":["The"]},{"Key":"scores. The","Fragments":["former"]},{"Key":"The former","Fragments":["fits"]},{"Key":"former fits","Fragments":["easily"]},{"Key":"fits easily","Fragments":["into"]},{"Key":"easily into","Fragments":["the"]},{"Key":"the smallest","Fragments":["of","string"]},{"Key":"smallest of","Fragments":["standard"]},{"Key":"of standard","Fragments":["integer"]},{"Key":"standard integer","Fragments":["types"]},{"Key":"types (char).","Fragments":["The"]},{"Key":"(char). The","Fragments":["sum"]},{"Key":"sum can","Fragments":["theoretically"]},{"Key":"can theoretically","Fragments":["overflow"]},{"Key":"theoretically overflow","Fragments":["no"]},{"Key":"overflow no","Fragments":["matter"]},{"Key":"matter what","Fragments":["integer"]},{"Key":"what integer","Fragments":["you"]},{"Key":"integer you","Fragments":["choose,"]},{"Key":"you choose,","Fragments":["since","since"]},{"Key":"choose, since","Fragments":["a","it's"]},{"Key":"since a","Fragments":["string","decent","return"]},{"Key":"any size_t","Fragments":["length."]},{"Key":"size_t length.","Fragments":["That"]},{"Key":"length. That","Fragments":["said,"]},{"Key":"said, given","Fragments":["this"]},{"Key":"given this","Fragments":["is"]},{"Key":"actually Scrabble","Fragments":["the"]},{"Key":"Scrabble the","Fragments":["word"]},{"Key":"be longer","Fragments":["than"]},{"Key":"than 15","Fragments":["letters","-"]},{"Key":"15 letters","Fragments":["since"]},{"Key":"letters since","Fragments":["it"]},{"Key":"wouldn't fit","Fragments":["on"]},{"Key":"fit on","Fragments":["the","one"]},{"Key":"the board.","Fragments":["Even"]},{"Key":"board. Even","Fragments":["if"]},{"Key":"be trying","Fragments":["to","to"]},{"Key":"to score","Fragments":["15"]},{"Key":"score 15","Fragments":["Qs"]},{"Key":"15 Qs","Fragments":["and"]},{"Key":"Qs and","Fragments":["Zs"]},{"Key":"and Zs","Fragments":["(there"]},{"Key":"Zs (there","Fragments":["aren't"]},{"Key":"(there aren't","Fragments":["that"]},{"Key":"aren't that","Fragments":["many"]},{"Key":"that many","Fragments":["Q","\"if\"s."]},{"Key":"many Q","Fragments":["and"]},{"Key":"Q and","Fragments":["Z"]},{"Key":"and Z","Fragments":["tiles)"]},{"Key":"Z tiles)","Fragments":["that"]},{"Key":"tiles) that","Fragments":["still"]},{"Key":"that still","Fragments":["leads"]},{"Key":"still leads","Fragments":["to"]},{"Key":"a maximum","Fragments":["sum"]},{"Key":"maximum sum","Fragments":["of"]},{"Key":"of 150,","Fragments":["which"]},{"Key":"150, which","Fragments":["still"]},{"Key":"which still","Fragments":["fits"]},{"Key":"still fits","Fragments":["comfortably"]},{"Key":"fits comfortably","Fragments":["within"]},{"Key":"comfortably within","Fragments":["uint8_t."]},{"Key":"within uint8_t.","Fragments":["So"]},{"Key":"uint8_t. So","Fragments":["I"]},{"Key":"most reasonable","Fragments":["choices"]},{"Key":"reasonable choices","Fragments":["are:"]},{"Key":"* short","Fragments":["or"]},{"Key":"short or","Fragments":["int,"]},{"Key":"or int,","Fragments":["whatever"]},{"Key":"int, whatever","Fragments":["you"]},{"Key":"whatever you","Fragments":["think","like","want"]},{"Key":"think confuses/distracts","Fragments":["the"]},{"Key":"confuses/distracts the","Fragments":["reader"]},{"Key":"reader less,","Fragments":["since"]},{"Key":"less, since","Fragments":["realistically"]},{"Key":"since realistically","Fragments":["this"]},{"Key":"choice just","Fragments":["isn't"]},{"Key":"just isn't","Fragments":["very"]},{"Key":"very important","Fragments":["(and"]},{"Key":"important (and","Fragments":["a"]},{"Key":"short is","Fragments":["guaranteed"]},{"Key":"guaranteed by","Fragments":["the"]},{"Key":"standard to","Fragments":["be"]},{"Key":"be large","Fragments":["enough)","enough"]},{"Key":"* uint_fast8_t","Fragments":["if"]},{"Key":"uint_fast8_t if","Fragments":["you"]},{"Key":"you fear","Fragments":["partial-word","cache"]},{"Key":"fear partial-word","Fragments":["instructions,"]},{"Key":"partial-word instructions,","Fragments":["and"]},{"Key":"instructions, and","Fragments":["want"]},{"Key":"* uint_least8_t","Fragments":["if"]},{"Key":"uint_least8_t if","Fragments":["you"]},{"Key":"fear cache","Fragments":["invalidation,"]},{"Key":"cache invalidation,","Fragments":["and"]},{"Key":"invalidation, and","Fragments":["you"]},{"Key":"super portable","Fragments":["(though"]},{"Key":"portable (though","Fragments":["if"]},{"Key":"(though if","Fragments":["you're"]},{"Key":"cache you","Fragments":["wouldn't"]},{"Key":"using std::map","Fragments":["for"]},{"Key":"std::map for","Fragments":["this)"]},{"Key":"the thoughtful","Fragments":["comments."]},{"Key":"thoughtful comments.","Fragments":["I"]},{"Key":"agree `uint32_t`","Fragments":["was"]},{"Key":"`uint32_t` was","Fragments":["not"]},{"Key":"not well","Fragments":["thought","standardized","generalized."]},{"Key":"well thought","Fragments":["out."]},{"Key":"thought out.","Fragments":["Part"]},{"Key":"out. Part","Fragments":["of"]},{"Key":"Part of","Fragments":["the","my"]},{"Key":"for aliasing","Fragments":["it"]},{"Key":"aliasing it","Fragments":["--"]},{"Key":"it --","Fragments":["I"]},{"Key":"-- I","Fragments":["knew"]},{"Key":"knew it","Fragments":["would"]},{"Key":"changed later.","Fragments":["I"]},{"Key":"used something","Fragments":["that","bigger"]},{"Key":"that holds","Fragments":["more","the"]},{"Key":"holds more","Fragments":["than"]},{"Key":"the largest","Fragments":["reasonable","value"]},{"Key":"largest reasonable","Fragments":["scrabble"]},{"Key":"reasonable scrabble","Fragments":["word"]},{"Key":"scrabble word","Fragments":["score"]},{"Key":"word score","Fragments":["for"]},{"Key":"score for","Fragments":["a"]},{"Key":"couple reasons:","Fragments":["(1)"]},{"Key":"reasons: (1)","Fragments":["extension"]},{"Key":"(1) extension","Fragments":["to"]},{"Key":"extension to","Fragments":["double/triple"]},{"Key":"to double/triple","Fragments":["word"]},{"Key":"double/triple word","Fragments":["scores;"]},{"Key":"word scores;","Fragments":["and"]},{"Key":"scores; and","Fragments":["(2)"]},{"Key":"(2) adding","Fragments":["a"]},{"Key":"a game","Fragments":["score"]},{"Key":"game score","Fragments":["that"]},{"Key":"score that","Fragments":["sums"]},{"Key":"that sums","Fragments":["up"]},{"Key":"sums up","Fragments":["the"]},{"Key":"word scores.","Fragments":["But"]},{"Key":"scores. But","Fragments":["that's"]},{"Key":"probably premature/not","Fragments":["justified."]},{"Key":"My typical","Fragments":["preference"]},{"Key":"typical preference","Fragments":["is"]},{"Key":"preference is","Fragments":["just"]},{"Key":"use `int`","Fragments":["unless"]},{"Key":"`int` unless","Fragments":["there"]},{"Key":"unless there","Fragments":["are"]},{"Key":"are real","Fragments":["performance"]},{"Key":"real performance","Fragments":["reasons"]},{"Key":"performance reasons","Fragments":["not","(it's"]},{"Key":"reasons not","Fragments":["to."]},{"Key":"not to.","Fragments":["Here"]},{"Key":"to. Here","Fragments":["I"]},{"Key":"Here I","Fragments":["wanted"]},{"Key":"indicate I","Fragments":["should"]},{"Key":"should think","Fragments":["about"]},{"Key":"a bit---so","Fragments":["thanks"]},{"Key":"bit---so thanks","Fragments":["for"]},{"Key":"me do","Fragments":["that.","what"]},{"Key":"that. (Also","Fragments":["`fast`"]},{"Key":"(Also `fast`","Fragments":["and"]},{"Key":"`fast` and","Fragments":["`least`"]},{"Key":"and `least`","Fragments":["variants"]},{"Key":"`least` variants","Fragments":["are"]},{"Key":"variants are","Fragments":["new"]},{"Key":"are new","Fragments":["to","to"]},{"Key":"One qn:","Fragments":["can"]},{"Key":"qn: can","Fragments":["you"]},{"Key":"explain to","Fragments":["me"]},{"Key":"me what","Fragments":["putting"]},{"Key":"what putting","Fragments":["`score_list`"]},{"Key":"putting `score_list`","Fragments":["in"]},{"Key":"`score_list` in","Fragments":["an"]},{"Key":"namespace does?","Fragments":["I've"]},{"Key":"does? I've","Fragments":["seen"]},{"Key":"seen that","Fragments":["idiom"]},{"Key":"that idiom","Fragments":["elsewhere,"]},{"Key":"idiom elsewhere,","Fragments":["and"]},{"Key":"elsewhere, and","Fragments":["don't"]},{"Key":" @marie,","Fragments":["you"]},{"Key":"@marie, you","Fragments":["wrote:"]},{"Key":"\u003e Interesting","Fragments":["use-case"]},{"Key":"Unfortunately `std::string`","Fragments":["does"]},{"Key":"`std::string` does","Fragments":["not"]},{"Key":"add more","Fragments":["readability.","checks","special","types."]},{"Key":"more readability.","Fragments":["And"]},{"Key":"readability. And","Fragments":["instead"]},{"Key":"And instead","Fragments":["of","of"]},{"Key":"of checking","Fragments":["for","each","for","for","some","length"]},{"Key":"a `'\\0'`,","Fragments":["I"]},{"Key":"`'\\0'`, I","Fragments":["have"]},{"Key":"for `it","Fragments":["=="]},{"Key":"`it ==","Fragments":["end`,"]},{"Key":"== end`,","Fragments":["which"]},{"Key":"end`, which","Fragments":["is"]},{"Key":"Boost Format","Fragments":["for"]},{"Key":"Format for","Fragments":["this."]},{"Key":"this. That's","Fragments":["a"]},{"Key":"good choice.","Fragments":["And","I"]},{"Key":"choice. And","Fragments":["the"]},{"Key":"of s","Fragments":["there"]},{"Key":"s there","Fragments":["is"]},{"Key":"is nice.","Fragments":["I","On"]},{"Key":"variable if","Fragments":["I"]},{"Key":"were writing","Fragments":["it,","it:"]},{"Key":"writing it,","Fragments":["but"]},{"Key":"but being","Fragments":["on"]},{"Key":"being on","Fragments":["the"]},{"Key":"side (reading)","Fragments":["it's"]},{"Key":"(reading) it's","Fragments":["pleasant."]},{"Key":"consider moving","Fragments":["the"]},{"Key":"== end","Fragments":["case"]},{"Key":"end case","Fragments":["out"]},{"Key":"in sing?","Fragments":["I"]},{"Key":"sing? I","Fragments":["think"]},{"Key":"might simplify","Fragments":["it"]},{"Key":"simplify it","Fragments":["slightly:"]},{"Key":"= start;","Fragments":["i"]},{"Key":"start; i","Fragments":["\u003e"]},{"Key":"\u003e end;","Fragments":["--i"]},{"Key":"end; --i","Fragments":[")"]},{"Key":" accum","Fragments":["+="]},{"Key":"accum +=","Fragments":["verse(","verse("]},{"Key":"+= verse(","Fragments":["i","end"]},{"Key":"verse( i","Fragments":[");"]},{"Key":" accum.push_back(","Fragments":["'\\n'"]},{"Key":"accum.push_back( '\\n'","Fragments":[");"]},{"Key":"return accum","Fragments":["+="]},{"Key":"verse( end","Fragments":[");"]},{"Key":"Thanks Max!","Fragments":["Both"]},{"Key":"Max! Both","Fragments":["suggestions"]},{"Key":"Both suggestions","Fragments":["have"]},{"Key":"suggestions have","Fragments":["been"]},{"Key":"Oh, nice","Fragments":["suggestion!"]},{"Key":"nice suggestion!","Fragments":["I'll"]},{"Key":"suggestion! I'll","Fragments":["do"]},{"Key":"do that,","Fragments":["thanks.","so","what","we","but","let"]},{"Key":"Looks great.","Fragments":["But"]},{"Key":"the exclamation","Fragments":["regex.","is"]},{"Key":"Could nucleotide_counts","Fragments":["return"]},{"Key":"nucleotide_counts return","Fragments":["const"]},{"Key":"const map\u0026?","Fragments":["Returning"]},{"Key":"map\u0026? Returning","Fragments":["by"]},{"Key":"value means","Fragments":["copying"]},{"Key":"means copying","Fragments":["the"]},{"Key":"map, and","Fragments":["map","removing"]},{"Key":"and map","Fragments":["normally","that","is"]},{"Key":"map normally","Fragments":["does","requires"]},{"Key":"normally does","Fragments":["size()"]},{"Key":"does size()","Fragments":["separate"]},{"Key":"size() separate","Fragments":["allocations"]},{"Key":"separate allocations","Fragments":["so"]},{"Key":"allocations so","Fragments":["that"]},{"Key":"std; in","Fragments":["the"]},{"Key":"file is","Fragments":["redundant,","empty",".hpp.","located","bad"]},{"Key":"redundant, which","Fragments":["actually"]},{"Key":"which actually","Fragments":["points"]},{"Key":"actually points","Fragments":["to"]},{"Key":"with putting","Fragments":["it"]},{"Key":"header -","Fragments":["anyone"]},{"Key":"- anyone","Fragments":["who"]},{"Key":"header gets","Fragments":["all"]},{"Key":"gets all","Fragments":["of"]},{"Key":"of std","Fragments":["shoved","algos,"]},{"Key":"std shoved","Fragments":["into"]},{"Key":"shoved into","Fragments":["the"]},{"Key":"namespace which","Fragments":["can","will","you"]},{"Key":"be dangerous","Fragments":["(especially","in","-"]},{"Key":"dangerous (especially","Fragments":["if"]},{"Key":"(especially if","Fragments":["someone"]},{"Key":"someone also","Fragments":["did"]},{"Key":"also did","Fragments":["using","not"]},{"Key":"did using","Fragments":["namespace"]},{"Key":"namespace boost).","Fragments":["I"]},{"Key":"boost). I","Fragments":["normally"]},{"Key":"normally avoid","Fragments":["using"]},{"Key":"do have","Fragments":["something","one"]},{"Key":"namespace fs","Fragments":["="]},{"Key":"fs =","Fragments":["boost::filesystem;"]},{"Key":"I'd put","Fragments":["it","a"]},{"Key":"file at","Fragments":["least","once!"]},{"Key":"least inside","Fragments":["a"]},{"Key":"more restricted","Fragments":["scope"]},{"Key":"restricted scope","Fragments":["like"]},{"Key":"class. FWIW","Fragments":["there"]},{"Key":"FWIW there","Fragments":["*is*"]},{"Key":"there *is*","Fragments":["a"]},{"Key":"*is* a","Fragments":["situation"]},{"Key":"a situation","Fragments":["where","known","where"]},{"Key":"situation where","Fragments":["these","talking"]},{"Key":"where these","Fragments":["\"convenience\""]},{"Key":"these \"convenience\"","Fragments":["things"]},{"Key":"\"convenience\" things","Fragments":["are"]},{"Key":"than convenience,","Fragments":["it's"]},{"Key":"convenience, it's","Fragments":["the"]},{"Key":"do it:","Fragments":["inside"]},{"Key":"it: inside","Fragments":["a"]},{"Key":"void foo(","Fragments":["T\u0026"]},{"Key":"foo( T\u0026","Fragments":["t"]},{"Key":"T\u0026 t","Fragments":[")"]},{"Key":" sort(","Fragments":["begin(t),"]},{"Key":"sort( begin(t),","Fragments":["end(t)"]},{"Key":"begin(t), end(t)","Fragments":[");"]},{"Key":"That allows","Fragments":["people"]},{"Key":"allows people","Fragments":["to"]},{"Key":"define their","Fragments":["own"]},{"Key":"own begin","Fragments":["end"]},{"Key":"end and/or","Fragments":["sort"]},{"Key":"and/or sort","Fragments":["as"]},{"Key":"sort as","Fragments":["needed"]},{"Key":"as needed","Fragments":["in"]},{"Key":"own namespace","Fragments":["which"]},{"Key":"be preferred","Fragments":["over"]},{"Key":"preferred over","Fragments":["the"]},{"Key":"std versions,","Fragments":["but"]},{"Key":"versions, but","Fragments":["falling"]},{"Key":"but falling","Fragments":["back"]},{"Key":"falling back","Fragments":["to"]},{"Key":"std version","Fragments":["if"]},{"Key":"version if","Fragments":["specific"]},{"Key":"if specific","Fragments":["ones"]},{"Key":"specific ones","Fragments":["are"]},{"Key":"ones are","Fragments":["missing.","using"]},{"Key":"Nice! :+1:","Fragments":["Adding"]},{"Key":":+1: Adding","Fragments":["some"]},{"Key":"Adding some","Fragments":["namespaces"]},{"Key":"some namespaces","Fragments":["to"]},{"Key":"namespaces to","Fragments":["the","change"]},{"Key":"your file","Fragments":["(e.g.,",":)"]},{"Key":"file (e.g.,","Fragments":["`using"]},{"Key":"(e.g., `using","Fragments":["namespace"]},{"Key":"namespace std;`)","Fragments":["can"]},{"Key":"std;`) can","Fragments":["cut"]},{"Key":"can cut","Fragments":["down","out"]},{"Key":"actually found","Fragments":["this"]},{"Key":"one pretty","Fragments":["challenging"]},{"Key":"pretty challenging","Fragments":["(but"]},{"Key":"challenging (but","Fragments":["I"]},{"Key":"polymorphism for","Fragments":["the"]},{"Key":"verses to","Fragments":["solve"]},{"Key":"the \"spider\"","Fragments":["special"]},{"Key":"\"spider\" special","Fragments":["case"]},{"Key":"didn't actually","Fragments":["know"]},{"Key":"actually know","Fragments":["how"]},{"Key":"to DO","Fragments":["that"]},{"Key":"DO that","Fragments":["in"]},{"Key":"C++ yet,","Fragments":["so...."]},{"Key":"yet, so....","Fragments":["yeah)."]},{"Key":"remove all","Fragments":["the"]},{"Key":"the punctuation","Fragments":["and","to","marks"]},{"Key":"and convert","Fragments":["to"]},{"Key":"case initially","Fragments":["possibly"]},{"Key":"initially possibly","Fragments":["simplifying"]},{"Key":"possibly simplifying","Fragments":["the"]},{"Key":"code flow","Fragments":["but"]},{"Key":"flow but","Fragments":["doing"]},{"Key":"but doing","Fragments":["possibly","the"]},{"Key":"doing possibly","Fragments":["slightly"]},{"Key":"possibly slightly","Fragments":["more"]},{"Key":"slightly more","Fragments":["work","concise:","readable"]},{"Key":"work algorithmically.","Fragments":["Or"]},{"Key":"algorithmically. Or","Fragments":["is"]},{"Key":"operate over","Fragments":["individual"]},{"Key":"over individual","Fragments":["words"]},{"Key":"am currently","Fragments":["doing?"]},{"Key":"the insertion/increment","Fragments":["of"]},{"Key":"insertion/increment of","Fragments":["the"]},{"Key":"map could","Fragments":["be"]},{"Key":"more elegantly","Fragments":["but"]},{"Key":"elegantly but","Fragments":["I'm"]},{"Key":"I'm uncertain","Fragments":["how"]},{"Key":"uncertain how","Fragments":["to"]},{"Key":"couple very","Fragments":["minor"]},{"Key":"class doesn't","Fragments":["have"]},{"Key":"any data","Fragments":["members"]},{"Key":"members or","Fragments":["inheritance"]},{"Key":"or inheritance","Fragments":["perhaps"]},{"Key":"inheritance perhaps","Fragments":["it"]},{"Key":"perhaps it","Fragments":["should"]},{"Key":"using array","Fragments":["for","notation."]},{"Key":"for animals","Fragments":["instead"]},{"Key":"animals instead","Fragments":["of"]},{"Key":"of vector,","Fragments":["since"]},{"Key":"vector, since","Fragments":["you"]},{"Key":"know exactly","Fragments":["how"]},{"Key":"elements there","Fragments":["will"]},{"Key":"be. In","Fragments":["theory"]},{"Key":"In theory","Fragments":["that"]},{"Key":"theory that","Fragments":["should","inline"]},{"Key":"should save","Fragments":["you"]},{"Key":"you one","Fragments":["dynamic"]},{"Key":"one dynamic","Fragments":["memory"]},{"Key":"on startup,","Fragments":["but"]},{"Key":"startup, but","Fragments":["one"]},{"Key":"but one","Fragments":["might","has"]},{"Key":"might suppose","Fragments":["a"]},{"Key":"suppose a","Fragments":["super"]},{"Key":"a super","Fragments":["smart","simple","huge","huge"]},{"Key":"super smart","Fragments":["compiler"]},{"Key":"smart compiler","Fragments":["might"]},{"Key":"that (don't","Fragments":["count"]},{"Key":"(don't count","Fragments":["on"]},{"Key":"count on","Fragments":["it"]},{"Key":"it though,","Fragments":["I"]},{"Key":"checked with","Fragments":["gcc"]},{"Key":"gcc 4.8.3","Fragments":["at"]},{"Key":"4.8.3 at","Fragments":["high-level"]},{"Key":"at high-level","Fragments":["optimization"]},{"Key":"high-level optimization","Fragments":["-O3"]},{"Key":"optimization -O3","Fragments":["+"]},{"Key":"-O3 +","Fragments":["valgrind"]},{"Key":"+ valgrind","Fragments":["and"]},{"Key":"valgrind and","Fragments":["no"]},{"Key":"no dice,","Fragments":["the"]},{"Key":"dice, the","Fragments":["vector"]},{"Key":"vector costs","Fragments":["you"]},{"Key":"costs you","Fragments":["an"]},{"Key":"an an","Fragments":["alloc)."]},{"Key":"an alloc).","Fragments":["And"]},{"Key":"alloc). And","Fragments":["of"]},{"Key":"And of","Fragments":["course","course"]},{"Key":"course little","Fragments":["things"]},{"Key":"little things","Fragments":["like"]},{"Key":"like size()","Fragments":["changes"]},{"Key":"size() changes","Fragments":["from"]},{"Key":"runtime call","Fragments":["to"]},{"Key":"a constexpr","Fragments":["one."]},{"Key":"constexpr one.","Fragments":["Performance"]},{"Key":"one. Performance","Fragments":["aside,"]},{"Key":"Performance aside,","Fragments":["the"]},{"Key":"aside, the","Fragments":["restrictiveness"]},{"Key":"the restrictiveness","Fragments":["of"]},{"Key":"restrictiveness of","Fragments":["the"]},{"Key":"type array","Fragments":["helps"]},{"Key":"array helps","Fragments":["with"]},{"Key":"with self-documentation","Fragments":["of"]},{"Key":"self-documentation of","Fragments":["what"]},{"Key":"things may","Fragments":["or"]},{"Key":"may or","Fragments":["may"]},{"Key":"or may","Fragments":["not"]},{"Key":" Inside","Fragments":["verse","`bob::check_yelling`"]},{"Key":"Inside verse","Fragments":["you"]},{"Key":"verse you","Fragments":["could"]},{"Key":"declaring the","Fragments":["variable","classification","functions"]},{"Key":"variable animal","Fragments":["as"]},{"Key":"animal as","Fragments":["auto\u0026."]},{"Key":"as auto\u0026.","Fragments":["The"]},{"Key":"auto\u0026. The","Fragments":["way"]},{"Key":"value copy","Fragments":["of"]},{"Key":"what's in","Fragments":["animals"]},{"Key":"in animals","Fragments":["rather"]},{"Key":"animals rather","Fragments":["that"]},{"Key":"rather that","Fragments":["just"]},{"Key":"just reference","Fragments":["it."]},{"Key":"reference it.","Fragments":["In"]},{"Key":"big deal","Fragments":["in","since"]},{"Key":"deal in","Fragments":["particular"]},{"Key":"particular because","Fragments":["the"]},{"Key":"optimizer *does*","Fragments":["fix"]},{"Key":"*does* fix","Fragments":["this"]},{"Key":"this (you","Fragments":["can"]},{"Key":"additional calls","Fragments":["without"]},{"Key":"calls without","Fragments":["optimization"]},{"Key":"without optimization","Fragments":["but"]},{"Key":"it generates","Fragments":["exactly"]},{"Key":"generates exactly","Fragments":["the"]},{"Key":"same output).","Fragments":["But"]},{"Key":"output). But","Fragments":["using"]},{"Key":"But using","Fragments":["references"]},{"Key":"using references","Fragments":["where"]},{"Key":"references where","Fragments":["appropriate"]},{"Key":"where appropriate","Fragments":["is"]},{"Key":"appropriate is","Fragments":["a"]},{"Key":"decent habit","Fragments":["to"]},{"Key":"be in,","Fragments":["IIMO."]},{"Key":" Premature","Fragments":["optimization"]},{"Key":"Premature optimization","Fragments":["probably,"]},{"Key":"optimization probably,","Fragments":["but"]},{"Key":"it's reasonable","Fragments":["to","to"]},{"Key":"assume dna","Fragments":["strands"]},{"Key":"dna strands","Fragments":["can"]},{"Key":"strands can","Fragments":["be"]},{"Key":"very long,","Fragments":["decided"]},{"Key":"long, decided","Fragments":["to"]},{"Key":"`map\u003cchar, char\u003e`","Fragments":["to"]},{"Key":"char\u003e` to","Fragments":["an"]},{"Key":"an inline'd","Fragments":["switch."]},{"Key":"inline'd switch.","Fragments":["Should"]},{"Key":"switch. Should","Fragments":["be"]},{"Key":"say \"storing","Fragments":["[std::regex]"]},{"Key":"\"storing [std::regex]","Fragments":["as"]},{"Key":"[std::regex] as","Fragments":["static"]},{"Key":"static local","Fragments":["variables\",","variables,"]},{"Key":"local variables\",","Fragments":["is"]},{"Key":"variables\", is","Fragments":["it"]},{"Key":"it enough","Fragments":["to"]},{"Key":"do declare","Fragments":["the"]},{"Key":"declare the","Fragments":["function","function","bools","input"]},{"Key":"static ?","Fragments":["(like"]},{"Key":"? (like","Fragments":["iteration"]},{"Key":"(like iteration","Fragments":["3)"]},{"Key":"Or should","Fragments":["I"]},{"Key":"static std::regex","Fragments":["myRegex(\"…\");","reg(\"^"]},{"Key":"of regex,","Fragments":["and","and"]},{"Key":"regex, and","Fragments":["then","very"]},{"Key":"a (possibly","Fragments":["static)"]},{"Key":"(possibly static)","Fragments":["function"]},{"Key":"static) function","Fragments":["?"]},{"Key":"lambda function","Fragments":["to","like:","as","does","rather"]},{"Key":"reduce looping","Fragments":["through"]},{"Key":"input phrase","Fragments":["by"]},{"Key":"phrase by","Fragments":["removing"]},{"Key":"removing punctuation","Fragments":["and"]},{"Key":"and lowering","Fragments":["the"]},{"Key":"lowering the","Fragments":["case"]},{"Key":"case all","Fragments":["in"]},{"Key":"also streamlined","Fragments":["entering"]},{"Key":"streamlined entering","Fragments":["into"]},{"Key":"entering into","Fragments":["the","the"]},{"Key":"have your","Fragments":["input","functions","helper","hamming::compute()"]},{"Key":"input file,","Fragments":["but"]},{"Key":"ran it","Fragments":["on","locally,"]},{"Key":"a passwordlist","Fragments":["that"]},{"Key":"passwordlist that","Fragments":["came"]},{"Key":"came with","Fragments":["cracklib:"]},{"Key":"g++ -O3","Fragments":["-std=c++11"]},{"Key":"-O3 -std=c++11","Fragments":["test.cpp"]},{"Key":"-std=c++11 test.cpp","Fragments":["-o"]},{"Key":"test.cpp -o","Fragments":["test"]},{"Key":"$ ln","Fragments":["-s"]},{"Key":"ln -s","Fragments":["/usr/share/dict/cracklib-small"]},{"Key":"-s /usr/share/dict/cracklib-small","Fragments":["INPUT.txt"]},{"Key":" Character","Fragments":["count:","count:"]},{"Key":"Character count:","Fragments":["477238","3973995"]},{"Key":" Time:","Fragments":["65212","41459","42443","329018","485027","306017"]},{"Key":"Time: 65212","Fragments":["microseconds."]},{"Key":" Max","Fragments":["element:","element:","element:","element:","element:","element:"]},{"Key":"Max element:","Fragments":["s","s","s","\"the\"","\"the\"","\"the\""]},{"Key":"element: s","Fragments":["3635","3635","3635"]},{"Key":"Time: 41459","Fragments":["microseconds."]},{"Key":"Time: 42443","Fragments":["microseconds."]},{"Key":"I expected.","Fragments":["I'm"]},{"Key":"expected. I'm","Fragments":["curious"]},{"Key":"curious though","Fragments":["why"]},{"Key":"though why","Fragments":["for"]},{"Key":"why for","Fragments":["you"]},{"Key":"the distance()","Fragments":["version"]},{"Key":"distance() version","Fragments":["is"]},{"Key":"than copying","Fragments":["the","each"]},{"Key":"then overwriting","Fragments":["it"]},{"Key":"overwriting it","Fragments":["immediately?"]},{"Key":"One quick","Fragments":["thing","thing"]},{"Key":"quick thing","Fragments":["would","is"]},{"Key":"thing would","Fragments":["be","read"]},{"Key":"when iterating","Fragments":["over","over","through"]},{"Key":"reference rather","Fragments":["than","than","than"]},{"Key":"value as","Fragments":["you","arguments","soon"]},{"Key":" for(","Fragments":["auto","char\u0026"]},{"Key":"for( auto","Fragments":["const"]},{"Key":"\u0026 it","Fragments":[":"]},{"Key":"it :","Fragments":["in","input)","greeting)","message)"]},{"Key":"avoid creating","Fragments":["an","an"]},{"Key":"creating an","Fragments":["extraneous","unused","individual"]},{"Key":"an extraneous","Fragments":["copy"]},{"Key":"extraneous copy","Fragments":["of"]},{"Key":"will thus","Fragments":["be"]},{"Key":"thus be","Fragments":["faster."]},{"Key":"using explicit","Fragments":["formulas"]},{"Key":"explicit formulas","Fragments":["to","for"]},{"Key":"formulas to","Fragments":["calculate"]},{"Key":"to calculate","Fragments":["the","and","and"]},{"Key":"the sums","Fragments":["rather"]},{"Key":"sums rather","Fragments":["than"]},{"Key":"of minor","Fragments":["points"]},{"Key":"minor points","Fragments":["on"]},{"Key":"points on","Fragments":["your"]},{"Key":"1) In","Fragments":["``square_of_sums``","your","such"]},{"Key":"In ``square_of_sums``","Fragments":["I"]},{"Key":"``square_of_sums`` I","Fragments":["would"]},{"Key":"right shift","Fragments":["to"]},{"Key":"shift to","Fragments":["divide","the"]},{"Key":"to divide","Fragments":["by"]},{"Key":"by 4.","Fragments":["The"]},{"Key":"compiler should","Fragments":["be","at"]},{"Key":"be smart","Fragments":["enough"]},{"Key":"smart enough","Fragments":["to"]},{"Key":"optimize that","Fragments":["for"]},{"Key":"you anyway","Fragments":["so"]},{"Key":"anyway so","Fragments":["you"]},{"Key":"be gaining","Fragments":["anything"]},{"Key":"gaining anything","Fragments":["in"]},{"Key":"anything in","Fragments":["speed.","this","performance.","it,"]},{"Key":"in speed.","Fragments":["However"]},{"Key":"speed. However","Fragments":["you"]},{"Key":"However you","Fragments":["do","should","could","could"]},{"Key":"do sacrifice","Fragments":["readability"]},{"Key":"sacrifice readability","Fragments":["of","without"]},{"Key":"2) Instead","Fragments":["of","of"]},{"Key":"of explicitly","Fragments":["writing"]},{"Key":"explicitly writing","Fragments":["out"]},{"Key":"the repeated","Fragments":["multiplications"]},{"Key":"repeated multiplications","Fragments":["use"]},{"Key":"multiplications use","Fragments":["the"]},{"Key":"the ``pow``","Fragments":["function"]},{"Key":"``pow`` function","Fragments":["from"]},{"Key":"function from","Fragments":["`\u003ccmath\u003e`","a"]},{"Key":"from `\u003ccmath\u003e`","Fragments":["this"]},{"Key":"`\u003ccmath\u003e` this","Fragments":["will"]},{"Key":"compile down","Fragments":["to"]},{"Key":"to exactly","Fragments":["what"]},{"Key":"have written","Fragments":["however","it"]},{"Key":"written however","Fragments":["it"]},{"Key":"however it","Fragments":["is","doesn't.","has","seems"]},{"Key":"3) Given","Fragments":["you"]},{"Key":"Given you","Fragments":["know"]},{"Key":"the variables","Fragments":["you","and","as","isYelling,"]},{"Key":"variables you","Fragments":["are"]},{"Key":"using will","Fragments":["be"]},{"Key":"be \u003e0","Fragments":["it"]},{"Key":"\u003e0 it","Fragments":["would"]},{"Key":"int (or","Fragments":["even"]},{"Key":"(or even","Fragments":["better","std::strings)"]},{"Key":"the fixed","Fragments":["width"]},{"Key":"fixed width","Fragments":["types"]},{"Key":"width types","Fragments":["such"]},{"Key":"types such","Fragments":["as"]},{"Key":"as `uint64_t`","Fragments":["in"]},{"Key":"`uint64_t` in","Fragments":["`\u003ccstdint\u003e`"]},{"Key":"in `\u003ccstdint\u003e`","Fragments":[")"]},{"Key":"`\u003ccstdint\u003e` )","Fragments":["this"]},{"Key":") this","Fragments":["way"]},{"Key":"greater range","Fragments":["of"]},{"Key":" @hank:","Fragments":["i"]},{"Key":"@hank: i","Fragments":["know"]},{"Key":"i know","Fragments":["it","from"]},{"Key":"the c++11","Fragments":["standard,"]},{"Key":"c++11 standard,","Fragments":["but"]},{"Key":"standard, but","Fragments":["the"]},{"Key":"compiler i","Fragments":["was"]},{"Key":"using didnt","Fragments":["have"]},{"Key":"didnt have","Fragments":["the"]},{"Key":"This totally","Fragments":["works,"]},{"Key":"totally works,","Fragments":["but"]},{"Key":"be pedantic","Fragments":["(and"]},{"Key":"pedantic (and","Fragments":["you"]},{"Key":"(and you","Fragments":["might"]},{"Key":"be aware","Fragments":["of","that","of","of."]},{"Key":"of this)---that","Fragments":["mod"]},{"Key":"this)---that mod","Fragments":["operator"]},{"Key":"mod operator","Fragments":["means","with"]},{"Key":"operator means","Fragments":["you're"]},{"Key":"means you're","Fragments":["not"]},{"Key":"not generating","Fragments":["uniform"]},{"Key":"generating uniform","Fragments":["random"]},{"Key":"uniform random","Fragments":["numbers"]},{"Key":"numbers (A-Z)","Fragments":["or"]},{"Key":"(A-Z) or","Fragments":["(0-900)."]},{"Key":"or (0-900).","Fragments":["Some"]},{"Key":"(0-900). Some","Fragments":["letters"]},{"Key":"Some letters","Fragments":["and"]},{"Key":"and digits","Fragments":["will"]},{"Key":"digits will","Fragments":["have"]},{"Key":"have higher","Fragments":["probabilities"]},{"Key":"higher probabilities","Fragments":["of"]},{"Key":"probabilities of","Fragments":["occuring"]},{"Key":"of occuring","Fragments":["than"]},{"Key":"occuring than","Fragments":["others."]},{"Key":"can ditch","Fragments":["the"]},{"Key":"ditch the","Fragments":["leading"]},{"Key":"leading 1","Fragments":["after","back"]},{"Key":"after you've","Fragments":["validated"]},{"Key":"you've validated","Fragments":["the"]},{"Key":"input. (None","Fragments":["of"]},{"Key":"(None of","Fragments":["the"]},{"Key":"public methods","Fragments":["are"]},{"Key":"are dependent","Fragments":["on"]},{"Key":"on whether","Fragments":["the","this"]},{"Key":"input was","Fragments":["10","CAPITALIZED"]},{"Key":"was 10","Fragments":["or"]},{"Key":"or 11","Fragments":["digits.)"]},{"Key":"11 digits.)","Fragments":["So"]},{"Key":"digits.) So","Fragments":["you'll"]},{"Key":"So you'll","Fragments":["just"]},{"Key":"you'll just","Fragments":["store"]},{"Key":"the 10","Fragments":["digits"]},{"Key":"10 digits","Fragments":["no"]},{"Key":"digits no","Fragments":["matter"]},{"Key":"matter the","Fragments":["input,"]},{"Key":"input, and","Fragments":["the"]},{"Key":"checks can","Fragments":["go"]},{"Key":"go away.","Fragments":["(If"]},{"Key":"away. (If","Fragments":["you"]},{"Key":"(If you","Fragments":["really"]},{"Key":"to lose","Fragments":["that"]},{"Key":"lose that","Fragments":["information"]},{"Key":"that information","Fragments":["for","from?"]},{"Key":"information for","Fragments":["some"]},{"Key":"some later","Fragments":["use,"]},{"Key":"later use,","Fragments":["you"]},{"Key":"use, you","Fragments":["could"]},{"Key":"a `bool","Fragments":["is_international_`"]},{"Key":"`bool is_international_`","Fragments":["member"]},{"Key":"is_international_` member","Fragments":["that"]},{"Key":"member that","Fragments":["future"]},{"Key":"that future","Fragments":["methods"]},{"Key":"future methods","Fragments":["can"]},{"Key":"1 back","Fragments":["in.)"]},{"Key":"be clever","Fragments":["in"]},{"Key":"clever in","Fragments":["`difference`"]},{"Key":"in `difference`","Fragments":["by"]},{"Key":"`difference` by","Fragments":["noting"]},{"Key":"by noting","Fragments":["that"]},{"Key":"the 2","Fragments":["*"]},{"Key":"* sum","Fragments":["of"]},{"Key":"the cross","Fragments":["products."]},{"Key":"cross products.","Fragments":["But"]},{"Key":"products. But","Fragments":["since"]},{"Key":"since `square_of_sums`","Fragments":["is"]},{"Key":"`square_of_sums` is","Fragments":["O(1)"]},{"Key":"is O(1)","Fragments":["and"]},{"Key":"O(1) and","Fragments":["`sum_of_squares`"]},{"Key":"and `sum_of_squares`","Fragments":["is"]},{"Key":"`sum_of_squares` is","Fragments":["O(n),"]},{"Key":"is O(n),","Fragments":["it's"]},{"Key":"O(n), it's","Fragments":["likely"]},{"Key":"it's likely","Fragments":["faster"]},{"Key":"define it","Fragments":["in"]},{"Key":"those functions,","Fragments":["instead"]},{"Key":"functions, instead","Fragments":["of"]},{"Key":"is O(n^2","Fragments":[").","))"]},{"Key":"think `operator","Fragments":["string()`"]},{"Key":"string()` does","Fragments":["need"]},{"Key":"that digit","Fragments":["handy,"]},{"Key":"digit handy,","Fragments":["though."]},{"Key":"handy, though.","Fragments":["maybe"]},{"Key":"though. maybe","Fragments":["breaking"]},{"Key":"maybe breaking","Fragments":["it"]},{"Key":"breaking it","Fragments":["into"]},{"Key":"into prefix","Fragments":["+"]},{"Key":"prefix +","Fragments":["number"]},{"Key":"+ number","Fragments":["is"]},{"Key":"good enough,","Fragments":["that'd"]},{"Key":"enough, that'd","Fragments":["make"]},{"Key":"that'd make","Fragments":["the"]},{"Key":"the operator","Fragments":["the"]},{"Key":"operator the","Fragments":["only"]},{"Key":"only bit","Fragments":["that"]},{"Key":"bit that","Fragments":["needs"]},{"Key":"of to","Fragments":["answer"]},{"Key":"to answer","Fragments":["your","your"]},{"Key":"answer your","Fragments":["question,","question","question,"]},{"Key":"your question,","Fragments":["since","using"]},{"Key":"question, since","Fragments":["exercism"]},{"Key":"since exercism","Fragments":["only"]},{"Key":"exercism only","Fragments":["support"]},{"Key":"only support","Fragments":["one"]},{"Key":"support one","Fragments":["file"]},{"Key":"file you","Fragments":["have","turned"]},{"Key":"to integrate","Fragments":["the"]},{"Key":"integrate the","Fragments":["code"]},{"Key":"code into","Fragments":["the","it's"]},{"Key":"or other","Fragments":["way","string."]},{"Key":"more info:","Fragments":["http://help.exercism.io/getting-started-with-cpp.html"]},{"Key":"I personalty","Fragments":["prefer"]},{"Key":"personalty prefer","Fragments":["to"]},{"Key":"include all","Fragments":["the"]},{"Key":"functions i","Fragments":["use"]},{"Key":"i use","Fragments":["at"]},{"Key":"use at","Fragments":["the"]},{"Key":"the top,","Fragments":["like","but"]},{"Key":"top, like","Fragments":["this"]},{"Key":" ```using","Fragments":["std::string;"]},{"Key":"that cleans","Fragments":["it"]},{"Key":"cleans it","Fragments":["up"]},{"Key":" Secondly","Fragments":["is"]},{"Key":"Secondly is","Fragments":["there"]},{"Key":"have word_hash,","Fragments":["and"]},{"Key":"word_hash, and","Fragments":["token_it"]},{"Key":"and token_it","Fragments":["static?"]},{"Key":"the heap","Fragments":["when","-"]},{"Key":"heap when","Fragments":["you"]},{"Key":"A small","Fragments":["change"]},{"Key":"change mostly","Fragments":["to"]},{"Key":"mostly to","Fragments":["put"]},{"Key":"put code","Fragments":["in"]},{"Key":".cpp and","Fragments":["just"]},{"Key":"just declare","Fragments":["the","a"]},{"Key":"Oh wait,","Fragments":["there's"]},{"Key":"wait, there's","Fragments":["still"]},{"Key":"there's still","Fragments":["some"]},{"Key":"some scrap","Fragments":["there."]},{"Key":" Haven't","Fragments":["programmed","tested"]},{"Key":"Haven't programmed","Fragments":["in"]},{"Key":"programmed in","Fragments":["C++"]},{"Key":"long time.","Fragments":["Maybe"]},{"Key":"time. Maybe","Fragments":["some"]},{"Key":"Maybe some","Fragments":["things"]},{"Key":"things will","Fragments":["come"]},{"Key":"but gosh,","Fragments":["it's"]},{"Key":"gosh, it's","Fragments":["not"]},{"Key":"same language.","Fragments":["Barely"]},{"Key":"language. Barely","Fragments":["know"]},{"Key":"Barely know","Fragments":["what"]},{"Key":"what I'm","Fragments":["doing...","doing"]},{"Key":" @jany","Fragments":["is"]},{"Key":"@jany is","Fragments":["right."]},{"Key":" Re","Fragments":["read"]},{"Key":"Re read","Fragments":["the"]},{"Key":"the read-me","Fragments":["and"]},{"Key":"read-me and","Fragments":["try"]},{"Key":"a unrelated","Fragments":["note"]},{"Key":"unrelated note","Fragments":["to"]},{"Key":"many \"if\"s,","Fragments":["use"]},{"Key":"\"if\"s, use","Fragments":["a"]},{"Key":"Yeah, it's","Fragments":["unclear"]},{"Key":"it's unclear","Fragments":["from"]},{"Key":"unclear from","Fragments":["the"]},{"Key":"suite exactly","Fragments":["how"]},{"Key":"how `string()`","Fragments":["should"]},{"Key":"`string()` should","Fragments":["work","do"]},{"Key":"on 11-digit","Fragments":["numbers,"]},{"Key":"11-digit numbers,","Fragments":["but"]},{"Key":"numbers, but","Fragments":["`number()`","am"]},{"Key":"but `number()`","Fragments":["drops"]},{"Key":"`number()` drops","Fragments":["the"]},{"Key":"drops the","Fragments":["leading"]},{"Key":"leading 0,","Fragments":["so"]},{"Key":"0, so","Fragments":["I"]},{"Key":"it's safe","Fragments":["to"]},{"Key":"assume `string()`","Fragments":["should"]},{"Key":"same. Either","Fragments":["way,"]},{"Key":"way, your","Fragments":["proposal"]},{"Key":"your proposal","Fragments":["sounds"]},{"Key":"proposal sounds","Fragments":["good"]},{"Key":"sounds good","Fragments":["to"]},{"Key":" Eliminated","Fragments":["unnecessary"]},{"Key":"Eliminated unnecessary","Fragments":["transforming"]},{"Key":"unnecessary transforming","Fragments":["and"]},{"Key":"transforming and","Fragments":["making"]},{"Key":"and making","Fragments":["two"]},{"Key":"making two","Fragments":["extra"]},{"Key":"two extra","Fragments":["copies,"]},{"Key":"extra copies,","Fragments":["it"]},{"Key":"copies, it","Fragments":["should"]},{"Key":"still really","Fragments":["learning"]},{"Key":"really learning","Fragments":["the"]},{"Key":"learning the","Fragments":["c++","ways"]},{"Key":"c++ ropes","Fragments":["so"]},{"Key":"ropes so","Fragments":["any"]},{"Key":"any and","Fragments":["all"]},{"Key":"all criticism","Fragments":["is"]},{"Key":"criticism is","Fragments":["welcome!","that"]},{"Key":"have different","Fragments":["versions","instances,"]},{"Key":"key word,","Fragments":["one"]},{"Key":"word, one","Fragments":["that's"]},{"Key":"one that's","Fragments":["only"]},{"Key":"that's only","Fragments":["lower"]},{"Key":"only lower","Fragments":["case,"]},{"Key":"another that's","Fragments":["normalized"]},{"Key":"that's normalized","Fragments":["(lower"]},{"Key":"normalized (lower","Fragments":["case"]},{"Key":"(lower case","Fragments":["and"]},{"Key":"and sorted).","Fragments":["I"]},{"Key":"sorted). I","Fragments":["basically"]},{"Key":"I basically","Fragments":["chose","copied","just","used"]},{"Key":"basically chose","Fragments":["speed"]},{"Key":"chose speed","Fragments":["over"]},{"Key":"speed over","Fragments":["space"]},{"Key":"over space","Fragments":["here."]},{"Key":"both cpp","Fragments":["and"]},{"Key":"and h","Fragments":["files:"]},{"Key":"great, just","Fragments":["a"]},{"Key":"simple note:","Fragments":["I"]},{"Key":"note: I","Fragments":["think","actually"]},{"Key":"in c++11","Fragments":["you","still)"]},{"Key":"c++11 you","Fragments":["can"]},{"Key":"the std::find_if_not","Fragments":["as"]},{"Key":"std::find_if_not as","Fragments":["well,"]},{"Key":"well, so","Fragments":["in","I"]},{"Key":"in functions","Fragments":["ltrim","to"]},{"Key":"functions ltrim","Fragments":["and"]},{"Key":"ltrim and","Fragments":["rtrim"]},{"Key":"and rtrim","Fragments":["you"]},{"Key":"rtrim you","Fragments":["don't"]},{"Key":"the not1,","Fragments":["instead"]},{"Key":"not1, instead","Fragments":["just"]},{"Key":" std::find_if_not(s.begin(),","Fragments":["s.end(),"]},{"Key":"std::find_if_not(s.begin(), s.end(),","Fragments":["isspace)"]},{"Key":"suspect you","Fragments":["have"]},{"Key":"a \"using","Fragments":["namespace"]},{"Key":"std;\" somewhere","Fragments":["in"]},{"Key":"file, that","Fragments":["might","much"]},{"Key":"idea, if","Fragments":["that's"]},{"Key":"bool isBlank(std::string","Fragments":["str)"]},{"Key":"isBlank(std::string str)","Fragments":["{"]},{"Key":"std::regex reg(\"^","Fragments":["*$\")"]},{"Key":"return std::regex_match(str,","Fragments":["reg);"]},{"Key":" Declaring","Fragments":["the","a","local","variables"]},{"Key":"Declaring the","Fragments":["function"]},{"Key":"static won't","Fragments":["make"]},{"Key":"regex be.","Fragments":["The"]},{"Key":"be. The","Fragments":["way"]},{"Key":"way above,","Fragments":["`reg`"]},{"Key":"above, `reg`","Fragments":["will"]},{"Key":"`reg` will","Fragments":["be"]},{"Key":"created the","Fragments":["first"]},{"Key":"is called.","Fragments":["After","Constructing"]},{"Key":"called. After","Fragments":["that,"]},{"Key":"After that,","Fragments":["it'll","it"]},{"Key":"that, it'll","Fragments":["use"]},{"Key":"it'll use","Fragments":["the"]},{"Key":"same object","Fragments":["every"]},{"Key":"object every","Fragments":["time."]},{"Key":"declare a","Fragments":["(non-class)","name","namespace","namespace"]},{"Key":"a (non-class)","Fragments":["function"]},{"Key":"(non-class) function","Fragments":["as"]},{"Key":"as static,","Fragments":["it'll"]},{"Key":"static, it'll","Fragments":["be"]},{"Key":"be invisible","Fragments":["outside"]},{"Key":"invisible outside","Fragments":["of"]},{"Key":"its translation","Fragments":["unit.","unit)"]},{"Key":"translation unit.","Fragments":["As","Can"]},{"Key":"unit. As","Fragments":["a"]},{"Key":"thumb: if","Fragments":["you"]},{"Key":"that means,","Fragments":["you"]},{"Key":"means, you","Fragments":["won't"]},{"Key":"won't need","Fragments":["it"]},{"Key":"std;` to","Fragments":["the"]},{"Key":"file, changed","Fragments":["to"]},{"Key":"to find_if_not(),","Fragments":["and"]},{"Key":"find_if_not(), and","Fragments":["took"]},{"Key":"and took","Fragments":["out"]},{"Key":"took out","Fragments":["`\u003cfunctional\u003e`."]},{"Key":"shouldn't have","Fragments":["put","to"]},{"Key":"put `using","Fragments":["namespace"]},{"Key":"std;` in","Fragments":["the"]},{"Key":"file. Most","Fragments":["of"]},{"Key":"of std's","Fragments":["use"]},{"Key":"std's use","Fragments":["is"]},{"Key":"file doesn't","Fragments":["have"]},{"Key":"much in","Fragments":["the","Perl,"]},{"Key":" __Changes","Fragments":["From","from","From","from","From","From","From","From","from"]},{"Key":"__Changes From","Fragments":["Iteration","Iteration","Iteration","Iteration","Iteration","Iteration"]},{"Key":"From Iteration","Fragments":["2__","2__","1__","1__","2__","3__"]},{"Key":" **Took","Fragments":["the"]},{"Key":"**Took the","Fragments":["advice"]},{"Key":" \u003cul\u003e\u003cli\u003eMade","Fragments":["the"]},{"Key":"\u003cul\u003e\u003cli\u003eMade the","Fragments":["variable"]},{"Key":"names more","Fragments":["generic\u003c/li\u003e"]},{"Key":" \u003cli\u003eRemoved","Fragments":["`size_t`"]},{"Key":"\u003cli\u003eRemoved `size_t`","Fragments":["instances"]},{"Key":"`size_t` instances","Fragments":["and"]},{"Key":"instances and","Fragments":["replced"]},{"Key":"and replced","Fragments":["them"]},{"Key":"replced them","Fragments":["with"]},{"Key":"them with","Fragments":["`uint`"]},{"Key":"with `uint`","Fragments":["\u003c/li\u003e"]},{"Key":" \u003cli\u003eMade","Fragments":["use"]},{"Key":"\u003cli\u003eMade use","Fragments":["of"]},{"Key":"the `std::min`","Fragments":["function.\u003c/li\u003e"]},{"Key":" \u003cli\u003e`diff`","Fragments":["is"]},{"Key":"\u003cli\u003e`diff` is","Fragments":["now"]},{"Key":"now signalled","Fragments":["for"]},{"Key":"signalled for","Fragments":["a"]},{"Key":"a possible","Fragments":["`register`"]},{"Key":"possible `register`","Fragments":["placement"]},{"Key":"`register` placement","Fragments":["which"]},{"Key":"placement which","Fragments":["would"]},{"Key":"would increase","Fragments":["performance"]},{"Key":"increase performance","Fragments":["especially"]},{"Key":"performance especially","Fragments":["with"]},{"Key":" \u003col\u003e\u003cli\u003e","Fragments":["The","The"]},{"Key":"\u003col\u003e\u003cli\u003e The","Fragments":["`size`","`size`"]},{"Key":"The `size`","Fragments":["of","of"]},{"Key":"`size` of","Fragments":["the","the"]},{"Key":"the operation","Fragments":["is","is","to"]},{"Key":"is determined","Fragments":["by","at","to","by"]},{"Key":"determined by","Fragments":["the","\u003c","the"]},{"Key":" \u003cli\u003e","Fragments":["Each","`matches()`","A","Because","As","`matches()`","A","Because","`const","Each","Because","Each","`matches()`","A","Because","`const","Each","Because","`const","Each","Because","`matches()`","A"]},{"Key":"\u003cli\u003e Each","Fragments":["character","character","character","character","character"]},{"Key":"Each character","Fragments":["is","of","is","of","of"]},{"Key":"compared and","Fragments":["the","the"]},{"Key":"boolean result","Fragments":["(`0`","(`0`"]},{"Key":"result (`0`","Fragments":["or","or"]},{"Key":"(`0` or","Fragments":["`1`)","`1`)"]},{"Key":"or `1`)","Fragments":["is","is"]},{"Key":"`1`) is","Fragments":["added","added"]},{"Key":" \u003cli\u003eThe","Fragments":["difference","match","match","string","difference","`if`","match","convienience","match"]},{"Key":"\u003cli\u003eThe difference","Fragments":["is","is"]},{"Key":" Naive","Fragments":["solution"]},{"Key":"Naive solution","Fragments":["that"]},{"Key":"doesn't save","Fragments":["results"]},{"Key":"save results","Fragments":["of"]},{"Key":"of square()","Fragments":["calculations."]},{"Key":"square() calculations.","Fragments":["Execution"]},{"Key":"calculations. Execution","Fragments":["of"]},{"Key":"Execution of","Fragments":["tests"]},{"Key":"of tests","Fragments":["is","in","and"]},{"Key":"fast enough","Fragments":["as"]},{"Key":"enough as","Fragments":["is,"]},{"Key":"as is,","Fragments":["but"]},{"Key":"is, but","Fragments":["it"]},{"Key":"worth attempting","Fragments":["a"]},{"Key":"attempting a","Fragments":["memoization"]},{"Key":"a memoization","Fragments":["optimization"]},{"Key":"memoization optimization","Fragments":["for"]},{"Key":"optimization for","Fragments":["this"]},{"Key":" Switched","Fragments":["to","to","to","from"]},{"Key":"Switched to","Fragments":["regex_iterator,","using","using","```using"]},{"Key":"to regex_iterator,","Fragments":["looks"]},{"Key":"regex_iterator, looks","Fragments":["better"]},{"Key":"looks better","Fragments":["this"]},{"Key":"better this","Fragments":["way"]},{"Key":"way (I","Fragments":["think)"]},{"Key":"first guess","Fragments":["was"]},{"Key":"guess was","Fragments":["that"]},{"Key":"third version","Fragments":["only"]},{"Key":"version only","Fragments":["modifies","removes"]},{"Key":"only modifies","Fragments":["the"]},{"Key":"strings length","Fragments":["once","is","(which"]},{"Key":"length once","Fragments":["whereas"]},{"Key":"once whereas","Fragments":["back_inserter"]},{"Key":"whereas back_inserter","Fragments":["calls"]},{"Key":"back_inserter calls","Fragments":["push_back"]},{"Key":"calls push_back","Fragments":["once"]},{"Key":"push_back once","Fragments":["for"]},{"Key":"once for","Fragments":["every","the"]},{"Key":"character. MSVC","Fragments":["might"]},{"Key":"MSVC might","Fragments":["have"]},{"Key":"of overhead","Fragments":["if","-","here,","to"]},{"Key":"overhead if","Fragments":["`length`"]},{"Key":"if `length`","Fragments":["changes."]},{"Key":"`length` changes.","Fragments":["Copy-construction"]},{"Key":"changes. Copy-construction","Fragments":["is"]},{"Key":"Copy-construction is","Fragments":["only"]},{"Key":"I poked","Fragments":["around"]},{"Key":"poked around","Fragments":["a"]},{"Key":"it turned","Fragments":["out"]},{"Key":"turned out","Fragments":["it","like"]},{"Key":"it matters","Fragments":["whether","quite","much"]},{"Key":"matters whether","Fragments":["the"]},{"Key":"I'm transforming","Fragments":["has"]},{"Key":"transforming has","Fragments":["the"]},{"Key":"has the","Fragments":["right","fewest","most","most","side-effect","problem","performance","ability","side","letters","potential","functionality","iterators"]},{"Key":"right content","Fragments":["already."]},{"Key":"My guess","Fragments":["now"]},{"Key":"guess now","Fragments":["is"]},{"Key":"is branch","Fragments":["prediction."]},{"Key":"branch prediction.","Fragments":["Since"]},{"Key":"prediction. Since","Fragments":["most"]},{"Key":"Since most","Fragments":["characters"]},{"Key":"most characters","Fragments":["in"]},{"Key":"in natural","Fragments":["English"]},{"Key":"natural English","Fragments":["language"]},{"Key":"English language","Fragments":["are"]},{"Key":"language are","Fragments":["lower-case,"]},{"Key":"are lower-case,","Fragments":["the"]},{"Key":"lower-case, the","Fragments":["branch"]},{"Key":"the branch","Fragments":["prediction"]},{"Key":"prediction will","Fragments":["probably"]},{"Key":"probably end","Fragments":["up"]},{"Key":"up predicting","Fragments":["that"]},{"Key":"predicting that","Fragments":["no"]},{"Key":"that no","Fragments":["memory","one"]},{"Key":"memory write","Fragments":["has"]},{"Key":"write has","Fragments":["to"]},{"Key":"be performed,","Fragments":["which"]},{"Key":"performed, which","Fragments":["is"]},{"Key":"is mostly","Fragments":["correct","a","reflex."]},{"Key":"mostly correct","Fragments":["for"]},{"Key":"correct for","Fragments":["the"]},{"Key":"version where","Fragments":["I"]},{"Key":"am copy-constructing","Fragments":["the"]},{"Key":"copy-constructing the","Fragments":["string"]},{"Key":"string (the","Fragments":["ratio"]},{"Key":"(the ratio","Fragments":["of"]},{"Key":"ratio of","Fragments":["upper-case"]},{"Key":"of upper-case","Fragments":["to"]},{"Key":"upper-case to","Fragments":["lower-case"]},{"Key":"lower-case letters","Fragments":["is"]},{"Key":"letters is","Fragments":["like","not"]},{"Key":"like 1:40","Fragments":["or"]},{"Key":"1:40 or","Fragments":["so)."]},{"Key":"the `back_inserter`","Fragments":["method,"]},{"Key":"`back_inserter` method,","Fragments":["every"]},{"Key":"method, every","Fragments":["character"]},{"Key":"character will","Fragments":["force"]},{"Key":"will force","Fragments":["a"]},{"Key":"force a","Fragments":["memory"]},{"Key":"So my","Fragments":["CPU"]},{"Key":"my CPU","Fragments":["might"]},{"Key":"CPU might","Fragments":["just"]},{"Key":"better (or","Fragments":["worse)"]},{"Key":"(or worse)","Fragments":["at"]},{"Key":"worse) at","Fragments":["exploiting"]},{"Key":"at exploiting","Fragments":["branches,"]},{"Key":"exploiting branches,","Fragments":["or"]},{"Key":"branches, or","Fragments":["your"]},{"Key":"or your","Fragments":["password","handspun"]},{"Key":"your password","Fragments":["file"]},{"Key":"password file","Fragments":["has"]},{"Key":"file has","Fragments":["a","also"]},{"Key":"better distribution","Fragments":["of"]},{"Key":"distribution of","Fragments":["upper-"]},{"Key":"of upper-","Fragments":["and"]},{"Key":"upper- and","Fragments":["lower-case"]},{"Key":"and lower-case","Fragments":["chars,"]},{"Key":"lower-case chars,","Fragments":["forcing"]},{"Key":"chars, forcing","Fragments":["your"]},{"Key":"forcing your","Fragments":["CPU","caller"]},{"Key":"your CPU","Fragments":["to"]},{"Key":"CPU to","Fragments":["flush"]},{"Key":"to flush","Fragments":["its"]},{"Key":"flush its","Fragments":["pipes"]},{"Key":"its pipes","Fragments":["more"]},{"Key":"pipes more","Fragments":["often."]},{"Key":"I run","Fragments":["the","\"g++","\"make\"","your"]},{"Key":"string through","Fragments":["a"]},{"Key":"a randomizer","Fragments":["to"]},{"Key":"randomizer to","Fragments":["confuse"]},{"Key":"to confuse","Fragments":["branch"]},{"Key":"confuse branch","Fragments":["prediction:"]},{"Key":"for( char\u0026","Fragments":["c"]},{"Key":": file","Fragments":["){"]},{"Key":" if(","Fragments":["rand()","f()","is_silent(s)","str","str.empty()","str.at(str.length()","str.back()","wordStart","numSpaces","containsAlpha"]},{"Key":"if( rand()","Fragments":["%"]},{"Key":"% 2","Fragments":[")"]},{"Key":"2 )","Fragments":["c","You"]},{"Key":") c","Fragments":["="]},{"Key":"= toupper(","Fragments":["c"]},{"Key":"toupper( c","Fragments":[");"]},{"Key":"else c","Fragments":["="]},{"Key":"= tolower(","Fragments":["c"]},{"Key":"tolower( c","Fragments":[");"]},{"Key":"and third","Fragments":["test"]},{"Key":"third test","Fragments":["shrinks,"]},{"Key":"test shrinks,","Fragments":["but"]},{"Key":"shrinks, but","Fragments":["the"]},{"Key":"the copy-construction","Fragments":["still"]},{"Key":"copy-construction still","Fragments":["is"]},{"Key":"still is","Fragments":["the"]},{"Key":"the fastest.","Fragments":["So"]},{"Key":"fastest. So","Fragments":["that"]},{"Key":"thing influencing","Fragments":["it."]},{"Key":"Did a","Fragments":["performance"]},{"Key":"performance analysis","Fragments":["on"]},{"Key":"analysis on","Fragments":["a"]},{"Key":"a run","Fragments":["of"]},{"Key":"the project","Fragments":["and","into"]},{"Key":"project and","Fragments":["dug"]},{"Key":"dug myself","Fragments":["through"]},{"Key":"myself through","Fragments":["Microsoft's"]},{"Key":"through Microsoft's","Fragments":["string"]},{"Key":"Microsoft's string","Fragments":["implementation."]},{"Key":"string implementation.","Fragments":["The"]},{"Key":"implementation. The","Fragments":["rest"]},{"Key":"overhead seems","Fragments":["to"]},{"Key":"of `back_inserter`","Fragments":["calling"]},{"Key":"`back_inserter` calling","Fragments":["`push_back`"]},{"Key":"calling `push_back`","Fragments":["for"]},{"Key":"`push_back` for","Fragments":["every"]},{"Key":"every element.","Fragments":["Partly"]},{"Key":"element. Partly","Fragments":["because"]},{"Key":"Partly because","Fragments":["`push_back`"]},{"Key":"because `push_back`","Fragments":["needs"]},{"Key":"`push_back` needs","Fragments":["to"]},{"Key":"check whether","Fragments":["the","it's","question","`phrase[begin_word]","it's"]},{"Key":"grow before","Fragments":["insertion"]},{"Key":"before insertion","Fragments":["can"]},{"Key":"insertion can","Fragments":["be"]},{"Key":" std::inner_product","Fragments":["is"]},{"Key":"std::inner_product is","Fragments":["a"]},{"Key":"very nifty","Fragments":["function."]},{"Key":"nifty function.","Fragments":["Thank"]},{"Key":"function. Thank","Fragments":["you"]},{"Key":"you Denisss025,","Fragments":["I"]},{"Key":"Denisss025, I","Fragments":["did"]},{"Key":"Updated using","Fragments":["`inner_product`"]},{"Key":"using `inner_product`","Fragments":["algorithm."]},{"Key":"Added regular","Fragments":["expressions"]},{"Key":"expressions solution","Fragments":["that"]},{"Key":"better (though","Fragments":["probably"]},{"Key":"(though probably","Fragments":["slower)"]},{"Key":"probably slower)","Fragments":["solves"]},{"Key":"slower) solves","Fragments":["the"]},{"Key":"solves the","Fragments":["problem.","whole"]},{"Key":"removed an","Fragments":["unnecessary"]},{"Key":"unnecessary conversion","Fragments":["of"]},{"Key":"good that","Fragments":["you","there","you","there's","you"]},{"Key":"you went","Fragments":["from","for","out"]},{"Key":"went from","Fragments":["a"]},{"Key":"fixed size","Fragments":["char*"]},{"Key":"size char*","Fragments":["to"]},{"Key":"to allocating","Fragments":["memory."]},{"Key":"are two","Fragments":["issues"]},{"Key":"two issues","Fragments":["I","here"]},{"Key":"split up","Fragments":["into","the","sensing"]},{"Key":"up into","Fragments":["separate","2","functions","your","different"]},{"Key":"separate functions","Fragments":["that","to","for"]},{"Key":"question, shouting,","Fragments":["empty,"]},{"Key":"shouting, empty,","Fragments":["etc."]},{"Key":"empty, etc.","Fragments":["If"]},{"Key":"etc. If","Fragments":["what"]},{"Key":"If what","Fragments":["constituted"]},{"Key":"what constituted","Fragments":["shouting"]},{"Key":"constituted shouting","Fragments":["changed"]},{"Key":"shouting changed","Fragments":["and"]},{"Key":"changed and","Fragments":["a","now"]},{"Key":"new type","Fragments":["of"]},{"Key":"of imput/output","Fragments":["was"]},{"Key":"imput/output was","Fragments":["defined"]},{"Key":"defined it","Fragments":["would","and"]},{"Key":"be trivial","Fragments":["to"]},{"Key":"trivial to","Fragments":["change","check.","accept"]},{"Key":"code. Making","Fragments":["small"]},{"Key":"Making small","Fragments":["functions"]},{"Key":"small functions","Fragments":["that"]},{"Key":"are responsible","Fragments":["for"]},{"Key":"for only","Fragments":["one","upper","the"]},{"Key":"thing can","Fragments":["reduce"]},{"Key":"2. Everything","Fragments":["you"]},{"Key":"Everything you","Fragments":["used"]},{"Key":"the char*","Fragments":["for"]},{"Key":"char* for","Fragments":["could"]},{"Key":"for could","Fragments":["be"]},{"Key":"be accomplished","Fragments":["with"]},{"Key":"accomplished with","Fragments":["std::string."]},{"Key":"with std::string.","Fragments":["Try","Instead"]},{"Key":"std::string. Try","Fragments":["Iterators"]},{"Key":"Try Iterators","Fragments":["or"]},{"Key":"Iterators or","Fragments":["accessing"]},{"Key":"or accessing","Fragments":["it"]},{"Key":"accessing it","Fragments":["like"]},{"Key":"an char[].","Fragments":["You"]},{"Key":"char[]. You","Fragments":["could"]},{"Key":"could eliminate","Fragments":["the"]},{"Key":"eliminate the","Fragments":["calls","need","performance","need","need","`switch`,","potential"]},{"Key":"to strcopy","Fragments":["and"]},{"Key":"strcopy and","Fragments":["new/delete."]},{"Key":"and new/delete.","Fragments":["Let"]},{"Key":"new/delete. Let","Fragments":["std::string"]},{"Key":"Let std::string","Fragments":["do"]},{"Key":"std::string do","Fragments":["the"]},{"Key":"am brand","Fragments":["new"]},{"Key":"a feeling","Fragments":["I","there","boost","your","something","that"]},{"Key":"feeling I","Fragments":["am"]},{"Key":"am supposed","Fragments":["to"]},{"Key":"using memory","Fragments":["references"]},{"Key":"memory references","Fragments":["and"]},{"Key":"and pointers","Fragments":["but"]},{"Key":"pointers but","Fragments":["this"]},{"Key":"this seemed","Fragments":["to","only"]},{"Key":"work without","Fragments":["them.","a"]},{"Key":"without them.","Fragments":["I"]},{"Key":"a background","Fragments":["in"]},{"Key":"background in","Fragments":["Java","Java,"]},{"Key":"Java and","Fragments":["C#"]},{"Key":"and C#","Fragments":["and"]},{"Key":"C# and","Fragments":["am"]},{"Key":"am definitely","Fragments":["struggling"]},{"Key":"definitely struggling","Fragments":["with"]},{"Key":"struggling with","Fragments":["converting"]},{"Key":"with converting","Fragments":["those"]},{"Key":"converting those","Fragments":["ideas"]},{"Key":"those ideas","Fragments":["over"]},{"Key":"ideas over","Fragments":["to"]},{"Key":"letters, only","Fragments":["numbers,"]},{"Key":"only numbers,","Fragments":["or"]},{"Key":"numbers, or","Fragments":["is"]},{"Key":"is empty?","Fragments":["I"]},{"Key":"empty? I","Fragments":["was"]},{"Key":"error when","Fragments":["passing"]},{"Key":"passing an","Fragments":["empty"]},{"Key":"string `\"\"`","Fragments":["at"]},{"Key":"`\"\"` at","Fragments":["this"]},{"Key":"line `std::string::npos","Fragments":["!="]},{"Key":"`std::string::npos !=","Fragments":["message.find_first_of`,"]},{"Key":"!= message.find_first_of`,","Fragments":["so"]},{"Key":"message.find_first_of`, so","Fragments":["the"]},{"Key":"figure to","Fragments":["avoid"]},{"Key":"avoid that","Fragments":["was","dependence"]},{"Key":"string was","Fragments":["empty","all"]},{"Key":"was empty","Fragments":["at","it"]},{"Key":"empty at","Fragments":["the"]},{"Key":"got an","Fragments":["enum","a"]},{"Key":"enum which","Fragments":["could"]},{"Key":"be altered","Fragments":["and"]},{"Key":"altered and","Fragments":["break"]},{"Key":"break code","Fragments":["in"]},{"Key":"other places.","Fragments":["You"]},{"Key":"places. You","Fragments":["should"]},{"Key":"be specific","Fragments":["about"]},{"Key":"specific about","Fragments":["the"]},{"Key":"the numbering","Fragments":["of"]},{"Key":"numbering of","Fragments":["your"]},{"Key":"your enums,","Fragments":["or"]},{"Key":"enums, or","Fragments":["even"]},{"Key":"better, create","Fragments":["a"]},{"Key":"a ResponseType","Fragments":["value"]},{"Key":"ResponseType value","Fragments":["and"]},{"Key":"and converts","Fragments":["it"]},{"Key":"converts it","Fragments":["to"]},{"Key":"the relevant","Fragments":["string.","bits","header"]},{"Key":" Doing","Fragments":["a"]},{"Key":"Doing a","Fragments":["bunch"]},{"Key":"of horrible","Fragments":["checks"]},{"Key":"horrible checks","Fragments":["for"]},{"Key":"for edge","Fragments":["cases"]},{"Key":"edge cases","Fragments":["that","while"]},{"Key":"couldn't group","Fragments":["into"]},{"Key":"group into","Fragments":["one"]},{"Key":"one logical","Fragments":["place."]},{"Key":"logical place.","Fragments":["Looping"]},{"Key":"place. Looping","Fragments":["over"]},{"Key":"Looping over","Fragments":["each"]},{"Key":"over each","Fragments":["token"]},{"Key":"each token","Fragments":["then"]},{"Key":"token then","Fragments":["doing"]},{"Key":"then doing","Fragments":["sanitisation"]},{"Key":"doing sanitisation","Fragments":["is"]},{"Key":"sanitisation is","Fragments":["a"]},{"Key":"a ball","Fragments":["ache,"]},{"Key":"ball ache,","Fragments":["as"]},{"Key":"ache, as","Fragments":["is"]},{"Key":"initial checks","Fragments":["for"]},{"Key":"for commas","Fragments":["and"]},{"Key":"commas and","Fragments":["apostrophes."]},{"Key":"Boost for","Fragments":["all"]},{"Key":"things, in","Fragments":["favour"]},{"Key":"in favour","Fragments":["of"]},{"Key":"favour of","Fragments":["getting"]},{"Key":"better grasp","Fragments":["of"]},{"Key":"grasp of","Fragments":["the"]},{"Key":"the rtrim","Fragments":["function"]},{"Key":"rtrim function","Fragments":["from"]},{"Key":"a stackoverflow","Fragments":["post"]},{"Key":"stackoverflow post","Fragments":["but"]},{"Key":"post but","Fragments":["decomposed"]},{"Key":"but decomposed","Fragments":["it"]},{"Key":"decomposed it","Fragments":["so"]},{"Key":"could understand","Fragments":["the"]},{"Key":"the incomprehensible","Fragments":["one"]},{"Key":"incomprehensible one","Fragments":["liner!"]},{"Key":"Not a","Fragments":["massive"]},{"Key":"a massive","Fragments":["fan"]},{"Key":"massive fan","Fragments":["of"]},{"Key":"how I'm","Fragments":["checking","storing"]},{"Key":"I'm checking","Fragments":["for"]},{"Key":"for alpha","Fragments":["numerics,","up-front."]},{"Key":"alpha numerics,","Fragments":["after"]},{"Key":"numerics, after","Fragments":["the"]},{"Key":"the trimming","Fragments":["debacle,"]},{"Key":"trimming debacle,","Fragments":["I"]},{"Key":"debacle, I","Fragments":["imagine"]},{"Key":"imagine I","Fragments":["could"]},{"Key":"of std::find_first","Fragments":["incantation"]},{"Key":"std::find_first incantation","Fragments":["to"]},{"Key":"incantation to","Fragments":["figure"]},{"Key":"out whether","Fragments":["a","this"]},{"Key":"whether a","Fragments":["string","`compare`","non-alphanumeric","non-alphanumeric"]},{"Key":"single alpha","Fragments":["numeric"]},{"Key":"alpha numeric","Fragments":["character."]},{"Key":"Be mean.","Fragments":["Be"]},{"Key":"mean. Be","Fragments":["ruthless."]},{"Key":"Be ruthless.","Fragments":["Help"]},{"Key":"ruthless. Help","Fragments":["me"]},{"Key":"Help me","Fragments":["learn!"]},{"Key":"believe calling","Fragments":["isQuestion"]},{"Key":"calling isQuestion","Fragments":["with"]},{"Key":"isQuestion with","Fragments":["a","the"]},{"Key":"a non-empty","Fragments":["string"]},{"Key":"non-empty string","Fragments":["that"]},{"Key":"contains all","Fragments":["spaces,","of","of","of"]},{"Key":"all spaces,","Fragments":["even"]},{"Key":"spaces, even","Fragments":["just"]},{"Key":"even just","Fragments":["\""]},{"Key":"just \"","Fragments":["\","]},{"Key":"\" \",","Fragments":["relies"]},{"Key":"\", relies","Fragments":["on"]},{"Key":"on undefined","Fragments":["behavior."]},{"Key":"behavior. Some","Fragments":["thoughts"]},{"Key":"Some thoughts","Fragments":["on"]},{"Key":"thoughts on","Fragments":["what","the","why"]},{"Key":"do about","Fragments":["that:"]},{"Key":"* put","Fragments":["the"]},{"Key":"the isSilence","Fragments":["check"]},{"Key":"isSilence check","Fragments":["before"]},{"Key":"check before","Fragments":["isQuestion","you"]},{"Key":"before isQuestion","Fragments":["and"]},{"Key":"isQuestion and","Fragments":["document"]},{"Key":"and document","Fragments":["a"]},{"Key":"document a","Fragments":["precondition"]},{"Key":"a precondition","Fragments":["on"]},{"Key":"precondition on","Fragments":["isQuestion"]},{"Key":"on isQuestion","Fragments":["(that"]},{"Key":"isQuestion (that","Fragments":["is,"]},{"Key":"is, never","Fragments":["call"]},{"Key":"never call","Fragments":["isQuestion",".back()","`respond()`"]},{"Key":"call isQuestion","Fragments":["with"]},{"Key":"the all-space","Fragments":["input"]},{"Key":"all-space input","Fragments":["and"]},{"Key":"and tell","Fragments":["others"]},{"Key":"tell others","Fragments":["not"]},{"Key":"others not","Fragments":["to)"]},{"Key":"Use str.at()","Fragments":["instead"]},{"Key":"str.at() instead","Fragments":["of"]},{"Key":"of str[]","Fragments":["..."]},{"Key":"str[] ...","Fragments":["then"]},{"Key":"... then","Fragments":["in"]},{"Key":"bad case","Fragments":["it"]},{"Key":"* Store","Fragments":["the"]},{"Key":"Store the","Fragments":["return","string"]},{"Key":"return of","Fragments":["find_last_not_of","'remove'"]},{"Key":"of find_last_not_of","Fragments":["in"]},{"Key":"find_last_not_of in","Fragments":["a"]},{"Key":"variable, then","Fragments":["check"]},{"Key":"it's equal","Fragments":["to"]},{"Key":"to std::string::npos","Fragments":["before"]},{"Key":"std::string::npos before","Fragments":["using"]},{"Key":"before using","Fragments":["it"]},{"Key":"in []","Fragments":["to"]},{"Key":"[] to","Fragments":["look","std::string.","use"]},{"Key":"for '?'.","Fragments":["This"]},{"Key":"'?'. This","Fragments":["would"]},{"Key":"also eliminate","Fragments":["the"]},{"Key":"for str.empty()","Fragments":["check"]},{"Key":"str.empty() check","Fragments":["(because"]},{"Key":"check (because","Fragments":["it"]},{"Key":"(because it","Fragments":["would","has"]},{"Key":"be npos","Fragments":["in"]},{"Key":"npos in","Fragments":["that"]},{"Key":"The tests/REQUIREMENTS","Fragments":["suggest"]},{"Key":"tests/REQUIREMENTS suggest","Fragments":["I"]},{"Key":"suggest I","Fragments":["didn't"]},{"Key":"implement to","Fragments":["string"]},{"Key":"The diagonal","Fragments":["check"]},{"Key":"diagonal check","Fragments":["was"]},{"Key":"check was","Fragments":["probably","redundant,"]},{"Key":"probably one","Fragments":["of"]},{"Key":"better calls","Fragments":["I've"]},{"Key":"calls I've","Fragments":["ever"]},{"Key":"I've ever","Fragments":["made!","used"]},{"Key":" Dramatically","Fragments":["simplify"]},{"Key":"Dramatically simplify","Fragments":["code"]},{"Key":"simplify code","Fragments":["using"]},{"Key":"code using","Fragments":["`boost::algorithm`."]},{"Key":"Boost rocks!","Fragments":["Really"]},{"Key":"rocks! Really","Fragments":["simple"]},{"Key":"Really simple","Fragments":["and"]},{"Key":"One small","Fragments":["suggestion:","thing:"]},{"Key":"small suggestion:","Fragments":["you"]},{"Key":"suggestion: you","Fragments":["can"]},{"Key":"use 'islower'","Fragments":["and","to"]},{"Key":"'islower' and","Fragments":["'isupper'"]},{"Key":"and 'isupper'","Fragments":["to"]},{"Key":"'isupper' to","Fragments":["check","check"]},{"Key":"if letter","Fragments":["is"]},{"Key":"is lowercase","Fragments":["or","or"]},{"Key":"lowercase or","Fragments":["uppercase.","uppercase,"]},{"Key":"You forgot","Fragments":["to","a","to"]},{"Key":"Simple, but","Fragments":["not"]},{"Key":"not full","Fragments":["solution."]},{"Key":"full solution.","Fragments":["Have"]},{"Key":"solution. Have","Fragments":["you"]},{"Key":"tried running","Fragments":["more"]},{"Key":"running more","Fragments":["tests?"]},{"Key":"haven't thought","Fragments":["about"]},{"Key":"of 'shout'","Fragments":["detection."]},{"Key":"'shout' detection.","Fragments":["Btw,"]},{"Key":"detection. Btw,","Fragments":["you"]},{"Key":"Btw, you","Fragments":["can"]},{"Key":"use `std::transform`","Fragments":["to"]},{"Key":"use namespace","Fragments":["bob","and"]},{"Key":"function hey()","Fragments":["instead","instead"]},{"Key":"hey() instead","Fragments":["of","of"]},{"Key":"Pretty simple","Fragments":["and","and"]},{"Key":"and beautiful","Fragments":["solution."]},{"Key":"beautiful solution.","Fragments":["STL"]},{"Key":"solution. STL","Fragments":["has"]},{"Key":"STL has","Fragments":["almost"]},{"Key":"has almost","Fragments":["any"]},{"Key":"almost any","Fragments":["code"]},{"Key":"any code","Fragments":["average"]},{"Key":"code average","Fragments":["programmer"]},{"Key":"average programmer","Fragments":["needs,"]},{"Key":"programmer needs,","Fragments":["so"]},{"Key":"needs, so","Fragments":["why"]},{"Key":" Tiny","Fragments":["nit:","note:"]},{"Key":"Tiny nit:","Fragments":["lines"]},{"Key":"nit: lines","Fragments":["are"]},{"Key":"lines are","Fragments":["too"]},{"Key":"too long.","Fragments":["Probable"]},{"Key":"long. Probable","Fragments":["fixes:"]},{"Key":"- split","Fragments":["long"]},{"Key":"split long","Fragments":["lines"]},{"Key":"move some","Fragments":["logic"]},{"Key":"some logic","Fragments":["to","to"]},{"Key":"logic to","Fragments":["separate","ensure","remove","square"]},{"Key":"use boost's","Fragments":["all_of,","boost::to_lower()"]},{"Key":"boost's all_of,","Fragments":["any_of"]},{"Key":"all_of, any_of","Fragments":["or"]},{"Key":"any_of or","Fragments":["create"]},{"Key":"or create","Fragments":["similar"]},{"Key":"create similar","Fragments":["'container-based'"]},{"Key":"similar 'container-based'","Fragments":["wrappers"]},{"Key":" Liking","Fragments":["the"]},{"Key":"Liking the","Fragments":["use"]},{"Key":"if on","Fragments":["line"]},{"Key":"line 19","Fragments":["is"]},{"Key":"19 is","Fragments":["getting"]},{"Key":"is getting","Fragments":["a"]},{"Key":"bit scary","Fragments":["to"]},{"Key":"scary to","Fragments":["look"]},{"Key":"look at,","Fragments":["but"]},{"Key":"at, but","Fragments":["overall"]},{"Key":"but overall","Fragments":["is"]},{"Key":"overall is","Fragments":["quite"]},{"Key":"code now,","Fragments":["it","there"]},{"Key":"now, it","Fragments":["seems","does"]},{"Key":"a for()","Fragments":["loop"]},{"Key":"for() loop","Fragments":["would"]},{"Key":"been easier","Fragments":["to"]},{"Key":"possibly read.","Fragments":["There"]},{"Key":"read. There","Fragments":["is"]},{"Key":"of setup","Fragments":["and"]},{"Key":"setup and","Fragments":["extra"]},{"Key":"and extra","Fragments":["work"]},{"Key":"extra work","Fragments":["to"]},{"Key":"create initial","Fragments":["and"]},{"Key":"initial and","Fragments":["final"]},{"Key":"and final","Fragments":["pairs"]},{"Key":"final pairs","Fragments":["as"]},{"Key":"pairs as","Fragments":["well"]},{"Key":"as incrementing","Fragments":["the"]},{"Key":"incrementing the","Fragments":["mismatch"]},{"Key":"the mismatch","Fragments":["pair."]},{"Key":"clean. In","Fragments":["*is_question()*,"]},{"Key":"In *is_question()*,","Fragments":["you"]},{"Key":"*is_question()*, you","Fragments":["can"]},{"Key":"std::string *back()*","Fragments":["function"]},{"Key":"*back()* function","Fragments":["(c++11)"]},{"Key":"function (c++11)","Fragments":["to"]},{"Key":"(c++11) to","Fragments":["get"]},{"Key":"its last","Fragments":["char.","element."]},{"Key":"a far","Fragments":["simpler"]},{"Key":"far simpler","Fragments":["but"]},{"Key":"simpler but","Fragments":["probably"]},{"Key":"but probably","Fragments":["not"]},{"Key":"as \"C++-esque\"","Fragments":["solution"]},{"Key":"\"C++-esque\" solution","Fragments":["to"]},{"Key":"problem. A","Fragments":["simple"]},{"Key":"for loop,","Fragments":["no","while","it","so","just","other","and","but"]},{"Key":"loop, no","Fragments":["algorithmic"]},{"Key":"no algorithmic","Fragments":["iteration"]},{"Key":"algorithmic iteration","Fragments":["or"]},{"Key":"or pairs","Fragments":["involved."]},{"Key":" @jenifer","Fragments":["thanks!"]},{"Key":"@jenifer thanks!","Fragments":["Nice"]},{"Key":"thanks! Nice","Fragments":["tip,"]},{"Key":"Nice tip,","Fragments":["I'll"]},{"Key":"tip, I'll","Fragments":["make"]},{"Key":"I'll make","Fragments":["a"]},{"Key":"a 3rd","Fragments":["iteration","iterations"]},{"Key":"3rd iteration","Fragments":["for","for"]},{"Key":"iteration for","Fragments":["it.","each.","not","comparison."]},{"Key":"No solution","Fragments":["here.."]},{"Key":" Fine,","Fragments":["but"]},{"Key":"Fine, but","Fragments":["kinda"]},{"Key":"but kinda","Fragments":["verbose","obscure"]},{"Key":"kinda verbose","Fragments":["solution."]},{"Key":"verbose solution.","Fragments":["You"]},{"Key":"solution. You","Fragments":["can"]},{"Key":"'islower' to","Fragments":["check"]},{"Key":"if character","Fragments":["is"]},{"Key":"is lower-case,","Fragments":["'isupper'"]},{"Key":"lower-case, 'isupper'","Fragments":["to"]},{"Key":"is upper-case.","Fragments":["Also,"]},{"Key":"upper-case. Also,","Fragments":["you"]},{"Key":"find string::back","Fragments":["useful."]},{"Key":"know Italian","Fragments":["to"]},{"Key":"Italian to","Fragments":["read"]},{"Key":"read comments","Fragments":["=)"]},{"Key":"Pretty compact","Fragments":["and"]},{"Key":"compact and","Fragments":["readable.","clear","well"]},{"Key":"and readable.","Fragments":["Nice","Shows","If"]},{"Key":"readable. Nice","Fragments":["usage"]},{"Key":"Nice usage","Fragments":["of","of"]},{"Key":"other peoples","Fragments":["solutions.","answers"]},{"Key":"peoples solutions.","Fragments":["My"]},{"Key":"solutions. My","Fragments":["C++"]},{"Key":"My C++","Fragments":["skills"]},{"Key":"C++ skills","Fragments":["is"]},{"Key":"skills is","Fragments":["not"]},{"Key":"very strong.","Fragments":["but"]},{"Key":"strong. but","Fragments":["thank"]},{"Key":"but thank","Fragments":["you"]},{"Key":"for commenting","Fragments":["@randi"]},{"Key":"Good solution,","Fragments":["but"]},{"Key":"almost C","Fragments":["language."]},{"Key":"C language.","Fragments":["Few"]},{"Key":"language. Few","Fragments":["possible"]},{"Key":"Few possible","Fragments":["changes"]},{"Key":"possible changes","Fragments":["to"]},{"Key":"Use iterators","Fragments":["or"]},{"Key":"or range-based","Fragments":["for"]},{"Key":"loops for","Fragments":["more"]},{"Key":"more compact","Fragments":["and"]},{"Key":"* STL","Fragments":["algorithms"]},{"Key":"STL algorithms","Fragments":["already"]},{"Key":"algorithms already","Fragments":["have"]},{"Key":"have almost","Fragments":["anything"]},{"Key":"almost anything","Fragments":["you"]},{"Key":" @america,","Fragments":["congrats"]},{"Key":"@america, congrats","Fragments":["for"]},{"Key":"congrats for","Fragments":["the"]},{"Key":"good but","Fragments":["there"]},{"Key":"some room","Fragments":["for","to"]},{"Key":"for improvement","Fragments":["in"]},{"Key":"improvement in","Fragments":["its"]},{"Key":"its style.","Fragments":["Here"]},{"Key":"style. Here","Fragments":["are"]},{"Key":"Here are","Fragments":["some","my"]},{"Key":"to consider","Fragments":["it.","this","that","is","using","here"]},{"Key":"consider it.","Fragments":["Have"]},{"Key":"it. Have","Fragments":["in"]},{"Key":"Have in","Fragments":["mind"]},{"Key":"are (totally)","Fragments":["personal"]},{"Key":"(totally) personal","Fragments":[":)"]},{"Key":"should limit","Fragments":["your","the"]},{"Key":"limit your","Fragments":["lines"]},{"Key":"your lines","Fragments":["to"]},{"Key":"lines to","Fragments":["some"]},{"Key":"some maximum","Fragments":["length"]},{"Key":"maximum length","Fragments":["(e.g.,"]},{"Key":"length (e.g.,","Fragments":["80)."]},{"Key":"(e.g., 80).","Fragments":["This"]},{"Key":"80). This","Fragments":["helps"]},{"Key":"This helps","Fragments":["a"]},{"Key":"helps a","Fragments":["lot"]},{"Key":"lot when","Fragments":["working"]},{"Key":"when working","Fragments":["with","in"]},{"Key":"with windows","Fragments":["in"]},{"Key":"windows in","Fragments":["some"]},{"Key":"some editors","Fragments":["(maybe"]},{"Key":"editors (maybe","Fragments":["*using"]},{"Key":"(maybe *using","Fragments":["std::find_if*"]},{"Key":"*using std::find_if*","Fragments":["should"]},{"Key":"std::find_if* should","Fragments":["help"]},{"Key":"should help","Fragments":["with"]},{"Key":"variables at","Fragments":["beginning","a"]},{"Key":"at beginning","Fragments":["of"]},{"Key":"a command","Fragments":["block."]},{"Key":"command block.","Fragments":["I"]},{"Key":"block. I","Fragments":["think"]},{"Key":"this keeps","Fragments":["the"]},{"Key":"keeps the","Fragments":["code","implementation"]},{"Key":"use *what.back()*","Fragments":["(c++11)"]},{"Key":"*what.back()* (c++11)","Fragments":["instead"]},{"Key":"(c++11) instead","Fragments":["of"]},{"Key":"of **what.rbegin()*","Fragments":["to"]},{"Key":"**what.rbegin()* to","Fragments":["get"]},{"Key":"to dig","Fragments":["through"]},{"Key":"dig through","Fragments":["boost"]},{"Key":"through boost","Fragments":["and"]},{"Key":"use iterator","Fragments":["functions"]},{"Key":"iterator functions","Fragments":["from"]},{"Key":"from there","Fragments":["or"]},{"Key":"there or","Fragments":["if","something."]},{"Key":"this iterative","Fragments":["style"]},{"Key":"iterative style","Fragments":["with"]},{"Key":"style with","Fragments":["the"]},{"Key":"done any","Fragments":["really","C++,"]},{"Key":"any really","Fragments":["advanced"]},{"Key":"really advanced","Fragments":["programming,"]},{"Key":"advanced programming,","Fragments":["but"]},{"Key":"programming, but","Fragments":["the"]},{"Key":"you incremented","Fragments":["`i`"]},{"Key":"incremented `i`","Fragments":["in"]},{"Key":"`i` in","Fragments":["both"]},{"Key":"both loops","Fragments":["was"]},{"Key":"loops was","Fragments":["something"]},{"Key":"really seen","Fragments":["before."]},{"Key":"seen before.","Fragments":["Neat."]},{"Key":"might could","Fragments":["use"]},{"Key":"code neater","Fragments":["would"]},{"Key":"neater would","Fragments":["be"]},{"Key":"the big","Fragments":["`std::transform()`","picture,"]},{"Key":"big `std::transform()`","Fragments":["call"]},{"Key":"`std::transform()` call","Fragments":["on"]},{"Key":"on lines","Fragments":["15/16","63-64."]},{"Key":"lines 15/16","Fragments":["and"]},{"Key":"15/16 and","Fragments":["instead"]},{"Key":"instead change","Fragments":["line"]},{"Key":"change line","Fragments":["11","24"]},{"Key":"to `currentWord.append(1,","Fragments":["std::tolower(sentence[i]));`"]},{"Key":"includes for","Fragments":["`\u003cmap\u003e`,"]},{"Key":"for `\u003cmap\u003e`,","Fragments":["`\u003cstring\u003e`,"]},{"Key":"`\u003cmap\u003e`, `\u003cstring\u003e`,","Fragments":["and"]},{"Key":"`\u003cstring\u003e`, and","Fragments":["`\u003ccctype\u003e`"]},{"Key":"and `\u003ccctype\u003e`","Fragments":["in"]},{"Key":"`\u003ccctype\u003e` in","Fragments":["your"]},{"Key":"should assume","Fragments":["so,"]},{"Key":"assume so,","Fragments":["but"]},{"Key":"so, but","Fragments":["the"]},{"Key":"your source","Fragments":["made","will"]},{"Key":"source made","Fragments":["me"]},{"Key":"me wonder.","Fragments":["It"]},{"Key":"wonder. It","Fragments":["seems"]},{"Key":"intuitive to","Fragments":["contain"]},{"Key":"solution in","Fragments":["one","a","truth.","the"]},{"Key":"least easier","Fragments":["to"]},{"Key":"boost library.","Fragments":["Just","You"]},{"Key":"library. Just","Fragments":["remember"]},{"Key":"Just remember","Fragments":["that"]},{"Key":"that `str.back()`","Fragments":["will"]},{"Key":"`str.back()` will","Fragments":["cause"]},{"Key":"cause undefined","Fragments":["behavior"]},{"Key":"behavior if","Fragments":["you","`what`","the"]},{"Key":"a real-world","Fragments":["application"]},{"Key":"real-world application","Fragments":["that"]},{"Key":"application that","Fragments":["would"]},{"Key":"something you'd","Fragments":["probably"]},{"Key":"you'd probably","Fragments":["want","get"]},{"Key":"to account","Fragments":["for."]},{"Key":"account for.","Fragments":["Also"]},{"Key":"for. Also","Fragments":["not"]},{"Key":"suite, if","Fragments":["you"]},{"Key":"were given","Fragments":["a"]},{"Key":"given a","Fragments":["string","language","disposition."]},{"Key":"with spaces","Fragments":["and","after"]},{"Key":"spaces and","Fragments":["newlines,","a","then"]},{"Key":"and newlines,","Fragments":["I"]},{"Key":"newlines, I","Fragments":["don't"]},{"Key":"think `trim_left_copy(str)`","Fragments":["on"]},{"Key":"`trim_left_copy(str)` on","Fragments":["line"]},{"Key":"28 would","Fragments":["leave"]},{"Key":"would leave","Fragments":["you","the"]},{"Key":"leave you","Fragments":["with"]},{"Key":"you with","Fragments":["an"]},{"Key":" Grr.","Fragments":["Regex."]},{"Key":"Grr. Regex.","Fragments":["I"]},{"Key":"Regex. I","Fragments":["haven't"]},{"Key":"haven't gotten","Fragments":["the","around"]},{"Key":"gotten the","Fragments":["hang","regex"]},{"Key":"the hang","Fragments":["of"]},{"Key":"hang of","Fragments":["them"]},{"Key":"of borrowing","Fragments":["an"]},{"Key":"borrowing an","Fragments":["implementation"]},{"Key":"in JS","Fragments":["by"]},{"Key":"JS by","Fragments":["using"]},{"Key":"of four","Fragments":["if-else"]},{"Key":"four if-else","Fragments":["statements"]},{"Key":"if-else statements","Fragments":["to"]},{"Key":" naive","Fragments":["regex"]},{"Key":"naive regex","Fragments":["implementation"]},{"Key":"regex implementation","Fragments":["that","isn't"]},{"Key":"implementation that","Fragments":["failed","does","I'm","just"]},{"Key":"that failed","Fragments":["6"]},{"Key":"failed 6","Fragments":["tests"]},{"Key":"6 tests","Fragments":[":3"]},{"Key":" quick","Fragments":["refactor"]},{"Key":"quick refactor","Fragments":["into"]},{"Key":"refactor into","Fragments":["functions"]},{"Key":"the uppercase","Fragments":["check"]},{"Key":"know regex,","Fragments":["but"]},{"Key":"regex, but","Fragments":["I"]},{"Key":"really only","Fragments":["need","cared"]},{"Key":"for 3","Fragments":["things."]},{"Key":"3 things.","Fragments":["One"]},{"Key":"things. One","Fragments":["other"]},{"Key":"other thing","Fragments":["you"]},{"Key":"string unnecessarily","Fragments":["is"]},{"Key":"unnecessarily is","Fragments":["pass"]},{"Key":"is pass","Fragments":["`input`"]},{"Key":"pass `input`","Fragments":["by"]},{"Key":"`input` by","Fragments":["reference."]},{"Key":"side note,","Fragments":["this"]},{"Key":"note, this","Fragments":["website"]},{"Key":"this website","Fragments":["expects"]},{"Key":"website expects","Fragments":["you"]},{"Key":"expects you","Fragments":["to"]},{"Key":"only submit","Fragments":["your"]},{"Key":"your work","Fragments":["once"]},{"Key":"work once","Fragments":["you"]},{"Key":"once you","Fragments":["have","have"]},{"Key":"a working","Fragments":["solution.","solution","regex","function"]},{"Key":"working solution.","Fragments":["In"]},{"Key":"solution. In","Fragments":["fact,"]},{"Key":"the site","Fragments":["specifically","goes,"]},{"Key":"site specifically","Fragments":["hides"]},{"Key":"specifically hides","Fragments":["others'"]},{"Key":"hides others'","Fragments":["solutions"]},{"Key":"others' solutions","Fragments":["from"]},{"Key":"solutions from","Fragments":["you"]},{"Key":"from you","Fragments":["until"]},{"Key":"you until","Fragments":["you've"]},{"Key":"you've figured","Fragments":["out"]},{"Key":"working solution","Fragments":["on"]},{"Key":"solution on","Fragments":["your"]},{"Key":"own, to","Fragments":["encourage"]},{"Key":"encourage you","Fragments":["to"]},{"Key":"learn rather","Fragments":["than"]},{"Key":"than to","Fragments":["copy.","query","compare"]},{"Key":"- Moved","Fragments":["code"]},{"Key":"Moved code","Fragments":["checking"]},{"Key":"code checking","Fragments":["what"]},{"Key":"checking what","Fragments":["type"]},{"Key":"of prompt","Fragments":["was"]},{"Key":"prompt was","Fragments":["passed"]},{"Key":"was passed","Fragments":["to"]},{"Key":"to ```hey```","Fragments":["to","function"]},{"Key":"```hey``` to","Fragments":["separate"]},{"Key":"- ```#include```ed","Fragments":["```\u003clocale\u003e```"]},{"Key":"```#include```ed ```\u003clocale\u003e```","Fragments":["instead"]},{"Key":"```\u003clocale\u003e``` instead","Fragments":["of"]},{"Key":"of ```\u003ccctype\u003e```","Fragments":["to"]},{"Key":"```\u003ccctype\u003e``` to","Fragments":["provide"]},{"Key":"provide ```isalpha```","Fragments":["and"]},{"Key":"```isalpha``` and","Fragments":["```islower```"]},{"Key":"- changed","Fragments":["```int```"]},{"Key":"changed ```int```","Fragments":["in"]},{"Key":"```int``` in","Fragments":["for-loops"]},{"Key":"in for-loops","Fragments":["iterating"]},{"Key":"for-loops iterating","Fragments":["through"]},{"Key":"iterating through","Fragments":["strings","each","two","your","by","the"]},{"Key":"through strings","Fragments":["to"]},{"Key":"- used","Fragments":["```find_not_first_of('"]},{"Key":"used ```find_not_first_of('","Fragments":["')```"]},{"Key":"```find_not_first_of(' ')```","Fragments":["to"]},{"Key":"')``` to","Fragments":["check"]},{"Key":"for empty","Fragments":["prompts","string","(or","string","upfront","containers"]},{"Key":"worth having","Fragments":["a"]},{"Key":"one-line ```isEmpty```","Fragments":["function"]},{"Key":"```isEmpty``` function","Fragments":["but"]},{"Key":"makes ```hey```","Fragments":["more"]},{"Key":"```hey``` more","Fragments":["readable."]},{"Key":"Tiny note:","Fragments":["you"]},{"Key":"note: you","Fragments":["can","checking"]},{"Key":"easily switch","Fragments":["to"]},{"Key":"some unsigned","Fragments":["type","type"]},{"Key":"handle larger","Fragments":["inputs."]},{"Key":" Correct,","Fragments":["but"]},{"Key":"Correct, but","Fragments":["kinda"]},{"Key":"kinda obscure","Fragments":["solution."]},{"Key":"Any specific","Fragments":["reason","reason?"]},{"Key":"specific reason","Fragments":["to"]},{"Key":"use `do-while`","Fragments":["instead"]},{"Key":"`do-while` instead","Fragments":["of"]},{"Key":"of `for`?","Fragments":["In"]},{"Key":"`for`? In","Fragments":["the"]},{"Key":"already has","Fragments":["information"]},{"Key":"has information","Fragments":["when"]},{"Key":"information when","Fragments":["it"]},{"Key":"it ends.","Fragments":["Also,"]},{"Key":"ends. Also,","Fragments":["second"]},{"Key":"Also, second","Fragments":["check"]},{"Key":"second check","Fragments":["(`string::compare`)"]},{"Key":"check (`string::compare`)","Fragments":["would"]},{"Key":"(`string::compare`) would","Fragments":["not"]},{"Key":"needed with","Fragments":["correct"]},{"Key":"with correct","Fragments":["`for`."]},{"Key":" Switch","Fragments":["to","to"]},{"Key":"Switch to","Fragments":["using","using"]},{"Key":" Clever","Fragments":["use"]},{"Key":"Clever use","Fragments":["of"]},{"Key":"and very","Fragments":["readable","readable","different.","readable.","understandable."]},{"Key":" Note:","Fragments":["you","you"]},{"Key":"Note: you","Fragments":["don't","can"]},{"Key":"need an","Fragments":["object","extra","else."]},{"Key":"object `bob`,","Fragments":["it"]},{"Key":"`bob`, it","Fragments":["can"]},{"Key":"basically copied","Fragments":["your"]},{"Key":"copied your","Fragments":["entire"]},{"Key":"your entire","Fragments":["code"]},{"Key":"entire code","Fragments":["if"]},{"Key":"if don't","Fragments":["mind"]},{"Key":"don't mind","Fragments":[":)"]},{"Key":"Interesting. How","Fragments":["does"]},{"Key":"behave on","Fragments":["MSVC"]},{"Key":"on MSVC","Fragments":["if"]},{"Key":"MSVC if","Fragments":["you"]},{"Key":"a fourth","Fragments":["version"]},{"Key":"fourth version","Fragments":["that"]},{"Key":"version that","Fragments":["avoids","only"]},{"Key":"that avoids","Fragments":["both"]},{"Key":"avoids both","Fragments":["back_inserter"]},{"Key":"both back_inserter","Fragments":["and"]},{"Key":"back_inserter and","Fragments":["the"]},{"Key":" word.resize(std::distance(start,","Fragments":["stop));"]},{"Key":" std::transform(start,","Fragments":["stop,"]},{"Key":"std::transform(start, stop,","Fragments":["word.begin(),"]},{"Key":"stop, word.begin(),","Fragments":["::tolower);"]},{"Key":"is (slightly)","Fragments":["slower"]},{"Key":"(slightly) slower","Fragments":["than"]},{"Key":"second version.","Fragments":["But"]},{"Key":"version. But","Fragments":["I'm","it"]},{"Key":"curious if","Fragments":["you"]},{"Key":"After seeing","Fragments":["@heath"]},{"Key":"seeing @heath","Fragments":["implementation,"]},{"Key":"@heath implementation,","Fragments":["I"]},{"Key":"check **sregex_iterator**","Fragments":["in"]},{"Key":"**sregex_iterator** in","Fragments":["this"]},{"Key":"problem. Great","Fragments":["choice!"]},{"Key":"Great choice!","Fragments":["Thanks."]},{"Key":"submit another","Fragments":["iteration"]},{"Key":"iteration removing","Fragments":["the"]},{"Key":"First (quick)","Fragments":["iteration."]},{"Key":"(quick) iteration.","Fragments":["Just"]},{"Key":"iteration. Just","Fragments":["made","did"]},{"Key":"Just made","Fragments":["the"]},{"Key":"could with","Fragments":["basic"]},{"Key":"with basic","Fragments":["code"]},{"Key":"basic code","Fragments":["organization."]},{"Key":"code organization.","Fragments":["Gonna"]},{"Key":"organization. Gonna","Fragments":["take"]},{"Key":"Gonna take","Fragments":["a"]},{"Key":"better look","Fragments":["now"]},{"Key":"look now","Fragments":["to"]},{"Key":"now to","Fragments":["check"]},{"Key":"I improve","Fragments":["the","or"]},{"Key":"I ask","Fragments":["about"]},{"Key":"ask about","Fragments":["the"]},{"Key":"just setting","Fragments":["up"]},{"Key":"a class?","Fragments":["Is","Of"]},{"Key":"class? Is","Fragments":["setting"]},{"Key":"Is setting","Fragments":["up"]},{"Key":"static public","Fragments":["method","function"]},{"Key":"public method","Fragments":["just"]},{"Key":"method just","Fragments":["kind"]},{"Key":"just kind","Fragments":["of","of"]},{"Key":"of overkill","Fragments":["for"]},{"Key":"Added **using**","Fragments":["statements"]},{"Key":"**using** statements","Fragments":["to"]},{"Key":"avoid long","Fragments":["lines."]},{"Key":"calculate and","Fragments":["store","return"]},{"Key":"store each","Fragments":["of"]},{"Key":"the ages","Fragments":["on"]},{"Key":"ages on","Fragments":["instantiation"]},{"Key":"on instantiation","Fragments":["or"]},{"Key":"instantiation or","Fragments":["to"]},{"Key":"or to","Fragments":["calculate","lowercase","test"]},{"Key":"return as","Fragments":["and"]},{"Key":"as and","Fragments":["when"]},{"Key":"is optimized","Fragments":["for"]},{"Key":"optimized for","Fragments":["speed,"]},{"Key":"speed, the","Fragments":["solution"]},{"Key":"solution will","Fragments":["probably","be","work"]},{"Key":"probably appear","Fragments":["'magical'"]},{"Key":"appear 'magical'","Fragments":["at"]},{"Key":"'magical' at","Fragments":["first"]},{"Key":"glance to","Fragments":["those"]},{"Key":"those unfamiliar","Fragments":["with"]},{"Key":"unfamiliar with","Fragments":["the"]},{"Key":"problem. Speciallly","Fragments":["for"]},{"Key":"Speciallly for","Fragments":["`total()`"]},{"Key":"for `total()`","Fragments":["which"]},{"Key":"`total()` which","Fragments":["uses"]},{"Key":"which uses","Fragments":["trickery"]},{"Key":"uses trickery","Fragments":["to"]},{"Key":"trickery to","Fragments":["get"]},{"Key":"the 64","Fragments":["bit"]},{"Key":"bit length","Fragments":["limitation."]},{"Key":"length limitation.","Fragments":["An"]},{"Key":"limitation. An","Fragments":["alternative"]},{"Key":"An alternative","Fragments":["form","to","would"]},{"Key":"alternative form","Fragments":["is"]},{"Key":"also commented","Fragments":["in"]},{"Key":"commented in","Fragments":["the"]},{"Key":"but while","Fragments":["it"]},{"Key":"uses logic","Fragments":["similar"]},{"Key":"logic similar","Fragments":["to"]},{"Key":"to `square()`","Fragments":["it"]},{"Key":"`square()` it","Fragments":["looks"]},{"Key":"looks far","Fragments":["more"]},{"Key":"more confusing.","Fragments":["Possibly"]},{"Key":"confusing. Possibly","Fragments":["the"]},{"Key":"Possibly the","Fragments":["only"]},{"Key":"only way","Fragments":["to","I","to"]},{"Key":"code lucid","Fragments":["is"]},{"Key":"lucid is","Fragments":["to"]},{"Key":"to sacrifice","Fragments":["speed","readability"]},{"Key":"sacrifice speed","Fragments":["completely"]},{"Key":"speed completely","Fragments":["and"]},{"Key":"completely and","Fragments":["go"]},{"Key":"and go","Fragments":["for","with","directly"]},{"Key":"a looping","Fragments":["approach."]},{"Key":"Well, there","Fragments":["are"]},{"Key":"are quite","Fragments":["a","some"]},{"Key":"few explanations","Fragments":["out"]},{"Key":"explanations out","Fragments":["there,"]},{"Key":"do my","Fragments":["best."]},{"Key":"few benefits","Fragments":["of"]},{"Key":"1. Simplicity.","Fragments":["Boilerplate"]},{"Key":"Simplicity. Boilerplate","Fragments":["to"]},{"Key":"Boilerplate to","Fragments":["write"]},{"Key":"write namespaced","Fragments":["function"]},{"Key":"namespaced function","Fragments":["is"]},{"Key":"slightly smaller","Fragments":["than"]},{"Key":"2. Idiomaticity.","Fragments":["C++"]},{"Key":"Idiomaticity. C++","Fragments":["support"]},{"Key":"C++ support","Fragments":["many"]},{"Key":"support many","Fragments":["different"]},{"Key":"many different","Fragments":["paradigms.","ways"]},{"Key":"different paradigms.","Fragments":["It"]},{"Key":"paradigms. It","Fragments":["doesn't"]},{"Key":"require to","Fragments":["have"]},{"Key":"each existing","Fragments":["function."]},{"Key":"existing function.","Fragments":["Sometimes"]},{"Key":"function. Sometimes","Fragments":["you"]},{"Key":"Sometimes you","Fragments":["just"]},{"Key":"express your","Fragments":["intent."]},{"Key":"your intent.","Fragments":["In"]},{"Key":"intent. In","Fragments":["this"]},{"Key":"case, `bob`","Fragments":["has"]},{"Key":"`bob` has","Fragments":["no"]},{"Key":"no members","Fragments":["except"]},{"Key":"members except","Fragments":["for"]},{"Key":"for `bob::hey`,","Fragments":["and"]},{"Key":"`bob::hey`, and","Fragments":["no"]},{"Key":"other behavior,","Fragments":["so"]},{"Key":"behavior, so","Fragments":["why","it"]},{"Key":"class? Of","Fragments":["course,"]},{"Key":"can later","Fragments":["extend"]},{"Key":"later extend","Fragments":["it"]},{"Key":"allow Bob","Fragments":["doing"]},{"Key":"Bob doing","Fragments":["some"]},{"Key":"doing some","Fragments":["other","simple"]},{"Key":"other things","Fragments":["except","of"]},{"Key":"things except","Fragments":["of"]},{"Key":"except of","Fragments":["`hey`,"]},{"Key":"of `hey`,","Fragments":["but"]},{"Key":"`hey`, but","Fragments":["I"]},{"Key":"3. Context","Fragments":["(interface/tests"]},{"Key":"Context (interface/tests","Fragments":["on"]},{"Key":"(interface/tests on","Fragments":["exercism)."]},{"Key":"on exercism).","Fragments":["Look"]},{"Key":"exercism). Look","Fragments":["at"]},{"Key":"suite for","Fragments":["this"]},{"Key":"exercise. It","Fragments":["is"]},{"Key":"not trying","Fragments":["to"]},{"Key":"object anywhere.","Fragments":["In"]},{"Key":"anywhere. In","Fragments":["some","any"]},{"Key":"In some","Fragments":["other"]},{"Key":"other exercises","Fragments":["you"]},{"Key":"exercises you","Fragments":["can"]},{"Key":"can definitely","Fragments":["see"]},{"Key":"definitely see","Fragments":["tests"]},{"Key":"see tests","Fragments":["requiring"]},{"Key":"tests requiring","Fragments":["you"]},{"Key":"requiring you","Fragments":["to"]},{"Key":"and declare","Fragments":["some","them"]},{"Key":"declare some","Fragments":["methods"]},{"Key":"some methods","Fragments":["on"]},{"Key":"With all","Fragments":["being"]},{"Key":"all being","Fragments":["said,"]},{"Key":"being said,","Fragments":["it","great"]},{"Key":"said, it","Fragments":["is"]},{"Key":"your choices.","Fragments":["If"]},{"Key":"choices. If","Fragments":["you"]},{"Key":"you feel","Fragments":["that","uneasy","like"]},{"Key":"feel that","Fragments":["`bob`","this","might"]},{"Key":"that `bob`","Fragments":["is"]},{"Key":"class which","Fragments":["can"]},{"Key":"different instances,","Fragments":["it"]},{"Key":"instances, it","Fragments":["should"]},{"Key":" See","Fragments":["also:","the"]},{"Key":" Compact","Fragments":["and"]},{"Key":"Compact and","Fragments":["readable,"]},{"Key":"and readable,","Fragments":["nice"]},{"Key":"can switch","Fragments":["to"]},{"Key":"type (`unsigned`,","Fragments":["`size_t`)"]},{"Key":"(`unsigned`, `size_t`)","Fragments":["to"]},{"Key":"`size_t`) to","Fragments":["handle"]},{"Key":"handle inputs","Fragments":["of"]},{"Key":"of bigger","Fragments":["lengths."]},{"Key":"add about","Fragments":["using"]},{"Key":"using class","Fragments":["in"]},{"Key":"* Everything","Fragments":["`static`"]},{"Key":"Everything `static`","Fragments":["is"]},{"Key":"`static` is","Fragments":["difficult","proper"]},{"Key":"cause unexpected","Fragments":["behavior"]},{"Key":"unexpected behavior","Fragments":["and"]},{"Key":"hence should","Fragments":["be"]},{"Key":"be avoided,","Fragments":["there"]},{"Key":"avoided, there","Fragments":["are"]},{"Key":"are special","Fragments":["cases"]},{"Key":"cases like","Fragments":["`factory"]},{"Key":"like `factory","Fragments":["methods`"]},{"Key":"`factory methods`","Fragments":["that"]},{"Key":"methods` that","Fragments":["static"]},{"Key":"static access","Fragments":["is"]},{"Key":"access is","Fragments":["accepted","beginning"]},{"Key":"is accepted","Fragments":["(https://sourcemaking.com/design_patterns/factory_method/cpp/1);"]},{"Key":" Cya","Fragments":[";)"]},{"Key":"After reading","Fragments":["@kevin","my"]},{"Key":"reading @kevin","Fragments":["comment"]},{"Key":"@kevin comment","Fragments":["about"]},{"Key":"about static","Fragments":["members"]},{"Key":"static members","Fragments":["and","and","not"]},{"Key":"and namespace","Fragments":["functions"]},{"Key":"namespace functions","Fragments":["I"]},{"Key":"functions I","Fragments":["did"]},{"Key":"did agree","Fragments":["that"]},{"Key":"that **bob**","Fragments":["is"]},{"Key":"**bob** is","Fragments":["not"]},{"Key":"didn't found","Fragments":["any"]},{"Key":"any explicit","Fragments":["comment"]},{"Key":"explicit comment","Fragments":["about"]},{"Key":"topic in","Fragments":["[CppCoreGuidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md),"]},{"Key":"in [CppCoreGuidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md),","Fragments":["I"]},{"Key":"[CppCoreGuidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md), I","Fragments":["will"]},{"Key":"will keep","Fragments":["this"]},{"Key":" @lilly","Fragments":["there"]},{"Key":"@lilly there","Fragments":["are"]},{"Key":"already functions","Fragments":["for"]},{"Key":"for case","Fragments":["conversion"]},{"Key":"of chars.","Fragments":["Check"]},{"Key":"chars. Check","Fragments":["[touppper()](http://en.cppreference.com/w/cpp/string/byte/toupper)/[tolower()](http://en.cppreference.com/w/cpp/string/byte/tolower)."]},{"Key":"easier if","Fragments":["you"]},{"Key":"you first","Fragments":["convert","initialize"]},{"Key":"first convert","Fragments":["both"]},{"Key":"convert both","Fragments":["your"]},{"Key":"both your","Fragments":["*word_*"]},{"Key":"your *word_*","Fragments":["member"]},{"Key":"*word_* member","Fragments":["(in"]},{"Key":"member (in","Fragments":["constructor)"]},{"Key":"(in constructor)","Fragments":["and"]},{"Key":"constructor) and","Fragments":["copies"]},{"Key":"and copies","Fragments":["of"]},{"Key":"in *list*","Fragments":["to"]},{"Key":"*list* to","Fragments":["the"]},{"Key":"same case","Fragments":["instead"]},{"Key":"case instead","Fragments":["of"]},{"Key":"checking each","Fragments":["char"]},{"Key":"char case.","Fragments":["There"]},{"Key":"case. There","Fragments":["is,"]},{"Key":"There is,","Fragments":["for"]},{"Key":"is, for","Fragments":["example,"]},{"Key":"example, *[to_lower_copy](http://www.boost.org/doc/libs/1_59_0/doc/html/boost/algorithm/to_lower_copy.html)*","Fragments":["of"]},{"Key":"*[to_lower_copy](http://www.boost.org/doc/libs/1_59_0/doc/html/boost/algorithm/to_lower_copy.html)* of","Fragments":["boost"]},{"Key":"or *[std::transform](http://en.cppreference.com/w/cpp/algorithm/transform)*","Fragments":["for"]},{"Key":"*[std::transform](http://en.cppreference.com/w/cpp/algorithm/transform)* for","Fragments":["this."]},{"Key":"performance in","Fragments":["terms","that"]},{"Key":"of time/cpu","Fragments":["complexity?"]},{"Key":"implementation does","Fragments":["sort()"]},{"Key":"does sort()","Fragments":["for"]},{"Key":"sort() for","Fragments":["every"]},{"Key":"every word","Fragments":["from","in","in","once."]},{"Key":"word from","Fragments":["the"]},{"Key":"for anagram\"","Fragments":["list."]},{"Key":"anagram\" list.","Fragments":["If"]},{"Key":"list. If","Fragments":["len_i"]},{"Key":"If len_i","Fragments":["is"]},{"Key":"len_i is","Fragments":["the"]},{"Key":"the i-th","Fragments":["word,"]},{"Key":"i-th word,","Fragments":["than"]},{"Key":"word, than","Fragments":["the"]},{"Key":"in O(max(len_i)),","Fragments":["though."]},{"Key":"O(max(len_i)), though.","Fragments":["The"]},{"Key":"idea is","Fragments":["to","the","to","use","that"]},{"Key":"the occurence","Fragments":["of","of"]},{"Key":"the words;","Fragments":["if"]},{"Key":"words; if","Fragments":["two"]},{"Key":"words have","Fragments":["the"]},{"Key":"same length","Fragments":["and","or","as","as","and","as","as","too,"]},{"Key":"length and","Fragments":["the","contain","buffer","use","comparing"]},{"Key":"same number","Fragments":["of","of"]},{"Key":"of occurences","Fragments":["for"]},{"Key":"occurences for","Fragments":["all"]},{"Key":"all their","Fragments":["characters,"]},{"Key":"their characters,","Fragments":["one"]},{"Key":"characters, one","Fragments":["of"]},{"Key":" Modified","Fragments":["so","`matches`"]},{"Key":"Modified so","Fragments":["that"]},{"Key":"the loops","Fragments":["use"]},{"Key":"loops use","Fragments":["a"]},{"Key":"map rather","Fragments":["than"]},{"Key":"two vectors","Fragments":["(inspired"]},{"Key":"vectors (inspired","Fragments":["by"]},{"Key":"(inspired by","Fragments":["siebenschlaefer's"]},{"Key":"by siebenschlaefer's","Fragments":["solution)."]},{"Key":"siebenschlaefer's solution).","Fragments":["I"]},{"Key":"solution). I","Fragments":["also"]},{"Key":"also realise","Fragments":["just"]},{"Key":"realise just","Fragments":["now"]},{"Key":"just now","Fragments":["that","and"]},{"Key":"```#include \u003cvector\u003e```","Fragments":["directive..."]},{"Key":"Ah, ok","Fragments":["great!"]},{"Key":"ok great!","Fragments":["Yeah"]},{"Key":"great! Yeah","Fragments":["that"]},{"Key":"Yeah that","Fragments":["makes"]},{"Key":"of sense.","Fragments":["thanks!"]},{"Key":" one","Fragments":["more"]},{"Key":"more question,","Fragments":["if"]},{"Key":"question, if","Fragments":["that"]},{"Key":"is ok.","Fragments":["This"]},{"Key":"ok. This","Fragments":["is"]},{"Key":"probably really","Fragments":["basic,"]},{"Key":"really basic,","Fragments":["but"]},{"Key":"basic, but","Fragments":["with"]},{"Key":"being familiar","Fragments":["with"]},{"Key":"with C++,","Fragments":["at"]},{"Key":"C++, at","Fragments":["all,"]},{"Key":"it's eluding","Fragments":["me."]},{"Key":"eluding me.","Fragments":["I"]},{"Key":"see in","Fragments":["lots","code"]},{"Key":"in lots","Fragments":["of"]},{"Key":"these examples","Fragments":["that"]},{"Key":"file was","Fragments":["used","removed"]},{"Key":"was used","Fragments":["to","because","a"]},{"Key":"name space,","Fragments":["and"]},{"Key":"file. That","Fragments":["is,","ways"]},{"Key":"I assume,","Fragments":["ideal,"]},{"Key":"assume, ideal,","Fragments":["but"]},{"Key":"ideal, but","Fragments":["how"]},{"Key":"but how","Fragments":["would"]},{"Key":"how would","Fragments":["I"]},{"Key":"up so","Fragments":["that","it"]},{"Key":"test framework","Fragments":["includes","to"]},{"Key":"framework includes","Fragments":["the"]},{"Key":"right file?","Fragments":["So"]},{"Key":"file? So","Fragments":["bob_test.cpp"]},{"Key":"So bob_test.cpp","Fragments":["includes"]},{"Key":"bob_test.cpp includes","Fragments":["the"]},{"Key":"much is","Fragments":["clear."]},{"Key":"is clear.","Fragments":["If"]},{"Key":"clear. If","Fragments":["this"]},{"Key":"was php","Fragments":["(hahaha)"]},{"Key":"php (hahaha)","Fragments":["I"]},{"Key":"(hahaha) I","Fragments":["would"]},{"Key":"just switch","Fragments":["the"]},{"Key":"switch the","Fragments":["bob_test.cpp","string"]},{"Key":"the bob_test.cpp","Fragments":["file"]},{"Key":"include bob.cpp,","Fragments":["and"]},{"Key":"bob.cpp, and","Fragments":["bob.cpp"]},{"Key":"and bob.cpp","Fragments":["would"]},{"Key":"bob.cpp would","Fragments":["include"]},{"Key":"would include","Fragments":["the"]},{"Key":"am under","Fragments":["the"]},{"Key":"include other","Fragments":["source"]},{"Key":"other source","Fragments":["files"]},{"Key":"files in","Fragments":["C++,","my","one"]},{"Key":"C++, only","Fragments":["headers"]},{"Key":"only headers","Fragments":["are"]},{"Key":"headers are","Fragments":["included."]},{"Key":"are included.","Fragments":["How"]},{"Key":"included. How","Fragments":["does"]},{"Key":"know to","Fragments":["include"]},{"Key":" @gisselle-darling1,","Fragments":["i"]},{"Key":"@gisselle-darling1, i","Fragments":["think"]},{"Key":"think [this](http://exercism.io/submissions/2431ab859b6241f093bcda42cc04b17f)","Fragments":["should"]},{"Key":"[this](http://exercism.io/submissions/2431ab859b6241f093bcda42cc04b17f) should","Fragments":["answer"]},{"Key":"should answer","Fragments":["your"]},{"Key":"use `fold`","Fragments":["(in"]},{"Key":"`fold` (in","Fragments":["C++"]},{"Key":"(in C++","Fragments":["`accumulate`)"]},{"Key":"C++ `accumulate`)","Fragments":["because"]},{"Key":"`accumulate`) because","Fragments":["it"]},{"Key":"it actually","Fragments":["is"]},{"Key":"right algorithm","Fragments":["for"]},{"Key":"can't decide","Fragments":["which"]},{"Key":"two approaches","Fragments":["here"]},{"Key":"approaches here","Fragments":["is"]},{"Key":"better. Both","Fragments":["are"]},{"Key":"Both are","Fragments":["the"]},{"Key":"decided the","Fragments":["second"]},{"Key":"second approach","Fragments":["was"]},{"Key":"approach was","Fragments":["better","very","just"]},{"Key":"after all.","Fragments":["The"]},{"Key":"all. The","Fragments":["first"]},{"Key":"better suited","Fragments":["to","as"]},{"Key":"to Python","Fragments":["or"]},{"Key":"Python or","Fragments":["Ruby."]},{"Key":" wanted","Fragments":["to"]},{"Key":"use foreach","Fragments":["with"]},{"Key":"foreach with","Fragments":["lamda"]},{"Key":"with lamda","Fragments":["for"]},{"Key":"lamda for","Fragments":["this"]},{"Key":"this one,","Fragments":["but","this","but"]},{"Key":"but can't","Fragments":["find","take"]},{"Key":"can't find","Fragments":["documentation"]},{"Key":"In functions","Fragments":["\"none_of\""]},{"Key":"functions \"none_of\"","Fragments":["and"]},{"Key":"\"none_of\" and","Fragments":["\"all_of\""]},{"Key":"and \"all_of\"","Fragments":["you"]},{"Key":"\"all_of\" you","Fragments":["don't"]},{"Key":" [](char","Fragments":["c)"]},{"Key":"return std::islower(c);","Fragments":["}"]},{"Key":"library cctype","Fragments":["and"]},{"Key":"cctype and","Fragments":["type:"]},{"Key":" std::none_of(message.begin(),","Fragments":["message.end(),"]},{"Key":"std::none_of(message.begin(), message.end(),","Fragments":["islower);"]},{"Key":"no experience","Fragments":["with"]},{"Key":"with c++","Fragments":["I","for"]},{"Key":"c++ I","Fragments":["would"]},{"Key":"which best","Fragments":["practices"]},{"Key":"practices I","Fragments":["am"]},{"Key":"am missing","Fragments":["to","a","something"]},{"Key":"missing to","Fragments":["make"]},{"Key":"am wondering:","Fragments":["Since"]},{"Key":"wondering: Since","Fragments":["I"]},{"Key":"the _alphaFound_","Fragments":["to"]},{"Key":"_alphaFound_ to","Fragments":["indicate"]},{"Key":"indicate when","Fragments":["the"]},{"Key":"question has","Fragments":["an"]},{"Key":"an alpha","Fragments":["char.","that"]},{"Key":"alpha char.","Fragments":["Is"]},{"Key":"char. Is","Fragments":["it"]},{"Key":"assign it","Fragments":["many"]},{"Key":"it many","Fragments":["times"]},{"Key":"times to","Fragments":["use"]},{"Key":"use only","Fragments":["one","what","one"]},{"Key":"one cycle","Fragments":["or"]},{"Key":"cycle or","Fragments":["is"]},{"Key":"another cycle","Fragments":["that"]},{"Key":"cycle that","Fragments":["breaks"]},{"Key":"that breaks","Fragments":["when"]},{"Key":"breaks when","Fragments":["the"]},{"Key":"first alpha","Fragments":["character"]},{"Key":"alpha character","Fragments":["is","is"]},{"Key":"the _isalpha_","Fragments":["function"]},{"Key":"_isalpha_ function","Fragments":["in"]},{"Key":"in _cctype_","Fragments":["to"]},{"Key":"_cctype_ to","Fragments":["avoid"]},{"Key":"avoid your","Fragments":["own"]},{"Key":"implementation as","Fragments":["in","i"]},{"Key":"in _valid_word_char_","Fragments":["function."]},{"Key":" Recommendation:","Fragments":["You"]},{"Key":"Recommendation: You","Fragments":["could"]},{"Key":"could break","Fragments":["your"]},{"Key":"break your","Fragments":["cycle","code,","implementation."]},{"Key":"your cycle","Fragments":["whenever"]},{"Key":"cycle whenever","Fragments":["you"]},{"Key":"whenever you","Fragments":["find","invoke"]},{"Key":"alpha that","Fragments":["is"]},{"Key":"an upper.","Fragments":["That"]},{"Key":"upper. That","Fragments":["way"]},{"Key":"save CPU","Fragments":["time."]},{"Key":"not pretty,","Fragments":["but"]},{"Key":"it ...","Fragments":["."]},{"Key":"you invoking","Fragments":["exercism?"]},{"Key":"exercism -","Fragments":["A"]},{"Key":"- A","Fragments":["command","```using"]},{"Key":"A command","Fragments":["line"]},{"Key":"tool to","Fragments":["interact"]},{"Key":"to interact","Fragments":["with"]},{"Key":"interact with","Fragments":["http://exercism.io"]},{"Key":"exercism [global","Fragments":["options]"]},{"Key":"[global options]","Fragments":["command"]},{"Key":"options] command","Fragments":["[command"]},{"Key":"command [command","Fragments":["options]"]},{"Key":" debug","Fragments":["Outputs"]},{"Key":"debug Outputs","Fragments":["useful"]},{"Key":"Outputs useful","Fragments":["debug"]},{"Key":"useful debug","Fragments":["information."]},{"Key":" configure","Fragments":["Writes"]},{"Key":"configure Writes","Fragments":["config"]},{"Key":"Writes config","Fragments":["values"]},{"Key":"config values","Fragments":["to"]},{"Key":"values to","Fragments":["a"]},{"Key":"a JSON","Fragments":["file."]},{"Key":" demo,","Fragments":["d"]},{"Key":"demo, d","Fragments":["Fetches"]},{"Key":"d Fetches","Fragments":["a"]},{"Key":"Fetches a","Fragments":["demo"]},{"Key":"a demo","Fragments":["problem"]},{"Key":"demo problem","Fragments":["for"]},{"Key":"problem for","Fragments":["each"]},{"Key":"each language","Fragments":["track","could"]},{"Key":"language track","Fragments":["on"]},{"Key":"track on","Fragments":["exercism.io."]},{"Key":" fetch,","Fragments":["f"]},{"Key":"fetch, f","Fragments":["Fetches"]},{"Key":"f Fetches","Fragments":["your"]},{"Key":"Fetches your","Fragments":["current"]},{"Key":"your current","Fragments":["problems"]},{"Key":"current problems","Fragments":["on","on"]},{"Key":"problems on","Fragments":["exercism.io,","from"]},{"Key":"on exercism.io,","Fragments":["as"]},{"Key":"exercism.io, as","Fragments":["well"]},{"Key":"next unstarted","Fragments":["problem"]},{"Key":"unstarted problem","Fragments":["in"]},{"Key":" restore,","Fragments":["r"]},{"Key":"restore, r","Fragments":["Restores"]},{"Key":"r Restores","Fragments":["completed"]},{"Key":"Restores completed","Fragments":["and"]},{"Key":"completed and","Fragments":["current"]},{"Key":"and current","Fragments":["problems"]},{"Key":"on from","Fragments":["exercism.io,"]},{"Key":"from exercism.io,","Fragments":["along"]},{"Key":"exercism.io, along","Fragments":["with"]},{"Key":"along with","Fragments":["your","the","their","my","``str2Length``","these"]},{"Key":"your most","Fragments":["recent"]},{"Key":"most recent","Fragments":["iteration"]},{"Key":"recent iteration","Fragments":["for"]},{"Key":" skip","Fragments":["Skips"]},{"Key":"skip Skips","Fragments":["a"]},{"Key":"Skips a","Fragments":["problem"]},{"Key":"problem given","Fragments":["a"]},{"Key":"language and","Fragments":["slug."]},{"Key":" submit,","Fragments":["s"]},{"Key":"submit, s","Fragments":["Submits"]},{"Key":"s Submits","Fragments":["a"]},{"Key":" unsubmit,","Fragments":["u"]},{"Key":"unsubmit, u","Fragments":["Deletes"]},{"Key":"u Deletes","Fragments":["the"]},{"Key":"Deletes the","Fragments":["most"]},{"Key":"most recently","Fragments":["submitted"]},{"Key":"recently submitted","Fragments":["iteration."]},{"Key":" upgrade","Fragments":["Upgrades"]},{"Key":"upgrade Upgrades","Fragments":["the"]},{"Key":"Upgrades the","Fragments":["CLI"]},{"Key":"CLI to","Fragments":["the"]},{"Key":"the latest","Fragments":["released","version,","tests","version"]},{"Key":"latest released","Fragments":["version."]},{"Key":" tracks,","Fragments":["t"]},{"Key":"tracks, t","Fragments":["List"]},{"Key":"t List","Fragments":["the"]},{"Key":"List the","Fragments":["available"]},{"Key":"the available","Fragments":["language","boost"]},{"Key":"available language","Fragments":["tracks"]},{"Key":" open,","Fragments":["op"]},{"Key":"open, op","Fragments":["Opens"]},{"Key":"op Opens","Fragments":["the"]},{"Key":"Opens the","Fragments":["current"]},{"Key":"current submission","Fragments":["of"]},{"Key":" download,","Fragments":["dl"]},{"Key":"download, dl","Fragments":["Downloads"]},{"Key":"dl Downloads","Fragments":["and"]},{"Key":"Downloads and","Fragments":["saves"]},{"Key":"saves a","Fragments":["specified"]},{"Key":"a specified","Fragments":["submission"]},{"Key":"specified submission","Fragments":["into"]},{"Key":"submission into","Fragments":["the"]},{"Key":" list,","Fragments":["li"]},{"Key":"list, li","Fragments":["Lists"]},{"Key":"li Lists","Fragments":["all"]},{"Key":"Lists all","Fragments":["available"]},{"Key":"all available","Fragments":["assignments"]},{"Key":"available assignments","Fragments":["for"]},{"Key":"assignments for","Fragments":["a","a"]},{"Key":" help,","Fragments":["h"]},{"Key":"help, h","Fragments":["Shows"]},{"Key":"h Shows","Fragments":["a"]},{"Key":"Shows a","Fragments":["list"]},{"Key":"of commands","Fragments":["or"]},{"Key":"commands or","Fragments":["help"]},{"Key":"or help","Fragments":["for"]},{"Key":" GLOBAL","Fragments":["OPTIONS:"]},{"Key":" --config,","Fragments":["-c"]},{"Key":"--config, -c","Fragments":["path"]},{"Key":"-c path","Fragments":["to"]},{"Key":"path to","Fragments":["config","your","recovery),","experiment"]},{"Key":"to config","Fragments":["file"]},{"Key":"config file","Fragments":["[$XDG_CONFIG_HOME,EXERCISM_CONFIG_FILE]"]},{"Key":" --verbose,","Fragments":["-v"]},{"Key":"--verbose, -v","Fragments":["turn"]},{"Key":"-v turn","Fragments":["on"]},{"Key":"turn on","Fragments":["verbose"]},{"Key":"on verbose","Fragments":["logging"]},{"Key":" --version","Fragments":["print"]},{"Key":"--version print","Fragments":["the"]},{"Key":"print the","Fragments":["version"]},{"Key":" --help,","Fragments":["-h"]},{"Key":"--help, -h","Fragments":["show"]},{"Key":"-h show","Fragments":["help"]},{"Key":"it short,","Fragments":["good"]},{"Key":"short, good","Fragments":["that"]},{"Key":"a tokenizer","Fragments":["already","like"]},{"Key":"tokenizer already","Fragments":["available."]},{"Key":"First iteration.","Fragments":["Just"]},{"Key":"Just did","Fragments":["the","a"]},{"Key":"fastest way","Fragments":["I"]},{"Key":"thought now.","Fragments":["I'm"]},{"Key":"now. I'm","Fragments":["going"]},{"Key":"loop later","Fragments":["in"]},{"Key":"later in","Fragments":["order"]},{"Key":"the temp","Fragments":["objects"]},{"Key":"temp objects","Fragments":["in:"]},{"Key":"\u003e song","Fragments":["+="]},{"Key":"song +=","Fragments":["verse(i)"]},{"Key":"+= verse(i)","Fragments":["+"]},{"Key":"verse(i) +","Fragments":["\"\\n\";"]},{"Key":"of `switch`","Fragments":["fall-through!","because"]},{"Key":"i've followed","Fragments":["the"]},{"Key":"followed the","Fragments":["tips","test","suggestion"]},{"Key":"the tips","Fragments":["given"]},{"Key":"tips given","Fragments":["by"]},{"Key":"given by","Fragments":["@nathanial"]},{"Key":"by @nathanial","Fragments":["in"]},{"Key":"@nathanial in","Fragments":["the"]},{"Key":" Ok,","Fragments":["I"]},{"Key":"Ok, I","Fragments":["searched"]},{"Key":"I searched","Fragments":["a"]},{"Key":"searched a","Fragments":["little"]},{"Key":"little to","Fragments":["see","no"]},{"Key":"a translation","Fragments":["unit","unit"]},{"Key":"static function","Fragments":["(only","within","declared","inside","of","at"]},{"Key":"function (only","Fragments":["visible"]},{"Key":"(only visible","Fragments":["in"]},{"Key":"translation unit)","Fragments":["and"]},{"Key":"unit) and","Fragments":["an"]},{"Key":"namespace (where","Fragments":["the"]},{"Key":"(where the","Fragments":["content","cost"]},{"Key":"content is","Fragments":["only"]},{"Key":"only visible","Fragments":["within","inside","within"]},{"Key":"visible within","Fragments":["the","it's"]},{"Key":"the file)","Fragments":["?"]},{"Key":"At first","Fragments":["sigh,","I","I","I"]},{"Key":"first sigh,","Fragments":["it"]},{"Key":"sigh, it","Fragments":["seems"]},{"Key":"job (and","Fragments":["if"]},{"Key":"if so,","Fragments":["declaring"]},{"Key":"so, declaring","Fragments":["a"]},{"Key":"function within","Fragments":["an","an"]},{"Key":"about isalpha.","Fragments":["If"]},{"Key":"isalpha. If","Fragments":["a"]},{"Key":"standard function","Fragments":["exists,","with"]},{"Key":"function exists,","Fragments":["that"]},{"Key":"exists, that","Fragments":["will"]},{"Key":"be always","Fragments":["preferable","opposite"]},{"Key":"always preferable","Fragments":["to"]},{"Key":"to own","Fragments":["implementation,"]},{"Key":"own implementation,","Fragments":["except"]},{"Key":"implementation, except","Fragments":["when"]},{"Key":"except when","Fragments":["I","the"]},{"Key":"good excuse","Fragments":["to"]},{"Key":"excuse to","Fragments":["write"]},{"Key":"one this","Fragments":["time"]},{"Key":"this time","Fragments":["so","using"]},{"Key":"will switch","Fragments":["to"]},{"Key":"to isalpha","Fragments":["in"]},{"Key":"isalpha in","Fragments":["next"]},{"Key":"in next","Fragments":["revision.","submit.","submit.","iteration"]},{"Key":"Nice clean","Fragments":["and"]},{"Key":"readable answer","Fragments":["using"]},{"Key":"answer using","Fragments":["just"]},{"Key":"using just","Fragments":["regex.","one","so"]},{"Key":"reason you're","Fragments":["returning"]},{"Key":"you're returning","Fragments":["char*","a"]},{"Key":"returning char*","Fragments":["instead"]},{"Key":"char* instead","Fragments":["of"]},{"Key":"few solutions","Fragments":["using"]},{"Key":"solutions using","Fragments":["a","algorithms"]},{"Key":"comparison to","Fragments":["an","determine"]},{"Key":"an uppercased","Fragments":["string."]},{"Key":"uppercased string.","Fragments":["It's"]},{"Key":"It's an","Fragments":["interesting","overkill"]},{"Key":"interesting approach","Fragments":["I"]},{"Key":"approach I","Fragments":["hadn't","would"]},{"Key":" store","Fragments":["the"]},{"Key":"count map","Fragments":["to"]},{"Key":"reduce number","Fragments":["of"]},{"Key":"of computations","Fragments":["and"]},{"Key":"computations and","Fragments":["reduce"]},{"Key":"and reduce","Fragments":["memory"]},{"Key":"reduce memory","Fragments":["pressure."]},{"Key":"memory pressure.","Fragments":["once"]},{"Key":"pressure. once","Fragments":["the"]},{"Key":"once the","Fragments":["map","predicate"]},{"Key":"is created,","Fragments":["you"]},{"Key":"created, you","Fragments":["can"]},{"Key":"can throw","Fragments":["the"]},{"Key":"throw the","Fragments":["invalid","invalid_argument."]},{"Key":"the invalid","Fragments":["argument"]},{"Key":"invalid argument","Fragments":["if"]},{"Key":"if access","Fragments":["into"]},{"Key":"access into","Fragments":["the"]},{"Key":"map fails","Fragments":["via"]},{"Key":"fails via","Fragments":["the"]},{"Key":"via the","Fragments":["map"]},{"Key":"map *at*","Fragments":["function."]},{"Key":"the hints","Fragments":["regarding"]},{"Key":"hints regarding","Fragments":["multiple"]},{"Key":"regarding multiple","Fragments":[".cpp/.h"]},{"Key":"multiple .cpp/.h","Fragments":["files."]},{"Key":"Regarding static","Fragments":["members;"]},{"Key":"static members;","Fragments":["I"]},{"Key":"members; I","Fragments":["think"]},{"Key":"boost uses","Fragments":["for"]},{"Key":"uses for","Fragments":["some"]},{"Key":"some object","Fragments":["of"]},{"Key":"that class.","Fragments":["So,"]},{"Key":"class. So,","Fragments":["I","you"]},{"Key":"use static","Fragments":["members"]},{"Key":" `trim()`","Fragments":["is"]},{"Key":"an indirect","Fragments":["solution.","way"]},{"Key":"indirect solution.","Fragments":["A"]},{"Key":"solution. A","Fragments":["more"]},{"Key":"A more","Fragments":["direct"]},{"Key":"more direct","Fragments":["approach"]},{"Key":"direct approach","Fragments":["would"]},{"Key":"test the","Fragments":["string"]},{"Key":"using `isblank()`","Fragments":["or"]},{"Key":"`isblank()` or","Fragments":["`isspace()`"]},{"Key":"or `isspace()`","Fragments":["(probably"]},{"Key":"`isspace()` (probably","Fragments":["the"]},{"Key":"Very readable","Fragments":["and"]},{"Key":"and straightforward","Fragments":["implementation.","solution."]},{"Key":"few small","Fragments":["things:"]},{"Key":"- `#include","Fragments":["\u003cciso646\u003e`"]},{"Key":"`#include \u003cciso646\u003e`","Fragments":["is"]},{"Key":"\u003cciso646\u003e` is","Fragments":["unnecessary"]},{"Key":"unnecessary because","Fragments":["in"]},{"Key":"C++, those","Fragments":["words"]},{"Key":"those words","Fragments":["(specifically","that"]},{"Key":"words (specifically","Fragments":["`and`)"]},{"Key":"(specifically `and`)","Fragments":["are"]},{"Key":"`and`) are","Fragments":["already"]},{"Key":"already reserved","Fragments":["to"]},{"Key":"reserved to","Fragments":["carry"]},{"Key":"to carry","Fragments":["the"]},{"Key":"carry the","Fragments":["meaning"]},{"Key":"the meaning","Fragments":["you"]},{"Key":"meaning you","Fragments":["want","compare"]},{"Key":"want them","Fragments":["to"]},{"Key":"- `what.back()`","Fragments":["on"]},{"Key":"`what.back()` on","Fragments":["line"]},{"Key":"14 has","Fragments":["undefined"]},{"Key":"has undefined","Fragments":["behavior","behavior"]},{"Key":"if `what`","Fragments":["is"]},{"Key":"`what` is","Fragments":["an"]},{"Key":"so as","Fragments":["good","said,","to","to"]},{"Key":"as good","Fragments":["practice,","as","as"]},{"Key":"good practice,","Fragments":["you"]},{"Key":"practice, you","Fragments":["should"]},{"Key":"ensure `what`","Fragments":["isn't"]},{"Key":"`what` isn't","Fragments":["empty,"]},{"Key":"isn't empty,","Fragments":["especially"]},{"Key":"empty, especially","Fragments":["since..."]},{"Key":"- your","Fragments":["`is_*`"]},{"Key":"your `is_*`","Fragments":["functions"]},{"Key":"`is_*` functions","Fragments":["are"]},{"Key":"are accessible","Fragments":["to","as"]},{"Key":"accessible to","Fragments":["external","the"]},{"Key":"to external","Fragments":["programs"]},{"Key":"external programs","Fragments":["that"]},{"Key":"programs that","Fragments":["use"]},{"Key":"that use","Fragments":["this","the"]},{"Key":"use this","Fragments":["header.","set","short","to","code","handrolled","string"]},{"Key":"header. The","Fragments":["only"]},{"Key":"only function","Fragments":["that","that"]},{"Key":"be visible","Fragments":["to"]},{"Key":"is `bob::hey`,","Fragments":["so"]},{"Key":"`bob::hey`, so","Fragments":["those"]},{"Key":"so those","Fragments":["other"]},{"Key":"those other","Fragments":["functions"]},{"Key":"be put","Fragments":["into"]},{"Key":"put into","Fragments":["an","the","the"]},{"Key":"of STL,","Fragments":["maybe","though."]},{"Key":"STL, maybe","Fragments":["look"]},{"Key":"maybe look","Fragments":["at"]},{"Key":"at using","Fragments":["`\u003calgorithm\u003e`'s","exercism,"]},{"Key":"using `\u003calgorithm\u003e`'s","Fragments":["`any_of()`"]},{"Key":"`\u003calgorithm\u003e`'s `any_of()`","Fragments":["instead"]},{"Key":"`any_of()` instead","Fragments":["of"]},{"Key":"that `for`","Fragments":["loop"]},{"Key":"in `shouting()`.","Fragments":["Sidenote:"]},{"Key":"`shouting()`. Sidenote:","Fragments":["you"]},{"Key":"Sidenote: you","Fragments":["should"]},{"Key":"be referencing","Fragments":["`ctype.h`"]},{"Key":"referencing `ctype.h`","Fragments":["in"]},{"Key":"`ctype.h` in","Fragments":["the"]},{"Key":"C++ way,","Fragments":["that"]},{"Key":"way, that","Fragments":["is:"]},{"Key":"that is:","Fragments":["`#include"]},{"Key":"is: `#include","Fragments":["\u003ccctype\u003e`"]},{"Key":"the tip","Fragments":["in","about","@moriah-au!"]},{"Key":"tip in","Fragments":["the"]},{"Key":"first bullet","Fragments":["point,"]},{"Key":"bullet point,","Fragments":["didn't"]},{"Key":"point, didn't","Fragments":["know"]},{"Key":"that. About","Fragments":["point"]},{"Key":"About point","Fragments":["number"]},{"Key":"point number","Fragments":["three:"]},{"Key":"number three:","Fragments":["I'm"]},{"Key":"three: I'm","Fragments":["new"]},{"Key":"to namespaces","Fragments":["so","instead"]},{"Key":"to this.","Fragments":["However"]},{"Key":"this. However","Fragments":["once"]},{"Key":"However once","Fragments":["that"]},{"Key":"once that","Fragments":["has"]},{"Key":"been done,","Fragments":["an"]},{"Key":"done, an","Fragments":["empty"]},{"Key":"be caught","Fragments":["by"]},{"Key":"caught by","Fragments":["`is_silence`"]},{"Key":"by `is_silence`","Fragments":["before"]},{"Key":"`is_silence` before","Fragments":["it"]},{"Key":"it reaches","Fragments":["`is_question`."]},{"Key":"reaches `is_question`.","Fragments":["But"]},{"Key":"`is_question`. But","Fragments":["in"]},{"Key":"general I","Fragments":["agree","belong"]},{"Key":"avoid undefined","Fragments":["behavior.","behavior"]},{"Key":" Following","Fragments":["@agustina's","atifhans's"]},{"Key":"Following @agustina's","Fragments":["advice."]},{"Key":" Those","Fragments":["look"]},{"Key":"Those look","Fragments":["like"]},{"Key":"and destructor.","Fragments":["If","You"]},{"Key":"destructor. If","Fragments":["so"]},{"Key":"can omit","Fragments":["them,"]},{"Key":"omit them,","Fragments":["or"]},{"Key":"them, or","Fragments":["if"]},{"Key":"be clear","Fragments":["that's","at"]},{"Key":"clear that's","Fragments":["what's"]},{"Key":"what's being","Fragments":["used"]},{"Key":"used simply","Fragments":["declare"]},{"Key":"simply declare","Fragments":["them"]},{"Key":"declare them","Fragments":["in","`constexpr`"]},{"Key":" bob()","Fragments":["="]},{"Key":"bob() =","Fragments":["default;"]},{"Key":" ~bob()","Fragments":["="]},{"Key":"~bob() =","Fragments":["default;"]},{"Key":"The value","Fragments":["assigned"]},{"Key":"value assigned","Fragments":["to"]},{"Key":"assigned to","Fragments":["contains_any_alpha"]},{"Key":"to contains_any_alpha","Fragments":["would"]},{"Key":"contains_any_alpha would","Fragments":["be"]},{"Key":"slightly simpler","Fragments":["using"]},{"Key":"simpler using","Fragments":["std::any_of"]},{"Key":"using std::any_of","Fragments":["which"]},{"Key":"std::any_of which","Fragments":["you're"]},{"Key":"which you're","Fragments":["already"]},{"Key":"few lines","Fragments":["below","above.","of","of","of"]},{"Key":"lines below","Fragments":["so"]},{"Key":"below so","Fragments":["it"]},{"Key":"be adding","Fragments":["any"]},{"Key":"adding any","Fragments":["burden"]},{"Key":"any burden","Fragments":["on"]},{"Key":"burden on","Fragments":["the"]},{"Key":"reader to","Fragments":["assume"]},{"Key":"they know","Fragments":["it.","the","it"]},{"Key":"name last_non_white","Fragments":["is"]},{"Key":"last_non_white is","Fragments":["misleading."]},{"Key":"is misleading.","Fragments":["It's"]},{"Key":"misleading. It's","Fragments":["the"]},{"Key":"last thing","Fragments":["which","you","is"]},{"Key":"thing which","Fragments":["is"]},{"Key":"simple space","Fragments":["character."]},{"Key":"space character.","Fragments":["It"]},{"Key":"character. It","Fragments":["could"]},{"Key":"could point","Fragments":["to"]},{"Key":"to \\t","Fragments":["\\n"]},{"Key":"\\t \\n","Fragments":["\\r"]},{"Key":"\\n \\r","Fragments":["\\v"]},{"Key":"\\r \\v","Fragments":["all"]},{"Key":"\\v all","Fragments":["of"]},{"Key":"are whitespace...","Fragments":["and"]},{"Key":"whitespace... and","Fragments":["that's"]},{"Key":"that's without","Fragments":["considering"]},{"Key":"without considering","Fragments":["things"]},{"Key":"considering things","Fragments":["like"]},{"Key":"like non-breaking","Fragments":["space"]},{"Key":"non-breaking space","Fragments":["(most"]},{"Key":"space (most","Fragments":["of"]},{"Key":"(most of","Fragments":["us"]},{"Key":"us aren't","Fragments":["supporting"]},{"Key":"aren't supporting","Fragments":["non-Latin-1"]},{"Key":"supporting non-Latin-1","Fragments":["characters"]},{"Key":"non-Latin-1 characters","Fragments":["so"]},{"Key":"characters so","Fragments":["I"]},{"Key":"wouldn't expect","Fragments":["you"]},{"Key":"expect you","Fragments":["to"]},{"Key":"are mostly","Fragments":["the"]},{"Key":"mostly the","Fragments":["same"]},{"Key":"thing, although","Fragments":["with"]},{"Key":"although with","Fragments":["small"]},{"Key":"with small","Fragments":["differences."]},{"Key":"small differences.","Fragments":["You"]},{"Key":"differences. You","Fragments":["can"]},{"Key":"a submition","Fragments":["that"]},{"Key":"submition that","Fragments":["make"]},{"Key":"namespace since","Fragments":["it"]},{"Key":"no value","Fragments":["anymore."]},{"Key":" Iteration","Fragments":["1:","2:"]},{"Key":"always liked","Fragments":["programming"]},{"Key":"liked programming","Fragments":["puzzles"]},{"Key":"programming puzzles","Fragments":["kind"]},{"Key":"puzzles kind","Fragments":["of"]},{"Key":"things and","Fragments":["since","involves","have"]},{"Key":"I'm currently","Fragments":["teaching"]},{"Key":"currently teaching","Fragments":["myself"]},{"Key":"teaching myself","Fragments":["some"]},{"Key":"myself some","Fragments":["C++"]},{"Key":"some C++","Fragments":["anyway","library"]},{"Key":"C++ anyway","Fragments":["and"]},{"Key":"anyway and","Fragments":["by","will"]},{"Key":"and by","Fragments":["chance","short-circuiting","the","using","value."]},{"Key":"by chance","Fragments":["discovered"]},{"Key":"chance discovered","Fragments":["exercism"]},{"Key":"discovered exercism","Fragments":["I"]},{"Key":"exercism I","Fragments":["thought","just"]},{"Key":"thought I","Fragments":["might","was"]},{"Key":"might give","Fragments":["it","you","you"]},{"Key":"a try","Fragments":[":-)","on"]},{"Key":"the basics,","Fragments":["because"]},{"Key":"basics, because","Fragments":["so"]},{"Key":"because so","Fragments":["far"]},{"Key":"so far","Fragments":["I've","are"]},{"Key":"far I've","Fragments":["hardly"]},{"Key":"I've hardly","Fragments":["done"]},{"Key":"hardly done","Fragments":["any"]},{"Key":"any C++,","Fragments":["let"]},{"Key":"C++, let","Fragments":["alone"]},{"Key":"let alone","Fragments":["OOP"]},{"Key":"alone OOP","Fragments":["in"]},{"Key":"OOP in","Fragments":["C++"]},{"Key":"C++ or","Fragments":["using","is"]},{"Key":"or using","Fragments":["the","unnecessary","more","more"]},{"Key":"boost libraries","Fragments":["or","but","though,"]},{"Key":"libraries or","Fragments":["anything.","a"]},{"Key":"or anything.","Fragments":["And"]},{"Key":"anything. And","Fragments":["then"]},{"Key":"beginning I","Fragments":["almost"]},{"Key":"almost began","Fragments":["over-engineering"]},{"Key":"began over-engineering","Fragments":["this"]},{"Key":"over-engineering this","Fragments":["before"]},{"Key":"this before","Fragments":["I"]},{"Key":"I came","Fragments":["to","up","up"]},{"Key":"came to","Fragments":["this","mind:","mind.","the"]},{"Key":"think however,","Fragments":["there's"]},{"Key":"however, there's","Fragments":["a"]},{"Key":"case missing","Fragments":["where"]},{"Key":"missing where","Fragments":["you"]},{"Key":"you yell","Fragments":["a"]},{"Key":"yell a","Fragments":["number"]},{"Key":"number at","Fragments":["Bob"]},{"Key":"at Bob","Fragments":["in"]},{"Key":"Bob in","Fragments":["a"]},{"Key":"way where","Fragments":["you"]},{"Key":"number (or","Fragments":["\"symbols\")"]},{"Key":"(or \"symbols\")","Fragments":["and"]},{"Key":"\"symbols\") and","Fragments":["the"]},{"Key":"the yell","Fragments":["is"]},{"Key":"yell is","Fragments":["defined"]},{"Key":"an exclamation","Fragments":["mark.","point.","point;","mark","mark","mark"]},{"Key":"exclamation mark.","Fragments":["Something"]},{"Key":"mark. Something","Fragments":["like"]},{"Key":"like \"4!\".","Fragments":["My"]},{"Key":"\"4!\". My","Fragments":["code"]},{"Key":"My code","Fragments":["wouldn't","doesn't"]},{"Key":"code wouldn't","Fragments":["pass"]},{"Key":"wouldn't pass","Fragments":["that"]},{"Key":"pass that","Fragments":["test."]},{"Key":" Frankly,","Fragments":["looking"]},{"Key":"Frankly, looking","Fragments":["at"]},{"Key":"it now,","Fragments":["after","it"]},{"Key":"now, after","Fragments":["a"]},{"Key":"a day,","Fragments":["I"]},{"Key":"day, I","Fragments":["doubt"]},{"Key":"doubt that","Fragments":["my"]},{"Key":"my yell-detection","Fragments":["regex"]},{"Key":"yell-detection regex","Fragments":["is"]},{"Key":"is right,","Fragments":["despite"]},{"Key":"right, despite","Fragments":["passing"]},{"Key":"despite passing","Fragments":["all"]},{"Key":"And indeed","Fragments":["it","the"]},{"Key":"indeed it","Fragments":["doesn't."]},{"Key":"it doesn't.","Fragments":["Shouting"]},{"Key":"doesn't. Shouting","Fragments":["just"]},{"Key":"Shouting just","Fragments":["a"]},{"Key":"single word","Fragments":["without"]},{"Key":"word without","Fragments":["any"]},{"Key":"any following","Fragments":["punctuation"]},{"Key":"following punctuation","Fragments":["also"]},{"Key":"punctuation also","Fragments":["fails."]},{"Key":"So I'll","Fragments":["soon"]},{"Key":"I'll soon","Fragments":["upload"]},{"Key":"soon upload","Fragments":["a"]},{"Key":"upload a","Fragments":["second","new","new"]},{"Key":"second iteration","Fragments":["with","and","I"]},{"Key":"with 3","Fragments":["tests"]},{"Key":"3 tests","Fragments":["added"]},{"Key":"tests added","Fragments":["(also"]},{"Key":"added (also","Fragments":["in"]},{"Key":"(also in","Fragments":["the"]},{"Key":"code comment","Fragments":["for"]},{"Key":"So here","Fragments":["it"]},{"Key":"here it","Fragments":["is.","is:"]},{"Key":"is. With","Fragments":["3"]},{"Key":"With 3","Fragments":["new"]},{"Key":"3 new","Fragments":["test"]},{"Key":"new test","Fragments":["cases","when"]},{"Key":"now passed","Fragments":["as","by"]},{"Key":"passed as","Fragments":["well.","a","a"]},{"Key":"well. (And","Fragments":["some"]},{"Key":"(And some","Fragments":["minor"]},{"Key":"minor cosmetic","Fragments":["clean-up)."]},{"Key":"PS: I'll","Fragments":["do"]},{"Key":"do another","Fragments":["iteration"]},{"Key":"not RTFM","Fragments":["of"]},{"Key":"RTFM of","Fragments":["exercism"]},{"Key":"of exercism","Fragments":[":)",":)"]},{"Key":" Words1:","Fragments":["311017"]},{"Key":" Words2:","Fragments":["464026"]},{"Key":" Words3:","Fragments":["302017"]},{"Key":" Words4:","Fragments":["366020"]},{"Key":" `resize`","Fragments":["is"]},{"Key":"`resize` is","Fragments":["required"]},{"Key":"to value-initialize","Fragments":["the"]},{"Key":"value-initialize the","Fragments":["added"]},{"Key":"the added","Fragments":["characters"]},{"Key":"added characters","Fragments":["which"]},{"Key":"which translates","Fragments":["into"]},{"Key":"translates into","Fragments":["a"]},{"Key":"a `memset`","Fragments":["for"]},{"Key":"`memset` for","Fragments":["the"]},{"Key":"optimized build.","Fragments":["And"]},{"Key":"build. And","Fragments":["there"]},{"Key":"And there","Fragments":["still"]},{"Key":"there still","Fragments":["are"]},{"Key":"still are","Fragments":["n"]},{"Key":"n assignments","Fragments":["for"]},{"Key":"string of","Fragments":["length","punctuation","the"]},{"Key":"of length","Fragments":["n"]},{"Key":"length n","Fragments":["since"]},{"Key":"n since","Fragments":["`transform`"]},{"Key":"since `transform`","Fragments":["is"]},{"Key":"change every","Fragments":["char."]},{"Key":"every char.","Fragments":["That's"]},{"Key":"char. That's","Fragments":["probably"]},{"Key":"That's probably","Fragments":["where","the"]},{"Key":"probably where","Fragments":["the"]},{"Key":"extra time","Fragments":["is"]},{"Key":"time is","Fragments":["spent.","a"]},{"Key":"Now, I","Fragments":["hope,","think"]},{"Key":"I hope,","Fragments":["I"]},{"Key":"hope, I","Fragments":["also"]},{"Key":"also passes","Fragments":["the"]},{"Key":"rules of","Fragments":["exercism","C++"]},{"Key":"s etl.cpp","Fragments":["etl.h`"]},{"Key":"etl.cpp etl.h`","Fragments":["as"]},{"Key":"etl.h` as","Fragments":["far"]},{"Key":"can tell,","Fragments":["the"]},{"Key":"tell, the","Fragments":["order"]},{"Key":"order goes","Fragments":["from"]},{"Key":"goes from","Fragments":["top"]},{"Key":"from top","Fragments":["to"]},{"Key":"The sequence","Fragments":["is"]},{"Key":"be. it","Fragments":["is"]},{"Key":"of construction","Fragments":["and","of"]},{"Key":"implemented suggestions","Fragments":["from"]},{"Key":"suggestions from","Fragments":["iteration","the","@berneice"]},{"Key":" Nothing","Fragments":["dramatically","in"]},{"Key":"Nothing dramatically","Fragments":["changed"]},{"Key":"dramatically changed","Fragments":["on"]},{"Key":"changed on","Fragments":["this"]},{"Key":"this iteration,","Fragments":["the","simply","`isNumber`","fixed","polished"]},{"Key":"iteration, the","Fragments":["structure","exercism"]},{"Key":"structure of","Fragments":["program","the"]},{"Key":" -I","Fragments":["ditched"]},{"Key":"-I ditched","Fragments":["the"]},{"Key":"ditched the","Fragments":["usage"]},{"Key":"of return","Fragments":["variables","variable,"]},{"Key":" -In","Fragments":["the"]},{"Key":"-In the","Fragments":["first"]},{"Key":"iteration, function","Fragments":["checkIfUpperCase"]},{"Key":"function checkIfUpperCase","Fragments":["counted"]},{"Key":"checkIfUpperCase counted","Fragments":["the"]},{"Key":"counted the","Fragments":["number"]},{"Key":"letters found.","Fragments":["I"]},{"Key":"found. I","Fragments":["replaced"]},{"Key":"counter with","Fragments":["a"]},{"Key":"a boolean","Fragments":["because","or","and","and"]},{"Key":"boolean because","Fragments":["the"]},{"Key":"exact amount","Fragments":["of"]},{"Key":"not important,","Fragments":["we"]},{"Key":"important, we","Fragments":["need"]},{"Key":"need only","Fragments":["to"]},{"Key":"any or","Fragments":["none"]},{"Key":"or none","Fragments":["letters"]},{"Key":"none letters","Fragments":["in"]},{"Key":"letters in","Fragments":["the","the","the","the","the"]},{"Key":" @vaughn","Fragments":["Ah,"]},{"Key":"@vaughn Ah,","Fragments":["thanks!"]},{"Key":"thanks! I","Fragments":["don't"]},{"Key":"your strings","Fragments":["in","as"]},{"Key":"nice readable","Fragments":["way."]},{"Key":"readable way.","Fragments":["I"]},{"Key":"way. I","Fragments":["like","haven't","figured"]},{"Key":"you reference","Fragments":["which"]},{"Key":"reference which","Fragments":["STL"]},{"Key":"which STL","Fragments":["functions"]},{"Key":"STL functions","Fragments":["you're"]},{"Key":"using in","Fragments":["your","conjunction"]},{"Key":"your include","Fragments":["statements."]},{"Key":"some STL","Fragments":["string"]},{"Key":"STL string","Fragments":["functions"]},{"Key":"like std::isalpha()","Fragments":["and"]},{"Key":"std::isalpha() and","Fragments":["similar"]},{"Key":"and similar","Fragments":["character"]},{"Key":"similar character","Fragments":["handling"]},{"Key":"character handling","Fragments":["functions"]},{"Key":"handling functions","Fragments":["in"]},{"Key":"in \u003ccctype\u003e","Fragments":["(http://en.cppreference.com/w/cpp/string/byte/isalpha)"]},{"Key":"\u003ccctype\u003e (http://en.cppreference.com/w/cpp/string/byte/isalpha)","Fragments":["so"]},{"Key":"(http://en.cppreference.com/w/cpp/string/byte/isalpha) so","Fragments":["you"]},{"Key":"build either","Fragments":["your"]},{"Key":"your massive","Fragments":["reference"]},{"Key":"massive reference","Fragments":["strings/vectors"]},{"Key":"reference strings/vectors","Fragments":["(like"]},{"Key":"strings/vectors (like","Fragments":["string"]},{"Key":"(like string","Fragments":["const"]},{"Key":"string const","Fragments":["ALPHA)","\u0026.","\u0026."]},{"Key":"const ALPHA)","Fragments":["or"]},{"Key":"ALPHA) or","Fragments":["your"]},{"Key":"your handspun","Fragments":["predicate"]},{"Key":"handspun predicate","Fragments":["functions"]},{"Key":"predicate functions","Fragments":["isCaps()"]},{"Key":"functions isCaps()","Fragments":["and"]},{"Key":"isCaps() and","Fragments":["isAlpha()."]},{"Key":"totally agree","Fragments":["with","with","that"]},{"Key":"the `std::tolower`","Fragments":["part"]},{"Key":"`std::tolower` part","Fragments":["and"]},{"Key":"part and","Fragments":["can't"]},{"Key":"and can't","Fragments":["see"]},{"Key":"it sooner.","Fragments":["This"]},{"Key":"sooner. This","Fragments":["will"]},{"Key":"also speed","Fragments":["up"]},{"Key":"a loop","Fragments":["will","through","of","to","(optimizations!).","index"]},{"Key":"About the","Fragments":["includes,","spaces","only","only"]},{"Key":"the includes,","Fragments":["I"]},{"Key":"includes, I","Fragments":["always"]},{"Key":"always put","Fragments":["them"]},{"Key":"see it,","Fragments":["I","it","you're"]},{"Key":"will simply","Fragments":["remove","perform"]},{"Key":"simply remove","Fragments":["the"]},{"Key":"of header","Fragments":["files"]},{"Key":"code. (And","Fragments":["I"]},{"Key":"(And I","Fragments":["think"]},{"Key":"think `\u003ccctype\u003e`","Fragments":["is"]},{"Key":"`\u003ccctype\u003e` is","Fragments":["included"]},{"Key":"included with","Fragments":["`\u003cstring\u003e`)"]},{"Key":"Regarding the","Fragments":["`for`","argument"]},{"Key":"`for` loops,","Fragments":["theses"]},{"Key":"loops, theses","Fragments":["were"]},{"Key":"theses were","Fragments":["originally"]},{"Key":"were originally","Fragments":["both"]},{"Key":"originally both","Fragments":["`while`"]},{"Key":"both `while`","Fragments":["loops"]},{"Key":"`while` loops","Fragments":["until"]},{"Key":"loops until","Fragments":["I"]},{"Key":"saw that","Fragments":["both","`boost::for_each`"]},{"Key":"that both","Fragments":["had","of"]},{"Key":"both had","Fragments":["an"]},{"Key":"an initialization","Fragments":["before","list.","list."]},{"Key":"initialization before","Fragments":["the"]},{"Key":"a recurrent","Fragments":["incrementation."]},{"Key":"Used case","Fragments":["insensitive"]},{"Key":"compare functions","Fragments":["here."]},{"Key":"one complicated","Fragments":["code."]},{"Key":"complicated code.","Fragments":["Many"]},{"Key":"code. Many","Fragments":["things"]},{"Key":"Many things","Fragments":["you're"]},{"Key":"doing via","Fragments":["regex"]},{"Key":"via regex","Fragments":["are"]},{"Key":"are simply","Fragments":["functions","too"]},{"Key":"simply functions","Fragments":["available"]},{"Key":"functions available","Fragments":["in","to"]},{"Key":"in cctype","Fragments":["header."]},{"Key":" Object","Fragments":["oriented"]},{"Key":"Object oriented","Fragments":["and"]},{"Key":"oriented and","Fragments":["functional,"]},{"Key":"and functional,","Fragments":["what"]},{"Key":"functional, what","Fragments":["could"]},{"Key":"what could","Fragments":["be"]},{"Key":"Anyway, since","Fragments":["the"]},{"Key":"function mapping","Fragments":["capabilities"]},{"Key":"mapping capabilities","Fragments":["of"]},{"Key":"capabilities of","Fragments":["C++"]},{"Key":"are limited,","Fragments":["I"]},{"Key":"limited, I","Fragments":["am"]},{"Key":"the 'equal'","Fragments":["algorithm"]},{"Key":"'equal' algorithm","Fragments":["with"]},{"Key":"algorithm with","Fragments":["a"]},{"Key":"a twist:","Fragments":["a"]},{"Key":"twist: a","Fragments":["lambda"]},{"Key":"predicate that","Fragments":["pretends"]},{"Key":"that pretends","Fragments":["that"]},{"Key":"pretends that","Fragments":["all"]},{"Key":"same characters.","Fragments":["Beware:","Whether"]},{"Key":"characters. Beware:","Fragments":["lambda"]},{"Key":"Beware: lambda","Fragments":["function"]},{"Key":"does its","Fragments":["job"]},{"Key":"its job","Fragments":["by"]},{"Key":"job by","Fragments":["'capturing'"]},{"Key":"by 'capturing'","Fragments":["Hamming's"]},{"Key":"'capturing' Hamming's","Fragments":["distance."]},{"Key":"Hamming's distance.","Fragments":[":-)"]},{"Key":"fact, I","Fragments":["won't"]},{"Key":"I won't","Fragments":["remove","forget"]},{"Key":"won't remove","Fragments":["the"]},{"Key":"file. I","Fragments":["will","would"]},{"Key":"will then","Fragments":["just"]},{"Key":"the `if`s","Fragments":["you"]},{"Key":"`if`s you","Fragments":["could"]},{"Key":"stl methods","Fragments":["like"]},{"Key":"methods like","Fragments":["`std::islower`"]},{"Key":"like `std::islower`","Fragments":["or"]},{"Key":"`std::islower` or","Fragments":["`std::isblank`"]},{"Key":"or `std::isblank`","Fragments":["and"]},{"Key":"`std::isblank` and","Fragments":["so"]},{"Key":"on. That","Fragments":["could"]},{"Key":"these methods","Fragments":["uses"]},{"Key":"methods uses","Fragments":["the"]},{"Key":"- Removing","Fragments":["the"]},{"Key":"Removing the","Fragments":["C","spaces"]},{"Key":"C includes","Fragments":["would"]},{"Key":"includes would","Fragments":["be"]},{"Key":"- Allowing","Fragments":["changes"]},{"Key":"Allowing changes","Fragments":["of"]},{"Key":"changes of","Fragments":["your"]},{"Key":"your `bool`","Fragments":["variables"]},{"Key":"`bool` variables","Fragments":["with"]},{"Key":"variables with","Fragments":["`[\u0026]`","an","names"]},{"Key":"with `[\u0026]`","Fragments":["is"]},{"Key":"`[\u0026]` is","Fragments":["clever"]},{"Key":"is clever","Fragments":["but"]},{"Key":"dangerous in","Fragments":["some"]},{"Key":"some cases","Fragments":["so","by","than"]},{"Key":"cases so","Fragments":["be","that"]},{"Key":"so be","Fragments":["carfeul"]},{"Key":"be carfeul","Fragments":[";-)"]},{"Key":"way these","Fragments":["are"]},{"Key":"are set","Fragments":["up,"]},{"Key":"up, I","Fragments":["found"]},{"Key":"keep everything","Fragments":["in"]},{"Key":"file since","Fragments":["it"]},{"Key":"library. My","Fragments":["`[exercise].cpp`"]},{"Key":"My `[exercise].cpp`","Fragments":["file"]},{"Key":"`[exercise].cpp` file","Fragments":["is"]},{"Key":"empty and","Fragments":["never"]},{"Key":"And feel","Fragments":["free"]},{"Key":"feel free","Fragments":["to"]},{"Key":"to poke","Fragments":["around"]},{"Key":"around at","Fragments":["my"]},{"Key":"my stuff!","Fragments":["I've"]},{"Key":"stuff! I've","Fragments":["tried"]},{"Key":"I've tried","Fragments":["to","to","to","serveral"]},{"Key":"be active","Fragments":["about"]},{"Key":"active about","Fragments":["commenting"]},{"Key":"about commenting","Fragments":["on"]},{"Key":"commenting on","Fragments":["others'"]},{"Key":"on others'","Fragments":["work,"]},{"Key":"others' work,","Fragments":["but"]},{"Key":"C++ so","Fragments":["there"]},{"Key":"is bound","Fragments":["to"]},{"Key":"bound to","Fragments":["be"]},{"Key":"something wrong","Fragments":["with"]},{"Key":"decided early","Fragments":["on"]},{"Key":"early on","Fragments":["that"]},{"Key":"that using","Fragments":["regular","a","braces","some","sort()","multiple","anything"]},{"Key":"using regular","Fragments":["expressions","expressions","expressions","expression.","expressions.","expressions.","expressions."]},{"Key":"expressions was","Fragments":["going"]},{"Key":"to bucket","Fragments":["the"]},{"Key":"bucket the","Fragments":["strings."]},{"Key":"strings. Happy","Fragments":["that"]},{"Key":"Happy that","Fragments":["I"]},{"Key":"write four","Fragments":["of"]},{"Key":"four of","Fragments":["them"]},{"Key":"I programmed","Fragments":["way"]},{"Key":"programmed way","Fragments":["too"]},{"Key":"in Perl,","Fragments":["so"]},{"Key":"Perl, so","Fragments":["regex"]},{"Key":"so regex","Fragments":["still"]},{"Key":"regex still","Fragments":["comes"]},{"Key":"still comes","Fragments":["pretty"]},{"Key":"comes pretty","Fragments":["easily"]},{"Key":"pretty easily","Fragments":["even"]},{"Key":"easily even","Fragments":["though"]},{"Key":"it's been","Fragments":["years","a"]},{"Key":"been years","Fragments":["since"]},{"Key":"years since","Fragments":["I've"]},{"Key":"since I've","Fragments":["coded"]},{"Key":"I've coded","Fragments":["in"]},{"Key":"coded in","Fragments":["it."]},{"Key":"biggest obstacle","Fragments":["was"]},{"Key":"obstacle was","Fragments":["getting"]},{"Key":"getting reacquainted","Fragments":["with"]},{"Key":"reacquainted with","Fragments":["C++"]},{"Key":"the specifics","Fragments":["of"]},{"Key":"specifics of","Fragments":["C++11"]},{"Key":"of C++11","Fragments":["syntax.","and"]},{"Key":"C++11 syntax.","Fragments":["Initializing"]},{"Key":"syntax. Initializing","Fragments":["const"]},{"Key":"Initializing const","Fragments":["static"]},{"Key":"const static","Fragments":["member"]},{"Key":"member variables,","Fragments":["ouch.","one"]},{"Key":"Oh man,","Fragments":["I"]},{"Key":"man, I","Fragments":["never"]},{"Key":"trinary if-then-else","Fragments":["operator"]},{"Key":"if-then-else operator","Fragments":["anymore."]},{"Key":"operator anymore.","Fragments":["Drives"]},{"Key":"anymore. Drives","Fragments":["me"]},{"Key":"Drives me","Fragments":["nuts."]},{"Key":"liked that","Fragments":["you","you"]},{"Key":"namespace rather","Fragments":["than"]},{"Key":"class. I","Fragments":["didn't","was","could"]},{"Key":"for mine,","Fragments":["didn't"]},{"Key":"mine, didn't","Fragments":["feel"]},{"Key":"like doing","Fragments":["a"]},{"Key":"a brute","Fragments":["force"]},{"Key":"brute force","Fragments":["through","method"]},{"Key":"force through","Fragments":["the"]},{"Key":"string programmatically","Fragments":[":)"]},{"Key":"programmatically :)","Fragments":["I'd"]},{"Key":":) I'd","Fragments":["bet"]},{"Key":"bet money","Fragments":["yours"]},{"Key":"money yours","Fragments":["is"]},{"Key":"yours is","Fragments":["faster"]},{"Key":"faster by","Fragments":["a"]},{"Key":"Good encapsulation,","Fragments":["using"]},{"Key":"encapsulation, using","Fragments":["the"]},{"Key":"the specialized","Fragments":["functions"]},{"Key":"specialized functions","Fragments":["to"]},{"Key":"to analyze","Fragments":["the"]},{"Key":"analyze the","Fragments":["string;"]},{"Key":"string; the","Fragments":["hey"]},{"Key":"function looks","Fragments":["really","odd"]},{"Key":"looks really","Fragments":["nice"]},{"Key":"the isEmpty","Fragments":["function"]},{"Key":"isEmpty function","Fragments":["is"]},{"Key":"is fine;","Fragments":["however"]},{"Key":"fine; however","Fragments":["(and"]},{"Key":"however (and","Fragments":["this"]},{"Key":"(and this","Fragments":["applies"]},{"Key":"this applies","Fragments":["to"]},{"Key":"new functions)","Fragments":["it"]},{"Key":"functions) it","Fragments":["doesn't"]},{"Key":"need it's","Fragments":["own"]},{"Key":"its string","Fragments":["argument,","parameter","algorithms"]},{"Key":"string argument,","Fragments":["nor"]},{"Key":"argument, nor","Fragments":["does"]},{"Key":"it need","Fragments":["to"]},{"Key":"this argument.","Fragments":["Think"]},{"Key":"argument. Think","Fragments":["about"]},{"Key":"can modify","Fragments":["the","their"]},{"Key":"argument type","Fragments":["to","so"]},{"Key":"to eliminate","Fragments":["the","the","the"]},{"Key":"penalty of","Fragments":["making"]},{"Key":"string every","Fragments":["time","time"]},{"Key":"love how","Fragments":["you","simple"]},{"Key":"you classified","Fragments":["things."]},{"Key":"classified things.","Fragments":["Can't"]},{"Key":"things. Can't","Fragments":["say"]},{"Key":"Can't say","Fragments":["I"]},{"Key":"would've done","Fragments":["it"]},{"Key":"but very","Fragments":["tidy"]},{"Key":"very tidy","Fragments":["and"]},{"Key":"tidy and","Fragments":["readable."]},{"Key":"readable. Shows","Fragments":["some"]},{"Key":"Shows some","Fragments":["clever"]},{"Key":"some clever","Fragments":["use"]},{"Key":"clever use","Fragments":["of"]},{"Key":"the any_of,","Fragments":["none_of"]},{"Key":"any_of, none_of","Fragments":["and"]},{"Key":"none_of and","Fragments":["all_of."]},{"Key":" Would've","Fragments":["liked"]},{"Key":"Would've liked","Fragments":["to"]},{"Key":"liked to","Fragments":["have"]},{"Key":"seen '?'","Fragments":["rather"]},{"Key":"'?' rather","Fragments":["than"]},{"Key":"than 63","Fragments":["in"]},{"Key":"63 in","Fragments":["the"]},{"Key":"best thing","Fragments":["about"]},{"Key":"only goes","Fragments":["through"]},{"Key":"goes through","Fragments":["the"]},{"Key":"string one","Fragments":["time."]},{"Key":"one time.","Fragments":["The"]},{"Key":"time. The","Fragments":["downside","\"for\"","verse_index"]},{"Key":"The downside","Fragments":["for"]},{"Key":"downside for","Fragments":["me"]},{"Key":"of scrolling","Fragments":["up"]},{"Key":"scrolling up","Fragments":["and"]},{"Key":"and down","Fragments":["the"]},{"Key":"to reconcile","Fragments":["it"]},{"Key":"reconcile it","Fragments":["all."]},{"Key":"it all.","Fragments":["But"]},{"Key":"all. But","Fragments":["definitely"]},{"Key":"But definitely","Fragments":["I"]},{"Key":"definitely I","Fragments":["can"]},{"Key":"looks more","Fragments":["like"]},{"Key":"C approach","Fragments":["than"]},{"Key":"approach than","Fragments":["C++,"]},{"Key":"than C++,","Fragments":["I"]},{"Key":"the upside","Fragments":["of"]},{"Key":"upside of","Fragments":["only"]},{"Key":"of only","Fragments":["traversing","iterating","the"]},{"Key":"only traversing","Fragments":["the"]},{"Key":"once is","Fragments":["pretty","the"]},{"Key":" added","Fragments":[".h"]},{"Key":"added .h","Fragments":["as"]},{"Key":"as iteration","Fragments":["1","2"]},{"Key":".cpp as","Fragments":["iteration","version"]},{"Key":"a _minor_","Fragments":["nit,"]},{"Key":"_minor_ nit,","Fragments":["but"]},{"Key":"nit, but","Fragments":["there","look","I"]},{"Key":"`string` constructor","Fragments":["that"]},{"Key":"that converts","Fragments":["a"]},{"Key":"converts a","Fragments":["`char"]},{"Key":"a `char","Fragments":["*`"]},{"Key":"`char *`","Fragments":["to"]},{"Key":"a `string`.","Fragments":["So","There's"]},{"Key":"`string`. So","Fragments":["I"]},{"Key":"just declared","Fragments":["the"]},{"Key":"declared the","Fragments":["arguments"]},{"Key":"to `compute`","Fragments":["as"]},{"Key":"`compute` as","Fragments":["`string`"]},{"Key":"as `string`","Fragments":["instead"]},{"Key":"`string` instead","Fragments":["of"]},{"Key":"of `char","Fragments":["*`,"]},{"Key":"`char *`,","Fragments":["so"]},{"Key":"*`, so","Fragments":["I"]},{"Key":"do an","Fragments":["explicit","extra"]},{"Key":"It's nice","Fragments":["to","how"]},{"Key":"see knowledge","Fragments":["of"]},{"Key":"of map's","Fragments":["member"]},{"Key":"map's member","Fragments":["functions,"]},{"Key":"member functions,","Fragments":["and"]},{"Key":"functions, and","Fragments":["usage","simplified","I"]},{"Key":"and usage","Fragments":["of"]},{"Key":"of variable","Fragments":["names","declarations"]},{"Key":"names like","Fragments":["'retval'","\"is_yelled_at\",","yelling,"]},{"Key":"like 'retval'","Fragments":["made"]},{"Key":"'retval' made","Fragments":["this"]},{"Key":"somewhat difficult","Fragments":["to"]},{"Key":"to glance","Fragments":["through,"]},{"Key":"glance through,","Fragments":["because"]},{"Key":"through, because","Fragments":["even"]},{"Key":"because even","Fragments":["though"]},{"Key":"see variable","Fragments":["names"]},{"Key":"names that","Fragments":["describe"]},{"Key":"that describe","Fragments":["the"]},{"Key":"describe the","Fragments":["data","task"]},{"Key":"data they","Fragments":["represent."]},{"Key":"think all","Fragments":["of"]},{"Key":"of update_word_count()","Fragments":["can"]},{"Key":"update_word_count() can","Fragments":["be"]},{"Key":"code tighter","Fragments":["and"]},{"Key":"tighter and","Fragments":["keep","shortened"]},{"Key":"keep yourself","Fragments":["from"]},{"Key":"yourself from","Fragments":["handing"]},{"Key":"from handing","Fragments":["a"]},{"Key":"handing a","Fragments":["bunch"]},{"Key":"of stuff","Fragments":["to","as","set"]},{"Key":"Changed pass-by-value","Fragments":["in"]},{"Key":"pass-by-value in","Fragments":["functions"]},{"Key":"tip about","Fragments":["passing"]},{"Key":"about passing","Fragments":["by"]},{"Key":"by reference.","Fragments":["IT's","When"]},{"Key":"reference. IT's","Fragments":["definitely"]},{"Key":"IT's definitely","Fragments":["something"]},{"Key":"something I'll","Fragments":["have"]},{"Key":"mind working","Fragments":["through"]},{"Key":"working through","Fragments":["these"]},{"Key":"through these","Fragments":["exercises"]},{"Key":"exercises between","Fragments":["C++"]},{"Key":"between C++","Fragments":["and"]},{"Key":"and JS.","Fragments":["I'm"]},{"Key":"JS. I'm","Fragments":["also"]},{"Key":"also dropping","Fragments":["regexes"]},{"Key":"dropping regexes","Fragments":["since"]},{"Key":"regexes since","Fragments":["right"]},{"Key":"since right","Fragments":["now"]},{"Key":"now they","Fragments":["seem"]},{"Key":"they seem","Fragments":["overly"]},{"Key":"seem overly","Fragments":["complicated."]},{"Key":"site goes,","Fragments":["it"]},{"Key":"goes, it","Fragments":["also"]},{"Key":"also says","Fragments":["to"]},{"Key":"submit if","Fragments":["you"]},{"Key":"get stuck,","Fragments":["and"]},{"Key":"stuck, and","Fragments":["to"]},{"Key":"to describe","Fragments":["what","the"]},{"Key":"describe what","Fragments":["you've","is"]},{"Key":"done and","Fragments":["what","quite"]},{"Key":"did. Getting","Fragments":["some"]},{"Key":"Getting some","Fragments":["feedback"]},{"Key":"some feedback","Fragments":["on"]},{"Key":"feedback on","Fragments":["my","this,"]},{"Key":"my JS","Fragments":["implementation"]},{"Key":"JS implementation","Fragments":["and"]},{"Key":"one are","Fragments":["helping"]},{"Key":"are helping","Fragments":["me"]},{"Key":"me get","Fragments":["in"]},{"Key":"right direction,","Fragments":["so"]},{"Key":"direction, so","Fragments":["I"]},{"Key":"Pretty simple,","Fragments":["iterate"]},{"Key":"simple, iterate","Fragments":["through"]},{"Key":"input vector,","Fragments":["compare"]},{"Key":"vector, compare","Fragments":["each"]},{"Key":"compare each","Fragments":["word"]},{"Key":"each word","Fragments":["against","and"]},{"Key":"word against","Fragments":["the"]},{"Key":"reference word","Fragments":["and","is","and"]},{"Key":"The check","Fragments":["for"]},{"Key":"for anagram","Fragments":["is","use"]},{"Key":"anagram is","Fragments":["the","a"]},{"Key":"the meat","Fragments":["of"]},{"Key":"meat of","Fragments":["the"]},{"Key":"code. Taking","Fragments":["care"]},{"Key":"Taking care","Fragments":["of"]},{"Key":"few special","Fragments":["cases"]},{"Key":"cases at","Fragments":["the"]},{"Key":"the isAnagram()","Fragments":["function."]},{"Key":"isAnagram() function.","Fragments":["Then"]},{"Key":"function. Then","Fragments":["iterate"]},{"Key":"Then iterate","Fragments":["through"]},{"Key":"through each","Fragments":["letter","element"]},{"Key":"each letter","Fragments":["of","is","of","is"]},{"Key":"reference word.","Fragments":["If"]},{"Key":"the comparison","Fragments":["word,","is","at","between"]},{"Key":"comparison word,","Fragments":["then"]},{"Key":"until all","Fragments":["the"]},{"Key":"letters have","Fragments":["been"]},{"Key":"been found,","Fragments":["returning"]},{"Key":"found, returning","Fragments":["early"]},{"Key":"returning early","Fragments":["if"]},{"Key":"letter isn't","Fragments":["found."]},{"Key":"few minor","Fragments":["cleanups"]},{"Key":"minor cleanups","Fragments":["(naming"]},{"Key":"cleanups (naming","Fragments":["and"]},{"Key":"(naming and","Fragments":["remove"]},{"Key":"remove an","Fragments":["unused"]},{"Key":"unused header)","Fragments":["between"]},{"Key":"header) between","Fragments":["the"]},{"Key":"one. No","Fragments":["algorithm"]},{"Key":"No algorithm","Fragments":["changes."]},{"Key":"I rethought","Fragments":["finding"]},{"Key":"rethought finding","Fragments":["the"]},{"Key":"anagram based","Fragments":["on"]},{"Key":"on seeing","Fragments":["the"]},{"Key":"seeing the","Fragments":["entry","std::whatever"]},{"Key":"the entry","Fragments":["from"]},{"Key":"entry from","Fragments":["@bruce."]},{"Key":"now create","Fragments":["an"]},{"Key":"an additional","Fragments":["copy","check","character"]},{"Key":"additional copy","Fragments":["of"]},{"Key":"reference string","Fragments":["that","from"]},{"Key":"is sorted.","Fragments":["Then"]},{"Key":"sorted. Then","Fragments":["when"]},{"Key":"Then when","Fragments":["attempting"]},{"Key":"find anagrams,","Fragments":["I"]},{"Key":"anagrams, I","Fragments":["eliminate"]},{"Key":"I eliminate","Fragments":["comparison"]},{"Key":"eliminate comparison","Fragments":["words"]},{"Key":"comparison words","Fragments":["that"]},{"Key":"aren't the","Fragments":["same"]},{"Key":"length or","Fragments":["are"]},{"Key":"same words.","Fragments":["The"]},{"Key":"words. The","Fragments":["final"]},{"Key":"final check","Fragments":["is"]},{"Key":"sorted reference","Fragments":["word","word","string"]},{"Key":"sorted comparison","Fragments":["word."]},{"Key":"comparison word.","Fragments":["That"]},{"Key":"word. That","Fragments":["will"]},{"Key":"will indicate","Fragments":["an"]},{"Key":"should reduce","Fragments":["the"]},{"Key":"overall work","Fragments":["done"]},{"Key":"work done","Fragments":["by","in"]},{"Key":"by first","Fragments":["pre-computing"]},{"Key":"first pre-computing","Fragments":["the"]},{"Key":"pre-computing the","Fragments":["sorted"]},{"Key":"by short-circuiting","Fragments":["at"]},{"Key":"short-circuiting at","Fragments":["each"]},{"Key":"each test","Fragments":["if","case...","in"]},{"Key":"is disqualified","Fragments":["as"]},{"Key":"disqualified as","Fragments":["being"]},{"Key":"as being","Fragments":["an"]},{"Key":"being an","Fragments":["anagram."]},{"Key":"data generated","Fragments":["by"]},{"Key":"algorithm to","Fragments":["minimum.","run","make","find"]},{"Key":" __Note:__","Fragments":["*Nitpicks","*Nitpicks","*Nitpicks"]},{"Key":"__Note:__ *Nitpicks","Fragments":["Needed*","Needed*","Needed*"]},{"Key":"project to","Fragments":["be","be","introduce","be","debug."]},{"Key":"be challenging","Fragments":["to","to","to"]},{"Key":"challenging to","Fragments":["express","express","express"]},{"Key":"express in","Fragments":["a","a","a"]},{"Key":"a readable","Fragments":["and","and","state.","and"]},{"Key":"concise manner","Fragments":["and","and","and"]},{"Key":"manner and","Fragments":["I","I","I"]},{"Key":"believe my","Fragments":["code","code","code"]},{"Key":"code shows","Fragments":["that","that","that"]},{"Key":"shows that","Fragments":["through","through","through"]},{"Key":"that through","Fragments":["complication.","complication.","complication."]},{"Key":"look out","Fragments":["for","for","for"]},{"Key":"out for","Fragments":["is:","is:","is:","copy_if."]},{"Key":" \u003cul\u003e\u003cli\u003eMy","Fragments":["use","use","use"]},{"Key":"\u003cul\u003e\u003cli\u003eMy use","Fragments":["of","of","of"]},{"Key":"an entire","Fragments":["dictionary","dictionary","range","dictionary"]},{"Key":"entire dictionary","Fragments":["to","to","to"]},{"Key":"dictionary to","Fragments":["pass","pass","pass"]},{"Key":"pass one","Fragments":["test;","test;","test;"]},{"Key":"one test;","Fragments":["how","how","how"]},{"Key":"test; how","Fragments":["could","could","could"]},{"Key":"how could","Fragments":["this","this","this"]},{"Key":"could this","Fragments":["be","be","be"]},{"Key":"be replaced?","Fragments":["Which"]},{"Key":"replaced? Which","Fragments":["would"]},{"Key":"Which would","Fragments":["solve\u003cul\u003e\u003cli\u003eMy","make"]},{"Key":"would solve\u003cul\u003e\u003cli\u003eMy","Fragments":["platform"]},{"Key":"solve\u003cul\u003e\u003cli\u003eMy platform","Fragments":["dependecy\u003c/li\u003e\u003cli\u003eOver"]},{"Key":"platform dependecy\u003c/li\u003e\u003cli\u003eOver","Fragments":["complication","complication","complication"]},{"Key":"dependecy\u003c/li\u003e\u003cli\u003eOver complication","Fragments":["of","of","of"]},{"Key":"complication of","Fragments":["code\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e","code\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e","code\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e"]},{"Key":"\u003cli\u003e `matches()`","Fragments":["takes","takes","takes","takes"]},{"Key":"`matches()` takes","Fragments":["a","a","a","a"]},{"Key":"words and","Fragments":["for","for","for","for","I"]},{"Key":"each one","Fragments":["checks","checks","for","checks","checks","is"]},{"Key":"one checks","Fragments":["if","if","if","if"]},{"Key":"checks if","Fragments":["`isValid()`.","`isValid()`.","`isValid()`.","`isValid()`.","input","the","the"]},{"Key":"if `isValid()`.","Fragments":["\u003c/li\u003e","\u003c/li\u003e","\u003c/li\u003e","\u003c/li\u003e"]},{"Key":"\u003cli\u003e A","Fragments":["`word`","`word`","`word`","`word`"]},{"Key":"A `word`","Fragments":["`isValid()`","`isValid()`","`isValid()`","`isValid()`"]},{"Key":"`word` `isValid()`","Fragments":["if","if","if","if"]},{"Key":"`isValid()` if","Fragments":["it","it","it","it"]},{"Key":"an anagram;","Fragments":["it","it","it","it"]},{"Key":"anagram; it","Fragments":["is","is","is","is"]},{"Key":"anagram if","Fragments":["it","it","it","it","it"]},{"Key":"length as","Fragments":["the","the","the","the"]},{"Key":"the stored","Fragments":["anagram","anagram","anagram","regex","regex","anagram"]},{"Key":"stored anagram","Fragments":["but","but","but","and"]},{"Key":"anagram but","Fragments":["is","is","is"]},{"Key":"different dictionary","Fragments":["word","word","word"]},{"Key":"word that","Fragments":["contains","contains","it","contains"]},{"Key":" \u003cli\u003eif","Fragments":["`isValid`","`isValid`","`isValid`","`isValid`"]},{"Key":"\u003cli\u003eif `isValid`","Fragments":["returns","returns","returns","returns"]},{"Key":"`isValid` returns","Fragments":["true","true","true","true"]},{"Key":"true then","Fragments":["the","the","the","all","the"]},{"Key":"is inserted","Fragments":["into","into","into","into"]},{"Key":"inserted into","Fragments":["the","the","the","the","the","each"]},{"Key":"the match","Fragments":["`vector`\u003c/li\u003e","`vector`\u003c/li\u003e","`vector`\u003c/li\u003e","`vector`\u003c/li\u003e","function,"]},{"Key":"\u003cli\u003eThe match","Fragments":["`vector`","`vector`","`vector`","`vector`"]},{"Key":"match `vector`","Fragments":["is","is","is","is"]},{"Key":"\u003cli\u003e Because","Fragments":["I","I","I","I","I","I"]},{"Key":"dictionary a","Fragments":["lot","lot","lot"]},{"Key":"of processing","Fragments":["power","power","power"]},{"Key":"processing power","Fragments":["is","is","is"]},{"Key":"power is","Fragments":["used","used","used"]},{"Key":"storing and","Fragments":["searching","searching","searching"]},{"Key":"and searching","Fragments":["it;","it;","it;"]},{"Key":"searching it;","Fragments":["this","this","this"]},{"Key":"it; this","Fragments":["is","is","is"]},{"Key":"large performance","Fragments":["bottleneck.\u003c/li\u003e","bottleneck.\u003c/li\u003e","benefit.","bottleneck.\u003c/li\u003e"]},{"Key":" \u003cli\u003eBecause","Fragments":["of","of","I","of","I","of","I","of","we","we","I","of","I","I","of"]},{"Key":"\u003cli\u003eBecause of","Fragments":["how","how","how","how","how","how","how"]},{"Key":"I implement","Fragments":["my","my","my"]},{"Key":"implement my","Fragments":["dictionary,","dictionary,","dictionary,","own."]},{"Key":"my dictionary,","Fragments":["this","this","this"]},{"Key":"dictionary, this","Fragments":["program","program","program"]},{"Key":"this program","Fragments":["only","only","does","is","only"]},{"Key":"program only","Fragments":["runs","runs","runs"]},{"Key":"only runs","Fragments":["on","on","on","through"]},{"Key":"runs on","Fragments":["*most","*most","*most"]},{"Key":"on *most","Fragments":["unix","unix","unix"]},{"Key":"*most unix","Fragments":["devices*","devices*","devices*"]},{"Key":"unix devices*","Fragments":["something","something","something"]},{"Key":"devices* something","Fragments":["that","that","that"]},{"Key":"avoided at","Fragments":["all","all","all"]},{"Key":" __THIS","Fragments":["ITERATION"]},{"Key":"__THIS ITERATION","Fragments":["WAS"]},{"Key":"ITERATION WAS","Fragments":["ACCIDENTALLY"]},{"Key":"WAS ACCIDENTALLY","Fragments":["SUBMITTED__"]},{"Key":" *The","Fragments":["only"]},{"Key":"*The only","Fragments":["difference"]},{"Key":"only difference","Fragments":["is","would"]},{"Key":"that `m_word`","Fragments":["is"]},{"Key":"`m_word` is","Fragments":["called"]},{"Key":"__Changes from","Fragments":["iteration","iteration","iteration"]},{"Key":"\u003cli\u003e As","Fragments":["iteration"]},{"Key":"As iteration","Fragments":["2"]},{"Key":"2 states","Fragments":["it"]},{"Key":"states it","Fragments":["was"]},{"Key":"an accidental","Fragments":["upload"]},{"Key":"accidental upload","Fragments":["only"]},{"Key":"upload only","Fragments":["containing"]},{"Key":"containing the","Fragments":["change","anonymous"]},{"Key":"the change","Fragments":["of","would"]},{"Key":"change of","Fragments":["`m_word`"]},{"Key":"of `m_word`","Fragments":["to"]},{"Key":"`m_word` to","Fragments":["`m_anagram`"]},{"Key":"to `m_anagram`","Fragments":["to"]},{"Key":"`m_anagram` to","Fragments":["make","lowercase"]},{"Key":"being operated","Fragments":["on.\u003c/li\u003e"]},{"Key":" \u003cli\u003eAn","Fragments":["instance"]},{"Key":"\u003cli\u003eAn instance","Fragments":["of"]},{"Key":"of `isWord()`","Fragments":["which"]},{"Key":"`isWord()` which","Fragments":["was"]},{"Key":"was unecessary","Fragments":["and"]},{"Key":"unecessary and","Fragments":["greatly"]},{"Key":"and greatly","Fragments":["reduced"]},{"Key":"greatly reduced","Fragments":["performance"]},{"Key":"reduced performance","Fragments":["due"]},{"Key":"performance due","Fragments":["to"]},{"Key":"dictionary search","Fragments":["has"]},{"Key":"search has","Fragments":["been"]},{"Key":"replaced to","Fragments":["help","help"]},{"Key":"help solve...\u003cul\u003e\u003cli\u003eMy","Fragments":["platform","platform"]},{"Key":"solve...\u003cul\u003e\u003cli\u003eMy platform","Fragments":["dependecy\u003c/li\u003e\u003cli\u003eOver","dependecy\u003c/li\u003e\u003cli\u003eOver"]},{"Key":"make *score*","Fragments":["**const**"]},{"Key":"*score* **const**","Fragments":["to"]},{"Key":"compiler (see","Fragments":["https://www.youtube.com/watch?v=GPpD4BBtA1Y)"]},{"Key":"Hey man,","Fragments":["just"]},{"Key":"man, just","Fragments":["thought"]},{"Key":"thought I'd","Fragments":["let"]},{"Key":"I'd let","Fragments":["you"]},{"Key":"behavior of","Fragments":["the"]},{"Key":"the `copy_string_to_lower()`","Fragments":["function"]},{"Key":"`copy_string_to_lower()` function","Fragments":["can"]},{"Key":"function can","Fragments":["be","be","be","return"]},{"Key":"the `boost`","Fragments":["library"]},{"Key":"`boost` library","Fragments":["as"]},{"Key":"library as","Fragments":["`boost::to_lower_copy()`"]},{"Key":"as `boost::to_lower_copy()`","Fragments":["if"]},{"Key":"`boost::to_lower_copy()` if","Fragments":["you'd"]},{"Key":"if you'd","Fragments":["be"]},{"Key":"be interested","Fragments":["in","to","to","in","to","to","if"]},{"Key":"in shortening","Fragments":["your"]},{"Key":"shortening your","Fragments":["code"]},{"Key":"with Mike","Fragments":["Acton"]},{"Key":"Mike Acton","Fragments":["in"]},{"Key":"Acton in","Fragments":["his"]},{"Key":"in his","Fragments":["domain."]},{"Key":" He","Fragments":["describes"]},{"Key":"He describes","Fragments":["proper"]},{"Key":"describes proper","Fragments":["engineering"]},{"Key":"proper engineering","Fragments":["as"]},{"Key":"engineering as","Fragments":["a"]},{"Key":"of steps,","Fragments":["beginning"]},{"Key":"steps, beginning","Fragments":["with"]},{"Key":"* _Estimate","Fragments":["resources"]},{"Key":"_Estimate resources","Fragments":["available_"]},{"Key":"* _Triage","Fragments":["based"]},{"Key":"_Triage based","Fragments":["on"]},{"Key":"on cost","Fragments":["and"]},{"Key":"cost and","Fragments":["value"]},{"Key":"* _Collect","Fragments":["data_"]},{"Key":" IMHO","Fragments":["this"]},{"Key":"IMHO this","Fragments":["exercise"]},{"Key":"exercise does","Fragments":["not"]},{"Key":"a execution","Fragments":["time"]},{"Key":"execution time","Fragments":["bottleneck,"]},{"Key":"time bottleneck,","Fragments":["since"]},{"Key":"bottleneck, since","Fragments":["it"]},{"Key":"will only","Fragments":["run"]},{"Key":"only run","Fragments":["on"]},{"Key":"run on","Fragments":["the"]},{"Key":"unit tests.","Fragments":["But","At","I"]},{"Key":"tests. But","Fragments":["this"]},{"Key":"read by","Fragments":["me","the"]},{"Key":"by me","Fragments":["(probably"]},{"Key":"me (probably","Fragments":["more"]},{"Key":"(probably more","Fragments":["than"]},{"Key":"than once)","Fragments":["and"]},{"Key":"once) and","Fragments":["hopefully"]},{"Key":"and hopefully","Fragments":["by","prevents"]},{"Key":"hopefully by","Fragments":["others,"]},{"Key":"by others,","Fragments":["so","I"]},{"Key":"others, so","Fragments":["developer"]},{"Key":"so developer","Fragments":["time"]},{"Key":"developer time","Fragments":["is"]},{"Key":"a valuable","Fragments":["resource."]},{"Key":"valuable resource.","Fragments":["Therefore"]},{"Key":"resource. Therefore","Fragments":["I"]},{"Key":"understand, without","Fragments":["sacrificing"]},{"Key":"without sacrificing","Fragments":["performance"]},{"Key":"sacrificing performance","Fragments":["unnecessarily."]},{"Key":"performance unnecessarily.","Fragments":["I"]},{"Key":"unnecessarily. I","Fragments":["can"]},{"Key":"that because","Fragments":["I"]},{"Key":"that once","Fragments":["this","it's"]},{"Key":"once this","Fragments":["function"]},{"Key":"is identified","Fragments":["as"]},{"Key":"identified as","Fragments":["a"]},{"Key":"a bottleneck","Fragments":["w.r.t."]},{"Key":"bottleneck w.r.t.","Fragments":["execution"]},{"Key":"w.r.t. execution","Fragments":["time,"]},{"Key":"execution time,","Fragments":["I"]},{"Key":"can add","Fragments":["optimizations"]},{"Key":"add optimizations","Fragments":["like"]},{"Key":"say is","Fragments":["that","that","that","that"]},{"Key":"right, hoisting","Fragments":["that"]},{"Key":"hoisting that","Fragments":["value"]},{"Key":"value supports","Fragments":["the"]},{"Key":"supports the","Fragments":["compiler,"]},{"Key":"compiler, I'm","Fragments":["just"]},{"Key":"not willing","Fragments":["to"]},{"Key":"readability without","Fragments":["data"]},{"Key":"without data","Fragments":["that"]},{"Key":"that supports","Fragments":["this"]},{"Key":"supports this","Fragments":["measure."]},{"Key":" (BTW:","Fragments":["I"]},{"Key":"(BTW: I","Fragments":["would"]},{"Key":"would blindly","Fragments":["guess"]},{"Key":"blindly guess","Fragments":["that"]},{"Key":"a traditional","Fragments":["``for``"]},{"Key":"traditional ``for``","Fragments":["loop"]},{"Key":"``for`` loop","Fragments":["might"]},{"Key":"loop might","Fragments":["also"]},{"Key":"this iterator-based","Fragments":["loop.)"]},{"Key":" Last","Fragments":["not","but"]},{"Key":"least: Thanks","Fragments":["for"]},{"Key":"the nitpick.","Fragments":["I'm"]},{"Key":"nitpick. I'm","Fragments":["always"]},{"Key":"always learning","Fragments":["something"]},{"Key":"learning something","Fragments":["new"]},{"Key":"new whether","Fragments":["I"]},{"Key":"whether I","Fragments":["improve","can"]},{"Key":"improve or","Fragments":["defend"]},{"Key":"or defend","Fragments":["my"]},{"Key":"defend my","Fragments":["code."]},{"Key":"just rewatched","Fragments":["the"]},{"Key":"rewatched the","Fragments":["video."]},{"Key":"the video.","Fragments":["Nice"]},{"Key":"video. Nice","Fragments":["stuff."]},{"Key":"trinary operator","Fragments":[":)"]},{"Key":"operator :)","Fragments":["the"]},{"Key":":) the","Fragments":["nice"]},{"Key":"nice side","Fragments":["of"]},{"Key":"side of","Fragments":["it"]},{"Key":"it reduces","Fragments":["the"]},{"Key":"code compared","Fragments":["to"]},{"Key":"to if-then-else","Fragments":["structures."]},{"Key":"class would","Fragments":["be","even","have"]},{"Key":"heavy approach","Fragments":["to"]},{"Key":"the constructors,","Fragments":["destructors"]},{"Key":"constructors, destructors","Fragments":["etc."]},{"Key":"destructors etc.","Fragments":["In"]},{"Key":"etc. In","Fragments":["addition,","C++,"]},{"Key":"In addition,","Fragments":["there","the"]},{"Key":"addition, there","Fragments":["is"]},{"Key":"for multiple","Fragments":["instances."]},{"Key":"write also","Fragments":["a"]},{"Key":"version in","Fragments":["the"]},{"Key":"next iteration.","Fragments":["We'll","It'd"]},{"Key":"iteration. We'll","Fragments":["see."]},{"Key":"In what","Fragments":["case"]},{"Key":"what case","Fragments":["passing"]},{"Key":"case passing","Fragments":["scope"]},{"Key":"passing scope","Fragments":["variables"]},{"Key":"scope variables","Fragments":["to"]},{"Key":"to lambda","Fragments":["by"]},{"Key":"lambda by","Fragments":["reference","::isupper."]},{"Key":"reference would","Fragments":["be","avoid"]},{"Key":" ######","Fragments":["Functionality","Style"]},{"Key":"###### Functionality","Fragments":["Issues"]},{"Key":"you insert","Fragments":["word"]},{"Key":"insert word","Fragments":["into"]},{"Key":"time `words[currentWord]`","Fragments":["value"]},{"Key":"`words[currentWord]` value","Fragments":["will"]},{"Key":"be undefined","Fragments":["thus,"]},{"Key":"undefined thus,","Fragments":["result"]},{"Key":"thus, result","Fragments":["of"]},{"Key":"of pre-increment","Fragments":["on"]},{"Key":"pre-increment on","Fragments":["value"]},{"Key":"on value","Fragments":["of"]},{"Key":"of `words[currentWord]`","Fragments":["is"]},{"Key":"`words[currentWord]` is","Fragments":["undefined."]},{"Key":"undefined. int","Fragments":["does"]},{"Key":"int does","Fragments":["not"]},{"Key":"thus is","Fragments":["not","to"]},{"Key":"###### Style","Fragments":["notes"]},{"Key":"* no","Fragments":["need"]},{"Key":"initialize std::string","Fragments":["to"]},{"Key":"std::string to","Fragments":["empty"]},{"Key":"to empty","Fragments":["string"]},{"Key":"string -","Fragments":["this","no","it"]},{"Key":"- this","Fragments":["is","means","could","is"]},{"Key":"is default","Fragments":["constructor"]},{"Key":"constructor behavior","Fragments":["(line"]},{"Key":"behavior (line","Fragments":["10)"]},{"Key":"* `currentWorld`","Fragments":["definition"]},{"Key":"`currentWorld` definition","Fragments":["should"]},{"Key":"definition should","Fragments":["match"]},{"Key":"should match","Fragments":["usage"]},{"Key":"match usage","Fragments":["scope:"]},{"Key":"usage scope:","Fragments":["right"]},{"Key":"scope: right","Fragments":["before"]},{"Key":"* favor","Fragments":["using"]},{"Key":"favor using","Fragments":["empty()"]},{"Key":"using empty()","Fragments":["over"]},{"Key":"empty() over","Fragments":["checking"]},{"Key":"over checking","Fragments":["container"]},{"Key":"checking container","Fragments":["value."]},{"Key":"container value.","Fragments":["`if(currentWord.empty())"]},{"Key":"value. `if(currentWord.empty())","Fragments":["...`"]},{"Key":"`if(currentWord.empty()) ...`","Fragments":["(line"]},{"Key":"...` (line","Fragments":["17)"]},{"Key":" Moved","Fragments":["normalized","to","to","the","FINE"]},{"Key":"Moved normalized","Fragments":["string"]},{"Key":"normalized string","Fragments":["to"]},{"Key":"to class","Fragments":["level,","bob."]},{"Key":"class level,","Fragments":["thanks"]},{"Key":"level, thanks","Fragments":["to"]},{"Key":"to @katlyn's","Fragments":["version."]},{"Key":"Modified `matches`","Fragments":["algorithm."]},{"Key":"know, it","Fragments":["just"]},{"Key":"just feel","Fragments":["like"]},{"Key":"it. (Sorry,","Fragments":["it's"]},{"Key":"(Sorry, it's","Fragments":["not"]},{"Key":"Made sure","Fragments":["the"]},{"Key":"silence response","Fragments":["was"]},{"Key":"response was","Fragments":["before"]},{"Key":"was before","Fragments":["the"]},{"Key":"question response","Fragments":["so"]},{"Key":"response so","Fragments":["if"]},{"Key":"empty it","Fragments":["would","will"]},{"Key":"would never","Fragments":["call"]},{"Key":"call .back()","Fragments":["since"]},{"Key":".back() since","Fragments":["that"]},{"Key":"variable naming","Fragments":["of"]},{"Key":"naming of","Fragments":["the"]},{"Key":"the iterator.","Fragments":["It","Most"]},{"Key":"iterator. It","Fragments":["makes"]},{"Key":"makes its","Fragments":["purpose"]},{"Key":"purpose very","Fragments":["clear."]},{"Key":"Solution to","Fragments":["the"]},{"Key":"problem is","Fragments":["nice","that","a","bigger","in"]},{"Key":"and tight,","Fragments":["well"]},{"Key":"tight, well","Fragments":["executed."]},{"Key":" Where","Fragments":["you","have"]},{"Key":"Where you","Fragments":["have"]},{"Key":"have ```word=","Fragments":["\"\";```,"]},{"Key":"```word= \"\";```,","Fragments":["perhaps"]},{"Key":"\"\";```, perhaps","Fragments":["the"]},{"Key":"more STL","Fragments":["way"]},{"Key":"STL way","Fragments":["to"]},{"Key":"to reinitialize","Fragments":["the"]},{"Key":"reinitialize the","Fragments":["string"]},{"Key":" Finished","Fragments":["updating"]},{"Key":"Finished updating","Fragments":["cases"]},{"Key":"updating cases","Fragments":["and"]},{"Key":"and functions,","Fragments":["and","which"]},{"Key":"and simplified","Fragments":["some","detection"]},{"Key":"simplified some","Fragments":["cases"]},{"Key":"cases by","Fragments":["removing"]},{"Key":"removing redundant","Fragments":["and"]},{"Key":"redundant and","Fragments":["empty"]},{"Key":"and empty","Fragments":["conditions"]},{"Key":"empty conditions","Fragments":["from"]},{"Key":"conditions from","Fragments":["the"]},{"Key":"the prior","Fragments":["iteration."]},{"Key":"However, right","Fragments":["now"]},{"Key":"now there's","Fragments":["a"]},{"Key":"in isSilence()","Fragments":["regarding"]},{"Key":"isSilence() regarding","Fragments":["the"]},{"Key":"regarding the","Fragments":["14th"]},{"Key":"the 14th","Fragments":["test"]},{"Key":"14th test","Fragments":["case"]},{"Key":"is \"\".","Fragments":["Based"]},{"Key":"\"\". Based","Fragments":["on"]},{"Key":"and testing","Fragments":["in"]},{"Key":"testing in","Fragments":["Coliru,"]},{"Key":"in Coliru,","Fragments":["we","I"]},{"Key":"Coliru, we","Fragments":["should"]},{"Key":"be receiving","Fragments":["the"]},{"Key":"receiving the","Fragments":["correct"]},{"Key":"correct output","Fragments":["from"]},{"Key":"output from","Fragments":["hey(),"]},{"Key":"from hey(),","Fragments":["but"]},{"Key":"hey(), but","Fragments":["in"]},{"Key":"in VS2013+Boost,","Fragments":["we"]},{"Key":"VS2013+Boost, we","Fragments":["receive"]},{"Key":"we receive","Fragments":["an"]},{"Key":"receive an","Fragments":["\"Assertion"]},{"Key":"an \"Assertion","Fragments":["failed:"]},{"Key":"\"Assertion failed:","Fragments":["string"]},{"Key":"failed: string","Fragments":["subscript","subscript"]},{"Key":"string subscript","Fragments":["out","out"]},{"Key":"subscript out","Fragments":["of","of"]},{"Key":"of range\"","Fragments":["error.","and"]},{"Key":"range\" error.","Fragments":["Right"]},{"Key":"error. Right","Fragments":["now,"]},{"Key":"Right now,","Fragments":["I"]},{"Key":"now, I","Fragments":["can't"]},{"Key":"can't tell","Fragments":["why","if","you"]},{"Key":"tell why","Fragments":["that's"]},{"Key":"why that's","Fragments":["being"]},{"Key":"that's being","Fragments":["thrown"]},{"Key":"being thrown","Fragments":["other"]},{"Key":"thrown other","Fragments":["than"]},{"Key":"than something","Fragments":["one"]},{"Key":"something one","Fragments":["compiler"]},{"Key":"one compiler","Fragments":["is"]},{"Key":"picking up","Fragments":["on"]},{"Key":"other is","Fragments":["not."]},{"Key":"is not.","Fragments":["Any","The"]},{"Key":"not. Any","Fragments":["thoughts?","specific"]},{"Key":"see I'm","Fragments":["quite"]},{"Key":"quite newbie","Fragments":["with"]},{"Key":"newbie with","Fragments":["C++."]},{"Key":"without that","Fragments":["boost"]},{"Key":"like i","Fragments":["got"]},{"Key":"i got","Fragments":["this","lucky"]},{"Key":"thing \"differently\"...","Fragments":["May"]},{"Key":"\"differently\"... May","Fragments":["be"]},{"Key":"be will","Fragments":["give"]},{"Key":"give another","Fragments":["go"]},{"Key":"another go","Fragments":["later."]},{"Key":"forgot a","Fragments":["case."]},{"Key":"nothing said","Fragments":["to"]},{"Key":"to bob","Fragments":["you","to"]},{"Key":"bob you","Fragments":["are"]},{"Key":"to respond","Fragments":["with"]},{"Key":"respond with","Fragments":["\"Fine."]},{"Key":"with \"Fine.","Fragments":["Be"]},{"Key":"cases test","Fragments":["this."]},{"Key":"Also a","Fragments":["cool"]},{"Key":"a cool","Fragments":["thing"]},{"Key":"cool thing","Fragments":["with"]},{"Key":"thing with","Fragments":["std::string."]},{"Key":"std::string. Instead","Fragments":["of"]},{"Key":"the substr","Fragments":["with"]},{"Key":"substr with","Fragments":["the"]},{"Key":"do this.","Fragments":["text.back()","Investigate"]},{"Key":"this. text.back()","Fragments":["=="]},{"Key":"text.back() ==","Fragments":["'?'"]},{"Key":"couple things","Fragments":["I","that","I","that"]},{"Key":"would suggest.","Fragments":["Remove"]},{"Key":"suggest. Remove","Fragments":["the"]},{"Key":"Remove the","Fragments":["empty"]},{"Key":"empty else","Fragments":["statements."]},{"Key":"else statements.","Fragments":["There"]},{"Key":"statements. There","Fragments":["is"]},{"Key":"Also instead","Fragments":["of"]},{"Key":"silence and","Fragments":["yelling,","yelling.","question"]},{"Key":"and yelling,","Fragments":["you"]},{"Key":"yelling, you","Fragments":["could"]},{"Key":"could loop","Fragments":["through","over"]},{"Key":"both checks.","Fragments":["Small"]},{"Key":"checks. Small","Fragments":["optimization."]},{"Key":"your isQuestion","Fragments":["function","will"]},{"Key":"isQuestion function","Fragments":["to"]},{"Key":"just do...","Fragments":["return"]},{"Key":"do... return","Fragments":["input.back()"]},{"Key":"return input.back()","Fragments":["=="]},{"Key":"== '?';","Fragments":["You"]},{"Key":"'?'; You","Fragments":["don't"]},{"Key":"extra ispunct","Fragments":["check"]},{"Key":"ispunct check","Fragments":["since"]},{"Key":"check since","Fragments":["you"]},{"Key":"are explicitly","Fragments":["looking"]},{"Key":"explicitly looking","Fragments":["for"]},{"Key":" @bailey","Fragments":["while"]},{"Key":"@bailey while","Fragments":["the"]},{"Key":"while the","Fragments":["`ispunct`","`compare`","static_cast","class"]},{"Key":"the `ispunct`","Fragments":["call"]},{"Key":"`ispunct` call","Fragments":["is"]},{"Key":"call is","Fragments":["unnecessary,","to"]},{"Key":"is unnecessary,","Fragments":["it"]},{"Key":"unnecessary, it","Fragments":["would"]},{"Key":"practice (but","Fragments":["not"]},{"Key":"(but not","Fragments":["vital"]},{"Key":"not vital","Fragments":["with"]},{"Key":"vital with","Fragments":["reagards"]},{"Key":"with reagards","Fragments":["to"]},{"Key":"reagards to","Fragments":["the"]},{"Key":"test suite)","Fragments":["to"]},{"Key":"suite) to","Fragments":["include"]},{"Key":"include something","Fragments":["to"]},{"Key":"ensure `input.back()`","Fragments":["isn't"]},{"Key":"`input.back()` isn't","Fragments":["called"]},{"Key":"isn't called","Fragments":["when"]},{"Key":"when `input`","Fragments":["is"]},{"Key":"`input` is","Fragments":["blank."]},{"Key":"is blank.","Fragments":["Referencing"]},{"Key":"blank. Referencing","Fragments":["\"last"]},{"Key":"Referencing \"last","Fragments":["character\""]},{"Key":"\"last character\"","Fragments":["using"]},{"Key":"character\" using","Fragments":["square"]},{"Key":"using square","Fragments":["brackets"]},{"Key":"brackets will","Fragments":["also"]},{"Key":"I second","Fragments":["the"]},{"Key":"second the","Fragments":["optimization"]},{"Key":"optimization suggestion","Fragments":["regarding"]},{"Key":"suggestion regarding","Fragments":["one"]},{"Key":"regarding one","Fragments":["read-through"]},{"Key":"one read-through","Fragments":["for"]},{"Key":"read-through for","Fragments":["silence"]},{"Key":"and yelling.","Fragments":["It"]},{"Key":"yelling. It","Fragments":["may"]},{"Key":"small boost","Fragments":["when"]},{"Key":"boost when","Fragments":["you're"]},{"Key":"only running","Fragments":["~10"]},{"Key":"running ~10","Fragments":["test"]},{"Key":"~10 test","Fragments":["cases,"]},{"Key":"cases, but","Fragments":["in"]},{"Key":"of scalability,","Fragments":["that"]},{"Key":"scalability, that","Fragments":["is"]},{"Key":"a relatively","Fragments":["large","recent"]},{"Key":"relatively large","Fragments":["performance"]},{"Key":"you compare","Fragments":["your","at"]},{"Key":"compare your","Fragments":["code"]},{"Key":"that which","Fragments":["others"]},{"Key":"which others","Fragments":["have,"]},{"Key":"others have,","Fragments":["you'll"]},{"Key":"have, you'll","Fragments":["see"]},{"Key":"you'll see","Fragments":["that","all","from"]},{"Key":"have quite","Fragments":["some"]},{"Key":"room to","Fragments":["make"]},{"Key":"more concise.","Fragments":["Getting","Can","And"]},{"Key":"concise. Getting","Fragments":["rid"]},{"Key":"Getting rid","Fragments":["of"]},{"Key":"those pointless","Fragments":["`else`"]},{"Key":"pointless `else`","Fragments":["sections"]},{"Key":"`else` sections","Fragments":["is"]},{"Key":"sections is","Fragments":["a"]},{"Key":"a start,","Fragments":["and"]},{"Key":"and combining","Fragments":["iterations"]},{"Key":"combining iterations","Fragments":["over"]},{"Key":"iterations over","Fragments":["the","the","2"]},{"Key":"string will","Fragments":["help"]},{"Key":"help as","Fragments":["well."]},{"Key":" @veronica","Fragments":["Does"]},{"Key":"@veronica Does","Fragments":["putting"]},{"Key":"Does putting","Fragments":["the"]},{"Key":"putting the","Fragments":["`currentWorld`","most","free"]},{"Key":"the `currentWorld`","Fragments":["declaration"]},{"Key":"`currentWorld` declaration","Fragments":["inside"]},{"Key":"declaration inside","Fragments":["of","of"]},{"Key":"loop not","Fragments":["mean"]},{"Key":"not mean","Fragments":["that"]},{"Key":"every iteration","Fragments":["of","of","which"]},{"Key":"loop, the","Fragments":["program"]},{"Key":"program will","Fragments":["allocate","call"]},{"Key":"will allocate","Fragments":["a","new"]},{"Key":"new variable","Fragments":["for"]},{"Key":"for `currentWord`?","Fragments":["I"]},{"Key":"`currentWord`? I","Fragments":["might"]},{"Key":"be wrong,","Fragments":["but"]},{"Key":"wrong, but","Fragments":["at"]},{"Key":"least in","Fragments":["Java","this"]},{"Key":"Java that","Fragments":["was"]},{"Key":"was told","Fragments":["to"]},{"Key":"told to","Fragments":["avoid.","Bob"]},{"Key":" Sure...","Fragments":["doing"]},{"Key":"Sure... doing","Fragments":["a"]},{"Key":"empty check","Fragments":["before"]},{"Key":"a back()","Fragments":["would"]},{"Key":"back() would","Fragments":["be"]},{"Key":"am confused","Fragments":["by","that"]},{"Key":"confused by","Fragments":["your"]},{"Key":"last paragraph.","Fragments":["You"]},{"Key":"paragraph. You","Fragments":["say"]},{"Key":"You say","Fragments":["my"]},{"Key":"say my","Fragments":["code"]},{"Key":"concise. Can","Fragments":["you"]},{"Key":"give examples","Fragments":["of"]},{"Key":"examples of","Fragments":["improvements","this"]},{"Key":"of improvements","Fragments":["I"]},{"Key":"improvements I","Fragments":["can"]},{"Key":"can make.","Fragments":["Go","You"]},{"Key":"make. Go","Fragments":["ahead"]},{"Key":"Go ahead","Fragments":["and"]},{"Key":" Whoops!","Fragments":["I"]},{"Key":"Whoops! I","Fragments":["meant"]},{"Key":"that @hertha","Fragments":["'s"]},{"Key":"@hertha 's","Fragments":["code"]},{"Key":"'s code","Fragments":["was"]},{"Key":"was very","Fragments":["long.","similar","similar"]},{"Key":"very long.","Fragments":["I"]},{"Key":"long. I","Fragments":["wasn't"]},{"Key":"wasn't trying","Fragments":["to"]},{"Key":"code (I","Fragments":["haven't"]},{"Key":"(I haven't","Fragments":["actually"]},{"Key":"haven't actually","Fragments":["looked"]},{"Key":"actually looked","Fragments":["at"]},{"Key":"looked at","Fragments":["it).","are","whether","the","some","descending"]},{"Key":"at it).","Fragments":["My"]},{"Key":"it). My","Fragments":["apologies."]},{"Key":"took some","Fragments":["advice"]},{"Key":"some advice","Fragments":["from"]},{"Key":"advice from","Fragments":["@nestor","@nestor"]},{"Key":"from @nestor","Fragments":["and","regarding"]},{"Key":"@nestor and","Fragments":["had"]},{"Key":"had `word`","Fragments":["call"]},{"Key":"`word` call","Fragments":["`word.clear()`"]},{"Key":"call `word.clear()`","Fragments":["instead"]},{"Key":"`word.clear()` instead","Fragments":["of"]},{"Key":"of `word","Fragments":["="]},{"Key":"`word =","Fragments":["\"\"`."]},{"Key":"= \"\"`.","Fragments":["I"]},{"Key":"\"\"`. I","Fragments":["also"]},{"Key":"also saw","Fragments":["some"]},{"Key":"saw some","Fragments":["good","other"]},{"Key":"some good","Fragments":["advice"]},{"Key":"good advice","Fragments":["from"]},{"Key":"@nestor regarding","Fragments":["using"]},{"Key":"regarding using","Fragments":["the"]},{"Key":"the imcrementor","Fragments":["on"]},{"Key":"imcrementor on","Fragments":["the"]},{"Key":"the `map\u003cstring,","Fragments":["int\u003e`","int\u003e`"]},{"Key":"`map\u003cstring, int\u003e`","Fragments":["variable","variable"]},{"Key":"int\u003e` variable","Fragments":["without","from"]},{"Key":"variable without","Fragments":["an"]},{"Key":"an initialized","Fragments":["value"]},{"Key":"initialized value","Fragments":["for"]},{"Key":"the `int`.","Fragments":["Instead"]},{"Key":"`int`. Instead","Fragments":["of"]},{"Key":"of incorrectly","Fragments":["assuming"]},{"Key":"incorrectly assuming","Fragments":["that"]},{"Key":"be zero-initialized,","Fragments":["the"]},{"Key":"zero-initialized, the","Fragments":["code"]},{"Key":"code now","Fragments":["checks"]},{"Key":"now checks","Fragments":["to"]},{"Key":"the mapped","Fragments":["element","value"]},{"Key":"mapped element","Fragments":["exists"]},{"Key":"element exists","Fragments":["before"]},{"Key":"exists before","Fragments":["incrementing,"]},{"Key":"before incrementing,","Fragments":["and"]},{"Key":"incrementing, and","Fragments":["initializing"]},{"Key":"and initializing","Fragments":["to","a"]},{"Key":"initializing to","Fragments":["1"]},{"Key":"to 1","Fragments":["otherwise."]},{"Key":"to `.count()`","Fragments":["on"]},{"Key":"`.count()` on","Fragments":["line"]},{"Key":"line 26,","Fragments":["I"]},{"Key":"26, I","Fragments":["changed"]},{"Key":"from `counts`","Fragments":["to"]},{"Key":"`counts` to","Fragments":["`tally`."]},{"Key":"to `tally`.","Fragments":["I"]},{"Key":"`tally`. I","Fragments":["believe"]},{"Key":"that maintains","Fragments":["the"]},{"Key":"maintains the","Fragments":["readability"]},{"Key":"I let","Fragments":["me"]},{"Key":"me drive","Fragments":["by"]},{"Key":"drive by","Fragments":["the"]},{"Key":"what came","Fragments":["out"]},{"Key":"After some","Fragments":["tests,","reading,","thoughts,"]},{"Key":"some tests,","Fragments":["I"]},{"Key":"started using","Fragments":["`regex`"]},{"Key":"using `regex`","Fragments":["library","for"]},{"Key":"`regex` library","Fragments":["because"]},{"Key":"library because","Fragments":["I","it"]},{"Key":"seen the","Fragments":["name","use"]},{"Key":"library in","Fragments":["a","my"]},{"Key":"C++ book.","Fragments":["I"]},{"Key":"book. I","Fragments":["just"]},{"Key":"just followed","Fragments":["the"]},{"Key":"and compiler","Fragments":["error","truncates"]},{"Key":"The definition","Fragments":["of"]},{"Key":"of `yell`","Fragments":["is"]},{"Key":"`yell` is","Fragments":["a"]},{"Key":"bit dubious","Fragments":["to"]},{"Key":"dubious to","Fragments":["me."]},{"Key":" @mitchel","Fragments":["The"]},{"Key":"@mitchel The","Fragments":["program"]},{"Key":"will call","Fragments":["constructor"]},{"Key":"call constructor","Fragments":["and"]},{"Key":"and destructor","Fragments":["of"]},{"Key":"destructor of","Fragments":["std::string"]},{"Key":"std::string but","Fragments":["not"]},{"Key":"not necessarily","Fragments":["allocate"]},{"Key":"necessarily allocate","Fragments":["and"]},{"Key":"allocate and","Fragments":["deallocate"]},{"Key":"and deallocate","Fragments":["memory."]},{"Key":"deallocate memory.","Fragments":["(If"]},{"Key":"memory. (If","Fragments":["my"]},{"Key":"(If my","Fragments":["memory"]},{"Key":"my memory","Fragments":["serves","is"]},{"Key":"memory serves","Fragments":["me"]},{"Key":"serves me","Fragments":["right)"]},{"Key":"me right)","Fragments":["Only"]},{"Key":"right) Only","Fragments":["if"]},{"Key":"if word","Fragments":["length","is","is"]},{"Key":"word length","Fragments":["is","5.7.","of"]},{"Key":"15 -","Fragments":["it"]},{"Key":"allocate new","Fragments":["buffer."]},{"Key":"the focus","Fragments":["of"]},{"Key":"focus of","Fragments":["this"]},{"Key":"on cleanliness","Fragments":["rather"]},{"Key":"cleanliness rather","Fragments":["than"]},{"Key":"than performance,","Fragments":["hence"]},{"Key":"performance, hence","Fragments":["the"]},{"Key":"comment in","Fragments":["'Style","at","the"]},{"Key":"in 'Style","Fragments":["Notes'"]},{"Key":" PS.","Fragments":["Java"]},{"Key":"PS. Java","Fragments":["allocates"]},{"Key":"Java allocates","Fragments":["all"]},{"Key":"allocates all","Fragments":["objects"]},{"Key":"all objects","Fragments":["on"]},{"Key":"objects on","Fragments":["the"]},{"Key":"heap -","Fragments":["cost"]},{"Key":"- cost","Fragments":["of"]},{"Key":"of such","Fragments":["construct","variables,"]},{"Key":"such construct","Fragments":["in"]},{"Key":"construct in","Fragments":["java","C++11."]},{"Key":"in java","Fragments":["would"]},{"Key":"java would","Fragments":["be"]},{"Key":"be higher","Fragments":["than"]},{"Key":"Just looked","Fragments":["over"]},{"Key":"looked over","Fragments":["your"]},{"Key":"over your","Fragments":["coded"]},{"Key":"your coded","Fragments":["and"]},{"Key":"coded and","Fragments":["a"]},{"Key":"few suggestions","Fragments":["came"]},{"Key":"suggestions came","Fragments":["to"]},{"Key":"1. In","Fragments":["a"]},{"Key":"constructor any","Fragments":["variable,"]},{"Key":"any variable,","Fragments":["that"]},{"Key":"than int","Fragments":["or"]},{"Key":"or char,","Fragments":["should"]},{"Key":"char, should","Fragments":["be"]},{"Key":"reference, instead","Fragments":["of"]},{"Key":"copy. ```","Fragments":["(string"]},{"Key":"``` (string","Fragments":["const\u0026"]},{"Key":"(string const\u0026","Fragments":["s)```"]},{"Key":"The constructor","Fragments":["should","argument"]},{"Key":"should (almost)","Fragments":["always"]},{"Key":"(almost) always","Fragments":["be"]},{"Key":"initialized over","Fragments":["an"]},{"Key":"approach has","Fragments":["various"]},{"Key":"has various","Fragments":["advantages,"]},{"Key":"various advantages,","Fragments":["including"]},{"Key":"advantages, including","Fragments":["a"]},{"Key":"``` counter(","Fragments":["string"]},{"Key":"counter( string","Fragments":["const\u0026"]},{"Key":"string const\u0026","Fragments":["in"]},{"Key":"const\u0026 in","Fragments":[")"]},{"Key":"in )","Fragments":[":"]},{"Key":": dnaCounts_","Fragments":["({"]},{"Key":"dnaCounts_ ({","Fragments":["{'A',"]},{"Key":"({ {'A',","Fragments":["0},"]},{"Key":"{'A', 0},","Fragments":["{'C',"]},{"Key":"0}, {'C',","Fragments":["0},"]},{"Key":"{'C', 0},","Fragments":["{'G',"]},{"Key":"0}, {'G',","Fragments":["0}"]},{"Key":"{'G', 0}","Fragments":[","]},{"Key":"0} ,","Fragments":["{'T',"]},{"Key":", {'T',","Fragments":["0}})"]},{"Key":"{'T', 0}})","Fragments":["{...}"]},{"Key":"0}}) {...}","Fragments":["```"]},{"Key":"Your approach","Fragments":["works","was"]},{"Key":"approach works","Fragments":["fine"]},{"Key":"works fine","Fragments":["for"]},{"Key":"fine for","Fragments":["small","something"]},{"Key":"small maps,","Fragments":["but"]},{"Key":"maps, but","Fragments":["in"]},{"Key":" of","Fragments":["entries","performance","equal"]},{"Key":"of entries","Fragments":["it"]},{"Key":"entries it","Fragments":["might"]},{"Key":"be wiser","Fragments":["to"]},{"Key":"wiser to","Fragments":["use"]},{"Key":"find function","Fragments":["that"]},{"Key":"is embedded","Fragments":["in"]},{"Key":" ```std::map()```.","Fragments":["If"]},{"Key":"```std::map()```. If","Fragments":["it"]},{"Key":"returns ```map.end()```,","Fragments":["throw"]},{"Key":"```map.end()```, throw","Fragments":["the"]},{"Key":"not handle","Fragments":["the"]},{"Key":"error case","Fragments":["(last"]},{"Key":"case (last","Fragments":["test"]},{"Key":"(last test","Fragments":["case)"]},{"Key":"of std::transform,","Fragments":["I'd"]},{"Key":"std::transform, I'd","Fragments":["really"]},{"Key":"see use","Fragments":["of"]},{"Key":"more code,","Fragments":["makes"]},{"Key":"code, makes","Fragments":["code"]},{"Key":"to understand,","Fragments":["rather","I"]},{"Key":"understand, rather","Fragments":["than"]},{"Key":"than burying","Fragments":["if-elses"]},{"Key":"burying if-elses","Fragments":["in"]},{"Key":"if-elses in","Fragments":["loops."]},{"Key":"in loops.","Fragments":[";-)"]},{"Key":"approach traverses","Fragments":["the"]},{"Key":"traverses the","Fragments":["string"]},{"Key":"only once.","Fragments":["I","I'm"]},{"Key":"It's generally","Fragments":["bad"]},{"Key":"generally bad","Fragments":["practice"]},{"Key":"bad practice","Fragments":["to","to","to"]},{"Key":"which can't","Fragments":["be"]},{"Key":"linked together.","Fragments":["You"]},{"Key":"together. You","Fragments":["could"]},{"Key":"keyword inline,","Fragments":["or"]},{"Key":"inline, or","Fragments":["you","in"]},{"Key":"could static/anonymous","Fragments":["namespace"]},{"Key":"static/anonymous namespace","Fragments":["to"]},{"Key":"to them","Fragments":["(to"]},{"Key":"(to a","Fragments":["different","lesser"]},{"Key":"different effect),","Fragments":["or"]},{"Key":"or (my","Fragments":["favorite"]},{"Key":"(my favorite","Fragments":["in"]},{"Key":"favorite in","Fragments":["this"]},{"Key":"this case)","Fragments":["only"]},{"Key":"case) only","Fragments":["include"]},{"Key":"include forward","Fragments":["declarations"]},{"Key":"also made","Fragments":["the"]},{"Key":"same mistake","Fragments":["I"]},{"Key":"mistake I","Fragments":["did"]},{"Key":"with sing.","Fragments":["There"]},{"Key":"sing. There","Fragments":["should"]},{"Key":"should really","Fragments":["be"]},{"Key":"takes num_bottles","Fragments":["and"]},{"Key":"num_bottles and","Fragments":["a"]},{"Key":"a std::ostream\u0026","Fragments":["so"]},{"Key":"std::ostream\u0026 so","Fragments":["then"]},{"Key":"so then","Fragments":["verse"]},{"Key":"then verse","Fragments":["would"]},{"Key":"verse would","Fragments":["just"]},{"Key":"be {","Fragments":["std::stringstream"]},{"Key":"{ std::stringstream","Fragments":["out;"]},{"Key":"std::stringstream out;","Fragments":["foo(num_bottles,"]},{"Key":"out; foo(num_bottles,","Fragments":["out);"]},{"Key":"foo(num_bottles, out);","Fragments":["return"]},{"Key":"out); return","Fragments":["out.str();"]},{"Key":"return out.str();","Fragments":["}."]},{"Key":"out.str(); }.","Fragments":["This"]},{"Key":"}. This","Fragments":["allows"]},{"Key":"allows sing","Fragments":["to"]},{"Key":"sing to","Fragments":["be"]},{"Key":"efficient manner","Fragments":["by"]},{"Key":"manner by","Fragments":["calling"]},{"Key":"calling foo","Fragments":["not"]},{"Key":"foo not","Fragments":["verse"]},{"Key":"not verse","Fragments":["(one"]},{"Key":"verse (one","Fragments":["stringstream"]},{"Key":"(one stringstream","Fragments":["that"]},{"Key":"stringstream that","Fragments":["keeps"]},{"Key":"keeps getting","Fragments":["written"]},{"Key":"getting written","Fragments":["to"]},{"Key":"written to","Fragments":["and","make"]},{"Key":"to and","Fragments":["logarithmically","from?"]},{"Key":"and logarithmically","Fragments":["growing"]},{"Key":"logarithmically growing","Fragments":["rather"]},{"Key":"growing rather","Fragments":["than"]},{"Key":"than making","Fragments":["a","a"]},{"Key":"separate allocation","Fragments":["for"]},{"Key":"This started","Fragments":["out"]},{"Key":"out much","Fragments":["more"]},{"Key":"complicated with","Fragments":["a"]},{"Key":"a complex","Fragments":["boolean"]},{"Key":"complex boolean","Fragments":["expression"]},{"Key":"expression controlling","Fragments":["the"]},{"Key":"controlling the","Fragments":["\"Whoa,"]},{"Key":"the \"Whoa,","Fragments":["chill"]},{"Key":"out!\" return,","Fragments":["but"]},{"Key":"simplified the","Fragments":["code,","problem"]},{"Key":"code, the","Fragments":["terms"]},{"Key":"the terms","Fragments":["just"]},{"Key":"terms just","Fragments":["disappeared."]},{"Key":"just disappeared.","Fragments":["Notice"]},{"Key":"disappeared. Notice","Fragments":["the"]},{"Key":"Notice the","Fragments":["lack"]},{"Key":"any test","Fragments":["for"]},{"Key":"a terminating","Fragments":["'!'."]},{"Key":"Pretty straightforward.","Fragments":["`boost::split()`"]},{"Key":"straightforward. `boost::split()`","Fragments":["does"]},{"Key":"`boost::split()` does","Fragments":["all"]},{"Key":"simplified detection","Fragments":["of"]},{"Key":"detection of","Fragments":["the"]},{"Key":"not its","Fragments":["own"]},{"Key":"own anagram","Fragments":["case."]},{"Key":"anagram case.","Fragments":["Also"]},{"Key":"case. Also","Fragments":["switched"]},{"Key":"Also switched","Fragments":["to"]},{"Key":"to std::string.length()","Fragments":["as"]},{"Key":"std::string.length() as","Fragments":["that"]},{"Key":"that better","Fragments":["describes"]},{"Key":"better describes","Fragments":["what"]},{"Key":"describes what","Fragments":["the"]},{"Key":" after","Fragments":["reading"]},{"Key":"just ignore","Fragments":["invalid","any","any","the"]},{"Key":"have thrown","Fragments":["an"]},{"Key":"thrown an","Fragments":["exception"]},{"Key":"exception from","Fragments":["the"]},{"Key":"constructor if","Fragments":["(!bases.count(base))"]},{"Key":"new using","Fragments":["syntax,"]},{"Key":"using syntax,","Fragments":["i'll"]},{"Key":"syntax, i'll","Fragments":["add"]},{"Key":"i'll add","Fragments":["the"]},{"Key":"exception while","Fragments":["i'm"]},{"Key":"while i'm","Fragments":["there"]},{"Key":"new syntax","Fragments":["also"]},{"Key":"syntax also","Fragments":["means"]},{"Key":"also means","Fragments":["i"]},{"Key":"means i","Fragments":["could"]},{"Key":"consistent format","Fragments":["for"]},{"Key":"format for","Fragments":["all"]},{"Key":"all using","Fragments":["and"]},{"Key":"and typedefs,","Fragments":["if"]},{"Key":"typedefs, if","Fragments":["i"]},{"Key":"i wrote:","Fragments":["using"]},{"Key":"wrote: using","Fragments":["string"]},{"Key":"using string","Fragments":["=","length","do","pointers."]},{"Key":"string =","Fragments":["std::string;"]},{"Key":"Yeah I","Fragments":["was","agree","have"]},{"Key":"the validation.","Fragments":["It"]},{"Key":"validation. It","Fragments":["has"]},{"Key":"in count.","Fragments":["Sorry"]},{"Key":"count. Sorry","Fragments":["about"]},{"Key":"So luckily","Fragments":["I"]},{"Key":"luckily I","Fragments":["caught"]},{"Key":"I caught","Fragments":["my"]},{"Key":"you guys","Fragments":["did.","could"]},{"Key":"guys did.","Fragments":["Also,"]},{"Key":"did. Also,","Fragments":["I"]},{"Key":"I covered","Fragments":["an"]},{"Key":"covered an","Fragments":["algorithm-oversight:"]},{"Key":"an algorithm-oversight:","Fragments":["can't"]},{"Key":"algorithm-oversight: can't","Fragments":["forget"]},{"Key":"can't forget","Fragments":["about"]},{"Key":"What you","Fragments":["want"]},{"Key":"want depends","Fragments":["on"]},{"Key":"expect in","Fragments":["case"]},{"Key":"wrong input.","Fragments":["In"]},{"Key":"input. In","Fragments":["the"]},{"Key":"the ['?']","Fragments":["case"]},{"Key":"['?'] case","Fragments":["the"]},{"Key":"return would","Fragments":["be"]},{"Key":"0 (`'\\0'`)","Fragments":["because"]},{"Key":"(`'\\0'`) because","Fragments":["the"]},{"Key":"the constructed","Fragments":["char"]},{"Key":"constructed char","Fragments":["is"]},{"Key":"`at` implementation","Fragments":["it"]},{"Key":"it throws.","Fragments":["But"]},{"Key":"throws. But","Fragments":["that"]},{"Key":"that said","Fragments":["the"]},{"Key":" \u003ccode\u003estd::string","Fragments":["transcription::to_rna(const"]},{"Key":"\u003ccode\u003estd::string transcription::to_rna(const","Fragments":["std::string"]},{"Key":"transcription::to_rna(const std::string","Fragments":["\u0026dna)\u003c/code\u003efunction"]},{"Key":"std::string \u0026dna)\u003c/code\u003efunction","Fragments":["would,"]},{"Key":"\u0026dna)\u003c/code\u003efunction would,","Fragments":["in"]},{"Key":"would, in","Fragments":["the"]},{"Key":"of wrong","Fragments":["elements"]},{"Key":"wrong elements","Fragments":["in"]},{"Key":"input string,","Fragments":["generate","you'd","you'd"]},{"Key":"string, generate","Fragments":["a"]},{"Key":"generate a","Fragments":["wrong","verse"]},{"Key":"wrong output","Fragments":["so"]},{"Key":"output so","Fragments":["I"]},{"Key":"I followed","Fragments":["your","the","some"]},{"Key":"followed your","Fragments":["advice"]},{"Key":"your advice","Fragments":["and","and","and"]},{"Key":"advice and","Fragments":["changed","replaced","change","it"]},{"Key":"and changed","Fragments":["the","how"]},{"Key":"use \u003ccode\u003eat\u003c/code\u003e","Fragments":["and"]},{"Key":"\u003ccode\u003eat\u003c/code\u003e and","Fragments":["throw"]},{"Key":"and throw","Fragments":["in"]},{"Key":"Oops on","Fragments":["not"]},{"Key":"on not","Fragments":["updating"]},{"Key":"not updating","Fragments":["the"]},{"Key":"the includes.","Fragments":["No"]},{"Key":"includes. No","Fragments":["longer"]},{"Key":"No longer","Fragments":["need"]},{"Key":"longer need","Fragments":["iterator","to"]},{"Key":"need iterator","Fragments":["range,"]},{"Key":"iterator range,","Fragments":["but"]},{"Key":"range, but","Fragments":["should","that"]},{"Key":"but should","Fragments":["have"]},{"Key":"have array","Fragments":["-"]},{"Key":"array -","Fragments":["it"]},{"Key":"it builds","Fragments":["on","the"]},{"Key":"builds on","Fragments":["my"]},{"Key":"machine without","Fragments":["it"]},{"Key":"I ultimately","Fragments":["tried"]},{"Key":"ultimately tried","Fragments":["this"]},{"Key":"tried this","Fragments":["exercise","on","and"]},{"Key":"exercise three","Fragments":["ways:"]},{"Key":"three ways:","Fragments":["the"]},{"Key":"ways: the","Fragments":["map"]},{"Key":"int to","Fragments":["vector","cast","avoid"]},{"Key":"to vector","Fragments":["that"]},{"Key":"vector that","Fragments":["the"]},{"Key":"suite makes","Fragments":["obvious;"]},{"Key":"makes obvious;","Fragments":["array"]},{"Key":"obvious; array","Fragments":["of"]},{"Key":"of vectors;","Fragments":["and"]},{"Key":"vectors; and","Fragments":["a"]},{"Key":"single unified","Fragments":["array"]},{"Key":"unified array","Fragments":["of"]},{"Key":"of pairs","Fragments":["of","that","instead","is"]},{"Key":"of grade,name.","Fragments":["This"]},{"Key":"grade,name. This","Fragments":["one"]},{"Key":"one (on","Fragments":["the"]},{"Key":"(on the","Fragments":["left:"]},{"Key":"the left:","Fragments":["array"]},{"Key":"left: array","Fragments":["of"]},{"Key":"of vectors)","Fragments":["won"]},{"Key":"vectors) won","Fragments":["on"]},{"Key":"won on","Fragments":["performance"]},{"Key":"on performance","Fragments":["_and_"]},{"Key":"performance _and_","Fragments":["I"]},{"Key":"_and_ I","Fragments":["actually"]},{"Key":"actually think","Fragments":["it's","this"]},{"Key":"the cleanest","Fragments":["(by","way"]},{"Key":"cleanest (by","Fragments":["a"]},{"Key":"(by a","Fragments":["small"]},{"Key":"small margin),","Fragments":["so"]},{"Key":"margin), so","Fragments":["I"]},{"Key":"include it.","Fragments":["It"]},{"Key":"does change","Fragments":["the"]},{"Key":"semantics of","Fragments":["roster(),"]},{"Key":"of roster(),","Fragments":["though."]},{"Key":"roster(), though.","Fragments":["Namely"]},{"Key":"though. Namely","Fragments":["the"]},{"Key":"Namely the","Fragments":["returned"]},{"Key":"the returned","Fragments":["collection","map.","value:"]},{"Key":"returned collection","Fragments":["will"]},{"Key":"collection will","Fragments":["contain"]},{"Key":"will contain","Fragments":["an"]},{"Key":"contain an","Fragments":["empty"]},{"Key":"empty entry","Fragments":["for"]},{"Key":"entry for","Fragments":["grades"]},{"Key":"grades which","Fragments":["contain"]},{"Key":"which contain","Fragments":["no"]},{"Key":"contain no","Fragments":["students"]},{"Key":"no students","Fragments":["rather"]},{"Key":"students rather","Fragments":["than"]},{"Key":"than not","Fragments":["have",":)"]},{"Key":"entry at","Fragments":["all."]},{"Key":"all side-by-side","Fragments":["along"]},{"Key":"side-by-side along","Fragments":["with"]},{"Key":"the Makefile","Fragments":["and"]},{"Key":"and modified","Fragments":["test","it"]},{"Key":"modified test","Fragments":["suite"]},{"Key":"suite I","Fragments":["used"]},{"Key":"evaluate them,","Fragments":["you"]},{"Key":"them, you","Fragments":["can"]},{"Key":"from [my","Fragments":["repo](https://gitlab.com/jbt/exercism)."]},{"Key":"It surprised","Fragments":["me"]},{"Key":"me how","Fragments":["poorly","to"]},{"Key":"how poorly","Fragments":["the"]},{"Key":"poorly the","Fragments":["unified"]},{"Key":"the unified","Fragments":["vector"]},{"Key":"unified vector","Fragments":["version"]},{"Key":"vector version","Fragments":["performed."]},{"Key":"version performed.","Fragments":["It"]},{"Key":"performed. It","Fragments":["has"]},{"Key":"the fewest","Fragments":["allocations"]},{"Key":"fewest allocations","Fragments":["of"]},{"Key":"allocations of","Fragments":["all,"]},{"Key":"all, and","Fragments":["its"]},{"Key":"its memory","Fragments":["is"]},{"Key":"is relatively","Fragments":["compact"]},{"Key":"relatively compact","Fragments":["so"]},{"Key":"compact so","Fragments":["even"]},{"Key":"so even","Fragments":["though"]},{"Key":"may jump","Fragments":["around"]},{"Key":"jump around","Fragments":["a"]},{"Key":"bit (I","Fragments":["used","used"]},{"Key":"(I used","Fragments":["lower_bound)","a","a"]},{"Key":"used lower_bound)","Fragments":["I"]},{"Key":"lower_bound) I","Fragments":["would've"]},{"Key":"would've expected","Fragments":["it"]},{"Key":"expected it","Fragments":["to"]},{"Key":"be reasonably","Fragments":["friendly"]},{"Key":"reasonably friendly","Fragments":["to"]},{"Key":"friendly to","Fragments":["the"]},{"Key":"the cache.","Fragments":["I"]},{"Key":"cache. I","Fragments":["think"]},{"Key":"was missing","Fragments":["was","a","the"]},{"Key":"missing was","Fragments":["this:"]},{"Key":" $grep","Fragments":["total","'LL.*misses'"]},{"Key":"$grep total","Fragments":["*.speed.mem"]},{"Key":"total *.speed.mem","Fragments":["|"]},{"Key":"*.speed.mem |","Fragments":["cut"]},{"Key":"| cut","Fragments":["-d","-d"]},{"Key":"cut -d","Fragments":["s","."]},{"Key":"-d s","Fragments":["-f"]},{"Key":"s -f","Fragments":["1,5-"]},{"Key":" arrayToVector.s,","Fragments":["64,288,528"]},{"Key":"arrayToVector.s, 64,288,528","Fragments":["bytes"]},{"Key":"64,288,528 bytes","Fragments":["allocated"]},{"Key":" mapToVector.s,","Fragments":["65,119,696"]},{"Key":"mapToVector.s, 65,119,696","Fragments":["bytes"]},{"Key":"65,119,696 bytes","Fragments":["allocated"]},{"Key":" vector.s,","Fragments":["103,753,354"]},{"Key":"vector.s, 103,753,354","Fragments":["bytes"]},{"Key":"103,753,354 bytes","Fragments":["allocated"]},{"Key":"My best","Fragments":["guess"]},{"Key":"best guess","Fragments":["is"]},{"Key":"guess is","Fragments":["that","yes.","there"]},{"Key":"is from","Fragments":["the"]},{"Key":"extra int","Fragments":["per"]},{"Key":"int per","Fragments":["student"]},{"Key":"per student","Fragments":["(rather"]},{"Key":"student (rather","Fragments":["than"]},{"Key":"pointer overhead","Fragments":["being"]},{"Key":"overhead being","Fragments":["per"]},{"Key":"being per","Fragments":["grade"]},{"Key":"per grade","Fragments":["like"]},{"Key":"grade like","Fragments":["it"]},{"Key":"the map).","Fragments":["And"]},{"Key":"map). And","Fragments":["that"]},{"Key":"And that","Fragments":["would","if"]},{"Key":"would lead","Fragments":["to","to","to"]},{"Key":"more cache","Fragments":["misses..."]},{"Key":"cache misses...","Fragments":["to"]},{"Key":"misses... to","Fragments":["quote"]},{"Key":"quote cachegrind's","Fragments":["manual:"]},{"Key":"cachegrind's manual:","Fragments":["\"...the"]},{"Key":"manual: \"...the","Fragments":["last-level"]},{"Key":"\"...the last-level","Fragments":["cache"]},{"Key":"last-level cache","Fragments":["has"]},{"Key":"cache has","Fragments":["the"]},{"Key":"most influence","Fragments":["on"]},{"Key":"influence on","Fragments":["runtime,"]},{"Key":"on runtime,","Fragments":["as"]},{"Key":"runtime, as","Fragments":["it"]},{"Key":"it masks","Fragments":["accesses"]},{"Key":"masks accesses","Fragments":["to"]},{"Key":"accesses to","Fragments":["main"]},{"Key":"to main","Fragments":["memory.\"."]},{"Key":"main memory.\".","Fragments":["So"]},{"Key":"memory.\". So","Fragments":["let's"]},{"Key":"So let's","Fragments":["compare"]},{"Key":"let's compare","Fragments":["those:"]},{"Key":"$grep 'LL.*misses'","Fragments":["*d.cache"]},{"Key":"'LL.*misses' *d.cache","Fragments":["|"]},{"Key":"*d.cache |","Fragments":["cut"]},{"Key":"-d .","Fragments":["-f"]},{"Key":". -f","Fragments":["1,3"]},{"Key":" arrayToVector.cache:==16760==","Fragments":["LLi","LLd","LL"]},{"Key":"arrayToVector.cache:==16760== LLi","Fragments":["misses:"]},{"Key":"LLi misses:","Fragments":["1,912","1,950","1,902"]},{"Key":"arrayToVector.cache:==16760== LLd","Fragments":["misses:"]},{"Key":"LLd misses:","Fragments":["9,053","9,096","9,139"]},{"Key":"misses: 9,053","Fragments":["("]},{"Key":"9,053 (","Fragments":["6,477"]},{"Key":"( 6,477","Fragments":["rd"]},{"Key":"6,477 rd","Fragments":["+"]},{"Key":"rd +","Fragments":["2,576","2,576","2,607","2,607","2,661","2,661"]},{"Key":"+ 2,576","Fragments":["wr)","wr)"]},{"Key":"arrayToVector.cache:==16760== LL","Fragments":["misses:"]},{"Key":"LL misses:","Fragments":["10,965","11,046","11,041"]},{"Key":"misses: 10,965","Fragments":["("]},{"Key":"10,965 (","Fragments":["8,389"]},{"Key":"( 8,389","Fragments":["rd"]},{"Key":"8,389 rd","Fragments":["+"]},{"Key":" mapToVector.cache:==16771==","Fragments":["LLi","LLd","LL"]},{"Key":"mapToVector.cache:==16771== LLi","Fragments":["misses:"]},{"Key":"mapToVector.cache:==16771== LLd","Fragments":["misses:"]},{"Key":"misses: 9,096","Fragments":["("]},{"Key":"9,096 (","Fragments":["6,489"]},{"Key":"( 6,489","Fragments":["rd"]},{"Key":"6,489 rd","Fragments":["+"]},{"Key":"+ 2,607","Fragments":["wr)","wr)"]},{"Key":"mapToVector.cache:==16771== LL","Fragments":["misses:"]},{"Key":"misses: 11,046","Fragments":["("]},{"Key":"11,046 (","Fragments":["8,439"]},{"Key":"( 8,439","Fragments":["rd"]},{"Key":"8,439 rd","Fragments":["+"]},{"Key":" vector.cache:==16851==","Fragments":["LLi","LLd","LL"]},{"Key":"vector.cache:==16851== LLi","Fragments":["misses:"]},{"Key":"vector.cache:==16851== LLd","Fragments":["misses:"]},{"Key":"misses: 9,139","Fragments":["("]},{"Key":"9,139 (","Fragments":["6,478"]},{"Key":"( 6,478","Fragments":["rd"]},{"Key":"6,478 rd","Fragments":["+"]},{"Key":"+ 2,661","Fragments":["wr)","wr)"]},{"Key":"vector.cache:==16851== LL","Fragments":["misses:"]},{"Key":"misses: 11,041","Fragments":["("]},{"Key":"11,041 (","Fragments":["8,380"]},{"Key":"( 8,380","Fragments":["rd"]},{"Key":"8,380 rd","Fragments":["+"]},{"Key":"indeed the","Fragments":["single-vector","reason"]},{"Key":"the single-vector","Fragments":["version"]},{"Key":"single-vector version","Fragments":["has"]},{"Key":"version has","Fragments":["the"]},{"Key":"most LLd","Fragments":["misses,"]},{"Key":"LLd misses,","Fragments":["but"]},{"Key":"misses, but","Fragments":["not"]},{"Key":"an astonishing","Fragments":["number."]},{"Key":"I'd rather","Fragments":["not"]},{"Key":"rather not","Fragments":["blame"]},{"Key":"not blame","Fragments":["my"]},{"Key":"blame my","Fragments":["performance"]},{"Key":"my performance","Fragments":["on"]},{"Key":"performance on","Fragments":["the"]},{"Key":"range adaptors,","Fragments":["but"]},{"Key":"adaptors, but","Fragments":["that"]},{"Key":"could play","Fragments":["a"]},{"Key":"play a","Fragments":["role."]},{"Key":"a role.","Fragments":["In"]},{"Key":"role. In","Fragments":["particular"]},{"Key":"particular for","Fragments":["roster()"]},{"Key":"for roster()","Fragments":["-"]},{"Key":"roster() -","Fragments":["I"]},{"Key":"return by-value","Fragments":["a"]},{"Key":"by-value a","Fragments":["chain"]},{"Key":"of range","Fragments":["adaptors"]},{"Key":"range adaptors","Fragments":["that","cost"]},{"Key":"adaptors that","Fragments":["group"]},{"Key":"that group","Fragments":["the"]},{"Key":"the students","Fragments":["by"]},{"Key":"students by","Fragments":["grade"]},{"Key":"by grade","Fragments":["and"]},{"Key":"and pull","Fragments":["the"]},{"Key":"the int","Fragments":["up"]},{"Key":"int up","Fragments":["to"]},{"Key":"the front","Fragments":["of"]},{"Key":"the group","Fragments":["to"]},{"Key":"group to","Fragments":["make"]},{"Key":"way for","Fragments":["the","these"]},{"Key":"old map","Fragments":["did."]},{"Key":"map did.","Fragments":["And"]},{"Key":"did. And","Fragments":["those"]},{"Key":"those range","Fragments":["adaptors"]},{"Key":"adaptors cost","Fragments":["something..."]},{"Key":"cost something...","Fragments":["how"]},{"Key":"something... how","Fragments":["much"]},{"Key":"course putting","Fragments":["everything"]},{"Key":"putting everything","Fragments":["in"]},{"Key":"single vector","Fragments":["will","of"]},{"Key":"vector will","Fragments":["cause","all"]},{"Key":"cause more","Fragments":["memmove-type"]},{"Key":"more memmove-type","Fragments":["operations."]},{"Key":"memmove-type operations.","Fragments":["You"]},{"Key":"operations. You","Fragments":["add"]},{"Key":"You add","Fragments":["a"]},{"Key":"a kindergartener","Fragments":["and"]},{"Key":"kindergartener and","Fragments":["have"]},{"Key":"to shift","Fragments":["the","everybody's"]},{"Key":"whole school","Fragments":["down"]},{"Key":"school down","Fragments":["one"]},{"Key":"down one","Fragments":["slot."]},{"Key":"one slot.","Fragments":["I"]},{"Key":"slot. I","Fragments":["really"]},{"Key":"major cause,","Fragments":["though,"]},{"Key":"cause, though,","Fragments":["as"]},{"Key":"though, as","Fragments":["bad"]},{"Key":"as bad","Fragments":["as"]},{"Key":"bad as","Fragments":["it"]},{"Key":"may naively","Fragments":["sound."]},{"Key":"another approach","Fragments":["that"]},{"Key":"interesting for","Fragments":["comparison:"]},{"Key":"for comparison:","Fragments":["an"]},{"Key":"comparison: an","Fragments":["array"]},{"Key":"array mapping","Fragments":["grade"]},{"Key":"mapping grade","Fragments":["to"]},{"Key":"grade to","Fragments":["index"]},{"Key":"just names.","Fragments":["There's"]},{"Key":"names. There's","Fragments":["a"]},{"Key":"big part","Fragments":["of"]},{"Key":"that suspects","Fragments":["that"]},{"Key":"suspects that","Fragments":["would"]},{"Key":"the best.","Fragments":["HOWEVER,"]},{"Key":"best. HOWEVER,","Fragments":["I"]},{"Key":"HOWEVER, I","Fragments":["also"]},{"Key":"be notably","Fragments":["uglier"]},{"Key":"notably uglier","Fragments":["code"]},{"Key":"uglier code","Fragments":["and"]},{"Key":"matters a","Fragments":["lot"]},{"Key":"lot to","Fragments":["all","learn."]},{"Key":"of us,","Fragments":["so"]},{"Key":"us, so","Fragments":["I"]},{"Key":"a win","Fragments":["even"]},{"Key":"win even","Fragments":["if"]},{"Key":"did perform","Fragments":["well"]},{"Key":"perform well","Fragments":["(which"]},{"Key":"well (which","Fragments":["I'm"]},{"Key":"not positive","Fragments":["-"]},{"Key":"positive -","Fragments":["not"]},{"Key":"only would","Fragments":["you"]},{"Key":"shift everybody's","Fragments":["name"]},{"Key":"everybody's name","Fragments":["down"]},{"Key":"name down","Fragments":["you'd"]},{"Key":"down you'd","Fragments":["have"]},{"Key":"every higher","Fragments":["grade)."]},{"Key":"do need","Fragments":["to"]},{"Key":"to grant,","Fragments":["though,"]},{"Key":"grant, though,","Fragments":["that"]},{"Key":"had overreacted.","Fragments":["That"]},{"Key":"overreacted. That","Fragments":["map"]},{"Key":"That map","Fragments":["is"]},{"Key":"as painful","Fragments":["as"]},{"Key":"painful as","Fragments":["I"]},{"Key":"I suspected.","Fragments":["My"]},{"Key":"suspected. My","Fragments":["apologies"]},{"Key":"apologies all","Fragments":["around."]},{"Key":"using ULL","Fragments":["and"]},{"Key":"ULL and","Fragments":["put"]},{"Key":"and put","Fragments":["a","those","in"]},{"Key":"little explanation","Fragments":["of"]},{"Key":"my hex","Fragments":["shenanigans."]},{"Key":"Oops, forgot","Fragments":["to"]},{"Key":"remove #include","Fragments":["string."]},{"Key":"#include string.","Fragments":["It"]},{"Key":"It had","Fragments":["been","been"]},{"Key":"the template","Fragments":["my","substitution"]},{"Key":"template my","Fragments":["script"]},{"Key":"my script","Fragments":["starts"]},{"Key":"script starts","Fragments":["me"]},{"Key":"starts me","Fragments":["from."]},{"Key":"with @lilly","Fragments":["that"]},{"Key":"@lilly that","Fragments":["bringing"]},{"Key":"that bringing","Fragments":["*both*"]},{"Key":"bringing *both*","Fragments":["`std`and"]},{"Key":"*both* `std`and","Fragments":["`boost`into"]},{"Key":"`std`and `boost`into","Fragments":["the"]},{"Key":"`boost`into the","Fragments":["global"]},{"Key":"not ideaI.","Fragments":["Actually"]},{"Key":"ideaI. Actually","Fragments":["I"]},{"Key":"it distracting","Fragments":["to"]},{"Key":"distracting to","Fragments":["*not*","the"]},{"Key":"to *not*","Fragments":["have"]},{"Key":"*not* have","Fragments":["the"]},{"Key":"usual `std::`","Fragments":["prefixes;"]},{"Key":"`std::` prefixes;","Fragments":["so"]},{"Key":"prefixes; so","Fragments":["for"]},{"Key":"so for","Fragments":["me"]},{"Key":"the readbility","Fragments":["is"]},{"Key":"readbility is","Fragments":["degraded."]},{"Key":"a general","Fragments":["note,","C++"]},{"Key":"general note,","Fragments":["have"]},{"Key":"note, have","Fragments":["you"]},{"Key":"`regex` for","Fragments":["this"]},{"Key":"this task?","Fragments":["You're"]},{"Key":"task? You're","Fragments":["performing"]},{"Key":"You're performing","Fragments":["quite"]},{"Key":"performing quite","Fragments":["a"]},{"Key":"few transformations","Fragments":["to"]},{"Key":"transformations to","Fragments":["extract"]},{"Key":"the words,","Fragments":["but","I"]},{"Key":"words, but","Fragments":["a"]},{"Key":"a `regex`","Fragments":["can"]},{"Key":"`regex` can","Fragments":["do"]},{"Key":"On some","Fragments":["less-common"]},{"Key":"some less-common","Fragments":["compilers"]},{"Key":"less-common compilers","Fragments":["(like"]},{"Key":"compilers (like","Fragments":["sunCC)"]},{"Key":"(like sunCC)","Fragments":["it's"]},{"Key":"sunCC) it's","Fragments":["not"]},{"Key":"100% identical.","Fragments":["static"]},{"Key":"identical. static","Fragments":["and"]},{"Key":"static and","Fragments":["inline"]},{"Key":"and inline","Fragments":["change"]},{"Key":"inline change","Fragments":["the"]},{"Key":"the linkage,","Fragments":["the","unlike"]},{"Key":"linkage, the","Fragments":["anonymous"]},{"Key":"namespace only","Fragments":["changes"]},{"Key":"only changes","Fragments":["the"]},{"Key":"name mangling","Fragments":["(to","and","to"]},{"Key":"mangling (to","Fragments":["make"]},{"Key":"(to make","Fragments":["it"]},{"Key":"it virtually","Fragments":["impossible"]},{"Key":"virtually impossible","Fragments":["to"]},{"Key":"predict and","Fragments":["different"]},{"Key":"and different","Fragments":["between","from"]},{"Key":"different between","Fragments":["each"]},{"Key":"between each","Fragments":["translation"]},{"Key":"each translation","Fragments":["unit)."]},{"Key":"translation unit).","Fragments":["So"]},{"Key":"unit). So","Fragments":["the"]},{"Key":"main difference","Fragments":["is"]},{"Key":"that anon","Fragments":["ns"]},{"Key":"anon ns","Fragments":["on","does"]},{"Key":"ns on","Fragments":["those"]},{"Key":"on those","Fragments":["systems"]},{"Key":"those systems","Fragments":["will"]},{"Key":"systems will","Fragments":["cause"]},{"Key":"linker to","Fragments":["perform","pointlessly"]},{"Key":"perform some","Fragments":["very"]},{"Key":"some very","Fragments":["unnecessary","useful"]},{"Key":"very unnecessary","Fragments":["work"]},{"Key":"unnecessary work","Fragments":["(recording"]},{"Key":"work (recording","Fragments":["exported"]},{"Key":"(recording exported","Fragments":["symbols"]},{"Key":"exported symbols","Fragments":["that"]},{"Key":"symbols that","Fragments":["shouldn't"]},{"Key":"that shouldn't","Fragments":["be","change."]},{"Key":"be exported","Fragments":["just"]},{"Key":"exported just","Fragments":["in"]},{"Key":"case someone","Fragments":["else"]},{"Key":"else happens","Fragments":["to"]},{"Key":"the mangling","Fragments":["and"]},{"Key":"mangling and","Fragments":["calls","privatizes"]},{"Key":"and calls","Fragments":["it"]},{"Key":" IIUC","Fragments":["on"]},{"Key":"IIUC on","Fragments":["most"]},{"Key":"on most","Fragments":["modern"]},{"Key":"most modern","Fragments":["compilers"]},{"Key":"modern compilers","Fragments":["anon","being"]},{"Key":"compilers anon","Fragments":["ns"]},{"Key":"ns does","Fragments":["both"]},{"Key":"does both","Fragments":["-"]},{"Key":"both -","Fragments":["name"]},{"Key":"- name","Fragments":["mangling"]},{"Key":"and privatizes","Fragments":["the"]},{"Key":"privatizes the","Fragments":["linkage."]},{"Key":"the theory","Fragments":["that"]},{"Key":"that inline","Fragments":["may"]},{"Key":"inline may","Fragments":["have"]},{"Key":"a gentle","Fragments":["suggestion"]},{"Key":"gentle suggestion","Fragments":["to"]},{"Key":"compiler that","Fragments":["maybe"]},{"Key":"inline the","Fragments":["function,"]},{"Key":"that virtually","Fragments":["no"]},{"Key":"virtually no","Fragments":["compiler"]},{"Key":"no compiler","Fragments":["actually","I've"]},{"Key":"compiler actually","Fragments":["respects"]},{"Key":"actually respects","Fragments":["that."]},{"Key":"wrap function","Fragments":["in"]},{"Key":"in lambdas","Fragments":["you"]},{"Key":"lambdas you","Fragments":["can","no"]},{"Key":"use then","Fragments":["directly..."]},{"Key":" text.erase(remove_if(text.begin(),","Fragments":["text.end(),"]},{"Key":"text.erase(remove_if(text.begin(), text.end(),","Fragments":["std::isspace),"]},{"Key":"text.end(), std::isspace),","Fragments":["text.end());"]},{"Key":"also !isaplha","Fragments":["is"]},{"Key":"!isaplha is","Fragments":["more"]},{"Key":"point. Clearly","Fragments":["just"]},{"Key":"Clearly just","Fragments":["got"]},{"Key":"just got","Fragments":["an"]},{"Key":"an a","Fragments":["roll"]},{"Key":"a roll","Fragments":["there."]},{"Key":" ```mapLetters[c]```","Fragments":["Yeah"]},{"Key":"```mapLetters[c]``` Yeah","Fragments":["i"]},{"Key":"Yeah i","Fragments":["know,"]},{"Key":"i know,","Fragments":["i"]},{"Key":"know, i","Fragments":["wrote"]},{"Key":"code before","Fragments":["i"]},{"Key":"before i","Fragments":["see"]},{"Key":"your comments,","Fragments":["and"]},{"Key":"comments, and","Fragments":["didn't"]},{"Key":"didn't backport","Fragments":["them.."]},{"Key":"True, but","Fragments":["it"]},{"Key":"prevents a","Fragments":["func"]},{"Key":"a func","Fragments":["call"]},{"Key":"func call","Fragments":["and"]},{"Key":"call and","Fragments":["a","spent"]},{"Key":"a string-conversation","Fragments":["copy"]},{"Key":"string-conversation copy","Fragments":["(well"]},{"Key":"copy (well","Fragments":["okay"]},{"Key":"(well okay","Fragments":["it's"]},{"Key":"okay it's","Fragments":["penny"]},{"Key":"it's penny","Fragments":["wise"]},{"Key":"penny wise","Fragments":["in"]},{"Key":"wise in","Fragments":["this"]},{"Key":"call often","Fragments":["```matches```,"]},{"Key":"often ```matches```,","Fragments":["it"]},{"Key":"```matches```, it","Fragments":["could"]},{"Key":"Yes you","Fragments":["right,"]},{"Key":"you right,","Fragments":["this"]},{"Key":"right, this","Fragments":["comes"]},{"Key":"this comes","Fragments":["from"]},{"Key":"fact i","Fragments":["don't"]},{"Key":"lowercase name","Fragments":["to"]},{"Key":"my classes.","Fragments":["You"]},{"Key":"classes. You","Fragments":["know..."]},{"Key":"You know...","Fragments":["habits!"]},{"Key":"not possible","Fragments":["to","because"]},{"Key":"in `downcase()`","Fragments":["without"]},{"Key":"`downcase()` without","Fragments":["using"]},{"Key":"a significantly","Fragments":["different"]},{"Key":"significantly different","Fragments":["approach,"]},{"Key":"different approach,","Fragments":["but"]},{"Key":"more fastidious","Fragments":["in"]},{"Key":"fastidious in","Fragments":["checking"]},{"Key":"histogram contents,","Fragments":["avoiding"]},{"Key":"contents, avoiding","Fragments":["a"]},{"Key":"avoiding a","Fragments":["copy"]},{"Key":"copy save","Fragments":["for"]},{"Key":"save for","Fragments":["when"]},{"Key":" `downcase(m.str())`","Fragments":["creates"]},{"Key":"`downcase(m.str())` creates","Fragments":["a"]},{"Key":"the `str()`","Fragments":["function,"]},{"Key":"`str()` function,","Fragments":["passes"]},{"Key":"function, passes","Fragments":["it"]},{"Key":"passes it","Fragments":["to"]},{"Key":"to `downcase()`,","Fragments":["which"]},{"Key":"`downcase()`, which","Fragments":["copies"]},{"Key":"which copies","Fragments":["the"]},{"Key":"copies the","Fragments":["string,"]},{"Key":"then manipulates","Fragments":["the"]},{"Key":"manipulates the","Fragments":["copy."]},{"Key":"the copy.","Fragments":["It"]},{"Key":"copy. It","Fragments":["would"]},{"Key":"less work","Fragments":["to"]},{"Key":"to manipulate","Fragments":["the"]},{"Key":"manipulate the","Fragments":["original","internal","data."]},{"Key":"original string;","Fragments":["that"]},{"Key":"string; that","Fragments":["returned"]},{"Key":"returned from","Fragments":["`str()`:"]},{"Key":"std::string downcase(std::string","Fragments":["s)"]},{"Key":"downcase(std::string s)","Fragments":["{"]},{"Key":" std::transform(begin(s),","Fragments":["end(s),"]},{"Key":"std::transform(begin(s), end(s),","Fragments":["begin(s),"]},{"Key":"end(s), begin(s),","Fragments":["[](char"]},{"Key":"begin(s), [](char","Fragments":["const\u0026"]},{"Key":"[](char const\u0026","Fragments":["c)"]},{"Key":"const\u0026 c)","Fragments":["{"]},{"Key":"Here `downcase()`","Fragments":["takes"]},{"Key":"`downcase()` takes","Fragments":["its"]},{"Key":"call `downcase()`","Fragments":["with"]},{"Key":"`downcase()` with","Fragments":["an"]},{"Key":"std::string s","Fragments":["="]},{"Key":"\u003c\u003c downcase(s)","Fragments":["\u003c\u003c"]},{"Key":"downcase(s) \u003c\u003c","Fragments":["'\\n';"]},{"Key":"\u003c\u003c s","Fragments":["\u003c\u003c"]},{"Key":"s \u003c\u003c","Fragments":["'\\n';"]},{"Key":"then `downcase()`","Fragments":["will"]},{"Key":"`downcase()` will","Fragments":["internally"]},{"Key":"will internally","Fragments":["make"]},{"Key":"internally make","Fragments":["a"]},{"Key":"parameter before","Fragments":["transforming"]},{"Key":"before transforming","Fragments":["it."]},{"Key":"transforming it.","Fragments":["The"]},{"Key":"for you:","Fragments":["it","it"]},{"Key":"you: it","Fragments":["sees","seems"]},{"Key":"sees a","Fragments":["pass-by-value,"]},{"Key":"a pass-by-value,","Fragments":["sees"]},{"Key":"pass-by-value, sees","Fragments":["`s`"]},{"Key":"sees `s`","Fragments":["might"]},{"Key":"`s` might","Fragments":["be"]},{"Key":"used later","Fragments":["on"]},{"Key":"on down","Fragments":["the"]},{"Key":"line so","Fragments":["it"]},{"Key":"be changed,","Fragments":["and"]},{"Key":"changed, and","Fragments":["create"]},{"Key":"\u003c\u003c downcase(\"Hello\")","Fragments":["\u003c\u003c"]},{"Key":"downcase(\"Hello\") \u003c\u003c","Fragments":["'\\n';"]},{"Key":"will reason","Fragments":["that"]},{"Key":"the temporary","Fragments":["string","here."]},{"Key":"string it","Fragments":["creates"]},{"Key":"it creates","Fragments":["out","everything."]},{"Key":"creates out","Fragments":["of"]},{"Key":"of \"Hello\"","Fragments":["will"]},{"Key":"\"Hello\" will","Fragments":["not"]},{"Key":"used after","Fragments":["the"]},{"Key":"from `downcase()`,","Fragments":["and"]},{"Key":"`downcase()`, and","Fragments":["so"]},{"Key":"same temporary","Fragments":["object"]},{"Key":"be working","Fragments":["with"]},{"Key":"with inside","Fragments":["`downcase()`."]},{"Key":"inside `downcase()`.","Fragments":["For"]},{"Key":"`downcase()`. For","Fragments":["`downcase()`,"]},{"Key":"For `downcase()`,","Fragments":["who"]},{"Key":"`downcase()`, who","Fragments":["asks"]},{"Key":"who asks","Fragments":["for"]},{"Key":"asks for","Fragments":["a","a"]},{"Key":"dedicated object","Fragments":["to"]},{"Key":"with (that's","Fragments":["what"]},{"Key":"(that's what","Fragments":["passing"]},{"Key":"what passing","Fragments":["by"]},{"Key":"value means),","Fragments":["everything"]},{"Key":"means), everything","Fragments":["is"]},{"Key":"as usual:","Fragments":["the"]},{"Key":"usual: the","Fragments":["parameter"]},{"Key":"indeed dedicated","Fragments":["for"]},{"Key":"dedicated for","Fragments":["`downcase()`"]},{"Key":"for `downcase()`","Fragments":["--"]},{"Key":"`downcase()` --","Fragments":["no"]},{"Key":"-- no","Fragments":["one"]},{"Key":"one else","Fragments":["has"]},{"Key":"else has","Fragments":["access"]},{"Key":"has access","Fragments":["to"]},{"Key":"at will.","Fragments":["A"]},{"Key":"will. A","Fragments":["copy"]},{"Key":"A copy","Fragments":["saved."]},{"Key":"mine. I","Fragments":["didn't"]},{"Key":"expressions when","Fragments":["I"]},{"Key":"all messed","Fragments":["up"]},{"Key":"messed up","Fragments":["with","so"]},{"Key":"things the","Fragments":["hard"]},{"Key":"sure `std::vector\u003cT","Fragments":["const\u003e`"]},{"Key":"`std::vector\u003cT const\u003e`","Fragments":["is"]},{"Key":"const\u003e` is","Fragments":["allowed."]},{"Key":"is allowed.","Fragments":["I"]},{"Key":"allowed. I","Fragments":["mean,"]},{"Key":"just tried","Fragments":["it","to","it","this"]},{"Key":"with clang","Fragments":["3.6.1"]},{"Key":"clang 3.6.1","Fragments":["and"]},{"Key":"3.6.1 and","Fragments":["it"]},{"Key":"compiles and","Fragments":["passes"]},{"Key":"and passes","Fragments":["the","all"]},{"Key":"is correct","Fragments":["C++,","but"]},{"Key":"correct C++,","Fragments":["in"]},{"Key":"of container","Fragments":["requirements"]},{"Key":"container requirements","Fragments":["on"]},{"Key":"requirements on","Fragments":["T."]},{"Key":"a `std::map`","Fragments":["is"]},{"Key":"`std::map` is","Fragments":["an"]},{"Key":"an overkill;","Fragments":["a"]},{"Key":"overkill; a","Fragments":["primitive"]},{"Key":"primitive array","Fragments":["or"]},{"Key":"a `std::array`","Fragments":["would"]},{"Key":"`std::array` would","Fragments":["do"]},{"Key":"do and","Fragments":["probably"]},{"Key":"more efficient;","Fragments":["but"]},{"Key":"efficient; but","Fragments":["wtv"]},{"Key":"if( f()","Fragments":[")"]},{"Key":"f() )","Fragments":["return"]},{"Key":"things slightly","Fragments":["easier"]},{"Key":"slightly easier","Fragments":["and","to","and"]},{"Key":"easier and","Fragments":["arguably","mistakes","removes"]},{"Key":"and arguably","Fragments":["clearer"]},{"Key":"arguably clearer","Fragments":["is"]},{"Key":"clearer is","Fragments":["to"]},{"Key":"write `hey()`","Fragments":["as"]},{"Key":"as something","Fragments":["similar","you","like","like"]},{"Key":"const\u0026 s)","Fragments":["{"]},{"Key":"if( is_silent(s)","Fragments":[")"]},{"Key":"is_silent(s) )","Fragments":["return"]},{"Key":"else if(","Fragments":["is_shouting(s)"]},{"Key":"if( is_shouting(s)","Fragments":[")"]},{"Key":"is_shouting(s) )","Fragments":["return"]},{"Key":" elee","Fragments":["if("]},{"Key":"elee if(","Fragments":["is_question(s)"]},{"Key":"if( is_question(s)","Fragments":[")"]},{"Key":"is_question(s) )","Fragments":["return"]},{"Key":"is arguably","Fragments":["slightly","open"]},{"Key":"arguably slightly","Fragments":["easier"]},{"Key":"big picture,","Fragments":["of"]},{"Key":"picture, of","Fragments":["what"]},{"Key":"what we","Fragments":["are"]},{"Key":"say. What","Fragments":["do"]},{"Key":" Writing","Fragments":["it"]},{"Key":"Writing it","Fragments":["as"]},{"Key":"template *just*","Fragments":["for"]},{"Key":"*just* for","Fragments":["linking"]},{"Key":"for linking","Fragments":["purposes"]},{"Key":"linking purposes","Fragments":["is"]},{"Key":"purposes is","Fragments":["kinda"]},{"Key":"crazy, honestly.","Fragments":["I"]},{"Key":"honestly. I","Fragments":["was"]},{"Key":"the exhaustive","Fragments":["list"]},{"Key":"exhaustive list","Fragments":["of"]},{"Key":"the One","Fragments":["Definition","Definition"]},{"Key":"One Definition","Fragments":["Rule","Rule"]},{"Key":"Definition Rule","Fragments":["errors","is"]},{"Key":"Rule errors","Fragments":["at"]},{"Key":"errors at","Fragments":["link","bottom."]},{"Key":"link time.","Fragments":["inline"]},{"Key":"time. inline","Fragments":["(either"]},{"Key":"inline (either","Fragments":["version)"]},{"Key":"(either version)","Fragments":["is"]},{"Key":"version) is","Fragments":["what"]},{"Key":"recommend in","Fragments":["a"]},{"Key":"place like","Fragments":["this."]},{"Key":"for template","Fragments":["it"]},{"Key":"template it","Fragments":["would"]},{"Key":"be because","Fragments":["you"]},{"Key":"tie your","Fragments":["user"]},{"Key":"your user","Fragments":["into"]},{"Key":"user into","Fragments":["using"]},{"Key":"into using","Fragments":["std::string."]},{"Key":"std::string. That's","Fragments":["why"]},{"Key":"why boost::trim","Fragments":["is"]},{"Key":"boost::trim is","Fragments":["a"]},{"Key":"a template,","Fragments":["by"]},{"Key":"template, by","Fragments":["the"]},{"Key":"way. Feel","Fragments":["free"]},{"Key":"you like,","Fragments":["but"]},{"Key":"like, but","Fragments":["I","it's"]},{"Key":"of mileage","Fragments":["and"]},{"Key":"mileage and","Fragments":["simpler"]},{"Key":"and simpler","Fragments":["code"]},{"Key":"simpler code","Fragments":["out"]},{"Key":"code out","Fragments":["of","of"]},{"Key":"of type-erasure","Fragments":["classes"]},{"Key":"type-erasure classes","Fragments":["like"]},{"Key":"classes like","Fragments":["boost::string_ref"]},{"Key":"like boost::string_ref","Fragments":["(which"]},{"Key":"boost::string_ref (which","Fragments":["IMO"]},{"Key":"(which IMO","Fragments":["doesn't"]},{"Key":"IMO doesn't","Fragments":["implicitly"]},{"Key":"doesn't implicitly","Fragments":["construct"]},{"Key":"implicitly construct","Fragments":["from"]},{"Key":"from as","Fragments":["wide"]},{"Key":"as wide","Fragments":["a"]},{"Key":"wide a","Fragments":["range"]},{"Key":"stuff as","Fragments":["I'd"]},{"Key":"I'd like,","Fragments":["but"]},{"Key":"it's definitely","Fragments":["headed","going","possible."]},{"Key":"definitely headed","Fragments":["the"]},{"Key":"headed the","Fragments":["right"]},{"Key":"did template","Fragments":["on"]},{"Key":"template on","Fragments":["string"]},{"Key":"on string","Fragments":["type,"]},{"Key":"type, you","Fragments":["probably"]},{"Key":"give some","Fragments":["real","pointers"]},{"Key":"some real","Fragments":["thought"]},{"Key":"real thought","Fragments":["as"]},{"Key":"thought as","Fragments":["to"]},{"Key":"to require","Fragments":["of","those"]},{"Key":"require of","Fragments":["the"]},{"Key":"class your","Fragments":["caller"]},{"Key":"does decide","Fragments":["to"]},{"Key":"to use.","Fragments":["If","Check","Ok,"]},{"Key":"use. If","Fragments":["you"]},{"Key":"try hard","Fragments":["enough"]},{"Key":"hard enough","Fragments":["you"]},{"Key":"enough you","Fragments":["can"]},{"Key":"just they","Fragments":["provide"]},{"Key":"they provide","Fragments":["a","enough"]},{"Key":"end() which","Fragments":["return"]},{"Key":"iterators to","Fragments":["something"]},{"Key":"is comparable","Fragments":["to"]},{"Key":"comparable to","Fragments":["char"]},{"Key":"char ...","Fragments":["and"]},{"Key":"require those","Fragments":["iterators"]},{"Key":"those iterators","Fragments":["be"]},{"Key":"iterators be","Fragments":["RandomAccess,"]},{"Key":"be RandomAccess,","Fragments":["but"]},{"Key":"RandomAccess, but","Fragments":["maybe"]},{"Key":"maybe not.","Fragments":["I"]},{"Key":"do it...","Fragments":["but"]},{"Key":"it... but","Fragments":["have"]},{"Key":"have fun","Fragments":[";)"]},{"Key":" all","Fragments":["this"]},{"Key":"this mess","Fragments":["in"]},{"Key":"mess in","Fragments":["`plus()`"]},{"Key":"in `plus()`","Fragments":["and"]},{"Key":"`plus()` and","Fragments":["`minus()`"]},{"Key":"and `minus()`","Fragments":["still"]},{"Key":"`minus()` still","Fragments":["looks"]},{"Key":"still looks","Fragments":["like"]},{"Key":"like rainbows","Fragments":["compared"]},{"Key":"rainbows compared","Fragments":["to"]},{"Key":"to time","Fragments":["arithmetics"]},{"Key":"time arithmetics","Fragments":["with"]},{"Key":"arithmetics with","Fragments":["boost::date_time..","a"]},{"Key":"up somewhere","Fragments":["around"]},{"Key":"somewhere around","Fragments":["the"]},{"Key":"the construction","Fragments":["of"]},{"Key":"construction of","Fragments":["a","a"]},{"Key":"a gregorian","Fragments":["date","date"]},{"Key":"gregorian date","Fragments":["for","would","that"]},{"Key":"date for","Fragments":["the"]},{"Key":"a ptime","Fragments":["for"]},{"Key":"ptime for","Fragments":["the"]},{"Key":"of arithmetics","Fragments":["with"]},{"Key":"a time_duration.","Fragments":["Oh"]},{"Key":"time_duration. Oh","Fragments":["and"]},{"Key":"Oh and","Fragments":["a"]},{"Key":"fixed bicycle","Fragments":["flat"]},{"Key":"bicycle flat","Fragments":["tire,"]},{"Key":"flat tire,","Fragments":["a"]},{"Key":"tire, a","Fragments":["mopped"]},{"Key":"a mopped","Fragments":["bedroom"]},{"Key":"mopped bedroom","Fragments":["floor"]},{"Key":"bedroom floor","Fragments":["and"]},{"Key":"floor and","Fragments":["a"]},{"Key":"a shaved","Fragments":["yak,"]},{"Key":"shaved yak,","Fragments":["also"]},{"Key":"yak, also","Fragments":["for"]},{"Key":"also for","Fragments":["the"]},{"Key":"of ...","Fragments":["somethin,"]},{"Key":"... somethin,","Fragments":["don't"]},{"Key":"somethin, don't","Fragments":["remember,"]},{"Key":"don't remember,","Fragments":["but"]},{"Key":"remember, but","Fragments":["ultimately"]},{"Key":"but ultimately","Fragments":["for"]},{"Key":"ultimately for","Fragments":["adding"]},{"Key":"for adding","Fragments":["and"]},{"Key":"adding and","Fragments":["subtracting"]},{"Key":"and subtracting","Fragments":["time."]},{"Key":"tests though,","Fragments":["so"]},{"Key":"also felt","Fragments":["I","like"]},{"Key":"felt I","Fragments":["had","could"]},{"Key":"test, for","Fragments":["subtracting"]},{"Key":"for subtracting","Fragments":["more"]},{"Key":"subtracting more","Fragments":["than"]},{"Key":"than 24","Fragments":["hours."]},{"Key":"if( str","Fragments":["=="]},{"Key":"str ==","Fragments":["\"\""]},{"Key":"if( str.empty()","Fragments":[")"]},{"Key":"runtime difference","Fragments":["between"]},{"Key":"the two.","Fragments":["It"]},{"Key":"two. It","Fragments":["looks"]},{"Key":"former unnecessarily","Fragments":["constructs"]},{"Key":"unnecessarily constructs","Fragments":["a"]},{"Key":"temporary for","Fragments":["the"]},{"Key":"the comparison,","Fragments":["but"]},{"Key":"fact there","Fragments":["is"]},{"Key":"ovelroad of","Fragments":["`operator==()`"]},{"Key":"of `operator==()`","Fragments":["for"]},{"Key":"`operator==()` for","Fragments":["`std::string`"]},{"Key":"for `std::string`","Fragments":["and"]},{"Key":"`std::string` and","Fragments":["`char*`,"]},{"Key":"and `char*`,","Fragments":["exactly"]},{"Key":"`char*`, exactly","Fragments":["to"]},{"Key":"exactly to","Fragments":["avoid"]},{"Key":"if( str.at(str.length()","Fragments":["-"]},{"Key":"str.at(str.length() -","Fragments":["1)"]},{"Key":"if( str.back()","Fragments":["=="]},{"Key":"str.back() ==","Fragments":["'?'"]},{"Key":" it's","Fragments":["equivalent","a"]},{"Key":"to `str[str.size()-1]`,","Fragments":["meaning"]},{"Key":"`str[str.size()-1]`, meaning","Fragments":["it's"]},{"Key":"meaning it's","Fragments":["faster"]},{"Key":"it's faster","Fragments":["than"]},{"Key":"than `at()`","Fragments":["but"]},{"Key":"`at()` but","Fragments":["(and)"]},{"Key":"but (and)","Fragments":["won't"]},{"Key":"(and) won't","Fragments":["throw."]},{"Key":"The const","Fragments":["and"]},{"Key":"perhaps more","Fragments":["importantly"]},{"Key":"the \u0026.","Fragments":["The"]},{"Key":"\u0026. The","Fragments":["\u0026"]},{"Key":"The \u0026","Fragments":["says"]},{"Key":"\u0026 says","Fragments":["you","\"this"]},{"Key":"says you","Fragments":["want"]},{"Key":"caller's copy","Fragments":["of"]},{"Key":"string. Without","Fragments":["it"]},{"Key":"the \"value\"","Fragments":["-"]},{"Key":"\"value\" -","Fragments":["an"]},{"Key":"actual string","Fragments":["gets","trim()"]},{"Key":"string gets","Fragments":["passed"]},{"Key":"gets passed","Fragments":["in"]},{"Key":"different object","Fragments":["than"]},{"Key":"object than","Fragments":["the"]},{"Key":"caller's string.","Fragments":["Then"]},{"Key":"string. Then","Fragments":["you"]},{"Key":"Then you","Fragments":["may","can","can","would","don't"]},{"Key":"may modify","Fragments":["it"]},{"Key":"do whatever","Fragments":["you"]},{"Key":"like and","Fragments":["the","when"]},{"Key":"caller will","Fragments":["not"]},{"Key":"worth I'm","Fragments":["not"]},{"Key":"sure it","Fragments":["makes","sacrifices","is","matters"]},{"Key":"whole ton","Fragments":["of"]},{"Key":"of difference.","Fragments":["It's"]},{"Key":"difference. It's","Fragments":["probably"]},{"Key":"isn't first","Fragments":["principles,"]},{"Key":"first principles,","Fragments":["as"]},{"Key":"principles, as","Fragments":["the"]},{"Key":"code ...","Fragments":["\u003e\u003c"]},{"Key":"The basic","Fragments":["idea","algorithm:"]},{"Key":"basic idea","Fragments":["is","is"]},{"Key":"the summation","Fragments":["of"]},{"Key":"then generalizing","Fragments":["that"]},{"Key":"generalizing that","Fragments":["for"]},{"Key":"second part","Fragments":["of"]},{"Key":"The generalization,","Fragments":["with"]},{"Key":"generalization, with","Fragments":["all"]},{"Key":"intermediate capturing","Fragments":["of"]},{"Key":"capturing of","Fragments":["results,"]},{"Key":"of results,","Fragments":["is"]},{"Key":"results, is","Fragments":["what"]},{"Key":"what took","Fragments":["me"]},{"Key":"much code.","Fragments":["Is"]},{"Key":"code. Is","Fragments":["there"]},{"Key":"to shrink","Fragments":["this"]},{"Key":"shrink this","Fragments":["or"]},{"Key":"this or","Fragments":["express"]},{"Key":"or express","Fragments":["it"]},{"Key":"express it","Fragments":["better?"]},{"Key":"did try","Fragments":["to"]},{"Key":"the math,","Fragments":["but"]},{"Key":"math, but","Fragments":["hit"]},{"Key":"but hit","Fragments":["a"]},{"Key":"a wall","Fragments":["because"]},{"Key":"wall because","Fragments":["of"]},{"Key":"of integer","Fragments":["division:"]},{"Key":"integer division:","Fragments":["`k*m/k`"]},{"Key":"division: `k*m/k`","Fragments":["should"]},{"Key":"`k*m/k` should","Fragments":["be"]},{"Key":"be equal","Fragments":["to"]},{"Key":"to `m`,","Fragments":["..."]},{"Key":"`m`, ...","Fragments":["except"]},{"Key":"... except","Fragments":["this"]},{"Key":"except this","Fragments":["is"]},{"Key":"is integer","Fragments":["division."]},{"Key":"integer division.","Fragments":["So"]},{"Key":"division. So","Fragments":["for"]},{"Key":"for `m\u003ck`,","Fragments":["`m\u003e0`,"]},{"Key":"`m\u003ck`, `m\u003e0`,","Fragments":["we"]},{"Key":"`m\u003e0`, we","Fragments":["have"]},{"Key":"have `m/k=0`","Fragments":["and"]},{"Key":"`m/k=0` and","Fragments":["the"]},{"Key":"entire expression","Fragments":["is"]},{"Key":"is 0.","Fragments":["Simplifying"]},{"Key":"0. Simplifying","Fragments":["the"]},{"Key":"Simplifying the","Fragments":["expression"]},{"Key":"expression to","Fragments":["`m`"]},{"Key":"to `m`","Fragments":["(recall"]},{"Key":"`m` (recall","Fragments":["`m\u003e0`)"]},{"Key":"(recall `m\u003e0`)","Fragments":["would"]},{"Key":"`m\u003e0`) would","Fragments":["give"]},{"Key":"give an","Fragments":["incorrect"]},{"Key":"an incorrect","Fragments":["result...","usage"]},{"Key":"of hoping","Fragments":["someone"]},{"Key":"hoping someone","Fragments":["calls"]},{"Key":"calls me","Fragments":["out"]},{"Key":" Seriously,","Fragments":["though,"]},{"Key":"Seriously, though,","Fragments":["the"]},{"Key":"though, the","Fragments":["most"]},{"Key":"most expensive","Fragments":["thing"]},{"Key":"expensive thing","Fragments":["you'd"]},{"Key":"thing you'd","Fragments":["be"]},{"Key":"be skipping","Fragments":["over"]},{"Key":"skipping over","Fragments":["(normally)"]},{"Key":"over (normally)","Fragments":["is"]},{"Key":"(normally) is","Fragments":["modulo"]},{"Key":"is modulo","Fragments":["on"]},{"Key":"modulo on","Fragments":["a"]},{"Key":"a register.","Fragments":["I'd"]},{"Key":"register. I'd","Fragments":["bet"]},{"Key":"bet this","Fragments":["insanely"]},{"Key":"this insanely","Fragments":["simplistic"]},{"Key":"insanely simplistic","Fragments":["function"]},{"Key":"simplistic function","Fragments":["takes"]},{"Key":"function takes","Fragments":["no"]},{"Key":"takes no","Fragments":["more","time"]},{"Key":"than twice","Fragments":["the"]},{"Key":"twice the","Fragments":["runtime"]},{"Key":"your optimized","Fragments":["version"]},{"Key":"optimized version","Fragments":["for","that"]},{"Key":"any single-call","Fragments":["program"]},{"Key":"single-call program","Fragments":["(not"]},{"Key":"program (not","Fragments":["gonna"]},{"Key":"(not gonna","Fragments":["think"]},{"Key":"gonna think","Fragments":["about"]},{"Key":"about memoization),","Fragments":["at"]},{"Key":"memoization), at","Fragments":["least"]},{"Key":"least on","Fragments":["modernish"]},{"Key":"on modernish","Fragments":["hardware"]},{"Key":"modernish hardware","Fragments":["(where"]},{"Key":"hardware (where","Fragments":["the"]},{"Key":"is beginning","Fragments":["to"]},{"Key":"over instructions","Fragments":["executed)."]},{"Key":"Yes, and","Fragments":["your"]},{"Key":"comment points","Fragments":["that"]},{"Key":"points that","Fragments":["out."]},{"Key":"that out.","Fragments":["+1"]},{"Key":"missing something,","Fragments":["but..."]},{"Key":"something, but...","Fragments":["If"]},{"Key":"but... If","Fragments":["leaving"]},{"Key":"If leaving","Fragments":["static"]},{"Key":"leaving static","Fragments":["off"]},{"Key":"static off","Fragments":["of"]},{"Key":"of cleanKey()","Fragments":["would"]},{"Key":"cleanKey() would","Fragments":["lead","be"]},{"Key":"a linking","Fragments":["error"]},{"Key":"linking error","Fragments":["then"]},{"Key":"error then","Fragments":["words()"]},{"Key":"then words()","Fragments":["would"]},{"Key":"words() would","Fragments":["have"]},{"Key":"same problem,","Fragments":["would"]},{"Key":"problem, would","Fragments":["it"]},{"Key":"Rule is","Fragments":["that"]},{"Key":"single definition,","Fragments":["unless"]},{"Key":"definition, unless","Fragments":["all"]},{"Key":"unless all","Fragments":["definitions"]},{"Key":"all definitions","Fragments":["are"]},{"Key":"definitions are","Fragments":["equal.","only"]},{"Key":"are equal.","Fragments":["Which"]},{"Key":"equal. Which","Fragments":["is"]},{"Key":"why code","Fragments":["in"]},{"Key":"files (even","Fragments":["header"]},{"Key":"(even header","Fragments":["files"]},{"Key":"files shared","Fragments":["between"]},{"Key":"shared between","Fragments":["separately"]},{"Key":"between separately","Fragments":["compiled"]},{"Key":"separately compiled","Fragments":["binaries"]},{"Key":"compiled binaries","Fragments":["(lib,"]},{"Key":"binaries (lib,","Fragments":["dll,"]},{"Key":"(lib, dll,","Fragments":["what"]},{"Key":"dll, what","Fragments":["have"]},{"Key":"have you)","Fragments":["works."]},{"Key":"you) works.","Fragments":["Right"]},{"Key":"works. Right","Fragments":["up"]},{"Key":"Right up","Fragments":["until"]},{"Key":"up until","Fragments":["you"]},{"Key":"difference (which","Fragments":["the"]},{"Key":"(which the","Fragments":["linker"]},{"Key":"linker cannot","Fragments":["detect"]},{"Key":"cannot detect","Fragments":["in"]},{"Key":"detect in","Fragments":["all"]},{"Key":"all cases)","Fragments":["and"]},{"Key":"off. So","Fragments":["even"]},{"Key":"So even","Fragments":["though","if"]},{"Key":"though cleanKey()","Fragments":["would"]},{"Key":"be multiply","Fragments":["defined"]},{"Key":"multiply defined","Fragments":["that"]},{"Key":"defined that","Fragments":["would"]},{"Key":"made `bob`","Fragments":["a"]},{"Key":"`bob` a","Fragments":["namespace"]},{"Key":"namespace (even","Fragments":["if"]},{"Key":"a `public","Fragments":["static`"]},{"Key":"static` method","Fragments":["before)."]},{"Key":" Improved","Fragments":["a"]},{"Key":"Improved a","Fragments":["bit"]},{"Key":"bit from","Fragments":["my"]},{"Key":"- Using","Fragments":["string::length()"]},{"Key":"Using string::length()","Fragments":["instead"]},{"Key":"string::length() instead","Fragments":["of"]},{"Key":"of calculating","Fragments":["the","all"]},{"Key":"the distance","Fragments":["between","incorrectly.","is"]},{"Key":"distance between","Fragments":["the","two"]},{"Key":"- Added","Fragments":["comments.","the"]},{"Key":"you added","Fragments":["the"]},{"Key":"the typedef.","Fragments":["Makes"]},{"Key":"typedef. Makes","Fragments":["it"]},{"Key":"good deal","Fragments":["more"]},{"Key":"deal more","Fragments":["readable."]},{"Key":"pretty solid","Fragments":["solution."]},{"Key":"solid solution.","Fragments":["I"]},{"Key":"used accumulate()","Fragments":["to"]},{"Key":"accumulate() to","Fragments":["handle"]},{"Key":"map inserts.","Fragments":["Quite"]},{"Key":"inserts. Quite","Fragments":["clever."]},{"Key":"are (as","Fragments":["there"]},{"Key":"always are)","Fragments":["things"]},{"Key":"are) things","Fragments":["that"]},{"Key":"the split()","Fragments":["helper"]},{"Key":"split() helper","Fragments":["function."]},{"Key":"function. You'd","Fragments":["get"]},{"Key":"You'd get","Fragments":["the"]},{"Key":"same functionality,","Fragments":["performance,"]},{"Key":"functionality, performance,","Fragments":["and"]},{"Key":"performance, and","Fragments":["(IMO)"]},{"Key":"and (IMO)","Fragments":["readability/encapsulation"]},{"Key":"(IMO) readability/encapsulation","Fragments":["if"]},{"Key":"readability/encapsulation if","Fragments":["you"]},{"Key":"had one","Fragments":["function."]},{"Key":"into boost::tokenizer.","Fragments":["It"]},{"Key":"boost::tokenizer. It","Fragments":["can"]},{"Key":"can accomplish","Fragments":["the"]},{"Key":"string splitting","Fragments":["in"]},{"Key":"splitting in","Fragments":["a"]},{"Key":"of lines,","Fragments":["and"]},{"Key":"lines, and","Fragments":["remove"]},{"Key":"remove most","Fragments":["of"]},{"Key":"punctuation to","Fragments":["boot"]},{"Key":"to boot","Fragments":["(the","up"]},{"Key":"boot (the","Fragments":["'"]},{"Key":"(the '","Fragments":["character"]},{"Key":"character can","Fragments":["still"]},{"Key":"your result","Fragments":["map","variable,"]},{"Key":"result map","Fragments":["a"]},{"Key":"map a","Fragments":["lot."]},{"Key":"lot. It","Fragments":["should","lets"]},{"Key":"- map's","Fragments":["with"]},{"Key":"map's with","Fragments":["numeric"]},{"Key":"with numeric","Fragments":["value"]},{"Key":"types will","Fragments":["default"]},{"Key":"default to","Fragments":["0"]},{"Key":"for non-existent","Fragments":["keys."]},{"Key":"non-existent keys.","Fragments":["So"]},{"Key":"keys. So","Fragments":["you"]},{"Key":"existence in","Fragments":["update()."]},{"Key":"in update().","Fragments":["You"]},{"Key":"update(). You","Fragments":["can"]},{"Key":"You seem","Fragments":["to"]},{"Key":"declaring all","Fragments":["of"]},{"Key":"a function's","Fragments":["variables"]},{"Key":"function's variables","Fragments":["first"]},{"Key":"variables first","Fragments":["and"]},{"Key":"them after.","Fragments":["You"]},{"Key":"after. You","Fragments":["can"]},{"Key":"efficient and,","Fragments":["I"]},{"Key":"and, I","Fragments":["think,"]},{"Key":"think, more","Fragments":["readable"]},{"Key":"readable by","Fragments":["declaring","using"]},{"Key":"by declaring","Fragments":["them","each","them"]},{"Key":"them where","Fragments":["you're"]},{"Key":"them. This","Fragments":["limits"]},{"Key":"This limits","Fragments":["them"]},{"Key":"limits them","Fragments":["to"]},{"Key":"the tightest","Fragments":["scope"]},{"Key":"tightest scope","Fragments":["possible"]},{"Key":"scope possible","Fragments":["and"]},{"Key":"possible and","Fragments":["ensures","use","they","tried"]},{"Key":"and ensures","Fragments":["you"]},{"Key":"ensures you","Fragments":["aren't"]},{"Key":"aren't wasting","Fragments":["cycles"]},{"Key":"wasting cycles","Fragments":["constructing"]},{"Key":"cycles constructing","Fragments":["objects"]},{"Key":"constructing objects","Fragments":["you"]},{"Key":"objects you","Fragments":["don't"]},{"Key":"or could","Fragments":["have"]},{"Key":"have initialized","Fragments":["at"]},{"Key":"initialized at","Fragments":["construction"]},{"Key":"faster and","Fragments":["comparably","much","semantically"]},{"Key":"and comparably","Fragments":["readable"]},{"Key":"comparably readable","Fragments":["to"]},{"Key":"replace size","Fragments":["with"]},{"Key":"size with","Fragments":["the"]},{"Key":"int multiplier","Fragments":["="]},{"Key":"multiplier =","Fragments":["std::pow("]},{"Key":"= std::pow(","Fragments":["3,"]},{"Key":"std::pow( 3,","Fragments":["trinary.size()"]},{"Key":"3, trinary.size()","Fragments":[");//explicitly"]},{"Key":"trinary.size() );//explicitly","Fragments":["int"]},{"Key":");//explicitly int","Fragments":["to"]},{"Key":"cast away","Fragments":["the"]},{"Key":"auto digit","Fragments":[":"]},{"Key":"digit :","Fragments":["trinary"]},{"Key":": trinary","Fragments":[")"]},{"Key":"erg +=","Fragments":["("]},{"Key":"+= (","Fragments":["digit"]},{"Key":"( digit","Fragments":["-"]},{"Key":"digit -","Fragments":["'0'"]},{"Key":"'0' )","Fragments":["*"]},{"Key":") *","Fragments":["("]},{"Key":"* (","Fragments":["multiplier"]},{"Key":"( multiplier","Fragments":["/="]},{"Key":"multiplier /=","Fragments":["3"]},{"Key":"/= 3","Fragments":[");"]},{"Key":"Haven't tested","Fragments":["it"]},{"Key":"that's mathematically","Fragments":["correct."]},{"Key":"mathematically correct.","Fragments":["But"]},{"Key":"correct. But","Fragments":["there"]},{"Key":"But there","Fragments":["should"]},{"Key":"decent solution","Fragments":["up"]},{"Key":"solution up","Fragments":["that"]},{"Key":"that tree,","Fragments":["no?"]},{"Key":" @bethel:","Fragments":["You"]},{"Key":"@bethel: You","Fragments":["already"]},{"Key":"You already","Fragments":["nit-picked"]},{"Key":"already nit-picked","Fragments":["my"]},{"Key":"nit-picked my","Fragments":["[word_count](http://exercism.io/submissions/98ef1c15b8f847148b6e26ec5c695feb),"]},{"Key":"my [word_count](http://exercism.io/submissions/98ef1c15b8f847148b6e26ec5c695feb),","Fragments":["I'd"]},{"Key":"[word_count](http://exercism.io/submissions/98ef1c15b8f847148b6e26ec5c695feb), I'd","Fragments":["be"]},{"Key":"be glad","Fragments":["for"]},{"Key":"glad for","Fragments":["some"]},{"Key":"some nits","Fragments":["here"]},{"Key":"nits here","Fragments":["too."]},{"Key":" @abraham:","Fragments":["By"]},{"Key":"@abraham: By","Fragments":["following"]},{"Key":"By following","Fragments":["some"]},{"Key":"following some","Fragments":["of"]},{"Key":"your advices","Fragments":["and"]},{"Key":"advices and","Fragments":["looking"]},{"Key":"and looking","Fragments":["at","at"]},{"Key":" Wow!","Fragments":["That's","I"]},{"Key":"Wow! That's","Fragments":["looking"]},{"Key":"That's looking","Fragments":["much"]},{"Key":"looking much","Fragments":["cleaner"]},{"Key":"cleaner than","Fragments":["the","having"]},{"Key":"My regex-fu","Fragments":["isn't"]},{"Key":"regex-fu isn't","Fragments":["strong"]},{"Key":"to fully","Fragments":["understand"]},{"Key":"fully understand","Fragments":["that"]},{"Key":"that expression,","Fragments":["but"]},{"Key":"expression, but","Fragments":["I","I"]},{"Key":"gist of","Fragments":["it"]},{"Key":"and I'll","Fragments":["take"]},{"Key":"your word","Fragments":["that"]},{"Key":"this stage","Fragments":["there"]},{"Key":"stage there","Fragments":["are"]},{"Key":"only some","Fragments":["pretty"]},{"Key":"some pretty","Fragments":["pedantic"]},{"Key":"pretty pedantic","Fragments":["things"]},{"Key":"pedantic things","Fragments":["that"]},{"Key":"make little","Fragments":["to"]},{"Key":"to no","Fragments":["functional"]},{"Key":"no functional","Fragments":["difference"]},{"Key":"functional difference","Fragments":["which"]},{"Key":"to \"improve\"","Fragments":["the"]},{"Key":"\"improve\" the","Fragments":["solution."]},{"Key":"the solution.","Fragments":["I","I'm"]},{"Key":"do feel","Fragments":["compelled"]},{"Key":"point them","Fragments":["out..."]},{"Key":"of old-school","Fragments":["()"]},{"Key":"old-school ()","Fragments":["initialization"]},{"Key":"() initialization","Fragments":["and"]},{"Key":"initialization and","Fragments":["new-school"]},{"Key":"and new-school","Fragments":["{}"]},{"Key":"new-school {}","Fragments":["initialization."]},{"Key":"It's preferable","Fragments":["to"]},{"Key":"global begin()/end()","Fragments":["set"]},{"Key":"begin()/end() set","Fragments":["of"]},{"Key":"some places","Fragments":["where"]},{"Key":"places where","Fragments":["you"]},{"Key":"have mutable","Fragments":["objects"]},{"Key":"mutable objects","Fragments":["that"]},{"Key":"about choosing","Fragments":["not"]},{"Key":"choosing not","Fragments":["to"]},{"Key":"use boost.","Fragments":["For"]},{"Key":"boost. For","Fragments":["myself,"]},{"Key":"For myself,","Fragments":["I"]},{"Key":"myself, I","Fragments":["consider","might've"]},{"Key":"of STL++.","Fragments":["Especially"]},{"Key":"STL++. Especially","Fragments":["since"]},{"Key":"Especially since","Fragments":["many"]},{"Key":"since many","Fragments":["features"]},{"Key":"many features","Fragments":["of"]},{"Key":"of today's","Fragments":["STL"]},{"Key":"today's STL","Fragments":["came"]},{"Key":"STL came","Fragments":["straight"]},{"Key":"came straight","Fragments":["out"]},{"Key":"straight out","Fragments":["of"]},{"Key":"of boost.","Fragments":["You've"]},{"Key":"boost. You've","Fragments":["certainly"]},{"Key":"You've certainly","Fragments":["come"]},{"Key":"certainly come","Fragments":["up"]},{"Key":"great solution","Fragments":["here","here"]},{"Key":"solution here","Fragments":["without","-"]},{"Key":"here without","Fragments":["using","specifying"]},{"Key":"using anything","Fragments":["but","other"]},{"Key":"interesting that","Fragments":["you"]},{"Key":"make cipher","Fragments":["a"]},{"Key":"cipher a","Fragments":["function"]},{"Key":"function inside","Fragments":["of","the","a"]},{"Key":"a crypto_square","Fragments":["class","namespace"]},{"Key":"crypto_square class","Fragments":["instead"]},{"Key":"a \"cipher\"","Fragments":["class"]},{"Key":"\"cipher\" class","Fragments":["inside"]},{"Key":"class inside","Fragments":["of"]},{"Key":"crypto_square namespace","Fragments":["(or"]},{"Key":"namespace (or","Fragments":["outer"]},{"Key":"(or outer","Fragments":["class/struct)."]},{"Key":"outer class/struct).","Fragments":["I"]},{"Key":"class/struct). I","Fragments":["don't"]},{"Key":"your size()","Fragments":["function"]},{"Key":"size() function","Fragments":["would"]},{"Key":"probably look","Fragments":["better"]},{"Key":"look better","Fragments":["as","here"]},{"Key":"return std::ceil(","Fragments":["std::sqrt(norm.size())"]},{"Key":"std::ceil( std::sqrt(norm.size())","Fragments":[");"]},{"Key":"std::sqrt(norm.size()) );","Fragments":["unless"]},{"Key":"); unless","Fragments":["there's"]},{"Key":"reason I'm","Fragments":["not"]},{"Key":"not seeing","Fragments":["for"]},{"Key":"seeing for","Fragments":["your"]},{"Key":"your way.","Fragments":["I"]},{"Key":"haven't analyzed","Fragments":["it"]},{"Key":"analyzed it","Fragments":["too"]},{"Key":"too bad","Fragments":["we","the","after"]},{"Key":"bad we","Fragments":["don't"]},{"Key":"a tranform_if,","Fragments":["which"]},{"Key":"tranform_if, which","Fragments":["would"]},{"Key":"would cover","Fragments":["that"]},{"Key":"cover that","Fragments":["loop"]},{"Key":"constructor quite","Fragments":["nicely."]},{"Key":"quite nicely.","Fragments":["I"]},{"Key":"nicely. I","Fragments":["went"]},{"Key":"the route","Fragments":["of","you"]},{"Key":"route of","Fragments":["copy_if"]},{"Key":"of copy_if","Fragments":["and"]},{"Key":"copy_if and","Fragments":["then"]},{"Key":"then a","Fragments":["transform,","week.","copy"]},{"Key":"a transform,","Fragments":["but"]},{"Key":"transform, but","Fragments":["that"]},{"Key":"means looping","Fragments":["over"]},{"Key":"looping over","Fragments":["the","the","the"]},{"Key":"letters _twice_.","Fragments":["You"]},{"Key":"_twice_. You","Fragments":["could"]},{"Key":"could copy_if","Fragments":["on"]},{"Key":"copy_if on","Fragments":["a"]},{"Key":"a transform","Fragments":["iterator/range,"]},{"Key":"transform iterator/range,","Fragments":["but"]},{"Key":"iterator/range, but","Fragments":["I"]},{"Key":"people aren't","Fragments":["comfortable"]},{"Key":"aren't comfortable","Fragments":["with"]},{"Key":"those so","Fragments":["it"]},{"Key":"could arguably","Fragments":["make"]},{"Key":"arguably make","Fragments":["your"]},{"Key":"less readable.","Fragments":["Eh."]},{"Key":"One actual","Fragments":["recommendation,"]},{"Key":" x","Fragments":["+="]},{"Key":"+= y.substr(a,","Fragments":["b);"]},{"Key":"is potentially","Fragments":["less","faster"]},{"Key":"potentially less","Fragments":["peformant"]},{"Key":"less peformant","Fragments":["than"]},{"Key":" x.append(","Fragments":["y,"]},{"Key":"x.append( y,","Fragments":["a,"]},{"Key":"y, a,","Fragments":["b"]},{"Key":"a, b","Fragments":[");"]},{"Key":"in principle","Fragments":["the"]},{"Key":"principle the","Fragments":["first"]},{"Key":"should create","Fragments":["a","a"]},{"Key":"new temporary","Fragments":["string"]},{"Key":"substring just","Fragments":["to"]},{"Key":"it disappear","Fragments":["after"]},{"Key":"disappear after","Fragments":["the"]},{"Key":"the operator+=","Fragments":["call,"]},{"Key":"operator+= call,","Fragments":["but"]},{"Key":"call, but","Fragments":["the"]},{"Key":"one only","Fragments":["works","accepts"]},{"Key":"strings you","Fragments":["already","have"]},{"Key":"already have.","Fragments":["And"]},{"Key":"have. And","Fragments":["I"]},{"Key":"honestly think","Fragments":["they're"]},{"Key":"think they're","Fragments":["pretty","wchar"]},{"Key":"they're pretty","Fragments":["comparable","much"]},{"Key":"pretty comparable","Fragments":["for"]},{"Key":"comparable for","Fragments":["readability."]},{"Key":"for readability.","Fragments":["But"]},{"Key":"readability. But","Fragments":["that's"]},{"Key":"The std::ptr_fun","Fragments":["adds"]},{"Key":"std::ptr_fun adds","Fragments":["a"]},{"Key":"adds a","Fragments":["tiny","lot"]},{"Key":"overhead -","Fragments":["I"]},{"Key":"is resolve","Fragments":["the"]},{"Key":"resolve the","Fragments":["overload","issue."]},{"Key":"overload which","Fragments":["could"]},{"Key":" Sometimes","Fragments":["I"]},{"Key":"I rely","Fragments":["on"]},{"Key":"the (arguably","Fragments":["not-quite-portable"]},{"Key":"(arguably not-quite-portable","Fragments":["though"]},{"Key":"not-quite-portable though","Fragments":["I"]},{"Key":"found an","Fragments":["exception"]},{"Key":"exception yet)","Fragments":["fact"]},{"Key":"yet) fact","Fragments":["that"]},{"Key":"a version","Fragments":["of"]},{"Key":"of tolower","Fragments":["*not*"]},{"Key":"tolower *not*","Fragments":["in"]},{"Key":"*not* in","Fragments":["the"]},{"Key":"isn't overloaded","Fragments":["(the"]},{"Key":"overloaded (the","Fragments":["one"]},{"Key":"one you're","Fragments":["looking"]},{"Key":"you're looking","Fragments":["for"]},{"Key":"for -","Fragments":["the"]},{"Key":"doesn't take","Fragments":["a"]},{"Key":"a locale).","Fragments":["So"]},{"Key":"locale). So","Fragments":["as"]},{"Key":"So as","Fragments":["hacky"]},{"Key":"as hacky","Fragments":["as"]},{"Key":"hacky as","Fragments":["it"]},{"Key":"may seem","Fragments":["I"]},{"Key":"seem I","Fragments":["would"]},{"Key":" std::transform(","Fragments":["b,","start,","start,","word.begin(),"]},{"Key":"std::transform( b,","Fragments":["e,"]},{"Key":"b, e,","Fragments":["b,"]},{"Key":"e, b,","Fragments":["::tolower"]},{"Key":"b, ::tolower","Fragments":[");"]},{"Key":"support an","Fragments":["older"]},{"Key":"with super-strict","Fragments":["conformance"]},{"Key":"super-strict conformance","Fragments":["I'd"]},{"Key":"conformance I'd","Fragments":["put"]},{"Key":"\u0026 in","Fragments":["front"]},{"Key":"of ::tolower","Fragments":["(it's"]},{"Key":"::tolower (it's","Fragments":["no"]},{"Key":"(it's no","Fragments":["longer"]},{"Key":"longer officially","Fragments":["required"]},{"Key":"officially required","Fragments":["and"]},{"Key":"compiler I've","Fragments":["used"]},{"Key":"used has","Fragments":["ever"]},{"Key":"has ever","Fragments":["required"]},{"Key":"ever required","Fragments":["it"]},{"Key":"required it","Fragments":["unless","so"]},{"Key":"it unless","Fragments":["you"]},{"Key":"went out","Fragments":["of"]},{"Key":"Is `1'000'000'000L`","Fragments":["really"]},{"Key":"`1'000'000'000L` really","Fragments":["standard"]},{"Key":"really standard","Fragments":["C++"]},{"Key":"an extension","Fragments":["of"]},{"Key":"extension of","Fragments":["`gcc`"]},{"Key":"of `gcc`","Fragments":["and"]},{"Key":"1. `x","Fragments":["="]},{"Key":"= foo;","Fragments":["return"]},{"Key":"foo; return","Fragments":["x;`"]},{"Key":"return x;`","Fragments":["is"]},{"Key":"x;` is","Fragments":["the"]},{"Key":"as `return","Fragments":["foo`."]},{"Key":"Making `11574`","Fragments":["a"]},{"Key":"`11574` a","Fragments":["constant"]},{"Key":"constant with","Fragments":["a"]},{"Key":"than explain","Fragments":["it"]},{"Key":"explain it","Fragments":["a"]},{"Key":"wished I","Fragments":["could"]},{"Key":"just post","Fragments":["LaTeX"]},{"Key":"post LaTeX","Fragments":["math"]},{"Key":"LaTeX math","Fragments":["here…"]},{"Key":"can refactor","Fragments":["`square()`"]},{"Key":"refactor `square()`","Fragments":["to"]},{"Key":"`square()` to","Fragments":["O(1)"]},{"Key":"to O(1)","Fragments":["instead"]},{"Key":"could speed","Fragments":["up"]},{"Key":"up `total()`","Fragments":["by"]},{"Key":"`total()` by","Fragments":["doing"]},{"Key":"some simple","Fragments":["observation:"]},{"Key":"* What","Fragments":["is","is","will","about"]},{"Key":"total when","Fragments":["summing","summing","summing"]},{"Key":"when summing","Fragments":["up","up","up"]},{"Key":"up 1","Fragments":["square"]},{"Key":"1 square","Fragments":["comparing"]},{"Key":"square comparing","Fragments":["to"]},{"Key":"of rice","Fragments":["on","on","on"]},{"Key":"rice on","Fragments":["`square(2)`?","`square(3)`?","`square(n+1)`?"]},{"Key":"up 2","Fragments":["squares"]},{"Key":"2 squares","Fragments":["comparing"]},{"Key":"squares comparing","Fragments":["to","to"]},{"Key":"What will","Fragments":["be"]},{"Key":"up `n`","Fragments":["squares"]},{"Key":"`n` squares","Fragments":["comparing"]},{"Key":" @santiago","Fragments":["This"]},{"Key":"@santiago This","Fragments":["is"]},{"Key":"of obvious","Fragments":["now"]},{"Key":"now you've","Fragments":["pointed"]},{"Key":"you've pointed","Fragments":["it"]},{"Key":"out. Thanks!","Fragments":[":)"]},{"Key":" Absolutely","Fragments":["ugly"]},{"Key":"Absolutely ugly","Fragments":["with"]},{"Key":"ugly with","Fragments":["them"]},{"Key":"them while","Fragments":["loops"]},{"Key":"loops ...","Fragments":["next"]},{"Key":"... next","Fragments":["iterations"]},{"Key":"next iterations","Fragments":["..."]},{"Key":"iterations ...","Fragments":["___beautify___"]},{"Key":"Some questions/advices","Fragments":["about"]},{"Key":"questions/advices about","Fragments":["your"]},{"Key":"1. Compiler","Fragments":["generates"]},{"Key":"Compiler generates","Fragments":["empty"]},{"Key":"generates empty","Fragments":["ctor,"]},{"Key":"empty ctor,","Fragments":["so"]},{"Key":"ctor, so","Fragments":["you"]},{"Key":"remove ```school();```","Fragments":["and"]},{"Key":"```school();``` and","Fragments":["its"]},{"Key":"Why returning","Fragments":["```school*```"]},{"Key":"returning ```school*```","Fragments":["for"]},{"Key":"```school*``` for","Fragments":["```add()```"]},{"Key":"for ```add()```","Fragments":["method"]},{"Key":"```add()``` method","Fragments":["?"]},{"Key":"3. Same","Fragments":["for"]},{"Key":"Same for","Fragments":["```school_grade","`isspace`."]},{"Key":"for ```school_grade","Fragments":["grade(int)```"]},{"Key":"4. Why","Fragments":["passing"]},{"Key":"Why passing","Fragments":["```std::string```"]},{"Key":"passing ```std::string```","Fragments":["parameter"]},{"Key":"```std::string``` parameter","Fragments":["by"]},{"Key":"copy ?","Fragments":["you"]},{"Key":"? you","Fragments":["may"]},{"Key":"save an","Fragments":["extra"]},{"Key":"could remove","Fragments":["```this-\u003e```,","both","dependency","the","some"]},{"Key":"remove ```this-\u003e```,","Fragments":["but"]},{"Key":"```this-\u003e```, but","Fragments":["it's"]},{"Key":" Wait?","Fragments":["You"]},{"Key":"Wait? You","Fragments":["included"]},{"Key":"You included","Fragments":["`string`?"]},{"Key":"included `string`?","Fragments":["I"]},{"Key":"`string`? I","Fragments":["don't"]},{"Key":"You made","Fragments":["me","a","the"]},{"Key":"me very","Fragments":["curious,"]},{"Key":"very curious,","Fragments":["I"]},{"Key":"curious, I","Fragments":["so"]},{"Key":"I so","Fragments":["I"]},{"Key":"checked it","Fragments":["out"]},{"Key":"with g++","Fragments":["-S"]},{"Key":"g++ -S","Fragments":["at"]},{"Key":"-S at","Fragments":["the"]},{"Key":"default (IIRC","Fragments":["-O2)"]},{"Key":"(IIRC -O2)","Fragments":["and"]},{"Key":"-O2) and","Fragments":["-O3."]},{"Key":" \u003c\u003c","Fragments":["1"]},{"Key":" do","Fragments":["exactly"]},{"Key":" |","Fragments":["(c=='1')"]},{"Key":"different instructions,","Fragments":["one"]},{"Key":"instructions, one","Fragments":["for"]},{"Key":"for plus","Fragments":["and"]},{"Key":"for or.","Fragments":["I"]},{"Key":"or. I","Fragments":["suspect"]},{"Key":"suspect you're","Fragments":["right"]},{"Key":"the |","Fragments":["version"]},{"Key":"| version","Fragments":["is"]},{"Key":" Here's","Fragments":["what","a"]},{"Key":"Here's what","Fragments":["gets"]},{"Key":"what gets","Fragments":["me"]},{"Key":"gets me","Fragments":["-"]},{"Key":"me -","Fragments":["the"]},{"Key":"compiler knows","Fragments":["the"]},{"Key":"knows the","Fragments":["type","value","constant","answer"]},{"Key":"of (c=='1')","Fragments":["and"]},{"Key":"(c=='1') and","Fragments":["it"]},{"Key":"it knows","Fragments":["that","the"]},{"Key":"value has","Fragments":["to"]},{"Key":"be 1","Fragments":["or","clock"]},{"Key":"or 0.","Fragments":["It"]},{"Key":"0. It","Fragments":["knows"]},{"Key":"It knows","Fragments":["the"]},{"Key":"value being","Fragments":["added"]},{"Key":"being added","Fragments":["to"]},{"Key":"a zero","Fragments":["in"]},{"Key":"zero in","Fragments":["its"]},{"Key":"its least-significant","Fragments":["place,"]},{"Key":"least-significant place,","Fragments":["because"]},{"Key":"place, because","Fragments":["it"]},{"Key":"constant value","Fragments":["it"]},{"Key":"value it","Fragments":["just","would"]},{"Key":"just shifted","Fragments":["by."]},{"Key":"shifted by.","Fragments":["Maybe"]},{"Key":"by. Maybe","Fragments":["I'm"]},{"Key":"I'm asking","Fragments":["too"]},{"Key":"asking too","Fragments":["much,"]},{"Key":"too much,","Fragments":["but"]},{"Key":"much, but","Fragments":["I"]},{"Key":"this optimization","Fragments":["should"]},{"Key":"optimization should","Fragments":["be","define"]},{"Key":"right, that's","Fragments":["a"]},{"Key":"the sorting.","Fragments":["map"]},{"Key":"sorting. map","Fragments":["is"]},{"Key":"always least-to-greatest","Fragments":["as"]},{"Key":"least-to-greatest as","Fragments":["determined"]},{"Key":"as determined","Fragments":["by"]},{"Key":"by \u003c","Fragments":["or"]},{"Key":"\u003c or","Fragments":["whatever"]},{"Key":"or whatever","Fragments":["predicate","is"]},{"Key":"whatever predicate","Fragments":["you"]},{"Key":"predicate you","Fragments":["gave"]},{"Key":"you gave","Fragments":["it","attribution"]},{"Key":"pairs that","Fragments":["I"]},{"Key":"see are","Fragments":["performance-related:"]},{"Key":"1) map","Fragments":["normally"]},{"Key":"normally requires","Fragments":["a"]},{"Key":"new allocation","Fragments":["for"]},{"Key":"each node.","Fragments":["I'm"]},{"Key":"node. I'm","Fragments":["not"]},{"Key":"does when","Fragments":["initially"]},{"Key":"when initially","Fragments":["set"]},{"Key":"initially set","Fragments":["up"]},{"Key":"up like","Fragments":["this,"]},{"Key":"my guess","Fragments":["is"]},{"Key":"is yes.","Fragments":["The"]},{"Key":"yes. The","Fragments":["vector"]},{"Key":"The vector","Fragments":["would"]},{"Key":"use exactly","Fragments":["one"]},{"Key":"allocation (not","Fragments":["counting"]},{"Key":"(not counting","Fragments":["allocations"]},{"Key":"counting allocations","Fragments":["inside"]},{"Key":"allocations inside","Fragments":["of"]},{"Key":"of common","Fragments":["non-compliant"]},{"Key":"common non-compliant","Fragments":["strings"]},{"Key":"non-compliant strings","Fragments":["objects"]},{"Key":"strings objects","Fragments":["-"]},{"Key":"objects -","Fragments":["they"]},{"Key":"same in","Fragments":["either","about"]},{"Key":"either collection","Fragments":["anyhow)."]},{"Key":"collection anyhow).","Fragments":["If"]},{"Key":"anyhow). If","Fragments":["it's"]},{"Key":"If it's","Fragments":["not","not"]},{"Key":"not set","Fragments":["up"]},{"Key":"up initially","Fragments":["vector"]},{"Key":"initially vector","Fragments":["still"]},{"Key":"still requires","Fragments":["fewer"]},{"Key":"requires fewer","Fragments":["allocations"]},{"Key":"fewer allocations","Fragments":["-"]},{"Key":"allocations -","Fragments":["it"]},{"Key":"it grows","Fragments":["by","to"]},{"Key":"grows by","Fragments":["a"]},{"Key":"a multiplicative","Fragments":["factor"]},{"Key":"multiplicative factor","Fragments":["when"]},{"Key":"factor when","Fragments":["capacity"]},{"Key":"when capacity","Fragments":["is"]},{"Key":"capacity is","Fragments":["exhausted"]},{"Key":"is exhausted","Fragments":["so"]},{"Key":"exhausted so","Fragments":["that"]},{"Key":"grows to","Fragments":["infinity"]},{"Key":"to infinity","Fragments":["allocations"]},{"Key":"infinity allocations","Fragments":["become"]},{"Key":"allocations become","Fragments":["rarer"]},{"Key":"become rarer","Fragments":["and"]},{"Key":"rarer and","Fragments":["rarer."]},{"Key":"2) Less","Fragments":["per-object"]},{"Key":"Less per-object","Fragments":["memory"]},{"Key":"per-object memory","Fragments":["overhead"]},{"Key":"overhead (no","Fragments":["left"]},{"Key":"(no left","Fragments":["or"]},{"Key":"right pointer,","Fragments":["for"]},{"Key":"pointer, for","Fragments":["example)."]},{"Key":"for example).","Fragments":["And"]},{"Key":"example). And","Fragments":["since"]},{"Key":"since programs","Fragments":["on"]},{"Key":"programs on","Fragments":["modern"]},{"Key":"modern multi-core","Fragments":["systems"]},{"Key":"multi-core systems","Fragments":["tend"]},{"Key":"systems tend","Fragments":["to"]},{"Key":"to spend","Fragments":["roughly"]},{"Key":"spend roughly","Fragments":["half"]},{"Key":"roughly half","Fragments":["of"]},{"Key":"their time","Fragments":["waiting"]},{"Key":"time waiting","Fragments":["on"]},{"Key":"waiting on","Fragments":["memory"]},{"Key":"memory (I","Fragments":["need"]},{"Key":"(I need","Fragments":["to"]},{"Key":"find where","Fragments":["I"]},{"Key":"got that","Fragments":["tidbit","information"]},{"Key":"that tidbit","Fragments":["-"]},{"Key":"tidbit -","Fragments":["it's"]},{"Key":"really interesting","Fragments":["measurement)"]},{"Key":"interesting measurement)","Fragments":["it's"]},{"Key":"measurement) it's","Fragments":["good"]},{"Key":"mind significant","Fragments":["per-node"]},{"Key":"significant per-node","Fragments":["increases"]},{"Key":"per-node increases","Fragments":["like"]},{"Key":"increases like","Fragments":["that."]},{"Key":"that. Which","Fragments":["leads"]},{"Key":"Which leads","Fragments":["to..."]},{"Key":"3) A","Fragments":["vector"]},{"Key":"will all","Fragments":["be"]},{"Key":"in contiguous","Fragments":["memory"]},{"Key":"contiguous memory","Fragments":["(guaranteed"]},{"Key":"memory (guaranteed","Fragments":["by"]},{"Key":"(guaranteed by","Fragments":["the"]},{"Key":"the standard),","Fragments":["so"]},{"Key":"standard), so","Fragments":["it's"]},{"Key":"to beat","Fragments":["the"]},{"Key":"beat the","Fragments":["snot"]},{"Key":"the snot","Fragments":["out"]},{"Key":"snot out","Fragments":["of"]},{"Key":"for traversal,","Fragments":["since"]},{"Key":"traversal, since","Fragments":["a"]},{"Key":"decent portion","Fragments":["of"]},{"Key":"portion of","Fragments":["it"]},{"Key":"single cache","Fragments":["line"]},{"Key":"cache line","Fragments":["(especially","before"]},{"Key":"line (especially","Fragments":["for"]},{"Key":"(especially for","Fragments":["small"]},{"Key":"4) Assuming","Fragments":["you"]},{"Key":"set it","Fragments":["up"]},{"Key":"traverse from","Fragments":["beginning"]},{"Key":"from beginning","Fragments":["to"]},{"Key":"to end,","Fragments":["this","no"]},{"Key":"end, this","Fragments":["is"]},{"Key":"is nearly","Fragments":["the"]},{"Key":"nearly the","Fragments":["best"]},{"Key":"best possible","Fragments":["case"]},{"Key":"possible case","Fragments":["for"]},{"Key":"a predictable","Fragments":["stride"]},{"Key":"predictable stride","Fragments":["(to"]},{"Key":"stride (to","Fragments":["do"]},{"Key":"(to do","Fragments":["better"]},{"Key":"better your","Fragments":["stride"]},{"Key":"your stride","Fragments":["would"]},{"Key":"stride would","Fragments":["have"]},{"Key":"an offset","Fragments":["of"]},{"Key":"offset of","Fragments":["1"]},{"Key":"of 1","Fragments":["word","instead."]},{"Key":"1 word","Fragments":["or"]},{"Key":"word or","Fragments":["some"]},{"Key":"some such).","Fragments":["Your"]},{"Key":"such). Your","Fragments":["machine"]},{"Key":"Your machine","Fragments":["probably"]},{"Key":"machine probably","Fragments":["has"]},{"Key":"probably has","Fragments":["a","to"]},{"Key":"a prefetcher","Fragments":["that"]},{"Key":"prefetcher that","Fragments":["has"]},{"Key":"decent shot","Fragments":["at"]},{"Key":"shot at","Fragments":["getting"]},{"Key":"at getting","Fragments":["your"]},{"Key":"your next","Fragments":["cache"]},{"Key":"next cache","Fragments":["line"]},{"Key":"line before","Fragments":["you"]},{"Key":" Bjarne","Fragments":["has"]},{"Key":"Bjarne has","Fragments":["some"]},{"Key":"has some","Fragments":["top-notch","interesting","merits.","subtle","\"shortcomings\":"]},{"Key":"some top-notch","Fragments":["talks"]},{"Key":"top-notch talks","Fragments":["on"]},{"Key":"talks on","Fragments":["this"]},{"Key":"of cache","Fragments":["friendliness"]},{"Key":"cache friendliness","Fragments":["where"]},{"Key":"friendliness where","Fragments":["he"]},{"Key":"he showed","Fragments":["(for"]},{"Key":"showed (for","Fragments":["certain"]},{"Key":"(for certain","Fragments":["conditions)"]},{"Key":"certain conditions)","Fragments":["vector"]},{"Key":"conditions) vector","Fragments":["can"]},{"Key":"can outperform","Fragments":["set"]},{"Key":"outperform set","Fragments":["at"]},{"Key":"set at","Fragments":["sorted"]},{"Key":"at sorted","Fragments":["insertion"]},{"Key":"sorted insertion","Fragments":["\u0026"]},{"Key":"insertion \u0026","Fragments":["deletion"]},{"Key":"\u0026 deletion","Fragments":["from"]},{"Key":"deletion from","Fragments":["arbitrary"]},{"Key":"from arbitrary","Fragments":["points..."]},{"Key":"arbitrary points...","Fragments":["the"]},{"Key":"points... the","Fragments":["sort"]},{"Key":"stuff set","Fragments":["was"]},{"Key":"set was","Fragments":["literally"]},{"Key":"was literally","Fragments":["made","about"]},{"Key":"literally made","Fragments":["for."]},{"Key":"made for.","Fragments":["But"]},{"Key":"for. But","Fragments":["the"]},{"Key":"who really","Fragments":["introduced"]},{"Key":"really introduced","Fragments":["me"]},{"Key":"introduced me","Fragments":["to"]},{"Key":"was Scott","Fragments":["Meyers."]},{"Key":"Scott Meyers.","Fragments":["It's"]},{"Key":"Meyers. It's","Fragments":["not"]},{"Key":"the subjects","Fragments":["he's"]},{"Key":"subjects he's","Fragments":["best-known"]},{"Key":"he's best-known","Fragments":["for,"]},{"Key":"best-known for,","Fragments":["but"]},{"Key":"for, but","Fragments":["he's"]},{"Key":"but he's","Fragments":["one"]},{"Key":"he's one","Fragments":["of"]},{"Key":"my favorite","Fragments":["C++"]},{"Key":"favorite C++","Fragments":["gurus"]},{"Key":"C++ gurus","Fragments":["so"]},{"Key":"gurus so","Fragments":["I"]},{"Key":"recommend it","Fragments":["if"]},{"Key":"only non-performance-related","Fragments":["thing"]},{"Key":"non-performance-related thing","Fragments":["I"]},{"Key":"can envision","Fragments":["-"]},{"Key":"envision -","Fragments":["if"]},{"Key":"const statically-initialized","Fragments":["map,"]},{"Key":"statically-initialized map,","Fragments":["I"]},{"Key":"map, I","Fragments":["expect"]},{"Key":"I expect","Fragments":["the"]},{"Key":"do lookups.","Fragments":["I"]},{"Key":"lookups. I","Fragments":["guess"]},{"Key":"guess someone","Fragments":["maintaining"]},{"Key":"someone maintaining","Fragments":["the"]},{"Key":"the code...","Fragments":["OK"]},{"Key":"code... OK","Fragments":["I'm"]},{"Key":"OK I'm","Fragments":["stretching"]},{"Key":"I'm stretching","Fragments":["here."]},{"Key":"stretching here.","Fragments":["I'm"]},{"Key":"here. I'm","Fragments":["trying"]},{"Key":"what using","Fragments":["map"]},{"Key":"using map","Fragments":["communicates"]},{"Key":"map communicates","Fragments":["isn't"]},{"Key":"communicates isn't","Fragments":["accurate,"]},{"Key":"isn't accurate,","Fragments":["but"]},{"Key":"accurate, but","Fragments":["I'm"]},{"Key":"entirely sure","Fragments":["when"]},{"Key":"sure when","Fragments":["it"]},{"Key":"didn't catch","Fragments":["```for(auto"]},{"Key":"catch ```for(auto","Fragments":["pair"]},{"Key":"```for(auto pair","Fragments":[":"]},{"Key":"pair :","Fragments":["map)```"]},{"Key":": map)```","Fragments":["with"]},{"Key":"map)``` with","Fragments":["an"]},{"Key":"an ```std::map\u003cint,","Fragments":["std::vector\u003cchar\u003e\u003e```"]},{"Key":"```std::map\u003cint, std::vector\u003cchar\u003e\u003e```","Fragments":["type"]},{"Key":"std::vector\u003cchar\u003e\u003e``` type","Fragments":["will"]},{"Key":"type will","Fragments":["give"]},{"Key":"pair for","Fragments":["processing."]},{"Key":" Right.","Fragments":["Fixed."]},{"Key":" @keagan","Fragments":["Those"]},{"Key":"@keagan Those","Fragments":["are"]},{"Key":"Those are","Fragments":["for"]},{"Key":"are for","Fragments":["the"]},{"Key":"strings passed","Fragments":["in"]},{"Key":"vector `words`.","Fragments":["The"]},{"Key":"`words`. The","Fragments":["comparison"]},{"Key":"the previously","Fragments":["generated"]},{"Key":"previously generated","Fragments":["`word_lowercase_`"]},{"Key":"generated `word_lowercase_`","Fragments":["and"]},{"Key":"`word_lowercase_` and","Fragments":["`word_lowercase_sorted_`."]},{"Key":"While reviewing","Fragments":["@roxane"]},{"Key":"reviewing @roxane","Fragments":["'s"]},{"Key":"@roxane 's","Fragments":["submission,"]},{"Key":"'s submission,","Fragments":["I"]},{"Key":"submission, I","Fragments":["realized","think"]},{"Key":"realized there","Fragments":["was"]},{"Key":"that he","Fragments":["was","needs"]},{"Key":"doing just","Fragments":["flat-out"]},{"Key":"just flat-out","Fragments":["better"]},{"Key":"flat-out better","Fragments":["than"]},{"Key":"I was,","Fragments":["so"]},{"Key":"was, so","Fragments":["I"]},{"Key":"to steal","Fragments":["his"]},{"Key":"steal his","Fragments":["ideas."]},{"Key":"his ideas.","Fragments":["Smart"]},{"Key":"ideas. Smart","Fragments":["guy."]},{"Key":"and foremost","Fragments":["-"]},{"Key":"foremost -","Fragments":["starting"]},{"Key":"- starting","Fragments":["with"]},{"Key":"starting with","Fragments":["a"]},{"Key":"a complete","Fragments":["constant"]},{"Key":"complete constant","Fragments":["blank"]},{"Key":"constant blank","Fragments":["board"]},{"Key":"blank board","Fragments":["and"]},{"Key":"board and","Fragments":["placing"]},{"Key":"and placing","Fragments":["the"]},{"Key":"placing the","Fragments":["two"]},{"Key":"two pieces","Fragments":["is"]},{"Key":"pieces is","Fragments":["faster"]},{"Key":"than building","Fragments":["the"]},{"Key":"the board","Fragments":["one"]},{"Key":"board one","Fragments":["space"]},{"Key":"one space","Fragments":["at"]},{"Key":"space at","Fragments":["a"]},{"Key":"time testing","Fragments":["each"]},{"Key":"testing each","Fragments":["one"]},{"Key":"a piece.","Fragments":["And"]},{"Key":"piece. And","Fragments":["I"]},{"Key":"feel embarrassed","Fragments":["for"]},{"Key":"embarrassed for","Fragments":["not"]},{"Key":"having thought","Fragments":["of"]},{"Key":"Also, having","Fragments":["a"]},{"Key":"a completely","Fragments":["separate","revamped"]},{"Key":"completely separate","Fragments":["default","version"]},{"Key":"separate default","Fragments":["constructor"]},{"Key":"to default","Fragments":["arguments"]},{"Key":"default arguments","Fragments":["for"]},{"Key":"see no","Fragments":["reason"]},{"Key":"support specifying","Fragments":["the"]},{"Key":"position while","Fragments":["leaving"]},{"Key":"while leaving","Fragments":["the"]},{"Key":"leaving the","Fragments":["black"]},{"Key":"the black","Fragments":["position"]},{"Key":"black position","Fragments":["default,"]},{"Key":"position default,","Fragments":["especially"]},{"Key":"default, especially","Fragments":["since"]},{"Key":"reverse was","Fragments":["not"]},{"Key":"Since there's","Fragments":["no"]},{"Key":"real use","Fragments":["case"]},{"Key":"likely use","Fragments":["case","an"]},{"Key":"mistake on","Fragments":["the"]},{"Key":"caller's part","Fragments":["therefore"]},{"Key":"part therefore","Fragments":["it"]},{"Key":"therefore it","Fragments":["would"]},{"Key":"that didn't","Fragments":["compile.","leap"]},{"Key":"way we","Fragments":["don't","detect"]},{"Key":"the w","Fragments":["=="]},{"Key":"w ==","Fragments":["b"]},{"Key":"== b","Fragments":["check"]},{"Key":"b check","Fragments":["for"]},{"Key":"for constants","Fragments":["that"]},{"Key":"constants that","Fragments":["we"]},{"Key":"a fact","Fragments":["will"]},{"Key":"fact will","Fragments":["never"]},{"Key":"Your a","Fragments":["Lakos"]},{"Key":"a Lakos","Fragments":["fan?"]},{"Key":"Lakos fan?","Fragments":["I've"]},{"Key":"fan? I've","Fragments":["seen"]},{"Key":"seen him","Fragments":["give"]},{"Key":"him give","Fragments":["talks"]},{"Key":"give talks","Fragments":["in-person"]},{"Key":"talks in-person","Fragments":["a"]},{"Key":"in-person a","Fragments":["couple"]},{"Key":"couple times","Fragments":["since"]},{"Key":"times since","Fragments":["we"]},{"Key":"since we","Fragments":["used","are"]},{"Key":"we used","Fragments":["to"]},{"Key":"same company.","Fragments":["He's"]},{"Key":"company. He's","Fragments":["very"]},{"Key":"He's very","Fragments":["smart"]},{"Key":"very smart","Fragments":["and"]},{"Key":"smart and","Fragments":["talks"]},{"Key":"and talks","Fragments":["about"]},{"Key":"about some","Fragments":["stuff"]},{"Key":"some stuff","Fragments":["that"]},{"Key":"very many","Fragments":["other"]},{"Key":"other gurus","Fragments":["focus"]},{"Key":"gurus focus","Fragments":["on"]},{"Key":"on (e.g.","Fragments":["I"]},{"Key":"(e.g. I","Fragments":["have"]},{"Key":"see anyone","Fragments":["else"]},{"Key":"else stress","Fragments":["physical"]},{"Key":"stress physical","Fragments":["design)."]},{"Key":"physical design).","Fragments":["I"]},{"Key":"design). I","Fragments":["prefer"]},{"Key":"the presentation","Fragments":["style"]},{"Key":"presentation style","Fragments":["of"]},{"Key":"of Meyers","Fragments":["or"]},{"Key":"Meyers or","Fragments":["Stroustrup,"]},{"Key":"or Stroustrup,","Fragments":["but"]},{"Key":"Stroustrup, but","Fragments":["ya"]},{"Key":"but ya","Fragments":["gotta"]},{"Key":"ya gotta","Fragments":["give"]},{"Key":"gotta give","Fragments":["Lakos"]},{"Key":"give Lakos","Fragments":["his"]},{"Key":"Lakos his","Fragments":["due."]},{"Key":"guess he'd","Fragments":["probably"]},{"Key":"he'd probably","Fragments":["tell"]},{"Key":"probably tell","Fragments":["you"]},{"Key":"to guarantee","Fragments":["bounds-checking","that"]},{"Key":"guarantee bounds-checking","Fragments":["in"]},{"Key":"bounds-checking in","Fragments":["production,"]},{"Key":"in production,","Fragments":["narrow"]},{"Key":"production, narrow","Fragments":["contracts"]},{"Key":"narrow contracts","Fragments":["and"]},{"Key":"contracts and","Fragments":["all"]},{"Key":"all that.","Fragments":["And"]},{"Key":"that. And","Fragments":["that"]},{"Key":"do bounds-check","Fragments":["it"]},{"Key":"bounds-check it","Fragments":["should"]},{"Key":"be with","Fragments":["an"]},{"Key":"an assert","Fragments":["the","for"]},{"Key":"assert the","Fragments":["owner"]},{"Key":"the owner","Fragments":["of"]},{"Key":"owner of","Fragments":["main"]},{"Key":"of main","Fragments":["can"]},{"Key":"main can","Fragments":["choose"]},{"Key":"can choose","Fragments":["to"]},{"Key":"to omit,","Fragments":["or"]},{"Key":"omit, or","Fragments":["with"]},{"Key":"function someone","Fragments":["can"]},{"Key":"someone can","Fragments":["call"]},{"Key":"validate their","Fragments":["arguments"]},{"Key":"their arguments","Fragments":["that"]},{"Key":"call if","Fragments":["they"]},{"Key":"are good.","Fragments":["Sound"]},{"Key":"good. Sound","Fragments":["about"]},{"Key":"Sound about","Fragments":["right?"]},{"Key":"@rahul Thank","Fragments":["you"]},{"Key":"you so","Fragments":["much","much"]},{"Key":"your nitpick!","Fragments":["Most"]},{"Key":"nitpick! Most","Fragments":["of"]},{"Key":"the inconsistencies","Fragments":["are"]},{"Key":"inconsistencies are","Fragments":["from"]},{"Key":"from frustration.","Fragments":["I"]},{"Key":"frustration. I","Fragments":["ended"]},{"Key":"up giving","Fragments":["up"]},{"Key":"giving up","Fragments":["because"]},{"Key":"up because","Fragments":["of"]},{"Key":"of need","Fragments":["of"]},{"Key":"just threw","Fragments":["it","together"]},{"Key":"threw it","Fragments":["up"]},{"Key":"on here","Fragments":["as","use"]},{"Key":"is without","Fragments":["finishing"]},{"Key":"without finishing","Fragments":["it"]},{"Key":"finishing it","Fragments":["completely."]},{"Key":"it completely.","Fragments":["I'l"]},{"Key":"completely. I'l","Fragments":["be"]},{"Key":"I'l be","Fragments":["sure"]},{"Key":"be sure","Fragments":["to","to","that","you"]},{"Key":"make another,","Fragments":["more"]},{"Key":"another, more","Fragments":["polished,"]},{"Key":"more polished,","Fragments":["iteration"]},{"Key":"polished, iteration","Fragments":["here"]},{"Key":"iteration here","Fragments":["soon."]},{"Key":"Now as","Fragments":["far"]},{"Key":"members not","Fragments":["being"]},{"Key":"being declared","Fragments":["correctly...","as"]},{"Key":"declared correctly...","Fragments":["would"]},{"Key":"correctly... would","Fragments":["have"]},{"Key":"no problem","Fragments":["agreeing"]},{"Key":"problem agreeing","Fragments":["but"]},{"Key":"agreeing but","Fragments":["I'm"]},{"Key":"I'm able","Fragments":["to"]},{"Key":"gcc but","Fragments":["not"]},{"Key":"makefile that","Fragments":["exercism"]},{"Key":"exercism provides.","Fragments":["Would"]},{"Key":"provides. Would","Fragments":["you"]},{"Key":"why that","Fragments":["is?"]},{"Key":"I showed","Fragments":["a"]},{"Key":"showed a","Fragments":["bit"]},{"Key":"C programming","Fragments":["here"]},{"Key":"programming here","Fragments":["(like"]},{"Key":"here (like","Fragments":["using"]},{"Key":"(like using","Fragments":["C"]},{"Key":"using C","Fragments":["style"]},{"Key":"style arrays)","Fragments":["but"]},{"Key":"arrays) but","Fragments":["my"]},{"Key":"my thought","Fragments":["to","process"]},{"Key":"thought to","Fragments":["using"]},{"Key":"using many","Fragments":["defines"]},{"Key":"many defines","Fragments":["instead"]},{"Key":"defines instead","Fragments":["of"]},{"Key":"of constants","Fragments":["is"]},{"Key":"constants is","Fragments":["that","a"]},{"Key":"don't take","Fragments":["up","char"]},{"Key":"take up","Fragments":["memory"]},{"Key":"up memory","Fragments":["space"]},{"Key":"memory space","Fragments":["and"]},{"Key":"are replaced","Fragments":["at"]},{"Key":"replaced at","Fragments":["compile"]},{"Key":"time. Your","Fragments":["thoughts?"]},{"Key":"changed how","Fragments":["the","I","I"]},{"Key":"the `nucleotide_counts()`","Fragments":["function"]},{"Key":"`nucleotide_counts()` function","Fragments":["works"]},{"Key":"it's using","Fragments":["the"]},{"Key":"the `map`","Fragments":["to","is"]},{"Key":"`map` to","Fragments":["determine"]},{"Key":"which characters","Fragments":["to"]},{"Key":"characters to","Fragments":["look","iterate","be"]},{"Key":"a `for`","Fragments":["loop"]},{"Key":"cover them","Fragments":["all"]},{"Key":"all instead","Fragments":["of"]},{"Key":"manually adding","Fragments":["each"]},{"Key":"adding each","Fragments":["type"]},{"Key":"each type","Fragments":["and","returning","returning"]},{"Key":"and storing","Fragments":["it"]},{"Key":"storing it","Fragments":["in"]},{"Key":"what const","Fragments":["means,","reference"]},{"Key":"const means,","Fragments":["yes."]},{"Key":"means, yes.","Fragments":["You"]},{"Key":"yes. You","Fragments":["can"]},{"Key":"those cases,","Fragments":["and"]},{"Key":"cases, and","Fragments":["more,"]},{"Key":"and more,","Fragments":["but"]},{"Key":"more, but","Fragments":["in","I'll","I"]},{"Key":"first example","Fragments":["it's","given"]},{"Key":"example it's","Fragments":["not"]},{"Key":"You'll see","Fragments":["a"]},{"Key":"std::string\u0026 in","Fragments":["parameter"]},{"Key":"in parameter","Fragments":["lists"]},{"Key":"parameter lists","Fragments":["-"]},{"Key":"lists -","Fragments":["this"]},{"Key":"means I","Fragments":["don't"]},{"Key":"your string,","Fragments":["I","you"]},{"Key":"string the","Fragments":["caller"]},{"Key":"is passing,","Fragments":["but"]},{"Key":"passing, but","Fragments":["I"]},{"Key":"I promise","Fragments":["not"]},{"Key":"promise not","Fragments":["to"]},{"Key":"it (the","Fragments":["caller"]},{"Key":"(the caller","Fragments":["would've"]},{"Key":"caller would've","Fragments":["observed"]},{"Key":"would've observed","Fragments":["modifications,"]},{"Key":"observed modifications,","Fragments":["so"]},{"Key":"modifications, so","Fragments":["it"]},{"Key":"matters quite","Fragments":["a"]},{"Key":"bit to","Fragments":["them).","do"]},{"Key":"to them).","Fragments":["This"]},{"Key":"them). This","Fragments":["is"]},{"Key":"reasons (it's","Fragments":["usually"]},{"Key":"(it's usually","Fragments":["cheaper"]},{"Key":"usually cheaper","Fragments":["to"]},{"Key":"cheaper to","Fragments":["pass","preprocess"]},{"Key":"memory address","Fragments":["than"]},{"Key":"address than","Fragments":["an"]},{"Key":"than an","Fragments":["object),","int."]},{"Key":"an object),","Fragments":["and"]},{"Key":"object), and","Fragments":["matters"]},{"Key":"and matters","Fragments":["more"]},{"Key":"matters more","Fragments":["in"]},{"Key":"cases than","Fragments":["others."]},{"Key":"than others.","Fragments":["Const"]},{"Key":"others. Const","Fragments":["references"]},{"Key":"references in","Fragments":["other"]},{"Key":"other places","Fragments":["work","like"]},{"Key":"places work","Fragments":["similarly,"]},{"Key":"work similarly,","Fragments":["but"]},{"Key":"similarly, but","Fragments":["one"]},{"Key":"about return","Fragments":["values"]},{"Key":"values because","Fragments":["then"]},{"Key":"100% obvious","Fragments":["what"]},{"Key":"the lifetime","Fragments":["of"]},{"Key":"lifetime of","Fragments":["the"]},{"Key":"referenced object","Fragments":["is."]},{"Key":"Another place","Fragments":["it's"]},{"Key":"place it's","Fragments":["important"]},{"Key":"it's important","Fragments":["is"]},{"Key":"important is","Fragments":["on"]},{"Key":"the *end*","Fragments":["of"]},{"Key":"*end* of","Fragments":["function"]},{"Key":"function declarations.","Fragments":["Like"]},{"Key":"the this","Fragments":["pointer"]},{"Key":"this pointer","Fragments":["is"]},{"Key":"const -","Fragments":["calling"]},{"Key":"- calling","Fragments":["this"]},{"Key":"object you're","Fragments":["calling"]},{"Key":"on (although","Fragments":["I"]},{"Key":"(although I","Fragments":["understand"]},{"Key":"understand it's","Fragments":["a"]},{"Key":"bad example","Fragments":["since"]},{"Key":"example since","Fragments":["hey"]},{"Key":"since hey","Fragments":["isn't"]},{"Key":"hey isn't","Fragments":["a"]},{"Key":"no this...","Fragments":["think"]},{"Key":"this... think","Fragments":["of"]},{"Key":"like std::string::size()","Fragments":["instead,"]},{"Key":"std::string::size() instead,","Fragments":["which"]},{"Key":"instead, which","Fragments":["has"]},{"Key":"trailing const","Fragments":["like"]},{"Key":"const like","Fragments":["that"]},{"Key":"since asking","Fragments":["for"]},{"Key":"size doesn't","Fragments":["change"]},{"Key":"- no","Fragments":["Heisenberg"]},{"Key":"no Heisenberg","Fragments":["here)."]},{"Key":"variable as","Fragments":["const","the","```const"]},{"Key":"nice for","Fragments":["people","this.","statically"]},{"Key":"for people","Fragments":["looking"]},{"Key":"people looking","Fragments":["at"]},{"Key":"implementation -","Fragments":["because"]},{"Key":"- because","Fragments":["they"]},{"Key":"it gets","Fragments":["assigned","better"]},{"Key":"gets assigned","Fragments":["a"]},{"Key":"assigned a","Fragments":["value"]},{"Key":"value never","Fragments":["changes."]},{"Key":"never changes.","Fragments":["In"]},{"Key":"changes. In","Fragments":["essence"]},{"Key":"essence that","Fragments":["variable"]},{"Key":"longer a","Fragments":["part","linear"]},{"Key":"the mutable","Fragments":["state","string","string"]},{"Key":"mutable state","Fragments":["of"]},{"Key":"state of","Fragments":["the","all","passing"]},{"Key":" isn't","Fragments":["particularly"]},{"Key":"particularly useful","Fragments":["because..."]},{"Key":"useful because...","Fragments":["you're"]},{"Key":"because... you're","Fragments":["returning"]},{"Key":"by-value *temporary*","Fragments":["copy"]},{"Key":"*temporary* copy","Fragments":["of"]},{"Key":"a super-cheap","Fragments":["datatype"]},{"Key":"super-cheap datatype","Fragments":["(bool),"]},{"Key":"datatype (bool),","Fragments":["which"]},{"Key":"(bool), which","Fragments":["the"]},{"Key":"which the","Fragments":["caller","standards","enclosed"]},{"Key":"of and","Fragments":["then"]},{"Key":"then modify","Fragments":["to","it."]},{"Key":"modify to","Fragments":["their"]},{"Key":"their heart's","Fragments":["content,"]},{"Key":"heart's content,","Fragments":["but"]},{"Key":"content, but","Fragments":["you're"]},{"Key":"but you're","Fragments":["asking","still","off"]},{"Key":"you're asking","Fragments":["them"]},{"Key":"asking them","Fragments":["not"]},{"Key":"object isn't","Fragments":["even"]},{"Key":"even able","Fragments":["to"]},{"Key":"to reference","Fragments":["anyway"]},{"Key":"reference anyway","Fragments":["and"]},{"Key":"a moment,","Fragments":["so"]},{"Key":"moment, so","Fragments":["what"]},{"Key":"what difference","Fragments":["does"]},{"Key":"difference does","Fragments":["it"]},{"Key":"really make?","Fragments":["In"]},{"Key":"make? In","Fragments":["fact"]},{"Key":"you manage","Fragments":["to"]},{"Key":"manage to","Fragments":["find"]},{"Key":"find code","Fragments":["that"]},{"Key":"doesn't compile","Fragments":["as"]},{"Key":"compile as","Fragments":["a"]},{"Key":"that const","Fragments":["you'd"]},{"Key":"const you'd","Fragments":["have"]},{"Key":"some really","Fragments":["unusual","critical"]},{"Key":"really unusual","Fragments":["(and"]},{"Key":"unusual (and","Fragments":["possibly"]},{"Key":"(and possibly","Fragments":["non-portable)"]},{"Key":"possibly non-portable)","Fragments":["code."]},{"Key":"Declaring local","Fragments":["variables"]},{"Key":"variables const","Fragments":["is"]},{"Key":"about expressing","Fragments":["intent"]},{"Key":"intent to","Fragments":["the"]},{"Key":"person reading","Fragments":["the"]},{"Key":"code. If","Fragments":["your"]},{"Key":"are short","Fragments":["then","and"]},{"Key":"short then","Fragments":["it's"]},{"Key":"not buying","Fragments":["you"]},{"Key":"buying you","Fragments":["a"]},{"Key":"lot. Declaring","Fragments":["them"]},{"Key":"Declaring them","Fragments":["as"]},{"Key":"const\u0026 on","Fragments":["the"]},{"Key":"for extending","Fragments":["the"]},{"Key":"extending the","Fragments":["life"]},{"Key":"temporary without","Fragments":["copying"]},{"Key":"without copying","Fragments":["it,"]},{"Key":"copying it,","Fragments":["but"]},{"Key":"that's arguably","Fragments":["obscure"]},{"Key":"arguably obscure","Fragments":["and"]},{"Key":"obscure and","Fragments":["not"]},{"Key":"that important","Fragments":["given"]},{"Key":"important given","Fragments":["compiler"]},{"Key":"given compiler","Fragments":["optimizations."]},{"Key":"for \"modern\"","Fragments":["stylistic"]},{"Key":"\"modern\" stylistic","Fragments":["preferences,"]},{"Key":"stylistic preferences,","Fragments":["I"]},{"Key":"preferences, I","Fragments":["think"]},{"Key":"think is_yell","Fragments":["can"]},{"Key":"is_yell can","Fragments":["benefit"]},{"Key":"can benefit","Fragments":["from"]},{"Key":"from std::any_of.","Fragments":["As"]},{"Key":"std::any_of. As","Fragments":["in"]},{"Key":"return std::any_of(sentence.begin(),","Fragments":["sentence.end(),"]},{"Key":"std::any_of(sentence.begin(), sentence.end(),","Fragments":["::isupper)","::islower);"]},{"Key":"sentence.end(), ::isupper)","Fragments":["\u0026\u0026"]},{"Key":"::isupper) \u0026\u0026","Fragments":["!"]},{"Key":"! std::any_of(sentence.begin(),","Fragments":["sentence.end(),"]},{"Key":"For obscenely","Fragments":["long"]},{"Key":"obscenely long","Fragments":["strings"]},{"Key":"long strings","Fragments":["that"]},{"Key":"don't contain","Fragments":["letters"]},{"Key":"contain letters","Fragments":["it"]},{"Key":"letters it","Fragments":["might"]},{"Key":"be slower,","Fragments":["but"]},{"Key":"slower, but","Fragments":["I"]},{"Key":"think being","Fragments":["able"]},{"Key":"intent upfront","Fragments":["is"]},{"Key":"upfront is","Fragments":["worth"]},{"Key":"worth it.","Fragments":["If"]},{"Key":"the verbosity","Fragments":["of","significantly.","of"]},{"Key":"verbosity of","Fragments":["passing","it.","the"]},{"Key":"passing begin","Fragments":["and"]},{"Key":"iterators you","Fragments":["can"]},{"Key":"use boost::range","Fragments":["to"]},{"Key":"boost::range to","Fragments":["similar"]},{"Key":"to similar","Fragments":["effect"]},{"Key":"similar effect","Fragments":["with"]},{"Key":"effect with","Fragments":["fewer"]},{"Key":"fewer arguments","Fragments":["http://www.boost.org/doc/libs/1_53_0/libs/algorithm/doc/html/the_boost_algorithm_library/CXX11/any_of.html"]},{"Key":" Similarly","Fragments":["is_empty"]},{"Key":"Similarly is_empty","Fragments":["gets"]},{"Key":"is_empty gets","Fragments":["a"]},{"Key":"lot simpler","Fragments":["with"]},{"Key":"simpler with","Fragments":["none_of","that"]},{"Key":"Also, try","Fragments":["to"]},{"Key":"use !","Fragments":["rather"]},{"Key":"! rather","Fragments":["than"]},{"Key":"you oppose","Fragments":["named"]},{"Key":"oppose named","Fragments":["algorithms"]},{"Key":"reason, remember","Fragments":["that"]},{"Key":"you're iterating","Fragments":["over"]},{"Key":"entire range","Fragments":["like"]},{"Key":"range like","Fragments":["that"]},{"Key":"that (all","Fragments":["the"]},{"Key":"(all the","Fragments":["way"]},{"Key":"way from","Fragments":["begin"]},{"Key":"from begin","Fragments":["to"]},{"Key":"end, no","Fragments":["skips"]},{"Key":"no skips","Fragments":["no"]},{"Key":"skips no","Fragments":["shortcuts,"]},{"Key":"no shortcuts,","Fragments":["no"]},{"Key":"shortcuts, no","Fragments":["sub-range,"]},{"Key":"no sub-range,","Fragments":["etc.)"]},{"Key":"sub-range, etc.)","Fragments":["you"]},{"Key":"etc.) you","Fragments":["can"]},{"Key":"can usually","Fragments":["use"]},{"Key":"usually use","Fragments":["a"]},{"Key":": sentence","Fragments":[")"]},{"Key":"sentence )","Fragments":["{"]},{"Key":"( !std::isblank(c)","Fragments":[")"]},{"Key":"!std::isblank(c) )","Fragments":["return"]},{"Key":"you *are*","Fragments":["going"]},{"Key":"*are* going","Fragments":["to"]},{"Key":"declare something","Fragments":["of","auto","like"]},{"Key":"something of","Fragments":["iterator"]},{"Key":"of iterator","Fragments":["type,"]},{"Key":"iterator type,","Fragments":["better"]},{"Key":"type, better","Fragments":["not"]},{"Key":"couple it","Fragments":["to"]},{"Key":"type so","Fragments":["that"]},{"Key":"that changing","Fragments":["containers"]},{"Key":"changing containers","Fragments":["is"]},{"Key":"mistakes harder","Fragments":["(also"]},{"Key":"harder (also","Fragments":["for"]},{"Key":"(also for","Fragments":["readability):"]},{"Key":"auto it","Fragments":["=","=",":"]},{"Key":"= sentence.begin();","Fragments":["//..."]},{"Key":"that auto","Fragments":["only"]},{"Key":"auto only","Fragments":["working","gives"]},{"Key":"only working","Fragments":["on"]},{"Key":"something auto","Fragments":["and"]},{"Key":"then give","Fragments":["it"]},{"Key":"value later.","Fragments":["And"]},{"Key":"later. And","Fragments":["that's"]},{"Key":"doesn't play","Fragments":["nicely"]},{"Key":"play nicely","Fragments":["with"]},{"Key":"nicely with","Fragments":["std::tie"]},{"Key":"with std::tie","Fragments":["(another"]},{"Key":"std::tie (another","Fragments":["vaguely"]},{"Key":"(another vaguely","Fragments":["pythonesque"]},{"Key":"vaguely pythonesque","Fragments":["new"]},{"Key":"pythonesque new","Fragments":["feature"]},{"Key":"new feature","Fragments":["-"]},{"Key":"feature -","Fragments":["for"]},{"Key":"assigning std::tuples","Fragments":["into"]},{"Key":"std::tuples into","Fragments":["multiple"]},{"Key":"into multiple","Fragments":["variables).","small"]},{"Key":"Also, auto","Fragments":["only"]},{"Key":"only gives","Fragments":["you"]},{"Key":"base type,","Fragments":["not"]},{"Key":"complete type","Fragments":["like"]},{"Key":"like decltype","Fragments":["(read"]},{"Key":"decltype (read","Fragments":["as"]},{"Key":"(read as","Fragments":["declared"]},{"Key":"as declared","Fragments":["type)"]},{"Key":"declared type)","Fragments":["would."]},{"Key":"type) would.","Fragments":["So"]},{"Key":"would. So","Fragments":["auto"]},{"Key":"So auto","Fragments":["strips"]},{"Key":"auto strips","Fragments":["off"]},{"Key":"strips off","Fragments":["all"]},{"Key":"the const,","Fragments":["volatile,"]},{"Key":"const, volatile,","Fragments":["mutable,"]},{"Key":"volatile, mutable,","Fragments":["and"]},{"Key":"mutable, and","Fragments":["any"]},{"Key":"and any","Fragments":["number"]},{"Key":"any number","Fragments":["of","of"]},{"Key":"of \u0026","Fragments":["(no"]},{"Key":"\u0026 (no","Fragments":["more"]},{"Key":"(no more","Fragments":["references"]},{"Key":"more references","Fragments":["of"]},{"Key":"any kind).","Fragments":["auto"]},{"Key":"kind). auto","Fragments":["x"]},{"Key":"auto x","Fragments":["="]},{"Key":"x =","Fragments":["blah;","blah;","{0,"]},{"Key":"= blah;","Fragments":["always"]},{"Key":"blah; always","Fragments":["constructs"]},{"Key":"always constructs","Fragments":["a"]},{"Key":"new whatever-x-is.","Fragments":["If"]},{"Key":"whatever-x-is. If","Fragments":["you"]},{"Key":"reference you","Fragments":["have"]},{"Key":"say auto\u0026","Fragments":["x"]},{"Key":"auto\u0026 x","Fragments":["="]},{"Key":"$g++ -xc++","Fragments":["-std=c++1y","-std=c++1y"]},{"Key":"-xc++ -std=c++1y","Fragments":["-","-"]},{"Key":"int constant","Fragments":["="]},{"Key":"constant =","Fragments":["3;"]},{"Key":" int\u0026","Fragments":["foo()"]},{"Key":"int\u0026 foo()","Fragments":["{"]},{"Key":"foo() {","Fragments":["return"]},{"Key":"return constant;","Fragments":["}"]},{"Key":" decltype(foo())","Fragments":["j"]},{"Key":"decltype(foo()) j","Fragments":["="]},{"Key":"\u003c\u003c i","Fragments":["\u003c\u003c","\u003c\u003c","\u003c\u003c","\u003c\u003c"]},{"Key":"i \u003c\u003c","Fragments":["j","j","\":","endl;"]},{"Key":"\u003c\u003c j","Fragments":["\u003c\u003c","\u003c\u003c"]},{"Key":"j \u003c\u003c","Fragments":["'\\n';","'\\n';"]},{"Key":"const doesn't","Fragments":["really"]},{"Key":"really prevent","Fragments":["race"]},{"Key":"prevent race","Fragments":["conditions."]},{"Key":"conditions. Not","Fragments":["mutating"]},{"Key":"Not mutating","Fragments":["the"]},{"Key":"mutating the","Fragments":["same"]},{"Key":"different threads","Fragments":["will"]},{"Key":"threads will","Fragments":["prevent"]},{"Key":"prevent it,","Fragments":["so"]},{"Key":"guess there's","Fragments":["that,"]},{"Key":"there's that,","Fragments":["but"]},{"Key":"but const","Fragments":["makes"]},{"Key":"const makes","Fragments":["no"]},{"Key":"guarantees -","Fragments":["there's"]},{"Key":"always const_cast","Fragments":["-"]},{"Key":"const_cast -","Fragments":["it's"]},{"Key":"a tool","Fragments":["for"]},{"Key":"tool for","Fragments":["contracts","the","matching"]},{"Key":"for contracts","Fragments":["you"]},{"Key":"contracts you","Fragments":["make"]},{"Key":"other parts","Fragments":["of"]},{"Key":"similar syntactically","Fragments":["to"]},{"Key":"syntactically to","Fragments":["the"]},{"Key":"way variables","Fragments":["are"]},{"Key":"are declared","Fragments":["in"]},{"Key":"in python,","Fragments":["but"]},{"Key":"python, but","Fragments":["there's"]},{"Key":"really critical","Fragments":["differences."]},{"Key":"critical differences.","Fragments":["The"]},{"Key":"differences. The","Fragments":["type"]},{"Key":"something declared","Fragments":["with"]},{"Key":"determined at","Fragments":["compile"]},{"Key":"time at","Fragments":["the"]},{"Key":"declared and","Fragments":["may"]},{"Key":"and may","Fragments":["not","not","take","'anecdotally'"]},{"Key":" \u003e\u003e\u003e","Fragments":["i=1","type(i)","i='hi'","type(i)"]},{"Key":" \u003ctype","Fragments":["'int'\u003e","'str'\u003e"]},{"Key":" \u003cstdin\u003e:","Fragments":["In"]},{"Key":"\u003cstdin\u003e: In","Fragments":["function"]},{"Key":" \u003cstdin\u003e:4:2:","Fragments":["error:"]},{"Key":"\u003cstdin\u003e:4:2: error:","Fragments":["invalid"]},{"Key":"error: invalid","Fragments":["conversion"]},{"Key":"invalid conversion","Fragments":["from"]},{"Key":"‘const char*’","Fragments":["to"]},{"Key":"char*’ to","Fragments":["‘int’"]},{"Key":"to ‘int’","Fragments":["[-fpermissive]"]},{"Key":"C++ version","Fragments":["i"]},{"Key":"i is","Fragments":["an"]},{"Key":"because 0","Fragments":["is"]},{"Key":"0 is","Fragments":["determined"]},{"Key":"determined to","Fragments":["be"]},{"Key":"be int","Fragments":["by"]},{"Key":"int by","Fragments":["the"]},{"Key":"compiler, and","Fragments":["that's"]},{"Key":"that's that.","Fragments":["It's"]},{"Key":"never going","Fragments":["to"]},{"Key":"be anything","Fragments":["but"]},{"Key":"but int.","Fragments":["If"]},{"Key":"int. If","Fragments":["I"]},{"Key":"I typed","Fragments":["0ULL"]},{"Key":"typed 0ULL","Fragments":["instead"]},{"Key":"0ULL instead","Fragments":["it"]},{"Key":"instead it","Fragments":["would've"]},{"Key":"been an","Fragments":["unsigned"]},{"Key":"unsigned long","Fragments":["long","long","long","long"]},{"Key":"long long","Fragments":["for","int","int","can"]},{"Key":"long for","Fragments":["its"]},{"Key":"its entire","Fragments":["life."]},{"Key":"Removed method","Fragments":["is_blank"]},{"Key":"method is_blank","Fragments":["in"]},{"Key":"is_blank in","Fragments":["favor"]},{"Key":" Mmmh","Fragments":["god"]},{"Key":"Mmmh god","Fragments":["point"]},{"Key":"god point","Fragments":["i"]},{"Key":"point i","Fragments":["forgot"]},{"Key":"i forgot","Fragments":["that"]},{"Key":"underscore is","Fragments":["part"]},{"Key":"of ```","Fragments":["\\w"]},{"Key":"``` \\w","Fragments":["```."]},{"Key":"seems inconsistent,","Fragments":["but"]},{"Key":"inconsistent, but","Fragments":["it"]},{"Key":"seems there","Fragments":["may"]},{"Key":"there may","Fragments":["have"]},{"Key":"a medieval","Fragments":["convention"]},{"Key":"medieval convention","Fragments":["(not"]},{"Key":"convention (not","Fragments":["roman)"]},{"Key":"(not roman)","Fragments":["of"]},{"Key":"roman) of","Fragments":["brackets"]},{"Key":"of brackets","Fragments":["indicating"]},{"Key":"brackets indicating","Fragments":["to"]},{"Key":"indicating to","Fragments":["multiple"]},{"Key":"to multiple","Fragments":["by"]},{"Key":"multiple by","Fragments":["1000"]},{"Key":"by 1000","Fragments":["so"]},{"Key":" (i)","Fragments":["=","="]},{"Key":"(i) =","Fragments":["1000","1000"]},{"Key":" ((i))","Fragments":["=","was"]},{"Key":"((i)) =","Fragments":["1000000"]},{"Key":"i've seen","Fragments":["this"]},{"Key":"this described","Fragments":["differently"]},{"Key":"described differently","Fragments":["though"]},{"Key":"differently though","Fragments":["where"]},{"Key":"((i)) was","Fragments":["only"]},{"Key":"i might","Fragments":["go"]},{"Key":"first convention,","Fragments":["regardless"]},{"Key":"convention, regardless","Fragments":["of"]},{"Key":"of historical","Fragments":["accuracy,"]},{"Key":"historical accuracy,","Fragments":["just"]},{"Key":"accuracy, just","Fragments":["to"]},{"Key":"to finish","Fragments":["this"]},{"Key":"finish this","Fragments":["exercise"]},{"Key":" Appreciate","Fragments":["the","the","the","the"]},{"Key":"the reminder.","Fragments":["At"]},{"Key":"reminder. At","Fragments":["the"]},{"Key":"exercism client","Fragments":["did"]},{"Key":"client did","Fragments":["not"]},{"Key":"not support","Fragments":["multiple"]},{"Key":"support multiple","Fragments":["file"]},{"Key":"test so","Fragments":["that"]},{"Key":"that non","Fragments":["letter"]},{"Key":"non letter","Fragments":["chars","char"]},{"Key":"letter chars","Fragments":["are"]},{"Key":"are ignored.","Fragments":["An"]},{"Key":"ignored. An","Fragments":["alternative"]},{"Key":"return 0","Fragments":["when","if","if"]},{"Key":"0 when","Fragments":["a"]},{"Key":"letter char","Fragments":["is"]},{"Key":"detected which","Fragments":["would"]},{"Key":"implement if","Fragments":["desired."]},{"Key":"each syntax.","Fragments":["I"]},{"Key":"syntax. I","Fragments":["would've"]},{"Key":"( const","Fragments":["char"]},{"Key":"char c","Fragments":[":","in","in","in","in",":","=","="]},{"Key":": s","Fragments":[")",")"]},{"Key":"there anything","Fragments":["special","wrong"]},{"Key":"anything special","Fragments":["you"]},{"Key":"special you","Fragments":["have"]},{"Key":" Coincidentally","Fragments":["if"]},{"Key":"Coincidentally if","Fragments":["you"]},{"Key":"do arithmetic","Fragments":["operators"]},{"Key":"arithmetic operators","Fragments":["on"]},{"Key":"operators on","Fragments":["literals"]},{"Key":"on literals","Fragments":["even"]},{"Key":"literals even","Fragments":["in"]},{"Key":"in old","Fragments":["C++"]},{"Key":"old C++","Fragments":["that's"]},{"Key":"C++ that's","Fragments":["evaluated"]},{"Key":"that's evaluated","Fragments":["at"]},{"Key":"evaluated at","Fragments":["compile","compile"]},{"Key":"time. Like","Fragments":["1"]},{"Key":"Like 1","Fragments":["\u003c\u003c"]},{"Key":"\u003c\u003c 64.","Fragments":["But"]},{"Key":"64. But","Fragments":["it's"]},{"Key":"only relevant","Fragments":["if"]},{"Key":"relevant if","Fragments":["you"]},{"Key":"What's stdexcept","Fragments":["for?"]},{"Key":" clang++","Fragments":["gives"]},{"Key":"clang++ gives","Fragments":["me:"]},{"Key":" ./nucleotide_count.h:17:17:","Fragments":["error:"]},{"Key":"./nucleotide_count.h:17:17: error:","Fragments":["expected"]},{"Key":"error: expected","Fragments":["'('","‘(’","primary-expression","primary-expression","‘;’","primary-expression","‘)’","primary-expression"]},{"Key":"expected '('","Fragments":["after"]},{"Key":"'(' after","Fragments":["'for'"]},{"Key":"each (const","Fragments":["char","char","char","char"]},{"Key":"(const char","Fragments":["c","c","c","c","c"]},{"Key":"c in","Fragments":["s)","s)","s)","s)"]},{"Key":"1 error","Fragments":["generated."]},{"Key":" g++","Fragments":["gives","capacity.cpp"]},{"Key":"g++ gives","Fragments":["me:"]},{"Key":" nucleotide_count.h:","Fragments":["In"]},{"Key":"nucleotide_count.h: In","Fragments":["constructor"]},{"Key":"In constructor","Fragments":["‘dna::counter::counter(const"]},{"Key":"constructor ‘dna::counter::counter(const","Fragments":["string\u0026)’:"]},{"Key":" nucleotide_count.h:17:17:","Fragments":["error:"]},{"Key":"nucleotide_count.h:17:17: error:","Fragments":["expected"]},{"Key":"expected ‘(’","Fragments":["before"]},{"Key":"‘(’ before","Fragments":["‘each’"]},{"Key":" nucleotide_count.h:17:23:","Fragments":["error:"]},{"Key":"nucleotide_count.h:17:23: error:","Fragments":["expected"]},{"Key":"expected primary-expression","Fragments":["before","before","before","before"]},{"Key":"primary-expression before","Fragments":["‘const’","‘}’","‘}’","‘}’"]},{"Key":" nucleotide_count.h:17:40:","Fragments":["error:"]},{"Key":"nucleotide_count.h:17:40: error:","Fragments":["‘each’"]},{"Key":"error: ‘each’","Fragments":["was"]},{"Key":"‘each’ was","Fragments":["not"]},{"Key":" nucleotide_count.h:22:9:","Fragments":["error:","error:","error:","error:","error:"]},{"Key":"nucleotide_count.h:22:9: error:","Fragments":["expected","expected","expected","expected","expected"]},{"Key":"before ‘}’","Fragments":["token","token","token","token","token"]},{"Key":"expected ‘;’","Fragments":["before"]},{"Key":"‘;’ before","Fragments":["‘}’"]},{"Key":"expected ‘)’","Fragments":["before"]},{"Key":"‘)’ before","Fragments":["‘}’"]},{"Key":"have VS","Fragments":["2013,"]},{"Key":"VS 2013,","Fragments":["or"]},{"Key":"2013, or","Fragments":["a"]},{"Key":"personal copy","Fragments":["of"]},{"Key":"of Windows","Fragments":["for"]},{"Key":"Windows for","Fragments":["that"]},{"Key":"that matter.","Fragments":["At"]},{"Key":"matter. At","Fragments":["work"]},{"Key":"At work","Fragments":["we"]},{"Key":"work we","Fragments":["have","have"]},{"Key":"have Visual","Fragments":["Studio"]},{"Key":"Studio Professional","Fragments":["2012,"]},{"Key":"Professional 2012,","Fragments":["and"]},{"Key":"2012, and","Fragments":["it"]},{"Key":"it gives","Fragments":["me:"]},{"Key":" 1\u003e------","Fragments":["Build"]},{"Key":"1\u003e------ Build","Fragments":["started:"]},{"Key":"Build started:","Fragments":["Project:"]},{"Key":"started: Project:","Fragments":["unit_test,"]},{"Key":"Project: unit_test,","Fragments":["Configuration:"]},{"Key":"unit_test, Configuration:","Fragments":["Release"]},{"Key":"Configuration: Release","Fragments":["Win32"]},{"Key":"Release Win32","Fragments":["------"]},{"Key":" 1\u003e","Fragments":["a.cpp"]},{"Key":" 1\u003ec:\\users\\jturpish\\nucleotide_count.h(15):","Fragments":["error","error","error","error","error","error"]},{"Key":"1\u003ec:\\users\\jturpish\\nucleotide_count.h(15): error","Fragments":["C2143:","C2143:","C2143:","C2143:","C2059:","C2059:"]},{"Key":"error C2143:","Fragments":["syntax","syntax","syntax","syntax","syntax"]},{"Key":"C2143: syntax","Fragments":["error","error","error","error","error"]},{"Key":"syntax error","Fragments":[":",":",":",":",":",":",":"]},{"Key":"error :","Fragments":["missing","missing","missing","missing","','","')'","missing"]},{"Key":": missing","Fragments":["')'","';'","';'","';'","';'","function"]},{"Key":"missing ')'","Fragments":["before"]},{"Key":"')' before","Fragments":["'{'"]},{"Key":"missing ';'","Fragments":["before","before","before","before"]},{"Key":"';' before","Fragments":["'}'","','","'{'","'{'"]},{"Key":"error C2059:","Fragments":["syntax","syntax"]},{"Key":"C2059: syntax","Fragments":["error","error"]},{"Key":" 1\u003ec:\\users\\jturpish\\nucleotide_count.h(16):","Fragments":["error","error"]},{"Key":"1\u003ec:\\users\\jturpish\\nucleotide_count.h(16): error","Fragments":["C2143:","C2447:"]},{"Key":"error C2447:","Fragments":["'{'"]},{"Key":"C2447: '{'","Fragments":[":"]},{"Key":"'{' :","Fragments":["missing"]},{"Key":"missing function","Fragments":["header"]},{"Key":"function header","Fragments":["(old-style"]},{"Key":"header (old-style","Fragments":["formal"]},{"Key":"(old-style formal","Fragments":["list?)"]},{"Key":" ==========","Fragments":["Build:"]},{"Key":"========== Build:","Fragments":["0"]},{"Key":"Build: 0","Fragments":["succeeded,"]},{"Key":"0 succeeded,","Fragments":["1"]},{"Key":"succeeded, 1","Fragments":["failed,"]},{"Key":"1 failed,","Fragments":["0"]},{"Key":"failed, 0","Fragments":["up-to-date,"]},{"Key":"0 up-to-date,","Fragments":["0"]},{"Key":"up-to-date, 0","Fragments":["skipped"]},{"Key":"0 skipped","Fragments":["=========="]},{"Key":"way, a.cpp","Fragments":["is"]},{"Key":"a.cpp is","Fragments":["just"]},{"Key":" $cat","Fragments":["a.cpp"]},{"Key":"some interesting","Fragments":["points,"]},{"Key":"own convenience,","Fragments":["I'm"]},{"Key":"convenience, I'm","Fragments":["going"]},{"Key":"listen to","Fragments":["this"]},{"Key":" *Conventional","Fragments":["wisdom"]},{"Key":"*Conventional wisdom","Fragments":["says"]},{"Key":"wisdom says","Fragments":["that"]},{"Key":"never compare","Fragments":["two"]},{"Key":"floats for","Fragments":["equality"]},{"Key":"equality –","Fragments":["you"]},{"Key":"– you","Fragments":["should"]},{"Key":"an epsilon.","Fragments":["Conventional"]},{"Key":"epsilon. Conventional","Fragments":["wisdom"]},{"Key":"Conventional wisdom","Fragments":["is"]},{"Key":"wisdom is","Fragments":["wrong."]},{"Key":" I’ve","Fragments":["written"]},{"Key":"I’ve written","Fragments":["in"]},{"Key":"in great","Fragments":["detail"]},{"Key":"great detail","Fragments":["about"]},{"Key":"detail about","Fragments":["how"]},{"Key":"compare floating-point","Fragments":["values"]},{"Key":"floating-point values","Fragments":["using"]},{"Key":"values using","Fragments":["an"]},{"Key":"an epsilon,","Fragments":["but"]},{"Key":"epsilon, but","Fragments":["there"]},{"Key":"not appropriate.","Fragments":["Sometimes"]},{"Key":"appropriate. Sometimes","Fragments":["there"]},{"Key":"Sometimes there","Fragments":["really"]},{"Key":"there really","Fragments":["is"]},{"Key":"an answer","Fragments":["that","different"]},{"Key":"answer that","Fragments":["is"]},{"Key":"correct, and","Fragments":["in"]},{"Key":"cases anything","Fragments":["less"]},{"Key":"anything less","Fragments":["than"]},{"Key":"than perfection","Fragments":["is"]},{"Key":"perfection is","Fragments":["just"]},{"Key":" what's","Fragments":["your"]},{"Key":"what's your","Fragments":["new","take"]},{"Key":"* `letter`","Fragments":["is"]},{"Key":"`letter` is","Fragments":["of"]},{"Key":"type `char`,","Fragments":["so"]},{"Key":"`char`, so","Fragments":["is"]},{"Key":"so is","Fragments":["`'0'`."]},{"Key":"is `'0'`.","Fragments":["So"]},{"Key":"`'0'`. So","Fragments":["writing"]},{"Key":"So writing","Fragments":["`letter"]},{"Key":"writing `letter","Fragments":["\u003e="]},{"Key":"`letter \u003e=","Fragments":["'0'`"]},{"Key":"\u003e= '0'`","Fragments":["is"]},{"Key":"'0'` is","Fragments":["much"]},{"Key":"than comparing","Fragments":["it","each"]},{"Key":"magic integer.","Fragments":["Same"]},{"Key":"integer. Same","Fragments":["apllies"]},{"Key":"Same apllies","Fragments":["for"]},{"Key":"apllies for","Fragments":["the"]},{"Key":"other 3","Fragments":["compare"]},{"Key":"3 compare","Fragments":["operations."]},{"Key":"is OK","Fragments":["to"]},{"Key":"declare `num_l`","Fragments":["in"]},{"Key":"`num_l` in","Fragments":["the"]},{"Key":"outer loop.","Fragments":["The"]},{"Key":"loop. The","Fragments":["way"]},{"Key":"does exist","Fragments":["in"]},{"Key":"a scope","Fragments":["it","as"]},{"Key":"belong to.","Fragments":["But"]},{"Key":"to. But","Fragments":["that's"]},{"Key":"rather minor","Fragments":["nit."]},{"Key":"really hunting","Fragments":["for"]},{"Key":"hunting for","Fragments":["performance,"]},{"Key":"for performance,","Fragments":["use"]},{"Key":"performance, use","Fragments":["`\u003c\u003c=`"]},{"Key":"use `\u003c\u003c=`","Fragments":["and"]},{"Key":"`\u003c\u003c=` and","Fragments":["`|=`"]},{"Key":"and `|=`","Fragments":["instead"]},{"Key":"`|=` instead","Fragments":["of"]},{"Key":"of `*=`","Fragments":["and"]},{"Key":"`*=` and","Fragments":["`+=`"]},{"Key":"faster. Thanks","Fragments":["for"]},{"Key":"header too.","Fragments":["I'm"]},{"Key":"too. I'm","Fragments":["glad"]},{"Key":"single static","Fragments":["member","function"]},{"Key":"using braces","Fragments":["around"]},{"Key":"around single","Fragments":["statements"]},{"Key":"single statements","Fragments":["can"]},{"Key":"statements can","Fragments":["seem","be"]},{"Key":"can seem","Fragments":["like"]},{"Key":"like overkill.","Fragments":["I've"]},{"Key":"overkill. I've","Fragments":["also"]},{"Key":"also had","Fragments":["to"]},{"Key":"maintain too","Fragments":["much"]},{"Key":"too easily","Fragments":["broken"]},{"Key":"easily broken","Fragments":["because"]},{"Key":"broken because","Fragments":["of"]},{"Key":"people not","Fragments":["being"]},{"Key":"being clear","Fragments":["about","about"]},{"Key":"clear about","Fragments":["things","its"]},{"Key":"about things","Fragments":["like"]},{"Key":"right call","Fragments":["to"]},{"Key":"more points","Fragments":["I'll"]},{"Key":"points I'll","Fragments":["harp"]},{"Key":"I'll harp","Fragments":["on."]},{"Key":"harp on.","Fragments":["The"]},{"Key":"and (in","Fragments":["my"]},{"Key":"my mind)","Fragments":["most"]},{"Key":"mind) most","Fragments":["serious"]},{"Key":"most serious","Fragments":["is"]},{"Key":"serious is","Fragments":["on"]},{"Key":"lines 63-64.","Fragments":["You've"]},{"Key":"63-64. You've","Fragments":["used"]},{"Key":"You've used","Fragments":["a","it"]},{"Key":"pretty old","Fragments":["style"]},{"Key":"old style","Fragments":["of"]},{"Key":"C++ by","Fragments":["instancing"]},{"Key":"by instancing","Fragments":["your"]},{"Key":"instancing your","Fragments":["iteration"]},{"Key":"It dates","Fragments":["back"]},{"Key":"dates back","Fragments":["to"]},{"Key":"the bad","Fragments":["old"]},{"Key":"bad old","Fragments":["days"]},{"Key":"old days","Fragments":["when"]},{"Key":"days when","Fragments":["C++"]},{"Key":"when C++","Fragments":["was"]},{"Key":"well standardized","Fragments":["and"]},{"Key":"standardized and","Fragments":["this"]},{"Key":"code `for","Fragments":["(int"]},{"Key":"`for (int","Fragments":["i","i","i"]},{"Key":"(int i","Fragments":["=","=","=","="]},{"Key":"\u003c WHATEVER;","Fragments":["++i)`"]},{"Key":"WHATEVER; ++i)`","Fragments":["would"]},{"Key":"++i)` would","Fragments":["behave"]},{"Key":"would behave","Fragments":["differently","the"]},{"Key":"behave differently","Fragments":["on"]},{"Key":"differently on","Fragments":["different"]},{"Key":"on different","Fragments":["compilers."]},{"Key":"different compilers.","Fragments":["Specifically,"]},{"Key":"compilers. Specifically,","Fragments":["some"]},{"Key":"Specifically, some","Fragments":["would"]},{"Key":"some would","Fragments":["limit","have"]},{"Key":"would limit","Fragments":["the"]},{"Key":"of `i`","Fragments":["to"]},{"Key":"`i` to","Fragments":["that"]},{"Key":"loop, while","Fragments":["others"]},{"Key":"while others","Fragments":["would"]},{"Key":"others would","Fragments":["pull"]},{"Key":"would pull","Fragments":["`i`"]},{"Key":"pull `i`","Fragments":["out"]},{"Key":"`i` out","Fragments":["into"]},{"Key":"the containing","Fragments":["scope."]},{"Key":"containing scope.","Fragments":["So"]},{"Key":"scope. So","Fragments":["if"]},{"Key":"wrote your","Fragments":["for"]},{"Key":"loops that","Fragments":["way","do","you"]},{"Key":"had two","Fragments":["within"]},{"Key":"two within","Fragments":["the"]},{"Key":"same scope","Fragments":["and"]},{"Key":"and both","Fragments":["used","would","would"]},{"Key":"both used","Fragments":["`i`"]},{"Key":"used `i`","Fragments":["some"]},{"Key":"`i` some","Fragments":["compilers"]},{"Key":"some compilers","Fragments":["would"]},{"Key":"compilers would","Fragments":["be","behave"]},{"Key":"happy and","Fragments":["some"]},{"Key":"To prevent","Fragments":["that,","direct","the"]},{"Key":"prevent that,","Fragments":["developers"]},{"Key":"that, developers","Fragments":["would"]},{"Key":"developers would","Fragments":["instance"]},{"Key":"would instance","Fragments":["the"]},{"Key":"instance the","Fragments":["iteration"]},{"Key":"the iteration","Fragments":["variable"]},{"Key":"variable explicitly","Fragments":["outside"]},{"Key":"explicitly outside","Fragments":["of"]},{"Key":"for loop's","Fragments":["scope."]},{"Key":"loop's scope.","Fragments":["Then"]},{"Key":"scope. Then","Fragments":["all"]},{"Key":"Then all","Fragments":["the"]},{"Key":"the compilers","Fragments":["would","are","have"]},{"Key":"These days","Fragments":["the"]},{"Key":"days the","Fragments":["standard"]},{"Key":"standard is","Fragments":["quite"]},{"Key":"quite explicit","Fragments":["about"]},{"Key":"such variables,","Fragments":["and"]},{"Key":"and compilers","Fragments":["have"]},{"Key":"compilers have","Fragments":["become","plenty"]},{"Key":"become much","Fragments":["more"]},{"Key":"more standardized.","Fragments":["Unless"]},{"Key":"standardized. Unless","Fragments":["you"]},{"Key":"compelling reason","Fragments":["to"]},{"Key":"declare `i`","Fragments":["outside"]},{"Key":"`i` outside","Fragments":["of"]},{"Key":"loop, it","Fragments":["should"]},{"Key":"declared in-line.","Fragments":["So"]},{"Key":"in-line. So","Fragments":["line"]},{"Key":"So line","Fragments":["64","37"]},{"Key":"line 64","Fragments":["would"]},{"Key":"64 would","Fragments":["become"]},{"Key":"become `for(int","Fragments":["i"]},{"Key":"`for(int i","Fragments":["=","="]},{"Key":"= bobHears.length()-1;","Fragments":["i"]},{"Key":"bobHears.length()-1; i","Fragments":["\u003e="]},{"Key":"\u003e= 0;","Fragments":["i--)`.","i--,"]},{"Key":"This matches","Fragments":["up"]},{"Key":"matches up","Fragments":["with"]},{"Key":"thumb for","Fragments":["C++."]},{"Key":"for C++.","Fragments":["Always","I'm"]},{"Key":"C++. Always","Fragments":["declare"]},{"Key":"Always declare","Fragments":["variables"]},{"Key":"possible in","Fragments":["as","such"]},{"Key":"in as","Fragments":["narrow","a","a","a"]},{"Key":"as narrow","Fragments":["a"]},{"Key":"narrow a","Fragments":["scope"]},{"Key":"scope as","Fragments":["possible.","well"]},{"Key":"second has","Fragments":["to"]},{"Key":"fun gotcha","Fragments":["which"]},{"Key":"gotcha which","Fragments":["the"]},{"Key":"the standards","Fragments":["committee"]},{"Key":"standards committee","Fragments":["thankfully"]},{"Key":"committee thankfully","Fragments":["gave"]},{"Key":"thankfully gave","Fragments":["us"]},{"Key":"gave us","Fragments":["a"]},{"Key":"us a","Fragments":["solution","little"]},{"Key":"solution for.","Fragments":["The"]},{"Key":"for. The","Fragments":["syntax"]},{"Key":"The syntax","Fragments":["on"]},{"Key":"syntax on","Fragments":["line","line"]},{"Key":"line 37","Fragments":["is","would"]},{"Key":"37 is","Fragments":["declaring"]},{"Key":"is declaring","Fragments":["and"]},{"Key":"declaring and","Fragments":["initializing"]},{"Key":"initializing a","Fragments":["bool."]},{"Key":"a bool.","Fragments":["But","Can"]},{"Key":"bool. But","Fragments":["you"]},{"Key":"might notice","Fragments":["how"]},{"Key":"notice how","Fragments":["similar"]},{"Key":"similar it","Fragments":["looks"]},{"Key":"declaration. In","Fragments":["fact,"]},{"Key":"fact, if","Fragments":["the","you"]},{"Key":"compiler didn't","Fragments":["know"]},{"Key":"what `false`","Fragments":["was,"]},{"Key":"`false` was,","Fragments":["it"]},{"Key":"was, it","Fragments":["would"]},{"Key":"be indistinguishable","Fragments":["from"]},{"Key":"declaration. This","Fragments":["is"]},{"Key":"situation known","Fragments":["as"]},{"Key":"parse\". Google","Fragments":["it"]},{"Key":"Google it","Fragments":["for"]},{"Key":"more info.","Fragments":["Best"]},{"Key":"info. Best","Fragments":["practice"]},{"Key":"Best practice","Fragments":["these"]},{"Key":"practice these","Fragments":["days"]},{"Key":"days is","Fragments":["to"]},{"Key":"the shiny","Fragments":["new"]},{"Key":"shiny new","Fragments":["(as"]},{"Key":"new (as","Fragments":["of"]},{"Key":"(as of","Fragments":["2011)"]},{"Key":"of 2011)","Fragments":["uniform"]},{"Key":"2011) uniform","Fragments":["initialization"]},{"Key":"initialization syntax","Fragments":["whenever"]},{"Key":"syntax whenever","Fragments":["possible."]},{"Key":"whenever possible.","Fragments":["So"]},{"Key":"37 would","Fragments":["look"]},{"Key":"like `bool","Fragments":["containsUpper"]},{"Key":"`bool containsUpper","Fragments":["{false};`"]},{"Key":"best part","Fragments":["of"]},{"Key":"that syntax","Fragments":["is"]},{"Key":"primitives, objects,","Fragments":["and"]},{"Key":"objects, and","Fragments":["arrays."]},{"Key":"and arrays.","Fragments":["Hence"]},{"Key":"arrays. Hence","Fragments":["the"]},{"Key":"Hence the","Fragments":["name"]},{"Key":"Here's a","Fragments":["fun"]},{"Key":"fun fact","Fragments":["to"]},{"Key":"close with.","Fragments":["At"]},{"Key":"with. At","Fragments":["Adobe,"]},{"Key":"At Adobe,","Fragments":["it's"]},{"Key":"Adobe, it's","Fragments":["considered"]},{"Key":"it's considered","Fragments":["very","too"]},{"Key":"considered very","Fragments":["bad"]},{"Key":"very bad","Fragments":["practice"]},{"Key":"write C++","Fragments":["code"]},{"Key":"C++ code","Fragments":["with"]},{"Key":"with old-style","Fragments":["for"]},{"Key":"old-style for","Fragments":["loops"]},{"Key":"loops (as","Fragments":["in"]},{"Key":"(as in","Fragments":["`for","test"]},{"Key":"in `for","Fragments":["(int"]},{"Key":"\u003c BLAH;","Fragments":["++i)`)."]},{"Key":"BLAH; ++i)`).","Fragments":["Range-based"]},{"Key":"++i)`). Range-based","Fragments":["for"]},{"Key":"Range-based for","Fragments":["loops"]},{"Key":"loops (`for","Fragments":["(auto"]},{"Key":"(auto value","Fragments":[":"]},{"Key":"value :","Fragments":["values)`)","msg)"]},{"Key":": values)`)","Fragments":["are"]},{"Key":"values)`) are","Fragments":["considered"]},{"Key":"considered okay.","Fragments":["But"]},{"Key":"okay. But","Fragments":["for"]},{"Key":"for anything","Fragments":["other","that"]},{"Key":"anything other","Fragments":["than","than"]},{"Key":"that simple","Fragments":["usage"]},{"Key":"simple usage","Fragments":["it's"]},{"Key":"usage it's","Fragments":["considered"]},{"Key":"considered too","Fragments":["complicated"]},{"Key":"too complicated","Fragments":["and"]},{"Key":"complicated and","Fragments":["error"]},{"Key":"use hand-written","Fragments":["for"]},{"Key":"hand-written for","Fragments":["loops."]},{"Key":"loops. Instead,","Fragments":["wherever"]},{"Key":"Instead, wherever","Fragments":["possible,"]},{"Key":"possible, they","Fragments":["use"]},{"Key":"use algorithm","Fragments":["calls."]},{"Key":" Check","Fragments":["out","the","the"]},{"Key":"out http://www.cplusplus.com/reference/algorithm/","Fragments":["for"]},{"Key":"http://www.cplusplus.com/reference/algorithm/ for","Fragments":["all"]},{"Key":"the algorithms","Fragments":["(except","myself.","are","offered"]},{"Key":"algorithms (except","Fragments":["for"]},{"Key":"(except for","Fragments":["the"]},{"Key":"the \"numeric\"","Fragments":["algorithms"]},{"Key":"\"numeric\" algorithms","Fragments":["which"]},{"Key":"algorithms which","Fragments":["are","perform","I"]},{"Key":"numeric header).","Fragments":["In"]},{"Key":"header). In","Fragments":["general"]},{"Key":"general they","Fragments":["make"]},{"Key":"code shorter,","Fragments":["easier"]},{"Key":"shorter, easier","Fragments":["to"]},{"Key":"read, and","Fragments":["less"]},{"Key":"less error","Fragments":["prone."]},{"Key":"error prone.","Fragments":["And"]},{"Key":"prone. And","Fragments":["modern"]},{"Key":"And modern","Fragments":["compilers"]},{"Key":"compilers being","Fragments":["what"]},{"Key":"being what","Fragments":["they"]},{"Key":"they are,","Fragments":["they"]},{"Key":"are, they","Fragments":["offer"]},{"Key":"they offer","Fragments":["identical"]},{"Key":"offer identical","Fragments":["performance"]},{"Key":"identical performance","Fragments":["to"]},{"Key":"performance to","Fragments":["implementing"]},{"Key":"to implementing","Fragments":["them"]},{"Key":"implementing them","Fragments":["in-line"]},{"Key":"them in-line","Fragments":["yourself."]},{"Key":"i felt","Fragments":["the"]},{"Key":"felt the","Fragments":["same,"]},{"Key":"the 'no-need'","Fragments":["refactor..."]},{"Key":" @zelma","Fragments":["Thanks","Thanks"]},{"Key":"was painful","Fragments":["-"]},{"Key":"painful -","Fragments":["there"]},{"Key":"many special","Fragments":["cases"]},{"Key":"cases it's","Fragments":["a"]},{"Key":"real nuisance","Fragments":["to"]},{"Key":"nuisance to","Fragments":["keep"]},{"Key":"what suffix","Fragments":["goes"]},{"Key":"suffix goes","Fragments":["where,"]},{"Key":"goes where,","Fragments":["and"]},{"Key":"where, and","Fragments":["whether"]},{"Key":"to wait","Fragments":["til"]},{"Key":"wait til","Fragments":["the"]},{"Key":"til the","Fragments":["next"]},{"Key":"next loop","Fragments":["to"]},{"Key":"add it","Fragments":["etc.","to","to"]},{"Key":"ways the","Fragments":["code"]},{"Key":"made easier","Fragments":["to"]},{"Key":"a simplified","Fragments":["solution","example"]},{"Key":"simplified solution","Fragments":["compared"]},{"Key":"solution compared","Fragments":["to"]},{"Key":"two functional","Fragments":["programming"]},{"Key":"programming approaches.","Fragments":["I've"]},{"Key":"approaches. I've","Fragments":["been"]},{"Key":"been on","Fragments":["an"]},{"Key":"an FP","Fragments":["kick"]},{"Key":"FP kick","Fragments":["lately"]},{"Key":"kick lately","Fragments":["with"]},{"Key":"lately with","Fragments":["Scala,"]},{"Key":"with Scala,","Fragments":["Clojure"]},{"Key":"Scala, Clojure","Fragments":["and"]},{"Key":"Clojure and","Fragments":["(to"]},{"Key":"and (to","Fragments":["a"]},{"Key":"a lesser","Fragments":["degree)"]},{"Key":"lesser degree)","Fragments":["JavaScript,"]},{"Key":"degree) JavaScript,","Fragments":["so"]},{"Key":"JavaScript, so","Fragments":["I've"]},{"Key":"I've sometimes","Fragments":["been"]},{"Key":"sometimes been","Fragments":["gravitating"]},{"Key":"been gravitating","Fragments":["toward"]},{"Key":"gravitating toward","Fragments":["those"]},{"Key":"toward those","Fragments":["types"]},{"Key":"of solutions","Fragments":["using","on"]},{"Key":"using algorithms","Fragments":["in"]},{"Key":"algorithms in","Fragments":["`std`"]},{"Key":"in `std`","Fragments":["first"]},{"Key":"`std` first","Fragments":["when"]},{"Key":"first when","Fragments":["working"]},{"Key":"C++ rather","Fragments":["than"]},{"Key":"than going","Fragments":["for"]},{"Key":"Anyway, if","Fragments":["you"]},{"Key":"you care","Fragments":["to"]},{"Key":"care to","Fragments":["comment"]},{"Key":"solution, please","Fragments":["also"]},{"Key":"please also","Fragments":["look"]},{"Key":"also look","Fragments":["at"]},{"Key":"two and","Fragments":["let"]},{"Key":"any thoughts","Fragments":["on"]},{"Key":"the pros","Fragments":["and","and"]},{"Key":"pros and","Fragments":["cons","cons"]},{"Key":"and cons","Fragments":["between","of"]},{"Key":"cons between","Fragments":["functional"]},{"Key":"between functional","Fragments":["and"]},{"Key":"functional and","Fragments":["dead-simple"]},{"Key":"and dead-simple","Fragments":["imperative"]},{"Key":"dead-simple imperative","Fragments":["loop"]},{"Key":"imperative loop","Fragments":["solutions"]},{"Key":"loop solutions","Fragments":["in"]},{"Key":"solutions in","Fragments":["C++","other","other"]},{"Key":"for problems","Fragments":["in"]},{"Key":" Depending","Fragments":["upon"]},{"Key":"Depending upon","Fragments":["the"]},{"Key":"upon the","Fragments":["compiler","first"]},{"Key":"compiler and","Fragments":["C++"]},{"Key":"C++ STL","Fragments":["implementation,","functionality"]},{"Key":"STL implementation,","Fragments":["comparing"]},{"Key":"implementation, comparing","Fragments":["the"]},{"Key":"string lengths","Fragments":["before","first--both"]},{"Key":"lengths before","Fragments":["comparing"]},{"Key":"strings themselves","Fragments":["can"]},{"Key":"themselves can","Fragments":["be"]},{"Key":"optimization. As","Fragments":["near"]},{"Key":"As near","Fragments":["as"]},{"Key":"near as","Fragments":["I"]},{"Key":"tell in","Fragments":["looking"]},{"Key":"in looking","Fragments":["at"]},{"Key":"at generated","Fragments":["assembly"]},{"Key":"generated assembly","Fragments":["for"]},{"Key":"assembly for","Fragments":["a"]},{"Key":"simplified example","Fragments":["of"]},{"Key":"equality test--with","Fragments":["and"]},{"Key":"test--with and","Fragments":["without"]},{"Key":"without comparing","Fragments":["string"]},{"Key":"comparing string","Fragments":["lengths"]},{"Key":"lengths first--both","Fragments":["g++"]},{"Key":"first--both g++","Fragments":["and"]},{"Key":"g++ and","Fragments":["clang++,"]},{"Key":"and clang++,","Fragments":["along"]},{"Key":"clang++, along","Fragments":["with"]},{"Key":"their associated","Fragments":["STL"]},{"Key":"associated STL","Fragments":["implementations,"]},{"Key":"STL implementations,","Fragments":["generate"]},{"Key":"implementations, generate","Fragments":["equivalent"]},{"Key":"generate equivalent","Fragments":["code"]},{"Key":"equivalent code","Fragments":["whether"]},{"Key":"code whether","Fragments":["the"]},{"Key":"explicitly coded","Fragments":["or"]},{"Key":"coded or","Fragments":["not."]},{"Key":"It's actually","Fragments":["quite"]},{"Key":"quite interesting","Fragments":["to"]},{"Key":"the `==`","Fragments":["operator"]},{"Key":"`==` operator","Fragments":["in"]},{"Key":"operator in","Fragments":["`bits/basic_string.h`.","the"]},{"Key":"in `bits/basic_string.h`.","Fragments":["It"]},{"Key":"`bits/basic_string.h`. It","Fragments":["checks"]},{"Key":"It checks","Fragments":["whether"]},{"Key":"checks whether","Fragments":["a","the","either"]},{"Key":"a `compare`","Fragments":["call"]},{"Key":"`compare` call","Fragments":["returns"]},{"Key":"call returns","Fragments":["zero"]},{"Key":"two strings,","Fragments":["while","but"]},{"Key":"strings, while","Fragments":["the"]},{"Key":"the `compare`","Fragments":["implementation"]},{"Key":"`compare` implementation","Fragments":["ultimately"]},{"Key":"implementation ultimately","Fragments":["compares"]},{"Key":"ultimately compares","Fragments":["the"]},{"Key":"strings char-for-char","Fragments":["for"]},{"Key":"char-for-char for","Fragments":["a"]},{"Key":"chars equal","Fragments":["to"]},{"Key":"smallest string","Fragments":["and,"]},{"Key":"string and,","Fragments":["if"]},{"Key":"and, if","Fragments":["the"]},{"Key":"equal up","Fragments":["to"]},{"Key":"that point,","Fragments":["the"]},{"Key":"point, the","Fragments":["lengths"]},{"Key":"are then","Fragments":["compared."]},{"Key":"then compared.","Fragments":["When"]},{"Key":"compared. When","Fragments":["I"]},{"Key":"saw this","Fragments":["I","solution"]},{"Key":"the generated","Fragments":["code","code."]},{"Key":"generated code","Fragments":["would"]},{"Key":"also compare","Fragments":["the"]},{"Key":"lengths *after*","Fragments":["comparing"]},{"Key":"*after* comparing","Fragments":["the"]},{"Key":"strings, but","Fragments":["that's"]},{"Key":"the case.","Fragments":["It"]},{"Key":"case. It","Fragments":["looks","seems"]},{"Key":"compilers are","Fragments":["hoisting"]},{"Key":"are hoisting","Fragments":["the"]},{"Key":"hoisting the","Fragments":["length"]},{"Key":"position *before*","Fragments":["the"]},{"Key":"*before* the","Fragments":["char-for-char"]},{"Key":"the char-for-char","Fragments":["comparison"]},{"Key":"char-for-char comparison","Fragments":["in"]},{"Key":"generated code.","Fragments":["This"]},{"Key":"This happens","Fragments":["even","because"]},{"Key":"happens even","Fragments":["when"]},{"Key":"even when","Fragments":["no","it","there"]},{"Key":"when no","Fragments":["`-O#`"]},{"Key":"no `-O#`","Fragments":["flags"]},{"Key":"`-O#` flags","Fragments":["are"]},{"Key":"flags are","Fragments":["supplied."]},{"Key":"are supplied.","Fragments":["The"]},{"Key":"supplied. The","Fragments":["fact"]},{"Key":"The fact","Fragments":["that"]},{"Key":"that strings","Fragments":["are"]},{"Key":"are templates","Fragments":["probably"]},{"Key":"templates probably","Fragments":["helps"]},{"Key":"probably helps","Fragments":["in"]},{"Key":"helps in","Fragments":["that","remembering"]},{"Key":"have plenty","Fragments":["of"]},{"Key":"on hand","Fragments":["to"]},{"Key":"determine that","Fragments":["short-circuiting"]},{"Key":"that short-circuiting","Fragments":["the"]},{"Key":"short-circuiting the","Fragments":["string"]},{"Key":"string comparison","Fragments":["in","method."]},{"Key":"way makes","Fragments":["sense"]},{"Key":"sense while","Fragments":["generating"]},{"Key":"while generating","Fragments":["code."]},{"Key":"Anyway, sorry","Fragments":["for"]},{"Key":"the overly","Fragments":["long"]},{"Key":"overly long","Fragments":["comment.","namespaces,"]},{"Key":"long comment.","Fragments":["I"]},{"Key":"comment. I","Fragments":["saw"]},{"Key":"the associated","Fragments":["comments"]},{"Key":"associated comments","Fragments":["revolving"]},{"Key":"comments revolving","Fragments":["around"]},{"Key":"revolving around","Fragments":["optimizations"]},{"Key":"around optimizations","Fragments":["which"]},{"Key":"optimizations which","Fragments":["prompted"]},{"Key":"which prompted","Fragments":["me"]},{"Key":"see whether","Fragments":["the"]},{"Key":"STL was","Fragments":["using"]},{"Key":"length comparisons","Fragments":["under"]},{"Key":"comparisons under","Fragments":["the"]},{"Key":"the hood","Fragments":["for"]},{"Key":"hood for","Fragments":["string"]},{"Key":"equality checks.","Fragments":["I"]},{"Key":"checks. I","Fragments":["hope"]},{"Key":"hope me","Fragments":["geeking"]},{"Key":"me geeking","Fragments":["out"]},{"Key":"geeking out","Fragments":["on"]},{"Key":"code generation","Fragments":["has"]},{"Key":"somewhat interesting","Fragments":["to"]},{"Key":"you and","Fragments":["whoever"]},{"Key":"and whoever","Fragments":["may"]},{"Key":"whoever may","Fragments":["happen"]},{"Key":"may happen","Fragments":["upon"]},{"Key":"happen upon","Fragments":["these"]},{"Key":"upon these","Fragments":["comments."]},{"Key":"these comments.","Fragments":[";-)"]},{"Key":" Nicely","Fragments":["spotted","done."]},{"Key":"Nicely spotted","Fragments":["@tianna!"]},{"Key":"spotted @tianna!","Fragments":["I"]},{"Key":"@tianna! I","Fragments":["intended"]},{"Key":"I intended","Fragments":["to"]},{"Key":"a const-reference","Fragments":["but"]},{"Key":"const-reference but","Fragments":["missed"]},{"Key":"but missed","Fragments":["the"]},{"Key":"response function","Fragments":["is"]},{"Key":"really needed","Fragments":["there.","to"]},{"Key":"needed there.","Fragments":["The"]},{"Key":"The function","Fragments":["classify_statement","`is_char_allowed()`","equals","more","is"]},{"Key":"function classify_statement","Fragments":["already"]},{"Key":"classify_statement already","Fragments":["did"]},{"Key":"the jod.","Fragments":["It"]},{"Key":"jod. It","Fragments":["could"]},{"Key":"response without","Fragments":["the"]},{"Key":"from Speech","Fragments":["to"]},{"Key":"Speech to","Fragments":["string"]},{"Key":"string done","Fragments":["by"]},{"Key":"can commit","Fragments":["both"]},{"Key":"commit both","Fragments":["files"]},{"Key":"once using","Fragments":["'exercism"]},{"Key":"using 'exercism","Fragments":["submit"]},{"Key":"'exercism submit","Fragments":["bob.h"]},{"Key":"function hey","Fragments":["in","in"]},{"Key":"hey in","Fragments":["a","a"]},{"Key":"bob instead","Fragments":["of","of"]},{"Key":"static method.","Fragments":["In","In","How"]},{"Key":"method. In","Fragments":["C++","C++"]},{"Key":"C++ it","Fragments":["is","is"]},{"Key":"most algorithms","Fragments":["are","are"]},{"Key":"just functions","Fragments":["inside","inside"]},{"Key":"functions inside","Fragments":["a","a","the"]},{"Key":"namespace (like","Fragments":["the","the"]},{"Key":"you encounter","Fragments":["some","a"]},{"Key":"encounter some","Fragments":["problems"]},{"Key":"some problems","Fragments":["while","with"]},{"Key":"problems while","Fragments":["implementing"]},{"Key":"while implementing","Fragments":["it?"]},{"Key":"use std::all_of,","Fragments":["however"]},{"Key":"std::all_of, however","Fragments":["you"]},{"Key":"call isupper,","Fragments":["you"]},{"Key":"isupper, you","Fragments":["can"]},{"Key":"it directly","Fragments":["as","modify"]},{"Key":"directly as","Fragments":["a"]},{"Key":"predicate for","Fragments":["the"]},{"Key":"your lambda","Fragments":["by"]},{"Key":"The \"problem\"","Fragments":["with"]},{"Key":"\"problem\" with","Fragments":["multiple"]},{"Key":"multiple variable","Fragments":["in"]},{"Key":"start doing","Fragments":["things"]},{"Key":"int a,","Fragments":["b,"]},{"Key":"a, b,","Fragments":["c,"]},{"Key":"b, c,","Fragments":["d"]},{"Key":"c, d","Fragments":["="]},{"Key":"d =","Fragments":["0;","0;","0;","0;"]},{"Key":"Only the","Fragments":["d","combination"]},{"Key":"the d","Fragments":["variable"]},{"Key":"d variable","Fragments":["is"]},{"Key":"is initialized.","Fragments":["This"]},{"Key":"initialized. This","Fragments":["might"]},{"Key":"This might","Fragments":["not","make","also"]},{"Key":"first glance.","Fragments":["Instead"]},{"Key":"glance. Instead","Fragments":["you"]},{"Key":"Instead you","Fragments":["should"]},{"Key":"int a","Fragments":["=","="]},{"Key":"0, b","Fragments":["="]},{"Key":"b =","Fragments":["0,","0;","0;"]},{"Key":"0, c","Fragments":["="]},{"Key":"0, d","Fragments":["="]},{"Key":"obvious by","Fragments":["declaring"]},{"Key":"each variable","Fragments":["on"]},{"Key":"variable on","Fragments":["a"]},{"Key":"int b","Fragments":["="]},{"Key":"int c","Fragments":["="]},{"Key":"int d","Fragments":["="]},{"Key":"really close","Fragments":["to"]},{"Key":"your indentation.","Fragments":["With"]},{"Key":"indentation. With","Fragments":["the"]},{"Key":"the C++11's","Fragments":["```auto```"]},{"Key":"C++11's ```auto```","Fragments":["keyword,"]},{"Key":"```auto``` keyword,","Fragments":["some"]},{"Key":"keyword, some","Fragments":["people"]},{"Key":"every variable","Fragments":["declaration"]},{"Key":"auto a","Fragments":["="]},{"Key":"auto b","Fragments":["="]},{"Key":"auto d","Fragments":["="]},{"Key":"Again, this","Fragments":["is"]},{"Key":"mostly a","Fragments":["question"]},{"Key":"question of","Fragments":["personal"]},{"Key":"in term","Fragments":["of"]},{"Key":"term of","Fragments":["memory"]},{"Key":"really big.","Fragments":["Four"]},{"Key":"big. Four","Fragments":["string"]},{"Key":"Four string","Fragments":["objects"]},{"Key":"string objects","Fragments":["will","uses"]},{"Key":"objects will","Fragments":["be"]},{"Key":"created and","Fragments":["the"]},{"Key":"the ```const","Fragments":["char"]},{"Key":"*``` into","Fragments":["their"]},{"Key":"their respective","Fragments":["internal"]},{"Key":"respective internal","Fragments":["buffer."]},{"Key":"internal buffer.","Fragments":["As"]},{"Key":"buffer. As","Fragments":["you"]},{"Key":"the constants,","Fragments":["it"]},{"Key":"constants, it","Fragments":["should"]},{"Key":"We then","Fragments":["come"]},{"Key":"then come","Fragments":["to"]},{"Key":"your function.","Fragments":["The","That"]},{"Key":"tests will","Fragments":["want","run"]},{"Key":"will want","Fragments":["to","to"]},{"Key":"the results,","Fragments":["for"]},{"Key":"results, for","Fragments":["sure."]},{"Key":"for sure.","Fragments":["But"]},{"Key":"sure. But","Fragments":["what"]},{"Key":"will a","Fragments":["\"real"]},{"Key":"a \"real","Fragments":["client\"","life\""]},{"Key":"\"real client\"","Fragments":["do?"]},{"Key":"client\" do?","Fragments":["In"]},{"Key":"do? In","Fragments":["my"]},{"Key":"opinion this","Fragments":["client"]},{"Key":"this client","Fragments":["will"]},{"Key":"use bob","Fragments":["as"]},{"Key":"bob as","Fragments":["a"]},{"Key":"a simulation","Fragments":["for"]},{"Key":"simulation for","Fragments":["a"]},{"Key":"a teenager.","Fragments":["It"]},{"Key":"teenager. It","Fragments":["will"]},{"Key":"just print","Fragments":["back"]},{"Key":"print back","Fragments":["the"]},{"Key":"back the","Fragments":["answer."]},{"Key":"the answer.","Fragments":["Therefore"]},{"Key":"answer. Therefore","Fragments":["I"]},{"Key":"responses should","Fragments":["be"]},{"Key":"the interface.","Fragments":["The"]},{"Key":"interface. The","Fragments":["same"]},{"Key":"same reflection","Fragments":["goes"]},{"Key":"reflection goes","Fragments":["for"]},{"Key":"for ```is_shouty```","Fragments":["and"]},{"Key":"```is_shouty``` and","Fragments":["```is_question```."]},{"Key":"Replaced for","Fragments":["loops"]},{"Key":"the boost::algorithm","Fragments":["version."]},{"Key":"boost::algorithm version.","Fragments":["Anyway"]},{"Key":"version. Anyway","Fragments":["you"]},{"Key":"Anyway you","Fragments":["already"]},{"Key":"a dependence","Fragments":["on"]},{"Key":"dependence on","Fragments":["boost::algorithm"]},{"Key":"on boost::algorithm","Fragments":["so"]},{"Key":"boost::algorithm so","Fragments":["you"]},{"Key":"to benefit","Fragments":["from"]},{"Key":"the improved","Fragments":["readability."]},{"Key":"improved readability.","Fragments":["If"]},{"Key":"readability. If","Fragments":["think"]},{"Key":"If think","Fragments":["the"]},{"Key":"the rbegin","Fragments":["comes"]},{"Key":"rbegin comes","Fragments":["next"]},{"Key":"comes next","Fragments":["and"]},{"Key":"next and","Fragments":["then"]},{"Key":"the indexed","Fragments":["on"]},{"Key":"indexed on","Fragments":["length"]},{"Key":"on length","Fragments":["-"]},{"Key":"length -","Fragments":["1."]},{"Key":"opinion you","Fragments":["should"]},{"Key":"use boost","Fragments":["if","tokenizer."]},{"Key":"boost if","Fragments":["it"]},{"Key":"reasonable for","Fragments":["your","readability."]},{"Key":"introduce such","Fragments":["a"]},{"Key":"a dependency.","Fragments":["This"]},{"Key":"dependency. This","Fragments":["is"]},{"Key":"is related","Fragments":["to"]},{"Key":"usage you","Fragments":["can"]},{"Key":"do of","Fragments":["boost"]},{"Key":"libraries but","Fragments":["also"]},{"Key":"also your","Fragments":["build"]},{"Key":"your build","Fragments":["environment,"]},{"Key":"build environment,","Fragments":["company"]},{"Key":"environment, company","Fragments":["policies..."]},{"Key":"are right","Fragments":["about","now","that"]},{"Key":"the premature","Fragments":["optimization."]},{"Key":"optimization. For","Fragments":["example"]},{"Key":"example I","Fragments":["don't","felt"]},{"Key":"think optimization","Fragments":["should"]},{"Key":"define if","Fragments":["you"]},{"Key":"use boost::algorithm::ends_with.","Fragments":["However"]},{"Key":"boost::algorithm::ends_with. However","Fragments":["you"]},{"Key":"also avoid","Fragments":["\"premature","having"]},{"Key":"avoid \"premature","Fragments":["pessimization\""]},{"Key":"\"premature pessimization\"","Fragments":["(as"]},{"Key":"pessimization\" (as","Fragments":["stated"]},{"Key":"(as stated","Fragments":["by"]},{"Key":"stated by","Fragments":["Herb"]},{"Key":"by Herb","Fragments":["Sutter"]},{"Key":"Herb Sutter","Fragments":["I"]},{"Key":"Sutter I","Fragments":["think)."]},{"Key":"I think).","Fragments":["Your"]},{"Key":"think). Your","Fragments":["previous"]},{"Key":"Your previous","Fragments":["implementation"]},{"Key":"previous implementation","Fragments":["of","for","I"]},{"Key":"of is_upper","Fragments":["performing"]},{"Key":"is_upper performing","Fragments":["a"]},{"Key":"performing a","Fragments":["copy"]},{"Key":"versions was","Fragments":["an"]},{"Key":"for brevity","Fragments":["and"]},{"Key":"brevity and","Fragments":["readability"]},{"Key":"and readability","Fragments":["over"]},{"Key":"readability over","Fragments":["efficiency."]},{"Key":"over efficiency.","Fragments":["But"]},{"Key":"efficiency. But","Fragments":["comments"]},{"Key":"But comments","Fragments":["appreciated"]},{"Key":"comments appreciated","Fragments":["on"]},{"Key":"appreciated on","Fragments":["any"]},{"Key":"on any","Fragments":["front."]},{"Key":"been using","Fragments":["regex","include","C#"]},{"Key":"regex instead","Fragments":["of","but"]},{"Key":"of raw","Fragments":["char"]},{"Key":"raw char","Fragments":["operations,"]},{"Key":"char operations,","Fragments":["because"]},{"Key":"operations, because","Fragments":["I"]},{"Key":"like they're","Fragments":["more"]},{"Key":"they're more","Fragments":["familiar"]},{"Key":"familiar to","Fragments":["most"]},{"Key":"Line 41","Fragments":["(`counter[w]++`)"]},{"Key":"41 (`counter[w]++`)","Fragments":["is"]},{"Key":"(`counter[w]++`) is","Fragments":["a"]},{"Key":"little tricky,","Fragments":["but"]},{"Key":"tricky, but","Fragments":["that"]},{"Key":"of post-increment","Fragments":["trick"]},{"Key":"post-increment trick","Fragments":["feels"]},{"Key":"trick feels","Fragments":["like"]},{"Key":"C++ idiom.","Fragments":["Maybe"]},{"Key":"idiom. Maybe","Fragments":["it"]},{"Key":"it warrants","Fragments":["a"]},{"Key":"warrants a","Fragments":["comment.","\"Whoa,"]},{"Key":"signed `int`","Fragments":["long"]},{"Key":"`int` long","Fragments":["enough"]},{"Key":"long enough","Fragments":["to","to"]},{"Key":"this function?","Fragments":["I"]},{"Key":"function? I","Fragments":["don't"]},{"Key":"how long","Fragments":["a"]},{"Key":"long a","Fragments":["strand"]},{"Key":"a strand","Fragments":["the"]},{"Key":"strand the","Fragments":["program"]},{"Key":"possibly compare.","Fragments":["This"]},{"Key":"will overflow","Fragments":["if"]},{"Key":"overflow if","Fragments":["the"]},{"Key":"the strands","Fragments":["are","are","are"]},{"Key":"strands are","Fragments":["very","different","of"]},{"Key":"of coming","Fragments":["up"]},{"Key":"coming up","Fragments":["with","with"]},{"Key":"to nitpick,","Fragments":["maybe"]},{"Key":"nitpick, maybe","Fragments":["it"]},{"Key":"or typedef","Fragments":["to"]},{"Key":"typedef to","Fragments":["give"]},{"Key":"a namespace-specific","Fragments":["or"]},{"Key":"namespace-specific or","Fragments":["class-specific"]},{"Key":"or class-specific","Fragments":["name"]},{"Key":"class-specific name","Fragments":["to"]},{"Key":"to std::pair\u003cint,int\u003e","Fragments":["just"]},{"Key":"std::pair\u003cint,int\u003e just","Fragments":["for"]},{"Key":"for documentation","Fragments":["reasons"]},{"Key":"documentation reasons","Fragments":["to"]},{"Key":"help clarify","Fragments":["what"]},{"Key":"clarify what","Fragments":["those","the","you"]},{"Key":"what those","Fragments":["parameters","private"]},{"Key":"those parameters","Fragments":["\u0026"]},{"Key":"parameters \u0026","Fragments":["variables"]},{"Key":"\u0026 variables","Fragments":["represent."]},{"Key":"variables represent.","Fragments":["Something"]},{"Key":"represent. Something","Fragments":["like"]},{"Key":"using BoardPosition","Fragments":["="]},{"Key":"BoardPosition =","Fragments":["std::pair\u003cint,int\u003e;"]},{"Key":"Really great","Fragments":["solution."]},{"Key":"great solution.","Fragments":["I"]},{"Key":" 12","Fragments":["intentionally"]},{"Key":"12 intentionally","Fragments":["makes"]},{"Key":"intentionally makes","Fragments":["a"]},{"Key":"a copy,","Fragments":["yes;","you"]},{"Key":"copy, yes;","Fragments":["if"]},{"Key":"yes; if","Fragments":["you"]},{"Key":"you look","Fragments":["at","in","at","for","at","at","at","at"]},{"Key":"iteration i","Fragments":["switch"]},{"Key":"i switch","Fragments":["to"]},{"Key":"just moving","Fragments":["the"]},{"Key":"and trimming","Fragments":["that"]},{"Key":"trimming that","Fragments":["directly."]},{"Key":" Super-simple","Fragments":["accumulator-style"]},{"Key":"Super-simple accumulator-style","Fragments":["solution."]},{"Key":" Incorporating","Fragments":["the"]},{"Key":"Incorporating the","Fragments":["suggestion"]},{"Key":"from @naomie","Fragments":["to"]},{"Key":"@naomie to","Fragments":["fill"]},{"Key":"fill the","Fragments":["map"]},{"Key":"one pass","Fragments":["over","but"]},{"Key":"would prefer","Fragments":["to","your","these"]},{"Key":"have split","Fragments":["out"]},{"Key":"split out","Fragments":["a"]},{"Key":"a `regex_iterator`","Fragments":["which"]},{"Key":"`regex_iterator` which","Fragments":["would"]},{"Key":"by `words.`","Fragments":["(The"]},{"Key":"`words.` (The","Fragments":["tokenizing"]},{"Key":"(The tokenizing","Fragments":["of"]},{"Key":"tokenizing of","Fragments":["the"]},{"Key":"counting of","Fragments":["tokens"]},{"Key":"of tokens","Fragments":["should"]},{"Key":"tokens should","Fragments":["be"]},{"Key":"work correctly,","Fragments":["though---I"]},{"Key":"correctly, though---I","Fragments":["apparently"]},{"Key":"though---I apparently","Fragments":["misunderstand"]},{"Key":"apparently misunderstand","Fragments":["something"]},{"Key":"misunderstand something","Fragments":["about"]},{"Key":"this iterator","Fragments":["works."]},{"Key":"iterator works.","Fragments":["Would"]},{"Key":"works. Would","Fragments":["love"]},{"Key":"Would love","Fragments":["to"]},{"Key":"to hear","Fragments":["recommendations.","feedback"]},{"Key":" Thanks!","Fragments":["I'll","Good"]},{"Key":"Thanks! I'll","Fragments":["give"]},{"Key":"give that","Fragments":["a"]},{"Key":" Nope,","Fragments":["I"]},{"Key":"Nope, I","Fragments":["did"]},{"Key":"something way","Fragments":["goofier."]},{"Key":" @adrain","Fragments":["Thanks!"]},{"Key":"case not","Fragments":["a"]},{"Key":"It lets","Fragments":["people"]},{"Key":"lets people","Fragments":["know"]},{"Key":"know right","Fragments":["away"]},{"Key":"right away","Fragments":["they"]},{"Key":"away they","Fragments":["can't"]},{"Key":"can't easily","Fragments":["cheat"]},{"Key":"easily cheat","Fragments":["and"]},{"Key":"cheat and","Fragments":["gain"]},{"Key":"and gain","Fragments":["direct"]},{"Key":"gain direct","Fragments":["access"]},{"Key":"direct access","Fragments":["to"]},{"Key":"to anyhow","Fragments":["depending"]},{"Key":"anyhow depending","Fragments":["on"]},{"Key":"The anonymous","Fragments":["namespace"]},{"Key":"or inline","Fragments":["function,"]},{"Key":"inline function,","Fragments":["that"]},{"Key":"not accessible","Fragments":["from"]},{"Key":"accessible from","Fragments":["another"]},{"Key":"from another","Fragments":["translation","nitpicker:","language"]},{"Key":"another translation","Fragments":["unit,"]},{"Key":"translation unit,","Fragments":["even","it","we","but"]},{"Key":"unit, even","Fragments":["if"]},{"Key":"other file","Fragments":["cheats"]},{"Key":"file cheats","Fragments":["and"]},{"Key":"cheats and","Fragments":["provides"]},{"Key":"provides its","Fragments":["own"]},{"Key":"own forward","Fragments":["declaration."]},{"Key":"forward declaration.","Fragments":["If"]},{"Key":"declaration. If","Fragments":["you"]},{"Key":"header then","Fragments":["everyone"]},{"Key":"then everyone","Fragments":["gets"]},{"Key":"everyone gets","Fragments":["their"]},{"Key":"gets their","Fragments":["own"]},{"Key":"own completely","Fragments":["separate"]},{"Key":"separate version","Fragments":["and"]},{"Key":"biggest difference","Fragments":["is"]},{"Key":"also work","Fragments":["with","nicely.","for"]},{"Key":"with types,","Fragments":["while"]},{"Key":"types, while","Fragments":["inline"]},{"Key":"while inline","Fragments":["only"]},{"Key":"inline only","Fragments":["works"]},{"Key":"works on","Fragments":["functions","functions"]},{"Key":"static only","Fragments":["works"]},{"Key":"and variables","Fragments":["(and"]},{"Key":"variables (and","Fragments":["can"]},{"Key":"(and can","Fragments":["mean"]},{"Key":"can mean","Fragments":["different"]},{"Key":"mean different","Fragments":["things"]},{"Key":"different things","Fragments":["on"]},{"Key":"things on","Fragments":["variables"]},{"Key":"on variables","Fragments":["depending"]},{"Key":"variables depending","Fragments":["on"]},{"Key":"to changing","Fragments":["the"]},{"Key":"linkage, unlike","Fragments":["static"]},{"Key":"unlike static","Fragments":["\u0026"]},{"Key":"static \u0026","Fragments":["inline"]},{"Key":"\u0026 inline","Fragments":["it's"]},{"Key":"inline it's","Fragments":["common"]},{"Key":"it's common","Fragments":["for"]},{"Key":"common for","Fragments":["anonymous"]},{"Key":"for anonymous","Fragments":["namespaces"]},{"Key":"anonymous namespaces","Fragments":["to","here"]},{"Key":"mangling to","Fragments":["include"]},{"Key":"some hash","Fragments":["of"]},{"Key":"base file","Fragments":["of"]},{"Key":"file of","Fragments":["the"]},{"Key":"the TU","Fragments":["(i.e."]},{"Key":"TU (i.e.","Fragments":["the"]},{"Key":"source file).","Fragments":["Some"]},{"Key":"file). Some","Fragments":["older"]},{"Key":"Some older","Fragments":["compilers"]},{"Key":"compilers ONLY","Fragments":["do"]},{"Key":"ONLY do","Fragments":["that"]},{"Key":"with extern","Fragments":["linkage"]},{"Key":"extern linkage","Fragments":["with"]},{"Key":"linkage with","Fragments":["practically"]},{"Key":"with practically","Fragments":["accomplishes"]},{"Key":"practically accomplishes","Fragments":["the"]},{"Key":"accomplishes the","Fragments":["same"]},{"Key":"same goal","Fragments":["(unless"]},{"Key":"goal (unless","Fragments":["there's"]},{"Key":"(unless there's","Fragments":["a"]},{"Key":"hash collision)","Fragments":["but"]},{"Key":"collision) but","Fragments":["it"]},{"Key":"to pointlessly","Fragments":["waste"]},{"Key":"pointlessly waste","Fragments":["time"]},{"Key":"memory considering","Fragments":["a"]},{"Key":"considering a","Fragments":["symbol"]},{"Key":"a symbol","Fragments":["that"]},{"Key":"symbol that","Fragments":["will"]},{"Key":"be UNDEFed","Fragments":["anywhere."]},{"Key":"UNDEFed anywhere.","Fragments":["In"]},{"Key":"In any","Fragments":["case,","case,"]},{"Key":"any case,","Fragments":["that's","I"]},{"Key":"case, that's","Fragments":["all"]},{"Key":"all up","Fragments":["to"]},{"Key":"the implementer.","Fragments":["The"]},{"Key":"implementer. The","Fragments":["big,"]},{"Key":"The big,","Fragments":["standard"]},{"Key":"big, standard","Fragments":["thing"]},{"Key":"standard thing","Fragments":["you"]},{"Key":"that something","Fragments":["in"]},{"Key":"something in","Fragments":["an"]},{"Key":" (*)","Fragments":["Specifically"]},{"Key":"(*) Specifically","Fragments":["for"]},{"Key":"Specifically for","Fragments":["me"]},{"Key":"like gcc","Fragments":["forbids"]},{"Key":"gcc forbids","Fragments":["this"]},{"Key":"forbids this","Fragments":["cheat"]},{"Key":"this cheat","Fragments":["when"]},{"Key":"cheat when","Fragments":["const"]},{"Key":"when const","Fragments":["and"]},{"Key":"and allows","Fragments":["it"]},{"Key":"allows it","Fragments":["when"]},{"Key":"namespace scrabble_score","Fragments":["{"]},{"Key":"scrabble_score {","Fragments":["extern"]},{"Key":"{ extern","Fragments":["const"]},{"Key":"extern const","Fragments":["std::map\u003cchar,"]},{"Key":"const std::map\u003cchar,","Fragments":["scrabble_score::score_t\u003e","int\u003e\u0026","int\u003e\u0026"]},{"Key":"std::map\u003cchar, scrabble_score::score_t\u003e","Fragments":["score_list;"]},{"Key":"scrabble_score::score_t\u003e score_list;","Fragments":["}"]},{"Key":" //accesses","Fragments":["it"]},{"Key":"//accesses it","Fragments":["later"]},{"Key":" Without","Fragments":["const:"]},{"Key":" $gcc","Fragments":["-std=c++14","-std=c++14","-std=c++14","-std=c++14","-std=c++14","-std=c++14"]},{"Key":"$gcc -std=c++14","Fragments":["-c","*.cpp","-c","*.cpp","-c","*.cpp"]},{"Key":"-std=c++14 -c","Fragments":["scrabble_score.cpp","scrabble_score.cpp","scrabble_score.cpp"]},{"Key":"-c scrabble_score.cpp","Fragments":["-o","-o","-o"]},{"Key":"scrabble_score.cpp -o","Fragments":["a.o","a.o","a.o"]},{"Key":"-o a.o","Fragments":[";",";",";"]},{"Key":"a.o ;","Fragments":["nm","nm","nm"]},{"Key":"; nm","Fragments":["a.o","a.o","--demangle"]},{"Key":"nm a.o","Fragments":["|","|"]},{"Key":"a.o |","Fragments":["grep","grep","grep"]},{"Key":"| grep","Fragments":["score_list","score_list","score_list"]},{"Key":" 00000000000001c0","Fragments":["t"]},{"Key":"00000000000001c0 t","Fragments":["_GLOBAL__sub_I__ZN14scrabble_score10score_listE"]},{"Key":" 0000000000000000","Fragments":["B","b","b"]},{"Key":"0000000000000000 B","Fragments":["scrabble_score::score_list"]},{"Key":"-std=c++14 *.cpp","Fragments":["-lstdc++","-lstdc++","-lstdc++"]},{"Key":"0000000000000000 b","Fragments":["scrabble_score::score_list","scrabble_score::(anonymous"]},{"Key":" /tmp/ccjWWvms.o:main.cpp","Fragments":["(.rdata$.refptr._ZN14scrabble_score10score_listE[.refptr._ZN14scrabble_score10score_listE]+0x0):"]},{"Key":"/tmp/ccjWWvms.o:main.cpp (.rdata$.refptr._ZN14scrabble_score10score_listE[.refptr._ZN14scrabble_score10score_listE]+0x0):","Fragments":["undefined"]},{"Key":"(.rdata$.refptr._ZN14scrabble_score10score_listE[.refptr._ZN14scrabble_score10score_listE]+0x0): undefined","Fragments":["reference"]},{"Key":"undefined reference","Fragments":["to","to"]},{"Key":"With anonymous","Fragments":["namespace"]},{"Key":"nm --demangle","Fragments":["a.o"]},{"Key":"--demangle a.o","Fragments":["|"]},{"Key":"b scrabble_score::(anonymous","Fragments":["namespace)::score_list"]},{"Key":" /tmp/ccoMSrck.o:main.cpp:(.rdata$.refptr._ZN14scrabble_score10score_listE[.refptr._ZN14scrabble_score10score_listE]+0x0):","Fragments":["undefined"]},{"Key":"/tmp/ccoMSrck.o:main.cpp:(.rdata$.refptr._ZN14scrabble_score10score_listE[.refptr._ZN14scrabble_score10score_listE]+0x0): undefined","Fragments":["reference"]},{"Key":" score_letter","Fragments":["and"]},{"Key":"score_letter and","Fragments":["transform_score_map"]},{"Key":"and transform_score_map","Fragments":["seem"]},{"Key":"transform_score_map seem","Fragments":["like"]},{"Key":"the sorts","Fragments":["of"]},{"Key":"be static,","Fragments":["inline,"]},{"Key":"static, inline,","Fragments":["or"]},{"Key":" uint64_t","Fragments":["seems"]},{"Key":"uint64_t seems","Fragments":["like"]},{"Key":"like overkill,","Fragments":["especially"]},{"Key":"overkill, especially","Fragments":["when"]},{"Key":"consider how","Fragments":["slow"]},{"Key":"how slow","Fragments":["it"]},{"Key":"slow it","Fragments":["can"]},{"Key":"some still-relevant","Fragments":["architectures"]},{"Key":"still-relevant architectures","Fragments":["like"]},{"Key":"architectures like","Fragments":["armel"]},{"Key":"like armel","Fragments":["(the"]},{"Key":"armel (the","Fragments":["32-bit"]},{"Key":"(the 32-bit","Fragments":["ARM"]},{"Key":"32-bit ARM","Fragments":["found"]},{"Key":"ARM found","Fragments":["on"]},{"Key":"found on","Fragments":["many"]},{"Key":"many mobile","Fragments":["\u0026"]},{"Key":"mobile \u0026","Fragments":["embedded"]},{"Key":"\u0026 embedded","Fragments":["systems)."]},{"Key":"embedded systems).","Fragments":["For"]},{"Key":"systems). For","Fragments":["every"]},{"Key":"every place","Fragments":["you"]},{"Key":"place you","Fragments":["use"]},{"Key":"integer other","Fragments":["than"]},{"Key":"than score()'s","Fragments":["return"]},{"Key":"score()'s return","Fragments":["value"]},{"Key":"value (and","Fragments":["it's"]},{"Key":"(and it's","Fragments":["local"]},{"Key":"it's local","Fragments":["score)"]},{"Key":"local score)","Fragments":["the"]},{"Key":"score) the","Fragments":["values"]},{"Key":"values range","Fragments":["from"]},{"Key":"range from","Fragments":["1"]},{"Key":"from 1","Fragments":["to","to"]},{"Key":"to 10,","Fragments":["which"]},{"Key":"10, which","Fragments":["fits"]},{"Key":"which fits","Fragments":["inside"]},{"Key":"fits inside","Fragments":["_any_"]},{"Key":"inside _any_","Fragments":["integer"]},{"Key":"_any_ integer","Fragments":["type."]},{"Key":"integer type.","Fragments":["The"]},{"Key":"type. The","Fragments":["return"]},{"Key":"The return","Fragments":["value","value","short-circuits","of"]},{"Key":"for score,","Fragments":["even"]},{"Key":"score, even","Fragments":["if"]},{"Key":"leave room","Fragments":["for"]},{"Key":"future enhancements","Fragments":["like"]},{"Key":"enhancements like","Fragments":["Triple"]},{"Key":"like Triple","Fragments":["Word"]},{"Key":"Triple Word","Fragments":["Score,"]},{"Key":"Word Score,","Fragments":["can't"]},{"Key":"Score, can't","Fragments":["be"]},{"Key":"be expected","Fragments":["to"]},{"Key":"expected to","Fragments":["be"]},{"Key":"much greater","Fragments":["than"]},{"Key":"than 1778","Fragments":["(the"]},{"Key":"1778 (the","Fragments":["current"]},{"Key":"(the current","Fragments":["record"]},{"Key":"current record","Fragments":["for"]},{"Key":"record for","Fragments":["highest"]},{"Key":"for highest","Fragments":["Scrabble"]},{"Key":"highest Scrabble","Fragments":["word"]},{"Key":"Scrabble word","Fragments":["score)."]},{"Key":"word score).","Fragments":["That,"]},{"Key":"score). That,","Fragments":["and"]},{"Key":"That, and","Fragments":["indeed"]},{"Key":"and indeed","Fragments":["10x"]},{"Key":"indeed 10x","Fragments":["that"]},{"Key":"10x that","Fragments":["number,"]},{"Key":"that number,","Fragments":["is"]},{"Key":"number, is","Fragments":["guaranteed"]},{"Key":"inside short.","Fragments":["If"]},{"Key":"short. If","Fragments":["you"]},{"Key":"prefer explicit","Fragments":["types"]},{"Key":"explicit types","Fragments":["(and"]},{"Key":"types (and","Fragments":["I"]},{"Key":"don't blame","Fragments":["you)"]},{"Key":"blame you)","Fragments":["you"]},{"Key":"you) you","Fragments":["could"]},{"Key":"consider uint_fast16_t.","Fragments":["I"]},{"Key":"uint_fast16_t. I","Fragments":["wouldn't"]},{"Key":"wouldn't bother","Fragments":["with"]},{"Key":"with uint_least16_t,","Fragments":["since"]},{"Key":"uint_least16_t, since","Fragments":["there's"]},{"Key":"not large","Fragments":["quantities"]},{"Key":"large quantities","Fragments":["of"]},{"Key":"quantities of","Fragments":["these"]},{"Key":"these integers","Fragments":["invalidating"]},{"Key":"integers invalidating","Fragments":["your"]},{"Key":"invalidating your","Fragments":["cache."]},{"Key":"the `std::inner_product()`","Fragments":["function.","function"]},{"Key":"`std::inner_product()` function.","Fragments":["It'll"]},{"Key":"function. It'll","Fragments":["help"]},{"Key":"It'll help","Fragments":["you"]},{"Key":"the `deltas`","Fragments":["vector"]},{"Key":"`deltas` vector","Fragments":["and"]},{"Key":"you'll use","Fragments":["single"]},{"Key":"use single","Fragments":["function"]},{"Key":"call instead","Fragments":["of"]},{"Key":"two (`std::transform()`","Fragments":["+"]},{"Key":"(`std::transform()` +","Fragments":["`std::accumulate()`)."]},{"Key":"function `is_char_allowed()`","Fragments":["returns"]},{"Key":"`is_char_allowed()` returns","Fragments":["`true`"]},{"Key":"when char","Fragments":["is"]},{"Key":"is alphanumeric,","Fragments":["but"]},{"Key":"alphanumeric, but","Fragments":["returns"]},{"Key":"but returns","Fragments":["nothing"]},{"Key":"returns nothing","Fragments":["when"]},{"Key":"nothing when","Fragments":["not."]},{"Key":"when not.","Fragments":["This"]},{"Key":"not. This","Fragments":["is"]},{"Key":"an undefined","Fragments":["behaviour."]},{"Key":"that `return","Fragments":["expr;`"]},{"Key":"`return expr;`","Fragments":["would"]},{"Key":"expr;` would","Fragments":["be"]},{"Key":"than constructions","Fragments":["like"]},{"Key":"constructions like","Fragments":["`if"]},{"Key":"like `if","Fragments":["(expr)"]},{"Key":"`if (expr)","Fragments":["return"]},{"Key":"(expr) return","Fragments":["true;"]},{"Key":"using `static_assert`","Fragments":["instead"]},{"Key":"`static_assert` instead","Fragments":["of"]},{"Key":"of `assert`","Fragments":["in"]},{"Key":"`assert` in","Fragments":["*line"]},{"Key":"to reinvent","Fragments":["the"]},{"Key":"`std::inner_product()` function","Fragments":["with"]},{"Key":"of `boost::zip_iterator`","Fragments":["and"]},{"Key":"`boost::zip_iterator` and","Fragments":["`std::count_if()`."]},{"Key":"\u003e To","Fragments":["the"]},{"Key":"Where have","Fragments":["you"]},{"Key":"you got","Fragments":["that","rid"]},{"Key":"information from?","Fragments":["I"]},{"Key":"from? I","Fragments":["could"]},{"Key":"it neither","Fragments":["in"]},{"Key":"neither in","Fragments":["the"]},{"Key":"Standard nor","Fragments":["at"]},{"Key":"nor at","Fragments":["the"]},{"Key":"the cppreference","Fragments":["site.","site"]},{"Key":"cppreference site.","Fragments":["Could"]},{"Key":"site. Could","Fragments":["you"]},{"Key":"a link,","Fragments":["please?"]},{"Key":"All I've","Fragments":["found"]},{"Key":"I've found","Fragments":["is","std::inner_product"]},{"Key":"found is","Fragments":["that","easier"]},{"Key":"Standard and","Fragments":["the"]},{"Key":"cppreference site","Fragments":["says"]},{"Key":"site says","Fragments":["that"]},{"Key":"declare function","Fragments":["without"]},{"Key":"function without","Fragments":["keyword","a"]},{"Key":"without keyword","Fragments":["`static`"]},{"Key":"keyword `static`","Fragments":["and"]},{"Key":"`static` and","Fragments":["not"]},{"Key":"not inside","Fragments":["a"]},{"Key":"a nameless","Fragments":["namespace,"]},{"Key":"nameless namespace,","Fragments":["it"]},{"Key":"namespace, it","Fragments":["would"]},{"Key":"have *external","Fragments":["linkage*"]},{"Key":"*external linkage*","Fragments":["both"]},{"Key":"linkage* both","Fragments":["within"]},{"Key":"both within","Fragments":["and"]},{"Key":"within and","Fragments":["without"]},{"Key":"the `extern`","Fragments":["keyword."]},{"Key":"use `boost::lexical_cast\u003cstring\u003e()`","Fragments":["instead"]},{"Key":"`boost::lexical_cast\u003cstring\u003e()` instead","Fragments":["of"]},{"Key":"of `std::to_string()`","Fragments":["function?"]},{"Key":"`std::to_string()` function?","Fragments":["Is"]},{"Key":"function? Is","Fragments":["there"]},{"Key":" `(reduce","Fragments":["+"]},{"Key":"left right))`","Fragments":["looks"]},{"Key":"right))` looks","Fragments":["like"]},{"Key":" static_assert(size_t{true}","Fragments":["=="]},{"Key":"static_assert(size_t{true} ==","Fragments":["1u,"]},{"Key":"== 1u,","Fragments":["\"TRUE"]},{"Key":"1u, \"TRUE","Fragments":["!="]},{"Key":"\"TRUE !=","Fragments":["1\");"]},{"Key":" static_assert(size_t{false}","Fragments":["=="]},{"Key":"static_assert(size_t{false} ==","Fragments":["0u,"]},{"Key":"== 0u,","Fragments":["\"FALSE"]},{"Key":"0u, \"FALSE","Fragments":["!="]},{"Key":"\"FALSE !=","Fragments":["0\");"]},{"Key":"return inner_product(begin(a),","Fragments":["end(a),","end(a),"]},{"Key":"inner_product(begin(a), end(a),","Fragments":["begin(b),","begin(b),"]},{"Key":"end(a), begin(b),","Fragments":["a.size(),","size_t{},"]},{"Key":"begin(b), a.size(),","Fragments":["minus\u003c\u003e{},"]},{"Key":"a.size(), minus\u003c\u003e{},","Fragments":["equal_to\u003c\u003e{});"]},{"Key":"// return","Fragments":["inner_product(begin(a),"]},{"Key":"begin(b), size_t{},","Fragments":["plus\u003c\u003e{},"]},{"Key":"size_t{}, plus\u003c\u003e{},","Fragments":["not_equal_to\u003c\u003e{});"]},{"Key":"Although the","Fragments":["first"]},{"Key":"passed all","Fragments":["tests,","tests","the","tests!","tests.","the","the"]},{"Key":"all tests,","Fragments":["it"]},{"Key":"still had","Fragments":["some"]},{"Key":"example the","Fragments":["solution","curly"]},{"Key":"to 999","Fragments":["would"]},{"Key":"999 would","Fragments":["be"]},{"Key":"be ```CMXCIX```","Fragments":["instead"]},{"Key":"```CMXCIX``` instead","Fragments":["of"]},{"Key":"is fixed","Fragments":["in"]},{"Key":"version by","Fragments":["running"]},{"Key":"by running","Fragments":["the"]},{"Key":"running the","Fragments":["iterators","tests"]},{"Key":"in ```convertToRoman()```","Fragments":["from"]},{"Key":"```convertToRoman()``` from","Fragments":["smaller"]},{"Key":"from smaller","Fragments":["to"]},{"Key":"smaller to","Fragments":["larger."]},{"Key":"pretty similar.","Fragments":["op1"]},{"Key":"similar. op1","Fragments":["would"]},{"Key":"op1 would","Fragments":["be"]},{"Key":"be +","Fragments":["and"]},{"Key":"+ and","Fragments":["op2"]},{"Key":"and op2","Fragments":["would"]},{"Key":"op2 would","Fragments":["be"]},{"Key":"be ==","Fragments":["for"]},{"Key":"== for","Fragments":["inner_product,"]},{"Key":"for inner_product,","Fragments":["right?"]},{"Key":"for count_if","Fragments":["as"]},{"Key":"count_if as","Fragments":["a"]},{"Key":"a knee-jerk","Fragments":["reaction"]},{"Key":"knee-jerk reaction","Fragments":["because"]},{"Key":"reaction because","Fragments":["I,"]},{"Key":"because I,","Fragments":["personally,"]},{"Key":"I, personally,","Fragments":["think"]},{"Key":"personally, think","Fragments":["of"]},{"Key":"as counting","Fragments":["positions"]},{"Key":"counting positions","Fragments":["which"]},{"Key":"positions which","Fragments":["match"]},{"Key":"which match","Fragments":["a"]},{"Key":"match a","Fragments":["condition.","more"]},{"Key":"a condition.","Fragments":["Given"]},{"Key":"condition. Given","Fragments":["that"]},{"Key":"made as","Fragments":["much"]},{"Key":"much sense","Fragments":["to"]},{"Key":"use count_if","Fragments":["with"]},{"Key":"count_if with","Fragments":["a"]},{"Key":"a counting_iterator.","Fragments":["But"]},{"Key":"counting_iterator. But","Fragments":["inner_product"]},{"Key":"But inner_product","Fragments":["might"]},{"Key":"inner_product might","Fragments":["require"]},{"Key":"might require","Fragments":["fewer"]},{"Key":"require fewer","Fragments":["moving"]},{"Key":"fewer moving","Fragments":["parts."]},{"Key":"tests given","Fragments":["for"]},{"Key":"given for","Fragments":["this"]},{"Key":"be passed,","Fragments":["by"]},{"Key":"passed, by","Fragments":["putting"]},{"Key":"putting an","Fragments":["```if("]},{"Key":"an ```if(","Fragments":["(element"]},{"Key":"```if( (element","Fragments":["=="]},{"Key":"(element ==","Fragments":["'1')"]},{"Key":"== '1')","Fragments":["or"]},{"Key":"'1') or","Fragments":["(element"]},{"Key":"or (element","Fragments":["=='2'))```"]},{"Key":"(element =='2'))```","Fragments":["around"]},{"Key":"=='2'))``` around","Fragments":["line"]},{"Key":"around line","Fragments":["```34```","10"]},{"Key":"line ```34```","Fragments":["(```decimal"]},{"Key":"```34``` (```decimal","Fragments":["+="]},{"Key":"(```decimal +=","Fragments":["element"]},{"Key":"+= element","Fragments":["-'0';```)"]},{"Key":" (In","Fragments":["that"]},{"Key":"(In that","Fragments":["case"]},{"Key":"the ```find_if`()```","Fragments":["would"]},{"Key":"```find_if`()``` would","Fragments":["be"]},{"Key":" Function","Fragments":["hey"]},{"Key":"Function hey","Fragments":["was"]},{"Key":"hey was","Fragments":["simplified"]},{"Key":"was simplified","Fragments":["to"]},{"Key":"simplified to","Fragments":["not","a"]},{"Key":"use \"else","Fragments":["if\""]},{"Key":"if\" since","Fragments":["they"]},{"Key":"they didn't","Fragments":["add"]},{"Key":"didn't add","Fragments":["anything"]},{"Key":"add anything","Fragments":["to"]},{"Key":"the correctness","Fragments":["of","of"]},{"Key":"correctness of","Fragments":["the","the"]},{"Key":"1) Boost","Fragments":["library"]},{"Key":"library dependency","Fragments":["removed"]},{"Key":"dependency removed","Fragments":["and"]},{"Key":"with std","Fragments":["algorithms."]},{"Key":"2) Const","Fragments":["correctness"]},{"Key":"Const correctness","Fragments":["was"]},{"Key":"correctness was","Fragments":["improved."]},{"Key":"3) IsShouting","Fragments":["uses"]},{"Key":"IsShouting uses","Fragments":["std"]},{"Key":"uses std","Fragments":["algorithms"]},{"Key":"std algorithms","Fragments":["to"]},{"Key":"algorithms to","Fragments":["better"]},{"Key":"better describe","Fragments":["what"]},{"Key":"on. A","Fragments":["bit"]},{"Key":"of efficiency","Fragments":["was","out"]},{"Key":"efficiency was","Fragments":["probably"]},{"Key":"probably lost","Fragments":["with"]},{"Key":"lost with","Fragments":["that"]},{"Key":"that (double","Fragments":["loop"]},{"Key":"(double loop","Fragments":["instead"]},{"Key":" @marcelina","Fragments":["That's"]},{"Key":"@marcelina That's","Fragments":["clever!"]},{"Key":"That's clever!","Fragments":["I"]},{"Key":"clever! I","Fragments":["didn't"]},{"Key":"of inner","Fragments":["product."]},{"Key":"inner product.","Fragments":["I"]},{"Key":"product. I","Fragments":["actually"]},{"Key":"second commented","Fragments":["version,"]},{"Key":"commented version,","Fragments":["as"]},{"Key":"version, as","Fragments":["it"]},{"Key":"more clearly","Fragments":["express","if","anyway.","that","indicates","be"]},{"Key":"clearly express","Fragments":["what"]},{"Key":"express what","Fragments":["the"]},{"Key":"doing (adding","Fragments":["up"]},{"Key":"(adding up","Fragments":["the"]},{"Key":"the pairwise","Fragments":["mis-matches)."]},{"Key":"second lambda","Fragments":["expression","expression"]},{"Key":"lambda expression","Fragments":["(*line","(*line","are","thanks"]},{"Key":"expression (*line","Fragments":["15*)","14*)"]},{"Key":"(*line 15*)","Fragments":["with"]},{"Key":"15*) with","Fragments":["`return"]},{"Key":"with `return","Fragments":["a"]},{"Key":"`return a","Fragments":["!="]},{"Key":"!= b","Fragments":["?"]},{"Key":"b ?","Fragments":["1"]},{"Key":": 0;`,","Fragments":["you"]},{"Key":"0;`, you","Fragments":["could"]},{"Key":"first lambda","Fragments":["expression"]},{"Key":"(*line 14*)","Fragments":["with"]},{"Key":"14*) with","Fragments":["the"]},{"Key":"the `std::plus\u003c\u003e{}`","Fragments":["(C++14)"]},{"Key":"`std::plus\u003c\u003e{}` (C++14)","Fragments":["or"]},{"Key":"(C++14) or","Fragments":["the"]},{"Key":"the `std::plus\u003cint\u003e{}`","Fragments":["(C++11)."]},{"Key":"Since `a`","Fragments":["and"]},{"Key":"`a` and","Fragments":["`b`"]},{"Key":"and `b`","Fragments":["in"]},{"Key":"`b` in","Fragments":["the"]},{"Key":"expression are","Fragments":["chars"]},{"Key":"are chars","Fragments":["(`char`"]},{"Key":"chars (`char`","Fragments":["or"]},{"Key":"(`char` or","Fragments":["`wchar`),"]},{"Key":"or `wchar`),","Fragments":["I"]},{"Key":"`wchar`), I","Fragments":["think"]},{"Key":"you trust","Fragments":["the"]},{"Key":"trust the","Fragments":["compiler","compiler"]},{"Key":"that `true`","Fragments":["is"]},{"Key":"`true` is","Fragments":["always"]},{"Key":"always equal","Fragments":["to","to"]},{"Key":"`1` and","Fragments":["`false`"]},{"Key":"and `false`","Fragments":["is"]},{"Key":"`false` is","Fragments":["always"]},{"Key":"to `0`,","Fragments":["then"]},{"Key":"`0`, then","Fragments":["you"]},{"Key":"remove both","Fragments":["lambdas"]},{"Key":"both lambdas","Fragments":["like"]},{"Key":"lambdas like","Fragments":["this:"]},{"Key":"return std::inner_product(","Fragments":["first.begin(),"]},{"Key":"std::inner_product( first.begin(),","Fragments":["first.end(),"]},{"Key":"first.begin(), first.end(),","Fragments":["second.begin(),"]},{"Key":"first.end(), second.begin(),","Fragments":["0,"]},{"Key":" std::plus\u003c\u003e{},","Fragments":["std::not_equal_to\u003c\u003e{}"]},{"Key":"std::plus\u003c\u003e{}, std::not_equal_to\u003c\u003e{}","Fragments":[");"]},{"Key":"BTW, something","Fragments":["is"]},{"Key":"something is","Fragments":["wrong","alphabetic,"]},{"Key":"the `hamming.h`","Fragments":["file."]},{"Key":"Using unsigned","Fragments":["variables"]},{"Key":"unsigned variables","Fragments":["is"]},{"Key":"variables is","Fragments":["a","generally"]},{"Key":"good thought","Fragments":["indeed."]},{"Key":"use \u003ccmath\u003e","Fragments":["since"]},{"Key":"\u003ccmath\u003e since","Fragments":["its"]},{"Key":"since its","Fragments":["pow","a","misuse"]},{"Key":"its pow","Fragments":["function"]},{"Key":"pow function","Fragments":["returns"]},{"Key":"returns double,","Fragments":["not"]},{"Key":"double, not","Fragments":["int","integer."]},{"Key":"not int","Fragments":["."]},{"Key":"int .","Fragments":["In"]},{"Key":". In","Fragments":["such"]},{"Key":"such cases","Fragments":["there"]},{"Key":"cases there","Fragments":["is"]},{"Key":"a chance","Fragments":["that","to"]},{"Key":"that 2^2","Fragments":["="]},{"Key":"2^2 =","Fragments":["3.9999999999"]},{"Key":"= 3.9999999999","Fragments":["and"]},{"Key":"3.9999999999 and","Fragments":["compiler"]},{"Key":"compiler truncates","Fragments":["it"]},{"Key":"truncates it","Fragments":["to"]},{"Key":"to 3","Fragments":["when"]},{"Key":"3 when","Fragments":["it"]},{"Key":"it casts","Fragments":["result"]},{"Key":"casts result","Fragments":["from"]},{"Key":"result from","Fragments":["double"]},{"Key":"from double","Fragments":["to"]},{"Key":"double to","Fragments":["int."]},{"Key":" BInary","Fragments":["operations"]},{"Key":"BInary operations","Fragments":["are"]},{"Key":"are friends!","Fragments":["They"]},{"Key":"friends! They","Fragments":["don't"]},{"Key":"They don't","Fragments":["make"]},{"Key":"make legibility","Fragments":["worse"]},{"Key":"legibility worse","Fragments":["or"]},{"Key":"worse or","Fragments":["anything,"]},{"Key":"or anything,","Fragments":["at"]},{"Key":"anything, at","Fragments":["least"]},{"Key":"not if","Fragments":["there"]},{"Key":"than three","Fragments":["them"]},{"Key":"three them","Fragments":["in"]},{"Key":"a row.","Fragments":["I"]},{"Key":"row. I","Fragments":["work"]},{"Key":"in embedded","Fragments":["programming"]},{"Key":"embedded programming","Fragments":["and"]},{"Key":"using binary","Fragments":["operators"]},{"Key":"standard behaviour.","Fragments":["I"]},{"Key":"behaviour. I","Fragments":["myself"]},{"Key":"myself would","Fragments":["whine"]},{"Key":"would whine","Fragments":["that"]},{"Key":"whine that","Fragments":["```sum_of_squares```"]},{"Key":"that ```sum_of_squares```","Fragments":["uses"]},{"Key":"```sum_of_squares``` uses","Fragments":["multiplication"]},{"Key":"uses multiplication","Fragments":["by"]},{"Key":"multiplication by","Fragments":["two."]},{"Key":"Good catch","Fragments":["on","about","on"]},{"Key":"catch on","Fragments":["the","my","`empty`"]},{"Key":"the reference.","Fragments":["It's","If"]},{"Key":"reference. It's","Fragments":["slower"]},{"Key":"It's slower","Fragments":["than"]},{"Key":"char. I","Fragments":["don't"]},{"Key":"they're wchar","Fragments":["(wouldn't"]},{"Key":"wchar (wouldn't","Fragments":["that"]},{"Key":"(wouldn't that","Fragments":["require"]},{"Key":"require wstring_ref?),","Fragments":["but"]},{"Key":"wstring_ref?), but","Fragments":["the"]},{"Key":"argument would","Fragments":["be"]},{"Key":"be roughly","Fragments":["the"]},{"Key":"roughly the","Fragments":["same."]},{"Key":"think we","Fragments":["need"]},{"Key":"to trust","Fragments":["the"]},{"Key":"compiler on","Fragments":["values"]},{"Key":"on values","Fragments":["of"]},{"Key":"of true","Fragments":["and"]},{"Key":"and false.","Fragments":["http://en.cppreference.com/w/cpp/language/implicit_cast#Integral_conversions"]},{"Key":" Part","Fragments":["of"]},{"Key":"my reticence","Fragments":["to"]},{"Key":"reticence to","Fragments":["std::plus"]},{"Key":"to std::plus","Fragments":["is"]},{"Key":"std::plus is","Fragments":["that"]},{"Key":"don't *really*","Fragments":["want"]},{"Key":"*really* want","Fragments":["plus,"]},{"Key":"want plus,","Fragments":["even"]},{"Key":"plus, even","Fragments":["if"]},{"Key":"I wrote.","Fragments":["What"]},{"Key":"wrote. What","Fragments":["I"]},{"Key":"( is_match","Fragments":[")"]},{"Key":"is_match )","Fragments":["++acc,"]},{"Key":") ++acc,","Fragments":["because"]},{"Key":"++acc, because","Fragments":["I'm"]},{"Key":"not summing","Fragments":["I'm"]},{"Key":"summing I'm","Fragments":["counting."]},{"Key":"I'm counting.","Fragments":["And"]},{"Key":"counting. And","Fragments":["that's"]},{"Key":"initially reached","Fragments":["for"]},{"Key":"for count_if,","Fragments":["but"]},{"Key":"count_if, but","Fragments":["there's"]},{"Key":"there's something","Fragments":["unpretty","simplier"]},{"Key":"something unpretty","Fragments":["about"]},{"Key":"unpretty about","Fragments":["zip,"]},{"Key":"about zip,","Fragments":["especially"]},{"Key":"zip, especially","Fragments":["the"]},{"Key":"especially the","Fragments":["way"]},{"Key":"it's currently","Fragments":["implemented."]},{"Key":" hamming.h","Fragments":["looks"]},{"Key":"hamming.h looks","Fragments":["odd"]},{"Key":"looks odd","Fragments":["because","to"]},{"Key":"odd because","Fragments":["it"]},{"Key":"a symbolic","Fragments":["link"]},{"Key":"symbolic link","Fragments":["(and"]},{"Key":"link (and","Fragments":["I"]},{"Key":"didn't mean","Fragments":["to"]},{"Key":"upload it).","Fragments":["It"]},{"Key":"it). It","Fragments":["was"]},{"Key":"lazy way","Fragments":["of"]},{"Key":"of working","Fragments":["around","variables"]},{"Key":"working around","Fragments":["the"]},{"Key":"that CMakeLists.txt","Fragments":["expected"]},{"Key":"CMakeLists.txt expected","Fragments":["hamming.h"]},{"Key":"expected hamming.h","Fragments":["(even"]},{"Key":"hamming.h (even","Fragments":["though"]},{"Key":"(even though","Fragments":["it's","this"]},{"Key":"it's bad","Fragments":["practice"]},{"Key":"to mention","Fragments":["a"]},{"Key":"mention a","Fragments":["non-generated"]},{"Key":"a non-generated","Fragments":["header"]},{"Key":"non-generated header","Fragments":["in"]},{"Key":"in CMakeLists.txt).","Fragments":[".hpp"]},{"Key":"CMakeLists.txt). .hpp","Fragments":["files"]},{"Key":".hpp files","Fragments":["are"]},{"Key":"files are","Fragments":["legal","legal"]},{"Key":"are legal","Fragments":["to","to"]},{"Key":"legal to","Fragments":["include","include"]},{"Key":"include in","Fragments":[".cpp",".c","comments"]},{"Key":".cpp files.","Fragments":[".h"]},{"Key":"files. .h","Fragments":["files"]},{"Key":"in .c","Fragments":["files"]},{"Key":".c files","Fragments":["(and"]},{"Key":"files (and","Fragments":["occasionally"]},{"Key":"(and occasionally","Fragments":["also"]},{"Key":"occasionally also","Fragments":[".cpp"]},{"Key":"also .cpp","Fragments":["files"]},{"Key":"files generally","Fragments":["with"]},{"Key":"generally with","Fragments":["an"]},{"Key":"an #ifdef","Fragments":["__cplusplus)."]},{"Key":"#ifdef __cplusplus).","Fragments":["I"]},{"Key":"__cplusplus). I","Fragments":["had"]},{"Key":"no desire","Fragments":["to"]},{"Key":"desire to","Fragments":["maintain"]},{"Key":"maintain compatibility","Fragments":["with"]},{"Key":"compatibility with","Fragments":["C,"]},{"Key":"with C,","Fragments":["so"]},{"Key":"C, so","Fragments":["my","am"]},{"Key":"my file","Fragments":["is"]},{"Key":"header (I","Fragments":["prefer"]},{"Key":"(I prefer","Fragments":["that"]},{"Key":"prefer that","Fragments":["style,"]},{"Key":"that style,","Fragments":["but"]},{"Key":"understand many","Fragments":["do"]},{"Key":"many do","Fragments":["not)"]},{"Key":"do not)","Fragments":["digits"]},{"Key":"not) digits","Fragments":["could"]},{"Key":"digits could","Fragments":["be"]},{"Key":"a copy_if","Fragments":["followed"]},{"Key":"copy_if followed","Fragments":["by"]},{"Key":"decide the","Fragments":["string"]},{"Key":"be tremendously","Fragments":["huge"]},{"Key":"tremendously huge","Fragments":["(but"]},{"Key":"huge (but","Fragments":["containing"]},{"Key":"(but containing","Fragments":["almost"]},{"Key":"containing almost","Fragments":["entirely"]},{"Key":"entirely digits)","Fragments":["and"]},{"Key":"digits) and","Fragments":["you're"]},{"Key":"performance... you","Fragments":["could"]},{"Key":"could numbers.reserve(s.size())","Fragments":["in"]},{"Key":"numbers.reserve(s.size()) in","Fragments":["digits."]},{"Key":"in digits.","Fragments":["It"]},{"Key":"digits. It","Fragments":["wouldn't"]},{"Key":"wouldn't hurt","Fragments":["anything"]},{"Key":"hurt anything","Fragments":["even"]},{"Key":"anything even","Fragments":["if"]},{"Key":"a concern,","Fragments":["it's"]},{"Key":"concern, it's","Fragments":["just"]},{"Key":"a pre-baked","Fragments":["algorithm"]},{"Key":"pre-baked algorithm","Fragments":["for"]},{"Key":"in slice,","Fragments":["though."]},{"Key":"slice, though.","Fragments":["You"]},{"Key":"though. You","Fragments":["could","might"]},{"Key":"could compose","Fragments":["something"]},{"Key":"compose something","Fragments":["using"]},{"Key":"something using","Fragments":["Boost"]},{"Key":"Boost Range,","Fragments":["but"]},{"Key":"Range, but","Fragments":["I"]},{"Key":"I learn","Fragments":["more","C++11"]},{"Key":"[] in","Fragments":["the"]},{"Key":"expression thanks","Fragments":["to"]},{"Key":" Capitals","Fragments":["haven't"]},{"Key":"Capitals haven't","Fragments":["been"]},{"Key":"haven't been","Fragments":["part"]},{"Key":"been part","Fragments":["of"]},{"Key":"the specs","Fragments":[":)"]},{"Key":"specs :)","Fragments":["I"]},{"Key":"look again","Fragments":["when"]},{"Key":"again when","Fragments":["I"]},{"Key":"boot up","Fragments":["my"]},{"Key":"my linux-machine","Fragments":["where"]},{"Key":"linux-machine where","Fragments":["all"]},{"Key":"all my","Fragments":["exercism","methods","methods","methods","methods","code"]},{"Key":"my exercism","Fragments":["stuff"]},{"Key":"exercism stuff","Fragments":["lives..."]},{"Key":"can try","Fragments":["using","to"]},{"Key":"method. How","Fragments":["come"]},{"Key":"How come","Fragments":["you"]},{"Key":"come you","Fragments":["don't"]},{"Key":"don't simply","Fragments":["return"]},{"Key":"reply string","Fragments":["in"]},{"Key":"each if","Fragments":["statement"]},{"Key":"of saving","Fragments":["it"]},{"Key":"saving it","Fragments":["in","in"]},{"Key":"1) .cpp","Fragments":["file"]},{"Key":"removed since","Fragments":["it"]},{"Key":"was redundant","Fragments":["for"]},{"Key":"redundant for","Fragments":["this"]},{"Key":"2) Header","Fragments":["protectors"]},{"Key":"Header protectors","Fragments":["were"]},{"Key":"protectors were","Fragments":["added."]},{"Key":"3) RemoveBlankCharacters","Fragments":["function"]},{"Key":"RemoveBlankCharacters function","Fragments":["was"]},{"Key":"better clarify","Fragments":["what"]},{"Key":"4) Helper","Fragments":["functions"]},{"Key":"Helper functions","Fragments":["were"]},{"Key":"functions were","Fragments":["moved"]},{"Key":"were moved","Fragments":["to"]},{"Key":"to anonymous","Fragments":["namespace"]},{"Key":"them private","Fragments":["to"]},{"Key":"private to","Fragments":["this"]},{"Key":"file. Was","Fragments":["this"]},{"Key":"Was this","Fragments":["really"]},{"Key":" 5)","Fragments":["using","You"]},{"Key":"5) using","Fragments":["namespace"]},{"Key":"std; was","Fragments":["added"]},{"Key":"readability (std::","Fragments":["remained"]},{"Key":"(std:: remained","Fragments":["by"]},{"Key":"remained by","Fragments":["mistake"]},{"Key":"by mistake","Fragments":["at"]},{"Key":"mistake at","Fragments":["line"]},{"Key":"recommend is_leap_year","Fragments":["be"]},{"Key":"is_leap_year be","Fragments":["inline,"]},{"Key":"or moved","Fragments":["into"]},{"Key":"moved into","Fragments":["a"]},{"Key":"file... so","Fragments":["that"]},{"Key":"by more","Fragments":["than"]},{"Key":"one source","Fragments":["file"]},{"Key":"What's with","Fragments":["mod?","the"]},{"Key":"with mod?","Fragments":["At"]},{"Key":"mod? At","Fragments":["first"]},{"Key":"first I","Fragments":["thought","went","was"]},{"Key":"the parentheses","Fragments":["to","is"]},{"Key":"parentheses to","Fragments":["make"]},{"Key":"of operation","Fragments":["more","in"]},{"Key":"operation more","Fragments":["clear"]},{"Key":"clear without","Fragments":["lots"]},{"Key":"without lots","Fragments":["of"]},{"Key":"of superflous","Fragments":["punctuation,"]},{"Key":"superflous punctuation,","Fragments":["but"]},{"Key":"punctuation, but","Fragments":["if"]},{"Key":"guessing you","Fragments":["were"]},{"Key":"were trying","Fragments":["to"]},{"Key":"avoid writing","Fragments":["year"]},{"Key":"writing year","Fragments":["in"]},{"Key":"year in","Fragments":["each"]},{"Key":" Fair","Fragments":["call,"]},{"Key":"Fair call,","Fragments":["though"]},{"Key":"call, though","Fragments":["I"]},{"Key":"imagine for","Fragments":["the"]},{"Key":"int, any","Fragments":["performance"]},{"Key":"any performance","Fragments":["gain","gains"]},{"Key":"gain (unless","Fragments":["the"]},{"Key":"(unless the","Fragments":["map"]},{"Key":"is enormous)","Fragments":["will"]},{"Key":"enormous) will","Fragments":["be"]},{"Key":" Couple","Fragments":["of"]},{"Key":"Couple of","Fragments":["comments:"]},{"Key":"- ranged","Fragments":["for"]},{"Key":"for will","Fragments":["look","work","work."]},{"Key":"better here","Fragments":["I"]},{"Key":"- why","Fragments":["not"]},{"Key":"use islower","Fragments":["and","instead"]},{"Key":"Yes it","Fragments":["can"]},{"Key":"using variable","Fragments":["to"]},{"Key":"a value...","Fragments":["That's"]},{"Key":"value... That's","Fragments":["arguable"]},{"Key":"That's arguable","Fragments":["if"]},{"Key":"arguable if","Fragments":["to"]},{"Key":"if to","Fragments":["allow"]},{"Key":"allow or","Fragments":["not"]},{"Key":"not multiple","Fragments":["return"]},{"Key":"return statements.","Fragments":["E.g."]},{"Key":"statements. E.g.","Fragments":["in"]},{"Key":"E.g. in","Fragments":["my"]},{"Key":"everyday work","Fragments":["we"]},{"Key":"a strict","Fragments":["guideline"]},{"Key":"strict guideline","Fragments":["about"]},{"Key":"guideline about","Fragments":["having"]},{"Key":"about having","Fragments":["a"]},{"Key":"function. So","Fragments":["it's"]},{"Key":"program itself","Fragments":["looks"]},{"Key":"itself looks","Fragments":["fine,"]},{"Key":"looks fine,","Fragments":["but"]},{"Key":"few remarks.","Fragments":[":)"]},{"Key":"line 15","Fragments":["of"]},{"Key":"15 of","Fragments":["rna_transcription.cpp"]},{"Key":"data a","Fragments":["reference```std::string"]},{"Key":"a reference```std::string","Fragments":["const\u0026```"]},{"Key":"reference```std::string const\u0026```","Fragments":["would"]},{"Key":"const\u0026``` would","Fragments":["be"]},{"Key":"be equally","Fragments":["effective,"]},{"Key":"equally effective,","Fragments":["but"]},{"Key":"effective, but","Fragments":["safer"]},{"Key":"but safer","Fragments":["and","string::at()"]},{"Key":"safer and","Fragments":["faster.","greppable"]},{"Key":"map name:","Fragments":["'m'"]},{"Key":"name: 'm'","Fragments":["is"]},{"Key":"'m' is","Fragments":["not"]},{"Key":"not specific","Fragments":["enough."]},{"Key":"specific enough.","Fragments":["In"]},{"Key":"enough. In","Fragments":["this"]},{"Key":"this few","Fragments":["lines"]},{"Key":"that big","Fragments":["a"]},{"Key":"a deal,","Fragments":["but"]},{"Key":"a bigger","Fragments":["program","project.","one"]},{"Key":"bigger program","Fragments":["it"]},{"Key":"program it","Fragments":["will"]},{"Key":"will would","Fragments":["be"]},{"Key":"Finally, you","Fragments":["could","might","might","might"]},{"Key":"could consider,","Fragments":["changing"]},{"Key":"consider, changing","Fragments":["from"]},{"Key":"changing from","Fragments":["```map```","a"]},{"Key":"from ```map```","Fragments":["to"]},{"Key":"```map``` to","Fragments":["something"]},{"Key":"something faster,","Fragments":["e.g."]},{"Key":"faster, e.g.","Fragments":["```switch```"]},{"Key":"e.g. ```switch```","Fragments":[":)"]},{"Key":"learning C++.","Fragments":["This"]},{"Key":"C++. This","Fragments":["is"]},{"Key":"first attempt.","Fragments":["I'm"]},{"Key":"attempt. I'm","Fragments":["sure"]},{"Key":"lot wrong","Fragments":["and"]},{"Key":"wrong and","Fragments":["unidiomatic!","wasn't","should"]},{"Key":"program running,","Fragments":["regardless"]},{"Key":"running, regardless","Fragments":["to"]},{"Key":"regardless to","Fragments":["the"]},{"Key":"is confusing","Fragments":["and"]},{"Key":"confusing and","Fragments":["complex"]},{"Key":"and complex","Fragments":["and","checks."]},{"Key":"complex and","Fragments":["I"]},{"Key":"plan to","Fragments":["deal","split"]},{"Key":" self-feedback:","Fragments":["frequent"]},{"Key":"self-feedback: frequent","Fragments":["use"]},{"Key":"frequent use","Fragments":["of"]},{"Key":"`if (valid_11_digit_number(digits))`","Fragments":["makes"]},{"Key":"(valid_11_digit_number(digits))` makes","Fragments":["me"]},{"Key":"makes me","Fragments":["think"]},{"Key":"me think","Fragments":["polymorphism,"]},{"Key":"think polymorphism,","Fragments":["maybe"]},{"Key":"polymorphism, maybe","Fragments":["an"]},{"Key":"maybe an","Fragments":["internal"]},{"Key":"an internal","Fragments":["struct?","debate"]},{"Key":"internal struct?","Fragments":["hm."]},{"Key":"arguments as","Fragments":["const","constant","'const"]},{"Key":"string references,","Fragments":["accessed"]},{"Key":"references, accessed","Fragments":["strings"]},{"Key":"accessed strings","Fragments":["using"]},{"Key":"strings using","Fragments":["array"]},{"Key":"is boost","Fragments":["allowed?"]},{"Key":"boost allowed?","Fragments":[":-)"]},{"Key":"just curious:","Fragments":["in"]},{"Key":"curious: in","Fragments":["terms"]},{"Key":"of performance,","Fragments":["what"]},{"Key":"performance, what","Fragments":["is"]},{"Key":"overhead introduced","Fragments":["by"]},{"Key":"introduced by","Fragments":["boost?"]},{"Key":"and last","Fragments":["but","position"]},{"Key":"least: is","Fragments":["this"]},{"Key":"any way","Fragments":["debuggable?"]},{"Key":"think more","Fragments":["logically","code","about"]},{"Key":"more logically","Fragments":["than"]},{"Key":"logically than","Fragments":["writing"]},{"Key":"than writing","Fragments":["verbose"]},{"Key":"writing verbose","Fragments":["code."]},{"Key":"have downloaded","Fragments":["next"]},{"Key":"downloaded next","Fragments":["exercise"]},{"Key":"next exercise","Fragments":["word_count."]},{"Key":"I learnt","Fragments":["a"]},{"Key":"learnt a","Fragments":["lot"]},{"Key":"lot from","Fragments":["the"]},{"Key":"exercise itself","Fragments":["!"]},{"Key":"you're right.","Fragments":["And","empty()",":D"]},{"Key":"right. And","Fragments":["I"]},{"Key":"think only","Fragments":["::islower"]},{"Key":"only ::islower","Fragments":["will"]},{"Key":"::islower will","Fragments":["do"]},{"Key":" \u003cli\u003eNote\u003cul\u003e\u003cli\u003eDue","Fragments":["to"]},{"Key":"\u003cli\u003eNote\u003cul\u003e\u003cli\u003eDue to","Fragments":["my"]},{"Key":"my unfortold","Fragments":["level"]},{"Key":"unfortold level","Fragments":["of"]},{"Key":"of dumbassery,","Fragments":["I"]},{"Key":"dumbassery, I","Fragments":["was"]},{"Key":"the build","Fragments":["system","process."]},{"Key":"build system","Fragments":["wrong"]},{"Key":"system wrong","Fragments":["and"]},{"Key":"wasn't passing","Fragments":["all"]},{"Key":"tests. Now","Fragments":["I"]},{"Key":"I do,","Fragments":["with","however,"]},{"Key":"do, with","Fragments":["flying"]},{"Key":"with flying","Fragments":["colors"]},{"Key":"flying colors","Fragments":["might"]},{"Key":"colors might","Fragments":["I"]},{"Key":"might I","Fragments":["add.\u003c/li\u003e\u003c/ul\u003e"]},{"Key":" \u003c/li\u003e\u003cli\u003eCompletely","Fragments":["redone"]},{"Key":" \u003cul\u003e\u003cli\u003eAfter","Fragments":["reviewing"]},{"Key":"\u003cul\u003e\u003cli\u003eAfter reviewing","Fragments":["others"]},{"Key":"reviewing others","Fragments":["I"]},{"Key":"others I","Fragments":["added"]},{"Key":"more C++","Fragments":["11","-","to"]},{"Key":"C++ 11","Fragments":["flare","only"]},{"Key":"11 flare","Fragments":["to"]},{"Key":"flare to","Fragments":["mine,"]},{"Key":"to mine,","Fragments":["thanks","and"]},{"Key":"mine, thanks","Fragments":["to"]},{"Key":"to everybody","Fragments":["for"]},{"Key":"everybody for","Fragments":["the"]},{"Key":"the inspiration","Fragments":["and"]},{"Key":"inspiration and","Fragments":["chance"]},{"Key":"and chance","Fragments":["to"]},{"Key":"chance to","Fragments":["learn.\u003c/li\u003e","get","pick","play"]},{"Key":"\u003cli\u003e `const","Fragments":["map\u003cstring,int\u003e","map\u003cstring,int\u003e","map\u003cstring,int\u003e"]},{"Key":"`const map\u003cstring,int\u003e","Fragments":["words(const","words(const","words(const"]},{"Key":"map\u003cstring,int\u003e words(const","Fragments":["string\u0026","string\u0026","string\u0026"]},{"Key":"words(const string\u0026","Fragments":["words)`","words)`","words)`"]},{"Key":"string\u0026 words)`","Fragments":["takes","takes","takes"]},{"Key":"words)` takes","Fragments":["a","a","a"]},{"Key":"a phrase.","Fragments":["\u003c/li\u003e","\u003c/li\u003e","\u003c/li\u003e"]},{"Key":"the `string`","Fragments":["is"]},{"Key":"`string` is","Fragments":["analyzed","then"]},{"Key":"is analyzed","Fragments":["and","and","and"]},{"Key":"analyzed and","Fragments":["converted","appended","appended"]},{"Key":"and converted","Fragments":["into"]},{"Key":"converted into","Fragments":["a"]},{"Key":"space if","Fragments":["it"]},{"Key":"not alpha-numeric","Fragments":["or"]},{"Key":"alpha-numeric or","Fragments":["to"]},{"Key":"lowercase if","Fragments":["it"]},{"Key":"\u003cli\u003eThe string","Fragments":["is"]},{"Key":"the separated","Fragments":["by"]},{"Key":"separated by","Fragments":["spaces"]},{"Key":"by spaces","Fragments":["into"]},{"Key":"spaces into","Fragments":["a"]},{"Key":" \u003cli\u003eEach","Fragments":["separated"]},{"Key":"\u003cli\u003eEach separated","Fragments":["`string`"]},{"Key":"separated `string`","Fragments":["is"]},{"Key":"is then","Fragments":["checked","read","pretty"]},{"Key":"then checked","Fragments":["for","for"]},{"Key":"for emptyness","Fragments":["and","first","before"]},{"Key":"emptyness and","Fragments":["inserted"]},{"Key":"and inserted","Fragments":["into","or","or"]},{"Key":"the `return`","Fragments":["`map`\u003c/li\u003e"]},{"Key":"`map` `return`","Fragments":["value"]},{"Key":"`return` value","Fragments":["if"]},{"Key":"large then","Fragments":["I","I","I"]},{"Key":"potentially copy","Fragments":["a","a","a"]},{"Key":"copy a","Fragments":["large","large","large","const"]},{"Key":"large amount","Fragments":["of","of","of"]},{"Key":"data on","Fragments":["`return`","return","return"]},{"Key":"on `return`","Fragments":["but"]},{"Key":"`return` but","Fragments":["because"]},{"Key":"can't return","Fragments":["a","a","a"]},{"Key":"local reference","Fragments":["without","without","without"]},{"Key":"reference without","Fragments":["beating","beating","beating"]},{"Key":"without beating","Fragments":["up","up","up"]},{"Key":"beating up","Fragments":["the","the","the"]},{"Key":"compiler a","Fragments":["bit,","bit,","bit,"]},{"Key":"bit, I","Fragments":["gave","gave","gave"]},{"Key":"gave in.","Fragments":["\u003c/li\u003e","\u003c/li\u003e","\u003c/li\u003e"]},{"Key":"\u003cli\u003eBecause I","Fragments":["iterate","chose","chose","chose","decided","chose"]},{"Key":"iterate 4","Fragments":["times"]},{"Key":"times \u003ci\u003ei.e.","Fragments":["`std::transform`,"]},{"Key":"\u003ci\u003ei.e. `std::transform`,","Fragments":["`boost::split`,"]},{"Key":"`std::transform`, `boost::split`,","Fragments":["`boost::trim`"]},{"Key":"`boost::split`, `boost::trim`","Fragments":["and"]},{"Key":"`boost::trim` and","Fragments":["`for(auto"]},{"Key":"and `for(auto","Fragments":["s"]},{"Key":"`for(auto s","Fragments":[":"]},{"Key":"s :","Fragments":["word_list)`\u003c/i\u003e"]},{"Key":": word_list)`\u003c/i\u003e","Fragments":["this"]},{"Key":"word_list)`\u003c/i\u003e this","Fragments":["program"]},{"Key":"program does","Fragments":["not"]},{"Key":"have optimal","Fragments":["performance.\u003c/ul\u003e"]},{"Key":" __Too","Fragments":["Many"]},{"Key":"__Too Many","Fragments":["`#include`'s__"]},{"Key":"I'm submitting","Fragments":["an"]},{"Key":"submitting an","Fragments":["iteration"]},{"Key":"iteration that","Fragments":["doesn't"]},{"Key":"have pointless","Fragments":["`#include`'s"]},{"Key":"pointless `#include`'s","Fragments":["now"]},{"Key":" Fascinating!","Fragments":["Thanks"]},{"Key":"Fascinating! Thanks","Fragments":["for"]},{"Key":"the in-depth","Fragments":["explanation"]},{"Key":"in-depth explanation","Fragments":["\u0026"]},{"Key":"explanation \u0026","Fragments":["demo."]},{"Key":"very unprofessional.","Fragments":["I"]},{"Key":"unprofessional. I","Fragments":["feel"]},{"Key":"feel tipsy","Fragments":["now."]},{"Key":"catch about","Fragments":["the"]},{"Key":"the crash","Fragments":["on"]},{"Key":"crash on","Fragments":["empty"]},{"Key":"a error","Fragments":["on"]},{"Key":"error on","Fragments":["last"]},{"Key":"on last","Fragments":["test"]},{"Key":"I applied","Fragments":["your"]},{"Key":"applied your","Fragments":["recommendations"]},{"Key":"your recommendations","Fragments":["and"]},{"Key":"recommendations and","Fragments":["submitted"]},{"Key":"Hi @catherine,","Fragments":["I"]},{"Key":"@catherine, I","Fragments":["like"]},{"Key":"of `char*`","Fragments":["and"]},{"Key":"`char*` and","Fragments":["how"]},{"Key":"how clean","Fragments":["your","your"]},{"Key":"clean your","Fragments":["code","code"]},{"Key":"code is.","Fragments":["A","Great"]},{"Key":"is. A","Fragments":["couple"]},{"Key":"would nitpick","Fragments":["that"]},{"Key":"nitpick that","Fragments":["could"]},{"Key":"code even","Fragments":["better"]},{"Key":"better is","Fragments":["changing"]},{"Key":"is changing","Fragments":["the"]},{"Key":"the `m`","Fragments":["assignment"]},{"Key":"`m` assignment","Fragments":["so"]},{"Key":"assignment so","Fragments":["that"]},{"Key":"that `algo.h`","Fragments":["doesn't"]},{"Key":"`algo.h` doesn't","Fragments":["need"]},{"Key":"included just","Fragments":["for"]},{"Key":"for `min()`","Fragments":["as"]},{"Key":"`min()` as","Fragments":["well"]},{"Key":"as shortening","Fragments":["or"]},{"Key":"shortening or","Fragments":["clarifying"]},{"Key":"or clarifying","Fragments":["the"]},{"Key":"clarifying the","Fragments":["`for`"]},{"Key":"`for` and","Fragments":["`if`"]},{"Key":"and `if`","Fragments":["statement."]},{"Key":"statement. In","Fragments":["general,"]},{"Key":"general, try","Fragments":["to"]},{"Key":"to shorten","Fragments":["or","things","overly"]},{"Key":"shorten or","Fragments":["rearrange"]},{"Key":"or rearrange","Fragments":["your"]},{"Key":"rearrange your","Fragments":["code"]},{"Key":"code while","Fragments":["keeping"]},{"Key":"and increasing","Fragments":["readability."]},{"Key":" Starting","Fragments":["variables"]},{"Key":"Starting variables","Fragments":["with"]},{"Key":"uppercase letter","Fragments":["is","are","and"]},{"Key":"rather unusual","Fragments":["convention,"]},{"Key":"unusual convention,","Fragments":["most"]},{"Key":"convention, most","Fragments":["people"]},{"Key":"people capitalize","Fragments":["user"]},{"Key":"capitalize user","Fragments":["defined"]},{"Key":"user defined","Fragments":["types"]},{"Key":"defined types","Fragments":["instead."]},{"Key":"you taking","Fragments":["the"]},{"Key":"function \"hey\"","Fragments":["by"]},{"Key":"\"hey\" by","Fragments":["value?"]},{"Key":"The parens","Fragments":["in"]},{"Key":"parens in","Fragments":["is_yell"]},{"Key":"in is_yell","Fragments":["are"]},{"Key":"is_yell are","Fragments":["superfluous"]},{"Key":"are superfluous","Fragments":["and"]},{"Key":"superfluous and","Fragments":["don't"]},{"Key":"really add","Fragments":["to"]},{"Key":"add to","Fragments":["clarity"]},{"Key":"to clarity","Fragments":["imo."]},{"Key":"proper header","Fragments":["for"]},{"Key":"character classification","Fragments":["functions","functions","functions"]},{"Key":"classification functions","Fragments":["(isalnum","outside","and","in"]},{"Key":"functions (isalnum","Fragments":["etc.)."]},{"Key":"great leap","Fragments":["from"]},{"Key":"leap from","Fragments":["your"]},{"Key":"first commit,","Fragments":["I"]},{"Key":"commit, I","Fragments":["like"]},{"Key":"the unnamed","Fragments":["namespace","namespace"]},{"Key":"only made","Fragments":["the"]},{"Key":"the 'hey'","Fragments":["function"]},{"Key":"'hey' function","Fragments":["a","instead"]},{"Key":"function a","Fragments":["member","little","bit"]},{"Key":"class 'bob'.","Fragments":["So,","Otherwise"]},{"Key":"'bob'. So,","Fragments":["rather"]},{"Key":"So, rather","Fragments":["than"]},{"Key":"than make","Fragments":["all"]},{"Key":"functions members","Fragments":["of"]},{"Key":"of 'bob'","Fragments":["I"]},{"Key":"'bob' I","Fragments":["made"]},{"Key":"made them","Fragments":["regular"]},{"Key":"them regular","Fragments":["functions."]},{"Key":"used boost","Fragments":["on"]},{"Key":"the (few)","Fragments":["C++"]},{"Key":"(few) C++","Fragments":["projects"]},{"Key":"C++ projects","Fragments":["I"]},{"Key":"projects I","Fragments":["have"]},{"Key":"been apart","Fragments":["of,"]},{"Key":"apart of,","Fragments":["I"]},{"Key":"of, I","Fragments":["am"]},{"Key":"too familiar","Fragments":["with"]},{"Key":"pass was","Fragments":["to"]},{"Key":"make 'hey'","Fragments":["a"]},{"Key":"'hey' a","Fragments":["static"]},{"Key":"'bob'. Otherwise","Fragments":["I"]},{"Key":"your `raindops`","Fragments":["class"]},{"Key":"`raindops` class","Fragments":["have"]},{"Key":"class have","Fragments":["a"]},{"Key":"a constructor?","Fragments":["I"]},{"Key":"constructor? I","Fragments":["don't"]},{"Key":"Please be","Fragments":["careful"]},{"Key":"with `using","Fragments":["namespace"]},{"Key":"namespace ...`","Fragments":["in"]},{"Key":"...` in","Fragments":["a"]},{"Key":"That ways","Fragments":["you"]},{"Key":"ways you","Fragments":["make","could"]},{"Key":"everyone including","Fragments":["your"]},{"Key":"and straight","Fragments":["forward."]},{"Key":" @ayden","Fragments":["Thank","It's"]},{"Key":"@ayden Thank","Fragments":["you"]},{"Key":"the clarification,","Fragments":["preprocessor"]},{"Key":"clarification, preprocessor","Fragments":["is"]},{"Key":"preprocessor is","Fragments":["a"]},{"Key":"new \u003cstrike\u003etoy\u003c/strike\u003e","Fragments":["tool"]},{"Key":"\u003cstrike\u003etoy\u003c/strike\u003e tool","Fragments":["I've"]},{"Key":"tool I've","Fragments":["been"]},{"Key":"been trying","Fragments":["to"]},{"Key":"The ordering","Fragments":["is"]},{"Key":"ordering is","Fragments":["intended"]},{"Key":"to mirror","Fragments":["the"]},{"Key":"mirror the","Fragments":["phrasing"]},{"Key":"the phrasing","Fragments":["\"Divisible"]},{"Key":"phrasing \"Divisible","Fragments":["by"]},{"Key":"\"Divisible by","Fragments":["4"]},{"Key":"4 and","Fragments":["not"]},{"Key":"by 100","Fragments":["unless"]},{"Key":"100 unless","Fragments":["divisible"]},{"Key":"unless divisible","Fragments":["by"]},{"Key":"by 400\",","Fragments":["not"]},{"Key":"400\", not","Fragments":["run"]},{"Key":"not run","Fragments":["time"]},{"Key":"@ayden It's","Fragments":["not"]},{"Key":"not Knuth","Fragments":["but"]},{"Key":"Knuth but","Fragments":["I"]},{"Key":" \u003cem\u003ePut","Fragments":["the"]},{"Key":"\u003cem\u003ePut the","Fragments":["most"]},{"Key":"common cases","Fragments":["first.","first,"]},{"Key":"cases first.","Fragments":["By"]},{"Key":"first. By","Fragments":["putting"]},{"Key":"By putting","Fragments":["the"]},{"Key":"cases first,","Fragments":["you"]},{"Key":"first, you","Fragments":["minimize"]},{"Key":"you minimize","Fragments":["the"]},{"Key":"of exception-case","Fragments":["handling"]},{"Key":"exception-case handling","Fragments":["code"]},{"Key":"handling code","Fragments":["someone"]},{"Key":"code someone","Fragments":["has"]},{"Key":"someone has","Fragments":["to"]},{"Key":"read to","Fragments":["find","those"]},{"Key":"usual case\u003c/em\u003e","Fragments":["\u003ca"]},{"Key":"case\u003c/em\u003e \u003ca","Fragments":["href=https://books.google.com/books?id=I-83BAAAQBAJ\u0026lpg=PA359\u0026dq=Put%20the%20most%20common%20cases%20first.%20By%20putting%20the%20most%20common%20cases%20first%2C%20you%20minimize%20the%20amount%20of%20exception-case%20handling\u0026pg=PA359#v=onepage\u0026q\u0026f=false\u003e\u003cstrong\u003eCode"]},{"Key":"\u003ca href=https://books.google.com/books?id=I-83BAAAQBAJ\u0026lpg=PA359\u0026dq=Put%20the%20most%20common%20cases%20first.%20By%20putting%20the%20most%20common%20cases%20first%2C%20you%20minimize%20the%20amount%20of%20exception-case%20handling\u0026pg=PA359#v=onepage\u0026q\u0026f=false\u003e\u003cstrong\u003eCode","Fragments":["Complete,"]},{"Key":"href=https://books.google.com/books?id=I-83BAAAQBAJ\u0026lpg=PA359\u0026dq=Put%20the%20most%20common%20cases%20first.%20By%20putting%20the%20most%20common%20cases%20first%2C%20you%20minimize%20the%20amount%20of%20exception-case%20handling\u0026pg=PA359#v=onepage\u0026q\u0026f=false\u003e\u003cstrong\u003eCode Complete,","Fragments":["Second"]},{"Key":"Complete, Second","Fragments":["Edition\u003c/strong\u003e\u003c/a\u003e"]},{"Key":"written flat,","Fragments":["but"]},{"Key":"flat, but","Fragments":["the"]},{"Key":"the negations","Fragments":["detract"]},{"Key":"negations detract","Fragments":["from"]},{"Key":"detract from","Fragments":["elegance.","its"]},{"Key":" if(!is_divisible(year,","Fragments":["4))","100))","400))"]},{"Key":" Clearly","Fragments":["written,","for"]},{"Key":"Clearly written,","Fragments":["some"]},{"Key":"written, some","Fragments":["algorithm"]},{"Key":"some algorithm","Fragments":["tips."]},{"Key":" ```is_prime```","Fragments":["only"]},{"Key":"```is_prime``` only","Fragments":["needs","needs"]},{"Key":"only needs","Fragments":["to","to","to"]},{"Key":"check from","Fragments":["2"]},{"Key":"If primes","Fragments":["are"]},{"Key":"primes are","Fragments":["stored,"]},{"Key":"are stored,","Fragments":["```is_prime```"]},{"Key":"stored, ```is_prime```","Fragments":["only"]},{"Key":"check \u003cstrong\u003eprimes\u003c/strong\u003e","Fragments":["from"]},{"Key":"\u003cstrong\u003eprimes\u003c/strong\u003e from","Fragments":["2"]},{"Key":"to sqrt(n).","Fragments":["Takes"]},{"Key":"sqrt(n). Takes","Fragments":["a"]},{"Key":"Takes a","Fragments":["bit"]},{"Key":"more memory,","Fragments":["though."]},{"Key":"namespace \"bob\"","Fragments":["instead"]},{"Key":"\"bob\" instead","Fragments":["of"]},{"Key":"member function,","Fragments":["they","but","or"]},{"Key":"function, they","Fragments":["are"]},{"Key":"are syntactically","Fragments":["equivalent"]},{"Key":"syntactically equivalent","Fragments":["from"]},{"Key":"equivalent from","Fragments":["a"]},{"Key":"a callers","Fragments":["perspective."]},{"Key":" Prefixing","Fragments":["utility"]},{"Key":"Prefixing utility","Fragments":["functions"]},{"Key":"the module","Fragments":["name"]},{"Key":"module name","Fragments":["or"]},{"Key":"name or","Fragments":["whatever"]},{"Key":"whatever is","Fragments":["very"]},{"Key":"very C-like,","Fragments":["you"]},{"Key":"C-like, you","Fragments":["may"]},{"Key":"instead (beware","Fragments":["of"]},{"Key":"(beware of","Fragments":["using"]},{"Key":"could move","Fragments":["the","the","`isDNA`"]},{"Key":"class definition","Fragments":["to","in","from"]},{"Key":"file too","Fragments":["and"]},{"Key":"the forward","Fragments":["declarations."]},{"Key":"forward declarations.","Fragments":["I"]},{"Key":"suppose these","Fragments":["functions"]},{"Key":"aren't meant","Fragments":["to"]},{"Key":"called from","Fragments":["the"]},{"Key":"the outside","Fragments":["world"]},{"Key":"outside world","Fragments":["anyway,"]},{"Key":"world anyway,","Fragments":["or"]},{"Key":"anyway, or","Fragments":["why"]},{"Key":"or why","Fragments":["would"]},{"Key":"why would","Fragments":["you"]},{"Key":"move them","Fragments":["to"]},{"Key":"file while","Fragments":["keeping"]},{"Key":"definition in","Fragments":["the"]},{"Key":" Pass","Fragments":["strings","your"]},{"Key":"Pass strings","Fragments":["as"]},{"Key":"and declaring","Fragments":["the","it"]},{"Key":"functions outside","Fragments":["of","the"]},{"Key":"class bob","Fragments":["was","{"]},{"Key":"bob was","Fragments":["certainly"]},{"Key":"was certainly","Fragments":["a"]},{"Key":"You've named","Fragments":["your"]},{"Key":"named your","Fragments":["parameter","function"]},{"Key":"names with","Fragments":["this","\"is\",","internal"]},{"Key":"particular exercise","Fragments":["in"]},{"Key":"in mind.","Fragments":["The","Old"]},{"Key":"mind. The","Fragments":["hamming","formatted"]},{"Key":"The hamming","Fragments":["distance"]},{"Key":"hamming distance","Fragments":["is"]},{"Key":"distance is","Fragments":["a","only","defined"]},{"Key":"a universal","Fragments":["concept"]},{"Key":"universal concept","Fragments":["for"]},{"Key":"concept for","Fragments":["sequences"]},{"Key":"for sequences","Fragments":["though,","of"]},{"Key":"sequences though,","Fragments":["so"]},{"Key":"prefer a","Fragments":["generic"]},{"Key":"a generic","Fragments":["name.","code","solution"]},{"Key":"Use std::min","Fragments":["in"]},{"Key":"std::min in","Fragments":["line"]},{"Key":"line 8","Fragments":["and"]},{"Key":"use prefix-increment","Fragments":["when"]},{"Key":"prefix-increment when","Fragments":["you"]},{"Key":"don't mean","Fragments":["postfix-increment."]},{"Key":"A strings","Fragments":["length"]},{"Key":"defined as","Fragments":["size_t,","any","yelling,","either:","any","containing","a"]},{"Key":"as size_t,","Fragments":["which"]},{"Key":"size_t, which","Fragments":["may"]},{"Key":"differ in","Fragments":["size"]},{"Key":"size from","Fragments":["int."]},{"Key":"from int.","Fragments":["Could"]},{"Key":"int. Could","Fragments":["this"]},{"Key":"Could this","Fragments":["lead"]},{"Key":"this lead","Fragments":["to"]},{"Key":"to problems","Fragments":["in"]},{"Key":"using std::string","Fragments":["clause","instead"]},{"Key":"std::string clause","Fragments":["belongs"]},{"Key":"clause belongs","Fragments":["within"]},{"Key":"belongs within","Fragments":["namespace"]},{"Key":"namespace bounds,","Fragments":["especially"]},{"Key":"bounds, especially","Fragments":["since"]},{"Key":"Your verses","Fragments":["function"]},{"Key":"verses function","Fragments":["could"]},{"Key":"single execution","Fragments":["path."]},{"Key":"to omit","Fragments":["the"]},{"Key":"omit the","Fragments":["array"]},{"Key":"array size","Fragments":["in"]},{"Key":"in theVerse's","Fragments":["definition"]},{"Key":"theVerse's definition","Fragments":["to"]},{"Key":"avoid potential","Fragments":["size"]},{"Key":"potential size","Fragments":["mismatches"]},{"Key":"size mismatches","Fragments":["which"]},{"Key":"mismatches which","Fragments":["could"]},{"Key":"could happen","Fragments":["easily","that"]},{"Key":"happen easily","Fragments":["once"]},{"Key":"easily once","Fragments":["verses"]},{"Key":"once verses","Fragments":["are"]},{"Key":"are changed.","Fragments":["You"]},{"Key":"changed. You","Fragments":["may"]},{"Key":"may also","Fragments":["want","like","want"]},{"Key":"more definite","Fragments":["name"]},{"Key":"definite name","Fragments":["for"]},{"Key":"probably have","Fragments":["used"]},{"Key":"the [`trim()`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html)","Fragments":["algorithm"]},{"Key":"[`trim()`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html) algorithm","Fragments":["from"]},{"Key":"algorithm from","Fragments":["boost,"]},{"Key":"argument in-place,","Fragments":["so"]},{"Key":"in-place, so","Fragments":["I'd"]},{"Key":"so I'd","Fragments":["still"]},{"Key":"I'd still","Fragments":["have"]},{"Key":"write something","Fragments":["that","just","like"]},{"Key":"that took","Fragments":["a"]},{"Key":"written it.","Fragments":["I"]},{"Key":"suppose it","Fragments":["would","is"]},{"Key":"little cleaner,","Fragments":["but"]},{"Key":"about boost/tokenizer.hpp?","Fragments":["Does"]},{"Key":"boost/tokenizer.hpp? Does","Fragments":["exactly"]},{"Key":"Does exactly","Fragments":["what"]},{"Key":"exercise requires,","Fragments":["minus"]},{"Key":"requires, minus","Fragments":["lower-casing"]},{"Key":"minus lower-casing","Fragments":["words"]},{"Key":"lower-casing words","Fragments":["before"]},{"Key":"before entering","Fragments":["into"]},{"Key":"Your to_lower","Fragments":["helper"]},{"Key":"to_lower helper","Fragments":["is"]},{"Key":"helper is","Fragments":["the"]},{"Key":"using `boost::algorithm::split`","Fragments":["to"]},{"Key":"`boost::algorithm::split` to","Fragments":["split"]},{"Key":"split words.","Fragments":["Feels"]},{"Key":"words. Feels","Fragments":["better."]},{"Key":"broke this","Fragments":["down"]},{"Key":"this down","Fragments":["procedurally"]},{"Key":"down procedurally","Fragments":["and"]},{"Key":"procedurally and","Fragments":["introduced","completely"]},{"Key":"introduced some","Fragments":["intention-revealing"]},{"Key":"some intention-revealing","Fragments":["functions."]},{"Key":"intention-revealing functions.","Fragments":["I'm"]},{"Key":"functions. I'm","Fragments":["not"]},{"Key":"be simpler","Fragments":["if","if","if"]},{"Key":"if approached","Fragments":["as"]},{"Key":"approached as","Fragments":["a"]},{"Key":"included your","Fragments":["header"]},{"Key":"comment at","Fragments":["the"]},{"Key":"the cpp.","Fragments":["This"]},{"Key":"cpp. This","Fragments":["is"]},{"Key":"nice reference","Fragments":["for"]},{"Key":"for reading","Fragments":["the"]},{"Key":"the `cpp`","Fragments":["code."]},{"Key":"`cpp` code.","Fragments":["We're"]},{"Key":"code. We're","Fragments":["working"]},{"Key":"We're working","Fragments":["on"]},{"Key":"on allowing","Fragments":["[multiple"]},{"Key":"allowing [multiple","Fragments":["file"]},{"Key":"[multiple file","Fragments":["submission](https://github.com/exercism/exercism.io/issues/1165)"]},{"Key":"file submission](https://github.com/exercism/exercism.io/issues/1165)","Fragments":["to"]},{"Key":"submission](https://github.com/exercism/exercism.io/issues/1165) to","Fragments":["make"]},{"Key":"this easier","Fragments":["going"]},{"Key":"easier going","Fragments":["forward."]},{"Key":"you noticed","Fragments":["from","how","how"]},{"Key":"noticed from","Fragments":["the"]},{"Key":"suite, `hey`","Fragments":["is"]},{"Key":"a scoped","Fragments":["function."]},{"Key":"scoped function.","Fragments":["`bob::hey`"]},{"Key":"function. `bob::hey`","Fragments":["can"]},{"Key":"`bob::hey` can","Fragments":["either"]},{"Key":"can either","Fragments":["refer"]},{"Key":"either refer","Fragments":["to"]},{"Key":"function declared","Fragments":["in"]},{"Key":"in class","Fragments":["`bob`,"]},{"Key":"class `bob`,","Fragments":["or","since"]},{"Key":"`bob`, or","Fragments":["it"]},{"Key":"in namespace","Fragments":["`bob`.","`bob`","bob,","anagram"]},{"Key":"namespace `bob`.","Fragments":["Do"]},{"Key":"`bob`. Do","Fragments":["you"]},{"Key":"static class","Fragments":["method?","method","case,","variables","members."]},{"Key":"your intention","Fragments":["revealing","and"]},{"Key":"intention revealing","Fragments":["methods","functions"]},{"Key":"revealing methods","Fragments":["`is_question`,"]},{"Key":"methods `is_question`,","Fragments":["`is_shouting`,"]},{"Key":"`is_question`, `is_shouting`,","Fragments":["and"]},{"Key":"`is_shouting`, and","Fragments":["`is_silence`."]},{"Key":"and `is_silence`.","Fragments":["You"]},{"Key":"`is_silence`. You","Fragments":["have"]},{"Key":"them declared","Fragments":["as"]},{"Key":"as private","Fragments":["methods"]},{"Key":"private methods","Fragments":["on","of"]},{"Key":"on `bob`,","Fragments":["but"]},{"Key":"`bob`, but","Fragments":["they"]},{"Key":"are completely","Fragments":["internal"]},{"Key":"completely internal","Fragments":["to"]},{"Key":"internal to","Fragments":["the","the"]},{"Key":"of `hey`.","Fragments":["Can"]},{"Key":"`hey`. Can","Fragments":["you"]},{"Key":"them available","Fragments":["to","in"]},{"Key":"available to","Fragments":["your","std::string,"]},{"Key":"your implementation,","Fragments":["but"]},{"Key":"implementation, but","Fragments":["completely","an","it"]},{"Key":"but completely","Fragments":["omit"]},{"Key":"completely omit","Fragments":["mentioning"]},{"Key":"omit mentioning","Fragments":["them"]},{"Key":"mentioning them","Fragments":["in"]},{"Key":"header? This","Fragments":["way"]},{"Key":"their signatures","Fragments":["or"]},{"Key":"signatures or","Fragments":["names"]},{"Key":"or names","Fragments":["in"]},{"Key":"without forcing","Fragments":["any"]},{"Key":"forcing any","Fragments":["recompilation"]},{"Key":"any recompilation","Fragments":["of"]},{"Key":"recompilation of","Fragments":["clients"]},{"Key":"of clients","Fragments":["of"]},{"Key":"clients of","Fragments":["the","`bob.h`"]},{"Key":" `std::string`","Fragments":["shares","has"]},{"Key":"`std::string` shares","Fragments":["many"]},{"Key":"shares many","Fragments":["of"]},{"Key":"same methods","Fragments":["as"]},{"Key":"methods as","Fragments":["most","static."]},{"Key":"as most","Fragments":["container"]},{"Key":"most container","Fragments":["classes"]},{"Key":"container classes","Fragments":["in"]},{"Key":"classes in","Fragments":["the"]},{"Key":"library. Can","Fragments":["you"]},{"Key":"character on","Fragments":["the"]},{"Key":"string explicitly","Fragments":["to"]},{"Key":"explicitly to","Fragments":["use"]},{"Key":" C++11","Fragments":["allows","allows"]},{"Key":"allows us","Fragments":["to"]},{"Key":": msg)","Fragments":["{"]},{"Key":"clearer in","Fragments":["`is_shouting`","the"]},{"Key":"in `is_shouting`","Fragments":["and"]},{"Key":"`is_shouting` and","Fragments":["`is_silence`"]},{"Key":"and `is_silence`","Fragments":["with"]},{"Key":"`is_silence` with","Fragments":["a"]},{"Key":"You're including","Fragments":["`\u003cstdlib.h\u003e`"]},{"Key":"including `\u003cstdlib.h\u003e`","Fragments":["from"]},{"Key":"`\u003cstdlib.h\u003e` from","Fragments":["the"]},{"Key":"get `isalpha`,","Fragments":["etc."]},{"Key":"`isalpha`, etc.","Fragments":["In"]},{"Key":"In C++,","Fragments":["the","a"]},{"Key":"C++, the","Fragments":["preferred"]},{"Key":"the preferred","Fragments":["form","mechanism","way","C++"]},{"Key":"preferred form","Fragments":["for"]},{"Key":"form for","Fragments":["including"]},{"Key":"library headers","Fragments":["is"]},{"Key":"include `\u003ccstdlib\u003e`.","Fragments":["Since"]},{"Key":"`\u003ccstdlib\u003e`. Since","Fragments":["we're"]},{"Key":"Since we're","Fragments":["only"]},{"Key":"we're only","Fragments":["interested","generating"]},{"Key":"only interested","Fragments":["in"]},{"Key":"stuff brought","Fragments":["into"]},{"Key":"brought into","Fragments":["scope","the"]},{"Key":"into scope","Fragments":["by"]},{"Key":"scope by","Fragments":["`\u003cstdlib.h\u003e`,"]},{"Key":"by `\u003cstdlib.h\u003e`,","Fragments":["we"]},{"Key":"`\u003cstdlib.h\u003e`, we","Fragments":["can"]},{"Key":"`\u003ccctype\u003e` and","Fragments":["use"]},{"Key":"use `std::isalpha`,","Fragments":["etc."]},{"Key":"you're passing","Fragments":["strings","strings"]},{"Key":"copying string","Fragments":["values."]},{"Key":"string values.","Fragments":["I"]},{"Key":"your intention-revealing","Fragments":["methods"]},{"Key":"intention-revealing methods","Fragments":["`isQuestion`"]},{"Key":"methods `isQuestion`","Fragments":["and"]},{"Key":"and `isSilence`","Fragments":["as","shorter."]},{"Key":"`isSilence` as","Fragments":["they"]},{"Key":"they reveal","Fragments":["aspects"]},{"Key":"reveal aspects","Fragments":["of"]},{"Key":"problem domain.","Fragments":["`isAllCaps`"]},{"Key":"domain. `isAllCaps`","Fragments":["seems"]},{"Key":"`isAllCaps` seems","Fragments":["to"]},{"Key":"to speak","Fragments":["more"]},{"Key":"speak more","Fragments":["to"]},{"Key":"its implementation","Fragments":["than"]},{"Key":"implementation than","Fragments":["the"]},{"Key":"problem domain,","Fragments":["however."]},{"Key":"domain, however.","Fragments":["Can"]},{"Key":"however. Can","Fragments":["you"]},{"Key":"that speaks","Fragments":["in"]},{"Key":"speaks in","Fragments":["terms"]},{"Key":"C++11 we","Fragments":["can"]},{"Key":"use range-based","Fragments":["for"]},{"Key":"loops to","Fragments":["walk"]},{"Key":"to walk","Fragments":["over"]},{"Key":"walk over","Fragments":["all"]},{"Key":"a string;","Fragments":["this"]},{"Key":"string; this","Fragments":["would"]},{"Key":"loops on","Fragments":["line"]},{"Key":"`std::string` has","Fragments":["methods"]},{"Key":"has methods","Fragments":["`find_first_of`"]},{"Key":"methods `find_first_of`","Fragments":["and"]},{"Key":"`find_first_of` and","Fragments":["`find_last_of`"]},{"Key":"and `find_last_of`","Fragments":["that"]},{"Key":"`find_last_of` that","Fragments":["can"]},{"Key":"simplify `getTrimmedString`","Fragments":["by"]},{"Key":"`getTrimmedString` by","Fragments":["eliminating"]},{"Key":"by eliminating","Fragments":["some","unnecessary"]},{"Key":"eliminating some","Fragments":["low-level"]},{"Key":"some low-level","Fragments":["looping","details"]},{"Key":"low-level looping","Fragments":["details."]},{"Key":"looping details.","Fragments":["Even"]},{"Key":"details. Even","Fragments":["better,"]},{"Key":"Even better,","Fragments":["the"]},{"Key":"better, the","Fragments":["boost"]},{"Key":"string algorithm","Fragments":["[`boost::algorithm::trim`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html)"]},{"Key":"algorithm [`boost::algorithm::trim`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html)","Fragments":["will"]},{"Key":"[`boost::algorithm::trim`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html) will","Fragments":["do"]},{"Key":"of `std::regex`;","Fragments":["when"]},{"Key":"`std::regex`; when","Fragments":["I"]},{"Key":"on gcc","Fragments":["4.8,"]},{"Key":"gcc 4.8,","Fragments":["it"]},{"Key":"4.8, it","Fragments":["simply"]},{"Key":"it simply","Fragments":["failed","be"]},{"Key":"simply failed","Fragments":["because"]},{"Key":"failed because","Fragments":["they"]},{"Key":"working regex","Fragments":["in"]},{"Key":"have lots","Fragments":["of"]},{"Key":"details surfacing","Fragments":["in"]},{"Key":"surfacing in","Fragments":["this"]},{"Key":"one function.","Fragments":["Can"]},{"Key":"function. Can","Fragments":["you"]},{"Key":"could restructure","Fragments":["it"]},{"Key":"restructure it","Fragments":["so","so"]},{"Key":"the details","Fragments":["were"]},{"Key":"details were","Fragments":["pushed"]},{"Key":"were pushed","Fragments":["down"]},{"Key":"pushed down","Fragments":["to"]},{"Key":" We're","Fragments":["passing"]},{"Key":"We're passing","Fragments":["strings"]},{"Key":"to our","Fragments":["various","helper"]},{"Key":"our various","Fragments":["functions,"]},{"Key":"various functions,","Fragments":["which"]},{"Key":"some copying","Fragments":["of"]},{"Key":"their contents","Fragments":["on"]},{"Key":"contents on","Fragments":["the"]},{"Key":"the free","Fragments":["store","function"]},{"Key":"free store","Fragments":["when"]},{"Key":"store when","Fragments":["we"]},{"Key":"need distinct","Fragments":["copies."]},{"Key":"distinct copies.","Fragments":["Can"]},{"Key":"copies. Can","Fragments":["you"]},{"Key":"course, a","Fragments":["word"]},{"Key":"same, minus","Fragments":["case"]},{"Key":"minus case","Fragments":["insensitivity."]},{"Key":" Cought","Fragments":["this"]},{"Key":"Cought this","Fragments":["by"]},{"Key":"by looking","Fragments":["at","at","at"]},{"Key":"at someone","Fragments":["else's"]},{"Key":"you extracted","Fragments":["intention"]},{"Key":"extracted intention","Fragments":["revealing"]},{"Key":"revealing functions","Fragments":["for"]},{"Key":"for `is_quiet`","Fragments":["and"]},{"Key":"`is_quiet` and","Fragments":["`is_question`."]},{"Key":"and `is_question`.","Fragments":["It"]},{"Key":"`is_question`. It","Fragments":["seems"]},{"Key":"odd that","Fragments":["the"]},{"Key":"remaining case,","Fragments":["shouting,"]},{"Key":"case, shouting,","Fragments":["doesn't"]},{"Key":"shouting, doesn't","Fragments":["have"]},{"Key":"an intention-revealing","Fragments":["function"]},{"Key":"intention-revealing function","Fragments":["extracted"]},{"Key":"function extracted","Fragments":["for"]},{"Key":"extracted for","Fragments":["it."]},{"Key":"it. Similarly,","Fragments":["there"]},{"Key":"Similarly, there","Fragments":["are"]},{"Key":"low-level details","Fragments":["leaking","and"]},{"Key":"details leaking","Fragments":["out"]},{"Key":"leaking out","Fragments":["of"]},{"Key":"of `is_quiet`.","Fragments":["From"]},{"Key":"`is_quiet`. From","Fragments":["the"]},{"Key":"the name,","Fragments":["I"]},{"Key":"name, I","Fragments":["was"]},{"Key":"was expecting","Fragments":["`is_quiet`","to"]},{"Key":"expecting `is_quiet`","Fragments":["to"]},{"Key":"`is_quiet` to","Fragments":["return"]},{"Key":"bool. Can","Fragments":["you"]},{"Key":"to restructure","Fragments":["it","this"]},{"Key":"that everything","Fragments":["in"]},{"Key":"in `hey`","Fragments":["is","instead"]},{"Key":"is operating","Fragments":["at"]},{"Key":"operating at","Fragments":["the"]},{"Key":"same semantic","Fragments":["level?","level."]},{"Key":"is header-only,","Fragments":["what"]},{"Key":"header-only, what","Fragments":["happens"]},{"Key":"if multiple","Fragments":["translation"]},{"Key":"multiple translation","Fragments":["units"]},{"Key":"units in","Fragments":["the"]},{"Key":"executable include","Fragments":["this"]},{"Key":"my translation","Fragments":["unit,","unit."]},{"Key":"unit, it","Fragments":["has"]},{"Key":"the side-effect","Fragments":["of","of"]},{"Key":"side-effect of","Fragments":["bringing","the","properly"]},{"Key":"of bringing","Fragments":["the"]},{"Key":"the `std`","Fragments":["namespace"]},{"Key":"`std` namespace","Fragments":["into"]},{"Key":"namespace into","Fragments":["my"]},{"Key":"into my","Fragments":["translation","coding"]},{"Key":"unit. Can","Fragments":["you"]},{"Key":"restructure this","Fragments":["so"]},{"Key":"this so","Fragments":["that"]},{"Key":"is side-effect","Fragments":["free"]},{"Key":"side-effect free","Fragments":["with"]},{"Key":"free with","Fragments":["respect"]},{"Key":"the search","Fragments":["order"]},{"Key":"search order","Fragments":["of"]},{"Key":" Great!","Fragments":["Now"]},{"Key":"Great! Now","Fragments":["we're"]},{"Key":"we're passing","Fragments":["strings"]},{"Key":"by pointer","Fragments":["so"]},{"Key":"pointer so","Fragments":["we're"]},{"Key":"so we're","Fragments":["not"]},{"Key":"strings. However,","Fragments":["we"]},{"Key":"However, we","Fragments":["aren't","lost"]},{"Key":"we aren't","Fragments":["modifying","modifying","modifying,"]},{"Key":"aren't modifying","Fragments":["those","the"]},{"Key":"modifying those","Fragments":["strings"]},{"Key":"isn't obvious","Fragments":["from"]},{"Key":"obvious from","Fragments":["looking","[the"]},{"Key":"the signatures","Fragments":["of","on"]},{"Key":"signatures of","Fragments":["our"]},{"Key":"our functions.","Fragments":["We"]},{"Key":"functions. We","Fragments":["can"]},{"Key":"We can","Fragments":["make","reveal","do","stop"]},{"Key":"this clear","Fragments":["by"]},{"Key":"clear by","Fragments":["passing"]},{"Key":"in `const","Fragments":["string","string"]},{"Key":"string *msg`.","Fragments":["We"]},{"Key":"*msg`. We","Fragments":["could"]},{"Key":"We could","Fragments":["also"]},{"Key":"string \u0026msg`","Fragments":["and"]},{"Key":"\u0026msg` and","Fragments":["then"]},{"Key":"we wouldn't","Fragments":["need"]},{"Key":"use pointer","Fragments":["dereferencing"]},{"Key":"pointer dereferencing","Fragments":["syntax."]},{"Key":" Similarly,","Fragments":["we","for"]},{"Key":"Similarly, we","Fragments":["aren't"]},{"Key":"loop, so","Fragments":["we"]},{"Key":"write `for","Fragments":["(char"]},{"Key":": *msg)`.","Fragments":["The"]},{"Key":"*msg)`. The","Fragments":["main"]},{"Key":"main point","Fragments":["of"]},{"Key":"using by-reference","Fragments":["types"]},{"Key":"by-reference types","Fragments":["in"]},{"Key":"elements with","Fragments":["a"]},{"Key":"non-const reference,","Fragments":["or"]},{"Key":"or when","Fragments":["copying"]},{"Key":"when copying","Fragments":["the"]},{"Key":"elements is","Fragments":["expensive"]},{"Key":"expensive with","Fragments":["a"]},{"Key":"reference. For","Fragments":["simple"]},{"Key":"For simple","Fragments":["types"]},{"Key":"simple types","Fragments":["like"]},{"Key":"types like","Fragments":["`char`,"]},{"Key":"like `char`,","Fragments":["and"]},{"Key":"`char`, and","Fragments":["`int`"]},{"Key":"and `int`","Fragments":["that"]},{"Key":"`int` that","Fragments":["we"]},{"Key":"aren't modifying,","Fragments":["using"]},{"Key":"modifying, using","Fragments":["a"]},{"Key":"reference just","Fragments":["complicates"]},{"Key":"just complicates","Fragments":["things"]},{"Key":"involves a","Fragments":["small"]},{"Key":"small performance","Fragments":["penalty"]},{"Key":"penalty that","Fragments":["we"]},{"Key":"need. So","Fragments":["we"]},{"Key":"use `char`","Fragments":["for"]},{"Key":"`char` for","Fragments":["the"]},{"Key":"the iterating","Fragments":["type.","over"]},{"Key":"functions here","Fragments":["don't"]},{"Key":"here don't","Fragments":["need"]},{"Key":"`bob`, since","Fragments":["`bob`"]},{"Key":"since `bob`","Fragments":["serves"]},{"Key":"`bob` serves","Fragments":["as"]},{"Key":"serves as","Fragments":["nothing"]},{"Key":"as nothing","Fragments":["more"]},{"Key":"named scope","Fragments":["for"]},{"Key":"scope for","Fragments":["the"]},{"Key":"function `hey`.","Fragments":["They"]},{"Key":"`hey`. They","Fragments":["could"]},{"Key":"They could","Fragments":["be"]},{"Key":"simply free","Fragments":["functions"]},{"Key":"the `cpp`.","Fragments":["This"]},{"Key":"`cpp`. This","Fragments":["would"]},{"Key":"would prevent","Fragments":["any"]},{"Key":"prevent any","Fragments":["clients"]},{"Key":"any clients","Fragments":["of"]},{"Key":"of `bob.h`","Fragments":["from"]},{"Key":"`bob.h` from","Fragments":["having"]},{"Key":"from having","Fragments":["to","to"]},{"Key":"to recompile","Fragments":["when"]},{"Key":"recompile when","Fragments":["we"]},{"Key":"we change","Fragments":["their"]},{"Key":"change their","Fragments":["signatures."]},{"Key":"suggestions for","Fragments":["making","making","you."]},{"Key":"code nicer.","Fragments":["But"]},{"Key":"nicer. But","Fragments":["what"]},{"Key":"purpose for","Fragments":["having"]},{"Key":"for having","Fragments":["an","done","a","a"]},{"Key":"anonymous namespace?","Fragments":["this"]},{"Key":"namespace? this","Fragments":["is"]},{"Key":"time i've","Fragments":["really"]},{"Key":"i've really","Fragments":["ever"]},{"Key":"really ever","Fragments":["heard"]},{"Key":"ever heard","Fragments":["of"]},{"Key":"like template","Fragments":["algorithms."]},{"Key":"template algorithms.","Fragments":["I"]},{"Key":"algorithms. I","Fragments":["sort","was"]},{"Key":"I sort","Fragments":["of","it"]},{"Key":"of had","Fragments":["a"]},{"Key":"feeling there","Fragments":["should"]},{"Key":"a for_each-alike","Fragments":["that"]},{"Key":"for_each-alike that","Fragments":["takes"]},{"Key":"takes two","Fragments":["ranges"]},{"Key":"two ranges","Fragments":["and"]},{"Key":"ranges and","Fragments":["a"]},{"Key":" boost/range/algorithm_ext/for_each.hpp","Fragments":["has","has"]},{"Key":"boost/range/algorithm_ext/for_each.hpp has","Fragments":["it,","an"]},{"Key":"has it,","Fragments":["found"]},{"Key":"it, found","Fragments":["after"]},{"Key":"found after","Fragments":["a"]},{"Key":"course, this","Fragments":["could"]},{"Key":"written with","Fragments":["a"]},{"Key":"a for-loop,","Fragments":["incrementing"]},{"Key":" both","Fragments":["iterators"]},{"Key":"both iterators","Fragments":["at"]},{"Key":"iterators at","Fragments":["once."]},{"Key":"once. However,","Fragments":["I"]},{"Key":"algorithm +","Fragments":["lambda"]},{"Key":"+ lambda","Fragments":["approach"]},{"Key":" quite","Fragments":["a","exactly"]},{"Key":" binary","Fragments":["function"]},{"Key":"binary function","Fragments":["over"]},{"Key":"function over","Fragments":["the"]},{"Key":"elements of","Fragments":["two"]},{"Key":" boost/tokenizer.hpp","Fragments":["makes"]},{"Key":"boost/tokenizer.hpp makes","Fragments":["this"]},{"Key":"lot less","Fragments":["verbose"]},{"Key":"less verbose","Fragments":["to","by"]},{"Key":"verbose to","Fragments":["solve."]},{"Key":"the spec","Fragments":["does"]},{"Key":"spec does","Fragments":["not"]},{"Key":"not present","Fragments":["any"]},{"Key":"present any","Fragments":["case"]},{"Key":"original word","Fragments":["would","and","```m_anagram```","and"]},{"Key":"word would","Fragments":["be"]},{"Key":" converting","Fragments":["the"]},{"Key":"converting the","Fragments":["word","ASCII","words"]},{"Key":"predicate function","Fragments":["inside"]},{"Key":" seemed","Fragments":["like"]},{"Key":"rather elegant","Fragments":["solution"]},{"Key":"elegant solution","Fragments":["to"]},{"Key":"However, there","Fragments":["is","are"]},{"Key":"the obvious","Fragments":["problem","way"]},{"Key":"obvious problem","Fragments":["that"]},{"Key":"the candidates","Fragments":["container,"]},{"Key":" removing","Fragments":["from"]},{"Key":"removing from","Fragments":["it"]},{"Key":"if necessary.","Fragments":["This","Finally,"]},{"Key":"necessary. This","Fragments":["can","is"]},{"Key":"expensive if","Fragments":["the"]},{"Key":"expect an","Fragments":["exercise"]},{"Key":"in cut","Fragments":["\u0026"]},{"Key":"cut \u0026","Fragments":["paste..."]},{"Key":" Funny,","Fragments":["I","I"]},{"Key":"Funny, I","Fragments":["just","did"]},{"Key":"just re-stumbled","Fragments":["across"]},{"Key":"re-stumbled across","Fragments":["boost::tokenizer"]},{"Key":"across boost::tokenizer","Fragments":["a"]},{"Key":"boost::tokenizer a","Fragments":["few"]},{"Key":"few weeks","Fragments":["ago,"]},{"Key":"weeks ago,","Fragments":["and"]},{"Key":"ago, and","Fragments":["was"]},{"Key":"was sort","Fragments":["of","of"]},{"Key":"of wondering","Fragments":["if"]},{"Key":" occurs","Fragments":["so"]},{"Key":"occurs so","Fragments":["often"]},{"Key":"so often","Fragments":["to"]},{"Key":"often to","Fragments":["explain"]},{"Key":"explain its","Fragments":["existance"]},{"Key":"its existance","Fragments":["in"]},{"Key":"existance in","Fragments":["Boost."]},{"Key":"exercise just","Fragments":["showed"]},{"Key":"just showed","Fragments":["to"]},{"Key":"showed to","Fragments":["me"]},{"Key":"that yes,","Fragments":["it"]},{"Key":"indeed rather","Fragments":["useful!"]},{"Key":"guess sort","Fragments":["and"]},{"Key":"compare would","Fragments":["be"]},{"Key":"However, is_permutation","Fragments":["seems"]},{"Key":"is_permutation seems","Fragments":["like"]},{"Key":"perfect fit","Fragments":["for","for"]},{"Key":"fit for","Fragments":["the","this"]},{"Key":"When we","Fragments":["have","do","do"]},{"Key":"have helper","Fragments":["functions"]},{"Key":"functions (or","Fragments":["classes)","use"]},{"Key":"(or classes)","Fragments":["in"]},{"Key":"classes) in","Fragments":["a"]},{"Key":"unit that","Fragments":["we"]},{"Key":"to expose","Fragments":["outside"]},{"Key":"expose outside","Fragments":["that"]},{"Key":"unit, we","Fragments":["need"]},{"Key":"them \"internal","Fragments":["linkage\"."]},{"Key":"\"internal linkage\".","Fragments":["That"]},{"Key":"linkage\". That","Fragments":["is,"]},{"Key":"is, we","Fragments":["want"]},{"Key":"those definitions","Fragments":["to"]},{"Key":"available inside","Fragments":["the"]},{"Key":"unit, but","Fragments":["we"]},{"Key":"but we","Fragments":["don't"]},{"Key":"want anyone","Fragments":["outside"]},{"Key":"anyone outside","Fragments":["the"]},{"Key":"unit to","Fragments":["be"]},{"Key":"to why","Fragments":["an","you"]},{"Key":"why an","Fragments":["anonymous"]},{"Key":"considered better,","Fragments":["see"]},{"Key":"better, see","Fragments":["this"]},{"Key":"see this","Fragments":["[stack"]},{"Key":"this [stack","Fragments":["overflow"]},{"Key":"[stack overflow","Fragments":["thread](http://stackoverflow.com/questions/4977252/why-unnamed-namespace-is-a-superior-alternative-to-static)."]},{"Key":"overflow thread](http://stackoverflow.com/questions/4977252/why-unnamed-namespace-is-a-superior-alternative-to-static).","Fragments":["Basically"]},{"Key":"thread](http://stackoverflow.com/questions/4977252/why-unnamed-namespace-is-a-superior-alternative-to-static). Basically","Fragments":["in"]},{"Key":"Basically in","Fragments":["C++11"]},{"Key":"C++11 and","Fragments":["beyond,","more"]},{"Key":"and beyond,","Fragments":["namespaces"]},{"Key":"beyond, namespaces","Fragments":["are"]},{"Key":"preferred mechanism","Fragments":["for"]},{"Key":"for controlling","Fragments":["visibility."]},{"Key":" An","Fragments":["_anonymous_","issue"]},{"Key":"An _anonymous_","Fragments":["namespace"]},{"Key":"_anonymous_ namespace","Fragments":["is"]},{"Key":"the enclosed","Fragments":["definitions"]},{"Key":"enclosed definitions","Fragments":["are"]},{"Key":"visible inside","Fragments":["the"]},{"Key":"unit containing","Fragments":["the"]},{"Key":"feeling boost","Fragments":["must"]},{"Key":"boost must","Fragments":["have"]},{"Key":"had something","Fragments":["to"]},{"Key":"a commented-out","Fragments":["copy"]},{"Key":"commented-out copy","Fragments":["of"]},{"Key":"using `trim_copy`","Fragments":["from"]},{"Key":"`trim_copy` from","Fragments":["Boost."]},{"Key":" `split_words`","Fragments":["is"]},{"Key":"`split_words` is","Fragments":["a"]},{"Key":"little simpler","Fragments":["now"]},{"Key":"simpler now","Fragments":["with"]},{"Key":"now with","Fragments":["`boost::tokenizer`.","100%"]},{"Key":"for strip_punctuation","Fragments":["as"]},{"Key":"strip_punctuation as","Fragments":["boost::tokenizer\u003c\u003e"]},{"Key":"as boost::tokenizer\u003c\u003e","Fragments":["already"]},{"Key":"boost::tokenizer\u003c\u003e already","Fragments":["takes"]},{"Key":"takes care","Fragments":["of"]},{"Key":"use to_lower_copy","Fragments":["inside"]},{"Key":"to_lower_copy inside","Fragments":["of"]},{"Key":"count index","Fragments":["operator,"]},{"Key":"index operator,","Fragments":["you"]},{"Key":" with","Fragments":["all","`isalpha`"]},{"Key":"the boilerplate","Fragments":["and"]},{"Key":"boilerplate and","Fragments":["just"]},{"Key":"calling boost::tokenizer\u003c\u003e","Fragments":["directly."]},{"Key":"(auto \u0026\u0026word:","Fragments":["tokenizer\u003c\u003e(text))"]},{"Key":"\u0026\u0026word: tokenizer\u003c\u003e(text))","Fragments":["count[to_lower_copy(word)]"]},{"Key":"tokenizer\u003c\u003e(text)) count[to_lower_copy(word)]","Fragments":["+="]},{"Key":"count[to_lower_copy(word)] +=","Fragments":["1;"]},{"Key":"considered std::is_permutation?","Fragments":["With"]},{"Key":"std::is_permutation? With","Fragments":["a"]},{"Key":"custom comparison","Fragments":["function"]},{"Key":"comparison function","Fragments":["that"]},{"Key":"that ignores","Fragments":["case,"]},{"Key":"ignores case,","Fragments":["you"]},{"Key":"effect as","Fragments":["sorting,"]},{"Key":"without requiring","Fragments":["additional"]},{"Key":"requiring additional","Fragments":["storage."]},{"Key":"documentation for","Fragments":["`tokenizer`"]},{"Key":"for `tokenizer`","Fragments":["to"]},{"Key":"`tokenizer` to","Fragments":["be"]},{"Key":"very formal","Fragments":["and"]},{"Key":"formal and","Fragments":["difficult"]},{"Key":"what exactly","Fragments":["it"]},{"Key":"means in","Fragments":["practice."]},{"Key":"the `strip_punctuation`","Fragments":["and"]},{"Key":"`strip_punctuation` and","Fragments":["the"]},{"Key":"tests pass,","Fragments":["but"]},{"Key":"pass, but","Fragments":["I","you","it's"]},{"Key":"things became","Fragments":["\"clearer\""]},{"Key":"became \"clearer\"","Fragments":["for"]},{"Key":"\"clearer\" for","Fragments":["having"]},{"Key":"done that.","Fragments":["It"]},{"Key":"some detailed","Fragments":["knowledge"]},{"Key":"detailed knowledge","Fragments":["of"]},{"Key":"me why","Fragments":["`word`","I"]},{"Key":"why `word`","Fragments":["should"]},{"Key":"an rvalue","Fragments":["reference."]},{"Key":"rvalue reference.","Fragments":["I","I"]},{"Key":"all tests","Fragments":["without","here,","without"]},{"Key":"tests without","Fragments":["the","trimming","doing","it."]},{"Key":"the rvalue","Fragments":["reference."]},{"Key":"pass with","Fragments":["`auto"]},{"Key":"with `auto","Fragments":["word`"]},{"Key":"`auto word`","Fragments":["and"]},{"Key":"word` and","Fragments":["`auto"]},{"Key":"and `auto","Fragments":["const"]},{"Key":"`auto const","Fragments":["\u0026word`;"]},{"Key":"const \u0026word`;","Fragments":["I"]},{"Key":"\u0026word`; I","Fragments":["think"]},{"Key":"latter because","Fragments":["it"]},{"Key":"clear I'm","Fragments":["not"]},{"Key":"Anyway, so","Fragments":["back"]},{"Key":"so back","Fragments":["to"]},{"Key":"to `tokenizer`.","Fragments":["It"]},{"Key":"`tokenizer`. It","Fragments":["does"]},{"Key":"does make","Fragments":["for"]},{"Key":"make for","Fragments":["smaller","yourself."]},{"Key":"for smaller","Fragments":["code,"]},{"Key":"smaller code,","Fragments":["but"]},{"Key":"to comprehend","Fragments":["the"]},{"Key":"comprehend the","Fragments":["`tokenizer`"]},{"Key":"the `tokenizer`","Fragments":["class"]},{"Key":"`tokenizer` class","Fragments":["and"]},{"Key":"documentation is","Fragments":["not"]},{"Key":"so great.","Fragments":["I"]},{"Key":"really dig","Fragments":["deep","into"]},{"Key":"dig deep","Fragments":["to"]},{"Key":"deep to","Fragments":["find"]},{"Key":"that punctuation","Fragments":["would"]},{"Key":"punctuation would","Fragments":["be"]},{"Key":"a delimiter","Fragments":["by"]},{"Key":"delimiter by","Fragments":["default"]},{"Key":"default and","Fragments":["that","a","copy"]},{"Key":"empty tokens","Fragments":["would","by"]},{"Key":"tokens would","Fragments":["be"]},{"Key":"be discarded","Fragments":["by"]},{"Key":"discarded by","Fragments":["default."]},{"Key":"by default.","Fragments":["So"]},{"Key":"default. So","Fragments":["I'm"]},{"Key":"So I'm","Fragments":["conflicted","actually"]},{"Key":"I'm conflicted","Fragments":["as","as","on"]},{"Key":"conflicted as","Fragments":["to","to"]},{"Key":"to whether","Fragments":["or","or"]},{"Key":"whether or","Fragments":["not","not","not","not"]},{"Key":"not it","Fragments":["makes"]},{"Key":"code clearer.","Fragments":["If"]},{"Key":"clearer. If","Fragments":["you're"]},{"Key":"you're familiar","Fragments":["with"]},{"Key":"with boost.tokenizer,","Fragments":["then"]},{"Key":"boost.tokenizer, then","Fragments":["yes,"]},{"Key":"then yes,","Fragments":["but"]},{"Key":"yes, but","Fragments":["otherwise,"]},{"Key":"otherwise, I","Fragments":["think"]},{"Key":" `boost::tokenizer\u003c\u003e`","Fragments":["splits"]},{"Key":"`boost::tokenizer\u003c\u003e` splits","Fragments":["on"]},{"Key":"splits on","Fragments":["whitespace"]},{"Key":"on whitespace","Fragments":["_and_"]},{"Key":"whitespace _and_","Fragments":["punctuation,"]},{"Key":"_and_ punctuation,","Fragments":["dropping"]},{"Key":"punctuation, dropping","Fragments":["empty"]},{"Key":"dropping empty","Fragments":["tokens"]},{"Key":"tokens by","Fragments":["default,"]},{"Key":"default, but","Fragments":["I","if"]},{"Key":"this obvious","Fragments":["from"]},{"Key":"from [the","Fragments":["documentation](http://www.boost.org/doc/libs/1_55_0/libs/tokenizer/)"]},{"Key":"[the documentation](http://www.boost.org/doc/libs/1_55_0/libs/tokenizer/)","Fragments":["on"]},{"Key":"documentation](http://www.boost.org/doc/libs/1_55_0/libs/tokenizer/) on","Fragments":["a"]},{"Key":"first reading.","Fragments":["I"]},{"Key":"reading. I","Fragments":["had"]},{"Key":"dig into","Fragments":["the"]},{"Key":"documentation to","Fragments":["find","confirm"]},{"Key":"this out.","Fragments":["Therefore,","Look","This"]},{"Key":"out. Therefore,","Fragments":["I'm"]},{"Key":"Therefore, I'm","Fragments":["conflicted"]},{"Key":"not this","Fragments":["version","one."]},{"Key":"than my","Fragments":["earlier","solutions","method"]},{"Key":"earlier versions.","Fragments":["It"]},{"Key":"versions. It","Fragments":["is"]},{"Key":" cool,","Fragments":["thank"]},{"Key":"cool, thank","Fragments":["you."]},{"Key":"library function","Fragments":["to"]},{"Key":"problem you'd","Fragments":["have"]},{"Key":"solve on","Fragments":["your"]},{"Key":"own otherwise,","Fragments":["you"]},{"Key":"otherwise, you","Fragments":["will"]},{"Key":"will always,","Fragments":["or"]},{"Key":"always, or","Fragments":["most"]},{"Key":"or most","Fragments":["of"]},{"Key":"time, need","Fragments":["to"]},{"Key":"quite exactly","Fragments":["how"]},{"Key":"that library","Fragments":["function.","in"]},{"Key":"library function.","Fragments":["To"]},{"Key":"function. To","Fragments":["reuse"]},{"Key":"To reuse","Fragments":["someone"]},{"Key":"reuse someone","Fragments":["elses"]},{"Key":"someone elses","Fragments":["code"]},{"Key":"elses code","Fragments":["does"]},{"Key":"not free","Fragments":["you"]},{"Key":"free you","Fragments":["from"]},{"Key":" understanding","Fragments":["the"]},{"Key":"understanding the","Fragments":["problem"]},{"Key":"problem domain","Fragments":["and","very","better"]},{"Key":"and knowing","Fragments":["how"]},{"Key":"knowing how","Fragments":["to"]},{"Key":"actual API","Fragments":["that"]},{"Key":"was given","Fragments":["to"]},{"Key":"given to","Fragments":["you.","the"]},{"Key":"agree, the","Fragments":["boost::tokenizer\u003c\u003e"]},{"Key":"the boost::tokenizer\u003c\u003e","Fragments":["documentation"]},{"Key":"boost::tokenizer\u003c\u003e documentation","Fragments":["isn't"]},{"Key":"documentation isn't","Fragments":["particularily"]},{"Key":"isn't particularily","Fragments":["user"]},{"Key":"particularily user","Fragments":["friendly."]},{"Key":"Another possibility","Fragments":["for","would"]},{"Key":"possibility for","Fragments":["the"]},{"Key":"interface would","Fragments":["be"]},{"Key":"a sign","Fragments":["function","that"]},{"Key":"sign function","Fragments":["with"]},{"Key":"default end","Fragments":["argument"]},{"Key":"end argument","Fragments":["of"]},{"Key":"string sing(unsigned","Fragments":["begin,"]},{"Key":"sing(unsigned begin,","Fragments":["unsigned"]},{"Key":"begin, unsigned","Fragments":["end"]},{"Key":"unsigned end","Fragments":["="]},{"Key":"which avoids","Fragments":["having"]},{"Key":"avoids having","Fragments":["to"]},{"Key":"the one-parameter","Fragments":["version"]},{"Key":"one-parameter version","Fragments":["explicitly."]},{"Key":"likely my","Fragments":["final","final"]},{"Key":"my final","Fragments":["version.","version."]},{"Key":"The predicate","Fragments":["to"]},{"Key":"to copy_if","Fragments":["could"]},{"Key":"copy_if could","Fragments":["easily"]},{"Key":"be extracted","Fragments":["to"]},{"Key":"extracted to","Fragments":["a"]},{"Key":"a unary","Fragments":["(member)"]},{"Key":"unary (member)","Fragments":["function,"]},{"Key":"or into","Fragments":["the"]},{"Key":"call operator,","Fragments":["making"]},{"Key":"operator, making","Fragments":["the"]},{"Key":"anagram into","Fragments":["a"]},{"Key":"However, the","Fragments":["nested"]},{"Key":"nested lambda","Fragments":["is"]},{"Key":"nice in","Fragments":["itself,"]},{"Key":"in itself,","Fragments":["so","it"]},{"Key":"itself, so","Fragments":["as"]},{"Key":"as said,","Fragments":["I"]},{"Key":"likely keep","Fragments":["it"]},{"Key":" Better!","Fragments":["Now"]},{"Key":"Better! Now","Fragments":["`hey`"]},{"Key":"Now `hey`","Fragments":["has"]},{"Key":"`hey` has","Fragments":["code"]},{"Key":"has code","Fragments":["that"]},{"Key":"all operates","Fragments":["at"]},{"Key":"operates at","Fragments":["the"]},{"Key":"we test","Fragments":["for","for"]},{"Key":"silence before","Fragments":["we"]},{"Key":"before we","Fragments":["test","find"]},{"Key":"for shouting?","Fragments":["Do"]},{"Key":"shouting? Do","Fragments":["we"]},{"Key":"Do we","Fragments":["need"]},{"Key":"intermediate variable","Fragments":["`testStatement`"]},{"Key":"variable `testStatement`","Fragments":["anymore?"]},{"Key":"`testStatement` anymore?","Fragments":["Trimming"]},{"Key":"anymore? Trimming","Fragments":["feels"]},{"Key":"Trimming feels","Fragments":["like"]},{"Key":"like something","Fragments":["we"]},{"Key":"lines 13-20","Fragments":["has"]},{"Key":"13-20 has","Fragments":["pretty"]},{"Key":"has pretty","Fragments":["low","nice"]},{"Key":"pretty low","Fragments":["[cohesion](http://en.wikipedia.org/wiki/Cohesion_(computer_science))."]},{"Key":"low [cohesion](http://en.wikipedia.org/wiki/Cohesion_(computer_science)).","Fragments":["It's"]},{"Key":"[cohesion](http://en.wikipedia.org/wiki/Cohesion_(computer_science)). It's","Fragments":["doing"]},{"Key":"It's doing","Fragments":["two"]},{"Key":"doing two","Fragments":["tests","jobs:"]},{"Key":"two tests","Fragments":["one","are","I","if"]},{"Key":"tests one","Fragments":["one"]},{"Key":"one one","Fragments":["of"]},{"Key":"them causes","Fragments":["an"]},{"Key":"causes an","Fragments":["early"]},{"Key":"early return.","Fragments":["Have"]},{"Key":"return. Have","Fragments":["you"]},{"Key":"library algorithms","Fragments":["or"]},{"Key":"algorithms or","Fragments":["methods"]},{"Key":"or methods","Fragments":["on"]},{"Key":"on `std::string`","Fragments":["to"]},{"Key":"`std::string` to","Fragments":["make"]},{"Key":"clearer and","Fragments":["more","has","has"]},{"Key":"more cohesive?","Fragments":["Sometimes"]},{"Key":"cohesive? Sometimes","Fragments":["two"]},{"Key":"Sometimes two","Fragments":["loops"]},{"Key":"two loops","Fragments":["that"]},{"Key":"thing each","Fragments":["leads"]},{"Key":"each leads","Fragments":["to"]},{"Key":"more expressive","Fragments":["code","to","to","of","that","(it"]},{"Key":"expressive code","Fragments":["than"]},{"Key":"does two","Fragments":["things"]},{"Key":"a love/hate","Fragments":["relationship"]},{"Key":"love/hate relationship","Fragments":["with"]},{"Key":"relationship with","Fragments":["default"]},{"Key":"arguments. Over","Fragments":["time"]},{"Key":"Over time","Fragments":["I've"]},{"Key":"time I've","Fragments":["come"]},{"Key":"to lean","Fragments":["on"]},{"Key":"lean on","Fragments":["explicit"]},{"Key":"on explicit","Fragments":["overloads"]},{"Key":"explicit overloads","Fragments":["instead"]},{"Key":"overloads instead","Fragments":["of"]},{"Key":"of default","Fragments":["arguments,"]},{"Key":"default arguments,","Fragments":["but"]},{"Key":"arguments, but","Fragments":["in"]},{"Key":"know, but","Fragments":["it"]},{"Key":"I copy","Fragments":["to","it"]},{"Key":"to mutch","Fragments":["the"]},{"Key":"mutch the","Fragments":["string"]},{"Key":"string told","Fragments":["to"]},{"Key":"Bob -","Fragments":["at","now"]},{"Key":"- at","Fragments":["least","least"]},{"Key":"least to","Fragments":["three"]},{"Key":"to three","Fragments":["different"]},{"Key":"three different","Fragments":["locations.","solutions:","places"]},{"Key":"different locations.","Fragments":["But"]},{"Key":"locations. But","Fragments":["I"]},{"Key":"way what","Fragments":["I'm"]},{"Key":"doing gets","Fragments":["pretty"]},{"Key":"gets pretty","Fragments":["readable"]},{"Key":"pretty readable","Fragments":["and"]},{"Key":"Also, as","Fragments":["there"]},{"Key":"as there","Fragments":["is","are"]},{"Key":"already a","Fragments":["dependency"]},{"Key":"a dependency","Fragments":["on"]},{"Key":"on boost,","Fragments":["I've"]},{"Key":"boost, I've","Fragments":["used"]},{"Key":"used its","Fragments":["string"]},{"Key":"algorithms (which","Fragments":["are"]},{"Key":" Removing","Fragments":["the"]},{"Key":"the spaces","Fragments":["in","after"]},{"Key":"spaces in","Fragments":["the"]},{"Key":"initial string","Fragments":["has"]},{"Key":"two advantages.","Fragments":["First,"]},{"Key":"advantages. First,","Fragments":["it"]},{"Key":"First, it","Fragments":["simplifies"]},{"Key":"it simplifies","Fragments":["testing","the"]},{"Key":"simplifies testing","Fragments":["whether"]},{"Key":"testing whether","Fragments":["the"]},{"Key":"empty or","Fragments":["full","consists","an"]},{"Key":"or full","Fragments":["of"]},{"Key":"full of","Fragments":["spaces."]},{"Key":"of spaces.","Fragments":["Second,"]},{"Key":"spaces. Second,","Fragments":["it"]},{"Key":"Second, it","Fragments":["allows"]},{"Key":"allows to","Fragments":["have"]},{"Key":"question with","Fragments":["spaces"]},{"Key":"spaces after","Fragments":["the","the","the"]},{"Key":"considered someone","Fragments":["is"]},{"Key":"someone is","Fragments":["shouting","shouting.","shouting","yelling"]},{"Key":"is shouting","Fragments":["when","and","at"]},{"Key":"shouting when","Fragments":["there","I"]},{"Key":"more upper","Fragments":["cases"]},{"Key":"upper cases","Fragments":["characters","characters.","characters."]},{"Key":"cases characters","Fragments":["than"]},{"Key":"characters than","Fragments":["lower"]},{"Key":"than lower","Fragments":["cases,"]},{"Key":"lower cases,","Fragments":["to"]},{"Key":" Indeed","Fragments":["removing"]},{"Key":"Indeed removing","Fragments":["spaces"]},{"Key":"removing spaces","Fragments":["from"]},{"Key":"spaces from","Fragments":["the"]},{"Key":"very start","Fragments":["seems"]},{"Key":"start seems","Fragments":["to"]},{"Key":"(and not","Fragments":["only"]},{"Key":"only when","Fragments":["considering"]},{"Key":"when considering","Fragments":["asking"]},{"Key":"considering asking","Fragments":["nothing)."]},{"Key":"Also you've","Fragments":["found"]},{"Key":"you've found","Fragments":["a"]},{"Key":"good way","Fragments":["to","to","to"]},{"Key":"shouting and","Fragments":["not","shouting","if"]},{"Key":"only saying","Fragments":["punctuations"]},{"Key":"saying punctuations","Fragments":["marks"]},{"Key":"punctuations marks","Fragments":["(I"]},{"Key":"marks (I","Fragments":["mean"]},{"Key":"(I mean","Fragments":["nb_upper"]},{"Key":"mean nb_upper","Fragments":["\u003e"]},{"Key":"nb_upper \u003e","Fragments":["nb_lower)."]},{"Key":"had much","Fragments":["fun"]},{"Key":"much fun","Fragments":["learning"]},{"Key":"fun learning","Fragments":["how"]},{"Key":"learning how","Fragments":["to"]},{"Key":"use split","Fragments":["and"]},{"Key":"split and","Fragments":["accumulate."]},{"Key":"things come","Fragments":["to","to"]},{"Key":"mind when","Fragments":["looking","I"]},{"Key":"when looking","Fragments":["at","at"]},{"Key":"* While","Fragments":["it"]},{"Key":"While it","Fragments":["doesn't","is"]},{"Key":"really matter","Fragments":["how"]},{"Key":"namespace, a","Fragments":["single"]},{"Key":"any value","Fragments":["is"]},{"Key":"off in","Fragments":["a"]},{"Key":"namespace, instead","Fragments":["of"]},{"Key":"* For","Fragments":["good"]},{"Key":"For good","Fragments":["style,"]},{"Key":"good style,","Fragments":["try"]},{"Key":"style, try","Fragments":["to"]},{"Key":"avoid \"using","Fragments":["namespace"]},{"Key":"namespace ...\"","Fragments":["in"]},{"Key":"...\" in","Fragments":["header"]},{"Key":"files. Only","Fragments":["implementations"]},{"Key":"Only implementations","Fragments":["should"]},{"Key":"used namespace","Fragments":["doesn't"]},{"Key":"namespace doesn't","Fragments":["propagate","need"]},{"Key":"doesn't propagate","Fragments":["to"]},{"Key":"propagate to","Fragments":["users"]},{"Key":"header. In","Fragments":["the"]},{"Key":"the exercism.io","Fragments":["exercises,"]},{"Key":"exercism.io exercises,","Fragments":["we"]},{"Key":"exercises, we","Fragments":["always"]},{"Key":"we always","Fragments":["submit"]},{"Key":"always submit","Fragments":["one"]},{"Key":"submit one","Fragments":["file.","which"]},{"Key":"one file.","Fragments":["So"]},{"Key":"file. So","Fragments":["strictly"]},{"Key":"So strictly","Fragments":["speaking,"]},{"Key":"strictly speaking,","Fragments":["this"]},{"Key":"speaking, this","Fragments":["doesn't"]},{"Key":"doesn't matter.","Fragments":["However,"]},{"Key":"matter. However,","Fragments":["try"]},{"Key":"However, try","Fragments":["to"]},{"Key":"this issue","Fragments":["in","with",":","and"]},{"Key":"in mind,","Fragments":["it"]},{"Key":"mind, it","Fragments":["will"]},{"Key":"will bite","Fragments":["you"]},{"Key":"bite you","Fragments":["if"]},{"Key":"define several","Fragments":["headers"]},{"Key":"several headers","Fragments":["and"]},{"Key":"and cpp","Fragments":["files"]},{"Key":"bigger project.","Fragments":["In"]},{"Key":"project. In","Fragments":["case"]},{"Key":"of exercism,","Fragments":["you"]},{"Key":"exercism, you","Fragments":["can"]},{"Key":"can *pretend*","Fragments":["to"]},{"Key":"*pretend* to","Fragments":["have"]},{"Key":"file by","Fragments":["writing"]},{"Key":"by writing","Fragments":["the","my"]},{"Key":".h part","Fragments":["first,"]},{"Key":"part first,","Fragments":["followed"]},{"Key":"first, followed","Fragments":["by"]},{"Key":"by everything","Fragments":["that"]},{"Key":"that you'd","Fragments":["put"]},{"Key":"you'd put","Fragments":["in"]},{"Key":" Agreed!","Fragments":["Just"]},{"Key":"Agreed! Just","Fragments":["submitted"]},{"Key":"Just submitted","Fragments":["again"]},{"Key":"submitted again","Fragments":["fixing"]},{"Key":"again fixing","Fragments":["these"]},{"Key":"fixing these","Fragments":["problems."]},{"Key":"is \"HE","Fragments":["IS"]},{"Key":"\"HE IS","Fragments":["wet\"."]},{"Key":"IS wet\".","Fragments":["That's"]},{"Key":"wet\". That's","Fragments":["not"]},{"Key":"not shouting,","Fragments":["but"]},{"Key":"shouting, but","Fragments":["the"]},{"Key":"of uppers","Fragments":["is"]},{"Key":"uppers is","Fragments":["larger"]},{"Key":"like `hey`","Fragments":["is"]},{"Key":"is filled","Fragments":["with"]},{"Key":"filled with","Fragments":["low-level"]},{"Key":"with low-level","Fragments":["details"]},{"Key":"details and","Fragments":["doesn't","I"]},{"Key":"doesn't reveal","Fragments":["the"]},{"Key":"reveal the","Fragments":["problem","higher"]},{"Key":"domain very","Fragments":["well."]},{"Key":"well. What","Fragments":["if"]},{"Key":"we did","Fragments":["[Compose"]},{"Key":"did [Compose","Fragments":["Method](http://www.industriallogic.com/xp/refactoring/composeMethod.html)"]},{"Key":"[Compose Method](http://www.industriallogic.com/xp/refactoring/composeMethod.html)","Fragments":["on"]},{"Key":"Method](http://www.industriallogic.com/xp/refactoring/composeMethod.html) on","Fragments":["`hey`"]},{"Key":"on `hey`","Fragments":["to"]},{"Key":"`hey` to","Fragments":["reveal"]},{"Key":"to reveal","Fragments":["the"]},{"Key":"the higher","Fragments":["level"]},{"Key":"higher level","Fragments":["structure"]},{"Key":"level structure","Fragments":["more"]},{"Key":"structure more","Fragments":["readably"]},{"Key":"more readably","Fragments":["and"]},{"Key":"readably and","Fragments":["delegated"]},{"Key":"and delegated","Fragments":["details"]},{"Key":"delegated details","Fragments":["to"]},{"Key":"details to","Fragments":["helper"]},{"Key":"to helper","Fragments":["functions?","functions,","functions,"]},{"Key":"function `hey`","Fragments":["in"]},{"Key":"`hey` in","Fragments":["namespace"]},{"Key":"namespace `bob`","Fragments":["instead"]},{"Key":"`bob` instead","Fragments":["of"]},{"Key":"forcing it","Fragments":["to"]},{"Key":"class. Namespaces","Fragments":["are"]},{"Key":"Namespaces are","Fragments":["better"]},{"Key":"for scoping","Fragments":["visibility"]},{"Key":"scoping visibility","Fragments":["of"]},{"Key":"of functions;","Fragments":["they"]},{"Key":"functions; they","Fragments":["make"]},{"Key":"explicit what","Fragments":["you"]},{"Key":"do --","Fragments":["narrow"]},{"Key":"-- narrow","Fragments":["the"]},{"Key":"of visibility.","Fragments":["Declaring"]},{"Key":"visibility. Declaring","Fragments":["a"]},{"Key":"class also","Fragments":["narrows"]},{"Key":"also narrows","Fragments":["the"]},{"Key":"narrows the","Fragments":["scope"]},{"Key":"of visibility","Fragments":["of"]},{"Key":"the method,","Fragments":["but"]},{"Key":"indirect way","Fragments":["of"]},{"Key":"of achieving","Fragments":["this"]},{"Key":"achieving this","Fragments":["and"]},{"Key":"that, what","Fragments":["about"]},{"Key":"what about","Fragments":["your","other"]},{"Key":"private members?","Fragments":["They"]},{"Key":"members? They","Fragments":["can"]},{"Key":"They can","Fragments":["be"]},{"Key":"be contained","Fragments":["in"]},{"Key":"contained in","Fragments":["an","the"]},{"Key":"file, making","Fragments":["them"]},{"Key":"making them","Fragments":["available","```const"]},{"Key":"not visible","Fragments":["outside"]},{"Key":"source file.","Fragments":["Using"]},{"Key":"file. Using","Fragments":["namespaces"]},{"Key":"Using namespaces","Fragments":["is"]},{"Key":"namespaces is","Fragments":["the"]},{"Key":"preferred way","Fragments":["to"]},{"Key":"to control","Fragments":["visibility"]},{"Key":"control visibility","Fragments":["in"]},{"Key":"visibility in","Fragments":["C++11."]},{"Key":"But let's","Fragments":["look"]},{"Key":"let's look","Fragments":["at"]},{"Key":"those private","Fragments":["members","functions"]},{"Key":"more closely.","Fragments":["There"]},{"Key":"closely. There","Fragments":["is"]},{"Key":"enum that","Fragments":["is","chooses"]},{"Key":"is 1-to-1","Fragments":["with"]},{"Key":"1-to-1 with","Fragments":["the"]},{"Key":"map that","Fragments":["holds"]},{"Key":"holds the","Fragments":["strings"]},{"Key":"strings associated","Fragments":["with"]},{"Key":"associated with","Fragments":["each"]},{"Key":"with each","Fragments":["enum.","alphanumeric","call","other."]},{"Key":"each enum.","Fragments":["The"]},{"Key":"enum. The","Fragments":["only"]},{"Key":"place we","Fragments":["use"]},{"Key":"result string.","Fragments":["It"]},{"Key":"would read","Fragments":["more","better"]},{"Key":"read more","Fragments":["clearly"]},{"Key":"clearly if","Fragments":["we"]},{"Key":"just eliminated","Fragments":["the"]},{"Key":"enum and","Fragments":["the","a","return","a"]},{"Key":"string algorithms.","Fragments":["I"]},{"Key":"exercises as","Fragments":["you"]},{"Key":"do here","Fragments":["until"]},{"Key":"here until","Fragments":["someone"]},{"Key":"until someone","Fragments":["pointed"]},{"Key":"the `_copy`","Fragments":["variants,"]},{"Key":"`_copy` variants,","Fragments":["for"]},{"Key":"variants, for","Fragments":["instance:"]},{"Key":"string upper","Fragments":["="]},{"Key":"upper =","Fragments":["boost::to_upper_copy(sth);","\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";","non_whitespace_chars"]},{"Key":"this whole","Fragments":["exercise"]},{"Key":"whole exercise","Fragments":["easier"]},{"Key":"exercise easier","Fragments":["is"]},{"Key":"easier is","Fragments":["if"]},{"Key":"you test","Fragments":["for","```"]},{"Key":"emptyness first","Fragments":[":)."]},{"Key":"first :).","Fragments":["I"]},{"Key":":). I","Fragments":["found"]},{"Key":"this out","Fragments":["the","now,"]},{"Key":"way myself","Fragments":["once"]},{"Key":"myself once","Fragments":["I"]},{"Key":"started reviewing","Fragments":["solutions"]},{"Key":"reviewing solutions","Fragments":["in"]},{"Key":"to narrow","Fragments":["the"]},{"Key":"variable declarations","Fragments":["to","inside","and"]},{"Key":"first place","Fragments":["where"]},{"Key":"are used.","Fragments":["If"]},{"Key":"used. If","Fragments":["we","this"]},{"Key":"If we","Fragments":["localize","take","do","could"]},{"Key":"we localize","Fragments":["variables"]},{"Key":"localize variables","Fragments":["to"]},{"Key":"are used,","Fragments":["then"]},{"Key":"used, then","Fragments":["`spaceless`"]},{"Key":"then `spaceless`","Fragments":["moves"]},{"Key":"`spaceless` moves","Fragments":["all"]},{"Key":"moves all","Fragments":["the"]},{"Key":"way down","Fragments":["to"]},{"Key":"to line","Fragments":["45:"]},{"Key":"string spaceless","Fragments":["="]},{"Key":"spaceless =","Fragments":["boost::erase_all(sth,"]},{"Key":"= boost::erase_all(sth,","Fragments":["\""]},{"Key":"boost::erase_all(sth, \"","Fragments":["\");","\").empty();"]},{"Key":"if (spaceless","Fragments":["=="]},{"Key":"(spaceless ==","Fragments":["\"\")"]},{"Key":"that, we","Fragments":["see"]},{"Key":"we see","Fragments":["that"]},{"Key":"that `spaceless`","Fragments":["is"]},{"Key":"`spaceless` is","Fragments":["only"]},{"Key":"as easily","Fragments":["write:"]},{"Key":"if (boost::erase_all(sth,","Fragments":["\""]},{"Key":"(boost::erase_all(sth, \"","Fragments":["\").empty())"]},{"Key":"we lost","Fragments":["the"]},{"Key":"lost the","Fragments":["intention-revealing"]},{"Key":"the intention-revealing","Fragments":["name"]},{"Key":"intention-revealing name","Fragments":["`spaceless`"]},{"Key":"name `spaceless`","Fragments":["by"]},{"Key":"`spaceless` by","Fragments":["doing"]},{"Key":"doing this.","Fragments":["We"]},{"Key":"this. We","Fragments":["can"]},{"Key":"can reveal","Fragments":["that"]},{"Key":"reveal that","Fragments":["intention"]},{"Key":"that intention","Fragments":["again"]},{"Key":"intention again","Fragments":["by"]},{"Key":"again by","Fragments":["extracting"]},{"Key":"by extracting","Fragments":["this"]},{"Key":"extracting this","Fragments":["into"]},{"Key":"bool is_silent(const","Fragments":["char*"]},{"Key":"is_silent(const char*","Fragments":["sth)"]},{"Key":"return boost::erase_all(sth,","Fragments":["\""]},{"Key":"same for","Fragments":["the","loop."]},{"Key":"two checks:","Fragments":["localize"]},{"Key":"checks: localize","Fragments":["the"]},{"Key":"localize the","Fragments":["variables"]},{"Key":"and extract","Fragments":["helper"]},{"Key":"extract helper","Fragments":["predicates."]},{"Key":"helper predicates.","Fragments":["When"]},{"Key":"predicates. When","Fragments":["we"]},{"Key":"do this,","Fragments":["we'll","but","and","and"]},{"Key":"this, we'll","Fragments":["get"]},{"Key":"we'll get","Fragments":["a"]},{"Key":"a `hey`","Fragments":["function"]},{"Key":"is talking","Fragments":["more"]},{"Key":"talking more","Fragments":["in","in"]},{"Key":"domain of","Fragments":["the","the","the","discovering"]},{"Key":"less in","Fragments":["low-level"]},{"Key":"in low-level","Fragments":["implementation"]},{"Key":"low-level implementation","Fragments":["details"]},{"Key":"details making","Fragments":["the"]},{"Key":"understand at","Fragments":["a"]},{"Key":"Doh! While","Fragments":["I"]},{"Key":"was initially","Fragments":["quite"]},{"Key":"initially quite","Fragments":["pleased"]},{"Key":"quite pleased","Fragments":["with"]},{"Key":"this implementation,","Fragments":["it"]},{"Key":"implementation, it","Fragments":["has","takes"]},{"Key":"a glaring","Fragments":["performance"]},{"Key":"glaring performance","Fragments":["bug:"]},{"Key":"The algorithm","Fragments":["should","```boost::all()```"]},{"Key":"algorithm should","Fragments":["terminate"]},{"Key":"should terminate","Fragments":["if"]},{"Key":"terminate if","Fragments":["the"]},{"Key":"current prime","Fragments":["squared"]},{"Key":"prime squared","Fragments":["is"]},{"Key":"squared is","Fragments":["greater"]},{"Key":"greater then","Fragments":["the"]},{"Key":"number in","Fragments":["the"]},{"Key":"So, one","Fragments":["more"]},{"Key":"final version.","Fragments":["It"]},{"Key":"version. It","Fragments":["exploits"]},{"Key":"It exploits","Fragments":["the"]},{"Key":"exploits the","Fragments":["fact"]},{"Key":"are immediately","Fragments":["going"]},{"Key":"immediately going","Fragments":["to"]},{"Key":"we might","Fragments":["as"]},{"Key":"well not","Fragments":["generate"]},{"Key":"not generate","Fragments":["them,"]},{"Key":"generate them,","Fragments":["and"]},{"Key":"them, and","Fragments":["save","since"]},{"Key":"save 1/2","Fragments":["of"]},{"Key":"1/2 of","Fragments":["our"]},{"Key":"removes elements","Fragments":["from"]},{"Key":"vector after","Fragments":["the"]},{"Key":"is done,","Fragments":["which"]},{"Key":"done, which","Fragments":["should","could"]},{"Key":"which should","Fragments":["be","be"]},{"Key":"However, it","Fragments":["still","would","seems"]},{"Key":"still has","Fragments":["the"]},{"Key":"problem of","Fragments":["not","looking"]},{"Key":"not terminating","Fragments":["early"]},{"Key":"terminating early","Fragments":["enough."]},{"Key":"one conditional","Fragments":["missing."]},{"Key":"suggestion of","Fragments":["LegalizeAdulthood"]},{"Key":"of LegalizeAdulthood","Fragments":["and"]},{"Key":"LegalizeAdulthood and","Fragments":["used"]},{"Key":"used functions","Fragments":["to"]},{"Key":"code cleaner.","Fragments":["The"]},{"Key":"cleaner. The","Fragments":["first"]},{"Key":"first time,","Fragments":["I"]},{"Key":"I aimed","Fragments":["for"]},{"Key":"aimed for","Fragments":["shorter"]},{"Key":"for shorter","Fragments":["code,","sentence."]},{"Key":"shorter code,","Fragments":["which"]},{"Key":"which proved","Fragments":["not"]},{"Key":"proved not","Fragments":["to"]},{"Key":"only change","Fragments":["in"]},{"Key":"change in","Fragments":["the","the","the","the"]},{"Key":"we detect","Fragments":["someone"]},{"Key":"detect someone","Fragments":["is"]},{"Key":"is shouting.","Fragments":["I"]},{"Key":"shouting. I","Fragments":["assume"]},{"Key":"a sentence","Fragments":["is"]},{"Key":"sentence is","Fragments":["a"]},{"Key":"a shout","Fragments":["when","happens","by","before","instead","first","or","or","(i.e."]},{"Key":"shout when","Fragments":["there"]},{"Key":"a majority","Fragments":["of"]},{"Key":"cases characters.","Fragments":["This","The"]},{"Key":"characters. This","Fragments":["time,"]},{"Key":"This time,","Fragments":["the"]},{"Key":"time, the","Fragments":["constraint"]},{"Key":"the constraint","Fragments":["is"]},{"Key":"is stronger:","Fragments":["a"]},{"Key":"stronger: a","Fragments":["shout"]},{"Key":"shout happens","Fragments":["when"]},{"Key":"happens when","Fragments":["there","I"]},{"Key":"least 80%","Fragments":["of"]},{"Key":"80% of","Fragments":["upper"]},{"Key":"characters. The","Fragments":["drawback"]},{"Key":"The drawback","Fragments":["is"]},{"Key":"drawback is","Fragments":["that"]},{"Key":"shorter sentence.","Fragments":["For"]},{"Key":"sentence. For","Fragments":["example,"]},{"Key":"example, \"aAA\"","Fragments":["will"]},{"Key":"\"aAA\" will","Fragments":["not"]},{"Key":"be categorized","Fragments":["as","as"]},{"Key":"categorized as","Fragments":["shouting,","shouting"]},{"Key":"as shouting,","Fragments":["even"]},{"Key":"shouting, even","Fragments":["though"]},{"Key":"first 'a'","Fragments":["could"]},{"Key":"'a' could","Fragments":["be"]},{"Key":"of getLowerCase","Fragments":["is"]},{"Key":"getLowerCase is","Fragments":["essentially"]},{"Key":"is essentially","Fragments":["a"]},{"Key":"essentially a","Fragments":["duplicate"]},{"Key":"duplicate of","Fragments":["boost::to_lower_copy."]},{"Key":"A switch","Fragments":["that","would"]},{"Key":"that throws","Fragments":["by"]},{"Key":"throws by","Fragments":["default"]},{"Key":"single call","Fragments":["to","to"]},{"Key":"a (range)","Fragments":["algorithm."]},{"Key":"(range) algorithm.","Fragments":["I"]},{"Key":"algorithm. I","Fragments":["think"]},{"Key":"as concise","Fragments":["as","and"]},{"Key":"concise as","Fragments":["I"]},{"Key":"One question","Fragments":["is"]},{"Key":"is unanswered","Fragments":["though:"]},{"Key":"unanswered though:","Fragments":["Why"]},{"Key":"though: Why","Fragments":["exactly"]},{"Key":"Why exactly","Fragments":["is"]},{"Key":"exactly is","Fragments":["it,"]},{"Key":"is it,","Fragments":["that"]},{"Key":"it, that","Fragments":["the"]},{"Key":"the address-of","Fragments":["operator"]},{"Key":"address-of operator","Fragments":["in"]},{"Key":"the static_cast","Fragments":["argument","template"]},{"Key":"static_cast argument","Fragments":["is"]},{"Key":" I.e.,","Fragments":["(to_rna)"]},{"Key":"I.e., (to_rna)","Fragments":["and"]},{"Key":"(to_rna) and","Fragments":["(\u0026to_rna)"]},{"Key":"and (\u0026to_rna)","Fragments":["work"]},{"Key":"(\u0026to_rna) work","Fragments":["the"]},{"Key":"same, while","Fragments":["the"]},{"Key":"static_cast template","Fragments":["argument"]},{"Key":"template argument","Fragments":["clearly"]},{"Key":"argument clearly","Fragments":["indicates"]},{"Key":"clearly indicates","Fragments":["a","the"]},{"Key":"indicates a","Fragments":["pointer."]},{"Key":"guess referencing","Fragments":["a"]},{"Key":"referencing a","Fragments":["function"]},{"Key":"function always","Fragments":["implicitly"]},{"Key":"always implicitly","Fragments":["returns"]},{"Key":"implicitly returns","Fragments":["a"]},{"Key":"a pointer,","Fragments":["but"]},{"Key":"pointer, but","Fragments":["it"]},{"Key":"bit unexpected","Fragments":["behaviour."]},{"Key":"unexpected behaviour.","Fragments":["Would"]},{"Key":"behaviour. Would","Fragments":["like"]},{"Key":"Would like","Fragments":["to","to"]},{"Key":"know more","Fragments":["abou"]},{"Key":"more abou","Fragments":["it."]},{"Key":"just noticed","Fragments":["a","that"]},{"Key":"noticed a","Fragments":["mistake"]},{"Key":"mistake in","Fragments":["the"]},{"Key":" Dialog(const","Fragments":["std::string"]},{"Key":"Dialog(const std::string","Fragments":["\u0026phrase)"]},{"Key":" Dialog(std::string","Fragments":["phrase){"]},{"Key":"that now","Fragments":["when"]},{"Key":"now when","Fragments":["I"]},{"Key":"read `hey`","Fragments":["I"]},{"Key":"`hey` I","Fragments":["see"]},{"Key":"a straightforward","Fragments":["algorithm","exercise."]},{"Key":"straightforward algorithm","Fragments":["expressed"]},{"Key":"algorithm expressed","Fragments":["in"]},{"Key":"expressed in","Fragments":["terms"]},{"Key":"problem. Do","Fragments":["you"]},{"Key":"think `d.isEmpty()`","Fragments":["would"]},{"Key":"`d.isEmpty()` would","Fragments":["communicate"]},{"Key":"would communicate","Fragments":["the"]},{"Key":"communicate the","Fragments":["problem"]},{"Key":"domain better","Fragments":["if"]},{"Key":"it read","Fragments":["`d.isSilent()`?"]},{"Key":"read `d.isSilent()`?","Fragments":["Being"]},{"Key":"`d.isSilent()`? Being","Fragments":["empty"]},{"Key":"Being empty","Fragments":["feels"]},{"Key":"empty feels","Fragments":["like"]},{"Key":"an expression","Fragments":["of","of"]},{"Key":"expression of","Fragments":["the","the","the","the"]},{"Key":"and being","Fragments":["silent"]},{"Key":"being silent","Fragments":["feels"]},{"Key":"silent feels","Fragments":["more"]},{"Key":"feels more","Fragments":["like","straightforward"]},{"Key":"it weird","Fragments":["to"]},{"Key":"weird to","Fragments":["read"]},{"Key":"read private","Fragments":["members"]},{"Key":"thing when","Fragments":["I'm"]},{"Key":"reading a","Fragments":["class"]},{"Key":"class declaration.","Fragments":["To"]},{"Key":"declaration. To","Fragments":["me,"]},{"Key":"me, private","Fragments":["members"]},{"Key":"are hidden","Fragments":["implementation"]},{"Key":"hidden implementation","Fragments":["details"]},{"Key":"should first","Fragments":["be"]},{"Key":"first be","Fragments":["reading"]},{"Key":"be reading","Fragments":["the"]},{"Key":"class, then","Fragments":["protected"]},{"Key":"then protected","Fragments":["members,"]},{"Key":"protected members,","Fragments":["then"]},{"Key":"members, then","Fragments":["private"]},{"Key":"then private","Fragments":["members."]},{"Key":"private members.","Fragments":["I"]},{"Key":"members. I","Fragments":["wrote"]},{"Key":"wrote up","Fragments":["a"]},{"Key":"a refactoring","Fragments":["on"]},{"Key":"refactoring on","Fragments":["this"]},{"Key":"called [Sort","Fragments":["Members"]},{"Key":"[Sort Members","Fragments":["by"]},{"Key":"Members by","Fragments":["Visibility](http://legalizeadulthood.wordpress.com/2013/08/01/refactoring-sort-members-by-visibility/)."]},{"Key":"your class","Fragments":["in","is"]},{"Key":"more detail.","Fragments":["The"]},{"Key":"detail. The","Fragments":["work"]},{"Key":"The work","Fragments":["done"]},{"Key":"constructor appears","Fragments":["only"]},{"Key":"appears only","Fragments":["needed"]},{"Key":"the `isEmpty`","Fragments":["test."]},{"Key":"`isEmpty` test.","Fragments":["The"]},{"Key":"don't appear","Fragments":["to"]},{"Key":"be white","Fragments":["space"]},{"Key":"space sensitive.","Fragments":["Does"]},{"Key":"sensitive. Does","Fragments":["this"]},{"Key":"at all?","Fragments":["Could"]},{"Key":"all? Could","Fragments":["it"]},{"Key":"Could it","Fragments":["simply"]},{"Key":"be three","Fragments":["free"]},{"Key":"three free","Fragments":["functions"]},{"Key":"functions `bool","Fragments":["isEmpty(std::string"]},{"Key":"`bool isEmpty(std::string","Fragments":["const"]},{"Key":"isEmpty(std::string const","Fragments":["\u0026text)`,"]},{"Key":"const \u0026text)`,","Fragments":["`bool"]},{"Key":"\u0026text)`, `bool","Fragments":["isShouting(std::string"]},{"Key":"`bool isShouting(std::string","Fragments":["const"]},{"Key":"isShouting(std::string const","Fragments":["\u0026text)`"]},{"Key":"const \u0026text)`","Fragments":["and"]},{"Key":"\u0026text)` and","Fragments":["`bool"]},{"Key":"and `bool","Fragments":["isAsking(std::string"]},{"Key":"`bool isAsking(std::string","Fragments":["const"]},{"Key":"isAsking(std::string const","Fragments":["\u0026text)`?"]},{"Key":"couple people","Fragments":["have"]},{"Key":"have broadened","Fragments":["the"]},{"Key":"broadened the","Fragments":["idea"]},{"Key":"of shouting","Fragments":["to","\"1,"]},{"Key":"shouting to","Fragments":["be"]},{"Key":"condition where","Fragments":["some"]},{"Key":"where some","Fragments":["majority"]},{"Key":"some majority","Fragments":["fraction"]},{"Key":"majority fraction","Fragments":["of"]},{"Key":"fraction of","Fragments":["the"]},{"Key":"characters were","Fragments":["upper","found,","capitalized"]},{"Key":"were upper","Fragments":["case,"]},{"Key":"that idea.","Fragments":["For"]},{"Key":"idea. For","Fragments":["instance,"]},{"Key":"instance, acronyms","Fragments":["are"]},{"Key":"acronyms are","Fragments":["often"]},{"Key":"often capitalized","Fragments":["and"]},{"Key":"capitalized and","Fragments":["then"]},{"Key":"then simple","Fragments":["statements"]},{"Key":"simple statements","Fragments":["about"]},{"Key":"statements about","Fragments":["acronyms"]},{"Key":"about acronyms","Fragments":["could"]},{"Key":"acronyms could","Fragments":["be"]},{"Key":"as shouting","Fragments":["when"]},{"Key":"intent of","Fragments":["the"]},{"Key":"problem. However,","Fragments":["without","after"]},{"Key":"However, without","Fragments":["clarifying"]},{"Key":"without clarifying","Fragments":["information"]},{"Key":"clarifying information","Fragments":["in"]},{"Key":"problem statement,","Fragments":["you"]},{"Key":"statement, you","Fragments":["could"]},{"Key":"case either","Fragments":["way,"]},{"Key":"way, so","Fragments":["I"]},{"Key":"it's wrong,","Fragments":["just"]},{"Key":"different interpretation","Fragments":["of"]},{"Key":"a RegEx","Fragments":["would"]},{"Key":"RegEx would","Fragments":["be"]},{"Key":"good fit","Fragments":["to","when"]},{"Key":"fit to","Fragments":["discern"]},{"Key":"to discern","Fragments":["the"]},{"Key":"discern the","Fragments":["various"]},{"Key":"the various","Fragments":["cases.","responses,"]},{"Key":"various cases.","Fragments":["However,"]},{"Key":"cases. However,","Fragments":["I'm"]},{"Key":"getting boost::regex","Fragments":["to"]},{"Key":"boost::regex to","Fragments":["work"]},{"Key":"work properly.","Fragments":["My"]},{"Key":"properly. My","Fragments":["first"]},{"Key":"first regex","Fragments":["([\\s]),"]},{"Key":"regex ([\\s]),","Fragments":["with"]},{"Key":"([\\s]), with","Fragments":["\\"]},{"Key":"with \\","Fragments":["for"]},{"Key":"\\ for","Fragments":["escapes"]},{"Key":"for escapes","Fragments":["in"]},{"Key":"escapes in","Fragments":["C++,"]},{"Key":"C++, is","Fragments":["intended"]},{"Key":"to match","Fragments":["any","the","it.","strings","the"]},{"Key":"match any","Fragments":["amount"]},{"Key":"any amount","Fragments":["of"]},{"Key":"of whitespace,","Fragments":["however","then"]},{"Key":"whitespace, however","Fragments":["it"]},{"Key":"Running this","Fragments":["code"]},{"Key":"Coliru, I","Fragments":["don't"]},{"Key":"to load","Fragments":["properly"]},{"Key":"load properly","Fragments":["at"]},{"Key":"properly at","Fragments":["all."]},{"Key":"Any pointers","Fragments":["welcome!"]},{"Key":"After viewing","Fragments":["some"]},{"Key":"viewing some","Fragments":["other"]},{"Key":"submissions, I","Fragments":["decided","think"]},{"Key":"move testing","Fragments":["the"]},{"Key":"into functions","Fragments":["to","but","(or"]},{"Key":"things easier","Fragments":["to"]},{"Key":"using \"\\\\\\\\s+\"","Fragments":["for"]},{"Key":"\"\\\\\\\\s+\" for","Fragments":["one"]},{"Key":"more spaces","Fragments":["or"]},{"Key":"spaces or","Fragments":["\"\\\\\\\\s*\""]},{"Key":"or \"\\\\\\\\s*\"","Fragments":["for"]},{"Key":"\"\\\\\\\\s*\" for","Fragments":["zero"]},{"Key":"zero or","Fragments":["more"]},{"Key":"this matches","Fragments":["what"]},{"Key":"matches what","Fragments":["is"]},{"Key":"is expected","Fragments":["by"]},{"Key":"expected by","Fragments":["the"]},{"Key":"look in","Fragments":["bob_test.cpp"]},{"Key":"in bob_test.cpp","Fragments":["you"]},{"Key":"bob_test.cpp you","Fragments":["will"]},{"Key":"with bob::hey(\"Tom-ay-to,","Fragments":["tom-aaaah-to.\")"]},{"Key":"Looks almost","Fragments":["good."]},{"Key":"almost good.","Fragments":["The"]},{"Key":"good. The","Fragments":["only"]},{"Key":"only last","Fragments":["problem"]},{"Key":"last problem","Fragments":["is"]},{"Key":"that `is_upper`","Fragments":["can"]},{"Key":"`is_upper` can","Fragments":["be","be"]},{"Key":"be confused","Fragments":["with"]},{"Key":"confused with","Fragments":["`isupper`","`isupper`"]},{"Key":"with `isupper`","Fragments":["in","in"]},{"Key":"`isupper` in","Fragments":["`cctype`","`cctype`"]},{"Key":"The `isUpperCasePresent`","Fragments":["function"]},{"Key":"`isUpperCasePresent` function","Fragments":["can"]},{"Key":"way as","Fragments":["`isLowerCasePresent`.","you"]},{"Key":"as `isLowerCasePresent`.","Fragments":["That's"]},{"Key":"`isLowerCasePresent`. That's","Fragments":["probably"]},{"Key":"probably the","Fragments":["last","fastest"]},{"Key":"that rather","Fragments":["than"]},{"Key":"than splitting","Fragments":["the"]},{"Key":"the vector,","Fragments":["I"]},{"Key":"could directly","Fragments":["iterate","implement"]},{"Key":"directly iterate","Fragments":["over"]},{"Key":"the splitting","Fragments":["regex."]},{"Key":"tests, this","Fragments":["version"]},{"Key":"version should","Fragments":["support"]},{"Key":"should support","Fragments":["string"]},{"Key":"support string","Fragments":["as"]},{"Key":"as u16string","Fragments":["and"]},{"Key":"u16string and","Fragments":["u32string."]},{"Key":"Thanks! Good","Fragments":["point."]},{"Key":" Mostly","Fragments":["agreed."]},{"Key":"Mostly agreed.","Fragments":["But"]},{"Key":"agreed. But","Fragments":["don't"]},{"Key":"But don't","Fragments":["you"]},{"Key":"feel uneasy","Fragments":["hard-coding"]},{"Key":"uneasy hard-coding","Fragments":["strings"]},{"Key":"hard-coding strings","Fragments":["as"]},{"Key":"return values?","Fragments":["But"]},{"Key":"values? But","Fragments":["OK,"]},{"Key":"OK, that's","Fragments":["not"]},{"Key":"not such","Fragments":["a"]},{"Key":"deal since","Fragments":["by"]},{"Key":"since by","Fragments":["adding"]},{"Key":"a enum","Fragments":["and"]},{"Key":"map I","Fragments":["just"]},{"Key":"just hard-coded","Fragments":["it"]},{"Key":"hard-coded it","Fragments":["in"]},{"Key":"really would","Fragments":["like"]},{"Key":"use `boost::erase_all(sth,","Fragments":["\""]},{"Key":"`boost::erase_all(sth, \"","Fragments":["\").empty()`"]},{"Key":"\" \").empty()`","Fragments":["but"]},{"Key":"\").empty()` but","Fragments":["`erase_all`"]},{"Key":"but `erase_all`","Fragments":["modify"]},{"Key":"`erase_all` modify","Fragments":["its"]},{"Key":"modify its","Fragments":["argument","argument;","inputs."]},{"Key":"place and","Fragments":["return"]},{"Key":"return `void`","Fragments":["=("]},{"Key":"most interesting","Fragments":["your"]},{"Key":"interesting your","Fragments":["concerns"]},{"Key":"your concerns","Fragments":["about"]},{"Key":"concerns about","Fragments":["talking"]},{"Key":"about talking","Fragments":["more"]},{"Key":"problem, delegating","Fragments":["low-levelness"]},{"Key":"delegating low-levelness","Fragments":["to"]},{"Key":"low-levelness to","Fragments":["helpers."]},{"Key":"to helpers.","Fragments":["That's"]},{"Key":"helpers. That's","Fragments":["a"]},{"Key":"few things","Fragments":["come","to"]},{"Key":"C++, a","Fragments":["class"]},{"Key":"is per","Fragments":["default","default"]},{"Key":"per default","Fragments":["private,","public."]},{"Key":"default private,","Fragments":["and"]},{"Key":"private, and","Fragments":["a"]},{"Key":"public. So","Fragments":["your"]},{"Key":"your `private:`","Fragments":["is"]},{"Key":"`private:` is","Fragments":["redundant."]},{"Key":"* Do","Fragments":["you"]},{"Key":"* Range-based","Fragments":["for-loops"]},{"Key":"Range-based for-loops","Fragments":["are"]},{"Key":"for-loops are","Fragments":["a"]},{"Key":"a blessing","Fragments":["in"]},{"Key":"blessing in","Fragments":["C++11,"]},{"Key":"C++11, use","Fragments":["them"]},{"Key":"avoid excessive","Fragments":["typing."]},{"Key":"* Oh,","Fragments":["and"]},{"Key":"Oh, and","Fragments":["have","by","you"]},{"Key":"I replace","Fragments":["the"]},{"Key":"a plain","Fragments":["old"]},{"Key":"old array","Fragments":["of"]},{"Key":"of pairs,","Fragments":["the"]},{"Key":"pairs, the","Fragments":["executable"]},{"Key":"the executable","Fragments":["shrinks"]},{"Key":"executable shrinks","Fragments":["quite"]},{"Key":"shrinks quite","Fragments":["some"]},{"Key":"some in","Fragments":["size."]},{"Key":"in broken","Fragments":["code"]},{"Key":"broken code","Fragments":["if"]},{"Key":"if anyone","Fragments":["ever","told"]},{"Key":"anyone ever","Fragments":["changes"]},{"Key":"ever changes","Fragments":["the"]},{"Key":"the table","Fragments":["and"]},{"Key":"table and","Fragments":["forgets"]},{"Key":"and forgets","Fragments":["to"]},{"Key":"forgets to","Fragments":["keep","cover"]},{"Key":"the sorting","Fragments":["order.","up"]},{"Key":"a compile-time","Fragments":["sorted"]},{"Key":"compile-time sorted","Fragments":["map"]},{"Key":"sorted map","Fragments":["for"]},{"Key":"C++, which","Fragments":["is"]},{"Key":"is apparently","Fragments":["what"]},{"Key":"apparently what","Fragments":["I'd"]},{"Key":"I'd actually","Fragments":["like"]},{"Key":"actually like","Fragments":["to"]},{"Key":" Slightly","Fragments":["wordier"]},{"Key":"Slightly wordier","Fragments":["than"]},{"Key":"wordier than","Fragments":["my"]},{"Key":"my solutions","Fragments":["in","for"]},{"Key":"to factor","Fragments":["out","each"]},{"Key":"factor out","Fragments":["the"]},{"Key":"the duplication","Fragments":["into","was"]},{"Key":"duplication into","Fragments":["some"]},{"Key":"some functional","Fragments":["style"]},{"Key":"functional style","Fragments":["\"any?\""]},{"Key":"style \"any?\"","Fragments":["or"]},{"Key":"\"any?\" or","Fragments":["\"every?\""]},{"Key":"or \"every?\"","Fragments":["functions,"]},{"Key":"\"every?\" functions,","Fragments":["but"]},{"Key":"way away","Fragments":["from"]},{"Key":"away from","Fragments":["understanding","the","other","the"]},{"Key":"from understanding","Fragments":["how"]},{"Key":"understanding how","Fragments":["to"]},{"Key":"Also, absolutely","Fragments":["NO"]},{"Key":"absolutely NO","Fragments":["idea"]},{"Key":"NO idea","Fragments":["what"]},{"Key":"what good","Fragments":["C++"]},{"Key":"good C++","Fragments":["style"]},{"Key":"C++ style","Fragments":["is...","cast.","to"]},{"Key":"forgotten a","Fragments":["good"]},{"Key":"good bit","Fragments":["of"]},{"Key":"C++ i","Fragments":["used"]},{"Key":"i used","Fragments":["to"]},{"Key":"know so","Fragments":["getting"]},{"Key":"so getting","Fragments":["this"]},{"Key":"getting this","Fragments":["working"]},{"Key":"working took","Fragments":["a"]},{"Key":"enjoyed it","Fragments":["and"]},{"Key":"no comments.","Fragments":["Second"]},{"Key":"comments. Second","Fragments":["Iteration"]},{"Key":"Second Iteration","Fragments":["will"]},{"Key":"Iteration will","Fragments":["have"]},{"Key":"if (s_trimmed.substr","Fragments":["(s_trimmed.size()-1,1)"]},{"Key":"(s_trimmed.substr (s_trimmed.size()-1,1)","Fragments":["=="]},{"Key":"(s_trimmed.size()-1,1) ==","Fragments":["\"?\")"]},{"Key":"if (s.back()","Fragments":["=="]},{"Key":"(s.back() ==","Fragments":["\"?\")"]},{"Key":"* `bob::hey()`","Fragments":["avoids"]},{"Key":"`bob::hey()` avoids","Fragments":["multiple"]},{"Key":"avoids multiple","Fragments":["iterations"]},{"Key":"multiple iterations","Fragments":["over"]},{"Key":"* Bob's","Fragments":["replies"]},{"Key":"Bob's replies","Fragments":["are"]},{"Key":"replies are","Fragments":["accessible"]},{"Key":"accessible as","Fragments":["constants"]},{"Key":"it easy","Fragments":["to","to","to"]},{"Key":"test Bob's","Fragments":["response"]},{"Key":"Bob's response","Fragments":["(e.g.","from"]},{"Key":"response (e.g.","Fragments":["`if"]},{"Key":"(e.g. `if","Fragments":["(bob::hey(msg)"]},{"Key":"`if (bob::hey(msg)","Fragments":["=="]},{"Key":"(bob::hey(msg) ==","Fragments":["bob::REPLY_EMPTY)"]},{"Key":"== bob::REPLY_EMPTY)","Fragments":["{"]},{"Key":"bob::REPLY_EMPTY) {","Fragments":["}`)."]},{"Key":"{ }`).","Fragments":["If"]},{"Key":"}`). If","Fragments":["Bob"]},{"Key":"If Bob","Fragments":["changes"]},{"Key":"Bob changes","Fragments":["his"]},{"Key":"changes his","Fragments":["reply"]},{"Key":"his reply","Fragments":["string,"]},{"Key":"reply string,","Fragments":["the"]},{"Key":"string, the","Fragments":["code"]},{"Key":"uses these","Fragments":["constants"]},{"Key":"these constants","Fragments":["will","spill"]},{"Key":"constants will","Fragments":["still"]},{"Key":"first stab","Fragments":["at"]},{"Key":"stab at","Fragments":["using"]},{"Key":"using exercism,","Fragments":["probably"]},{"Key":"exercism, probably","Fragments":["doing"]},{"Key":"probably doing","Fragments":["this"]},{"Key":"this completely","Fragments":["wrong."]},{"Key":"seems sort","Fragments":["of","of"]},{"Key":"of dumb.","Fragments":["I"]},{"Key":"submit either","Fragments":["the"]},{"Key":"header or","Fragments":["the"]},{"Key":"cpp, but","Fragments":["not"]},{"Key":"not both?","Fragments":["So"]},{"Key":"both? So","Fragments":["I"]},{"Key":"put everything","Fragments":["in"]},{"Key":"that's somewhat","Fragments":["bad"]},{"Key":"somewhat bad","Fragments":["form."]},{"Key":"suite demanded","Fragments":["a"]},{"Key":"demanded a","Fragments":["bob::"]},{"Key":"a bob::","Fragments":["qualifier;"]},{"Key":"bob:: qualifier;","Fragments":["could"]},{"Key":"qualifier; could","Fragments":["have"]},{"Key":"class method","Fragments":["approach;"]},{"Key":"method approach;","Fragments":["not"]},{"Key":"approach; not","Fragments":["sure"]},{"Key":"what's intended/desired,","Fragments":["so"]},{"Key":"intended/desired, so","Fragments":["went"]},{"Key":"so went","Fragments":["with"]},{"Key":"class case,","Fragments":["I"]},{"Key":"expressions but","Fragments":["they"]},{"Key":"not increase","Fragments":["readability"]},{"Key":"increase readability","Fragments":["in"]},{"Key":"considered just","Fragments":["iterating"]},{"Key":"just iterating","Fragments":["over","through"]},{"Key":"checking all","Fragments":["of"]},{"Key":"once. But","Fragments":["I"]},{"Key":"strings expected","Fragments":["here"]},{"Key":"expected here","Fragments":["are"]},{"Key":"are long","Fragments":["enough"]},{"Key":"using `isalpha()`","Fragments":["instead"]},{"Key":"`isalpha()` instead","Fragments":["of"]},{"Key":"checking ascii","Fragments":["ranges"]},{"Key":"ascii ranges","Fragments":["since"]},{"Key":"ranges since","Fragments":["you"]},{"Key":"using `toupper()`","Fragments":["from"]},{"Key":"`toupper()` from","Fragments":["the"]},{"Key":"is located","Fragments":["in"]},{"Key":"located in","Fragments":["iteration"]},{"Key":"problem as","Fragments":["a","follows:"]},{"Key":"cases (silence,","Fragments":["questions,"]},{"Key":"(silence, questions,","Fragments":["yelling,"]},{"Key":"questions, yelling,","Fragments":["and"]},{"Key":"yelling, and","Fragments":["everything","ends"]},{"Key":"everything else)","Fragments":["that"]},{"Key":"else) that","Fragments":["could"]},{"Key":"be clearly","Fragments":["defined"]},{"Key":"defined with","Fragments":["if"]},{"Key":"with if","Fragments":["statements.","the"]},{"Key":"if statements.","Fragments":["Silence","Is"]},{"Key":"statements. Silence","Fragments":["is"]},{"Key":"as either","Fragments":["an"]},{"Key":"either an","Fragments":["empty"]},{"Key":"string containing","Fragments":["only","capital","no","no","no"]},{"Key":"containing only","Fragments":["whitespace."]},{"Key":"only whitespace.","Fragments":["Questions"]},{"Key":"whitespace. Questions","Fragments":["are"]},{"Key":"Questions are","Fragments":["defined"]},{"Key":"any string","Fragments":["that","which"]},{"Key":"as yelling,","Fragments":["and"]},{"Key":"and ends","Fragments":["with"]},{"Key":"ends with","Fragments":["a","non-alphanum","a","a"]},{"Key":"question mark.","Fragments":["Yelling","Normal","I","Also,"]},{"Key":"mark. Yelling","Fragments":["is"]},{"Key":"as either:","Fragments":["a)"]},{"Key":"either: a)","Fragments":["a"]},{"Key":"a) a","Fragments":["string"]},{"Key":"containing capital","Fragments":["letters"]},{"Key":"capital letters","Fragments":["but","in"]},{"Key":"no lower-case","Fragments":["letters,","letters."]},{"Key":"lower-case letters,","Fragments":["or"]},{"Key":"or b)","Fragments":["a"]},{"Key":"b) a","Fragments":["string"]},{"Key":"containing no","Fragments":["letters","lowercase","letters","letters"]},{"Key":"no letters","Fragments":["and","to","but","and"]},{"Key":"and ending","Fragments":["in","in","of"]},{"Key":"ending in","Fragments":["an","an","an","'s'?"]},{"Key":"exclamation point.","Fragments":["The"]},{"Key":"point. The","Fragments":["'everything"]},{"Key":"The 'everything","Fragments":["else'"]},{"Key":"'everything else'","Fragments":["case"]},{"Key":"else' case","Fragments":["is"]},{"Key":"string which","Fragments":["does"]},{"Key":"not fit","Fragments":["the"]},{"Key":"previous three","Fragments":["definitions."]},{"Key":"I pared","Fragments":["down"]},{"Key":"pared down","Fragments":["the"]},{"Key":"the necessary","Fragments":["ones,","information"]},{"Key":"necessary ones,","Fragments":["and"]},{"Key":"added comments","Fragments":["to"]},{"Key":"a normal","Fragments":["class,","for-loop"]},{"Key":"normal class,","Fragments":["but"]},{"Key":"static implementation,","Fragments":["since"]},{"Key":"implementation, since","Fragments":["the"]},{"Key":"test required","Fragments":["that"]},{"Key":"required that","Fragments":["kind"]},{"Key":"idea how","Fragments":["to"]},{"Key":"to even","Fragments":["get"]},{"Key":"get started.","Fragments":["When","Then"]},{"Key":"started. When","Fragments":["I"]},{"Key":"run \"g++","Fragments":["bob_test.cpp\","]},{"Key":"\"g++ bob_test.cpp\",","Fragments":["it"]},{"Key":"bob_test.cpp\", it","Fragments":["says"]},{"Key":"it says","Fragments":["I","that"]},{"Key":"says I","Fragments":["need"]},{"Key":".h header","Fragments":["file."]},{"Key":"You first","Fragments":["need"]},{"Key":"first need","Fragments":["to"]},{"Key":"file bob.h,","Fragments":["then"]},{"Key":"bob.h, then","Fragments":["you"]},{"Key":"incorporate the","Fragments":["algorithm"]},{"Key":"and functional","Fragments":["libraries"]},{"Key":"functional libraries","Fragments":["into"]},{"Key":"libraries into","Fragments":["my"]},{"Key":"my coding","Fragments":["practices."]},{"Key":"coding practices.","Fragments":["I"]},{"Key":"practices. I","Fragments":["used"]},{"Key":"write loops","Fragments":["by"]},{"Key":"hand for","Fragments":["pretty"]},{"Key":"for pretty","Fragments":["much"]},{"Key":"I benchmarked","Fragments":["a"]},{"Key":"benchmarked a","Fragments":["few"]},{"Key":"few of","Fragments":["my","the"]},{"Key":"my iterations","Fragments":["to"]},{"Key":"iterations to","Fragments":["find"]},{"Key":"good tradeoff","Fragments":["between"]},{"Key":"tradeoff between","Fragments":["speed"]},{"Key":"between speed","Fragments":["and"]},{"Key":"readability. This","Fragments":["is"]},{"Key":"what's come","Fragments":["of"]},{"Key":"come of","Fragments":["it."]},{"Key":"get squeeze","Fragments":["a"]},{"Key":"squeeze a","Fragments":["bit"]},{"Key":"more performance","Fragments":["out"]},{"Key":"performance out","Fragments":["of"]},{"Key":"the isYell()","Fragments":["function"]},{"Key":"isYell() function","Fragments":["if"]},{"Key":"a handwritten","Fragments":["loop,"]},{"Key":"handwritten loop,","Fragments":["but"]},{"Key":"loop, but","Fragments":["this","I'm","it's"]},{"Key":"version here","Fragments":["looks"]},{"Key":"here looks","Fragments":["much"]},{"Key":" (I","Fragments":["just","pushed"]},{"Key":"(I just","Fragments":["noticed"]},{"Key":"I've missed","Fragments":["the"]},{"Key":"header guards.","Fragments":["Just"]},{"Key":"guards. Just","Fragments":["act"]},{"Key":"Just act","Fragments":["as"]},{"Key":"were there","Fragments":["\\^.\\^)"]},{"Key":"Some of","Fragments":["my"]},{"Key":"of if/else","Fragments":["if"]},{"Key":"if/else if","Fragments":["statements."]},{"Key":"statements. Is","Fragments":["this"]},{"Key":"this ugly","Fragments":["looking"]},{"Key":"ugly looking","Fragments":["code?"]},{"Key":"looking code?","Fragments":["Should"]},{"Key":"code? Should","Fragments":["I"]},{"Key":"Should I","Fragments":["try"]},{"Key":"use switch","Fragments":["statements?","statement"]},{"Key":"thought using","Fragments":["an"]},{"Key":"enum would","Fragments":["make"]},{"Key":"the categories","Fragments":["more"]},{"Key":"categories more","Fragments":["apparent."]},{"Key":" Doesn't","Fragments":["handle","look"]},{"Key":"Doesn't handle","Fragments":["the"]},{"Key":"where only","Fragments":["an"]},{"Key":"only an","Fragments":["explicative","algorithm."]},{"Key":"an explicative","Fragments":["\"*\u0026#@\u0026$\""]},{"Key":"explicative \"*\u0026#@\u0026$\"","Fragments":["is"]},{"Key":"\"*\u0026#@\u0026$\" is","Fragments":["directed"]},{"Key":"is directed","Fragments":["at"]},{"Key":"directed at","Fragments":["Bob."]},{"Key":"at Bob.","Fragments":["Does"]},{"Key":"Bob. Does","Fragments":["handle"]},{"Key":"Does handle","Fragments":["the"]},{"Key":"additional case","Fragments":["of"]},{"Key":"shouting \"1,","Fragments":["2,"]},{"Key":"2, 3,","Fragments":["4!\""]},{"Key":"3, 4!\"","Fragments":["at"]},{"Key":"4!\" at","Fragments":["Bob,"]},{"Key":"at Bob,","Fragments":["where"]},{"Key":"Bob, where","Fragments":["the"]},{"Key":"exclamation is","Fragments":["required"]},{"Key":" Has","Fragments":["just"]},{"Key":"Has just","Fragments":["two"]},{"Key":"just two","Fragments":["loops,","colons"]},{"Key":"two loops,","Fragments":["which"]},{"Key":"loops, which","Fragments":["I"]},{"Key":"Just testing","Fragments":["exercism."]},{"Key":"testing exercism.","Fragments":["It"]},{"Key":"exercism. It","Fragments":["seems"]},{"Key":"I'm rather","Fragments":["unhappy"]},{"Key":"rather unhappy","Fragments":["with"]},{"Key":"the std::isXXX","Fragments":["series"]},{"Key":"std::isXXX series","Fragments":["of"]},{"Key":"functions don't","Fragments":["take","need","need"]},{"Key":"take char","Fragments":["as"]},{"Key":"wrap them","Fragments":["to"]},{"Key":"Not quite","Fragments":["happy"]},{"Key":"if( wordStart","Fragments":["=="]},{"Key":"wordStart ==","Fragments":["input.end()"]},{"Key":"== input.end()","Fragments":[")"]},{"Key":"input.end() )","Fragments":["break;"]},{"Key":"loop body.","Fragments":["I"]},{"Key":"body. I","Fragments":["only"]},{"Key":"string ends","Fragments":["with"]},{"Key":"with non-alphanum","Fragments":["characters."]},{"Key":"non-alphanum characters.","Fragments":["It"]},{"Key":"characters. It","Fragments":["feels"]},{"Key":"probably rewrite","Fragments":["the"]},{"Key":"rewrite the","Fragments":["code"]},{"Key":"code so","Fragments":["that","that","that"]},{"Key":"extra break","Fragments":["condition"]},{"Key":"break condition","Fragments":["for"]},{"Key":"that wouldn't","Fragments":["also","have"]},{"Key":"wouldn't also","Fragments":["add"]},{"Key":"also add","Fragments":["some"]},{"Key":"some extra","Fragments":["lines","statements.","logic"]},{"Key":"It's quite","Fragments":["short."]},{"Key":"- is_shouting","Fragments":["is"]},{"Key":"is_shouting is","Fragments":["fairly"]},{"Key":"fairly long","Fragments":["and"]},{"Key":"be public","Fragments":["is"]},{"Key":"public is","Fragments":["hey()."]},{"Key":"is hey().","Fragments":["Here"]},{"Key":"hey(). Here","Fragments":["everything"]},{"Key":"Here everything","Fragments":["is"]},{"Key":"is public","Fragments":["so"]},{"Key":"public so","Fragments":["to"]},{"Key":"- std::string","Fragments":["argument"]},{"Key":"std::string argument","Fragments":["could","by"]},{"Key":"it needn't","Fragments":["be"]},{"Key":"needn't be","Fragments":["copied"]},{"Key":"be copied","Fragments":["or"]},{"Key":"copied or","Fragments":["moved."]},{"Key":"- indexing","Fragments":["the"]},{"Key":"is non-standard.","Fragments":["prefer"]},{"Key":"non-standard. prefer","Fragments":["iterators."]},{"Key":"use appropriately","Fragments":["named","named"]},{"Key":"appropriately named","Fragments":["functions","boolean"]},{"Key":"named functions","Fragments":["instead"]},{"Key":"splitting tokenization","Fragments":["and"]},{"Key":"tokenization and","Fragments":["word"]},{"Key":"and word","Fragments":["counting"]},{"Key":"word counting","Fragments":["complicates"]},{"Key":"counting complicates","Fragments":["the"]},{"Key":"complicates the","Fragments":["code"]},{"Key":"code quite","Fragments":["a","a"]},{"Key":"But let","Fragments":["me","me"]},{"Key":"site asks","Fragments":["for,"]},{"Key":"asks for,","Fragments":["nitpicking."]},{"Key":"`string word","Fragments":["=","="]},{"Key":"word =","Fragments":["wordlist[wordlist.size()-1];`","wordlist.back();`","rit-\u003estr();`","rit++-\u003estr();`","std::string("]},{"Key":"= wordlist[wordlist.size()-1];`","Fragments":["could"]},{"Key":"wordlist[wordlist.size()-1];` could","Fragments":["be"]},{"Key":"be `string","Fragments":["word"]},{"Key":" ,","Fragments":["`"]},{"Key":", `","Fragments":["wordlist.erase(wordlist.end());`"]},{"Key":"` wordlist.erase(wordlist.end());`","Fragments":["seems"]},{"Key":"wordlist.erase(wordlist.end());` seems","Fragments":["wrong"]},{"Key":"seems wrong","Fragments":["and"]},{"Key":"be `wordlist.erase(wordlist.end()-1);`","Fragments":["or"]},{"Key":"`wordlist.erase(wordlist.end()-1);` or","Fragments":["better"]},{"Key":"general that","Fragments":["while"]},{"Key":"a strange","Fragments":["way"]},{"Key":"strange way","Fragments":["to"]},{"Key":"over every","Fragments":["element"]},{"Key":"element (there's","Fragments":["no"]},{"Key":"(there's no","Fragments":["real"]},{"Key":"delete each","Fragments":["element)"]},{"Key":"rather roundabout","Fragments":["way"]},{"Key":"roundabout way","Fragments":["to"]},{"Key":"count `word_count[word]","Fragments":["="]},{"Key":"`word_count[word] =","Fragments":["(word_count.find(word)-\u003esecond"]},{"Key":"= (word_count.find(word)-\u003esecond","Fragments":["+"]},{"Key":"(word_count.find(word)-\u003esecond +","Fragments":["1);`,"]},{"Key":"+ 1);`,","Fragments":["I"]},{"Key":"1);`, I","Fragments":["couldn't"]},{"Key":"couldn't really","Fragments":["find"]},{"Key":"really find","Fragments":["out"]},{"Key":"whether this","Fragments":["is","is"]},{"Key":"is undefined","Fragments":["behavior","behavior","behavior.","whether","behaviour"]},{"Key":"behavior or","Fragments":["not"]},{"Key":"not but","Fragments":["the"]},{"Key":"sure maybe","Fragments":["a"]},{"Key":"sign that","Fragments":["this"]},{"Key":"be simplified.","Fragments":["The"]},{"Key":"simplified. The","Fragments":["expression"]},{"Key":"The expression","Fragments":["`word_count[word]`"]},{"Key":"expression `word_count[word]`","Fragments":["can"]},{"Key":"`word_count[word]` can","Fragments":["implicitly"]},{"Key":"can implicitly","Fragments":["insert"]},{"Key":"implicitly insert","Fragments":["`word`"]},{"Key":"insert `word`","Fragments":["into"]},{"Key":"`word` into","Fragments":["the"]},{"Key":"map, this","Fragments":["element"]},{"Key":"this element","Fragments":["is"]},{"Key":"then read","Fragments":["withing"]},{"Key":"read withing","Fragments":["the"]},{"Key":"withing the","Fragments":["same"]},{"Key":"same expression","Fragments":["on"]},{"Key":"expression on","Fragments":["the","line"]},{"Key":"right side","Fragments":["`word_count.find(word)`."]},{"Key":"doing this,","Fragments":["I'd","as"]},{"Key":"this, I'd","Fragments":["use"]},{"Key":"I'd use","Fragments":["switch","e.g."]},{"Key":"But why","Fragments":["not"]},{"Key":"named boolean","Fragments":["functions"]},{"Key":"boolean functions","Fragments":["in","are","and"]},{"Key":"`hey` instead","Fragments":["of"]},{"Key":"of categorizing","Fragments":["in"]},{"Key":"categorizing in","Fragments":["a"]},{"Key":" here","Fragments":["are"]},{"Key":"1) You","Fragments":["can","require","don't","could","are","don't","construct","have"]},{"Key":"use std::transform()","Fragments":["or"]},{"Key":"std::transform() or","Fragments":["boost::to_lower_copy()"]},{"Key":"or boost::to_lower_copy()","Fragments":["to"]},{"Key":"boost::to_lower_copy() to","Fragments":["turn"]},{"Key":"to turn","Fragments":["a"]},{"Key":"turn a","Fragments":["string"]},{"Key":"into lower","Fragments":["case."]},{"Key":"case. [More","Fragments":["info"]},{"Key":"[More info","Fragments":["here](http://stackoverflow.com/questions/313970/c-stdstring-to-lower-case).","here](http://www.learncpp.com/cpp-tutorial/73-passing-arguments-by-reference/)."]},{"Key":"info here](http://stackoverflow.com/questions/313970/c-stdstring-to-lower-case).","Fragments":["That"]},{"Key":"here](http://stackoverflow.com/questions/313970/c-stdstring-to-lower-case). That","Fragments":["way"]},{"Key":"yourself having","Fragments":["to"]},{"Key":"a ToLower","Fragments":["function"]},{"Key":"ToLower function","Fragments":["yourself."]},{"Key":"2) When","Fragments":["you"]},{"Key":"pass variables","Fragments":["to"]},{"Key":"to other","Fragments":["functions,","variables","variables","problem","projects,","instances"]},{"Key":"other functions,","Fragments":["they"]},{"Key":"functions, they","Fragments":["get"]},{"Key":"they get","Fragments":["copied."]},{"Key":"get copied.","Fragments":["For"]},{"Key":"copied. For","Fragments":["small"]},{"Key":"For small","Fragments":["objects"]},{"Key":"small objects","Fragments":["such"]},{"Key":"objects such","Fragments":["as"]},{"Key":"as integers","Fragments":["this"]},{"Key":"integers this","Fragments":["isn't"]},{"Key":"isn't tragic.","Fragments":["But"]},{"Key":"tragic. But","Fragments":["for"]},{"Key":"for large","Fragments":["objects","N."]},{"Key":"large objects","Fragments":["like"]},{"Key":"like std::maps","Fragments":["(or"]},{"Key":"std::maps (or","Fragments":["even"]},{"Key":"even std::strings)","Fragments":["it"]},{"Key":"std::strings) it","Fragments":["costs"]},{"Key":"costs performance.","Fragments":["That's"]},{"Key":"performance. That's","Fragments":["why"]},{"Key":"why such","Fragments":["objects"]},{"Key":"such objects","Fragments":["are"]},{"Key":"objects are","Fragments":["often"]},{"Key":"example, your","Fragments":["MapsEqual"]},{"Key":"your MapsEqual","Fragments":["function"]},{"Key":"MapsEqual function","Fragments":["would"]},{"Key":"bool MapsEqual(const","Fragments":["std::map\u003cchar,"]},{"Key":"MapsEqual(const std::map\u003cchar,","Fragments":["int\u003e\u0026"]},{"Key":"std::map\u003cchar, int\u003e\u0026","Fragments":["m1,","m2)","nucleotide_counts();```"]},{"Key":"int\u003e\u0026 m1,","Fragments":["const"]},{"Key":"m1, const","Fragments":["std::map\u003cchar,"]},{"Key":"int\u003e\u0026 m2)","Fragments":["{"]},{"Key":"way, m1","Fragments":["and"]},{"Key":"m1 and","Fragments":["m2"]},{"Key":"and m2","Fragments":["won't"]},{"Key":"m2 won't","Fragments":["be"]},{"Key":"be needlessly","Fragments":["copied."]},{"Key":"needlessly copied.","Fragments":["[More"]},{"Key":"copied. [More","Fragments":["info"]},{"Key":"3) std::map","Fragments":["actually"]},{"Key":"std::map actually","Fragments":["has"]},{"Key":"actually has","Fragments":["a"]},{"Key":"a defined","Fragments":["comparison"]},{"Key":"defined comparison","Fragments":["operator."]},{"Key":"comparison operator.","Fragments":["So"]},{"Key":"operator. So","Fragments":["you"]},{"Key":"through every","Fragments":["map"]},{"Key":"every map","Fragments":["entry"]},{"Key":"map entry","Fragments":["and"]},{"Key":"entry and","Fragments":["compare"]},{"Key":"compare it","Fragments":["with","with"]},{"Key":"with another.","Fragments":["You"]},{"Key":"another. You","Fragments":["can"]},{"Key":"two maps","Fragments":["*a*","returns","could"]},{"Key":"maps *a*","Fragments":["and"]},{"Key":"*a* and","Fragments":["*b*"]},{"Key":"and *b*","Fragments":["by"]},{"Key":"*b* by","Fragments":["just"]},{"Key":"just writing","Fragments":["\"a"]},{"Key":"writing \"a","Fragments":["=="]},{"Key":"\"a ==","Fragments":["b\""]},{"Key":"== b\"","Fragments":["or"]},{"Key":"b\" or","Fragments":["\"a"]},{"Key":"or \"a","Fragments":["!="]},{"Key":"\"a !=","Fragments":["b\"."]},{"Key":"I'm STUCKED!","Fragments":["I"]},{"Key":"STUCKED! I","Fragments":["can't"]},{"Key":"even pass","Fragments":["the"]},{"Key":"first test!","Fragments":["I"]},{"Key":"test! I","Fragments":["just"]},{"Key":"named \"hey\",","Fragments":["but"]},{"Key":"\"hey\", but","Fragments":["when"]},{"Key":"run \"make\"","Fragments":["it"]},{"Key":"\"make\" it","Fragments":["says"]},{"Key":"no \"hey\"","Fragments":["function"]},{"Key":"\"hey\" function","Fragments":["matching","is","I"]},{"Key":"matching for","Fragments":["that"]},{"Key":"test instace","Fragments":["in"]},{"Key":"instace in","Fragments":["bob"]},{"Key":"I decomposed","Fragments":["the"]},{"Key":"or consists","Fragments":["solely"]},{"Key":"consists solely","Fragments":["of"]},{"Key":"solely of","Fragments":["whitespace,"]},{"Key":"whitespace, then","Fragments":["the"]},{"Key":"the message","Fragments":["is","has","is","starts","but","types","string","string"]},{"Key":"message is","Fragments":["\"silent\"","all"]},{"Key":"* Emptiness","Fragments":["is"]},{"Key":"Emptiness is","Fragments":["trivial"]},{"Key":"to check.","Fragments":["Deciding"]},{"Key":"check. Deciding","Fragments":["all(whitespace)"]},{"Key":"Deciding all(whitespace)","Fragments":["requires"]},{"Key":"all(whitespace) requires","Fragments":["visiting"]},{"Key":"requires visiting","Fragments":["the"]},{"Key":"visiting the","Fragments":["whole"]},{"Key":"yell, the","Fragments":["string"]},{"Key":"contain at","Fragments":["least"]},{"Key":"one alphabetic","Fragments":["character"]},{"Key":"alphabetic character","Fragments":["and","before"]},{"Key":"lowercase alphabetic","Fragments":["characters."]},{"Key":"* We","Fragments":["can"]},{"Key":"can stop","Fragments":["iteration","iteration)."]},{"Key":"stop iteration","Fragments":["upon","(short"]},{"Key":"iteration upon","Fragments":["finding"]},{"Key":"upon finding","Fragments":["a"]},{"Key":"lowercase char;","Fragments":["it"]},{"Key":"char; it","Fragments":["is"]},{"Key":"not whitespace,","Fragments":["and"]},{"Key":"whitespace, and","Fragments":["it"]},{"Key":"* Yells","Fragments":["take"]},{"Key":"Yells take","Fragments":["precedence"]},{"Key":"take precedence","Fragments":["over"]},{"Key":"over silence,","Fragments":["so"]},{"Key":"silence, so","Fragments":["if"]},{"Key":"yell on","Fragments":["our"]},{"Key":"on our","Fragments":["hands,"]},{"Key":"our hands,","Fragments":["just"]},{"Key":"hands, just","Fragments":["check"]},{"Key":"last char","Fragments":["is"]},{"Key":"The yell_or_silence","Fragments":["class"]},{"Key":"yell_or_silence class","Fragments":["is"]},{"Key":"is designed","Fragments":["for"]},{"Key":"with std::find_if().","Fragments":["It"]},{"Key":"std::find_if(). It","Fragments":["observes"]},{"Key":"It observes","Fragments":["one"]},{"Key":"observes one","Fragments":["character"]},{"Key":"character at","Fragments":["a","the"]},{"Key":"true (terminating","Fragments":["the"]},{"Key":"(terminating the","Fragments":["iteration)"]},{"Key":"the iteration)","Fragments":["if"]},{"Key":"iteration) if","Fragments":["one"]},{"Key":"the decisions","Fragments":["\"this","that"]},{"Key":"decisions \"this","Fragments":["is"]},{"Key":"a yell\"","Fragments":["or"]},{"Key":"yell\" or","Fragments":["\"this"]},{"Key":"or \"this","Fragments":["is"]},{"Key":"is silence\"","Fragments":["can"]},{"Key":"silence\" can","Fragments":["be"]},{"Key":"be made.","Fragments":["The"]},{"Key":"made. The","Fragments":["return"]},{"Key":"of std::find_if","Fragments":["is"]},{"Key":"std::find_if is","Fragments":["not"]},{"Key":"not important","Fragments":["in","but"]},{"Key":"important in","Fragments":["this"]},{"Key":"this case;","Fragments":["we"]},{"Key":"case; we","Fragments":["don't"]},{"Key":"don't care","Fragments":["where","enough"]},{"Key":"care where","Fragments":["that"]},{"Key":"that character","Fragments":["was,","appears"]},{"Key":"character was,","Fragments":["only"]},{"Key":"was, only","Fragments":["that"]},{"Key":"initial implementation","Fragments":["used"]},{"Key":"implementation used","Fragments":["std::for_each()"]},{"Key":"used std::for_each()","Fragments":["but"]},{"Key":"std::for_each() but","Fragments":["there"]},{"Key":"iteration (short","Fragments":["of"]},{"Key":"(short of","Fragments":["throwing"]},{"Key":"exception, which","Fragments":["is"]},{"Key":"not desirable)","Fragments":["once"]},{"Key":"desirable) once","Fragments":["the"]},{"Key":"predicate object","Fragments":["already"]},{"Key":"object already","Fragments":["knows"]},{"Key":"already knows","Fragments":["the"]},{"Key":"answer (e.g.,","Fragments":["if"]},{"Key":"(e.g., if","Fragments":["the"]},{"Key":"is lowercase,","Fragments":["we"]},{"Key":"lowercase, we","Fragments":["know"]},{"Key":"neither silence","Fragments":["nor"]},{"Key":"silence nor","Fragments":["a"]},{"Key":"nor a","Fragments":["yell"]},{"Key":"yell and","Fragments":["can"]},{"Key":"of inner_product.","Fragments":["I"]},{"Key":"inner_product. I","Fragments":["didn't"]},{"Key":"library had","Fragments":["a"]},{"Key":"that fits","Fragments":["so"]},{"Key":"fits so","Fragments":["perfectly"]},{"Key":"so perfectly","Fragments":["for"]},{"Key":"perfectly for","Fragments":["this"]},{"Key":"that swapping","Fragments":["the"]},{"Key":"swapping the","Fragments":["two","arguments."]},{"Key":"is overly","Fragments":["complicated"]},{"Key":"this task.","Fragments":["I'd","I","When"]},{"Key":"task. I'd","Fragments":["have"]},{"Key":"written it","Fragments":["like"]},{"Key":"int minLength","Fragments":["="]},{"Key":"minLength =","Fragments":["std::min("]},{"Key":"= std::min(","Fragments":["a.length(),"]},{"Key":"std::min( a.length(),","Fragments":["b.length()"]},{"Key":"a.length(), b.length()","Fragments":[");"]},{"Key":"return inner_product(a.begin(),","Fragments":["a.begin()"]},{"Key":"inner_product(a.begin(), a.begin()","Fragments":["+"]},{"Key":"a.begin() +","Fragments":["minLength,"]},{"Key":"+ minLength,","Fragments":["b.begin(),"]},{"Key":"minLength, b.begin(),","Fragments":["0,"]},{"Key":"b.begin(), 0,","Fragments":["..."]},{"Key":"0, ...","Fragments":[");","}?"]},{"Key":"There probably","Fragments":["isn't"]},{"Key":"probably isn't","Fragments":["much","the"]},{"Key":"isn't much","Fragments":["of","of"]},{"Key":"performance hit","Fragments":["with","from"]},{"Key":"hit with","Fragments":["swap"]},{"Key":"with swap","Fragments":["since"]},{"Key":"swap since","Fragments":["strings"]},{"Key":"since strings","Fragments":["are"]},{"Key":"are moveable,","Fragments":["but"]},{"Key":"moveable, but","Fragments":["I"]},{"Key":"itself is","Fragments":["kept"]},{"Key":"kept simpler","Fragments":["with"]},{"Key":"Also, someone","Fragments":["might"]},{"Key":"of *compute(string","Fragments":["shortest,"]},{"Key":"*compute(string shortest,","Fragments":["string"]},{"Key":"shortest, string","Fragments":["longest)*"]},{"Key":"string longest)*","Fragments":["and"]},{"Key":"longest)* and","Fragments":["thinks"]},{"Key":"and thinks","Fragments":["that"]},{"Key":"thinks that","Fragments":["he"]},{"Key":"he needs","Fragments":["to"]},{"Key":"first passed","Fragments":["parameter"]},{"Key":"passed parameter","Fragments":["is"]},{"Key":"Nice idea","Fragments":["to"]},{"Key":"to imbue","Fragments":["your"]},{"Key":"imbue your","Fragments":["stringstring"]},{"Key":"your stringstring","Fragments":["with"]},{"Key":"stringstring with","Fragments":["a"]},{"Key":"Just one","Fragments":["remark"]},{"Key":"one remark","Fragments":["-"]},{"Key":"remark -","Fragments":["you"]},{"Key":"can turn","Fragments":["this","them"]},{"Key":"if (it","Fragments":["!="]},{"Key":"(it !=","Fragments":["acc.end())","'"]},{"Key":"!= acc.end())","Fragments":["{"]},{"Key":" acc[word]","Fragments":["=","+="]},{"Key":"acc[word] =","Fragments":["1;"]},{"Key":" into","Fragments":["this"]},{"Key":"acc[word] +=","Fragments":["1;"]},{"Key":"the necessity","Fragments":["of"]},{"Key":"necessity of","Fragments":["using"]},{"Key":"using two","Fragments":["different","of","global"]},{"Key":"different methods","Fragments":["here."]},{"Key":"methods here.","Fragments":["(if"]},{"Key":"here. (if","Fragments":["the"]},{"Key":"(if the","Fragments":["word"]},{"Key":"word isn't","Fragments":["in"]},{"Key":"isn't in","Fragments":["acc"]},{"Key":"in acc","Fragments":["yet,"]},{"Key":"acc yet,","Fragments":["it's"]},{"Key":"yet, it's","Fragments":["constructed"]},{"Key":"it's constructed","Fragments":["with"]},{"Key":"constructed with","Fragments":["a"]},{"Key":"0. So","Fragments":["*acc[word]"]},{"Key":"So *acc[word]","Fragments":["+="]},{"Key":"*acc[word] +=","Fragments":["1*"]},{"Key":"+= 1*","Fragments":["does"]},{"Key":"1* does","Fragments":["the"]},{"Key":"as *acc[word]","Fragments":["="]},{"Key":"*acc[word] =","Fragments":["1*"]},{"Key":"= 1*","Fragments":["in"]},{"Key":"1* in","Fragments":["this"]},{"Key":"feedback. Going","Fragments":["to"]},{"Key":"Going to","Fragments":["admit"]},{"Key":"admit feeling","Fragments":["pretty"]},{"Key":"feeling pretty","Fragments":["dumb,"]},{"Key":"pretty dumb,","Fragments":["but"]},{"Key":"dumb, but","Fragments":["I"]},{"Key":"didn't realize","Fragments":["that","that","I","that"]},{"Key":"work. Great","Fragments":["point."]},{"Key":"Great point.","Fragments":["Will"]},{"Key":"point. Will","Fragments":["definitely"]},{"Key":"Will definitely","Fragments":["make"]},{"Key":"that change","Fragments":["in"]},{"Key":"Got the","Fragments":["ctype/imbue"]},{"Key":"the ctype/imbue","Fragments":["idea"]},{"Key":"ctype/imbue idea","Fragments":["from"]},{"Key":"idea from","Fragments":["stackoverflow;"]},{"Key":"from stackoverflow;","Fragments":["thought"]},{"Key":"stackoverflow; thought","Fragments":["it"]},{"Key":"was pretty","Fragments":["cute","straightforward.","straightforward"]},{"Key":"pretty cute","Fragments":["but"]},{"Key":"cute but","Fragments":["can't"]},{"Key":"can't take","Fragments":["credit"]},{"Key":"take credit","Fragments":["for"]},{"Key":"credit for","Fragments":["it."]},{"Key":" Integrated","Fragments":["suggestion"]},{"Key":"Integrated suggestion","Fragments":["from"]},{"Key":"from previous","Fragments":["round"]},{"Key":"previous round","Fragments":["to"]},{"Key":"round to","Fragments":["leverage"]},{"Key":"to leverage","Fragments":["default-value"]},{"Key":"leverage default-value","Fragments":["construction"]},{"Key":"default-value construction","Fragments":["in"]},{"Key":"construction in","Fragments":["the"]},{"Key":"all into","Fragments":["one"]},{"Key":"one giant","Fragments":["function."]},{"Key":"giant function.","Fragments":["This"]},{"Key":"This code","Fragments":["does","would","has","is","uses","is","looks","is","is","will","is"]},{"Key":"not, however,","Fragments":["pass"]},{"Key":"however, pass","Fragments":["the"]},{"Key":"tests cases.","Fragments":["That's"]},{"Key":"cases. That's","Fragments":["just"]},{"Key":"just due","Fragments":["to"]},{"Key":"a typo","Fragments":["(Whoa"]},{"Key":"typo (Whoa","Fragments":["vs"]},{"Key":"(Whoa vs","Fragments":["Woah)."]},{"Key":"vs Woah).","Fragments":["I"]},{"Key":"Woah). I","Fragments":["do,"]},{"Key":"do, however,","Fragments":["have"]},{"Key":"however, have","Fragments":["a"]},{"Key":"few general","Fragments":["C++","comments"]},{"Key":"C++ tips","Fragments":["for"]},{"Key":"tips for","Fragments":["you."]},{"Key":"not (I","Fragments":["submitted"]},{"Key":"(I submitted","Fragments":["my"]},{"Key":"submitted my","Fragments":["solution"]},{"Key":"header due","Fragments":["to"]},{"Key":"the 1","Fragments":["file"]},{"Key":"1 file","Fragments":["limit),","is"]},{"Key":"file limit),","Fragments":["but"]},{"Key":"limit), but","Fragments":["I"]},{"Key":"never ever","Fragments":["type"]},{"Key":"ever type","Fragments":["this"]},{"Key":"type this","Fragments":["at"]},{"Key":"this at","Fragments":["global"]},{"Key":"scope in","Fragments":["a"]},{"Key":"header. Even","Fragments":["if"]},{"Key":"file (.cpp,","Fragments":[".cxx,"]},{"Key":"(.cpp, .cxx,","Fragments":[".C,"]},{"Key":".cxx, .C,","Fragments":["...),"]},{"Key":".C, ...),","Fragments":["there"]},{"Key":"...), there","Fragments":["is"]},{"Key":"move your","Fragments":["using","`using`"]},{"Key":"directive inside","Fragments":["of"]},{"Key":"your bob","Fragments":["namespace."]},{"Key":"bob namespace.","Fragments":["That"]},{"Key":"namespace. That","Fragments":["way,"]},{"Key":"way, the","Fragments":["effect"]},{"Key":"the effect","Fragments":["of"]},{"Key":"the directive","Fragments":["is"]},{"Key":"directive is","Fragments":["limited"]},{"Key":"is limited","Fragments":["to"]},{"Key":"Also, you're","Fragments":["using","passing"]},{"Key":"C versions","Fragments":["of"]},{"Key":"the \"cctype\"","Fragments":["functions"]},{"Key":"\"cctype\" functions","Fragments":["(isupper,"]},{"Key":"functions (isupper,","Fragments":["toupper,"]},{"Key":"(isupper, toupper,","Fragments":["etc)."]},{"Key":"toupper, etc).","Fragments":["It"]},{"Key":"explicitly include","Fragments":["the"]},{"Key":"header `\u003ccctype\u003e`","Fragments":["if"]},{"Key":"`\u003ccctype\u003e` if","Fragments":["you"]},{"Key":"you insist","Fragments":["on"]},{"Key":"insist on","Fragments":["using"]},{"Key":"using them.","Fragments":["Also"]},{"Key":"them. Also","Fragments":["be","your"]},{"Key":"Also be","Fragments":["aware"]},{"Key":"are locale-aware","Fragments":["C++"]},{"Key":"locale-aware C++","Fragments":["versions"]},{"Key":"C++ versions","Fragments":["of"]},{"Key":"on multiple","Fragments":["character"]},{"Key":"multiple character","Fragments":["types"]},{"Key":"character types","Fragments":["(we're"]},{"Key":"types (we're","Fragments":["talking"]},{"Key":"(we're talking","Fragments":["about"]},{"Key":"about unicode","Fragments":["now)"]},{"Key":"unicode now)","Fragments":["defined"]},{"Key":"now) defined","Fragments":["in"]},{"Key":"the `\u003clocale\u003e`","Fragments":["header."]},{"Key":"`\u003clocale\u003e` header.","Fragments":["You"]},{"Key":"check those","Fragments":["out.","conditions"]},{"Key":"those out.","Fragments":["You"]},{"Key":"out. You","Fragments":["may"]},{"Key":"also like","Fragments":["to","how","the","the","how"]},{"Key":"about std::isspace(...)","Fragments":["as"]},{"Key":"std::isspace(...) as","Fragments":["something"]},{"Key":"something you","Fragments":["can"]},{"Key":"use instead","Fragments":["of"]},{"Key":"of `ch","Fragments":["=="]},{"Key":"`ch ==","Fragments":["'"]},{"Key":"== '","Fragments":["'`","'){"]},{"Key":"'` (it","Fragments":["will"]},{"Key":"(it will","Fragments":["also"]},{"Key":"also detect","Fragments":["tabs,"]},{"Key":"detect tabs,","Fragments":["newlines,"]},{"Key":"tabs, newlines,","Fragments":["etc.)","line"]},{"Key":"a [link](http://en.cppreference.com/w/cpp/string/byte/isspace)","Fragments":["that"]},{"Key":"[link](http://en.cppreference.com/w/cpp/string/byte/isspace) that","Fragments":["might"]},{"Key":"might broaden","Fragments":["your"]},{"Key":"broaden your","Fragments":["knowledge"]},{"Key":"your knowledge","Fragments":["about"]},{"Key":"the isXYZ","Fragments":["functions"]},{"Key":"isXYZ functions","Fragments":["in"]},{"Key":"in `\u003ccctype\u003e`","Fragments":["/"]},{"Key":"`\u003ccctype\u003e` /","Fragments":["`\u003clocale\u003e`."]},{"Key":"every case.","Fragments":["This"]},{"Key":"case. This","Fragments":["can"]},{"Key":"can lead","Fragments":["to","to","to"]},{"Key":"to extra","Fragments":["copies"]},{"Key":"extra copies","Fragments":["that"]},{"Key":"copies that","Fragments":["you"]},{"Key":"need. When","Fragments":["you"]},{"Key":"non-trivial (pronounced:","Fragments":["anything"]},{"Key":"(pronounced: anything","Fragments":["potentially"]},{"Key":"anything potentially","Fragments":["larger"]},{"Key":"potentially larger","Fragments":["than"]},{"Key":"few machine","Fragments":["words)"]},{"Key":"machine words)","Fragments":["type"]},{"Key":"words) type","Fragments":["as"]},{"Key":"function parameter","Fragments":["and","\"which\"."]},{"Key":"don't intend","Fragments":["to"]},{"Key":"modify it,","Fragments":["said","and"]},{"Key":"it, said","Fragments":["parameter"]},{"Key":"said parameter","Fragments":["should"]},{"Key":"parameter should","Fragments":["be"]},{"Key":"be passed","Fragments":["by","to","through","as","a","by","in"]},{"Key":"reference. To","Fragments":["be"]},{"Key":"be concrete,","Fragments":["you"]},{"Key":"concrete, you","Fragments":["should"]},{"Key":"should modify","Fragments":["your"]},{"Key":"your prototypes","Fragments":["to:"]},{"Key":"bool silence(string","Fragments":["const\u0026"]},{"Key":"silence(string const\u0026","Fragments":["s);"]},{"Key":"bool isShout(string","Fragments":["const\u0026"]},{"Key":"isShout(string const\u0026","Fragments":["s);"]},{"Key":"string hey(string","Fragments":["const\u0026","words)","s)"]},{"Key":"hey(string const\u0026","Fragments":["s);"]},{"Key":"string each","Fragments":["time","time"]},{"Key":"call one","Fragments":["of"]},{"Key":"these functions.","Fragments":["If","It's"]},{"Key":"functions. If","Fragments":["this"]},{"Key":"seems mysterious,","Fragments":["you"]},{"Key":"mysterious, you","Fragments":["can"]},{"Key":"can google","Fragments":["\"cpp"]},{"Key":"google \"cpp","Fragments":["faq"]},{"Key":"\"cpp faq","Fragments":["lite"]},{"Key":"faq lite","Fragments":["references\""]},{"Key":"lite references\"","Fragments":["to"]},{"Key":"references\" to","Fragments":["learn"]},{"Key":"about pass","Fragments":["by"]},{"Key":"value /","Fragments":["pass"]},{"Key":"/ pass","Fragments":["by"]},{"Key":"actually checked","Fragments":["if"]},{"Key":"checked if","Fragments":["it"]},{"Key":"given tests?","Fragments":["I"]},{"Key":"tests? I","Fragments":["see","though","thought"]},{"Key":"see two","Fragments":["issues"]},{"Key":"issues here","Fragments":["(but"]},{"Key":"here (but","Fragments":["I"]},{"Key":"can't test","Fragments":["it"]},{"Key":"it myself,","Fragments":["sadly."]},{"Key":"myself, sadly.","Fragments":["boost"]},{"Key":"sadly. boost","Fragments":["isn't"]},{"Key":"boost isn't","Fragments":["installed)."]},{"Key":"You require","Fragments":["a"]},{"Key":"a string\u0026","Fragments":["to"]},{"Key":"string\u0026 to","Fragments":["be"]},{"Key":"to words().","Fragments":["But"]},{"Key":"words(). But","Fragments":["the"]},{"Key":"cases only","Fragments":["pass"]},{"Key":"a char*.","Fragments":["Imo"]},{"Key":"char*. Imo","Fragments":["this"]},{"Key":"Imo this","Fragments":["function"]},{"Key":"should pass-by-value","Fragments":["so"]},{"Key":"pass-by-value so","Fragments":["passing"]},{"Key":"so passing","Fragments":["a"]},{"Key":"a char*","Fragments":["works."]},{"Key":"2) Afaik,","Fragments":["boost::tokenizer"]},{"Key":"Afaik, boost::tokenizer","Fragments":["only"]},{"Key":"boost::tokenizer only","Fragments":["splits"]},{"Key":"only splits","Fragments":["at"]},{"Key":"splits at","Fragments":["whitespaces"]},{"Key":"at whitespaces","Fragments":["(spaces,"]},{"Key":"whitespaces (spaces,","Fragments":["tabs,"]},{"Key":"(spaces, tabs,","Fragments":["newlines)"]},{"Key":"tabs, newlines)","Fragments":["but"]},{"Key":"newlines) but","Fragments":["the"]},{"Key":"exercise requires","Fragments":["that"]},{"Key":"requires that","Fragments":["you","the","its"]},{"Key":"you ignore","Fragments":["special"]},{"Key":"ignore special","Fragments":["characters"]},{"Key":"special characters","Fragments":["like"]},{"Key":"characters like","Fragments":[";","'###$!!\""]},{"Key":"like ;","Fragments":["."]},{"Key":"; .","Fragments":["/"]},{"Key":". /","Fragments":["@."]},{"Key":"/ @.","Fragments":["The"]},{"Key":"@. The","Fragments":["string"]},{"Key":"string \"one,","Fragments":["two,"]},{"Key":"\"one, two,","Fragments":["three\""]},{"Key":"two, three\"","Fragments":["would"]},{"Key":"three\" would","Fragments":["be"]},{"Key":"be tokenized","Fragments":["into"]},{"Key":"tokenized into","Fragments":["\"one,\""]},{"Key":"into \"one,\"","Fragments":["\"two,\""]},{"Key":"\"one,\" \"two,\"","Fragments":["\"three\","]},{"Key":"\"two,\" \"three\",","Fragments":["instead"]},{"Key":"\"three\", instead","Fragments":["of"]},{"Key":"of \"one\"","Fragments":["\"two\""]},{"Key":"\"one\" \"two\"","Fragments":["\"three\""]},{"Key":"\"two\" \"three\"","Fragments":["(note"]},{"Key":"\"three\" (note","Fragments":["the"]},{"Key":"(note the","Fragments":["missing"]},{"Key":"missing commas).","Fragments":["You"]},{"Key":"commas). You","Fragments":["need"]},{"Key":"You need","Fragments":["to","files","to","to","to"]},{"Key":"a delimited","Fragments":["to"]},{"Key":"delimited to","Fragments":["tokenizer()."]},{"Key":"have time","Fragments":["to"]},{"Key":"boost here,","Fragments":["so"]},{"Key":"here, so","Fragments":["I"]},{"Key":"approach (less","Fragments":["code"]},{"Key":"(less code","Fragments":["is"]},{"Key":"better code!).","Fragments":["I"]},{"Key":"code!). I","Fragments":["also"]},{"Key":"how your","Fragments":["solution","Bob","test"]},{"Key":"is padding","Fragments":["before"]},{"Key":"padding before","Fragments":["or"]},{"Key":"string (even","Fragments":["though"]},{"Key":"though this","Fragments":["was","\"works.\""]},{"Key":"really gain","Fragments":["anything"]},{"Key":"anything here","Fragments":["by"]},{"Key":"here by","Fragments":["making"]},{"Key":"making bob","Fragments":["a"]},{"Key":"or adding","Fragments":["a"]},{"Key":"a constructor/destructor","Fragments":["definition."]},{"Key":"constructor/destructor definition.","Fragments":["You"]},{"Key":"definition. You","Fragments":["could"]},{"Key":"or removed","Fragments":["the"]},{"Key":"the unreferenced","Fragments":["functions."]},{"Key":"bet you","Fragments":["used"]},{"Key":"used iostream","Fragments":["for"]},{"Key":"iostream for","Fragments":["debugging,"]},{"Key":"for debugging,","Fragments":["but"]},{"Key":"debugging, but","Fragments":["you"]},{"Key":"actually use","Fragments":["it"]},{"Key":"the production","Fragments":["code"]},{"Key":"code -","Fragments":["you"]},{"Key":"you cold","Fragments":["remove"]},{"Key":"cold remove","Fragments":["the"]},{"Key":"3) In","Fragments":["general"]},{"Key":"general there","Fragments":["is"]},{"Key":"copying that","Fragments":["could"]},{"Key":"performance concern","Fragments":["if"]},{"Key":"concern if","Fragments":["this"]},{"Key":"an inner","Fragments":["loop."]},{"Key":"inner loop.","Fragments":["For"]},{"Key":"loop. For","Fragments":["instance,"]},{"Key":"instance, the","Fragments":["spacesremoved.erase"]},{"Key":"the spacesremoved.erase","Fragments":["method"]},{"Key":"spacesremoved.erase method","Fragments":["will"]},{"Key":"method will","Fragments":["end"]},{"Key":"up copying","Fragments":["the"]},{"Key":"buffer each","Fragments":["time"]},{"Key":"time (O(n^2)).","Fragments":["An"]},{"Key":"(O(n^2)). An","Fragments":["alternative"]},{"Key":"alternative would","Fragments":["be"]},{"Key":"start index","Fragments":["to"]},{"Key":"index to","Fragments":["search","make"]},{"Key":"search in","Fragments":["the"]},{"Key":"string, updating","Fragments":["each"]},{"Key":"updating each","Fragments":["time."]},{"Key":"4) Also,","Fragments":["you"]},{"Key":"are passing","Fragments":["the","str","the"]},{"Key":"value -","Fragments":["passing","you"]},{"Key":"- passing","Fragments":["by"]},{"Key":"5) You","Fragments":["could"]},{"Key":"potentially reduce","Fragments":["the"]},{"Key":"you spend","Fragments":["passing"]},{"Key":"spend passing","Fragments":["through"]},{"Key":"passing through","Fragments":["the"]},{"Key":"separating the","Fragments":["checks"]},{"Key":"for hasAlpha","Fragments":["and"]},{"Key":"hasAlpha and","Fragments":["isYelling"]},{"Key":"and isYelling","Fragments":["into","functions,"]},{"Key":"isYelling into","Fragments":["separate"]},{"Key":"separate loops","Fragments":["(ie"]},{"Key":"loops (ie","Fragments":["if"]},{"Key":"(ie if","Fragments":["you"]},{"Key":"set hasAlpha=true","Fragments":["you"]},{"Key":"hasAlpha=true you","Fragments":["never"]},{"Key":"it again;","Fragments":["likewise"]},{"Key":"again; likewise","Fragments":["with"]},{"Key":"likewise with","Fragments":["isYelling.)"]},{"Key":"if hasAlpha=false,","Fragments":["isYelling=false"]},{"Key":"hasAlpha=false, isYelling=false","Fragments":["and"]},{"Key":"isYelling=false and","Fragments":["you"]},{"Key":"might like","Fragments":["to","to"]},{"Key":"in [``\u003clocale\u003e``](http://en.cppreference.com/w/cpp/header/locale)","Fragments":["or"]},{"Key":"[``\u003clocale\u003e``](http://en.cppreference.com/w/cpp/header/locale) or","Fragments":["at"]},{"Key":"you break","Fragments":["the"]},{"Key":"break the","Fragments":["problem","loop"]},{"Key":"problem down","Fragments":["into"]},{"Key":"down into","Fragments":["something"]},{"Key":"into something","Fragments":["that"]},{"Key":"to (potentially)","Fragments":["scan","optimize"]},{"Key":"(potentially) scan","Fragments":["the"]},{"Key":"string more","Fragments":["than","times"]},{"Key":"a full","Fragments":["blown","version","description"]},{"Key":"full blown","Fragments":["class."]},{"Key":"blown class.","Fragments":["Intermediate"]},{"Key":"class. Intermediate","Fragments":["categorization"]},{"Key":"Intermediate categorization","Fragments":["with"]},{"Key":"categorization with","Fragments":["enums"]},{"Key":"with enums","Fragments":["is"]},{"Key":"enums is","Fragments":["not"]},{"Key":" Testing","Fragments":["exercism!","agains"]},{"Key":"Testing exercism!","Fragments":["It"]},{"Key":"exercism! It","Fragments":["is"]},{"Key":"took any1's","Fragments":["advice"]},{"Key":"any1's advice","Fragments":["and"]},{"Key":"comments with","Fragments":["sensibly-named"]},{"Key":"with sensibly-named","Fragments":["functions."]},{"Key":"sensibly-named functions.","Fragments":["I"]},{"Key":"look more","Fragments":["concise,"]},{"Key":"more concise,","Fragments":["and"]},{"Key":"hopefully prevents","Fragments":["the"]},{"Key":"the TL;DR","Fragments":["effect"]},{"Key":"TL;DR effect","Fragments":[":)"]},{"Key":"and contain","Fragments":["all"]},{"Key":"contain all","Fragments":["the"]},{"Key":"characters. Whether","Fragments":["they're"]},{"Key":"Whether they're","Fragments":["in"]},{"Key":"they're in","Fragments":["a"]},{"Key":"dictionary is","Fragments":["beside"]},{"Key":"is beside","Fragments":["the"]},{"Key":"you converted","Fragments":["the"]},{"Key":"converted the","Fragments":["input"]},{"Key":"all caps","Fragments":["and","words","function","ending"]},{"Key":"caps and","Fragments":["then"]},{"Key":"then compared","Fragments":["that"]},{"Key":"compared that","Fragments":["with"]},{"Key":"a non-alpha","Fragments":["input"]},{"Key":"non-alpha input","Fragments":["in"]},{"Key":"input in","Fragments":["a","your","this","as","the"]},{"Key":"require typing","Fragments":["out"]},{"Key":"typing out","Fragments":["the"]},{"Key":"whole alphabet","Fragments":["twice."]},{"Key":"alphabet twice.","Fragments":["Seems"]},{"Key":"twice. Seems","Fragments":["to"]},{"Key":"Seems to","Fragments":["me","do","be"]},{"Key":"like there'd","Fragments":["be"]},{"Key":"there'd be","Fragments":["a"]},{"Key":"have now","Fragments":["made"]},{"Key":"now made","Fragments":["an"]},{"Key":"made an","Fragments":["iteration"]},{"Key":"2 with","Fragments":["the"]},{"Key":"the corrections","Fragments":["you"]},{"Key":"corrections you","Fragments":["mentioned."]},{"Key":"of anything","Fragments":["simpler"]},{"Key":"anything simpler","Fragments":["to"]},{"Key":"task at","Fragments":["hand."]},{"Key":"function must","Fragments":["be"]},{"Key":"namespace called","Fragments":["bob,","`bob`"]},{"Key":"called bob,","Fragments":["or"]},{"Key":"bob, or","Fragments":["be"]},{"Key":"public function","Fragments":["in"]},{"Key":"std::string\u0026 something)","Fragments":["{","{"]},{"Key":" //code","Fragments":["here","here"]},{"Key":" or,","Fragments":["using"]},{"Key":"or, using","Fragments":["classes"]},{"Key":"static std::string","Fragments":["hey(const"]},{"Key":"Good points,","Fragments":["thanks."]},{"Key":"no private/public","Fragments":["functions"]},{"Key":"private/public functions","Fragments":["here,"]},{"Key":"functions here,","Fragments":["as"]},{"Key":"classes. hey()","Fragments":["is"]},{"Key":"is exposed","Fragments":["in"]},{"Key":"exposed in","Fragments":["namespace"]},{"Key":"namespace bob,","Fragments":["everything","which"]},{"Key":"bob, everything","Fragments":["else"]},{"Key":"namespace. Is","Fragments":["there"]},{"Key":" Wasn't","Fragments":["sure"]},{"Key":"with sentences","Fragments":["with"]},{"Key":"sentences with","Fragments":["only"]},{"Key":"numbers that","Fragments":["terminates"]},{"Key":"that terminates","Fragments":["on"]},{"Key":"terminates on","Fragments":["an"]},{"Key":"exclamation point;","Fragments":["decided"]},{"Key":"point; decided","Fragments":["to"]},{"Key":"to interpret","Fragments":["as"]},{"Key":"interpret as","Fragments":["'talking"]},{"Key":"as 'talking","Fragments":["forcefully'"]},{"Key":"'talking forcefully'","Fragments":["(as"]},{"Key":"forcefully' (as","Fragments":["in"]},{"Key":"makes pretty","Fragments":["heavy","heavy"]},{"Key":"pretty heavy","Fragments":["use","use"]},{"Key":"simple program,","Fragments":["maybe","maybe"]},{"Key":"program, maybe","Fragments":["too","too"]},{"Key":"maybe too","Fragments":["much.","much."]},{"Key":"too much.","Fragments":["But","But"]},{"Key":"much. But","Fragments":["I","I"]},{"Key":"short it","Fragments":["makes","makes"]},{"Key":" Elected","Fragments":["to","to"]},{"Key":"Elected to","Fragments":["break","break"]},{"Key":"break contains_alpha()","Fragments":["into","into"]},{"Key":"contains_alpha() into","Fragments":["a","a"]},{"Key":"function because","Fragments":["it","it","that's","I"]},{"Key":"line too","Fragments":["long","long"]},{"Key":"and \"contains_alpha\"","Fragments":["helps","helps"]},{"Key":"\"contains_alpha\" helps","Fragments":["indicate","indicate"]},{"Key":"helps indicate","Fragments":["what","what"]},{"Key":"indicate what","Fragments":["we're","we're"]},{"Key":"what we're","Fragments":["doing","doing"]},{"Key":"we're doing","Fragments":["there.","there."]},{"Key":"I figured","Fragments":["trimming","trimming","a","that","a","the"]},{"Key":"figured trimming","Fragments":["whitespace","whitespace"]},{"Key":"trimming whitespace","Fragments":["from","from"]},{"Key":"whitespace from","Fragments":["the","the","the","the"]},{"Key":"the ends","Fragments":["in","in"]},{"Key":"beginning would","Fragments":["make","make"]},{"Key":"Would be","Fragments":["interested","interested"]},{"Key":"interested to","Fragments":["know","know","know.","see"]},{"Key":"missed any","Fragments":["edge","edge"]},{"Key":"any edge","Fragments":["cases.","cases."]},{"Key":"Looks pretty","Fragments":["good.","good.","good,"]},{"Key":"good. How","Fragments":["should"]},{"Key":"How should","Fragments":["space"]},{"Key":"should space","Fragments":["after"]},{"Key":"space after","Fragments":["the","that","a","an"]},{"Key":"mark be","Fragments":["handled?"]},{"Key":"be handled?","Fragments":["This"]},{"Key":"handled? This","Fragments":["is"]},{"Key":"arguably open","Fragments":["to"]},{"Key":"open to","Fragments":["interpretation","any"]},{"Key":"to interpretation","Fragments":["but"]},{"Key":"interpretation but","Fragments":["IMO"]},{"Key":"but IMO","Fragments":["it"]},{"Key":"IMO it","Fragments":["makes"]},{"Key":"consider that","Fragments":["a","a","those","pow(2,","this"]},{"Key":"is tested,","Fragments":["and"]},{"Key":"tested, and","Fragments":["passes"]},{"Key":" Apparently,","Fragments":["const"]},{"Key":"Apparently, const","Fragments":["char"]},{"Key":"* converts","Fragments":["to"]},{"Key":"yeah, boost::tokenizer","Fragments":["DTRT"]},{"Key":"boost::tokenizer DTRT","Fragments":["here."]},{"Key":"Iteration 2:","Fragments":["added"]},{"Key":"2: added","Fragments":["contents"]},{"Key":"added contents","Fragments":["of"]},{"Key":"of bob.h","Fragments":["since"]},{"Key":"bob.h since","Fragments":["the"]},{"Key":"file can't","Fragments":["be"]},{"Key":"included separately","Fragments":["yet."]},{"Key":" bob::hey","Fragments":["doesn't"]},{"Key":"bob::hey doesn't","Fragments":["need"]},{"Key":"a const.","Fragments":["Since","Thanks"]},{"Key":"const. Since","Fragments":["you"]},{"Key":"copy, you","Fragments":["don't"]},{"Key":"qualifier. On","Fragments":["the"]},{"Key":"hand, you","Fragments":["should"]},{"Key":"as argument","Fragments":["a"]},{"Key":"argument a","Fragments":["const"]},{"Key":"a useless","Fragments":["copy."]},{"Key":" Inital","Fragments":["version"]},{"Key":"Inital version","Fragments":["was"]},{"Key":"version was","Fragments":["consisted"]},{"Key":"was consisted","Fragments":["of"]},{"Key":"class, after","Fragments":["seeing"]},{"Key":"after seeing","Fragments":["other","some"]},{"Key":"seeing other","Fragments":["submissions"]},{"Key":"submissions I","Fragments":["switched"]},{"Key":"I switched","Fragments":["to"]},{"Key":"namespace. As","Fragments":["the"]},{"Key":"As the","Fragments":["task"]},{"Key":"task is","Fragments":["quite"]},{"Key":"quite simple","Fragments":["i","and"]},{"Key":"simple i","Fragments":["just"]},{"Key":"used one","Fragments":["\"big\""]},{"Key":"one \"big\"","Fragments":["method"]},{"Key":"\"big\" method","Fragments":["instead"]},{"Key":"prefer std::algorithms.","Fragments":["Here"]},{"Key":"std::algorithms. Here","Fragments":["the"]},{"Key":"for yelling","Fragments":["could"]},{"Key":"yelling could","Fragments":["be"]},{"Key":"the std::any_of,","Fragments":["but"]},{"Key":"std::any_of, but","Fragments":["it"]},{"Key":"more logical","Fragments":["to","using"]},{"Key":"logical to","Fragments":["me"]},{"Key":"In retrospect,","Fragments":["maybe"]},{"Key":"retrospect, maybe","Fragments":["I"]},{"Key":"question first","Fragments":["since"]},{"Key":"first since","Fragments":["its"]},{"Key":"its a","Fragments":["lot"]},{"Key":"great, very","Fragments":["fast.","readable"]},{"Key":"very fast.","Fragments":["Two"]},{"Key":"fast. Two","Fragments":["very"]},{"Key":"Two very","Fragments":["minor"]},{"Key":"for spaces","Fragments":["at","at","after","and"]},{"Key":") You","Fragments":["could"]},{"Key":"auto\u0026 value","Fragments":[":"]},{"Key":"put `std::string","Fragments":["word"]},{"Key":"`std::string word","Fragments":["=","="]},{"Key":"= rit-\u003estr();`","Fragments":["and"]},{"Key":"rit-\u003estr();` and","Fragments":["`++rit;`"]},{"Key":"and `++rit;`","Fragments":["into"]},{"Key":"`++rit;` into","Fragments":["`std::string"]},{"Key":"into `std::string","Fragments":["word"]},{"Key":"= rit++-\u003estr();`","Fragments":["but"]},{"Key":"rit++-\u003estr();` but","Fragments":["that's"]},{"Key":"that's less","Fragments":["readable"]},{"Key":"less readable","Fragments":["in","and","than"]},{"Key":"The transform","Fragments":["way"]},{"Key":"transform way","Fragments":["is"]},{"Key":"of cool,","Fragments":["although"]},{"Key":"cool, although","Fragments":["it"]},{"Key":"more writes","Fragments":["than"]},{"Key":"writes than","Fragments":["necessary."]},{"Key":"end before","Fragments":["checking"]},{"Key":"before checking","Fragments":["the","for","for","for"]},{"Key":"The has_only_digits","Fragments":["is"]},{"Key":"has_only_digits is","Fragments":["kind"]},{"Key":"of inflexible.","Fragments":["What"]},{"Key":"inflexible. What","Fragments":["if"]},{"Key":"'?' at","Fragments":["the"]},{"Key":"string. Otherwise,","Fragments":["looks"]},{"Key":"not recommend","Fragments":["checking"]},{"Key":"recommend checking","Fragments":["for","out"]},{"Key":"for \"HELL\"","Fragments":["in"]},{"Key":"\"HELL\" in","Fragments":["the"]},{"Key":"string. Why","Fragments":["not","not"]},{"Key":"all uppercase","Fragments":["letters?"]},{"Key":"uppercase letters?","Fragments":["That"]},{"Key":"letters? That","Fragments":["usually"]},{"Key":"That usually","Fragments":["means"]},{"Key":"usually means","Fragments":["yelling"]},{"Key":"means yelling","Fragments":["in"]},{"Key":"yelling in","Fragments":["text."]},{"Key":"of abusing","Fragments":["`std::mismatch`,"]},{"Key":"abusing `std::mismatch`,","Fragments":["using"]},{"Key":"`std::mismatch`, using","Fragments":["`std::for_each`"]},{"Key":"using `std::for_each`","Fragments":["and"]},{"Key":"`std::for_each` and","Fragments":["`boost::make_zip_iterator`"]},{"Key":"and `boost::make_zip_iterator`","Fragments":["is"]},{"Key":"`boost::make_zip_iterator` is","Fragments":["semantically"]},{"Key":"is semantically","Fragments":["more"]},{"Key":"semantically more","Fragments":["clear","\"spot"]},{"Key":"clear but","Fragments":["I"]},{"Key":"to such","Fragments":["a"]},{"Key":"a degree","Fragments":["that"]},{"Key":"degree that","Fragments":["it"]},{"Key":"it justifies","Fragments":["including"]},{"Key":"justifies including","Fragments":["boost"]},{"Key":"including boost","Fragments":["just"]},{"Key":"boost just","Fragments":["for"]},{"Key":" edit:","Fragments":["nvm,","Oh!"]},{"Key":"edit: nvm,","Fragments":["just"]},{"Key":"nvm, just","Fragments":["saw"]},{"Key":"that `boost::for_each`","Fragments":["can"]},{"Key":"`boost::for_each` can","Fragments":["take"]},{"Key":"multiple ranges,","Fragments":["seem"]},{"Key":"ranges, seem","Fragments":["like"]},{"Key":"like that's","Fragments":["practically"]},{"Key":"that's practically","Fragments":["tailor"]},{"Key":"practically tailor","Fragments":["made"]},{"Key":"tailor made","Fragments":["for"]},{"Key":"made for","Fragments":["this,"]},{"Key":"the breakdown","Fragments":["into"]},{"Key":"breakdown into","Fragments":["multiple"]},{"Key":"multiple small","Fragments":["functions."]},{"Key":"you taken","Fragments":["a"]},{"Key":"taken a","Fragments":["look"]},{"Key":"at [`find_first_of`](http://www.cplusplus.com/reference/string/string/find_first_of/)?","Fragments":["This"]},{"Key":"[`find_first_of`](http://www.cplusplus.com/reference/string/string/find_first_of/)? This","Fragments":["might"]},{"Key":"make `isYell`","Fragments":["and"]},{"Key":"`isYell` and","Fragments":["`isSilence`"]},{"Key":" Alrighty","Fragments":["then."]},{"Key":"conversion to","Fragments":["string\u0026"]},{"Key":"to string\u0026","Fragments":["boggles"]},{"Key":"string\u0026 boggles","Fragments":["my"]},{"Key":"boggles my","Fragments":["mind"]},{"Key":"mind because","Fragments":["I"]},{"Key":"could've sworn","Fragments":["that"]},{"Key":"sworn that","Fragments":["I"]},{"Key":"ran into","Fragments":["this","non-alphabetical","this"]},{"Key":"into this","Fragments":["problem","simple","issue"]},{"Key":"problem a","Fragments":["long","lot."]},{"Key":"long time","Fragments":["ago.","since","to"]},{"Key":"time ago.","Fragments":["But"]},{"Key":"ago. But","Fragments":["I"]},{"Key":"now and","Fragments":["it","wanted"]},{"Key":"does indeed","Fragments":["convert"]},{"Key":"indeed convert","Fragments":["properly."]},{"Key":"convert properly.","Fragments":["So"]},{"Key":"properly. So","Fragments":["either"]},{"Key":"either my","Fragments":["memory"]},{"Key":"bad or","Fragments":["it's"]},{"Key":"or it's","Fragments":["been"]},{"Key":"relatively recent","Fragments":["addition"]},{"Key":"recent addition","Fragments":["to","to"]},{"Key":"to Cpp","Fragments":["(e.g."]},{"Key":"Cpp (e.g.","Fragments":["'11"]},{"Key":"(e.g. '11","Fragments":["or"]},{"Key":"'11 or","Fragments":["'14)."]},{"Key":"A question","Fragments":["though:"]},{"Key":"question though:","Fragments":["what"]},{"Key":"though: what","Fragments":["was"]},{"Key":"was your","Fragments":["motivation"]},{"Key":"your motivation","Fragments":["to"]},{"Key":"motivation to","Fragments":["change"]},{"Key":"change \"for","Fragments":["(char"]},{"Key":"\"for (char","Fragments":["ch"]},{"Key":"(char ch","Fragments":[":",":"]},{"Key":"ch :","Fragments":["str)\"","input)"]},{"Key":": str)\"","Fragments":["into"]},{"Key":"str)\" into","Fragments":["a"]},{"Key":"a std::for_each()","Fragments":["call"]},{"Key":"std::for_each() call","Fragments":["in"]},{"Key":"call in","Fragments":["GetCharMap?"]},{"Key":"of preference,","Fragments":["but"]},{"Key":"preference, but","Fragments":["I"]},{"Key":"love the","Fragments":["for","simplicity","use","OOP"]},{"Key":"type begin()","Fragments":["and"]},{"Key":"end() every","Fragments":["damn"]},{"Key":"every damn","Fragments":["time."]},{"Key":"have problem","Fragments":["if"]},{"Key":"white spaces","Fragments":["is","and"]},{"Key":"spaces is","Fragments":["passed."]},{"Key":"is passed.","Fragments":["However,"]},{"Key":"passed. However,","Fragments":["I"]},{"Key":"more checks","Fragments":["for"]},{"Key":"special situations,","Fragments":["I'd"]},{"Key":"situations, I'd","Fragments":["just"]},{"Key":"just prefer","Fragments":["something"]},{"Key":"prefer something","Fragments":["more"]},{"Key":"more robust.","Fragments":["Any"]},{"Key":"robust. Any","Fragments":["ideas?"]},{"Key":"actually also","Fragments":["like"]},{"Key":"loop alot","Fragments":["more"]},{"Key":"alot more","Fragments":["than"]},{"Key":"than for_each.","Fragments":["I"]},{"Key":"for_each. I","Fragments":["just"]},{"Key":"this new","Fragments":["way","word"]},{"Key":"new way","Fragments":["of"]},{"Key":"not imagine","Fragments":["using"]},{"Key":"imagine using","Fragments":["much"]},{"Key":"using much","Fragments":["of"]},{"Key":"of \"algorithm\"","Fragments":["in","is"]},{"Key":"\"algorithm\" in","Fragments":["my"]},{"Key":"own projects.","Fragments":["But"]},{"Key":"projects. But","Fragments":["I"]},{"Key":"how spread","Fragments":["the"]},{"Key":"spread the","Fragments":["use"]},{"Key":"\"algorithm\" is","Fragments":["in"]},{"Key":"in professional","Fragments":["use?"]},{"Key":"(I pushed","Fragments":["a"]},{"Key":"pushed a","Fragments":["third"]},{"Key":"third submission","Fragments":["with"]},{"Key":"submission with","Fragments":["header","the"]},{"Key":"with header","Fragments":["guards"]},{"Key":"and cleaner","Fragments":["isSilence)"]},{"Key":"how `find_first_of`","Fragments":["could"]},{"Key":"`find_first_of` could","Fragments":["help"]},{"Key":"could help","Fragments":["me"]},{"Key":"The isSilence","Fragments":["could"]},{"Key":"isSilence could","Fragments":["be","have"]},{"Key":"return query.find_first_not_of(","Fragments":["\""]},{"Key":"query.find_first_not_of( \"","Fragments":["\\t\\n\""]},{"Key":"\" \\t\\n\"","Fragments":[")"]},{"Key":"\\t\\n\" )","Fragments":["=="]},{"Key":") ==","Fragments":["std::string::npos;","std::string::npos;"]},{"Key":"this set","Fragments":["of"]},{"Key":"with `isYell`","Fragments":["pretty"]},{"Key":"`isYell` pretty","Fragments":["much"]},{"Key":"much turned","Fragments":["out"]},{"Key":"out like","Fragments":["this:"]},{"Key":"char* lower","Fragments":["="]},{"Key":"lower =","Fragments":["\"abcdefghijklmnopqrstuvwxyz\";"]},{"Key":"char* upper","Fragments":["="]},{"Key":"return query.find_first_of(","Fragments":["upper"]},{"Key":"query.find_first_of( upper","Fragments":[")"]},{"Key":"upper )","Fragments":["!="]},{"Key":") !=","Fragments":["std::string::npos"]},{"Key":"!= std::string::npos","Fragments":["\u0026\u0026"]},{"Key":" query.find_first_of(","Fragments":["lower"]},{"Key":"query.find_first_of( lower","Fragments":[")"]},{"Key":"lower )","Fragments":["=="]},{"Key":"to ascertain","Fragments":["the"]},{"Key":"ascertain the","Fragments":["existence"]},{"Key":"the existence","Fragments":["of","of"]},{"Key":"one upper-case","Fragments":["letter"]},{"Key":"upper-case letter","Fragments":["as"]},{"Key":"letter as","Fragments":["well"]},{"Key":"as making","Fragments":["sure","functions"]},{"Key":"making sure","Fragments":["there","the"]},{"Key":"lower-case letters.","Fragments":["So",":)"]},{"Key":"letters. So","Fragments":["I"]},{"Key":"two separate","Fragments":["function"]},{"Key":"calls one","Fragments":["way"]},{"Key":"or another","Fragments":["(unless"]},{"Key":"another (unless","Fragments":["I"]},{"Key":"(unless I","Fragments":["write"]},{"Key":"loop myself).","Fragments":["And"]},{"Key":"myself). And","Fragments":["with"]},{"Key":"with `find_first_of`I","Fragments":["just"]},{"Key":"`find_first_of`I just","Fragments":["find"]},{"Key":"just find","Fragments":["myself"]},{"Key":"find myself","Fragments":["explicitely"]},{"Key":"myself explicitely","Fragments":["writing"]},{"Key":"explicitely writing","Fragments":["out"]},{"Key":"what `islower`","Fragments":["and"]},{"Key":"`islower` and","Fragments":["`isupper`"]},{"Key":"and `isupper`","Fragments":["already"]},{"Key":"`isupper` already","Fragments":["do"]},{"Key":"way, how","Fragments":["can"]},{"Key":"a link","Fragments":["in","about","to"]},{"Key":"link in","Fragments":["`this"]},{"Key":"in `this","Fragments":["kind"]},{"Key":"`this kind","Fragments":["of"]},{"Key":"of text`","Fragments":["like"]},{"Key":"text` like","Fragments":["you've"]},{"Key":"the `find_first_of`","Fragments":["link"]},{"Key":"`find_first_of` link","Fragments":["to"]},{"Key":"to cplusplus?","Fragments":["`[the"]},{"Key":"cplusplus? `[the","Fragments":["usual"]},{"Key":"`[the usual","Fragments":["way](doesn't"]},{"Key":"usual way](doesn't","Fragments":["work)`."]},{"Key":"1. Make","Fragments":["text"]},{"Key":"Make text","Fragments":["contain"]},{"Key":"text contain","Fragments":["lowered"]},{"Key":"contain lowered","Fragments":["characters"]},{"Key":"2. Apply","Fragments":["regular"]},{"Key":"Apply regular","Fragments":["expression"]},{"Key":"3. Find","Fragments":["word"]},{"Key":"Find word","Fragments":["in"]},{"Key":"in map","Fragments":["and","already?"]},{"Key":"- increment","Fragments":["its"]},{"Key":"increment its","Fragments":["counter","count."]},{"Key":"its counter","Fragments":["by"]},{"Key":"counter by","Fragments":["1"]},{"Key":"1 if","Fragments":["key","it's","the"]},{"Key":"if key","Fragments":["already"]},{"Key":"key already","Fragments":["exist","exists."]},{"Key":"or insert","Fragments":["this"]},{"Key":"insert this","Fragments":["new"]},{"Key":"word with","Fragments":["paired","each","whitespace"]},{"Key":"with paired","Fragments":["value"]},{"Key":"paired value","Fragments":["of"]},{"Key":"you much","Fragments":["about"]},{"Key":"about its","Fragments":["professional","functionality."]},{"Key":"its professional","Fragments":["use"]},{"Key":"professional use","Fragments":["since"]},{"Key":"use since","Fragments":["most"]},{"Key":"since most","Fragments":["large"]},{"Key":"most large","Fragments":["code"]},{"Key":"large code","Fragments":["bases"]},{"Key":"code bases","Fragments":["I've","were"]},{"Key":"bases I've","Fragments":["looked"]},{"Key":"I've looked","Fragments":["at"]},{"Key":"at are","Fragments":["either"]},{"Key":"either mostly","Fragments":["or"]},{"Key":"mostly or","Fragments":["completely"]},{"Key":"or completely","Fragments":["in"]},{"Key":"completely in","Fragments":["C"]},{"Key":"C or","Fragments":["do"]},{"Key":"use C++'s","Fragments":["standard","regex"]},{"Key":"C++'s standard","Fragments":["library."]},{"Key":"necessarily an","Fragments":["accurate"]},{"Key":"an accurate","Fragments":["depiction"]},{"Key":"accurate depiction","Fragments":["is"]},{"Key":"depiction is","Fragments":["reality."]},{"Key":"is reality.","Fragments":["Most"]},{"Key":"reality. Most","Fragments":["of"]},{"Key":"these code","Fragments":["bases"]},{"Key":"bases were","Fragments":["started"]},{"Key":"were started","Fragments":["before"]},{"Key":"started before","Fragments":["the"]},{"Key":"the advent","Fragments":["of"]},{"Key":"advent of","Fragments":["C++11"]},{"Key":"more modern","Fragments":["compilers."]},{"Key":"be highly","Fragments":["appreciated"]},{"Key":"highly appreciated","Fragments":["in"]},{"Key":"appreciated in","Fragments":["academic"]},{"Key":"in academic","Fragments":["circles."]},{"Key":"academic circles.","Fragments":["For"]},{"Key":"circles. For","Fragments":["example,"]},{"Key":"example, you","Fragments":["have"]},{"Key":"have authors","Fragments":["like"]},{"Key":"authors like","Fragments":["Josuttis"]},{"Key":"like Josuttis","Fragments":["or"]},{"Key":"Josuttis or","Fragments":["Meyers"]},{"Key":"or Meyers","Fragments":["writing"]},{"Key":"Meyers writing","Fragments":["whole"]},{"Key":"writing whole","Fragments":["books"]},{"Key":"books about","Fragments":["the"]},{"Key":"STL and","Fragments":["make","one"]},{"Key":"make great","Fragments":["use"]},{"Key":"its algorithm","Fragments":["part."]},{"Key":"algorithm part.","Fragments":["[Here](http://www.josuttis.com/libbook/algolist.pdf)"]},{"Key":"part. [Here](http://www.josuttis.com/libbook/algolist.pdf)","Fragments":["is"]},{"Key":"[Here](http://www.josuttis.com/libbook/algolist.pdf) is","Fragments":["Meyer's"]},{"Key":"is Meyer's","Fragments":["reference"]},{"Key":"Meyer's reference","Fragments":["card"]},{"Key":"reference card","Fragments":["for"]},{"Key":"card for","Fragments":["algorithm,"]},{"Key":"for algorithm,","Fragments":["by"]},{"Key":"algorithm, by","Fragments":["the"]},{"Key":" Personally,","Fragments":["I","I"]},{"Key":"Personally, I","Fragments":["love","wouldn't"]},{"Key":"love it.","Fragments":["I've"]},{"Key":"it. I've","Fragments":["revisited"]},{"Key":"I've revisited","Fragments":["some"]},{"Key":"revisited some","Fragments":["older"]},{"Key":"older code","Fragments":["and"]},{"Key":"looked for","Fragments":["places"]},{"Key":"for places","Fragments":["to"]},{"Key":"places to","Fragments":["replace"]},{"Key":"replace my","Fragments":["handwritten"]},{"Key":"my handwritten","Fragments":["code","stuff"]},{"Key":"handwritten code","Fragments":["with"]},{"Key":"with algorithm","Fragments":["calls."]},{"Key":"algorithm calls.","Fragments":["They're"]},{"Key":"calls. They're","Fragments":["usually"]},{"Key":"They're usually","Fragments":["faster,"]},{"Key":"usually faster,","Fragments":["smaller"]},{"Key":"faster, smaller","Fragments":["and"]},{"Key":"concise. And","Fragments":["they're"]},{"Key":"And they're","Fragments":["pretty"]},{"Key":"much guarenteed","Fragments":["to"]},{"Key":"guarenteed to","Fragments":["be"]},{"Key":"be free","Fragments":["of"]},{"Key":"free of","Fragments":["bugs","heap"]},{"Key":"of bugs","Fragments":["-"]},{"Key":"bugs -","Fragments":["unless"]},{"Key":"- unless","Fragments":["my"]},{"Key":"unless my","Fragments":["handwritten"]},{"Key":"handwritten stuff","Fragments":[":)"]},{"Key":"I'm only","Fragments":["learning"]},{"Key":"only learning","Fragments":["the"]},{"Key":"the ways","Fragments":["of","you"]},{"Key":"algorithms myself.","Fragments":["[Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)"]},{"Key":"myself. [Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)","Fragments":["is"]},{"Key":"[Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1) is","Fragments":["my"]},{"Key":"the Bob","Fragments":["exercise,","question,","class."]},{"Key":"Bob exercise,","Fragments":["I"]},{"Key":"and verbosity","Fragments":["of"]},{"Key":"it. A","Fragments":["line"]},{"Key":"A line","Fragments":["such"]},{"Key":"line such","Fragments":["as"]},{"Key":"as `any_of(str.begin(),","Fragments":["str.end(),"]},{"Key":"`any_of(str.begin(), str.end(),","Fragments":["isupper)`"]},{"Key":"str.end(), isupper)`","Fragments":["immediately"]},{"Key":"isupper)` immediately","Fragments":["gives"]},{"Key":"immediately gives","Fragments":["you"]},{"Key":"you all","Fragments":["the","did"]},{"Key":"necessary information","Fragments":["to"]},{"Key":" Almost..","Fragments":["you"]},{"Key":"Almost.. you","Fragments":["forgot"]},{"Key":"forgot the","Fragments":["\u0026.","old,"]},{"Key":"passing str","Fragments":["by"]},{"Key":"str by","Fragments":["reference"]},{"Key":"reference (so,","Fragments":["no"]},{"Key":"(so, no","Fragments":["copy),"]},{"Key":"no copy),","Fragments":["but"]},{"Key":"copy), but","Fragments":["its"]},{"Key":"but its","Fragments":["content","also"]},{"Key":"its content","Fragments":["cannot"]},{"Key":"content cannot","Fragments":["be"]},{"Key":" @dillan:","Fragments":["Thanks!"]},{"Key":"@dillan: Thanks!","Fragments":["I"]},{"Key":"Thanks! I","Fragments":["agree"]},{"Key":"that checking","Fragments":["for"]},{"Key":"for whitespace","Fragments":["at","after","and"]},{"Key":"whitespace at","Fragments":["the"]},{"Key":"end would","Fragments":["have","probably"]},{"Key":"better -","Fragments":["I","this"]},{"Key":"only went","Fragments":["as"]},{"Key":"went as","Fragments":["far"]},{"Key":"as required","Fragments":["to"]},{"Key":"notice now","Fragments":["that"]},{"Key":"I've uploaded","Fragments":["this:"]},{"Key":"uploaded this:","Fragments":["I"]},{"Key":"this: I","Fragments":["used"]},{"Key":"used cout","Fragments":["when"]},{"Key":"cout when","Fragments":["working,"]},{"Key":"when working,","Fragments":["but"]},{"Key":"working, but","Fragments":["forgot"]},{"Key":"``` #include","Fragments":["\u003ciostream\u003e"]},{"Key":"#include \u003ciostream\u003e","Fragments":["```"]},{"Key":"\u003ciostream\u003e ```","Fragments":["when"]},{"Key":"``` when","Fragments":["I"]},{"Key":"was done.","Fragments":["bob.h"]},{"Key":"done. bob.h","Fragments":["contains:```"]},{"Key":"trailing space.","Fragments":["This"]},{"Key":"space. This","Fragments":["actually"]},{"Key":"This actually","Fragments":["fails"]},{"Key":"actually fails","Fragments":["most"]},{"Key":"fails most","Fragments":["of"]},{"Key":"in retrospect;","Fragments":["I"]},{"Key":"retrospect; I","Fragments":["goofed"]},{"Key":"I goofed","Fragments":["up"]},{"Key":"goofed up","Fragments":["in"]},{"Key":"in re-enabling","Fragments":["the"]},{"Key":"re-enabling the","Fragments":["full"]},{"Key":"full suite.","Fragments":["Will"]},{"Key":"suite. Will","Fragments":["be"]},{"Key":"Will be","Fragments":["starting"]},{"Key":"be starting","Fragments":["over"]},{"Key":"starting over","Fragments":["more"]},{"Key":"over more","Fragments":["or","lines."]},{"Key":"think regex","Fragments":["is"]},{"Key":"an overkill","Fragments":["here.","for","for"]},{"Key":"overkill here.","Fragments":["It"]},{"Key":"might work","Fragments":["but","(I"]},{"Key":"it certainly","Fragments":["could"]},{"Key":"submissions `any_of`,","Fragments":["`all_of`"]},{"Key":"`any_of`, `all_of`","Fragments":[","]},{"Key":"`all_of` ,","Fragments":["and"]},{"Key":"and `none_of`","Fragments":["seemed"]},{"Key":"`none_of` seemed","Fragments":["better."]},{"Key":" Though,","Fragments":["now"]},{"Key":"Though, now","Fragments":["I"]},{"Key":"one generic","Fragments":["function"]},{"Key":"generic function","Fragments":["that"]},{"Key":"takes regex","Fragments":["list"]},{"Key":"regex list","Fragments":["and"]},{"Key":"list and","Fragments":["if"]},{"Key":"them regex_match","Fragments":["it"]},{"Key":"regex_match it","Fragments":["returns"]},{"Key":"used ``namespace``","Fragments":["instead"]},{"Key":"``namespace`` instead","Fragments":["of"]},{"Key":"of ``class``","Fragments":["for"]},{"Key":"``class`` for","Fragments":["`bob`,"]},{"Key":"for `bob`,","Fragments":["and"]},{"Key":"`bob`, and","Fragments":["`static`"]},{"Key":"and `static`","Fragments":["inner"]},{"Key":"`static` inner","Fragments":["functions"]},{"Key":"inner functions","Fragments":["to"]},{"Key":"to prevent","Fragments":["polluting","spending","some"]},{"Key":"prevent polluting","Fragments":["global"]},{"Key":"polluting global","Fragments":["scope."]},{"Key":"global scope.","Fragments":["Not","Consider"]},{"Key":"scope. Not","Fragments":["sure"]},{"Key":"if `static`","Fragments":["is"]},{"Key":"is proper","Fragments":["and"]},{"Key":"proper and","Fragments":["safe"]},{"Key":"and safe","Fragments":["here."]},{"Key":"small thing:","Fragments":["I"]},{"Key":"thing: I","Fragments":["would"]},{"Key":"using nonmember","Fragments":["begin/end"]},{"Key":"nonmember begin/end","Fragments":["instead."]},{"Key":"begin/end instead.","Fragments":["It"]},{"Key":"instead. It","Fragments":["works"]},{"Key":"It works","Fragments":["with"]},{"Key":"more types","Fragments":["and"]},{"Key":"its good","Fragments":["to"]},{"Key":"the habit,","Fragments":["especially"]},{"Key":"habit, especially","Fragments":["since"]},{"Key":"more flexible","Fragments":["since"]},{"Key":"flexible since","Fragments":["you"]},{"Key":"implement begin/end","Fragments":["for"]},{"Key":"begin/end for","Fragments":["any"]},{"Key":"any type","Fragments":["without"]},{"Key":"type without","Fragments":["touching"]},{"Key":"without touching","Fragments":["the"]},{"Key":"touching the","Fragments":["actual","test"]},{"Key":"Also, it","Fragments":["might","will"]},{"Key":"is whitespace","Fragments":["after"]},{"Key":"whitespace after","Fragments":["the","the","the"]},{"Key":" Complete","Fragments":["rewrite","apart"]},{"Key":"Complete rewrite","Fragments":["of"]},{"Key":"rewrite of","Fragments":["the"]},{"Key":"previous attempt.","Fragments":["Less"]},{"Key":"attempt. Less","Fragments":["succinct"]},{"Key":"Less succinct","Fragments":["and"]},{"Key":"and elegant,","Fragments":["perhaps,"]},{"Key":"elegant, perhaps,","Fragments":["but"]},{"Key":"perhaps, but","Fragments":["the"]},{"Key":"concept now","Fragments":["is"]},{"Key":"build a","Fragments":["state","similar"]},{"Key":"a state","Fragments":["machine"]},{"Key":"state machine","Fragments":["and"]},{"Key":"and treat","Fragments":["Bob"]},{"Key":"treat Bob","Fragments":["as"]},{"Key":"Bob as","Fragments":["a"]},{"Key":"to parse,","Fragments":["not"]},{"Key":"parse, not","Fragments":["as"]},{"Key":"a trivial","Fragments":["coding","task,"]},{"Key":"trivial coding","Fragments":["exercise."]},{"Key":"coding exercise.","Fragments":["See"]},{"Key":"exercise. See","Fragments":["several"]},{"Key":"See several","Fragments":["dumb"]},{"Key":"several dumb","Fragments":["things"]},{"Key":"dumb things","Fragments":["now,"]},{"Key":"things now,","Fragments":["even"]},{"Key":"now, even","Fragments":["though"]},{"Key":"this \"works.\"","Fragments":["Will"]},{"Key":"\"works.\" Will","Fragments":["have"]},{"Key":"a revised","Fragments":["version"]},{"Key":"revised version","Fragments":["shortly."]},{"Key":" Same","Fragments":["as","for"]},{"Key":"Same as","Fragments":["last"]},{"Key":"as last","Fragments":["approach,"]},{"Key":"last approach,","Fragments":["without"]},{"Key":"approach, without","Fragments":["the"]},{"Key":"the redundancy.","Fragments":["Again,"]},{"Key":"redundancy. Again,","Fragments":["basic"]},{"Key":"Again, basic","Fragments":["idea"]},{"Key":"treat this","Fragments":["as"]},{"Key":"an FSM/language","Fragments":["instead"]},{"Key":"FSM/language instead","Fragments":["of"]},{"Key":"of trying","Fragments":["to"]},{"Key":"be succinct/clever.","Fragments":["Has"]},{"Key":"succinct/clever. Has","Fragments":["the"]},{"Key":"Has the","Fragments":["downside"]},{"Key":"the downside","Fragments":["of"]},{"Key":"downside of","Fragments":["potentially"]},{"Key":"of potentially","Fragments":["re-assigning"]},{"Key":"potentially re-assigning","Fragments":["the"]},{"Key":"re-assigning the","Fragments":["identical"]},{"Key":"the identical","Fragments":["state,"]},{"Key":"identical state,","Fragments":["but"]},{"Key":"state, but","Fragments":["we're"]},{"Key":"not talking","Fragments":["about"]},{"Key":"a material","Fragments":["about"]},{"Key":"material about","Fragments":["of"]},{"Key":"about of","Fragments":["overhead"]},{"Key":"overhead here,","Fragments":["and"]},{"Key":"here, and","Fragments":["I"]},{"Key":"think keeping","Fragments":["the","the"]},{"Key":"code simpler","Fragments":["is"]},{"Key":"simpler is","Fragments":["better"]},{"Key":"than trying","Fragments":["to"]},{"Key":"optimize away","Fragments":["a"]},{"Key":"away a","Fragments":["redundant"]},{"Key":" Suppose","Fragments":["I"]},{"Key":"Suppose I","Fragments":["could"]},{"Key":"an unordered_map","Fragments":["here","because"]},{"Key":"unordered_map here","Fragments":["instead,"]},{"Key":"here instead,","Fragments":["if"]},{"Key":"instead, if","Fragments":["need"]},{"Key":"if need","Fragments":["be."]},{"Key":"Added boost::trim(words)","Fragments":["to"]},{"Key":"boost::trim(words) to","Fragments":["remove"]},{"Key":"trailing white","Fragments":["spaces","space","space"]},{"Key":"a char*,","Fragments":["I"]},{"Key":"char*, I","Fragments":["used"]},{"Key":"used char","Fragments":["array"]},{"Key":"array based","Fragments":["functions"]},{"Key":"based functions","Fragments":["to"]},{"Key":"pass at","Fragments":["the"]},{"Key":"input, broadly","Fragments":["categorizing"]},{"Key":"broadly categorizing","Fragments":["questions,"]},{"Key":"categorizing questions,","Fragments":["yelled"]},{"Key":"questions, yelled","Fragments":["statements,"]},{"Key":"yelled statements,","Fragments":["and"]},{"Key":"statements, and","Fragments":["no"]},{"Key":"input by","Fragments":["looking","value","reference."]},{"Key":"second pass,","Fragments":["I"]},{"Key":"pass, I","Fragments":["looked"]},{"Key":"at whether","Fragments":["the"]},{"Key":"message has","Fragments":["mostly"]},{"Key":"has mostly","Fragments":["capital"]},{"Key":"mostly capital","Fragments":["letters,"]},{"Key":"capital letters,","Fragments":["which"]},{"Key":"letters, which","Fragments":["would"]},{"Key":"indicate a","Fragments":["yelled","`shout'."]},{"Key":"a yelled","Fragments":["statement,"]},{"Key":"yelled statement,","Fragments":["or"]},{"Key":"statement, or","Fragments":["whether"]},{"Key":"or whether","Fragments":["the"]},{"Key":"all spaces.","Fragments":["I"]},{"Key":"spaces. I","Fragments":["then"]},{"Key":"I then","Fragments":["checked","decided","took","just","put"]},{"Key":"for whether","Fragments":["the"]},{"Key":"message starts","Fragments":["with"]},{"Key":"starts with","Fragments":["\"Let's\""]},{"Key":"with \"Let's\"","Fragments":["and"]},{"Key":"\"Let's\" and","Fragments":["take"]},{"Key":"and take","Fragments":["this"]},{"Key":"mean a","Fragments":["suggestion,"]},{"Key":"a suggestion,","Fragments":["even"]},{"Key":"suggestion, even","Fragments":["if"]},{"Key":"it contradicts","Fragments":["the"]},{"Key":"contradicts the","Fragments":["previous"]},{"Key":"implementation for","Fragments":["this.","the"]},{"Key":"this. Otherwise","Fragments":["I'm"]},{"Key":"be optimized","Fragments":["as","out.","quite","out"]},{"Key":"optimized as","Fragments":["I'm"]},{"Key":"I'm certain","Fragments":["I"]},{"Key":"certain I","Fragments":["am"]},{"Key":"am iterating","Fragments":["over"]},{"Key":"string a","Fragments":["few"]},{"Key":" many","Fragments":["times"]},{"Key":"times but","Fragments":["this"]},{"Key":"readable I","Fragments":["think."]},{"Key":"learn C++11","Fragments":["I"]},{"Key":"C++11 I","Fragments":["still"]},{"Key":"still can't","Fragments":["quite"]},{"Key":"can't quite","Fragments":["find"]},{"Key":"quite find","Fragments":["a"]},{"Key":"a layout","Fragments":["for","I"]},{"Key":"layout for","Fragments":["lambdas"]},{"Key":"for lambdas","Fragments":["that"]},{"Key":"lambdas that","Fragments":["I"]},{"Key":"I like,","Fragments":["any"]},{"Key":"like, any","Fragments":["good"]},{"Key":"any good","Fragments":["ideas?"]},{"Key":"1) If","Fragments":["you"]},{"Key":"value. That","Fragments":["means"]},{"Key":"of performance","Fragments":["by"]},{"Key":"performance by","Fragments":["avoiding","eliminating"]},{"Key":"by avoiding","Fragments":["an"]},{"Key":"avoiding an","Fragments":["unnecessary"]},{"Key":" e.g.","Fragments":["for","for"]},{"Key":"e.g. for","Fragments":["your","(size_t"]},{"Key":"your IsUpper","Fragments":["function"]},{"Key":"IsUpper function","Fragments":["declare"]},{"Key":"function declare","Fragments":["it"]},{"Key":" ```bool","Fragments":["IsUpper(const"]},{"Key":"```bool IsUpper(const","Fragments":["std::string"]},{"Key":"IsUpper(const std::string","Fragments":["\u0026str)"]},{"Key":"2) Depending","Fragments":["on"]},{"Key":"Depending on","Fragments":["your"]},{"Key":"your preferences","Fragments":["you"]},{"Key":"preferences you","Fragments":["can"]},{"Key":"verbose by","Fragments":["using"]},{"Key":"in ```#\u003calgorithm\u003e```","Fragments":["rather","([see"]},{"Key":"```#\u003calgorithm\u003e``` rather","Fragments":["than"]},{"Key":"example your","Fragments":["IsEmpty"]},{"Key":"your IsEmpty","Fragments":["function"]},{"Key":"IsEmpty function","Fragments":["can"]},{"Key":" ```std::all_of(str.begin(),","Fragments":["str.end(),"]},{"Key":"```std::all_of(str.begin(), str.end(),","Fragments":["isspace);"]},{"Key":"made much","Fragments":["simpler."]},{"Key":"much simpler.","Fragments":["Could","check"]},{"Key":"simpler. Could","Fragments":["try"]},{"Key":"Could try","Fragments":["to"]},{"Key":"to transform/accumulate","Fragments":["but"]},{"Key":"transform/accumulate but","Fragments":["that"]},{"Key":"functions only","Fragments":["do"]},{"Key":"one thing.","Fragments":["They"]},{"Key":"thing. They","Fragments":["do"]},{"Key":"They do","Fragments":["only"]},{"Key":"do only","Fragments":["what"]},{"Key":"only what","Fragments":["they","was"]},{"Key":"they say","Fragments":["they","they"]},{"Key":"say they","Fragments":["do.","would*."]},{"Key":"they do.","Fragments":["The"]},{"Key":"do. The","Fragments":["names"]},{"Key":"The names","Fragments":["are","`str'"]},{"Key":"are explicit","Fragments":["and"]},{"Key":"my exercise","Fragments":["I"]},{"Key":"exercise I","Fragments":["was"]},{"Key":"bit less","Fragments":["explicit."]},{"Key":"less explicit.","Fragments":["I"]},{"Key":"explicit. I","Fragments":["just"]},{"Key":"just called","Fragments":["them"]},{"Key":"called them","Fragments":["isQuestion,"]},{"Key":"them isQuestion,","Fragments":["isShout,"]},{"Key":"isQuestion, isShout,","Fragments":["etc;"]},{"Key":"isShout, etc;","Fragments":["which"]},{"Key":"etc; which","Fragments":["is"]},{"Key":"also fine","Fragments":["because"]},{"Key":"fine because","Fragments":["they"]},{"Key":"avoid `using","Fragments":["namespace"]},{"Key":"std` because","Fragments":["it"]},{"Key":"you some","Fragments":["conflicting"]},{"Key":"some conflicting","Fragments":["types"]},{"Key":"conflicting types","Fragments":["in"]},{"Key":"in bigger","Fragments":["projects."]},{"Key":"bigger projects.","Fragments":["Here"]},{"Key":"projects. Here","Fragments":["you"]},{"Key":"use `using","Fragments":["std::string`"]},{"Key":"`using std::string`","Fragments":["instead.","within","to"]},{"Key":"std::string` instead.","Fragments":["That"]},{"Key":"instead. That","Fragments":["way","is"]},{"Key":"string arguments","Fragments":["can"]},{"Key":"arguments can","Fragments":["(and"]},{"Key":"(and should)","Fragments":["be"]},{"Key":"const references.","Fragments":["This","It's"]},{"Key":"references. This","Fragments":["avoids"]},{"Key":"This avoids","Fragments":["unnecessary","the"]},{"Key":"avoids unnecessary","Fragments":["copying/moving."]},{"Key":" put","Fragments":["it"]},{"Key":" ok","Fragments":["thanks!"]},{"Key":"use #pragma","Fragments":["once."]},{"Key":"#pragma once.","Fragments":["Up"]},{"Key":"once. Up","Fragments":["until"]},{"Key":"Up until","Fragments":["now","now"]},{"Key":"until now","Fragments":["I've","I"]},{"Key":"now I've","Fragments":["been"]},{"Key":"using include","Fragments":["guards","guards,"]},{"Key":"* instead","Fragments":["of"]},{"Key":"include guards,","Fragments":["try"]},{"Key":"guards, try","Fragments":["using"]},{"Key":"using [`#pragma","Fragments":["once`](https://en.wikipedia.org/wiki/Pragma_once)"]},{"Key":"your function:","Fragments":["you"]},{"Key":"function: you","Fragments":["should"]},{"Key":"reference, and","Fragments":["avoid"]},{"Key":"avoid it","Fragments":["be","if"]},{"Key":"be written:","Fragments":["use"]},{"Key":"written: use","Fragments":["\"std::string"]},{"Key":"use \"std::string","Fragments":["hey(const"]},{"Key":"\"std::string hey(const","Fragments":["std::string"]},{"Key":" Generally","Fragments":["speaking,"]},{"Key":"Generally speaking,","Fragments":["your"]},{"Key":"speaking, your","Fragments":["algorithm"]},{"Key":"is far","Fragments":["from"]},{"Key":"far from","Fragments":["optimal"]},{"Key":"from optimal","Fragments":["-"]},{"Key":"optimal -","Fragments":["perhaps"]},{"Key":"- perhaps","Fragments":["better"]},{"Key":"perhaps better","Fragments":["to"]},{"Key":"use \"C\"","Fragments":["in"]},{"Key":"\"C\" in","Fragments":["this"]},{"Key":"this scenario","Fragments":["since"]},{"Key":"scenario since","Fragments":["all"]},{"Key":"since all","Fragments":["strings","members"]},{"Key":"all strings","Fragments":["are"]},{"Key":"are constant.","Fragments":["More"]},{"Key":"constant. More","Fragments":["specifically:"]},{"Key":"More specifically:","Fragments":["re-constructing"]},{"Key":"specifically: re-constructing","Fragments":["the"]},{"Key":"re-constructing the","Fragments":["object"]},{"Key":"object might","Fragments":["have"]},{"Key":"have impact","Fragments":["-"]},{"Key":"impact -","Fragments":["I"]},{"Key":"guess this","Fragments":["will"]},{"Key":"will depend","Fragments":["on"]},{"Key":"to exit","Fragments":["the"]},{"Key":"loop sooner,","Fragments":["but"]},{"Key":"sooner, but","Fragments":["I"]},{"Key":"not explore","Fragments":["this"]},{"Key":"explore this","Fragments":["scenario."]},{"Key":"the specification","Fragments":["if","for"]},{"Key":"specification if","Fragments":["\"hey\""]},{"Key":"if \"hey\"","Fragments":["is"]},{"Key":"\"hey\" is","Fragments":["a"]},{"Key":"method of","Fragments":["a","simultaneously","testing"]},{"Key":"a \"bob\"","Fragments":["class,"]},{"Key":"\"bob\" class,","Fragments":["or","I"]},{"Key":"if bob","Fragments":["is","_is","is"]},{"Key":"bob is","Fragments":["a","not"]},{"Key":"I opted","Fragments":["for","for","to","not"]},{"Key":"opted for","Fragments":["a","a"]},{"Key":"Isn't it","Fragments":["a"]},{"Key":"overhead to","Fragments":["use"]},{"Key":"use regular","Fragments":["expressions","expressions","expressions"]},{"Key":"expressions on","Fragments":["this"]},{"Key":"having multiple","Fragments":["exit"]},{"Key":"multiple exit","Fragments":["points"]},{"Key":"exit points","Fragments":["-"]},{"Key":"points -","Fragments":["for"]},{"Key":"some standards","Fragments":["it"]},{"Key":"standards it","Fragments":["is"]},{"Key":"not permitted","Fragments":["(like"]},{"Key":"permitted (like","Fragments":["MISRA)"]},{"Key":"your approach.","Fragments":["Some"]},{"Key":"approach. Some","Fragments":["comments:"]},{"Key":"* c-style","Fragments":["casts"]},{"Key":"c-style casts","Fragments":["(bool)islower(*it))"]},{"Key":"casts (bool)islower(*it))","Fragments":["should"]},{"Key":"(bool)islower(*it)) should","Fragments":["be"]},{"Key":"c++ versions","Fragments":["that"]},{"Key":"versions that","Fragments":["are"]},{"Key":"are safer","Fragments":["and"]},{"Key":"and greppable","Fragments":["(static_cast,"]},{"Key":"greppable (static_cast,","Fragments":["etc)"]},{"Key":"headers can","Fragments":["be"]},{"Key":"dangerous -","Fragments":["may"]},{"Key":"- may","Fragments":["want"]},{"Key":"to prefix","Fragments":["everything"]},{"Key":"prefix everything","Fragments":["with"]},{"Key":"everything with","Fragments":["std::"]},{"Key":"You deal","Fragments":["with"]},{"Key":"with spaces,","Fragments":["but"]},{"Key":"but what","Fragments":["about","happens","happens"]},{"Key":"about other","Fragments":["whitespace?"]},{"Key":"other whitespace?","Fragments":["/t"]},{"Key":"whitespace? /t","Fragments":["/n"]},{"Key":"/t /n","Fragments":["/r"]},{"Key":"/n /r","Fragments":["etc"]},{"Key":"about leading","Fragments":["or"]},{"Key":"leading or","Fragments":["trailing"]},{"Key":"or trailing","Fragments":["space?"]},{"Key":"are copying","Fragments":["the","the","contents"]},{"Key":"copy -","Fragments":["you"]},{"Key":"constant string","Fragments":["ref","for"]},{"Key":"string ref","Fragments":["or"]},{"Key":"ref or","Fragments":["const"]},{"Key":"(auto it","Fragments":[":"]},{"Key":"Another note:","Fragments":["you"]},{"Key":"you checking","Fragments":["for"]},{"Key":"for \"allSpace\"","Fragments":["and"]},{"Key":"\"allSpace\" and","Fragments":["\"allNum\""]},{"Key":"and \"allNum\"","Fragments":["before"]},{"Key":"\"allNum\" before","Fragments":["eventually"]},{"Key":"before eventually","Fragments":["setting"]},{"Key":"eventually setting","Fragments":["it"]},{"Key":"to false.","Fragments":["It's"]},{"Key":"false. It's","Fragments":["not"]},{"Key":" a)","Fragments":["You"]},{"Key":"a) You","Fragments":["should"]},{"Key":"put \"const","Fragments":["char*\""]},{"Key":"\"const char*\"","Fragments":["on"]},{"Key":"char*\" on","Fragments":["all"]},{"Key":"all variable","Fragments":["declarations,","declarations"]},{"Key":"variable declarations,","Fragments":["and"]},{"Key":"declarations, and","Fragments":["as"]},{"Key":"and as","Fragments":["well"]},{"Key":"function itself.","Fragments":["These"]},{"Key":"itself. These","Fragments":["are"]},{"Key":"are constants,","Fragments":["and"]},{"Key":"constants, and","Fragments":["may"]},{"Key":" b)","Fragments":["if"]},{"Key":"b) if","Fragments":["the"]},{"Key":"lenght is","Fragments":["\"0\","]},{"Key":"is \"0\",","Fragments":["you"]},{"Key":"\"0\", you","Fragments":["will"]},{"Key":"be dereferencing","Fragments":["\"msg\""]},{"Key":"dereferencing \"msg\"","Fragments":["with"]},{"Key":"\"msg\" with","Fragments":["a"]},{"Key":"negative value.","Fragments":["This"]},{"Key":" c)","Fragments":["Overall,"]},{"Key":"c) Overall,","Fragments":["this"]},{"Key":"Overall, this","Fragments":["is"]},{"Key":"is \"C\",","Fragments":["not"]},{"Key":"\"C\", not","Fragments":["\"C++\"."]},{"Key":"Why aren't","Fragments":["you"]},{"Key":"aren't you","Fragments":["using"]},{"Key":"using \"std::isupper\"","Fragments":["and"]},{"Key":"\"std::isupper\" and","Fragments":["\"std::islower\""]},{"Key":"and \"std::islower\"","Fragments":["?"]},{"Key":"parameter \"s\"","Fragments":["for"]},{"Key":"\"s\" for","Fragments":["\"hey()\""]},{"Key":"for \"hey()\"","Fragments":["also"]},{"Key":"\"hey()\" also","Fragments":["passed"]},{"Key":"also passed","Fragments":["as"]},{"Key":"use proper","Fragments":["namespace"]},{"Key":"proper namespace","Fragments":["for"]},{"Key":"for isalpha","Fragments":["and"]},{"Key":"isalpha and","Fragments":["isspace"]},{"Key":"and isspace","Fragments":["(std::isalpha"]},{"Key":"isspace (std::isalpha","Fragments":["and"]},{"Key":"(std::isalpha and","Fragments":["std::isspace)."]},{"Key":"Don't call","Fragments":["\"back()\""]},{"Key":"call \"back()\"","Fragments":["method"]},{"Key":"\"back()\" method","Fragments":["on"]},{"Key":"std::string unless","Fragments":["you"]},{"Key":"are certain","Fragments":["the"]},{"Key":"certain the","Fragments":["string"]},{"Key":"biggest problem","Fragments":["here"]},{"Key":"problem here","Fragments":["is"]},{"Key":"actually do","Fragments":["not"]},{"Key":"C++11 on","Fragments":["a"]},{"Key":"a daily","Fragments":["basis."]},{"Key":"daily basis.","Fragments":["I"]},{"Key":"basis. I","Fragments":["am"]},{"Key":"quite buried","Fragments":["in"]},{"Key":"buried in","Fragments":["the"]},{"Key":"the C++98,","Fragments":["and"]},{"Key":"C++98, and","Fragments":["I"]},{"Key":"of there","Fragments":["-"]},{"Key":"least at","Fragments":["home."]},{"Key":"at home.","Fragments":["I"]},{"Key":"home. I","Fragments":["would"]},{"Key":"would guess","Fragments":["that"]},{"Key":"not decide","Fragments":["which"]},{"Key":"elegant -","Fragments":["use"]},{"Key":"an auto","Fragments":["iter,"]},{"Key":"auto iter,","Fragments":["or"]},{"Key":"iter, or","Fragments":["maybe"]},{"Key":"maybe std","Fragments":["algorithm"]},{"Key":"std algorithm","Fragments":["all_of."]},{"Key":"it reasonably","Fragments":["efficient"]},{"Key":"reasonably efficient","Fragments":["-"]},{"Key":"efficient -","Fragments":["not"]},{"Key":"too modular","Fragments":["and"]},{"Key":"modular and","Fragments":["avoiding","makes"]},{"Key":"and avoiding","Fragments":["some"]},{"Key":"avoiding some","Fragments":["of"]},{"Key":"C++ 'nice'","Fragments":["(slow)"]},{"Key":"'nice' (slow)","Fragments":["features."]},{"Key":"(slow) features.","Fragments":["I'm"]},{"Key":"features. I'm","Fragments":["from"]},{"Key":"I'm from","Fragments":["a"]},{"Key":"so trying","Fragments":["to"]},{"Key":"C++ terms","Fragments":["takes"]},{"Key":"terms takes","Fragments":["some"]},{"Key":"takes some","Fragments":["time."]},{"Key":"library functions.","Fragments":["It's","Sorry"]},{"Key":"It's been","Fragments":["a"]},{"Key":"wrote in","Fragments":["CPP."]},{"Key":" Basically","Fragments":["I","I"]},{"Key":"separate control","Fragments":["structure"]},{"Key":"control structure","Fragments":["from"]},{"Key":"structure from","Fragments":["the"]},{"Key":"decisions that","Fragments":["need"]},{"Key":"made and","Fragments":["to"]},{"Key":"factor each","Fragments":["function"]},{"Key":"each function","Fragments":["so","different?","I","you","returns."]},{"Key":"that ist","Fragments":["would"]},{"Key":"ist would","Fragments":["primarily"]},{"Key":"would primarily","Fragments":["accomplish"]},{"Key":"primarily accomplish","Fragments":["a"]},{"Key":"accomplish a","Fragments":["single"]},{"Key":"avoid adding","Fragments":["a"]},{"Key":"of private","Fragments":["static"]},{"Key":"private static","Fragments":["functions"]},{"Key":"static functions","Fragments":["to"]},{"Key":"the \"bob\"","Fragments":["class,"]},{"Key":"of simple","Fragments":["file-scoped"]},{"Key":"simple file-scoped","Fragments":["functions"]},{"Key":"file-scoped functions","Fragments":["and"]},{"Key":"and data","Fragments":["structures"]},{"Key":"data structures","Fragments":["to","and","it","that","it","that","it","that","it","that"]},{"Key":"structures to","Fragments":["complete"]},{"Key":"first ever","Fragments":["codpiece"]},{"Key":"ever codpiece","Fragments":["here"]},{"Key":"codpiece here","Fragments":["though"]},{"Key":"here though","Fragments":["that"]},{"Key":"make everything","Fragments":["super-clear"]},{"Key":"everything super-clear","Fragments":["with"]},{"Key":"super-clear with","Fragments":["lots"]},{"Key":"with lots","Fragments":["of"]},{"Key":"of comments","Fragments":["and"]},{"Key":"clear variable","Fragments":["names."]},{"Key":"variable names.","Fragments":["Maybe","For"]},{"Key":"names. Maybe","Fragments":["i"]},{"Key":"Maybe i","Fragments":["went"]},{"Key":"i went","Fragments":["to"]},{"Key":"went to","Fragments":["far","use"]},{"Key":"to far","Fragments":["and"]},{"Key":"far and","Fragments":["lost"]},{"Key":"and lost","Fragments":["focus"]},{"Key":"lost focus","Fragments":["on"]},{"Key":"on making","Fragments":["a"]},{"Key":"a efficient","Fragments":["implementation."]},{"Key":"efficient implementation.","Fragments":["However"]},{"Key":"implementation. However","Fragments":["this"]},{"Key":"trivial task,","Fragments":["and"]},{"Key":"task, and","Fragments":["no"]},{"Key":"no requirements","Fragments":["are"]},{"Key":"requirements are","Fragments":["specified."]},{"Key":"that `std::regex`","Fragments":["is"]},{"Key":"`std::regex` is","Fragments":["an"]},{"Key":"this job.","Fragments":["Regex"]},{"Key":"job. Regex","Fragments":["probably"]},{"Key":"Regex probably","Fragments":["should"]},{"Key":"for complex","Fragments":["things,"]},{"Key":"complex things,","Fragments":["but"]},{"Key":"not this.","Fragments":["It"]},{"Key":"this. It","Fragments":["makes"]},{"Key":"less readable,","Fragments":["at"]},{"Key":"readable, at","Fragments":["least"]},{"Key":" Additionally,","Fragments":["I","some"]},{"Key":"Additionally, I","Fragments":["think"]},{"Key":"some helper","Fragments":["functions","functions."]},{"Key":"with descriptive","Fragments":["names"]},{"Key":"descriptive names","Fragments":["should"]},{"Key":"names should","Fragments":["make"]},{"Key":"The library","Fragments":["functions"]},{"Key":"that encapsulate","Fragments":["those"]},{"Key":"encapsulate those","Fragments":["patterns"]},{"Key":"those patterns","Fragments":["can"]},{"Key":"patterns can","Fragments":["be"]},{"Key":"```#\u003calgorithm\u003e``` ([see","Fragments":["here](http://www.cplusplus.com/reference/algorithm/)"]},{"Key":"([see here](http://www.cplusplus.com/reference/algorithm/)","Fragments":[")."]},{"Key":"Also as","Fragments":["a"]},{"Key":"quick note","Fragments":["if"]},{"Key":"note if","Fragments":["you"]},{"Key":"write an","Fragments":["explicit"]},{"Key":"explicit loop","Fragments":["when"]},{"Key":" data","Fragments":["structure"]},{"Key":"type deduction","Fragments":["of"]},{"Key":"deduction of","Fragments":["the"]},{"Key":"the ```auto```","Fragments":["keyword","keyword"]},{"Key":"```auto``` keyword","Fragments":["as","and"]},{"Key":"keyword as","Fragments":["well"]},{"Key":"as range","Fragments":["based"]},{"Key":"loops lower","Fragments":["the"]},{"Key":"verbosity significantly.","Fragments":["(e.g."]},{"Key":"significantly. (e.g.","Fragments":["your"]},{"Key":"(e.g. your","Fragments":["line"]},{"Key":"your line","Fragments":["14"]},{"Key":" ```for(","Fragments":["auto"]},{"Key":"```for( auto","Fragments":["it","c"]},{"Key":" making","Fragments":["the"]},{"Key":"clearer IMHO","Fragments":[":)"]},{"Key":"reading my","Fragments":["own"]},{"Key":"confused that","Fragments":["why"]},{"Key":"that why","Fragments":["does"]},{"Key":"functions `all_of`,","Fragments":["`none_of`"]},{"Key":"`all_of`, `none_of`","Fragments":["and"]},{"Key":"`none_of` and","Fragments":["`any_of`"]},{"Key":"and `any_of`","Fragments":["are"]},{"Key":"`any_of` are","Fragments":["in"]},{"Key":"in `namespace","Fragments":["std`."]},{"Key":"`namespace std`.","Fragments":["I"]},{"Key":"std`. I","Fragments":["didn't"]},{"Key":"didn't do","Fragments":["`using"]},{"Key":"std` but","Fragments":["just"]},{"Key":"just `using","Fragments":["std::string`."]},{"Key":"namespace look-up","Fragments":["find"]},{"Key":"look-up find","Fragments":["those"]},{"Key":"find those","Fragments":["functions?"]},{"Key":"those functions?","Fragments":["Am"]},{"Key":"functions? Am","Fragments":["I"]},{"Key":"I using","Fragments":["the"]},{"Key":"the `using`","Fragments":["statement","declaration","declarations","declarations","declaration"]},{"Key":"`using` statement","Fragments":["correctly?"]},{"Key":" @mina","Fragments":["Thanks"]},{"Key":"@mina Thanks","Fragments":["for"]},{"Key":"the advice!","Fragments":["I","That"]},{"Key":"advice! I","Fragments":["will"]},{"Key":"will go","Fragments":["in"]},{"Key":"those changes!","Fragments":["Im"]},{"Key":"changes! Im","Fragments":["not"]},{"Key":"Im not","Fragments":["sure"]},{"Key":"have iostream","Fragments":["included,"]},{"Key":"iostream included,","Fragments":["as"]},{"Key":"included, as","Fragments":["I"]},{"Key":"1) Are","Fragments":["you"]},{"Key":"you guaranteed","Fragments":["that"]},{"Key":"that map[word]","Fragments":["=="]},{"Key":"map[word] ==","Fragments":["0"]},{"Key":"map already?","Fragments":["I"]},{"Key":"already? I","Fragments":["think"]},{"Key":"it cold","Fragments":["be"]},{"Key":"cold be","Fragments":["gibberish"]},{"Key":"be gibberish","Fragments":["outside"]},{"Key":"gibberish outside","Fragments":["of"]},{"Key":"of debug","Fragments":["mode."]},{"Key":"2) You","Fragments":["could","don't"]},{"Key":"could transform","Fragments":["the"]},{"Key":"transform the","Fragments":["entire"]},{"Key":"string up","Fragments":["front"]},{"Key":"up front","Fragments":["in","is"]},{"Key":"front in","Fragments":["one"]},{"Key":"one go","Fragments":["-"]},{"Key":"go -","Fragments":["this"]},{"Key":"possibly be","Fragments":["more"]},{"Key":"not done","Fragments":["yet."]},{"Key":"good and","Fragments":["short!","quite","you've"]},{"Key":"string argumentsby","Fragments":["value"]},{"Key":"argumentsby value","Fragments":["-"]},{"Key":"should copy","Fragments":["by"]},{"Key":"2) Why","Fragments":["is","do"]},{"Key":"a namespace?","Fragments":["You"]},{"Key":"namespace? You","Fragments":["don't"]},{"Key":"anything by","Fragments":["it","itself,"]},{"Key":"by it","Fragments":["being"]},{"Key":"I studied","Fragments":["C++"]},{"Key":"studied C++","Fragments":["waaaaay"]},{"Key":"C++ waaaaay","Fragments":["back"]},{"Key":"waaaaay back","Fragments":["in"]},{"Key":"in college","Fragments":["but"]},{"Key":"college but","Fragments":["never"]},{"Key":"but never","Fragments":["got"]},{"Key":"never got","Fragments":["much"]},{"Key":"got much","Fragments":["use"]},{"Key":"much use","Fragments":["out"]},{"Key":"use out","Fragments":["of"]},{"Key":"once my","Fragments":["career"]},{"Key":"career got","Fragments":["off"]},{"Key":"got off","Fragments":["the"]},{"Key":"the ground.","Fragments":["I'm"]},{"Key":"ground. I'm","Fragments":["trying"]},{"Key":"to reacquaint","Fragments":["myself"]},{"Key":"reacquaint myself","Fragments":["with"]},{"Key":"in switching","Fragments":["over"]},{"Key":"switching over","Fragments":["to"]},{"Key":"to game","Fragments":["development"]},{"Key":"game development","Fragments":["from"]},{"Key":"development from","Fragments":["web"]},{"Key":"from web","Fragments":["development."]},{"Key":"web development.","Fragments":["Is"]},{"Key":"development. Is","Fragments":["C++"]},{"Key":"Is C++","Fragments":["the"]},{"Key":"C++ the","Fragments":["right"]},{"Key":"right choice","Fragments":["for"]},{"Key":"for that?","Fragments":["I've"]},{"Key":"that? I've","Fragments":["heard"]},{"Key":"heard differing","Fragments":["opinions"]},{"Key":"differing opinions","Fragments":["on"]},{"Key":"the subject.","Fragments":["Thoughts?"]},{"Key":"learn C++","Fragments":["better","to:"]},{"Key":"C++ better","Fragments":["regardless."]},{"Key":" Through","Fragments":["the"]},{"Key":"Through the","Fragments":["course"]},{"Key":"the course","Fragments":["of"]},{"Key":"course of","Fragments":["this"]},{"Key":"it dawned","Fragments":["on"]},{"Key":"dawned on","Fragments":["me"]},{"Key":"on me","Fragments":["that"]},{"Key":"that regular","Fragments":["expressions"]},{"Key":"expressions would","Fragments":["be"]},{"Key":"most efficient","Fragments":["way","way","approach,"]},{"Key":"to tackle","Fragments":["these"]},{"Key":"tackle these","Fragments":["unit"]},{"Key":"these unit","Fragments":["tests."]},{"Key":"tests. At","Fragments":["first"]},{"Key":"using all","Fragments":["kinds","what"]},{"Key":"manipulation functions","Fragments":["but"]},{"Key":"functions but","Fragments":["that","`checkCaps`"]},{"Key":"getting really","Fragments":["cumbersome."]},{"Key":"working within","Fragments":["an"]},{"Key":"an Ubuntu","Fragments":["linux"]},{"Key":"Ubuntu linux","Fragments":["environment"]},{"Key":"linux environment","Fragments":["so"]},{"Key":"environment so","Fragments":["using"]},{"Key":"using gcc","Fragments":["as","version"]},{"Key":"gcc as","Fragments":["my"]},{"Key":"my compiler.","Fragments":["When"]},{"Key":"compiler. When","Fragments":["I"]},{"Key":"the gcc","Fragments":["regex","regex"]},{"Key":"gcc regex","Fragments":["library,","library"]},{"Key":"regex library,","Fragments":["I"]},{"Key":"library, I","Fragments":["was"]},{"Key":"was running","Fragments":["into"]},{"Key":"running into","Fragments":["all"]},{"Key":"into all","Fragments":["kinds"]},{"Key":"of strange","Fragments":["errors."]},{"Key":"strange errors.","Fragments":["For"]},{"Key":"errors. For","Fragments":["example,"]},{"Key":"regex library","Fragments":["was","which","so","yet."]},{"Key":"library was","Fragments":["throwing","up"]},{"Key":"was throwing","Fragments":["an"]},{"Key":"exception, stating","Fragments":["that"]},{"Key":"stating that","Fragments":["a","the"]},{"Key":"pattern like","Fragments":["\"[a-z]\""]},{"Key":"like \"[a-z]\"","Fragments":["was"]},{"Key":"\"[a-z]\" was","Fragments":["an"]},{"Key":"incorrect usage","Fragments":["of"]},{"Key":"of brackets.","Fragments":["Huh?"]},{"Key":"brackets. Huh?","Fragments":["After"]},{"Key":"Huh? After","Fragments":["searching"]},{"Key":"After searching","Fragments":["around,"]},{"Key":"searching around,","Fragments":["I"]},{"Key":"around, I","Fragments":["found"]},{"Key":"the gcc's","Fragments":["regex"]},{"Key":"gcc's regex","Fragments":["implementation"]},{"Key":"implementation isn't","Fragments":["even"]},{"Key":"even finished.","Fragments":["I'm"]},{"Key":"finished. I'm","Fragments":["using"]},{"Key":"gcc version","Fragments":["4.8.2,"]},{"Key":"version 4.8.2,","Fragments":["which"]},{"Key":"4.8.2, which","Fragments":["is"]},{"Key":"recent so","Fragments":["go"]},{"Key":"so go","Fragments":["figure."]},{"Key":"Boost regex","Fragments":["library"]},{"Key":"library which","Fragments":["shares"]},{"Key":"which shares","Fragments":["a"]},{"Key":"shares a","Fragments":["similar"]},{"Key":"similar interface","Fragments":["with"]},{"Key":"interface with","Fragments":["the"]},{"Key":"library so","Fragments":["I"]},{"Key":"change much","Fragments":["code."]},{"Key":"super simple","Fragments":["approach."]},{"Key":"simple approach.","Fragments":["The"]},{"Key":"approach. The","Fragments":["default"]},{"Key":"The default","Fragments":["message","buffer","action"]},{"Key":"default message","Fragments":["that"]},{"Key":"message that","Fragments":["is"]},{"Key":"returned is","Fragments":["\"Whatever.\""]},{"Key":"is \"Whatever.\"","Fragments":["for","and"]},{"Key":"\"Whatever.\" for","Fragments":["non"]},{"Key":"non matches","Fragments":["against"]},{"Key":"matches against","Fragments":["tests"]},{"Key":"against tests","Fragments":["for"]},{"Key":"a shout,","Fragments":["question,","but"]},{"Key":"shout, question,","Fragments":["or"]},{"Key":"question, or","Fragments":["empty","nonsense;"]},{"Key":"or empty","Fragments":["string."]},{"Key":"I test","Fragments":["for","this"]},{"Key":"empty (or","Fragments":["blank)"]},{"Key":"(or blank)","Fragments":["string"]},{"Key":"blank) string","Fragments":["first"]},{"Key":"string first","Fragments":["and","would","then"]},{"Key":"that passes,","Fragments":["just"]},{"Key":"passes, just","Fragments":["return"]},{"Key":"the appropriate","Fragments":["message.","response","response","response"]},{"Key":"appropriate message.","Fragments":["No"]},{"Key":"message. No","Fragments":["need"]},{"Key":"for further","Fragments":["tests,"]},{"Key":"further tests,","Fragments":["the"]},{"Key":"tests, the","Fragments":["string"]},{"Key":"no content","Fragments":["(none"]},{"Key":"content (none","Fragments":["that"]},{"Key":"(none that","Fragments":["we"]},{"Key":"we care","Fragments":["about","about"]},{"Key":"I check","Fragments":["for","for","for","whether"]},{"Key":"shout by","Fragments":["searching"]},{"Key":"by searching","Fragments":["for"]},{"Key":"searching for","Fragments":["lowercase","whitespace"]},{"Key":"for lowercase","Fragments":["letters"]},{"Key":"lowercase letters","Fragments":["and","regardless"]},{"Key":"and uppercase","Fragments":["letters."]},{"Key":"uppercase letters.","Fragments":["If"]},{"Key":"letters. If","Fragments":["the"]},{"Key":"searches return","Fragments":["only"]},{"Key":"return only","Fragments":["upper"]},{"Key":"only upper","Fragments":["case","case"]},{"Key":"case letters,","Fragments":["then","but"]},{"Key":"letters, then","Fragments":["we"]},{"Key":"shouting at","Fragments":["poor"]},{"Key":"at poor","Fragments":["bob."]},{"Key":"poor bob.","Fragments":["If"]},{"Key":"bob. If","Fragments":["any"]},{"Key":"any lower","Fragments":["case","case.","case"]},{"Key":"are found","Fragments":["as"]},{"Key":"found as","Fragments":["well"]},{"Key":"as uppercase,","Fragments":["then"]},{"Key":"uppercase, then","Fragments":["they"]},{"Key":"then they","Fragments":["can't"]},{"Key":"shouting too","Fragments":["loudly."]},{"Key":"too loudly.","Fragments":["Only"]},{"Key":"loudly. Only","Fragments":["the"]},{"Key":"the combination","Fragments":["of"]},{"Key":"of no","Fragments":["lower"]},{"Key":"and upper","Fragments":["case"]},{"Key":"letters will","Fragments":["be"]},{"Key":"be counted","Fragments":["as"]},{"Key":"counted as","Fragments":["a","a"]},{"Key":"a shout.","Fragments":["Numbers"]},{"Key":"shout. Numbers","Fragments":["and"]},{"Key":"Numbers and","Fragments":["punctuation"]},{"Key":"and punctuation","Fragments":["are"]},{"Key":"punctuation are","Fragments":["ignored."]},{"Key":"shout before","Fragments":["checking"]},{"Key":"question because","Fragments":["the"]},{"Key":"question test","Fragments":["simply","passes."]},{"Key":"test simply","Fragments":["checks"]},{"Key":"simply checks","Fragments":["for"]},{"Key":"mark as","Fragments":["the"]},{"Key":"a sequence","Fragments":["of"]},{"Key":"caps words","Fragments":["followed"]},{"Key":"words followed","Fragments":["by"]},{"Key":"mark, but","Fragments":["the"]},{"Key":"tests would","Fragments":["consider"]},{"Key":"shout instead","Fragments":["so"]},{"Key":"instead so","Fragments":["I"]},{"Key":"shout first","Fragments":["for"]},{"Key":"that reason.","Fragments":["If"]},{"Key":"reason. If","Fragments":["it's"]},{"Key":"shout, but","Fragments":["has"]},{"Key":"mark at","Fragments":["the","the"]},{"Key":"Anyway, rip","Fragments":["it"]},{"Key":"rip it","Fragments":["apart","up."]},{"Key":"it apart","Fragments":["gurus!"]},{"Key":"in `cctype`","Fragments":["so"]},{"Key":"`cctype` so","Fragments":["you"]},{"Key":"use `isupper()`","Fragments":["and"]},{"Key":"`isupper()` and","Fragments":["`islower()`"]},{"Key":"and `islower()`","Fragments":["as"]},{"Key":"`islower()` as","Fragments":["opposed"]},{"Key":"to `*it","Fragments":["\u003e="]},{"Key":"`*it \u003e=","Fragments":["'A'"]},{"Key":"\u003e= 'A'","Fragments":["\u0026\u0026","\u0026\u0026","\u0026\u0026"]},{"Key":"'A' \u0026\u0026","Fragments":["*it","msg[i]","\u003c="]},{"Key":"\u0026\u0026 *it","Fragments":["\u003c="]},{"Key":"*it \u003c=","Fragments":["'Z'`."]},{"Key":"\u003c= 'Z'`.","Fragments":["I","It's"]},{"Key":"'Z'`. I","Fragments":["think"]},{"Key":"lot easier","Fragments":["to","then"]},{"Key":"and generally","Fragments":["won't"]},{"Key":"generally won't","Fragments":["cause"]},{"Key":"won't cause","Fragments":["a","a"]},{"Key":"cause a","Fragments":["significant","heap","slight","buffer"]},{"Key":"a significant","Fragments":["performance"]},{"Key":"significant performance","Fragments":["hit."]},{"Key":"to roll","Fragments":["both"]},{"Key":"roll both","Fragments":["shouting"]},{"Key":"both shouting","Fragments":["and"]},{"Key":"and shouting","Fragments":["numbers"]},{"Key":"shouting numbers","Fragments":["into"]},{"Key":"numbers into","Fragments":["one"]},{"Key":"one regex","Fragments":["string"]},{"Key":"regex string","Fragments":["but"]},{"Key":"string but","Fragments":["found","will"]},{"Key":"but found","Fragments":["it","it"]},{"Key":"it matched","Fragments":["only_numbers","the","the"]},{"Key":"matched only_numbers","Fragments":["and"]},{"Key":"only_numbers and","Fragments":["question_with_only_numbers,"]},{"Key":"and question_with_only_numbers,","Fragments":["my"]},{"Key":"question_with_only_numbers, my","Fragments":["regex"]},{"Key":"regex isn't","Fragments":["as"]},{"Key":"good as","Fragments":["it","strRNA.push_back("]},{"Key":"probably could","Fragments":["be."]},{"Key":"Thanks, @rebeka!","Fragments":["New"]},{"Key":"@rebeka! New","Fragments":["version"]},{"Key":"New version","Fragments":["submitted"]},{"Key":"version submitted","Fragments":[":-)."]},{"Key":"I've dabbled","Fragments":["a"]},{"Key":"dabbled a","Fragments":["tiny"]},{"Key":"bit in","Fragments":["C"]},{"Key":"C before","Fragments":["while"]},{"Key":"before while","Fragments":["starting"]},{"Key":"while starting","Fragments":["to"]},{"Key":"starting to","Fragments":["read","get"]},{"Key":"the Kernighan","Fragments":["and"]},{"Key":"Kernighan and","Fragments":["Ritchie"]},{"Key":"and Ritchie","Fragments":["book"]},{"Key":"Ritchie book","Fragments":["and"]},{"Key":"book and","Fragments":["I","the"]},{"Key":"C++ would","Fragments":["look"]},{"Key":"look reasonably","Fragments":["similar..."]},{"Key":"reasonably similar...","Fragments":["but"]},{"Key":"similar... but","Fragments":["it"]},{"Key":"pretty different","Fragments":["in"]},{"Key":"different in","Fragments":["some"]},{"Key":"Using `\u003calgorithm\u003e`","Fragments":["cleans"]},{"Key":"`\u003calgorithm\u003e` cleans","Fragments":["up"]},{"Key":"cleans up","Fragments":["the"]},{"Key":"lot I","Fragments":["think."]},{"Key":"think. However,","Fragments":["I"]},{"Key":"that `is_shouting`","Fragments":["now"]},{"Key":"`is_shouting` now","Fragments":["has"]},{"Key":"now has","Fragments":["to"]},{"Key":"string possibly","Fragments":["more"]},{"Key":"possibly more","Fragments":["than"]},{"Key":"necessary. In","Fragments":["another"]},{"Key":"In another","Fragments":["language"]},{"Key":"another language","Fragments":["I","C++"]},{"Key":"language I","Fragments":["wouldn't","try"]},{"Key":"be bothered,","Fragments":["but"]},{"Key":"bothered, but","Fragments":["given"]},{"Key":"of going","Fragments":["down","from"]},{"Key":"a lower-level","Fragments":["language"]},{"Key":"lower-level language","Fragments":["like"]},{"Key":"language like","Fragments":["C++"]},{"Key":"like C++","Fragments":["is"]},{"Key":"be squeezing","Fragments":["every"]},{"Key":"squeezing every","Fragments":["last"]},{"Key":"every last","Fragments":["bit"]},{"Key":"last bit","Fragments":["of"]},{"Key":"efficiency out","Fragments":["of"]},{"Key":"code, should","Fragments":["I"]},{"Key":"I be","Fragments":["bothered"]},{"Key":"be bothered","Fragments":["here?"]},{"Key":"and concise!","Fragments":["You","If"]},{"Key":"concise! You","Fragments":["could"]},{"Key":"potentially improve","Fragments":["perf"]},{"Key":"improve perf","Fragments":["by"]},{"Key":"perf by","Fragments":["returning"]},{"Key":"for responses","Fragments":["rather"]},{"Key":"responses rather","Fragments":["than"]},{"Key":"copying each","Fragments":["time.","character"]},{"Key":"I split","Fragments":["this"]},{"Key":"split this","Fragments":["up"]},{"Key":"this up","Fragments":["into"]},{"Key":"2 parts","Fragments":["for"]},{"Key":"parts for","Fragments":["readability's"]},{"Key":"for readability's","Fragments":["sake."]},{"Key":"first part,","Fragments":["_splitString_,"]},{"Key":"part, _splitString_,","Fragments":["iterates"]},{"Key":"_splitString_, iterates","Fragments":["over"]},{"Key":"iterates over","Fragments":["the","array"]},{"Key":"string given","Fragments":["as"]},{"Key":"It builds","Fragments":["a"]},{"Key":"builds a","Fragments":["word"]},{"Key":"each alphanumeric","Fragments":["character,"]},{"Key":"character, whenever","Fragments":["it"]},{"Key":"whenever it","Fragments":["hits"]},{"Key":"a non-alphanumeric","Fragments":["character","character.","char","char"]},{"Key":"non-alphanumeric character","Fragments":["it"]},{"Key":"character it","Fragments":["flushes"]},{"Key":"it flushes","Fragments":["the"]},{"Key":"flushes the","Fragments":["current"]},{"Key":"current word","Fragments":["to"]},{"Key":"word to","Fragments":["the"]},{"Key":"and clears","Fragments":["the"]},{"Key":"clears the","Fragments":["string"]},{"Key":"You'll notice","Fragments":["at"]},{"Key":"notice at","Fragments":["line"]},{"Key":"line 27,","Fragments":["I"]},{"Key":"27, I","Fragments":["added"]},{"Key":"small hack","Fragments":["to"]},{"Key":"string always","Fragments":["ends"]},{"Key":"always ends","Fragments":["with"]},{"Key":"non-alphanumeric character.","Fragments":["I"]},{"Key":"character. I","Fragments":["did"]},{"Key":"for un-flushed","Fragments":["words"]},{"Key":"un-flushed words","Fragments":["after"]},{"Key":"words after","Fragments":["the"]},{"Key":"Thanks to","Fragments":["our","feedback"]},{"Key":"our helper","Fragments":["function,"]},{"Key":"helper function,","Fragments":["_wordcount::words_"]},{"Key":"function, _wordcount::words_","Fragments":["becomes"]},{"Key":"_wordcount::words_ becomes","Fragments":["a"]},{"Key":"becomes a","Fragments":["straightforward","variable?"]},{"Key":"straightforward exercise.","Fragments":["All"]},{"Key":"exercise. All","Fragments":["it"]},{"Key":"All it","Fragments":["does"]},{"Key":"does is","Fragments":["check","call"]},{"Key":"is check","Fragments":["the","each","for"]},{"Key":"already exists.","Fragments":["if"]},{"Key":"exists. if","Fragments":["it"]},{"Key":"not, it","Fragments":["adds","calls"]},{"Key":"it adds","Fragments":["the"]},{"Key":"and initializes","Fragments":["the"]},{"Key":"initializes the","Fragments":["value,"]},{"Key":"value, otherwise","Fragments":["it"]},{"Key":"it increments","Fragments":["by"]},{"Key":"increments by","Fragments":["1."]},{"Key":"thought process","Fragments":["with"]},{"Key":"process with","Fragments":["comments"]},{"Key":"with comments","Fragments":["within"]},{"Key":"comments within","Fragments":["the"]},{"Key":"This probably","Fragments":["isn't","should"]},{"Key":"cleanest way","Fragments":["of"]},{"Key":"doing it,","Fragments":["but"]},{"Key":"Hey, where","Fragments":["is"]},{"Key":"where is","Fragments":["`isalpha`"]},{"Key":"is `isalpha`","Fragments":["defined?"]},{"Key":"`isalpha` defined?","Fragments":["Also"]},{"Key":"defined? Also","Fragments":["can"]},{"Key":"Also can","Fragments":["you"]},{"Key":"what contains_alpha","Fragments":["is"]},{"Key":"contains_alpha is","Fragments":["actually"]},{"Key":"very succinct","Fragments":["solution."]},{"Key":"This seemed","Fragments":["like","pretty","to"]},{"Key":"pretty straightforward","Fragments":["one.","exercise","getting"]},{"Key":"straightforward one.","Fragments":["Not"]},{"Key":"one. Not","Fragments":["much"]},{"Key":"Not much","Fragments":["to"]},{"Key":"Interesting way","Fragments":["of"]},{"Key":"splitting up","Fragments":["this","the"]},{"Key":"up this","Fragments":["function,"]},{"Key":"this function,","Fragments":["in"]},{"Key":"function, in","Fragments":["my"]},{"Key":"task but","Fragments":["if"]},{"Key":"more special","Fragments":["cases"]},{"Key":"cases this","Fragments":["is"]},{"Key":"is clear","Fragments":["and"]},{"Key":"has comments,","Fragments":["but"]},{"Key":"comments, but","Fragments":["have"]},{"Key":"you forgotten","Fragments":["the"]},{"Key":"forgotten the","Fragments":["case"]},{"Key":"a exclamation","Fragments":["mark"]},{"Key":"exclamation mark","Fragments":["at","are","would","(a"]},{"Key":"doesn't feel","Fragments":["as","right..."]},{"Key":"feel as","Fragments":["simple"]},{"Key":"be, what","Fragments":["are"]},{"Key":"some suggestions","Fragments":["on","for"]},{"Key":"suggestions on","Fragments":["optimizing/simplifying","my"]},{"Key":"on optimizing/simplifying","Fragments":["this"]},{"Key":"optimizing/simplifying this","Fragments":["code."]},{"Key":"code. Would","Fragments":["the"]},{"Key":"Would the","Fragments":["best"]},{"Key":"best route","Fragments":["be"]},{"Key":"route be","Fragments":["to"]},{"Key":"really love","Fragments":["how"]},{"Key":"how simple","Fragments":["this"]},{"Key":"simple this","Fragments":["looks"]},{"Key":"looks and","Fragments":["I"]},{"Key":"I absolutely","Fragments":["love"]},{"Key":"absolutely love","Fragments":["the"]},{"Key":"of boost::for_each.","Fragments":["The"]},{"Key":"boost::for_each. The","Fragments":["only"]},{"Key":"only downside","Fragments":["is"]},{"Key":"downside is","Fragments":["it"]},{"Key":"isn't super","Fragments":["readable,"]},{"Key":"super readable,","Fragments":["but"]},{"Key":"still figure","Fragments":["out"]},{"Key":"doing after","Fragments":["a"]},{"Key":"couple glances.","Fragments":["Great"]},{"Key":"glances. Great","Fragments":["Job!"]},{"Key":"by being","Fragments":["more"]},{"Key":"C++ -","Fragments":["like"]},{"Key":"using \\\u003ciostream\\\u003e","Fragments":["and"]},{"Key":"\\\u003ciostream\\\u003e and","Fragments":["\\\u003cstring\\\u003e"]},{"Key":"and \\\u003cstring\\\u003e","Fragments":["instead"]},{"Key":"\\\u003cstring\\\u003e instead","Fragments":["of"]},{"Key":"of \"stdio.h\",","Fragments":["and"]},{"Key":"\"stdio.h\", and","Fragments":["letting"]},{"Key":"compiler automatically","Fragments":["create"]},{"Key":"automatically create","Fragments":["the","them"]},{"Key":"also some","Fragments":["stylistic"]},{"Key":"some stylistic","Fragments":["tweaks,"]},{"Key":"stylistic tweaks,","Fragments":["for"]},{"Key":"tweaks, for","Fragments":["example"]},{"Key":"the curly","Fragments":["braces","braces"]},{"Key":"curly braces","Fragments":["are","after"]},{"Key":"braces are","Fragments":["not"]},{"Key":"for 'if'","Fragments":["statements"]},{"Key":"'if' statements","Fragments":["with"]},{"Key":"statements with","Fragments":["only","only"]},{"Key":"code after","Fragments":["them,","3"]},{"Key":"after them,","Fragments":["and"]},{"Key":"have 'using","Fragments":["namespace"]},{"Key":"'using namespace","Fragments":["std;'"]},{"Key":"namespace std;'","Fragments":["you"]},{"Key":"std;' you","Fragments":["can"]},{"Key":"replace 'std::string'","Fragments":["with"]},{"Key":"'std::string' with","Fragments":["just"]},{"Key":"Only numbers","Fragments":["with"]},{"Key":"a non-forceful","Fragments":["question"]},{"Key":"non-forceful question","Fragments":["(\"Sure\"),"]},{"Key":"question (\"Sure\"),","Fragments":["same"]},{"Key":"(\"Sure\"), same","Fragments":["as"]},{"Key":"as lowercase","Fragments":["with"]},{"Key":"lowercase with","Fragments":["a"]},{"Key":"mark. Normal","Fragments":["sentences"]},{"Key":"Normal sentences","Fragments":["without"]},{"Key":"sentences without","Fragments":["all-caps"]},{"Key":"without all-caps","Fragments":["and"]},{"Key":"all-caps and","Fragments":["ending"]},{"Key":"mark are","Fragments":["considered"]},{"Key":"considered non-forceful","Fragments":["sentences."]},{"Key":"non-forceful sentences.","Fragments":["By"]},{"Key":"sentences. By","Fragments":["analogy,"]},{"Key":"By analogy,","Fragments":["only"]},{"Key":"analogy, only","Fragments":["numbers"]},{"Key":"mark would","Fragments":["be"]},{"Key":"be normal","Fragments":["sentences"]},{"Key":"normal sentences","Fragments":["(\"Whatever\")."]},{"Key":"library yet.","Fragments":["Doing"]},{"Key":"yet. Doing","Fragments":["this"]},{"Key":"Doing this","Fragments":["reminded"]},{"Key":"this reminded","Fragments":["me"]},{"Key":"I ought","Fragments":["to"]},{"Key":"I first","Fragments":["thought","processed","saw","cleaned"]},{"Key":"a cleaner","Fragments":["looking"]},{"Key":"cleaner looking","Fragments":["code"]},{"Key":"looking code","Fragments":["but"]},{"Key":"but realized","Fragments":["that"]},{"Key":"possible because","Fragments":["switch"]},{"Key":"because switch","Fragments":["only"]},{"Key":"switch only","Fragments":["takes"]},{"Key":"takes in","Fragments":["numerical"]},{"Key":"in numerical","Fragments":["values."]},{"Key":"numerical values.","Fragments":["Hence,"]},{"Key":"values. Hence,","Fragments":["I"]},{"Key":"Hence, I","Fragments":["came"]},{"Key":"basic if-else","Fragments":["construction.."]},{"Key":"last statement","Fragments":["should"]},{"Key":"statement should","Fragments":["be"]},{"Key":"found that","Fragments":["here","the","at"]},{"Key":"that here","Fragments":["while"]},{"Key":"here while","Fragments":["checking"]},{"Key":"while checking","Fragments":["my"]},{"Key":"If query.size()","Fragments":["=="]},{"Key":"query.size() ==","Fragments":["'?',"]},{"Key":"== '?',","Fragments":["then"]},{"Key":"'?', then","Fragments":["query.size"]},{"Key":"then query.size","Fragments":["is"]},{"Key":"query.size is","Fragments":["\u003e"]},{"Key":"is \u003e","Fragments":["0."]},{"Key":"\u003e 0.","Fragments":["I"]},{"Key":"return query.back()","Fragments":["=="]},{"Key":"query.back() ==","Fragments":["'?'"]},{"Key":"about std::all_of,","Fragments":["any_of,"]},{"Key":"std::all_of, any_of,","Fragments":["and"]},{"Key":"any_of, and","Fragments":["none_of."]},{"Key":"and none_of.","Fragments":["I"]},{"Key":"none_of. I","Fragments":["like"]},{"Key":"used these","Fragments":["functions."]},{"Key":"readable. For","Fragments":["me,","instance,"]},{"Key":"For me,","Fragments":["this","it","things"]},{"Key":"me, this","Fragments":["is"]},{"Key":"readable implementation","Fragments":["I've"]},{"Key":"implementation I've","Fragments":["seen."]},{"Key":" Hmm,","Fragments":["I","is","I","I"]},{"Key":"Hmm, I","Fragments":["am","guess","guess"]},{"Key":"were thinking","Fragments":["about"]},{"Key":"case without","Fragments":["const?"]},{"Key":"char const","Fragments":["*"]},{"Key":"const *","Fragments":["does","with"]},{"Key":"* does","Fragments":["not"]},{"Key":"not convert","Fragments":["to","length()"]},{"Key":"Anyway, this","Fragments":["is"]},{"Key":"use string","Fragments":["const","instead."]},{"Key":"is compatible","Fragments":["to"]},{"Key":"compatible to","Fragments":["c-strings,"]},{"Key":"to c-strings,","Fragments":["and"]},{"Key":"c-strings, and","Fragments":["is"]},{"Key":"particular reason,","Fragments":["except"]},{"Key":"reason, except","Fragments":["for"]},{"Key":"for personal","Fragments":["preference,"]},{"Key":"preference, to","Fragments":["use"]},{"Key":"class, instead","Fragments":["of"]},{"Key":"A single","Fragments":["static","lower"]},{"Key":"class seems","Fragments":["like"]},{"Key":"like unnecessary,","Fragments":["you"]},{"Key":"unnecessary, you","Fragments":["could"]},{"Key":"namespace as","Fragments":["well:","well"]},{"Key":"hey(std::string const","Fragments":["\u0026);"]},{"Key":"Fixed lambda","Fragments":["function.."]},{"Key":"lambda function..","Fragments":["however"]},{"Key":"function.. however","Fragments":["this"]},{"Key":"this implies","Fragments":["an"]},{"Key":"implies an","Fragments":["implicit"]},{"Key":"from bool","Fragments":["to","to"]},{"Key":"to unsigned,","Fragments":["it's"]},{"Key":"unsigned, it's","Fragments":["fine,"]},{"Key":"it's fine,","Fragments":["but"]},{"Key":" @jimmy","Fragments":[":"]},{"Key":"@jimmy :","Fragments":["Looks"]},{"Key":": Looks","Fragments":["like"]},{"Key":"like isalpha","Fragments":["it's"]},{"Key":"isalpha it's","Fragments":["getting"]},{"Key":"getting pulled","Fragments":["in"]},{"Key":"pulled in","Fragments":["by"]},{"Key":"by `#include","Fragments":["\u003cstring\u003e`."]},{"Key":"`#include \u003cstring\u003e`.","Fragments":["I"]},{"Key":"\u003cstring\u003e`. I","Fragments":["didn't"]},{"Key":"that `\u003cstring\u003e`","Fragments":["included"]},{"Key":"`\u003cstring\u003e` included","Fragments":["`\u003ccctype\u003e`."]},{"Key":"included `\u003ccctype\u003e`.","Fragments":["Good"]},{"Key":"`\u003ccctype\u003e`. Good","Fragments":["practice"]},{"Key":"Good practice","Fragments":["would"]},{"Key":"practice would","Fragments":["probably"]},{"Key":"include that","Fragments":["header."]},{"Key":"are spaces","Fragments":["at"]},{"Key":"as clean","Fragments":["as"]},{"Key":"clean as","Fragments":["possible."]},{"Key":"possible. Whilst","Fragments":["I"]},{"Key":"Whilst I","Fragments":["think"]},{"Key":"there would","Fragments":["probably","be"]},{"Key":"this then","Fragments":["strip"]},{"Key":"then strip","Fragments":["the"]},{"Key":"strip the","Fragments":["string","punctuation"]},{"Key":"string (copying","Fragments":["it"]},{"Key":"(copying it","Fragments":["in"]},{"Key":"the process)","Fragments":["and"]},{"Key":"process) and","Fragments":["then"]},{"Key":"then counting","Fragments":["the","the"]},{"Key":"counting the","Fragments":["words,","occurrences","occurrences","non-matching"]},{"Key":"words, I","Fragments":["can't"]},{"Key":"it which","Fragments":["would"]},{"Key":"leave the","Fragments":["code"]},{"Key":"some pointers","Fragments":["on"]},{"Key":"pointers on","Fragments":["how"]},{"Key":"working to","Fragments":["take"]},{"Key":"take these","Fragments":["comments"]},{"Key":"these comments","Fragments":["into"]},{"Key":"comments into","Fragments":["account"]},{"Key":"into account","Fragments":["for","when"]},{"Key":"account for","Fragments":["the"]},{"Key":"iteration now.","Fragments":["I'll"]},{"Key":"now. I'll","Fragments":["post"]},{"Key":"I'll post","Fragments":["that"]},{"Key":"post that","Fragments":["once"]},{"Key":"once it's","Fragments":["complete."]},{"Key":"way, is","Fragments":["there"]},{"Key":"why when","Fragments":["testing"]},{"Key":"when testing","Fragments":["for"]},{"Key":"for outputs","Fragments":["in"]},{"Key":"outputs in","Fragments":["Coliru"]},{"Key":"in Coliru","Fragments":["the"]},{"Key":"Coliru the","Fragments":["code"]},{"Key":"code returns","Fragments":["as"]},{"Key":"returns as","Fragments":["expected,"]},{"Key":"as expected,","Fragments":["but"]},{"Key":"expected, but","Fragments":["when"]},{"Key":"using VS2013+Boost","Fragments":["it"]},{"Key":"VS2013+Boost it","Fragments":["fails"]},{"Key":"it fails","Fragments":["for"]},{"Key":"fails for","Fragments":["the"]},{"Key":"the \"silence\"","Fragments":["test?"]},{"Key":"\"silence\" test?","Fragments":["The"]},{"Key":"test? The","Fragments":["system"]},{"Key":"The system","Fragments":["keeps"]},{"Key":"system keeps","Fragments":["returning"]},{"Key":"keeps returning","Fragments":["\"unknown"]},{"Key":"returning \"unknown","Fragments":["location(0):"]},{"Key":"\"unknown location(0):","Fragments":["fatal"]},{"Key":"location(0): fatal","Fragments":["error"]},{"Key":"in \"silence\":","Fragments":["C:\\Program"]},{"Key":"\"silence\": C:\\Program","Fragments":["Files"]},{"Key":"C:\\Program Files","Fragments":["(x86)\\Microsoft"]},{"Key":"Files (x86)\\Microsoft","Fragments":["Visual"]},{"Key":"(x86)\\Microsoft Visual","Fragments":["Studio"]},{"Key":"Studio 12.0\\VC\\include\\xstring(1698)","Fragments":[":"]},{"Key":"12.0\\VC\\include\\xstring(1698) :","Fragments":["Assertion"]},{"Key":": Assertion","Fragments":["failed:"]},{"Key":"Assertion failed:","Fragments":["string"]},{"Key":"range\" and","Fragments":["I"]},{"Key":"can't figure","Fragments":["out"]},{"Key":"out why,","Fragments":["unless"]},{"Key":"why, unless","Fragments":["it's"]},{"Key":"it's something","Fragments":["related","I"]},{"Key":"something related","Fragments":["to"]},{"Key":"checking empty","Fragments":["cases,"]},{"Key":"empty cases,","Fragments":["as"]},{"Key":"cases, as","Fragments":["you"]},{"Key":"you both","Fragments":["mentioned."]},{"Key":"you rely","Fragments":["on"]},{"Key":"on std::algorithms","Fragments":["to"]},{"Key":"std::algorithms to","Fragments":["trim"]},{"Key":"for lower-case","Fragments":["letters."]},{"Key":"letters. :)","Fragments":["It"]},{"Key":"have three","Fragments":["minor","distinct"]},{"Key":"three minor","Fragments":["suggestions:"]},{"Key":" (1)","Fragments":["Maybe","Why"]},{"Key":"(1) Maybe","Fragments":["\"message\""]},{"Key":"Maybe \"message\"","Fragments":["or"]},{"Key":"\"message\" or","Fragments":["\"request\""]},{"Key":"or \"request\"","Fragments":["would"]},{"Key":"\"request\" would","Fragments":["be"]},{"Key":"string passed","Fragments":["to","to","in"]},{"Key":" (2)","Fragments":["Concerning","To"]},{"Key":"(2) Concerning","Fragments":["your"]},{"Key":"Concerning your","Fragments":["lambda-expressions,"]},{"Key":"your lambda-expressions,","Fragments":["I"]},{"Key":"lambda-expressions, I","Fragments":["prefer"]},{"Key":"prefer less","Fragments":["indented","variables."]},{"Key":"less indented","Fragments":["code."]},{"Key":"indented code.","Fragments":["That"]},{"Key":"code. That","Fragments":["said,"]},{"Key":"suggest the","Fragments":["format"]},{"Key":" \u003ctab\u003e\u003ctab\u003equestion.rbegin(),","Fragments":["question.rend(),"]},{"Key":" \u003ctab\u003e\u003ctab\u003e[](std::string::value_type","Fragments":["val)"]},{"Key":"\u003ctab\u003e\u003ctab\u003e[](std::string::value_type val)","Fragments":["{"]},{"Key":"val) {","Fragments":["return"]},{"Key":"return !std::isspace(val);","Fragments":["}).base(),"]},{"Key":" (3)","Fragments":["Since","Morevoer,"]},{"Key":"(3) Since","Fragments":["C++11,"]},{"Key":"Since C++11,","Fragments":["std::string"]},{"Key":"C++11, std::string","Fragments":["has"]},{"Key":"std::string has","Fragments":["a"]},{"Key":"a back()-method,","Fragments":["so"]},{"Key":"back()-method, so","Fragments":["```*question.rbegin()```"]},{"Key":"so ```*question.rbegin()```","Fragments":["could"]},{"Key":"```*question.rbegin()``` could","Fragments":["be"]},{"Key":"quick implementation","Fragments":["which"]},{"Key":"which passes","Fragments":["all"]},{"Key":"tests, however","Fragments":["is"]},{"Key":"pretty ugly","Fragments":["for"]},{"Key":"ugly for","Fragments":["c++11"]},{"Key":"for c++11","Fragments":["with"]},{"Key":"c++11 with","Fragments":["an"]},{"Key":"explicit for","Fragments":["loop"]},{"Key":"loop iterating","Fragments":["over"]},{"Key":"over indices","Fragments":["of"]},{"Key":"indices of","Fragments":["the","the"]},{"Key":"a boost::zip_iterator","Fragments":["or"]},{"Key":"boost::zip_iterator or","Fragments":["a"]},{"Key":"a some","Fragments":["other"]},{"Key":"other method","Fragments":["of"]},{"Key":"of simultaneously","Fragments":["iterating"]},{"Key":"simultaneously iterating","Fragments":["over"]},{"Key":"two containers","Fragments":["would"]},{"Key":"containers would","Fragments":["be"]},{"Key":"code here","Fragments":["I've","*/"]},{"Key":"here I've","Fragments":["found"]},{"Key":"found std::inner_product","Fragments":["which"]},{"Key":"std::inner_product which","Fragments":["is"]},{"Key":"pretty perfect","Fragments":["fit"]},{"Key":"Your functions","Fragments":["are","are","take"]},{"Key":"they would*.","Fragments":["I"]},{"Key":"would*. I","Fragments":["also"]},{"Key":"about islower","Fragments":["and"]},{"Key":"and isupper","Fragments":["from"]},{"Key":"isupper from","Fragments":["\"cctype\"."]},{"Key":"from \"cctype\".","Fragments":["+1"]},{"Key":"\"cctype\". +1","Fragments":["for"]},{"Key":" (*","Fragments":["if"]},{"Key":"(* if","Fragments":["the"]},{"Key":"not \"ill-formed\";","Fragments":["see"]},{"Key":"\"ill-formed\"; see","Fragments":["(2)"]},{"Key":"see (2)","Fragments":["and"]},{"Key":"(2) and","Fragments":["(3))"]},{"Key":"improve in","Fragments":["your"]},{"Key":"(1) Why","Fragments":["doesn't"]},{"Key":"Why doesn't","Fragments":["```return"]},{"Key":"doesn't ```return","Fragments":["!std::none_of(str.begin(),"]},{"Key":"```return !std::none_of(str.begin(),","Fragments":["str.end(),"]},{"Key":"!std::none_of(str.begin(), str.end(),","Fragments":["islower)```"]},{"Key":"str.end(), islower)```","Fragments":["suffice"]},{"Key":"islower)``` suffice","Fragments":["to"]},{"Key":"suffice to","Fragments":["check"]},{"Key":"yelling at","Fragments":["Bob?"]},{"Key":"(2) To","Fragments":["cite"]},{"Key":"To cite","Fragments":["cplusplus.com:"]},{"Key":"cite cplusplus.com:","Fragments":["\"This"]},{"Key":"cplusplus.com: \"This","Fragments":["function"]},{"Key":"\"This function","Fragments":["(\"back()\")"]},{"Key":"function (\"back()\")","Fragments":["shall"]},{"Key":"(\"back()\") shall","Fragments":["not"]},{"Key":"shall not","Fragments":["be"]},{"Key":"(3) Morevoer,","Fragments":["bob::is_asking(\"What"]},{"Key":"Morevoer, bob::is_asking(\"What","Fragments":["did"]},{"Key":"bob::is_asking(\"What did","Fragments":["you"]},{"Key":"you say?","Fragments":["\")"]},{"Key":"say? \")","Fragments":["evaluates"]},{"Key":"\") evaluates","Fragments":["to"]},{"Key":"false, although","Fragments":["it"]},{"Key":"question. Since","Fragments":["is_asking"]},{"Key":"Since is_asking","Fragments":["is"]},{"Key":"is_asking is","Fragments":["publically"]},{"Key":"is publically","Fragments":["accessible,"]},{"Key":"publically accessible,","Fragments":["it"]},{"Key":"accessible, it","Fragments":["must"]},{"Key":"be reliable,","Fragments":["so"]},{"Key":"reliable, so","Fragments":["trimming"]},{"Key":"so trimming","Fragments":["the"]},{"Key":"trimming the","Fragments":["string","string"]},{"Key":"first would","Fragments":["be","help"]},{"Key":" (4)","Fragments":["I'd"]},{"Key":"(4) I'd","Fragments":["suggest"]},{"Key":"rename your","Fragments":["functions.","expressions"]},{"Key":"functions. \"bob::is_asking\"","Fragments":["_could_"]},{"Key":"\"bob::is_asking\" _could_","Fragments":["be"]},{"Key":"_could_ be","Fragments":["misleading"]},{"Key":"be misleading","Fragments":["because"]},{"Key":"misleading because","Fragments":["it"]},{"Key":"it _reads_","Fragments":["like"]},{"Key":"_reads_ like","Fragments":["a"]},{"Key":"check _if","Fragments":["bob"]},{"Key":"_if bob","Fragments":["were"]},{"Key":"bob were","Fragments":["asking_,"]},{"Key":"were asking_,","Fragments":["but"]},{"Key":"asking_, but","Fragments":["what"]},{"Key":"happens is","Fragments":["you"]},{"Key":"bob _is","Fragments":["asked_"]},{"Key":"_is asked_","Fragments":["about"]},{"Key":"asked_ about","Fragments":["something."]},{"Key":"about something.","Fragments":["So"]},{"Key":"something. So","Fragments":["what"]},{"Key":"about names","Fragments":["like"]},{"Key":"like \"is_yelled_at\",","Fragments":["\"is_asked\"?"]},{"Key":"\"is_yelled_at\", \"is_asked\"?","Fragments":["Sadly,"]},{"Key":"\"is_asked\"? Sadly,","Fragments":["I"]},{"Key":"Sadly, I","Fragments":["can't"]},{"Key":"good expressive","Fragments":["name"]},{"Key":"expressive name","Fragments":["replacing"]},{"Key":"name replacing","Fragments":["\"is_mute\"."]},{"Key":"replacing \"is_mute\".","Fragments":["Any"]},{"Key":"\"is_mute\". Any","Fragments":["suggestions?"]},{"Key":"Unfortunately query.back()","Fragments":["causes"]},{"Key":"query.back() causes","Fragments":["undefined"]},{"Key":"causes undefined","Fragments":["behavior","behavior,"]},{"Key":"behavior when","Fragments":["query","`text`","`statement`"]},{"Key":"when query","Fragments":["is"]},{"Key":"query is","Fragments":["empty.","not"]},{"Key":"is empty.","Fragments":["So","This","So"]},{"Key":"empty. So","Fragments":["I","calling"]},{"Key":"that query","Fragments":["is"]},{"Key":"not empty","Fragments":["before"]},{"Key":"can look","Fragments":["at"]},{"Key":"at its","Fragments":["last"]},{"Key":" Non-member","Fragments":["begin"]},{"Key":"Non-member begin","Fragments":["and"]},{"Key":"idea. Although","Fragments":["it's"]},{"Key":"Although it's","Fragments":["a"]},{"Key":"bit annoying","Fragments":["since"]},{"Key":"annoying since","Fragments":["it's"]},{"Key":"it's longer","Fragments":["to"]},{"Key":"longer to","Fragments":["write","get","write"]},{"Key":" Checking","Fragments":["for"]},{"Key":"'?' as","Fragments":["well."]},{"Key":"conditions for","Fragments":["this","yelling/question/silence"]},{"Key":"exercise are","Fragments":["stated"]},{"Key":"are stated","Fragments":["very"]},{"Key":"stated very","Fragments":["loosely."]},{"Key":"very loosely.","Fragments":["Without"]},{"Key":"loosely. Without","Fragments":["the"]},{"Key":"unit tests,","Fragments":["I'd","then"]},{"Key":"tests, I'd","Fragments":["have"]},{"Key":"to output","Fragments":["-"]},{"Key":"output -","Fragments":["and"]},{"Key":"don't cover","Fragments":["a","namespaces,"]},{"Key":"cover a","Fragments":["lot","response"]},{"Key":"of cases.","Fragments":["For"]},{"Key":"cases. For","Fragments":["example,","example"]},{"Key":"example, what","Fragments":["happens"]},{"Key":"say \"HELLO?\"?","Fragments":["Is"]},{"Key":"\"HELLO?\"? Is","Fragments":["that"]},{"Key":"shout or","Fragments":["a","not"]},{"Key":"actually not","Fragments":["too"]},{"Key":"too concerned","Fragments":["about","about"]},{"Key":"about cases","Fragments":["that"]},{"Key":"aren't covered","Fragments":["by"]},{"Key":"simply too","Fragments":["many"]},{"Key":"many to","Fragments":["cover."]},{"Key":"1) Yea,","Fragments":["the"]},{"Key":"Yea, the","Fragments":["mapped"]},{"Key":"mapped value","Fragments":["is"]},{"Key":"is [value-initialized](http://en.cppreference.com/w/cpp/container/map/operator_at),","Fragments":["which"]},{"Key":"[value-initialized](http://en.cppreference.com/w/cpp/container/map/operator_at), which","Fragments":["is"]},{"Key":"2) True.","Fragments":["Even"]},{"Key":"True. Even","Fragments":["if"]},{"Key":"more efficient,","Fragments":["it's"]},{"Key":"efficient, it's","Fragments":["probably"]},{"Key":"probably cleaner","Fragments":["to"]},{"Key":"the transform","Fragments":["outside","semantics."]},{"Key":"transform outside","Fragments":["the"]},{"Key":"1) True,","Fragments":["I","I"]},{"Key":"True, I","Fragments":["forgot","could","could"]},{"Key":"really lose","Fragments":["anything."]},{"Key":"lose anything.","Fragments":["I'm"]},{"Key":"anything. I'm","Fragments":["not"]},{"Key":"namespaces in","Fragments":["that"]},{"Key":"way. For","Fragments":["a"]},{"Key":"single function,","Fragments":["there"]},{"Key":"function, there","Fragments":["isn't","are","is"]},{"Key":"a difference.","Fragments":["But"]},{"Key":"difference. But","Fragments":["if"]},{"Key":"if I'd","Fragments":["ever"]},{"Key":"I'd ever","Fragments":["need"]},{"Key":"ever need","Fragments":["helper"]},{"Key":"need helper","Fragments":["functions"]},{"Key":"functions or","Fragments":["persistent"]},{"Key":"or persistent","Fragments":["variables,"]},{"Key":"persistent variables,","Fragments":["a"]},{"Key":"variables, a","Fragments":["class"]},{"Key":"is decidedly","Fragments":["the"]},{"Key":"decidedly the","Fragments":["better"]},{"Key":"better alternative.","Fragments":["If"]},{"Key":"alternative. If","Fragments":["compute()"]},{"Key":"If compute()","Fragments":["were"]},{"Key":"compute() were","Fragments":["part"]},{"Key":"were part","Fragments":["of"]},{"Key":"larger set","Fragments":["of"]},{"Key":"of functions,","Fragments":["I'd"]},{"Key":"functions, I'd","Fragments":["have"]},{"Key":"mostly preference","Fragments":["since"]},{"Key":"preference since","Fragments":["neither"]},{"Key":"since neither","Fragments":["option"]},{"Key":"neither option","Fragments":["really"]},{"Key":"option really","Fragments":["does"]},{"Key":" Bob","Fragments":["-"]},{"Key":"- now","Fragments":["with"]},{"Key":"with 100%","Fragments":["more"]},{"Key":"100% more","Fragments":["std::begin()!"]},{"Key":"Looks weird","Fragments":["using"]},{"Key":"weird using","Fragments":["the"]},{"Key":"declarations there;","Fragments":["probably"]},{"Key":"there; probably","Fragments":["not"]},{"Key":"\u003cli\u003eThe `if`","Fragments":["check"]},{"Key":"`if` check","Fragments":["for"]},{"Key":"for size","Fragments":["equality"]},{"Key":"size equality","Fragments":["which"]},{"Key":"equality which","Fragments":["ensures"]},{"Key":"which ensures","Fragments":["that"]},{"Key":"substring is","Fragments":["not"]},{"Key":"not detected","Fragments":["has"]},{"Key":"detected has","Fragments":["been"]},{"Key":"been removed","Fragments":["and","and"]},{"Key":"now handled","Fragments":["by","in-class"]},{"Key":"handled by","Fragments":["the","std::string,"]},{"Key":"which check","Fragments":["for"]},{"Key":" \u003cli\u003e`fillDictionary()`","Fragments":["now"]},{"Key":"\u003cli\u003e`fillDictionary()` now","Fragments":["throws"]},{"Key":"now throws","Fragments":["a"]},{"Key":"throws a","Fragments":["`std::logic_error`"]},{"Key":"a `std::logic_error`","Fragments":["when"]},{"Key":"`std::logic_error` when","Fragments":["a"]},{"Key":"a non-unix","Fragments":["system"]},{"Key":"non-unix system","Fragments":["is"]},{"Key":" \u003cli\u003eTransforming","Fragments":["`m_anagram`"]},{"Key":"\u003cli\u003eTransforming `m_anagram`","Fragments":["to"]},{"Key":"lowercase is","Fragments":["now"]},{"Key":"handled in-class","Fragments":["as"]},{"Key":"in-class as","Fragments":["it"]},{"Key":" \u003cli\u003e`m_anagram`","Fragments":["is"]},{"Key":"\u003cli\u003e`m_anagram` is","Fragments":["checked"]},{"Key":"is checked","Fragments":["for","for"]},{"Key":"emptyness before","Fragments":["any"]},{"Key":"before any","Fragments":["other"]},{"Key":"other operation;","Fragments":["returning"]},{"Key":"operation; returning","Fragments":["if"]},{"Key":"returning if","Fragments":["it","any"]},{"Key":"learned C++","Fragments":["regex"]},{"Key":"C++ regex","Fragments":["after"]},{"Key":"regex after","Fragments":["the"]},{"Key":"Bob question,","Fragments":["and"]},{"Key":"question, and","Fragments":["using","loop"]},{"Key":"seemed only","Fragments":["natural."]},{"Key":"only natural.","Fragments":["A"]},{"Key":"natural. A","Fragments":["faster-running"]},{"Key":"A faster-running","Fragments":["solution"]},{"Key":"faster-running solution","Fragments":["involving"]},{"Key":"solution involving","Fragments":["checking"]},{"Key":"involving checking","Fragments":["the"]},{"Key":"probably doable,","Fragments":["but"]},{"Key":"doable, but","Fragments":["this"]},{"Key":"is simpler","Fragments":["and"]},{"Key":"simpler and","Fragments":["more"]},{"Key":"more understandable","Fragments":["imo."]},{"Key":"say, the","Fragments":["readme"]},{"Key":"the readme","Fragments":["files","and","included","should"]},{"Key":"readme files","Fragments":["for"]},{"Key":"exercises become","Fragments":["worse."]},{"Key":"become worse.","Fragments":["Having"]},{"Key":"worse. Having","Fragments":["to"]},{"Key":"Having to","Fragments":["read"]},{"Key":"You get","Fragments":["the","the"]},{"Key":"message but","Fragments":["do"]},{"Key":"its being","Fragments":["zero-length,"]},{"Key":"being zero-length,","Fragments":["then"]},{"Key":"zero-length, then","Fragments":["index"]},{"Key":"then index","Fragments":["into"]},{"Key":"negative direction.","Fragments":["If"]},{"Key":"direction. If","Fragments":["this"]},{"Key":"this passed","Fragments":["the"]},{"Key":"test then","Fragments":["it"]},{"Key":"was luck","Fragments":["that"]},{"Key":"luck that","Fragments":["you"]},{"Key":"null byte","Fragments":["right"]},{"Key":"byte right","Fragments":["before"]},{"Key":"string. Change","Fragments":["this"]},{"Key":"Change this","Fragments":["to"]},{"Key":"be safer,","Fragments":["or..."]},{"Key":"- When","Fragments":["in"]},{"Key":"When in","Fragments":["Rome,"]},{"Key":"in Rome,","Fragments":["do"]},{"Key":"Rome, do","Fragments":["as"]},{"Key":"the Romans","Fragments":["do."]},{"Key":"Romans do.","Fragments":["Use"]},{"Key":"do. Use","Fragments":["C++"]},{"Key":"Use C++","Fragments":["functions,"]},{"Key":"C++ functions,","Fragments":["not"]},{"Key":"not C","Fragments":["with"]},{"Key":"- Include","Fragments":["`cctype`"]},{"Key":"Include `cctype`","Fragments":["for"]},{"Key":"`cctype` for","Fragments":["its"]},{"Key":"its `islower()`","Fragments":["and"]},{"Key":"`islower()` and","Fragments":["`isupper()`"]},{"Key":"and `isupper()`","Fragments":["functions"]},{"Key":"`isupper()` functions","Fragments":["instead"]},{"Key":"using `msg[i]","Fragments":["\u003e="]},{"Key":"`msg[i] \u003e=","Fragments":["'A'"]},{"Key":"\u0026\u0026 msg[i]","Fragments":["\u003c="]},{"Key":"msg[i] \u003c=","Fragments":["'Z'`."]},{"Key":"'Z'`. It's","Fragments":["much"]},{"Key":"has negligible","Fragments":["performance"]},{"Key":"negligible performance","Fragments":["impact."]},{"Key":"for tabs,","Fragments":["newlines,"]},{"Key":"newlines, line","Fragments":["feeds,"]},{"Key":"line feeds,","Fragments":["etc."]},{"Key":"feeds, etc.","Fragments":["in"]},{"Key":"to spaces","Fragments":["for"]},{"Key":"spaces for","Fragments":["a"]},{"Key":"blank response.","Fragments":["`cctype`'s"]},{"Key":"response. `cctype`'s","Fragments":["`isspace()`"]},{"Key":"`cctype`'s `isspace()`","Fragments":["is"]},{"Key":"`isspace()` is","Fragments":["nice"]},{"Key":"to const","Fragments":["anything","variables.","referencing","std::string"]},{"Key":"const anything","Fragments":["that"]},{"Key":"shouldn't change.","Fragments":["Use"]},{"Key":"change. Use","Fragments":["`const"]},{"Key":"Use `const","Fragments":["char","std::string\u0026`"]},{"Key":"* const","Fragments":["string`"]},{"Key":"const string`","Fragments":["or"]},{"Key":"string` or","Fragments":["`const"]},{"Key":"`const char[]","Fragments":["string`"]},{"Key":"char[] string`","Fragments":["for"]},{"Key":"various responses,","Fragments":["or,"]},{"Key":"responses, or,","Fragments":["again,"]},{"Key":"or, again,","Fragments":["use"]},{"Key":"again, use","Fragments":["C++"]},{"Key":"use C++","Fragments":["strings.","you"]},{"Key":"C programmer,","Fragments":["and"]},{"Key":"programmer, and","Fragments":["subconsciously"]},{"Key":"and subconsciously","Fragments":["write"]},{"Key":"subconsciously write","Fragments":["C99-like"]},{"Key":"write C99-like","Fragments":["code"]},{"Key":"C99-like code","Fragments":["in"]},{"Key":"any language","Fragments":["I"]},{"Key":"to learn.","Fragments":["Please"]},{"Key":"learn. Please","Fragments":["offer"]},{"Key":"Please offer","Fragments":["advice"]},{"Key":"offer advice","Fragments":["as"]},{"Key":"advice as","Fragments":["to"]},{"Key":"can better","Fragments":["make"]},{"Key":"better make","Fragments":["use"]},{"Key":"of C++'s","Fragments":["OO/functional"]},{"Key":"C++'s OO/functional","Fragments":["features."]},{"Key":"someone provides","Fragments":["duplicates"]},{"Key":"provides duplicates","Fragments":["in"]},{"Key":"duplicates in","Fragments":["the","the"]},{"Key":"candidate list?","Fragments":["Should"]},{"Key":"list? Should","Fragments":["your"]},{"Key":"Should your","Fragments":["algorithm","check"]},{"Key":"algorithm return","Fragments":["the"]},{"Key":"why anagram","Fragments":["is"]},{"Key":"separate method","Fragments":["in"]},{"Key":"namespace anagram","Fragments":["that","{"]},{"Key":"anagram that","Fragments":["just","exists"]},{"Key":"an Anagrammer","Fragments":["-"]},{"Key":"Anagrammer -","Fragments":["could"]},{"Key":"- could","Fragments":["be"]},{"Key":"is named","Fragments":["anagram."]},{"Key":"been so","Fragments":["much"]},{"Key":"word was","Fragments":["considered","equal"]},{"Key":"was considered","Fragments":["anagram"]},{"Key":"considered anagram","Fragments":["of"]},{"Key":"itself. Since","Fragments":["that's"]},{"Key":"Since that's","Fragments":["not"]},{"Key":"use two","Fragments":["member"]},{"Key":"two member","Fragments":["variables,"]},{"Key":"variables, one","Fragments":["with"]},{"Key":"the word,","Fragments":["in"]},{"Key":"word, in","Fragments":["this"]},{"Key":"sort it","Fragments":["just","out."]},{"Key":"just once,","Fragments":["and"]},{"Key":"once, and","Fragments":["not"]},{"Key":"not at","Fragments":["every"]},{"Key":"generic code","Fragments":["that"]},{"Key":"every situation,","Fragments":["not"]},{"Key":"situation, not","Fragments":["just"]},{"Key":"the testcase.","Fragments":["Instead"]},{"Key":"testcase. Instead","Fragments":["of"]},{"Key":"exact sentence,","Fragments":["you"]},{"Key":"sentence, you","Fragments":["should"]},{"Key":"all capital","Fragments":["(for","letters"]},{"Key":"capital (for","Fragments":["yelling),"]},{"Key":"(for yelling),","Fragments":["or"]},{"Key":"yelling), or","Fragments":["if"]},{"Key":"it ends","Fragments":["with"]},{"Key":"mark (which","Fragments":["represents"]},{"Key":"(which represents","Fragments":["a"]},{"Key":"represents a","Fragments":["question)."]},{"Key":"you'd like","Fragments":["it"]},{"Key":"more c++,","Fragments":["you"]},{"Key":"c++, you","Fragments":["can"]},{"Key":" something","Fragments":["like"]},{"Key":"\u003c message.length();","Fragments":["i++)"]},{"Key":"message.length(); i++)","Fragments":["{"]},{"Key":" is_anything","Fragments":["=","=="]},{"Key":"is_anything =","Fragments":["true;"]},{"Key":" could","Fragments":["become"]},{"Key":"could become","Fragments":["something"]},{"Key":"become something","Fragments":["like:"]},{"Key":"for (auto\u0026","Fragments":["it","c:","c:","word"]},{"Key":"(auto\u0026 it","Fragments":[":"]},{"Key":"is_anything ==","Fragments":["(it"]},{"Key":"== (it","Fragments":["!="]},{"Key":"I've omitted","Fragments":["braces"]},{"Key":"omitted braces","Fragments":["from"]},{"Key":"braces from","Fragments":["control"]},{"Key":"from control","Fragments":["statements"]},{"Key":"control statements","Fragments":["where"]},{"Key":"statements where","Fragments":["possible."]},{"Key":"use `else`","Fragments":["unnecessarily"]},{"Key":"`else` unnecessarily","Fragments":["in"]},{"Key":"unnecessarily in","Fragments":["`bob::hey`"]},{"Key":"in `bob::hey`","Fragments":["for"]},{"Key":"`bob::hey` for","Fragments":["better"]},{"Key":"for better","Fragments":["readability."]},{"Key":"also factored","Fragments":["the"]},{"Key":"factored the","Fragments":["message"]},{"Key":"message types","Fragments":["out"]},{"Key":"types out","Fragments":["into"]},{"Key":"individual functions;","Fragments":["the"]},{"Key":"functions; the","Fragments":["program"]},{"Key":"program would","Fragments":["be"]},{"Key":"be significantly","Fragments":["shorter","faster."]},{"Key":"significantly shorter","Fragments":["without"]},{"Key":"shorter without","Fragments":["them"]},{"Key":"without them","Fragments":["but"]},{"Key":"them but","Fragments":["also"]},{"Key":"also practically","Fragments":["illegible."]},{"Key":"helper class","Fragments":["to"]},{"Key":"to abstract","Fragments":["away"]},{"Key":"abstract away","Fragments":["matching"]},{"Key":"away matching","Fragments":["anagrams."]},{"Key":"matching anagrams.","Fragments":["Some"]},{"Key":"anagrams. Some","Fragments":["comments:"]},{"Key":"be cheaper","Fragments":["to"]},{"Key":"to preprocess","Fragments":["the"]},{"Key":"preprocess the","Fragments":["string"]},{"Key":"string than","Fragments":["to"]},{"Key":"to query","Fragments":["a"]},{"Key":"query a","Fragments":["map"]},{"Key":"map character","Fragments":["by"]},{"Key":"character by","Fragments":["character","character"]},{"Key":"by character","Fragments":["for","comparison."]},{"Key":"character for","Fragments":["each"]},{"Key":"2) What","Fragments":["happens"]},{"Key":"same candidate","Fragments":["is","is"]},{"Key":"candidate is","Fragments":["present","present"]},{"Key":"present multiple","Fragments":["times"]},{"Key":"put this","Fragments":["in","in"]},{"Key":"called `bob`","Fragments":["not"]},{"Key":"`bob` not","Fragments":["a"]},{"Key":"put those","Fragments":["private"]},{"Key":"namespace instead.","Fragments":["That"]},{"Key":"how namespaces","Fragments":["are"]},{"Key":"need files","Fragments":["named"]},{"Key":"files named","Fragments":["`bob.h`"]},{"Key":"named `bob.h`","Fragments":["and"]},{"Key":"`bob.h` and","Fragments":["`bob.cpp`."]},{"Key":"and `bob.cpp`.","Fragments":["The"]},{"Key":"`bob.cpp`. The","Fragments":["tests"]},{"Key":" Wanted","Fragments":["to","this"]},{"Key":"Wanted to","Fragments":["make"]},{"Key":"an optimized","Fragments":["version"]},{"Key":"runs through","Fragments":["the"]},{"Key":"string once.","Fragments":["And"]},{"Key":"once. And","Fragments":["as"]},{"Key":"And as","Fragments":["a"]},{"Key":"a bonus","Fragments":["it"]},{"Key":"bonus it","Fragments":["does"]},{"Key":"use \"algorithm\"","Fragments":["header."]},{"Key":"background and","Fragments":["have"]},{"Key":"have very","Fragments":["limited"]},{"Key":"very limited","Fragments":["c++"]},{"Key":"limited c++","Fragments":["experience."]},{"Key":"c++ experience.","Fragments":["The"]},{"Key":"experience. The","Fragments":["exercise"]},{"Key":"exercise was","Fragments":["relatively","readability","fun"]},{"Key":"was relatively","Fragments":["easy"]},{"Key":"relatively easy","Fragments":["to","to","to","to","to"]},{"Key":"to solve.","Fragments":["The","I"]},{"Key":"solve. The","Fragments":["only"]},{"Key":"real hurdle","Fragments":["was"]},{"Key":"hurdle was","Fragments":["dealing"]},{"Key":"was dealing","Fragments":["with"]},{"Key":"with queries","Fragments":["that"]},{"Key":"queries that","Fragments":["have"]},{"Key":"letters to","Fragments":["evaluate"]},{"Key":"evaluate if","Fragments":["it's","that's"]},{"Key":"not --","Fragments":["just"]},{"Key":"-- just","Fragments":["needed"]},{"Key":"to realize","Fragments":["that"]},{"Key":"char that","Fragments":["returns"]},{"Key":"false when","Fragments":["evaluating"]},{"Key":"when evaluating","Fragments":["both"]},{"Key":"evaluating both","Fragments":["its"]},{"Key":"both its","Fragments":["upper"]},{"Key":"its upper","Fragments":["and"]},{"Key":"lower cases","Fragments":["is"]},{"Key":"cases is","Fragments":["not"]},{"Key":" Yeah.","Fragments":["I"]},{"Key":"Yeah. I","Fragments":["realized"]},{"Key":"realized this","Fragments":["when","was"]},{"Key":"was nitpicking","Fragments":["other"]},{"Key":"nitpicking other","Fragments":["people's"]},{"Key":"people's code.","Fragments":["I"]},{"Key":"didn't understand","Fragments":["the"]},{"Key":"the exercises","Fragments":["very"]},{"Key":"exercises very","Fragments":["well."]},{"Key":"I maximize","Fragments":["readability"]},{"Key":"maximize readability","Fragments":["on"]},{"Key":"readability on","Fragments":["this","this"]},{"Key":"didn't quite","Fragments":["understand"]},{"Key":"quite understand","Fragments":["it","what"]},{"Key":"simple namespace","Fragments":["instead"]},{"Key":" Remember,","Fragments":["the"]},{"Key":"Remember, the","Fragments":["purpose"]},{"Key":"very advanced","Fragments":["programmer."]},{"Key":"Wow. Regex","Fragments":["is"]},{"Key":"Regex is","Fragments":["probably","a"]},{"Key":"probably overkill","Fragments":["but"]},{"Key":"overkill but","Fragments":["I"]},{"Key":"still like","Fragments":["the"]},{"Key":"solution though!","Fragments":["I"]},{"Key":"though! I","Fragments":["think"]},{"Key":"code comments","Fragments":["would"]},{"Key":"would help.","Fragments":["In"]},{"Key":"help. In","Fragments":["general,"]},{"Key":"general, regex","Fragments":["is"]},{"Key":"really difficult","Fragments":["to"]},{"Key":"who don't","Fragments":["know"]},{"Key":"know regex","Fragments":["so"]},{"Key":"regex so","Fragments":["I"]},{"Key":"that readability","Fragments":["is"]},{"Key":"new for-loop","Fragments":["constructs"]},{"Key":"for-loop constructs","Fragments":["in"]},{"Key":"C++11. The","Fragments":["code"]},{"Key":"that bother","Fragments":["me"]},{"Key":"bother me","Fragments":["about"]},{"Key":"that ```#include","Fragments":["\u003cmap\u003e```"]},{"Key":"\u003cmap\u003e``` is","Fragments":["required"]},{"Key":"required in","Fragments":["word_count.h"]},{"Key":"in word_count.h","Fragments":["to"]},{"Key":"word_count.h to","Fragments":["get"]},{"Key":"get compilation","Fragments":["working"]},{"Key":"compilation working","Fragments":["-"]},{"Key":"working -","Fragments":["If"]},{"Key":"understand correctly,","Fragments":["it's"]},{"Key":"correctly, it's","Fragments":["best"]},{"Key":"best practice","Fragments":["to"]},{"Key":"the ```#include```","Fragments":["directives"]},{"Key":"```#include``` directives","Fragments":["in"]},{"Key":"directives in","Fragments":["the"]},{"Key":"implementation rather","Fragments":["than"]},{"Key":" Secondly,","Fragments":["I'm"]},{"Key":"Secondly, I'm","Fragments":["sure"]},{"Key":"punctuation marks","Fragments":["without","contains"]},{"Key":"marks without","Fragments":["looping"]},{"Key":"without looping","Fragments":["through"]},{"Key":"characters (although","Fragments":["presumably"]},{"Key":"(although presumably","Fragments":["there"]},{"Key":"presumably there","Fragments":["will"]},{"Key":"sufficiently low","Fragments":["level)."]},{"Key":"plus side,","Fragments":["I"]},{"Key":"side, I","Fragments":["really"]},{"Key":"string manipulation.","Fragments":["Presumably"]},{"Key":"manipulation. Presumably","Fragments":["they"]},{"Key":"Presumably they","Fragments":["are"]},{"Key":"are nice","Fragments":["and"]},{"Key":"and efficient","Fragments":["as"]},{"Key":"strings get","Fragments":["longer."]},{"Key":"get longer.","Fragments":["Also,"]},{"Key":"longer. Also,","Fragments":["I'd"]},{"Key":"Also, I'd","Fragments":["not","prefer"]},{"Key":"I'd not","Fragments":["come"]},{"Key":"not come","Fragments":["across"]},{"Key":"come across","Fragments":["the"]},{"Key":"map data","Fragments":["type"]},{"Key":"type before","Fragments":["which"]},{"Key":"before which","Fragments":["I"]},{"Key":"see being","Fragments":["useful."]},{"Key":"of string::back(),","Fragments":["I"]},{"Key":"string::back(), I","Fragments":["wasn't"]},{"Key":"wasn't even","Fragments":["aware"]},{"Key":"even aware","Fragments":["of"]},{"Key":"for traversing","Fragments":["the"]},{"Key":"times than","Fragments":["necessary,"]},{"Key":"than necessary,","Fragments":["I"]},{"Key":"necessary, I","Fragments":["don't"]},{"Key":"problem because","Fragments":["any_of"]},{"Key":"because any_of","Fragments":["will"]},{"Key":"any_of will","Fragments":["return"]},{"Key":"return once","Fragments":["a"]},{"Key":"once a","Fragments":["single"]},{"Key":"single match","Fragments":["is"]},{"Key":"match is","Fragments":["found."]},{"Key":"the control","Fragments":["flow"]},{"Key":"flow clean","Fragments":["and"]},{"Key":"and separated","Fragments":["it"]},{"Key":"separated it","Fragments":["out"]},{"Key":"yelling detection,","Fragments":["it"]},{"Key":"detection, it","Fragments":["seems"]},{"Key":"like kind","Fragments":["of"]},{"Key":"a mash","Fragments":["of"]},{"Key":"mash of","Fragments":["control"]},{"Key":"of control","Fragments":["options."]},{"Key":"control options.","Fragments":["It"]},{"Key":"options. It","Fragments":["took"]},{"Key":"understand your","Fragments":["logic","code","basic"]},{"Key":"your logic","Fragments":["here."]},{"Key":"logic here.","Fragments":["It"]},{"Key":"check 2","Fragments":["conditions"]},{"Key":"2 conditions","Fragments":["in"]},{"Key":"You detect","Fragments":["yelling"]},{"Key":"detect yelling","Fragments":["if"]},{"Key":"yelling if","Fragments":["you"]},{"Key":"you detect","Fragments":["upper"]},{"Key":"detect upper","Fragments":["case"]},{"Key":"don't detect","Fragments":["any"]},{"Key":"detect any","Fragments":["lower"]},{"Key":"flow here","Fragments":["could"]},{"Key":"here could","Fragments":["be"]},{"Key":"be cleaned","Fragments":["up"]},{"Key":"cleaned up","Fragments":["a"]},{"Key":"a little.","Fragments":["I"]},{"Key":"little. I","Fragments":["would"]},{"Key":"consider renaming","Fragments":["your"]},{"Key":"renaming your","Fragments":["variables"]},{"Key":"a minimum","Fragments":["to"]},{"Key":"readable. Right","Fragments":["now"]},{"Key":"names read","Fragments":["like"]},{"Key":"read like","Fragments":["you're"]},{"Key":"you're testing","Fragments":["for"]},{"Key":"single uppercase","Fragments":["letter."]},{"Key":"Line 64","Fragments":["in"]},{"Key":"64 in","Fragments":["silent"]},{"Key":"in silent","Fragments":["would"]},{"Key":"silent would","Fragments":["probably"]},{"Key":"the isspace","Fragments":["function."]},{"Key":"the cstring","Fragments":["library"]},{"Key":"cstring library","Fragments":["because"]},{"Key":"was familiar","Fragments":["and"]},{"Key":"the required","Fragments":["functionality","code","code","functionality"]},{"Key":"required functionality","Fragments":["is","to"]},{"Key":"functionality is","Fragments":["not"]},{"Key":"too complex.","Fragments":["Using"]},{"Key":"complex. Using","Fragments":["strpbrk"]},{"Key":"Using strpbrk","Fragments":["means"]},{"Key":"strpbrk means","Fragments":["a"]},{"Key":"of comparisons","Fragments":["have"]},{"Key":"comparisons have","Fragments":["to"]},{"Key":"be made,","Fragments":["but"]},{"Key":"made, but","Fragments":["I","that"]},{"Key":"make against","Fragments":["the"]},{"Key":"string (though","Fragments":["I"]},{"Key":"see I","Fragments":["could"]},{"Key":"third check","Fragments":["to"]},{"Key":"first or","Fragments":["second"]},{"Key":"or second","Fragments":["position"]},{"Key":"second position","Fragments":["to"]},{"Key":"reduce strpbrk","Fragments":["calls)."]},{"Key":"Just looking","Fragments":["this"]},{"Key":"looking this","Fragments":["over,"]},{"Key":"this over,","Fragments":["I"]},{"Key":"over, I","Fragments":["don't"]},{"Key":"statements are.","Fragments":["Typically"]},{"Key":"are. Typically","Fragments":["I"]},{"Key":"Typically I","Fragments":["just"]},{"Key":"just see","Fragments":["using"]},{"Key":"see using","Fragments":["in"]},{"Key":"namespace, i.e.","Fragments":["\"using"]},{"Key":"i.e. \"using","Fragments":["namespace"]},{"Key":"std;\" That","Fragments":["statement"]},{"Key":"That statement","Fragments":["alone"]},{"Key":"statement alone","Fragments":["might"]},{"Key":"alone might","Fragments":["accomplish"]},{"Key":"might accomplish","Fragments":["what"]},{"Key":"accomplish what","Fragments":["you're"]},{"Key":"you're hoping","Fragments":["for."]},{"Key":"think declaring","Fragments":["yelling,"]},{"Key":"declaring yelling,","Fragments":["saysNothing"]},{"Key":"yelling, saysNothing","Fragments":["and"]},{"Key":"saysNothing and","Fragments":["questioning"]},{"Key":"and questioning","Fragments":["as"]},{"Key":"questioning as","Fragments":["static"]},{"Key":"static was","Fragments":["unnecessary."]},{"Key":"was unnecessary.","Fragments":["They're"]},{"Key":"unnecessary. They're","Fragments":["not"]},{"Key":"They're not","Fragments":["part"]},{"Key":"class so","Fragments":["static"]},{"Key":"so static","Fragments":["is"]},{"Key":"static is","Fragments":["not","probably"]},{"Key":"a modifier","Fragments":["that"]},{"Key":"modifier that","Fragments":["really"]},{"Key":"really applies.","Fragments":["You"]},{"Key":"applies. You","Fragments":["could"]},{"Key":"probably drop","Fragments":["it"]},{"Key":"drop it","Fragments":["and"]},{"Key":"everything would","Fragments":["continue"]},{"Key":"would continue","Fragments":["to"]},{"Key":"In hey,","Fragments":["you"]},{"Key":"hey, you","Fragments":["could"]},{"Key":"simplify this","Fragments":["statement"]},{"Key":"this statement","Fragments":["by"]},{"Key":"statement by","Fragments":["removing"]},{"Key":"else clauses.","Fragments":["An"]},{"Key":"clauses. An","Fragments":["'if'"]},{"Key":"An 'if'","Fragments":["statement"]},{"Key":"'if' statement","Fragments":["that"]},{"Key":"statement that","Fragments":["contains"]},{"Key":"a 'return'","Fragments":["clause"]},{"Key":"'return' clause","Fragments":["in"]},{"Key":"clause in","Fragments":["the"]},{"Key":"main body","Fragments":["does"]},{"Key":"body does","Fragments":["not"]},{"Key":"an else.","Fragments":["The"]},{"Key":"else. The","Fragments":["return","only"]},{"Key":"return short-circuits","Fragments":["the"]},{"Key":"short-circuits the","Fragments":["rest"]},{"Key":"for free.","Fragments":["Same"]},{"Key":"free. Same","Fragments":["comment"]},{"Key":"Same comment","Fragments":["for"]},{"Key":"your yelling","Fragments":["function.","function,"]},{"Key":"you separated","Fragments":["your"]},{"Key":"separated your","Fragments":["control"]},{"Key":"your control","Fragments":["flow"]},{"Key":"flow in","Fragments":["hey"]},{"Key":"in hey","Fragments":["from"]},{"Key":"the decisions.","Fragments":["it's"]},{"Key":"decisions. it's","Fragments":["good"]},{"Key":"good best","Fragments":["practice."]},{"Key":"the quiet","Fragments":["thing,"]},{"Key":"quiet thing,","Fragments":["I"]},{"Key":"use _stringstream_","Fragments":["that"]},{"Key":"_stringstream_ that","Fragments":["way."]},{"Key":"way. so","Fragments":["that"]},{"Key":"some flaws","Fragments":["here,"]},{"Key":"flaws here,","Fragments":["ordered"]},{"Key":"here, ordered","Fragments":["roughly"]},{"Key":"ordered roughly","Fragments":["by"]},{"Key":"roughly by","Fragments":["priority:"]},{"Key":"- `is_quiet`","Fragments":["should"]},{"Key":"`is_quiet` should","Fragments":["return"]},{"Key":"a `bool`.","Fragments":["As"]},{"Key":"`bool`. As","Fragments":["it"]},{"Key":"stands, I","Fragments":["don't"]},{"Key":"do. `string(\u0026text[first],","Fragments":["\u0026text[last]);`"]},{"Key":"`string(\u0026text[first], \u0026text[last]);`","Fragments":["copies"]},{"Key":"\u0026text[last]);` copies","Fragments":["a"]},{"Key":"copies a","Fragments":["string"]},{"Key":"string starting","Fragments":["from"]},{"Key":"starting from","Fragments":["`\u0026text[first]`","the"]},{"Key":"from `\u0026text[first]`","Fragments":["with"]},{"Key":"`\u0026text[first]` with","Fragments":["length"]},{"Key":"with length","Fragments":["of"]},{"Key":"of `\u0026text[last]`","Fragments":["(which"]},{"Key":"`\u0026text[last]` (which","Fragments":["is"]},{"Key":"- `is_question`","Fragments":["is"]},{"Key":"`is_question` is","Fragments":["undefined"]},{"Key":"when `text`","Fragments":["is"]},{"Key":"`text` is","Fragments":["empty."]},{"Key":"- `is_upper`","Fragments":["can"]},{"Key":"easily confused","Fragments":["with"]},{"Key":"std;` can","Fragments":["cause"]},{"Key":"cause some","Fragments":["name"]},{"Key":"name clashes,","Fragments":["especially"]},{"Key":"clashes, especially","Fragments":["when"]},{"Key":"- `contains_alpha`","Fragments":["can"]},{"Key":"`contains_alpha` can","Fragments":["be"]},{"Key":"a one-liner:","Fragments":["`any_of(begin(text),end(text),isalpha)`"]},{"Key":"- Maybe","Fragments":["put"]},{"Key":"Maybe put","Fragments":["in"]},{"Key":"Your helper","Fragments":["functions","functions"]},{"Key":"be hidden","Fragments":["in"]},{"Key":"hidden in","Fragments":["an"]},{"Key":"namespace, so","Fragments":["it","the","I"]},{"Key":"be impossible","Fragments":["to"]},{"Key":"access it","Fragments":["from"]},{"Key":"the map;","Fragments":["it"]},{"Key":"map; it","Fragments":["makes"]},{"Key":"what sort","Fragments":["of"]},{"Key":"of response","Fragments":["is","from"]},{"Key":"be ejected","Fragments":["for"]},{"Key":"ejected for","Fragments":["a"]},{"Key":"given case,","Fragments":["and"]},{"Key":"responses easily","Fragments":["expandable."]},{"Key":"are library","Fragments":["functions"]},{"Key":"of looking","Fragments":["through","for"]},{"Key":"looking through","Fragments":["the"]},{"Key":"string letter","Fragments":["by"]},{"Key":"And moving","Fragments":["the"]},{"Key":"the isQuestion","Fragments":["check"]},{"Key":"isQuestion check","Fragments":["to"]},{"Key":"start would","Fragments":["eliminate"]},{"Key":"would eliminate","Fragments":["the"]},{"Key":"parse through","Fragments":["the"]},{"Key":"that corner","Fragments":["case."]},{"Key":"Moved to","Fragments":["namespaces","the"]},{"Key":"namespaces instead","Fragments":["of"]},{"Key":"of class.","Fragments":["Still"]},{"Key":"class. Still","Fragments":["using"]},{"Key":"Still using","Fragments":["the"]},{"Key":"old cstring.","Fragments":["Encapsulated"]},{"Key":"cstring. Encapsulated","Fragments":["functionality"]},{"Key":"Encapsulated functionality","Fragments":["away"]},{"Key":"functionality away","Fragments":["from"]},{"Key":"the bob::hey","Fragments":["code","function."]},{"Key":"overall organization","Fragments":["here."]},{"Key":" Stylistically,","Fragments":["I"]},{"Key":"Stylistically, I","Fragments":["think"]},{"Key":"readable without","Fragments":["all"]},{"Key":"without all","Fragments":["the"]},{"Key":"braces after","Fragments":["if/for"]},{"Key":"after if/for","Fragments":["statements"]},{"Key":"if/for statements","Fragments":["with"]},{"Key":"one statement","Fragments":["inside."]},{"Key":"using more","Fragments":["std::string","expensive","expensive"]},{"Key":"more std::string","Fragments":["functions,"]},{"Key":"std::string functions,","Fragments":["like"]},{"Key":"functions, like","Fragments":["back()"]},{"Key":"like back()","Fragments":["for"]},{"Key":"back() for","Fragments":["example."]},{"Key":"overall control","Fragments":["flow"]},{"Key":"to std::string,","Fragments":["and"]},{"Key":"std::string, and","Fragments":["try"]},{"Key":" (minor","Fragments":["note:"]},{"Key":"(minor note:","Fragments":["it's"]},{"Key":"note: it's","Fragments":["spelled"]},{"Key":"it's spelled","Fragments":["'alphabet')"]},{"Key":"namespace correctly,","Fragments":["or"]},{"Key":"correctly, or","Fragments":["if"]},{"Key":"if my","Fragments":["organization","input"]},{"Key":"my organization","Fragments":["of"]},{"Key":"organization of","Fragments":["declarations"]},{"Key":"of declarations","Fragments":["and"]},{"Key":"of `int`","Fragments":["accumulators","just","just"]},{"Key":"`int` accumulators","Fragments":["to"]},{"Key":"accumulators to","Fragments":["count"]},{"Key":"the appearance","Fragments":["of"]},{"Key":"appearance of","Fragments":["different"]},{"Key":"different characters","Fragments":["is"]},{"Key":"characters is","Fragments":["not"]},{"Key":"really the","Fragments":["most"]},{"Key":"the deductions","Fragments":["necessary."]},{"Key":"deductions necessary.","Fragments":["I"]},{"Key":"O(n) approach,","Fragments":["which"]},{"Key":"approach, which","Fragments":["doesn't"]},{"Key":"doesn't sound","Fragments":["bad?"]},{"Key":"sound bad?","Fragments":["But"]},{"Key":"bad? But","Fragments":["perhaps"]},{"Key":"perhaps there's","Fragments":["a"]},{"Key":"making these","Fragments":["deductions"]},{"Key":"these deductions","Fragments":["in"]},{"Key":"deductions in","Fragments":["O(log"]},{"Key":"in O(log","Fragments":["n)"]},{"Key":"O(log n)","Fragments":["time."]},{"Key":"n) time.","Fragments":["I"]},{"Key":"wouldn't really","Fragments":["know."]},{"Key":"default case","Fragments":["for"]},{"Key":"the `respond()`","Fragments":["function"]},{"Key":"`respond()` function","Fragments":["out"]},{"Key":"of habit,","Fragments":["but"]},{"Key":"habit, but","Fragments":["would"]},{"Key":"be okay","Fragments":["to"]},{"Key":"assume I'll","Fragments":["never"]},{"Key":"I'll never","Fragments":["call"]},{"Key":"call `respond()`","Fragments":["without"]},{"Key":"`respond()` without","Fragments":["an"]},{"Key":"an appropriate","Fragments":["`enum","range"]},{"Key":"appropriate `enum","Fragments":["Response`?"]},{"Key":"new C++","Fragments":["programmer"]},{"Key":"C++ programmer","Fragments":["(I'm"]},{"Key":"programmer (I'm","Fragments":["5"]},{"Key":"(I'm 5","Fragments":["weeks"]},{"Key":"5 weeks","Fragments":["into"]},{"Key":"weeks into","Fragments":["an"]},{"Key":"an Intro","Fragments":["to"]},{"Key":"Intro to","Fragments":["C++"]},{"Key":"C++ class","Fragments":["at"]},{"Key":"local Community","Fragments":["College)"]},{"Key":"Community College)","Fragments":["but"]},{"Key":"College) but","Fragments":["I"]},{"Key":"little background","Fragments":["in"]},{"Key":"in Java,","Fragments":["Python,"]},{"Key":"Java, Python,","Fragments":["and"]},{"Key":"a teensy","Fragments":["bit"]},{"Key":"teensy bit","Fragments":["of"]},{"Key":"of C.","Fragments":["Please"]},{"Key":"C. Please","Fragments":["let"]},{"Key":"Please let","Fragments":["me","me"]},{"Key":"is definitive","Fragments":["bad"]},{"Key":"definitive bad","Fragments":["practice,"]},{"Key":"practice, or","Fragments":["if"]},{"Key":"a smarter","Fragments":["way"]},{"Key":"smarter way","Fragments":["to"]},{"Key":"to organize","Fragments":["my"]},{"Key":"organize my","Fragments":["code"]},{"Key":"me in","Fragments":["the","one"]},{"Key":"some subtle","Fragments":["potential"]},{"Key":"subtle potential","Fragments":["bugs"]},{"Key":"potential bugs","Fragments":["here:"]},{"Key":"- `isQuestion`","Fragments":["will","can"]},{"Key":"`isQuestion` will","Fragments":["have"]},{"Key":"have undefined","Fragments":["behavior"]},{"Key":"when `statement`","Fragments":["is"]},{"Key":"`statement` is","Fragments":["empty."]},{"Key":"empty. This","Fragments":["happens"]},{"Key":"happens because","Fragments":["the"]},{"Key":"the `isSilence`","Fragments":["check"]},{"Key":"`isSilence` check","Fragments":["happens"]},{"Key":"happens after","Fragments":["`isQuestion`"]},{"Key":"- `isUpperCasePresent`","Fragments":["is"]},{"Key":"`isUpperCasePresent` is","Fragments":["actually"]},{"Key":"Additionally, some","Fragments":["functions"]},{"Key":"made slightly","Fragments":["more"]},{"Key":"- `isLowerCasePresent`","Fragments":["can"]},{"Key":"`isLowerCasePresent` can","Fragments":["be"]},{"Key":"be `return","Fragments":["std::any_of(statement.begin(),","isUpperCasePresent(statement)","statement.back()=='?'`"]},{"Key":"`return std::any_of(statement.begin(),","Fragments":["statement.end(),"]},{"Key":"std::any_of(statement.begin(), statement.end(),","Fragments":["islower);`"]},{"Key":"- `isShouting`","Fragments":["can"]},{"Key":"`isShouting` can","Fragments":["be"]},{"Key":"`return isUpperCasePresent(statement)","Fragments":["\u0026\u0026"]},{"Key":"isUpperCasePresent(statement) \u0026\u0026","Fragments":["!isLowerCasePresent(statement)`"]},{"Key":"`isQuestion` can","Fragments":["be"]},{"Key":"my very","Fragments":["first"]},{"Key":"first serious","Fragments":["program"]},{"Key":"serious program","Fragments":["written"]},{"Key":"program written","Fragments":["in"]},{"Key":"don't exactly","Fragments":["know"]},{"Key":"exactly know","Fragments":["why"]},{"Key":"why `for(char\u0026","Fragments":["c"]},{"Key":"`for(char\u0026 c","Fragments":[":"]},{"Key":": input)`","Fragments":["works","is"]},{"Key":"input)` works","Fragments":["like"]},{"Key":"works like","Fragments":["a"]},{"Key":"a foreach","Fragments":["loop"]},{"Key":"foreach loop","Fragments":["like"]},{"Key":"loop like","Fragments":["in"]},{"Key":"in PHP","Fragments":["or"]},{"Key":"PHP or","Fragments":["a"]},{"Key":"Python, especially","Fragments":["because"]},{"Key":"especially because","Fragments":["the"]},{"Key":"the \u0026","Fragments":["operator","says"]},{"Key":"\u0026 operator","Fragments":["is"]},{"Key":"the address","Fragments":["of"]},{"Key":"address of","Fragments":["an"]},{"Key":"an object.","Fragments":["Can"]},{"Key":"object. Can","Fragments":["someone"]},{"Key":"Can someone","Fragments":["explain"]},{"Key":"someone explain","Fragments":["this"]},{"Key":"explain this","Fragments":["to"]},{"Key":" once","Fragments":["you"]},{"Key":"have pre-processed","Fragments":["your"]},{"Key":"pre-processed your","Fragments":["string,"]},{"Key":"an `istringstream`","Fragments":["object"]},{"Key":"`istringstream` object","Fragments":["to"]},{"Key":"read in","Fragments":["each","this"]},{"Key":"and iterate","Fragments":["the","backwards"]},{"Key":"iterate the","Fragments":["count.","object"]},{"Key":"the count.","Fragments":["It"]},{"Key":"count. It","Fragments":["ends"]},{"Key":"It ends","Fragments":["up"]},{"Key":"being incredibly","Fragments":["simple"]},{"Key":" istringstream","Fragments":["stream(wordNoPunct);"]},{"Key":" map\u003cstring,","Fragments":["int\u003e"]},{"Key":"map\u003cstring, int\u003e","Fragments":["count;","expected{{\"all\",","expected{{\"one\",","expected{{\"first\",","expected{{","expected{{\"she\","]},{"Key":"while (stream","Fragments":["\u003e\u003e"]},{"Key":"(stream \u003e\u003e","Fragments":["word)"]},{"Key":"\u003e\u003e word)","Fragments":["{"]},{"Key":"the `for(char","Fragments":["\u0026c"]},{"Key":"`for(char \u0026c","Fragments":[":"]},{"Key":"\u0026c :","Fragments":["input)`"]},{"Key":"input)` is","Fragments":["called"]},{"Key":"called a","Fragments":["**range"]},{"Key":"a **range","Fragments":["for**"]},{"Key":"**range for**","Fragments":["statement,"]},{"Key":"for** statement,","Fragments":["which"]},{"Key":"statement, which","Fragments":["was"]},{"Key":"introduced in","Fragments":["C++11."]},{"Key":"C++11. It","Fragments":["iterates"]},{"Key":"It iterates","Fragments":["through"]},{"Key":"iterates through","Fragments":["the"]},{"Key":"given sequence","Fragments":["and"]},{"Key":"sequence and","Fragments":["performs"]},{"Key":"and performs","Fragments":["an"]},{"Key":"performs an","Fragments":["operation"]},{"Key":"each value","Fragments":["in"]},{"Key":"The `\u0026`","Fragments":["in"]},{"Key":"`\u0026` in","Fragments":["this"]},{"Key":"this context","Fragments":["is"]},{"Key":"context is","Fragments":["not"]},{"Key":"the **address","Fragments":["of**"]},{"Key":"**address of**","Fragments":["operator,"]},{"Key":"of** operator,","Fragments":["it"]},{"Key":"operator, it","Fragments":["is"]},{"Key":"the **reference**","Fragments":["operator."]},{"Key":"**reference** operator.","Fragments":["Thus"]},{"Key":"operator. Thus","Fragments":["you"]},{"Key":"Thus you","Fragments":["are"]},{"Key":"each element","Fragments":["of","in"]},{"Key":"Inside `bob::check_yelling`","Fragments":["you"]},{"Key":"`bob::check_yelling` you","Fragments":["shouldn't"]},{"Key":"shouldn't check","Fragments":["if"]},{"Key":"if `total_upper`","Fragments":["is"]},{"Key":"`total_upper` is","Fragments":["greater"]},{"Key":"than `total_lower,`","Fragments":["instead,"]},{"Key":"`total_lower,` instead,","Fragments":["you"]},{"Key":"instead, you","Fragments":["should"]},{"Key":"is ALL","Fragments":["UPPERCASE"]},{"Key":"ALL UPPERCASE","Fragments":["(like"]},{"Key":"UPPERCASE (like","Fragments":["that)."]},{"Key":"looking and","Fragments":["great"]},{"Key":"and great","Fragments":["catch"]},{"Key":"great catch","Fragments":["on"]},{"Key":"my yelling","Fragments":["function."]},{"Key":"yelling function.","Fragments":["It"]},{"Key":"It needed","Fragments":["simplification.","the"]},{"Key":"needed simplification.","Fragments":["Not"]},{"Key":"simplification. Not","Fragments":["only"]},{"Key":"only could","Fragments":["I"]},{"Key":"could I","Fragments":["remove"]},{"Key":"I remove","Fragments":["the"]},{"Key":"else statement,","Fragments":["I"]},{"Key":"statement, I","Fragments":["didn't"]},{"Key":"statement either.","Fragments":["I"]},{"Key":"saw a","Fragments":["few"]},{"Key":"few great","Fragments":["implementations"]},{"Key":"great implementations","Fragments":["of"]},{"Key":"of yelling","Fragments":["and"]},{"Key":"yelling and","Fragments":["saysNothing,","if","check"]},{"Key":"and saysNothing,","Fragments":["but"]},{"Key":"saysNothing, but","Fragments":["I"]},{"Key":"copy them.","Fragments":["That's"]},{"Key":"them. That's","Fragments":["why"]},{"Key":"why saysNothing","Fragments":["got"]},{"Key":"saysNothing got","Fragments":["a"]},{"Key":"weird. I","Fragments":["used"]},{"Key":"used static","Fragments":["for","class"]},{"Key":"because anonymous","Fragments":["namespace"]},{"Key":"namespace wouldn't","Fragments":["compile"]},{"Key":"wouldn't compile","Fragments":["with"]},{"Key":"Don't know","Fragments":["why,"]},{"Key":"know why,","Fragments":["but"]},{"Key":"why, but","Fragments":["I"]},{"Key":"the BOOST_TEST...","Fragments":["definition"]},{"Key":"BOOST_TEST... definition","Fragments":["to"]},{"Key":"to compile.","Fragments":["Plus"]},{"Key":"compile. Plus","Fragments":["I"]},{"Key":"Plus I","Fragments":["had"]},{"Key":"use `g++","Fragments":["-std=c++0x"]},{"Key":"`g++ -std=c++0x","Fragments":["*.cpp"]},{"Key":"-std=c++0x *.cpp","Fragments":["-lboost_unit_test_framework`"]},{"Key":"*.cpp -lboost_unit_test_framework`","Fragments":["to"]},{"Key":"-lboost_unit_test_framework` to","Fragments":["compile"]},{"Key":"compile it.","Fragments":["`cmake`","Yeah"]},{"Key":"it. `cmake`","Fragments":["made"]},{"Key":"`cmake` made","Fragments":["a"]},{"Key":"a Makefile,","Fragments":["but"]},{"Key":"Makefile, but","Fragments":["every"]},{"Key":"but every","Fragments":["time"]},{"Key":"called make","Fragments":["it"]},{"Key":"it failed.","Fragments":["It"]},{"Key":"failed. It","Fragments":["needed"]},{"Key":"the -lboost_unit_test","Fragments":["in"]},{"Key":"-lboost_unit_test in","Fragments":["order"]},{"Key":"even compiled","Fragments":["boost"]},{"Key":"compiled boost","Fragments":["myself,"]},{"Key":"boost myself,","Fragments":["and"]},{"Key":"myself, and","Fragments":["it"]},{"Key":"didn't work","Fragments":["until"]},{"Key":"work until","Fragments":["I"]},{"Key":"command on","Fragments":["the"]},{"Key":"Hmm, is","Fragments":["`*`"]},{"Key":"is `*`","Fragments":["an"]},{"Key":"`*` an","Fragments":["upper/lower/digit?"]},{"Key":"an upper/lower/digit?","Fragments":["I"]},{"Key":"upper/lower/digit? I","Fragments":["don't"]},{"Key":"believe so,","Fragments":["and"]},{"Key":"so, and","Fragments":["so"]},{"Key":"so by","Fragments":["this"]},{"Key":"this logic","Fragments":["bob"]},{"Key":"logic bob","Fragments":["might"]},{"Key":"bob might","Fragments":["respond"]},{"Key":"might respond","Fragments":["\"Fine."]},{"Key":"respond \"Fine.","Fragments":["Be"]},{"Key":"that way!\"","Fragments":["to","and"]},{"Key":"way!\" to","Fragments":["the"]},{"Key":"string \"*\"","Fragments":["or"]},{"Key":"\"*\" or","Fragments":["even"]},{"Key":"even possibly","Fragments":["\"#^\u0026!\""]},{"Key":"possibly \"#^\u0026!\"","Fragments":["I"]},{"Key":"\"#^\u0026!\" I","Fragments":["do"]},{"Key":"the efficiency","Fragments":["of"]},{"Key":"efficiency of","Fragments":["this","O(n)"]},{"Key":"this algorithm","Fragments":["though,"]},{"Key":"algorithm though,","Fragments":["you"]},{"Key":"run through","Fragments":["it"]},{"Key":"it once,","Fragments":["extracting"]},{"Key":"once, extracting","Fragments":["all"]},{"Key":"extracting all","Fragments":["the"]},{"Key":"relevant bits","Fragments":["of"]},{"Key":"information and","Fragments":["decide"]},{"Key":"and decide","Fragments":["what"]},{"Key":"To simplify","Fragments":["your"]},{"Key":"yelling function,","Fragments":["you"]},{"Key":"false the","Fragments":["moment"]},{"Key":"moment a","Fragments":["lowercase"]},{"Key":"lowercase value","Fragments":["is"]},{"Key":"string instead","Fragments":["of","of","of"]},{"Key":"2) If","Fragments":["the"]},{"Key":"input multiple","Fragments":["times,"]},{"Key":"multiple times,","Fragments":["it"]},{"Key":"times, it","Fragments":["will"]},{"Key":"be present","Fragments":["in","in"]},{"Key":"output multiple","Fragments":["times."]},{"Key":"initially thought","Fragments":["about","of","the"]},{"Key":"about checking","Fragments":["the","the"]},{"Key":"the edit","Fragments":["distance"]},{"Key":"edit distance","Fragments":["between"]},{"Key":"two DNA","Fragments":["sequences,"]},{"Key":"DNA sequences,","Fragments":["but..."]},{"Key":"sequences, but...","Fragments":["at"]},{"Key":"but... at","Fragments":["least"]},{"Key":"cases (in","Fragments":["particular"]},{"Key":"particular the","Fragments":["last"]},{"Key":"last one)","Fragments":["indicated"]},{"Key":"one) indicated","Fragments":["that"]},{"Key":"indicated that","Fragments":["this"]},{"Key":"the way:","Fragments":["I"]},{"Key":"way: I","Fragments":["forgot"]},{"Key":"the iostream-include","Fragments":["which"]},{"Key":"iostream-include which","Fragments":["I"]},{"Key":"former (wrong)","Fragments":["edit-distance"]},{"Key":"(wrong) edit-distance","Fragments":["implementation."]},{"Key":"edit-distance implementation.","Fragments":["Just"]},{"Key":"implementation. Just","Fragments":["ignore"]},{"Key":"Just ignore","Fragments":["that."]},{"Key":"ignore that.","Fragments":[":)"]},{"Key":"understand it,","Fragments":["the"]},{"Key":"correct response","Fragments":["to","rather"]},{"Key":"to `\"#\u0026!\"`","Fragments":["is"]},{"Key":"`\"#\u0026!\"` is","Fragments":["in"]},{"Key":"fact `\"Fine.","Fragments":["Be"]},{"Key":"`\"Fine. Be","Fragments":["that","that","that"]},{"Key":"that way!\"`,","Fragments":["since"]},{"Key":"way!\"`, since","Fragments":["nothing"]},{"Key":"since nothing","Fragments":["is"]},{"Key":"actually being","Fragments":["said.","printed"]},{"Key":"being said.","Fragments":["If"]},{"Key":"said. If","Fragments":["symbols"]},{"Key":"If symbols","Fragments":["are"]},{"Key":"symbols are","Fragments":["to"]},{"Key":"are to","Fragments":["be","build"]},{"Key":"considered speech","Fragments":["though,"]},{"Key":"speech though,","Fragments":["an"]},{"Key":"though, an","Fragments":["additional"]},{"Key":"additional check","Fragments":["for"]},{"Key":"for `ispunct()`","Fragments":["will"]},{"Key":"`ispunct()` will","Fragments":["fix"]},{"Key":" Bool","Fragments":["to"]},{"Key":"Bool to","Fragments":["unsigned"]},{"Key":"conversion seems","Fragments":["fine"]},{"Key":"seems fine","Fragments":["to"]},{"Key":"it bothers","Fragments":["you,"]},{"Key":"bothers you,","Fragments":["you"]},{"Key":"you, you","Fragments":["could"]},{"Key":"could count","Fragments":["the"]},{"Key":"of `true`s","Fragments":["instead."]},{"Key":"`true`s instead.","Fragments":["Something"]},{"Key":"instead. Something","Fragments":["else"]},{"Key":"Something else","Fragments":["bothers"]},{"Key":"else bothers","Fragments":["me"]},{"Key":"me though.","Fragments":["Are"]},{"Key":"though. Are","Fragments":["calls"]},{"Key":"Are calls","Fragments":["to"]},{"Key":"to `transform`","Fragments":["and"]},{"Key":"`transform` and","Fragments":["`accumulate`","the","`accumulate`."]},{"Key":"and `accumulate`","Fragments":["more"]},{"Key":"`accumulate` more","Fragments":["efficient"]},{"Key":"simple `for`","Fragments":["comparing"]},{"Key":"`for` comparing","Fragments":["each"]},{"Key":"comparing each","Fragments":["corresponding","character."]},{"Key":"each corresponding","Fragments":["character?"]},{"Key":"corresponding character?","Fragments":["If"]},{"Key":"character? If","Fragments":["not,"]},{"Key":"If not,","Fragments":["then","maybe"]},{"Key":"not, then","Fragments":["why"]},{"Key":"why use","Fragments":["them?"]},{"Key":"use them?","Fragments":["In"]},{"Key":"them? In","Fragments":["my"]},{"Key":"opinion they","Fragments":["do"]},{"Key":"not improve","Fragments":["readability"]},{"Key":"nicely done","Fragments":["and"]},{"Key":"and quite","Fragments":["natural","readable."]},{"Key":"quite natural","Fragments":["logic."]},{"Key":"natural logic.","Fragments":["One"]},{"Key":"logic. One","Fragments":["way"]},{"Key":"One way","Fragments":["to"]},{"Key":"speed it","Fragments":["up"]},{"Key":"better substitute","Fragments":["for"]},{"Key":"substitute for","Fragments":["`istringstream`,"]},{"Key":"for `istringstream`,","Fragments":["which"]},{"Key":"`istringstream`, which","Fragments":["is"]},{"Key":"rather slow.","Fragments":["Or"]},{"Key":"slow. Or","Fragments":["you"]},{"Key":"regex [like","Fragments":["I"]},{"Key":"[like I","Fragments":["did](http://exercism.io/submissions/278a796dd396e748a2d3bc62),"]},{"Key":"I did](http://exercism.io/submissions/278a796dd396e748a2d3bc62),","Fragments":["it's"]},{"Key":"did](http://exercism.io/submissions/278a796dd396e748a2d3bc62), it's","Fragments":["readable"]},{"Key":"it's readable","Fragments":["if"]},{"Key":"readable if","Fragments":["nothing"]},{"Key":"if nothing","Fragments":["else.","is"]},{"Key":"a pain","Fragments":["in"]},{"Key":"pain in","Fragments":["the"]},{"Key":"the ass.","Fragments":["It"]},{"Key":"ass. It","Fragments":["took"]},{"Key":"out where","Fragments":["I"]},{"Key":"new line","Fragments":["character."]},{"Key":"agree, and","Fragments":["the"]},{"Key":"last unit","Fragments":["test"]},{"Key":"a pointless","Fragments":["tautology.","conversion."]},{"Key":"concise, yet","Fragments":["very"]},{"Key":"yet very","Fragments":["expressive."]},{"Key":"very expressive.","Fragments":["I"]},{"Key":"that. :)","Fragments":["I"]},{"Key":"also learned","Fragments":["about"]},{"Key":"about std::transform","Fragments":["which"]},{"Key":"know before","Fragments":["(very"]},{"Key":"before (very","Fragments":["handy!)."]},{"Key":"one tiny","Fragments":["question"]},{"Key":"tiny question","Fragments":["about"]},{"Key":"about lines","Fragments":["21--22:"]},{"Key":"lines 21--22:","Fragments":["I"]},{"Key":"21--22: I","Fragments":["do"]},{"Key":"how std::transform","Fragments":["allocates"]},{"Key":"std::transform allocates","Fragments":["space"]},{"Key":"allocates space","Fragments":["in"]},{"Key":"space in","Fragments":["'word'.","isEmpty."]},{"Key":"in 'word'.","Fragments":["So"]},{"Key":"'word'. So","Fragments":["could"]},{"Key":"So could","Fragments":["it"]},{"Key":"could it","Fragments":["be"]},{"Key":"be that,","Fragments":["by"]},{"Key":"that, by","Fragments":["not"]},{"Key":"not telling","Fragments":["the"]},{"Key":"telling the","Fragments":["compiler"]},{"Key":"compiler beforehand","Fragments":["how"]},{"Key":"beforehand how","Fragments":["large"]},{"Key":"how large","Fragments":["word"]},{"Key":"large word","Fragments":["is"]},{"Key":"to be,","Fragments":["these"]},{"Key":"be, these","Fragments":["two"]},{"Key":"these two","Fragments":["lines","counts","functions"]},{"Key":"lines could","Fragments":["result","be"]},{"Key":"could result","Fragments":["in"]},{"Key":"of reallocations","Fragments":["and","of"]},{"Key":"reallocations and","Fragments":["copy"]},{"Key":"copy operations","Fragments":["to","using"]},{"Key":"operations to","Fragments":["fit"]},{"Key":"lowercase converted","Fragments":["chars"]},{"Key":"converted chars","Fragments":["from"]},{"Key":"from [start,stop)","Fragments":["into"]},{"Key":"[start,stop) into","Fragments":["'word'?"]},{"Key":"into 'word'?","Fragments":["My"]},{"Key":"'word'? My","Fragments":["suggestion"]},{"Key":"suggestion thus","Fragments":["is"]},{"Key":" ```std::string","Fragments":["word(start,stop);"]},{"Key":" std::transform(word.begin(),","Fragments":["word.end(),"]},{"Key":"std::transform(word.begin(), word.end(),","Fragments":["word.begin(),"]},{"Key":"word.end(), word.begin(),","Fragments":["::tolower);","::tolower"]},{"Key":"this tip","Fragments":["from"]},{"Key":"tip from","Fragments":["another"]},{"Key":"another nitpicker:","Fragments":["your"]},{"Key":"nitpicker: your","Fragments":["boolean"]},{"Key":"your boolean","Fragments":["functions"]},{"Key":"now inside","Fragments":["the"]},{"Key":"bob namespace,","Fragments":["but","to"]},{"Key":"any caller","Fragments":["aware"]},{"Key":"caller aware","Fragments":["of"]},{"Key":"access isYell,","Fragments":["isQuestion."]},{"Key":"can move","Fragments":["those","all","the"]},{"Key":"namespace. This","Fragments":["keeps"]},{"Key":"This keeps","Fragments":["the"]},{"Key":"details (like","Fragments":["private"]},{"Key":"(like private","Fragments":["methods"]},{"Key":"methods of","Fragments":["a"]},{"Key":"a class)","Fragments":["away"]},{"Key":"class) away","Fragments":["from"]},{"Key":"other pieces","Fragments":["of"]},{"Key":"pieces of","Fragments":["code","your","it","it"]},{"Key":"the recursive","Fragments":["call"]},{"Key":"recursive call","Fragments":["to","to","swapping"]},{"Key":"to yourself","Fragments":["to"]},{"Key":"to adjust","Fragments":["`str1.len"]},{"Key":"adjust `str1.len","Fragments":["\u003e"]},{"Key":"`str1.len \u003e","Fragments":["str2.len`"]},{"Key":"clean. However,","Fragments":["you"]},{"Key":"could encapsulate","Fragments":["some"]},{"Key":"encapsulate some","Fragments":["of"]},{"Key":"details in","Fragments":["other"]},{"Key":"like IsQuestion,","Fragments":["IsYell,"]},{"Key":"IsQuestion, IsYell,","Fragments":["etc."]},{"Key":"IsYell, etc.","Fragments":["in"]},{"Key":"Also, I've","Fragments":["seen"]},{"Key":"seen some","Fragments":["others"]},{"Key":"some others","Fragments":["say"]},{"Key":"others say","Fragments":["that"]},{"Key":"that regex","Fragments":["is"]},{"Key":"is overkill","Fragments":["for"]},{"Key":"simple patterns","Fragments":["like"]},{"Key":"patterns like","Fragments":["these,"]},{"Key":"like these,","Fragments":["but"]},{"Key":"these, but","Fragments":["you"]},{"Key":"have kept","Fragments":["it's"]},{"Key":"kept it's","Fragments":["usage"]},{"Key":"it's usage","Fragments":["to"]},{"Key":"a minimum,","Fragments":["which","some"]},{"Key":"minimum, which","Fragments":["is"]},{"Key":"is good;","Fragments":["what's"]},{"Key":"good; what's","Fragments":["your"]},{"Key":"your take","Fragments":["on"]},{"Key":"Also, I'm","Fragments":["not","wondering"]},{"Key":"line 13;","Fragments":["it"]},{"Key":"13; it","Fragments":["looks"]},{"Key":"calling a","Fragments":["function"]},{"Key":"then becomes","Fragments":["a"]},{"Key":"Something called","Fragments":["Argument"]},{"Key":"called Argument","Fragments":["Dependent"]},{"Key":"Argument Dependent","Fragments":["Lookup"]},{"Key":"Dependent Lookup","Fragments":["is"]},{"Key":"Lookup is","Fragments":["saving"]},{"Key":"is saving","Fragments":["you"]},{"Key":"saving you","Fragments":["from"]},{"Key":"a `using","Fragments":["namespace"]},{"Key":"std` or","Fragments":["`std::`"]},{"Key":"or `std::`","Fragments":["qualifier."]},{"Key":"`std::` qualifier.","Fragments":["The"]},{"Key":"qualifier. The","Fragments":["iterator"]},{"Key":"The iterator","Fragments":["returned","not"]},{"Key":"by `begin()`","Fragments":["is"]},{"Key":"`begin()` is","Fragments":["a"]},{"Key":"class within","Fragments":["the"]},{"Key":"std namespace,","Fragments":["so"]},{"Key":"compiler looks","Fragments":["through"]},{"Key":"looks through","Fragments":["the"]},{"Key":"a declaration","Fragments":["for"]},{"Key":"declaration for","Fragments":["`all_of()`,"]},{"Key":"for `all_of()`,","Fragments":["etc."]},{"Key":" (See","Fragments":["http://stackoverflow.com/questions/26055646/functions-in-namespace-std-accessible-in-global-scope","https://stackoverflow.com/questions/236129/how-to-split-a-string-in-c"]},{"Key":"(See http://stackoverflow.com/questions/26055646/functions-in-namespace-std-accessible-in-global-scope","Fragments":["and"]},{"Key":"http://stackoverflow.com/questions/26055646/functions-in-namespace-std-accessible-in-global-scope and","Fragments":["http://stackoverflow.com/questions/25976267/interesting-behavior-of-compiler-with-namespaces)."]},{"Key":"Your use","Fragments":["of"]},{"Key":"of `using`","Fragments":["is"]},{"Key":"`using` is","Fragments":["otherwise"]},{"Key":"is otherwise","Fragments":["correct."]},{"Key":"namespaces here","Fragments":["as"]},{"Key":"as references","Fragments":["to"]},{"Key":"clear when","Fragments":["functions","reading"]},{"Key":"when functions","Fragments":["do"]},{"Key":"functions do","Fragments":["not"]},{"Key":"phrase they","Fragments":["receive."]},{"Key":"they receive.","Fragments":["You"]},{"Key":"receive. You","Fragments":["could"]},{"Key":"could boost","Fragments":["readability","your"]},{"Key":"boost readability","Fragments":["by","to"]},{"Key":"readability by","Fragments":["changing","this."]},{"Key":"the \"s\"","Fragments":["parameters"]},{"Key":"\"s\" parameters","Fragments":["to"]},{"Key":"like \"text\"","Fragments":["or"]},{"Key":"\"text\" or","Fragments":["\"message\"."]},{"Key":"Really small","Fragments":["issue"]},{"Key":"small issue","Fragments":["but...you"]},{"Key":"issue but...you","Fragments":["could"]},{"Key":"but...you could","Fragments":["move"]},{"Key":"length selection","Fragments":["outside"]},{"Key":"selection outside","Fragments":["the"]},{"Key":"`for` statement","Fragments":["to"]},{"Key":"attempt to","Fragments":["work","get"]},{"Key":"with C++.","Fragments":["I've"]},{"Key":"C++. I've","Fragments":["been"]},{"Key":"using C#","Fragments":["for"]},{"Key":"C# for","Fragments":["almost"]},{"Key":"for almost","Fragments":["5"]},{"Key":"almost 5","Fragments":["years"]},{"Key":"5 years","Fragments":["now"]},{"Key":"years now","Fragments":["and"]},{"Key":"and wanted","Fragments":["to"]},{"Key":"to dive","Fragments":["into"]},{"Key":"dive into","Fragments":["the"]},{"Key":"the world","Fragments":["of"]},{"Key":"world of","Fragments":["pointers"]},{"Key":"memory management","Fragments":[":)"]},{"Key":"management :)","Fragments":["What"]},{"Key":":) What","Fragments":["do"]},{"Key":"you think?","Fragments":["Can"]},{"Key":"think? Can","Fragments":["I"]},{"Key":"I structure","Fragments":["the"]},{"Key":"program better?","Fragments":["Any"]},{"Key":"better? Any","Fragments":["feedback"]},{"Key":"is greatly","Fragments":["appreciated!"]},{"Key":" Thats","Fragments":["a"]},{"Key":"Thats a","Fragments":["good"]},{"Key":"point. Sometimes","Fragments":["i"]},{"Key":"Sometimes i","Fragments":["forget"]},{"Key":"i forget","Fragments":["its"]},{"Key":"forget its","Fragments":["not"]},{"Key":"its not","Fragments":["all"]},{"Key":"all about","Fragments":["how"]},{"Key":"much we","Fragments":["can"]},{"Key":"can fit","Fragments":["on"]},{"Key":"line but,","Fragments":["how"]},{"Key":"but, how","Fragments":["well"]},{"Key":"how well","Fragments":["it","variables"]},{"Key":"well it","Fragments":["could"]},{"Key":"have improved","Fragments":["the"]},{"Key":"improved the","Fragments":["shouting"]},{"Key":"shouting check,","Fragments":["but"]},{"Key":"but ran","Fragments":["out"]},{"Key":"Just another","Fragments":["point"]},{"Key":"another point","Fragments":["on"]},{"Key":"on why","Fragments":["I","you"]},{"Key":"I choose","Fragments":["to","to"]},{"Key":"place all","Fragments":["in"]},{"Key":"line was","Fragments":["to"]},{"Key":" Pulled","Fragments":["out"]},{"Key":"Pulled out","Fragments":["ternary"]},{"Key":"out ternary","Fragments":["operator"]},{"Key":"Thanks, all!","Fragments":["Implemented."]},{"Key":"understand from","Fragments":["reading"]},{"Key":"from reading","Fragments":["others"]},{"Key":"reading others","Fragments":["solution"]},{"Key":"others solution","Fragments":["to"]},{"Key":"problem, passing","Fragments":["references"]},{"Key":"references is","Fragments":["better"]},{"Key":"than passing","Fragments":["values."]},{"Key":"passing values.","Fragments":["It"]},{"Key":"values. It","Fragments":["seems"]},{"Key":"bit curious","Fragments":["to"]},{"Key":"curious to","Fragments":["me"]},{"Key":"I've decided","Fragments":["to"]},{"Key":"use stdlib","Fragments":["regexes"]},{"Key":"stdlib regexes","Fragments":["instead"]},{"Key":"regexes instead","Fragments":["of"]},{"Key":"of external","Fragments":["libraries."]},{"Key":"external libraries.","Fragments":["The"]},{"Key":"libraries. The","Fragments":["regexes"]},{"Key":"The regexes","Fragments":["are"]},{"Key":"regexes are","Fragments":["a"]},{"Key":"less technical","Fragments":["specification"]},{"Key":"technical specification","Fragments":["of"]},{"Key":"specification of","Fragments":["the"]},{"Key":"the soft","Fragments":["description"]},{"Key":"soft description","Fragments":["of"]},{"Key":"description of","Fragments":["the","the"]},{"Key":"different possible","Fragments":["inputs."]},{"Key":"possible inputs.","Fragments":["They"]},{"Key":"inputs. They","Fragments":["get"]},{"Key":"They get","Fragments":["compiled"]},{"Key":"get compiled","Fragments":["once"]},{"Key":"compiled once","Fragments":["and"]},{"Key":"are reusable","Fragments":["when"]},{"Key":"reusable when","Fragments":["you"]},{"Key":"function again.","Fragments":["This"]},{"Key":"again. This","Fragments":["approach"]},{"Key":"is **not**","Fragments":["threadsafe!"]},{"Key":"the vector\u003cchar\u003e","Fragments":["in"]},{"Key":"vector\u003cchar\u003e in","Fragments":["favor"]},{"Key":"Cleaned the","Fragments":["code"]},{"Key":"code up","Fragments":["a","using","into"]},{"Key":" Shortened","Fragments":["AnagramFinder"]},{"Key":"Shortened AnagramFinder","Fragments":["to"]},{"Key":"AnagramFinder to","Fragments":["Anagram."]},{"Key":" Ahoi","Fragments":["there,","there,","there,"]},{"Key":"Ahoi there,","Fragments":["here's"]},{"Key":"there, here's","Fragments":["a"]},{"Key":"empty constructor","Fragments":["and"]},{"Key":"can leave","Fragments":["them"]},{"Key":"leave them","Fragments":["away","as-is"]},{"Key":"will automatically","Fragments":["create"]},{"Key":"create them","Fragments":["for"]},{"Key":"the `is_numbers_only`","Fragments":["variable."]},{"Key":"`is_numbers_only` variable.","Fragments":["It's"]},{"Key":"redundant. If","Fragments":["`is_numbers_only`"]},{"Key":"If `is_numbers_only`","Fragments":["is"]},{"Key":"`is_numbers_only` is","Fragments":["true"]},{"Key":"then all","Fragments":["the"]},{"Key":"other bools","Fragments":["have"]},{"Key":"bools have","Fragments":["to"]},{"Key":"be false","Fragments":["(no"]},{"Key":"false (no","Fragments":["question,"]},{"Key":"(no question,","Fragments":["no"]},{"Key":"question, no","Fragments":["shouting,"]},{"Key":"no shouting,","Fragments":["no"]},{"Key":"shouting, no","Fragments":["blank),"]},{"Key":"no blank),","Fragments":["that"]},{"Key":"blank), that","Fragments":["means"]},{"Key":"the `if(","Fragments":["is_numbers_only"]},{"Key":"`if( is_numbers_only","Fragments":[")`"]},{"Key":"is_numbers_only )`","Fragments":["is"]},{"Key":")` is","Fragments":["unnecessary"]},{"Key":"since your","Fragments":["default","return"]},{"Key":"default `return","Fragments":["\"Whatever.\";`"]},{"Key":"`return \"Whatever.\";`","Fragments":["is"]},{"Key":"\"Whatever.\";` is","Fragments":["already"]},{"Key":"already correct.","Fragments":["You'll"]},{"Key":"correct. You'll","Fragments":["find"]},{"Key":"You'll find","Fragments":["that"]},{"Key":"other occurrences","Fragments":["of"]},{"Key":"occurrences of","Fragments":["`is_numbers_only`","each","each"]},{"Key":"of `is_numbers_only`","Fragments":["are"]},{"Key":"`is_numbers_only` are","Fragments":["also"]},{"Key":"3) Instead","Fragments":["of"]},{"Key":"normal for-loop","Fragments":["`for(int"]},{"Key":"for-loop `for(int","Fragments":["i"]},{"Key":"\u003c length;","Fragments":["++i)"]},{"Key":"length; ++i)","Fragments":["{`"]},{"Key":"++i) {`","Fragments":["you"]},{"Key":"{` you","Fragments":["could"]},{"Key":"a for-element","Fragments":["loop:","loop","loop"]},{"Key":"for-element loop:","Fragments":["`for(char"]},{"Key":"loop: `for(char","Fragments":["tmp"]},{"Key":"`for(char tmp","Fragments":[":"]},{"Key":"tmp :","Fragments":["input)"]},{"Key":": input)","Fragments":["{`.","{"]},{"Key":"input) {`.","Fragments":["Then"]},{"Key":"{`. Then","Fragments":["you"]},{"Key":"the `i`","Fragments":["and","variable"]},{"Key":"`i` and","Fragments":["you'll","`length`"]},{"Key":"any mistakes","Fragments":["while"]},{"Key":"mistakes while","Fragments":["iterating"]},{"Key":"while iterating","Fragments":["over"]},{"Key":"4) Instead","Fragments":["of"]},{"Key":"of `(tmp","Fragments":["\u003e=","\u003c"]},{"Key":"`(tmp \u003e=","Fragments":["'a'"]},{"Key":"\u003e= 'a'","Fragments":["\u0026\u0026","..."]},{"Key":"'a' \u0026\u0026","Fragments":["tmp"]},{"Key":"\u0026\u0026 tmp","Fragments":["\u003c="]},{"Key":"tmp \u003c=","Fragments":["'z')`"]},{"Key":"\u003c= 'z')`","Fragments":["you"]},{"Key":"'z')` you","Fragments":["can"]},{"Key":"use [`islower`](http://www.cplusplus.com/reference/cctype/islower/).","Fragments":["And"]},{"Key":"[`islower`](http://www.cplusplus.com/reference/cctype/islower/). And","Fragments":["instead"]},{"Key":"`(tmp \u003c","Fragments":["'0'"]},{"Key":"\u003c '0'","Fragments":["||"]},{"Key":"'0' ||","Fragments":["tmp"]},{"Key":"|| tmp","Fragments":["\u003e"]},{"Key":"tmp \u003e","Fragments":["'9')`"]},{"Key":"\u003e '9')`","Fragments":["you"]},{"Key":"'9')` you","Fragments":["can"]},{"Key":"agree about","Fragments":["the","more","the"]},{"Key":"the boring","Fragments":["part."]},{"Key":"boring part.","Fragments":["I"]},{"Key":"part. I","Fragments":["guess"]},{"Key":"it boils","Fragments":["down"]},{"Key":"to asking:","Fragments":["What"]},{"Key":"asking: What","Fragments":["is"]},{"Key":"this application?","Fragments":["To"]},{"Key":"application? To","Fragments":["learn"]},{"Key":"To learn","Fragments":["the"]},{"Key":"the ins","Fragments":["and"]},{"Key":"ins and","Fragments":["outs"]},{"Key":"and outs","Fragments":["of"]},{"Key":"outs of","Fragments":["the"]},{"Key":"the language","Fragments":["or","better"]},{"Key":"language or","Fragments":["to"]},{"Key":"test our","Fragments":["algorithms"]},{"Key":"our algorithms","Fragments":["knowledge?"]},{"Key":"general you","Fragments":["don't"]},{"Key":"change anything","Fragments":["about","except"]},{"Key":"really depends","Fragments":["on"]},{"Key":"void func(std::string","Fragments":["s){","const"]},{"Key":"for(int i=0;","Fragments":["i\u003c10;","i\u003c10;","i\u003c1024;"]},{"Key":"i=0; i\u003c10;","Fragments":["++i)","++i)"]},{"Key":" s","Fragments":["+="]},{"Key":"s +=","Fragments":["i;"]},{"Key":" Say","Fragments":["you"]},{"Key":"Say you","Fragments":["have"]},{"Key":"this function.","Fragments":["You","Check"]},{"Key":"You modify","Fragments":["`s`"]},{"Key":"modify `s`","Fragments":["inside"]},{"Key":"`s` inside","Fragments":["the"]},{"Key":"the function's","Fragments":["body,"]},{"Key":"function's body,","Fragments":["so"]},{"Key":"body, so","Fragments":["you"]},{"Key":"then `s`","Fragments":["would"]},{"Key":"`s` would","Fragments":["be"]},{"Key":"be constant","Fragments":["and"]},{"Key":"But usually","Fragments":["we"]},{"Key":"usually we","Fragments":["treat"]},{"Key":"we treat","Fragments":["function"]},{"Key":"treat function","Fragments":["arguments"]},{"Key":"function arguments","Fragments":["as","and"]},{"Key":"constant anyways","Fragments":["(we"]},{"Key":"anyways (we","Fragments":["usually"]},{"Key":"(we usually","Fragments":["don't"]},{"Key":"usually don't","Fragments":["have"]},{"Key":"them inside","Fragments":["the"]},{"Key":"the function)","Fragments":["so"]},{"Key":"function) so","Fragments":["we"]},{"Key":"turn them","Fragments":["into"]},{"Key":"into const\u0026","Fragments":["without"]},{"Key":"const\u0026 without","Fragments":["issues"]},{"Key":"without issues","Fragments":["in"]},{"Key":"look on","Fragments":["the"]},{"Key":"other submitions,","Fragments":["I"]},{"Key":"submitions, I","Fragments":["feel"]},{"Key":"regex was","Fragments":["kind"]},{"Key":"understand, I","Fragments":["put"]},{"Key":"regex test","Fragments":["in"]},{"Key":"The \"hey\"","Fragments":["function"]},{"Key":"then pretty","Fragments":["simple."]},{"Key":"more optimized","Fragments":["to"]},{"Key":"optimized to","Fragments":["parse"]},{"Key":"string like","Fragments":["other","\"hello,there\"","the"]},{"Key":"like other","Fragments":["people"]},{"Key":"other people","Fragments":["did","using"]},{"Key":"people did","Fragments":["?"]},{"Key":"In L13","Fragments":["you"]},{"Key":"L13 you","Fragments":["can"]},{"Key":"comparison at","Fragments":["L14"]},{"Key":"at L14","Fragments":["if"]},{"Key":"L14 if","Fragments":["the"]},{"Key":"condition Is","Fragments":["true."]},{"Key":"remove dependency","Fragments":["on"]},{"Key":"on \u003cstring\u003e","Fragments":["if"]},{"Key":"\u003cstring\u003e if","Fragments":["you"]},{"Key":"know you","Fragments":["have","have","can"]},{"Key":"null-terminated c","Fragments":["string"]},{"Key":"c string","Fragments":["(using"]},{"Key":"string (using","Fragments":["the"]},{"Key":"(using the","Fragments":["test"]},{"Key":"suite you","Fragments":["need"]},{"Key":"create temporaries","Fragments":["for"]},{"Key":"temporaries for","Fragments":["the"]},{"Key":" Sorting","Fragments":["seemed"]},{"Key":"Sorting seemed","Fragments":["simple"]},{"Key":"seemed simple","Fragments":["at"]},{"Key":"simple at","Fragments":["the"]},{"Key":"the time.","Fragments":["But","All","Only"]},{"Key":"time. But","Fragments":["I"]},{"Key":"the ascii","Fragments":["numbers","byte"]},{"Key":"ascii numbers","Fragments":["of"]},{"Key":"numbers of","Fragments":["both","both"]},{"Key":"both words","Fragments":["to","won't"]},{"Key":"they equaled","Fragments":["the"]},{"Key":"equaled the","Fragments":["same"]},{"Key":"Yes, you're","Fragments":["right"]},{"Key":"the `accumulate`.","Fragments":["I"]},{"Key":"`accumulate`. I","Fragments":["guess"]},{"Key":"got too","Fragments":["excited"]},{"Key":"too excited","Fragments":["about"]},{"Key":"excited about","Fragments":["them"]},{"Key":"about them","Fragments":["and","at"]},{"Key":"the old,","Fragments":["reliable"]},{"Key":"old, reliable","Fragments":["`for`"]},{"Key":"reliable `for`","Fragments":["loop."]},{"Key":"fix it,","Fragments":["thanks"]},{"Key":"removed `transform`","Fragments":["and"]},{"Key":"and `accumulate`.","Fragments":["A"]},{"Key":"`accumulate`. A","Fragments":["simple"]},{"Key":" Adding","Fragments":["all"]},{"Key":"Adding all","Fragments":["the"]},{"Key":"the ASCII","Fragments":["numbers","character"]},{"Key":"ASCII numbers","Fragments":["of"]},{"Key":"words won't","Fragments":["work"]},{"Key":"have degeneracies.","Fragments":["(e,g,"]},{"Key":"degeneracies. (e,g,","Fragments":["'C'"]},{"Key":"(e,g, 'C'","Fragments":["+"]},{"Key":"'C' +","Fragments":["'D'"]},{"Key":"+ 'D'","Fragments":["="]},{"Key":"'D' =","Fragments":["'B'"]},{"Key":"= 'B'","Fragments":["+"]},{"Key":"'B' +","Fragments":["'E')"]},{"Key":" However","Fragments":["you","I","I'll","you"]},{"Key":"of frequencies","Fragments":["of"]},{"Key":"frequencies of","Fragments":["all"]},{"Key":"words. If","Fragments":["a"]},{"Key":"word's letter","Fragments":["frequencies"]},{"Key":"letter frequencies","Fragments":["are"]},{"Key":"frequencies are","Fragments":["the"]},{"Key":"as another","Fragments":["they"]},{"Key":"another they","Fragments":["will"]},{"Key":"be anagrams.","Fragments":["This"]},{"Key":"be O(n)","Fragments":["in"]},{"Key":"O(n) in","Fragments":["the"]},{"Key":"input words","Fragments":["rather"]},{"Key":"words rather","Fragments":["than"]},{"Key":"the O(n","Fragments":["log(n))"]},{"Key":"O(n log(n))","Fragments":["you"]},{"Key":"log(n)) you","Fragments":["would"]},{"Key":"by sorting","Fragments":["each"]},{"Key":"sorting each","Fragments":["of"]},{"Key":" Hopefully","Fragments":["the"]},{"Key":"Hopefully the","Fragments":["readability"]},{"Key":"was way","Fragments":["too"]},{"Key":"too simple.","Fragments":["This"]},{"Key":"simple. This","Fragments":["probably"]},{"Key":"exercise instead","Fragments":["of"]},{"Key":"wish some","Fragments":["things"]},{"Key":"things would","Fragments":["be"]},{"Key":"easier in","Fragments":["C++,"]},{"Key":"C++, e.g.","Fragments":["make"]},{"Key":"e.g. make","Fragments":["lowercase"]},{"Key":"make lowercase","Fragments":["strings."]},{"Key":"Nice, but","Fragments":["there"]},{"Key":"few simplifications","Fragments":["you"]},{"Key":"simplifications you","Fragments":["can"]},{"Key":"make. You","Fragments":["can"]},{"Key":"avoid casting","Fragments":["to"]},{"Key":"casting to","Fragments":["int."]},{"Key":"to int.","Fragments":["In"]},{"Key":"int. In","Fragments":["nothingIsSaid"]},{"Key":"In nothingIsSaid","Fragments":["you"]},{"Key":"nothingIsSaid you","Fragments":["can"]},{"Key":"return true","Fragments":["when","for","for","for","for","but"]},{"Key":"find non-space.","Fragments":["Instead"]},{"Key":"non-space. Instead","Fragments":["of"]},{"Key":"of speech.at(speech.size()-1)","Fragments":["you"]},{"Key":"speech.at(speech.size()-1) you","Fragments":["can"]},{"Key":"that c++11","Fragments":["has"]},{"Key":"c++11 has","Fragments":["both"]},{"Key":"has both","Fragments":["the"]},{"Key":"keyword and","Fragments":["range"]},{"Key":"loops so","Fragments":["that"]},{"Key":"loop can","Fragments":["be","be","be"]},{"Key":"as ```for(","Fragments":["auto"]},{"Key":": message","Fragments":[")```"]},{"Key":"message )```","Fragments":["which"]},{"Key":")``` which","Fragments":["is"]},{"Key":"is IMO","Fragments":["much"]},{"Key":"IMO much","Fragments":["cleaner."]},{"Key":"also split","Fragments":["each"]},{"Key":"split each","Fragments":["of"]},{"Key":"your checks","Fragments":["into"]},{"Key":"checks into","Fragments":["separate","them"]},{"Key":"to aid","Fragments":["readability."]},{"Key":"aid readability.","Fragments":["(i.e."]},{"Key":"readability. (i.e.","Fragments":["have"]},{"Key":"(i.e. have","Fragments":["separate"]},{"Key":"have separate","Fragments":["is_shouting,"]},{"Key":"separate is_shouting,","Fragments":["is_question"]},{"Key":"is_shouting, is_question","Fragments":["etc."]},{"Key":"is_question etc.","Fragments":["functions)"]},{"Key":"etc. functions)","Fragments":["if"]},{"Key":"functions) if","Fragments":["you"]},{"Key":"to each","Fragments":["then","one"]},{"Key":"each then","Fragments":["you"]},{"Key":"shouldn't lose","Fragments":["anything"]},{"Key":"lose anything","Fragments":["in"]},{"Key":"word character","Fragments":["list"]},{"Key":"character list","Fragments":["instead"]},{"Key":"list instead","Fragments":["of"]},{"Key":"separator list?","Fragments":["I"]},{"Key":"list? I","Fragments":["can"]},{"Key":"can imagine","Fragments":["a"]},{"Key":"will break","Fragments":["your"]},{"Key":"code, e.g.","Fragments":["`{'\\r',"]},{"Key":"e.g. `{'\\r',","Fragments":["'/',"]},{"Key":"`{'\\r', '/',","Fragments":["'\\\\'}`."]},{"Key":"Also do","Fragments":["not"]},{"Key":"use backslashes","Fragments":["when"]},{"Key":"backslashes when","Fragments":["setting"]},{"Key":"when setting","Fragments":["include"]},{"Key":"setting include","Fragments":["paths,"]},{"Key":"include paths,","Fragments":["see"]},{"Key":"paths, see","Fragments":["https://stackoverflow.com/questions/5790161/is-the-backslash-acceptable-in-c-and-c-include-directives"]},{"Key":" Short","Fragments":["functional"]},{"Key":"Short functional","Fragments":["style."]},{"Key":"use variables","Fragments":["to"]},{"Key":"input pattern,","Fragments":["however"]},{"Key":"pattern, however","Fragments":["you"]},{"Key":"could hide","Fragments":["away"]},{"Key":"hide away","Fragments":["these"]},{"Key":"away these","Fragments":["implementation"]},{"Key":"these implementation","Fragments":["details"]},{"Key":"details from","Fragments":["the"]},{"Key":"defining functions","Fragments":["like"]},{"Key":"like `isShouting`,","Fragments":["etc."]},{"Key":"`isShouting`, etc.","Fragments":["to"]},{"Key":"etc. to","Fragments":["perform","help"]},{"Key":"work currently","Fragments":["performed"]},{"Key":"currently performed","Fragments":["directly"]},{"Key":"performed directly","Fragments":["by"]},{"Key":"directly by","Fragments":["`hey`"]},{"Key":"name \"in\"","Fragments":["could"]},{"Key":"\"in\" could","Fragments":["be"]},{"Key":"descriptive like","Fragments":["\"phrase\""]},{"Key":"like \"phrase\"","Fragments":["or"]},{"Key":"\"phrase\" or","Fragments":["\"prompt\"."]},{"Key":"of algorithms,","Fragments":["didn't"]},{"Key":"algorithms, didn't","Fragments":["know"]},{"Key":"this variant","Fragments":["of"]},{"Key":"variant of","Fragments":["for_each"]},{"Key":"of for_each","Fragments":["until"]},{"Key":"for_each until","Fragments":["I"]},{"Key":"wrote the","Fragments":["solution","first"]},{"Key":"exercise. Pretty","Fragments":["handy."]},{"Key":"member function.","Fragments":["I"]},{"Key":"function. I","Fragments":["know,","don't"]},{"Key":"I know,","Fragments":["funky."]},{"Key":" Forgot","Fragments":["to"]},{"Key":"The overall","Fragments":["logic"]},{"Key":"simple so","Fragments":["I"]},{"Key":"broke up","Fragments":["more","your"]},{"Key":"up more","Fragments":["complex"]},{"Key":"complex routines","Fragments":["in"]},{"Key":"routines in","Fragments":["aux"]},{"Key":"in aux","Fragments":["functions."]},{"Key":"use is*","Fragments":["functions"]},{"Key":"is* functions","Fragments":["to"]},{"Key":"do basic","Fragments":["checking"]},{"Key":"basic checking","Fragments":["(is"]},{"Key":"checking (is","Fragments":["space,"]},{"Key":"(is space,","Fragments":["is"]},{"Key":"space, is","Fragments":["upper"]},{"Key":"upper etc)","Fragments":["and"]},{"Key":"etc) and","Fragments":["keep","responder"]},{"Key":"keep code","Fragments":["cleaner."]},{"Key":"declare functions","Fragments":["as"]},{"Key":"functions as","Fragments":["static","`static","they","possible"]},{"Key":"static because","Fragments":["it's","I"]},{"Key":"requirement from","Fragments":["bob_test.cpp"]},{"Key":"from bob_test.cpp","Fragments":["or"]},{"Key":"bob_test.cpp or","Fragments":["boost"]},{"Key":"or boost","Fragments":["to"]},{"Key":"to execute","Fragments":["unit"]},{"Key":"execute unit","Fragments":["testing."]},{"Key":" Guess","Fragments":["I'm"]},{"Key":"Guess I'm","Fragments":["not"]},{"Key":"the duplicates","Fragments":["in"]},{"Key":"candidate list","Fragments":["question;"]},{"Key":"list question;","Fragments":["sort"]},{"Key":"question; sort","Fragments":["of"]},{"Key":"of depends","Fragments":["on"]},{"Key":"is treated","Fragments":["as","as"]},{"Key":"a grep","Fragments":["or","|"]},{"Key":"grep or","Fragments":["a"]},{"Key":"grep |","Fragments":["uniq?"]},{"Key":"string library.","Fragments":["Responses"]},{"Key":"library. Responses","Fragments":["no"]},{"Key":"Responses no","Fragments":["longer"]},{"Key":"longer redefined","Fragments":["with"]},{"Key":"redefined with","Fragments":["each"]},{"Key":"to hey,","Fragments":["replaced"]},{"Key":"hey, replaced","Fragments":["const"]},{"Key":"replaced const","Fragments":["*"]},{"Key":"* with","Fragments":["const"]},{"Key":"const \u0026.","Fragments":["Forgot"]},{"Key":"\u0026. Forgot","Fragments":["to"]},{"Key":"the \u003ccstring\u003e","Fragments":["include."]},{"Key":"replace lines","Fragments":["17"]},{"Key":"lines 17","Fragments":["-"]},{"Key":"17 -","Fragments":["20"]},{"Key":"- 20","Fragments":["with"]},{"Key":"20 with","Fragments":["just"]},{"Key":"just counts[word]","Fragments":["+="]},{"Key":"counts[word] +=","Fragments":["1"]},{"Key":"+= 1","Fragments":["by"]},{"Key":"1 by","Fragments":["leveraging"]},{"Key":"by leveraging","Fragments":["default"]},{"Key":"leveraging default","Fragments":["construction."]},{"Key":"minor thing,","Fragments":["but"]},{"Key":"Can make","Fragments":["line"]},{"Key":"make line","Fragments":["29-31"]},{"Key":"line 29-31","Fragments":["more"]},{"Key":"29-31 more","Fragments":["succinct"]},{"Key":"succinct with","Fragments":["something"]},{"Key":"like for","Fragments":["(auto"]},{"Key":"(auto letter","Fragments":[":"]},{"Key":"letter :","Fragments":["sentence).","conv"]},{"Key":"are certainly","Fragments":["many"]},{"Key":"certainly many","Fragments":["different"]},{"Key":"but wondering","Fragments":["if"]},{"Key":"if \u003e=","Fragments":["'A'"]},{"Key":"\u0026\u0026 \u003c=","Fragments":["'Z'"]},{"Key":"\u003c= 'Z'","Fragments":["||","\u0026\u0026"]},{"Key":"'Z' ||","Fragments":["\u003e="]},{"Key":"|| \u003e=","Fragments":["'a'"]},{"Key":"'a' ...","Fragments":["would"]},{"Key":"... would","Fragments":["be"]},{"Key":"than doing","Fragments":["a"]},{"Key":"a find","Fragments":["on"]},{"Key":"find on","Fragments":["the"]},{"Key":"the set","Fragments":["each","is"]},{"Key":"set each","Fragments":["time"]},{"Key":"Good comments","Fragments":["at"]},{"Key":"comments at","Fragments":["the"]},{"Key":"function. Also,","Fragments":["it's","`using"]},{"Key":"great that","Fragments":["you"]},{"Key":"a macro","Fragments":["guard,","guard.","for"]},{"Key":"macro guard,","Fragments":["which"]},{"Key":"guard, which","Fragments":["is"]},{"Key":"for multi-file","Fragments":["projects,"]},{"Key":"multi-file projects,","Fragments":["and"]},{"Key":"projects, and","Fragments":["it's"]},{"Key":"it's clear","Fragments":["you're"]},{"Key":"clear you're","Fragments":["keeping"]},{"Key":"you're keeping","Fragments":["in"]},{"Key":"keeping in","Fragments":["mind"]},{"Key":"that application","Fragments":["code"]},{"Key":"application code","Fragments":["would"]},{"Key":"would always","Fragments":["be"]},{"Key":"between header","Fragments":["and"]},{"Key":"next good","Fragments":["design"]},{"Key":"good design","Fragments":["choice"]},{"Key":"design choice","Fragments":["is"]},{"Key":"you qualify","Fragments":["each"]},{"Key":"qualify each","Fragments":["call"]},{"Key":"the heavy-handed","Fragments":["`using"]},{"Key":"heavy-handed `using","Fragments":["namespace"]},{"Key":"namespace std`.","Fragments":["Another"]},{"Key":"std`. Another","Fragments":["option"]},{"Key":"Another option","Fragments":["you","would"]},{"Key":"option you","Fragments":["could"]},{"Key":"consider is","Fragments":["`using","to"]},{"Key":"is `using","Fragments":["std::string`"]},{"Key":"std::string` within","Fragments":["the"]},{"Key":"namespace, to","Fragments":["save"]},{"Key":" Encapsulating","Fragments":["the"]},{"Key":"Encapsulating the","Fragments":["parse"]},{"Key":"the parse","Fragments":["functionality","function","function"]},{"Key":"parse functionality","Fragments":["outside"]},{"Key":"functionality outside","Fragments":["of"]},{"Key":"bob function","Fragments":["is"]},{"Key":"good move;","Fragments":["however,"]},{"Key":"move; however,","Fragments":["there"]},{"Key":"few details","Fragments":["that"]},{"Key":"details that","Fragments":["could"]},{"Key":"First, the","Fragments":["parse"]},{"Key":"parse function","Fragments":["has","is"]},{"Key":"function has","Fragments":["to","one"]},{"Key":"responses (it","Fragments":["has"]},{"Key":"(it has","Fragments":["to"]},{"Key":"a number)","Fragments":["instead"]},{"Key":"number) instead","Fragments":["of"]},{"Key":"of simply","Fragments":["returning"]},{"Key":"boolean or","Fragments":["enum"]},{"Key":"or enum","Fragments":["describing"]},{"Key":"enum describing","Fragments":["what"]},{"Key":"describing what","Fragments":["type"]},{"Key":"of pattern","Fragments":["the"]},{"Key":"pattern the","Fragments":["input"]},{"Key":"input has","Fragments":["(ie.","numbers,"]},{"Key":"has (ie.","Fragments":["yell,"]},{"Key":"(ie. yell,","Fragments":["question,"]},{"Key":"yell, question,","Fragments":["etc.)."]},{"Key":"Second, the","Fragments":["parse"]},{"Key":"is large.","Fragments":["It"]},{"Key":"large. It","Fragments":["would"]},{"Key":"would boost","Fragments":["readability"]},{"Key":"checks within","Fragments":["other"]},{"Key":"within other","Fragments":["helper"]},{"Key":"other helper","Fragments":["functions"]},{"Key":"functions each","Fragments":["with"]},{"Key":"each with","Fragments":["a","a"]},{"Key":"a clear,","Fragments":["defined"]},{"Key":"clear, defined","Fragments":["purpose"]},{"Key":"defined purpose","Fragments":["(eg."]},{"Key":"purpose (eg.","Fragments":["check"]},{"Key":"(eg. check","Fragments":["if"]},{"Key":"given string","Fragments":["is"]},{"Key":"a question).","Fragments":["Solving"]},{"Key":"question). Solving","Fragments":["the"]},{"Key":"Solving the","Fragments":["second"]},{"Key":"second note","Fragments":["will"]},{"Key":"note will","Fragments":["also"]},{"Key":" statics","Fragments":["removed."]},{"Key":"statics removed.","Fragments":["I"]},{"Key":"removed. I","Fragments":["just"]},{"Key":"checked others","Fragments":["solutions"]},{"Key":"others solutions","Fragments":["to"]},{"Key":"using statics.","Fragments":[":)"]},{"Key":" @summer","Fragments":["all"]},{"Key":"@summer all","Fragments":["good"]},{"Key":"good points.","Fragments":["I"]},{"Key":"points. I","Fragments":["didn't"]},{"Key":"`auto` syntax,","Fragments":["but"]},{"Key":"syntax, but","Fragments":["I"]},{"Key":"possibly just","Fragments":["use"]},{"Key":"strings instead","Fragments":["of"]},{"Key":"that chooses","Fragments":["a"]},{"Key":"chooses a","Fragments":["response."]},{"Key":"kept failing","Fragments":["tests"]},{"Key":"failing tests","Fragments":["like"]},{"Key":"tests like","Fragments":["that"]},{"Key":"figured I","Fragments":["was"]},{"Key":"point :(","Fragments":["When"]},{"Key":":( When","Fragments":["I"]},{"Key":"I back","Fragments":["to"]},{"Key":"my desktop","Fragments":["I'll"]},{"Key":"desktop I'll","Fragments":["upload"]},{"Key":"I'll upload","Fragments":["a","it","it"]},{"Key":"iteration accordingly.","Fragments":["__Thanks!__"]},{"Key":"first as","Fragments":["well,"]},{"Key":"well, but","Fragments":["I"]},{"Key":" `namespace","Fragments":["bob"]},{"Key":"`namespace bob","Fragments":["{"]},{"Key":"hey(string words)","Fragments":["{"]},{"Key":" }`","Fragments":["instead"]},{"Key":"}` instead","Fragments":["of"]},{"Key":"and defining","Fragments":["all"]},{"Key":"defining all","Fragments":["the"]},{"Key":"as static.","Fragments":["It"]},{"Key":"static. It","Fragments":["makes"]},{"Key":"bit simpler","Fragments":["to"]},{"Key":"follow for","Fragments":["these"]},{"Key":"definitely be","Fragments":["a","a","guarding"]},{"Key":"simpler. I'm","Fragments":["not"]},{"Key":"felt compelled","Fragments":["to"]},{"Key":"an `enum`.","Fragments":["Thanks!"]},{"Key":" Nobody's","Fragments":["going"]},{"Key":"Nobody's going","Fragments":["to"]},{"Key":"call me","Fragments":["on"]},{"Key":"this crap?","Fragments":["This"]},{"Key":"crap? This","Fragments":["is"]},{"Key":"pretty horrific","Fragments":["solution"]},{"Key":"horrific solution","Fragments":["in"]},{"Key":"in truth.","Fragments":[":P"]},{"Key":"is dumb,","Fragments":["I"]},{"Key":"care enough","Fragments":["to"]},{"Key":"rewrite this","Fragments":["using"]},{"Key":"char*` instead","Fragments":["of"]},{"Key":"of `string`,","Fragments":["since"]},{"Key":"`string`, since","Fragments":["the"]},{"Key":"problem isn't","Fragments":["solved"]},{"Key":"isn't solved","Fragments":["any"]},{"Key":"solved any","Fragments":["easier"]},{"Key":"any easier","Fragments":["(in"]},{"Key":"easier (in","Fragments":["this"]},{"Key":"this approach)","Fragments":["using"]},{"Key":"approach) using","Fragments":["`string`"]},{"Key":"using `string`","Fragments":["features,"]},{"Key":"`string` features,","Fragments":["and"]},{"Key":"features, and","Fragments":["that"]},{"Key":"that saves","Fragments":["us"]},{"Key":"saves us","Fragments":["a"]},{"Key":"of overhead.","Fragments":["I"]},{"Key":"overhead. I","Fragments":["opted"]},{"Key":"opted to","Fragments":["do"]},{"Key":"this procedurally","Fragments":["and"]},{"Key":"and completely","Fragments":["self-contained,"]},{"Key":"completely self-contained,","Fragments":["and"]},{"Key":"self-contained, and","Fragments":["I'm"]},{"Key":"cons of","Fragments":["that"]},{"Key":"that versus","Fragments":["using"]},{"Key":"versus using","Fragments":["pre-written"]},{"Key":"using pre-written","Fragments":["libraries"]},{"Key":"pre-written libraries","Fragments":["or"]},{"Key":"a functional","Fragments":["approach"]},{"Key":"functional approach","Fragments":["would"]},{"Key":"performance advantage","Fragments":["of"]},{"Key":"string once,","Fragments":["whereas"]},{"Key":"once, whereas","Fragments":["other"]},{"Key":"whereas other","Fragments":["people's"]},{"Key":"people's implementations","Fragments":["seem"]},{"Key":"implementations seem","Fragments":["to"]},{"Key":"time they","Fragments":["look"]},{"Key":"they look","Fragments":["for"]},{"Key":"for properties","Fragments":["of"]},{"Key":"string (e.g.","Fragments":["is_uppercase,"]},{"Key":"(e.g. is_uppercase,","Fragments":["is_empty,"]},{"Key":"is_uppercase, is_empty,","Fragments":["is_question)."]},{"Key":"the enumeration","Fragments":["clouded","and"]},{"Key":"enumeration clouded","Fragments":["up"]},{"Key":"clouded up","Fragments":["the"]},{"Key":"only exists","Fragments":["within"]},{"Key":"exists within","Fragments":["the"]},{"Key":"bob class","Fragments":["I","and"]},{"Key":"class I","Fragments":["figure"]},{"Key":"At line","Fragments":["50","20"]},{"Key":"line 50","Fragments":["you"]},{"Key":"50 you","Fragments":["could"]},{"Key":"use isspace(c)","Fragments":["to"]},{"Key":"isspace(c) to","Fragments":["check"]},{"Key":"is white","Fragments":["space."]},{"Key":"thanks @carmel","Fragments":["that"]},{"Key":"@carmel that","Fragments":["might"]},{"Key":"more inclusive","Fragments":["than"]},{"Key":"inclusive than","Fragments":["`'"]},{"Key":"than `'","Fragments":["'`"]},{"Key":"`' '`","Fragments":["and"]},{"Key":"'` and","Fragments":["`'\\t'`"]},{"Key":"and `'\\t'`","Fragments":["=)"]},{"Key":"Nicely done.","Fragments":[":)"]},{"Key":"done. :)","Fragments":["The"]},{"Key":"two suggestions","Fragments":["I"]},{"Key":"suggestions I","Fragments":["have"]},{"Key":"1. to","Fragments":["replace"]},{"Key":"replace ```boost::algorithm::ends_with(str2,","Fragments":["\"?\")```"]},{"Key":"```boost::algorithm::ends_with(str2, \"?\")```","Fragments":["with"]},{"Key":"\"?\")``` with","Fragments":["```str2.back()"]},{"Key":"with ```str2.back()","Fragments":["=="]},{"Key":"```str2.back() ==","Fragments":["'?'```"]},{"Key":"== '?'```","Fragments":["because"]},{"Key":"'?'``` because","Fragments":["```back()```"]},{"Key":"because ```back()```","Fragments":["is"]},{"Key":"```back()``` is","Fragments":["part"]},{"Key":"STL since","Fragments":["C++11,"]},{"Key":"2. to","Fragments":["change"]},{"Key":"method signature","Fragments":["to"]},{"Key":"signature to","Fragments":["```string"]},{"Key":"to ```string","Fragments":["str```"]},{"Key":"```string str```","Fragments":["(getting"]},{"Key":"str``` (getting","Fragments":["str"]},{"Key":"(getting str","Fragments":["by-value)"]},{"Key":"str by-value)","Fragments":["which"]},{"Key":"by-value) which","Fragments":["then"]},{"Key":"which then","Fragments":["allows"]},{"Key":"then allows","Fragments":["you"]},{"Key":"delete line","Fragments":["#9."]},{"Key":"line #9.","Fragments":[":)"]},{"Key":"You rely","Fragments":["on"]},{"Key":"on built-in","Fragments":["data"]},{"Key":"built-in data","Fragments":["structures"]},{"Key":"structures and","Fragments":["functions,"]},{"Key":"very good.","Fragments":[":)"]},{"Key":"good. :)","Fragments":["May"]},{"Key":":) May","Fragments":["I"]},{"Key":"May I","Fragments":["suggest","suggest"]},{"Key":"suggest a","Fragments":["few","better"]},{"Key":"- Each","Fragments":["call"]},{"Key":"Each call","Fragments":["to"]},{"Key":"to ```fill_map```-method","Fragments":["could"]},{"Key":"```fill_map```-method could","Fragments":["be"]},{"Key":"with ```if","Fragments":["(!word.empty())"]},{"Key":"```if (!word.empty())","Fragments":["ret[word]++;```"]},{"Key":"(!word.empty()) ret[word]++;```","Fragments":["because"]},{"Key":"do always","Fragments":["prefer"]},{"Key":"always prefer","Fragments":["```!word.empty()```"]},{"Key":"prefer ```!word.empty()```","Fragments":["to"]},{"Key":"```!word.empty()``` to","Fragments":["the"]},{"Key":"check ```word","Fragments":["!="]},{"Key":"```word !=","Fragments":["\"\"```"]},{"Key":"!= \"\"```","Fragments":["because"]},{"Key":"\"\"``` because","Fragments":["in"]},{"Key":"latter you","Fragments":["first"]},{"Key":"first initialize","Fragments":["a"]},{"Key":"initialize a","Fragments":["string"]},{"Key":"- Lines","Fragments":["43-46:"]},{"Key":"Lines 43-46:","Fragments":["Here"]},{"Key":"43-46: Here","Fragments":["you"]},{"Key":"could rely","Fragments":["on"]},{"Key":"on ```int```'s","Fragments":["default"]},{"Key":"```int```'s default","Fragments":["constructor,"]},{"Key":"default constructor,","Fragments":["which","that"]},{"Key":"constructor, which","Fragments":["initializes"]},{"Key":"which initializes","Fragments":["```ret[word]```"]},{"Key":"initializes ```ret[word]```","Fragments":["to"]},{"Key":"```ret[word]``` to","Fragments":["```0```"]},{"Key":"to ```0```","Fragments":["if"]},{"Key":"```0``` if","Fragments":["word"]},{"Key":"yet contained","Fragments":["in"]},{"Key":"map. Hence,","Fragments":["these"]},{"Key":"Hence, these","Fragments":["four"]},{"Key":"these four","Fragments":["lines"]},{"Key":"four lines","Fragments":["could"]},{"Key":"- Line","Fragments":["31"]},{"Key":"Line 31","Fragments":["(and"]},{"Key":"31 (and","Fragments":["thus"]},{"Key":"(and thus","Fragments":["the"]},{"Key":"thus the","Fragments":["for-loop)"]},{"Key":"the for-loop)","Fragments":["is"]},{"Key":"for-loop) is","Fragments":["not"]},{"Key":"yet optimal:","Fragments":["Every"]},{"Key":"optimal: Every","Fragments":["time"]},{"Key":"Every time","Fragments":["```+=```"]},{"Key":"time ```+=```","Fragments":["is"]},{"Key":"```+=``` is","Fragments":["called"]},{"Key":"called the","Fragments":["string"]},{"Key":"be enlarged","Fragments":["by"]},{"Key":"enlarged by","Fragments":["one"]},{"Key":"by one","Fragments":["character,","instead","of"]},{"Key":"one character,","Fragments":["which"]},{"Key":"character, which","Fragments":["in"]},{"Key":"which in","Fragments":["the","my"]},{"Key":"end might","Fragments":["result"]},{"Key":"might result","Fragments":["in"]},{"Key":"reallocations of","Fragments":["memory."]},{"Key":"memory. If","Fragments":["you"]},{"Key":"the for-loop-way,","Fragments":["you"]},{"Key":"for-loop-way, you","Fragments":["could"]},{"Key":"could instead","Fragments":["remember"]},{"Key":"instead remember","Fragments":["the"]},{"Key":"last position","Fragments":["that"]},{"Key":"that belongs","Fragments":["to"]},{"Key":"belongs to","Fragments":["a"]},{"Key":"and _then_","Fragments":["construct"]},{"Key":"_then_ construct","Fragments":["it"]},{"Key":"it after","Fragments":["line"]},{"Key":"thanks @royal","Fragments":["I"]},{"Key":"@royal I","Fragments":["will"]},{"Key":"implement your","Fragments":["suggestions"]},{"Key":"suggestions at","Fragments":["some"]},{"Key":"some point","Fragments":["over","```s1[4]"]},{"Key":"point over","Fragments":["this"]},{"Key":"over this","Fragments":["weekend."]},{"Key":"this weekend.","Fragments":["They"]},{"Key":"weekend. They","Fragments":["all"]},{"Key":"They all","Fragments":["seem"]},{"Key":"all seem","Fragments":["very"]},{"Key":"seem very","Fragments":["valid.","C++"]},{"Key":"very valid.","Fragments":["I"]},{"Key":"valid. I","Fragments":["did"]},{"Key":"about efficiency.","Fragments":["Remembering"]},{"Key":"efficiency. Remembering","Fragments":["indexes"]},{"Key":"Remembering indexes","Fragments":["would"]},{"Key":"indexes would","Fragments":["definitely"]},{"Key":"more optimal","Fragments":["way"]},{"Key":"optimal way","Fragments":["to"]},{"Key":"go about","Fragments":["creating","checking","this","this"]},{"Key":"the auto","Fragments":["and","lines,","keyword","keyword"]},{"Key":"loop advice,","Fragments":["I'll"]},{"Key":"advice, I'll","Fragments":["definitely"]},{"Key":"that well","Fragments":["named"]},{"Key":"named test","Fragments":["functions"]},{"Key":"test functions","Fragments":["often"]},{"Key":"functions often","Fragments":["help"]},{"Key":"often help","Fragments":["readability,"]},{"Key":"help readability,","Fragments":["getting"]},{"Key":"readability, getting","Fragments":["a"]},{"Key":"reasonable balance","Fragments":["between"]},{"Key":"balance between","Fragments":["offloading","storing"]},{"Key":"between offloading","Fragments":["small"]},{"Key":"offloading small","Fragments":["checks"]},{"Key":"small checks","Fragments":["into"]},{"Key":"into them","Fragments":["at"]},{"Key":"the expense","Fragments":["of","of"]},{"Key":"of greater","Fragments":["code"]},{"Key":"greater code","Fragments":["size,"]},{"Key":"code size,","Fragments":["and"]},{"Key":"instead having","Fragments":["well"]},{"Key":"having well","Fragments":["named"]},{"Key":"named variables","Fragments":["for"]},{"Key":"the space","Fragments":["taken","after"]},{"Key":"space taken","Fragments":["by"]},{"Key":"taken by","Fragments":["any"]},{"Key":"by any","Fragments":["unit"]},{"Key":"any unit","Fragments":["of"]},{"Key":"unit of","Fragments":["code"]},{"Key":"a tricky","Fragments":["one."]},{"Key":"I've certainly","Fragments":["reimplemented"]},{"Key":"certainly reimplemented","Fragments":["some"]},{"Key":"reimplemented some","Fragments":["library"]},{"Key":"some library","Fragments":["functionality","functions"]},{"Key":"library functionality","Fragments":["with"]},{"Key":"functionality with","Fragments":["my"]},{"Key":"my character","Fragments":["matching"]},{"Key":"character matching","Fragments":["and","routine"]},{"Key":"matching and","Fragments":["stripping,"]},{"Key":"and stripping,","Fragments":["however"]},{"Key":"stripping, however","Fragments":["I'm"]},{"Key":"however I'm","Fragments":["not"]},{"Key":"best alternative","Fragments":["approach"]},{"Key":"alternative approach","Fragments":["would"]},{"Key":"would be.","Fragments":["Maybe"]},{"Key":"be. Maybe","Fragments":["loop"]},{"Key":"Maybe loop","Fragments":["the"]},{"Key":"loop the","Fragments":["the"]},{"Key":"string, cutting","Fragments":["out"]},{"Key":"cutting out","Fragments":["sections"]},{"Key":"out sections","Fragments":["containing"]},{"Key":"sections containing","Fragments":["undesired"]},{"Key":"containing undesired","Fragments":["chars?"]},{"Key":"some trouble","Fragments":["moving"]},{"Key":"trouble moving","Fragments":["the"]},{"Key":"word extraction","Fragments":["to"]},{"Key":"extraction to","Fragments":["it's"]},{"Key":"to it's","Fragments":["own","characters"]},{"Key":"function, since","Fragments":["I"]},{"Key":"with whitespace","Fragments":["removed"]},{"Key":"whitespace removed","Fragments":["and"]},{"Key":"characters cut","Fragments":["from"]},{"Key":"cut from","Fragments":["the"]},{"Key":"there's any","Fragments":["advantage","remainder,"]},{"Key":"any advantage","Fragments":["to"]},{"Key":"string lowercase,","Fragments":["or"]},{"Key":"lowercase, or","Fragments":["doing"]},{"Key":"or doing","Fragments":["it"]},{"Key":"it word","Fragments":["by"]},{"Key":"word by","Fragments":["word."]},{"Key":"looks clean,","Fragments":["concise","but"]},{"Key":"clean, concise","Fragments":["and"]},{"Key":"and well-composed.","Fragments":["You"]},{"Key":"well-composed. You","Fragments":["could"]},{"Key":"boost your","Fragments":["encapsulation"]},{"Key":"your encapsulation","Fragments":["by"]},{"Key":"encapsulation by","Fragments":["perform"]},{"Key":"by perform","Fragments":["the"]},{"Key":"of counting","Fragments":["words"]},{"Key":"counting words","Fragments":["in"]},{"Key":"Also, `using","Fragments":["namespace"]},{"Key":"std` can","Fragments":["be"]},{"Key":"bit heavy-handed","Fragments":["and","and"]},{"Key":"heavy-handed and","Fragments":["pollute","can"]},{"Key":"and pollute","Fragments":["your"]},{"Key":"pollute your","Fragments":["global"]},{"Key":"with unneeded","Fragments":["definitions."]},{"Key":"unneeded definitions.","Fragments":["Good"]},{"Key":"definitions. Good","Fragments":["you"]},{"Key":"Good you","Fragments":["also"]},{"Key":"you also","Fragments":["included","do"]},{"Key":"also included","Fragments":["a"]},{"Key":"included a","Fragments":["macro"]},{"Key":" Ty,","Fragments":["didn't"]},{"Key":"Ty, didn't","Fragments":["really"]},{"Key":"that. going","Fragments":["to"]},{"Key":"look a","Fragments":["lot"]},{"Key":"everything from","Fragments":["a"]},{"Key":"namespace thanks","Fragments":["to"]},{"Key":"to @alfredo","Fragments":["."]},{"Key":"@alfredo .","Fragments":["i"]},{"Key":". i","Fragments":["also"]},{"Key":"i also","Fragments":["changed"]},{"Key":"also changed","Fragments":["som","the"]},{"Key":"changed som","Fragments":["off"]},{"Key":"som off","Fragments":["the"]},{"Key":"it easer","Fragments":["to"]},{"Key":"easer to","Fragments":["understand"]},{"Key":"they do(might","Fragments":["have"]},{"Key":"do(might have","Fragments":["added"]},{"Key":"few cpu","Fragments":["cycles)"]},{"Key":"Well, I","Fragments":["think"]},{"Key":"unordered_map because","Fragments":["the"]},{"Key":"tests require","Fragments":["you"]},{"Key":" Come","Fragments":["to"]},{"Key":"Come to","Fragments":["think"]},{"Key":"a std::unordered_map","Fragments":["in"]},{"Key":"std::unordered_map in","Fragments":["my"]},{"Key":" Yea","Fragments":["well,"]},{"Key":"Yea well,","Fragments":["that"]},{"Key":"well, that","Fragments":["works"]},{"Key":" Kinda","Fragments":["the"]},{"Key":"Kinda the","Fragments":["idea"]},{"Key":"idea was","Fragments":["to"]},{"Key":"not paste","Fragments":["the"]},{"Key":"paste the","Fragments":["entire","crux"]},{"Key":"entire song","Fragments":["into"]},{"Key":"song into","Fragments":["a"]},{"Key":"string array,","Fragments":["but"]},{"Key":"array, but","Fragments":["to"]},{"Key":"generate as","Fragments":["much"]},{"Key":"text algorithmically","Fragments":["as"]},{"Key":"algorithmically as","Fragments":["feasible."]},{"Key":"good half","Fragments":["of"]},{"Key":"text consists","Fragments":["of"]},{"Key":"consists of","Fragments":["\"She"]},{"Key":"of \"She","Fragments":["swallowed"]},{"Key":"\"She swallowed","Fragments":["the"]},{"Key":"swallowed the","Fragments":["x"]},{"Key":"the x","Fragments":["to"]},{"Key":"x to","Fragments":["catch"]},{"Key":"catch the","Fragments":["y\","]},{"Key":"the y\",","Fragments":["so"]},{"Key":"y\", so","Fragments":["that"]},{"Key":"generated through","Fragments":["code."]},{"Key":"to concede","Fragments":["that"]},{"Key":"concede that","Fragments":["this"]},{"Key":"fastest one","Fragments":["to"]},{"Key":" got","Fragments":["one"]},{"Key":"got one","Fragments":["smaller"]},{"Key":"one smaller","Fragments":["thing"]},{"Key":"smaller thing","Fragments":["and"]},{"Key":"bigger one","Fragments":["to"]},{"Key":"to nitpick","Fragments":["about","me","something,"]},{"Key":"nitpick about","Fragments":[":)"]},{"Key":"1) `returnValue[wordBuffer]","Fragments":["=="]},{"Key":"`returnValue[wordBuffer] ==","Fragments":["'\\0'`"]},{"Key":"== '\\0'`","Fragments":["here"]},{"Key":"'\\0'` here","Fragments":["you"]},{"Key":"here you","Fragments":["should"]},{"Key":"have `==","Fragments":["0`"]},{"Key":"`== 0`","Fragments":["instead."]},{"Key":"0` instead.","Fragments":["You're"]},{"Key":"instead. You're","Fragments":["comparing"]},{"Key":"You're comparing","Fragments":["a"]},{"Key":"comparing a","Fragments":["char"]},{"Key":"2) As","Fragments":["you"]},{"Key":"see for","Fragments":["yourself..."]},{"Key":"for yourself...","Fragments":["the"]},{"Key":"yourself... the","Fragments":["code"]},{"Key":"read. Lots","Fragments":["of"]},{"Key":"of ifs,","Fragments":["lots"]},{"Key":"ifs, lots","Fragments":["of"]},{"Key":"of obscure","Fragments":["conditions."]},{"Key":"obscure conditions.","Fragments":["And"]},{"Key":"conditions. And","Fragments":["you"]},{"Key":"do certain","Fragments":["work"]},{"Key":"certain work","Fragments":["more"]},{"Key":"work more","Fragments":["than"]},{"Key":"than once.","Fragments":["For"]},{"Key":"once. For","Fragments":["example,"]},{"Key":"example, a","Fragments":["string"]},{"Key":"like \"hello,there\"","Fragments":["would"]},{"Key":"\"hello,there\" would","Fragments":["go"]},{"Key":"process of","Fragments":["replacing","going"]},{"Key":"of replacing","Fragments":["non-alnum"]},{"Key":"replacing non-alnum","Fragments":["chars"]},{"Key":"non-alnum chars","Fragments":["with"]},{"Key":"chars with","Fragments":["whitespaces"]},{"Key":"with whitespaces","Fragments":["twice."]},{"Key":"complicated code","Fragments":["is"]},{"Key":"you've approached","Fragments":["the"]},{"Key":"You try","Fragments":["to"]},{"Key":"replace any","Fragments":["punctuation"]},{"Key":"punctuation with","Fragments":["'"]},{"Key":"with '","Fragments":["'"]},{"Key":"' '","Fragments":["before"]},{"Key":"' before","Fragments":["you"]},{"Key":"better approach","Fragments":["is","is"]},{"Key":"beginning and","Fragments":["end","end","ending"]},{"Key":"of alpha-numerical","Fragments":["sequences","sequences"]},{"Key":"alpha-numerical sequences","Fragments":["in","in"]},{"Key":"ignore any","Fragments":["non-alphanum","non-alphanum"]},{"Key":"any non-alphanum","Fragments":["chars","chars"]},{"Key":"non-alphanum chars","Fragments":["completely.","completely."]},{"Key":"chars completely.","Fragments":["You","You"]},{"Key":"completely. You","Fragments":["can","can"]},{"Key":"use [`std::find_if`](http://www.cplusplus.com/reference/algorithm/find_if/)","Fragments":["for","for"]},{"Key":"[`std::find_if`](http://www.cplusplus.com/reference/algorithm/find_if/) for","Fragments":["that.","that,"]},{"Key":" ^","Fragments":["^","^"]},{"Key":" start","Fragments":["end","end"]},{"Key":" Basically,","Fragments":["if","if"]},{"Key":"Basically, if","Fragments":["`\"..!longword@,?\"`","`\"..!longword@,?\"`"]},{"Key":"if `\"..!longword@,?\"`","Fragments":["is","is"]},{"Key":"`\"..!longword@,?\"` is","Fragments":["the","the"]},{"Key":"string, you'd","Fragments":["try","try"]},{"Key":"you'd try","Fragments":["to","to"]},{"Key":"to immediate","Fragments":["find","find"]},{"Key":"immediate find","Fragments":["the","the"]},{"Key":"greatly reduce","Fragments":["the","the"]},{"Key":"required code","Fragments":["with","with"]},{"Key":" (Alternatively,","Fragments":["you"]},{"Key":"(Alternatively, you","Fragments":["could"]},{"Key":"tokenizer like","Fragments":["`boost::tokenizer`"]},{"Key":"like `boost::tokenizer`","Fragments":["to"]},{"Key":"`boost::tokenizer` to","Fragments":["do"]},{"Key":"string lower_case","Fragments":["at"]},{"Key":"lower_case at","Fragments":["once"]},{"Key":"better approach.","Fragments":["This"]},{"Key":"approach. This","Fragments":["way"]},{"Key":"two of","Fragments":["your"]},{"Key":"string globals","Fragments":["so"]},{"Key":"globals so","Fragments":["you"]},{"Key":"not correctly","Fragments":["parsing"]},{"Key":"correctly parsing","Fragments":["things"]},{"Key":"parsing things","Fragments":["like"]},{"Key":"like `\"this,is\"`.","Fragments":["Your"]},{"Key":"`\"this,is\"`. Your","Fragments":["program"]},{"Key":"Your program","Fragments":["doesn't"]},{"Key":"doesn't parse","Fragments":["it"]},{"Key":"parse it","Fragments":["as"]},{"Key":"as two","Fragments":["different","tasks,"]},{"Key":"different word,","Fragments":["but"]},{"Key":"word, but","Fragments":["turns","on"]},{"Key":"but turns","Fragments":["it"]},{"Key":"turns it","Fragments":["into"]},{"Key":"with removal","Fragments":["of"]},{"Key":"removal of","Fragments":["whitespace"]},{"Key":"of whitespace","Fragments":["and"]},{"Key":"other undesirable","Fragments":["chars,"]},{"Key":"undesirable chars,","Fragments":["then"]},{"Key":"chars, then","Fragments":["I"]},{"Key":"suggest an","Fragments":["alternative:"]},{"Key":"for that,","Fragments":["or"]},{"Key":"that, or","Fragments":["a"]},{"Key":"of \"longword\"","Fragments":["to"]},{"Key":"\"longword\" to","Fragments":["put"]},{"Key":"the std::map.","Fragments":["Everything"]},{"Key":"std::map. Everything","Fragments":["that"]},{"Key":"Everything that","Fragments":["isn't"]},{"Key":"of letter","Fragments":["is"]},{"Key":"of absolutely","Fragments":["no"]},{"Key":"saw people","Fragments":["talking"]},{"Key":"people talking","Fragments":["about"]},{"Key":"about anonymous","Fragments":["namespace,","namespaces,"]},{"Key":" @murray","Fragments":["Thanks"]},{"Key":"@murray Thanks","Fragments":["for"]},{"Key":"the alternative","Fragments":["to"]},{"Key":"mutable string","Fragments":["input","input"]},{"Key":"string input","Fragments":["in","in"]},{"Key":"your example","Fragments":["is","disables)"]},{"Key":"example is","Fragments":["something"]},{"Key":"func(std::string const","Fragments":["\u0026s){"]},{"Key":"std::string s_func","Fragments":["="]},{"Key":"s_func =","Fragments":["s;"]},{"Key":" s_func","Fragments":["+="]},{"Key":"s_func +=","Fragments":["i;"]},{"Key":"of choosing","Fragments":["the"]},{"Key":"choosing the","Fragments":["mutable"]},{"Key":"case, as","Fragments":["it"]},{"Key":"less memory.","Fragments":["My"]},{"Key":"memory. My","Fragments":["question"]},{"Key":"My question","Fragments":["is","is"]},{"Key":"is are","Fragments":["there","there"]},{"Key":"any clear","Fragments":["benefits","benefits"]},{"Key":"clear benefits","Fragments":["of","of"]},{"Key":"const inputs","Fragments":["and","are","and"]},{"Key":"inputs and","Fragments":["copying","copying"]},{"Key":"and copying","Fragments":["them","them"]},{"Key":"copying them","Fragments":["to","to"]},{"Key":"other variables","Fragments":["if","if"]},{"Key":"they need","Fragments":["to","to","to"]},{"Key":"changed in","Fragments":["the","the","the"]},{"Key":"Clearly for","Fragments":["the"]},{"Key":"the hamming","Fragments":["problem,","namespace,","class."]},{"Key":"hamming problem,","Fragments":["const"]},{"Key":"problem, const","Fragments":["inputs"]},{"Key":"inputs are","Fragments":["the"]},{"Key":"Now, I'm","Fragments":["using"]},{"Key":"it's yelling","Fragments":["and"]},{"Key":"a prolonged","Fragments":["silence."]},{"Key":"Hi, a","Fragments":["suggestion.."]},{"Key":"it's shouting","Fragments":["and"]},{"Key":"it's silence","Fragments":["on"]},{"Key":"silence on","Fragments":["the"]},{"Key":"improve performance","Fragments":["from"]},{"Key":"performance from","Fragments":["your"]},{"Key":"For checking","Fragments":["if"]},{"Key":"if each","Fragments":["letter"]},{"Key":"is upper/lower","Fragments":["case"]},{"Key":"upper/lower case","Fragments":["you"]},{"Key":"use isupper(letter)","Fragments":["or"]},{"Key":"isupper(letter) or","Fragments":["islower(letter)."]},{"Key":"or islower(letter).","Fragments":["Similarly"]},{"Key":"islower(letter). Similarly","Fragments":["you"]},{"Key":"Similarly you","Fragments":["can"]},{"Key":"use isspace(letter)","Fragments":["to"]},{"Key":"isspace(letter) to","Fragments":["check"]},{"Key":"figured a","Fragments":["nice","single"]},{"Key":"nice way","Fragments":["to"]},{"Key":"were equal.","Fragments":["Looking"]},{"Key":"equal. Looking","Fragments":["at"]},{"Key":"solutions, I","Fragments":["see"]},{"Key":"see there","Fragments":["is"]},{"Key":"function ```std::is_permutation```","Fragments":["from"]},{"Key":"```std::is_permutation``` from","Fragments":["algorithm,"]},{"Key":"from algorithm,","Fragments":["which"]},{"Key":"algorithm, which","Fragments":["would"]},{"Key":"noticed how","Fragments":["isalpha,","it"]},{"Key":"how isalpha,","Fragments":["islower,"]},{"Key":"isalpha, islower,","Fragments":["etc."]},{"Key":"islower, etc.","Fragments":["are"]},{"Key":"etc. are","Fragments":["formed"]},{"Key":"are formed","Fragments":["as"]},{"Key":"formed as","Fragments":["assertions"]},{"Key":"as assertions","Fragments":["or"]},{"Key":"assertions or","Fragments":["questions?"]},{"Key":"or questions?","Fragments":["Have"]},{"Key":"questions? Have","Fragments":["you"]},{"Key":"an if-statement","Fragments":["look"]},{"Key":"if-statement look","Fragments":["almost"]},{"Key":"look almost","Fragments":["like"]},{"Key":"Which makes","Fragments":["more"]},{"Key":"sense when","Fragments":["read"]},{"Key":"when read","Fragments":["out"]},{"Key":"read out","Fragments":["loud:"]},{"Key":"out loud:","Fragments":["\"if"]},{"Key":"loud: \"if","Fragments":["is"]},{"Key":"\"if is","Fragments":["upper"]},{"Key":"upper case\"","Fragments":["or"]},{"Key":"case\" or","Fragments":["\"if"]},{"Key":"or \"if","Fragments":["check"]},{"Key":"\"if check","Fragments":["upper"]},{"Key":"check upper","Fragments":["case\"?"]},{"Key":"\u003e My","Fragments":["question"]},{"Key":"Not to","Fragments":["my"]},{"Key":"my knowledge.","Fragments":["If"]},{"Key":"knowledge. If","Fragments":["you"]},{"Key":"variable, you","Fragments":["better"]},{"Key":"you better","Fragments":["pass"]},{"Key":"better pass","Fragments":["it"]},{"Key":"value. Less","Fragments":["code"]},{"Key":"Less code","Fragments":["and"]},{"Key":"is cheating","Fragments":["per-se."]},{"Key":"cheating per-se.","Fragments":["It"]},{"Key":"per-se. It","Fragments":["does"]},{"Key":"isn't high-performance","Fragments":["for"]},{"Key":"high-performance for","Fragments":["two"]},{"Key":"You construct","Fragments":["four"]},{"Key":"construct four","Fragments":["`std::regex`"]},{"Key":"four `std::regex`","Fragments":["objects"]},{"Key":"`std::regex` objects","Fragments":["every"]},{"Key":"objects every","Fragments":["time"]},{"Key":"time `hey`","Fragments":["is"]},{"Key":"called. Constructing","Fragments":["such"]},{"Key":"Constructing such","Fragments":["a"]},{"Key":"of expensive.","Fragments":["That's"]},{"Key":"expensive. That's","Fragments":["why"]},{"Key":"why you'd","Fragments":["generally"]},{"Key":"you'd generally","Fragments":["try"]},{"Key":"generally try","Fragments":["to"]},{"Key":"to re-use","Fragments":["them"]},{"Key":"re-use them","Fragments":["(storing"]},{"Key":"them (storing","Fragments":["them"]},{"Key":"(storing them","Fragments":["as"]},{"Key":"variables, for","Fragments":["example)."]},{"Key":"2) Regexs","Fragments":["in"]},{"Key":"Regexs in","Fragments":["itself"]},{"Key":"in itself","Fragments":["are"]},{"Key":"itself are","Fragments":["probably"]},{"Key":"probably slower","Fragments":["than"]},{"Key":"a search","Fragments":["\"by"]},{"Key":"search \"by","Fragments":["hand\""]},{"Key":"\"by hand\"","Fragments":["since"]},{"Key":"hand\" since","Fragments":["they're"]},{"Key":"they're vastly","Fragments":["more"]},{"Key":"vastly more","Fragments":["complex."]},{"Key":"more complex.","Fragments":["If"]},{"Key":"complex. If","Fragments":["you"]},{"Key":"benchmark the","Fragments":["code"]},{"Key":"without regexes,","Fragments":["I'd"]},{"Key":"regexes, I'd","Fragments":["be"]},{"Key":"very surprised","Fragments":["if"]},{"Key":"surprised if","Fragments":["you"]},{"Key":"the non-regex","Fragments":["code"]},{"Key":"non-regex code","Fragments":["to"]},{"Key":"problem, especially","Fragments":["since"]},{"Key":"are other","Fragments":["good","patterns).","error"]},{"Key":"other good","Fragments":["alternatives"]},{"Key":"good alternatives","Fragments":["to"]},{"Key":"solve it","Fragments":["[like"]},{"Key":"it [like","Fragments":["this](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)"]},{"Key":"[like this](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)","Fragments":["(shameless"]},{"Key":"this](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1) (shameless","Fragments":["plug"]},{"Key":"(shameless plug","Fragments":["for"]},{"Key":"plug for","Fragments":["my"]},{"Key":"own submission","Fragments":[":p"]},{"Key":"submission :p","Fragments":[")."]},{"Key":"is sort","Fragments":["of"]},{"Key":"C. I","Fragments":["tried","guess"]},{"Key":"C++ way","Fragments":["to","(which"]},{"Key":"couldn't come","Fragments":["up"]},{"Key":"anything that's","Fragments":["shorter"]},{"Key":"that's shorter","Fragments":["or"]},{"Key":"shorter or","Fragments":["clearer"]},{"Key":"or clearer","Fragments":["than"]},{"Key":" Yea,","Fragments":["in","I'm"]},{"Key":"Yea, in","Fragments":["my"]},{"Key":"opinion private","Fragments":["enums"]},{"Key":"private enums","Fragments":["in"]},{"Key":"enums in","Fragments":["a"]},{"Key":"the `for(int","Fragments":["i=0;i\u003cprompt.size();++i)`"]},{"Key":"`for(int i=0;i\u003cprompt.size();++i)`","Fragments":["into"]},{"Key":"i=0;i\u003cprompt.size();++i)` into","Fragments":["a"]},{"Key":"for-element loop","Fragments":["`for(char","`for(char"]},{"Key":"loop `for(char","Fragments":["c","c"]},{"Key":": prompt)`","Fragments":["if"]},{"Key":"prompt)` if","Fragments":["you're"]},{"Key":"C++11 compiler.","Fragments":["That'll","That'll"]},{"Key":"compiler. That'll","Fragments":["remove","make"]},{"Key":"That'll remove","Fragments":["the"]},{"Key":"the chance","Fragments":["for","of","I","to"]},{"Key":"chance for","Fragments":["errors","confusion."]},{"Key":"for errors","Fragments":["during"]},{"Key":"errors during","Fragments":["the","link"]},{"Key":"`i` variable","Fragments":["anymore."]},{"Key":"the `break;`","Fragments":["in"]},{"Key":"`break;` in","Fragments":["`case"]},{"Key":"in `case","Fragments":["X:"]},{"Key":"`case X:","Fragments":["return"]},{"Key":"X: return","Fragments":["\"blah\";"]},{"Key":"return \"blah\";","Fragments":["break;`"]},{"Key":"\"blah\"; break;`","Fragments":["since"]},{"Key":"break;` since","Fragments":["a"]},{"Key":"statement already","Fragments":["acts"]},{"Key":"already acts","Fragments":["as"]},{"Key":"acts as","Fragments":["a"]},{"Key":"a break.","Fragments":["I'd"]},{"Key":"break. I'd","Fragments":["say"]},{"Key":"that's up","Fragments":["to"]},{"Key":"to personal","Fragments":["preference"]},{"Key":"preference but","Fragments":["I"]},{"Key":"think certain","Fragments":["compilers"]},{"Key":"certain compilers","Fragments":["actually"]},{"Key":"compilers actually","Fragments":["issue"]},{"Key":"actually issue","Fragments":["a"]},{"Key":"issue a","Fragments":["warning"]},{"Key":"warning for","Fragments":["unreachable"]},{"Key":"for unreachable","Fragments":["code"]},{"Key":"unreachable code","Fragments":["because"]},{"Key":"Lastly, you","Fragments":["should"]},{"Key":"functions accept","Fragments":["`const"]},{"Key":"accept `const","Fragments":["string\u0026"]},{"Key":"string\u0026 prompt`","Fragments":["instead"]},{"Key":"prompt` instead","Fragments":["of"]},{"Key":"of `string","Fragments":["promt`"]},{"Key":"`string promt`","Fragments":["since"]},{"Key":"promt` since","Fragments":["you"]},{"Key":"modify `prompt`","Fragments":["in"]},{"Key":"`prompt` in","Fragments":["your"]},{"Key":"function. That","Fragments":["way"]},{"Key":"unnecessary copying","Fragments":["of"]},{"Key":" couple","Fragments":["of"]},{"Key":"have `if(question[question.size()-1]","Fragments":["=="]},{"Key":"`if(question[question.size()-1] ==","Fragments":["'?')`"]},{"Key":"== '?')`","Fragments":["before"]},{"Key":"'?')` before","Fragments":["you"]},{"Key":"whether question","Fragments":["is"]},{"Key":"So calling","Fragments":["`bob::hey(\"\")`"]},{"Key":"calling `bob::hey(\"\")`","Fragments":["currently"]},{"Key":"`bob::hey(\"\")` currently","Fragments":["crashes"]},{"Key":"currently crashes","Fragments":["with"]},{"Key":"crashes with","Fragments":["an"]},{"Key":"an access","Fragments":["violation."]},{"Key":"of `for(unsigned","Fragments":["int"]},{"Key":"`for(unsigned int","Fragments":["i"]},{"Key":"\u003c question.size();","Fragments":["i++)`"]},{"Key":"question.size(); i++)`","Fragments":["you"]},{"Key":"i++)` you","Fragments":["could"]},{"Key":": question)`","Fragments":["if"]},{"Key":"question)` if","Fragments":["you"]},{"Key":"That'll make","Fragments":["your"]},{"Key":"loop slightly","Fragments":["easier"]},{"Key":"and removes","Fragments":["the"]},{"Key":"removes the","Fragments":["chance"]},{"Key":"chance of","Fragments":["making"]},{"Key":"mistake while","Fragments":["looping"]},{"Key":"while looping","Fragments":["(e.g."]},{"Key":"looping (e.g.","Fragments":["off-by-one"]},{"Key":"(e.g. off-by-one","Fragments":["errors)."]},{"Key":"two global","Fragments":["variables","variables"]},{"Key":"global variables","Fragments":["`isYelling`","here;","is"]},{"Key":"variables `isYelling`","Fragments":["and"]},{"Key":"`isYelling` and","Fragments":["`isProlongedSilence`"]},{"Key":"and `isProlongedSilence`","Fragments":["are"]},{"Key":"`isProlongedSilence` are","Fragments":["a"]},{"Key":"bad idea.","Fragments":["There's","And"]},{"Key":"idea. There's","Fragments":["no"]},{"Key":"variables here;","Fragments":["it"]},{"Key":"here; it","Fragments":["makes"]},{"Key":"be. You","Fragments":["could"]},{"Key":"make `checkQuestion`","Fragments":["return"]},{"Key":"`checkQuestion` return","Fragments":["an"]},{"Key":"an enum,","Fragments":["or"]},{"Key":"enum, or","Fragments":["pass"]},{"Key":"two variables","Fragments":["as"]},{"Key":"as references,","Fragments":["or"]},{"Key":"references, or","Fragments":["a"]},{"Key":" Getting","Fragments":["the"]},{"Key":"whole C++","Fragments":["environment"]},{"Key":"C++ environment","Fragments":["set"]},{"Key":"environment set","Fragments":["up"]},{"Key":"up was","Fragments":["the"]},{"Key":"hard part","Fragments":["about"]},{"Key":"part about","Fragments":["this."]},{"Key":"about this.","Fragments":["For"]},{"Key":"this. For","Fragments":["the"]},{"Key":"the rest,","Fragments":["I"]},{"Key":"rest, I","Fragments":["basically"]},{"Key":"basically used","Fragments":["the"]},{"Key":"my Python","Fragments":["script,","implementation"]},{"Key":"Python script,","Fragments":["except"]},{"Key":"script, except","Fragments":["I"]},{"Key":"to manually","Fragments":["write"]},{"Key":"manually write","Fragments":["some"]},{"Key":"write some","Fragments":["of"]},{"Key":"functions the","Fragments":["Python"]},{"Key":" std::transform","Fragments":["doesn't"]},{"Key":"std::transform doesn't","Fragments":["allocate"]},{"Key":"doesn't allocate","Fragments":["anything"]},{"Key":"allocate anything","Fragments":["by"]},{"Key":"by itself,","Fragments":["it's"]},{"Key":"itself, it's","Fragments":["only"]},{"Key":"an algorithm.","Fragments":["The"]},{"Key":"algorithm. The","Fragments":["trick"]},{"Key":"The trick","Fragments":["is"]},{"Key":"trick is","Fragments":["to","that"]},{"Key":"use back_inserter,","Fragments":["which"]},{"Key":"back_inserter, which","Fragments":["is"]},{"Key":"iterator on","Fragments":["word,"]},{"Key":"on word,","Fragments":["but"]},{"Key":"but on","Fragments":["dereferencing"]},{"Key":"on dereferencing","Fragments":["it"]},{"Key":"dereferencing it","Fragments":["will"]},{"Key":"will append","Fragments":["a"]},{"Key":"new character","Fragments":["to"]},{"Key":"to word.","Fragments":["Allocation"]},{"Key":"word. Allocation","Fragments":["is"]},{"Key":"Allocation is","Fragments":["handled"]},{"Key":"by std::string,","Fragments":["or"]},{"Key":"std::string, or","Fragments":["more"]},{"Key":"more precisely","Fragments":["the"]},{"Key":"precisely the","Fragments":["string's"]},{"Key":"the string's","Fragments":["allocator."]},{"Key":"string's allocator.","Fragments":["Since"]},{"Key":"allocator. Since","Fragments":["I"]},{"Key":"specify an","Fragments":["allocator,"]},{"Key":"an allocator,","Fragments":["the"]},{"Key":"allocator, the","Fragments":["default"]},{"Key":"default (std::allocator)","Fragments":["is"]},{"Key":"(std::allocator) is","Fragments":["used."]},{"Key":"is used.","Fragments":["The"]},{"Key":"used. The","Fragments":["actual"]},{"Key":"actual implementation","Fragments":["of"]},{"Key":"of std::allocator","Fragments":["depends"]},{"Key":"std::allocator depends","Fragments":["on"]},{"Key":"your environment,","Fragments":["but"]},{"Key":"environment, but","Fragments":["IIRC"]},{"Key":"but IIRC","Fragments":["the"]},{"Key":"IIRC the","Fragments":["default"]},{"Key":"default implementation","Fragments":["usually"]},{"Key":"implementation usually","Fragments":["reserves"]},{"Key":"usually reserves","Fragments":["some"]},{"Key":"reserves some","Fragments":["initial"]},{"Key":"some initial","Fragments":["memory,"]},{"Key":"initial memory,","Fragments":["and"]},{"Key":"memory, and","Fragments":["when"]},{"Key":"when that","Fragments":["is"]},{"Key":"used up","Fragments":["it"]},{"Key":"up it","Fragments":["doubles"]},{"Key":"it doubles","Fragments":["the"]},{"Key":"doubles the","Fragments":["amount.","space"]},{"Key":"expect large","Fragments":["values"]},{"Key":"for word,","Fragments":["instead"]},{"Key":"word, instead","Fragments":["of"]},{"Key":"just tell","Fragments":["the"]},{"Key":"reserve enough","Fragments":["memory"]},{"Key":"enough memory","Fragments":["in"]},{"Key":"memory in","Fragments":["the"]},{"Key":"first place,","Fragments":["using:"]},{"Key":" word.reserve(std::distance(start,","Fragments":["stop));"]},{"Key":"Your include","Fragments":["guards"]},{"Key":"guards could","Fragments":["potentially"]},{"Key":"potentially cause","Fragments":["interference"]},{"Key":"cause interference","Fragments":["with"]},{"Key":"interference with","Fragments":["the"]},{"Key":"implementation since","Fragments":["identifiers"]},{"Key":"since identifiers","Fragments":["beginning"]},{"Key":"identifiers beginning","Fragments":["with"]},{"Key":"beginning with","Fragments":["an"]},{"Key":"an underscore","Fragments":["followed"]},{"Key":"underscore followed","Fragments":["by"]},{"Key":"letter are","Fragments":["always"]},{"Key":"always reserved","Fragments":["(and"]},{"Key":"reserved (and","Fragments":["so"]},{"Key":"(and so","Fragments":["are"]},{"Key":"so are","Fragments":["other"]},{"Key":"other patterns).","Fragments":["I"]},{"Key":"patterns). I","Fragments":["recommend"]},{"Key":"recommend following","Fragments":["the"]},{"Key":"boost convention","Fragments":["\u003c"]},{"Key":"convention \u003c","Fragments":["path"]},{"Key":"\u003c path","Fragments":["to"]},{"Key":"C++ provides","Fragments":["wrappers"]},{"Key":"provides wrappers","Fragments":["for"]},{"Key":"wrappers for","Fragments":["the"]},{"Key":"C headers,","Fragments":["prefer"]},{"Key":"headers, prefer","Fragments":["\u003c"]},{"Key":"prefer \u003c","Fragments":["cstring\u003e"]},{"Key":"\u003c cstring\u003e","Fragments":["over"]},{"Key":"cstring\u003e over","Fragments":["\u003c"]},{"Key":"over \u003c","Fragments":["string.h\u003e."]},{"Key":"of keyword","Fragments":["auto"]},{"Key":"keyword auto","Fragments":["in"]},{"Key":"line 13.","Fragments":["Although"]},{"Key":"13. Although","Fragments":["debatable,"]},{"Key":"Although debatable,","Fragments":["I"]},{"Key":"debatable, I","Fragments":["think"]},{"Key":"think size_t","Fragments":["would"]},{"Key":"size_t would","Fragments":["be"]},{"Key":"Use prefix-","Fragments":["over"]},{"Key":"prefix- over","Fragments":["postfix-increment"]},{"Key":"over postfix-increment","Fragments":["when"]},{"Key":"postfix-increment when","Fragments":["the"]},{"Key":"the postfix-variant","Fragments":["is"]},{"Key":"postfix-variant is","Fragments":["not"]},{"Key":"the \"C","Fragments":["way\""]},{"Key":"\"C way\"","Fragments":["is"]},{"Key":"way\" is","Fragments":["clearer"]},{"Key":"clearer for","Fragments":["this"]},{"Key":"quick test","Fragments":["to","to"]},{"Key":"the allocator","Fragments":["in"]},{"Key":"allocator in","Fragments":["my"]},{"Key":"my environment","Fragments":["behaves,"]},{"Key":"environment behaves,","Fragments":["and"]},{"Key":"behaves, and","Fragments":["it"]},{"Key":"no allocated","Fragments":["space."]},{"Key":"allocated space.","Fragments":["It"]},{"Key":"It allocates","Fragments":["one"]},{"Key":"allocates one","Fragments":["element"]},{"Key":"one element","Fragments":["on"]},{"Key":"element on","Fragments":["the"]},{"Key":"first inserted","Fragments":["value,"]},{"Key":"inserted value,","Fragments":["and"]},{"Key":"value, and","Fragments":["doubles"]},{"Key":"and doubles","Fragments":["the"]},{"Key":"i=0; i\u003c1024;","Fragments":["++i)"]},{"Key":"int capacity","Fragments":["="]},{"Key":"capacity =","Fragments":["s.capacity();"]},{"Key":"if (capacity","Fragments":["!="]},{"Key":"(capacity !=","Fragments":["last)"]},{"Key":"\u003c\u003c \":","Fragments":["\""]},{"Key":"\": \"","Fragments":["\u003c\u003c"]},{"Key":"\u003c\u003c capacity","Fragments":["\u003c\u003c"]},{"Key":"capacity \u003c\u003c","Fragments":["std::endl;"]},{"Key":" last","Fragments":["="]},{"Key":"$ make","Fragments":["capacity"]},{"Key":"g++ capacity.cpp","Fragments":["-o"]},{"Key":"capacity.cpp -o","Fragments":["capacity"]},{"Key":" 0:","Fragments":["0"]},{"Key":" 5:","Fragments":["8"]},{"Key":" 9:","Fragments":["16"]},{"Key":" 17:","Fragments":["32"]},{"Key":" 33:","Fragments":["64"]},{"Key":" 65:","Fragments":["128"]},{"Key":" 129:","Fragments":["256"]},{"Key":" 257:","Fragments":["512"]},{"Key":" 513:","Fragments":["1024"]},{"Key":"@zelma Thanks","Fragments":["for"]},{"Key":"advice! That","Fragments":["definitely"]},{"Key":"That definitely","Fragments":["makes"]},{"Key":"definitely makes","Fragments":["this"]},{"Key":"a heck","Fragments":["of"]},{"Key":"heck of","Fragments":["a"]},{"Key":"You shouldn't","Fragments":["have."]},{"Key":"shouldn't have.","Fragments":["The"]},{"Key":"have. The","Fragments":["C++"]},{"Key":"library provides","Fragments":["building"]},{"Key":"provides building","Fragments":["blocks"]},{"Key":"building blocks","Fragments":["which"]},{"Key":"blocks which","Fragments":["allow"]},{"Key":"which allow","Fragments":["to"]},{"Key":"your intent","Fragments":["much"]},{"Key":"intent much","Fragments":["more"]},{"Key":"more succinctly.","Fragments":["isAllWhite"]},{"Key":"succinctly. isAllWhite","Fragments":["could"]},{"Key":"isAllWhite could","Fragments":["be"]},{"Key":"easily rewritten","Fragments":["as:"]},{"Key":" std::all_of(str.begin(),","Fragments":["str.end(),"]},{"Key":"std::all_of(str.begin(), str.end(),","Fragments":["isspace);"]},{"Key":"Pass your","Fragments":["strings"]},{"Key":"references whenever","Fragments":["possible","possible"]},{"Key":"avoid costly","Fragments":["copies."]},{"Key":"should avoid","Fragments":["the"]},{"Key":"the function-style","Fragments":["casts"]},{"Key":"function-style casts","Fragments":["to"]},{"Key":"casts to","Fragments":["int"]},{"Key":"loops as","Fragments":["they"]},{"Key":"they may","Fragments":["truncate.","not"]},{"Key":"may truncate.","Fragments":["Declare"]},{"Key":"truncate. Declare","Fragments":["the"]},{"Key":"Declare the","Fragments":["variables"]},{"Key":"as size_t","Fragments":["instead."]},{"Key":"loop variables","Fragments":["in"]},{"Key":"function different?","Fragments":["The"]},{"Key":"different? The","Fragments":["parameter"]},{"Key":"The parameter","Fragments":["names"]},{"Key":"are oddly","Fragments":["chosen"]},{"Key":"oddly chosen","Fragments":["and"]},{"Key":"chosen and","Fragments":["different"]},{"Key":"one another","Fragments":["too,"]},{"Key":"another too,","Fragments":["although"]},{"Key":"too, although","Fragments":["that's"]},{"Key":"although that's","Fragments":["by"]},{"Key":"that's by","Fragments":["no"]},{"Key":"by no","Fragments":["means"]},{"Key":"no means","Fragments":["necessary"]},{"Key":"means necessary","Fragments":["since"]},{"Key":"necessary since","Fragments":["each"]},{"Key":"each name","Fragments":["resides"]},{"Key":"name resides","Fragments":["in"]},{"Key":"resides in","Fragments":["a"]},{"Key":"Also, functions","Fragments":["isAllUpper,"]},{"Key":"functions isAllUpper,","Fragments":["isAllNum"]},{"Key":"isAllUpper, isAllNum","Fragments":["and"]},{"Key":"isAllNum and","Fragments":["isAllWhite"]},{"Key":"and isAllWhite","Fragments":["don't"]},{"Key":"isAllWhite don't","Fragments":["technically"]},{"Key":"don't technically","Fragments":["belong"]},{"Key":"technically belong","Fragments":["to"]},{"Key":"class bob.","Fragments":["Or"]},{"Key":"bob. Or","Fragments":["at"]},{"Key":"Or at","Fragments":["the","least,"]},{"Key":"very least","Fragments":["they"]},{"Key":"least they","Fragments":["should"]},{"Key":" Hello,","Fragments":["Nice"]},{"Key":"Hello, Nice","Fragments":["code!"]},{"Key":"used regex","Fragments":["for"]},{"Key":"each case.","Fragments":["Your"]},{"Key":"case. Your","Fragments":["code"]},{"Key":"much smaller","Fragments":["and"]},{"Key":"readable. Besides","Fragments":["that,"]},{"Key":"Besides that,","Fragments":["I"]},{"Key":"return variable","Fragments":["(ret)."]},{"Key":"variable (ret).","Fragments":["You"]},{"Key":"(ret). You","Fragments":["could"]},{"Key":"return whatever","Fragments":["you"]},{"Key":"those places","Fragments":["you"]},{"Key":"places you","Fragments":["set"]},{"Key":"edit: Oh!","Fragments":["and"]},{"Key":"Oh! and","Fragments":["you"]},{"Key":"you import","Fragments":["iostream"]},{"Key":"import iostream","Fragments":["but"]},{"Key":"iostream but","Fragments":["I"]},{"Key":"Looks very","Fragments":["good,"]},{"Key":"very good,","Fragments":["your"]},{"Key":"good, your","Fragments":["loop"]},{"Key":"could however","Fragments":["overflow"]},{"Key":"however overflow","Fragments":["since"]},{"Key":"since int","Fragments":["might"]},{"Key":"int might","Fragments":["not"]},{"Key":"large enough","Fragments":["to"]},{"Key":"any strings","Fragments":["length"]},{"Key":"length (which","Fragments":["is"]},{"Key":"is expressed","Fragments":["as"]},{"Key":"expressed as","Fragments":["size_t).","`(!std::isalpha(*it))","hex"]},{"Key":"prefer prefix","Fragments":["increment"]},{"Key":"increment which","Fragments":["is"]},{"Key":"potentially faster","Fragments":["and","thought"]},{"Key":"and semantically","Fragments":["more"]},{"Key":"more \"spot","Fragments":["on\"."]},{"Key":"Hello and","Fragments":["thank"]},{"Key":"and thank","Fragments":["you"]},{"Key":"look to","Fragments":["my","this","it."]},{"Key":"each response","Fragments":["trying","that","separately"]},{"Key":"response trying","Fragments":["to"]},{"Key":"avoid \"magic","Fragments":["numbers\""]},{"Key":"\"magic numbers\"","Fragments":["and"]},{"Key":"numbers\" and","Fragments":["a"]},{"Key":"check each","Fragments":["case.","input","element","char"]},{"Key":"have decided","Fragments":["to"]},{"Key":"input case","Fragments":["using"]},{"Key":"case using","Fragments":["regular"]},{"Key":"expressions (regex)","Fragments":["because:"]},{"Key":"run as","Fragments":["fast"]},{"Key":"they made","Fragments":["my"]},{"Key":"life much","Fragments":["easier."]},{"Key":"expressions improve","Fragments":["readability"]},{"Key":"are familiar","Fragments":["with"]},{"Key":"are simple","Fragments":["(like","enough"]},{"Key":"simple (like","Fragments":["these"]},{"Key":"(like these","Fragments":["ones)."]},{"Key":"the \"hey\"","Fragments":["function"]},{"Key":"an if-elseif-else","Fragments":["implementation"]},{"Key":"if-elseif-else implementation","Fragments":["to"]},{"Key":"different input","Fragments":["cases."]},{"Key":"input cases.","Fragments":["This"]},{"Key":"cases. This","Fragments":["is,"]},{"Key":"is yelled","Fragments":["and"]},{"Key":"yelled and","Fragments":["is"]},{"Key":"question as","Fragments":["well,"]},{"Key":"well, bob","Fragments":["replies"]},{"Key":"bob replies","Fragments":["as"]},{"Key":"replies as","Fragments":["if"]},{"Key":"if he","Fragments":["was"]},{"Key":"being yelle","Fragments":["even"]},{"Key":"yelle even","Fragments":["when"]},{"Key":" Hope","Fragments":["this"]},{"Key":"Hope this","Fragments":["makes"]},{"Key":"this makes","Fragments":["sense."]},{"Key":"first nitpick,","Fragments":["the"]},{"Key":"nitpick, the","Fragments":["`'\\0'`"]},{"Key":"the `'\\0'`","Fragments":["represents","is"]},{"Key":"`'\\0'` represents","Fragments":["an"]},{"Key":"represents an","Fragments":["empty"]},{"Key":"string, not","Fragments":["an"]},{"Key":"an int.","Fragments":["But","Other"]},{"Key":"int. But","Fragments":["I"]},{"Key":"the rest.","Fragments":["Can"]},{"Key":"rest. Can","Fragments":["you"]},{"Key":"you clarify","Fragments":["what"]},{"Key":"mean with","Fragments":["`find_if`?"]},{"Key":"regex since","Fragments":["the"]},{"Key":"for yelling/question/silence","Fragments":["are"]},{"Key":"yelling/question/silence are","Fragments":["simple"]},{"Key":"simple enough","Fragments":["to","for"]},{"Key":"implemented with","Fragments":["\\\u003calgorithm\\\u003e."]},{"Key":"with \\\u003calgorithm\\\u003e.","Fragments":["[Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)'s"]},{"Key":"\\\u003calgorithm\\\u003e. [Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)'s","Fragments":["my"]},{"Key":"[Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)'s my","Fragments":["take"]},{"Key":"my take","Fragments":["on"]},{"Key":"show what","Fragments":["I"]},{"Key":"string constants","Fragments":["(instead","is"]},{"Key":"constants (instead","Fragments":["of"]},{"Key":"(instead of","Fragments":["\"magic","coding","taking","taking"]},{"Key":"of \"magic","Fragments":["strings\")"]},{"Key":"\"magic strings\")","Fragments":["is"]},{"Key":"strings\") is","Fragments":["a"]},{"Key":"bit icky.","Fragments":["Since"]},{"Key":"icky. Since","Fragments":["they"]},{"Key":"file, these","Fragments":["constants"]},{"Key":"constants spill","Fragments":["out"]},{"Key":"spill out","Fragments":["into"]},{"Key":"files where","Fragments":["they"]},{"Key":"don't belong.","Fragments":["Also,"]},{"Key":"belong. Also,","Fragments":["they're"]},{"Key":"Also, they're","Fragments":["global"]},{"Key":"they're global","Fragments":["objects"]},{"Key":"global objects","Fragments":["and","into","isn't"]},{"Key":"objects and","Fragments":["not"]},{"Key":"not native","Fragments":["data"]},{"Key":"native data","Fragments":["types."]},{"Key":"data types.","Fragments":["So"]},{"Key":"types. So","Fragments":["that"]},{"Key":"that brings","Fragments":["initialization"]},{"Key":"brings initialization","Fragments":["order"]},{"Key":"initialization order","Fragments":["of"]},{"Key":"of global","Fragments":["objects","scope.","variables"]},{"Key":"objects into","Fragments":["play."]},{"Key":"static locals","Fragments":["to"]},{"Key":"locals to","Fragments":["contain"]},{"Key":"the regexes","Fragments":["in"]},{"Key":"their function","Fragments":["scope"]},{"Key":"function scope","Fragments":["as"]},{"Key":"const correctness","Fragments":["everywhere.","is"]},{"Key":"sorry but","Fragments":["I"]},{"Key":"is suppose","Fragments":["to."]},{"Key":"suppose to.","Fragments":["You"]},{"Key":"have coded","Fragments":["something"]},{"Key":"coded something","Fragments":["to"]},{"Key":"to \"figure","Fragments":["out\""]},{"Key":"\"figure out\"","Fragments":["the"]},{"Key":"out\" the","Fragments":["correct"]},{"Key":"response rather","Fragments":["than"]},{"Key":"than checking","Fragments":["for"]},{"Key":" `returnValue[wordBuffer]`","Fragments":["returns"]},{"Key":"`returnValue[wordBuffer]` returns","Fragments":["an"]},{"Key":"`int`, however.","Fragments":["You've"]},{"Key":"however. You've","Fragments":["used"]},{"Key":"other places:","Fragments":["`returnValue[wordBuffer]"]},{"Key":"places: `returnValue[wordBuffer]","Fragments":["="]},{"Key":"`returnValue[wordBuffer] =","Fragments":["1`."]},{"Key":"The entries","Fragments":["of"]},{"Key":"entries of","Fragments":["the"]},{"Key":"a (string,","Fragments":["int)"]},{"Key":"(string, int)","Fragments":["pair."]},{"Key":"int) pair.","Fragments":["`returnValue[\u003cstring\u003e]"]},{"Key":"pair. `returnValue[\u003cstring\u003e]","Fragments":["="]},{"Key":"`returnValue[\u003cstring\u003e] =","Fragments":["\u003cint\u003e`."]},{"Key":"= \u003cint\u003e`.","Fragments":["So"]},{"Key":"\u003cint\u003e`. So","Fragments":["using"]},{"Key":"`'\\0'` is","Fragments":["incorrect"]},{"Key":"incorrect here.","Fragments":["It"]},{"Key":"because C++","Fragments":["implicitely"]},{"Key":"C++ implicitely","Fragments":["converts"]},{"Key":"implicitely converts","Fragments":["the"]},{"Key":"converts the","Fragments":["char"]},{"Key":"char `'\\0'`","Fragments":["into"]},{"Key":"`'\\0'` into","Fragments":["an"]},{"Key":"fact, you","Fragments":["could"]},{"Key":"could leave","Fragments":["away"]},{"Key":"leave away","Fragments":["the"]},{"Key":"entire if-statement","Fragments":["with"]},{"Key":"if-statement with","Fragments":["the"]},{"Key":"the `returnValue[wordBuffer]++;`","Fragments":["and"]},{"Key":"`returnValue[wordBuffer]++;` and","Fragments":["it"]},{"Key":"work just","Fragments":["fabulous","fine."]},{"Key":"just fabulous","Fragments":[":)"]},{"Key":"fabulous :)","Fragments":["The"]},{"Key":"The []","Fragments":["operator"]},{"Key":"operator automatically","Fragments":["inserts"]},{"Key":"automatically inserts","Fragments":["a"]},{"Key":"new (string,int)","Fragments":["pair"]},{"Key":"(string,int) pair","Fragments":["into"]},{"Key":"pair into","Fragments":["the"]},{"Key":"there already.","Fragments":["It's"]},{"Key":"already. It's","Fragments":["part"]},{"Key":"It's part","Fragments":["of"]},{"Key":"the [standard](http://www.cplusplus.com/reference/map/map/operator%5B%5D/)","Fragments":["saying"]},{"Key":"If k","Fragments":["does"]},{"Key":" `find_if`","Fragments":["is"]},{"Key":"`find_if` is","Fragments":["one"]},{"Key":"could solve","Fragments":["the"]},{"Key":"of words.","Fragments":["I'm"]},{"Key":"words. I'm","Fragments":["not"]},{"Key":"familiar you","Fragments":["are"]},{"Key":"are with","Fragments":["C++'s"]},{"Key":"with C++'s","Fragments":["iterators"]},{"Key":"C++'s iterators","Fragments":["and"]},{"Key":"and algorithm","Fragments":["functions,"]},{"Key":"algorithm functions,","Fragments":["so"]},{"Key":"functions, so","Fragments":["I'll"]},{"Key":"so I'll","Fragments":["just","definitley"]},{"Key":"just paste","Fragments":["the"]},{"Key":"the crux","Fragments":["of"]},{"Key":"crux of","Fragments":["how"]},{"Key":"I solved","Fragments":["it:"]},{"Key":"auto curr","Fragments":["="]},{"Key":"curr =","Fragments":["input.begin();","wordEnd;"]},{"Key":"= input.begin();","Fragments":["//curr"]},{"Key":"input.begin(); //curr","Fragments":["points"]},{"Key":"//curr points","Fragments":["to"]},{"Key":" //iterate","Fragments":["through"]},{"Key":"//iterate through","Fragments":["the"]},{"Key":" while(","Fragments":["curr"]},{"Key":"while( curr","Fragments":["!="]},{"Key":"curr !=","Fragments":["input.end()"]},{"Key":"!= input.end()","Fragments":["){"]},{"Key":" //find","Fragments":["beginning"]},{"Key":"//find beginning","Fragments":["of"]},{"Key":"of alphanumerical","Fragments":["sequence"]},{"Key":"auto wordStart","Fragments":["="]},{"Key":"wordStart =","Fragments":["std::find_if("]},{"Key":"= std::find_if(","Fragments":["curr,"]},{"Key":"std::find_if( curr,","Fragments":["input.end(),"]},{"Key":"curr, input.end(),","Fragments":["isalnum"]},{"Key":"input.end(), isalnum","Fragments":[");",");"]},{"Key":" //from","Fragments":["there,"]},{"Key":"//from there,","Fragments":["find"]},{"Key":"there, find","Fragments":["end"]},{"Key":"find end","Fragments":["of"]},{"Key":"of said","Fragments":["sequence","examples"]},{"Key":"auto wordEnd","Fragments":["="]},{"Key":"wordEnd =","Fragments":["std::find_if_not("]},{"Key":"std::find_if_not( wordStart,","Fragments":["input.end(),"]},{"Key":"wordStart, input.end(),","Fragments":["isalnum"]},{"Key":" //This","Fragments":["is"]},{"Key":"//This is","Fragments":["the"]},{"Key":"std::string word","Fragments":["="]},{"Key":"= std::string(","Fragments":["wordStart,"]},{"Key":"std::string( wordStart,","Fragments":["wordEnd"]},{"Key":"wordStart, wordEnd","Fragments":[");"]},{"Key":" //increment","Fragments":["word"]},{"Key":"//increment word","Fragments":["count."]},{"Key":"word count.","Fragments":["If"]},{"Key":"count. If","Fragments":["word"]},{"Key":"If word","Fragments":["not"]},{"Key":"word not","Fragments":["in"]},{"Key":"in map,","Fragments":["it'll"]},{"Key":"map, it'll","Fragments":["be"]},{"Key":" //we've","Fragments":["read"]},{"Key":"//we've read","Fragments":["the"]},{"Key":"string until","Fragments":["wordEnd,"]},{"Key":"until wordEnd,","Fragments":["so"]},{"Key":"wordEnd, so","Fragments":["that's"]},{"Key":"we start","Fragments":["to"]},{"Key":" //for","Fragments":["the"]},{"Key":"//for the","Fragments":["next"]},{"Key":" curr","Fragments":["="]},{"Key":"full source","Fragments":["[here](http://exercism.io/submissions/be42f7cc0bfb132a4aa72458)."]},{"Key":" @ashley","Fragments":["Thank"]},{"Key":"@ashley Thank","Fragments":["you!"]},{"Key":"you! I","Fragments":["personally"]},{"Key":"implementation with","Fragments":["\u003calgorithms\u003e"]},{"Key":"with \u003calgorithms\u003e","Fragments":["is"]},{"Key":"\u003calgorithms\u003e is","Fragments":["better"]},{"Key":"regex I'm","Fragments":["using"]},{"Key":"a sledgehammer","Fragments":["to"]},{"Key":"sledgehammer to","Fragments":["crack"]},{"Key":"a nut.","Fragments":["I"]},{"Key":"nut. I","Fragments":["think"]},{"Key":"think I'll","Fragments":["use"]},{"Key":"I'll use","Fragments":["that"]},{"Key":"my second","Fragments":["iteration.","iteration"]},{"Key":"good habit.","Fragments":["Imagine"]},{"Key":"habit. Imagine","Fragments":["I"]},{"Key":"Imagine I","Fragments":["want"]},{"Key":"check Bob's","Fragments":["response"]},{"Key":"response from","Fragments":["other","the"]},{"Key":"other part","Fragments":["of"]},{"Key":"my project,","Fragments":["I"]},{"Key":"project, I","Fragments":["expand"]},{"Key":"I expand","Fragments":["my"]},{"Key":"expand my","Fragments":["code"]},{"Key":"from different","Fragments":["places"]},{"Key":"different places","Fragments":["(not","in"]},{"Key":"places (not","Fragments":["very"]},{"Key":"(not very","Fragments":["likely"]},{"Key":"very likely","Fragments":["for"]},{"Key":"likely for","Fragments":["this"]},{"Key":"this example)","Fragments":["and"]},{"Key":"example) and","Fragments":["his"]},{"Key":"and his","Fragments":["response"]},{"Key":"his response","Fragments":["changes"]},{"Key":"response changes","Fragments":["for"]},{"Key":"whatever reason...","Fragments":["I"]},{"Key":"reason... I","Fragments":["would"]},{"Key":"change those","Fragments":["strings"]},{"Key":"strings manually","Fragments":["one"]},{"Key":"manually one","Fragments":["by"]},{"Key":"one instead","Fragments":["of"]},{"Key":"just changing","Fragments":["my"]},{"Key":"changing my","Fragments":["constant"]},{"Key":"my constant","Fragments":["."]},{"Key":"However I'll","Fragments":["try"]},{"Key":"more feedback","Fragments":["about"]},{"Key":"feedback about","Fragments":["this","how"]},{"Key":"if am","Fragments":["doing"]},{"Key":"am doing","Fragments":["the","(this"]},{"Key":"guess you're","Fragments":["right"]},{"Key":"C++ wrappers","Fragments":["but"]},{"Key":"wrappers but","Fragments":["I"]},{"Key":"really understand","Fragments":["why","what"]},{"Key":"them. The","Fragments":["\".h\""]},{"Key":"The \".h\"","Fragments":["extension"]},{"Key":"\".h\" extension","Fragments":["expresses"]},{"Key":"extension expresses","Fragments":["the"]},{"Key":"expresses the","Fragments":["fact"]},{"Key":"header more","Fragments":["clearly"]},{"Key":"Because `i`","Fragments":["and"]},{"Key":"and `length`","Fragments":["are"]},{"Key":"`length` are","Fragments":["both"]},{"Key":"are both","Fragments":["integers,","great"]},{"Key":"both integers,","Fragments":["the"]},{"Key":"integers, the","Fragments":["postfix-increment"]},{"Key":"the postfix-increment","Fragments":["is"]},{"Key":"postfix-increment is","Fragments":["going"]},{"Key":"optimized out.","Fragments":["I'm"]},{"Key":"out. I'm","Fragments":["not"]},{"Key":"same holds","Fragments":["for"]},{"Key":"for classes","Fragments":["where"]},{"Key":"classes where","Fragments":["the"]},{"Key":"the operators","Fragments":["have"]},{"Key":"operators have","Fragments":["been"]},{"Key":"been explicitly","Fragments":["defined"]},{"Key":"defined (e.g.","Fragments":["iterators)."]},{"Key":"(e.g. iterators).","Fragments":["Usually"]},{"Key":"iterators). Usually","Fragments":["I"]},{"Key":"Usually I","Fragments":["use","try"]},{"Key":"use prefix-increments","Fragments":["on"]},{"Key":"prefix-increments on","Fragments":["them"]},{"Key":"them just","Fragments":["to"]},{"Key":"class, when","Fragments":["all"]},{"Key":"have are","Fragments":["static"]},{"Key":"That doesn't","Fragments":["even"]},{"Key":"even compile.","Fragments":["I'm"]},{"Key":"compile. I'm","Fragments":["getting"]},{"Key":"I'm getting","Fragments":["`error:","tired"]},{"Key":"getting `error:","Fragments":["unable"]},{"Key":"`error: unable","Fragments":["to"]},{"Key":"to decduce","Fragments":["'auto'"]},{"Key":"decduce 'auto'","Fragments":["from"]},{"Key":"'auto' from","Fragments":["'\u003cexpression"]},{"Key":"from '\u003cexpression","Fragments":["error\u003e'"]},{"Key":"'\u003cexpression error\u003e'","Fragments":["`"]},{"Key":"error\u003e' `","Fragments":["on"]},{"Key":"` on","Fragments":["both"]},{"Key":"auto lines,","Fragments":["plus"]},{"Key":"lines, plus","Fragments":["a"]},{"Key":"plus a","Fragments":["plethora","few"]},{"Key":"a plethora","Fragments":["of"]},{"Key":"plethora of","Fragments":["other"]},{"Key":"the tips,","Fragments":["especially","I","I've"]},{"Key":"tips, especially","Fragments":["about"]},{"Key":"better strategy","Fragments":["for"]},{"Key":"strategy for","Fragments":["parsing"]},{"Key":"for parsing","Fragments":["the"]},{"Key":"parsing the","Fragments":["string.","text","string.","input"]},{"Key":"tips, I","Fragments":["didn't"]},{"Key":"the break","Fragments":["thing"]},{"Key":"break thing","Fragments":["or"]},{"Key":"thing or","Fragments":["the"]},{"Key":"new fangled","Fragments":["looping."]},{"Key":"the pass","Fragments":["by"]},{"Key":"by reference/copy","Fragments":["it"]},{"Key":"reference/copy it","Fragments":["seems"]},{"Key":"matter too","Fragments":["much"]},{"Key":"much either","Fragments":["way."]},{"Key":"const. Thanks","Fragments":["again."]},{"Key":"particular reason.","Fragments":["I"]},{"Key":"was dumb","Fragments":["to"]},{"Key":"dumb to","Fragments":["declare"]},{"Key":"for just","Fragments":["one","lower","solving"]},{"Key":"one public","Fragments":["function."]},{"Key":"Also, making","Fragments":["the","booleans"]},{"Key":"like `isQuestion`","Fragments":["private"]},{"Key":"`isQuestion` private","Fragments":["and"]},{"Key":"private and","Fragments":["thus","phone"]},{"Key":"thus inaccessible","Fragments":["from"]},{"Key":"inaccessible from","Fragments":["outside"]},{"Key":"from outside","Fragments":["is"]},{"Key":"outside is","Fragments":["easier"]},{"Key":"easier than","Fragments":["having","it"]},{"Key":"another unnamed","Fragments":["namespace."]},{"Key":"relevant header","Fragments":["files"]},{"Key":"files (mostly","Fragments":["\\\u003calgorithm?\u003e)?"]},{"Key":" [Here's](http://ideone.com/St5txW)","Fragments":["the"]},{"Key":"[Here's](http://ideone.com/St5txW) the","Fragments":["code"]},{"Key":"an onlinecompiler","Fragments":["and"]},{"Key":"onlinecompiler and","Fragments":["compiles"]},{"Key":"and compiles","Fragments":["without"]},{"Key":"without errors.","Fragments":["So"]},{"Key":"errors. So","Fragments":["it"]},{"Key":"So it","Fragments":["is","could"]},{"Key":"valid C++11","Fragments":["code."]},{"Key":"Yea, I'm","Fragments":["a"]},{"Key":"bit torn","Fragments":["about"]},{"Key":"torn about","Fragments":["the"]},{"Key":"strings. One","Fragments":["the"]},{"Key":"One the","Fragments":["one"]},{"Key":"one hand,","Fragments":["having"]},{"Key":"hand, having","Fragments":["a"]},{"Key":"global constant","Fragments":["is"]},{"Key":"constant is","Fragments":["nice."]},{"Key":"nice. On","Fragments":["the"]},{"Key":"the other,","Fragments":["having"]},{"Key":"other, having","Fragments":["global"]},{"Key":"having global","Fragments":["objects"]},{"Key":"objects isn't","Fragments":["so"]},{"Key":"One option","Fragments":["would"]},{"Key":"as global","Fragments":["`const"]},{"Key":"global `const","Fragments":["char*`"]},{"Key":"char*` variables,","Fragments":["but"]},{"Key":"variables, but","Fragments":["that","if"]},{"Key":"of sucks","Fragments":["too."]},{"Key":"If Bob's","Fragments":["responses"]},{"Key":"Bob's responses","Fragments":["would"]},{"Key":"responses would","Fragments":["be"]},{"Key":"be checked","Fragments":["by","by","and"]},{"Key":"checked by","Fragments":["another","numAlpha."]},{"Key":"another part","Fragments":["of"]},{"Key":"the program,","Fragments":["I'd","refer"]},{"Key":"program, I'd","Fragments":["most"]},{"Key":"I'd most","Fragments":["likely"]},{"Key":"it. No","Fragments":["need"]},{"Key":"return actual","Fragments":["strings"]},{"Key":"actual strings","Fragments":["in"]},{"Key":" Usually","Fragments":["I"]},{"Key":"an alternative","Fragments":["as","strategy","to"]},{"Key":"alternative as","Fragments":["soon"]},{"Key":"my \"magic","Fragments":["number\""]},{"Key":"\"magic number\"","Fragments":["appears","twice"]},{"Key":"number\" appears","Fragments":["more"]},{"Key":"appears more","Fragments":["than"]},{"Key":"my program.","Fragments":["Before"]},{"Key":"program. Before","Fragments":["that,"]},{"Key":"Before that,","Fragments":["I'm"]},{"Key":"that, I'm","Fragments":["not"]},{"Key":"about factoring","Fragments":["it"]},{"Key":"factoring it","Fragments":["out."]},{"Key":"that's my","Fragments":["personal"]},{"Key":"my personal","Fragments":["take"]},{"Key":"personal take","Fragments":["on"]},{"Key":"the subject","Fragments":["and","string","has"]},{"Key":"subject and","Fragments":["I"]},{"Key":"to present","Fragments":["it"]},{"Key":"present it","Fragments":["as"]},{"Key":"a \"best","Fragments":["practice\""]},{"Key":"\"best practice\"","Fragments":["kind"]},{"Key":"practice\" kind","Fragments":["of"]},{"Key":" uses","Fragments":["a"]},{"Key":"single pass","Fragments":["through","over"]},{"Key":" by","Fragments":["stepping","the"]},{"Key":"by stepping","Fragments":["backwards"]},{"Key":"stepping backwards","Fragments":["through"]},{"Key":"backwards through","Fragments":["string,","the"]},{"Key":"through string,","Fragments":["i"]},{"Key":"string, i","Fragments":["know"]},{"Key":"know from","Fragments":["from"]},{"Key":"character whether","Fragments":["it"]},{"Key":"whether it","Fragments":["is"]},{"Key":"be short","Fragments":["circuited"]},{"Key":"short circuited","Fragments":["if"]},{"Key":"circuited if","Fragments":["a"]},{"Key":" maybe","Fragments":["characters","you","line"]},{"Key":"maybe characters","Fragments":["like"]},{"Key":"like '###$!!\"","Fragments":["should"]},{"Key":"'###$!!\" should","Fragments":["be"]},{"Key":" currently","Fragments":["anything"]},{"Key":"currently anything","Fragments":["not"]},{"Key":"anything not","Fragments":["whitespace"]},{"Key":"not whitespace","Fragments":["and"]},{"Key":"not alpha","Fragments":["is"]},{"Key":"alpha is","Fragments":["treated"]},{"Key":"as speech,","Fragments":["but"]},{"Key":"speech, but","Fragments":["neither"]},{"Key":"but neither","Fragments":["quiet"]},{"Key":"neither quiet","Fragments":["nor"]},{"Key":"quiet nor","Fragments":["shouting"]},{"Key":" have","Fragments":["decided,"]},{"Key":"have decided,","Fragments":["i'm"]},{"Key":"decided, i'm","Fragments":["going"]},{"Key":"to re-write","Fragments":["this"]},{"Key":"re-write this","Fragments":["using"]},{"Key":"using string.pop_back()","Fragments":["instead"]},{"Key":"an if-break","Fragments":["inside"]},{"Key":"if-break inside","Fragments":["the"]},{"Key":"loop, just","Fragments":["make"]},{"Key":"loop conditional","Fragments":["an"]},{"Key":"conditional an","Fragments":["\"and\""]},{"Key":"an \"and\"","Fragments":["conditional."]},{"Key":"\u003c str1.length()","Fragments":["\u0026\u0026"]},{"Key":"str1.length() \u0026\u0026","Fragments":["str2Length"]},{"Key":"\u0026\u0026 str2Length","Fragments":["\u003c"]},{"Key":"str2Length \u003c","Fragments":["i;"]},{"Key":"\u003c i;","Fragments":["++i)"]},{"Key":" Seriously","Fragments":["how"]},{"Key":"Seriously how","Fragments":["does"]},{"Key":"does c++","Fragments":["not"]},{"Key":"c++ not","Fragments":["already"]},{"Key":"that lowercases","Fragments":["a"]},{"Key":"lowercases a","Fragments":["string?"]},{"Key":"a tolower(char)","Fragments":["function."]},{"Key":"tolower(char) function.","Fragments":["Which"]},{"Key":"function. Which","Fragments":["would"]},{"Key":"your LowerCase","Fragments":["function"]},{"Key":"LowerCase function","Fragments":["a"]},{"Key":" \u003cli\u003e`bob::hey`","Fragments":["takes","takes","takes","takes"]},{"Key":"\u003cli\u003e`bob::hey` takes","Fragments":["a","a","a","a"]},{"Key":"string\u0026 sentence`","Fragments":["and","and","and","and"]},{"Key":"sentence` and","Fragments":["returns","returns","returns","determines"]},{"Key":" \u003cli\u003e`evaluate`","Fragments":["determines","determines","determines"]},{"Key":"\u003cli\u003e`evaluate` determines","Fragments":["the","the","the"]},{"Key":"determines the","Fragments":["amount","amount","amount","amount","phraseType."]},{"Key":"possible responses","Fragments":["by","by","by","by"]},{"Key":"responses by","Fragments":["getting","getting","getting","getting"]},{"Key":"by getting","Fragments":["the","the","the","the","the"]},{"Key":"enum value","Fragments":["`respond_to::length`","`respond_to::length`","`respond_to::length`\u003c/li\u003e","`respond_to::length`\u003c/li\u003e"]},{"Key":"value `respond_to::length`","Fragments":["and","and"]},{"Key":"`respond_to::length` and","Fragments":["compares","compares"]},{"Key":"and compares","Fragments":["the","the"]},{"Key":"the sentence","Fragments":["against","against","against","against"]},{"Key":"sentence against","Fragments":["each","each","a","a"]},{"Key":"against each","Fragments":["type","type"]},{"Key":"type returning","Fragments":["the","the"]},{"Key":"string\u0026 respond","Fragments":["(const","(const"]},{"Key":"respond (const","Fragments":["respond_to\u0026","respond_to\u0026"]},{"Key":"(const respond_to\u0026","Fragments":["type)`","type)`"]},{"Key":" `isType(const","Fragments":["string\u0026","string\u0026","string\u0026","string\u0026"]},{"Key":"`isType(const string\u0026","Fragments":["sentence,","sentence,","sentence,","sentence,"]},{"Key":"string\u0026 sentence,","Fragments":["const","const","const","const"]},{"Key":"sentence, const","Fragments":["respond_to\u0026","respond_to\u0026","respond_to\u0026","respond_to\u0026"]},{"Key":"const respond_to\u0026","Fragments":["type)`","type)`","type)`","type)`"]},{"Key":"respond_to\u0026 type)`","Fragments":["returns","returns","compares","compares"]},{"Key":"type)` returns","Fragments":["true;","true;"]},{"Key":"returns true;","Fragments":["meaning","meaning"]},{"Key":"true; meaning","Fragments":["that","that"]},{"Key":"meaning that","Fragments":["it","it","you"]},{"Key":"matched the","Fragments":["stored","stored"]},{"Key":"stored regex","Fragments":["for","for"]},{"Key":"corresponding type","Fragments":["against","against"]},{"Key":"type against","Fragments":["the","the"]},{"Key":"object oriented","Fragments":["approach,","approach,","approach,","approach,"]},{"Key":"oriented approach,","Fragments":["I","I","I","I"]},{"Key":"was forced","Fragments":["to","to","to","to"]},{"Key":"my methods","Fragments":["`static`.","`static`.","`static`.","`static`."]},{"Key":"methods `static`.","Fragments":["Although","Although","Although","Although"]},{"Key":"`static`. Although","Fragments":["after","after","after","after"]},{"Key":"Although after","Fragments":["review,","review,","review,","review,"]},{"Key":"after review,","Fragments":["I","I","I","I"]},{"Key":"review, I","Fragments":["believe","believe","believe","believe"]},{"Key":"how a","Fragments":["true","true","true","true"]},{"Key":"true `bob`","Fragments":["object","object","object","object"]},{"Key":"`bob` object","Fragments":["would","would","would","would"]},{"Key":"object would","Fragments":["work.\u003c/li\u003e","work.\u003c/li\u003e","work.\u003c/li\u003e","work.\u003c/li\u003e"]},{"Key":"I created","Fragments":["my","my","my","my"]},{"Key":"created my","Fragments":["data","data","data","data"]},{"Key":"my data","Fragments":["structures","structures","structures","structures"]},{"Key":"structures it","Fragments":["would","would","would","would"]},{"Key":"be relatively","Fragments":["easy","easy","easy","easy"]},{"Key":"to scale","Fragments":["this","this","this","this"]},{"Key":"scale this","Fragments":["and","and","and","and"]},{"Key":"add responses","Fragments":["to","to","to","to"]},{"Key":"to bob;","Fragments":["however,","however,","however,","however,"]},{"Key":"bob; however,","Fragments":["now","now","now","now"]},{"Key":"however, now","Fragments":["I","I","I","I"]},{"Key":"3 different","Fragments":["data","data","data","data"]},{"Key":"different data","Fragments":["structures","structures","structures","structures"]},{"Key":"that must","Fragments":["be","be","be","be"]},{"Key":"in sync","Fragments":["\u003ci\u003ei.e.","\u003ci\u003ei.e.","\u003ci\u003ei.e.","\u003ci\u003ei.e.","with"]},{"Key":"sync \u003ci\u003ei.e.","Fragments":["`enum","`enum","`enum","`enum"]},{"Key":"\u003ci\u003ei.e. `enum","Fragments":["respond_to`","respond_to`","respond_to`","respond_to`"]},{"Key":"`enum respond_to`","Fragments":["`map","`map","`map","`map"]},{"Key":"respond_to` `map","Fragments":["mRegexes`","mRegexes`","mRegexes`","mRegexes`"]},{"Key":"`map mRegexes`","Fragments":["`map","`map","`map","`map"]},{"Key":"mRegexes` `map","Fragments":["mResponses`\u003c/i\u003e","mResponses`\u003c/i\u003e","mResponses`\u003c/i\u003e","mResponses`\u003c/i\u003e"]},{"Key":"Hey @aliyah,","Fragments":["First"]},{"Key":"@aliyah, First","Fragments":["off"]},{"Key":"First off","Fragments":["I"]},{"Key":"the OOP","Fragments":["design"]},{"Key":"OOP design","Fragments":["and"]},{"Key":"design and","Fragments":["I"]},{"Key":"really efficient","Fragments":["and"]},{"Key":"efficient and","Fragments":["clever."]},{"Key":" *One","Fragments":["thing"]},{"Key":"*One thing","Fragments":["I"]},{"Key":"done differently,","Fragments":["that"]},{"Key":"differently, that","Fragments":["you"]},{"Key":" \u003cul\u003e\u003cli\u003e","Fragments":["Use","`const"]},{"Key":"\u003cul\u003e\u003cli\u003e Use","Fragments":["`const"]},{"Key":"std::string\u0026` for","Fragments":["the"]},{"Key":"and parameter","Fragments":["of"]},{"Key":"parameter of","Fragments":["`bob::hey`"]},{"Key":" \u003cli\u003eCode","Fragments":["was"]},{"Key":"\u003cli\u003eCode was","Fragments":["formatted"]},{"Key":"was formatted","Fragments":["to"]},{"Key":"formatted to","Fragments":["be"]},{"Key":"readable on","Fragments":["exercism.io"]},{"Key":"on exercism.io","Fragments":["\u003c/li\u003e"]},{"Key":"Did this","Fragments":["pass","pass","work","file"]},{"Key":"the tests?","Fragments":["I","I"]},{"Key":"I though","Fragments":["if"]},{"Key":"though if","Fragments":["the"]},{"Key":"strings weren't","Fragments":["equal"]},{"Key":"weren't equal","Fragments":["length"]},{"Key":"equal length","Fragments":["then","differently.\""]},{"Key":"length then","Fragments":["it","it"]},{"Key":"ignore extra","Fragments":["chars.","length"]},{"Key":"extra chars.","Fragments":["Not","Not"]},{"Key":"chars. Not","Fragments":["just","just"]},{"Key":"Not just","Fragments":["return","return"]},{"Key":"thought if","Fragments":["the"]},{"Key":"strings were","Fragments":["of","repeated"]},{"Key":"were of","Fragments":["unequal"]},{"Key":"of unequal","Fragments":["length"]},{"Key":"unequal length","Fragments":["then"]},{"Key":"ignore the","Fragments":["extra","extra","extra"]},{"Key":"a min","Fragments":["function"]},{"Key":"min function","Fragments":["that"]},{"Key":"shorter of","Fragments":["two"]},{"Key":"two values.","Fragments":["You"]},{"Key":"at around","Fragments":["line"]},{"Key":"10 to","Fragments":["shorten"]},{"Key":"shorten things","Fragments":["a"]},{"Key":"I have.","Fragments":["Was"]},{"Key":"have. Was","Fragments":["there"]},{"Key":"Was there","Fragments":["another"]},{"Key":"there another","Fragments":["underlaying","way"]},{"Key":"another underlaying","Fragments":["message"]},{"Key":"underlaying message","Fragments":["there"]},{"Key":"message there","Fragments":["that"]},{"Key":"there that","Fragments":["I","you","it's"]},{"Key":"I missed,","Fragments":["or"]},{"Key":"missed, or","Fragments":["just"]},{"Key":"20 instead","Fragments":["of"]},{"Key":"for if","Fragments":["it","the"]},{"Key":"it punctuation","Fragments":["or"]},{"Key":"punctuation or","Fragments":["white","numbers."]},{"Key":"or white","Fragments":["space","space"]},{"Key":" if(not","Fragments":["alphanumeric)"]},{"Key":"tried a","Fragments":["different"]},{"Key":"one. At","Fragments":["the"]},{"Key":"memory (26*sizeof(int)","Fragments":["bytes),"]},{"Key":"(26*sizeof(int) bytes),","Fragments":["I"]},{"Key":"bytes), I","Fragments":["was"]},{"Key":"to achieve","Fragments":["an","pattern"]},{"Key":"achieve an","Fragments":["efficiency"]},{"Key":"of O(n)","Fragments":["rather"]},{"Key":"O(n) rather","Fragments":["than"]},{"Key":"double for-loop","Fragments":["resulting"]},{"Key":"for-loop resulting","Fragments":["in"]},{"Key":"resulting in","Fragments":["O(n^2"]},{"Key":"in O(n^2","Fragments":[")."]},{"Key":"array the","Fragments":["size"]},{"Key":"alphabet to","Fragments":["store"]},{"Key":"times a","Fragments":["particular"]},{"Key":"particular letter","Fragments":["appears"]},{"Key":"letter appears","Fragments":["in"]},{"Key":"first loop,","Fragments":["then"]},{"Key":"are present","Fragments":["in"]},{"Key":"Question about","Fragments":["this"]},{"Key":"int alphabet[26]","Fragments":["="]},{"Key":"alphabet[26] =","Fragments":["{};"]},{"Key":"that proper","Fragments":["technique"]},{"Key":"proper technique","Fragments":["to"]},{"Key":"technique to","Fragments":["get"]},{"Key":"all instances","Fragments":["to"]},{"Key":"instances to","Fragments":["a"]},{"Key":"a 0?","Fragments":["Or"]},{"Key":"0? Or","Fragments":["would"]},{"Key":"Or would","Fragments":["it"]},{"Key":"better practice/more","Fragments":["readable"]},{"Key":"practice/more readable","Fragments":["to"]},{"Key":"have {0,","Fragments":["0,"]},{"Key":"{0, 0,","Fragments":["0,"]},{"Key":"0, 0,","Fragments":["0,","..."]},{"Key":"and appended","Fragments":["to","to"]},{"Key":"appended to","Fragments":["a","a"]},{"Key":"result word","Fragments":["if","if"]},{"Key":"word if","Fragments":["neccessary","neccessary","it"]},{"Key":"if neccessary","Fragments":["\u003c/li\u003e","\u003c/li\u003e"]},{"Key":"\u003cli\u003eIf a","Fragments":["space","non-alphabetic"]},{"Key":"space or","Fragments":["newline"]},{"Key":"or newline","Fragments":["is","is"]},{"Key":"newline is","Fragments":["encountered","encountered"]},{"Key":"is encountered","Fragments":["then","then"]},{"Key":"encountered then","Fragments":["it","it"]},{"Key":"inserted or","Fragments":["counted","counted"]},{"Key":"or counted","Fragments":["depending","depending"]},{"Key":"counted depending","Fragments":["on","on"]},{"Key":"on if","Fragments":["it","it"]},{"Key":"been encountered","Fragments":["before","before"]},{"Key":"encountered before","Fragments":["and","and"]},{"Key":"before and","Fragments":["the","the"]},{"Key":"word string","Fragments":["set","set"]},{"Key":"string set","Fragments":["to","to"]},{"Key":"\u003cli\u003eBecause we","Fragments":["use","use"]},{"Key":"the *exercism","Fragments":["build","build"]},{"Key":"*exercism build","Fragments":["system*","system*"]},{"Key":"build system*","Fragments":["I","I"]},{"Key":"system* I","Fragments":["had","had"]},{"Key":"wouldn't link","Fragments":["separately.\u003c/li\u003e","separately.\u003c/li\u003e"]},{"Key":"map return","Fragments":["value","value"]},{"Key":"on return","Fragments":["but","but"]},{"Key":"return but","Fragments":["because","because"]},{"Key":" \u003cul\u003e\u003cli\u003eHandles","Fragments":["Special"]},{"Key":"\u003cul\u003e\u003cli\u003eHandles Special","Fragments":["characters"]},{"Key":"Special characters","Fragments":["better."]},{"Key":" \u003cul\u003e\u003cli\u003e`line","Fragments":["18:`"]},{"Key":"\u003cul\u003e\u003cli\u003e`line 18:`","Fragments":["changed"]},{"Key":"18:` changed","Fragments":["`!isspace(c)`"]},{"Key":"changed `!isspace(c)`","Fragments":["to"]},{"Key":"`!isspace(c)` to","Fragments":["`isalpha(c)`\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e"]},{"Key":"a non-alphabetic","Fragments":["character"]},{"Key":"non-alphabetic character","Fragments":["or"]},{"Key":" @adolfo,","Fragments":["yes"]},{"Key":"@adolfo, yes","Fragments":["it"]},{"Key":"yes it","Fragments":["happened"]},{"Key":"it happened","Fragments":["to"]},{"Key":"happened to","Fragments":["pass"]},{"Key":"tests, albeit","Fragments":["only"]},{"Key":"albeit only","Fragments":["by"]},{"Key":"by luck.","Fragments":["The"]},{"Key":"luck. The","Fragments":["tests"]},{"Key":"tests were","Fragments":["such"]},{"Key":"were such","Fragments":["that"]},{"Key":"the mismatched","Fragments":["string","strings"]},{"Key":"mismatched string","Fragments":["sizes","size."]},{"Key":"string sizes","Fragments":["came"]},{"Key":"sizes came","Fragments":["out"]},{"Key":"0 difference","Fragments":["anyways."]},{"Key":"difference anyways.","Fragments":["I'll"]},{"Key":"anyways. I'll","Fragments":["fix"]},{"Key":" \u003cul\u003e\u003cli\u003eLarge","Fragments":["Formatting"]},{"Key":"\u003cul\u003e\u003cli\u003eLarge Formatting","Fragments":["Redesign"]},{"Key":" \u003cul\u003e\u003cli\u003e.cpp","Fragments":["and"]},{"Key":"\u003cul\u003e\u003cli\u003e.cpp and","Fragments":[".h"]},{"Key":"and .h","Fragments":["are"]},{"Key":".h are","Fragments":["now"]},{"Key":"now one","Fragments":["file"]},{"Key":"file (bob.h)","Fragments":["and"]},{"Key":"(bob.h) and","Fragments":["co-operate"]},{"Key":"and co-operate","Fragments":["with"]},{"Key":"co-operate with","Fragments":["this"]},{"Key":"this sites","Fragments":["format.\u003c/li\u003e"]},{"Key":"\u003cli\u003eThe convienience","Fragments":["function"]},{"Key":"convienience function","Fragments":["`const"]},{"Key":"function `const","Fragments":["string\u0026"]},{"Key":"string\u0026 respond(const","Fragments":["respond_to\u0026)`","string\u0026)`is"]},{"Key":" has","Fragments":["been","a"]},{"Key":"its calls","Fragments":["replaced"]},{"Key":"calls replaced","Fragments":["with"]},{"Key":" \u003cli\u003eBetter","Fragments":["Regexes\u003cul\u003e"]},{"Key":" \u003cli\u003e`regex_search`","Fragments":["is"]},{"Key":"\u003cli\u003e`regex_search` is","Fragments":["used"]},{"Key":"of `regex_match`","Fragments":["to"]},{"Key":"`regex_match` to","Fragments":["facilitate"]},{"Key":"to facilitate","Fragments":["more","locale-awareness."]},{"Key":"facilitate more","Fragments":["accurate"]},{"Key":"more accurate","Fragments":["regexes\u003c/li\u003e"]},{"Key":" \u003cli\u003eExpressions","Fragments":["are"]},{"Key":"\u003cli\u003eExpressions are","Fragments":["more"]},{"Key":"more scalable","Fragments":["and"]},{"Key":"scalable and","Fragments":["applicable"]},{"Key":"and applicable","Fragments":["to"]},{"Key":"applicable to","Fragments":["responses","C++"]},{"Key":"to responses","Fragments":["not"]},{"Key":"responses not","Fragments":["included"]},{"Key":" \u003cli\u003eQuicker","Fragments":["Evaluation\u003cul\u003e\u003cli\u003eReturns"]},{"Key":"\u003cli\u003eQuicker Evaluation\u003cul\u003e\u003cli\u003eReturns","Fragments":["on"]},{"Key":"Evaluation\u003cul\u003e\u003cli\u003eReturns on","Fragments":["empty"]},{"Key":"type)` compares","Fragments":["the","the"]},{"Key":"response type","Fragments":["which","which"]},{"Key":"type which","Fragments":["has","has"]},{"Key":"a corresponding","Fragments":["regular","regular","`case`."]},{"Key":"corresponding regular","Fragments":["expression","expression"]},{"Key":"regular expression","Fragments":["and","and","that","itself."]},{"Key":"Moved the","Fragments":["copied"]},{"Key":"the copied","Fragments":["logic"]},{"Key":"copied logic","Fragments":["that"]},{"Key":"logic that","Fragments":["was","processes"]},{"Key":"was happening","Fragments":["after"]},{"Key":"happening after","Fragments":["the"]},{"Key":"the inside","Fragments":["by"]},{"Key":"inside by","Fragments":["allowing"]},{"Key":"by allowing","Fragments":["the"]},{"Key":"allowing the","Fragments":["loop"]},{"Key":"happen once","Fragments":["more,"]},{"Key":"once more,","Fragments":["and"]},{"Key":"more, and","Fragments":["checking"]},{"Key":"case in","Fragments":["the"]},{"Key":"statement. This","Fragments":["also"]},{"Key":"me move","Fragments":["all"]},{"Key":"move all","Fragments":["variable","your"]},{"Key":"declarations inside","Fragments":["of"]},{"Key":"loop, other","Fragments":["than"]},{"Key":"\u003cul\u003e\u003cli\u003e `const","Fragments":["string\u0026"]},{"Key":"respond(const string\u0026)`is","Fragments":["gone"]},{"Key":"string\u0026)`is gone","Fragments":["and"]},{"Key":"gone and","Fragments":["it"]},{"Key":"it functionality","Fragments":["has"]},{"Key":"functionality has","Fragments":["been"]},{"Key":"implemented inside","Fragments":["of"]},{"Key":"string\u0026 bob::hey(cosnt","Fragments":["string\u0026)`.\u003cul\u003e\u003cli\u003eI"]},{"Key":"bob::hey(cosnt string\u0026)`.\u003cul\u003e\u003cli\u003eI","Fragments":["don't"]},{"Key":"string\u0026)`.\u003cul\u003e\u003cli\u003eI don't","Fragments":["like"]},{"Key":"of descriptiveness","Fragments":["with"]},{"Key":"descriptiveness with","Fragments":["`bob::hey`"]},{"Key":"with `bob::hey`","Fragments":["and"]},{"Key":"`bob::hey` and","Fragments":["I"]},{"Key":"people `evaluate`","Fragments":["things"]},{"Key":"`evaluate` things","Fragments":["privately"]},{"Key":"things privately","Fragments":["but"]},{"Key":"privately but","Fragments":["this"]},{"Key":"this became","Fragments":["a"]},{"Key":"became a","Fragments":["`respond`"]},{"Key":"a `respond`","Fragments":["function"]},{"Key":"`respond` function","Fragments":["and"]},{"Key":"evaluation was","Fragments":["moved"]},{"Key":"was moved","Fragments":["to"]},{"Key":"to `isType`","Fragments":["so"]},{"Key":"`isType` so","Fragments":["decided"]},{"Key":"so decided","Fragments":["that"]},{"Key":"decided that","Fragments":["was","a"]},{"Key":"enough reason","Fragments":["to"]},{"Key":" \u003cli\u003e`enum","Fragments":["respond_to`"]},{"Key":"\u003cli\u003e`enum respond_to`","Fragments":["is"]},{"Key":"respond_to` is","Fragments":["once"]},{"Key":"is once","Fragments":["again"]},{"Key":"once again","Fragments":["a"]},{"Key":" \u003cul\u003e\u003cli\u003eI","Fragments":["think"]},{"Key":"\u003cul\u003e\u003cli\u003eI think","Fragments":["this"]},{"Key":"better design","Fragments":["because"]},{"Key":"design because","Fragments":["it's"]},{"Key":"it's encapsulated","Fragments":["and"]},{"Key":"encapsulated and","Fragments":["emulates"]},{"Key":"and emulates","Fragments":["a"]},{"Key":"emulates a","Fragments":["real"]},{"Key":"real \"bob\"","Fragments":["object.\u003c/li\u003e\u003c/ul\u003e"]},{"Key":" \u003cli\u003eReformatted","Fragments":["Code"]},{"Key":" \u003cul\u003e\u003cli\u003eCode","Fragments":["is"]},{"Key":"\u003cul\u003e\u003cli\u003eCode is","Fragments":["tighter"]},{"Key":"is tighter","Fragments":["and"]},{"Key":"and shortened","Fragments":["where"]},{"Key":"shortened where","Fragments":["logically"]},{"Key":"where logically","Fragments":["applicable\u003c/li\u003e"]},{"Key":" \u003cli\u003e`sentence`","Fragments":["variable"]},{"Key":"\u003cli\u003e`sentence` variable","Fragments":["is"]},{"Key":"now `phrase`","Fragments":["because"]},{"Key":"`phrase` because","Fragments":["it"]},{"Key":"is shorter","Fragments":["and","than","to"]},{"Key":"and determines","Fragments":["the"]},{"Key":"the `evaluate()`","Fragments":["function"]},{"Key":"`evaluate()` function","Fragments":["and"]},{"Key":"use `bob::hey`","Fragments":["my"]},{"Key":"`bob::hey` my","Fragments":["code"]},{"Key":"less realistically","Fragments":["emulate"]},{"Key":"realistically emulate","Fragments":["an"]},{"Key":"emulate an","Fragments":["actual"]},{"Key":"actual person;","Fragments":["however"]},{"Key":"person; however","Fragments":["it"]},{"Key":"has essentially","Fragments":["turned"]},{"Key":"essentially turned","Fragments":["a"]},{"Key":"turned a","Fragments":["3-step"]},{"Key":"a 3-step","Fragments":["procedure"]},{"Key":"3-step procedure","Fragments":["into"]},{"Key":"procedure into","Fragments":["a"]},{"Key":"a 2-step","Fragments":["procedure"]},{"Key":"2-step procedure","Fragments":["with"]},{"Key":"procedure with","Fragments":["no"]},{"Key":"real effort","Fragments":["or"]},{"Key":"effort or","Fragments":["negative"]},{"Key":"or negative","Fragments":["effect"]},{"Key":"negative effect","Fragments":["to"]},{"Key":"effect to","Fragments":["the"]},{"Key":"and built","Fragments":["my"]},{"Key":"built my","Fragments":["code"]},{"Key":"code around","Fragments":["that."]},{"Key":"With classes,","Fragments":["you"]},{"Key":"classes, you","Fragments":["now"]},{"Key":"you now","Fragments":["expose"]},{"Key":"now expose","Fragments":["a"]},{"Key":"expose a","Fragments":["public"]},{"Key":"public default","Fragments":["and"]},{"Key":"Hey @monte","Fragments":["I"]},{"Key":"@monte I","Fragments":["really"]},{"Key":"the design","Fragments":["you've","as","or","consistent."]},{"Key":"design you've","Fragments":["chosen,"]},{"Key":"you've chosen,","Fragments":["its"]},{"Key":"chosen, its","Fragments":["intelligible"]},{"Key":"its intelligible","Fragments":["and"]},{"Key":"intelligible and","Fragments":["concise!"]},{"Key":"concise! If","Fragments":["I"]},{"Key":"change one","Fragments":["thing"]},{"Key":"thing for","Fragments":["its"]},{"Key":"its benefit","Fragments":["however,"]},{"Key":"benefit however,","Fragments":["I"]},{"Key":"use `phrase.back()`","Fragments":["on"]},{"Key":"`phrase.back()` on","Fragments":["`line"]},{"Key":"`line 54`","Fragments":["instead"]},{"Key":"54` instead","Fragments":["of"]},{"Key":"of `phrase[phrase.size()-1]`","Fragments":["that"]},{"Key":"`phrase[phrase.size()-1]` that","Fragments":["would"]},{"Key":"remove your","Fragments":["`inline`"]},{"Key":"your `inline`","Fragments":["function"]},{"Key":"`inline` function","Fragments":["and"]},{"Key":"would perfect","Fragments":["this"]},{"Key":"perfect this","Fragments":["code."]},{"Key":"code. Do","Fragments":["you"]},{"Key":"I practically","Fragments":["don't"]},{"Key":"practically don't","Fragments":["have"]},{"Key":"any previous","Fragments":["experience"]},{"Key":"regex libraries,","Fragments":["but"]},{"Key":"libraries, but","Fragments":["maybe"]},{"Key":"some practise","Fragments":["for"]},{"Key":"practise for","Fragments":["the"]},{"Key":"What comes","Fragments":["to"]},{"Key":"return variable,","Fragments":["for"]},{"Key":"variable, for","Fragments":["some"]},{"Key":"a principle","Fragments":["of"]},{"Key":"of preferring","Fragments":["it"]},{"Key":"preferring it","Fragments":["instead"]},{"Key":"it instead","Fragments":["of","of"]},{"Key":"returning in","Fragments":["the"]},{"Key":"function. Honestly,","Fragments":["I"]},{"Key":"way has","Fragments":["more"]},{"Key":" Iostream","Fragments":["was"]},{"Key":"Iostream was","Fragments":["added"]},{"Key":"added just","Fragments":["for"]},{"Key":"for debugging","Fragments":["purposes"]},{"Key":"debugging purposes","Fragments":["and"]},{"Key":"purposes and","Fragments":["I"]},{"Key":"of matches","Fragments":["to"]},{"Key":"matches to","Fragments":["be","the"]},{"Key":"* move","Fragments":["the"]},{"Key":"from matches","Fragments":["to"]},{"Key":" Question:","Fragments":["can"]},{"Key":"Question: can","Fragments":["I"]},{"Key":"based loop","Fragments":["syntax"]},{"Key":"syntax in","Fragments":["if"]},{"Key":"in if","Fragments":["statements,"]},{"Key":"if statements,","Fragments":["in"]},{"Key":"statements, in","Fragments":["the"]},{"Key":"can in","Fragments":["python."]},{"Key":"in python.","Fragments":["For"]},{"Key":"python. For","Fragments":["example:"]},{"Key":" vector\u003cint\u003e","Fragments":["x"]},{"Key":"vector\u003cint\u003e x","Fragments":["="]},{"Key":"= {0,","Fragments":["1,"]},{"Key":"{0, 1,","Fragments":["2};"]},{"Key":"(i :","Fragments":["x){"]},{"Key":" cout","Fragments":["\u003c\u003c","\u003c\u003c","\u003c\u003c"]},{"Key":"cout \u003c\u003c","Fragments":["\"i","\"i","i"]},{"Key":"\u003c\u003c \"i","Fragments":["is","is"]},{"Key":"\"i is","Fragments":["in","not"]},{"Key":"EDIT: I've","Fragments":["just"]},{"Key":"work. Is","Fragments":["there"]},{"Key":"way that's","Fragments":["nicely"]},{"Key":"that's nicely","Fragments":["readable?"]},{"Key":"nicely readable?","Fragments":["I"]},{"Key":"readable? I","Fragments":["know"]},{"Key":"know ```std::find```","Fragments":["can"]},{"Key":"```std::find``` can","Fragments":["be"]},{"Key":"The length","Fragments":["check"]},{"Key":"was redundant,","Fragments":["so"]},{"Key":"redundant, so","Fragments":["it"]},{"Key":"changed ```matches_out.insert(matches_out.end(),","Fragments":["i);```"]},{"Key":"```matches_out.insert(matches_out.end(), i);```","Fragments":["to"]},{"Key":"i);``` to","Fragments":["```matches_out.push_back(i);```"]},{"Key":"to ```matches_out.push_back(i);```","Fragments":["as"]},{"Key":"```matches_out.push_back(i);``` as","Fragments":["it"]},{"Key":"Hi again.","Fragments":["Yesterday"]},{"Key":"again. Yesterday","Fragments":["I"]},{"Key":"Yesterday I","Fragments":["found"]},{"Key":"those conditions","Fragments":["without"]},{"Key":"conditions without","Fragments":["using"]},{"Key":"using regex,","Fragments":["which"]},{"Key":"regex, which","Fragments":["maybe"]},{"Key":"which maybe","Fragments":["is"]},{"Key":"maybe is","Fragments":["too"]},{"Key":"those simple","Fragments":["cases."]},{"Key":"simple cases.","Fragments":["It"]},{"Key":"cases. It","Fragments":["is"]},{"Key":"in having","Fragments":["a"]},{"Key":"example from","Fragments":["the"]},{"Key":"person who","Fragments":["told"]},{"Key":"who told","Fragments":["me"]},{"Key":"told me","Fragments":["about","how"]},{"Key":"The message","Fragments":["was"]},{"Key":"was this:","Fragments":["It's"]},{"Key":"this: It's","Fragments":["nice"]},{"Key":"nice how","Fragments":["you've"]},{"Key":"how you've","Fragments":["split","split"]},{"Key":"you've split","Fragments":["things","up"]},{"Key":"split things","Fragments":["up"]},{"Key":"things up","Fragments":["into","a"]},{"Key":"but `checkCaps`","Fragments":["and"]},{"Key":"`checkCaps` and","Fragments":["`checkEmpty`"]},{"Key":"and `checkEmpty`","Fragments":["could"]},{"Key":"`checkEmpty` could","Fragments":["also"]},{"Key":"called `isAllCaps`","Fragments":["and"]},{"Key":"`isAllCaps` and","Fragments":["`isEmpty`."]},{"Key":"would express","Fragments":["more"]},{"Key":"express more","Fragments":["clearly"]},{"Key":"clearly that","Fragments":["they"]},{"Key":"are purely","Fragments":["boolean"]},{"Key":"purely boolean","Fragments":["functions"]},{"Key":" PS.:","Fragments":["`using"]},{"Key":"PS.: `using","Fragments":["namespace"]},{"Key":"std` is","Fragments":["a","a"]},{"Key":"heavy handed;","Fragments":["especially"]},{"Key":"handed; especially","Fragments":["in"]},{"Key":"all what","Fragments":["STL"]},{"Key":"what STL","Fragments":["can"]},{"Key":"STL can","Fragments":["do:"]},{"Key":"can do:","Fragments":["the"]},{"Key":"do: the","Fragments":["`for`"]},{"Key":"`for` in","Fragments":["`shouting`"]},{"Key":"in `shouting`","Fragments":["and"]},{"Key":"`shouting` and","Fragments":["the"]},{"Key":"the stackoverflow-originated","Fragments":["`trim`"]},{"Key":"stackoverflow-originated `trim`","Fragments":["looks"]},{"Key":"`trim` looks","Fragments":["ugly."]},{"Key":"use boost::format","Fragments":["to"]},{"Key":"boost::format to","Fragments":["make"]},{"Key":"this faster,","Fragments":["but"]},{"Key":"faster, but","Fragments":["I"]},{"Key":"Take a","Fragments":["more","look","look","look"]},{"Key":"careful look","Fragments":["at"]},{"Key":"song structure!","Fragments":["The"]},{"Key":"structure! The","Fragments":["size"]},{"Key":"The size","Fragments":["of"]},{"Key":"program can","Fragments":["be"]},{"Key":"optimized quite","Fragments":["considerably."]},{"Key":"Hi there!","Fragments":["Nice"]},{"Key":"there! Nice","Fragments":["piece"]},{"Key":"Nice piece","Fragments":["of"]},{"Key":" Peronally","Fragments":["I"]},{"Key":"Peronally I","Fragments":["would"]},{"Key":"comments explaining","Fragments":["in","why"]},{"Key":"explaining in","Fragments":["a"]},{"Key":"few words","Fragments":["what"]},{"Key":"words what","Fragments":["I"]},{"Key":"doing (this","Fragments":["code"]},{"Key":"(this code","Fragments":["is"]},{"Key":"very simple,","Fragments":["but"]},{"Key":"simple, but","Fragments":["I"]},{"Key":"would try","Fragments":["to"]},{"Key":"writing comments","Fragments":["for"]},{"Key":"used \u003calgorithm\u003e","Fragments":["library"]},{"Key":"\u003calgorithm\u003e library","Fragments":["to"]},{"Key":"remove those","Fragments":["chars"]},{"Key":"those chars","Fragments":["whch"]},{"Key":"chars whch","Fragments":["aren't"]},{"Key":"whch aren't","Fragments":["alphanumeric."]},{"Key":"aren't alphanumeric.","Fragments":["Personally"]},{"Key":"alphanumeric. Personally","Fragments":["I"]},{"Key":"love usng","Fragments":["the"]},{"Key":"usng the","Fragments":["stl"]},{"Key":"stl libraries","Fragments":["because"]},{"Key":"libraries because","Fragments":["they"]},{"Key":"and robust","Fragments":["(and"]},{"Key":"robust (and","Fragments":["most"]},{"Key":"(and most","Fragments":["of"]},{"Key":"the times","Fragments":["faster"]},{"Key":"times faster","Fragments":["as"]},{"Key":" `Bob.h`","Fragments":["just"]},{"Key":"`Bob.h` just","Fragments":["defines"]},{"Key":"just defines","Fragments":["the"]},{"Key":"defines the","Fragments":["function"]},{"Key":"prototypes inside","Fragments":["the"]},{"Key":"about implementing","Fragments":["`is_shout`,"]},{"Key":"implementing `is_shout`,","Fragments":["it"]},{"Key":"`is_shout`, it","Fragments":["seems"]},{"Key":"expressive to","Fragments":["search","use"]},{"Key":"for uppercase","Fragments":["characters"]},{"Key":"characters separately","Fragments":["using"]},{"Key":"separately using","Fragments":["`any_of`."]},{"Key":"using `any_of`.","Fragments":["However"]},{"Key":"`any_of`. However","Fragments":["that"]},{"Key":"However that","Fragments":["would"]},{"Key":"mean iterating","Fragments":["over"]},{"Key":"question twice","Fragments":["(alright,"]},{"Key":"twice (alright,","Fragments":["it"]},{"Key":"(alright, it","Fragments":["doesn't"]},{"Key":"matter for","Fragments":["any"]},{"Key":"any imaginable","Fragments":["question"]},{"Key":"imaginable question","Fragments":["but"]},{"Key":"question but","Fragments":["it's"]},{"Key":"of principle","Fragments":[";))."]},{"Key":"principle ;)).","Fragments":["And"]},{"Key":";)). And","Fragments":["I"]},{"Key":"following code","Fragments":["snippet"]},{"Key":"code snippet","Fragments":["reads:"]},{"Key":"if (not","Fragments":["found_upper"]},{"Key":"(not found_upper","Fragments":["and"]},{"Key":"found_upper and","Fragments":["isupper(c))"]},{"Key":"and isupper(c))","Fragments":["{"]},{"Key":" found_upper","Fragments":["="]},{"Key":"found_upper =","Fragments":["true;"]},{"Key":"so clear","Fragments":["what","and"]},{"Key":"this part","Fragments":["does"]},{"Key":"part does","Fragments":[":)."]},{"Key":"as deleted","Fragments":["(or"]},{"Key":"deleted (or","Fragments":["private)."]},{"Key":"(or private).","Fragments":["That"]},{"Key":"private). That","Fragments":["would"]},{"Key":"would resolve","Fragments":["the"]},{"Key":"But even","Fragments":["so,"]},{"Key":"so, since","Fragments":["all"]},{"Key":"static, there's","Fragments":["literally"]},{"Key":"there's literally","Fragments":["nothing"]},{"Key":"nothing you","Fragments":["could"]},{"Key":"this running","Fragments":["with"]},{"Key":"running with","Fragments":["`#include"]},{"Key":"with `#include","Fragments":["\u003clocale\u003e`"]},{"Key":"`#include \u003clocale\u003e`","Fragments":["but"]},{"Key":"\u003clocale\u003e` but","Fragments":["there"]},{"Key":"were problems","Fragments":["with"]},{"Key":"template substitution","Fragments":["in"]},{"Key":"substitution in","Fragments":["`none_of`."]},{"Key":"in `none_of`.","Fragments":["That's"]},{"Key":"`none_of`. That's","Fragments":["why"]},{"Key":"fell back","Fragments":["to"]},{"Key":"the `cctype`","Fragments":["include."]},{"Key":"solution couldn't","Fragments":["be"]},{"Key":"couldn't be","Fragments":["simpler."]},{"Key":"wondering about","Fragments":["performance"]},{"Key":"performance as","Fragments":["well,"]},{"Key":"benchmark three","Fragments":["different"]},{"Key":"std::transform( start,","Fragments":["stop,","stop,"]},{"Key":"start, stop,","Fragments":["back_inserter(","back_inserter("]},{"Key":"stop, back_inserter(","Fragments":["word","word"]},{"Key":"back_inserter( word","Fragments":["),","),"]},{"Key":"word ),","Fragments":["::tolower","::tolower"]},{"Key":"), ::tolower","Fragments":[");",");"]},{"Key":" word.reserve(","Fragments":["std::distance("]},{"Key":"word.reserve( std::distance(","Fragments":["start,"]},{"Key":"std::distance( start,","Fragments":["stop"]},{"Key":"start, stop","Fragments":[")",");"]},{"Key":"stop )","Fragments":[");"]},{"Key":"std::string word(","Fragments":["start,"]},{"Key":"word( start,","Fragments":["stop"]},{"Key":"std::transform( word.begin(),","Fragments":["word.end(),"]},{"Key":"word.begin(), word.end(),","Fragments":["word.begin(),"]},{"Key":"word.begin(), ::tolower","Fragments":[");"]},{"Key":"of weird,","Fragments":["however:"]},{"Key":"Time: 329018","Fragments":["microseconds."]},{"Key":"element: \"the\"","Fragments":["42033","42033","42033"]},{"Key":"Time: 485027","Fragments":["microseconds."]},{"Key":"Time: 306017","Fragments":["microseconds."]},{"Key":"Ran with","Fragments":["MSVC"]},{"Key":"with MSVC","Fragments":["and"]},{"Key":"MSVC and","Fragments":["full"]},{"Key":"and full","Fragments":["optimization."]},{"Key":"full optimization.","Fragments":["[Full"]},{"Key":"optimization. [Full","Fragments":["code"]},{"Key":"[Full code","Fragments":["here](http://pastebin.com/pHDFSGBZ)."]},{"Key":"code here](http://pastebin.com/pHDFSGBZ).","Fragments":["\"INPUT.txt\""]},{"Key":"here](http://pastebin.com/pHDFSGBZ). \"INPUT.txt\"","Fragments":["was"]},{"Key":"\"INPUT.txt\" was","Fragments":["a"]},{"Key":"random sci-fi","Fragments":["novel"]},{"Key":"sci-fi novel","Fragments":["I've"]},{"Key":"novel I've","Fragments":["had"]},{"Key":"lying around,","Fragments":["in"]},{"Key":"around, in","Fragments":["plain"]},{"Key":"in plain","Fragments":["text"]},{"Key":"plain text","Fragments":["format."]},{"Key":"text format.","Fragments":["4"]},{"Key":"format. 4","Fragments":["million"]},{"Key":"4 million","Fragments":["characters,"]},{"Key":"million characters,","Fragments":["average"]},{"Key":"characters, average","Fragments":["word"]},{"Key":"average word","Fragments":["length","length"]},{"Key":" Turns","Fragments":["out"]},{"Key":"Turns out","Fragments":["that"]},{"Key":"a text,","Fragments":["calling"]},{"Key":"text, calling","Fragments":["`reserve`"]},{"Key":"calling `reserve`","Fragments":["is"]},{"Key":"`reserve` is","Fragments":["detrimental"]},{"Key":"is detrimental","Fragments":["to"]},{"Key":"detrimental to","Fragments":["performance."]},{"Key":"to performance.","Fragments":["The"]},{"Key":"performance. The","Fragments":["default"]},{"Key":"default buffer","Fragments":["size"]},{"Key":"buffer size","Fragments":["for","changes.","matches"]},{"Key":"a `std::string`","Fragments":["in"]},{"Key":"`std::string` in","Fragments":["Microsoft's"]},{"Key":"in Microsoft's","Fragments":["implementation"]},{"Key":"Microsoft's implementation","Fragments":["is"]},{"Key":"is 16.","Fragments":["A"]},{"Key":"16. A","Fragments":["string"]},{"Key":"A string","Fragments":["smaller","has"]},{"Key":"string smaller","Fragments":["than"]},{"Key":"that won't","Fragments":["cause"]},{"Key":"allocation at","Fragments":["all."]},{"Key":"all. With","Fragments":["an"]},{"Key":"With an","Fragments":["average"]},{"Key":"an average","Fragments":["word"]},{"Key":"of less","Fragments":["than"]},{"Key":"than 6,","Fragments":["the"]},{"Key":"6, the","Fragments":["process"]},{"Key":"process is","Fragments":["almost"]},{"Key":"almost free","Fragments":["of"]},{"Key":"of heap","Fragments":["allocs."]},{"Key":"heap allocs.","Fragments":["Calling"]},{"Key":"allocs. Calling","Fragments":["`reserve`"]},{"Key":"Calling `reserve`","Fragments":["in"]},{"Key":"`reserve` in","Fragments":["this"]},{"Key":"case only","Fragments":["adds"]},{"Key":"only adds","Fragments":["some"]},{"Key":"adds some","Fragments":["unnecessary"]},{"Key":"some unnecessary","Fragments":["overhead."]},{"Key":"think GNU's","Fragments":["stdlib"]},{"Key":"GNU's stdlib","Fragments":["implementation"]},{"Key":"stdlib implementation","Fragments":["doesn't"]},{"Key":"implementation doesn't","Fragments":["use"]},{"Key":"this short","Fragments":["string"]},{"Key":"short string","Fragments":["optimization,"]},{"Key":"string optimization,","Fragments":["so"]},{"Key":"optimization, so","Fragments":["results"]},{"Key":"so results","Fragments":["may"]},{"Key":"results may","Fragments":["very"]},{"Key":"may very","Fragments":["significantly."]},{"Key":"very significantly.","Fragments":["Maybe"]},{"Key":"significantly. Maybe","Fragments":["one"]},{"Key":"Maybe one","Fragments":["of"]},{"Key":"of you","Fragments":["guys"]},{"Key":"guys could","Fragments":["run"]},{"Key":"could run","Fragments":["it"]},{"Key":"run it","Fragments":["through"]},{"Key":"it through","Fragments":["gcc?"]},{"Key":" Trade","Fragments":["offs","Offs"]},{"Key":"Trade offs","Fragments":["with"]},{"Key":"offs with","Fragments":["this"]},{"Key":"was readability","Fragments":["vs."]},{"Key":"readability vs.","Fragments":["performance."]},{"Key":"vs. performance.","Fragments":["There"]},{"Key":"performance. There","Fragments":["is"]},{"Key":"some duplication","Fragments":["in"]},{"Key":"checking values","Fragments":["according"]},{"Key":"values according","Fragments":["to"]},{"Key":"to requirements,","Fragments":["but"]},{"Key":"the gain","Fragments":["in"]},{"Key":"gain in","Fragments":["readability","using"]},{"Key":"in readability","Fragments":["makes"]},{"Key":"readability makes","Fragments":["a"]},{"Key":"more maintainable","Fragments":["solution."]},{"Key":"responses instead","Fragments":["of"]},{"Key":"just coding","Fragments":["them"]},{"Key":"coding them","Fragments":["in"]},{"Key":"the if-statement.","Fragments":["Using"]},{"Key":"if-statement. Using","Fragments":["regex"]},{"Key":"Using regex","Fragments":["is"]},{"Key":"clever way","Fragments":["to"]},{"Key":"strings. C++","Fragments":["has"]},{"Key":"pretty nice","Fragments":["string"]},{"Key":"nice string","Fragments":["functions"]},{"Key":"used alternatively,","Fragments":["such"]},{"Key":"alternatively, such","Fragments":["as"]},{"Key":"as isupper(),","Fragments":["islower(),"]},{"Key":"isupper(), islower(),","Fragments":["isalpha()"]},{"Key":"islower(), isalpha()","Fragments":["to"]},{"Key":"isalpha() to","Fragments":["name"]},{"Key":"name a","Fragments":["few."]},{"Key":"a few.","Fragments":["Sometimes"]},{"Key":"few. Sometimes","Fragments":["these"]},{"Key":"Sometimes these","Fragments":["may"]},{"Key":"these may","Fragments":["be"]},{"Key":"use. Check","Fragments":["out"]},{"Key":"out cctype","Fragments":["(ctype.h)."]},{"Key":"Had I","Fragments":["thought"]},{"Key":"before, I","Fragments":["would"]},{"Key":"changed lines","Fragments":["30-35"]},{"Key":"lines 30-35","Fragments":["from"]},{"Key":"if (output_map.count(c)","Fragments":["=="]},{"Key":"(output_map.count(c) ==","Fragments":["0){"]},{"Key":" output_map[c]","Fragments":["="]},{"Key":"output_map[c] =","Fragments":["1;"]},{"Key":"But instead","Fragments":["I"]},{"Key":"instead I","Fragments":["went"]},{"Key":"I look","Fragments":["at"]},{"Key":"like range","Fragments":["for"]},{"Key":"for would","Fragments":["be"]},{"Key":"The Boost","Fragments":["Framework"]},{"Key":"Boost Framework","Fragments":["really"]},{"Key":"Framework really","Fragments":["helped."]},{"Key":"really helped.","Fragments":["The"]},{"Key":"helped. The","Fragments":["most"]},{"Key":"The most","Fragments":["worsts"]},{"Key":"most worsts","Fragments":["tests"]},{"Key":"worsts tests","Fragments":["was"]},{"Key":"tests was","Fragments":["the"]},{"Key":"the questions","Fragments":["with"]},{"Key":"Switched from","Fragments":["map"]},{"Key":"from map","Fragments":["to"]},{"Key":"to array","Fragments":["for"]},{"Key":"for improved","Fragments":["access"]},{"Key":"improved access","Fragments":["time."]},{"Key":"indexing with","Fragments":[".back()."]},{"Key":"with .back().","Fragments":["however"]},{"Key":".back(). however","Fragments":["I"]},{"Key":"not see","Fragments":["how"]},{"Key":" remove","Fragments":["the"]},{"Key":"the \"inline\"","Fragments":["function,"]},{"Key":"\"inline\" function,","Fragments":["which"]},{"Key":"there only","Fragments":["for"]},{"Key":"only for","Fragments":["explicit","this","string"]},{"Key":"for explicit","Fragments":["conversion"]},{"Key":"char []","Fragments":["to"]},{"Key":" my","Fragments":["impression"]},{"Key":"my impression","Fragments":["is"]},{"Key":"impression is","Fragments":["that"]},{"Key":"using sort()","Fragments":["in"]},{"Key":"sort() in","Fragments":["isValid()"]},{"Key":"in isValid()","Fragments":["is"]},{"Key":"isValid() is","Fragments":["a"]},{"Key":"of overkill,","Fragments":["isn't"]},{"Key":"overkill, isn't","Fragments":["it?"]},{"Key":" sort()","Fragments":["has"]},{"Key":"sort() has","Fragments":["a"]},{"Key":"a O(word_len*log2(word_len)","Fragments":["time"]},{"Key":"O(word_len*log2(word_len) time","Fragments":["complexity;"]},{"Key":"time complexity;","Fragments":["whereas"]},{"Key":"complexity; whereas","Fragments":["if"]},{"Key":"whereas if","Fragments":["you"]},{"Key":"original and","Fragments":["the"]},{"Key":"the would-be","Fragments":["anagram","anagram"]},{"Key":"would-be anagram","Fragments":["and","storing"]},{"Key":" compare","Fragments":["them,"]},{"Key":"compare them,","Fragments":["time"]},{"Key":"them, time","Fragments":["complexity"]},{"Key":"is O(word_len),","Fragments":["which"]},{"Key":"O(word_len), which","Fragments":["is"]},{"Key":"Yes. I","Fragments":["have"]},{"Key":"admit though,","Fragments":["that"]},{"Key":"this exercise,","Fragments":["as","I","but"]},{"Key":"exercise, as","Fragments":["well"]},{"Key":"the beer","Fragments":["song"]},{"Key":"beer song","Fragments":["and"]},{"Key":"song and","Fragments":["bob,","returning"]},{"Key":"and bob,","Fragments":["rather"]},{"Key":"bob, rather","Fragments":["boring."]},{"Key":"I see,","Fragments":["I"]},{"Key":"see, I","Fragments":["thought"]},{"Key":"had left","Fragments":["it"]},{"Key":"it there","Fragments":["from"]},{"Key":"there from","Fragments":["earlier"]},{"Key":"from earlier","Fragments":["trials."]},{"Key":"earlier trials.","Fragments":["I"]},{"Key":"trials. I","Fragments":["like"]},{"Key":"explicit call","Fragments":["now"]},{"Key":"call now","Fragments":["that"]},{"Key":"the \"word_count.h\"","Fragments":["file??"]},{"Key":"a classical","Fragments":["one;"]},{"Key":"classical one;","Fragments":["however"]},{"Key":"one; however","Fragments":["the"]},{"Key":"is suggested","Fragments":["by"]},{"Key":"boost unit","Fragments":["tests"]},{"Key":"a pitty","Fragments":["in"]},{"Key":"pitty in","Fragments":["my"]},{"Key":"my oppion.","Fragments":["the"]},{"Key":"oppion. the","Fragments":["only"]},{"Key":"the tokenizer,","Fragments":["which"]},{"Key":"tokenizer, which","Fragments":["is"]},{"Key":"simple in","Fragments":["this"]},{"Key":"Very nice,","Fragments":["but"]},{"Key":"nice, but","Fragments":["does"]},{"Key":"it return","Fragments":["0","1;"]},{"Key":"if a.size()","Fragments":["!="]},{"Key":"a.size() !=","Fragments":["b.size()"]},{"Key":"!= b.size()","Fragments":["?"]},{"Key":"mostly code","Fragments":["in"]},{"Key":"in C,","Fragments":["so"]},{"Key":"so am","Fragments":["bit"]},{"Key":"am bit","Fragments":["unfamilier"]},{"Key":"bit unfamilier","Fragments":["with"]},{"Key":"unfamilier with","Fragments":["string"]},{"Key":"with string","Fragments":["class."]},{"Key":"string class.","Fragments":["Can","Also,"]},{"Key":"class. Can","Fragments":["I"]},{"Key":"using \"ctype.h\",","Fragments":["and"]},{"Key":"\"ctype.h\", and","Fragments":["will"]},{"Key":"will it","Fragments":["be"]},{"Key":"figured that","Fragments":["I"]},{"Key":"own isupper(),","Fragments":["isalpha()"]},{"Key":"isupper(), isalpha()","Fragments":["if"]},{"Key":"isalpha() if","Fragments":["I"]},{"Key":"the conv.empty()","Fragments":["check"]},{"Key":"conv.empty() check","Fragments":["is"]},{"Key":"redundant. Any","Fragments":["feedback"]},{"Key":"feedback wil","Fragments":["be"]},{"Key":"wil be","Fragments":["good,"]},{"Key":"be good,","Fragments":["I"]},{"Key":"good, I","Fragments":["think"]},{"Key":"code lacks","Fragments":["elegance","comments"]},{"Key":"lacks elegance","Fragments":["and"]},{"Key":"elegance and","Fragments":["hence"]},{"Key":"hence have","Fragments":["to"]},{"Key":"my skills","Fragments":["a"]},{"Key":"skills a","Fragments":["lot."]},{"Key":"lot. Will","Fragments":["upload"]},{"Key":"Will upload","Fragments":["new"]},{"Key":"upload new","Fragments":["iteration"]},{"Key":"iteration when","Fragments":["I"]},{"Key":"find better","Fragments":["ways"]},{"Key":"better ways","Fragments":["of"]},{"Key":"checking some","Fragments":["conditions."]},{"Key":"some conditions.","Fragments":["Thanks."]},{"Key":"Changed \"ctype.h\"","Fragments":["to"]},{"Key":"\"ctype.h\" to","Fragments":["\"cctype\","]},{"Key":"to \"cctype\",","Fragments":["since"]},{"Key":"\"cctype\", since","Fragments":["that"]},{"Key":"is recommended.","Fragments":["Removed"]},{"Key":"recommended. Removed","Fragments":["hasAlpha,"]},{"Key":"Removed hasAlpha,","Fragments":["since"]},{"Key":"hasAlpha, since","Fragments":["same"]},{"Key":"since same","Fragments":["condition"]},{"Key":"same condition","Fragments":["can"]},{"Key":"condition can","Fragments":["be"]},{"Key":"by numAlpha.","Fragments":["Removed"]},{"Key":"numAlpha. Removed","Fragments":["the"]},{"Key":"redundant condition","Fragments":["of"]},{"Key":"condition of","Fragments":["\"conv.empty()\""]},{"Key":"of \"conv.empty()\"","Fragments":["while"]},{"Key":"\"conv.empty()\" while","Fragments":["assigning"]},{"Key":"to isNothing.","Fragments":["Finally"]},{"Key":"isNothing. Finally","Fragments":["wrote"]},{"Key":"Finally wrote","Fragments":["a"]},{"Key":"statement after","Fragments":["each"]},{"Key":"after each","Fragments":["condition","test."]},{"Key":"each condition","Fragments":["that","into"]},{"Key":"condition that","Fragments":["is","makes"]},{"Key":"is checked,","Fragments":["so"]},{"Key":"checked, so","Fragments":["that"]},{"Key":"program returns","Fragments":["before"]},{"Key":"returns before","Fragments":["unnecessarily"]},{"Key":"before unnecessarily","Fragments":["checking"]},{"Key":"unnecessarily checking","Fragments":["other"]},{"Key":"checking other","Fragments":["conditions."]},{"Key":"other conditions.","Fragments":["Introducted"]},{"Key":"conditions. Introducted","Fragments":["char"]},{"Key":"Introducted char","Fragments":["variable"]},{"Key":"char variable","Fragments":["'letter',"]},{"Key":"variable 'letter',","Fragments":["to"]},{"Key":"'letter', to","Fragments":["make"]},{"Key":"for reducing","Fragments":["function"]},{"Key":"reducing function","Fragments":["calls."]},{"Key":"function calls.","Fragments":["Forgive"]},{"Key":"calls. Forgive","Fragments":["my"]},{"Key":"Forgive my","Fragments":["poor"]},{"Key":"my poor","Fragments":["english,"]},{"Key":"poor english,","Fragments":["if"]},{"Key":"english, if","Fragments":["the"]},{"Key":"the grammer","Fragments":["is"]},{"Key":"grammer is","Fragments":["bad."]},{"Key":"is bad.","Fragments":["Thanks.","You"]},{"Key":"no Idea","Fragments":["but"]},{"Key":"Idea but","Fragments":["I"]},{"Key":"just looked","Fragments":["at"]},{"Key":"some documentation","Fragments":["to"]},{"Key":"to confirm","Fragments":["the"]},{"Key":"of `sort`and","Fragments":["you"]},{"Key":"`sort`and you","Fragments":["are"]},{"Key":"very correct.","Fragments":["From"]},{"Key":"correct. From","Fragments":["now"]},{"Key":"I'll research","Fragments":["the"]},{"Key":"research the","Fragments":["`std::algorithm`'s"]},{"Key":"the `std::algorithm`'s","Fragments":["more"]},{"Key":"`std::algorithm`'s more","Fragments":["before"]},{"Key":"more before","Fragments":["I","actually","coding."]},{"Key":"them especially","Fragments":["concerning"]},{"Key":"especially concerning","Fragments":["big"]},{"Key":"concerning big","Fragments":["O."]},{"Key":"big O.","Fragments":["I'll"]},{"Key":"O. I'll","Fragments":["submit"]},{"Key":"performant iteration","Fragments":["later"]},{"Key":"iteration later","Fragments":["this"]},{"Key":"this evening.__Thanks","Fragments":["for"]},{"Key":"evening.__Thanks for","Fragments":["the"]},{"Key":" @wallace","Fragments":["as"]},{"Key":"@wallace as","Fragments":["a"]},{"Key":"of thumb,","Fragments":["worst"]},{"Key":"thumb, worst","Fragments":["case"]},{"Key":"case time","Fragments":["complexity"]},{"Key":"of sort","Fragments":["algorithms"]},{"Key":"sort algorithms","Fragments":["is:"]},{"Key":" O(n^2","Fragments":[")"]},{"Key":"O(n^2 )","Fragments":["\u003e="]},{"Key":") \u003e=","Fragments":["sort_time_complexity"]},{"Key":"\u003e= sort_time_complexity","Fragments":["\u003e="]},{"Key":"sort_time_complexity \u003e=","Fragments":["O(n*log2(n))"]},{"Key":"some specialized","Fragments":["algorithms"]},{"Key":"specialized algorithms","Fragments":["which"]},{"Key":"which perform","Fragments":["better"]},{"Key":"better on","Fragments":["specialized"]},{"Key":"on specialized","Fragments":["hardware,"]},{"Key":"specialized hardware,","Fragments":["paralled"]},{"Key":"hardware, paralled","Fragments":["architectures"]},{"Key":"paralled architectures","Fragments":["aso."]},{"Key":"architectures aso.","Fragments":["more"]},{"Key":"aso. more","Fragments":["details"]},{"Key":"more details","Fragments":["here:"]},{"Key":"the book","Fragments":["\"Introduction"]},{"Key":"book \"Introduction","Fragments":["to"]},{"Key":"\"Introduction to","Fragments":["algorithms\""]},{"Key":"to algorithms\"","Fragments":["Cormen,"]},{"Key":"algorithms\" Cormen,","Fragments":["Leiserson,"]},{"Key":"Cormen, Leiserson,","Fragments":["Rivest,"]},{"Key":"Leiserson, Rivest,","Fragments":["MIT"]},{"Key":"Rivest, MIT","Fragments":["Press;"]},{"Key":"MIT Press;","Fragments":["even"]},{"Key":"Press; even","Fragments":["more"]},{"Key":"in Knuth's","Fragments":["TAOCP."]},{"Key":" __I","Fragments":["appreciate"]},{"Key":"__I appreciate","Fragments":["the"]},{"Key":" Infact,","Fragments":["Knuth's"]},{"Key":"Infact, Knuth's","Fragments":["work"]},{"Key":"Knuth's work","Fragments":["gets"]},{"Key":"work gets","Fragments":["recommended"]},{"Key":"gets recommended","Fragments":["to"]},{"Key":"recommended to","Fragments":["me"]},{"Key":"all too","Fragments":["often"]},{"Key":"too often","Fragments":["so"]},{"Key":"often so","Fragments":["I'll"]},{"Key":"I'll definitley","Fragments":["have"]},{"Key":"definitley have","Fragments":["to"]},{"Key":"my list","Fragments":["of"]},{"Key":"of books","Fragments":["to"]},{"Key":"books to","Fragments":["get"]},{"Key":"get but","Fragments":["I"]},{"Key":"have Robert","Fragments":["Sedgewick's"]},{"Key":"Robert Sedgewick's","Fragments":["*Algorithms"]},{"Key":"Sedgewick's *Algorithms","Fragments":["in"]},{"Key":"*Algorithms in","Fragments":["C"]},{"Key":"C Parts","Fragments":["1-5*"]},{"Key":"Parts 1-5*","Fragments":["on"]},{"Key":"1-5* on","Fragments":["their"]},{"Key":"their way","Fragments":["to"]},{"Key":"my house","Fragments":["right"]},{"Key":"house right","Fragments":["now"]},{"Key":"now otherwise","Fragments":["I'd"]},{"Key":"otherwise I'd","Fragments":["get"]},{"Key":"I'd get","Fragments":["*Intro"]},{"Key":"get *Intro","Fragments":["to"]},{"Key":"*Intro to","Fragments":["algorithms*"]},{"Key":"to algorithms*","Fragments":["like"]},{"Key":"algorithms* like","Fragments":["you"]},{"Key":"took one","Fragments":["test"]},{"Key":"one test","Fragments":["case"]},{"Key":"case at","Fragments":["a"]},{"Key":"logic as","Fragments":["needed."]},{"Key":"as needed.","Fragments":["So"]},{"Key":"needed. So","Fragments":["it"]},{"Key":"better structure","Fragments":["by"]},{"Key":"structure by","Fragments":["refactoring"]},{"Key":"by refactoring","Fragments":["but"]},{"Key":"refactoring but","Fragments":["I"]},{"Key":"haven't spend","Fragments":["that"]},{"Key":"spend that","Fragments":["much"]},{"Key":"in c++.","Fragments":["Fun.","I'll","I"]},{"Key":"the feedback,","Fragments":["those","I"]},{"Key":"feedback, those","Fragments":["are"]},{"Key":"both great","Fragments":["points."]},{"Key":"great points.","Fragments":["I'll"]},{"Key":"points. I'll","Fragments":["think"]},{"Key":"I'll think","Fragments":["about"]},{"Key":"those edge","Fragments":["cases"]},{"Key":"cases while","Fragments":["still"]},{"Key":"while still","Fragments":["keeping"]},{"Key":"still keeping","Fragments":["things"]},{"Key":"keeping things","Fragments":["nice"]},{"Key":"things nice","Fragments":["and"]},{"Key":" TAOCP","Fragments":["has"]},{"Key":"TAOCP has","Fragments":["some"]},{"Key":"* it","Fragments":["is"]},{"Key":"* you","Fragments":["need"]},{"Key":"math university","Fragments":["degree"]},{"Key":"university degree","Fragments":["to"]},{"Key":"degree to","Fragments":["understand"]},{"Key":"some chapters","Fragments":["(I"]},{"Key":"chapters (I","Fragments":["had"]},{"Key":"(I had","Fragments":["to"]},{"Key":"skip these","Fragments":["parts...)"]},{"Key":"implemented using","Fragments":["an","something"]},{"Key":"an assembly","Fragments":["lang."]},{"Key":"assembly lang.","Fragments":["for"]},{"Key":"lang. for","Fragments":["an"]},{"Key":"an imaginary","Fragments":["cpu;"]},{"Key":"he is","Fragments":["not"]},{"Key":"not shy","Fragments":["of"]},{"Key":"shy of","Fragments":["extensive"]},{"Key":"of extensive","Fragments":["usage"]},{"Key":"extensive usage","Fragments":["of"]},{"Key":"of \"goto\"","Fragments":["-"]},{"Key":"\"goto\" -","Fragments":["imagine"]},{"Key":"- imagine","Fragments":["jumping"]},{"Key":"imagine jumping","Fragments":["with"]},{"Key":"jumping with","Fragments":["\"goto\""]},{"Key":"with \"goto\"","Fragments":["back"]},{"Key":"\"goto\" back","Fragments":["and"]},{"Key":"and forth","Fragments":["from"]},{"Key":"forth from","Fragments":["loops."]},{"Key":"The testing","Fragments":["routine","for"]},{"Key":"testing routine","Fragments":["expects"]},{"Key":"routine expects","Fragments":["hey"]},{"Key":"expects hey","Fragments":["to"]},{"Key":"hey to","Fragments":["be"]},{"Key":"bob, which","Fragments":["is"]},{"Key":"a nonsense","Fragments":["this"]},{"Key":"nonsense this","Fragments":["code"]},{"Key":"code adheres","Fragments":["to."]},{"Key":"adheres to.","Fragments":["Otherwise"]},{"Key":"to. Otherwise","Fragments":["I"]},{"Key":"do instance","Fragments":["bob"]},{"Key":"instance bob","Fragments":["of"]},{"Key":"bob of","Fragments":["class"]},{"Key":"used only","Fragments":["pure"]},{"Key":"only pure","Fragments":["and"]},{"Key":"pure and","Fragments":["simple"]},{"Key":"simple C++","Fragments":["STL"]},{"Key":"STL functionality","Fragments":["(instead"]},{"Key":"functionality (instead","Fragments":["of"]},{"Key":"of coding","Fragments":["it"]},{"Key":"coding it","Fragments":["myself"]},{"Key":"it myself","Fragments":["or"]},{"Key":"myself or","Fragments":["using"]},{"Key":"using unnecessary","Fragments":["libraries)."]},{"Key":"unnecessary libraries).","Fragments":["Hopefuly"]},{"Key":"libraries). Hopefuly","Fragments":["I"]},{"Key":"Hopefuly I","Fragments":["achieved"]},{"Key":"I achieved","Fragments":["good"]},{"Key":"achieved good","Fragments":["readability"]},{"Key":"good readability","Fragments":["by"]},{"Key":"by this.","Fragments":["Using"]},{"Key":"Using string","Fragments":["instead"]},{"Key":"of char*","Fragments":["si"]},{"Key":"char* si","Fragments":["probably"]},{"Key":"si probably","Fragments":["unnecessary,"]},{"Key":"probably unnecessary,","Fragments":["but"]},{"Key":"unnecessary, but","Fragments":["this"]},{"Key":"obviously no","Fragments":["speed"]},{"Key":"no speed","Fragments":["optimized"]},{"Key":"speed optimized","Fragments":["code."]},{"Key":"lacks comments","Fragments":["because"]},{"Key":"comments because","Fragments":["-"]},{"Key":"because -","Fragments":["you"]},{"Key":"know -","Fragments":["nobody"]},{"Key":"- nobody","Fragments":["likes"]},{"Key":"nobody likes","Fragments":["those"]},{"Key":"likes those","Fragments":[":D."]},{"Key":" is_question","Fragments":["does"]},{"Key":"is_question does","Fragments":["access"]},{"Key":"does access","Fragments":["wrong"]},{"Key":"access wrong","Fragments":["memory"]},{"Key":"wrong memory","Fragments":["for"]},{"Key":"( input[input.length()","Fragments":["-"]},{"Key":"- 1]","Fragments":["=","="]},{"Key":"1] =","Fragments":["input[0","input[-1]"]},{"Key":"= input[0","Fragments":["-"]},{"Key":"input[0 -","Fragments":["1]"]},{"Key":"= input[-1]","Fragments":[")."]},{"Key":"input[-1] ).","Fragments":["Maybe"]},{"Key":"). Maybe","Fragments":["when"]},{"Key":"Maybe when","Fragments":["using"]},{"Key":"string do","Fragments":["not"]},{"Key":"use array","Fragments":["semantic"]},{"Key":"array semantic","Fragments":["but"]},{"Key":"semantic but","Fragments":["safer"]},{"Key":"safer string::at()","Fragments":["function."]},{"Key":"Returning as","Fragments":["cstring"]},{"Key":"as cstring","Fragments":["literal"]},{"Key":"cstring literal","Fragments":["instead"]},{"Key":"literal instead","Fragments":["of"]},{"Key":"Moved FINE","Fragments":["testing"]},{"Key":"FINE testing","Fragments":["to"]},{"Key":"testing to","Fragments":["be","work."]},{"Key":"be first,","Fragments":["which"]},{"Key":"first, which","Fragments":["is"]},{"Key":"fail and","Fragments":["also"]},{"Key":"to filter","Fragments":["out"]},{"Key":"filter out","Fragments":["(special"]},{"Key":"out (special","Fragments":["case"]},{"Key":"(special case","Fragments":["of)"]},{"Key":"case of)","Fragments":["empty"]},{"Key":"of) empty","Fragments":["string."]},{"Key":"It actually","Fragments":["looks","does"]},{"Key":"actually looks","Fragments":["good"]},{"Key":"Declaring variables","Fragments":["up"]},{"Key":"variables up","Fragments":["front"]},{"Key":"front is","Fragments":["very"]},{"Key":"very C-like.","Fragments":["In"]},{"Key":"C-like. In","Fragments":["C++"]},{"Key":"the bools","Fragments":["on"]},{"Key":"bools on","Fragments":["initialization"]},{"Key":"on initialization","Fragments":["(on"]},{"Key":"initialization (on","Fragments":["lines"]},{"Key":"(on lines","Fragments":["38,","38,"]},{"Key":"lines 38,","Fragments":["42,","42,"]},{"Key":"38, 42,","Fragments":["46).","46)"]},{"Key":"excellent opportunity","Fragments":["to"]},{"Key":"use new","Fragments":["c++11","c++11"]},{"Key":"new c++11","Fragments":["range","range"]},{"Key":"range for,","Fragments":["which"]},{"Key":"like for(","Fragments":["char"]},{"Key":"for( char","Fragments":["letter"]},{"Key":"char letter","Fragments":[":","before"]},{"Key":": conv","Fragments":["){}."]},{"Key":"Perhaps make","Fragments":["isupper"]},{"Key":"make isupper","Fragments":["\"if\""]},{"Key":"isupper \"if\"","Fragments":["also"]},{"Key":"\"if\" also","Fragments":["\"else"]},{"Key":"also \"else","Fragments":["if\""]},{"Key":"if\" -","Fragments":["space"]},{"Key":"- space","Fragments":["will"]},{"Key":"space will","Fragments":["never"]},{"Key":"use preincrementation","Fragments":["(++i)"]},{"Key":"preincrementation (++i)","Fragments":["instead"]},{"Key":"(++i) instead","Fragments":["of"]},{"Key":"of post","Fragments":["(i++)."]},{"Key":"post (i++).","Fragments":["But"]},{"Key":"(i++). But","Fragments":["I"]},{"Key":"of taste","Fragments":["in"]},{"Key":"taste in","Fragments":["places"]},{"Key":"in places","Fragments":["without"]},{"Key":"places without","Fragments":["side-effects."]},{"Key":"to (and","Fragments":["probably"]},{"Key":"(and probably","Fragments":["should"]},{"Key":"should not)","Fragments":["write"]},{"Key":"not) write","Fragments":["the"]},{"Key":"the \"?","Fragments":["true"]},{"Key":"\"? true","Fragments":[":"]},{"Key":": false\"","Fragments":["(on"]},{"Key":"false\" (on","Fragments":["lines"]},{"Key":"42, 46)","Fragments":["-"]},{"Key":"46) -","Fragments":["the"]},{"Key":"bool expressions","Fragments":["already"]},{"Key":"expressions already","Fragments":["are"]},{"Key":"already are","Fragments":["true"]},{"Key":"are true","Fragments":["or","to"]},{"Key":"true or","Fragments":["false.","break"]},{"Key":"or false.","Fragments":["The"]},{"Key":"false. The","Fragments":["same"]},{"Key":"same apply","Fragments":["for"]},{"Key":"apply for","Fragments":["the"]},{"Key":"the \"==","Fragments":["true\""]},{"Key":"\"== true\"","Fragments":["-"]},{"Key":"true\" -","Fragments":["the"]},{"Key":"bool variable","Fragments":["is","for"]},{"Key":"already bool.","Fragments":["no"]},{"Key":"bool. no","Fragments":["need"]},{"Key":"compare it.","Fragments":["I"]},{"Key":"if( numSpaces","Fragments":["=="]},{"Key":"numSpaces ==","Fragments":["conv.length()"]},{"Key":"== conv.length()","Fragments":[")"]},{"Key":"conv.length() )","Fragments":["return"]},{"Key":"function equals","Fragments":["was"]},{"Key":"equals was","Fragments":["unnecessary."]},{"Key":"to greatly","Fragments":["simplify"]},{"Key":"simplify food_chain::sing()","Fragments":["using"]},{"Key":"food_chain::sing() using","Fragments":["previously"]},{"Key":"using previously","Fragments":["defined"]},{"Key":"previously defined","Fragments":["functions."]},{"Key":" Hi.","Fragments":["You","Why","Very"]},{"Key":"Hi. You","Fragments":["should"]},{"Key":"use \"remark.back()\"","Fragments":["on"]},{"Key":"\"remark.back()\" on","Fragments":["empty"]},{"Key":"convert length()","Fragments":["to"]},{"Key":"length() to","Fragments":["int","construct"]},{"Key":"int unless","Fragments":["you"]},{"Key":"need integer.","Fragments":["Use"]},{"Key":"integer. Use","Fragments":["the"]},{"Key":"Use the","Fragments":["proper"]},{"Key":"proper type","Fragments":["size_t"]},{"Key":"type size_t","Fragments":["or"]},{"Key":"size_t or","Fragments":["better"]},{"Key":"good opportunity","Fragments":["to"]},{"Key":" Remember","Fragments":["to"]},{"Key":"nitpick me","Fragments":["back"]},{"Key":"me back","Fragments":[";)","if"]},{"Key":"Thanks krOozer","Fragments":["for"]},{"Key":"krOozer for","Fragments":["your"]},{"Key":"valuable suggestions.","Fragments":["I"]},{"Key":"have uploaded","Fragments":["the","it)"]},{"Key":"uploaded the","Fragments":["new"]},{"Key":"iteration based","Fragments":["on"]},{"Key":"better now.","Fragments":["I"]},{"Key":"kept the","Fragments":["variables","code","`substr`"]},{"Key":"variables isYelling,","Fragments":["isNothing,"]},{"Key":"isYelling, isNothing,","Fragments":["isQuestion,"]},{"Key":"isNothing, isQuestion,","Fragments":["because"]},{"Key":"isQuestion, because","Fragments":["i"]},{"Key":"code self","Fragments":["documenting."]},{"Key":"obvious way","Fragments":["to"]},{"Key":"exercise. Makes","Fragments":["me"]},{"Key":"Makes me","Fragments":["suspicious.."]},{"Key":"me suspicious..","Fragments":["There"]},{"Key":"suspicious.. There","Fragments":["has"]},{"Key":"There has","Fragments":["to"]},{"Key":"Hi. Why","Fragments":["do"]},{"Key":"keep both","Fragments":["\"loud\""]},{"Key":"both \"loud\"","Fragments":["and"]},{"Key":"\"loud\" and","Fragments":["\"quiet\""]},{"Key":"and \"quiet\"","Fragments":["variables?"]},{"Key":"\"quiet\" variables?","Fragments":["They"]},{"Key":"variables? They","Fragments":["should"]},{"Key":"They should","Fragments":["just"]},{"Key":"should just","Fragments":["be","return","include","put"]},{"Key":"always opposite","Fragments":["of"]},{"Key":"opposite of","Fragments":["each"]},{"Key":"each other.","Fragments":["With","I"]},{"Key":"other. With","Fragments":["that"]},{"Key":"With that","Fragments":["said,","you"]},{"Key":"that said,","Fragments":["perhaps"]},{"Key":"said, perhaps","Fragments":["one"]},{"Key":"the \"if\"","Fragments":["in"]},{"Key":"\"if\" in","Fragments":["second"]},{"Key":"in second","Fragments":["while"]},{"Key":"second while","Fragments":["loop"]},{"Key":"Hi. Very","Fragments":["concise,"]},{"Key":"concise, just","Fragments":["the"]},{"Key":"of for","Fragments":["loop","loops"]},{"Key":"is bit","Fragments":["hairy."]},{"Key":"bit hairy.","Fragments":["Perhaps"]},{"Key":"hairy. Perhaps","Fragments":["use"]},{"Key":"Perhaps use","Fragments":["\"char"]},{"Key":"use \"char","Fragments":["c\""]},{"Key":"c\" variable","Fragments":["for"]},{"Key":"for \"sentence[i]\"","Fragments":["so"]},{"Key":"\"sentence[i]\" so","Fragments":["you"]},{"Key":"you dont","Fragments":["need"]},{"Key":"dont need","Fragments":["to"]},{"Key":"to repeat","Fragments":["it"]},{"Key":"repeat it","Fragments":["so"]},{"Key":"test ```","Fragments":["(sentence[i]"]},{"Key":"``` (sentence[i]","Fragments":["\u003c="]},{"Key":"(sentence[i] \u003c=","Fragments":["'z'","'Z'"]},{"Key":"\u003c= 'z'","Fragments":["\u0026\u0026"]},{"Key":"'z' \u0026\u0026","Fragments":["sentence[i]"]},{"Key":"\u0026\u0026 sentence[i]","Fragments":["\u003e=","\u003e="]},{"Key":"sentence[i] \u003e=","Fragments":["'a')","'A')"]},{"Key":"\u003e= 'a')","Fragments":["||"]},{"Key":"'a') ||","Fragments":["(sentence[i]"]},{"Key":"|| (sentence[i]","Fragments":["\u003c="]},{"Key":"'Z' \u0026\u0026","Fragments":["sentence[i]"]},{"Key":"\u003e= 'A')","Fragments":["```"]},{"Key":"'A') ```","Fragments":["twice"]},{"Key":"``` twice","Fragments":["-"]},{"Key":"twice -","Fragments":["I"]},{"Key":"I sugest","Fragments":["you"]},{"Key":"sugest you","Fragments":["use"]},{"Key":"use bool","Fragments":["variable"]},{"Key":"same performance","Fragments":["optimization"]},{"Key":"performance optimization","Fragments":["in"]},{"Key":"combine all","Fragments":["the"]},{"Key":"one procedural","Fragments":["function."]},{"Key":"procedural function.","Fragments":["Guess"]},{"Key":"function. Guess","Fragments":["great"]},{"Key":"Guess great","Fragments":["minds"]},{"Key":"great minds","Fragments":["think"]},{"Key":"minds think","Fragments":["alike!"]},{"Key":"think alike!","Fragments":[":P"]},{"Key":"nitpick something,","Fragments":["I'd"]},{"Key":"something, I'd","Fragments":["say"]},{"Key":"the width","Fragments":["of"]},{"Key":"width of","Fragments":["any"]},{"Key":"any specific","Fragments":["line"]},{"Key":"specific line","Fragments":["to"]},{"Key":"line to","Fragments":["80"]},{"Key":"to 80","Fragments":["characters"]},{"Key":"80 characters","Fragments":["or"]},{"Key":"characters or","Fragments":["less"]},{"Key":"less (I'm","Fragments":["looking"]},{"Key":"(I'm looking","Fragments":["at"]},{"Key":"the multiline","Fragments":["comment"]},{"Key":"multiline comment","Fragments":["from"]},{"Key":"comment from","Fragments":["line"]},{"Key":"line 4","Fragments":["-"]},{"Key":"- line","Fragments":["7)."]},{"Key":"line 7).","Fragments":["Just"]},{"Key":"7). Just","Fragments":["a"]},{"Key":"of style","Fragments":["preferences,","that","I"]},{"Key":"style preferences,","Fragments":["but"]},{"Key":"preferences, but","Fragments":["it"]},{"Key":"of preventing","Fragments":["others"]},{"Key":"preventing others","Fragments":["from"]},{"Key":"to scroll","Fragments":["horizontally"]},{"Key":"scroll horizontally","Fragments":["to"]},{"Key":"horizontally to","Fragments":["read"]},{"Key":"that comment,","Fragments":["and"]},{"Key":"comment, and","Fragments":["would"]},{"Key":"code display","Fragments":["nicely"]},{"Key":"display nicely","Fragments":["on"]},{"Key":"nicely on","Fragments":["a"]},{"Key":"standard 80x24","Fragments":["terminal/editing"]},{"Key":"80x24 terminal/editing","Fragments":["environment."]},{"Key":" Yikes!","Fragments":["back"]},{"Key":"Yikes! back","Fragments":["jumps"]},{"Key":"back jumps","Fragments":["with"]},{"Key":"jumps with","Fragments":["goto?"]},{"Key":"with goto?","Fragments":["Maaaaaybe"]},{"Key":"goto? Maaaaaybe","Fragments":["not"]},{"Key":"Maaaaaybe not","Fragments":["especially"]},{"Key":"not especially","Fragments":["since"]},{"Key":"since If","Fragments":["I'm"]},{"Key":"learn assembly","Fragments":["it'd"]},{"Key":"assembly it'd","Fragments":["be"]},{"Key":"be x86/ARM/MIPS","Fragments":["well"]},{"Key":"x86/ARM/MIPS well","Fragments":["before"]},{"Key":"well before","Fragments":["imaginary"]},{"Key":"before imaginary","Fragments":["haha."]},{"Key":"imaginary haha.","Fragments":["Tonight"]},{"Key":"haha. Tonight","Fragments":["I"]},{"Key":"Tonight I","Fragments":["really"]},{"Key":"really will","Fragments":["upload"]},{"Key":"will upload","Fragments":["a"]},{"Key":"iteration though","Fragments":[":P"]},{"Key":" \u003cli\u003e`std::sort`","Fragments":["has"]},{"Key":"\u003cli\u003e`std::sort` has","Fragments":["been"]},{"Key":"and contains","Fragments":["the","some"]},{"Key":"same amount","Fragments":["of"]},{"Key":"same letters","Fragments":["while"]},{"Key":"letters while","Fragments":["being"]},{"Key":"while being","Fragments":["a"]},{"Key":" hello","Fragments":["krooze,","k-mad."]},{"Key":"bit clearer","Fragments":["in"]},{"Key":"change them","Fragments":["to","to"]},{"Key":"with upper,","Fragments":["but"]},{"Key":"upper, but","Fragments":["no"]},{"Key":"lower is","Fragments":["shouting"]},{"Key":"much (any)","Fragments":["time"]},{"Key":"(any) time","Fragments":["looking"]},{"Key":"time looking","Fragments":["to","it"]},{"Key":"if string","Fragments":["has","is"]},{"Key":"a trim()","Fragments":["function"]},{"Key":"trim() function","Fragments":["yet","in"]},{"Key":"function yet","Fragments":["-"]},{"Key":"yet -","Fragments":["and"]},{"Key":"if functions","Fragments":["already"]},{"Key":"functions already","Fragments":["exist"]},{"Key":"already exist","Fragments":["for","in"]},{"Key":"exist for","Fragments":["the"]},{"Key":"the alphanumeric","Fragments":["detection,"]},{"Key":"alphanumeric detection,","Fragments":["but"]},{"Key":"detection, but","Fragments":["the"]},{"Key":"tests passed,","Fragments":["and"]},{"Key":"passed, and","Fragments":["it's"]},{"Key":"it's Friday,","Fragments":["so"]},{"Key":"Friday, so","Fragments":["I"]},{"Key":"I pressed","Fragments":["the"]},{"Key":"pressed the","Fragments":["big-red-button."]},{"Key":"was fun","Fragments":["to","anyway.","enough."]},{"Key":"fun to","Fragments":["whip"]},{"Key":"to whip","Fragments":["this"]},{"Key":"whip this","Fragments":["out."]},{"Key":"out. Look","Fragments":["forward"]},{"Key":"Look forward","Fragments":["to"]},{"Key":"to feedback","Fragments":["and","from","from","from"]},{"Key":"feedback and","Fragments":["other","I"]},{"Key":" Went","Fragments":["a"]},{"Key":"Went a","Fragments":["little"]},{"Key":"little heavy","Fragments":["with"]},{"Key":"heavy with","Fragments":["the"]},{"Key":"functions trying","Fragments":["to"]},{"Key":"to slim","Fragments":["down"]},{"Key":"slim down","Fragments":["code"]},{"Key":"down code","Fragments":["and"]},{"Key":"not rely","Fragments":["too"]},{"Key":"rely too","Fragments":["heavily"]},{"Key":"too heavily","Fragments":["on"]},{"Key":"on loops","Fragments":["and"]},{"Key":"the 80","Fragments":["character","char"]},{"Key":"80 character","Fragments":["limit."]},{"Key":"character limit.","Fragments":["I"]},{"Key":"limit. I","Fragments":["threw"]},{"Key":"I threw","Fragments":["that"]},{"Key":"threw that","Fragments":["comment"]},{"Key":"that comment","Fragments":["in"]},{"Key":"last second.","Fragments":["I"]},{"Key":"second. I","Fragments":["just"]},{"Key":"enable the","Fragments":["80"]},{"Key":"80 char","Fragments":["line"]},{"Key":"char line","Fragments":["in"]},{"Key":"line in","Fragments":["my","the"]},{"Key":"editor and","Fragments":["I"]},{"Key":"won't forget","Fragments":["next"]},{"Key":"forget next","Fragments":["time."]},{"Key":"Nice, i","Fragments":["didn't"]},{"Key":"know ```first_kday_after```","Fragments":["at"]},{"Key":"```first_kday_after``` at","Fragments":["all!"]},{"Key":"iteration 12","Fragments":["is"]},{"Key":"12 is","Fragments":["a"]},{"Key":"better algorithm,","Fragments":["but"]},{"Key":"algorithm, but","Fragments":["wanted"]},{"Key":"but wanted","Fragments":["to"]},{"Key":"ranged 'for'","Fragments":["to"]},{"Key":"'for' to","Fragments":["see"]},{"Key":"your yelling()","Fragments":["method"]},{"Key":"yelling() method","Fragments":["almost"]},{"Key":"method almost","Fragments":["solves"]},{"Key":"almost solves","Fragments":["the"]},{"Key":" line","Fragments":["58","down"]},{"Key":"line 58","Fragments":["return"]},{"Key":"58 return","Fragments":["alpha_found,"]},{"Key":"is either","Fragments":["yelling,"]},{"Key":"either yelling,","Fragments":["or"]},{"Key":"yelling, or","Fragments":["all"]},{"Key":"or all","Fragments":["white"]},{"Key":"all white","Fragments":["space,"]},{"Key":"white space,","Fragments":["if","you","for"]},{"Key":"space, if","Fragments":["you"]},{"Key":"just change","Fragments":["the"]},{"Key":"method, you","Fragments":["wouldn't"]},{"Key":"the saysNothing()","Fragments":["method"]},{"Key":"saysNothing() method","Fragments":["anymore."]},{"Key":"if numAlphas==0,","Fragments":["is"]},{"Key":"numAlphas==0, is","Fragments":["that"]},{"Key":"for (numSpaces","Fragments":["=="]},{"Key":"(numSpaces ==","Fragments":["conv.length());"]},{"Key":" if(letter","Fragments":["=="]},{"Key":"if(letter ==","Fragments":["'"]},{"Key":" //Counting","Fragments":["the"]},{"Key":"//Counting the","Fragments":["number"]},{"Key":"the suggestion.","Fragments":["\"numAlphas==0\"","I'll"]},{"Key":"suggestion. \"numAlphas==0\"","Fragments":["doesn't"]},{"Key":"\"numAlphas==0\" doesn't","Fragments":["work"]},{"Key":"cases when","Fragments":["input"]},{"Key":"when input","Fragments":["has"]},{"Key":"has numbers,","Fragments":["puntuations"]},{"Key":"numbers, puntuations","Fragments":["etc."]},{"Key":"puntuations etc.","Fragments":["Since"]},{"Key":"etc. Since","Fragments":["I"]},{"Key":"using isupper()","Fragments":["and"]},{"Key":"isupper() and","Fragments":["isalpha(),"]},{"Key":"and isalpha(),","Fragments":["both"]},{"Key":"isalpha(), both","Fragments":["of"]},{"Key":"true for","Fragments":["alphabits","alphanumeric","non-letter","non-letter"]},{"Key":"for alphabits","Fragments":["only."]},{"Key":"alphabits only.","Fragments":["I"]},{"Key":"only. I","Fragments":["could've","just"]},{"Key":"could've using","Fragments":["isalnum(),"]},{"Key":"using isalnum(),","Fragments":["which"]},{"Key":"isalnum(), which","Fragments":["will"]},{"Key":"for alphanumeric","Fragments":["caracters,","characters"]},{"Key":"alphanumeric caracters,","Fragments":["but"]},{"Key":"caracters, but","Fragments":["then"]},{"Key":"can't distinguish","Fragments":["between"]},{"Key":"between uppercase","Fragments":["and"]},{"Key":"uppercase and","Fragments":["lowercase","return"]},{"Key":"and lowercase","Fragments":["numbers,"]},{"Key":"lowercase numbers,","Fragments":["coz"]},{"Key":"numbers, coz","Fragments":["they"]},{"Key":"coz they","Fragments":["are"]},{"Key":"same and","Fragments":["isupper()"]},{"Key":"and isupper()","Fragments":["will"]},{"Key":"isupper() will","Fragments":["return"]},{"Key":"false for","Fragments":["them."]},{"Key":"for them.","Fragments":["So"]},{"Key":"my input","Fragments":["is"]},{"Key":"not empty,","Fragments":["i"]},{"Key":"empty, i","Fragments":["will"]},{"Key":"up interpreting","Fragments":["that"]},{"Key":"interpreting that","Fragments":["as"]},{"Key":"as empty.","Fragments":["Also"]},{"Key":"empty. Also","Fragments":["isNothing"]},{"Key":"Also isNothing","Fragments":["is"]},{"Key":"isNothing is","Fragments":["not"]},{"Key":"good name","Fragments":["I"]},{"Key":"name I","Fragments":["guess,"]},{"Key":"guess, coz","Fragments":["it"]},{"Key":"coz it","Fragments":["checks"]},{"Key":"it checks","Fragments":["if","if"]},{"Key":"of space","Fragments":["charaters."]},{"Key":"space charaters.","Fragments":["Thanks."]},{"Key":"tried serveral","Fragments":["approaches"]},{"Key":"serveral approaches","Fragments":["for"]},{"Key":"approaches for","Fragments":["this"]},{"Key":"exercise. This","Fragments":["is"]},{"Key":"time I'","Fragments":["m"]},{"Key":"I' m","Fragments":["using"]},{"Key":"m using","Fragments":["regular"]},{"Key":"expression. I","Fragments":["still"]},{"Key":"still got","Fragments":["problems","a","a"]},{"Key":"got problems","Fragments":["to"]},{"Key":"for \"asking","Fragments":["a"]},{"Key":"\"asking a","Fragments":["question\""]},{"Key":"question\" and","Fragments":["\"saying"]},{"Key":"and \"saying","Fragments":["anything\"."]},{"Key":"\"saying anything\".","Fragments":["I"]},{"Key":"anything\". I","Fragments":["trespassed"]},{"Key":"I trespassed","Fragments":["the"]},{"Key":"trespassed the","Fragments":["tests"]},{"Key":"tests using","Fragments":["the"]},{"Key":"if expressions","Fragments":["because"]},{"Key":"expressions because","Fragments":["the"]},{"Key":"for \"shouting\"","Fragments":["and"]},{"Key":"\"shouting\" and","Fragments":["\"nothing\""]},{"Key":"and \"nothing\"","Fragments":["work"]},{"Key":"\"nothing\" work","Fragments":["as"]},{"Key":"I've allready","Fragments":["checked"]},{"Key":"allready checked","Fragments":["other"]},{"Key":"checked other","Fragments":["solutions"]},{"Key":"solutions and","Fragments":["there"]},{"Key":"easier then","Fragments":["mine."]},{"Key":"then mine.","Fragments":["Maybe"]},{"Key":"I'll drop","Fragments":["the"]},{"Key":"solution looks","Fragments":["so","good,","pretty"]},{"Key":"looks so","Fragments":["easy"]},{"Key":"so easy","Fragments":["compared","to"]},{"Key":"easy compared","Fragments":["to"]},{"Key":"to mine.","Fragments":["At"]},{"Key":"mine. At","Fragments":["least"]},{"Key":"least you","Fragments":["are"]},{"Key":"the \"else","Fragments":["if\""]},{"Key":"if\" for","Fragments":["phrases"]},{"Key":"for phrases","Fragments":["which"]},{"Key":"phrases which","Fragments":["would"]},{"Key":"would match","Fragments":["more"]},{"Key":"match more","Fragments":["then"]},{"Key":"more then","Fragments":["once."]},{"Key":"then once.","Fragments":["Seems"]},{"Key":"once. Seems","Fragments":["legal."]},{"Key":"Seems legal.","Fragments":["I"]},{"Key":"legal. I","Fragments":["like"]},{"Key":"bob class.","Fragments":["I"]},{"Key":"Yes, thats","Fragments":["a"]},{"Key":"thats a","Fragments":["good"]},{"Key":"point. There","Fragments":["is"]},{"Key":"extra type.","Fragments":["Thank"]},{"Key":"type. Thank","Fragments":["you."]},{"Key":"this site,","Fragments":["so"]},{"Key":"site, so","Fragments":["forgive"]},{"Key":"so forgive","Fragments":["me"]},{"Key":"forgive me","Fragments":["if"]},{"Key":"am overly","Fragments":["nit-picky."]},{"Key":"the phraseType","Fragments":["type?"]},{"Key":"phraseType type?","Fragments":["It"]},{"Key":"type? It","Fragments":["seems"]},{"Key":"save quite","Fragments":["a"]},{"Key":"the actions","Fragments":["of"]},{"Key":"actions of","Fragments":["the"]},{"Key":"switch block","Fragments":["into"]},{"Key":"block into","Fragments":["the"]},{"Key":"the section","Fragments":["that"]},{"Key":"section that","Fragments":["determines"]},{"Key":"that determines","Fragments":["the"]},{"Key":"you've speeded","Fragments":["it"]},{"Key":"speeded it","Fragments":["up"]},{"Key":"`if (e.second.size()","Fragments":["=="]},{"Key":"(e.second.size() ==","Fragments":["1)`"]},{"Key":"== 1)`","Fragments":["bit"]},{"Key":"1)` bit","Fragments":["(I"]},{"Key":"repeated subtraction","Fragments":["instead.)"]},{"Key":"boost tokenizer.","Fragments":["With","I"]},{"Key":"tokenizer. With","Fragments":["it"]},{"Key":"With it","Fragments":["the"]},{"Key":"solution becomes","Fragments":["trivial."]},{"Key":"looks great.","Fragments":["Why","Only"]},{"Key":"great. Why","Fragments":["not"]},{"Key":"you code","Fragments":["look"]},{"Key":"look less","Fragments":["criptic."]},{"Key":"less criptic.","Fragments":["Like"]},{"Key":" (int_char","Fragments":["\u003e=","\u003e="]},{"Key":"(int_char \u003e=","Fragments":["65","97"]},{"Key":"\u003e= 65","Fragments":["\u0026\u0026"]},{"Key":"65 \u0026\u0026","Fragments":["int_char"]},{"Key":"\u0026\u0026 int_char","Fragments":["\u003c=","\u003c="]},{"Key":"int_char \u003c=","Fragments":["90)","122)"]},{"Key":"\u003c= 90)","Fragments":["--\u003e"]},{"Key":"90) --\u003e","Fragments":["isupper(prompt[i])"]},{"Key":"\u003e= 97","Fragments":["\u0026\u0026"]},{"Key":"97 \u0026\u0026","Fragments":["int_char"]},{"Key":"\u003c= 122)","Fragments":["--\u003e"]},{"Key":"122) --\u003e","Fragments":["isalpha(prompt[i])"]},{"Key":"maybe character","Fragments":["codes"]},{"Key":"character codes","Fragments":["are"]},{"Key":"codes are","Fragments":["implementation"]},{"Key":"implementation dependent,","Fragments":["so"]},{"Key":"dependent, so","Fragments":["above"]},{"Key":"so above","Fragments":["will"]},{"Key":"above will","Fragments":["avoid"]},{"Key":"that dependence","Fragments":["too."]},{"Key":"I've removed","Fragments":["phraseType","the"]},{"Key":"removed phraseType","Fragments":["like"]},{"Key":"phraseType like","Fragments":["suggested."]},{"Key":"like suggested.","Fragments":["There"]},{"Key":"suggested. There","Fragments":["was"]},{"Key":"this enum.","Fragments":["I've"]},{"Key":"enum. I've","Fragments":["removed"]},{"Key":"the prototypes","Fragments":["as"]},{"Key":"prototypes as","Fragments":["well."]},{"Key":"Used the","Fragments":["sieve","explicit"]},{"Key":"sieve from","Fragments":["the"]},{"Key":"the earlier","Fragments":["problem,"]},{"Key":"earlier problem,","Fragments":["but"]},{"Key":"it's unacceptably","Fragments":["slow"]},{"Key":"unacceptably slow","Fragments":["for"]},{"Key":"slow for","Fragments":["numbers"]},{"Key":"numbers larger","Fragments":["than"]},{"Key":"than 10^4.","Fragments":["The"]},{"Key":"10^4. The","Fragments":["last"]},{"Key":"case took","Fragments":["several"]},{"Key":"took several","Fragments":["minutes"]},{"Key":"several minutes","Fragments":["to"]},{"Key":"minutes to","Fragments":["complete.","understand"]},{"Key":" ...well","Fragments":["that"]},{"Key":"...well that","Fragments":["was"]},{"Key":"was silly","Fragments":["of"]},{"Key":"silly of","Fragments":["me."]},{"Key":" @ruben,","Fragments":["finally"]},{"Key":"@ruben, finally","Fragments":["someone"]},{"Key":"finally someone","Fragments":["who"]},{"Key":"who combines","Fragments":["c++"]},{"Key":"combines c++","Fragments":["features"]},{"Key":"c++ features","Fragments":["with"]},{"Key":"features with","Fragments":["fast"]},{"Key":"with fast","Fragments":["algorithms."]},{"Key":"fast algorithms.","Fragments":["most"]},{"Key":"algorithms. most","Fragments":["of"]},{"Key":"seen on","Fragments":["http://exercism.io"]},{"Key":"on http://exercism.io","Fragments":["for"]},{"Key":"http://exercism.io for","Fragments":["anagram"]},{"Key":"anagram use","Fragments":["either"]},{"Key":"either `algorithm::sort()`","Fragments":["(which"]},{"Key":"`algorithm::sort()` (which","Fragments":["is"]},{"Key":"is O(n*log2(n)))","Fragments":["or"]},{"Key":"O(n*log2(n))) or","Fragments":["`algorithm::is_permutation()`"]},{"Key":"or `algorithm::is_permutation()`","Fragments":["(which"]},{"Key":"`algorithm::is_permutation()` (which","Fragments":["is"]},{"Key":" @cameron,","Fragments":["be"]},{"Key":"@cameron, be","Fragments":["careful"]},{"Key":"careful O(N^2","Fragments":[")"]},{"Key":"O(N^2 )","Fragments":["is"]},{"Key":") is","Fragments":["_worse_"]},{"Key":"is _worse_","Fragments":["than"]},{"Key":"_worse_ than","Fragments":["O(N*log(N))."]},{"Key":"than O(N*log(N)).","Fragments":["imo"]},{"Key":"O(N*log(N)). imo","Fragments":["the"]},{"Key":"imo the","Fragments":["problem"]},{"Key":"problem can","Fragments":["be"]},{"Key":"solved in","Fragments":["O(N)."]},{"Key":"in O(N).","Fragments":["you"]},{"Key":"O(N). you","Fragments":["can"]},{"Key":"solution, which","Fragments":["I"]},{"Key":"think works","Fragments":["in"]},{"Key":"O(N) time","Fragments":["complexity."]},{"Key":"time complexity.","Fragments":["one","it"]},{"Key":"complexity. one","Fragments":["more"]},{"Key":"more thing,","Fragments":["since","since"]},{"Key":"thing, since","Fragments":["my","you"]},{"Key":"since my","Fragments":["solution"]},{"Key":"solution counts","Fragments":["the"]},{"Key":"counts the","Fragments":["occurences"]},{"Key":"the occurences","Fragments":["of"]},{"Key":"occurences of","Fragments":["charactes,"]},{"Key":"of charactes,","Fragments":["it"]},{"Key":"charactes, it","Fragments":["uses"]},{"Key":"ascii byte","Fragments":["that"]},{"Key":"byte that","Fragments":["encodes"]},{"Key":"that encodes","Fragments":["the"]},{"Key":"encodes the","Fragments":["character"]},{"Key":"as _index_","Fragments":["in"]},{"Key":"_index_ in","Fragments":["an"]},{"Key":"an array;","Fragments":["for"]},{"Key":"array; for","Fragments":["more"]},{"Key":"complex objects","Fragments":["a"]},{"Key":"objects a","Fragments":["map\u003c\u003e"]},{"Key":"a map\u003c\u003e","Fragments":["may"]},{"Key":"map\u003c\u003e may","Fragments":["be"]},{"Key":"looks good!","Fragments":["Its"]},{"Key":"good! Its","Fragments":["very"]},{"Key":"Its very","Fragments":["modular"]},{"Key":"very modular","Fragments":["and"]},{"Key":"makes good","Fragments":["use"]},{"Key":"and std","Fragments":["libraries."]},{"Key":"std libraries.","Fragments":["My"]},{"Key":"libraries. My","Fragments":["two"]},{"Key":"My two","Fragments":["nits"]},{"Key":"two nits","Fragments":["are:"]},{"Key":"line 9","Fragments":["is"]},{"Key":"9 is","Fragments":["not"]},{"Key":"not accurate.","Fragments":["Shouting"]},{"Key":"accurate. Shouting","Fragments":["does"]},{"Key":"Shouting does","Fragments":["not"]},{"Key":"in \"!\"","Fragments":["or"]},{"Key":"\"!\" or","Fragments":["\"?\"."]},{"Key":"2) Can","Fragments":["you"]},{"Key":"you infer","Fragments":["the"]},{"Key":"infer the","Fragments":["return"]},{"Key":"of isSayingAnything","Fragments":["from"]},{"Key":"isSayingAnything from","Fragments":["that"]},{"Key":"of isNothingToSay?","Fragments":["Further,"]},{"Key":"isNothingToSay? Further,","Fragments":["could"]},{"Key":"Further, could","Fragments":["you"]},{"Key":"last \"else","Fragments":["if\""]},{"Key":"if\" just","Fragments":["an"]},{"Key":"an \"else\"?","Fragments":["From"]},{"Key":"\"else\"? From","Fragments":["my"]},{"Key":"From my","Fragments":["interpretation"]},{"Key":"my interpretation","Fragments":["of"]},{"Key":"the readme,","Fragments":["Bob"]},{"Key":"readme, Bob","Fragments":["should"]},{"Key":"Bob should","Fragments":["still"]},{"Key":"still say","Fragments":["\"Whatever.\""]},{"Key":"say \"Whatever.\"","Fragments":["if"]},{"Key":"\"Whatever.\" if","Fragments":["none","no"]},{"Key":"if none","Fragments":["of"]},{"Key":"conditionals are","Fragments":["satisfied."]},{"Key":"Following atifhans's","Fragments":["suggestion,"]},{"Key":"atifhans's suggestion,","Fragments":["I"]},{"Key":"functions isupper","Fragments":["and"]},{"Key":"isupper and","Fragments":["islower"]},{"Key":"and islower","Fragments":["instead"]},{"Key":"islower instead","Fragments":["of","of"]},{"Key":"of converting","Fragments":["the"]},{"Key":"ASCII character","Fragments":["to"]},{"Key":"integer. To","Fragments":["avoid"]},{"Key":"some compiler","Fragments":["warnings,"]},{"Key":"warnings, I","Fragments":["am"]},{"Key":"of character","Fragments":["arrays."]},{"Key":"no best","Fragments":["case"]},{"Key":"best case","Fragments":["linear"]},{"Key":"case linear","Fragments":["solution"]},{"Key":"linear solution","Fragments":["to"]},{"Key":"because any","Fragments":["iteration"]},{"Key":"any iteration","Fragments":["has"]},{"Key":"iteration has","Fragments":["to"]},{"Key":"2 iterations","Fragments":["over"]},{"Key":"over 2","Fragments":["sets"]},{"Key":"2 sets","Fragments":["of"]},{"Key":"sets of","Fragments":["N"]},{"Key":"of N","Fragments":["ofjects","compares"]},{"Key":"N ofjects","Fragments":["(N^(3))"]},{"Key":"ofjects (N^(3))","Fragments":["and"]},{"Key":"(N^(3)) and","Fragments":["even"]},{"Key":"iteration it","Fragments":["done","made"]},{"Key":"it done","Fragments":["once","several"]},{"Key":"done once","Fragments":["it"]},{"Key":"must go","Fragments":["through"]},{"Key":"through 1","Fragments":["iteration"]},{"Key":"1 iteration","Fragments":["of"]},{"Key":"N compares","Fragments":["on"]},{"Key":"each N","Fragments":["objects"]},{"Key":"N objects","Fragments":["against"]},{"Key":"objects against","Fragments":["(N^(2))"]},{"Key":"against (N^(2))","Fragments":["since"]},{"Key":"(N^(2)) since","Fragments":["each"]},{"Key":"first sequence","Fragments":["must"]},{"Key":"sequence must","Fragments":["be"]},{"Key":"compared with","Fragments":["every"]},{"Key":"with every","Fragments":["letter"]},{"Key":"the second.","Fragments":["The","There"]},{"Key":"second. The","Fragments":["difference"]},{"Key":"difference with","Fragments":["`std::is_permutation"]},{"Key":"with `std::is_permutation","Fragments":["`is"]},{"Key":"`std::is_permutation `is","Fragments":["that"]},{"Key":"`is that","Fragments":["it"]},{"Key":"the ability","Fragments":["to"]},{"Key":"stop early","Fragments":["creating"]},{"Key":"early creating","Fragments":["linear"]},{"Key":"creating linear","Fragments":["time"]},{"Key":"is arranged","Fragments":["whereas"]},{"Key":"arranged whereas","Fragments":["sort"]},{"Key":"whereas sort","Fragments":["did"]},{"Key":"sort did","Fragments":["not"]},{"Key":"not and","Fragments":["would"]},{"Key":"would check","Fragments":["all"]},{"Key":"check all","Fragments":["elements","characters."]},{"Key":"all elements","Fragments":["regardless."]},{"Key":"elements regardless.","Fragments":["Do"]},{"Key":"regardless. Do","Fragments":["you"]},{"Key":"you agree?","Fragments":["but"]},{"Key":"agree? but","Fragments":["I"]},{"Key":"the flaw","Fragments":["in"]},{"Key":"flaw in","Fragments":["the"]},{"Key":"the design.","Fragments":["I'll"]},{"Key":"design. I'll","Fragments":["consider"]},{"Key":"I'll consider","Fragments":["different"]},{"Key":"consider different","Fragments":["algorithms"]},{"Key":"different algorithms","Fragments":["when"]},{"Key":"algorithms when","Fragments":["I"]},{"Key":"home such","Fragments":["as"]},{"Key":"the `std::equal`","Fragments":["that"]},{"Key":"`std::equal` that","Fragments":["you"]},{"Key":"used which","Fragments":["has"]},{"Key":"has much","Fragments":["better"]},{"Key":"better time.","Fragments":["__Thanks!__"]},{"Key":" Comments","Fragments":["can"]},{"Key":"Comments can","Fragments":["be"]},{"Key":"be fixed.","Fragments":["No"]},{"Key":"fixed. No","Fragments":["problem."]},{"Key":"No problem.","Fragments":["Done."]},{"Key":"About your","Fragments":["second"]},{"Key":"second thought.","Fragments":["If"]},{"Key":"thought. If","Fragments":["I"]},{"Key":"condition to","Fragments":["an"]},{"Key":"else I","Fragments":["also"]},{"Key":"also could","Fragments":["remove"]},{"Key":"the \"isSayingAnything\"-method.","Fragments":["Another"]},{"Key":"\"isSayingAnything\"-method. Another","Fragments":["possibility"]},{"Key":"possibility would","Fragments":["be"]},{"Key":"initialize bobsAnswer","Fragments":["to"]},{"Key":"bobsAnswer to","Fragments":["\"Whatever.\","]},{"Key":"to \"Whatever.\",","Fragments":["then"]},{"Key":"\"Whatever.\", then","Fragments":["there"]},{"Key":"last condition","Fragments":["at"]},{"Key":"condition at","Fragments":["all."]},{"Key":"mean in","Fragments":["your"]},{"Key":"first question","Fragments":["in"]},{"Key":" (What","Fragments":["I"]},{"Key":"(What I","Fragments":["see"]},{"Key":"see right","Fragments":["now,"]},{"Key":"now, my","Fragments":["nameing"]},{"Key":"my nameing","Fragments":["isn't"]},{"Key":"nameing isn't","Fragments":["very"]},{"Key":"good for","Fragments":["this"]},{"Key":"this two","Fragments":["conditions.)"]},{"Key":"mean is","Fragments":["that"]},{"Key":"if isSayingAnything","Fragments":["returns"]},{"Key":"isSayingAnything returns","Fragments":["true,"]},{"Key":"returns true,","Fragments":["then"]},{"Key":"true, then","Fragments":["isNothingToSay"]},{"Key":"then isNothingToSay","Fragments":["returns"]},{"Key":"isNothingToSay returns","Fragments":["false,"]},{"Key":"returns false,","Fragments":["and"]},{"Key":"false, and","Fragments":["vice"]},{"Key":"versa. I","Fragments":["could"]},{"Key":"wrong because","Fragments":["I"]},{"Key":"boost regex","Fragments":["syntax.","libraries."]},{"Key":"regex syntax.","Fragments":["If"]},{"Key":"syntax. If","Fragments":["you"]},{"Key":"that method,","Fragments":["then"]},{"Key":"method, then","Fragments":["it"]},{"Key":" @aliya,","Fragments":["leaving"]},{"Key":"@aliya, leaving","Fragments":["apart"]},{"Key":"leaving apart","Fragments":["all"]},{"Key":"apart all","Fragments":["the"]},{"Key":"algorithms offered","Fragments":["by"]},{"Key":"offered by","Fragments":["c++"]},{"Key":"by c++","Fragments":["and"]},{"Key":"problem purely","Fragments":["from"]},{"Key":"purely from","Fragments":["an"]},{"Key":"algorithm analysis","Fragments":["point"]},{"Key":"analysis point","Fragments":["of"]},{"Key":"view, here","Fragments":["is"]},{"Key":" 1st","Fragments":["step:"]},{"Key":"1st step:","Fragments":["computing"]},{"Key":"step: computing","Fragments":["the"]},{"Key":"computing the","Fragments":["character","overall"]},{"Key":"character occurences","Fragments":["in","in"]},{"Key":"occurences in","Fragments":["the","the"]},{"Key":"original word.","Fragments":["this"]},{"Key":"word. this","Fragments":["can"]},{"Key":"considered as","Fragments":["a"]},{"Key":"even taken","Fragments":["into"]},{"Key":"taken into","Fragments":["account"]},{"Key":"account when","Fragments":["computing"]},{"Key":"when computing","Fragments":["the"]},{"Key":"overall time","Fragments":["complexity."]},{"Key":"complexity. it","Fragments":["is"]},{"Key":"2nd step:","Fragments":["for"]},{"Key":"step: for","Fragments":["all"]},{"Key":"input would-be","Fragments":["anagrams"]},{"Key":"would-be anagrams","Fragments":["do:"]},{"Key":" a.","Fragments":["compute"]},{"Key":"a. compute","Fragments":["the"]},{"Key":"anagram storing","Fragments":["the"]},{"Key":"result into","Fragments":["a"]},{"Key":"vector -","Fragments":["O(len(would-be"]},{"Key":"- O(len(would-be","Fragments":["anagram))","anagram))."]},{"Key":" b.","Fragments":["compare"]},{"Key":"b. compare","Fragments":["the"]},{"Key":"from 1st","Fragments":["step"]},{"Key":"1st step","Fragments":["with"]},{"Key":"step with","Fragments":["the"]},{"Key":"from 2nd","Fragments":["step,"]},{"Key":"2nd step,","Fragments":["a."]},{"Key":"step, a.","Fragments":["-"]},{"Key":"a. -","Fragments":["O(len(would-be"]},{"Key":"O(len(would-be anagram)).","Fragments":["if"]},{"Key":"anagram)). if","Fragments":["these"]},{"Key":"if these","Fragments":["vectors","strings"]},{"Key":"these vectors","Fragments":["are"]},{"Key":"vectors are","Fragments":["equal,"]},{"Key":"are equal,","Fragments":["this"]},{"Key":"equal, this","Fragments":["is"]},{"Key":" now,","Fragments":["the"]},{"Key":"overall complexity","Fragments":["is","is"]},{"Key":" O(len(word))","Fragments":["+"]},{"Key":"O(len(word)) +","Fragments":["sum(O(len(would_be"]},{"Key":"+ sum(O(len(would_be","Fragments":["anagram_i))"]},{"Key":"a _linear_","Fragments":["function"]},{"Key":"_linear_ function","Fragments":["of"]},{"Key":"2nd step","Fragments":["above"]},{"Key":"step above","Fragments":["uses:"]},{"Key":"* sort()","Fragments":["-"]},{"Key":"sort() -","Fragments":["complexity"]},{"Key":"- complexity","Fragments":["becomes"]},{"Key":"complexity becomes","Fragments":["O(len(would_be"]},{"Key":"becomes O(len(would_be","Fragments":["anagram_i)*log2(len(would_be"]},{"Key":"O(len(would_be anagram_i)*log2(len(would_be","Fragments":["anagram_i)))"]},{"Key":"* is_permutation","Fragments":["-"]},{"Key":"is_permutation -","Fragments":["compexity"]},{"Key":"- compexity","Fragments":["becomes"]},{"Key":"compexity becomes","Fragments":["O(len^2"]},{"Key":"becomes O(len^2","Fragments":["(would_be_anagram_i))"]},{"Key":"a linear","Fragments":["function","search.","search.`","logic"]},{"Key":"linear function","Fragments":["of"]},{"Key":" Rather","Fragments":["than","than","than"]},{"Key":"Rather than","Fragments":["defining","have","introducing"]},{"Key":"defining your","Fragments":["own"]},{"Key":"string word_chars,","Fragments":["you"]},{"Key":"word_chars, you","Fragments":["could"]},{"Key":"function isalnum()","Fragments":["to"]},{"Key":"isalnum() to","Fragments":["tell"]},{"Key":"tell whether","Fragments":["something"]},{"Key":"whether something","Fragments":["is"]},{"Key":"is alphabetic,","Fragments":["numeric,"]},{"Key":"alphabetic, numeric,","Fragments":["or"]},{"Key":"numeric, or","Fragments":["something"]},{"Key":"something else.","Fragments":["The"]},{"Key":"difference would","Fragments":["be"]},{"Key":"underscore _","Fragments":["is"]},{"Key":"_ is","Fragments":["counted"]},{"Key":"is counted","Fragments":["as"]},{"Key":"a separator.","Fragments":["Whether"]},{"Key":"separator. Whether","Fragments":["or"]},{"Key":"Whether or","Fragments":["not"]},{"Key":"not _","Fragments":["should"]},{"Key":"_ should","Fragments":["be"]},{"Key":"is ambiguous","Fragments":["from"]},{"Key":"ambiguous from","Fragments":["the"]},{"Key":"readme and","Fragments":["test"]},{"Key":"Tried to","Fragments":["go","keep","replicate"]},{"Key":"where to","Fragments":["put"]},{"Key":"the std::sort","Fragments":["(line","algorithm"]},{"Key":"std::sort (line","Fragments":["12"]},{"Key":"(line 12","Fragments":["here)."]},{"Key":"12 here).","Fragments":["It"]},{"Key":"here). It","Fragments":["would"]},{"Key":"efficient overall","Fragments":["(probably)"]},{"Key":"overall (probably)","Fragments":["to"]},{"Key":"(probably) to","Fragments":["sort"]},{"Key":"sort just","Fragments":["prior"]},{"Key":"the information,","Fragments":["but"]},{"Key":"information, but","Fragments":["that"]},{"Key":"mean looping","Fragments":["through"]},{"Key":"through keys","Fragments":["in"]},{"Key":"keys in","Fragments":["the"]},{"Key":"function starting","Fragments":["on"]},{"Key":"starting on","Fragments":["line","line"]},{"Key":"line 15.","Fragments":["Also,"]},{"Key":"15. Also,","Fragments":["this"]},{"Key":"Also, this","Fragments":["way"]},{"Key":"correct order","Fragments":["in"]},{"Key":"i misread","Fragments":["that,"]},{"Key":"misread that,","Fragments":["I"]},{"Key":"thinking it","Fragments":["was"]},{"Key":"was alphanumerics,","Fragments":["no"]},{"Key":"alphanumerics, no","Fragments":["alphas,"]},{"Key":"no alphas,","Fragments":["my"]},{"Key":"alphas, my","Fragments":["mistake,"]},{"Key":"my mistake,","Fragments":["of"]},{"Key":"mistake, of","Fragments":["course"]},{"Key":"course that","Fragments":["wouldn't"]},{"Key":"worked with","Fragments":["your","the","many"]},{"Key":"your test","Fragments":["for","for","for","for"]},{"Key":"all capitals","Fragments":["numAlphas"]},{"Key":"capitals numAlphas","Fragments":["=="]},{"Key":"numAlphas ==","Fragments":["numUppers"]},{"Key":"one suggestion,","Fragments":["trivial"]},{"Key":"suggestion, trivial","Fragments":["but"]},{"Key":"trivial but","Fragments":["might"]},{"Key":"only recently","Fragments":["discovered"]},{"Key":"recently discovered","Fragments":["range"]},{"Key":"discovered range","Fragments":["based"]},{"Key":"in c++,","Fragments":["but"]},{"Key":"your char","Fragments":["letter"]},{"Key":"letter before","Fragments":["the"]},{"Key":"then when","Fragments":["you"]},{"Key":"you exit","Fragments":["the"]},{"Key":" won't","Fragments":["letter"]},{"Key":"won't letter","Fragments":["will"]},{"Key":"letter will","Fragments":["be"]},{"Key":" (conv.back()","Fragments":["=="]},{"Key":"(conv.back() ==","Fragments":["'?');"]},{"Key":" letter","Fragments":["=="]},{"Key":"letter ==","Fragments":["'?'"]},{"Key":"much that","Fragments":["really"]},{"Key":"Now, there","Fragments":["is"]},{"Key":"the uncomplete","Fragments":["question-regex"]},{"Key":"uncomplete question-regex","Fragments":["left."]},{"Key":"question-regex left.","Fragments":["Thank"]},{"Key":"left. Thank","Fragments":["you"]},{"Key":"input. I'll","Fragments":["move"]},{"Key":"I'll move","Fragments":["up"]},{"Key":"move up","Fragments":["to"]},{"Key":"next stage","Fragments":["for"]},{"Key":"stage for","Fragments":["now."]},{"Key":"for now.","Fragments":["Maybe"]},{"Key":"now. Maybe","Fragments":["I"]},{"Key":"of creating","Fragments":["a","an","the"]},{"Key":"for handling","Fragments":["whether"]},{"Key":"handling whether","Fragments":["or"]},{"Key":"not \"beer\"","Fragments":["should"]},{"Key":"\"beer\" should","Fragments":["be"]},{"Key":"be plural,","Fragments":["I"]},{"Key":"plural, I","Fragments":["handle"]},{"Key":"I handle","Fragments":["the"]},{"Key":"case individually","Fragments":["in"]},{"Key":"individually in","Fragments":["the"]},{"Key":"the twoBeers","Fragments":["string."]},{"Key":"twoBeers string.","Fragments":["I"]},{"Key":"which cases","Fragments":["would"]},{"Key":"cases would","Fragments":["be"]},{"Key":"considered \"special\"","Fragments":["outside"]},{"Key":"\"special\" outside","Fragments":["the"]},{"Key":"the song,","Fragments":["and"]},{"Key":"song, and","Fragments":["while"]},{"Key":"while handling","Fragments":["the"]},{"Key":"the plurality","Fragments":["case"]},{"Key":"plurality case","Fragments":["seems"]},{"Key":"case seems","Fragments":["like"]},{"Key":"interesting exercise","Fragments":["in"]},{"Key":"itself, it","Fragments":["also"]},{"Key":"like going","Fragments":["down"]},{"Key":"the rabbit","Fragments":["hole"]},{"Key":"rabbit hole","Fragments":["a"]},{"Key":"hole a","Fragments":["little."]},{"Key":" Regex","Fragments":["is"]},{"Key":"if Bob","Fragments":["has"]},{"Key":"Bob has","Fragments":["scope"]},{"Key":"has scope","Fragments":["creep"]},{"Key":"scope creep","Fragments":["and"]},{"Key":"creep and","Fragments":["develops"]},{"Key":"and develops","Fragments":["more"]},{"Key":"develops more","Fragments":["complex"]},{"Key":"are three","Fragments":["different"]},{"Key":"whether `phrase[begin_word]","Fragments":["!="]},{"Key":"`phrase[begin_word] !=","Fragments":["'\\0'`."]},{"Key":"!= '\\0'`.","Fragments":["I"]},{"Key":"'\\0'`. I","Fragments":["feel"]},{"Key":"elegant (i.e.","Fragments":["less"]},{"Key":"(i.e. less","Fragments":["repetitive)"]},{"Key":"less repetitive)","Fragments":["solution."]},{"Key":"if (strand1[i]","Fragments":["!="]},{"Key":"(strand1[i] !=","Fragments":["strand2[i])"]},{"Key":"of line","Fragments":["12.","12."]},{"Key":"line 12.","Fragments":["While","So"]},{"Key":"12. While","Fragments":["that"]},{"Key":"While that","Fragments":["might"]},{"Key":"readable, I","Fragments":["prefer"]},{"Key":"submitted I've","Fragments":["seen"]},{"Key":"seen a","Fragments":["bunch","lot"]},{"Key":"things of","Fragments":["that"]},{"Key":"just seems","Fragments":["like"]},{"Key":"like overkill","Fragments":["to"]},{"Key":"overkill to","Fragments":["me"]},{"Key":"problem. In","Fragments":["the","my"]},{"Key":"the situation","Fragments":["it"]},{"Key":"situation it","Fragments":["seems"]},{"Key":"using .back()","Fragments":["and"]},{"Key":".back() and","Fragments":["then"]},{"Key":"then switching","Fragments":["out"]},{"Key":"switching out","Fragments":["whatever"]},{"Key":"out whatever","Fragments":["punctuation(or"]},{"Key":"whatever punctuation(or","Fragments":["lack"]},{"Key":"punctuation(or lack","Fragments":["thereof)"]},{"Key":"lack thereof)","Fragments":["should"]},{"Key":"thereof) should","Fragments":["do"]},{"Key":"the trick","Fragments":["just","I"]},{"Key":"trick just","Fragments":["fine."]},{"Key":"pretty straightforward.","Fragments":["The","Pretty"]},{"Key":"straightforward. The","Fragments":["boost"]},{"Key":"The boost","Fragments":["library","gregorian"]},{"Key":"library does","Fragments":["all"]},{"Key":"lifting for","Fragments":["me"]},{"Key":"use boost::tokenizer","Fragments":["and"]},{"Key":"boost::tokenizer and","Fragments":["the"]},{"Key":"simpler. check","Fragments":["out"]},{"Key":"submission on","Fragments":["this"]},{"Key":"two files?","Fragments":["Or"]},{"Key":"files? Or","Fragments":["will"]},{"Key":"Or will","Fragments":["I"]},{"Key":"will I","Fragments":["need","then"]},{"Key":"combine my","Fragments":["header"]},{"Key":"my header","Fragments":["file"]},{"Key":"file along","Fragments":["with"]},{"Key":"said, but","Fragments":["I"]},{"Key":"guess Range","Fragments":["based"]},{"Key":"Range based","Fragments":["for"]},{"Key":"loops don't","Fragments":["support"]},{"Key":"support declarations","Fragments":["outside."]},{"Key":"declarations outside.","Fragments":["Anyways"]},{"Key":"outside. Anyways","Fragments":["I"]},{"Key":"Anyways I","Fragments":["feel"]},{"Key":"feel current","Fragments":["implementation"]},{"Key":"current implementation","Fragments":["is"]},{"Key":"readable, in","Fragments":["a"]},{"Key":"are checking","Fragments":["the","for"]},{"Key":"be '?',","Fragments":["which"]},{"Key":"'?', which","Fragments":["may"]},{"Key":"when making","Fragments":["the","one"]},{"Key":"the comparision","Fragments":["that"]},{"Key":"comparision that","Fragments":["you"]},{"Key":"you suggested.","Fragments":["Thanks."]},{"Key":" D'oh,","Fragments":["you're"]},{"Key":"D'oh, you're","Fragments":["right."]},{"Key":"right. empty()","Fragments":["is"]},{"Key":"empty() is","Fragments":["a"]},{"Key":"a stringstream,","Fragments":["but"]},{"Key":"stringstream, but","Fragments":["I"]},{"Key":"It failed","Fragments":["to"]},{"Key":"out all","Fragments":["the","the"]},{"Key":"the punctuation.","Fragments":["Did"]},{"Key":"punctuation. Did","Fragments":["this"]},{"Key":"for you?","Fragments":["If"]},{"Key":"you? If","Fragments":["not,"]},{"Key":"not, maybe","Fragments":["we"]},{"Key":"can extend","Fragments":["one"]},{"Key":"extend one","Fragments":["of"]},{"Key":" Converted","Fragments":["to","from"]},{"Key":"Converted to","Fragments":["a"]},{"Key":"a c_string","Fragments":["because"]},{"Key":"c_string because","Fragments":["it's"]},{"Key":"it's easy","Fragments":["to"]},{"Key":"index through","Fragments":["those."]},{"Key":"through those.","Fragments":["Definitely"]},{"Key":"those. Definitely","Fragments":["curious"]},{"Key":"Definitely curious","Fragments":["about"]},{"Key":"about ways","Fragments":["to"]},{"Key":"to tune","Fragments":["this"]},{"Key":"tune this","Fragments":["code"]},{"Key":"Oh cool","Fragments":["I"]},{"Key":"cool I","Fragments":["can"]},{"Key":"index `string`s","Fragments":["directly"]},{"Key":"your `using`","Fragments":["declaration"]},{"Key":"`using` declaration","Fragments":["to","(eg.","imports"]},{"Key":"declaration to","Fragments":["within","```dna::counter"]},{"Key":"to within","Fragments":["the","```namespace"]},{"Key":"hamming namespace,","Fragments":["and"]},{"Key":"namespace, and","Fragments":["to","I"]},{"Key":"restrict it","Fragments":["to"]},{"Key":"like `using","Fragments":["std::string`"]},{"Key":"std::string` to","Fragments":["avoid"]},{"Key":"avoid namespace","Fragments":["pollution."]},{"Key":"is reasonably","Fragments":["clean"]},{"Key":"reasonably clean","Fragments":["and"]},{"Key":"see comments.","Fragments":["However,"]},{"Key":"comments. However,","Fragments":["there"]},{"Key":"possible improvement","Fragments":["here:"]},{"Key":"Line 6:","Fragments":["`using"]},{"Key":"6: `using","Fragments":["namespace"]},{"Key":"to pollution","Fragments":["of"]},{"Key":"pollution of","Fragments":["the"]},{"Key":"namespace, where","Fragments":["a"]},{"Key":"of identifiers","Fragments":["that"]},{"Key":"identifiers that","Fragments":["aren't"]},{"Key":"aren't used","Fragments":["are"]},{"Key":"used are","Fragments":["being"]},{"Key":"being brought","Fragments":["into"]},{"Key":"scope. Consider","Fragments":["being"]},{"Key":"restrictive with","Fragments":["the"]},{"Key":"declaration (eg.","Fragments":["`using"]},{"Key":"(eg. `using","Fragments":["std::string`),","namespace","std::string`)."]},{"Key":"`using std::string`),","Fragments":["and"]},{"Key":"std::string`), and","Fragments":["moving"]},{"Key":"and moving","Fragments":["the"]},{"Key":"the word_count","Fragments":["namespace.","function","namespace"]},{"Key":"Lines 30-31:","Fragments":["it's"]},{"Key":"30-31: it's","Fragments":["perfectly"]},{"Key":"perfectly fine","Fragments":["to"]},{"Key":"`tolower` without","Fragments":["checking"]},{"Key":"without checking","Fragments":["if"]},{"Key":"Lines 62-63:","Fragments":["you"]},{"Key":"62-63: you","Fragments":["can"]},{"Key":"can increment","Fragments":["the"]},{"Key":"the result[word]","Fragments":["directly"]},{"Key":"a combination","Fragments":["of"]},{"Key":"of searching","Fragments":["for"]},{"Key":"and alphanumeric","Fragments":["characters,"]},{"Key":"alphanumeric characters,","Fragments":["which"]},{"Key":"characters, which","Fragments":["can"]},{"Key":"a slight","Fragments":["loss"]},{"Key":"slight loss","Fragments":["of"]},{"Key":"of generality","Fragments":["(for"]},{"Key":"generality (for","Fragments":["instance,"]},{"Key":"(for instance,","Fragments":["even"]},{"Key":"instance, even","Fragments":["though"]},{"Key":"not tested,","Fragments":["it's"]},{"Key":"tested, it's","Fragments":["reasonable"]},{"Key":"a text","Fragments":["given"]},{"Key":"text given","Fragments":["to"]},{"Key":"word_count function","Fragments":["might"]},{"Key":"function might","Fragments":["use","be","give"]},{"Key":"might use","Fragments":["any","some","an","an","an"]},{"Key":"use any","Fragments":["combination","int"]},{"Key":"any combination","Fragments":["of"]},{"Key":"of `\\r`","Fragments":["and"]},{"Key":"`\\r` and","Fragments":["`\\n`"]},{"Key":"and `\\n`","Fragments":["for"]},{"Key":"`\\n` for","Fragments":["newlines,"]},{"Key":"for newlines,","Fragments":["and"]},{"Key":"newlines, and","Fragments":["might"]},{"Key":"might contain","Fragments":["tabs."]},{"Key":"contain tabs.","Fragments":["The"]},{"Key":"tabs. The","Fragments":["only"]},{"Key":"only characters","Fragments":["that"]},{"Key":"characters that","Fragments":["we"]},{"Key":"about are","Fragments":["alphanumerics,"]},{"Key":"are alphanumerics,","Fragments":["so"]},{"Key":"alphanumerics, so","Fragments":["an"]},{"Key":"so an","Fragments":["alternative"]},{"Key":"alternative strategy","Fragments":["is"]},{"Key":"strategy is","Fragments":["to"]},{"Key":"ending of","Fragments":["alphanumeric"]},{"Key":"of alphanumeric","Fragments":["sequences"]},{"Key":"alphanumeric sequences","Fragments":["within"]},{"Key":"sequences within","Fragments":["the"]},{"Key":"last point","Fragments":["is"]},{"Key":"point is","Fragments":["that"]},{"Key":"that some","Fragments":["of"]},{"Key":"of parsing","Fragments":["the","the"]},{"Key":"text could","Fragments":["be"]},{"Key":"be offloaded","Fragments":["to"]},{"Key":"offloaded to","Fragments":["helper"]},{"Key":"functions, with","Fragments":["a"]},{"Key":"a single,","Fragments":["defined"]},{"Key":"single, defined","Fragments":["purpose,"]},{"Key":"defined purpose,","Fragments":["such"]},{"Key":"purpose, such","Fragments":["as"]},{"Key":"as extracting","Fragments":["a"]},{"Key":"extracting a","Fragments":["list"]},{"Key":"the text,","Fragments":["or"]},{"Key":"text, or","Fragments":["identifying"]},{"Key":"or identifying","Fragments":["the"]},{"Key":"identifying the","Fragments":["indices","words"]},{"Key":"the indices","Fragments":["of"]},{"Key":"Also, strLenght","Fragments":["has"]},{"Key":"strLenght has","Fragments":["a"]},{"Key":"a spelling","Fragments":["mistake"]},{"Key":"spelling mistake","Fragments":[";)"]},{"Key":"is incredibly","Fragments":["expressive"]},{"Key":"incredibly expressive","Fragments":["and"]},{"Key":"expressive and","Fragments":["easy"]},{"Key":"read, thanks","Fragments":["to","to"]},{"Key":"to well-placed","Fragments":["comments"]},{"Key":"well-placed comments","Fragments":["and"]},{"Key":"and aptly","Fragments":["chosen"]},{"Key":"aptly chosen","Fragments":["variable"]},{"Key":"chosen variable","Fragments":["names."]},{"Key":"`using` declarations","Fragments":["are","within","within"]},{"Key":"are restrictive,","Fragments":["avoiding"]},{"Key":"restrictive, avoiding","Fragments":["namespace"]},{"Key":"avoiding namespace","Fragments":["pollution."]},{"Key":"namespace pollution.","Fragments":["One"]},{"Key":"pollution. One","Fragments":["alternative"]},{"Key":"One alternative","Fragments":["to"]},{"Key":"declarations within","Fragments":["the","the"]},{"Key":"It's really","Fragments":["nice","good"]},{"Key":"nice that","Fragments":["the"]},{"Key":"of analysing","Fragments":["the"]},{"Key":"analysing the","Fragments":["message"]},{"Key":"message string","Fragments":["is","only"]},{"Key":"passed off","Fragments":["to"]},{"Key":"off to","Fragments":["helper","a"]},{"Key":"functions, each","Fragments":["with"]},{"Key":"a clear","Fragments":["purpose","benefit."]},{"Key":"clear purpose","Fragments":["and"]},{"Key":"purpose and","Fragments":["well-defined","output"]},{"Key":"and well-defined","Fragments":["outputs."]},{"Key":"well-defined outputs.","Fragments":["However,"]},{"Key":"outputs. However,","Fragments":["these"]},{"Key":"However, these","Fragments":["helper"]},{"Key":"these helper","Fragments":["functions"]},{"Key":"are internal","Fragments":["to"]},{"Key":"`hey` function,","Fragments":["so","because"]},{"Key":"could considering","Fragments":["moving"]},{"Key":"considering moving","Fragments":["these"]},{"Key":"moving these","Fragments":["to"]},{"Key":"these to","Fragments":["an","your"]},{"Key":"The `using","Fragments":["WordMap`"]},{"Key":"`using WordMap`","Fragments":["declaration"]},{"Key":"WordMap` declaration","Fragments":["is"]},{"Key":"really cool,","Fragments":["and"]},{"Key":"no namespace","Fragments":["pollution"]},{"Key":"namespace pollution","Fragments":["here"]},{"Key":"pollution here","Fragments":["(eg."]},{"Key":"here (eg.","Fragments":["`using"]},{"Key":"namespace std`)","Fragments":["at"]},{"Key":"std`) at","Fragments":["the"]},{"Key":"file. However,","Fragments":["seeing"]},{"Key":"However, seeing","Fragments":["`std::`s"]},{"Key":"seeing `std::`s","Fragments":["all"]},{"Key":"`std::`s all","Fragments":["over"]},{"Key":"the place","Fragments":["can"]},{"Key":"place can","Fragments":["be"]},{"Key":"be distracting","Fragments":["to"]},{"Key":"the eye,","Fragments":["so"]},{"Key":"eye, so","Fragments":["you"]},{"Key":"consider restrictive","Fragments":["`using`"]},{"Key":"restrictive `using`","Fragments":["declarations"]},{"Key":"word_count namespace","Fragments":["(eg."]},{"Key":"namespace (eg.","Fragments":["`using"]},{"Key":"nicely modular,","Fragments":["with"]},{"Key":"modular, with","Fragments":["separate"]},{"Key":"with separate","Fragments":["functions"]},{"Key":"task (splitting","Fragments":["a"]},{"Key":"(splitting a","Fragments":["string"]},{"Key":"into words,","Fragments":["and"]},{"Key":"words, and","Fragments":["counting"]},{"Key":"and counting","Fragments":["words).","the"]},{"Key":"few comments,","Fragments":["though."]},{"Key":"and clean,","Fragments":["and"]},{"Key":"clean, and","Fragments":["I"]},{"Key":"the isDNA","Fragments":["function,"]},{"Key":"isDNA function,","Fragments":["which"]},{"Key":"the side","Fragments":["effect"]},{"Key":"of stopping","Fragments":["the"]},{"Key":"stopping the","Fragments":["evaluation"]},{"Key":"evaluation at","Fragments":["invalid"]},{"Key":"at invalid","Fragments":["input."]},{"Key":"The isDNA","Fragments":["function"]},{"Key":"isDNA function","Fragments":["doesn't"]},{"Key":"in global","Fragments":["scope,"]},{"Key":"global scope,","Fragments":["but"]},{"Key":"scope, but","Fragments":["it's"]},{"Key":"also correct","Fragments":["that"]},{"Key":"correct that","Fragments":["it","the"]},{"Key":"hamming class.","Fragments":["So,"]},{"Key":"So, you","Fragments":["could","do"]},{"Key":"move `isDNA`","Fragments":["to"]},{"Key":"`isDNA` to","Fragments":["an"]},{"Key":" Next,","Fragments":["the","your"]},{"Key":"Next, the","Fragments":["`using`"]},{"Key":"declaration imports","Fragments":["a"]},{"Key":"imports a","Fragments":["lot"]},{"Key":"names into","Fragments":["the"]},{"Key":"namespace. Consider","Fragments":["putting"]},{"Key":"restrictive `using","Fragments":["std::string`."]},{"Key":"Lastly, is","Fragments":["there"]},{"Key":"a \"hamming","Fragments":["class\"","namespace\"?"]},{"Key":"\"hamming class\"","Fragments":["instead"]},{"Key":"class\" instead","Fragments":["of"]},{"Key":" @liliana","Fragments":["Thanks"]},{"Key":"@liliana Thanks","Fragments":["for"]},{"Key":"at this.","Fragments":["I'm","I"]},{"Key":"this. I'm","Fragments":["getting"]},{"Key":"getting tired","Fragments":["of"]},{"Key":"of seeing","Fragments":["the"]},{"Key":"the std::whatever","Fragments":["here"]},{"Key":"std::whatever here","Fragments":["so"]},{"Key":"pull it","Fragments":["all"]},{"Key":"all out.","Fragments":["And"]},{"Key":"out. And","Fragments":["I"]},{"Key":"your feedback!","Fragments":["In"]},{"Key":"feedback! In","Fragments":["fact"]},{"Key":"fact I'm","Fragments":["thinking"]},{"Key":"thinking to","Fragments":["refactor"]},{"Key":"refactor all","Fragments":["code"]},{"Key":"all code","Fragments":["to"]},{"Key":"improve readability.","Fragments":["Despite"]},{"Key":"readability. Despite","Fragments":["I'm"]},{"Key":"Despite I'm","Fragments":["using"]},{"Key":"perform all","Fragments":["operations","the"]},{"Key":"all operations","Fragments":["I"]},{"Key":"operations I","Fragments":["think"]},{"Key":"little confusing.","Fragments":["I'll"]},{"Key":"confusing. I'll","Fragments":["try"]},{"Key":"to apply","Fragments":["your"]},{"Key":"apply your","Fragments":["suggestions"]},{"Key":"It's cool","Fragments":["that"]},{"Key":"cool that","Fragments":["you"]},{"Key":"your helper","Fragments":["functions","functions","function"]},{"Key":"as `static","Fragments":["private`"]},{"Key":"`static private`","Fragments":["within"]},{"Key":"private` within","Fragments":["the"]},{"Key":"class. However,","Fragments":["I"]},{"Key":"use `bool`","Fragments":["return"]},{"Key":"`bool` return","Fragments":["types,"]},{"Key":"return types,","Fragments":["since"]},{"Key":"types, since","Fragments":["this"]},{"Key":"effectively what","Fragments":["they"]},{"Key":"returning now.","Fragments":["Also,"]},{"Key":"now. Also,","Fragments":["I"]},{"Key":"it helps","Fragments":["expressivity","others","me"]},{"Key":"helps expressivity","Fragments":["to"]},{"Key":"expressivity to","Fragments":["use"]},{"Key":"use names","Fragments":["with"]},{"Key":"with \"is\",","Fragments":["as"]},{"Key":"\"is\", as","Fragments":["in"]},{"Key":"Next, your","Fragments":["`allCaps`"]},{"Key":"your `allCaps`","Fragments":["function"]},{"Key":"`allCaps` function","Fragments":["seems"]},{"Key":"function seems","Fragments":["to"]},{"Key":"be (conceptually)","Fragments":["doing"]},{"Key":"(conceptually) doing","Fragments":["two"]},{"Key":"two jobs:","Fragments":["checking"]},{"Key":"jobs: checking","Fragments":["for"]},{"Key":"alphanumeric characters","Fragments":["and","in"]},{"Key":"characters and","Fragments":["checking","contains","compare"]},{"Key":"is capitals.","Fragments":["This"]},{"Key":"capitals. This","Fragments":["kind"]},{"Key":"This kind","Fragments":["of"]},{"Key":"of gets","Fragments":["into"]},{"Key":"gets into","Fragments":["debating"]},{"Key":"into debating","Fragments":["semantics,"]},{"Key":"debating semantics,","Fragments":["but"]},{"Key":"semantics, but","Fragments":["I"]},{"Key":"it's arguable","Fragments":["whether"]},{"Key":"arguable whether","Fragments":["a"]},{"Key":"non-alphanumeric char","Fragments":["is","is"]},{"Key":"a capital","Fragments":["or"]},{"Key":"capital or","Fragments":["not."]},{"Key":"not. It","Fragments":["might"]},{"Key":"code clearer","Fragments":["to"]},{"Key":"that checks","Fragments":["that"]},{"Key":"are alphanumeric","Fragments":["characters"]},{"Key":"Last, the","Fragments":["helper"]},{"Key":"need their","Fragments":["own"]},{"Key":"own copies","Fragments":["of"]},{"Key":"strings they","Fragments":["analyse,"]},{"Key":"they analyse,","Fragments":["nor"]},{"Key":"analyse, nor","Fragments":["do"]},{"Key":"nor do","Fragments":["they"]},{"Key":"do they","Fragments":["need"]},{"Key":"arguments, so","Fragments":["think"]},{"Key":"so think","Fragments":["about"]},{"Key":"a potentially","Fragments":["better"]},{"Key":"potentially better","Fragments":["parameter"]},{"Key":"better parameter","Fragments":["type"]},{"Key":"use (that","Fragments":["will"]},{"Key":"(that will","Fragments":["boost"]},{"Key":"will boost","Fragments":["performance"]},{"Key":"boost performance","Fragments":["by"]},{"Key":"eliminating unnecessary","Fragments":["copying)."]},{"Key":"Code was","Fragments":["completely"]},{"Key":"was completely","Fragments":["changed"]},{"Key":"completely changed","Fragments":["for"]},{"Key":"changed for","Fragments":["the"]},{"Key":"of simplicity.","Fragments":["Thanks"]},{"Key":"simplicity. Thanks","Fragments":["@terence"]},{"Key":"Thanks @terence","Fragments":["for"]},{"Key":"@terence for","Fragments":["your"]},{"Key":"you fractalic.","Fragments":["I"]},{"Key":"fractalic. I","Fragments":["did"]},{"Key":"anonymous namespaces,","Fragments":["so"]},{"Key":"namespaces, so","Fragments":["I"]},{"Key":"what he","Fragments":["means"]},{"Key":"he means","Fragments":["by"]},{"Key":"means by","Fragments":["\"template"]},{"Key":"by \"template","Fragments":["arguments"]},{"Key":"\"template arguments","Fragments":["cannot"]},{"Key":"arguments cannot","Fragments":["be"]},{"Key":"be names","Fragments":["with"]},{"Key":"internal linkage\",","Fragments":["I"]},{"Key":"linkage\", I","Fragments":["appreciate"]},{"Key":"with global","Fragments":["namespace"]},{"Key":"namespace pollution,","Fragments":["so"]},{"Key":"pollution, so","Fragments":["I"]},{"Key":"change my","Fragments":["program","code!"]},{"Key":"my program","Fragments":["accordingly."]},{"Key":"originally split","Fragments":["these"]},{"Key":"split these","Fragments":["up"]},{"Key":"these up","Fragments":["using"]},{"Key":"a .cpp,","Fragments":["but"]},{"Key":"but exercism.io","Fragments":["doesn't"]},{"Key":"exercism.io doesn't","Fragments":["like"]},{"Key":"doesn't like","Fragments":["that."]},{"Key":"that. Lesson","Fragments":["learned."]},{"Key":"Boost Regex","Fragments":["route,"]},{"Key":"Regex route,","Fragments":["but"]},{"Key":"route, but","Fragments":["found"]},{"Key":"be way","Fragments":["too"]},{"Key":"too high","Fragments":["powered"]},{"Key":"high powered","Fragments":["for"]},{"Key":"powered for","Fragments":["what"]},{"Key":" Feedback","Fragments":["appreciated!"]},{"Key":"are great,","Fragments":["very"]},{"Key":"concise. Well","Fragments":["done"]},{"Key":"Well done","Fragments":["on"]},{"Key":"done on","Fragments":["the"]},{"Key":"the commenting","Fragments":["as"]},{"Key":"One minor","Fragments":["criticism"]},{"Key":"minor criticism","Fragments":["is"]},{"Key":"you hard-coded","Fragments":["the"]},{"Key":"hard-coded the","Fragments":["return"]},{"Key":"return strings.","Fragments":["They"]},{"Key":"strings. They","Fragments":["would"]},{"Key":"They would","Fragments":["be"]},{"Key":"suited as","Fragments":["const"]},{"Key":"pretty short","Fragments":["and"]},{"Key":"and sweet.","Fragments":["The"]},{"Key":"sweet. The","Fragments":["only"]},{"Key":"change is","Fragments":["to"]},{"Key":"constants and","Fragments":["by"]},{"Key":"feedback fractalic!","Fragments":["So"]},{"Key":"fractalic! So","Fragments":["what"]},{"Key":"you're hinting","Fragments":["at"]},{"Key":"hinting at","Fragments":["is"]},{"Key":"at is","Fragments":["that","JavaScript"]},{"Key":"pass each","Fragments":["parameter"]},{"Key":"each parameter","Fragments":["as"]},{"Key":"parameter as","Fragments":["a"]},{"Key":"using bool","Fragments":["as"]},{"Key":"bool as","Fragments":["a","an"]},{"Key":"return type;","Fragments":["that"]},{"Key":"type; that","Fragments":["seems"]},{"Key":"more elegant.","Fragments":["I"]},{"Key":"elegant. I","Fragments":["also"]},{"Key":"also agree","Fragments":["with"]},{"Key":"your naming","Fragments":["convention.","convention"]},{"Key":"convention. I'm","Fragments":["still"]},{"Key":"the legibility","Fragments":["of"]},{"Key":"legibility of","Fragments":["my"]},{"Key":"code which","Fragments":["is","required"]},{"Key":"caps function","Fragments":["it"]},{"Key":"little awkward","Fragments":["how"]},{"Key":"awkward how","Fragments":["I"]},{"Key":"I defined","Fragments":["it","the"]},{"Key":"perhaps another","Fragments":["helper"]},{"Key":"another helper","Fragments":["function"]},{"Key":"more clear.","Fragments":["In","Personally","Also,","I","I'll"]},{"Key":"clear. In","Fragments":["my"]},{"Key":"that allCaps","Fragments":["would"]},{"Key":"allCaps would","Fragments":["be"]},{"Key":"as containing","Fragments":["no"]},{"Key":"letters, however","Fragments":["it"]},{"Key":"really mean","Fragments":["containing"]},{"Key":"mean containing","Fragments":["at"]},{"Key":"containing at","Fragments":["least"]},{"Key":"letters regardless","Fragments":["of"]},{"Key":"I'm happy","Fragments":["I","to","that"]},{"Key":"happy I","Fragments":["could"]},{"Key":"could help!","Fragments":["This"]},{"Key":"help! This","Fragments":["is"]},{"Key":"last point:","Fragments":["the"]},{"Key":"point: the","Fragments":["tasks"]},{"Key":"the tasks","Fragments":["performed"]},{"Key":"tasks performed","Fragments":["by"]},{"Key":"performed by","Fragments":["the"]},{"Key":"word count","Fragments":["function","```wordCounts[foundWord]++```."]},{"Key":"count function","Fragments":["could"]},{"Key":"be thought","Fragments":["of"]},{"Key":"of as","Fragments":["two"]},{"Key":"two tasks,","Fragments":["which"]},{"Key":"tasks, which","Fragments":["are"]},{"Key":"are identifying","Fragments":["the"]},{"Key":"the occurrences","Fragments":["of","of"]},{"Key":"word. So","Fragments":["you"]},{"Key":"consider creating","Fragments":["a"]},{"Key":"second function","Fragments":["to"]},{"Key":" Almost:","Fragments":["const"]},{"Key":"Almost: const","Fragments":["reference"]},{"Key":"thinking of.","Fragments":["const"]},{"Key":"of. const","Fragments":["to"]},{"Key":"show that","Fragments":["the"]},{"Key":"its argument;","Fragments":["reference"]},{"Key":"argument; reference","Fragments":["to"]},{"Key":"prevent spending","Fragments":["cpu"]},{"Key":"spending cpu","Fragments":["cycles"]},{"Key":"cpu cycles","Fragments":["copying"]},{"Key":"cycles copying","Fragments":["each"]},{"Key":"character (though","Fragments":["the"]},{"Key":"(though the","Fragments":["actual"]},{"Key":"actual time","Fragments":["savings"]},{"Key":"time savings","Fragments":["is"]},{"Key":"savings is","Fragments":["probably"]},{"Key":"probably negligible","Fragments":["with"]},{"Key":"negligible with","Fragments":["such"]},{"Key":"such short","Fragments":["strings)."]},{"Key":"with allCaps,","Fragments":["I'd"]},{"Key":"allCaps, I'd","Fragments":["say"]},{"Key":"undefined whether","Fragments":["a"]},{"Key":"or uppercase,","Fragments":["and"]},{"Key":"uppercase, and","Fragments":["because"]},{"Key":"this ambiguity,","Fragments":["it"]},{"Key":"ambiguity, it","Fragments":["helps"]},{"Key":"helps others","Fragments":["to"]},{"Key":"others to","Fragments":["more"]},{"Key":"more quickly","Fragments":["understand"]},{"Key":"quickly understand","Fragments":["your"]},{"Key":"can clearly","Fragments":["see"]},{"Key":"that yelling","Fragments":["requires"]},{"Key":"yelling requires","Fragments":["alphanumerics"]},{"Key":"requires alphanumerics","Fragments":["to"]},{"Key":"alphanumerics to","Fragments":["be"]},{"Key":"the prompt","Fragments":["message."]},{"Key":" (Then,","Fragments":["to"]},{"Key":"(Then, to","Fragments":["be"]},{"Key":"be pedantic,","Fragments":["all"]},{"Key":"pedantic, all","Fragments":["we"]},{"Key":"all we","Fragments":["can"]},{"Key":"really say","Fragments":["is"]},{"Key":"of punctuation","Fragments":["marks"]},{"Key":"marks contains","Fragments":["no"]},{"Key":"lowercase characters","Fragments":["and"]},{"Key":"contains some","Fragments":["undefined-case"]},{"Key":"some undefined-case","Fragments":["characters,"]},{"Key":"undefined-case characters,","Fragments":["but"]},{"Key":"characters, but","Fragments":["I"]},{"Key":"check no_lowercase()","Fragments":["instead"]},{"Key":"no_lowercase() instead","Fragments":["of"]},{"Key":"checking all_caps().","Fragments":["They"]},{"Key":"all_caps(). They","Fragments":["both"]},{"Key":"They both","Fragments":["get"]},{"Key":"both get","Fragments":["the"]},{"Key":" cctype","Fragments":["(ctype.h)"]},{"Key":"cctype (ctype.h)","Fragments":["has"]},{"Key":"(ctype.h) has","Fragments":["an"]},{"Key":"an isalnum","Fragments":["function,"]},{"Key":"isalnum function,","Fragments":["so"]},{"Key":"so all","Fragments":["you'd"]},{"Key":"all you'd","Fragments":["have"]},{"Key":"one char","Fragments":["is"]},{"Key":" Wow","Fragments":["others"]},{"Key":"Wow others","Fragments":["did"]},{"Key":"others did","Fragments":["great"]},{"Key":"did great","Fragments":["job"]},{"Key":"great job","Fragments":["on"]},{"Key":"job on","Fragments":["this,"]},{"Key":"on this,","Fragments":["I","and"]},{"Key":"might copy","Fragments":["paste"]},{"Key":"copy paste","Fragments":["it"]},{"Key":"paste it","Fragments":["later."]},{"Key":"have incorporated","Fragments":["your"]},{"Key":"if counting","Fragments":["the"]},{"Key":"efficient approach,","Fragments":["and"]},{"Key":"comparison between","Fragments":["two"]},{"Key":"maps returns","Fragments":["true"]},{"Key":"if both","Fragments":["maps","are"]},{"Key":"both maps","Fragments":["have"]},{"Key":"maps have","Fragments":["the"]},{"Key":"same elements","Fragments":["in"]},{"Key":"in distinct","Fragments":["orders."]},{"Key":"worry much","Fragments":["about"]},{"Key":"about naming","Fragments":["conventions,"]},{"Key":"naming conventions,","Fragments":["using"]},{"Key":"conventions, using","Fragments":["`min_len`"]},{"Key":"using `min_len`","Fragments":["suggests"]},{"Key":"`min_len` suggests","Fragments":["a"]},{"Key":"suggests a","Fragments":["\"minimum"]},{"Key":"a \"minimum","Fragments":["length\""]},{"Key":"\"minimum length\"","Fragments":["of"]},{"Key":"length\" of","Fragments":["characters"]},{"Key":"iterate over,","Fragments":["when"]},{"Key":"over, when","Fragments":["it's"]},{"Key":"actually used","Fragments":["as"]},{"Key":"cast value","Fragments":["of"]},{"Key":"the `bool`","Fragments":["expression"]},{"Key":"`bool` expression","Fragments":["on"]},{"Key":"line 20,","Fragments":["instead","which"]},{"Key":"20, instead","Fragments":["of"]},{"Key":"using `if","Fragments":["(lhs[i]"]},{"Key":"`if (lhs[i]","Fragments":["!="]},{"Key":"(lhs[i] !=","Fragments":["rhs[i])`"]},{"Key":"!= rhs[i])`","Fragments":["or"]},{"Key":"rhs[i])` or","Fragments":["something"]},{"Key":"like that,","Fragments":["you"]},{"Key":"that, you","Fragments":["modify"]},{"Key":"you modify","Fragments":["the"]},{"Key":"of `hamming_diff`","Fragments":["every"]},{"Key":"`hamming_diff` every","Fragments":["iteration"]},{"Key":"loop, even","Fragments":["when"]},{"Key":"no change","Fragments":["in"]},{"Key":"value, except","Fragments":["when"]},{"Key":"characters differ.","Fragments":["I"]},{"Key":"differ. I","Fragments":["could"]},{"Key":"that area,","Fragments":["but"]},{"Key":"area, but","Fragments":["to"]},{"Key":"could scale","Fragments":["up"]},{"Key":"scale up","Fragments":["the"]},{"Key":"done several","Fragments":["thousands"]},{"Key":"several thousands","Fragments":["of"]},{"Key":"thousands of","Fragments":["times,"]},{"Key":"of times,","Fragments":["and"]},{"Key":"times, and","Fragments":["time"]},{"Key":"and time","Fragments":["each"]},{"Key":"time each","Fragments":["implementation."]},{"Key":"written requires","Fragments":["that"]},{"Key":"the verse-building","Fragments":["functions"]},{"Key":"verse-building functions","Fragments":["be"]},{"Key":"static members,","Fragments":["which"]},{"Key":"members, which","Fragments":["eliminates"]},{"Key":"which eliminates","Fragments":["any"]},{"Key":"eliminates any","Fragments":["advantages"]},{"Key":"advantages of","Fragments":["using"]},{"Key":"verse function","Fragments":["into"]},{"Key":"function into","Fragments":["several","a"]},{"Key":"into several","Fragments":["helper"]},{"Key":"several helper","Fragments":["functions"]},{"Key":"iteration. It'd","Fragments":["be"]},{"Key":"be great","Fragments":["to","to"]},{"Key":"on readability","Fragments":["and"]},{"Key":"the `verses`","Fragments":["output"]},{"Key":"`verses` output","Fragments":["had"]},{"Key":"output had","Fragments":["a"]},{"Key":"different format,","Fragments":["which"]},{"Key":"format, which","Fragments":["is"]},{"Key":"not implemented","Fragments":["as"]},{"Key":"single `for`","Fragments":["loop,"]},{"Key":"`for` loop,","Fragments":["and"]},{"Key":"extra statements.","Fragments":["I'll"]},{"Key":"statements. I'll","Fragments":["fix"]},{"Key":"The `while`","Fragments":["loop"]},{"Key":"`while` loop","Fragments":["in"]},{"Key":"in `verse`","Fragments":["has"]},{"Key":"`verse` has","Fragments":["to"]},{"Key":"of `food_iter`","Fragments":["twice"]},{"Key":"`food_iter` twice","Fragments":["for"]},{"Key":"twice for","Fragments":["every"]},{"Key":"iteration, which","Fragments":["I"]},{"Key":"is inefficient,","Fragments":["but"]},{"Key":"inefficient, but","Fragments":["I'm"]},{"Key":"sure of","Fragments":["a"]},{"Key":"the \"last","Fragments":["item\""]},{"Key":"\"last item\"","Fragments":["behaviour,"]},{"Key":"item\" behaviour,","Fragments":["which"]},{"Key":"behaviour, which","Fragments":["requires"]},{"Key":"which requires","Fragments":["that"]},{"Key":"that its","Fragments":["effect"]},{"Key":"its effect","Fragments":["be"]},{"Key":"effect be","Fragments":["written"]},{"Key":"written at","Fragments":["the"]},{"Key":" @haven","Fragments":["Thanks"]},{"Key":"@haven Thanks","Fragments":["for"]},{"Key":"this. I","Fragments":["totally"]},{"Key":"the min_len","Fragments":["name"]},{"Key":"min_len name","Fragments":["isn't"]},{"Key":"name isn't","Fragments":["as"]},{"Key":"as clear","Fragments":["as"]},{"Key":"clear as","Fragments":["it"]},{"Key":"be. I","Fragments":["didn't"]},{"Key":"hit from","Fragments":["unnecessarily"]},{"Key":"from unnecessarily","Fragments":["adding"]},{"Key":"unnecessarily adding","Fragments":["0"]},{"Key":"adding 0","Fragments":["to"]},{"Key":"if treating","Fragments":["the"]},{"Key":"treating the","Fragments":["bool"]},{"Key":"little clever","Fragments":["and"]},{"Key":"take away","Fragments":["from"]},{"Key":"main issue","Fragments":["I"]},{"Key":"found myself","Fragments":["dealing"]},{"Key":"myself dealing","Fragments":["with"]},{"Key":"with was","Fragments":["boost::regex."]},{"Key":"was boost::regex.","Fragments":["I"]},{"Key":"boost::regex. I","Fragments":["was"]},{"Key":"was unable","Fragments":["to","to"]},{"Key":"get things","Fragments":["like"]},{"Key":"like lookaheads","Fragments":["and"]},{"Key":"lookaheads and","Fragments":["negative"]},{"Key":"negative lookaheads","Fragments":["to"]},{"Key":"lookaheads to","Fragments":["work,"]},{"Key":"work, although","Fragments":["I"]},{"Key":"that perl","Fragments":["regex,"]},{"Key":"perl regex,","Fragments":["to"]},{"Key":"regex, to","Fragments":["which"]},{"Key":"to which","Fragments":["boost::regex"]},{"Key":"which boost::regex","Fragments":["defaults,"]},{"Key":"boost::regex defaults,","Fragments":["supports"]},{"Key":"defaults, supports","Fragments":["them."]},{"Key":"supports them.","Fragments":["So"]},{"Key":"I wrestled","Fragments":["with"]},{"Key":"wrestled with","Fragments":["forming"]},{"Key":"with forming","Fragments":["a"]},{"Key":"forming a","Fragments":["valid"]},{"Key":"valid regular","Fragments":["expression"]},{"Key":"expression that","Fragments":["would"]},{"Key":"handle not","Fragments":["just"]},{"Key":"the absence","Fragments":["or"]},{"Key":"absence or","Fragments":["presence"]},{"Key":"or presence","Fragments":["of"]},{"Key":"also numbers","Fragments":["both"]},{"Key":"numbers both","Fragments":["with"]},{"Key":"with upper","Fragments":["case"]},{"Key":"no upper","Fragments":["case"]},{"Key":"string. Finally","Fragments":["I"]},{"Key":"Finally I","Fragments":["decided"]},{"Key":"decided instead","Fragments":["to"]},{"Key":"instead to","Fragments":["sanitize"]},{"Key":"to sanitize","Fragments":["the"]},{"Key":"sanitize the","Fragments":["string"]},{"Key":"first then","Fragments":["look"]},{"Key":"then look","Fragments":["for"]},{"Key":"letters which","Fragments":["would"]},{"Key":"would indicate","Fragments":["a"]},{"Key":"Nice code!","Fragments":["I","I","Very","Your","I","It's","Your","Your","Your"]},{"Key":"code! I","Fragments":["like","like","like"]},{"Key":"your general","Fragments":["coding","information."]},{"Key":"general coding","Fragments":["style."]},{"Key":"coding style.","Fragments":["It","Of"]},{"Key":"style. It","Fragments":["looks"]},{"Key":"like very","Fragments":["idiomatic"]},{"Key":"very idiomatic","Fragments":["C++."]},{"Key":"your `checkPoke`","Fragments":["function,"]},{"Key":"`checkPoke` function,","Fragments":["you"]},{"Key":"could omit","Fragments":["checking"]},{"Key":"omit checking","Fragments":["that"]},{"Key":"still behave","Fragments":["correctly:"]},{"Key":"behave correctly:","Fragments":["`allSpaces`"]},{"Key":"correctly: `allSpaces`","Fragments":["is"]},{"Key":"`allSpaces` is","Fragments":["initialized"]},{"Key":"to `true`,","Fragments":["the"]},{"Key":"`true`, the","Fragments":["for"]},{"Key":"perform zero","Fragments":["iterations,"]},{"Key":"zero iterations,","Fragments":["and"]},{"Key":"iterations, and","Fragments":["the","thus"]},{"Key":"up sensing","Fragments":["a"]},{"Key":"sensing a","Fragments":["disposition"]},{"Key":"a disposition","Fragments":["from"]},{"Key":"disposition from","Fragments":["generating"]},{"Key":"from generating","Fragments":["the"]},{"Key":"appropriate response","Fragments":["given","string","(\"Sure\""]},{"Key":"response given","Fragments":["a"]},{"Key":"a disposition.","Fragments":["Very"]},{"Key":"disposition. Very","Fragments":["clever."]},{"Key":"bit iffy","Fragments":["on"]},{"Key":"iffy on","Fragments":["invoking"]},{"Key":"on invoking","Fragments":["`exit`"]},{"Key":"invoking `exit`","Fragments":["from"]},{"Key":"`exit` from","Fragments":["within"]},{"Key":"from within","Fragments":["your"]},{"Key":"within your","Fragments":["`hey`","for","function,"]},{"Key":"your `hey`","Fragments":["function,","function","function."]},{"Key":"function, because","Fragments":["it"]},{"Key":"a potential","Fragments":["for","source"]},{"Key":"potential for","Fragments":["a","a","errors,"]},{"Key":"a spec","Fragments":["violation"]},{"Key":"spec violation","Fragments":["there:"]},{"Key":"violation there:","Fragments":["The"]},{"Key":"there: The","Fragments":["specs"]},{"Key":"The specs","Fragments":["say"]},{"Key":"specs say","Fragments":["seem"]},{"Key":"say seem","Fragments":["to"]},{"Key":"response for","Fragments":["every"]},{"Key":"every possible","Fragments":["input"]},{"Key":"possible input","Fragments":["(because"]},{"Key":"input (because","Fragments":["it"]},{"Key":"default cause","Fragments":["of"]},{"Key":"cause of","Fragments":["saying"]},{"Key":"of saying","Fragments":["\"Whatever.\""]},{"Key":"saying \"Whatever.\"","Fragments":["if"]},{"Key":"other case","Fragments":["applies),"]},{"Key":"case applies),","Fragments":["and"]},{"Key":"applies), and","Fragments":["so"]},{"Key":"never end","Fragments":["up"]},{"Key":"where talking","Fragments":["to"]},{"Key":"talking to","Fragments":["Bob"]},{"Key":"Bob causes","Fragments":["the"]},{"Key":"causes the","Fragments":["whole"]},{"Key":"whole program","Fragments":["to","(external","(internal"]},{"Key":"program to","Fragments":["shut","give"]},{"Key":"to shut","Fragments":["down."]},{"Key":"Similarly, for","Fragments":["`is_shout`"]},{"Key":"for `is_shout`","Fragments":["and","and"]},{"Key":"`is_shout` and","Fragments":["`is_question`,","`is_question`,"]},{"Key":"and `is_question`,","Fragments":["it","again"]},{"Key":"could define","Fragments":["the"]},{"Key":"simply not","Fragments":["be"]},{"Key":"shout (i.e.","Fragments":["return"]},{"Key":"(i.e. return","Fragments":["false),"]},{"Key":"return false),","Fragments":["rather"]},{"Key":"false), rather","Fragments":["than"]},{"Key":"than throw","Fragments":["an","an"]},{"Key":"Great finds,","Fragments":["thank"]},{"Key":"finds, thank","Fragments":["you!"]},{"Key":"thank you!","Fragments":["Changes","Great"]},{"Key":"you! Changes","Fragments":["have"]},{"Key":"Changes have","Fragments":["been"]},{"Key":"Thanks @cleo.","Fragments":["I"]},{"Key":"@cleo. I","Fragments":["actually"]},{"Key":"actually feel","Fragments":["I"]},{"Key":"feel I","Fragments":["could"]},{"Key":"either way","Fragments":["on"]},{"Key":"way on","Fragments":["the"]},{"Key":"the changing","Fragments":["the"]},{"Key":"return strings","Fragments":["to"]},{"Key":"const variables.","Fragments":["It"]},{"Key":"variables. It","Fragments":["would"]},{"Key":"were repeated","Fragments":["in"]},{"Key":"repeated in","Fragments":["two"]},{"Key":"two or","Fragments":["more"]},{"Key":"more locations,","Fragments":["or"]},{"Key":"locations, or","Fragments":["if"]},{"Key":"they changed","Fragments":["frequently."]},{"Key":"changed frequently.","Fragments":["I"]},{"Key":"frequently. I","Fragments":["think"]},{"Key":"\"real life\"","Fragments":["project,"]},{"Key":"life\" project,","Fragments":["I've"]},{"Key":"project, I've","Fragments":["leave"]},{"Key":"I've leave","Fragments":["them"]},{"Key":"them as-is","Fragments":["for"]},{"Key":"as-is for","Fragments":["now,"]},{"Key":"for now,","Fragments":["and"]},{"Key":"and upon","Fragments":["the"]},{"Key":"requirements change","Fragments":["that"]},{"Key":"that affect","Fragments":["their"]},{"Key":"affect their","Fragments":["values,"]},{"Key":"their values,","Fragments":["I'd"]},{"Key":"values, I'd","Fragments":["do"]},{"Key":"I'd do","Fragments":["the"]},{"Key":"the refactoring","Fragments":["then"]},{"Key":"refactoring then","Fragments":["and"]},{"Key":"extract them","Fragments":["out"]},{"Key":"you liked","Fragments":["the"]},{"Key":"the tack","Fragments":["I"]},{"Key":"tack I","Fragments":["took."]},{"Key":"we take","Fragments":["the"]},{"Key":"the stance","Fragments":["that"]},{"Key":"stance that","Fragments":["an"]},{"Key":"exception should","Fragments":["represent"]},{"Key":"should represent","Fragments":["an"]},{"Key":"represent an","Fragments":["event"]},{"Key":"an event","Fragments":["that"]},{"Key":"event that","Fragments":["is"]},{"Key":"is truly","Fragments":["exceptional,"]},{"Key":"truly exceptional,","Fragments":["and"]},{"Key":"exceptional, and","Fragments":["that"]},{"Key":"not conveniently","Fragments":["recoverable"]},{"Key":"conveniently recoverable","Fragments":["(or"]},{"Key":"recoverable (or","Fragments":["where"]},{"Key":"(or where","Fragments":["there's"]},{"Key":"where there's","Fragments":["no"]},{"Key":"no clear","Fragments":["path"]},{"Key":"clear path","Fragments":["to"]},{"Key":"to recovery),","Fragments":["then"]},{"Key":"recovery), then","Fragments":["I"]},{"Key":"of exceptions","Fragments":["is"]},{"Key":"is reasonable.","Fragments":["Consider"]},{"Key":"reasonable. Consider","Fragments":["first"]},{"Key":"Consider first","Fragments":["the"]},{"Key":"first the","Fragments":["case"]},{"Key":"exception in","Fragments":["`respond`."]},{"Key":"in `respond`.","Fragments":["The"]},{"Key":"`respond`. The","Fragments":["\"default\""]},{"Key":"The \"default\"","Fragments":["should"]},{"Key":"\"default\" should","Fragments":["be"]},{"Key":"be unreachable.","Fragments":["If"]},{"Key":"unreachable. If","Fragments":["we"]},{"Key":"do arrive","Fragments":["there,"]},{"Key":"arrive there,","Fragments":["we"]},{"Key":"there, we","Fragments":["have"]},{"Key":"serious problem.","Fragments":["I"]},{"Key":"used `std::logic_error`","Fragments":["rather"]},{"Key":"`std::logic_error` rather","Fragments":["than"]},{"Key":"than `std::runtime_error`.","Fragments":["So"]},{"Key":"`std::runtime_error`. So","Fragments":["if"]},{"Key":"it's unreachable,","Fragments":["why"]},{"Key":"unreachable, why","Fragments":["did"]},{"Key":"why did","Fragments":["I","you","you"]},{"Key":"include it?","Fragments":["Because"]},{"Key":"it? Because","Fragments":["I"]},{"Key":"wanted a","Fragments":["generalized"]},{"Key":"a generalized","Fragments":["solution;"]},{"Key":"generalized solution;","Fragments":["sure,"]},{"Key":"solution; sure,","Fragments":["this"]},{"Key":"sure, this","Fragments":["is"]},{"Key":"is throw-away","Fragments":["code,"]},{"Key":"throw-away code,","Fragments":["but"]},{"Key":"but lets","Fragments":["put"]},{"Key":"lets put","Fragments":["that"]},{"Key":"that aside","Fragments":["and"]},{"Key":"aside and","Fragments":["assume"]},{"Key":"and assume","Fragments":["it's"]},{"Key":"assume it's","Fragments":["going"]},{"Key":"be around","Fragments":["forever,"]},{"Key":"around forever,","Fragments":["and"]},{"Key":"forever, and","Fragments":["that"]},{"Key":"someone in","Fragments":["the"]},{"Key":"the future","Fragments":["may","you"]},{"Key":"future may","Fragments":["extend"]},{"Key":"may extend","Fragments":["it"]},{"Key":"for less","Fragments":["trivial","then"]},{"Key":"less trivial","Fragments":["use."]},{"Key":"trivial use.","Fragments":["In"]},{"Key":"use. In","Fragments":["such"]},{"Key":"a case,","Fragments":["it","it"]},{"Key":"happen that","Fragments":["additional"]},{"Key":"additional `case`'s","Fragments":["are"]},{"Key":"`case`'s are","Fragments":["added,"]},{"Key":"are added,","Fragments":["and"]},{"Key":"added, and","Fragments":["additional","speed"]},{"Key":"and additional","Fragments":["`Disposition`"]},{"Key":"additional `Disposition`","Fragments":["entries"]},{"Key":"`Disposition` entries","Fragments":["are"]},{"Key":"entries are","Fragments":["added."]},{"Key":"are added.","Fragments":["If"]},{"Key":"added. If","Fragments":["that"]},{"Key":"happens, it's","Fragments":["possible"]},{"Key":"programmer down","Fragments":["the"]},{"Key":"the road","Fragments":["forgets"]},{"Key":"road forgets","Fragments":["to"]},{"Key":"cover his","Fragments":["bases;"]},{"Key":"his bases;","Fragments":["adding"]},{"Key":"bases; adding","Fragments":["a"]},{"Key":"a `Disposition`,","Fragments":["without"]},{"Key":"`Disposition`, without","Fragments":["adding"]},{"Key":"without adding","Fragments":["a"]},{"Key":"corresponding `case`.","Fragments":["If"]},{"Key":"`case`. If","Fragments":["that"]},{"Key":"to happen,","Fragments":["we"]},{"Key":"happen, we","Fragments":["would"]},{"Key":"definitely want","Fragments":["to"]},{"Key":"fail noisily,","Fragments":["rather"]},{"Key":"noisily, rather","Fragments":["than"]},{"Key":"than dropping","Fragments":["through"]},{"Key":"dropping through","Fragments":["silently."]},{"Key":"`is_question`, again","Fragments":["consider"]},{"Key":"again consider","Fragments":["that"]},{"Key":"that those","Fragments":["functions"]},{"Key":"functions might","Fragments":["be"]},{"Key":"other context","Fragments":["outside"]},{"Key":"context outside","Fragments":["of"]},{"Key":"our current","Fragments":["scheme."]},{"Key":"current scheme.","Fragments":["It"]},{"Key":"scheme. It","Fragments":["invokes"]},{"Key":"It invokes","Fragments":["undefined"]},{"Key":"invokes undefined","Fragments":["behavior"]},{"Key":"behavior to","Fragments":["hand"]},{"Key":"to hand","Fragments":["`s.back()`"]},{"Key":"hand `s.back()`","Fragments":["an"]},{"Key":"`s.back()` an","Fragments":["empty"]},{"Key":"string. So","Fragments":["we","the"]},{"Key":"should definitely","Fragments":["be","do"]},{"Key":"be guarding","Fragments":["against"]},{"Key":"guarding against","Fragments":["that"]},{"Key":"by failing","Fragments":["noisily."]},{"Key":"failing noisily.","Fragments":["That"]},{"Key":"noisily. That","Fragments":["covers"]},{"Key":"That covers","Fragments":["`is_question`."]},{"Key":"covers `is_question`.","Fragments":["As"]},{"Key":"`is_question`. As","Fragments":["for"]},{"Key":"for `is_shout`,","Fragments":["an"]},{"Key":"`is_shout`, an","Fragments":["earlier"]},{"Key":"earlier implementation","Fragments":["(prior"]},{"Key":"implementation (prior","Fragments":["to"]},{"Key":"(prior to","Fragments":["my"]},{"Key":"my pushing","Fragments":["it"]},{"Key":"pushing it","Fragments":["here)"]},{"Key":"it here)","Fragments":["would"]},{"Key":"here) would","Fragments":["have"]},{"Key":"have also","Fragments":["invoked"]},{"Key":"also invoked","Fragments":["undefined"]},{"Key":"invoked undefined","Fragments":["behavior"]},{"Key":"were handed","Fragments":["an"]},{"Key":"handed an","Fragments":["empty"]},{"Key":"string. However,","Fragments":["as"]},{"Key":"However, as","Fragments":["it"]},{"Key":"it currently","Fragments":["stands,","is"]},{"Key":"currently stands,","Fragments":["that"]},{"Key":"stands, that","Fragments":["potential"]},{"Key":"that potential","Fragments":["has"]},{"Key":"potential has","Fragments":["been"]},{"Key":"been purged","Fragments":["from"]},{"Key":"purged from","Fragments":["`is_shout`,"]},{"Key":"from `is_shout`,","Fragments":["so"]},{"Key":"`is_shout`, so","Fragments":["it"]},{"Key":"to NOT","Fragments":["throw"]},{"Key":"NOT throw","Fragments":["an"]},{"Key":"exception anymore.","Fragments":["I"]},{"Key":"anymore. I","Fragments":["probably"]},{"Key":"should remove","Fragments":["that."]},{"Key":"of `is_question`,","Fragments":["it"]},{"Key":"simply good","Fragments":["defensive"]},{"Key":"good defensive","Fragments":["programming"]},{"Key":"defensive programming","Fragments":["to","tactic;"]},{"Key":"programming to","Fragments":["throw"]},{"Key":"if passed","Fragments":["a"]},{"Key":"would invoke","Fragments":["undefined","UB"]},{"Key":"invoke undefined","Fragments":["behavior."]},{"Key":"In `is_shout`","Fragments":["you"]},{"Key":"`is_shout` you","Fragments":["might"]},{"Key":"have noticed","Fragments":["I'm"]},{"Key":"noticed I'm","Fragments":["explicitly"]},{"Key":"I'm explicitly","Fragments":["casting"]},{"Key":"explicitly casting","Fragments":["`ch`"]},{"Key":"casting `ch`","Fragments":["to"]},{"Key":"`ch` to","Fragments":["an"]},{"Key":"an `unsigned","Fragments":["char`."]},{"Key":"`unsigned char`.","Fragments":["This"]},{"Key":"char`. This","Fragments":["is"]},{"Key":"another defensive","Fragments":["programming"]},{"Key":"programming tactic;","Fragments":["invoking"]},{"Key":"tactic; invoking","Fragments":["`::isupper`"]},{"Key":"invoking `::isupper`","Fragments":["on"]},{"Key":"`::isupper` on","Fragments":["a"]},{"Key":"`char` type","Fragments":["is"]},{"Key":"is inherently","Fragments":["UB"]},{"Key":"inherently UB","Fragments":["because"]},{"Key":"UB because","Fragments":["there"]},{"Key":"because there","Fragments":["is","is","were"]},{"Key":"guarantee in","Fragments":["the"]},{"Key":"`string` will","Fragments":["be"]},{"Key":"an aggregate","Fragments":["of"]},{"Key":"aggregate of","Fragments":["unsigned"]},{"Key":"of unsigned","Fragments":["types..."]},{"Key":"unsigned types...","Fragments":["and"]},{"Key":"types... and","Fragments":["because"]},{"Key":"because passing","Fragments":["a"]},{"Key":"negative to","Fragments":["::isupper"]},{"Key":"to ::isupper","Fragments":["again"]},{"Key":"::isupper again","Fragments":["invokes"]},{"Key":"again invokes","Fragments":["UB."]},{"Key":"other thought;","Fragments":["I've"]},{"Key":"thought; I've","Fragments":["grappled"]},{"Key":"I've grappled","Fragments":["with"]},{"Key":"grappled with","Fragments":["possibly"]},{"Key":"with possibly","Fragments":["setting"]},{"Key":"possibly setting","Fragments":["up"]},{"Key":"pairs instead","Fragments":["of"]},{"Key":"the `switch`","Fragments":["statement."]},{"Key":"statement. `array\u003cpair\u003cDisposition,string\u003e\u003e`","Fragments":["would"]},{"Key":"`array\u003cpair\u003cDisposition,string\u003e\u003e` would","Fragments":["allow"]},{"Key":"the `switch`,","Fragments":["and"]},{"Key":"`switch`, and","Fragments":["instead"]},{"Key":"instead use","Fragments":["a"]},{"Key":"of dispatch","Fragments":["table,"]},{"Key":"dispatch table,","Fragments":["looping"]},{"Key":"table, looping","Fragments":["over"]},{"Key":"array elements,","Fragments":["and"]},{"Key":"elements, and","Fragments":["breaking"]},{"Key":"and breaking","Fragments":["out"]},{"Key":"response string","Fragments":["once"]},{"Key":"once one","Fragments":["of"]},{"Key":"the dispositions","Fragments":["matches."]},{"Key":"dispositions matches.","Fragments":["That"]},{"Key":"matches. That","Fragments":["pushes"]},{"Key":"That pushes","Fragments":["more"]},{"Key":"pushes more","Fragments":["of"]},{"Key":"logic out","Fragments":["of"]},{"Key":"of \"programming\"","Fragments":["and"]},{"Key":"\"programming\" and","Fragments":["into"]},{"Key":"and into","Fragments":["\"data\","]},{"Key":"into \"data\",","Fragments":["providing"]},{"Key":"\"data\", providing","Fragments":["for"]},{"Key":"providing for","Fragments":["a"]},{"Key":"more easily","Fragments":["extensible","derive","parallelized."]},{"Key":"easily extensible","Fragments":["framework."]},{"Key":"extensible framework.","Fragments":["This"]},{"Key":"framework. This","Fragments":["might"]},{"Key":"also entirely","Fragments":["eliminate"]},{"Key":"entirely eliminate","Fragments":["the"]},{"Key":"a maintenance","Fragments":["programmer","point","nightmare"]},{"Key":"maintenance programmer","Fragments":["breaking"]},{"Key":"programmer breaking","Fragments":["the"]},{"Key":"statement, and","Fragments":["that"]},{"Key":"that eliminates","Fragments":["the"]},{"Key":"eliminates the","Fragments":["need"]},{"Key":"throw if","Fragments":["the"]},{"Key":"default is","Fragments":["hit."]},{"Key":"to additional","Fragments":["thoughts!"]},{"Key":"additional thoughts!","Fragments":[":)"]},{"Key":"1. simple","Fragments":["\"switch-case\""]},{"Key":"simple \"switch-case\"","Fragments":["is"]},{"Key":"\"switch-case\" is","Fragments":["better"]},{"Key":"2. compiler","Fragments":["need"]},{"Key":"compiler need","Fragments":["to"]},{"Key":"which 'to_rna'","Fragments":["to"]},{"Key":"'to_rna' to","Fragments":["use."]},{"Key":" Reading","Fragments":["through"]},{"Key":"Reading through","Fragments":["your"]},{"Key":"was struck","Fragments":["by"]},{"Key":"struck by","Fragments":["how"]},{"Key":"much this","Fragments":["reads"]},{"Key":"this reads","Fragments":["like"]},{"Key":"C program.","Fragments":[":)"]},{"Key":"mentioning are","Fragments":["the"]},{"Key":"global strings","Fragments":["you"]},{"Key":"have declared.","Fragments":["Since"]},{"Key":"declared. Since","Fragments":["you"]},{"Key":"them like","Fragments":["constants,"]},{"Key":"like constants,","Fragments":["you"]},{"Key":"constants, you","Fragments":["might"]},{"Key":"as such.","Fragments":["You"]},{"Key":"such. You","Fragments":["could"]},{"Key":"could even","Fragments":["take"]},{"Key":"even take","Fragments":["that"]},{"Key":"a step","Fragments":["further","back,"]},{"Key":"step further","Fragments":["and"]},{"Key":"further and","Fragments":["declare"]},{"Key":"them `constexpr`","Fragments":["which"]},{"Key":"`constexpr` which","Fragments":["is"]},{"Key":"is evaluated","Fragments":["at"]},{"Key":"time opposed","Fragments":["to"]},{"Key":"to run-time","Fragments":["evaluation"]},{"Key":"run-time evaluation","Fragments":["in"]},{"Key":"evaluation in","Fragments":["the"]},{"Key":"of `const`.","Fragments":["In"]},{"Key":"`const`. In","Fragments":["either"]},{"Key":"In either","Fragments":["case"]},{"Key":"either case","Fragments":["this"]},{"Key":"case this","Fragments":["not"]},{"Key":"only ensures","Fragments":["correctness"]},{"Key":"ensures correctness","Fragments":["throughout"]},{"Key":"correctness throughout","Fragments":["your"]},{"Key":"throughout your","Fragments":["program,"]},{"Key":"your program,","Fragments":["but"]},{"Key":"program, but","Fragments":["indicates"]},{"Key":"but indicates","Fragments":["intention"]},{"Key":"indicates intention","Fragments":["to"]},{"Key":"intention to","Fragments":["anyone"]},{"Key":"to anyone","Fragments":["reading"]},{"Key":"anyone reading","Fragments":["your"]},{"Key":"reading your","Fragments":["code.","solutions."]},{"Key":"originally had","Fragments":["this","some"]},{"Key":"had this","Fragments":["all"]},{"Key":"this all","Fragments":["broken"]},{"Key":"all broken","Fragments":["out"]},{"Key":"broken out","Fragments":["into"]},{"Key":"into functions,","Fragments":["but"]},{"Key":"to crunch","Fragments":["it"]},{"Key":"crunch it","Fragments":["down"]},{"Key":"once. I'm","Fragments":["not"]},{"Key":"it sacrifices","Fragments":["much"]},{"Key":"sacrifices much","Fragments":["on"]},{"Key":"much on","Fragments":["readability,"]},{"Key":"on readability,","Fragments":["but"]},{"Key":"readability, but","Fragments":["if","I"]},{"Key":"if more","Fragments":["conditions"]},{"Key":"more conditions","Fragments":["get"]},{"Key":"conditions get","Fragments":["added,"]},{"Key":"get added,","Fragments":["and"]},{"Key":"and speed","Fragments":["isn't"]},{"Key":"speed isn't","Fragments":["an"]},{"Key":"think I'd","Fragments":["move"]},{"Key":"move back","Fragments":["to"]},{"Key":"That phrase","Fragments":["about"]},{"Key":"phrase about","Fragments":["internal"]},{"Key":"about internal","Fragments":["linkage"]},{"Key":"internal linkage","Fragments":["is"]},{"Key":"linkage is","Fragments":["just"]},{"Key":"prevent some","Fragments":["oddities"]},{"Key":"some oddities","Fragments":["from"]},{"Key":"oddities from","Fragments":["occurring,"]},{"Key":"from occurring,","Fragments":["as"]},{"Key":"occurring, as","Fragments":["I"]},{"Key":"understand it.","Fragments":["Imagine"]},{"Key":"it. Imagine","Fragments":["you"]},{"Key":"Imagine you","Fragments":["have","have"]},{"Key":"some template","Fragments":["class"]},{"Key":"template class","Fragments":["`abc`,"]},{"Key":"class `abc`,","Fragments":["and"]},{"Key":"`abc`, and","Fragments":["some"]},{"Key":"some `static","Fragments":["string"]},{"Key":"string str`.","Fragments":["The"]},{"Key":"str`. The","Fragments":["string"]},{"Key":"within it's","Fragments":["own"]},{"Key":"own translation","Fragments":["unit"]},{"Key":"unit (eg.","Fragments":["the"]},{"Key":"(eg. the","Fragments":["file"]},{"Key":"file it's","Fragments":["declared"]},{"Key":"declared in;","Fragments":["it"]},{"Key":"in; it","Fragments":["has"]},{"Key":"has internal","Fragments":["linkage)"]},{"Key":"internal linkage)","Fragments":["while"]},{"Key":"linkage) while","Fragments":["the"]},{"Key":"class has","Fragments":["external","a"]},{"Key":"has external","Fragments":["linkage."]},{"Key":"external linkage.","Fragments":["Then"]},{"Key":"linkage. Then","Fragments":["if"]},{"Key":"Then if","Fragments":["you"]},{"Key":"declared another","Fragments":["variable"]},{"Key":"another variable","Fragments":["with"]},{"Key":"variable with","Fragments":["type","no"]},{"Key":"with type","Fragments":["`abc\u003cstr\u003e`"]},{"Key":"type `abc\u003cstr\u003e`","Fragments":["you'd"]},{"Key":"`abc\u003cstr\u003e` you'd","Fragments":["have"]},{"Key":"type accessible","Fragments":["to"]},{"Key":"program (external","Fragments":["linkage)"]},{"Key":"(external linkage)","Fragments":["dependent"]},{"Key":"linkage) dependent","Fragments":["on"]},{"Key":"isn't visible","Fragments":["to"]},{"Key":"program (internal","Fragments":["linkage)."]},{"Key":"of trimming","Fragments":["in"]},{"Key":"trimming in","Fragments":["`is_silence`."]},{"Key":"in `is_silence`.","Fragments":["Probably"]},{"Key":"`is_silence`. Probably","Fragments":["better"]},{"Key":"Probably better","Fragments":["than"]},{"Key":"for either","Fragments":["a"]},{"Key":"a length","Fragments":["of","of"]},{"Key":"of zero,","Fragments":["or"]},{"Key":"zero, or","Fragments":["space"]},{"Key":"or space","Fragments":["only."]},{"Key":"space only.","Fragments":["I"]},{"Key":"just wasn't","Fragments":["aware"]},{"Key":"of boost::trim,","Fragments":["and"]},{"Key":"boost::trim, and","Fragments":["too"]},{"Key":"and too","Fragments":["lazy"]},{"Key":"own trim.","Fragments":[";)"]},{"Key":" -xpressive","Fragments":["was"]},{"Key":"-xpressive was","Fragments":["used"]},{"Key":" -added","Fragments":["`const"]},{"Key":"-added `const","Fragments":["bool`"]},{"Key":"bool` inside","Fragments":["hey"]},{"Key":"inside hey","Fragments":["function"]},{"Key":"for readability","Fragments":["since"]},{"Key":"readability since","Fragments":["it"]},{"Key":"optimized out","Fragments":["with"]},{"Key":"any level","Fragments":["of"]},{"Key":" -used","Fragments":["single"]},{"Key":"-used single","Fragments":["exit"]},{"Key":"single exit","Fragments":["from"]},{"Key":"exit from","Fragments":["function"]},{"Key":"from function","Fragments":["because"]},{"Key":"because that's","Fragments":["how"]},{"Key":"I grew","Fragments":["up."]},{"Key":"Changed up","Fragments":["the"]},{"Key":"operation in","Fragments":["the"]},{"Key":"saw what","Fragments":["you"]},{"Key":"all did","Fragments":["there."]},{"Key":"of namespace.","Fragments":["I"]},{"Key":"even go","Fragments":["there"]},{"Key":"go there","Fragments":["mentally"]},{"Key":"there mentally","Fragments":["when"]},{"Key":"mentally when","Fragments":["looking"]},{"Key":"problem. Nice","Fragments":["use"]},{"Key":"well to","Fragments":["keep","other"]},{"Key":"keep function","Fragments":["visibility"]},{"Key":"function visibility","Fragments":["local"]},{"Key":"visibility local","Fragments":["to"]},{"Key":"local to","Fragments":["file.","the"]},{"Key":"the enum.","Fragments":["It"]},{"Key":"enum. It","Fragments":["makes"]},{"Key":"code clear","Fragments":["when"]},{"Key":"when reading","Fragments":["over"]},{"Key":"reading over","Fragments":["the"]},{"Key":"code. ++","Fragments":["for"]},{"Key":"++ for","Fragments":["that."]},{"Key":"that. Stealing","Fragments":["this"]},{"Key":"Stealing this","Fragments":["thought"]},{"Key":"this thought","Fragments":["from"]},{"Key":"thought from","Fragments":["LegalizeAdulthood's"]},{"Key":"from LegalizeAdulthood's","Fragments":["implementation,"]},{"Key":"LegalizeAdulthood's implementation,","Fragments":["but"]},{"Key":"help encapsulate","Fragments":["your"]},{"Key":"encapsulate your","Fragments":["methods"]},{"Key":"methods and","Fragments":["hide"]},{"Key":"hide functionality","Fragments":["that"]},{"Key":"functionality that","Fragments":["you"]},{"Key":"want used","Fragments":["outside"]},{"Key":"outside it's","Fragments":["intended"]},{"Key":"some reading,","Fragments":["```constexpr```"]},{"Key":"reading, ```constexpr```","Fragments":["looks"]},{"Key":"```constexpr``` looks","Fragments":["like"]},{"Key":"great fantastic","Fragments":["feature."]},{"Key":"fantastic feature.","Fragments":["Unfortunately"]},{"Key":"feature. Unfortunately","Fragments":["I"]},{"Key":"Unfortunately I","Fragments":["use"]},{"Key":"use VS2013","Fragments":["which"]},{"Key":"VS2013 which","Fragments":["doesn't"]},{"Key":"that feature.","Fragments":["I"]},{"Key":"feature. I","Fragments":["did"]},{"Key":"const change","Fragments":["though."]},{"Key":"change though.","Fragments":["Thank"]},{"Key":"though. Thank","Fragments":["you!"]},{"Key":"Nice implementation!","Fragments":["When"]},{"Key":"implementation! When","Fragments":["I"]},{"Key":"considered trying","Fragments":["to"]},{"Key":"come with","Fragments":["a"]},{"Key":"a \"single","Fragments":["iteration\""]},{"Key":"\"single iteration\"","Fragments":["solution,"]},{"Key":"iteration\" solution,","Fragments":["but"]},{"Key":"I chickened","Fragments":["out!"]},{"Key":"to admit,","Fragments":["I"]},{"Key":"admit, I","Fragments":["find"]},{"Key":"verify the","Fragments":["correctness"]},{"Key":"the single-iteration","Fragments":["solution,"]},{"Key":"single-iteration solution,","Fragments":["but"]},{"Key":"suppose if","Fragments":["this"]},{"Key":"tests, then","Fragments":["that's"]},{"Key":"then that's","Fragments":["\"good"]},{"Key":"that's \"good","Fragments":["enough"]},{"Key":"\"good enough","Fragments":["for"]},{"Key":"nitpick for","Fragments":["you:"]},{"Key":"your indentation","Fragments":["is","a"]},{"Key":"indentation is","Fragments":["inconsistent."]},{"Key":"After looking","Fragments":["at","at"]},{"Key":"at [NebuPookin's](http://exercism.io/NebuPookins)","Fragments":["code,"]},{"Key":"[NebuPookin's](http://exercism.io/NebuPookins) code,","Fragments":["I"]},{"Key":"unnecessary and","Fragments":["a"]},{"Key":"namespace makes","Fragments":["more"]},{"Key":"code! Very","Fragments":["cool"]},{"Key":"Very cool","Fragments":["use"]},{"Key":"cool use","Fragments":["of"]},{"Key":"the xpressive","Fragments":["library."]},{"Key":"your `SILENT`,","Fragments":["variable,"]},{"Key":"`SILENT`, variable,","Fragments":["it"]},{"Key":"variable, it","Fragments":["seems"]},{"Key":"seems rather","Fragments":["than"]},{"Key":"than implementing","Fragments":["it"]},{"Key":"implementing it","Fragments":["as"]},{"Key":"as (essentially)","Fragments":["`!NOTSILENT`,"]},{"Key":"(essentially) `!NOTSILENT`,","Fragments":["you"]},{"Key":"`!NOTSILENT`, you","Fragments":["could"]},{"Key":"directly implement","Fragments":["`SILENT`"]},{"Key":"implement `SILENT`","Fragments":["as"]},{"Key":"`SILENT` as","Fragments":["something"]},{"Key":"like `xpr::bos","Fragments":["\u003e\u003e"]},{"Key":"`xpr::bos \u003e\u003e","Fragments":["+xpr::space"]},{"Key":"\u003e\u003e +xpr::space","Fragments":["\u003e\u003e"]},{"Key":"+xpr::space \u003e\u003e","Fragments":["xpr:eos`"]},{"Key":"\u003e\u003e xpr:eos`","Fragments":["(or"]},{"Key":"xpr:eos` (or","Fragments":["just"]},{"Key":"(or just","Fragments":["as"]},{"Key":"as `+xpr::space`","Fragments":["and"]},{"Key":"`+xpr::space` and","Fragments":["use"]},{"Key":"use `regex_match`","Fragments":["instead"]},{"Key":"`regex_match` instead","Fragments":["of"]},{"Key":"of `regex_search`).","Fragments":["I'm"]},{"Key":"`regex_search`). I'm","Fragments":["guessing"]},{"Key":"it ended","Fragments":["up"]},{"Key":"currently is","Fragments":["because"]},{"Key":"code evolved","Fragments":["from"]},{"Key":"evolved from","Fragments":["your"]},{"Key":"Coming up","Fragments":["with"]},{"Key":"a regexp","Fragments":["for"]},{"Key":"regexp for","Fragments":["`YELLING`"]},{"Key":"for `YELLING`","Fragments":["directly"]},{"Key":"`YELLING` directly","Fragments":["(as"]},{"Key":"directly (as","Fragments":["opposed"]},{"Key":"to coming","Fragments":["up"]},{"Key":"for `NOTYELLING`,","Fragments":["and"]},{"Key":"`NOTYELLING`, and","Fragments":["then"]},{"Key":"then negating","Fragments":["the"]},{"Key":"the results)","Fragments":["is"]},{"Key":"results) is","Fragments":["a"]},{"Key":"little tricker,","Fragments":["and"]},{"Key":"tricker, and","Fragments":["I"]},{"Key":"draw a","Fragments":["DFA","DFA"]},{"Key":"a DFA","Fragments":["diagram","diagram"]},{"Key":"DFA diagram","Fragments":["to","to"]},{"Key":"diagram to","Fragments":["figure","figure"]},{"Key":"it out:","Fragments":["`bos"]},{"Key":"out: `bos","Fragments":["\u003e\u003e"]},{"Key":"`bos \u003e\u003e","Fragments":["*~alpha"]},{"Key":"\u003e\u003e *~alpha","Fragments":["\u003e\u003e"]},{"Key":"*~alpha \u003e\u003e","Fragments":["upper"]},{"Key":"\u003e\u003e upper","Fragments":["\u003e\u003e"]},{"Key":"upper \u003e\u003e","Fragments":["*~lower"]},{"Key":"\u003e\u003e *~lower","Fragments":["\u003e\u003e"]},{"Key":"*~lower \u003e\u003e","Fragments":["eos`"]},{"Key":"code! Your","Fragments":["overall","style","style","style"]},{"Key":"Your overall","Fragments":["code"]},{"Key":"overall code","Fragments":["structure"]},{"Key":"code structure","Fragments":["is"]},{"Key":"For directly","Fragments":["implementing"]},{"Key":"directly implementing","Fragments":["isShout"]},{"Key":"implementing isShout","Fragments":["as"]},{"Key":"isShout as","Fragments":["a"]},{"Key":"a regex,","Fragments":["I"]},{"Key":"regex, I","Fragments":["think"]},{"Key":"work (I","Fragments":["didn't"]},{"Key":"didn't test","Fragments":["it):"]},{"Key":"test it):","Fragments":["`[^A-Za-z]*[[:upper:]][^[:lower:]]*`."]},{"Key":"it): `[^A-Za-z]*[[:upper:]][^[:lower:]]*`.","Fragments":["Of"]},{"Key":"`[^A-Za-z]*[[:upper:]][^[:lower:]]*`. Of","Fragments":["course,"]},{"Key":"course, that","Fragments":["assumes"]},{"Key":"that assumes","Fragments":["only"]},{"Key":"assumes only","Fragments":["ASCII"]},{"Key":"only ASCII","Fragments":["input."]},{"Key":"ASCII input.","Fragments":["If"]},{"Key":"input. If","Fragments":["you","you"]},{"Key":"restrict yourself","Fragments":["to"]},{"Key":"the `upper`","Fragments":["and"]},{"Key":"`upper` and","Fragments":["`lower`"]},{"Key":"and `lower`","Fragments":["character"]},{"Key":"`lower` character","Fragments":["classes"]},{"Key":"character classes","Fragments":["with"]},{"Key":"with dropping","Fragments":["down"]},{"Key":"dropping down","Fragments":["to"]},{"Key":"to referencing","Fragments":["`A-Z`"]},{"Key":"referencing `A-Z`","Fragments":["or"]},{"Key":"`A-Z` or","Fragments":["`a-z`,"]},{"Key":"or `a-z`,","Fragments":["then"]},{"Key":"`a-z`, then","Fragments":["I"]},{"Key":"this syntax","Fragments":["works?"]},{"Key":"syntax works?","Fragments":["`[^[:upper:][:lower:]]*[[:upper:]][^[:lower:]]*`"]},{"Key":"works? `[^[:upper:][:lower:]]*[[:upper:]][^[:lower:]]*`","Fragments":["I've"]},{"Key":"`[^[:upper:][:lower:]]*[[:upper:]][^[:lower:]]*` I've","Fragments":["not"]},{"Key":"I've not","Fragments":["worked"]},{"Key":"not worked","Fragments":["with"]},{"Key":"the `boost:regex`","Fragments":["library,"]},{"Key":"`boost:regex` library,","Fragments":["so"]},{"Key":"library, so","Fragments":["I'm"]},{"Key":"little messy","Fragments":["and"]},{"Key":"messy and","Fragments":["could"]},{"Key":"helper functions.","Fragments":["It'd"]},{"Key":"functions. It'd","Fragments":["be"]},{"Key":"song assembly","Fragments":["more"]},{"Key":"assembly more","Fragments":["readable"]},{"Key":"readable or","Fragments":["modular."]},{"Key":"the code's","Fragments":["simplicity;"]},{"Key":"code's simplicity;","Fragments":["it"]},{"Key":"simplicity; it","Fragments":["is"]},{"Key":"as straight-forward","Fragments":["as"]},{"Key":"straight-forward as","Fragments":["it"]},{"Key":"possibly be.","Fragments":["There's"]},{"Key":"be. There's","Fragments":["really"]},{"Key":"write \"clever\"","Fragments":["(which"]},{"Key":"\"clever\" (which","Fragments":["can"]},{"Key":"(which can","Fragments":["be"]},{"Key":"be unmaintainable)","Fragments":["code"]},{"Key":"unmaintainable) code","Fragments":["when"]},{"Key":"code when","Fragments":["the"]},{"Key":"and self-documenting.","Fragments":["Kudos"]},{"Key":"self-documenting. Kudos","Fragments":["for"]},{"Key":"Kudos for","Fragments":["that!"]},{"Key":"Now for","Fragments":["picking","std::string"]},{"Key":"for picking","Fragments":["nits....","that"]},{"Key":" `checkPoke`","Fragments":["could"]},{"Key":"`checkPoke` could","Fragments":["test","test"]},{"Key":"could test","Fragments":["for","for"]},{"Key":"length before","Fragments":["doing","doing"]},{"Key":"before doing","Fragments":["the","the"]},{"Key":"the non-space","Fragments":["test,","test,"]},{"Key":"non-space test,","Fragments":["optimizing","optimizing"]},{"Key":"test, optimizing","Fragments":["for","for"]},{"Key":"optimizing for","Fragments":["efficiency","efficiency"]},{"Key":"for efficiency","Fragments":["in","in"]},{"Key":"efficiency in","Fragments":["the","the"]},{"Key":"case before","Fragments":["diving","diving"]},{"Key":"before diving","Fragments":["into","into"]},{"Key":"diving into","Fragments":["a","a"]},{"Key":" `checkYell`","Fragments":["might"]},{"Key":"`checkYell` might","Fragments":["be"]},{"Key":"better implemented","Fragments":["using"]},{"Key":"like `::islower`","Fragments":["and"]},{"Key":"`::islower` and","Fragments":["`::isupper`,"]},{"Key":"and `::isupper`,","Fragments":["which"]},{"Key":"`::isupper`, which","Fragments":["could"]},{"Key":"facilitate locale-awareness.","Fragments":["As"]},{"Key":"locale-awareness. As","Fragments":["implemented,"]},{"Key":"As implemented,","Fragments":["it"]},{"Key":"implemented, it","Fragments":["is"]},{"Key":"only ASCII-aware.","Fragments":["Probably"]},{"Key":"ASCII-aware. Probably","Fragments":["fine"]},{"Key":"Probably fine","Fragments":["for"]},{"Key":"for something","Fragments":["throwaway"]},{"Key":"something throwaway","Fragments":["like"]},{"Key":"throwaway like","Fragments":["this,"]},{"Key":"general sense,","Fragments":["in"]},{"Key":"sense, in","Fragments":["2014,"]},{"Key":"in 2014,","Fragments":["case"]},{"Key":"2014, case","Fragments":["mappings"]},{"Key":"case mappings","Fragments":["can"]},{"Key":"mappings can","Fragments":["be"]},{"Key":" `checkQuestion`","Fragments":["would"]},{"Key":"`checkQuestion` would","Fragments":["invoke"]},{"Key":"invoke UB","Fragments":["if"]},{"Key":"UB if","Fragments":["called"]},{"Key":"string. You're","Fragments":["not"]},{"Key":"not calling","Fragments":["it"]},{"Key":"you `checkPoke`","Fragments":["first,"]},{"Key":"`checkPoke` first,","Fragments":["but"]},{"Key":"written more","Fragments":["robustly."]},{"Key":"Again, it's","Fragments":["refreshing","something"]},{"Key":"it's refreshing","Fragments":["to"]},{"Key":"refreshing to","Fragments":["see"]},{"Key":"being flashy","Fragments":["or"]},{"Key":"flashy or","Fragments":["complicated."]},{"Key":"and implemented","Fragments":["those"]},{"Key":"implemented those","Fragments":["regex"]},{"Key":"those regex","Fragments":["changes."]},{"Key":"regex changes.","Fragments":["Using"]},{"Key":"changes. Using","Fragments":["`xpr::space`"]},{"Key":"Using `xpr::space`","Fragments":["and"]},{"Key":"`xpr::space` and","Fragments":["`regex_match`"]},{"Key":"and `regex_match`","Fragments":["is"]},{"Key":"`regex_match` is","Fragments":["a"]},{"Key":"idea as","Fragments":["well."]},{"Key":"pretty good,","Fragments":["but","though"]},{"Key":"little simpler.","Fragments":["You","This"]},{"Key":"simpler. You","Fragments":["can"]},{"Key":"cut out","Fragments":["the"]},{"Key":"the longest","Fragments":["and","string","string"]},{"Key":"longest and","Fragments":["shortest"]},{"Key":"and shortest","Fragments":["strings,"]},{"Key":"shortest strings,","Fragments":["if"]},{"Key":"strings, if","Fragments":["you"]},{"Key":"you reframe","Fragments":["your"]},{"Key":"reframe your","Fragments":["loop"]},{"Key":"examine both","Fragments":["the"]},{"Key":"current character","Fragments":["in"]},{"Key":"both strings.","Fragments":["Or,"]},{"Key":"strings. Or,","Fragments":["you"]},{"Key":"Or, you","Fragments":["can"]},{"Key":"can eliminate","Fragments":["extra"]},{"Key":"eliminate extra","Fragments":["copy"]},{"Key":"operations using","Fragments":["string"]},{"Key":"It's too","Fragments":["bad"]},{"Key":"bad the","Fragments":["test"]},{"Key":"test looks","Fragments":["for"]},{"Key":"an ordered","Fragments":["container."]},{"Key":"ordered container.","Fragments":["I"]},{"Key":"container. I","Fragments":["am"]},{"Key":"familiar enough","Fragments":["with"]},{"Key":"enough with","Fragments":["Boost's"]},{"Key":"with Boost's","Fragments":["testing"]},{"Key":"Boost's testing","Fragments":["framework"]},{"Key":"testing framework","Fragments":["to"]},{"Key":"framework to","Fragments":["know","try"]},{"Key":"to this:","Fragments":["Does"]},{"Key":"this: Does","Fragments":["it"]},{"Key":"it provide","Fragments":["a"]},{"Key":"a means","Fragments":["of"]},{"Key":"means of","Fragments":["comparing"]},{"Key":"of comparing","Fragments":["unordered"]},{"Key":"comparing unordered","Fragments":["containers?"]},{"Key":"an `unordered_map`","Fragments":["the"]},{"Key":"`unordered_map` the","Fragments":["counting"]},{"Key":"counting phase","Fragments":["could"]},{"Key":"phase could","Fragments":["be"]},{"Key":"an amortized","Fragments":["`O(n)`"]},{"Key":"amortized `O(n)`","Fragments":["rather"]},{"Key":"`O(n)` rather","Fragments":["than"]},{"Key":"than `O(n","Fragments":["log"]},{"Key":"`O(n log","Fragments":["n)`."]},{"Key":"\u003e `checkPoke`","Fragments":["could"]},{"Key":" @ramona,","Fragments":["what's"]},{"Key":"@ramona, what's","Fragments":["funny"]},{"Key":"what's funny","Fragments":["is"]},{"Key":"funny is","Fragments":["I"]},{"Key":"is I","Fragments":["gave"]},{"Key":"gave @ramona","Fragments":["the"]},{"Key":"@ramona the","Fragments":["exact"]},{"Key":"exact opposite","Fragments":["nitpick"]},{"Key":"opposite nitpick","Fragments":["in"]},{"Key":"nitpick in","Fragments":["an"]},{"Key":"early revision.","Fragments":["lol!"]},{"Key":"is 0,","Fragments":["the"]},{"Key":"0, the","Fragments":["for"]},{"Key":"simply perform","Fragments":["0"]},{"Key":"perform 0","Fragments":["iterations,"]},{"Key":"0 iterations,","Fragments":["and"]},{"Key":"thus there","Fragments":["won't"]},{"Key":"there won't","Fragments":["be"]},{"Key":"any significant","Fragments":["efficiency"]},{"Key":"significant efficiency","Fragments":["lost."]},{"Key":"how cleanly","Fragments":["organized"]},{"Key":"cleanly organized","Fragments":["it"]},{"Key":"organized it","Fragments":["is."]},{"Key":"all whitespace","Fragments":["to","from","or"]},{"Key":"to illustrate","Fragments":["a"]},{"Key":"illustrate a","Fragments":["good"]},{"Key":"good knowledge","Fragments":["of"]},{"Key":"standard libraries.","Fragments":["Here"]},{"Key":"libraries. Here","Fragments":["are"]},{"Key":"are my","Fragments":["nitpicks:"]},{"Key":"that `*phrase.rbegin()`","Fragments":["needs"]},{"Key":"`*phrase.rbegin()` needs","Fragments":["an"]},{"Key":"an asterix","Fragments":["before"]},{"Key":"asterix before","Fragments":["it,"]},{"Key":"before it,","Fragments":["but"]},{"Key":"but expressions","Fragments":["locations"]},{"Key":"expressions locations","Fragments":["(e.g."]},{"Key":"locations (e.g.","Fragments":["`phrase.find_first_not_of`)"]},{"Key":"(e.g. `phrase.find_first_not_of`)","Fragments":["does"]},{"Key":"`phrase.find_first_not_of`) does","Fragments":["not."]},{"Key":"not. Seems","Fragments":["like"]},{"Key":"of isCaps,","Fragments":["you","and"]},{"Key":"isCaps, you","Fragments":["count"]},{"Key":"you count","Fragments":["the"]},{"Key":"of alphabetic","Fragments":["characters,"]},{"Key":"alphabetic characters,","Fragments":["and"]},{"Key":"are capitalized,","Fragments":["and"]},{"Key":"capitalized, and","Fragments":["then"]},{"Key":"then compare","Fragments":["the","the"]},{"Key":"entire phrase","Fragments":["is"]},{"Key":"is capitalized.","Fragments":["However,"]},{"Key":"capitalized. However,","Fragments":["note"]},{"Key":"However, note","Fragments":["that"]},{"Key":"note that","Fragments":["if","if","using"]},{"Key":"ever encounter","Fragments":["a"]},{"Key":"encounter a","Fragments":["character","lowercase"]},{"Key":"is alphabetic","Fragments":["but"]},{"Key":"alphabetic but","Fragments":["NOT"]},{"Key":"but NOT","Fragments":["capitalized,"]},{"Key":"NOT capitalized,","Fragments":["then"]},{"Key":"capitalized, then","Fragments":["there"]},{"Key":"two counts","Fragments":["to"]},{"Key":"counts to","Fragments":["ever"]},{"Key":"to ever","Fragments":["become"]},{"Key":"ever become","Fragments":["equal."]},{"Key":"become equal.","Fragments":["As"]},{"Key":"equal. As","Fragments":["such,"]},{"Key":"As such,","Fragments":["I"]},{"Key":"such, I","Fragments":["think"]},{"Key":"the counts,","Fragments":["and"]},{"Key":"counts, and","Fragments":["can"]},{"Key":"immediately return","Fragments":["false"]},{"Key":"false out","Fragments":["of"]},{"Key":" @pasquale","Fragments":["Woops,"]},{"Key":"@pasquale Woops,","Fragments":["you're"]},{"Key":"Woops, you're","Fragments":["right."]},{"Key":"right. :D","Fragments":["Zero-length;"]},{"Key":":D Zero-length;","Fragments":["no"]},{"Key":"Zero-length; no","Fragments":["iterations,"]},{"Key":"no iterations,","Fragments":["no"]},{"Key":"iterations, no","Fragments":["extra"]},{"Key":"no extra","Fragments":["work.","step."]},{"Key":"extra work.","Fragments":[":)"]},{"Key":"while loop,","Fragments":["which","but"]},{"Key":"which sort","Fragments":["of"]},{"Key":"of feels","Fragments":["like"]},{"Key":"a contortion","Fragments":["just"]},{"Key":"contortion just","Fragments":["to"]},{"Key":"more straightforward","Fragments":["approach","than"]},{"Key":"straightforward approach","Fragments":["of"]},{"Key":"of dealing","Fragments":["with"]},{"Key":"I avoid","Fragments":["the"]},{"Key":"iterator contortions","Fragments":["by"]},{"Key":"contortions by","Fragments":["using"]},{"Key":"an old-fashioned","Fragments":["C-style"]},{"Key":"old-fashioned C-style","Fragments":["for"]},{"Key":"C-style for","Fragments":["loop"]},{"Key":"after detecting","Fragments":["the"]},{"Key":"detecting the","Fragments":["minimum"]},{"Key":"minimum input","Fragments":["string"]},{"Key":"string length.","Fragments":["To"]},{"Key":"length. To","Fragments":["me"]},{"Key":"To me","Fragments":["this","the","saying"]},{"Key":"this feels","Fragments":["more"]},{"Key":"straightforward than","Fragments":["the"]},{"Key":"iterator version.","Fragments":["But"]},{"Key":"does expose","Fragments":["the"]},{"Key":"expose the","Fragments":["ugliness"]},{"Key":"the ugliness","Fragments":["of","of"]},{"Key":"ugliness of","Fragments":["playing","the"]},{"Key":"of playing","Fragments":["with"]},{"Key":"an expert","Fragments":["with","in"]},{"Key":"expert with","Fragments":["regular"]},{"Key":"expressions so","Fragments":["this"]},{"Key":"an attempt","Fragments":["to","at"]},{"Key":"to them.","Fragments":["I"]},{"Key":"also wanted","Fragments":["to"]},{"Key":"using strtok","Fragments":["as"]},{"Key":"strtok as","Fragments":["I"]},{"Key":"like its","Fragments":["stateful"]},{"Key":"its stateful","Fragments":["nature"]},{"Key":"stateful nature","Fragments":["and"]},{"Key":"nature and","Fragments":["would"]},{"Key":"my day","Fragments":["to"]},{"Key":"day to","Fragments":["day"]},{"Key":"to day","Fragments":["work."]},{"Key":"have writen","Fragments":["a"]},{"Key":"writen a","Fragments":["simple"]},{"Key":"simple helper","Fragments":["function"]},{"Key":"to normalise","Fragments":["everything"]},{"Key":"normalise everything","Fragments":["to"]},{"Key":"case but","Fragments":["if"]},{"Key":"to know.","Fragments":["I"]},{"Key":"know. I","Fragments":["am"]},{"Key":"aware you","Fragments":["can"]},{"Key":"do character","Fragments":["replacement"]},{"Key":"character replacement","Fragments":["but"]},{"Key":"replacement but","Fragments":["feel"]},{"Key":"but feel","Fragments":["that"]},{"Key":"little 'heavy'","Fragments":["for"]},{"Key":"'heavy' for","Fragments":["just"]},{"Key":"just lower","Fragments":["casing"]},{"Key":"lower casing","Fragments":["everything."]},{"Key":"have attempted","Fragments":["to"]},{"Key":"attempted to","Fragments":["separate","catalog"]},{"Key":"final choice","Fragments":["of"]},{"Key":"the combinatorial","Fragments":["logic"]},{"Key":"combinatorial logic","Fragments":["that"]},{"Key":"that processes","Fragments":["the"]},{"Key":"processes the","Fragments":["input."]},{"Key":"input. Using","Fragments":["a"]},{"Key":"few helper","Fragments":["functions"]},{"Key":"that extend","Fragments":["some"]},{"Key":"extend some","Fragments":["of"]},{"Key":"standard C","Fragments":["character"]},{"Key":"C character","Fragments":["functions"]},{"Key":"character functions","Fragments":["to"]},{"Key":"std::string versions","Fragments":["makes"]},{"Key":"versions makes","Fragments":["the"]},{"Key":"final logic","Fragments":["resonably"]},{"Key":"logic resonably","Fragments":["simple."]},{"Key":"compare outputs","Fragments":["of"]},{"Key":"outputs of","Fragments":["functions"]},{"Key":"like std::isalpha","Fragments":["against"]},{"Key":"std::isalpha against","Fragments":["0"]},{"Key":"against 0","Fragments":["rather"]},{"Key":"0 rather","Fragments":["than","than"]},{"Key":"than allow","Fragments":["implicit"]},{"Key":"allow implicit","Fragments":["bool"]},{"Key":"implicit bool","Fragments":["conversions"]},{"Key":"bool conversions","Fragments":["because"]},{"Key":"conversions because","Fragments":["I"]},{"Key":"good practise","Fragments":["to"]},{"Key":"practise to","Fragments":["treat"]},{"Key":"treat functions","Fragments":["that"]},{"Key":"return int","Fragments":["differently"]},{"Key":"int differently","Fragments":["to"]},{"Key":"differently to","Fragments":["those"]},{"Key":"those that","Fragments":["return"]},{"Key":"return bool.","Fragments":["In"]},{"Key":"bool. In","Fragments":["this"]},{"Key":"much difference","Fragments":["but"]},{"Key":"difference but","Fragments":["it"]},{"Key":"in remembering","Fragments":["that"]},{"Key":"remembering that","Fragments":["functions"]},{"Key":"that functions","Fragments":["like"]},{"Key":"like std::strcmp","Fragments":["returns"]},{"Key":"std::strcmp returns","Fragments":["-1/0/1."]},{"Key":" PS","Fragments":["-"]},{"Key":"PS -","Fragments":["still"]},{"Key":"- still","Fragments":["trying"]},{"Key":"the std::regex","Fragments":["library."]},{"Key":"std::regex library.","Fragments":["I"]},{"Key":"library. I","Fragments":["would"]},{"Key":"the std::string.empty()","Fragments":["function"]},{"Key":"std::string.empty() function","Fragments":["instead"]},{"Key":"checking length","Fragments":["\u003c"]},{"Key":"length \u003c","Fragments":["1."]},{"Key":"\u003c 1.","Fragments":["The"]},{"Key":"function more","Fragments":["clearly"]},{"Key":"may 'anecdotally'","Fragments":["have"]},{"Key":"'anecdotally' have","Fragments":["some"]},{"Key":"some performance","Fragments":["differences"]},{"Key":"performance differences","Fragments":["(but"]},{"Key":"differences (but","Fragments":["clarity"]},{"Key":"(but clarity","Fragments":["is"]},{"Key":"clarity is","Fragments":["the"]},{"Key":"that fro","Fragments":["this"]},{"Key":"fro this","Fragments":["problem"]},{"Key":"problem use","Fragments":["of"]},{"Key":"regex libraries","Fragments":["may","that"]},{"Key":"libraries may","Fragments":["be"]},{"Key":"be heavy","Fragments":["handed"]},{"Key":"heavy handed","Fragments":["however"]},{"Key":"handed however","Fragments":["your"]},{"Key":"however your","Fragments":["submission"]},{"Key":"submission still","Fragments":["fails"]},{"Key":"still fails","Fragments":["a"]},{"Key":"fails a","Fragments":["few"]},{"Key":"example 'shouting_with_no_exclamation_mark'","Fragments":["uses"]},{"Key":"'shouting_with_no_exclamation_mark' uses","Fragments":["the"]},{"Key":"input \"I","Fragments":["HATE"]},{"Key":"\"I HATE","Fragments":["YOU\"."]},{"Key":"HATE YOU\".","Fragments":["So"]},{"Key":"YOU\". So","Fragments":["the"]},{"Key":"final punctuation","Fragments":["is"]},{"Key":"punctuation is","Fragments":["not"]},{"Key":"not enough","Fragments":["to"]},{"Key":" Calling","Fragments":["the","```string.back()```"]},{"Key":"Calling the","Fragments":["std::string.back"]},{"Key":"the std::string.back","Fragments":["function"]},{"Key":"std::string.back function","Fragments":["on"]},{"Key":"string \"\"","Fragments":["should"]},{"Key":"\"\" should","Fragments":["not"]},{"Key":"done an","Fragments":["is"]},{"Key":"an is","Fragments":["underfined"]},{"Key":"is underfined","Fragments":["behaviour."]},{"Key":"underfined behaviour.","Fragments":["You"]},{"Key":"behaviour. You","Fragments":["might"]},{"Key":"get NULL","Fragments":["in"]},{"Key":"NULL in","Fragments":["a"]},{"Key":"a debug","Fragments":["build"]},{"Key":"debug build","Fragments":["but"]},{"Key":"build but","Fragments":["this"]},{"Key":"Testing agains","Fragments":["the"]},{"Key":"agains the","Fragments":["NULL"]},{"Key":"the NULL","Fragments":["character","character."]},{"Key":"NULL character","Fragments":["'\\0'"]},{"Key":"character '\\0'","Fragments":["is"]},{"Key":"'\\0' is","Fragments":["probably"]},{"Key":"intention and","Fragments":["might"]},{"Key":"whitespace input","Fragments":["\""]},{"Key":"input \"","Fragments":["\"."]},{"Key":"boost 'iequals'","Fragments":["simplified"]},{"Key":"'iequals' simplified","Fragments":["the"]},{"Key":"lot. But","Fragments":["I"]},{"Key":"the solutiion","Fragments":["looks"]},{"Key":"solutiion looks","Fragments":["too"]},{"Key":"looks too","Fragments":["patchy."]},{"Key":"too patchy.","Fragments":["Will"]},{"Key":"patchy. Will","Fragments":["try"]},{"Key":"Will try","Fragments":["to"]},{"Key":"better solution","Fragments":["if"]},{"Key":"solution if","Fragments":["I","it"]},{"Key":"Changed to","Fragments":["use"]},{"Key":"the std::transform","Fragments":["algorithm","from"]},{"Key":"std::transform algorithm","Fragments":["to"]},{"Key":"string lower","Fragments":["case."]},{"Key":"the std::map","Fragments":["container"]},{"Key":"std::map container","Fragments":["is"]},{"Key":"container is","Fragments":["just"]},{"Key":"int it","Fragments":["can"]},{"Key":"can more","Fragments":["clearly","easily"]},{"Key":"clearly be","Fragments":["updated"]},{"Key":"be updated","Fragments":["using"]},{"Key":"updated using","Fragments":["the"]},{"Key":"the []operator","Fragments":["and"]},{"Key":"[]operator and","Fragments":["++operator"]},{"Key":"and ++operator","Fragments":["rather"]},{"Key":"++operator rather","Fragments":["than"]},{"Key":"than needing","Fragments":["the"]},{"Key":"the insert()","Fragments":["function."]},{"Key":"generally discouraged","Fragments":["and"]},{"Key":"discouraged and","Fragments":["the"]},{"Key":"have here","Fragments":["really"]},{"Key":"here really","Fragments":["don't"]},{"Key":"suggest refactoing","Fragments":["them"]},{"Key":"refactoing them","Fragments":["into"]},{"Key":"into function","Fragments":["arguments"]},{"Key":"and made","Fragments":["local","a"]},{"Key":"made local","Fragments":["to"]},{"Key":"the words()","Fragments":["function."]},{"Key":"of GetNextWord()","Fragments":["is"]},{"Key":"GetNextWord() is","Fragments":["similar"]},{"Key":"the std::strtok","Fragments":["function"]},{"Key":"std::strtok function","Fragments":["in"]},{"Key":"is stateful.","Fragments":["You"]},{"Key":"stateful. You","Fragments":["might"]},{"Key":"to investigate","Fragments":["this"]},{"Key":"investigate this","Fragments":["function"]},{"Key":" @micheal","Fragments":["thank"]},{"Key":"@micheal thank","Fragments":["you"]},{"Key":"tips. Submitted","Fragments":["new"]},{"Key":"Submitted new","Fragments":["version,"]},{"Key":"new version,","Fragments":["looks"]},{"Key":"version, looks","Fragments":["much"]},{"Key":"Using stl","Fragments":["algorithms"]},{"Key":"stl algorithms","Fragments":["instead"]},{"Key":"algorithms instead","Fragments":["of"]},{"Key":"manual checks","Fragments":["(as"]},{"Key":"checks (as","Fragments":["suggested"]},{"Key":"(as suggested","Fragments":["by"]},{"Key":"for trimming.","Fragments":["Also"]},{"Key":"trimming. Also","Fragments":["passes"]},{"Key":"Also passes","Fragments":["a"]},{"Key":"passes a","Fragments":["new"]},{"Key":"test when","Fragments":["a"]},{"Key":"question contains","Fragments":["trailing"]},{"Key":"contains trailing","Fragments":["whitespaces."]},{"Key":" Kept","Fragments":["this","this"]},{"Key":"Kept this","Fragments":["quite","simple"]},{"Key":"this quite","Fragments":["simple","easy"]},{"Key":"and avoided","Fragments":["the"]},{"Key":"avoided the","Fragments":["use"]},{"Key":"and went","Fragments":["for"]},{"Key":"that directly","Fragments":["indexes"]},{"Key":"directly indexes","Fragments":["the"]},{"Key":"The std::min","Fragments":["function"]},{"Key":"std::min function","Fragments":["ensures"]},{"Key":"function ensures","Fragments":["we"]},{"Key":"ensures we","Fragments":["don't"]},{"Key":"don't extend","Fragments":["past"]},{"Key":"extend past","Fragments":["the"]},{"Key":"of either","Fragments":["string"]},{"Key":"either string","Fragments":["and","being"]},{"Key":"we iterate","Fragments":["backwards"]},{"Key":"iterate backwards","Fragments":["for","through"]},{"Key":"backwards for","Fragments":["the"]},{"Key":"signature could","Fragments":["declare"]},{"Key":"could declare","Fragments":["the","your"]},{"Key":"input arguments","Fragments":["as"]},{"Key":"as 'const","Fragments":["std::string"]},{"Key":"'const std::string","Fragments":["\u0026'"]},{"Key":"std::string \u0026'","Fragments":["since"]},{"Key":"\u0026' since","Fragments":["there"]},{"Key":"its inputs.","Fragments":["Avoids"]},{"Key":"inputs. Avoids","Fragments":["a"]},{"Key":"Avoids a","Fragments":["copy"]},{"Key":"both inputs","Fragments":["being"]},{"Key":"inputs being","Fragments":["made"]},{"Key":"being made","Fragments":["from"]},{"Key":"made from","Fragments":["the"]},{"Key":"The recusive","Fragments":["call"]},{"Key":"recusive call","Fragments":["to"]},{"Key":"to swap","Fragments":["the","the"]},{"Key":"swap the","Fragments":["arguments","argument"]},{"Key":"arguments is","Fragments":["an"]},{"Key":"interesting choice.","Fragments":["For"]},{"Key":"choice. For","Fragments":["clarity"]},{"Key":"For clarity","Fragments":["I"]},{"Key":"clarity I","Fragments":["would"]},{"Key":"would separate","Fragments":["this"]},{"Key":"separate this","Fragments":["with"]},{"Key":"second function.","Fragments":["For"]},{"Key":"function. For","Fragments":["example","a"]},{"Key":"example have","Fragments":["your"]},{"Key":"your hamming::compute()","Fragments":["function"]},{"Key":"hamming::compute() function","Fragments":["perform"]},{"Key":"function perform","Fragments":["this","the"]},{"Key":"perform this","Fragments":["check","similar"]},{"Key":"this check","Fragments":["and","as"]},{"Key":"a hamming::compute_impl()","Fragments":["function"]},{"Key":"hamming::compute_impl() function","Fragments":["with"]},{"Key":"way around.","Fragments":["This"]},{"Key":"around. This","Fragments":["implementation"]},{"Key":"This implementation","Fragments":["function"]},{"Key":"implementation function","Fragments":["then"]},{"Key":"function then","Fragments":["contains"]},{"Key":"then contains","Fragments":["the"]},{"Key":"the 'guts'","Fragments":["of"]},{"Key":"'guts' of","Fragments":["the"]},{"Key":"longest string","Fragments":["in","for"]},{"Key":"Hi, thank","Fragments":["you"]},{"Key":"thinking there","Fragments":["would"]},{"Key":"more consise","Fragments":["and"]},{"Key":"consise and","Fragments":["simple"]},{"Key":"simple implementation","Fragments":["of"]},{"Key":"isCaps, and","Fragments":["I"]},{"Key":"correct, removing","Fragments":["the"]},{"Key":"counts and","Fragments":["simply"]},{"Key":"any lowercase","Fragments":["alpha","letters."]},{"Key":"lowercase alpha","Fragments":["character"]},{"Key":"find iterators","Fragments":["more"]},{"Key":"iterators more","Fragments":["difficult"]},{"Key":"read than","Fragments":["function"]},{"Key":"than function","Fragments":["calls"]},{"Key":"calls or","Fragments":["indices"]},{"Key":"or indices","Fragments":["also,"]},{"Key":"indices also,","Fragments":["so"]},{"Key":"also, so","Fragments":["I"]},{"Key":"the rbegin()","Fragments":["call"]},{"Key":"rbegin() call","Fragments":["with"]},{"Key":"call with","Fragments":["a"]},{"Key":"readable string","Fragments":["function."]},{"Key":"realize this","Fragments":["isn't"]},{"Key":"best code","Fragments":["ever"]},{"Key":"code ever","Fragments":["here."]},{"Key":"ever here.","Fragments":["But"]},{"Key":"exercise too","Fragments":["much"]},{"Key":"much so","Fragments":["I"]},{"Key":"just kinda","Fragments":["did"]},{"Key":"kinda did","Fragments":["it"]},{"Key":"without putting","Fragments":["in"]},{"Key":"in too","Fragments":["much"]},{"Key":"much effort.","Fragments":["Maybe"]},{"Key":"I'll come","Fragments":["back"]},{"Key":"back at","Fragments":["some"]},{"Key":"Looking good!","Fragments":["I"]},{"Key":"more suggestions","Fragments":["for"]},{"Key":"( std::string::size_type","Fragments":["i"]},{"Key":"std::string::size_type i","Fragments":["="]},{"Key":"\u003c phrase.length();","Fragments":["++i"]},{"Key":"phrase.length(); ++i","Fragments":[")"]},{"Key":"= phrase.at(","Fragments":["i"]},{"Key":"phrase.at( i","Fragments":[");"]},{"Key":"if (anyExpression","Fragments":["=="]},{"Key":"(anyExpression ==","Fragments":["true)"]},{"Key":"if( containsAlpha","Fragments":["=="]},{"Key":"containsAlpha ==","Fragments":["false"]},{"Key":"== false","Fragments":[")"]},{"Key":"made use","Fragments":["of"]},{"Key":"Boost to_upper_copy","Fragments":["since"]},{"Key":"to_upper_copy since","Fragments":["boost"]},{"Key":"is mandated","Fragments":["in"]},{"Key":"mandated in","Fragments":["the"]},{"Key":"test description","Fragments":["anyway."]},{"Key":"used braces","Fragments":["even"]},{"Key":"braces even","Fragments":["for"]},{"Key":"for 1","Fragments":["line"]},{"Key":"1 line","Fragments":["following"]},{"Key":"line following","Fragments":["an"]},{"Key":"following an","Fragments":["if"]},{"Key":"statement for","Fragments":["no","more"]},{"Key":"reason other","Fragments":["than"]},{"Key":"than personal","Fragments":["choice,"]},{"Key":"personal choice,","Fragments":["though"]},{"Key":"choice, though","Fragments":["I"]},{"Key":"it clutters","Fragments":["the"]},{"Key":"clutters the","Fragments":["code","namespace,"]},{"Key":"code too","Fragments":["much","for"]},{"Key":"pretty C-like,","Fragments":["and"]},{"Key":"C-like, and","Fragments":["that"]},{"Key":"it slightly","Fragments":["harder"]},{"Key":"slightly harder","Fragments":["to"]},{"Key":"read since","Fragments":["it"]},{"Key":"it spreads","Fragments":["the"]},{"Key":"spreads the","Fragments":["logic"]},{"Key":"logic over","Fragments":["more"]},{"Key":"more lines.","Fragments":["It"]},{"Key":"lines. It","Fragments":["could"]},{"Key":"been possible","Fragments":["to"]},{"Key":"replace some","Fragments":["of"]},{"Key":"the functions:","Fragments":["since"]},{"Key":"functions: since","Fragments":["the"]},{"Key":"specification for","Fragments":["C++"]},{"Key":"C++ asks","Fragments":["for"]},{"Key":"a Boost","Fragments":["installation"]},{"Key":"Boost installation","Fragments":["to"]},{"Key":"installation to","Fragments":["run"]},{"Key":"tests, you","Fragments":["could","only","should"]},{"Key":"used boost's","Fragments":["to_upper"]},{"Key":"boost's to_upper","Fragments":["functions"]},{"Key":"to_upper functions","Fragments":["rather"]},{"Key":"functions rather","Fragments":["than"]},{"Key":"than write","Fragments":["your"]},{"Key":"bool and","Fragments":["int"]},{"Key":"and int","Fragments":["comparisons"]},{"Key":"int comparisons","Fragments":["makes"]},{"Key":"comparisons makes","Fragments":["sense"]},{"Key":"but looks","Fragments":["a"]},{"Key":"someone not","Fragments":["used"]},{"Key":" P.S:","Fragments":["You"]},{"Key":"P.S: You","Fragments":["can't"]},{"Key":"can't submit","Fragments":["more","*.h"]},{"Key":"at once!","Fragments":["The"]},{"Key":"once! The","Fragments":["first"]},{"Key":"first paragraph","Fragments":["here"]},{"Key":"paragraph here","Fragments":["explains"]},{"Key":"here explains","Fragments":["it:"]},{"Key":"- `long","Fragments":["long`"]},{"Key":"`long long`","Fragments":["at"]},{"Key":"long` at","Fragments":["least"]},{"Key":"- `long`","Fragments":["at"]},{"Key":"`long` at","Fragments":["least"]},{"Key":"- `int`","Fragments":["and"]},{"Key":"`int` and","Fragments":["`short`"]},{"Key":"and `short`","Fragments":["at"]},{"Key":"`short` at","Fragments":["least"]},{"Key":"simple algorithm","Fragments":["iterators","consider"]},{"Key":"algorithm iterators","Fragments":["don't"]},{"Key":"iterators don't","Fragments":["simplify"]},{"Key":"don't simplify","Fragments":["the"]},{"Key":"design or","Fragments":["interpretation."]},{"Key":"the ```top```","Fragments":["variable"]},{"Key":"```top``` variable","Fragments":["as"]},{"Key":"loop index","Fragments":["to","\"i\","]},{"Key":"simpler. This","Fragments":["way"]},{"Key":"can convert","Fragments":["the"]},{"Key":"strings. Using","Fragments":["```std::min()```"]},{"Key":"Using ```std::min()```","Fragments":["means"]},{"Key":"```std::min()``` means","Fragments":["you"]},{"Key":"always index","Fragments":["valid"]},{"Key":"index valid","Fragments":["characters"]},{"Key":"the 'NULL'","Fragments":["character","character"]},{"Key":"'NULL' character","Fragments":["```\\0```","but"]},{"Key":"character ```\\0```","Fragments":["is"]},{"Key":"```\\0``` is","Fragments":["very"]},{"Key":"very C","Fragments":["like"]},{"Key":"C like","Fragments":["and"]},{"Key":"are dealing","Fragments":["with","with"]},{"Key":"with ```std::string```","Fragments":["classes"]},{"Key":"```std::string``` classes","Fragments":["they"]},{"Key":"classes they","Fragments":["provide"]},{"Key":"provide enough","Fragments":["functions"]},{"Key":"enough functions","Fragments":["that"]},{"Key":"be avoided.","Fragments":["I"]},{"Key":"avoided. I","Fragments":["would"]},{"Key":"changing to","Fragments":["use"]},{"Key":"length function","Fragments":["or"]},{"Key":"comparison of","Fragments":["the","string"]},{"Key":"shortest one","Fragments":["might"]},{"Key":"not work.","Fragments":["a"]},{"Key":"work. a","Fragments":["comparison"]},{"Key":"objects uses","Fragments":["```std::basic_string::compare```"]},{"Key":"uses ```std::basic_string::compare```","Fragments":["which"]},{"Key":"```std::basic_string::compare``` which","Fragments":["compares"]},{"Key":"which compares","Fragments":["characters"]},{"Key":"compares characters","Fragments":["not"]},{"Key":"characters not","Fragments":["the"]},{"Key":"of strings.","Fragments":["You"]},{"Key":"to ```strand2.length()","Fragments":["\u003c"]},{"Key":"```strand2.length() \u003c","Fragments":["strand1.length()```"]},{"Key":"that indexing","Fragments":["a"]},{"Key":"indexing a","Fragments":["```std::string```","string"]},{"Key":"```std::string``` with","Fragments":["its"]},{"Key":"length returned","Fragments":["NULL."]},{"Key":"returned NULL.","Fragments":["I"]},{"Key":"NULL. I","Fragments":["thought"]},{"Key":"thought an","Fragments":["exception"]},{"Key":"exception would","Fragments":["occur."]},{"Key":"would occur.","Fragments":["Thanks"]},{"Key":"occur. Thanks","Fragments":["for"]},{"Key":"pointing this","Fragments":["out.","out."]},{"Key":"addition you","Fragments":["could"]},{"Key":"your ```str2Length```","Fragments":["variable"]},{"Key":"```str2Length``` variable","Fragments":["as"]},{"Key":"```const size_t","Fragments":["str2Length```"]},{"Key":"size_t str2Length```","Fragments":["since"]},{"Key":"str2Length``` since","Fragments":["it"]},{"Key":"feeling your","Fragments":["code"]},{"Key":"isn't doing","Fragments":["what"]},{"Key":"doing what","Fragments":["you"]},{"Key":"doing. Calling","Fragments":["```max(s1,s2).size()```"]},{"Key":"Calling ```max(s1,s2).size()```","Fragments":["is"]},{"Key":"```max(s1,s2).size()``` is","Fragments":["not"]},{"Key":"every input.","Fragments":["What"]},{"Key":"input. What","Fragments":["it"]},{"Key":"What it","Fragments":["will"]},{"Key":"is take","Fragments":["the"]},{"Key":"use ```std::basic_string::compare```","Fragments":["and"]},{"Key":"```std::basic_string::compare``` and","Fragments":["return"]},{"Key":"return which","Fragments":["one"]},{"Key":"which one","Fragments":["would","is"]},{"Key":"would come","Fragments":["second"]},{"Key":"come second","Fragments":["in"]},{"Key":"second in","Fragments":["a"]},{"Key":"dictionary order.","Fragments":["So"]},{"Key":"order. So","Fragments":["you"]},{"Key":"call ```size()```","Fragments":["on"]},{"Key":"```size()``` on","Fragments":["that"]},{"Key":"that string.","Fragments":["Unfortunately"]},{"Key":"string. Unfortunately","Fragments":["the"]},{"Key":"Unfortunately the","Fragments":["test"]},{"Key":"pretty simple","Fragments":["and"]},{"Key":"compare things","Fragments":["like"]},{"Key":"like \"AAA\"","Fragments":["with"]},{"Key":"\"AAA\" with","Fragments":["\"AAAG\"."]},{"Key":"with \"AAAG\".","Fragments":["So"]},{"Key":"\"AAAG\". So","Fragments":["you"]},{"Key":"4 meaning","Fragments":["you"]},{"Key":"compare at","Fragments":["some"]},{"Key":"point ```s1[4]","Fragments":["!="]},{"Key":"```s1[4] !=","Fragments":["s2[4]```."]},{"Key":"!= s2[4]```.","Fragments":["Indexing"]},{"Key":"s2[4]```. Indexing","Fragments":["```s1```"]},{"Key":"Indexing ```s1```","Fragments":["like"]},{"Key":"```s1``` like","Fragments":["this"]},{"Key":"ok as","Fragments":["it"]},{"Key":"character but","Fragments":["will"]},{"Key":"distance incorrectly.","Fragments":["The"]},{"Key":"incorrectly. The","Fragments":["more"]},{"Key":"The more","Fragments":["important"]},{"Key":"important issue","Fragments":["is"]},{"Key":"if s2","Fragments":["was"]},{"Key":"s2 was","Fragments":["longer"]},{"Key":"was longer","Fragments":["(eg"]},{"Key":"longer (eg","Fragments":["\"AAAGG\")"]},{"Key":"(eg \"AAAGG\")","Fragments":["it"]},{"Key":"\"AAAGG\") it","Fragments":["causes"]},{"Key":"it causes","Fragments":["you","undefined"]},{"Key":"causes you","Fragments":["to"]},{"Key":"index ```s1[5]","Fragments":["!="]},{"Key":"```s1[5] !=","Fragments":["s2[5]```"]},{"Key":"!= s2[5]```","Fragments":["you"]},{"Key":"s2[5]``` you","Fragments":["get"]},{"Key":"get undefined","Fragments":["behaviour"]},{"Key":"undefined behaviour","Fragments":["because","so"]},{"Key":"behaviour because","Fragments":["of"]},{"Key":"of indexing","Fragments":["a"]},{"Key":"string past","Fragments":["its"]},{"Key":"past its","Fragments":["length."]},{"Key":"performance point","Fragments":["of"]},{"Key":"view max()","Fragments":["and"]},{"Key":"max() and","Fragments":["size()"]},{"Key":"and size()","Fragments":["get"]},{"Key":"size() get","Fragments":["called"]},{"Key":"get called","Fragments":["every"]},{"Key":"called every","Fragments":["iteration"]},{"Key":"iteration which","Fragments":["is"]},{"Key":"result doesn't","Fragments":["change."]},{"Key":"change. You","Fragments":["can"]},{"Key":"can compute","Fragments":["this"]},{"Key":"compute this","Fragments":["once"]},{"Key":"once before","Fragments":["the","the"]},{"Key":"simple. If","Fragments":["you"]},{"Key":"characters change","Fragments":["to"]},{"Key":"- Continued","Fragments":["using"]},{"Key":"Continued using","Fragments":["xpressive"]},{"Key":"using xpressive","Fragments":["lib"]},{"Key":"xpressive lib","Fragments":["with"]},{"Key":"lib with","Fragments":["this"]},{"Key":"one, this","Fragments":["time"]},{"Key":"time using","Fragments":["the","regex","a"]},{"Key":"regex iterator","Fragments":["to"]},{"Key":"- Made","Fragments":["the"]},{"Key":"Made the","Fragments":["choice"]},{"Key":"the choice","Fragments":["to"]},{"Key":"all lowercase","Fragments":["before"]},{"Key":"lowercase before","Fragments":["checking"]},{"Key":"for matches.","Fragments":["I"]},{"Key":"matches. I","Fragments":["could"]},{"Key":"an xpr::icase","Fragments":["to"]},{"Key":"xpr::icase to","Fragments":["search"]},{"Key":"search through","Fragments":["the"]},{"Key":"changing it","Fragments":["but","any."]},{"Key":"still needed","Fragments":["to"]},{"Key":"some manipulation","Fragments":["to"]},{"Key":"manipulation to","Fragments":["populate"]},{"Key":"to populate","Fragments":["the"]},{"Key":"populate the","Fragments":["map"]},{"Key":"map correctly.","Fragments":["I"]},{"Key":"correctly. I","Fragments":["figured"]},{"Key":"to boost::algorithm::to_lower","Fragments":["was"]},{"Key":"boost::algorithm::to_lower was","Fragments":["cheapest"]},{"Key":"was cheapest","Fragments":["option."]},{"Key":"cheapest option.","Fragments":["Curious"]},{"Key":"option. Curious","Fragments":["to"]},{"Key":"Curious to","Fragments":["see"]},{"Key":"other creative","Fragments":["ways."]},{"Key":"the to_lower_copy.","Fragments":["Probably"]},{"Key":"to_lower_copy. Probably","Fragments":["get"]},{"Key":"Probably get","Fragments":["a"]},{"Key":"little performance","Fragments":["boost"]},{"Key":"performance boost","Fragments":["by"]},{"Key":"boost by","Fragments":["performing"]},{"Key":"by performing","Fragments":["the"]},{"Key":"performing the","Fragments":["lowercase"]},{"Key":"the lowercase","Fragments":["transformation"]},{"Key":"lowercase transformation","Fragments":["once"]},{"Key":"transformation once","Fragments":["before"]},{"Key":"at descending","Fragments":["using"]},{"Key":"descending using","Fragments":["a"]},{"Key":"simplifies the","Fragments":["code."]},{"Key":" Nevertheless,","Fragments":["I'll"]},{"Key":"Nevertheless, I'll","Fragments":["upload"]},{"Key":"upload it","Fragments":["for","soon."]},{"Key":"seemed as","Fragments":["though"]},{"Key":"as though","Fragments":["it"]},{"Key":"be overkill.","Fragments":["The"]},{"Key":"overkill. The","Fragments":["next"]},{"Key":"next logical","Fragments":["step"]},{"Key":"logical step","Fragments":["was"]},{"Key":"step was","Fragments":["a"]},{"Key":"a functor,","Fragments":["but"]},{"Key":"functor, but","Fragments":["I"]},{"Key":"prefer callbacks","Fragments":["and"]},{"Key":"callbacks and","Fragments":["function"]},{"Key":"function pointers.","Fragments":["I"]},{"Key":"pointers. I","Fragments":["finally"]},{"Key":"I finally","Fragments":["settled"]},{"Key":"finally settled","Fragments":["on"]},{"Key":"settled on","Fragments":["a"]},{"Key":"named lambda","Fragments":["inside"]},{"Key":"lambda inside","Fragments":["a"]},{"Key":"scope operator","Fragments":["usage."]},{"Key":"a `for","Fragments":["(auto"]},{"Key":"str)` iteration","Fragments":["method,"]},{"Key":"iteration method,","Fragments":["but"]},{"Key":"had already","Fragments":["written"]},{"Key":"already written","Fragments":["the"]},{"Key":"written the","Fragments":["code"]},{"Key":"pointer work.","Fragments":["I"]},{"Key":"go back,","Fragments":["make"]},{"Key":"back, make","Fragments":["the"]},{"Key":"string `const`","Fragments":["and"]},{"Key":"other flags","Fragments":["to"]},{"Key":"flags to","Fragments":["determine"]},{"Key":"if non-whitespace","Fragments":["characters"]},{"Key":"non-whitespace characters","Fragments":["were"]},{"Key":"were found,","Fragments":["but"]},{"Key":"found, but","Fragments":["I"]},{"Key":"working variables","Fragments":["to"]},{"Key":" Regular","Fragments":["expressions"]},{"Key":"Regular expressions","Fragments":["did"]},{"Key":"expressions did","Fragments":["not"]},{"Key":"fit when","Fragments":["I"]},{"Key":"be seen","Fragments":["as"]},{"Key":"seen as","Fragments":["a"]},{"Key":"a simplification","Fragments":["of"]},{"Key":"simplification of","Fragments":["iteration"]},{"Key":"of iteration","Fragments":["#2"]},{"Key":"iteration #2","Fragments":["since"]},{"Key":"#2 since","Fragments":["it"]},{"Key":"a c-style","Fragments":["for"]},{"Key":"c-style for","Fragments":["loop,"]},{"Key":"and descends","Fragments":["from"]},{"Key":"descends from","Fragments":["top-1"]},{"Key":"from top-1","Fragments":["to"]},{"Key":"top-1 to","Fragments":["0"]},{"Key":"than from","Fragments":["0"]},{"Key":"from 0","Fragments":["to"]},{"Key":"really better,","Fragments":["but,"]},{"Key":"better, but,","Fragments":["well..."]},{"Key":"but, well...","Fragments":["possibly."]},{"Key":"well... possibly.","Fragments":[";)"]},{"Key":"Now we've","Fragments":["got"]},{"Key":"we've got","Fragments":["the"]},{"Key":"2nd and","Fragments":["3rd"]},{"Key":"and 3rd","Fragments":["iteration"]},{"Key":"Converted from","Fragments":["static"]},{"Key":"from static","Fragments":["class"]},{"Key":"class variables","Fragments":["to"]},{"Key":"to namespace.","Fragments":["Though"]},{"Key":"namespace. Though","Fragments":["it"]},{"Key":"Though it","Fragments":["makes"]},{"Key":"makes little","Fragments":["difference"]},{"Key":"little difference","Fragments":["for"]},{"Key":"difference for","Fragments":["this"]},{"Key":"felt influenced","Fragments":["by"]},{"Key":"influenced by","Fragments":["a"]},{"Key":"great stack","Fragments":["overflow"]},{"Key":"basic algorithm:","Fragments":["Normalize"]},{"Key":"algorithm: Normalize","Fragments":["the"]},{"Key":"Normalize the","Fragments":["target"]},{"Key":"case. Then","Fragments":["create"]},{"Key":"Then create","Fragments":["a"]},{"Key":"a mapping","Fragments":["of"]},{"Key":"mapping of","Fragments":["each"]},{"Key":"each character,","Fragments":["to"]},{"Key":"character, to","Fragments":["how"]},{"Key":"times that","Fragments":["character"]},{"Key":"character appears","Fragments":["in"]},{"Key":"target word.","Fragments":["Next,"]},{"Key":"word. Next,","Fragments":["for"]},{"Key":"Next, for","Fragments":["each"]},{"Key":"each trial","Fragments":["word,"]},{"Key":"trial word,","Fragments":["normalize"]},{"Key":"word, normalize","Fragments":["and"]},{"Key":"normalize and","Fragments":["build"]},{"Key":"similar mapping.","Fragments":["Then"]},{"Key":"mapping. Then","Fragments":["we"]},{"Key":"Then we","Fragments":["just"]},{"Key":"that each","Fragments":["mapping"]},{"Key":"each mapping","Fragments":["from"]},{"Key":"mapping from","Fragments":["the","the"]},{"Key":"the trial","Fragments":["word","string","string,","string"]},{"Key":"trial word","Fragments":["fits"]},{"Key":"word fits","Fragments":["within"]},{"Key":"fits within","Fragments":["the"]},{"Key":"same mapping","Fragments":["from"]},{"Key":"the primary","Fragments":["word."]},{"Key":"the bucketizing","Fragments":["approach"]},{"Key":"bucketizing approach","Fragments":["because"]},{"Key":"it extends","Fragments":["well"]},{"Key":"extends well","Fragments":["to","into"]},{"Key":"other problem","Fragments":["areas"]},{"Key":"problem areas","Fragments":["that"]},{"Key":"areas that","Fragments":["sorting"]},{"Key":"characters doesn't.","Fragments":["For"]},{"Key":"doesn't. For","Fragments":["example,"]},{"Key":"example, it","Fragments":["becomes","looks"]},{"Key":"becomes trivial","Fragments":["to"]},{"Key":"to accept","Fragments":["short-anagrams"]},{"Key":"accept short-anagrams","Fragments":["(anagrams"]},{"Key":"short-anagrams (anagrams","Fragments":["where"]},{"Key":"(anagrams where","Fragments":["the"]},{"Key":"trial string","Fragments":["is","cannot"]},{"Key":"the primary),","Fragments":["and"]},{"Key":"primary), and","Fragments":["it"]},{"Key":"also extends","Fragments":["well"]},{"Key":"well into","Fragments":["the"]},{"Key":"of discovering","Fragments":["what"]},{"Key":"discovering what","Fragments":["word"]},{"Key":"what word","Fragments":["of"]},{"Key":"word of","Fragments":["a"]},{"Key":"given length","Fragments":["from"]},{"Key":"length from","Fragments":["a"]},{"Key":"dictionary has","Fragments":["the"]},{"Key":"letters that","Fragments":["will"]},{"Key":"will spell","Fragments":["the"]},{"Key":"spell the","Fragments":["most"]},{"Key":"words (of","Fragments":["less"]},{"Key":"(of less","Fragments":["or"]},{"Key":"less or","Fragments":["equal"]},{"Key":"equal size)","Fragments":["from"]},{"Key":"size) from","Fragments":["the"]},{"Key":" Essentially","Fragments":["this"]},{"Key":"Essentially this","Fragments":["approach"]},{"Key":"approach sees","Fragments":["if"]},{"Key":"sees if","Fragments":["one"]},{"Key":"one histogram","Fragments":["fits"]},{"Key":"histogram fits","Fragments":["into"]},{"Key":"fits into","Fragments":["another","the"]},{"Key":"into another","Fragments":["histogram."]},{"Key":"just solving","Fragments":["this"]},{"Key":"solving this","Fragments":["specific"]},{"Key":"specific problem,","Fragments":["compared"]},{"Key":"problem, compared","Fragments":["to"]},{"Key":"to sorting","Fragments":["and"]},{"Key":"and walking","Fragments":["the"]},{"Key":"walking the","Fragments":["pairs,"]},{"Key":"the pairs,","Fragments":["this"]},{"Key":"pairs, this","Fragments":["is"]},{"Key":"needlessly complex.","Fragments":[";)"]},{"Key":"complex. ;)","Fragments":["But"]},{"Key":";) But","Fragments":["it"]},{"Key":"This feels","Fragments":["like"]},{"Key":"best implementation","Fragments":["as"]},{"Key":"i feel","Fragments":["the"]},{"Key":"the erasing","Fragments":["characters"]},{"Key":"erasing characters","Fragments":["from"]},{"Key":"word being","Fragments":["checked"]},{"Key":"checked could","Fragments":["be"]},{"Key":"be improved.","Fragments":["I"]},{"Key":"improved. I","Fragments":["decided"]},{"Key":"to experiment","Fragments":["with"]},{"Key":"experiment with","Fragments":["lambdas,"]},{"Key":"with lambdas,","Fragments":["but"]},{"Key":"lambdas, but","Fragments":["again"]},{"Key":"again the","Fragments":["```std::string.find()```"]},{"Key":"the ```std::string.find()```","Fragments":["followed"]},{"Key":"```std::string.find()``` followed","Fragments":["by"]},{"Key":"by ```std::string.erase()```","Fragments":["feels"]},{"Key":"```std::string.erase()``` feels","Fragments":["inefficient."]},{"Key":"declare ```lower_str```","Fragments":["i"]},{"Key":"```lower_str``` i","Fragments":["wanted"]},{"Key":"i wanted","Fragments":["to"]},{"Key":"to preallocate","Fragments":["the"]},{"Key":"just chose","Fragments":["to"]},{"Key":"to pad","Fragments":["with"]},{"Key":"pad with","Fragments":["the"]},{"Key":"NULL character.","Fragments":["Calling"]},{"Key":"character. Calling","Fragments":["```std::string.reserve()```"]},{"Key":"Calling ```std::string.reserve()```","Fragments":["isn't"]},{"Key":"```std::string.reserve()``` isn't","Fragments":["enough"]},{"Key":"isn't enough","Fragments":["because"]},{"Key":"enough because","Fragments":["the"]},{"Key":"to ```std::transform```","Fragments":["needs"]},{"Key":"```std::transform``` needs","Fragments":["the"]},{"Key":"needs the","Fragments":["string"]},{"Key":"to actually","Fragments":["have","calculate"]},{"Key":"a length,","Fragments":["not"]},{"Key":"length, not","Fragments":["just","just"]},{"Key":"available boost","Fragments":["string"]},{"Key":"string algo","Fragments":["library"]},{"Key":"algo library","Fragments":["and"]},{"Key":"very useful","Fragments":["methods."]},{"Key":"useful methods.","Fragments":["However"]},{"Key":"methods. However","Fragments":["many"]},{"Key":"However many","Fragments":["of"]},{"Key":"not suitable","Fragments":["for"]},{"Key":"suitable for","Fragments":["this"]},{"Key":"this application.","Fragments":["For"]},{"Key":"application. For","Fragments":["example"]},{"Key":"example my","Fragments":["function"]},{"Key":"function ```isupper_str()```","Fragments":["is"]},{"Key":"```isupper_str()``` is","Fragments":["not"]},{"Key":"as ```boost::to_upper```.","Fragments":["Mine"]},{"Key":"```boost::to_upper```. Mine","Fragments":["checks"]},{"Key":"Mine checks","Fragments":["if"]},{"Key":"case rather","Fragments":["than"]},{"Key":"than perform","Fragments":["any"]},{"Key":"perform any","Fragments":["kind"]},{"Key":"of conversion.","Fragments":["The"]},{"Key":"conversion. The","Fragments":["algorithm"]},{"Key":"algorithm ```boost::all()```","Fragments":["might"]},{"Key":"```boost::all()``` might","Fragments":["be"]},{"Key":"interesting combined","Fragments":["with"]},{"Key":"combined with","Fragments":["some","alphas"]},{"Key":"some lambdas","Fragments":["however."]},{"Key":"lambdas however.","Fragments":["I"]},{"Key":"however. I","Fragments":["also"]},{"Key":"also should","Fragments":["have"]},{"Key":"have mentioned","Fragments":["I"]},{"Key":"mentioned I","Fragments":["tried"]},{"Key":"with standard","Fragments":["algorithms"]},{"Key":"algorithms only","Fragments":["for"]},{"Key":"structure it","Fragments":["is"]},{"Key":"layout I","Fragments":["am"]},{"Key":"am used","Fragments":["to"]},{"Key":"to so","Fragments":["it's"]},{"Key":"hear feedback","Fragments":["about"]},{"Key":"others feel","Fragments":["about"]},{"Key":"feel about","Fragments":["it."]},{"Key":"has served","Fragments":["me"]},{"Key":"served me","Fragments":["well"]},{"Key":"me well","Fragments":["when"]},{"Key":"well when","Fragments":["the","the"]},{"Key":"logic becomes","Fragments":["very"]},{"Key":"becomes very","Fragments":["complicated."]},{"Key":"you construct","Fragments":["the"]},{"Key":"saying them.","Fragments":["Also"]},{"Key":"Also your","Fragments":["comments"]},{"Key":"comments are","Fragments":["hilarious.","regarding"]},{"Key":"really clean,","Fragments":["but"]},{"Key":"clean, but","Fragments":["I","it"]},{"Key":"help readability","Fragments":["to"]},{"Key":"the features","Fragments":["of"]},{"Key":"C++ string","Fragments":["library"]},{"Key":"string library","Fragments":["(like"]},{"Key":"library (like","Fragments":["iterators)."]},{"Key":" std::valarray","Fragments":["\u0026"]},{"Key":"std::valarray \u0026","Fragments":["std::iota"]},{"Key":"up comparing","Fragments":["'histograms'."]},{"Key":"comparing 'histograms'.","Fragments":["Should"]},{"Key":"'histograms'. Should","Fragments":["your"]},{"Key":"check of","Fragments":["the"]},{"Key":"character counts","Fragments":["```found-\u003esecond"]},{"Key":"counts ```found-\u003esecond","Fragments":["\u003c"]},{"Key":"```found-\u003esecond \u003c","Fragments":["s.second```"]},{"Key":"\u003c s.second```","Fragments":["really"]},{"Key":"s.second``` really","Fragments":["be"]},{"Key":"an less-than.","Fragments":["I"]},{"Key":"less-than. I","Fragments":["think"]},{"Key":"an inequality","Fragments":["```!=```."]},{"Key":"inequality ```!=```.","Fragments":["With"]},{"Key":"```!=```. With","Fragments":["yours"]},{"Key":"With yours","Fragments":["the"]},{"Key":"yours the","Fragments":["input"]},{"Key":"input 'abc'","Fragments":["is"]},{"Key":"'abc' is","Fragments":["anagram","reported"]},{"Key":"is anagram","Fragments":["of"]},{"Key":"The processing","Fragments":["of"]},{"Key":"processing of","Fragments":["the"]},{"Key":"word ```m_anagram```","Fragments":["could"]},{"Key":"```m_anagram``` could","Fragments":["be"]},{"Key":"be calculated","Fragments":["once,"]},{"Key":"calculated once,","Fragments":["rather"]},{"Key":"once, rather","Fragments":["than"]},{"Key":"than on","Fragments":["every"]},{"Key":"solution performs","Fragments":["case"]},{"Key":"performs case","Fragments":["sensitive"]},{"Key":"sensitive checking","Fragments":["for"]},{"Key":"for anagrams","Fragments":["where"]},{"Key":"anagrams where","Fragments":["they"]},{"Key":"be insensitive.","Fragments":["Also"]},{"Key":"insensitive. Also","Fragments":["you"]},{"Key":"have opportunities","Fragments":["to"]},{"Key":"skip processing","Fragments":["some"]},{"Key":"processing some","Fragments":["words"]},{"Key":"words by","Fragments":["checking"]},{"Key":"by checking","Fragments":["lengths","its"]},{"Key":"checking lengths","Fragments":["(ie"]},{"Key":"lengths (ie","Fragments":["strings"]},{"Key":"(ie strings","Fragments":["could"]},{"Key":"be anagrams","Fragments":["if"]},{"Key":"is iterating","Fragments":["from"]},{"Key":"iterating from","Fragments":["i=0"]},{"Key":"from i=0","Fragments":["to"]},{"Key":"i=0 to","Fragments":["i"]},{"Key":"to i","Fragments":["\u003c"]},{"Key":"\u003c word.length().","Fragments":["I"]},{"Key":"word.length(). I","Fragments":["think"]},{"Key":"be going","Fragments":["from","with"]},{"Key":"going from","Fragments":["[0..MAX_CHARS-1]","java"]},{"Key":"from [0..MAX_CHARS-1]","Fragments":["to"]},{"Key":"[0..MAX_CHARS-1] to","Fragments":["compare"]},{"Key":"whole arrays.","Fragments":["Also"]},{"Key":"arrays. Also","Fragments":["you"]},{"Key":"the arrays","Fragments":["to"]},{"Key":"arrays to","Fragments":["something"]},{"Key":"something known","Fragments":["like"]},{"Key":"known like","Fragments":["0"]},{"Key":"like 0","Fragments":["or"]},{"Key":"or they","Fragments":["will"]},{"Key":"not match.","Fragments":["I"]},{"Key":"new ```std::array```","Fragments":["container"]},{"Key":"```std::array``` container","Fragments":["to"]},{"Key":"container to","Fragments":["make","hold"]},{"Key":"Another interesting","Fragments":["implementation"]},{"Key":"interesting implementation","Fragments":["using"]},{"Key":"implementation using","Fragments":["```std::is_permutation()```"]},{"Key":"using ```std::is_permutation()```","Fragments":["after"]},{"Key":"```std::is_permutation()``` after","Fragments":["seeing"]},{"Key":"seeing some","Fragments":["other"]},{"Key":"people's solutions.","Fragments":["This"]},{"Key":"solutions. This","Fragments":["looks"]},{"Key":"nice concise","Fragments":["solution"]},{"Key":"concise solution","Fragments":["however"]},{"Key":"solution however","Fragments":["is_permutation","thanks"]},{"Key":"however is_permutation","Fragments":["has"]},{"Key":"has worst","Fragments":["case"]},{"Key":"of ```O(N^2)```.","Fragments":["Which"]},{"Key":"```O(N^2)```. Which","Fragments":["might"]},{"Key":"Which might","Fragments":["be"]},{"Key":"be worst","Fragments":["than"]},{"Key":"worst than","Fragments":["the"]},{"Key":"good. I'm","Fragments":["wondering,"]},{"Key":"I'm wondering,","Fragments":["though,"]},{"Key":"wondering, though,","Fragments":["why"]},{"Key":"though, why","Fragments":["you"]},{"Key":"didn't put","Fragments":["`auto"]},{"Key":"put `auto","Fragments":["itr"]},{"Key":"`auto itr","Fragments":["="]},{"Key":"itr =","Fragments":["str.begin();`"]},{"Key":"= str.begin();`","Fragments":["as"]},{"Key":"str.begin();` as","Fragments":["the"]},{"Key":"first expression","Fragments":["in"]},{"Key":"expression in","Fragments":["the"]},{"Key":"Also, not","Fragments":["sure"]},{"Key":"a \"highly","Fragments":["efficient\""]},{"Key":"\"highly efficient\"","Fragments":["implementation,"]},{"Key":"efficient\" implementation,","Fragments":["but"]},{"Key":"seems plausible","Fragments":["that"]},{"Key":"plausible that","Fragments":["you"]},{"Key":"might since","Fragments":["you"]},{"Key":"single pass-through","Fragments":["the"]},{"Key":"pass-through the","Fragments":["string"]},{"Key":"your for-loop.","Fragments":["In"]},{"Key":"for-loop. In","Fragments":["that"]},{"Key":"avoid `str.erase`,","Fragments":["as"]},{"Key":"`str.erase`, as","Fragments":["it"]},{"Key":" @joan","Fragments":["What"]},{"Key":"@joan What","Fragments":["does"]},{"Key":"the \"us\"","Fragments":["in"]},{"Key":"\"us\" in","Fragments":["listus"]},{"Key":"in listus","Fragments":["and"]},{"Key":"listus and","Fragments":["complistus"]},{"Key":"and complistus","Fragments":["mean?"]},{"Key":"complistus mean?","Fragments":["Could"]},{"Key":"mean? Could","Fragments":["these"]},{"Key":"Could these","Fragments":["variables"]},{"Key":"have better","Fragments":["names?"]},{"Key":"your matches","Fragments":["method.","function,"]},{"Key":"matches method.","Fragments":["It's"]},{"Key":"method. It's","Fragments":["so"]},{"Key":"It's so","Fragments":["easy"]},{"Key":"read. The","Fragments":["only"]},{"Key":"of is","Fragments":["that"]},{"Key":"run boost::to_lower_copy(subject_)","Fragments":["and"]},{"Key":"boost::to_lower_copy(subject_) and","Fragments":["key_.length()"]},{"Key":"and key_.length()","Fragments":["every"]},{"Key":"key_.length() every","Fragments":["time"]},{"Key":"a word.","Fragments":["The"]},{"Key":"word. The","Fragments":["good"]},{"Key":"The good","Fragments":["part"]},{"Key":"good part","Fragments":["of"]},{"Key":"remember many","Fragments":["extra"]},{"Key":"extra variables","Fragments":["like"]},{"Key":"like subject_lower_.","Fragments":["On"]},{"Key":"subject_lower_. On","Fragments":["the"]},{"Key":"hand, the","Fragments":["case"]},{"Key":"of subject_","Fragments":["isn't"]},{"Key":"subject_ isn't","Fragments":["relevant"]},{"Key":"relevant to","Fragments":["the"]},{"Key":"test, so","Fragments":["you"]},{"Key":"could initialize","Fragments":["it"]},{"Key":"all lower","Fragments":["case."]},{"Key":"That being","Fragments":["said,","said"]},{"Key":"said, great","Fragments":["job."]},{"Key":"great job.","Fragments":["I"]},{"Key":"job. I","Fragments":["like"]},{"Key":"like reading","Fragments":["your"]},{"Key":" @everett-au","Fragments":["If"]},{"Key":"@everett-au If","Fragments":["you"]},{"Key":"don't mind,","Fragments":["please"]},{"Key":"mind, please","Fragments":["elaborate"]},{"Key":"please elaborate","Fragments":["on"]},{"Key":"how 'abc'","Fragments":["is"]},{"Key":"is reported","Fragments":["as"]},{"Key":"reported as","Fragments":["an"]},{"Key":"of 'cca'.","Fragments":["I"]},{"Key":"'cca'. I","Fragments":["can't"]},{"Key":"can't reproduce","Fragments":["that"]},{"Key":"reproduce that","Fragments":["behavior."]},{"Key":"that less-than","Fragments":["was"]},{"Key":"less-than was","Fragments":["chosen"]},{"Key":"was chosen","Fragments":["was"]},{"Key":"chosen was","Fragments":["that"]},{"Key":"for ways","Fragments":["to"]},{"Key":"to reject","Fragments":["a"]},{"Key":"reject a","Fragments":["match.","match","match"]},{"Key":"a match.","Fragments":["If"]},{"Key":"match. If","Fragments":["the"]},{"Key":"times \"a\"","Fragments":["occurs","appears"]},{"Key":"\"a\" occurs","Fragments":["in"]},{"Key":"occurs in","Fragments":["the"]},{"Key":"the master","Fragments":["string","string's","word"]},{"Key":"master string","Fragments":["is"]},{"Key":"\"a\" appears","Fragments":["in"]},{"Key":"trial string,","Fragments":["we"]},{"Key":"string, we","Fragments":["should"]},{"Key":"should certainly","Fragments":["reject"]},{"Key":"certainly reject","Fragments":["that"]},{"Key":"reject that","Fragments":["match,"]},{"Key":"that match,","Fragments":["because"]},{"Key":"match, because","Fragments":["the"]},{"Key":"string cannot","Fragments":["fit"]},{"Key":"cannot fit","Fragments":["into"]},{"Key":"master string's","Fragments":["characters."]},{"Key":" @destini","Fragments":["my"]},{"Key":"@destini my","Fragments":["apologies"]},{"Key":"my apologies","Fragments":["your"]},{"Key":"apologies your","Fragments":["solution"]},{"Key":"correct. I","Fragments":["was"]},{"Key":"expecting to","Fragments":["see"]},{"Key":"the bucket","Fragments":["counts"]},{"Key":"bucket counts","Fragments":["tested"]},{"Key":"counts tested","Fragments":["with"]},{"Key":"tested with","Fragments":["```=="]},{"Key":"with ```==","Fragments":["or"]},{"Key":"```== or","Fragments":["!=```."]},{"Key":"or !=```.","Fragments":["Seeing"]},{"Key":"!=```. Seeing","Fragments":["the"]},{"Key":"Seeing the","Fragments":["less"]},{"Key":"than comparison","Fragments":["gave"]},{"Key":"comparison gave","Fragments":["me"]},{"Key":"feeling something","Fragments":["could"]},{"Key":"something could","Fragments":["be"]},{"Key":"be missed","Fragments":["with"]},{"Key":"missed with","Fragments":["inputs"]},{"Key":"with inputs","Fragments":["like","outside"]},{"Key":"inputs like","Fragments":["I"]},{"Key":"described or","Fragments":["like"]},{"Key":"or like","Fragments":["('abb','aab')"]},{"Key":"like ('abb','aab')","Fragments":["but"]},{"Key":"('abb','aab') but","Fragments":["your"]},{"Key":"solution handles","Fragments":["this."]},{"Key":"possibly reject","Fragments":["a"]},{"Key":"a match","Fragments":["'sooner'","sooner.","for"]},{"Key":"match 'sooner'","Fragments":["with"]},{"Key":"'sooner' with","Fragments":["an"]},{"Key":"an ```!=```","Fragments":["test."]},{"Key":"```!=``` test.","Fragments":["For"]},{"Key":"test. For","Fragments":["example"]},{"Key":"example consider","Fragments":["the"]},{"Key":"subject string","Fragments":["'cca'"]},{"Key":"string 'cca'","Fragments":["and"]},{"Key":"'cca' and","Fragments":["the"]},{"Key":"candidate 'abc'.","Fragments":["When"]},{"Key":"'abc'. When","Fragments":["I"]},{"Key":"test this","Fragments":["the"]},{"Key":"character compared","Fragments":["is"]},{"Key":"compared is","Fragments":["the"]},{"Key":"the 'c'","Fragments":["(different"]},{"Key":"'c' (different","Fragments":["unordered_map"]},{"Key":"(different unordered_map","Fragments":["impl"]},{"Key":"unordered_map impl","Fragments":["my"]},{"Key":"impl my","Fragments":["be"]},{"Key":"my be","Fragments":["different)"]},{"Key":"be different)","Fragments":["which"]},{"Key":"different) which","Fragments":["does"]},{"Key":"not trigger","Fragments":["the"]},{"Key":"trigger the","Fragments":["rejection"]},{"Key":"the rejection","Fragments":["because"]},{"Key":"rejection because","Fragments":["the"]},{"Key":"subject has","Fragments":["more"]},{"Key":"this character","Fragments":["than"]},{"Key":"character than","Fragments":["the"]},{"Key":"the candidate.","Fragments":["The"]},{"Key":"candidate. The","Fragments":["next"]},{"Key":"character 'b'","Fragments":["rejects"]},{"Key":"'b' rejects","Fragments":["the"]},{"Key":"rejects the","Fragments":["string"]},{"Key":"string just","Fragments":["fine","doesn't"]},{"Key":"fine and","Fragments":["the"]},{"Key":"final result","Fragments":["is"]},{"Key":"correct. However","Fragments":["it"]},{"Key":"However it","Fragments":["is"]},{"Key":"not detect","Fragments":["the"]},{"Key":"detect the","Fragments":["earliest"]},{"Key":"the earliest","Fragments":["point"]},{"Key":"earliest point","Fragments":["of"]},{"Key":"of rejection.","Fragments":["For"]},{"Key":"rejection. For","Fragments":["short"]},{"Key":"For short","Fragments":["strings"]},{"Key":"strings this","Fragments":["is"]},{"Key":"fine but","Fragments":["for"]},{"Key":"longer ones","Fragments":["it"]},{"Key":"ones it","Fragments":["may"]},{"Key":"more characters","Fragments":["before"]},{"Key":"we find","Fragments":["the","a"]},{"Key":"do recognise","Fragments":["this"]},{"Key":"recognise this","Fragments":["is"]},{"Key":"pretty minor","Fragments":["nitpick."]},{"Key":"You're correct,","Fragments":["that","thanks"]},{"Key":"correct, that","Fragments":["I"]},{"Key":"could reject","Fragments":["a"]},{"Key":"match sooner.","Fragments":["In"]},{"Key":"sooner. In","Fragments":["this"]},{"Key":"exercise we're","Fragments":["looking"]},{"Key":"we're looking","Fragments":["for"]},{"Key":"full anagrams.","Fragments":["I"]},{"Key":"anagrams. I","Fragments":["actually"]},{"Key":"actually designed","Fragments":["the"]},{"Key":"designed the","Fragments":["bucket-comparison"]},{"Key":"the bucket-comparison","Fragments":["algorithm"]},{"Key":"bucket-comparison algorithm","Fragments":["in"]},{"Key":"language when","Fragments":["I"]},{"Key":"was solving","Fragments":["the"]},{"Key":"the \"eight","Fragments":["letters,"]},{"Key":"\"eight letters,","Fragments":["most"]},{"Key":"letters, most","Fragments":["words\""]},{"Key":"most words\"","Fragments":["problem:"]},{"Key":"words\" problem:","Fragments":["https://github.com/daoswald/eight-letters/blob/master/lib/EightLetters.pm"]},{"Key":"that algorithm","Fragments":["it's"]},{"Key":"algorithm it's","Fragments":["ok"]},{"Key":"ok for","Fragments":["short-anagrams;","\"the\""]},{"Key":"for short-anagrams;","Fragments":["in"]},{"Key":"short-anagrams; in","Fragments":["other"]},{"Key":"other words,","Fragments":["it"]},{"Key":"words, it","Fragments":["would"]},{"Key":"be ok","Fragments":["for"]},{"Key":"for \"the\"","Fragments":["to"]},{"Key":"\"the\" to","Fragments":["be"]},{"Key":"match for","Fragments":["the"]},{"Key":"master word","Fragments":["\"them\"."]},{"Key":"word \"them\".","Fragments":["My"]},{"Key":"\"them\". My","Fragments":["implementation"]},{"Key":"My implementation","Fragments":["there"]},{"Key":"implementation there","Fragments":["was"]},{"Key":"one works,","Fragments":["except"]},{"Key":"works, except","Fragments":["that"]},{"Key":"accepts full","Fragments":["anagrams,"]},{"Key":"full anagrams,","Fragments":["and"]},{"Key":"anagrams, and","Fragments":["also"]},{"Key":"also this","Fragments":["one"]},{"Key":"doesn't resort","Fragments":["to"]},{"Key":"the bit-twiddling","Fragments":["micro-optimization."]},{"Key":"bit-twiddling micro-optimization.","Fragments":[":)"]},{"Key":"glad it","Fragments":["was"]},{"Key":"false alarm","Fragments":["on"]},{"Key":"alarm on","Fragments":["this"]},{"Key":"one not","Fragments":["working."]},{"Key":"be neat","Fragments":["to"]},{"Key":"neat to","Fragments":["see","use"]},{"Key":"song be","Fragments":["generated"]},{"Key":"generated in","Fragments":["pieces"]},{"Key":"in pieces","Fragments":["instead"]},{"Key":"pieces instead","Fragments":["of"]},{"Key":"of outputting","Fragments":["nearly"]},{"Key":"outputting nearly","Fragments":["complete"]},{"Key":"nearly complete","Fragments":["predefined"]},{"Key":"complete predefined","Fragments":["verses."]},{"Key":"predefined verses.","Fragments":["Also,"]},{"Key":"verses. Also,","Fragments":["I"]},{"Key":"a \"beer","Fragments":["namespace\"","class\","]},{"Key":"\"beer namespace\"","Fragments":["fits"]},{"Key":"namespace\" fits","Fragments":["better"]},{"Key":"fits better","Fragments":["than","with"]},{"Key":"\"beer class\",","Fragments":["since"]},{"Key":"class\", since","Fragments":["there's"]},{"Key":"create instances","Fragments":["of","of","for"]},{"Key":"avoided `using","Fragments":["namespace"]},{"Key":"for fewest","Fragments":["lines"]},{"Key":"fewest lines","Fragments":["of"]},{"Key":"of code,","Fragments":["you"]},{"Key":"code, you","Fragments":["could","default"]},{"Key":"use boost::to_lower_copy","Fragments":["and","and"]},{"Key":"boost::to_lower_copy and","Fragments":["get","boost::tokenizer"]},{"Key":"the lowerCase","Fragments":["function."]},{"Key":"std::sort algorithm","Fragments":["if"]},{"Key":"algorithm if","Fragments":["you"]},{"Key":" ```std::sort(root_word.begin(),","Fragments":["root_word.end());```"]},{"Key":"Maybe there","Fragments":["is"]},{"Key":"test typedef.","Fragments":["Maybe"]},{"Key":"typedef. Maybe","Fragments":["str_vec?"]},{"Key":"might find","Fragments":["this"]},{"Key":"this funny","Fragments":["and"]},{"Key":"funny and","Fragments":["not"]},{"Key":"very helpful:","Fragments":["http://youtu.be/k4RRi_ntQc8"]},{"Key":"some thoughts,","Fragments":["I"]},{"Key":"thoughts, I","Fragments":["tried"]},{"Key":"single passage","Fragments":["through"]},{"Key":"passage through","Fragments":["the"]},{"Key":"string, without","Fragments":["tokenizing"]},{"Key":"without tokenizing","Fragments":["the"]},{"Key":"tokenizing the","Fragments":["string","string"]},{"Key":"string beforehand.","Fragments":["I’m"]},{"Key":"beforehand. I’m","Fragments":["not"]},{"Key":"I’m not","Fragments":["satisfied"]},{"Key":"not satisfied","Fragments":["with"]},{"Key":"satisfied with","Fragments":["readability"]},{"Key":"with readability","Fragments":["though."]},{"Key":"I don’t","Fragments":["like"]},{"Key":"don’t like","Fragments":["the"]},{"Key":"of needing","Fragments":["a"]},{"Key":"needing a","Fragments":["counter"]},{"Key":"a counter","Fragments":["to"]},{"Key":"counter to","Fragments":["know"]},{"Key":"if I’m","Fragments":["at"]},{"Key":"I’m at","Fragments":["the"]},{"Key":"new \"for\"","Fragments":["syntax"]},{"Key":"\"for\" syntax","Fragments":["is"]},{"Key":"is cool","Fragments":["so"]},{"Key":"cool so","Fragments":["I"]},{"Key":"also would","Fragments":["like"]},{"Key":"like another","Fragments":["way"]},{"Key":"another way","Fragments":["to","to"]},{"Key":"the selected","Fragments":["word"]},{"Key":"selected word","Fragments":["already"]},{"Key":"word already","Fragments":["exist"]},{"Key":"result map.","Fragments":["Relying"]},{"Key":"map. Relying","Fragments":["on"]},{"Key":"Relying on","Fragments":["an"]},{"Key":"exception sounds","Fragments":["kind"]},{"Key":"sounds kind","Fragments":["of"]},{"Key":"of crappy","Fragments":["to"]},{"Key":"crappy to","Fragments":["me…"]},{"Key":"New proposition,","Fragments":["with"]},{"Key":"proposition, with","Fragments":["the"]},{"Key":"string iterator","Fragments":["this"]},{"Key":"iterator this","Fragments":["time."]},{"Key":"this time.","Fragments":["The"]},{"Key":"The \"for\"","Fragments":["statement"]},{"Key":"\"for\" statement","Fragments":["is"]},{"Key":"longer, but","Fragments":["I"]},{"Key":"the \"int","Fragments":["i\""]},{"Key":"\"int i\"","Fragments":["counter."]},{"Key":"For extra","Fragments":["credit,"]},{"Key":"extra credit,","Fragments":["I"]},{"Key":"credit, I","Fragments":["added"]},{"Key":"added unit","Fragments":["tests"]},{"Key":"tests that","Fragments":["are","you"]},{"Key":"are included","Fragments":["in"]},{"Key":"exercise for","Fragments":["other","instruction"]},{"Key":"for other","Fragments":["languages"]},{"Key":"languages plus","Fragments":["a"]},{"Key":"few from","Fragments":["the"]},{"Key":"the NitPicks","Fragments":["in"]},{"Key":"NitPicks in","Fragments":["other"]},{"Key":"const map\u003cstring,","Fragments":["int\u003e","int\u003e","int\u003e","int\u003e","int\u003e"]},{"Key":"int\u003e expected{{\"all\",","Fragments":["2},"]},{"Key":"expected{{\"all\", 2},","Fragments":["{\"the\","]},{"Key":"2}, {\"the\",","Fragments":["2},"]},{"Key":"{\"the\", 2},","Fragments":["{\"kings\","]},{"Key":"2}, {\"kings\",","Fragments":["2},"]},{"Key":"{\"kings\", 2},","Fragments":["{\"horses\","]},{"Key":"2}, {\"horses\",","Fragments":["1},"]},{"Key":"{\"horses\", 1},","Fragments":["{\"and\","]},{"Key":"1}, {\"and\",","Fragments":["1},"]},{"Key":"{\"and\", 1},","Fragments":["{\"men\","]},{"Key":"1}, {\"men\",","Fragments":["1}};"]},{"Key":"auto actual","Fragments":["=","=","=","=","=","="]},{"Key":"actual =","Fragments":["word_count::words(","word_count::words(","word_count::words(","word_count::words(","word_count::words(","dna.nucleotide_counts();```"]},{"Key":"word_count::words( \"all","Fragments":["the"]},{"Key":"\"all the","Fragments":["kings"]},{"Key":"the kings","Fragments":["horses","men\");"]},{"Key":"kings horses","Fragments":["and"]},{"Key":"horses and","Fragments":["all"]},{"Key":" REQUIRE_EQUAL_CONTAINERS(","Fragments":["expected,","expected,","expected,","expected,","expected,"]},{"Key":"REQUIRE_EQUAL_CONTAINERS( expected,","Fragments":["actual","actual","actual","actual","actual"]},{"Key":"expected, actual","Fragments":[");",");",");",");",");"]},{"Key":"int\u003e expected{{\"one\",","Fragments":["1},"]},{"Key":"expected{{\"one\", 1},","Fragments":["{\"two\","]},{"Key":"1}, {\"two\",","Fragments":["1},"]},{"Key":"{\"two\", 1},","Fragments":["{\"three\","]},{"Key":"1}, {\"three\",","Fragments":["1}};"]},{"Key":"word_count::words( \"one,two,three\"","Fragments":[");"]},{"Key":"int\u003e expected{{\"first\",","Fragments":["1},"]},{"Key":"expected{{\"first\", 1},","Fragments":["{\"don't\","]},{"Key":"1}, {\"don't\",","Fragments":["2},"]},{"Key":"{\"don't\", 2},","Fragments":["{\"laugh\","]},{"Key":"2}, {\"laugh\",","Fragments":["1},"]},{"Key":"{\"laugh\", 1},","Fragments":["{\"then\","]},{"Key":"1}, {\"then\",","Fragments":["1},"]},{"Key":"{\"then\", 1},","Fragments":["{\"cry\","]},{"Key":"1}, {\"cry\",","Fragments":["1}};"]},{"Key":"word_count::words( \"First:","Fragments":["don't"]},{"Key":"\"First: don't","Fragments":["laugh."]},{"Key":"don't laugh.","Fragments":["Then:"]},{"Key":"laugh. Then:","Fragments":["don't"]},{"Key":"Then: don't","Fragments":["cry.\""]},{"Key":"don't cry.\"","Fragments":[");"]},{"Key":"int\u003e expected{{","Fragments":["\"go\","]},{"Key":"expected{{ \"go\",","Fragments":["3"]},{"Key":"\"go\", 3","Fragments":["}};"]},{"Key":"word_count::words( \"go","Fragments":["'"]},{"Key":"\"go '","Fragments":["Go"]},{"Key":"' Go","Fragments":["''"]},{"Key":"Go ''","Fragments":["GO\""]},{"Key":"'' GO\"","Fragments":[");"]},{"Key":"int\u003e expected{{\"she\",","Fragments":["1},"]},{"Key":"expected{{\"she\", 1},","Fragments":["{\"said\","]},{"Key":"1}, {\"said\",","Fragments":["1},"]},{"Key":"{\"said\", 1},","Fragments":["{\"let's\","]},{"Key":"1}, {\"let's\",","Fragments":["1},"]},{"Key":"{\"let's\", 1},","Fragments":["{\"meet\","]},{"Key":"1}, {\"meet\",","Fragments":["1},"]},{"Key":"{\"meet\", 1},","Fragments":["{\"at\","]},{"Key":"1}, {\"at\",","Fragments":["1},"]},{"Key":"{\"at\", 1},","Fragments":["{\"twelve\","]},{"Key":"1}, {\"twelve\",","Fragments":["1},"]},{"Key":"{\"twelve\", 1},","Fragments":["{\"o'clock\","]},{"Key":"1}, {\"o'clock\",","Fragments":["1}};"]},{"Key":"word_count::words( \"She","Fragments":["said,"]},{"Key":"\"She said,","Fragments":["'let's"]},{"Key":"said, 'let's","Fragments":["meet"]},{"Key":"'let's meet","Fragments":["at"]},{"Key":"meet at","Fragments":["twelve"]},{"Key":"at twelve","Fragments":["o'clock'\""]},{"Key":"twelve o'clock'\"","Fragments":[");"]},{"Key":" @madisen","Fragments":["thanks"]},{"Key":"@madisen thanks","Fragments":["for"]},{"Key":"tried some","Fragments":["expressions"]},{"Key":"some expressions","Fragments":["that"]},{"Key":"expressions that","Fragments":["closely"]},{"Key":"that closely","Fragments":["resemble"]},{"Key":"closely resemble","Fragments":["your"]},{"Key":"resemble your","Fragments":["examples"]},{"Key":"your examples","Fragments":["above,"]},{"Key":"examples above,","Fragments":["but"]},{"Key":"but were","Fragments":["most"]},{"Key":"were most","Fragments":["likely"]},{"Key":"likely not","Fragments":["exactly"]},{"Key":"same. I'll","Fragments":["give"]},{"Key":"try and","Fragments":["see","use","avoid"]},{"Key":"solve isShouting","Fragments":["using"]},{"Key":"isShouting using","Fragments":["just"]},{"Key":"big regular","Fragments":["expression,"]},{"Key":"can confirm","Fragments":["it's"]},{"Key":"confirm it's","Fragments":["definitely"]},{"Key":"small window","Fragments":["with"]},{"Key":"window with","Fragments":["VIM."]},{"Key":"with VIM.","Fragments":["Cleaned"]},{"Key":"VIM. Cleaned","Fragments":["it"]},{"Key":"Cleaned it","Fragments":["up"]},{"Key":"bit, good","Fragments":["call."]},{"Key":"code! It's","Fragments":["short"]},{"Key":"It's short","Fragments":["and"]},{"Key":"find your","Fragments":["indentation"]},{"Key":"indentation a","Fragments":["bit"]},{"Key":"bit strange,","Fragments":["particularly"]},{"Key":"strange, particularly","Fragments":["for"]},{"Key":"particularly for","Fragments":["lines"]},{"Key":"for lines","Fragments":["14"]},{"Key":"lines 14","Fragments":["and"]},{"Key":"and 17.","Fragments":["What's"]},{"Key":"17. What's","Fragments":["the"]},{"Key":"the rule","Fragments":["for"]},{"Key":"rule for","Fragments":["how","myself"]},{"Key":"decide when","Fragments":["to"]},{"Key":"used GCC","Fragments":["4.9"]},{"Key":"GCC 4.9","Fragments":["on"]},{"Key":"4.9 on","Fragments":["AMD64."]},{"Key":"on AMD64.","Fragments":["But"]},{"Key":"AMD64. But","Fragments":["for"]},{"Key":"me, the","Fragments":["tests"]},{"Key":"to_lower is","Fragments":["not"]},{"Key":"not repeated.","Fragments":["It","Since"]},{"Key":"repeated. It","Fragments":["is"]},{"Key":"word once.","Fragments":["I"]},{"Key":"how doing","Fragments":["the"]},{"Key":"the lowercasing","Fragments":["outside"]},{"Key":"lowercasing outside","Fragments":["of"]},{"Key":"the DFA","Fragments":["you"]},{"Key":"DFA you","Fragments":["came"]},{"Key":"up with,","Fragments":["if"]},{"Key":"with, if","Fragments":["you"]},{"Key":"of `typedef`,","Fragments":["but"]},{"Key":"`typedef`, but","Fragments":["I"]},{"Key":"new sequence","Fragments":["of"]},{"Key":"pairs is","Fragments":["excess"]},{"Key":"is excess","Fragments":["work"]},{"Key":"excess work","Fragments":["without"]},{"Key":"more comfortable","Fragments":["with"]},{"Key":"classes than","Fragments":["namespaces."]},{"Key":"just went","Fragments":["for"]},{"Key":"simplest solution","Fragments":["of"]},{"Key":"whole song","Fragments":["and"]},{"Key":"correct indexed","Fragments":["verse."]},{"Key":"indexed verse.","Fragments":["I"]},{"Key":"verse. I","Fragments":["made"]},{"Key":"made sure","Fragments":["to"]},{"Key":"the ```song()```","Fragments":["and"]},{"Key":"```song()``` and","Fragments":["```verses()```"]},{"Key":"and ```verses()```","Fragments":["functions"]},{"Key":"```verses()``` functions","Fragments":["in"]},{"Key":"the ```verse()```","Fragments":["function.","function"]},{"Key":"```verse()``` function.","Fragments":["The"]},{"Key":"conversion between","Fragments":["1"]},{"Key":"between 1","Fragments":["based"]},{"Key":"1 based","Fragments":["verse"]},{"Key":"based verse","Fragments":["indexing"]},{"Key":"verse indexing","Fragments":["and"]},{"Key":"indexing and","Fragments":["0"]},{"Key":"and 0","Fragments":["based","if","as"]},{"Key":"0 based","Fragments":["vector","indexing."]},{"Key":"based vector","Fragments":["indexing"]},{"Key":"vector indexing","Fragments":["might"]},{"Key":"indexing might","Fragments":["be"]},{"Key":"the ++","Fragments":["operator."]},{"Key":"The song","Fragments":["does"]},{"Key":"song does","Fragments":["have"]},{"Key":"a repeating","Fragments":["pattern"]},{"Key":"repeating pattern","Fragments":["so"]},{"Key":"pattern so","Fragments":["I"]},{"Key":"try a","Fragments":["dynamic"]},{"Key":"dynamic constructed","Fragments":["version"]},{"Key":"constructed version","Fragments":["later."]},{"Key":"nice solution.","Fragments":["I"]},{"Key":"raw array","Fragments":["[]"]},{"Key":"array []","Fragments":["to"]},{"Key":"use ```std::array\u003csong_verse\u003e```.","Fragments":["Then"]},{"Key":"```std::array\u003csong_verse\u003e```. Then","Fragments":["you"]},{"Key":"function size()","Fragments":["in"]},{"Key":"size() in","Fragments":["your"]},{"Key":"code instead","Fragments":["of"]},{"Key":"the 'magic'","Fragments":["numbers"]},{"Key":"'magic' numbers","Fragments":["7/8."]},{"Key":"general comments","Fragments":["on"]},{"Key":"The recursion","Fragments":["in"]},{"Key":"your ```verses()```","Fragments":["function"]},{"Key":"```verses()``` function","Fragments":["might","a"]},{"Key":"you more","Fragments":["concise"]},{"Key":"more concise","Fragments":["code"]},{"Key":"concise code","Fragments":["but"]},{"Key":"thinking recusively","Fragments":["when"]},{"Key":"recusively when","Fragments":["going"]},{"Key":"when going","Fragments":["back"]},{"Key":"maintain it.","Fragments":["Now"]},{"Key":"it. Now","Fragments":["all"]},{"Key":"Now all","Fragments":["programmers"]},{"Key":"all programmers","Fragments":["should"]},{"Key":"programmers should","Fragments":["be"]},{"Key":"be comfortable","Fragments":["with"]},{"Key":"with recusion","Fragments":["and"]},{"Key":"recusion and","Fragments":["it"]},{"Key":"a powerful","Fragments":["tool"]},{"Key":"powerful tool","Fragments":["however"]},{"Key":"tool however","Fragments":["from"]},{"Key":"however from","Fragments":["a"]},{"Key":"maintenance point","Fragments":["of"]},{"Key":"view iteration","Fragments":["is"]},{"Key":"iteration is","Fragments":["generally"]},{"Key":"generally easier","Fragments":["to"]},{"Key":"duplicate copies","Fragments":["of"]},{"Key":"song lyrics.","Fragments":["On"]},{"Key":"lyrics. On","Fragments":["copy"]},{"Key":"On copy","Fragments":["in"]},{"Key":"```verse()``` function","Fragments":["and"]},{"Key":"the ```sing()```","Fragments":["function."]},{"Key":"```sing()``` function.","Fragments":["For"]},{"Key":"simple programming","Fragments":["exercise"]},{"Key":"programming exercise","Fragments":["this"]},{"Key":"exercise this","Fragments":["might"]},{"Key":"problem but","Fragments":["if","I"]},{"Key":"you apply","Fragments":["this"]},{"Key":"apply this","Fragments":["pattern"]},{"Key":"pattern to","Fragments":["other"]},{"Key":"other projects,","Fragments":["maintenance"]},{"Key":"projects, maintenance","Fragments":["will"]},{"Key":"maintenance will","Fragments":["be"]},{"Key":"copy changes","Fragments":["out"]},{"Key":"changes out","Fragments":["of"]},{"Key":"of sync","Fragments":["with"]},{"Key":"sync with","Fragments":["the","each"]},{"Key":"C++ comment","Fragments":["I"]},{"Key":"would caution","Fragments":["against"]},{"Key":"caution against","Fragments":["getting"]},{"Key":"against getting","Fragments":["used"]},{"Key":"getting used","Fragments":["to"]},{"Key":"double leading","Fragments":["underscore"]},{"Key":"leading underscore","Fragments":["for"]},{"Key":"underscore for","Fragments":["your"]},{"Key":"your names.","Fragments":["While"]},{"Key":"names. While","Fragments":["you"]},{"Key":"While you","Fragments":["might"]},{"Key":"safe 99%","Fragments":["of"]},{"Key":"never know","Fragments":["what"]},{"Key":"names your","Fragments":["compiler/system"]},{"Key":"your compiler/system","Fragments":["implementation"]},{"Key":"compiler/system implementation","Fragments":["have"]},{"Key":"implementation have","Fragments":["been"]},{"Key":"been using.","Fragments":["Best"]},{"Key":"using. Best","Fragments":["to"]},{"Key":"Best to","Fragments":["develop"]},{"Key":"to develop","Fragments":["a"]},{"Key":"develop a","Fragments":["style"]},{"Key":"style that","Fragments":["conforms","leads"]},{"Key":"that conforms","Fragments":["with"]},{"Key":"conforms with","Fragments":["the"]},{"Key":"Updated solution","Fragments":["to"]},{"Key":"use ```std::string::operator+()```","Fragments":["instead"]},{"Key":"```std::string::operator+()``` instead","Fragments":["of"]},{"Key":"calling append","Fragments":["member"]},{"Key":"append member","Fragments":["functions."]},{"Key":"functions. To","Fragments":["make"]},{"Key":"the ```verses()```","Fragments":["function"]},{"Key":"bit shorter","Fragments":["and"]},{"Key":"to see,","Fragments":["but"]},{"Key":"see, but","Fragments":["here"]},{"Key":"it is:","Fragments":["http://imgur.com/W8XYqv3"]},{"Key":"standard rather","Fragments":["than"]},{"Key":"than boost::format","Fragments":["or"]},{"Key":"boost::format or","Fragments":["something"]},{"Key":"something similar.","Fragments":["I"]},{"Key":"similar. I","Fragments":["wanted"]},{"Key":"give stringstreams","Fragments":["a"]},{"Key":"stringstreams a","Fragments":["go"]},{"Key":"go since","Fragments":["I"]},{"Key":"haven't used","Fragments":["them"]},{"Key":"used them","Fragments":["in"]},{"Key":"while and","Fragments":["for"]},{"Key":"simple formatted","Fragments":["output"]},{"Key":"formatted output","Fragments":["they","by"]},{"Key":"output they","Fragments":["work"]},{"Key":"they work","Fragments":["quite"]},{"Key":"work quite","Fragments":["well."]},{"Key":"Your style","Fragments":["is","is","is"]},{"Key":"is clean","Fragments":["and","and","and"]},{"Key":"the closing","Fragments":["bracket"]},{"Key":"closing bracket","Fragments":["is"]},{"Key":"bracket is","Fragments":["for"]},{"Key":"statement starting","Fragments":["on"]},{"Key":"line 21.","Fragments":["I'm"]},{"Key":"21. I'm","Fragments":["wondering"]},{"Key":"read if","Fragments":["you","you"]},{"Key":"you broke","Fragments":["up"]},{"Key":"of smaller","Fragments":["functions?"]},{"Key":"and consistent.","Fragments":["My"]},{"Key":"consistent. My","Fragments":["only"]},{"Key":"think `((std::isalpha(*it)","Fragments":["\u0026\u0026"]},{"Key":"`((std::isalpha(*it) \u0026\u0026","Fragments":["std::isupper(*it))"]},{"Key":"\u0026\u0026 std::isupper(*it))","Fragments":["||"]},{"Key":"std::isupper(*it)) ||","Fragments":["!std::isalpha(*it)`"]},{"Key":"|| !std::isalpha(*it)`","Fragments":["could"]},{"Key":"!std::isalpha(*it)` could","Fragments":["be"]},{"Key":"as `(!std::isalpha(*it))","Fragments":["||"]},{"Key":"`(!std::isalpha(*it)) ||","Fragments":["std::isupper(*it)`,","std::isupper(*it)`"]},{"Key":"|| std::isupper(*it)`,","Fragments":["or"]},{"Key":"std::isupper(*it)`, or","Fragments":["even"]},{"Key":"if `iends_with`","Fragments":["is"]},{"Key":"`iends_with` is","Fragments":["slower"]},{"Key":"than `ends_with`","Fragments":["and"]},{"Key":"`ends_with` and","Fragments":["you"]},{"Key":"need case","Fragments":["insensitivity"]},{"Key":"case insensitivity","Fragments":["for"]},{"Key":"insensitivity for","Fragments":["this"]},{"Key":"this check,","Fragments":["but"]},{"Key":"probably good","Fragments":["enough."]},{"Key":"first exercism.","Fragments":["I"]},{"Key":"exercism. I","Fragments":["want"]},{"Key":"1. \"Bridge\"","Fragments":["my"]},{"Key":"\"Bridge\" my","Fragments":["knowledge"]},{"Key":"of C","Fragments":["and"]},{"Key":"2. Understand","Fragments":["the"]},{"Key":"Understand the","Fragments":["language"]},{"Key":"language better","Fragments":["to"]},{"Key":"these lessons","Fragments":["in"]},{"Key":"lessons in","Fragments":["other"]},{"Key":"this exercism","Fragments":["I"]},{"Key":"just installed","Fragments":["the"]},{"Key":"installed the","Fragments":["tools"]},{"Key":"tools (exercism","Fragments":["CLI,"]},{"Key":"(exercism CLI,","Fragments":["cmake"]},{"Key":"CLI, cmake","Fragments":["and"]},{"Key":"cmake and","Fragments":["boost"]},{"Key":"with Homebrew)","Fragments":["and"]},{"Key":"Homebrew) and","Fragments":["started"]},{"Key":"and started","Fragments":["coding"]},{"Key":"started coding","Fragments":["after"]},{"Key":"coding after","Fragments":["reading"]},{"Key":"first cycle","Fragments":["was"]},{"Key":"cycle was","Fragments":["the"]},{"Key":"common response:","Fragments":["\"Whatever.\","]},{"Key":"response: \"Whatever.\",","Fragments":["hence"]},{"Key":"\"Whatever.\", hence","Fragments":["no"]},{"Key":"hence no","Fragments":["time"]},{"Key":"no time","Fragments":["spent","to"]},{"Key":"time spent","Fragments":["there."]},{"Key":"next ones","Fragments":["made"]},{"Key":"ones made","Fragments":["me"]},{"Key":"me have","Fragments":["to"]},{"Key":"look up","Fragments":["how","all"]},{"Key":"up how","Fragments":["to"]},{"Key":"get information","Fragments":["with"]},{"Key":"information with","Fragments":["the"]},{"Key":"string class,","Fragments":["and"]},{"Key":"search around","Fragments":["for"]},{"Key":"shouting case","Fragments":["is"]},{"Key":"needs improvement,","Fragments":["since"]},{"Key":"improvement, since","Fragments":["I"]},{"Key":"couple flags","Fragments":["and"]},{"Key":"flags and","Fragments":["a"]},{"Key":"cases seemed","Fragments":["pretty"]},{"Key":"seemed pretty","Fragments":["straight","straightforward."]},{"Key":"straight forward,","Fragments":["but"]},{"Key":"forward, but","Fragments":["they"]},{"Key":"some improvement","Fragments":["I"]},{"Key":"improvement I","Fragments":["haven't"]},{"Key":"haven't seen.","Fragments":["Please"]},{"Key":"seen. Please","Fragments":["let"]},{"Key":"Could be","Fragments":["improved"]},{"Key":"improved with","Fragments":["extra"]},{"Key":"with extra","Fragments":["checks"]},{"Key":"extra checks","Fragments":["in"]},{"Key":"characters 'ACGT'","Fragments":["but"]},{"Key":"'ACGT' but","Fragments":["no"]},{"Key":"no tests","Fragments":["required"]},{"Key":"tests required","Fragments":["it"]},{"Key":" (!std::isalpha(*it))","Fragments":["||"]},{"Key":"(!std::isalpha(*it)) ||","Fragments":["std::isupper(*it)"]},{"Key":"good suggestion,","Fragments":["I'll"]},{"Key":"suggestion, I'll","Fragments":["most","take"]},{"Key":"I'll most","Fragments":["likely"]},{"Key":"likely change","Fragments":["to"]},{"Key":"also return","Fragments":["true"]},{"Key":"for non-letter","Fragments":["characters","characters."]},{"Key":"non-letter characters","Fragments":["(spaces,"]},{"Key":"characters (spaces,","Fragments":["numbers,"]},{"Key":"(spaces, numbers,","Fragments":["etc)."]},{"Key":"Was going","Fragments":["to"]},{"Key":"matching routine","Fragments":["like"]},{"Key":"routine like","Fragments":["I"]},{"Key":"with Bob,","Fragments":["but"]},{"Key":"Bob, but","Fragments":["decided"]},{"Key":"other submitters","Fragments":["use"]},{"Key":"submitters use","Fragments":["with"]},{"Key":"with Bob.","Fragments":["My"]},{"Key":"Bob. My","Fragments":["local"]},{"Key":"My local","Fragments":["gcc"]},{"Key":"local gcc","Fragments":["didn't"]},{"Key":"gcc didn't","Fragments":["have"]},{"Key":"full version","Fragments":["of"]},{"Key":"of c++11,","Fragments":["so"]},{"Key":"c++11, so","Fragments":["I"]},{"Key":"regex libraries.","Fragments":["This"]},{"Key":"libraries. This","Fragments":["was"]},{"Key":"actually my","Fragments":["first"]},{"Key":"a c++","Fragments":["program,"]},{"Key":"c++ program,","Fragments":["so"]},{"Key":"program, so","Fragments":["it"]},{"Key":"me considerably","Fragments":["longer"]},{"Key":"considerably longer","Fragments":["to"]},{"Key":"get right.","Fragments":["Any"]},{"Key":"right. Any","Fragments":["suggestions"]},{"Key":"my approach","Fragments":["or"]},{"Key":"approach or","Fragments":["how"]},{"Key":"better would","Fragments":["be"]},{"Key":"feedback. There's","Fragments":["probably"]},{"Key":"There's probably","Fragments":["limited"]},{"Key":"probably limited","Fragments":["cases"]},{"Key":"limited cases","Fragments":["where"]},{"Key":"where I'm","Fragments":["actually"]},{"Key":"actually going","Fragments":["to"]},{"Key":"performance benefits","Fragments":["from"]},{"Key":"benefits from","Fragments":["a"]},{"Key":"single iteration,","Fragments":["and"]},{"Key":"iteration, and","Fragments":["with"]},{"Key":"in Bob,","Fragments":["there's"]},{"Key":"Bob, there's","Fragments":["probably"]},{"Key":"there's probably","Fragments":["many"]},{"Key":"probably many","Fragments":["cases"]},{"Key":"have messed","Fragments":["up"]},{"Key":"break it","Fragments":["out"]},{"Key":"(or use","Fragments":["the"]},{"Key":"The indentation","Fragments":["looked"]},{"Key":"indentation looked","Fragments":["fine"]},{"Key":"looked fine","Fragments":["when"]},{"Key":"fine when","Fragments":["I"]},{"Key":"submitted it,","Fragments":["but"]},{"Key":"but looking","Fragments":["at"]},{"Key":"file it","Fragments":["looks"]},{"Key":"like I've","Fragments":["mixed"]},{"Key":"I've mixed","Fragments":["tabs"]},{"Key":"mixed tabs","Fragments":["and"]},{"Key":"and spaces","Fragments":["which"]},{"Key":"spaces which","Fragments":["is"]},{"Key":"would reduce","Fragments":["the"]},{"Key":"to once","Fragments":["for"]},{"Key":"n times","Fragments":["where"]},{"Key":"times where","Fragments":["n"]},{"Key":"where n","Fragments":["is"]},{"Key":"stringstream approach","Fragments":["to"]},{"Key":"to tokenizing","Fragments":["the"]},{"Key":"it removed","Fragments":["the"]},{"Key":"any further","Fragments":["imports"]},{"Key":"further imports","Fragments":["(no"]},{"Key":"imports (no","Fragments":["need"]},{"Key":"(no need","Fragments":["for","for"]},{"Key":"(See https://stackoverflow.com/questions/236129/how-to-split-a-string-in-c","Fragments":["for"]},{"Key":"https://stackoverflow.com/questions/236129/how-to-split-a-string-in-c for","Fragments":["a"]},{"Key":"good overview","Fragments":["of"]},{"Key":"overview of","Fragments":["all"]},{"Key":"about splitting","Fragments":["strings)."]},{"Key":"quick comment:","Fragments":["according"]},{"Key":"comment: according","Fragments":["to"]},{"Key":"the specification,","Fragments":["if"]},{"Key":"specification, if","Fragments":["the"]},{"Key":"different lengths","Fragments":["you"]},{"Key":"lengths you","Fragments":["were"]},{"Key":"were supposed","Fragments":["to"]},{"Key":"extra length,","Fragments":["not"]},{"Key":"a quirk","Fragments":["of"]},{"Key":"quirk of","Fragments":["the"]},{"Key":"suite that","Fragments":["they"]},{"Key":"they both","Fragments":["happen","aren't"]},{"Key":"both happen","Fragments":["to"]},{"Key":"My comments","Fragments":["are"]},{"Key":"are regarding","Fragments":["style"]},{"Key":"regarding style","Fragments":["more"]},{"Key":"style more","Fragments":["so"]},{"Key":"so than","Fragments":["content,"]},{"Key":"than content,","Fragments":["due"]},{"Key":"content, due","Fragments":["to"]},{"Key":"the scale","Fragments":["of"]},{"Key":"scale of","Fragments":["this"]},{"Key":"this project.","Fragments":["Your"]},{"Key":"project. Your","Fragments":["code"]},{"Key":" Firstly,","Fragments":["you"]},{"Key":"Firstly, you","Fragments":["might"]},{"Key":"rename the","Fragments":["string"]},{"Key":"string variable","Fragments":["to"]},{"Key":"less mystifying.","Fragments":["The"]},{"Key":"mystifying. The","Fragments":["names"]},{"Key":"names `str'","Fragments":["and"]},{"Key":"`str' and","Fragments":["'msg'"]},{"Key":"and 'msg'","Fragments":["are"]},{"Key":"'msg' are","Fragments":["very"]},{"Key":"come across,","Fragments":["and"]},{"Key":"across, and","Fragments":["they"]},{"Key":"Your flag","Fragments":["`one_uppercase`"]},{"Key":"flag `one_uppercase`","Fragments":["may"]},{"Key":"`one_uppercase` may","Fragments":["be"]},{"Key":"somewhat misleading","Fragments":["in"]},{"Key":"misleading in","Fragments":["its"]},{"Key":"While using","Fragments":["a"]},{"Key":"a counter-based","Fragments":["for-loop"]},{"Key":"counter-based for-loop","Fragments":["is"]},{"Key":"for-loop is","Fragments":["perfectly"]},{"Key":"perfectly acceptable,","Fragments":["you"]},{"Key":"acceptable, you","Fragments":["might"]},{"Key":"iterator since","Fragments":["the"]},{"Key":"container object.","Fragments":["Another"]},{"Key":"object. Another","Fragments":["option"]},{"Key":"the [C++11","Fragments":["range-based"]},{"Key":"[C++11 range-based","Fragments":["for-loop](http://en.wikipedia.org/wiki/C%2B%2B11#Range-based_for_loop)."]},{"Key":"have as","Fragments":["the"]},{"Key":"condition `shouting","Fragments":["\u0026\u0026"]},{"Key":"`shouting \u0026\u0026","Fragments":["i"]},{"Key":"\u003c something.length()`.","Fragments":["Are"]},{"Key":"something.length()`. Are","Fragments":["you"]},{"Key":"you attempting","Fragments":["early"]},{"Key":"attempting early","Fragments":["termination"]},{"Key":"early termination","Fragments":["of"]},{"Key":"termination of","Fragments":["the"]},{"Key":"loop? If","Fragments":["so,"]},{"Key":"so, a","Fragments":["`break`"]},{"Key":"`break` statement","Fragments":["within"]},{"Key":"statement within","Fragments":["the"]},{"Key":"loop body","Fragments":["may","makes"]},{"Key":"body may","Fragments":["be"]},{"Key":"copy before","Fragments":["trimming","incrementing"]},{"Key":"before trimming","Fragments":["whitespace,"]},{"Key":"trimming whitespace,","Fragments":["you"]},{"Key":"whitespace, you","Fragments":["may"]},{"Key":"state as","Fragments":["such"]},{"Key":"such by","Fragments":["adding"]},{"Key":"qualifier to","Fragments":["your"]},{"Key":"You test","Fragments":["if"]},{"Key":"empty by","Fragments":["checking"]},{"Key":"checking its","Fragments":["length,"]},{"Key":"its length,","Fragments":["but"]},{"Key":"length, but","Fragments":["the"]},{"Key":"called `empty()`","Fragments":["which"]},{"Key":"`empty()` which","Fragments":["does"]},{"Key":"does just","Fragments":["that."]},{"Key":"Finally, since","Fragments":["your","you","you"]},{"Key":"string literal.","Fragments":["It"]},{"Key":"literal. It","Fragments":["will"]},{"Key":"passed through","Fragments":["the"]},{"Key":"iterator not","Fragments":["being"]},{"Key":"for-loop was","Fragments":["an"]},{"Key":"an artifact","Fragments":["from"]},{"Key":"artifact from","Fragments":["when"]},{"Key":"iterator. Most","Fragments":["of"]},{"Key":"my recent","Fragments":["work"]},{"Key":"recent work","Fragments":["with"]},{"Key":"with vectors","Fragments":["required"]},{"Key":"vectors required","Fragments":["multiple"]},{"Key":"required multiple","Fragments":["passes,"]},{"Key":"multiple passes,","Fragments":["so"]},{"Key":"passes, so","Fragments":["I"]},{"Key":"of reusing","Fragments":["iterators"]},{"Key":"reusing iterators","Fragments":["by"]},{"Key":"iterators by","Fragments":["declaring"]},{"Key":"them outside","Fragments":["of"]},{"Key":"was aiming","Fragments":["for"]},{"Key":"aiming for","Fragments":["a"]},{"Key":"a highly-readable","Fragments":["implementation."]},{"Key":"highly-readable implementation.","Fragments":["That"]},{"Key":"implementation. That","Fragments":["is,"]},{"Key":"is, one","Fragments":["being"]},{"Key":"one being","Fragments":["clear"]},{"Key":"I reworked","Fragments":["the","this"]},{"Key":"reworked the","Fragments":["code"]},{"Key":"Nice work.","Fragments":["As","You"]},{"Key":"work. As","Fragments":["a"]},{"Key":"minor maintenance","Fragments":["thing"]},{"Key":"maintenance thing","Fragments":["you"]},{"Key":"have left","Fragments":["in"]},{"Key":"suspect was","Fragments":["part"]},{"Key":"was part","Fragments":["of","of"]},{"Key":"previous attempt","Fragments":["```boost::smatch"]},{"Key":"attempt ```boost::smatch","Fragments":["results;```."]},{"Key":"an increment","Fragments":["operator"]},{"Key":"increment operator","Fragments":["when"]},{"Key":"operator when","Fragments":["increasing"]},{"Key":"when increasing","Fragments":["the"]},{"Key":"increasing the","Fragments":["word"]},{"Key":"I altered","Fragments":["the"]},{"Key":"altered the","Fragments":["code"]},{"Key":"avoid behind-the-scenes","Fragments":["data"]},{"Key":"behind-the-scenes data","Fragments":["shuffling."]},{"Key":"data shuffling.","Fragments":["In"]},{"Key":"shuffling. In","Fragments":["addition,"]},{"Key":"addition, the","Fragments":["string"]},{"Key":"reference so","Fragments":["as","that","that"]},{"Key":"introduce a","Fragments":["new"]},{"Key":"new state","Fragments":["variable","will"]},{"Key":"state variable","Fragments":["`empty`"]},{"Key":"variable `empty`","Fragments":["because"]},{"Key":"`empty` because","Fragments":["of"]},{"Key":"the above","Fragments":["changes."]},{"Key":"loop structure","Fragments":["to"]},{"Key":"structure to","Fragments":["use","add"]},{"Key":"iteration form,","Fragments":["while"]},{"Key":"form, while","Fragments":["modifying"]},{"Key":"while modifying","Fragments":["the"]},{"Key":"tests within","Fragments":["it."]},{"Key":"within it.","Fragments":["I"]},{"Key":"opted not","Fragments":["to"]},{"Key":"to nest","Fragments":["the"]},{"Key":"nest the","Fragments":["`islower`"]},{"Key":"the `islower`","Fragments":["test"]},{"Key":"`islower` test","Fragments":["within"]},{"Key":"test within","Fragments":["the"]},{"Key":"the `isalpha`","Fragments":["block,"]},{"Key":"`isalpha` block,","Fragments":["since"]},{"Key":"block, since","Fragments":["the"]},{"Key":"the majority","Fragments":["of"]},{"Key":"given message","Fragments":["will"]},{"Key":"message will","Fragments":["be"]},{"Key":"be characters","Fragments":["rather"]},{"Key":"characters rather","Fragments":["than"]},{"Key":"than punctuation","Fragments":["or"]},{"Key":"Using `char","Fragments":["c`"]},{"Key":"`char c`","Fragments":["rather"]},{"Key":"c` rather","Fragments":["than"]},{"Key":"than `auto","Fragments":["c`"]},{"Key":"`auto c`","Fragments":["has"]},{"Key":"c` has","Fragments":["no"]},{"Key":"no major","Fragments":["importance."]},{"Key":"major importance.","Fragments":["I"]},{"Key":"importance. I","Fragments":["just"]},{"Key":"it kept","Fragments":["the"]},{"Key":"readability a","Fragments":["small"]},{"Key":"small degree","Fragments":["higher."]},{"Key":"will print","Fragments":["\"Sure.\""]},{"Key":"print \"Sure.\"","Fragments":["for"]},{"Key":"\"Sure.\" for","Fragments":["a"]},{"Key":"but ending","Fragments":["with"]},{"Key":"ending with","Fragments":["a","double"]},{"Key":"mark. I","Fragments":["would"]},{"Key":"would interpret","Fragments":["such"]},{"Key":"interpret such","Fragments":["a"]},{"Key":"a quizzical","Fragments":["look."]},{"Key":"remove some","Fragments":["of","of"]},{"Key":"iterator declarations","Fragments":["in"]},{"Key":"the shout","Fragments":["function"]},{"Key":"shout function","Fragments":["by"]},{"Key":"new ranged","Fragments":["for"]},{"Key":"loop construct","Fragments":["in"]},{"Key":"C++11. ie","Fragments":["```for"]},{"Key":"ie ```for","Fragments":["(char"]},{"Key":"```for (char","Fragments":["c","ch"]},{"Key":": text)","Fragments":["{"]},{"Key":"text) {","Fragments":["..."]},{"Key":"my 2","Fragments":["cents."]},{"Key":"2 cents.","Fragments":["I"]},{"Key":"cents. I","Fragments":["have"]},{"Key":"solutions on","Fragments":["here"]},{"Key":"here use","Fragments":["a","boost)."]},{"Key":"argument order","Fragments":["like"]},{"Key":"order like","Fragments":["you"]},{"Key":"you have.","Fragments":["I"]},{"Key":"have. I","Fragments":["am"]},{"Key":"am generally","Fragments":["cautious"]},{"Key":"generally cautious","Fragments":["to"]},{"Key":"cautious to","Fragments":["introduce"]},{"Key":"introduce recursion","Fragments":["for"]},{"Key":"recursion for","Fragments":["things"]},{"Key":"always found","Fragments":["maintaining"]},{"Key":"found maintaining","Fragments":["it"]},{"Key":"maintaining it","Fragments":["just"]},{"Key":"that little","Fragments":["bit"]},{"Key":"bit harder.","Fragments":["This"]},{"Key":"harder. This","Fragments":["includes"]},{"Key":"This includes","Fragments":["code"]},{"Key":"includes code","Fragments":["written"]},{"Key":"code written","Fragments":["by"]},{"Key":"by myself","Fragments":["and"]},{"Key":"myself and","Fragments":["my"]},{"Key":"my peers","Fragments":["in"]},{"Key":"peers in","Fragments":["this"]},{"Key":"My preferred","Fragments":["choice"]},{"Key":"preferred choice","Fragments":["in"]},{"Key":"choice in","Fragments":["this"]},{"Key":"case (keeping","Fragments":["the"]},{"Key":"(keeping the","Fragments":["algorithm"]},{"Key":"the same)","Fragments":["would"]},{"Key":"same) would","Fragments":["be"]},{"Key":"to defer","Fragments":["the"]},{"Key":"defer the","Fragments":["computation"]},{"Key":"computation to","Fragments":["a"]},{"Key":"helper ```compute_impl()```","Fragments":["function"]},{"Key":"```compute_impl()``` function","Fragments":["and"]},{"Key":"initial ```compute()```","Fragments":["function"]},{"Key":"```compute()``` function","Fragments":["perform"]},{"Key":"helper with","Fragments":["the"]},{"Key":"arguments in","Fragments":["the"]},{"Key":"than have","Fragments":["several"]},{"Key":"have several","Fragments":["of"]},{"Key":"several of","Fragments":["your"]},{"Key":"members perform","Fragments":["tests"]},{"Key":"perform tests","Fragments":["on"]},{"Key":"tests on","Fragments":["the"]},{"Key":"string, how","Fragments":["about"]},{"Key":"how about","Fragments":["iterating"]},{"Key":"about iterating","Fragments":["over"]},{"Key":"over it","Fragments":["only"]},{"Key":"method called","Fragments":["by"]},{"Key":"constructor. From","Fragments":["within,"]},{"Key":"From within,","Fragments":["it"]},{"Key":"within, it","Fragments":["can"]},{"Key":"can set","Fragments":["some"]},{"Key":"set some","Fragments":["member"]},{"Key":"some member","Fragments":["variables"]},{"Key":"the qualities","Fragments":["the"]},{"Key":"qualities the","Fragments":["string"]},{"Key":"string expresses.","Fragments":["Then"]},{"Key":"expresses. Then","Fragments":["your"]},{"Key":"your helpers","Fragments":["which"]},{"Key":"helpers which","Fragments":["are"]},{"Key":"return simple","Fragments":["boolean"]},{"Key":"simple boolean","Fragments":["expressions."]},{"Key":"Also, have","Fragments":["you"]},{"Key":"considered iterators","Fragments":["as"]},{"Key":"to indexing","Fragments":["into"]},{"Key":"indexing into","Fragments":["the"]},{"Key":"Consider changing","Fragments":["your"]},{"Key":"changing your","Fragments":["constructor"]},{"Key":"\u0026``` as","Fragments":["this"]},{"Key":"better C++","Fragments":["style.","if"]},{"Key":"style. An","Fragments":["input"]},{"Key":"An input","Fragments":["of"]},{"Key":"of ```const","Fragments":["char"]},{"Key":"*``` will","Fragments":["be"]},{"Key":"be implicitly","Fragments":["converted"]},{"Key":"implicitly converted","Fragments":["so"]},{"Key":"converted so","Fragments":["the"]},{"Key":"tests all","Fragments":["work."]},{"Key":"all work.","Fragments":["You"]},{"Key":"work. You","Fragments":["then","should"]},{"Key":"You then","Fragments":["will"]},{"Key":"then will","Fragments":["have"]},{"Key":"string member","Fragments":["functions"]},{"Key":"functions such","Fragments":["as"]},{"Key":"as length()","Fragments":["to"]},{"Key":"construct your","Fragments":["loop"]},{"Key":"can initialise","Fragments":["```dnaResult```"]},{"Key":"initialise ```dnaResult```","Fragments":["in"]},{"Key":"```dnaResult``` in","Fragments":["a"]},{"Key":"constructor initialisation","Fragments":["list."]},{"Key":"initialisation list.","Fragments":["```counter(const"]},{"Key":"list. ```counter(const","Fragments":["std::string"]},{"Key":"```counter(const std::string","Fragments":["\u0026strand)"]},{"Key":"std::string \u0026strand)","Fragments":[":"]},{"Key":"\u0026strand) :","Fragments":["dnaResult{{'A',0},...}"]},{"Key":": dnaResult{{'A',0},...}","Fragments":["{"]},{"Key":"dnaResult{{'A',0},...} {","Fragments":["/*"]},{"Key":"/* other","Fragments":["code"]},{"Key":"other code","Fragments":["here","too"]},{"Key":"here */","Fragments":["}```."]},{"Key":"*/ }```.","Fragments":["This"]},{"Key":"}```. This","Fragments":["avoids"]},{"Key":"first default","Fragments":["construction"]},{"Key":"default construction","Fragments":["followed"]},{"Key":"construction followed","Fragments":["by"]},{"Key":"your initialisation","Fragments":["into"]},{"Key":"initialisation into","Fragments":["a"]},{"Key":"Nice solution.","Fragments":["Two"]},{"Key":"solution. Two","Fragments":["small"]},{"Key":"resulting iterator","Fragments":["from"]},{"Key":"iterator from","Fragments":["the"]},{"Key":"to find()","Fragments":["instead"]},{"Key":"find() instead","Fragments":["of"]},{"Key":"to reindex","Fragments":["into"]},{"Key":"reindex into","Fragments":["the"]},{"Key":"constructor initialization","Fragments":["list"]},{"Key":"initialization list","Fragments":["to","of","you"]},{"Key":"list to","Fragments":["setup"]},{"Key":"to setup","Fragments":["the","your"]},{"Key":"setup the","Fragments":["member"]},{"Key":"think `!std::islower(*it)`","Fragments":["is"]},{"Key":"`!std::islower(*it)` is","Fragments":["equivalent"]},{"Key":"to `(!std::isalpha(*it))","Fragments":["||"]},{"Key":"|| std::isupper(*it)`","Fragments":["in"]},{"Key":"std::isupper(*it)` in","Fragments":["that"]},{"Key":"them return","Fragments":["true"]},{"Key":"static variables","Fragments":["for"]},{"Key":"local generate","Fragments":["function"]},{"Key":"generate function","Fragments":["doesn't"]},{"Key":"very C++","Fragments":["but"]},{"Key":"C++ but","Fragments":["it"]},{"Key":"it meets","Fragments":["the"]},{"Key":"meets the","Fragments":["requirements."]},{"Key":"the requirements.","Fragments":["Yes"]},{"Key":"requirements. Yes","Fragments":["this"]},{"Key":"Yes this","Fragments":["doesn't"]},{"Key":"doesn't wrap","Fragments":["the"]},{"Key":"wrap the","Fragments":["character"]},{"Key":"character part","Fragments":["of"]},{"Key":"give up,","Fragments":["ConorBrewster!"]},{"Key":"up, ConorBrewster!","Fragments":["You"]},{"Key":"ConorBrewster! You","Fragments":["can"]},{"Key":"wrote two","Fragments":["versions"]},{"Key":"versions one","Fragments":["with"]},{"Key":"with STL","Fragments":["and"]},{"Key":"with Boost.","Fragments":["Although"]},{"Key":"Boost. Although","Fragments":["they"]},{"Key":"Although they","Fragments":["pass"]},{"Key":"they pass","Fragments":["the"]},{"Key":"tests I'm","Fragments":["not"]},{"Key":"convinced they","Fragments":["really"]},{"Key":"work 100%.","Fragments":["Perhaps"]},{"Key":"100%. Perhaps","Fragments":["the"]},{"Key":"Perhaps the","Fragments":["strings"]},{"Key":"regex separators","Fragments":["need"]},{"Key":"separators need","Fragments":["some"]},{"Key":"characters escaping","Fragments":["?"]},{"Key":"missed removing","Fragments":["that"]},{"Key":"removing that","Fragments":["variable"]},{"Key":"variable during","Fragments":["clean"]},{"Key":"during clean","Fragments":["up."]},{"Key":"clean up.","Fragments":["Also"]},{"Key":"up. Also","Fragments":["didn't"]},{"Key":"Also didn't","Fragments":["realize"]},{"Key":"the increment","Fragments":["opperator"]},{"Key":"increment opperator","Fragments":["on"]},{"Key":"opperator on","Fragments":["a"]},{"Key":"that. Thanks","Fragments":["for"]},{"Key":"tips, I've","Fragments":["made"]},{"Key":"I've made","Fragments":["the"]},{"Key":"the changes","Fragments":["locally","are"]},{"Key":"changes locally","Fragments":["and"]},{"Key":"locally and","Fragments":["everything"]},{"Key":"everything continue","Fragments":["to"]},{"Key":" Thought","Fragments":["I","I"]},{"Key":"Thought I","Fragments":["might","might"]},{"Key":"answer different","Fragments":["to"]},{"Key":"different to","Fragments":["many"]},{"Key":"many others.","Fragments":["This"]},{"Key":"others. This","Fragments":["isn't"]},{"Key":"readable solution","Fragments":["however"]},{"Key":"however thanks","Fragments":["to"]},{"Key":"the specific","Fragments":["characters"]},{"Key":"specific characters","Fragments":["being"]},{"Key":"used there","Fragments":["is"]},{"Key":"a reasonably","Fragments":["simple"]},{"Key":"reasonably simple","Fragments":["bit"]},{"Key":"simple bit","Fragments":["transformation"]},{"Key":"bit transformation","Fragments":["between"]},{"Key":"transformation between","Fragments":["them."]},{"Key":"between them.","Fragments":["Instead"]},{"Key":"them. Instead","Fragments":["of"]},{"Key":"statement I","Fragments":["can"]},{"Key":"single character","Fragments":["comparison"]},{"Key":"character comparison","Fragments":["to"]},{"Key":"correct masks","Fragments":["for"]},{"Key":"masks for","Fragments":["the"]},{"Key":"will admit","Fragments":["readability,"]},{"Key":"admit readability,","Fragments":["maintainability"]},{"Key":"readability, maintainability","Fragments":["and"]},{"Key":"maintainability and","Fragments":["extensibility"]},{"Key":"and extensibility","Fragments":["are"]},{"Key":"extensibility are","Fragments":["almost"]},{"Key":"are almost","Fragments":["impossible"]},{"Key":"almost impossible","Fragments":["with"]},{"Key":"impossible with","Fragments":["this"]},{"Key":"this design.","Fragments":["Comments"]},{"Key":"design. Comments","Fragments":["are"]},{"Key":"Comments are","Fragments":["still"]},{"Key":"the debug","Fragments":["```std::cout```"]},{"Key":"debug ```std::cout```","Fragments":["that"]},{"Key":"```std::cout``` that","Fragments":["is"]},{"Key":"this leaks","Fragments":["memory."]},{"Key":"leaks memory.","Fragments":["The"]},{"Key":"memory. The","Fragments":["call"]},{"Key":"to new","Fragments":["has"]},{"Key":"new has","Fragments":["no"]},{"Key":"no delete","Fragments":["to"]},{"Key":"delete to","Fragments":["match"]},{"Key":"match it.","Fragments":["You"]},{"Key":"```std::string``` object","Fragments":["rather"]},{"Key":"object rather","Fragments":["than"]},{"Key":"than ```const","Fragments":["char"]},{"Key":"char *```.","Fragments":["That"]},{"Key":"*```. That","Fragments":["way"]},{"Key":"declare ```retStrand```","Fragments":["on"]},{"Key":"```retStrand``` on","Fragments":["the"]},{"Key":"stack and","Fragments":["return"]},{"Key":"A 'switch'","Fragments":["statement"]},{"Key":"'switch' statement","Fragments":["may"]},{"Key":"statement may","Fragments":["be"]},{"Key":"appropriate here","Fragments":["than"]},{"Key":"here than","Fragments":["your"]},{"Key":"your sequential","Fragments":["'if'"]},{"Key":"sequential 'if'","Fragments":["conditions."]},{"Key":"tokenizer. I","Fragments":["spent"]},{"Key":"spent some","Fragments":["time"]},{"Key":"time playing","Fragments":["with"]},{"Key":"that capability","Fragments":["when"]},{"Key":"capability when","Fragments":["I"]},{"Key":"solution as","Fragments":["I","the"]},{"Key":"wasn't familiar","Fragments":["with"]},{"Key":"that tokenizer's","Fragments":["default"]},{"Key":"tokenizer's default","Fragments":["option"]},{"Key":"default option","Fragments":["is"]},{"Key":"option is","Fragments":["to"]},{"Key":"tokenize on","Fragments":["words"]},{"Key":"on words","Fragments":["exactly"]},{"Key":"words exactly","Fragments":["as"]},{"Key":"a nitpick","Fragments":["as"]},{"Key":"nitpick as","Fragments":["the"]},{"Key":"good, works","Fragments":["and"]},{"Key":"and meets","Fragments":["all"]},{"Key":"meets all","Fragments":["the"]},{"Key":"tests. You","Fragments":["will"]},{"Key":"call out","Fragments":["the","for"]},{"Key":"tokenizer seperators","Fragments":["specifically"]},{"Key":"seperators specifically","Fragments":["if"]},{"Key":"specifically if","Fragments":["tests"]},{"Key":"if tests","Fragments":["or"]},{"Key":"tests or","Fragments":["input"]},{"Key":"or input","Fragments":["start"]},{"Key":"input start","Fragments":["including"]},{"Key":"start including","Fragments":["words"]},{"Key":"including words","Fragments":["like"]},{"Key":"like \"she's\"","Fragments":["or","or"]},{"Key":"\"she's\" or","Fragments":["\"co-operate\"","\"co-operate\"."]},{"Key":"whole ```static_cast\u003c\u003e```","Fragments":["on"]},{"Key":"```static_cast\u003c\u003e``` on","Fragments":["the"]},{"Key":"function pointer.","Fragments":["I"]},{"Key":"pointer. I","Fragments":["think"]},{"Key":"think with","Fragments":["the"]},{"Key":"new for","Fragments":["range"]},{"Key":"for range","Fragments":["syntax"]},{"Key":"range syntax","Fragments":["you"]},{"Key":"syntax you","Fragments":["can"]},{"Key":"something just","Fragments":["as"]},{"Key":"using stringstreams","Fragments":["and"]},{"Key":"and minimizing","Fragments":["library"]},{"Key":"minimizing library","Fragments":["dependencies"]},{"Key":"library dependencies","Fragments":["by"]},{"Key":"dependencies by","Fragments":["using"]},{"Key":"sure your","Fragments":["solution"]},{"Key":"is complete.","Fragments":["When"]},{"Key":"complete. When","Fragments":["I"]},{"Key":"it locally,","Fragments":["it"]},{"Key":"locally, it","Fragments":["get's"]},{"Key":"it get's","Fragments":["caught"]},{"Key":"get's caught","Fragments":["on"]},{"Key":"caught on","Fragments":["the"]},{"Key":"the ignores_punctuation","Fragments":["test"]},{"Key":"ignores_punctuation test","Fragments":["(test4),"]},{"Key":"test (test4),","Fragments":["and"]},{"Key":"(test4), and","Fragments":["I'm"]},{"Key":"sure it'll","Fragments":["pass"]},{"Key":"it'll pass","Fragments":["the"]},{"Key":"ones below","Fragments":["it"]},{"Key":"below it","Fragments":["either."]},{"Key":"clear implementation,","Fragments":["it"]},{"Key":"parse at","Fragments":["all."]},{"Key":"all. Which","Fragments":["is"]},{"Key":"with @nikko.","Fragments":["It"]},{"Key":"@nikko. It","Fragments":["would"]},{"Key":"would add","Fragments":["a"]},{"Key":"touch more","Fragments":["clarity."]},{"Key":"more clarity.","Fragments":["Either"]},{"Key":"clarity. Either","Fragments":["strip"]},{"Key":"Either strip","Fragments":["out"]},{"Key":"the ``str2Length``","Fragments":["variable"]},{"Key":"``str2Length`` variable","Fragments":["and"]},{"Key":"then also","Fragments":["check"]},{"Key":"check ``str2.length()``","Fragments":["in"]},{"Key":"``str2.length()`` in","Fragments":["the"]},{"Key":"condition, or","Fragments":["add"]},{"Key":"or add","Fragments":["a"]},{"Key":"new ``str1Length``","Fragments":["variable"]},{"Key":"``str1Length`` variable","Fragments":["and"]},{"Key":"that along","Fragments":["with"]},{"Key":"with ``str2Length``","Fragments":["in"]},{"Key":"``str2Length`` in","Fragments":["the"]},{"Key":"loop condition.","Fragments":["It's"]},{"Key":"condition. It's","Fragments":["debatable"]},{"Key":"It's debatable","Fragments":["which"]},{"Key":"debatable which","Fragments":["one"]},{"Key":"clear. Personally","Fragments":["I"]},{"Key":"Nice solution!","Fragments":["Concise,"]},{"Key":"solution! Concise,","Fragments":["and"]},{"Key":"Concise, and","Fragments":["very"]},{"Key":"of tokenizer.","Fragments":["The"]},{"Key":"tokenizer. The","Fragments":["default"]},{"Key":"default action","Fragments":["does"]},{"Key":"action does","Fragments":["exactly"]},{"Key":"tests call","Fragments":["for."]},{"Key":"call for.","Fragments":["While"]},{"Key":"for. While","Fragments":["not"]},{"Key":"While not","Fragments":["part"]},{"Key":"of tests,","Fragments":["you'll"]},{"Key":"tests, you'll","Fragments":["would"]},{"Key":"you'll would","Fragments":["need"]},{"Key":"the seperator","Fragments":["specificially"]},{"Key":"seperator specificially","Fragments":["if"]},{"Key":"specificially if","Fragments":["input"]},{"Key":"input or","Fragments":["tests"]},{"Key":"or tests","Fragments":["start"]},{"Key":"tests start","Fragments":["using"]},{"Key":"start using","Fragments":["words"]},{"Key":"using words","Fragments":["like"]},{"Key":"For nitpicks,","Fragments":["I"]},{"Key":"nitpicks, I","Fragments":["suggest"]},{"Key":"string routines","Fragments":["to"]},{"Key":"routines to","Fragments":["switch"]},{"Key":"case. It'll","Fragments":["give"]},{"Key":"It'll give","Fragments":["you"]},{"Key":"more c++","Fragments":["like"]},{"Key":"c++ like","Fragments":["solution."]},{"Key":"like solution.","Fragments":["Take"]},{"Key":"solution. Take","Fragments":["a"]},{"Key":"at routines","Fragments":["like"]},{"Key":"routines like","Fragments":["boost::to_lower"]},{"Key":"like boost::to_lower","Fragments":["or"]},{"Key":"boost::to_lower or","Fragments":["boost::to_lower_copy."]},{"Key":"Just wrote","Fragments":["the"]},{"Key":"to mind.","Fragments":["The"]},{"Key":"The formatted","Fragments":["output"]},{"Key":"output by","Fragments":["calling"]},{"Key":"calling ```substr()```","Fragments":["multiple"]},{"Key":"```substr()``` multiple","Fragments":["times"]},{"Key":"times doesn't","Fragments":["seem"]},{"Key":"that great","Fragments":["but"]},{"Key":"great but","Fragments":["might"]},{"Key":" Maintained","Fragments":["the"]},{"Key":"Maintained the","Fragments":["sorted"]},{"Key":"sorted order","Fragments":["of"]},{"Key":"names as","Fragments":["they"]},{"Key":"were inserted","Fragments":["into"]},{"Key":"into each","Fragments":["list."]},{"Key":"each list.","Fragments":["Used"]},{"Key":"list. Used","Fragments":["an"]},{"Key":"Used an","Fragments":["early"]},{"Key":"to push_back","Fragments":["without"]},{"Key":"push_back without","Fragments":["a"]},{"Key":"Replaced my","Fragments":["hand"]},{"Key":"my hand","Fragments":["crafted"]},{"Key":"hand crafted","Fragments":["loop"]},{"Key":"crafted loop","Fragments":["with"]},{"Key":"with ```std::lower_bound()```","Fragments":["since"]},{"Key":"```std::lower_bound()``` since","Fragments":["this"]},{"Key":"very elaborate","Fragments":["solution"]},{"Key":"elaborate solution","Fragments":["and"]},{"Key":"random library.","Fragments":["The"]},{"Key":"library. The","Fragments":["use"]},{"Key":"of random","Fragments":["device","numbers"]},{"Key":"random device","Fragments":["is"]},{"Key":"device is","Fragments":["questionable.","used"]},{"Key":"is questionable.","Fragments":["Random"]},{"Key":"questionable. Random","Fragments":["device"]},{"Key":"Random device","Fragments":["is"]},{"Key":"a 'true'","Fragments":["source"]},{"Key":"'true' source","Fragments":["of"]},{"Key":"numbers instead","Fragments":["of"]},{"Key":"a psudo-random","Fragments":["set.","number"]},{"Key":"psudo-random set.","Fragments":["But"]},{"Key":"set. But","Fragments":["this"]},{"Key":"so could","Fragments":["just"]},{"Key":"an alias","Fragments":["for"]},{"Key":"alias for","Fragments":["an"]},{"Key":"an normal","Fragments":["generator"]},{"Key":"normal generator","Fragments":["anyway."]},{"Key":"The formatting","Fragments":["and"]},{"Key":"and heavy","Fragments":["nesting"]},{"Key":"heavy nesting","Fragments":["of"]},{"Key":"nesting of","Fragments":["for"]},{"Key":"loops seems","Fragments":["like"]},{"Key":"maintenance nightmare","Fragments":["for"]},{"Key":"nightmare for","Fragments":["anyone"]},{"Key":"who didn't","Fragments":["write"]},{"Key":"didn't write","Fragments":["the"]},{"Key":"with @gregg.","Fragments":["```rand()```"]},{"Key":"@gregg. ```rand()```","Fragments":["should"]},{"Key":"```rand()``` should","Fragments":["be"]},{"Key":"new C++11","Fragments":["\u003crandom\u003e","range"]},{"Key":"C++11 \u003crandom\u003e","Fragments":["library"]},{"Key":"\u003crandom\u003e library","Fragments":["and"]},{"Key":"only dealing","Fragments":["with"]},{"Key":"with psuedo-random","Fragments":["numbers."]},{"Key":"psuedo-random numbers.","Fragments":["The"]},{"Key":"numbers. The","Fragments":["seed"]},{"Key":"The seed","Fragments":["is"]},{"Key":"seed is","Fragments":["everything"]},{"Key":"is everything","Fragments":["and"]},{"Key":"everything and","Fragments":["this"]},{"Key":"be unsafe","Fragments":["and"]},{"Key":"unsafe and","Fragments":["give"]},{"Key":"give non-unique","Fragments":["values."]},{"Key":"the mod","Fragments":["operator"]},{"Key":"the serial","Fragments":["number"]},{"Key":"serial number","Fragments":["to","and"]},{"Key":"value deriving","Fragments":["the"]},{"Key":"deriving the","Fragments":["whole"]},{"Key":"expert in","Fragments":["regular"]},{"Key":"in regular","Fragments":["expressions"]},{"Key":"expressions I","Fragments":["think"]},{"Key":"cleaner on","Fragments":["using"]},{"Key":"regex classes","Fragments":["or"]},{"Key":"classes or","Fragments":["the"]},{"Key":"the '\\w'","Fragments":["placeholder."]},{"Key":"'\\w' placeholder.","Fragments":["Also"]},{"Key":"placeholder. Also","Fragments":["you"]},{"Key":"might see","Fragments":["from","if"]},{"Key":"see from","Fragments":["other","other","the"]},{"Key":"solutions that","Fragments":["the"]},{"Key":"default ```boost::tokenizer\u003c\u003e```","Fragments":["is"]},{"Key":"```boost::tokenizer\u003c\u003e``` is","Fragments":["enough"]},{"Key":"The in","Fragments":["place"]},{"Key":"place modification","Fragments":["using"]},{"Key":"modification using","Fragments":["```std::for_each```"]},{"Key":"using ```std::for_each```","Fragments":["and"]},{"Key":"```std::for_each``` and","Fragments":["a"]},{"Key":"first incursion","Fragments":["into"]},{"Key":"incursion into","Fragments":["Boost"]},{"Key":"into Boost","Fragments":["so"]},{"Key":"Boost so","Fragments":["I"]},{"Key":"simple with","Fragments":["a"]},{"Key":"loops over","Fragments":["the"]},{"Key":"input data.","Fragments":["I"]},{"Key":"data. I","Fragments":["think"]},{"Key":"syntax makes","Fragments":["this"]},{"Key":"quite easy","Fragments":["to"]},{"Key":"the std::chrono","Fragments":["library"]},{"Key":"std::chrono library","Fragments":["was"]},{"Key":"was up","Fragments":["to"]},{"Key":"of problem.","Fragments":["I"]},{"Key":"probably remove","Fragments":["some"]},{"Key":"the repetition","Fragments":["with"]},{"Key":"repetition with","Fragments":["a"]},{"Key":" Positive:","Fragments":["You"]},{"Key":"Positive: You","Fragments":["were"]},{"Key":"You were","Fragments":["able"]},{"Key":"upload your","Fragments":["file"]},{"Key":" Read","Fragments":["the"]},{"Key":"Read the","Fragments":["readme"]},{"Key":"readme included","Fragments":["in"]},{"Key":"for instruction","Fragments":["and"]},{"Key":"instruction and","Fragments":["help"]},{"Key":"and help","Fragments":["on"]},{"Key":"help on","Fragments":["how"]},{"Key":"you invoke","Fragments":["both","`removeSpaces`,"]},{"Key":"invoke both","Fragments":["`erase`"]},{"Key":"both `erase`","Fragments":["and","and"]},{"Key":"`erase` and","Fragments":["`remove`","`remove`","`remove`"]},{"Key":"and `remove`","Fragments":["in","because","thing"]},{"Key":"`remove` in","Fragments":["your"]},{"Key":"simplify `if(strInputSentence.empty())","Fragments":["return"]},{"Key":"`if(strInputSentence.empty()) return","Fragments":["true;"]},{"Key":"false;` to","Fragments":["`return"]},{"Key":"to `return","Fragments":["strInputSentence.empty();`."]},{"Key":"The aim","Fragments":["was"]},{"Key":"aim was","Fragments":["to"]},{"Key":"never assigned","Fragments":["twice,"]},{"Key":"assigned twice,","Fragments":["even"]},{"Key":"twice, even","Fragments":["if"]},{"Key":"previous robot","Fragments":["with"]},{"Key":"robot with","Fragments":["that"]},{"Key":"that name","Fragments":["has"]},{"Key":"name has","Fragments":["been"]},{"Key":"been scrapped.","Fragments":["I"]},{"Key":"scrapped. I","Fragments":["agree"]},{"Key":"the `nameset`","Fragments":["constructor"]},{"Key":"`nameset` constructor","Fragments":["has"]},{"Key":"constructor has","Fragments":["bad"]},{"Key":"has bad","Fragments":["formatting,"]},{"Key":"bad formatting,","Fragments":["but"]},{"Key":"formatting, but","Fragments":["it"]},{"Key":"was (to","Fragments":["my"]},{"Key":"my eyes)","Fragments":["the"]},{"Key":"eyes) the","Fragments":["lesser"]},{"Key":"two evils.","Fragments":["If"]},{"Key":"evils. If","Fragments":["possible,"]},{"Key":"If possible,","Fragments":["please"]},{"Key":"please suggest","Fragments":["a"]},{"Key":"thing without","Fragments":["the"]},{"Key":"mean about","Fragments":["`random_device`."]},{"Key":"about `random_device`.","Fragments":["Eliminating"]},{"Key":"`random_device`. Eliminating","Fragments":["pseudo-randomness"]},{"Key":"Eliminating pseudo-randomness","Fragments":["was"]},{"Key":"pseudo-randomness was","Fragments":["indeed"]},{"Key":"was indeed","Fragments":["the"]},{"Key":"used both","Fragments":["`erase`"]},{"Key":"`remove` because","Fragments":["remove"]},{"Key":"because remove","Fragments":["only"]},{"Key":"remove only","Fragments":["rearranges"]},{"Key":"only rearranges","Fragments":["the"]},{"Key":"rearranges the","Fragments":["string"]},{"Key":"not shorten","Fragments":["it."]},{"Key":"shorten it.","Fragments":["The"]},{"Key":"of 'remove'","Fragments":["is"]},{"Key":"'remove' is","Fragments":["the"]},{"Key":"new last","Fragments":["element"]},{"Key":"new string.","Fragments":["So"]},{"Key":"the `erase`","Fragments":["then","and"]},{"Key":"`erase` then","Fragments":["shortens"]},{"Key":"then shortens","Fragments":["the"]},{"Key":"shortens the","Fragments":["string."]},{"Key":"on `empty`","Fragments":["being"]},{"Key":"`empty` being","Fragments":["boolian"]},{"Key":"being boolian","Fragments":["so"]},{"Key":"boolian so","Fragments":["I"]},{"Key":"Just fixing","Fragments":["some"]},{"Key":"fixing some","Fragments":["indexing"]},{"Key":"some indexing","Fragments":["checks,"]},{"Key":"indexing checks,","Fragments":["etc..."]},{"Key":"The trade","Fragments":["off"]},{"Key":"off here","Fragments":["was"]},{"Key":"here was","Fragments":["computational/code"]},{"Key":"was computational/code","Fragments":["complexity"]},{"Key":"computational/code complexity","Fragments":["versus"]},{"Key":"complexity versus","Fragments":["code"]},{"Key":"versus code","Fragments":["size."]},{"Key":"code size.","Fragments":["My"]},{"Key":"size. My","Fragments":["intent"]},{"Key":"My intent","Fragments":["was"]},{"Key":"intent was","Fragments":["to"]},{"Key":"possible. That","Fragments":["means"]},{"Key":"means having","Fragments":["the"]},{"Key":"whole song,","Fragments":["broken"]},{"Key":"song, broken","Fragments":["up"]},{"Key":"broken up","Fragments":["in"]},{"Key":"in to","Fragments":["verses"]},{"Key":"to verses","Fragments":["in"]},{"Key":"verses in","Fragments":["a"]},{"Key":"a pre-initialized","Fragments":["array."]},{"Key":"pre-initialized array.","Fragments":["This"]},{"Key":"array. This","Fragments":["creates"]},{"Key":"This creates","Fragments":["a"]},{"Key":"larger binary","Fragments":["but"]},{"Key":"binary but","Fragments":["now"]},{"Key":"but now","Fragments":["the","it's"]},{"Key":"verse dynamically.","Fragments":["It"]},{"Key":"dynamically. It","Fragments":["is"]},{"Key":"more information","Fragments":["about"]},{"Key":"about ```random_device```.","Fragments":["For"]},{"Key":"```random_device```. For","Fragments":["your"]},{"Key":"your purpose","Fragments":["of"]},{"Key":"of shuffling","Fragments":["the"]},{"Key":"shuffling the","Fragments":["list"]},{"Key":"list a","Fragments":["psudo-random"]},{"Key":"psudo-random number","Fragments":["would"]},{"Key":"number would","Fragments":["be"]},{"Key":"being said","Fragments":["all"]},{"Key":"need in","Fragments":["this","this"]},{"Key":"ensure names","Fragments":["are"]},{"Key":"repeated. Since","Fragments":["you"]},{"Key":"already generated","Fragments":["all"]},{"Key":"all possible","Fragments":["names"]},{"Key":"possible names","Fragments":["you"]},{"Key":"then shuffle","Fragments":["the"]},{"Key":"shuffle the","Fragments":["list."]},{"Key":"the list.","Fragments":["Returning","Of"]},{"Key":"list. Returning","Fragments":["them"]},{"Key":"Returning them","Fragments":["in"]},{"Key":"order is","Fragments":["just"]},{"Key":"valid as","Fragments":["in"]},{"Key":"easily derive","Fragments":["the"]},{"Key":"derive the","Fragments":["names"]},{"Key":"names from","Fragments":["a"]},{"Key":"single incrementing","Fragments":["serial"]},{"Key":"incrementing serial","Fragments":["number"]},{"Key":"of mod","Fragments":["and"]},{"Key":"mod and","Fragments":["division."]},{"Key":"and division.","Fragments":["See"]},{"Key":"division. See","Fragments":["@betty"]},{"Key":"See @betty","Fragments":["solution"]},{"Key":"@betty solution","Fragments":["for"]},{"Key":"would call","Fragments":["a"]},{"Key":"verses of","Fragments":["the"]},{"Key":"the snprintf()","Fragments":["function"]},{"Key":"snprintf() function","Fragments":["to"]},{"Key":"general case","Fragments":["of"]},{"Key":"of \u003e2","Fragments":["bottles"]},{"Key":"\u003e2 bottles","Fragments":["of"]},{"Key":"beer since","Fragments":["it"]},{"Key":"simple printf()","Fragments":["formating"]},{"Key":"printf() formating","Fragments":["rather"]},{"Key":"formating rather","Fragments":["than"]},{"Key":"than streams","Fragments":["which"]},{"Key":"streams which","Fragments":["in"]},{"Key":"opinion get","Fragments":["pretty"]},{"Key":"pretty verbose","Fragments":["in"]},{"Key":"verbose in","Fragments":["a"]},{"Key":"All information","Fragments":["can"]},{"Key":"information can","Fragments":["be"]},{"Key":"be computed","Fragments":["at"]},{"Key":"computed at","Fragments":["instance"]},{"Key":"at instance","Fragments":["instantiation"]},{"Key":"instance instantiation","Fragments":["time."]},{"Key":"instantiation time.","Fragments":["So"]},{"Key":"work. The","Fragments":["nucleotide_counts()","test","only"]},{"Key":"The nucleotide_counts()","Fragments":["and"]},{"Key":"nucleotide_counts() and","Fragments":["the"]},{"Key":"count() function","Fragments":["simply"]},{"Key":"function simply","Fragments":["return"]},{"Key":"the precomputed","Fragments":["data."]},{"Key":"Unfortunately there","Fragments":["is"]},{"Key":"I'm unable","Fragments":["to"]},{"Key":"solve. I","Fragments":["had"]},{"Key":"the nucleotide_count_test.cpp","Fragments":["file"]},{"Key":"nucleotide_count_test.cpp file","Fragments":["to"]},{"Key":"compilation work.","Fragments":["The"]},{"Key":"file defined","Fragments":["the"]},{"Key":"defined the","Fragments":["instance","class"]},{"Key":"the instance","Fragments":["as"]},{"Key":"instance as","Fragments":["something"]},{"Key":"like ```const","Fragments":["dna::counter","std::string\u0026"]},{"Key":"```const dna::counter","Fragments":["dna(\"GTAC\");```"]},{"Key":"dna::counter dna(\"GTAC\");```","Fragments":["and"]},{"Key":"dna(\"GTAC\");``` and","Fragments":["then"]},{"Key":"then made","Fragments":["calls"]},{"Key":"made calls","Fragments":["from"]},{"Key":"calls from","Fragments":["there.","the"]},{"Key":"from there.","Fragments":["However"]},{"Key":"there. However","Fragments":["the"]},{"Key":"However the","Fragments":["compiler"]},{"Key":"compiler (I","Fragments":["am"]},{"Key":"(I am","Fragments":["using"]},{"Key":"using clang","Fragments":["3.4)"]},{"Key":"clang 3.4)","Fragments":["would"]},{"Key":"3.4) would","Fragments":["give"]},{"Key":" ```~/exercism/cpp/nucleotide-count/nucleotide_count_test.cpp:24:25:","Fragments":["error:"]},{"Key":"```~/exercism/cpp/nucleotide-count/nucleotide_count_test.cpp:24:25: error:","Fragments":["member"]},{"Key":"error: member","Fragments":["function"]},{"Key":"function 'nucleotide_counts'","Fragments":["not"]},{"Key":"'nucleotide_counts' not","Fragments":["viable:"]},{"Key":"not viable:","Fragments":["'this'"]},{"Key":"viable: 'this'","Fragments":["argument"]},{"Key":"'this' argument","Fragments":["has"]},{"Key":" 'const","Fragments":["dna::counter',"]},{"Key":"'const dna::counter',","Fragments":["but"]},{"Key":"dna::counter', but","Fragments":["function"]},{"Key":"but function","Fragments":["is"]},{"Key":"``` const","Fragments":["auto","std::map\u003cchar,"]},{"Key":" ```~/exercism/cpp/nucleotide-count/nucleotide_count.h:15:30:","Fragments":["note:"]},{"Key":"```~/exercism/cpp/nucleotide-count/nucleotide_count.h:15:30: note:","Fragments":["'nucleotide_counts'"]},{"Key":"note: 'nucleotide_counts'","Fragments":["declared"]},{"Key":"'nucleotide_counts' declared","Fragments":["here```"]},{"Key":" Altering","Fragments":["the"]},{"Key":"Altering the","Fragments":["test"]},{"Key":"test instance","Fragments":["declaration"]},{"Key":"instance declaration","Fragments":["to"]},{"Key":"to ```dna::counter","Fragments":["dna(\"GTAC\");```"]},{"Key":"```dna::counter dna(\"GTAC\");```","Fragments":["fixed"]},{"Key":"dna(\"GTAC\");``` fixed","Fragments":["the"]},{"Key":"the issue.","Fragments":["I'm"]},{"Key":"issue. I'm","Fragments":["sure"]},{"Key":"something with","Fragments":["how"]},{"Key":"class but","Fragments":["I'm"]},{"Key":"bit mask","Fragments":["to"]},{"Key":"mask to","Fragments":["handle"]},{"Key":"handle states,","Fragments":["but"]},{"Key":"states, but","Fragments":["decided"]},{"Key":"decided it","Fragments":["was"]},{"Key":"heavy to","Fragments":["implement"]},{"Key":"implement considering","Fragments":["the"]},{"Key":"simple cases","Fragments":["to"]},{"Key":"cases to","Fragments":["manage."]},{"Key":"I gone","Fragments":["with"]},{"Key":"gone with","Fragments":["booleans"]},{"Key":"have returned","Fragments":["the"]},{"Key":"returned the","Fragments":["strings"]},{"Key":"strings on","Fragments":["the"]},{"Key":"if with","Fragments":["booleans"]},{"Key":"with booleans","Fragments":["but"]},{"Key":"booleans but","Fragments":["did"]},{"Key":"but did","Fragments":["it"]},{"Key":"implement future","Fragments":["rules"]},{"Key":"future rules","Fragments":["if"]},{"Key":"rules if","Fragments":["I"]},{"Key":"ever had","Fragments":["too."]},{"Key":"ok or","Fragments":["just"]},{"Key":"not elegant","Fragments":["code"]},{"Key":"elegant code","Fragments":[":("]},{"Key":" Fix","Fragments":["the"]},{"Key":"Fix the","Fragments":["function"]},{"Key":"declaration so","Fragments":["that"]},{"Key":"will run","Fragments":["without"]},{"Key":"run without","Fragments":["being"]},{"Key":"being altered.","Fragments":["Clean"]},{"Key":"altered. Clean","Fragments":["up"]},{"Key":"Clean up","Fragments":["the"]},{"Key":"constructor a","Fragments":["bit."]},{"Key":"transform semantics.","Fragments":["I'm"]},{"Key":"semantics. I'm","Fragments":["still"]},{"Key":"just realised","Fragments":["that"]},{"Key":"didn't define","Fragments":["RUN_ALL_TESTS,"]},{"Key":"define RUN_ALL_TESTS,","Fragments":["actually"]},{"Key":"RUN_ALL_TESTS, actually","Fragments":["only"]},{"Key":"first test","Fragments":["was","for"]},{"Key":"was ever","Fragments":["run"]},{"Key":"ever run","Fragments":["by"]},{"Key":"run by","Fragments":["me."]},{"Key":"by me.","Fragments":["Thanks"]},{"Key":"me. Thanks","Fragments":["for"]},{"Key":"picking that","Fragments":["up,"]},{"Key":"that up,","Fragments":["time"]},{"Key":"up, time","Fragments":["to"]},{"Key":"prefer your","Fragments":["previous"]},{"Key":"previous solution","Fragments":["as"]},{"Key":"the C-style","Fragments":["cast"]},{"Key":"C-style cast","Fragments":["to"]},{"Key":"working function","Fragments":["pointer"]},{"Key":"function pointer","Fragments":["is","feels"]},{"Key":"great style.","Fragments":["If"]},{"Key":"style. If","Fragments":["you"]},{"Key":"this design","Fragments":["then"]},{"Key":"design then","Fragments":["change"]},{"Key":"for these.","Fragments":["This"]},{"Key":"these. This","Fragments":["indicates"]},{"Key":"This indicates","Fragments":["to"]},{"Key":"user that","Fragments":["they"]},{"Key":"called externally","Fragments":["and"]},{"Key":"externally and","Fragments":["are"]},{"Key":"the ```words()```","Fragments":["function"]},{"Key":"```words()``` function","Fragments":["locally."]},{"Key":"using ```std::transform(...,","Fragments":["...,"]},{"Key":"```std::transform(..., ...,","Fragments":["...,"]},{"Key":"..., ...,","Fragments":["::tolower)```"]},{"Key":"..., ::tolower)```","Fragments":["instead"]},{"Key":"::tolower)``` instead","Fragments":["of"]},{"Key":"own helper.","Fragments":["There"]},{"Key":"helper. There","Fragments":["are"]},{"Key":"are plenty","Fragments":["of"]},{"Key":"use snprintf","Fragments":["I"]},{"Key":"snprintf I","Fragments":["would"]},{"Key":"also get","Fragments":["into"]},{"Key":"writing error","Fragments":["handling"]},{"Key":"error handling","Fragments":["for"]},{"Key":"handling for","Fragments":["it"]},{"Key":"well. IE","Fragments":["check"]},{"Key":"IE check","Fragments":["the"]},{"Key":"and handle","Fragments":["appropriately."]},{"Key":"handle appropriately.","Fragments":["While"]},{"Key":"appropriately. While","Fragments":["for"]},{"Key":"While for","Fragments":["this"]},{"Key":"simple exercise","Fragments":["the"]},{"Key":"exercise the","Fragments":["output"]},{"Key":"quite safe,","Fragments":["this"]},{"Key":"safe, this","Fragments":["is"]},{"Key":"that leads","Fragments":["to"]},{"Key":"to buffer","Fragments":["overflows"]},{"Key":"buffer overflows","Fragments":["in","mostly"]},{"Key":"overflows in","Fragments":["more"]},{"Key":"complicated scenarios.","Fragments":["Better"]},{"Key":"scenarios. Better","Fragments":["to"]},{"Key":"to practise","Fragments":["a"]},{"Key":"practise a","Fragments":["safe"]},{"Key":"a safe","Fragments":["style"]},{"Key":"safe style","Fragments":["always."]},{"Key":"string streams","Fragments":["become"]},{"Key":"streams become","Fragments":["verbose"]},{"Key":"become verbose","Fragments":["and"]},{"Key":"verbose and","Fragments":["hard"]},{"Key":"and hard","Fragments":["to"]},{"Key":"simple format","Fragments":["I"]},{"Key":"format I","Fragments":["think"]},{"Key":"think streams","Fragments":["are"]},{"Key":"streams are","Fragments":["ok"]},{"Key":"ok and","Fragments":["readable."]},{"Key":"readable. If","Fragments":["it"]},{"Key":"was any","Fragments":["more"]},{"Key":"complicated that","Fragments":["inserting"]},{"Key":"that inserting","Fragments":["3"]},{"Key":"inserting 3","Fragments":["numbers"]},{"Key":"3 numbers","Fragments":["then"]},{"Key":"numbers then","Fragments":["I"]},{"Key":"avoid stream","Fragments":["formatting."]},{"Key":"constructor initialiser","Fragments":["list","lists."]},{"Key":"initialiser list","Fragments":["for"]},{"Key":"of assignment","Fragments":["in"]},{"Key":"the body.","Fragments":["This"]},{"Key":"body. This","Fragments":["is"]},{"Key":"good style","Fragments":["to","to","as"]},{"Key":"used to.","Fragments":["There"]},{"Key":"to. There","Fragments":["is"]},{"Key":"small overhead","Fragments":["in"]},{"Key":"in constructing","Fragments":["an"]},{"Key":"constructing an","Fragments":["empty"]},{"Key":"empty member","Fragments":["then"]},{"Key":"member then","Fragments":["assigning"]},{"Key":"then assigning","Fragments":["the"]},{"Key":"you work","Fragments":["out"]},{"Key":"the longest/shortest","Fragments":["string"]},{"Key":"longest/shortest string","Fragments":["is"]},{"Key":"very elaborate.","Fragments":["There"]},{"Key":"elaborate. There","Fragments":["are"]},{"Key":"of simpler","Fragments":["choices"]},{"Key":"simpler choices","Fragments":["that"]},{"Key":"choices that","Fragments":["you","lead"]},{"Key":"peoples answers","Fragments":["here."]},{"Key":"answers here.","Fragments":["The"]},{"Key":"The common","Fragments":["ones"]},{"Key":"common ones","Fragments":["are"]},{"Key":"using ```std::min```,","Fragments":["using"]},{"Key":"```std::min```, using","Fragments":["```string::swap```"]},{"Key":"using ```string::swap```","Fragments":["or"]},{"Key":"```string::swap``` or","Fragments":["a"]},{"Key":"call swapping","Fragments":["the"]},{"Key":"the arguments.","Fragments":["Either"]},{"Key":"arguments. Either","Fragments":["way"]},{"Key":"Either way","Fragments":["you"]},{"Key":"any copies","Fragments":["of"]},{"Key":"Good solution","Fragments":["and","and"]},{"Key":"and nice","Fragments":["to"]},{"Key":"someone put","Fragments":["the"]},{"Key":"constructor. The","Fragments":["constructor","destructor"]},{"Key":"be pass","Fragments":["by"]},{"Key":"reference ```const","Fragments":["std::string"]},{"Key":"copy. Also","Fragments":["you"]},{"Key":"explicitly use","Fragments":["```this-\u003e```"]},{"Key":"use ```this-\u003e```","Fragments":["as"]},{"Key":"```this-\u003e``` as","Fragments":["it"]},{"Key":"is implicit","Fragments":["in"]},{"Key":"implicit in","Fragments":["C++."]},{"Key":"C++. You","Fragments":["only"]},{"Key":"be exact","Fragments":["if"]},{"Key":"exact if","Fragments":["there"]},{"Key":"is ambiguity","Fragments":["due"]},{"Key":"ambiguity due","Fragments":["to"]},{"Key":"like inheritance","Fragments":["or"]},{"Key":"inheritance or","Fragments":["variable/function"]},{"Key":"or variable/function","Fragments":["names."]},{"Key":"could combine","Fragments":["your"]},{"Key":"combine your","Fragments":["two"]},{"Key":"your two","Fragments":["functions"]},{"Key":"functions ```generate_word_map_from_vector```","Fragments":["and"]},{"Key":"```generate_word_map_from_vector``` and","Fragments":["```extract_words_from_string```"]},{"Key":"and ```extract_words_from_string```","Fragments":["to"]},{"Key":"```extract_words_from_string``` to","Fragments":["reduce"]},{"Key":"times you","Fragments":["iterate"]},{"Key":"iterate and","Fragments":["count"]},{"Key":"and count","Fragments":["words."]},{"Key":"count words.","Fragments":["For"]},{"Key":"words. For","Fragments":["example"]},{"Key":"example each","Fragments":["time"]},{"Key":"you extract","Fragments":["a"]},{"Key":"extract a","Fragments":["word"]},{"Key":"word you","Fragments":["immediately"]},{"Key":"you immediately","Fragments":["add"]},{"Key":"immediately add","Fragments":["it"]},{"Key":"map or","Fragments":["increment"]},{"Key":"or increment","Fragments":["its"]},{"Key":"its count.","Fragments":["This"]},{"Key":"count. This","Fragments":["is"]},{"Key":"easy with","Fragments":["something"]},{"Key":"use erase/remove","Fragments":["for"]},{"Key":"erase/remove for","Fragments":["spaces"]},{"Key":"then resize/remove","Fragments":["for"]},{"Key":"resize/remove for","Fragments":["special"]},{"Key":"special characters?","Fragments":["I"]},{"Key":"characters? I","Fragments":["think"]},{"Key":"the erase-remove","Fragments":["idiom"]},{"Key":"erase-remove idiom","Fragments":["in"]},{"Key":"idiom in","Fragments":["both"]},{"Key":"these points","Fragments":["would"]},{"Key":"points would","Fragments":["be"]},{"Key":"known idiom","Fragments":["and"]},{"Key":"idiom and","Fragments":["makes"]},{"Key":"call ```string::compare```","Fragments":["explicitly"]},{"Key":"```string::compare``` explicitly","Fragments":["you"]},{"Key":"explicitly you","Fragments":["can"]},{"Key":"the relational","Fragments":["operators"]},{"Key":"relational operators","Fragments":["```if"]},{"Key":"operators ```if","Fragments":["(base_unsorted"]},{"Key":"```if (base_unsorted","Fragments":["=="]},{"Key":"(base_unsorted ==","Fragments":["tester)```."]},{"Key":"== tester)```.","Fragments":["These"]},{"Key":"tester)```. These","Fragments":["are"]},{"Key":"are equivalent","Fragments":["as"]},{"Key":"equivalent as","Fragments":["they"]},{"Key":"they call","Fragments":["compare"]},{"Key":"call compare","Fragments":["but"]},{"Key":"compare but","Fragments":["could"]},{"Key":"allows definitions","Fragments":["of"]},{"Key":"of 64bit","Fragments":["width"]},{"Key":"64bit width","Fragments":["integers"]},{"Key":"width integers","Fragments":["so"]},{"Key":"integers so","Fragments":["lets"]},{"Key":"so lets","Fragments":["use"]},{"Key":"lets use","Fragments":["them"]},{"Key":"compiler deal","Fragments":["with"]},{"Key":"Use \u003climits\u003e","Fragments":["to"]},{"Key":"\u003climits\u003e to","Fragments":["just"]},{"Key":"the equivalent","Fragments":["UINT64_MAX"]},{"Key":"equivalent UINT64_MAX","Fragments":["macro"]},{"Key":"UINT64_MAX macro","Fragments":["definition."]},{"Key":"of auto","Fragments":["casting"]},{"Key":"auto casting","Fragments":["from"]},{"Key":"casting from","Fragments":["bool"]},{"Key":"int (rather","Fragments":["than"]},{"Key":"the reverse)","Fragments":["be"]},{"Key":"reverse) be","Fragments":["quite"]},{"Key":"quite frowned","Fragments":["upon,"]},{"Key":"frowned upon,","Fragments":["though"]},{"Key":"upon, though","Fragments":["it"]},{"Key":"job done","Fragments":["quite"]},{"Key":"done quite","Fragments":["succinctly"]},{"Key":"quite succinctly","Fragments":["here."]},{"Key":"succinctly here.","Fragments":["Again"]},{"Key":"here. Again","Fragments":["the"]},{"Key":"Again the","Fragments":["recursion"]},{"Key":"recursion seems","Fragments":["a"]},{"Key":"bit over","Fragments":["the"]},{"Key":"top, but","Fragments":["it"]},{"Key":"straightforward. Pretty","Fragments":["much"]},{"Key":"Pretty much","Fragments":["just"]},{"Key":"much just","Fragments":["iterating"]},{"Key":"through two","Fragments":["strings"]},{"Key":"they line","Fragments":["up"]},{"Key":"line up","Fragments":["and"]},{"Key":"the non-matching","Fragments":["characters."]},{"Key":"When I'm","Fragments":["writing,"]},{"Key":"I'm writing,","Fragments":["I"]},{"Key":"writing, I","Fragments":["like"]},{"Key":"by test.","Fragments":["I"]},{"Key":"test. I","Fragments":["have"]},{"Key":"a window","Fragments":["open"]},{"Key":"window open","Fragments":["of"]},{"Key":"open of","Fragments":["the"]},{"Key":"tests, and","Fragments":["I"]},{"Key":"if block","Fragments":["down"]},{"Key":"block down","Fragments":["test"]},{"Key":"down test","Fragments":["by"]},{"Key":"by test","Fragments":["as"]},{"Key":"test as","Fragments":["each"]},{"Key":"each on","Fragments":["passes."]},{"Key":"on passes.","Fragments":["Defining"]},{"Key":"passes. Defining","Fragments":["the"]},{"Key":"Defining the","Fragments":["RUN_ALL_TESTS"]},{"Key":"the RUN_ALL_TESTS","Fragments":["in"]},{"Key":"RUN_ALL_TESTS in","Fragments":["your"]},{"Key":"source will","Fragments":["work,"]},{"Key":"will work,","Fragments":["but"]},{"Key":"but you'll","Fragments":["see"]},{"Key":"see all","Fragments":["your"]},{"Key":"errors rather","Fragments":["than"]},{"Key":"first one..","Fragments":["Tradeoff"]},{"Key":"one.. Tradeoff","Fragments":["of"]},{"Key":"Tradeoff of","Fragments":["course,"]},{"Key":"course, is","Fragments":["that"]},{"Key":"one solution","Fragments":["and"]},{"Key":"and find","Fragments":["the","all","certain"]},{"Key":"test requires","Fragments":["a"]},{"Key":"different direction,","Fragments":["but"]},{"Key":"direction, but","Fragments":["usually"]},{"Key":"but usually","Fragments":["the"]},{"Key":"usually the","Fragments":["differences"]},{"Key":"the differences","Fragments":["are"]},{"Key":"differences are","Fragments":["small."]},{"Key":"boost utilities!","Fragments":["It"]},{"Key":"utilities! It","Fragments":["makes"]},{"Key":"makes for","Fragments":["a"]},{"Key":"file compile?","Fragments":["Running"]},{"Key":"compile? Running","Fragments":["locally,"]},{"Key":"Running locally,","Fragments":["I"]},{"Key":"locally, I","Fragments":["get"]},{"Key":"no boost/algorithm.hpp.","Fragments":["Perhaps"]},{"Key":"boost/algorithm.hpp. Perhaps","Fragments":["you"]},{"Key":"- trim","Fragments":["returns"]},{"Key":"trim returns","Fragments":["a"]},{"Key":"a void,","Fragments":["not"]},{"Key":"void, not","Fragments":["a"]},{"Key":"- is_upper","Fragments":["returns"]},{"Key":"is_upper returns","Fragments":["some"]},{"Key":"returns some","Fragments":["erorrs"]},{"Key":"some erorrs","Fragments":["as"]},{"Key":"erorrs as","Fragments":["well."]},{"Key":"usually write","Fragments":["all","whole"]},{"Key":"write all","Fragments":["my"]},{"Key":"file. It","Fragments":["bothers"]},{"Key":"It bothers","Fragments":["me"]},{"Key":"but exercism's","Fragments":["requirement"]},{"Key":"exercism's requirement","Fragments":["that"]},{"Key":"file pretty","Fragments":["much"]},{"Key":"much requires","Fragments":["it."]},{"Key":"string method","Fragments":["is"]},{"Key":"an efficient,","Fragments":["easy"]},{"Key":"efficient, easy","Fragments":["to"]},{"Key":"understand solution.","Fragments":["Using"]},{"Key":"solution. Using","Fragments":["the"]},{"Key":"C++11 `for`","Fragments":["loop"]},{"Key":"loop style","Fragments":["is"]},{"Key":"good. To","Fragments":["my"]},{"Key":"To my","Fragments":["eye,"]},{"Key":"my eye,","Fragments":["lots"]},{"Key":"eye, lots","Fragments":["of"]},{"Key":"of `std::`s","Fragments":["is"]},{"Key":"`std::`s is","Fragments":["distracting,"]},{"Key":"is distracting,","Fragments":["so"]},{"Key":"distracting, so","Fragments":["I"]},{"Key":"putting some","Fragments":["`using`s."]},{"Key":"some `using`s.","Fragments":["Also,"]},{"Key":"`using`s. Also,","Fragments":["comments"]},{"Key":"Also, comments","Fragments":["to"]},{"Key":"task and","Fragments":["output"]},{"Key":"and output","Fragments":["of","of"]},{"Key":"output of","Fragments":["each","the"]},{"Key":"define would","Fragments":["be"]},{"Key":"used prefix","Fragments":["increments"]},{"Key":"prefix increments","Fragments":["to"]},{"Key":"increments to","Fragments":["avoid"]},{"Key":"unused temporary","Fragments":["variable"]},{"Key":"temporary variable","Fragments":["at","in"]},{"Key":"variable at","Fragments":["each"]},{"Key":"each iteration","Fragments":["of"]},{"Key":"loop. A","Fragments":["comment"]},{"Key":"A comment","Fragments":["describing","denoting"]},{"Key":"comment describing","Fragments":["the"]},{"Key":"describing the","Fragments":["purpose"]},{"Key":"the `compute`","Fragments":["function"]},{"Key":"`compute` function","Fragments":["would"]},{"Key":"the comments.","Fragments":["I"]},{"Key":"anonymous name","Fragments":["space."]},{"Key":"you comments.","Fragments":["I"]},{"Key":"I admit","Fragments":["I","that"]},{"Key":"admit I","Fragments":["overly"]},{"Key":"I overly","Fragments":["complicated"]},{"Key":"complicated the","Fragments":["test"]},{"Key":"of mismatched","Fragments":["string"]},{"Key":"string size.","Fragments":["For"]},{"Key":"size. For","Fragments":["some"]},{"Key":"thought one","Fragments":["of"]},{"Key":"mismatched strings","Fragments":["had"]},{"Key":"strings had","Fragments":["an"]},{"Key":"additional character","Fragments":["at"]},{"Key":" Correct","Fragments":["me"]},{"Key":"Correct me","Fragments":["if"]},{"Key":"wrong but","Fragments":["because"]},{"Key":"I passed","Fragments":["both"]},{"Key":"passed both","Fragments":["strings"]},{"Key":"both strings","Fragments":["by"]},{"Key":"reference I","Fragments":["didn't"]},{"Key":"originally started","Fragments":["off"]},{"Key":"exercise by","Fragments":["just","others,"]},{"Key":"just looking","Fragments":["at"]},{"Key":"reply based","Fragments":["off"]},{"Key":"off that.","Fragments":["I"]},{"Key":"I quickly","Fragments":["realized"]},{"Key":"quickly realized","Fragments":["this"]},{"Key":"was far","Fragments":["too"]},{"Key":"far too","Fragments":["simple."]},{"Key":"then decided","Fragments":["to"]},{"Key":"to first","Fragments":["test"]},{"Key":"they person","Fragments":["was"]},{"Key":"person was","Fragments":["yelling,"]},{"Key":"was yelling,","Fragments":["as"]},{"Key":"yelling, as","Fragments":["this"]},{"Key":"this trumps","Fragments":["a"]},{"Key":"trumps a","Fragments":["question."]},{"Key":"question. This","Fragments":["worked"]},{"Key":"This worked","Fragments":["until"]},{"Key":"worked until","Fragments":["I"]},{"Key":"into non-alphabetical","Fragments":["characters"]},{"Key":"non-alphabetical characters","Fragments":["which"]},{"Key":"next stem","Fragments":["was"]},{"Key":"stem was","Fragments":["to"]},{"Key":"string isn't","Fragments":["considered"]},{"Key":"isn't considered","Fragments":["yelling"]},{"Key":"considered yelling","Fragments":["and"]},{"Key":"'?' to","Fragments":["determine"]},{"Key":"question and","Fragments":["not","the"]},{"Key":"not yelling,","Fragments":["I"]},{"Key":"yelling, I","Fragments":["chose"]},{"Key":"for null","Fragments":["or"]},{"Key":"null or","Fragments":["white"]},{"Key":"space with","Fragments":["empty()"]},{"Key":"with empty()","Fragments":["and"]},{"Key":"empty() and","Fragments":["find_first_not_of(\""]},{"Key":"and find_first_not_of(\"","Fragments":["\")."]},{"Key":"Finally, as","Fragments":["it"]},{"Key":"the hardest","Fragments":["to"]},{"Key":"hardest to","Fragments":["accurately"]},{"Key":"to accurately","Fragments":["test"]},{"Key":"accurately test","Fragments":["for,"]},{"Key":"test for,","Fragments":["it"]},{"Key":"for, it","Fragments":["falls"]},{"Key":"it falls","Fragments":["through","out"]},{"Key":"falls through","Fragments":["to"]},{"Key":"through to","Fragments":["the"]},{"Key":"the \"Whatever.\"","Fragments":["response."]},{"Key":"create variables","Fragments":["with"]},{"Key":"with names","Fragments":["like"]},{"Key":"like yelling,","Fragments":["silence,"]},{"Key":"yelling, silence,","Fragments":["question,"]},{"Key":"silence, question,","Fragments":["etc."]},{"Key":"question, etc.","Fragments":["to"]},{"Key":"with understanding","Fragments":["of"]},{"Key":"functions. Others","Fragments":["are"]},{"Key":"Others are","Fragments":["pass"]},{"Key":"are pass","Fragments":["by"]},{"Key":"and cause","Fragments":["copies."]},{"Key":"cause copies.","Fragments":["I"]},{"Key":"copies. I","Fragments":["was"]},{"Key":"was meaning","Fragments":["that"]},{"Key":"need copies","Fragments":["for"]},{"Key":"copies for","Fragments":["any"]},{"Key":"and explanation.","Fragments":["Try"]},{"Key":"explanation. Try","Fragments":["to"]},{"Key":"consistent in","Fragments":["initialisation"]},{"Key":"in initialisation","Fragments":["of"]},{"Key":"of variables.","Fragments":["You"]},{"Key":"variables. You","Fragments":["initialise"]},{"Key":"You initialise","Fragments":["```silence```"]},{"Key":"initialise ```silence```","Fragments":["but"]},{"Key":"```silence``` but","Fragments":["not"]},{"Key":"Calling ```string.back()```","Fragments":["on"]},{"Key":"```string.back()``` on","Fragments":["an"]},{"Key":"behaviour so","Fragments":["you"]},{"Key":"to reposition","Fragments":["this."]},{"Key":"reposition this.","Fragments":["Perhaps"]},{"Key":"this. Perhaps","Fragments":["checking"]},{"Key":"Perhaps checking","Fragments":["for"]},{"Key":"silence first","Fragments":["would"]},{"Key":"help this.","Fragments":["Also"]},{"Key":"this. Also","Fragments":["there"]},{"Key":"Also there","Fragments":["is"]},{"Key":"real need","Fragments":["to"]},{"Key":"of back()","Fragments":["in"]},{"Key":"back() in","Fragments":["variables.","my"]},{"Key":"in variables.","Fragments":["Consider"]},{"Key":"variables. Consider","Fragments":["making"]},{"Key":"them ```const","Fragments":["char```"]},{"Key":"```const char```","Fragments":["if"]},{"Key":"char``` if","Fragments":["you"]},{"Key":" ```string.find_first_not_of()```","Fragments":["will"]},{"Key":"```string.find_first_not_of()``` will","Fragments":["return"]},{"Key":"return ```string::npos```","Fragments":["if"]},{"Key":"```string::npos``` if","Fragments":["nothing"]},{"Key":"is found.","Fragments":["So"]},{"Key":"found. So","Fragments":["you"]},{"Key":"check against","Fragments":["this"]},{"Key":"against this","Fragments":["constant"]},{"Key":"this constant","Fragments":["rather"]},{"Key":"constant rather","Fragments":["than"]},{"Key":"than -1","Fragments":["explicitly."]},{"Key":"start your","Fragments":["for"]},{"Key":"not 0.","Fragments":["If"]},{"Key":"are coming","Fragments":["from"]},{"Key":"language C++","Fragments":["uses"]},{"Key":"C++ uses","Fragments":["0","a"]},{"Key":"uses 0","Fragments":["based"]},{"Key":"based indexing.","Fragments":["With"]},{"Key":"indexing. With","Fragments":["this"]},{"Key":"missing testing","Fragments":["the"]},{"Key":"to rework","Fragments":["the"]},{"Key":"rework the","Fragments":["logic"]},{"Key":"the duplicate","Fragments":["\"Fine."]},{"Key":"duplicate \"Fine.","Fragments":["Be"]},{"Key":" Initialise","Fragments":["boolean"]},{"Key":"Initialise boolean","Fragments":["values"]},{"Key":"boolean values","Fragments":["with","make"]},{"Key":"with ```true/false```","Fragments":["rather"]},{"Key":"```true/false``` rather","Fragments":["than"]},{"Key":"from @chad-au,","Fragments":["I"]},{"Key":"@chad-au, I","Fragments":["reverted"]},{"Key":"reverted to","Fragments":["my","using","using"]},{"Key":"the to_rna()","Fragments":["function"]},{"Key":"to_rna() function","Fragments":["since"]},{"Key":"function since","Fragments":["I"]},{"Key":"more readily","Fragments":["understandable."]},{"Key":"readily understandable.","Fragments":["I"]},{"Key":"understandable. I","Fragments":["guess"]},{"Key":"guess in","Fragments":["my"]},{"Key":"done a","Fragments":["case"]},{"Key":"case like:","Fragments":["```static_cast\u003cconst"]},{"Key":"like: ```static_cast\u003cconst","Fragments":["char"]},{"Key":"```static_cast\u003cconst char","Fragments":["(*)(const"]},{"Key":"char (*)(const","Fragments":["char)\u003e(to_rna)```"]},{"Key":"(*)(const char)\u003e(to_rna)```","Fragments":["to"]},{"Key":"char)\u003e(to_rna)``` to","Fragments":["have"]},{"Key":" @luisa","Fragments":[":"]},{"Key":"@luisa :","Fragments":["I"]},{"Key":": I","Fragments":["am"]},{"Key":"issues using","Fragments":["the"]},{"Key":"the CMake,","Fragments":["i"]},{"Key":"CMake, i","Fragments":["am"]},{"Key":"am really","Fragments":["new"]},{"Key":"really new","Fragments":["to"]},{"Key":"not tried","Fragments":["to"]},{"Key":"it. Yeah","Fragments":["I"]},{"Key":"agree it","Fragments":["should"]},{"Key":"be boost/algorithm/string.hpp.","Fragments":["I"]},{"Key":"boost/algorithm/string.hpp. I","Fragments":["will"]},{"Key":"too for","Fragments":["issues."]},{"Key":"for issues.","Fragments":["I"]},{"Key":"not update","Fragments":["the"]},{"Key":"issues as","Fragments":["I"]},{"Key":"trying around","Fragments":["CMake."]},{"Key":"that submitting","Fragments":["all"]},{"Key":"submitting all","Fragments":["the"]},{"Key":"in 1","Fragments":["file"]},{"Key":"bad but","Fragments":["I"]},{"Key":"this effort","Fragments":["so"]},{"Key":"effort so","Fragments":["not"]},{"Key":"not complaining","Fragments":["at"]},{"Key":"complaining at","Fragments":["that"]},{"Key":"that end","Fragments":[":)."]},{"Key":"end :).","Fragments":["Normally,"]},{"Key":":). Normally,","Fragments":["I"]},{"Key":"Normally, I","Fragments":["would"]},{"Key":"had separate","Fragments":["header"]},{"Key":"separate header","Fragments":["as"]},{"Key":"as source","Fragments":["file."]},{"Key":"Made some","Fragments":["code"]},{"Key":"code changes","Fragments":["thanks"]},{"Key":"changes thanks","Fragments":["to"]},{"Key":"So made","Fragments":["changes"]},{"Key":"made changes","Fragments":["to"]},{"Key":"commit which","Fragments":["was"]},{"Key":"was failing.","Fragments":["I"]},{"Key":"failing. I","Fragments":["think"]},{"Key":"has all","Fragments":["the"]},{"Key":"tests passing.","Fragments":["Feel"]},{"Key":"passing. Feel","Fragments":["free"]},{"Key":"to suggest","Fragments":["changes."]},{"Key":"sure was","Fragments":["if"]},{"Key":"was if","Fragments":["the"]},{"Key":"string should","Fragments":["be","be"]},{"Key":"reference thus","Fragments":["making"]},{"Key":"thus making","Fragments":["it"]},{"Key":"it efficient","Fragments":["to"]},{"Key":"pass but","Fragments":["the","be"]},{"Key":"trim will","Fragments":["change"]},{"Key":"for explaning","Fragments":["the"]},{"Key":"explaning the","Fragments":["`erase`"]},{"Key":"`remove` thing","Fragments":["to"]},{"Key":"worth looking","Fragments":["into"]},{"Key":"looking into","Fragments":["situations"]},{"Key":"where it'd","Fragments":["be"]},{"Key":"worth passing","Fragments":["around"]},{"Key":"passing around","Fragments":["references"]},{"Key":"around references","Fragments":["instead"]},{"Key":"string. For","Fragments":["example,"]},{"Key":"like whenever","Fragments":["you"]},{"Key":"invoke `removeSpaces`,","Fragments":["you"]},{"Key":"`removeSpaces`, you","Fragments":["pass"]},{"Key":"some string,","Fragments":["and"]},{"Key":"from `removeSpaces`","Fragments":["and"]},{"Key":"`removeSpaces` and","Fragments":["override"]},{"Key":"and override","Fragments":["the"]},{"Key":"override the","Fragments":["original"]},{"Key":"value. In","Fragments":["such"]},{"Key":"to `removeSpaces`,","Fragments":["and"]},{"Key":"`removeSpaces`, and","Fragments":["have"]},{"Key":"directly modify","Fragments":["the"]},{"Key":" @noemi-au","Fragments":["-"]},{"Key":"@noemi-au -","Fragments":["Thank"]},{"Key":"- Thank","Fragments":["you"]},{"Key":"that snprintf","Fragments":["should"]},{"Key":"snprintf should","Fragments":["be"]},{"Key":"used carefully","Fragments":["and"]},{"Key":"carefully and","Fragments":["the"]},{"Key":"complex cases","Fragments":["should"]},{"Key":"cases should","Fragments":["be"]},{"Key":"checked and","Fragments":["handled","all"]},{"Key":"and handled","Fragments":["appropriately."]},{"Key":"handled appropriately.","Fragments":["However,"]},{"Key":"appropriately. However,","Fragments":["in"]},{"Key":"maximum string","Fragments":["size"]},{"Key":"string size","Fragments":["can"]},{"Key":"size can","Fragments":["be"]},{"Key":"be known","Fragments":["ahead"]},{"Key":"known ahead","Fragments":["of"]},{"Key":"ahead of","Fragments":["time."]},{"Key":"of time.","Fragments":["The"]},{"Key":"The verse_index","Fragments":["will"]},{"Key":"verse_index will","Fragments":["never"]},{"Key":"never convert","Fragments":["into"]},{"Key":"convert into","Fragments":["more"]},{"Key":"into more","Fragments":["than"]},{"Key":"than 2","Fragments":["characters"]},{"Key":"2 characters","Fragments":["since"]},{"Key":"characters since","Fragments":["the"]},{"Key":"than 99","Fragments":["because"]},{"Key":"99 because","Fragments":["of"]},{"Key":"12. So","Fragments":["the"]},{"Key":"length at","Fragments":["most"]},{"Key":"most be","Fragments":["118"]},{"Key":"be 118","Fragments":["characters"]},{"Key":"118 characters","Fragments":["without"]},{"Key":"characters without","Fragments":["the"]},{"Key":"the null,","Fragments":["so"]},{"Key":"null, so","Fragments":["a"]},{"Key":"a 120-char","Fragments":["buffer"]},{"Key":"120-char buffer","Fragments":["is"]},{"Key":"buffer is","Fragments":["sufficent"]},{"Key":"is sufficent","Fragments":["for"]},{"Key":"sufficent for","Fragments":["this"]},{"Key":"some possibility","Fragments":["of"]},{"Key":"of buffer","Fragments":["overflows"]},{"Key":"overflows mostly","Fragments":["in"]},{"Key":"mostly in","Fragments":["cases"]},{"Key":"in cases","Fragments":["where"]},{"Key":"buffer length","Fragments":["and"]},{"Key":"and buffer","Fragments":["pointer"]},{"Key":"buffer pointer","Fragments":["become"]},{"Key":"pointer become","Fragments":["disassociated."]},{"Key":"become disassociated.","Fragments":["I've"]},{"Key":"disassociated. I've","Fragments":["updated"]},{"Key":"I've updated","Fragments":["to"]},{"Key":"updated to","Fragments":["use"]},{"Key":"sizeof operator","Fragments":["to"]},{"Key":"duplicate the","Fragments":["\"magic"]},{"Key":"the \"magic","Fragments":["number\""]},{"Key":"number\" twice","Fragments":["in"]},{"Key":"twice in","Fragments":["the","the"]},{"Key":"code, so","Fragments":["there"]},{"Key":"no possible","Fragments":["disassociated"]},{"Key":"possible disassociated","Fragments":["if"]},{"Key":"disassociated if","Fragments":["the"]},{"Key":"size matches","Fragments":["the"]},{"Key":"matches the","Fragments":["allocated"]},{"Key":"the allocated","Fragments":["space,"]},{"Key":"allocated space,","Fragments":["snprintf()"]},{"Key":"space, snprintf()","Fragments":["should"]},{"Key":"snprintf() should","Fragments":["never"]},{"Key":"never cause","Fragments":["a"]},{"Key":"buffer overflow","Fragments":["nor"]},{"Key":"overflow nor","Fragments":["create"]},{"Key":"nor create","Fragments":["a"]},{"Key":"not properly","Fragments":["null"]},{"Key":"properly null","Fragments":["terminated."]},{"Key":"mean when","Fragments":["I"]},{"Key":"declare `string","Fragments":["strand;`?"]},{"Key":"I've fallen","Fragments":["out"]},{"Key":"fallen out","Fragments":["of"]},{"Key":"of habit","Fragments":["of"]},{"Key":"of commenting","Fragments":["my"]},{"Key":"commenting my","Fragments":["code,"]},{"Key":"my code,","Fragments":["and"]},{"Key":"documentation of","Fragments":["the"]},{"Key":"bob problem.","Fragments":["I"]},{"Key":"was new","Fragments":["to"]},{"Key":"to cmake","Fragments":["as"]},{"Key":"cmake as","Fragments":["well,"]},{"Key":"well, and","Fragments":["it"]},{"Key":"it tripped","Fragments":["me"]},{"Key":"me up","Fragments":["for"]},{"Key":"while trying","Fragments":["to"]},{"Key":"started. Then","Fragments":["in"]},{"Key":"Then in","Fragments":["later"]},{"Key":"in later","Fragments":["exercises,","exercises"]},{"Key":"later exercises,","Fragments":["this"]},{"Key":"exercises, this","Fragments":["block"]},{"Key":"this block","Fragments":["started"]},{"Key":"block started","Fragments":["showing"]},{"Key":"started showing","Fragments":["up"]},{"Key":"showing up","Fragments":["in"]},{"Key":"## Getting","Fragments":["Started"]},{"Key":"have read","Fragments":["the","that"]},{"Key":"the [getting","Fragments":["started"]},{"Key":"[getting started","Fragments":["with"]},{"Key":" page","Fragments":["on"]},{"Key":"page on","Fragments":["the"]},{"Key":"the [exercism","Fragments":["help"]},{"Key":"[exercism help","Fragments":["site](http://help.exercism.io/)."]},{"Key":"help site](http://help.exercism.io/).","Fragments":["This"]},{"Key":"site](http://help.exercism.io/). This","Fragments":["covers"]},{"Key":"basic information","Fragments":["on"]},{"Key":"on setting","Fragments":["up"]},{"Key":"just opened","Fragments":["a"]},{"Key":"opened a","Fragments":["bug"]},{"Key":"bug to","Fragments":["fix","do"]},{"Key":"fix up","Fragments":["the"]},{"Key":"documentation. Hopefully","Fragments":["it"]},{"Key":"Hopefully it","Fragments":["gets"]},{"Key":"gets better","Fragments":["for"]},{"Key":"linux system,","Fragments":["I"]},{"Key":"system, I","Fragments":["just","still"]},{"Key":"just type","Fragments":["\"cmake"]},{"Key":"type \"cmake","Fragments":["CMakeLists.txt\""]},{"Key":"\"cmake CMakeLists.txt\"","Fragments":["and"]},{"Key":"CMakeLists.txt\" and","Fragments":["it"]},{"Key":"creates everything.","Fragments":["Then"]},{"Key":"everything. Then","Fragments":["I"]},{"Key":"remember I","Fragments":["need"]},{"Key":"need my","Fragments":["source"]},{"Key":"my source","Fragments":["file,"]},{"Key":"empty file","Fragments":["and"]},{"Key":"run cmake","Fragments":["again."]},{"Key":"cmake again.","Fragments":["Seems"]},{"Key":"again. Seems","Fragments":["to"]},{"Key":"my system,","Fragments":["I"]},{"Key":"get failures","Fragments":["on"]},{"Key":"failures on","Fragments":["\"only_numbers\""]},{"Key":"on \"only_numbers\"","Fragments":["and"]},{"Key":"\"only_numbers\" and","Fragments":["\"question_with_only_numbers\","]},{"Key":"and \"question_with_only_numbers\",","Fragments":["so"]},{"Key":"\"question_with_only_numbers\", so","Fragments":["you"]},{"Key":"not bring","Fragments":["input"]},{"Key":"bring input","Fragments":["in"]},{"Key":"modify it.","Fragments":["That's"]},{"Key":"a caller","Fragments":["would"]},{"Key":"caller would","Fragments":["expect"]},{"Key":"happen. I'm","Fragments":["not"]},{"Key":"matters much","Fragments":["if"]},{"Key":"much if","Fragments":["input"]},{"Key":"input comes","Fragments":["in"]},{"Key":"comes in","Fragments":["as"]},{"Key":"or copy","Fragments":["constructor."]},{"Key":"copy constructor.","Fragments":["Both"]},{"Key":"constructor. Both","Fragments":["will"]},{"Key":"Both will","Fragments":["work"]},{"Key":"fine if","Fragments":["you"]},{"Key":"string yourself,","Fragments":["although"]},{"Key":"yourself, although","Fragments":["reading"]},{"Key":"although reading","Fragments":["through"]},{"Key":"through some","Fragments":["c++11","other"]},{"Key":"some c++11","Fragments":["docs"]},{"Key":"c++11 docs","Fragments":["it"]},{"Key":"docs it","Fragments":["looks"]},{"Key":"reference. If","Fragments":["you"]},{"Key":"pick up","Fragments":["the"]},{"Key":"the Scott","Fragments":["Myers"]},{"Key":"Scott Myers","Fragments":["book"]},{"Key":"Myers book","Fragments":["on"]},{"Key":"book on","Fragments":["55"]},{"Key":"on 55","Fragments":["specific"]},{"Key":"55 specific","Fragments":["things,"]},{"Key":"specific things,","Fragments":["it"]},{"Key":"things, it","Fragments":["talks"]},{"Key":"it talks","Fragments":["about"]},{"Key":"references. It's","Fragments":["worth"]},{"Key":"a read","Fragments":["and"]},{"Key":"I coded,","Fragments":["although"]},{"Key":"coded, although","Fragments":["it's"]},{"Key":"although it's","Fragments":["starting"]},{"Key":"it's starting","Fragments":["to"]},{"Key":"comment. I'm","Fragments":["going"]},{"Key":"conflicted on","Fragments":["the"]},{"Key":"of `inline`","Fragments":["here."]},{"Key":"`inline` here.","Fragments":["In"]},{"Key":"here. In","Fragments":["my"]},{"Key":"original iteration","Fragments":["it"]},{"Key":"functions separate","Fragments":["from"]},{"Key":"separate from","Fragments":["`bob::hey`"]},{"Key":"from `bob::hey`","Fragments":["but"]},{"Key":"`bob::hey` but","Fragments":["now"]},{"Key":"so clear.","Fragments":["I"]},{"Key":"I included","Fragments":["`inline`"]},{"Key":"included `inline`","Fragments":["to"]},{"Key":"`inline` to","Fragments":["keep"]},{"Key":"keep `bob::hey`","Fragments":["looking"]},{"Key":"`bob::hey` looking","Fragments":["clean"]},{"Key":"looking clean","Fragments":["and"]},{"Key":"simple but","Fragments":["I"]},{"Key":"would love","Fragments":["to"]},{"Key":"to here","Fragments":["some"]},{"Key":"here some","Fragments":["other"]},{"Key":"correct, thanks","Fragments":["for"]},{"Key":"feedback dcook-au.","Fragments":["I"]},{"Key":"dcook-au. I","Fragments":["went"]},{"Key":"and boiled","Fragments":["it"]},{"Key":"boiled it","Fragments":["down"]},{"Key":"three bools","Fragments":["that","to"]},{"Key":"bools that","Fragments":["I"]},{"Key":"I truly","Fragments":["cared"]},{"Key":"truly cared","Fragments":["about"]},{"Key":"cared about","Fragments":["all","3,","3,"]},{"Key":"about all","Fragments":["initialized"]},{"Key":"all initialized","Fragments":["as"]},{"Key":"things clear,","Fragments":["I"]},{"Key":"clear, I","Fragments":["now"]},{"Key":"three distinct","Fragments":["and"]},{"Key":"distinct and","Fragments":["separate"]},{"Key":"and separate","Fragments":["checks"]},{"Key":"separate checks","Fragments":["for"]},{"Key":"The 'yelling'","Fragments":["case"]},{"Key":"'yelling' case","Fragments":["remained"]},{"Key":"case remained","Fragments":["the"]},{"Key":"remained the","Fragments":["same"]},{"Key":"The 'question'","Fragments":["case"]},{"Key":"'question' case","Fragments":["has"]},{"Key":"case has","Fragments":["a"]},{"Key":"empty upfront","Fragments":["to"]},{"Key":"upfront to","Fragments":["avoid"]},{"Key":"The 'silence'","Fragments":["case"]},{"Key":"'silence' case","Fragments":["is"]},{"Key":"now comparing","Fragments":["to"]},{"Key":"string::npos instead","Fragments":["of"]},{"Key":"my if","Fragments":["else"]},{"Key":"else to","Fragments":["run"]},{"Key":"run down","Fragments":["the"]},{"Key":"bools to","Fragments":["return"]},{"Key":"feedback, I","Fragments":["submitted"]},{"Key":"comment there","Fragments":["(this"]},{"Key":"there (this","Fragments":["is"]},{"Key":"your supposed","Fragments":["to"]},{"Key":"keep commenting","Fragments":["here"]},{"Key":"commenting here","Fragments":["or"]},{"Key":"here or","Fragments":["move"]},{"Key":"it notifies","Fragments":["you)."]},{"Key":"made `findSubString`","Fragments":["more"]},{"Key":"`findSubString` more","Fragments":["logical"]},{"Key":"logical using","Fragments":["the"]},{"Key":"the `min`","Fragments":["function"]},{"Key":"`min` function","Fragments":["but"]},{"Key":"the `substr`","Fragments":["portion"]},{"Key":"`substr` portion","Fragments":["because"]},{"Key":"portion because","Fragments":["it"]},{"Key":"solution also","Fragments":["work"]},{"Key":"for mismatch","Fragments":["strings"]},{"Key":"mismatch strings","Fragments":["where"]},{"Key":"first element","Fragments":["is"]},{"Key":"the erroneous","Fragments":["one."]},{"Key":"erroneous one.","Fragments":["I"]},{"Key":"is outside","Fragments":["the"]},{"Key":"match strings","Fragments":["which"]},{"Key":"strings which","Fragments":["include"]},{"Key":"which include","Fragments":["additional"]},{"Key":"include additional","Fragments":["characters"]},{"Key":"additional characters","Fragments":["at"]},{"Key":"the begining","Fragments":["or"]},{"Key":"begining or","Fragments":["end"]},{"Key":"end and","Fragments":["also"]},{"Key":"also include","Fragments":["mismatched"]},{"Key":"include mismatched","Fragments":["elements"]},{"Key":"mismatched elements","Fragments":["in"]},{"Key":"always other","Fragments":["feedback"]},{"Key":"other feedback","Fragments":["is"]},{"Key":"link about","Fragments":["constructor","64bit"]},{"Key":"about constructor","Fragments":["initialiser"]},{"Key":"initialiser lists.","Fragments":["http://en.cppreference.com/w/cpp/language/initializer_list"]},{"Key":"Also if","Fragments":["you"]},{"Key":"chance I","Fragments":["suggest"]},{"Key":"suggest referring","Fragments":["to"]},{"Key":"to Scott","Fragments":["Meyers"]},{"Key":"Scott Meyers","Fragments":["book","has"]},{"Key":"Meyers book","Fragments":["\"Effective"]},{"Key":"book \"Effective","Fragments":["C++\"."]},{"Key":"\"Effective C++\".","Fragments":["I"]},{"Key":"C++\". I","Fragments":["have"]},{"Key":"3rd edition","Fragments":["and"]},{"Key":"edition and","Fragments":["Chapter"]},{"Key":"and Chapter","Fragments":["1"]},{"Key":"Chapter 1","Fragments":["item"]},{"Key":"1 item","Fragments":["4"]},{"Key":"item 4","Fragments":["covers"]},{"Key":"4 covers","Fragments":["this"]},{"Key":"covers this","Fragments":["topic."]},{"Key":" ```counter::counter(const","Fragments":["string"]},{"Key":"```counter::counter(const string","Fragments":["\u0026inputStrand)"]},{"Key":"Added the","Fragments":["class","comments"]},{"Key":"definition from","Fragments":["the"]},{"Key":"for looping","Fragments":["in"]},{"Key":"looping in","Fragments":["the"]},{"Key":"the minus()","Fragments":["function"]},{"Key":"minus() function","Fragments":["and"]},{"Key":"some deterministic","Fragments":["calculation"]},{"Key":"deterministic calculation","Fragments":["that"]},{"Key":"calculation that","Fragments":["can"]},{"Key":"can perform","Fragments":["this"]},{"Key":"this similar","Fragments":["to"]},{"Key":"the plus()","Fragments":["function."]},{"Key":"plus() function.","Fragments":["It"]},{"Key":"these operations","Fragments":["so"]},{"Key":"operations so","Fragments":["no"]},{"Key":"no looping","Fragments":["is"]},{"Key":"looping is","Fragments":["required."]},{"Key":"careful of","Fragments":["your"]},{"Key":"use when","Fragments":["talking"]},{"Key":"when talking","Fragments":["about"]},{"Key":"keyword ```inline```.","Fragments":["I"]},{"Key":"```inline```. I","Fragments":["think"]},{"Key":"really conflicted","Fragments":["about"]},{"Key":"conflicted about","Fragments":["here"]},{"Key":"about here","Fragments":["is"]},{"Key":"become so","Fragments":["simple"]},{"Key":"so simple","Fragments":["that"]},{"Key":"simple that","Fragments":["they"]},{"Key":"needed any","Fragments":["more."]},{"Key":"more. As","Fragments":["opposed"]},{"Key":"As opposed","Fragments":["to"]},{"Key":"any actual","Fragments":["implication"]},{"Key":"actual implication","Fragments":["of"]},{"Key":"implication of","Fragments":["using"]},{"Key":"the inline","Fragments":["keyword.","keyword"]},{"Key":"Considering the","Fragments":["style"]},{"Key":"the style","Fragments":["you"]},{"Key":"style you","Fragments":["have"]},{"Key":"have chosen","Fragments":["for"]},{"Key":"chosen for","Fragments":["```bob::hey()```"]},{"Key":"for ```bob::hey()```","Fragments":["I"]},{"Key":"```bob::hey()``` I","Fragments":["would"]},{"Key":"are is","Fragments":["the"]},{"Key":"best choice.","Fragments":["This"]},{"Key":"choice. This","Fragments":["is"]},{"Key":"maintains a","Fragments":["consistent"]},{"Key":"consistent feel.","Fragments":["If"]},{"Key":"feel. If","Fragments":["you"]},{"Key":"them I","Fragments":["would"]},{"Key":"suggest refactoring","Fragments":["to"]},{"Key":"refactoring to","Fragments":["change"]},{"Key":"inline keyword","Fragments":["it"]},{"Key":"keyword it","Fragments":["has"]},{"Key":"of generally","Fragments":["mis-understood"]},{"Key":"generally mis-understood","Fragments":["and"]},{"Key":"mis-understood and","Fragments":["legacy"]},{"Key":"and legacy","Fragments":["behaviour."]},{"Key":"legacy behaviour.","Fragments":["Here"]},{"Key":"behaviour. Here","Fragments":["is"]},{"Key":"to for","Fragments":["your"]},{"Key":"general information.","Fragments":["http://stackoverflow.com/questions/1759300/when-should-i-write-the-keyword-inline-for-a-function-method"]},{"Key":"prefer calling","Fragments":["```string::empty()```"]},{"Key":"calling ```string::empty()```","Fragments":["over"]},{"Key":"```string::empty()``` over","Fragments":["comparing"]},{"Key":"over comparing","Fragments":["the"]},{"Key":"length with","Fragments":["0."]},{"Key":"with 0.","Fragments":["This"]},{"Key":"0. This","Fragments":["is"]},{"Key":"my mac","Fragments":["this"]},{"Key":"mac this","Fragments":["code"]},{"Key":"think ran","Fragments":["successfully"]},{"Key":"ran successfully","Fragments":["I"]},{"Key":"successfully I","Fragments":["will"]},{"Key":"still go","Fragments":["thru"]},{"Key":"go thru","Fragments":["what"]},{"Key":"thru what","Fragments":["you"]},{"Key":"pointed and","Fragments":["try"]},{"Key":"fix it.","Fragments":["Thanks"]},{"Key":"it. Thanks","Fragments":["for"]},{"Key":"for copying","Fragments":["the"]},{"Key":"and giving","Fragments":["it"]},{"Key":"giving it","Fragments":["a"]},{"Key":"try on","Fragments":["your"]},{"Key":"your machine,","Fragments":["appreciate"]},{"Key":"machine, appreciate","Fragments":["it."]},{"Key":"that book","Fragments":["and"]},{"Key":"calls like","Fragments":["trim"]},{"Key":"like trim","Fragments":["and"]},{"Key":"trim and","Fragments":["all"]},{"Key":"all will","Fragments":["have"]},{"Key":"copy so","Fragments":["you"]},{"Key":"potentially doing","Fragments":["the"]},{"Key":"thing what","Fragments":["const"]},{"Key":"reference avoids","Fragments":["(making"]},{"Key":"avoids (making","Fragments":["copies)."]},{"Key":"whether we","Fragments":["can"]},{"Key":"files. Seems","Fragments":["to"]},{"Key":"be bad","Fragments":["style"]},{"Key":"bad style","Fragments":["to"]},{"Key":"header with","Fragments":["the"]},{"Key":"On topic,","Fragments":["is"]},{"Key":"topic, is","Fragments":["there"]},{"Key":"reason you","Fragments":["aren't"]},{"Key":"aren't using","Fragments":["c++11?"]},{"Key":"using c++11?","Fragments":["I"]},{"Key":"c++11? I","Fragments":["used"]},{"Key":"used back()","Fragments":["in"]},{"Key":"loops too,","Fragments":["which"]},{"Key":"too, which","Fragments":["can"]},{"Key":"Nice improvements","Fragments":["from"]},{"Key":"improvements from","Fragments":["the"]},{"Key":"last iteration.","Fragments":["One"]},{"Key":"iteration. One","Fragments":["more"]},{"Key":"more possibility","Fragments":["to"]},{"Key":"possibility to","Fragments":["consider"]},{"Key":"consider here","Fragments":["is"]},{"Key":"is breaking","Fragments":["out"]},{"Key":"read, it","Fragments":["could"]},{"Key":"an answer,","Fragments":["and"]},{"Key":"answer, and","Fragments":["don't","I'm"]},{"Key":"don't run","Fragments":["unnecessary"]},{"Key":"run unnecessary","Fragments":["checks."]},{"Key":"and transform","Fragments":["algorithms,"]},{"Key":"transform algorithms,","Fragments":["I"]},{"Key":"algorithms, I","Fragments":["reduce"]},{"Key":"I reduce","Fragments":["the"]},{"Key":"it's characters","Fragments":["and"]},{"Key":"that against","Fragments":["the"]},{"Key":"I stored","Fragments":["the"]},{"Key":"stored the","Fragments":["lower"]},{"Key":"and sorted","Fragments":["versions","it.","them."]},{"Key":"sorted versions","Fragments":["of"]},{"Key":"moved those","Fragments":["conversions"]},{"Key":"those conversions","Fragments":["into"]},{"Key":"conversions into","Fragments":["the"]},{"Key":"match function,","Fragments":["but"]},{"Key":"called multiple","Fragments":["times."]},{"Key":"out. This","Fragments":["was"]},{"Key":"was helpful.","Fragments":["Definitely"]},{"Key":"helpful. Definitely","Fragments":["more"]},{"Key":"Definitely more","Fragments":["concise."]},{"Key":"you mikedal.","Fragments":["I"]},{"Key":"mikedal. I","Fragments":["went"]},{"Key":"submitted one","Fragments":["last"]},{"Key":"last revision","Fragments":["where"]},{"Key":"revision where","Fragments":["I"]},{"Key":"I break","Fragments":["out"]},{"Key":"three cases","Fragments":["into"]},{"Key":"cases into","Fragments":["separate"]},{"Key":"separate functions,","Fragments":["and"]},{"Key":"am now","Fragments":["returning"]},{"Key":"now returning","Fragments":["the"]},{"Key":"reply as","Fragments":["soon"]},{"Key":"true to","Fragments":["avoid"]},{"Key":"unnecessary extra","Fragments":["processing"]},{"Key":"extra processing","Fragments":["time."]},{"Key":" @brock","Fragments":["I"]},{"Key":"@brock I","Fragments":["had"]},{"Key":"had problems","Fragments":["getting"]},{"Key":"problems getting","Fragments":["windows"]},{"Key":"getting windows","Fragments":["VS"]},{"Key":"windows VS","Fragments":["2013"]},{"Key":"VS 2013","Fragments":["to"]},{"Key":"2013 to","Fragments":["play"]},{"Key":"to play","Fragments":["nice","with"]},{"Key":"play nice","Fragments":["with"]},{"Key":"nice with","Fragments":["my"]},{"Key":"my machine.","Fragments":["It"]},{"Key":"machine. It","Fragments":["kept"]},{"Key":"It kept","Fragments":["giving"]},{"Key":"kept giving","Fragments":["me"]},{"Key":"giving me","Fragments":["errors"]},{"Key":"me errors","Fragments":["during"]},{"Key":"during link","Fragments":["about"]},{"Key":"about 64bit","Fragments":["target"]},{"Key":"64bit target","Fragments":["using"]},{"Key":"target using","Fragments":["32bit"]},{"Key":"using 32bit","Fragments":["libraries."]},{"Key":"32bit libraries.","Fragments":["I"]},{"Key":"libraries. I","Fragments":["gave"]},{"Key":"up after","Fragments":["an"]},{"Key":"after an","Fragments":["hour","```if```"]},{"Key":"an hour","Fragments":["trying","or"]},{"Key":"hour trying","Fragments":["to"]},{"Key":"just reverted","Fragments":["to"]},{"Key":"little digging","Fragments":["and"]},{"Key":"digging and","Fragments":["it"]},{"Key":"like g++","Fragments":["supports"]},{"Key":"g++ supports","Fragments":["c++11"]},{"Key":"supports c++11","Fragments":["features"]},{"Key":"c++11 features","Fragments":["if","in"]},{"Key":"features if","Fragments":["the"]},{"Key":"the -std=c++11","Fragments":["is"]},{"Key":"-std=c++11 is","Fragments":["given"]},{"Key":"is given","Fragments":["as"]},{"Key":"compile option.","Fragments":["The"]},{"Key":"option. The","Fragments":["back()"]},{"Key":"The back()","Fragments":["function"]},{"Key":"back() function","Fragments":["now"]},{"Key":"function now","Fragments":["seems"]},{"Key":"now seems","Fragments":["to"]},{"Key":"used ranges","Fragments":["for"]},{"Key":"ranges for","Fragments":["loops"]},{"Key":"loops before","Fragments":["in"]},{"Key":"before in","Fragments":["c++.","c++."]},{"Key":"c++. I'll","Fragments":["look"]},{"Key":"into them.","Fragments":["Thanks"]},{"Key":"them. Thanks","Fragments":["for"]},{"Key":"suggestion. I'll","Fragments":["try"]},{"Key":"try them","Fragments":["out"]},{"Key":"pretty good!","Fragments":["A"]},{"Key":"good! A","Fragments":["few"]},{"Key":"take note","Fragments":["of:"]},{"Key":"your checkQuestion","Fragments":["function,"]},{"Key":"checkQuestion function,","Fragments":["if"]},{"Key":"function, if","Fragments":["your"]},{"Key":"is null","Fragments":["and","first."]},{"Key":"null and","Fragments":["you"]},{"Key":"run back()","Fragments":["on"]},{"Key":"back() on","Fragments":["it,"]},{"Key":"undefined behavior,","Fragments":["so"]},{"Key":"worth checking","Fragments":["if"]},{"Key":"null first.","Fragments":["Also,"]},{"Key":"first. Also,","Fragments":["the"]},{"Key":"doesn't test","Fragments":["for"]},{"Key":"to note","Fragments":["that"]},{"Key":"is trailing","Fragments":["white"]},{"Key":"mark, the","Fragments":["return"]},{"Key":"your checkYell","Fragments":["function,"]},{"Key":"checkYell function,","Fragments":["there"]},{"Key":"built in","Fragments":["string","string"]},{"Key":"in string","Fragments":["functions","functions"]},{"Key":"that help","Fragments":["do"]},{"Key":"help do","Fragments":["what"]},{"Key":"doing manually","Fragments":["when"]},{"Key":"manually when","Fragments":["iterating"]},{"Key":"your string.","Fragments":["The","If"]},{"Key":"The two","Fragments":["functions"]},{"Key":"found useful","Fragments":["for"]},{"Key":"this test","Fragments":["case,"]},{"Key":"case, were","Fragments":["the"]},{"Key":"the isalpha()","Fragments":["function"]},{"Key":"isalpha() function","Fragments":["to"]},{"Key":"is alphabetical,","Fragments":["and"]},{"Key":"alphabetical, and","Fragments":["the"]},{"Key":"the isupper()","Fragments":["function"]},{"Key":"isupper() function","Fragments":["to"]},{"Key":"the alphabetical","Fragments":["character"]},{"Key":"alphabetical character","Fragments":["is"]},{"Key":"your checkSilence","Fragments":["function,"]},{"Key":"checkSilence function,","Fragments":["there"]},{"Key":"also built","Fragments":["in"]},{"Key":"help accomplish","Fragments":["your"]},{"Key":"accomplish your","Fragments":["goal"]},{"Key":"your goal","Fragments":["without"]},{"Key":"you wish.","Fragments":["These"]},{"Key":"wish. These","Fragments":["functions"]},{"Key":"are empty()","Fragments":["to"]},{"Key":"empty() to","Fragments":["check"]},{"Key":"is null,","Fragments":["and"]},{"Key":"null, and","Fragments":["find_first_not_of()"]},{"Key":"and find_first_not_of()","Fragments":["which"]},{"Key":"find_first_not_of() which","Fragments":["will"]},{"Key":"if only","Fragments":["white"]},{"Key":"space exists","Fragments":["in"]},{"Key":"string. If","Fragments":["there"]},{"Key":"space, you","Fragments":["will"]},{"Key":"can't seem","Fragments":["to"]},{"Key":"work. Please","Fragments":["help!"]},{"Key":"Please help!","Fragments":["Thanks."]},{"Key":"My very","Fragments":["first"]},{"Key":"to exercism,","Fragments":["all"]},{"Key":"exercism, all","Fragments":["comments"]},{"Key":"all comments","Fragments":["welcome."]},{"Key":"of looping","Fragments":["over","through","using"]},{"Key":"the C-string","Fragments":["character"]},{"Key":"C-string character","Fragments":["array,"]},{"Key":"character array,","Fragments":["you"]},{"Key":"array, you","Fragments":["could"]},{"Key":"the ```string::operator[]```","Fragments":["or"]},{"Key":"```string::operator[]``` or","Fragments":["use"]},{"Key":"C++11 range","Fragments":["for"]},{"Key":"loop ```for","Fragments":["(char"]},{"Key":"input) {","Fragments":["..."]},{"Key":"than introducing","Fragments":["exceptions"]},{"Key":"introducing exceptions","Fragments":["into"]},{"Key":"exceptions into","Fragments":["this"]},{"Key":"algorithm consider","Fragments":["a"]},{"Key":"design that","Fragments":["can"]},{"Key":"first string","Fragments":["being"]},{"Key":"being shorter/longer","Fragments":["than"]},{"Key":"shorter/longer than","Fragments":["the"]},{"Key":"second. There","Fragments":["are"]},{"Key":"of choices","Fragments":["of"]},{"Key":"choices of","Fragments":["how"]},{"Key":"this. Investigate","Fragments":["some"]},{"Key":"Investigate some","Fragments":["of"]},{"Key":"submissions for","Fragments":["ideas."]},{"Key":"Edit: I","Fragments":["retract"]},{"Key":"I retract","Fragments":["this"]},{"Key":"retract this","Fragments":["it"]},{"Key":"cases have","Fragments":["changed","changed"]},{"Key":"now require","Fragments":["exceptions"]},{"Key":"require exceptions","Fragments":["if"]},{"Key":"exceptions if","Fragments":["lengths"]},{"Key":"if lengths","Fragments":["don't"]},{"Key":"lengths don't","Fragments":["match"]},{"Key":"C++11 lambdas","Fragments":["you"]},{"Key":"you no","Fragments":["longer"]},{"Key":"wrap functions","Fragments":["like"]},{"Key":"this. You","Fragments":["can"]},{"Key":"can now","Fragments":["write"]},{"Key":"now write","Fragments":["something"]},{"Key":"like ```std::transform(...,","Fragments":["[](char"]},{"Key":"```std::transform(..., [](char","Fragments":["c){"]},{"Key":"[](char c){","Fragments":["return"]},{"Key":"c){ return","Fragments":["to_rna(c);"]},{"Key":"return to_rna(c);","Fragments":["})```.","});","}"]},{"Key":"The maximum","Fragments":["64bit"]},{"Key":"maximum 64bit","Fragments":["number"]},{"Key":"64bit number","Fragments":["is"]},{"Key":"a MACRO","Fragments":["in"]},{"Key":"MACRO in","Fragments":["the"]},{"Key":"standard as","Fragments":["UINT64_MAX"]},{"Key":"as UINT64_MAX","Fragments":["or"]},{"Key":"UINT64_MAX or","Fragments":["you"]},{"Key":"use std::numeric_limits\u003c\u003e::max().","Fragments":["I"]},{"Key":"std::numeric_limits\u003c\u003e::max(). I","Fragments":["would"]},{"Key":"prefer these","Fragments":["to"]},{"Key":"your magic","Fragments":["number."]},{"Key":"magic number.","Fragments":["Even"]},{"Key":"number. Even","Fragments":["as"]},{"Key":"Even as","Fragments":["a"]},{"Key":"coded value","Fragments":["it"]},{"Key":"better expressed","Fragments":["as"]},{"Key":"as hex","Fragments":["```0xFFFFFFFFFFFFFFFF```."]},{"Key":"Nice. Sum","Fragments":["of"]},{"Key":"Sum of","Fragments":["squares"]},{"Key":"of squares","Fragments":["also"]},{"Key":"squares also","Fragments":["has"]},{"Key":"an direct","Fragments":["formula"]},{"Key":"direct formula","Fragments":["so"]},{"Key":"formula so","Fragments":["does"]},{"Key":" @letitia-mad","Fragments":["I"]},{"Key":"@letitia-mad I","Fragments":["was"]},{"Key":"it simple","Fragments":["and"]},{"Key":"and limit","Fragments":["myself"]},{"Key":"limit myself","Fragments":["to"]},{"Key":"myself to","Fragments":["only","come"]},{"Key":"standard facilities.","Fragments":["Thanks"]},{"Key":"facilities. Thanks","Fragments":["for"]},{"Key":"the suggestion,","Fragments":["I'll"]},{"Key":"std algos,","Fragments":["it's"]},{"Key":"algos, it's","Fragments":["really"]},{"Key":"good also","Fragments":["abstracting"]},{"Key":"also abstracting","Fragments":["each"]},{"Key":"abstracting each","Fragments":["check"]},{"Key":"each check","Fragments":["in"]},{"Key":"so checks","Fragments":["related"]},{"Key":"checks related","Fragments":["to"]},{"Key":"just kept","Fragments":["to"]},{"Key":"kept to","Fragments":["it."]},{"Key":"optimize a","Fragments":["call"]},{"Key":"a call","Fragments":["to"]},{"Key":"yelling by","Fragments":["saving"]},{"Key":"by saving","Fragments":["it"]},{"Key":" try","Fragments":["this"]},{"Key":"this tutorial,","Fragments":["I"]},{"Key":"tutorial, I","Fragments":["used"]},{"Key":"the steps","Fragments":["in"]},{"Key":"steps in","Fragments":["it"]},{"Key":"it concise.","Fragments":["Tear"]},{"Key":"concise. Tear","Fragments":["it"]},{"Key":"Tear it","Fragments":["to"]},{"Key":"little easier","Fragments":["to"]},{"Key":"read with","Fragments":["a"]},{"Key":"a match_reslt","Fragments":["typedef"]},{"Key":"match_reslt typedef","Fragments":["so"]},{"Key":"typedef so","Fragments":["the"]},{"Key":"the func","Fragments":["sig"]},{"Key":"func sig","Fragments":["wasn't"]},{"Key":"sig wasn't","Fragments":["a"]},{"Key":"wasn't a","Fragments":["million"]},{"Key":"million chars","Fragments":["long."]},{"Key":"chars long.","Fragments":["Using"]},{"Key":"long. Using","Fragments":["boosts"]},{"Key":"Using boosts","Fragments":["to_lower_copy"]},{"Key":"boosts to_lower_copy","Fragments":["as"]},{"Key":"to_lower_copy as","Fragments":["it's"]},{"Key":"as it's","Fragments":["nice"]},{"Key":"use. Ok,","Fragments":["rip"]},{"Key":"Ok, rip","Fragments":["it"]},{"Key":"different about","Fragments":["your"]},{"Key":"your way?","Fragments":["Is"]},{"Key":"way? Is","Fragments":["there"]},{"Key":"specific advantage?","Fragments":["The"]},{"Key":"advantage? The","Fragments":["way"]},{"Key":"it, you're","Fragments":["essentially"]},{"Key":"you're essentially","Fragments":["doing"]},{"Key":"essentially doing","Fragments":["the"]},{"Key":" @virginia","Fragments":["Thanks"]},{"Key":"@virginia Thanks","Fragments":["for"]},{"Key":"think to","Fragments":["use","use","use"]},{"Key":"I've update","Fragments":["my"]},{"Key":"solution based","Fragments":["on"]},{"Key":"The end","Fragments":["result"]},{"Key":"end result","Fragments":["is"]},{"Key":"happens during","Fragments":["the"]},{"Key":"objects construction","Fragments":["is"]},{"Key":"is different.","Fragments":["To"]},{"Key":"different. To","Fragments":["paraphrase"]},{"Key":"To paraphrase","Fragments":["from"]},{"Key":"paraphrase from","Fragments":["Scott"]},{"Key":"from Scott","Fragments":["Meyers:"]},{"Key":" \"The","Fragments":["rules","Hamming"]},{"Key":"\"The rules","Fragments":["of"]},{"Key":"C++ stipulate","Fragments":["that"]},{"Key":"stipulate that","Fragments":["data"]},{"Key":"that data","Fragments":["members"]},{"Key":"object are","Fragments":["initialized"]},{"Key":"are initialized","Fragments":["before"]},{"Key":"initialized before","Fragments":["the"]},{"Key":"is entered.","Fragments":["Inside"]},{"Key":"entered. Inside","Fragments":["the"]},{"Key":"Inside the","Fragments":["```counter```"]},{"Key":"the ```counter```","Fragments":["constructor,","constructor.\""]},{"Key":"```counter``` constructor,","Fragments":["the"]},{"Key":"constructor, the","Fragments":["```strand```"]},{"Key":"the ```strand```","Fragments":["member"]},{"Key":"```strand``` member","Fragments":["isn't"]},{"Key":"member isn't","Fragments":["being"]},{"Key":"isn't being","Fragments":["initialized,"]},{"Key":"being initialized,","Fragments":["it's"]},{"Key":"initialized, it's","Fragments":["being"]},{"Key":"being assigned.","Fragments":["Initialization"]},{"Key":"assigned. Initialization","Fragments":["took"]},{"Key":"Initialization took","Fragments":["place"]},{"Key":"took place","Fragments":["earlier"]},{"Key":"place earlier","Fragments":["—"]},{"Key":"earlier —","Fragments":["when"]},{"Key":"— when","Fragments":["the"]},{"Key":"was automatically","Fragments":["called"]},{"Key":"automatically called","Fragments":["prior"]},{"Key":"called prior","Fragments":["to"]},{"Key":"to entering","Fragments":["the"]},{"Key":"entering the","Fragments":["body"]},{"Key":"So in","Fragments":["your"]},{"Key":"you default","Fragments":["construct"]},{"Key":"default construct","Fragments":["```strand```"]},{"Key":"construct ```strand```","Fragments":["then"]},{"Key":"```strand``` then","Fragments":["assign"]},{"Key":"then assign","Fragments":["over"]},{"Key":"assign over","Fragments":["the"]},{"Key":"The member","Fragments":["initialisation"]},{"Key":"member initialisation","Fragments":["list"]},{"Key":"initialisation list","Fragments":["avoids"]},{"Key":"list avoids","Fragments":["this"]},{"Key":"my example","Fragments":["```strand```"]},{"Key":"example ```strand```","Fragments":["is"]},{"Key":"```strand``` is","Fragments":["copy-constructed"]},{"Key":"is copy-constructed","Fragments":["from"]},{"Key":"copy-constructed from","Fragments":["```inputStrand```."]},{"Key":"from ```inputStrand```.","Fragments":["Ie"]},{"Key":"```inputStrand```. Ie","Fragments":["there"]},{"Key":"Ie there","Fragments":["is"]},{"Key":"for std::string","Fragments":["it"]},{"Key":"std::string it","Fragments":["might"]},{"Key":"might seem","Fragments":["like"]},{"Key":"important but","Fragments":["this"]},{"Key":"preferred C++","Fragments":["style"]},{"Key":" clear","Fragments":["compared"]},{"Key":"clear compared","Fragments":["to"]},{"Key":" easier","Fragments":["to"]},{"Key":"is readily","Fragments":["apparent"]},{"Key":" requires","Fragments":["a"]},{"Key":"of imports","Fragments":["(opt"]},{"Key":"imports (opt","Fragments":["only"]},{"Key":"(opt only","Fragments":["need"]},{"Key":" iterates","Fragments":["over"]},{"Key":"over array","Fragments":["at"]},{"Key":"array at","Fragments":["least"]},{"Key":"least 2","Fragments":["times"]},{"Key":"2 times","Fragments":["(possibly"]},{"Key":"times (possibly","Fragments":["3"]},{"Key":"(possibly 3","Fragments":["depending"]},{"Key":"3 depending","Fragments":["on"]},{"Key":"how trim","Fragments":["is"]},{"Key":" trim","Fragments":["modifies"]},{"Key":"trim modifies","Fragments":["string"]},{"Key":"modifies string","Fragments":["(heap"]},{"Key":"string (heap","Fragments":["object"]},{"Key":"(heap object","Fragments":["creation?)"]},{"Key":" actually","Fragments":["took"]},{"Key":"actually took","Fragments":["3-4"]},{"Key":"took 3-4","Fragments":["longer"]},{"Key":"3-4 longer","Fragments":["to"]},{"Key":"write due","Fragments":["to"]},{"Key":"to having","Fragments":["look"]},{"Key":"having look","Fragments":["up"]},{"Key":"with trim,","Fragments":["see"]},{"Key":"trim, see","Fragments":["in"]},{"Key":"well variables","Fragments":["and"]},{"Key":"are named.","Fragments":["Everything"]},{"Key":"named. Everything","Fragments":["is"]},{"Key":"Everything is","Fragments":["carefully","implemented"]},{"Key":"is carefully","Fragments":["modularized"]},{"Key":"carefully modularized","Fragments":["and"]},{"Key":"modularized and","Fragments":["has"]},{"Key":"has functional","Fragments":["programming"]},{"Key":"programming feel","Fragments":["to"]},{"Key":"feel to","Fragments":["it,"]},{"Key":"it, const","Fragments":["references"]},{"Key":"are good","Fragments":["style"]},{"Key":"style as","Fragments":["well."]},{"Key":"well. Using","Fragments":["reverse"]},{"Key":"Using reverse","Fragments":["iterator"]},{"Key":"for question","Fragments":["mark"]},{"Key":"mark elegantly","Fragments":["bypasses"]},{"Key":"elegantly bypasses","Fragments":["need"]},{"Key":"bypasses need","Fragments":["to"]},{"Key":"Your if's","Fragments":["and"]},{"Key":"if's and","Fragments":["namespaces"]},{"Key":"are Egyptian","Fragments":["brackets,"]},{"Key":"Egyptian brackets,","Fragments":["but"]},{"Key":"brackets, but","Fragments":["functions"]},{"Key":"but functions","Fragments":["are"]},{"Key":"Also, while","Fragments":["this","it's"]},{"Key":"while this","Fragments":["style"]},{"Key":"style has","Fragments":["a"]},{"Key":"of clarity","Fragments":["it"]},{"Key":"clarity it","Fragments":["comes"]},{"Key":"comes at","Fragments":["a"]},{"Key":"a cost","Fragments":["of"]},{"Key":"like replies","Fragments":["hardcoded"]},{"Key":"replies hardcoded","Fragments":["as"]},{"Key":"hardcoded as","Fragments":["constants"]},{"Key":"constants at","Fragments":["the"]},{"Key":"top and","Fragments":["C++"]},{"Key":"11 only","Fragments":["solution"]},{"Key":"solution (most","Fragments":["others"]},{"Key":"(most others","Fragments":["here"]},{"Key":"others here","Fragments":["use"]},{"Key":"been pointed","Fragments":["out"]},{"Key":"actually just","Fragments":["use"]},{"Key":"avoid static","Fragments":["function"]},{"Key":"all. I","Fragments":["did"]},{"Key":"that either,","Fragments":["but"]},{"Key":"either, but","Fragments":["idea"]},{"Key":"but idea","Fragments":["is"]},{"Key":"is use","Fragments":["right","an"]},{"Key":"use right","Fragments":["tool"]},{"Key":"right tool","Fragments":["for"]},{"Key":"job. This","Fragments":["task"]},{"Key":"This task","Fragments":["simply"]},{"Key":"task simply","Fragments":["does"]},{"Key":"simply does","Fragments":["not"]},{"Key":"require class","Fragments":["object"]},{"Key":"class object","Fragments":["because"]},{"Key":"to persist","Fragments":["the"]},{"Key":"persist the","Fragments":["state"]},{"Key":"state or","Fragments":["pass"]},{"Key":"Is not","Fragments":["having"]},{"Key":"hey(string s)","Fragments":["an"]},{"Key":"s) an","Fragments":["informed"]},{"Key":"an informed","Fragments":["choice?"]},{"Key":"informed choice?","Fragments":["Everything"]},{"Key":"choice? Everything","Fragments":["else"]},{"Key":"Everything else","Fragments":["is","receives"]},{"Key":"have isQuestion","Fragments":["as"]},{"Key":"isQuestion as","Fragments":["a"]},{"Key":"string. A","Fragments":["comment"]},{"Key":"comment denoting","Fragments":["that"]},{"Key":"denoting that","Fragments":["would"]},{"Key":"nice. In","Fragments":["this"]},{"Key":"case code","Fragments":["will"]},{"Key":"because silence","Fragments":["is"]},{"Key":"silence is","Fragments":["checked"]},{"Key":"for first,","Fragments":["but"]},{"Key":"that introduces","Fragments":["subtle"]},{"Key":"introduces subtle","Fragments":["dependency"]},{"Key":"subtle dependency","Fragments":["that"]},{"Key":"dependency that","Fragments":["code"]},{"Key":"code maintainer","Fragments":["might"]},{"Key":"maintainer might","Fragments":["not"]},{"Key":"Have some","Fragments":["brownie"]},{"Key":"some brownie","Fragments":["points"]},{"Key":"brownie points","Fragments":["for"]},{"Key":"points for","Fragments":["giving"]},{"Key":"for giving","Fragments":["credit"]},{"Key":"giving credit","Fragments":["to"]},{"Key":"credit to","Fragments":["trim.","check"]},{"Key":"to trim.","Fragments":["Doing"]},{"Key":"trim. Doing","Fragments":["left"]},{"Key":"Doing left","Fragments":["trim"]},{"Key":"left trim","Fragments":["actually"]},{"Key":"trim actually","Fragments":["better"]},{"Key":"actually better","Fragments":["in"]},{"Key":"it avoid","Fragments":["the"]},{"Key":"the bug","Fragments":["on"]},{"Key":"on \"","Fragments":["?"]},{"Key":"\" ?","Fragments":["\""]},{"Key":"? \"","Fragments":["input."]},{"Key":"\" input.","Fragments":["If"]},{"Key":"you trim","Fragments":["from"]},{"Key":"trim from","Fragments":["the"]},{"Key":"right this","Fragments":["will"]},{"Key":"question. But","Fragments":["be"]},{"Key":"But be","Fragments":["aware,"]},{"Key":"be aware,","Fragments":["since"]},{"Key":"aware, since","Fragments":["you"]},{"Key":"gave attribution","Fragments":["this"]},{"Key":"attribution this","Fragments":["function"]},{"Key":"not stolen,","Fragments":["because"]},{"Key":"stolen, because","Fragments":["authors"]},{"Key":"because authors","Fragments":["still"]},{"Key":"authors still","Fragments":["have"]},{"Key":"have it.","Fragments":["You"]},{"Key":"You duplicated","Fragments":["it"]},{"Key":"duplicated it","Fragments":["and"]},{"Key":"and imitation","Fragments":["is"]},{"Key":"imitation is","Fragments":["a"]},{"Key":"a form","Fragments":["of"]},{"Key":"of flattery,","Fragments":["not"]},{"Key":"flattery, not","Fragments":["theft."]},{"Key":" isSilence","Fragments":["could"]},{"Key":"been coded","Fragments":["as"]},{"Key":"coded as","Fragments":["s.isEmpty(),"]},{"Key":"as s.isEmpty(),","Fragments":["this"]},{"Key":"s.isEmpty(), this","Fragments":["is"]},{"Key":"it fits","Fragments":["better"]},{"Key":"with style","Fragments":["of"]},{"Key":" Final","Fragments":["thing"]},{"Key":"Final thing","Fragments":["to"]},{"Key":"to notice","Fragments":["that"]},{"Key":"the passed","Fragments":["string"]},{"Key":"passed string","Fragments":["many"]},{"Key":"many times.","Fragments":["It"]},{"Key":"times. It","Fragments":["is"]},{"Key":"this assignment","Fragments":["in"]},{"Key":"one pass,","Fragments":["but"]},{"Key":"have explicit","Fragments":["loop."]},{"Key":"not trim","Fragments":["the"]},{"Key":"the message.","Fragments":["Good"]},{"Key":"message. Good","Fragments":["thinking"]},{"Key":"Good thinking","Fragments":["on"]},{"Key":"thinking on","Fragments":["early"]},{"Key":"on early","Fragments":["stops"]},{"Key":"early stops","Fragments":["in"]},{"Key":"stops in","Fragments":["your"]},{"Key":"your isSilence","Fragments":["and"]},{"Key":"isSilence and","Fragments":["isYelling"]},{"Key":"isYelling functions,","Fragments":["although"]},{"Key":"functions, although","Fragments":["they"]},{"Key":"although they","Fragments":["are"]},{"Key":"bit convoluted.","Fragments":["Do"]},{"Key":"convoluted. Do","Fragments":["you"]},{"Key":"any includes","Fragments":["in"]},{"Key":" hasLetter","Fragments":["is"]},{"Key":"hasLetter is","Fragments":["pretty"]},{"Key":"pretty bad","Fragments":["variable"]},{"Key":"bad variable","Fragments":["name"]},{"Key":"submit *.h","Fragments":["files"]},{"Key":"*.h files","Fragments":["you"]},{"Key":"files you","Fragments":["should"]},{"Key":"include bob","Fragments":["class"]},{"Key":"the includes/helper","Fragments":["in"]},{"Key":"includes/helper in","Fragments":["*.cpp"]},{"Key":"in *.cpp","Fragments":["file."]},{"Key":" string.back()","Fragments":["has"]},{"Key":"string.back() has","Fragments":["undefined"]},{"Key":"string, this","Fragments":["works"]},{"Key":"because isSilence","Fragments":["executed"]},{"Key":"isSilence executed","Fragments":["first,"]},{"Key":"executed first,","Fragments":["but"]},{"Key":"comment would","Fragments":["be"]},{"Key":"Good idea","Fragments":["on"]},{"Key":"idea on","Fragments":["using"]},{"Key":"char reference","Fragments":["in"]},{"Key":"each loops.","Fragments":["Also"]},{"Key":"loops. Also","Fragments":["good"]},{"Key":"Also good","Fragments":["to"]},{"Key":"see early","Fragments":["stop"]},{"Key":"early stop","Fragments":["in"]},{"Key":"stop in","Fragments":["for"]},{"Key":"loops. I","Fragments":["like"]},{"Key":"iterating the","Fragments":["string"]},{"Key":"only twice","Fragments":["in"]},{"Key":"the worst","Fragments":["case,"]},{"Key":"worst case,","Fragments":["and"]},{"Key":"once on","Fragments":["average."]},{"Key":"if (message.empty())","Fragments":["return"]},{"Key":"(message.empty()) return","Fragments":["true;"]},{"Key":"That piece","Fragments":["of"]},{"Key":"is obsolete,","Fragments":["because"]},{"Key":"obsolete, because","Fragments":["if"]},{"Key":"will skip","Fragments":["for"]},{"Key":"skip for","Fragments":["each"]},{"Key":"each loop","Fragments":["and"]},{"Key":"go directly","Fragments":["to"]},{"Key":"of !isupper?","Fragments":["No"]},{"Key":"!isupper? No","Fragments":["need"]},{"Key":"set is_upper","Fragments":["="]},{"Key":"is_upper =","Fragments":["true"]},{"Key":"= true","Fragments":["or"]},{"Key":"or break","Fragments":["either,"]},{"Key":"break either,","Fragments":["simply"]},{"Key":"either, simply","Fragments":["return"]},{"Key":"false. A","Fragments":["single"]},{"Key":"lower character","Fragments":["implies"]},{"Key":"character implies","Fragments":["that"]},{"Key":"implies that","Fragments":["we"]},{"Key":"not yelling.","Fragments":["So,"]},{"Key":"yelling. So,","Fragments":["you"]},{"Key":"need is_upper","Fragments":["variable."]},{"Key":"simplified this","Fragments":["massively"]},{"Key":"this massively","Fragments":["using"]},{"Key":"massively using","Fragments":["a"]},{"Key":"to transcribe","Fragments":["the","the"]},{"Key":"transcribe the","Fragments":["letters","RNA"]},{"Key":"letters instead","Fragments":["of"]},{"Key":"a cumbersome","Fragments":["if...else"]},{"Key":"cumbersome if...else","Fragments":["if"]},{"Key":"if...else if","Fragments":["statement."]},{"Key":"tip @moriah-au!","Fragments":["That"]},{"Key":"@moriah-au! That","Fragments":["shortened"]},{"Key":"That shortened","Fragments":["it"]},{"Key":"shortened it","Fragments":["quite"]},{"Key":"it quite","Fragments":["a"]},{"Key":"a bit!","Fragments":[":)"]},{"Key":"are uppercase","Fragments":["at"]},{"Key":"uppercase at","Fragments":["once"]},{"Key":"once instead","Fragments":["of"]},{"Key":"checking them","Fragments":["one"]},{"Key":"them one","Fragments":["at"]},{"Key":"time. One","Fragments":["thing"]},{"Key":"thing though,","Fragments":["you"]},{"Key":"include bob.h","Fragments":["in"]},{"Key":"bob.h in","Fragments":["your"]},{"Key":"call ```ss.str().empty()```","Fragments":["than"]},{"Key":"```ss.str().empty()``` than","Fragments":["to"]},{"Key":"compare length","Fragments":["to"]},{"Key":"```std::pow``` to","Fragments":["create"]},{"Key":"the magnitude","Fragments":["selection."]},{"Key":"simple Sieve","Fragments":["of"]},{"Key":"of Erastothenes.","Fragments":["There"]},{"Key":"Erastothenes. There","Fragments":["is"]},{"Key":"explicit way","Fragments":["to"]},{"Key":"range that","Fragments":["the"]},{"Key":"the nth","Fragments":["prime","value"]},{"Key":"nth prime","Fragments":["will"]},{"Key":"prime will","Fragments":["fall"]},{"Key":"will fall","Fragments":["into."]},{"Key":"fall into.","Fragments":["So"]},{"Key":"into. So","Fragments":["I"]},{"Key":"the upper-bound","Fragments":["of"]},{"Key":"upper-bound of","Fragments":["the"]},{"Key":"sieve and","Fragments":["find"]},{"Key":"find all","Fragments":["primes","the"]},{"Key":"this bound.","Fragments":["Then"]},{"Key":"bound. Then","Fragments":["just"]},{"Key":"Then just","Fragments":["return"]},{"Key":"nth value","Fragments":["found."]},{"Key":"I'm learning","Fragments":["c++"]},{"Key":"learning c++","Fragments":["myself,"]},{"Key":"c++ myself,","Fragments":["so"]},{"Key":"take what","Fragments":["I"]},{"Key":"say with","Fragments":["a"]},{"Key":"a grain","Fragments":["of"]},{"Key":"grain of","Fragments":["salt."]},{"Key":"of salt.","Fragments":["Its"]},{"Key":"salt. Its","Fragments":["an"]},{"Key":"Its an","Fragments":["interesting"]},{"Key":"interesting idea","Fragments":["to"]},{"Key":"to map","Fragments":["potential"]},{"Key":"map potential","Fragments":["input"]},{"Key":"potential input","Fragments":["strings"]},{"Key":"results you","Fragments":["would"]},{"Key":"would want.","Fragments":["However,"]},{"Key":"want. However,","Fragments":["you"]},{"Key":"can generalize","Fragments":["your"]},{"Key":"generalize your","Fragments":["code."]},{"Key":"code. For","Fragments":["each"]},{"Key":"response that","Fragments":["bob"]},{"Key":"should give,","Fragments":["what"]},{"Key":"give, what","Fragments":["is"]},{"Key":"say to","Fragments":["bob"]},{"Key":"to elicit","Fragments":["that"]},{"Key":"elicit that","Fragments":["response?"]},{"Key":"considered whether","Fragments":["or"]},{"Key":"project into","Fragments":[".h"]},{"Key":"into .h","Fragments":["and"]},{"Key":"but ended","Fragments":["up"]},{"Key":"up not","Fragments":["because"]},{"Key":"not because","Fragments":["it"]},{"Key":"was short.","Fragments":["I'm"]},{"Key":"short. I'm","Fragments":["pretty"]},{"Key":"to c++,","Fragments":["and"]},{"Key":"c++, and","Fragments":["I'm"]},{"Key":"why its","Fragments":["necessary"]},{"Key":"its necessary","Fragments":["to"]},{"Key":"make bob","Fragments":["a"]},{"Key":"to good","Fragments":["variable"]},{"Key":"good variable","Fragments":["names."]},{"Key":"names. For","Fragments":["the"]},{"Key":"being argumentative,","Fragments":["I'd"]},{"Key":"argumentative, I'd","Fragments":["say"]},{"Key":"best option","Fragments":["only"]},{"Key":"option only","Fragments":["if"]},{"Key":"some object.","Fragments":["(I'm"]},{"Key":"object. (I'm","Fragments":["not"]},{"Key":"sure exactly","Fragments":["what"]},{"Key":"by persistent","Fragments":["variables)."]},{"Key":"persistent variables).","Fragments":["There's"]},{"Key":"variables). There's","Fragments":["nothing"]},{"Key":"nothing here","Fragments":["that"]},{"Key":"be instantiated,","Fragments":["so"]},{"Key":"instantiated, so","Fragments":["the"]},{"Key":"class adds","Fragments":["structure"]},{"Key":"adds structure","Fragments":["that"]},{"Key":"structure that","Fragments":["doesn't"]},{"Key":"the expected","Fragments":["uses","output"]},{"Key":"expected uses","Fragments":["of"]},{"Key":"functions it","Fragments":["contains."]},{"Key":"couple suggestions","Fragments":["to"]},{"Key":"suggestions to","Fragments":["start"]},{"Key":" `hey`","Fragments":["needs"]},{"Key":"`hey` needs","Fragments":["to"]},{"Key":"to `bob::hey()`,","Fragments":["instead"]},{"Key":"`bob::hey()`, instead","Fragments":["of"]},{"Key":"individual `bob`","Fragments":["object,"]},{"Key":"`bob` object,","Fragments":["or"]},{"Key":"object, or","Fragments":["instance,"]},{"Key":"or instance,","Fragments":["and"]},{"Key":"instance, and","Fragments":["then"]},{"Key":"then calling","Fragments":["`hey`"]},{"Key":"calling `hey`","Fragments":["on"]},{"Key":"`hey` on","Fragments":["that"]},{"Key":"that particular","Fragments":["instance."]},{"Key":" Relatedly,","Fragments":["because"]},{"Key":"Relatedly, because","Fragments":["there"]},{"Key":"instances for","Fragments":["this"]},{"Key":"problem, using","Fragments":["a"]},{"Key":"a `namespace","Fragments":["bob`"]},{"Key":"`namespace bob`","Fragments":["instead"]},{"Key":"bob` instead","Fragments":["of"]},{"Key":"functionality to","Fragments":["solve"]},{"Key":"Finally, using","Fragments":["flags"]},{"Key":"using flags","Fragments":["like"]},{"Key":"flags like","Fragments":["`gibberish`"]},{"Key":"like `gibberish`","Fragments":["is"]},{"Key":"`gibberish` is","Fragments":["alright,"]},{"Key":"is alright,","Fragments":["but"]},{"Key":"alright, but","Fragments":["I"]},{"Key":"it boosts","Fragments":["readability"]},{"Key":"boosts readability","Fragments":["to"]},{"Key":"own helper","Fragments":["function."]},{"Key":"use call","Fragments":["by"]},{"Key":"to sieve","Fragments":["the"]},{"Key":"sieve the","Fragments":["numbers"]},{"Key":"numbers out","Fragments":["of"]},{"Key":"list because","Fragments":["it"]},{"Key":"efficient erase","Fragments":["function."]},{"Key":"erase function.","Fragments":["At"]},{"Key":"function. At","Fragments":["the"]},{"Key":"result vector","Fragments":["is"]},{"Key":"constructed from","Fragments":["the"]},{"Key":"remaining values","Fragments":["in"]},{"Key":"Your `map`","Fragments":["function"]},{"Key":"`map` function","Fragments":["is"]},{"Key":"you've offloaded","Fragments":["the"]},{"Key":"offloaded the","Fragments":["work"]},{"Key":"function. More","Fragments":["descriptive"]},{"Key":"More descriptive","Fragments":["variable"]},{"Key":"descriptive variable","Fragments":["names","names"]},{"Key":"names would","Fragments":["greatly"]},{"Key":"would greatly","Fragments":["improve"]},{"Key":"greatly improve","Fragments":["readability,"]},{"Key":"improve readability,","Fragments":["as"]},{"Key":"readability, as","Fragments":["would"]},{"Key":"as would","Fragments":["a","more"]},{"Key":"would a","Fragments":["few"]},{"Key":"few comments","Fragments":["explaining","in"]},{"Key":"explaining why","Fragments":["certain"]},{"Key":"why certain","Fragments":["lines"]},{"Key":"certain lines","Fragments":["of"]},{"Key":"code appear","Fragments":["and"]},{"Key":"appear and","Fragments":["how"]},{"Key":"how broadly","Fragments":["how"]},{"Key":"broadly how","Fragments":["blocks"]},{"Key":"how blocks","Fragments":["of"]},{"Key":"blocks of","Fragments":["code"]},{"Key":"code are","Fragments":["meant"]},{"Key":"are meant","Fragments":["to"]},{"Key":"(for example,","Fragments":["it's","things","things"]},{"Key":"example, it's","Fragments":["not"]},{"Key":"immediately clear","Fragments":["what's"]},{"Key":"on with","Fragments":["the"]},{"Key":"the slashes;","Fragments":["it"]},{"Key":"slashes; it","Fragments":["looks"]},{"Key":"like maybe","Fragments":["you're"]},{"Key":"maybe you're","Fragments":["using"]},{"Key":"mark word","Fragments":["boundaries,"]},{"Key":"word boundaries,","Fragments":["or"]},{"Key":"boundaries, or","Fragments":["something)."]},{"Key":" Reverse","Fragments":["iteration"]},{"Key":"Reverse iteration","Fragments":["over"]},{"Key":"string, setting","Fragments":["the"]},{"Key":"correct magnitude","Fragments":["bit"]},{"Key":"magnitude bit","Fragments":["when"]},{"Key":"bit when","Fragments":["we"]},{"Key":" Multiply","Fragments":["by"]},{"Key":"Multiply by","Fragments":["2"]},{"Key":"bit shift","Fragments":["to"]},{"Key":"left ```ret","Fragments":["\u003c\u003c="]},{"Key":"```ret \u003c\u003c=","Fragments":["1```."]},{"Key":"\u003c\u003c= 1```.","Fragments":["This"]},{"Key":"1```. This","Fragments":["is"]},{"Key":"also potentially","Fragments":["faster"]},{"Key":"faster thought","Fragments":["it"]},{"Key":"1 clock","Fragments":["cycle"]},{"Key":"clock cycle","Fragments":["vs"]},{"Key":"cycle vs","Fragments":["2/3"]},{"Key":"vs 2/3","Fragments":["at"]},{"Key":"2/3 at","Fragments":["best."]},{"Key":"at best.","Fragments":["Optimiser"]},{"Key":"best. Optimiser","Fragments":["may"]},{"Key":"Optimiser may","Fragments":["even"]},{"Key":"may even","Fragments":["make"]},{"Key":"this substitution","Fragments":["for"]},{"Key":"substitution for","Fragments":["you."]},{"Key":"Changed bob","Fragments":["to"]},{"Key":"reflect all","Fragments":["of"]},{"Key":"very helpful","Fragments":["suggestions"]},{"Key":"helpful suggestions","Fragments":["from"]},{"Key":"first submission.","Fragments":["In"]},{"Key":"submission. In","Fragments":["the"]},{"Key":"from java","Fragments":["to"]},{"Key":"java to","Fragments":["c++"]},{"Key":"c++ for","Fragments":["an","less"]},{"Key":"an algorithms","Fragments":["class,"]},{"Key":"algorithms class,","Fragments":["and"]},{"Key":"all we've","Fragments":["used"]},{"Key":"we've used","Fragments":["so"]},{"Key":"used so","Fragments":["far"]},{"Key":"far are","Fragments":["classes"]},{"Key":"and structs,","Fragments":["so"]},{"Key":"structs, so","Fragments":["I'm"]},{"Key":"learn about","Fragments":["using"]},{"Key":"went through","Fragments":["several"]},{"Key":"through several","Fragments":["iterations"]},{"Key":"several iterations","Fragments":["trying"]},{"Key":"iterations trying","Fragments":["to"]},{"Key":"to best","Fragments":["store"]},{"Key":"best store","Fragments":["the"]},{"Key":"song data","Fragments":["and"]},{"Key":"accessing parts","Fragments":["of"]},{"Key":"song verse","Fragments":["by","data"]},{"Key":"verse by","Fragments":["using"]},{"Key":"using []","Fragments":["or"]},{"Key":"[] or","Fragments":["if"]},{"Key":"should by","Fragments":["iterating"]},{"Key":"by iterating","Fragments":["through"]},{"Key":"through by","Fragments":["using"]},{"Key":"iterator. In","Fragments":["the"]},{"Key":"with []","Fragments":["and"]},{"Key":"[] and","Fragments":["this"]},{"Key":"or really","Fragments":["any"]},{"Key":"really any","Fragments":["of"]},{"Key":"I'm storing","Fragments":["the"]},{"Key":"verse data","Fragments":["but"]},{"Key":"data but","Fragments":["it"]},{"Key":"was also","Fragments":["my","a"]},{"Key":"also my","Fragments":["first"]},{"Key":"a tuple.","Fragments":["Appreciate"]},{"Key":"tuple. Appreciate","Fragments":["any"]},{"Key":"Appreciate any","Fragments":["comments"]},{"Key":"any comments","Fragments":["if"]},{"Key":"comments if","Fragments":["there"]},{"Key":"any parts","Fragments":["of"]},{"Key":"There wasn't","Fragments":["any"]},{"Key":"wasn't any","Fragments":["tests"]},{"Key":"any tests","Fragments":["with"]},{"Key":"tests with","Fragments":["bad","words"]},{"Key":"with bad","Fragments":["input,"]},{"Key":"bad input,","Fragments":["so"]},{"Key":"input, so","Fragments":["I"]},{"Key":"just returned","Fragments":["blank"]},{"Key":"returned blank","Fragments":["if"]},{"Key":"blank if","Fragments":["I"]},{"Key":"I encountered","Fragments":["it."]},{"Key":"is compact","Fragments":["and"]},{"Key":"and well","Fragments":["written,"]},{"Key":"well written,","Fragments":["although"]},{"Key":"written, although","Fragments":["I'm"]},{"Key":"although I'm","Fragments":["not"]},{"Key":"passes every","Fragments":["test"]},{"Key":"every test","Fragments":["case."]},{"Key":"the hamming_test.cpp","Fragments":["file,"]},{"Key":"hamming_test.cpp file,","Fragments":["you"]},{"Key":"file, you","Fragments":["should"]},{"Key":"should simply","Fragments":["ignore"]},{"Key":"extra length","Fragments":["on","and"]},{"Key":"length on","Fragments":["the"]},{"Key":"the respective","Fragments":["strand,"]},{"Key":"respective strand,","Fragments":["rather"]},{"Key":"strand, rather","Fragments":["than"]},{"Key":"of namespaces,","Fragments":["especially"]},{"Key":"namespaces, especially","Fragments":["nesting"]},{"Key":"especially nesting","Fragments":["your"]},{"Key":"nesting your","Fragments":["helper"]},{"Key":"think detecting","Fragments":["gibberish"]},{"Key":"detecting gibberish","Fragments":["makes"]},{"Key":"gibberish makes","Fragments":["the"]},{"Key":"function difficult","Fragments":["to"]},{"Key":"understand. Consider","Fragments":["that"]},{"Key":"Consider that","Fragments":["based"]},{"Key":"that based","Fragments":["on","on"]},{"Key":"appears bob","Fragments":["will"]},{"Key":"will assume","Fragments":["everything"]},{"Key":"assume everything","Fragments":["is"]},{"Key":"yell, unless","Fragments":["it"]},{"Key":"unless it","Fragments":["is"]},{"Key":"is nothing,","Fragments":["a"]},{"Key":"nothing, a","Fragments":["question,"]},{"Key":"or nonsense;","Fragments":["whereas"]},{"Key":"nonsense; whereas","Fragments":["in"]},{"Key":"whereas in","Fragments":["the"]},{"Key":"problem spec","Fragments":["his"]},{"Key":"spec his","Fragments":["default"]},{"Key":"his default","Fragments":["response"]},{"Key":"default response","Fragments":["is"]},{"Key":"\"Whatever.\" and","Fragments":["need"]},{"Key":"and need","Fragments":["not"]},{"Key":"need not","Fragments":["be"]},{"Key":"in response","Fragments":["to"]},{"Key":"to nonsense,","Fragments":["but"]},{"Key":"nonsense, but","Fragments":["to"]},{"Key":"to anything","Fragments":["that"]},{"Key":"more specific","Fragments":["condition."]},{"Key":"specific condition.","Fragments":["Effectively,"]},{"Key":"condition. Effectively,","Fragments":["`isGibberish`"]},{"Key":"Effectively, `isGibberish`","Fragments":["is"]},{"Key":"`isGibberish` is","Fragments":["currently"]},{"Key":"is currently","Fragments":["detecting"]},{"Key":"currently detecting","Fragments":["if"]},{"Key":"detecting if","Fragments":["bob"]},{"Key":"Hey, it's","Fragments":["good"]},{"Key":"good you","Fragments":["got"]},{"Key":"these ugly","Fragments":["hexes"]},{"Key":"ugly hexes","Fragments":["from"]},{"Key":"hexes from","Fragments":["your"]},{"Key":"if ```input```","Fragments":["is"]},{"Key":"```input``` is","Fragments":["blank"]},{"Key":"is blank","Fragments":["with"]},{"Key":"blank with","Fragments":["lambda"]},{"Key":"lambda ```isBlank```","Fragments":["function."]},{"Key":"functions take","Fragments":["```std::string```"]},{"Key":"take ```std::string```","Fragments":["as"]},{"Key":"```std::string``` as","Fragments":["an"]},{"Key":"an argument,","Fragments":["but"]},{"Key":"argument, but","Fragments":["surely"]},{"Key":"surely they","Fragments":["shouldn't"]},{"Key":"not tell","Fragments":["compiler"]},{"Key":"tell compiler","Fragments":["explicitely"]},{"Key":"compiler explicitely","Fragments":["that"]},{"Key":"explicitely that","Fragments":["you"]},{"Key":"modify them?","Fragments":["You"]},{"Key":"them? You","Fragments":["also"]},{"Key":"the ```input```","Fragments":["string"]},{"Key":"```input``` string","Fragments":["when"]},{"Key":"string when","Fragments":["entering","I","you","you"]},{"Key":"when entering","Fragments":["each"]},{"Key":"entering each","Fragments":["function."]},{"Key":"each function.","Fragments":["Maybe"]},{"Key":"function. Maybe","Fragments":["passing"]},{"Key":"Maybe passing","Fragments":["```input```"]},{"Key":"passing ```input```","Fragments":["by"]},{"Key":"```input``` by","Fragments":["reference"]},{"Key":"use ```islower```","Fragments":["and"]},{"Key":"```islower``` and","Fragments":["```isupper```","```isupper```"]},{"Key":"and ```isupper```","Fragments":["functions.","use,"]},{"Key":"```isupper``` functions.","Fragments":["I"]},{"Key":"write very","Fragments":["short"]},{"Key":"very short","Fragments":["and"]},{"Key":"simple solutions","Fragments":["for"]},{"Key":"the letter","Fragments":["case,"]},{"Key":"letter case,","Fragments":["but"]},{"Key":"but these","Fragments":["functions","are"]},{"Key":"less important:","Fragments":["I"]},{"Key":"important: I","Fragments":["see"]},{"Key":"you sometimes","Fragments":["put"]},{"Key":"sometimes put","Fragments":["space"]},{"Key":"put space","Fragments":["after","between"]},{"Key":"an ```if```","Fragments":["or"]},{"Key":"```if``` or","Fragments":["```for```"]},{"Key":"or ```for```","Fragments":["and"]},{"Key":"```for``` and","Fragments":["sometimes"]},{"Key":"sometimes not.","Fragments":["It's"]},{"Key":"not. It's","Fragments":["a"]},{"Key":"at past","Fragments":["attempts"]},{"Key":"past attempts","Fragments":["at"]},{"Key":"attempts at","Fragments":["the"]},{"Key":"same exercise","Fragments":["by"]},{"Key":"others, I","Fragments":["noticed"]},{"Key":"was taking","Fragments":["apostrophes"]},{"Key":"taking apostrophes","Fragments":["into"]},{"Key":"apostrophes into","Fragments":["consideration"]},{"Key":"into consideration","Fragments":["when"]},{"Key":"consideration when","Fragments":["parsing"]},{"Key":"when parsing","Fragments":["for"]},{"Key":"parsing for","Fragments":["words"]},{"Key":"for words","Fragments":["and"]},{"Key":"thinking \"how","Fragments":["are"]},{"Key":"\"how are","Fragments":["these"]},{"Key":"are these","Fragments":["passing"]},{"Key":"these passing","Fragments":["the"]},{"Key":"the units","Fragments":["tests?\"."]},{"Key":"units tests?\".","Fragments":["I"]},{"Key":"tests?\". I","Fragments":["looked"]},{"Key":"looked through","Fragments":["the"]},{"Key":"the git","Fragments":["history"]},{"Key":"git history","Fragments":["on"]},{"Key":"history on","Fragments":["the"]},{"Key":"the word_count_test.cpp","Fragments":["file"]},{"Key":"word_count_test.cpp file","Fragments":["and"]},{"Key":"and noticed","Fragments":["that"]},{"Key":"with words","Fragments":["containing"]},{"Key":"containing apostrophes","Fragments":["were"]},{"Key":"apostrophes were","Fragments":["added"]},{"Key":"added much","Fragments":["later."]},{"Key":"much later.","Fragments":["As"]},{"Key":"a result,","Fragments":["my"]},{"Key":"result, my","Fragments":["solution"]},{"Key":"may look","Fragments":["unnecessarily"]},{"Key":"look unnecessarily","Fragments":["complicated"]},{"Key":"unnecessarily complicated","Fragments":["compared"]},{"Key":"complicated compared","Fragments":["to"]},{"Key":"to other's","Fragments":["solutions."]},{"Key":" @effie","Fragments":["ah,"]},{"Key":"@effie ah,","Fragments":["I"]},{"Key":"ah, I","Fragments":["was"]},{"Key":"probably mixing","Fragments":["up"]},{"Key":"mixing up","Fragments":["coding"]},{"Key":"up coding","Fragments":["standards."]},{"Key":"coding standards.","Fragments":["The"]},{"Key":"standards. The","Fragments":["aligned"]},{"Key":"The aligned","Fragments":["braces"]},{"Key":"aligned braces","Fragments":["for"]},{"Key":"braces for","Fragments":["functions"]},{"Key":"functions come","Fragments":["from"]},{"Key":"the Linux","Fragments":["kernel"]},{"Key":"Linux kernel","Fragments":["coding","drivers"]},{"Key":"kernel coding","Fragments":["style."]},{"Key":"style. Of","Fragments":["course"]},{"Key":"course they","Fragments":["don't"]},{"Key":"cover namespaces,","Fragments":["being"]},{"Key":"namespaces, being","Fragments":["C-based!"]},{"Key":" Will","Fragments":["hunt"]},{"Key":"Will hunt","Fragments":["around"]},{"Key":"hunt around","Fragments":["for"]},{"Key":"a coding","Fragments":["style"]},{"Key":"coding style","Fragments":["that's","is"]},{"Key":"style that's","Fragments":["applicable"]},{"Key":"that's applicable","Fragments":["to"]},{"Key":"C++ projects.","Fragments":["Bizarrely"]},{"Key":"projects. Bizarrely","Fragments":["http://qt-project.org/wiki/Qt_Coding_Style"]},{"Key":"Bizarrely http://qt-project.org/wiki/Qt_Coding_Style","Fragments":["doesn't"]},{"Key":"http://qt-project.org/wiki/Qt_Coding_Style doesn't","Fragments":["mention"]},{"Key":"doesn't mention","Fragments":["namespaces"]},{"Key":"mention namespaces","Fragments":["either!"]},{"Key":"mean. I","Fragments":["just"]},{"Key":"just submitted","Fragments":["a"]},{"Key":"3rd iterations","Fragments":["that"]},{"Key":"iterations that","Fragments":["I"]},{"Key":"think makes","Fragments":["it"]},{"Key":"that \"Whatever\"","Fragments":["is"]},{"Key":"\"Whatever\" is","Fragments":["the"]},{"Key":"all point,","Fragments":["including"]},{"Key":"point, including","Fragments":["the"]},{"Key":"by constant","Fragments":["reference."]},{"Key":"constant reference.","Fragments":["As"]},{"Key":"reference. As","Fragments":["for"]},{"Key":"the ```islower```","Fragments":["and"]},{"Key":"```isupper``` use,","Fragments":["it"]},{"Key":"use, it","Fragments":["was"]},{"Key":"was because","Fragments":["in"]},{"Key":"file there","Fragments":["was"]},{"Key":"me use","Fragments":["that."]},{"Key":"use that.","Fragments":["But"]},{"Key":"after I","Fragments":["changed","was","wrote"]},{"Key":"switch back","Fragments":["using"]},{"Key":"back using","Fragments":["the"]},{"Key":"functions. Sorry","Fragments":["about"]},{"Key":"the ```if```s","Fragments":["and"]},{"Key":"```if```s and","Fragments":["the"]},{"Key":"the ```for```s,","Fragments":["it's"]},{"Key":"```for```s, it's","Fragments":["because"]},{"Key":"the snippets","Fragments":["in"]},{"Key":"snippets in","Fragments":["my"]},{"Key":"my vim","Fragments":["config"]},{"Key":"vim config","Fragments":["which"]},{"Key":"config which","Fragments":["are"]},{"Key":"a git","Fragments":["submodule"]},{"Key":"git submodule","Fragments":["(so"]},{"Key":"submodule (so","Fragments":["the"]},{"Key":"(so the","Fragments":["changes"]},{"Key":"not clonable","Fragments":["from"]},{"Key":"clonable from","Fragments":["a"]},{"Key":"a PC","Fragments":["to"]},{"Key":"PC to","Fragments":["another)"]},{"Key":"to another)","Fragments":["but"]},{"Key":"another) but","Fragments":["you're"]},{"Key":"you're still","Fragments":["right"]},{"Key":"still right","Fragments":["and"]},{"Key":"right and","Fragments":["I"]},{"Key":"definitely do","Fragments":["something"]},{"Key":"that. Thank","Fragments":["you"]},{"Key":"You still","Fragments":["don't"]},{"Key":"don't pass","Fragments":["```input```","references"]},{"Key":"pass ```input```","Fragments":["to"]},{"Key":"```input``` to","Fragments":["```hey```"]},{"Key":"```hey``` function","Fragments":["by"]},{"Key":"reference. When","Fragments":["entering"]},{"Key":"When entering","Fragments":["```hey```"]},{"Key":"entering ```hey```","Fragments":["you"]},{"Key":"```hey``` you","Fragments":["are"]},{"Key":"copying contents","Fragments":["of"]},{"Key":"std::string\u0026 input```","Fragments":["as"]},{"Key":"input``` as","Fragments":["the"]},{"Key":"the argument.","Fragments":["The","I"]},{"Key":"argument. The","Fragments":["```\u0026```"]},{"Key":"The ```\u0026```","Fragments":["symbol"]},{"Key":"```\u0026``` symbol","Fragments":["tells"]},{"Key":"symbol tells","Fragments":["compiler"]},{"Key":"tells compiler","Fragments":["to"]},{"Key":"treat ```input```","Fragments":["as"]},{"Key":"```input``` as","Fragments":["a"]},{"Key":"reference. This","Fragments":["way"]},{"Key":"use pointers","Fragments":["as"]},{"Key":"pointers as","Fragments":["you"]},{"Key":"in argument","Fragments":["of"]},{"Key":"of ```isUppercase```","Fragments":["function."]},{"Key":"```isUppercase``` function.","Fragments":["You"]},{"Key":"std::string\u0026 str```","Fragments":["as"]},{"Key":"str``` as","Fragments":["the"]},{"Key":"use references","Fragments":["whenever"]},{"Key":"possible instead","Fragments":["of"]},{"Key":"of pointers.","Fragments":["It's"]},{"Key":"pointers. It's","Fragments":["one"]},{"Key":"It's one","Fragments":["of"]},{"Key":"C++ advantages","Fragments":["over"]},{"Key":"advantages over","Fragments":["C."]},{"Key":" Need","Fragments":["a"]},{"Key":"Need a","Fragments":["better"]},{"Key":" Apparently","Fragments":["I"]},{"Key":"Apparently I","Fragments":["should"]},{"Key":"to route","Fragments":["tests"]},{"Key":"route tests","Fragments":["through"]},{"Key":"tests through","Fragments":["lambdas."]},{"Key":"through lambdas.","Fragments":["`static_cast\u003cint(*)(int)\u003e(islower))`"]},{"Key":"lambdas. `static_cast\u003cint(*)(int)\u003e(islower))`","Fragments":["will"]},{"Key":"`static_cast\u003cint(*)(int)\u003e(islower))` will","Fragments":["work"]},{"Key":"- Need","Fragments":["add"]},{"Key":"Need add","Fragments":["`random`"]},{"Key":"add `random`","Fragments":["to"]},{"Key":"`random` to","Fragments":["`find_package(Boost"]},{"Key":"to `find_package(Boost","Fragments":["1.55"]},{"Key":"`find_package(Boost 1.55","Fragments":["REQUIRED"]},{"Key":"1.55 REQUIRED","Fragments":["COMPONENTS"]},{"Key":"REQUIRED COMPONENTS","Fragments":["unit_test_framework"]},{"Key":"COMPONENTS unit_test_framework","Fragments":["date_time"]},{"Key":"unit_test_framework date_time","Fragments":["regex"]},{"Key":"date_time regex","Fragments":["random)`"]},{"Key":"Should use","Fragments":["std::random.","`emplace_back`."]},{"Key":" `long`","Fragments":["and"]},{"Key":"`long` and","Fragments":["`int`"]},{"Key":" `1e9`","Fragments":["is"]},{"Key":"`1e9` is","Fragments":["double,"]},{"Key":"is double,","Fragments":["not"]},{"Key":"Line 25","Fragments":["is"]},{"Key":"25 is","Fragments":["still"]},{"Key":"necessary, otherwise","Fragments":["looks"]},{"Key":"otherwise looks","Fragments":["great."]},{"Key":" @chaim-slm","Fragments":["It"]},{"Key":"@chaim-slm It","Fragments":["is"]},{"Key":"pretty minimal","Fragments":["and"]},{"Key":"minimal and","Fragments":["robust."]},{"Key":"and robust.","Fragments":["For"]},{"Key":"robust. For","Fragments":["example"]},{"Key":"example it","Fragments":["does"]},{"Key":"not mention","Fragments":["classes,"]},{"Key":"mention classes,","Fragments":["so"]},{"Key":"classes, so","Fragments":["I"]},{"Key":"not surprised","Fragments":["namespaces"]},{"Key":"surprised namespaces","Fragments":["are"]},{"Key":"not there.","Fragments":["In"]},{"Key":"there. In","Fragments":["general"]},{"Key":"general if","Fragments":["coding"]},{"Key":"if coding","Fragments":["style"]},{"Key":"than 3-4","Fragments":["pages"]},{"Key":"3-4 pages","Fragments":["it"]},{"Key":"pages it","Fragments":["is"]},{"Key":"Again, needs","Fragments":["`-std=c++14`."]},{"Key":" #if","Fragments":["defined(EXERCISM_RUN_ALL_TESTS)"]},{"Key":"line down","Fragments":["the"]},{"Key":"of \"uncommenting\"","Fragments":["each"]},{"Key":"\"uncommenting\" each","Fragments":["test."]},{"Key":"each test.","Fragments":["Up"]},{"Key":"test. Up","Fragments":["until"]},{"Key":"was passing","Fragments":["them"]},{"Key":"passing them","Fragments":["all."]},{"Key":"prevent direct","Fragments":["mutation"]},{"Key":"direct mutation","Fragments":["of"]},{"Key":"mutation of","Fragments":["the"]},{"Key":"the DB","Fragments":["by"]},{"Key":"DB by","Fragments":["outside"]},{"Key":"by outside","Fragments":["code,"]},{"Key":"outside code,","Fragments":["I"]},{"Key":"actual `studentRoster`","Fragments":["a"]},{"Key":"`studentRoster` a","Fragments":["private"]},{"Key":"private variable.","Fragments":["Also,"]},{"Key":"variable. Also,","Fragments":["I"]},{"Key":"some explanation","Fragments":["of"]},{"Key":"roster is","Fragments":["seemingly","a"]},{"Key":"is seemingly","Fragments":["erased"]},{"Key":"seemingly erased","Fragments":["after"]},{"Key":"erased after","Fragments":["each"]},{"Key":" EDIT:I","Fragments":["figured"]},{"Key":"EDIT:I figured","Fragments":["it"]},{"Key":"figured it","Fragments":["out,"]},{"Key":"out, it's","Fragments":["because"]},{"Key":"each instance","Fragments":["of"]},{"Key":"no relation","Fragments":["to"]},{"Key":"relation to","Fragments":["the"]},{"Key":"already used","Fragments":["`std::hex`,"]},{"Key":"used `std::hex`,","Fragments":["why"]},{"Key":"`std::hex`, why","Fragments":["not"]},{"Key":"use `std::stoi`","Fragments":["instead,"]},{"Key":"`std::stoi` instead,","Fragments":["it's"]},{"Key":"instead, it's","Fragments":["much"]},{"Key":"The spec","Fragments":["says:"]},{"Key":"\"The Hamming","Fragments":["distance"]},{"Key":"Hamming distance","Fragments":["is"]},{"Key":"sequences of","Fragments":["equal"]},{"Key":"of equal","Fragments":["length.","length"]},{"Key":"equal length.","Fragments":["This"]},{"Key":"length. This","Fragments":["means"]},{"Key":" that","Fragments":["based"]},{"Key":"the definition,","Fragments":["each"]},{"Key":"definition, each","Fragments":["language"]},{"Key":"language could","Fragments":["deal"]},{"Key":"could deal","Fragments":["with"]},{"Key":"with getting","Fragments":["sequences"]},{"Key":" Ignoring","Fragments":["different"]},{"Key":"Ignoring different","Fragments":["length"]},{"Key":"different length","Fragments":["is"]},{"Key":"it, although","Fragments":["returning"]},{"Key":"although returning","Fragments":["some"]},{"Key":"returning some","Fragments":["commonality"]},{"Key":"some commonality","Fragments":["for"]},{"Key":"commonality for","Fragments":["operation"]},{"Key":"for operation","Fragments":["that"]},{"Key":"operation that","Fragments":["is"]},{"Key":"defined imho","Fragments":["not"]},{"Key":"imho not","Fragments":["very"]},{"Key":"it. Returning","Fragments":["no"]},{"Key":"Returning no","Fragments":["commonality"]},{"Key":"no commonality","Fragments":["is"]},{"Key":"commonality is","Fragments":["another."]},{"Key":"is another.","Fragments":["Throwing"]},{"Key":"another. Throwing","Fragments":["exception"]},{"Key":"Throwing exception","Fragments":["is"]},{"Key":" @alverta-C","Fragments":["i"]},{"Key":"@alverta-C i","Fragments":["think"]},{"Key":"changed recently.","Fragments":["When"]},{"Key":"recently. When","Fragments":["i"]},{"Key":"When i","Fragments":["did"]},{"Key":"this challenge","Fragments":["you"]},{"Key":"challenge you","Fragments":["had"]},{"Key":"handle either","Fragments":["string"]},{"Key":"being short/long.","Fragments":["If"]},{"Key":"short/long. If","Fragments":["you"]},{"Key":"at his","Fragments":["test"]},{"Key":"his test","Fragments":["cases"]},{"Key":"are supposted","Fragments":["to"]},{"Key":"supposted to","Fragments":["throw"]},{"Key":"error ```std::domain_error```","Fragments":["if"]},{"Key":"```std::domain_error``` if","Fragments":["sizes"]},{"Key":"if sizes","Fragments":["don't"]},{"Key":"sizes don't","Fragments":["match."]},{"Key":" Recursively","Fragments":["search"]},{"Key":"Recursively search","Fragments":["for"]},{"Key":"for prime","Fragments":["factors"]},{"Key":"factors each","Fragments":["time"]},{"Key":"any factor.","Fragments":["This"]},{"Key":"factor. This","Fragments":["ends"]},{"Key":"This ends","Fragments":["up"]},{"Key":"up traversing","Fragments":["a"]},{"Key":"prime factor","Fragments":["tree."]},{"Key":"factor tree.","Fragments":["The"]},{"Key":"tree. The","Fragments":["results"]},{"Key":"are reconstructed","Fragments":["as"]},{"Key":"reconstructed as","Fragments":["each"]},{"Key":"not for","Fragments":["C++."]},{"Key":"C++. I'm","Fragments":["done"]},{"Key":"I'm done","Fragments":["with"]},{"Key":"New implementation","Fragments":["that"]},{"Key":"just wraps","Fragments":["the"]},{"Key":"wraps the","Fragments":["C++11"]},{"Key":"C++11 ```std::stoi```","Fragments":["which"]},{"Key":"```std::stoi``` which","Fragments":["makes"]},{"Key":" `for","Fragments":["(int"]},{"Key":"= 3,","Fragments":["mag"]},{"Key":"3, mag","Fragments":["="]},{"Key":"mag =","Fragments":["1000;"]},{"Key":"= 1000;","Fragments":["i"]},{"Key":"1000; i","Fragments":["\u003e="]},{"Key":"0; i--,","Fragments":["mag"]},{"Key":"i--, mag","Fragments":["/="]},{"Key":"mag /=","Fragments":["10)`"]},{"Key":" \u003cb\u003e\u003ch1\u003e","Fragments":["Iteration"]},{"Key":"\u003cb\u003e\u003ch1\u003e Iteration","Fragments":["2:\u003c/h1\u003e\u003c/b\u003e"]},{"Key":" Trimmed","Fragments":["down"]},{"Key":"Trimmed down","Fragments":["the"]},{"Key":"the fat.","Fragments":["removed"]},{"Key":"fat. removed","Fragments":["unnecessary"]},{"Key":"made 'if'","Fragments":["blocks"]},{"Key":"'if' blocks","Fragments":["smaller."]},{"Key":"code properly","Fragments":["as"]},{"Key":"properly as","Fragments":["a"]},{"Key":"the help!","Fragments":["Thanks."]},{"Key":"reworked this","Fragments":["one"]},{"Key":"one a","Fragments":["number"]},{"Key":"number times","Fragments":["trying"]},{"Key":"times trying","Fragments":["to"]},{"Key":"optimize everyting.","Fragments":["I'm"]},{"Key":"everyting. I'm","Fragments":["still"]},{"Key":"sure I'm","Fragments":["happy","missing"]},{"Key":"got everything,","Fragments":["but"]},{"Key":"everything, but","Fragments":["it"]},{"Key":"it felt","Fragments":["that"]},{"Key":"felt that","Fragments":["if"]},{"Key":"I pushed","Fragments":["any"]},{"Key":"pushed any","Fragments":["more,"]},{"Key":"any more,","Fragments":["I'd","but"]},{"Key":"more, I'd","Fragments":["be"]},{"Key":"taking out","Fragments":["single"]},{"Key":"out single","Fragments":["words"]},{"Key":"single words","Fragments":["for"]},{"Key":"words for","Fragments":["no"]},{"Key":"also posted","Fragments":["a"]},{"Key":"a polymorphic","Fragments":["solution,"]},{"Key":"polymorphic solution,","Fragments":["but"]},{"Key":"believe it","Fragments":["really","or"]},{"Key":"really fits","Fragments":["into"]},{"Key":"problem. Or","Fragments":["at"]},{"Key":"at least,","Fragments":["I"]},{"Key":"it fit","Fragments":["within"]},{"Key":"fit within","Fragments":["the"]},{"Key":"solution. I'm","Fragments":["interested"]},{"Key":"in feedback","Fragments":["on"]},{"Key":"how they've","Fragments":["brought"]},{"Key":"they've brought","Fragments":["something"]},{"Key":"brought something","Fragments":["up."]},{"Key":" Really,","Fragments":["I'm"]},{"Key":"Really, I'm","Fragments":["open"]},{"Key":"won't pass","Fragments":["the"]},{"Key":"test. Take","Fragments":["a"]},{"Key":"the subtle","Fragments":["change"]},{"Key":"subtle change","Fragments":["in"]},{"Key":"2nd bottle","Fragments":["of"]},{"Key":"bottle of","Fragments":["beer."]},{"Key":"good. You","Fragments":["made"]},{"Key":"same decision","Fragments":["I"]},{"Key":"decision I","Fragments":["did"]},{"Key":"store both","Fragments":["compare"]},{"Key":"both compare","Fragments":["versions"]},{"Key":"compare versions","Fragments":["rather"]},{"Key":"versions rather","Fragments":["than"]},{"Key":"than recompute","Fragments":["them"]},{"Key":"recompute them","Fragments":["each"]},{"Key":"them each","Fragments":["time."]},{"Key":"but look","Fragments":["at"]},{"Key":"at moving","Fragments":["your"]},{"Key":"moving your","Fragments":["for"]},{"Key":"to range","Fragments":["based"]},{"Key":"the prefered","Fragments":["style"]},{"Key":"prefered style","Fragments":["if"]},{"Key":"style if","Fragments":["you're"]},{"Key":"a c++11","Fragments":["compatible"]},{"Key":"c++11 compatible","Fragments":["compiler."]},{"Key":"first c++","Fragments":["code"]},{"Key":"c++ code","Fragments":["after"]},{"Key":"after 3","Fragments":["years"]},{"Key":"3 years","Fragments":["developing"]},{"Key":"years developing","Fragments":["Linux"]},{"Key":"developing Linux","Fragments":["kernel"]},{"Key":"kernel drivers","Fragments":["and"]},{"Key":"drivers and","Fragments":["bare"]},{"Key":"and bare","Fragments":["metal"]},{"Key":"metal on","Fragments":["arm,"]},{"Key":"on arm,","Fragments":["pic"]},{"Key":"arm, pic","Fragments":["and"]},{"Key":"pic and","Fragments":["avr,"]},{"Key":"and avr,","Fragments":["all"]},{"Key":"avr, all","Fragments":["in"]},{"Key":"in c","Fragments":["or"]},{"Key":"c or","Fragments":["asm..."]},{"Key":"or asm...","Fragments":["So"]},{"Key":"asm... So","Fragments":["be"]},{"Key":"So be","Fragments":["gentle."]},{"Key":"be gentle.","Fragments":["I"]},{"Key":"gentle. I","Fragments":["almost"]},{"Key":"almost forgot","Fragments":["what"]},{"Key":"what class","Fragments":["is,"]},{"Key":"class is,","Fragments":["and"]},{"Key":"are objects.","Fragments":["And"]},{"Key":"objects. And","Fragments":["this"]},{"Key":"first encounter","Fragments":["with"]},{"Key":"encounter with","Fragments":["unit"]},{"Key":"with unit","Fragments":["tests."]},{"Key":"write whole","Fragments":["application"]},{"Key":"whole application","Fragments":["and"]},{"Key":"then compile,","Fragments":["fix"]},{"Key":"compile, fix","Fragments":["typos"]},{"Key":"fix typos","Fragments":["recompile,"]},{"Key":"typos recompile,","Fragments":["try"]},{"Key":"recompile, try","Fragments":["couple"]},{"Key":"try couple","Fragments":["of"]},{"Key":"is it...","Fragments":["If"]},{"Key":"it... If","Fragments":["problem"]},{"Key":"If problem","Fragments":["is"]},{"Key":"bigger I","Fragments":["try"]},{"Key":"try develop","Fragments":["with"]},{"Key":"develop with","Fragments":["prototyping."]},{"Key":"with prototyping.","Fragments":["TDD"]},{"Key":"prototyping. TDD","Fragments":["is"]},{"Key":"TDD is","Fragments":["not"]},{"Key":"my cup","Fragments":["of"]},{"Key":"cup of","Fragments":["tee"]},{"Key":"of tee","Fragments":["I"]},{"Key":"tee I","Fragments":["sure"]},{"Key":"I sure","Fragments":["will"]},{"Key":"sure will","Fragments":["try"]},{"Key":"try my","Fragments":["best."]},{"Key":"is ugly,","Fragments":["but"]},{"Key":"ugly, but","Fragments":["it"]},{"Key":"for given","Fragments":["tests."]},{"Key":"given tests.","Fragments":["I"]},{"Key":"regex but","Fragments":["I"]},{"Key":"c++. I","Fragments":["tried"]},{"Key":"much c++11","Fragments":["functions"]},{"Key":"c++11 functions","Fragments":["as"]},{"Key":"such simple","Fragments":["problem."]},{"Key":"simple problem.","Fragments":["There"]},{"Key":"problem. There","Fragments":["is"]},{"Key":"huge room","Fragments":["for"]},{"Key":"for improvements,","Fragments":["like"]},{"Key":"improvements, like","Fragments":["put"]},{"Key":"like put","Fragments":["things"]},{"Key":"put things","Fragments":["in"]},{"Key":"different methods,...","Fragments":["well"]},{"Key":"methods,... well","Fragments":["more"]},{"Key":"well more","Fragments":["object"]},{"Key":"more object","Fragments":["oriented."]},{"Key":"couple tests","Fragments":["that"]},{"Key":"to pass,","Fragments":["but"]},{"Key":"it's looking","Fragments":["good"]},{"Key":"looking good","Fragments":["so"]},{"Key":"good so","Fragments":["far."]},{"Key":"so far.","Fragments":["I"]},{"Key":"far. I","Fragments":["originally"]},{"Key":"some errors","Fragments":["in"]},{"Key":"in mine","Fragments":["as"]},{"Key":"mine as","Fragments":["well"]},{"Key":"length wasn't","Fragments":["equal,"]},{"Key":"wasn't equal,","Fragments":["but"]},{"Key":"equal, but","Fragments":["as"]},{"Key":"as you'll","Fragments":["see"]},{"Key":"final two","Fragments":["tests,"]},{"Key":"two tests,","Fragments":["you"]},{"Key":"only compare","Fragments":["when"]},{"Key":"compare when","Fragments":["you"]},{"Key":"the domain_error","Fragments":["exception,"]},{"Key":"domain_error exception,","Fragments":["and"]},{"Key":"exception, and","Fragments":["I"]},{"Key":"learned some","Fragments":["things"]},{"Key":"things researching","Fragments":["what"]},{"Key":"researching what","Fragments":["it"]},{"Key":"does and","Fragments":["when"]},{"Key":"Minor nit,","Fragments":["but"]},{"Key":"declare i","Fragments":["within"]},{"Key":"i within","Fragments":["your"]},{"Key":"it anywhere","Fragments":["else"]},{"Key":"anywhere else","Fragments":["within"]},{"Key":"else within","Fragments":["your"]},{"Key":"well that","Fragments":["it"]},{"Key":"falls out","Fragments":["of"]},{"Key":"Hi Chris.","Fragments":["Thanks"]},{"Key":"Chris. Thanks","Fragments":["for"]},{"Key":"think our","Fragments":["hamming_test.cpp"]},{"Key":"our hamming_test.cpp","Fragments":["files"]},{"Key":"hamming_test.cpp files","Fragments":["might"]},{"Key":"just double","Fragments":["checked"]},{"Key":"double checked","Fragments":["and"]},{"Key":"are passing.","Fragments":["In"]},{"Key":"passing. In","Fragments":["my"]},{"Key":"version there","Fragments":["are"]},{"Key":"are nine","Fragments":["tests"]},{"Key":"nine tests","Fragments":["and"]},{"Key":"last two","Fragments":["tests"]},{"Key":"are named","Fragments":["\"large_hamming_distance\""]},{"Key":"named \"large_hamming_distance\"","Fragments":["and"]},{"Key":"\"large_hamming_distance\" and","Fragments":["\"hamming_distance_in_very_long_strand\"."]},{"Key":"and \"hamming_distance_in_very_long_strand\".","Fragments":["Does"]},{"Key":"\"hamming_distance_in_very_long_strand\". Does","Fragments":["that"]},{"Key":"match up","Fragments":["with"]},{"Key":"your version?","Fragments":["I"]},{"Key":"version? I","Fragments":["just"]},{"Key":"just ran","Fragments":["\"exercism"]},{"Key":"ran \"exercism","Fragments":["fetch\""]},{"Key":"\"exercism fetch\"","Fragments":["to"]},{"Key":"fetch\" to","Fragments":["make"]},{"Key":"latest tests","Fragments":["and"]},{"Key":"github repo","Fragments":["too."]},{"Key":"repo too.","Fragments":["It"]},{"Key":"too. It","Fragments":["appears"]},{"Key":"It appears","Fragments":["I"]},{"Key":"appears I","Fragments":["have"]},{"Key":"latest version","Fragments":["at"]},{"Key":"version at","Fragments":["the"]},{"Key":"this writing.","Fragments":["That's"]},{"Key":"writing. That's","Fragments":["one"]},{"Key":"about exercism.io","Fragments":["I"]},{"Key":"exercism.io I","Fragments":["have"]},{"Key":"bit frustrating","Fragments":["(but"]},{"Key":"frustrating (but","Fragments":["I"]},{"Key":"still considered","Fragments":["to"]},{"Key":"be within","Fragments":["the"]},{"Key":"the feature","Fragments":["set)"]},{"Key":"feature set)","Fragments":["is"]},{"Key":"set) is","Fragments":["that"]},{"Key":"your tests","Fragments":["passing"]},{"Key":"passing and","Fragments":["submit"]},{"Key":"but later","Fragments":["on,"]},{"Key":"later on,","Fragments":["when"]},{"Key":"on, when","Fragments":["you"]},{"Key":"you update,","Fragments":["the"]},{"Key":"update, the","Fragments":["unit"]},{"Key":"have changed.","Fragments":["This"]},{"Key":"changed. This","Fragments":["means"]},{"Key":"have previously","Fragments":["submitted"]},{"Key":"previously submitted","Fragments":["no"]},{"Key":"submitted no","Fragments":["longer"]},{"Key":"longer passes","Fragments":["all"]},{"Key":"might lead","Fragments":["nitpickers"]},{"Key":"lead nitpickers","Fragments":["to"]},{"Key":"nitpickers to","Fragments":["think"]},{"Key":"the submitter","Fragments":["wasn't"]},{"Key":"submitter wasn't","Fragments":["paying"]},{"Key":"wasn't paying","Fragments":["attention"]},{"Key":"paying attention","Fragments":["or"]},{"Key":"attention or","Fragments":["what"]},{"Key":"you. Ok,","Fragments":["rant"]},{"Key":"Ok, rant","Fragments":["over."]},{"Key":"how domain_error","Fragments":["is"]},{"Key":"domain_error is","Fragments":["supposed"]},{"Key":"be used.","Fragments":["I"]},{"Key":"used. I","Fragments":["followed"]},{"Key":"followed some","Fragments":["examples"]},{"Key":"some examples","Fragments":["online"]},{"Key":"examples online","Fragments":["but"]},{"Key":"online but","Fragments":["the"]},{"Key":"the validity","Fragments":["of"]},{"Key":"validity of","Fragments":["said"]},{"Key":"said examples","Fragments":["might"]},{"Key":"examples might","Fragments":["be"]},{"Key":"be questionable.","Fragments":["I"]},{"Key":"questionable. I","Fragments":["just"]},{"Key":"the bare","Fragments":["minimum"]},{"Key":"minimum in","Fragments":["order"]},{"Key":"satisfy the","Fragments":["unit"]},{"Key":"a domain_error","Fragments":["to","rather"]},{"Key":"domain_error to","Fragments":["be"]},{"Key":"variable initialization.","Fragments":["The"]},{"Key":"initialization. The","Fragments":["language"]},{"Key":"The language","Fragments":["that"]},{"Key":"am most","Fragments":["proficient"]},{"Key":"most proficient","Fragments":["at"]},{"Key":"proficient at","Fragments":["is"]},{"Key":"is JavaScript","Fragments":["and"]},{"Key":"JavaScript and","Fragments":["the"]},{"Key":"convention there","Fragments":["is"]},{"Key":"initialize all","Fragments":["variables"]},{"Key":"all variables","Fragments":["near"]},{"Key":"variables near","Fragments":["or"]},{"Key":"near or","Fragments":["as"]},{"Key":"possible. The","Fragments":["idea"]},{"Key":"improves legibility","Fragments":["as"]},{"Key":"legibility as","Fragments":["well"]},{"Key":"as inherently","Fragments":["avoids"]},{"Key":"inherently avoids","Fragments":["some"]},{"Key":"avoids some","Fragments":["annoying"]},{"Key":"some annoying","Fragments":["JavaScript"]},{"Key":"annoying JavaScript","Fragments":["parsing"]},{"Key":"JavaScript parsing","Fragments":["quirks."]},{"Key":"parsing quirks.","Fragments":["The"]},{"Key":"quirks. The","Fragments":["thing"]},{"Key":"I keep","Fragments":["forgetting"]},{"Key":"keep forgetting","Fragments":["is"]},{"Key":"forgetting is","Fragments":["that"]},{"Key":"is block","Fragments":["scoped"]},{"Key":"block scoped","Fragments":["where"]},{"Key":"scoped where","Fragments":["as"]},{"Key":"where as","Fragments":["JavaScript"]},{"Key":"as JavaScript","Fragments":["is"]},{"Key":"JavaScript is","Fragments":["lexical"]},{"Key":"is lexical","Fragments":["with"]},{"Key":"lexical with","Fragments":["regard"]},{"Key":"with regard","Fragments":["to"]},{"Key":"regard to","Fragments":["scope."]},{"Key":"to scope.","Fragments":["I'll"]},{"Key":"scope. I'll","Fragments":["have"]},{"Key":"mind. Old","Fragments":["habits"]},{"Key":"Old habits","Fragments":["die"]},{"Key":"habits die","Fragments":["hard."]},{"Key":"Updated as","Fragments":["per"]},{"Key":"per user","Fragments":["chrishamilton's"]},{"Key":"user chrishamilton's","Fragments":["suggestions."]},{"Key":"absolutely right","Fragments":["about"]},{"Key":"removed my","Fragments":["hamming_test.cpp"]},{"Key":"my hamming_test.cpp","Fragments":["and"]},{"Key":"hamming_test.cpp and","Fragments":["did"]},{"Key":"and did","Fragments":["a"]},{"Key":"a fetch,","Fragments":["and"]},{"Key":"fetch, and","Fragments":["it"]},{"Key":"it brought","Fragments":["it"]},{"Key":"brought it","Fragments":["a"]},{"Key":"different hamming_test.cpp","Fragments":["than"]},{"Key":"hamming_test.cpp than","Fragments":["I"]},{"Key":"I had.","Fragments":["One"]},{"Key":"had. One","Fragments":["that"]},{"Key":"One that","Fragments":["threw"]},{"Key":"that threw","Fragments":["a"]},{"Key":"threw a","Fragments":["domain_error"]},{"Key":"domain_error rather","Fragments":["than"]},{"Key":"than ignoring","Fragments":["the"]},{"Key":"ignoring the","Fragments":["extra"]},{"Key":"extra length.","Fragments":["My"]},{"Key":"length. My","Fragments":["appologies."]},{"Key":"My appologies.","Fragments":["Your"]},{"Key":"appologies. Your","Fragments":["tests"]},{"Key":"Your tests","Fragments":["run"]},{"Key":"tests run","Fragments":["perfect"]},{"Key":"run perfect","Fragments":["with"]},{"Key":"perfect with","Fragments":["the"]},{"Key":"the update.","Fragments":["I"]},{"Key":"update. I","Fragments":["ran"]},{"Key":"a readme","Fragments":["before,"]},{"Key":"readme before,","Fragments":["but"]},{"Key":"real issues","Fragments":["with","once"]},{"Key":"problem other","Fragments":["then"]},{"Key":"then discovering","Fragments":["that"]},{"Key":"discovering that","Fragments":["the"]},{"Key":"map []","Fragments":["operator"]},{"Key":"operator doesn't","Fragments":["have"]},{"Key":"const implementation.","Fragments":["I"]},{"Key":"implementation. I","Fragments":["could","would"]},{"Key":"was storing","Fragments":["the"]},{"Key":"data or","Fragments":["having"]},{"Key":"or having","Fragments":["it"]},{"Key":"having it","Fragments":["recompute"]},{"Key":"it recompute","Fragments":["on"]},{"Key":"recompute on","Fragments":["the"]},{"Key":"a count","Fragments":["call"]},{"Key":"count call","Fragments":["was"]},{"Key":"call was","Fragments":["made,"]},{"Key":"was made,","Fragments":["but"]},{"Key":"now, there","Fragments":["should"]},{"Key":"be some","Fragments":["error"]},{"Key":"error checking","Fragments":["on","your"]},{"Key":"checking on","Fragments":["the"]},{"Key":"contains non-dna","Fragments":["thingys."]},{"Key":"original submission","Fragments":["I"]},{"Key":"submission I","Fragments":["attempted"]},{"Key":"I attempted","Fragments":["to"]},{"Key":"to catalog","Fragments":["all"]},{"Key":"catalog all","Fragments":["previous"]},{"Key":"all previous","Fragments":["primes"]},{"Key":"previous primes","Fragments":["to"]},{"Key":"ensure the","Fragments":["current"]},{"Key":"current number","Fragments":["was"]},{"Key":"not divisable","Fragments":["by"]},{"Key":"divisable by","Fragments":["one"]},{"Key":"trying for","Fragments":["a"]},{"Key":"reverse Sieve","Fragments":["type"]},{"Key":"Sieve type","Fragments":["of"]},{"Key":"of idea","Fragments":["but"]},{"Key":"idea but","Fragments":["I"]},{"Key":"the brute","Fragments":["force"]},{"Key":"force method","Fragments":["was"]},{"Key":"actually performing","Fragments":["better"]},{"Key":"performing better","Fragments":["for"]},{"Key":"name being","Fragments":["used"]},{"Key":"twice, I","Fragments":["had"]},{"Key":"global `allRobotNames`","Fragments":["vector"]},{"Key":"`allRobotNames` vector","Fragments":["variable"]},{"Key":"vector variable","Fragments":["where"]},{"Key":"variable where","Fragments":["used"]},{"Key":"where used","Fragments":["names"]},{"Key":"are put","Fragments":["into."]},{"Key":"put into.","Fragments":["Then,"]},{"Key":"into. Then,","Fragments":["when"]},{"Key":"Then, when","Fragments":["the"]},{"Key":"robot is","Fragments":["reset,"]},{"Key":"is reset,","Fragments":["before"]},{"Key":"reset, before","Fragments":["the"]},{"Key":"is assigned,","Fragments":["the"]},{"Key":"assigned, the","Fragments":["global"]},{"Key":"global used","Fragments":["names"]},{"Key":"with simple","Fragments":["substitution,"]},{"Key":"simple substitution,","Fragments":["and"]},{"Key":"substitution, and","Fragments":["that's"]},{"Key":"do. When","Fragments":["it"]},{"Key":"last test,","Fragments":["I","now"]},{"Key":"test, I","Fragments":["justhad"]},{"Key":"I justhad","Fragments":["to"]},{"Key":"justhad to","Fragments":["call"]},{"Key":"suite has","Fragments":["changed"]},{"Key":"has changed","Fragments":["recently","in"]},{"Key":"changed recently","Fragments":["and"]},{"Key":"recently and","Fragments":["I've"]},{"Key":"been looking","Fragments":["at"]},{"Key":"local copy,","Fragments":["not"]},{"Key":"copy, not","Fragments":["the"]},{"Key":"You're now","Fragments":["supposed"]},{"Key":"now supposed","Fragments":["to"]},{"Key":"std::domain_error if","Fragments":["the","the","the","the","the","the","the","the","the"]},{"Key":"first experience","Fragments":["in"]},{"Key":"few years.","Fragments":["Tried"]},{"Key":"years. Tried","Fragments":["to"]},{"Key":"to replicate","Fragments":["my"]},{"Key":"replicate my","Fragments":["Python"]},{"Key":"Python implementation","Fragments":["by"]},{"Key":"implementation by","Fragments":["writing"]},{"Key":"own version","Fragments":["of"]},{"Key":"Python is_upper()","Fragments":["method."]},{"Key":"```std::pow``` thanks","Fragments":["to"]},{"Key":"Interesting implementation.","Fragments":["Looks"]},{"Key":"implementation. Looks","Fragments":["pretty"]},{"Key":"good, though","Fragments":["I"]},{"Key":"string multiple","Fragments":["times"]},{"Key":"suggest trying","Fragments":["to"]},{"Key":"same results","Fragments":["with"]},{"Key":"results with","Fragments":["only"]},{"Key":"iteration through","Fragments":["the"]},{"Key":"boost builtin","Fragments":["functions?"]},{"Key":"straightforward exercise","Fragments":["until"]},{"Key":"exercise until","Fragments":["I"]},{"Key":"got to","Fragments":["the"]},{"Key":"was stumped","Fragments":["for"]},{"Key":"stumped for","Fragments":["a"]},{"Key":"of days.","Fragments":["I"]},{"Key":"days. I","Fragments":["managed"]},{"Key":"test passing","Fragments":["with"]},{"Key":"passing with","Fragments":["an"]},{"Key":"an conversion","Fragments":["operator,"]},{"Key":"conversion operator,","Fragments":["but"]},{"Key":"suspect that","Fragments":["I"]},{"Key":"I over","Fragments":["engineered"]},{"Key":"over engineered","Fragments":["a"]},{"Key":"engineered a","Fragments":["solution"]},{"Key":"something simplier","Fragments":["that"]},{"Key":"simplier that","Fragments":["I"]},{"Key":"- removed","Fragments":["some"]},{"Key":"removed some","Fragments":["debug"]},{"Key":"- fixed","Fragments":["up"]},{"Key":"fixed up","Fragments":["my"]},{"Key":"my conversion","Fragments":["operator"]},{"Key":"operator call","Fragments":["so"]},{"Key":"call so","Fragments":["that"]},{"Key":"a round","Fragments":["about"]},{"Key":"round about","Fragments":["way"]},{"Key":"Wanted this","Fragments":["to"]},{"Key":"be as","Fragments":["straightforward"]},{"Key":"possible. Code's","Fragments":["commented"]},{"Key":"Code's commented","Fragments":["or"]},{"Key":"commented or","Fragments":["otherwise"]},{"Key":"otherwise obvious,","Fragments":["so"]},{"Key":"it's hard","Fragments":["to"]},{"Key":" `main()`","Fragments":["starts"]},{"Key":"`main()` starts","Fragments":["declaring"]},{"Key":"starts declaring","Fragments":["`sInput`"]},{"Key":"declaring `sInput`","Fragments":["and"]},{"Key":"`sInput` and","Fragments":["taking"]},{"Key":"and taking","Fragments":["user","time"]},{"Key":"taking user","Fragments":["input."]},{"Key":"user input.","Fragments":["After"]},{"Key":"input. After","Fragments":["that,"]},{"Key":"that, it","Fragments":["strips"]},{"Key":"it strips","Fragments":["all"]},{"Key":"strips all","Fragments":["whitespace"]},{"Key":"length equals","Fragments":["zero"]},{"Key":"equals zero","Fragments":["(in"]},{"Key":"zero (in","Fragments":["which"]},{"Key":"(in which","Fragments":["case","case,","case","case"]},{"Key":"was all","Fragments":["whitespace"]},{"Key":"whitespace or","Fragments":["nothing"]},{"Key":"or nothing","Fragments":["at"]},{"Key":"it outputs","Fragments":["\"Fine."]},{"Key":"outputs \"Fine.","Fragments":["Be"]},{"Key":"way!\" and","Fragments":["awaits"]},{"Key":"and awaits","Fragments":["further"]},{"Key":"awaits further","Fragments":["input)."]},{"Key":"further input).","Fragments":["If"]},{"Key":"input). If","Fragments":["it"]},{"Key":"calls `nStringType(sInput)`","Fragments":["to"]},{"Key":"`nStringType(sInput)` to","Fragments":["check"]},{"Key":"question, yell","Fragments":["or"]},{"Key":"yell or","Fragments":["other"]},{"Key":"In `nStringType`,","Fragments":["we"]},{"Key":"`nStringType`, we","Fragments":["have"]},{"Key":"char for","Fragments":["the"]},{"Key":"be punctuation","Fragments":["(remember,"]},{"Key":"punctuation (remember,","Fragments":["main()"]},{"Key":"(remember, main()","Fragments":["stripped"]},{"Key":"main() stripped","Fragments":["the"]},{"Key":"stripped the","Fragments":["whitespace)."]},{"Key":"the whitespace).","Fragments":["Then"]},{"Key":"whitespace). Then","Fragments":["it"]},{"Key":"it duplicates","Fragments":["`sString`"]},{"Key":"duplicates `sString`","Fragments":["and"]},{"Key":"`sString` and","Fragments":["capitalizes"]},{"Key":"and capitalizes","Fragments":["`sStringUpper`,"]},{"Key":"capitalizes `sStringUpper`,","Fragments":["as"]},{"Key":"`sStringUpper`, as","Fragments":["well"]},{"Key":"as removing","Fragments":["numbers"]},{"Key":"removing numbers","Fragments":["from"]},{"Key":"numbers from","Fragments":["the"]},{"Key":"latter (this","Fragments":["makes"]},{"Key":"(this makes","Fragments":["number-only"]},{"Key":"makes number-only","Fragments":["strings"]},{"Key":"number-only strings","Fragments":["return"]},{"Key":"strings return","Fragments":["OTHER"]},{"Key":"return OTHER","Fragments":["instead"]},{"Key":"OTHER instead","Fragments":["of"]},{"Key":"of YELL),","Fragments":["to"]},{"Key":"YELL), to","Fragments":["later"]},{"Key":"to later","Fragments":["check"]},{"Key":"later check","Fragments":["if"]},{"Key":"both are","Fragments":["the"]},{"Key":"which case,","Fragments":["input"]},{"Key":"case, input","Fragments":["was"]},{"Key":"was CAPITALIZED","Fragments":["and"]},{"Key":"CAPITALIZED and","Fragments":["is"]},{"Key":"is therefore","Fragments":["a"]},{"Key":"therefore a","Fragments":["yell)."]},{"Key":"yell). Then","Fragments":["it"]},{"Key":"mark (if","Fragments":["true,"]},{"Key":"(if true,","Fragments":["returns"]},{"Key":"true, returns","Fragments":["question),"]},{"Key":"returns question),","Fragments":["and"]},{"Key":"question), and","Fragments":["if"]},{"Key":"that's false,","Fragments":["checks"]},{"Key":"false, checks","Fragments":["whether"]},{"Key":"whether either","Fragments":["the"]},{"Key":"a '!'","Fragments":["or"]},{"Key":"'!' or","Fragments":["the"]},{"Key":"is capitalized).","Fragments":["It"]},{"Key":"capitalized). It","Fragments":["then"]},{"Key":"It then","Fragments":["returns"]},{"Key":"then returns","Fragments":["YELL"]},{"Key":"returns YELL","Fragments":["if"]},{"Key":"YELL if","Fragments":["it's"]},{"Key":"and OTHER","Fragments":["if"]},{"Key":"OTHER if","Fragments":["it's"]},{"Key":"iteration, simply","Fragments":["made"]},{"Key":"simply made","Fragments":["the"]},{"Key":"program quit","Fragments":["when"]},{"Key":"quit when","Fragments":["the"]},{"Key":"user typed","Fragments":["\"/exit\"."]},{"Key":"typed \"/exit\".","Fragments":["For"]},{"Key":"\"/exit\". For","Fragments":["a"]},{"Key":"full description","Fragments":["of"]},{"Key":"program, refer","Fragments":["to"]},{"Key":"to Iteration","Fragments":["#2"]},{"Key":" Okay,","Fragments":["so"]},{"Key":"Okay, so","Fragments":["being"]},{"Key":"so being","Fragments":["a"]},{"Key":"a beginner","Fragments":["myself,"]},{"Key":"beginner myself,","Fragments":["I"]},{"Key":"missed some","Fragments":["stuff,"]},{"Key":"some stuff,","Fragments":["but"]},{"Key":"stuff, but","Fragments":["I"]},{"Key":"I spotted","Fragments":["some"]},{"Key":"spotted some","Fragments":["problems"]},{"Key":"code. Please","Fragments":["don't"]},{"Key":"don't hesitate","Fragments":["to"]},{"Key":"hesitate to","Fragments":["correct"]},{"Key":"correct me","Fragments":["back"]},{"Key":"back if","Fragments":["I'm"]},{"Key":" Right","Fragments":["off"]},{"Key":"Right off","Fragments":["the"]},{"Key":"the bat,","Fragments":["`"]},{"Key":"bat, `","Fragments":["isWhitespace`"]},{"Key":"` isWhitespace`","Fragments":["looks"]},{"Key":"isWhitespace` looks","Fragments":["weird."]},{"Key":"looks weird.","Fragments":["It'll"]},{"Key":"weird. It'll","Fragments":["always"]},{"Key":"It'll always","Fragments":["return"]},{"Key":"return false,","Fragments":["because"]},{"Key":"false, because","Fragments":["the"]},{"Key":"runs the","Fragments":["loop"]},{"Key":"false. Then","Fragments":["there's"]},{"Key":"Then there's","Fragments":["`isUpper`,"]},{"Key":"there's `isUpper`,","Fragments":["in"]},{"Key":"`isUpper`, in","Fragments":["which"]},{"Key":"which you've","Fragments":["made"]},{"Key":"you've made","Fragments":["the"]},{"Key":" `hey()`","Fragments":["looks"]},{"Key":"`hey()` looks","Fragments":["good,"]},{"Key":"the `==","Fragments":["true`"]},{"Key":"`== true`","Fragments":["is"]},{"Key":"true` is","Fragments":["redundant"]},{"Key":"is redundant","Fragments":["in"]},{"Key":"redundant in","Fragments":["all"]},{"Key":"three cases,","Fragments":["because"]},{"Key":"cases, because","Fragments":["the"]},{"Key":"statement will","Fragments":["execute"]},{"Key":"will execute","Fragments":["if"]},{"Key":"parentheses is","Fragments":["true"]},{"Key":"true -","Fragments":["you"]},{"Key":"that's true,","Fragments":["because"]},{"Key":"true, because","Fragments":["the"]},{"Key":"the _the","Fragments":["boolean"]},{"Key":"_the boolean","Fragments":["function"]},{"Key":"boolean function","Fragments":["will"]},{"Key":"return 1","Fragments":["if","if"]},{"Key":"it's not_.","Fragments":["You're"]},{"Key":"not_. You're","Fragments":["just"]},{"Key":"You're just","Fragments":["asking"]},{"Key":"asking if","Fragments":["`1"]},{"Key":"if `1","Fragments":["=="]},{"Key":"`1 ==","Fragments":["1`"]},{"Key":"== 1`","Fragments":["(in","(in"]},{"Key":"1` (in","Fragments":["which","which"]},{"Key":"returns 1,","Fragments":["and"]},{"Key":"1, and","Fragments":["both"]},{"Key":"be true)","Fragments":["or"]},{"Key":"true) or","Fragments":["if"]},{"Key":"if `0","Fragments":["=="]},{"Key":"`0 ==","Fragments":["1`"]},{"Key":"returns 0,","Fragments":["and"]},{"Key":"be false).","Fragments":["You're"]},{"Key":"false). You're","Fragments":["also"]},{"Key":"You're also","Fragments":["missing","forcing"]},{"Key":"also missing","Fragments":["a"]},{"Key":"a parentheses","Fragments":["on"]},{"Key":"parentheses on","Fragments":["line"]},{"Key":"20, which","Fragments":["will"]},{"Key":"program fail","Fragments":["to"]},{"Key":"Last but","Fragments":["not"]},{"Key":"least, you","Fragments":["have"]},{"Key":"have `main()`,","Fragments":["which"]},{"Key":"`main()`, which","Fragments":["has"]},{"Key":"one problem","Fragments":["and","only:"]},{"Key":"problem only:","Fragments":["it"]},{"Key":"only: it","Fragments":["doesn't"]},{"Key":"doesn't output","Fragments":["anything."]},{"Key":"output anything.","Fragments":["`hey()`"]},{"Key":"anything. `hey()`","Fragments":["is"]},{"Key":"`hey()` is","Fragments":["called"]},{"Key":"that's it,","Fragments":["nothing"]},{"Key":"it, nothing","Fragments":["else"]},{"Key":"nothing else","Fragments":["happens."]},{"Key":"else happens.","Fragments":["`hey()`"]},{"Key":"happens. `hey()`","Fragments":["will"]},{"Key":"`hey()` will","Fragments":["return"]},{"Key":"and `main()`","Fragments":["won't"]},{"Key":"`main()` won't","Fragments":["do"]},{"Key":"won't do","Fragments":["anything"]},{"Key":"The easiest","Fragments":["way"]},{"Key":"easiest way","Fragments":["to"]},{"Key":"24 to","Fragments":["`std::cout"]},{"Key":"to `std::cout","Fragments":["\u003c\u003c"]},{"Key":"`std::cout \u003c\u003c","Fragments":["hey();`"]},{"Key":"\u003c\u003c hey();`","Fragments":["instead,"]},{"Key":"hey();` instead,","Fragments":["but"]},{"Key":"instead, but","Fragments":["I'd"]},{"Key":"recommend against","Fragments":["it."]},{"Key":"against it.","Fragments":["If"]},{"Key":"all `main()`","Fragments":["does"]},{"Key":"`main()` does","Fragments":["is"]},{"Key":"is call","Fragments":["a"]},{"Key":"function, why","Fragments":["don't"]},{"Key":"why don't","Fragments":["you"]},{"Key":"take `hey()`","Fragments":["out"]},{"Key":"`hey()` out","Fragments":["of"]},{"Key":"the equation","Fragments":["and"]},{"Key":"equation and","Fragments":["just"]},{"Key":"its code","Fragments":["in"]},{"Key":"you! Great","Fragments":["tips"]},{"Key":"iteration, `isNumber`","Fragments":["has"]},{"Key":"`isNumber` has","Fragments":["been"]},{"Key":"been rewritten","Fragments":["and"]},{"Key":"rewritten and","Fragments":["is"]},{"Key":"longer retarded","Fragments":["(it"]},{"Key":"retarded (it","Fragments":["was"]},{"Key":"(it was","Fragments":["a"]},{"Key":"really dumb","Fragments":["function"]},{"Key":"dumb function","Fragments":["-"]},{"Key":"function -","Fragments":["functional"]},{"Key":"- functional","Fragments":["but"]},{"Key":"functional but","Fragments":["badly"]},{"Key":"but badly","Fragments":["written)."]},{"Key":"maybe line","Fragments":["36"]},{"Key":"line 36","Fragments":["could"]},{"Key":"36 could","Fragments":["be"]},{"Key":"be `if","Fragments":["(lowercaseLetterCount"]},{"Key":"`if (lowercaseLetterCount","Fragments":["=="]},{"Key":"(lowercaseLetterCount ==","Fragments":["0)`"]},{"Key":"0)` since","Fragments":["at"]},{"Key":"since at","Fragments":["this"]},{"Key":"point we","Fragments":["know"]},{"Key":"both aren't","Fragments":["zero,"]},{"Key":"aren't zero,","Fragments":["since"]},{"Key":"zero, since","Fragments":["we"]},{"Key":"that excludes","Fragments":["that"]},{"Key":"excludes that","Fragments":["possibility."]},{"Key":"Used C++","Fragments":["strings"]},{"Key":"C++ strings","Fragments":["as"]},{"Key":"compare and","Fragments":["use"]},{"Key":"use various","Fragments":["functions"]},{"Key":"Looks good!","Fragments":["Good,"]},{"Key":"good! Good,","Fragments":["tight"]},{"Key":"Good, tight","Fragments":["solution."]},{"Key":"Only nit","Fragments":["I"]},{"Key":"nit I","Fragments":["have"]},{"Key":"couple extra","Fragments":["headers"]},{"Key":"extra headers","Fragments":["in"]},{"Key":"couple things,","Fragments":["but"]},{"Key":"you're off","Fragments":["to"]},{"Key":"good start.","Fragments":["I"]},{"Key":"start. I","Fragments":["like"]},{"Key":"you've kept","Fragments":["improving"]},{"Key":"kept improving","Fragments":["the"]},{"Key":"improving the","Fragments":["code."]},{"Key":"you're running","Fragments":["the"]},{"Key":"tests by","Fragments":["passing"]},{"Key":"test input","Fragments":["into"]},{"Key":"a running","Fragments":["program."]},{"Key":"running program.","Fragments":["You"]},{"Key":"program. You","Fragments":["don't","have"]},{"Key":"You want","Fragments":["to"]},{"Key":"setup your","Fragments":["code"]},{"Key":"it produces","Fragments":["a"]},{"Key":"produces a","Fragments":["function"]},{"Key":"tests can","Fragments":["link"]},{"Key":"can link","Fragments":["and"]},{"Key":"link and","Fragments":["execute","there's"]},{"Key":"and execute","Fragments":["against."]},{"Key":"execute against.","Fragments":["I'm"]},{"Key":"against. I'm","Fragments":["not"]},{"Key":"not running","Fragments":["Visual"]},{"Key":"running Visual","Fragments":["Studio,"]},{"Key":"Visual Studio,","Fragments":["so"]},{"Key":"Studio, so","Fragments":["I"]},{"Key":"can't step","Fragments":["you"]},{"Key":"step you","Fragments":["through"]},{"Key":"you through","Fragments":["the"]},{"Key":"the setup,","Fragments":["but"]},{"Key":"setup, but","Fragments":["the"]},{"Key":"readme should","Fragments":["be"]},{"Key":"- try","Fragments":["not"]},{"Key":"try not","Fragments":["to"]},{"Key":"use preprocessor","Fragments":["define's."]},{"Key":"preprocessor define's.","Fragments":["If"]},{"Key":"define's. If","Fragments":["you"]},{"Key":"that capability,","Fragments":["look"]},{"Key":"capability, look","Fragments":["at"]},{"Key":"at const","Fragments":["or"]},{"Key":"or enum.","Fragments":["When"]},{"Key":"enum. When","Fragments":["your"]},{"Key":"is compiled","Fragments":["it"]},{"Key":"compiled it","Fragments":["substitues"]},{"Key":"it substitues","Fragments":["those"]},{"Key":"substitues those","Fragments":["values"]},{"Key":"those values","Fragments":["with"]},{"Key":"your numeric","Fragments":["values"]},{"Key":"get challening","Fragments":["to"]},{"Key":"challening to","Fragments":["debug."]},{"Key":"to debug.","Fragments":["Scott"]},{"Key":"debug. Scott","Fragments":["Meyers"]},{"Key":"Meyers has","Fragments":["a"]},{"Key":"good write","Fragments":["up"]},{"Key":"write up","Fragments":["if"]},{"Key":"up if","Fragments":["you're"]},{"Key":"- Wrapping","Fragments":["isdigit"]},{"Key":"Wrapping isdigit","Fragments":["with"]},{"Key":"isdigit with","Fragments":["the"]},{"Key":"the isNumber","Fragments":["function"]},{"Key":"isNumber function","Fragments":["looks"]},{"Key":"me mainly","Fragments":["because"]},{"Key":"you're wrapping","Fragments":["a"]},{"Key":"wrapping a","Fragments":["standard"]},{"Key":"the ch","Fragments":["variable,","variable,"]},{"Key":"ch variable,","Fragments":["and","I'll"]},{"Key":"variable, and","Fragments":["it"]},{"Key":"put sString.back()","Fragments":["=="]},{"Key":"sString.back() ==","Fragments":["'?'"]},{"Key":"'?' in","Fragments":["your"]},{"Key":"iteration, fixed","Fragments":["an"]},{"Key":"fixed an","Fragments":["issue","issue"]},{"Key":"issue where","Fragments":["a","inputting"]},{"Key":"a number-only","Fragments":["string","string"]},{"Key":"number-only string","Fragments":["ending","would"]},{"Key":"string ending","Fragments":["in"]},{"Key":"mark (a","Fragments":["yell)"]},{"Key":"(a yell)","Fragments":["would"]},{"Key":"yell) would","Fragments":["return"]},{"Key":"return \"Whatever.\"","Fragments":["instead"]},{"Key":"\"Whatever.\" instead","Fragments":["of"]},{"Key":"expected output","Fragments":["for"]},{"Key":"yell (\"Whoa,","Fragments":["chill"]},{"Key":"(\"Whoa, chill","Fragments":["out!\")."]},{"Key":"chill out!\").","Fragments":["Please"]},{"Key":"out!\"). Please","Fragments":["refer"]},{"Key":"Please refer","Fragments":["to"]},{"Key":"to lines","Fragments":["35-43"]},{"Key":"lines 35-43","Fragments":["for"]},{"Key":"35-43 for","Fragments":["an"]},{"Key":"an explanatory","Fragments":["comment"]},{"Key":"explanatory comment","Fragments":["on"]},{"Key":"the feedback!","Fragments":["I'll","Changed"]},{"Key":"feedback! I'll","Fragments":["address"]},{"Key":"I'll address","Fragments":["these"]},{"Key":"address these","Fragments":["issues"]},{"Key":"these issues","Fragments":["when"]},{"Key":"issues when","Fragments":["I"]},{"Key":"back (that","Fragments":["would"]},{"Key":"(that would","Fragments":["be"]},{"Key":"in about","Fragments":["an","4"]},{"Key":"about an","Fragments":["hour"]},{"Key":"hour or","Fragments":["so)."]},{"Key":"off, thanks","Fragments":["for"]},{"Key":"the compliments!","Fragments":["I"]},{"Key":"compliments! I","Fragments":["really"]},{"Key":"them. That","Fragments":["said,"]},{"Key":"said, I'll","Fragments":["look"]},{"Key":"testing procedures","Fragments":["you've"]},{"Key":"procedures you've","Fragments":["suggested"]},{"Key":"suggested later.As","Fragments":["for"]},{"Key":"later.As for","Fragments":["the"]},{"Key":"preprocessor defines,","Fragments":["I'm"]},{"Key":"defines, I'm","Fragments":["definitely"]},{"Key":"I'm definitely","Fragments":["interested"]},{"Key":"definitely interested","Fragments":["in"]},{"Key":"that read;","Fragments":["I"]},{"Key":"read; I","Fragments":["just"]},{"Key":"just figured","Fragments":["they"]},{"Key":"figured they","Fragments":["significantly"]},{"Key":"they significantly","Fragments":["improved"]},{"Key":"significantly improved","Fragments":["code"]},{"Key":"improved code","Fragments":["readability,"]},{"Key":"code readability,","Fragments":["at"]},{"Key":"readability, at","Fragments":["least"]},{"Key":"case. Wrapping","Fragments":["`isdigit`"]},{"Key":"Wrapping `isdigit`","Fragments":["with"]},{"Key":"`isdigit` with","Fragments":["the"]},{"Key":"the `isNumber`","Fragments":["function"]},{"Key":"`isNumber` function","Fragments":["was"]},{"Key":"of readability,","Fragments":["but"]},{"Key":"too when","Fragments":["I"]},{"Key":"get back.","Fragments":["Thanks"]},{"Key":"back. Thanks","Fragments":["for"]},{"Key":"variable, I'll","Fragments":["just"]},{"Key":"iteration 6,","Fragments":["along"]},{"Key":"6, along","Fragments":["with"]},{"Key":"these other","Fragments":["issues."]},{"Key":"other issues.","Fragments":["Thanks"]},{"Key":"issues. Thanks","Fragments":["for"]},{"Key":"iteration, polished","Fragments":["code"]},{"Key":"polished code","Fragments":["a"]},{"Key":"bit (streamlined","Fragments":["nStringType,"]},{"Key":"(streamlined nStringType,","Fragments":["mostly)"]},{"Key":"nStringType, mostly)","Fragments":["and"]},{"Key":"mostly) and","Fragments":["fixed"]},{"Key":"and fixed","Fragments":["an"]},{"Key":"where inputting","Fragments":["a"]},{"Key":"inputting a","Fragments":["number-only"]},{"Key":"would crash","Fragments":["the"]},{"Key":"crash the","Fragments":["program"]},{"Key":"program (see","Fragments":["lines"]},{"Key":"(see lines","Fragments":["19-24"]},{"Key":"lines 19-24","Fragments":["for"]},{"Key":"19-24 for","Fragments":["details)."]},{"Key":"is. Great","Fragments":["job!"]},{"Key":"it's broken","Fragments":["(sorry)."]},{"Key":"broken (sorry).","Fragments":["If"]},{"Key":"(sorry). If","Fragments":["I"]},{"Key":"I understood","Fragments":["it"]},{"Key":"understood it","Fragments":["correctly,"]},{"Key":"it correctly,","Fragments":["`CheckCaps`"]},{"Key":"correctly, `CheckCaps`","Fragments":["will"]},{"Key":"`CheckCaps` will","Fragments":["return"]},{"Key":"first letter","Fragments":["is","it"]},{"Key":"is uppercase","Fragments":["and","instead","but"]},{"Key":"not. The","Fragments":["problem"]},{"Key":"letter it","Fragments":["encounters"]},{"Key":"it encounters","Fragments":["will"]},{"Key":"encounters will","Fragments":["define"]},{"Key":"will define","Fragments":["the"]},{"Key":"returned value:","Fragments":["if"]},{"Key":"value: if","Fragments":["it's"]},{"Key":"it's uppercase,","Fragments":["it'll"]},{"Key":"uppercase, it'll","Fragments":["increment"]},{"Key":"it'll increment","Fragments":["`count`"]},{"Key":"increment `count`","Fragments":["by"]},{"Key":"`count` by","Fragments":["one,"]},{"Key":"by one,","Fragments":["which"]},{"Key":"one, which","Fragments":["will"]},{"Key":"will invariably","Fragments":["make"]},{"Key":"invariably make","Fragments":["it"]},{"Key":"return 1;","Fragments":["if"]},{"Key":"1; if","Fragments":["it's"]},{"Key":"it's lowercase,","Fragments":["it'll"]},{"Key":"lowercase, it'll","Fragments":["break"]},{"Key":"it'll break","Fragments":["the"]},{"Key":"return 0.","Fragments":["You'd"]},{"Key":"0. You'd","Fragments":["need"]},{"Key":"You'd need","Fragments":["to"]},{"Key":"uppercase instead","Fragments":["of"]},{"Key":"Lines 61","Fragments":["to"]},{"Key":"61 to","Fragments":["65"]},{"Key":"to 65","Fragments":["are"]},{"Key":"65 are","Fragments":["clever"]},{"Key":"are clever","Fragments":["(good"]},{"Key":"clever (good","Fragments":["job),"]},{"Key":"(good job),","Fragments":["but"]},{"Key":"job), but","Fragments":["it"]},{"Key":"loop (optimizations!).","Fragments":["i.e.:"]},{"Key":"(optimizations!). i.e.:","Fragments":["`if"]},{"Key":"i.e.: `if","Fragments":["(str.length()"]},{"Key":"`if (str.length()","Fragments":["=="]},{"Key":"(str.length() ==","Fragments":["0)"]},{"Key":"I recognized","Fragments":["the"]},{"Key":"recognized the","Fragments":["power"]},{"Key":"of 2","Fragments":["in"]},{"Key":"2 in","Fragments":["the"]},{"Key":"the squares,","Fragments":["it"]},{"Key":"squares, it","Fragments":["was"]},{"Key":"can optimize","Fragments":["this"]},{"Key":"this any","Fragments":["more,"]},{"Key":"I'll see","Fragments":["what"]},{"Key":"submissions look","Fragments":["like."]},{"Key":"could add","Fragments":["some"]},{"Key":"extra logic","Fragments":["to"]},{"Key":"to square","Fragments":["to"]},{"Key":"check boundries","Fragments":["of"]},{"Key":"boundries of","Fragments":["a"]},{"Key":"a chess","Fragments":["square."]},{"Key":"chess square.","Fragments":["Nothing"]},{"Key":"square. Nothing","Fragments":["less"]},{"Key":"Nothing less","Fragments":["than"]},{"Key":"than 1,","Fragments":["or"]},{"Key":"1, or","Fragments":["greater"]},{"Key":"or greater","Fragments":["than"]},{"Key":"64 otherwise","Fragments":["throw"]},{"Key":"otherwise throw","Fragments":["an"]},{"Key":"the framework","Fragments":["right,"]},{"Key":"framework right,","Fragments":["was"]},{"Key":"right, was","Fragments":["pretty"]},{"Key":"straightforward getting","Fragments":["everything"]},{"Key":"getting everything","Fragments":["else"]},{"Key":"else in","Fragments":["place.","the"]},{"Key":"think anyone","Fragments":["could"]},{"Key":"anyone could","Fragments":["manipulate"]},{"Key":"could manipulate","Fragments":["the","the"]},{"Key":"internal database.","Fragments":["If"]},{"Key":"database. If","Fragments":["anyones"]},{"Key":"If anyones","Fragments":["sees"]},{"Key":"anyones sees","Fragments":["an"]},{"Key":"sees an","Fragments":["oppourtunity"]},{"Key":"an oppourtunity","Fragments":["to"]},{"Key":"oppourtunity to","Fragments":["do"]},{"Key":"that, let","Fragments":["me"]},{"Key":" Points","Fragments":["taken."]},{"Key":"Points taken.","Fragments":["Actually"]},{"Key":"taken. Actually","Fragments":["I"]},{"Key":"hadn't actually","Fragments":["understood"]},{"Key":"actually understood","Fragments":["the"]},{"Key":"build process.","Fragments":["I"]},{"Key":"process. I","Fragments":["actually"]},{"Key":"passes around","Fragments":["8"]},{"Key":"around 8","Fragments":["of"]},{"Key":"8 of","Fragments":["the"]},{"Key":"cases. I'll","Fragments":["upload"]},{"Key":"it soon.","Fragments":["The"]},{"Key":"soon. The","Fragments":["isUpper"]},{"Key":"The isUpper","Fragments":["and"]},{"Key":"isUpper and","Fragments":["isEmpty"]},{"Key":"and isEmpty","Fragments":["are"]},{"Key":"isEmpty are","Fragments":["that"]},{"Key":"in isUpper(I","Fragments":["want"]},{"Key":"isUpper(I want","Fragments":["all"]},{"Key":"want all","Fragments":["characters"]},{"Key":"be uppercase)","Fragments":["and"]},{"Key":"uppercase) and","Fragments":["I'm"]},{"Key":" \u003ch1\u003eIteration","Fragments":["3\u003c/h1\u003e"]},{"Key":"\u003ch1\u003eIteration 3\u003c/h1\u003e","Fragments":["\u003ci\u003e(Somewhat"]},{"Key":"3\u003c/h1\u003e \u003ci\u003e(Somewhat","Fragments":["works)\u003c/i\u003e"]},{"Key":"more refined","Fragments":["piece"]},{"Key":"refined piece","Fragments":["of"]},{"Key":"Some functions","Fragments":["have"]},{"Key":"been tried","Fragments":["in"]},{"Key":"tried in","Fragments":["new"]},{"Key":"in new","Fragments":["ways,"]},{"Key":"new ways,","Fragments":["by"]},{"Key":"ways, by","Fragments":["using"]},{"Key":"standard functions","Fragments":["found"]},{"Key":"functions found","Fragments":["in"]},{"Key":"have considered","Fragments":["some","when"]},{"Key":"considered some","Fragments":["of"]},{"Key":"points made","Fragments":["earlier"]},{"Key":"made earlier","Fragments":["and"]},{"Key":"earlier and","Fragments":["have"]},{"Key":"improve it.","Fragments":["Please"]},{"Key":"it. Please","Fragments":["provide"]},{"Key":"Please provide","Fragments":["any"]},{"Key":"provide any","Fragments":["suggestions."]},{"Key":"no gain","Fragments":["in"]},{"Key":"using reference","Fragments":["to"]},{"Key":"to basic","Fragments":["types."]},{"Key":"basic types.","Fragments":["Furthermore,"]},{"Key":"types. Furthermore,","Fragments":["why"]},{"Key":"Furthermore, why","Fragments":["not"]},{"Key":"long instead","Fragments":["of"]},{"Key":"of double","Fragments":["for"]},{"Key":"double for","Fragments":["integer"]},{"Key":"for integer","Fragments":["seconds?"]},{"Key":"enough balance","Fragments":["between"]},{"Key":"between storing","Fragments":["the"]},{"Key":"verses as","Fragments":["strings"]},{"Key":"as strings","Fragments":["and"]},{"Key":"not worrying","Fragments":["about"]},{"Key":"about (using","Fragments":["ternary"]},{"Key":"(using ternary","Fragments":["operators"]},{"Key":"ternary operators","Fragments":["etc.)"]},{"Key":"operators etc.)","Fragments":["trying"]},{"Key":"etc.) trying","Fragments":["to"]},{"Key":"to adapt","Fragments":["for"]},{"Key":"adapt for","Fragments":["each"]},{"Key":"each individual","Fragments":["case"]},{"Key":"individual case","Fragments":["of"]},{"Key":"of 1,2","Fragments":["and"]},{"Key":"1,2 and","Fragments":["0"]},{"Key":"0 as","Fragments":["well"]},{"Key":"the newline","Fragments":["in"]},{"Key":"newline in","Fragments":["sing()"]},{"Key":"in sing()","Fragments":["is"]},{"Key":"sing() is","Fragments":["a"]},{"Key":"bit fudged","Fragments":["though."]},{"Key":" N.B.:","Fragments":["sing"]},{"Key":"N.B.: sing","Fragments":["is"]},{"Key":"sing is","Fragments":["defined"]},{"Key":" sing(int","Fragments":["start,"]},{"Key":"sing(int start,","Fragments":["int"]},{"Key":"start, int","Fragments":["end=0)"]},{"Key":"function overloading","Fragments":["isn't"]},{"Key":"overloading isn't","Fragments":["the"]},{"Key":"does work","Fragments":["and"]},{"Key":"and appears","Fragments":["quite"]},{"Key":"appears quite","Fragments":["readable."]},{"Key":"Complete apart","Fragments":["from"]},{"Key":"last test:","Fragments":["how"]},{"Key":"test: how","Fragments":["is"]},{"Key":"custom class","Fragments":["to"]},{"Key":"the ```std::string```","Fragments":["constructor?"]},{"Key":" String","Fragments":["operator"]},{"Key":"String operator","Fragments":["is"]},{"Key":"now in","Fragments":["place."]},{"Key":"in place.","Fragments":["Something"]},{"Key":"place. Something","Fragments":["I've"]},{"Key":"Something I've","Fragments":["learned"]},{"Key":"I've learned","Fragments":["today!"]},{"Key":"Looks good:","Fragments":["consider"]},{"Key":"good: consider","Fragments":["a"]},{"Key":"a ```using","Fragments":["std::string```","namespace"]},{"Key":"std::string``` directive","Fragments":["to"]},{"Key":"remove a","Fragments":["bit"]},{"Key":"of unnecessary","Fragments":["typing","```std::```s"]},{"Key":"unnecessary typing","Fragments":["and"]},{"Key":"look that","Fragments":["bit"]},{"Key":"Also why","Fragments":["did"]},{"Key":"use ```protected```","Fragments":["rather"]},{"Key":"```protected``` rather","Fragments":["than"]},{"Key":"than simply","Fragments":["```private```?","```s```"]},{"Key":"quite readable.","Fragments":["I"]},{"Key":"prefer ```using","Fragments":["std::string```"]},{"Key":"std::string``` to","Fragments":["a"]},{"Key":"general ```using","Fragments":["namespace"]},{"Key":"namespace std```,","Fragments":["and"]},{"Key":"std```, and","Fragments":["you've"]},{"Key":"and you've","Fragments":["still","managed"]},{"Key":"you've still","Fragments":["got"]},{"Key":"unnecessary ```std::```s","Fragments":["towards"]},{"Key":"```std::```s towards","Fragments":["the"]},{"Key":"towards the","Fragments":["bottom."]},{"Key":"A ```using","Fragments":["std::string```"]},{"Key":"std::string``` would","Fragments":["make"]},{"Key":"code slightly","Fragments":["more"]},{"Key":"- ...","Fragments":["as"]},{"Key":"... as","Fragments":["would"]},{"Key":"would more","Fragments":["descriptive"]},{"Key":"names than","Fragments":["simply"]},{"Key":"you've managed","Fragments":["to"]},{"Key":"strings succinctly,","Fragments":["without"]},{"Key":"succinctly, without","Fragments":["taking"]},{"Key":"without taking","Fragments":["up"]},{"Key":"taking up","Fragments":["too"]},{"Key":"up too","Fragments":["much"]},{"Key":"much visual","Fragments":["space"]},{"Key":"visual space","Fragments":["when"]},{"Key":"space when","Fragments":["you"]},{"Key":"the ```clean_number()```","Fragments":["function"]},{"Key":"```clean_number()``` function","Fragments":["needs"]},{"Key":"function needs","Fragments":["to"]},{"Key":"be commented","Fragments":["to"]},{"Key":"commented to","Fragments":["make"]},{"Key":"for loop?","Fragments":["(not"]},{"Key":"loop? (not","Fragments":["a"]},{"Key":"a criticism,","Fragments":["I"]},{"Key":"criticism, I","Fragments":["find"]},{"Key":"the choices","Fragments":["that"]},{"Key":"that lead","Fragments":["to"]},{"Key":"Passing strings","Fragments":["as"]},{"Key":"as reference","Fragments":["caused"]},{"Key":"reference caused","Fragments":["the"]},{"Key":"caused the","Fragments":["test"]},{"Key":"as ```char*```","Fragments":["strings,"]},{"Key":"```char*``` strings,","Fragments":["causing"]},{"Key":"strings, causing","Fragments":["numerous"]},{"Key":"causing numerous","Fragments":["errors."]},{"Key":"assume you've","Fragments":["used"]},{"Key":"the header:","Fragments":["try"]},{"Key":"header: try","Fragments":["and"]},{"Key":"this, as","Fragments":["it"]},{"Key":"then includes","Fragments":["the"]},{"Key":"using statement","Fragments":["wherever"]},{"Key":"statement wherever","Fragments":["you"]},{"Key":"wherever you","Fragments":["include"]},{"Key":"have unwanted","Fragments":["effects"]},{"Key":"unwanted effects","Fragments":["in"]},{"Key":"effects in","Fragments":["a"]},{"Key":"libraries though,","Fragments":["nice"]},{"Key":"though, nice","Fragments":["and"]},{"Key":"and compact","Fragments":["code."]},{"Key":" ```for","Fragments":["(auto"]},{"Key":"```for (auto","Fragments":["\u0026i"]},{"Key":"(auto \u0026i","Fragments":[":"]},{"Key":"\u0026i :","Fragments":["line)"]},{"Key":": line)","Fragments":["{"]},{"Key":"// Do","Fragments":["something..."]},{"Key":"Note you","Fragments":["can"]},{"Key":"directly use","Fragments":["the"]},{"Key":"name ```i```,","Fragments":["and"]},{"Key":"```i```, and","Fragments":["declaring"]},{"Key":"body makes","Fragments":["the"]},{"Key":"process more","Fragments":["efficient."]},{"Key":"minor readability","Fragments":["enhancement."]},{"Key":"Bit of","Fragments":["a"]},{"Key":"return forest","Fragments":["but"]},{"Key":"forest but","Fragments":["it"]},{"Key":"works alright","Fragments":[":)"]},{"Key":"really elegant","Fragments":["solution,"]},{"Key":"elegant solution,","Fragments":["and"]},{"Key":"builds the","Fragments":["song"]},{"Key":"song from","Fragments":["its"]},{"Key":"from its","Fragments":["component","readability."]},{"Key":"its component","Fragments":["parts."]},{"Key":"your ```add()```","Fragments":["function"]},{"Key":"```add()``` function","Fragments":["you"]},{"Key":"you resort","Fragments":["every"]},{"Key":"resort every","Fragments":["grade."]},{"Key":"every grade.","Fragments":["I"]},{"Key":"grade. I","Fragments":["think"]},{"Key":"to resort","Fragments":["when"]},{"Key":"resort when","Fragments":["you"]},{"Key":"you add","Fragments":["additional"]},{"Key":"add additional","Fragments":["names"]},{"Key":"additional names","Fragments":["to"]},{"Key":"existing grade.","Fragments":["Ie"]},{"Key":"grade. Ie","Fragments":["you"]},{"Key":"Ie you","Fragments":["can"]},{"Key":"sorting up","Fragments":["into"]},{"Key":"your else","Fragments":["statement."]},{"Key":"of questions","Fragments":["at"]},{"Key":"questions at","Fragments":["the"]},{"Key":"the onset.","Fragments":["I"]},{"Key":"onset. I","Fragments":["didn't"]},{"Key":"test routine","Fragments":["file"]},{"Key":"routine file","Fragments":["should"]},{"Key":"file should","Fragments":["create"]},{"Key":"class instance,","Fragments":["so"]},{"Key":"instance, so","Fragments":["I"]},{"Key":"of optional","Fragments":["control"]},{"Key":"optional control","Fragments":["flow"]},{"Key":"flow branches,","Fragments":["so"]},{"Key":"branches, so","Fragments":["I"]},{"Key":"a 'getType'","Fragments":["function."]},{"Key":"'getType' function.","Fragments":["I"]},{"Key":"really improved","Fragments":["clarity"]},{"Key":"improved clarity","Fragments":["and"]},{"Key":"clarity and","Fragments":["just"]},{"Key":"extra layer","Fragments":["of","of"]},{"Key":"layer of","Fragments":["complexity","indirection"]},{"Key":"of complexity","Fragments":["(and"]},{"Key":"complexity (and","Fragments":["redundancy)."]},{"Key":"Hi Chaitanya-git","Fragments":["--"]},{"Key":"Chaitanya-git --","Fragments":["you"]},{"Key":"to refine","Fragments":["how"]},{"Key":"refine how","Fragments":["your"]},{"Key":"your Bob","Fragments":["responds"]},{"Key":"Bob responds","Fragments":["to"]},{"Key":"to yelling.","Fragments":["Also,"]},{"Key":"yelling. Also,","Fragments":["are"]},{"Key":"Also, are","Fragments":["you"]},{"Key":"you catching","Fragments":["a"]},{"Key":"catching a","Fragments":["question"]},{"Key":"question like:","Fragments":["\"Say"]},{"Key":"like: \"Say","Fragments":["what?"]},{"Key":"\"Say what?","Fragments":["\"?"]},{"Key":"call string::back()","Fragments":["with","?"]},{"Key":"string::back() with","Fragments":["an"]},{"Key":"word rule","Fragments":["with"]},{"Key":"rule with","Fragments":["symbols"]},{"Key":"with symbols","Fragments":["combined"]},{"Key":"symbols combined","Fragments":["with"]},{"Key":"with alphas","Fragments":["was"]},{"Key":"alphas was","Fragments":["sort"]},{"Key":"of ambiguous,","Fragments":["wrt"]},{"Key":"ambiguous, wrt","Fragments":["how"]},{"Key":"wrt how","Fragments":["that"]},{"Key":"might apply","Fragments":["to"]},{"Key":"apply to","Fragments":["other"]},{"Key":"other instances","Fragments":["(symbols"]},{"Key":"instances (symbols","Fragments":["at"]},{"Key":"(symbols at","Fragments":["beginning,"]},{"Key":"at beginning,","Fragments":["in"]},{"Key":"beginning, in","Fragments":["middle,"]},{"Key":"in middle,","Fragments":["etc)."]},{"Key":"middle, etc).","Fragments":["Though"]},{"Key":"etc). Though","Fragments":["the"]},{"Key":"rules say","Fragments":["you"]},{"Key":"should go","Fragments":["beyond"]},{"Key":"go beyond","Fragments":["the"]},{"Key":"beyond the","Fragments":["tests"]},{"Key":"and interpret","Fragments":["the"]},{"Key":"interpret the","Fragments":["rules,"]},{"Key":"the rules,","Fragments":["there's"]},{"Key":"rules, there's","Fragments":["no"]},{"Key":"no (english)","Fragments":["rule"]},{"Key":"(english) rule","Fragments":["about"]},{"Key":"rule about","Fragments":["this."]},{"Key":"be accurate","Fragments":["with"]},{"Key":"accurate with","Fragments":["the"]},{"Key":"the enclosing","Fragments":["apostrophes"]},{"Key":"enclosing apostrophes","Fragments":["test/rule"]},{"Key":"apostrophes test/rule","Fragments":["would"]},{"Key":"test/rule would","Fragments":["be"]},{"Key":"to parse.","Fragments":["What"]},{"Key":"parse. What","Fragments":["about"]},{"Key":"a non-plural","Fragments":["possessive"]},{"Key":"non-plural possessive","Fragments":["ending"]},{"Key":"possessive ending","Fragments":["in"]},{"Key":"in 's'?","Fragments":["(such"]},{"Key":"'s'? (such","Fragments":["as"]},{"Key":"as 'Jesus'","Fragments":["bag')?"]},{"Key":"'Jesus' bag')?","Fragments":["I"]},{"Key":"bag')? I","Fragments":["cheated"]},{"Key":"I cheated","Fragments":["and"]},{"Key":"cheated and","Fragments":["just"]},{"Key":"all outer","Fragments":["apostrophes."]},{"Key":"got hung","Fragments":["up"]},{"Key":"hung up","Fragments":["calling"]},{"Key":"calling 'throw","Fragments":["\u003ci\u003enew\u003c/i\u003e"]},{"Key":"'throw \u003ci\u003enew\u003c/i\u003e","Fragments":["domain_error'"]},{"Key":"\u003ci\u003enew\u003c/i\u003e domain_error'","Fragments":["rather"]},{"Key":"domain_error' rather","Fragments":["than"]},{"Key":"just 'throw","Fragments":["domain_error'"]},{"Key":"'throw domain_error'","Fragments":["."]},{"Key":"domain_error' .","Fragments":["."]},{"Key":". .","Fragments":["."]},{"Key":"Now you","Fragments":["just"]},{"Key":"exception code","Fragments":["--"]},{"Key":"code --","Fragments":["(hint:"]},{"Key":"-- (hint:","Fragments":["you"]},{"Key":"(hint: you","Fragments":["may"]},{"Key":"to \u003ci\u003ethrow\u003c/i\u003e","Fragments":["some"]},{"Key":"\u003ci\u003ethrow\u003c/i\u003e some","Fragments":["ideas"]},{"Key":"some ideas","Fragments":["around)"]},{"Key":"really sufficient","Fragments":["for"]},{"Key":"sufficient for","Fragments":["this"]},{"Key":"task. I","Fragments":["was"]},{"Key":"get code","Fragments":["working"]},{"Key":"code working","Fragments":["very"]},{"Key":"working very","Fragments":["quickly,"]},{"Key":"very quickly,","Fragments":["but"]},{"Key":"quickly, but","Fragments":["becuase"]},{"Key":"but becuase","Fragments":["of"]},{"Key":"becuase of","Fragments":["the"]},{"Key":"random nature","Fragments":["of"]},{"Key":"names it","Fragments":["was"]},{"Key":"was easy","Fragments":["to"]},{"Key":"do bad","Fragments":["things"]},{"Key":"bad things","Fragments":["and","are"]},{"Key":"have tests","Fragments":["pass."]},{"Key":"The static","Fragments":["is"]},{"Key":"probably going","Fragments":["to"]},{"Key":"to kill","Fragments":["thread"]},{"Key":"kill thread","Fragments":["safety."]},{"Key":"thread safety.","Fragments":["I"]},{"Key":"safety. I","Fragments":["should"]},{"Key":"a block","Fragments":["in"]},{"Key":"block in","Fragments":["there"]},{"Key":"also not","Fragments":["very"]},{"Key":"it grows.","Fragments":["I"]},{"Key":"grows. I","Fragments":["can"]},{"Key":"easily run","Fragments":["this"]},{"Key":"no colisions","Fragments":["if"]},{"Key":"colisions if","Fragments":["we're"]},{"Key":"only generating","Fragments":["1000"]},{"Key":"generating 1000","Fragments":["names,"]},{"Key":"1000 names,","Fragments":["but"]},{"Key":"names, but","Fragments":["that"]},{"Key":"that quickly","Fragments":["goes"]},{"Key":"quickly goes","Fragments":["up"]},{"Key":"goes up","Fragments":["and"]},{"Key":"I spend","Fragments":["a"]},{"Key":"spend a","Fragments":["lot"]},{"Key":"time randomly","Fragments":["guessing"]},{"Key":"randomly guessing","Fragments":["what"]},{"Key":"guessing what","Fragments":["hasn't"]},{"Key":"what hasn't","Fragments":["been"]},{"Key":"been used.","Fragments":["If"]},{"Key":"lot, I","Fragments":["would"]},{"Key":"probably generate","Fragments":["all"]},{"Key":"names up","Fragments":["front,"]},{"Key":"up front,","Fragments":["and"]},{"Key":"front, and","Fragments":["randomly"]},{"Key":"and randomly","Fragments":["pull"]},{"Key":"randomly pull","Fragments":["them"]},{"Key":"pull them","Fragments":["off"]},{"Key":"them off","Fragments":["the"]},{"Key":"list until","Fragments":["I"]},{"Key":"had exaugsted","Fragments":["the"]},{"Key":"exaugsted the","Fragments":["list."]},{"Key":"list. Of","Fragments":["course,"]},{"Key":"course, if","Fragments":["I"]},{"Key":"to hitting","Fragments":["the"]},{"Key":"hitting the","Fragments":["max"]},{"Key":"max number","Fragments":["of"]},{"Key":"of names,","Fragments":["the"]},{"Key":"naming format","Fragments":["would"]},{"Key":"format would","Fragments":["have"]},{"Key":"Added two","Fragments":["tests"]},{"Key":"tests I","Fragments":["used"]},{"Key":"I typically","Fragments":["don't"]},{"Key":"typically don't","Fragments":["use"]},{"Key":"use using","Fragments":["just"]},{"Key":"I explicity","Fragments":["bring"]},{"Key":"explicity bring","Fragments":["in"]},{"Key":"bring in","Fragments":["what"]},{"Key":"in what","Fragments":["I"]},{"Key":"I constantly","Fragments":["get"]},{"Key":"constantly get","Fragments":["hit"]},{"Key":"get hit","Fragments":["by"]},{"Key":"hit by","Fragments":["compile"]},{"Key":"by compile","Fragments":["errors"]},{"Key":"errors though,","Fragments":["so"]},{"Key":"right, I'm","Fragments":["probably"]},{"Key":"just creating","Fragments":["extra"]},{"Key":"creating extra","Fragments":["typing"]},{"Key":"extra typing","Fragments":["for"]},{"Key":"typing for","Fragments":["myself."]},{"Key":"used protected","Fragments":["so"]},{"Key":"protected so","Fragments":["inherited"]},{"Key":"so inherited","Fragments":["classes"]},{"Key":"inherited classes","Fragments":["could"]},{"Key":"classes could","Fragments":["manipulate"]},{"Key":"the data.","Fragments":["Again,"]},{"Key":"data. Again,","Fragments":["it's"]},{"Key":"did without","Fragments":["thinking"]},{"Key":"about why","Fragments":["I"]},{"Key":"step back,","Fragments":["I'm"]},{"Key":"back, I'm","Fragments":["not"]},{"Key":"what an","Fragments":["inherited"]},{"Key":"an inherited","Fragments":["class"]},{"Key":"inherited class","Fragments":["would"]},{"Key":"would even","Fragments":["do,"]},{"Key":"even do,","Fragments":["and"]},{"Key":"someone did","Fragments":["inherit,"]},{"Key":"did inherit,","Fragments":["the"]},{"Key":"inherit, the","Fragments":["member"]},{"Key":"variables should","Fragments":["be"]},{"Key":"and phone","Fragments":["numbers"]},{"Key":"phone numbers","Fragments":["should"]},{"Key":"numbers should","Fragments":["be"]},{"Key":"be accessed","Fragments":["through"]},{"Key":"accessed through","Fragments":["function"]},{"Key":"through function","Fragments":["calls."]},{"Key":" Hmmm.","Fragments":["Thanks"]},{"Key":"Hmmm. Thanks","Fragments":["for"]},{"Key":"the nits.","Fragments":["You've"]},{"Key":"nits. You've","Fragments":["given"]},{"Key":"You've given","Fragments":["me"]},{"Key":"me things","Fragments":["to"]},{"Key":"Although you're","Fragments":["right"]},{"Key":"in stating","Fragments":["that"]},{"Key":"defined only","Fragments":["for"]},{"Key":"same length,","Fragments":["the"]},{"Key":"length, the","Fragments":["tests"]},{"Key":"strings. It","Fragments":["should"]},{"Key":"0 by","Fragments":["default.","default,"]},{"Key":" Modulus","Fragments":["operator"]},{"Key":"Modulus operator","Fragments":["is"]},{"Key":"real star","Fragments":["of"]},{"Key":"star of","Fragments":["this"]},{"Key":"function. Check","Fragments":["the"]},{"Key":"Check the","Fragments":["remainder","test","test"]},{"Key":"remainder and","Fragments":["return"]},{"Key":"return when","Fragments":["you"]},{"Key":"made that","Fragments":["look"]},{"Key":"that look","Fragments":["pretty"]},{"Key":"look pretty","Fragments":["easy"]},{"Key":" Seeing","Fragments":["there"]},{"Key":"Seeing there","Fragments":["is"]},{"Key":"no actual","Fragments":["string"]},{"Key":"string trim()","Fragments":["function"]},{"Key":"little surprising.","Fragments":["It"]},{"Key":"surprising. It","Fragments":["has"]},{"Key":"look of","Fragments":["neat"]},{"Key":"of neat","Fragments":["features."]},{"Key":"Thanks. I'll","Fragments":["try"]},{"Key":"catch questions","Fragments":["of"]},{"Key":"questions of","Fragments":["the"]},{"Key":"you mentioned","Fragments":["if"]},{"Key":"mentioned if","Fragments":["the"]},{"Key":"current code","Fragments":["isn't"]},{"Key":"isn't able","Fragments":["to(I"]},{"Key":"able to(I","Fragments":["haven't"]},{"Key":"to(I haven't","Fragments":["tested"]},{"Key":"haven't tested","Fragments":["this"]},{"Key":"tested this","Fragments":["case"]},{"Key":"case yet,","Fragments":["though"]},{"Key":"yet, though","Fragments":["I"]},{"Key":"I did't","Fragments":["quite"]},{"Key":"did't quite","Fragments":["get"]},{"Key":"last suggestion.","Fragments":["Could"]},{"Key":"suggestion. Could","Fragments":["you"]},{"Key":"please tell","Fragments":["me"]},{"Key":"tell me","Fragments":["why","you"]},{"Key":"encounter an","Fragments":["empty"]},{"Key":"Thanks again,","Fragments":["appreciate"]},{"Key":"again, appreciate","Fragments":["the"]},{"Key":"the neatness","Fragments":["of"]},{"Key":"neatness of","Fragments":["this"]},{"Key":"tests here,","Fragments":["as"]},{"Key":"the apostrophes.","Fragments":["See"]},{"Key":"apostrophes. See","Fragments":["errors"]},{"Key":"See errors","Fragments":["at"]},{"Key":"at bottom.","Fragments":["Maybe"]},{"Key":"bottom. Maybe","Fragments":["something"]},{"Key":"something has","Fragments":["changed"]},{"Key":"boost tokenizer","Fragments":["recently?"]},{"Key":"using OS","Fragments":["X"]},{"Key":"OS X","Fragments":["10.10.1,"]},{"Key":"X 10.10.1,","Fragments":["with"]},{"Key":"10.10.1, with","Fragments":["Xcode"]},{"Key":"with Xcode","Fragments":["6.1"]},{"Key":"Xcode 6.1","Fragments":["and"]},{"Key":"6.1 and","Fragments":["boost"]},{"Key":"Running 13","Fragments":["test"]},{"Key":"13 test","Fragments":["cases..."]},{"Key":" /Users/koenlek/exercism/cpp/word-count/word_count_test.cpp:121:","Fragments":["fatal"]},{"Key":"/Users/koenlek/exercism/cpp/word-count/word_count_test.cpp:121: fatal","Fragments":["error"]},{"Key":"in \"with_apostrophes\":","Fragments":["critical"]},{"Key":"\"with_apostrophes\": critical","Fragments":["check"]},{"Key":"check {","Fragments":["expected.begin(),","expected.begin(),"]},{"Key":"{ expected.begin(),","Fragments":["expected.end()","expected.end()"]},{"Key":"expected.begin(), expected.end()","Fragments":["}","}"]},{"Key":"expected.end() }","Fragments":["==","=="]},{"Key":"} ==","Fragments":["{","{"]},{"Key":"== {","Fragments":["actual.begin(),","actual.begin(),"]},{"Key":"{ actual.begin(),","Fragments":["actual.end()","actual.end()"]},{"Key":"actual.begin(), actual.end()","Fragments":["}","}"]},{"Key":"actual.end() }","Fragments":["failed.","failed."]},{"Key":" Mismatch","Fragments":["in","in","in","in","in","in","in","in"]},{"Key":"Mismatch in","Fragments":["a","a","a","a","a","a","a","a"]},{"Key":"position 1:","Fragments":["\u003cdon't,2\u003e","\u003clet's,1\u003e"]},{"Key":"1: \u003cdon't,2\u003e","Fragments":["!="]},{"Key":"\u003cdon't,2\u003e !=","Fragments":["\u003cdon,2\u003e"]},{"Key":"position 4:","Fragments":["\u003cthen,1\u003e","\u003csaid,1\u003e"]},{"Key":"4: \u003cthen,1\u003e","Fragments":["!="]},{"Key":"\u003cthen,1\u003e !=","Fragments":["\u003ct,2\u003e"]},{"Key":" Collections","Fragments":["size","size"]},{"Key":"Collections size","Fragments":["mismatch:","mismatch:"]},{"Key":"size mismatch:","Fragments":["5","7"]},{"Key":"mismatch: 5","Fragments":["!="]},{"Key":"5 !=","Fragments":["6"]},{"Key":" /Users/koenlek/exercism/cpp/word-count/word_count_test.cpp:137:","Fragments":["fatal"]},{"Key":"/Users/koenlek/exercism/cpp/word-count/word_count_test.cpp:137: fatal","Fragments":["error"]},{"Key":"in \"with_apostrophes_as_quotes\":","Fragments":["critical"]},{"Key":"\"with_apostrophes_as_quotes\": critical","Fragments":["check"]},{"Key":"1: \u003clet's,1\u003e","Fragments":["!="]},{"Key":"\u003clet's,1\u003e !=","Fragments":["\u003cclock,1\u003e"]},{"Key":"position 2:","Fragments":["\u003cmeet,1\u003e"]},{"Key":"2: \u003cmeet,1\u003e","Fragments":["!="]},{"Key":"\u003cmeet,1\u003e !=","Fragments":["\u003clet,1\u003e"]},{"Key":"position 3:","Fragments":["\u003co'clock,1\u003e"]},{"Key":"3: \u003co'clock,1\u003e","Fragments":["!="]},{"Key":"\u003co'clock,1\u003e !=","Fragments":["\u003cmeet,1\u003e"]},{"Key":"4: \u003csaid,1\u003e","Fragments":["!="]},{"Key":"\u003csaid,1\u003e !=","Fragments":["\u003co,1\u003e"]},{"Key":"position 5:","Fragments":["\u003cshe,1\u003e"]},{"Key":"5: \u003cshe,1\u003e","Fragments":["!="]},{"Key":"\u003cshe,1\u003e !=","Fragments":["\u003cs,1\u003e"]},{"Key":"position 6:","Fragments":["\u003ctwelve,1\u003e"]},{"Key":"6: \u003ctwelve,1\u003e","Fragments":["!="]},{"Key":"\u003ctwelve,1\u003e !=","Fragments":["\u003csaid,1\u003e"]},{"Key":"mismatch: 7","Fragments":["!="]},{"Key":"7 !=","Fragments":["9"]},{"Key":"*** 2","Fragments":["failures"]},{"Key":"2 failures","Fragments":["detected"]},{"Key":"*** [word-count]","Fragments":["Error"]},{"Key":"[word-count] Error","Fragments":["201"]},{"Key":"*** [CMakeFiles/word-count.dir/all]","Fragments":["Error"]},{"Key":"[CMakeFiles/word-count.dir/all] Error","Fragments":["2"]},{"Key":"*** [all]","Fragments":["Error"]},{"Key":"[all] Error","Fragments":["2"]},{"Key":"Not aware","Fragments":["of"]},{"Key":"any tradeoffs","Fragments":["that"]},{"Key":"tradeoffs that","Fragments":["I"]},{"Key":"I needed.","Fragments":["Was"]},{"Key":"needed. Was","Fragments":["just"]},{"Key":"Was just","Fragments":["a"]},{"Key":"of peeling","Fragments":["open"]},{"Key":"peeling open","Fragments":["the"]},{"Key":"open the","Fragments":["the"]},{"Key":"old data","Fragments":["structure","structure"]},{"Key":"new one.","Fragments":["The"]},{"Key":"The old","Fragments":["data"]},{"Key":"structure had","Fragments":["all"]},{"Key":"had all","Fragments":["the"]},{"Key":"correct point","Fragments":["values,"]},{"Key":"point values,","Fragments":["so"]},{"Key":"values, so","Fragments":["there"]},{"Key":"considered non-alpha","Fragments":["characters"]},{"Key":"non-alpha characters","Fragments":["coming"]},{"Key":"characters coming","Fragments":["in"]},{"Key":"coming in","Fragments":["too."]},{"Key":"in too.","Fragments":["I'd"]},{"Key":"too. I'd","Fragments":["be"]},{"Key":"other error","Fragments":["situations"]},{"Key":"error situations","Fragments":["I'm"]},{"Key":"situations I'm","Fragments":["not"]},{"Key":"not considering","Fragments":["as"]},{"Key":"considering as","Fragments":["well."]},{"Key":"only gripe","Fragments":["with"]},{"Key":"gripe with","Fragments":["your"]},{"Key":"of __sprintf__","Fragments":["since"]},{"Key":"__sprintf__ since","Fragments":["its"]},{"Key":"its misuse","Fragments":["can"]},{"Key":"misuse can","Fragments":["lead"]},{"Key":"buffer overflow.","Fragments":["May"]},{"Key":"overflow. May","Fragments":["I"]},{"Key":"suggest its","Fragments":["safer"]},{"Key":"its safer","Fragments":["counterpart:"]},{"Key":"safer counterpart:","Fragments":["[__snprintf__](http://en.cppreference.com/w/cpp/io/c/fprintf)."]},{"Key":"job with","Fragments":["making"]},{"Key":"with making","Fragments":["sure"]},{"Key":"an alphabetic","Fragments":["character"]},{"Key":"character before","Fragments":["adding"]},{"Key":"adding it.","Fragments":["I"]},{"Key":"even consider","Fragments":["that.","that","that"]},{"Key":"consider that.","Fragments":["I"]},{"Key":"any problems,","Fragments":["but"]},{"Key":"problems, but","Fragments":["I"]},{"Key":"am curious","Fragments":["why","how"]},{"Key":"did `++iterator`","Fragments":["instead"]},{"Key":"`++iterator` instead","Fragments":["of"]},{"Key":" EDIT:Never","Fragments":["mind,"]},{"Key":"EDIT:Never mind,","Fragments":["found"]},{"Key":"mind, found","Fragments":["the"]},{"Key":"issues once","Fragments":["I"]},{"Key":"remembered that","Fragments":["I"]},{"Key":"make at","Fragments":["least"]},{"Key":"one variable","Fragments":["a"]},{"Key":"variable a","Fragments":["precision"]},{"Key":"a precision","Fragments":["variable","result."]},{"Key":"precision variable","Fragments":["to"]},{"Key":"missing any","Fragments":["error"]},{"Key":"any error","Fragments":["conditions."]},{"Key":"error conditions.","Fragments":["I"]},{"Key":"conditions. I","Fragments":["don't"]},{"Key":"zero answer,","Fragments":["and"]},{"Key":"always going","Fragments":["to"]},{"Key":"positive age","Fragments":["in"]},{"Key":"in seconds","Fragments":["with"]},{"Key":"seconds with","Fragments":["an"]},{"Key":"The deque","Fragments":["is"]},{"Key":"deque is","Fragments":["an"]},{"Key":"interesting container","Fragments":["to"]},{"Key":"hold the","Fragments":["lyrics."]},{"Key":"the lyrics.","Fragments":["Any"]},{"Key":"lyrics. Any","Fragments":["thoughts"]},{"Key":"Any thoughts","Fragments":["on"]},{"Key":"chose it","Fragments":["over"]},{"Key":"over appending","Fragments":["to"]},{"Key":"appending to","Fragments":["a"]},{"Key":"consider error","Fragments":["checking"]},{"Key":"checking your","Fragments":["inputs"]},{"Key":"your inputs","Fragments":["If"]},{"Key":"inputs If","Fragments":["I"]},{"Key":"don't correspond","Fragments":["to"]},{"Key":"song (0","Fragments":["or"]},{"Key":"(0 or","Fragments":["less,"]},{"Key":"or less,","Fragments":["9"]},{"Key":"less, 9","Fragments":["or"]},{"Key":"9 or","Fragments":["more)"]},{"Key":"or more)","Fragments":["it'll"]},{"Key":"more) it'll","Fragments":["compile"]},{"Key":"it'll compile","Fragments":["but"]},{"Key":"compile but","Fragments":["bad"]},{"Key":"but bad","Fragments":["things"]},{"Key":"good. Making","Fragments":["i\u003c=64"]},{"Key":"Making i\u003c=64","Fragments":["makes"]},{"Key":"i\u003c=64 makes","Fragments":["it"]},{"Key":"that 64","Fragments":["is","is"]},{"Key":"64 is","Fragments":["your","my"]},{"Key":"your upper","Fragments":["bound"]},{"Key":"upper bound","Fragments":["than","by"]},{"Key":"bound than","Fragments":["i\u003c65."]},{"Key":"than i\u003c65.","Fragments":["But"]},{"Key":"i\u003c65. But","Fragments":["I'm"]},{"Key":"just reaching","Fragments":["for"]},{"Key":"reaching for","Fragments":["something."]},{"Key":"also surprised","Fragments":["that"]},{"Key":"total function","Fragments":["doesn't"]},{"Key":"semicolon at","Fragments":["the"]},{"Key":"boost gregorian","Fragments":["date"]},{"Key":"date would","Fragments":["only"]},{"Key":"only let","Fragments":["me"]},{"Key":"me add","Fragments":["days"]},{"Key":"add days","Fragments":["to"]},{"Key":"days to","Fragments":["it,"]},{"Key":"I hardcoded","Fragments":["the"]},{"Key":"hardcoded the","Fragments":["math"]},{"Key":"math to","Fragments":["convert"]},{"Key":"convert a","Fragments":["billion"]},{"Key":"a billion","Fragments":["seconds"]},{"Key":"billion seconds","Fragments":["to"]},{"Key":"seconds to","Fragments":["days."]},{"Key":" Hmmmm.","Fragments":["Not"]},{"Key":"Hmmmm. Not","Fragments":["sure"]},{"Key":"null date.","Fragments":["I"]},{"Key":"date. I","Fragments":["should"]},{"Key":"probably check","Fragments":["for"]},{"Key":"any conditions","Fragments":["where"]},{"Key":"conditions where","Fragments":["I"]},{"Key":"date that","Fragments":["isn't","can"]},{"Key":"a date","Fragments":["that"]},{"Key":"optimize these","Fragments":["conditions"]},{"Key":"these conditions","Fragments":["a"]},{"Key":"conditions a","Fragments":["bit"]},{"Key":"bit more,","Fragments":["but"]},{"Key":"of how.","Fragments":["Even"]},{"Key":"how. Even","Fragments":["if"]},{"Key":"I did,","Fragments":["I","so"]},{"Key":"suspect it'll","Fragments":["start"]},{"Key":"it'll start","Fragments":["making"]},{"Key":"start making","Fragments":["the","decisions"]},{"Key":"code harder","Fragments":["to"]},{"Key":"my upper","Fragments":["bound"]},{"Key":"bound by","Fragments":["changing"]},{"Key":"changing `\u003c65`","Fragments":["to"]},{"Key":"`\u003c65` to","Fragments":["`\u003c=64`."]},{"Key":"the anagram_test.cpp","Fragments":["test"]},{"Key":"anagram_test.cpp test","Fragments":["file."]},{"Key":"file. G++","Fragments":["(v4.9.1"]},{"Key":"G++ (v4.9.1","Fragments":["on"]},{"Key":"(v4.9.1 on","Fragments":["XUbuntu)"]},{"Key":"on XUbuntu)","Fragments":["would"]},{"Key":"XUbuntu) would","Fragments":["complain"]},{"Key":"would complain","Fragments":["about","about"]},{"Key":"complain about","Fragments":["a","is"]},{"Key":"direct call","Fragments":["to"]},{"Key":"a constructor,","Fragments":["as"]},{"Key":"constructor, as","Fragments":["described"]},{"Key":"as described","Fragments":["here"]},{"Key":"described here","Fragments":[":"]},{"Key":"get everything","Fragments":["to"]},{"Key":"compile while","Fragments":["not"]},{"Key":"while not","Fragments":["touching"]},{"Key":"not touching","Fragments":["the"]},{"Key":"file any","Fragments":["more"]},{"Key":"than absolutely","Fragments":["necessary."]},{"Key":"absolutely necessary.","Fragments":["It"]},{"Key":"necessary. It","Fragments":["still"]},{"Key":"It still","Fragments":["feels"]},{"Key":"still feels","Fragments":["weird"]},{"Key":"feels weird","Fragments":["though,"]},{"Key":"weird though,","Fragments":["particularly"]},{"Key":"though, particularly","Fragments":["regarding"]},{"Key":"particularly regarding","Fragments":["how"]},{"Key":"regarding how","Fragments":["memory"]},{"Key":"how memory","Fragments":["is"]},{"Key":"is allocated.","Fragments":["I"]},{"Key":"allocated. I","Fragments":["can't"]},{"Key":"can't shake","Fragments":["the"]},{"Key":"shake the","Fragments":["feeling"]},{"Key":"the feeling","Fragments":["that"]},{"Key":"feeling that","Fragments":["it","in"]},{"Key":"works by","Fragments":["accident"]},{"Key":"accident rather","Fragments":["than"]},{"Key":"a definitive","Fragments":["solution"]},{"Key":"definitive solution","Fragments":["in"]},{"Key":"the works","Fragments":["for"]},{"Key":"is G++","Fragments":["too"]},{"Key":"G++ too","Fragments":["restrictive"]},{"Key":"too restrictive","Fragments":["in"]},{"Key":"restrictive in","Fragments":["this"]},{"Key":"case ?","Fragments":["If"]},{"Key":"? If","Fragments":["so,"]},{"Key":"so, is","Fragments":["there"]},{"Key":"to anagram::anagram(std::string)","Fragments":["considered"]},{"Key":"anagram::anagram(std::string) considered","Fragments":["\"idiomatic\""]},{"Key":"considered \"idiomatic\"","Fragments":["c++"]},{"Key":"\"idiomatic\" c++","Fragments":["?"]},{"Key":"using xubuntu","Fragments":["with"]},{"Key":"xubuntu with","Fragments":["gcc"]},{"Key":"gcc 4.9.1.","Fragments":["I'm"]},{"Key":"4.9.1. I'm","Fragments":["not"]},{"Key":"an expert,","Fragments":["but"]},{"Key":"expert, but","Fragments":["let's"]},{"Key":"but let's","Fragments":["see"]},{"Key":"didn't declare","Fragments":["a"]},{"Key":"task. When","Fragments":["you"]},{"Key":"see anagram::anagram,","Fragments":["you're"]},{"Key":"anagram::anagram, you're","Fragments":["seeing"]},{"Key":"you're seeing","Fragments":["a"]},{"Key":"seeing a","Fragments":["constructor"]},{"Key":"class anagram","Fragments":["that","{"]},{"Key":"namespace anagram.","Fragments":["So"]},{"Key":"anagram. So","Fragments":["your"]},{"Key":"header would","Fragments":["declare"]},{"Key":" anagram(std::string","Fragments":["word);"]},{"Key":"of \"anagram\"s,","Fragments":["which"]},{"Key":"\"anagram\"s, which","Fragments":["I"]},{"Key":"agree is","Fragments":["confusing,"]},{"Key":"confusing, but","Fragments":["I"]},{"Key":"another matcher","Fragments":["class"]},{"Key":"fastest running","Fragments":["code"]},{"Key":"running code","Fragments":["I"]},{"Key":"have ever","Fragments":["seen,"]},{"Key":"ever seen,","Fragments":["seeing"]},{"Key":"seen, seeing","Fragments":["as"]},{"Key":"seeing as","Fragments":["it"]},{"Key":"on bitwise","Fragments":["operations"]},{"Key":"bitwise operations","Fragments":["and"]},{"Key":"operations and","Fragments":["constexpr."]},{"Key":"and constexpr.","Fragments":["I"]},{"Key":"constexpr. I","Fragments":["like"]},{"Key":"do everything","Fragments":["at"]},{"Key":"everything at","Fragments":["compile"]},{"Key":"Thanks chrishamilton.","Fragments":["I"]},{"Key":"chrishamilton. I","Fragments":["was"]},{"Key":"was thrown","Fragments":["off"]},{"Key":"thrown off","Fragments":["by"]},{"Key":"off by","Fragments":["the"]},{"Key":"the colliding","Fragments":["names,"]},{"Key":"colliding names,","Fragments":["and"]},{"Key":"also by","Fragments":["the"]},{"Key":"the \"auto\"","Fragments":["variable","keyword"]},{"Key":"\"auto\" variable","Fragments":["in"]},{"Key":"file. I'm","Fragments":["not"]},{"Key":"yet familiar","Fragments":["with"]},{"Key":"usage there,","Fragments":["so"]},{"Key":"there, so","Fragments":["I"]},{"Key":"was calling,","Fragments":["I"]},{"Key":"calling, I","Fragments":["should"]},{"Key":"an anagram*","Fragments":["back,"]},{"Key":"anagram* back,","Fragments":["and"]},{"Key":"back, and","Fragments":["then"]},{"Key":"then have","Fragments":["to"]},{"Key":"use -\u003e","Fragments":["to"]},{"Key":"-\u003e to","Fragments":["call"]},{"Key":"call matches","Fragments":["on"]},{"Key":"matches on","Fragments":["it;"]},{"Key":" anyway,","Fragments":["took"]},{"Key":"anyway, took","Fragments":["your"]},{"Key":"took your","Fragments":["advice"]},{"Key":"fine, thanks","Fragments":["for"]},{"Key":"Any feed","Fragments":["back"]},{"Key":"feed back","Fragments":["is"]},{"Key":"back is","Fragments":["appreciated,"]},{"Key":"is appreciated,","Fragments":["been"]},{"Key":"appreciated, been","Fragments":["working"]},{"Key":"been working","Fragments":["with"]},{"Key":"```isUpper``` function","Fragments":["already"]},{"Key":"function already","Fragments":["defined."]},{"Key":"already defined.","Fragments":["Will"]},{"Key":"defined. Will","Fragments":["look"]},{"Key":"Will look","Fragments":["at"]},{"Key":"Just so","Fragments":["you"]},{"Key":"you know,","Fragments":["if"]},{"Key":"know, if","Fragments":["you"]},{"Key":"the syntax:","Fragments":["`for(char"]},{"Key":"syntax: `for(char","Fragments":["\u0026"]},{"Key":"`for(char \u0026","Fragments":["c:string)`."]},{"Key":"\u0026 c:string)`.","Fragments":["Same"]},{"Key":"c:string)`. Same","Fragments":["difference,"]},{"Key":"Same difference,","Fragments":["but"]},{"Key":"basically how","Fragments":["I"]},{"Key":"One critique","Fragments":["though."]},{"Key":"critique though.","Fragments":["The"]},{"Key":"The total","Fragments":["number"]},{"Key":"total number","Fragments":["of"]},{"Key":"of grains","Fragments":["is"]},{"Key":"grains is","Fragments":["equal"]},{"Key":"to 2^64","Fragments":["since"]},{"Key":"2^64 since","Fragments":["there"]},{"Key":"are 64","Fragments":["squares"]},{"Key":"64 squares","Fragments":["on"]},{"Key":"squares on","Fragments":["a"]},{"Key":"a chessboard.","Fragments":["So"]},{"Key":"chessboard. So","Fragments":["you"]},{"Key":"return `pow(2,","Fragments":["64)`"]},{"Key":"`pow(2, 64)`","Fragments":["for"]},{"Key":"64)` for","Fragments":["your"]},{"Key":" Neat,","Fragments":["thanks!","I"]},{"Key":"use \"using\"","Fragments":["to"]},{"Key":"\"using\" to","Fragments":["shorten"]},{"Key":"shorten overly","Fragments":["long"]},{"Key":"long namespaces,","Fragments":["never"]},{"Key":"namespaces, never","Fragments":["to"]},{"Key":"never to","Fragments":["import"]},{"Key":"to import","Fragments":["into"]},{"Key":"import into","Fragments":["the"]},{"Key":"about more","Fragments":["aptly"]},{"Key":"more aptly","Fragments":["named"]},{"Key":"aptly named","Fragments":["variables,"]},{"Key":"named variables,","Fragments":["but"]},{"Key":"single variable,","Fragments":["there"]},{"Key":"variable, there","Fragments":["is"]},{"Key":"is little","Fragments":["chance"]},{"Key":"little chance","Fragments":["for"]},{"Key":"for confusion.","Fragments":["In"]},{"Key":"confusion. In","Fragments":["anything"]},{"Key":"In anything","Fragments":["more"]},{"Key":"more complex,","Fragments":["I'd"]},{"Key":"complex, I'd","Fragments":["consider"]},{"Key":"I'd consider","Fragments":["this"]},{"Key":"think through","Fragments":["a"]},{"Key":"particular design,","Fragments":["rather"]},{"Key":"design, rather","Fragments":["focused"]},{"Key":"rather focused","Fragments":["on"]},{"Key":"focused on","Fragments":["passing","passing"]},{"Key":"on passing","Fragments":["the","the"]},{"Key":"It ended","Fragments":["up"]},{"Key":"first processed","Fragments":["the"]},{"Key":"processed the","Fragments":["string"]},{"Key":"the Alpha","Fragments":["characters"]},{"Key":"Alpha characters","Fragments":["were"]},{"Key":"were capitalized","Fragments":["that"]},{"Key":"capitalized that","Fragments":["warrants"]},{"Key":"that warrants","Fragments":["a"]},{"Key":"a \"Whoa,","Fragments":["chill"]},{"Key":" Subsequently,","Fragments":["starting"]},{"Key":"Subsequently, starting","Fragments":["from"]},{"Key":"I search","Fragments":["for"]},{"Key":"this first","Fragments":["instances"]},{"Key":"first instances","Fragments":["of"]},{"Key":"of (!,","Fragments":["?,"]},{"Key":"(!, ?,","Fragments":["or"]},{"Key":"?, or","Fragments":[".)"]},{"Key":"or .)","Fragments":["to"]},{"Key":".) to","Fragments":["determine"]},{"Key":"response (\"Sure\"","Fragments":["and"]},{"Key":"(\"Sure\" and","Fragments":["\"Whatever\")."]},{"Key":"and \"Whatever\").","Fragments":["I"]},{"Key":"\"Whatever\"). I","Fragments":["used"]},{"Key":"a flag,","Fragments":["that"]},{"Key":"flag, that","Fragments":["if"]},{"Key":"not set,","Fragments":["denotes"]},{"Key":"set, denotes","Fragments":["the"]},{"Key":"denotes the","Fragments":["string"]},{"Key":"empty requiring","Fragments":["the"]},{"Key":"requiring the","Fragments":["the"]},{"Key":"the \"Fine","Fragments":["be"]},{"Key":"\"Fine be","Fragments":["that"]},{"Key":"way response.\"","Fragments":["Everything"]},{"Key":"response.\" Everything","Fragments":["else"]},{"Key":"else receives","Fragments":["a"]},{"Key":"receives a","Fragments":["\"Whatever.\""]},{"Key":"a \"Whatever.\"","Fragments":["response"]},{"Key":" @tommie","Fragments":["I've"]},{"Key":"@tommie I've","Fragments":["grown"]},{"Key":"I've grown","Fragments":["accustomed"]},{"Key":"grown accustomed","Fragments":["to"]},{"Key":"accustomed to","Fragments":["const"]},{"Key":"const referencing","Fragments":["objects","primitives."]},{"Key":"referencing objects","Fragments":["that"]},{"Key":"it's become","Fragments":["(to"]},{"Key":"become (to","Fragments":["my"]},{"Key":"my detriment)","Fragments":["second"]},{"Key":"detriment) second","Fragments":["nature"]},{"Key":"second nature","Fragments":["when"]},{"Key":"nature when","Fragments":["writing"]},{"Key":"when writing","Fragments":["function"]},{"Key":"writing function","Fragments":["parameters,"]},{"Key":"function parameters,","Fragments":["never"]},{"Key":"parameters, never","Fragments":["once"]},{"Key":"never once","Fragments":["thinking"]},{"Key":"once thinking","Fragments":["about"]},{"Key":"the consequences","Fragments":["of"]},{"Key":"consequences of","Fragments":["const"]},{"Key":"Your question","Fragments":["and"]},{"Key":"to [this](http://stackoverflow.com/questions/3009543/passing-integers-as-constant-references-versus-copying)","Fragments":["Stack"]},{"Key":"[this](http://stackoverflow.com/questions/3009543/passing-integers-as-constant-references-versus-copying) Stack","Fragments":["Overflow"]},{"Key":"Stack Overflow","Fragments":["question"]},{"Key":"Overflow question","Fragments":["have"]},{"Key":"question have","Fragments":["been"]},{"Key":"Doesn't look","Fragments":["like"]},{"Key":"there is,","Fragments":["sorry."]},{"Key":"is, sorry.","Fragments":["You'll"]},{"Key":"sorry. You'll","Fragments":["just"]},{"Key":"You'll just","Fragments":["have"]},{"Key":"through and","Fragments":["check"]},{"Key":" Realized","Fragments":["after"]},{"Key":"Realized after","Fragments":["submitting"]},{"Key":"after submitting","Fragments":["I"]},{"Key":"submitting I","Fragments":["didn't"]},{"Key":"actually calculate","Fragments":["the"]},{"Key":"The instructions","Fragments":["for"]},{"Key":"instructions for","Fragments":["this"]},{"Key":"maybe specify","Fragments":["that"]},{"Key":"boost algorithms...","Fragments":["because"]},{"Key":"algorithms... because","Fragments":["otherwise,"]},{"Key":"because otherwise,","Fragments":["the"]},{"Key":"otherwise, the","Fragments":["exercise"]},{"Key":"of two-line","Fragments":["boost"]},{"Key":"two-line boost","Fragments":["calls,"]},{"Key":"boost calls,","Fragments":["which"]},{"Key":"calls, which","Fragments":["is"]},{"Key":"no fun","Fragments":["at"]},{"Key":"fun at","Fragments":["all."]},{"Key":"think too","Fragments":["deeply"]},{"Key":"too deeply","Fragments":["about"]},{"Key":"deeply about","Fragments":["this"]},{"Key":"problem, I","Fragments":["just"]},{"Key":"threw together","Fragments":["stuff"]},{"Key":"together stuff","Fragments":["until"]},{"Key":"stuff until","Fragments":["it"]},{"Key":"it worked.","Fragments":["That's"]},{"Key":"worked. That's","Fragments":["usually"]},{"Key":"That's usually","Fragments":["what"]},{"Key":"usually what","Fragments":["I"]},{"Key":"I do.","Fragments":["I"]},{"Key":"do. I","Fragments":["haven't"]},{"Key":"haven't had","Fragments":["the"]},{"Key":"play with","Fragments":["boost"]},{"Key":"boost yet,","Fragments":["I"]},{"Key":"yet, I","Fragments":["wished"]},{"Key":"wished there","Fragments":["was"]},{"Key":"an any()","Fragments":["predicate,"]},{"Key":"any() predicate,","Fragments":["is"]},{"Key":"predicate, is","Fragments":["there"]},{"Key":"there something","Fragments":["like"]},{"Key":"didn't leap","Fragments":["out"]},{"Key":"leap out","Fragments":["at"]},{"Key":"at me?","Fragments":["I"]},{"Key":"me? I","Fragments":["guess"]},{"Key":"guess really","Fragments":["!all()"]},{"Key":"really !all()","Fragments":["with"]},{"Key":"!all() with","Fragments":["a"]},{"Key":"a negated","Fragments":["condition"]},{"Key":"negated condition","Fragments":["is"]},{"Key":"to any()","Fragments":["but"]},{"Key":"any() but","Fragments":["any()"]},{"Key":"but any()","Fragments":["is"]},{"Key":"any() is","Fragments":["nicer"]},{"Key":"is nicer","Fragments":["to"]},{"Key":"code interesting","Fragments":["because"]},{"Key":"does more","Fragments":["than"]},{"Key":"problem asks,","Fragments":["in"]},{"Key":"asks, in","Fragments":["the"]},{"Key":"the sense","Fragments":["that"]},{"Key":"really calculates","Fragments":["the"]},{"Key":"calculates the","Fragments":["state"]},{"Key":"all substrings","Fragments":["that"]},{"Key":"substrings that","Fragments":["include"]},{"Key":"the remark.","Fragments":["There"]},{"Key":"remark. There","Fragments":["are"]},{"Key":"some closed-form","Fragments":["rules"]},{"Key":"closed-form rules","Fragments":["that"]},{"Key":"rules that","Fragments":["are"]},{"Key":"simpler (to","Fragments":["my"]},{"Key":"mind at","Fragments":["least)"]},{"Key":"least) to","Fragments":["calculate,"]},{"Key":"to calculate,","Fragments":["i.e."]},{"Key":"calculate, i.e.","Fragments":["silence"]},{"Key":"i.e. silence","Fragments":["="]},{"Key":"silence =","Fragments":["no_nonwhitespace_chars,"]},{"Key":"= no_nonwhitespace_chars,","Fragments":["upper"]},{"Key":"no_nonwhitespace_chars, upper","Fragments":["="]},{"Key":"= non_whitespace_chars","Fragments":["\u0026\u0026"]},{"Key":"non_whitespace_chars \u0026\u0026","Fragments":["no_lower_alpha_chars,"]},{"Key":"\u0026\u0026 no_lower_alpha_chars,","Fragments":["etc."]},{"Key":"thing I'd","Fragments":["be"]},{"Key":"most worried","Fragments":["about"]},{"Key":"about with","Fragments":["this"]},{"Key":"is state","Fragments":["transition"]},{"Key":"state transition","Fragments":["explosion"]},{"Key":"transition explosion","Fragments":["if"]},{"Key":"explosion if","Fragments":["I"]},{"Key":"more types.","Fragments":["If"]},{"Key":"types. If","Fragments":["I"]},{"Key":"add say","Fragments":["emphatic"]},{"Key":"say emphatic","Fragments":["shouting"]},{"Key":"emphatic shouting","Fragments":["as"]},{"Key":"shouting as","Fragments":["all"]},{"Key":"caps ending","Fragments":["with"]},{"Key":"with double","Fragments":["exclamation"]},{"Key":"double exclamation","Fragments":["point,"]},{"Key":"exclamation point,","Fragments":["taking"]},{"Key":"point, taking","Fragments":["precedence"]},{"Key":"taking precedence","Fragments":["over"]},{"Key":"just shouting,","Fragments":["as"]},{"Key":"shouting, as","Fragments":["a"]},{"Key":"a closed","Fragments":["form"]},{"Key":"form rule","Fragments":["that"]},{"Key":"rule that","Fragments":["would"]},{"Key":"pretty easy,","Fragments":["pretty"]},{"Key":"easy, pretty","Fragments":["much"]},{"Key":"a 1-line","Fragments":["change."]},{"Key":"1-line change.","Fragments":["But"]},{"Key":"change. But","Fragments":["here"]},{"Key":"be potentially","Fragments":["spread"]},{"Key":"potentially spread","Fragments":["out"]},{"Key":"spread out","Fragments":["over"]},{"Key":"out over","Fragments":["all"]},{"Key":"all existing","Fragments":["states,","states."]},{"Key":"existing states,","Fragments":["and"]},{"Key":"states, and","Fragments":["a"]},{"Key":"state will","Fragments":["have"]},{"Key":" True","Fragments":["nitpick:"]},{"Key":"True nitpick:","Fragments":["it's"]},{"Key":"nitpick: it's","Fragments":["harder"]},{"Key":"it's harder","Fragments":["to"]},{"Key":"you swap","Fragments":["line"]},{"Key":"swap line","Fragments":["break"]},{"Key":"line break","Fragments":["rules"]},{"Key":"break rules","Fragments":["in"]},{"Key":"an if..then..else","Fragments":["chain"]},{"Key":"if..then..else chain","Fragments":[":)"]},{"Key":"be nicer","Fragments":["if"]},{"Key":"nicer if","Fragments":["tabs"]},{"Key":"if tabs","Fragments":["and"]},{"Key":"and line","Fragments":["breaks"]},{"Key":"breaks were","Fragments":["trimmed"]},{"Key":"were trimmed","Fragments":["as"]},{"Key":"trimmed as","Fragments":["well"]},{"Key":"actually agree,","Fragments":["@emily."]},{"Key":"agree, @emily.","Fragments":["This"]},{"Key":"@emily. This","Fragments":["is"]},{"Key":"in \"real\"","Fragments":["code,"]},{"Key":"\"real\" code,","Fragments":["unless"]},{"Key":"code, unless","Fragments":["I"]},{"Key":"I *really*","Fragments":["needed"]},{"Key":"*really* needed","Fragments":["to"]},{"Key":"to eek","Fragments":["out"]},{"Key":"eek out","Fragments":["the"]},{"Key":"performance (see","Fragments":["below)."]},{"Key":"However, I'd","Fragments":["already"]},{"Key":"I'd already","Fragments":["done"]},{"Key":"already done","Fragments":["the"]},{"Key":"done the","Fragments":["straightforward"]},{"Key":"straightforward implementation","Fragments":["in"]},{"Key":"my ruby","Fragments":["solution"]},{"Key":"ruby solution","Fragments":["to"]},{"Key":"same problem.","Fragments":["So"]},{"Key":"problem. So","Fragments":["I"]},{"Key":"I challenged","Fragments":["myself"]},{"Key":"challenged myself","Fragments":["to"]},{"Key":"could answer","Fragments":["the"]},{"Key":"string (you'll","Fragments":["note"]},{"Key":"(you'll note","Fragments":["that"]},{"Key":"multiple string::find","Fragments":["conditions"]},{"Key":"string::find conditions","Fragments":["would"]},{"Key":"conditions would","Fragments":["make"]},{"Key":"make multiple","Fragments":["passes"]},{"Key":"multiple passes","Fragments":["over"]},{"Key":"passes over","Fragments":["the"]},{"Key":"said, in","Fragments":["the"]},{"Key":"did need","Fragments":["that"]},{"Key":"performance increase","Fragments":["I"]},{"Key":"increase I","Fragments":["still"]},{"Key":"still wouldn't","Fragments":["use"]},{"Key":"this handrolled","Fragments":["parser;"]},{"Key":"handrolled parser;","Fragments":["I'd"]},{"Key":"parser; I'd","Fragments":["use"]},{"Key":"use e.g.","Fragments":["ragel."]},{"Key":"e.g. ragel.","Fragments":["This"]},{"Key":"ragel. This","Fragments":["approach"]},{"Key":"fun self-imposed","Fragments":["constraint."]},{"Key":"Good point,","Fragments":["doing"]},{"Key":"point, doing","Fragments":["each"]},{"Key":"doing each","Fragments":["response"]},{"Key":"response separately","Fragments":["would"]},{"Key":"separately would","Fragments":["definitely"]},{"Key":"definitely incur","Fragments":["multiple"]},{"Key":"incur multiple","Fragments":["passes."]},{"Key":"multiple passes.","Fragments":["It's"]},{"Key":"passes. It's","Fragments":["probably"]},{"Key":"probably possible","Fragments":["to"]},{"Key":"determine a","Fragments":["set"]},{"Key":"of Boolean","Fragments":["values"]},{"Key":"Boolean values","Fragments":["about"]},{"Key":"values about","Fragments":["the"]},{"Key":"input (I.e.","Fragments":["has_lowercase_alpha,"]},{"Key":"(I.e. has_lowercase_alpha,","Fragments":["has_alpha,"]},{"Key":"has_lowercase_alpha, has_alpha,","Fragments":["last_non_whitespace_char_is_query,"]},{"Key":"has_alpha, last_non_whitespace_char_is_query,","Fragments":["etc)"]},{"Key":"last_non_whitespace_char_is_query, etc)","Fragments":["simultaneously"]},{"Key":"etc) simultaneously","Fragments":["so"]},{"Key":"simultaneously so","Fragments":["you'd"]},{"Key":"decision using","Fragments":["the"]},{"Key":"the booleans","Fragments":["in","-"]},{"Key":"booleans in","Fragments":["place"]},{"Key":"expensive find","Fragments":["calls."]},{"Key":"signatures on","Fragments":["this"]},{"Key":"me forever","Fragments":["to"]},{"Key":"forever to","Fragments":["get"]},{"Key":" Logic","Fragments":["wasn't"]},{"Key":"Logic wasn't","Fragments":["too"]},{"Key":"wasn't too","Fragments":["bad"]},{"Key":"bad after","Fragments":["I"]},{"Key":"the .plus","Fragments":["method"]},{"Key":".plus method","Fragments":["working."]},{"Key":"method working.","Fragments":["Found"]},{"Key":"working. Found","Fragments":["it"]},{"Key":"Found it","Fragments":["easiest"]},{"Key":"it easiest","Fragments":["to"]},{"Key":"to minutes","Fragments":["any"]},{"Key":"minutes any","Fragments":["time"]},{"Key":"a calculation,","Fragments":["then"]},{"Key":"calculation, then","Fragments":["convert"]},{"Key":"then convert","Fragments":["it","to"]},{"Key":"back. Writing","Fragments":["this"]},{"Key":"Writing this","Fragments":["out"]},{"Key":"and given","Fragments":["the"]},{"Key":"is used,","Fragments":["it"]},{"Key":"used, it","Fragments":["might"]},{"Key":"the minutes","Fragments":["and"]},{"Key":"minutes and","Fragments":["then"]},{"Key":"to hours","Fragments":["as"]},{"Key":"hours as","Fragments":["needed."]},{"Key":"good link","Fragments":["and"]},{"Key":"there's lots","Fragments":["of"]},{"Key":"good points","Fragments":["in"]},{"Key":"There's quite","Fragments":["a"]},{"Key":"worth worrying","Fragments":["about"]},{"Key":"will handle","Fragments":["the"]},{"Key":"the optimizations.","Fragments":["I"]},{"Key":"optimizations. I","Fragments":["don't"]},{"Key":"really agree","Fragments":["with"]},{"Key":"me, it","Fragments":["doesn't"]},{"Key":"seem smart","Fragments":["to"]},{"Key":"smart to","Fragments":["rely"]},{"Key":"optimize things","Fragments":["for"]},{"Key":"things for","Fragments":["you"]},{"Key":"prefer one","Fragments":["style"]},{"Key":"style over","Fragments":["the"]},{"Key":"other. The","Fragments":["pre-incremement"]},{"Key":"The pre-incremement","Fragments":["is"]},{"Key":"pre-incremement is","Fragments":["supposed"]},{"Key":"the post-increment","Fragments":["is"]},{"Key":"post-increment is","Fragments":["supposed"]},{"Key":"before incrementing","Fragments":["and"]},{"Key":"incrementing and","Fragments":["assigning,"]},{"Key":"and assigning,","Fragments":["so"]},{"Key":"assigning, so","Fragments":["explicity"]},{"Key":"so explicity","Fragments":["calling"]},{"Key":"explicity calling","Fragments":["that"]},{"Key":"calling that","Fragments":["out"]},{"Key":"that out","Fragments":["seems"]},{"Key":"out seems","Fragments":["like"]},{"Key":"like you'd","Fragments":["probably"]},{"Key":"into less","Fragments":["trouble"]},{"Key":"less trouble","Fragments":["if"]},{"Key":"trouble if","Fragments":["you're"]},{"Key":"old compiler","Fragments":["or"]},{"Key":"compiler or","Fragments":["with"]},{"Key":"with complex","Fragments":["classes"]},{"Key":"complex classes","Fragments":["that"]},{"Key":"compiler may","Fragments":["not"]},{"Key":"Thanks. That's","Fragments":["a"]},{"Key":"great optimization.","Fragments":["Didn't"]},{"Key":"optimization. Didn't","Fragments":["even"]},{"Key":"Didn't even","Fragments":["consider"]},{"Key":"that pow(2,","Fragments":["64)"]},{"Key":"64) -1","Fragments":["was"]},{"Key":"-1 was","Fragments":["equivilant"]},{"Key":"was equivilant","Fragments":["to"]},{"Key":"equivilant to","Fragments":["the"]},{"Key":"figured the","Fragments":["best"]},{"Key":"is regular","Fragments":["expressions,"]},{"Key":"expressions, but","Fragments":["doing"]},{"Key":"the regex_search(es)","Fragments":["seemed"]},{"Key":"regex_search(es) seemed","Fragments":["a"]},{"Key":"seemed a","Fragments":["bit"]},{"Key":"Would storing","Fragments":["the"]},{"Key":"the searches","Fragments":["in"]},{"Key":"searches in","Fragments":["boolean"]},{"Key":"in boolean","Fragments":["values"]},{"Key":"values make","Fragments":["more"]},{"Key":"more sense?","Fragments":["Or"]},{"Key":"sense? Or","Fragments":["does"]},{"Key":"Or does","Fragments":["it"]},{"Key":"it lead","Fragments":["to"]},{"Key":"to redundant","Fragments":["code?"]},{"Key":" ¿Por","Fragments":["qué"]},{"Key":"¿Por qué","Fragments":["sería"]},{"Key":"qué sería","Fragments":["necesario"]},{"Key":"sería necesario","Fragments":["de"]},{"Key":"necesario de","Fragments":["tener"]},{"Key":"de tener","Fragments":["que"]},{"Key":"tener que","Fragments":["saber"]},{"Key":"que saber","Fragments":["algo"]},{"Key":"saber algo","Fragments":["sobre"]},{"Key":"algo sobre","Fragments":["bob"]},{"Key":"sobre bob","Fragments":["fuera"]},{"Key":"bob fuera","Fragments":["del"]},{"Key":"fuera del","Fragments":["contexto"]},{"Key":"del contexto","Fragments":["de"]},{"Key":"contexto de","Fragments":["bob?"]},{"Key":" Buen","Fragments":["idea"]},{"Key":"Buen idea","Fragments":["de"]},{"Key":"idea de","Fragments":["separar"]},{"Key":"de separar","Fragments":["bob"]},{"Key":"separar bob","Fragments":["y"]},{"Key":"bob y","Fragments":["el"]},{"Key":"y el","Fragments":["mensaje"]},{"Key":"el mensaje","Fragments":["-"]},{"Key":"mensaje -","Fragments":["pero"]},{"Key":"- pero","Fragments":["hay"]},{"Key":"pero hay","Fragments":["que"]},{"Key":"hay que","Fragments":["justificar"]},{"Key":"que justificar","Fragments":["cada"]},{"Key":"justificar cada","Fragments":["function"]},{"Key":"cada function","Fragments":["en"]},{"Key":"function en","Fragments":["tu"]},{"Key":"en tu","Fragments":["nueva"]},{"Key":"tu nueva","Fragments":["clase."]},{"Key":"nueva clase.","Fragments":["A"]},{"Key":"clase. A","Fragments":["mi"]},{"Key":"A mi","Fragments":["me"]},{"Key":"mi me","Fragments":["parece"]},{"Key":"me parece","Fragments":["que"]},{"Key":"parece que","Fragments":["bobresponse()"]},{"Key":"que bobresponse()","Fragments":["debe"]},{"Key":"bobresponse() debe","Fragments":["estar"]},{"Key":"debe estar","Fragments":["en"]},{"Key":"estar en","Fragments":["bob."]},{"Key":"Nice work","Fragments":["using"]},{"Key":"regular expressions.","Fragments":["They","It"]},{"Key":"expressions. They","Fragments":["fit"]},{"Key":"They fit","Fragments":["this"]},{"Key":"fit this","Fragments":["problem"]},{"Key":"problem nicely.","Fragments":["As"]},{"Key":"nicely. As","Fragments":["a"]},{"Key":"style I","Fragments":["would"]},{"Key":"would rename","Fragments":["your"]},{"Key":"your expressions","Fragments":["to"]},{"Key":"the logic.","Fragments":["It"]},{"Key":"logic. It","Fragments":["would"]},{"Key":"could see","Fragments":["what"]},{"Key":"what each","Fragments":["expression"]},{"Key":"each expression","Fragments":["was"]},{"Key":"expression was","Fragments":["supposed"]},{"Key":"be without","Fragments":["having"]},{"Key":"expression itself.","Fragments":["Well"]},{"Key":"itself. Well","Fragments":["done."]},{"Key":"in answer","Fragments":["to"]},{"Key":"question I","Fragments":["don't"]},{"Key":"should store","Fragments":["the"]},{"Key":"expressions as","Fragments":["boolean","the"]},{"Key":"as boolean","Fragments":["values."]},{"Key":"boolean values.","Fragments":["I"]},{"Key":"mental optimization","Fragments":["that"]},{"Key":"optimization that","Fragments":["all"]},{"Key":"very beginning","Fragments":["programmers","before"]},{"Key":"beginning programmers","Fragments":["will"]},{"Key":"programmers will","Fragments":["do."]},{"Key":"You've crunched","Fragments":["it"]},{"Key":"crunched it","Fragments":["down"]},{"Key":"down really","Fragments":["well!"]},{"Key":"really well!","Fragments":["Looks"]},{"Key":"well! Looks","Fragments":["good!"]},{"Key":"a final","Fragments":["nit,"]},{"Key":"final nit,","Fragments":["consider"]},{"Key":"nit, consider","Fragments":["your"]},{"Key":"consider your","Fragments":["boundry"]},{"Key":"your boundry","Fragments":["conditions"]},{"Key":"boundry conditions","Fragments":["in"]},{"Key":"functions. The","Fragments":["tests"]},{"Key":"go there,","Fragments":["but"]},{"Key":"always want","Fragments":["to"]},{"Key":"that anyone","Fragments":["passing"]},{"Key":"anyone passing","Fragments":["in"]},{"Key":"in values","Fragments":["don't"]},{"Key":"values don't","Fragments":["break"]},{"Key":"don't break","Fragments":["your"]},{"Key":"implementation. What","Fragments":["happens"]},{"Key":"sing function","Fragments":["if"]},{"Key":"you reverse","Fragments":["to"]},{"Key":"reverse to","Fragments":["and"]},{"Key":"and from?","Fragments":["What"]},{"Key":"from? What","Fragments":["happens"]},{"Key":"negative number?","Fragments":["Is"]},{"Key":"number? Is","Fragments":["it"]},{"Key":"it acceptable","Fragments":["to"]},{"Key":"acceptable to","Fragments":["pass","me."]},{"Key":"than 99?","Fragments":["Just"]},{"Key":"99? Just","Fragments":["something"]},{"Key":"Just something","Fragments":["to"]},{"Key":"feedback! Changed","Fragments":["those"]},{"Key":"Changed those","Fragments":["names,"]},{"Key":"those names,","Fragments":["good"]},{"Key":"names, good","Fragments":["point."]},{"Key":"booleans -","Fragments":["I've"]},{"Key":"many people","Fragments":["who"]},{"Key":"who love","Fragments":["to"]},{"Key":"any int","Fragments":["as"]},{"Key":"int as","Fragments":["a"]},{"Key":"boolean and","Fragments":["vice","calling"]},{"Key":"versa. As","Fragments":["you"]},{"Key":"can imagine,","Fragments":["large"]},{"Key":"imagine, large","Fragments":["formulas"]},{"Key":"large formulas","Fragments":["can"]},{"Key":"formulas can","Fragments":["get"]},{"Key":"get dicey","Fragments":["pretty"]},{"Key":"dicey pretty","Fragments":["fast."]},{"Key":"plus side","Fragments":["-"]},{"Key":"side -","Fragments":["not"]},{"Key":"using if","Fragments":["statements"]},{"Key":"be considerably","Fragments":["quicker"]},{"Key":"considerably quicker","Fragments":["and"]},{"Key":"quicker and","Fragments":["possibly"]},{"Key":"possibly even","Fragments":["allow"]},{"Key":"even allow","Fragments":["your"]},{"Key":"easily parallelized.","Fragments":["For"]},{"Key":"parallelized. For","Fragments":["this"]},{"Key":"example though,","Fragments":["I"]},{"Key":"suppose it's","Fragments":["more"]},{"Key":"a stylistic","Fragments":["choice"]},{"Key":"stylistic choice","Fragments":[":)."]},{"Key":"constructor to","Fragments":["pass"]},{"Key":"test, now","Fragments":["by"]},{"Key":"now by","Fragments":["looking"]},{"Key":"used operator","Fragments":["string()"]},{"Key":"string() and","Fragments":["also"]},{"Key":"used string(10,","Fragments":["'0'),"]},{"Key":"string(10, '0'),","Fragments":["which"]},{"Key":"'0'), which","Fragments":["is"]},{"Key":"also just","Fragments":[".substr(1)"]},{"Key":"just .substr(1)","Fragments":["and"]},{"Key":".substr(1) and","Fragments":["could"]},{"Key":"have imported","Fragments":["locale"]},{"Key":"imported locale","Fragments":["instead"]},{"Key":"locale instead","Fragments":["of"]},{"Key":"curious for","Fragments":["which"]},{"Key":"which use","Fragments":["cases"]},{"Key":"cases returning","Fragments":["ten"]},{"Key":"returning ten","Fragments":["zeros"]},{"Key":"ten zeros","Fragments":["is"]},{"Key":"zeros is","Fragments":["better"]},{"Key":"than throwing","Fragments":["an"]},{"Key":"returning an","Fragments":["empty"]},{"Key":"I copied","Fragments":["the"]},{"Key":"copied the","Fragments":["std::transform"]},{"Key":"std::transform from","Fragments":["StackOverflow,"]},{"Key":"from StackOverflow,","Fragments":["why"]},{"Key":"StackOverflow, why","Fragments":["can"]},{"Key":"why can","Fragments":["I"]},{"Key":"::tolower here","Fragments":["without"]},{"Key":"without specifying","Fragments":["the"]},{"Key":"or importing","Fragments":["cctype?"]},{"Key":"importing cctype?","Fragments":["In"]},{"Key":"cctype? In","Fragments":["which"]},{"Key":"In which","Fragments":["other"]},{"Key":"which other","Fragments":["situations"]},{"Key":"other situations","Fragments":["is"]},{"Key":"situations is","Fragments":["it"]},{"Key":"it idiomatic","Fragments":["to"]},{"Key":"two colons","Fragments":["in"]},{"Key":"colons in","Fragments":["front"]},{"Key":"This fails","Fragments":["the"]},{"Key":"fails the","Fragments":["two"]},{"Key":"two sorting","Fragments":["test"]},{"Key":"sorting test","Fragments":["cases,"]},{"Key":"cases, which","Fragments":["puzzles"]},{"Key":"which puzzles","Fragments":["me,"]},{"Key":"puzzles me,","Fragments":["because"]},{"Key":"sort correctly","Fragments":["when"]},{"Key":"correctly when","Fragments":["I"]},{"Key":"new project","Fragments":["to"]},{"Key":"completely revamped","Fragments":["approach"]},{"Key":"revamped approach","Fragments":["at"]},{"Key":"approach at","Fragments":["this"]},{"Key":"exercise using","Fragments":["regular"]},{"Key":"This handles","Fragments":["most"]},{"Key":"handles most","Fragments":["cases"]},{"Key":"cases except","Fragments":["case"]},{"Key":"except case","Fragments":["12,17,32"]},{"Key":"case 12,17,32","Fragments":["and"]},{"Key":"12,17,32 and","Fragments":["37"]},{"Key":"and 37","Fragments":["in"]},{"Key":"37 in","Fragments":["bob_test.cpp."]},{"Key":"appreciate if","Fragments":["anyone"]},{"Key":"anyone told","Fragments":["me"]},{"Key":"someone yells","Fragments":["at"]},{"Key":"yells at","Fragments":["bob"]},{"Key":"at bob","Fragments":["and"]},{"Key":"and questions","Fragments":["with"]},{"Key":" Spent","Fragments":["a"]},{"Key":"Spent a","Fragments":["bit"]},{"Key":"bit trying","Fragments":["to"]},{"Key":"the algorythm","Fragments":["to"]},{"Key":"algorythm to","Fragments":["produce"]},{"Key":"to produce","Fragments":["all"]},{"Key":"produce all","Fragments":["the"]},{"Key":"prime factorizations","Fragments":["before"]},{"Key":"factorizations before","Fragments":["I"]},{"Key":"I re-read","Fragments":["the"]},{"Key":"re-read the","Fragments":["problem"]},{"Key":"and realized","Fragments":["we"]},{"Key":"realized we","Fragments":["really"]},{"Key":"only cared","Fragments":["about","about"]},{"Key":"about 3,","Fragments":["5,","5"]},{"Key":"and 7.","Fragments":["sigh.","I'm"]},{"Key":"The modulus","Fragments":["operator"]},{"Key":"modulus operator","Fragments":["makes"]},{"Key":"operator makes","Fragments":["this"]},{"Key":"not difficult.","Fragments":["If"]},{"Key":"difficult. If","Fragments":["there's"]},{"Key":"If there's","Fragments":["any"]},{"Key":"any remainder,","Fragments":["the"]},{"Key":"remainder, the","Fragments":["number"]},{"Key":"negative drops","Fragments":["as"]},{"Key":"drops as","Fragments":["well."]},{"Key":"Looks good,","Fragments":["and"]},{"Key":"good, and","Fragments":["I"]},{"Key":"almost went","Fragments":["down"]},{"Key":"went down","Fragments":["the"]},{"Key":"route you","Fragments":["did"]},{"Key":"did of","Fragments":["calculating"]},{"Key":"calculating all","Fragments":["the"]},{"Key":"factors before","Fragments":["realizing"]},{"Key":"before realizing","Fragments":["I"]},{"Key":"realizing I","Fragments":["only"]},{"Key":"7. I'm","Fragments":["glad"]},{"Key":"did, because","Fragments":["I"]},{"Key":"that logic","Fragments":["played"]},{"Key":"logic played","Fragments":["out."]},{"Key":"Since you've","Fragments":["determined"]},{"Key":"you've determined","Fragments":["a"]},{"Key":"determined a","Fragments":["generic"]},{"Key":"generic solution","Fragments":["to"]},{"Key":"the factors,","Fragments":["my"]},{"Key":"factors, my","Fragments":["only"]},{"Key":"my only","Fragments":["suggestion"]},{"Key":"suggestion would","Fragments":["be","be"]},{"Key":"the factorization","Fragments":["code"]},{"Key":"factorization code","Fragments":["into"]},{"Key":"math seperate","Fragments":["from"]},{"Key":"seperate from","Fragments":["the"]},{"Key":"A very","Fragments":["c"]},{"Key":"very c","Fragments":["answer!"]},{"Key":"string return","Fragments":["type."]},{"Key":"return type.","Fragments":["It'll"]},{"Key":"type. It'll","Fragments":["keep"]},{"Key":"It'll keep","Fragments":["it"]},{"Key":"you're unlikely","Fragments":["to"]},{"Key":"recognize any","Fragments":["performance"]},{"Key":"performance gains","Fragments":["out"]},{"Key":"gains out","Fragments":["of"]},{"Key":"*. You're","Fragments":["also"]},{"Key":"also forcing","Fragments":["your"]},{"Key":"caller to","Fragments":["remember"]},{"Key":"remember to","Fragments":["free"]},{"Key":"to free","Fragments":["up"]},{"Key":"free up","Fragments":["that"]},{"Key":"that memory","Fragments":["when"]},{"Key":"memory when","Fragments":["they're"]},{"Key":"they're done,","Fragments":["which"]},{"Key":"potential source","Fragments":["of"]},{"Key":"My other","Fragments":["suggestion"]},{"Key":"other suggestion","Fragments":["would"]},{"Key":"in c++11.","Fragments":["I"]},{"Key":"c++11. I","Fragments":["still"]},{"Key":"a typical","Fragments":["for"]},{"Key":"typical for","Fragments":["loop,"]},{"Key":"worth understanding","Fragments":["and"]},{"Key":"understanding and","Fragments":["trying"]},{"Key":"incorporate because","Fragments":["it's"]},{"Key":"it's simpiler","Fragments":["with"]},{"Key":"simpiler with","Fragments":["less"]},{"Key":"less potential","Fragments":["for"]},{"Key":"for errors,","Fragments":["and"]},{"Key":"errors, and","Fragments":["it's"]},{"Key":"uppercase but","Fragments":["the"]},{"Key":"is lower?","Fragments":["I"]},{"Key":"lower? I","Fragments":["think"]},{"Key":"is \"what's","Fragments":["up?"]},{"Key":"\"what's up?","Fragments":["\"."]},{"Key":"up? \".","Fragments":["Spaces"]},{"Key":"\". Spaces","Fragments":["after"]},{"Key":"Spaces after","Fragments":["the"]},{"Key":"the ?.","Fragments":["I"]},{"Key":"?. I","Fragments":["think"]},{"Key":"that's another","Fragments":["problem."]},{"Key":"a comparison.","Fragments":["All"]},{"Key":"comparison. All","Fragments":["you"]},{"Key":"All you","Fragments":["need","need","do"]},{"Key":"know is","Fragments":["if"]},{"Key":"has any","Fragments":["lowercase"]},{"Key":"lowercase letters.","Fragments":["I"]},{"Key":"of allUpper","Fragments":["by"]},{"Key":"allUpper by","Fragments":["just"]},{"Key":"just examining","Fragments":["the"]},{"Key":"examining the","Fragments":["string."]},{"Key":"the str.find_last_not_of.","Fragments":["I"]},{"Key":"str.find_last_not_of. I","Fragments":["should"]},{"Key":"char *chars","Fragments":["="]},{"Key":"*chars =","Fragments":["statement.c_str();"]},{"Key":"= statement.c_str();","Fragments":["Why"]},{"Key":"statement.c_str(); Why","Fragments":["not"]},{"Key":"\u0026 ?","Fragments":["This"]},{"Key":"? This","Fragments":["is"]},{"Key":"pointless conversion.","Fragments":["Just"]},{"Key":"conversion. Just","Fragments":["change"]},{"Key":"Just change","Fragments":["your"]},{"Key":"method parameters","Fragments":["to"]},{"Key":" isYelling","Fragments":["is"]},{"Key":"isYelling is","Fragments":["correct"]},{"Key":"correct but","Fragments":["I"]},{"Key":"would re-implement","Fragments":["this."]},{"Key":"re-implement this.","Fragments":["All"]},{"Key":"this. All","Fragments":["you"]},{"Key":"char \"isalpha(c)","Fragments":["islower(c)\"."]},{"Key":"\"isalpha(c) islower(c)\".","Fragments":["See"]},{"Key":"islower(c)\". See","Fragments":["std::string::iterator"]},{"Key":" isQuestion","Fragments":["has"]},{"Key":"isQuestion has","Fragments":["an"]},{"Key":"error condition.","Fragments":["Imagine"]},{"Key":"condition. Imagine","Fragments":["you"]},{"Key":"string \"?4\"","Fragments":["then"]},{"Key":"\"?4\" then","Fragments":["your"]},{"Key":"then your","Fragments":["isQuestion"]},{"Key":"isQuestion will","Fragments":["return"]},{"Key":"true but","Fragments":["it"]},{"Key":" isNothing's","Fragments":["parameter"]},{"Key":"isNothing's parameter","Fragments":["is"]},{"Key":"is copying","Fragments":["the"]},{"Key":"it in.","Fragments":["This"]},{"Key":"in. This","Fragments":["is"]},{"Key":"bad. You","Fragments":["should"]},{"Key":"\u0026 statement.","Fragments":["the"]},{"Key":"statement. the","Fragments":["\u0026"]},{"Key":"Another note","Fragments":["about"]},{"Key":"about isNothing.","Fragments":["There"]},{"Key":"isNothing. There","Fragments":["is"]},{"Key":"function. All","Fragments":["you"]},{"Key":"for equality;","Fragments":["you"]},{"Key":"equality; you","Fragments":["should"]},{"Key":"if condition.","Fragments":["This"]},{"Key":"condition. This","Fragments":["would"]},{"Key":"the overheard","Fragments":["of"]},{"Key":"overheard of","Fragments":["allocating"]},{"Key":"of allocating","Fragments":["stack"]},{"Key":"allocating stack","Fragments":["frames"]},{"Key":"stack frames","Fragments":["etc"]},{"Key":"frames etc","Fragments":["for"]},{"Key":"etc for","Fragments":["a"]},{"Key":"oh good","Fragments":["catch"]},{"Key":"good catch","Fragments":["with"]},{"Key":"catch with","Fragments":["the"]},{"Key":"the size_t,","Fragments":["i"]},{"Key":"size_t, i","Fragments":["always"]},{"Key":"always forget","Fragments":["that."]},{"Key":"forget that.","Fragments":["what's"]},{"Key":"that. what's","Fragments":["up"]},{"Key":"what's up","Fragments":["with"]},{"Key":"the {}","Fragments":["for"]},{"Key":"{} for","Fragments":["the"]},{"Key":"the arg","Fragments":["to"]},{"Key":"arg to","Fragments":["the"]},{"Key":"exception constructor","Fragments":["though?"]},{"Key":"constructor though?","Fragments":["i'm"]},{"Key":"though? i'm","Fragments":["not"]},{"Key":"that syntax,","Fragments":["is"]},{"Key":"syntax, is","Fragments":["there"]},{"Key":"the triple","Fragments":["i's?"]},{"Key":"nice iterator-based","Fragments":["solution"]},{"Key":"iterator-based solution","Fragments":[":)"]},{"Key":"the size-diff","Fragments":["was"]},{"Key":"size-diff was","Fragments":["supposed"]},{"Key":"avoid side","Fragments":["effects"]},{"Key":"effects throughout","Fragments":["the"]},{"Key":"throughout the","Fragments":["code."]},{"Key":"used `if`","Fragments":["statements"]},{"Key":"`if` statements","Fragments":["instead"]},{"Key":"statements instead","Fragments":["of"]},{"Key":"`switch` because","Fragments":["I"]},{"Key":"only trick","Fragments":["is"]},{"Key":"that removing","Fragments":["trailing"]},{"Key":"removing trailing","Fragments":["white","whitespace"]},{"Key":"space makes","Fragments":["it"]},{"Key":"pass two","Fragments":["tests"]},{"Key":"it right.","Fragments":["\"Prolonged"]},{"Key":"right. \"Prolonged","Fragments":["silence\""]},{"Key":"\"Prolonged silence\"","Fragments":["(a"]},{"Key":"silence\" (a","Fragments":["bunch"]},{"Key":"(a bunch","Fragments":["of"]},{"Key":"of spaces)","Fragments":["is"]},{"Key":"spaces) is","Fragments":["turned"]},{"Key":"is turned","Fragments":["into"]},{"Key":"turned into","Fragments":["\"silence\""]},{"Key":"into \"silence\"","Fragments":["(an"]},{"Key":"\"silence\" (an","Fragments":["empty"]},{"Key":"(an empty","Fragments":["string)."]},{"Key":"empty string).","Fragments":["Everything"]},{"Key":"string). Everything","Fragments":["is"]},{"Key":"for grains","Fragments":["because"]},{"Key":"grains because","Fragments":["you"]},{"Key":"never initialize","Fragments":["an"]},{"Key":"initialize an","Fragments":["object"]},{"Key":"tests. As","Fragments":["\u003ca"]},{"Key":"As \u003ca","Fragments":["href=\"http://stackoverflow.com/a/1435105/2691079\"\u003ethis\u003c/a\u003e"]},{"Key":"\u003ca href=\"http://stackoverflow.com/a/1435105/2691079\"\u003ethis\u003c/a\u003e","Fragments":["stackoverflow"]},{"Key":"href=\"http://stackoverflow.com/a/1435105/2691079\"\u003ethis\u003c/a\u003e stackoverflow","Fragments":["answer"]},{"Key":"stackoverflow answer","Fragments":["says:"]},{"Key":"answer says:","Fragments":["\"Classes"]},{"Key":"says: \"Classes","Fragments":["are"]},{"Key":"\"Classes are","Fragments":["to"]},{"Key":"build objects,","Fragments":["not"]},{"Key":"objects, not","Fragments":["to"]},{"Key":"replace namespaces.\"","Fragments":["So"]},{"Key":"namespaces.\" So","Fragments":["you"]},{"Key":"long int","Fragments":["square(int","total()"]},{"Key":"int square(int","Fragments":["n)"]},{"Key":" //you","Fragments":["get"]},{"Key":"//you get","Fragments":["the"]},{"Key":"put an","Fragments":["assert"]},{"Key":"assert for","Fragments":["equal"]},{"Key":"for equal","Fragments":["lengths"]},{"Key":"equal lengths","Fragments":["in"]},{"Key":"lengths in","Fragments":["there"]},{"Key":"there since","Fragments":["the"]},{"Key":"function shouldn't","Fragments":["have"]},{"Key":"inputs outside","Fragments":["of"]},{"Key":"your `verse`","Fragments":["function,"]},{"Key":"`verse` function,","Fragments":["the"]},{"Key":"function, the","Fragments":["conditionals"]},{"Key":"conditionals in","Fragments":["the"]},{"Key":"string make","Fragments":["the"]},{"Key":"text that","Fragments":["is"]},{"Key":"being printed","Fragments":["very"]},{"Key":"printed very","Fragments":["fuzzy."]},{"Key":"very fuzzy.","Fragments":["Perhaps"]},{"Key":"fuzzy. Perhaps","Fragments":["consider"]},{"Key":"Perhaps consider","Fragments":["separating"]},{"Key":"consider separating","Fragments":["formatting"]},{"Key":"separating formatting","Fragments":["from"]},{"Key":"formatting from","Fragments":["logic."]},{"Key":" Keeps","Fragments":["namespace"]},{"Key":"Keeps namespace","Fragments":["clear"]},{"Key":"namespace clear","Fragments":["of"]},{"Key":"clear of","Fragments":["more"]},{"Key":"common names.","Fragments":["Trick"]},{"Key":"names. Trick","Fragments":["recommended"]},{"Key":"Trick recommended","Fragments":["by"]},{"Key":"recommended by","Fragments":["\u003ca"]},{"Key":"by \u003ca","Fragments":["href=http://www.learncpp.com/\u003elearncpp\u003c/a\u003e."]},{"Key":"already taken.","Fragments":["This"]},{"Key":"taken. This","Fragments":["is"]},{"Key":"checking to","Fragments":["see"]},{"Key":"name (which","Fragments":["is"]},{"Key":"I did).","Fragments":["Guess"]},{"Key":"did). Guess","Fragments":["I'll"]},{"Key":"Guess I'll","Fragments":["have"]},{"Key":"at this:","Fragments":["http://www.stroustrup.com/C++11FAQ.html#uniform-init"]},{"Key":"that namespaced","Fragments":["functions,"]},{"Key":"namespaced functions,","Fragments":["in"]},{"Key":"functions, in","Fragments":["contrast"]},{"Key":"in contrast","Fragments":["to"]},{"Key":"contrast to","Fragments":["static"]},{"Key":"to static","Fragments":["methods,"]},{"Key":"static methods,","Fragments":["unless"]},{"Key":"methods, unless","Fragments":["declared"]},{"Key":"unless declared","Fragments":["\"friend\","]},{"Key":"declared \"friend\",","Fragments":["have"]},{"Key":"\"friend\", have","Fragments":["no"]},{"Key":"class' internals,","Fragments":["which"]},{"Key":"internals, which","Fragments":["makes"]},{"Key":"them easier","Fragments":["to"]},{"Key":"to maintain.","Fragments":["Makes"]},{"Key":"maintain. Makes","Fragments":["sense,"]},{"Key":"decided against","Fragments":["using"]},{"Key":"against using","Fragments":["modulo,"]},{"Key":"using modulo,","Fragments":["division"]},{"Key":"modulo, division","Fragments":["or"]},{"Key":"division or","Fragments":["multiplication"]},{"Key":"or multiplication","Fragments":["in"]},{"Key":"multiplication in","Fragments":["the"]},{"Key":"plus method","Fragments":["to"]},{"Key":"While `for_each`","Fragments":["is"]},{"Key":"`for_each` is","Fragments":["a"]},{"Key":"nice algorithm","Fragments":["in"]},{"Key":"in general,","Fragments":["in"]},{"Key":"general, in","Fragments":["this"]},{"Key":"(auto\u0026 c:","Fragments":["dna)","rna)"]},{"Key":"c: dna)","Fragments":["c"]},{"Key":"dna) c","Fragments":["="]},{"Key":"thing, and","Fragments":["is"]},{"Key":"shorter to","Fragments":["write."]},{"Key":"side note:","Fragments":["I"]},{"Key":"place for","Fragments":["an"]},{"Key":"an inplace-transform","Fragments":["algorithm,"]},{"Key":"inplace-transform algorithm,","Fragments":["smth"]},{"Key":"algorithm, smth","Fragments":["like:"]},{"Key":" transform(dna,","Fragments":["[](char"]},{"Key":"transform(dna, [](char","Fragments":["c)"]},{"Key":"All that","Fragments":["is"]},{"Key":"is needed","Fragments":["is"]},{"Key":"needed is","Fragments":["to"]},{"Key":"overload (wrapper)","Fragments":["for"]},{"Key":"(wrapper) for","Fragments":["std::transform"]},{"Key":"for std::transform","Fragments":["somewhere"]},{"Key":"template \u003cclass","Fragments":["C,"]},{"Key":"\u003cclass C,","Fragments":["class"]},{"Key":"C, class","Fragments":["F\u003e"]},{"Key":"void transform(C\u0026","Fragments":["c,"]},{"Key":"transform(C\u0026 c,","Fragments":["F"]},{"Key":"c, F","Fragments":["f)"]},{"Key":"F f)","Fragments":["{"]},{"Key":" std::transform(begin(c),","Fragments":["end(c),"]},{"Key":"std::transform(begin(c), end(c),","Fragments":["begin(c),"]},{"Key":"end(c), begin(c),","Fragments":["f);"]},{"Key":" Pushing","Fragments":["back"]},{"Key":"Pushing back","Fragments":["on"]},{"Key":"back on","Fragments":["a"]},{"Key":"well have","Fragments":["taken","implemented"]},{"Key":"have taken","Fragments":["the"]},{"Key":"char by","Fragments":["reference"]},{"Key":"modified it","Fragments":["inplace.","to"]},{"Key":"// if","Fragments":["we're"]},{"Key":"it inplace,","Fragments":["we"]},{"Key":"inplace, we","Fragments":["could"]},{"Key":" c","Fragments":["="]},{"Key":"Also, casting","Fragments":["a"]},{"Key":"casting a","Fragments":["function"]},{"Key":"pointer feels","Fragments":["much"]},{"Key":"feels much","Fragments":["more"]},{"Key":"more messy","Fragments":["than"]},{"Key":"messy than","Fragments":["just"]},{"Key":"a lambda,","Fragments":["so"]},{"Key":"lambda, so","Fragments":["I"]},{"Key":"// static_cast\u003cchar(const","Fragments":["char)\u003e(to_rna)"]},{"Key":"auto translate","Fragments":["="]},{"Key":"translate =","Fragments":["[](char"]},{"Key":"= [](char","Fragments":["c)"]},{"Key":"length too,","Fragments":["but"]},{"Key":"talk about","Fragments":["in"]},{"Key":"about in","Fragments":["this"]},{"Key":"a waste","Fragments":["of"]},{"Key":"waste of","Fragments":["time"]},{"Key":"take `dna`","Fragments":["by"]},{"Key":"`dna` by","Fragments":["const"]},{"Key":"next line","Fragments":["you're"]},{"Key":"line you're","Fragments":["going"]},{"Key":"into rna.","Fragments":["Take"]},{"Key":"rna. Take","Fragments":["it"]},{"Key":"value, the","Fragments":["copy"]},{"Key":"copy (or","Fragments":["move!,"]},{"Key":"(or move!,","Fragments":["which"]},{"Key":"move!, which","Fragments":["your"]},{"Key":"which your","Fragments":["example"]},{"Key":"example disables)","Fragments":["gets"]},{"Key":"disables) gets","Fragments":["done"]},{"Key":"gets done","Fragments":["for"]},{"Key":"`const string`","Fragments":["instead"]},{"Key":"string` instead","Fragments":["of"]},{"Key":"`string`. There's","Fragments":["really"]},{"Key":"assignment the","Fragments":["type"]},{"Key":"object returned","Fragments":["by"]},{"Key":"string \u0026\u0026`","Fragments":["which"]},{"Key":"\u0026\u0026` which","Fragments":["also"]},{"Key":"which also","Fragments":["inhibits"]},{"Key":"also inhibits","Fragments":["moving."]},{"Key":"So const","Fragments":["correctness"]},{"Key":"correctness is","Fragments":["cool,"]},{"Key":"don't overdo","Fragments":["it."]},{"Key":"for shouting.","Fragments":["It","It"]},{"Key":"shouting. It","Fragments":["is","is"]},{"Key":"is succinct","Fragments":["and","and"]},{"Key":"and works.","Fragments":["However,"]},{"Key":"works. However,","Fragments":["I"]},{"Key":"question passed","Fragments":["all"]},{"Key":"without trimming","Fragments":["the"]},{"Key":"for trailing","Fragments":["whitespace."]},{"Key":"whitespace. The","Fragments":["question_with_trailing_whitespace"]},{"Key":"The question_with_trailing_whitespace","Fragments":["test"]},{"Key":"question_with_trailing_whitespace test","Fragments":["should"]},{"Key":"test should","Fragments":["have"]},{"Key":"have failed.","Fragments":["I'm"]},{"Key":"failed. I'm","Fragments":["also"]},{"Key":"also at","Fragments":["a"]},{"Key":"loss as","Fragments":["to"]},{"Key":"made two","Fragments":["classes"]},{"Key":"two classes","Fragments":["when"]},{"Key":"classes when","Fragments":["making"]},{"Key":"making one","Fragments":["would"]},{"Key":"clear. Also,","Fragments":["making"]},{"Key":"making booleans","Fragments":["and"]},{"Key":"booleans and","Fragments":["taking"]},{"Key":"taking time","Fragments":["to"]},{"Key":"assign to","Fragments":["each"]},{"Key":"as efficient","Fragments":["as"]},{"Key":"making functions","Fragments":["that"]},{"Key":"and calling","Fragments":["them"]},{"Key":"calling them","Fragments":["only"]},{"Key":"them only","Fragments":["if"]},{"Key":"necessary. Finally,","Fragments":["I"]},{"Key":"have wrapped","Fragments":["the"]},{"Key":"wrapped the","Fragments":["whole"]},{"Key":"a 'hey'","Fragments":["function"]},{"Key":"gets the","Fragments":["job"]},{"Key":"job done.","Fragments":["I"]},{"Key":"done. I","Fragments":["am"]},{"Key":"something though.","Fragments":["The"]},{"Key":"The ==","Fragments":["operator"]},{"Key":"== operator","Fragments":["on"]},{"Key":"operator on","Fragments":["strings"]},{"Key":"strings does","Fragments":["a"]},{"Key":"character comparison.","Fragments":["if"]},{"Key":"comparison. if","Fragments":["\"sth"]},{"Key":"if \"sth","Fragments":["=="]},{"Key":"\"sth ==","Fragments":["upper\""]},{"Key":"== upper\"","Fragments":["is"]},{"Key":"upper\" is","Fragments":["true,"]},{"Key":"true, doesn't","Fragments":["\"sth"]},{"Key":"doesn't \"sth","Fragments":["!="]},{"Key":"\"sth !=","Fragments":["lower\""]},{"Key":"!= lower\"","Fragments":["have"]},{"Key":"lower\" have","Fragments":["to"]},{"Key":"be true?","Fragments":["I"]},{"Key":"true? I","Fragments":["also"]},{"Key":"the question_with_trailing_whitespace","Fragments":["test,"]},{"Key":"question_with_trailing_whitespace test,","Fragments":["as"]},{"Key":"test, as","Fragments":["you"]},{"Key":"not removing","Fragments":["trailing"]},{"Key":"whitespace before","Fragments":["checking"]},{"Key":"mark. Also,","Fragments":["I"]},{"Key":"enumeration and","Fragments":["map"]},{"Key":"complicated. What","Fragments":["is"]},{"Key":"just returning","Fragments":["strings"]},{"Key":"returning strings","Fragments":["in"]},{"Key":"in bob::hey?","Fragments":["Finally,"]},{"Key":"bob::hey? Finally,","Fragments":["if"]},{"Key":"Finally, if","Fragments":["you","you"]},{"Key":"are writing","Fragments":["in","as"]},{"Key":"writing in","Fragments":["C++"]},{"Key":"should include","Fragments":["an"]},{"Key":"include an","Fragments":["OOP"]},{"Key":"an OOP","Fragments":["solution."]},{"Key":"a mistake.","Fragments":["Please"]},{"Key":"mistake. Please","Fragments":["disregard"]},{"Key":"Please disregard","Fragments":["iteration"]},{"Key":"disregard iteration","Fragments":["2!"]},{"Key":"iteration 2!","Fragments":["(shouldn't"]},{"Key":"2! (shouldn't","Fragments":["have"]},{"Key":"(shouldn't have","Fragments":["uploaded"]},{"Key":"Looks really","Fragments":["good"]},{"Key":"is labeled","Fragments":["\"nitpick,\""]},{"Key":"labeled \"nitpick,\"","Fragments":["maybe"]},{"Key":"\"nitpick,\" maybe","Fragments":["I'll"]},{"Key":"maybe I'll","Fragments":["recommend"]},{"Key":"I'll recommend","Fragments":["checking"]},{"Key":"for common","Fragments":["tasks"]},{"Key":"common tasks","Fragments":["like"]},{"Key":"tasks like","Fragments":["stripping"]},{"Key":"like stripping","Fragments":["white"]},{"Key":"stripping white","Fragments":["space,"]},{"Key":"space, for","Fragments":["example"]},{"Key":"example `boost::algorithm::trim(str)`","Fragments":["is"]},{"Key":"`boost::algorithm::trim(str)` is","Fragments":["useful."]},{"Key":"initial solutions","Fragments":["will"]},{"Key":"solutions will","Fragments":["consider"]},{"Key":"will consider","Fragments":["\"aaaaa,ARE"]},{"Key":"consider \"aaaaa,ARE","Fragments":["YOU"]},{"Key":"\"aaaaa,ARE YOU","Fragments":["OK?\""]},{"Key":"YOU OK?\"","Fragments":["as"]},{"Key":"OK?\" as","Fragments":["shouting."]},{"Key":"not equal","Fragments":["in","in"]},{"Key":"equal in","Fragments":["size.","size."]},{"Key":"in size.","Fragments":["I","You"]},{"Key":"size. I","Fragments":["don't","also"]},{"Key":"have passed","Fragments":["all","all","all","all"]},{"Key":"without doing","Fragments":["so."]},{"Key":"doing so.","Fragments":["Also,"]},{"Key":"so. Also,","Fragments":["you"]},{"Key":"use both","Fragments":["sequences"]},{"Key":"both sequences","Fragments":["to"]},{"Key":"sequences to","Fragments":["see"]},{"Key":"end iterator,","Fragments":["since"]},{"Key":"iterator, since","Fragments":["they"]},{"Key":"same size.","Fragments":["Finally,"]},{"Key":"size. Finally,","Fragments":["you"]},{"Key":"int for","Fragments":["the","your","your","your","your","your","your"]},{"Key":"the distance,","Fragments":["as"]},{"Key":"distance, as","Fragments":["that"]},{"Key":"expressive of","Fragments":["the"]},{"Key":"problem (the","Fragments":["distance"]},{"Key":"(the distance","Fragments":["can't"]},{"Key":"distance can't","Fragments":["be"]},{"Key":"some OOP","Fragments":["techniques.","techniques","techniques","techniques","techniques"]},{"Key":"OOP techniques.","Fragments":["It"]},{"Key":"techniques. It","Fragments":["would"]},{"Key":" Look","Fragments":["at","at","at","at","at"]},{"Key":"file. Instead","Fragments":["of"]},{"Key":"using minLength,","Fragments":["you"]},{"Key":"minLength, you","Fragments":["need"]},{"Key":"the sizes","Fragments":["are"]},{"Key":"sizes are","Fragments":["unequal.","unequal."]},{"Key":"are unequal.","Fragments":["You","I","I"]},{"Key":"unequal. You","Fragments":["might"]},{"Key":"looping using","Fragments":["indexes"]},{"Key":"using indexes","Fragments":["and"]},{"Key":"indexes and","Fragments":["etc."]},{"Key":"and etc.","Fragments":["Finally,"]},{"Key":"etc. Finally,","Fragments":["if"]},{"Key":"C++ using","Fragments":["some"]},{"Key":"OOP techniques","Fragments":["might","might","a","might","would","in"]},{"Key":"techniques might","Fragments":["not","be","have"]},{"Key":"suite. You","Fragments":["need","must","must","are","are"]},{"Key":"unequal. I","Fragments":["don't","don't"]},{"Key":"all tests?","Fragments":["You"]},{"Key":"tests? You","Fragments":["might"]},{"Key":"using indexes.","Fragments":["Finally,","Just","You"]},{"Key":"indexes. Finally,","Fragments":["since"]},{"Key":"using C++,","Fragments":["some","it","using"]},{"Key":"C++, some","Fragments":["OOP"]},{"Key":"namespace containing","Fragments":["a"]},{"Key":"containing a","Fragments":["compute"]},{"Key":"a compute","Fragments":["function","functions."]},{"Key":"compute function","Fragments":["rather"]},{"Key":"your score.","Fragments":["It"]},{"Key":"score. It","Fragments":["is"]},{"Key":"expressive that","Fragments":["way"]},{"Key":"way (automatically","Fragments":["know"]},{"Key":"(automatically know","Fragments":["there"]},{"Key":"know there","Fragments":["can","another"]},{"Key":"no negative","Fragments":["scores)."]},{"Key":"You must","Fragments":["throw","throw"]},{"Key":"must throw","Fragments":["a","std::domain_error"]},{"Key":"not equal.","Fragments":["I"]},{"Key":"equal. I","Fragments":["don't"]},{"Key":"tests! Since","Fragments":["you"]},{"Key":"C++, it","Fragments":["might"]},{"Key":"use OOP","Fragments":["techniques"]},{"Key":"techniques a","Fragments":["bit."]},{"Key":"bit. Finally,","Fragments":["you"]},{"Key":"your hamming","Fragments":["variable,"]},{"Key":"hamming variable,","Fragments":["as"]},{"Key":"variable, as","Fragments":["it","it","it","it","it"]},{"Key":"than zero","Fragments":["(makes"]},{"Key":"zero (makes","Fragments":["your"]},{"Key":"(makes your","Fragments":["code"]},{"Key":"indexes. Just","Fragments":["my"]},{"Key":"bias on","Fragments":["that"]},{"Key":"that though.","Fragments":["Iterators"]},{"Key":"though. Iterators","Fragments":["are"]},{"Key":"Iterators are","Fragments":["more"]},{"Key":"more C++,","Fragments":["while"]},{"Key":"C++, while","Fragments":["you"]},{"Key":"throw std::domain_error","Fragments":["if","if"]},{"Key":"different sizes.","Fragments":["I","I"]},{"Key":"sizes. I","Fragments":["don't","don't"]},{"Key":"all tests.","Fragments":["I"]},{"Key":"\"auto\" keyword","Fragments":["instead"]},{"Key":"keyword instead","Fragments":["of"]},{"Key":"of \"string::const_iterator\",","Fragments":["it"]},{"Key":"\"string::const_iterator\", it","Fragments":["just"]},{"Key":"just reads","Fragments":["better"]},{"Key":"reads better","Fragments":["that"]},{"Key":"way. You","Fragments":["might"]},{"Key":"your count","Fragments":["variable,"]},{"Key":"count variable,","Fragments":["as"]},{"Key":"than zero,","Fragments":["and","and","and","so"]},{"Key":"zero, and","Fragments":["that","that","that"]},{"Key":"more expressive.","Fragments":["Finally,"]},{"Key":"expressive. Finally,","Fragments":["since"]},{"Key":"C++, using","Fragments":["some"]},{"Key":"suite, you","Fragments":["need"]},{"Key":"indexes. You","Fragments":["might","might","are"]},{"Key":"your \"length\"","Fragments":["variable,"]},{"Key":"\"length\" variable,","Fragments":["as"]},{"Key":"expressive (it","Fragments":["can't"]},{"Key":"(it can't","Fragments":["be"]},{"Key":"than zero).","Fragments":["I"]},{"Key":"zero). I","Fragments":["also"]},{"Key":"with previous","Fragments":["comments."]},{"Key":"previous comments.","Fragments":["I"]},{"Key":"using OOP","Fragments":["techniques"]},{"Key":"techniques would","Fragments":["be"]},{"Key":"just might","Fragments":["not"]},{"Key":"C++ as","Fragments":["much."]},{"Key":"suite. It's","Fragments":["supposed"]},{"Key":"It's supposed","Fragments":["to"]},{"Key":"the sequences","Fragments":["are"]},{"Key":"are unequal","Fragments":["size."]},{"Key":"unequal size.","Fragments":["I"]},{"Key":"C++ if","Fragments":["you"]},{"Key":"used iterators","Fragments":["instead"]},{"Key":"of indexes.","Fragments":["You","You"]},{"Key":"your \"diff\"","Fragments":["variable,"]},{"Key":"\"diff\" variable,","Fragments":["as"]},{"Key":"it cannot","Fragments":["be","be"]},{"Key":"two sizes","Fragments":["are"]},{"Key":"without it.","Fragments":["I"]},{"Key":"of inner_product()","Fragments":["though."]},{"Key":"inner_product() though.","Fragments":["You"]},{"Key":"might include","Fragments":["in"]},{"Key":"in comments","Fragments":["what"]},{"Key":"comments what","Fragments":["is"]},{"Key":"your \"hamming.h\"","Fragments":["file."]},{"Key":"\"hamming.h\" file.","Fragments":["Finally,"]},{"Key":"file. Finally,","Fragments":["you"]},{"Key":"result variable,","Fragments":["as"]},{"Key":"std::domain_error exception","Fragments":["if"]},{"Key":"size. You","Fragments":["might"]},{"Key":"writing as","Fragments":["if"]},{"Key":"if C++","Fragments":["were"]},{"Key":"C++ were","Fragments":["C."]},{"Key":"were C.","Fragments":["I"]},{"Key":"guess there","Fragments":["isn't"]},{"Key":"isn't anything","Fragments":["wrong","in"]},{"Key":"do things","Fragments":["more"]},{"Key":"more the","Fragments":["C++"]},{"Key":"way (which","Fragments":["to"]},{"Key":"(which to","Fragments":["me"]},{"Key":"is better).","Fragments":["Along"]},{"Key":"better). Along","Fragments":["those"]},{"Key":"Along those","Fragments":["lines,"]},{"Key":"those lines,","Fragments":["you"]},{"Key":"lines, you","Fragments":["might"]},{"Key":"have included","Fragments":["some"]},{"Key":"included some","Fragments":["OOP"]},{"Key":"techniques in","Fragments":["your"]},{"Key":"your answer.","Fragments":["You"]},{"Key":"answer. You","Fragments":["might"]},{"Key":"your \"d\"","Fragments":["variable."]},{"Key":"\"d\" variable.","Fragments":["It"]},{"Key":"variable. It","Fragments":["can't"]},{"Key":"It can't","Fragments":["be"]},{"Key":"features in","Fragments":["your"]},{"Key":"1. typedef","Fragments":["=\u003e"]},{"Key":"typedef =\u003e","Fragments":["using,"]},{"Key":"=\u003e using,","Fragments":["reads"]},{"Key":"using, reads","Fragments":["much"]},{"Key":"reads much","Fragments":["cleaner:"]},{"Key":"using SubjectMap","Fragments":["="]},{"Key":"SubjectMap =","Fragments":["std::map\u003cchar,"]},{"Key":"= std::map\u003cchar,","Fragments":["int\u003e;"]},{"Key":"2. initialize","Fragments":["mSubject"]},{"Key":"initialize mSubject","Fragments":["in"]},{"Key":"mSubject in","Fragments":["the"]},{"Key":"constructor, otherwise","Fragments":["you"]},{"Key":"will first","Fragments":["get"]},{"Key":"first get","Fragments":["a"]},{"Key":"default constructed","Fragments":["string"]},{"Key":"constructed string","Fragments":["and"]},{"Key":"copy assigned","Fragments":["one"]},{"Key":"assigned one","Fragments":["(not"]},{"Key":"one (not","Fragments":["c++11"]},{"Key":"(not c++11","Fragments":["but"]},{"Key":"c++11 but","Fragments":["a"]},{"Key":"good practice).","Fragments":["With"]},{"Key":"practice). With","Fragments":["the"]},{"Key":"list you","Fragments":["just"]},{"Key":"copy constructed","Fragments":["one."]},{"Key":" anagram(const","Fragments":["std::string\u0026","std::string\u0026","std::string\u0026"]},{"Key":"anagram(const std::string\u0026","Fragments":["subject)","input)","input)"]},{"Key":"std::string\u0026 subject)","Fragments":[":"]},{"Key":"subject) :","Fragments":["mSubject{subject}"]},{"Key":": mSubject{subject}","Fragments":["{"]},{"Key":"3. There's","Fragments":["really"]},{"Key":"use std::list","Fragments":["unless"]},{"Key":"std::list unless","Fragments":["you"]},{"Key":"be inserting","Fragments":["into"]},{"Key":"the container","Fragments":["all"]},{"Key":"container all","Fragments":["the"]},{"Key":"time. All","Fragments":["you're"]},{"Key":"All you're","Fragments":["doing"]},{"Key":"doing is","Fragments":["pushing"]},{"Key":"is pushing","Fragments":["back,"]},{"Key":"pushing back,","Fragments":["so"]},{"Key":"back, so","Fragments":["just"]},{"Key":"so just","Fragments":["stick"]},{"Key":"just stick","Fragments":["to"]},{"Key":"4. Operator[]","Fragments":["of"]},{"Key":"Operator[] of","Fragments":["map"]},{"Key":"map defaut","Fragments":["constructs"]},{"Key":"defaut constructs","Fragments":["a"]},{"Key":"isn't present","Fragments":["in"]},{"Key":"map. So","Fragments":["you"]},{"Key":"could (should!)","Fragments":["simplify"]},{"Key":"(should!) simplify","Fragments":["that"]},{"Key":"that section","Fragments":["of"]},{"Key":"of `matches`","Fragments":["by"]},{"Key":"`matches` by","Fragments":["doing","const"]},{"Key":"doing (range","Fragments":["for"]},{"Key":"(range for","Fragments":["loop):"]},{"Key":" SubjectMap","Fragments":["map;"]},{"Key":"auto\u0026 c","Fragments":[":"]},{"Key":"5. You","Fragments":["don't"]},{"Key":"don't ever","Fragments":["have"]},{"Key":"ever have","Fragments":["to"]},{"Key":"write `vector\u003cstring\u003e::const_iterator`,","Fragments":["you"]},{"Key":"`vector\u003cstring\u003e::const_iterator`, you","Fragments":["can"]},{"Key":"use auto:","Fragments":["`for"]},{"Key":"auto: `for","Fragments":["(auto"]},{"Key":"= words.begin();","Fragments":["..."]},{"Key":"words.begin(); ...","Fragments":[")`."]},{"Key":"... )`.","Fragments":["Or"]},{"Key":")`. Or","Fragments":["better"]},{"Key":"Or better","Fragments":["yet,"]},{"Key":"auto\u0026 word","Fragments":[":"]},{"Key":"6. Instead","Fragments":["of"]},{"Key":"a map,","Fragments":["and","but"]},{"Key":"removing counts","Fragments":["from"]},{"Key":"counts from","Fragments":["it,"]},{"Key":"from it,","Fragments":["why"]},{"Key":"it, why","Fragments":["not"]},{"Key":"a `createCharCountMap`","Fragments":["function"]},{"Key":"`createCharCountMap` function","Fragments":["and"]},{"Key":"two maps?","Fragments":["That"]},{"Key":"maps? That","Fragments":["way"]},{"Key":"could reuse","Fragments":["the"]},{"Key":"already wrote,","Fragments":["and"]},{"Key":"wrote, and","Fragments":["comparing"]},{"Key":"comparing two","Fragments":["maps"]},{"Key":"maps could","Fragments":["be"]},{"Key":"nice challenging","Fragments":["subroutine"]},{"Key":"challenging subroutine","Fragments":["to"]},{"Key":"subroutine to","Fragments":["write."]},{"Key":"to rethink","Fragments":["your"]},{"Key":"rethink your","Fragments":["algorithm."]},{"Key":"your algorithm.","Fragments":["By"]},{"Key":"algorithm. By","Fragments":["converting"]},{"Key":"By converting","Fragments":["the"]},{"Key":"to lowercase,","Fragments":["then"]},{"Key":"lowercase, then","Fragments":["sorting"]},{"Key":"then sorting","Fragments":["them"]},{"Key":"sorting them","Fragments":["and"]},{"Key":"and comparing,","Fragments":["you"]},{"Key":"comparing, you","Fragments":["could"]},{"Key":"about 4","Fragments":["lines."]},{"Key":" Three","Fragments":["suggestions:"]},{"Key":"1. Take","Fragments":["the"]},{"Key":"Take the","Fragments":["vector"]},{"Key":"to `matches`","Fragments":["by"]},{"Key":"reference. You","Fragments":["don't"]},{"Key":"it copied","Fragments":["into"]},{"Key":"copied into","Fragments":["the"]},{"Key":"function everytime","Fragments":["it"]},{"Key":"everytime it","Fragments":["is"]},{"Key":"using StringVec","Fragments":["="]},{"Key":"StringVec =","Fragments":["std::vector\u003cstd::string\u003e"]},{"Key":" StringVec","Fragments":["anagram::matches(const"]},{"Key":"StringVec anagram::matches(const","Fragments":["StringVec\u0026"]},{"Key":"anagram::matches(const StringVec\u0026","Fragments":["wordList)"]},{"Key":"same concerns","Fragments":["the"]},{"Key":"concerns the","Fragments":["`word`"]},{"Key":"the `word`","Fragments":["in"]},{"Key":"`word` in","Fragments":["the"]},{"Key":"the range-for","Fragments":["loop."]},{"Key":"range-for loop.","Fragments":["You"]},{"Key":"iteration, you","Fragments":["really"]},{"Key":"enable you","Fragments":["to"]},{"Key":"copy it,","Fragments":["check"]},{"Key":"it, check","Fragments":["conditions"]},{"Key":"check conditions","Fragments":["and"]},{"Key":"conditions and","Fragments":["then"]},{"Key":"then push","Fragments":["it"]},{"Key":"push it","Fragments":["into"]},{"Key":"(auto\u0026 word","Fragments":[":"]},{"Key":"linear logic","Fragments":["in"]},{"Key":"loop, less","Fragments":["nested"]},{"Key":"less nested","Fragments":["if"]},{"Key":"nested if","Fragments":["conditions."]},{"Key":"if conditions.","Fragments":["You"]},{"Key":"conditions. You","Fragments":["could"]},{"Key":"could rewrite","Fragments":["it"]},{"Key":"for (...)","Fragments":["{"]},{"Key":"if (m_wordLower","Fragments":["=="]},{"Key":"(m_wordLower ==","Fragments":["wordChars)"]},{"Key":"if (wordChars","Fragments":["=="]},{"Key":"(wordChars ==","Fragments":["m_wordSorted)"]},{"Key":"also becomes","Fragments":["clear"]},{"Key":"becomes clear","Fragments":["that"]},{"Key":"fact an","Fragments":["`algorithm`"]},{"Key":"an `algorithm`","Fragments":["call"]},{"Key":"`algorithm` call","Fragments":["we"]},{"Key":"call we","Fragments":["are"]},{"Key":"with here:","Fragments":["`std::copy_if`!"]},{"Key":"here: `std::copy_if`!","Fragments":["Neat."]},{"Key":"input, did","Fragments":["you","you"]},{"Key":"`const unsigned","Fragments":["int\u0026`","int\u0026`","int\u0026`"]},{"Key":"unsigned int\u0026`","Fragments":["instead","instead","actually"]},{"Key":"int\u0026` instead","Fragments":["of","of"]},{"Key":"`int` just","Fragments":["for","for"]},{"Key":"for faster","Fragments":["run","run","access."]},{"Key":"faster run","Fragments":["times?","times?"]},{"Key":"run times?","Fragments":["Just","Just"]},{"Key":"times? Just","Fragments":["curious.","curious."]},{"Key":"up most","Fragments":["of"]},{"Key":"solution just","Fragments":["fell"]},{"Key":"just fell","Fragments":["out"]},{"Key":"fell out","Fragments":["naturally"]},{"Key":"out naturally","Fragments":["from"]},{"Key":"naturally from","Fragments":["the"]},{"Key":"requirements, so","Fragments":["there"]},{"Key":"real alternative","Fragments":["direction"]},{"Key":"alternative direction","Fragments":["to"]},{"Key":"namespace because","Fragments":["there"]},{"Key":"were no","Fragments":["data"]},{"Key":"no data","Fragments":["members,"]},{"Key":"data members,","Fragments":["so"]},{"Key":"members, so","Fragments":["a"]},{"Key":"been unnecessary","Fragments":["overhead"]},{"Key":"each message","Fragments":["because"]},{"Key":"message because","Fragments":["regular"]},{"Key":"because regular","Fragments":["expressions"]},{"Key":"expressions can","Fragments":["be"]},{"Key":"bit difficult","Fragments":["to"]},{"Key":"- Considered","Fragments":["ensuring"]},{"Key":"Considered ensuring","Fragments":["that"]},{"Key":"ensuring that","Fragments":["the"]},{"Key":"in was","Fragments":["null"]},{"Key":"was null","Fragments":["terminated"]},{"Key":"null terminated","Fragments":["by"]},{"Key":"terminated by","Fragments":["imposing"]},{"Key":"by imposing","Fragments":["a"]},{"Key":"imposing a","Fragments":["size"]},{"Key":"size limit,","Fragments":["but"]},{"Key":"limit, but","Fragments":["instead"]},{"Key":"but instead","Fragments":["just"]},{"Key":"just assumed","Fragments":["that"]},{"Key":"the contract","Fragments":["for"]},{"Key":"contract for","Fragments":["this"]},{"Key":"method so","Fragments":["that"]},{"Key":"size limit","Fragments":["would"]},{"Key":"limit would","Fragments":["not"]},{"Key":"- Iteratively","Fragments":["built"]},{"Key":"Iteratively built","Fragments":["up"]},{"Key":"tests failed,","Fragments":["which"]},{"Key":"failed, which","Fragments":["was"]},{"Key":"interesting introduction","Fragments":["to"]},{"Key":"Used regular","Fragments":["expressions"]},{"Key":"expressions instead","Fragments":["of"]},{"Key":"of attempting","Fragments":["to"]},{"Key":"scan through","Fragments":["the"]},{"Key":"find certain","Fragments":["characters"]},{"Key":"certain characters","Fragments":["because"]},{"Key":"characters because","Fragments":["it"]},{"Key":"seemed easier","Fragments":["to"]},{"Key":"the messages","Fragments":["this"]},{"Key":"messages this","Fragments":["way,"]},{"Key":"and regular","Fragments":["expressions"]},{"Key":"expressions are","Fragments":["just"]},{"Key":"standard tool","Fragments":["for"]},{"Key":"for matching","Fragments":["strings"]},{"Key":"matching strings","Fragments":["like"]},{"Key":"used word","Fragments":["a"]},{"Key":"word a","Fragments":["separator"]},{"Key":"separator list.","Fragments":["I"]},{"Key":"list. I","Fragments":["referred"]},{"Key":"I referred","Fragments":["to"]},{"Key":"example given","Fragments":["in"]},{"Key":"given in","Fragments":["the"]},{"Key":"the link","Fragments":["below"]},{"Key":"link below","Fragments":["to"]},{"Key":"below to","Fragments":["create"]},{"Key":"the separator.","Fragments":["I"]},{"Key":"separator. I","Fragments":["think"]},{"Key":"add those","Fragments":["separators"]},{"Key":"those separators","Fragments":["to"]},{"Key":"separators to","Fragments":["the"]},{"Key":"list (","Fragments":["but"]},{"Key":"( but","Fragments":["not"]},{"Key":"Regarding backslashes,","Fragments":["in"]},{"Key":"backslashes, in","Fragments":["visual"]},{"Key":"in visual","Fragments":["studio,"]},{"Key":"visual studio,","Fragments":["when"]},{"Key":"studio, when","Fragments":["I"]},{"Key":" `#include","Fragments":["\"bo`","\"boost\\`"]},{"Key":"then hit","Fragments":["tab,"]},{"Key":"hit tab,","Fragments":["then"]},{"Key":"tab, then","Fragments":["it"]},{"Key":"it automatically","Fragments":["adds"]},{"Key":"automatically adds","Fragments":["the"]},{"Key":"boost plus","Fragments":["the"]},{"Key":"plus the","Fragments":["backslash","slightly"]},{"Key":"the backslash","Fragments":["character."]},{"Key":"use forward","Fragments":["slash"]},{"Key":"forward slash","Fragments":["now"]},{"Key":"slash now","Fragments":["on,"]},{"Key":"What was","Fragments":["the"]},{"Key":"all enviroment","Fragments":["set."]},{"Key":"complete life","Fragments":["cycle."]},{"Key":" windows7","Fragments":["64bit"]},{"Key":"The older","Fragments":["tests"]},{"Key":"older tests","Fragments":["against"]},{"Key":"tests against","Fragments":["which"]},{"Key":"against which","Fragments":["i"]},{"Key":"which i","Fragments":["coded"]},{"Key":"i coded","Fragments":["did"]},{"Key":"coded did","Fragments":["not"]},{"Key":"a \"throw","Fragments":["std::domain_error\""]},{"Key":"\"throw std::domain_error\"","Fragments":["case,"]},{"Key":"std::domain_error\" case,","Fragments":["they"]},{"Key":"case, they","Fragments":["had"]},{"Key":"they had","Fragments":["a"]},{"Key":"a \"ignore","Fragments":["additional"]},{"Key":"\"ignore additional","Fragments":["elements"]},{"Key":"additional elements","Fragments":["on"]},{"Key":"elements on","Fragments":["longer"]},{"Key":"on longer","Fragments":["string\""]},{"Key":"longer string\"","Fragments":["case."]},{"Key":" Hamming.h","Fragments":["does"]},{"Key":"Hamming.h does","Fragments":["not"]},{"Key":"too interesting:","Fragments":["it"]},{"Key":"interesting: it","Fragments":["can"]},{"Key":"have either","Fragments":["a"]},{"Key":"a hamming","Fragments":["class"]},{"Key":"hamming class","Fragments":["with"]},{"Key":"static compute","Fragments":["member"]},{"Key":"compute member","Fragments":["function,"]},{"Key":"namespace hamming","Fragments":["with"]},{"Key":"hamming with","Fragments":["a"]},{"Key":"compute functions.","Fragments":["Either"]},{"Key":"functions. Either","Fragments":["way,"]},{"Key":"way, not","Fragments":["much"]},{"Key":"have mixed","Fragments":["feelings"]},{"Key":"mixed feelings","Fragments":["concerning"]},{"Key":"feelings concerning","Fragments":["your"]},{"Key":"concerning your","Fragments":["unsigned"]},{"Key":"your unsigned","Fragments":["suggestion."]},{"Key":"unsigned suggestion.","Fragments":["In"]},{"Key":"suggestion. In","Fragments":["general"]},{"Key":"I belong","Fragments":["to"]},{"Key":"\"always use","Fragments":["int\""]},{"Key":"use int\"","Fragments":["club,"]},{"Key":"int\" club,","Fragments":["but"]},{"Key":"club, but","Fragments":["its"]},{"Key":"its also","Fragments":["true"]},{"Key":"also true","Fragments":["that"]},{"Key":"that distances","Fragments":["generally"]},{"Key":"distances generally","Fragments":["are"]},{"Key":"generally are","Fragments":["non-negative"]},{"Key":"are non-negative","Fragments":["by"]},{"Key":"non-negative by","Fragments":["definition."]},{"Key":"by definition.","Fragments":["But"]},{"Key":"definition. But","Fragments":["I"]},{"Key":"real difference","Fragments":["in"]},{"Key":"in expressiveness.","Fragments":["If"]},{"Key":"expressiveness. If","Fragments":["anything,"]},{"Key":"If anything,","Fragments":["I"]},{"Key":"anything, I","Fragments":["would"]},{"Key":"generic via","Fragments":["c++14"]},{"Key":"via c++14","Fragments":["features:"]},{"Key":"that causes","Fragments":["a"]},{"Key":"causes a","Fragments":["switch"]},{"Key":"between signed/unsigned","Fragments":["is"]},{"Key":"signed/unsigned is","Fragments":["the"]},{"Key":"the init","Fragments":["literal"]},{"Key":"init literal","Fragments":["`0`"]},{"Key":"literal `0`","Fragments":["or"]},{"Key":"`0` or","Fragments":["`0u`."]},{"Key":"or `0u`.","Fragments":["Now"]},{"Key":"`0u`. Now","Fragments":["if"]},{"Key":"it, does","Fragments":["that"]},{"Key":"really make","Fragments":["the"]},{"Key":"code more/less","Fragments":["expressive?"]},{"Key":"more/less expressive?","Fragments":["I"]},{"Key":"expressive? I","Fragments":["think"]},{"Key":"yes good","Fragments":["one"]},{"Key":"just focused","Fragments":["on"]},{"Key":"tests. I'm","Fragments":["going"]},{"Key":"to further","Fragments":["refactor"]},{"Key":"further refactor","Fragments":["the"]},{"Key":"the codes","Fragments":["I"]},{"Key":"codes I","Fragments":["written"]},{"Key":"I written","Fragments":["to"]},{"Key":" modified","Fragments":["to"]},{"Key":"modified to","Fragments":["use"]},{"Key":"use libraries","Fragments":["to"]},{"Key":"libraries to","Fragments":["make"]},{"Key":"exercise I've","Fragments":["never"]},{"Key":"never done","Fragments":["before,"]},{"Key":"done before,","Fragments":["but"]},{"Key":"I'd definitely","Fragments":["like"]},{"Key":"and look","Fragments":["at"]},{"Key":"this again","Fragments":["in"]},{"Key":"spent about","Fragments":["20"]},{"Key":"about 20","Fragments":["minutes"]},{"Key":"20 minutes","Fragments":["on"]},{"Key":"minutes on","Fragments":["this"]},{"Key":"this total,","Fragments":["and"]},{"Key":"total, and","Fragments":["used"]},{"Key":"Boost tokenizer","Fragments":["made"]},{"Key":"tokenizer made","Fragments":["this"]},{"Key":"exercise way","Fragments":["easier"]},{"Key":"way easier","Fragments":["than"]},{"Key":"it probobly","Fragments":["should"]},{"Key":"probobly should","Fragments":["have"]},{"Key":"have been.","Fragments":["The"]},{"Key":"been. The","Fragments":["only"]},{"Key":"which required","Fragments":["some"]},{"Key":"required some","Fragments":["fancy","odd"]},{"Key":"some fancy","Fragments":["work"]},{"Key":"fancy work","Fragments":["was"]},{"Key":"work was","Fragments":["the"]},{"Key":"the apostrophes--they","Fragments":["required"]},{"Key":"apostrophes--they required","Fragments":["some"]},{"Key":"odd checks","Fragments":["inside"]},{"Key":"checks inside","Fragments":["the"]},{"Key":"private `squares()`","Fragments":["and"]},{"Key":"`squares()` and","Fragments":["`~squares()`"]},{"Key":"and `~squares()`","Fragments":["functions"]},{"Key":"`~squares()` functions","Fragments":["for?"]},{"Key":"functions for?","Fragments":["Also"]},{"Key":"for? Also","Fragments":["what"]},{"Key":"Also what","Fragments":["are"]},{"Key":"compiler directions","Fragments":["`define`"]},{"Key":"directions `define`","Fragments":["and"]},{"Key":"`define` and","Fragments":["`ifndef`"]},{"Key":"and `ifndef`","Fragments":["for?"]},{"Key":"`ifndef` for?","Fragments":["They"]},{"Key":"for? They","Fragments":["are"]},{"Key":"used nowhere","Fragments":["else"]},{"Key":"nowhere else","Fragments":["in"]},{"Key":" JAC42,","Fragments":["The"]},{"Key":"JAC42, The","Fragments":["exception"]},{"Key":"tests. Note","Fragments":["that"]},{"Key":"was submitted","Fragments":["3"]},{"Key":"submitted 3","Fragments":["months"]},{"Key":"3 months","Fragments":["ago."]},{"Key":"have iterated","Fragments":["over"]},{"Key":"a range,","Fragments":["but"]},{"Key":"have required","Fragments":["me"]},{"Key":"required me","Fragments":["to"]},{"Key":"either find","Fragments":["an"]},{"Key":"appropriate range","Fragments":["iterator"]},{"Key":"range iterator","Fragments":["generator"]},{"Key":"iterator generator","Fragments":["in"]},{"Key":"generator in","Fragments":["the"]},{"Key":"library or","Fragments":["implement"]},{"Key":"or implement","Fragments":["my"]},{"Key":"own. I","Fragments":["consider"]},{"Key":"consider neither","Fragments":["to"]},{"Key":"neither to","Fragments":["be"]},{"Key":"choice. I","Fragments":["try"]},{"Key":"to refrain","Fragments":["from"]},{"Key":"refrain from","Fragments":["using"]},{"Key":"boost because","Fragments":["that"]},{"Key":"would severely","Fragments":["limit"]},{"Key":"severely limit","Fragments":["portability."]},{"Key":"always tail","Fragments":["recursion..."]},{"Key":"tail recursion...","Fragments":[";)"]},{"Key":"that gcc","Fragments":["does"]},{"Key":"gcc does","Fragments":["tail-call"]},{"Key":"does tail-call","Fragments":["optimization"]},{"Key":"tail-call optimization","Fragments":["as"]},{"Key":"optimization as","Fragments":["long"]},{"Key":"pass references","Fragments":["to"]},{"Key":"to local","Fragments":["variables?"]},{"Key":"what makes","Fragments":["the"]},{"Key":"readable. You","Fragments":["get"]},{"Key":"readability as","Fragments":["a"]},{"Key":"a side-effect","Fragments":["of"]},{"Key":"of properly","Fragments":["named"]},{"Key":"properly named","Fragments":["high"]},{"Key":"named high","Fragments":["level"]},{"Key":"high level","Fragments":["functions"]},{"Key":"level functions","Fragments":["being"]},{"Key":"functions being","Fragments":["available"]},{"Key":"being available","Fragments":["in"]},{"Key":"library. You","Fragments":["might"]},{"Key":"have implemented","Fragments":["these"]},{"Key":"implemented these","Fragments":["functions"]},{"Key":"To summarize:","Fragments":["Any"]},{"Key":"summarize: Any","Fragments":["piece"]},{"Key":"Any piece","Fragments":["of"]},{"Key":"functions small","Fragments":["and"]},{"Key":"and correctly","Fragments":["named."]},{"Key":"is way","Fragments":["better","higher"]},{"Key":"way better","Fragments":["than"]},{"Key":"anything except","Fragments":["maybe"]},{"Key":"except maybe","Fragments":["including"]},{"Key":"maybe including","Fragments":["the"]},{"Key":"whole namespace","Fragments":["std"]},{"Key":"have easily","Fragments":["done"]},{"Key":"easily done","Fragments":["\"using"]},{"Key":"done \"using","Fragments":["std::string\""]},{"Key":"\"using std::string\"","Fragments":["etc."]},{"Key":"std::string\" etc.","Fragments":["You"]},{"Key":"use _that_","Fragments":["many"]},{"Key":"_that_ many","Fragments":["things"]},{"Key":"many things","Fragments":["in"]},{"Key":"in std","Fragments":["namespace."]},{"Key":"namespace. The","Fragments":["thing"]},{"Key":"did differently","Fragments":["than"]},{"Key":"differently than","Fragments":["me"]},{"Key":"than me","Fragments":["was"]},{"Key":"was use","Fragments":["regular"]},{"Key":"expressions for","Fragments":["everything."]},{"Key":"for everything.","Fragments":["Good"]},{"Key":"everything. Good","Fragments":["job."]},{"Key":" Whew,","Fragments":["I"]},{"Key":"Whew, I","Fragments":["have"]},{"Key":"to disagree","Fragments":["with"]},{"Key":"that recommendation","Fragments":["pretty"]},{"Key":"recommendation pretty","Fragments":["strongly."]},{"Key":"pretty strongly.","Fragments":["If"]},{"Key":"strongly. If","Fragments":["you"]},{"Key":"find yourself","Fragments":["naming"]},{"Key":"yourself naming","Fragments":["something"]},{"Key":"naming something","Fragments":["other"]},{"Key":"something other","Fragments":["than"]},{"Key":"index \"i\",","Fragments":["the"]},{"Key":"\"i\", the","Fragments":["problem"]},{"Key":"that name,","Fragments":["not"]},{"Key":"name, not","Fragments":["this"]},{"Key":"one. And","Fragments":["if"]},{"Key":"if you've","Fragments":["got"]},{"Key":"got so","Fragments":["many"]},{"Key":"many deeply","Fragments":["nested"]},{"Key":"nested loops","Fragments":["that"]},{"Key":"can't remember","Fragments":["if"]},{"Key":"remember if","Fragments":["\"i\""]},{"Key":"if \"i\"","Fragments":["has"]},{"Key":"\"i\" has","Fragments":["been"]},{"Key":"been used,","Fragments":["you"]},{"Key":"used, you","Fragments":["need,"]},{"Key":"you need,","Fragments":["at"]},{"Key":"need, at","Fragments":["a"]},{"Key":"minimum, some","Fragments":["sub-functions."]},{"Key":"some sub-functions.","Fragments":["For"]},{"Key":"sub-functions. For","Fragments":["me,"]},{"Key":"me, things","Fragments":["like"]},{"Key":"like i,","Fragments":["j,"]},{"Key":"i, j,","Fragments":["k,"]},{"Key":"j, k,","Fragments":["are"]},{"Key":"k, are","Fragments":["so"]},{"Key":"so ubiquitous","Fragments":["for"]},{"Key":"ubiquitous for","Fragments":["loop"]},{"Key":"loop indices","Fragments":["that"]},{"Key":"indices that","Fragments":["using"]},{"Key":"that implies","Fragments":["some"]},{"Key":"implies some","Fragments":["kind"]},{"Key":"of meaning.","Fragments":["While"]},{"Key":"meaning. While","Fragments":["iii"]},{"Key":"While iii","Fragments":["is"]},{"Key":"iii is","Fragments":["pretty"]},{"Key":"pretty clearly","Fragments":["meaningless,"]},{"Key":"clearly meaningless,","Fragments":["I'll"]},{"Key":"meaningless, I'll","Fragments":["grant"]},{"Key":"I'll grant","Fragments":["you,"]},{"Key":"grant you,","Fragments":["the"]},{"Key":"cost in","Fragments":["reading"]},{"Key":"reading it,","Fragments":["a"]},{"Key":"it, a","Fragments":["very"]},{"Key":"common task,","Fragments":["is"]},{"Key":"task, is","Fragments":["way"]},{"Key":"way higher","Fragments":["than"]},{"Key":"the comparatively","Fragments":["remote"]},{"Key":"comparatively remote","Fragments":["possibility"]},{"Key":"remote possibility","Fragments":["that"]},{"Key":"possibility that","Fragments":["someone"]},{"Key":"someone names","Fragments":["an"]},{"Key":"names an","Fragments":["otherwise"]},{"Key":"otherwise meaningful","Fragments":["long-scoped"]},{"Key":"meaningful long-scoped","Fragments":["variable"]},{"Key":"long-scoped variable","Fragments":["\"i\"."]},{"Key":"variable \"i\".","Fragments":["Or"]},{"Key":"\"i\". Or","Fragments":["put"]},{"Key":"Or put","Fragments":["it"]},{"Key":"this way:","Fragments":["if"]},{"Key":"way: if","Fragments":["we"]},{"Key":"we put","Fragments":["in"]},{"Key":"in explicit","Fragments":["guards"]},{"Key":"explicit guards","Fragments":["against"]},{"Key":"guards against","Fragments":["every"]},{"Key":"against every","Fragments":["subtle"]},{"Key":"every subtle","Fragments":["code","code"]},{"Key":"subtle code","Fragments":["error,","error,"]},{"Key":"code error,","Fragments":["then","and"]},{"Key":"error, then","Fragments":["every"]},{"Key":"time we","Fragments":["read"]},{"Key":"we read","Fragments":["the"]},{"Key":"code we","Fragments":["have"]},{"Key":"of maintainability","Fragments":["cost."]},{"Key":"have reverted","Fragments":["to"]},{"Key":"using single","Fragments":["letters"]},{"Key":"single letters","Fragments":["counters"]},{"Key":"letters counters","Fragments":["in"]},{"Key":"counters in","Fragments":["later"]},{"Key":"later exercises","Fragments":["for"]},{"Key":"exercises for","Fragments":["exactly"]},{"Key":"for exactly","Fragments":["the"]},{"Key":"reasons you","Fragments":["listed,"]},{"Key":"you listed,","Fragments":["plus"]},{"Key":"listed, plus","Fragments":["the"]},{"Key":"the slightly","Fragments":["higher"]},{"Key":"slightly higher","Fragments":["cognitive"]},{"Key":"higher cognitive","Fragments":["load"]},{"Key":"cognitive load","Fragments":["while"]},{"Key":"load while","Fragments":["writing."]},{"Key":"This and","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://www.learncpp.com/cpp-tutorial/29-hungarian-notation/\u003eHungarian","Fragments":["notation\u003c/a\u003e"]},{"Key":"href=http://www.learncpp.com/cpp-tutorial/29-hungarian-notation/\u003eHungarian notation\u003c/a\u003e","Fragments":["(e.g."]},{"Key":"notation\u003c/a\u003e (e.g.","Fragments":["```strFoo```,"]},{"Key":"(e.g. ```strFoo```,","Fragments":["```nBar```)"]},{"Key":"```strFoo```, ```nBar```)","Fragments":["were"]},{"Key":"```nBar```) were","Fragments":["experiments"]},{"Key":"were experiments","Fragments":["with"]},{"Key":"experiments with","Fragments":["new"]},{"Key":"with new","Fragments":["concepts."]},{"Key":"new concepts.","Fragments":["Hungarian"]},{"Key":"concepts. Hungarian","Fragments":["seems"]},{"Key":"Hungarian seems","Fragments":["nice"]},{"Key":"seems nice","Fragments":["for"]},{"Key":"for statically","Fragments":["typed"]},{"Key":"statically typed","Fragments":["languages,"]},{"Key":"typed languages,","Fragments":["```iii```'s"]},{"Key":"languages, ```iii```'s","Fragments":["not"]},{"Key":"```iii```'s not","Fragments":["so"]},{"Key":" Apostrophes","Fragments":["can"]},{"Key":"Apostrophes can","Fragments":["be"]},{"Key":" []","Fragments":["(char"]},{"Key":"[] (char","Fragments":["c)"]},{"Key":"(char c)","Fragments":["{"]},{"Key":"that's looking","Fragments":["cleaner."]},{"Key":"looking cleaner.","Fragments":["Some"]},{"Key":"cleaner. Some","Fragments":["more"]},{"Key":"Some more","Fragments":["little"]},{"Key":"more little","Fragments":["nits"]},{"Key":"little nits","Fragments":["though"]},{"Key":"nits though","Fragments":["..."]},{"Key":" `all_of`returns","Fragments":["`true`"]},{"Key":"`all_of`returns `true`","Fragments":["for"]},{"Key":"`true` for","Fragments":["empty"]},{"Key":"empty containers","Fragments":["(no"]},{"Key":"containers (no","Fragments":["need"]},{"Key":"for length","Fragments":["test)."]},{"Key":"code fails","Fragments":["if"]},{"Key":"fails if","Fragments":["there's"]},{"Key":"there's whitespace","Fragments":["after"]},{"Key":" Might","Fragments":["the"]},{"Key":"Might the","Fragments":["shouting"]},{"Key":"shouting test","Fragments":["be"]},{"Key":"test be","Fragments":["simplified?"]},{"Key":"be simplified?","Fragments":["I"]},{"Key":"simplified? I","Fragments":["found"]},{"Key":"characters constituted","Fragments":["a"]},{"Key":"constituted a","Fragments":["shout."]},{"Key":"seen people","Fragments":["argue"]},{"Key":"people argue","Fragments":["otherwise,"]},{"Key":"argue otherwise,","Fragments":["but"]},{"Key":"otherwise, but","Fragments":["I"]},{"Key":"( test1","Fragments":[")"]},{"Key":"test1 )","Fragments":["{"]},{"Key":"( test2","Fragments":[")"]},{"Key":"test2 )","Fragments":["{"]},{"Key":"is plainer","Fragments":["and"]},{"Key":"plainer and","Fragments":["easier"]},{"Key":"understand than","Fragments":["nested"]},{"Key":"than nested","Fragments":["`else"]},{"Key":"nested `else","Fragments":["if`."]},{"Key":"Looks Great!","Fragments":["Keep"]},{"Key":"Great! Keep","Fragments":["up"]},{"Key":" std::transform(lowerCaseCandidate.begin(),","Fragments":["lowerCaseCandidate.end(),"]},{"Key":"std::transform(lowerCaseCandidate.begin(), lowerCaseCandidate.end(),","Fragments":["lowerCaseCandidate.begin(),"]},{"Key":"lowerCaseCandidate.end(), lowerCaseCandidate.begin(),","Fragments":["std::tolower);"]},{"Key":"to conver","Fragments":["to"]},{"Key":"conver to","Fragments":["lowercase."]},{"Key":"the Grains","Fragments":["exercise."]},{"Key":"Grains exercise.","Fragments":["From"]},{"Key":"exercise. From","Fragments":["what"]},{"Key":"I understand,","Fragments":["using"]},{"Key":"understand, using","Fragments":["a"]},{"Key":"actually __slower__","Fragments":["since"]},{"Key":"__slower__ since","Fragments":["it"]},{"Key":"be dereferenced","Fragments":["before"]},{"Key":"dereferenced before","Fragments":["it"]},{"Key":"used (like","Fragments":["a"]},{"Key":"(like a","Fragments":["regular"]},{"Key":"regular pointer),","Fragments":["while"]},{"Key":"pointer), while","Fragments":["using"]},{"Key":"while using","Fragments":["an"]},{"Key":"`int` (signed/unsigned)","Fragments":["allows"]},{"Key":"(signed/unsigned) allows","Fragments":["the"]},{"Key":"(potentially) optimize","Fragments":["by"]},{"Key":"optimize by","Fragments":["storing"]},{"Key":"a register","Fragments":["for"]},{"Key":"register for","Fragments":["faster"]},{"Key":"question, using","Fragments":["`const"]},{"Key":"int\u0026` actually","Fragments":["makes"]},{"Key":"this bit","Fragments":["of"]},{"Key":"code slower,","Fragments":["I"]},{"Key":"slower, I","Fragments":["just"]},{"Key":"just haven't","Fragments":["gotten"]},{"Key":"gotten around","Fragments":["to"]},{"Key":"to fixing","Fragments":["my"]},{"Key":"fixing my","Fragments":["submissions"]},{"Key":"Please get","Fragments":["rid"]},{"Key":"the `make_pair`","Fragments":["everywhere."]},{"Key":"`make_pair` everywhere.","Fragments":["You"]},{"Key":"can create","Fragments":["pairs"]},{"Key":"create pairs","Fragments":["in"]},{"Key":"the maps:","Fragments":["brace"]},{"Key":"maps: brace","Fragments":["initialization:"]},{"Key":" std::make_pair(1,","Fragments":["\"fly\")"]},{"Key":" {1,","Fragments":["\"fly\"}"]},{"Key":"Please tell","Fragments":["me"]},{"Key":"me you","Fragments":["did"]},{"Key":"for fun.","Fragments":["It","I"]},{"Key":"fun. It","Fragments":["took"]},{"Key":"10 minutes","Fragments":["to"]},{"Key":"flow from","Fragments":["request"]},{"Key":"from request","Fragments":["to"]},{"Key":"to response.","Fragments":["This"]},{"Key":"response. This","Fragments":["code"]},{"Key":"is littered","Fragments":["with"]},{"Key":"littered with","Fragments":["obfuscation,"]},{"Key":"with obfuscation,","Fragments":["two"]},{"Key":"obfuscation, two","Fragments":["class"]},{"Key":"two class","Fragments":["hierarachies,"]},{"Key":"class hierarachies,","Fragments":["and"]},{"Key":"hierarachies, and","Fragments":["boiler"]},{"Key":"and boiler","Fragments":["plate."]},{"Key":"boiler plate.","Fragments":["Do"]},{"Key":"plate. Do","Fragments":["you"]},{"Key":"need dynamic","Fragments":["dispatch"]},{"Key":"dynamic dispatch","Fragments":["just"]},{"Key":"dispatch just","Fragments":["to"]},{"Key":"achieve pattern","Fragments":["matching?"]},{"Key":" Salvaging","Fragments":["your"]},{"Key":"Salvaging your","Fragments":["approach"]},{"Key":"your approach","Fragments":["could"]},{"Key":"approach could","Fragments":["be"]},{"Key":"following way:","Fragments":["`classify`"]},{"Key":"way: `classify`","Fragments":["returns"]},{"Key":"`classify` returns","Fragments":["a"]},{"Key":"a `MessageType`","Fragments":["which"]},{"Key":"`MessageType` which","Fragments":["is"]},{"Key":"a `response`","Fragments":["function."]},{"Key":"`response` function.","Fragments":["This"]},{"Key":"This function","Fragments":["has"]},{"Key":"one `switch`","Fragments":["statement"]},{"Key":"`switch` statement","Fragments":["and"]},{"Key":"and does","Fragments":["the"]},{"Key":"your `Teenager`.","Fragments":["Much"]},{"Key":"`Teenager`. Much","Fragments":["nicer."]},{"Key":"extra credit","Fragments":["to"]},{"Key":"for random","Fragments":["name"]},{"Key":"name collisions,","Fragments":["and"]},{"Key":"collisions, and","Fragments":["believe"]},{"Key":"and believe","Fragments":["it"]},{"Key":"not, I","Fragments":["found"]},{"Key":"found one.","Fragments":["I"]},{"Key":"I would.","Fragments":["This"]},{"Key":"would. This","Fragments":["is"]},{"Key":"an important","Fragments":["point,"]},{"Key":"important point,","Fragments":["and"]},{"Key":"point, and","Fragments":["should"]},{"Key":"original test","Fragments":["suite!"]},{"Key":"considered when","Fragments":["I"]},{"Key":"wrote this.","Fragments":["Good"]},{"Key":"this. Good","Fragments":["catch."]},{"Key":"catch. Addressed","Fragments":["in"]},{"Key":"Addressed in","Fragments":["next","next"]},{"Key":"this happens,","Fragments":["so"]},{"Key":"happens, so","Fragments":["I'm"]},{"Key":"out. Addressed","Fragments":["in"]},{"Key":"prefer it.","Fragments":["I"]},{"Key":"still often","Fragments":["try"]},{"Key":"often try","Fragments":["to"]},{"Key":"write functions","Fragments":["where"]},{"Key":"functions where","Fragments":["there"]},{"Key":"aren't breaks","Fragments":["or"]},{"Key":"breaks or","Fragments":["returns"]},{"Key":"or returns","Fragments":["in"]},{"Key":"returns in","Fragments":["the"]},{"Key":"middle even","Fragments":["if"]},{"Key":"clear. I'll","Fragments":["keep"]},{"Key":"I'll keep","Fragments":["your"]},{"Key":"your point","Fragments":["in"]},{"Key":"mind for","Fragments":["the"]},{"Key":"Also appreciate","Fragments":["the"]},{"Key":"for copy_if.","Fragments":["I"]},{"Key":"copy_if. I","Fragments":["wasn't"]},{"Key":"this call","Fragments":["and"]},{"Key":"and spent","Fragments":["a"]},{"Key":"spent a","Fragments":["bunch"]},{"Key":"(and function","Fragments":["pointers)."]},{"Key":"have probably","Fragments":["used"]},{"Key":"probably used","Fragments":["something"]},{"Key":"something bigger","Fragments":["than"]},{"Key":"int. Other","Fragments":["than"]},{"Key":"that, a","Fragments":["simple"]},{"Key":"loop was","Fragments":["enough"]},{"Key":"was enough","Fragments":["to"]},{"Key":"few nitpicks,","Fragments":["but"]},{"Key":"nitpicks, but","Fragments":["I"]},{"Key":"have multiple","Fragments":["copies","paths"]},{"Key":"string literal","Fragments":["`\"Fine.","once"]},{"Key":"literal `\"Fine.","Fragments":["Be"]},{"Key":"that way!\"`","Fragments":["in","because"]},{"Key":"way!\"` in","Fragments":["your"]},{"Key":"program. This","Fragments":["makes"]},{"Key":"less maintainable.","Fragments":["If"]},{"Key":"maintainable. If","Fragments":["in"]},{"Key":"If in","Fragments":["the"]},{"Key":"future you","Fragments":["need"]},{"Key":"need modify","Fragments":["the"]},{"Key":"different reply","Fragments":["to"]},{"Key":"to silence,","Fragments":["then"]},{"Key":"silence, then","Fragments":["you"]},{"Key":"search and","Fragments":["replace"]},{"Key":"replace every","Fragments":["occurence"]},{"Key":"this string","Fragments":["in","when","literal,","literal"]},{"Key":"1. Store","Fragments":["the"]},{"Key":"const object","Fragments":["(of"]},{"Key":"object (of","Fragments":["type"]},{"Key":"(of type","Fragments":["`const"]},{"Key":"type `const","Fragments":["char"]},{"Key":"*` or","Fragments":["`const"]},{"Key":"`const std::string`)","Fragments":["and"]},{"Key":"std::string`) and","Fragments":["use"]},{"Key":"also define","Fragments":["a"]},{"Key":"macro for","Fragments":["this"]},{"Key":"string literal,","Fragments":["but"]},{"Key":"but please","Fragments":["don't."]},{"Key":"2. Restructure","Fragments":["the"]},{"Key":"Restructure the","Fragments":["code"]},{"Key":"literal once","Fragments":["in"]},{"Key":"multiple paths","Fragments":["that"]},{"Key":"paths that","Fragments":["set"]},{"Key":"to `\"Fine.","Fragments":["Be"]},{"Key":"way!\"` because","Fragments":["you"]},{"Key":"whitespace. Perhaps","Fragments":["you"]},{"Key":"problem (by","Fragments":["removing"]},{"Key":"(by removing","Fragments":["all"]},{"Key":"removing all","Fragments":["trailing"]},{"Key":"all trailing","Fragments":["whitespace"]},{"Key":"string) at","Fragments":["the"]},{"Key":"beginning before","Fragments":["you"]},{"Key":"making decisions","Fragments":["about"]},{"Key":"decisions about","Fragments":["the"]},{"Key":"the reply?","Fragments":["Your"]},{"Key":"reply? Your","Fragments":["checks"]},{"Key":"Your checks","Fragments":["for"]},{"Key":"and question","Fragments":["will"]},{"Key":"question will","Fragments":["be"]},{"Key":"string doesn't","Fragments":["end"]},{"Key":"doesn't end","Fragments":["in"]},{"Key":"with option","Fragments":["2,"]},{"Key":"option 2,","Fragments":["then"]},{"Key":"then option","Fragments":["1"]},{"Key":"option 1","Fragments":["is"]},{"Key":"necessary. I'll","Fragments":["leave"]},{"Key":"Yes. It","Fragments":["was"]},{"Key":"fun. I","Fragments":["wanted"]},{"Key":"represent every","Fragments":["message"]},{"Key":"every message","Fragments":["category"]},{"Key":"message category","Fragments":["(question,"]},{"Key":"category (question,","Fragments":["silence,"]},{"Key":"(question, silence,","Fragments":["etc)"]},{"Key":"silence, etc)","Fragments":["and"]},{"Key":"and responder","Fragments":["(teenager,"]},{"Key":"responder (teenager,","Fragments":["toddler,"]},{"Key":"(teenager, toddler,","Fragments":["etc)"]},{"Key":"toddler, etc)","Fragments":["with"]},{"Key":"etc) with","Fragments":["its"]},{"Key":"own C++","Fragments":["class."]},{"Key":"C++ class.","Fragments":["It"]},{"Key":"It made","Fragments":["the"]},{"Key":"code unnecessarily","Fragments":["complex."]},{"Key":"unnecessarily complex.","Fragments":["It's"]},{"Key":"complex. It's","Fragments":["an"]},{"Key":"be appropriate","Fragments":["if"]},{"Key":"appropriate if","Fragments":["this"]},{"Key":"were some","Fragments":["C++"]},{"Key":"C++ library","Fragments":["used"]},{"Key":"library used","Fragments":["by"]},{"Key":"by bob::hey().","Fragments":["In"]},{"Key":"bob::hey(). In","Fragments":["a"]},{"Key":"a library,","Fragments":["you"]},{"Key":"library, you","Fragments":["might"]},{"Key":"might care","Fragments":["more"]},{"Key":"care more","Fragments":["about"]},{"Key":"interface you","Fragments":["expose"]},{"Key":"you expose","Fragments":["and"]},{"Key":"expose and","Fragments":["less"]},{"Key":"less about","Fragments":["the"]},{"Key":"will integrate","Fragments":["it"]},{"Key":"integrate it","Fragments":["in"]},{"Key":" whoops","Fragments":["that"]},{"Key":"whoops that","Fragments":["break"]},{"Key":"that break","Fragments":["should"]},{"Key":"break should","Fragments":["be"]},{"Key":"be continue,","Fragments":["i"]},{"Key":"continue, i","Fragments":["got"]},{"Key":"got lucky","Fragments":["on"]},{"Key":"lucky on","Fragments":["the"]},{"Key":"First impressions","Fragments":["is"]},{"Key":"impressions is","Fragments":["that"]},{"Key":"job. You","Fragments":["might"]},{"Key":"functions inline,","Fragments":["since"]},{"Key":"inline, since","Fragments":["they"]},{"Key":"probably small","Fragments":["enough"]},{"Key":"also (as","Fragments":["per"]},{"Key":"(as per","Fragments":["instructions)"]},{"Key":"per instructions)","Fragments":["include"]},{"Key":"instructions) include","Fragments":["what"]},{"Key":"include what","Fragments":["you"]},{"Key":"in \"rna_transcription.h\"","Fragments":["as"]},{"Key":"\"rna_transcription.h\" as","Fragments":["a"]},{"Key":"you turned","Fragments":["in"]},{"Key":"turned in","Fragments":["(my"]},{"Key":"in (my","Fragments":["guess"]},{"Key":"(my guess","Fragments":["is"]},{"Key":"just delete","Fragments":["that"]},{"Key":"that part).","Fragments":["Finally,"]},{"Key":"part). Finally,","Fragments":["I"]},{"Key":"switch instead","Fragments":["of"]},{"Key":"map, but","Fragments":["it's"]},{"Key":"probably slower.","Fragments":["Overall"]},{"Key":"slower. Overall","Fragments":["though,"]},{"Key":"Overall though,","Fragments":["I"]},{"Key":"matter much,","Fragments":["as"]},{"Key":"much, as","Fragments":["speed"]},{"Key":"as speed","Fragments":["here"]},{"Key":"speed here","Fragments":["isn't"]},{"Key":"here isn't","Fragments":["a"]},{"Key":"looks acceptable.","Fragments":["I"]},{"Key":"acceptable. I","Fragments":["do"]},{"Key":"couple nitpicks.","Fragments":["First,"]},{"Key":"nitpicks. First,","Fragments":["If"]},{"Key":"First, If","Fragments":["you"]},{"Key":"constructor without","Fragments":["defining"]},{"Key":"without defining","Fragments":["a"]},{"Key":"defining a","Fragments":["default"]},{"Key":"constructor, that","Fragments":["is"]},{"Key":"a no-no.","Fragments":["So","You"]},{"Key":"no-no. So","Fragments":["you"]},{"Key":"add something","Fragments":["like:"]},{"Key":" space_age()","Fragments":["="]},{"Key":"space_age() =","Fragments":["default;"]},{"Key":" _Then_","Fragments":["add"]},{"Key":"_Then_ add","Fragments":["other"]},{"Key":"add other","Fragments":["constructors."]},{"Key":"other constructors.","Fragments":["I"]},{"Key":"constructors. I","Fragments":["think"]},{"Key":"your compiler","Fragments":["should"]},{"Key":"least yell","Fragments":["at"]},{"Key":"yell at","Fragments":["you"]},{"Key":"at you","Fragments":["if"]},{"Key":"do this?","Fragments":["Also,"]},{"Key":"this? Also,","Fragments":["I"]},{"Key":"the destructor","Fragments":["is"]},{"Key":"destructor is","Fragments":["necessary.","just"]},{"Key":"is assuming","Fragments":["C++11."]},{"Key":"The square","Fragments":["function"]},{"Key":"square function","Fragments":["is"]},{"Key":"great. It","Fragments":["was"]},{"Key":"trick I","Fragments":["was"]},{"Key":"never included","Fragments":["bit"]},{"Key":"included bit","Fragments":["manipulation"]},{"Key":"bit manipulation","Fragments":["in"]},{"Key":"manipulation in","Fragments":["my"]},{"Key":"my studies","Fragments":["before."]},{"Key":"studies before.","Fragments":["The"]},{"Key":"before. The","Fragments":["only"]},{"Key":"actual writing","Fragments":["out"]},{"Key":"the squares","Fragments":["for"]},{"Key":"squares for","Fragments":["a"]},{"Key":"total board.","Fragments":["Shouldn't"]},{"Key":"board. Shouldn't","Fragments":["the"]},{"Key":"Shouldn't the","Fragments":["compiler"]},{"Key":"compiler just","Fragments":["unroll"]},{"Key":"just unroll","Fragments":["such"]},{"Key":"unroll such","Fragments":["a"]},{"Key":"great. Only","Fragments":["thing"]},{"Key":"is inlining","Fragments":["the"]},{"Key":"inlining the","Fragments":["functions."]},{"Key":"you named","Fragments":["your"]},{"Key":"parameter \"which\".","Fragments":["Something"]},{"Key":"\"which\". Something","Fragments":["like"]},{"Key":"like \"exponent\"","Fragments":["might"]},{"Key":"\"exponent\" might","Fragments":["be"]},{"Key":"Great work.","Fragments":["The"]},{"Key":"can say","Fragments":["is"]},{"Key":"might inline","Fragments":["your"]},{"Key":" Again","Fragments":["this"]},{"Key":"Again this","Fragments":["is"]},{"Key":"is cumbersome","Fragments":["and"]},{"Key":"really in","Fragments":["the"]},{"Key":"of cpp","Fragments":["because"]},{"Key":"cpp because","Fragments":["I"]},{"Key":"wanted practice","Fragments":["with"]},{"Key":"practice with","Fragments":["cstrings"]},{"Key":"with cstrings","Fragments":["etc."]},{"Key":"The .h","Fragments":["thing,"]},{"Key":".h thing,","Fragments":["I"]},{"Key":"didn't read","Fragments":["the"]},{"Key":"the instructions","Fragments":["closely"]},{"Key":"instructions closely","Fragments":["enough"]},{"Key":"closely enough","Fragments":["to"]},{"Key":"that, I've","Fragments":["been"]},{"Key":"been submitting","Fragments":[".h"]},{"Key":"submitting .h","Fragments":["as"]},{"Key":"as version","Fragments":["1","2"]},{"Key":"version 1","Fragments":["and"]},{"Key":"then .cpp","Fragments":["as"]},{"Key":"version 2","Fragments":[":P"]},{"Key":"preprocessor macro","Fragments":["#define."]},{"Key":"macro #define.","Fragments":["Its"]},{"Key":"#define. Its","Fragments":["a"]},{"Key":"Its a","Fragments":["clearer"]},{"Key":"functionality of","Fragments":["the"]},{"Key":"the nitpicks.","Fragments":["I"]},{"Key":"nitpicks. I","Fragments":["agree"]},{"Key":"default constructor.","Fragments":["The"]},{"Key":"The destructor","Fragments":["is"]},{"Key":"a habit,","Fragments":["so"]},{"Key":"habit, so","Fragments":["I"]},{"Key":"to clear","Fragments":["any"]},{"Key":"clear any","Fragments":["memories"]},{"Key":"any memories","Fragments":["or"]},{"Key":"memories or","Fragments":["anything"]},{"Key":"or anything","Fragments":["of"]},{"Key":"anything of","Fragments":["that"]},{"Key":" yep,","Fragments":["I"]},{"Key":"yep, I","Fragments":["had"]},{"Key":"not read","Fragments":["up"]},{"Key":"read up","Fragments":["on"]},{"Key":"that yet","Fragments":[":)"]},{"Key":"yet :)","Fragments":["(I'm"]},{"Key":":) (I'm","Fragments":["limited"]},{"Key":"(I'm limited","Fragments":["in"]},{"Key":"limited in","Fragments":["c++11"]},{"Key":"and holy","Fragments":["crap"]},{"Key":"holy crap","Fragments":["that"]},{"Key":"crap that","Fragments":["function"]},{"Key":"function argument","Fragments":["initializer"]},{"Key":"argument initializer","Fragments":["syntax"]},{"Key":"initializer syntax","Fragments":["would"]},{"Key":"have confused","Fragments":["the"]},{"Key":"confused the","Fragments":["hell"]},{"Key":"hell out","Fragments":["of"]},{"Key":"first saw","Fragments":["it"]},{"Key":"in live","Fragments":["code"]},{"Key":"live code","Fragments":[":P"]},{"Key":"get pluses","Fragments":["for"]},{"Key":"pluses for","Fragments":["using"]},{"Key":"using cool","Fragments":["things"]},{"Key":"cool things","Fragments":["like"]},{"Key":"like trailing","Fragments":["returns"]},{"Key":"trailing returns","Fragments":["and"]},{"Key":"auto keyword","Fragments":["(although","a"]},{"Key":"keyword (although","Fragments":["maybe"]},{"Key":"(although maybe","Fragments":["you"]},{"Key":"keyword a","Fragments":["bit"]},{"Key":"too much),","Fragments":["I"]},{"Key":"much), I","Fragments":["found"]},{"Key":"code difficult","Fragments":["to"]},{"Key":"understand. After","Fragments":["cogitating"]},{"Key":"After cogitating","Fragments":["it"]},{"Key":"cogitating it","Fragments":["I"]},{"Key":"your basic","Fragments":["concept."]},{"Key":"biggest nitpick","Fragments":["would"]},{"Key":"nitpick would","Fragments":["be"]},{"Key":"chose sort","Fragments":["of"]},{"Key":"a difficult","Fragments":["algorithm"]},{"Key":"difficult algorithm","Fragments":["to"]},{"Key":"find anagrams.","Fragments":["Let"]},{"Key":"anagrams. Let","Fragments":["me"]},{"Key":"me tell","Fragments":["you"]},{"Key":"did as","Fragments":["an"]},{"Key":"better one.","Fragments":["I"]},{"Key":"simply took","Fragments":["the"]},{"Key":"sorted it.","Fragments":["I"]},{"Key":"then took","Fragments":["the"]},{"Key":"possible anagrams","Fragments":["and"]},{"Key":"anagrams and","Fragments":["sorted"]},{"Key":"sorted them.","Fragments":["If"]},{"Key":"them. If","Fragments":["the"]},{"Key":"sorted word","Fragments":["was"]},{"Key":"was equal","Fragments":["to"]},{"Key":"possible sorted","Fragments":["anagrams,"]},{"Key":"sorted anagrams,","Fragments":["it"]},{"Key":"anagrams, it","Fragments":["was"]},{"Key":"an anagram.","Fragments":["Much"]},{"Key":"anagram. Much","Fragments":["simpler."]},{"Key":"Then there","Fragments":["are"]},{"Key":"things I'm","Fragments":["not"]},{"Key":"did them.","Fragments":["Why"]},{"Key":"them. Why","Fragments":["use"]},{"Key":"use things","Fragments":["like"]},{"Key":"like integer","Fragments":["arrays"]},{"Key":"integer arrays","Fragments":["and"]},{"Key":"arrays and","Fragments":["memcpy"]},{"Key":"and memcpy","Fragments":["when"]},{"Key":"memcpy when","Fragments":["using"]},{"Key":"a std::vector","Fragments":["would"]},{"Key":"std::vector would","Fragments":["be"]},{"Key":"much easier?","Fragments":["Also,"]},{"Key":"easier? Also,","Fragments":["you"]},{"Key":"should initialize","Fragments":["your"]},{"Key":"initialize your","Fragments":["private"]},{"Key":"constructor from","Fragments":["an"]},{"Key":"initialization list.","Fragments":["So"]},{"Key":"list. So","Fragments":["you"]},{"Key":"std::string\u0026 input)","Fragments":[":"]},{"Key":"input) :","Fragments":["original_word(input)"]},{"Key":"/* stuff","Fragments":["*/"]},{"Key":"stuff */","Fragments":["}"]},{"Key":"{ original_word","Fragments":["="]},{"Key":"original_word =","Fragments":["input;"]},{"Key":" /","Fragments":["*stuff"]},{"Key":"/ *stuff","Fragments":["*/"]},{"Key":"Anyway, just","Fragments":["my"]},{"Key":"my two","Fragments":["cents."]},{"Key":"much exactly","Fragments":["what"]},{"Key":"did, so","Fragments":["I","naturally"]},{"Key":"is brilliant.","Fragments":[";-)"]},{"Key":"might mention","Fragments":["is"]},{"Key":"mention is","Fragments":["that"]},{"Key":"should inline","Fragments":["your"]},{"Key":" Cool","Fragments":["bit"]},{"Key":"Cool bit","Fragments":["with"]},{"Key":"the geometric","Fragments":["series."]},{"Key":"geometric series.","Fragments":["You"]},{"Key":"series. You","Fragments":["might"]},{"Key":"have inlined","Fragments":["your"]},{"Key":"inlined your","Fragments":["functions."]},{"Key":"also hate","Fragments":["to"]},{"Key":"namespace std\".","Fragments":["It","The"]},{"Key":"std\". It","Fragments":["undoes"]},{"Key":"It undoes","Fragments":["a"]},{"Key":"undoes a","Fragments":["lot"]},{"Key":"of good.","Fragments":["Since"]},{"Key":"good. Since","Fragments":["you"]},{"Key":"using too","Fragments":["many"]},{"Key":"many (any?)","Fragments":["things"]},{"Key":"(any?) things","Fragments":["in"]},{"Key":"in std::,","Fragments":["you"]},{"Key":"std::, you","Fragments":["should"]},{"Key":"feedback. Geometric","Fragments":["series"]},{"Key":"Geometric series","Fragments":["is"]},{"Key":"series is","Fragments":["math"]},{"Key":"is math","Fragments":["courses"]},{"Key":"math courses","Fragments":["finally"]},{"Key":"courses finally","Fragments":["paying"]},{"Key":"finally paying","Fragments":["out."]},{"Key":" ```inline```","Fragments":["is"]},{"Key":"```inline``` is","Fragments":["a"]},{"Key":"new trick,","Fragments":["will"]},{"Key":"trick, will","Fragments":["implement"]},{"Key":"you expand/link","Fragments":["to"]},{"Key":"expand/link to","Fragments":["\"undoes"]},{"Key":"to \"undoes","Fragments":["a"]},{"Key":"\"undoes a","Fragments":["lot"]},{"Key":"of good\"?","Fragments":["Curious,"]},{"Key":"good\"? Curious,","Fragments":["not"]},{"Key":"Curious, not","Fragments":["opposed,"]},{"Key":"not opposed,","Fragments":["since"]},{"Key":"opposed, since","Fragments":["Inclusion"]},{"Key":"since Inclusion","Fragments":["here"]},{"Key":"Inclusion here","Fragments":["is"]},{"Key":"mostly reflex.","Fragments":["Most"]},{"Key":"reflex. Most","Fragments":["Exercism"]},{"Key":"Most Exercism","Fragments":["project"]},{"Key":"Exercism project","Fragments":["```using"]},{"Key":"project ```using","Fragments":["namespace"]},{"Key":"std``` makes","Fragments":["writing"]},{"Key":"makes writing","Fragments":["easier"]},{"Key":"writing easier","Fragments":["(over"]},{"Key":"easier (over","Fragments":["reliance"]},{"Key":"(over reliance","Fragments":["on"]},{"Key":"reliance on","Fragments":["```std::vector```),"]},{"Key":"on ```std::vector```),","Fragments":["and"]},{"Key":"```std::vector```), and","Fragments":["the"]},{"Key":"looks cleaner","Fragments":["(more"]},{"Key":"cleaner (more","Fragments":["pythonic"]},{"Key":"(more pythonic","Fragments":["\u003c\\hides\u003e)."]},{"Key":"\u003ca href=http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice\u003eQuick","Fragments":["research\u003c/a\u003e"]},{"Key":"href=http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice\u003eQuick research\u003c/a\u003e","Fragments":["suggested"]},{"Key":"research\u003c/a\u003e suggested","Fragments":["using"]},{"Key":"suggested using","Fragments":["std"]},{"Key":"std clutters","Fragments":["the"]},{"Key":"the namespace,","Fragments":["and"]},{"Key":"assumed wrapping","Fragments":["it"]},{"Key":"wrapping it","Fragments":["with"]},{"Key":"with ```namespace","Fragments":["grains```"]},{"Key":"```namespace grains```","Fragments":["limited","limits"]},{"Key":"grains``` limited","Fragments":["scope."]},{"Key":"used anything","Fragments":["from"]},{"Key":"from std::,","Fragments":["so"]},{"Key":"std::, so","Fragments":["why"]},{"Key":"why include","Fragments":["the"]},{"Key":"namespace std\"?","Fragments":["Also,"]},{"Key":"std\"? Also,","Fragments":["I"]},{"Key":"for myself","Fragments":["that"]},{"Key":"use \"using","Fragments":["std::vector\""]},{"Key":"\"using std::vector\"","Fragments":["for"]},{"Key":"std::vector\" for","Fragments":["instance"]},{"Key":"for instance","Fragments":["so"]},{"Key":"instance so","Fragments":["I"]},{"Key":"write std::vector","Fragments":["all"]},{"Key":"std::vector all","Fragments":["the"]},{"Key":"time. Only","Fragments":["when"]},{"Key":"Only when","Fragments":["the"]},{"Key":"list gets","Fragments":["very"]},{"Key":"gets very","Fragments":["long"]},{"Key":"long will","Fragments":["I"]},{"Key":"say \"using","Fragments":["namespace"]},{"Key":"std\". The","Fragments":["biggest"]},{"Key":"biggest reason","Fragments":["not"]},{"Key":"is name","Fragments":["collision."]},{"Key":"name collision.","Fragments":["The"]},{"Key":"collision. The","Fragments":["std"]},{"Key":"The std","Fragments":["namespace"]},{"Key":"namespace holds","Fragments":["a"]},{"Key":"holds a","Fragments":["lot"]},{"Key":"of names!","Fragments":["You"]},{"Key":"names! You","Fragments":["could"]},{"Key":"easily collide","Fragments":["with"]},{"Key":"collide with","Fragments":["one"]},{"Key":"them. Most","Fragments":["people"]},{"Key":"that globals","Fragments":["are"]},{"Key":"globals are","Fragments":["evil."]},{"Key":"are evil.","Fragments":["It's"]},{"Key":"evil. It's","Fragments":["the"]},{"Key":"same type","Fragments":["of"]},{"Key":"Neat, I","Fragments":["hadn't"]},{"Key":"hadn't though","Fragments":["of"]},{"Key":"though of","Fragments":["```using"]},{"Key":"of ```using","Fragments":["std::vector```,"]},{"Key":"```using std::vector```,","Fragments":["that's"]},{"Key":"std::vector```, that's","Fragments":["going"]},{"Key":"Nothing in","Fragments":["```std```."]},{"Key":"in ```std```.","Fragments":["I"]},{"Key":"```std```. I","Fragments":["had"]},{"Key":"had though","Fragments":["```pow```"]},{"Key":"though ```pow```","Fragments":["was,"]},{"Key":"```pow``` was,","Fragments":["not"]},{"Key":"was, not","Fragments":["sure"]},{"Key":" More","Fragments":["generally,"]},{"Key":"More generally,","Fragments":["I"]},{"Key":"generally, I","Fragments":["knew"]},{"Key":"knew about","Fragments":["the"]},{"Key":"name collision","Fragments":["potential."]},{"Key":"collision potential.","Fragments":["Declaring"]},{"Key":"potential. Declaring","Fragments":["```using"]},{"Key":"Declaring ```using","Fragments":["namespace"]},{"Key":"std``` within","Fragments":["```namespace"]},{"Key":"within ```namespace","Fragments":["grains```","grains```."]},{"Key":"grains``` limits","Fragments":["potential"]},{"Key":"limits potential","Fragments":["collisions"]},{"Key":"potential collisions","Fragments":["to"]},{"Key":"collisions to","Fragments":["within"]},{"Key":"```namespace grains```.","Fragments":["Seems"]},{"Key":"grains```. Seems","Fragments":["acceptable"]},{"Key":"Seems acceptable","Fragments":["to"]},{"Key":"me. Though","Fragments":["declaring"]},{"Key":"Though declaring","Fragments":["directly"]},{"Key":"declaring directly","Fragments":["in"]},{"Key":"directly in","Fragments":["the"]},{"Key":"idea. And","Fragments":["one"]},{"Key":"correct with","Fragments":["```using"]},{"Key":"with ```using","Fragments":["std::vector```"]},{"Key":"```using std::vector```","Fragments":["in"]},{"Key":"std::vector``` in","Fragments":["a"]},{"Key":"few other","Fragments":["places."]},{"Key":"Removed ```using","Fragments":["namespace"]},{"Key":"std``` and","Fragments":["used"]},{"Key":"used ```inline```","Fragments":["functions,"]},{"Key":"```inline``` functions,","Fragments":["thanks"]},{"Key":"functions, thanks","Fragments":["to"]},{"Key":"to suggestions","Fragments":["from"]},{"Key":"I claim","Fragments":["temporary"]},{"Key":"claim temporary","Fragments":["insanity"]},{"Key":"temporary insanity","Fragments":["on"]},{"Key":"insanity on","Fragments":["iteration"]},{"Key":"on iteration","Fragments":["3."]},{"Key":"iteration 3.","Fragments":["It"]},{"Key":"3. It","Fragments":["just"]},{"Key":"so happens","Fragments":["that"]},{"Key":"happens that","Fragments":["the"]},{"Key":"real answer","Fragments":["is"]},{"Key":"largest value","Fragments":["unsigned"]},{"Key":"value unsigned","Fragments":["long"]},{"Key":"long can","Fragments":["hold!"]},{"Key":"can hold!","Fragments":["Ooops."]},{"Key":" that's","Fragments":["a"]},{"Key":"really clever","Fragments":["idea."]},{"Key":"can i","Fragments":["ask,"]},{"Key":"i ask,","Fragments":["what's"]},{"Key":"ask, what's","Fragments":["the"]},{"Key":"what's the","Fragments":["thought"]},{"Key":"the ordering","Fragments":["of"]},{"Key":"assuming it's","Fragments":["to"]},{"Key":"with letter","Fragments":["usage"]},{"Key":"letter usage","Fragments":["frequency,"]},{"Key":"usage frequency,","Fragments":["and"]},{"Key":"frequency, and","Fragments":["keeping"]},{"Key":"and keeping","Fragments":["the"]},{"Key":"the product","Fragments":["low."]},{"Key":"product low.","Fragments":["I"]},{"Key":"low. I","Fragments":["can"]},{"Key":"the vowels","Fragments":["are"]},{"Key":"vowels are","Fragments":["low"]},{"Key":"are low","Fragments":["numbers,"]},{"Key":"low numbers,","Fragments":["but"]},{"Key":"but am","Fragments":["curious"]},{"Key":"order (why","Fragments":["e"]},{"Key":"(why e","Fragments":["isn't"]},{"Key":"e isn't","Fragments":["2)"]},{"Key":" Fist,","Fragments":["I"]},{"Key":"Fist, I","Fragments":["liked"]},{"Key":"library data","Fragments":["structure"]},{"Key":"structure in","Fragments":["your"]},{"Key":"answer (I","Fragments":["used"]},{"Key":"a multiset),","Fragments":["but"]},{"Key":"multiset), but","Fragments":["I"]},{"Key":"of whitespace.","Fragments":["By"]},{"Key":"whitespace. By","Fragments":["breaking"]},{"Key":"By breaking","Fragments":["logical"]},{"Key":"breaking logical","Fragments":["pieces"]},{"Key":"logical pieces","Fragments":["of"]},{"Key":"using whitespace","Fragments":["it"]},{"Key":"matches function,","Fragments":["but"]},{"Key":"not other","Fragments":["places"]},{"Key":"places like","Fragments":["makemap?"]},{"Key":"like makemap?","Fragments":["I"]},{"Key":"makemap? I","Fragments":["think"]},{"Key":"read better","Fragments":["if"]},{"Key":"auto character","Fragments":[":"]},{"Key":"character :","Fragments":["input"]},{"Key":": input","Fragments":[")",")"]},{"Key":"mess around","Fragments":["by"]},{"Key":"around by","Fragments":["getting"]},{"Key":"string length,","Fragments":["etc."]},{"Key":"boost's boost::to_lower()","Fragments":["function"]},{"Key":"boost::to_lower() function","Fragments":["instead"]},{"Key":"job otherwise.","Fragments":["For"]},{"Key":"otherwise. For","Fragments":["my"]},{"Key":"own edification,","Fragments":["why"]},{"Key":"edification, why","Fragments":["did"]},{"Key":"make makemap","Fragments":["static?"]},{"Key":" Going","Fragments":["through"]},{"Key":"Going through","Fragments":["your"]},{"Key":"your submission,","Fragments":["I"]},{"Key":"you definitely","Fragments":["solved"]},{"Key":"definitely solved","Fragments":["the"]},{"Key":"after going","Fragments":["through"]},{"Key":"about _how_","Fragments":["to"]},{"Key":"_how_ to","Fragments":["solve"]},{"Key":"problem more","Fragments":["before"]},{"Key":"actually solving","Fragments":["it."]},{"Key":"solving it.","Fragments":["The"]},{"Key":"seen is","Fragments":["using"]},{"Key":"expressions. It","Fragments":["was"]},{"Key":"literally about","Fragments":["ten"]},{"Key":"about ten","Fragments":["lines"]},{"Key":"ten lines","Fragments":["long"]},{"Key":"lines long","Fragments":["and"]},{"Key":"very understandable.","Fragments":["My"]},{"Key":"understandable. My","Fragments":["submission"]},{"Key":"My submission","Fragments":["was"]},{"Key":"submission was","Fragments":["about"]},{"Key":"was about","Fragments":["like"]},{"Key":"about like","Fragments":["yours,"]},{"Key":"like yours,","Fragments":["which"]},{"Key":"yours, which","Fragments":["I'll"]},{"Key":"which I'll","Fragments":["judge"]},{"Key":"I'll judge","Fragments":["to"]},{"Key":"judge to","Fragments":["be"]},{"Key":"be about","Fragments":["average."]},{"Key":"about average.","Fragments":["About"]},{"Key":"average. About","Fragments":["the"]},{"Key":"only other","Fragments":["constructive"]},{"Key":"other constructive","Fragments":["thing"]},{"Key":"constructive thing","Fragments":["I"]},{"Key":"learn to","Fragments":["use"]},{"Key":"use white","Fragments":["space"]},{"Key":"space a","Fragments":["bit"]},{"Key":"bit better.","Fragments":["This"]},{"Key":"better. This","Fragments":["isn't"]},{"Key":"isn't minified","Fragments":["javascript,"]},{"Key":"minified javascript,","Fragments":["and","and"]},{"Key":"javascript, and","Fragments":["space","white"]},{"Key":"and space","Fragments":["doesn't"]},{"Key":"space doesn't","Fragments":["matter"]},{"Key":"matter at","Fragments":["all."]},{"Key":"all. So","Fragments":["go"]},{"Key":"So go","Fragments":["ahead"]},{"Key":"in blank","Fragments":["lines"]},{"Key":"lines around","Fragments":["logical"]},{"Key":"around logical","Fragments":["code","units"]},{"Key":"logical code","Fragments":["blocks"]},{"Key":"code blocks","Fragments":["to"]},{"Key":"blocks to","Fragments":["make"]},{"Key":"instance, in","Fragments":["your"]},{"Key":"your isAllCapsAndAlpha()","Fragments":["function,"]},{"Key":"isAllCapsAndAlpha() function,","Fragments":["I"]},{"Key":"space between","Fragments":["your"]},{"Key":"don't _have_","Fragments":["to,"]},{"Key":"_have_ to,","Fragments":["but"]},{"Key":"but anything","Fragments":["that"]},{"Key":"on turning","Fragments":["in"]},{"Key":"turning in","Fragments":["something"]},{"Key":"that works.","Fragments":["I","I"]},{"Key":"works. I","Fragments":["however","think"]},{"Key":"I however","Fragments":["will"]},{"Key":"however will","Fragments":["nitpick:"]},{"Key":"1) Making","Fragments":["huge","a"]},{"Key":"Making huge","Fragments":["functions"]},{"Key":"huge functions","Fragments":["inside"]},{"Key":"no-no. You","Fragments":["need"]},{"Key":"declare large","Fragments":["functions"]},{"Key":"large functions","Fragments":["outside"]},{"Key":"2) It","Fragments":["would"]},{"Key":"good if","Fragments":["you"]},{"Key":"you split","Fragments":["your"]},{"Key":"split your","Fragments":["code"]},{"Key":"into different","Fragments":["functions."]},{"Key":"different functions.","Fragments":["Good"]},{"Key":"functions. Good","Fragments":["C++"]},{"Key":"Good C++","Fragments":["uses"]},{"Key":"of small","Fragments":["helper"]},{"Key":"small helper","Fragments":["functions."]},{"Key":"3) Use","Fragments":["whitespace!"]},{"Key":"Use whitespace!","Fragments":["Putting"]},{"Key":"whitespace! Putting","Fragments":["space"]},{"Key":"Putting space","Fragments":["around"]},{"Key":"space around","Fragments":["logical"]},{"Key":"logical units","Fragments":["of"]},{"Key":"units of","Fragments":["code"]},{"Key":"idea. This","Fragments":["is"]},{"Key":"not minified","Fragments":["javascript,"]},{"Key":"and white","Fragments":["space"]},{"Key":"space won't","Fragments":["slow"]},{"Key":"won't slow","Fragments":["down"]},{"Key":"slow down","Fragments":["anything!"]},{"Key":"4) You","Fragments":["might","also"]},{"Key":"might think","Fragments":["of"]},{"Key":"algorithm a","Fragments":["bit"]},{"Key":"before coding.","Fragments":["Mine"]},{"Key":"coding. Mine","Fragments":["wasn't"]},{"Key":"Mine wasn't","Fragments":["the"]},{"Key":"best in","Fragments":["the"]},{"Key":"world, but","Fragments":["I"]},{"Key":"first cleaned","Fragments":["the"]},{"Key":"cleaned the","Fragments":["string"]},{"Key":"like punctuation","Fragments":["(using"]},{"Key":"punctuation (using","Fragments":["regular"]},{"Key":"(using regular","Fragments":["expressions"]},{"Key":"expressions where","Fragments":["necessary)"]},{"Key":"where necessary)","Fragments":["first,"]},{"Key":"necessary) first,","Fragments":["then"]},{"Key":"first, then","Fragments":["used"]},{"Key":"then used","Fragments":["a"]},{"Key":"a stringstream","Fragments":["to"]},{"Key":"stringstream to","Fragments":["parse"]},{"Key":"into tokens","Fragments":["that"]},{"Key":"tokens that","Fragments":["I"]},{"Key":"then put","Fragments":["in"]},{"Key":"a successful","Fragments":["submission."]},{"Key":"helpful feedback,","Fragments":["JAC42!"]},{"Key":"from class","Fragments":["to","to"]},{"Key":"to namespace","Fragments":["b/c","b/c"]},{"Key":"namespace b/c","Fragments":["nothing","nothing"]},{"Key":"b/c nothing","Fragments":["gets","gets"]},{"Key":"nothing gets","Fragments":["instantiated,","instantiated,"]},{"Key":"gets instantiated,","Fragments":["just","just"]},{"Key":"instantiated, just","Fragments":["seemed","seemed"]},{"Key":"just seemed","Fragments":["to","to"]},{"Key":"have prefaced","Fragments":["this"]},{"Key":"prefaced this","Fragments":["submission"]},{"Key":"this submission","Fragments":["with"]},{"Key":"the disclaimer","Fragments":["that"]},{"Key":"disclaimer that","Fragments":["I"]},{"Key":"really take","Fragments":["advantage","advantage"]},{"Key":"the many","Fragments":["facilities","facilities"]},{"Key":"many facilities","Fragments":["or","or"]},{"Key":"facilities or","Fragments":["libraries","libraries"]},{"Key":"libraries provided","Fragments":["by","by"]},{"Key":"I pretended","Fragments":["I","I"]},{"Key":"pretended I","Fragments":["needed","needed"]},{"Key":"super huge","Fragments":["gigantic","gigantic"]},{"Key":"huge gigantic","Fragments":["string","string"]},{"Key":"gigantic string","Fragments":["and","and"]},{"Key":"and process","Fragments":["it","it"]},{"Key":"process it","Fragments":["as","as"]},{"Key":"as quickly","Fragments":["as","as"]},{"Key":"quickly as","Fragments":["possible","possible"]},{"Key":"possible while","Fragments":["minimizing","minimizing"]},{"Key":"while minimizing","Fragments":["memory","memory"]},{"Key":"minimizing memory","Fragments":["usage.","usage."]},{"Key":"usage. To","Fragments":["avoid","avoid"]},{"Key":"string, or","Fragments":["using","using"]},{"Key":"expensive library","Fragments":["operations","operations"]},{"Key":"library operations","Fragments":["(for","(for"]},{"Key":"operations (for","Fragments":["example,","example,"]},{"Key":"example, things","Fragments":["like","like"]},{"Key":"like regex)","Fragments":["my","my"]},{"Key":"regex) my","Fragments":["unsightly","unsightly"]},{"Key":"my unsightly","Fragments":["method","method"]},{"Key":"unsightly method","Fragments":["crawls","crawls"]},{"Key":"method crawls","Fragments":["along","along"]},{"Key":"crawls along","Fragments":["one","one"]},{"Key":"along one","Fragments":["string","string"]},{"Key":"and sticks","Fragments":["little","little"]},{"Key":"sticks little","Fragments":["pieces","pieces"]},{"Key":"little pieces","Fragments":["of","of"]},{"Key":"map. For","Fragments":["the"]},{"Key":"second iteration,","Fragments":["I"]},{"Key":"can examine","Fragments":["the","the"]},{"Key":"original (instead","Fragments":["of","of"]},{"Key":"of taking","Fragments":["in","in"]},{"Key":"and lowercasing","Fragments":["the","the"]},{"Key":"lowercasing the","Fragments":["entire","entire"]},{"Key":"- Original","Fragments":["version"]},{"Key":"Original version","Fragments":["operated"]},{"Key":"version operated","Fragments":["on"]},{"Key":"operated on","Fragments":["a"]},{"Key":"simply alter","Fragments":["it"]},{"Key":"alter it","Fragments":["to"]},{"Key":"implemented helper","Fragments":["function"]},{"Key":"function \"strtolower\"","Fragments":["and"]},{"Key":"\"strtolower\" and","Fragments":["then"]},{"Key":"then changed","Fragments":["map"]},{"Key":"changed map","Fragments":["\"word\""]},{"Key":"map \"word\"","Fragments":["function"]},{"Key":"\"word\" function","Fragments":["to"]},{"Key":"Changed from","Fragments":["class"]},{"Key":"your thoughtful","Fragments":["feedback."]},{"Key":"thoughtful feedback.","Fragments":["My"]},{"Key":"feedback. My","Fragments":["apologies"]},{"Key":"not noticing","Fragments":["your"]},{"Key":"noticing your","Fragments":["comments"]},{"Key":"This first","Fragments":["iteration"]},{"Key":"initial state","Fragments":["of"]},{"Key":"passing each","Fragments":["test"]},{"Key":"in order.","Fragments":["You"]},{"Key":"order. You","Fragments":["are"]},{"Key":"are correct","Fragments":["that"]},{"Key":"duplication was","Fragments":["the"]},{"Key":"of kludging","Fragments":["each"]},{"Key":"kludging each","Fragments":["of"]},{"Key":"two silence","Fragments":["tests."]},{"Key":"3, I","Fragments":["had"]},{"Key":"had added","Fragments":["a"]},{"Key":"for trimTail()","Fragments":["to"]},{"Key":"trimTail() to","Fragments":["address"]},{"Key":"address this","Fragments":["issue"]},{"Key":"to identify","Fragments":["isYell()."]},{"Key":"identify isYell().","Fragments":["By"]},{"Key":"isYell(). By","Fragments":["parsing"]},{"Key":"these functions,","Fragments":["hey()"]},{"Key":"functions, hey()","Fragments":["is"]},{"Key":"is trimmed","Fragments":["to"]},{"Key":"trimmed to","Fragments":["focus"]},{"Key":"to focus","Fragments":["on"]},{"Key":"on simplified","Fragments":["logic"]},{"Key":"simplified logic","Fragments":["for"]},{"Key":"for choosing","Fragments":["which"]},{"Key":"choosing which","Fragments":["string"]},{"Key":"which string","Fragments":["to"]},{"Key":"using defines","Fragments":["or"]},{"Key":"defines or","Fragments":["an"]},{"Key":"enum for","Fragments":["the"]},{"Key":"reply strings,","Fragments":["however,"]},{"Key":"strings, however,","Fragments":["for"]},{"Key":"project this","Fragments":["small,"]},{"Key":"this small,","Fragments":["I"]},{"Key":"small, I","Fragments":["assume"]},{"Key":"of indirection","Fragments":["would"]},{"Key":"indirection would","Fragments":["detract"]},{"Key":"would detract","Fragments":["from"]},{"Key":" 2.)","Fragments":["The"]},{"Key":"2.) The","Fragments":["for/range"]},{"Key":"The for/range","Fragments":["facility"]},{"Key":"for/range facility","Fragments":["is"]},{"Key":"facility is","Fragments":["new"]},{"Key":"me, so","Fragments":["I'm"]},{"Key":"that familiar","Fragments":["with"]},{"Key":"it yet.","Fragments":["I"]},{"Key":"yet. I","Fragments":["didn't"]},{"Key":"iterate across","Fragments":["the"]},{"Key":"the chars","Fragments":["in"]},{"Key":"chars in","Fragments":["a"]},{"Key":"members of,","Fragments":["say,"]},{"Key":"of, say,","Fragments":["a"]},{"Key":"say, a","Fragments":["vector."]},{"Key":"a vector.","Fragments":["Fancy!"]},{"Key":" 3.)","Fragments":["Didn't"]},{"Key":"3.) Didn't","Fragments":["know"]},{"Key":"Didn't know","Fragments":["about"]},{"Key":"boost function,","Fragments":["that's"]},{"Key":"function, that's","Fragments":["nice"]},{"Key":"know as","Fragments":["well."]},{"Key":"used cstring","Fragments":["in"]},{"Key":"cstring in","Fragments":["the"]},{"Key":"iteration (let's","Fragments":["say"]},{"Key":"(let's say","Fragments":["it"]},{"Key":"for ...","Fragments":["ehm"]},{"Key":"... ehm","Fragments":["..."]},{"Key":"ehm ...","Fragments":["\"fun\")"]},{"Key":"... \"fun\")","Fragments":["and"]},{"Key":"\"fun\") and","Fragments":["then"]},{"Key":"I modified","Fragments":["it"]},{"Key":"the makemap","Fragments":["method"]},{"Key":"makemap method","Fragments":["static"]},{"Key":"method static","Fragments":["because"]},{"Key":"trouble getting","Fragments":["it"]},{"Key":"compile and","Fragments":["was"]},{"Key":"confused. Having","Fragments":["it"]},{"Key":"static here","Fragments":["does"]},{"Key":"here does","Fragments":["nothing"]},{"Key":"A range","Fragments":["for"]},{"Key":"iterators begin()","Fragments":["and"]},{"Key":"and end(),","Fragments":["even"]},{"Key":"end(), even","Fragments":["classes"]},{"Key":"even classes","Fragments":["you"]},{"Key":"classes you","Fragments":["make"]},{"Key":"yourself. A","Fragments":["string"]},{"Key":"has those","Fragments":["iterators,"]},{"Key":"those iterators,","Fragments":["so"]},{"Key":"good submission!","Fragments":["Nitpicks:"]},{"Key":"Making a","Fragments":["map"]},{"Key":"the RNA","Fragments":["in"]},{"Key":"RNA in","Fragments":["my"]},{"Key":"opinion is","Fragments":["a"]},{"Key":"bit overkill.","Fragments":["A"]},{"Key":"overkill. A","Fragments":["switch"]},{"Key":"more transparent","Fragments":["to"]},{"Key":"transparent to","Fragments":["what"]},{"Key":"probably faster","Fragments":["as"]},{"Key":"used iterators,","Fragments":["but"]},{"Key":"3) instead","Fragments":["of"]},{"Key":"of \"ret","Fragments":["+="]},{"Key":"\"ret +=","Fragments":["to_rna(*it);\""]},{"Key":"+= to_rna(*it);\"","Fragments":["I"]},{"Key":"to_rna(*it);\" I","Fragments":["think"]},{"Key":"simply say","Fragments":["something"]},{"Key":"say something","Fragments":["like:"]},{"Key":"auto element","Fragments":[":",":"]},{"Key":"element :","Fragments":["s","input"]},{"Key":" ret.push_back(","Fragments":["to_rna(element)"]},{"Key":"ret.push_back( to_rna(element)","Fragments":[");"]},{"Key":"did almost","Fragments":["exactly"]},{"Key":"almost exactly","Fragments":["what"]},{"Key":"so naturally","Fragments":["your"]},{"Key":"naturally your","Fragments":["brilliant!"]},{"Key":"your brilliant!","Fragments":[";-)"]},{"Key":"regular for","Fragments":["loop"]},{"Key":"loop. Then","Fragments":["the"]},{"Key":" ouput.push_back(","Fragments":["to_rna(element)"]},{"Key":"ouput.push_back( to_rna(element)","Fragments":[");"]},{"Key":"Good work","Fragments":["though."]},{"Key":"good job,","Fragments":["but","but","but"]},{"Key":"job, but","Fragments":["there","these","I"]},{"Key":"statement, why","Fragments":["do"]},{"Key":"a temporary.","Fragments":["Just"]},{"Key":"temporary. Just","Fragments":["do"]},{"Key":"Just do","Fragments":["something"]},{"Key":" switch(","Fragments":["RNANucleotide"]},{"Key":"switch( RNANucleotide","Fragments":[")"]},{"Key":" case","Fragments":["'G':"]},{"Key":"No temporary","Fragments":["needed."]},{"Key":"2) In","Fragments":["your"]},{"Key":"default in","Fragments":["your"]},{"Key":"your switch,","Fragments":["you"]},{"Key":"switch, you","Fragments":["should"]},{"Key":"probably throw","Fragments":["an"]},{"Key":"exception instead","Fragments":["of"]},{"Key":"in to_rna()","Fragments":["a"]},{"Key":"to_rna() a","Fragments":["reference,"]},{"Key":"aren't changing","Fragments":["it"]},{"Key":"in to_rna().","Fragments":["If"]},{"Key":"to_rna(). If","Fragments":["I"]},{"Key":"auto nucleotide","Fragments":[":"]},{"Key":"nucleotide :","Fragments":["RNAStrand"]},{"Key":": RNAStrand","Fragments":[")"]},{"Key":" tempStrand.push_back(","Fragments":["to_rna(nucleotide)"]},{"Key":"tempStrand.push_back( to_rna(nucleotide)","Fragments":[");"]},{"Key":"Anyway, you","Fragments":["did"]},{"Key":"small program","Fragments":["that"]},{"Key":"uses such","Fragments":["a"]},{"Key":"std:: namespace,","Fragments":["I"]},{"Key":"namespace, I","Fragments":["think"]},{"Key":"2) Using","Fragments":["a"]},{"Key":"is neat","Fragments":["and"]},{"Key":"neat and","Fragments":["all,"]},{"Key":"and all,","Fragments":["but"]},{"Key":"understand and","Fragments":["probably"]},{"Key":"3) To","Fragments":["me"]},{"Key":"me saying","Fragments":["\"strRNA"]},{"Key":"saying \"strRNA","Fragments":["+="]},{"Key":"\"strRNA +=","Fragments":["to_rna(nucleotide);\""]},{"Key":"+= to_rna(nucleotide);\"","Fragments":["isn't"]},{"Key":"to_rna(nucleotide);\" isn't","Fragments":["as"]},{"Key":"as strRNA.push_back(","Fragments":["to_rna(nucleotide)"]},{"Key":"strRNA.push_back( to_rna(nucleotide)","Fragments":[");"]},{"Key":"to_rna(nucleotide) );","Fragments":["But"]},{"Key":"); But","Fragments":["I"]},{"Key":"it matters,","Fragments":["but"]},{"Key":"matters, but","Fragments":["you"]},{"Key":"should set","Fragments":["the"]},{"Key":"of not_equal_to","Fragments":["to"]},{"Key":"not_equal_to to","Fragments":["std::size_t."]},{"Key":"the inner_product","Fragments":["function"]},{"Key":"inner_product function","Fragments":["before"]},{"Key":"function before","Fragments":["I"]},{"Key":"your solution,","Fragments":["this"]},{"Key":"solution, this","Fragments":["has"]},{"Key":"perfect application","Fragments":["of"]},{"Key":"application of","Fragments":["it."]},{"Key":"Hello again!","Fragments":["Nits"]},{"Key":"again! Nits","Fragments":["are"]},{"Key":"Nits are","Fragments":["always"]},{"Key":"1) Switched","Fragments":["to"]},{"Key":"to ```using","Fragments":["std::string```"]},{"Key":"std::string``` in","Fragments":["next"]},{"Key":"iteration instead","Fragments":["of"]},{"Key":"whole ```std```","Fragments":["namespace"]},{"Key":"2) Interesting.","Fragments":["Did"]},{"Key":"Interesting. Did","Fragments":["an"]},{"Key":"Did an","Fragments":["internal"]},{"Key":"internal debate","Fragments":["(for"]},{"Key":"debate (for","Fragments":["application"]},{"Key":"(for application","Fragments":["in"]},{"Key":"application in","Fragments":["larger"]},{"Key":"in larger","Fragments":["projects,"]},{"Key":"larger projects,","Fragments":["anything"]},{"Key":"projects, anything","Fragments":["this"]},{"Key":"this small","Fragments":["is"]},{"Key":"small is","Fragments":["inconsequential)"]},{"Key":" Pro","Fragments":["```switch```:","```map```:"]},{"Key":" \u003cul\u003e\u003cli\u003eFaster*\u003c/li\u003e\u003cli\u003eReadability\u003c/li\u003e\u003cli\u003eError","Fragments":["handling"]},{"Key":"\u003cul\u003e\u003cli\u003eFaster*\u003c/li\u003e\u003cli\u003eReadability\u003c/li\u003e\u003cli\u003eError handling","Fragments":["with"]},{"Key":" \u003cul\u003e\u003cli\u003eFewer","Fragments":["keystrokes\u003c/li\u003e\u003cli\u003eCould"]},{"Key":"\u003cul\u003e\u003cli\u003eFewer keystrokes\u003c/li\u003e\u003cli\u003eCould","Fragments":["be"]},{"Key":"keystrokes\u003c/li\u003e\u003cli\u003eCould be","Fragments":["passed"]},{"Key":"in (not","Fragments":["hard"]},{"Key":"(not hard","Fragments":["coded)\u003c/li\u003e\u003cli\u003eKeys"]},{"Key":"hard coded)\u003c/li\u003e\u003cli\u003eKeys","Fragments":["are"]},{"Key":"coded)\u003c/li\u003e\u003cli\u003eKeys are","Fragments":["more"]},{"Key":" *This","Fragments":["debate"]},{"Key":"*This debate","Fragments":["looks"]},{"Key":"debate looks","Fragments":["like"]},{"Key":"a rabbit","Fragments":["hole:"]},{"Key":"rabbit hole:","Fragments":["\u003ca"]},{"Key":"hole: \u003ca","Fragments":["href=http://stackoverflow.com/questions/931890/what-is-more-efficient-a-switch-case-or-an-stdmap\u003eStackOverflow\u003c/a\u003e"]},{"Key":"\u003ca href=http://stackoverflow.com/questions/931890/what-is-more-efficient-a-switch-case-or-an-stdmap\u003eStackOverflow\u003c/a\u003e","Fragments":["and"]},{"Key":"href=http://stackoverflow.com/questions/931890/what-is-more-efficient-a-switch-case-or-an-stdmap\u003eStackOverflow\u003c/a\u003e and","Fragments":["\u003ca"]},{"Key":"\u003ca href=http://discuss.joelonsoftware.com/default.asp?joel.3.21194.19\u003eJoel","Fragments":["Spolsky\u003c/a\u003e"]},{"Key":"3) Didn't","Fragments":["think"]},{"Key":"Didn't think","Fragments":["to"]},{"Key":"use ```push_back```,","Fragments":["```+=```"]},{"Key":"```push_back```, ```+=```","Fragments":["pattern"]},{"Key":"```+=``` pattern","Fragments":["is"]},{"Key":"pattern is","Fragments":["more"]},{"Key":"in scripting","Fragments":["languages."]},{"Key":"scripting languages.","Fragments":["Nice"]},{"Key":"languages. Nice","Fragments":["to"]},{"Key":"Nice to","Fragments":["know"]}],"prefix_len":2}