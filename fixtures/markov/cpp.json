{"Nodes":[{"Key":" ","Fragments":["Looks","I","Additionally,","After","The","How","I","You","You","You","There","-","-","-","-","-","-","-","This","-","-","Additionally,","-","-","-","I","For","The","I","Have","http://www.boost.org/doc/libs/1_56_0/libs/tokenizer/tokenizer.htm","While","Thanks!","Mostly","I","I","A","*","*","*","*","If","However,","I","Thank","Got","Integrated","You","What","Regarding:","using","I","Also,","Here","Also,","bool","bool","string","This","I","Some","1)","2)","3)","4)","5)","And","I","Switched","You","Can","Using","Testing","Nice!","I","I","`split_words`","I","namespace","std::string","};","```","I","Slightly","I'd","Also,","I've","I","Instead","if","you","if","Wasn't","Don't","What's","Isn't","You","You","1.","1.","1.","*","*","I","I","You","In","The","I","I","I","I","I","You","I'm","I","(I","I","Switched","I","As","I","`std::string`","C++11","```C++","for","//","}","```","Do","You're","I","We","This","We're","Some","I","Doesn't","Has","Just","I'm","I","In","`std::string`","I","a","boost/range/algorithm_ext/for_each.hpp","Of","both","quite","Nice","boost/range/algorithm_ext/for_each.hpp","binary","This","Since","If","Great!","Similarly,","The","thank","boost/tokenizer.hpp","Since","converting","seemed","However,","removing","is","I","Your","Not","```","if(","```","in","What","Of","Cought","Funny,","occurs","This","I","However,","When","As","An","Switched","The","-","The","-","-","-","-","There","In","with","```C++","for","```","Have","without","I","Also,","Anyway,","`boost::tokenizer\u003c\u003e`","cool,","I","quite","understanding","But","Another","```C++","string","```","which","This","The","or","However,","Why","Looks","1)","2","for","```","in","Better!","What","The","Yeah,","I","Also,","Agreed!","I","But","`string",",","Also,","This","Removing","I","The","But","I","Indeed","Also","What","It","Two","*","*","Consider","So","But","I","```C++","const","```","One","It's","```C++","const","if","```","When","```C++","if","```","However,","```C++","namespace","bool","{","return","}","}","//","if","```","We","Doh!","The","So,","I","The","This","So","This","However,","There","One","Hi","here","1)","2)","For","```cpp","bool","```","That","3)","I'm","Your","A","One","I.e.,","I","After","Try","I","-","*","-","*","*","The","My","I","Dialog(const","instead","Dialog(std::string","It","Running","Any","I","I","Let's","A","Hi,","I","If","Nice","But","```cpp","int","return","```","There","Also,","Nice","Nice","Just","```cpp","auto","if","it-\u003esecond++;","}","acc[word]","}","```","into","```cpp","acc[word]","```","I","Have","1)","2)","I","I","However,","Hi","Thanks","I","What","This","I","your","This","```","namespace","std::string","//code","}","}","```","or,","```","class","public:","static","//code","}","};","```","Good","There","This","Apparently,","And","Looks","This","Elected","I","Would","bob::hey","Iteration","This","Elected","I","Would","Inital","I","I","The","I","The","You","I","Have","I'm","edit:","Alrighty","The","Looks","A","I","I","I","(I","I'm","The","```cpp","return","```","which","But","```cpp","const","const","return","query.find_first_of(","```","The","By","1.","2.","3.","-","-","4.","I","But","However,","Personally,","I'm","Almost..","it","```","std::string","```","which","@laverna:","I","Good","One","Also,","Complete","Same","Suppose","Added","I'd","Not","Since","I","In","I'd","It","many","As","I","In","Try","Your","A","1)","string","of","e.g.","```bool","```","2)","For","```std::all_of(str.begin(),","```","very","props!","put","```","[`find_first_of`](http://example.com)","```","*","Regarding","Generally","*","Use","It","It's","I","*","*","*","*","*","*","for","Another","Why","You","Why","Some","a)","b)","c)","My","I","Basically","To","I've","Since","The","Also","data","```for(","```","making","@howard","Looks","Two","1)","2)","I","It","Yes,","I","Two","1)","2)","Thanks,","I","In","Through","I'm","I","As","I","Then","I","Anyway,","Thanks,","I've","Nice","Using","Hey,","It","So","The","You'll","Thanks","I","Interesting","The","I","This","My","Only","I","I","else","return","}","I","I","There","I","If","return","I","Is","A","```c++","namespace","std::string","}","```","Hmm,","Maybe","char","Anyway,","Since","Fixed","What","@leopold","I've","If","This","Perhaps","I","I","(1)","(2)","```question.erase(","\u003ctab\u003estd::find_if(","\u003ctab\u003e\u003ctab\u003equestion.rbegin(),","\u003ctab\u003e\u003ctab\u003e[](std::string::value_type","\u003ctab\u003equestion.end());","```","(3)","Looking","@noah-mad","Unfortunately","@noah","Non-member","Checking","So","1)","2)","I","Your","(*","However,","(1)","(2)","(3)","(4)","1)","2)","Bob","Looks","What","I'm","I","-","-","-","-","-","I","it","If","something","```","for","char","if","is_anything","}","```","could","```","for","is_anything","```","you","At","if(not","-","-","-","I","1)","2)","Wanted","I","Yeah.","Thanks","I","Remember,","Also,","I","I","Wow.","Good","As","There","The","Secondly,","On","I","For","Line","I","I","Just","Also,","In","Note","for","I","I'm","And","Moved","I","Stylistically,","Also,","I","Why","(minor","I","I","I","I'm","Thanks!","This","once","```","istringstream","map\u003cstring,","string","while","++count[word];","}","```","the","The","To","Inside","Ok","@rosamond","Thanks","I","Don't","Hmm,","Thanks","1)","2)","This","At","Though,","Also","The","I","This","Also,","Also,","I","Oh,","Bool","I","I","So","Your","I","```std::string","std::transform(word.begin(),","```","I","Something","(See","Your","And","Really","My","Just","Thats","Pulled","Thanks,","I","Ahoi","1)","2)","3)","4)","In","```cpp","void","for(int","s","std::cout","}","```","Say","But","After","To","Would","Looks","In","Also","Yes,","Sorting","Thoughts?","removed","Adding","However","Hopefully","Nice,","One","I'd","Thanks.","Good","Guess","Moved","I","Perhaps","Can","There","I","The","statics","The","I","I","Good","The","Encapsulating","First,","Second,","@axel","You","I","`namespace","string","//implementation","}","}`","That","Nobody's","this","I","I","At","It","thanks","Nicely","1.","2.","You","-","-","-","-","Thank","While","thanks","Yea","Kinda","A","But","This","I","I've","Also,","I'm","Ty,","Well,","Come","Hey","got","1)","2)","I","I","Example:","```","..!longword@,?...","^","start","```","Basically,","You","(Alternatively,","Hi,","You","It","I'd","One","An","If","I","Example:","```","..!longword@,?...","^","start","```","Basically,","You","@maryam","I","```cpp","void","std::string","for(int","s_func","std::cout","}","```","I","Clearly","Thanks","I","Now,","Commented","For","Have","Which","I","\u003e","Not","Yea,","You","You","Lastly,","Ahoi","couple","1)","2)","3)","This","Regarding","I","But","1)","2)","So","Getting","Your","C++","I","Use","I","std::transform","If","word.reserve(std::distance(start,","That","I","```","$","#include","#include","int","{","std::string","int","for(int","{","int","if","std::cout","last","s.push_back('x');","}","}","$","g++","$","0:","1:","2:","3:","5:","9:","17:","33:","65:","129:","257:","513:","```","@jerrell","Looks","Also,","You","```C++","std::all_of(str.begin(),","```","Pass","You","Why","Also,","Why","Hello","I","I","1.","2.","In","to","Hope","Cheers!","Thanks","As","Ahoi","Personally,","I","Other","I","Hello,","I","Cheers!","edit:","Hi!","I'm","You've","Use","A","`returnValue[wordBuffer]`","The","In","\u003e","the","`find_if`","```cpp","auto","//iterate","while(","//find","auto","//from","auto","//This","std::string","//increment","my_map[word]++;","//we've","//for","curr","}","```","You","Hmm,","I","Because","@kaley","However","However","Thanks","No","Also,","Have","[Here's](http://ideone.com/St5txW)","Yea,","One","If","Usually","But","Thanks,","uses","by","maybe","currently","C++","have","Instead","e.g.","C++","Seriously","Hey","*One","\u003cul\u003e\u003cli\u003e","\u003c/ul\u003e","\u003c/br\u003e","Did","Did","__Procedure__","\u003col\u003e","\u003cli\u003e`bob::hey`","\u003cli\u003e`evaluate`","\u003c/li\u003e","\u003cb\u003eiff\u003c/b\u003e","\u003cli\u003e","`isType(const","\u003c/li\u003e","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003eBecause","__Changes","\u003cul\u003e","\u003cli\u003eCode","\u003c/ul\u003e","__Procedure__","\u003col\u003e","\u003cli\u003e`bob::hey`","\u003cli\u003e`evaluate`","\u003c/li\u003e","\u003cb\u003eiff\u003c/b\u003e","\u003cli\u003e","`isType(const","\u003c/li\u003e","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003eBecause","Yes","__Changes","\u003cul\u003e\u003cli\u003eHandles","\u003cul\u003e\u003cli\u003e`line","__Procedure__","\u003col\u003e","\u003cli\u003e","\u003cli\u003e","\u003cli\u003eIf","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003e","\u003c/ul\u003e","\u003c/br\u003e","@jeramie,","__Procedure__","\u003col\u003e","\u003cli\u003e","\u003cli\u003e","\u003cli\u003eIf","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003e","\u003c/ul\u003e","\u003c/br\u003e","I","Basically","Question","int","Is","__Changes","\u003cul\u003e\u003cli\u003eLarge","\u003cul\u003e\u003cli\u003e.cpp","\u003cli\u003eThe","has","\u003cli\u003eBetter","\u003cli\u003e`regex_search`","\u003cli\u003eExpressions","\u003cli\u003eQuicker","__Procedure__","\u003col\u003e","\u003cli\u003e`bob::hey`","\u003cli\u003e`evaluate`","\u003cli\u003e","`isType(const","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003eBecause","Hey","Moved","I","With","__Changes","\u003cul\u003e\u003cli\u003e","\u003cli\u003e`enum","\u003cul\u003e\u003cli\u003eI","\u003cli\u003eReformatted","\u003cul\u003e\u003cli\u003eCode","\u003cli\u003e`sentence`","\u003c/ul\u003e\u003c/li\u003e","__Procedure__","\u003col\u003e","\u003cli\u003e`bob::hey`","\u003cli\u003e","`isType(const","__Tradeoffs__","\u003cul\u003e","\u003cli\u003eBecause","\u003cli\u003eBecause","\u003cli\u003eBecause","Thanks","I","What","Iostream","Changes","*","*","Question:","```cpp","vector\u003cint\u003e","int","if","cout","}","else{","cout","}","```","EDIT:","Changes","*","*","Hi","You","http://exercism.io/submissions/ccd69a4e96bf6990d6d487fc","Cheers!","I","The","This","PS.:","Take","I","I","First","```cpp","std::string","std::transform(","```","Second","```cpp","std::string","word.reserve(","std::transform(","```","Third","```cpp","std::string","std::transform(","```","The","```","Character","Words1:","Time:","Max","Words2:","Time:","Max","Words3:","Time:","Max","```","Ran","Turns","I","Hi","Peronally","I","Cheers!","True,","But","`Bob.h`","I","```cpp","if","found_upper","}","```","It's","But","I","I","Looks","Trade","The","Had","```cpp","if","output_map[c]","}","else","++output_map[c];","}","```","to","```","++output_map[c];","```","But","Thanks","Now","I","I","remove","Yes.","Ahh","is","just","and","How","the","__Changes","\u003cul\u003e","\u003cli\u003eNote\u003cul\u003e\u003cli\u003eDue","\u003c/li\u003e\u003cli\u003eCompletely","\u003cul\u003e\u003cli\u003eAfter","\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e","__Procedure__","\u003col\u003e","\u003cli\u003e","\u003cli\u003e","\u003cli\u003eThe","\u003cli\u003eEach","\u003c/ol\u003e","__Tradeoffs__","\u003cul\u003e","\u003cli\u003e","\u003cli\u003eBecause","\u003c/br\u003e","I","I","~Rob","Hi,","Good","I","Thanks","Hi","__Too","I'm","This","__Procedure__","\u003col\u003e\u003cli\u003e","\u003cli\u003e","\u003cli\u003eThe","\u003c/ol\u003e","Starting","Why","The","You","You","You","Prefixing","You","Pass","Boost","The","Your","You","Ah,","Wonderful.","There","The","What's","Also,","return","There","I","This","While","I","The","I","I","This","is","distance","I","I","Nice!","Shall","\u003cul\u003e","\u003cli\u003eIn","\u003cli\u003eIf","I","Do","\u003c/br\u003e","__REDACTED__","Looks","I","\u003cul\u003e\u003cli\u003econsider","`int","s1.length()","To","`int","\u003c/li\u003e\u003c/ul\u003e","Use","I","If","const","What","Thanks","-","-","When","Or","static","for","@roman","Re","and","http://msdn.microsoft.com/en-us/library/k0t5wee3.aspx","I","I","I","```","$","$","$","Character","Words1:","Time:","Max","Words2:","Time:","Max","Words3:","Time:","Max","```","The","First","For","I","```using","using","```","I","Secondly","Why","Other","I","I","It","There","1.","2.","Rob","I","Is","Thinking","I","```cpp","bool","static","return","}","```","Declaring","If","__Changes","\u003c/hr\u003e","**Took","\u003cul\u003e\u003cli\u003eMade","\u003cli\u003eRemoved","\u003cli\u003eMade","\u003c/ul\u003e\u003cul\u003e","\u003cli\u003e`diff`","__Procedure__","\u003col\u003e\u003cli\u003e","\u003cli\u003e","\u003cli\u003eThe","\u003c/ol\u003e","My","But","My","For","So","*Edit*","When","```cpp","for(","if(","else","}","```","The","*Edit2*","Did","I","One","Are","Nice"]},{"Key":" Looks","Fragments":["almost","great,","pretty","good.","good","weird","great!","very","good.","like"]},{"Key":"Looks almost","Fragments":["good."]},{"Key":"almost good.","Fragments":["The"]},{"Key":"good. The","Fragments":["only"]},{"Key":"The only","Fragments":["last","function","place","change","downside","real","two","way"]},{"Key":"only last","Fragments":["problem"]},{"Key":"last problem","Fragments":["is"]},{"Key":"problem is","Fragments":["that","a"]},{"Key":"is that","Fragments":["`is_upper`","you","it","I","I","```#include","c++11","you","you're","you're"]},{"Key":"that `is_upper`","Fragments":["can"]},{"Key":"`is_upper` can","Fragments":["be","be"]},{"Key":"can be","Fragments":["confused","easily","implemented","made","`return","`return","`return","made","expensive","contained","made.","called","written","dangerous","found","written","a","short","used.","optimized","used","simplified","performed."]},{"Key":"be confused","Fragments":["with"]},{"Key":"confused with","Fragments":["`isupper`","`isupper`"]},{"Key":"with `isupper`","Fragments":["in","in"]},{"Key":"`isupper` in","Fragments":["`cctype`","`cctype`"]},{"Key":" I","Fragments":["think","have","felt","realized","really","found","am","can't","like","tend","think","added","notice","took","enjoyed","considered","also","thought","pared","could","was","have","benchmarked","broke","see","really","like","thought","like","like","didn't","guess","find","think","don't","think","also","had","like","followed","guess","decomposed","just","like","always","don't","don't","don't","like","have","can't","figured","figured","could","like","would","like","guess","actually","could","can't","think","used","like","like","tried","would","tried","studied","ended","test","check","tried","really","first","think","only","think","could","didn't","personally","just","guess","learned","am","like","come","think","like","maximize","like","used","tried","like","like","like","don't","also","put","even","think","initially","agree,","got","only","like","understand","believe","like","decided","had","was","decided","feel","moved","think","think","think","guess","understand","saw","figured","don't","don't","agree","wrote","have","have","also","like","think","know","tried","looked","practically","don't","could","was","think","would","wasn't","was","think","have","can","only","have","applied","hope","assume","thought","have","don't","like","believe","like","treid","used","also","don't","personalty","think","chose","moved","am","feel","haven't"]},{"Key":"I think","Fragments":["that","that","it","it","is","I","the","if","this","splitting","that","the","regex","keeping","it","it","it","the","this","it","that","there","it","you","more","the","declaring","it","you","that","of","this","you","the","a","a","certain","using","size_t","regular","that","you","you","your","I'll","that","it","that","GNU's","this","the","that"]},{"Key":"think that","Fragments":["`std::regex`","using","is","there","is","the","makes","you","the","people","cleans"]},{"Key":"that `std::regex`","Fragments":["is"]},{"Key":"`std::regex` is","Fragments":["an"]},{"Key":"is an","Fragments":["overkill","address).","indirect","enum","overkill","iterator"]},{"Key":"an overkill","Fragments":["for","here."]},{"Key":"overkill for","Fragments":["this","simple"]},{"Key":"for this","Fragments":["job.","code.","function","case,","task.","task.","task","task.","exercise","exercise.","problem,","particular","example)","exercise.","exercise","variable."]},{"Key":"this job.","Fragments":["Regex"]},{"Key":"job. Regex","Fragments":["probably"]},{"Key":"Regex probably","Fragments":["should"]},{"Key":"probably should","Fragments":["be"]},{"Key":"should be","Fragments":["used","hidden","passed","able","declared","simplified.","slightly",":","replaced","private.","treated"]},{"Key":"be used","Fragments":["for","as","alternatively,"]},{"Key":"used for","Fragments":["complex"]},{"Key":"for complex","Fragments":["things,"]},{"Key":"complex things,","Fragments":["but"]},{"Key":"things, but","Fragments":["not"]},{"Key":"but not","Fragments":["this.","both?","massively.","visible","least:"]},{"Key":"not this.","Fragments":["It"]},{"Key":"this. It","Fragments":["makes"]},{"Key":"It makes","Fragments":["the","the"]},{"Key":"makes the","Fragments":["code","code","code","implementation.","implementation.","list","code","code"]},{"Key":"the code","Fragments":["less","more","look","that","clearer.","so","clearer.","quite","easier","cleaner.","itself","simpler","a","much","quite","is","in","here","more","at","a","is","more","with","in","more","shorter.","flow","into","neater"]},{"Key":"code less","Fragments":["readable,"]},{"Key":"less readable,","Fragments":["at"]},{"Key":"readable, at","Fragments":["least"]},{"Key":"at least","Fragments":["for","``\u003ccctype\u003e``.","to","80%","one","one","at","the","easier"]},{"Key":"least for","Fragments":["me."]},{"Key":" Additionally,","Fragments":["I","some"]},{"Key":"Additionally, I","Fragments":["think"]},{"Key":"that using","Fragments":["some"]},{"Key":"using some","Fragments":["helper","of","of"]},{"Key":"some helper","Fragments":["functions"]},{"Key":"helper functions","Fragments":["with","should","here","(or","or","you","each"]},{"Key":"functions with","Fragments":["descriptive","`isYell`","the"]},{"Key":"with descriptive","Fragments":["names"]},{"Key":"descriptive names","Fragments":["should"]},{"Key":"names should","Fragments":["make"]},{"Key":"should make","Fragments":["the"]},{"Key":"make the","Fragments":["code","code","categories","code","case","line","rest","line","rest","code","return","changes.","decisions.","code","code","default","regex","code"]},{"Key":"code more","Fragments":["readable.","readable","complex","readable.","readable"]},{"Key":" After","Fragments":["reading","viewing","taking"]},{"Key":"After reading","Fragments":["my"]},{"Key":"reading my","Fragments":["own"]},{"Key":"my own","Fragments":["code,","projects.","submission"]},{"Key":"own code,","Fragments":["I"]},{"Key":"code, I","Fragments":["am"]},{"Key":"I am","Fragments":["confused","wondering","iterating","quite","not","a","not","a","doing","not","currently","brand","supposed","copy-constructing"]},{"Key":"am confused","Fragments":["that"]},{"Key":"confused that","Fragments":["why"]},{"Key":"that why","Fragments":["does"]},{"Key":"why does","Fragments":["this"]},{"Key":"does this","Fragments":["even"]},{"Key":"this even","Fragments":["compile.","need"]},{"Key":" The","Fragments":["functions","`isUpperCasePresent`","header","helper","good:","bad:","predicate","loop","way","algorithm","only","yell_or_silence","has_only_digits","transform","conversion","isSilence","issue","library","first","code","first","`\u0026`","way","name","overall","next","entries","message","results","Boost","parens","using","STL","way","result","difference"]},{"Key":"The functions","Fragments":["`all_of`,"]},{"Key":"functions `all_of`,","Fragments":["`none_of`"]},{"Key":"`all_of`, `none_of`","Fragments":["and"]},{"Key":"`none_of` and","Fragments":["`any_of`"]},{"Key":"and `any_of`","Fragments":["are"]},{"Key":"`any_of` are","Fragments":["in"]},{"Key":"are in","Fragments":["`namespace","`bob_test.cpp`","the"]},{"Key":"in `namespace","Fragments":["std`."]},{"Key":"`namespace std`.","Fragments":["I"]},{"Key":"std`. I","Fragments":["didn't"]},{"Key":"I didn't","Fragments":["do","realize","expect","find","know","have","know","realize","understand","quite","know","need","want","know","think","know","know"]},{"Key":"didn't do","Fragments":["`using"]},{"Key":"do `using","Fragments":["namespace"]},{"Key":"`using namespace","Fragments":["std`","std;`","std`","std`","std`.","std`","std`"]},{"Key":"namespace std`","Fragments":["but","because","or","can","is"]},{"Key":"std` but","Fragments":["just"]},{"Key":"but just","Fragments":["`using"]},{"Key":"just `using","Fragments":["std::string`."]},{"Key":" How","Fragments":["did","to"]},{"Key":"How did","Fragments":["the"]},{"Key":"did the","Fragments":["namespace"]},{"Key":"the namespace","Fragments":["look-up","correctly,","but","`bob`."]},{"Key":"namespace look-up","Fragments":["find"]},{"Key":"look-up find","Fragments":["those"]},{"Key":"find those","Fragments":["functions?"]},{"Key":"those functions?","Fragments":["Am"]},{"Key":"functions? Am","Fragments":["I"]},{"Key":"Am I","Fragments":["using"]},{"Key":"I using","Fragments":["the"]},{"Key":"using the","Fragments":["`using`","C","Boost","switch","using","old","namespace","regex","heavy-handed","`'\\0'`","\u003calgorithm\u003e","struct","build"]},{"Key":"the `using`","Fragments":["statement"]},{"Key":"`using` statement","Fragments":["correctly?"]},{"Key":"I have","Fragments":["to","no","a","now","iostream","to","a","are","to","to","created","decided","3","3","3","3","a","tried","to","not","been","tried","since","a","a"]},{"Key":"have to","Fragments":["say,","do","do","test","write","comprehend","solve","loop","type","write","change","use","be","implement","be","change","concede","keep","modify","change","admit","integrate"]},{"Key":"to say,","Fragments":["the"]},{"Key":"say, the","Fragments":["readme"]},{"Key":"the readme","Fragments":["files"]},{"Key":"readme files","Fragments":["for"]},{"Key":"files for","Fragments":["these","a"]},{"Key":"for these","Fragments":["exercises","exercises."]},{"Key":"these exercises","Fragments":["become","as"]},{"Key":"exercises become","Fragments":["worse."]},{"Key":"become worse.","Fragments":["Having"]},{"Key":"worse. Having","Fragments":["to"]},{"Key":"Having to","Fragments":["read"]},{"Key":"to read","Fragments":["the","http://help.exercism.io/getting-started-with-cpp.html","private","and","the","to","in"]},{"Key":"read the","Fragments":["unit","Kernighan","string","first","read-me"]},{"Key":"the unit","Fragments":["tests","tests","tests,","tests"]},{"Key":"unit tests","Fragments":["to","would","require","which"]},{"Key":"tests to","Fragments":["figure","pass"]},{"Key":"to figure","Fragments":["out","out"]},{"Key":"figure out","Fragments":["what","what","where"]},{"Key":"out what","Fragments":["you","`islower`","the"]},{"Key":"what you","Fragments":["have","mean","are","want","wrote.","think!"]},{"Key":"you have","Fragments":["to","to","to","authors","to","'using","pre-processed","kept","this","a","trouble","to","are","to"]},{"Key":"to do","Fragments":["is","for","that","with","to","--","this","that","this,","basic","this","it","the","this","it,","it","declare"]},{"Key":"do is","Fragments":["kind"]},{"Key":"is kind","Fragments":["of","of","of","of"]},{"Key":"kind of","Fragments":["stupid.","approach.","inflexible.","cool,","abusing","text`","a","cheating…","expensive.","sucks","thing.","weird,"]},{"Key":" You","Fragments":["should","might","need","could","might","should","don't","should","first","could","should","could","rely","can","could","can","could","also","shouldn't","should","can","may","forgot","made","could","could","may"]},{"Key":"You should","Fragments":["put","also","consider","also","put","check","avoid","have"]},{"Key":"should put","Fragments":["this","\"const"]},{"Key":"put this","Fragments":["in"]},{"Key":"this in","Fragments":["a","a","any"]},{"Key":"in a","Fragments":["namespace","header","header","header.","string:","string;","translation","separate","namespace,","class.","class","way","namespace","bob","class","readable","negative","default","given","header","couple","separate","const","macro","lot","helper","class","different","header","few","map","(possibly","real-world"]},{"Key":"a namespace","Fragments":["called","or","is","or","instead","in","called","as","instead.","thanks","but","for","\"bob\"","and","work,","and"]},{"Key":"namespace called","Fragments":["`bob`","bob,"]},{"Key":"called `bob`","Fragments":["not"]},{"Key":"`bob` not","Fragments":["a"]},{"Key":"not a","Fragments":["class,","good","shout,","fan","letter.","modifier"]},{"Key":"a class,","Fragments":["and","or","then","after","instead","and","when","so"]},{"Key":"class, and","Fragments":["put","defining"]},{"Key":"and put","Fragments":["those"]},{"Key":"put those","Fragments":["private"]},{"Key":"those private","Fragments":["functions","members"]},{"Key":"private functions","Fragments":["into"]},{"Key":"functions into","Fragments":["an"]},{"Key":"into an","Fragments":["anonymous","Intro","int"]},{"Key":"an anonymous","Fragments":["namespace","namespace,","namespace","namespace?","namespace","namespace","namespace.","namespace."]},{"Key":"anonymous namespace","Fragments":["instead.","in","is","in","wouldn't"]},{"Key":"namespace instead.","Fragments":["That"]},{"Key":"instead. That","Fragments":["is","way"]},{"Key":"That is","Fragments":["how"]},{"Key":"is how","Fragments":["namespaces","a","a","a","a"]},{"Key":"how namespaces","Fragments":["are"]},{"Key":"namespaces are","Fragments":["used","the"]},{"Key":"You might","Fragments":["want","like"]},{"Key":"might want","Fragments":["to","to"]},{"Key":"want to","Fragments":["read","check","add","expose","check","prefix","do.","learn","copy","prefer","check","present","use","omit","find","account"]},{"Key":"You need","Fragments":["files","to"]},{"Key":"need files","Fragments":["named"]},{"Key":"files named","Fragments":["`bob.h`"]},{"Key":"named `bob.h`","Fragments":["and"]},{"Key":"`bob.h` and","Fragments":["`bob.cpp`."]},{"Key":"and `bob.cpp`.","Fragments":["The"]},{"Key":"`bob.cpp`. The","Fragments":["tests"]},{"Key":"The tests","Fragments":["are","were"]},{"Key":"tests are","Fragments":["in"]},{"Key":" There","Fragments":["are","is","is","probably","are","are","are","are","are","is","are"]},{"Key":"There are","Fragments":["quite","no","also","a","certainly","a","two"]},{"Key":"are quite","Fragments":["some"]},{"Key":"quite some","Fragments":["flaws","in"]},{"Key":"some flaws","Fragments":["here,"]},{"Key":"flaws here,","Fragments":["ordered"]},{"Key":"here, ordered","Fragments":["roughly"]},{"Key":"ordered roughly","Fragments":["by"]},{"Key":"roughly by","Fragments":["priority:"]},{"Key":" -","Fragments":["`is_quiet`","`is_question`","`is_upper`","`using","`contains_alpha`","Maybe","Your","`isQuestion`","`isUpperCasePresent`","`isLowerCasePresent`","`isShouting`","`isQuestion`","It's","is_shouting","The","std::string","indexing","If","To","increment","or","You","When","Include","You","It's","I've","I","I've","Each","I","Lines","Line","I'm","It"]},{"Key":"- `is_quiet`","Fragments":["should"]},{"Key":"`is_quiet` should","Fragments":["return"]},{"Key":"should return","Fragments":["a"]},{"Key":"return a","Fragments":["`bool`.","bool.","const.","copy","number)","map.","local","local","local"]},{"Key":"a `bool`.","Fragments":["As"]},{"Key":"`bool`. As","Fragments":["it"]},{"Key":"As it","Fragments":["stands,"]},{"Key":"it stands,","Fragments":["I"]},{"Key":"stands, I","Fragments":["don't"]},{"Key":"I don't","Fragments":["quite","want","feel","need","know","know,","think","think","think","think","see","have","feel","have","know","think","know","really","exactly","believe","think","think","see","specify","really","want","really","think","believe","particularly","have","think"]},{"Key":"don't quite","Fragments":["understand"]},{"Key":"quite understand","Fragments":["what","it"]},{"Key":"understand what","Fragments":["it","exactly","they"]},{"Key":"what it","Fragments":["is","does.","could","is"]},{"Key":"it is","Fragments":["supposed","not","in","not","side-effect","the","indeed","an","still","not","a","better","much","not","compatible","a","the","a","suppose","valid","a","considered","considered","shorter","deleted.","clearer.","not","probablty","better","because"]},{"Key":"is supposed","Fragments":["to","to","to"]},{"Key":"supposed to","Fragments":["do.","output","be","ignore","ignore","be"]},{"Key":"to do.","Fragments":["`string(\u0026text[first],"]},{"Key":"do. `string(\u0026text[first],","Fragments":["\u0026text[last]);`"]},{"Key":"`string(\u0026text[first], \u0026text[last]);`","Fragments":["copies"]},{"Key":"\u0026text[last]);` copies","Fragments":["a"]},{"Key":"copies a","Fragments":["string"]},{"Key":"a string","Fragments":["starting","with","containing","containing","containing","and","as","into","to","in","object","array,","like","contains","with"]},{"Key":"string starting","Fragments":["from"]},{"Key":"starting from","Fragments":["`\u0026text[first]`"]},{"Key":"from `\u0026text[first]`","Fragments":["with"]},{"Key":"`\u0026text[first]` with","Fragments":["length"]},{"Key":"with length","Fragments":["of"]},{"Key":"length of","Fragments":["`\u0026text[last]`","the","less"]},{"Key":"of `\u0026text[last]`","Fragments":["(which"]},{"Key":"`\u0026text[last]` (which","Fragments":["is"]},{"Key":"(which is","Fragments":["an","expressed"]},{"Key":"- `is_question`","Fragments":["is"]},{"Key":"`is_question` is","Fragments":["undefined"]},{"Key":"is undefined","Fragments":["behavior","behavior"]},{"Key":"undefined behavior","Fragments":["when","when","or","when","if"]},{"Key":"behavior when","Fragments":["`text`","`statement`","query"]},{"Key":"when `text`","Fragments":["is"]},{"Key":"`text` is","Fragments":["empty."]},{"Key":"- `is_upper`","Fragments":["can"]},{"Key":"be easily","Fragments":["confused","readable.","rewritten"]},{"Key":"easily confused","Fragments":["with"]},{"Key":"- `using","Fragments":["namespace"]},{"Key":"namespace std;`","Fragments":["can"]},{"Key":"std;` can","Fragments":["cause"]},{"Key":"can cause","Fragments":["some"]},{"Key":"cause some","Fragments":["name"]},{"Key":"some name","Fragments":["clashes,"]},{"Key":"name clashes,","Fragments":["especially"]},{"Key":"clashes, especially","Fragments":["when"]},{"Key":"especially when","Fragments":["you"]},{"Key":"when you","Fragments":["use","find","don't","need"]},{"Key":"you use","Fragments":["it","to_lower_copy","a","the","to","a"]},{"Key":"use it","Fragments":["in","in","at","in"]},{"Key":"it in","Fragments":["a","another","the","case","the","this","a","the","headers","a"]},{"Key":"a header","Fragments":["file.","file","due","file.","file.","file."]},{"Key":"- `contains_alpha`","Fragments":["can"]},{"Key":"`contains_alpha` can","Fragments":["be"]},{"Key":"be implemented","Fragments":["as","with"]},{"Key":"implemented as","Fragments":["a"]},{"Key":"as a","Fragments":["one-liner:","function","series","collection","comment","copy,","language","trivial","const","const","quick","shout.","bonus","const","grep","break.","\"best"]},{"Key":"a one-liner:","Fragments":["`any_of(begin(text),end(text),isalpha)`"]},{"Key":"- Maybe","Fragments":["put"]},{"Key":"Maybe put","Fragments":["in"]},{"Key":"put in","Fragments":["some","the","a","a"]},{"Key":"in some","Fragments":["`assert`s?","of","respects."]},{"Key":"- Your","Fragments":["helper"]},{"Key":"Your helper","Fragments":["functions"]},{"Key":"functions should","Fragments":["be"]},{"Key":"be hidden","Fragments":["in"]},{"Key":"hidden in","Fragments":["an"]},{"Key":"in an","Fragments":["anonymous","implementation","inner","exclamation","anonymous","anonymous","anonymous","exclamation","onlinecompiler"]},{"Key":"anonymous namespace,","Fragments":["so","so"]},{"Key":"namespace, so","Fragments":["it","the","I"]},{"Key":"so it","Fragments":["would","is","makes"]},{"Key":"it would","Fragments":["be","result","make","be","make","make","be","have","be","work","be","be","be","perfect","be","also","not"]},{"Key":"would be","Fragments":["impossible","a","to","simpler","clearer","clearer","required,","the","considered","discarded","a","a","tokenized","something","the","normal","greatly","better.....","a","a","significantly","cheaper","more","constant","faster.","faster","in","to","clearer.","much","to","checked","relatively","relatively","relatively","relatively","better.","to","something"]},{"Key":"be impossible","Fragments":["to"]},{"Key":"impossible to","Fragments":["access"]},{"Key":"to access","Fragments":["it","isYell,"]},{"Key":"access it","Fragments":["from"]},{"Key":"it from","Fragments":["outside."]},{"Key":" This","Fragments":["code","will","is","is","exercise","is","seems","is","version","code","would","is","makes","makes","seemed","is","is","was","is","looks","is","would","is","passes","solution"]},{"Key":"This code","Fragments":["has","does","would"]},{"Key":"code has","Fragments":["some"]},{"Key":"has some","Fragments":["subtle","merits."]},{"Key":"some subtle","Fragments":["potential"]},{"Key":"subtle potential","Fragments":["bugs"]},{"Key":"potential bugs","Fragments":["here:"]},{"Key":"- `isQuestion`","Fragments":["will","can"]},{"Key":"`isQuestion` will","Fragments":["have"]},{"Key":"will have","Fragments":["undefined","comments."]},{"Key":"have undefined","Fragments":["behavior"]},{"Key":"when `statement`","Fragments":["is"]},{"Key":"`statement` is","Fragments":["empty."]},{"Key":"is empty.","Fragments":["This","So","So"]},{"Key":"empty. This","Fragments":["happens"]},{"Key":"This happens","Fragments":["because"]},{"Key":"happens because","Fragments":["the"]},{"Key":"because the","Fragments":["`isSilence`","question","\u0026","unit","third"]},{"Key":"the `isSilence`","Fragments":["check"]},{"Key":"`isSilence` check","Fragments":["happens"]},{"Key":"check happens","Fragments":["after"]},{"Key":"happens after","Fragments":["`isQuestion`"]},{"Key":"- `isUpperCasePresent`","Fragments":["is"]},{"Key":"`isUpperCasePresent` is","Fragments":["actually"]},{"Key":"is actually","Fragments":["`isAlphaPresent`","the","doing?","being"]},{"Key":"Additionally, some","Fragments":["functions"]},{"Key":"some functions","Fragments":["can"]},{"Key":"functions can","Fragments":["be"]},{"Key":"be made","Fragments":["slightly","the","more","much","and"]},{"Key":"made slightly","Fragments":["more"]},{"Key":"slightly more","Fragments":["concise:","work"]},{"Key":"- `isLowerCasePresent`","Fragments":["can"]},{"Key":"`isLowerCasePresent` can","Fragments":["be"]},{"Key":"be `return","Fragments":["std::any_of(statement.begin(),","isUpperCasePresent(statement)","statement.back()=='?'`"]},{"Key":"`return std::any_of(statement.begin(),","Fragments":["statement.end(),"]},{"Key":"std::any_of(statement.begin(), statement.end(),","Fragments":["islower);`"]},{"Key":"- `isShouting`","Fragments":["can"]},{"Key":"`isShouting` can","Fragments":["be"]},{"Key":"`return isUpperCasePresent(statement)","Fragments":["\u0026\u0026"]},{"Key":"isUpperCasePresent(statement) \u0026\u0026","Fragments":["!isLowerCasePresent(statement)`"]},{"Key":"`isQuestion` can","Fragments":["be"]},{"Key":"I felt","Fragments":["I","compelled"]},{"Key":"felt I","Fragments":["could"]},{"Key":"I could","Fragments":["have","directly","probably","probably","pass","use","be","put","not","use","not","use","have","just","have","potentially","potentially","change","probably","make","potentially","get","come","figure"]},{"Key":"could have","Fragments":["improved","used","problem","used","moved","used","used","used"]},{"Key":"have improved","Fragments":["the"]},{"Key":"improved the","Fragments":["shouting"]},{"Key":"the shouting","Fragments":["check,"]},{"Key":"shouting check,","Fragments":["but"]},{"Key":"check, but","Fragments":["ran"]},{"Key":"but ran","Fragments":["out"]},{"Key":"ran out","Fragments":["of"]},{"Key":"out of","Fragments":["time.","the","`is_quiet`.","there","it","your","habit,","the"]},{"Key":" For","Fragments":["the","example,","example","the","checking","more","the"]},{"Key":"For the","Fragments":["first","yelling","rest,","`back_inserter`"]},{"Key":"the first","Fragments":["nitpick,","time","place","'a'","test!","character","passed","or","iteration.","and","iteration:","place,","inserted","loop,","if","stack","time","and"]},{"Key":"first nitpick,","Fragments":["the"]},{"Key":"nitpick, the","Fragments":["`'\\0'`"]},{"Key":"the `'\\0'`","Fragments":["represents","is"]},{"Key":"`'\\0'` represents","Fragments":["an"]},{"Key":"represents an","Fragments":["empty"]},{"Key":"an empty","Fragments":["string,","string","constructor","string","string.","string."]},{"Key":"empty string,","Fragments":["not"]},{"Key":"string, not","Fragments":["an"]},{"Key":"not an","Fragments":["int.","anagram"]},{"Key":"an int.","Fragments":["But"]},{"Key":"int. But","Fragments":["I"]},{"Key":"But I","Fragments":["agree","don't","agree,","think","would","like","like","tested","would","wonder","have","can"]},{"Key":"I agree","Fragments":["with","that","that","with"]},{"Key":"agree with","Fragments":["the","you"]},{"Key":"with the","Fragments":["rest.","static","fact","default","strings","original","corrections","`find_first_of`","c++","gcc","basic","original","sorted","implementation","syntax","implementation","`returnValue[wordBuffer]++;`","template","module"]},{"Key":"the rest.","Fragments":["Can"]},{"Key":"rest. Can","Fragments":["you"]},{"Key":"Can you","Fragments":["clarify","break","think","think","think","think","think","think","think"]},{"Key":"you clarify","Fragments":["what"]},{"Key":"clarify what","Fragments":["you"]},{"Key":"you mean","Fragments":["with"]},{"Key":"mean with","Fragments":["`find_if`?"]},{"Key":"The `isUpperCasePresent`","Fragments":["function"]},{"Key":"`isUpperCasePresent` function","Fragments":["can"]},{"Key":"function can","Fragments":["be","be"]},{"Key":"made the","Fragments":["same","control","'hey'"]},{"Key":"the same","Fragments":["way","header.","methods","semantic","executable","as","effect","semantic","expression","for","as","value","candidate","candidate","if","as","for","code","holds","string","number","way","logic","as","by","logic.","object"]},{"Key":"same way","Fragments":["as","as"]},{"Key":"way as","Fragments":["`isLowerCasePresent`.","you"]},{"Key":"as `isLowerCasePresent`.","Fragments":["That's"]},{"Key":"`isLowerCasePresent`. That's","Fragments":["probably"]},{"Key":"That's probably","Fragments":["the"]},{"Key":"probably the","Fragments":["last","fastest"]},{"Key":"the last","Fragments":["thing","character","char","character","character","statement","one)","unit"]},{"Key":"last thing","Fragments":["you"]},{"Key":"thing you","Fragments":["have","might"]},{"Key":"do for","Fragments":["this","me."]},{"Key":"I realized","Fragments":["that","this"]},{"Key":"realized that","Fragments":["rather","is"]},{"Key":"that rather","Fragments":["than"]},{"Key":"rather than","Fragments":["splitting","by","explicit","copying","the","a","the","checking","using","make"]},{"Key":"than splitting","Fragments":["the"]},{"Key":"splitting the","Fragments":["string"]},{"Key":"the string","Fragments":["into","(even","by","is","once","explicitly","in","in","told","is","into","is","must","as","contains","lenght","argumentsby","has","possibly","given","to","(copying","and","passed","first","than","once.","more","(though","letter","in","is","\"*\"","instead","like","library.","once,","each","(e.g.","has","and","and","you","to","until","successfully.","successfully.","is","is","indexing","was","that","(the","through","has"]},{"Key":"string into","Fragments":["a","lower","functions"]},{"Key":"into a","Fragments":["vector,","predicate","functor.","predicate","separate","separate","std::for_each()","namespace","single","string","for-element","2-step","space","`vector`.\u003c/li\u003e"]},{"Key":"a vector,","Fragments":["and"]},{"Key":"vector, and","Fragments":["the"]},{"Key":"and the","Fragments":["iterating","brevity","tests","map","input","tests","required","last","compiler","`accumulate`.","amount","word","word","evaluation","stackoverflow-originated","boolean","`at`","boolean"]},{"Key":"the iterating","Fragments":["over","type."]},{"Key":"iterating over","Fragments":["the","the","the","a","indices","two","all","the","the"]},{"Key":"over the","Fragments":["vector,","results","string.","string","elements","results","input","characters","string.","string","string","input","question"]},{"Key":"the vector,","Fragments":["I"]},{"Key":"vector, I","Fragments":["could"]},{"Key":"could directly","Fragments":["iterate"]},{"Key":"directly iterate","Fragments":["over"]},{"Key":"iterate over","Fragments":["the","the","every","the","the"]},{"Key":"the results","Fragments":["of","of"]},{"Key":"results of","Fragments":["the","calling"]},{"Key":"of the","Fragments":["splitting","problem,","string.","directive","\"cctype\"","input","approach","test","header","conditions","isYell()","cpp.","header.","same","problem","problem","class","candidates","count","time,","method,","problem","decisions","domain","problem.","implementation","problem.","characters","problem.","problem.","namespace!","algorithms","Bob","test","previous","functions","```auto```","input","benefits","input?","tests,","strings.","code","message","word,","using","function","map;","program.","implementation","bob","code","input","input","file","bob","responses","string","STL","check","text","text","way","for-loop.","functions","postfix-variant","map","[standard](http://www.cplusplus.com/reference/map/map/operator%5B%5D/)","ways","C++","program,","string","string","alphabet","match.\u003c/li\u003e\u003c/ol\u003e","for","match.\u003c/li\u003e\u003c/ol\u003e","times","`string`","operation","unnamed","check","time*.","time*,","word","key","`std::min`","operation","copy-construction","project","overhead","boost"]},{"Key":"the splitting","Fragments":["regex."]},{"Key":" Have","Fragments":["you","you","you","you","you","you"]},{"Key":"Have you","Fragments":["considered","considered","considered","actually","taken","noticed","noticed","included"]},{"Key":"you considered","Fragments":["using","std::is_permutation()?","std::is_permutation?","using"]},{"Key":"considered using","Fragments":["boost::tokenizer?","regular","standard"]},{"Key":" While","Fragments":["it","I","this"]},{"Key":"While it","Fragments":["is","doesn't"]},{"Key":"is not","Fragments":["required","necessary.","empty.","permitted","defined","an","so","whitespace,","important","a","desirable)","done","in","needed","possible","empty","\"ill-formed\";","a","too","a","really","the","yet","yet","needed.","in","alpha-numeric","really","safe.","safe"]},{"Key":"not required","Fragments":["by"]},{"Key":"required by","Fragments":["the"]},{"Key":"by the","Fragments":["tests,","test","way.","C++11","tests","way:","next","test","boost","shortest","shortest"]},{"Key":"the tests,","Fragments":["this","however","albeit"]},{"Key":"tests, this","Fragments":["version"]},{"Key":"this version","Fragments":["should","here","is"]},{"Key":"version should","Fragments":["support"]},{"Key":"should support","Fragments":["string"]},{"Key":"support string","Fragments":["as"]},{"Key":"string as","Fragments":["well","I've","a"]},{"Key":"as well","Fragments":["as","not","as","as","as","as","as","as","as","as","as"]},{"Key":"well as","Fragments":["u16string","making","the","range","uppercase,","references","const","the","shortening","incrementing"]},{"Key":"as u16string","Fragments":["and"]},{"Key":"u16string and","Fragments":["u32string."]},{"Key":" Thanks!","Fragments":["Good"]},{"Key":"Thanks! Good","Fragments":["point."]},{"Key":" Mostly","Fragments":["agreed."]},{"Key":"Mostly agreed.","Fragments":["But"]},{"Key":"agreed. But","Fragments":["don't"]},{"Key":"But don't","Fragments":["you"]},{"Key":"don't you","Fragments":["feel","look"]},{"Key":"you feel","Fragments":["uneasy"]},{"Key":"feel uneasy","Fragments":["hard-coding"]},{"Key":"uneasy hard-coding","Fragments":["strings"]},{"Key":"hard-coding strings","Fragments":["as"]},{"Key":"strings as","Fragments":["return","const","global","const"]},{"Key":"as return","Fragments":["values?"]},{"Key":"return values?","Fragments":["But"]},{"Key":"values? But","Fragments":["OK,"]},{"Key":"But OK,","Fragments":["that's"]},{"Key":"OK, that's","Fragments":["not"]},{"Key":"that's not","Fragments":["such","the"]},{"Key":"not such","Fragments":["a"]},{"Key":"such a","Fragments":["big","degree","regex","text,"]},{"Key":"a big","Fragments":["deal"]},{"Key":"big deal","Fragments":["since"]},{"Key":"deal since","Fragments":["by"]},{"Key":"since by","Fragments":["adding"]},{"Key":"by adding","Fragments":["a"]},{"Key":"adding a","Fragments":["enum","constructor/destructor","bunch"]},{"Key":"a enum","Fragments":["and"]},{"Key":"enum and","Fragments":["a","the","return"]},{"Key":"and a","Fragments":["map","struct","binary","single","check","exclamation","teensy","bigger","function","new"]},{"Key":"a map","Fragments":["I","character","return","return","and"]},{"Key":"map I","Fragments":["just"]},{"Key":"I just","Fragments":["hard-coded","re-stumbled","tried","noticed","wanted","called","used","have","see","checked","don't","tried"]},{"Key":"just hard-coded","Fragments":["it"]},{"Key":"hard-coded it","Fragments":["in"]},{"Key":"in another","Fragments":["place...","unnamed"]},{"Key":"I really","Fragments":["would","like","love","like","like","like","like","like"]},{"Key":"really would","Fragments":["like"]},{"Key":"would like","Fragments":["to","to","to"]},{"Key":"like to","Fragments":["use","use","know","look","factor","know","know","separate","get"]},{"Key":"to use","Fragments":["`boost::erase_all(sth,","here.","regular","on","a","switch","pointer","that","the","split","this","#pragma","\"C\"","the","the","C++'s","a","string","two","`g++","a","variables","is*","back_inserter,","a","the","the","`regex_replace`"]},{"Key":"use `boost::erase_all(sth,","Fragments":["\""]},{"Key":"`boost::erase_all(sth, \"","Fragments":["\").empty()`"]},{"Key":"\" \").empty()`","Fragments":["but"]},{"Key":"\").empty()` but","Fragments":["`erase_all`"]},{"Key":"but `erase_all`","Fragments":["modify"]},{"Key":"`erase_all` modify","Fragments":["its"]},{"Key":"modify its","Fragments":["argument"]},{"Key":"its argument","Fragments":["in"]},{"Key":"argument in","Fragments":["place"]},{"Key":"in place","Fragments":["and"]},{"Key":"place and","Fragments":["return"]},{"Key":"and return","Fragments":["`void`","the","a","the","it."]},{"Key":"return `void`","Fragments":["=("]},{"Key":"I found","Fragments":["it","this","out","out","a"]},{"Key":"found it","Fragments":["most","matched"]},{"Key":"it most","Fragments":["interesting"]},{"Key":"most interesting","Fragments":["your"]},{"Key":"interesting your","Fragments":["concerns"]},{"Key":"your concerns","Fragments":["about"]},{"Key":"concerns about","Fragments":["talking"]},{"Key":"about talking","Fragments":["more"]},{"Key":"talking more","Fragments":["in","in"]},{"Key":"more in","Fragments":["the","the"]},{"Key":"in the","Fragments":["domain","next","map.","`\u003clocale\u003e`","production","string,","header,","header?","implementation","standard","character","same","string","range","argument","`cpp`.","loop","loop","loop","initial",".cpp.","source","source","domain","sieve.","algorithm","static_cast","constructor,","constructor","problem","method","beginning","beginning","string.","habit,","message.","C++98,","string","process)","candidate","vector?","implementation","main","long","sequence.","string","input","output","ass.","words.","size","candidate","hey","latter","map.","end","string","string","function?","function?","first","header","container,","guard.","next","first","second","first","middle","same","if-statement.","header?","test","test"]},{"Key":"the domain","Fragments":["of","of","of"]},{"Key":"domain of","Fragments":["the","the","the"]},{"Key":"the problem,","Fragments":["delegating"]},{"Key":"problem, delegating","Fragments":["low-levelness"]},{"Key":"delegating low-levelness","Fragments":["to"]},{"Key":"low-levelness to","Fragments":["helpers."]},{"Key":"to helpers.","Fragments":["That's"]},{"Key":"helpers. That's","Fragments":["a"]},{"Key":"That's a","Fragments":["very"]},{"Key":"a very","Fragments":["good","succinct","good","advanced","minor"]},{"Key":"very good","Fragments":["point,","idea.","that"]},{"Key":"good point,","Fragments":["thank"]},{"Key":"point, thank","Fragments":["you!"]},{"Key":" A","Fragments":["few","switch","couple","question","couple","single","good","strings"]},{"Key":"A few","Fragments":["things"]},{"Key":"few things","Fragments":["come"]},{"Key":"things come","Fragments":["to","to"]},{"Key":"come to","Fragments":["mind:","lean","mind"]},{"Key":" *","Fragments":["In","Do","Range-based","Oh,","`bob::hey()`","Bob's","While","For","Emptiness","We","Yells","instead","good","c-style","using","You","What","You","The","changed","move","The","changed"]},{"Key":"* In","Fragments":["C++,"]},{"Key":"In C++,","Fragments":["a","the"]},{"Key":"C++, a","Fragments":["class"]},{"Key":"a class","Fragments":["is","also","as","declaration.","at","instead","seems","is","is","so","within","to","are","for"]},{"Key":"class is","Fragments":["per","designed","decidedly","named","to"]},{"Key":"is per","Fragments":["default","default"]},{"Key":"per default","Fragments":["private,","public."]},{"Key":"default private,","Fragments":["and"]},{"Key":"private, and","Fragments":["a"]},{"Key":"a struct","Fragments":["is"]},{"Key":"struct is","Fragments":["per"]},{"Key":"default public.","Fragments":["So"]},{"Key":"public. So","Fragments":["your"]},{"Key":"So your","Fragments":["`private:`"]},{"Key":"your `private:`","Fragments":["is"]},{"Key":"`private:` is","Fragments":["redundant."]},{"Key":"* Do","Fragments":["you"]},{"Key":"Do you","Fragments":["know","think","think","think","agree?","agree?"]},{"Key":"you know","Fragments":["about","you","you"]},{"Key":"know about","Fragments":["boost::to_lower_copy?","std::isspace(...)","std::all_of,","islower","this","the","the","the"]},{"Key":"* Range-based","Fragments":["for-loops"]},{"Key":"Range-based for-loops","Fragments":["are"]},{"Key":"for-loops are","Fragments":["a"]},{"Key":"are a","Fragments":["blessing","couple","very","couple","few","few","bad","(string,","lot"]},{"Key":"a blessing","Fragments":["in"]},{"Key":"blessing in","Fragments":["C++11,"]},{"Key":"in C++11,","Fragments":["use"]},{"Key":"C++11, use","Fragments":["them"]},{"Key":"use them","Fragments":["to","is"]},{"Key":"them to","Fragments":["avoid","get","other","other","the"]},{"Key":"to avoid","Fragments":["excessive","copying","\"using","a","`using","casting","costly","\"magic","potential","that"]},{"Key":"avoid excessive","Fragments":["typing."]},{"Key":"* Oh,","Fragments":["and"]},{"Key":"Oh, and","Fragments":["have","by"]},{"Key":"and have","Fragments":["you","very"]},{"Key":"have you","Fragments":["considered","forgotten"]},{"Key":" If","Fragments":["I","I","you","query.size()","anyone","you'd","you","you","Bob's","I","you"]},{"Key":"If I","Fragments":["replace","include","understand","could","can,"]},{"Key":"I replace","Fragments":["the"]},{"Key":"replace the","Fragments":["map","string"]},{"Key":"the map","Fragments":["with","and","to","data","are","if","is","is","could","structure."]},{"Key":"map with","Fragments":["a"]},{"Key":"with a","Fragments":["plain","question","range","for-loop,","non-const","const","custom","default","negative","non-alphanumeric","question","question","question","clear,"]},{"Key":"a plain","Fragments":["old"]},{"Key":"plain old","Fragments":["array"]},{"Key":"old array","Fragments":["of"]},{"Key":"array of","Fragments":["pairs,"]},{"Key":"of pairs,","Fragments":["the"]},{"Key":"pairs, the","Fragments":["executable"]},{"Key":"the executable","Fragments":["shrinks"]},{"Key":"executable shrinks","Fragments":["quite"]},{"Key":"shrinks quite","Fragments":["some"]},{"Key":"some in","Fragments":["size."]},{"Key":" However,","Fragments":["it","there","is_permutation","the","we","it","you","it","I"]},{"Key":"However, it","Fragments":["would","still","seems"]},{"Key":"would result","Fragments":["in"]},{"Key":"result in","Fragments":["broken","a","a"]},{"Key":"in broken","Fragments":["code"]},{"Key":"broken code","Fragments":["if"]},{"Key":"code if","Fragments":["anyone"]},{"Key":"if anyone","Fragments":["ever"]},{"Key":"anyone ever","Fragments":["changes"]},{"Key":"ever changes","Fragments":["the"]},{"Key":"changes the","Fragments":["table"]},{"Key":"the table","Fragments":["and"]},{"Key":"table and","Fragments":["forgets"]},{"Key":"and forgets","Fragments":["to"]},{"Key":"forgets to","Fragments":["keep"]},{"Key":"to keep","Fragments":["the","this","this","this","track","track","the"]},{"Key":"keep the","Fragments":["sorting","design"]},{"Key":"the sorting","Fragments":["order."]},{"Key":"am wondering","Fragments":["if"]},{"Key":"wondering if","Fragments":["there","this","\u003e="]},{"Key":"if there","Fragments":["is","is","are"]},{"Key":"there is","Fragments":["a","no","padding","a","the","already","a","no","not","whitespace","a","a"]},{"Key":"is a","Fragments":["compile-time","header","[link](http://en.cppreference.com/w/cpp/string/byte/isspace)","lot","little","nice","scoped","namespace","strange","shout","majority","yell\"","bit","char*,","static","namespace.","sequence","very","good","quick","pretty","question.","separate","problem","class","good","question).","pretty","tricky","function","question","question.","bit","universal","good","question,","much","bit","clever","classical","pitty","rather","header","clearer","question,","lot","far"]},{"Key":"a compile-time","Fragments":["sorted"]},{"Key":"compile-time sorted","Fragments":["map"]},{"Key":"sorted map","Fragments":["for"]},{"Key":"map for","Fragments":["C++,"]},{"Key":"for C++,","Fragments":["which"]},{"Key":"C++, which","Fragments":["is"]},{"Key":"which is","Fragments":["apparently","not","also","more","fairly","a","0","rather","good;","IMO","important","very","an","potentially","there","a","simple","mostly"]},{"Key":"is apparently","Fragments":["what"]},{"Key":"apparently what","Fragments":["I'd"]},{"Key":"what I'd","Fragments":["actually"]},{"Key":"I'd actually","Fragments":["like"]},{"Key":"actually like","Fragments":["to"]},{"Key":" Thank","Fragments":["you","you"]},{"Key":"Thank you","Fragments":["for","for"]},{"Key":"you for","Fragments":["the","all","the","having"]},{"Key":"for the","Fragments":["feedback.","iterating","function","job.","interface","other","`isEmpty`","corrections.","advice!","implementation,","string","various","testcase.","exact","existence","quiet","`respond()`","arguments","auto","result","complicated","beginning","beginning","hamming","C","advice!","tips,","pass","start","tips,","return","corresponding","corresponding","feedback!","second","`boost::tokenizer`.","inspiration","character","for","minimum","version"]},{"Key":"the feedback.","Fragments":["Going"]},{"Key":"feedback. Going","Fragments":["to"]},{"Key":"Going to","Fragments":["admit"]},{"Key":"to admit","Fragments":["feeling","though,"]},{"Key":"admit feeling","Fragments":["pretty"]},{"Key":"feeling pretty","Fragments":["dumb,"]},{"Key":"pretty dumb,","Fragments":["but"]},{"Key":"dumb, but","Fragments":["I"]},{"Key":"but I","Fragments":["didn't","need","can't","don't","didn't","think","don't","love","did","can","don't","still","think","have","didn't","had","really","found","think","couldn't","think","think","don't","thought","don't","would","ended","ran"]},{"Key":"didn't realize","Fragments":["that","that"]},{"Key":"realize that","Fragments":["would","`\u003cstring\u003e`","a"]},{"Key":"that would","Fragments":["work.","work","be","allow","mean","help","be"]},{"Key":"would work.","Fragments":["Great"]},{"Key":"work. Great","Fragments":["point."]},{"Key":"Great point.","Fragments":["Will"]},{"Key":"point. Will","Fragments":["definitely"]},{"Key":"Will definitely","Fragments":["make"]},{"Key":"definitely make","Fragments":["that"]},{"Key":"make that","Fragments":["change"]},{"Key":"that change","Fragments":["in"]},{"Key":"change in","Fragments":["the","the"]},{"Key":"the next","Fragments":["version.","one.","person.","word","iteration."]},{"Key":" Got","Fragments":["the"]},{"Key":"Got the","Fragments":["ctype/imbue"]},{"Key":"the ctype/imbue","Fragments":["idea"]},{"Key":"ctype/imbue idea","Fragments":["from"]},{"Key":"idea from","Fragments":["stackoverflow;"]},{"Key":"from stackoverflow;","Fragments":["thought"]},{"Key":"stackoverflow; thought","Fragments":["it"]},{"Key":"thought it","Fragments":["was","was"]},{"Key":"it was","Fragments":["pretty","luck","familiar","dumb","supposed","supposed","an"]},{"Key":"was pretty","Fragments":["cute"]},{"Key":"pretty cute","Fragments":["but"]},{"Key":"cute but","Fragments":["can't"]},{"Key":"but can't","Fragments":["take"]},{"Key":"can't take","Fragments":["credit"]},{"Key":"take credit","Fragments":["for"]},{"Key":"credit for","Fragments":["it."]},{"Key":" Integrated","Fragments":["suggestion"]},{"Key":"Integrated suggestion","Fragments":["from"]},{"Key":"suggestion from","Fragments":["previous"]},{"Key":"from previous","Fragments":["round"]},{"Key":"previous round","Fragments":["to"]},{"Key":"round to","Fragments":["leverage"]},{"Key":"to leverage","Fragments":["default-value"]},{"Key":"leverage default-value","Fragments":["construction"]},{"Key":"default-value construction","Fragments":["in"]},{"Key":"construction in","Fragments":["the"]},{"Key":"You could","Fragments":["check","have","potentially","check","use","also","transform","potentially","probably","boost","possibly","boost","check","change","make","just","use","have","move","eliminate"]},{"Key":"could check","Fragments":["for","for","if","for"]},{"Key":"check for","Fragments":["spaces","yelling","spaces","empty","\"yelling\".","a","all","spaces","a","a","a","un-flushed","its","tabs,","`ispunct()`","the"]},{"Key":"for spaces","Fragments":["after","at","at"]},{"Key":"spaces after","Fragments":["the","the"]},{"Key":"after the","Fragments":["'?'","string","question","algorithm","question","?.","for","'?'","Bob","loop"]},{"Key":"the '?'","Fragments":["at","as"]},{"Key":"'?' at","Fragments":["the"]},{"Key":"at the","Fragments":["end","character","top","same","signatures","end.","same","definition","end","end","input,","last","end","end?","end","top.","functions","time.","top","expense","very","test","song","moment.","top,","beginning"]},{"Key":"the end","Fragments":["of","before","would","then","of","might"]},{"Key":"end of","Fragments":["the","the","alpha-numerical","words","alpha-numerical","\"longword\"","words.","said"]},{"Key":"the string.","Fragments":["Otherwise,","Why","Change"]},{"Key":"string. Otherwise,","Fragments":["looks"]},{"Key":"Otherwise, looks","Fragments":["fine."]},{"Key":" What","Fragments":["I","about","happens","happens","do","happens","if","comes","platform"]},{"Key":"What I","Fragments":["like"]},{"Key":"I like","Fragments":["about","how","your","that","your","template","the","that","that","that","that","the","how","how","the","the","that","the","that","how","the","that","the","the","the","that.","the","your","the","it.","the","the","the","your","your","how","your","the"]},{"Key":"like about","Fragments":["your"]},{"Key":"about your","Fragments":["solution","private"]},{"Key":"your solution","Fragments":["is","will","specifically"]},{"Key":"solution is","Fragments":["that","fairly","probably","suggested"]},{"Key":"that you","Fragments":["didn't","should","really","included","extracted","used","need","ignore","used","rely","thought","had","use","made","separated","could","put","qualify","could","may","had","went"]},{"Key":"you didn't","Fragments":["try","find"]},{"Key":"didn't try","Fragments":["to"]},{"Key":"try to","Fragments":["put","use","avoid","keep","transform/accumulate","learn.","iterate","write","find","immediate","immediate","re-use","get","find","get","think","separate"]},{"Key":"to put","Fragments":["it","all","into","into","them","it","it"]},{"Key":"put it","Fragments":["all","inside:","into","all","all"]},{"Key":"it all","Fragments":["into","in","in"]},{"Key":"all into","Fragments":["one"]},{"Key":"into one","Fragments":["giant","regex"]},{"Key":"one giant","Fragments":["function."]},{"Key":"giant function.","Fragments":["This"]},{"Key":"function. This","Fragments":["code"]},{"Key":"code does","Fragments":["not,","not","not"]},{"Key":"does not,","Fragments":["however,","it"]},{"Key":"not, however,","Fragments":["pass"]},{"Key":"however, pass","Fragments":["the"]},{"Key":"pass the","Fragments":["tests","first","test.","tests.","strings","two"]},{"Key":"the tests","Fragments":["cases.","pass,","don't","as","to","*most"]},{"Key":"tests cases.","Fragments":["That's"]},{"Key":"cases. That's","Fragments":["just"]},{"Key":"That's just","Fragments":["due"]},{"Key":"just due","Fragments":["to"]},{"Key":"due to","Fragments":["a","the"]},{"Key":"to a","Fragments":["typo","static","static","function","lower","unary","(range)","string","lower-level","minimum,","wrong","word","namespace","result","result","0?","single","variable","namespace"]},{"Key":"a typo","Fragments":["(Whoa"]},{"Key":"typo (Whoa","Fragments":["vs"]},{"Key":"(Whoa vs","Fragments":["Woah)."]},{"Key":"vs Woah).","Fragments":["I"]},{"Key":"Woah). I","Fragments":["do,"]},{"Key":"I do,","Fragments":["however,","with"]},{"Key":"do, however,","Fragments":["have"]},{"Key":"however, have","Fragments":["a"]},{"Key":"have a","Fragments":["few","normal","working","bunch","love/hate","question",".h","yell","revised","cleaner","little","null-terminated","function","principle","feeling","background","lot"]},{"Key":"a few","Fragments":["general","machine","hours.","of","weeks","more","too","great","simplifications","details","optmizations?","cpu","words"]},{"Key":"few general","Fragments":["C++"]},{"Key":"general C++","Fragments":["tips"]},{"Key":"C++ tips","Fragments":["for"]},{"Key":"tips for","Fragments":["you."]},{"Key":" using","Fragments":["namespace","std::map;"]},{"Key":"using namespace","Fragments":["std;"]},{"Key":"I can't","Fragments":["tell","think","even","test","think","tell","think","think","return","return","return"]},{"Key":"can't tell","Fragments":["if","you"]},{"Key":"tell if","Fragments":["this"]},{"Key":"if this","Fragments":["is","were","pattern","is"]},{"Key":"this is","Fragments":["a","the","undefined","neither","\"C\",","my","just","a","the","new","a","simpler","nicely","treated","a","a","the","called","a"]},{"Key":"header file","Fragments":["or","is"]},{"Key":"file or","Fragments":["not","other"]},{"Key":"or not","Fragments":["(I","it","this","but","--"]},{"Key":"not (I","Fragments":["submitted"]},{"Key":"(I submitted","Fragments":["my"]},{"Key":"submitted my","Fragments":["solution"]},{"Key":"my solution","Fragments":["in"]},{"Key":"solution in","Fragments":["a","truth.","one"]},{"Key":"header due","Fragments":["to"]},{"Key":"to the","Fragments":["1","scope","correct","implementation","search","first","\"bob\"","vector","first","start","string","method).","string","check","mutable","different","inside","code.\u003c/li\u003e","usage","constructor","`cctype`","difference.\u003c/li\u003e","source","source","ostream","problem.","difference.\u003c/li\u003e"]},{"Key":"the 1","Fragments":["file"]},{"Key":"1 file","Fragments":["limit),"]},{"Key":"file limit),","Fragments":["but"]},{"Key":"limit), but","Fragments":["I"]},{"Key":"I need","Fragments":["to","the","to","two","to"]},{"Key":"need to","Fragments":["say","(potentially)","create","use","be","give","know","do","hold","be","implement","pass","return","ascertain","be","add","make","parse","access","create","be","be","run","use","return","be","be","compare"]},{"Key":"to say","Fragments":["that","that"]},{"Key":"say that","Fragments":["you","swapping","readability","regex","making"]},{"Key":"you should","Fragments":["never","modify","be","pass","pass","copy","try","check","check","have","have"]},{"Key":"should never","Fragments":["ever"]},{"Key":"never ever","Fragments":["type"]},{"Key":"ever type","Fragments":["this"]},{"Key":"type this","Fragments":["at"]},{"Key":"this at","Fragments":["global"]},{"Key":"at global","Fragments":["scope"]},{"Key":"global scope","Fragments":["in"]},{"Key":"scope in","Fragments":["a"]},{"Key":"a header.","Fragments":["Even"]},{"Key":"header. Even","Fragments":["if"]},{"Key":"Even if","Fragments":["it","it's"]},{"Key":"if it","Fragments":["is","would","is","read","passes","contradicts","does","ends","punctuation","bothers","isn't","has","has","is","is.\u003c/li\u003e","doesn't","is"]},{"Key":"is in","Fragments":["an","an","professional","fact","x\\n\";"]},{"Key":"an implementation","Fragments":["file"]},{"Key":"implementation file","Fragments":["(.cpp,"]},{"Key":"file (.cpp,","Fragments":[".cxx,"]},{"Key":"(.cpp, .cxx,","Fragments":[".C,"]},{"Key":".cxx, .C,","Fragments":["...),"]},{"Key":".C, ...),","Fragments":["there"]},{"Key":"...), there","Fragments":["is"]},{"Key":"is no","Fragments":["good","need","\"hey\"","benefit.","guarantee"]},{"Key":"no good","Fragments":["reason"]},{"Key":"good reason","Fragments":["not","to"]},{"Key":"reason not","Fragments":["to"]},{"Key":"not to","Fragments":["move","be"]},{"Key":"to move","Fragments":["your","testing"]},{"Key":"move your","Fragments":["using"]},{"Key":"your using","Fragments":["directive"]},{"Key":"using directive","Fragments":["inside"]},{"Key":"directive inside","Fragments":["of"]},{"Key":"inside of","Fragments":["your","the","the","`const"]},{"Key":"of your","Fragments":["bob","suggestions","function:","approach.","code,","checks","string","arguments.","program"]},{"Key":"your bob","Fragments":["namespace."]},{"Key":"bob namespace.","Fragments":["That"]},{"Key":"namespace. That","Fragments":["way,"]},{"Key":"That way,","Fragments":["the","m1"]},{"Key":"way, the","Fragments":["effect"]},{"Key":"the effect","Fragments":["of"]},{"Key":"effect of","Fragments":["the"]},{"Key":"the directive","Fragments":["is"]},{"Key":"directive is","Fragments":["limited"]},{"Key":"is limited","Fragments":["to"]},{"Key":"limited to","Fragments":["the"]},{"Key":"the scope","Fragments":["of","of","of","of"]},{"Key":"scope of","Fragments":["namespace","visibility.","visibility","variable"]},{"Key":"of namespace","Fragments":["bob."]},{"Key":" Also,","Fragments":["you're","you're","absolutely","it's","as","in","someone","it","I","I","I","I've","I'm","I","I'd","functions","making","grade"]},{"Key":"Also, you're","Fragments":["using","passing"]},{"Key":"you're using","Fragments":["the","a"]},{"Key":"the C","Fragments":["versions","standard","headers,"]},{"Key":"C versions","Fragments":["of"]},{"Key":"versions of","Fragments":["the","these","the"]},{"Key":"the \"cctype\"","Fragments":["functions"]},{"Key":"\"cctype\" functions","Fragments":["(isupper,"]},{"Key":"functions (isupper,","Fragments":["toupper,"]},{"Key":"(isupper, toupper,","Fragments":["etc)."]},{"Key":"toupper, etc).","Fragments":["It"]},{"Key":"etc). It","Fragments":["would"]},{"Key":"It would","Fragments":["be","be","boost","improve"]},{"Key":"be a","Fragments":["good","performance","const","sign","static","typo.","yell,","good","class","lot","static","faster","better","good","good","way","loop","lot","more","bit","good","range","simple"]},{"Key":"a good","Fragments":["idea","bit","tradeoff","way","idea","way","fit","reason","idea.","idea.","expressive","point.","move;","habit.","enough","chance","decision."]},{"Key":"good idea","Fragments":["to","to","to"]},{"Key":"idea to","Fragments":["explicitly","narrow","imbue","use","use"]},{"Key":"to explicitly","Fragments":["include"]},{"Key":"explicitly include","Fragments":["the"]},{"Key":"include the","Fragments":["header","proper"]},{"Key":"the header","Fragments":["`\u003ccctype\u003e`","for","or","guards.","and","file,"]},{"Key":"header `\u003ccctype\u003e`","Fragments":["if"]},{"Key":"`\u003ccctype\u003e` if","Fragments":["you"]},{"Key":"if you","Fragments":["insist","set","used","use","use","start","test","have","would","detect","know","pass","use","didn't","are","don't","pass","were"]},{"Key":"you insist","Fragments":["on"]},{"Key":"insist on","Fragments":["using"]},{"Key":"on using","Fragments":["them."]},{"Key":"using them.","Fragments":["Also"]},{"Key":"them. Also","Fragments":["be"]},{"Key":"Also be","Fragments":["aware"]},{"Key":"be aware","Fragments":["that","of"]},{"Key":"aware that","Fragments":["there"]},{"Key":"that there","Fragments":["are","is","would"]},{"Key":"there are","Fragments":["locale-aware","some","more","at","no","only","spaces","simply","some","library","a","a","other"]},{"Key":"are locale-aware","Fragments":["C++"]},{"Key":"locale-aware C++","Fragments":["versions"]},{"Key":"C++ versions","Fragments":["of"]},{"Key":"of these","Fragments":["functions","functions.","exercises","code","`break`s.","would"]},{"Key":"these functions","Fragments":["that","aren't"]},{"Key":"functions that","Fragments":["work","encapsulate","could","can","determine","are"]},{"Key":"that work","Fragments":["on"]},{"Key":"work on","Fragments":["multiple","is"]},{"Key":"on multiple","Fragments":["character"]},{"Key":"multiple character","Fragments":["types"]},{"Key":"character types","Fragments":["(we're"]},{"Key":"types (we're","Fragments":["talking"]},{"Key":"(we're talking","Fragments":["about"]},{"Key":"talking about","Fragments":["unicode","a","anonymous"]},{"Key":"about unicode","Fragments":["now)"]},{"Key":"unicode now)","Fragments":["defined"]},{"Key":"now) defined","Fragments":["in"]},{"Key":"defined in","Fragments":["the","my"]},{"Key":"the `\u003clocale\u003e`","Fragments":["header."]},{"Key":"`\u003clocale\u003e` header.","Fragments":["You"]},{"Key":"header. You","Fragments":["may"]},{"Key":"You may","Fragments":["want","also","be","want","also"]},{"Key":"may want","Fragments":["to","to","to","to","to"]},{"Key":"to check","Fragments":["those","if","for","for","for","the","for","if","if","2","if","if","if","if","each","each","Bob's","those","whether"]},{"Key":"check those","Fragments":["out.","conditions"]},{"Key":"those out.","Fragments":["You"]},{"Key":"out. You","Fragments":["may"]},{"Key":"may also","Fragments":["like","want"]},{"Key":"also like","Fragments":["to","how","the"]},{"Key":"to know","Fragments":["about","so","more","if","if","how","what"]},{"Key":"about std::isspace(...)","Fragments":["as"]},{"Key":"std::isspace(...) as","Fragments":["something"]},{"Key":"as something","Fragments":["you"]},{"Key":"something you","Fragments":["can"]},{"Key":"you can","Fragments":["use","google","simply","modify","do","get","*pretend*","save","turn","implement","make","make","use","replace","try","use","move","save","use","use","skip","have","make.","just","just","replace","simply","remove","use","use","just","in","use"]},{"Key":"can use","Fragments":["instead","range-based","std::transform()","`isupper()`","an","[`islower`](http://www.cplusplus.com/reference/cctype/islower/).","[`!isdigit`](http://www.cplusplus.com/reference/cctype/isdigit/)","size_t","[`std::find_if`](http://www.cplusplus.com/reference/algorithm/find_if/)","[`std::find_if`](http://www.cplusplus.com/reference/algorithm/find_if/)","isupper(letter)","isspace(letter)","say"]},{"Key":"use instead","Fragments":["of"]},{"Key":"instead of","Fragments":["`ch","manually","a","comments?","iterators.","default","categorizing","a","forcing","\"one\"","splitting","trying","using","a","\"stdio.h\",","a","using","checking","a","class.","using","``class``","`(tmp","int","using","simply","an","making","`string`,","`string","copying","just","`regex_match`","`phrase[phrase.size()-1]`","returning","just","a","that"]},{"Key":"of `ch","Fragments":["=="]},{"Key":"`ch ==","Fragments":["'"]},{"Key":"== '","Fragments":["'`"]},{"Key":"' '`","Fragments":["(it"]},{"Key":"'` (it","Fragments":["will"]},{"Key":"(it will","Fragments":["also"]},{"Key":"will also","Fragments":["detect","make"]},{"Key":"also detect","Fragments":["tabs,"]},{"Key":"detect tabs,","Fragments":["newlines,"]},{"Key":"tabs, newlines,","Fragments":["etc.)","line"]},{"Key":" Here","Fragments":["is"]},{"Key":"Here is","Fragments":["a"]},{"Key":"a [link](http://en.cppreference.com/w/cpp/string/byte/isspace)","Fragments":["that"]},{"Key":"[link](http://en.cppreference.com/w/cpp/string/byte/isspace) that","Fragments":["might"]},{"Key":"that might","Fragments":["broaden","be"]},{"Key":"might broaden","Fragments":["your"]},{"Key":"broaden your","Fragments":["knowledge"]},{"Key":"your knowledge","Fragments":["about"]},{"Key":"knowledge about","Fragments":["the"]},{"Key":"about the","Fragments":["isXYZ","2nd","STL","code,","`transform`","duplicates","`auto`","default","break","underscore","strings.","crash"]},{"Key":"the isXYZ","Fragments":["functions"]},{"Key":"isXYZ functions","Fragments":["in"]},{"Key":"functions in","Fragments":["`\u003ccctype\u003e`","[``\u003clocale\u003e``](http://en.cppreference.com/w/cpp/header/locale)","an","`hey`","```#\u003calgorithm\u003e```"]},{"Key":"in `\u003ccctype\u003e`","Fragments":["/"]},{"Key":"`\u003ccctype\u003e` /","Fragments":["`\u003clocale\u003e`."]},{"Key":"you're passing","Fragments":["strings","strings"]},{"Key":"passing strings","Fragments":["by","by","by","by"]},{"Key":"strings by","Fragments":["value","value","const","pointer","const"]},{"Key":"by value","Fragments":["in","/","-","as","and"]},{"Key":"value in","Fragments":["every","the"]},{"Key":"in every","Fragments":["case.","situation,"]},{"Key":"every case.","Fragments":["This"]},{"Key":"case. This","Fragments":["can"]},{"Key":"This can","Fragments":["lead","be"]},{"Key":"can lead","Fragments":["to"]},{"Key":"lead to","Fragments":["extra","a","problems"]},{"Key":"to extra","Fragments":["copies"]},{"Key":"extra copies","Fragments":["that"]},{"Key":"copies that","Fragments":["you"]},{"Key":"you really","Fragments":["don't"]},{"Key":"really don't","Fragments":["need."]},{"Key":"don't need.","Fragments":["When","So"]},{"Key":"need. When","Fragments":["you"]},{"Key":"When you","Fragments":["take","pass","say"]},{"Key":"you take","Fragments":["a"]},{"Key":"take a","Fragments":["non-trivial","look"]},{"Key":"a non-trivial","Fragments":["(pronounced:"]},{"Key":"non-trivial (pronounced:","Fragments":["anything"]},{"Key":"(pronounced: anything","Fragments":["potentially"]},{"Key":"anything potentially","Fragments":["larger"]},{"Key":"potentially larger","Fragments":["than"]},{"Key":"larger than","Fragments":["a","the"]},{"Key":"than a","Fragments":["few","named","simple","value","search"]},{"Key":"few machine","Fragments":["words)"]},{"Key":"machine words)","Fragments":["type"]},{"Key":"words) type","Fragments":["as"]},{"Key":"type as","Fragments":["a"]},{"Key":"a function","Fragments":["parameter","in","named","always","which","that","that","```std::is_permutation```","to","that"]},{"Key":"function parameter","Fragments":["and"]},{"Key":"parameter and","Fragments":["you"]},{"Key":"and you","Fragments":["don't","don't","don't","don't","import"]},{"Key":"you don't","Fragments":["intend","actually","need","have","need","get","detect","have","need","modify","need","mean","write","know"]},{"Key":"don't intend","Fragments":["to"]},{"Key":"intend to","Fragments":["modify"]},{"Key":"to modify","Fragments":["it,","a","the"]},{"Key":"modify it,","Fragments":["said"]},{"Key":"it, said","Fragments":["parameter"]},{"Key":"said parameter","Fragments":["should"]},{"Key":"parameter should","Fragments":["be"]},{"Key":"be passed","Fragments":["by","to"]},{"Key":"passed by","Fragments":["const","const"]},{"Key":"by const","Fragments":["reference.","reference","reference.","ref."]},{"Key":"const reference.","Fragments":["To","For"]},{"Key":"reference. To","Fragments":["be"]},{"Key":"To be","Fragments":["concrete,","a"]},{"Key":"be concrete,","Fragments":["you"]},{"Key":"concrete, you","Fragments":["should"]},{"Key":"should modify","Fragments":["your"]},{"Key":"modify your","Fragments":["prototypes"]},{"Key":"your prototypes","Fragments":["to:"]},{"Key":" bool","Fragments":["silence(string","isShout(string","is_silent(const","MapsEqual(const","isBlank(std::string"]},{"Key":"bool silence(string","Fragments":["const\u0026"]},{"Key":"silence(string const\u0026","Fragments":["s);"]},{"Key":"bool isShout(string","Fragments":["const\u0026"]},{"Key":"isShout(string const\u0026","Fragments":["s);"]},{"Key":" string","Fragments":["hey(string","sing(unsigned","in","word;","hey(string"]},{"Key":"string hey(string","Fragments":["const\u0026","words)"]},{"Key":"hey(string const\u0026","Fragments":["s);"]},{"Key":"This will","Fragments":["avoid","be"]},{"Key":"will avoid","Fragments":["making"]},{"Key":"avoid making","Fragments":["copies"]},{"Key":"making copies","Fragments":["of"]},{"Key":"copies of","Fragments":["the"]},{"Key":"the input","Fragments":["string","string","string","string","string","is","string","by","a","string.","string","string","is","string","multiple","words","pattern,","has","string,","string,","is","of","phrase"]},{"Key":"input string","Fragments":["each","more","ends","is","to","a","is","always","is"]},{"Key":"string each","Fragments":["time","time"]},{"Key":"each time","Fragments":["you","(O(n^2)).","to","they"]},{"Key":"time you","Fragments":["call","spend"]},{"Key":"you call","Fragments":["one"]},{"Key":"call one","Fragments":["of"]},{"Key":"one of","Fragments":["these","them","the","the","the","you","them","the"]},{"Key":"these functions.","Fragments":["If","It's"]},{"Key":"functions. If","Fragments":["this"]},{"Key":"If this","Fragments":["seems","passed"]},{"Key":"this seems","Fragments":["mysterious,"]},{"Key":"seems mysterious,","Fragments":["you"]},{"Key":"mysterious, you","Fragments":["can"]},{"Key":"can google","Fragments":["\"cpp"]},{"Key":"google \"cpp","Fragments":["faq"]},{"Key":"\"cpp faq","Fragments":["lite"]},{"Key":"faq lite","Fragments":["references\""]},{"Key":"lite references\"","Fragments":["to"]},{"Key":"references\" to","Fragments":["learn"]},{"Key":"to learn","Fragments":["more","C++","that."]},{"Key":"learn more","Fragments":["about"]},{"Key":"more about","Fragments":["pass"]},{"Key":"about pass","Fragments":["by"]},{"Key":"pass by","Fragments":["value","{reference,pointer}.","reference/copy"]},{"Key":"value /","Fragments":["pass"]},{"Key":"/ pass","Fragments":["by"]},{"Key":"like how","Fragments":["you","your","short","short","you","you"]},{"Key":"how you","Fragments":["make","could","create","made","attacked","could"]},{"Key":"you make","Fragments":["use"]},{"Key":"make use","Fragments":["of","of"]},{"Key":"use of","Fragments":["std::string","`std::regex`;","inner_product.","boost","boost","\"algorithm\"","its","boost::for_each.","C++'s","string::back(),","the","`int`","`using`","anonymous","string","static","string","`char*`","the","the","the"]},{"Key":"of std::string","Fragments":["and","is"]},{"Key":"std::string and","Fragments":["the"]},{"Key":"the brevity","Fragments":["of","of"]},{"Key":"brevity of","Fragments":["the","your"]},{"Key":"the approach","Fragments":["(less"]},{"Key":"approach (less","Fragments":["code"]},{"Key":"(less code","Fragments":["is"]},{"Key":"code is","Fragments":["better","clear","doing","very","very","a","difficult","because","less","very"]},{"Key":"is better","Fragments":["code!).","than","to","than","than","and","to"]},{"Key":"better code!).","Fragments":["I"]},{"Key":"code!). I","Fragments":["also"]},{"Key":"I also","Fragments":["like","considered","considered","don't","did","think","learned","think","streamlined"]},{"Key":"how your","Fragments":["solution"]},{"Key":"solution will","Fragments":["work"]},{"Key":"will work","Fragments":["even"]},{"Key":"work even","Fragments":["if"]},{"Key":"even if","Fragments":["there","it"]},{"Key":"is padding","Fragments":["before"]},{"Key":"padding before","Fragments":["or"]},{"Key":"before or","Fragments":["after"]},{"Key":"or after","Fragments":["the"]},{"Key":"string (even","Fragments":["though"]},{"Key":"(even though","Fragments":["this"]},{"Key":"though this","Fragments":["was","\"works.\""]},{"Key":"this was","Fragments":["not","going"]},{"Key":"was not","Fragments":["part","quite"]},{"Key":"not part","Fragments":["of","of"]},{"Key":"part of","Fragments":["the","the","a","a","the","the","my","the"]},{"Key":"the test","Fragments":["suite).","required","file","suite,","suite.","cases","cases","then","cases","suite","client\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e","cases","suite,","suite,"]},{"Key":" Some","Fragments":["comments:","of","notes:"]},{"Key":" 1)","Fragments":["You","You","You","You","If","You","Are","True,","Yea,","It","True,","You","`returnValue[wordBuffer]","You","You"]},{"Key":"1) You","Fragments":["don't","could","can","require","are","don't","have","construct"]},{"Key":"You don't","Fragments":["really","need","gain","have","need"]},{"Key":"don't really","Fragments":["gain","lose","know","understand","know","add"]},{"Key":"really gain","Fragments":["anything"]},{"Key":"gain anything","Fragments":["here","by"]},{"Key":"anything here","Fragments":["by"]},{"Key":"here by","Fragments":["making"]},{"Key":"by making","Fragments":["bob"]},{"Key":"making bob","Fragments":["a"]},{"Key":"bob a","Fragments":["class,"]},{"Key":"class, or","Fragments":["adding","if"]},{"Key":"or adding","Fragments":["a"]},{"Key":"a constructor/destructor","Fragments":["definition."]},{"Key":"constructor/destructor definition.","Fragments":["You"]},{"Key":"definition. You","Fragments":["could"]},{"Key":"have used","Fragments":["a","a","the","a","a","regex","a","\u003calgorithm\u003e","a"]},{"Key":"used a","Fragments":["namespace","namespace","namespace","switch","bunch","std::unordered_map","regex","regex","namespace","map","map","`map`","namespace","lambda"]},{"Key":"namespace or","Fragments":["removed","the"]},{"Key":"or removed","Fragments":["the"]},{"Key":"removed the","Fragments":["unreferenced","`strip_punctuation`"]},{"Key":"the unreferenced","Fragments":["functions."]},{"Key":" 2)","Fragments":["I","When","Afaik,","Depending","Why","You","I","True.","What","If","You","As","Instead","Regexs"]},{"Key":"2) I","Fragments":["bet","also"]},{"Key":"I bet","Fragments":["you"]},{"Key":"bet you","Fragments":["used"]},{"Key":"you used","Fragments":["iostream","a","the","these","the"]},{"Key":"used iostream","Fragments":["for"]},{"Key":"iostream for","Fragments":["debugging,"]},{"Key":"for debugging,","Fragments":["but"]},{"Key":"debugging, but","Fragments":["you"]},{"Key":"but you","Fragments":["don't","have","have"]},{"Key":"don't actually","Fragments":["use"]},{"Key":"actually use","Fragments":["it"]},{"Key":"the production","Fragments":["code"]},{"Key":"production code","Fragments":["-",":)"]},{"Key":"code -","Fragments":["you"]},{"Key":"- you","Fragments":["cold","can","can","should"]},{"Key":"you cold","Fragments":["remove"]},{"Key":"cold remove","Fragments":["the"]},{"Key":"remove the","Fragments":["header.","recursion","else","iostream-include","\u003ccstring\u003e","chance","`evaluate()`","\"inline\"","big"]},{"Key":" 3)","Fragments":["In","std::map","Instead","I"]},{"Key":"3) In","Fragments":["general"]},{"Key":"In general","Fragments":["there","you"]},{"Key":"general there","Fragments":["is"]},{"Key":"a lot","Fragments":["of","faster.","for","less","of","easier","I","of","of","simpler.","of","nicer.","simpler!","of","of","of","of"]},{"Key":"lot of","Fragments":["string","room","cases.","comparisons","reallocations","bool","things","setup","overhead"]},{"Key":"of string","Fragments":["copying","manipulation","constants","constants","to"]},{"Key":"string copying","Fragments":["that"]},{"Key":"copying that","Fragments":["could"]},{"Key":"that could","Fragments":["be","be","do","be","be","make"]},{"Key":"could be","Fragments":["a","done","clearly","written","simply","made","a","`string","a","categorized","wrong.","rewritten","faster.","made","optimized","replaced","that","better","replaced","simpler","cleaned","read","replaced","done","improved:","replaced","replaced","generated","easily","a","simplified","done","split","accomplished"]},{"Key":"a performance","Fragments":["concern","hit","analysis"]},{"Key":"performance concern","Fragments":["if"]},{"Key":"concern if","Fragments":["this"]},{"Key":"this were","Fragments":["in"]},{"Key":"were in","Fragments":["an"]},{"Key":"an inner","Fragments":["loop."]},{"Key":"inner loop.","Fragments":["For"]},{"Key":"loop. For","Fragments":["instance,"]},{"Key":"For instance,","Fragments":["the","acronyms"]},{"Key":"instance, the","Fragments":["spacesremoved.erase"]},{"Key":"the spacesremoved.erase","Fragments":["method"]},{"Key":"spacesremoved.erase method","Fragments":["will"]},{"Key":"method will","Fragments":["end"]},{"Key":"will end","Fragments":["up"]},{"Key":"end up","Fragments":["copying","predicting"]},{"Key":"up copying","Fragments":["the"]},{"Key":"copying the","Fragments":["buffer","strings.","elements","input","string","string","whole"]},{"Key":"the buffer","Fragments":["each"]},{"Key":"buffer each","Fragments":["time"]},{"Key":"time (O(n^2)).","Fragments":["An"]},{"Key":"(O(n^2)). An","Fragments":["alternative"]},{"Key":"An alternative","Fragments":["would"]},{"Key":"alternative would","Fragments":["be"]},{"Key":"be to","Fragments":["specify","use","include","sort","store","remove"]},{"Key":"to specify","Fragments":["the"]},{"Key":"specify the","Fragments":["start"]},{"Key":"the start","Fragments":["index","would","and","and","and"]},{"Key":"start index","Fragments":["to"]},{"Key":"index to","Fragments":["search"]},{"Key":"to search","Fragments":["in","for","for","for"]},{"Key":"search in","Fragments":["the"]},{"Key":"the string,","Fragments":["updating","cutting"]},{"Key":"string, updating","Fragments":["each"]},{"Key":"updating each","Fragments":["time."]},{"Key":" 4)","Fragments":["Also,","Instead"]},{"Key":"4) Also,","Fragments":["you"]},{"Key":"Also, you","Fragments":["are"]},{"Key":"you are","Fragments":["passing","certain","already","trying","passing","not","a","iterating","familiar","with"]},{"Key":"are passing","Fragments":["the","str"]},{"Key":"passing the","Fragments":["std::string"]},{"Key":"the std::string","Fragments":["argument"]},{"Key":"std::string argument","Fragments":["by","could"]},{"Key":"argument by","Fragments":["value"]},{"Key":"value -","Fragments":["passing","you"]},{"Key":"- passing","Fragments":["by"]},{"Key":"passing by","Fragments":["reference"]},{"Key":"by reference","Fragments":["would","(so,"]},{"Key":"reference would","Fragments":["avoid"]},{"Key":"would avoid","Fragments":["a"]},{"Key":"avoid a","Fragments":["temporary.","useless"]},{"Key":" 5)","Fragments":["You"]},{"Key":"5) You","Fragments":["could"]},{"Key":"could potentially","Fragments":["reduce","improve","cause","copy","copy","copy"]},{"Key":"potentially reduce","Fragments":["the"]},{"Key":"reduce the","Fragments":["amount","space","required","required"]},{"Key":"the amount","Fragments":["of","of","of","of","of","of","of"]},{"Key":"amount of","Fragments":["time","whitespace,","checks","characters","possible","possible","data","data","possible","possible","data"]},{"Key":"of time","Fragments":["you"]},{"Key":"you spend","Fragments":["passing"]},{"Key":"spend passing","Fragments":["through"]},{"Key":"passing through","Fragments":["the"]},{"Key":"through the","Fragments":["string","string","characters","characters","string","string","elements","std","process","entire","string","input"]},{"Key":"string by","Fragments":["separating"]},{"Key":"by separating","Fragments":["the"]},{"Key":"separating the","Fragments":["checks"]},{"Key":"the checks","Fragments":["for","within"]},{"Key":"checks for","Fragments":["hasAlpha","special","a"]},{"Key":"for hasAlpha","Fragments":["and"]},{"Key":"hasAlpha and","Fragments":["isYelling"]},{"Key":"and isYelling","Fragments":["into"]},{"Key":"isYelling into","Fragments":["separate"]},{"Key":"into separate","Fragments":["loops","functions","functions"]},{"Key":"separate loops","Fragments":["(ie"]},{"Key":"loops (ie","Fragments":["if"]},{"Key":"(ie if","Fragments":["you"]},{"Key":"you set","Fragments":["hasAlpha=true","that"]},{"Key":"set hasAlpha=true","Fragments":["you"]},{"Key":"hasAlpha=true you","Fragments":["never"]},{"Key":"you never","Fragments":["have","use"]},{"Key":"never have","Fragments":["to"]},{"Key":"to test","Fragments":["for","Bob's","for"]},{"Key":"test for","Fragments":["it","silence","shouting?","silence.","emptyness","empty"]},{"Key":"for it","Fragments":["again;"]},{"Key":"it again;","Fragments":["likewise"]},{"Key":"again; likewise","Fragments":["with"]},{"Key":"likewise with","Fragments":["isYelling.)"]},{"Key":" And","Fragments":["if","yeah,","moving","I"]},{"Key":"And if","Fragments":["hasAlpha=false,"]},{"Key":"if hasAlpha=false,","Fragments":["isYelling=false"]},{"Key":"hasAlpha=false, isYelling=false","Fragments":["and"]},{"Key":"isYelling=false and","Fragments":["you"]},{"Key":"don't need","Fragments":["a","the","distinct","to","an","the","the","the","the","to"]},{"Key":"need a","Fragments":["separate"]},{"Key":"a separate","Fragments":["check.","step?","function","function","method","function."]},{"Key":"I tend","Fragments":["to"]},{"Key":"tend to","Fragments":["prefer"]},{"Key":"to prefer","Fragments":["std::algorithms.","a"]},{"Key":"prefer std::algorithms.","Fragments":["Here"]},{"Key":"std::algorithms. Here","Fragments":["the"]},{"Key":"Here the","Fragments":["check"]},{"Key":"the check","Fragments":["for","```word","to","at"]},{"Key":"for yelling","Fragments":["could"]},{"Key":"yelling could","Fragments":["be"]},{"Key":"be done","Fragments":["without","without","more"]},{"Key":"done without","Fragments":["the","using"]},{"Key":"without the","Fragments":["std::any_of,","rvalue","redundancy.","need"]},{"Key":"the std::any_of,","Fragments":["but"]},{"Key":"std::any_of, but","Fragments":["it"]},{"Key":"but it","Fragments":["seems","modifies","seems","is","is","certainly","seems","works."]},{"Key":"it seems","Fragments":["more","I","to","pretty","like","to","to","to","like"]},{"Key":"seems more","Fragments":["logical","intuitive"]},{"Key":"more logical","Fragments":["to"]},{"Key":"logical to","Fragments":["me"]},{"Key":"to me","Fragments":["this","that","why","that","like","like","that","that","that","that"]},{"Key":"me this","Fragments":["way."]},{"Key":" Switched","Fragments":["from","to","to"]},{"Key":"Switched from","Fragments":["map"]},{"Key":"from map","Fragments":["to"]},{"Key":"map to","Fragments":["array","see"]},{"Key":"to array","Fragments":["for"]},{"Key":"array for","Fragments":["improved"]},{"Key":"for improved","Fragments":["access"]},{"Key":"improved access","Fragments":["time."]},{"Key":"might like","Fragments":["to"]},{"Key":"to look","Fragments":["at"]},{"Key":"look at","Fragments":["the","what","your","[`find_first_of`](http://www.cplusplus.com/reference/string/string/find_first_of/)?","its","the","the","it,"]},{"Key":"the character","Fragments":["classification","classification","is","classification"]},{"Key":"character classification","Fragments":["functions","functions","functions"]},{"Key":"classification functions","Fragments":["in","and","(isalnum","outside"]},{"Key":"in [``\u003clocale\u003e``](http://en.cppreference.com/w/cpp/header/locale)","Fragments":["or"]},{"Key":"[``\u003clocale\u003e``](http://en.cppreference.com/w/cpp/header/locale) or","Fragments":["at"]},{"Key":"or at","Fragments":["least","least"]},{"Key":" Can","Fragments":["you","make"]},{"Key":"you break","Fragments":["the"]},{"Key":"break the","Fragments":["problem"]},{"Key":"the problem","Fragments":["down","domain.","domain,","domain?","domain","domain","and","of","as","domain","statement,","isn't","of","is"]},{"Key":"problem down","Fragments":["into"]},{"Key":"down into","Fragments":["something"]},{"Key":"into something","Fragments":["that"]},{"Key":"something that","Fragments":["doesn't","took","is"]},{"Key":"that doesn't","Fragments":["need","require","have","seem"]},{"Key":"doesn't need","Fragments":["to","to","to","to","to"]},{"Key":"to (potentially)","Fragments":["scan"]},{"Key":"(potentially) scan","Fragments":["the"]},{"Key":"scan the","Fragments":["input"]},{"Key":"string more","Fragments":["than","times"]},{"Key":"more than","Fragments":["once?","a","for_each.","necessary.","once.","once"]},{"Key":" Using","Fragments":["a","`\u003calgorithm\u003e`"]},{"Key":"Using a","Fragments":["namespace"]},{"Key":"namespace is","Fragments":["much","considered","a"]},{"Key":"is much","Fragments":["cleaner","more","nicer","shorter"]},{"Key":"much cleaner","Fragments":["than","if"]},{"Key":"cleaner than","Fragments":["having"]},{"Key":"than having","Fragments":["a","to"]},{"Key":"having a","Fragments":["full","look","global","look"]},{"Key":"a full","Fragments":["blown"]},{"Key":"full blown","Fragments":["class."]},{"Key":"blown class.","Fragments":["Intermediate"]},{"Key":"class. Intermediate","Fragments":["categorization"]},{"Key":"Intermediate categorization","Fragments":["with"]},{"Key":"categorization with","Fragments":["enums"]},{"Key":"with enums","Fragments":["is"]},{"Key":"enums is","Fragments":["not"]},{"Key":" Testing","Fragments":["exercism!"]},{"Key":"Testing exercism!","Fragments":["It"]},{"Key":"exercism! It","Fragments":["is"]},{"Key":"It is","Fragments":["really","certainly","not","also","using","much","good"]},{"Key":"is really","Fragments":["nice.","difficult","efficient"]},{"Key":" Nice!","Fragments":["I","I"]},{"Key":"Nice! I","Fragments":["had","like"]},{"Key":"I had","Fragments":["a","to","to","to","to","much","to","to","to","some","to","to","to"]},{"Key":"had a","Fragments":["feeling","feeling","function","null"]},{"Key":"a feeling","Fragments":["boost","there","I"]},{"Key":"feeling boost","Fragments":["must"]},{"Key":"boost must","Fragments":["have"]},{"Key":"must have","Fragments":["had"]},{"Key":"have had","Fragments":["something"]},{"Key":"had something","Fragments":["to"]},{"Key":"something to","Fragments":["handle","\"figure"]},{"Key":"to handle","Fragments":["this"]},{"Key":"handle this","Fragments":["better."]},{"Key":"think it","Fragments":["could","makes","makes","cold","should","could","might","would","would","looks"]},{"Key":"it could","Fragments":["have","simply","be","be"]},{"Key":"have problem","Fragments":["if"]},{"Key":"problem if","Fragments":["a"]},{"Key":"if a","Fragments":["string","word","given","character","lower","string"]},{"Key":"string with","Fragments":["only","spaces"]},{"Key":"with only","Fragments":["white","numbers","one","one"]},{"Key":"only white","Fragments":["spaces"]},{"Key":"white spaces","Fragments":["is","and"]},{"Key":"spaces is","Fragments":["passed."]},{"Key":"is passed.","Fragments":["However,"]},{"Key":"passed. However,","Fragments":["I"]},{"Key":"However, I","Fragments":["don't","like","notice","think"]},{"Key":"don't want","Fragments":["to","to","anyone","to"]},{"Key":"to add","Fragments":["more","more","the","a"]},{"Key":"add more","Fragments":["checks","special"]},{"Key":"more checks","Fragments":["for"]},{"Key":"for special","Fragments":["situations,"]},{"Key":"special situations,","Fragments":["I'd"]},{"Key":"situations, I'd","Fragments":["just"]},{"Key":"I'd just","Fragments":["prefer"]},{"Key":"just prefer","Fragments":["something"]},{"Key":"prefer something","Fragments":["more"]},{"Key":"something more","Fragments":["robust."]},{"Key":"more robust.","Fragments":["Any"]},{"Key":"robust. Any","Fragments":["ideas?"]},{"Key":"I added","Fragments":["a","a","a"]},{"Key":"added a","Fragments":["commented-out","small","few","little"]},{"Key":"a commented-out","Fragments":["copy"]},{"Key":"commented-out copy","Fragments":["of"]},{"Key":"copy of","Fragments":["the","the"]},{"Key":"header for","Fragments":["reference.","the"]},{"Key":" `split_words`","Fragments":["is"]},{"Key":"`split_words` is","Fragments":["a"]},{"Key":"a little","Fragments":["simpler","cleaner,","more","bit","less","background","more","bit","simpler.","more"]},{"Key":"little simpler","Fragments":["now"]},{"Key":"simpler now","Fragments":["with"]},{"Key":"now with","Fragments":["`boost::tokenizer`.","100%"]},{"Key":"I notice","Fragments":["now","that","is"]},{"Key":"notice now","Fragments":["that"]},{"Key":"now that","Fragments":["I've","I"]},{"Key":"that I've","Fragments":["uploaded","missed"]},{"Key":"I've uploaded","Fragments":["this:"]},{"Key":"uploaded this:","Fragments":["I"]},{"Key":"this: I","Fragments":["used"]},{"Key":"I used","Fragments":["cout","to","char","a","the","static","the","``namespace``","in","a","a","a","a"]},{"Key":"used cout","Fragments":["when"]},{"Key":"cout when","Fragments":["working,"]},{"Key":"when working,","Fragments":["but"]},{"Key":"working, but","Fragments":["forgot"]},{"Key":"but forgot","Fragments":["to"]},{"Key":"forgot to","Fragments":["remove","remove","remove","include"]},{"Key":"to remove","Fragments":["```","trailing","the","the","the","your","the","it","those","all","the"]},{"Key":"remove ```","Fragments":["#include"]},{"Key":"``` #include","Fragments":["\u003ciostream\u003e"]},{"Key":"#include \u003ciostream\u003e","Fragments":["```"]},{"Key":"\u003ciostream\u003e ```","Fragments":["when"]},{"Key":"``` when","Fragments":["I"]},{"Key":"when I","Fragments":["was","tried","run","read","don't","say","was"]},{"Key":"I was","Fragments":["done.","going","expecting","able","using","initially","a","using","running","nitpicking","missing","doing","forced","forced","able","forced","forced","wondering","trying","using","getting","typing","getting"]},{"Key":"was done.","Fragments":["bob.h"]},{"Key":"done. bob.h","Fragments":["contains:```"]},{"Key":" namespace","Fragments":["bob{","{","bob","bob"]},{"Key":" std::string","Fragments":["hey(std::string","hey(const","hey(const","hey(std::string","s_func","s;","word","word;","word;","word("]},{"Key":"std::string hey(std::string","Fragments":["str_in);","const"]},{"Key":"I took","Fragments":["any1's"]},{"Key":"took any1's","Fragments":["advice"]},{"Key":"any1's advice","Fragments":["and"]},{"Key":"advice and","Fragments":["replaced"]},{"Key":"and replaced","Fragments":["the"]},{"Key":"replaced the","Fragments":["comments"]},{"Key":"the comments","Fragments":["with"]},{"Key":"comments with","Fragments":["sensibly-named"]},{"Key":"with sensibly-named","Fragments":["functions."]},{"Key":"sensibly-named functions.","Fragments":["I"]},{"Key":"functions. I","Fragments":["think"]},{"Key":"it makes","Fragments":["the","it","the","a","sense","the","the","a","it","it","an","the","sense."]},{"Key":"code look","Fragments":["more"]},{"Key":"look more","Fragments":["concise,"]},{"Key":"more concise,","Fragments":["and"]},{"Key":"concise, and","Fragments":["hopefully"]},{"Key":"and hopefully","Fragments":["prevents"]},{"Key":"hopefully prevents","Fragments":["the"]},{"Key":"prevents the","Fragments":["TL;DR"]},{"Key":"the TL;DR","Fragments":["effect"]},{"Key":"TL;DR effect","Fragments":[":)"]},{"Key":" Slightly","Fragments":["wordier"]},{"Key":"Slightly wordier","Fragments":["than"]},{"Key":"wordier than","Fragments":["my"]},{"Key":"than my","Fragments":["solutions","earlier"]},{"Key":"my solutions","Fragments":["in"]},{"Key":"solutions in","Fragments":["other","other"]},{"Key":"in other","Fragments":["languages","languages.","functions","places:"]},{"Key":"other languages","Fragments":[":-)."]},{"Key":" I'd","Fragments":["like","prefer","like","also","say"]},{"Key":"I'd like","Fragments":["to","to"]},{"Key":"to factor","Fragments":["out","each"]},{"Key":"factor out","Fragments":["the"]},{"Key":"out the","Fragments":["duplication","hard","whole","gcc's"]},{"Key":"the duplication","Fragments":["into"]},{"Key":"duplication into","Fragments":["some"]},{"Key":"into some","Fragments":["functional"]},{"Key":"some functional","Fragments":["style"]},{"Key":"functional style","Fragments":["\"any?\""]},{"Key":"style \"any?\"","Fragments":["or"]},{"Key":"\"any?\" or","Fragments":["\"every?\""]},{"Key":"or \"every?\"","Fragments":["functions,"]},{"Key":"\"every?\" functions,","Fragments":["but"]},{"Key":"functions, but","Fragments":["I'm"]},{"Key":"but I'm","Fragments":["a","not","just","not","uncertain"]},{"Key":"I'm a","Fragments":["way","pretty","bit"]},{"Key":"a way","Fragments":["away","to","that","that","of","to","of","that's"]},{"Key":"way away","Fragments":["from"]},{"Key":"away from","Fragments":["understanding","the","other"]},{"Key":"from understanding","Fragments":["how"]},{"Key":"understanding how","Fragments":["to"]},{"Key":"how to","Fragments":["do","run","restructure","restructure","use","use","use","use","do","do"]},{"Key":"do that","Fragments":["in","it"]},{"Key":"that in","Fragments":["C++"]},{"Key":"in C++","Fragments":["yet.","terms"]},{"Key":"Also, absolutely","Fragments":["NO"]},{"Key":"absolutely NO","Fragments":["idea"]},{"Key":"NO idea","Fragments":["what"]},{"Key":"idea what","Fragments":["good","this"]},{"Key":"what good","Fragments":["C++"]},{"Key":"good C++","Fragments":["style"]},{"Key":"C++ style","Fragments":["is..."]},{"Key":" I've","Fragments":["forgotten","tried","dabbled","tried","certainly"]},{"Key":"I've forgotten","Fragments":["a"]},{"Key":"forgotten a","Fragments":["good"]},{"Key":"good bit","Fragments":["of"]},{"Key":"bit of","Fragments":["C++","overhead","grepping.","efficiency","C.","overhead.","memory"]},{"Key":"of C++","Fragments":["i","'nice'"]},{"Key":"C++ i","Fragments":["used"]},{"Key":"i used","Fragments":["to"]},{"Key":"used to","Fragments":["know","write","check","find","writing"]},{"Key":"know so","Fragments":["getting"]},{"Key":"so getting","Fragments":["this"]},{"Key":"getting this","Fragments":["working"]},{"Key":"this working","Fragments":["took"]},{"Key":"working took","Fragments":["a"]},{"Key":"took a","Fragments":["few","string"]},{"Key":"I enjoyed","Fragments":["it"]},{"Key":"enjoyed it","Fragments":["and"]},{"Key":"it and","Fragments":["I","everything"]},{"Key":"and I","Fragments":["know","find","should","think","would","assumed","absolutely","forgot","didn't","don't","think","think","think","forgot","didn't"]},{"Key":"I know","Fragments":["there's","of","```std::find```"]},{"Key":"know there's","Fragments":["no"]},{"Key":"there's no","Fragments":["comments."]},{"Key":"no comments.","Fragments":["Second"]},{"Key":"comments. Second","Fragments":["Iteration"]},{"Key":"Second Iteration","Fragments":["will"]},{"Key":"Iteration will","Fragments":["have"]},{"Key":" Instead","Fragments":["of:","of"]},{"Key":" if","Fragments":["(s_trimmed.substr","(s.back()","(spaceless","(boost::erase_all(sth,","(is_silent(sth))","(it","(c","(capacity","(i","(not","(output_map.count(c)"]},{"Key":"if (s_trimmed.substr","Fragments":["(s_trimmed.size()-1,1)"]},{"Key":"(s_trimmed.substr (s_trimmed.size()-1,1)","Fragments":["=="]},{"Key":"(s_trimmed.size()-1,1) ==","Fragments":["\"?\")"]},{"Key":" you","Fragments":["can","should"]},{"Key":"can simply","Fragments":["write:","write"]},{"Key":"if (s.back()","Fragments":["=="]},{"Key":"(s.back() ==","Fragments":["\"?\")"]},{"Key":" Wasn't","Fragments":["sure"]},{"Key":"Wasn't sure","Fragments":["about"]},{"Key":"sure about","Fragments":["what","the","implementing"]},{"Key":"about what","Fragments":["to"]},{"Key":"what to","Fragments":["do","return"]},{"Key":"do with","Fragments":["sentences","just","an"]},{"Key":"with sentences","Fragments":["with"]},{"Key":"sentences with","Fragments":["only"]},{"Key":"only numbers","Fragments":["that","and","with"]},{"Key":"numbers that","Fragments":["terminates"]},{"Key":"that terminates","Fragments":["on"]},{"Key":"terminates on","Fragments":["an"]},{"Key":"on an","Fragments":["exclamation"]},{"Key":"an exclamation","Fragments":["point;","point.","mark","mark"]},{"Key":"exclamation point;","Fragments":["decided"]},{"Key":"point; decided","Fragments":["to"]},{"Key":"decided to","Fragments":["interpret","move","use","rewrite","check","remove"]},{"Key":"to interpret","Fragments":["as"]},{"Key":"interpret as","Fragments":["'talking"]},{"Key":"as 'talking","Fragments":["forcefully'"]},{"Key":"'talking forcefully'","Fragments":["(as"]},{"Key":"forcefully' (as","Fragments":["in"]},{"Key":"(as in","Fragments":["test"]},{"Key":"in test","Fragments":["case"]},{"Key":"test case","Fragments":["4).","and"]},{"Key":" Don't","Fragments":["call","know"]},{"Key":"Don't call","Fragments":["\"back()\""]},{"Key":"call \"back()\"","Fragments":["method"]},{"Key":"\"back()\" method","Fragments":["on"]},{"Key":"method on","Fragments":["a","this"]},{"Key":"on a","Fragments":["std::string","first","daily","random","unrelated","passwordlist","run"]},{"Key":"a std::string","Fragments":["unless"]},{"Key":"std::string unless","Fragments":["you"]},{"Key":"unless you","Fragments":["are"]},{"Key":"are certain","Fragments":["the"]},{"Key":"certain the","Fragments":["string"]},{"Key":"string is","Fragments":["not","empty","\"HE","empty","a","all","ALL","a","analyzed","analyzed","the","pretty"]},{"Key":" What's","Fragments":["the","the"]},{"Key":"What's the","Fragments":["benefit","purpose"]},{"Key":"the benefit","Fragments":["of","of","of","of"]},{"Key":"benefit of","Fragments":["passing","choosing","keyword","making"]},{"Key":"of passing","Fragments":["char"]},{"Key":"passing char","Fragments":["as"]},{"Key":"char as","Fragments":["const","an"]},{"Key":"as const","Fragments":["reference?","references","correctness","reference."]},{"Key":" Isn't","Fragments":["it"]},{"Key":"Isn't it","Fragments":["a"]},{"Key":"it a","Fragments":["bit","little","lot","const."]},{"Key":"a bit","Fragments":["of","more","of","unexpected","more","annoying","weird.","curious","simpler","heavy-handed","icky.","torn","heavy","and"]},{"Key":"of overhead","Fragments":["to","here,","if"]},{"Key":"overhead to","Fragments":["use"]},{"Key":"use regular","Fragments":["expressions"]},{"Key":"regular expressions","Fragments":["on","but","would","(regex)","improve"]},{"Key":"expressions on","Fragments":["this"]},{"Key":"on this","Fragments":["simple","that","one.","code.","crap?"]},{"Key":"this simple","Fragments":["example","it"]},{"Key":"simple example","Fragments":["?"]},{"Key":"should also","Fragments":["avoid","use"]},{"Key":"also avoid","Fragments":["having"]},{"Key":"avoid having","Fragments":["multiple","to"]},{"Key":"having multiple","Fragments":["exit"]},{"Key":"multiple exit","Fragments":["points"]},{"Key":"exit points","Fragments":["-"]},{"Key":"points -","Fragments":["for"]},{"Key":"- for","Fragments":["some"]},{"Key":"for some","Fragments":["standards","reason"]},{"Key":"some standards","Fragments":["it"]},{"Key":"standards it","Fragments":["is"]},{"Key":"not permitted","Fragments":["(like"]},{"Key":"permitted (like","Fragments":["MISRA)"]},{"Key":"need the","Fragments":["lambda",".h","intermediate","const","if","`is_numbers_only`","`i`","`break;`"]},{"Key":"the lambda","Fragments":["on"]},{"Key":"lambda on","Fragments":["line"]},{"Key":"on line","Fragments":["40,","25?","13.","13;","16-18,","28"]},{"Key":"line 40,","Fragments":["just"]},{"Key":"40, just","Fragments":["cast"]},{"Key":"just cast","Fragments":["to"]},{"Key":"cast to","Fragments":["the"]},{"Key":"the correct","Fragments":["overload","response","response"]},{"Key":"correct overload","Fragments":["of"]},{"Key":"overload of","Fragments":["to_rna."]},{"Key":" 1.","Fragments":["This","This","The","Make","to","The","The"]},{"Key":"1. This","Fragments":["is","seems"]},{"Key":"This is","Fragments":["my","what's","a","looking","looking","likely","likely","tested,","arguably","definitely","a","my","nice","a","sort","very"]},{"Key":"is my","Fragments":["first","implementation","first","very","bane"]},{"Key":"my first","Fragments":["stab","ever"]},{"Key":"first stab","Fragments":["at"]},{"Key":"stab at","Fragments":["using"]},{"Key":"at using","Fragments":["exercism,"]},{"Key":"using exercism,","Fragments":["probably"]},{"Key":"exercism, probably","Fragments":["doing"]},{"Key":"probably doing","Fragments":["this"]},{"Key":"doing this","Fragments":["completely","way"]},{"Key":"this completely","Fragments":["wrong."]},{"Key":"This seems","Fragments":["sort","like"]},{"Key":"seems sort","Fragments":["of","of"]},{"Key":"sort of","Fragments":["dumb.","had","wondering","stupid.","response","depends","what"]},{"Key":"of dumb.","Fragments":["I"]},{"Key":"dumb. I","Fragments":["seem"]},{"Key":"I seem","Fragments":["to"]},{"Key":"seem to","Fragments":["be","indicate","iterate","be"]},{"Key":"to be","Fragments":["able","part","available","able","public","very","the","a","easily","removed","white","a","the","passed","highly","free","succinct/clever.","made","squeezing","safer,","more","used","made,","ejected","considered","false","aware","enlarged","changed","changed","significantly","implemented","optimized","sure.","more","0","a","included","called","const:","a","so","using","performed,","the"]},{"Key":"be able","Fragments":["to","to","to","to"]},{"Key":"able to","Fragments":["submit","run","call","pass","see","achieve"]},{"Key":"to submit","Fragments":["either","the"]},{"Key":"submit either","Fragments":["the"]},{"Key":"either the","Fragments":["header"]},{"Key":"header or","Fragments":["the"]},{"Key":"or the","Fragments":["cpp,","static","new"]},{"Key":"the cpp,","Fragments":["but"]},{"Key":"cpp, but","Fragments":["not"]},{"Key":"not both?","Fragments":["So"]},{"Key":"both? So","Fragments":["I"]},{"Key":"So I","Fragments":["put","need","split","need","would"]},{"Key":"I put","Fragments":["everything","a","in","the"]},{"Key":"put everything","Fragments":["in"]},{"Key":"everything in","Fragments":["the","`hey`"]},{"Key":"the header,","Fragments":["but"]},{"Key":"header, but","Fragments":["that's"]},{"Key":"but that's","Fragments":["somewhat","less"]},{"Key":"that's somewhat","Fragments":["bad"]},{"Key":"somewhat bad","Fragments":["form."]},{"Key":"1. The","Fragments":["test","code","hey"]},{"Key":"The test","Fragments":["suite"]},{"Key":"test suite","Fragments":["demanded","you","required"]},{"Key":"suite demanded","Fragments":["a"]},{"Key":"demanded a","Fragments":["bob::"]},{"Key":"a bob::","Fragments":["qualifier;"]},{"Key":"bob:: qualifier;","Fragments":["could"]},{"Key":"qualifier; could","Fragments":["have"]},{"Key":"the static","Fragments":["class","class"]},{"Key":"static class","Fragments":["method","case,","method?"]},{"Key":"class method","Fragments":["approach;"]},{"Key":"method approach;","Fragments":["not"]},{"Key":"approach; not","Fragments":["sure"]},{"Key":"not sure","Fragments":["what's","if","why","if","it's","why","if","about","why","what","if","how","if","if"]},{"Key":"sure what's","Fragments":["intended/desired,"]},{"Key":"what's intended/desired,","Fragments":["so"]},{"Key":"intended/desired, so","Fragments":["went"]},{"Key":"so went","Fragments":["with"]},{"Key":"went with","Fragments":["the","regexes"]},{"Key":"class case,","Fragments":["I"]},{"Key":"case, I","Fragments":["guess.","want"]},{"Key":"* `bob::hey()`","Fragments":["avoids"]},{"Key":"`bob::hey()` avoids","Fragments":["multiple"]},{"Key":"avoids multiple","Fragments":["iterations"]},{"Key":"multiple iterations","Fragments":["over"]},{"Key":"iterations over","Fragments":["the"]},{"Key":"* Bob's","Fragments":["replies"]},{"Key":"Bob's replies","Fragments":["are"]},{"Key":"replies are","Fragments":["accessible"]},{"Key":"are accessible","Fragments":["as"]},{"Key":"accessible as","Fragments":["constants"]},{"Key":"as constants","Fragments":["to"]},{"Key":"constants to","Fragments":["make"]},{"Key":"to make","Fragments":["it","the","this","it","the","things","sure","a","it","sure","an","it","against","the","it","it","it","all","all","all","all","this","'hey'","the"]},{"Key":"make it","Fragments":["easy","a","clearer","more","reasonably","more","failed.","clear","easy","easer","look","shorter?"]},{"Key":"it easy","Fragments":["to","to","to"]},{"Key":"easy to","Fragments":["test","solve.","understand,","solve","scale","scale","scale","scale"]},{"Key":"test Bob's","Fragments":["response"]},{"Key":"Bob's response","Fragments":["(e.g.","from"]},{"Key":"response (e.g.","Fragments":["`if"]},{"Key":"(e.g. `if","Fragments":["(bob::hey(msg)"]},{"Key":"`if (bob::hey(msg)","Fragments":["=="]},{"Key":"(bob::hey(msg) ==","Fragments":["bob::REPLY_EMPTY)"]},{"Key":"== bob::REPLY_EMPTY)","Fragments":["{"]},{"Key":"bob::REPLY_EMPTY) {","Fragments":["}`)."]},{"Key":"{ }`).","Fragments":["If"]},{"Key":"}`). If","Fragments":["Bob"]},{"Key":"If Bob","Fragments":["changes"]},{"Key":"Bob changes","Fragments":["his"]},{"Key":"changes his","Fragments":["reply"]},{"Key":"his reply","Fragments":["string,"]},{"Key":"reply string,","Fragments":["the"]},{"Key":"string, the","Fragments":["code"]},{"Key":"code that","Fragments":["uses","all","would","will","use"]},{"Key":"that uses","Fragments":["these"]},{"Key":"uses these","Fragments":["constants"]},{"Key":"these constants","Fragments":["will","spill"]},{"Key":"constants will","Fragments":["still"]},{"Key":"will still","Fragments":["work."]},{"Key":"I considered","Fragments":["using"]},{"Key":"using regular","Fragments":["expressions","expressions"]},{"Key":"expressions but","Fragments":["they"]},{"Key":"but they","Fragments":["would","are"]},{"Key":"they would","Fragments":["not"]},{"Key":"would not","Fragments":["increase","pass","recommend","have","have","be"]},{"Key":"not increase","Fragments":["readability"]},{"Key":"increase readability","Fragments":["in"]},{"Key":"readability in","Fragments":["my"]},{"Key":"in my","Fragments":["opinion.","code","translation","opinion.","own","opinion","former","code.","opinion","environment","second","program.","oppion."]},{"Key":"also considered","Fragments":["just","someone"]},{"Key":"considered just","Fragments":["iterating"]},{"Key":"just iterating","Fragments":["over"]},{"Key":"string once","Fragments":["and"]},{"Key":"once and","Fragments":["checking"]},{"Key":"and checking","Fragments":["all","for"]},{"Key":"checking all","Fragments":["of"]},{"Key":"all of","Fragments":["the","your","the","them"]},{"Key":"the conditions","Fragments":["at","for","for"]},{"Key":"conditions at","Fragments":["once."]},{"Key":"at once.","Fragments":["But","However,"]},{"Key":"once. But","Fragments":["I"]},{"Key":"don't feel","Fragments":["like","like"]},{"Key":"feel like","Fragments":["the","it's","using"]},{"Key":"like the","Fragments":["strings","algorithm","perfect","way","boost","breakdown","for","brevity","fact","way","solution","boost","flow","use","overall","overall","efficiency","recursive","idea","use","design","lack","way","idea","explicit","new","insertion/increment"]},{"Key":"the strings","Fragments":["expected","and","associated","directly.","get","by","and","as","is","weren't","length"]},{"Key":"strings expected","Fragments":["here"]},{"Key":"expected here","Fragments":["are"]},{"Key":"here are","Fragments":["long","a"]},{"Key":"are long","Fragments":["enough"]},{"Key":"long enough","Fragments":["to"]},{"Key":"enough to","Fragments":["consider","bother","hold","be","do"]},{"Key":"to consider","Fragments":["this","that"]},{"Key":"consider this","Fragments":["micro-optimization."]},{"Key":"should consider","Fragments":["using"]},{"Key":"consider using","Fragments":["`isalpha()`"]},{"Key":"using `isalpha()`","Fragments":["instead"]},{"Key":"`isalpha()` instead","Fragments":["of"]},{"Key":"of manually","Fragments":["checking"]},{"Key":"manually checking","Fragments":["ascii"]},{"Key":"checking ascii","Fragments":["ranges"]},{"Key":"ascii ranges","Fragments":["since"]},{"Key":"ranges since","Fragments":["you"]},{"Key":"since you","Fragments":["are","can","have","don't","can"]},{"Key":"are already","Fragments":["using"]},{"Key":"already using","Fragments":["`toupper()`"]},{"Key":"using `toupper()`","Fragments":["from"]},{"Key":"`toupper()` from","Fragments":["the"]},{"Key":"from the","Fragments":["same","test","C","very","sieve","vector","ends","ends","specification","decisions","isspace","helper","bob::hey","requirement","`hey`","original","person","outside","heap","overhead"]},{"Key":" In","Fragments":["retrospect,","C++11","fact,","the","my","any","hey,","general","L13","the","fact,"]},{"Key":"In retrospect,","Fragments":["maybe"]},{"Key":"retrospect, maybe","Fragments":["I"]},{"Key":"maybe I","Fragments":["should"]},{"Key":"I should","Fragments":["check","first","use","have","assume"]},{"Key":"should check","Fragments":["the","for","if","if"]},{"Key":"check the","Fragments":["question","case","map"]},{"Key":"the question","Fragments":["first","mark.","mark","test","test","twice"]},{"Key":"question first","Fragments":["since"]},{"Key":"first since","Fragments":["its"]},{"Key":"since its","Fragments":["a"]},{"Key":"its a","Fragments":["lot"]},{"Key":"The header","Fragments":["file"]},{"Key":"file is","Fragments":["located"]},{"Key":"is located","Fragments":["in"]},{"Key":"located in","Fragments":["iteration"]},{"Key":"in iteration","Fragments":["2."]},{"Key":"I thought","Fragments":["of","using","it","if","of","that","this"]},{"Key":"thought of","Fragments":["this","using","making","it"]},{"Key":"of this","Fragments":["problem","exercise","algorithm"]},{"Key":"this problem","Fragments":["as","a"]},{"Key":"problem as","Fragments":["a","follows:"]},{"Key":"a series","Fragments":["of"]},{"Key":"series of","Fragments":["4","functions"]},{"Key":"of 4","Fragments":["cases"]},{"Key":"4 cases","Fragments":["(silence,"]},{"Key":"cases (silence,","Fragments":["questions,"]},{"Key":"(silence, questions,","Fragments":["yelling,"]},{"Key":"questions, yelling,","Fragments":["and"]},{"Key":"yelling, and","Fragments":["everything","ends"]},{"Key":"and everything","Fragments":["else)","would"]},{"Key":"everything else)","Fragments":["that"]},{"Key":"else) that","Fragments":["could"]},{"Key":"be clearly","Fragments":["defined"]},{"Key":"clearly defined","Fragments":["with"]},{"Key":"defined with","Fragments":["if"]},{"Key":"with if","Fragments":["statements."]},{"Key":"if statements.","Fragments":["Silence","Is"]},{"Key":"statements. Silence","Fragments":["is"]},{"Key":"Silence is","Fragments":["defined"]},{"Key":"is defined","Fragments":["in","as","as","as"]},{"Key":"my code","Fragments":["as","nicer.","that","and","around","is","more"]},{"Key":"code as","Fragments":["either","clean","my"]},{"Key":"as either","Fragments":["an"]},{"Key":"either an","Fragments":["empty"]},{"Key":"empty string","Fragments":["or","and","`\"\"`"]},{"Key":"string or","Fragments":["a"]},{"Key":"or a","Fragments":["string","some","question?","for","grep","functional","number","number"]},{"Key":"string containing","Fragments":["only","capital","no"]},{"Key":"containing only","Fragments":["whitespace."]},{"Key":"only whitespace.","Fragments":["Questions"]},{"Key":"whitespace. Questions","Fragments":["are"]},{"Key":"Questions are","Fragments":["defined"]},{"Key":"are defined","Fragments":["as"]},{"Key":"defined as","Fragments":["any","yelling,","either:","any","size_t,"]},{"Key":"as any","Fragments":["string","string"]},{"Key":"any string","Fragments":["that","which"]},{"Key":"string that","Fragments":["is","I'm"]},{"Key":"that is","Fragments":["not","1-to-1","talking","as","why","returned","not","a","definitive","all","demanded.","used","how","how","how","how","the"]},{"Key":"not defined","Fragments":["as"]},{"Key":"as yelling,","Fragments":["and"]},{"Key":"and ends","Fragments":["with"]},{"Key":"ends with","Fragments":["a","non-alphanum","a","a"]},{"Key":"a question","Fragments":["mark.","with","instead.","because","mark","mark,","mark","mark","mark.","mark","as"]},{"Key":"question mark.","Fragments":["Yelling","Normal"]},{"Key":"mark. Yelling","Fragments":["is"]},{"Key":"Yelling is","Fragments":["defined"]},{"Key":"as either:","Fragments":["a)"]},{"Key":"either: a)","Fragments":["a"]},{"Key":"a) a","Fragments":["string"]},{"Key":"containing capital","Fragments":["letters"]},{"Key":"capital letters","Fragments":["but"]},{"Key":"letters but","Fragments":["no"]},{"Key":"but no","Fragments":["lower-case"]},{"Key":"no lower-case","Fragments":["letters,","letters."]},{"Key":"lower-case letters,","Fragments":["or"]},{"Key":"letters, or","Fragments":["b)"]},{"Key":"or b)","Fragments":["a"]},{"Key":"b) a","Fragments":["string"]},{"Key":"containing no","Fragments":["letters"]},{"Key":"no letters","Fragments":["and","to"]},{"Key":"letters and","Fragments":["ending","uppercase","upper"]},{"Key":"and ending","Fragments":["in","in"]},{"Key":"ending in","Fragments":["an","an"]},{"Key":"exclamation point.","Fragments":["The"]},{"Key":"point. The","Fragments":["'everything"]},{"Key":"The 'everything","Fragments":["else'"]},{"Key":"'everything else'","Fragments":["case"]},{"Key":"else' case","Fragments":["is"]},{"Key":"case is","Fragments":["defined"]},{"Key":"string which","Fragments":["does"]},{"Key":"which does","Fragments":["not"]},{"Key":"does not","Fragments":["fit","present","free","convert","use","need","need","match","have"]},{"Key":"not fit","Fragments":["the"]},{"Key":"fit the","Fragments":["previous","to"]},{"Key":"the previous","Fragments":["three","attempt.","classifications."]},{"Key":"previous three","Fragments":["definitions."]},{"Key":"I pared","Fragments":["down"]},{"Key":"pared down","Fragments":["the"]},{"Key":"down the","Fragments":["if"]},{"Key":"the if","Fragments":["statements","statement"]},{"Key":"if statements","Fragments":["to"]},{"Key":"statements to","Fragments":["just"]},{"Key":"to just","Fragments":["the","assume"]},{"Key":"just the","Fragments":["necessary"]},{"Key":"the necessary","Fragments":["ones,","information"]},{"Key":"necessary ones,","Fragments":["and"]},{"Key":"ones, and","Fragments":["added"]},{"Key":"and added","Fragments":["comments"]},{"Key":"added comments","Fragments":["to"]},{"Key":"comments to","Fragments":["make"]},{"Key":"could probably","Fragments":["have","rewrite","drop","use"]},{"Key":"probably have","Fragments":["used"]},{"Key":"used the","Fragments":["[`trim()`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html)","boost","cstring","command","same","char*"]},{"Key":"the [`trim()`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html)","Fragments":["algorithm"]},{"Key":"[`trim()`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html) algorithm","Fragments":["from"]},{"Key":"algorithm from","Fragments":["boost,"]},{"Key":"from boost,","Fragments":["but"]},{"Key":"boost, but","Fragments":["it"]},{"Key":"it modifies","Fragments":["the"]},{"Key":"modifies the","Fragments":["argument","strings"]},{"Key":"the argument","Fragments":["in-place,","of","of","to"]},{"Key":"argument in-place,","Fragments":["so"]},{"Key":"in-place, so","Fragments":["I'd"]},{"Key":"so I'd","Fragments":["still"]},{"Key":"I'd still","Fragments":["have"]},{"Key":"still have","Fragments":["to"]},{"Key":"to write","Fragments":["something","loops","a","an",":)","a","a","and","and"]},{"Key":"write something","Fragments":["that"]},{"Key":"that took","Fragments":["a"]},{"Key":"string and","Fragments":["returned","we","to","just","just","assign","then"]},{"Key":"and returned","Fragments":["a"]},{"Key":"returned a","Fragments":["string"]},{"Key":"as I've","Fragments":["written"]},{"Key":"I've written","Fragments":["it."]},{"Key":"written it.","Fragments":["I"]},{"Key":"it. I","Fragments":["suppose","get"]},{"Key":"I suppose","Fragments":["it","these"]},{"Key":"suppose it","Fragments":["would"]},{"Key":"would make","Fragments":["it","the","the","the","the","the","everything","your"]},{"Key":"little cleaner,","Fragments":["but"]},{"Key":"cleaner, but","Fragments":["not"]},{"Key":"was going","Fragments":["to","to"]},{"Key":"going to","Fragments":["have","be","leave","modify","say","be,","fix","call","make","be","re-write","be"]},{"Key":"to have","Fragments":["a","them","a","a","a","the","{0,","it","always","word_hash,","different"]},{"Key":"a normal","Fragments":["class,","for-loop"]},{"Key":"normal class,","Fragments":["but"]},{"Key":"class, but","Fragments":["then"]},{"Key":"but then","Fragments":["I"]},{"Key":"then I","Fragments":["had","suggest","could","could","could","poked"]},{"Key":"had to","Fragments":["switch","wrap","really","really","add","use","declare","manually","put","put"]},{"Key":"to switch","Fragments":["to"]},{"Key":"switch to","Fragments":["a"]},{"Key":"a static","Fragments":["implementation,","function","class","method","method","public","method","method","string","member","member"]},{"Key":"static implementation,","Fragments":["since"]},{"Key":"implementation, since","Fragments":["the"]},{"Key":"since the","Fragments":["test","file","problem","conditions"]},{"Key":"test required","Fragments":["that"]},{"Key":"required that","Fragments":["kind"]},{"Key":"that kind","Fragments":["of","of"]},{"Key":"have no","Fragments":["idea","idea","letters"]},{"Key":"no idea","Fragments":["how","what"]},{"Key":"idea how","Fragments":["to"]},{"Key":"to run","Fragments":["the","cmake","a","as"]},{"Key":"run the","Fragments":["test","string"]},{"Key":"test file","Fragments":["to"]},{"Key":"file to","Fragments":["even"]},{"Key":"to even","Fragments":["get"]},{"Key":"even get","Fragments":["started."]},{"Key":"get started.","Fragments":["When"]},{"Key":"started. When","Fragments":["I"]},{"Key":"When I","Fragments":["run","went","run"]},{"Key":"I run","Fragments":["\"g++","\"make\"","the"]},{"Key":"run \"g++","Fragments":["bob_test.cpp\","]},{"Key":"\"g++ bob_test.cpp\",","Fragments":["it"]},{"Key":"bob_test.cpp\", it","Fragments":["says"]},{"Key":"it says","Fragments":["I","that"]},{"Key":"says I","Fragments":["need"]},{"Key":"the .h","Fragments":["header","part","file"]},{"Key":".h header","Fragments":["file."]},{"Key":"You first","Fragments":["need"]},{"Key":"first need","Fragments":["to"]},{"Key":"to create","Fragments":["a","a","temporaries","unique","initial"]},{"Key":"create a","Fragments":["file","namespace,","function"]},{"Key":"a file","Fragments":["bob.h,"]},{"Key":"file bob.h,","Fragments":["then"]},{"Key":"bob.h, then","Fragments":["you"]},{"Key":"then you","Fragments":["should","shouldn't"]},{"Key":" I'm","Fragments":["trying","rather","STUCKED!","kind","not","only","working","not","not","a","not","sorry","submitting"]},{"Key":"I'm trying","Fragments":["to","to"]},{"Key":"trying to","Fragments":["incorporate","do","be","optimize","think","reacquaint","check","avoid","get","pass"]},{"Key":"to incorporate","Fragments":["the"]},{"Key":"incorporate the","Fragments":["algorithm"]},{"Key":"the algorithm","Fragments":["and","+","is","is","and"]},{"Key":"algorithm and","Fragments":["functional","avoid","std::string"]},{"Key":"and functional","Fragments":["libraries"]},{"Key":"functional libraries","Fragments":["into"]},{"Key":"libraries into","Fragments":["my"]},{"Key":"into my","Fragments":["coding","translation"]},{"Key":"my coding","Fragments":["practices."]},{"Key":"coding practices.","Fragments":["I"]},{"Key":"practices. I","Fragments":["used"]},{"Key":"write loops","Fragments":["by"]},{"Key":"loops by","Fragments":["hand"]},{"Key":"by hand","Fragments":["for"]},{"Key":"hand for","Fragments":["pretty"]},{"Key":"for pretty","Fragments":["much"]},{"Key":"pretty much","Fragments":["everything.","turned","guarenteed","everywhere"]},{"Key":"I benchmarked","Fragments":["a"]},{"Key":"benchmarked a","Fragments":["few"]},{"Key":"few of","Fragments":["my"]},{"Key":"of my","Fragments":["iterations","functions","project,"]},{"Key":"my iterations","Fragments":["to"]},{"Key":"iterations to","Fragments":["find"]},{"Key":"to find","Fragments":["a","out","this","the","a","and","a","an","a"]},{"Key":"find a","Fragments":["good","layout","declaration","C++","more"]},{"Key":"good tradeoff","Fragments":["between"]},{"Key":"tradeoff between","Fragments":["speed"]},{"Key":"between speed","Fragments":["and"]},{"Key":"speed and","Fragments":["readability."]},{"Key":"and readability.","Fragments":["This"]},{"Key":"readability. This","Fragments":["is"]},{"Key":"is what's","Fragments":["come"]},{"Key":"what's come","Fragments":["of"]},{"Key":"come of","Fragments":["it."]},{"Key":"of it.","Fragments":["I","A"]},{"Key":"I get","Fragments":["squeeze"]},{"Key":"get squeeze","Fragments":["a"]},{"Key":"squeeze a","Fragments":["bit"]},{"Key":"bit more","Fragments":["performance","flexible"]},{"Key":"more performance","Fragments":["out"]},{"Key":"performance out","Fragments":["of"]},{"Key":"the isYell()","Fragments":["function"]},{"Key":"isYell() function","Fragments":["if"]},{"Key":"function if","Fragments":["I"]},{"Key":"if I","Fragments":["use","missed","missed"]},{"Key":"I use","Fragments":["a","`else`","an","prefix-increments","the"]},{"Key":"use a","Fragments":["handwritten","range-based","library","class,","better","for-element","tokenizer","for-element","C++11","return","switch"]},{"Key":"a handwritten","Fragments":["loop,"]},{"Key":"handwritten loop,","Fragments":["but"]},{"Key":"loop, but","Fragments":["this"]},{"Key":"but this","Fragments":["version","way","is","became","is","seemed"]},{"Key":"version here","Fragments":["looks"]},{"Key":"here looks","Fragments":["much"]},{"Key":"looks much","Fragments":["cleaner."]},{"Key":" (I","Fragments":["just","pushed"]},{"Key":"(I just","Fragments":["noticed"]},{"Key":"just noticed","Fragments":["that","a"]},{"Key":"noticed that","Fragments":["I've"]},{"Key":"I've missed","Fragments":["the"]},{"Key":"missed the","Fragments":["header"]},{"Key":"header guards.","Fragments":["Just"]},{"Key":"guards. Just","Fragments":["act"]},{"Key":"Just act","Fragments":["as"]},{"Key":"act as","Fragments":["if"]},{"Key":"as if","Fragments":["they","he"]},{"Key":"if they","Fragments":["were","equaled","need","were","need"]},{"Key":"they were","Fragments":["there","equal."]},{"Key":"were there","Fragments":["\\^.\\^)"]},{"Key":"I broke","Fragments":["this","up"]},{"Key":"broke this","Fragments":["down"]},{"Key":"this down","Fragments":["procedurally"]},{"Key":"down procedurally","Fragments":["and"]},{"Key":"procedurally and","Fragments":["introduced","completely"]},{"Key":"and introduced","Fragments":["some"]},{"Key":"introduced some","Fragments":["intention-revealing"]},{"Key":"some intention-revealing","Fragments":["functions."]},{"Key":"intention-revealing functions.","Fragments":["I'm"]},{"Key":"functions. I'm","Fragments":["not"]},{"Key":"I'm not","Fragments":["sure","modifying","getting","so","using","really","sure","a","sure","sure","familiar","sure","sure","really","sure","sure","sure","sure","too","sure"]},{"Key":"sure if","Fragments":["it","this","there","`static`","there's","the","it"]},{"Key":"be simpler","Fragments":["if","if"]},{"Key":"simpler if","Fragments":["approached","your"]},{"Key":"if approached","Fragments":["as"]},{"Key":"approached as","Fragments":["a"]},{"Key":"a collection","Fragments":["of"]},{"Key":"collection of","Fragments":["objects."]},{"Key":"Switched to","Fragments":["using","using"]},{"Key":"to using","Fragments":["`boost::algorithm::split`","`trim_copy`","a"]},{"Key":"using `boost::algorithm::split`","Fragments":["to"]},{"Key":"`boost::algorithm::split` to","Fragments":["split"]},{"Key":"to split","Fragments":["words."]},{"Key":"split words.","Fragments":["Feels"]},{"Key":"words. Feels","Fragments":["better."]},{"Key":"I see","Fragments":["that","a","two","I","there"]},{"Key":"see that","Fragments":["you","`spaceless`","you"]},{"Key":"you included","Fragments":["your","the"]},{"Key":"included your","Fragments":["header"]},{"Key":"your header","Fragments":["as","file?"]},{"Key":"header as","Fragments":["a"]},{"Key":"a comment","Fragments":["at"]},{"Key":"comment at","Fragments":["the"]},{"Key":"the top","Fragments":["of","of"]},{"Key":"top of","Fragments":["the","the"]},{"Key":"the cpp.","Fragments":["This"]},{"Key":"cpp. This","Fragments":["is"]},{"Key":"a nice","Fragments":["reference","way"]},{"Key":"nice reference","Fragments":["for"]},{"Key":"reference for","Fragments":["reading"]},{"Key":"for reading","Fragments":["the"]},{"Key":"reading the","Fragments":["`cpp`","public"]},{"Key":"the `cpp`","Fragments":["code."]},{"Key":"`cpp` code.","Fragments":["We're"]},{"Key":"code. We're","Fragments":["working"]},{"Key":"We're working","Fragments":["on"]},{"Key":"working on","Fragments":["allowing"]},{"Key":"on allowing","Fragments":["[multiple"]},{"Key":"allowing [multiple","Fragments":["file"]},{"Key":"[multiple file","Fragments":["submission](https://github.com/exercism/exercism.io/issues/1165)"]},{"Key":"file submission](https://github.com/exercism/exercism.io/issues/1165)","Fragments":["to"]},{"Key":"submission](https://github.com/exercism/exercism.io/issues/1165) to","Fragments":["make"]},{"Key":"make this","Fragments":["easier","clear","faster,","code"]},{"Key":"this easier","Fragments":["going"]},{"Key":"easier going","Fragments":["forward."]},{"Key":" As","Fragments":["you","to","I","for","for","for"]},{"Key":"As you","Fragments":["noticed","might"]},{"Key":"you noticed","Fragments":["from","how","how"]},{"Key":"noticed from","Fragments":["the"]},{"Key":"test suite,","Fragments":["`hey`","but","if"]},{"Key":"suite, `hey`","Fragments":["is"]},{"Key":"`hey` is","Fragments":["a","operating","filled","called."]},{"Key":"a scoped","Fragments":["function."]},{"Key":"scoped function.","Fragments":["`bob::hey`"]},{"Key":"function. `bob::hey`","Fragments":["can"]},{"Key":"`bob::hey` can","Fragments":["either"]},{"Key":"can either","Fragments":["refer"]},{"Key":"either refer","Fragments":["to"]},{"Key":"refer to","Fragments":["a","a"]},{"Key":"static function","Fragments":["declared","inside"]},{"Key":"function declared","Fragments":["in"]},{"Key":"declared in","Fragments":["class"]},{"Key":"in class","Fragments":["`bob`,"]},{"Key":"class `bob`,","Fragments":["or","since"]},{"Key":"`bob`, or","Fragments":["it"]},{"Key":"or it","Fragments":["can"]},{"Key":"it can","Fragments":["refer"]},{"Key":"can refer","Fragments":["to"]},{"Key":"function in","Fragments":["namespace","a"]},{"Key":"in namespace","Fragments":["`bob`.","`bob`","bob,","anagram"]},{"Key":"namespace `bob`.","Fragments":["Do"]},{"Key":"`bob`. Do","Fragments":["you"]},{"Key":"you think","Fragments":["your","of","of","your","of","of","of","of","of","`d.isEmpty()`","about","about"]},{"Key":"think your","Fragments":["code","code","code","implementation"]},{"Key":"your code","Fragments":["would","would","a","doesn't","is.","while","and","because"]},{"Key":"code would","Fragments":["be","be","not","always","be"]},{"Key":"be clearer","Fragments":["if","in"]},{"Key":"clearer if","Fragments":["you"]},{"Key":"namespace instead","Fragments":["of","of","(beware"]},{"Key":"of a","Fragments":["static","way","method","better","for","way","class.","class","performance","class,","\"bob\"","namespace?","namespace?","way","difference.","larger","good","class?","class","mash","single","class","class)","`using","lot","tiny","function.","static","lambda"]},{"Key":"really like","Fragments":["your","the","that","it.","the","the"]},{"Key":"like your","Fragments":["intention","use","intention-revealing","use","use","use","solution"]},{"Key":"your intention","Fragments":["revealing"]},{"Key":"intention revealing","Fragments":["methods","functions"]},{"Key":"revealing methods","Fragments":["`is_question`,"]},{"Key":"methods `is_question`,","Fragments":["`is_shouting`,"]},{"Key":"`is_question`, `is_shouting`,","Fragments":["and"]},{"Key":"`is_shouting`, and","Fragments":["`is_silence`."]},{"Key":"and `is_silence`.","Fragments":["You"]},{"Key":"`is_silence`. You","Fragments":["have"]},{"Key":"You have","Fragments":["them","`if(question[question.size()-1]"]},{"Key":"have them","Fragments":["declared","available","inside"]},{"Key":"them declared","Fragments":["as"]},{"Key":"declared as","Fragments":["private","an"]},{"Key":"as private","Fragments":["methods"]},{"Key":"private methods","Fragments":["on","of"]},{"Key":"methods on","Fragments":["`bob`,","`std::string`"]},{"Key":"on `bob`,","Fragments":["but"]},{"Key":"`bob`, but","Fragments":["they"]},{"Key":"they are","Fragments":["completely","used.","used,","nice","simple","in","purely","syntactically"]},{"Key":"are completely","Fragments":["internal"]},{"Key":"completely internal","Fragments":["to"]},{"Key":"internal to","Fragments":["the"]},{"Key":"the implementation","Fragments":["of","without","and","rather","in","details","details","since"]},{"Key":"implementation of","Fragments":["`hey`.","getLowerCase","the","std::allocator"]},{"Key":"of `hey`.","Fragments":["Can"]},{"Key":"`hey`. Can","Fragments":["you"]},{"Key":"think of","Fragments":["a","a","how","how","a","how","how","a","anything","a","a","one","doing","it,","ways"]},{"Key":"way to","Fragments":["have","iterate","increase","deal","check","control","stop","use","tackle","go","do","strip","organize","speed","go","do","solve","check","go","do","determine"]},{"Key":"them available","Fragments":["to","in"]},{"Key":"available to","Fragments":["your","std::string,"]},{"Key":"to your","Fragments":["implementation,","file\u003e_INCLUDED."]},{"Key":"your implementation,","Fragments":["but"]},{"Key":"implementation, but","Fragments":["completely"]},{"Key":"but completely","Fragments":["omit"]},{"Key":"completely omit","Fragments":["mentioning"]},{"Key":"omit mentioning","Fragments":["them"]},{"Key":"mentioning them","Fragments":["in"]},{"Key":"them in","Fragments":["the","some","another","the"]},{"Key":"the header?","Fragments":["This"]},{"Key":"header? This","Fragments":["way"]},{"Key":"This way","Fragments":["you","you"]},{"Key":"way you","Fragments":["can","can","converted","don't","keep","avoid","process","incremented"]},{"Key":"can modify","Fragments":["their"]},{"Key":"modify their","Fragments":["signatures"]},{"Key":"their signatures","Fragments":["or"]},{"Key":"signatures or","Fragments":["names"]},{"Key":"or names","Fragments":["in"]},{"Key":"names in","Fragments":["the"]},{"Key":"implementation without","Fragments":["forcing"]},{"Key":"without forcing","Fragments":["any"]},{"Key":"forcing any","Fragments":["recompilation"]},{"Key":"any recompilation","Fragments":["of"]},{"Key":"recompilation of","Fragments":["clients"]},{"Key":"of clients","Fragments":["of"]},{"Key":"clients of","Fragments":["the","`bob.h`"]},{"Key":" `std::string`","Fragments":["shares","has"]},{"Key":"`std::string` shares","Fragments":["many"]},{"Key":"shares many","Fragments":["of"]},{"Key":"many of","Fragments":["the"]},{"Key":"same methods","Fragments":["as"]},{"Key":"methods as","Fragments":["most","static."]},{"Key":"as most","Fragments":["container"]},{"Key":"most container","Fragments":["classes"]},{"Key":"container classes","Fragments":["in"]},{"Key":"classes in","Fragments":["the"]},{"Key":"the standard","Fragments":["library.","library"]},{"Key":"standard library.","Fragments":["Can"]},{"Key":"library. Can","Fragments":["you"]},{"Key":"a method","Fragments":["that"]},{"Key":"method that","Fragments":["returns"]},{"Key":"that returns","Fragments":["the","false","the"]},{"Key":"returns the","Fragments":["last","shorter","result","result","result","boolean","boolean"]},{"Key":"last character","Fragments":["on","in","of"]},{"Key":"character on","Fragments":["the"]},{"Key":"on the","Fragments":["string","free","right","trailing","compiler","subject.","next","command","other","classes.","set","same","first","first","exercise","subject","(few)"]},{"Key":"string explicitly","Fragments":["to"]},{"Key":"explicitly to","Fragments":["use"]},{"Key":"use on","Fragments":["line"]},{"Key":" C++11","Fragments":["allows"]},{"Key":"C++11 allows","Fragments":["us"]},{"Key":"allows us","Fragments":["to"]},{"Key":"us to","Fragments":["use"]},{"Key":"a range-based","Fragments":["for"]},{"Key":"range-based for","Fragments":["loop","loops"]},{"Key":"for loop","Fragments":["over","is","since","alot","could","completed.","iterating","in","is","to","conditional","on"]},{"Key":"loop over","Fragments":["all","the"]},{"Key":"over all","Fragments":["the","characters","elements."]},{"Key":"all the","Fragments":["characters","boilerplate","way","tests.","necessary","other","```#include```","curly","relevant","other","ascii","ASCII","letters","methods","tests?","tests?","tests,","tests.","functions","punctuation","functions"]},{"Key":"the characters","Fragments":["in","in","were","in","(although","at","in"]},{"Key":"characters in","Fragments":["a","a","the","the","the","natural"]},{"Key":" for","Fragments":["(const","(auto","(const","(auto","(int","(auto\u0026","the","each"]},{"Key":"for (const","Fragments":["char","auto\u0026"]},{"Key":"(const char","Fragments":["c"]},{"Key":"char c","Fragments":[":","="]},{"Key":"c :","Fragments":["msg)","*msg)`.","input)`","message","prompt)`","question)`","file"]},{"Key":": msg)","Fragments":["{"]},{"Key":" //","Fragments":["...","..."]},{"Key":" Do","Fragments":["you","you"]},{"Key":"clearer in","Fragments":["`is_shouting`"]},{"Key":"in `is_shouting`","Fragments":["and"]},{"Key":"`is_shouting` and","Fragments":["`is_silence`"]},{"Key":"and `is_silence`","Fragments":["with"]},{"Key":"`is_silence` with","Fragments":["a"]},{"Key":"a range","Fragments":["based","based"]},{"Key":"range based","Fragments":["for","for","for","list","loop"]},{"Key":"based for","Fragments":["loop?","loops","loops"]},{"Key":" You're","Fragments":["including"]},{"Key":"You're including","Fragments":["`\u003cstdlib.h\u003e`"]},{"Key":"including `\u003cstdlib.h\u003e`","Fragments":["from"]},{"Key":"`\u003cstdlib.h\u003e` from","Fragments":["the"]},{"Key":"C standard","Fragments":["library","library"]},{"Key":"standard library","Fragments":["to","headers","algorithms","had","provides"]},{"Key":"library to","Fragments":["get","remove"]},{"Key":"to get","Fragments":["`isalpha`,","the","in","out","compilation","it","more","all","some","used","this"]},{"Key":"get `isalpha`,","Fragments":["etc."]},{"Key":"`isalpha`, etc.","Fragments":["In"]},{"Key":"etc. In","Fragments":["C++,"]},{"Key":"C++, the","Fragments":["preferred"]},{"Key":"the preferred","Fragments":["form","mechanism","way"]},{"Key":"preferred form","Fragments":["for"]},{"Key":"form for","Fragments":["including"]},{"Key":"for including","Fragments":["a"]},{"Key":"including a","Fragments":["C"]},{"Key":"a C","Fragments":["standard","background,","programmer,","header"]},{"Key":"library headers","Fragments":["is"]},{"Key":"headers is","Fragments":["to"]},{"Key":"is to","Fragments":["include","return","build","treat","be","use","use","search","search","use","simplify"]},{"Key":"to include","Fragments":["`\u003ccstdlib\u003e`.","that","the","all"]},{"Key":"include `\u003ccstdlib\u003e`.","Fragments":["Since"]},{"Key":"`\u003ccstdlib\u003e`. Since","Fragments":["we're"]},{"Key":"Since we're","Fragments":["only"]},{"Key":"we're only","Fragments":["interested"]},{"Key":"only interested","Fragments":["in"]},{"Key":"interested in","Fragments":["the","switching","having"]},{"Key":"functions and","Fragments":["not","data","it"]},{"Key":"and not","Fragments":["the","only","at","change","native","alpha","the"]},{"Key":"not the","Fragments":["other","case","**address","declaritive."]},{"Key":"the other","Fragments":["stuff","approach.","two","hand,","stuff","bools","occurrences","submitions,","functions"]},{"Key":"other stuff","Fragments":["brought","from"]},{"Key":"stuff brought","Fragments":["into"]},{"Key":"brought into","Fragments":["scope"]},{"Key":"into scope","Fragments":["by"]},{"Key":"scope by","Fragments":["`\u003cstdlib.h\u003e`,"]},{"Key":"by `\u003cstdlib.h\u003e`,","Fragments":["we"]},{"Key":"`\u003cstdlib.h\u003e`, we","Fragments":["can"]},{"Key":"we can","Fragments":["just","use","just","fit","turn"]},{"Key":"can just","Fragments":["include","use","return","use","tell"]},{"Key":"just include","Fragments":["`\u003ccctype\u003e`"]},{"Key":"include `\u003ccctype\u003e`","Fragments":["and"]},{"Key":"`\u003ccctype\u003e` and","Fragments":["use"]},{"Key":"and use","Fragments":["`std::isalpha`,","std","prefix-increment"]},{"Key":"use `std::isalpha`,","Fragments":["etc."]},{"Key":"your use","Fragments":["of","of","of","of"]},{"Key":"of `std::regex`;","Fragments":["when"]},{"Key":"`std::regex`; when","Fragments":["I"]},{"Key":"I tried","Fragments":["this","to","to","to","to","to","to","a"]},{"Key":"tried this","Fragments":["on","and"]},{"Key":"this on","Fragments":["gcc"]},{"Key":"on gcc","Fragments":["4.8,"]},{"Key":"gcc 4.8,","Fragments":["it"]},{"Key":"4.8, it","Fragments":["simply"]},{"Key":"it simply","Fragments":["failed","be"]},{"Key":"simply failed","Fragments":["because"]},{"Key":"failed because","Fragments":["they"]},{"Key":"because they","Fragments":["don't","do","make"]},{"Key":"they don't","Fragments":["have","belong."]},{"Key":"don't have","Fragments":["a","to","a","time","to","to","to","them","any","your"]},{"Key":"a working","Fragments":["regex"]},{"Key":"working regex","Fragments":["in"]},{"Key":"regex in","Fragments":["that"]},{"Key":"in that","Fragments":["version.","way.","corner"]},{"Key":" We","Fragments":["have","can"]},{"Key":"We have","Fragments":["lots"]},{"Key":"have lots","Fragments":["of"]},{"Key":"lots of","Fragments":["implementation","comments","obscure"]},{"Key":"of implementation","Fragments":["details"]},{"Key":"implementation details","Fragments":["surfacing","making","and","in","(like","from"]},{"Key":"details surfacing","Fragments":["in"]},{"Key":"surfacing in","Fragments":["this"]},{"Key":"in this","Fragments":["one","case","case;","case.)","scenario","situation.","seemed","way","context","situation.","case,","case.","case","particular"]},{"Key":"this one","Fragments":["function."]},{"Key":"one function.","Fragments":["Can"]},{"Key":"function. Can","Fragments":["you"]},{"Key":"of how","Fragments":["you","we","to","to","I","I","I","I","I"]},{"Key":"you could","Fragments":["restructure","consider:","make","use","do","just","simplify","use","make","just","use","encapsulate","count","use","not","remove","just","hide","consider","use","rely","instead","also","use","have","leave","solve","do","check"]},{"Key":"could restructure","Fragments":["it"]},{"Key":"restructure it","Fragments":["so","so"]},{"Key":"it so","Fragments":["that","that"]},{"Key":"so that","Fragments":["the","everything","it","I","it","the","ist","was","your","could","`algo.h`"]},{"Key":"that the","Fragments":["details","std::isXXX","remaining","used","address-of","first","input","input","use","`if(","other","enumeration","\"C","way","mismatched"]},{"Key":"the details","Fragments":["were"]},{"Key":"details were","Fragments":["pushed"]},{"Key":"were pushed","Fragments":["down"]},{"Key":"pushed down","Fragments":["to"]},{"Key":"down to","Fragments":["a","line","a"]},{"Key":"a lower","Fragments":["level?","case"]},{"Key":"is looking","Fragments":["better!","really"]},{"Key":" We're","Fragments":["passing"]},{"Key":"We're passing","Fragments":["strings"]},{"Key":"value as","Fragments":["arguments"]},{"Key":"as arguments","Fragments":["to"]},{"Key":"arguments to","Fragments":["our","the"]},{"Key":"to our","Fragments":["various","helper"]},{"Key":"our various","Fragments":["functions,"]},{"Key":"various functions,","Fragments":["which"]},{"Key":"functions, which","Fragments":["means","is"]},{"Key":"which means","Fragments":["some","you"]},{"Key":"means some","Fragments":["copying"]},{"Key":"some copying","Fragments":["of"]},{"Key":"copying of","Fragments":["their","your"]},{"Key":"of their","Fragments":["contents"]},{"Key":"their contents","Fragments":["on"]},{"Key":"contents on","Fragments":["the"]},{"Key":"the free","Fragments":["store","function"]},{"Key":"free store","Fragments":["when"]},{"Key":"store when","Fragments":["we"]},{"Key":"when we","Fragments":["don't","are","change"]},{"Key":"we don't","Fragments":["need","need.","want","want","have","care"]},{"Key":"need distinct","Fragments":["copies."]},{"Key":"distinct copies.","Fragments":["Can"]},{"Key":"copies. Can","Fragments":["you"]},{"Key":"how we","Fragments":["could"]},{"Key":"we could","Fragments":["avoid","write","just"]},{"Key":"could avoid","Fragments":["this?"]},{"Key":"Some of","Fragments":["my"]},{"Key":"my functions","Fragments":["have","because"]},{"Key":"functions have","Fragments":["a"]},{"Key":"a bunch","Fragments":["of","of","of"]},{"Key":"bunch of","Fragments":["if/else","private","simple"]},{"Key":"of if/else","Fragments":["if"]},{"Key":"if/else if","Fragments":["statements."]},{"Key":"statements. Is","Fragments":["this"]},{"Key":"Is this","Fragments":["ugly"]},{"Key":"this ugly","Fragments":["looking"]},{"Key":"ugly looking","Fragments":["code?"]},{"Key":"looking code?","Fragments":["Should"]},{"Key":"code? Should","Fragments":["I"]},{"Key":"Should I","Fragments":["try"]},{"Key":"I try","Fragments":["to","to","to","to"]},{"Key":"use switch","Fragments":["statements?","statement"]},{"Key":"thought using","Fragments":["an"]},{"Key":"using an","Fragments":["enum","if-break"]},{"Key":"an enum","Fragments":["would","that","that","and"]},{"Key":"enum would","Fragments":["make"]},{"Key":"the categories","Fragments":["more"]},{"Key":"categories more","Fragments":["apparent."]},{"Key":" Doesn't","Fragments":["handle"]},{"Key":"Doesn't handle","Fragments":["the"]},{"Key":"handle the","Fragments":["case","additional"]},{"Key":"the case","Fragments":["where","either","where","where","I","all"]},{"Key":"case where","Fragments":["only","the","there","there"]},{"Key":"where only","Fragments":["an"]},{"Key":"only an","Fragments":["explicative","algorithm."]},{"Key":"an explicative","Fragments":["\"*\u0026#@\u0026$\""]},{"Key":"explicative \"*\u0026#@\u0026$\"","Fragments":["is"]},{"Key":"\"*\u0026#@\u0026$\" is","Fragments":["directed"]},{"Key":"is directed","Fragments":["at"]},{"Key":"directed at","Fragments":["Bob."]},{"Key":"at Bob.","Fragments":["Does"]},{"Key":"Bob. Does","Fragments":["handle"]},{"Key":"Does handle","Fragments":["the"]},{"Key":"the additional","Fragments":["case"]},{"Key":"additional case","Fragments":["of"]},{"Key":"case of","Fragments":["shouting","exercism,","throwing"]},{"Key":"of shouting","Fragments":["\"1,","to"]},{"Key":"shouting \"1,","Fragments":["2,"]},{"Key":"\"1, 2,","Fragments":["3,"]},{"Key":"2, 3,","Fragments":["4!\""]},{"Key":"3, 4!\"","Fragments":["at"]},{"Key":"4!\" at","Fragments":["Bob,"]},{"Key":"at Bob,","Fragments":["where"]},{"Key":"Bob, where","Fragments":["the"]},{"Key":"where the","Fragments":["exclamation","original","operators"]},{"Key":"the exclamation","Fragments":["is"]},{"Key":"exclamation is","Fragments":["required"]},{"Key":"is required","Fragments":["to","in"]},{"Key":"required to","Fragments":["understand","pass"]},{"Key":"to understand","Fragments":["this","what","at","your","what"]},{"Key":"understand this","Fragments":["as"]},{"Key":"this as","Fragments":["yelling.","an","simple"]},{"Key":" Has","Fragments":["just"]},{"Key":"Has just","Fragments":["two"]},{"Key":"just two","Fragments":["loops,"]},{"Key":"two loops,","Fragments":["which"]},{"Key":"loops, which","Fragments":["I"]},{"Key":"which I","Fragments":["think","can","used","did"]},{"Key":"think is","Fragments":["reasonable"]},{"Key":"is reasonable","Fragments":["for"]},{"Key":"reasonable for","Fragments":["readability."]},{"Key":" Just","Fragments":["testing","one","looking","another"]},{"Key":"Just testing","Fragments":["exercism."]},{"Key":"testing exercism.","Fragments":["It"]},{"Key":"exercism. It","Fragments":["seems"]},{"Key":"It seems","Fragments":["pretty","odd","the","like","a","more"]},{"Key":"seems pretty","Fragments":["neat.","different"]},{"Key":"I'm rather","Fragments":["unhappy"]},{"Key":"rather unhappy","Fragments":["with"]},{"Key":"unhappy with","Fragments":["the"]},{"Key":"the fact","Fragments":["that","that","that","that","that","that"]},{"Key":"fact that","Fragments":["the","I","even","you","it's","they"]},{"Key":"the std::isXXX","Fragments":["series"]},{"Key":"std::isXXX series","Fragments":["of"]},{"Key":"of functions","Fragments":["don't","with"]},{"Key":"functions don't","Fragments":["take"]},{"Key":"don't take","Fragments":["char"]},{"Key":"take char","Fragments":["as"]},{"Key":"as an","Fragments":["argument.","rvalue","FSM/language","object"]},{"Key":"an argument.","Fragments":["I"]},{"Key":"argument. I","Fragments":["had"]},{"Key":"to wrap","Fragments":["them"]},{"Key":"wrap them","Fragments":["to"]},{"Key":"get the","Fragments":["to","same","length","tests"]},{"Key":"the to","Fragments":["work","lowercase"]},{"Key":"to work","Fragments":["with","properly.","with","on","without"]},{"Key":"work with","Fragments":["std::all_of.","C++."]},{"Key":"like that","Fragments":["you're","you","you","now","idea.","your","you","you","you"]},{"Key":"that you're","Fragments":["passing","doing","not","not"]},{"Key":"const reference","Fragments":["to","in","to","rather","?","to"]},{"Key":"reference to","Fragments":["avoid","a","each","its"]},{"Key":"avoid copying","Fragments":["string"]},{"Key":"copying string","Fragments":["values."]},{"Key":"string values.","Fragments":["I"]},{"Key":"values. I","Fragments":["like"]},{"Key":"your intention-revealing","Fragments":["methods"]},{"Key":"intention-revealing methods","Fragments":["`isQuestion`"]},{"Key":"methods `isQuestion`","Fragments":["and"]},{"Key":"`isQuestion` and","Fragments":["`isSilence`"]},{"Key":"and `isSilence`","Fragments":["as","shorter."]},{"Key":"`isSilence` as","Fragments":["they"]},{"Key":"as they","Fragments":["reveal","may"]},{"Key":"they reveal","Fragments":["aspects"]},{"Key":"reveal aspects","Fragments":["of"]},{"Key":"aspects of","Fragments":["the"]},{"Key":"problem domain.","Fragments":["`isAllCaps`"]},{"Key":"domain. `isAllCaps`","Fragments":["seems"]},{"Key":"`isAllCaps` seems","Fragments":["to"]},{"Key":"seems to","Fragments":["speak","be","be","start","me","me","come"]},{"Key":"to speak","Fragments":["more"]},{"Key":"speak more","Fragments":["to"]},{"Key":"more to","Fragments":["its"]},{"Key":"to its","Fragments":["implementation","mapped"]},{"Key":"its implementation","Fragments":["than"]},{"Key":"implementation than","Fragments":["the"]},{"Key":"than the","Fragments":["problem","number","header.","O(n","first","returned"]},{"Key":"problem domain,","Fragments":["however."]},{"Key":"domain, however.","Fragments":["Can"]},{"Key":"however. Can","Fragments":["you"]},{"Key":"a better","Fragments":["name","name","substitute","approach","approach","strategy","way","distribution"]},{"Key":"better name","Fragments":["for","for"]},{"Key":"name for","Fragments":["this","the","this"]},{"Key":"this function","Fragments":["that","should"]},{"Key":"function that","Fragments":["speaks","needs","ignores","is","fits","takes","then","returns","lowercases"]},{"Key":"that speaks","Fragments":["in"]},{"Key":"speaks in","Fragments":["terms"]},{"Key":"in terms","Fragments":["of","of","of"]},{"Key":"terms of","Fragments":["the","the","performance,"]},{"Key":"In C++11","Fragments":["we"]},{"Key":"C++11 we","Fragments":["can"]},{"Key":"use range-based","Fragments":["for"]},{"Key":"for loops","Fragments":["to","lower","so"]},{"Key":"loops to","Fragments":["walk"]},{"Key":"to walk","Fragments":["over"]},{"Key":"walk over","Fragments":["all"]},{"Key":"all characters","Fragments":["in"]},{"Key":"a string;","Fragments":["this"]},{"Key":"string; this","Fragments":["would"]},{"Key":"this would","Fragments":["simplify","lead","be","stop"]},{"Key":"would simplify","Fragments":["your"]},{"Key":"simplify your","Fragments":["loops","code?","yelling","code"]},{"Key":"your loops","Fragments":["on","as"]},{"Key":"loops on","Fragments":["line"]},{"Key":"`std::string` has","Fragments":["methods"]},{"Key":"has methods","Fragments":["`find_first_of`"]},{"Key":"methods `find_first_of`","Fragments":["and"]},{"Key":"`find_first_of` and","Fragments":["`find_last_of`"]},{"Key":"and `find_last_of`","Fragments":["that"]},{"Key":"`find_last_of` that","Fragments":["can"]},{"Key":"that can","Fragments":["simplify","be"]},{"Key":"can simplify","Fragments":["`getTrimmedString`"]},{"Key":"simplify `getTrimmedString`","Fragments":["by"]},{"Key":"`getTrimmedString` by","Fragments":["eliminating"]},{"Key":"by eliminating","Fragments":["some"]},{"Key":"eliminating some","Fragments":["low-level"]},{"Key":"some low-level","Fragments":["looping","details"]},{"Key":"low-level looping","Fragments":["details."]},{"Key":"looping details.","Fragments":["Even"]},{"Key":"details. Even","Fragments":["better,"]},{"Key":"Even better,","Fragments":["the"]},{"Key":"better, the","Fragments":["boost"]},{"Key":"the boost","Fragments":["string","string","trim.","tokenizer?","functions","convention","unit","test","library."]},{"Key":"boost string","Fragments":["algorithm","algorithms."]},{"Key":"string algorithm","Fragments":["[`boost::algorithm::trim`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html)"]},{"Key":"algorithm [`boost::algorithm::trim`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html)","Fragments":["will"]},{"Key":"[`boost::algorithm::trim`](http://www.boost.org/doc/libs/1_55_0/doc/html/boost/algorithm/trim.html) will","Fragments":["do"]},{"Key":"will do","Fragments":["all","the"]},{"Key":"do all","Fragments":["this"]},{"Key":"all this","Fragments":["work"]},{"Key":"this work","Fragments":["for"]},{"Key":"work for","Fragments":["you.","shorter"]},{"Key":"like template","Fragments":["algorithms."]},{"Key":"template algorithms.","Fragments":["I"]},{"Key":"algorithms. I","Fragments":["sort","was"]},{"Key":"I sort","Fragments":["of","it"]},{"Key":"of had","Fragments":["a"]},{"Key":"feeling there","Fragments":["should"]},{"Key":"there should","Fragments":["be"]},{"Key":" a","Fragments":["for_each-alike"]},{"Key":"a for_each-alike","Fragments":["that"]},{"Key":"for_each-alike that","Fragments":["takes"]},{"Key":"that takes","Fragments":["two","regex"]},{"Key":"takes two","Fragments":["ranges"]},{"Key":"two ranges","Fragments":["and"]},{"Key":"ranges and","Fragments":["a"]},{"Key":"a binary","Fragments":["function."]},{"Key":" boost/range/algorithm_ext/for_each.hpp","Fragments":["has","has"]},{"Key":"boost/range/algorithm_ext/for_each.hpp has","Fragments":["it,","an"]},{"Key":"has it,","Fragments":["found"]},{"Key":"it, found","Fragments":["after"]},{"Key":"found after","Fragments":["a"]},{"Key":"after a","Fragments":["bit","couple"]},{"Key":" Of","Fragments":["course,","course,"]},{"Key":"Of course,","Fragments":["this","a"]},{"Key":"course, this","Fragments":["could"]},{"Key":"this could","Fragments":["be","be","possibly","be"]},{"Key":"be written","Fragments":["with","as","as"]},{"Key":"written with","Fragments":["a"]},{"Key":"a for-loop,","Fragments":["incrementing"]},{"Key":" both","Fragments":["iterators"]},{"Key":"both iterators","Fragments":["at"]},{"Key":"iterators at","Fragments":["once."]},{"Key":"once. However,","Fragments":["I"]},{"Key":"algorithm +","Fragments":["lambda"]},{"Key":"+ lambda","Fragments":["approach"]},{"Key":" quite","Fragments":["a","exactly"]},{"Key":"quite a","Fragments":["lot","bit.","lot","good"]},{"Key":"lot for","Fragments":["its"]},{"Key":"for its","Fragments":["clarity.","being","`islower()`","benefit"]},{"Key":" Nice","Fragments":["and","use","usage","idea","and","use"]},{"Key":"Nice and","Fragments":["simple.","concise!"]},{"Key":"has an","Fragments":["algorithm"]},{"Key":"an algorithm","Fragments":["to","for"]},{"Key":"algorithm to","Fragments":["run"]},{"Key":" binary","Fragments":["function"]},{"Key":"binary function","Fragments":["over"]},{"Key":"function over","Fragments":["the"]},{"Key":"the elements","Fragments":["of","with","is","in"]},{"Key":"elements of","Fragments":["two"]},{"Key":"of two","Fragments":["containers.","values."]},{"Key":"looking really","Fragments":["good!"]},{"Key":"really good!","Fragments":["I"]},{"Key":"good! I","Fragments":["like"]},{"Key":"you extracted","Fragments":["intention"]},{"Key":"extracted intention","Fragments":["revealing"]},{"Key":"revealing functions","Fragments":["for"]},{"Key":"functions for","Fragments":["`is_quiet`","string"]},{"Key":"for `is_quiet`","Fragments":["and"]},{"Key":"`is_quiet` and","Fragments":["`is_question`."]},{"Key":"and `is_question`.","Fragments":["It"]},{"Key":"`is_question`. It","Fragments":["seems"]},{"Key":"seems odd","Fragments":["that"]},{"Key":"odd that","Fragments":["the"]},{"Key":"the remaining","Fragments":["case,"]},{"Key":"remaining case,","Fragments":["shouting,"]},{"Key":"case, shouting,","Fragments":["doesn't"]},{"Key":"shouting, doesn't","Fragments":["have"]},{"Key":"doesn't have","Fragments":["an","pointless"]},{"Key":"have an","Fragments":["intention-revealing"]},{"Key":"an intention-revealing","Fragments":["function"]},{"Key":"intention-revealing function","Fragments":["extracted"]},{"Key":"function extracted","Fragments":["for"]},{"Key":"extracted for","Fragments":["it."]},{"Key":"for it.","Fragments":["Similarly,"]},{"Key":"it. Similarly,","Fragments":["there"]},{"Key":"Similarly, there","Fragments":["are"]},{"Key":"are some","Fragments":["low-level","suggestions","things"]},{"Key":"low-level details","Fragments":["leaking","and"]},{"Key":"details leaking","Fragments":["out"]},{"Key":"leaking out","Fragments":["of"]},{"Key":"of `is_quiet`.","Fragments":["From"]},{"Key":"`is_quiet`. From","Fragments":["the"]},{"Key":"From the","Fragments":["name,"]},{"Key":"the name,","Fragments":["I"]},{"Key":"name, I","Fragments":["was"]},{"Key":"was expecting","Fragments":["`is_quiet`"]},{"Key":"expecting `is_quiet`","Fragments":["to"]},{"Key":"`is_quiet` to","Fragments":["return"]},{"Key":"to return","Fragments":["a","the","a","from","a","a","actual"]},{"Key":"a bool.","Fragments":["Can"]},{"Key":"bool. Can","Fragments":["you"]},{"Key":"to restructure","Fragments":["it","this"]},{"Key":"that everything","Fragments":["in"]},{"Key":"in `hey`","Fragments":["is","instead"]},{"Key":"is operating","Fragments":["at"]},{"Key":"operating at","Fragments":["the"]},{"Key":"same semantic","Fragments":["level?","level."]},{"Key":" Since","Fragments":["your","the","the","this","it"]},{"Key":"Since your","Fragments":["implementation"]},{"Key":"your implementation","Fragments":["is","with"]},{"Key":"implementation is","Fragments":["header-only,","16."]},{"Key":"is header-only,","Fragments":["what"]},{"Key":"header-only, what","Fragments":["happens"]},{"Key":"what happens","Fragments":["if","when","is"]},{"Key":"happens if","Fragments":["multiple","we","the","it's","the"]},{"Key":"if multiple","Fragments":["translation"]},{"Key":"multiple translation","Fragments":["units"]},{"Key":"translation units","Fragments":["in"]},{"Key":"units in","Fragments":["the"]},{"Key":"same executable","Fragments":["include"]},{"Key":"executable include","Fragments":["this"]},{"Key":"include this","Fragments":["header?","header"]},{"Key":"I include","Fragments":["this"]},{"Key":"this header","Fragments":["in"]},{"Key":"header in","Fragments":["my"]},{"Key":"my translation","Fragments":["unit,","unit."]},{"Key":"translation unit,","Fragments":["it","we","but"]},{"Key":"unit, it","Fragments":["has"]},{"Key":"it has","Fragments":["the","a","been","been","essentially"]},{"Key":"has the","Fragments":["side-effect","problem","performance","right"]},{"Key":"the side-effect","Fragments":["of","of"]},{"Key":"side-effect of","Fragments":["bringing","the"]},{"Key":"of bringing","Fragments":["the"]},{"Key":"bringing the","Fragments":["`std`"]},{"Key":"the `std`","Fragments":["namespace"]},{"Key":"`std` namespace","Fragments":["into"]},{"Key":"namespace into","Fragments":["my"]},{"Key":"translation unit.","Fragments":["Can","As"]},{"Key":"unit. Can","Fragments":["you"]},{"Key":"restructure this","Fragments":["so"]},{"Key":"this so","Fragments":["that"]},{"Key":"that it","Fragments":["is","needn't","will","exists.","justifies","would","doesn't","matched","matched","might","is"]},{"Key":"is side-effect","Fragments":["free"]},{"Key":"side-effect free","Fragments":["with"]},{"Key":"free with","Fragments":["respect"]},{"Key":"with respect","Fragments":["to"]},{"Key":"respect to","Fragments":["the"]},{"Key":"the search","Fragments":["order"]},{"Key":"search order","Fragments":["of"]},{"Key":"order of","Fragments":["namespaces?","global"]},{"Key":" Great!","Fragments":["Now"]},{"Key":"Great! Now","Fragments":["we're"]},{"Key":"Now we're","Fragments":["passing"]},{"Key":"we're passing","Fragments":["strings"]},{"Key":"by pointer","Fragments":["so"]},{"Key":"pointer so","Fragments":["we're"]},{"Key":"so we're","Fragments":["not"]},{"Key":"we're not","Fragments":["copying","talking"]},{"Key":"not copying","Fragments":["the"]},{"Key":"the strings.","Fragments":["However,","One","C++"]},{"Key":"strings. However,","Fragments":["we"]},{"Key":"However, we","Fragments":["aren't","lost"]},{"Key":"we aren't","Fragments":["modifying","modifying","modifying,"]},{"Key":"aren't modifying","Fragments":["those","the"]},{"Key":"modifying those","Fragments":["strings"]},{"Key":"those strings","Fragments":["and","manually"]},{"Key":"strings and","Fragments":["that","map","test"]},{"Key":"and that","Fragments":["isn't","empty","saves","is"]},{"Key":"that isn't","Fragments":["obvious","a"]},{"Key":"isn't obvious","Fragments":["from"]},{"Key":"obvious from","Fragments":["looking","[the"]},{"Key":"from looking","Fragments":["at"]},{"Key":"looking at","Fragments":["the","someone","this:","the","other"]},{"Key":"the signatures","Fragments":["of"]},{"Key":"signatures of","Fragments":["our"]},{"Key":"of our","Fragments":["functions.","memory."]},{"Key":"our functions.","Fragments":["We"]},{"Key":"functions. We","Fragments":["can"]},{"Key":"We can","Fragments":["make","reveal","do","stop"]},{"Key":"can make","Fragments":["this","the","the"]},{"Key":"this clear","Fragments":["by"]},{"Key":"clear by","Fragments":["passing"]},{"Key":"by passing","Fragments":["in"]},{"Key":"passing in","Fragments":["`const"]},{"Key":"in `const","Fragments":["string","string"]},{"Key":"`const string","Fragments":["*msg`.","\u0026msg`"]},{"Key":"string *msg`.","Fragments":["We"]},{"Key":"*msg`. We","Fragments":["could"]},{"Key":"We could","Fragments":["also"]},{"Key":"could also","Fragments":["use","check","use","be"]},{"Key":"also use","Fragments":["const","proper","a"]},{"Key":"use const","Fragments":["references","strings"]},{"Key":"const references","Fragments":["and","whenever"]},{"Key":"references and","Fragments":["pass","pointers"]},{"Key":"and pass","Fragments":["in"]},{"Key":"pass in","Fragments":["`const","a"]},{"Key":"string \u0026msg`","Fragments":["and"]},{"Key":"\u0026msg` and","Fragments":["then"]},{"Key":"and then","Fragments":["we","simple","compared","counting","use","overwriting"]},{"Key":"then we","Fragments":["wouldn't","know"]},{"Key":"we wouldn't","Fragments":["need"]},{"Key":"wouldn't need","Fragments":["to"]},{"Key":"use pointer","Fragments":["dereferencing"]},{"Key":"pointer dereferencing","Fragments":["syntax."]},{"Key":" Similarly,","Fragments":["we"]},{"Key":"Similarly, we","Fragments":["aren't"]},{"Key":"modifying the","Fragments":["characters","elements","`word`."]},{"Key":"string in","Fragments":["the","the","your","as","that"]},{"Key":"the range","Fragments":["for","based"]},{"Key":"range for","Fragments":["loop,","would"]},{"Key":"for loop,","Fragments":["so","just","other","no"]},{"Key":"loop, so","Fragments":["we"]},{"Key":"so we","Fragments":["could","can"]},{"Key":"could write","Fragments":["`for"]},{"Key":"write `for","Fragments":["(char"]},{"Key":"`for (char","Fragments":["c"]},{"Key":"(char c","Fragments":[":"]},{"Key":": *msg)`.","Fragments":["The"]},{"Key":"*msg)`. The","Fragments":["main"]},{"Key":"The main","Fragments":["point"]},{"Key":"main point","Fragments":["of"]},{"Key":"point of","Fragments":["using"]},{"Key":"of using","Fragments":["by-reference","two","include","the","namespaces","`msg[i]","a","a","the","const","const","an","the","it"]},{"Key":"using by-reference","Fragments":["types"]},{"Key":"by-reference types","Fragments":["in"]},{"Key":"types in","Fragments":["the","bigger"]},{"Key":"argument of","Fragments":["a","0.","your"]},{"Key":"a for","Fragments":["loop","loop"]},{"Key":"loop is","Fragments":["when","non-standard.","a","more"]},{"Key":"is when","Fragments":["we"]},{"Key":"we are","Fragments":["modifying"]},{"Key":"are modifying","Fragments":["the"]},{"Key":"elements with","Fragments":["a"]},{"Key":"a non-const","Fragments":["reference,"]},{"Key":"non-const reference,","Fragments":["or"]},{"Key":"reference, or","Fragments":["when"]},{"Key":"or when","Fragments":["copying"]},{"Key":"when copying","Fragments":["the"]},{"Key":"elements is","Fragments":["expensive"]},{"Key":"is expensive","Fragments":["with"]},{"Key":"expensive with","Fragments":["a"]},{"Key":"a const","Fragments":["reference.","reference","reference","reference","reference.","reference","string\u0026,","reference"]},{"Key":"reference. For","Fragments":["simple"]},{"Key":"For simple","Fragments":["types"]},{"Key":"simple types","Fragments":["like"]},{"Key":"types like","Fragments":["`char`,"]},{"Key":"like `char`,","Fragments":["and"]},{"Key":"`char`, and","Fragments":["`int`"]},{"Key":"and `int`","Fragments":["that"]},{"Key":"`int` that","Fragments":["we"]},{"Key":"that we","Fragments":["aren't","don't","do","don't","care"]},{"Key":"aren't modifying,","Fragments":["using"]},{"Key":"modifying, using","Fragments":["a"]},{"Key":"using a","Fragments":["reference","namespace.","namespace,","map.","normal","C++11","regex","sledgehammer","double","RNG"]},{"Key":"a reference","Fragments":["just","rather","to"]},{"Key":"reference just","Fragments":["complicates"]},{"Key":"just complicates","Fragments":["things"]},{"Key":"complicates things","Fragments":["and"]},{"Key":"things and","Fragments":["involves"]},{"Key":"and involves","Fragments":["a"]},{"Key":"involves a","Fragments":["small"]},{"Key":"a small","Fragments":["performance","hack"]},{"Key":"small performance","Fragments":["penalty"]},{"Key":"performance penalty","Fragments":["that"]},{"Key":"penalty that","Fragments":["we"]},{"Key":"need. So","Fragments":["we"]},{"Key":"So we","Fragments":["can","might"]},{"Key":"just use","Fragments":["`char`","appropriately","speech.back().","const","`bob::hey`"]},{"Key":"use `char`","Fragments":["for"]},{"Key":"`char` for","Fragments":["the"]},{"Key":"The helper","Fragments":["functions"]},{"Key":"functions here","Fragments":["don't"]},{"Key":"here don't","Fragments":["need"]},{"Key":"be part","Fragments":["of"]},{"Key":"the class","Fragments":["`bob`,","definition","definition"]},{"Key":"`bob`, since","Fragments":["`bob`"]},{"Key":"since `bob`","Fragments":["serves"]},{"Key":"`bob` serves","Fragments":["as"]},{"Key":"serves as","Fragments":["nothing"]},{"Key":"as nothing","Fragments":["more"]},{"Key":"nothing more","Fragments":["than"]},{"Key":"a named","Fragments":["scope"]},{"Key":"named scope","Fragments":["for"]},{"Key":"scope for","Fragments":["the"]},{"Key":"the function","Fragments":["`hey`.","call","itself.","for","inserts","prototypes","as","as","is"]},{"Key":"function `hey`.","Fragments":["They"]},{"Key":"`hey`. They","Fragments":["could"]},{"Key":"They could","Fragments":["be"]},{"Key":"be simply","Fragments":["free"]},{"Key":"simply free","Fragments":["functions"]},{"Key":"free functions","Fragments":["in","`bool"]},{"Key":"namespace in","Fragments":["the","which","the"]},{"Key":"the `cpp`.","Fragments":["This"]},{"Key":"`cpp`. This","Fragments":["would"]},{"Key":"This would","Fragments":["prevent","be","express"]},{"Key":"would prevent","Fragments":["any"]},{"Key":"prevent any","Fragments":["clients"]},{"Key":"any clients","Fragments":["of"]},{"Key":"of `bob.h`","Fragments":["from"]},{"Key":"`bob.h` from","Fragments":["having"]},{"Key":"from having","Fragments":["to"]},{"Key":"having to","Fragments":["recompile","define","write","check","put","use"]},{"Key":"to recompile","Fragments":["when"]},{"Key":"recompile when","Fragments":["we"]},{"Key":"we change","Fragments":["their"]},{"Key":"change their","Fragments":["signatures."]},{"Key":" thank","Fragments":["you"]},{"Key":"thank you","Fragments":["for","for"]},{"Key":"for all","Fragments":["of","uppercase","you"]},{"Key":"your suggestions","Fragments":["for","at"]},{"Key":"suggestions for","Fragments":["making"]},{"Key":"for making","Fragments":["my"]},{"Key":"making my","Fragments":["code"]},{"Key":"code nicer.","Fragments":["But"]},{"Key":"nicer. But","Fragments":["what"]},{"Key":"But what","Fragments":["is"]},{"Key":"what is","Fragments":["the","expected","the"]},{"Key":"is the","Fragments":["purpose","first","obvious","same","same,","preferred","way","most","**reference**","input","better","input","word","overhead","tokenizer,","separated","right","using","best","fastest."]},{"Key":"the purpose","Fragments":["for","of","of","of"]},{"Key":"purpose for","Fragments":["having"]},{"Key":"for having","Fragments":["an","done","a"]},{"Key":"having an","Fragments":["anonymous"]},{"Key":"anonymous namespace?","Fragments":["this"]},{"Key":"namespace? this","Fragments":["is"]},{"Key":"first time","Fragments":["i've","the"]},{"Key":"time i've","Fragments":["really"]},{"Key":"i've really","Fragments":["ever"]},{"Key":"really ever","Fragments":["heard"]},{"Key":"ever heard","Fragments":["of"]},{"Key":"heard of","Fragments":["them."]},{"Key":" boost/tokenizer.hpp","Fragments":["makes"]},{"Key":"boost/tokenizer.hpp makes","Fragments":["this"]},{"Key":"makes this","Fragments":["exercise","whole","an","a"]},{"Key":"this exercise","Fragments":["a","it","are","is","was","and"]},{"Key":"exercise a","Fragments":["lot"]},{"Key":"lot less","Fragments":["verbose"]},{"Key":"less verbose","Fragments":["to","by"]},{"Key":"verbose to","Fragments":["solve."]},{"Key":"Since the","Fragments":["spec","input"]},{"Key":"the spec","Fragments":["does"]},{"Key":"spec does","Fragments":["not"]},{"Key":"not present","Fragments":["any"]},{"Key":"present any","Fragments":["case"]},{"Key":"any case","Fragments":["where"]},{"Key":"the original","Fragments":["word","to","word","string."]},{"Key":"original word","Fragments":["would","and"]},{"Key":"word would","Fragments":["be"]},{"Key":" converting","Fragments":["the"]},{"Key":"converting the","Fragments":["word"]},{"Key":"the word","Fragments":["into","isn't","extraction","with","string","string","into"]},{"Key":"word into","Fragments":["a","the"]},{"Key":"a predicate","Fragments":["function","function:"]},{"Key":"predicate function","Fragments":["inside"]},{"Key":"function inside","Fragments":["the","a"]},{"Key":"inside the","Fragments":["constructor","translation","translation","bob","function's","function)","for","namespace","`for`"]},{"Key":" seemed","Fragments":["like"]},{"Key":"seemed like","Fragments":["a","a"]},{"Key":"like a","Fragments":["rather","rather","RegEx","very","pretty","check","foreach","for()"]},{"Key":"a rather","Fragments":["elegant","roundabout","unusual"]},{"Key":"rather elegant","Fragments":["solution"]},{"Key":"elegant solution","Fragments":["to"]},{"Key":"solution to","Fragments":["me.","this","the"]},{"Key":"However, there","Fragments":["is"]},{"Key":"the obvious","Fragments":["problem"]},{"Key":"obvious problem","Fragments":["that"]},{"Key":"problem that","Fragments":["we"]},{"Key":"we do","Fragments":["a","that,","that,","this,"]},{"Key":"do a","Fragments":["copy"]},{"Key":"a copy","Fragments":["of","-"]},{"Key":"the candidates","Fragments":["container,"]},{"Key":" removing","Fragments":["from"]},{"Key":"removing from","Fragments":["it"]},{"Key":"from it","Fragments":["if"]},{"Key":"it if","Fragments":["necessary."]},{"Key":"if necessary.","Fragments":["This"]},{"Key":"necessary. This","Fragments":["can"]},{"Key":"be expensive","Fragments":["if"]},{"Key":"expensive if","Fragments":["the"]},{"Key":"if the","Fragments":["input","input","current","last","first","string","string","key","input","input","same","string","condition","character","input","same","use","strings","two","map","map","same","`map`","string"]},{"Key":" is","Fragments":["large.","boost","straight"]},{"Key":"didn't expect","Fragments":["an"]},{"Key":"expect an","Fragments":["exercise"]},{"Key":"an exercise","Fragments":["in"]},{"Key":"exercise in","Fragments":["cut","mind."]},{"Key":"in cut","Fragments":["\u0026"]},{"Key":"cut \u0026","Fragments":["paste..."]},{"Key":" Your","Fragments":["to_lower","implementation","string","functions","code","use","include","verses"]},{"Key":"Your to_lower","Fragments":["helper"]},{"Key":"to_lower helper","Fragments":["is"]},{"Key":"helper is","Fragments":["the"]},{"Key":"same as","Fragments":["boost::to_lower_copy","*acc[word]","lowercase","another","push_back()."]},{"Key":" Not","Fragments":["quite","sure","to"]},{"Key":"Not quite","Fragments":["happy"]},{"Key":"quite happy","Fragments":["with"]},{"Key":"happy with","Fragments":["the","it."]},{"Key":" ```","Fragments":["cpp"]},{"Key":" if(","Fragments":["wordStart","rand()"]},{"Key":"if( wordStart","Fragments":["=="]},{"Key":"wordStart ==","Fragments":["input.end()"]},{"Key":"== input.end()","Fragments":[")"]},{"Key":"input.end() )","Fragments":["break;"]},{"Key":" in","Fragments":["the","the"]},{"Key":"the loop","Fragments":["body.","is","instead","myself).","sooner,","and","variables","to","to","over"]},{"Key":"loop body.","Fragments":["I"]},{"Key":"body. I","Fragments":["only"]},{"Key":"I only","Fragments":["need","went","found","have","made"]},{"Key":"only need","Fragments":["it"]},{"Key":"need it","Fragments":["in",":p"]},{"Key":"in case","Fragments":["the"]},{"Key":"case the","Fragments":["input"]},{"Key":"string ends","Fragments":["with"]},{"Key":"with non-alphanum","Fragments":["characters."]},{"Key":"non-alphanum characters.","Fragments":["It"]},{"Key":"characters. It","Fragments":["feels"]},{"Key":"It feels","Fragments":["like","like","like"]},{"Key":"feels like","Fragments":["I","something","`hey`","an","the"]},{"Key":"like I","Fragments":["could","am"]},{"Key":"probably rewrite","Fragments":["the"]},{"Key":"rewrite the","Fragments":["code"]},{"Key":"code so","Fragments":["that"]},{"Key":"that I","Fragments":["don't","wasn't","could","called","like","ran","need","like,","actually","really","missed,","look","find","understand"]},{"Key":"need an","Fragments":["extra","else."]},{"Key":"an extra","Fragments":["break"]},{"Key":"extra break","Fragments":["condition"]},{"Key":"break condition","Fragments":["for"]},{"Key":"condition for","Fragments":["this"]},{"Key":"this case,","Fragments":["but","as"]},{"Key":"case, but","Fragments":["I","I'm"]},{"Key":"can't think","Fragments":["of","of","of","of"]},{"Key":"way that","Fragments":["wouldn't","you're","doesn't","you"]},{"Key":"that wouldn't","Fragments":["also"]},{"Key":"wouldn't also","Fragments":["add"]},{"Key":"also add","Fragments":["some"]},{"Key":"add some","Fragments":["extra"]},{"Key":"some extra","Fragments":["lines"]},{"Key":"extra lines","Fragments":["of"]},{"Key":"lines of","Fragments":["code"]},{"Key":"of code","Fragments":["at","after","that","is","out"]},{"Key":"code at","Fragments":["other","all."]},{"Key":"at other","Fragments":["places.","submissions","solutions,"]},{"Key":"What about","Fragments":["boost/tokenizer.hpp?","leading"]},{"Key":"about boost/tokenizer.hpp?","Fragments":["Does"]},{"Key":"boost/tokenizer.hpp? Does","Fragments":["exactly"]},{"Key":"Does exactly","Fragments":["what"]},{"Key":"exactly what","Fragments":["the"]},{"Key":"what the","Fragments":["exercise","code","purpose","pros","best"]},{"Key":"the exercise","Fragments":["requires,","requires","to"]},{"Key":"exercise requires,","Fragments":["minus"]},{"Key":"requires, minus","Fragments":["lower-casing"]},{"Key":"minus lower-casing","Fragments":["words"]},{"Key":"lower-casing words","Fragments":["before"]},{"Key":"words before","Fragments":["entering"]},{"Key":"before entering","Fragments":["into"]},{"Key":"entering into","Fragments":["the","the"]},{"Key":"into the","Fragments":["map.","documentation","function","map,","world","std::map.","std::map.","map","`return`","map","map",".h"]},{"Key":"course, a","Fragments":["word"]},{"Key":"a word","Fragments":["is","with","was","and","and","and"]},{"Key":"word is","Fragments":["not","not","going","not"]},{"Key":"an anagram","Fragments":["if"]},{"Key":"anagram if","Fragments":["it"]},{"Key":"the same,","Fragments":["minus","while"]},{"Key":"same, minus","Fragments":["case"]},{"Key":"minus case","Fragments":["insensitivity."]},{"Key":" Cought","Fragments":["this"]},{"Key":"Cought this","Fragments":["by"]},{"Key":"this by","Fragments":["looking"]},{"Key":"by looking","Fragments":["at","at"]},{"Key":"at someone","Fragments":["else's"]},{"Key":"someone else's","Fragments":["submission"]},{"Key":" Funny,","Fragments":["I"]},{"Key":"Funny, I","Fragments":["just"]},{"Key":"just re-stumbled","Fragments":["across"]},{"Key":"re-stumbled across","Fragments":["boost::tokenizer"]},{"Key":"across boost::tokenizer","Fragments":["a"]},{"Key":"boost::tokenizer a","Fragments":["few"]},{"Key":"few weeks","Fragments":["ago,"]},{"Key":"weeks ago,","Fragments":["and"]},{"Key":"ago, and","Fragments":["was"]},{"Key":"and was","Fragments":["sort"]},{"Key":"was sort","Fragments":["of"]},{"Key":"of wondering","Fragments":["if"]},{"Key":"this pattern","Fragments":["really"]},{"Key":" occurs","Fragments":["so"]},{"Key":"occurs so","Fragments":["often"]},{"Key":"so often","Fragments":["to"]},{"Key":"often to","Fragments":["explain"]},{"Key":"to explain","Fragments":["its","my","here."]},{"Key":"explain its","Fragments":["existance"]},{"Key":"its existance","Fragments":["in"]},{"Key":"existance in","Fragments":["Boost."]},{"Key":"This exercise","Fragments":["just"]},{"Key":"exercise just","Fragments":["showed"]},{"Key":"just showed","Fragments":["to"]},{"Key":"showed to","Fragments":["me"]},{"Key":"me that","Fragments":["yes,","I","regular","one","the","it","it"]},{"Key":"that yes,","Fragments":["it"]},{"Key":"yes, it","Fragments":["is"]},{"Key":"is indeed","Fragments":["rather"]},{"Key":"indeed rather","Fragments":["useful!"]},{"Key":"I guess","Fragments":["sort","referencing","it's","this","it's","I","I","the","you're","I"]},{"Key":"guess sort","Fragments":["and"]},{"Key":"sort and","Fragments":["compare"]},{"Key":"and compare","Fragments":["would","it"]},{"Key":"compare would","Fragments":["be"]},{"Key":"be the","Fragments":["other","right","condition","most","only"]},{"Key":"However, is_permutation","Fragments":["seems"]},{"Key":"is_permutation seems","Fragments":["like"]},{"Key":"seems like","Fragments":["the","a","unnecessary,","kind","the","a"]},{"Key":"the perfect","Fragments":["fit"]},{"Key":"perfect fit","Fragments":["for","for"]},{"Key":"fit for","Fragments":["the","this"]},{"Key":" When","Fragments":["we","we","you","I"]},{"Key":"When we","Fragments":["have","do","do"]},{"Key":"we have","Fragments":["helper"]},{"Key":"have helper","Fragments":["functions"]},{"Key":"functions (or","Fragments":["classes)"]},{"Key":"(or classes)","Fragments":["in"]},{"Key":"classes) in","Fragments":["a"]},{"Key":"a translation","Fragments":["unit"]},{"Key":"translation unit","Fragments":["that","to","containing"]},{"Key":"unit that","Fragments":["we"]},{"Key":"to expose","Fragments":["outside"]},{"Key":"expose outside","Fragments":["that"]},{"Key":"outside that","Fragments":["translation"]},{"Key":"that translation","Fragments":["unit,"]},{"Key":"unit, we","Fragments":["need"]},{"Key":"we need","Fragments":["to","the","to"]},{"Key":"to give","Fragments":["them","\"priorities\"","you"]},{"Key":"give them","Fragments":["\"internal"]},{"Key":"them \"internal","Fragments":["linkage\"."]},{"Key":"\"internal linkage\".","Fragments":["That"]},{"Key":"linkage\". That","Fragments":["is,"]},{"Key":"That is,","Fragments":["we"]},{"Key":"is, we","Fragments":["want"]},{"Key":"we want","Fragments":["those"]},{"Key":"want those","Fragments":["definitions"]},{"Key":"those definitions","Fragments":["to"]},{"Key":"definitions to","Fragments":["be"]},{"Key":"be available","Fragments":["inside"]},{"Key":"available inside","Fragments":["the"]},{"Key":"the translation","Fragments":["unit,","unit","unit"]},{"Key":"unit, but","Fragments":["we"]},{"Key":"but we","Fragments":["don't"]},{"Key":"want anyone","Fragments":["outside"]},{"Key":"anyone outside","Fragments":["the"]},{"Key":"outside the","Fragments":["translation","source","loop.","`for`"]},{"Key":"unit to","Fragments":["be"]},{"Key":"to call","Fragments":["them.","me"]},{"Key":"As to","Fragments":["why"]},{"Key":"to why","Fragments":["an"]},{"Key":"why an","Fragments":["anonymous"]},{"Key":"is considered","Fragments":["better,","a","a","a"]},{"Key":"considered better,","Fragments":["see"]},{"Key":"better, see","Fragments":["this"]},{"Key":"see this","Fragments":["[stack"]},{"Key":"this [stack","Fragments":["overflow"]},{"Key":"[stack overflow","Fragments":["thread](http://stackoverflow.com/questions/4977252/why-unnamed-namespace-is-a-superior-alternative-to-static)."]},{"Key":"overflow thread](http://stackoverflow.com/questions/4977252/why-unnamed-namespace-is-a-superior-alternative-to-static).","Fragments":["Basically"]},{"Key":"thread](http://stackoverflow.com/questions/4977252/why-unnamed-namespace-is-a-superior-alternative-to-static). Basically","Fragments":["in"]},{"Key":"Basically in","Fragments":["C++11"]},{"Key":"in C++11","Fragments":["and"]},{"Key":"C++11 and","Fragments":["beyond,","more"]},{"Key":"and beyond,","Fragments":["namespaces"]},{"Key":"beyond, namespaces","Fragments":["are"]},{"Key":"are the","Fragments":["preferred","same","right","loop"]},{"Key":"preferred mechanism","Fragments":["for"]},{"Key":"mechanism for","Fragments":["controlling"]},{"Key":"for controlling","Fragments":["visibility."]},{"Key":" An","Fragments":["_anonymous_","issue"]},{"Key":"An _anonymous_","Fragments":["namespace"]},{"Key":"_anonymous_ namespace","Fragments":["is"]},{"Key":"in which","Fragments":["the"]},{"Key":"which the","Fragments":["enclosed"]},{"Key":"the enclosed","Fragments":["definitions"]},{"Key":"enclosed definitions","Fragments":["are"]},{"Key":"definitions are","Fragments":["only"]},{"Key":"are only","Fragments":["visible","numbers"]},{"Key":"only visible","Fragments":["inside"]},{"Key":"visible inside","Fragments":["the"]},{"Key":"unit containing","Fragments":["the"]},{"Key":"containing the","Fragments":["anonymous"]},{"Key":"the anonymous","Fragments":["namespace."]},{"Key":"using `trim_copy`","Fragments":["from"]},{"Key":"`trim_copy` from","Fragments":["Boost."]},{"Key":"- It's","Fragments":["quite","good"]},{"Key":"It's quite","Fragments":["short."]},{"Key":"- is_shouting","Fragments":["is"]},{"Key":"is_shouting is","Fragments":["fairly"]},{"Key":"is fairly","Fragments":["long","recent","robust."]},{"Key":"fairly long","Fragments":["and"]},{"Key":"long and","Fragments":["could","\"contains_alpha\"","\"contains_alpha\""]},{"Key":"and could","Fragments":["be"]},{"Key":"made more","Fragments":["\"functional\""]},{"Key":"- The","Fragments":["only"]},{"Key":"only function","Fragments":["that"]},{"Key":"that needs","Fragments":["to"]},{"Key":"needs to","Fragments":["be","make","be.","check"]},{"Key":"be public","Fragments":["is"]},{"Key":"public is","Fragments":["hey()."]},{"Key":"is hey().","Fragments":["Here"]},{"Key":"hey(). Here","Fragments":["everything"]},{"Key":"Here everything","Fragments":["is"]},{"Key":"everything is","Fragments":["public"]},{"Key":"is public","Fragments":["so"]},{"Key":"public so","Fragments":["to"]},{"Key":"so to","Fragments":["speak."]},{"Key":"- std::string","Fragments":["argument"]},{"Key":"argument could","Fragments":["be"]},{"Key":"reference in","Fragments":["all"]},{"Key":"in all","Fragments":["cases"]},{"Key":"all cases","Fragments":["so"]},{"Key":"cases so","Fragments":["that"]},{"Key":"it needn't","Fragments":["be"]},{"Key":"needn't be","Fragments":["copied"]},{"Key":"be copied","Fragments":["or"]},{"Key":"copied or","Fragments":["moved."]},{"Key":"- indexing","Fragments":["the"]},{"Key":"indexing the","Fragments":["string"]},{"Key":"is non-standard.","Fragments":["prefer"]},{"Key":"non-standard. prefer","Fragments":["iterators."]},{"Key":"There is","Fragments":["no","an","one","some","no","no","a"]},{"Key":"no need","Fragments":["for","for"]},{"Key":"need for","Fragments":["strip_punctuation","further","a","two"]},{"Key":"for strip_punctuation","Fragments":["as"]},{"Key":"strip_punctuation as","Fragments":["boost::tokenizer\u003c\u003e"]},{"Key":"as boost::tokenizer\u003c\u003e","Fragments":["already"]},{"Key":"boost::tokenizer\u003c\u003e already","Fragments":["takes"]},{"Key":"already takes","Fragments":["care"]},{"Key":"takes care","Fragments":["of"]},{"Key":"care of","Fragments":["that."]},{"Key":"In fact,","Fragments":["if","you"]},{"Key":"fact, if","Fragments":["you"]},{"Key":"use to_lower_copy","Fragments":["inside"]},{"Key":"to_lower_copy inside","Fragments":["of"]},{"Key":"the count","Fragments":["index","`word_count[word]"]},{"Key":"count index","Fragments":["operator,"]},{"Key":"index operator,","Fragments":["you"]},{"Key":"operator, you","Fragments":["can"]},{"Key":"can do","Fragments":["away","the"]},{"Key":" with","Fragments":["all"]},{"Key":"with all","Fragments":["the"]},{"Key":"the boilerplate","Fragments":["and"]},{"Key":"boilerplate and","Fragments":["just"]},{"Key":"and just","Fragments":["iterate","ignore","ignore","use"]},{"Key":"just iterate","Fragments":["over"]},{"Key":"of calling","Fragments":["boost::tokenizer\u003c\u003e"]},{"Key":"calling boost::tokenizer\u003c\u003e","Fragments":["directly."]},{"Key":"for (auto","Fragments":["\u0026\u0026word:","it","letter"]},{"Key":"(auto \u0026\u0026word:","Fragments":["tokenizer\u003c\u003e(text))"]},{"Key":"\u0026\u0026word: tokenizer\u003c\u003e(text))","Fragments":["count[to_lower_copy(word)]"]},{"Key":"tokenizer\u003c\u003e(text)) count[to_lower_copy(word)]","Fragments":["+="]},{"Key":"count[to_lower_copy(word)] +=","Fragments":["1;"]},{"Key":"considered std::is_permutation?","Fragments":["With"]},{"Key":"std::is_permutation? With","Fragments":["a"]},{"Key":"With a","Fragments":["custom","task"]},{"Key":"a custom","Fragments":["comparison","ctype."]},{"Key":"custom comparison","Fragments":["function"]},{"Key":"comparison function","Fragments":["that"]},{"Key":"that ignores","Fragments":["case,"]},{"Key":"ignores case,","Fragments":["you"]},{"Key":"case, you","Fragments":["can"]},{"Key":"can get","Fragments":["the"]},{"Key":"same effect","Fragments":["as"]},{"Key":"effect as","Fragments":["sorting,"]},{"Key":" without","Fragments":["requiring"]},{"Key":"without requiring","Fragments":["additional"]},{"Key":"requiring additional","Fragments":["storage."]},{"Key":"I find","Fragments":["the","the","this"]},{"Key":"find the","Fragments":["documentation","documentation","address","start","start","non-regex","full","shortest"]},{"Key":"the documentation","Fragments":["for","is","to"]},{"Key":"documentation for","Fragments":["`tokenizer`"]},{"Key":"for `tokenizer`","Fragments":["to"]},{"Key":"`tokenizer` to","Fragments":["be"]},{"Key":"be very","Fragments":["formal","surprised"]},{"Key":"very formal","Fragments":["and"]},{"Key":"formal and","Fragments":["difficult"]},{"Key":"and difficult","Fragments":["to"]},{"Key":"difficult to","Fragments":["understand","read","read."]},{"Key":"what exactly","Fragments":["it"]},{"Key":"exactly it","Fragments":["means"]},{"Key":"it means","Fragments":["in"]},{"Key":"means in","Fragments":["practice."]},{"Key":"in practice.","Fragments":["I"]},{"Key":"practice. I","Fragments":["removed"]},{"Key":"I removed","Fragments":["the"]},{"Key":"the `strip_punctuation`","Fragments":["and"]},{"Key":"`strip_punctuation` and","Fragments":["the"]},{"Key":"tests pass,","Fragments":["but"]},{"Key":"pass, but","Fragments":["I"]},{"Key":"don't know","Fragments":["that","how","regex","what","what"]},{"Key":"know that","Fragments":["things","you"]},{"Key":"that things","Fragments":["became"]},{"Key":"things became","Fragments":["\"clearer\""]},{"Key":"became \"clearer\"","Fragments":["for"]},{"Key":"\"clearer\" for","Fragments":["having"]},{"Key":"having done","Fragments":["that."]},{"Key":"done that.","Fragments":["It"]},{"Key":"that. It","Fragments":["depends"]},{"Key":"It depends","Fragments":["on"]},{"Key":"depends on","Fragments":["some","what","whether","your"]},{"Key":"on some","Fragments":["detailed"]},{"Key":"some detailed","Fragments":["knowledge"]},{"Key":"detailed knowledge","Fragments":["of"]},{"Key":"knowledge of","Fragments":["`boost::tokenizer`."]},{"Key":"Also, it's","Fragments":["not","great"]},{"Key":"it's not","Fragments":["clear","a","more"]},{"Key":"not clear","Fragments":["to","from"]},{"Key":"clear to","Fragments":["me"]},{"Key":"me why","Fragments":["`word`"]},{"Key":"why `word`","Fragments":["should"]},{"Key":"`word` should","Fragments":["be"]},{"Key":"be declared","Fragments":["as"]},{"Key":"an rvalue","Fragments":["reference."]},{"Key":"rvalue reference.","Fragments":["I","I"]},{"Key":"reference. I","Fragments":["was","could"]},{"Key":"was able","Fragments":["to","to"]},{"Key":"to pass","Fragments":["all","a","the","the","the","all","was","as"]},{"Key":"pass all","Fragments":["tests","the","the","the"]},{"Key":"all tests","Fragments":["without"]},{"Key":"tests without","Fragments":["the"]},{"Key":"the rvalue","Fragments":["reference."]},{"Key":"could pass","Fragments":["with"]},{"Key":"pass with","Fragments":["`auto"]},{"Key":"with `auto","Fragments":["word`"]},{"Key":"`auto word`","Fragments":["and"]},{"Key":"word` and","Fragments":["`auto"]},{"Key":"and `auto","Fragments":["const"]},{"Key":"`auto const","Fragments":["\u0026word`;"]},{"Key":"const \u0026word`;","Fragments":["I"]},{"Key":"\u0026word`; I","Fragments":["think"]},{"Key":"think I","Fragments":["prefer"]},{"Key":"I prefer","Fragments":["the","less"]},{"Key":"prefer the","Fragments":["latter"]},{"Key":"the latter","Fragments":["because","you"]},{"Key":"latter because","Fragments":["it"]},{"Key":"because it","Fragments":["makes","would","would","might","_reads_","was","is"]},{"Key":"makes it","Fragments":["clear","a","clear","more"]},{"Key":"it clear","Fragments":["I'm","what","when"]},{"Key":"clear I'm","Fragments":["not"]},{"Key":"not modifying","Fragments":["the"]},{"Key":" Anyway,","Fragments":["so","rip","this"]},{"Key":"Anyway, so","Fragments":["back"]},{"Key":"so back","Fragments":["to"]},{"Key":"back to","Fragments":["`tokenizer`.","the","one."]},{"Key":"to `tokenizer`.","Fragments":["It"]},{"Key":"`tokenizer`. It","Fragments":["does"]},{"Key":"It does","Fragments":["make","look","the"]},{"Key":"does make","Fragments":["for"]},{"Key":"make for","Fragments":["smaller"]},{"Key":"for smaller","Fragments":["code,"]},{"Key":"smaller code,","Fragments":["but"]},{"Key":"code, but","Fragments":["you","that"]},{"Key":"to comprehend","Fragments":["the"]},{"Key":"comprehend the","Fragments":["`tokenizer`"]},{"Key":"the `tokenizer`","Fragments":["class"]},{"Key":"`tokenizer` class","Fragments":["and"]},{"Key":"class and","Fragments":["I"]},{"Key":"documentation is","Fragments":["not"]},{"Key":"not so","Fragments":["great.","sure"]},{"Key":"so great.","Fragments":["I"]},{"Key":"great. I","Fragments":["had"]},{"Key":"to really","Fragments":["dig","dig"]},{"Key":"really dig","Fragments":["deep","into"]},{"Key":"dig deep","Fragments":["to"]},{"Key":"deep to","Fragments":["find"]},{"Key":"find out","Fragments":["that","whether"]},{"Key":"out that","Fragments":["punctuation","for"]},{"Key":"that punctuation","Fragments":["would"]},{"Key":"punctuation would","Fragments":["be"]},{"Key":"be considered","Fragments":["a","speech"]},{"Key":"considered a","Fragments":["delimiter","non-forceful","word","word"]},{"Key":"a delimiter","Fragments":["by"]},{"Key":"delimiter by","Fragments":["default"]},{"Key":"by default","Fragments":["and","and"]},{"Key":"default and","Fragments":["that","a","copy"]},{"Key":"that empty","Fragments":["tokens"]},{"Key":"empty tokens","Fragments":["would","by"]},{"Key":"tokens would","Fragments":["be"]},{"Key":"be discarded","Fragments":["by"]},{"Key":"discarded by","Fragments":["default."]},{"Key":"by default.","Fragments":["So"]},{"Key":"default. So","Fragments":["I'm"]},{"Key":"So I'm","Fragments":["conflicted","actually"]},{"Key":"I'm conflicted","Fragments":["as","as"]},{"Key":"conflicted as","Fragments":["to","to"]},{"Key":"as to","Fragments":["whether","whether","how"]},{"Key":"to whether","Fragments":["or","or"]},{"Key":"whether or","Fragments":["not","not"]},{"Key":"not it","Fragments":["makes"]},{"Key":"code clearer.","Fragments":["If"]},{"Key":"clearer. If","Fragments":["you're"]},{"Key":"If you're","Fragments":["familiar"]},{"Key":"you're familiar","Fragments":["with"]},{"Key":"familiar with","Fragments":["boost.tokenizer,","the","them","it."]},{"Key":"with boost.tokenizer,","Fragments":["then"]},{"Key":"boost.tokenizer, then","Fragments":["yes,"]},{"Key":"then yes,","Fragments":["but"]},{"Key":"yes, but","Fragments":["otherwise,"]},{"Key":"but otherwise,","Fragments":["I"]},{"Key":"otherwise, I","Fragments":["think"]},{"Key":"think the","Fragments":["answer","code","last","solution","reason","use","best"]},{"Key":"the answer","Fragments":["is","(e.g.,"]},{"Key":"answer is","Fragments":["no."]},{"Key":" `boost::tokenizer\u003c\u003e`","Fragments":["splits"]},{"Key":"`boost::tokenizer\u003c\u003e` splits","Fragments":["on"]},{"Key":"splits on","Fragments":["whitespace"]},{"Key":"on whitespace","Fragments":["_and_"]},{"Key":"whitespace _and_","Fragments":["punctuation,"]},{"Key":"_and_ punctuation,","Fragments":["dropping"]},{"Key":"punctuation, dropping","Fragments":["empty"]},{"Key":"dropping empty","Fragments":["tokens"]},{"Key":"tokens by","Fragments":["default,"]},{"Key":"by default,","Fragments":["but"]},{"Key":"default, but","Fragments":["I"]},{"Key":"didn't find","Fragments":["this","the"]},{"Key":"find this","Fragments":["obvious","out.","exercise,"]},{"Key":"this obvious","Fragments":["from"]},{"Key":"from [the","Fragments":["documentation](http://www.boost.org/doc/libs/1_55_0/libs/tokenizer/)"]},{"Key":"[the documentation](http://www.boost.org/doc/libs/1_55_0/libs/tokenizer/)","Fragments":["on"]},{"Key":"documentation](http://www.boost.org/doc/libs/1_55_0/libs/tokenizer/) on","Fragments":["a"]},{"Key":"a first","Fragments":["reading.","pass"]},{"Key":"first reading.","Fragments":["I"]},{"Key":"reading. I","Fragments":["had"]},{"Key":"dig into","Fragments":["the"]},{"Key":"documentation to","Fragments":["find"]},{"Key":"this out.","Fragments":["Therefore,"]},{"Key":"out. Therefore,","Fragments":["I'm"]},{"Key":"Therefore, I'm","Fragments":["conflicted"]},{"Key":"not this","Fragments":["version"]},{"Key":"version is","Fragments":["clearer","slower"]},{"Key":"is clearer","Fragments":["than","for"]},{"Key":"clearer than","Fragments":["my","this."]},{"Key":"my earlier","Fragments":["versions."]},{"Key":"earlier versions.","Fragments":["It"]},{"Key":"versions. It","Fragments":["is"]},{"Key":"is certainly","Fragments":["more"]},{"Key":"certainly more","Fragments":["concise."]},{"Key":" cool,","Fragments":["thank"]},{"Key":"cool, thank","Fragments":["you."]},{"Key":"think if","Fragments":["you"]},{"Key":"a library","Fragments":["function"]},{"Key":"library function","Fragments":["to"]},{"Key":"function to","Fragments":["solve","check","reduce"]},{"Key":"to solve","Fragments":["a","on","the","this","it"]},{"Key":"solve a","Fragments":["problem"]},{"Key":"a problem","Fragments":["you'd","because"]},{"Key":"problem you'd","Fragments":["have"]},{"Key":"you'd have","Fragments":["to"]},{"Key":"solve on","Fragments":["your"]},{"Key":"on your","Fragments":["own","preferences","environment,"]},{"Key":"your own","Fragments":["otherwise,"]},{"Key":"own otherwise,","Fragments":["you"]},{"Key":"otherwise, you","Fragments":["will"]},{"Key":"you will","Fragments":["always,","see","be"]},{"Key":"will always,","Fragments":["or"]},{"Key":"always, or","Fragments":["most"]},{"Key":"or most","Fragments":["of"]},{"Key":"most of","Fragments":["the","the","the"]},{"Key":"the time,","Fragments":["need"]},{"Key":"time, need","Fragments":["to"]},{"Key":"quite exactly","Fragments":["how"]},{"Key":"exactly how","Fragments":["to"]},{"Key":"use that","Fragments":["library","library"]},{"Key":"that library","Fragments":["function.","in"]},{"Key":"library function.","Fragments":["To"]},{"Key":"function. To","Fragments":["reuse"]},{"Key":"To reuse","Fragments":["someone"]},{"Key":"reuse someone","Fragments":["elses"]},{"Key":"someone elses","Fragments":["code"]},{"Key":"elses code","Fragments":["does"]},{"Key":"not free","Fragments":["you"]},{"Key":"free you","Fragments":["from"]},{"Key":" understanding","Fragments":["the"]},{"Key":"understanding the","Fragments":["problem"]},{"Key":"problem domain","Fragments":["and","very","better"]},{"Key":"domain and","Fragments":["knowing"]},{"Key":"and knowing","Fragments":["how"]},{"Key":"knowing how","Fragments":["to"]},{"Key":"use the","Fragments":["actual","`_copy`","C++11","gcc","boost","new","bob::hey","*exercism","*exercism","range","unnamed","functional","same"]},{"Key":"the actual","Fragments":["API","type."]},{"Key":"actual API","Fragments":["that"]},{"Key":"API that","Fragments":["was"]},{"Key":"that was","Fragments":["given","getting","an","happening","not","to"]},{"Key":"was given","Fragments":["to"]},{"Key":"given to","Fragments":["you."]},{"Key":" But","Fragments":["I","let","why","let's","I","the","this","usually","I","it","that's","even","let","instead","then"]},{"Key":"I agree,","Fragments":["the","and"]},{"Key":"agree, the","Fragments":["boost::tokenizer\u003c\u003e"]},{"Key":"the boost::tokenizer\u003c\u003e","Fragments":["documentation"]},{"Key":"boost::tokenizer\u003c\u003e documentation","Fragments":["isn't"]},{"Key":"documentation isn't","Fragments":["particularily"]},{"Key":"isn't particularily","Fragments":["user"]},{"Key":"particularily user","Fragments":["friendly."]},{"Key":" Another","Fragments":["possibility","note:"]},{"Key":"Another possibility","Fragments":["for"]},{"Key":"possibility for","Fragments":["the"]},{"Key":"the interface","Fragments":["would"]},{"Key":"interface would","Fragments":["be"]},{"Key":"a sign","Fragments":["function","that"]},{"Key":"sign function","Fragments":["with"]},{"Key":"function with","Fragments":["default"]},{"Key":"with default","Fragments":["end","arguments."]},{"Key":"default end","Fragments":["argument"]},{"Key":"end argument","Fragments":["of"]},{"Key":"string sing(unsigned","Fragments":["begin,"]},{"Key":"sing(unsigned begin,","Fragments":["unsigned"]},{"Key":"begin, unsigned","Fragments":["end"]},{"Key":"unsigned end","Fragments":["="]},{"Key":"end =","Fragments":["0)"]},{"Key":" which","Fragments":["avoids","has","means"]},{"Key":"which avoids","Fragments":["having"]},{"Key":"avoids having","Fragments":["to"]},{"Key":"to define","Fragments":["the","several"]},{"Key":"define the","Fragments":["one-parameter"]},{"Key":"the one-parameter","Fragments":["version"]},{"Key":"one-parameter version","Fragments":["explicitly."]},{"Key":"is likely","Fragments":["my","my"]},{"Key":"likely my","Fragments":["final","final"]},{"Key":"my final","Fragments":["version.","version."]},{"Key":"The predicate","Fragments":["to"]},{"Key":"predicate to","Fragments":["copy_if"]},{"Key":"to copy_if","Fragments":["could"]},{"Key":"copy_if could","Fragments":["easily"]},{"Key":"could easily","Fragments":["be"]},{"Key":"easily be","Fragments":["extracted"]},{"Key":"be extracted","Fragments":["to"]},{"Key":"extracted to","Fragments":["a"]},{"Key":"a unary","Fragments":["(member)"]},{"Key":"unary (member)","Fragments":["function,"]},{"Key":" or","Fragments":["into"]},{"Key":"or into","Fragments":["the"]},{"Key":"function call","Fragments":["operator,"]},{"Key":"call operator,","Fragments":["making"]},{"Key":"operator, making","Fragments":["the"]},{"Key":"making the","Fragments":["anagram","code","code","default","deductions","whole","entire","other"]},{"Key":"the anagram","Fragments":["into"]},{"Key":"anagram into","Fragments":["a"]},{"Key":"However, the","Fragments":["nested"]},{"Key":"the nested","Fragments":["lambda"]},{"Key":"nested lambda","Fragments":["is"]},{"Key":"lambda is","Fragments":["nice"]},{"Key":"is nice","Fragments":["in","for","and"]},{"Key":"nice in","Fragments":["itself,"]},{"Key":"in itself,","Fragments":["so"]},{"Key":"itself, so","Fragments":["as"]},{"Key":"so as","Fragments":["said,"]},{"Key":"as said,","Fragments":["I"]},{"Key":"said, I","Fragments":["will","suggest"]},{"Key":"I will","Fragments":["likely","go","make","implement"]},{"Key":"will likely","Fragments":["keep"]},{"Key":"likely keep","Fragments":["it"]},{"Key":"keep it","Fragments":["that","easy"]},{"Key":"it that","Fragments":["way."]},{"Key":" Why","Fragments":["not","isn't","aren't","don't","are","do","are","not"]},{"Key":"Why not","Fragments":["use","check","just"]},{"Key":"not use","Fragments":["appropriately","C++'s","the","\"algorithm\""]},{"Key":"use appropriately","Fragments":["named","named"]},{"Key":"appropriately named","Fragments":["functions","boolean"]},{"Key":"named functions","Fragments":["instead"]},{"Key":"functions instead","Fragments":["of","of"]},{"Key":"Looks great,","Fragments":["very"]},{"Key":"great, very","Fragments":["fast."]},{"Key":"very fast.","Fragments":["Two"]},{"Key":"fast. Two","Fragments":["very"]},{"Key":"Two very","Fragments":["minor"]},{"Key":"very minor","Fragments":["things:","thing,"]},{"Key":"spaces at","Fragments":["the","the","the"]},{"Key":" 2","Fragments":[")"]},{"Key":"2 )","Fragments":["You","c"]},{"Key":") You","Fragments":["could"]},{"Key":"could use","Fragments":["```","the","an","`using","regex","_stringstream_","regex","a","isspace(c)","a","it","to"]},{"Key":"(const auto\u0026","Fragments":["value"]},{"Key":"auto\u0026 value","Fragments":[":"]},{"Key":"value :","Fragments":["msg)"]},{"Key":"loop instead","Fragments":["of"]},{"Key":" Better!","Fragments":["Now"]},{"Key":"Better! Now","Fragments":["`hey`"]},{"Key":"Now `hey`","Fragments":["has"]},{"Key":"`hey` has","Fragments":["code"]},{"Key":"has code","Fragments":["that"]},{"Key":"that all","Fragments":["operates"]},{"Key":"all operates","Fragments":["at"]},{"Key":"operates at","Fragments":["the"]},{"Key":"What happens","Fragments":["if","if","if","if"]},{"Key":"if we","Fragments":["test","did","do","just","don't"]},{"Key":"we test","Fragments":["for","for"]},{"Key":"for silence","Fragments":["before"]},{"Key":"silence before","Fragments":["we"]},{"Key":"before we","Fragments":["test"]},{"Key":"for shouting?","Fragments":["Do"]},{"Key":"shouting? Do","Fragments":["we"]},{"Key":"Do we","Fragments":["need"]},{"Key":"the intermediate","Fragments":["variable"]},{"Key":"intermediate variable","Fragments":["`testStatement`"]},{"Key":"variable `testStatement`","Fragments":["anymore?"]},{"Key":"`testStatement` anymore?","Fragments":["Trimming"]},{"Key":"anymore? Trimming","Fragments":["feels"]},{"Key":"Trimming feels","Fragments":["like"]},{"Key":"like something","Fragments":["we"]},{"Key":"something we","Fragments":["need"]},{"Key":"do to","Fragments":["test"]},{"Key":"The loop","Fragments":["in"]},{"Key":"loop in","Fragments":["lines","Python,"]},{"Key":"in lines","Fragments":["13-20","5-6:"]},{"Key":"lines 13-20","Fragments":["has"]},{"Key":"13-20 has","Fragments":["pretty"]},{"Key":"has pretty","Fragments":["low","nice"]},{"Key":"pretty low","Fragments":["[cohesion](http://en.wikipedia.org/wiki/Cohesion_(computer_science))."]},{"Key":"low [cohesion](http://en.wikipedia.org/wiki/Cohesion_(computer_science)).","Fragments":["It's"]},{"Key":"[cohesion](http://en.wikipedia.org/wiki/Cohesion_(computer_science)). It's","Fragments":["doing"]},{"Key":"It's doing","Fragments":["two"]},{"Key":"doing two","Fragments":["tests"]},{"Key":"two tests","Fragments":["one"]},{"Key":"tests one","Fragments":["one"]},{"Key":"one one","Fragments":["of"]},{"Key":"of them","Fragments":["causes","regex_match","is"]},{"Key":"them causes","Fragments":["an"]},{"Key":"causes an","Fragments":["early"]},{"Key":"an early","Fragments":["return."]},{"Key":"early return.","Fragments":["Have"]},{"Key":"return. Have","Fragments":["you"]},{"Key":"using standard","Fragments":["library"]},{"Key":"library algorithms","Fragments":["or"]},{"Key":"algorithms or","Fragments":["methods"]},{"Key":"or methods","Fragments":["on"]},{"Key":"on `std::string`","Fragments":["to"]},{"Key":"`std::string` to","Fragments":["make"]},{"Key":"it clearer","Fragments":["and"]},{"Key":"clearer and","Fragments":["more","has"]},{"Key":"and more","Fragments":["cohesive?","modern","concise.","understandable","readable."]},{"Key":"more cohesive?","Fragments":["Sometimes"]},{"Key":"cohesive? Sometimes","Fragments":["two"]},{"Key":"Sometimes two","Fragments":["loops"]},{"Key":"two loops","Fragments":["that"]},{"Key":"loops that","Fragments":["do"]},{"Key":"that do","Fragments":["one"]},{"Key":"do one","Fragments":["thing","thing."]},{"Key":"one thing","Fragments":["each","for","can"]},{"Key":"thing each","Fragments":["leads"]},{"Key":"each leads","Fragments":["to"]},{"Key":"leads to","Fragments":["more"]},{"Key":"to more","Fragments":["expressive"]},{"Key":"more expressive","Fragments":["code","to"]},{"Key":"expressive code","Fragments":["than"]},{"Key":"code than","Fragments":["one"]},{"Key":"than one","Fragments":["loop"]},{"Key":"one loop","Fragments":["that"]},{"Key":"loop that","Fragments":["does"]},{"Key":"that does","Fragments":["two"]},{"Key":"does two","Fragments":["things"]},{"Key":"two things","Fragments":["intertwined."]},{"Key":" Yeah,","Fragments":["I"]},{"Key":"Yeah, I","Fragments":["have"]},{"Key":"a love/hate","Fragments":["relationship"]},{"Key":"love/hate relationship","Fragments":["with"]},{"Key":"relationship with","Fragments":["default"]},{"Key":"default arguments.","Fragments":["Over"]},{"Key":"arguments. Over","Fragments":["time"]},{"Key":"Over time","Fragments":["I've"]},{"Key":"time I've","Fragments":["come"]},{"Key":"I've come","Fragments":["to"]},{"Key":"to lean","Fragments":["on"]},{"Key":"lean on","Fragments":["explicit"]},{"Key":"on explicit","Fragments":["overloads"]},{"Key":"explicit overloads","Fragments":["instead"]},{"Key":"overloads instead","Fragments":["of"]},{"Key":"of default","Fragments":["arguments,"]},{"Key":"default arguments,","Fragments":["but"]},{"Key":"arguments, but","Fragments":["in"]},{"Key":"but in","Fragments":["this","a"]},{"Key":"this case","Fragments":["it","only"]},{"Key":"case it","Fragments":["might"]},{"Key":"it might","Fragments":["be","be","give","be","be"]},{"Key":"might be","Fragments":["better","good","better","more","able","more"]},{"Key":"be better","Fragments":["with","by","to","practice/more","(or"]},{"Key":"better with","Fragments":["the"]},{"Key":"the default","Fragments":["argument.","constructor","value","(std::allocator)","implementation","constructor"]},{"Key":"don't know,","Fragments":["but"]},{"Key":"know, but","Fragments":["it"]},{"Key":"seems I","Fragments":["copy"]},{"Key":"I copy","Fragments":["to"]},{"Key":"copy to","Fragments":["mutch"]},{"Key":"to mutch","Fragments":["the"]},{"Key":"mutch the","Fragments":["string"]},{"Key":"string told","Fragments":["to"]},{"Key":"told to","Fragments":["Bob"]},{"Key":"to Bob","Fragments":["-"]},{"Key":"Bob -","Fragments":["at","now"]},{"Key":"- at","Fragments":["least","least"]},{"Key":"least to","Fragments":["three"]},{"Key":"to three","Fragments":["different"]},{"Key":"three different","Fragments":["locations.","solutions:"]},{"Key":"different locations.","Fragments":["But"]},{"Key":"locations. But","Fragments":["I"]},{"Key":"think this","Fragments":["way","matches","code","is","is","solution"]},{"Key":"this way","Fragments":["what","is","I","at"]},{"Key":"way what","Fragments":["I'm"]},{"Key":"what I'm","Fragments":["doing"]},{"Key":"I'm doing","Fragments":["gets","something"]},{"Key":"doing gets","Fragments":["pretty"]},{"Key":"gets pretty","Fragments":["readable"]},{"Key":"pretty readable","Fragments":["and"]},{"Key":"readable and","Fragments":["understandable.","less","robust"]},{"Key":"Also, as","Fragments":["there"]},{"Key":"as there","Fragments":["is","are"]},{"Key":"is already","Fragments":["a","correct."]},{"Key":"already a","Fragments":["dependency"]},{"Key":"a dependency","Fragments":["on"]},{"Key":"dependency on","Fragments":["boost,","\u003cstring\u003e","Boost"]},{"Key":"on boost,","Fragments":["I've"]},{"Key":"boost, I've","Fragments":["used"]},{"Key":"I've used","Fragments":["its"]},{"Key":"used its","Fragments":["string"]},{"Key":"its string","Fragments":["algorithms"]},{"Key":"string algorithms","Fragments":["(which"]},{"Key":"algorithms (which","Fragments":["are"]},{"Key":"(which are","Fragments":["new"]},{"Key":"are new","Fragments":["to"]},{"Key":"new to","Fragments":["me,","C++,"]},{"Key":"to me,","Fragments":["indeed!).","but"]},{"Key":" Agreed!","Fragments":["Just"]},{"Key":"Agreed! Just","Fragments":["submitted"]},{"Key":"Just submitted","Fragments":["again"]},{"Key":"submitted again","Fragments":["fixing"]},{"Key":"again fixing","Fragments":["these"]},{"Key":"fixing these","Fragments":["problems."]},{"Key":"think splitting","Fragments":["tokenization"]},{"Key":"splitting tokenization","Fragments":["and"]},{"Key":"tokenization and","Fragments":["word"]},{"Key":"and word","Fragments":["counting"]},{"Key":"word counting","Fragments":["complicates"]},{"Key":"counting complicates","Fragments":["the"]},{"Key":"complicates the","Fragments":["code"]},{"Key":"code quite","Fragments":["a","a"]},{"Key":"But let","Fragments":["me","me"]},{"Key":"let me","Fragments":["do","know","move","know"]},{"Key":"me do","Fragments":["what"]},{"Key":"do what","Fragments":["this","they","they","it"]},{"Key":"what this","Fragments":["site","program","part"]},{"Key":"this site","Fragments":["asks"]},{"Key":"site asks","Fragments":["for,"]},{"Key":"asks for,","Fragments":["nitpicking."]},{"Key":" `string","Fragments":["word"]},{"Key":"`string word","Fragments":["=","="]},{"Key":"word =","Fragments":["wordlist[wordlist.size()-1];`","wordlist.back();`","rit-\u003estr();`","rit++-\u003estr();`","std::string("]},{"Key":"= wordlist[wordlist.size()-1];`","Fragments":["could"]},{"Key":"wordlist[wordlist.size()-1];` could","Fragments":["be"]},{"Key":"be `string","Fragments":["word"]},{"Key":" ,","Fragments":["`"]},{"Key":", `","Fragments":["wordlist.erase(wordlist.end());`"]},{"Key":"` wordlist.erase(wordlist.end());`","Fragments":["seems"]},{"Key":"wordlist.erase(wordlist.end());` seems","Fragments":["wrong"]},{"Key":"seems wrong","Fragments":["and"]},{"Key":"wrong and","Fragments":["should","wasn't"]},{"Key":"and should","Fragments":["probably"]},{"Key":"should probably","Fragments":["be"]},{"Key":"probably be","Fragments":["`wordlist.erase(wordlist.end()-1);`","to","a","a"]},{"Key":"be `wordlist.erase(wordlist.end()-1);`","Fragments":["or"]},{"Key":"`wordlist.erase(wordlist.end()-1);` or","Fragments":["better"]},{"Key":"or better","Fragments":["yet"]},{"Key":"better yet","Fragments":["`wordlist.pop_back();`"]},{"Key":"Also, in","Fragments":["general"]},{"Key":"in general","Fragments":["that"]},{"Key":"general that","Fragments":["while"]},{"Key":"that while","Fragments":["loop"]},{"Key":"while loop","Fragments":["is"]},{"Key":"a strange","Fragments":["way"]},{"Key":"strange way","Fragments":["to"]},{"Key":"to iterate","Fragments":["over","over","over"]},{"Key":"over every","Fragments":["element"]},{"Key":"every element","Fragments":["(there's"]},{"Key":"element (there's","Fragments":["no"]},{"Key":"(there's no","Fragments":["real"]},{"Key":"no real","Fragments":["reason","effort"]},{"Key":"real reason","Fragments":["to"]},{"Key":"reason to","Fragments":["delete","use","have","have"]},{"Key":"to delete","Fragments":["each","line"]},{"Key":"delete each","Fragments":["element)"]},{"Key":"rather roundabout","Fragments":["way"]},{"Key":"roundabout way","Fragments":["to"]},{"Key":"to increase","Fragments":["the","readability.","readability."]},{"Key":"increase the","Fragments":["count"]},{"Key":"count `word_count[word]","Fragments":["="]},{"Key":"`word_count[word] =","Fragments":["(word_count.find(word)-\u003esecond"]},{"Key":"= (word_count.find(word)-\u003esecond","Fragments":["+"]},{"Key":"(word_count.find(word)-\u003esecond +","Fragments":["1);`,"]},{"Key":"+ 1);`,","Fragments":["I"]},{"Key":"1);`, I","Fragments":["couldn't"]},{"Key":"I couldn't","Fragments":["really","come"]},{"Key":"couldn't really","Fragments":["find"]},{"Key":"really find","Fragments":["out"]},{"Key":"out whether","Fragments":["this"]},{"Key":"whether this","Fragments":["is","is"]},{"Key":"behavior or","Fragments":["not"]},{"Key":"not but","Fragments":["the"]},{"Key":"but the","Fragments":["fact","number","exercise","concept","unit","gain","one","way","fact"]},{"Key":"I wasn't","Fragments":["sure","even","sure"]},{"Key":"wasn't sure","Fragments":["maybe","about"]},{"Key":"sure maybe","Fragments":["a"]},{"Key":"maybe a","Fragments":["sign"]},{"Key":"sign that","Fragments":["this"]},{"Key":"that this","Fragments":["should","would","has","solution"]},{"Key":"this should","Fragments":["be"]},{"Key":"be simplified.","Fragments":["The"]},{"Key":"simplified. The","Fragments":["expression"]},{"Key":"The expression","Fragments":["`word_count[word]`"]},{"Key":"expression `word_count[word]`","Fragments":["can"]},{"Key":"`word_count[word]` can","Fragments":["implicitly"]},{"Key":"can implicitly","Fragments":["insert"]},{"Key":"implicitly insert","Fragments":["`word`"]},{"Key":"insert `word`","Fragments":["into"]},{"Key":"`word` into","Fragments":["the"]},{"Key":"the map,","Fragments":["this"]},{"Key":"map, this","Fragments":["element"]},{"Key":"this element","Fragments":["is"]},{"Key":"element is","Fragments":["then"]},{"Key":"is then","Fragments":["read","pretty","checked"]},{"Key":"then read","Fragments":["withing"]},{"Key":"read withing","Fragments":["the"]},{"Key":"withing the","Fragments":["same"]},{"Key":"same expression","Fragments":["on"]},{"Key":"expression on","Fragments":["the"]},{"Key":"the right","Fragments":["side","way","choice","choice.","thing.","way","content"]},{"Key":"right side","Fragments":["`word_count.find(word)`."]},{"Key":" Removing","Fragments":["the"]},{"Key":"Removing the","Fragments":["spaces"]},{"Key":"the spaces","Fragments":["in"]},{"Key":"spaces in","Fragments":["the"]},{"Key":"the initial","Fragments":["string"]},{"Key":"initial string","Fragments":["has"]},{"Key":"string has","Fragments":["two","no","to","to"]},{"Key":"has two","Fragments":["advantages."]},{"Key":"two advantages.","Fragments":["First,"]},{"Key":"advantages. First,","Fragments":["it"]},{"Key":"First, it","Fragments":["simplifies"]},{"Key":"it simplifies","Fragments":["testing"]},{"Key":"simplifies testing","Fragments":["whether"]},{"Key":"testing whether","Fragments":["the"]},{"Key":"whether the","Fragments":["string","message","message","message","string","string"]},{"Key":"is empty","Fragments":["or","or"]},{"Key":"empty or","Fragments":["full","consists"]},{"Key":"or full","Fragments":["of"]},{"Key":"full of","Fragments":["spaces."]},{"Key":"of spaces.","Fragments":["Second,"]},{"Key":"spaces. Second,","Fragments":["it"]},{"Key":"Second, it","Fragments":["allows"]},{"Key":"it allows","Fragments":["to","to"]},{"Key":"allows to","Fragments":["have"]},{"Key":"question with","Fragments":["spaces"]},{"Key":"with spaces","Fragments":["after","and"]},{"Key":"considered someone","Fragments":["is"]},{"Key":"someone is","Fragments":["shouting","shouting.","shouting","yelling"]},{"Key":"is shouting","Fragments":["when","and","at"]},{"Key":"shouting when","Fragments":["there","I"]},{"Key":"when there","Fragments":["are","is","are"]},{"Key":"are more","Fragments":["upper","scalable"]},{"Key":"more upper","Fragments":["cases"]},{"Key":"upper cases","Fragments":["characters","characters.","characters."]},{"Key":"cases characters","Fragments":["than"]},{"Key":"characters than","Fragments":["lower"]},{"Key":"than lower","Fragments":["cases,"]},{"Key":"lower cases,","Fragments":["to"]},{"Key":"cases, to","Fragments":["allow"]},{"Key":"to allow","Fragments":["for"]},{"Key":"allow for","Fragments":["typos."]},{"Key":"The way","Fragments":["that","I","I","above,"]},{"Key":"you're doing","Fragments":["this,"]},{"Key":"doing this,","Fragments":["I'd"]},{"Key":"this, I'd","Fragments":["use"]},{"Key":"I'd use","Fragments":["switch"]},{"Key":"switch statement","Fragments":["in","to","to","instead"]},{"Key":"statement in","Fragments":["`hey`."]},{"Key":"But why","Fragments":["not"]},{"Key":"why not","Fragments":["just"]},{"Key":"not just","Fragments":["use","for","get"]},{"Key":"named boolean","Fragments":["functions"]},{"Key":"boolean functions","Fragments":["in","are","and"]},{"Key":"`hey` instead","Fragments":["of"]},{"Key":"of categorizing","Fragments":["in"]},{"Key":"categorizing in","Fragments":["a"]},{"Key":"had much","Fragments":["fun"]},{"Key":"much fun","Fragments":["learning"]},{"Key":"fun learning","Fragments":["how"]},{"Key":"learning how","Fragments":["to"]},{"Key":"use split","Fragments":["and"]},{"Key":"split and","Fragments":["accumulate."]},{"Key":" Indeed","Fragments":["removing"]},{"Key":"Indeed removing","Fragments":["spaces"]},{"Key":"removing spaces","Fragments":["from"]},{"Key":"spaces from","Fragments":["the"]},{"Key":"the very","Fragments":["start","first","least"]},{"Key":"very start","Fragments":["seems"]},{"Key":"start seems","Fragments":["to"]},{"Key":"right way","Fragments":["to","to"]},{"Key":"to deal","Fragments":["with"]},{"Key":"deal with","Fragments":["this","spaces,"]},{"Key":"with this","Fragments":["(and","implementation,","particular","sites","exercise"]},{"Key":"this (and","Fragments":["not"]},{"Key":"(and not","Fragments":["only"]},{"Key":"not only","Fragments":["when","saying"]},{"Key":"only when","Fragments":["considering"]},{"Key":"when considering","Fragments":["asking"]},{"Key":"considering asking","Fragments":["nothing)."]},{"Key":" Also","Fragments":["you've","as","I","you"]},{"Key":"Also you've","Fragments":["found"]},{"Key":"you've found","Fragments":["a"]},{"Key":"found a","Fragments":["good","better"]},{"Key":"good way","Fragments":["to","to"]},{"Key":"check if","Fragments":["one","the","for","someone","bob","the","`total_upper`","the","it's","a","the","it's","it's","a","the"]},{"Key":"if one","Fragments":["is","of"]},{"Key":"one is","Fragments":["shouting"]},{"Key":"shouting and","Fragments":["not","shouting","if"]},{"Key":"only saying","Fragments":["punctuations"]},{"Key":"saying punctuations","Fragments":["marks"]},{"Key":"punctuations marks","Fragments":["(I"]},{"Key":"marks (I","Fragments":["mean"]},{"Key":"(I mean","Fragments":["nb_upper"]},{"Key":"mean nb_upper","Fragments":["\u003e"]},{"Key":"nb_upper \u003e","Fragments":["nb_lower)."]},{"Key":"is \"HE","Fragments":["IS"]},{"Key":"\"HE IS","Fragments":["wet\"."]},{"Key":"IS wet\".","Fragments":["That's"]},{"Key":"wet\". That's","Fragments":["not"]},{"Key":"That's not","Fragments":["shouting,"]},{"Key":"not shouting,","Fragments":["but"]},{"Key":"shouting, but","Fragments":["the"]},{"Key":"the number","Fragments":["of","of","of","of"]},{"Key":"number of","Fragments":["uppers","lowers.","`true`s","other","letter","other","times","letters"]},{"Key":"of uppers","Fragments":["is"]},{"Key":"uppers is","Fragments":["larger"]},{"Key":"is larger","Fragments":["than"]},{"Key":" It","Fragments":["feels","looks","could","may","is","does","seemed","would","is"]},{"Key":"like `hey`","Fragments":["is"]},{"Key":"is filled","Fragments":["with"]},{"Key":"filled with","Fragments":["low-level"]},{"Key":"with low-level","Fragments":["details"]},{"Key":"details and","Fragments":["doesn't","I"]},{"Key":"and doesn't","Fragments":["reveal"]},{"Key":"doesn't reveal","Fragments":["the"]},{"Key":"reveal the","Fragments":["problem","higher"]},{"Key":"domain very","Fragments":["well."]},{"Key":"very well.","Fragments":["What"]},{"Key":"well. What","Fragments":["if"]},{"Key":"What if","Fragments":["we","the","someone"]},{"Key":"we did","Fragments":["[Compose"]},{"Key":"did [Compose","Fragments":["Method](http://www.industriallogic.com/xp/refactoring/composeMethod.html)"]},{"Key":"[Compose Method](http://www.industriallogic.com/xp/refactoring/composeMethod.html)","Fragments":["on"]},{"Key":"Method](http://www.industriallogic.com/xp/refactoring/composeMethod.html) on","Fragments":["`hey`"]},{"Key":"on `hey`","Fragments":["to"]},{"Key":"`hey` to","Fragments":["reveal"]},{"Key":"to reveal","Fragments":["the"]},{"Key":"the higher","Fragments":["level"]},{"Key":"higher level","Fragments":["structure"]},{"Key":"level structure","Fragments":["more"]},{"Key":"structure more","Fragments":["readably"]},{"Key":"more readably","Fragments":["and"]},{"Key":"readably and","Fragments":["delegated"]},{"Key":"and delegated","Fragments":["details"]},{"Key":"delegated details","Fragments":["to"]},{"Key":"details to","Fragments":["helper"]},{"Key":"to helper","Fragments":["functions?"]},{"Key":" Two","Fragments":["things","things:","comments:"]},{"Key":"Two things","Fragments":["come"]},{"Key":"to mind","Fragments":["when"]},{"Key":"mind when","Fragments":["looking"]},{"Key":"when looking","Fragments":["at"]},{"Key":"* While","Fragments":["it"]},{"Key":"it doesn't","Fragments":["really","matter","work.","matter","need"]},{"Key":"doesn't really","Fragments":["matter"]},{"Key":"really matter","Fragments":["how"]},{"Key":"matter how","Fragments":["you"]},{"Key":"you create","Fragments":["a"]},{"Key":"a namespace,","Fragments":["a","instead","i.e."]},{"Key":"namespace, a","Fragments":["single"]},{"Key":"a single","Fragments":["function","call","task.","function,","match","function","uppercase","pass","execution"]},{"Key":"single function","Fragments":["without","at"]},{"Key":"function without","Fragments":["a"]},{"Key":"without a","Fragments":["need"]},{"Key":"a need","Fragments":["to"]},{"Key":"to hold","Fragments":["any","any"]},{"Key":"hold any","Fragments":["value","strings"]},{"Key":"any value","Fragments":["is"]},{"Key":"value is","Fragments":["probably","[value-initialized](http://en.cppreference.com/w/cpp/container/map/operator_at),","found."]},{"Key":"is probably","Fragments":["better","doable,","overkill","the"]},{"Key":"probably better","Fragments":["off"]},{"Key":"better off","Fragments":["in"]},{"Key":"off in","Fragments":["a"]},{"Key":"namespace, instead","Fragments":["of"]},{"Key":"* For","Fragments":["good"]},{"Key":"For good","Fragments":["style,"]},{"Key":"good style,","Fragments":["try"]},{"Key":"style, try","Fragments":["to"]},{"Key":"avoid \"using","Fragments":["namespace"]},{"Key":"\"using namespace","Fragments":["...\"","std;\""]},{"Key":"namespace ...\"","Fragments":["in"]},{"Key":"...\" in","Fragments":["header"]},{"Key":"in header","Fragments":["files."]},{"Key":"header files.","Fragments":["Only"]},{"Key":"files. Only","Fragments":["implementations"]},{"Key":"Only implementations","Fragments":["should"]},{"Key":"implementations should","Fragments":["do"]},{"Key":"should do","Fragments":["that,"]},{"Key":"do that,","Fragments":["so","what","we"]},{"Key":"that, so","Fragments":["that"]},{"Key":"the used","Fragments":["namespace"]},{"Key":"used namespace","Fragments":["doesn't"]},{"Key":"namespace doesn't","Fragments":["propagate","need"]},{"Key":"doesn't propagate","Fragments":["to"]},{"Key":"propagate to","Fragments":["users"]},{"Key":"to users","Fragments":["of"]},{"Key":"users of","Fragments":["that"]},{"Key":"of that","Fragments":["header.","function.","versus","many"]},{"Key":"that header.","Fragments":["In"]},{"Key":"header. In","Fragments":["the"]},{"Key":"In the","Fragments":["exercism.io","second","\"hey\""]},{"Key":"the exercism.io","Fragments":["exercises,"]},{"Key":"exercism.io exercises,","Fragments":["we"]},{"Key":"exercises, we","Fragments":["always"]},{"Key":"we always","Fragments":["submit"]},{"Key":"always submit","Fragments":["one"]},{"Key":"submit one","Fragments":["file."]},{"Key":"one file.","Fragments":["So"]},{"Key":"file. So","Fragments":["strictly"]},{"Key":"So strictly","Fragments":["speaking,"]},{"Key":"strictly speaking,","Fragments":["this"]},{"Key":"speaking, this","Fragments":["doesn't"]},{"Key":"this doesn't","Fragments":["matter."]},{"Key":"doesn't matter.","Fragments":["However,"]},{"Key":"matter. However,","Fragments":["try"]},{"Key":"However, try","Fragments":["to"]},{"Key":"keep this","Fragments":["issue","as","code"]},{"Key":"this issue","Fragments":["in"]},{"Key":"issue in","Fragments":["mind,"]},{"Key":"in mind,","Fragments":["it"]},{"Key":"mind, it","Fragments":["will"]},{"Key":"it will","Fragments":["bite","not","be","use","append"]},{"Key":"will bite","Fragments":["you"]},{"Key":"bite you","Fragments":["if"]},{"Key":"you if","Fragments":["you"]},{"Key":"you start","Fragments":["to","unit_number"]},{"Key":"start to","Fragments":["define","look"]},{"Key":"define several","Fragments":["headers"]},{"Key":"several headers","Fragments":["and"]},{"Key":"headers and","Fragments":["cpp"]},{"Key":"and cpp","Fragments":["files"]},{"Key":"cpp files","Fragments":["for"]},{"Key":"for a","Fragments":["bigger","class,","non-alpha","simple","simple","static","super","shout,","shout","shout","question","question","shout","blank","given","extra","`std::string`","possible"]},{"Key":"a bigger","Fragments":["project.","one"]},{"Key":"bigger project.","Fragments":["In"]},{"Key":"project. In","Fragments":["case"]},{"Key":"In case","Fragments":["of"]},{"Key":"of exercism,","Fragments":["you"]},{"Key":"exercism, you","Fragments":["can"]},{"Key":"can *pretend*","Fragments":["to"]},{"Key":"*pretend* to","Fragments":["have"]},{"Key":"a .h","Fragments":["and"]},{"Key":".h and","Fragments":[".cpp"]},{"Key":"and .cpp","Fragments":["file"]},{"Key":".cpp file","Fragments":["by"]},{"Key":"file by","Fragments":["writing"]},{"Key":"by writing","Fragments":["the"]},{"Key":"writing the","Fragments":[".h"]},{"Key":".h part","Fragments":["first,"]},{"Key":"part first,","Fragments":["followed"]},{"Key":"first, followed","Fragments":["by"]},{"Key":"followed by","Fragments":["everything","a","an"]},{"Key":"by everything","Fragments":["that"]},{"Key":"everything that","Fragments":["you'd"]},{"Key":"that you'd","Fragments":["put"]},{"Key":"you'd put","Fragments":["in"]},{"Key":" Consider","Fragments":["putting"]},{"Key":"Consider putting","Fragments":["the"]},{"Key":"putting the","Fragments":["free"]},{"Key":"free function","Fragments":["`hey`"]},{"Key":"function `hey`","Fragments":["in"]},{"Key":"`hey` in","Fragments":["namespace"]},{"Key":"namespace `bob`","Fragments":["instead"]},{"Key":"`bob` instead","Fragments":["of"]},{"Key":"of forcing","Fragments":["it"]},{"Key":"forcing it","Fragments":["to"]},{"Key":"it to","Fragments":["be","false.","be","compile."]},{"Key":"static method","Fragments":["in","in","of","on"]},{"Key":"method in","Fragments":["a","a","namespace"]},{"Key":"a class.","Fragments":["Namespaces"]},{"Key":"class. Namespaces","Fragments":["are"]},{"Key":"Namespaces are","Fragments":["better"]},{"Key":"are better","Fragments":["for"]},{"Key":"better for","Fragments":["scoping"]},{"Key":"for scoping","Fragments":["visibility"]},{"Key":"scoping visibility","Fragments":["of"]},{"Key":"visibility of","Fragments":["functions;","the"]},{"Key":"of functions;","Fragments":["they"]},{"Key":"functions; they","Fragments":["make"]},{"Key":"they make","Fragments":["it","my"]},{"Key":"it more","Fragments":["explicit","readable.","readable."]},{"Key":"more explicit","Fragments":["what"]},{"Key":"explicit what","Fragments":["you"]},{"Key":"are trying","Fragments":["to"]},{"Key":"do --","Fragments":["narrow"]},{"Key":"-- narrow","Fragments":["the"]},{"Key":"narrow the","Fragments":["scope","scope"]},{"Key":"of visibility.","Fragments":["Declaring"]},{"Key":"visibility. Declaring","Fragments":["a"]},{"Key":"Declaring a","Fragments":["static"]},{"Key":"class also","Fragments":["narrows"]},{"Key":"also narrows","Fragments":["the"]},{"Key":"narrows the","Fragments":["scope"]},{"Key":"of visibility","Fragments":["of"]},{"Key":"the method,","Fragments":["but"]},{"Key":"method, but","Fragments":["it"]},{"Key":"an indirect","Fragments":["way"]},{"Key":"indirect way","Fragments":["of"]},{"Key":"way of","Fragments":["achieving","doing","doing","splitting","doing","making","making"]},{"Key":"of achieving","Fragments":["this"]},{"Key":"achieving this","Fragments":["and"]},{"Key":"this and","Fragments":["is","see","add","add","add","add","it"]},{"Key":"and is","Fragments":["less","more","a"]},{"Key":"is less","Fragments":["explicit.","readable"]},{"Key":" So","Fragments":["if","we","I","I'm","you","I","my"]},{"Key":"So if","Fragments":["we"]},{"Key":"that, what","Fragments":["about"]},{"Key":"what about","Fragments":["your","other"]},{"Key":"your private","Fragments":["members?"]},{"Key":"private members?","Fragments":["They"]},{"Key":"members? They","Fragments":["can"]},{"Key":"They can","Fragments":["be"]},{"Key":"be contained","Fragments":["in"]},{"Key":"contained in","Fragments":["an","the"]},{"Key":"the source","Fragments":["file,","file,","file.","file","file"]},{"Key":"source file,","Fragments":["making","but"]},{"Key":"file, making","Fragments":["them"]},{"Key":"making them","Fragments":["available"]},{"Key":"available in","Fragments":["the"]},{"Key":"file, but","Fragments":["not","I"]},{"Key":"not visible","Fragments":["outside"]},{"Key":"visible outside","Fragments":["the"]},{"Key":"source file.","Fragments":["Using"]},{"Key":"file. Using","Fragments":["namespaces"]},{"Key":"Using namespaces","Fragments":["is"]},{"Key":"namespaces is","Fragments":["the"]},{"Key":"preferred way","Fragments":["to"]},{"Key":"to control","Fragments":["visibility"]},{"Key":"control visibility","Fragments":["in"]},{"Key":"visibility in","Fragments":["C++11."]},{"Key":"But let's","Fragments":["look"]},{"Key":"let's look","Fragments":["at"]},{"Key":"at what","Fragments":["those"]},{"Key":"what those","Fragments":["private"]},{"Key":"private members","Fragments":["are","of","are"]},{"Key":"members are","Fragments":["doing","hidden","static,"]},{"Key":"are doing","Fragments":["a"]},{"Key":"doing a","Fragments":["little","find"]},{"Key":"little more","Fragments":["closely.","descriptive","C++"]},{"Key":"more closely.","Fragments":["There"]},{"Key":"closely. There","Fragments":["is"]},{"Key":"enum that","Fragments":["is","chooses"]},{"Key":"is 1-to-1","Fragments":["with"]},{"Key":"1-to-1 with","Fragments":["the"]},{"Key":"and map","Fragments":["that"]},{"Key":"map that","Fragments":["holds"]},{"Key":"that holds","Fragments":["the"]},{"Key":"holds the","Fragments":["strings"]},{"Key":"strings associated","Fragments":["with"]},{"Key":"associated with","Fragments":["each"]},{"Key":"with each","Fragments":["enum.","alphanumeric","call"]},{"Key":"each enum.","Fragments":["The"]},{"Key":"enum. The","Fragments":["only"]},{"Key":"only place","Fragments":["we"]},{"Key":"place we","Fragments":["use"]},{"Key":"we use","Fragments":["them","the","the"]},{"Key":"them is","Fragments":["to","unnecessary"]},{"Key":"return the","Fragments":["result","strings","string","appropriate","same","same"]},{"Key":"the result","Fragments":["string.","of","of","of","of","of","of"]},{"Key":"result string.","Fragments":["It"]},{"Key":"string. It","Fragments":["seems","could"]},{"Key":"seems the","Fragments":["whole"]},{"Key":"the whole","Fragments":["thing","string","alphabet","string","C++","string"]},{"Key":"whole thing","Fragments":["would"]},{"Key":"thing would","Fragments":["read"]},{"Key":"would read","Fragments":["more"]},{"Key":"read more","Fragments":["clearly"]},{"Key":"more clearly","Fragments":["if","anyway.","that"]},{"Key":"clearly if","Fragments":["we"]},{"Key":"we just","Fragments":["eliminated"]},{"Key":"just eliminated","Fragments":["the"]},{"Key":"eliminated the","Fragments":["enum"]},{"Key":"the enum","Fragments":["and","value","value","value","value"]},{"Key":"map and","Fragments":["return","returning"]},{"Key":"string algorithms.","Fragments":["I"]},{"Key":"was using","Fragments":["them","all","the"]},{"Key":"using them","Fragments":["in"]},{"Key":"some of","Fragments":["these","the","C++","those","the","those","the","the"]},{"Key":"exercises as","Fragments":["you"]},{"Key":"as you","Fragments":["do","can","can"]},{"Key":"you do","Fragments":["here"]},{"Key":"do here","Fragments":["until"]},{"Key":"here until","Fragments":["someone"]},{"Key":"until someone","Fragments":["pointed"]},{"Key":"someone pointed","Fragments":["out"]},{"Key":"pointed out","Fragments":["to"]},{"Key":"out to","Fragments":["me","be"]},{"Key":"the `_copy`","Fragments":["variants,"]},{"Key":"`_copy` variants,","Fragments":["for"]},{"Key":"variants, for","Fragments":["instance:"]},{"Key":" const","Fragments":["string","string","char*","char*","is"]},{"Key":"const string","Fragments":["upper","spaceless"]},{"Key":"string upper","Fragments":["="]},{"Key":"upper =","Fragments":["boost::to_upper_copy(sth);","\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";"]},{"Key":" One","Fragments":["thing","more.","question","small","quick","thing","option","thing"]},{"Key":"One thing","Fragments":["that","I","that","you"]},{"Key":"thing that","Fragments":["makes","would"]},{"Key":"that makes","Fragments":["this","this"]},{"Key":"this whole","Fragments":["exercise"]},{"Key":"whole exercise","Fragments":["easier"]},{"Key":"exercise easier","Fragments":["is"]},{"Key":"easier is","Fragments":["if"]},{"Key":"is if","Fragments":["you"]},{"Key":"you test","Fragments":["for"]},{"Key":"for emptyness","Fragments":["first","and"]},{"Key":"emptyness first","Fragments":[":)."]},{"Key":"first :).","Fragments":["I"]},{"Key":":). I","Fragments":["found"]},{"Key":"found this","Fragments":["out"]},{"Key":"this out","Fragments":["the"]},{"Key":"the hard","Fragments":["way","part"]},{"Key":"hard way","Fragments":["myself"]},{"Key":"way myself","Fragments":["once"]},{"Key":"myself once","Fragments":["I"]},{"Key":"once I","Fragments":["started"]},{"Key":"I started","Fragments":["reviewing"]},{"Key":"started reviewing","Fragments":["solutions"]},{"Key":"reviewing solutions","Fragments":["in"]},{"Key":" It's","Fragments":["always","not","just"]},{"Key":"It's always","Fragments":["a"]},{"Key":"always a","Fragments":["good"]},{"Key":"to narrow","Fragments":["the"]},{"Key":"of variable","Fragments":["declarations"]},{"Key":"variable declarations","Fragments":["to","inside"]},{"Key":"declarations to","Fragments":["the"]},{"Key":"first place","Fragments":["where"]},{"Key":"place where","Fragments":["they"]},{"Key":"where they","Fragments":["are","are","don't"]},{"Key":"are used.","Fragments":["If"]},{"Key":"used. If","Fragments":["we"]},{"Key":"If we","Fragments":["localize"]},{"Key":"we localize","Fragments":["variables"]},{"Key":"localize variables","Fragments":["to"]},{"Key":"variables to","Fragments":["where","other","keep"]},{"Key":"to where","Fragments":["they"]},{"Key":"are used,","Fragments":["then"]},{"Key":"used, then","Fragments":["`spaceless`"]},{"Key":"then `spaceless`","Fragments":["moves"]},{"Key":"`spaceless` moves","Fragments":["all"]},{"Key":"moves all","Fragments":["the"]},{"Key":"the way","Fragments":["down","we","you","to","that","you've","you","the","you"]},{"Key":"way down","Fragments":["to"]},{"Key":"to line","Fragments":["45:"]},{"Key":"string spaceless","Fragments":["="]},{"Key":"spaceless =","Fragments":["boost::erase_all(sth,"]},{"Key":"= boost::erase_all(sth,","Fragments":["\""]},{"Key":"boost::erase_all(sth, \"","Fragments":["\");","\").empty();"]},{"Key":"if (spaceless","Fragments":["=="]},{"Key":"(spaceless ==","Fragments":["\"\")"]},{"Key":"that, we","Fragments":["see"]},{"Key":"we see","Fragments":["that"]},{"Key":"that `spaceless`","Fragments":["is"]},{"Key":"`spaceless` is","Fragments":["only"]},{"Key":"is only","Fragments":["used","a"]},{"Key":"only used","Fragments":["to","twice,"]},{"Key":"for empty","Fragments":["string","(or"]},{"Key":"and we","Fragments":["could"]},{"Key":"could just","Fragments":["as","do","return","sort","add","keep","return"]},{"Key":"just as","Fragments":["easily"]},{"Key":"as easily","Fragments":["write:"]},{"Key":"if (boost::erase_all(sth,","Fragments":["\""]},{"Key":"(boost::erase_all(sth, \"","Fragments":["\").empty())"]},{"Key":"we lost","Fragments":["the"]},{"Key":"lost the","Fragments":["intention-revealing"]},{"Key":"the intention-revealing","Fragments":["name"]},{"Key":"intention-revealing name","Fragments":["`spaceless`"]},{"Key":"name `spaceless`","Fragments":["by"]},{"Key":"`spaceless` by","Fragments":["doing"]},{"Key":"by doing","Fragments":["this."]},{"Key":"doing this.","Fragments":["We"]},{"Key":"this. We","Fragments":["can"]},{"Key":"can reveal","Fragments":["that"]},{"Key":"reveal that","Fragments":["intention"]},{"Key":"that intention","Fragments":["again"]},{"Key":"intention again","Fragments":["by"]},{"Key":"again by","Fragments":["extracting"]},{"Key":"by extracting","Fragments":["this"]},{"Key":"extracting this","Fragments":["into"]},{"Key":"this into","Fragments":["a"]},{"Key":"bool is_silent(const","Fragments":["char*"]},{"Key":"is_silent(const char*","Fragments":["sth)"]},{"Key":" return","Fragments":["boost::erase_all(sth,","inner_product(a.begin(),","query.find_first_not_of(","query.find_first_of(","\"Whatever.\"","query.back()","roster_[grade];","std::regex_match(str,"]},{"Key":"return boost::erase_all(sth,","Fragments":["\""]},{"Key":"do the","Fragments":["same","work","job","same","memory"]},{"Key":"same for","Fragments":["the","loop."]},{"Key":"other two","Fragments":["checks:"]},{"Key":"two checks:","Fragments":["localize"]},{"Key":"checks: localize","Fragments":["the"]},{"Key":"localize the","Fragments":["variables"]},{"Key":"the variables","Fragments":["and","as"]},{"Key":"variables and","Fragments":["extract"]},{"Key":"and extract","Fragments":["helper"]},{"Key":"extract helper","Fragments":["predicates."]},{"Key":"helper predicates.","Fragments":["When"]},{"Key":"predicates. When","Fragments":["we"]},{"Key":"do this,","Fragments":["we'll","but"]},{"Key":"this, we'll","Fragments":["get"]},{"Key":"we'll get","Fragments":["a"]},{"Key":"get a","Fragments":["`hey`"]},{"Key":"a `hey`","Fragments":["function"]},{"Key":"`hey` function","Fragments":["that","by"]},{"Key":"is talking","Fragments":["more"]},{"Key":"problem and","Fragments":["less"]},{"Key":"and less","Fragments":["in","realistically"]},{"Key":"less in","Fragments":["low-level"]},{"Key":"in low-level","Fragments":["implementation"]},{"Key":"low-level implementation","Fragments":["details"]},{"Key":"details making","Fragments":["the"]},{"Key":"code easier","Fragments":["to"]},{"Key":"easier to","Fragments":["understand","read","read","use.","write","'nitpick'."]},{"Key":"understand at","Fragments":["a"]},{"Key":"at a","Fragments":["glance.","time","sufficiently","minimum","local"]},{"Key":" Doh!","Fragments":["While"]},{"Key":"Doh! While","Fragments":["I"]},{"Key":"While I","Fragments":["was","agree"]},{"Key":"was initially","Fragments":["quite"]},{"Key":"initially quite","Fragments":["pleased"]},{"Key":"quite pleased","Fragments":["with"]},{"Key":"pleased with","Fragments":["this"]},{"Key":"this implementation,","Fragments":["it"]},{"Key":"implementation, it","Fragments":["has"]},{"Key":"has a","Fragments":["glaring","defined","question","back()-method,","min","tolower(char)","corresponding","corresponding","better"]},{"Key":"a glaring","Fragments":["performance"]},{"Key":"glaring performance","Fragments":["bug:"]},{"Key":"The algorithm","Fragments":["should"]},{"Key":"algorithm should","Fragments":["terminate"]},{"Key":"should terminate","Fragments":["if"]},{"Key":"terminate if","Fragments":["the"]},{"Key":"the current","Fragments":["prime","word"]},{"Key":"current prime","Fragments":["squared"]},{"Key":"prime squared","Fragments":["is"]},{"Key":"squared is","Fragments":["greater"]},{"Key":"is greater","Fragments":["then","than"]},{"Key":"greater then","Fragments":["the"]},{"Key":"then the","Fragments":["maximum","message","question"]},{"Key":"the maximum","Fragments":["number"]},{"Key":"maximum number","Fragments":["in"]},{"Key":"number in","Fragments":["the"]},{"Key":" So,","Fragments":["one"]},{"Key":"So, one","Fragments":["more"]},{"Key":"one more","Fragments":["iteration."]},{"Key":"I followed","Fragments":["the"]},{"Key":"followed the","Fragments":["suggestion"]},{"Key":"the suggestion","Fragments":["of"]},{"Key":"suggestion of","Fragments":["LegalizeAdulthood"]},{"Key":"of LegalizeAdulthood","Fragments":["and"]},{"Key":"LegalizeAdulthood and","Fragments":["used"]},{"Key":"and used","Fragments":["functions"]},{"Key":"used functions","Fragments":["to"]},{"Key":"functions to","Fragments":["make","make","classify","the","prevent","an","aid","do"]},{"Key":"code cleaner.","Fragments":["The"]},{"Key":"cleaner. The","Fragments":["first"]},{"Key":"The first","Fragments":["time,","part,","is"]},{"Key":"first time,","Fragments":["I"]},{"Key":"time, I","Fragments":["aimed"]},{"Key":"I aimed","Fragments":["for"]},{"Key":"aimed for","Fragments":["shorter"]},{"Key":"for shorter","Fragments":["code,","sentence."]},{"Key":"shorter code,","Fragments":["which"]},{"Key":"code, which","Fragments":["proved"]},{"Key":"which proved","Fragments":["not"]},{"Key":"proved not","Fragments":["to"]},{"Key":"only change","Fragments":["in"]},{"Key":"algorithm is","Fragments":["the","done,","similar"]},{"Key":"way we","Fragments":["detect"]},{"Key":"we detect","Fragments":["someone"]},{"Key":"detect someone","Fragments":["is"]},{"Key":"is shouting.","Fragments":["I"]},{"Key":"shouting. I","Fragments":["assume"]},{"Key":"I assume","Fragments":["a","you"]},{"Key":"assume a","Fragments":["sentence"]},{"Key":"a sentence","Fragments":["is"]},{"Key":"sentence is","Fragments":["a"]},{"Key":"a shout","Fragments":["when","happens","by","before","instead","first","or","or"]},{"Key":"shout when","Fragments":["there"]},{"Key":"a majority","Fragments":["of"]},{"Key":"majority of","Fragments":["upper"]},{"Key":"of upper","Fragments":["cases","cases"]},{"Key":"cases characters.","Fragments":["This","The"]},{"Key":"characters. This","Fragments":["time,"]},{"Key":"This time,","Fragments":["the"]},{"Key":"time, the","Fragments":["constraint"]},{"Key":"the constraint","Fragments":["is"]},{"Key":"constraint is","Fragments":["stronger:"]},{"Key":"is stronger:","Fragments":["a"]},{"Key":"stronger: a","Fragments":["shout"]},{"Key":"shout happens","Fragments":["when"]},{"Key":"happens when","Fragments":["there","I"]},{"Key":"are at","Fragments":["least"]},{"Key":"least 80%","Fragments":["of"]},{"Key":"80% of","Fragments":["upper"]},{"Key":"characters. The","Fragments":["drawback"]},{"Key":"The drawback","Fragments":["is"]},{"Key":"drawback is","Fragments":["that"]},{"Key":"will not","Fragments":["work","be"]},{"Key":"not work","Fragments":["for"]},{"Key":"shorter sentence.","Fragments":["For"]},{"Key":"sentence. For","Fragments":["example,"]},{"Key":"For example,","Fragments":["\"aAA\"","your","you","the","what","a"]},{"Key":"example, \"aAA\"","Fragments":["will"]},{"Key":"\"aAA\" will","Fragments":["not"]},{"Key":"not be","Fragments":["categorized","modified.","called","large","trivial"]},{"Key":"be categorized","Fragments":["as","as"]},{"Key":"categorized as","Fragments":["shouting,","shouting"]},{"Key":"as shouting,","Fragments":["even"]},{"Key":"shouting, even","Fragments":["though"]},{"Key":"even though","Fragments":["the","this"]},{"Key":"though the","Fragments":["first"]},{"Key":"first 'a'","Fragments":["could"]},{"Key":"'a' could","Fragments":["be"]},{"Key":"final version.","Fragments":["It"]},{"Key":"version. It","Fragments":["exploits"]},{"Key":"It exploits","Fragments":["the"]},{"Key":"exploits the","Fragments":["fact"]},{"Key":"that even","Fragments":["numbers"]},{"Key":"even numbers","Fragments":["are"]},{"Key":"numbers are","Fragments":["immediately"]},{"Key":"are immediately","Fragments":["going"]},{"Key":"immediately going","Fragments":["to"]},{"Key":"be removed","Fragments":["from"]},{"Key":"removed from","Fragments":["the"]},{"Key":"the sieve","Fragments":["again."]},{"Key":"we might","Fragments":["as"]},{"Key":"might as","Fragments":["well"]},{"Key":"well not","Fragments":["generate"]},{"Key":"not generate","Fragments":["them,"]},{"Key":"generate them,","Fragments":["and"]},{"Key":"them, and","Fragments":["save","since"]},{"Key":"and save","Fragments":["1/2","yourself"]},{"Key":"save 1/2","Fragments":["of"]},{"Key":"1/2 of","Fragments":["our"]},{"Key":"This version","Fragments":["only"]},{"Key":"version only","Fragments":["removes","modifies"]},{"Key":"only removes","Fragments":["elements"]},{"Key":"removes elements","Fragments":["from"]},{"Key":"elements from","Fragments":["the"]},{"Key":"the vector","Fragments":["after","and"]},{"Key":"vector after","Fragments":["the"]},{"Key":"is done,","Fragments":["which"]},{"Key":"done, which","Fragments":["should"]},{"Key":"which should","Fragments":["be"]},{"Key":"be slightly","Fragments":["faster."]},{"Key":"it still","Fragments":["has"]},{"Key":"still has","Fragments":["the"]},{"Key":"problem of","Fragments":["not","looking"]},{"Key":"of not","Fragments":["terminating"]},{"Key":"not terminating","Fragments":["early"]},{"Key":"terminating early","Fragments":["enough."]},{"Key":"is one","Fragments":["conditional","of"]},{"Key":"one conditional","Fragments":["missing."]},{"Key":" Hi","Fragments":["there,","JuBan1,","again.","there!","@oceane,"]},{"Key":" here","Fragments":["are"]},{"Key":"a couple","Fragments":["of","glances.","of","of","of"]},{"Key":"couple of","Fragments":["things","points.","things","reallocations","things","things:"]},{"Key":"of things","Fragments":["you","that","I","about"]},{"Key":"things you","Fragments":["could"]},{"Key":"You can","Fragments":["use","compare","leave","use","use","greatly","use","greatly","find","achive"]},{"Key":"use std::transform()","Fragments":["or"]},{"Key":"std::transform() or","Fragments":["boost::to_lower_copy()"]},{"Key":"or boost::to_lower_copy()","Fragments":["to"]},{"Key":"boost::to_lower_copy() to","Fragments":["turn"]},{"Key":"to turn","Fragments":["a"]},{"Key":"turn a","Fragments":["string"]},{"Key":"into lower","Fragments":["case."]},{"Key":"lower case.","Fragments":["[More","It"]},{"Key":"case. [More","Fragments":["info"]},{"Key":"[More info","Fragments":["here](http://stackoverflow.com/questions/313970/c-stdstring-to-lower-case).","here](http://www.learncpp.com/cpp-tutorial/73-passing-arguments-by-reference/)."]},{"Key":"info here](http://stackoverflow.com/questions/313970/c-stdstring-to-lower-case).","Fragments":["That"]},{"Key":"here](http://stackoverflow.com/questions/313970/c-stdstring-to-lower-case). That","Fragments":["way"]},{"Key":"That way","Fragments":["you","you","you"]},{"Key":"can save","Fragments":["yourself","yourself"]},{"Key":"save yourself","Fragments":["having","the","the"]},{"Key":"yourself having","Fragments":["to"]},{"Key":"write a","Fragments":["ToLower","generic","helper"]},{"Key":"a ToLower","Fragments":["function"]},{"Key":"ToLower function","Fragments":["yourself."]},{"Key":"2) When","Fragments":["you"]},{"Key":"you pass","Fragments":["variables","in","it"]},{"Key":"pass variables","Fragments":["to"]},{"Key":"to other","Fragments":["functions,","variables","variables"]},{"Key":"other functions,","Fragments":["they"]},{"Key":"functions, they","Fragments":["get"]},{"Key":"they get","Fragments":["copied."]},{"Key":"get copied.","Fragments":["For"]},{"Key":"copied. For","Fragments":["small"]},{"Key":"For small","Fragments":["objects"]},{"Key":"small objects","Fragments":["such"]},{"Key":"objects such","Fragments":["as"]},{"Key":"such as","Fragments":["integers","`any_of(str.begin(),","isupper(),"]},{"Key":"as integers","Fragments":["this"]},{"Key":"integers this","Fragments":["isn't"]},{"Key":"this isn't","Fragments":["tragic.","necessarily"]},{"Key":"isn't tragic.","Fragments":["But"]},{"Key":"tragic. But","Fragments":["for"]},{"Key":"But for","Fragments":["large"]},{"Key":"for large","Fragments":["objects"]},{"Key":"large objects","Fragments":["like"]},{"Key":"objects like","Fragments":["std::maps"]},{"Key":"like std::maps","Fragments":["(or"]},{"Key":"std::maps (or","Fragments":["even"]},{"Key":"(or even","Fragments":["std::strings)"]},{"Key":"even std::strings)","Fragments":["it"]},{"Key":"std::strings) it","Fragments":["costs"]},{"Key":"it costs","Fragments":["performance."]},{"Key":"costs performance.","Fragments":["That's"]},{"Key":"performance. That's","Fragments":["why"]},{"Key":"That's why","Fragments":["such","saysNothing","you'd","I"]},{"Key":"why such","Fragments":["objects"]},{"Key":"such objects","Fragments":["are"]},{"Key":"objects are","Fragments":["often"]},{"Key":"are often","Fragments":["passed","capitalized"]},{"Key":"often passed","Fragments":["by"]},{"Key":"example, your","Fragments":["MapsEqual"]},{"Key":"your MapsEqual","Fragments":["function"]},{"Key":"MapsEqual function","Fragments":["would"]},{"Key":"function would","Fragments":["look"]},{"Key":"would look","Fragments":["like","reasonably","at."]},{"Key":"look like","Fragments":["this","a"]},{"Key":"bool MapsEqual(const","Fragments":["std::map\u003cchar,"]},{"Key":"MapsEqual(const std::map\u003cchar,","Fragments":["int\u003e\u0026"]},{"Key":"std::map\u003cchar, int\u003e\u0026","Fragments":["m1,","m2)"]},{"Key":"int\u003e\u0026 m1,","Fragments":["const"]},{"Key":"m1, const","Fragments":["std::map\u003cchar,"]},{"Key":"const std::map\u003cchar,","Fragments":["int\u003e\u0026"]},{"Key":"int\u003e\u0026 m2)","Fragments":["{"]},{"Key":" That","Fragments":["way,","would","doesn't"]},{"Key":"way, m1","Fragments":["and"]},{"Key":"m1 and","Fragments":["m2"]},{"Key":"and m2","Fragments":["won't"]},{"Key":"m2 won't","Fragments":["be"]},{"Key":"won't be","Fragments":["needlessly"]},{"Key":"be needlessly","Fragments":["copied."]},{"Key":"needlessly copied.","Fragments":["[More"]},{"Key":"copied. [More","Fragments":["info"]},{"Key":"3) std::map","Fragments":["actually"]},{"Key":"std::map actually","Fragments":["has"]},{"Key":"actually has","Fragments":["a"]},{"Key":"a defined","Fragments":["comparison"]},{"Key":"defined comparison","Fragments":["operator."]},{"Key":"comparison operator.","Fragments":["So"]},{"Key":"operator. So","Fragments":["you"]},{"Key":"So you","Fragments":["don't","can"]},{"Key":"to loop","Fragments":["through"]},{"Key":"loop through","Fragments":["every","the"]},{"Key":"through every","Fragments":["map"]},{"Key":"every map","Fragments":["entry"]},{"Key":"map entry","Fragments":["and"]},{"Key":"entry and","Fragments":["compare"]},{"Key":"compare it","Fragments":["with","with"]},{"Key":"it with","Fragments":["another.","word."]},{"Key":"with another.","Fragments":["You"]},{"Key":"another. You","Fragments":["can"]},{"Key":"can compare","Fragments":["two"]},{"Key":"compare two","Fragments":["maps"]},{"Key":"two maps","Fragments":["*a*"]},{"Key":"maps *a*","Fragments":["and"]},{"Key":"*a* and","Fragments":["*b*"]},{"Key":"and *b*","Fragments":["by"]},{"Key":"*b* by","Fragments":["just"]},{"Key":"by just","Fragments":["writing"]},{"Key":"just writing","Fragments":["\"a"]},{"Key":"writing \"a","Fragments":["=="]},{"Key":"\"a ==","Fragments":["b\""]},{"Key":"== b\"","Fragments":["or"]},{"Key":"b\" or","Fragments":["\"a"]},{"Key":"or \"a","Fragments":["!="]},{"Key":"\"a !=","Fragments":["b\"."]},{"Key":"I'm STUCKED!","Fragments":["I"]},{"Key":"STUCKED! I","Fragments":["can't"]},{"Key":"can't even","Fragments":["pass"]},{"Key":"even pass","Fragments":["the"]},{"Key":"first test!","Fragments":["I"]},{"Key":"test! I","Fragments":["just"]},{"Key":"just tried","Fragments":["to","it","this"]},{"Key":"tried to","Fragments":["create","keep","separate","make","roll","explain","keep","minimize","find","keep","use"]},{"Key":"function named","Fragments":["\"hey\","]},{"Key":"named \"hey\",","Fragments":["but"]},{"Key":"\"hey\", but","Fragments":["when"]},{"Key":"but when","Fragments":["I"]},{"Key":"run \"make\"","Fragments":["it"]},{"Key":"\"make\" it","Fragments":["says"]},{"Key":"says that","Fragments":["there"]},{"Key":"no \"hey\"","Fragments":["function"]},{"Key":"\"hey\" function","Fragments":["matching","is","I"]},{"Key":"function matching","Fragments":["for"]},{"Key":"matching for","Fragments":["that"]},{"Key":"for that","Fragments":["test","reason.","case"]},{"Key":"that test","Fragments":["instace"]},{"Key":"test instace","Fragments":["in"]},{"Key":"instace in","Fragments":["bob"]},{"Key":"Your implementation","Fragments":["of"]},{"Key":"of getLowerCase","Fragments":["is"]},{"Key":"getLowerCase is","Fragments":["essentially"]},{"Key":"is essentially","Fragments":["a"]},{"Key":"essentially a","Fragments":["duplicate"]},{"Key":"a duplicate","Fragments":["of"]},{"Key":"duplicate of","Fragments":["boost::to_lower_copy."]},{"Key":"A switch","Fragments":["that"]},{"Key":"switch that","Fragments":["throws"]},{"Key":"that throws","Fragments":["by"]},{"Key":"throws by","Fragments":["default"]},{"Key":"single call","Fragments":["to"]},{"Key":"call to","Fragments":["a","yourself","hey,","`std::string`","```fill_map```-method"]},{"Key":"a (range)","Fragments":["algorithm."]},{"Key":"(range) algorithm.","Fragments":["I"]},{"Key":"algorithm. I","Fragments":["think"]},{"Key":"is as","Fragments":["concise"]},{"Key":"as concise","Fragments":["as"]},{"Key":"concise as","Fragments":["I"]},{"Key":"as I","Fragments":["can","never","think","expected:"]},{"Key":"I can","Fragments":["get.","still","look","better","see","see","replace"]},{"Key":"One question","Fragments":["is"]},{"Key":"question is","Fragments":["unanswered","are","are","empty."]},{"Key":"is unanswered","Fragments":["though:"]},{"Key":"unanswered though:","Fragments":["Why"]},{"Key":"though: Why","Fragments":["exactly"]},{"Key":"Why exactly","Fragments":["is"]},{"Key":"exactly is","Fragments":["it,"]},{"Key":"is it,","Fragments":["that"]},{"Key":"it, that","Fragments":["the"]},{"Key":"the address-of","Fragments":["operator"]},{"Key":"address-of operator","Fragments":["in"]},{"Key":"operator in","Fragments":["the"]},{"Key":"the static_cast","Fragments":["argument","template"]},{"Key":"static_cast argument","Fragments":["is"]},{"Key":"argument is","Fragments":["optional?"]},{"Key":" I.e.,","Fragments":["(to_rna)"]},{"Key":"I.e., (to_rna)","Fragments":["and"]},{"Key":"(to_rna) and","Fragments":["(\u0026to_rna)"]},{"Key":"and (\u0026to_rna)","Fragments":["work"]},{"Key":"(\u0026to_rna) work","Fragments":["the"]},{"Key":"work the","Fragments":["same,"]},{"Key":"same, while","Fragments":["the"]},{"Key":"while the","Fragments":["static_cast"]},{"Key":"static_cast template","Fragments":["argument"]},{"Key":"template argument","Fragments":["clearly"]},{"Key":"argument clearly","Fragments":["indicates"]},{"Key":"clearly indicates","Fragments":["a"]},{"Key":"indicates a","Fragments":["pointer."]},{"Key":"guess referencing","Fragments":["a"]},{"Key":"referencing a","Fragments":["function"]},{"Key":"function always","Fragments":["implicitly"]},{"Key":"always implicitly","Fragments":["returns"]},{"Key":"implicitly returns","Fragments":["a"]},{"Key":"returns a","Fragments":["pointer,","reference"]},{"Key":"a pointer,","Fragments":["but"]},{"Key":"pointer, but","Fragments":["it"]},{"Key":"is still","Fragments":["a"]},{"Key":"still a","Fragments":["bit"]},{"Key":"bit unexpected","Fragments":["behaviour."]},{"Key":"unexpected behaviour.","Fragments":["Would"]},{"Key":"behaviour. Would","Fragments":["like"]},{"Key":"Would like","Fragments":["to"]},{"Key":"know more","Fragments":["abou"]},{"Key":"more abou","Fragments":["it."]},{"Key":"After viewing","Fragments":["some"]},{"Key":"viewing some","Fragments":["other"]},{"Key":"some other","Fragments":["submissions,","method"]},{"Key":"other submissions,","Fragments":["I"]},{"Key":"submissions, I","Fragments":["decided"]},{"Key":"I decided","Fragments":["to","to","to","to"]},{"Key":"move testing","Fragments":["the"]},{"Key":"testing the","Fragments":["string"]},{"Key":"into functions","Fragments":["to","but"]},{"Key":"make things","Fragments":["easier"]},{"Key":"things easier","Fragments":["to"]},{"Key":" Try","Fragments":["using","to"]},{"Key":"Try using","Fragments":["\"\\\\\\\\s+\""]},{"Key":"using \"\\\\\\\\s+\"","Fragments":["for"]},{"Key":"\"\\\\\\\\s+\" for","Fragments":["one"]},{"Key":"for one","Fragments":["or"]},{"Key":"one or","Fragments":["more"]},{"Key":"or more","Fragments":["spaces","spaces.","precisely"]},{"Key":"more spaces","Fragments":["or"]},{"Key":"spaces or","Fragments":["\"\\\\\\\\s*\""]},{"Key":"or \"\\\\\\\\s*\"","Fragments":["for"]},{"Key":"\"\\\\\\\\s*\" for","Fragments":["zero"]},{"Key":"for zero","Fragments":["or"]},{"Key":"zero or","Fragments":["more"]},{"Key":"I decomposed","Fragments":["the"]},{"Key":"decomposed the","Fragments":["problem"]},{"Key":"- If","Fragments":["the","I"]},{"Key":"If the","Fragments":["string","regex","same","iterator"]},{"Key":"or consists","Fragments":["solely"]},{"Key":"consists solely","Fragments":["of"]},{"Key":"solely of","Fragments":["whitespace,"]},{"Key":"of whitespace,","Fragments":["then","however"]},{"Key":"whitespace, then","Fragments":["the"]},{"Key":"the message","Fragments":["is","has","is","starts","but","types"]},{"Key":"message is","Fragments":["\"silent\"","all"]},{"Key":"* Emptiness","Fragments":["is"]},{"Key":"Emptiness is","Fragments":["trivial"]},{"Key":"is trivial","Fragments":["to"]},{"Key":"trivial to","Fragments":["check.","change"]},{"Key":"to check.","Fragments":["Deciding"]},{"Key":"check. Deciding","Fragments":["all(whitespace)"]},{"Key":"Deciding all(whitespace)","Fragments":["requires"]},{"Key":"all(whitespace) requires","Fragments":["visiting"]},{"Key":"requires visiting","Fragments":["the"]},{"Key":"visiting the","Fragments":["whole"]},{"Key":"- To","Fragments":["be"]},{"Key":"a yell,","Fragments":["the"]},{"Key":"yell, the","Fragments":["string"]},{"Key":"string must","Fragments":["contain"]},{"Key":"must contain","Fragments":["at"]},{"Key":"contain at","Fragments":["least"]},{"Key":"least one","Fragments":["alphabetic","upper-case"]},{"Key":"one alphabetic","Fragments":["character"]},{"Key":"alphabetic character","Fragments":["and"]},{"Key":"character and","Fragments":["no"]},{"Key":"and no","Fragments":["lowercase","input","requirements","difference"]},{"Key":"no lowercase","Fragments":["alphabetic"]},{"Key":"lowercase alphabetic","Fragments":["characters."]},{"Key":"* We","Fragments":["can"]},{"Key":"can stop","Fragments":["iteration","iteration)."]},{"Key":"stop iteration","Fragments":["upon","(short"]},{"Key":"iteration upon","Fragments":["finding"]},{"Key":"upon finding","Fragments":["a"]},{"Key":"finding a","Fragments":["lowercase"]},{"Key":"a lowercase","Fragments":["char;","value"]},{"Key":"lowercase char;","Fragments":["it"]},{"Key":"char; it","Fragments":["is"]},{"Key":"not whitespace,","Fragments":["and"]},{"Key":"whitespace, and","Fragments":["it"]},{"Key":"and it","Fragments":["makes","does","didn't","seems","would","functionality","doesn't","would","turned"]},{"Key":"makes a","Fragments":["yell","few","more"]},{"Key":"a yell","Fragments":["impossible","on","and"]},{"Key":"* Yells","Fragments":["take"]},{"Key":"Yells take","Fragments":["precedence"]},{"Key":"take precedence","Fragments":["over"]},{"Key":"precedence over","Fragments":["silence,"]},{"Key":"over silence,","Fragments":["so"]},{"Key":"silence, so","Fragments":["if"]},{"Key":"so if","Fragments":["we"]},{"Key":"yell on","Fragments":["our"]},{"Key":"on our","Fragments":["hands,"]},{"Key":"our hands,","Fragments":["just"]},{"Key":"hands, just","Fragments":["check"]},{"Key":"just check","Fragments":["if"]},{"Key":"last char","Fragments":["is"]},{"Key":"char is","Fragments":["?"]},{"Key":"The yell_or_silence","Fragments":["class"]},{"Key":"yell_or_silence class","Fragments":["is"]},{"Key":"is designed","Fragments":["for"]},{"Key":"designed for","Fragments":["use"]},{"Key":"for use","Fragments":["with"]},{"Key":"use with","Fragments":["std::find_if()."]},{"Key":"with std::find_if().","Fragments":["It"]},{"Key":"std::find_if(). It","Fragments":["observes"]},{"Key":"It observes","Fragments":["one"]},{"Key":"observes one","Fragments":["character"]},{"Key":"one character","Fragments":["at"]},{"Key":"character at","Fragments":["a"]},{"Key":"a time","Fragments":["and"]},{"Key":"time and","Fragments":["returns"]},{"Key":"and returns","Fragments":["true","a","the","the","the","the","the"]},{"Key":"returns true","Fragments":["(terminating"]},{"Key":"true (terminating","Fragments":["the"]},{"Key":"(terminating the","Fragments":["iteration)"]},{"Key":"the iteration)","Fragments":["if"]},{"Key":"iteration) if","Fragments":["one"]},{"Key":"the decisions","Fragments":["\"this","that"]},{"Key":"decisions \"this","Fragments":["is"]},{"Key":"\"this is","Fragments":["a","silence\""]},{"Key":"a yell\"","Fragments":["or"]},{"Key":"yell\" or","Fragments":["\"this"]},{"Key":"or \"this","Fragments":["is"]},{"Key":"is silence\"","Fragments":["can"]},{"Key":"silence\" can","Fragments":["be"]},{"Key":"be made.","Fragments":["The"]},{"Key":"made. The","Fragments":["return"]},{"Key":"The return","Fragments":["value","short-circuits"]},{"Key":"return value","Fragments":["of","a","and","if","if","`mResponses.at(foo)`\u003c/ul\u003e\u003c/li\u003e"]},{"Key":"value of","Fragments":["std::find_if","0.","1","its"]},{"Key":"of std::find_if","Fragments":["is"]},{"Key":"std::find_if is","Fragments":["not"]},{"Key":"not important","Fragments":["in"]},{"Key":"important in","Fragments":["this"]},{"Key":"this case;","Fragments":["we"]},{"Key":"case; we","Fragments":["don't"]},{"Key":"don't care","Fragments":["where","enough"]},{"Key":"care where","Fragments":["that"]},{"Key":"where that","Fragments":["character"]},{"Key":"that character","Fragments":["was,"]},{"Key":"character was,","Fragments":["only"]},{"Key":"was, only","Fragments":["that"]},{"Key":"only that","Fragments":["it"]},{"Key":" My","Fragments":["initial","biggest","code","first","first","guess"]},{"Key":"My initial","Fragments":["implementation"]},{"Key":"initial implementation","Fragments":["used"]},{"Key":"implementation used","Fragments":["std::for_each()"]},{"Key":"used std::for_each()","Fragments":["but"]},{"Key":"std::for_each() but","Fragments":["there"]},{"Key":"but there","Fragments":["is","are","are","were"]},{"Key":"to stop","Fragments":["iteration"]},{"Key":"iteration (short","Fragments":["of"]},{"Key":"(short of","Fragments":["throwing"]},{"Key":"of throwing","Fragments":["an","values"]},{"Key":"throwing an","Fragments":["exception,","exception,"]},{"Key":"an exception,","Fragments":["which","stating"]},{"Key":"exception, which","Fragments":["is"]},{"Key":"not desirable)","Fragments":["once"]},{"Key":"desirable) once","Fragments":["the"]},{"Key":"once the","Fragments":["predicate"]},{"Key":"the predicate","Fragments":["object"]},{"Key":"predicate object","Fragments":["already"]},{"Key":"object already","Fragments":["knows"]},{"Key":"already knows","Fragments":["the"]},{"Key":"knows the","Fragments":["answer"]},{"Key":"answer (e.g.,","Fragments":["if"]},{"Key":"(e.g., if","Fragments":["the"]},{"Key":"first character","Fragments":["is","whether"]},{"Key":"character is","Fragments":["lowercase,","probably","white","whitespace.","found","compared","compared"]},{"Key":"is lowercase,","Fragments":["we"]},{"Key":"lowercase, we","Fragments":["know"]},{"Key":"we know","Fragments":["this","someone"]},{"Key":"know this","Fragments":["is"]},{"Key":"is neither","Fragments":["silence"]},{"Key":"neither silence","Fragments":["nor"]},{"Key":"silence nor","Fragments":["a"]},{"Key":"nor a","Fragments":["yell"]},{"Key":"yell and","Fragments":["can"]},{"Key":"and can","Fragments":["stop"]},{"Key":"noticed a","Fragments":["mistake"]},{"Key":"a mistake","Fragments":["in","while"]},{"Key":"mistake in","Fragments":["the"]},{"Key":"the constructor,","Fragments":["it"]},{"Key":"constructor, it","Fragments":["should"]},{"Key":"it should","Fragments":["be","be","be,"]},{"Key":" Dialog(const","Fragments":["std::string"]},{"Key":"Dialog(const std::string","Fragments":["\u0026phrase)"]},{"Key":" instead","Fragments":["of"]},{"Key":" Dialog(std::string","Fragments":["phrase){"]},{"Key":"It looks","Fragments":["to","like"]},{"Key":"looks to","Fragments":["me"]},{"Key":"me like","Fragments":["a","there'd"]},{"Key":"a RegEx","Fragments":["would"]},{"Key":"RegEx would","Fragments":["be"]},{"Key":"good fit","Fragments":["to"]},{"Key":"fit to","Fragments":["discern"]},{"Key":"to discern","Fragments":["the"]},{"Key":"discern the","Fragments":["various"]},{"Key":"the various","Fragments":["cases.","responses,"]},{"Key":"various cases.","Fragments":["However,"]},{"Key":"cases. However,","Fragments":["I'm"]},{"Key":"However, I'm","Fragments":["not"]},{"Key":"not getting","Fragments":["boost::regex"]},{"Key":"getting boost::regex","Fragments":["to"]},{"Key":"boost::regex to","Fragments":["work"]},{"Key":"work properly.","Fragments":["My"]},{"Key":"properly. My","Fragments":["first"]},{"Key":"My first","Fragments":["regex","attempt","guess"]},{"Key":"first regex","Fragments":["([\\s]),"]},{"Key":"regex ([\\s]),","Fragments":["with"]},{"Key":"([\\s]), with","Fragments":["\\"]},{"Key":"with \\","Fragments":["for"]},{"Key":"\\ for","Fragments":["escapes"]},{"Key":"for escapes","Fragments":["in"]},{"Key":"escapes in","Fragments":["C++,"]},{"Key":"in C++,","Fragments":["is"]},{"Key":"C++, is","Fragments":["intended"]},{"Key":"is intended","Fragments":["to"]},{"Key":"intended to","Fragments":["match"]},{"Key":"to match","Fragments":["any"]},{"Key":"match any","Fragments":["amount"]},{"Key":"any amount","Fragments":["of"]},{"Key":"whitespace, however","Fragments":["it"]},{"Key":"however it","Fragments":["doesn't.","has"]},{"Key":" Running","Fragments":["this"]},{"Key":"Running this","Fragments":["code"]},{"Key":"this code","Fragments":["in","could","as","even","is.","now,"]},{"Key":"code in","Fragments":["Coliru,","a","any","an"]},{"Key":"in Coliru,","Fragments":["I"]},{"Key":"Coliru, I","Fragments":["don't"]},{"Key":"don't think","Fragments":["I've","that's","it's","this","that","I've","using","I'm","`trim_left_copy(str)`"]},{"Key":"think I've","Fragments":["gotten","ever"]},{"Key":"I've gotten","Fragments":["the"]},{"Key":"gotten the","Fragments":["regex"]},{"Key":"the regex","Fragments":["to","library","searches","was","test","be."]},{"Key":"regex to","Fragments":["load"]},{"Key":"to load","Fragments":["properly"]},{"Key":"load properly","Fragments":["at"]},{"Key":"properly at","Fragments":["all."]},{"Key":" Any","Fragments":["pointers"]},{"Key":"Any pointers","Fragments":["welcome!"]},{"Key":"that now","Fragments":["when"]},{"Key":"now when","Fragments":["I"]},{"Key":"I read","Fragments":["`hey`","the"]},{"Key":"read `hey`","Fragments":["I"]},{"Key":"`hey` I","Fragments":["see"]},{"Key":"see a","Fragments":["straightforward"]},{"Key":"a straightforward","Fragments":["algorithm","exercise."]},{"Key":"straightforward algorithm","Fragments":["expressed"]},{"Key":"algorithm expressed","Fragments":["in"]},{"Key":"expressed in","Fragments":["terms"]},{"Key":"the problem.","Fragments":["Do","However,","You","A"]},{"Key":"problem. Do","Fragments":["you"]},{"Key":"think `d.isEmpty()`","Fragments":["would"]},{"Key":"`d.isEmpty()` would","Fragments":["communicate"]},{"Key":"would communicate","Fragments":["the"]},{"Key":"communicate the","Fragments":["problem"]},{"Key":"domain better","Fragments":["if"]},{"Key":"better if","Fragments":["it"]},{"Key":"it read","Fragments":["`d.isSilent()`?"]},{"Key":"read `d.isSilent()`?","Fragments":["Being"]},{"Key":"`d.isSilent()`? Being","Fragments":["empty"]},{"Key":"Being empty","Fragments":["feels"]},{"Key":"empty feels","Fragments":["like"]},{"Key":"like an","Fragments":["expression","expression","actual"]},{"Key":"an expression","Fragments":["of","of"]},{"Key":"expression of","Fragments":["the","the","the","the"]},{"Key":"implementation and","Fragments":["being"]},{"Key":"and being","Fragments":["silent"]},{"Key":"being silent","Fragments":["feels"]},{"Key":"silent feels","Fragments":["more"]},{"Key":"feels more","Fragments":["like"]},{"Key":"more like","Fragments":["an"]},{"Key":"I always","Fragments":["find"]},{"Key":"always find","Fragments":["it"]},{"Key":"find it","Fragments":["weird"]},{"Key":"it weird","Fragments":["to"]},{"Key":"weird to","Fragments":["read"]},{"Key":"read private","Fragments":["members"]},{"Key":"members of","Fragments":["a","'bob'"]},{"Key":"class as","Fragments":["the"]},{"Key":"as the","Fragments":["very","function","last","Romans","strings","beer"]},{"Key":"very first","Fragments":["thing","serious"]},{"Key":"first thing","Fragments":["when"]},{"Key":"thing when","Fragments":["I'm"]},{"Key":"when I'm","Fragments":["reading"]},{"Key":"I'm reading","Fragments":["a"]},{"Key":"reading a","Fragments":["class"]},{"Key":"class declaration.","Fragments":["To"]},{"Key":"declaration. To","Fragments":["me,"]},{"Key":"To me,","Fragments":["private"]},{"Key":"me, private","Fragments":["members"]},{"Key":"are hidden","Fragments":["implementation"]},{"Key":"hidden implementation","Fragments":["details"]},{"Key":"should first","Fragments":["be"]},{"Key":"first be","Fragments":["reading"]},{"Key":"be reading","Fragments":["the"]},{"Key":"the public","Fragments":["interface"]},{"Key":"public interface","Fragments":["for"]},{"Key":"interface for","Fragments":["a"]},{"Key":"class, then","Fragments":["protected"]},{"Key":"then protected","Fragments":["members,"]},{"Key":"protected members,","Fragments":["then"]},{"Key":"members, then","Fragments":["private"]},{"Key":"then private","Fragments":["members."]},{"Key":"private members.","Fragments":["I"]},{"Key":"members. I","Fragments":["wrote"]},{"Key":"I wrote","Fragments":["up","in","the","a","a"]},{"Key":"wrote up","Fragments":["a"]},{"Key":"up a","Fragments":["refactoring","little.","bit,"]},{"Key":"a refactoring","Fragments":["on"]},{"Key":"refactoring on","Fragments":["this"]},{"Key":"this that","Fragments":["I"]},{"Key":"I called","Fragments":["[Sort","make"]},{"Key":"called [Sort","Fragments":["Members"]},{"Key":"[Sort Members","Fragments":["by"]},{"Key":"Members by","Fragments":["Visibility](http://legalizeadulthood.wordpress.com/2013/08/01/refactoring-sort-members-by-visibility/)."]},{"Key":" Let's","Fragments":["take"]},{"Key":"Let's take","Fragments":["a"]},{"Key":"a look","Fragments":["at","at","on","to","to"]},{"Key":"at your","Fragments":["class"]},{"Key":"your class","Fragments":["in","is"]},{"Key":"class in","Fragments":["more"]},{"Key":"in more","Fragments":["detail."]},{"Key":"more detail.","Fragments":["The"]},{"Key":"detail. The","Fragments":["work"]},{"Key":"The work","Fragments":["done"]},{"Key":"work done","Fragments":["in"]},{"Key":"done in","Fragments":["the","C."]},{"Key":"the constructor","Fragments":["appears","of"]},{"Key":"constructor appears","Fragments":["only"]},{"Key":"appears only","Fragments":["needed"]},{"Key":"only needed","Fragments":["for"]},{"Key":"needed for","Fragments":["the","this","'if'"]},{"Key":"the `isEmpty`","Fragments":["test."]},{"Key":"`isEmpty` test.","Fragments":["The"]},{"Key":"test. The","Fragments":["other"]},{"Key":"The other","Fragments":["tests"]},{"Key":"other tests","Fragments":["don't"]},{"Key":"tests don't","Fragments":["appear","cover"]},{"Key":"don't appear","Fragments":["to"]},{"Key":"appear to","Fragments":["be"]},{"Key":"be white","Fragments":["space"]},{"Key":"white space","Fragments":["sensitive.","you"]},{"Key":"space sensitive.","Fragments":["Does"]},{"Key":"sensitive. Does","Fragments":["this"]},{"Key":"Does this","Fragments":["even"]},{"Key":"even need","Fragments":["to"]},{"Key":"class at","Fragments":["all?","a"]},{"Key":"at all?","Fragments":["Could"]},{"Key":"all? Could","Fragments":["it"]},{"Key":"Could it","Fragments":["simply"]},{"Key":"simply be","Fragments":["three"]},{"Key":"be three","Fragments":["free"]},{"Key":"three free","Fragments":["functions"]},{"Key":"functions `bool","Fragments":["isEmpty(std::string"]},{"Key":"`bool isEmpty(std::string","Fragments":["const"]},{"Key":"isEmpty(std::string const","Fragments":["\u0026text)`,"]},{"Key":"const \u0026text)`,","Fragments":["`bool"]},{"Key":"\u0026text)`, `bool","Fragments":["isShouting(std::string"]},{"Key":"`bool isShouting(std::string","Fragments":["const"]},{"Key":"isShouting(std::string const","Fragments":["\u0026text)`"]},{"Key":"const \u0026text)`","Fragments":["and"]},{"Key":"\u0026text)` and","Fragments":["`bool"]},{"Key":"and `bool","Fragments":["isAsking(std::string"]},{"Key":"`bool isAsking(std::string","Fragments":["const"]},{"Key":"isAsking(std::string const","Fragments":["\u0026text)`?"]},{"Key":"A couple","Fragments":["people","of","things"]},{"Key":"couple people","Fragments":["have"]},{"Key":"people have","Fragments":["broadened"]},{"Key":"have broadened","Fragments":["the"]},{"Key":"broadened the","Fragments":["idea"]},{"Key":"the idea","Fragments":["of","to","was","of"]},{"Key":"idea of","Fragments":["shouting","using"]},{"Key":"shouting to","Fragments":["be"]},{"Key":"the condition","Fragments":["where","Is"]},{"Key":"condition where","Fragments":["some"]},{"Key":"where some","Fragments":["majority"]},{"Key":"some majority","Fragments":["fraction"]},{"Key":"majority fraction","Fragments":["of"]},{"Key":"fraction of","Fragments":["the"]},{"Key":"characters were","Fragments":["upper"]},{"Key":"were upper","Fragments":["case,"]},{"Key":"upper case,","Fragments":["but"]},{"Key":"so sure","Fragments":["that"]},{"Key":"sure that","Fragments":["I","the","query"]},{"Key":"that idea.","Fragments":["For"]},{"Key":"idea. For","Fragments":["instance,"]},{"Key":"instance, acronyms","Fragments":["are"]},{"Key":"acronyms are","Fragments":["often"]},{"Key":"often capitalized","Fragments":["and"]},{"Key":"capitalized and","Fragments":["then"]},{"Key":"then simple","Fragments":["statements"]},{"Key":"simple statements","Fragments":["about"]},{"Key":"statements about","Fragments":["acronyms"]},{"Key":"about acronyms","Fragments":["could"]},{"Key":"acronyms could","Fragments":["be"]},{"Key":"as shouting","Fragments":["when"]},{"Key":"think that's","Fragments":["the"]},{"Key":"that's the","Fragments":["intent"]},{"Key":"the intent","Fragments":["of"]},{"Key":"intent of","Fragments":["the"]},{"Key":"problem. However,","Fragments":["without"]},{"Key":"However, without","Fragments":["clarifying"]},{"Key":"without clarifying","Fragments":["information"]},{"Key":"clarifying information","Fragments":["in"]},{"Key":"information in","Fragments":["the"]},{"Key":"problem statement,","Fragments":["you"]},{"Key":"statement, you","Fragments":["could"]},{"Key":"could make","Fragments":["the","the","`checkQuestion`","the","this"]},{"Key":"case either","Fragments":["way,"]},{"Key":"either way,","Fragments":["so"]},{"Key":"way, so","Fragments":["I"]},{"Key":"so I","Fragments":["don't","could","didn't","check","am","broke","just","wrote","reverted"]},{"Key":"think it's","Fragments":["wrong,"]},{"Key":"it's wrong,","Fragments":["just"]},{"Key":"wrong, just","Fragments":["a"]},{"Key":"just a","Fragments":["different","trivial","namespace","comment?","benign"]},{"Key":"a different","Fragments":["interpretation","scope.","approach"]},{"Key":"different interpretation","Fragments":["of"]},{"Key":"interpretation of","Fragments":["the"]},{"Key":"this matches","Fragments":["what"]},{"Key":"matches what","Fragments":["is"]},{"Key":"is expected","Fragments":["by"]},{"Key":"expected by","Fragments":["the"]},{"Key":"If you","Fragments":["look","are","prefer","have","know","were","expect","declare"]},{"Key":"you look","Fragments":["in","at","for"]},{"Key":"look in","Fragments":["bob_test.cpp"]},{"Key":"in bob_test.cpp","Fragments":["you"]},{"Key":"bob_test.cpp you","Fragments":["will"]},{"Key":"will see","Fragments":["that"]},{"Key":"you need","Fragments":["to","to","it."]},{"Key":"to implement","Fragments":["a","a","an"]},{"Key":"implement a","Fragments":["function","simple"]},{"Key":"function which","Fragments":["can"]},{"Key":"which can","Fragments":["be"]},{"Key":"be called","Fragments":["with","on","`isAllCaps`","from"]},{"Key":"called with","Fragments":["bob::hey(\"Tom-ay-to,"]},{"Key":"with bob::hey(\"Tom-ay-to,","Fragments":["tom-aaaah-to.\")"]},{"Key":"Nice use","Fragments":["of","of"]},{"Key":"of inner_product.","Fragments":["I"]},{"Key":"inner_product. I","Fragments":["didn't"]},{"Key":"didn't know","Fragments":["the","about","that","about","about","about","why."]},{"Key":"know the","Fragments":["standard"]},{"Key":"library had","Fragments":["a"]},{"Key":"that fits","Fragments":["so"]},{"Key":"fits so","Fragments":["perfectly"]},{"Key":"so perfectly","Fragments":["for"]},{"Key":"perfectly for","Fragments":["this"]},{"Key":"I would","Fragments":["say","not","like","recommend","like","guess","throw","consider","have","not","have","have","use","have","try","have","have","not","nitpick","look"]},{"Key":"would say","Fragments":["that"]},{"Key":"that swapping","Fragments":["the"]},{"Key":"swapping the","Fragments":["two"]},{"Key":"the two","Fragments":["strings","variables","strings"]},{"Key":"two strings","Fragments":["is","were"]},{"Key":"strings is","Fragments":["overly","really"]},{"Key":"is overly","Fragments":["complicated"]},{"Key":"overly complicated","Fragments":["for"]},{"Key":"complicated for","Fragments":["this"]},{"Key":"this task.","Fragments":["I'd"]},{"Key":"task. I'd","Fragments":["have"]},{"Key":"I'd have","Fragments":["written","no","put"]},{"Key":"have written","Fragments":["it"]},{"Key":"written it","Fragments":["like"]},{"Key":"it like","Fragments":["this","it"]},{"Key":" int","Fragments":["minLength","main(int","last","capacity","alphabet[26]","i"]},{"Key":"int minLength","Fragments":["="]},{"Key":"minLength =","Fragments":["std::min("]},{"Key":"= std::min(","Fragments":["a.length(),"]},{"Key":"std::min( a.length(),","Fragments":["b.length()"]},{"Key":"a.length(), b.length()","Fragments":[");"]},{"Key":"return inner_product(a.begin(),","Fragments":["a.begin()"]},{"Key":"inner_product(a.begin(), a.begin()","Fragments":["+"]},{"Key":"a.begin() +","Fragments":["minLength,"]},{"Key":"+ minLength,","Fragments":["b.begin(),"]},{"Key":"minLength, b.begin(),","Fragments":["0,"]},{"Key":"b.begin(), 0,","Fragments":["..."]},{"Key":"0, ...","Fragments":[");","}?"]},{"Key":"There probably","Fragments":["isn't"]},{"Key":"probably isn't","Fragments":["much","the"]},{"Key":"isn't much","Fragments":["of","of"]},{"Key":"much of","Fragments":["a","\"algorithm\"","a","the"]},{"Key":"performance hit","Fragments":["with"]},{"Key":"hit with","Fragments":["swap"]},{"Key":"with swap","Fragments":["since"]},{"Key":"swap since","Fragments":["strings"]},{"Key":"since strings","Fragments":["are"]},{"Key":"strings are","Fragments":["moveable,","constant."]},{"Key":"are moveable,","Fragments":["but"]},{"Key":"moveable, but","Fragments":["I"]},{"Key":"code itself","Fragments":["is"]},{"Key":"itself is","Fragments":["kept"]},{"Key":"is kept","Fragments":["simpler"]},{"Key":"kept simpler","Fragments":["with"]},{"Key":"simpler with","Fragments":["that"]},{"Key":"with that","Fragments":["change.","key"]},{"Key":"Also, someone","Fragments":["might"]},{"Key":"someone might","Fragments":["look"]},{"Key":"might look","Fragments":["only"]},{"Key":"look only","Fragments":["at"]},{"Key":"only at","Fragments":["the"]},{"Key":"the definition","Fragments":["of"]},{"Key":"definition of","Fragments":["*compute(string"]},{"Key":"of *compute(string","Fragments":["shortest,"]},{"Key":"*compute(string shortest,","Fragments":["string"]},{"Key":"shortest, string","Fragments":["longest)*"]},{"Key":"string longest)*","Fragments":["and"]},{"Key":"longest)* and","Fragments":["thinks"]},{"Key":"and thinks","Fragments":["that"]},{"Key":"thinks that","Fragments":["he"]},{"Key":"that he","Fragments":["needs"]},{"Key":"he needs","Fragments":["to"]},{"Key":"make sure","Fragments":["that","that"]},{"Key":"first passed","Fragments":["parameter"]},{"Key":"passed parameter","Fragments":["is"]},{"Key":"parameter is","Fragments":["actually"]},{"Key":"actually the","Fragments":["shorter"]},{"Key":"the shorter","Fragments":["one.","of"]},{"Key":"Nice usage","Fragments":["of"]},{"Key":"usage of","Fragments":["the","brackets.","return"]},{"Key":"Nice idea","Fragments":["to"]},{"Key":"to imbue","Fragments":["your"]},{"Key":"imbue your","Fragments":["stringstring"]},{"Key":"your stringstring","Fragments":["with"]},{"Key":"stringstring with","Fragments":["a"]},{"Key":"Just one","Fragments":["remark"]},{"Key":"one remark","Fragments":["-"]},{"Key":"remark -","Fragments":["you"]},{"Key":"can turn","Fragments":["this","them"]},{"Key":" auto","Fragments":["it","curr","wordStart","wordEnd"]},{"Key":"auto it","Fragments":["=",":"]},{"Key":"it =","Fragments":["acc.find(word);"]},{"Key":"if (it","Fragments":["!="]},{"Key":"(it !=","Fragments":["acc.end())","'"]},{"Key":"!= acc.end())","Fragments":["{"]},{"Key":" }","Fragments":["else"]},{"Key":"} else","Fragments":["{"]},{"Key":" acc[word]","Fragments":["=","+="]},{"Key":"acc[word] =","Fragments":["1;"]},{"Key":" into","Fragments":["this"]},{"Key":"acc[word] +=","Fragments":["1;"]},{"Key":"don't see","Fragments":["the","the"]},{"Key":"see the","Fragments":["necessity","benefit","benefit"]},{"Key":"the necessity","Fragments":["of"]},{"Key":"necessity of","Fragments":["using"]},{"Key":"using two","Fragments":["different","of","global"]},{"Key":"two different","Fragments":["methods","word,"]},{"Key":"different methods","Fragments":["here."]},{"Key":"methods here.","Fragments":["(if"]},{"Key":"here. (if","Fragments":["the"]},{"Key":"(if the","Fragments":["word"]},{"Key":"word isn't","Fragments":["in"]},{"Key":"isn't in","Fragments":["acc"]},{"Key":"in acc","Fragments":["yet,"]},{"Key":"acc yet,","Fragments":["it's"]},{"Key":"yet, it's","Fragments":["constructed"]},{"Key":"it's constructed","Fragments":["with"]},{"Key":"constructed with","Fragments":["a"]},{"Key":"a default","Fragments":["value","case"]},{"Key":"default value","Fragments":["of","and"]},{"Key":"of 0.","Fragments":["So"]},{"Key":"0. So","Fragments":["*acc[word]"]},{"Key":"So *acc[word]","Fragments":["+="]},{"Key":"*acc[word] +=","Fragments":["1*"]},{"Key":"+= 1*","Fragments":["does"]},{"Key":"1* does","Fragments":["the"]},{"Key":"does the","Fragments":["same","job"]},{"Key":"as *acc[word]","Fragments":["="]},{"Key":"*acc[word] =","Fragments":["1*"]},{"Key":"= 1*","Fragments":["in"]},{"Key":"1* in","Fragments":["this"]},{"Key":"you actually","Fragments":["checked"]},{"Key":"actually checked","Fragments":["if"]},{"Key":"checked if","Fragments":["it"]},{"Key":"it passes","Fragments":["the"]},{"Key":"passes the","Fragments":["given","given","tests"]},{"Key":"the given","Fragments":["tests?","tests"]},{"Key":"given tests?","Fragments":["I"]},{"Key":"tests? I","Fragments":["see","though","thought"]},{"Key":"see two","Fragments":["issues"]},{"Key":"two issues","Fragments":["here","I"]},{"Key":"issues here","Fragments":["(but"]},{"Key":"here (but","Fragments":["I"]},{"Key":"(but I","Fragments":["can't"]},{"Key":"can't test","Fragments":["it"]},{"Key":"test it","Fragments":["myself,"]},{"Key":"it myself,","Fragments":["sadly."]},{"Key":"myself, sadly.","Fragments":["boost"]},{"Key":"sadly. boost","Fragments":["isn't"]},{"Key":"boost isn't","Fragments":["installed)."]},{"Key":"You require","Fragments":["a"]},{"Key":"require a","Fragments":["string\u0026"]},{"Key":"a string\u0026","Fragments":["to"]},{"Key":"string\u0026 to","Fragments":["be"]},{"Key":"passed to","Fragments":["words().","bob::hey."]},{"Key":"to words().","Fragments":["But"]},{"Key":"words(). But","Fragments":["the"]},{"Key":"But the","Fragments":["test","simplest","conditions"]},{"Key":"test cases","Fragments":["only","in","(in","and"]},{"Key":"cases only","Fragments":["pass"]},{"Key":"only pass","Fragments":["a"]},{"Key":"pass a","Fragments":["char*.","delimited","reference"]},{"Key":"a char*.","Fragments":["Imo"]},{"Key":"char*. Imo","Fragments":["this"]},{"Key":"Imo this","Fragments":["function"]},{"Key":"function should","Fragments":["pass-by-value"]},{"Key":"should pass-by-value","Fragments":["so"]},{"Key":"pass-by-value so","Fragments":["passing"]},{"Key":"so passing","Fragments":["a"]},{"Key":"passing a","Fragments":["char*"]},{"Key":"a char*","Fragments":["works."]},{"Key":"2) Afaik,","Fragments":["boost::tokenizer"]},{"Key":"Afaik, boost::tokenizer","Fragments":["only"]},{"Key":"boost::tokenizer only","Fragments":["splits"]},{"Key":"only splits","Fragments":["at"]},{"Key":"splits at","Fragments":["whitespaces"]},{"Key":"at whitespaces","Fragments":["(spaces,"]},{"Key":"whitespaces (spaces,","Fragments":["tabs,"]},{"Key":"(spaces, tabs,","Fragments":["newlines)"]},{"Key":"tabs, newlines)","Fragments":["but"]},{"Key":"newlines) but","Fragments":["the"]},{"Key":"exercise requires","Fragments":["that"]},{"Key":"requires that","Fragments":["you"]},{"Key":"you ignore","Fragments":["special"]},{"Key":"ignore special","Fragments":["characters"]},{"Key":"special characters","Fragments":["like"]},{"Key":"characters like","Fragments":[";","'###$!!\""]},{"Key":"like ;","Fragments":["."]},{"Key":"; .","Fragments":["/"]},{"Key":". /","Fragments":["@."]},{"Key":"/ @.","Fragments":["The"]},{"Key":"@. The","Fragments":["string"]},{"Key":"The string","Fragments":["\"one,"]},{"Key":"string \"one,","Fragments":["two,"]},{"Key":"\"one, two,","Fragments":["three\""]},{"Key":"two, three\"","Fragments":["would"]},{"Key":"three\" would","Fragments":["be"]},{"Key":"be tokenized","Fragments":["into"]},{"Key":"tokenized into","Fragments":["\"one,\""]},{"Key":"into \"one,\"","Fragments":["\"two,\""]},{"Key":"\"one,\" \"two,\"","Fragments":["\"three\","]},{"Key":"\"two,\" \"three\",","Fragments":["instead"]},{"Key":"\"three\", instead","Fragments":["of"]},{"Key":"of \"one\"","Fragments":["\"two\""]},{"Key":"\"one\" \"two\"","Fragments":["\"three\""]},{"Key":"\"two\" \"three\"","Fragments":["(note"]},{"Key":"\"three\" (note","Fragments":["the"]},{"Key":"(note the","Fragments":["missing"]},{"Key":"the missing","Fragments":["commas)."]},{"Key":"missing commas).","Fragments":["You"]},{"Key":"commas). You","Fragments":["need"]},{"Key":"a delimited","Fragments":["to"]},{"Key":"delimited to","Fragments":["tokenizer()."]},{"Key":"have time","Fragments":["to"]},{"Key":"time to","Fragments":["install","figure","check"]},{"Key":"to install","Fragments":["boost"]},{"Key":"install boost","Fragments":["here,"]},{"Key":"boost here,","Fragments":["so"]},{"Key":"here, so","Fragments":["I"]},{"Key":"you converted","Fragments":["the"]},{"Key":"converted the","Fragments":["input"]},{"Key":"string to","Fragments":["all","avoid","start","reserve","char[]."]},{"Key":"to all","Fragments":["caps"]},{"Key":"all caps","Fragments":["and","words"]},{"Key":"caps and","Fragments":["then"]},{"Key":"then compared","Fragments":["that"]},{"Key":"compared that","Fragments":["with"]},{"Key":"that with","Fragments":["the"]},{"Key":"original to","Fragments":["check"]},{"Key":"However, you","Fragments":["might","could"]},{"Key":"you might","Fragments":["want","be","could"]},{"Key":"a non-alpha","Fragments":["input"]},{"Key":"non-alpha input","Fragments":["in"]},{"Key":"input in","Fragments":["a","your","this"]},{"Key":"doesn't require","Fragments":["typing"]},{"Key":"require typing","Fragments":["out"]},{"Key":"typing out","Fragments":["the"]},{"Key":"whole alphabet","Fragments":["twice."]},{"Key":"alphabet twice.","Fragments":["Seems"]},{"Key":"twice. Seems","Fragments":["to"]},{"Key":"Seems to","Fragments":["me"]},{"Key":"like there'd","Fragments":["be"]},{"Key":"there'd be","Fragments":["a"]},{"Key":"of room","Fragments":["for"]},{"Key":"room for","Fragments":["error"]},{"Key":"for error","Fragments":["in"]},{"Key":"error in","Fragments":["the"]},{"Key":"the method","Fragments":["you","signature"]},{"Key":"method you","Fragments":["chose."]},{"Key":" Thanks","Fragments":["for","to","though!","so","for","again.","for","for","for","marzece!","Max!"]},{"Key":"Thanks for","Fragments":["the","the","your","your","the","the","the","the"]},{"Key":"have now","Fragments":["made"]},{"Key":"now made","Fragments":["an"]},{"Key":"made an","Fragments":["iteration"]},{"Key":"an iteration","Fragments":["2","that"]},{"Key":"iteration 2","Fragments":["with"]},{"Key":"2 with","Fragments":["the"]},{"Key":"the corrections","Fragments":["you"]},{"Key":"corrections you","Fragments":["mentioned."]},{"Key":"What do","Fragments":["you","you","you"]},{"Key":"do you","Fragments":["think","think","think?","define","think?"]},{"Key":"think about","Fragments":["the","names","efficiency."]},{"Key":"the 2nd","Fragments":["iteration?"]},{"Key":"not pass","Fragments":["the","it"]},{"Key":"of anything","Fragments":["simpler"]},{"Key":"anything simpler","Fragments":["to"]},{"Key":"simpler to","Fragments":["accomplish","follow"]},{"Key":"to accomplish","Fragments":["the"]},{"Key":"accomplish the","Fragments":["task"]},{"Key":"the task","Fragments":["at","is"]},{"Key":"task at","Fragments":["hand."]},{"Key":" your","Fragments":["hey"]},{"Key":"your hey","Fragments":["function"]},{"Key":"hey function","Fragments":["must","could"]},{"Key":"function must","Fragments":["be"]},{"Key":"must be","Fragments":["in","reliable,","a","kept","kept","kept","kept"]},{"Key":"be in","Fragments":["a","this"]},{"Key":"called bob,","Fragments":["or"]},{"Key":"bob, or","Fragments":["be"]},{"Key":"or be","Fragments":["a"]},{"Key":"static public","Fragments":["function"]},{"Key":"public function","Fragments":["in"]},{"Key":"a bob","Fragments":["class."]},{"Key":"be something","Fragments":["like:","you'd"]},{"Key":"namespace bob","Fragments":["{","{"]},{"Key":"std::string hey(const","Fragments":["std::string\u0026","std::string\u0026","std::string\u0026"]},{"Key":"hey(const std::string\u0026","Fragments":["something)","something)","str)"]},{"Key":"std::string\u0026 something)","Fragments":["{","{"]},{"Key":" //code","Fragments":["here","here"]},{"Key":" or,","Fragments":["using"]},{"Key":"or, using","Fragments":["classes"]},{"Key":" class","Fragments":["bob"]},{"Key":"class bob","Fragments":["{","was"]},{"Key":" static","Fragments":["std::string","std::regex","std::regex"]},{"Key":"static std::string","Fragments":["hey(const"]},{"Key":" Good","Fragments":["points,","call","use","call","comments","catch"]},{"Key":"Good points,","Fragments":["thanks."]},{"Key":"are no","Fragments":["private/public","lower-case"]},{"Key":"no private/public","Fragments":["functions"]},{"Key":"private/public functions","Fragments":["here,"]},{"Key":"functions here,","Fragments":["as"]},{"Key":"here, as","Fragments":["I'm"]},{"Key":"as I'm","Fragments":["not","certain","interested"]},{"Key":"not using","Fragments":["classes.","two"]},{"Key":"using classes.","Fragments":["hey()"]},{"Key":"classes. hey()","Fragments":["is"]},{"Key":"hey() is","Fragments":["exposed"]},{"Key":"is exposed","Fragments":["in"]},{"Key":"exposed in","Fragments":["namespace"]},{"Key":"namespace bob,","Fragments":["everything"]},{"Key":"bob, everything","Fragments":["else"]},{"Key":"everything else","Fragments":["is"]},{"Key":"else is","Fragments":["in"]},{"Key":"anonymous namespace.","Fragments":["Is","This"]},{"Key":"namespace. Is","Fragments":["there"]},{"Key":"Is there","Fragments":["anything","a","a","an"]},{"Key":"there anything","Fragments":["wrong"]},{"Key":"anything wrong","Fragments":["with"]},{"Key":"wrong with","Fragments":["that?"]},{"Key":"is tested,","Fragments":["and"]},{"Key":"tested, and","Fragments":["passes"]},{"Key":"and passes","Fragments":["all"]},{"Key":"passes all","Fragments":["the","of"]},{"Key":" Apparently,","Fragments":["const"]},{"Key":"Apparently, const","Fragments":["char"]},{"Key":"const char","Fragments":["*","*argv[])","[]"]},{"Key":"char *","Fragments":["converts","const"]},{"Key":"* converts","Fragments":["to"]},{"Key":"converts to","Fragments":["string"]},{"Key":"to string","Fragments":["const","\u0026."]},{"Key":"string const","Fragments":["\u0026.","\u0026."]},{"Key":"And yeah,","Fragments":["boost::tokenizer"]},{"Key":"yeah, boost::tokenizer","Fragments":["DTRT"]},{"Key":"boost::tokenizer DTRT","Fragments":["here."]},{"Key":"Looks pretty","Fragments":["good."]},{"Key":"pretty good.","Fragments":["How"]},{"Key":"good. How","Fragments":["should"]},{"Key":"How should","Fragments":["space"]},{"Key":"should space","Fragments":["after"]},{"Key":"space after","Fragments":["the","that"]},{"Key":"question mark","Fragments":["be","as","at","is","(which"]},{"Key":"mark be","Fragments":["handled?"]},{"Key":"be handled?","Fragments":["This"]},{"Key":"handled? This","Fragments":["is"]},{"Key":"is arguably","Fragments":["open"]},{"Key":"arguably open","Fragments":["to"]},{"Key":"open to","Fragments":["interpretation"]},{"Key":"to interpretation","Fragments":["but"]},{"Key":"interpretation but","Fragments":["IMO"]},{"Key":"but IMO","Fragments":["it"]},{"Key":"IMO it","Fragments":["makes"]},{"Key":"makes sense","Fragments":["to"]},{"Key":"sense to","Fragments":["consider","pass"]},{"Key":"consider that","Fragments":["a","a"]},{"Key":"that a","Fragments":["question","pattern","shout","shout","char"]},{"Key":"This makes","Fragments":["pretty","pretty"]},{"Key":"makes pretty","Fragments":["heavy","heavy"]},{"Key":"pretty heavy","Fragments":["use","use"]},{"Key":"heavy use","Fragments":["of","of"]},{"Key":"of boost","Fragments":["for","for"]},{"Key":"boost for","Fragments":["a","a"]},{"Key":"a simple","Fragments":["program,","program,","namespace","`for`","case"]},{"Key":"simple program,","Fragments":["maybe","maybe"]},{"Key":"program, maybe","Fragments":["too","too"]},{"Key":"maybe too","Fragments":["much.","much."]},{"Key":"too much.","Fragments":["But","But"]},{"Key":"much. But","Fragments":["I","I"]},{"Key":"how short","Fragments":["it","it","and"]},{"Key":"short it","Fragments":["makes","makes"]},{"Key":" Elected","Fragments":["to","to"]},{"Key":"Elected to","Fragments":["break","break"]},{"Key":"to break","Fragments":["contains_alpha()","contains_alpha()"]},{"Key":"break contains_alpha()","Fragments":["into","into"]},{"Key":"contains_alpha() into","Fragments":["a","a"]},{"Key":"separate function","Fragments":["because","because","calls"]},{"Key":"function because","Fragments":["it","it"]},{"Key":"the line","Fragments":["too","too"]},{"Key":"line too","Fragments":["long","long"]},{"Key":"too long","Fragments":["and","and"]},{"Key":"and \"contains_alpha\"","Fragments":["helps","helps"]},{"Key":"\"contains_alpha\" helps","Fragments":["indicate","indicate"]},{"Key":"helps indicate","Fragments":["what","what"]},{"Key":"indicate what","Fragments":["we're","we're"]},{"Key":"what we're","Fragments":["doing","doing"]},{"Key":"we're doing","Fragments":["there.","there."]},{"Key":"I figured","Fragments":["trimming","trimming","a"]},{"Key":"figured trimming","Fragments":["whitespace","whitespace"]},{"Key":"trimming whitespace","Fragments":["from","from"]},{"Key":"whitespace from","Fragments":["the","the"]},{"Key":"the ends","Fragments":["in","in"]},{"Key":"ends in","Fragments":["the","the"]},{"Key":"the beginning","Fragments":["would","would","and","and","of"]},{"Key":"beginning would","Fragments":["make","make"]},{"Key":"the rest","Fragments":["easier.","easier.","of","of"]},{"Key":" Would","Fragments":["be","be","it"]},{"Key":"Would be","Fragments":["interested","interested"]},{"Key":"be interested","Fragments":["to","to","in"]},{"Key":"interested to","Fragments":["know","know"]},{"Key":"know if","Fragments":["I","I","I'm","I'm"]},{"Key":"I missed","Fragments":["any","any"]},{"Key":"missed any","Fragments":["edge","edge"]},{"Key":"any edge","Fragments":["cases.","cases."]},{"Key":" bob::hey","Fragments":["doesn't"]},{"Key":"bob::hey doesn't","Fragments":["need"]},{"Key":"a const.","Fragments":["Since","Thanks"]},{"Key":"const. Since","Fragments":["you"]},{"Key":"Since you","Fragments":["return"]},{"Key":"you return","Fragments":["the"]},{"Key":"a copy,","Fragments":["you"]},{"Key":"copy, you","Fragments":["don't"]},{"Key":"the const","Fragments":["qualifier."]},{"Key":"const qualifier.","Fragments":["On"]},{"Key":"qualifier. On","Fragments":["the"]},{"Key":"On the","Fragments":["other","plus","other,"]},{"Key":"other hand,","Fragments":["you"]},{"Key":"hand, you","Fragments":["should"]},{"Key":"should pass","Fragments":["as","it"]},{"Key":"pass as","Fragments":["argument","ref."]},{"Key":"as argument","Fragments":["a"]},{"Key":"argument a","Fragments":["const"]},{"Key":"a useless","Fragments":["copy."]},{"Key":" Iteration","Fragments":["2:"]},{"Key":"Iteration 2:","Fragments":["added"]},{"Key":"2: added","Fragments":["contents"]},{"Key":"added contents","Fragments":["of"]},{"Key":"contents of","Fragments":["bob.h"]},{"Key":"of bob.h","Fragments":["since"]},{"Key":"bob.h since","Fragments":["the"]},{"Key":"the file","Fragments":["can't","and"]},{"Key":"file can't","Fragments":["be"]},{"Key":"can't be","Fragments":["included","shouting"]},{"Key":"be included","Fragments":["separately","just"]},{"Key":"included separately","Fragments":["yet."]},{"Key":" Inital","Fragments":["version"]},{"Key":"Inital version","Fragments":["was"]},{"Key":"version was","Fragments":["consisted"]},{"Key":"was consisted","Fragments":["of"]},{"Key":"consisted of","Fragments":["a"]},{"Key":"class, after","Fragments":["seeing"]},{"Key":"after seeing","Fragments":["other"]},{"Key":"seeing other","Fragments":["submissions"]},{"Key":"other submissions","Fragments":["I","`any_of`,"]},{"Key":"submissions I","Fragments":["switched"]},{"Key":"I switched","Fragments":["to"]},{"Key":"switched to","Fragments":["using"]},{"Key":"a namespace.","Fragments":["As","I"]},{"Key":"namespace. As","Fragments":["the"]},{"Key":"As the","Fragments":["task"]},{"Key":"task is","Fragments":["quite"]},{"Key":"is quite","Fragments":["simple"]},{"Key":"quite simple","Fragments":["i"]},{"Key":"simple i","Fragments":["just"]},{"Key":"i just","Fragments":["used"]},{"Key":"just used","Fragments":["one","a"]},{"Key":"used one","Fragments":["\"big\""]},{"Key":"one \"big\"","Fragments":["method"]},{"Key":"\"big\" method","Fragments":["instead"]},{"Key":"method instead","Fragments":["of"]},{"Key":"of splitting","Fragments":["it","up"]},{"Key":"splitting it","Fragments":["up."]},{"Key":"could put","Fragments":["`std::string"]},{"Key":"put `std::string","Fragments":["word"]},{"Key":"`std::string word","Fragments":["=","="]},{"Key":"= rit-\u003estr();`","Fragments":["and"]},{"Key":"rit-\u003estr();` and","Fragments":["`++rit;`"]},{"Key":"and `++rit;`","Fragments":["into"]},{"Key":"`++rit;` into","Fragments":["`std::string"]},{"Key":"into `std::string","Fragments":["word"]},{"Key":"= rit++-\u003estr();`","Fragments":["but"]},{"Key":"rit++-\u003estr();` but","Fragments":["that's"]},{"Key":"that's less","Fragments":["readable"]},{"Key":"less readable","Fragments":["in","and"]},{"Key":"readable in","Fragments":["my"]},{"Key":"The has_only_digits","Fragments":["is"]},{"Key":"has_only_digits is","Fragments":["kind"]},{"Key":"of inflexible.","Fragments":["What"]},{"Key":"inflexible. What","Fragments":["if"]},{"Key":"string contains","Fragments":["'%$#'?","letters,"]},{"Key":"not recommend","Fragments":["checking"]},{"Key":"recommend checking","Fragments":["for"]},{"Key":"checking for","Fragments":["\"HELL\"","whitespace","\"allSpace\"","a","the","if","each","that"]},{"Key":"for \"HELL\"","Fragments":["in"]},{"Key":"\"HELL\" in","Fragments":["the"]},{"Key":"string. Why","Fragments":["not"]},{"Key":"not check","Fragments":["for","for"]},{"Key":"all uppercase","Fragments":["letters?"]},{"Key":"uppercase letters?","Fragments":["That"]},{"Key":"letters? That","Fragments":["usually"]},{"Key":"That usually","Fragments":["means"]},{"Key":"usually means","Fragments":["yelling"]},{"Key":"means yelling","Fragments":["in"]},{"Key":"yelling in","Fragments":["text."]},{"Key":"The transform","Fragments":["way"]},{"Key":"transform way","Fragments":["is"]},{"Key":"way is","Fragments":["kind","much"]},{"Key":"of cool,","Fragments":["although"]},{"Key":"cool, although","Fragments":["it"]},{"Key":"although it","Fragments":["makes","is"]},{"Key":"few more","Fragments":["writes"]},{"Key":"more writes","Fragments":["than"]},{"Key":"writes than","Fragments":["necessary."]},{"Key":"also check","Fragments":["for"]},{"Key":"end before","Fragments":["checking"]},{"Key":"before checking","Fragments":["the","for"]},{"Key":"checking the","Fragments":["?","type","edit","strings."]},{"Key":"the breakdown","Fragments":["into"]},{"Key":"breakdown into","Fragments":["multiple"]},{"Key":"into multiple","Fragments":["small"]},{"Key":"multiple small","Fragments":["functions."]},{"Key":"you taken","Fragments":["a"]},{"Key":"taken a","Fragments":["look"]},{"Key":"at [`find_first_of`](http://www.cplusplus.com/reference/string/string/find_first_of/)?","Fragments":["This"]},{"Key":"[`find_first_of`](http://www.cplusplus.com/reference/string/string/find_first_of/)? This","Fragments":["might"]},{"Key":"This might","Fragments":["make"]},{"Key":"might make","Fragments":["`isYell`"]},{"Key":"make `isYell`","Fragments":["and"]},{"Key":"`isYell` and","Fragments":["`isSilence`"]},{"Key":"I'm kind","Fragments":["of"]},{"Key":"of abusing","Fragments":["`std::mismatch`,"]},{"Key":"abusing `std::mismatch`,","Fragments":["using"]},{"Key":"`std::mismatch`, using","Fragments":["`std::for_each`"]},{"Key":"using `std::for_each`","Fragments":["and"]},{"Key":"`std::for_each` and","Fragments":["`boost::make_zip_iterator`"]},{"Key":"and `boost::make_zip_iterator`","Fragments":["is"]},{"Key":"`boost::make_zip_iterator` is","Fragments":["semantically"]},{"Key":"is semantically","Fragments":["more"]},{"Key":"semantically more","Fragments":["clear","\"spot"]},{"Key":"more clear","Fragments":["but"]},{"Key":"clear but","Fragments":["I"]},{"Key":"like it's","Fragments":["to"]},{"Key":"it's to","Fragments":["such"]},{"Key":"to such","Fragments":["a"]},{"Key":"a degree","Fragments":["that"]},{"Key":"degree that","Fragments":["it"]},{"Key":"it justifies","Fragments":["including"]},{"Key":"justifies including","Fragments":["boost"]},{"Key":"including boost","Fragments":["just"]},{"Key":"boost just","Fragments":["for"]},{"Key":"just for","Fragments":["that.","the","debugging","`min()`"]},{"Key":" edit:","Fragments":["nvm,","Oh!"]},{"Key":"edit: nvm,","Fragments":["just"]},{"Key":"nvm, just","Fragments":["saw"]},{"Key":"just saw","Fragments":["that"]},{"Key":"saw that","Fragments":["`boost::for_each`"]},{"Key":"that `boost::for_each`","Fragments":["can"]},{"Key":"`boost::for_each` can","Fragments":["take"]},{"Key":"can take","Fragments":["multiple"]},{"Key":"take multiple","Fragments":["ranges,"]},{"Key":"multiple ranges,","Fragments":["seem"]},{"Key":"ranges, seem","Fragments":["like"]},{"Key":"seem like","Fragments":["that's","range"]},{"Key":"like that's","Fragments":["practically"]},{"Key":"that's practically","Fragments":["tailor"]},{"Key":"practically tailor","Fragments":["made"]},{"Key":"tailor made","Fragments":["for"]},{"Key":"made for","Fragments":["this,"]},{"Key":"for this,","Fragments":["but"]},{"Key":"this, but","Fragments":["I'm","wondering"]},{"Key":"I'm just","Fragments":["going"]},{"Key":"just going","Fragments":["to"]},{"Key":"to leave","Fragments":["it"]},{"Key":"leave it","Fragments":["as"]},{"Key":"it as","Fragments":["is.","I'm","a","two","a"]},{"Key":" Alrighty","Fragments":["then."]},{"Key":"The conversion","Fragments":["to"]},{"Key":"conversion to","Fragments":["string\u0026"]},{"Key":"to string\u0026","Fragments":["boggles"]},{"Key":"string\u0026 boggles","Fragments":["my"]},{"Key":"boggles my","Fragments":["mind"]},{"Key":"my mind","Fragments":["because"]},{"Key":"mind because","Fragments":["I"]},{"Key":"because I","Fragments":["could've","can't","can't","can't"]},{"Key":"I could've","Fragments":["sworn"]},{"Key":"could've sworn","Fragments":["that"]},{"Key":"sworn that","Fragments":["I"]},{"Key":"I ran","Fragments":["into","it"]},{"Key":"ran into","Fragments":["this"]},{"Key":"into this","Fragments":["problem"]},{"Key":"problem a","Fragments":["long"]},{"Key":"a long","Fragments":["time","time","time"]},{"Key":"long time","Fragments":["ago.","since","to"]},{"Key":"time ago.","Fragments":["But"]},{"Key":"ago. But","Fragments":["I"]},{"Key":"I tested","Fragments":["it"]},{"Key":"tested it","Fragments":["just"]},{"Key":"it just","Fragments":["now","once,"]},{"Key":"just now","Fragments":["and"]},{"Key":"now and","Fragments":["it","wanted"]},{"Key":"it does","Fragments":["indeed","is","not,","not","seem"]},{"Key":"does indeed","Fragments":["convert"]},{"Key":"indeed convert","Fragments":["properly."]},{"Key":"convert properly.","Fragments":["So"]},{"Key":"properly. So","Fragments":["either"]},{"Key":"So either","Fragments":["my"]},{"Key":"either my","Fragments":["memory"]},{"Key":"my memory","Fragments":["is"]},{"Key":"memory is","Fragments":["bad"]},{"Key":"is bad","Fragments":["or"]},{"Key":"bad or","Fragments":["it's"]},{"Key":"or it's","Fragments":["been"]},{"Key":"it's been","Fragments":["a"]},{"Key":"been a","Fragments":["relatively","long"]},{"Key":"a relatively","Fragments":["recent"]},{"Key":"relatively recent","Fragments":["addition"]},{"Key":"recent addition","Fragments":["to"]},{"Key":"addition to","Fragments":["Cpp","spaces"]},{"Key":"to Cpp","Fragments":["(e.g."]},{"Key":"Cpp (e.g.","Fragments":["'11"]},{"Key":"(e.g. '11","Fragments":["or"]},{"Key":"'11 or","Fragments":["'14)."]},{"Key":"A question","Fragments":["though:"]},{"Key":"question though:","Fragments":["what"]},{"Key":"though: what","Fragments":["was"]},{"Key":"what was","Fragments":["your"]},{"Key":"was your","Fragments":["motivation"]},{"Key":"your motivation","Fragments":["to"]},{"Key":"motivation to","Fragments":["change"]},{"Key":"to change","Fragments":["\"for","much","anything","the","those","your"]},{"Key":"change \"for","Fragments":["(char"]},{"Key":"\"for (char","Fragments":["ch"]},{"Key":"(char ch","Fragments":[":"]},{"Key":"ch :","Fragments":["str)\""]},{"Key":": str)\"","Fragments":["into"]},{"Key":"str)\" into","Fragments":["a"]},{"Key":"a std::for_each()","Fragments":["call"]},{"Key":"std::for_each() call","Fragments":["in"]},{"Key":"call in","Fragments":["GetCharMap?"]},{"Key":"guess it's","Fragments":["a","mostly"]},{"Key":"it's a","Fragments":["matter","question,","bit","shout","valid","requirement","prolonged","C","matter"]},{"Key":"a matter","Fragments":["of","of"]},{"Key":"matter of","Fragments":["preference,","principle"]},{"Key":"of preference,","Fragments":["but"]},{"Key":"preference, but","Fragments":["I"]},{"Key":"I love","Fragments":["the","it.","the","the","usng"]},{"Key":"love the","Fragments":["for","simplicity","use","OOP"]},{"Key":"the for","Fragments":["loop","loop","loop","loop,","loop,","loop"]},{"Key":"loop since","Fragments":["I"]},{"Key":"since I","Fragments":["don't","wrote","have"]},{"Key":"to type","Fragments":["begin()"]},{"Key":"type begin()","Fragments":["and"]},{"Key":"begin() and","Fragments":["end()"]},{"Key":"and end()","Fragments":["every"]},{"Key":"end() every","Fragments":["damn"]},{"Key":"every damn","Fragments":["time."]},{"Key":"I actually","Fragments":["also","do"]},{"Key":"actually also","Fragments":["like"]},{"Key":"loop alot","Fragments":["more"]},{"Key":"alot more","Fragments":["than"]},{"Key":"than for_each.","Fragments":["I"]},{"Key":"for_each. I","Fragments":["just"]},{"Key":"just wanted","Fragments":["to"]},{"Key":"wanted to","Fragments":["try","dive"]},{"Key":"to try","Fragments":["this"]},{"Key":"try this","Fragments":["new"]},{"Key":"this new","Fragments":["way","word"]},{"Key":"new way","Fragments":["of"]},{"Key":"of doing","Fragments":["things","it,","it","that."]},{"Key":"doing things","Fragments":["with"]},{"Key":"things with","Fragments":["iterators"]},{"Key":"with iterators","Fragments":["and"]},{"Key":"iterators and","Fragments":["transform/for_each.","algorithm"]},{"Key":"could not","Fragments":["imagine","decide","pass"]},{"Key":"not imagine","Fragments":["using"]},{"Key":"imagine using","Fragments":["much"]},{"Key":"using much","Fragments":["of"]},{"Key":"of \"algorithm\"","Fragments":["in","is"]},{"Key":"\"algorithm\" in","Fragments":["my"]},{"Key":"own projects.","Fragments":["But"]},{"Key":"projects. But","Fragments":["I"]},{"Key":"know how","Fragments":["spread","to","std::transform"]},{"Key":"how spread","Fragments":["the"]},{"Key":"spread the","Fragments":["use"]},{"Key":"the use","Fragments":["of","of","of","of","of","of","of"]},{"Key":"\"algorithm\" is","Fragments":["in"]},{"Key":"in professional","Fragments":["use?"]},{"Key":"(I pushed","Fragments":["a"]},{"Key":"pushed a","Fragments":["third"]},{"Key":"a third","Fragments":["submission"]},{"Key":"third submission","Fragments":["with"]},{"Key":"submission with","Fragments":["header"]},{"Key":"with header","Fragments":["guards"]},{"Key":"header guards","Fragments":["and"]},{"Key":"guards and","Fragments":["cleaner"]},{"Key":"and cleaner","Fragments":["isSilence)"]},{"Key":"not really","Fragments":["sure","the","sure","necessary"]},{"Key":"really sure","Fragments":["how","what"]},{"Key":"sure how","Fragments":["`find_first_of`","familiar"]},{"Key":"how `find_first_of`","Fragments":["could"]},{"Key":"`find_first_of` could","Fragments":["help"]},{"Key":"could help","Fragments":["me"]},{"Key":"help me","Fragments":["here.","in"]},{"Key":"The isSilence","Fragments":["could"]},{"Key":"isSilence could","Fragments":["be"]},{"Key":"be rewritten","Fragments":["as"]},{"Key":"return query.find_first_not_of(","Fragments":["\""]},{"Key":"query.find_first_not_of( \"","Fragments":["\\t\\n\""]},{"Key":"\" \\t\\n\"","Fragments":[")"]},{"Key":"\\t\\n\" )","Fragments":["=="]},{"Key":") ==","Fragments":["std::string::npos;","std::string::npos;"]},{"Key":"which has","Fragments":["some","a","a"]},{"Key":"the simplest","Fragments":["way"]},{"Key":"simplest way","Fragments":["to"]},{"Key":"use this","Fragments":["set","short"]},{"Key":"this set","Fragments":["of"]},{"Key":"set of","Fragments":["functions","functions,"]},{"Key":"with `isYell`","Fragments":["pretty"]},{"Key":"`isYell` pretty","Fragments":["much"]},{"Key":"much turned","Fragments":["out"]},{"Key":"turned out","Fragments":["like","it"]},{"Key":"out like","Fragments":["this:"]},{"Key":"const char*","Fragments":["lower","upper","and"]},{"Key":"char* lower","Fragments":["="]},{"Key":"lower =","Fragments":["\"abcdefghijklmnopqrstuvwxyz\";"]},{"Key":"char* upper","Fragments":["="]},{"Key":"return query.find_first_of(","Fragments":["upper"]},{"Key":"query.find_first_of( upper","Fragments":[")"]},{"Key":"upper )","Fragments":["!="]},{"Key":") !=","Fragments":["std::string::npos"]},{"Key":"!= std::string::npos","Fragments":["\u0026\u0026"]},{"Key":" query.find_first_of(","Fragments":["lower"]},{"Key":"query.find_first_of( lower","Fragments":[")"]},{"Key":"lower )","Fragments":["=="]},{"Key":"The issue","Fragments":["is"]},{"Key":"issue is","Fragments":["that","that"]},{"Key":"to ascertain","Fragments":["the"]},{"Key":"ascertain the","Fragments":["existence"]},{"Key":"the existence","Fragments":["of","of"]},{"Key":"existence of","Fragments":["at","a"]},{"Key":"of at","Fragments":["least"]},{"Key":"one upper-case","Fragments":["letter"]},{"Key":"upper-case letter","Fragments":["as"]},{"Key":"letter as","Fragments":["well"]},{"Key":"as making","Fragments":["sure"]},{"Key":"making sure","Fragments":["there"]},{"Key":"sure there","Fragments":["are","must"]},{"Key":"lower-case letters.","Fragments":["So",":)"]},{"Key":"letters. So","Fragments":["I"]},{"Key":"need two","Fragments":["separate"]},{"Key":"two separate","Fragments":["function"]},{"Key":"function calls","Fragments":["one"]},{"Key":"calls one","Fragments":["way"]},{"Key":"one way","Fragments":["or"]},{"Key":"way or","Fragments":["another"]},{"Key":"or another","Fragments":["(unless"]},{"Key":"another (unless","Fragments":["I"]},{"Key":"(unless I","Fragments":["write"]},{"Key":"I write","Fragments":["the"]},{"Key":"write the","Fragments":["loop"]},{"Key":"loop myself).","Fragments":["And"]},{"Key":"myself). And","Fragments":["with"]},{"Key":"And with","Fragments":["`find_first_of`I"]},{"Key":"with `find_first_of`I","Fragments":["just"]},{"Key":"`find_first_of`I just","Fragments":["find"]},{"Key":"just find","Fragments":["myself"]},{"Key":"find myself","Fragments":["explicitely"]},{"Key":"myself explicitely","Fragments":["writing"]},{"Key":"explicitely writing","Fragments":["out"]},{"Key":"writing out","Fragments":["what"]},{"Key":"what `islower`","Fragments":["and"]},{"Key":"`islower` and","Fragments":["`isupper`"]},{"Key":"and `isupper`","Fragments":["already"]},{"Key":"`isupper` already","Fragments":["do"]},{"Key":"already do","Fragments":["for"]},{"Key":" By","Fragments":["the"]},{"Key":"By the","Fragments":["way,"]},{"Key":"the way,","Fragments":["how"]},{"Key":"way, how","Fragments":["can"]},{"Key":"how can","Fragments":["I"]},{"Key":"can I","Fragments":["put","use"]},{"Key":"put a","Fragments":["link"]},{"Key":"a link","Fragments":["in"]},{"Key":"link in","Fragments":["`this"]},{"Key":"in `this","Fragments":["kind"]},{"Key":"`this kind","Fragments":["of"]},{"Key":"of text`","Fragments":["like"]},{"Key":"text` like","Fragments":["you've"]},{"Key":"like you've","Fragments":["done"]},{"Key":"you've done","Fragments":["with"]},{"Key":"done with","Fragments":["the"]},{"Key":"the `find_first_of`","Fragments":["link"]},{"Key":"`find_first_of` link","Fragments":["to"]},{"Key":"link to","Fragments":["cplusplus?"]},{"Key":"to cplusplus?","Fragments":["`[the"]},{"Key":"cplusplus? `[the","Fragments":["usual"]},{"Key":"`[the usual","Fragments":["way](doesn't"]},{"Key":"usual way](doesn't","Fragments":["work)`."]},{"Key":"1. Make","Fragments":["text"]},{"Key":"Make text","Fragments":["contain"]},{"Key":"text contain","Fragments":["lowered"]},{"Key":"contain lowered","Fragments":["characters"]},{"Key":" 2.","Fragments":["Apply","to","I","Everything"]},{"Key":"2. Apply","Fragments":["regular"]},{"Key":"Apply regular","Fragments":["expression"]},{"Key":" 3.","Fragments":["Find"]},{"Key":"3. Find","Fragments":["word"]},{"Key":"Find word","Fragments":["in"]},{"Key":"word in","Fragments":["map"]},{"Key":"in map","Fragments":["and","already?"]},{"Key":"- increment","Fragments":["its"]},{"Key":"increment its","Fragments":["counter"]},{"Key":"its counter","Fragments":["by"]},{"Key":"counter by","Fragments":["1"]},{"Key":"by 1","Fragments":["if"]},{"Key":"1 if","Fragments":["key"]},{"Key":"if key","Fragments":["already"]},{"Key":"key already","Fragments":["exist","exists."]},{"Key":"- or","Fragments":["insert"]},{"Key":"or insert","Fragments":["this"]},{"Key":"insert this","Fragments":["new"]},{"Key":"new word","Fragments":["with"]},{"Key":"word with","Fragments":["paired","each","whitespace"]},{"Key":"with paired","Fragments":["value"]},{"Key":"paired value","Fragments":["of"]},{"Key":"of 1","Fragments":["instead."]},{"Key":" 4.","Fragments":["Done."]},{"Key":"tell you","Fragments":["much"]},{"Key":"you much","Fragments":["about"]},{"Key":"much about","Fragments":["its"]},{"Key":"about its","Fragments":["professional"]},{"Key":"its professional","Fragments":["use"]},{"Key":"professional use","Fragments":["since"]},{"Key":"use since","Fragments":["most"]},{"Key":"since most","Fragments":["large"]},{"Key":"most large","Fragments":["code"]},{"Key":"large code","Fragments":["bases"]},{"Key":"code bases","Fragments":["I've","were"]},{"Key":"bases I've","Fragments":["looked"]},{"Key":"I've looked","Fragments":["at"]},{"Key":"looked at","Fragments":["are","whether","the"]},{"Key":"at are","Fragments":["either"]},{"Key":"are either","Fragments":["mostly"]},{"Key":"either mostly","Fragments":["or"]},{"Key":"mostly or","Fragments":["completely"]},{"Key":"or completely","Fragments":["in"]},{"Key":"completely in","Fragments":["C"]},{"Key":"in C","Fragments":["or","before"]},{"Key":"C or","Fragments":["do"]},{"Key":"or do","Fragments":["not"]},{"Key":"do not","Fragments":["use","use","check","improve","know","modify","see"]},{"Key":"use C++'s","Fragments":["standard","regex"]},{"Key":"C++'s standard","Fragments":["library."]},{"Key":"But this","Fragments":["isn't","is"]},{"Key":"isn't necessarily","Fragments":["an"]},{"Key":"necessarily an","Fragments":["accurate"]},{"Key":"an accurate","Fragments":["depiction"]},{"Key":"accurate depiction","Fragments":["is"]},{"Key":"depiction is","Fragments":["reality."]},{"Key":"is reality.","Fragments":["Most"]},{"Key":"reality. Most","Fragments":["of"]},{"Key":"Most of","Fragments":["these"]},{"Key":"these code","Fragments":["bases"]},{"Key":"bases were","Fragments":["started"]},{"Key":"were started","Fragments":["before"]},{"Key":"started before","Fragments":["the"]},{"Key":"before the","Fragments":["advent","string."]},{"Key":"the advent","Fragments":["of"]},{"Key":"advent of","Fragments":["C++11"]},{"Key":"of C++11","Fragments":["and"]},{"Key":"more modern","Fragments":["compilers."]},{"Key":"be highly","Fragments":["appreciated"]},{"Key":"highly appreciated","Fragments":["in"]},{"Key":"appreciated in","Fragments":["academic"]},{"Key":"in academic","Fragments":["circles."]},{"Key":"academic circles.","Fragments":["For"]},{"Key":"circles. For","Fragments":["example,"]},{"Key":"example, you","Fragments":["have"]},{"Key":"have authors","Fragments":["like"]},{"Key":"authors like","Fragments":["Josuttis"]},{"Key":"like Josuttis","Fragments":["or"]},{"Key":"Josuttis or","Fragments":["Meyers"]},{"Key":"or Meyers","Fragments":["writing"]},{"Key":"Meyers writing","Fragments":["whole"]},{"Key":"writing whole","Fragments":["books"]},{"Key":"whole books","Fragments":["about"]},{"Key":"books about","Fragments":["the"]},{"Key":"the STL","Fragments":["and","since"]},{"Key":"STL and","Fragments":["make"]},{"Key":"and make","Fragments":["great","some"]},{"Key":"make great","Fragments":["use"]},{"Key":"great use","Fragments":["of"]},{"Key":"of its","Fragments":["algorithm","length","translation"]},{"Key":"its algorithm","Fragments":["part."]},{"Key":"algorithm part.","Fragments":["[Here](http://www.josuttis.com/libbook/algolist.pdf)"]},{"Key":"part. [Here](http://www.josuttis.com/libbook/algolist.pdf)","Fragments":["is"]},{"Key":"[Here](http://www.josuttis.com/libbook/algolist.pdf) is","Fragments":["Meyer's"]},{"Key":"is Meyer's","Fragments":["reference"]},{"Key":"Meyer's reference","Fragments":["card"]},{"Key":"reference card","Fragments":["for"]},{"Key":"card for","Fragments":["algorithm,"]},{"Key":"for algorithm,","Fragments":["by"]},{"Key":"algorithm, by","Fragments":["the"]},{"Key":" Personally,","Fragments":["I","I"]},{"Key":"Personally, I","Fragments":["love","wouldn't"]},{"Key":"love it.","Fragments":["I've"]},{"Key":"it. I've","Fragments":["revisited"]},{"Key":"I've revisited","Fragments":["some"]},{"Key":"revisited some","Fragments":["older"]},{"Key":"some older","Fragments":["code"]},{"Key":"older code","Fragments":["and"]},{"Key":"code and","Fragments":["looked","no","return","still"]},{"Key":"and looked","Fragments":["for"]},{"Key":"looked for","Fragments":["places"]},{"Key":"for places","Fragments":["to"]},{"Key":"places to","Fragments":["replace"]},{"Key":"to replace","Fragments":["my","```boost::algorithm::ends_with(str2,"]},{"Key":"replace my","Fragments":["handwritten"]},{"Key":"my handwritten","Fragments":["code","stuff"]},{"Key":"handwritten code","Fragments":["with"]},{"Key":"code with","Fragments":["algorithm","this.","this.","and"]},{"Key":"with algorithm","Fragments":["calls."]},{"Key":"algorithm calls.","Fragments":["They're"]},{"Key":"calls. They're","Fragments":["usually"]},{"Key":"They're usually","Fragments":["faster,"]},{"Key":"usually faster,","Fragments":["smaller"]},{"Key":"faster, smaller","Fragments":["and"]},{"Key":"smaller and","Fragments":["more","more"]},{"Key":"more concise.","Fragments":["And"]},{"Key":"concise. And","Fragments":["they're"]},{"Key":"And they're","Fragments":["pretty"]},{"Key":"they're pretty","Fragments":["much"]},{"Key":"much guarenteed","Fragments":["to"]},{"Key":"guarenteed to","Fragments":["be"]},{"Key":"be free","Fragments":["of"]},{"Key":"free of","Fragments":["bugs","heap"]},{"Key":"of bugs","Fragments":["-"]},{"Key":"bugs -","Fragments":["unless"]},{"Key":"- unless","Fragments":["my"]},{"Key":"unless my","Fragments":["handwritten"]},{"Key":"handwritten stuff","Fragments":[":)"]},{"Key":"I'm only","Fragments":["learning"]},{"Key":"only learning","Fragments":["the"]},{"Key":"learning the","Fragments":["ways"]},{"Key":"the ways","Fragments":["of","you"]},{"Key":"ways of","Fragments":["the"]},{"Key":"the algorithms","Fragments":["myself."]},{"Key":"algorithms myself.","Fragments":["[Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)"]},{"Key":"myself. [Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)","Fragments":["is"]},{"Key":"[Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1) is","Fragments":["my"]},{"Key":"my implementation","Fragments":["of"]},{"Key":"the Bob","Fragments":["exercise,","question,"]},{"Key":"Bob exercise,","Fragments":["I"]},{"Key":"exercise, I","Fragments":["love"]},{"Key":"the simplicity","Fragments":["and"]},{"Key":"simplicity and","Fragments":["verbosity"]},{"Key":"and verbosity","Fragments":["of"]},{"Key":"verbosity of","Fragments":["it."]},{"Key":"it. A","Fragments":["line"]},{"Key":"A line","Fragments":["such"]},{"Key":"line such","Fragments":["as"]},{"Key":"as `any_of(str.begin(),","Fragments":["str.end(),"]},{"Key":"`any_of(str.begin(), str.end(),","Fragments":["isupper)`"]},{"Key":"str.end(), isupper)`","Fragments":["immediately"]},{"Key":"isupper)` immediately","Fragments":["gives"]},{"Key":"immediately gives","Fragments":["you"]},{"Key":"gives you","Fragments":["all"]},{"Key":"you all","Fragments":["the"]},{"Key":"necessary information","Fragments":["to"]},{"Key":"information to","Fragments":["know"]},{"Key":"know what","Fragments":["it","the","you","that"]},{"Key":" Almost..","Fragments":["you"]},{"Key":"Almost.. you","Fragments":["forgot"]},{"Key":"you forgot","Fragments":["the"]},{"Key":"forgot the","Fragments":["\u0026.","old,"]},{"Key":" it","Fragments":["should","would"]},{"Key":"means you","Fragments":["are","gain"]},{"Key":"passing str","Fragments":["by"]},{"Key":"str by","Fragments":["reference"]},{"Key":"reference (so,","Fragments":["no"]},{"Key":"(so, no","Fragments":["copy),"]},{"Key":"no copy),","Fragments":["but"]},{"Key":"copy), but","Fragments":["its"]},{"Key":"but its","Fragments":["content"]},{"Key":"its content","Fragments":["cannot"]},{"Key":"content cannot","Fragments":["be"]},{"Key":"cannot be","Fragments":["modified"]},{"Key":" @laverna:","Fragments":["Thanks!"]},{"Key":"@laverna: Thanks!","Fragments":["I"]},{"Key":"Thanks! I","Fragments":["agree"]},{"Key":"agree that","Fragments":["checking","well"]},{"Key":"that checking","Fragments":["for"]},{"Key":"for whitespace","Fragments":["at","after"]},{"Key":"whitespace at","Fragments":["the"]},{"Key":"end would","Fragments":["have","probably"]},{"Key":"would have","Fragments":["been","been","done","to","done","added","used","changed","been"]},{"Key":"have been","Fragments":["better","so","explicitly","apart","left","implemented.","easier"]},{"Key":"been better","Fragments":["-"]},{"Key":"better -","Fragments":["I"]},{"Key":"- I","Fragments":["only","guess","use","do"]},{"Key":"only went","Fragments":["as"]},{"Key":"went as","Fragments":["far"]},{"Key":"as far","Fragments":["as"]},{"Key":"far as","Fragments":["required"]},{"Key":"as required","Fragments":["to"]},{"Key":"think regex","Fragments":["is"]},{"Key":"regex is","Fragments":["an","really","overkill","cheating","kind","a"]},{"Key":"overkill here.","Fragments":["It"]},{"Key":"here. It","Fragments":["might","looks","only"]},{"Key":"It might","Fragments":["work"]},{"Key":"might work","Fragments":["but"]},{"Key":"work but","Fragments":["it"]},{"Key":"it certainly","Fragments":["could"]},{"Key":"certainly could","Fragments":["be"]},{"Key":"Good call","Fragments":["on","on"]},{"Key":"call on","Fragments":["the","the","lines"]},{"Key":"the trailing","Fragments":["space."]},{"Key":"trailing space.","Fragments":["This"]},{"Key":"space. This","Fragments":["actually"]},{"Key":"This actually","Fragments":["fails"]},{"Key":"actually fails","Fragments":["most"]},{"Key":"fails most","Fragments":["of"]},{"Key":"cases in","Fragments":["retrospect;"]},{"Key":"in retrospect;","Fragments":["I"]},{"Key":"retrospect; I","Fragments":["goofed"]},{"Key":"I goofed","Fragments":["up"]},{"Key":"goofed up","Fragments":["in"]},{"Key":"up in","Fragments":["re-enabling"]},{"Key":"in re-enabling","Fragments":["the"]},{"Key":"re-enabling the","Fragments":["full"]},{"Key":"the full","Fragments":["suite.","source"]},{"Key":"full suite.","Fragments":["Will"]},{"Key":"suite. Will","Fragments":["be"]},{"Key":"Will be","Fragments":["starting"]},{"Key":"be starting","Fragments":["over"]},{"Key":"starting over","Fragments":["more"]},{"Key":"over more","Fragments":["or"]},{"Key":"more or","Fragments":["less."]},{"Key":"One small","Fragments":["thing:"]},{"Key":"small thing:","Fragments":["I"]},{"Key":"thing: I","Fragments":["would"]},{"Key":"would recommend","Fragments":["using"]},{"Key":"recommend using","Fragments":["nonmember"]},{"Key":"using nonmember","Fragments":["begin/end"]},{"Key":"nonmember begin/end","Fragments":["instead."]},{"Key":"begin/end instead.","Fragments":["It"]},{"Key":"instead. It","Fragments":["works"]},{"Key":"It works","Fragments":["with"]},{"Key":"works with","Fragments":["many"]},{"Key":"with many","Fragments":["more"]},{"Key":"many more","Fragments":["types"]},{"Key":"more types","Fragments":["and"]},{"Key":"types and","Fragments":["its"]},{"Key":"and its","Fragments":["good","calls"]},{"Key":"its good","Fragments":["to"]},{"Key":"good to","Fragments":["get","check"]},{"Key":"get in","Fragments":["the"]},{"Key":"the habit,","Fragments":["especially"]},{"Key":"habit, especially","Fragments":["since"]},{"Key":"especially since","Fragments":["it","there","this"]},{"Key":"since it","Fragments":["is","only"]},{"Key":"more flexible","Fragments":["since"]},{"Key":"flexible since","Fragments":["you"]},{"Key":"can implement","Fragments":["begin/end"]},{"Key":"implement begin/end","Fragments":["for"]},{"Key":"begin/end for","Fragments":["any"]},{"Key":"for any","Fragments":["type","imaginable"]},{"Key":"any type","Fragments":["without"]},{"Key":"type without","Fragments":["touching"]},{"Key":"without touching","Fragments":["the"]},{"Key":"touching the","Fragments":["actual"]},{"Key":"Also, it","Fragments":["might"]},{"Key":"be good","Fragments":["to"]},{"Key":"where there","Fragments":["is","are"]},{"Key":"is whitespace","Fragments":["after"]},{"Key":"whitespace after","Fragments":["the","the"]},{"Key":" Complete","Fragments":["rewrite"]},{"Key":"Complete rewrite","Fragments":["of"]},{"Key":"rewrite of","Fragments":["the"]},{"Key":"previous attempt.","Fragments":["Less"]},{"Key":"attempt. Less","Fragments":["succinct"]},{"Key":"Less succinct","Fragments":["and"]},{"Key":"succinct and","Fragments":["elegant,"]},{"Key":"and elegant,","Fragments":["perhaps,"]},{"Key":"elegant, perhaps,","Fragments":["but"]},{"Key":"perhaps, but","Fragments":["the"]},{"Key":"the concept","Fragments":["now"]},{"Key":"concept now","Fragments":["is"]},{"Key":"now is","Fragments":["to","branch"]},{"Key":"to build","Fragments":["a"]},{"Key":"build a","Fragments":["state"]},{"Key":"a state","Fragments":["machine"]},{"Key":"state machine","Fragments":["and"]},{"Key":"machine and","Fragments":["treat"]},{"Key":"and treat","Fragments":["Bob"]},{"Key":"treat Bob","Fragments":["as"]},{"Key":"Bob as","Fragments":["a"]},{"Key":"a language","Fragments":["to"]},{"Key":"language to","Fragments":["parse,"]},{"Key":"to parse,","Fragments":["not"]},{"Key":"parse, not","Fragments":["as"]},{"Key":"not as","Fragments":["a","\"C++-esque\""]},{"Key":"a trivial","Fragments":["coding","task,"]},{"Key":"trivial coding","Fragments":["exercise."]},{"Key":"coding exercise.","Fragments":["See"]},{"Key":"exercise. See","Fragments":["several"]},{"Key":"See several","Fragments":["dumb"]},{"Key":"several dumb","Fragments":["things"]},{"Key":"dumb things","Fragments":["now,"]},{"Key":"things now,","Fragments":["even"]},{"Key":"now, even","Fragments":["though"]},{"Key":"this \"works.\"","Fragments":["Will"]},{"Key":"\"works.\" Will","Fragments":["have"]},{"Key":"Will have","Fragments":["a"]},{"Key":"a revised","Fragments":["version"]},{"Key":"revised version","Fragments":["shortly."]},{"Key":" Same","Fragments":["as"]},{"Key":"Same as","Fragments":["last"]},{"Key":"as last","Fragments":["approach,"]},{"Key":"last approach,","Fragments":["without"]},{"Key":"approach, without","Fragments":["the"]},{"Key":"the redundancy.","Fragments":["Again,"]},{"Key":"redundancy. Again,","Fragments":["basic"]},{"Key":"Again, basic","Fragments":["idea"]},{"Key":"basic idea","Fragments":["is"]},{"Key":"idea is","Fragments":["to"]},{"Key":"to treat","Fragments":["this"]},{"Key":"treat this","Fragments":["as"]},{"Key":"an FSM/language","Fragments":["instead"]},{"Key":"FSM/language instead","Fragments":["of"]},{"Key":"of trying","Fragments":["to"]},{"Key":"be succinct/clever.","Fragments":["Has"]},{"Key":"succinct/clever. Has","Fragments":["the"]},{"Key":"Has the","Fragments":["downside"]},{"Key":"the downside","Fragments":["of"]},{"Key":"downside of","Fragments":["potentially"]},{"Key":"of potentially","Fragments":["re-assigning"]},{"Key":"potentially re-assigning","Fragments":["the"]},{"Key":"re-assigning the","Fragments":["identical"]},{"Key":"the identical","Fragments":["state,"]},{"Key":"identical state,","Fragments":["but"]},{"Key":"state, but","Fragments":["we're"]},{"Key":"but we're","Fragments":["not"]},{"Key":"not talking","Fragments":["about"]},{"Key":"about a","Fragments":["material","case","better"]},{"Key":"a material","Fragments":["about"]},{"Key":"material about","Fragments":["of"]},{"Key":"about of","Fragments":["overhead"]},{"Key":"overhead here,","Fragments":["and"]},{"Key":"here, and","Fragments":["I"]},{"Key":"think keeping","Fragments":["the"]},{"Key":"keeping the","Fragments":["code","same","class"]},{"Key":"code simpler","Fragments":["is"]},{"Key":"simpler is","Fragments":["better"]},{"Key":"better than","Fragments":["trying","passing","the"]},{"Key":"than trying","Fragments":["to"]},{"Key":"to optimize","Fragments":["away"]},{"Key":"optimize away","Fragments":["a"]},{"Key":"away a","Fragments":["redundant"]},{"Key":"a redundant","Fragments":["assignment."]},{"Key":" Suppose","Fragments":["I"]},{"Key":"Suppose I","Fragments":["could"]},{"Key":"use an","Fragments":["unordered_map","auto","`istringstream`","unordered_map","if-elseif-else","enum"]},{"Key":"an unordered_map","Fragments":["here","because"]},{"Key":"unordered_map here","Fragments":["instead,"]},{"Key":"here instead,","Fragments":["if"]},{"Key":"instead, if","Fragments":["need"]},{"Key":"if need","Fragments":["be."]},{"Key":" Added","Fragments":["boost::trim(words)"]},{"Key":"Added boost::trim(words)","Fragments":["to"]},{"Key":"boost::trim(words) to","Fragments":["remove"]},{"Key":"remove trailing","Fragments":["white"]},{"Key":"trailing white","Fragments":["spaces"]},{"Key":"spaces and","Fragments":["a","newlines,"]},{"Key":"a check","Fragments":["on","_if","to"]},{"Key":"check on","Fragments":["empty"]},{"Key":"on empty","Fragments":["string.","strings.\"","string\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e","string."]},{"Key":"I'd prefer","Fragments":["to","prefix"]},{"Key":"prefer to","Fragments":["remove","do","include"]},{"Key":"the recursion","Fragments":["though."]},{"Key":"Not sure","Fragments":["this","if"]},{"Key":"sure this","Fragments":["could"]},{"Key":"made much","Fragments":["simpler."]},{"Key":"much simpler.","Fragments":["Could"]},{"Key":"simpler. Could","Fragments":["try"]},{"Key":"Could try","Fragments":["to"]},{"Key":"to transform/accumulate","Fragments":["but"]},{"Key":"transform/accumulate but","Fragments":["that"]},{"Key":"but that","Fragments":["seems","was","really","kind"]},{"Key":"that seems","Fragments":["sort"]},{"Key":"input is","Fragments":["a","not","yelled","a"]},{"Key":"a char*,","Fragments":["I"]},{"Key":"char*, I","Fragments":["used"]},{"Key":"used char","Fragments":["array"]},{"Key":"char array","Fragments":["based"]},{"Key":"array based","Fragments":["functions"]},{"Key":"based functions","Fragments":["to"]},{"Key":"to classify","Fragments":["the"]},{"Key":"classify the","Fragments":["input."]},{"Key":"a switch","Fragments":["statement","statement"]},{"Key":"statement to","Fragments":["make","have","increase"]},{"Key":"make a","Fragments":["first"]},{"Key":"first pass","Fragments":["at"]},{"Key":"pass at","Fragments":["the"]},{"Key":"the input,","Fragments":["broadly"]},{"Key":"input, broadly","Fragments":["categorizing"]},{"Key":"broadly categorizing","Fragments":["questions,"]},{"Key":"categorizing questions,","Fragments":["yelled"]},{"Key":"questions, yelled","Fragments":["statements,"]},{"Key":"yelled statements,","Fragments":["and"]},{"Key":"statements, and","Fragments":["no"]},{"Key":"no input","Fragments":["by"]},{"Key":"input by","Fragments":["looking","value","reference."]},{"Key":"character in","Fragments":["the"]},{"Key":"the second","Fragments":["pass,","note","loop.","iteration!"]},{"Key":"second pass,","Fragments":["I"]},{"Key":"pass, I","Fragments":["looked"]},{"Key":"I looked","Fragments":["at","at"]},{"Key":"at whether","Fragments":["the"]},{"Key":"message has","Fragments":["mostly"]},{"Key":"has mostly","Fragments":["capital"]},{"Key":"mostly capital","Fragments":["letters,"]},{"Key":"capital letters,","Fragments":["which"]},{"Key":"letters, which","Fragments":["would"]},{"Key":"which would","Fragments":["seem","leave","also","increase"]},{"Key":"would seem","Fragments":["to"]},{"Key":"to indicate","Fragments":["a"]},{"Key":"indicate a","Fragments":["yelled"]},{"Key":"a yelled","Fragments":["statement,"]},{"Key":"yelled statement,","Fragments":["or"]},{"Key":"statement, or","Fragments":["whether"]},{"Key":"or whether","Fragments":["the"]},{"Key":"is all","Fragments":["spaces.","capital","that"]},{"Key":"all spaces.","Fragments":["I"]},{"Key":"spaces. I","Fragments":["then"]},{"Key":"I then","Fragments":["checked"]},{"Key":"then checked","Fragments":["for","for"]},{"Key":"checked for","Fragments":["whether","emptyness"]},{"Key":"for whether","Fragments":["the"]},{"Key":"message starts","Fragments":["with"]},{"Key":"starts with","Fragments":["\"Let's\""]},{"Key":"with \"Let's\"","Fragments":["and"]},{"Key":"\"Let's\" and","Fragments":["take"]},{"Key":"and take","Fragments":["this"]},{"Key":"take this","Fragments":["to"]},{"Key":"this to","Fragments":["mean","simplify","be","me?"]},{"Key":"to mean","Fragments":["a"]},{"Key":"mean a","Fragments":["suggestion,"]},{"Key":"a suggestion,","Fragments":["even"]},{"Key":"suggestion, even","Fragments":["if"]},{"Key":"it contradicts","Fragments":["the"]},{"Key":"contradicts the","Fragments":["previous"]},{"Key":"to separate","Fragments":["the","control","implementation"]},{"Key":"separate the","Fragments":["header"]},{"Key":"header and","Fragments":["implementation","body."]},{"Key":"and implementation","Fragments":["for"]},{"Key":"implementation for","Fragments":["this."]},{"Key":"for this.","Fragments":["Otherwise"]},{"Key":"this. Otherwise","Fragments":["I'm"]},{"Key":"Otherwise I'm","Fragments":["pretty"]},{"Key":"I'm pretty","Fragments":["happy"]},{"Key":"pretty happy","Fragments":["with"]},{"Key":"It could","Fragments":["be","be"]},{"Key":"be optimized","Fragments":["as","out.","quite"]},{"Key":"optimized as","Fragments":["I'm"]},{"Key":"I'm certain","Fragments":["I"]},{"Key":"certain I","Fragments":["am"]},{"Key":"am iterating","Fragments":["over"]},{"Key":"string a","Fragments":["few"]},{"Key":" many","Fragments":["times"]},{"Key":"many times","Fragments":["but"]},{"Key":"times but","Fragments":["this"]},{"Key":"much more","Fragments":["readable","succinctly."]},{"Key":"more readable","Fragments":["I","without","by","on","and"]},{"Key":"readable I","Fragments":["think."]},{"Key":"As I","Fragments":["learn"]},{"Key":"I learn","Fragments":["C++11"]},{"Key":"learn C++11","Fragments":["I"]},{"Key":"C++11 I","Fragments":["still"]},{"Key":"I still","Fragments":["can't","like"]},{"Key":"still can't","Fragments":["quite"]},{"Key":"can't quite","Fragments":["find"]},{"Key":"quite find","Fragments":["a"]},{"Key":"a layout","Fragments":["for"]},{"Key":"layout for","Fragments":["lambdas"]},{"Key":"for lambdas","Fragments":["that"]},{"Key":"lambdas that","Fragments":["I"]},{"Key":"I like,","Fragments":["any"]},{"Key":"like, any","Fragments":["good"]},{"Key":"any good","Fragments":["ideas?"]},{"Key":"that your","Fragments":["functions","loop"]},{"Key":"your functions","Fragments":["only","accept"]},{"Key":"functions only","Fragments":["do"]},{"Key":"only do","Fragments":["one"]},{"Key":"one thing.","Fragments":["They"]},{"Key":"thing. They","Fragments":["do"]},{"Key":"They do","Fragments":["only"]},{"Key":"do only","Fragments":["what"]},{"Key":"only what","Fragments":["they"]},{"Key":"what they","Fragments":["say","say.","say","do(might"]},{"Key":"they say","Fragments":["they","they"]},{"Key":"say they","Fragments":["do.","would*."]},{"Key":"they do.","Fragments":["The"]},{"Key":"do. The","Fragments":["names"]},{"Key":"The names","Fragments":["are"]},{"Key":"names are","Fragments":["explicit","oddly"]},{"Key":"are explicit","Fragments":["and"]},{"Key":"explicit and","Fragments":["correct."]},{"Key":"In my","Fragments":["exercise","opinion"]},{"Key":"my exercise","Fragments":["I"]},{"Key":"exercise I","Fragments":["was"]},{"Key":"was a","Fragments":["little","pain","pointless","random"]},{"Key":"little bit","Fragments":["less","of"]},{"Key":"bit less","Fragments":["explicit."]},{"Key":"less explicit.","Fragments":["I"]},{"Key":"explicit. I","Fragments":["just"]},{"Key":"just called","Fragments":["them"]},{"Key":"called them","Fragments":["isQuestion,"]},{"Key":"them isQuestion,","Fragments":["isShout,"]},{"Key":"isQuestion, isShout,","Fragments":["etc;"]},{"Key":"isShout, etc;","Fragments":["which"]},{"Key":"etc; which","Fragments":["is"]},{"Key":"is also","Fragments":["fine","very"]},{"Key":"also fine","Fragments":["because"]},{"Key":"fine because","Fragments":["they"]},{"Key":"they do","Fragments":["what","not"]},{"Key":"Try to","Fragments":["avoid"]},{"Key":"avoid `using","Fragments":["namespace"]},{"Key":"std` because","Fragments":["it"]},{"Key":"might give","Fragments":["you"]},{"Key":"give you","Fragments":["some","unique"]},{"Key":"you some","Fragments":["conflicting"]},{"Key":"some conflicting","Fragments":["types"]},{"Key":"conflicting types","Fragments":["in"]},{"Key":"in bigger","Fragments":["projects."]},{"Key":"bigger projects.","Fragments":["Here"]},{"Key":"projects. Here","Fragments":["you"]},{"Key":"Here you","Fragments":["could","could"]},{"Key":"use `using","Fragments":["std::string`"]},{"Key":"`using std::string`","Fragments":["instead.","within"]},{"Key":"std::string` instead.","Fragments":["That"]},{"Key":"don't get","Fragments":["all"]},{"Key":"get all","Fragments":["the","instances"]},{"Key":"stuff from","Fragments":["stl."]},{"Key":"Your string","Fragments":["arguments"]},{"Key":"string arguments","Fragments":["can"]},{"Key":"arguments can","Fragments":["(and"]},{"Key":"can (and","Fragments":["should)"]},{"Key":"(and should)","Fragments":["be"]},{"Key":"should) be","Fragments":["const"]},{"Key":"be const","Fragments":["references."]},{"Key":"const references.","Fragments":["This"]},{"Key":"references. This","Fragments":["avoids"]},{"Key":"This avoids","Fragments":["unnecessary"]},{"Key":"avoids unnecessary","Fragments":["copying/moving."]},{"Key":"1) If","Fragments":["you"]},{"Key":"are not","Fragments":["going","needed"]},{"Key":"not going","Fragments":["to","to"]},{"Key":"modify a","Fragments":["string"]},{"Key":"in your","Fragments":["function","code:","for","example","function.","loops","program?","header","source"]},{"Key":"your function","Fragments":["it"]},{"Key":"function it","Fragments":["is"]},{"Key":"better to","Fragments":["pass","use","implement","remove","operate"]},{"Key":"in as","Fragments":["a"]},{"Key":"reference rather","Fragments":["than","than"]},{"Key":"than by","Fragments":["value."]},{"Key":"by value.","Fragments":["That","Less"]},{"Key":"value. That","Fragments":["means"]},{"Key":"That means","Fragments":["you"]},{"Key":"you gain","Fragments":["a"]},{"Key":"gain a","Fragments":["bit"]},{"Key":" of","Fragments":["performance"]},{"Key":"of performance","Fragments":["by"]},{"Key":"performance by","Fragments":["avoiding"]},{"Key":"by avoiding","Fragments":["an"]},{"Key":"avoiding an","Fragments":["unnecessary"]},{"Key":"an unnecessary","Fragments":["copy.","conversion"]},{"Key":" e.g.","Fragments":["for","for"]},{"Key":"e.g. for","Fragments":["your","(size_t"]},{"Key":"for your","Fragments":["IsUpper","yelling","comments.","comment."]},{"Key":"your IsUpper","Fragments":["function"]},{"Key":"IsUpper function","Fragments":["declare"]},{"Key":"function declare","Fragments":["it"]},{"Key":"declare it","Fragments":["as"]},{"Key":" ```bool","Fragments":["IsUpper(const"]},{"Key":"```bool IsUpper(const","Fragments":["std::string"]},{"Key":"IsUpper(const std::string","Fragments":["\u0026str)"]},{"Key":"2) Depending","Fragments":["on"]},{"Key":"Depending on","Fragments":["your"]},{"Key":"your preferences","Fragments":["you"]},{"Key":"preferences you","Fragments":["can"]},{"Key":"code a","Fragments":["little","bit","litte."]},{"Key":"little less","Fragments":["verbose"]},{"Key":"verbose by","Fragments":["using"]},{"Key":"by using","Fragments":["some","more","regex","I/O"]},{"Key":"the functions","Fragments":["in","available","the","members","i"]},{"Key":"in ```#\u003calgorithm\u003e```","Fragments":["rather","([see"]},{"Key":"```#\u003calgorithm\u003e``` rather","Fragments":["than"]},{"Key":"than explicit","Fragments":["loops."]},{"Key":"For example","Fragments":["your"]},{"Key":"example your","Fragments":["IsEmpty"]},{"Key":"your IsEmpty","Fragments":["function"]},{"Key":"IsEmpty function","Fragments":["can"]},{"Key":"written as","Fragments":["one","```for("]},{"Key":"as one","Fragments":["line"]},{"Key":"one line","Fragments":["as","of","was","but,"]},{"Key":" ```std::all_of(str.begin(),","Fragments":["str.end(),"]},{"Key":"```std::all_of(str.begin(), str.end(),","Fragments":["isspace);"]},{"Key":" very","Fragments":["nice"]},{"Key":"very nice","Fragments":["and"]},{"Key":"nice and","Fragments":["clean.","efficient","clean."]},{"Key":" put","Fragments":["it"]},{"Key":"* instead","Fragments":["of"]},{"Key":"using include","Fragments":["guards,","guards"]},{"Key":"include guards,","Fragments":["try"]},{"Key":"guards, try","Fragments":["using"]},{"Key":"try using","Fragments":["[`#pragma","some"]},{"Key":"using [`#pragma","Fragments":["once`](https://en.wikipedia.org/wiki/Pragma_once)"]},{"Key":" Regarding","Fragments":["the","your"]},{"Key":"Regarding the","Fragments":["argument"]},{"Key":"your function:","Fragments":["you"]},{"Key":"function: you","Fragments":["should"]},{"Key":"pass it","Fragments":["by","as","by","an"]},{"Key":"it by","Fragments":["reference,","value."]},{"Key":"by reference,","Fragments":["and"]},{"Key":"reference, and","Fragments":["avoid"]},{"Key":"and avoid","Fragments":["it","having"]},{"Key":"avoid it","Fragments":["be"]},{"Key":"it be","Fragments":["written:","okay","that,","more","better"]},{"Key":"be written:","Fragments":["use"]},{"Key":"written: use","Fragments":["\"std::string"]},{"Key":"use \"std::string","Fragments":["hey(const"]},{"Key":"\"std::string hey(const","Fragments":["std::string"]},{"Key":"hey(const std::string","Fragments":["\u0026string)\""]},{"Key":" Generally","Fragments":["speaking,"]},{"Key":"Generally speaking,","Fragments":["your"]},{"Key":"speaking, your","Fragments":["algorithm"]},{"Key":"your algorithm","Fragments":["is","return"]},{"Key":"is similar","Fragments":["to"]},{"Key":"similar to","Fragments":["mine."]},{"Key":"* good","Fragments":["idea"]},{"Key":"use #pragma","Fragments":["once."]},{"Key":"#pragma once.","Fragments":["Up"]},{"Key":"once. Up","Fragments":["until"]},{"Key":"Up until","Fragments":["now"]},{"Key":"until now","Fragments":["I've"]},{"Key":"now I've","Fragments":["been"]},{"Key":"I've been","Fragments":["using","using"]},{"Key":"been using","Fragments":["include","C#"]},{"Key":" Use","Fragments":["of","prefix-","std::min","`isspace`"]},{"Key":"Use of","Fragments":["std::string"]},{"Key":"std::string is","Fragments":["far"]},{"Key":"is far","Fragments":["from"]},{"Key":"far from","Fragments":["optimal"]},{"Key":"from optimal","Fragments":["-"]},{"Key":"optimal -","Fragments":["perhaps"]},{"Key":"- perhaps","Fragments":["better"]},{"Key":"perhaps better","Fragments":["to"]},{"Key":"use \"C\"","Fragments":["in"]},{"Key":"\"C\" in","Fragments":["this"]},{"Key":"this scenario","Fragments":["since"]},{"Key":"scenario since","Fragments":["all"]},{"Key":"since all","Fragments":["strings","members"]},{"Key":"all strings","Fragments":["are"]},{"Key":"are constant.","Fragments":["More"]},{"Key":"constant. More","Fragments":["specifically:"]},{"Key":"More specifically:","Fragments":["re-constructing"]},{"Key":"specifically: re-constructing","Fragments":["the"]},{"Key":"re-constructing the","Fragments":["object"]},{"Key":"the object","Fragments":["might"]},{"Key":"object might","Fragments":["have"]},{"Key":"might have","Fragments":["impact","a"]},{"Key":"have impact","Fragments":["-"]},{"Key":"impact -","Fragments":["I"]},{"Key":"guess this","Fragments":["will"]},{"Key":"this will","Fragments":["depend"]},{"Key":"will depend","Fragments":["on"]},{"Key":"depend on","Fragments":["the"]},{"Key":"the compiler","Fragments":["optimizations.","automatically","beforehand","looks","will","a","a","a"]},{"Key":"It may","Fragments":["be"]},{"Key":"may be","Fragments":["possible","interested","easier"]},{"Key":"be possible","Fragments":["to"]},{"Key":"possible to","Fragments":["exit","avoid"]},{"Key":"to exit","Fragments":["the"]},{"Key":"exit the","Fragments":["loop"]},{"Key":"loop sooner,","Fragments":["but"]},{"Key":"sooner, but","Fragments":["I"]},{"Key":"I did","Fragments":["not","this","not","not"]},{"Key":"did not","Fragments":["explore","know","know","know"]},{"Key":"not explore","Fragments":["this"]},{"Key":"explore this","Fragments":["scenario."]},{"Key":"It's not","Fragments":["clear","needed","in"]},{"Key":"clear from","Fragments":["the"]},{"Key":"the specification","Fragments":["if"]},{"Key":"specification if","Fragments":["\"hey\""]},{"Key":"if \"hey\"","Fragments":["is"]},{"Key":"\"hey\" is","Fragments":["a"]},{"Key":"method of","Fragments":["a","simultaneously"]},{"Key":"a \"bob\"","Fragments":["class,"]},{"Key":"\"bob\" class,","Fragments":["or","I"]},{"Key":"or if","Fragments":["bob","it","my","there's"]},{"Key":"if bob","Fragments":["is","_is"]},{"Key":"bob is","Fragments":["a"]},{"Key":"namespace. I","Fragments":["opted"]},{"Key":"I opted","Fragments":["for","for","to"]},{"Key":"opted for","Fragments":["a","a"]},{"Key":"your approach.","Fragments":["Some"]},{"Key":"approach. Some","Fragments":["comments:"]},{"Key":"* c-style","Fragments":["casts"]},{"Key":"c-style casts","Fragments":["(bool)islower(*it))"]},{"Key":"casts (bool)islower(*it))","Fragments":["should"]},{"Key":"(bool)islower(*it)) should","Fragments":["be"]},{"Key":"be replaced","Fragments":["with","by","by","with","with","with"]},{"Key":"replaced with","Fragments":["the","something","```if","```ret[word]++;```.","its"]},{"Key":"the c++","Fragments":["versions"]},{"Key":"c++ versions","Fragments":["that"]},{"Key":"versions that","Fragments":["are"]},{"Key":"that are","Fragments":["safer","responsible"]},{"Key":"are safer","Fragments":["and"]},{"Key":"safer and","Fragments":["greppable"]},{"Key":"and greppable","Fragments":["(static_cast,"]},{"Key":"greppable (static_cast,","Fragments":["etc)"]},{"Key":"* using","Fragments":["statements"]},{"Key":"using statements","Fragments":["in","are."]},{"Key":"statements in","Fragments":["headers"]},{"Key":"in headers","Fragments":["can","though)."]},{"Key":"headers can","Fragments":["be"]},{"Key":"be dangerous","Fragments":["-"]},{"Key":"dangerous -","Fragments":["may"]},{"Key":"- may","Fragments":["want"]},{"Key":"to prefix","Fragments":["everything"]},{"Key":"prefix everything","Fragments":["with"]},{"Key":"everything with","Fragments":["std::"]},{"Key":"* You","Fragments":["deal","are"]},{"Key":"You deal","Fragments":["with"]},{"Key":"with spaces,","Fragments":["but"]},{"Key":"spaces, but","Fragments":["what"]},{"Key":"but what","Fragments":["about","happens"]},{"Key":"about other","Fragments":["whitespace?"]},{"Key":"other whitespace?","Fragments":["/t"]},{"Key":"whitespace? /t","Fragments":["/n"]},{"Key":"/t /n","Fragments":["/r"]},{"Key":"/n /r","Fragments":["etc"]},{"Key":"* What","Fragments":["about"]},{"Key":"about leading","Fragments":["or"]},{"Key":"leading or","Fragments":["trailing"]},{"Key":"or trailing","Fragments":["space?"]},{"Key":"You are","Fragments":["copying","copying"]},{"Key":"are copying","Fragments":["the","the"]},{"Key":"value and","Fragments":["return","not","I","parameter"]},{"Key":"copy -","Fragments":["you"]},{"Key":"the return","Fragments":["value","value"]},{"Key":"value a","Fragments":["constant"]},{"Key":"a constant","Fragments":["string","string"]},{"Key":"constant string","Fragments":["ref","for"]},{"Key":"string ref","Fragments":["or"]},{"Key":"ref or","Fragments":["const"]},{"Key":"or const","Fragments":["char*"]},{"Key":"char* and","Fragments":["the"]},{"Key":"input a","Fragments":["const"]},{"Key":"* The","Fragments":["for","length"]},{"Key":"The for","Fragments":["loop"]},{"Key":"loop could","Fragments":["be","however"]},{"Key":"replaced by","Fragments":["the","```question.back()```."]},{"Key":"(auto it","Fragments":[":"]},{"Key":"it :","Fragments":["input)","greeting)","message)"]},{"Key":"Another note:","Fragments":["you"]},{"Key":"note: you","Fragments":["checking"]},{"Key":"you checking","Fragments":["for"]},{"Key":"for \"allSpace\"","Fragments":["and"]},{"Key":"\"allSpace\" and","Fragments":["\"allNum\""]},{"Key":"and \"allNum\"","Fragments":["before"]},{"Key":"\"allNum\" before","Fragments":["eventually"]},{"Key":"before eventually","Fragments":["setting"]},{"Key":"eventually setting","Fragments":["it"]},{"Key":"setting it","Fragments":["to"]},{"Key":"to false.","Fragments":["It's"]},{"Key":"false. It's","Fragments":["not"]},{"Key":"not needed","Fragments":["at","for","for"]},{"Key":"needed at","Fragments":["all."]},{"Key":"Why isn't","Fragments":["the"]},{"Key":"isn't the","Fragments":["parameter","cleanest"]},{"Key":"the parameter","Fragments":["\"s\""]},{"Key":"parameter \"s\"","Fragments":["for"]},{"Key":"\"s\" for","Fragments":["\"hey()\""]},{"Key":"for \"hey()\"","Fragments":["also"]},{"Key":"\"hey()\" also","Fragments":["passed"]},{"Key":"also passed","Fragments":["as"]},{"Key":"passed as","Fragments":["a"]},{"Key":"use proper","Fragments":["namespace"]},{"Key":"proper namespace","Fragments":["for"]},{"Key":"namespace for","Fragments":["isalpha","just","internals."]},{"Key":"for isalpha","Fragments":["and"]},{"Key":"isalpha and","Fragments":["isspace"]},{"Key":"and isspace","Fragments":["(std::isalpha"]},{"Key":"isspace (std::isalpha","Fragments":["and"]},{"Key":"(std::isalpha and","Fragments":["std::isspace)."]},{"Key":"Why aren't","Fragments":["you"]},{"Key":"aren't you","Fragments":["using"]},{"Key":"you using","Fragments":["\"std::isupper\""]},{"Key":"using \"std::isupper\"","Fragments":["and"]},{"Key":"\"std::isupper\" and","Fragments":["\"std::islower\""]},{"Key":"and \"std::islower\"","Fragments":["?"]},{"Key":" a)","Fragments":["You"]},{"Key":"a) You","Fragments":["should"]},{"Key":"put \"const","Fragments":["char*\""]},{"Key":"\"const char*\"","Fragments":["on"]},{"Key":"char*\" on","Fragments":["all"]},{"Key":"on all","Fragments":["variable"]},{"Key":"all variable","Fragments":["declarations,","declarations"]},{"Key":"variable declarations,","Fragments":["and"]},{"Key":"declarations, and","Fragments":["as"]},{"Key":"and as","Fragments":["well"]},{"Key":"function itself.","Fragments":["These"]},{"Key":"itself. These","Fragments":["are"]},{"Key":"These are","Fragments":["constants,"]},{"Key":"are constants,","Fragments":["and"]},{"Key":"constants, and","Fragments":["may"]},{"Key":"and may","Fragments":["not"]},{"Key":"may not","Fragments":["be"]},{"Key":" b)","Fragments":["if"]},{"Key":"b) if","Fragments":["the"]},{"Key":"string lenght","Fragments":["is"]},{"Key":"lenght is","Fragments":["\"0\","]},{"Key":"is \"0\",","Fragments":["you"]},{"Key":"\"0\", you","Fragments":["will"]},{"Key":"will be","Fragments":["dereferencing","counted","a","present","anagrams.","O(n)","created"]},{"Key":"be dereferencing","Fragments":["\"msg\""]},{"Key":"dereferencing \"msg\"","Fragments":["with"]},{"Key":"\"msg\" with","Fragments":["a"]},{"Key":"a negative","Fragments":["value.","direction."]},{"Key":"negative value.","Fragments":["This"]},{"Key":"value. This","Fragments":["is"]},{"Key":"is definitely","Fragments":["not"]},{"Key":"definitely not","Fragments":["what"]},{"Key":"not what","Fragments":["you"]},{"Key":"you want","Fragments":["to","in"]},{"Key":" c)","Fragments":["Overall,"]},{"Key":"c) Overall,","Fragments":["this"]},{"Key":"Overall, this","Fragments":["is"]},{"Key":"is \"C\",","Fragments":["not"]},{"Key":"\"C\", not","Fragments":["\"C++\"."]},{"Key":"My biggest","Fragments":["problem"]},{"Key":"biggest problem","Fragments":["here"]},{"Key":"problem here","Fragments":["is"]},{"Key":"here is","Fragments":["that"]},{"Key":"actually do","Fragments":["not"]},{"Key":"the C++11","Fragments":["on"]},{"Key":"C++11 on","Fragments":["a"]},{"Key":"a daily","Fragments":["basis."]},{"Key":"daily basis.","Fragments":["I"]},{"Key":"basis. I","Fragments":["am"]},{"Key":"am quite","Fragments":["buried"]},{"Key":"quite buried","Fragments":["in"]},{"Key":"buried in","Fragments":["the"]},{"Key":"the C++98,","Fragments":["and"]},{"Key":"C++98, and","Fragments":["I"]},{"Key":"get out","Fragments":["of"]},{"Key":"of there","Fragments":["-"]},{"Key":"there -","Fragments":["at"]},{"Key":"least at","Fragments":["home."]},{"Key":"at home.","Fragments":["I"]},{"Key":"home. I","Fragments":["would"]},{"Key":"would guess","Fragments":["that"]},{"Key":"guess that","Fragments":["is"]},{"Key":"is why","Fragments":["I"]},{"Key":"why I","Fragments":["could","have","choose","felt","should","fell"]},{"Key":"not decide","Fragments":["which"]},{"Key":"decide which","Fragments":["is"]},{"Key":"is more","Fragments":["elegant","expressive.","neat."]},{"Key":"more elegant","Fragments":["-"]},{"Key":"elegant -","Fragments":["use"]},{"Key":"- use","Fragments":["an"]},{"Key":"an auto","Fragments":["iter,"]},{"Key":"auto iter,","Fragments":["or"]},{"Key":"iter, or","Fragments":["maybe"]},{"Key":"or maybe","Fragments":["std"]},{"Key":"maybe std","Fragments":["algorithm"]},{"Key":"std algorithm","Fragments":["all_of."]},{"Key":"as simple","Fragments":["as","as","as"]},{"Key":"simple as","Fragments":["possible","I","possible."]},{"Key":"as possible","Fragments":["and","and"]},{"Key":"possible and","Fragments":["use","they"]},{"Key":"use std","Fragments":["library"]},{"Key":"std library","Fragments":["functions."]},{"Key":"library functions.","Fragments":["It's"]},{"Key":"functions. It's","Fragments":["been","very"]},{"Key":"It's been","Fragments":["a"]},{"Key":"time since","Fragments":["I"]},{"Key":"wrote in","Fragments":["CPP."]},{"Key":" Basically","Fragments":["I","I"]},{"Key":"Basically I","Fragments":["tried","make"]},{"Key":"separate control","Fragments":["structure"]},{"Key":"control structure","Fragments":["from"]},{"Key":"structure from","Fragments":["the"]},{"Key":"decisions that","Fragments":["need"]},{"Key":"that need","Fragments":["to"]},{"Key":"made and","Fragments":["to"]},{"Key":"and to","Fragments":["factor","check"]},{"Key":"factor each","Fragments":["function"]},{"Key":"each function","Fragments":["so","different?","I"]},{"Key":"function so","Fragments":["that"]},{"Key":"that ist","Fragments":["would"]},{"Key":"ist would","Fragments":["primarily"]},{"Key":"would primarily","Fragments":["accomplish"]},{"Key":"primarily accomplish","Fragments":["a"]},{"Key":"accomplish a","Fragments":["single"]},{"Key":" To","Fragments":["avoid","simplify","keep"]},{"Key":"To avoid","Fragments":["adding"]},{"Key":"avoid adding","Fragments":["a"]},{"Key":"of private","Fragments":["static"]},{"Key":"private static","Fragments":["functions"]},{"Key":"static functions","Fragments":["to"]},{"Key":"the \"bob\"","Fragments":["class,"]},{"Key":"class, I","Fragments":["just"]},{"Key":"of simple","Fragments":["file-scoped"]},{"Key":"simple file-scoped","Fragments":["functions"]},{"Key":"file-scoped functions","Fragments":["and"]},{"Key":"and data","Fragments":["structures"]},{"Key":"data structures","Fragments":["to","and","it","that","it","that","it","that","it","that"]},{"Key":"structures to","Fragments":["complete"]},{"Key":"to complete","Fragments":["the"]},{"Key":"complete the","Fragments":["work."]},{"Key":"I've tried","Fragments":["to","to"]},{"Key":"it reasonably","Fragments":["efficient"]},{"Key":"reasonably efficient","Fragments":["-"]},{"Key":"efficient -","Fragments":["not"]},{"Key":"- not","Fragments":["too"]},{"Key":"not too","Fragments":["modular","concerned","complex.","concerned","familiar"]},{"Key":"too modular","Fragments":["and"]},{"Key":"modular and","Fragments":["avoiding"]},{"Key":"and avoiding","Fragments":["some"]},{"Key":"avoiding some","Fragments":["of"]},{"Key":"C++ 'nice'","Fragments":["(slow)"]},{"Key":"'nice' (slow)","Fragments":["features."]},{"Key":"(slow) features.","Fragments":["I'm"]},{"Key":"features. I'm","Fragments":["from"]},{"Key":"I'm from","Fragments":["a"]},{"Key":"from a","Fragments":["C","Java","class","callers","fixed"]},{"Key":"C background,","Fragments":["so"]},{"Key":"background, so","Fragments":["trying"]},{"Key":"so trying","Fragments":["to"]},{"Key":"to think","Fragments":["in","of","of"]},{"Key":"think in","Fragments":["C++"]},{"Key":"C++ terms","Fragments":["takes"]},{"Key":"terms takes","Fragments":["some"]},{"Key":"takes some","Fragments":["time."]},{"Key":"Since this","Fragments":["is"]},{"Key":"first ever","Fragments":["codpiece"]},{"Key":"ever codpiece","Fragments":["here"]},{"Key":"codpiece here","Fragments":["though"]},{"Key":"here though","Fragments":["that"]},{"Key":"though that","Fragments":["i"]},{"Key":"that i","Fragments":["would","think"]},{"Key":"i would","Fragments":["make"]},{"Key":"make everything","Fragments":["super-clear"]},{"Key":"everything super-clear","Fragments":["with"]},{"Key":"super-clear with","Fragments":["lots"]},{"Key":"with lots","Fragments":["of"]},{"Key":"of comments","Fragments":["and"]},{"Key":"comments and","Fragments":["clear"]},{"Key":"and clear","Fragments":["variable"]},{"Key":"clear variable","Fragments":["names."]},{"Key":"variable names.","Fragments":["Maybe"]},{"Key":"names. Maybe","Fragments":["i"]},{"Key":"Maybe i","Fragments":["went"]},{"Key":"i went","Fragments":["to"]},{"Key":"went to","Fragments":["far","use"]},{"Key":"to far","Fragments":["and"]},{"Key":"far and","Fragments":["lost"]},{"Key":"and lost","Fragments":["focus"]},{"Key":"lost focus","Fragments":["on"]},{"Key":"focus on","Fragments":["making"]},{"Key":"on making","Fragments":["a"]},{"Key":"making a","Fragments":["efficient","class,","mistake"]},{"Key":"a efficient","Fragments":["implementation."]},{"Key":"efficient implementation.","Fragments":["However"]},{"Key":"implementation. However","Fragments":["this"]},{"Key":"However this","Fragments":["is"]},{"Key":"is just","Fragments":["a"]},{"Key":"trivial task,","Fragments":["and"]},{"Key":"task, and","Fragments":["no"]},{"Key":"no requirements","Fragments":["are"]},{"Key":"requirements are","Fragments":["specified."]},{"Key":"The library","Fragments":["functions"]},{"Key":"library functions","Fragments":["that","that"]},{"Key":"that encapsulate","Fragments":["those"]},{"Key":"encapsulate those","Fragments":["patterns"]},{"Key":"those patterns","Fragments":["can"]},{"Key":"patterns can","Fragments":["be"]},{"Key":"be found","Fragments":["in"]},{"Key":"found in","Fragments":["```#\u003calgorithm\u003e```"]},{"Key":"```#\u003calgorithm\u003e``` ([see","Fragments":["here](http://www.cplusplus.com/reference/algorithm/)"]},{"Key":"([see here](http://www.cplusplus.com/reference/algorithm/)","Fragments":[")."]},{"Key":"Also as","Fragments":["a"]},{"Key":"a quick","Fragments":["note","implementation","test","test"]},{"Key":"quick note","Fragments":["if"]},{"Key":"note if","Fragments":["you"]},{"Key":"write an","Fragments":["explicit"]},{"Key":"an explicit","Fragments":["loop","for"]},{"Key":"explicit loop","Fragments":["when"]},{"Key":"loop when","Fragments":["iterating"]},{"Key":"when iterating","Fragments":["over"]},{"Key":" data","Fragments":["structure"]},{"Key":"data structure","Fragments":["the"]},{"Key":"structure the","Fragments":["type","program"]},{"Key":"the type","Fragments":["deduction","of"]},{"Key":"type deduction","Fragments":["of"]},{"Key":"deduction of","Fragments":["the"]},{"Key":"the ```auto```","Fragments":["keyword","keyword"]},{"Key":"```auto``` keyword","Fragments":["as","and"]},{"Key":"keyword as","Fragments":["well"]},{"Key":"as range","Fragments":["based"]},{"Key":"loops lower","Fragments":["the"]},{"Key":"lower the","Fragments":["verbosity"]},{"Key":"the verbosity","Fragments":["significantly."]},{"Key":"verbosity significantly.","Fragments":["(e.g."]},{"Key":"significantly. (e.g.","Fragments":["your"]},{"Key":"(e.g. your","Fragments":["line"]},{"Key":"your line","Fragments":["14"]},{"Key":"line 14","Fragments":["becomes)"]},{"Key":" ```for(","Fragments":["auto"]},{"Key":"```for( auto","Fragments":["it","c"]},{"Key":" making","Fragments":["the"]},{"Key":"code much","Fragments":["clearer"]},{"Key":"much clearer","Fragments":["IMHO","and"]},{"Key":"clearer IMHO","Fragments":[":)"]},{"Key":" @howard","Fragments":["Thanks"]},{"Key":"@howard Thanks","Fragments":["for"]},{"Key":"the advice!","Fragments":["I","That"]},{"Key":"advice! I","Fragments":["will"]},{"Key":"will go","Fragments":["in"]},{"Key":"go in","Fragments":["and"]},{"Key":"in and","Fragments":["make"]},{"Key":"make some","Fragments":["of"]},{"Key":"of those","Fragments":["changes!","to","methods."]},{"Key":"those changes!","Fragments":["Im"]},{"Key":"changes! Im","Fragments":["not"]},{"Key":"Im not","Fragments":["sure"]},{"Key":"sure why","Fragments":["I","anagram","I"]},{"Key":"have iostream","Fragments":["included,"]},{"Key":"iostream included,","Fragments":["as"]},{"Key":"included, as","Fragments":["I"]},{"Key":"I never","Fragments":["used"]},{"Key":"never used","Fragments":["it"]},{"Key":"used it","Fragments":["for","correctly"]},{"Key":"it for","Fragments":["testing"]},{"Key":"for testing","Fragments":[":/"]},{"Key":"Looks good","Fragments":["and"]},{"Key":"good and","Fragments":["short!"]},{"Key":"string argumentsby","Fragments":["value"]},{"Key":"argumentsby value","Fragments":["-"]},{"Key":"should copy","Fragments":["by"]},{"Key":"copy by","Fragments":["reference"]},{"Key":"2) Why","Fragments":["is"]},{"Key":"Why is","Fragments":["this"]},{"Key":"is this","Fragments":["in","in"]},{"Key":"class instead","Fragments":["of"]},{"Key":"a namespace?","Fragments":["You"]},{"Key":"namespace? You","Fragments":["don't"]},{"Key":"don't gain","Fragments":["anything"]},{"Key":"anything by","Fragments":["it","itself,"]},{"Key":"by it","Fragments":["being"]},{"Key":"it being","Fragments":["a"]},{"Key":"being a","Fragments":["class."]},{"Key":"would throw","Fragments":["in"]},{"Key":"throw in","Fragments":["`cctype`"]},{"Key":"in `cctype`","Fragments":["so"]},{"Key":"`cctype` so","Fragments":["you"]},{"Key":"so you","Fragments":["can","could","can","may"]},{"Key":"use `isupper()`","Fragments":["and"]},{"Key":"`isupper()` and","Fragments":["`islower()`"]},{"Key":"and `islower()`","Fragments":["as"]},{"Key":"`islower()` as","Fragments":["opposed"]},{"Key":"as opposed","Fragments":["to"]},{"Key":"opposed to","Fragments":["`*it"]},{"Key":"to `*it","Fragments":["\u003e="]},{"Key":"`*it \u003e=","Fragments":["'A'"]},{"Key":"\u003e= 'A'","Fragments":["\u0026\u0026","\u0026\u0026","\u0026\u0026"]},{"Key":"'A' \u0026\u0026","Fragments":["*it","msg[i]","\u003c="]},{"Key":"\u0026\u0026 *it","Fragments":["\u003c="]},{"Key":"*it \u003c=","Fragments":["'Z'`."]},{"Key":"\u003c= 'Z'`.","Fragments":["I","It's"]},{"Key":"'Z'`. I","Fragments":["think"]},{"Key":"lot easier","Fragments":["to"]},{"Key":"read and","Fragments":["generally"]},{"Key":"and generally","Fragments":["won't"]},{"Key":"generally won't","Fragments":["cause"]},{"Key":"won't cause","Fragments":["a","a"]},{"Key":"cause a","Fragments":["significant","heap"]},{"Key":"a significant","Fragments":["performance"]},{"Key":"significant performance","Fragments":["hit."]},{"Key":"not done","Fragments":["yet."]},{"Key":" Yes,","Fragments":["it","you're"]},{"Key":"Yes, it","Fragments":["is"]},{"Key":"much nicer","Fragments":[":)"]},{"Key":"to roll","Fragments":["both"]},{"Key":"roll both","Fragments":["shouting"]},{"Key":"both shouting","Fragments":["and"]},{"Key":"and shouting","Fragments":["numbers"]},{"Key":"shouting numbers","Fragments":["into"]},{"Key":"numbers into","Fragments":["one"]},{"Key":"one regex","Fragments":["string"]},{"Key":"regex string","Fragments":["but"]},{"Key":"string but","Fragments":["found"]},{"Key":"but found","Fragments":["it"]},{"Key":"it matched","Fragments":["only_numbers","the","the"]},{"Key":"matched only_numbers","Fragments":["and"]},{"Key":"only_numbers and","Fragments":["question_with_only_numbers,"]},{"Key":"and question_with_only_numbers,","Fragments":["my"]},{"Key":"question_with_only_numbers, my","Fragments":["regex"]},{"Key":"my regex","Fragments":["isn't"]},{"Key":"regex isn't","Fragments":["as"]},{"Key":"isn't as","Fragments":["good"]},{"Key":"as good","Fragments":["as"]},{"Key":"good as","Fragments":["it"]},{"Key":"as it","Fragments":["probably","will","wouldn't","wouldn't","is"]},{"Key":"it probably","Fragments":["could"]},{"Key":"probably could","Fragments":["be."]},{"Key":"1) Are","Fragments":["you"]},{"Key":"Are you","Fragments":["guaranteed"]},{"Key":"you guaranteed","Fragments":["that"]},{"Key":"guaranteed that","Fragments":["map[word]"]},{"Key":"that map[word]","Fragments":["=="]},{"Key":"map[word] ==","Fragments":["0"]},{"Key":"== 0","Fragments":["if"]},{"Key":"0 if","Fragments":["word"]},{"Key":"if word","Fragments":["is","is"]},{"Key":"not in","Fragments":["map","map,","x\\n\";","the","the"]},{"Key":"map already?","Fragments":["I"]},{"Key":"already? I","Fragments":["think"]},{"Key":"it cold","Fragments":["be"]},{"Key":"cold be","Fragments":["gibberish"]},{"Key":"be gibberish","Fragments":["outside"]},{"Key":"gibberish outside","Fragments":["of"]},{"Key":"outside of","Fragments":["debug","the","class","its"]},{"Key":"of debug","Fragments":["mode."]},{"Key":"2) You","Fragments":["could","don't"]},{"Key":"could transform","Fragments":["the"]},{"Key":"transform the","Fragments":["entire"]},{"Key":"the entire","Fragments":["string","song","string","if-statement","input","solution"]},{"Key":"entire string","Fragments":["up","lower_case"]},{"Key":"string up","Fragments":["front"]},{"Key":"up front","Fragments":["in"]},{"Key":"front in","Fragments":["one"]},{"Key":"in one","Fragments":["go","line","file","file","loop.","file,"]},{"Key":"one go","Fragments":["-"]},{"Key":"go -","Fragments":["this"]},{"Key":"- this","Fragments":["could"]},{"Key":"could possibly","Fragments":["be","just"]},{"Key":"possibly be","Fragments":["more"]},{"Key":"be more","Fragments":["efficient.","c++,","readable","optimized","inclusive","readable","expressive"]},{"Key":" Thanks,","Fragments":["I","@raleigh!","all!","it"]},{"Key":"Thanks, I","Fragments":["will"]},{"Key":"will make","Fragments":["the"]},{"Key":"I studied","Fragments":["C++"]},{"Key":"studied C++","Fragments":["waaaaay"]},{"Key":"C++ waaaaay","Fragments":["back"]},{"Key":"waaaaay back","Fragments":["in"]},{"Key":"back in","Fragments":["college"]},{"Key":"in college","Fragments":["but"]},{"Key":"college but","Fragments":["never"]},{"Key":"but never","Fragments":["got"]},{"Key":"never got","Fragments":["much"]},{"Key":"got much","Fragments":["use"]},{"Key":"much use","Fragments":["out"]},{"Key":"use out","Fragments":["of"]},{"Key":"of it","Fragments":["once","before,"]},{"Key":"it once","Fragments":["my"]},{"Key":"once my","Fragments":["career"]},{"Key":"my career","Fragments":["got"]},{"Key":"career got","Fragments":["off"]},{"Key":"got off","Fragments":["the"]},{"Key":"off the","Fragments":["ground.","bool"]},{"Key":"the ground.","Fragments":["I'm"]},{"Key":"ground. I'm","Fragments":["trying"]},{"Key":"to reacquaint","Fragments":["myself"]},{"Key":"reacquaint myself","Fragments":["with"]},{"Key":"myself with","Fragments":["it"]},{"Key":"with it","Fragments":["as"]},{"Key":"I'm interested","Fragments":["in"]},{"Key":"in switching","Fragments":["over"]},{"Key":"switching over","Fragments":["to"]},{"Key":"over to","Fragments":["game","C++."]},{"Key":"to game","Fragments":["development"]},{"Key":"game development","Fragments":["from"]},{"Key":"development from","Fragments":["web"]},{"Key":"from web","Fragments":["development."]},{"Key":"web development.","Fragments":["Is"]},{"Key":"development. Is","Fragments":["C++"]},{"Key":"Is C++","Fragments":["the"]},{"Key":"C++ the","Fragments":["right"]},{"Key":"right choice","Fragments":["for"]},{"Key":"choice for","Fragments":["that?"]},{"Key":"for that?","Fragments":["I've"]},{"Key":"that? I've","Fragments":["heard"]},{"Key":"I've heard","Fragments":["differing"]},{"Key":"heard differing","Fragments":["opinions"]},{"Key":"differing opinions","Fragments":["on"]},{"Key":"opinions on","Fragments":["the"]},{"Key":"the subject.","Fragments":["Thoughts?"]},{"Key":"In any","Fragments":["case,"]},{"Key":"any case,","Fragments":["I"]},{"Key":"I want","Fragments":["to","to"]},{"Key":"learn C++","Fragments":["better"]},{"Key":"C++ better","Fragments":["regardless."]},{"Key":" Through","Fragments":["the"]},{"Key":"Through the","Fragments":["course"]},{"Key":"the course","Fragments":["of"]},{"Key":"course of","Fragments":["this"]},{"Key":"exercise it","Fragments":["dawned"]},{"Key":"it dawned","Fragments":["on"]},{"Key":"dawned on","Fragments":["me"]},{"Key":"on me","Fragments":["that"]},{"Key":"that regular","Fragments":["expressions"]},{"Key":"expressions would","Fragments":["be"]},{"Key":"the most","Fragments":["efficient","readable","efficient"]},{"Key":"most efficient","Fragments":["way","way"]},{"Key":"efficient way","Fragments":["to","of"]},{"Key":"to tackle","Fragments":["these"]},{"Key":"tackle these","Fragments":["unit"]},{"Key":"these unit","Fragments":["tests."]},{"Key":"unit tests.","Fragments":["At"]},{"Key":"tests. At","Fragments":["first"]},{"Key":"At first","Fragments":["I","I"]},{"Key":"first I","Fragments":["was","went"]},{"Key":"using all","Fragments":["kinds","what"]},{"Key":"all kinds","Fragments":["of","of"]},{"Key":"kinds of","Fragments":["string","strange"]},{"Key":"string manipulation","Fragments":["functions"]},{"Key":"manipulation functions","Fragments":["but"]},{"Key":"functions but","Fragments":["that","`checkCaps`"]},{"Key":"was getting","Fragments":["really","a","a"]},{"Key":"getting really","Fragments":["cumbersome."]},{"Key":"I'm working","Fragments":["within"]},{"Key":"working within","Fragments":["an"]},{"Key":"within an","Fragments":["Ubuntu"]},{"Key":"an Ubuntu","Fragments":["linux"]},{"Key":"Ubuntu linux","Fragments":["environment"]},{"Key":"linux environment","Fragments":["so"]},{"Key":"environment so","Fragments":["using"]},{"Key":"so using","Fragments":["gcc"]},{"Key":"using gcc","Fragments":["as","version"]},{"Key":"gcc as","Fragments":["my"]},{"Key":"as my","Fragments":["compiler.","Python","\"magic"]},{"Key":"my compiler.","Fragments":["When"]},{"Key":"compiler. When","Fragments":["I"]},{"Key":"I went","Fragments":["to","with","for"]},{"Key":"the gcc","Fragments":["regex","regex"]},{"Key":"gcc regex","Fragments":["library,","library"]},{"Key":"regex library,","Fragments":["I"]},{"Key":"library, I","Fragments":["was"]},{"Key":"was running","Fragments":["into"]},{"Key":"running into","Fragments":["all"]},{"Key":"into all","Fragments":["kinds"]},{"Key":"of strange","Fragments":["errors."]},{"Key":"strange errors.","Fragments":["For"]},{"Key":"errors. For","Fragments":["example,"]},{"Key":"example, the","Fragments":["regex"]},{"Key":"regex library","Fragments":["was","which","so","yet."]},{"Key":"library was","Fragments":["throwing"]},{"Key":"was throwing","Fragments":["an"]},{"Key":"exception, stating","Fragments":["that"]},{"Key":"stating that","Fragments":["a"]},{"Key":"a pattern","Fragments":["like"]},{"Key":"pattern like","Fragments":["\"[a-z]\""]},{"Key":"like \"[a-z]\"","Fragments":["was"]},{"Key":"\"[a-z]\" was","Fragments":["an"]},{"Key":"was an","Fragments":["incorrect","interesting","char[]."]},{"Key":"an incorrect","Fragments":["usage"]},{"Key":"incorrect usage","Fragments":["of"]},{"Key":"of brackets.","Fragments":["Huh?"]},{"Key":"brackets. Huh?","Fragments":["After"]},{"Key":"Huh? After","Fragments":["searching"]},{"Key":"After searching","Fragments":["around,"]},{"Key":"searching around,","Fragments":["I"]},{"Key":"around, I","Fragments":["found"]},{"Key":"found out","Fragments":["the","you"]},{"Key":"the gcc's","Fragments":["regex"]},{"Key":"gcc's regex","Fragments":["implementation"]},{"Key":"regex implementation","Fragments":["isn't"]},{"Key":"implementation isn't","Fragments":["even"]},{"Key":"isn't even","Fragments":["finished."]},{"Key":"even finished.","Fragments":["I'm"]},{"Key":"finished. I'm","Fragments":["using"]},{"Key":"I'm using","Fragments":["gcc","the","only","a","all"]},{"Key":"gcc version","Fragments":["4.8.2,"]},{"Key":"version 4.8.2,","Fragments":["which"]},{"Key":"4.8.2, which","Fragments":["is"]},{"Key":"fairly recent","Fragments":["so"]},{"Key":"recent so","Fragments":["go"]},{"Key":"so go","Fragments":["figure."]},{"Key":"I ended","Fragments":["up","up"]},{"Key":"ended up","Fragments":["using","learning"]},{"Key":"up using","Fragments":["the"]},{"Key":"the Boost","Fragments":["regex"]},{"Key":"Boost regex","Fragments":["library"]},{"Key":"library which","Fragments":["shares"]},{"Key":"which shares","Fragments":["a"]},{"Key":"shares a","Fragments":["similar"]},{"Key":"a similar","Fragments":["interface"]},{"Key":"similar interface","Fragments":["with"]},{"Key":"interface with","Fragments":["the"]},{"Key":"library so","Fragments":["I"]},{"Key":"didn't have","Fragments":["to"]},{"Key":"change much","Fragments":["code."]},{"Key":"As for","Fragments":["the","traversing","the"]},{"Key":"the implementation,","Fragments":["I"]},{"Key":"implementation, I","Fragments":["opted"]},{"Key":"a super","Fragments":["simple"]},{"Key":"super simple","Fragments":["approach."]},{"Key":"simple approach.","Fragments":["The"]},{"Key":"approach. The","Fragments":["default"]},{"Key":"The default","Fragments":["message","buffer"]},{"Key":"default message","Fragments":["that"]},{"Key":"message that","Fragments":["is"]},{"Key":"is returned","Fragments":["is"]},{"Key":"returned is","Fragments":["\"Whatever.\""]},{"Key":"is \"Whatever.\"","Fragments":["for"]},{"Key":"\"Whatever.\" for","Fragments":["non"]},{"Key":"for non","Fragments":["matches"]},{"Key":"non matches","Fragments":["against"]},{"Key":"matches against","Fragments":["tests"]},{"Key":"against tests","Fragments":["for"]},{"Key":"tests for","Fragments":["a"]},{"Key":"a shout,","Fragments":["question,","but"]},{"Key":"shout, question,","Fragments":["or"]},{"Key":"question, or","Fragments":["empty"]},{"Key":"or empty","Fragments":["string."]},{"Key":"I test","Fragments":["for"]},{"Key":"empty (or","Fragments":["blank)"]},{"Key":"(or blank)","Fragments":["string"]},{"Key":"blank) string","Fragments":["first"]},{"Key":"string first","Fragments":["and","would"]},{"Key":"first and","Fragments":["if","last","third"]},{"Key":"and if","Fragments":["that","all","it's","it's"]},{"Key":"if that","Fragments":["passes,","would"]},{"Key":"that passes,","Fragments":["just"]},{"Key":"passes, just","Fragments":["return"]},{"Key":"just return","Fragments":["the","false","true","whatever","0.","0"]},{"Key":"the appropriate","Fragments":["message."]},{"Key":"appropriate message.","Fragments":["No"]},{"Key":"message. No","Fragments":["need"]},{"Key":"No need","Fragments":["for","to"]},{"Key":"for further","Fragments":["tests,"]},{"Key":"further tests,","Fragments":["the"]},{"Key":"tests, the","Fragments":["string"]},{"Key":"has no","Fragments":["content"]},{"Key":"no content","Fragments":["(none"]},{"Key":"content (none","Fragments":["that"]},{"Key":"(none that","Fragments":["we"]},{"Key":"we care","Fragments":["about"]},{"Key":"care about","Fragments":["anyway)."]},{"Key":" Then","Fragments":["I"]},{"Key":"Then I","Fragments":["check"]},{"Key":"I check","Fragments":["for","for","for"]},{"Key":"shout by","Fragments":["searching"]},{"Key":"by searching","Fragments":["for"]},{"Key":"searching for","Fragments":["lowercase"]},{"Key":"for lowercase","Fragments":["letters"]},{"Key":"lowercase letters","Fragments":["and"]},{"Key":"and uppercase","Fragments":["letters."]},{"Key":"uppercase letters.","Fragments":["If"]},{"Key":"letters. If","Fragments":["the"]},{"Key":"regex searches","Fragments":["return"]},{"Key":"searches return","Fragments":["only"]},{"Key":"return only","Fragments":["upper"]},{"Key":"only upper","Fragments":["case"]},{"Key":"upper case","Fragments":["letters,","letters","and"]},{"Key":"case letters,","Fragments":["then"]},{"Key":"letters, then","Fragments":["we"]},{"Key":"know someone","Fragments":["is"]},{"Key":"shouting at","Fragments":["poor"]},{"Key":"at poor","Fragments":["bob."]},{"Key":"poor bob.","Fragments":["If"]},{"Key":"bob. If","Fragments":["any"]},{"Key":"If any","Fragments":["lower"]},{"Key":"any lower","Fragments":["case","case."]},{"Key":"lower case","Fragments":["letters","letters","character","initially"]},{"Key":"case letters","Fragments":["are","and","will"]},{"Key":"letters are","Fragments":["found","present"]},{"Key":"are found","Fragments":["as"]},{"Key":"found as","Fragments":["well"]},{"Key":"as uppercase,","Fragments":["then"]},{"Key":"uppercase, then","Fragments":["they"]},{"Key":"then they","Fragments":["can't"]},{"Key":"they can't","Fragments":["be"]},{"Key":"be shouting","Fragments":["too"]},{"Key":"shouting too","Fragments":["loudly."]},{"Key":"too loudly.","Fragments":["Only"]},{"Key":"loudly. Only","Fragments":["the"]},{"Key":"Only the","Fragments":["combination"]},{"Key":"the combination","Fragments":["of"]},{"Key":"combination of","Fragments":["no"]},{"Key":"of no","Fragments":["lower"]},{"Key":"no lower","Fragments":["case"]},{"Key":"and upper","Fragments":["case"]},{"Key":"letters will","Fragments":["be"]},{"Key":"be counted","Fragments":["as"]},{"Key":"counted as","Fragments":["a"]},{"Key":"a shout.","Fragments":["Numbers"]},{"Key":"shout. Numbers","Fragments":["and"]},{"Key":"Numbers and","Fragments":["punctuation"]},{"Key":"and punctuation","Fragments":["are"]},{"Key":"punctuation are","Fragments":["ignored."]},{"Key":"shout before","Fragments":["checking"]},{"Key":"question because","Fragments":["the"]},{"Key":"question test","Fragments":["simply","passes."]},{"Key":"test simply","Fragments":["checks"]},{"Key":"simply checks","Fragments":["for"]},{"Key":"mark as","Fragments":["the"]},{"Key":"character of","Fragments":["the","the","the","the"]},{"Key":"input string.","Fragments":["It"]},{"Key":"be that","Fragments":["the"]},{"Key":"a sequence","Fragments":["of"]},{"Key":"sequence of","Fragments":["all"]},{"Key":"of all","Fragments":["caps","the"]},{"Key":"caps words","Fragments":["followed"]},{"Key":"words followed","Fragments":["by"]},{"Key":"by a","Fragments":["question"]},{"Key":"question mark,","Fragments":["but"]},{"Key":"mark, but","Fragments":["the"]},{"Key":"tests would","Fragments":["consider"]},{"Key":"would consider","Fragments":["that","renaming"]},{"Key":"shout instead","Fragments":["so"]},{"Key":"instead so","Fragments":["I"]},{"Key":"shout first","Fragments":["for"]},{"Key":"first for","Fragments":["that"]},{"Key":"that reason.","Fragments":["If"]},{"Key":"reason. If","Fragments":["it's"]},{"Key":"If it's","Fragments":["not"]},{"Key":"shout, but","Fragments":["has"]},{"Key":"but has","Fragments":["a"]},{"Key":"mark at","Fragments":["the","the"]},{"Key":"end then","Fragments":["the"]},{"Key":"Anyway, rip","Fragments":["it"]},{"Key":"rip it","Fragments":["apart"]},{"Key":"it apart","Fragments":["gurus!"]},{"Key":"Thanks, @raleigh!","Fragments":["New"]},{"Key":"@raleigh! New","Fragments":["version"]},{"Key":"New version","Fragments":["submitted"]},{"Key":"version submitted","Fragments":[":-)."]},{"Key":"I've dabbled","Fragments":["a"]},{"Key":"dabbled a","Fragments":["tiny"]},{"Key":"a tiny","Fragments":["bit","bit"]},{"Key":"tiny bit","Fragments":["in","of"]},{"Key":"bit in","Fragments":["C"]},{"Key":"C before","Fragments":["while"]},{"Key":"before while","Fragments":["starting"]},{"Key":"while starting","Fragments":["to"]},{"Key":"starting to","Fragments":["read"]},{"Key":"the Kernighan","Fragments":["and"]},{"Key":"Kernighan and","Fragments":["Ritchie"]},{"Key":"and Ritchie","Fragments":["book"]},{"Key":"Ritchie book","Fragments":["and"]},{"Key":"book and","Fragments":["I"]},{"Key":"I assumed","Fragments":["that","the"]},{"Key":"assumed that","Fragments":["C++"]},{"Key":"that C++","Fragments":["would"]},{"Key":"C++ would","Fragments":["look"]},{"Key":"look reasonably","Fragments":["similar..."]},{"Key":"reasonably similar...","Fragments":["but"]},{"Key":"similar... but","Fragments":["it"]},{"Key":"pretty different","Fragments":["in"]},{"Key":"different in","Fragments":["some"]},{"Key":"and concise!","Fragments":["You","If"]},{"Key":"concise! You","Fragments":["could"]},{"Key":"potentially improve","Fragments":["perf"]},{"Key":"improve perf","Fragments":["by"]},{"Key":"perf by","Fragments":["returning"]},{"Key":"by returning","Fragments":["a"]},{"Key":"returning a","Fragments":["static","boolean"]},{"Key":"static string","Fragments":["for"]},{"Key":"string for","Fragments":["responses","each"]},{"Key":"for responses","Fragments":["rather"]},{"Key":"responses rather","Fragments":["than"]},{"Key":"than copying","Fragments":["each","the"]},{"Key":"copying each","Fragments":["time."]},{"Key":"Using `\u003calgorithm\u003e`","Fragments":["cleans"]},{"Key":"`\u003calgorithm\u003e` cleans","Fragments":["up"]},{"Key":"cleans up","Fragments":["the"]},{"Key":"up the","Fragments":["code","namespace","compiler","compiler","compiler"]},{"Key":"lot I","Fragments":["think."]},{"Key":"I think.","Fragments":["However,"]},{"Key":"think. However,","Fragments":["I"]},{"Key":"notice that","Fragments":["`is_shouting`"]},{"Key":"that `is_shouting`","Fragments":["now"]},{"Key":"`is_shouting` now","Fragments":["has"]},{"Key":"now has","Fragments":["to"]},{"Key":"has to","Fragments":["traverse","be","return","be","be","grow"]},{"Key":"to traverse","Fragments":["the"]},{"Key":"traverse the","Fragments":["string"]},{"Key":"string possibly","Fragments":["more"]},{"Key":"possibly more","Fragments":["than"]},{"Key":"than necessary.","Fragments":["In"]},{"Key":"necessary. In","Fragments":["another"]},{"Key":"In another","Fragments":["language"]},{"Key":"another language","Fragments":["I"]},{"Key":"language I","Fragments":["wouldn't","try"]},{"Key":"I wouldn't","Fragments":["be","really","have"]},{"Key":"wouldn't be","Fragments":["bothered,"]},{"Key":"be bothered,","Fragments":["but"]},{"Key":"bothered, but","Fragments":["given"]},{"Key":"but given","Fragments":["that"]},{"Key":"given that","Fragments":["one"]},{"Key":"that one","Fragments":["of","can"]},{"Key":"the benefits","Fragments":["of"]},{"Key":"benefits of","Fragments":["going","using","using"]},{"Key":"of going","Fragments":["down"]},{"Key":"going down","Fragments":["to"]},{"Key":"a lower-level","Fragments":["language"]},{"Key":"lower-level language","Fragments":["like"]},{"Key":"language like","Fragments":["C++"]},{"Key":"like C++","Fragments":["is"]},{"Key":"C++ is","Fragments":["meant"]},{"Key":"is meant","Fragments":["to"]},{"Key":"meant to","Fragments":["be","be"]},{"Key":"be squeezing","Fragments":["every"]},{"Key":"squeezing every","Fragments":["last"]},{"Key":"every last","Fragments":["bit"]},{"Key":"last bit","Fragments":["of"]},{"Key":"of efficiency","Fragments":["out"]},{"Key":"efficiency out","Fragments":["of"]},{"Key":"your code,","Fragments":["should"]},{"Key":"code, should","Fragments":["I"]},{"Key":"should I","Fragments":["be","declare"]},{"Key":"I be","Fragments":["bothered"]},{"Key":"be bothered","Fragments":["here?"]},{"Key":" Hey,","Fragments":["where"]},{"Key":"Hey, where","Fragments":["is"]},{"Key":"where is","Fragments":["`isalpha`"]},{"Key":"is `isalpha`","Fragments":["defined?"]},{"Key":"`isalpha` defined?","Fragments":["Also"]},{"Key":"defined? Also","Fragments":["can"]},{"Key":"Also can","Fragments":["you"]},{"Key":"can you","Fragments":["explain"]},{"Key":"you explain","Fragments":["what"]},{"Key":"explain what","Fragments":["contains_alpha"]},{"Key":"what contains_alpha","Fragments":["is"]},{"Key":"contains_alpha is","Fragments":["actually"]},{"Key":"does look","Fragments":["like"]},{"Key":"very succinct","Fragments":["solution."]},{"Key":"I split","Fragments":["this"]},{"Key":"split this","Fragments":["up"]},{"Key":"this up","Fragments":["into"]},{"Key":"up into","Fragments":["2","functions","separate"]},{"Key":"into 2","Fragments":["parts"]},{"Key":"2 parts","Fragments":["for"]},{"Key":"parts for","Fragments":["readability's"]},{"Key":"for readability's","Fragments":["sake."]},{"Key":"first part,","Fragments":["_splitString_,"]},{"Key":"part, _splitString_,","Fragments":["iterates"]},{"Key":"_splitString_, iterates","Fragments":["over"]},{"Key":"iterates over","Fragments":["the"]},{"Key":"string given","Fragments":["as"]},{"Key":"given as","Fragments":["input."]},{"Key":"as input.","Fragments":["It"]},{"Key":"input. It","Fragments":["builds"]},{"Key":"It builds","Fragments":["a"]},{"Key":"builds a","Fragments":["word"]},{"Key":"each alphanumeric","Fragments":["character,"]},{"Key":"alphanumeric character,","Fragments":["whenever"]},{"Key":"character, whenever","Fragments":["it"]},{"Key":"whenever it","Fragments":["hits"]},{"Key":"it hits","Fragments":["a"]},{"Key":"hits a","Fragments":["non-alphanumeric"]},{"Key":"a non-alphanumeric","Fragments":["character","character."]},{"Key":"non-alphanumeric character","Fragments":["it"]},{"Key":"character it","Fragments":["flushes"]},{"Key":"it flushes","Fragments":["the"]},{"Key":"flushes the","Fragments":["current"]},{"Key":"current word","Fragments":["to"]},{"Key":"word to","Fragments":["the"]},{"Key":"vector and","Fragments":["clears"]},{"Key":"and clears","Fragments":["the"]},{"Key":"clears the","Fragments":["string"]},{"Key":"to start","Fragments":["on","with","of"]},{"Key":"start on","Fragments":["the"]},{"Key":" You'll","Fragments":["notice"]},{"Key":"You'll notice","Fragments":["at"]},{"Key":"notice at","Fragments":["line"]},{"Key":"at line","Fragments":["27,","42?"]},{"Key":"line 27,","Fragments":["I"]},{"Key":"27, I","Fragments":["added"]},{"Key":"small hack","Fragments":["to"]},{"Key":"hack to","Fragments":["guarantee"]},{"Key":"to guarantee","Fragments":["that"]},{"Key":"guarantee that","Fragments":["the","long"]},{"Key":"string always","Fragments":["ends"]},{"Key":"always ends","Fragments":["with"]},{"Key":"non-alphanumeric character.","Fragments":["I"]},{"Key":"character. I","Fragments":["did"]},{"Key":"did this","Fragments":["to"]},{"Key":"to simplify","Fragments":["the","your","your"]},{"Key":"simplify the","Fragments":["algorithm"]},{"Key":"for un-flushed","Fragments":["words"]},{"Key":"un-flushed words","Fragments":["after"]},{"Key":"words after","Fragments":["the"]},{"Key":"Thanks to","Fragments":["our"]},{"Key":"our helper","Fragments":["function,"]},{"Key":"helper function,","Fragments":["_wordcount::words_"]},{"Key":"function, _wordcount::words_","Fragments":["becomes"]},{"Key":"_wordcount::words_ becomes","Fragments":["a"]},{"Key":"becomes a","Fragments":["straightforward","variable?"]},{"Key":"straightforward exercise.","Fragments":["All"]},{"Key":"exercise. All","Fragments":["it"]},{"Key":"All it","Fragments":["does"]},{"Key":"does is","Fragments":["check"]},{"Key":"is check","Fragments":["the"]},{"Key":"to see","Fragments":["if","if","what","for","how","if"]},{"Key":"see if","Fragments":["the","they","am","the"]},{"Key":"the key","Fragments":["already","and","of","word,"]},{"Key":"already exists.","Fragments":["if"]},{"Key":"exists. if","Fragments":["it"]},{"Key":"not, it","Fragments":["adds"]},{"Key":"it adds","Fragments":["the"]},{"Key":"adds the","Fragments":["key"]},{"Key":"key and","Fragments":["initializes","returns"]},{"Key":"and initializes","Fragments":["the"]},{"Key":"initializes the","Fragments":["value,"]},{"Key":"the value,","Fragments":["otherwise"]},{"Key":"value, otherwise","Fragments":["it"]},{"Key":"otherwise it","Fragments":["increments"]},{"Key":"it increments","Fragments":["by"]},{"Key":"increments by","Fragments":["1."]},{"Key":"explain my","Fragments":["thought"]},{"Key":"my thought","Fragments":["process"]},{"Key":"thought process","Fragments":["with"]},{"Key":"process with","Fragments":["comments"]},{"Key":"with comments","Fragments":["within"]},{"Key":"comments within","Fragments":["the"]},{"Key":"within the","Fragments":["code.","std","bob","bob"]},{"Key":"the code.","Fragments":["This"]},{"Key":"code. This","Fragments":["probably"]},{"Key":"This probably","Fragments":["isn't"]},{"Key":"the cleanest","Fragments":["way"]},{"Key":"cleanest way","Fragments":["of"]},{"Key":"doing it,","Fragments":["but"]},{"Key":"it, but","Fragments":["it"]},{"Key":" Interesting","Fragments":["way"]},{"Key":"Interesting way","Fragments":["of"]},{"Key":"splitting up","Fragments":["this"]},{"Key":"up this","Fragments":["function,"]},{"Key":"this function,","Fragments":["in"]},{"Key":"function, in","Fragments":["my"]},{"Key":"my opinion","Fragments":["it","they","private"]},{"Key":"opinion it","Fragments":["is"]},{"Key":"this task","Fragments":["but"]},{"Key":"task but","Fragments":["if"]},{"Key":"but if","Fragments":["you","it"]},{"Key":"you would","Fragments":["need","get"]},{"Key":"would need","Fragments":["to"]},{"Key":"more special","Fragments":["cases"]},{"Key":"special cases","Fragments":["this"]},{"Key":"cases this","Fragments":["is"]},{"Key":"The code","Fragments":["is","is","does"]},{"Key":"is clear","Fragments":["and"]},{"Key":"clear and","Fragments":["has"]},{"Key":"and has","Fragments":["comments,","negligible"]},{"Key":"has comments,","Fragments":["but"]},{"Key":"comments, but","Fragments":["have"]},{"Key":"but have","Fragments":["you"]},{"Key":"you forgotten","Fragments":["the"]},{"Key":"forgotten the","Fragments":["case"]},{"Key":"numbers and","Fragments":["a"]},{"Key":"a exclamation","Fragments":["mark"]},{"Key":"exclamation mark","Fragments":["at","are","would"]},{"Key":"really love","Fragments":["how"]},{"Key":"love how","Fragments":["simple"]},{"Key":"how simple","Fragments":["this"]},{"Key":"simple this","Fragments":["looks"]},{"Key":"this looks","Fragments":["and"]},{"Key":"looks and","Fragments":["I"]},{"Key":"I absolutely","Fragments":["love"]},{"Key":"absolutely love","Fragments":["the"]},{"Key":"of boost::for_each.","Fragments":["The"]},{"Key":"boost::for_each. The","Fragments":["only"]},{"Key":"only downside","Fragments":["is"]},{"Key":"downside is","Fragments":["it"]},{"Key":"is it","Fragments":["isn't","better","enough"]},{"Key":"it isn't","Fragments":["super","high-performance","there"]},{"Key":"isn't super","Fragments":["readable,"]},{"Key":"super readable,","Fragments":["but"]},{"Key":"readable, but","Fragments":["I"]},{"Key":"can still","Fragments":["figure"]},{"Key":"still figure","Fragments":["out"]},{"Key":"is doing","Fragments":["after"]},{"Key":"doing after","Fragments":["a"]},{"Key":"couple glances.","Fragments":["Great"]},{"Key":"glances. Great","Fragments":["Job!"]},{"Key":"This seemed","Fragments":["like"]},{"Key":"a pretty","Fragments":["straightforward","perfect","new","horrific"]},{"Key":"pretty straightforward","Fragments":["one."]},{"Key":"straightforward one.","Fragments":["Not"]},{"Key":"one. Not","Fragments":["much"]},{"Key":"Not much","Fragments":["to"]},{"Key":"much to","Fragments":["explain"]},{"Key":"My code","Fragments":["doesn't"]},{"Key":"code doesn't","Fragments":["feel","do"]},{"Key":"doesn't feel","Fragments":["as"]},{"Key":"feel as","Fragments":["simple"]},{"Key":"should be,","Fragments":["what"]},{"Key":"be, what","Fragments":["are"]},{"Key":"what are","Fragments":["some"]},{"Key":"some suggestions","Fragments":["on"]},{"Key":"suggestions on","Fragments":["optimizing/simplifying"]},{"Key":"on optimizing/simplifying","Fragments":["this"]},{"Key":"optimizing/simplifying this","Fragments":["code."]},{"Key":"this code.","Fragments":["Would","Also,","Do"]},{"Key":"code. Would","Fragments":["the"]},{"Key":"Would the","Fragments":["best"]},{"Key":"the best","Fragments":["route","alternative","I","solution","way"]},{"Key":"best route","Fragments":["be"]},{"Key":"route be","Fragments":["to"]},{"Key":" Only","Fragments":["numbers"]},{"Key":"Only numbers","Fragments":["with"]},{"Key":"numbers with","Fragments":["a","an"]},{"Key":"mark is","Fragments":["considered"]},{"Key":"a non-forceful","Fragments":["question"]},{"Key":"non-forceful question","Fragments":["(\"Sure\"),"]},{"Key":"question (\"Sure\"),","Fragments":["same"]},{"Key":"(\"Sure\"), same","Fragments":["as"]},{"Key":"as lowercase","Fragments":["with"]},{"Key":"lowercase with","Fragments":["a"]},{"Key":"mark. Normal","Fragments":["sentences"]},{"Key":"Normal sentences","Fragments":["without"]},{"Key":"sentences without","Fragments":["all-caps"]},{"Key":"without all-caps","Fragments":["and"]},{"Key":"all-caps and","Fragments":["ending"]},{"Key":"mark are","Fragments":["considered"]},{"Key":"are considered","Fragments":["non-forceful"]},{"Key":"considered non-forceful","Fragments":["sentences."]},{"Key":"non-forceful sentences.","Fragments":["By"]},{"Key":"sentences. By","Fragments":["analogy,"]},{"Key":"By analogy,","Fragments":["only"]},{"Key":"analogy, only","Fragments":["numbers"]},{"Key":"with an","Fragments":["exclamation","explicit","access","underscore","instance","uppercase","empty"]},{"Key":"mark would","Fragments":["be"]},{"Key":"be normal","Fragments":["sentences"]},{"Key":"normal sentences","Fragments":["(\"Whatever\")."]},{"Key":"I first","Fragments":["thought"]},{"Key":"first thought","Fragments":["of"]},{"Key":"the switch","Fragments":["statement"]},{"Key":"a cleaner","Fragments":["looking"]},{"Key":"cleaner looking","Fragments":["code"]},{"Key":"looking code","Fragments":["but"]},{"Key":"code but","Fragments":["realized"]},{"Key":"but realized","Fragments":["that"]},{"Key":"not possible","Fragments":["because"]},{"Key":"possible because","Fragments":["switch"]},{"Key":"because switch","Fragments":["only"]},{"Key":"switch only","Fragments":["takes"]},{"Key":"only takes","Fragments":["in"]},{"Key":"takes in","Fragments":["numerical"]},{"Key":"in numerical","Fragments":["values."]},{"Key":"numerical values.","Fragments":["Hence,"]},{"Key":"values. Hence,","Fragments":["I"]},{"Key":"Hence, I","Fragments":["came"]},{"Key":"I came","Fragments":["up"]},{"Key":"came up","Fragments":["with"]},{"Key":"up with","Fragments":["the","anything","at"]},{"Key":"the basic","Fragments":["if-else"]},{"Key":"basic if-else","Fragments":["construction.."]},{"Key":"last statement","Fragments":["should"]},{"Key":"statement should","Fragments":["be"]},{"Key":" else","Fragments":["{","{","c"]},{"Key":"only found","Fragments":["that"]},{"Key":"found that","Fragments":["here"]},{"Key":"that here","Fragments":["while"]},{"Key":"here while","Fragments":["checking"]},{"Key":"while checking","Fragments":["my"]},{"Key":"checking my","Fragments":["code."]},{"Key":"code could","Fragments":["be"]},{"Key":"better by","Fragments":["being"]},{"Key":"by being","Fragments":["more"]},{"Key":"being more","Fragments":["C++"]},{"Key":"more C++","Fragments":["-","11"]},{"Key":"C++ -","Fragments":["like"]},{"Key":"- like","Fragments":["using"]},{"Key":"like using","Fragments":["\\\u003ciostream\\\u003e","the"]},{"Key":"using \\\u003ciostream\\\u003e","Fragments":["and"]},{"Key":"\\\u003ciostream\\\u003e and","Fragments":["\\\u003cstring\\\u003e"]},{"Key":"and \\\u003cstring\\\u003e","Fragments":["instead"]},{"Key":"\\\u003cstring\\\u003e instead","Fragments":["of"]},{"Key":"of \"stdio.h\",","Fragments":["and"]},{"Key":"\"stdio.h\", and","Fragments":["letting"]},{"Key":"and letting","Fragments":["the"]},{"Key":"letting the","Fragments":["compiler"]},{"Key":"compiler automatically","Fragments":["create"]},{"Key":"automatically create","Fragments":["the","them"]},{"Key":"create the","Fragments":["constructor/destructor."]},{"Key":"are also","Fragments":["some","redundant."]},{"Key":"also some","Fragments":["stylistic"]},{"Key":"some stylistic","Fragments":["tweaks,"]},{"Key":"stylistic tweaks,","Fragments":["for"]},{"Key":"tweaks, for","Fragments":["example"]},{"Key":"for example","Fragments":["the"]},{"Key":"example the","Fragments":["curly"]},{"Key":"the curly","Fragments":["braces","braces"]},{"Key":"curly braces","Fragments":["are","after"]},{"Key":"braces are","Fragments":["not"]},{"Key":"for 'if'","Fragments":["statements"]},{"Key":"'if' statements","Fragments":["with"]},{"Key":"statements with","Fragments":["only","only"]},{"Key":"only one","Fragments":["line","statement","for","thing"]},{"Key":"line of","Fragments":["code"]},{"Key":"code after","Fragments":["them,"]},{"Key":"after them,","Fragments":["and"]},{"Key":"and since","Fragments":["you"]},{"Key":"have 'using","Fragments":["namespace"]},{"Key":"'using namespace","Fragments":["std;'"]},{"Key":"namespace std;'","Fragments":["you"]},{"Key":"std;' you","Fragments":["can"]},{"Key":"can replace","Fragments":["'std::string'","lines","the"]},{"Key":"replace 'std::string'","Fragments":["with"]},{"Key":"'std::string' with","Fragments":["just"]},{"Key":"with just","Fragments":["'string'.","a","counts[word]"]},{"Key":"use regex","Fragments":["instead","[like"]},{"Key":"regex instead","Fragments":["but"]},{"Key":"instead but","Fragments":["I"]},{"Key":"C++'s regex","Fragments":["library"]},{"Key":"library yet.","Fragments":["Doing"]},{"Key":"yet. Doing","Fragments":["this"]},{"Key":"Doing this","Fragments":["reminded"]},{"Key":"this reminded","Fragments":["me"]},{"Key":"reminded me","Fragments":["I"]},{"Key":"me I","Fragments":["ought"]},{"Key":"I ought","Fragments":["to"]},{"Key":"ought to","Fragments":["learn"]},{"Key":"If query.size()","Fragments":["=="]},{"Key":"query.size() ==","Fragments":["'?',"]},{"Key":"== '?',","Fragments":["then"]},{"Key":"'?', then","Fragments":["query.size"]},{"Key":"then query.size","Fragments":["is"]},{"Key":"query.size is","Fragments":["\u003e"]},{"Key":"is \u003e","Fragments":["0."]},{"Key":"\u003e 0.","Fragments":["I"]},{"Key":"0. I","Fragments":["think"]},{"Key":"could simply","Fragments":["be:"]},{"Key":"return query.back()","Fragments":["=="]},{"Key":"query.back() ==","Fragments":["'?'"]},{"Key":"about std::all_of,","Fragments":["any_of,"]},{"Key":"std::all_of, any_of,","Fragments":["and"]},{"Key":"any_of, and","Fragments":["none_of."]},{"Key":"and none_of.","Fragments":["I"]},{"Key":"none_of. I","Fragments":["like"]},{"Key":"used these","Fragments":["functions."]},{"Key":"It's very","Fragments":["readable."]},{"Key":"very readable.","Fragments":["For"]},{"Key":"readable. For","Fragments":["me,"]},{"Key":"For me,","Fragments":["this"]},{"Key":"me, this","Fragments":["is"]},{"Key":"most readable","Fragments":["implementation"]},{"Key":"readable implementation","Fragments":["I've"]},{"Key":"implementation I've","Fragments":["seen."]},{"Key":" Is","Fragments":["there","that","there"]},{"Key":"there a","Fragments":["particular","way","reason"]},{"Key":"a particular","Fragments":["reason,","letter"]},{"Key":"particular reason,","Fragments":["except"]},{"Key":"reason, except","Fragments":["for"]},{"Key":"except for","Fragments":["personal"]},{"Key":"for personal","Fragments":["preference,"]},{"Key":"personal preference,","Fragments":["to"]},{"Key":"preference, to","Fragments":["use"]},{"Key":"class, instead","Fragments":["of"]},{"Key":"A single","Fragments":["static"]},{"Key":"single static","Fragments":["function"]},{"Key":"inside a","Fragments":["class"]},{"Key":"class seems","Fragments":["like"]},{"Key":"like unnecessary,","Fragments":["you"]},{"Key":"unnecessary, you","Fragments":["could"]},{"Key":"could do","Fragments":["with","the","with"]},{"Key":"namespace as","Fragments":["well:"]},{"Key":"hey(std::string const","Fragments":["\u0026);"]},{"Key":" Hmm,","Fragments":["I","is","I"]},{"Key":"Hmm, I","Fragments":["am","guess"]},{"Key":"am not","Fragments":["sure","going","too"]},{"Key":"is new","Fragments":["in"]},{"Key":"new in","Fragments":["C++11."]},{"Key":" Maybe","Fragments":["you"]},{"Key":"Maybe you","Fragments":["were"]},{"Key":"you were","Fragments":["thinking","to","given"]},{"Key":"were thinking","Fragments":["about"]},{"Key":"thinking about","Fragments":["a"]},{"Key":"a case","Fragments":["without"]},{"Key":"case without","Fragments":["const?"]},{"Key":" char","Fragments":["const","c"]},{"Key":"char const","Fragments":["*"]},{"Key":"const *","Fragments":["does","with"]},{"Key":"* does","Fragments":["not"]},{"Key":"not convert","Fragments":["to"]},{"Key":"convert to","Fragments":["string","lower"]},{"Key":"Anyway, this","Fragments":["is"]},{"Key":"use string","Fragments":["const"]},{"Key":"Since it","Fragments":["is"]},{"Key":"is compatible","Fragments":["to"]},{"Key":"compatible to","Fragments":["c-strings,"]},{"Key":"to c-strings,","Fragments":["and"]},{"Key":"c-strings, and","Fragments":["is"]},{"Key":" Fixed","Fragments":["lambda"]},{"Key":"Fixed lambda","Fragments":["function.."]},{"Key":"lambda function..","Fragments":["however"]},{"Key":"function.. however","Fragments":["this"]},{"Key":"however this","Fragments":["implies"]},{"Key":"this implies","Fragments":["an"]},{"Key":"implies an","Fragments":["implicit"]},{"Key":"an implicit","Fragments":["conversion"]},{"Key":"implicit conversion","Fragments":["from"]},{"Key":"conversion from","Fragments":["bool"]},{"Key":"from bool","Fragments":["to"]},{"Key":"bool to","Fragments":["unsigned,","make"]},{"Key":"to unsigned,","Fragments":["it's"]},{"Key":"unsigned, it's","Fragments":["fine,"]},{"Key":"it's fine,","Fragments":["but"]},{"Key":"fine, but","Fragments":["I'm"]},{"Key":"sure it's","Fragments":["the"]},{"Key":"it's the","Fragments":["way"]},{"Key":"if it's","Fragments":["a","not","a","a","shouting","silence","yelling","a"]},{"Key":"a question,","Fragments":["but","and","shouting,"]},{"Key":"question, but","Fragments":["there"]},{"Key":"are spaces","Fragments":["at"]},{"Key":" @leopold","Fragments":[":"]},{"Key":"@leopold :","Fragments":["Looks"]},{"Key":": Looks","Fragments":["like"]},{"Key":"Looks like","Fragments":["isalpha","you"]},{"Key":"like isalpha","Fragments":["it's"]},{"Key":"isalpha it's","Fragments":["getting"]},{"Key":"it's getting","Fragments":["pulled"]},{"Key":"getting pulled","Fragments":["in"]},{"Key":"pulled in","Fragments":["by"]},{"Key":"in by","Fragments":["`#include"]},{"Key":"by `#include","Fragments":["\u003cstring\u003e`."]},{"Key":"`#include \u003cstring\u003e`.","Fragments":["I"]},{"Key":"\u003cstring\u003e`. I","Fragments":["didn't"]},{"Key":"that `\u003cstring\u003e`","Fragments":["included"]},{"Key":"`\u003cstring\u003e` included","Fragments":["`\u003ccctype\u003e`."]},{"Key":"included `\u003ccctype\u003e`.","Fragments":["Good"]},{"Key":"`\u003ccctype\u003e`. Good","Fragments":["practice"]},{"Key":"Good practice","Fragments":["would"]},{"Key":"practice would","Fragments":["probably"]},{"Key":"would probably","Fragments":["be","be","be","benefit"]},{"Key":"include that","Fragments":["header."]},{"Key":"as clean","Fragments":["as"]},{"Key":"clean as","Fragments":["possible."]},{"Key":"as possible.","Fragments":["Whilst"]},{"Key":"possible. Whilst","Fragments":["I"]},{"Key":"Whilst I","Fragments":["think"]},{"Key":"there would","Fragments":["probably"]},{"Key":"a faster","Fragments":["way"]},{"Key":"faster way","Fragments":["to"]},{"Key":"do this","Fragments":["then","procedurally","would"]},{"Key":"this then","Fragments":["strip"]},{"Key":"then strip","Fragments":["the"]},{"Key":"strip the","Fragments":["string","punctuation"]},{"Key":"string (copying","Fragments":["it"]},{"Key":"(copying it","Fragments":["in"]},{"Key":"the process)","Fragments":["and"]},{"Key":"process) and","Fragments":["then"]},{"Key":"then counting","Fragments":["the"]},{"Key":"counting the","Fragments":["words,"]},{"Key":"the words,","Fragments":["I"]},{"Key":"words, I","Fragments":["can't"]},{"Key":"doing it","Fragments":["which","word"]},{"Key":"it which","Fragments":["would"]},{"Key":"would leave","Fragments":["the","you"]},{"Key":"leave the","Fragments":["code"]},{"Key":"a readable","Fragments":["state."]},{"Key":"If anyone","Fragments":["can"]},{"Key":"anyone can","Fragments":["give"]},{"Key":"can give","Fragments":["some"]},{"Key":"give some","Fragments":["pointers"]},{"Key":"some pointers","Fragments":["on"]},{"Key":"pointers on","Fragments":["how"]},{"Key":"on how","Fragments":["to"]},{"Key":"be greatly","Fragments":["appreciated."]},{"Key":"quick implementation","Fragments":["which"]},{"Key":"implementation which","Fragments":["passes"]},{"Key":"which passes","Fragments":["all"]},{"Key":"tests, however","Fragments":["is"]},{"Key":"however is","Fragments":["pretty","to"]},{"Key":"is pretty","Fragments":["ugly","much"]},{"Key":"pretty ugly","Fragments":["for"]},{"Key":"ugly for","Fragments":["c++11"]},{"Key":"for c++11","Fragments":["with"]},{"Key":"c++11 with","Fragments":["an"]},{"Key":"explicit for","Fragments":["loop"]},{"Key":"loop iterating","Fragments":["over"]},{"Key":"over indices","Fragments":["of"]},{"Key":"indices of","Fragments":["the"]},{"Key":" Perhaps","Fragments":["a","a"]},{"Key":"Perhaps a","Fragments":["boost::zip_iterator","very"]},{"Key":"a boost::zip_iterator","Fragments":["or"]},{"Key":"boost::zip_iterator or","Fragments":["a"]},{"Key":"a some","Fragments":["other"]},{"Key":"other method","Fragments":["of"]},{"Key":"of simultaneously","Fragments":["iterating"]},{"Key":"simultaneously iterating","Fragments":["over"]},{"Key":"over two","Fragments":["containers"]},{"Key":"two containers","Fragments":["would"]},{"Key":"containers would","Fragments":["be"]},{"Key":"I personally","Fragments":["like","think"]},{"Key":"personally like","Fragments":["the"]},{"Key":"you rely","Fragments":["on"]},{"Key":"rely on","Fragments":["std::algorithms","built-in","```int```'s"]},{"Key":"on std::algorithms","Fragments":["to"]},{"Key":"std::algorithms to","Fragments":["trim"]},{"Key":"to trim","Fragments":["the"]},{"Key":"trim the","Fragments":["string"]},{"Key":"if for","Fragments":["lower-case"]},{"Key":"for lower-case","Fragments":["letters."]},{"Key":"letters. :)","Fragments":["It"]},{"Key":":) It","Fragments":["is","is"]},{"Key":"also very","Fragments":["good"]},{"Key":"good that","Fragments":["you","you"]},{"Key":"you thought","Fragments":["of"]},{"Key":"of making","Fragments":["the","the","these","a","a","it"]},{"Key":"default constructor","Fragments":["private.","as"]},{"Key":"just have","Fragments":["three"]},{"Key":"have three","Fragments":["minor"]},{"Key":"three minor","Fragments":["suggestions:"]},{"Key":" (1)","Fragments":["Maybe","Why"]},{"Key":"(1) Maybe","Fragments":["\"message\""]},{"Key":"Maybe \"message\"","Fragments":["or"]},{"Key":"\"message\" or","Fragments":["\"request\""]},{"Key":"or \"request\"","Fragments":["would"]},{"Key":"\"request\" would","Fragments":["be"]},{"Key":"string passed","Fragments":["to"]},{"Key":" (2)","Fragments":["Concerning","To"]},{"Key":"(2) Concerning","Fragments":["your"]},{"Key":"Concerning your","Fragments":["lambda-expressions,"]},{"Key":"your lambda-expressions,","Fragments":["I"]},{"Key":"lambda-expressions, I","Fragments":["prefer"]},{"Key":"prefer less","Fragments":["indented"]},{"Key":"less indented","Fragments":["code."]},{"Key":"indented code.","Fragments":["That"]},{"Key":"code. That","Fragments":["said,"]},{"Key":"That said,","Fragments":["I"]},{"Key":"I suggest","Fragments":["the","a","an"]},{"Key":"suggest the","Fragments":["format"]},{"Key":" \u003ctab\u003e\u003ctab\u003equestion.rbegin(),","Fragments":["question.rend(),"]},{"Key":" \u003ctab\u003e\u003ctab\u003e[](std::string::value_type","Fragments":["val)"]},{"Key":"\u003ctab\u003e\u003ctab\u003e[](std::string::value_type val)","Fragments":["{"]},{"Key":"val) {","Fragments":["return"]},{"Key":"{ return","Fragments":["!std::isspace(val);"]},{"Key":"return !std::isspace(val);","Fragments":["}).base(),"]},{"Key":" (3)","Fragments":["Since","Morevoer,"]},{"Key":"(3) Since","Fragments":["C++11,"]},{"Key":"Since C++11,","Fragments":["std::string"]},{"Key":"C++11, std::string","Fragments":["has"]},{"Key":"std::string has","Fragments":["a"]},{"Key":"a back()-method,","Fragments":["so"]},{"Key":"back()-method, so","Fragments":["```*question.rbegin()```"]},{"Key":"so ```*question.rbegin()```","Fragments":["could"]},{"Key":"```*question.rbegin()``` could","Fragments":["be"]},{"Key":" Looking","Fragments":["at"]},{"Key":"Looking at","Fragments":["some","other"]},{"Key":"at some","Fragments":["of","point"]},{"Key":"code here","Fragments":["I've"]},{"Key":"here I've","Fragments":["found"]},{"Key":"I've found","Fragments":["std::inner_product"]},{"Key":"found std::inner_product","Fragments":["which"]},{"Key":"std::inner_product which","Fragments":["is"]},{"Key":"pretty perfect","Fragments":["fit"]},{"Key":" Unfortunately","Fragments":["query.back()"]},{"Key":"Unfortunately query.back()","Fragments":["causes"]},{"Key":"query.back() causes","Fragments":["undefined"]},{"Key":"causes undefined","Fragments":["behavior"]},{"Key":"when query","Fragments":["is"]},{"Key":"query is","Fragments":["empty.","not"]},{"Key":"empty. So","Fragments":["I","calling"]},{"Key":"that query","Fragments":["is"]},{"Key":"not empty","Fragments":["before"]},{"Key":"empty before","Fragments":["I"]},{"Key":"before I","Fragments":["can"]},{"Key":"can look","Fragments":["at"]},{"Key":"at its","Fragments":["last"]},{"Key":"its last","Fragments":["element."]},{"Key":" Non-member","Fragments":["begin"]},{"Key":"Non-member begin","Fragments":["and"]},{"Key":"begin and","Fragments":["end"]},{"Key":"and end","Fragments":["would","of","of","of","of","of"]},{"Key":"good idea.","Fragments":["Although",":)"]},{"Key":"idea. Although","Fragments":["it's"]},{"Key":"Although it's","Fragments":["a"]},{"Key":"bit annoying","Fragments":["since"]},{"Key":"annoying since","Fragments":["it's"]},{"Key":"since it's","Fragments":["longer","only"]},{"Key":"it's longer","Fragments":["to"]},{"Key":"longer to","Fragments":["write"]},{"Key":" Checking","Fragments":["for"]},{"Key":"Checking for","Fragments":["whitespace"]},{"Key":"'?' as","Fragments":["well."]},{"Key":"as well.","Fragments":["But"]},{"Key":"well. But","Fragments":["the"]},{"Key":"conditions for","Fragments":["this","yelling/question/silence"]},{"Key":"exercise are","Fragments":["stated"]},{"Key":"are stated","Fragments":["very"]},{"Key":"stated very","Fragments":["loosely."]},{"Key":"very loosely.","Fragments":["Without"]},{"Key":"loosely. Without","Fragments":["the"]},{"Key":"Without the","Fragments":["unit"]},{"Key":"unit tests,","Fragments":["I'd"]},{"Key":"tests, I'd","Fragments":["have"]},{"Key":"this program","Fragments":["is","does"]},{"Key":"program is","Fragments":["supposed"]},{"Key":"to output","Fragments":["-"]},{"Key":"output -","Fragments":["and"]},{"Key":"- and","Fragments":["the"]},{"Key":"don't cover","Fragments":["a"]},{"Key":"cover a","Fragments":["lot"]},{"Key":"of cases.","Fragments":["For"]},{"Key":"cases. For","Fragments":["example,"]},{"Key":"example, what","Fragments":["happens"]},{"Key":"I say","Fragments":["\"HELLO?\"?"]},{"Key":"say \"HELLO?\"?","Fragments":["Is"]},{"Key":"\"HELLO?\"? Is","Fragments":["that"]},{"Key":"Is that","Fragments":["a","proper"]},{"Key":"shout or","Fragments":["a","not"]},{"Key":"I'm actually","Fragments":["not"]},{"Key":"actually not","Fragments":["too"]},{"Key":"too concerned","Fragments":["about","about"]},{"Key":"concerned about","Fragments":["cases","factoring"]},{"Key":"about cases","Fragments":["that"]},{"Key":"cases that","Fragments":["aren't"]},{"Key":"that aren't","Fragments":["covered"]},{"Key":"aren't covered","Fragments":["by"]},{"Key":"covered by","Fragments":["the"]},{"Key":"tests as","Fragments":["there"]},{"Key":"are simply","Fragments":["too"]},{"Key":"simply too","Fragments":["many"]},{"Key":"too many","Fragments":["to"]},{"Key":"many to","Fragments":["cover."]},{"Key":"1) True,","Fragments":["I","I"]},{"Key":"True, I","Fragments":["forgot","could","could"]},{"Key":"I forgot","Fragments":["about","to","the","to"]},{"Key":"forgot about","Fragments":["that."]},{"Key":"also don't","Fragments":["really","need"]},{"Key":"really lose","Fragments":["anything."]},{"Key":"lose anything.","Fragments":["I'm"]},{"Key":"anything. I'm","Fragments":["not"]},{"Key":"a fan","Fragments":["of","of"]},{"Key":"fan of","Fragments":["using","algorithms,"]},{"Key":"using namespaces","Fragments":["in"]},{"Key":"namespaces in","Fragments":["that"]},{"Key":"that way.","Fragments":["For","so"]},{"Key":"way. For","Fragments":["a"]},{"Key":"For a","Fragments":["single"]},{"Key":"single function,","Fragments":["there"]},{"Key":"function, there","Fragments":["isn't"]},{"Key":"there isn't","Fragments":["much"]},{"Key":"a difference.","Fragments":["But"]},{"Key":"difference. But","Fragments":["if"]},{"Key":"But if","Fragments":["I'd"]},{"Key":"if I'd","Fragments":["ever"]},{"Key":"I'd ever","Fragments":["need"]},{"Key":"ever need","Fragments":["helper"]},{"Key":"need helper","Fragments":["functions"]},{"Key":"functions or","Fragments":["persistent"]},{"Key":"or persistent","Fragments":["variables,"]},{"Key":"persistent variables,","Fragments":["a"]},{"Key":"variables, a","Fragments":["class"]},{"Key":"is decidedly","Fragments":["the"]},{"Key":"decidedly the","Fragments":["better"]},{"Key":"the better","Fragments":["alternative.","approach."]},{"Key":"better alternative.","Fragments":["If"]},{"Key":"alternative. If","Fragments":["compute()"]},{"Key":"If compute()","Fragments":["were"]},{"Key":"compute() were","Fragments":["part"]},{"Key":"were part","Fragments":["of"]},{"Key":"a larger","Fragments":["set"]},{"Key":"larger set","Fragments":["of"]},{"Key":"of functions,","Fragments":["I'd"]},{"Key":"functions, I'd","Fragments":["have"]},{"Key":"have put","Fragments":["it"]},{"Key":"it into","Fragments":["a","\"thisis\"."]},{"Key":"it's mostly","Fragments":["preference"]},{"Key":"mostly preference","Fragments":["since"]},{"Key":"preference since","Fragments":["neither"]},{"Key":"since neither","Fragments":["option"]},{"Key":"neither option","Fragments":["really"]},{"Key":"option really","Fragments":["does"]},{"Key":"really does","Fragments":["anything"]},{"Key":"does anything","Fragments":["in"]},{"Key":"anything in","Fragments":["this","performance."]},{"Key":"Your functions","Fragments":["are"]},{"Key":"functions are","Fragments":["short","right"]},{"Key":"are short","Fragments":["and"]},{"Key":"short and","Fragments":["do","concise"]},{"Key":"and do","Fragments":["what"]},{"Key":"they would*.","Fragments":["I"]},{"Key":"would*. I","Fragments":["also"]},{"Key":"also did","Fragments":["not"]},{"Key":"not know","Fragments":["about","before","how","about"]},{"Key":"about islower","Fragments":["and"]},{"Key":"islower and","Fragments":["isupper"]},{"Key":"and isupper","Fragments":["from"]},{"Key":"isupper from","Fragments":["\"cctype\"."]},{"Key":"from \"cctype\".","Fragments":["+1"]},{"Key":"\"cctype\". +1","Fragments":["for"]},{"Key":"+1 for","Fragments":["that."]},{"Key":"for that.","Fragments":[":)"]},{"Key":" (*","Fragments":["if"]},{"Key":"(* if","Fragments":["the"]},{"Key":"not \"ill-formed\";","Fragments":["see"]},{"Key":"\"ill-formed\"; see","Fragments":["(2)"]},{"Key":"see (2)","Fragments":["and"]},{"Key":"(2) and","Fragments":["(3))"]},{"Key":"think there","Fragments":["are"]},{"Key":"some things","Fragments":["to"]},{"Key":"things to","Fragments":["improve"]},{"Key":"to improve","Fragments":["in"]},{"Key":"improve in","Fragments":["your"]},{"Key":"(1) Why","Fragments":["doesn't"]},{"Key":"Why doesn't","Fragments":["```return"]},{"Key":"doesn't ```return","Fragments":["!std::none_of(str.begin(),"]},{"Key":"```return !std::none_of(str.begin(),","Fragments":["str.end(),"]},{"Key":"!std::none_of(str.begin(), str.end(),","Fragments":["islower)```"]},{"Key":"str.end(), islower)```","Fragments":["suffice"]},{"Key":"islower)``` suffice","Fragments":["to"]},{"Key":"suffice to","Fragments":["check"]},{"Key":"if someone","Fragments":["is","provides"]},{"Key":"is yelling","Fragments":["at"]},{"Key":"yelling at","Fragments":["Bob?"]},{"Key":"(2) To","Fragments":["cite"]},{"Key":"To cite","Fragments":["cplusplus.com:"]},{"Key":"cite cplusplus.com:","Fragments":["\"This"]},{"Key":"cplusplus.com: \"This","Fragments":["function"]},{"Key":"\"This function","Fragments":["(\"back()\")"]},{"Key":"function (\"back()\")","Fragments":["shall"]},{"Key":"(\"back()\") shall","Fragments":["not"]},{"Key":"shall not","Fragments":["be"]},{"Key":"called on","Fragments":["empty"]},{"Key":"(3) Morevoer,","Fragments":["bob::is_asking(\"What"]},{"Key":"Morevoer, bob::is_asking(\"What","Fragments":["did"]},{"Key":"bob::is_asking(\"What did","Fragments":["you"]},{"Key":"did you","Fragments":["say?","run"]},{"Key":"you say?","Fragments":["\")"]},{"Key":"say? \")","Fragments":["evaluates"]},{"Key":"\") evaluates","Fragments":["to"]},{"Key":"evaluates to","Fragments":["false,"]},{"Key":"to false,","Fragments":["although"]},{"Key":"false, although","Fragments":["it"]},{"Key":"a question.","Fragments":["Since"]},{"Key":"question. Since","Fragments":["is_asking"]},{"Key":"Since is_asking","Fragments":["is"]},{"Key":"is_asking is","Fragments":["publically"]},{"Key":"is publically","Fragments":["accessible,"]},{"Key":"publically accessible,","Fragments":["it"]},{"Key":"accessible, it","Fragments":["must"]},{"Key":"it must","Fragments":["be"]},{"Key":"be reliable,","Fragments":["so"]},{"Key":"reliable, so","Fragments":["trimming"]},{"Key":"so trimming","Fragments":["the"]},{"Key":"trimming the","Fragments":["string"]},{"Key":"first would","Fragments":["be"]},{"Key":" (4)","Fragments":["I'd"]},{"Key":"(4) I'd","Fragments":["suggest"]},{"Key":"I'd suggest","Fragments":["to"]},{"Key":"suggest to","Fragments":["rename"]},{"Key":"to rename","Fragments":["your"]},{"Key":"rename your","Fragments":["functions."]},{"Key":"your functions.","Fragments":["\"bob::is_asking\""]},{"Key":"functions. \"bob::is_asking\"","Fragments":["_could_"]},{"Key":"\"bob::is_asking\" _could_","Fragments":["be"]},{"Key":"_could_ be","Fragments":["misleading"]},{"Key":"be misleading","Fragments":["because"]},{"Key":"misleading because","Fragments":["it"]},{"Key":"it _reads_","Fragments":["like"]},{"Key":"_reads_ like","Fragments":["a"]},{"Key":"check _if","Fragments":["bob"]},{"Key":"_if bob","Fragments":["were"]},{"Key":"bob were","Fragments":["asking_,"]},{"Key":"were asking_,","Fragments":["but"]},{"Key":"asking_, but","Fragments":["what"]},{"Key":"happens is","Fragments":["you"]},{"Key":"is you","Fragments":["check"]},{"Key":"you check","Fragments":["if","whether"]},{"Key":"bob _is","Fragments":["asked_"]},{"Key":"_is asked_","Fragments":["about"]},{"Key":"asked_ about","Fragments":["something."]},{"Key":"about something.","Fragments":["So"]},{"Key":"something. So","Fragments":["what"]},{"Key":"So what","Fragments":["do"]},{"Key":"what do","Fragments":["you"]},{"Key":"about names","Fragments":["like"]},{"Key":"names like","Fragments":["\"is_yelled_at\","]},{"Key":"like \"is_yelled_at\",","Fragments":["\"is_asked\"?"]},{"Key":"\"is_yelled_at\", \"is_asked\"?","Fragments":["Sadly,"]},{"Key":"\"is_asked\"? Sadly,","Fragments":["I"]},{"Key":"Sadly, I","Fragments":["can't"]},{"Key":"good expressive","Fragments":["name"]},{"Key":"expressive name","Fragments":["replacing"]},{"Key":"name replacing","Fragments":["\"is_mute\"."]},{"Key":"replacing \"is_mute\".","Fragments":["Any"]},{"Key":"\"is_mute\". Any","Fragments":["suggestions?"]},{"Key":"1) Yea,","Fragments":["the"]},{"Key":"Yea, the","Fragments":["mapped"]},{"Key":"the mapped","Fragments":["value"]},{"Key":"mapped value","Fragments":["is"]},{"Key":"is [value-initialized](http://en.cppreference.com/w/cpp/container/map/operator_at),","Fragments":["which"]},{"Key":"[value-initialized](http://en.cppreference.com/w/cpp/container/map/operator_at), which","Fragments":["is"]},{"Key":"is 0","Fragments":["for"]},{"Key":"0 for","Fragments":["ints."]},{"Key":"2) True.","Fragments":["Even"]},{"Key":"True. Even","Fragments":["if"]},{"Key":"not more","Fragments":["efficient,"]},{"Key":"more efficient,","Fragments":["it's"]},{"Key":"efficient, it's","Fragments":["probably"]},{"Key":"it's probably","Fragments":["cleaner"]},{"Key":"probably cleaner","Fragments":["to"]},{"Key":"cleaner to","Fragments":["have"]},{"Key":"have the","Fragments":["transform"]},{"Key":"the transform","Fragments":["outside"]},{"Key":"transform outside","Fragments":["the"]},{"Key":" Bob","Fragments":["-"]},{"Key":"- now","Fragments":["with"]},{"Key":"with 100%","Fragments":["more"]},{"Key":"100% more","Fragments":["std::begin()!"]},{"Key":"Looks weird","Fragments":["using"]},{"Key":"weird using","Fragments":["the"]},{"Key":"the using","Fragments":["declarations","statements","declaration"]},{"Key":"using declarations","Fragments":["there;"]},{"Key":"declarations there;","Fragments":["probably"]},{"Key":"there; probably","Fragments":["not"]},{"Key":"probably not","Fragments":["worth","as"]},{"Key":"not worth","Fragments":["the"]},{"Key":"worth the","Fragments":["effort."]},{"Key":"someone provides","Fragments":["duplicates"]},{"Key":"provides duplicates","Fragments":["in"]},{"Key":"duplicates in","Fragments":["the","the"]},{"Key":"the candidate","Fragments":["list?","list"]},{"Key":"candidate list?","Fragments":["Should"]},{"Key":"list? Should","Fragments":["your"]},{"Key":"Should your","Fragments":["algorithm"]},{"Key":"algorithm return","Fragments":["the"]},{"Key":"same value","Fragments":["twice?"]},{"Key":"why anagram","Fragments":["is"]},{"Key":"anagram is","Fragments":["a"]},{"Key":"separate method","Fragments":["in"]},{"Key":"namespace anagram","Fragments":["that"]},{"Key":"anagram that","Fragments":["just"]},{"Key":"that just","Fragments":["returns"]},{"Key":"just returns","Fragments":["an"]},{"Key":"returns an","Fragments":["Anagrammer","`int`,"]},{"Key":"an Anagrammer","Fragments":["-"]},{"Key":"Anagrammer -","Fragments":["could"]},{"Key":"- could","Fragments":["be"]},{"Key":"if your","Fragments":["class"]},{"Key":"is named","Fragments":["anagram."]},{"Key":"I learned","Fragments":["C++"]},{"Key":"learned C++","Fragments":["regex"]},{"Key":"C++ regex","Fragments":["after"]},{"Key":"regex after","Fragments":["the"]},{"Key":"Bob question,","Fragments":["and"]},{"Key":"question, and","Fragments":["using","loop"]},{"Key":"and using","Fragments":["it"]},{"Key":"using it","Fragments":["in","in"]},{"Key":"this seemed","Fragments":["only","to"]},{"Key":"seemed only","Fragments":["natural."]},{"Key":"only natural.","Fragments":["A"]},{"Key":"natural. A","Fragments":["faster-running"]},{"Key":"A faster-running","Fragments":["solution"]},{"Key":"faster-running solution","Fragments":["involving"]},{"Key":"solution involving","Fragments":["checking"]},{"Key":"involving checking","Fragments":["the"]},{"Key":"type of","Fragments":["each","pattern","imput/output"]},{"Key":"of each","Fragments":["character","of"]},{"Key":"each character","Fragments":["is"]},{"Key":"probably doable,","Fragments":["but"]},{"Key":"doable, but","Fragments":["this"]},{"Key":"is simpler","Fragments":["and"]},{"Key":"simpler and","Fragments":["more"]},{"Key":"more understandable","Fragments":["imo."]},{"Key":"- You","Fragments":["get","should"]},{"Key":"You get","Fragments":["the"]},{"Key":"the length","Fragments":["of","selection"]},{"Key":"message but","Fragments":["do"]},{"Key":"but do","Fragments":["not"]},{"Key":"its being","Fragments":["zero-length,"]},{"Key":"being zero-length,","Fragments":["then"]},{"Key":"zero-length, then","Fragments":["index"]},{"Key":"then index","Fragments":["into"]},{"Key":"index into","Fragments":["it"]},{"Key":"into it","Fragments":["in"]},{"Key":"negative direction.","Fragments":["If"]},{"Key":"direction. If","Fragments":["this"]},{"Key":"this passed","Fragments":["the"]},{"Key":"passed the","Fragments":["test"]},{"Key":"test then","Fragments":["it"]},{"Key":"then it","Fragments":["was","was","was","is","is"]},{"Key":"was luck","Fragments":["that"]},{"Key":"luck that","Fragments":["you"]},{"Key":"you had","Fragments":["a","left"]},{"Key":"a null","Fragments":["byte"]},{"Key":"null byte","Fragments":["right"]},{"Key":"byte right","Fragments":["before"]},{"Key":"right before","Fragments":["the"]},{"Key":"string. Change","Fragments":["this"]},{"Key":"Change this","Fragments":["to"]},{"Key":"be safer,","Fragments":["or..."]},{"Key":"- When","Fragments":["in"]},{"Key":"When in","Fragments":["Rome,"]},{"Key":"in Rome,","Fragments":["do"]},{"Key":"Rome, do","Fragments":["as"]},{"Key":"do as","Fragments":["the"]},{"Key":"the Romans","Fragments":["do."]},{"Key":"Romans do.","Fragments":["Use"]},{"Key":"do. Use","Fragments":["C++"]},{"Key":"Use C++","Fragments":["functions,"]},{"Key":"C++ functions,","Fragments":["not"]},{"Key":"functions, not","Fragments":["C"]},{"Key":"not C","Fragments":["with"]},{"Key":"C with","Fragments":["classes."]},{"Key":"- Include","Fragments":["`cctype`"]},{"Key":"Include `cctype`","Fragments":["for"]},{"Key":"`cctype` for","Fragments":["its"]},{"Key":"its `islower()`","Fragments":["and"]},{"Key":"`islower()` and","Fragments":["`isupper()`"]},{"Key":"and `isupper()`","Fragments":["functions"]},{"Key":"`isupper()` functions","Fragments":["instead"]},{"Key":"using `msg[i]","Fragments":["\u003e="]},{"Key":"`msg[i] \u003e=","Fragments":["'A'"]},{"Key":"\u0026\u0026 msg[i]","Fragments":["\u003c="]},{"Key":"msg[i] \u003c=","Fragments":["'Z'`."]},{"Key":"'Z'`. It's","Fragments":["much"]},{"Key":"It's much","Fragments":["clearer"]},{"Key":"has negligible","Fragments":["performance"]},{"Key":"negligible performance","Fragments":["impact."]},{"Key":"for tabs,","Fragments":["newlines,"]},{"Key":"newlines, line","Fragments":["feeds,"]},{"Key":"line feeds,","Fragments":["etc."]},{"Key":"feeds, etc.","Fragments":["in"]},{"Key":"etc. in","Fragments":["addition","order"]},{"Key":"in addition","Fragments":["to"]},{"Key":"to spaces","Fragments":["for"]},{"Key":"spaces for","Fragments":["a"]},{"Key":"a blank","Fragments":["response."]},{"Key":"blank response.","Fragments":["`cctype`'s"]},{"Key":"response. `cctype`'s","Fragments":["`isspace()`"]},{"Key":"`cctype`'s `isspace()`","Fragments":["is"]},{"Key":"`isspace()` is","Fragments":["nice"]},{"Key":"nice for","Fragments":["this."]},{"Key":"It's good","Fragments":["practice"]},{"Key":"good practice","Fragments":["to"]},{"Key":"practice to","Fragments":["const","put"]},{"Key":"to const","Fragments":["anything"]},{"Key":"const anything","Fragments":["that"]},{"Key":"anything that","Fragments":["shouldn't"]},{"Key":"that shouldn't","Fragments":["change."]},{"Key":"shouldn't change.","Fragments":["Use"]},{"Key":"change. Use","Fragments":["`const"]},{"Key":"Use `const","Fragments":["char","std::string\u0026`"]},{"Key":"`const char","Fragments":["*"]},{"Key":"* const","Fragments":["string`"]},{"Key":"const string`","Fragments":["or"]},{"Key":"string` or","Fragments":["`const"]},{"Key":"or `const","Fragments":["char[]"]},{"Key":"`const char[]","Fragments":["string`"]},{"Key":"char[] string`","Fragments":["for"]},{"Key":"string` for","Fragments":["the"]},{"Key":"various responses,","Fragments":["or,"]},{"Key":"responses, or,","Fragments":["again,"]},{"Key":"or, again,","Fragments":["use"]},{"Key":"again, use","Fragments":["C++"]},{"Key":"use C++","Fragments":["strings."]},{"Key":"am a","Fragments":["C","fan"]},{"Key":"C programmer,","Fragments":["and"]},{"Key":"programmer, and","Fragments":["subconsciously"]},{"Key":"and subconsciously","Fragments":["write"]},{"Key":"subconsciously write","Fragments":["C99-like"]},{"Key":"write C99-like","Fragments":["code"]},{"Key":"C99-like code","Fragments":["in"]},{"Key":"in any","Fragments":["language","way"]},{"Key":"any language","Fragments":["I"]},{"Key":"to learn.","Fragments":["Please"]},{"Key":"learn. Please","Fragments":["offer"]},{"Key":"Please offer","Fragments":["advice"]},{"Key":"offer advice","Fragments":["as"]},{"Key":"advice as","Fragments":["to"]},{"Key":"to how","Fragments":["I"]},{"Key":"how I","Fragments":["can","solved","created","created","created","created"]},{"Key":"can better","Fragments":["make"]},{"Key":"better make","Fragments":["use"]},{"Key":"of C++'s","Fragments":["OO/functional"]},{"Key":"C++'s OO/functional","Fragments":["features."]},{"Key":"been so","Fragments":["much"]},{"Key":"so much","Fragments":["cleaner","for"]},{"Key":"cleaner if","Fragments":["a"]},{"Key":"word was","Fragments":["considered"]},{"Key":"was considered","Fragments":["anagram"]},{"Key":"considered anagram","Fragments":["of"]},{"Key":"anagram of","Fragments":["itself."]},{"Key":"of itself.","Fragments":["Since"]},{"Key":"itself. Since","Fragments":["that's"]},{"Key":"Since that's","Fragments":["not"]},{"Key":"case I","Fragments":["have"]},{"Key":"use two","Fragments":["member"]},{"Key":"two member","Fragments":["variables,"]},{"Key":"member variables,","Fragments":["one"]},{"Key":"variables, one","Fragments":["with"]},{"Key":"one with","Fragments":["the","the"]},{"Key":"word and","Fragments":["one","iterate","_then_","inserted","inserted"]},{"Key":"and one","Fragments":["with"]},{"Key":"the sorted","Fragments":["version","reference"]},{"Key":"sorted version","Fragments":["of"]},{"Key":"version of","Fragments":["the"]},{"Key":"the word,","Fragments":["in"]},{"Key":"word, in","Fragments":["this"]},{"Key":"way I","Fragments":["sort","understand","could","read","could"]},{"Key":"sort it","Fragments":["just"]},{"Key":"just once,","Fragments":["and"]},{"Key":"once, and","Fragments":["not"]},{"Key":"not at","Fragments":["every"]},{"Key":"at every","Fragments":["loop.."]},{"Key":"If you'd","Fragments":["like"]},{"Key":"you'd like","Fragments":["it"]},{"Key":"like it","Fragments":["to","was"]},{"Key":"more c++,","Fragments":["you"]},{"Key":"c++, you","Fragments":["can"]},{"Key":"can try","Fragments":["to"]},{"Key":" something","Fragments":["like"]},{"Key":"for (int","Fragments":["i"]},{"Key":"(int i","Fragments":["="]},{"Key":"i =","Fragments":["0;","0;","0;","0;","2;"]},{"Key":"= 0;","Fragments":["i","i","i","i"]},{"Key":"0; i","Fragments":["\u003c","\u003c","\u003c","\u003c"]},{"Key":"i \u003c","Fragments":["message.length();","length;","question.size();","str1.length()"]},{"Key":"\u003c message.length();","Fragments":["i++)"]},{"Key":"message.length(); i++)","Fragments":["{"]},{"Key":"c =","Fragments":["message[i];","toupper(","tolower("]},{"Key":"if (c","Fragments":["!="]},{"Key":"(c !=","Fragments":["'"]},{"Key":"!= '","Fragments":["')","')"]},{"Key":"' ')","Fragments":["{"]},{"Key":" is_anything","Fragments":["=","=="]},{"Key":"is_anything =","Fragments":["true;"]},{"Key":" could","Fragments":["become"]},{"Key":"could become","Fragments":["something"]},{"Key":"become something","Fragments":["like:"]},{"Key":"for (auto\u0026","Fragments":["it"]},{"Key":"(auto\u0026 it","Fragments":[":"]},{"Key":"is_anything ==","Fragments":["(it"]},{"Key":"== (it","Fragments":["!="]},{"Key":"should try","Fragments":["to"]},{"Key":"a generic","Fragments":["code","name."]},{"Key":"generic code","Fragments":["that"]},{"Key":"would work","Fragments":["in","just"]},{"Key":"work in","Fragments":["every"]},{"Key":"every situation,","Fragments":["not"]},{"Key":"situation, not","Fragments":["just"]},{"Key":"the testcase.","Fragments":["Instead"]},{"Key":"testcase. Instead","Fragments":["of"]},{"Key":"Instead of","Fragments":["checking","using","`(tmp","speech.at(speech.size()-1)","`for(unsigned","using"]},{"Key":"of checking","Fragments":["for","for"]},{"Key":"the exact","Fragments":["sentence,"]},{"Key":"exact sentence,","Fragments":["you"]},{"Key":"sentence, you","Fragments":["should"]},{"Key":"all capital","Fragments":["(for"]},{"Key":"capital (for","Fragments":["yelling),"]},{"Key":"(for yelling),","Fragments":["or"]},{"Key":"yelling), or","Fragments":["if"]},{"Key":"it ends","Fragments":["with"]},{"Key":"mark (which","Fragments":["represents"]},{"Key":"(which represents","Fragments":["a"]},{"Key":"represents a","Fragments":["question)."]},{"Key":" At","Fragments":["line","first","line"]},{"Key":"At line","Fragments":["20","50"]},{"Key":"line 20","Fragments":["instead"]},{"Key":"20 instead","Fragments":["of"]},{"Key":"for if","Fragments":["it"]},{"Key":"it punctuation","Fragments":["or"]},{"Key":"punctuation or","Fragments":["white"]},{"Key":"or white","Fragments":["space"]},{"Key":"space you","Fragments":["could"]},{"Key":" if(not","Fragments":["alphanumeric)"]},{"Key":"- I've","Fragments":["omitted","also"]},{"Key":"I've omitted","Fragments":["braces"]},{"Key":"omitted braces","Fragments":["from"]},{"Key":"braces from","Fragments":["control"]},{"Key":"from control","Fragments":["statements"]},{"Key":"control statements","Fragments":["where"]},{"Key":"statements where","Fragments":["possible."]},{"Key":"use `else`","Fragments":["unnecessarily"]},{"Key":"`else` unnecessarily","Fragments":["in"]},{"Key":"unnecessarily in","Fragments":["`bob::hey`"]},{"Key":"in `bob::hey`","Fragments":["for"]},{"Key":"`bob::hey` for","Fragments":["better"]},{"Key":"for better","Fragments":["readability."]},{"Key":"I've also","Fragments":["factored"]},{"Key":"also factored","Fragments":["the"]},{"Key":"factored the","Fragments":["message"]},{"Key":"message types","Fragments":["out"]},{"Key":"types out","Fragments":["into"]},{"Key":"out into","Fragments":["individual","a","other"]},{"Key":"into individual","Fragments":["functions;"]},{"Key":"individual functions;","Fragments":["the"]},{"Key":"functions; the","Fragments":["program"]},{"Key":"the program","Fragments":["would","better?"]},{"Key":"program would","Fragments":["be"]},{"Key":"be significantly","Fragments":["shorter","faster."]},{"Key":"significantly shorter","Fragments":["without"]},{"Key":"shorter without","Fragments":["them"]},{"Key":"without them","Fragments":["but"]},{"Key":"them but","Fragments":["also"]},{"Key":"but also","Fragments":["practically"]},{"Key":"also practically","Fragments":["illegible."]},{"Key":"you made","Fragments":["a","the"]},{"Key":"made a","Fragments":["helper","Makefile,","class","great","namespace"]},{"Key":"a helper","Fragments":["class","function","function."]},{"Key":"helper class","Fragments":["to"]},{"Key":"class to","Fragments":["abstract","a"]},{"Key":"to abstract","Fragments":["away"]},{"Key":"abstract away","Fragments":["matching"]},{"Key":"away matching","Fragments":["anagrams."]},{"Key":"matching anagrams.","Fragments":["Some"]},{"Key":"anagrams. Some","Fragments":["comments:"]},{"Key":"1) It","Fragments":["would"]},{"Key":"be cheaper","Fragments":["to"]},{"Key":"cheaper to","Fragments":["preprocess"]},{"Key":"to preprocess","Fragments":["the"]},{"Key":"preprocess the","Fragments":["string"]},{"Key":"string than","Fragments":["to"]},{"Key":"than to","Fragments":["query"]},{"Key":"to query","Fragments":["a"]},{"Key":"query a","Fragments":["map"]},{"Key":"map character","Fragments":["by"]},{"Key":"character by","Fragments":["character"]},{"Key":"by character","Fragments":["for"]},{"Key":"character for","Fragments":["each"]},{"Key":"for each","Fragments":["candidate","response","case.","test","function","of"]},{"Key":"2) What","Fragments":["happens"]},{"Key":"same candidate","Fragments":["is","is"]},{"Key":"candidate is","Fragments":["present","present"]},{"Key":"is present","Fragments":["multiple","in"]},{"Key":"present multiple","Fragments":["times"]},{"Key":"multiple times","Fragments":["in"]},{"Key":"times in","Fragments":["the"]},{"Key":" Wanted","Fragments":["to"]},{"Key":"Wanted to","Fragments":["make"]},{"Key":"make an","Fragments":["optimized","array"]},{"Key":"an optimized","Fragments":["version"]},{"Key":"optimized version","Fragments":["that"]},{"Key":"version that","Fragments":["only"]},{"Key":"that only","Fragments":["runs"]},{"Key":"only runs","Fragments":["through"]},{"Key":"runs through","Fragments":["the"]},{"Key":"string once.","Fragments":["And"]},{"Key":"once. And","Fragments":["as"]},{"Key":"And as","Fragments":["a"]},{"Key":"a bonus","Fragments":["it"]},{"Key":"bonus it","Fragments":["does"]},{"Key":"use \"algorithm\"","Fragments":["header."]},{"Key":"I come","Fragments":["from"]},{"Key":"come from","Fragments":["a","the"]},{"Key":"a Java","Fragments":["background"]},{"Key":"Java background","Fragments":["and"]},{"Key":"background and","Fragments":["have"]},{"Key":"have very","Fragments":["limited"]},{"Key":"very limited","Fragments":["c++"]},{"Key":"limited c++","Fragments":["experience."]},{"Key":"c++ experience.","Fragments":["The"]},{"Key":"experience. The","Fragments":["exercise"]},{"Key":"The exercise","Fragments":["was"]},{"Key":"exercise was","Fragments":["relatively","readability"]},{"Key":"was relatively","Fragments":["easy"]},{"Key":"relatively easy","Fragments":["to","to","to","to","to"]},{"Key":"to solve.","Fragments":["The"]},{"Key":"solve. The","Fragments":["only"]},{"Key":"only real","Fragments":["hurdle"]},{"Key":"real hurdle","Fragments":["was"]},{"Key":"hurdle was","Fragments":["dealing"]},{"Key":"was dealing","Fragments":["with"]},{"Key":"dealing with","Fragments":["queries"]},{"Key":"with queries","Fragments":["that"]},{"Key":"queries that","Fragments":["have"]},{"Key":"that have","Fragments":["no"]},{"Key":"letters to","Fragments":["evaluate"]},{"Key":"to evaluate","Fragments":["if"]},{"Key":"evaluate if","Fragments":["it's"]},{"Key":"not --","Fragments":["just"]},{"Key":"-- just","Fragments":["needed"]},{"Key":"just needed","Fragments":["to"]},{"Key":"needed to","Fragments":["realize"]},{"Key":"to realize","Fragments":["that"]},{"Key":"a char","Fragments":["that","to"]},{"Key":"char that","Fragments":["returns"]},{"Key":"returns false","Fragments":["when"]},{"Key":"false when","Fragments":["evaluating"]},{"Key":"when evaluating","Fragments":["both"]},{"Key":"evaluating both","Fragments":["its"]},{"Key":"both its","Fragments":["upper"]},{"Key":"its upper","Fragments":["and"]},{"Key":"upper and","Fragments":["lower"]},{"Key":"and lower","Fragments":["cases"]},{"Key":"lower cases","Fragments":["is"]},{"Key":"cases is","Fragments":["not"]},{"Key":" Yeah.","Fragments":["I"]},{"Key":"Yeah. I","Fragments":["realized"]},{"Key":"realized this","Fragments":["when"]},{"Key":"this when","Fragments":["I"]},{"Key":"was nitpicking","Fragments":["other"]},{"Key":"nitpicking other","Fragments":["people's"]},{"Key":"other people's","Fragments":["code.","implementations"]},{"Key":"people's code.","Fragments":["I"]},{"Key":"code. I","Fragments":["guess"]},{"Key":"guess I","Fragments":["didn't","got","should"]},{"Key":"didn't understand","Fragments":["the"]},{"Key":"understand the","Fragments":["exercises","benefit"]},{"Key":"the exercises","Fragments":["very"]},{"Key":"exercises very","Fragments":["well."]},{"Key":"simple namespace","Fragments":["instead"]},{"Key":" Remember,","Fragments":["the"]},{"Key":"Remember, the","Fragments":["purpose"]},{"Key":"purpose of","Fragments":["a","the","the"]},{"Key":"used as","Fragments":["an"]},{"Key":"an object","Fragments":["factory.","oriented","oriented","oriented","oriented"]},{"Key":"Also, I","Fragments":["think","didn't","think","think","had"]},{"Key":"think you","Fragments":["are","could","can't","don't","never"]},{"Key":"very advanced","Fragments":["programmer."]},{"Key":"the new","Fragments":["for-loop","fangled","iteration"]},{"Key":"new for-loop","Fragments":["constructs"]},{"Key":"for-loop constructs","Fragments":["in"]},{"Key":"constructs in","Fragments":["C++11."]},{"Key":"in C++11.","Fragments":["The","It"]},{"Key":"C++11. The","Fragments":["code"]},{"Key":"is very","Fragments":["readable.","concise,","simple","good.","simple,","unprofessional.","C-like,"]},{"Key":"I maximize","Fragments":["readability"]},{"Key":"maximize readability","Fragments":["on"]},{"Key":"readability on","Fragments":["this"]},{"Key":"code. Also,","Fragments":["I"]},{"Key":"didn't quite","Fragments":["understand"]},{"Key":"understand it","Fragments":["at"]},{"Key":"it at","Fragments":["first.","around"]},{"Key":" Wow.","Fragments":["Regex"]},{"Key":"Wow. Regex","Fragments":["is"]},{"Key":"Regex is","Fragments":["probably"]},{"Key":"probably overkill","Fragments":["but"]},{"Key":"overkill but","Fragments":["I"]},{"Key":"still like","Fragments":["the"]},{"Key":"the solution","Fragments":["though!","is","for","is"]},{"Key":"solution though!","Fragments":["I"]},{"Key":"though! I","Fragments":["think"]},{"Key":"think more","Fragments":["code"]},{"Key":"more code","Fragments":["comments"]},{"Key":"code comments","Fragments":["would"]},{"Key":"comments would","Fragments":["help."]},{"Key":"would help.","Fragments":["In"]},{"Key":"help. In","Fragments":["general,"]},{"Key":"In general,","Fragments":["regex","try"]},{"Key":"general, regex","Fragments":["is"]},{"Key":"really difficult","Fragments":["to"]},{"Key":"read to","Fragments":["those"]},{"Key":"to those","Fragments":["who"]},{"Key":"those who","Fragments":["don't"]},{"Key":"who don't","Fragments":["know"]},{"Key":"know regex","Fragments":["so"]},{"Key":"regex so","Fragments":["I"]},{"Key":"that readability","Fragments":["is"]},{"Key":"readability is","Fragments":["bad.","better"]},{"Key":"Good use","Fragments":["of"]},{"Key":"of string::back(),","Fragments":["I"]},{"Key":"string::back(), I","Fragments":["wasn't"]},{"Key":"wasn't even","Fragments":["aware"]},{"Key":"even aware","Fragments":["of"]},{"Key":"aware of","Fragments":["that","the","the"]},{"Key":"for traversing","Fragments":["the"]},{"Key":"traversing the","Fragments":["string"]},{"Key":"more times","Fragments":["than"]},{"Key":"times than","Fragments":["necessary,"]},{"Key":"than necessary,","Fragments":["I"]},{"Key":"necessary, I","Fragments":["don't"]},{"Key":"problem because","Fragments":["any_of"]},{"Key":"because any_of","Fragments":["will"]},{"Key":"any_of will","Fragments":["return"]},{"Key":"will return","Fragments":["once"]},{"Key":"return once","Fragments":["a"]},{"Key":"once a","Fragments":["single"]},{"Key":"single match","Fragments":["is"]},{"Key":"match is","Fragments":["found."]},{"Key":"things that","Fragments":["bother"]},{"Key":"that bother","Fragments":["me"]},{"Key":"bother me","Fragments":["about"]},{"Key":"me about","Fragments":["this.","it:"]},{"Key":"first is","Fragments":["that"]},{"Key":"that ```#include","Fragments":["\u003cmap\u003e```"]},{"Key":"```#include \u003cmap\u003e```","Fragments":["is"]},{"Key":"\u003cmap\u003e``` is","Fragments":["required"]},{"Key":"required in","Fragments":["word_count.h"]},{"Key":"in word_count.h","Fragments":["to"]},{"Key":"word_count.h to","Fragments":["get"]},{"Key":"get compilation","Fragments":["working"]},{"Key":"compilation working","Fragments":["-"]},{"Key":"working -","Fragments":["If"]},{"Key":"I understand","Fragments":["correctly,","it,","from","the","it!"]},{"Key":"understand correctly,","Fragments":["it's"]},{"Key":"correctly, it's","Fragments":["best"]},{"Key":"it's best","Fragments":["practice"]},{"Key":"best practice","Fragments":["to"]},{"Key":"put all","Fragments":["the"]},{"Key":"the ```#include```","Fragments":["directives"]},{"Key":"```#include``` directives","Fragments":["in"]},{"Key":"directives in","Fragments":["the"]},{"Key":"implementation rather","Fragments":["than"]},{"Key":" Secondly,","Fragments":["I'm"]},{"Key":"Secondly, I'm","Fragments":["sure"]},{"Key":"I'm sure","Fragments":["there"]},{"Key":"there must","Fragments":["be"]},{"Key":"to strip","Fragments":["the"]},{"Key":"the punctuation","Fragments":["marks","and"]},{"Key":"punctuation marks","Fragments":["without"]},{"Key":"marks without","Fragments":["looping"]},{"Key":"without looping","Fragments":["through"]},{"Key":"looping through","Fragments":["the","the"]},{"Key":"characters (although","Fragments":["presumably"]},{"Key":"(although presumably","Fragments":["there"]},{"Key":"presumably there","Fragments":["will"]},{"Key":"there will","Fragments":["be"]},{"Key":"a loop","Fragments":["through"]},{"Key":"characters at","Fragments":["a"]},{"Key":"a sufficiently","Fragments":["low"]},{"Key":"sufficiently low","Fragments":["level)."]},{"Key":" On","Fragments":["the"]},{"Key":"the plus","Fragments":["side,"]},{"Key":"plus side,","Fragments":["I"]},{"Key":"side, I","Fragments":["really"]},{"Key":"boost functions","Fragments":["for"]},{"Key":"for string","Fragments":["manipulation."]},{"Key":"string manipulation.","Fragments":["Presumably"]},{"Key":"manipulation. Presumably","Fragments":["they"]},{"Key":"Presumably they","Fragments":["are"]},{"Key":"are nice","Fragments":["and"]},{"Key":"and efficient","Fragments":["as"]},{"Key":"efficient as","Fragments":["the"]},{"Key":"strings get","Fragments":["longer."]},{"Key":"get longer.","Fragments":["Also,"]},{"Key":"longer. Also,","Fragments":["I'd"]},{"Key":"Also, I'd","Fragments":["not","prefer"]},{"Key":"I'd not","Fragments":["come"]},{"Key":"not come","Fragments":["across"]},{"Key":"come across","Fragments":["the"]},{"Key":"across the","Fragments":["map"]},{"Key":"map data","Fragments":["type"]},{"Key":"data type","Fragments":["before"]},{"Key":"type before","Fragments":["which"]},{"Key":"before which","Fragments":["I"]},{"Key":"can see","Fragments":["being","the"]},{"Key":"see being","Fragments":["useful."]},{"Key":"the control","Fragments":["flow"]},{"Key":"control flow","Fragments":["clean","in","of"]},{"Key":"flow clean","Fragments":["and"]},{"Key":"clean and","Fragments":["separated"]},{"Key":"and separated","Fragments":["it"]},{"Key":"separated it","Fragments":["out"]},{"Key":"it out","Fragments":["into"]},{"Key":"function at","Fragments":["the"]},{"Key":"the yelling","Fragments":["detection,"]},{"Key":"yelling detection,","Fragments":["it"]},{"Key":"detection, it","Fragments":["seems"]},{"Key":"like kind","Fragments":["of"]},{"Key":"a mash","Fragments":["of"]},{"Key":"mash of","Fragments":["control"]},{"Key":"of control","Fragments":["options."]},{"Key":"control options.","Fragments":["It"]},{"Key":"options. It","Fragments":["took"]},{"Key":"It took","Fragments":["me","me"]},{"Key":"took me","Fragments":["a","a"]},{"Key":"me a","Fragments":["while","long"]},{"Key":"a while","Fragments":["to"]},{"Key":"while to","Fragments":["understand"]},{"Key":"understand your","Fragments":["logic"]},{"Key":"your logic","Fragments":["here."]},{"Key":"logic here.","Fragments":["It"]},{"Key":"looks like","Fragments":["you're","you're"]},{"Key":"like you're","Fragments":["trying","testing","calling"]},{"Key":"you're trying","Fragments":["to"]},{"Key":"check 2","Fragments":["conditions"]},{"Key":"2 conditions","Fragments":["in"]},{"Key":"conditions in","Fragments":["your"]},{"Key":"your for","Fragments":["loop.","loop"]},{"Key":"for loop.","Fragments":["You"]},{"Key":"loop. You","Fragments":["detect"]},{"Key":"You detect","Fragments":["yelling"]},{"Key":"detect yelling","Fragments":["if"]},{"Key":"yelling if","Fragments":["you"]},{"Key":"you detect","Fragments":["upper"]},{"Key":"detect upper","Fragments":["case"]},{"Key":"case and","Fragments":["you","I","sorted)."]},{"Key":"don't detect","Fragments":["any"]},{"Key":"detect any","Fragments":["lower"]},{"Key":"case. It","Fragments":["seems"]},{"Key":"the flow","Fragments":["here"]},{"Key":"flow here","Fragments":["could"]},{"Key":"here could","Fragments":["be"]},{"Key":"be cleaned","Fragments":["up"]},{"Key":"cleaned up","Fragments":["a"]},{"Key":"a little.","Fragments":["I"]},{"Key":"little. I","Fragments":["would"]},{"Key":"consider renaming","Fragments":["your"]},{"Key":"renaming your","Fragments":["variables"]},{"Key":"your variables","Fragments":["at"]},{"Key":"variables at","Fragments":["a"]},{"Key":"a minimum","Fragments":["to"]},{"Key":"minimum to","Fragments":["make"]},{"Key":"more readable.","Fragments":["Right","Besides","Allow"]},{"Key":"readable. Right","Fragments":["now"]},{"Key":"Right now","Fragments":["the"]},{"Key":"now the","Fragments":["variable"]},{"Key":"the variable","Fragments":["names","names"]},{"Key":"variable names","Fragments":["read","more"]},{"Key":"names read","Fragments":["like"]},{"Key":"read like","Fragments":["you're"]},{"Key":"you're testing","Fragments":["for"]},{"Key":"testing for","Fragments":["the"]},{"Key":"single uppercase","Fragments":["letter."]},{"Key":" Line","Fragments":["64"]},{"Key":"Line 64","Fragments":["in"]},{"Key":"64 in","Fragments":["silent"]},{"Key":"in silent","Fragments":["would"]},{"Key":"silent would","Fragments":["probably"]},{"Key":"probably benefit","Fragments":["from"]},{"Key":"benefit from","Fragments":["the"]},{"Key":"the isspace","Fragments":["function."]},{"Key":"the cstring","Fragments":["library"]},{"Key":"cstring library","Fragments":["because"]},{"Key":"library because","Fragments":["it"]},{"Key":"was familiar","Fragments":["and"]},{"Key":"familiar and","Fragments":["the"]},{"Key":"the required","Fragments":["functionality","code","code"]},{"Key":"required functionality","Fragments":["is"]},{"Key":"functionality is","Fragments":["not"]},{"Key":"too complex.","Fragments":["Using"]},{"Key":"complex. Using","Fragments":["strpbrk"]},{"Key":"Using strpbrk","Fragments":["means"]},{"Key":"strpbrk means","Fragments":["a"]},{"Key":"means a","Fragments":["lot"]},{"Key":"of comparisons","Fragments":["have"]},{"Key":"comparisons have","Fragments":["to"]},{"Key":"be made,","Fragments":["but"]},{"Key":"made, but","Fragments":["I"]},{"Key":"to minimize","Fragments":["the"]},{"Key":"minimize the","Fragments":["amount"]},{"Key":"of checks","Fragments":["to"]},{"Key":"checks to","Fragments":["make"]},{"Key":"make against","Fragments":["the"]},{"Key":"against the","Fragments":["string","string","string"]},{"Key":"string (though","Fragments":["I"]},{"Key":"(though I","Fragments":["see"]},{"Key":"see I","Fragments":["could"]},{"Key":"have moved","Fragments":["the"]},{"Key":"moved the","Fragments":["third"]},{"Key":"the third","Fragments":["check","version"]},{"Key":"third check","Fragments":["to"]},{"Key":"check to","Fragments":["the","the","reduce","see"]},{"Key":"first or","Fragments":["second"]},{"Key":"or second","Fragments":["position"]},{"Key":"second position","Fragments":["to"]},{"Key":"position to","Fragments":["reduce"]},{"Key":"to reduce","Fragments":["strpbrk","the","looping"]},{"Key":"reduce strpbrk","Fragments":["calls)."]},{"Key":"Just looking","Fragments":["this"]},{"Key":"looking this","Fragments":["over,"]},{"Key":"this over,","Fragments":["I"]},{"Key":"over, I","Fragments":["don't"]},{"Key":"statements are.","Fragments":["Typically"]},{"Key":"are. Typically","Fragments":["I"]},{"Key":"Typically I","Fragments":["just"]},{"Key":"just see","Fragments":["using"]},{"Key":"see using","Fragments":["in"]},{"Key":"using in","Fragments":["conjunction"]},{"Key":"in conjunction","Fragments":["with"]},{"Key":"conjunction with","Fragments":["using"]},{"Key":"with using","Fragments":["a"]},{"Key":"namespace, i.e.","Fragments":["\"using"]},{"Key":"i.e. \"using","Fragments":["namespace"]},{"Key":"namespace std;\"","Fragments":["That"]},{"Key":"std;\" That","Fragments":["statement"]},{"Key":"That statement","Fragments":["alone"]},{"Key":"statement alone","Fragments":["might"]},{"Key":"alone might","Fragments":["accomplish"]},{"Key":"might accomplish","Fragments":["what"]},{"Key":"accomplish what","Fragments":["you're"]},{"Key":"what you're","Fragments":["hoping"]},{"Key":"you're hoping","Fragments":["for."]},{"Key":"think declaring","Fragments":["yelling,"]},{"Key":"declaring yelling,","Fragments":["saysNothing"]},{"Key":"yelling, saysNothing","Fragments":["and"]},{"Key":"saysNothing and","Fragments":["questioning"]},{"Key":"and questioning","Fragments":["as"]},{"Key":"questioning as","Fragments":["static"]},{"Key":"as static","Fragments":["was","because","local","local","?","won't"]},{"Key":"static was","Fragments":["unnecessary."]},{"Key":"was unnecessary.","Fragments":["They're"]},{"Key":"unnecessary. They're","Fragments":["not"]},{"Key":"They're not","Fragments":["part"]},{"Key":"class so","Fragments":["static"]},{"Key":"so static","Fragments":["is"]},{"Key":"static is","Fragments":["not"]},{"Key":"a modifier","Fragments":["that"]},{"Key":"modifier that","Fragments":["really"]},{"Key":"that really","Fragments":["applies.","depends"]},{"Key":"really applies.","Fragments":["You"]},{"Key":"applies. You","Fragments":["could"]},{"Key":"probably drop","Fragments":["it"]},{"Key":"drop it","Fragments":["and"]},{"Key":"everything would","Fragments":["continue"]},{"Key":"would continue","Fragments":["to"]},{"Key":"continue to","Fragments":["work."]},{"Key":"In hey,","Fragments":["you"]},{"Key":"hey, you","Fragments":["could"]},{"Key":"could simplify","Fragments":["this"]},{"Key":"simplify this","Fragments":["statement"]},{"Key":"this statement","Fragments":["by"]},{"Key":"statement by","Fragments":["removing"]},{"Key":"by removing","Fragments":["the","punctuation"]},{"Key":"removing the","Fragments":["else"]},{"Key":"the else","Fragments":["clauses.","statement,"]},{"Key":"else clauses.","Fragments":["An"]},{"Key":"clauses. An","Fragments":["'if'"]},{"Key":"An 'if'","Fragments":["statement"]},{"Key":"'if' statement","Fragments":["that"]},{"Key":"statement that","Fragments":["contains"]},{"Key":"that contains","Fragments":["a"]},{"Key":"contains a","Fragments":["'return'"]},{"Key":"a 'return'","Fragments":["clause"]},{"Key":"'return' clause","Fragments":["in"]},{"Key":"clause in","Fragments":["the"]},{"Key":"the main","Fragments":["body"]},{"Key":"main body","Fragments":["does"]},{"Key":"body does","Fragments":["not"]},{"Key":"not need","Fragments":["an","to"]},{"Key":"an else.","Fragments":["The"]},{"Key":"else. The","Fragments":["return"]},{"Key":"return short-circuits","Fragments":["the"]},{"Key":"short-circuits the","Fragments":["rest"]},{"Key":"rest of","Fragments":["the","the","the"]},{"Key":"function for","Fragments":["free."]},{"Key":"for free.","Fragments":["Same"]},{"Key":"free. Same","Fragments":["comment"]},{"Key":"Same comment","Fragments":["for"]},{"Key":"comment for","Fragments":["your"]},{"Key":"your yelling","Fragments":["function.","function,"]},{"Key":" Note","Fragments":["that"]},{"Key":"Note that","Fragments":["I"]},{"Key":"you separated","Fragments":["your"]},{"Key":"separated your","Fragments":["control"]},{"Key":"your control","Fragments":["flow"]},{"Key":"flow in","Fragments":["hey"]},{"Key":"in hey","Fragments":["from"]},{"Key":"hey from","Fragments":["the"]},{"Key":"the helper","Fragments":["functions"]},{"Key":"functions you","Fragments":["use"]},{"Key":"use to","Fragments":["make","make"]},{"Key":"the decisions.","Fragments":["it's"]},{"Key":"decisions. it's","Fragments":["good"]},{"Key":"it's good","Fragments":["best"]},{"Key":"good best","Fragments":["practice."]},{"Key":"the quiet","Fragments":["thing,"]},{"Key":"quiet thing,","Fragments":["I"]},{"Key":"thing, I","Fragments":["didn't"]},{"Key":"use _stringstream_","Fragments":["that"]},{"Key":"_stringstream_ that","Fragments":["way."]},{"Key":"way. so","Fragments":["that"]},{"Key":"an interesting","Fragments":["implementation."]},{"Key":"the map;","Fragments":["it"]},{"Key":"map; it","Fragments":["makes"]},{"Key":"clear what","Fragments":["sort","this"]},{"Key":"what sort","Fragments":["of"]},{"Key":"of response","Fragments":["is"]},{"Key":"response is","Fragments":["supposed"]},{"Key":"be ejected","Fragments":["for"]},{"Key":"ejected for","Fragments":["a"]},{"Key":"a given","Fragments":["case,","sequence","string"]},{"Key":"given case,","Fragments":["and"]},{"Key":"case, and","Fragments":["makes","another"]},{"Key":"and makes","Fragments":["the","more","it"]},{"Key":"the list","Fragments":["of"]},{"Key":"list of","Fragments":["responses"]},{"Key":"of responses","Fragments":["easily"]},{"Key":"responses easily","Fragments":["expandable."]},{"Key":"are library","Fragments":["functions"]},{"Key":"the work","Fragments":["of","currently","of"]},{"Key":"work of","Fragments":["looking","counting"]},{"Key":"of looking","Fragments":["through","for"]},{"Key":"looking through","Fragments":["the"]},{"Key":"string letter","Fragments":["by"]},{"Key":"letter by","Fragments":["letter?"]},{"Key":"And moving","Fragments":["the"]},{"Key":"moving the","Fragments":["isQuestion","word"]},{"Key":"the isQuestion","Fragments":["check"]},{"Key":"isQuestion check","Fragments":["to"]},{"Key":"start would","Fragments":["eliminate"]},{"Key":"would eliminate","Fragments":["the"]},{"Key":"eliminate the","Fragments":["need","need","calls"]},{"Key":"the need","Fragments":["to","for","to","of"]},{"Key":"to parse","Fragments":["through","the"]},{"Key":"parse through","Fragments":["the"]},{"Key":"that corner","Fragments":["case."]},{"Key":" Moved","Fragments":["to","to","the"]},{"Key":"Moved to","Fragments":["namespaces","the"]},{"Key":"to namespaces","Fragments":["instead"]},{"Key":"namespaces instead","Fragments":["of"]},{"Key":"of class.","Fragments":["Still"]},{"Key":"class. Still","Fragments":["using"]},{"Key":"Still using","Fragments":["the"]},{"Key":"the old","Fragments":["cstring."]},{"Key":"old cstring.","Fragments":["Encapsulated"]},{"Key":"cstring. Encapsulated","Fragments":["functionality"]},{"Key":"Encapsulated functionality","Fragments":["away"]},{"Key":"functionality away","Fragments":["from"]},{"Key":"the bob::hey","Fragments":["code","function."]},{"Key":"the overall","Fragments":["organization","control"]},{"Key":"overall organization","Fragments":["here."]},{"Key":" Stylistically,","Fragments":["I"]},{"Key":"Stylistically, I","Fragments":["think"]},{"Key":"readable without","Fragments":["all"]},{"Key":"without all","Fragments":["the"]},{"Key":"braces after","Fragments":["if/for"]},{"Key":"after if/for","Fragments":["statements"]},{"Key":"if/for statements","Fragments":["with"]},{"Key":"one statement","Fragments":["inside."]},{"Key":"readable by","Fragments":["using"]},{"Key":"using more","Fragments":["std::string"]},{"Key":"more std::string","Fragments":["functions,"]},{"Key":"std::string functions,","Fragments":["like"]},{"Key":"functions, like","Fragments":["back()"]},{"Key":"like back()","Fragments":["for"]},{"Key":"back() for","Fragments":["example."]},{"Key":"overall control","Fragments":["flow"]},{"Key":"flow of","Fragments":["the"]},{"Key":"Why don't","Fragments":["you"]},{"Key":"functions available","Fragments":["to"]},{"Key":"to std::string,","Fragments":["and"]},{"Key":"std::string, and","Fragments":["try"]},{"Key":"and try","Fragments":["using","again."]},{"Key":"those to","Fragments":["simplify"]},{"Key":" (minor","Fragments":["note:"]},{"Key":"(minor note:","Fragments":["it's"]},{"Key":"note: it's","Fragments":["spelled"]},{"Key":"it's spelled","Fragments":["'alphabet')"]},{"Key":"really know","Fragments":["if","which"]},{"Key":"if I'm","Fragments":["using","doing"]},{"Key":"namespace correctly,","Fragments":["or"]},{"Key":"correctly, or","Fragments":["if"]},{"Key":"if my","Fragments":["organization"]},{"Key":"my organization","Fragments":["of"]},{"Key":"organization of","Fragments":["declarations"]},{"Key":"of declarations","Fragments":["and"]},{"Key":"declarations and","Fragments":["functions"]},{"Key":"and functions","Fragments":["makes"]},{"Key":"functions makes","Fragments":["sense."]},{"Key":"also think","Fragments":["that","the"]},{"Key":"of `int`","Fragments":["accumulators"]},{"Key":"`int` accumulators","Fragments":["to"]},{"Key":"accumulators to","Fragments":["count"]},{"Key":"to count","Fragments":["the"]},{"Key":"count the","Fragments":["appearance","number"]},{"Key":"the appearance","Fragments":["of"]},{"Key":"appearance of","Fragments":["different"]},{"Key":"of different","Fragments":["characters"]},{"Key":"different characters","Fragments":["is"]},{"Key":"characters is","Fragments":["not"]},{"Key":"really the","Fragments":["most"]},{"Key":"the deductions","Fragments":["necessary."]},{"Key":"deductions necessary.","Fragments":["I"]},{"Key":"necessary. I","Fragments":["think"]},{"Key":"this an","Fragments":["O(n)"]},{"Key":"an O(n)","Fragments":["approach,"]},{"Key":"O(n) approach,","Fragments":["which"]},{"Key":"approach, which","Fragments":["doesn't"]},{"Key":"which doesn't","Fragments":["sound"]},{"Key":"doesn't sound","Fragments":["bad?"]},{"Key":"sound bad?","Fragments":["But"]},{"Key":"bad? But","Fragments":["perhaps"]},{"Key":"But perhaps","Fragments":["there's"]},{"Key":"perhaps there's","Fragments":["a"]},{"Key":"there's a","Fragments":["way","smarter"]},{"Key":"making these","Fragments":["deductions"]},{"Key":"these deductions","Fragments":["in"]},{"Key":"deductions in","Fragments":["O(log"]},{"Key":"in O(log","Fragments":["n)"]},{"Key":"O(log n)","Fragments":["time."]},{"Key":"n) time.","Fragments":["I"]},{"Key":"time. I","Fragments":["wouldn't"]},{"Key":"wouldn't really","Fragments":["know."]},{"Key":"default case","Fragments":["for"]},{"Key":"case for","Fragments":["the"]},{"Key":"the `respond()`","Fragments":["function"]},{"Key":"`respond()` function","Fragments":["out"]},{"Key":"function out","Fragments":["of"]},{"Key":"of habit,","Fragments":["but"]},{"Key":"habit, but","Fragments":["would"]},{"Key":"but would","Fragments":["it"]},{"Key":"would it","Fragments":["be","be"]},{"Key":"be okay","Fragments":["to"]},{"Key":"okay to","Fragments":["just"]},{"Key":"just assume","Fragments":["I'll"]},{"Key":"assume I'll","Fragments":["never"]},{"Key":"I'll never","Fragments":["call"]},{"Key":"never call","Fragments":["`respond()`"]},{"Key":"call `respond()`","Fragments":["without"]},{"Key":"`respond()` without","Fragments":["an"]},{"Key":"without an","Fragments":["appropriate"]},{"Key":"an appropriate","Fragments":["`enum"]},{"Key":"appropriate `enum","Fragments":["Response`?"]},{"Key":"pretty new","Fragments":["C++"]},{"Key":"new C++","Fragments":["programmer"]},{"Key":"C++ programmer","Fragments":["(I'm"]},{"Key":"programmer (I'm","Fragments":["5"]},{"Key":"(I'm 5","Fragments":["weeks"]},{"Key":"5 weeks","Fragments":["into"]},{"Key":"weeks into","Fragments":["an"]},{"Key":"an Intro","Fragments":["to"]},{"Key":"Intro to","Fragments":["C++"]},{"Key":"to C++","Fragments":["class"]},{"Key":"C++ class","Fragments":["at"]},{"Key":"a local","Fragments":["Community","reference","reference","reference"]},{"Key":"local Community","Fragments":["College)"]},{"Key":"Community College)","Fragments":["but"]},{"Key":"College) but","Fragments":["I"]},{"Key":"little background","Fragments":["in"]},{"Key":"background in","Fragments":["Java,","Java"]},{"Key":"in Java,","Fragments":["Python,"]},{"Key":"Java, Python,","Fragments":["and"]},{"Key":"Python, and","Fragments":["a"]},{"Key":"a teensy","Fragments":["bit"]},{"Key":"teensy bit","Fragments":["of"]},{"Key":"of C.","Fragments":["Please"]},{"Key":"C. Please","Fragments":["let"]},{"Key":"Please let","Fragments":["me"]},{"Key":"me know","Fragments":["if","what"]},{"Key":"doing something","Fragments":["that"]},{"Key":"is definitive","Fragments":["bad"]},{"Key":"definitive bad","Fragments":["practice,"]},{"Key":"bad practice,","Fragments":["or"]},{"Key":"practice, or","Fragments":["if"]},{"Key":"if there's","Fragments":["a","any"]},{"Key":"a smarter","Fragments":["way"]},{"Key":"smarter way","Fragments":["to"]},{"Key":"to organize","Fragments":["my"]},{"Key":"organize my","Fragments":["code"]},{"Key":"that will","Fragments":["help"]},{"Key":"will help","Fragments":["me"]},{"Key":"me in","Fragments":["the"]},{"Key":"the long","Fragments":["run."]},{"Key":"my very","Fragments":["first"]},{"Key":"first serious","Fragments":["program"]},{"Key":"serious program","Fragments":["written"]},{"Key":"program written","Fragments":["in"]},{"Key":"written in","Fragments":["C++."]},{"Key":"in C++.","Fragments":["I"]},{"Key":"C++. I","Fragments":["don't"]},{"Key":"don't exactly","Fragments":["know"]},{"Key":"exactly know","Fragments":["why"]},{"Key":"know why","Fragments":["`for(char\u0026"]},{"Key":"why `for(char\u0026","Fragments":["c"]},{"Key":"`for(char\u0026 c","Fragments":[":"]},{"Key":": input)`","Fragments":["works","is"]},{"Key":"input)` works","Fragments":["like"]},{"Key":"works like","Fragments":["a"]},{"Key":"a foreach","Fragments":["loop"]},{"Key":"foreach loop","Fragments":["like"]},{"Key":"loop like","Fragments":["in"]},{"Key":"like in","Fragments":["PHP"]},{"Key":"in PHP","Fragments":["or"]},{"Key":"PHP or","Fragments":["a"]},{"Key":"in Python,","Fragments":["especially"]},{"Key":"Python, especially","Fragments":["because"]},{"Key":"especially because","Fragments":["the"]},{"Key":"the \u0026","Fragments":["operator"]},{"Key":"\u0026 operator","Fragments":["is"]},{"Key":"operator is","Fragments":["used"]},{"Key":"is used","Fragments":["to","up","instead"]},{"Key":"the address","Fragments":["of"]},{"Key":"address of","Fragments":["an"]},{"Key":"of an","Fragments":["object.","enum"]},{"Key":"an object.","Fragments":["Can"]},{"Key":"object. Can","Fragments":["someone"]},{"Key":"Can someone","Fragments":["explain"]},{"Key":"someone explain","Fragments":["this"]},{"Key":"explain this","Fragments":["to"]},{"Key":" once","Fragments":["you"]},{"Key":"once you","Fragments":["have"]},{"Key":"have pre-processed","Fragments":["your"]},{"Key":"pre-processed your","Fragments":["string,"]},{"Key":"your string,","Fragments":["you"]},{"Key":"string, you","Fragments":["can"]},{"Key":"an `istringstream`","Fragments":["object"]},{"Key":"`istringstream` object","Fragments":["to"]},{"Key":"object to","Fragments":["read"]},{"Key":"read in","Fragments":["each"]},{"Key":"in each","Fragments":["word","function","verse,"]},{"Key":"each word","Fragments":["and"]},{"Key":"and iterate","Fragments":["the"]},{"Key":"iterate the","Fragments":["count."]},{"Key":"the count.","Fragments":["It"]},{"Key":"count. It","Fragments":["ends"]},{"Key":"It ends","Fragments":["up"]},{"Key":"ends up","Fragments":["being"]},{"Key":"up being","Fragments":["incredibly"]},{"Key":"being incredibly","Fragments":["simple"]},{"Key":" istringstream","Fragments":["stream(wordNoPunct);"]},{"Key":" map\u003cstring,","Fragments":["int\u003e"]},{"Key":"map\u003cstring, int\u003e","Fragments":["count;"]},{"Key":" while","Fragments":["(stream"]},{"Key":"while (stream","Fragments":["\u003e\u003e"]},{"Key":"(stream \u003e\u003e","Fragments":["word)"]},{"Key":"\u003e\u003e word)","Fragments":["{"]},{"Key":" the","Fragments":["`for(char","function","problem"]},{"Key":"the `for(char","Fragments":["\u0026c"]},{"Key":"`for(char \u0026c","Fragments":[":"]},{"Key":"\u0026c :","Fragments":["input)`"]},{"Key":"input)` is","Fragments":["called"]},{"Key":"is called","Fragments":["a","the","nitpicking"]},{"Key":"called a","Fragments":["**range"]},{"Key":"a **range","Fragments":["for**"]},{"Key":"**range for**","Fragments":["statement,"]},{"Key":"for** statement,","Fragments":["which"]},{"Key":"statement, which","Fragments":["was"]},{"Key":"which was","Fragments":["introduced"]},{"Key":"was introduced","Fragments":["in"]},{"Key":"introduced in","Fragments":["C++11."]},{"Key":"C++11. It","Fragments":["iterates"]},{"Key":"It iterates","Fragments":["through"]},{"Key":"iterates through","Fragments":["the"]},{"Key":"elements in","Fragments":["a"]},{"Key":"given sequence","Fragments":["and"]},{"Key":"sequence and","Fragments":["performs"]},{"Key":"and performs","Fragments":["an"]},{"Key":"performs an","Fragments":["operation"]},{"Key":"an operation","Fragments":["on"]},{"Key":"operation on","Fragments":["each"]},{"Key":"on each","Fragments":["value"]},{"Key":"each value","Fragments":["in"]},{"Key":"The `\u0026`","Fragments":["in"]},{"Key":"`\u0026` in","Fragments":["this"]},{"Key":"this context","Fragments":["is"]},{"Key":"context is","Fragments":["not"]},{"Key":"the **address","Fragments":["of**"]},{"Key":"**address of**","Fragments":["operator,"]},{"Key":"of** operator,","Fragments":["it"]},{"Key":"operator, it","Fragments":["is"]},{"Key":"the **reference**","Fragments":["operator."]},{"Key":"**reference** operator.","Fragments":["Thus"]},{"Key":"operator. Thus","Fragments":["you"]},{"Key":"Thus you","Fragments":["are"]},{"Key":"are iterating","Fragments":["through"]},{"Key":"iterating through","Fragments":["each"]},{"Key":"through each","Fragments":["element"]},{"Key":"each element","Fragments":["of"]},{"Key":"element of","Fragments":["input"]},{"Key":"of input","Fragments":["by"]},{"Key":"To simplify","Fragments":["your"]},{"Key":"yelling function,","Fragments":["you"]},{"Key":"function, you","Fragments":["could"]},{"Key":"return false","Fragments":["the"]},{"Key":"false the","Fragments":["moment"]},{"Key":"the moment","Fragments":["a"]},{"Key":"moment a","Fragments":["lowercase"]},{"Key":"lowercase value","Fragments":["is"]},{"Key":" Inside","Fragments":["`bob::check_yelling`"]},{"Key":"Inside `bob::check_yelling`","Fragments":["you"]},{"Key":"`bob::check_yelling` you","Fragments":["shouldn't"]},{"Key":"you shouldn't","Fragments":["check","lose"]},{"Key":"shouldn't check","Fragments":["if"]},{"Key":"if `total_upper`","Fragments":["is"]},{"Key":"`total_upper` is","Fragments":["greater"]},{"Key":"greater than","Fragments":["`total_lower,`"]},{"Key":"than `total_lower,`","Fragments":["instead,"]},{"Key":"`total_lower,` instead,","Fragments":["you"]},{"Key":"instead, you","Fragments":["should"]},{"Key":"is ALL","Fragments":["UPPERCASE"]},{"Key":"ALL UPPERCASE","Fragments":["(like"]},{"Key":"UPPERCASE (like","Fragments":["that)."]},{"Key":" Ok","Fragments":["thanks"]},{"Key":"Thanks so","Fragments":["much"]},{"Key":"much for","Fragments":["looking","those"]},{"Key":"for looking","Fragments":["and"]},{"Key":"looking and","Fragments":["great"]},{"Key":"and great","Fragments":["catch"]},{"Key":"great catch","Fragments":["on"]},{"Key":"catch on","Fragments":["my"]},{"Key":"on my","Fragments":["yelling","system"]},{"Key":"my yelling","Fragments":["function."]},{"Key":"yelling function.","Fragments":["It"]},{"Key":"function. It","Fragments":["needed"]},{"Key":"It needed","Fragments":["simplification.","the"]},{"Key":"needed simplification.","Fragments":["Not"]},{"Key":"simplification. Not","Fragments":["only"]},{"Key":"Not only","Fragments":["could"]},{"Key":"only could","Fragments":["I"]},{"Key":"could I","Fragments":["remove"]},{"Key":"I remove","Fragments":["the"]},{"Key":"else statement,","Fragments":["I"]},{"Key":"statement, I","Fragments":["didn't"]},{"Key":"didn't need","Fragments":["the"]},{"Key":"if statement","Fragments":["either."]},{"Key":"statement either.","Fragments":["I"]},{"Key":"either. I","Fragments":["saw"]},{"Key":"I saw","Fragments":["a","people"]},{"Key":"saw a","Fragments":["few"]},{"Key":"few great","Fragments":["implementations"]},{"Key":"great implementations","Fragments":["of"]},{"Key":"implementations of","Fragments":["yelling"]},{"Key":"of yelling","Fragments":["and"]},{"Key":"yelling and","Fragments":["saysNothing,","if"]},{"Key":"and saysNothing,","Fragments":["but"]},{"Key":"saysNothing, but","Fragments":["I"]},{"Key":"didn't want","Fragments":["to"]},{"Key":"to copy","Fragments":["them."]},{"Key":"copy them.","Fragments":["That's"]},{"Key":"them. That's","Fragments":["why"]},{"Key":"why saysNothing","Fragments":["got"]},{"Key":"saysNothing got","Fragments":["a"]},{"Key":"got a","Fragments":["bit"]},{"Key":"bit weird.","Fragments":["I"]},{"Key":"weird. I","Fragments":["used"]},{"Key":"used static","Fragments":["for"]},{"Key":"static for","Fragments":["my"]},{"Key":"for my","Fragments":["functions","own"]},{"Key":"functions because","Fragments":["anonymous"]},{"Key":"because anonymous","Fragments":["namespace"]},{"Key":"namespace wouldn't","Fragments":["compile"]},{"Key":"wouldn't compile","Fragments":["with"]},{"Key":"compile with","Fragments":["the"]},{"Key":"implementation in","Fragments":["a"]},{"Key":"I even","Fragments":["compiled"]},{"Key":"even compiled","Fragments":["boost"]},{"Key":"compiled boost","Fragments":["myself,"]},{"Key":"boost myself,","Fragments":["and"]},{"Key":"myself, and","Fragments":["it"]},{"Key":"it didn't","Fragments":["work"]},{"Key":"didn't work","Fragments":["until"]},{"Key":"work until","Fragments":["I"]},{"Key":"until I","Fragments":["used","wrote"]},{"Key":"the command","Fragments":["on","line..."]},{"Key":"command on","Fragments":["the"]},{"Key":"Don't know","Fragments":["why,"]},{"Key":"know why,","Fragments":["but"]},{"Key":"why, but","Fragments":["I"]},{"Key":"add the","Fragments":["BOOST_TEST..."]},{"Key":"the BOOST_TEST...","Fragments":["definition"]},{"Key":"BOOST_TEST... definition","Fragments":["to"]},{"Key":"definition to","Fragments":["get","the","avoid"]},{"Key":"get it","Fragments":["to"]},{"Key":"to compile.","Fragments":["Plus"]},{"Key":"compile. Plus","Fragments":["I"]},{"Key":"Plus I","Fragments":["had"]},{"Key":"use `g++","Fragments":["-std=c++0x"]},{"Key":"`g++ -std=c++0x","Fragments":["*.cpp"]},{"Key":"-std=c++0x *.cpp","Fragments":["-lboost_unit_test_framework`"]},{"Key":"*.cpp -lboost_unit_test_framework`","Fragments":["to"]},{"Key":"-lboost_unit_test_framework` to","Fragments":["compile"]},{"Key":"to compile","Fragments":["it."]},{"Key":"compile it.","Fragments":["`cmake`"]},{"Key":"it. `cmake`","Fragments":["made"]},{"Key":"`cmake` made","Fragments":["a"]},{"Key":"a Makefile,","Fragments":["but"]},{"Key":"Makefile, but","Fragments":["every"]},{"Key":"but every","Fragments":["time"]},{"Key":"every time","Fragments":["I","`hey`","a"]},{"Key":"time I","Fragments":["called"]},{"Key":"called make","Fragments":["it"]},{"Key":"it failed.","Fragments":["It"]},{"Key":"failed. It","Fragments":["needed"]},{"Key":"needed the","Fragments":["-lboost_unit_test"]},{"Key":"the -lboost_unit_test","Fragments":["in"]},{"Key":"-lboost_unit_test in","Fragments":["order"]},{"Key":"in order","Fragments":["to","to","to"]},{"Key":"order to","Fragments":["make.","boost","compare"]},{"Key":"Hmm, is","Fragments":["`*`"]},{"Key":"is `*`","Fragments":["an"]},{"Key":"`*` an","Fragments":["upper/lower/digit?"]},{"Key":"an upper/lower/digit?","Fragments":["I"]},{"Key":"upper/lower/digit? I","Fragments":["don't"]},{"Key":"don't believe","Fragments":["so,","it's"]},{"Key":"believe so,","Fragments":["and"]},{"Key":"so, and","Fragments":["so"]},{"Key":"and so","Fragments":["by"]},{"Key":"so by","Fragments":["this"]},{"Key":"by this","Fragments":["logic"]},{"Key":"this logic","Fragments":["bob"]},{"Key":"logic bob","Fragments":["might"]},{"Key":"bob might","Fragments":["respond"]},{"Key":"might respond","Fragments":["\"Fine."]},{"Key":"respond \"Fine.","Fragments":["Be"]},{"Key":"\"Fine. Be","Fragments":["that"]},{"Key":"Be that","Fragments":["way!\"","way!\"`,"]},{"Key":"that way!\"","Fragments":["to"]},{"Key":"way!\" to","Fragments":["the"]},{"Key":"string \"*\"","Fragments":["or"]},{"Key":"\"*\" or","Fragments":["even"]},{"Key":"or even","Fragments":["possibly"]},{"Key":"even possibly","Fragments":["\"#^\u0026!\""]},{"Key":"possibly \"#^\u0026!\"","Fragments":["I"]},{"Key":"\"#^\u0026!\" I","Fragments":["do"]},{"Key":"I do","Fragments":["like","not","always","not"]},{"Key":"do like","Fragments":["the"]},{"Key":"the efficiency","Fragments":["of"]},{"Key":"efficiency of","Fragments":["this","O(n)"]},{"Key":"this algorithm","Fragments":["though,"]},{"Key":"algorithm though,","Fragments":["you"]},{"Key":"though, you","Fragments":["run"]},{"Key":"you run","Fragments":["through","this"]},{"Key":"run through","Fragments":["it"]},{"Key":"through it","Fragments":["once,"]},{"Key":"it once,","Fragments":["extracting"]},{"Key":"once, extracting","Fragments":["all"]},{"Key":"extracting all","Fragments":["the"]},{"Key":"the relevant","Fragments":["bits","header"]},{"Key":"relevant bits","Fragments":["of"]},{"Key":"bits of","Fragments":["information"]},{"Key":"of information","Fragments":["and"]},{"Key":"information and","Fragments":["decide"]},{"Key":"and decide","Fragments":["what"]},{"Key":"decide what","Fragments":["to"]},{"Key":"return from","Fragments":["that."]},{"Key":"just sort","Fragments":["the"]},{"Key":"sort the","Fragments":["characters","strings"]},{"Key":"string instead","Fragments":["of"]},{"Key":"2) If","Fragments":["the"]},{"Key":"present in","Fragments":["the","the","the"]},{"Key":"input multiple","Fragments":["times,"]},{"Key":"multiple times,","Fragments":["it"]},{"Key":"times, it","Fragments":["will"]},{"Key":"be present","Fragments":["in"]},{"Key":"the output","Fragments":["multiple"]},{"Key":"output multiple","Fragments":["times."]},{"Key":"This was","Fragments":["a"]},{"Key":"a pain","Fragments":["in"]},{"Key":"pain in","Fragments":["the"]},{"Key":"the ass.","Fragments":["It"]},{"Key":"ass. It","Fragments":["took"]},{"Key":"out where","Fragments":["I"]},{"Key":"where I","Fragments":["was","am"]},{"Key":"was missing","Fragments":["a"]},{"Key":"missing a","Fragments":["new"]},{"Key":"a new","Fragments":["line","character","(string,int)","element","version.","type"]},{"Key":"new line","Fragments":["character."]},{"Key":"with regexes","Fragments":["but"]},{"Key":"regexes but","Fragments":["after"]},{"Key":"but after","Fragments":["looking"]},{"Key":"after looking","Fragments":["at"]},{"Key":"submissions `any_of`,","Fragments":["`all_of`"]},{"Key":"`any_of`, `all_of`","Fragments":[","]},{"Key":"`all_of` ,","Fragments":["and"]},{"Key":", and","Fragments":["`none_of`"]},{"Key":"and `none_of`","Fragments":["seemed"]},{"Key":"`none_of` seemed","Fragments":["better."]},{"Key":" Though,","Fragments":["now"]},{"Key":"Though, now","Fragments":["I"]},{"Key":"now I","Fragments":["think","have","have","have","have"]},{"Key":"of one","Fragments":["generic"]},{"Key":"one generic","Fragments":["function"]},{"Key":"generic function","Fragments":["that"]},{"Key":"takes regex","Fragments":["list"]},{"Key":"regex list","Fragments":["and"]},{"Key":"list and","Fragments":["if"]},{"Key":"if all","Fragments":["of"]},{"Key":"them regex_match","Fragments":["it"]},{"Key":"regex_match it","Fragments":["returns"]},{"Key":"it returns","Fragments":["true."]},{"Key":"Also I","Fragments":["used"]},{"Key":"used ``namespace``","Fragments":["instead"]},{"Key":"``namespace`` instead","Fragments":["of"]},{"Key":"of ``class``","Fragments":["for"]},{"Key":"``class`` for","Fragments":["`bob`,"]},{"Key":"for `bob`,","Fragments":["and"]},{"Key":"`bob`, and","Fragments":["`static`"]},{"Key":"and `static`","Fragments":["inner"]},{"Key":"`static` inner","Fragments":["functions"]},{"Key":"inner functions","Fragments":["to"]},{"Key":"to prevent","Fragments":["polluting"]},{"Key":"prevent polluting","Fragments":["global"]},{"Key":"polluting global","Fragments":["scope."]},{"Key":"global scope.","Fragments":["Not"]},{"Key":"scope. Not","Fragments":["sure"]},{"Key":"if `static`","Fragments":["is"]},{"Key":"`static` is","Fragments":["proper"]},{"Key":"is proper","Fragments":["and"]},{"Key":"proper and","Fragments":["safe"]},{"Key":"and safe","Fragments":["here."]},{"Key":"understand it,","Fragments":["the"]},{"Key":"it, the","Fragments":["correct"]},{"Key":"correct response","Fragments":["to","rather"]},{"Key":"response to","Fragments":["`\"#\u0026!\"`"]},{"Key":"to `\"#\u0026!\"`","Fragments":["is"]},{"Key":"`\"#\u0026!\"` is","Fragments":["in"]},{"Key":"in fact","Fragments":["`\"Fine."]},{"Key":"fact `\"Fine.","Fragments":["Be"]},{"Key":"`\"Fine. Be","Fragments":["that"]},{"Key":"that way!\"`,","Fragments":["since"]},{"Key":"way!\"`, since","Fragments":["nothing"]},{"Key":"since nothing","Fragments":["is"]},{"Key":"nothing is","Fragments":["actually"]},{"Key":"actually being","Fragments":["said."]},{"Key":"being said.","Fragments":["If"]},{"Key":"said. If","Fragments":["symbols"]},{"Key":"If symbols","Fragments":["are"]},{"Key":"symbols are","Fragments":["to"]},{"Key":"are to","Fragments":["be"]},{"Key":"considered speech","Fragments":["though,"]},{"Key":"speech though,","Fragments":["an"]},{"Key":"though, an","Fragments":["additional"]},{"Key":"an additional","Fragments":["check"]},{"Key":"additional check","Fragments":["for"]},{"Key":"for `ispunct()`","Fragments":["will"]},{"Key":"`ispunct()` will","Fragments":["fix"]},{"Key":"will fix","Fragments":["that."]},{"Key":"is nicely","Fragments":["done"]},{"Key":"nicely done","Fragments":["and"]},{"Key":"done and","Fragments":["quite"]},{"Key":"and quite","Fragments":["natural"]},{"Key":"quite natural","Fragments":["logic."]},{"Key":"natural logic.","Fragments":["One"]},{"Key":"logic. One","Fragments":["way"]},{"Key":"One way","Fragments":["to"]},{"Key":"to speed","Fragments":["it"]},{"Key":"speed it","Fragments":["up"]},{"Key":"it up","Fragments":["is","a"]},{"Key":"up is","Fragments":["to"]},{"Key":"better substitute","Fragments":["for"]},{"Key":"substitute for","Fragments":["`istringstream`,"]},{"Key":"for `istringstream`,","Fragments":["which"]},{"Key":"`istringstream`, which","Fragments":["is"]},{"Key":"is rather","Fragments":["slow."]},{"Key":"rather slow.","Fragments":["Or"]},{"Key":"slow. Or","Fragments":["you"]},{"Key":"Or you","Fragments":["could"]},{"Key":"regex [like","Fragments":["I"]},{"Key":"[like I","Fragments":["did](http://exercism.io/submissions/278a796dd396e748a2d3bc62),"]},{"Key":"I did](http://exercism.io/submissions/278a796dd396e748a2d3bc62),","Fragments":["it's"]},{"Key":"did](http://exercism.io/submissions/278a796dd396e748a2d3bc62), it's","Fragments":["readable"]},{"Key":"it's readable","Fragments":["if"]},{"Key":"readable if","Fragments":["nothing"]},{"Key":"if nothing","Fragments":["else."]},{"Key":"and clean.","Fragments":["However,"]},{"Key":"clean. However,","Fragments":["you"]},{"Key":"could encapsulate","Fragments":["some"]},{"Key":"encapsulate some","Fragments":["of"]},{"Key":"details in","Fragments":["other"]},{"Key":"other functions","Fragments":["like","like"]},{"Key":"functions like","Fragments":["IsQuestion,","`isShouting`,","`isQuestion`"]},{"Key":"like IsQuestion,","Fragments":["IsYell,"]},{"Key":"IsQuestion, IsYell,","Fragments":["etc."]},{"Key":"IsYell, etc.","Fragments":["in"]},{"Key":"to boost","Fragments":["readability."]},{"Key":"Also, I've","Fragments":["seen"]},{"Key":"I've seen","Fragments":["some"]},{"Key":"seen some","Fragments":["others"]},{"Key":"some others","Fragments":["say"]},{"Key":"others say","Fragments":["that"]},{"Key":"that regex","Fragments":["is"]},{"Key":"is overkill","Fragments":["for"]},{"Key":"for simple","Fragments":["patterns"]},{"Key":"simple patterns","Fragments":["like"]},{"Key":"patterns like","Fragments":["these,"]},{"Key":"like these,","Fragments":["but"]},{"Key":"these, but","Fragments":["you"]},{"Key":"have kept","Fragments":["it's"]},{"Key":"kept it's","Fragments":["usage"]},{"Key":"it's usage","Fragments":["to"]},{"Key":"usage to","Fragments":["a"]},{"Key":"a minimum,","Fragments":["which"]},{"Key":"minimum, which","Fragments":["is"]},{"Key":"is good;","Fragments":["what's"]},{"Key":"good; what's","Fragments":["your"]},{"Key":"what's your","Fragments":["take"]},{"Key":"your take","Fragments":["on"]},{"Key":"take on","Fragments":["that?","the","the"]},{"Key":"Also, I'm","Fragments":["not"]},{"Key":"not familiar","Fragments":["with"]},{"Key":"the syntax","Fragments":["on"]},{"Key":"syntax on","Fragments":["line"]},{"Key":"line 13;","Fragments":["it"]},{"Key":"13; it","Fragments":["looks"]},{"Key":"it looks","Fragments":["like","great."]},{"Key":"you're calling","Fragments":["a"]},{"Key":"calling a","Fragments":["function"]},{"Key":"that then","Fragments":["becomes"]},{"Key":"then becomes","Fragments":["a"]},{"Key":"I initially","Fragments":["thought"]},{"Key":"initially thought","Fragments":["about"]},{"Key":"thought about","Fragments":["checking"]},{"Key":"about checking","Fragments":["the","the"]},{"Key":"the edit","Fragments":["distance"]},{"Key":"edit distance","Fragments":["between"]},{"Key":"distance between","Fragments":["two"]},{"Key":"between two","Fragments":["DNA"]},{"Key":"two DNA","Fragments":["sequences,"]},{"Key":"DNA sequences,","Fragments":["but..."]},{"Key":"sequences, but...","Fragments":["at"]},{"Key":"but... at","Fragments":["least"]},{"Key":"least the","Fragments":["test"]},{"Key":"cases (in","Fragments":["particular"]},{"Key":"(in particular","Fragments":["the"]},{"Key":"particular the","Fragments":["last"]},{"Key":"last one)","Fragments":["indicated"]},{"Key":"one) indicated","Fragments":["that"]},{"Key":"indicated that","Fragments":["this"]},{"Key":"would lead","Fragments":["to"]},{"Key":"a wrong","Fragments":["result."]},{"Key":" Oh,","Fragments":["and"]},{"Key":"and by","Fragments":["the","using"]},{"Key":"the way:","Fragments":["I"]},{"Key":"way: I","Fragments":["forgot"]},{"Key":"the iostream-include","Fragments":["which"]},{"Key":"iostream-include which","Fragments":["I"]},{"Key":"used in","Fragments":["my"]},{"Key":"my former","Fragments":["(wrong)"]},{"Key":"former (wrong)","Fragments":["edit-distance"]},{"Key":"(wrong) edit-distance","Fragments":["implementation."]},{"Key":"edit-distance implementation.","Fragments":["Just"]},{"Key":"implementation. Just","Fragments":["ignore"]},{"Key":"Just ignore","Fragments":["that."]},{"Key":"ignore that.","Fragments":[":)"]},{"Key":" Bool","Fragments":["to"]},{"Key":"Bool to","Fragments":["unsigned"]},{"Key":"to unsigned","Fragments":["conversion"]},{"Key":"unsigned conversion","Fragments":["seems"]},{"Key":"conversion seems","Fragments":["fine"]},{"Key":"seems fine","Fragments":["to"]},{"Key":"fine to","Fragments":["me,"]},{"Key":"me, but","Fragments":["if"]},{"Key":"it bothers","Fragments":["you,"]},{"Key":"bothers you,","Fragments":["you"]},{"Key":"you, you","Fragments":["could"]},{"Key":"could count","Fragments":["the"]},{"Key":"of `true`s","Fragments":["instead."]},{"Key":"`true`s instead.","Fragments":["Something"]},{"Key":"instead. Something","Fragments":["else"]},{"Key":"Something else","Fragments":["bothers"]},{"Key":"else bothers","Fragments":["me"]},{"Key":"bothers me","Fragments":["though."]},{"Key":"me though.","Fragments":["Are"]},{"Key":"though. Are","Fragments":["calls"]},{"Key":"Are calls","Fragments":["to"]},{"Key":"calls to","Fragments":["`transform`","strcopy"]},{"Key":"to `transform`","Fragments":["and"]},{"Key":"`transform` and","Fragments":["`accumulate`","the","`accumulate`."]},{"Key":"and `accumulate`","Fragments":["more"]},{"Key":"`accumulate` more","Fragments":["efficient"]},{"Key":"more efficient","Fragments":["than"]},{"Key":"efficient than","Fragments":["a"]},{"Key":"simple `for`","Fragments":["comparing"]},{"Key":"`for` comparing","Fragments":["each"]},{"Key":"comparing each","Fragments":["corresponding"]},{"Key":"each corresponding","Fragments":["character?"]},{"Key":"corresponding character?","Fragments":["If"]},{"Key":"character? If","Fragments":["not,"]},{"Key":"If not,","Fragments":["then"]},{"Key":"not, then","Fragments":["why"]},{"Key":"then why","Fragments":["use"]},{"Key":"why use","Fragments":["them?"]},{"Key":"use them?","Fragments":["In"]},{"Key":"them? In","Fragments":["my"]},{"Key":"opinion they","Fragments":["do"]},{"Key":"not improve","Fragments":["readability"]},{"Key":"improve readability","Fragments":["either.","if"]},{"Key":"agree, and","Fragments":["the"]},{"Key":"last unit","Fragments":["test"]},{"Key":"unit test","Fragments":["was"]},{"Key":"test was","Fragments":["a"]},{"Key":"a pointless","Fragments":["tautology."]},{"Key":"I got","Fragments":["this","too"]},{"Key":"got this","Fragments":["tip"]},{"Key":"this tip","Fragments":["from"]},{"Key":"tip from","Fragments":["another"]},{"Key":"from another","Fragments":["nitpicker:"]},{"Key":"another nitpicker:","Fragments":["your"]},{"Key":"nitpicker: your","Fragments":["boolean"]},{"Key":"your boolean","Fragments":["functions"]},{"Key":"are right","Fragments":["now"]},{"Key":"right now","Fragments":["inside"]},{"Key":"now inside","Fragments":["the"]},{"Key":"the bob","Fragments":["namespace,","namespace","namespace,","function","class"]},{"Key":"bob namespace,","Fragments":["but","to"]},{"Key":"namespace, but","Fragments":["any"]},{"Key":"but any","Fragments":["caller"]},{"Key":"any caller","Fragments":["aware"]},{"Key":"caller aware","Fragments":["of"]},{"Key":"bob namespace","Fragments":["doesn't"]},{"Key":"access isYell,","Fragments":["isQuestion."]},{"Key":"can move","Fragments":["those"]},{"Key":"move those","Fragments":["functions"]},{"Key":"those functions","Fragments":["to"]},{"Key":"to an","Fragments":["anonymous","int."]},{"Key":"namespace. This","Fragments":["keeps"]},{"Key":"This keeps","Fragments":["the"]},{"Key":"keeps the","Fragments":["implementation"]},{"Key":"details (like","Fragments":["private"]},{"Key":"(like private","Fragments":["methods"]},{"Key":"methods of","Fragments":["a"]},{"Key":"a class)","Fragments":["away"]},{"Key":"class) away","Fragments":["from"]},{"Key":"from other","Fragments":["pieces","part"]},{"Key":"other pieces","Fragments":["of"]},{"Key":"pieces of","Fragments":["code"]},{"Key":"that use","Fragments":["the"]},{"Key":"Your code","Fragments":["is","would"]},{"Key":"very concise,","Fragments":["yet"]},{"Key":"concise, yet","Fragments":["very"]},{"Key":"yet very","Fragments":["expressive."]},{"Key":"very expressive.","Fragments":["I"]},{"Key":"expressive. I","Fragments":["like"]},{"Key":"like that.","Fragments":[":)"]},{"Key":"that. :)","Fragments":["I"]},{"Key":":) I","Fragments":["also"]},{"Key":"also learned","Fragments":["about"]},{"Key":"learned about","Fragments":["std::transform"]},{"Key":"about std::transform","Fragments":["which"]},{"Key":"std::transform which","Fragments":["I"]},{"Key":"know before","Fragments":["(very"]},{"Key":"before (very","Fragments":["handy!)."]},{"Key":"only have","Fragments":["one"]},{"Key":"have one","Fragments":["tiny"]},{"Key":"one tiny","Fragments":["question"]},{"Key":"tiny question","Fragments":["about"]},{"Key":"question about","Fragments":["lines"]},{"Key":"about lines","Fragments":["21--22:"]},{"Key":"lines 21--22:","Fragments":["I"]},{"Key":"21--22: I","Fragments":["do"]},{"Key":"how std::transform","Fragments":["allocates"]},{"Key":"std::transform allocates","Fragments":["space"]},{"Key":"allocates space","Fragments":["in"]},{"Key":"space in","Fragments":["'word'."]},{"Key":"in 'word'.","Fragments":["So"]},{"Key":"'word'. So","Fragments":["could"]},{"Key":"So could","Fragments":["it"]},{"Key":"could it","Fragments":["be"]},{"Key":"be that,","Fragments":["by"]},{"Key":"that, by","Fragments":["not"]},{"Key":"by not","Fragments":["telling"]},{"Key":"not telling","Fragments":["the"]},{"Key":"telling the","Fragments":["compiler"]},{"Key":"compiler beforehand","Fragments":["how"]},{"Key":"beforehand how","Fragments":["large"]},{"Key":"how large","Fragments":["word"]},{"Key":"large word","Fragments":["is"]},{"Key":"is going","Fragments":["to","to"]},{"Key":"to be,","Fragments":["these"]},{"Key":"be, these","Fragments":["two"]},{"Key":"these two","Fragments":["lines"]},{"Key":"two lines","Fragments":["could"]},{"Key":"lines could","Fragments":["result","be"]},{"Key":"could result","Fragments":["in"]},{"Key":"of reallocations","Fragments":["and","of"]},{"Key":"reallocations and","Fragments":["copy"]},{"Key":"and copy","Fragments":["operations","constructor."]},{"Key":"copy operations","Fragments":["to"]},{"Key":"operations to","Fragments":["fit"]},{"Key":"to fit","Fragments":["the"]},{"Key":"to lowercase","Fragments":["converted","if"]},{"Key":"lowercase converted","Fragments":["chars"]},{"Key":"converted chars","Fragments":["from"]},{"Key":"chars from","Fragments":["[start,stop)"]},{"Key":"from [start,stop)","Fragments":["into"]},{"Key":"[start,stop) into","Fragments":["'word'?"]},{"Key":"into 'word'?","Fragments":["My"]},{"Key":"'word'? My","Fragments":["suggestion"]},{"Key":"My suggestion","Fragments":["thus"]},{"Key":"suggestion thus","Fragments":["is"]},{"Key":"thus is","Fragments":["to"]},{"Key":" ```std::string","Fragments":["word(start,stop);"]},{"Key":" std::transform(word.begin(),","Fragments":["word.end(),"]},{"Key":"std::transform(word.begin(), word.end(),","Fragments":["word.begin(),"]},{"Key":"word.end(), word.begin(),","Fragments":["::tolower);","::tolower"]},{"Key":"the recursive","Fragments":["call"]},{"Key":"recursive call","Fragments":["to"]},{"Key":"to yourself","Fragments":["to"]},{"Key":"yourself to","Fragments":["adjust"]},{"Key":"to adjust","Fragments":["`str1.len"]},{"Key":"adjust `str1.len","Fragments":["\u003e"]},{"Key":"`str1.len \u003e","Fragments":["str2.len`"]},{"Key":" Something","Fragments":["called"]},{"Key":"Something called","Fragments":["Argument"]},{"Key":"called Argument","Fragments":["Dependent"]},{"Key":"Argument Dependent","Fragments":["Lookup"]},{"Key":"Dependent Lookup","Fragments":["is"]},{"Key":"Lookup is","Fragments":["saving"]},{"Key":"is saving","Fragments":["you"]},{"Key":"saving you","Fragments":["from"]},{"Key":"you from","Fragments":["the"]},{"Key":"the requirement","Fragments":["of"]},{"Key":"requirement of","Fragments":["a"]},{"Key":"a `using","Fragments":["namespace"]},{"Key":"std` or","Fragments":["`std::`"]},{"Key":"or `std::`","Fragments":["qualifier."]},{"Key":"`std::` qualifier.","Fragments":["The"]},{"Key":"qualifier. The","Fragments":["iterator"]},{"Key":"The iterator","Fragments":["returned"]},{"Key":"iterator returned","Fragments":["by"]},{"Key":"returned by","Fragments":["`begin()`"]},{"Key":"by `begin()`","Fragments":["is"]},{"Key":"`begin()` is","Fragments":["a"]},{"Key":"class within","Fragments":["the"]},{"Key":"the std","Fragments":["namespace,","namespace"]},{"Key":"std namespace,","Fragments":["so"]},{"Key":"so the","Fragments":["compiler","best"]},{"Key":"compiler looks","Fragments":["through"]},{"Key":"looks through","Fragments":["the"]},{"Key":"std namespace","Fragments":["to"]},{"Key":"namespace to","Fragments":["find"]},{"Key":"a declaration","Fragments":["for"]},{"Key":"declaration for","Fragments":["`all_of()`,"]},{"Key":"for `all_of()`,","Fragments":["etc."]},{"Key":" (See","Fragments":["http://stackoverflow.com/questions/26055646/functions-in-namespace-std-accessible-in-global-scope"]},{"Key":"(See http://stackoverflow.com/questions/26055646/functions-in-namespace-std-accessible-in-global-scope","Fragments":["and"]},{"Key":"http://stackoverflow.com/questions/26055646/functions-in-namespace-std-accessible-in-global-scope and","Fragments":["http://stackoverflow.com/questions/25976267/interesting-behavior-of-compiler-with-namespaces)."]},{"Key":"Your use","Fragments":["of"]},{"Key":"of `using`","Fragments":["is"]},{"Key":"`using` is","Fragments":["otherwise"]},{"Key":"is otherwise","Fragments":["correct."]},{"Key":"And I","Fragments":["like","really"]},{"Key":"of anonymous","Fragments":["namespaces"]},{"Key":"anonymous namespaces","Fragments":["here"]},{"Key":"namespaces here","Fragments":["as"]},{"Key":"here as","Fragments":["well"]},{"Key":"as references","Fragments":["to"]},{"Key":"references to","Fragments":["make"]},{"Key":"clear when","Fragments":["functions"]},{"Key":"when functions","Fragments":["do"]},{"Key":"functions do","Fragments":["not"]},{"Key":"not modify","Fragments":["the"]},{"Key":"modify the","Fragments":["phrase","variable,"]},{"Key":"the phrase","Fragments":["they"]},{"Key":"phrase they","Fragments":["receive."]},{"Key":"they receive.","Fragments":["You"]},{"Key":"receive. You","Fragments":["could"]},{"Key":"could boost","Fragments":["readability","your"]},{"Key":"boost readability","Fragments":["by","to"]},{"Key":"readability by","Fragments":["changing"]},{"Key":"by changing","Fragments":["the"]},{"Key":"changing the","Fragments":["\"s\"","`m`"]},{"Key":"the \"s\"","Fragments":["parameters"]},{"Key":"\"s\" parameters","Fragments":["to"]},{"Key":"parameters to","Fragments":["something"]},{"Key":"to something","Fragments":["like"]},{"Key":"something like","Fragments":["\"text\"","for","this:"]},{"Key":"like \"text\"","Fragments":["or"]},{"Key":"\"text\" or","Fragments":["\"message\"."]},{"Key":" Really","Fragments":["small"]},{"Key":"Really small","Fragments":["issue"]},{"Key":"small issue","Fragments":["but...you"]},{"Key":"issue but...you","Fragments":["could"]},{"Key":"but...you could","Fragments":["move"]},{"Key":"could move","Fragments":["the","the"]},{"Key":"move the","Fragments":["length","sorted","class"]},{"Key":"length selection","Fragments":["outside"]},{"Key":"selection outside","Fragments":["the"]},{"Key":"the `for`","Fragments":["statement","in","and","loop.\u003c/li\u003e\u003c/ul\u003e"]},{"Key":"`for` statement","Fragments":["to"]},{"Key":"first attempt","Fragments":["to"]},{"Key":"attempt to","Fragments":["work"]},{"Key":"with C++.","Fragments":["I've"]},{"Key":"C++. I've","Fragments":["been"]},{"Key":"using C#","Fragments":["for"]},{"Key":"C# for","Fragments":["almost"]},{"Key":"for almost","Fragments":["5"]},{"Key":"almost 5","Fragments":["years"]},{"Key":"5 years","Fragments":["now"]},{"Key":"years now","Fragments":["and"]},{"Key":"and wanted","Fragments":["to"]},{"Key":"to dive","Fragments":["into"]},{"Key":"dive into","Fragments":["the"]},{"Key":"the world","Fragments":["of"]},{"Key":"world of","Fragments":["pointers"]},{"Key":"of pointers","Fragments":["and"]},{"Key":"pointers and","Fragments":["memory"]},{"Key":"and memory","Fragments":["management"]},{"Key":"memory management","Fragments":[":)"]},{"Key":"management :)","Fragments":["What"]},{"Key":":) What","Fragments":["do"]},{"Key":"you think?","Fragments":["Can"]},{"Key":"think? Can","Fragments":["I"]},{"Key":"Can I","Fragments":["structure"]},{"Key":"I structure","Fragments":["the"]},{"Key":"program better?","Fragments":["Any"]},{"Key":"better? Any","Fragments":["feedback"]},{"Key":"Any feedback","Fragments":["is"]},{"Key":"feedback is","Fragments":["greatly"]},{"Key":"is greatly","Fragments":["appreciated!"]},{"Key":"Just another","Fragments":["point"]},{"Key":"another point","Fragments":["on"]},{"Key":"point on","Fragments":["why"]},{"Key":"on why","Fragments":["I"]},{"Key":"I choose","Fragments":["to"]},{"Key":"choose to","Fragments":["place"]},{"Key":"to place","Fragments":["all"]},{"Key":"place all","Fragments":["in"]},{"Key":"all in","Fragments":["one","one","one","one"]},{"Key":"line was","Fragments":["to"]},{"Key":"was to","Fragments":["eliminate","not","make","add"]},{"Key":"to eliminate","Fragments":["the"]},{"Key":"a extra","Fragments":["variable."]},{"Key":" Thats","Fragments":["a"]},{"Key":"Thats a","Fragments":["good"]},{"Key":"good point.","Fragments":["Sometimes"]},{"Key":"point. Sometimes","Fragments":["i"]},{"Key":"Sometimes i","Fragments":["forget"]},{"Key":"i forget","Fragments":["its"]},{"Key":"forget its","Fragments":["not"]},{"Key":"its not","Fragments":["all"]},{"Key":"not all","Fragments":["about"]},{"Key":"all about","Fragments":["how"]},{"Key":"about how","Fragments":["much","you"]},{"Key":"how much","Fragments":["we"]},{"Key":"much we","Fragments":["can"]},{"Key":"can fit","Fragments":["on"]},{"Key":"fit on","Fragments":["one"]},{"Key":"on one","Fragments":["line"]},{"Key":"line but,","Fragments":["how"]},{"Key":"but, how","Fragments":["well"]},{"Key":"how well","Fragments":["it"]},{"Key":"well it","Fragments":["could"]},{"Key":"be read","Fragments":["by"]},{"Key":"read by","Fragments":["the"]},{"Key":" Pulled","Fragments":["out"]},{"Key":"Pulled out","Fragments":["ternary"]},{"Key":"out ternary","Fragments":["operator"]},{"Key":"ternary operator","Fragments":["to"]},{"Key":"operator to","Fragments":["increase"]},{"Key":"Thanks, all!","Fragments":["Implemented."]},{"Key":"understand from","Fragments":["reading"]},{"Key":"from reading","Fragments":["others"]},{"Key":"reading others","Fragments":["solution"]},{"Key":"others solution","Fragments":["to"]},{"Key":"to this","Fragments":["problem,","one.","example"]},{"Key":"this problem,","Fragments":["passing","especially"]},{"Key":"problem, passing","Fragments":["references"]},{"Key":"passing references","Fragments":["is"]},{"Key":"references is","Fragments":["better"]},{"Key":"than passing","Fragments":["values."]},{"Key":"passing values.","Fragments":["It"]},{"Key":"values. It","Fragments":["seems"]},{"Key":"seems a","Fragments":["bit"]},{"Key":"bit curious","Fragments":["to"]},{"Key":"curious to","Fragments":["me"]},{"Key":"one can","Fragments":["pass"]},{"Key":"can pass","Fragments":["a"]},{"Key":"a value","Fragments":["and"]},{"Key":"not change","Fragments":["the"]},{"Key":"change the","Fragments":["rest","method","`for(int"]},{"Key":" Ahoi","Fragments":["there,","there,","there,"]},{"Key":"Ahoi there,","Fragments":["here's"]},{"Key":"there, here's","Fragments":["a"]},{"Key":"here's a","Fragments":["couple"]},{"Key":"things I","Fragments":["noticed:","would"]},{"Key":"implement an","Fragments":["empty"]},{"Key":"empty constructor","Fragments":["and"]},{"Key":"constructor and","Fragments":["destructor."]},{"Key":"and destructor.","Fragments":["You"]},{"Key":"destructor. You","Fragments":["can"]},{"Key":"can leave","Fragments":["them"]},{"Key":"leave them","Fragments":["away"]},{"Key":"them away","Fragments":["and"]},{"Key":"away and","Fragments":["the"]},{"Key":"compiler will","Fragments":["automatically"]},{"Key":"will automatically","Fragments":["create"]},{"Key":"create them","Fragments":["for"]},{"Key":"them for","Fragments":["you"]},{"Key":"for you","Fragments":["implicitly.","the"]},{"Key":"the `is_numbers_only`","Fragments":["variable."]},{"Key":"`is_numbers_only` variable.","Fragments":["It's"]},{"Key":"variable. It's","Fragments":["redundant."]},{"Key":"It's redundant.","Fragments":["If"]},{"Key":"redundant. If","Fragments":["`is_numbers_only`"]},{"Key":"If `is_numbers_only`","Fragments":["is"]},{"Key":"`is_numbers_only` is","Fragments":["true"]},{"Key":"is true","Fragments":["then"]},{"Key":"true then","Fragments":["all"]},{"Key":"then all","Fragments":["the"]},{"Key":"other bools","Fragments":["have"]},{"Key":"bools have","Fragments":["to"]},{"Key":"be false","Fragments":["(no"]},{"Key":"false (no","Fragments":["question,"]},{"Key":"(no question,","Fragments":["no"]},{"Key":"question, no","Fragments":["shouting,"]},{"Key":"no shouting,","Fragments":["no"]},{"Key":"shouting, no","Fragments":["blank),"]},{"Key":"no blank),","Fragments":["that"]},{"Key":"blank), that","Fragments":["means"]},{"Key":"that means","Fragments":["that"]},{"Key":"means that","Fragments":["the"]},{"Key":"the `if(","Fragments":["is_numbers_only"]},{"Key":"`if( is_numbers_only","Fragments":[")`"]},{"Key":"is_numbers_only )`","Fragments":["is"]},{"Key":")` is","Fragments":["unnecessary"]},{"Key":"is unnecessary","Fragments":["since","since"]},{"Key":"unnecessary since","Fragments":["your","you"]},{"Key":"since your","Fragments":["default"]},{"Key":"your default","Fragments":["`return"]},{"Key":"default `return","Fragments":["\"Whatever.\";`"]},{"Key":"`return \"Whatever.\";`","Fragments":["is"]},{"Key":"\"Whatever.\";` is","Fragments":["already"]},{"Key":"already correct.","Fragments":["You'll"]},{"Key":"correct. You'll","Fragments":["find"]},{"Key":"You'll find","Fragments":["that"]},{"Key":"find that","Fragments":["the"]},{"Key":"other occurrences","Fragments":["of"]},{"Key":"occurrences of","Fragments":["`is_numbers_only`"]},{"Key":"of `is_numbers_only`","Fragments":["are"]},{"Key":"`is_numbers_only` are","Fragments":["also"]},{"Key":"3) Instead","Fragments":["of"]},{"Key":"normal for-loop","Fragments":["`for(int"]},{"Key":"for-loop `for(int","Fragments":["i"]},{"Key":"`for(int i","Fragments":["="]},{"Key":"\u003c length;","Fragments":["++i)"]},{"Key":"length; ++i)","Fragments":["{`"]},{"Key":"++i) {`","Fragments":["you"]},{"Key":"{` you","Fragments":["could"]},{"Key":"a for-element","Fragments":["loop:","loop","loop"]},{"Key":"for-element loop:","Fragments":["`for(char"]},{"Key":"loop: `for(char","Fragments":["tmp"]},{"Key":"`for(char tmp","Fragments":[":"]},{"Key":"tmp :","Fragments":["input)"]},{"Key":": input)","Fragments":["{`."]},{"Key":"input) {`.","Fragments":["Then"]},{"Key":"{`. Then","Fragments":["you"]},{"Key":"Then you","Fragments":["can"]},{"Key":"yourself the","Fragments":["`i`","forward"]},{"Key":"the `i`","Fragments":["and","variable"]},{"Key":"`i` and","Fragments":["you'll","`length`"]},{"Key":"and you'll","Fragments":["be"]},{"Key":"you'll be","Fragments":["sure"]},{"Key":"be sure","Fragments":["to"]},{"Key":"sure to","Fragments":["not"]},{"Key":"to not","Fragments":["make","paste"]},{"Key":"not make","Fragments":["any"]},{"Key":"make any","Fragments":["mistakes"]},{"Key":"any mistakes","Fragments":["while"]},{"Key":"mistakes while","Fragments":["iterating"]},{"Key":"while iterating","Fragments":["over"]},{"Key":"4) Instead","Fragments":["of"]},{"Key":"of `(tmp","Fragments":["\u003e=","\u003c"]},{"Key":"`(tmp \u003e=","Fragments":["'a'"]},{"Key":"\u003e= 'a'","Fragments":["\u0026\u0026","..."]},{"Key":"'a' \u0026\u0026","Fragments":["tmp"]},{"Key":"\u0026\u0026 tmp","Fragments":["\u003c="]},{"Key":"tmp \u003c=","Fragments":["'z')`"]},{"Key":"\u003c= 'z')`","Fragments":["you"]},{"Key":"'z')` you","Fragments":["can"]},{"Key":"use [`islower`](http://www.cplusplus.com/reference/cctype/islower/).","Fragments":["And"]},{"Key":"[`islower`](http://www.cplusplus.com/reference/cctype/islower/). And","Fragments":["instead"]},{"Key":"And instead","Fragments":["of"]},{"Key":"`(tmp \u003c","Fragments":["'0'"]},{"Key":"\u003c '0'","Fragments":["||"]},{"Key":"'0' ||","Fragments":["tmp"]},{"Key":"|| tmp","Fragments":["\u003e"]},{"Key":"tmp \u003e","Fragments":["'9')`"]},{"Key":"\u003e '9')`","Fragments":["you"]},{"Key":"'9')` you","Fragments":["can"]},{"Key":"general you","Fragments":["don't"]},{"Key":"change anything","Fragments":["about"]},{"Key":"anything about","Fragments":["the"]},{"Key":"the code,","Fragments":["but"]},{"Key":"really depends","Fragments":["on"]},{"Key":"on what","Fragments":["you"]},{"Key":" void","Fragments":["func(std::string","func(std::string"]},{"Key":"void func(std::string","Fragments":["s){","const"]},{"Key":" for(int","Fragments":["i=0;","i=0;","i=0;"]},{"Key":"for(int i=0;","Fragments":["i\u003c10;","i\u003c10;","i\u003c1024;"]},{"Key":"i=0; i\u003c10;","Fragments":["++i)","++i)"]},{"Key":" s","Fragments":["+="]},{"Key":"s +=","Fragments":["i;"]},{"Key":" std::cout","Fragments":["\u003c\u003c","\u003c\u003c","\u003c\u003c"]},{"Key":"std::cout \u003c\u003c","Fragments":["s;","s_func;","i"]},{"Key":" Say","Fragments":["you"]},{"Key":"Say you","Fragments":["have"]},{"Key":"have this","Fragments":["function."]},{"Key":"this function.","Fragments":["You"]},{"Key":"function. You","Fragments":["modify"]},{"Key":"You modify","Fragments":["`s`"]},{"Key":"modify `s`","Fragments":["inside"]},{"Key":"`s` inside","Fragments":["the"]},{"Key":"the function's","Fragments":["body,"]},{"Key":"function's body,","Fragments":["so"]},{"Key":"body, so","Fragments":["you"]},{"Key":"const string\u0026,","Fragments":["because"]},{"Key":"string\u0026, because","Fragments":["then"]},{"Key":"because then","Fragments":["`s`"]},{"Key":"then `s`","Fragments":["would"]},{"Key":"`s` would","Fragments":["be"]},{"Key":"be constant","Fragments":["and"]},{"Key":"constant and","Fragments":["thus"]},{"Key":"and thus","Fragments":["unmodifiable.","inaccessible"]},{"Key":"But usually","Fragments":["we"]},{"Key":"usually we","Fragments":["treat"]},{"Key":"we treat","Fragments":["function"]},{"Key":"treat function","Fragments":["arguments"]},{"Key":"function arguments","Fragments":["as"]},{"Key":"arguments as","Fragments":["constant"]},{"Key":"as constant","Fragments":["anyways"]},{"Key":"constant anyways","Fragments":["(we"]},{"Key":"anyways (we","Fragments":["usually"]},{"Key":"(we usually","Fragments":["don't"]},{"Key":"usually don't","Fragments":["have"]},{"Key":"them inside","Fragments":["the"]},{"Key":"the function)","Fragments":["so"]},{"Key":"function) so","Fragments":["we"]},{"Key":"turn them","Fragments":["into"]},{"Key":"them into","Fragments":["const\u0026"]},{"Key":"into const\u0026","Fragments":["without"]},{"Key":"const\u0026 without","Fragments":["issues"]},{"Key":"without issues","Fragments":["in"]},{"Key":"issues in","Fragments":["most"]},{"Key":"in most","Fragments":["cases."]},{"Key":"After taking","Fragments":["a"]},{"Key":"taking a","Fragments":["look"]},{"Key":"look on","Fragments":["the"]},{"Key":"other submitions,","Fragments":["I"]},{"Key":"submitions, I","Fragments":["feel"]},{"Key":"I feel","Fragments":["like","that","tipsy","this"]},{"Key":"regex was","Fragments":["kind"]},{"Key":"was kind","Fragments":["of"]},{"Key":"To keep","Fragments":["it"]},{"Key":"to understand,","Fragments":["I"]},{"Key":"understand, I","Fragments":["put"]},{"Key":"put the","Fragments":["regex"]},{"Key":"regex test","Fragments":["in"]},{"Key":"test in","Fragments":["a"]},{"Key":"separate function.","Fragments":["The"]},{"Key":"function. The","Fragments":["\"hey\""]},{"Key":"The \"hey\"","Fragments":["function"]},{"Key":"function is","Fragments":["then","a","large.","called."]},{"Key":"then pretty","Fragments":["simple."]},{"Key":"Would it","Fragments":["be"]},{"Key":"more optimized","Fragments":["to"]},{"Key":"optimized to","Fragments":["parse"]},{"Key":"parse the","Fragments":["string"]},{"Key":"string like","Fragments":["other","\"hello,there\""]},{"Key":"like other","Fragments":["people"]},{"Key":"other people","Fragments":["did"]},{"Key":"people did","Fragments":["?"]},{"Key":"In L13","Fragments":["you"]},{"Key":"L13 you","Fragments":["can"]},{"Key":"can skip","Fragments":["the"]},{"Key":"skip the","Fragments":["comparison"]},{"Key":"the comparison","Fragments":["at"]},{"Key":"comparison at","Fragments":["L14"]},{"Key":"at L14","Fragments":["if"]},{"Key":"L14 if","Fragments":["the"]},{"Key":"condition Is","Fragments":["true."]},{"Key":"Also you","Fragments":["could"]},{"Key":"could remove","Fragments":["dependency"]},{"Key":"remove dependency","Fragments":["on"]},{"Key":"on \u003cstring\u003e","Fragments":["if"]},{"Key":"\u003cstring\u003e if","Fragments":["you"]},{"Key":"know you","Fragments":["have","have"]},{"Key":"a null-terminated","Fragments":["c"]},{"Key":"null-terminated c","Fragments":["string"]},{"Key":"c string","Fragments":["(using"]},{"Key":"string (using","Fragments":["the"]},{"Key":"(using the","Fragments":["test"]},{"Key":"suite you","Fragments":["need"]},{"Key":"create temporaries","Fragments":["for"]},{"Key":"temporaries for","Fragments":["the"]},{"Key":"the arguments","Fragments":["to"]},{"Key":"Yes, you're","Fragments":["right"]},{"Key":"you're right","Fragments":["about","about"]},{"Key":"right about","Fragments":["the","the"]},{"Key":"the `transform`","Fragments":["and"]},{"Key":"the `accumulate`.","Fragments":["I"]},{"Key":"`accumulate`. I","Fragments":["guess"]},{"Key":"got too","Fragments":["excited"]},{"Key":"too excited","Fragments":["about"]},{"Key":"excited about","Fragments":["them"]},{"Key":"about them","Fragments":["and"]},{"Key":"them and","Fragments":["I","when"]},{"Key":"the old,","Fragments":["reliable"]},{"Key":"old, reliable","Fragments":["`for`"]},{"Key":"reliable `for`","Fragments":["loop."]},{"Key":"`for` loop.","Fragments":["I'm"]},{"Key":"loop. I'm","Fragments":["going"]},{"Key":"I'm going","Fragments":["to"]},{"Key":"to fix","Fragments":["it,"]},{"Key":"fix it,","Fragments":["thanks"]},{"Key":" Sorting","Fragments":["seemed"]},{"Key":"Sorting seemed","Fragments":["simple"]},{"Key":"seemed simple","Fragments":["at"]},{"Key":"simple at","Fragments":["the"]},{"Key":"the time.","Fragments":["But"]},{"Key":"time. But","Fragments":["I"]},{"Key":"I wonder","Fragments":["if","if"]},{"Key":"wonder if","Fragments":["i","the"]},{"Key":"if i","Fragments":["could"]},{"Key":"i could","Fragments":["just"]},{"Key":"just add","Fragments":["all"]},{"Key":"add all","Fragments":["the"]},{"Key":"the ascii","Fragments":["numbers"]},{"Key":"ascii numbers","Fragments":["of"]},{"Key":"numbers of","Fragments":["both","both"]},{"Key":"of both","Fragments":["words","words","the"]},{"Key":"both words","Fragments":["to","won't"]},{"Key":"words to","Fragments":["see","put"]},{"Key":"they equaled","Fragments":["the"]},{"Key":"equaled the","Fragments":["same"]},{"Key":"same if","Fragments":["that"]},{"Key":" removed","Fragments":["`transform`"]},{"Key":"removed `transform`","Fragments":["and"]},{"Key":"and `accumulate`.","Fragments":["A"]},{"Key":"`accumulate`. A","Fragments":["simple"]},{"Key":"A simple","Fragments":["for","for"]},{"Key":"simple for","Fragments":["loop","loop,"]},{"Key":" Adding","Fragments":["all"]},{"Key":"Adding all","Fragments":["the"]},{"Key":"the ASCII","Fragments":["numbers"]},{"Key":"ASCII numbers","Fragments":["of"]},{"Key":"words won't","Fragments":["work"]},{"Key":"won't work","Fragments":["as"]},{"Key":"work as","Fragments":["you"]},{"Key":"can have","Fragments":["degeneracies."]},{"Key":"have degeneracies.","Fragments":["(e,g,"]},{"Key":"degeneracies. (e,g,","Fragments":["'C'"]},{"Key":"(e,g, 'C'","Fragments":["+"]},{"Key":"'C' +","Fragments":["'D'"]},{"Key":"+ 'D'","Fragments":["="]},{"Key":"'D' =","Fragments":["'B'"]},{"Key":"= 'B'","Fragments":["+"]},{"Key":"'B' +","Fragments":["'E')"]},{"Key":" However","Fragments":["you","I","I'll"]},{"Key":"However you","Fragments":["could"]},{"Key":"just keep","Fragments":["track"]},{"Key":"keep track","Fragments":["of","of","of"]},{"Key":"track of","Fragments":["frequencies","the","both"]},{"Key":"of frequencies","Fragments":["of"]},{"Key":"frequencies of","Fragments":["all"]},{"Key":"the letters","Fragments":["in"]},{"Key":"letters in","Fragments":["the"]},{"Key":"the words.","Fragments":["If"]},{"Key":"words. If","Fragments":["a"]},{"Key":"If a","Fragments":["word's"]},{"Key":"a word's","Fragments":["letter"]},{"Key":"word's letter","Fragments":["frequencies"]},{"Key":"letter frequencies","Fragments":["are"]},{"Key":"frequencies are","Fragments":["the"]},{"Key":"as another","Fragments":["they"]},{"Key":"another they","Fragments":["will"]},{"Key":"they will","Fragments":["be"]},{"Key":"be anagrams.","Fragments":["This"]},{"Key":"anagrams. This","Fragments":["will"]},{"Key":"be O(n)","Fragments":["in"]},{"Key":"O(n) in","Fragments":["the"]},{"Key":"the size","Fragments":["of","of"]},{"Key":"size of","Fragments":["each","the","your"]},{"Key":"each of","Fragments":["the","them.","your","regex,"]},{"Key":"input words","Fragments":["rather"]},{"Key":"words rather","Fragments":["than"]},{"Key":"the O(n","Fragments":["log(n))"]},{"Key":"O(n log(n))","Fragments":["you"]},{"Key":"log(n)) you","Fragments":["would"]},{"Key":"would get","Fragments":["by"]},{"Key":"get by","Fragments":["sorting"]},{"Key":"by sorting","Fragments":["each"]},{"Key":"sorting each","Fragments":["of"]},{"Key":" Hopefully","Fragments":["the"]},{"Key":"Hopefully the","Fragments":["readability"]},{"Key":"the readability","Fragments":["is"]},{"Key":" Nice,","Fragments":["but"]},{"Key":"Nice, but","Fragments":["there"]},{"Key":"few simplifications","Fragments":["you"]},{"Key":"simplifications you","Fragments":["can"]},{"Key":"can make.","Fragments":["You"]},{"Key":"make. You","Fragments":["can"]},{"Key":"use size_t","Fragments":["instead"]},{"Key":"size_t instead","Fragments":["of"]},{"Key":"of int","Fragments":["to"]},{"Key":"int to","Fragments":["avoid"]},{"Key":"avoid casting","Fragments":["to"]},{"Key":"casting to","Fragments":["int."]},{"Key":"to int.","Fragments":["In"]},{"Key":"int. In","Fragments":["nothingIsSaid"]},{"Key":"In nothingIsSaid","Fragments":["you"]},{"Key":"nothingIsSaid you","Fragments":["can"]},{"Key":"return true","Fragments":["when"]},{"Key":"true when","Fragments":["you"]},{"Key":"you find","Fragments":["non-space.","the"]},{"Key":"find non-space.","Fragments":["Instead"]},{"Key":"non-space. Instead","Fragments":["of"]},{"Key":"of speech.at(speech.size()-1)","Fragments":["you"]},{"Key":"speech.at(speech.size()-1) you","Fragments":["can"]},{"Key":"One quick","Fragments":["thing"]},{"Key":"quick thing","Fragments":["is"]},{"Key":"thing is","Fragments":["that"]},{"Key":"that c++11","Fragments":["has"]},{"Key":"c++11 has","Fragments":["both"]},{"Key":"has both","Fragments":["the"]},{"Key":"both the","Fragments":["```auto```","word","auto"]},{"Key":"keyword and","Fragments":["range"]},{"Key":"and range","Fragments":["based"]},{"Key":"loops so","Fragments":["that"]},{"Key":"your loop","Fragments":["can","slightly","could"]},{"Key":"loop can","Fragments":["be","be"]},{"Key":"as ```for(","Fragments":["auto"]},{"Key":"auto c","Fragments":[":"]},{"Key":": message","Fragments":[")```"]},{"Key":"message )```","Fragments":["which"]},{"Key":")``` which","Fragments":["is"]},{"Key":"is IMO","Fragments":["much"]},{"Key":"IMO much","Fragments":["cleaner."]},{"Key":"I'd also","Fragments":["split"]},{"Key":"also split","Fragments":["each"]},{"Key":"split each","Fragments":["of"]},{"Key":"your checks","Fragments":["into"]},{"Key":"checks into","Fragments":["separate","them"]},{"Key":"separate functions","Fragments":["to","that"]},{"Key":"to aid","Fragments":["readability."]},{"Key":"aid readability.","Fragments":["(i.e."]},{"Key":"readability. (i.e.","Fragments":["have"]},{"Key":"(i.e. have","Fragments":["separate"]},{"Key":"have separate","Fragments":["is_shouting,"]},{"Key":"separate is_shouting,","Fragments":["is_question"]},{"Key":"is_shouting, is_question","Fragments":["etc."]},{"Key":"is_question etc.","Fragments":["functions)"]},{"Key":"etc. functions)","Fragments":["if"]},{"Key":"functions) if","Fragments":["you"]},{"Key":"to each","Fragments":["then"]},{"Key":"each then","Fragments":["you"]},{"Key":"shouldn't lose","Fragments":["anything"]},{"Key":"lose anything","Fragments":["in"]},{"Key":" Thanks.","Fragments":["I"]},{"Key":"Thanks. I","Fragments":["am"]},{"Key":"of algorithms,","Fragments":["didn't"]},{"Key":"algorithms, didn't","Fragments":["know"]},{"Key":"about this","Fragments":["variant","and","though:","code"]},{"Key":"this variant","Fragments":["of"]},{"Key":"variant of","Fragments":["for_each"]},{"Key":"of for_each","Fragments":["until"]},{"Key":"for_each until","Fragments":["I"]},{"Key":"wrote the","Fragments":["solution"]},{"Key":"solution for","Fragments":["this"]},{"Key":"this exercise.","Fragments":["Pretty"]},{"Key":"exercise. Pretty","Fragments":["handy."]},{"Key":" Guess","Fragments":["I'm"]},{"Key":"Guess I'm","Fragments":["not"]},{"Key":"the duplicates","Fragments":["in"]},{"Key":"candidate list","Fragments":["question;"]},{"Key":"list question;","Fragments":["sort"]},{"Key":"question; sort","Fragments":["of"]},{"Key":"of depends","Fragments":["on"]},{"Key":"on whether","Fragments":["this"]},{"Key":"is treated","Fragments":["as","as"]},{"Key":"treated as","Fragments":["a","shouting,","speech,"]},{"Key":"a grep","Fragments":["or","|"]},{"Key":"grep or","Fragments":["a"]},{"Key":"grep |","Fragments":["uniq?"]},{"Key":"string library.","Fragments":["Responses"]},{"Key":"library. Responses","Fragments":["no"]},{"Key":"Responses no","Fragments":["longer"]},{"Key":"no longer","Fragments":["redefined"]},{"Key":"longer redefined","Fragments":["with"]},{"Key":"redefined with","Fragments":["each"]},{"Key":"each call","Fragments":["to","to"]},{"Key":"to hey,","Fragments":["replaced"]},{"Key":"hey, replaced","Fragments":["const"]},{"Key":"replaced const","Fragments":["*"]},{"Key":"* with","Fragments":["const"]},{"Key":"with const","Fragments":["\u0026."]},{"Key":"const \u0026.","Fragments":["Forgot"]},{"Key":"\u0026. Forgot","Fragments":["to"]},{"Key":"Forgot to","Fragments":["remove"]},{"Key":"the \u003ccstring\u003e","Fragments":["include."]},{"Key":"I believe","Fragments":["you","that","that","that","that","both"]},{"Key":"believe you","Fragments":["can"]},{"Key":"replace lines","Fragments":["17"]},{"Key":"lines 17","Fragments":["-"]},{"Key":"17 -","Fragments":["20"]},{"Key":"- 20","Fragments":["with"]},{"Key":"20 with","Fragments":["just"]},{"Key":"just counts[word]","Fragments":["+="]},{"Key":"counts[word] +=","Fragments":["1"]},{"Key":"+= 1","Fragments":["by"]},{"Key":"1 by","Fragments":["leveraging"]},{"Key":"by leveraging","Fragments":["default"]},{"Key":"leveraging default","Fragments":["construction."]},{"Key":"minor thing,","Fragments":["but"]},{"Key":"thing, but","Fragments":["may"]},{"Key":"but may","Fragments":["make"]},{"Key":"may make","Fragments":["sense"]},{"Key":"make sense","Fragments":["to"]},{"Key":"Can make","Fragments":["line"]},{"Key":"make line","Fragments":["29-31"]},{"Key":"line 29-31","Fragments":["more"]},{"Key":"29-31 more","Fragments":["succinct"]},{"Key":"more succinct","Fragments":["with"]},{"Key":"succinct with","Fragments":["something"]},{"Key":"with something","Fragments":["like","a"]},{"Key":"like for","Fragments":["(auto"]},{"Key":"(auto letter","Fragments":[":"]},{"Key":"letter :","Fragments":["sentence)."]},{"Key":"are certainly","Fragments":["many"]},{"Key":"certainly many","Fragments":["different"]},{"Key":"many different","Fragments":["ways"]},{"Key":"different ways","Fragments":["to"]},{"Key":"ways to","Fragments":["do","shorten"]},{"Key":"but wondering","Fragments":["if"]},{"Key":"if \u003e=","Fragments":["'A'"]},{"Key":"\u0026\u0026 \u003c=","Fragments":["'Z'"]},{"Key":"\u003c= 'Z'","Fragments":["||"]},{"Key":"'Z' ||","Fragments":["\u003e="]},{"Key":"|| \u003e=","Fragments":["'a'"]},{"Key":"'a' ...","Fragments":["would"]},{"Key":"... would","Fragments":["be"]},{"Key":"be faster","Fragments":["than"]},{"Key":"faster than","Fragments":["doing"]},{"Key":"than doing","Fragments":["a"]},{"Key":"a find","Fragments":["on"]},{"Key":"find on","Fragments":["the"]},{"Key":"the set","Fragments":["each"]},{"Key":"set each","Fragments":["time"]},{"Key":"a valid","Fragments":["char."]},{"Key":"use variables","Fragments":["to"]},{"Key":"input pattern,","Fragments":["however"]},{"Key":"pattern, however","Fragments":["you"]},{"Key":"however you","Fragments":["could"]},{"Key":"could hide","Fragments":["away"]},{"Key":"hide away","Fragments":["these"]},{"Key":"away these","Fragments":["implementation"]},{"Key":"these implementation","Fragments":["details"]},{"Key":"details from","Fragments":["the"]},{"Key":"the `hey`","Fragments":["function"]},{"Key":"function by","Fragments":["defining"]},{"Key":"by defining","Fragments":["functions"]},{"Key":"defining functions","Fragments":["like"]},{"Key":"like `isShouting`,","Fragments":["etc."]},{"Key":"`isShouting`, etc.","Fragments":["to"]},{"Key":"etc. to","Fragments":["perform"]},{"Key":"to perform","Fragments":["the"]},{"Key":"perform the","Fragments":["work","work"]},{"Key":"work currently","Fragments":["performed"]},{"Key":"currently performed","Fragments":["directly"]},{"Key":"performed directly","Fragments":["by"]},{"Key":"directly by","Fragments":["`hey`"]},{"Key":"The name","Fragments":["\"in\""]},{"Key":"name \"in\"","Fragments":["could"]},{"Key":"\"in\" could","Fragments":["be"]},{"Key":"something a","Fragments":["little"]},{"Key":"more descriptive","Fragments":["like"]},{"Key":"descriptive like","Fragments":["\"phrase\""]},{"Key":"like \"phrase\"","Fragments":["or"]},{"Key":"\"phrase\" or","Fragments":["\"prompt\"."]},{"Key":" statics","Fragments":["removed."]},{"Key":"statics removed.","Fragments":["I"]},{"Key":"removed. I","Fragments":["just"]},{"Key":"just checked","Fragments":["others"]},{"Key":"checked others","Fragments":["solutions"]},{"Key":"others solutions","Fragments":["to"]},{"Key":"solutions to","Fragments":["see"]},{"Key":"see what","Fragments":["it"]},{"Key":"without using","Fragments":["statics.","regex,"]},{"Key":"using statics.","Fragments":[":)"]},{"Key":"The overall","Fragments":["logic"]},{"Key":"overall logic","Fragments":["is"]},{"Key":"logic is","Fragments":["very"]},{"Key":"very simple","Fragments":["so"]},{"Key":"simple so","Fragments":["I"]},{"Key":"broke up","Fragments":["more"]},{"Key":"up more","Fragments":["complex"]},{"Key":"more complex","Fragments":["routines","than"]},{"Key":"complex routines","Fragments":["in"]},{"Key":"routines in","Fragments":["aux"]},{"Key":"in aux","Fragments":["functions."]},{"Key":"use is*","Fragments":["functions"]},{"Key":"is* functions","Fragments":["to"]},{"Key":"do basic","Fragments":["checking"]},{"Key":"basic checking","Fragments":["(is"]},{"Key":"checking (is","Fragments":["space,"]},{"Key":"(is space,","Fragments":["is"]},{"Key":"space, is","Fragments":["upper"]},{"Key":"is upper","Fragments":["etc)","case\""]},{"Key":"upper etc)","Fragments":["and"]},{"Key":"etc) and","Fragments":["keep"]},{"Key":"and keep","Fragments":["code"]},{"Key":"keep code","Fragments":["cleaner."]},{"Key":"to declare","Fragments":["functions","a"]},{"Key":"declare functions","Fragments":["as"]},{"Key":"functions as","Fragments":["static"]},{"Key":"static because","Fragments":["it's"]},{"Key":"because it's","Fragments":["a","encapsulated"]},{"Key":"a requirement","Fragments":["from"]},{"Key":"requirement from","Fragments":["bob_test.cpp"]},{"Key":"from bob_test.cpp","Fragments":["or"]},{"Key":"bob_test.cpp or","Fragments":["boost"]},{"Key":"or boost","Fragments":["to"]},{"Key":"boost to","Fragments":["execute"]},{"Key":"to execute","Fragments":["unit"]},{"Key":"execute unit","Fragments":["testing."]},{"Key":"Good comments","Fragments":["at"]},{"Key":"comments at","Fragments":["the"]},{"Key":"file and","Fragments":["in"]},{"Key":"and in","Fragments":["the"]},{"Key":"the hey","Fragments":["function."]},{"Key":"hey function.","Fragments":["Also,"]},{"Key":"function. Also,","Fragments":["it's","`using"]},{"Key":"it's great","Fragments":["that"]},{"Key":"great that","Fragments":["you"]},{"Key":"you put","Fragments":["in"]},{"Key":"a macro","Fragments":["guard,","guard."]},{"Key":"macro guard,","Fragments":["which"]},{"Key":"guard, which","Fragments":["is"]},{"Key":"is important","Fragments":["for"]},{"Key":"important for","Fragments":["multi-file"]},{"Key":"for multi-file","Fragments":["projects,"]},{"Key":"multi-file projects,","Fragments":["and"]},{"Key":"projects, and","Fragments":["it's"]},{"Key":"and it's","Fragments":["clear"]},{"Key":"it's clear","Fragments":["you're"]},{"Key":"clear you're","Fragments":["keeping"]},{"Key":"you're keeping","Fragments":["in"]},{"Key":"keeping in","Fragments":["mind"]},{"Key":"in mind","Fragments":["that"]},{"Key":"mind that","Fragments":["application"]},{"Key":"that application","Fragments":["code"]},{"Key":"application code","Fragments":["would"]},{"Key":"would always","Fragments":["be"]},{"Key":"always be","Fragments":["split"]},{"Key":"be split","Fragments":["between","up"]},{"Key":"split between","Fragments":["header"]},{"Key":"between header","Fragments":["and"]},{"Key":"The next","Fragments":["good"]},{"Key":"next good","Fragments":["design"]},{"Key":"good design","Fragments":["choice"]},{"Key":"design choice","Fragments":["is"]},{"Key":"choice is","Fragments":["that"]},{"Key":"you qualify","Fragments":["each"]},{"Key":"qualify each","Fragments":["call"]},{"Key":"to `std::string`","Fragments":["instead"]},{"Key":"`std::string` instead","Fragments":["of"]},{"Key":"the heavy-handed","Fragments":["`using"]},{"Key":"heavy-handed `using","Fragments":["namespace"]},{"Key":"namespace std`.","Fragments":["Another"]},{"Key":"std`. Another","Fragments":["option"]},{"Key":"Another option","Fragments":["you"]},{"Key":"option you","Fragments":["could"]},{"Key":"could consider","Fragments":["is"]},{"Key":"consider is","Fragments":["`using"]},{"Key":"is `using","Fragments":["std::string`"]},{"Key":"std::string` within","Fragments":["the"]},{"Key":"namespace, to","Fragments":["save"]},{"Key":"to save","Fragments":["some"]},{"Key":"save some","Fragments":["typing."]},{"Key":" Encapsulating","Fragments":["the"]},{"Key":"Encapsulating the","Fragments":["parse"]},{"Key":"the parse","Fragments":["functionality","function","function"]},{"Key":"parse functionality","Fragments":["outside"]},{"Key":"functionality outside","Fragments":["of"]},{"Key":"bob function","Fragments":["is"]},{"Key":"good move;","Fragments":["however,"]},{"Key":"move; however,","Fragments":["there"]},{"Key":"however, there","Fragments":["are"]},{"Key":"few details","Fragments":["that"]},{"Key":"details that","Fragments":["could"]},{"Key":" First,","Fragments":["the"]},{"Key":"First, the","Fragments":["parse"]},{"Key":"parse function","Fragments":["has","is"]},{"Key":"function has","Fragments":["to"]},{"Key":"the responses","Fragments":["(it","instead"]},{"Key":"responses (it","Fragments":["has"]},{"Key":"(it has","Fragments":["to"]},{"Key":"a number)","Fragments":["instead"]},{"Key":"number) instead","Fragments":["of"]},{"Key":"of simply","Fragments":["returning"]},{"Key":"simply returning","Fragments":["a"]},{"Key":"a boolean","Fragments":["or"]},{"Key":"boolean or","Fragments":["enum"]},{"Key":"or enum","Fragments":["describing"]},{"Key":"enum describing","Fragments":["what"]},{"Key":"describing what","Fragments":["type"]},{"Key":"what type","Fragments":["of"]},{"Key":"of pattern","Fragments":["the"]},{"Key":"pattern the","Fragments":["input"]},{"Key":"input has","Fragments":["(ie."]},{"Key":"has (ie.","Fragments":["yell,"]},{"Key":"(ie. yell,","Fragments":["question,"]},{"Key":"yell, question,","Fragments":["etc.)."]},{"Key":" Second,","Fragments":["the"]},{"Key":"Second, the","Fragments":["parse"]},{"Key":"is large.","Fragments":["It"]},{"Key":"large. It","Fragments":["would"]},{"Key":"would boost","Fragments":["readability"]},{"Key":"readability to","Fragments":["encapsulate"]},{"Key":"to encapsulate","Fragments":["the"]},{"Key":"encapsulate the","Fragments":["checks"]},{"Key":"checks within","Fragments":["other"]},{"Key":"within other","Fragments":["helper"]},{"Key":"other helper","Fragments":["functions"]},{"Key":"functions each","Fragments":["with"]},{"Key":"each with","Fragments":["a"]},{"Key":"a clear,","Fragments":["defined"]},{"Key":"clear, defined","Fragments":["purpose"]},{"Key":"defined purpose","Fragments":["(eg."]},{"Key":"purpose (eg.","Fragments":["check"]},{"Key":"(eg. check","Fragments":["if"]},{"Key":"given string","Fragments":["is"]},{"Key":"a question).","Fragments":["Solving"]},{"Key":"question). Solving","Fragments":["the"]},{"Key":"Solving the","Fragments":["second"]},{"Key":"second note","Fragments":["will"]},{"Key":"note will","Fragments":["also"]},{"Key":"also make","Fragments":["it","the"]},{"Key":"solve the","Fragments":["first.","problem"]},{"Key":" @axel","Fragments":["all"]},{"Key":"@axel all","Fragments":["good"]},{"Key":"all good","Fragments":["points."]},{"Key":"good points.","Fragments":["I"]},{"Key":"points. I","Fragments":["didn't"]},{"Key":"the `auto`","Fragments":["syntax,"]},{"Key":"`auto` syntax,","Fragments":["but"]},{"Key":"syntax, but","Fragments":["I"]},{"Key":"like it.","Fragments":["Thanks!"]},{"Key":"possibly just","Fragments":["use"]},{"Key":"const strings","Fragments":["instead"]},{"Key":"strings instead","Fragments":["of"]},{"Key":"that chooses","Fragments":["a"]},{"Key":"chooses a","Fragments":["response."]},{"Key":"was doing","Fragments":["this"]},{"Key":"way at","Fragments":["first"]},{"Key":"at first","Fragments":["as"]},{"Key":"first as","Fragments":["well,"]},{"Key":"as well,","Fragments":["but","bob","so"]},{"Key":"well, but","Fragments":["I"]},{"Key":"out you","Fragments":["can"]},{"Key":" `namespace","Fragments":["bob"]},{"Key":"`namespace bob","Fragments":["{"]},{"Key":"hey(string words)","Fragments":["{"]},{"Key":" }`","Fragments":["instead"]},{"Key":"}` instead","Fragments":["of"]},{"Key":"and defining","Fragments":["all"]},{"Key":"defining all","Fragments":["the"]},{"Key":"the methods","Fragments":["as"]},{"Key":"as static.","Fragments":["It"]},{"Key":"static. It","Fragments":["makes"]},{"Key":"bit simpler","Fragments":["to"]},{"Key":"to follow","Fragments":["for"]},{"Key":"follow for","Fragments":["these"]},{"Key":"That would","Fragments":["definitely","resolve"]},{"Key":"would definitely","Fragments":["be","be"]},{"Key":"definitely be","Fragments":["a","a"]},{"Key":"lot simpler.","Fragments":["I'm"]},{"Key":"simpler. I'm","Fragments":["not"]},{"Key":"felt compelled","Fragments":["to"]},{"Key":"compelled to","Fragments":["write"]},{"Key":"helper function","Fragments":["and"]},{"Key":"function and","Fragments":["an","I","the","just"]},{"Key":"and an","Fragments":["`enum`."]},{"Key":"an `enum`.","Fragments":["Thanks!"]},{"Key":" Nobody's","Fragments":["going"]},{"Key":"Nobody's going","Fragments":["to"]},{"Key":"call me","Fragments":["on"]},{"Key":"me on","Fragments":["this"]},{"Key":"this crap?","Fragments":["This"]},{"Key":"crap? This","Fragments":["is"]},{"Key":"pretty horrific","Fragments":["solution"]},{"Key":"horrific solution","Fragments":["in"]},{"Key":"in truth.","Fragments":[":P"]},{"Key":" this","Fragments":["exercise"]},{"Key":"exercise is","Fragments":["dumb,"]},{"Key":"is dumb,","Fragments":["I"]},{"Key":"dumb, I","Fragments":["just"]},{"Key":"just don't","Fragments":["care"]},{"Key":"care enough","Fragments":["to"]},{"Key":"to rewrite","Fragments":["this"]},{"Key":"rewrite this","Fragments":["using"]},{"Key":"this using","Fragments":["`const","string.pop_back()"]},{"Key":"using `const","Fragments":["char*`"]},{"Key":"`const char*`","Fragments":["instead","variables,"]},{"Key":"char*` instead","Fragments":["of"]},{"Key":"of `string`,","Fragments":["since"]},{"Key":"`string`, since","Fragments":["the"]},{"Key":"problem isn't","Fragments":["solved"]},{"Key":"isn't solved","Fragments":["any"]},{"Key":"solved any","Fragments":["easier"]},{"Key":"any easier","Fragments":["(in"]},{"Key":"easier (in","Fragments":["this"]},{"Key":"(in this","Fragments":["approach)"]},{"Key":"this approach)","Fragments":["using"]},{"Key":"approach) using","Fragments":["`string`"]},{"Key":"using `string`","Fragments":["features,"]},{"Key":"`string` features,","Fragments":["and"]},{"Key":"features, and","Fragments":["that"]},{"Key":"that saves","Fragments":["us"]},{"Key":"saves us","Fragments":["a"]},{"Key":"us a","Fragments":["little"]},{"Key":"of overhead.","Fragments":["I"]},{"Key":"overhead. I","Fragments":["opted"]},{"Key":"opted to","Fragments":["do"]},{"Key":"this procedurally","Fragments":["and"]},{"Key":"and completely","Fragments":["self-contained,"]},{"Key":"completely self-contained,","Fragments":["and"]},{"Key":"self-contained, and","Fragments":["I'm"]},{"Key":"and I'm","Fragments":["not"]},{"Key":"sure what","Fragments":["the","the"]},{"Key":"the pros","Fragments":["and"]},{"Key":"pros and","Fragments":["cons"]},{"Key":"and cons","Fragments":["of"]},{"Key":"cons of","Fragments":["that"]},{"Key":"that versus","Fragments":["using"]},{"Key":"versus using","Fragments":["pre-written"]},{"Key":"using pre-written","Fragments":["libraries"]},{"Key":"pre-written libraries","Fragments":["or"]},{"Key":"libraries or","Fragments":["a"]},{"Key":"a functional","Fragments":["approach"]},{"Key":"functional approach","Fragments":["would"]},{"Key":"approach would","Fragments":["be","be."]},{"Key":"feel that","Fragments":["this"]},{"Key":"this has","Fragments":["the"]},{"Key":"the performance","Fragments":["advantage"]},{"Key":"performance advantage","Fragments":["of"]},{"Key":"advantage of","Fragments":["only"]},{"Key":"of only","Fragments":["iterating"]},{"Key":"only iterating","Fragments":["over"]},{"Key":"string once,","Fragments":["whereas"]},{"Key":"once, whereas","Fragments":["other"]},{"Key":"whereas other","Fragments":["people's"]},{"Key":"people's implementations","Fragments":["seem"]},{"Key":"implementations seem","Fragments":["to"]},{"Key":"time they","Fragments":["look"]},{"Key":"they look","Fragments":["for"]},{"Key":"look for","Fragments":["properties","words."]},{"Key":"for properties","Fragments":["of"]},{"Key":"properties of","Fragments":["the"]},{"Key":"string (e.g.","Fragments":["is_uppercase,"]},{"Key":"(e.g. is_uppercase,","Fragments":["is_empty,"]},{"Key":"is_uppercase, is_empty,","Fragments":["is_question)."]},{"Key":"line 50","Fragments":["you"]},{"Key":"50 you","Fragments":["could"]},{"Key":"use isspace(c)","Fragments":["to"]},{"Key":"isspace(c) to","Fragments":["check"]},{"Key":"is white","Fragments":["space."]},{"Key":"It seemed","Fragments":["to"]},{"Key":"seemed to","Fragments":["me","work"]},{"Key":"the enumeration","Fragments":["clouded"]},{"Key":"enumeration clouded","Fragments":["up"]},{"Key":"clouded up","Fragments":["the"]},{"Key":"namespace but","Fragments":["since","I"]},{"Key":"but since","Fragments":["it"]},{"Key":"it only","Fragments":["exists"]},{"Key":"only exists","Fragments":["within"]},{"Key":"exists within","Fragments":["the"]},{"Key":"bob class","Fragments":["I"]},{"Key":"class I","Fragments":["figure"]},{"Key":"I figure","Fragments":["it's"]},{"Key":"figure it's","Fragments":["alright."]},{"Key":" thanks","Fragments":["@erin","@cleve"]},{"Key":"thanks @erin","Fragments":["that"]},{"Key":"@erin that","Fragments":["might"]},{"Key":"more inclusive","Fragments":["than"]},{"Key":"inclusive than","Fragments":["`'"]},{"Key":"than `'","Fragments":["'`"]},{"Key":"`' '`","Fragments":["and"]},{"Key":"'` and","Fragments":["`'\\t'`"]},{"Key":"and `'\\t'`","Fragments":["=)"]},{"Key":" Nicely","Fragments":["done."]},{"Key":"Nicely done.","Fragments":[":)"]},{"Key":"done. :)","Fragments":["The"]},{"Key":":) The","Fragments":["only","[]"]},{"Key":"only two","Fragments":["suggestions"]},{"Key":"two suggestions","Fragments":["I"]},{"Key":"suggestions I","Fragments":["have"]},{"Key":"1. to","Fragments":["replace"]},{"Key":"replace ```boost::algorithm::ends_with(str2,","Fragments":["\"?\")```"]},{"Key":"```boost::algorithm::ends_with(str2, \"?\")```","Fragments":["with"]},{"Key":"\"?\")``` with","Fragments":["```str2.back()"]},{"Key":"with ```str2.back()","Fragments":["=="]},{"Key":"```str2.back() ==","Fragments":["'?'```"]},{"Key":"== '?'```","Fragments":["because"]},{"Key":"'?'``` because","Fragments":["```back()```"]},{"Key":"because ```back()```","Fragments":["is"]},{"Key":"```back()``` is","Fragments":["part"]},{"Key":"is part","Fragments":["of"]},{"Key":"STL since","Fragments":["C++11,"]},{"Key":"since C++11,","Fragments":["and"]},{"Key":"2. to","Fragments":["change"]},{"Key":"method signature","Fragments":["to"]},{"Key":"signature to","Fragments":["```string"]},{"Key":"to ```string","Fragments":["str```"]},{"Key":"```string str```","Fragments":["(getting"]},{"Key":"str``` (getting","Fragments":["str"]},{"Key":"(getting str","Fragments":["by-value)"]},{"Key":"str by-value)","Fragments":["which"]},{"Key":"by-value) which","Fragments":["then"]},{"Key":"which then","Fragments":["allows"]},{"Key":"then allows","Fragments":["you"]},{"Key":"allows you","Fragments":["to"]},{"Key":"you to","Fragments":["delete","return","remove"]},{"Key":"delete line","Fragments":["#9."]},{"Key":"line #9.","Fragments":[":)"]},{"Key":"You rely","Fragments":["on"]},{"Key":"on built-in","Fragments":["data"]},{"Key":"built-in data","Fragments":["structures"]},{"Key":"structures and","Fragments":["functions,"]},{"Key":"and functions,","Fragments":["which"]},{"Key":"very good.","Fragments":[":)"]},{"Key":"good. :)","Fragments":["May"]},{"Key":":) May","Fragments":["I"]},{"Key":"May I","Fragments":["suggest"]},{"Key":"suggest a","Fragments":["few"]},{"Key":"- Each","Fragments":["call"]},{"Key":"Each call","Fragments":["to"]},{"Key":"to ```fill_map```-method","Fragments":["could"]},{"Key":"```fill_map```-method could","Fragments":["be"]},{"Key":"with ```if","Fragments":["(!word.empty())"]},{"Key":"```if (!word.empty())","Fragments":["ret[word]++;```"]},{"Key":"(!word.empty()) ret[word]++;```","Fragments":["because"]},{"Key":"do always","Fragments":["prefer"]},{"Key":"always prefer","Fragments":["```!word.empty()```"]},{"Key":"prefer ```!word.empty()```","Fragments":["to"]},{"Key":"```!word.empty()``` to","Fragments":["the"]},{"Key":"check ```word","Fragments":["!="]},{"Key":"```word !=","Fragments":["\"\"```"]},{"Key":"!= \"\"```","Fragments":["because"]},{"Key":"\"\"``` because","Fragments":["in"]},{"Key":"because in","Fragments":["the"]},{"Key":"latter you","Fragments":["first"]},{"Key":"you first","Fragments":["initialize"]},{"Key":"first initialize","Fragments":["a"]},{"Key":"initialize a","Fragments":["string"]},{"Key":"string object","Fragments":["in"]},{"Key":"object in","Fragments":["order"]},{"Key":"to compare","Fragments":["it","against"]},{"Key":"- Lines","Fragments":["43-46:"]},{"Key":"Lines 43-46:","Fragments":["Here"]},{"Key":"43-46: Here","Fragments":["you"]},{"Key":"could rely","Fragments":["on"]},{"Key":"on ```int```'s","Fragments":["default"]},{"Key":"```int```'s default","Fragments":["constructor,"]},{"Key":"default constructor,","Fragments":["which"]},{"Key":"constructor, which","Fragments":["initializes"]},{"Key":"which initializes","Fragments":["```ret[word]```"]},{"Key":"initializes ```ret[word]```","Fragments":["to"]},{"Key":"```ret[word]``` to","Fragments":["```0```"]},{"Key":"to ```0```","Fragments":["if"]},{"Key":"```0``` if","Fragments":["word"]},{"Key":"not yet","Fragments":["contained","optimal:"]},{"Key":"yet contained","Fragments":["in"]},{"Key":"the map.","Fragments":["Hence,"]},{"Key":"map. Hence,","Fragments":["these"]},{"Key":"Hence, these","Fragments":["four"]},{"Key":"these four","Fragments":["lines"]},{"Key":"four lines","Fragments":["could"]},{"Key":"- Line","Fragments":["31"]},{"Key":"Line 31","Fragments":["(and"]},{"Key":"31 (and","Fragments":["thus"]},{"Key":"(and thus","Fragments":["the"]},{"Key":"thus the","Fragments":["for-loop)"]},{"Key":"the for-loop)","Fragments":["is"]},{"Key":"for-loop) is","Fragments":["not"]},{"Key":"yet optimal:","Fragments":["Every"]},{"Key":"optimal: Every","Fragments":["time"]},{"Key":"Every time","Fragments":["```+=```"]},{"Key":"time ```+=```","Fragments":["is"]},{"Key":"```+=``` is","Fragments":["called"]},{"Key":"called the","Fragments":["string"]},{"Key":"be enlarged","Fragments":["by"]},{"Key":"enlarged by","Fragments":["one"]},{"Key":"by one","Fragments":["character,","instead"]},{"Key":"one character,","Fragments":["which"]},{"Key":"character, which","Fragments":["in"]},{"Key":"which in","Fragments":["the"]},{"Key":"end might","Fragments":["result"]},{"Key":"might result","Fragments":["in"]},{"Key":"reallocations of","Fragments":["memory."]},{"Key":"of memory.","Fragments":["If"]},{"Key":"memory. If","Fragments":["you"]},{"Key":"you prefer","Fragments":["to"]},{"Key":"do it","Fragments":["the","otherwise."]},{"Key":"it the","Fragments":["for-loop-way,"]},{"Key":"the for-loop-way,","Fragments":["you"]},{"Key":"for-loop-way, you","Fragments":["could"]},{"Key":"could instead","Fragments":["remember"]},{"Key":"instead remember","Fragments":["the"]},{"Key":"remember the","Fragments":["first"]},{"Key":"and last","Fragments":["position","but"]},{"Key":"last position","Fragments":["that"]},{"Key":"position that","Fragments":["belongs"]},{"Key":"that belongs","Fragments":["to"]},{"Key":"belongs to","Fragments":["a"]},{"Key":"and _then_","Fragments":["construct"]},{"Key":"_then_ construct","Fragments":["it"]},{"Key":"construct it","Fragments":["after"]},{"Key":"it after","Fragments":["line"]},{"Key":"after line","Fragments":["26."]},{"Key":"the auto","Fragments":["and","lines,"]},{"Key":"auto and","Fragments":["loop"]},{"Key":"and loop","Fragments":["advice,","can","once"]},{"Key":"loop advice,","Fragments":["I'll"]},{"Key":"advice, I'll","Fragments":["definitely"]},{"Key":"I'll definitely","Fragments":["use"]},{"Key":"definitely use","Fragments":["these"]},{"Key":"use these","Fragments":["more."]},{"Key":"that well","Fragments":["named"]},{"Key":"well named","Fragments":["test","variables"]},{"Key":"named test","Fragments":["functions"]},{"Key":"test functions","Fragments":["often"]},{"Key":"functions often","Fragments":["help"]},{"Key":"often help","Fragments":["readability,"]},{"Key":"help readability,","Fragments":["getting"]},{"Key":"readability, getting","Fragments":["a"]},{"Key":"getting a","Fragments":["reasonable","error","compiler"]},{"Key":"a reasonable","Fragments":["balance"]},{"Key":"reasonable balance","Fragments":["between"]},{"Key":"balance between","Fragments":["offloading"]},{"Key":"between offloading","Fragments":["small"]},{"Key":"offloading small","Fragments":["checks"]},{"Key":"small checks","Fragments":["into"]},{"Key":"into them","Fragments":["at"]},{"Key":"them at","Fragments":["the"]},{"Key":"the expense","Fragments":["of","of"]},{"Key":"expense of","Fragments":["greater","a"]},{"Key":"of greater","Fragments":["code"]},{"Key":"greater code","Fragments":["size,"]},{"Key":"code size,","Fragments":["and"]},{"Key":"size, and","Fragments":["instead"]},{"Key":"and instead","Fragments":["having","change"]},{"Key":"instead having","Fragments":["well"]},{"Key":"having well","Fragments":["named"]},{"Key":"named variables","Fragments":["for"]},{"Key":"variables for","Fragments":["the"]},{"Key":"result of","Fragments":["the","`evaluate(sentence)`\u003c/li\u003e","`const","`evaluate(sentence)`\u003c/li\u003e","`const","`evaluate(sentence)`\u003c/li\u003e"]},{"Key":"the space","Fragments":["taken","after"]},{"Key":"space taken","Fragments":["by"]},{"Key":"taken by","Fragments":["any"]},{"Key":"by any","Fragments":["unit"]},{"Key":"any unit","Fragments":["of"]},{"Key":"unit of","Fragments":["code"]},{"Key":"a tricky","Fragments":["one."]},{"Key":"thanks @cleve","Fragments":["I"]},{"Key":"@cleve I","Fragments":["will"]},{"Key":"will implement","Fragments":["your"]},{"Key":"implement your","Fragments":["suggestions"]},{"Key":"suggestions at","Fragments":["some"]},{"Key":"some point","Fragments":["over"]},{"Key":"point over","Fragments":["this"]},{"Key":"over this","Fragments":["weekend."]},{"Key":"this weekend.","Fragments":["They"]},{"Key":"weekend. They","Fragments":["all"]},{"Key":"They all","Fragments":["seem"]},{"Key":"all seem","Fragments":["very"]},{"Key":"seem very","Fragments":["valid."]},{"Key":"very valid.","Fragments":["I"]},{"Key":"valid. I","Fragments":["did"]},{"Key":"didn't think","Fragments":["about"]},{"Key":"about efficiency.","Fragments":["Remembering"]},{"Key":"efficiency. Remembering","Fragments":["indexes"]},{"Key":"Remembering indexes","Fragments":["would"]},{"Key":"indexes would","Fragments":["definitely"]},{"Key":"a more","Fragments":["optimal","careful","maintainable","definite"]},{"Key":"more optimal","Fragments":["way"]},{"Key":"optimal way","Fragments":["to"]},{"Key":"to go","Fragments":["about","about"]},{"Key":"go about","Fragments":["creating","checking"]},{"Key":"about creating","Fragments":["the"]},{"Key":"creating the","Fragments":["word."]},{"Key":" Yea","Fragments":["well,"]},{"Key":"Yea well,","Fragments":["that"]},{"Key":"well, that","Fragments":["works"]},{"Key":"that works","Fragments":[":P"]},{"Key":" Kinda","Fragments":["the"]},{"Key":"Kinda the","Fragments":["idea"]},{"Key":"idea was","Fragments":["to"]},{"Key":"not paste","Fragments":["the"]},{"Key":"paste the","Fragments":["entire","crux"]},{"Key":"entire song","Fragments":["into"]},{"Key":"song into","Fragments":["a"]},{"Key":"string array,","Fragments":["but"]},{"Key":"array, but","Fragments":["to"]},{"Key":"but to","Fragments":["generate"]},{"Key":"to generate","Fragments":["as"]},{"Key":"generate as","Fragments":["much"]},{"Key":"as much","Fragments":["of"]},{"Key":"the text","Fragments":["algorithmically","consists"]},{"Key":"text algorithmically","Fragments":["as"]},{"Key":"algorithmically as","Fragments":["feasible."]},{"Key":"A good","Fragments":["half"]},{"Key":"good half","Fragments":["of"]},{"Key":"half of","Fragments":["the"]},{"Key":"text consists","Fragments":["of"]},{"Key":"consists of","Fragments":["\"She"]},{"Key":"of \"She","Fragments":["swallowed"]},{"Key":"\"She swallowed","Fragments":["the"]},{"Key":"swallowed the","Fragments":["x"]},{"Key":"the x","Fragments":["to"]},{"Key":"x to","Fragments":["catch"]},{"Key":"to catch","Fragments":["the"]},{"Key":"catch the","Fragments":["y\","]},{"Key":"the y\",","Fragments":["so"]},{"Key":"y\", so","Fragments":["that"]},{"Key":"be generated","Fragments":["through"]},{"Key":"generated through","Fragments":["code."]},{"Key":"to concede","Fragments":["that"]},{"Key":"concede that","Fragments":["this"]},{"Key":"this solution","Fragments":["is","couldn't"]},{"Key":"the fastest","Fragments":["one"]},{"Key":"fastest one","Fragments":["to"]},{"Key":"one to","Fragments":["write","nitpick"]},{"Key":"write and","Fragments":["run","possibly"]},{"Key":"and run","Fragments":[":D"]},{"Key":"This looks","Fragments":["clean,"]},{"Key":"looks clean,","Fragments":["concise"]},{"Key":"clean, concise","Fragments":["and"]},{"Key":"concise and","Fragments":["well-composed."]},{"Key":"and well-composed.","Fragments":["You"]},{"Key":"well-composed. You","Fragments":["could"]},{"Key":"boost your","Fragments":["encapsulation"]},{"Key":"your encapsulation","Fragments":["by"]},{"Key":"encapsulation by","Fragments":["perform"]},{"Key":"by perform","Fragments":["the"]},{"Key":"of counting","Fragments":["words"]},{"Key":"counting words","Fragments":["in"]},{"Key":"words in","Fragments":["a"]},{"Key":"helper function.","Fragments":["Also,"]},{"Key":"Also, `using","Fragments":["namespace"]},{"Key":"std` can","Fragments":["be"]},{"Key":"bit heavy-handed","Fragments":["and"]},{"Key":"heavy-handed and","Fragments":["pollute"]},{"Key":"and pollute","Fragments":["your"]},{"Key":"pollute your","Fragments":["global"]},{"Key":"your global","Fragments":["namespace"]},{"Key":"global namespace","Fragments":["with"]},{"Key":"namespace with","Fragments":["unneeded"]},{"Key":"with unneeded","Fragments":["definitions."]},{"Key":"unneeded definitions.","Fragments":["Good"]},{"Key":"definitions. Good","Fragments":["you"]},{"Key":"Good you","Fragments":["also"]},{"Key":"you also","Fragments":["included","do"]},{"Key":"also included","Fragments":["a"]},{"Key":"included a","Fragments":["macro"]},{"Key":"I moved","Fragments":["everything","everything"]},{"Key":"moved everything","Fragments":["from","to"]},{"Key":"everything from","Fragments":["a"]},{"Key":"namespace thanks","Fragments":["to"]},{"Key":"thanks to","Fragments":["@asia","everybody"]},{"Key":"to @asia","Fragments":["."]},{"Key":"@asia .","Fragments":["i"]},{"Key":". i","Fragments":["also"]},{"Key":"i also","Fragments":["changed"]},{"Key":"also changed","Fragments":["som"]},{"Key":"changed som","Fragments":["off"]},{"Key":"som off","Fragments":["the"]},{"Key":"the bool","Fragments":["to"]},{"Key":"it easer","Fragments":["to"]},{"Key":"easer to","Fragments":["understand"]},{"Key":"they do(might","Fragments":["have"]},{"Key":"do(might have","Fragments":["added"]},{"Key":"have added","Fragments":["a","some"]},{"Key":"few cpu","Fragments":["cycles)"]},{"Key":"I've certainly","Fragments":["reimplemented"]},{"Key":"certainly reimplemented","Fragments":["some"]},{"Key":"reimplemented some","Fragments":["library"]},{"Key":"some library","Fragments":["functionality"]},{"Key":"library functionality","Fragments":["with"]},{"Key":"functionality with","Fragments":["my"]},{"Key":"with my","Fragments":["character"]},{"Key":"my character","Fragments":["matching"]},{"Key":"character matching","Fragments":["and"]},{"Key":"matching and","Fragments":["stripping,"]},{"Key":"and stripping,","Fragments":["however"]},{"Key":"stripping, however","Fragments":["I'm"]},{"Key":"however I'm","Fragments":["not"]},{"Key":"best alternative","Fragments":["approach"]},{"Key":"alternative approach","Fragments":["would"]},{"Key":"would be.","Fragments":["Maybe"]},{"Key":"be. Maybe","Fragments":["loop"]},{"Key":"Maybe loop","Fragments":["the"]},{"Key":"loop the","Fragments":["the"]},{"Key":"the the","Fragments":["string,"]},{"Key":"string, cutting","Fragments":["out"]},{"Key":"cutting out","Fragments":["sections"]},{"Key":"out sections","Fragments":["containing"]},{"Key":"sections containing","Fragments":["undesired"]},{"Key":"containing undesired","Fragments":["chars?"]},{"Key":"had some","Fragments":["trouble"]},{"Key":"some trouble","Fragments":["moving"]},{"Key":"trouble moving","Fragments":["the"]},{"Key":"word extraction","Fragments":["to"]},{"Key":"extraction to","Fragments":["it's"]},{"Key":"to it's","Fragments":["own"]},{"Key":"it's own","Fragments":["function,"]},{"Key":"own function,","Fragments":["since"]},{"Key":"function, since","Fragments":["I"]},{"Key":"with whitespace","Fragments":["removed"]},{"Key":"whitespace removed","Fragments":["and"]},{"Key":"removed and","Fragments":["the","its"]},{"Key":"of characters","Fragments":["cut"]},{"Key":"characters cut","Fragments":["from"]},{"Key":"cut from","Fragments":["the"]},{"Key":"there's any","Fragments":["advantage"]},{"Key":"any advantage","Fragments":["to"]},{"Key":"advantage to","Fragments":["making"]},{"Key":"to making","Fragments":["the"]},{"Key":"whole string","Fragments":["lowercase,","and"]},{"Key":"string lowercase,","Fragments":["or"]},{"Key":"lowercase, or","Fragments":["doing"]},{"Key":"or doing","Fragments":["it"]},{"Key":"it word","Fragments":["by"]},{"Key":"word by","Fragments":["word."]},{"Key":" Ty,","Fragments":["didn't"]},{"Key":"Ty, didn't","Fragments":["really"]},{"Key":"didn't really","Fragments":["think"]},{"Key":"really think","Fragments":["of"]},{"Key":"doing that.","Fragments":["going"]},{"Key":"that. going","Fragments":["to"]},{"Key":"it look","Fragments":["a"]},{"Key":"look a","Fragments":["lot"]},{"Key":" Well,","Fragments":["I"]},{"Key":"Well, I","Fragments":["think"]},{"Key":"you can't","Fragments":["use"]},{"Key":"can't use","Fragments":["an"]},{"Key":"unordered_map because","Fragments":["the"]},{"Key":"tests require","Fragments":["you"]},{"Key":"require you","Fragments":["to"]},{"Key":" Come","Fragments":["to"]},{"Key":"Come to","Fragments":["think"]},{"Key":"of it,","Fragments":["I"]},{"Key":"it, I","Fragments":["don't"]},{"Key":"I've ever","Fragments":["used"]},{"Key":"ever used","Fragments":["a"]},{"Key":"a std::unordered_map","Fragments":["in"]},{"Key":"std::unordered_map in","Fragments":["my"]},{"Key":" Hey","Fragments":["there,","@guido,","@rickey"]},{"Key":" got","Fragments":["one"]},{"Key":"got one","Fragments":["smaller"]},{"Key":"one smaller","Fragments":["thing"]},{"Key":"smaller thing","Fragments":["and"]},{"Key":"thing and","Fragments":["a"]},{"Key":"bigger one","Fragments":["to"]},{"Key":"to nitpick","Fragments":["about"]},{"Key":"nitpick about","Fragments":[":)"]},{"Key":"1) `returnValue[wordBuffer]","Fragments":["=="]},{"Key":"`returnValue[wordBuffer] ==","Fragments":["'\\0'`"]},{"Key":"== '\\0'`","Fragments":["here"]},{"Key":"'\\0'` here","Fragments":["you"]},{"Key":"here you","Fragments":["should"]},{"Key":"should have","Fragments":["`==","your","coded","been","dug"]},{"Key":"have `==","Fragments":["0`"]},{"Key":"`== 0`","Fragments":["instead."]},{"Key":"0` instead.","Fragments":["You're"]},{"Key":"instead. You're","Fragments":["comparing"]},{"Key":"You're comparing","Fragments":["a"]},{"Key":"comparing a","Fragments":["char"]},{"Key":"char to","Fragments":["an"]},{"Key":"2) As","Fragments":["you"]},{"Key":"see for","Fragments":["yourself..."]},{"Key":"for yourself...","Fragments":["the"]},{"Key":"yourself... the","Fragments":["code"]},{"Key":"is difficult","Fragments":["to"]},{"Key":"to read.","Fragments":["Lots"]},{"Key":"read. Lots","Fragments":["of"]},{"Key":"Lots of","Fragments":["ifs,"]},{"Key":"of ifs,","Fragments":["lots"]},{"Key":"ifs, lots","Fragments":["of"]},{"Key":"of obscure","Fragments":["conditions."]},{"Key":"obscure conditions.","Fragments":["And"]},{"Key":"conditions. And","Fragments":["you"]},{"Key":"And you","Fragments":["also"]},{"Key":"also do","Fragments":["certain"]},{"Key":"do certain","Fragments":["work"]},{"Key":"certain work","Fragments":["more"]},{"Key":"work more","Fragments":["than"]},{"Key":"than once.","Fragments":["For"]},{"Key":"once. For","Fragments":["example,"]},{"Key":"example, a","Fragments":["string"]},{"Key":"like \"hello,there\"","Fragments":["would"]},{"Key":"\"hello,there\" would","Fragments":["go"]},{"Key":"would go","Fragments":["through"]},{"Key":"go through","Fragments":["the"]},{"Key":"the process","Fragments":["of","is"]},{"Key":"process of","Fragments":["replacing"]},{"Key":"of replacing","Fragments":["non-alnum"]},{"Key":"replacing non-alnum","Fragments":["chars"]},{"Key":"non-alnum chars","Fragments":["with"]},{"Key":"chars with","Fragments":["whitespaces"]},{"Key":"with whitespaces","Fragments":["twice."]},{"Key":"the reason","Fragments":["for"]},{"Key":"reason for","Fragments":["the"]},{"Key":"the complicated","Fragments":["code"]},{"Key":"complicated code","Fragments":["is"]},{"Key":"is because","Fragments":["of","the"]},{"Key":"because of","Fragments":["the","these","dependency"]},{"Key":"way you've","Fragments":["approached"]},{"Key":"you've approached","Fragments":["the"]},{"Key":"approached the","Fragments":["problem."]},{"Key":"problem. You","Fragments":["try"]},{"Key":"You try","Fragments":["to"]},{"Key":"find and","Fragments":["replace"]},{"Key":"and replace","Fragments":["any"]},{"Key":"replace any","Fragments":["punctuation"]},{"Key":"any punctuation","Fragments":["with"]},{"Key":"punctuation with","Fragments":["'"]},{"Key":"with '","Fragments":["'"]},{"Key":"' '","Fragments":["before"]},{"Key":"' before","Fragments":["you"]},{"Key":"before you","Fragments":["look","check"]},{"Key":"think a","Fragments":["better","better"]},{"Key":"better approach","Fragments":["is","is"]},{"Key":"approach is","Fragments":["to","to"]},{"Key":"search for","Fragments":["the","the","uppercase"]},{"Key":"beginning and","Fragments":["end","end"]},{"Key":"of alpha-numerical","Fragments":["sequences","sequences"]},{"Key":"alpha-numerical sequences","Fragments":["in","in"]},{"Key":"sequences in","Fragments":["the","the"]},{"Key":"just ignore","Fragments":["any","any"]},{"Key":"ignore any","Fragments":["non-alphanum","non-alphanum"]},{"Key":"any non-alphanum","Fragments":["chars","chars"]},{"Key":"non-alphanum chars","Fragments":["completely.","completely."]},{"Key":"chars completely.","Fragments":["You","You"]},{"Key":"completely. You","Fragments":["can","can"]},{"Key":"use [`std::find_if`](http://www.cplusplus.com/reference/algorithm/find_if/)","Fragments":["for","for"]},{"Key":"[`std::find_if`](http://www.cplusplus.com/reference/algorithm/find_if/) for","Fragments":["that.","that,"]},{"Key":" ^","Fragments":["^","^"]},{"Key":" start","Fragments":["end","end"]},{"Key":" Basically,","Fragments":["if","if"]},{"Key":"Basically, if","Fragments":["`\"..!longword@,?\"`","`\"..!longword@,?\"`"]},{"Key":"if `\"..!longword@,?\"`","Fragments":["is","is"]},{"Key":"`\"..!longword@,?\"` is","Fragments":["the","the"]},{"Key":"input string,","Fragments":["you'd","you'd"]},{"Key":"string, you'd","Fragments":["try","try"]},{"Key":"you'd try","Fragments":["to","to"]},{"Key":"to immediate","Fragments":["find","find"]},{"Key":"immediate find","Fragments":["the","the"]},{"Key":"start and","Fragments":["end","end","end"]},{"Key":"of words","Fragments":["to"]},{"Key":"put into","Fragments":["the","the"]},{"Key":"can greatly","Fragments":["reduce","reduce"]},{"Key":"greatly reduce","Fragments":["the","the"]},{"Key":"required code","Fragments":["with","with"]},{"Key":" (Alternatively,","Fragments":["you"]},{"Key":"(Alternatively, you","Fragments":["could"]},{"Key":"a tokenizer","Fragments":["like"]},{"Key":"tokenizer like","Fragments":["`boost::tokenizer`"]},{"Key":"like `boost::tokenizer`","Fragments":["to"]},{"Key":"`boost::tokenizer` to","Fragments":["do"]},{"Key":"the job","Fragments":["for","and"]},{"Key":"job for","Fragments":["you.)"]},{"Key":" Hi,","Fragments":["a"]},{"Key":"Hi, a","Fragments":["suggestion.."]},{"Key":"it's shouting","Fragments":["and"]},{"Key":"it's silence","Fragments":["on"]},{"Key":"silence on","Fragments":["the"]},{"Key":"would improve","Fragments":["performance"]},{"Key":"improve performance","Fragments":["from"]},{"Key":"performance from","Fragments":["your"]},{"Key":"from your","Fragments":["code","first"]},{"Key":"I'd say","Fragments":["that","that's"]},{"Key":"that making","Fragments":["the"]},{"Key":"string lower_case","Fragments":["at"]},{"Key":"lower_case at","Fragments":["once"]},{"Key":"at once","Fragments":["is"]},{"Key":"once is","Fragments":["the"]},{"Key":"better approach.","Fragments":["This"]},{"Key":"approach. This","Fragments":["way"]},{"Key":"you keep","Fragments":["that"]},{"Key":"keep that","Fragments":["piece"]},{"Key":"that piece","Fragments":["of"]},{"Key":"piece of","Fragments":["code","code."]},{"Key":"code out","Fragments":["of"]},{"Key":"thing I","Fragments":["notice","would"]},{"Key":"notice is","Fragments":["that"]},{"Key":"you're not","Fragments":["using","correctly"]},{"Key":"two of","Fragments":["your"]},{"Key":"your string","Fragments":["globals"]},{"Key":"string globals","Fragments":["so"]},{"Key":"globals so","Fragments":["you"]},{"Key":"can remove","Fragments":["them."]},{"Key":"An issue","Fragments":["is"]},{"Key":"not correctly","Fragments":["parsing"]},{"Key":"correctly parsing","Fragments":["things"]},{"Key":"parsing things","Fragments":["like"]},{"Key":"things like","Fragments":["`\"this,is\"`."]},{"Key":"like `\"this,is\"`.","Fragments":["Your"]},{"Key":"`\"this,is\"`. Your","Fragments":["program"]},{"Key":"Your program","Fragments":["doesn't"]},{"Key":"program doesn't","Fragments":["parse"]},{"Key":"doesn't parse","Fragments":["it"]},{"Key":"parse it","Fragments":["as"]},{"Key":"as two","Fragments":["different"]},{"Key":"different word,","Fragments":["but"]},{"Key":"word, but","Fragments":["turns","on"]},{"Key":"but turns","Fragments":["it"]},{"Key":"turns it","Fragments":["into"]},{"Key":"have trouble","Fragments":["with"]},{"Key":"trouble with","Fragments":["removal"]},{"Key":"with removal","Fragments":["of"]},{"Key":"removal of","Fragments":["whitespace"]},{"Key":"of whitespace","Fragments":["and"]},{"Key":"whitespace and","Fragments":["other","not"]},{"Key":"and other","Fragments":["undesirable"]},{"Key":"other undesirable","Fragments":["chars,"]},{"Key":"undesirable chars,","Fragments":["then"]},{"Key":"chars, then","Fragments":["I"]},{"Key":"suggest an","Fragments":["alternative:"]},{"Key":"for that,","Fragments":["or"]},{"Key":"that, or","Fragments":["a"]},{"Key":"a number","Fragments":["of","of","of"]},{"Key":"of other","Fragments":["functions.","things.","errors."]},{"Key":"of \"longword\"","Fragments":["to"]},{"Key":"\"longword\" to","Fragments":["put"]},{"Key":"the std::map.","Fragments":["Everything"]},{"Key":"std::map. Everything","Fragments":["that"]},{"Key":"Everything that","Fragments":["isn't"]},{"Key":"isn't a","Fragments":["number"]},{"Key":"of letter","Fragments":["is"]},{"Key":"letter is","Fragments":["of","upper/lower","a"]},{"Key":"is of","Fragments":["absolutely"]},{"Key":"of absolutely","Fragments":["no"]},{"Key":"absolutely no","Fragments":["concern."]},{"Key":" @maryam","Fragments":["Thanks"]},{"Key":"@maryam Thanks","Fragments":["for"]},{"Key":"guess the","Fragments":["alternative"]},{"Key":"the alternative","Fragments":["to"]},{"Key":"alternative to","Fragments":["the"]},{"Key":"the mutable","Fragments":["string","string"]},{"Key":"mutable string","Fragments":["input","input"]},{"Key":"string input","Fragments":["in","in"]},{"Key":"your example","Fragments":["is"]},{"Key":"example is","Fragments":["something"]},{"Key":"is something","Fragments":["like"]},{"Key":"func(std::string const","Fragments":["\u0026s){"]},{"Key":"std::string s_func","Fragments":["="]},{"Key":"s_func =","Fragments":["s;"]},{"Key":" s_func","Fragments":["+="]},{"Key":"s_func +=","Fragments":["i;"]},{"Key":"of choosing","Fragments":["the"]},{"Key":"choosing the","Fragments":["mutable"]},{"Key":"case, as","Fragments":["it"]},{"Key":"will use","Fragments":["less"]},{"Key":"use less","Fragments":["memory."]},{"Key":"less memory.","Fragments":["My"]},{"Key":"memory. My","Fragments":["question"]},{"Key":"My question","Fragments":["is","is"]},{"Key":"is are","Fragments":["there","there"]},{"Key":"are there","Fragments":["any","any"]},{"Key":"there any","Fragments":["clear","clear"]},{"Key":"any clear","Fragments":["benefits","benefits"]},{"Key":"clear benefits","Fragments":["of","of"]},{"Key":"using const","Fragments":["inputs","inputs"]},{"Key":"const inputs","Fragments":["and","are","and"]},{"Key":"inputs and","Fragments":["copying","copying"]},{"Key":"and copying","Fragments":["them","them"]},{"Key":"copying them","Fragments":["to","to"]},{"Key":"other variables","Fragments":["if","if"]},{"Key":"variables if","Fragments":["they","they"]},{"Key":"they need","Fragments":["to","to"]},{"Key":"be changed","Fragments":["in","in"]},{"Key":"changed in","Fragments":["the","the"]},{"Key":" Clearly","Fragments":["for"]},{"Key":"Clearly for","Fragments":["the"]},{"Key":"the hamming","Fragments":["problem,"]},{"Key":"hamming problem,","Fragments":["const"]},{"Key":"problem, const","Fragments":["inputs"]},{"Key":"inputs are","Fragments":["the"]},{"Key":"Thanks again.","Fragments":[":)"]},{"Key":"saw people","Fragments":["talking"]},{"Key":"people talking","Fragments":["about"]},{"Key":"about anonymous","Fragments":["namespace,"]},{"Key":"tried it","Fragments":["out."]},{"Key":" Now,","Fragments":["I'm"]},{"Key":"Now, I'm","Fragments":["using"]},{"Key":"using only","Fragments":["one"]},{"Key":"one for","Fragments":["loop"]},{"Key":"loop to","Fragments":["check","the","happen"]},{"Key":"it's yelling","Fragments":["and"]},{"Key":"a prolonged","Fragments":["silence."]},{"Key":" Commented","Fragments":["code"]},{"Key":"Commented code","Fragments":["removed."]},{"Key":"For checking","Fragments":["if"]},{"Key":"checking if","Fragments":["each"]},{"Key":"if each","Fragments":["letter"]},{"Key":"each letter","Fragments":["is"]},{"Key":"is upper/lower","Fragments":["case"]},{"Key":"upper/lower case","Fragments":["you"]},{"Key":"case you","Fragments":["can"]},{"Key":"use isupper(letter)","Fragments":["or"]},{"Key":"isupper(letter) or","Fragments":["islower(letter)."]},{"Key":"or islower(letter).","Fragments":["Similarly"]},{"Key":"islower(letter). Similarly","Fragments":["you"]},{"Key":"Similarly you","Fragments":["can"]},{"Key":"use isspace(letter)","Fragments":["to"]},{"Key":"isspace(letter) to","Fragments":["check"]},{"Key":"a character","Fragments":["is"]},{"Key":"noticed how","Fragments":["isalpha,","it"]},{"Key":"how isalpha,","Fragments":["islower,"]},{"Key":"isalpha, islower,","Fragments":["etc."]},{"Key":"islower, etc.","Fragments":["are"]},{"Key":"etc. are","Fragments":["formed"]},{"Key":"are formed","Fragments":["as"]},{"Key":"formed as","Fragments":["assertions"]},{"Key":"as assertions","Fragments":["or"]},{"Key":"assertions or","Fragments":["questions?"]},{"Key":"or questions?","Fragments":["Have"]},{"Key":"questions? Have","Fragments":["you"]},{"Key":"how it","Fragments":["makes","allows"]},{"Key":"makes an","Fragments":["if-statement"]},{"Key":"an if-statement","Fragments":["look"]},{"Key":"if-statement look","Fragments":["almost"]},{"Key":"look almost","Fragments":["like"]},{"Key":"almost like","Fragments":["an"]},{"Key":"an actual","Fragments":["sentence?","person;"]},{"Key":" Which","Fragments":["makes"]},{"Key":"Which makes","Fragments":["more"]},{"Key":"makes more","Fragments":["sense","sense.\u003c/li\u003e"]},{"Key":"more sense","Fragments":["when"]},{"Key":"sense when","Fragments":["read"]},{"Key":"when read","Fragments":["out"]},{"Key":"read out","Fragments":["loud:"]},{"Key":"out loud:","Fragments":["\"if"]},{"Key":"loud: \"if","Fragments":["is"]},{"Key":"\"if is","Fragments":["upper"]},{"Key":"upper case\"","Fragments":["or"]},{"Key":"case\" or","Fragments":["\"if"]},{"Key":"or \"if","Fragments":["check"]},{"Key":"\"if check","Fragments":["upper"]},{"Key":"check upper","Fragments":["case\"?"]},{"Key":"figured a","Fragments":["nice"]},{"Key":"nice way","Fragments":["to"]},{"Key":"to sort","Fragments":["the"]},{"Key":"and test","Fragments":["if"]},{"Key":"test if","Fragments":["they"]},{"Key":"were equal.","Fragments":["Looking"]},{"Key":"equal. Looking","Fragments":["at"]},{"Key":"other solutions,","Fragments":["I"]},{"Key":"solutions, I","Fragments":["see"]},{"Key":"see there","Fragments":["is"]},{"Key":"function ```std::is_permutation```","Fragments":["from"]},{"Key":"```std::is_permutation``` from","Fragments":["algorithm,"]},{"Key":"from algorithm,","Fragments":["which"]},{"Key":"algorithm, which","Fragments":["would"]},{"Key":"would also","Fragments":["work","make"]},{"Key":"also work","Fragments":["nicely."]},{"Key":" \u003e","Fragments":["My","If"]},{"Key":"\u003e My","Fragments":["question"]},{"Key":"Not to","Fragments":["my"]},{"Key":"to my","Fragments":["knowledge.","code.","unfortold"]},{"Key":"my knowledge.","Fragments":["If"]},{"Key":"knowledge. If","Fragments":["you"]},{"Key":"the variable,","Fragments":["you"]},{"Key":"variable, you","Fragments":["better"]},{"Key":"you better","Fragments":["pass"]},{"Key":"better pass","Fragments":["it"]},{"Key":"value. Less","Fragments":["code"]},{"Key":"Less code","Fragments":["and"]},{"Key":"no difference","Fragments":["in"]},{"Key":"difference in","Fragments":["performance."]},{"Key":" Yea,","Fragments":["in","I'm"]},{"Key":"Yea, in","Fragments":["my"]},{"Key":"opinion private","Fragments":["enums"]},{"Key":"private enums","Fragments":["in"]},{"Key":"enums in","Fragments":["a"]},{"Key":"class are","Fragments":["fine."]},{"Key":"could change","Fragments":["the","one"]},{"Key":"the `for(int","Fragments":["i=0;i\u003cprompt.size();++i)`"]},{"Key":"`for(int i=0;i\u003cprompt.size();++i)`","Fragments":["into"]},{"Key":"i=0;i\u003cprompt.size();++i)` into","Fragments":["a"]},{"Key":"for-element loop","Fragments":["`for(char","`for(char"]},{"Key":"loop `for(char","Fragments":["c","c"]},{"Key":"`for(char c","Fragments":[":",":"]},{"Key":": prompt)`","Fragments":["if"]},{"Key":"prompt)` if","Fragments":["you're"]},{"Key":"if you're","Fragments":["using"]},{"Key":"a C++11","Fragments":["compiler.","compiler."]},{"Key":"C++11 compiler.","Fragments":["That'll","That'll"]},{"Key":"compiler. That'll","Fragments":["remove","make"]},{"Key":"That'll remove","Fragments":["the"]},{"Key":"the chance","Fragments":["for","of"]},{"Key":"chance for","Fragments":["errors"]},{"Key":"for errors","Fragments":["during"]},{"Key":"errors during","Fragments":["the"]},{"Key":"during the","Fragments":["loop"]},{"Key":"loop and","Fragments":["you"]},{"Key":"`i` variable","Fragments":["anymore."]},{"Key":"You also","Fragments":["don't"]},{"Key":"the `break;`","Fragments":["in"]},{"Key":"`break;` in","Fragments":["`case"]},{"Key":"in `case","Fragments":["X:"]},{"Key":"`case X:","Fragments":["return"]},{"Key":"X: return","Fragments":["\"blah\";"]},{"Key":"return \"blah\";","Fragments":["break;`"]},{"Key":"\"blah\"; break;`","Fragments":["since"]},{"Key":"break;` since","Fragments":["a"]},{"Key":"since a","Fragments":["return"]},{"Key":"a return","Fragments":["statement","variable"]},{"Key":"return statement","Fragments":["already"]},{"Key":"statement already","Fragments":["acts"]},{"Key":"already acts","Fragments":["as"]},{"Key":"acts as","Fragments":["a"]},{"Key":"a break.","Fragments":["I'd"]},{"Key":"break. I'd","Fragments":["say"]},{"Key":"say that's","Fragments":["up"]},{"Key":"that's up","Fragments":["to"]},{"Key":"up to","Fragments":["personal"]},{"Key":"to personal","Fragments":["preference"]},{"Key":"personal preference","Fragments":["but"]},{"Key":"preference but","Fragments":["I"]},{"Key":"think certain","Fragments":["compilers"]},{"Key":"certain compilers","Fragments":["actually"]},{"Key":"compilers actually","Fragments":["issue"]},{"Key":"actually issue","Fragments":["a"]},{"Key":"issue a","Fragments":["warning"]},{"Key":"a warning","Fragments":["for"]},{"Key":"warning for","Fragments":["unreachable"]},{"Key":"for unreachable","Fragments":["code"]},{"Key":"unreachable code","Fragments":["because"]},{"Key":"code because","Fragments":["of","at"]},{"Key":" Lastly,","Fragments":["you"]},{"Key":"Lastly, you","Fragments":["should"]},{"Key":"have your","Fragments":["functions","input"]},{"Key":"functions accept","Fragments":["`const"]},{"Key":"accept `const","Fragments":["string\u0026"]},{"Key":"`const string\u0026","Fragments":["prompt`","sentence`","respond","sentence`","respond","respond(const","sentence`","respond(const","bob::hey(cosnt","sentence`"]},{"Key":"string\u0026 prompt`","Fragments":["instead"]},{"Key":"prompt` instead","Fragments":["of"]},{"Key":"of `string","Fragments":["promt`"]},{"Key":"`string promt`","Fragments":["since"]},{"Key":"promt` since","Fragments":["you"]},{"Key":"don't modify","Fragments":["`prompt`"]},{"Key":"modify `prompt`","Fragments":["in"]},{"Key":"`prompt` in","Fragments":["your"]},{"Key":"your function.","Fragments":["That"]},{"Key":"function. That","Fragments":["way"]},{"Key":"you avoid","Fragments":["unnecessary"]},{"Key":"avoid unnecessary","Fragments":["copying"]},{"Key":"unnecessary copying","Fragments":["of"]},{"Key":" couple","Fragments":["of"]},{"Key":"have `if(question[question.size()-1]","Fragments":["=="]},{"Key":"`if(question[question.size()-1] ==","Fragments":["'?')`"]},{"Key":"== '?')`","Fragments":["before"]},{"Key":"'?')` before","Fragments":["you"]},{"Key":"check whether","Fragments":["question","the"]},{"Key":"whether question","Fragments":["is"]},{"Key":"So calling","Fragments":["`bob::hey(\"\")`"]},{"Key":"calling `bob::hey(\"\")`","Fragments":["currently"]},{"Key":"`bob::hey(\"\")` currently","Fragments":["crashes"]},{"Key":"currently crashes","Fragments":["with"]},{"Key":"crashes with","Fragments":["an"]},{"Key":"an access","Fragments":["violation."]},{"Key":"2) Instead","Fragments":["of"]},{"Key":"of `for(unsigned","Fragments":["int"]},{"Key":"`for(unsigned int","Fragments":["i"]},{"Key":"int i","Fragments":["=","="]},{"Key":"\u003c question.size();","Fragments":["i++)`"]},{"Key":"question.size(); i++)`","Fragments":["you"]},{"Key":"i++)` you","Fragments":["could"]},{"Key":": question)`","Fragments":["if"]},{"Key":"question)` if","Fragments":["you"]},{"Key":"That'll make","Fragments":["your"]},{"Key":"make your","Fragments":["loop","for","LowerCase"]},{"Key":"loop slightly","Fragments":["easier"]},{"Key":"slightly easier","Fragments":["and"]},{"Key":"easier and","Fragments":["removes"]},{"Key":"and removes","Fragments":["the"]},{"Key":"removes the","Fragments":["chance"]},{"Key":"chance of","Fragments":["making"]},{"Key":"mistake while","Fragments":["looping"]},{"Key":"while looping","Fragments":["(e.g."]},{"Key":"looping (e.g.","Fragments":["off-by-one"]},{"Key":"(e.g. off-by-one","Fragments":["errors)."]},{"Key":"3) I","Fragments":["think"]},{"Key":"think using","Fragments":["two","a"]},{"Key":"two global","Fragments":["variables","variables"]},{"Key":"global variables","Fragments":["`isYelling`","here;"]},{"Key":"variables `isYelling`","Fragments":["and"]},{"Key":"`isYelling` and","Fragments":["`isProlongedSilence`"]},{"Key":"and `isProlongedSilence`","Fragments":["are"]},{"Key":"`isProlongedSilence` are","Fragments":["a"]},{"Key":"a bad","Fragments":["idea."]},{"Key":"bad idea.","Fragments":["There's"]},{"Key":"idea. There's","Fragments":["no"]},{"Key":"There's no","Fragments":["need"]},{"Key":"for two","Fragments":["global","reasons."]},{"Key":"variables here;","Fragments":["it"]},{"Key":"here; it","Fragments":["makes"]},{"Key":"complex than","Fragments":["it"]},{"Key":"than it","Fragments":["needs"]},{"Key":"it needs","Fragments":["to"]},{"Key":"to be.","Fragments":["You"]},{"Key":"be. You","Fragments":["could"]},{"Key":"make `checkQuestion`","Fragments":["return"]},{"Key":"`checkQuestion` return","Fragments":["an"]},{"Key":"return an","Fragments":["enum,"]},{"Key":"an enum,","Fragments":["or"]},{"Key":"enum, or","Fragments":["pass"]},{"Key":"or pass","Fragments":["the"]},{"Key":"two variables","Fragments":["as"]},{"Key":"variables as","Fragments":["references,","size_t"]},{"Key":"as references,","Fragments":["or"]},{"Key":"references, or","Fragments":["a"]},{"Key":"is sort","Fragments":["of"]},{"Key":"of what","Fragments":["I"]},{"Key":"what I","Fragments":["would","mean.","am","expected."]},{"Key":"have done","Fragments":["in","differently,"]},{"Key":"in C.","Fragments":["I"]},{"Key":"C. I","Fragments":["tried"]},{"Key":"a C++","Fragments":["way"]},{"Key":"C++ way","Fragments":["to"]},{"Key":"solve this","Fragments":["but"]},{"Key":"this but","Fragments":["I"]},{"Key":"couldn't come","Fragments":["up"]},{"Key":"come up","Fragments":["with","with"]},{"Key":"with anything","Fragments":["that's"]},{"Key":"anything that's","Fragments":["shorter"]},{"Key":"that's shorter","Fragments":["or"]},{"Key":"shorter or","Fragments":["clearer"]},{"Key":"or clearer","Fragments":["than"]},{"Key":"Regarding your","Fragments":["comment"]},{"Key":"your comment","Fragments":["on"]},{"Key":"comment on","Fragments":["the"]},{"Key":"a regex","Fragments":["is","is","for","since"]},{"Key":"is cheating","Fragments":["per-se."]},{"Key":"cheating per-se.","Fragments":["It"]},{"Key":"per-se. It","Fragments":["does"]},{"Key":"job and","Fragments":["that"]},{"Key":"all that","Fragments":["is"]},{"Key":"But it","Fragments":["isn't"]},{"Key":"isn't high-performance","Fragments":["for"]},{"Key":"high-performance for","Fragments":["two"]},{"Key":"You construct","Fragments":["four"]},{"Key":"construct four","Fragments":["`std::regex`"]},{"Key":"four `std::regex`","Fragments":["objects"]},{"Key":"`std::regex` objects","Fragments":["every"]},{"Key":"objects every","Fragments":["time"]},{"Key":"time `hey`","Fragments":["is"]},{"Key":"is called.","Fragments":["Constructing","After"]},{"Key":"called. Constructing","Fragments":["such"]},{"Key":"Constructing such","Fragments":["a"]},{"Key":"of expensive.","Fragments":["That's"]},{"Key":"expensive. That's","Fragments":["why"]},{"Key":"why you'd","Fragments":["generally"]},{"Key":"you'd generally","Fragments":["try"]},{"Key":"generally try","Fragments":["to"]},{"Key":"to re-use","Fragments":["them"]},{"Key":"re-use them","Fragments":["(storing"]},{"Key":"them (storing","Fragments":["them"]},{"Key":"(storing them","Fragments":["as"]},{"Key":"them as","Fragments":["static"]},{"Key":"static local","Fragments":["variables,","variables\","]},{"Key":"local variables,","Fragments":["for"]},{"Key":"variables, for","Fragments":["example)."]},{"Key":"2) Regexs","Fragments":["in"]},{"Key":"Regexs in","Fragments":["itself"]},{"Key":"in itself","Fragments":["are"]},{"Key":"itself are","Fragments":["probably"]},{"Key":"are probably","Fragments":["slower"]},{"Key":"probably slower","Fragments":["than"]},{"Key":"slower than","Fragments":["a","copying"]},{"Key":"a search","Fragments":["\"by"]},{"Key":"search \"by","Fragments":["hand\""]},{"Key":"\"by hand\"","Fragments":["since"]},{"Key":"hand\" since","Fragments":["they're"]},{"Key":"since they're","Fragments":["vastly"]},{"Key":"they're vastly","Fragments":["more"]},{"Key":"vastly more","Fragments":["complex."]},{"Key":"more complex.","Fragments":["If"]},{"Key":"complex. If","Fragments":["you"]},{"Key":"were to","Fragments":["benchmark"]},{"Key":"to benchmark","Fragments":["the","three"]},{"Key":"benchmark the","Fragments":["code"]},{"Key":"with and","Fragments":["without"]},{"Key":"and without","Fragments":["regexes,"]},{"Key":"without regexes,","Fragments":["I'd"]},{"Key":"regexes, I'd","Fragments":["be"]},{"Key":"I'd be","Fragments":["very"]},{"Key":"very surprised","Fragments":["if"]},{"Key":"surprised if","Fragments":["you"]},{"Key":"the non-regex","Fragments":["code"]},{"Key":"non-regex code","Fragments":["to"]},{"Key":"code to","Fragments":["be"]},{"Key":"not have","Fragments":["used","optimal","made"]},{"Key":"regex for","Fragments":["this","each","the","the"]},{"Key":"problem, especially","Fragments":["since"]},{"Key":"since there","Fragments":["are"]},{"Key":"are other","Fragments":["good","patterns)."]},{"Key":"other good","Fragments":["alternatives"]},{"Key":"good alternatives","Fragments":["to"]},{"Key":"alternatives to","Fragments":["solve"]},{"Key":"solve it","Fragments":["[like"]},{"Key":"it [like","Fragments":["this](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)"]},{"Key":"[like this](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)","Fragments":["(shameless"]},{"Key":"this](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1) (shameless","Fragments":["plug"]},{"Key":"(shameless plug","Fragments":["for"]},{"Key":"plug for","Fragments":["my"]},{"Key":"own submission","Fragments":[":p"]},{"Key":"submission :p","Fragments":[")."]},{"Key":" Getting","Fragments":["the"]},{"Key":"Getting the","Fragments":["whole"]},{"Key":"whole C++","Fragments":["environment"]},{"Key":"C++ environment","Fragments":["set"]},{"Key":"environment set","Fragments":["up"]},{"Key":"set up","Fragments":["was"]},{"Key":"up was","Fragments":["the"]},{"Key":"was the","Fragments":["hard","questions"]},{"Key":"hard part","Fragments":["about"]},{"Key":"part about","Fragments":["this."]},{"Key":"about this.","Fragments":["For"]},{"Key":"this. For","Fragments":["the"]},{"Key":"the rest,","Fragments":["I"]},{"Key":"rest, I","Fragments":["basically"]},{"Key":"I basically","Fragments":["used","chose"]},{"Key":"basically used","Fragments":["the"]},{"Key":"same code","Fragments":["as"]},{"Key":"my Python","Fragments":["script,"]},{"Key":"Python script,","Fragments":["except"]},{"Key":"script, except","Fragments":["I"]},{"Key":"except I","Fragments":["had"]},{"Key":"to manually","Fragments":["write"]},{"Key":"manually write","Fragments":["some"]},{"Key":"write some","Fragments":["of"]},{"Key":"functions the","Fragments":["Python"]},{"Key":"the Python","Fragments":["provides."]},{"Key":"Your include","Fragments":["guards"]},{"Key":"include guards","Fragments":["could"]},{"Key":"guards could","Fragments":["potentially"]},{"Key":"potentially cause","Fragments":["interference"]},{"Key":"cause interference","Fragments":["with"]},{"Key":"interference with","Fragments":["the"]},{"Key":"implementation since","Fragments":["identifiers"]},{"Key":"since identifiers","Fragments":["beginning"]},{"Key":"identifiers beginning","Fragments":["with"]},{"Key":"beginning with","Fragments":["an"]},{"Key":"an underscore","Fragments":["followed"]},{"Key":"underscore followed","Fragments":["by"]},{"Key":"by an","Fragments":["uppercase"]},{"Key":"an uppercase","Fragments":["letter","letter"]},{"Key":"uppercase letter","Fragments":["are","is"]},{"Key":"letter are","Fragments":["always"]},{"Key":"are always","Fragments":["reserved"]},{"Key":"always reserved","Fragments":["(and"]},{"Key":"reserved (and","Fragments":["so"]},{"Key":"(and so","Fragments":["are"]},{"Key":"so are","Fragments":["other"]},{"Key":"other patterns).","Fragments":["I"]},{"Key":"patterns). I","Fragments":["recommend"]},{"Key":"I recommend","Fragments":["following"]},{"Key":"recommend following","Fragments":["the"]},{"Key":"following the","Fragments":["boost"]},{"Key":"boost convention","Fragments":["\u003c"]},{"Key":"convention \u003c","Fragments":["path"]},{"Key":"\u003c path","Fragments":["to"]},{"Key":"path to","Fragments":["your"]},{"Key":" C++","Fragments":["provides","has","has"]},{"Key":"C++ provides","Fragments":["wrappers"]},{"Key":"provides wrappers","Fragments":["for"]},{"Key":"wrappers for","Fragments":["the"]},{"Key":"C headers,","Fragments":["prefer"]},{"Key":"headers, prefer","Fragments":["\u003c"]},{"Key":"prefer \u003c","Fragments":["cstring\u003e"]},{"Key":"\u003c cstring\u003e","Fragments":["over"]},{"Key":"cstring\u003e over","Fragments":["\u003c"]},{"Key":"over \u003c","Fragments":["string.h\u003e."]},{"Key":"of keyword","Fragments":["auto"]},{"Key":"keyword auto","Fragments":["in"]},{"Key":"auto in","Fragments":["line"]},{"Key":"in line","Fragments":["13.","8"]},{"Key":"line 13.","Fragments":["Although"]},{"Key":"13. Although","Fragments":["debatable,"]},{"Key":"Although debatable,","Fragments":["I"]},{"Key":"debatable, I","Fragments":["think"]},{"Key":"think size_t","Fragments":["would"]},{"Key":"size_t would","Fragments":["be"]},{"Key":"Use prefix-","Fragments":["over"]},{"Key":"prefix- over","Fragments":["postfix-increment"]},{"Key":"over postfix-increment","Fragments":["when"]},{"Key":"postfix-increment when","Fragments":["the"]},{"Key":"when the","Fragments":["side-effect"]},{"Key":"the postfix-variant","Fragments":["is"]},{"Key":"postfix-variant is","Fragments":["not"]},{"Key":"with you","Fragments":["that"]},{"Key":"you that","Fragments":["the"]},{"Key":"the \"C","Fragments":["way\""]},{"Key":"\"C way\"","Fragments":["is"]},{"Key":"way\" is","Fragments":["clearer"]},{"Key":"clearer for","Fragments":["this"]},{"Key":"this particular","Fragments":["problem.","exercise","case."]},{"Key":" std::transform","Fragments":["doesn't"]},{"Key":"std::transform doesn't","Fragments":["allocate"]},{"Key":"doesn't allocate","Fragments":["anything"]},{"Key":"allocate anything","Fragments":["by"]},{"Key":"by itself,","Fragments":["it's"]},{"Key":"itself, it's","Fragments":["only"]},{"Key":"it's only","Fragments":["an","used"]},{"Key":"an algorithm.","Fragments":["The"]},{"Key":"algorithm. The","Fragments":["trick"]},{"Key":"The trick","Fragments":["is"]},{"Key":"trick is","Fragments":["to"]},{"Key":"use back_inserter,","Fragments":["which"]},{"Key":"back_inserter, which","Fragments":["is"]},{"Key":"an iterator","Fragments":["on"]},{"Key":"iterator on","Fragments":["word,"]},{"Key":"on word,","Fragments":["but"]},{"Key":"but on","Fragments":["dereferencing"]},{"Key":"on dereferencing","Fragments":["it"]},{"Key":"dereferencing it","Fragments":["will"]},{"Key":"will append","Fragments":["a"]},{"Key":"append a","Fragments":["new"]},{"Key":"new character","Fragments":["to"]},{"Key":"character to","Fragments":["word."]},{"Key":"to word.","Fragments":["Allocation"]},{"Key":"word. Allocation","Fragments":["is"]},{"Key":"Allocation is","Fragments":["handled"]},{"Key":"is handled","Fragments":["by"]},{"Key":"handled by","Fragments":["std::string,"]},{"Key":"by std::string,","Fragments":["or"]},{"Key":"std::string, or","Fragments":["more"]},{"Key":"more precisely","Fragments":["the"]},{"Key":"precisely the","Fragments":["string's"]},{"Key":"the string's","Fragments":["allocator."]},{"Key":"string's allocator.","Fragments":["Since"]},{"Key":"allocator. Since","Fragments":["I"]},{"Key":"Since I","Fragments":["don't"]},{"Key":"don't specify","Fragments":["an"]},{"Key":"specify an","Fragments":["allocator,"]},{"Key":"an allocator,","Fragments":["the"]},{"Key":"allocator, the","Fragments":["default"]},{"Key":"default (std::allocator)","Fragments":["is"]},{"Key":"(std::allocator) is","Fragments":["used."]},{"Key":"is used.","Fragments":["The"]},{"Key":"used. The","Fragments":["actual"]},{"Key":"The actual","Fragments":["implementation"]},{"Key":"actual implementation","Fragments":["of"]},{"Key":"of std::allocator","Fragments":["depends"]},{"Key":"std::allocator depends","Fragments":["on"]},{"Key":"your environment,","Fragments":["but"]},{"Key":"environment, but","Fragments":["IIRC"]},{"Key":"but IIRC","Fragments":["the"]},{"Key":"IIRC the","Fragments":["default"]},{"Key":"default implementation","Fragments":["usually"]},{"Key":"implementation usually","Fragments":["reserves"]},{"Key":"usually reserves","Fragments":["some"]},{"Key":"reserves some","Fragments":["initial"]},{"Key":"some initial","Fragments":["memory,"]},{"Key":"initial memory,","Fragments":["and"]},{"Key":"memory, and","Fragments":["when"]},{"Key":"and when","Fragments":["that","they"]},{"Key":"when that","Fragments":["is"]},{"Key":"used up","Fragments":["it"]},{"Key":"up it","Fragments":["doubles"]},{"Key":"it doubles","Fragments":["the"]},{"Key":"doubles the","Fragments":["amount.","space"]},{"Key":"you expect","Fragments":["large"]},{"Key":"expect large","Fragments":["values"]},{"Key":"large values","Fragments":["for"]},{"Key":"values for","Fragments":["word,"]},{"Key":"for word,","Fragments":["instead"]},{"Key":"word, instead","Fragments":["of"]},{"Key":"of copying","Fragments":["the"]},{"Key":"string you","Fragments":["can"]},{"Key":"just tell","Fragments":["the"]},{"Key":"tell the","Fragments":["string"]},{"Key":"to reserve","Fragments":["enough"]},{"Key":"reserve enough","Fragments":["memory"]},{"Key":"enough memory","Fragments":["in"]},{"Key":"memory in","Fragments":["the"]},{"Key":"first place,","Fragments":["using:"]},{"Key":" word.reserve(std::distance(start,","Fragments":["stop));"]},{"Key":"That doesn't","Fragments":["even"]},{"Key":"doesn't even","Fragments":["compile."]},{"Key":"even compile.","Fragments":["I'm"]},{"Key":"compile. I'm","Fragments":["getting"]},{"Key":"I'm getting","Fragments":["`error:"]},{"Key":"getting `error:","Fragments":["unable"]},{"Key":"`error: unable","Fragments":["to"]},{"Key":"unable to","Fragments":["decduce"]},{"Key":"to decduce","Fragments":["'auto'"]},{"Key":"decduce 'auto'","Fragments":["from"]},{"Key":"'auto' from","Fragments":["'\u003cexpression"]},{"Key":"from '\u003cexpression","Fragments":["error\u003e'"]},{"Key":"'\u003cexpression error\u003e'","Fragments":["`"]},{"Key":"error\u003e' `","Fragments":["on"]},{"Key":"` on","Fragments":["both"]},{"Key":"on both","Fragments":["the"]},{"Key":"auto lines,","Fragments":["plus"]},{"Key":"lines, plus","Fragments":["a"]},{"Key":"plus a","Fragments":["plethora"]},{"Key":"a plethora","Fragments":["of"]},{"Key":"plethora of","Fragments":["other"]},{"Key":"wrote a","Fragments":["quick","quick"]},{"Key":"quick test","Fragments":["to","to"]},{"Key":"test to","Fragments":["see","benchmark"]},{"Key":"see how","Fragments":["the","it"]},{"Key":"how the","Fragments":["allocator"]},{"Key":"the allocator","Fragments":["in"]},{"Key":"allocator in","Fragments":["my"]},{"Key":"my environment","Fragments":["behaves,"]},{"Key":"environment behaves,","Fragments":["and"]},{"Key":"behaves, and","Fragments":["it"]},{"Key":"start with","Fragments":["no"]},{"Key":"with no","Fragments":["allocated","real"]},{"Key":"no allocated","Fragments":["space."]},{"Key":"allocated space.","Fragments":["It"]},{"Key":"space. It","Fragments":["allocates"]},{"Key":"It allocates","Fragments":["one"]},{"Key":"allocates one","Fragments":["element"]},{"Key":"one element","Fragments":["on"]},{"Key":"element on","Fragments":["the"]},{"Key":"first inserted","Fragments":["value,"]},{"Key":"inserted value,","Fragments":["and"]},{"Key":"value, and","Fragments":["doubles"]},{"Key":"and doubles","Fragments":["the"]},{"Key":"after that","Fragments":["as"]},{"Key":"that as","Fragments":["I"]},{"Key":" $","Fragments":["cat","make","./capacity","g++","ln","./test"]},{"Key":"$ cat","Fragments":["capacity.cpp"]},{"Key":" #include","Fragments":["\u003cstring\u003e","\u003ciostream\u003e"]},{"Key":"int main(int","Fragments":["argc,"]},{"Key":"main(int argc,","Fragments":["const"]},{"Key":"argc, const","Fragments":["char"]},{"Key":"int last","Fragments":["="]},{"Key":"last =","Fragments":["-1;","capacity;"]},{"Key":"i=0; i\u003c1024;","Fragments":["++i)"]},{"Key":"int capacity","Fragments":["="]},{"Key":"capacity =","Fragments":["s.capacity();"]},{"Key":"if (capacity","Fragments":["!="]},{"Key":"(capacity !=","Fragments":["last)"]},{"Key":"\u003c\u003c i","Fragments":["\u003c\u003c"]},{"Key":"i \u003c\u003c","Fragments":["\":"]},{"Key":"\u003c\u003c \":","Fragments":["\""]},{"Key":"\": \"","Fragments":["\u003c\u003c"]},{"Key":"\" \u003c\u003c","Fragments":["capacity"]},{"Key":"\u003c\u003c capacity","Fragments":["\u003c\u003c"]},{"Key":"capacity \u003c\u003c","Fragments":["std::endl;"]},{"Key":" last","Fragments":["="]},{"Key":"$ make","Fragments":["capacity"]},{"Key":" g++","Fragments":["capacity.cpp"]},{"Key":"g++ capacity.cpp","Fragments":["-o"]},{"Key":"capacity.cpp -o","Fragments":["capacity"]},{"Key":" 0:","Fragments":["0"]},{"Key":" 1:","Fragments":["1"]},{"Key":" 2:","Fragments":["2"]},{"Key":" 3:","Fragments":["4"]},{"Key":" 5:","Fragments":["8"]},{"Key":" 9:","Fragments":["16"]},{"Key":" 17:","Fragments":["32"]},{"Key":" 33:","Fragments":["64"]},{"Key":" 65:","Fragments":["128"]},{"Key":" 129:","Fragments":["256"]},{"Key":" 257:","Fragments":["512"]},{"Key":" 513:","Fragments":["1024"]},{"Key":" @jerrell","Fragments":["Thanks"]},{"Key":"@jerrell Thanks","Fragments":["for"]},{"Key":"advice! That","Fragments":["definitely"]},{"Key":"That definitely","Fragments":["makes"]},{"Key":"definitely makes","Fragments":["this"]},{"Key":"this a","Fragments":["heck"]},{"Key":"a heck","Fragments":["of"]},{"Key":"heck of","Fragments":["a"]},{"Key":"Looks very","Fragments":["good,"]},{"Key":"very good,","Fragments":["your"]},{"Key":"good, your","Fragments":["loop"]},{"Key":"could however","Fragments":["overflow"]},{"Key":"however overflow","Fragments":["since"]},{"Key":"overflow since","Fragments":["int"]},{"Key":"since int","Fragments":["might"]},{"Key":"int might","Fragments":["not"]},{"Key":"might not","Fragments":["be"]},{"Key":"be large","Fragments":["enough"]},{"Key":"large enough","Fragments":["to"]},{"Key":"any strings","Fragments":["length"]},{"Key":"strings length","Fragments":["(which","is","once"]},{"Key":"length (which","Fragments":["is"]},{"Key":"is expressed","Fragments":["as"]},{"Key":"expressed as","Fragments":["size_t)."]},{"Key":"prefer prefix","Fragments":["increment"]},{"Key":"prefix increment","Fragments":["which"]},{"Key":"increment which","Fragments":["is"]},{"Key":"is potentially","Fragments":["faster"]},{"Key":"potentially faster","Fragments":["and"]},{"Key":"faster and","Fragments":["semantically"]},{"Key":"and semantically","Fragments":["more"]},{"Key":"more \"spot","Fragments":["on\"."]},{"Key":"You shouldn't","Fragments":["have."]},{"Key":"shouldn't have.","Fragments":["The"]},{"Key":"have. The","Fragments":["C++"]},{"Key":"The C++","Fragments":["standard"]},{"Key":"C++ standard","Fragments":["library"]},{"Key":"library provides","Fragments":["building"]},{"Key":"provides building","Fragments":["blocks"]},{"Key":"building blocks","Fragments":["which"]},{"Key":"blocks which","Fragments":["allow"]},{"Key":"which allow","Fragments":["to"]},{"Key":"allow to","Fragments":["state"]},{"Key":"to state","Fragments":["your"]},{"Key":"state your","Fragments":["intent"]},{"Key":"your intent","Fragments":["much"]},{"Key":"intent much","Fragments":["more"]},{"Key":"more succinctly.","Fragments":["isAllWhite"]},{"Key":"succinctly. isAllWhite","Fragments":["could"]},{"Key":"isAllWhite could","Fragments":["be"]},{"Key":"easily rewritten","Fragments":["as:"]},{"Key":" std::all_of(str.begin(),","Fragments":["str.end(),"]},{"Key":"std::all_of(str.begin(), str.end(),","Fragments":["isspace);"]},{"Key":" Pass","Fragments":["your","strings"]},{"Key":"Pass your","Fragments":["strings"]},{"Key":"your strings","Fragments":["as"]},{"Key":"references whenever","Fragments":["possible"]},{"Key":"whenever possible","Fragments":["to"]},{"Key":"avoid costly","Fragments":["copies."]},{"Key":"should avoid","Fragments":["the"]},{"Key":"avoid the","Fragments":["function-style"]},{"Key":"the function-style","Fragments":["casts"]},{"Key":"function-style casts","Fragments":["to"]},{"Key":"casts to","Fragments":["int"]},{"Key":"to int","Fragments":["in"]},{"Key":"int in","Fragments":["your"]},{"Key":"loops as","Fragments":["they"]},{"Key":"they may","Fragments":["truncate."]},{"Key":"may truncate.","Fragments":["Declare"]},{"Key":"truncate. Declare","Fragments":["the"]},{"Key":"Declare the","Fragments":["variables"]},{"Key":"as size_t","Fragments":["instead."]},{"Key":"Why are","Fragments":["the","you"]},{"Key":"loop variables","Fragments":["in"]},{"Key":"variables in","Fragments":["each"]},{"Key":"function different?","Fragments":["The"]},{"Key":"different? The","Fragments":["parameter"]},{"Key":"The parameter","Fragments":["names"]},{"Key":"parameter names","Fragments":["are","with"]},{"Key":"are oddly","Fragments":["chosen"]},{"Key":"oddly chosen","Fragments":["and"]},{"Key":"chosen and","Fragments":["different"]},{"Key":"and different","Fragments":["from"]},{"Key":"different from","Fragments":["one"]},{"Key":"from one","Fragments":["another"]},{"Key":"one another","Fragments":["too,"]},{"Key":"another too,","Fragments":["although"]},{"Key":"too, although","Fragments":["that's"]},{"Key":"although that's","Fragments":["by"]},{"Key":"that's by","Fragments":["no"]},{"Key":"by no","Fragments":["means"]},{"Key":"no means","Fragments":["necessary"]},{"Key":"means necessary","Fragments":["since"]},{"Key":"necessary since","Fragments":["each"]},{"Key":"since each","Fragments":["name"]},{"Key":"each name","Fragments":["resides"]},{"Key":"name resides","Fragments":["in"]},{"Key":"resides in","Fragments":["a"]},{"Key":"Also, functions","Fragments":["isAllUpper,"]},{"Key":"functions isAllUpper,","Fragments":["isAllNum"]},{"Key":"isAllUpper, isAllNum","Fragments":["and"]},{"Key":"isAllNum and","Fragments":["isAllWhite"]},{"Key":"and isAllWhite","Fragments":["don't"]},{"Key":"isAllWhite don't","Fragments":["technically"]},{"Key":"don't technically","Fragments":["belong"]},{"Key":"technically belong","Fragments":["to"]},{"Key":"belong to","Fragments":["class"]},{"Key":"to class","Fragments":["bob."]},{"Key":"class bob.","Fragments":["Or"]},{"Key":"bob. Or","Fragments":["at"]},{"Key":"Or at","Fragments":["the"]},{"Key":"very least","Fragments":["they"]},{"Key":"least they","Fragments":["should"]},{"Key":"they should","Fragments":["be"]},{"Key":"Why do","Fragments":["you"]},{"Key":"you define","Fragments":["a"]},{"Key":"define a","Fragments":["class,"]},{"Key":"class, when","Fragments":["all"]},{"Key":"when all","Fragments":["you"]},{"Key":"all you","Fragments":["have","operations.\u003c/li\u003e"]},{"Key":"have are","Fragments":["static"]},{"Key":"are static","Fragments":["functions?"]},{"Key":" Hello","Fragments":["and"]},{"Key":"Hello and","Fragments":["thank"]},{"Key":"and thank","Fragments":["you"]},{"Key":"look to","Fragments":["my","this"]},{"Key":"have created","Fragments":["a"]},{"Key":"created a","Fragments":["constant"]},{"Key":"each response","Fragments":["trying"]},{"Key":"response trying","Fragments":["to"]},{"Key":"avoid \"magic","Fragments":["numbers\""]},{"Key":"\"magic numbers\"","Fragments":["and"]},{"Key":"numbers\" and","Fragments":["a"]},{"Key":"check each","Fragments":["case.","input"]},{"Key":"have decided","Fragments":["to"]},{"Key":"each input","Fragments":["case"]},{"Key":"input case","Fragments":["using"]},{"Key":"case using","Fragments":["regular"]},{"Key":"expressions (regex)","Fragments":["because:"]},{"Key":"run as","Fragments":["fast"]},{"Key":"as fast","Fragments":["as"]},{"Key":"fast as","Fragments":["possible"]},{"Key":"and they","Fragments":["made"]},{"Key":"they made","Fragments":["my"]},{"Key":"made my","Fragments":["life"]},{"Key":"my life","Fragments":["much"]},{"Key":"life much","Fragments":["easier."]},{"Key":"2. I","Fragments":["think"]},{"Key":"think regular","Fragments":["expressions"]},{"Key":"expressions improve","Fragments":["readability"]},{"Key":"readability if","Fragments":["you"]},{"Key":"are familiar","Fragments":["with"]},{"Key":"with them","Fragments":["and"]},{"Key":"when they","Fragments":["are"]},{"Key":"are simple","Fragments":["(like","enough"]},{"Key":"simple (like","Fragments":["these"]},{"Key":"(like these","Fragments":["ones)."]},{"Key":"the \"hey\"","Fragments":["function"]},{"Key":"function I","Fragments":["use","write)."]},{"Key":"an if-elseif-else","Fragments":["implementation"]},{"Key":"if-elseif-else implementation","Fragments":["to"]},{"Key":"implementation to","Fragments":["give"]},{"Key":" to","Fragments":["the"]},{"Key":"the different","Fragments":["input"]},{"Key":"different input","Fragments":["cases."]},{"Key":"input cases.","Fragments":["This"]},{"Key":"cases. This","Fragments":["is,"]},{"Key":"This is,","Fragments":["if"]},{"Key":"is, if","Fragments":["the"]},{"Key":"is yelled","Fragments":["and"]},{"Key":"yelled and","Fragments":["is"]},{"Key":"question as","Fragments":["well,"]},{"Key":"well, bob","Fragments":["replies"]},{"Key":"bob replies","Fragments":["as"]},{"Key":"replies as","Fragments":["if"]},{"Key":"if he","Fragments":["was"]},{"Key":"he was","Fragments":["being"]},{"Key":"was being","Fragments":["yelle"]},{"Key":"being yelle","Fragments":["even"]},{"Key":"yelle even","Fragments":["when"]},{"Key":"even when","Fragments":["it"]},{"Key":"when it","Fragments":["is"]},{"Key":" Hope","Fragments":["this"]},{"Key":"Hope this","Fragments":["makes"]},{"Key":"this makes","Fragments":["sense."]},{"Key":"the tips,","Fragments":["I","especially"]},{"Key":"tips, I","Fragments":["didn't"]},{"Key":"the break","Fragments":["thing"]},{"Key":"break thing","Fragments":["or"]},{"Key":"thing or","Fragments":["the"]},{"Key":"new fangled","Fragments":["looping."]},{"Key":"the pass","Fragments":["by"]},{"Key":"by reference/copy","Fragments":["it"]},{"Key":"reference/copy it","Fragments":["seems"]},{"Key":"doesn't matter","Fragments":["too","for"]},{"Key":"matter too","Fragments":["much"]},{"Key":"too much","Fragments":["either","for"]},{"Key":"much either","Fragments":["way."]},{"Key":"either way.","Fragments":["But"]},{"Key":"way. But","Fragments":["I"]},{"Key":"making it","Fragments":["a"]},{"Key":"const. Thanks","Fragments":["again."]},{"Key":"wouldn't have","Fragments":["used"]},{"Key":"regex since","Fragments":["the"]},{"Key":"for yelling/question/silence","Fragments":["are"]},{"Key":"yelling/question/silence are","Fragments":["simple"]},{"Key":"simple enough","Fragments":["to"]},{"Key":"implemented with","Fragments":["\\\u003calgorithm\\\u003e."]},{"Key":"with \\\u003calgorithm\\\u003e.","Fragments":["[Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)'s"]},{"Key":"\\\u003calgorithm\\\u003e. [Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)'s","Fragments":["my"]},{"Key":"[Here](http://exercism.io/submissions/da0cce1b370149cfbe5b4ea1)'s my","Fragments":["take"]},{"Key":"my take","Fragments":["on"]},{"Key":"exercise to","Fragments":["show"]},{"Key":"to show","Fragments":["what"]},{"Key":"show what","Fragments":["I"]},{"Key":"string constants","Fragments":["(instead","is"]},{"Key":"constants (instead","Fragments":["of"]},{"Key":"(instead of","Fragments":["\"magic"]},{"Key":"of \"magic","Fragments":["strings\")"]},{"Key":"\"magic strings\")","Fragments":["is"]},{"Key":"strings\") is","Fragments":["a"]},{"Key":"bit icky.","Fragments":["Since"]},{"Key":"icky. Since","Fragments":["they"]},{"Key":"Since they","Fragments":["are"]},{"Key":"header file,","Fragments":["these"]},{"Key":"file, these","Fragments":["constants"]},{"Key":"constants spill","Fragments":["out"]},{"Key":"spill out","Fragments":["into"]},{"Key":"into other","Fragments":["files"]},{"Key":"other files","Fragments":["where"]},{"Key":"files where","Fragments":["they"]},{"Key":"don't belong.","Fragments":["Also,"]},{"Key":"belong. Also,","Fragments":["they're"]},{"Key":"Also, they're","Fragments":["global"]},{"Key":"they're global","Fragments":["objects"]},{"Key":"global objects","Fragments":["and","into","isn't"]},{"Key":"objects and","Fragments":["not"]},{"Key":"not native","Fragments":["data"]},{"Key":"native data","Fragments":["types."]},{"Key":"data types.","Fragments":["So"]},{"Key":"types. So","Fragments":["that"]},{"Key":"So that","Fragments":["brings","doesn't"]},{"Key":"that brings","Fragments":["initialization"]},{"Key":"brings initialization","Fragments":["order"]},{"Key":"initialization order","Fragments":["of"]},{"Key":"of global","Fragments":["objects"]},{"Key":"objects into","Fragments":["play."]},{"Key":" Other","Fragments":["than","then"]},{"Key":"Other than","Fragments":["that,"]},{"Key":"than that,","Fragments":["I"]},{"Key":"that, I","Fragments":["like","think"]},{"Key":"of static","Fragments":["locals"]},{"Key":"static locals","Fragments":["to"]},{"Key":"locals to","Fragments":["contain"]},{"Key":"to contain","Fragments":["the","the"]},{"Key":"contain the","Fragments":["regexes","entire"]},{"Key":"the regexes","Fragments":["in"]},{"Key":"regexes in","Fragments":["their"]},{"Key":"in their","Fragments":["function"]},{"Key":"their function","Fragments":["scope"]},{"Key":"function scope","Fragments":["as"]},{"Key":"scope as","Fragments":["well"]},{"Key":"const correctness","Fragments":["everywhere."]},{"Key":" Hello,","Fragments":["Nice"]},{"Key":"Hello, Nice","Fragments":["code!"]},{"Key":"used regex","Fragments":["for"]},{"Key":"each case.","Fragments":["Your"]},{"Key":"case. Your","Fragments":["code"]},{"Key":"be much","Fragments":["smaller"]},{"Key":"much smaller","Fragments":["and"]},{"Key":"readable. Besides","Fragments":["that,"]},{"Key":"Besides that,","Fragments":["I"]},{"Key":"return variable","Fragments":["(ret)."]},{"Key":"variable (ret).","Fragments":["You"]},{"Key":"(ret). You","Fragments":["could"]},{"Key":"return whatever","Fragments":["you"]},{"Key":"whatever you","Fragments":["want"]},{"Key":"want in","Fragments":["those"]},{"Key":"in those","Fragments":["places"]},{"Key":"those places","Fragments":["you"]},{"Key":"places you","Fragments":["set"]},{"Key":"set that","Fragments":["variable."]},{"Key":"edit: Oh!","Fragments":["and"]},{"Key":"Oh! and","Fragments":["you"]},{"Key":"you import","Fragments":["iostream"]},{"Key":"import iostream","Fragments":["but"]},{"Key":"iostream but","Fragments":["I"]},{"Key":"never use","Fragments":["it!"]},{"Key":"I'm sorry","Fragments":["but"]},{"Key":"sorry but","Fragments":["I"]},{"Key":"doesn't do","Fragments":["what"]},{"Key":"is suppose","Fragments":["to."]},{"Key":"suppose to.","Fragments":["You"]},{"Key":"to. You","Fragments":["should"]},{"Key":"have coded","Fragments":["something"]},{"Key":"coded something","Fragments":["to"]},{"Key":"to \"figure","Fragments":["out\""]},{"Key":"\"figure out\"","Fragments":["the"]},{"Key":"out\" the","Fragments":["correct"]},{"Key":"response rather","Fragments":["than"]},{"Key":"than checking","Fragments":["for"]},{"Key":"each test","Fragments":["case..."]},{"Key":" You've","Fragments":["named"]},{"Key":"You've named","Fragments":["your"]},{"Key":"named your","Fragments":["parameter"]},{"Key":"your parameter","Fragments":["names"]},{"Key":"names with","Fragments":["this"]},{"Key":"particular exercise","Fragments":["in"]},{"Key":"in mind.","Fragments":["The"]},{"Key":"mind. The","Fragments":["hamming"]},{"Key":"The hamming","Fragments":["distance"]},{"Key":"hamming distance","Fragments":["is"]},{"Key":"distance is","Fragments":["a"]},{"Key":"a universal","Fragments":["concept"]},{"Key":"universal concept","Fragments":["for"]},{"Key":"concept for","Fragments":["sequences"]},{"Key":"for sequences","Fragments":["though,"]},{"Key":"sequences though,","Fragments":["so"]},{"Key":"though, so","Fragments":["you"]},{"Key":"you may","Fragments":["want","consider","want"]},{"Key":"prefer a","Fragments":["generic"]},{"Key":"Use std::min","Fragments":["in"]},{"Key":"std::min in","Fragments":["line"]},{"Key":"line 8","Fragments":["and"]},{"Key":"8 and","Fragments":["use"]},{"Key":"use prefix-increment","Fragments":["when"]},{"Key":"prefix-increment when","Fragments":["you"]},{"Key":"don't mean","Fragments":["postfix-increment."]},{"Key":"A strings","Fragments":["length"]},{"Key":"length is","Fragments":["defined"]},{"Key":"as size_t,","Fragments":["which"]},{"Key":"size_t, which","Fragments":["may"]},{"Key":"which may","Fragments":["differ"]},{"Key":"may differ","Fragments":["in"]},{"Key":"differ in","Fragments":["size"]},{"Key":"in size","Fragments":["from"]},{"Key":"size from","Fragments":["int."]},{"Key":"from int.","Fragments":["Could"]},{"Key":"int. Could","Fragments":["this"]},{"Key":"Could this","Fragments":["lead"]},{"Key":"this lead","Fragments":["to"]},{"Key":"to problems","Fragments":["in"]},{"Key":"problems in","Fragments":["your"]},{"Key":" `returnValue[wordBuffer]`","Fragments":["returns"]},{"Key":"`returnValue[wordBuffer]` returns","Fragments":["an"]},{"Key":"an `int`,","Fragments":["however."]},{"Key":"`int`, however.","Fragments":["You've"]},{"Key":"however. You've","Fragments":["used"]},{"Key":"You've used","Fragments":["it"]},{"Key":"it correctly","Fragments":["in"]},{"Key":"correctly in","Fragments":["other"]},{"Key":"other places:","Fragments":["`returnValue[wordBuffer]"]},{"Key":"places: `returnValue[wordBuffer]","Fragments":["="]},{"Key":"`returnValue[wordBuffer] =","Fragments":["1`."]},{"Key":"The entries","Fragments":["of"]},{"Key":"entries of","Fragments":["the"]},{"Key":"map are","Fragments":["a"]},{"Key":"a (string,","Fragments":["int)"]},{"Key":"(string, int)","Fragments":["pair."]},{"Key":"int) pair.","Fragments":["`returnValue[\u003cstring\u003e]"]},{"Key":"pair. `returnValue[\u003cstring\u003e]","Fragments":["="]},{"Key":"`returnValue[\u003cstring\u003e] =","Fragments":["\u003cint\u003e`."]},{"Key":"= \u003cint\u003e`.","Fragments":["So"]},{"Key":"\u003cint\u003e`. So","Fragments":["using"]},{"Key":"So using","Fragments":["the"]},{"Key":"`'\\0'` is","Fragments":["incorrect"]},{"Key":"is incorrect","Fragments":["here."]},{"Key":"incorrect here.","Fragments":["It"]},{"Key":"It only","Fragments":["works"]},{"Key":"only works","Fragments":["because"]},{"Key":"works because","Fragments":["C++"]},{"Key":"because C++","Fragments":["implicitely"]},{"Key":"C++ implicitely","Fragments":["converts"]},{"Key":"implicitely converts","Fragments":["the"]},{"Key":"converts the","Fragments":["char"]},{"Key":"the char","Fragments":["`'\\0'`"]},{"Key":"char `'\\0'`","Fragments":["into"]},{"Key":"`'\\0'` into","Fragments":["an"]},{"Key":"an int","Fragments":["(0)."]},{"Key":"fact, you","Fragments":["could"]},{"Key":"could leave","Fragments":["away"]},{"Key":"leave away","Fragments":["the"]},{"Key":"away the","Fragments":["entire"]},{"Key":"entire if-statement","Fragments":["with"]},{"Key":"if-statement with","Fragments":["the"]},{"Key":"the `returnValue[wordBuffer]++;`","Fragments":["and"]},{"Key":"`returnValue[wordBuffer]++;` and","Fragments":["it"]},{"Key":"work just","Fragments":["fabulous"]},{"Key":"just fabulous","Fragments":[":)"]},{"Key":"fabulous :)","Fragments":["The"]},{"Key":"The []","Fragments":["operator"]},{"Key":"[] operator","Fragments":["automatically"]},{"Key":"operator automatically","Fragments":["inserts"]},{"Key":"automatically inserts","Fragments":["a"]},{"Key":"inserts a","Fragments":["new","new"]},{"Key":"new (string,int)","Fragments":["pair"]},{"Key":"(string,int) pair","Fragments":["into"]},{"Key":"pair into","Fragments":["the"]},{"Key":"map if","Fragments":["it"]},{"Key":"isn't there","Fragments":["already."]},{"Key":"there already.","Fragments":["It's"]},{"Key":"already. It's","Fragments":["part"]},{"Key":"It's part","Fragments":["of"]},{"Key":"the [standard](http://www.cplusplus.com/reference/map/map/operator%5B%5D/)","Fragments":["saying"]},{"Key":"\u003e If","Fragments":["k"]},{"Key":"If k","Fragments":["does"]},{"Key":"k does","Fragments":["not"]},{"Key":"not match","Fragments":["the"]},{"Key":"match the","Fragments":["key"]},{"Key":"key of","Fragments":["any"]},{"Key":"of any","Fragments":["element"]},{"Key":"any element","Fragments":["in"]},{"Key":"element in","Fragments":["the"]},{"Key":"function inserts","Fragments":["a"]},{"Key":"new element","Fragments":["with"]},{"Key":"element with","Fragments":["that"]},{"Key":"that key","Fragments":["and"]},{"Key":"its mapped","Fragments":["value."]},{"Key":" `find_if`","Fragments":["is"]},{"Key":"`find_if` is","Fragments":["one"]},{"Key":"ways you","Fragments":["could"]},{"Key":"could solve","Fragments":["the"]},{"Key":"looking for","Fragments":["the"]},{"Key":"of words.","Fragments":["I'm"]},{"Key":"words. I'm","Fragments":["not"]},{"Key":"how familiar","Fragments":["you"]},{"Key":"familiar you","Fragments":["are"]},{"Key":"are with","Fragments":["C++'s"]},{"Key":"with C++'s","Fragments":["iterators"]},{"Key":"C++'s iterators","Fragments":["and"]},{"Key":"and algorithm","Fragments":["functions,"]},{"Key":"algorithm functions,","Fragments":["so"]},{"Key":"functions, so","Fragments":["I'll"]},{"Key":"so I'll","Fragments":["just"]},{"Key":"I'll just","Fragments":["paste"]},{"Key":"just paste","Fragments":["the"]},{"Key":"the crux","Fragments":["of"]},{"Key":"crux of","Fragments":["how"]},{"Key":"I solved","Fragments":["it:"]},{"Key":"auto curr","Fragments":["="]},{"Key":"curr =","Fragments":["input.begin();","wordEnd;"]},{"Key":"= input.begin();","Fragments":["//curr"]},{"Key":"input.begin(); //curr","Fragments":["points"]},{"Key":"//curr points","Fragments":["to"]},{"Key":"points to","Fragments":["start","end(),"]},{"Key":"start of","Fragments":["string"]},{"Key":" //iterate","Fragments":["through"]},{"Key":"//iterate through","Fragments":["the"]},{"Key":" while(","Fragments":["curr"]},{"Key":"while( curr","Fragments":["!="]},{"Key":"curr !=","Fragments":["input.end()"]},{"Key":"!= input.end()","Fragments":["){"]},{"Key":" //find","Fragments":["beginning"]},{"Key":"//find beginning","Fragments":["of"]},{"Key":"beginning of","Fragments":["alphanumerical","those"]},{"Key":"of alphanumerical","Fragments":["sequence"]},{"Key":"auto wordStart","Fragments":["="]},{"Key":"wordStart =","Fragments":["std::find_if("]},{"Key":"= std::find_if(","Fragments":["curr,"]},{"Key":"std::find_if( curr,","Fragments":["input.end(),"]},{"Key":"curr, input.end(),","Fragments":["isalnum"]},{"Key":"input.end(), isalnum","Fragments":[");",");"]},{"Key":" //from","Fragments":["there,"]},{"Key":"//from there,","Fragments":["find"]},{"Key":"there, find","Fragments":["end"]},{"Key":"find end","Fragments":["of"]},{"Key":"of said","Fragments":["sequence"]},{"Key":"auto wordEnd","Fragments":["="]},{"Key":"wordEnd =","Fragments":["std::find_if_not("]},{"Key":"= std::find_if_not(","Fragments":["wordStart,"]},{"Key":"std::find_if_not( wordStart,","Fragments":["input.end(),"]},{"Key":"wordStart, input.end(),","Fragments":["isalnum"]},{"Key":" //This","Fragments":["is"]},{"Key":"//This is","Fragments":["the"]},{"Key":"std::string word","Fragments":["="]},{"Key":"= std::string(","Fragments":["wordStart,"]},{"Key":"std::string( wordStart,","Fragments":["wordEnd"]},{"Key":"wordStart, wordEnd","Fragments":[");"]},{"Key":" //increment","Fragments":["word"]},{"Key":"//increment word","Fragments":["count."]},{"Key":"word count.","Fragments":["If"]},{"Key":"count. If","Fragments":["word"]},{"Key":"If word","Fragments":["not"]},{"Key":"word not","Fragments":["in"]},{"Key":"in map,","Fragments":["it'll"]},{"Key":"map, it'll","Fragments":["be"]},{"Key":"it'll be","Fragments":["added","invisible"]},{"Key":"be added","Fragments":["automatically"]},{"Key":" //we've","Fragments":["read"]},{"Key":"//we've read","Fragments":["the"]},{"Key":"string until","Fragments":["wordEnd,"]},{"Key":"until wordEnd,","Fragments":["so"]},{"Key":"wordEnd, so","Fragments":["that's"]},{"Key":"so that's","Fragments":["where"]},{"Key":"that's where","Fragments":["we"]},{"Key":"where we","Fragments":["start"]},{"Key":"we start","Fragments":["to"]},{"Key":" //for","Fragments":["the"]},{"Key":"//for the","Fragments":["next"]},{"Key":" curr","Fragments":["="]},{"Key":"can find","Fragments":["the"]},{"Key":"full source","Fragments":["[here](http://exercism.io/submissions/be42f7cc0bfb132a4aa72458)."]},{"Key":"guess you're","Fragments":["right"]},{"Key":"the underscore","Fragments":["in"]},{"Key":"underscore in","Fragments":["the"]},{"Key":"know of","Fragments":["the"]},{"Key":"the C++","Fragments":["wrappers"]},{"Key":"C++ wrappers","Fragments":["but"]},{"Key":"wrappers but","Fragments":["I"]},{"Key":"really understand","Fragments":["why"]},{"Key":"understand why","Fragments":["I"]},{"Key":"should use","Fragments":["them."]},{"Key":"use them.","Fragments":["The"]},{"Key":"them. The","Fragments":["\".h\""]},{"Key":"The \".h\"","Fragments":["extension"]},{"Key":"\".h\" extension","Fragments":["expresses"]},{"Key":"extension expresses","Fragments":["the"]},{"Key":"expresses the","Fragments":["fact"]},{"Key":"that it's","Fragments":["a"]},{"Key":"C header","Fragments":["more"]},{"Key":"header more","Fragments":["clearly"]},{"Key":" Because","Fragments":["`i`"]},{"Key":"Because `i`","Fragments":["and"]},{"Key":"and `length`","Fragments":["are"]},{"Key":"`length` are","Fragments":["both"]},{"Key":"are both","Fragments":["integers,"]},{"Key":"both integers,","Fragments":["the"]},{"Key":"integers, the","Fragments":["postfix-increment"]},{"Key":"the postfix-increment","Fragments":["is"]},{"Key":"postfix-increment is","Fragments":["going"]},{"Key":"optimized out.","Fragments":["I'm"]},{"Key":"out. I'm","Fragments":["not"]},{"Key":"same holds","Fragments":["for"]},{"Key":"holds for","Fragments":["classes"]},{"Key":"for classes","Fragments":["where"]},{"Key":"classes where","Fragments":["the"]},{"Key":"the operators","Fragments":["have"]},{"Key":"operators have","Fragments":["been"]},{"Key":"been explicitly","Fragments":["defined"]},{"Key":"explicitly defined","Fragments":["(e.g."]},{"Key":"defined (e.g.","Fragments":["iterators)."]},{"Key":"(e.g. iterators).","Fragments":["Usually"]},{"Key":"iterators). Usually","Fragments":["I"]},{"Key":"Usually I","Fragments":["use","try"]},{"Key":"use prefix-increments","Fragments":["on"]},{"Key":"prefix-increments on","Fragments":["them"]},{"Key":"on them","Fragments":["just"]},{"Key":"them just","Fragments":["to"]},{"Key":"just to","Fragments":["be"]},{"Key":" @kaley","Fragments":["Thank"]},{"Key":"@kaley Thank","Fragments":["you!"]},{"Key":"Thank you!","Fragments":["I"]},{"Key":"you! I","Fragments":["personally"]},{"Key":"personally think","Fragments":["your"]},{"Key":"implementation with","Fragments":["\u003calgorithms\u003e"]},{"Key":"with \u003calgorithms\u003e","Fragments":["is"]},{"Key":"\u003calgorithms\u003e is","Fragments":["better"]},{"Key":"better and","Fragments":["by"]},{"Key":"using regex","Fragments":["I'm","libraries,"]},{"Key":"regex I'm","Fragments":["using"]},{"Key":"a sledgehammer","Fragments":["to"]},{"Key":"sledgehammer to","Fragments":["crack"]},{"Key":"to crack","Fragments":["a"]},{"Key":"crack a","Fragments":["nut."]},{"Key":"a nut.","Fragments":["I"]},{"Key":"nut. I","Fragments":["think"]},{"Key":"think I'll","Fragments":["use"]},{"Key":"I'll use","Fragments":["that"]},{"Key":"library in","Fragments":["my"]},{"Key":"my second","Fragments":["iteration."]},{"Key":"However I","Fragments":["wonder"]},{"Key":"constants is","Fragments":["a"]},{"Key":"good habit.","Fragments":["Imagine"]},{"Key":"habit. Imagine","Fragments":["I"]},{"Key":"Imagine I","Fragments":["want"]},{"Key":"check Bob's","Fragments":["response"]},{"Key":"response from","Fragments":["other"]},{"Key":"other part","Fragments":["of"]},{"Key":"my project,","Fragments":["I"]},{"Key":"project, I","Fragments":["expand"]},{"Key":"I expand","Fragments":["my"]},{"Key":"expand my","Fragments":["code"]},{"Key":"same string","Fragments":["from"]},{"Key":"string from","Fragments":["different","matches"]},{"Key":"from different","Fragments":["places"]},{"Key":"different places","Fragments":["(not"]},{"Key":"places (not","Fragments":["very"]},{"Key":"(not very","Fragments":["likely"]},{"Key":"very likely","Fragments":["for"]},{"Key":"likely for","Fragments":["this"]},{"Key":"this example)","Fragments":["and"]},{"Key":"example) and","Fragments":["his"]},{"Key":"and his","Fragments":["response"]},{"Key":"his response","Fragments":["changes"]},{"Key":"response changes","Fragments":["for"]},{"Key":"changes for","Fragments":["whatever"]},{"Key":"for whatever","Fragments":["reason..."]},{"Key":"whatever reason...","Fragments":["I"]},{"Key":"reason... I","Fragments":["would"]},{"Key":"change those","Fragments":["strings"]},{"Key":"strings manually","Fragments":["one"]},{"Key":"manually one","Fragments":["by"]},{"Key":"one by","Fragments":["one"]},{"Key":"one instead","Fragments":["of"]},{"Key":"of just","Fragments":["changing","coding"]},{"Key":"just changing","Fragments":["my"]},{"Key":"changing my","Fragments":["constant"]},{"Key":"my constant","Fragments":["."]},{"Key":"However I'll","Fragments":["try"]},{"Key":"I'll try","Fragments":["to"]},{"Key":"get more","Fragments":["feedback"]},{"Key":"more feedback","Fragments":["about"]},{"Key":"feedback about","Fragments":["this"]},{"Key":"and see","Fragments":["if"]},{"Key":"if am","Fragments":["doing"]},{"Key":"am doing","Fragments":["the","(this"]},{"Key":"doing the","Fragments":["right"]},{"Key":"tips, especially","Fragments":["about"]},{"Key":"especially about","Fragments":["a"]},{"Key":"better strategy","Fragments":["for"]},{"Key":"strategy for","Fragments":["parsing"]},{"Key":"for parsing","Fragments":["the"]},{"Key":"parsing the","Fragments":["string."]},{"Key":" No","Fragments":["particular"]},{"Key":"No particular","Fragments":["reason."]},{"Key":"particular reason.","Fragments":["I"]},{"Key":"reason. I","Fragments":["could"]},{"Key":"was dumb","Fragments":["to"]},{"Key":"dumb to","Fragments":["declare"]},{"Key":"declare a","Fragments":["namespace","(non-class)"]},{"Key":"for just","Fragments":["one"]},{"Key":"just one","Fragments":["public"]},{"Key":"one public","Fragments":["function."]},{"Key":"Also, making","Fragments":["the"]},{"Key":"like `isQuestion`","Fragments":["private"]},{"Key":"`isQuestion` private","Fragments":["and"]},{"Key":"private and","Fragments":["thus"]},{"Key":"thus inaccessible","Fragments":["from"]},{"Key":"inaccessible from","Fragments":["outside"]},{"Key":"from outside","Fragments":["is"]},{"Key":"outside is","Fragments":["easier"]},{"Key":"is easier","Fragments":["than"]},{"Key":"easier than","Fragments":["having"]},{"Key":"put them","Fragments":["in"]},{"Key":"another unnamed","Fragments":["namespace."]},{"Key":"included the","Fragments":["relevant"]},{"Key":"relevant header","Fragments":["files"]},{"Key":"header files","Fragments":["(mostly"]},{"Key":"files (mostly","Fragments":["\\\u003calgorithm?\u003e)?"]},{"Key":" [Here's](http://ideone.com/St5txW)","Fragments":["the"]},{"Key":"[Here's](http://ideone.com/St5txW) the","Fragments":["code"]},{"Key":"an onlinecompiler","Fragments":["and"]},{"Key":"onlinecompiler and","Fragments":["compiles"]},{"Key":"and compiles","Fragments":["without"]},{"Key":"compiles without","Fragments":["errors."]},{"Key":"without errors.","Fragments":["So"]},{"Key":"errors. So","Fragments":["it"]},{"Key":"So it","Fragments":["is"]},{"Key":"is valid","Fragments":["C++11"]},{"Key":"valid C++11","Fragments":["code."]},{"Key":"Yea, I'm","Fragments":["a"]},{"Key":"bit torn","Fragments":["about"]},{"Key":"torn about","Fragments":["the"]},{"Key":"strings. One","Fragments":["the"]},{"Key":"One the","Fragments":["one"]},{"Key":"the one","Fragments":["hand,","of"]},{"Key":"one hand,","Fragments":["having"]},{"Key":"hand, having","Fragments":["a"]},{"Key":"a global","Fragments":["constant"]},{"Key":"global constant","Fragments":["is"]},{"Key":"constant is","Fragments":["nice."]},{"Key":"is nice.","Fragments":["On"]},{"Key":"nice. On","Fragments":["the"]},{"Key":"the other,","Fragments":["having"]},{"Key":"other, having","Fragments":["global"]},{"Key":"having global","Fragments":["objects"]},{"Key":"objects isn't","Fragments":["so"]},{"Key":"isn't so","Fragments":["nice."]},{"Key":"One option","Fragments":["would"]},{"Key":"option would","Fragments":["be"]},{"Key":"to store","Fragments":["the","the","the"]},{"Key":"store the","Fragments":["strings","number","responses"]},{"Key":"as global","Fragments":["`const"]},{"Key":"global `const","Fragments":["char*`"]},{"Key":"char*` variables,","Fragments":["but"]},{"Key":"variables, but","Fragments":["that"]},{"Key":"of sucks","Fragments":["too."]},{"Key":"If Bob's","Fragments":["responses"]},{"Key":"Bob's responses","Fragments":["would"]},{"Key":"responses would","Fragments":["be"]},{"Key":"be checked","Fragments":["by"]},{"Key":"checked by","Fragments":["another"]},{"Key":"by another","Fragments":["part"]},{"Key":"another part","Fragments":["of"]},{"Key":"the program,","Fragments":["I'd"]},{"Key":"program, I'd","Fragments":["most"]},{"Key":"I'd most","Fragments":["likely"]},{"Key":"most likely","Fragments":["use"]},{"Key":"likely use","Fragments":["an"]},{"Key":"return it.","Fragments":["No"]},{"Key":"it. No","Fragments":["need"]},{"Key":"return actual","Fragments":["strings"]},{"Key":"actual strings","Fragments":["in"]},{"Key":"strings in","Fragments":["this"]},{"Key":" Usually","Fragments":["I"]},{"Key":"find an","Fragments":["alternative"]},{"Key":"an alternative","Fragments":["as"]},{"Key":"alternative as","Fragments":["soon"]},{"Key":"as soon","Fragments":["as"]},{"Key":"soon as","Fragments":["my"]},{"Key":"my \"magic","Fragments":["number\""]},{"Key":"\"magic number\"","Fragments":["appears"]},{"Key":"number\" appears","Fragments":["more"]},{"Key":"appears more","Fragments":["than"]},{"Key":"than once","Fragments":["in"]},{"Key":"once in","Fragments":["my"]},{"Key":"my program.","Fragments":["Before"]},{"Key":"program. Before","Fragments":["that,"]},{"Key":"Before that,","Fragments":["I'm"]},{"Key":"that, I'm","Fragments":["not"]},{"Key":"about factoring","Fragments":["it"]},{"Key":"factoring it","Fragments":["out."]},{"Key":"But that's","Fragments":["my"]},{"Key":"that's my","Fragments":["personal"]},{"Key":"my personal","Fragments":["take"]},{"Key":"personal take","Fragments":["on"]},{"Key":"the subject","Fragments":["and"]},{"Key":"subject and","Fragments":["I"]},{"Key":"to present","Fragments":["it"]},{"Key":"present it","Fragments":["as"]},{"Key":"a \"best","Fragments":["practice\""]},{"Key":"\"best practice\"","Fragments":["kind"]},{"Key":"practice\" kind","Fragments":["of"]},{"Key":"Thanks, it","Fragments":["works"]},{"Key":"it works","Fragments":["now."]},{"Key":" uses","Fragments":["a"]},{"Key":"uses a","Fragments":["single"]},{"Key":"single pass","Fragments":["through"]},{"Key":"pass through","Fragments":["the"]},{"Key":" by","Fragments":["stepping"]},{"Key":"by stepping","Fragments":["backwards"]},{"Key":"stepping backwards","Fragments":["through"]},{"Key":"backwards through","Fragments":["string,"]},{"Key":"through string,","Fragments":["i"]},{"Key":"string, i","Fragments":["know"]},{"Key":"i know","Fragments":["from"]},{"Key":"know from","Fragments":["from"]},{"Key":"from from","Fragments":["first"]},{"Key":"from first","Fragments":["character"]},{"Key":"character whether","Fragments":["it"]},{"Key":"whether it","Fragments":["is"]},{"Key":"be short","Fragments":["circuited"]},{"Key":"short circuited","Fragments":["if"]},{"Key":"circuited if","Fragments":["a"]},{"Key":"case character","Fragments":["is"]},{"Key":" maybe","Fragments":["characters"]},{"Key":"maybe characters","Fragments":["like"]},{"Key":"like '###$!!\"","Fragments":["should"]},{"Key":"'###$!!\" should","Fragments":["be"]},{"Key":"be treated","Fragments":["as"]},{"Key":" currently","Fragments":["anything"]},{"Key":"currently anything","Fragments":["not"]},{"Key":"anything not","Fragments":["whitespace"]},{"Key":"not whitespace","Fragments":["and"]},{"Key":"not alpha","Fragments":["is"]},{"Key":"alpha is","Fragments":["treated"]},{"Key":"as speech,","Fragments":["but"]},{"Key":"speech, but","Fragments":["neither"]},{"Key":"but neither","Fragments":["quiet"]},{"Key":"neither quiet","Fragments":["nor"]},{"Key":"quiet nor","Fragments":["shouting"]},{"Key":"C++ has","Fragments":["a","a","pretty"]},{"Key":"a min","Fragments":["function"]},{"Key":"min function","Fragments":["that"]},{"Key":"shorter of","Fragments":["two"]},{"Key":"two values.","Fragments":["You"]},{"Key":"values. You","Fragments":["could"]},{"Key":"at around","Fragments":["line"]},{"Key":"around line","Fragments":["10"]},{"Key":"line 10","Fragments":["to"]},{"Key":"10 to","Fragments":["shorten"]},{"Key":"to shorten","Fragments":["things","or"]},{"Key":"shorten things","Fragments":["a"]},{"Key":"things a","Fragments":["bit."]},{"Key":" have","Fragments":["decided,"]},{"Key":"have decided,","Fragments":["i'm"]},{"Key":"decided, i'm","Fragments":["going"]},{"Key":"i'm going","Fragments":["to"]},{"Key":"to re-write","Fragments":["this"]},{"Key":"re-write this","Fragments":["using"]},{"Key":"using string.pop_back()","Fragments":["instead"]},{"Key":"an if-break","Fragments":["inside"]},{"Key":"if-break inside","Fragments":["the"]},{"Key":"loop, just","Fragments":["make"]},{"Key":"just make","Fragments":["your"]},{"Key":"loop conditional","Fragments":["an"]},{"Key":"conditional an","Fragments":["\"and\""]},{"Key":"an \"and\"","Fragments":["conditional."]},{"Key":"for (size_t","Fragments":["i"]},{"Key":"(size_t i","Fragments":["="]},{"Key":"\u003c str1.length()","Fragments":["\u0026\u0026"]},{"Key":"str1.length() \u0026\u0026","Fragments":["str2Length"]},{"Key":"\u0026\u0026 str2Length","Fragments":["\u003c"]},{"Key":"str2Length \u003c","Fragments":["i;"]},{"Key":"\u003c i;","Fragments":["++i)"]},{"Key":"a tolower(char)","Fragments":["function."]},{"Key":"tolower(char) function.","Fragments":["Which"]},{"Key":"function. Which","Fragments":["would"]},{"Key":"Which would","Fragments":["make"]},{"Key":"your LowerCase","Fragments":["function"]},{"Key":"LowerCase function","Fragments":["a"]},{"Key":"function a","Fragments":["little","member"]},{"Key":" Seriously","Fragments":["how"]},{"Key":"Seriously how","Fragments":["does"]},{"Key":"how does","Fragments":["c++"]},{"Key":"does c++","Fragments":["not"]},{"Key":"c++ not","Fragments":["already"]},{"Key":"not already","Fragments":["have"]},{"Key":"already have","Fragments":["a"]},{"Key":"that lowercases","Fragments":["a"]},{"Key":"lowercases a","Fragments":["string?"]},{"Key":"Hey @guido,","Fragments":["First"]},{"Key":"@guido, First","Fragments":["off"]},{"Key":"First off","Fragments":["I"]},{"Key":"off I","Fragments":["love"]},{"Key":"the OOP","Fragments":["design"]},{"Key":"OOP design","Fragments":["and"]},{"Key":"design and","Fragments":["I"]},{"Key":"you process","Fragments":["the"]},{"Key":"process the","Fragments":["strings"]},{"Key":"really efficient","Fragments":["and"]},{"Key":"efficient and","Fragments":["clever."]},{"Key":" *One","Fragments":["thing"]},{"Key":"*One thing","Fragments":["I"]},{"Key":"done differently,","Fragments":["that"]},{"Key":"differently, that","Fragments":["you"]},{"Key":"may consider","Fragments":["is...*"]},{"Key":" \u003cul\u003e\u003cli\u003e","Fragments":["Use","`const"]},{"Key":"\u003cul\u003e\u003cli\u003e Use","Fragments":["`const"]},{"Key":"`const std::string\u0026`","Fragments":["for"]},{"Key":"std::string\u0026` for","Fragments":["the"]},{"Key":"and parameter","Fragments":["of"]},{"Key":"parameter of","Fragments":["`bob::hey`"]},{"Key":" Did","Fragments":["this","this","a"]},{"Key":"Did this","Fragments":["pass","pass"]},{"Key":"this pass","Fragments":["all","all"]},{"Key":"the tests?","Fragments":["I","I"]},{"Key":"I though","Fragments":["if"]},{"Key":"though if","Fragments":["the"]},{"Key":"strings weren't","Fragments":["equal"]},{"Key":"weren't equal","Fragments":["length"]},{"Key":"equal length","Fragments":["then"]},{"Key":"length then","Fragments":["it","it"]},{"Key":"was supposed","Fragments":["to","to"]},{"Key":"to ignore","Fragments":["extra","the"]},{"Key":"ignore extra","Fragments":["chars."]},{"Key":"extra chars.","Fragments":["Not","Not"]},{"Key":"chars. Not","Fragments":["just","just"]},{"Key":"Not just","Fragments":["return","return"]},{"Key":"thought if","Fragments":["the"]},{"Key":"strings were","Fragments":["of"]},{"Key":"were of","Fragments":["unequal"]},{"Key":"of unequal","Fragments":["length"]},{"Key":"unequal length","Fragments":["then"]},{"Key":"ignore the","Fragments":["extra"]},{"Key":"the extra","Fragments":["chars."]},{"Key":" \u003cli\u003e`bob::hey`","Fragments":["takes","takes","takes","takes"]},{"Key":"\u003cli\u003e`bob::hey` takes","Fragments":["a","a","a","a"]},{"Key":"takes a","Fragments":["`const","`const","phrase.","phrase.","`const","`const","phrase."]},{"Key":"a `const","Fragments":["string\u0026","string\u0026","string\u0026","string\u0026"]},{"Key":"string\u0026 sentence`","Fragments":["and","and","and","and"]},{"Key":"sentence` and","Fragments":["returns","returns","returns","determines"]},{"Key":" \u003cli\u003e`evaluate`","Fragments":["determines","determines","determines"]},{"Key":"\u003cli\u003e`evaluate` determines","Fragments":["the","the","the"]},{"Key":"determines the","Fragments":["amount","amount","amount","amount"]},{"Key":"of possible","Fragments":["responses","responses","responses","responses"]},{"Key":"possible responses","Fragments":["by","by","by","by"]},{"Key":"responses by","Fragments":["getting","getting","getting","getting"]},{"Key":"by getting","Fragments":["the","the","the","the"]},{"Key":"getting the","Fragments":["enum","enum","enum","enum"]},{"Key":"enum value","Fragments":["`respond_to::length`","`respond_to::length`","`respond_to::length`\u003c/li\u003e","`respond_to::length`\u003c/li\u003e"]},{"Key":"value `respond_to::length`","Fragments":["and","and"]},{"Key":"`respond_to::length` and","Fragments":["compares","compares"]},{"Key":"and compares","Fragments":["the","the"]},{"Key":"compares the","Fragments":["sentence","sentence","sentence","sentence"]},{"Key":"the sentence","Fragments":["against","against","against","against"]},{"Key":"sentence against","Fragments":["each","each","a","a"]},{"Key":"against each","Fragments":["type","type"]},{"Key":"each type","Fragments":["returning","returning"]},{"Key":"type returning","Fragments":["the","the"]},{"Key":"returning the","Fragments":["result","result"]},{"Key":"of `const","Fragments":["string\u0026","string\u0026","string\u0026"]},{"Key":"string\u0026 respond","Fragments":["(const","(const"]},{"Key":"respond (const","Fragments":["respond_to\u0026","respond_to\u0026"]},{"Key":"(const respond_to\u0026","Fragments":["type)`","type)`"]},{"Key":" `isType(const","Fragments":["string\u0026","string\u0026","string\u0026","string\u0026"]},{"Key":"`isType(const string\u0026","Fragments":["sentence,","sentence,","sentence,","sentence,"]},{"Key":"string\u0026 sentence,","Fragments":["const","const","const","const"]},{"Key":"sentence, const","Fragments":["respond_to\u0026","respond_to\u0026","respond_to\u0026","respond_to\u0026"]},{"Key":"const respond_to\u0026","Fragments":["type)`","type)`","type)`","type)`"]},{"Key":"respond_to\u0026 type)`","Fragments":["returns","returns","compares","compares"]},{"Key":"type)` returns","Fragments":["true;","true;"]},{"Key":"returns true;","Fragments":["meaning","meaning"]},{"Key":"true; meaning","Fragments":["that","that"]},{"Key":"meaning that","Fragments":["it","it"]},{"Key":"matched the","Fragments":["stored","stored"]},{"Key":"the stored","Fragments":["regex","regex"]},{"Key":"stored regex","Fragments":["for","for"]},{"Key":"the corresponding","Fragments":["type","type"]},{"Key":"corresponding type","Fragments":["against","against"]},{"Key":"type against","Fragments":["the","the"]},{"Key":" \u003cli\u003eBecause","Fragments":["I","of","I","of","we","we","I","of","I","I","of","I"]},{"Key":"\u003cli\u003eBecause I","Fragments":["chose","chose","chose","decided","chose","iterate"]},{"Key":"I chose","Fragments":["an","an","an","an","to"]},{"Key":"chose an","Fragments":["object","object","object","object"]},{"Key":"object oriented","Fragments":["approach,","approach,","approach,","approach,"]},{"Key":"oriented approach,","Fragments":["I","I","I","I"]},{"Key":"approach, I","Fragments":["was","was","was","was"]},{"Key":"was forced","Fragments":["to","to","to","to"]},{"Key":"forced to","Fragments":["make","make","make","make"]},{"Key":"make all","Fragments":["my","my","my","my","the"]},{"Key":"all my","Fragments":["methods","methods","methods","methods"]},{"Key":"my methods","Fragments":["`static`.","`static`.","`static`.","`static`."]},{"Key":"methods `static`.","Fragments":["Although","Although","Although","Although"]},{"Key":"`static`. Although","Fragments":["after","after","after","after"]},{"Key":"Although after","Fragments":["review,","review,","review,","review,"]},{"Key":"after review,","Fragments":["I","I","I","I"]},{"Key":"review, I","Fragments":["believe","believe","believe","believe"]},{"Key":"believe that","Fragments":["is","is","is","is"]},{"Key":"how a","Fragments":["true","true","true","true"]},{"Key":"a true","Fragments":["`bob`","`bob`","`bob`","`bob`"]},{"Key":"true `bob`","Fragments":["object","object","object","object"]},{"Key":"`bob` object","Fragments":["would","would","would","would"]},{"Key":"object would","Fragments":["work.\u003c/li\u003e","work.\u003c/li\u003e","work.\u003c/li\u003e","work.\u003c/li\u003e"]},{"Key":"\u003cli\u003eBecause of","Fragments":["how","how","how","how"]},{"Key":"I created","Fragments":["my","my","my","my"]},{"Key":"created my","Fragments":["data","data","data","data"]},{"Key":"my data","Fragments":["structures","structures","structures","structures"]},{"Key":"structures it","Fragments":["would","would","would","would"]},{"Key":"be relatively","Fragments":["easy","easy","easy","easy"]},{"Key":"to scale","Fragments":["this","this","this","this"]},{"Key":"scale this","Fragments":["and","and","and","and"]},{"Key":"and add","Fragments":["responses","responses","responses","responses"]},{"Key":"add responses","Fragments":["to","to","to","to"]},{"Key":"responses to","Fragments":["bob;","bob;","bob;","bob;"]},{"Key":"to bob;","Fragments":["however,","however,","however,","however,"]},{"Key":"bob; however,","Fragments":["now","now","now","now"]},{"Key":"however, now","Fragments":["I","I","I","I"]},{"Key":"have 3","Fragments":["different","different","different","different"]},{"Key":"3 different","Fragments":["data","data","data","data"]},{"Key":"different data","Fragments":["structures","structures","structures","structures"]},{"Key":"structures that","Fragments":["must","must","must","must"]},{"Key":"that must","Fragments":["be","be","be","be"]},{"Key":"be kept","Fragments":["in","in","in","in"]},{"Key":"kept in","Fragments":["sync","sync","sync","sync"]},{"Key":"in sync","Fragments":["\u003ci\u003ei.e.","\u003ci\u003ei.e.","\u003ci\u003ei.e.","\u003ci\u003ei.e."]},{"Key":"sync \u003ci\u003ei.e.","Fragments":["`enum","`enum","`enum","`enum"]},{"Key":"\u003ci\u003ei.e. `enum","Fragments":["respond_to`","respond_to`","respond_to`","respond_to`"]},{"Key":"`enum respond_to`","Fragments":["`map","`map","`map","`map"]},{"Key":"respond_to` `map","Fragments":["mRegexes`","mRegexes`","mRegexes`","mRegexes`"]},{"Key":"`map mRegexes`","Fragments":["`map","`map","`map","`map"]},{"Key":"mRegexes` `map","Fragments":["mResponses`\u003c/i\u003e","mResponses`\u003c/i\u003e","mResponses`\u003c/i\u003e","mResponses`\u003c/i\u003e"]},{"Key":" __Changes","Fragments":["From","From","From","From","From","From"]},{"Key":"__Changes From","Fragments":["Iteration","Iteration","Iteration","Iteration","Iteration","Iteration"]},{"Key":"From Iteration","Fragments":["1__","1__","2__","3__","2__","2__"]},{"Key":" \u003cli\u003eCode","Fragments":["was"]},{"Key":"\u003cli\u003eCode was","Fragments":["formatted"]},{"Key":"was formatted","Fragments":["to"]},{"Key":"formatted to","Fragments":["be"]},{"Key":"readable on","Fragments":["exercism.io"]},{"Key":"on exercism.io","Fragments":["\u003c/li\u003e"]},{"Key":" Yes","Fragments":["I"]},{"Key":"Yes I","Fragments":["have."]},{"Key":"I have.","Fragments":["Was"]},{"Key":"have. Was","Fragments":["there"]},{"Key":"Was there","Fragments":["another"]},{"Key":"there another","Fragments":["underlaying"]},{"Key":"another underlaying","Fragments":["message"]},{"Key":"underlaying message","Fragments":["there"]},{"Key":"message there","Fragments":["that"]},{"Key":"there that","Fragments":["I"]},{"Key":"I missed,","Fragments":["or"]},{"Key":"missed, or","Fragments":["just"]},{"Key":"or just","Fragments":["a"]},{"Key":" \u003cul\u003e\u003cli\u003eHandles","Fragments":["Special"]},{"Key":"\u003cul\u003e\u003cli\u003eHandles Special","Fragments":["characters"]},{"Key":"Special characters","Fragments":["better."]},{"Key":" \u003cul\u003e\u003cli\u003e`line","Fragments":["18:`"]},{"Key":"\u003cul\u003e\u003cli\u003e`line 18:`","Fragments":["changed"]},{"Key":"18:` changed","Fragments":["`!isspace(c)`"]},{"Key":"changed `!isspace(c)`","Fragments":["to"]},{"Key":"`!isspace(c)` to","Fragments":["`isalpha(c)`\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e"]},{"Key":" \u003cli\u003e","Fragments":["`const","Each","Because","`const","Each","Because","`const","Each","Because","Each","Each"]},{"Key":"\u003cli\u003e `const","Fragments":["map\u003cstring,int\u003e","map\u003cstring,int\u003e","map\u003cstring,int\u003e"]},{"Key":"`const map\u003cstring,int\u003e","Fragments":["words(const","words(const","words(const"]},{"Key":"map\u003cstring,int\u003e words(const","Fragments":["string\u0026","string\u0026","string\u0026"]},{"Key":"words(const string\u0026","Fragments":["words)`","words)`","words)`"]},{"Key":"string\u0026 words)`","Fragments":["takes","takes","takes"]},{"Key":"words)` takes","Fragments":["a","a","a"]},{"Key":"a phrase.","Fragments":["\u003c/li\u003e","\u003c/li\u003e","\u003c/li\u003e"]},{"Key":"\u003cli\u003e Each","Fragments":["character","character","character","character","character"]},{"Key":"Each character","Fragments":["of","of","of","is","is"]},{"Key":"is analyzed","Fragments":["and","and","and"]},{"Key":"analyzed and","Fragments":["appended","appended","converted"]},{"Key":"and appended","Fragments":["to","to"]},{"Key":"appended to","Fragments":["a","a"]},{"Key":"a result","Fragments":["word","word"]},{"Key":"result word","Fragments":["if","if"]},{"Key":"word if","Fragments":["neccessary","neccessary"]},{"Key":"if neccessary","Fragments":["\u003c/li\u003e","\u003c/li\u003e"]},{"Key":" \u003cli\u003eIf","Fragments":["a","a","you"]},{"Key":"\u003cli\u003eIf a","Fragments":["non-alphabetic","space"]},{"Key":"a non-alphabetic","Fragments":["character"]},{"Key":"non-alphabetic character","Fragments":["or"]},{"Key":"character or","Fragments":["newline"]},{"Key":"or newline","Fragments":["is","is"]},{"Key":"newline is","Fragments":["encountered","encountered"]},{"Key":"is encountered","Fragments":["then","then"]},{"Key":"encountered then","Fragments":["it","it"]},{"Key":"and inserted","Fragments":["or","or","into"]},{"Key":"inserted or","Fragments":["counted","counted"]},{"Key":"or counted","Fragments":["depending","depending"]},{"Key":"counted depending","Fragments":["on","on"]},{"Key":"depending on","Fragments":["if","if"]},{"Key":"on if","Fragments":["it","it"]},{"Key":"has been","Fragments":["encountered","encountered","removed","implemented"]},{"Key":"been encountered","Fragments":["before","before"]},{"Key":"encountered before","Fragments":["and","and"]},{"Key":"before and","Fragments":["the","the"]},{"Key":"word string","Fragments":["set","set"]},{"Key":"string set","Fragments":["to","to"]},{"Key":"set to","Fragments":["empty.\u003c/li\u003e","empty.\u003c/li\u003e"]},{"Key":"\u003cli\u003eBecause we","Fragments":["use","use"]},{"Key":"the *exercism","Fragments":["build","build"]},{"Key":"*exercism build","Fragments":["system*","system*"]},{"Key":"build system*","Fragments":["I","I"]},{"Key":"system* I","Fragments":["had","had"]},{"Key":"one file","Fragments":["as","as","(bob.h)","you"]},{"Key":"file as","Fragments":["it","it"]},{"Key":"it wouldn't","Fragments":["link","link"]},{"Key":"wouldn't link","Fragments":["separately.\u003c/li\u003e","separately.\u003c/li\u003e"]},{"Key":"\u003cli\u003e Because","Fragments":["I","I","I"]},{"Key":"Because I","Fragments":["used","used","used"]},{"Key":"map return","Fragments":["value","value"]},{"Key":"value if","Fragments":["the","the","the"]},{"Key":"map is","Fragments":["large","large"]},{"Key":"is large","Fragments":["then","then","then","enough,"]},{"Key":"large then","Fragments":["I","I","I"]},{"Key":"potentially copy","Fragments":["a","a","a"]},{"Key":"copy a","Fragments":["large","large","large"]},{"Key":"a large","Fragments":["amount","amount","amount"]},{"Key":"large amount","Fragments":["of","of","of"]},{"Key":"of data","Fragments":["on","on","on"]},{"Key":"data on","Fragments":["return","return","`return`"]},{"Key":"on return","Fragments":["but","but"]},{"Key":"return but","Fragments":["because","because"]},{"Key":"but because","Fragments":["I","I","I"]},{"Key":"can't return","Fragments":["a","a","a"]},{"Key":"local reference","Fragments":["without","without","without"]},{"Key":"reference without","Fragments":["beating","beating","beating"]},{"Key":"without beating","Fragments":["up","up","up"]},{"Key":"beating up","Fragments":["the","the","the"]},{"Key":"compiler a","Fragments":["bit,","bit,","bit,"]},{"Key":"a bit,","Fragments":["I","I","I","and"]},{"Key":"bit, I","Fragments":["gave","gave","gave"]},{"Key":"I gave","Fragments":["in.","in.","in."]},{"Key":"gave in.","Fragments":["\u003c/li\u003e","\u003c/li\u003e","\u003c/li\u003e"]},{"Key":" @jeramie,","Fragments":["yes"]},{"Key":"@jeramie, yes","Fragments":["it"]},{"Key":"yes it","Fragments":["happened"]},{"Key":"it happened","Fragments":["to"]},{"Key":"happened to","Fragments":["pass"]},{"Key":"tests, albeit","Fragments":["only"]},{"Key":"albeit only","Fragments":["by"]},{"Key":"only by","Fragments":["luck."]},{"Key":"by luck.","Fragments":["The"]},{"Key":"luck. The","Fragments":["tests"]},{"Key":"tests were","Fragments":["such"]},{"Key":"were such","Fragments":["that"]},{"Key":"such that","Fragments":["the"]},{"Key":"the mismatched","Fragments":["string"]},{"Key":"mismatched string","Fragments":["sizes"]},{"Key":"string sizes","Fragments":["came"]},{"Key":"sizes came","Fragments":["out"]},{"Key":"came out","Fragments":["to"]},{"Key":"be 0","Fragments":["difference"]},{"Key":"0 difference","Fragments":["anyways."]},{"Key":"difference anyways.","Fragments":["I'll"]},{"Key":"anyways. I'll","Fragments":["fix"]},{"Key":"I'll fix","Fragments":["it"]},{"Key":"fix it","Fragments":["in"]},{"Key":"a space","Fragments":["or","if"]},{"Key":"space or","Fragments":["newline"]},{"Key":"tried a","Fragments":["different"]},{"Key":"different approach","Fragments":["to"]},{"Key":"approach to","Fragments":["this"]},{"Key":"this one.","Fragments":["At"]},{"Key":"one. At","Fragments":["the"]},{"Key":"At the","Fragments":["expense"]},{"Key":"of memory","Fragments":["(26*sizeof(int)"]},{"Key":"memory (26*sizeof(int)","Fragments":["bytes),"]},{"Key":"(26*sizeof(int) bytes),","Fragments":["I"]},{"Key":"bytes), I","Fragments":["was"]},{"Key":"to achieve","Fragments":["an"]},{"Key":"achieve an","Fragments":["efficiency"]},{"Key":"an efficiency","Fragments":["of"]},{"Key":"of O(n)","Fragments":["rather"]},{"Key":"O(n) rather","Fragments":["than"]},{"Key":"than using","Fragments":["a"]},{"Key":"a double","Fragments":["for-loop"]},{"Key":"double for-loop","Fragments":["resulting"]},{"Key":"for-loop resulting","Fragments":["in"]},{"Key":"resulting in","Fragments":["O(n^2"]},{"Key":"in O(n^2","Fragments":[")."]},{"Key":"I make","Fragments":["an"]},{"Key":"an array","Fragments":["the"]},{"Key":"array the","Fragments":["size"]},{"Key":"the alphabet","Fragments":["to"]},{"Key":"alphabet to","Fragments":["store"]},{"Key":"of times","Fragments":["a"]},{"Key":"times a","Fragments":["particular"]},{"Key":"particular letter","Fragments":["appears"]},{"Key":"letter appears","Fragments":["in"]},{"Key":"appears in","Fragments":["the"]},{"Key":"first loop,","Fragments":["then"]},{"Key":"loop, then","Fragments":["check"]},{"Key":"then check","Fragments":["if"]},{"Key":"same number","Fragments":["of"]},{"Key":"of letters","Fragments":["are"]},{"Key":"are present","Fragments":["in"]},{"Key":" Question","Fragments":["about"]},{"Key":"Question about","Fragments":["this"]},{"Key":"int alphabet[26]","Fragments":["="]},{"Key":"alphabet[26] =","Fragments":["{};"]},{"Key":"that proper","Fragments":["technique"]},{"Key":"proper technique","Fragments":["to"]},{"Key":"technique to","Fragments":["get"]},{"Key":"all instances","Fragments":["to"]},{"Key":"instances to","Fragments":["a"]},{"Key":"a 0?","Fragments":["Or"]},{"Key":"0? Or","Fragments":["would"]},{"Key":"Or would","Fragments":["it"]},{"Key":"better practice/more","Fragments":["readable"]},{"Key":"practice/more readable","Fragments":["to"]},{"Key":"readable to","Fragments":["have"]},{"Key":"have {0,","Fragments":["0,"]},{"Key":"{0, 0,","Fragments":["0,"]},{"Key":"0, 0,","Fragments":["0,","..."]},{"Key":" \u003cul\u003e\u003cli\u003eLarge","Fragments":["Formatting"]},{"Key":"\u003cul\u003e\u003cli\u003eLarge Formatting","Fragments":["Redesign"]},{"Key":" \u003cul\u003e\u003cli\u003e.cpp","Fragments":["and"]},{"Key":"\u003cul\u003e\u003cli\u003e.cpp and","Fragments":[".h"]},{"Key":"and .h","Fragments":["are"]},{"Key":".h are","Fragments":["now"]},{"Key":"are now","Fragments":["one"]},{"Key":"now one","Fragments":["file"]},{"Key":"file (bob.h)","Fragments":["and"]},{"Key":"(bob.h) and","Fragments":["co-operate"]},{"Key":"and co-operate","Fragments":["with"]},{"Key":"co-operate with","Fragments":["this"]},{"Key":"this sites","Fragments":["format.\u003c/li\u003e"]},{"Key":" \u003cli\u003eThe","Fragments":["convienience","string","difference","difference"]},{"Key":"\u003cli\u003eThe convienience","Fragments":["function"]},{"Key":"convienience function","Fragments":["`const"]},{"Key":"function `const","Fragments":["string\u0026"]},{"Key":"string\u0026 respond(const","Fragments":["respond_to\u0026)`","string\u0026)`is"]},{"Key":" has","Fragments":["been"]},{"Key":"been removed","Fragments":["and"]},{"Key":"its calls","Fragments":["replaced"]},{"Key":"calls replaced","Fragments":["with"]},{"Key":"with its","Fragments":["return"]},{"Key":"its return","Fragments":["value"]},{"Key":" \u003cli\u003eBetter","Fragments":["Regexes\u003cul\u003e"]},{"Key":" \u003cli\u003e`regex_search`","Fragments":["is"]},{"Key":"\u003cli\u003e`regex_search` is","Fragments":["used"]},{"Key":"used instead","Fragments":["of"]},{"Key":"of `regex_match`","Fragments":["to"]},{"Key":"`regex_match` to","Fragments":["facilitate"]},{"Key":"to facilitate","Fragments":["more"]},{"Key":"facilitate more","Fragments":["accurate"]},{"Key":"more accurate","Fragments":["regexes\u003c/li\u003e"]},{"Key":" \u003cli\u003eExpressions","Fragments":["are"]},{"Key":"\u003cli\u003eExpressions are","Fragments":["more"]},{"Key":"more scalable","Fragments":["and"]},{"Key":"scalable and","Fragments":["applicable"]},{"Key":"and applicable","Fragments":["to"]},{"Key":"applicable to","Fragments":["responses"]},{"Key":"to responses","Fragments":["not"]},{"Key":"responses not","Fragments":["included"]},{"Key":"not included","Fragments":["by"]},{"Key":"included by","Fragments":["the"]},{"Key":" \u003cli\u003eQuicker","Fragments":["Evaluation\u003cul\u003e\u003cli\u003eReturns"]},{"Key":"\u003cli\u003eQuicker Evaluation\u003cul\u003e\u003cli\u003eReturns","Fragments":["on"]},{"Key":"Evaluation\u003cul\u003e\u003cli\u003eReturns on","Fragments":["empty"]},{"Key":"type)` compares","Fragments":["the","the"]},{"Key":"against a","Fragments":["response","response"]},{"Key":"a response","Fragments":["type","type"]},{"Key":"response type","Fragments":["which","which"]},{"Key":"type which","Fragments":["has","has"]},{"Key":"a corresponding","Fragments":["regular","regular"]},{"Key":"corresponding regular","Fragments":["expression","expression"]},{"Key":"regular expression","Fragments":["and","and"]},{"Key":"expression and","Fragments":["returns","returns"]},{"Key":"the boolean","Fragments":["expression","expression","result","result"]},{"Key":"boolean expression","Fragments":["of","of"]},{"Key":"Hey @rickey","Fragments":["I"]},{"Key":"@rickey I","Fragments":["really"]},{"Key":"the design","Fragments":["you've","as"]},{"Key":"design you've","Fragments":["chosen,"]},{"Key":"you've chosen,","Fragments":["its"]},{"Key":"chosen, its","Fragments":["intelligible"]},{"Key":"its intelligible","Fragments":["and"]},{"Key":"intelligible and","Fragments":["concise!"]},{"Key":"concise! If","Fragments":["I"]},{"Key":"change one","Fragments":["thing"]},{"Key":"thing for","Fragments":["its"]},{"Key":"its benefit","Fragments":["however,"]},{"Key":"benefit however,","Fragments":["I"]},{"Key":"however, I","Fragments":["would"]},{"Key":"would use","Fragments":["`phrase.back()`"]},{"Key":"use `phrase.back()`","Fragments":["on"]},{"Key":"`phrase.back()` on","Fragments":["`line"]},{"Key":"on `line","Fragments":["54`"]},{"Key":"`line 54`","Fragments":["instead"]},{"Key":"54` instead","Fragments":["of"]},{"Key":"of `phrase[phrase.size()-1]`","Fragments":["that"]},{"Key":"`phrase[phrase.size()-1]` that","Fragments":["would"]},{"Key":"would allow","Fragments":["you"]},{"Key":"allow you","Fragments":["to"]},{"Key":"remove your","Fragments":["`inline`"]},{"Key":"your `inline`","Fragments":["function"]},{"Key":"`inline` function","Fragments":["and"]},{"Key":"would perfect","Fragments":["this"]},{"Key":"perfect this","Fragments":["code."]},{"Key":"code. Do","Fragments":["you"]},{"Key":"Moved the","Fragments":["copied"]},{"Key":"the copied","Fragments":["logic"]},{"Key":"copied logic","Fragments":["that"]},{"Key":"logic that","Fragments":["was"]},{"Key":"was happening","Fragments":["after"]},{"Key":"happening after","Fragments":["the"]},{"Key":"the inside","Fragments":["by"]},{"Key":"inside by","Fragments":["allowing"]},{"Key":"by allowing","Fragments":["the"]},{"Key":"allowing the","Fragments":["loop"]},{"Key":"to happen","Fragments":["once"]},{"Key":"happen once","Fragments":["more,"]},{"Key":"once more,","Fragments":["and"]},{"Key":"more, and","Fragments":["checking"]},{"Key":"that case","Fragments":["in"]},{"Key":"case in","Fragments":["the"]},{"Key":"first if","Fragments":["statement."]},{"Key":"if statement.","Fragments":["This"]},{"Key":"statement. This","Fragments":["also"]},{"Key":"This also","Fragments":["let"]},{"Key":"also let","Fragments":["me"]},{"Key":"me move","Fragments":["all"]},{"Key":"move all","Fragments":["variable"]},{"Key":"declarations inside","Fragments":["of"]},{"Key":"loop, other","Fragments":["than"]},{"Key":"other than","Fragments":["the"]},{"Key":"the returned","Fragments":["map."]},{"Key":"cases and","Fragments":["built"]},{"Key":"and built","Fragments":["my"]},{"Key":"built my","Fragments":["code"]},{"Key":"code around","Fragments":["that."]},{"Key":" With","Fragments":["classes,"]},{"Key":"With classes,","Fragments":["you"]},{"Key":"classes, you","Fragments":["now"]},{"Key":"you now","Fragments":["expose"]},{"Key":"now expose","Fragments":["a"]},{"Key":"expose a","Fragments":["public"]},{"Key":"a public","Fragments":["default"]},{"Key":"public default","Fragments":["and"]},{"Key":"\u003cul\u003e\u003cli\u003e `const","Fragments":["string\u0026"]},{"Key":"respond(const string\u0026)`is","Fragments":["gone"]},{"Key":"string\u0026)`is gone","Fragments":["and"]},{"Key":"gone and","Fragments":["it"]},{"Key":"it functionality","Fragments":["has"]},{"Key":"functionality has","Fragments":["been"]},{"Key":"been implemented","Fragments":["inside"]},{"Key":"implemented inside","Fragments":["of"]},{"Key":"string\u0026 bob::hey(cosnt","Fragments":["string\u0026)`.\u003cul\u003e\u003cli\u003eI"]},{"Key":"bob::hey(cosnt string\u0026)`.\u003cul\u003e\u003cli\u003eI","Fragments":["don't"]},{"Key":"string\u0026)`.\u003cul\u003e\u003cli\u003eI don't","Fragments":["like"]},{"Key":"don't like","Fragments":["the"]},{"Key":"the lack","Fragments":["of"]},{"Key":"lack of","Fragments":["descriptiveness"]},{"Key":"of descriptiveness","Fragments":["with"]},{"Key":"descriptiveness with","Fragments":["`bob::hey`"]},{"Key":"with `bob::hey`","Fragments":["and"]},{"Key":"`bob::hey` and","Fragments":["I"]},{"Key":"that people","Fragments":["`evaluate`"]},{"Key":"people `evaluate`","Fragments":["things"]},{"Key":"`evaluate` things","Fragments":["privately"]},{"Key":"things privately","Fragments":["but"]},{"Key":"privately but","Fragments":["this"]},{"Key":"this became","Fragments":["a"]},{"Key":"became a","Fragments":["`respond`"]},{"Key":"a `respond`","Fragments":["function"]},{"Key":"`respond` function","Fragments":["and"]},{"Key":"the evaluation","Fragments":["was"]},{"Key":"evaluation was","Fragments":["moved"]},{"Key":"was moved","Fragments":["to"]},{"Key":"moved to","Fragments":["`isType`"]},{"Key":"to `isType`","Fragments":["so"]},{"Key":"`isType` so","Fragments":["decided"]},{"Key":"so decided","Fragments":["that"]},{"Key":"decided that","Fragments":["was"]},{"Key":"not quite","Fragments":["a"]},{"Key":"good enough","Fragments":["reason"]},{"Key":"enough reason","Fragments":["to"]},{"Key":"have it","Fragments":["around.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e"]},{"Key":" \u003cli\u003e`enum","Fragments":["respond_to`"]},{"Key":"\u003cli\u003e`enum respond_to`","Fragments":["is"]},{"Key":"respond_to` is","Fragments":["once"]},{"Key":"is once","Fragments":["again"]},{"Key":"once again","Fragments":["a"]},{"Key":"again a","Fragments":["private"]},{"Key":"a private","Fragments":["member"]},{"Key":"private member","Fragments":["of"]},{"Key":"member of","Fragments":["`bob`.","class"]},{"Key":" \u003cul\u003e\u003cli\u003eI","Fragments":["think"]},{"Key":"\u003cul\u003e\u003cli\u003eI think","Fragments":["this"]},{"Key":"a much","Fragments":["better"]},{"Key":"much better","Fragments":["design"]},{"Key":"better design","Fragments":["because"]},{"Key":"design because","Fragments":["it's"]},{"Key":"it's encapsulated","Fragments":["and"]},{"Key":"encapsulated and","Fragments":["emulates"]},{"Key":"and emulates","Fragments":["a"]},{"Key":"emulates a","Fragments":["real"]},{"Key":"a real","Fragments":["\"bob\""]},{"Key":"real \"bob\"","Fragments":["object.\u003c/li\u003e\u003c/ul\u003e"]},{"Key":" \u003cli\u003eReformatted","Fragments":["Code"]},{"Key":" \u003cul\u003e\u003cli\u003eCode","Fragments":["is"]},{"Key":"\u003cul\u003e\u003cli\u003eCode is","Fragments":["tighter"]},{"Key":"is tighter","Fragments":["and"]},{"Key":"tighter and","Fragments":["shortened"]},{"Key":"and shortened","Fragments":["where"]},{"Key":"shortened where","Fragments":["logically"]},{"Key":"where logically","Fragments":["applicable\u003c/li\u003e"]},{"Key":" \u003cli\u003e`sentence`","Fragments":["variable"]},{"Key":"\u003cli\u003e`sentence` variable","Fragments":["is"]},{"Key":"variable is","Fragments":["now"]},{"Key":"is now","Fragments":["`phrase`","signalled"]},{"Key":"now `phrase`","Fragments":["because"]},{"Key":"`phrase` because","Fragments":["it"]},{"Key":"is shorter","Fragments":["and"]},{"Key":"shorter and","Fragments":["makes"]},{"Key":"and determines","Fragments":["the"]},{"Key":"the `evaluate()`","Fragments":["function"]},{"Key":"`evaluate()` function","Fragments":["and"]},{"Key":"use `bob::hey`","Fragments":["my"]},{"Key":"`bob::hey` my","Fragments":["code"]},{"Key":"less realistically","Fragments":["emulate"]},{"Key":"realistically emulate","Fragments":["an"]},{"Key":"emulate an","Fragments":["actual"]},{"Key":"actual person;","Fragments":["however"]},{"Key":"person; however","Fragments":["it"]},{"Key":"has essentially","Fragments":["turned"]},{"Key":"essentially turned","Fragments":["a"]},{"Key":"turned a","Fragments":["3-step"]},{"Key":"a 3-step","Fragments":["procedure"]},{"Key":"3-step procedure","Fragments":["into"]},{"Key":"procedure into","Fragments":["a"]},{"Key":"a 2-step","Fragments":["procedure"]},{"Key":"2-step procedure","Fragments":["with"]},{"Key":"procedure with","Fragments":["no"]},{"Key":"real effort","Fragments":["or"]},{"Key":"effort or","Fragments":["negative"]},{"Key":"or negative","Fragments":["effect"]},{"Key":"negative effect","Fragments":["to"]},{"Key":"effect to","Fragments":["the"]},{"Key":"I practically","Fragments":["don't"]},{"Key":"practically don't","Fragments":["have"]},{"Key":"have any","Fragments":["previous"]},{"Key":"any previous","Fragments":["experience"]},{"Key":"previous experience","Fragments":["in"]},{"Key":"experience in","Fragments":["using"]},{"Key":"in using","Fragments":["regex"]},{"Key":"regex libraries,","Fragments":["but"]},{"Key":"libraries, but","Fragments":["maybe"]},{"Key":"but maybe","Fragments":["this"]},{"Key":"maybe this","Fragments":["could"]},{"Key":"good chance","Fragments":["to"]},{"Key":"chance to","Fragments":["get","learn.\u003c/li\u003e"]},{"Key":"get some","Fragments":["practise","memory"]},{"Key":"some practise","Fragments":["for"]},{"Key":"practise for","Fragments":["the"]},{"Key":"What comes","Fragments":["to"]},{"Key":"comes to","Fragments":["the"]},{"Key":"the usage","Fragments":["of"]},{"Key":"of return","Fragments":["variable,"]},{"Key":"return variable,","Fragments":["for"]},{"Key":"variable, for","Fragments":["some"]},{"Key":"some reason","Fragments":["I"]},{"Key":"reason I","Fragments":["have"]},{"Key":"a principle","Fragments":["of"]},{"Key":"principle of","Fragments":["preferring"]},{"Key":"of preferring","Fragments":["it"]},{"Key":"preferring it","Fragments":["instead"]},{"Key":"it instead","Fragments":["of"]},{"Key":"of returning","Fragments":["in"]},{"Key":"returning in","Fragments":["the"]},{"Key":"the middle","Fragments":["of"]},{"Key":"middle of","Fragments":["a"]},{"Key":"a function.","Fragments":["Honestly,"]},{"Key":"function. Honestly,","Fragments":["I"]},{"Key":"Honestly, I","Fragments":["don't"]},{"Key":"know which","Fragments":["way"]},{"Key":"which way","Fragments":["has"]},{"Key":"way has","Fragments":["more"]},{"Key":"has more","Fragments":["advantages."]},{"Key":" Iostream","Fragments":["was"]},{"Key":"Iostream was","Fragments":["added"]},{"Key":"was added","Fragments":["just"]},{"Key":"added just","Fragments":["for"]},{"Key":"for debugging","Fragments":["purposes"]},{"Key":"debugging purposes","Fragments":["and"]},{"Key":"purposes and","Fragments":["I"]},{"Key":"remove it","Fragments":[":)"]},{"Key":" Changes","Fragments":["from","from"]},{"Key":"Changes from","Fragments":["iteration","iteration"]},{"Key":"from iteration","Fragments":["1:","2:"]},{"Key":"* changed","Fragments":["the","```matches_out.insert(matches_out.end(),"]},{"Key":"changed the","Fragments":["loop"]},{"Key":"input of","Fragments":["matches"]},{"Key":"of matches","Fragments":["to"]},{"Key":"matches to","Fragments":["be","the"]},{"Key":"* move","Fragments":["the"]},{"Key":"sorted reference","Fragments":["string"]},{"Key":"reference string","Fragments":["from"]},{"Key":"from matches","Fragments":["to"]},{"Key":"constructor of","Fragments":["AC."]},{"Key":" Question:","Fragments":["can"]},{"Key":"Question: can","Fragments":["I"]},{"Key":"based loop","Fragments":["syntax"]},{"Key":"loop syntax","Fragments":["in"]},{"Key":"syntax in","Fragments":["if"]},{"Key":"in if","Fragments":["statements,"]},{"Key":"if statements,","Fragments":["in"]},{"Key":"statements, in","Fragments":["the"]},{"Key":"can in","Fragments":["python."]},{"Key":"in python.","Fragments":["For"]},{"Key":"python. For","Fragments":["example:"]},{"Key":" vector\u003cint\u003e","Fragments":["x"]},{"Key":"vector\u003cint\u003e x","Fragments":["="]},{"Key":"x =","Fragments":["{0,"]},{"Key":"= {0,","Fragments":["1,"]},{"Key":"{0, 1,","Fragments":["2};"]},{"Key":"if (i","Fragments":[":"]},{"Key":"(i :","Fragments":["x){"]},{"Key":" cout","Fragments":["\u003c\u003c","\u003c\u003c"]},{"Key":"cout \u003c\u003c","Fragments":["\"i","\"i"]},{"Key":"\u003c\u003c \"i","Fragments":["is","is"]},{"Key":"\"i is","Fragments":["in","not"]},{"Key":" EDIT:","Fragments":["I've"]},{"Key":"EDIT: I've","Fragments":["just"]},{"Key":"I've just","Fragments":["tried"]},{"Key":"doesn't work.","Fragments":["Is"]},{"Key":"work. Is","Fragments":["there"]},{"Key":"way that's","Fragments":["nicely"]},{"Key":"that's nicely","Fragments":["readable?"]},{"Key":"nicely readable?","Fragments":["I"]},{"Key":"readable? I","Fragments":["know"]},{"Key":"know ```std::find```","Fragments":["can"]},{"Key":"```std::find``` can","Fragments":["be"]},{"Key":"The length","Fragments":["check"]},{"Key":"length check","Fragments":["was"]},{"Key":"check was","Fragments":["redundant,"]},{"Key":"was redundant,","Fragments":["so"]},{"Key":"redundant, so","Fragments":["it"]},{"Key":"changed ```matches_out.insert(matches_out.end(),","Fragments":["i);```"]},{"Key":"```matches_out.insert(matches_out.end(), i);```","Fragments":["to"]},{"Key":"i);``` to","Fragments":["```matches_out.push_back(i);```"]},{"Key":"to ```matches_out.push_back(i);```","Fragments":["as"]},{"Key":"```matches_out.push_back(i);``` as","Fragments":["it"]},{"Key":"Hi again.","Fragments":["Yesterday"]},{"Key":"again. Yesterday","Fragments":["I"]},{"Key":"Yesterday I","Fragments":["found"]},{"Key":"better way","Fragments":["to"]},{"Key":"those conditions","Fragments":["without"]},{"Key":"conditions without","Fragments":["using"]},{"Key":"using regex,","Fragments":["which"]},{"Key":"regex, which","Fragments":["maybe"]},{"Key":"which maybe","Fragments":["is"]},{"Key":"maybe is","Fragments":["too"]},{"Key":"is too","Fragments":["much"]},{"Key":"for those","Fragments":["simple"]},{"Key":"those simple","Fragments":["cases."]},{"Key":"simple cases.","Fragments":["It"]},{"Key":"cases. It","Fragments":["is"]},{"Key":"is using","Fragments":["the"]},{"Key":"the \u003calgorithm\u003e","Fragments":["library."]},{"Key":"in having","Fragments":["a"]},{"Key":"this example","Fragments":["from"]},{"Key":"example from","Fragments":["the"]},{"Key":"the person","Fragments":["who"]},{"Key":"person who","Fragments":["told"]},{"Key":"who told","Fragments":["me"]},{"Key":"told me","Fragments":["about"]},{"Key":"think I'm","Fragments":["using"]},{"Key":"all what","Fragments":["STL"]},{"Key":"what STL","Fragments":["can"]},{"Key":"STL can","Fragments":["do:"]},{"Key":"can do:","Fragments":["the"]},{"Key":"do: the","Fragments":["`for`"]},{"Key":"`for` in","Fragments":["`shouting`"]},{"Key":"in `shouting`","Fragments":["and"]},{"Key":"`shouting` and","Fragments":["the"]},{"Key":"the stackoverflow-originated","Fragments":["`trim`"]},{"Key":"stackoverflow-originated `trim`","Fragments":["looks"]},{"Key":"`trim` looks","Fragments":["ugly."]},{"Key":"The message","Fragments":["was"]},{"Key":"message was","Fragments":["this:"]},{"Key":"was this:","Fragments":["It's"]},{"Key":"this: It's","Fragments":["nice"]},{"Key":"It's nice","Fragments":["how"]},{"Key":"nice how","Fragments":["you've"]},{"Key":"how you've","Fragments":["split"]},{"Key":"you've split","Fragments":["things"]},{"Key":"split things","Fragments":["up"]},{"Key":"things up","Fragments":["into"]},{"Key":"but `checkCaps`","Fragments":["and"]},{"Key":"`checkCaps` and","Fragments":["`checkEmpty`"]},{"Key":"and `checkEmpty`","Fragments":["could"]},{"Key":"`checkEmpty` could","Fragments":["also"]},{"Key":"also be","Fragments":["called"]},{"Key":"called `isAllCaps`","Fragments":["and"]},{"Key":"`isAllCaps` and","Fragments":["`isEmpty`."]},{"Key":"would express","Fragments":["more"]},{"Key":"express more","Fragments":["clearly"]},{"Key":"clearly that","Fragments":["they"]},{"Key":"that they","Fragments":["are","aren't"]},{"Key":"are purely","Fragments":["boolean"]},{"Key":"purely boolean","Fragments":["functions"]},{"Key":" PS.:","Fragments":["`using"]},{"Key":"PS.: `using","Fragments":["namespace"]},{"Key":"std` is","Fragments":["a"]},{"Key":"bit heavy","Fragments":["handed;"]},{"Key":"heavy handed;","Fragments":["especially"]},{"Key":"handed; especially","Fragments":["in"]},{"Key":"especially in","Fragments":["a"]},{"Key":" Take","Fragments":["a"]},{"Key":"Take a","Fragments":["more"]},{"Key":"more careful","Fragments":["look"]},{"Key":"careful look","Fragments":["at"]},{"Key":"the song","Fragments":["structure!"]},{"Key":"song structure!","Fragments":["The"]},{"Key":"structure! The","Fragments":["size"]},{"Key":"The size","Fragments":["of"]},{"Key":"your program","Fragments":["can"]},{"Key":"program can","Fragments":["be"]},{"Key":"optimized quite","Fragments":["considerably."]},{"Key":"probably use","Fragments":["boost::format"]},{"Key":"use boost::format","Fragments":["to"]},{"Key":"boost::format to","Fragments":["make"]},{"Key":"this faster,","Fragments":["but"]},{"Key":"faster, but","Fragments":["I"]},{"Key":"believe it's","Fragments":["necessary."]},{"Key":"was wondering","Fragments":["about"]},{"Key":"wondering about","Fragments":["performance"]},{"Key":"about performance","Fragments":["as"]},{"Key":"performance as","Fragments":["well,"]},{"Key":"well, so","Fragments":["I"]},{"Key":"benchmark three","Fragments":["different"]},{"Key":" std::transform(","Fragments":["start,","start,","word.begin(),"]},{"Key":"std::transform( start,","Fragments":["stop,","stop,"]},{"Key":"start, stop,","Fragments":["back_inserter(","back_inserter("]},{"Key":"stop, back_inserter(","Fragments":["word","word"]},{"Key":"back_inserter( word","Fragments":["),","),"]},{"Key":"word ),","Fragments":["::tolower","::tolower"]},{"Key":"), ::tolower","Fragments":[");",");"]},{"Key":" word.reserve(","Fragments":["std::distance("]},{"Key":"word.reserve( std::distance(","Fragments":["start,"]},{"Key":"std::distance( start,","Fragments":["stop"]},{"Key":"start, stop","Fragments":[")",");"]},{"Key":"stop )","Fragments":[");"]},{"Key":"std::string word(","Fragments":["start,"]},{"Key":"word( start,","Fragments":["stop"]},{"Key":"std::transform( word.begin(),","Fragments":["word.end(),"]},{"Key":"word.begin(), word.end(),","Fragments":["word.begin(),"]},{"Key":"word.begin(), ::tolower","Fragments":[");"]},{"Key":"The results","Fragments":["are"]},{"Key":"results are","Fragments":["kind"]},{"Key":"are kind","Fragments":["of"]},{"Key":"of weird,","Fragments":["however:"]},{"Key":" Character","Fragments":["count:","count:"]},{"Key":"Character count:","Fragments":["3973995","477238"]},{"Key":" Time:","Fragments":["329018","485027","306017","65212","41459","42443"]},{"Key":"Time: 329018","Fragments":["microseconds."]},{"Key":" Max","Fragments":["element:","element:","element:","element:","element:","element:"]},{"Key":"Max element:","Fragments":["\"the\"","\"the\"","\"the\"","s","s","s"]},{"Key":"element: \"the\"","Fragments":["42033","42033","42033"]},{"Key":"Time: 485027","Fragments":["microseconds."]},{"Key":"Time: 306017","Fragments":["microseconds."]},{"Key":" Ran","Fragments":["with"]},{"Key":"Ran with","Fragments":["MSVC"]},{"Key":"with MSVC","Fragments":["and"]},{"Key":"MSVC and","Fragments":["full"]},{"Key":"and full","Fragments":["optimization."]},{"Key":"full optimization.","Fragments":["[Full"]},{"Key":"optimization. [Full","Fragments":["code"]},{"Key":"[Full code","Fragments":["here](http://pastebin.com/pHDFSGBZ)."]},{"Key":"code here](http://pastebin.com/pHDFSGBZ).","Fragments":["\"INPUT.txt\""]},{"Key":"here](http://pastebin.com/pHDFSGBZ). \"INPUT.txt\"","Fragments":["was"]},{"Key":"\"INPUT.txt\" was","Fragments":["a"]},{"Key":"a random","Fragments":["sci-fi","number"]},{"Key":"random sci-fi","Fragments":["novel"]},{"Key":"sci-fi novel","Fragments":["I've"]},{"Key":"novel I've","Fragments":["had"]},{"Key":"I've had","Fragments":["lying"]},{"Key":"had lying","Fragments":["around,"]},{"Key":"lying around,","Fragments":["in"]},{"Key":"around, in","Fragments":["plain"]},{"Key":"in plain","Fragments":["text"]},{"Key":"plain text","Fragments":["format."]},{"Key":"text format.","Fragments":["4"]},{"Key":"format. 4","Fragments":["million"]},{"Key":"4 million","Fragments":["characters,"]},{"Key":"million characters,","Fragments":["average"]},{"Key":"characters, average","Fragments":["word"]},{"Key":"average word","Fragments":["length","length"]},{"Key":"word length","Fragments":["5.7.","of"]},{"Key":" Turns","Fragments":["out"]},{"Key":"Turns out","Fragments":["that"]},{"Key":"that for","Fragments":["such"]},{"Key":"for such","Fragments":["a"]},{"Key":"a text,","Fragments":["calling"]},{"Key":"text, calling","Fragments":["`reserve`"]},{"Key":"calling `reserve`","Fragments":["is"]},{"Key":"`reserve` is","Fragments":["detrimental"]},{"Key":"is detrimental","Fragments":["to"]},{"Key":"detrimental to","Fragments":["performance."]},{"Key":"to performance.","Fragments":["The"]},{"Key":"performance. The","Fragments":["default"]},{"Key":"default buffer","Fragments":["size"]},{"Key":"buffer size","Fragments":["for"]},{"Key":"size for","Fragments":["a"]},{"Key":"a `std::string`","Fragments":["in"]},{"Key":"`std::string` in","Fragments":["Microsoft's"]},{"Key":"in Microsoft's","Fragments":["implementation"]},{"Key":"Microsoft's implementation","Fragments":["is"]},{"Key":"is 16.","Fragments":["A"]},{"Key":"16. A","Fragments":["string"]},{"Key":"A string","Fragments":["smaller"]},{"Key":"string smaller","Fragments":["than"]},{"Key":"smaller than","Fragments":["that"]},{"Key":"than that","Fragments":["won't"]},{"Key":"that won't","Fragments":["cause"]},{"Key":"a heap","Fragments":["allocation"]},{"Key":"heap allocation","Fragments":["at"]},{"Key":"allocation at","Fragments":["all."]},{"Key":"at all.","Fragments":["With"]},{"Key":"all. With","Fragments":["an"]},{"Key":"With an","Fragments":["average"]},{"Key":"an average","Fragments":["word"]},{"Key":"of less","Fragments":["than"]},{"Key":"less than","Fragments":["6,"]},{"Key":"than 6,","Fragments":["the"]},{"Key":"6, the","Fragments":["process"]},{"Key":"process is","Fragments":["almost"]},{"Key":"is almost","Fragments":["free"]},{"Key":"almost free","Fragments":["of"]},{"Key":"of heap","Fragments":["allocs."]},{"Key":"heap allocs.","Fragments":["Calling"]},{"Key":"allocs. Calling","Fragments":["`reserve`"]},{"Key":"Calling `reserve`","Fragments":["in"]},{"Key":"`reserve` in","Fragments":["this"]},{"Key":"case only","Fragments":["adds"]},{"Key":"only adds","Fragments":["some"]},{"Key":"adds some","Fragments":["unnecessary"]},{"Key":"some unnecessary","Fragments":["overhead."]},{"Key":"think GNU's","Fragments":["stdlib"]},{"Key":"GNU's stdlib","Fragments":["implementation"]},{"Key":"stdlib implementation","Fragments":["doesn't"]},{"Key":"implementation doesn't","Fragments":["use"]},{"Key":"doesn't use","Fragments":["this"]},{"Key":"this short","Fragments":["string"]},{"Key":"short string","Fragments":["optimization,"]},{"Key":"string optimization,","Fragments":["so"]},{"Key":"optimization, so","Fragments":["results"]},{"Key":"so results","Fragments":["may"]},{"Key":"results may","Fragments":["very"]},{"Key":"may very","Fragments":["significantly."]},{"Key":"very significantly.","Fragments":["Maybe"]},{"Key":"significantly. Maybe","Fragments":["one"]},{"Key":"Maybe one","Fragments":["of"]},{"Key":"of you","Fragments":["guys"]},{"Key":"you guys","Fragments":["could"]},{"Key":"guys could","Fragments":["run"]},{"Key":"could run","Fragments":["it"]},{"Key":"run it","Fragments":["through"]},{"Key":"it through","Fragments":["gcc?"]},{"Key":"Hi there!","Fragments":["Nice"]},{"Key":"there! Nice","Fragments":["piece"]},{"Key":"Nice piece","Fragments":["of"]},{"Key":" Peronally","Fragments":["I"]},{"Key":"Peronally I","Fragments":["would"]},{"Key":"added some","Fragments":["comments"]},{"Key":"some comments","Fragments":["explaining"]},{"Key":"comments explaining","Fragments":["in"]},{"Key":"explaining in","Fragments":["a"]},{"Key":"few words","Fragments":["what"]},{"Key":"words what","Fragments":["I"]},{"Key":"doing (this","Fragments":["code"]},{"Key":"(this code","Fragments":["is"]},{"Key":"very simple,","Fragments":["but"]},{"Key":"simple, but","Fragments":["I"]},{"Key":"would try","Fragments":["to"]},{"Key":"get used","Fragments":["to"]},{"Key":"to writing","Fragments":["comments"]},{"Key":"writing comments","Fragments":["for"]},{"Key":"comments for","Fragments":["each"]},{"Key":"used \u003calgorithm\u003e","Fragments":["library"]},{"Key":"\u003calgorithm\u003e library","Fragments":["to"]},{"Key":"remove those","Fragments":["chars"]},{"Key":"those chars","Fragments":["whch"]},{"Key":"chars whch","Fragments":["aren't"]},{"Key":"whch aren't","Fragments":["alphanumeric."]},{"Key":"aren't alphanumeric.","Fragments":["Personally"]},{"Key":"alphanumeric. Personally","Fragments":["I"]},{"Key":"Personally I","Fragments":["love"]},{"Key":"love usng","Fragments":["the"]},{"Key":"usng the","Fragments":["stl"]},{"Key":"the stl","Fragments":["libraries"]},{"Key":"stl libraries","Fragments":["because"]},{"Key":"libraries because","Fragments":["they"]},{"Key":"make my","Fragments":["code"]},{"Key":"and robust","Fragments":["(and"]},{"Key":"robust (and","Fragments":["most"]},{"Key":"(and most","Fragments":["of"]},{"Key":"the times","Fragments":["faster"]},{"Key":"times faster","Fragments":["as"]},{"Key":"faster as","Fragments":["well!)."]},{"Key":" True,","Fragments":["I"]},{"Key":"constructor as","Fragments":["deleted"]},{"Key":"as deleted","Fragments":["(or"]},{"Key":"deleted (or","Fragments":["private)."]},{"Key":"(or private).","Fragments":["That"]},{"Key":"private). That","Fragments":["would"]},{"Key":"would resolve","Fragments":["the"]},{"Key":"resolve the","Fragments":["issue."]},{"Key":"But even","Fragments":["so,"]},{"Key":"even so,","Fragments":["since"]},{"Key":"so, since","Fragments":["all"]},{"Key":"all members","Fragments":["are"]},{"Key":"are static,","Fragments":["there's"]},{"Key":"static, there's","Fragments":["literally"]},{"Key":"there's literally","Fragments":["nothing"]},{"Key":"literally nothing","Fragments":["you"]},{"Key":"nothing you","Fragments":["could"]},{"Key":"an instance","Fragments":["of"]},{"Key":"instance of","Fragments":["`bob`."]},{"Key":" `Bob.h`","Fragments":["just"]},{"Key":"`Bob.h` just","Fragments":["defines"]},{"Key":"just defines","Fragments":["the"]},{"Key":"defines the","Fragments":["function"]},{"Key":"function prototypes","Fragments":["inside"]},{"Key":"prototypes inside","Fragments":["the"]},{"Key":"about implementing","Fragments":["`is_shout`,"]},{"Key":"implementing `is_shout`,","Fragments":["it"]},{"Key":"`is_shout`, it","Fragments":["seems"]},{"Key":"expressive to","Fragments":["search"]},{"Key":"for uppercase","Fragments":["characters"]},{"Key":"uppercase characters","Fragments":["separately"]},{"Key":"characters separately","Fragments":["using"]},{"Key":"separately using","Fragments":["`any_of`."]},{"Key":"using `any_of`.","Fragments":["However"]},{"Key":"`any_of`. However","Fragments":["that"]},{"Key":"However that","Fragments":["would"]},{"Key":"would mean","Fragments":["iterating"]},{"Key":"mean iterating","Fragments":["over"]},{"Key":"question twice","Fragments":["(alright,"]},{"Key":"twice (alright,","Fragments":["it"]},{"Key":"(alright, it","Fragments":["doesn't"]},{"Key":"matter for","Fragments":["any"]},{"Key":"any imaginable","Fragments":["question"]},{"Key":"imaginable question","Fragments":["but"]},{"Key":"question but","Fragments":["it's"]},{"Key":"but it's","Fragments":["a"]},{"Key":"of principle","Fragments":[";))."]},{"Key":"principle ;)).","Fragments":["And"]},{"Key":";)). And","Fragments":["I"]},{"Key":"way the","Fragments":["following"]},{"Key":"the following","Fragments":["code"]},{"Key":"following code","Fragments":["snippet"]},{"Key":"code snippet","Fragments":["reads:"]},{"Key":"if (not","Fragments":["found_upper"]},{"Key":"(not found_upper","Fragments":["and"]},{"Key":"found_upper and","Fragments":["isupper(c))"]},{"Key":"and isupper(c))","Fragments":["{"]},{"Key":" found_upper","Fragments":["="]},{"Key":"found_upper =","Fragments":["true;"]},{"Key":"It's just","Fragments":["so","a"]},{"Key":"just so","Fragments":["clear"]},{"Key":"so clear","Fragments":["what"]},{"Key":"this part","Fragments":["does"]},{"Key":"part does","Fragments":[":)."]},{"Key":"was trying","Fragments":["to"]},{"Key":"get this","Fragments":["running"]},{"Key":"this running","Fragments":["with"]},{"Key":"running with","Fragments":["`#include"]},{"Key":"with `#include","Fragments":["\u003clocale\u003e`"]},{"Key":"`#include \u003clocale\u003e`","Fragments":["but"]},{"Key":"\u003clocale\u003e` but","Fragments":["there"]},{"Key":"there were","Fragments":["problems"]},{"Key":"were problems","Fragments":["with"]},{"Key":"problems with","Fragments":["the"]},{"Key":"the template","Fragments":["substitution"]},{"Key":"template substitution","Fragments":["in"]},{"Key":"substitution in","Fragments":["`none_of`."]},{"Key":"in `none_of`.","Fragments":["That's"]},{"Key":"`none_of`. That's","Fragments":["why"]},{"Key":"I fell","Fragments":["back"]},{"Key":"fell back","Fragments":["to"]},{"Key":"the `cctype`","Fragments":["include."]},{"Key":"solution couldn't","Fragments":["be"]},{"Key":"couldn't be","Fragments":["simpler."]},{"Key":"Looks good.","Fragments":["I"]},{"Key":"good. I","Fragments":["like"]},{"Key":"the struct","Fragments":["to"]},{"Key":"struct to","Fragments":["store"]},{"Key":"responses instead","Fragments":["of"]},{"Key":"just coding","Fragments":["them"]},{"Key":"coding them","Fragments":["in"]},{"Key":"the if-statement.","Fragments":["Using"]},{"Key":"if-statement. Using","Fragments":["regex"]},{"Key":"Using regex","Fragments":["is"]},{"Key":"a clever","Fragments":["way"]},{"Key":"clever way","Fragments":["to"]},{"Key":"strings. C++","Fragments":["has"]},{"Key":"pretty nice","Fragments":["string"]},{"Key":"nice string","Fragments":["functions"]},{"Key":"string functions","Fragments":["that"]},{"Key":"used alternatively,","Fragments":["such"]},{"Key":"alternatively, such","Fragments":["as"]},{"Key":"as isupper(),","Fragments":["islower(),"]},{"Key":"isupper(), islower(),","Fragments":["isalpha()"]},{"Key":"islower(), isalpha()","Fragments":["to"]},{"Key":"isalpha() to","Fragments":["name"]},{"Key":"to name","Fragments":["a"]},{"Key":"name a","Fragments":["few."]},{"Key":"a few.","Fragments":["Sometimes"]},{"Key":"few. Sometimes","Fragments":["these"]},{"Key":"Sometimes these","Fragments":["may"]},{"Key":"these may","Fragments":["be"]},{"Key":"be easier","Fragments":["to"]},{"Key":"to use.","Fragments":["Check"]},{"Key":"use. Check","Fragments":["out"]},{"Key":"Check out","Fragments":["cctype"]},{"Key":"out cctype","Fragments":["(ctype.h)."]},{"Key":" Trade","Fragments":["offs"]},{"Key":"Trade offs","Fragments":["with"]},{"Key":"offs with","Fragments":["this"]},{"Key":"was readability","Fragments":["vs."]},{"Key":"readability vs.","Fragments":["performance."]},{"Key":"vs. performance.","Fragments":["There"]},{"Key":"performance. There","Fragments":["is"]},{"Key":"is some","Fragments":["duplication"]},{"Key":"some duplication","Fragments":["in"]},{"Key":"duplication in","Fragments":["checking"]},{"Key":"in checking","Fragments":["values"]},{"Key":"checking values","Fragments":["according"]},{"Key":"values according","Fragments":["to"]},{"Key":"according to","Fragments":["requirements,"]},{"Key":"to requirements,","Fragments":["but"]},{"Key":"requirements, but","Fragments":["the"]},{"Key":"the gain","Fragments":["in"]},{"Key":"gain in","Fragments":["readability"]},{"Key":"in readability","Fragments":["makes"]},{"Key":"readability makes","Fragments":["a"]},{"Key":"more maintainable","Fragments":["solution."]},{"Key":"The Boost","Fragments":["Framework"]},{"Key":"Boost Framework","Fragments":["really"]},{"Key":"Framework really","Fragments":["helped."]},{"Key":"really helped.","Fragments":["The"]},{"Key":"helped. The","Fragments":["most"]},{"Key":"The most","Fragments":["worsts"]},{"Key":"most worsts","Fragments":["tests"]},{"Key":"worsts tests","Fragments":["was"]},{"Key":"tests was","Fragments":["the"]},{"Key":"the questions","Fragments":["with"]},{"Key":"questions with","Fragments":["numbers."]},{"Key":" Had","Fragments":["I"]},{"Key":"Had I","Fragments":["thought"]},{"Key":"it before,","Fragments":["I"]},{"Key":"before, I","Fragments":["would"]},{"Key":"have changed","Fragments":["lines"]},{"Key":"changed lines","Fragments":["30-35"]},{"Key":"lines 30-35","Fragments":["from"]},{"Key":"if (output_map.count(c)","Fragments":["=="]},{"Key":"(output_map.count(c) ==","Fragments":["0){"]},{"Key":" output_map[c]","Fragments":["="]},{"Key":"output_map[c] =","Fragments":["1;"]},{"Key":"But instead","Fragments":["I"]},{"Key":"instead I","Fragments":["went"]},{"Key":"went for","Fragments":["the"]},{"Key":" Now","Fragments":["that"]},{"Key":"Now that","Fragments":["I"]},{"Key":"I look","Fragments":["at"]},{"Key":"at it,","Fragments":["it"]},{"Key":"it, it","Fragments":["does"]},{"Key":"does seem","Fragments":["like"]},{"Key":"like range","Fragments":["for"]},{"Key":"for would","Fragments":["be"]},{"Key":"have tried","Fragments":["to","to"]},{"Key":"design as","Fragments":["simple"]},{"Key":"string indexing","Fragments":["with"]},{"Key":"indexing with","Fragments":[".back()."]},{"Key":"with .back().","Fragments":["however"]},{"Key":".back(). however","Fragments":["I"]},{"Key":"however I","Fragments":["do"]},{"Key":"not see","Fragments":["how"]},{"Key":" remove","Fragments":["the"]},{"Key":"the \"inline\"","Fragments":["function,"]},{"Key":"\"inline\" function,","Fragments":["which"]},{"Key":"function, which","Fragments":["is"]},{"Key":"is there","Fragments":["only","a"]},{"Key":"there only","Fragments":["for"]},{"Key":"only for","Fragments":["explicit"]},{"Key":"for explicit","Fragments":["conversion"]},{"Key":"explicit conversion","Fragments":["of"]},{"Key":"conversion of","Fragments":["const","string"]},{"Key":"of const","Fragments":["char"]},{"Key":"char []","Fragments":["to"]},{"Key":"[] to","Fragments":["std::string."]},{"Key":" Yes.","Fragments":["I"]},{"Key":"Yes. I","Fragments":["have"]},{"Key":"admit though,","Fragments":["that"]},{"Key":"though, that","Fragments":["I"]},{"Key":"this exercise,","Fragments":["as"]},{"Key":"exercise, as","Fragments":["well"]},{"Key":"the beer","Fragments":["song"]},{"Key":"beer song","Fragments":["and"]},{"Key":"song and","Fragments":["bob,"]},{"Key":"and bob,","Fragments":["rather"]},{"Key":"bob, rather","Fragments":["boring."]},{"Key":" Ahh","Fragments":["I"]},{"Key":"Ahh I","Fragments":["see,"]},{"Key":"I see,","Fragments":["I"]},{"Key":"see, I","Fragments":["thought"]},{"Key":"thought that","Fragments":["you"]},{"Key":"had left","Fragments":["it"]},{"Key":"left it","Fragments":["there"]},{"Key":"it there","Fragments":["from"]},{"Key":"there from","Fragments":["earlier"]},{"Key":"from earlier","Fragments":["trials."]},{"Key":"earlier trials.","Fragments":["I"]},{"Key":"trials. I","Fragments":["like"]},{"Key":"the explicit","Fragments":["call"]},{"Key":"explicit call","Fragments":["now"]},{"Key":"call now","Fragments":["that"]},{"Key":"is boost","Fragments":["allowed?"]},{"Key":"boost allowed?","Fragments":[":-)"]},{"Key":" just","Fragments":["curious:"]},{"Key":"just curious:","Fragments":["in"]},{"Key":"curious: in","Fragments":["terms"]},{"Key":"of performance,","Fragments":["what"]},{"Key":"performance, what","Fragments":["is"]},{"Key":"the overhead","Fragments":["introduced","seems","of"]},{"Key":"overhead introduced","Fragments":["by"]},{"Key":"introduced by","Fragments":["boost?"]},{"Key":" and","Fragments":["last","on"]},{"Key":"last but","Fragments":["not"]},{"Key":"not least:","Fragments":["is"]},{"Key":"least: is","Fragments":["this"]},{"Key":"any way","Fragments":["debuggable?"]},{"Key":"How to","Fragments":["submit"]},{"Key":"submit the","Fragments":["\"word_count.h\""]},{"Key":"the \"word_count.h\"","Fragments":["file??"]},{"Key":"a classical","Fragments":["one;"]},{"Key":"classical one;","Fragments":["however"]},{"Key":"one; however","Fragments":["the"]},{"Key":"however the","Fragments":["solution"]},{"Key":"is suggested","Fragments":["by"]},{"Key":"suggested by","Fragments":["the"]},{"Key":"boost unit","Fragments":["tests"]},{"Key":"tests which","Fragments":["is"]},{"Key":"a pitty","Fragments":["in"]},{"Key":"pitty in","Fragments":["my"]},{"Key":"my oppion.","Fragments":["the"]},{"Key":"oppion. the","Fragments":["only"]},{"Key":"the only","Fragments":["thing","thing"]},{"Key":"only thing","Fragments":["to","influencing"]},{"Key":"thing to","Fragments":["work"]},{"Key":"on is","Fragments":["the"]},{"Key":"the tokenizer,","Fragments":["which"]},{"Key":"tokenizer, which","Fragments":["is"]},{"Key":"is simple","Fragments":["in"]},{"Key":"simple in","Fragments":["this"]},{"Key":" \u003cli\u003eNote\u003cul\u003e\u003cli\u003eDue","Fragments":["to"]},{"Key":"\u003cli\u003eNote\u003cul\u003e\u003cli\u003eDue to","Fragments":["my"]},{"Key":"my unfortold","Fragments":["level"]},{"Key":"unfortold level","Fragments":["of"]},{"Key":"level of","Fragments":["dumbassery,"]},{"Key":"of dumbassery,","Fragments":["I"]},{"Key":"dumbassery, I","Fragments":["was"]},{"Key":"the build","Fragments":["system"]},{"Key":"build system","Fragments":["wrong"]},{"Key":"system wrong","Fragments":["and"]},{"Key":"and wasn't","Fragments":["passing"]},{"Key":"wasn't passing","Fragments":["all"]},{"Key":"passing all","Fragments":["the"]},{"Key":"the tests.","Fragments":["Now"]},{"Key":"tests. Now","Fragments":["I"]},{"Key":"Now I","Fragments":["do,"]},{"Key":"do, with","Fragments":["flying"]},{"Key":"with flying","Fragments":["colors"]},{"Key":"flying colors","Fragments":["might"]},{"Key":"colors might","Fragments":["I"]},{"Key":"might I","Fragments":["add.\u003c/li\u003e\u003c/ul\u003e"]},{"Key":" \u003c/li\u003e\u003cli\u003eCompletely","Fragments":["redone"]},{"Key":" \u003cul\u003e\u003cli\u003eAfter","Fragments":["reviewing"]},{"Key":"\u003cul\u003e\u003cli\u003eAfter reviewing","Fragments":["others"]},{"Key":"reviewing others","Fragments":["I"]},{"Key":"others I","Fragments":["added"]},{"Key":"C++ 11","Fragments":["flare"]},{"Key":"11 flare","Fragments":["to"]},{"Key":"flare to","Fragments":["mine,"]},{"Key":"to mine,","Fragments":["thanks"]},{"Key":"mine, thanks","Fragments":["to"]},{"Key":"to everybody","Fragments":["for"]},{"Key":"everybody for","Fragments":["the"]},{"Key":"the inspiration","Fragments":["and"]},{"Key":"inspiration and","Fragments":["chance"]},{"Key":"and chance","Fragments":["to"]},{"Key":"the `string`","Fragments":["is"]},{"Key":"`string` is","Fragments":["analyzed","then"]},{"Key":"and converted","Fragments":["into"]},{"Key":"converted into","Fragments":["a"]},{"Key":"space if","Fragments":["it"]},{"Key":"not alpha-numeric","Fragments":["or"]},{"Key":"alpha-numeric or","Fragments":["to"]},{"Key":"or to","Fragments":["lowercase"]},{"Key":"lowercase if","Fragments":["it"]},{"Key":"\u003cli\u003eThe string","Fragments":["is"]},{"Key":"the separated","Fragments":["by"]},{"Key":"separated by","Fragments":["spaces"]},{"Key":"by spaces","Fragments":["into"]},{"Key":"spaces into","Fragments":["a"]},{"Key":" \u003cli\u003eEach","Fragments":["separated"]},{"Key":"\u003cli\u003eEach separated","Fragments":["`string`"]},{"Key":"separated `string`","Fragments":["is"]},{"Key":"emptyness and","Fragments":["inserted"]},{"Key":"inserted into","Fragments":["the"]},{"Key":"the `return`","Fragments":["`map`\u003c/li\u003e"]},{"Key":"a `map`","Fragments":["`return`"]},{"Key":"`map` `return`","Fragments":["value"]},{"Key":"`return` value","Fragments":["if"]},{"Key":"the `map`","Fragments":["is"]},{"Key":"`map` is","Fragments":["large"]},{"Key":"on `return`","Fragments":["but"]},{"Key":"`return` but","Fragments":["because"]},{"Key":"I iterate","Fragments":["4"]},{"Key":"iterate 4","Fragments":["times"]},{"Key":"4 times","Fragments":["\u003ci\u003ei.e."]},{"Key":"times \u003ci\u003ei.e.","Fragments":["`std::transform`,"]},{"Key":"\u003ci\u003ei.e. `std::transform`,","Fragments":["`boost::split`,"]},{"Key":"`std::transform`, `boost::split`,","Fragments":["`boost::trim`"]},{"Key":"`boost::split`, `boost::trim`","Fragments":["and"]},{"Key":"`boost::trim` and","Fragments":["`for(auto"]},{"Key":"and `for(auto","Fragments":["s"]},{"Key":"`for(auto s","Fragments":[":"]},{"Key":"s :","Fragments":["word_list)`\u003c/i\u003e"]},{"Key":": word_list)`\u003c/i\u003e","Fragments":["this"]},{"Key":"word_list)`\u003c/i\u003e this","Fragments":["program"]},{"Key":"program does","Fragments":["not"]},{"Key":"have optimal","Fragments":["performance.\u003c/ul\u003e"]},{"Key":"only made","Fragments":["the"]},{"Key":"the 'hey'","Fragments":["function"]},{"Key":"'hey' function","Fragments":["a"]},{"Key":"a member","Fragments":["of"]},{"Key":"of class","Fragments":["'bob'.","'bob'.","bob"]},{"Key":"class 'bob'.","Fragments":["So,","Otherwise"]},{"Key":"'bob'. So,","Fragments":["rather"]},{"Key":"So, rather","Fragments":["than"]},{"Key":"than make","Fragments":["all"]},{"Key":"functions members","Fragments":["of"]},{"Key":"of 'bob'","Fragments":["I"]},{"Key":"'bob' I","Fragments":["made"]},{"Key":"I made","Fragments":["them"]},{"Key":"made them","Fragments":["regular"]},{"Key":"them regular","Fragments":["functions."]},{"Key":"have not","Fragments":["used"]},{"Key":"not used","Fragments":["boost"]},{"Key":"used boost","Fragments":["on"]},{"Key":"boost on","Fragments":["the"]},{"Key":"the (few)","Fragments":["C++"]},{"Key":"(few) C++","Fragments":["projects"]},{"Key":"C++ projects","Fragments":["I"]},{"Key":"projects I","Fragments":["have"]},{"Key":"been apart","Fragments":["of,"]},{"Key":"apart of,","Fragments":["I"]},{"Key":"of, I","Fragments":["am"]},{"Key":"too familiar","Fragments":["with"]},{"Key":"with it.","Fragments":["The"]},{"Key":"it. The","Fragments":["only"]},{"Key":"only way","Fragments":["I"]},{"Key":"could get","Fragments":["the"]},{"Key":"pass was","Fragments":["to"]},{"Key":"make 'hey'","Fragments":["a"]},{"Key":"'hey' a","Fragments":["static"]},{"Key":"static member","Fragments":["function","function,"]},{"Key":"member function","Fragments":["of"]},{"Key":"function of","Fragments":["class"]},{"Key":"'bob'. Otherwise","Fragments":["I"]},{"Key":"Otherwise I","Fragments":["would"]},{"Key":"have made","Fragments":["a"]},{"Key":"class for","Fragments":["this"]},{"Key":"Good catch","Fragments":["about"]},{"Key":"catch about","Fragments":["the"]},{"Key":"the crash","Fragments":["on"]},{"Key":"crash on","Fragments":["empty"]},{"Key":"empty string.","Fragments":["I","It's"]},{"Key":"string. I","Fragments":["was"]},{"Key":"a error","Fragments":["on"]},{"Key":"error on","Fragments":["last"]},{"Key":"on last","Fragments":["test"]},{"Key":"last test","Fragments":["case"]},{"Key":"I applied","Fragments":["your"]},{"Key":"applied your","Fragments":["recommendations"]},{"Key":"your recommendations","Fragments":["and"]},{"Key":"recommendations and","Fragments":["submitted"]},{"Key":"and submitted","Fragments":["a"]},{"Key":"submitted a","Fragments":["new"]},{"Key":"Hi @oceane,","Fragments":["I"]},{"Key":"@oceane, I","Fragments":["like"]},{"Key":"of `char*`","Fragments":["and"]},{"Key":"`char*` and","Fragments":["how"]},{"Key":"and how","Fragments":["clean"]},{"Key":"how clean","Fragments":["your"]},{"Key":"clean your","Fragments":["code"]},{"Key":"code is.","Fragments":["A"]},{"Key":"is. A","Fragments":["couple"]},{"Key":"couple things","Fragments":["I"]},{"Key":"would nitpick","Fragments":["that"]},{"Key":"nitpick that","Fragments":["could"]},{"Key":"code even","Fragments":["better"]},{"Key":"even better","Fragments":["is"]},{"Key":"better is","Fragments":["changing"]},{"Key":"is changing","Fragments":["the"]},{"Key":"the `m`","Fragments":["assignment"]},{"Key":"`m` assignment","Fragments":["so"]},{"Key":"assignment so","Fragments":["that"]},{"Key":"that `algo.h`","Fragments":["doesn't"]},{"Key":"`algo.h` doesn't","Fragments":["need"]},{"Key":"included just","Fragments":["for"]},{"Key":"for `min()`","Fragments":["as"]},{"Key":"`min()` as","Fragments":["well"]},{"Key":"as shortening","Fragments":["or"]},{"Key":"shortening or","Fragments":["clarifying"]},{"Key":"or clarifying","Fragments":["the"]},{"Key":"clarifying the","Fragments":["`for`"]},{"Key":"`for` and","Fragments":["`if`"]},{"Key":"and `if`","Fragments":["statement."]},{"Key":"`if` statement.","Fragments":["In"]},{"Key":"statement. In","Fragments":["general,"]},{"Key":"general, try","Fragments":["to"]},{"Key":"of ways","Fragments":["to"]},{"Key":"shorten or","Fragments":["rearrange"]},{"Key":"or rearrange","Fragments":["your"]},{"Key":"rearrange your","Fragments":["code"]},{"Key":"code while","Fragments":["keeping"]},{"Key":"while keeping","Fragments":["the","the"]},{"Key":"same logic","Fragments":["and"]},{"Key":"logic and","Fragments":["increasing"]},{"Key":"and increasing","Fragments":["readability."]},{"Key":" __Too","Fragments":["Many"]},{"Key":"__Too Many","Fragments":["`#include`'s__"]},{"Key":"I'm submitting","Fragments":["an"]},{"Key":"submitting an","Fragments":["iteration"]},{"Key":"iteration that","Fragments":["doesn't"]},{"Key":"have pointless","Fragments":["`#include`'s"]},{"Key":"pointless `#include`'s","Fragments":["now"]},{"Key":"very unprofessional.","Fragments":["I"]},{"Key":"unprofessional. I","Fragments":["feel"]},{"Key":"feel tipsy","Fragments":["now."]},{"Key":" \u003col\u003e\u003cli\u003e","Fragments":["The","The"]},{"Key":"\u003col\u003e\u003cli\u003e The","Fragments":["`size`","`size`"]},{"Key":"The `size`","Fragments":["of","of"]},{"Key":"`size` of","Fragments":["the","the"]},{"Key":"the operation","Fragments":["is","is"]},{"Key":"operation is","Fragments":["determined","determined"]},{"Key":"is determined","Fragments":["by","by"]},{"Key":"determined by","Fragments":["the","the"]},{"Key":"the shortest","Fragments":["length.\u003c/li\u003e","string","length.\u003c/li\u003e"]},{"Key":"is compared","Fragments":["and","and"]},{"Key":"compared and","Fragments":["the","the"]},{"Key":"boolean result","Fragments":["(`0`","(`0`"]},{"Key":"result (`0`","Fragments":["or","or"]},{"Key":"(`0` or","Fragments":["`1`)","`1`)"]},{"Key":"or `1`)","Fragments":["is","is"]},{"Key":"`1`) is","Fragments":["added","added"]},{"Key":"is added","Fragments":["to","to"]},{"Key":"added to","Fragments":["the","the"]},{"Key":"\u003cli\u003eThe difference","Fragments":["is","is"]},{"Key":"difference is","Fragments":["returned.\u003c/li\u003e","returned.\u003c/li\u003e"]},{"Key":" Starting","Fragments":["variables"]},{"Key":"Starting variables","Fragments":["with"]},{"Key":"variables with","Fragments":["an"]},{"Key":"rather unusual","Fragments":["convention,"]},{"Key":"unusual convention,","Fragments":["most"]},{"Key":"convention, most","Fragments":["people"]},{"Key":"most people","Fragments":["capitalize"]},{"Key":"people capitalize","Fragments":["user"]},{"Key":"capitalize user","Fragments":["defined"]},{"Key":"user defined","Fragments":["types"]},{"Key":"defined types","Fragments":["instead."]},{"Key":"are you","Fragments":["taking"]},{"Key":"you taking","Fragments":["the"]},{"Key":"taking the","Fragments":["argument"]},{"Key":"argument to","Fragments":["function"]},{"Key":"to function","Fragments":["\"hey\""]},{"Key":"function \"hey\"","Fragments":["by"]},{"Key":"\"hey\" by","Fragments":["value?"]},{"Key":"The parens","Fragments":["in"]},{"Key":"parens in","Fragments":["is_yell"]},{"Key":"in is_yell","Fragments":["are"]},{"Key":"is_yell are","Fragments":["superfluous"]},{"Key":"are superfluous","Fragments":["and"]},{"Key":"superfluous and","Fragments":["don't"]},{"Key":"and don't","Fragments":["really"]},{"Key":"really add","Fragments":["to"]},{"Key":"add to","Fragments":["clarity"]},{"Key":"to clarity","Fragments":["imo."]},{"Key":"You forgot","Fragments":["to"]},{"Key":"the proper","Fragments":["header"]},{"Key":"proper header","Fragments":["for"]},{"Key":"functions (isalnum","Fragments":["etc.)."]},{"Key":"You made","Fragments":["a"]},{"Key":"a great","Fragments":["leap"]},{"Key":"great leap","Fragments":["from"]},{"Key":"leap from","Fragments":["your"]},{"Key":"your first","Fragments":["commit,","version"]},{"Key":"first commit,","Fragments":["I"]},{"Key":"commit, I","Fragments":["like"]},{"Key":"the unnamed","Fragments":["namespace","namespace"]},{"Key":"unnamed namespace","Fragments":["for","instead"]},{"Key":"namespace \"bob\"","Fragments":["instead"]},{"Key":"\"bob\" instead","Fragments":["of"]},{"Key":"member function,","Fragments":["they"]},{"Key":"function, they","Fragments":["are"]},{"Key":"are syntactically","Fragments":["equivalent"]},{"Key":"syntactically equivalent","Fragments":["from"]},{"Key":"equivalent from","Fragments":["a"]},{"Key":"a callers","Fragments":["perspective."]},{"Key":" Prefixing","Fragments":["utility"]},{"Key":"Prefixing utility","Fragments":["functions"]},{"Key":"utility functions","Fragments":["with"]},{"Key":"the module","Fragments":["name"]},{"Key":"module name","Fragments":["or"]},{"Key":"name or","Fragments":["whatever"]},{"Key":"or whatever","Fragments":["is"]},{"Key":"whatever is","Fragments":["very"]},{"Key":"very C-like,","Fragments":["you"]},{"Key":"C-like, you","Fragments":["may"]},{"Key":"instead (beware","Fragments":["of"]},{"Key":"(beware of","Fragments":["using"]},{"Key":"class definition","Fragments":["to","in"]},{"Key":"source file","Fragments":["too","while"]},{"Key":"file too","Fragments":["and"]},{"Key":"too and","Fragments":["save"]},{"Key":"the forward","Fragments":["declarations."]},{"Key":"forward declarations.","Fragments":["I"]},{"Key":"declarations. I","Fragments":["suppose"]},{"Key":"suppose these","Fragments":["functions"]},{"Key":"functions aren't","Fragments":["meant"]},{"Key":"aren't meant","Fragments":["to"]},{"Key":"called from","Fragments":["the"]},{"Key":"the outside","Fragments":["world"]},{"Key":"outside world","Fragments":["anyway,"]},{"Key":"world anyway,","Fragments":["or"]},{"Key":"anyway, or","Fragments":["why"]},{"Key":"or why","Fragments":["would"]},{"Key":"why would","Fragments":["you"]},{"Key":"would you","Fragments":["move"]},{"Key":"you move","Fragments":["them"]},{"Key":"move them","Fragments":["to"]},{"Key":"file while","Fragments":["keeping"]},{"Key":"definition in","Fragments":["the"]},{"Key":"Pass strings","Fragments":["as"]},{"Key":" Boost","Fragments":["is"]},{"Key":"Boost is","Fragments":["not"]},{"Key":"really necessary","Fragments":["for"]},{"Key":"necessary for","Fragments":["this"]},{"Key":"exercise and","Fragments":["declaring"]},{"Key":"and declaring","Fragments":["the"]},{"Key":"declaring the","Fragments":["classification"]},{"Key":"the classification","Fragments":["functions"]},{"Key":"functions outside","Fragments":["of"]},{"Key":"bob was","Fragments":["certainly"]},{"Key":"was certainly","Fragments":["a"]},{"Key":"certainly a","Fragments":["good"]},{"Key":"The using","Fragments":["std::string"]},{"Key":"using std::string","Fragments":["clause"]},{"Key":"std::string clause","Fragments":["belongs"]},{"Key":"clause belongs","Fragments":["within"]},{"Key":"belongs within","Fragments":["namespace"]},{"Key":"within namespace","Fragments":["bounds,"]},{"Key":"namespace bounds,","Fragments":["especially"]},{"Key":"bounds, especially","Fragments":["since"]},{"Key":"since this","Fragments":["is"]},{"Key":"Your verses","Fragments":["function"]},{"Key":"verses function","Fragments":["could"]},{"Key":"function could","Fragments":["be","be"]},{"Key":"be simplified","Fragments":["to","if"]},{"Key":"simplified to","Fragments":["a"]},{"Key":"single execution","Fragments":["path."]},{"Key":"to omit","Fragments":["the"]},{"Key":"omit the","Fragments":["array"]},{"Key":"the array","Fragments":["size"]},{"Key":"array size","Fragments":["in"]},{"Key":"size in","Fragments":["theVerse's"]},{"Key":"in theVerse's","Fragments":["definition"]},{"Key":"theVerse's definition","Fragments":["to"]},{"Key":"avoid potential","Fragments":["size"]},{"Key":"potential size","Fragments":["mismatches"]},{"Key":"size mismatches","Fragments":["which"]},{"Key":"mismatches which","Fragments":["could"]},{"Key":"which could","Fragments":["happen"]},{"Key":"could happen","Fragments":["easily"]},{"Key":"happen easily","Fragments":["once"]},{"Key":"easily once","Fragments":["verses"]},{"Key":"once verses","Fragments":["are"]},{"Key":"verses are","Fragments":["changed."]},{"Key":"are changed.","Fragments":["You"]},{"Key":"changed. You","Fragments":["may"]},{"Key":"also want","Fragments":["to"]},{"Key":"more definite","Fragments":["name"]},{"Key":"definite name","Fragments":["for"]},{"Key":" Ah,","Fragments":["ok."]},{"Key":"Ah, ok.","Fragments":["Thank"]},{"Key":"ok. Thank","Fragments":["you."]},{"Key":" Wonderful.","Fragments":[":)"]},{"Key":"Wonderful. :)","Fragments":["It"]},{"Key":"much shorter","Fragments":["than"]},{"Key":"shorter than","Fragments":["your"]},{"Key":"than your","Fragments":["first"]},{"Key":"first version","Fragments":["yet"]},{"Key":"version yet","Fragments":["even"]},{"Key":"yet even","Fragments":["more"]},{"Key":"even more","Fragments":["readable."]},{"Key":"readable. Allow","Fragments":["me"]},{"Key":"Allow me","Fragments":["one"]},{"Key":"me one","Fragments":["last"]},{"Key":"one last","Fragments":["remark"]},{"Key":"last remark","Fragments":["concerning"]},{"Key":"remark concerning","Fragments":["the"]},{"Key":"concerning the","Fragments":["_using"]},{"Key":"the _using","Fragments":["directives_"]},{"Key":"_using directives_","Fragments":["in"]},{"Key":"directives_ in","Fragments":["lines"]},{"Key":"lines 5-6:","Fragments":["using"]},{"Key":"5-6: using","Fragments":["```using"]},{"Key":"using ```using","Fragments":["some::namespace```"]},{"Key":"```using some::namespace```","Fragments":["causes"]},{"Key":"some::namespace``` causes","Fragments":["namespace"]},{"Key":"causes namespace","Fragments":["pollution;"]},{"Key":"namespace pollution;","Fragments":["see"]},{"Key":"pollution; see","Fragments":["http://stackoverflow.com/questions/6973161/c-using-keyword"]},{"Key":"see http://stackoverflow.com/questions/6973161/c-using-keyword","Fragments":["(first"]},{"Key":"http://stackoverflow.com/questions/6973161/c-using-keyword (first","Fragments":["answer)"]},{"Key":"(first answer)","Fragments":["or"]},{"Key":"answer) or","Fragments":["http://programmers.stackexchange.com/questions/236404/what-is-using-namespace-pollution"]},{"Key":"or http://programmers.stackexchange.com/questions/236404/what-is-using-namespace-pollution","Fragments":["."]},{"Key":"of bool","Fragments":["flags"]},{"Key":"bool flags","Fragments":["in"]},{"Key":"flags in","Fragments":["use"]},{"Key":"in use","Fragments":["here."]},{"Key":"use here.","Fragments":["Perhaps"]},{"Key":"here. Perhaps","Fragments":["there"]},{"Key":"Perhaps there","Fragments":["is"]},{"Key":"a clearer","Fragments":["way?"]},{"Key":"The STL","Fragments":["provides"]},{"Key":"STL provides","Fragments":["an"]},{"Key":"provides an","Fragments":["algorithm"]},{"Key":"algorithm for","Fragments":["the"]},{"Key":"loop on","Fragments":["line"]},{"Key":"line 16-18,","Fragments":["check"]},{"Key":"16-18, check","Fragments":["std::transform()"]},{"Key":"check at","Fragments":["line"]},{"Key":"line 42?","Fragments":["If"]},{"Key":"42? If","Fragments":["the"]},{"Key":"the iterator","Fragments":["points"]},{"Key":"iterator points","Fragments":["to"]},{"Key":"to end(),","Fragments":["insert()"]},{"Key":"end(), insert()","Fragments":["will"]},{"Key":"insert() will","Fragments":["do"]},{"Key":"Also, grade","Fragments":["can"]},{"Key":"grade can","Fragments":["be"]},{"Key":"simplified if","Fragments":["it"]},{"Key":"no benefit.","Fragments":["Nothing"]},{"Key":"benefit. Nothing","Fragments":["gained"]},{"Key":"Nothing gained","Fragments":["or"]},{"Key":"gained or","Fragments":["lost"]},{"Key":"or lost","Fragments":["by"]},{"Key":"lost by","Fragments":["trying"]},{"Key":"by trying","Fragments":["to"]},{"Key":"as ref.","Fragments":["It's"]},{"Key":"ref. It's","Fragments":["just"]},{"Key":"a benign","Fragments":["habit."]},{"Key":"I hope","Fragments":["you"]},{"Key":"hope you","Fragments":["don't"]},{"Key":"don't write","Fragments":["production"]},{"Key":"write production","Fragments":["code"]},{"Key":"This passes","Fragments":["the"]},{"Key":"given tests","Fragments":["*most"]},{"Key":"tests *most","Fragments":["of","of"]},{"Key":"*most of","Fragments":["the","the"]},{"Key":"the time*.","Fragments":["But"]},{"Key":"time*. But","Fragments":["relying"]},{"Key":"But relying","Fragments":["on"]},{"Key":"relying on","Fragments":["a"]},{"Key":"random number","Fragments":["generator"]},{"Key":"number generator","Fragments":["to"]},{"Key":"generator to","Fragments":["give"]},{"Key":"you unique","Fragments":["values"]},{"Key":"unique values","Fragments":["is"]},{"Key":"values is","Fragments":["not"]},{"Key":"While this","Fragments":["passes"]},{"Key":"this passes","Fragments":["the"]},{"Key":"the time*,","Fragments":["using"]},{"Key":"time*, using","Fragments":["a"]},{"Key":"a RNG","Fragments":["is"]},{"Key":"RNG is","Fragments":["not"]},{"Key":"not safe","Fragments":["to"]},{"Key":"safe to","Fragments":["create"]},{"Key":"create unique","Fragments":["values."]},{"Key":"assume you","Fragments":["start"]},{"Key":"start unit_number","Fragments":["at"]},{"Key":"unit_number at","Fragments":["100"]},{"Key":"at 100","Fragments":["to"]},{"Key":"100 to","Fragments":["have"]},{"Key":"have always","Fragments":["three-digit"]},{"Key":"always three-digit","Fragments":["numbers"]},{"Key":"three-digit numbers","Fragments":["when"]},{"Key":"numbers when","Fragments":["passing"]},{"Key":"when passing","Fragments":["to","an"]},{"Key":"passing to","Fragments":["the"]},{"Key":"the ostream","Fragments":["buff."]},{"Key":"ostream buff.","Fragments":["You"]},{"Key":"buff. You","Fragments":["can"]},{"Key":"can achive","Fragments":["the"]},{"Key":"achive the","Fragments":["same"]},{"Key":"same by","Fragments":["using"]},{"Key":"using I/O","Fragments":["manipulators"]},{"Key":"I/O manipulators","Fragments":["std::setfill('0')"]},{"Key":"manipulators std::setfill('0')","Fragments":["and"]},{"Key":"std::setfill('0') and","Fragments":["std::setw(3)."]},{"Key":"first stack","Fragments":["overflow"]},{"Key":"stack overflow","Fragments":["post,"]},{"Key":"overflow post,","Fragments":["`using"]},{"Key":"post, `using","Fragments":["a::b;`"]},{"Key":"`using a::b;`","Fragments":["is"]},{"Key":"a::b;` is","Fragments":["the"]},{"Key":"do it,","Fragments":["since"]},{"Key":"it, since","Fragments":["that"]},{"Key":"since that","Fragments":["is"]},{"Key":"using declaration","Fragments":["and"]},{"Key":"declaration and","Fragments":["not"]},{"Key":"the declaritive.","Fragments":["The"]},{"Key":"declaritive. The","Fragments":["second"]},{"Key":"The second","Fragments":["one"]},{"Key":"second one","Fragments":["says"]},{"Key":"one says","Fragments":["to"]},{"Key":"says to","Fragments":["possibly"]},{"Key":"to possibly","Fragments":["scope"]},{"Key":"possibly scope","Fragments":["it"]},{"Key":"scope it","Fragments":["out,"]},{"Key":"it out,","Fragments":["so"]},{"Key":"out, so","Fragments":["`map`"]},{"Key":"so `map`","Fragments":["should"]},{"Key":"`map` should","Fragments":["have"]},{"Key":"been left","Fragments":["off"]},{"Key":"left off","Fragments":["since"]},{"Key":"off since","Fragments":["it's"]},{"Key":"used twice,","Fragments":["but"]},{"Key":"twice, but","Fragments":["string"]},{"Key":"but string","Fragments":["is"]},{"Key":"much everywhere","Fragments":["so"]},{"Key":"everywhere so","Fragments":["it"]},{"Key":"thought this","Fragments":["was"]},{"Key":"simple case","Fragments":["of"]},{"Key":"throwing values","Fragments":["in"]},{"Key":"values in","Fragments":["a"]},{"Key":"and returning","Fragments":["them,"]},{"Key":"returning them,","Fragments":["but"]},{"Key":"them, but","Fragments":["I"]},{"Key":"up learning","Fragments":["a"]},{"Key":"learning a","Fragments":["lot"]},{"Key":"things about","Fragments":["const-ness"]},{"Key":"about const-ness","Fragments":["and"]},{"Key":"const-ness and","Fragments":["the"]},{"Key":"the `at`","Fragments":["operator."]},{"Key":"the functional","Fragments":["programming"]},{"Key":"functional programming","Fragments":["features"]},{"Key":"programming features","Fragments":["of"]},{"Key":"features of","Fragments":["C++."]},{"Key":"This solution","Fragments":["uses"]},{"Key":"solution uses","Fragments":["std::mismatch()"]},{"Key":"uses std::mismatch()","Fragments":["algorithm"]},{"Key":"std::mismatch() algorithm","Fragments":["and"]},{"Key":"and std::string","Fragments":["iterators;"]},{"Key":"std::string iterators;","Fragments":["the"]},{"Key":"iterators; the","Fragments":["algorithm"]},{"Key":"is straight","Fragments":["forward:"]},{"Key":"straight forward:","Fragments":["every"]},{"Key":"forward: every","Fragments":["time"]},{"Key":"time a","Fragments":["mismatch"]},{"Key":"a mismatch","Fragments":["is"]},{"Key":"mismatch is","Fragments":["found,"]},{"Key":"is found,","Fragments":["update"]},{"Key":"found, update","Fragments":["the"]},{"Key":"update the","Fragments":["iterators,"]},{"Key":"the iterators,","Fragments":["increase"]},{"Key":"iterators, increase","Fragments":["the"]},{"Key":" distance","Fragments":["and"]},{"Key":"distance and","Fragments":["loop"]},{"Key":"loop once","Fragments":["more."]},{"Key":"don't particularly","Fragments":["like"]},{"Key":"particularly like","Fragments":["this"]},{"Key":"like this","Fragments":["solution,"]},{"Key":"this solution,","Fragments":["because"]},{"Key":"solution, because","Fragments":["of"]},{"Key":"of dependency","Fragments":["on"]},{"Key":"on Boost","Fragments":["and"]},{"Key":"Boost and","Fragments":["having"]},{"Key":"and having","Fragments":["to"]},{"Key":"use `regex_replace`","Fragments":["in"]},{"Key":"`regex_replace` in","Fragments":["each"]},{"Key":"each verse,","Fragments":["and"]},{"Key":"verse, and","Fragments":["twice"]},{"Key":"and twice","Fragments":["at"]},{"Key":"twice at","Fragments":["that."]},{"Key":"at that.","Fragments":["But"]},{"Key":"that. But","Fragments":["this"]},{"Key":"best I","Fragments":["could"]},{"Key":"could come","Fragments":["up"]},{"Key":"with at","Fragments":["the"]},{"Key":"you attacked","Fragments":["this"]},{"Key":"attacked this","Fragments":["problem."]},{"Key":"this problem.","Fragments":["One"]},{"Key":"problem. One","Fragments":["thing"]},{"Key":"would help","Fragments":["however"]},{"Key":"help however","Fragments":["is"]},{"Key":"and still","Fragments":["retain"]},{"Key":"still retain","Fragments":["the"]},{"Key":"retain the","Fragments":["same"]},{"Key":"same logic.","Fragments":["Think"]},{"Key":"logic. Think","Fragments":["about"]},{"Key":"Think about","Fragments":["how"]},{"Key":"the minimum","Fragments":["while"]},{"Key":"minimum while","Fragments":["assigning"]},{"Key":"while assigning","Fragments":["to"]},{"Key":"assigning to","Fragments":["`l`."]},{"Key":"to `l`.","Fragments":["I"]},{"Key":"`l`. I","Fragments":["think"]},{"Key":"best solution","Fragments":["may"]},{"Key":"solution may","Fragments":["involve"]},{"Key":"may involve","Fragments":["a"]},{"Key":"involve a","Fragments":["`std`"]},{"Key":"a `std`","Fragments":["algorithm"]},{"Key":"`std` algorithm","Fragments":["or"]},{"Key":"algorithm or","Fragments":["ternary"]},{"Key":"or ternary","Fragments":["operator."]},{"Key":"ternary operator.","Fragments":["What"]},{"Key":"operator. What","Fragments":["do"]},{"Key":"solution specifically","Fragments":["how"]},{"Key":"specifically how","Fragments":["short"]},{"Key":"and concise","Fragments":["this"]},{"Key":"concise this","Fragments":["code"]},{"Key":" Shall","Fragments":["we"]},{"Key":"Shall we","Fragments":["make"]},{"Key":"we make","Fragments":["it"]},{"Key":" \u003cli\u003eIn","Fragments":["your"]},{"Key":"\u003cli\u003eIn your","Fragments":["code"]},{"Key":"because at","Fragments":["all"]},{"Key":"at all","Fragments":["times"]},{"Key":"all times","Fragments":["`i"]},{"Key":"times `i","Fragments":["="]},{"Key":"`i =","Fragments":["j`"]},{"Key":"= j`","Fragments":["one"]},{"Key":"j` one","Fragments":["of"]},{"Key":"use say","Fragments":["just"]},{"Key":"say just","Fragments":["`i`"]},{"Key":"just `i`","Fragments":["for"]},{"Key":"`i` for","Fragments":["all"]},{"Key":"\u003cli\u003eIf you","Fragments":["find"]},{"Key":"shortest string","Fragments":["and"]},{"Key":"and assign","Fragments":["the"]},{"Key":"assign the","Fragments":["value"]},{"Key":"the value","Fragments":["of"]},{"Key":"its length","Fragments":["to"]},{"Key":"length to","Fragments":["a"]},{"Key":"a variable","Fragments":["before"]},{"Key":"variable before","Fragments":["hand"]},{"Key":"before hand","Fragments":["this"]},{"Key":"hand this","Fragments":["would"]},{"Key":"would stop","Fragments":["the"]},{"Key":"stop the","Fragments":["need"]},{"Key":"compare against","Fragments":["both"]},{"Key":"against both","Fragments":["size"]},{"Key":"both size","Fragments":["values"]},{"Key":"size values","Fragments":["with"]},{"Key":"values with","Fragments":["two"]},{"Key":"with two","Fragments":["incrementers"]},{"Key":"two incrementers","Fragments":["inside"]},{"Key":"incrementers inside","Fragments":["the"]},{"Key":"believe both","Fragments":["of"]},{"Key":"both of","Fragments":["these"]},{"Key":"these would","Fragments":["drastically"]},{"Key":"would drastically","Fragments":["improve"]},{"Key":"drastically improve","Fragments":["readability."]},{"Key":"like you","Fragments":["already"]},{"Key":"you already","Fragments":["did"]},{"Key":"already did","Fragments":["it"]},{"Key":"did it","Fragments":["while"]},{"Key":"it while","Fragments":["I"]},{"Key":"while I","Fragments":["was"]},{"Key":"was typing","Fragments":["this."]},{"Key":"typing this.","Fragments":["Nice!"]},{"Key":"new iteration","Fragments":["a"]},{"Key":"iteration a","Fragments":["lot!"]},{"Key":"a lot!","Fragments":["I"]},{"Key":"lot! I","Fragments":["hate"]},{"Key":"I hate","Fragments":["to"]},{"Key":"hate to","Fragments":["be"]},{"Key":"be so","Fragments":["picky"]},{"Key":"so picky","Fragments":["but"]},{"Key":"picky but","Fragments":["this"]},{"Key":"called nitpicking","Fragments":["so..."]},{"Key":" \u003cul\u003e\u003cli\u003econsider","Fragments":["changing"]},{"Key":" `int","Fragments":["l","l"]},{"Key":"`int l","Fragments":["=","="]},{"Key":"l =","Fragments":["0;","s2.length();`","s1.length()"]},{"Key":" s1.length()","Fragments":["\u003c"]},{"Key":"s1.length() \u003c","Fragments":["s2.length()?","s2.length()?"]},{"Key":"\u003c s2.length()?","Fragments":["l=s1.length()","s1.length()"]},{"Key":"s2.length()? l=s1.length()","Fragments":[":"]},{"Key":"l=s1.length() :","Fragments":["l"]},{"Key":": l","Fragments":["="]},{"Key":"= s1.length()","Fragments":["\u003c"]},{"Key":"s2.length()? s1.length()","Fragments":[":"]},{"Key":"s1.length() :","Fragments":["s2.length();`"]},{"Key":"Use `isspace`","Fragments":["without"]},{"Key":"`isspace` without","Fragments":["the"]},{"Key":"need of","Fragments":["a"]},{"Key":"a lambda","Fragments":["construct.","function"]},{"Key":"lambda construct.","Fragments":["Makes"]},{"Key":"construct. Makes","Fragments":["the"]},{"Key":"Makes the","Fragments":["code"]},{"Key":"I treid","Fragments":["a"]},{"Key":"treid a","Fragments":["namespace"]},{"Key":"namespace and","Fragments":["recieved","removed"]},{"Key":"and recieved","Fragments":["boost"]},{"Key":"recieved boost","Fragments":["errors."]},{"Key":"boost errors.","Fragments":["I"]},{"Key":"errors. I","Fragments":["assumed"]},{"Key":"assumed the","Fragments":["boost"]},{"Key":"boost test","Fragments":["suite"]},{"Key":"suite required","Fragments":["a"]},{"Key":"required a","Fragments":["class,"]},{"Key":"class, so","Fragments":["I"]},{"Key":"I reverted","Fragments":["back"]},{"Key":"reverted back","Fragments":["to"]},{"Key":"to one.","Fragments":["I"]},{"Key":"one. I","Fragments":["have"]},{"Key":"have since","Fragments":["made"]},{"Key":"since made","Fragments":["a"]},{"Key":"namespace work,","Fragments":["I"]},{"Key":"work, I","Fragments":["should"]},{"Key":"have dug","Fragments":["deeper."]},{"Key":"I can,","Fragments":["I"]},{"Key":"can, I","Fragments":["try"]},{"Key":"separate implementation","Fragments":["from"]},{"Key":"implementation from","Fragments":["declaration."]},{"Key":"from declaration.","Fragments":["With"]},{"Key":"declaration. With","Fragments":["a"]},{"Key":"a task","Fragments":["this"]},{"Key":"task this","Fragments":["simple"]},{"Key":"simple it","Fragments":["is"]},{"Key":"is probablty","Fragments":["overkill."]},{"Key":"const is","Fragments":["my"]},{"Key":"my bane","Fragments":["in"]},{"Key":"bane in","Fragments":["C++."]},{"Key":"What platform","Fragments":["did"]},{"Key":"platform did","Fragments":["you"]},{"Key":"run this","Fragments":["on?"]},{"Key":"this on?","Fragments":["There"]},{"Key":"on? There","Fragments":["is"]},{"Key":"no guarantee","Fragments":["that"]},{"Key":"that long","Fragments":["is"]},{"Key":"long is","Fragments":["large"]},{"Key":"large enough,","Fragments":["and"]},{"Key":"enough, and","Fragments":["on"]},{"Key":"and on","Fragments":["my","a"]},{"Key":"my system","Fragments":["(gcc,"]},{"Key":"system (gcc,","Fragments":["x86_64)"]},{"Key":"(gcc, x86_64)","Fragments":["this"]},{"Key":"x86_64) this","Fragments":["won't"]},{"Key":"this won't","Fragments":["work."]},{"Key":"Thanks Max!","Fragments":["Both"]},{"Key":"Max! Both","Fragments":["suggestions"]},{"Key":"Both suggestions","Fragments":["have"]},{"Key":"suggestions have","Fragments":["been"]},{"Key":"- I'm","Fragments":["not"]},{"Key":"remove all","Fragments":["the"]},{"Key":"punctuation and","Fragments":["convert","lowering"]},{"Key":"and convert","Fragments":["to"]},{"Key":"to lower","Fragments":["case"]},{"Key":"case initially","Fragments":["possibly"]},{"Key":"initially possibly","Fragments":["simplifying"]},{"Key":"possibly simplifying","Fragments":["the"]},{"Key":"simplifying the","Fragments":["code"]},{"Key":"code flow","Fragments":["but"]},{"Key":"flow but","Fragments":["doing"]},{"Key":"but doing","Fragments":["possibly"]},{"Key":"doing possibly","Fragments":["slightly"]},{"Key":"possibly slightly","Fragments":["more"]},{"Key":"more work","Fragments":["algorithmically."]},{"Key":"work algorithmically.","Fragments":["Or"]},{"Key":"algorithmically. Or","Fragments":["is"]},{"Key":"Or is","Fragments":["it"]},{"Key":"it better","Fragments":["to"]},{"Key":"to operate","Fragments":["over"]},{"Key":"operate over","Fragments":["individual"]},{"Key":"over individual","Fragments":["words"]},{"Key":"individual words","Fragments":["like"]},{"Key":"words like","Fragments":["I"]},{"Key":"am currently","Fragments":["doing?"]},{"Key":"- It","Fragments":["feels"]},{"Key":"the insertion/increment","Fragments":["of"]},{"Key":"insertion/increment of","Fragments":["the"]},{"Key":"map could","Fragments":["be"]},{"Key":"done more","Fragments":["elegantly"]},{"Key":"more elegantly","Fragments":["but"]},{"Key":"elegantly but","Fragments":["I'm"]},{"Key":"I'm uncertain","Fragments":["how"]},{"Key":"uncertain how","Fragments":["to"]},{"Key":"you say","Fragments":["\"storing"]},{"Key":"say \"storing","Fragments":["[std::regex]"]},{"Key":"\"storing [std::regex]","Fragments":["as"]},{"Key":"[std::regex] as","Fragments":["static"]},{"Key":"local variables\",","Fragments":["is"]},{"Key":"variables\", is","Fragments":["it"]},{"Key":"it enough","Fragments":["to"]},{"Key":"do declare","Fragments":["the"]},{"Key":"declare the","Fragments":["function"]},{"Key":"function as","Fragments":["static","static","static,"]},{"Key":"static ?","Fragments":["(like"]},{"Key":"? (like","Fragments":["iteration"]},{"Key":"(like iteration","Fragments":["3)"]},{"Key":" Or","Fragments":["should"]},{"Key":"Or should","Fragments":["I"]},{"Key":"I declare","Fragments":[":"]},{"Key":"static std::regex","Fragments":["myRegex(\"…\");","reg(\"^"]},{"Key":"of regex,","Fragments":["and"]},{"Key":"regex, and","Fragments":["then"]},{"Key":"then use","Fragments":["it"]},{"Key":"a (possibly","Fragments":["static)"]},{"Key":"(possibly static)","Fragments":["function"]},{"Key":"static) function","Fragments":["?"]},{"Key":" @roman","Fragments":["is"]},{"Key":"@roman is","Fragments":["right."]},{"Key":" Re","Fragments":["read"]},{"Key":"Re read","Fragments":["the"]},{"Key":"the read-me","Fragments":["and"]},{"Key":"read-me and","Fragments":["try"]},{"Key":"a unrelated","Fragments":["note"]},{"Key":"unrelated note","Fragments":["to"]},{"Key":"note to","Fragments":["many"]},{"Key":"to many","Fragments":["\"if\"s,"]},{"Key":"many \"if\"s,","Fragments":["use"]},{"Key":"\"if\"s, use","Fragments":["a"]},{"Key":"statement instead","Fragments":["of"]},{"Key":"that many","Fragments":["\"if\"s."]},{"Key":"lambda function","Fragments":["to"]},{"Key":"reduce looping","Fragments":["through"]},{"Key":"input phrase","Fragments":["by"]},{"Key":"phrase by","Fragments":["removing"]},{"Key":"removing punctuation","Fragments":["and"]},{"Key":"and lowering","Fragments":["the"]},{"Key":"lowering the","Fragments":["case"]},{"Key":"case all","Fragments":["in"]},{"Key":"also streamlined","Fragments":["entering"]},{"Key":"streamlined entering","Fragments":["into"]},{"Key":"your input","Fragments":["file,"]},{"Key":"input file,","Fragments":["but"]},{"Key":"ran it","Fragments":["on"]},{"Key":"it on","Fragments":["a"]},{"Key":"a passwordlist","Fragments":["that"]},{"Key":"passwordlist that","Fragments":["came"]},{"Key":"that came","Fragments":["with"]},{"Key":"came with","Fragments":["cracklib:"]},{"Key":"$ g++","Fragments":["-O3"]},{"Key":"g++ -O3","Fragments":["-std=c++11"]},{"Key":"-O3 -std=c++11","Fragments":["test.cpp"]},{"Key":"-std=c++11 test.cpp","Fragments":["-o"]},{"Key":"test.cpp -o","Fragments":["test"]},{"Key":"$ ln","Fragments":["-s"]},{"Key":"ln -s","Fragments":["/usr/share/dict/cracklib-small"]},{"Key":"-s /usr/share/dict/cracklib-small","Fragments":["INPUT.txt"]},{"Key":"Time: 65212","Fragments":["microseconds."]},{"Key":"element: s","Fragments":["3635","3635","3635"]},{"Key":"Time: 41459","Fragments":["microseconds."]},{"Key":"Time: 42443","Fragments":["microseconds."]},{"Key":"The result","Fragments":["is"]},{"Key":"result is","Fragments":["what"]},{"Key":"is what","Fragments":["I"]},{"Key":"I expected.","Fragments":["I'm"]},{"Key":"expected. I'm","Fragments":["curious"]},{"Key":"I'm curious","Fragments":["though"]},{"Key":"curious though","Fragments":["why"]},{"Key":"though why","Fragments":["for"]},{"Key":"why for","Fragments":["you"]},{"Key":"you the","Fragments":["distance()"]},{"Key":"the distance()","Fragments":["version"]},{"Key":"distance() version","Fragments":["is"]},{"Key":"is slower","Fragments":["than"]},{"Key":"then overwriting","Fragments":["it"]},{"Key":"overwriting it","Fragments":["immediately?"]},{"Key":" First","Fragments":["of"]},{"Key":"First of","Fragments":["to"]},{"Key":"of to","Fragments":["answer"]},{"Key":"to answer","Fragments":["your"]},{"Key":"answer your","Fragments":["question,"]},{"Key":"your question,","Fragments":["since"]},{"Key":"question, since","Fragments":["exercism"]},{"Key":"since exercism","Fragments":["only"]},{"Key":"exercism only","Fragments":["support"]},{"Key":"only support","Fragments":["one"]},{"Key":"support one","Fragments":["file"]},{"Key":"file you","Fragments":["have"]},{"Key":"to integrate","Fragments":["the"]},{"Key":"integrate the","Fragments":["code"]},{"Key":"code into","Fragments":["the"]},{"Key":".h file","Fragments":["or"]},{"Key":"or other","Fragments":["way"]},{"Key":"other way","Fragments":["around."]},{"Key":"For more","Fragments":["info:"]},{"Key":"more info:","Fragments":["http://help.exercism.io/getting-started-with-cpp.html"]},{"Key":"I personalty","Fragments":["prefer"]},{"Key":"personalty prefer","Fragments":["to"]},{"Key":"include all","Fragments":["the"]},{"Key":"functions i","Fragments":["use"]},{"Key":"i use","Fragments":["at"]},{"Key":"use at","Fragments":["the"]},{"Key":"the top,","Fragments":["like"]},{"Key":"top, like","Fragments":["this"]},{"Key":" ```using","Fragments":["std::string;"]},{"Key":"that cleans","Fragments":["it"]},{"Key":"cleans it","Fragments":["up"]},{"Key":"bit, and","Fragments":["makes"]},{"Key":" Secondly","Fragments":["is"]},{"Key":"Secondly is","Fragments":["there"]},{"Key":"a reason","Fragments":["to"]},{"Key":"have word_hash,","Fragments":["and"]},{"Key":"word_hash, and","Fragments":["token_it"]},{"Key":"and token_it","Fragments":["static?"]},{"Key":"just get","Fragments":["some"]},{"Key":"some memory","Fragments":["from"]},{"Key":"memory from","Fragments":["the"]},{"Key":"the heap","Fragments":["when"]},{"Key":"heap when","Fragments":["you"]},{"Key":"Other then","Fragments":["that"]},{"Key":"then that","Fragments":["i"]},{"Key":"i think","Fragments":["it"]},{"Key":"chose to","Fragments":["have"]},{"Key":"have different","Fragments":["versions"]},{"Key":"different versions","Fragments":["of"]},{"Key":"key word,","Fragments":["one"]},{"Key":"word, one","Fragments":["that's"]},{"Key":"one that's","Fragments":["only"]},{"Key":"that's only","Fragments":["lower"]},{"Key":"only lower","Fragments":["case,"]},{"Key":"lower case,","Fragments":["and"]},{"Key":"and another","Fragments":["that's"]},{"Key":"another that's","Fragments":["normalized"]},{"Key":"that's normalized","Fragments":["(lower"]},{"Key":"normalized (lower","Fragments":["case"]},{"Key":"(lower case","Fragments":["and"]},{"Key":"and sorted).","Fragments":["I"]},{"Key":"sorted). I","Fragments":["basically"]},{"Key":"basically chose","Fragments":["speed"]},{"Key":"chose speed","Fragments":["over"]},{"Key":"speed over","Fragments":["space"]},{"Key":"over space","Fragments":["here."]},{"Key":"everything to","Fragments":["a"]},{"Key":"and removed","Fragments":["an"]},{"Key":"removed an","Fragments":["unnecessary"]},{"Key":"unnecessary conversion","Fragments":["of"]},{"Key":"is good","Fragments":["that"]},{"Key":"you went","Fragments":["from"]},{"Key":"went from","Fragments":["a"]},{"Key":"a fixed","Fragments":["size"]},{"Key":"fixed size","Fragments":["char*"]},{"Key":"size char*","Fragments":["to"]},{"Key":"char* to","Fragments":["allocating"]},{"Key":"to allocating","Fragments":["memory."]},{"Key":"are two","Fragments":["issues"]},{"Key":"issues I","Fragments":["would"]},{"Key":"The hey","Fragments":["function"]},{"Key":"split up","Fragments":["into"]},{"Key":"that determine","Fragments":["if"]},{"Key":"determine if","Fragments":["input","a"]},{"Key":"if input","Fragments":["is"]},{"Key":"question, shouting,","Fragments":["empty,"]},{"Key":"shouting, empty,","Fragments":["etc."]},{"Key":"empty, etc.","Fragments":["If"]},{"Key":"etc. If","Fragments":["what"]},{"Key":"If what","Fragments":["constituted"]},{"Key":"what constituted","Fragments":["shouting"]},{"Key":"constituted shouting","Fragments":["changed"]},{"Key":"shouting changed","Fragments":["and"]},{"Key":"changed and","Fragments":["a"]},{"Key":"new type","Fragments":["of"]},{"Key":"of imput/output","Fragments":["was"]},{"Key":"imput/output was","Fragments":["defined"]},{"Key":"was defined","Fragments":["it"]},{"Key":"defined it","Fragments":["would"]},{"Key":"be trivial","Fragments":["to"]},{"Key":"change your","Fragments":["code."]},{"Key":"your code.","Fragments":["Making"]},{"Key":"code. Making","Fragments":["small"]},{"Key":"Making small","Fragments":["functions"]},{"Key":"small functions","Fragments":["that"]},{"Key":"are responsible","Fragments":["for"]},{"Key":"responsible for","Fragments":["only"]},{"Key":"for only","Fragments":["one"]},{"Key":"thing can","Fragments":["reduce"]},{"Key":"can reduce","Fragments":["complexity."]},{"Key":"2. Everything","Fragments":["you"]},{"Key":"Everything you","Fragments":["used"]},{"Key":"the char*","Fragments":["for"]},{"Key":"char* for","Fragments":["could"]},{"Key":"for could","Fragments":["be"]},{"Key":"be accomplished","Fragments":["with"]},{"Key":"accomplished with","Fragments":["std::string."]},{"Key":"with std::string.","Fragments":["Try"]},{"Key":"std::string. Try","Fragments":["Iterators"]},{"Key":"Try Iterators","Fragments":["or"]},{"Key":"Iterators or","Fragments":["accessing"]},{"Key":"or accessing","Fragments":["it"]},{"Key":"accessing it","Fragments":["like"]},{"Key":"an char[].","Fragments":["You"]},{"Key":"char[]. You","Fragments":["could"]},{"Key":"could eliminate","Fragments":["the"]},{"Key":"the calls","Fragments":["to"]},{"Key":"to strcopy","Fragments":["and"]},{"Key":"strcopy and","Fragments":["new/delete."]},{"Key":"and new/delete.","Fragments":["Let"]},{"Key":"new/delete. Let","Fragments":["std::string"]},{"Key":"Let std::string","Fragments":["do"]},{"Key":"std::string do","Fragments":["the"]},{"Key":"the memory","Fragments":["allocation"]},{"Key":"memory allocation","Fragments":["for"]},{"Key":"allocation for","Fragments":["you."]},{"Key":"am brand","Fragments":["new"]},{"Key":"brand new","Fragments":["to"]},{"Key":"to C++,","Fragments":["I"]},{"Key":"C++, I","Fragments":["have"]},{"Key":"feeling I","Fragments":["am"]},{"Key":"am supposed","Fragments":["to"]},{"Key":"be using","Fragments":["memory"]},{"Key":"using memory","Fragments":["references"]},{"Key":"memory references","Fragments":["and"]},{"Key":"and pointers","Fragments":["but"]},{"Key":"pointers but","Fragments":["this"]},{"Key":"work without","Fragments":["them."]},{"Key":"without them.","Fragments":["I"]},{"Key":"them. I","Fragments":["have"]},{"Key":"a background","Fragments":["in"]},{"Key":"in Java","Fragments":["and"]},{"Key":"Java and","Fragments":["C#"]},{"Key":"and C#","Fragments":["and"]},{"Key":"C# and","Fragments":["am"]},{"Key":"and am","Fragments":["definitely"]},{"Key":"am definitely","Fragments":["struggling"]},{"Key":"definitely struggling","Fragments":["with"]},{"Key":"struggling with","Fragments":["converting"]},{"Key":"with converting","Fragments":["those"]},{"Key":"converting those","Fragments":["ideas"]},{"Key":"those ideas","Fragments":["over"]},{"Key":"ideas over","Fragments":["to"]},{"Key":"there an","Fragments":["easier"]},{"Key":"an easier","Fragments":["way"]},{"Key":"easier way","Fragments":["to"]},{"Key":"to determine","Fragments":["if"]},{"Key":"contains letters,","Fragments":["only"]},{"Key":"letters, only","Fragments":["numbers,"]},{"Key":"only numbers,","Fragments":["or"]},{"Key":"numbers, or","Fragments":["is"]},{"Key":"or is","Fragments":["empty?"]},{"Key":"is empty?","Fragments":["I"]},{"Key":"empty? I","Fragments":["was"]},{"Key":"a compiler","Fragments":["error"]},{"Key":"compiler error","Fragments":["when"]},{"Key":"error when","Fragments":["passing"]},{"Key":"passing an","Fragments":["empty"]},{"Key":"string `\"\"`","Fragments":["at"]},{"Key":"`\"\"` at","Fragments":["this"]},{"Key":"at this","Fragments":["line"]},{"Key":"this line","Fragments":["`std::string::npos"]},{"Key":"line `std::string::npos","Fragments":["!="]},{"Key":"`std::string::npos !=","Fragments":["message.find_first_of`,"]},{"Key":"!= message.find_first_of`,","Fragments":["so"]},{"Key":"message.find_first_of`, so","Fragments":["the"]},{"Key":"best way","Fragments":["I"]},{"Key":"could figure","Fragments":["to"]},{"Key":"figure to","Fragments":["avoid"]},{"Key":"avoid that","Fragments":["was"]},{"Key":"add a","Fragments":["check"]},{"Key":"string was","Fragments":["empty"]},{"Key":"was empty","Fragments":["at"]},{"Key":"empty at","Fragments":["the"]},{"Key":" Thinking","Fragments":["about"]},{"Key":"Thinking about","Fragments":["this"]},{"Key":"code now,","Fragments":["it"]},{"Key":"now, it","Fragments":["seems"]},{"Key":"a for()","Fragments":["loop"]},{"Key":"for() loop","Fragments":["would"]},{"Key":"loop would","Fragments":["have"]},{"Key":"been easier","Fragments":["to"]},{"Key":"and possibly","Fragments":["read."]},{"Key":"possibly read.","Fragments":["There"]},{"Key":"read. There","Fragments":["is"]},{"Key":"of setup","Fragments":["and"]},{"Key":"setup and","Fragments":["extra"]},{"Key":"and extra","Fragments":["work"]},{"Key":"extra work","Fragments":["to"]},{"Key":"work to","Fragments":["create"]},{"Key":"create initial","Fragments":["and"]},{"Key":"initial and","Fragments":["final"]},{"Key":"and final","Fragments":["pairs"]},{"Key":"final pairs","Fragments":["as"]},{"Key":"pairs as","Fragments":["well"]},{"Key":"as incrementing","Fragments":["the"]},{"Key":"incrementing the","Fragments":["mismatch"]},{"Key":"the mismatch","Fragments":["pair."]},{"Key":"feel this","Fragments":["is"]},{"Key":"a far","Fragments":["simpler"]},{"Key":"far simpler","Fragments":["but"]},{"Key":"simpler but","Fragments":["probably"]},{"Key":"but probably","Fragments":["not"]},{"Key":"as \"C++-esque\"","Fragments":["solution"]},{"Key":"\"C++-esque\" solution","Fragments":["to"]},{"Key":"problem. A","Fragments":["simple"]},{"Key":"loop, no","Fragments":["algorithmic"]},{"Key":"no algorithmic","Fragments":["iteration"]},{"Key":"algorithmic iteration","Fragments":["or"]},{"Key":"iteration or","Fragments":["pairs"]},{"Key":"or pairs","Fragments":["involved."]},{"Key":"bool isBlank(std::string","Fragments":["str)"]},{"Key":"isBlank(std::string str)","Fragments":["{"]},{"Key":"std::regex reg(\"^","Fragments":["*$\")"]},{"Key":"return std::regex_match(str,","Fragments":["reg);"]},{"Key":" Declaring","Fragments":["the"]},{"Key":"Declaring the","Fragments":["function"]},{"Key":"static won't","Fragments":["make"]},{"Key":"won't make","Fragments":["the"]},{"Key":"regex be.","Fragments":["The"]},{"Key":"be. The","Fragments":["way"]},{"Key":"way above,","Fragments":["`reg`"]},{"Key":"above, `reg`","Fragments":["will"]},{"Key":"`reg` will","Fragments":["be"]},{"Key":"be created","Fragments":["the"]},{"Key":"created the","Fragments":["first"]},{"Key":"time the","Fragments":["function"]},{"Key":"called. After","Fragments":["that,"]},{"Key":"After that,","Fragments":["it'll"]},{"Key":"that, it'll","Fragments":["use"]},{"Key":"it'll use","Fragments":["the"]},{"Key":"same object","Fragments":["every"]},{"Key":"object every","Fragments":["time."]},{"Key":"you declare","Fragments":["a"]},{"Key":"a (non-class)","Fragments":["function"]},{"Key":"(non-class) function","Fragments":["as"]},{"Key":"as static,","Fragments":["it'll"]},{"Key":"static, it'll","Fragments":["be"]},{"Key":"be invisible","Fragments":["outside"]},{"Key":"invisible outside","Fragments":["of"]},{"Key":"its translation","Fragments":["unit."]},{"Key":"unit. As","Fragments":["a"]},{"Key":"As a","Fragments":["rule"]},{"Key":"a rule","Fragments":["of"]},{"Key":"rule of","Fragments":["thumb:"]},{"Key":"of thumb:","Fragments":["if"]},{"Key":"thumb: if","Fragments":["you"]},{"Key":"what that","Fragments":["means,"]},{"Key":"that means,","Fragments":["you"]},{"Key":"means, you","Fragments":["won't"]},{"Key":"you won't","Fragments":["need"]},{"Key":"won't need","Fragments":["it"]},{"Key":" **Took","Fragments":["the"]},{"Key":"**Took the","Fragments":["advice"]},{"Key":"the advice","Fragments":["of"]},{"Key":"advice of","Fragments":["@annamae**"]},{"Key":" \u003cul\u003e\u003cli\u003eMade","Fragments":["the"]},{"Key":"\u003cul\u003e\u003cli\u003eMade the","Fragments":["variable"]},{"Key":"names more","Fragments":["generic\u003c/li\u003e"]},{"Key":" \u003cli\u003eRemoved","Fragments":["`size_t`"]},{"Key":"\u003cli\u003eRemoved `size_t`","Fragments":["instances"]},{"Key":"`size_t` instances","Fragments":["and"]},{"Key":"instances and","Fragments":["replced"]},{"Key":"and replced","Fragments":["them"]},{"Key":"replced them","Fragments":["with"]},{"Key":"them with","Fragments":["`uint`"]},{"Key":"with `uint`","Fragments":["\u003c/li\u003e"]},{"Key":" \u003cli\u003eMade","Fragments":["use"]},{"Key":"\u003cli\u003eMade use","Fragments":["of"]},{"Key":"the `std::min`","Fragments":["function.\u003c/li\u003e"]},{"Key":" \u003cli\u003e`diff`","Fragments":["is"]},{"Key":"\u003cli\u003e`diff` is","Fragments":["now"]},{"Key":"now signalled","Fragments":["for"]},{"Key":"signalled for","Fragments":["a"]},{"Key":"a possible","Fragments":["`register`"]},{"Key":"possible `register`","Fragments":["placement"]},{"Key":"`register` placement","Fragments":["which"]},{"Key":"placement which","Fragments":["would"]},{"Key":"would increase","Fragments":["performance"]},{"Key":"increase performance","Fragments":["especially"]},{"Key":"performance especially","Fragments":["with"]},{"Key":"especially with","Fragments":["large"]},{"Key":"with large","Fragments":["strings\u003c/li\u003e\u003c/ul\u003e"]},{"Key":"first guess","Fragments":["was"]},{"Key":"guess was","Fragments":["that"]},{"Key":"was that","Fragments":["it"]},{"Key":"third version","Fragments":["only"]},{"Key":"only modifies","Fragments":["the"]},{"Key":"length once","Fragments":["whereas"]},{"Key":"once whereas","Fragments":["back_inserter"]},{"Key":"whereas back_inserter","Fragments":["calls"]},{"Key":"back_inserter calls","Fragments":["push_back"]},{"Key":"calls push_back","Fragments":["once"]},{"Key":"push_back once","Fragments":["for"]},{"Key":"once for","Fragments":["every"]},{"Key":"for every","Fragments":["character.","element."]},{"Key":"every character.","Fragments":["MSVC"]},{"Key":"character. MSVC","Fragments":["might"]},{"Key":"MSVC might","Fragments":["have"]},{"Key":"overhead if","Fragments":["`length`"]},{"Key":"if `length`","Fragments":["changes."]},{"Key":"`length` changes.","Fragments":["Copy-construction"]},{"Key":"changes. Copy-construction","Fragments":["is"]},{"Key":"Copy-construction is","Fragments":["only"]},{"Key":"only a","Fragments":["memcpy."]},{"Key":"But then","Fragments":["I"]},{"Key":"I poked","Fragments":["around"]},{"Key":"poked around","Fragments":["a"]},{"Key":"around a","Fragments":["bit"]},{"Key":"bit and","Fragments":["it"]},{"Key":"it turned","Fragments":["out"]},{"Key":"out it","Fragments":["matters"]},{"Key":"it matters","Fragments":["whether"]},{"Key":"matters whether","Fragments":["the"]},{"Key":"that I'm","Fragments":["transforming"]},{"Key":"I'm transforming","Fragments":["has"]},{"Key":"transforming has","Fragments":["the"]},{"Key":"right content","Fragments":["already."]},{"Key":"My guess","Fragments":["now"]},{"Key":"guess now","Fragments":["is"]},{"Key":"is branch","Fragments":["prediction."]},{"Key":"branch prediction.","Fragments":["Since"]},{"Key":"prediction. Since","Fragments":["most"]},{"Key":"Since most","Fragments":["characters"]},{"Key":"most characters","Fragments":["in"]},{"Key":"in natural","Fragments":["English"]},{"Key":"natural English","Fragments":["language"]},{"Key":"English language","Fragments":["are"]},{"Key":"language are","Fragments":["lower-case,"]},{"Key":"are lower-case,","Fragments":["the"]},{"Key":"lower-case, the","Fragments":["branch"]},{"Key":"the branch","Fragments":["prediction"]},{"Key":"branch prediction","Fragments":["will"]},{"Key":"prediction will","Fragments":["probably"]},{"Key":"will probably","Fragments":["end"]},{"Key":"probably end","Fragments":["up"]},{"Key":"up predicting","Fragments":["that"]},{"Key":"predicting that","Fragments":["no"]},{"Key":"that no","Fragments":["memory"]},{"Key":"no memory","Fragments":["write"]},{"Key":"memory write","Fragments":["has"]},{"Key":"write has","Fragments":["to"]},{"Key":"be performed,","Fragments":["which"]},{"Key":"performed, which","Fragments":["is"]},{"Key":"is mostly","Fragments":["correct"]},{"Key":"mostly correct","Fragments":["for"]},{"Key":"correct for","Fragments":["the"]},{"Key":"the version","Fragments":["where"]},{"Key":"version where","Fragments":["I"]},{"Key":"am copy-constructing","Fragments":["the"]},{"Key":"copy-constructing the","Fragments":["string"]},{"Key":"string (the","Fragments":["ratio"]},{"Key":"(the ratio","Fragments":["of"]},{"Key":"ratio of","Fragments":["upper-case"]},{"Key":"of upper-case","Fragments":["to"]},{"Key":"upper-case to","Fragments":["lower-case"]},{"Key":"to lower-case","Fragments":["letters"]},{"Key":"lower-case letters","Fragments":["is"]},{"Key":"letters is","Fragments":["like"]},{"Key":"is like","Fragments":["1:40"]},{"Key":"like 1:40","Fragments":["or"]},{"Key":"1:40 or","Fragments":["so)."]},{"Key":"the `back_inserter`","Fragments":["method,"]},{"Key":"`back_inserter` method,","Fragments":["every"]},{"Key":"method, every","Fragments":["character"]},{"Key":"every character","Fragments":["will"]},{"Key":"character will","Fragments":["force"]},{"Key":"will force","Fragments":["a"]},{"Key":"force a","Fragments":["memory"]},{"Key":"a memory","Fragments":["write."]},{"Key":"So my","Fragments":["CPU"]},{"Key":"my CPU","Fragments":["might"]},{"Key":"CPU might","Fragments":["just"]},{"Key":"might just","Fragments":["be"]},{"Key":"just be","Fragments":["better"]},{"Key":"better (or","Fragments":["worse)"]},{"Key":"(or worse)","Fragments":["at"]},{"Key":"worse) at","Fragments":["exploiting"]},{"Key":"at exploiting","Fragments":["branches,"]},{"Key":"exploiting branches,","Fragments":["or"]},{"Key":"branches, or","Fragments":["your"]},{"Key":"or your","Fragments":["password"]},{"Key":"your password","Fragments":["file"]},{"Key":"password file","Fragments":["has"]},{"Key":"file has","Fragments":["a"]},{"Key":"better distribution","Fragments":["of"]},{"Key":"distribution of","Fragments":["upper-"]},{"Key":"of upper-","Fragments":["and"]},{"Key":"upper- and","Fragments":["lower-case"]},{"Key":"and lower-case","Fragments":["chars,"]},{"Key":"lower-case chars,","Fragments":["forcing"]},{"Key":"chars, forcing","Fragments":["your"]},{"Key":"forcing your","Fragments":["CPU"]},{"Key":"your CPU","Fragments":["to"]},{"Key":"CPU to","Fragments":["flush"]},{"Key":"to flush","Fragments":["its"]},{"Key":"flush its","Fragments":["pipes"]},{"Key":"its pipes","Fragments":["more"]},{"Key":"pipes more","Fragments":["often."]},{"Key":"string through","Fragments":["a"]},{"Key":"through a","Fragments":["randomizer"]},{"Key":"a randomizer","Fragments":["to"]},{"Key":"randomizer to","Fragments":["confuse"]},{"Key":"to confuse","Fragments":["branch"]},{"Key":"confuse branch","Fragments":["prediction:"]},{"Key":" for(","Fragments":["char\u0026"]},{"Key":"for( char\u0026","Fragments":["c"]},{"Key":"char\u0026 c","Fragments":[":"]},{"Key":": file","Fragments":["){"]},{"Key":"if( rand()","Fragments":["%"]},{"Key":"rand() %","Fragments":["2"]},{"Key":"% 2","Fragments":[")"]},{"Key":") c","Fragments":["="]},{"Key":"= toupper(","Fragments":["c"]},{"Key":"toupper( c","Fragments":[");"]},{"Key":"else c","Fragments":["="]},{"Key":"= tolower(","Fragments":["c"]},{"Key":"tolower( c","Fragments":[");"]},{"Key":"The difference","Fragments":["between"]},{"Key":"difference between","Fragments":["the"]},{"Key":"between the","Fragments":["first"]},{"Key":"and third","Fragments":["test"]},{"Key":"third test","Fragments":["shrinks,"]},{"Key":"test shrinks,","Fragments":["but"]},{"Key":"shrinks, but","Fragments":["the"]},{"Key":"the copy-construction","Fragments":["still"]},{"Key":"copy-construction still","Fragments":["is"]},{"Key":"still is","Fragments":["the"]},{"Key":"the fastest.","Fragments":["So"]},{"Key":"fastest. So","Fragments":["that"]},{"Key":"doesn't seem","Fragments":["to"]},{"Key":"thing influencing","Fragments":["it."]},{"Key":"Did a","Fragments":["performance"]},{"Key":"performance analysis","Fragments":["on"]},{"Key":"analysis on","Fragments":["a"]},{"Key":"a run","Fragments":["of"]},{"Key":"run of","Fragments":["the"]},{"Key":"the project","Fragments":["and"]},{"Key":"project and","Fragments":["dug"]},{"Key":"and dug","Fragments":["myself"]},{"Key":"dug myself","Fragments":["through"]},{"Key":"myself through","Fragments":["Microsoft's"]},{"Key":"through Microsoft's","Fragments":["string"]},{"Key":"Microsoft's string","Fragments":["implementation."]},{"Key":"string implementation.","Fragments":["The"]},{"Key":"implementation. The","Fragments":["rest"]},{"Key":"The rest","Fragments":["of"]},{"Key":"overhead seems","Fragments":["to"]},{"Key":"to come","Fragments":["from"]},{"Key":"overhead of","Fragments":["`back_inserter`"]},{"Key":"of `back_inserter`","Fragments":["calling"]},{"Key":"`back_inserter` calling","Fragments":["`push_back`"]},{"Key":"calling `push_back`","Fragments":["for"]},{"Key":"`push_back` for","Fragments":["every"]},{"Key":"every element.","Fragments":["Partly"]},{"Key":"element. Partly","Fragments":["because"]},{"Key":"Partly because","Fragments":["`push_back`"]},{"Key":"because `push_back`","Fragments":["needs"]},{"Key":"`push_back` needs","Fragments":["to"]},{"Key":"to grow","Fragments":["before"]},{"Key":"grow before","Fragments":["insertion"]},{"Key":"before insertion","Fragments":["can"]},{"Key":"insertion can","Fragments":["be"]},{"Key":"I haven't","Fragments":["done"]},{"Key":"haven't done","Fragments":["any"]},{"Key":"done any","Fragments":["really"]},{"Key":"any really","Fragments":["advanced"]},{"Key":"really advanced","Fragments":["programming,"]},{"Key":"advanced programming,","Fragments":["but"]},{"Key":"programming, but","Fragments":["the"]},{"Key":"you incremented","Fragments":["`i`"]},{"Key":"incremented `i`","Fragments":["in"]},{"Key":"`i` in","Fragments":["both"]},{"Key":"in both","Fragments":["loops"]},{"Key":"both loops","Fragments":["was"]},{"Key":"loops was","Fragments":["something"]},{"Key":"was something","Fragments":["I'd"]},{"Key":"something I'd","Fragments":["never"]},{"Key":"I'd never","Fragments":["really"]},{"Key":"never really","Fragments":["seen"]},{"Key":"really seen","Fragments":["before."]},{"Key":"seen before.","Fragments":["Neat."]},{"Key":"might could","Fragments":["use"]},{"Key":"code neater","Fragments":["would"]},{"Key":"neater would","Fragments":["be"]},{"Key":"the big","Fragments":["`std::transform()`"]},{"Key":"big `std::transform()`","Fragments":["call"]},{"Key":"`std::transform()` call","Fragments":["on"]},{"Key":"on lines","Fragments":["15/16"]},{"Key":"lines 15/16","Fragments":["and"]},{"Key":"15/16 and","Fragments":["instead"]},{"Key":"instead change","Fragments":["line"]},{"Key":"change line","Fragments":["11"]},{"Key":"line 11","Fragments":["to"]},{"Key":"11 to","Fragments":["`currentWord.append(1,"]},{"Key":"to `currentWord.append(1,","Fragments":["std::tolower(sentence[i]));`"]},{"Key":" Are","Fragments":["the"]},{"Key":"Are the","Fragments":["includes"]},{"Key":"the includes","Fragments":["for"]},{"Key":"includes for","Fragments":["`\u003cmap\u003e`,"]},{"Key":"for `\u003cmap\u003e`,","Fragments":["`\u003cstring\u003e`,"]},{"Key":"`\u003cmap\u003e`, `\u003cstring\u003e`,","Fragments":["and"]},{"Key":"`\u003cstring\u003e`, and","Fragments":["`\u003ccctype\u003e`"]},{"Key":"and `\u003ccctype\u003e`","Fragments":["in"]},{"Key":"`\u003ccctype\u003e` in","Fragments":["your"]},{"Key":"header file?","Fragments":["I"]},{"Key":"file? I","Fragments":["guess"]},{"Key":"should assume","Fragments":["so,"]},{"Key":"assume so,","Fragments":["but"]},{"Key":"so, but","Fragments":["the"]},{"Key":"they aren't","Fragments":["visible"]},{"Key":"aren't visible","Fragments":["in"]},{"Key":"visible in","Fragments":["your"]},{"Key":"your source","Fragments":["made"]},{"Key":"source made","Fragments":["me"]},{"Key":"made me","Fragments":["wonder."]},{"Key":"me wonder.","Fragments":["It"]},{"Key":"wonder. It","Fragments":["seems"]},{"Key":"more intuitive","Fragments":["to"]},{"Key":"intuitive to","Fragments":["contain"]},{"Key":"entire solution","Fragments":["in"]},{"Key":"one file,","Fragments":["or"]},{"Key":"file, or","Fragments":["at"]},{"Key":"least easier","Fragments":["to"]},{"Key":"boost library.","Fragments":["Just"]},{"Key":"library. Just","Fragments":["remember"]},{"Key":"Just remember","Fragments":["that"]},{"Key":"remember that","Fragments":["`str.back()`"]},{"Key":"that `str.back()`","Fragments":["will"]},{"Key":"`str.back()` will","Fragments":["cause"]},{"Key":"will cause","Fragments":["undefined"]},{"Key":"cause undefined","Fragments":["behavior"]},{"Key":"behavior if","Fragments":["you"]},{"Key":"it an","Fragments":["empty"]},{"Key":"string. It's","Fragments":["not"]},{"Key":"suite, but","Fragments":["in"]},{"Key":"a real-world","Fragments":["application"]},{"Key":"real-world application","Fragments":["that"]},{"Key":"application that","Fragments":["would"]},{"Key":"something you'd","Fragments":["probably"]},{"Key":"you'd probably","Fragments":["want"]},{"Key":"probably want","Fragments":["to"]},{"Key":"to account","Fragments":["for."]},{"Key":"account for.","Fragments":["Also"]},{"Key":"for. Also","Fragments":["not"]},{"Key":"Also not","Fragments":["in"]},{"Key":"suite, if","Fragments":["you"]},{"Key":"were given","Fragments":["a"]},{"Key":"given a","Fragments":["string"]},{"Key":"and newlines,","Fragments":["I"]},{"Key":"newlines, I","Fragments":["don't"]},{"Key":"think `trim_left_copy(str)`","Fragments":["on"]},{"Key":"`trim_left_copy(str)` on","Fragments":["line"]},{"Key":"line 28","Fragments":["would"]},{"Key":"28 would","Fragments":["leave"]},{"Key":"leave you","Fragments":["with"]},{"Key":"you with","Fragments":["an"]}],"prefix_len":2}