{"Data":{" ":["yes.","Will","\\*","@oma","Thank","yes,","Assumes","instead","`range","Right","Oh","Oops.","Or","Thanks","Oops,","Why","Good","I","Neat!","I","sorry,","Nice!","wrong","ah,","Done!","Hmh,","Agreed!","This","@reginald","`[1,","This","Beautiful!","Looks","It's","Can","Thanks","thanks","Spaces","You","@rollin,","I","@eunice,","Can","The","Thanks","This","Oh,","This","You","Thanks,","^","I'm","The","Do","Try","If","h&gt;","[1","Ok,","h&gt;","wordCount","--","It's","`import","There's","This","Well,","I","The","I","Still","I","Please","It","Overall","In","There's","Normally","transcribeThymidineToUracil","transcribeThymidineToUracil","transcribeThymidineToUracil","If","thymidineToUracil","|","I","Also","For","You","Can","It's","Most","Have","Can","I","In","I'm","But","I","Ah","There","It","Well,","There's","I","I","There","`fromListWith`","I'd","If","You","Many","summarize","So","`foldl'`","Since","Yeah,","(according","So","Good","Can","Thanks","My","Can","I","`foldl`","There's","Have","I","There's","I","The","Pattern","Here's","transcribe","transcribe","transcribe","To","toRNA","toRNA","toRNA","I","I'd","The","`f(x)`","Can","Have","It's","It's","I","Instead","My","In","It","Have","Rather","Take","Doh!","`reverse","`flip","Thanks!","It's","How","Nice","@judge","`isAlphaNum`?","`isLetter`","An","Yeah!","Ignore","Like","Put","I'd","Using","Hi,","Oh,","Happy?","I","-&gt;","`test","`test","try","All","@cristina","Uhm,","Thanks!","Beautiful!","Maybe","You","you","@frederik","That's","```import","```where...```","Cool,","@uriah","Do","Did","That","Ah,","Great","Sorry,","Whoops,","Creative","Ah,","You","-","-","I","The","I","Ooh,","I","Oh,","Thanks","`String","Maybe","Thanks,","`isUpperOrSpecial","Can","If","`isSilence`","Thanks!","Ignore","Oh,","Using","Better","Switched","Could","Lets","What","```isSilence```","Try","Thanks","I'd","Great!","I'd","This","I","Oh,","Checking","It'll","Boom.","I","Can","I","I","You","The","I","`Set`","Another","You","Looks","zhanrnl:","That","Well,","I","Take","Still,","Looks","A","Good","I","Good","If","Yeah,","Thanks.","Looks","Aha!","Nice!","That’s","gnuvince","Attempted","Code","No","By","Ignore","thanks.","There","Really","Fair","Looks","Nicer!","Ahaha,","```(==)","Oops,","Fixed","Ha","looks","ah.","and","Oh,","Is","Alright,","If","agree","Moved","[[Ignore","If","Your","IMHO","you","guards","but","Nice,","You","sorry,","Thanks","I'm","Okay,","Another","Couldn't","I","Still","Not","Data.List.Split","@liza,","Is","Agree","Er,","I","That's","`isQuestion`","Good","i","I'd","Looks","You","Otherwise","i","From","used","Nice","Is","Looks","As","I","Okay,","`toRNA","If","Ooh,","First","The","`and","Wow,","Might","Good","Check","I","`sort","Thanks,","Remembering","I","I","You","This","Yeah,","Oh,","It's","I","that's","```foldr","I","Thanks","Good","Ok,","I'm","`Data.Char`","Ignore","how","Yeah,","@fay","You","I","Switched","Your","Copy","I","It","Looks","You","I","Conventionally","The","This","I'm","Performance","Agreed.","`flip","Oh,","Try","Updated","drop","Sure","&amp;&amp;","The","Can","I","I","fixed","good","Second","agreeing","Hmm,","You","Looks","I","Yeah.","Short","Silly","`normalize`","I","You","Simplified","Aww…","I","It's","Fixed","I","import","parseNumber'","parseNumber'","|","|","|","where","('1':no')","Looks","You","responseFor","|","|","|","Could","hmm.","other","You","This","Normally","There","import","arrowPairs","zipPairs","mapPairs","--","mapTupleSections","I","@xavier:","Minor","you","```hs","toRNA","toRNA","```",":)","I","Somebody","So","Oh","1.","2.","```zipWith","Thanks","Pulling","Kimhyunkang","Thanks","I","Will","This","I'd","This","The","Whis","inAnagram","where","but","It","```haskell","foo","|","|","```","Other","Control.Arrow's","Cool,","Somehow","you","You","Also,","h&gt;","h&gt;","h&gt;","***","h&gt;","Just","The","Another","isPunctuation","I","Data.List.Split","Also,","h&gt;","h&gt;","h&gt;","***","h&gt;","Just","The","Data.List.Split","You","I","A","My","```haskell","responseFor","|","isSilence","isSilence","```","I","I","Nice","You","Here's","Basically","It","Could","Until","Could","I","EDIT:","Almost","Removed","Thanks","I","Oh","The","These","Just","By","You","There's","I'm","To","Using","My","`###","expected:","but","It","I","Yes,","That's","Of","You","Indeed,","Arf","Could","Looks","Thanks","\"Reverted\"","I","Grr,","Still","Yes!","I'm","Sorry,","`toList`","`M.toList`","With","Currently,","That's","(EDIT:","As","I","I'm","Yup,","In","If","You","You","You're","I'd","Your","Yes,","`Day`","Elegant","It'd","However,","Take","how","Also","Twisol","@etha:","Silly","Those","```concat","Also,","I","If","looks","Hmm,","You're","One","`case","It's","So","(P.S.","I","All","The","````Haskell","test_respondsToSilence","test_respondsToSilence","\"Fine.","test_respondsToProlongedSilence","test_respondsToProlongedSilence","\"Fine.","test_respondsToOtherWhitespace","test_respondsToOtherWhitespace","\"Fine.","Lambda","I'd","Likewise","Strange","Fair","Using","You","Based","I","Finally","It's","So,","i","For","My","I","I","Thank","I","@carrie","If","h&gt;","h&gt;","[10,9,8,7,6,5,4,3,2,1,0]","I'd","Nice!","`not","I","Sorry,","You","I","I","As","Forgot","*","*","```","add","add","```","*","*","Besides","A","The","You","Otherwise","I","I","You","I","You","I","I'm","I","I'm","Similarly,","I","You","Since","`isJibbersish`","Lastly,","I","But","Also,","Poor","*","*","Thanks","Is","The","I","Looks","You","i","i","you","you","but","Try","*","*","You","Unless","I'm","try","try","you","I","toRNA","ctoRNA","ctoRNA","...but","pointfree","I","This","Thanks","Yeah,","There","-","-","If","Thanks!","Well,","Good","Looking","The","Maybe","`enumFromThenTo`","It","Also,","h&gt;","h&gt;","h&gt;","***","h&gt;","Just","The","Well","transcribeBase","|","|","|","which","I","Data.List.Split","There's","Data.List.Split","Also,","h&gt;","h&gt;","h&gt;","***","h&gt;","Just","The","another","I","Using","Also,","You","It","`findWithDefault`","For","For","Using","Well,","Looking","`fromMaybe`","In","As","I","Consequence","It","However,","Looking","Huh.","###","expected:","but","Cases:","Looks","@loyce,","Well","all","but","I","`isSuffixOf`","Regarding","As","To","```haskell","translate","|","|","```","Similarly","```","translate","translate","```","where","Looks","Not","In","```haskell","nucleotideToRNA","nucleotideToRNA","nucleotideToRNA","I","`isSuffixOf`","The","Perhaps","h&gt;","\"bar\"","There's","Using","h&gt;","h&gt;","h&gt;","***","h&gt;","Just","The","Can","Also,","h&gt;","h&gt;","h&gt;","***","h&gt;","Just","I","I","Looks","Nicely","I've","responseFor","responseFor","|","|","|","To","Also,","I","I","Or","1.","2.","3.","4.","You","Whoops,","`all`","You","The","Well,","`number`","@erling","I","Instead","Consider","Consider","Happy","Hmm,","It's","@zola","Well","Whoops","I","So","I","Think","`a","I","I","But","You","Foldable","I","You","It","My","Have","If","I","A","Got","The","The","I","```","toRNA","toRNA","where","replaceThymine","```","Is","I","Also","Considered","P.S.","use","looks","Thanks!","You","it","arguably","```haskell","anagramFor","```","and","i","```not.isAlphaNum```","Though","Maybe","```haskell","total","```","But...","i","I","```","all","```","And","Sure,","I","There's","`foldr`","There","This","You","```{-#","Above","```haskell","(\\x","```","I","Ok,","And","Actually,","Haha.","With","Come","I","You","*","*","Other","I","Thank","i","```haskell","module","import","import","wordCount","wordCount","where","|","|","|","```","but","or","Overall,","Adding","For","Of","With","responseFor","Makes","Edit:","I","```haskell","convertAcid","convertAcid","```","but","Trying","This","While","I","The","I","You","Yeah,","`isShouting`","The","@wendy,","You","Try","You","It's","You're","You","You","You","I","Use","Are","`responseFor`","You","(Actually,","It","I","The","instance","[]","(a:as)","_","It","Then","You","Well,","The","That's","Most","`isAnagram`","I","Also,","Can","Looks","I","I","I","I","The","Can","I","I","I","You","Yep,","I","dnaToRna","That's","Hi","it","The","I","Also,","looks","error","you","Data.Char","However,","I","And","You","I'm","Re:","Also,","*","*","You","This","Within","It","Making","explicit","I","It","It","There","The","normally","I","This","I","Data.Bits","I'm","Oops","Hi!","I've","It's","But,","Thanks","This","make","```myResponse","point-free","```haskell","or","take","```","Threw","For","Is","The","Yeah,","There's","any","try","`_responseFor`","have","so","```fromListWith```","some","why","also","It","Thanks","I've","looks","`String`","you","i","try","`count`","Personally,","It's","I","I","I","There","Also,","The","Yes,","I","I","You","Try","You","one","Took","My","Thanks","Thanks,","I","I","Reordering","I","The","`isSuffixOf`","True,","I","I","It","I","There","Excellent","I'm","I","Your","I","Calling","This","I'm","What","I","It","Otherwise","I","@jeramy","@jeramy","Just","Give","I'd","`strip`","L17:","L30:","To","Also,","You're","I","Thanks","I","Hmm,","I","I","Looking","There","You","h&gt;","\"'A'\"","That","Can","Yeah!","Switched","Re","Re","There's","You","Still","I'm","```haskell","--","instance","readsPrec","class","readsBase","instance","readsBase","readsBase","readsBase","readsBase","readsBase","```","I","There's","--","foldr","foldr","--","foldr","foldr","Let's","`Num","class","(+)","In","The","h&gt;","type","So","I","Count","Num","I","Mike,","Updated","Then","It's","`unionWith","A","Ah,","Also,","You're","To","Yeah,","Note","I","*","*","*","The","@kellen","I'm","The","Can","Can","Yeah,","Many","The","The","It's","Rather","It","```","withStrand","```","because","```haskell","responseFor","responseFor","|","|","|","|","```","but","Without","module","toRNA","toRNA","where","go","But","This","`reverse","*","*","```responseFor```","*","*","Both","(Haskell","I","```","Data.Text","```","makes","```","trim","```.","Also,","```","Data.Char","```",")","```","Data.Char.toUpper","```","is","```","toUpper","```",".","Your","This","Good:","*","```","answer","```","very","*","```","responseFor","```","is","Suggestions:","*","*","```","parseRequest","```","as","```","|","```","guard","Bikeshedding","I","*","*","*","Should","I've","This","You","Looks","Well","isAllCaps","Ah,","```anagramsFor","Per","Here's","`fromListWith`","Ah","trim","Generally","I","I","Looks","I","I","It","There","anagramsFor","Nice","I","Thanks","Like","I","It","It's","`replicate","It","I","Don't","Can","I","You're","@dean","I","baseCounts","Thanks!","Also","The","By","There's","I","No","I","Data.Set","If","It","The","I'd","`all","`last`","isQuestion","If","Hi..","You","The","I","Do","Using","@rosalinda","It","```haskell","isQuestion","```","Woops,","I","First","Using","Try","```all","The","I","`shouting","Having","`shouting","To","There","What","At","silence","shouts","questions","But","Usually","I","Thank","In","```","isSilence","isSilence","```","The","The","I'd","Could","IMHO,","I","Nice","The","Nice","The","These","I","I","```","all","```","But","```","isLetter","```",".","```prepareInput```","`type","Your","In","I'm","Also,","It's","Thanks,","PS.","```","responseFor","```","The","There's","This","Consider","You","You","`isYelling`","You","I","```hs","translateDNA","translateDNA","```","but","You","Hello,","try","```haskell","myFunc","|","|","```","You","Thanks.","L12-13:","L17-18,","-","-","-","First","To","`Data.Map.insertWith`","```(`elem`","Also,","-","-","L9:","L10:","Also,","I","I","allCaps","I","Haskell's","Separated","I","The","A","Are","Very","I","Everything","I'm","The","It","My","hammingDistance","What","As","silence","This","h&gt;","(.)","infixr","The","Yeah,","Same","To","This","I","The","Ah,","Take","You","Woah,","Also,","Good","How","Good","You","I","I","Just","`and","The","I","Hmm,","It's","https://gist.github.com/etrepum/6386171","As","I","The","Another","Any","It's","You're","I","Here's","Using","`intercalate","`reverse","Maybe","Might","I'm","```(any","Do","That","I","```","Cases:","```","This","Can","Edit:","Oh","I","I","Thanks","In","I","I","```haskell","responseFor","responseFor","|","|","|","|","```","I","I","Thank","Thanks","Your","*","*","*","*","Thanks.","This","That","You","but","Yes,","```Haskell","isAnagramOf","::","filter","::","filter","::","```","Maybe","Hi","I'm","Your","I","You","Control.Monad.Fix","The","You","You","Yes,","There","The","Hi","Yes,","I","hehehe,","You","```haskell","chillOutString","where","```","this","I","```","responseFor","|","|","...","where","silence","yelling","...","```","Are","Using","submitted.","Yeah,","It","You","You","`mapFst`","The","The","Now","But","```","$","###","expected:","but","Cases:","```","I","I","I","```haskell","singleWord","singleWord","|","|","```","and","It","I","You","`(\\x","Your","It","Wouldn't","That's","I","I","No,","Sorry,","You","```","transform","(score,","letter","return","```","If","I","I","Consider","Consider","I","There","This","You","You","You","It","Yes,","Something","Twisol,","If","```","isAnagramOf","canonicalise","```","Then","So","`isAnagramOf`","Otherwise,","I","Oh","Nearly","This","Following","I","etrepum,","I","In","I","Thanks","Twisol,","I'll","WAY","Yeah,","`join","Did","https://gist.github.com/etrepum/6407542","What","You","It","It'd","With","If","This","I","Using","advance","advance","advance","advance","Anyway,","`filter","in","you","I","Also","That's","```","quickCheckWith","+++","```","I'll","Have","Basically","You","I","While","This","*","`module","*","`import","*","```","|","...","where","```","This","Alternately...","bartavelle,","Haskell","@archibald","@archibald","Indeed,","However","Thanks","This","`randomR`","There's","bartavelle,","Thanks","You","I","etrepum,","So","The","Thoughts?","You're","Data.List.Split's","You","`isLetter","You","Wondering","Ok!","`WordCount","you","`WordCount","Then","`mappend","There","```","append","```","I'm","I'm","You","It","This","If","You","There","1.","2.","```","count","let","reject","s''","(w,","unless","return","```","GHC","Thanks,","This","```","###","expected:","but","```","Thanks","You","Minor","The","Actually,","Instead","For","Well","f","So","allCaps","Another","It's","`separate`","Thanks","that's","I","`isSuffixOf`","I'd","Your","Thank","I'd","I","`reverse","The","It","I'd","Instead","Instead","This","newtype","I'm","Any","Thanks","The","No","Otherwise","Looks","-","-","-","Good","This","Another","`(not","The","Looks","The","Yes,","@spencer","Looks","I","Note","`sort'`","Thank","Originally","Defining","There","There","*","*","*","You","`encode'`","You","A","I","I","You","It","I'm","[1]","go","Pretty","I","I","I","Excellent,","kim:","Beautiful!","`Data.Char.digitToInt`","I","I","If","You","I","I","Wow,","You","This","Good","Thanks,","Personal","You","I","I","Funny,","looks","(`map","Thanks","I","in","you","try","looks","i","you","```haskell","prettyPrint","where","```","also","```haskell","parts","```","Good","*","*","Hm,","I","This","While","Interesting","Also,","L18:","Nice","You","Guards","I'm","The","I","Decided","Thanks","This","`sort'`","I","Much","Flipped","`reverse","`Int`","I","Indeed","all","Thanks","Thanks.","You","I","I","You're","Oh,","Yep,","The","`anagramsFor`","```haskell","isAnagramOf","```","try","other","I","I","You","If","You","ouch,","Okey","I","Thank","You","It","You","Looks","If","stringDistance","This:","replaceThymine","is","i","(and","your","try","try","please","don't","Problem","I","f","but","I'm","`(intersperse","This","There","looks","I","Consider","Consider","Unless","Personally,","Consider","Consider","Nice","@emerald","Thank","I'm","Yeah,","Exported","`flip`","thank","out","Yeah,","I","Otherwise,","I","You","It","`chillOutString`","Depending","You","`(,k)","Unsubmit","Think","From","I","yes,","fixed","Ha;","`splitAt`","Consider","I","Can","I","`mapFst`","`sentenceKind`","In","Ah,","You","I'm","Looks","s/Youda/Yoda/","More","Using","@enola:","@enola:","It's","The","well,","I","Ah,","Aha,","I","I","&gt;","If","Otherwise","I","The","The","Type","Using","The","It's","Comparing","The","It's","By","Thank","I","```haskell","isQuestion","```","harder","Does","This","Thanks!","Thanks","I","Ah","Have","Why","I","I","The","The","Given","Thank","Do","Okay,","You","Ooh","I","Also","I","@maybell:","I'm","Looks","All","Why","Good","Unimportant","This","Using","sentenceKind","where","The","And","You","sum","The","Wouldn't","I","sound","sound","sound","You","You","There","```","isLeapYear","```","Yes","You","If","An","i","Thanks","Well,","You","Done.","And","I","You're","bit","Ok,","This","Thanks.","Thank","I","nucleotideCounts","But","parentheses","also,","we","otherwise","I'm","`pure","On","classify","and","data","then","isSilence","isSilence","if","one","isAggressive","I","I","I","Thanks,","You","Oh,","This","It","Otherwise,","I","Try","For","validNucleotide","For","validNucleotide","You","I","I","I","Two","Thanks","Very","Curses!","Here's","liftM2","Many","You're","This","Parens","Why","You","&gt;","I","I","The","I","This","Data.ByteString.Char8","@nyah","Yeah,","Do","@libby:","Interesting","The","\"induvidual\"","Well","Also","I'm","Also,","It","What","```","generateName","```","Can","If","data","Some","This","I'm","It","The","You","What","If","Looks","I","I","Perhaps","```","liftA2","```","On","Consider","Less","Last","Better","Oh,","This","-","-","-","-","I","+1","This","@leslie:","Haha,","Using","Looks","```haskell","concat","concatMap","concatMap","unlines","```","http://hackage.haskell.org/packages/archive/base/latest/doc/html/src/Data-List.html#unlines","Also","@una","If","```hs","map","```","or","```hs","map","where","|","```","@gideon:","phadej,","I'll","Your","In","-","This","-","As","In","I","I","That","Nice","-","-","This","Thanks,","I","Looks","Does","`count`","Try","On","`if","You","Code","Minor","Yeah,","Weird","maybe","I","You","There's","From","&gt;","I'm","If","Yeah,","Thanks","The","If","I","Somehow","I've","I","Honestly,","Some","```haskell","compose2","--","compose2","compose2","compose2","sing","sing","```","I","I","```","revlist","```","then","```","sing","```","which","Thanks","Looks","So","`isSuffixOf`","i","Re-implemented","More","-","Rewrote","I","I","Thank","why","Instead","Nice","I","Thanks","The","You","Oops,","Thanks","I'm","There","As","The","Looks","Also,","Thanks","I","Consider","Some","Most","I","Where","I","I","```","scoreMap","```","or","```","scoreVec","```","I","It","@estevan,","I","I","But","Nice","Haskell","Touché!","I'm","Take","data","I","Also","imports","You","Also","Alright,","ah.","```haskell","sing","```","you","```haskell","f","```","can't","Yeah,","You","`liftA3","I","ah.","`enumFromThenTo`,","you","I","I","And","IMHO","After","`DList","```haskell","newtype","snocnil","snoc","toList","```","IMHO,","BTW:","or,","Yeah,","I","```hs","comp2","comp2","```","So","```hs","module","hammingDistance","hammingDistance","comp2","f","```","Btw","```","Djinn&gt;","comp2","comp2","```","The","Overall","Of","ShowS","I","doing","hammingDistance","-","-","-","```haskell","Bob.hs:10:7:","Found:","(map","Why","map","Bob.hs:10:12:","Found:","(toUpper)","Why","toUpper","Bob.hs:11:7:","Found:","(isSuffixOf","Why","\"?\"","```","shouldn't","Otherwise","Have","Good","@lucinda","Thanks","Thanks!","But","You","@abdul:","`dispatch`","However,","Re:","Re:","Thanks","I'd","Reworked","I","If","Thanks","I","`answer`","You","`\\x","Yes,","I","Yes,","I","I","This","This","Good","`[Char]`","Instead","Functions","No","I","I","I","I","The","Interesting","`matchesAnyOf`","You","Ah,","Why","the","Another","If","`fromEnum`","Ah,","I","Your","Just","you","`splitAt`","This","Line","Looks","Yeah,","`intercalate","Thank","`randomR`","h&gt;","\"L8\"","This","Can","Obviously","The","It'd","I","`wordsBy`","Good","\\*salute\\*","This","That","You","My","Unfortunately,","Thoughts?","I'm","Thanks","`(False==)`","There's","Thanks;","wow!","First","That","http://www.haskell.org/haskellwiki/List_instance","The","`foldl'`","Good","You","intercalate","Cool;","common","``f","instead","``f","Did","Went","Wow,","Whoops,","why","There's","Data.List.Split","You","The","A","You","hammingDistance","hammingDistance","It's","Check","another","you're","Check","-","-","-","They'll","@woodrow:","...so","On","The","The","There","zipWith,","It's","You","Remove","Nice!","I","Obsessive","Thanks","Good","Heh,","Parallel","I","That","Ah,","I","Thoughts?","Thanks","Looks","GHC","```","%","bar","main","%","[1","bar.hs:1:1:","Top-level","bar","bar.hs:1:1:","Pattern","In","bar.hs:3:1:","Top-level","bar.hs:3:16:","Defaulting","(Num","(Show","In","In","In","Linking","```","`ghci`","```","%","GHCi,","Loading","Loading","Loading","[1","bar.hs:1:1:","Top-level","bar","bar.hs:1:1:","Pattern","In","bar.hs:3:1:","Top-level","bar.hs:3:16:","Defaulting","(Num","(Show","In","In","In","Ok,","*Main&gt;","```","I","I","Thanks,","I'm","Very","[Point-free","```hs","responseFor","```","Also:","```hs","and","or","```","So","```hs","allWhiteSpace","```","Maybe","I'm","Or,","Generally","The","The","heh","http://en.wikibooks.org/wiki/Haskell/Indentation","`Mercury`","Oh,","To","Recent","@brooke","Hah!","Although","Huh.","I","It","Other","Well","In","The","It's","@robbie","With","Oh,","hottttttt","@ivah:","Is","In","Consider","-","-","-","-","Using","Much","I","You","You","The","Ah","Well,","If","You","Map.insertWith","I'm","I","Something","I","I'd","I","**Example:**","The","The","Tweaked","Did","Any","I","`firstInMonth`","This","default","-","-","=&gt;","You","I","probably","`concat","Surely","I","Also,","Thanks","Oh,","The","`anagramsFor`","you","also,","yeah,","Gah,","I","Thanks!","isYelling","Didn't","Done","good","A","Changes","-","-","I","Thanks","`intercalate","You","Done:","Ugh,","Thanks","Sure,","@wilford","It","Consider","I","Some","I","-","-","-","Unless","...proceed.","You","Formatting","```","meetupDay","where","day","...","```","`take","You","There","I","Realized","Realized","Were","Thanks","I'm","Alright,","It","Thank","@eugenia","Good","Oh...","The","`fromListWith`","Parallel","There's","Data.List.Split","`Map.fromListWith`","Parallel","`Map.fromListWith`","Parallel","Parallel","There's","A","@jayden,","`isExclamation`","For","Otherwise,","Can","|","Why","(Markdown","@katelyn","Thank","I","Well,","That","data","and","transcribe","transcribe","transcribe","Of","toDNA","toDNA","toDNA","toDNA","toDNA","Now,","toRNA","toRNA","However,","There's","Thanks","Is","data","=","|","I","Very","```","transcribe","transcribe","transcribe","```","This","Most","I","The","That's","Thanks","It","While","&gt;","With","Function","Another","Looking","Additionally,","Finally,","The","The","@bridget's","any","is","Two","any","which","any","where","which","You","There","I","The","My","I","Doing","Here's","data",",",",","I","The","Probably","This","All","This","I","pretty","I","1.","2.","The","I'm","I","Oh,","I","responseFor","isShouting","this","It's","It's","There","You","`all","Might","Having","Making","Removed","The","The","I","Have","An","that","You're","Good","Yeah,","Didn't","```","*DNA&gt;","toRNA","```","Thanks","Very","you","I'm","Am","I'm","Am","I'm","I","re","display","Oh","Also","You","You","This","Yours","You","For","Some","I","You","As","The","I","Try","You","Sorry,","I","But","I","The","@leopoldo:","There'd","V.backpermute","I","transformThymadine","transformThymadine","And","toRNA","Aside","The","maybe","This","If","Usually","Yeah,","Thanks","`stringsToEntries`","The","Can","A","toRNA","It","I","There","Building","For","If","Wow,","Hey","So","Also,","\"The","As","Here","\"Data","Algebraic","This","Nothing","Slightly","Looks","I","I'm","So","`wordsBy`","`count`","`wordCount`","It's","Wow!","Using","Funny,","Ignoring","The","As","The","h\u003e","class","fmap","...","--","h\u003e","class","...","(\u003c*\u003e)","...","--","h\u003e","class","(\u003e\u003e=)","...","--","The","All","This","Another","@russel,","This","One","```haskell","grade","```","But","You","Here","$","Bob.hs:18:43:","Found:","(isLower)","Why","isLower","Bob.hs:19:44:","Found:","(isUpper)","Why","isUpper","2","$","[1","Bob.hs:4:1:","The","except","To","Bob.hs:16:31:","This","bound","Bob.hs:16:31:","Bob.hs:16:33:","This","bound","Bob.hs:17:27:","This","bound","Normally","$","[1","Bob.hs:9:41:","You","I'm","Also,","I","With","add","That's","Oops,","I","Note","`newtype","Thanks","I'm","If","Nice!","The","Oh","Very","Stole","So","The","`Data.List.map`","Data.Map","This","The","tranks","I","Small","What","*","Some","*","*","*","You","Why","Do","orbitalPeriod","orbitalPeriod","|","|","--","Yeah.","To","I've","I","Since","I","Note","parts","parts","[[_,","_","It's","It","isAnagramFor","isAnagramFor","where","s''","go","Thanks,","Also,","This","For","With","Surface","So","The","For","Ooooo,","http://www.youtube.com/watch?feature=player_embedded&v=4YfkwfZ7AV4#t=2085","Basic","There","It","@evert","Short","Perhaps","Some","*","*","*","You","In","Actually","I","I","isQuestion","can","isQuestion","which","My","Actually,","@arturo","I","This","Yeah,","I","The","pretty","I","It's","`all","`isQuestion`","Instead","The","0","is","I","To","http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-IORef.html","\u003e","You","So","All","You","...","`fromListWith`","The","I","Thanks","For","Instead","Consider","Thanks","Another","verse","\\","Kinda","thanks","I","There's","The","This","`(\\s","This","@ken","Thanks","I","Yeah,","[third","It","It's","It's","It","analyze","|","|","The","@trey","Just","Thank","New","Other","@rylan","I","However,","I","`not","If","Overall,","@katelin","@katelin","new","@jayme","Looks","You","Any","You're","The","why","great","Well,","`nucleotide`?","Unlock,","*head","I'd","`if","Not","Two","`f","What","Few","Data.List.Split","`foldl`","The","The","For","You","There's","You","@vada","Anyway,","You","Data.List.Split","I","Did","If","Thanks,","Agree","I","Nice","It's","I","Ah","This","Oops,","I","Looks","Prime","*","*","Wow,","`Map.findWithDefault`","row","The","A","The","If","Thanks","I","That","For","With","@ezra","Thank","I","Thanks","And","In","I","The","Data.Map.Strict","Another","isQuestion","========","*","*","*","----","allCaps","======","*","*","----","sayNothing","=========","*","----","responseFor","=========","*","There's","Best","Take","You","Is","```haskell","fromListWith","fromListWith","=","#if","{-#","#endif","--","--","--","--","--","fromListWithKey","fromListWithKey","=","where","ins","#if","{-#","#endif","```","Would","Ah,","Nice,","However,","```","@dora","Thank","I","I","Added","This","When","Or","```haskell","anagramOf","let","in","where","a'","sorteda","```","to","Or","@alessia","Thanks","You","I","It","By","Thanks","I","If","Logic","I","@giovanni","Thank","You","Given","This","Neat.","I","```haskell","map","map","map","```","@gage","It's","By","By","Very","You","I'd","Well","http://hackage.haskell.org/package/base-4.6.0.1/docs/src/GHC-Base.html","--","--","--","--","--","--","--","--","--","--","--","--","--","--","--","--","--","{-#","\"map\"","\"mapList\"","\"mapFB\"","#-}","There","--","{-","comment","As","`length","The","Very","`[C.toUpper","Thank","That's","I","Code","The","Nice.","Probably","I","In","Don't","`(\\(x,y)","`concat","Note","(the","foo","\\second","The","Test","Mine","You","Sorry","Didn't","It","h\u003e","[(1,2)]","The","The","The","Here","data",",",",","newtype","deriving","There's","With","The","The","thanks","Ain't","Ah,","whoops,","I","The","I","`stripped`","Thanks!","I","One","I","Since","Instead","Yes,","The","Try","`fmap","I","Otherwise","I","toRNA","but","Indeed,","It","Also","I","I","So","You","The","http://hackage.haskell.org/package/base-4.6.0.1/docs/src/GHC-Base.html#map","--","--","--","--","--","--","--","--","--","--","--","--","--","--","--","--","--","{-#","\"map\"","\"mapList\"","\"mapFB\"","#-}","You","Another","Try","@era","What","You","Because","\u003e","Thanks","\u003e","I'm","You","`scheadule`","If","Consider","Good","@veda","Thanks","Most","When","Reminds","The","[1]:http://hackage.haskell.org/package/base-4.6.0.1/docs/src/Data-List.html#words","I","@lazaro","not","translateToRNA","translateToRNA","translateToRNA","toRNA","went","I'm","You","Agree","This","Nevermind,","Looks","One","insertWith","--","`insertWith'`","insertWith'","--","The","There","The","The","My","Might","I","`if","The","Most","It's","I'm","For","Couldn't","found","Ok,","@mozelle","@mozelle","@margot","simplified","There's","Looks","Instead","You","Looks","@roberto","If","A","`singleItem`","This","the","@may","I","However,","Well","Thank","I","I","But","`enumFrom","I","*","*","I","I","I","In","@declan","Question:","Edit:","It","You","I","I","Hmm...","`toOccurList","although","`toMap","but","`(\\word","Any","Also,","Good","You","Edit:","Looks","I","I","Decided","Generally","Consider","No","If","(Or,","I","h\u003e","\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","h\u003e","\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","Yes,","For","I","`isAnagram`","@ed","I'm","I","```\"god\"","Yes,","Minor","`Data.Map`","Yes,","Looks","foldr`","The","Looks","Just","Since","`liftA2","from","So","```","(\u003c&\u003e)","(\u003c&\u003e)","```","then","```","isAnagramOf","isAnagramOf","letters","```","and","Seeing","@elmira","I","`foldl'","Now","A","Thank","test","test","I","This","Well,","Data.Map.Lazy","`anagramsFor`","I","Type","That's","http://hackage.haskell.org/package/containers-0.5.3.1/docs/src/Data-Map-Base.html#Map","data","|","The","`isSeperator`","I","I","I","`intercalate","Boy,","Oh,","In","Looks","Line","`unlines`","There","I","Looks","I","@bernie","The","I","But","I","Thanks,","Or:","`isSeparator","`nucleotideCounts`","There","Another","For","I","OK,","@giovanny","Re:","Re:","@emily","So","Data.Map.Strict","Try","With","So","A","`map`","Ridiculous","@renee","Thank","I","Ha","@stefanie,","I","Very","using","Thank","Overall,","`silence`","The","Since","The","Regular","I'm","This","```","###","expected:","but","Cases:","```","The","\u003e","The","I","array","--","array","where","I","Also","Why","This","Do","Your","The","I","Your","I","It's","That's","This","Instead","Can","The","The","The","Some","I'll","Optional:","Thanks","@henriette,","Thank","Hopefully","I","The","Much","That","After","Also,","You","That's","Don't","Define","You","I","Consider","@kim,","Ah,","Thanks","That's","The","`pure`","I","It","Why","Everything","Aha!","It","I","I","splitAt","Not","@franco","I","The","@thora","The","The","You","@boris","Thank","Great","I","Your","```","sorted","sorted","sorted","```","Maybe","So","Perhaps","Thanks","`concat","Consider","You","\u003e","I'm","I","@ellsworth","Will","Take","Am","Thanks","I","It's","Data.Char","Generally","dont","At","Thanks","Wow,","However,","Yes,","You","You","The","`sanitize`","You","I'd","`wordCount`","`foldl`","Map","For","For","`digits`","All","I","Whether","I","Instead","`insertWith`","The","Re:","Re:","Ahhh,","@carissa","I'm","sanitize","(10,","(11,","_","`foldl'`","@jermain","Thank","I","I","But","You","I","This","I","All","You","The","Removed","Also","I","Oh","Try","You","It's","Checking","The","It","I","You","Based","-","-","The","$","Bob.hs:11:13:","This","bound","Bob.hs:12:11:","This","bound","Bob.hs:13:14:","This","bound","Cases:","Your","To","```","where","silence","```","I","```","where","silence","```","Aw","@patrick","Thank","I","I","In","Thanks","I","I","There","And","The","You","Rather","Other","For","You","toRNA","toRNA","toRNA","It's","You","Splitting","You","Note","I","What","As","So","`x","It's","isAnagram","I","I'm","Ok,","Whether","Ohh,","```","responseFor","|","where","silence","```","Would","Thanks,","Isn't","Edit:","@ivy","Try","I","Instead","`fmap`","sorted","Looking","I","Note","Note","I","Good","In","In","OK,","It's","Most","h\u003e","on","--","infixl","h\u003e","(.)","infixr","This","You","Another","@jalon","FWIW","```","benchmarking","mean:","std","found","2","1","variance","variance","benchmarking","mean:","std","found","1","variance","variance","```","Looks","Yeah,","This","I'm","The","I","```","wordCount","wordCount","where","collate","countUp","wordCollection","lowers","sanitize","```","I","A","Once","As","I","I","`simulate`","You","@garnett","Thank","I","Good","Yea,","I","Well","module","import","import","anagramsFor","anagramsFor","isAnagram","isAnagram","where","lx","sx","I","But","I","Nice!","Also","Re:","@bridie","There","`[Char]`","Ah","Changed","Terrible","@leonard","I","My","\u003ccode\u003eMap.fromListWith\u003c/code\u003e","You","h\u003e","data","instance","--","instance","instance","instance","instance","instance","h\u003e","class","fmap","(GHC.Base.\u003c$)","--","instance","instance","instance","instance","instance","instance","You","A","@torrance","Useful","Could","I","The","Rather","Consider","In","This","You","The","You","You","You","In","Maybe","Meh,","x","Found","Well","There","http://www.scs.stanford.edu/11au-cs240h/","http://www.seas.upenn.edu/~cis194/lectures.html","Regular","As","You","`isSilentTreatment`","It","You","Thanks","The","`String`","So","Soo....","If","For","The","Using","I","For","For","Well,","Does","I'd","Note","\"This","\\This","It's","Yup,","Ah,","one","Thanks","I'm","You","You","newtype","It","You","You","```haskell","toRNA","```","I","Is","You","I","Anyway...","Got","don't","Oh,","Looks","Hey","double-flipped!","Clever","Just","Looks","Excellent","That's","Note","There","OMG,","Vim","Well,","Nice,","Very","Thanks","Ugly,","They","`splitAt`","@deshaun","Applied","I","Thanks,","I","oops,","To","Thank","I'm","normally","I","@alisha","Well,","Why","Did","There's","[haddock]:http://hackage.haskell.org/package/containers-0.4.0.0/docs/Data-Map.html","There","Data.List.Split's","`foldr`","A","GAH...","My","\u003e","i'm","@brady","`[initial,","You're","Point","I","Looks","I","This","@jermain","Dag","possibly","One","The","There","`String`","Generalizing","If","You're","`foldr`","Another","I","It","@marcelino","Nice","If","http://hackage.haskell.org/package/containers-0.5.0.0/docs/Data-Map-Strict.html","Note","It","[hp]:http://lambda.haskell.org/platform/doc/current/frames.html","You","Also,","@elisa","Good","I","empty","string","string","My","Am","I","This","`unequal","ah!","thanks.","Thanks","Got","looks","`trim`","`[m,m-1","`sing","It's","hammingDistance","`(\"\"","You","Overall","Usually","You","`grade`","Also,","I","You","fromList","fromList","I","Obviously","My","But","Help!","You","dnaToRna::DNA-\u003eRNA","not","dnsToRna::String-\u003eString","I'd","map","&&","all","Also","e.g.","data","and","generateRespone::Category","and","catagoriseStatement::String","The","Try","data","and","generateResponse","and","categoriseStatement::String","That","There","Try","data","and","generateResponse","categoriseStatement::String","The","This","```haskell","mkRobot","resetName","robotName","```","You'll","@ansel","It's","Haskell","Data.List.Split's","`elem`","`foldl`","A","It's","Thanks.","A","```question","as","```shouting","There's","There","Take","Also","I","Thanks,","@vivien","I","I","Data.List","Data.Map","This","What's","You","Hah,","Perhaps","I","I","There","Per","Consider","[(\"a\",","[(\"a\",","[(\"a\",","[(\"a\",","Here's","[(\"a\",","[(\"a\",","[(\"a\",","[(\"a\",","The","Data.List.Split's","`foldr`","The","For","The","the","Handing","\u003cb\u003e","\u003cb\u003eetrepum\u003c/b\u003e:","I","Is","``liftA2","or","`fromEnum`","Can","Also,","n","n'","and","@cordelia","It","So,","do","n","n'","return","translates","generateName","\\n","\\n'","So","generateName","Another","Robot","`generateName`","Using","Yeah,","Cool.","The","I","Odd...","Thus","In","Wow,","ignore","With","This","```haskell","resetName","```","(There","Thanks!","Any","Looks","What","I've","In","-","-","-","-","nope..","It","Think","Additionally,","Why","The","Separating","Depending","Also","isYelling","isQuestion","I","To","generateName","generateName","char","num","This","Most","The","Wouldn't","Although","There","Some","The","@keyon","Thank","You","As","I","I","I","I","`\u003c$\u003e`","h\u003e","(liftM","h\u003e","((+1)","h\u003e","(fmap","Data.List.Split","You","You're","You","I","Instead","`splitWords`","Perhaps","Unfortunately","`E.throw","It","Check","`void`","`mkRobot`","`robotName`","Overall,","in","h\u003e","class","(==)","...","--","infix","h\u003e","class","...","(/=)","--","infix","h\u003e","(&&)","infixr","The","Another","Take","The","It","Here","@ralph","Regarding","Also,","Thanks","`reverse","With","For","isAnagram","Try","Looks","I'm","Yeah,","Thanks.","You","You","You","Thanks,","While","One","Perhaps","If","The","-","-","-","-","Using","There","Generally","There","For","Hmm...","This","This","I","If","Try","Also,","The","Try","The","I","If","Plus","You","Thanks!","Whoops.","@deion","Oh,","The","`insertWith'`","You","There","`nucleotideCounts`","I","Changed","although","Thanks","I","There's","There","It's","True,","I","I","please","1.","2.","I","@marcia","Thank","Well,","In","You","@carmel","This","@brett","That's","I'm","Thanks.","It's","I","There","The","For","For","If","Using","In","Thanks,","It's","Will","@braeden","The","The","Well","This","Another","I","Yeah,","I","Usually","Sorry,","Plenty","Here's","Data.List.Split","I","using","`foldr`","For","`findWithDefault`","It","Fixed","Thanks,","Ok,","Imagine","I","The","@nigel,","Haskell","s","\\bar\\n\"","The","Why","It","@rene","Using","I'm","It's","It","To","Often","module","hammingDistance","hammingDistance","(.:)","infixr","f","Of","http://www.haskell.org/haskellwiki/Pointfree","Thanks","Also,","I'd","I've","```","r","r","n1","```","etc","@consuelo","I","And","Ugh...","I","```haskell","digits","```","Well,","Suggestions","OK,","Implementing","It","hah,","I've","This","`findWithDefault`","You","Nice,","The","Some","wordCount","`(\\(a,","\u003e","Cleaned","\u003e","I","\u003e","Fixed.","I","I","@shad:","That","This","transform","`exploded`","Other","Check","See","I","Now","That's","Nice!","(By","In","The","The","@mariane","I","Note","Looks","I'm","I'm","@helene","I","Thanks","Usually","Personally","Thanks!","`allCaps`","You","Either","Also","`allCaps`","Is","That's",":λ\u003e","class","fmap","(GHC.Base.\u003c$)","--","instance","instance","instance","instance","instance","instance","The","λ\u003e","9","λ\u003e","9","Hmm.","I","\u003e","Either","`","ghci\u003e","ghci\u003e","(\u003c*\u003e)","ghci\u003e","[6,9,27]","`","or","`","ghci\u003e","[6,9,27]","`","This","Hm,","Edit:","Using","data",",",",","}","This","That's","I","The","This","In","I","Yeah,","Anyway,","I","*","*","*","*","You","Good","Since","it","Overall","I'm","Well...","You","`","Prelude\u003e","Prelude","1","`vs","`","Prelude","Prelude","***","`","I","I","I","*","*","*","*","wrong","It's","With","The","Why","I","Is","Many","Regarding","You","I","Much","The","Some","You","\u003e","In","OK,","`liftA2","specializes","`::","As","I'm","There's","responseFor","|","|","Which","responseFor","|","|","|","The","`String`","As","shout","Here's","shout","and","import","shout","I","`prep","To","anagramsFor","Note","It's","The","You","Other","That's","Nice,","Of","Don't","I'm","Wow,","Looks","Ah,","Suggestion","|","By","all","is","not","The","Iteration","Thanks","Thanks","The","I","So","OK","Probably","A","However,","(I","`count'`","Updated","1.","2.","3.","4.","5.","For","isQuestion","isBlank","I'm","I","Of","If","Usually","It","Thanks!","Looks","It's","(`f`","`enumFrom","I","With","Yeah","Can","I","Isn't","`foldr`","For","All","I","I","BTW","Hoo","*","*","Up","The","*","*","I","Oh,","So","@gerardo","Thank","On","Reading","Data.List.Split","Prelude","Makes","This","`(sort","Typical","Data.List.Split","`foldr`","For","Note","[Hoogle](http://www.haskell.org/hoogle)","Type","Ahh,","I","+1","Many","I","The","By","Well,","It's","`insertWith`","Data.List.Split","`foldr`","For","Note","I","Ah,","That's","I","I","Cool,","It's","Good","Yeah,","`anyAndAll`","```haskell","anyAndAll","```","Nice","`openAccount`","Pretty","Overall","As","The","Not","Thanks","Looks","Regarding","So","The","h\u003e","(&&)","infixr","h\u003e","class","(==)","...","--","infix","Thanks","Again,","How","`anagramsFor","Or","@luis,","this","`(.-.)`","You","`[a,","You","```haskell","--","Transformed","anyAndAll","Optimized","anyAndAll","anyAndAll","anyAndAll","```","Many","toRNA","I","Edit:","This","readOct'","readOct'","I","Of","Eta-conversion","I'd","It","Right","Comments","Oops,","You're","You","Personally","I","I","```","infixr","(.:)","(.:)","```","is","Comedy","There's","Also,","`(==)","I","You","`(fromMaybe","There","*","*","*","*","You","I'm","The","All","It's","It","You","I","Edit:","\u003e","`foldr1","The","Hey,","This","That","Also","This","When","Data.Map.Strict.Map","You","`foldl`","These","Doing","I","`sing`","The","Just","@glen","Thank","You","I","Good","The","The","Thanks","`sum`","Good","Now","Sure,","`count`","@marlee","@gudrun:","http://hackage.haskell.org/package/split-0.1.1/docs/Data-List-Split.html#v:wordsBy","I","The","@elenor","Thank","Clearly","I","Can","It","The","`zipWith`","It","data","robotNamePattern","robotNamePattern","You","robotNamePattern","robotNamePattern","where","c","n","And","In","One","How","For","`['A',","This","Yeah,","Would","This","Good","Anything","```","do","return","```","desugars","```","a","```","and","The","The","Yes,","```not","Otherwise","Instead","The","There's","I","randomChar","N","C","thanks","thanks","Thanks.","Wow,","I'm","`sequence","`map","Text.Printf","That's","thanks","I'm","I","The","I","PS:","I","I","I","```","data","data","```","running,","```","data","data","```","I","Looks","For","If","Lists","It","For","interesting,","Why","Also","```","do","return","```","can","An","I'm","`lastTen`","`prettyPrint`","Nothing","Nothing","good","bound","I","Overall","With","The","Split","Minor","Your","I","I'd","The","All","Perhaps","Ah!","I","Err,","Another","Seems","It","The","It","The","add","or","add","Note","The","Other","Direct","Comments","The","Not","You","```","\"M\"","(\"M\"","((\"M\"","(((\"M","```","Also,","Thanks.","`createInverseMap`","Somewhat","Have","No,","Absolutely","A","Nothing","`foldl`","The","The","Ah,","There","Another","But","@alfreda","This","```haskell","import","import","```","But","I","I","Explicit","If","Thanks","Thanks","earthYearsPerYearOn","The","Ah","I'm","It'd","@gregoria","Thank","Plenty","I","This","The","The","The","This","There","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","@lisandro","Thank","I","`quotRem`","The","`concat","`after`(/`before`)","forgot","see","@willie","Thank","I","I","`foldr`","@angus","This","```haskell","floor","```","Good","Minor","You","Overall","This","See","Note","This","See","The","Note","`foldr`","My","@keira","My","`first`","This","@toni","I","Given","However","Clearly","Any","Hint:","```haskell","instance","return","f","```","(This","It's","Alternatively,","This","Isn't","thanks","@kamille","The","For","This","You're","@terry","It's","The","`concat","`reverse","Consider","I","You're","Is","The","It's","Is","It","It","In","If","I'm","Is","Don't","What","Ohhhh,","Ahh,","Maybe","Will","**Doh**,","Here's","```","*Scrabble\u003e","calculating","calculating","calculating","calculating","calculating","calculating","11","```","So","Hmm,","In","```","*Scrabble\u003e","calculating","11","```","Guess","(EDIT:","Thanks","Thanks","Ok","I","You","It","Thanks","The","In","The","I'm","That's","@alyce","This","I","Thanks","Oh","It's","The","What","An","randomLetters","letters","return","This","randomLetters","I","It","But","And","They","For","Another","Well,","Here's","module","import","import","scoreTable","scoreTable","where",",",",",",",",",",",",","]","scoreLetter","scoreLetter","scoreWord","scoreWord","This","I","`fromListWith`","That's","Yes,","An","Interesting","Also,","I","Actually","I've","I'm","This","So","`nucleotideCounts`","`nucleotideCounts`","Looks","I","Ok,","Yeah,","Yeah","So","I","I","Ok,","I","I'm","Anyhow,","{-#","module","import","count","count","|","|","nucleotideCounts","nucleotideCounts","No","Hmm,","Intentionally","I","I've","Gotta","@vernon","A","EDIT:","See","Started","Ok,","Well","To","For","This","VERY","I","I","There","`const`","You","Using","So","Take","Usually","Note","I","@skye","Although","Unfortunately,","I","Yes,","That","Can","@burdette,","Not","I","`[1..dv]","I","Consider","There's","You're","The","```","myFunction","|","|","|","```","Or","This","It","This","Everything","Try","Deriving","Using","@drake","Can't","`[minBound..maxBound]`","There's","Yes,","There","Woot!","I","`bit","It","Data.Function","filter","Although","filter","GHC","`resetName`","Consider","Overall","`(\\c","It's","`getWords`","The","This","`unique`","*","*","*","Note","A","`getWords`","`makeWordCountMap`","It's","For","Thanks","`elem","I","Not","Grr,","Though","@chance","Wow","Have","For","Nice","Thank","I","Thank","I","One","Not","I","I","Anyway,","I","Probably","@einar","Data.List.Split","I","`sequence","Most","Nice,","It","@price","Thank","Oh,","Note","Thanks","OK","Regarding","Many","That's","Usually","I","Alternatively,","Everything","@effie","The","I","I","Everything","An","-","-","Not","Right,","I","Also,","Ohhhhh...","Interestingly,","So","toRNA","toRNA","I","Ah","Thanks,","In","Regarding","A","If","`[[Char]]`","`!!`","Usually","Parentheses","I","You","I","I","Of","Yeah,","Started","Tried","Scoring","Sort","The","I","You","Personally","You","etrepum","thanks","A","That","I","While","Lastly,","I","Kind","Started","I","Hi","This","The","The","I","Much","You","@norbert","As","Fair","@laury","Thanks","I'm","@rae","Always","Hello","thks","@noemi","I","cya","Btdubs","Have","Your","Also,","My","*Alphagram*,","So...","I","Small","Now","Haha;","Are","You","\"?\"","Your","@perry","I","I","Here","I","Of","```","[(\"AEIOULNRST\",","```","etc.","I","Edit:","Also","Hm,","In","Alternatively","I","Usually","You","Edit:","That","realized","For","removeSilience","removeSilience","can","removeSilence","or","removeSilence","where","for","So","I","I","Love","While","I","@brandy:","Anyway,","I'll","After","I","Looking","Yes;","naaailed","Only","thx,","@jeanette","I'm","Trying","Messing","Cha-ching!","This","The","Another","This","You","`foldr`","It's","Also,","Remove","Ah,","@cary","Regarding","I'm","This","Yes,","Would","I","Still","Twey","`concatMap`","```haskell","where","scores","letterValues","```","@norene","I'll","Thanks","Thanks,","Thanks","I","My","fromList","fromList","And","I'm","Probably","I","I'm","The","Another","Code","This","If","For","Using","I","`[a,","As","You","This","The","I","The","This","In","Returning","In","Just","thanks!!","Yeah","@stacey","I","Used","Make","Absolutely","Not","Is","Adding","The","@jeromy","I","@darrion","Find","Phew...","Still","No","You","As","Thanks,","I","@jaylan:","This","startDay","Current","I","The","The","I","While","It","I","Check","@lexie","grade","vs","grade","`findWithDefault`","I","I","A","The","The","Looks","Yes,","I","Thanks","I'm","Thanks","Wow,","So,","Oh,","You're","@maxime","This","My","realized","I","I","Anyway,","`anaGrams`","Due","I","I'm","Yup!","My","I","This","The","Narrowing","Next","Using","List","2","The","Sorry;","But","@stacey,","@brody","Thanks","Ace,","Yes,","I'm","What","rewritten","If","In","I","It's","I","Hmm;","@aurelia","Thank","Not","Think","Similar","Hmm,","The","I","Seems","I","\u003c||\u003e","@ocie","Thank","I","Came","I","Super","I","The","My","`anaGrams`","anaGrams","\"a","anaGrams","\"a","The","The","*","*","I","HOMG","I","The","normally","Yes,","It","Instead","The","The","So","The","Thanks","With","Here's","This","`a","What's","http://hackage.haskell.org/package/containers-0.5.3.1/docs/src/Data-Map-Base.html#line-95","You","period","period","Mercury","…","the","Argh;","@mohammed","Thank","I","Not","Trying","I'm","I've","I","As","[1]:","@nedra,","What's","Check","Also,","I","Two","Realized","See","With","This","That's","You","array","In","Switched","Going","```haskell","isn'tTarget","```","But","This","This","Realized","Ahh,","Usually","Is","If","The","You","Two","I","`meetupDay`","meetupDay","meetupDayIter","Teenth","Last","otherwise","I","Thanks","@jacklyn","I","Not","Well,","I","@sammie,","on","except","except","I","Why","toRNA","toRNA","where","replace","Alternatively","Alternatively","Ah.","That","Also,","The","I","Thanks","I'm","That","@oleta","You","To","\u003e","Hah!","Agreed.","You","@alba","Why","Here's","toRN","where","Another","I","I","AKA","It","Totally","Looks","Tried","I","It's","@wilford","I","If","You","I","After","@mekhi","I","It'd","Yeah,","What","Note","toBinary","Consider","`ord","Consider","@rachael,","Implement","The","The","Almost","`(if","That's","You","Many","toRNA","Another","Possibly","I","A","A","Your","Consider","I","`foldr`","You","Good","Try","Note","Ah,","This","Had","Tried","You","This","`not","Don't","Surely","See","You","Here","(flip","(`isAllergicTo`","`((letters","(((==)","For","See","Note","@lukas","Thank","I","`testBit`","The","This","Should","Supporting","thanks","Overall","`(!)","It's","Data.Char","In","In","The","Gah,","Ah,","A","[(score,",";)","Ha..","`unionWith`","`fromListWith`","Using","In","I","@lulu,","Thanks","@ila:","[]","(a:as)","--","(\"CM\"++)","=","=","=","this","`openAccount`","newMVar","Alternatively,","BankAccount","`closeAccount`","In","For","That's","Do","About","The","I","Thanks","You","As","This","Yes,","(\"CM\"++)","There's","{-#","tally","tally","Of","It","FFUUUUU","RE:","It's","Infix","h\u003e","class","(+)","...","--","infixl","h\u003e","(++)","infixr","You","TupleSections","There","I","Everything","`chr`","`encodeChar`","if","then","thenExpr","else","elseExpr","The","The","Data.Array","@hilario","Regarding","`join","Where","@cleora","@phyllis","Thank","Good","Still","`foldl'","Yeah,","This","h\u003e","\"foo\"","@cecelia","It's","Some","Whoops;","You","For","`lookupPlants`","@gunnar.","it","`","My","This","@kenya","I","`zipWith`","Agree","@carissa","If","Sorry,","I","You","@kari,","This","Looking","@ransom","The","You","If","loool","So","Take","Just","There's","I","Fantastic.","Make","It","The","The","`foldl`","You","@cordie","Thank","I","Is","You","Having","You","[",",",",",",","]","The","Did","Is","haha,","Isn't","The","http://www.haskell.org/ghc/docs/7.2.1/html/users_guide/profiling.html","http://book.realworldhaskell.org/read/profiling-and-optimization.html","Well,","`primes`","Maybe","I'd","Take","Instead","Ah,","You","Functor/Applicative","Seemed","Absolutely.","I'm","It's","I","You","module","It's","In","Wow,","@quinn","Now","The","Data.Map","Another","Not","The","h\u003e","[2,3,4,5,1]","The","https://github.com/exercism/exercism.io/pull/1070","@garett","I","I","I","The","Mostly","`wasShouted`","`responseFor`","responseFor","|","|","|","|","Usually","`toRNA`","The","In","I","It's","Please","A","`all`","If","All","answerQuestion,","Data.Char","I","Figured","The","Using","Thanks","I","This","Ugly","Cool,","You","looks","Ah,","@peggie,","*Defaulting","I","`(^","Using","@stephen","Thank","It","`not","I","`zip","Ah","Still","I","Per","I'd","I'd","```haskell","justIf","justIf","window","```","I","`guard`","`all","Not","Eta","The","The","Edit:","`isEmpty","`isEmpty","`isEmpty","I","I","You","Doing","Eta-reduction","e.g.","oops.","Data.Char's","You","Note","Thanks,","Great","I'm","I'm","Well","The","Given","I'd","Same","Wow","@sofia","You","I","http://hackage.haskell.org/package/criterion","Nope","I","As","You","Another","@julie","I","Sounds","You","A","@elody","Just","Why","I","I","Isn't","Otherwise","It's","The","A","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","See","I'm","List:","I'd","I","If","I","@mona","Nevertheless,","Looks","Possible","Looks","`map","Yep,","Everything","Added","Removed","Seems","Yeah,","logic","`isEmpty`","How","I'm","Perhaps","Maybe","```haskell","drops","(3,","(5,","(7,","]","concatMap","```","Can","Without","Instead","The","`reverse","You","@kelton","Ha!","It","Big","You","Unfortunately","Nice","I","If","In","I","Good","`toUpper(b):bs`","Also","You","The","Not","Wow,","`wordsBy`","Yeah,","Lol","I","Prelude","(&&&)","You","import","import","import","import","wordCount","wordCount","token","token","replace","replace","```(","You","`splitAt","In","It's","It's","In","Any","You","-","-","Otherwise,","The","HINT:","Aha!","Robot","I","I","I","I","Here's","You","You're","The","Data.List.Split","The","Great","Cool,","I'm","Thank","I","Similar","`foldr`","In","For","`return","You","I'd","An","Did","wow,","no","You","The","```Data.Map.Strict```","The","Can","Can","Also,","Looks","next","ghci\u003enext","99","ghci\u003enext","0","ghci\u003enext","1","I","Translate","Also","Thank","You","37-38","Not","http://exercism.io/help/how-to-access-exercises","Can","Uhm,","`---`","Looks","You","`nub`","You'll","One","Again,","Originally,","Much","instance","rnf","Normally","There's","It's","I'm","The","Using","Also","Overall","`xs","The","Similarly,","This","Although","This","Much","You","Thanks","I'm","Awesome!","A","-","-","so","Really","Maybe","@brandy","Thank","I","`NFData`","I","@myriam","Thank","I","Please","You","If","This","Thanks","I","Okay,","(1)","(2)","(3)","(4)","I","Well","First","You","`bal","Now","The","There's","STM","Haskellers","Btw,","Something","primeFactors","primeFactors","where","go","|","|","|","|","@pamela","Thank","Take","For","Data.Map.Strict","Thanks","The","I","Is","`insertWith`","Good","`normalizeWords`","Looks","This","Compared","Just","Apologies","I","Can","@lupe","Thank","At","There's","This","wordCount","This","If","Ok,","Anything","I","Ok","Ooo","I","@mohammad","This","I","```","isNonsense","```","but","@verda","So,","This","`++`","((a","What","a","Switching","A","Another","`flip","You","Yeah,","I","```","toRNAc","```","and","```","toRNA","toRNA","```","is","This","The","This","I","Thanks!","Thank","This","Consider","h\u003e","\"aehlmt\"","h\u003e","\"aehlmt\"","Checking","The","h\u003e","(&&)","infixr","h\u003e","class","(==)","...","--","infix","You","`[from,","The","It's","Changed","`error`","Instead","Looks","Another","This","(`isAllergicTo`","This","You","Thanks,","Thanks,","Thanks","Everything","isSilence","Otherwise,","Great","Finally","Any","You","You","It's","Arguably","The","Correct","The","An","Thank","There","```","test_respondsToSilence","\"Fine.","```","Ah,","`isQuestion`","Felt","Oh","Reordered","Though","Ah","This","There","There's","Have","STM","It's","The","anagram","where","w","sw","There","With","anagram","let","a","in","Try","import","import","import","let","filter","Now","`['z',","`transpose`","`pad`","Very","I","Using","Thanks","Oh","I","Do","Thanks","This","This","The","Well,","In","`unwords`","Data.List.Split","You","toRNA","You're","Looks","It's","`Int`","Using","`count`","Prelude's","The","Data.List.Split's","Data.Map","That","You","anagramsFor","`s","Other","You","This","thanks","(p.s.","The","`map`","The","`Map.fromListWith`","The","Thanks,","Do","Thanks","I","```haskell","lower","lower","anagramsFor","anagramsFor","where","ls","ns","go","let","nx","in","```","If","However","Thanks","I","I","The","Data.List.Split's","Another","Thanks!","I","I","You","1.","2.","Thanks,","Also,","I","The","`nucleotidesCounts`","`reverse`","The","You","It","At","I","Nothing","Alternatives","Note","Looks","I","`isQuestion`","Wow,","swapped","In","I'll","I'll","Took","Please","Your","You","`take","Everything","Using","`a","Most","I","`Map.toList`","`maybe`","So","I","Thanks.","I","That","In","Looks","With","With","There's","```(\\x","But","Why","I'd","```haskell","toDecimal","|","|","```","I.e.","Did","@esteban:","Regarding","`any`","As","You","Good","I","You","Sorry","I","Thanks","Regarding","Measuring","*","*","*","Modeling","Thanks","Consider","This","Cool!","@marjorie","I","Not","Wow...","So","Could","Could","I'm","GHC","1.","2.","Note","If","It's","Why","Is","Looks","In","In","@florence","@rhiannon","@franco","Nothing","I","This","```haskell","\"?\"","```","@salvatore","I","@alize","Are","OverloadedStrings","`T.pack`","Thanks,","But","Everything","Wow,","Another","@joey","replace::","replace","replace","@dianna","A","@gudrun","There","The","All","You","The","The","Consider","This","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","I'm","Why","Well","True.","Your","I","I","Hm.","I","Short","pedantic","This","@manuel","I've","I","I","The","Currying","And","This","There","I","\u003e","(strict-concurrency","Trying","```","*BankAccount\u003e","*BankAccount\u003e","*BankAccount\u003e","*BankAccount\u003e","b","*BankAccount\u003e","Just","```","Inserting","I","I","The","You","A","data",",",",","deriving","I","The","Often","Not","I'd","```","responseFor","responseFor","|","|","where","isQuestion","```","`go`","`encode`","`foldl`","2-space","You","Ah,","You","Is","Nothing","The","Another","transform","transform","You","Why","I","The","You","If","Is","Ah","I","```haskell","(|\u003e)","x","```","(Might","As","Thanks,","A","Not","To","This","You","Also","The","You","In","I","Not","With","What","I","Let","These","```haskell","mkRobot","resetName","robotName","```","Yes,","In","Looks","I","But","Note","The","The","Also,","@sammie","I'll","The","`robotName`","do","x","return","Desugars","m","And","m","As","`randomName`","Strange,","I'd","Thanks,","nothing","Overall","`mkRobot`","name","ioName","return","--","ioName","return","--","ioName","(return","--","randomName","In","A","randomName","where","a","n","The","Data.List.Split","Since","The","Try","The","Overall","I","Thanks","I","Just","It's","Otherwise,","`yell`","That's","Not","Also,","Looks","λ:","class","(\u003e\u003e=)","...","--","infixl","λ:","(.)","infixr","I","Another","in","You","In","yikes","You","Instead","Great,","Thanks","Overall","`and","`and","There","`isLetter","Data.Function","I","I","You","Given","If","It","1.","2.","But","The","An","The","`unlines`","-yes","`map","This","Thanks","Good","@roy,","For","Thanks","I","The","I","There","Map.insertWith","This","If","As","The","You","I'm","The","You","@sage","Thank","I","Please","Thanks","Overall","1.","2.","`action","For","case","Just","_","For","case","(Just","_","So","Code","````haskell","foo","|","|","````","Is","`foo","Thanks","`List.foldl'","`if","Also","````","unwords","````","All","cleanUpInput","Thanks","I","(unwords","Anyway,","Why","in","Can","Note","hammingDistance","hammingDistance","However,","hammingDistance","where","go","go","The","`splitAt`","If","`if","`isAsking`","There's","`words`","`isIgnoring`","1,4,5,10,40,...","Really","Thanks,","Now","@alvena","Thanks.","I","any","for","Regarding","Even","Consider","it","Try","`mapM","Uses","There's","Looks","The","Good","I","Probably","Try","You","@weldon","I've","normalize","@peggie","If","Data.Tuple","Using","You","@leila","`isIgnoring","I","Have","Thanks","As","```","hammingDistance","hammingDistance","```,","Thanks","`Data.Map`","`sanitizeInput`","Almost","It's","````","import","import","`````","Thanks","If","What","This","`map","You're","There's","Hate","divMod","divMod","divMod","divMod","…","divMod","If","Looks","`filter`","You","Ah","Agreed","I","Ah","I","Actually","Edit:","This","@queen","Do","I","That","Everything","`number'","An","Only","`where`","I'd","Yes,","I","The","@sandy","Thank","No","And","it's","Int64","`total","I","Agree","1.","2.","Hm","Hmm,","I'm","I","You","liftM2","(++)","Doesn't","````","newName","where","letter","num","````","is","not","no","Following","Looks","I'm","OK","Thanks","Can","It's","It's","toRNA","If","($)","f","Usually","Yep","How","[","`maybe","The","toWeights","toWeights","|","|","toWeights","For","This","You","`enumFrom","Data.List.Split","If","You","Err,","I","Other","Then","I'm","Really","Cheaters!","(Seems","Oh....","I'd","If","Will","Oh..","\u003e","(terminology","MVar","`badNumber`","`::`","`splitAt`","I","In","And","You","Thanks","Thanks","I","Why","No","There's","The","Your","Thanks","`take","1e9","Tests","`,","will","It","Why","Yes,","@griffin","Thank","Also","D'oh","`filter`","The","You're","Instead","This","I","Yes,","All","still","You","perhaps","You","I","The","Yes,","Data.List.Split","Data.Map","Note","Data.List's","*","*","*","It's","You","The","I","This","You","I've","I","I","go","|","|","|","where","why","Instead","allergies","Hey","I","using","It","`insertWord`","Ha!","I","Right,","A","Yes,","````","cancatMap","````","Here","However","`concatMap","Should","My","It","Nice","Is","I","The","I'm","You","See","So","I","MVar","The","If","````","usBijection","````","Thanks","Minor","`takeMVar","It's","I'd","Maybe","Thanks!","Also,","Guards,","Usage","Also","That's","Could","Please","Everything","````","lettersOf","sameLetters","````","Shoot,","Thanks","Well","Inspired","Nice.","Nitpicking","You're","Capitalize","Can","I've","As","it's","`unlines`","Of","That's","I've","Thanks!","If","1+acc=1+(1+acc)=1+(1+...)","Consider","I'd","I","There's","Some","Also","I've","Thanks","Nicely","I","Furthermore,","Lastly,","Try","`(.&&.)","If","edit:","Most","`length","I'm","`filter`","You","This","As","Some","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","It's","`zip`","As","````","count","````","Its","The","Just","not","Good","This","Just","ops,","No","Thanks","Having","@dashawn:","@dashawn,","@dashawn:","Yep,","Having","Got","I","Hm","A","If","data","toRNA","toRNA","Thanks","If","Oh","I've","As","If","If","The","An","Here's","*","*","*","Here's","*","*","*","Assume","Here's","*","*","*","*","*","*","This","*","*","*","*","*","*","However","*","*","*","*","*","*","Whoops.","Now","Because","Thread","*","*","Thread","*","Here's","*","*","*","Or:","*","*","*","But","*","*","*","Now","Python's","foldl","def","for","acc","return","def","for","acc","return","There","The","Stylistically,","As","Ghc","The","TVars","BTW","https://github.com/tibbe/haskell-style-guide","There","There's","I","Anyhow,","Following","The","`foldl1'","You","Can","Ah","@sylvester","λ\u003e","[2,3,4,5]","λ\u003e","[2,3,4,5]","Btw","You're","I'm","````","foo","Line1","Line2","where","binding1","````","And","This","Using","For","So","https://gist.github.com/etrepum/0997fd3fc38957eb1dbf","It's","Anyway,","Yes,","`where`","Thanks,","It","If","data",",",",","deriving","You","It","Either","I","I","Well,","The","`replace`","Instead","Otherwise","I","Thanks","better","00","`zipWith","Of","Some","There","You","Using","toList","I'm","```ciphertext```","Array","`['0'..'9']`","I've","`findIndex`","Do","Mistake","For","Here's","http://hackage.haskell.org/package/base-4.6.0.1/docs/src/Data-List.html#transpose","Thanks","For","You","import","instance","foldMap","where","Then","For","Speaking","I'm","Thanks","Very","I","Love","There's","`not","Looks","I","You","λ\u003e","[(123,\"","`reads","`backpermute`","If","Thanks","Thanks,","Thanks,","I'll","set","````",",","Just",",","Just",",","Just","`````","I","How","`tryPutMVar`","With","Good","Do","````","1*3^5","`````","shouldn't","````","1*3^5","````","ByteString","1).","2).","Latest","http://hackage.haskell.org/package/bytestring-0.10.4.0/docs/Data-ByteString-Short.html","but","also","````","((==)","`````","`swapMVar`","If","data","getBalance","getBalance","So","So","I","`incrementBalance","fmap","writeTVar","return","Can","Ops,","BTW","`````","---","---","---","`````","There","a).","b).","What","This","The","This","`head","`nth`","Instead","`\\x","What","There","forgot","Functions","Yelling","If","Please","Its","thanks","A","Done","I","You","To","About","Do","Return","I","It","Also,","`validate`","The","It's","`filter","Function","Common","very","Why","Thanks","As","`reverse`","that","In","like:","````","notDuplicate","compareAnagram","````","once","Other","Thanks","Yep,","People","sorry","I've","Why","Module","Is","````","isShouting","--","--","--","--","`````","Theese","Here","Oh","Ooh,","I","`unwords`","It's","Data.Map","For","`wordList`","As","I","You","I","You","in","For","Ok,","```haskell","test_respondsToUnicodeShout","test_respondsToUnicodeShout","\"Woah,","test_respondsToUnicodeNonShout","test_respondsToUnicodeNonShout","\"Whatever.\"","```","I","Still","You","It's","Can","Otherwise,","I","Can","The","You","responseFor","|","|","|","`silence`,","Good","Is","`squareSize","squareSize","where","I","looked","there","replace","Also","Yes.","You","You","Data.List.Split","There's","Can","Additionally,","About","To","@nicklaus","I'm","The","passes","chose","I","for","````","toRNA","where","toRNAChar","```","Not","Everything","If","This","Problem","\u003e*","\u003e*","\u003e*","\u003e*","wonder","`map","you","`all","I'm","````","fromDNA","if","...","````","You'll","Instead","not","choise","isLetter","Is","Feeling","Ooh","`splitOn","`stringToPlants","stringToPlants","`garden","garden","where","cups","$","Ooh,","I","`garden","garden","where","cups",".",".","thanks","much","Data.Char","None","`answer`","`powtest`","I","You","2-space","`isCaps`","I","I","2-space","Is","You","f","|","f","What","You","`main`","since","It's","`toRNA`","This","For","Thanks,","I've","Check","There","Also","Consider","Better","where","Thanks!","I","Not","````","import","import","````","it","Agreed.","And","Ah.","You","It's","I","There","The","Also","Then,","Following","Definitely","Do","`head","Some","yeah","Interesting.","Also,","Thanks","I've","So,","Would","evaluate'","If","Everything","Am","````","thymidine,","````","Will","You","Most","Instead","Also","Good","Newtypes","````","newtype","--","````","so","The","How","Note","Can","Instead","Take","It","I","Other","Also","-","-","-","Comment","Use","@delpha","λ\u003e","λ\u003e","Nucleotide","λ\u003e","λ\u003e","Nucleotide","The","uracil","uracil","You","uracil,","uracil","thymidine","Closing","The","In","f","But","f","gx","The","Ideally","Although","You","One","Can","In","I","looks","if","Instead","You","Transcription","Did","I","I","I","@arvid","I","Edit:","A","`toRNA'`","Congratulations,","Data.List.Split","Also,","It's","`wordsBy`","Data.List.Split","`where`","Everything","aahh.","I","From","````","Deprecated.","O(log","````","Please","Could","@rusty","And","Instead","@flo","I","I","But,","@emerald","@maxwell","Not","`null","@matilde","Ops..","You","Here","As","You","@giovani","Looks","You","Everything","Checking","You","`foldl`","Lazy","@foster","@gerardo","Yes","@cooper","I","I","maybe","`where`","This","Great,","Thanks","This","I'd","You","@tyra","@monserrat","```","nMany","nMany","...","```","If","It's","You","Ideally","@verna","Thanks","@cielo","One","Its","@gia","```","anagramsFor","where","...","```","The","There's","There","You","Yep","There","`foldr`","@barton","You","````","filter","where","````","Then","(*)","Yep","Looks","Could","For","Bool","Note","It's","You","The","GHC","Looks","toRNA","where","translateDNA","'G'","…","Can","Usually","If","You","http://www.haskell.org/haskellwiki/Section_of_an_infix_operator","http://www.haskell.org/onlinereport/exps.html#sect3.5","Looks","I'd","You","Is","If","@sheldon","Thank","Can","Even","For","the","Can","There","Thanks","I","`filter","And","`length","I","`count","@elizabeth","*","Failure","name","*","*","*","r","resetName","n1","No,","[1]","I","Sorting","`show","@rhea","Out","@cristina","You","http://hackage.haskell.org/package/ghc-core","AFAIK","Thanks","Can","@craig","Wouldn't","Once","Or","@kaley","@elyse","you","isPunctuation","According","`````","f","f","--","f","`````","Still","@brendon","Thanks,","@garret","Other","Looks","`largestPalindrome`","It","`go","cases","It's","`zipWith`","Afaiu","@adrianna","There","I've","Finally","foldr","Can","You","This","not","@gloria","Sorting","I","You","mod400","@viviane","@darian","Thanks","ha..you've","It","Why","I","Because","````","do","x1","return","````","But","You","Its","You","I","I","In","@javon","Test","@mohamed","Try","`(not","You","Solution","You","anotherStyleOfNamingFunctions","I've","This","--","zipWords","--","zipWords","@anita","Its","Really","You","I","Thanks","Thanks","Indeed","While","Whoops,","I","it's","Also","@dulce","I","It's","`foldl`","`reverse","I'm","I'm","```phrase","```","Or","```phrase","```","This","`reverse","Last","I","This","really","Also","The","it's","I","Because","This","I","I","You're","Yes,","But","Here","import","import","Nice,","@santino,","The","Yes","`What","@bert","While","Thanks!","You","You","Also","You","I","if","```","λ\u003e","(^)","```","type","I'm","`Defaulting","arising","Shouldn't","I've","```","[Equilateral,","```","it","you","@robb","It","@breanne","@jarrett","Adapted","@dayana","You","Lets","on","```","λ\u003e","addDays","```","this","```","λ\u003e","div","```","but","```","λ\u003e","(^)","```","The","For","Here","```","λ\u003e","λ\u003e","(.^)","```","by","Nice,","@cecilia","what","The","Pull","I've","@tiara","@sienna","yes,","@makenzie","The","@deangelo","Thank","Should","@valerie","nice.","Really","`exers:doubleicm`","Thanks!","Also,","you","@june","What","http://www.haskell.org/tutorial/numbers.html","@tyler","@greyson","Problem","I","You","@sabina","@heidi","Instead","@meghan","Thank","@dell","what","As","`sum","don't","why","why","For","It","mean:","mean:","This","Is","Don't","Also","@jeff","@timmy","Something","```","nucleotideCounts","(","(","```","Not","I've","will","again","Assume","```","fxyz_g","=","=","=","```","Yachoo!","And..","```","foldl","```","?","now","P.S.","using","P.P.S.","If","I","I'm","`main","From","```","fromBool","fromBool","fromBool","```","you","how","This","It","@king","ha...","Can","Hmm,","With","I","You","```","(\\x","```","Don't","@erik","I","w/o","```","\\Sum_{k=1}^n","```","makes","However","@norval","You","[Stirling](http://en.wikipedia.org/wiki/Stirling%27s_approximation)","![equation](http://latex.codecogs.com/gif.latex?O(log(n!))","I","Should","@sonny","With","With","The","@hollie","Have","Boobs","Also","I'm","`incrementBalance","where","You","I","this","The","@alyson","Also,","`incrementBalance","Ghci","(2:3:[","@taylor","@brandy","The","You","it","However","Doesn't","@milo","@deron","@howell","It'd","Its","You","It's","I","Is","Its","very","`invalid`","A","invalid","Can","Solution","1).","2).","1)","2)","Solution","1).","2).","This","I","You","No","You","```","replaceNucleotide","|","|","...","```","Will","Sure.","@ernestine","@loma","`maybe","Why","Maybe,","@natalie","You","@haylie","Really","You","@bella","I","Using","If","```","detectSilence","detectSilence","```","Also","Thanks,","Not","I","I","Thanks","Sorry,","`let","Is","As","```","let","```","Now","```","fromMaybe","```","Or","Feel","I","Cleaned","I'm","Not","And","`guard.","@makenna","Because","So","As","@jaeden","*","*","Use","Wowwww","@clifton","Suggestions","using","you","```","mkRobot","```","also","Also","carry","@natalia","can't","Is","Using","You","```","((==)","```","Also","Data.List.Split","The","The","You","Consider","In","When","instead","Or","Last","`f","```","z","if","```","And","```","...","|","```","or","additional","You","You","Did","The","You","An","Can","@bonita","@cyrus","@tristian","Thank","@shyann","This","@evert","Yes,","```","1_bin","11_bin","111_bin","=","...","```","@willy","If","The","```","map","[-1,-1,2,2]","map","[-2,-2,1,1]","map","[-1,-1,1,1]","map","[-2,-1,1,2]","```","Nope,","This","The","The","The","Can","`zipWith`","@orland","Yes,","Using","`length.filter","It","@tania:","Yeah,","You","@melyssa","Thank","Things","The","I","Looks","using","really","use","`zipWith`","It","`div","`squareSize`","Please","@rhianna","@destin","you","too","Think","@jannie","@frederik","you","Can","@dagmar","@king","@odie","I","It","Apologies.","it's","Yes,","```","int","if","else","}","```","this","```","int","loop:","if","else","}","```","Now","But","Trick","Really","it's","you","Many","[",",",",",",","you","@elenor","I","An","convert","convert","@heaven","Really","```","data","```","so","P.S.","Ah!","But","Yes,","do","```","data","```","this","```","a","a","b","b","```","this","@arturo","@rosetta","Yes,","about","```","instance","foldMap","where","```","And","Also","assuming","```","fmap","```","will","Also","Combining","I","It's","Take","Can","It'd","Can","`foldl'`","you","Would","@raphaelle","You","To","If","you","You","@sunny","you","Btw,","`[Char]`","Well,","Point","Your","@amalia","or","@andy","`slices","You","I","Also","Noted,","I","I","@marquis","@madyson","`makeThisFunctionPassTests`","What","Can","```",",","fromList","msString","```","The","You","More","Not","@wilford","It's","Here","import","import","As","`(.)$(.)`","http://www.haskell.org/haskellwiki/Pointfree#The_owl","My","Data.Maybe","encode","caesarEncode,","caesarEncode","caesarDecode","What's","Key","Yes,","I","fails","\"\\xdcML\\xc4\\xdcTS!\"","I'm","@prudence","@destiny","because","```","data","```","Here","The","```","data","```","i.e.","@autumn","Just","\u003e","The","You","@brooks","Also,","`verses`","2).","`unwords`","Seems","\u003e","`toList`","You","Also","```","toDecimal","toDecimal","```","I","I'm","just","```","INPUT:","1).","if","otherwise","```","@tess","'\\xdc'","you","@alycia","I","@vincenzo","Thank","`(f","About","If","I","Any","@arnold","I","Everything","@breana","There","Yep","You","Its","@rowena","Also,","You","```","import","```","Then","using","a.","b.","Solution","Why","Also","You","`mkRobot`","Try","On","@arnoldo","Why","Also","Everything","I'm","The","I","\u003e","not","\u003e","so","\u003e","and","\u003e","are","`foldl","Thanks","You","@hellen","@annabel","The","Other","@herminio","@martin","Thank","Interesting...","As","Can","I","Both","You","Yes","No,","@anabel","You","The","@berry","What","or","should","Yeah","You","Lazy","Not","Like","You","[1,1..]","Lazy","@miguel","This","```",",","fromList","msString","```","@nathen","@abby","It's","Using","\u003cpre\u003ePrelude\u003e","\"abcd\"","flip","Prelude\u003e","\"cdab\"\u003c/pre\u003e","The","You","You","Thank","First","Is","Or","`foldl'`","Also","Out","You","You","As","wordsBy","Why","Words","I'm","@elliot","You","why","the","Is","You","Also","@alessia","No","Or","aah","I","Reasonable","First","foldr","Since","unwords","You","Also","If","Also","On","Looks","Line","There","You","I","And","letters","The","The","Which","Also,","In","Nevermind,","Yep,","I","At","So","If","You","Why","Same","You","I'm","Second","The","\u003cpre\u003e","\\one_long_line\"\u003c/pre\u003e","prints","Keep","reads","Forgot","`xs`","you","`diff","Doing","You","This","`Intersperse","I'm","I","About","I'm","I've","What","This","What","You","I","Oh,","Also","I've","I","I've","I","I","Have","You","Isn't","You","It","Does","You","OK,","I","Anyway,","Yes","Foldl'","No","Forgot","That","\"solution","I","\"One","Ah,","@tamara:","I","You","@gay","Thank","I","Unfortunately","I","Some","Perhaps","I","For","@trever","Thank","`sequence`","It","Where","Sorry","`countWithMap`","There","splitOn","You","Actually","Is","Really","`[Myabe","ah","Good","everything","Can","I've","Smart","comps'","This","Can't","I","```","λ\u003e","```","There","Looks","Are","no..","`fromListWith`","Are","You","yes.","Why","Yep,","what","it","It's","@lorena,","```hs","--","foldl","```","Take","length","The","((1+1)...+1)","With","1+(1+..(1+1)","Foldr","You","Also,","then","That","Code","Also","Yeah","reading","I","Stm","The","IORef","MVar","TVar","You","You","Using","Great,","this","Rewrote","@carmela","You","You","\u003cpre\u003ewordCount","No","Do","```haskell","isYelling","```","Please","You","You","Also:","`sortBy","It","In","```","robotName","robotName","mkRobot","mkRobot","resetName","resetName","```","Feel","Looks","Take","You're","letters","It","Too","Take","Really","`M.fromList","really?","I","I","There's","`MVar`","guards","I","\u003cpre\u003esplit","split","where","(first,","first'","rest'","then","Last","Function","Looks","Thanks,","\u003cpre\u003eimport","data","data","|",",",",","}","Also","You","I","You","It's","with","you","```","λ\u003e","0","λ\u003e","1","```","Yep","By","smth","```","|","where","go","```","You","`elem`","Too","Seems","Guards","Which","Thanks","Do","Also,","I","You","I","and","Yes!","You","you","```","go","|","|","```","Yeah","@cara","@april","you","Data.IntMap","Sort","i.e.","`instersectBy`","Looks","Please","Sorting","words","Take","Using","You","Its","Lazy","`where`","aah,","Uncommon","However","@leif","reverse","@jerel","@antonina","Makes","You","`[Char]`","Also,","robotName","and","this","data","No","```","data","```","Will","My","data","no","You","I","Used","It","Also","`elem`","Sorry","Just","Do","Thus","```","data","```","Such","Because","I","And","Really","You","```","1111=1*2^3+1*2^2+1*2^1+1=","=","=","=","```","This","Yes,","You","You","Its","For","There's","I","This","\u003cpre\u003eimport","import","Good","You","The","Yes","Just","If","I","\u003cpre\u003enextOdd","The","```","data","```","you","```","data","```","By","@mitchell","You","Also,","|","|","Also","sorting","Much","`where`","Also,","What","```","toList","toList","```","When","Because","So","```","f","f","=","=","=","=","=","=","=","=","```","This","The","Basically","It","@sophie,","Can","Maybe","Cool,","I","I","using","also","concat","is","concatMap","Please","Sorry","whenever","@julius:","Why","you","I","That's","But","Anyway","On","Also","It","baseTable","frequencyTable","\u003e","yes.","\u003e","yes.","should","Looks","The","\u003cpre\u003e--","Prelude\u003e","0","Prelude\u003e","1","Prelude\u003e","2\u003c/pre\u003e","yeah,","unlines","unlines","unlines","unlines","so","unlines","\u003cpre\u003ePrelude\u003eid","True","Prelude\u003efilter","[True,","Prelude\u003elength","2","Prelude\u003ezipWith","[True,","...\u003c/pre\u003e","log(24)~3,","isn't","I","```","ageOn","where","t","t","```","or","on","```","benchmarking","mean:","std","benchmarking","mean:","std","found","```","I","any","It","I","What","I","Ah","Thanks!","I","From","benchmarking","mean:","std","benchmarking","mean:","std","for","does","I","nice.","if","What","Yes,","I've","Maybe","I'm","Previous","@lyric:","you","you","I","Yep,","More","```","M.fromList","```","Thanks,","also","It's","Any","you","specification","Not","wow...I","also","```","mapM","where","letter","```","This","Conversion","I've","but","mapM","and","letter,","do","Yeah,","I've","Phone.hs:14:23:","Defaulting","(Integral","arising","(Num","In","In","splitDigits","In","prettyPrint","=","\"(%s)","(areaCode","(splitDigits","(splitDigits","where","digits","splitDigits","When","Its","hmm,","Thanks!","You","`concat","```","[","let","ok","in","```","So","http://www.haskell.org/onlinereport/exps.html#sect3.11","Also","ah","you","Didn't","I","I","on","ah","if","@marguerite","\u003cpre\u003elexeme","Also","Try","```","mapM","where","letter","number","```","may","why","You","```","gen","newIORef","```","you","If","You","maybeInsert","```","maybeInsert","```","Maybe","Hmm,","Nice","Sorry","```","instance","foldMap","where","```","And","Foldable","Is","Or","And","Better","Outer","Yeah,","(Before","Also","Cut","Hmm,","Yes,","Looks","About","There","Hmm,","Better,","Do","Ooh","Exaclty","Not","Hm..","Otherwise","You","No","```","go","```","There","Fold","try","But","None","Here's","*","*","*","*","Looks","let","febThirteenth","wednesday","(_,","days","in","`elem`","It's","You","Generally","`romanNumbers`","Why","Cheating,","Because","Yes,","Or,","How","Is","I","For","```","foldl'","where","go","go","go","```","The","Oops,","I","You","I","looks","I","in","`result","Also,","`intercalate","1)","You","Data.Map","Yes,","https://stackoverflow.com/questions/6172004/writing-foldl-using-foldr","http://www.rsdn.ru/forum/decl/4314168.1","Please","I","Maybe","You","as","You","You","Tried","What","Instead","yep,","thanks","I","got","Sorry,","Please","I","```","responseFor","|","|","|","```","Can","You","not","Thanks","(\\s","can","(\\`isAnagramOf\\`","Yeah,","Clear","Can","```letterValues","thanks,","Can","I","\u003e","`biapp","Edit:","`biapp","Edit2:","-","You","try","cool,","try","```haskell","count","|","|","```","Can","Ah,","I","Also,","@rosario","again","I'm","You","```","where","expandPairs","expandPair","```","I","Also,","BTW,","er","you","I'm","@kory","oh,","Thanks,","it's","You","in","```Data.HashMap```","Also,","In","Why","Thanks.","Looks","Seems","From","For","use","Data.List,","Will","Looks","reverse","You","To","\u003e","Since,","I","At","You","I","`removeNonAlphaNum`","```sqrt","@geovany","https://github.com/etrepum/exercism.io/commit/735d3f02ad2ac604393d5c68f52185e8fbcab977","I","tallyWord","Not","Clever,","Actually","Thanks","-","-","About","This","On","I","Much","Darn","Thanks","Thanks","My","Okay,","You","Oh,","anagramsFor","It","anagramsFor","not","Would","It","This","I","It","Possibly","`[a,","to","\u003e","It","`--","so","Sure","I","I","As","Much","`Data.Map.insertWith'`","`Data.List.Split.wordsBy`","You","Top-level","You","I","It's","Hmm,","You","This","Not","I","Very","My","I","I'm","Ah,","Looks","Not","Also,","Practical","Point-free","Probably","Much","Turns","Thanks","I","You're","```","Prelude\u003e","Prelude\u003e","[\"\",\"test\",\"\"]","Prelude\u003e","[\"test\"]","```","My","```","do","return","```","with","I","I","As","@sasha","Also,","I","anagramsFor","anagramsFor","where","isAnagram","where","(lowWord,","normalForms","where","Trying","From","```","Implement","What","Remember","```","I","Ignoring","*","Ah,","I","A","I'd","Ah,","Is","I","I'm","You","Looks","My","-","-","-","-","Using","A","A","allSpace","Guards","It","Since","Really","Oh,","I","Quite","Just","Really","```map```","```","do","return","```","=","`getBalance","=","`getBalance","=","`getBalance","---","Do","I","Hey","In","Thanks!","OK,","```","*BankAccount\u003e","*BankAccount\u003e","*BankAccount\u003e","*BankAccount\u003e","b","*BankAccount\u003e","Just","```","but","```","*BankAccount\u003e","*BankAccount\u003e","*BankAccount\u003e","*BankAccount\u003e","b","```","Seems","sort","I","What","I'm","It","I","Oh,","have","I","interesting","The","I","bank-race.hs","```","import","import","import","incrementProc","v","void","print","putMVar","return","main","replicateM","```","output","```","\u003ebank-race.exe","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","Just","```","It","Looks","One","or,","```","classify","'A'","```","Hey,","Its","It","```foldr```","For","If","Yes","Thanks","Ahhhh,","don't","Hmm,","Notice","Better","```[[\"a\",","Finally,","There's","Oh,","I","```","strip","where","|","```","Not","```quotRem```","```(10","That","Accroding","(&&)","You","Looks","Interesting","You","Since","```","classify","classify","...","```","or","```","classify","'A'","'C'","...","```","would","It","Can","Looks","All","There","You'd","`sep`","If","There","You","There","This","*","*","To","The","I","This","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","@maymie","Try","Instead","Nice","Most","Is","Using","Can","A","`show","I","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","This","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","Another","Yup.","My","Ahh,","`unlines`","Another","Another","Most","@rashawn","It","I'm","How","Can","There's","Data.List.Split","There's","It's","Can","Are","Thanks","My","I","An","edit:","I","Thank","There's","The","λ\u003e","(++)","infixr","λ\u003e","class","(/)","...","--","infixl","That","Thanks","In","Still","Didn't","is","Also","Instead","I","Ideally","Thanks","Looks","*","*","I","`enumFrom","There's","`(sum","Cool,","Oops,","It","Thanks","I","There's","`strip`","Using","You","Nice","Passes","It","Even","Maybe","I'm","-","-","-","-","Greatly","Dropped","Personally,","I","Ah,","Part","Edit:","I","My","-","-","Also,","I've","Looks","-","-","-","-","I","I","One","I'm","We","It","As","It's","```zipWith```","Nice","You","You","You","There","It","If","I","Normally","I","I","This","There's","Thanks","Ahh,","I","Yeah,","Looking","Looks","For","Options","As","very","Hehe,","You","```foldr```","```(increment","This","```foldl'```","[This","For","-","-","-","-","Despite","you","I","`fromDay`","yeah,","@karolann","@rubye","@price","It","You","The","Why","Can","It","Can","`None`","The","Ah,","Would","`sequence","Can","Ahh,","Hmm.","-","-","So","Hmm.","I'm","No,","It","Ahh,","Yeah,","Ohh,","Ah,","Any","I","Oh,","Pretty","Ahh,","Oh,","hm..","```","xxx","x","x","x","xxxxxxx","```","This","Hmm.","The","The","-","-","-","Let","That's","That's","If","Oh,","Agree","All","I'm","I","I","Oops.","not","-","-","-","-","the","For","Looks","Agreed,","I","One","Oh,","Yeah,","You","```Haskell","hammingDistance","```","More","It","You","go","Some","λ\u003e","(||)","infixr","λ\u003e","class","(==)","...","--","infix","In","Ahh,","Heh,","`column`","`allUpper`","`\"\"`","2-space","Also,","Data.List.Split","There"]," ![equation](http://latex.codecogs.com/gif.latex?O(log(n!))":["="]," \"(%s)":["%s-%s\""]," \"?\"":["`isSuffixOf`","`isSuffixOf`","`T.isSuffixOf`"]," \"Data":["structures"]," \"Fine.":["Be","Be","Be","Be"]," \"One":["important"]," \"Reverted\"":["to"]," \"The":["structure"]," \"This":["is"]," \"Whatever.\"":["@=?"]," \"Woah,":["chill"]," \"\\xdcML\\xc4\\xdcTS!\"":["how"]," \"a":["function","function"]," \"abcd\"":["\u003c/pre\u003e"]," \"induvidual\"":["should"]," \"map\"":["[~1]","[~1]"]," \"mapFB\"":["forall","forall"]," \"mapList\"":["[1]","[1]"]," \"solution":["is"]," ###":["Failure","Failure","Failure","Failure"]," #if":["__GLASGOW_HASKELL__","__GLASGOW_HASKELL__"]," $":["runhaskell.exe","hlint","ghc","ghc","runhaskell","[rows"]," %":["cat","ghc","ghci"]," &&":["any"]," &amp;&amp;":["has"]," &gt;":["consider","It's","Write","Some"]," 'A'":["-\u003e","-\u003e"]," 'C'":["-\u003e"]," 'G'":["-\u003e"]," '\\xdc'":["just"]," (":["Map.fromList","Map.fromListWith"]," (\"CM\"++)":["."]," (\"M\"":["++"]," ($)":["::"]," (&&&)":["::"]," (&&)":["::","::","::","will"]," ('1':no')":["="]," ((\"M\"":["++"]," (((\"M":["++"]," (((==)":["`on`"]," ((+1)":["\u003c$\u003e)"]," ((==)":["`on`","`on`"]," ((a":["++"]," (*)":["this"]," (+)":["::","::"]," (++)":["::","\u003c$\u003e","::"]," (.)":["::","::","::"]," (.:)":["::","::","="]," (.^)":["::"]," (/)":["::"]," (/=)":["::"]," (1)":["When"]," (10,":["ds)"]," (11,":["'1':ds)"]," (2)":["`atomically`"]," (2:3:[":["f"]," (3)":["I"]," (3,":["\"Pling\"),"]," (4)":["Why"]," (5,":["\"Plang\"),"]," (7,":["\"Plong\")"]," (\u003c&\u003e)":["::","="]," (\u003c*\u003e)":["::","::"]," (==)":["::","::","::","::"]," (\u003e\u003e=)":["::","::"]," (Actually,":["there"]," (Before":["starting"]," (By":["\"no"]," (EDIT:":["Right,","Err,"]," (GHC.Base.\u003c$)":["::","::"]," (Haskell":["support"]," (I":["had"]," (Integral":["a0)"]," (Just":["a,"]," (Markdown":["isn't"]," (Might":["want"]," (Num":["a0)","a0)","a0)"]," (Or,":["if"]," (P.S.":["I"]," (Seems":["autocomplete"]," (Show":["a0)","a0)"]," (There":["might"]," (This":["is"]," (\\`isAnagramOf\\`":["str)"]," (\\s":["-\u003e"]," (\\x":["-&gt;","-\u003e"]," (^)":["::","::"]," (_,":["_,"]," (`f`":["x)"]," (`isAllergicTo`":["i)","value)"]," (`map":["f"]," (a:as)":["==","++"]," (according":["to"]," (and":["it"]," (areaCode":["digits)"]," (first,":["rest)"]," (flip":["isAllergicTo"]," (fmap":["(+1))"]," (isSuffixOf":["\"?\")"]," (liftM":["(+1))"]," (lowWord,":["lowSortedWord)"]," (map":["(toUpper)"]," (p.s.":["I"]," (return":["."]," (score,":["letters)"]," (splitDigits":["!!","!!"]," (strict-concurrency":["doesn't"]," (terminology":["depends"]," (the":["trailing/leading"]," (unwords":["."]," (w,":["s')"]," (|\u003e)":["::"]," (||)":["::"]," )":["are"]," *":["Using","It's","You","I","The","You","[Data.HashMap.Lazy](http://hackage.haskell.org/packages/archive/unordered-containers/0.1.4.3/doc/html/src/Data-HashMap-Lazy.html)","[Data.Map.Lazy](http://www.haskell.org/ghc/docs/latest/html/libraries/containers/src/Data-Map-Base.html#fromListWith)","There","`null","Try","Also,","The","Checking","Your","Comments","You","I","It","the","I","The","If","Consider","Rather","I","Data.Char","It's","Same","`isQuestion`","Shrink","Add","Put","Using","For","Technically,","Would","Using","Nice","Limit","Limit","Add","Limit","Limit","Add","you","you","It","If","If","Depends","If","All","MUST","I","Then","Click","Go","Click","Search","I","Maybe","For","Have","Error","Google","When","The","(a)","(b)","(a)","(b)","`foldl`","`elem`","`seen","It","It","\"1\"","\"11\"","\"111\"","an","invalid","invalid","read","add","write","read","add","write","`As","`As","`S","`Bs","`Bs","`S","`Bs","`Bs","`S","`As","`As","`S","`As","`As","`Bs","`Bs","`S","`S","take","put","put","`Am","`M","`M","`M","`Am","`M","`Am","`M","`M","Final","Is","I","how","perhaps","swapConcat","Calculate","Calculate","Get","Add","I","Data.Map","`foldr`","It's","There"]," ***":["Exception:","Exception:","Exception:","Exception:","Exception:","Exception:","Exception:"]," **Doh**,":["I"]," **Example:**":["imagine"]," *Alphagram*,":["cool,"]," *BankAccount\u003e":["a","Control.Monad.replicateM_","b",":p","b","a","Control.Monad.replicateM_","b",":p","b","a","Control.Monad.replicateM_","b",":p"]," *DNA&gt;":[":t"]," *Defaulting":["the"]," *Scrabble\u003e":["scoreWord","scoreWord"]," *head":["explodes*"]," +++":["OK,"]," +1":["for","for"]," ,":["nodeNext","nodePrev","nodeNext","nodePrev","matrixRows","matrixCols","(\"DG\"","(\"BCMP\"","(\"FHVWY\"","(\"K\"","(\"JX\"","(\"QZ\"","(\"dg\",","(\"fhvwy\",","…","bstLeft","bstRight","bstLeft","bstRight","testCase","testCase","testCase","(10,","(5,","(1,","testCase","testCase","val","next"]," -":["Maybe","`isShouting`","\":-)","\"WHAT","You","You","Same","I","Consider","`countWords`","you","also","`Control.Concurrent.STM`","with","I","I","can","I","Shouldn't","Is","`\\_","using","you","you","`wordsBy`","`insertWith`","`isAlphaNum`","lines","I","IMHO","With","`fromEnum`","also","switched","use","that","it","this","The","I","Why","Similarly,","I","Similarly,","It's","Instead","Since","I","`uracilToThymidine","`toRNA","You","You","`filter","Strings","suffers","not","i","Threw","using","using","use","use","alternatively,","you","Added","Got","Added","moved","The","There","Got","Factored","Improved","Made","Output","Make","Which","Make","Redo","Forgot","```add```","```grade```","```sorted```","Changed","Changed","Fixed","Changed"]," --":["Defined","requires","can't","these","what's","could","Defined","Defined","Defined","(...)","|","\u003e","\u003e","\u003e","The","Up","rewrite","form,","In","switch","thing","It's","(along","in","The","This","e.g.","The","The","Up","rewrite","form,","In","switch","thing","It's","(along","in","The","This","e.g.","fromList","fromList","vs","Defined","Defined","Defined","Defined","Defined","Defined","Defined","$","equational","Defined","Defined","by","convert","apply","Defined","or","=","or","=","unType","or","Using","With","This","Defined","Defined"]," ---":["incrementBalance","account","incrementBalance"]," -yes":["Control.Arrow"]," .":["I","transpose","lines"]," ...":["weren't"]," ...but":["why"]," ...proceed.":[";)"]," ...so":["now"]," 0":["=="]," 00":["|"]," 1":["(1.0%)","(1.0%)"]," 1)":["I","can"]," 1).":["bytestring","use","use","check"]," 1*3^5":["+","+"]," 1.":["Not","Code","use","Categorise","What","First,","Create","You","defining","```sanitizeInput'","Bang"]," 111_bin":["="]," 11_bin":["="]," 1_bin":["="]," 1e9":["or"]," 2":["suggestions","(2.0%)",":"]," 2)":["I"]," 2).":["bytestrings","break","break","call"]," 2-space":["indent","indent","indent","indent"]," 2.":["Not","you're","factor","Return","`'?'","There","In","`r`","using","Consider","let"]," 3.":["phrase","`\"Fine."]," 37-38":["lines"]," 4.":["using","Your"]," 5.":["Another"]," :)":["You"]," ::":["String","(String","String"]," :λ\u003e":[":info"]," ;)":["Thanks."]," \u003cb\u003e":["rsslldnphy\u003c/b\u003e:"]," \u003cb\u003eetrepum\u003c/b\u003e:":["Thanks."]," \u003ccode\u003eMap.fromListWith\u003c/code\u003e":["blew"]," \u003cpre\u003e":["\"this_is_all_\\"]," \u003cpre\u003e--":["data"]," \u003cpre\u003ePrelude\u003e":["(++)"]," \u003cpre\u003ePrelude\u003eid":["True"]," \u003cpre\u003eimport":["Control.Concurrent.STM.TMVar","Data.Time.Calendar"]," \u003cpre\u003elexeme":["$"]," \u003cpre\u003enextOdd":["x"]," \u003cpre\u003esplit":["\"\""]," \u003cpre\u003ewordCount":["="]," \u003c||\u003e":["is"]," =":["D1","fromListWithKey","foldlStrict","\\xs","\\xs","\\xs","g*(f*g^2","g*(g*(f*g^1","g*(g*(g*(f)","2×(1×2+1)+1=","2*(1*2^2+1*2^1+1)+1=","2*(2*(2^1+1)+1)+1=","2*(2*(2*(1)+1)+1)+1","f","f","f","f","f","(p1p2:","(p1p2:","p1p2:[]","printf","by","by","by"]," =&gt;":["so"]," \u003e":["atomicModifyIORef","You","Another","If","Selects","I'm","There","...","..","Is","The","For","For","Like","Create","If","-","something","(verse","(++)","verse","On","Is","`biapp","For","Also"]," \u003e*":["`G`","`C`","`T`","`A`"]," \u003ebank-race.exe":["+RTS"]," @abby":["Thanks."]," @abdul:":["I"]," @adrianna":["Yeah"]," @alba":["OK..."]," @alessia":["I","I"]," @alfreda":["thanks"]," @alisha":[":)"]," @alize":["That"]," @alvena":["Yeah"]," @alyce":["Thank"]," @alycia":["Yep,"]," @alyson":["Yep"]," @amalia":["Did"]," @anabel":["No"]," @andy":["I"]," @angus":["That's"]," @anita":["maybe"]," @annabel":["Yeah"]," @ansel":["Thanks"]," @antonina":["Then"]," @april":["Now"]," @archibald":["actually,","Arrow"]," @arnold":["aah"]," @arnoldo":["I"]," @arturo":["I","That's"]," @autumn":["wow"]," @barton":["I"]," @bella":["and"]," @bernie":["I"]," @berry":["Sorry"]," @bert":["Great."]," @bonita":["Ok"]," @brady":["Hmmm..."]," @braeden":["I"]," @brandy":["Do"]," @brandy:":["it's"]," @breana":["I"]," @breanne":["Can"]," @brendon":["It's"]," @bridget's":["option"]," @bridie":["I"]," @brody":["-"]," @brooke":["Hah!"]," @brooks":["I"]," @burdette,":["thanks"]," @cara":["New"]," @carissa":["You","Ugh..."]," @carmel":["Didn't"]," @carmela":["thanks"]," @carrie":["A"]," @cary":["You're"]," @cecelia":["Oh"]," @cecilia":["How"]," @chance":["Makes"]," @cielo":["@cielo"]," @cleora":["I"]," @clifton":["Actually"]," @consuelo":["Gah..."]," @cordelia":["-"]," @cordie":["&"]," @craig":["Thanks"]," @cristina":["I","Good"]," @cyrus":["Thanks."]," @dagmar":["Yep,"]," @darian":["Yeah"]," @darrion":["Now"]," @dashawn,":["@dashawn:"]," @dashawn:":["If","I"]," @dayana":["Yeah"]," @dean":["I"]," @declan":["I"]," @deion":["\u003cfacepalm"]," @dell":["Folding"]," @delpha":["I"]," @deron":["Do"]," @deshaun":["that’s"]," @destin":["Didn't"]," @destiny":["I'm"]," @dianna":["I"]," @drake":["Thanks"]," @dulce":["I'm"]," @ed":["yes,"]," @effie":["thanks"]," @einar":["thank"]," @elenor":["Very"]," @elisa":["Thank"]," @elizabeth":["You're"]," @elliot":["I"]," @ellsworth":["re:"]," @elmira":["I"]," @elody":["lol..."]," @elyse":["haha"]," @emerald":["By"]," @emily":["Thanks!"]," @enola:":["Yes,","Over"]," @era":["ah,"]," @erik":["Good"]," @erling":["I"]," @ernestine":["All"]," @esteban:":["I"]," @estevan,":["good"]," @etha:":["I"]," @eugenia":["\\o/"]," @eunice,":["finally"]," @evert":["Do"]," @fay":["Was"]," @flo":["Neat."]," @florence":["`map"]," @foster":["hmm.."]," @franco":["very","When"]," @frederik":["The","Not"]," @gage":["I"]," @garret":["Yeah"]," @geovany":["you're"]," @gerardo":["I"]," @gia":["Yeah"]," @gideon:":["It"]," @giovani":["Nice."]," @giovanni":["*doh*"]," @giovanny":["Thanks,"]," @gloria":["Yep,"]," @greyson":["Ok"]," @gudrun":["because"]," @gudrun:":["I"]," @gunnar.":["I've"]," @haylie":["aah,"]," @heaven":["Yep,"]," @heidi":["Ok"]," @helene":["Ugh..."]," @hellen":["Yep."]," @henriette,":["@henriette"]," @herminio":["Actually"]," @hilario":["Regarding"]," @hollie":["aah"]," @howell":["Good"]," @ivah:":["that"]," @ivy":["Thanks"]," @jacklyn":["I'm"]," @jaeden":["`flip"]," @jalon":["huh,"]," @jannie":["Is"]," @jarrett":["Weird."]," @javon":["I'll"]," @jayden,":["your"]," @jaylan:":["Fair"]," @jeanette":["Thanks"]," @jeff":["Good"]," @jeramy":["what","Thanks"]," @jerel":["Now"]," @jermain":["OK..."]," @jeromy":["not"]," @joey":["I"]," @judge":["the"]," @julie":["that"]," @julius:":["good"]," @june":["[Here]"]," @kaley":["Good"]," @kamille":["So"]," @kari,":["Thanks,"]," @karolann":["use"]," @katelin":["-","-"]," @keira":["thanks"]," @kellen":["Exercism"]," @kelton":["I"]," @ken":["do"]," @kenya":["like"]," @kim,":["Can"]," @king":["Nice","that's"]," @laury":["-"]," @lazaro":["you're"]," @leif":["You're"]," @leila":["I"]," @leonard":["will"]," @leopoldo:":["it"]," @leslie:":["you"]," @libby:":["what"]," @liza,":["thanks."]," @loma":["That"]," @lorena,":["not"]," @loyce,":["thanks"]," @lucinda":["I"]," @lulu,":["negative"]," @lyric:":["How"]," @madyson":["Yep"]," @makenna":["I'm"]," @makenzie":["Yep,"]," @manuel":["Thanks."]," @marcelino":["OK..."]," @margot":["Thanks."]," @marguerite":["Any"]," @mariane":["I"]," @marjorie":["`T`"]," @marlee":["thank"]," @marquis":["Isn't"]," @matilde":["ah"]," @maxime":[":)"]," @maxwell":["and"]," @maybell:":["maybe."]," @maymie":["interesting,"]," @mekhi":["Aha!"]," @miguel":["I'm"]," @milo":["Yeah"]," @mitchell":["That's"]," @mohamed":["I"]," @mohammad":["ha!"]," @mona":["@mona"]," @monserrat":["Do"]," @mozelle":["thanks!","Thanks"]," @natalia":["sorry"]," @natalie":["Something"]," @nathen":["because"]," @nedra,":["I"]," @nicklaus":["is"]," @nigel,":["I"]," @noemi":["\"shout"]," @norbert":["`toUpper"]," @norene":["Oh"]," @norval":["Good"]," @nyah":["the"]," @odie":["That"]," @oleta":["Alternatively"]," @orland":["Very"]," @peggie":["yes"]," @peggie,":["I"]," @perry":["is"]," @price":["Hm,"]," @prudence":["That's"]," @queen":["I've"]," @quinn":["OK..."]," @rachael,":["thanks"]," @rae":["Exactly"]," @ralph":["Regarding"]," @ransom":["Ah..."]," @raphaelle":["Got"]," @rashawn":["heh,"]," @reginald":["How"]," @rene":["Oh,"]," @rhea":["`filter"]," @rhianna":["Yep."]," @rhiannon":["`Text`"]," @robb":["That's"]," @robbie":["like"]," @roberto":["I"]," @rollin,":["lol"]," @rosalinda":["I"]," @rosario":["thanks"]," @rosetta":["I"]," @rowena":["Great,"]," @roy,":["I'm"]," @rubye":["I"]," @russel,":["my"]," @rusty":["I"]," @sabina":["Thanks"]," @salvatore":["It"]," @sammie":["I"]," @sammie,":["/="]," @santino,":["that"]," @sasha":["I"]," @shad:":["Isn't"]," @shyann":["Thanks"]," @sienna":["That"]," @sofia":["The"]," @sonny":["or"]," @sophie,":["thanx"]," @stacey":["do"]," @stacey,":["thanks"]," @stefanie,":["Thanks"]," @sunny":["These"]," @sylvester":["Note"]," @tamara:":["Ah,"]," @tania:":["This"]," @taylor":["How"]," @terry":["thanks"]," @tess":["haha"]," @thora":["Thanks..."]," @tiara":["I"]," @timmy":["aah"]," @torrance":["I"]," @trey":["Thanks."]," @tyler":["But"]," @tyra":["I"]," @una":["I"]," @uriah":["Personal"]," @vada":["Yeah,"]," @valerie":["Oh"]," @veda":["Clever"]," @verda":["thanks!"]," @verna":["Do"]," @vernon":["@vernon"]," @viviane":["Thanks."]," @vivien":["-"]," @weldon":[":"]," @wendy,":["I"]," @wilford":["there","I","That's"]," @willy":["Is"]," @woodrow:":["mind"]," @xavier:":["for"]," @zola":["I"]," A":["somewhat","way","trick","lot","way","confusing","little","type","few","neat","bit","set","better","`foldl'`","suggestion","much","nice","very","similar","quick","slightly","cleaner","hint","much","simple","few","trick","very","slicker","list","better","common","great","couple","way","point-free","definition","reverse","trick","`concatMap`","rule","pure","map","simpler","sensible","more","related","qualified"]," AFAIK":["the"]," AKA":["`(dimap"]," About":["the","transactions","writing","matrix,","task:","try/catch","using"]," Above":["pragma"]," Absolutely":["no","correct"]," Absolutely.":["Since"]," According":["to"]," Accroding":["to"]," Ace,":["thanks."]," Actually":["there","I'm","maybe","it","i"]," Actually,":["looking","you","isAlphaNum"]," Adapted":["to"]," Added":["the","an"]," Adding":["more","an"]," Additionally,":["consider","since","can"]," Afaiu":["it"]," After":["all,","going","that,","that"]," Again,":["not","thank"]," Agree":["on","with","that","with",":)","with"]," Agreed":["with"]," Agreed!":["Those"]," Agreed,":["it"]," Agreed.":["I","I"]," Ah":["yes,","nice!","thanks","!","I","of","thanks,","yes,","yes,","right,","yes,","I","nevermind,","right,","yes,"]," Ah!":["Thanks!","I"]," Ah,":["you","didn't","I","wonderful.","yeah,","I","because","good","of","no,","I'm","just","right,","of","right,","gotcha.","right,","yes,","cool,","yes,","lovely,","good","I","good","ok","good","yeah","careless","thanks,","yes,","but","hmm."]," Ah.":["I've","Thanks"]," Aha!":["I","Very","I"]," Aha,":["I"]," Ahaha,":["I"]," Ahh,":["looks","yeah","that","thanks","thanks","I","yeah","interesting.","yeah"]," Ahhh,":["I"]," Ahhhh,":["I"]," Ain't":["that"]," Algebraic":["data"]," All":["input","tests","my","the","that","of","the","feedback","that","top-level","of","top-level","top-level","other","of","top-level","the"]," Almost":["same","get","all"]," Alright,":["I","so","I'll"]," Also":["note","`all","considered","I","I","`Data.Char`","for","you","the","you","how","I","I'm","now","thanks","think","consider","consider","you","you","most","from","`bottlesOfBeer(n-1)`","it's","that","`foldl`","one","`modifyMVar_`","it's","you","elem","`all","`all","try","from","when","please","function","you","it's","you","use","check","you","`Just","you","you've","transpose","I'd","you","it","I'm","take","I","on","how","you","a","on","it","do","you","you"]," Also,":["using","using","it","didn't","using","using","I've","using","I'm","I","please","I","first","I","looking","I","you","checking","if","you","since","what","consider","thanks","and","is","I","it's","thanks","is","you","I","and","try","you","if","are","let's","just","for","I","as","glad","your","I","when","when","as","you","do","`foldl'`","try","I","my","choosing","in","`isEmpty`","I","do","you're","what's","you","do","```M.Map```","why","I","you","I","if"]," Alternatively":["`concat","`swap","`{-#"]," Alternatively,":["I've","if","some"]," Alternatives":["to"]," Although":["when","slightly","I","in","the","GHC"]," Always":["happy"]," Am":["I","I","I","I","I"]," An":["explicit","alternative","alternate","exercise","example","array","additional","alternative","if/then/else","alternative","`Integer`","important","extra","alternative","alternative"]," And":["obviously","it","I","of","thank","I","you","I","yes,","I","then","as","it","to","that,","also","for","that","I","is","optionally","why","such","don't","if","here","you'll","all"]," And..":["Do"]," Another":["advantage","way","trick","thing","concise","thing","safe","thing,","thing","way","clever","thing","thing","idea","alternative","simplification","thing","thing","nitpick:","thing,","way","thing","trick","function","option","way","case","way","popular","thing","way","way","practical","hint","way","simplification"]," Any":["thoughts","and","other","reference","reason","other","suggestions","suggestions","further","alternative","ways","reason"]," Anyhow,":["I","thanks"]," Anything":["that","else"]," Anyway":["I"]," Anyway,":["this","great!","I'm","you're","your","I'll","a","most","I"]," Anyway...":["took"]," Apologies":["for"]," Apologies.":["This"]," Applied":["the"]," Are":["you","you","there","you","either","there","external","numbers"]," Arf":["it's"]," Argh;":["I"]," Arguably":["it'd"]," Array":["would"]," As":["it","suggested","for","for","far","an","you","a","far","for","you","far","far","a","for","far","usual","for","for","for","much","for","for","a","far","far","for","far","for","for","to","far","for","you","far","for","far","for","you","you","we","for","for","an","optional","for","for","it","it"]," Aside":["from"]," Assume":["there","we"]," Assumes":["DNA"]," At":["first","some","first","first,","least","the"]," Attempted":["to"]," Aw":["man,"]," BTW":["if","the","tests"]," BTW,":["```M.HashMap```"]," BTW:":["An"]," BankAccount":["\u003c$\u003e"]," Based":["on","on"]," Basic":["Eratosthenes'"]," Basically":["you","that","you"]," Because":["this","the","of","\u003ccode\u003ecomplement\u003c/code\u003e","it's","of","of","of"]," Besides":["something"]," Best":["practice"]," Better":["now?","way","to","to","yet,"]," Better,":["however"]," Big":["thanks,"]," Bikeshedding":["perhaps,"]," Bob.hs:10:12:":["Error:"]," Bob.hs:10:7:":["Warning:"]," Bob.hs:11:13:":["Warning:"]," Bob.hs:11:7:":["Warning:"]," Bob.hs:12:11:":["Warning:"]," Bob.hs:13:14:":["Warning:"]," Bob.hs:16:31:":["Warning:","Warning:"]," Bob.hs:16:33:":["Warning:"]," Bob.hs:17:27:":["Warning:"]," Bob.hs:18:43:":["Error:"]," Bob.hs:19:44:":["Error:"]," Bob.hs:4:1:":["Warning:"]," Bob.hs:9:41:":["Illegal"]," Boobs":["looks"]," Bool":["implements"]," Both":["I","`foldl`"]," Boy,":["haskell"]," Btdubs":["you"]," Btw":["Djinn","seems"]," Btw,":["STM","there"]," Building":["a"]," But":["now","that's","that","it","I","I","it","then","the","rewriting","in","`(.","if","that","in","thanks","this","is","it's","if","please","I","it","I","I'm","I","this","in","tests","if","here","maybe","anyway","this"]," But,":["with","then"]," But...":["I"]," By":["the","\"silly","convention,","the","the","\"it's","\"the","De","convention,","passing","giving"]," ByteString":["is"]," C":["-\u003e"]," Calling":["`newStdGen`"]," Came":["out"]," Can":["you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","I","you","you","you","you","you","you","you","you","I","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you","you"]," Can't":["decide","figure"]," Capitalize":["may"]," Cases:":["15","12","15","11","15"]," Cha-ching!":["I"]," Changed":["`insertWith`","two","`isQuestion"]," Changes":["of"]," Cheaters!":["I'll"]," Cheating,":["code"]," Check":["out","out","out:","out","out","out","out","with"]," Checking":["if","`length","the","`null"]," Cleaned":["up","up"]," Clear":["code!"]," Clearly":["I","I"]," Clever":["the"]," Clever,":["and"]," Closing":["does"]," Code":["style","reuse","smells.","with","pattern:","looks"]," Combining":["those"]," Come":["to"]," Comedy":["option:"]," Comment":["from"]," Comments":["welcome.","about"]," Common":["use"]," Compared":["to"]," Comparing":["a"]," Congratulations,":["this"]," Consequence":["of"]," Consider":["reordering","an","using","using","using","eta-reduction","using","using","moving","using","breaking","removing","using","using","splitting","using","defining","adding","using","eta-reducing","an","using","using","using","implementing","implementing","importing","these","the","using","using","using","using","what"]," Considered":["using"]," Control.Arrow's":["`&amp;&amp;&amp;`"]," Control.Monad.Fix":["appears"]," Conventionally":["a"]," Conversion":["using"]," Cool!":["Great"]," Cool,":["I","thanks","good","thanks.","thanks","I","thanks"]," Cool.":["I"]," Cool;":["I"]," Copy":["and"]," Correct":["on"]," Could":["you","be","you","you","you","you","you","you","use","`func`","you","you"]," Couldn't":["you","find"]," Count":["is"]," Creative":["use"]," Current":["version"]," Currently,":["`wordCount"]," Currying":["and"]," Curses!":["I"]," Cut":["down"]," D'oh":["you're"]," Dag":["nabbit..."]," Darn":["you"]," Data.Array":["can"]," Data.Bits":["is"]," Data.ByteString.Char8":["still"]," Data.Char":["has","has","has","has","and"]," Data.Char's":["`isDigit`"]," Data.Function":["has","and"]," Data.IntMap":["may"]," Data.List":["has"]," Data.List's":["`foldl'`"]," Data.List,":["Data.Char,"]," Data.List.Split":["has","has","has","has","has","has","has","has","is","is","has","has","has","has","is","has","is","has","has","has","has","has","is","has","has","offers"]," Data.List.Split's":["`wordsBy`","`wordsBy`","`wordsBy`","`wordsBy`","`wordsBy`","`wordsBy"]," Data.Map":["doesn't","has","is","has","has","has","is"]," Data.Map.Lazy":["and"]," Data.Map.Strict":["is","has","is"]," Data.Map.Strict.Map":["and"]," Data.Maybe":["is"]," Data.Set":["might"]," Data.Tuple":["has"]," Decided":["to","to"]," Defaulting":["the","the","the"]," Define":["`(.:)"]," Defining":["increaseCount"]," Definitely":["does!"]," Depending":["on","on"]," Deprecated.":["As"]," Deriving":["Enum"]," Despite":["what"]," Desugars":["to"]," Did":["you","you","you","not","you","you","you","you","you","you","you"]," Didn't":["like","think","use","know","need"]," Direct":["translation"]," Djinn&gt;":["?"]," Do":["you","you","you","not","you","the","you","you","negative","you","you","we","you","you","not","you","you","you","you","you","you"]," Does":["anyone","haskell","this","Data.Vector"]," Doesn't":["make","work"]," Doh!":["I"]," Doing":["this","base","it","the"]," Don't":["quote","worry","worry","know","think","need","know","try"]," Done":["with","https://github.com/exercism/exercism.io/pull/1303"]," Done!":["Thanks."]," Done:":["[#752](https://github.com/kytrinyx/exercism.io/pull/752)"]," Dropped":["obsoleted"]," Due":["to"]," EDIT:":["I","I"]," Edit2:":["OK,"]," Edit:":["No,","the","`x`","I","for","not","also","of","you","to","no,","Ah,","sorry,","Oh,"]," Either":["way,","is"]," Elegant":["solution,"]," Er,":["my"]," Err,":["good","good"]," Eta":["reduction"]," Eta-conversion":["is"]," Eta-reduction":["(in"]," Even":["better","though","if"]," Everything":["looks","here","here","else","that","looks","here","looks","here","is","looks","looks","looks","is","is","is","is","else"]," Excellent":["point,","remark!"]," Excellent,":["`wordsBy`"]," Explicit":["recursion"]," Exported":["functions"]," FFUUUUU":["precedence"]," FWIW":["I"]," Failure":["in:"]," Fair":["enough!","point","enough"]," Fantastic.":["I"]," Feel":["free","free"]," Feeling":["a"]," Felt":["like"]," Few":["things"]," Figured":["out"]," Finally":["the","figured","had"]," Finally,":["you","the"]," Find":["a"]," First":["solution","of","you","time","let","you","pass,"]," Fixed":["the","up","this"]," Fixed.":["Thanks"]," Flipped":["the"]," Fold":["looks"]," Foldable":["and","introduced"]," Foldl'":["is"]," Foldr":["usage"]," Following":["Twisol's","discussion","your","this"]," For":["`silence`","what","sorted,","the","example,","readability's","that","validNucleotide,","such","consistency's","these","this","`splitWords`","a","the","more","instance,","a","implementing","a","this","a","`isShout`,","`sing`,","the","a","a","optimizing","a","similar","a","a","example:","more","more","more","the","a","this","this","me,","count,","more","saving","predicate-y,","older","extra","`incrementBalance`","`toPlant`","great","strictness","this","Maybe,","lists,","efficiency","readability,","a","where","`closeAccount`","similar","`toRNA`","a","this","a","example","these","this","`prettyPrint`,","example","the","bonus","bonus","the","this"]," Forgot":["to","to","to"]," Formatting":["suggestion"]," Found":["it"]," From":["my","my","the","containers","[base](http://hackage.haskell.org/package/base-4.6.0.1/docs/Foreign-Marshal-Utils.html#v:fromBool)","a","test","task:"]," Function":["names","arguments","application"]," Functions":["that","of"]," Functor/Applicative":["style"]," Funny,":["I","ubuntu"]," Furthermore,":["if"]," GAH...":["I"]," GHC":["raises","issues","can","gives","has"]," GHCi,":["version"]," Gah,":["I","precedence"]," Generalizing":["to"]," Generally":["I","speaking,","one","speaking","using","speaking,"]," Ghc":["complains"]," Ghci":["is"]," Give":["functions"]," Given":["that","the","that","the","a"]," Going":["for"]," Good":["tip,","point","point,","call,","points,","solution;","to","point","job","job","idea,","call,","points!","point","point","start,","point.","call.","call","call","idea,","catch","point,","catch,","to","point.","call,","call!","catch","question","idea","idea.","point","point","shout","question!","point","catch!","catch,","point,","catch,","to","to","point,","luck."]," Got":["a","it","it!","home"]," Gotta":["say"]," Great":["piece!","improvements.","call","point","feedback,"]," Great,":["it","I'd","just"]," Greatly":["simplified"]," Grr,":["I","I"]," Guards":["seemed","looks","are"]," Guards,":["are"]," Guess":["you're"]," HINT:":["You"]," HOMG":["I"]," Ha":["ha.","ha!"]," Ha!":["I","Well,"]," Ha..":["Really"]," Ha;":["you're"]," Had":["to"]," Hah!":["I","Just"]," Hah,":["I"]," Haha,":["thanks!"]," Haha.":["Not"]," Haha;":["I"]," Handing":["nonsense"]," Happy":["to"]," Happy?":["let"]," Haskell":["calls","prelude","code","has"]," Haskell's":["guard"]," Haskellers":["often"]," Hate":["to"]," Have":["you","you","you","you","you","you","you","you","you","you","you","you","you","to","you","we"]," Having":["and","a","a","nosed","said"]," Heh,":["yes,","I"]," Hehe,":["sure"]," Help!":["(and"]," Here":["is","are","are","I","is","are","the","reader","length","are","you","are","fields"]," Here's":["a","a","a","how","a","the","what","what","another:","the","an","a","an","a","what","what","an","what","a","an"]," Hey":["this","thanks","@yasmeen","kadoban."]," Hey,":["let's","I"]," Hi":["..","Twisol,","etrepum,","kluge,"]," Hi!":["Looks"]," Hi,":["```all"]," Hi..":["```all"]," Hint:":["take"]," Hm":["maybe","as"]," Hm,":["`toComparable`","if","I"]," Hm.":["Good"]," Hm..":["I"]," Hmh,":["right."]," Hmm,":["yes...","yeah.","well,","you","that's","I","yes.","I'm","I","I","I","could","`take","yeah","why"]," Hmm.":["Definitely","I","It","Seems"]," Hmm...":["in","coming"]," Hmm;":["I"]," Honestly,":["I"]," Hoo":["boy..."]," Hopefully":["my"]," How":["about","about","can","about","about","about","do","can","can","about"]," However":["I'll","`[1..dv]","I","there","this","with","Criterion","it"]," However,":["what","I'd","Text","my","you'll","I","I","my","maybe","yes,","this"]," Huh.":["I"]," I":["stand","couldn't","personally","did","updated","think","do","find","made","like","also","also","prefer","also","don't","wouldn't","avoided","agree","accidentally","don't","like","will","normally","prefer","usually","have","like","don't","don't","like","wonder","think","certainly","would","like","think","like","might","might","like","could","thought","think","find","think","don't","knew","think","think","initially","don't","tried","think","mean,","can't","also","think","do","tried","definitely","may","wanted","like","agree","agree","don't","don't","do","decided","like","don't","do","don't","_could_","originally","like","agree","tried","did","normally","agree","would","did","struggled","think","feel","think","prefer","was","don't","like","tested","don't","think","think","think","suggest,","mean","implemented","think","like","like","was","had","like","generally","think","think","think","don't","would","might've","don't","generally","think","really","see","like","think","was","don't","like","tend","usually","prefer","like","think","made","have","think","like","prefer","don't","like","removed","also","suppose","figured","see","would","agree","agree","think","don't","like","agree","don't","think","tend","like","think","really","don't","mean","am","surrounded","usually","think","thought","spent","prefer","like","agree","considered","wanted","implemented","went","didn't","couldn't","generally","don't","didn't","do","just","have","think","think","definitely","like","don't","think","also","did","like","would","love","think","would","think","think","didn't","see,","like","keep","do","like","wrote","am","am","actually","don't","kind","hadn't","found","think","don't","prefer","like","agree","might","don't","like","like","didn't","cannot","agree","like","didn't","feel","had","would","would","don't","had","like","like","like","believe","think","agree","understand","tried","feel","almost","kept","wondered","don't","would","think","didn't","did","like","tried","don't","am","compiled","know","used","guess","made","thought","think","can't","don't","was","am","moved","would","added","don't","like","did","forgot","did","will","don't","know","don't","wonder","am","do","suppose","suppose","am","don't","would","expected","would","could","like","did","found","think","would","expect","haven't","think","could","do","should","tried","have","don't","submitted","use","was","removed","want","spend","know","have","see","can","think","wrote","didn't","know","get","didn't","thought","would","suspect","feel","found","made","think","felt","think","think","like","disagree","could","don't","run","really","think","think","figured","think","think","think","don't","personally","do","think","would","\\*thought\\*","think","really","chose","agree","don't","like","feel","should","think","like","like","have","was","like","guess","like","don't","changed","wonder","agree","think","don't","don't","only","agree","see","don't","could've","like","think","decided","agree,","am","would","have","don't","like","googled","think","would've","was","was","know","don't","think","chose","failed","use","think","don't","don't","wouldn't","think","don't","started","learn","wasn't","accidentally","meant","mean","wanted","didn't","was","thought","think","think","think","feel","like","especially","thought","think","understand","can't","think","seem","just","left","do","don't","take","have","have","wonder","think","think","don't","think","missed","don't","messed","don't","would","like","think","could","think","don't","confused","prefer","like","would","am","wonder","suppose","think","think","was","don't","can't","just","don't","think","still","would","think","suppose","would","totally","really","like","especially","also","am","think","haven't","chose","think","think","still","did","think","like","like","still","think","like","now","hear","hope","liked","would","really","agree","don't","was","think","also","bet","don't","found","really","think","didn't","see.","guess","feel","definitively","also","like","actually","don't","interpreted","want","don't","like","like","don't","would","usually","also","don't","like","think","don't","did","can't","am","wouldn't","tossed","first","did","always","first","gave","decided","see","think","don't","opted","like","did","am","particularly","was","presume","like","don't","chose","think","will","see","think","like","would","honestly","did","suppose","was","think","asked","think","feel","think","had","could","started","take","definitely","find","think","like","could","have","should","like","think","think","agree","know","haven't.","was","think","did","guess","wish","agree","think","agree","think","realise","do","agree;","still","think","didn't","think","like","find","wasn't","did","think","appreciate","\"borrowed\"","hadn't","cheated","think","rolled","will","am","think","find","would","would","decided","may","like","apply","could","like","also","thought","used","wanted","don't","did","have","think","read","actually","forget","might","like","think","started","debated","actually","really","particularly","really","suspect","might","prefer","prefer","love","think","expect","made","think","can","made","would","wanted","know","tried","don’t","wonder","tried","don’t","would","have","think","thought","didn't","think","don't","didn't","have","rewrote","found","stumbled","thought","thought","didn't","love","should","am","am","realized","appreciate","found","tried","think","agree.","know","decided","submitted","suspect","thought","tried","like","would","wasn't","didn't","don't","tried","would","think","suggested,","realize","don't","like","wish","think","don't","remembered","agree","was","am","was","think","think","think","would","think","can't","expect","would","still","like","wrote","also","really","meant","like","would","have","was","can","think","not","like","agree","know","wouldn't","decided","find","suspect","just","think","would","think","don't","would","think","was","don't","think","generally","didn't","agree","think","was","implemented","think","see,","didn't","like","don't","also","see.","hope","ended","like","normally","use","would","had","can't","can","don't","don't","don't","knew","*think*","don't","think","agree","was","think","looked","mean","think","was","was","think","will","initially","actually","think","can't","would","would","guess","think","still","imported","know","generally","don't","not","see","suppose","suspect","have","am","don't","think","don't","sort","think","would","tweaked","like","don't","like","don't","like","wouldn't","was","wouldn't","think","have","am","can","want","fell","mean:","have","already","like","mean","wasn't","don't","think","read","suppose","really","think","have","found","was","don't","will","forgot","would","think","could","don't","couldn't","spent","think","think","didn't","do","think","don't","keep","don't","think","used","agree..","think","couldn't","can't","expect","remember","think","can","started","like","have","thought","think","think","know","think","wrote","also","would","spent","saw","like","like","created","think","think","would","think","went","will","went","lied,","noticed","think","need","like","managed","think","suggest","highly","used","will","think","tried","was","guess","considered","know","also","suppose","think","like","see","agree","think","had","like","first"]," I'd":["be","prefer","use","think","rather","extract","suggest","like","love","suggest","break","go","also","suggest","use","also","probably","kill","suggest","suggest","write","probably","say","love","probably","use","merge","rather","probably","recommend","say","use","probably","give","rename","start","inlined","say","not","say","not","also"]," I'll":["look","replace","push","give","admit","see","try","rethink","give","pretend"]," I'm":["not","a","new","not","not","really","still","going","using","not","not","new","not","not","not","a","not","not","slightly","really","not","curious","curious","brand","not","not","not","uncertain","saying","not.","trying","rather","glad","assuming","not","not","99.99%","not","kind","talking","sure","not","also","not","not","not","wondering","going","not","new","also","not","very","not","fairly","much","not","not","always","not","just","pretty","not","starting","not","not","not","actually","giving","not","glad","not","on","not","trying","sure","not","a","still","not","wondering","going","going","sure","not","not","sure","not","not","truly","going","sure","happy","not","using","guessing","a","curious","surprised","not","not","not","also","using","not","not","not","not","not","considering","not","having","not","not","not","pretty","not","not","still","not","not","bothered","going","not","glad","sure","starting","far","not","in","sure","not"]," I've":["chosen","tried","changed","submitted","also","submitted","not","changed","seen","been","demonstrated","tried","been","relied","changed","rewritten","also","also","completely","implement","forgot","seen","just","just","to","seen","fixed","totally","updated","tried","tried","never","also","fixed","tried","updated"]," I.e.":["phrase"]," IMHO":["sorting","failing"]," IMHO,":["qualified","more"]," INPUT:":["\u003cvalue\u003e,"]," IORef":["-"]," Ideally":["you","`word","`toRNA`"]," If":["you","you","you're","you","you","you","you","the","you","you","you","those","you","you","you","so,","I","you","you","you","you","you","I","you","you","you","you","that's","I","you","you","you","you","you","you","you","you","you're","the","you","you're","only","you","you","you","you","you","you","you","you","you're","there","you","I'm","you're","`f'`","you","you","you","you","you","you","I","you","you","I","I","you","you'd","the","you","you","I","you","you","you","you","you","I'm","you're","you","you","you're","you","you're","you","you","you","you're","I","you","the","you","instruction","you","you're","there","you","`s'`","you","I","you","you","you","you","you"]," Ignore":["me!","the","this","me!"]," Ignoring":["the","that,"]," Imagine":["if"]," Implement":["with","questions"]," Implementing":["`prettyPrint`"]," In":["`isEmpty`","general,","Haskell,","my","this","this","Haskell,","simple","your","retrospect,","terms","`isShouting`","`mkRobot`,","the","an","the","the","an","an","the","the","an","general","general,","particular","my","other","all,","fact","the","Haskell","Haskell,","general","my","this","general,","GHCi","this","Haskell,","`verse`","this","particular","`nucleotideCounts`","GHCI:","this","my","my","`isShouting`,","`isSilence`,","a","this","`lowerCaseBottleText`","`sing`","order","`getBalance`","`responseFor`","Haskell,","any","general","this","addition","practice","the","`isShout`","`number'`","`prettyPrint`","my","this","`resetName`","`sorted`","your","order","order","a","a","`Data.List.Split`","that","this","the","an","an","line","the","the","order"]," Indeed":["you","using"]," Indeed,":["but","it","this"]," Infix":["operators"]," Inserting":["a"]," Inspired":["by"]," Instead":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","on","of","of","of","of","of","of","of","of","of"]," Int64":["works"]," Intentionally":["choosing"]," Interesting":["use","that","-","-","way"]," Interesting.":["I'll"]," Interesting...":["I"]," Interestingly,":["this"]," Is":["it?","it","it","it","this","point-free","there","it","there","there","it","there","there","the","the","there","there","there","it","there","there","it","there","there","effectively","it","shouting","there","there","the","it","this","`go`","the","there","shouting","there","there","there","there","it","there"]," Isn't":["`merge","`map","there","`length","this","`intersperse"]," It":["might","may","might","might","might","could","would","might","would","should","was","comes","pattern","doesn't","might","might","would","makes","took","might","just","would","might","would","might","might","might","does","may","comes","might","might","would","would","is","might","might","is","looks","seems","should","might","was","would","would","would","is","would","would","is","should've","seems","might","prevents","could","would","would","would","would","is","is","is","might","might","might","may","would","would","shouldn't","is","looks","does","would","would","would","would","probably","would","calculates","actually","looks","might","took","looks","feels","would","isn't","looks","seems","still","might","could","was","would","may","would","looks","might","looks","might","may","would","looks","does","seems","looks","might","will","can't","makes","looks","would","will","might","guarantees","seems","would","might","isn't","may","might","was","seems","looks","really","might","places","seems","looks","probably","might","might","seems"]," It'd":["be","be","be","be","be","like","be"]," It'll":["be"]," It's":["a","generally","more","actually","common","a","a","a","in","been","simply","a","annoying","probably","calling","interesting","a","less","not","possible","more","fantastically","strange","a","nicer","pretty","ok","customary","generally","best","not","weird","extremely","generally","a","entirely","much","strict","desirable","more","almost","generally","much","generally","tricky","not","nearly","a","usually","all","perfectly","a","not","common","typical","perfectly","preferred","slightly","not","a","best","not","great","a","still","customary","possible","atypical","customary","not","typical","typical","not","common","also","often","considered","uncommon","the","generally","also","typical","a","probably","a","easier","possible","more","strange","better","best","customary","not","better","more","a","never","possible","better","not","actually","better","up","possible","more","pretty","confusing","a","not","a"]," Iteration":["2"]," Its":["better","common","not","possible","possible","better","quite","better","better","possible","a","possible"]," Just":["10000000","10000000","thinking..","10000000","10000000","10000000","10000000","import","a","realised","for","for","to","getting","discovered","a","about","readability","10000000","curious,","_","curious","occurred","32","4","(-16)","as","added","a","general","10000000","1","12","19","5","4","2","9","8","7","13","11","15","3","16","10","6","20","17","14","19"]," Keep":["`isYell`"]," Key":["equal"]," Kimhyunkang":["-"]," Kind":["of"]," Kinda":["strange"]," L10:":["`not"]," L12-13:":["`all"]," L17-18,":["L22-23"]," L17:":["There"]," L18:":["How"]," L30:":["How"]," L9:":["`all"]," Lambda":["functions"]," Last":["submission","-\u003e","I","2","readTVar"]," Lastly,":["it's","your","as"]," Latest":["bytestring"]," Lazy":["version","version","version","version"]," Less":["important"]," Let":["me","me"]," Let's":["start"]," Lets":["remove","take"]," Like":["this?","others","@randi"]," Likewise":["I've"]," Line":["10","11","16"]," Linking":["bar"]," List":["comprehensions"]," List:":["when"]," Lists":["aren't"]," Loading":["package","package","package"]," Logic":["is"]," Looking":["at","more","forward","at","at","more","good!","at","around"]," Looks":["great!","great","good","good,","good","pretty","great.","great,","great","good,","good,","good","like","great","great,","like","good","good,","great","good","very","good","good","really","good!","much","good!","good,","good","good,","like","nice,","very","simple.","good!","great","great.","good,","better","like","good","great!","like","great.","great,","good.","great","great!","nice","pretty","great,","good.","good!","like","great,","good","good","good.","great!","good,","nice","great,","great,","good","good.","good.","pretty","great,","good,","great,","pretty","great!","great.","OK","good,","great!","like","good","better.","good.","good.","great.","OK,","good.","better,","like","OK","nice","good","quite","pretty","good.","fine,","good.","nice.","very","good."]," Love":["`fmtNumber`;","the"]," M.fromList":["[(s,I)|"]," MVar":["(Maybe","is","-"]," Make":["it","an"]," Makes":["sense.","sense,","sense"]," Making":["a","`isQuestion`"]," Many":["Haskell","haskellers","people","things","thanks","Haskell","thanks","Haskell","other"]," Map":["has"]," Map.insertWith":["would","(+)"]," Maybe":["you","you","this","I","this","that","would","it","you","do","a","something","that's","other","I","`chop`","to","itt's","different"]," Maybe,":["was"]," Measuring":["the"]," Meh,":["I"]," Mercury":["-\u003e"]," Messing":["around"]," Might":["be","be","be","want"]," Mike,":["which"]," Mine":["isn't"]," Minor":["nitpick:","nitpick:","and","and","stylistic","style","advice:"]," Mistake":["in"]," Modeling":["this"]," Module":["still"]," More":["readable","importantly","or","or","of"]," Most":["Haskell","of","everything","Haskell","people","choose","Haskell","of","people","people","of","of","parentheses","of"]," Mostly":["a"]," Moved":["related"]," Much":["cleaner","as","better!","better,","better.","cleaner.","better.","better","better.","as","happier"]," My":["fault","personal","preferred","test","problem","stylistic","next","best","reasoning","first","god,","only","first","code","code","approach","very","bad,","absolutely-favorite","haskell","first","only","idea","comment","preference","mistake","new","only","installation","instinct","recommendations","first","thinking","reasoning"]," N":["-\u003e"]," Narrowing":["down"]," Nearly":["one-third"]," Neat!":["Thanks."]," Neat.":["I"]," Nevermind,":["exporting","I"]," Nevertheless,":["since"]," New":["version"]," Newtypes":["supports"]," Next":["step"]," Nice":["use","addition","work","work!","use","use","work","one-liner!","exercise,","use","work.","solution,","and","work!","use","solution.","and","but","usage","code!","use"]," Nice!":["Making","Yet,","Only","I","I","I"]," Nice,":["I","I","thanks!","I","thanks","thanks!","one.","catch."]," Nice.":["I"]," Nicely":["done.","written"]," Nitpicking":["(since"]," No":["need","need","need","need","good","idea","one","attempt","reason","probs,","indentation","good","need","need","it","with"]," No,":["I","I","there","it's","the"]," None":["of","of"]," Nope":["-"]," Nope,":["doesn't"]," Normally":["pattern","Data.Map","when","there's","there"]," Not":["the","sure","disagreeing","the","a","really","the","sure","really","a","quite.","only","sure","sure","an","so","liking","after","a","that","sure","a","sure","sure","a","sure","sure","sure","sure","sure","quite","that","exactly","sure","sure","a","sure"]," Note":["that","that","that","also","also","also","that","that","that","also","the","that","also","also","also","that","also","also","that","that","that","that","also","also","that","that","that","that","that","also","that","also"]," Noted,":["thanks."]," Nothing":["left","fancy","here","in","simpler,","wrong","but"]," Notice":["how"]," Now":["this","`foldl'`","with","with","a","that","to","try","with","to","the","you","you"]," Now,":["altogether:"]," Nucleotide":["{unNucleotide","'a'"]," Num":["a"]," O(log":["n)."]," OK":["@melissa,","I","didn't"]," OK,":["Much","this","this","there's","I've","just"]," OMG,":["I've"]," Obsessive":["code"]," Obviously":["...","this"]," Odd...":["on"]," Of":["course,","course,","course,","course,","course,","course,","course,","course!","the","course,","course,","course!","course..."]," Often":["this","in"]," Oh":["sweet,","my,","ok","yeah...","my","I","yeah,","and","indeed,","yeah,","I","bugger,","man,"]," Oh,":["nice!","I","thanks","I'm","you're","that","good","yeah!","and","good","huh.","man,","I","also","cool!","of","good","and","I","and","right!","that's","also,","one","yeah,","also,","also","not","I","damn,"]," Oh..":["Seems"]," Oh...":["you"]," Oh....":["right,"]," Ohh,":["I","I"]," Ohhhh,":["is"]," Ohhhhh...":["right."]," Ok":["-","I"]," Ok!":["You"]," Ok,":["modules","thanks!","obviously","thank","modules","will","this","I","didn't","I'm","so","`normalizeWords`","I"]," Okay,":["I","that's","that's","I","*anagramsFor*"]," Okey":["dokey."]," On":["a","second","line","it!","your","line","line","line","second"]," Once":["you","you've"]," One":["idea","other","nitpick","note,","real","small","way","of","thing","way","question","thing","more","small"]," Only":["nit:","style"]," Ooh":["good","wait,","yeah,"]," Ooh,":["I","nice","I","wonderful."]," Ooo":["right,"]," Ooooo,":["very"]," Oops":["left"]," Oops,":["I","I","submitted","meant","I","didn't","I","you're"]," Oops.":["@braulio","You've"]," Ops,":["I've"]," Ops..":["Please"]," Optimized":["expression:"]," Optional:":["`sorted`"]," Options":["include"]," Or":["`total","maybe","should","am","to","`take","maybe","even:","use","even","`let","BangPatterns","I"]," Or,":["of","using"]," Originally":["I"]," Originally,":["I"]," Other":["than","than","than","than","than","than","than","than","that","people","than","than","than","than"]," Otherwise":["the","this","it","looks","I","this","this","looks","you","it","one"]," Otherwise,":["this","this","I","looks","looks","everything","an","this"]," Out":["of","of"]," Outer":["one"]," Overall":["this","good","looks","nothing","this","I","this","this","this","this","this","this","this","I"]," Overall,":["I'm","looks","this","this"]," OverloadedStrings":["is"]," P.P.S.":["and"]," P.S.":["Definition","if","I've"]," PS.":["Can"]," PS:":["yes,"]," Parallel":["and","and","and","and","and"]," Parens":["around"]," Parentheses":["in"]," Part":["of"]," Passes":["tests,"]," Pattern":["matching","match(es)","match(es)"]," People":["are"]," Per":["my","my","the"]," Performance":["is,"]," Perhaps":["you","nicer","because","by","there","you","`and","you","a","there"]," Personal":["preference"]," Personally":["I","I","I'd"]," Personally,":["I","I","I"]," Phew...":["couldn't"]," Phone.hs:14:23:":["Warning:"]," Please":["upgrade","take","could","correct","could","add","use","use","ignore","let","add","add","use","add"]," Plenty":["of","of"]," Plus":["there's"]," Point":["taken","still"]," Point-free":["maybe"]," Poor":["Bob."]," Possible":["minor"]," Possibly":["a","a"]," Practical":["though,"]," Prelude":["Data.Map\u003e","Data.Map\u003e","Data.Map.Strict\u003e","has","Control.Arrow\u003e"]," Prelude's":["`error`"]," Prelude\u003e":[":m","flip","fromEnum","fromEnum","sum",":set","Data.Text.split","Data.List.Split.wordsBy"]," Prelude\u003efilter":["id"]," Prelude\u003elength":["it"]," Prelude\u003ezipWith":["(/=)"]," Pretty":["straightforward","much","minor"]," Previous":["solution"]," Prime":["factorization"]," Probably":["time","shouldn't","should've","just","not","not","a"]," Problem":["with","statement","with"]," Pull":["request:"]," Pulling":["in"]," Put":["a"]," Python's":["`reduce`"]," Question:":["I"]," Quite":["a"]," RE:":["`TupleSections`"]," Rather":["than","than","than","than"]," Re":["the","Data.Text"]," Re-implemented":["countWords"]," Re:":["signatures,","`$`,","predicates,","the","Haskell's","explicit","`length","laziness"]," Reading":["solutions"]," Realized":["that","that","`zipWith`","that"]," Really":["elegant","helpful,","I've","there","the","I","simple","it's","this","you","this","you","a","just"]," Recent":["discussions"]," Regarding":["qualified","your","readability,","style,","point","comments,","```toUpper","your","`Data.Bits`,","`isShout`","`cleanUpInput`,"]," Regular":["Expressions","expressions"]," Remember":["to"]," Remembering":["that"]," Reminds":["me"]," Remove":["an","the"]," Removed":["a","those","the","a"]," Reordered":["conditions"]," Reordering":["your"]," Return":["is"]," Returning":["`False`"]," Reworked":["previous"]," Rewrote":["my","based"]," Ridiculous":["silly"]," Right":["you","you"]," Right,":["that","but"]," Robot":["\u003c$\u003e",":bear:"]," STM":["isn't","is"]," Same":["thing,","for","comment"]," Scoring":["a"]," Second":["predicate","question:"]," See":["I","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","the","iteration","if","if","if","this"]," Seeing":["this"]," Seemed":["like"]," Seems":["odd","pretty","weird","that","trace","that","so,"]," Separated":["conditions"]," Separating":["out"]," Shoot,":["I"]," Short":["and","and","variable"]," Should":["the","have","include","`nucleotideCounts`","be"]," Shouldn't":["9"]," ShowS":["is"]," Silly":["me.","quoting"]," Similar":["reasoning","to"]," Similarly":["something"]," Similarly,":["`readStatement`","`(not"]," Simplified":["the"]," Since":["Haskell","`isQuestion`","they","`countSides","`(-\u003e)","`question`","it","Data.Map","the","you","you"]," Since,":["as"]," Slightly":["better"]," Small":["nit:","nit,"]," Smart":["way"]," So":["the","the","I","no,","`foldr`","now","\"equivalent","this","you","this","it","eg.","since","there's","there's","the","there","obviously","let's","Data.Map's","strongly","I've","the","lets","the","this","I","the","it","`count`","in","a","my","now","really,","the","I","what","if","I","here's","I","to","that","what","first","you","here's"]," So,":["just","`do`","the","I","are"]," So...":["is"]," Solution":["looks","is","is","is"]," Some":["BSTs","amusings:","definitions","much-needed","of","suggestions:","small","useful","people","might","extensions","people","programmers","great","problem","parenthesis","functions","of"]," Somebody":["suggested"]," Somehow":["I'd","I"]," Something":["like","like","like","like"]," Somewhat":["more"]," Soo....":["this"]," Sorry":["this","@ayden;","I","should","I","should"]," Sorry,":["submitted","please","I","the","you're","yeah,","I","autocomplete","didn't"]," Sorry;":["I'm"]," Sort":["of","and"]," Sorting":["is","the","and"]," Sounds":["like"]," Spaces":["and"]," Speaking":["of"]," Split":["is"]," Splitting":["can"]," Started":["with","with","with"]," Still":["very","could","looking","wordy,","getting","wondering","get","looking","needs","have","think"]," Still,":["a"]," Stm":["also"]," Stole":["some"]," Strange":["-"]," Strange,":["I"]," Stylistically,":["I"]," Such":["representation"]," Suggestion":["for"]," Suggestions":["welcome","on"]," Super":["case"]," Supporting":["negative"]," Sure":["=)","you"]," Sure,":["it","go","always"]," Surely":["there's","there's"]," Surface":["issues"]," Switched":["to","the","from","from"]," Switching":["to"]," TVar":["-"]," TVars":["I"]," Take":["a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a"]," Teenth":["-\u003e"]," Terrible":["code,"]," Test":["code","cases"]," Tests":["here"]," Text.Printf":["is"]," Thank":["you.","you","you","You,","you","you!","you!","you","you.","you","you.","you.","you!","you,","you.","you.","you","you.","you.","you.","you.","you","you.","you.","you,","you.","you.","you.","you.","you.","you!","you.","you.","you.","you.","you.","you.","you.","you.","you","you","you.","you.","you.","you.","you.","you.","you.","you.","you","you","you.","you.","you.","you.","you!","you!","you.","you.","you.","you.","you.","you.","you.","you.","you.","you.","you","you.","you.","you"]," Thanks":["for","@mitchel","etrepum.","for","so","for","-","Kobata,","for","for","for","for","for","for","for","for","for","for","again!","again.","to","for","to","for","for","twisol","-","for","for","to","@daryl","phadel!","for","for","for","@randal,","for","@rosalind","for","for","for","to","for","for","for","a","a","for","for","for","for","for","everyone.","@erling.","for","[etrepum](http://exercism.io/etrepum),","again.","for","for","zhanrnl,","for","to","@kelsi!","a","very","so","again.","for","for","so","and","for","again.","for","for","to","again","for","a","@everardo","for","for","again","for","for","for","a","@felipa,","a","for","@tommie","for","for","for","@kristopher.","for","a","@kelli,","for","a","for","for","@preston,","for","for","again.","a","for","@zane!","for","for","for","a","@elena,","for","for","for","for","for","for","a","for","for","for","for","for","for","for","@ottilie,","@sage,","@assunta!","for","@tamara.","for","for","for","qnikst,","for","for","for","for","@jasen","guys!","for","for","for","for","for","for","for","for","for",":)",":)"]," Thanks!":["I","Made","I","When","How","I","I","Well,","I","I","Anyway,","Your","Learned","I've","I","And","Will"]," Thanks,":["those","updated!","everyone.","great","got","that's","i'm","I","looks","those","you're","I","I","you're","both","improved","I","that's","I've","man.","I've","@gina,","`splitPlaces`","I","that","great","I've","for","I've","I","nice","I'll","I","looks","will","I","I","I'm","I've","updated."]," Thanks.":["I've","submitted.","I","I","That","The","That","I","I","That"]," Thanks;":["will"]," That":["would","makes","function","is","said,","being","said,","said,","can't","said,","never","was","let's","said,","this","`empty`","shouting","makes","is","makes","said,","said","is","was","works.","works,","is"]," That's":["very","what","fair.","fine!","a","a","a","right!","true,","almost","a","correct,","true,","starting","an","good","really","a","a","exactly","a","thanks","awesome!","what","not","a","right.","correct.","right,","a","brilliant!","a","very","the","rather"]," That’s":["what"]," The":["first","extra","parantheses","only","module","only","parens","second","only","only","two","reason","reason","idea","exact","only","code","whole","reason","reason","name","reason","name","test","more","set","only","definition","problem","name","function","use","filter","only","`where`","next","readme","READMEs","code","use","only","other","`all`","area","code","use","use","use","question","most","explicit","definition","first","use","problem","variable","one","implementation","definition","```map","parentheses","parentheses","TupleSections","null","identity","`up`","over","README","simplest","parens","formatting","first","lambda","parens","`c/=target`","first","names","usage","`randomRobot`","global","letters","implementation","parens","`create`","fist","way","Map","first","latter","direct","signature","exercise","signature","idiomatic","tests","implementation","second","`last`","use","single","one","intent","second","all","isQuestion","`Display`","handling","implementation","trick","way","signature","type","import","only","name","lambda","other","code","following","short","only","only","nested","`foldl`","Data.Map","first","one","only","`foldlStrict`","definition","reason","implementation","reason","intent","first","more","problem","parentheses","reason","`words'`","simpler","reason","best","potential","solution","`!`","second","parentheses","standard","problem","message","pointfree","real","type","normalized","transcribe","only","one","condition","other","other","functions","other","simple","other","body","other","idea","pattern","only","multi-pass","real","result","result","result","other","intent","tests","definition","one","one","one","`$`","logic","parentheses","reason","latest","use","parentheses","only","tuples","other","parentheses","`take","other","`((-\u003e)","`id`","trick","solution","parentheses","type","solution","validation","README","math","fold","parentheses","spacing","list","parentheses","hexadecimal","definition","typeclass","best","concurrency","random","point","implementation","best","`words`","parentheses","shorter","parentheses","total","`x`","lambda","64","reason","easiest","next","BangPattern","`foldr`","module","`(show","extra","links","`initList`","real","`case","algorithm","second","lambda","commented","actual","parentheses","accumulator","use","parentheses","logic","parentheses","use","traditional","best","other","other","test","implementation","way","`newtype`","point","main","Either","`try`","map","only","only","trick","`flip`","implementation","`count`","rule","other","best","`rnf`","only","list","profiler","parentheses","implementation","trick","top-level","parentheses","module","type","wiki","only","other","other","difference","same","only","use","```||","difference","tip","parentheses","key","info","trick","parentheses","parens","other","type","format","reason","implementation","only","handling","top","rules","`count`","parens","module","module","module","problem","equality","casing","indentation","`foldl'`","T","compiler","other","spacing","module","module","module","correct","parentheses","only","best","`\\_","typical","other","solution","extension","`foldl'`","spec","check","parentheses","code","reason","packing","topic","best","problem","test","Node","cases","`zipWith","indentation","ordering","empty","guards","way","solution","`seq`","problem","parentheses","best","solution","type","problem","best","problem","[Haskell](http://www.reddit.com/r/haskell/comments/nxu8d/f_g_x_y_f_g_x_y_in_haskell_prime_prelude)","idea","other","best","parentheses","difference","first","second","best","first","pattern","solution","problem","way","reason","[Data.List.Split]","`not","more","indentation","style","difference","mutable","three","data","simplest","other","only","brackets","second","rules","difference","`DefaultGarden`","main","problems"]," Theese":["variants"]," Then":["only","I","one","you","foldl'","you'd","w'","use"]," Then,":["a"]," There":["is","is","is","are","were","are","is","is","is","is","are","is","are","is","is","are","are","are","are","is","are","are","seems","should","are","are","are","are","are","is","is","is","is","are","are","are","are","are","isn't","is","are","is","is","are","is","is","is","are","are","is","are","shouldn't","is","is","are","doesn't","are","were","is","are","is","are","are","are","already","are","is","are","is","are","is","is","is","is","is","you've","are","are","is","are","is"]," There'd":["be"]," There's":["not","a","a","a","a","also","a","a","also","not","a","definitely","a","no","also","a","another","a","a","no","nothing","still","a","still","a","a","another","also","not","a","one","a","a","a","a","a","short-hand","much","a","functionality","nothing","a","not","a","a","a","a","an","nothing","also","an","also","a","a","a","a","a","another","a"]," These":["are","predicates","exercises","are"]," They":["don't","can"]," They'll":["simply"]," Things":["will"]," Think":["about","I'm","of","of","about"]," This":["is","is","is","is","looks","is","seems","gets","just","looks","looks","was","looks","is","is","looks","is","version","could","might","is","is","is","is","is","code","exercise","is","looks","is","imho","is","is","still","looks","looks","algorithm","looks","is","is","does","is","was","was","is","isn't","is","was","is","looks","should","is","StackOverflow","looks","looks","looks","raises","does","\"isQuestion","iteration","looks","can","is","looks","is","binding","binding","binding","exercise","code","is","is","looks","could","solution","is","looks","isn't","is","doesn't","looks","is","was","binding","binding","binding","implementation","is","is","exercise","is","one","is","looks","looks","is","is","problem","is","one","is","looks","is","might","looks","still","solution","is","doesn't","needs","import","is","section","looks","exercise","exercise","is","is","is","fixes","is","might","looks","is","code","section","section","is","can","works,","is","still","kind","looks","is","rejects","is","works,","is","is","one","is","is","is","is","doesn't","is","is","iteration","looks","section","doesn't","code","is","can","was","is","feels","feels","looks","looks","is","is","doesn't","looks","implementation","might","will","is","particular","might","style","trick","takes","is","works,","should","is","solution","is","probably","one","is","is","is","solution","is","still","is","is","is","version","version","could","looks","is","version","version","is","year","version","approach","is","is","one","is","is","is","is","is","is","is","wiki","should","doesn't","solution"]," Those":["functions"]," Though":["it","(reading","then"]," Thread":["A:","B:"]," Threw":["out"]," Thus":["far,","example"]," To":["my","be","simplify","test","check","keep","me","build","add","elaborate","import","me,","make","reuse","avoid","me,","compose","get","be","quote","me,","run","be","make","quote","fix"]," Too":["complex,","much"]," Took":["me","me"]," Top-level":["binding","binding","binding","binding","bindings"]," Totally":["unimportant"]," Touché!":["I"]," Transcription":["implies"]," Transformed":["to"]," Translate":["can"]," Trick":["here"]," Tried":["`intercalate`","with","a","to"]," True,":["but","but"]," True.":["But"]," Try":["and","to","feeding","`fromListWith`","generalizing","to","to","using","using","to","using","implementing","using","implementing","using","refactoring","using","using","using","using","deriving","using","pasting","solving","using","using","`[x,","using","aligning","using","using"]," Trying":["an","with","to","to","again"]," TupleSections":["is"]," Turns":["out"]," Tweaked":["isShouting"]," Twey":["@"]," Twisol":["and"]," Twisol,":["that","the"]," Two":["alternative","possible","small","brute-force","things"]," Type":["signatures","signatures","signatures"]," Typical":["Haskell"]," Ugh,":["fixed,"]," Ugh...":["I"]," Ugly":["as"]," Ugly,":["I"]," Uhm,":["no,","isn't"]," Uncommon":["solution"]," Unfortunately":["using","the","ghc"]," Unfortunately,":["to","even"]," Unimportant":["minor"]," Unless":["I'm","I'm","there's"]," Unlock,":["thanks"]," Unsubmit":["doesn't"]," Until":["you've"]," Up":["to"]," Updated":["to","my","for"]," Usage":["of"]," Use":["explicit","`null`","`elem`."]," Used":["Enum","strict"]," Useful":["stuff,"]," Uses":["an"]," Using":["the","`Data.Map.fromListWith`","findWithDefault","`show","`maybe`","`permutations`","`foldr`","a","`isLower`","the","`Control.Arrow.first`","Arrow","guards","`!!`","a","the","error","map","unlines","`elem`","functionality","guards","`wordsBy`","a","the","Enum","a","`sequence`","`count`","`map`","`unfoldr`","`where`","the","`elem`","Data.Array","`concatMap`","a","Monoid's","datatypes","`acc","zipWith:","an","Data.IntMap","lazy","unlines","`foldl`","Data.Map.Strict"]," Usually":["you","top-level","if","Haskell","all","`[Char]`","`sing`","`[x]","`map`","all","a","explicit","the","there's"]," V.backpermute":["might"]," VERY":["HARD"]," Very":["good","cool.","good","good!","nice!","much","nice","nice.","interesting!","well.","interesting","nice","nice"]," Vim":["is"]," WAY":["better."]," We":["should"]," Weird":["api"]," Well":["another","I","written,","you","there","this","the","that's","there","if","in","if","I","Done.","this","as","spotted,"]," Well,":["thank","the","you're","now","I","there's","in","you've","your","'T'","I","I","it's","I","shoot.","the","it","the","it","if","the","it's","we","yes..."]," Well...":["I"]," Went":["for"]," Were":["this"]," What":["do","if,","are","he","is","if","do","I","does","I","about","I","was","I'm","about","would","you","alternative","do","about","is","does","purpose","exactly","do","about","is","I'm","do","is","do","is","bugs"]," What's":["the","the","the","the"]," When":["`anagramOf","you","this","you","l","you"]," Where":["clauses","does","is"]," Whether":["or","or"]," Which":["you","one?","list"]," While":["working","this","it's","this","I","the","I","not","i","almost"]," Whis":["this"]," Whoops":["-"]," Whoops,":["need","when","just","Data.Char"]," Whoops.":["This","Suddenly"]," Whoops;":["you're"]," Why":["not,","not","are","is","not:","not:","not:","not","is","not:","not:","not","the","build","did","did","the","is","not","have","not","do","`pred","would","did","not","does","check","not","not","you","does","you","are","do","are","is","isn't","not","not","are","not"]," Will":["do,","do","change","have","it","it","look","look","work.","you"]," With":["the","respect","the","regard","`show`","a","a","regard","a","regard","nearly","an","regard","regard","some","regard","the","this","optimizations","regard","that","this","this","Linux","`union`:","`insert`:","foldr:"]," Within":["my"]," Without":["a","the"]," Woah,":["chill"]," Wondering":["if"]," Woops,":["I"]," Woot!":["After"]," Words":["by"]," Would":["that","it","it","you","this","be","`Char","it"]," Wouldn't":["you","it","this","it"]," Wow":["thanks","-"]," Wow!":["thanks"]," Wow,":["I","I","it's","@hal,","I","that","you're","this","I","sorry;","thanks","that","thanks,","I"]," Wow...":["this"]," Wowwww":["I"]," Yachoo!":["we"]," Yea,":["that"]," Yeah":["I'm","I","I","I","it's","that"]," Yeah!":["Perfect!","I"]," Yeah,":["I","I","maybe","I","it","the","I","this","I","I","I","I","I","I","the","I","it's","the","but","I","I","the","it's","these","it's","the","I","I","I","I","I","I","that's","@stephon","it's","that's","I","my","thanks,","list","I","I","I","it","it"]," Yeah.":["My","That"]," Yelling":["clause"]," Yep":["I","in","`Enum`","I"]," Yep,":["the","I","that'd","you're","I","it's","there","good"]," Yes":["this","it","your","you","i","and","i"]," Yes!":["I","That"]," Yes,":["or","or","I","that","it's","and","`a`","but","you","I","that","you","the","that's","I","that","you","I","intermediate,","I","I","doing","I","although","the","that","I","this","of","even","thanks","I","you","I","this","and","you","but","as","I","you","I","write"]," Yes.":["What"]," Yes;":["it's"]," You":["give","can","can","could","are","could","could","could","have","might","can","mentioned","could","can","could","don't","could","can","should","should","can","can","can","might","should","could","could","can","can","can","might","can","should","can","can","can","should","are","can","can","might","should","can","shouldn't","can","should","can","can","should","can","could","should","don't","can","might","could","could","are","can","could","are","can","can","could","could","could","might","could","may","could","should","might","mean","already","can","already","could","could","could","might","should","are","can","probably","might","could","could","might","could","can","might","do","can","might","might","can","could","could","should","can","could","should","might","are","could","shouldn't","might","point","can","really","can","do","could","might","can","should","should","probably","might","should","can","can","do","could","should","can","should","should","sure","can","might","could","could","should","should","don't","should","can","could","might","should","should","might","should","might","could","should","mean","might","can","can","should","should","know,","could","suggest","can","should","could","would","can","may","might","could","could","should","should","could","shouldn't","might","could","can","are","should","could","could","could","wouldn't","could","could","do","could","should","could","can","can","have","can","used","may","could","could","don't","can,","could","are","should","have","could","could","might","should","should","might","can","can","could","might","can","can","probably","might","should","can","can","can","should","could","have","could","use","could","could","can","can","get","might","could","can","shouldn't","will","can","could","could","could","should","should","shouldn't","could","should","can","could","can","don't","can","should","can","could","might","can","can","could","should","could","should","could","could","don't","could","may","could","can","can","can","can","should","could","could","can","could","can","could","need","could","should","don't","could","could","could","can","could","might","could","could","could","could","could","could","could","should","could","could","might","probably","could","could","don't","don't","might","can","could","could","could","should","could","could","can","should","can","may","choose","should","could","should","might","could","could","can","could","might","should","don't","can","could","can","can","can","can","may","can","can","should","may","could","can","may","are","can","don't","can","could","could","could","can","can","may","may","can","may","may","may","could","may","can","need","can","can","can","can","may","may","may","nred","might","can","can","might","can","can","can","could","have","may","may","can","still","can","have","can","need","also","could","don't","may","may","may","may","may","don't","can","are","may","are","can","might","may","may","may","are","don't","can","may","can","may","may","can","may","can","may","may","can","need","may","may","may","don't","may","can","can","can","can","can","may","may","can","don't","don't","might","don't","can","can","can","may","can","don't","can","might","should","have","start","could","could","might","are","may","seem","should","can","could","missed","could","can","don't","can,","don't"]," You'd":["be"]," You'll":["also","have","need"]," You're":["absolutely","using","only","right","right.","right","repeating","asking","right","somewhat","returning","not","absolutely","not","right","also","right,","going","right","inconsistent","so","right","absolutely","right","right","absolutely","right","correct","right,","right"]," Your":["`module","definition","guard","suggested","3rd","`do","code","code","error","implementation","use","naming","`mutation`","implementation","`sortStudents`","feedback","`wordsBy`","`remove*`","remove","implementation","understanding","problem","solution","module"]," Yours":["is"]," Yup!":["Assigning"]," Yup,":["this","this"]," Yup.":["Nice"]," [":["(\"bc\",","(1000,","…","e"]," [(\"AEIOULNRST\",":["1),"]," [(\"a\",":["1)]","(1)","((1)","(((1)","1)]","2)]","3)]","n)]"]," [(123,\"":["\")]"]," [(score,":["char)"]," [1":["of","of","of","of","of"]," [1,1..]":["can"]," [1]":["You","to"]," [1]:":["http://hackage.haskell.org/package/criterion"]," [Equilateral,":["Isosceles,"]," [Hoogle](http://www.haskell.org/hoogle)":["and"]," [Point-free":["style](http://www.haskell.org/haskellwiki/Pointfree)"]," [This":["page](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl%27)"]," [True,":["True]","False,"]," [[Ignore":["-"]," [[_,":["area_code,"]," []":["==","++"]," [third":["paragraph](http://www.reddit.com/r/haskell/comments/1mqni1/edward_chands/ccbt8af)"]," \\":["to"]," \\*":["*adds"]," \\Sum_{k=1}^n":["log(k)"]," \\This":["is"]," \\n":["-\u003e"]," \\n'":["-\u003e"]," \\second":["line\""]," ^":["I"]," _":["==","-\u003e","-\u003e","-\u003e","-\u003e"]," `!!`":["is"]," `\"\"`":["is"]," `###":["Failure"]," `(!)":["cipher"]," `(\"\"":["==)`"]," `((letters":["word"]," `(,k)":["."]," `(.&&.)":["="]," `(.)$(.)`":["is"]," `(.-.)`":["and"]," `(==)":["a"]," `(False==)`":["is"]," `(\\(a,":["ns)"]," `(\\(x,y)":["-\u003e"]," `(\\c":["-\u003e"]," `(\\s":["-\u003e"]," `(\\word":["-\u003e"]," `(\\x":["-&gt;"]," `(^":["(2"]," `(f":["&&&"]," `(fromMaybe":["default"]," `(if":["b"]," `(intersperse":["\"\\n\""]," `(not":[".",".)"]," `(sort":["."]," `(sum":["$"]," `++`":["is"]," `,":["0"]," `--":["Implementation"]," `---`":["is"]," `::":["(a"]," `::`":["normally"]," `\u003c$\u003e`":["and"]," `DList":["Char`"]," `Data.Char.digitToInt`":["is"]," `Data.Char`":["is"]," `Data.List.Split.wordsBy`":["might"]," `Data.List.map`":["is"]," `Data.Map.insertWith'`":["is"]," `Data.Map.insertWith`":["or"]," `Data.Map`":["is","supports"]," `Day`":["is"]," `Defaulting":["the"]," `E.throw":["$"]," `Int`":["would've","is"]," `Intersperse":["'"]," `List.foldl'":["(+)"]," `M.fromList":["[..|..]`"]," `M.toList`":["already"]," `MVar`":["seems"]," `Map.findWithDefault`":["would"]," `Map.fromListWith`":["or","or","would"]," `Map.toList`":["is"]," `Mercury`":["should"]," `NFData`":["is"]," `None`":["isn't"]," `Num":["a"]," `Set`":["is"]," `String":["=&gt;"]," `String`":["is","is","is","is"]," `T.pack`":["is"]," `What":["is"]," `WordCount":["{","xx`"]," `['0'..'9']`":["is"]," `['A',":["'T',"]," `['z',":["'y'"]," `[1,":["1"]," `[1..dv]":["\u003e\u003e"]," `[C.toUpper":["x]"]," `[Char]`":["in","is","===","is"]," `[Myabe":["a]`"]," `[[Char]]`":["is"]," `[a,":["b,","a-1","b,"]," `[from,":["from"]," `[initial,":["initial"]," `[m,m-1":[".."]," `[minBound..maxBound]`":["or"]," `\\x":["-&gt;","-\u003e"]," `_responseFor`":["is"]," ```":["haskell","let","haskell","?"]," ```\"god\"":["`isAnagramOf`"]," ```(":["/="]," ```(10":["-"]," ```(==)":["`on`"]," ```(\\x":["-\u003e"]," ```(`elem`":["['A'..'Z'])```"]," ```(any":["isLetter"]," ```(increment":["\"aa\""]," ```,":["I"]," ```Data.HashMap```":["is"]," ```Data.Map.Strict```":["would"]," ```[[\"a\",":["\"a\"],"]," ```all":["(notP"]," ```anagramsFor":["input"]," ```ciphertext```":["could"]," ```concat":["."]," ```foldl'```":["from"]," ```foldr":["(&amp;&amp;)"]," ```foldr```":["does","is"]," ```fromListWith```":["is"]," ```import":["Control.Applicative```"]," ```isSilence```":["can"]," ```letterValues":["="]," ```map```":["doesn't"]," ```myResponse":["s```"]," ```not":["$"]," ```not.isAlphaNum```":["is"]," ```phrase":["[a,b]","xs"]," ```prepareInput```":["could"]," ```question":["="]," ```quotRem```":["is"]," ```responseFor```":["```where```"]," ```shouting":["="]," ```sqrt":["(length"]," ```where...```":["is"]," ```zipWith":["(\\x"]," ```zipWith```":["with"]," ```{-#":["LANGUAGE"]," ``f":[".","$"]," ``liftA2":["(\u003e)"]," `a":[".","==","||"]," `action":["\u003e\u003e="]," `after`(/`before`)":["arose"]," `all":["isUpper","isSpace","isSpace","isSpace(string)`","f"]," `allCaps`":["perhaps?","sounds"]," `allUpper`":["might"]," `all`":["and","is"]," `anaGrams`":["was","type"]," `anagramsFor":["="]," `anagramsFor`":["can","could","could"]," `and":[".",".",".","$"]," `answer`":["would","is"]," `anyAndAll`":["is"]," `any`":["vs"]," `backpermute`":["is"]," `badNumber`":["doesn't"]," `bal":["\u003c-"]," `biapp":["=","="]," `bit":["n`"]," `case":["grade"]," `chillOutString`":["sounds"]," `chr`":["and"]," `closeAccount`":["can"]," `column`":["could"]," `concat":["[","[f",".","(replicate","(map","`is"]," `concatMap":["(\\x"]," `concatMap`":["can"]," `const`":["sure"]," `count":["'U'"]," `count'`":["can"]," `countWithMap`":["is"]," `count`":["is","does","happens","is","suffers"]," `createInverseMap`":["is"]," `diff":["="]," `digits`":["are"]," `dispatch`":["has"]," `div":["a"]," `elem":["['a'"]," `elem`":["is","have","has","has"]," `encode'`":["could"]," `encodeChar`":["looks"]," `encode`":["should"]," `enumFrom":["minBound`","minBound`","Eggs`","Eggs`"]," `enumFromThenTo`":["or"]," `enumFromThenTo`,":["which"]," `error`":["works"]," `exers:doubleicm`":["means"]," `exploded`":["is"]," `f":["x","="]," `f(x)`":["is"]," `filter":["(not","compareAgainst","((==)"]," `filter`":["might","would","would"]," `findIndex`":["might"]," `findWithDefault`":["would","would","would","just"]," `firstInMonth`":["simplified"]," `first`":["is"]," `flip":["zip","elem`","(,)"]," `flip`":[":)"]," `fmap":["Deque"]," `fmap`":["works"]," `foldl":["(++)"]," `foldl'":["(\\map","(+)"]," `foldl'`":["is","is","can","doesn't","is"]," `foldl1'":["max`"]," `foldl`":["is","is","is","is","is","is","is","is","is","is"]," `foldr1":["(++)"]," `foldr`":["is","is","is","is","is","is","is","is","is","is","isn't","is","is","is"]," `foo":["a"]," `fromDay`":["should"]," `fromEnum`":["is","will"]," `fromListWith`":["is","might","is","from","looks","is","is"]," `fromMaybe`":["is"]," `garden":["::","::"]," `generateName`":["itself"]," `getBalance":["acc","acc","acc`"]," `getWords`":["can","can"]," `ghci`":["as"]," `go":["x"]," `go`":["is"]," `grade`":["could"]," `guard.":["not"]," `guard`":["is"]," `head":[".","."]," `if":["(c","x","a","x","a/="]," `import":["Data.Char","Data.Char"]," `incrementBalance":["acct","=","ba"]," `insertWith'`":["will","looks"]," `insertWith`":["is","is","is"]," `insertWord`":["has"]," `instersectBy`":["and"]," `intercalate":["\"\\n\"","\"","\"","\"\\n\"","\""]," `invalid`":["should"]," `isAnagramOf`":["looks"]," `isAnagram`":["is","and"]," `isAsking`":["would"]," `isCaps`":["looks"]," `isEmpty":["string","=","="]," `isEmpty`":["is"]," `isExclamation`":["doesn't"]," `isIgnoring":["voice"]," `isIgnoring`":["could"]," `isJibbersish`":["is"]," `isLetter":[".-&gt;","a"]," `isLetter`":["+"]," `isQuestion`":["could","is","is","could"]," `isSeparator":["="]," `isSeperator`":["should"]," `isShouting`":["can"]," `isSilence`":["can"]," `isSilentTreatment`":["is"]," `isSuffixOf`":["is","would","reads","from","from"]," `isUpperOrSpecial":["="]," `isYelling`":["could"]," `join":["\"\\n\"`","(,)`"]," `largestPalindrome`":["and"]," `lastTen`":["is"]," `last`":["can"]," `length":["(filter","x","(filter"]," `length.filter":["(=="]," `let":["l"]," `liftA2":["::","."]," `liftA3":["PhoneNumber"]," `lookupPlants`":["might"]," `main":["="]," `main`":["should"]," `makeThisFunctionPassTests`":["--\u003e"]," `makeWordCountMap`":["is"]," `map":["(,0)","(second","snd","f","(stringToPlants"]," `mapFst`":["is","is"]," `mapM":["(const"]," `map`":["is","would"]," `mappend":["(WordCount"]," `matchesAnyOf`":["is"]," `maybe":["0","f"]," `maybe`":["is"]," `meetupDay`":["could"]," `mkRobot`":["could","can","is"]," `module":["Bob"]," `newtype":["School"]," `normalizeWords`":["could"]," `normalize`":["is"]," `not":["(isJibberish","(any","(null",".","."]," `nth`":["could"]," `nub`":["is"]," `nucleotideCounts`":["is","should","makes","should"]," `nucleotide`?":[":)"]," `nucleotidesCounts`":["traverses"]," `null":["::"]," `number'":["[]`"]," `number`":["could"]," `openAccount`":["and","can"]," `ord":["'0'`"]," `pad`":["is"]," `powtest`":["could"]," `prep":["s`,"]," `prettyPrint`":["is"]," `primes`":["and"]," `pure":["(++)"]," `pure`":["is"]," `quotRem`":["or"]," `randomName`":["is"]," `randomR`":["(or","and"]," `range":["r`"]," `reads":["\""]," `removeNonAlphaNum`":["could"]," `replace`":["appears"]," `replicate":["10"]," `resetName`":["should"]," `responseFor`":["is","can"]," `result":["++"]," `return":["$"]," `reverse":["[b..a]`","[stopAt..startFrom]`","[y..x]`","[to..from]`","[t..f]`","$","[to","[a..b]`","[b..a]`","[m..n]`"]," `reverse`":["should","is"]," `robotName`":["could","(assume"]," `romanNumbers`":["appears"]," `s":["/="]," `sanitizeInput`":["is"]," `sanitize`":["is"]," `scheadule`":["is"]," `sentenceKind`":["feels"]," `sep`":["looks"]," `separate`":["is"]," `sequence":[".","(map","."]," `sequence`":["returns"]," `shouting":["=","="]," `show":["c`","c`"]," `silence`":["is"]," `silence`,":["`yell`"]," `simulate`":["looks"]," `sing":["start"]," `sing`":["may"]," `singleItem`":["can"]," `slices":["xs"]," `sort":["."]," `sort'`":["probably","isn't"]," `sortBy":["(\\(x,"]," `splitAt":["3"]," `splitAt`":["looks","might","would","is","might"]," `splitOn":["\"\\n\"`"]," `splitWords`":["can"]," `squareSize":["::"]," `squareSize`":["looks"]," `stringToPlants":["::"]," `stringsToEntries`":["should"]," `strip`":["is","should"]," `stripped`":["seems"]," `sum":["."]," `sum`":["and"]," `swapMVar`":["could"]," `take":["x","mult","10"]," `takeMVar":["a"]," `test":["::","::"]," `testBit`":["is"]," `toList`":["already","is"]," `toMap":["."]," `toOccurList":["."]," `toRNA":["="]," `toRNA'`":["has"]," `toRNA`":["should","should"]," `toUpper(b):bs`":["is"]," `total":["="]," `transpose`":["could"]," `trim`":["is"]," `tryPutMVar`":["has"]," `type":["School"]," `unequal":["(a,b)"]," `unionWith":["(+)"]," `unionWith`":["and"]," `unique`":["is"]," `unlines`":["is","is","may","is"]," `unwords`":["is","might","can"]," `validate`":["isn't"]," `verses`":["is"]," `void`":["from"]," `wasShouted`":["/"]," `where`":["almost","is","is","is","will","usually"]," `wordCount`":["works","should"]," `wordList`":["can"]," `wordsBy`":["is","from","is","is"]," `words`":["will"]," `x":["\\\\"]," `xs":["=="]," `xs`":["in"]," `yell`":["might"]," `zip":["xs"]," `zipWith":["($)"]," `zipWith`":["is","is","is","could","avoids"]," `zip`":["function"]," a":["\u003e\u003e=","++","=","=","::","(A"]," a'":["="]," a).":["account"]," a.":["It"]," aah":["you"]," aah,":["I"]," aahh.":["Wrong"]," about":["Foldable"]," acc":["=","="]," add":["g","g","g","g","g"]," addDays":["::"]," additional":["exersice"]," advance":["North","East","South","West"]," again":["solution","thanks"]," ageOn":["planet"]," agree":["with"]," agreeing":["with"]," ah":["ok.","that's","I"]," ah!":["i"]," ah,":["of"]," ah.":["and","and","and"]," all":["isUpper","f",".","anagrams","isSpace","(not"]," allCaps":["definition","="]," allSpace":["could"]," allWhiteSpace":["="]," allergies":["s"]," also":["you","in","`f","you","explicit","you"]," also,":["\"last\"","i"]," although":["in","the"]," anaGrams":["::","::"]," anagram":["word","="]," anagramFor":["::"]," anagramOf":["a"]," anagramsFor":["input","::","=","=","s","::","s","w","\"Blah\"","\"blah\"","::","word"]," analyze":["s"]," and":["that","that,s","use","a",".","then","all","then","then","then","would","a","so","so","then","how"]," another":["way","way"]," anotherStyleOfNamingFunctions":["is"]," answerQuestion,":["answerShout,"]," any":["reason","isLetter","isLetter","isLetter","isLetter","particular"]," anyAndAll":["p","=","=","=","="]," append":["="]," are":["the"]," arguably":["the"]," arising":["from","from"]," array":["('A','Z')","r","('A',"]," arrowPairs":["="]," as":["one","etrepum","it"]," assuming":["we"]," b":["=","::","(A","=","="]," b).":["transaction"]," b.":["It"]," bar":["True","::","::"]," bar.hs:1:1:":["Warning:","Warning:","Warning:","Warning:"]," bar.hs:3:16:":["Warning:","Warning:"]," bar.hs:3:1:":["Warning:","Warning:"]," bartavelle,":["would","flip"]," baseCounts":["could"]," baseTable":["="]," because":["i"]," benchmarking":["rna/recursion","rna/using","simple","hashmap","scrabble/simple","scrabble/hashmap"]," better":["datastructures"]," bit":["simplistic,"]," bound":["at","at","at","at","at","at","`length"]," but":["for","this","got:","most","got:","I","i","it's","what","it's","definitely","got:","got:","that","I","unfortunately","got:","I","the","we","after"]," by":["the"]," c":["="]," caesarDecode":["="]," caesarEncode":["="]," caesarEncode,":["caesarDecode"]," can":["be","be","be","be"]," can't":["you?","reproduce"]," cancatMap":["(\\x"]," canonicalise":["="]," carry":["stdGen."]," case":["foo","(ma,"]," cases":["can"]," catagoriseStatement::String":["-\u003e"]," categoriseStatement::String":["-\u003e","-\u003e"]," char":["="]," chillOutString":["str"]," choise":["looks"]," chose":["a"]," class":["ReadsBase","Num","Functor","Functor","Monad","Functor","Eq","Eq","Functor","Eq","Num","Eq","Monad","Num","Eq"]," classify":["::","dna","'A'","'C'","dna"]," cleanUpInput":["was"]," collate":["set"]," comment":["-}"]," common":["style"]," comp2":["::","f","::","::","a"]," compareAnagram":["="]," compose2":["::","f","f","="]," concat":[".","$"]," concatMap":["(flip","(++","(\\(d,","(..)"]," convert":["'T'","x"]," convertAcid":["'T'","ch"]," cool,":["thanks"]," count":["s","::","x","s","c"]," countUp":["set"]," ctoRNA":["'T'","c"]," cups":["=","="]," data":["EmotionalContent","BST","Robot","DNA","Values","Node","Node","Map","(,)","Category","Category","Category","Matrix","CharPattern","DNA","RNA","DNA","RNA","BST","Nucleotide","BST","BankAccount","BST","A","(,)","Point","Dq","LL","Robot","Robot","Robot","N","TypeName","N"]," day":["="]," days":["="]," def":["foldl(f,","foldr(f,"]," default":["`Enum`"]," deriving":["(Eq)","(Show,","(Show,"]," desugars":["to"]," detectSilence":["::","s"]," digits":["=","="]," display":["is"]," div":["::"]," divMod":["42","21","21","7","7"]," dnaToRna":["(DNA"]," do":["x","x","x","you","you","a","b'"]," does":["my"]," doing":["the"]," don't":["shadow","need","know","want"]," dont":["know"]," double-flipped!":["I"]," drop":["type"]," drops":["="]," e.g.":["define","would"]," earthYearsPerYearOn":["would"]," edit:":["we","phew,"]," else":["{","goto"]," empty":["string,"]," encode":["and"]," er":["does"]," error":["handling"]," etc.":["if"]," etrepum":["and"]," etrepum,":["thanks","looks"]," evaluate'":["f"]," everything":["is"]," except":["perhaps","every","every"]," expandPairs":["="]," expected:":["[(2,[\"Blair\",\"James\",\"Paul\"])]","\"Sure.\"","\"Sure.\"","\"Sure.\"","\"msemo"]," explicit":["imports/exports,"]," f":["&amp;&amp;&amp;","x","=","`comp2`",".:","\u003e\u003e=","$","x","x","y","y","=","=","=","=","p2"]," fails":["one"]," febThirteenth":["="]," filter":[".","(((==)","(on","(anagram","(\\x"]," first'":["="]," fixed":["leftover","for"]," flip":["::"]," floor":["(10"]," fmap":["::","::","::","(+amt)","(insert"]," foldMap":["f","f","f"]," foldl":["and","(+)","(\\m"]," foldl'":["go"]," foldr":["(\\x","(\\x","(\\x","((:)","is","consumers"]," foldr`":["(and"]," foo":["x","=","a","x"]," for":["that","checking","x","x","multiline","me"]," forgot":["to","to"]," found":["a","3","2","17"]," frequencyTable":["="]," from":["`Control.Applicative`"]," fromBool":["::","False","True"]," fromDNA":["n"]," fromList":["(x:xs)","[]","::","=","[[\"this","[[\"this"]," fromListWith":["::","f"]," fromListWithKey":["::","f"]," fromMaybe":["Statement"]," fxyz_g":["="]," garden":["children","children"]," gen":["\u003c-"]," generateName":["::","\u003e\u003e=","\u003e\u003e=","could","="]," generateRespone::Category":["-\u003e"]," generateResponse":["::","::"]," getBalance":["::","="]," ghci\u003e":["import",":t","[(+3),","map"]," ghci\u003enext":["0","1","2"]," gnuvince":["-"]," go":["c","bs","x","i","x","acc","acc","cz@(c:cs)","(x:xs)","(x@(digit,","i","n","n","_","mappings"]," good":["idea.","point","points!"]," got":["it,"]," grade":["=","g","g"]," great":["testing"]," guard":["(or"]," guards":["are","are"]," gx":["="]," h&gt;":[":load",":info","import","import","M.lookup","M.lookup","import","import","M.lookup","M.lookup","import","(uncurry","import","import","M.lookup","M.lookup","import","import","M.lookup","M.lookup","fromJust","import","import","M.lookup","M.lookup","import","import","M.lookup","M.lookup","show",":info",":info","sequence"]," h\u003e":[":info",":info",":info","filter","range","['A'..'Z']",":info",":info",":info",":info",":type",":type",":type",":info",":info",":info",":info",":info",":info",":info","take","toList","sort","sort",":info",":info"]," ha...":["nice"]," ha..you've":["used"]," hah,":["I"]," haha,":["yep!"]," hammingDistance":["a","::","=","=","::","=","=","::","=","(a:as)","as","=","(a:as)","as","="]," harder":["to"]," have":["fun","you"]," heh":[":)"]," hehehe,":["only"]," hm..":["I"]," hmm,":["not"]," hmm.":["i"]," how":["would","about","does"]," http://book.realworldhaskell.org/read/profiling-and-optimization.html":["(some"]," http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf":["(for"]," http://hackage.haskell.org/package/base-4.6.0.1/docs/src/Data-List.html#transpose":["(if"]," http://hackage.haskell.org/package/containers-0.5.3.1/docs/src/Data-Map-Base.html#line-95":["(although"]," http://hackage.haskell.org/package/criterion":["is"]," http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'":["(for"]," http://www.haskell.org/haskellwiki/List_instance":["might"]," http://www.haskell.org/haskellwiki/Pointfree":["probably"]," http://www.haskell.org/tutorial/numbers.html":["has"]," https://github.com/exercism/exercism.io/pull/1070":["adds"]," i":["don't","like","tried","like","think","prefer","like","like","don't","find","think","understood","think"]," i'm":["in"]," i.e.":["\u003cpre\u003eaddends","`n(n+1)(2n+1)/6`"]," if":["you're","condition","n","desired","you'll","z","(f(a))","(f(a))","bigger","you","you"]," ignore":["this.."]," import":["Data.List","Control.Arrow","Data.Char","Data.Map","Data.Char","Data.List","Control.Applicative","Data.Map","qualified","Data.Char","Data.Array","Data.Map.Strict","Data.List(group,","Data.Map(Map,","Data.Char(isAlphaNum,","Control.Arrow","Data.Char","Data.List","Debug.Trace","Data.Map.Strict","qualified","Data.Foldable","Data.Map.Strict","qualified","Data.Time.Calendar","Data.Time.Calendar.WeekDate","Data.Time.Calendar","Data.Time.Calendar.WeekDate","qualified","Data.Time.Calendar.WeekDate","BankAccount","Control.Concurrent","Control.Monad"]," imports":["only"]," in":["`sing`","`wordCount`","a'","`sortAndLower`","w","ls","`add`","`count`,","Haskell","concatMap","addDays","that","this"]," inAnagram":["s1"]," incrementProc":["acct"]," infix":["4","4","4","4","4"]," infixl":["0","6","1","7"]," infixr":["9","9","3","8","3","8","5","3","9","5","2"]," ins":["t"]," insertWith":["(+)"]," insertWith'":["(+)"]," instance":["Eq","ReadsBase","ReadsBase","(Bounded","(Eq","Functor","(Ord","(Read","(Show","Functor","Functor","Functor","Functor","Functor","Functor","Functor","Functor","Functor","Functor","Functor","Functor","Monad","NFData","Foldable","Foldable","Foldable"]," instead":["of","of","of"]," int":["foo(int","foo(a)"]," intercalate":["\""]," interesting":["approach"]," interesting,":["thanks!"]," invalid":["="]," ioName":["\u003c-","\u003c-","\u003c-"]," is":["any","implemented","another","shorter,","a","equivalent","too","the","also","the","`replaceChar"]," isAggressive":["message"]," isAllCaps":["is"]," isAnagram":["x","::","x","w1","xs"]," isAnagramFor":["::","s"]," isAnagramOf":["`on`","=","::","::","="]," isBlank":["="]," isLeapYear":["year"]," isLetter":["'","||"]," isNonsense":["="]," isPunctuation":["=","implies"]," isQuestion":["is","=","message","('?':[])","\"?\"","doesn't","=","="]," isShouting":["still","="]," isSilence":["::","=","::","=","can","=","="]," isYelling":["seems","is","str"]," isn't":["it"]," isn'tTarget":["="]," it":["fails","seems","might","should","would","will","seems","can","should"]," it's":["possible","possible","possible","possible","possible","possible","common"]," just":["plain"]," justIf":["::","c"]," kim:":["I'm"]," length":["$"]," let":["b'","w","anagram","lx","a","ok"]," letter":["{-","=","=","="]," letter,":["digit"]," letterValues":["="]," letters":["=","\u003c-","=","="]," lettersOf":["="]," liftA2":["(&amp;&amp;)"]," liftM2":["(++)","(++)"]," log(24)~3,":["not"]," logic":["is"]," looked":["into"]," looks":["good!","great,","good,","great.","good.","good.","good,","good","good.","good,","good","nice,"]," lower":["::","="]," lowers":["="]," ls":["="]," lx":["="]," m":["\u003e\u003e="]," main":["=","="]," make":["`allCaps`"]," makes":["this","difference"]," map":["(,1)","(,1)","(toUpper)","::","_","f","toUpper","ceiling","floor","truncate","round"]," mapM":["randomRIO","::","randomRIO"]," mapPairs":["="]," mapTupleSections":["="]," may":["be"]," maybe":["something","I","you"]," maybeInsert":["may","z"]," mean:":["7.640108","7.146006","1.127686","2.429012","7.980707","10.10659","1.323841","1.276473"]," meetupDay":["sched","scheduleEnum"]," meetupDayIter":["weekday"]," mkRobot":["::","::","=","::","="]," mod400":["implies"]," module":["WordCount","DNA","DNA","Anagram","DNA","Scrabble","DNA","Bob"]," msString":["\"\\\"this","\"\\\"this"]," much":["simplier"]," myFunc":["x"]," myFunction":["param"]," n":["\u003c-","\u003c-","=","="]," n'":["\u003c-","\u003c-"]," n1":["\u003c-","\u003c-"]," nMany":["-1","0"]," naaailed":["it"]," name":["\u003c-","should"]," new":["version"]," newIORef":["gen"]," newMVar":["(Just"]," newName":["="]," newtype":["School","SnocList","Deque","School","Type"]," next":["x"]," nice.":["Thanks"]," no":["way","attempts","I"]," no..":["just"]," nope..":["again"]," normalForms":["ws"]," normalize":["looks"]," normally":["there","the","`where`"]," not":["sure","(any","sure","a","sure","sure","sure","a","sure"]," notDuplicate":["="]," nothing":["particular,"]," now":["you"]," ns":["="]," nucleotideCounts":["=","::","=","s"]," nucleotideToRNA":["::","'T'","n"]," num":["=","="]," number":["="]," nx":["="]," oh,":["right."]," ok":["_"]," on":["::","every","it's","a","line"]," once":["you"]," one":["thing","other","thing"]," oops,":["missed"]," oops.":["I"]," ops,":["yes,"]," or":["is",".","even","worse,",".","leave","to","even:","you","actually","just","with"]," or,":["of","if"]," orbitalPeriod":["::","p"]," other":["than","than"]," otherwise":["very","-\u003e","drop"]," ouch,":["I"]," out":["of"]," parentheses":["around"]," parseNumber'":["::","no"]," parts":["=","::","input"]," passes":["test"]," pedantic":["note:"]," perhaps":["you"]," period":["Earth","planet"]," phadej,":["yes"]," please":["add","ignore,"]," point-free":["is"]," pointfree":["on"]," possibly":["over-golfed,"]," pretty":["print","minor"]," prettyPrint":["s","string"]," primeFactors":["::","="]," print":["=\u003c\u003c"]," prints":["as"]," probably":["overkill"]," putMVar":["v"]," questions":["="]," quickCheckWith":["stdArgs{"]," r":["\u003c-","\u003c-","\u003c-"]," randomChar":["x"]," randomLetters":["n","n"]," randomName":["\u003e\u003e=","="]," re":["isQuestion"]," readOct'":["n","n"]," reading":["TVar"]," reads":["very"]," readsBase":["::","('A':s)","('C':s)","('G':s)","('T':s)","_"]," readsPrec":["="]," realized":["there","I"]," really":["you","list"]," really?":["it"]," reject":["="]," removeSilence":["=","="]," removeSilience":["::","ws"]," replace":["nuc","::","c","'T'","=","seems"]," replace::":["Char"]," replaceNucleotide":["x"]," replaceThymine":["n","x"]," replicateM":["20"]," resetName":["::","=","::","r","::","="]," responseFor":["s","m","::","x","=","::","q","s","::","x","str","=","is","s","x","x","msg","::","s","s","(x:xs)"]," rest'":["="]," return":["(map","s'","$","x","x","=","letters","x","$","$","acc","acc","bal`","x","$","b'","v"]," reverse":["[to..","."]," revlist":["a"]," rewritten":["to"]," rnf":["(Robot"]," robotName":["::","::","::","=","::"]," robotNamePattern":["::","=","::","="]," row":["should"]," running,":["which"]," s":["="]," s''":["=","="]," sameLetters":["="]," sanitize":["digits","c"]," scoreLetter":["::","="]," scoreMap":["="]," scoreTable":["::","="]," scoreVec":["="]," scoreWord":["::","="]," scores":["="]," see":["also"]," sentenceKind":["s"]," set":["of"]," should":["I","I"]," shouldn't":["`actualCounts`","it"]," shout":["=","=","="]," shouts":["="]," silence":["=","=","=","_","unused'","="]," simplified":["the"]," since":["`thymidine`"]," sing":["=","=","=","a"]," singleWord":["::","s"]," smth":["like:"]," snoc":["x"]," snocnil":["="]," so":["given","`head","you","the","I","it","I"]," some":["things."]," sorry":["forgot"]," sorry,":["submitted","i"]," sort":["require"]," sorted":["school","=","=","="]," sorteda":["="]," sorting":["arguments"]," sound":["3","5","7"]," specializes":["to"]," specification":["doesn't"]," split":["str"]," splitAt":["could"]," splitDigits":["=","="]," splitOn":["'\\n'"]," squareSize":["text"]," startDay":["="]," std":["dev:","dev:","dev:","dev:","dev:","dev:"]," still":["not"]," string":["ends","ends"]," stringDistance":["="]," stringToPlants":["="]," strip":["="]," sum":["$"]," summarize":["="]," sw":["="]," swapped":["for"]," sx":["="]," t":["Earth","Mercury"]," take":["1"]," tally":["::","n"]," tallyWord":["="]," test":["`-\u003e`","again"]," test_respondsToOtherWhitespace":["::","="]," test_respondsToProlongedSilence":["::","="]," test_respondsToSilence":["::","=","="]," test_respondsToUnicodeNonShout":["::","="]," test_respondsToUnicodeShout":["::","="]," thank":["you"]," thanks":["@princess!","@hillary,","@rollin.","@julianne!","@athena,","to","@lempi,","for","@faustino","@braeden","@jarret","for","for"]," thanks,":["a"]," thanks.":["I've"]," that":["was","will"]," that's":["a","a"]," the":["IntMap","parens","indentation","other","parentheses","only","bang"]," then":["you","sing","I","your"]," there":["is"]," this":["has,","exercise","is","means","means","passed","code","will","may","`map","is"]," thks":["for"]," thx,":["will"]," thymidine":["="]," thymidine,":["uracil"]," thymidineToUracil":["nucleotide"]," to":["cache","avoid"]," toBinary":["="]," toDNA":["::","'A'","'C'","'G'","'T'"]," toDecimal":["bin","\"1a0\"","\"130\""]," toList":["(SnocList","may","::","(Node"]," toRN":["(numeral,"]," toRNA":["::","[]","(x:xs)","::","=","=","::","=","::","=","::","=","::","=","should","=","=","('T':xs)","(x:xs)","[]","=","=","::","=","::","=","=","::","=","=","=","::","xs","=","="]," toRNAChar":["..."]," toRNAc":["::"]," toWeights":["[]","(x:':':xs)","(x:xs)"]," token":["::","="]," too":["complicated"]," total":["="]," tranks":["@rosendo."]," transcribe":["::","'T'","c","::","T","x","::","'T'","c"]," transcribeBase":["c"]," transcribeThymidineToUracil":["::","'T'","nucleotide"]," transform":["x","m","'T'","c"]," transformThymadine":["'T'","c"]," translate":["a","'T'","a"]," translateDNA":["'T'","x","nuc"]," translateToRNA":["::","'T'","n"]," translates":["to"]," trim":["isn't"]," try":["the","to","to","to","to","using","to","to","to","to","to","to","to"]," type":["String","b"]," unless":["(null"]," unlines":["is","::","[]","(l:ls)","$"]," unwords":[".","map"]," uracil":["::","=","="]," uracil,":["thymidine"]," usBijection":["="]," use":["a","foldl'","functionality"]," used":["a"]," using":["`map`","a","`\u003e=`","`foldr`,","a","`where`","`Vector","guards"]," v":["\u003c-"]," validNucleotide":["=","="]," variance":["introduced","is","introduced","is"]," verse":["0"]," very":["clear","nice","nice","nice"]," void":["."]," w":["="]," w/o":["big-O"]," we":["don't"]," wednesday":["="]," well,":["`enumFrom"]," went":["with"]," what":["is","is","`numerals"]," whenever":["you"]," where":["len","s1'","the","filter'","go","alphas","isQuiet","(area,","shouting","f","none","s'","r","go","table","nonSpace","replace","(x,","(v',","ff","len","rows","children'","is","w'","w'","clause","ff","ff","(lowXs,","lowered","trans"]," which":["is","is","isn't","is","is"]," whoops,":["that"]," why":["do","`c","`sort`","not","use","do","do","isn't","not"]," will":["be","try","Maybe"]," window":["size"]," with":["`modifyTVar`","`f"]," withStrand":["::"]," wonder":["if"]," wordCollection":["="]," wordCount":["::","::","=","::","message","=","::","phrase","="]," words":["by"]," wordsBy":["is"]," would":["be"]," wow!":["thanks"]," wow,":["totally"]," wow...I":["don't"]," writeTVar":["acct"]," wrong":["version","command,"]," x":["(a,b)","|\u003e","\u003c-","x","x","x"]," x1":["\u003c-"]," xxx":["xxx"]," yeah":["that"]," yeah,":["string","with","I'm"]," yelling":["="]," yep,":["forgot"]," yes,":["you","i'm","just"]," yes.":["(At"]," yikes":[":)"]," you":["can","did","could","may","can","might","are","might","might","also","can","might","can","can","should","should","can","could","can","may","may","may","can","may","may","can","can","have","may","may","are","may","may","may","can","may","are","may","may","may","can","may","can","are","can"]," you're":["still"]," your":["implementation"]," z":["="]," zhanrnl:":["thanks."]," zipPairs":["="]," zipWith,":["fromEnum"]," zipWords":["=","="]," {-":["This"]," {-#":["INLINABLE","INLINABLE","RULES","RULES","LANGUAGE","LANGUAGE"]," |":["otherwise","len","first","otherwise","guard1","guard2","otherwise","odd","otherwise","isSilence","c","c","otherwise","a","otherwise","shout","question","otherwise","isPunctuation","isSymbol","otherwise","all","((all","((==","otherwise","otherwise","isSpace","otherwise","filter","yelling","last","otherwise","silence","yelling","null","otherwise","isQuiet","otherwise","(all","D2","p","p","isSilence","otherwise","Tip","silence","shout","otherwise","silence","shout","otherwise","any","x","otherwise","predicate1","predicate2","otherwise","…","wasShouted","last","otherwise","n","i","n","otherwise","all","otherwise","isQuestion","isYelling","guard0","otherwise","\"double\"","…","c","t","otherwise","…","…","otherwise","otherwise","guard1","guard2","otherwise","Node","n","k\u003e=","otherwise","endswith","otherwise","isLower","isUpper","isDigit","isNucleotides","otherwise","otherwise"]," }":["deriving","deriving"]," λ:":[":info",":info"]," λ\u003e":["(+1)","(+1)","map","foldr","reads","data","Nucleotide","data","Nucleotide",":t",":t",":t",":t","let",":t","(Just","fromEnum","fromEnum",":info",":info",":info",":info"],"! That":["is"],"! this":["is"],"! toUpper":["k````"],"!! ((length":["a)"],"!! 0,":["row","rows"],"!! 1]`":["?"],"!! 1]`...":["whoops!"],"!! 2":["and"],"!! equalSideCount\u003c/pre\u003e":["worked."],"!(Map k":["a)","a)"],"!) .":["toUpper"],"!= \"\"":["&amp;&amp;"],"!= infix":["function"],"!Size !k":["a"],"![equation](http://latex.codecogs.com/gif.latex?O(log(n!)) =":["O(n%5C:log%5C,n))"],"![equation](http://latex.codecogs.com/gif.latex?O(n%5C:log%5C,n)+O(n) =":["O(n%5C:log%5C,n))"],"!a (Maybe":["a),"],"!b) =":["…`"],"!c []":["=`"],"!k a":["!(Map"],"!n` or":["changing"],"\" \"":["++","=="],"\" \"`":["is",":)","is","is","(and","will","in","="],"\" \"```":["to"],"\" ++":["pluralizedBeer","…","show","b"],"\" 123":["\""],"\" ::":["[(Int,"],"\" ==":["unwords"],"\" _,\".":["Given"],"\" down…\"`)":["to"],"\" of":["beer\""],"\" xs":["++"],"\"! @\"":["to"],"\"\" &amp;&amp;":["last"],"\"\" =":["..","False\"","False`","False`","[]"],"\"\" ==":["[]`","True`","True`,","True`."],"\"\" as":["it"],"\"\" if":["you"],"\"\" instead":["of"],"\"\" is":["a"],"\"\" would":["crash"],"\"\")` doesn't":["fail."],"\"\", or":["make"],"\"\". Perhaps":["\"isSilence\""],"\"\"` check":["from"],"\"\"` evaluate":["to?"],"\"\"` if":["the"],"\"\"` is":["equivalent","`True`","often","usually","concat."],"\"\"` looked":["a"],"\"\"` might":["crash,"],"\"\"` part":["in"],"\"\"`, since":["`null`"],"\"\"``` and":["it"],"\"\"``` to":["a"],"\"\"``` yields":["true,","```True```."],"\"'\"` and":["will"],"\"'\"` are":["necessary"],"\"'%c'\" c`.":["The"],"\"(000) 000-0000\",":["but"],"\"(a,b) -\u003e":["Bool\""],"\") \",":["first,"],"\"++) .":["show"],"\", \"":["++","xs"],"\", bots,":["\",\\n\"`."],"\", bottles":["n,"],"\", first,":["\"-\","],"\"0\" and":["others,"],"\"000\" \"000\"":["\"0000\"`"],"\"000\" \"0000\"`":["that"],"\"000\" \"0000000\")":["that"],"\"000\", and":["the"],"\"0000\"` that":["makes"],"\"0000000\") that":["you"],"\"0000000000\" as":["an"],"\"01\" with":["a"],"\"01\") bin":["="],"\"01\")...```), but":["it's"],"\"0101ups01\", how":["can"],"\"1 2\")\u003c/pre\u003e":["Now"],"\"1\" =":["0"],"\"1, 2,":["3?\""],"\"11\" =":["2"],"\"111\" =":["2"],"\"111111111111\". Although":["there's"],"\"1234\"` should":["return"],"\"130\" =":["4"],"\"23rd\", \"33rd\",":["…"],"\"33rd\", …":["Gotta"],"\"3ab\"), (5,":["\"5a5ba\")]"],"\"3rd\", \"23rd\",":["\"33rd\","],"\":) ?\"":["=","contains"],"\":-) ?\"":["should"],"\"?\" =":["True"],"\"?\" `T.isSuffixOf`":["message"],"\"?\" `isSuffixOf`":["msg","speak"],"\"?\" str":["="],"\"?\" str\u003c/pre\u003e":["and"],"\"?\"` (from":["Data.List)"],"\"?\"` is":["just"],"\"?\"`, but":["since"],"\"@@@\" (though":["that"],"\"ACGT\" (repeat":["0)"],"\"ACGT\" =":["True"],"\"AGCT\" (repeat":["0)","0)`"],"\"AGCT\" ++)":["."],"\"ATCG\" ++":["map"],"\"ATCG\" ++`":["and"],"\"Back to":["Scoring\""],"\"Because of":["the","the","the"],"\"Blargh\" defaultGarden`":["will"],"\"C\") ++":["\"X\")"],"\"C\"), …":["]"],"\"CCNNN\" and":["it"],"\"CD\"), (100,":["\"C\"),"],"\"CGA\"), but":["to"],"\"CM\" ++":["xs"],"\"CM\") too,":["but"],"\"CM\"), (500,":["\"D\"),"],"\"CM\")`, `(4,":["\"IV\")`."],"\"CM), ...]`,":["but"],"\"Chill.\" Specifically,":["it"],"\"Could not":["find"],"\"D\"), (400,":["\"CD\"),"],"\"Data structures":["should"],"\"Fine. Be":["that","that","that","that","that","that","that","that","that","that","that","that","that","that"],"\"GACTU\" =":["sum"],"\"Haskell Way\"":["or","to"],"\"Hello,world!\"? It":["will"],"\"How To":["Nitpick\""],"\"I don't":["understand"],"\"I know,":["I'll"],"\"I normally":["like"],"\"I'll do":["that"],"\"IS THIS":["A"],"\"IV\")`. Can":["make"],"\"IV\", than":["to"],"\"LLNNN\" as":["the"],"\"LLNNN\" but":["you're"],"\"Learn you":["a","a"],"\"Left\" means":["\"at"],"\"M\" ++":["xs"],"\"M\") ++":["\"C\")","\"C\")"],"\"M\"), (900,":["\"CM\"),"],"\"M\"),(900, \"CM),":["...]`,"],"\"M\"` but":["that's"],"\"M\"` does":["the"],"\"M\"` gets":["interpreted"],"\"M\"` has":["to"],"\"M\"` which":["is","is"],"\"Monad is":["a"],"\"Multiline string":["literals\""],"\"No more":["bottles\".","bottles","bottles"],"\"None\" plants":["in"],"\"One important":["thing"],"\"Reverted\" to":["submission"],"\"Right\" means":["\"no"],"\"Silly quoting":["algorithm\"?"],"\"Star War\"":[","],"\"Sure\"` and":["your"],"\"Sure.\" case":["though,"],"\"Sure.\" instead":["of"],"\"T.pack\"? (I'm":["a"],"\"The Map":["type"],"\"The `First`":["`y`"],"\"The first":["time"],"\"The goal":["of"],"\"The one-line":["summary","summary","summary"],"\"The structure":["of"],"\"There are":["no","5"],"\"This function":["is"],"\"This is":["the"],"\"Treat invalid":["input","input"],"\"UUU\"` should":["return"],"\"V\"), (4,":["\"IV\")"],"\"WHAT THE":["HELL"],"\"Warning: The":["import"],"\"What is":["2","2","2","2","2","2","53"],"\"Whatever.\" @=?":["responseFor"],"\"Whatever.\" [(isBlank,":["\"Fine."],"\"Whatever.\" as":["a"],"\"Whatever.\" when":["given"],"\"Whatever.\", not":["\"Fine."],"\"Whatever.\"` would":["have"],"\"Woah, chill":["out!\"","out!\"","out!\"),","out!\"","out!\"","out!\"","out!\"","out!\".","out!\"","out!\"","out!\""],"\"Write a":["program"],"\"X\"), (9,":["\"IX\")"],"\"XX power\"":["but"],"\"Yoda-programming\". Would":["you"],"\"[\" and":["then"],"\"[Char]\" so":["it"],"\"[eta reduce](http://www.haskell.org/haskellwiki/Eta_conversion)\"":["`alphaChars`"],"\"[text]\" values.":["The"],"\"\\\"this one\\\"":["\\\"one\\\"","\\\"one\\\""],"\"\\n\" ==":["unlines"],"\"\\n\" list)":["++"],"\"\\n\" ls)":["++"],"\"\\n\" to":["the"],"\"\\n\" x":["++"],"\"\\n\" xs":["++","++"],"\"\\n\" |":["n"],"\"\\n\") .":["verse"],"\"\\n\")` is":["`unlines"],"\"\\n\"` as":["`unlines"],"\"\\n\"` is":["the","equivalent","equivalent","the"],"\"\\n\"`. This":["will"],"\"\\n\\r \\t\\v\\xA0\\x2002\"":["--"],"\"\\xdcML\\xc4\\xdcTS!\" how":["is"],"\"]\", a":["backslash"],"\"^$#&amp;!!!\" to":["be"],"\"^\\\\s*$\"` but":["the"],"\"` (and":["it's"],"\"` =":["`unwords`"],"\"` in":["ignorance"],"\"` is":["equivalent","equivalent","equivalent"],"\"` will":["evaluate"],"\"``` to":["```unwords```."],"\"a Scalene":["is"],"\"a a":["a","a"],"\"a compute":["the"],"\"a function":["that","that"],"\"a question":["mark"],"\"a triangle":["whose"],"\"a\" (insert":["\"b\""],"\"a\" or":["\"b\"."],"\"a\") ++":["\"b\")"],"\"a\"], [\"b\",":["\"b\"],"],"\"aa\" (increment":["\"bb\""],"\"aaaaaaaaaaaab\"), this":["method"],"\"aaaaaaaaaaaab\"` you'll":["get"],"\"abcd\" \u003c/pre\u003e":["If"],"\"abstract\" it":["in"],"\"acceptable style\"":["to"],"\"actions\", one":["of"],"\"aeioulnrst\"), …],":["char"],"\"all characters":["are"],"\"all not\",":["so"],"\"all\" are":["more"],"\"all-symbols\" questions":["more"],"\"alternate value\"":["if"],"\"alternative and":["foldable\""],"\"alumin\", they":["have"],"\"aluminum\" \"alumin\",":["they"],"\"always use":["strict","`foldl'`"],"\"amleth\". If":["you"],"\"anagramsFor =":["filter"],"\"antidisestablishmentarianism\" [\"bob\"]```":["perform"],"\"any\" and":["\"all\""],"\"apple\" and":["\"dry\"","\"dry\"","\"dry\""],"\"at least":["one"],"\"b\" (insert":["\"c\""],"\"b\") ++":["\"c\")`"],"\"b\"], [\"c\",":["\"c\"]]```."],"\"banana\" is":["not"],"\"banana\" to":["not"],"\"bar\", \"baz\",":["\"oof\"]"],"\"base case\",":["pattern"],"\"basic\" addition,":["and"],"\"bb\" (increment":["\"cc\""],"\"bob\" [\"Bob\"]```":["gives"],"\"bob\" [\"antidisestablishmentarianism\"]```":["You"],"\"bob\" [\"bob\"]```":["be"],"\"bob\" [\"bob\"]```,":["which"],"\"body\" of":["`f`."],"\"borrowed\" the":["`primes`"],"\"bottle(s)\" as":["it's"],"\"bottle(s)\" hard-coded":["in,"],"\"broken keyboard\"":["case,"],"\"brute-forcing\" the":["lists,"],"\"but maybe":["there's"],"\"c\" M.empty)))```,":["then"],"\"c\")` nests":["a"],"\"c\"]]```. Can":["you"],"\"cabal install":["missingh\""],"\"calculating\" $":["elem"],"\"carrot\". Consider":["string"],"\"case\" but":["for"],"\"cc\" ...":["M.empty"],"\"chill out\"":["case,","predicate.","by"],"\"chill-out\" string,":["when"],"\"chill-out\" string.":["You"],"\"classify\" with":["a"],"\"clever\", in":["that"],"\"clicked\" with":["me..."],"\"clutter\") because":["it's"],"\"code will":["be"],"\"complicated\" for":["it"],"\"composable transactions\"":["article"],"\"containers-0.5.0.0\". This":["is"],"\"correct\". Sorry,":["I'm"],"\"crash-unsafe\" since":["I"],"\"creating\" a":["list"],"\"custom mapping":["function\""],"\"de-constructor\" to":["get"],"\"decimal\" they":["really"],"\"discoverable\" -":["I'd"],"\"display\", \"render\",":["or"],"\"do is":["magic\""],"\"does not":["detect"],"\"dot combinator\"":["`(.).(.)`,"],"\"double negative\"":["of"],"\"double\" `isPrefixOf`":["xs"],"\"dry\" in":["linear"],"\"dry\" where":["the","the"],"\"element level\"":["of"],"\"empty\" out":["of"],"\"empty\"; your":["predicate"],"\"equal\", and":["in"],"\"equal\". I":["don't"],"\"equivalent but":["not","not"],"\"equivalent\" and":["\"equal\".","\"equal\","],"\"error\" seems":["a"],"\"error-string\"`, or":["`undefined`."],"\"eta-reduce\" means":["too."],"\"eta-reduction\" by":["removing"],"\"eta-reduction\"? I":["haven't"],"\"excessively clever\",":["so"],"\"f fmap":["x"],"\"falling through\"":["semantics"],"\"field labels\"":["http://www.haskell.org/onlinereport/decls.html#field-labels"],"\"filter anagrams":["from"],"\"filter isDigit\"":["or"],"\"finding the":["next"],"\"finished.\" This":["could"],"\"first part\".":["It'll"],"\"first pass\"":["due"],"\"fixed\" everything":["you"],"\"float out\"":["optimization","optimization","optimization.","optimization"],"\"fmap\" -":["but"],"\"foo\" 1":[".",".","$",".",".","$"],"\"foo\") (guard":["True"],"\"foo\") [\"derp\",":["\"bar\","],"\"foo%%%bar\" ==":["fromList"],"\"fool\" the":["system"],"\"fooled\" `hlint`":["in"],"\"for all":["characters,"],"\"from right":["to"],"\"from the":["outside"],"\"fromListWith\". But":["i"],"\"function combination":["using"],"\"functions\" to":["have"],"\"given that":["`n`"],"\"good\" case.":["Optimizing"],"\"grok\" laziness":["(and"],"\"hamlet\" and":["\"amleth\"."],"\"hard to":["read"],"\"haskell\"-like this":["solution"],"\"heavy looking\"":["`$`."],"\"if none":["match,"],"\"if this":["grade"],"\"if …":["else"],"\"in all":["caps\""],"\"in reverse\"":["I'd"],"\"induvidual\" should":["probably"],"\"infix\", and":["the"],"\"insertWith\" a":["bit"],"\"insertWith\" looks":["more"],"\"insignificant\" because":["you"],"\"instance Functor\"":["in"],"\"instance\" of":["`areAnagrams`"],"\"invalid nucleotide":["\""],"\"invalid when":["11"],"\"invalid\") s":["."],"\"invoke\" `not`,":["like"],"\"isEmpty\" implies":["that"],"\"isQuestion \"\"":["="],"\"isQuestion x":["="],"\"isSilence\" would":["be"],"\"isSuffixOf\" uses":["\"reverse\","],"\"isSuffixOf\" would":["eliminate"],"\"it's well":["documented"],"\"just dive":["in\","],"\"just knowing\".":["Basically"],"\"last message\"":["aren't"],"\"last\" is":["partial,","not"],"\"last\" just":["seemed"],"\"last\". I":["understand"],"\"let /":["in\""],"\"long-form\" for":["readability."],"\"looks great!\"":["for"],"\"looks great\"":["button.","from"],"\"make it":["more"],"\"make program":["work\""],"\"map\" [~1]":["forall","forall"],"\"map\" rule":["to","to"],"\"mapFB\" forall":["c","c"],"\"mapFB\" rule":["optimises","optimises"],"\"mapList\" [1]":["forall","forall"],"\"mapList\" rule,":["which","which"],"\"mathy\". This":["is"],"\"matrix of":["strings","strings"],"\"meant\" to":["be"],"\"message !=":["\"\""],"\"might be":["dangerous\""],"\"modular\" purpose":["that"],"\"module Bob":["where\"."],"\"monomorphism restriction\"":["error"],"\"more efficient\",":["even"],"\"more functional\"":["to"],"\"msemo aanin":["dninn"],"\"msemoa anindn":["inndla"],"\"new word\"":["using"],"\"no more":["bottles\"","bottles\""],"\"no plausible,":["sensible"],"\"no successes\",":["in"],"\"no way\"":["I"],"\"non-empty\" BST":["(order"],"\"not any\"":["is"],"\"not equals\"":["operator,"],"\"now there's":["your"],"\"nucleotides\", but":["rather"],"\"obviously correct\"":["code."],"\"of\"` Will":["fix"],"\"official\" test,":["like"],"\"on the":["wall,"],"\"on\" function":["in"],"\"one\"], [\"may":["be"],"\"only use":["foldr"],"\"optimization fix\",":["because"],"\"order of":["guards"],"\"original\" or":["\"sorted\""],"\"owl\" operator":["(because"],"\"parsing\" the":["nucleotides"],"\"pattern matches":["non-exhaustive\""],"\"pointfree\" app":["to"],"\"prime\" notation?":["I've"],"\"programmy\" by":["separating"],"\"pull\" out":["a"],"\"read the":["value"],"\"really tricky\"]]":["@=?"],"\"record syntax\"":["or"],"\"refrain\", not":["\"coda\"."],"\"render\", or":["some"],"\"replace\" function":["and"],"\"resetName\" is":["not"],"\"respond\", \"display\",":["\"render\","],"\"responseFor =":["display"],"\"responseFor\" should":["be"],"\"return .":["f\""],"\"return\" --":["once"],"\"returns\" that":["`Left"],"\"reverse\", which":["is"],"\"robot-name\". But":["I"],"\"rows &":["cols\""],"\"run\" a":["STM"],"\"s1/=s2 &amp;&amp;":["sort"],"\"separated-word\" be":["two"],"\"short cut":["fusion\""],"\"shout test\"":["was"],"\"shout\" which":["is"],"\"shouting\" guard":["ensuring"],"\"shouting\", for":["example."],"\"show\" to":["be"],"\"silly quoting":["algorithm\""],"\"solution is":["to"],"\"some informative":["thing\"`."],"\"sort w\"":["(sort"],"\"sorted\" function":["-"],"\"sorted\" instead":["of"],"\"spine-strict\" data":["structure,"],"\"splitting a":["string"],"\"stage\" of":["the"],"\"strict `f`\".":["I"],"\"strictness issue\"":["is"],"\"string-replace T":["with"],"\"submitted-in-errors\". The":["previous"],"\"swapable\" `Char`s":["between"],"\"tallyListItems\" and":["\"words'\""],"\"the best\"":["algorithm,"],"\"the first":["_guard_","integer"],"\"the function":["is"],"\"the last":["letter"],"\"the result":["of","of"],"\"the sentence":["ends"],"\"there does":["not"],"\"there exists":["a"],"\"there isn't":["a"],"\"think about":["using"],"\"thread blocked":["indefinitely\""],"\"thread-safe\" you":["really"],"\"time\" the":["program."],"\"to string\".":["But"],"\"tree must":["not"],"\"trick\" (once":["I"],"\"triple\". Since":["you're"],"\"two\" maps:":["`map"],"\"use\" r":["in"],"\"using Control.Concurrent.STM.TMVar":["or"],"\"validNumber\" would":["sound"],"\"validateNumber\" might":["be"],"\"variable\" argument":["last"],"\"verse components\"":["-"],"\"what is":["a"],"\"what is\"":["and"],"\"where\" and":["its"],"\"where\" as":["well"],"\"which isn't":["even"],"\"wildcard import\",":["I"],"\"word\" many":["times."],"\"words\" and":["tell"],"\"words'\" could":["be"],"\"x bottles":["/"],"\"x m\"":["vs"],"\"x prime\").":["That's"],"\"xxy\" ==":["set"],"\"you probably":["want"],"\"yxx\"`, even":["though"],"\"zip from":["right"],"# in":["Haskell,"],"# the":["value","value"],"### Failure":["in:","in:","in:","in:"],"#-} !Size":["!k"],"#-}` (or":["perhaps"],"#-}` and":["`(,n)"],"#-}` at":["the","the"],"#-}` extension":["which"],"#-}` pragma":["at"],"#-}` pragmas,":["you"],"#-}`. I":["think"],"#-}`. Looks":["good"],"#-}`. Or,":["without"],"#-}``` extension":["there?"],"#1 (list":["is"],"#1 is":["gone."],"#2 and":["almost"],"#2 one,":["but"],"#2 or":["#3,"],"#2 with":["where"],"#3) keeping":["a"],"#3, not":["#27!"],"#9, perhaps":["there"],"#haskell and":["reading"],"#haskell. It's":["probably"],"#if __GLASGOW_HASKELL__":["\u003e=","\u003e="],"$ \"invalid":["nucleotide\"","nucleotide"],"$ (&&))":["any"],"$ (&&)`":["is","(or"],"$ (1,":["2)"],"$ (flip":["$"],"$ ...`":["to"],"$ 15485863":["*"],"$ E.ErrorCall`":["is"],"$ Just":["(bal","(bal"],"$ M.empty`":["but"],"$ M.insertWith":["(+)","(+)","(+)","(+)","(+)","(+)","(++)"],"$ M.insertWith'":["(+))"],"$ M.singleton":["s","w"],"$ Robot":["n'","ioName","ioName"],"$ T.pack":["s`"],"$ WordCount":["$"],"$ [p1,":["p2,"],"$ [rows":["!!"],"$ \\c":["-&gt;"],"$ \\n":["-\u003e"],"$ a":["++"],"$ addends":["n)`"],"$ and":["^","made"],"$ any":["..`","isLower","isLower","isLower","(not","isLetter"],"$ b":["c`."],"$ bar":["baz`.","False","False","False","False","False"],"$ both":["$"],"$ but":["I"],"$ c`":["can","style"],"$ case":["x","sch","scheduleEnum"],"$ concat":["$"],"$ concatMap":["isDivisible"],"$ defaults":["++"],"$ diagram`":["?"],"$ do":["..."],"$ drop":["m"],"$ dropWhile":["(\u003c","(\u003c"],"$ elem":["$"],"$ f":["string`,","a"],"$ filter":["isAlpha)`","(==True)","isAlpha"],"$ fmap":["(=='1')"],"$ foldl'":["(flip","(flip","(flip","(flip","(flip","(flip"],"$ foldr":["(M.insertWith","(M.insertWith","(M.insertWith","(M.insertWith","(M.insertWith","(M.insertWith"],"$ foldr1":["(\\x"],"$ fromList":["[(A,","[1,2,3,4,5])"],"$ g":["$","x`","x`","$"],"$ ghc":["-Wall","-Wall"],"$ h":["x``","$","$"],"$ head":["$","$"],"$ hlint":["Bob.hs"],"$ i":["$"],"$ i`":["as","although"],"$ if":["x"],"$ initialValue\u003c/pre\u003eSlightly":["more"],"$ insert":["k2","kn","k2","kn","k2","kn","k2","kn","k2","kn","k2","kn","k2","kn","k2","kn"],"$ intersperse":["...`","\","],"$ isAsciiUpper`":["as"],"$ isLetter":["l)"],"$ isLower":["l`."],"$ isSpace`":["and"],"$ isYelling":["s)`"],"$ j":["$"],"$ k":["x`"],"$ l":["...`"],"$ length":["bin`","text`"],"$ lmap":["(toInteger"],"$ map":["square","toUpper","fromEnum","fromEnum`.","verse","square","getPlant","verse","toLower`?","x`","(","toLower","First","(..)","fromEnum","verse","toLower"],"$ modifyTheAcc":["\u003e\u003e"],"$ n":[":"],"$ newTVar":["n","generateName`,","n"],"$ not":["."],"$ number":["string`"],"$ onlyDigits":["num`"],"$ param`":["if"],"$ parse":["question"],"$ pointfree":["--verbose"],"$ primeFactors":["$"],"$ process":["word`","word`"],"$ property":["$"],"$ randomRIO":["('A',","('0',","('A','Z')","('A',","('A',"],"$ repeat":["'0'`.","y`","'0'`.","1`?)","'0'`"],"$ replicate":["0"],"$ runhaskell":["-Wall"],"$ runhaskell.exe":["bob_test.hs"],"$ s":["=~",")."],"$ sort":["$"],"$ sortBy":["(comparing"],"$ splitAt":["3"],"$ string)`":["is"],"$ string`":["might"],"$ strip":["$"],"$ tails":["xs`"],"$ tell":["$"],"$ to":["."],"$ toLower`":["equivalent"],"$ toUpper":["letter`"],"$ transpose":["."],"$ versesToSing":["start"],"$ words":["str","$","...```:"],"$ x":["=","-","/="],"$ x`":["would","if"],"$ x`...":["if"],"$ zip":["a","s1","(sort","children'","\"ACGT\"","s"],"$ zipWith":["(\\x","(/=)","((fromEnum","(==)","(==)","(/=)","(/=)"],"$ …":["$","$","$","$","$","$","$","$"],"$! ...`":["as"],"$! n":["`shiftL`"],"$!`. Since":["`n`"],"% cat":["bar.hs"],"% ghc":["-Wall"],"% ghci":["-Wall"],"%~ sort":["&"],"& `map`":["implementation,"],"& `xs`)":["because"],"& clear":["and"],"& cols\"":["$"],"& complexity":["when"],"& forth":["on"],"& lowerCase":["word"],"& spacing":["etc."],"& traversed":["."],"& unboxing.":["`filter"],"& unnecessary":["`fromListWith`"],"&& (no":["characters"],"&& (sort":[".","(toLower'"],"&& all":["isUpper","p","p","isUpper","isUpper","isUpper","isUpper","shout"],"&& any":["isUpper","isAlpha"],"&& century":["&&"],"&& exceptional`?":["Mathematically"],"&& f":["y`"],"&& fromEnum":["True"],"&& head":["digits","phone"],"&& is":["sameSorting"],"&& isUpper":["a`","a`","a)"],"&& last":["xs","input"],"&& lowSortedXs":["=="],"&& mod400`":["mod100"],"&& not":["(any","(null","(any","century`","(null","divisibleBy"],"&& ns":["=="],"&& null":["(x","(y"],"&& s''":["=="],"&& sameSorting":["w'"],"&& sort":["a'","word'","w","w"],"&& sorteda":["=="],"&& sx":["=="],"&& to":["stop"],"&& trace":["\"sort"],"&& w1":["/="],"&& …`":["instead"],"&&& all":["isUpper)```"],"&&& cols)":["(msInt"],"&&& const":["1)`","n`"],"&&& g)":["x`"],"&&& id)":[".","."],"&&& length":[")"],"&&& length)":["."],"&&& length`":["(it's"],"&amp;&amp; (not":["$"],"&amp;&amp; False`.":["One"],"&amp;&amp; all":["(not","(not"],"&amp;&amp; any":["isUpper","isUpper"],"&amp;&amp; as":["=="],"&amp;&amp; has":["higher"],"&amp;&amp; head":["a"],"&amp;&amp; last":["a`","message"],"&amp;&amp; len":["=="],"&amp;&amp; none":["isLower"],"&amp;&amp; not":["(null","(d","(mod","(any"],"&amp;&amp; null":["(tail"],"&amp;&amp; sort":["s1'"],"&amp;&amp;&amp; const":["1)","1)`","1)`","1`","1)`.","1)`"],"&amp;&amp;&amp; g":["="],"&amp;&amp;&amp; pred))":["10"],"&amp;lt- [k]`":["generator"],"&gt; (x,y))":["words"],"&gt; 0`":["is","you're"],"&gt; 3":["are"],"&gt; It's":["not"],"&gt; Some":["people,"],"&gt; Write":["a"],"&gt; consider":["words"],"&gt;&gt; return":["'U'"],"&gt;&gt;= return":[".","."],"&gt;= that":["day"],"&lt;$&gt; ...":["&lt;*&gt;...`"],"&lt;$&gt; pAreaCode":["&lt;*&gt;"],"&lt;*&gt; pFirstPart":["&lt;*&gt;"],"&lt;*&gt; pSecondPart`":["(it's"],"&lt;*&gt;...` out":["loud?"],"&lt;*&gt;` is":["usually"],"&lt;- xs":["]`"],"&lt;= b`":["case."],"' '":["=","else"],"' '`":["is","String"],"' =":["True"],"' else":["toLower"],"'!'` case":["won't"],"'\". show":["will"],"') but":["this"],"'++ show":["nucleotide'"],"'-'` ==":["`'-'`,"],"'0' =":["fmap"],"'0'` can":["be"],"'0'` instead":["of"],"'0'` is":["a"],"'0'` or":["`ord"],"'0'` would":["be","read"],"'0'`. Looks":["good"],"'0'`. That's":["how"],"'1' &amp;&amp;":["len"],"'1' =":["\"a\"","tail","fmap"],"'1' in":["the"],"'1' then":["1"],"'1'. This":["is"],"'1':ds) -\u003e":["ds"],"'1'` or":["equivalent"],"'1'` returns":["false,"],"'9')` would":["be"],"':' to":["current"],"':t (\\x":["-&gt;"],"';' from":["imperative"],"'?' :":["[]`,"],"'?' =":["..","\"Sure.\""],"'?' s":["ocrmap)`"],"'?') $":["str```"],"'?') .":["last)","last`.","last","last`"],"'?') ocrmap)`.":["Not"],"'?')`, and":["use"],"'?'` (the":["null","null"],"'?'` instead":["of"],"'?'` means":["nothing"],"'?'` not":["just"],"'?'` or":["`isQuestion"],"'?'` to":["check"],"'?'` without":["the"],"'?'` works":["just"],"'?'` would":["cause"],"'?'`, you":["could"],"'A' -\u003e":["...","'U'"],"'A' =":["A","'U'"],"'A' and":["'Z'?"],"'A' nucleotides.":["That'd"],"'A' to":["'Z'","a"],"'A']` to":["`mapLetter`?"],"'A'` is":["`'A'`,"],"'A'`, although":["they"],"'C :":["'M'"],"'C' -\u003e":["'G'"],"'C' :":["\"M\""],"'C' =":["'Z'.","C","'G'"],"'C' and":["'N'"],"'C' ||":["c"],"'C', 'G']`":["could"],"'C', 'T',":["or","'A']`"],"'C', and":["'A'"],"'C'` is":["the"],"'G' -\u003e":["'C'"],"'G' =":["G"],"'G', 'C',":["and","'T',"],"'G']` could":["be"],"'Learn You":["a"],"'M' :":["xs"],"'M') [1..3]`.":["Is"],"'Mk' is":["usually"],"'N' that":["you're"],"'T' 'U'```":["does"],"'T' =":["'U'","'U'","'U'","'U'","'U'","'U'","'U'","'U'","'U'","'U'","T```","'U'","'U'","'U'","'U'","'U'","'U'","'U'"],"'T' and":["'U'","'U'"],"'T' is":["a"],"'T' then":["'U'","'U'","'U':acc","'U'","'U'","'U'","'U'","'U'","'U'"],"'T' to":["'U'"],"'T' with":["'U'","'U'","'U'"],"'T', 'A']`":["to"],"'T', 'C',":["'G']`"],"'T', or":["'A'"],"'Tis a":["silly"],"'U' \"UUU\"`":["should"],"'U' :":["toRNA"],"'U' ::":["Nucleotide\u003c/code\u003e,"],"'U' =":["const"],"'U' _":["="],"'U' and":["leave"],"'U' are":["constants."],"'U' else":["x)","x","x)","x","x)`.","c)","c)","n"],"'U' in":["your","my"],"'U' is":["ok"],"'U' so":["the"],"'U':acc else":["x:acc)"],"'U'` should":["always"],"'U'``` does":["exactly"],"'U's when":["`nucleotideCounts`"],"'Z' in":["your"],"'Z' rather":["than"],"'Z') [(c,":["s)","n)"],"'Z') [(char,":["score)"],"'Z') g`":["will"],"'Z')) (replicate":["3"],"'Z'), randomRIO":["('0',"],"'Z')` and":["have","successive"],"'Z')`. You":["can"],"'[' then":["recursive"],"'\\n' :":["unlines"],"'\\n' is":["unwords,"],"'\\n' sounds":["like"],"'\\n'.join isn't":["going"],"'\\x -&gt;":["foldr"],"'\\xdc' just":["a"],"']'. Will":["try"],"'` String":["-\u003e"],"'` is":["`unwords`"],"'`. Use":["`isSpace`"],"'a' -":["10`."],"'a' to":["'z'"],"'a']` is":["generally"],"'a'` right":["after"],"'all isSpace'":["for"],"'all' and":["'any'"],"'all'. I":["also"],"'and' but":["it's"],"'any' combinators":["instead"],"'anyAndAll p":["xs"],"'are anagrams":["of","of"],"'are different":["words'"],"'c=='A' =":["c"],"'channels' notion":["to"],"'classify', classify":["would"],"'core' (stage":["of"],"'div' k)\u003c/pre\u003e":["And"],"'elem' [1,2,3]`":["I"],"'fresher! Can":["you"],"'go' helper":["function."],"'if every":["item"],"'if', 'then',":["'else'."],"'implies' function":["such"],"'increase' the":["number"],"'isSpace' in":["Data.Char,"],"'just leave":["this"],"'l' is":["only"],"'last statement'":["part,"],"'map two":["deep'"],"'mapMaybe'. It":["might"],"'mechanical' in":["the"],"'n' all":["first"],"'namespace' of":["the"],"'non-standard' (?)":["package"],"'of beer'":["to"],"'on' (sort":["."],"'on' sort":["."],"'opposite' of":["`all`."],"'otherwise' case,":["the"],"'partially applied":["function'"],"'power' of":["guards"],"'precedence' or":["priority"],"'rd' will":["add"],"'right' way":["to"],"'s nitpicking":["(again!)"],"'s' only":["in"],"'s' such":["as"],"'s') are":["always"],"'s', it's":["always"],"'shouting' strings":["-"],"'smart constructor')":["I"],"'space leak'":["argument."],"'split' and":["found"],"'stack' space":[":)"],"'sum +":["filter',"],"'t' is":["a"],"'things' being":["created"],"'toRNA' (i.e.":["remove"],"'verse 0'":["that"],"'words' is":["using."],"'words', but":["this"],"'write out'":["what"],"'x', it's":["going"],"'xs' tend":["to"],"'y' ..":["'a']`"],"'z' +":["ord"],"'z' and":["then"],"'z' instead":["of"],"'z']` is":["much"],"( )":["around"],"( ...":[")`"],"( 2,":["1)"],"( 31557600...`":["for"],"( 7,":["0)"],"( Bob.hs,":["Bob.o","Bob.o"],"( I":["think,","find"],"( I'm":["thinking"],"( IORef":["String"],"( Map.fromList":["$"],"( Map.fromListWith":["(+)"],"( WordCount.hs,":["interpreted"],"( all":["isSpace"],"( and":["."],"( bar.hs,":["bar.o","interpreted"],"( comment":[")"],"( function1,":["functionN)"],"( head":["&&&"],"( toLower":["."],"( wordCount":[")"],"( x":["-"],"(\"000\", \"000\",":["\"0000\")"],"(\"?\" `isSuffixOf`)`":["``"],"(\"BCMP\" ,":["3)"],"(\"BCMP\", 3),":["(\"FHVWY\","],"(\"CM\"++) .":["(\"XC\"++)"],"(\"DG\" ,":["2)"],"(\"DG\", 2),":["...","(\"BCMP\",","...]```"],"(\"FHVWY\" ,":["4)"],"(\"FHVWY\", 4),":["(\"K\","],"(\"JX\" ,":["8)"],"(\"JX\", 8),":["(\"QZ\","],"(\"K\" ,":["5)"],"(\"K\", 5),":["(\"JX\","],"(\"LNRS\",2)]` and":["expanding"],"(\"M\" ++":["\"M\")"],"(\"QUUX\"). Your":["solution"],"(\"QZ\" ,":["10)"],"(\"XC\"++) .":["(\"III\"++)","(\"III\"++)"],"(\"b\", 2),":["(\"c\","],"(\"c\", 2)]```?":["You"],"(\"foo\", (1":["+"],"(\"foo\", 3)":["]"],"(\"invalid nucleotide":["\"++)"],"(#12, questioned":["nonsence):"],"($ 3)":["[(+3),"],"($ x)":["[conditions]`"],"($) (cycle":["[id,","[id,"],"($) ::":["(a"],"($) [id,":["sum"],"($) cycle`":["approach"],"($)` in":["ghci,"],"(&&&) ::":["Arrow"],"(&&&) from":["Control.Arrows"],"(&&) (not":[".","."],"(&&) .":["any"],"(&&) ::":["Bool","Bool","Bool"],"(&&) \u003c$\u003e":["haveUpper"],"(&&) =\u003c\u003c":["not"],"(&&) even":["(\u003e"],"(&&) haveUpper":["allUpper","allUpper"],"(&&) notDuplicate":["compareAnagram)`"],"(&&) will":["work"],"(&&)) any":["all`"],"(&&)` (or":["use"],"(&&)` is":["readable"],"(&amp;&amp;) .":["(noLowerCase","(/=)"],"(&amp;&amp;) True```":["and"],"('1':no') =":["no"],"('?':[]) =":["True"],"('A', 'Z')":["g`","[(c,","[(c,","[(char,"],"('A', 'Z'))":["(replicate"],"('A', 'Z'),":["randomRIO"],"('A', 'Z')`":["and","and"],"('A', 'Z')`.":["You"],"('A','Z') [(l,s":["l)"],"('A':s) =":["[(A,s)]"],"('C':s) =":["[(C,s)]"],"('G':s) =":["[(G,s)]"],"('I':'I':'I: ([]))":[")"],"('T':s) =":["[(T,s)]"],"('T':xs) =":["'U'"],"('X':'C': ('I':'I':'I:":["([]))"],"('a', 1),":["('b',"],"('b', 3)":["..."],"('b', undefined)])":["!","!"],"('elem' ['0'..'9'])`":["then..."],"('mod' k":["/="],"((\"M\" ++":["\"M\")"],"(($ x)":["."],"((&&) .)":[".",".",".","."],"(((\"M ++":["\"M\")"],"(((1) +":["1)","1)"],"(((==) `on`":["normalized)","letters)"],"((+) a":["b)"],"((++) .":["f)"],"((++) b":["c)`."],"((+1) \u003c$\u003e)":["::"],"((,) .":["lower))"],"((,) a)":["--","--","--"],"((,x) .":["map"],"((-&gt;) a)":["instance"],"((-\u003e) r)":["--","--","where"],"((1) +":["1)"],"((:) .":["f)","x)","x)","f)"],"((== '?')":["."],"((==) True)":["="],"((==) `on`":["letters)","f)","sortderString)","sort"],"((==xn) .":["fst)"],"((\u003e\u003e) .":["guard"],"((a ++":["b)"],"((a, c)":["-\u003e"],"((all isUpper)":["."],"((force .)":["."],"((fromEnum .)":[".",".",".",".",".",".",".","."],"((fromEnum .).":["(/=))`"],"((grade, pupils):rest)":["="],"((guard False":["&gt;&gt;="],"((inputMap ==)":["."],"((length .":["filter","filter"],"((length a)":["-"],"((sum .":["map"],"((unlines .":["map","map"],"() of":["_`"],"(), and":["tuples"],"()` (Control.Monad's":["void"],"()` I":["think"],"()` is":["redundant"],"()` on":["line"],"()` since":["it"],"()` so":["the"],"()`)) providing":["the"],"()`. Also,":["sometimes"],"()`. It":["could"],"()}` where":["`type"],"(* 2)":["$"],"(*) due":["to"],"(*) this":["may"],"(*))` to":["make"],"(***) .:":["join"],"(***)` --":["that"],"(*10) 4\u003c/pre\u003e":["works"],"(*2) $":["3","3"],"(*2)] (digits":["n)`"],"(*3), (^3)]":["\u003c*\u003e"],"(*f*, *canonical*":["and"],"(+) \"foo\"":["1","1","1","1","1","1"],"(+) $":["fromList","defaults","zip"],"(+) (1::Int))":["M.empty","M.empty","M.empty","M.empty","M.empty","M.empty","M.empty","M.empty","M.empty","M.empty","M.empty","M.empty"],"(+) (zip":["\"AGCT\"","str"],"(+) .":["map","flip","map","wordCounters","([('A',0),('C',0),('G',0),('T',0)]","(map","normalizeWords","zipWithOne"],"(+) 0":["xs`"],"(+) 0`":["is"],"(+) 0`,":["but"],"(+) 1":["(repeat"],"(+) ::":["a","a"],"(+) [('a',":["1),","1),"],"(+) `flip`":["1```."],"(+) key":["1"],"(+) w0":["1"],"(+) w1":["1","1"],"(+) w2":["1","1"],"(+) w3":["1"],"(+) wn":["1"],"(+) word":["1","1`"],"(+) y":["1"],"(+) …`":["to"],"(+))) .":["modifyMVar`"],"(+), so":["this"],"(+). The":["defaults"],"(+)` (or":["`alter`)"],"(+)` I":["think"],"(+)` does":["not"],"(+)` from":["`Data.Map`."],"(+)` isn't":["value-strict."],"(+)` it":["will"],"(+)` solution":["wouldn't."],"(+)` will":["store"],"(+)` you":["will"],"(+)`. (I":["speculate"],"(++ \"\\n\")":["=","."],"(++) \"\"`":["is"],"(++) \"\\n\")":["=","="],"(++) \"ab\"":["\"cd\"","\"cd\""],"(++) &lt;*&gt;`":["is"],"(++) (replicate":["2"],"(++) (verse":["a)"],"(++) .":["map"],"(++) ::":["[a]","[a]"],"(++) \u003c$\u003e":["m1"],"(++) g":["[st]`","(st","(pure",".",".","[n]","[n]"],"(++) m1":["m2"],"(++) onto":["the"],"(++) really":["quite"],"(++)` is":["clever,"],"(+1) .":["(+2)"],"(+1) \u003c*\u003e":["(+2)`"],"(+1) `fmap`":["(+2)"],"(+1) without":["writing"],"(+1)) ::":["(Monad","(Functor"],"(+1)` and":["`foldl'`"],"(+1)`, or":["actually"],"(+2 if":["you"],"(+2) .":["(*2)"],"(+2) `fmap`":["(*2)"],"(+2)` not":["work"],"(+2)`, so":["this"],"(+amt) \u003c$\u003e":["readTVar"],"(+i))` in":["a"],"(, 1)":["strand`",".","ws`"],"(, 1)`":["if","is"],"(,'W') p1,":["fmap"],"(,) .:":["fmap"],"(,) 1":["."],"(,) 1)`,":["but"],"(,) 1`":["but","even","is"],"(,) a":["b","b","b","b"],"(,) n":[".","."],"(,)) (repeat":["1)`"],"(,)` might":["be"],"(,0) \"AGCT\"":["++)"],"(,0) \"ATCG\"":["++`","++"],"(,0) dna`":["than"],"(,1) (filter":["(`elem`","f"],"(,1)` (at":["which"],"(,1)` hack":["is"],"(,1)` in":["the"],"(,1)`, or":["with"],"(,1)`. Some":["like"],"(,n) xs`":["since"],"(-+*) operations":["right?"],"(-1 maps":["to"],"(-1) 7":["=="],"(-1)]` doesn't":["type"],"(-1)` will":["return?"],"(-16) @=?":["answer"],"(. (return":["."],"(. pure)":["."],"(. unSchool)":["."],"(.) .":["(.)","(.)`","(.)`.","(.)"],"(.) ::":["(b","(b","(b"],"(.) id":["[(+1),","\u003c$\u003e"],"(.)`. The":["fixity"],"(.)`. Then,":["`hammingDistance"],"(.-. )":["is"],"(...) [2,3]":["="],"(...there is":["no"],"(.:) ::":["(b","(c"],"(.:) =":["(.)"],"(.^) ::":["Integral"],"(.^) a":["b"],"(/) ::":["a"],"(/=) ::":["a"],"(/=) `ap`":["on"],"(/=) a":["b"],"(/=) as":["suggested"],"(/=) xs":["ys`","ys","ys"],"(/=)) $":["zip"],"(/=)) [(1,1),":["(1,2)]"],"(/=)) from":["to"],"(/=))) .)":["."],"(/=))` would":["be"],"(/=))`. The":["rule"],"(/=)` (and":["a"],"(/=)` however":["if"],"(/=)` which":["would"],"(/=)`, but":["you"],"(/=)`. Although":["you"],"(/=)`. To":["go"],"(0 +":["1)","1)"],"(0)))` and":["then"],"(0.5 to":["upper"],"(0::Int64))` with":["type"],"(1 +":["(0)))`","(1","1)))","(1","…))`","(1","…))`","(1))`","(1","…))`"],"(1 and":["2"],"(1 point)":["have"],"(1) +":["1)]`","1)]"],"(1) When":["presented"],"(1))` and":["so"],"(1, \"I\")":["]"],"(1, \"aeioulnrst\"),":["…],"],"(1, 0)":["--"],"(1, 2)":["@=?"],"(1.0%) high":["severe","severe"],"(10 ^":["9"],"(10), just":["like"],"(10, \"X\"),":["(9,"],"(10, 1)":["--"],"(10, ds)":["-\u003e"],"(100, \"C\"),":["…"],"(1000, \"M\"),":["(900,"],"(101 =":["1"],"(11, '1':ds)":["-\u003e"],"(11,574), but":["I"],"(123 =":["1"],"(1::Int)) M.empty":["(replicate","(replicate","(replicate","(replicate","(replicate","(replicate","(replicate","(replicate","(replicate","(replicate","(replicate","(replicate"],"(2 *":["(0"],"(2 ::":["Int))`."],"(2) `atomically`":["at"],"(2.0%) high":["mild"],"(20, 21,":["28,"],"(21, 0)":["--"],"(2:3:[ f":["x"],"(3) I":["don't"],"(3,\"a\"), (5,\"a\")]":["=="],"(3,\"b\"), (3,\"a\"),":["(5,\"a\")]"],"(34 if":["the"],"(4) Why":["do"],"(400, \"CD\"),":["(100,"],"(5, \"V\"),":["(4,"],"(5,\"a\")] ==":["fromList"],"(5,\"b\"), (3,\"b\"),":["(3,\"a\"),"],"(500, \"D\"),":["(400,"],"(900, \"CM\"),":["(500,"],"(: [])`":["or","the"],"(:) f)":["[]","[]"],"(\u003c sqrt":["len)"],"(\u003c x)":["[1..]`"],"(\u003c&\u003e) ::":["(a"],"(\u003c&\u003e) =":["liftA2"],"(\u003c*\u003e) ::":["f","Applicative"],"(\u003cThunk: f":["list\u003e"],"(== '?')":["$",".",".","."],"(== True)":["$"],"(== True)`":["is"],"(== n)`":["on"],"(==' ')":["but"],"(==' ')`":["?"],"(=='1') .":["ap"],"(==) ::":["a","a","a","a"],"(==) \\`on\\`":["(sort"],"(==) `Data.Function.on`":["sort","lettersOf"],"(==) `on`":["canonicalise"],"(==) allCaps":["id`"],"(==) normalized":["x)"],"(==) str":["capStr```","capStr`"],"(==) string":["$"],"(==) unify":["x"],"(==)) a":["b"],"(==True) $":["zipWith"],"(==nil)` with":["the"],"(==w) words)`":["isn't"],"(\u003e 0)`":["is"],"(\u003e) toLower":["toLower``"],"(\u003e=from) (iterate":["pred"],"(\u003e\u003e=) ::":["m","m"],"(?) package":["in"],"(A _":["x)"],"(A x":["_)"],"(AFAICS) I":["don't"],"(AKA relations":["I"],"(Actually, there":["are"],"(Although it":["might"],"(Although obviously,":["given"],"(And you":["could"],"(Apparently I've":["got"],"(Array, (!),":["array)"],"(At least":["I've"],"(BST a)":["}","}"],"(BST a))":["(Maybe","deriving","a"],"(BST a)`,":["then"],"(BST l":["y","x","x"],"(BTree a))":["a"],"(BTree a))`":["is"],"(Base DNA)`":["seemed"],"(Base p)":["where"],"(Before starting":["to"],"(Bounded a,":["Bounded"],"(Bounded, Enum)":["=\u003e"],"(By \"no":["way\""],"(C, 0),":["(G,"],"(Carthorse and":["Orchestra)."],"(Char -\u003e":["Bool)`"],"(Char, Char)`":["or"],"(Char, Int)":["tuples"],"(Control.Monad's void":["can"],"(DNA x)":["="],"(Data.List doesn't":["have"],"(Data.Map is":["in"],"(Data.Map.Base.Map). It's":["documented"],"(Data.Map.Strict is":["probably"],"(Data.Vector Char)?":["What"],"(Day, addDays,":["fromGregorian,","fromGregorian,","fromGregorian,"],"(EDIT: Err,":["not"],"(EDIT: Or":["maybe"],"(EDIT: Right,":["I'm"],"(Eggs -\u003e":["0,"],"(Either String":["Int))`,"],"(Either a)":["--","--"],"(EmotionalContent -&gt;":["String)`"],"(Enum a)":["=\u003e"],"(Enum, Bounded)`":["for"],"(Eq a)":["=\u003e","to"],"(Eq a,":["Eq"],"(Eq), saddle-points":["(Monoid)"],"(Exercism policy),":["but"],"(False, 0)":["...```"],"(Foldable, foldMap,":["toList)"],"(Functor f,":["Num","Num"],"(G, 0)]`":["looks"],"(GHC.Base.\u003c$) ::":["a","a"],"(Get the":["length"],"(HINT: Think":["about"],"(Haskell noob":["here)."],"(Haskell support":["was"],"(Hint for":["future"],"(Hint: it":["also"],"(However, I":["will"],"(I already":["knew"],"(I am":["not"],"(I copied":["them"],"(I covered":["this"],"(I don't":["know"],"(I especially":["like"],"(I guess)":["because"],"(I had":["nothing","plenty"],"(I mean,":["`where`"],"(I might":["be"],"(I see":["that"],"(I speculate":["this"],"(I suppose":["it"],"(I test":["with"],"(I think":["better?)","you"],"(I think)":["clicked","to","computed"],"(I think).":["Hope"],"(I thought":["I'd"],"(I used":["the"],"(I was":["going"],"(I'd use":["more"],"(I'm a":["newb)"],"(I'm assuming)":["curry"],"(I'm not":["aware","suggesting","sure"],"(I) don't":["see"],"(I,j) you":["need"],"(I.e. call-by-need":["with"],"(IMO) simpler":["tests"],"(IMO) solution":["with"],"(IORef) and":["some"],"(If the":["sole"],"(In fact,":["I"],"(Int -\u003e":["Int)`"],"(Int, Int)`":["rather"],"(Int, Int)`,":["or"],"(Int, [(String,":["Int)]))`"],"(Integer -\u003e":["Integer)`","Integer)]`"],"(Integer is":["fully"],"(Integral b,":["Num","Num"],"(Is there":["a"],"(It doesn't":["apply"],"(It probably":["shouldn't"],"(It's not":["so"],"(JS, at":["least)"],"(Just 0)":["\u003e\u003e="],"(Just 1)":["\u003c**\u003e"],"(Just 1))":["\u003e\u003e="],"(Just 2":["\u003e\u003e="],"(Just a,":["Just"],"(Just try":["to"],"(Just x)":["=","="],"(LL a)":["}"],"(LL a),":["dqtl"],"(Likewise with":["the"],"(M.findWithDefault 0":["k"],"(M.findWithDefault 0)":["scores`"],"(M.insertWith (+)":["(1::Int))","(1::Int))","(1::Int))","(1::Int))","(1::Int))","(1::Int))"],"(MVar (Maybe":["Int))`"],"(Map) --":["for"],"(Map), if":["you"],"(Map)` above":["the"],"(Map)` along":["with"],"(Map)` etc.":["along"],"(Map)` on":["its"],"(Map, fromListWith)`":["(the"],"(Map.findWithDefault '?')":["ocrmap)`."],"(Map.insert k":["v"],"(Map.insertWith (+)":["w1","w0"],"(Markdown isn't":["cooperating."],"(Maybe (BST":["a))","a))","a))","a))"],"(Maybe (BTree":["a))","a))`"],"(Maybe (N":["a))","a))"],"(Maybe (Node":["a))","a))","a))`","a))`."],"(Maybe (Tree":["a))","a))`"],"(Maybe Int))`":["instead?"],"(Maybe Int)`.":["In"],"(Maybe Integer)":["}"],"(Maybe a)":["!a","a","a"],"(Maybe a),":["but"],"(Maybe a)`":["to"],"(Maybe is":["not"],"(Maybe the":["`null"],"(Menlo), it":["does."],"(Might want":["to"],"(Monaco), the":["whitespace"],"(Monad m,":["Num"],"(Monad), looking":["at"],"(Monoid) have":["good"],"(N a)":["on","-\u003e"],"(N a))":["a"],"(Namely, `\":)":["?\"`.)"],"(Node a)":["}","}"],"(Node a))":["}","a"],"(Node a))`":["without"],"(Node a))`.":["Other"],"(Node l":["x"],"(Not that":["it"],"(Nothing means":["parse"],"(Num [V.Vector":["Int])`."],"(Num a0)":["arising","arising","arising"],"(O(n log":["n))"],"(O(n) memory":["usage"],"(Only infix":["operators"],"(Only one":["check)."],"(Or, if":["you"],"(Ord a,":["Ord"],"(P.S. I":["did"],"(PhoneNumber \"000\"":["\"0000000\")"],"(Prelude, doc":["says"],"(PrimState m)":["e"],"(README and":["code)"],"(Read a,":["Read"],"(Robot b":["c)","c)"],"(Robot name)`":["and"],"(Row, Col)":["as"],"(S). The":["idea"],"(S.Set String)":["}"],"(SOME CONDITION":["FOR"],"(School s)":["="],"(Seems autocomplete":["on"],"(Should the":["`nuclelotideCounts`"],"(Show a,":["Show"],"(Show a0)":["arising","arising"],"(SnocList xs)":["=","="],"(Strand p":["→"],"(String -&gt;":["Bool)","Bool)"],"(String -\u003e":["Bool)","Bool)"],"(String, (Int,":["[(String,"],"(String, String)":["-\u003e"],"(String, String))`":["because"],"(String, String)`":["which"],"(String, String,":["String)"],"(T, 0),":["(C,"],"(TMVar is":["easier"],"(TVar String)`":["since"],"(That'll teach":["me"],"(The short-circuiting":["behavior"],"(The two":["branches"],"(There might":["be"],"(This is":["the"],"(Though most":["likely"],"(Thursday..Sunday). We'll":["handle"],"(Tree a))":["(Maybe"],"(Tree a))`":["you"],"(Trying not":["to"],"(Unless you're":["optimizing"],"(V.map V.tail":["zs)\u003c/pre\u003ewhich"],"(Vector a)":["...`?","(Int,"],"(Vector a)`":["is"],"(WHNF). There's":["nothing"],"(We don't":["need"],"(WordCount .)":["."],"(WordCount a)":["(WordCount"],"(WordCount b)":["="],"(Yes, this":["despite"],"(You can":["benchmark"],"(You can't":["`last`"],"(You probably":["don't"],"([Integer] and":["Integer)"],"([String] -&gt;":["[String])","[String])"],"([])) )":[")`"],"([a] -\u003e":["Bool)`"],"([benchmark source":["and"],"(\\ c":["-\u003e"],"(\\(d, s)":["-\u003e"],"(\\(grade, pupils)":["-&gt;"],"(\\(isError, accum)":["-\u003e"],"(\\(s, le)":["-\u003e"],"(\\(x, _)":["(y,"],"(\\_ -\u003e":["return","newName)`"],"(\\_ x":["y"],"(\\a -\u003e":["justIf"],"(\\a b":["-\u003e","-\u003e"],"(\\acc x":["-\u003e"],"(\\c -\u003e":["if"],"(\\c n":["-\u003e","-\u003e"],"(\\char -&gt;":["toUpper"],"(\\m x":["-\u003e"],"(\\map (k,v)":["-\u003e"],"(\\map key":["-\u003e"],"(\\n -&gt;":["maybe"],"(\\n -\u003e":["verse"],"(\\s -&gt;":["(s,1))"],"(\\s -\u003e":["s"],"(\\x -&gt;":["(x,","(x,","(x,","foldr","(x,1))```","if"],"(\\x -\u003e":["(toLower","(x,","…)`","[x])","[f","x","normalize","notIdentical","(x,1))`","if","if","x","x"],"(\\x acc":["-&gt;","-&gt;","-&gt;","-&gt;","-\u003e"],"(\\x y":["-","-&gt;","-\u003e","-\u003e"],"(\\xs -\u003e":["(head"],"(^) ::":["(Integral","(Integral"],"(^3)] \u003c*\u003e":["[3]"],"(_)` or":["`all"],"(_, _,":["w)"],"(`\"Madness, and":["then"],"(`\"madnessandthenillumination\"`), is":["26"],"(`('T':rest)`) and":["restructuring"],"(`++` is":["an"],"(`++` works":["too,"],"(`-Wall` argument":["to"],"(`:(toRNA rest)`)":["by"],"(`:: (a":["-\u003e"],"(`:: Bool":["-\u003e"],"(`::a -\u003e":["Bool`)","b"],"(`:`) comes":["after"],"(`\u003c$\u003e`) from":["Control.Applicative"],"(`\u003e\u003e=` in":["the"],"(`\u003e\u003e=`) instead":["of"],"(`?`) looks":["pretty"],"(`Am \u003c-":["M`)"],"(`As +=":["1`)"],"(`As =":["S`)"],"(`Bs +=":["1`)"],"(`Bs =":["S`)"],"(`M \u003c-":["Am`)","2`)"],"(`MVar ()`))":["providing"],"(`Map`, not":["`Map.Map`)."],"(`S =":["As`)","Bs`)"],"(`Schedule` and":["`Weekday`)"],"(`Set.member` Set.fromList":["\"ACGTU\")"],"(`String` is":["just","a"],"(`T.isSuffixOf` is":["`Text"],"(`TupleSections` is":["an"],"(`[]` or":["`(:)`),"],"(`[]`, or":["`_:_`)."],"(`\\acc y":["-\u003e"],"(```any (`elem`":["\"01\")...```),"],"(```ord 'z'":["+"],"(```str```) in":["the"],"(`a1` to":["`h8`)"],"(`add` has":["time"],"(`all isSpace`).":["But"],"(`all` or":["`any`)"],"(`anagramsFor` in":["this","this"],"(`appendNewline` maybe?),":["but"],"(`choose n":["1"],"(`elem` \"01\")":["bin"],"(`elem` \"01\"))":["return"],"(`elem` \"01\")...```),":["but"],"(`elem` \"ACGT\")":["dna)"],"(`f a":["b`)"],"(`f` &":["`xs`)"],"(`f` and":["`t`"],"(`foldl'` for":["example)"],"(`foldl'` from":["Data.List),","Data.List)"],"(`foldl'`) and":["`insertWith`"],"(`foldl'`) is":["the"],"(`foldl'`) or":["`fromListWith`","`fromListWith`","`fromListWith`","`fromListWith`","`fromListWith`","`fromListWith`"],"(`foldl'`), or":["better"],"(`foldl'`). I":["prefer"],"(`foldl'`). See":["http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'"],"(`foldl` could":["be"],"(`fromListWith`), or":["with"],"(`fromString`, `column`,":["`transpose`)."],"(`go` is":["incredibly"],"(`go`) instead":["of","of"],"(`import Data.Char":["(isLower,"],"(`import Data.Char(isLower,":["isSpace,"],"(`isAllergicTo` s)":["…"],"(`isSilence`, `isShout`,":["and"],"(`l ==":["[]`"],"(`liftA3` or":["fmap/ap)"],"(`lookupPlants`)! Normally":["I"],"(`map f":["."],"(`map`, `concatMap`":["and"],"(`module Bob":["(responseFor)","(responseFor)"],"(`responseFor ::":["String","String"],"(`row` is":["still"],"(`scoreLetter`, `scoreWord`":["in"],"(`seq` not":["done"],"(`shape`, `reshape`,":["`rows`,"],"(`snd` is":["mapped"],"(`stripped`) will":["be"],"(`succ Sunday":["="],"(`toRNA` in":["this"],"(`type`) instead":["of"],"(`where` is":["not)."],"(`wordsBy` from":["the"],"(`zip` repeat":["1)"],"(a +":["b)))"],"(a -&gt;":["b)","b)","b","b)","b)","b)","b)"],"(a -\u003e":["b)","b)","m","a","b)","b","b","b","b)","b","b)","b)","b)","a1","b)","b)","b","b","b","b","b","Bool)","b)","m","b)","b)","b","m"],"(a /=":["b)","b)`.","b)","b)`,","b)"],"(a \u003c\u003e":["b)"],"(a bit)":["performance"],"(a code":["snippet"],"(a complex":["function"],"(a la":["Coursera)"],"(a list":["of"],"(a list),":["and"],"(a measly":["26"],"(a number":["can't"],"(a partial":["function"],"(a two":["argument"],"(a) `putMVar":["v"],"(a) `tryTakeMVar":["v`"],"(a) and":["(b):"],"(a) the":["code"],"(a), when":["you"],"(a, b)":["=","--","--","--","--","=","|"],"(a, f":["b)`."],"(a, sort":["b)`","ns))`"],"(a,b) (c,":["d)"],"(a,b) =":["zip","a"],"(a,b)` but":["this"],"(a/=b)) as":["bs"],"(a:as) (b:bs)":["=","=","="],"(a:as) ++":["bs"],"(a:as) ==":["(b:bs)"],"(about the":["parenthesis)."],"(acc +":["fromEnum"],"(according to":["the"],"(actually @alba":["suggested"],"(actually need":["to"],"(add `on`":["getMap)"],"(addends n)`":["in"],"(adding a":["zero"],"(admittedly a":["bit"],"(after already":["paying"],"(after changing":["the"],"(after compiling":["with"],"(after some":["prompting"],"(again) completely":["forgot"],"(all (not":["."],"(all are":["much"],"(all isSpace":["s)"],"(all isUpper)`":["should"],"(all you":["need"],"(all-caps) at":["all?"],"(all-too-common-for-myself) mistake":["of"],"(allocating these":["thunks"],"(almost) all":["cases"],"(along with":["2","build's","build's"],"(also called":["η-reduction).","outside-in"],"(also the":["code"],"(although `MultiwayIf`":["is"],"(although at":["the"],"(although i'm":["not"],"(although it":["does","may"],"(although it's":["a","fairly"],"(although most":["don't"],"(although that":["is"],"(although the":["next"],"(although you":["only","really"],"(although you'd":["add","do"],"(although you'll":["want"],"(always) and":["imports"],"(amt +)":["\u003c$\u003e","\u003c$\u003e","\u003c$\u003e"],"(amt +)`.":["`Maybe`"],"(an example":["of","of"],"(anagram \"foo\")":["[\"derp\","],"(anagram (prepare":["s)"],"(anagrams) look":["the"],"(anagramsFor) where`":["to"],"(and -Wall":["will"],"(and I":["feel","used"],"(and `Set`,":["`Seq`,"],"(and `lookups`":["should"],"(and a":["similarly","small","list"],"(and actually":["I'm"],"(and after":["reading"],"(and at":["least"],"(and constant":["time"],"(and constant),":["otherwise"],"(and could":["be"],"(and did":["myself)."],"(and don't":["require"],"(and end)":["elements"],"(and enjoyed":["reading"],"(and even":["then,"],"(and has":["the"],"(and haskell-platform":["is"],"(and have":["`turnLeft`","a"],"(and hopefully":["others)","optimal)"],"(and if":["there's","I'm","it","they're"],"(and implicitly":["for"],"(and in":["this"],"(and it":["is","is"],"(and it's":["already"],"(and l":["is"],"(and let":["the"],"(and maybe":["others?)"],"(and more":["understandable,"],"(and much":["slower"],"(and not":["necessitate","real-time"],"(and now":["it"],"(and perhaps":["`Schedule`),","Bounded","renaming)"],"(and possibly":["smart","infinite)"],"(and really":["anything"],"(and remain":["a"],"(and saves":["you"],"(and so":["be"],"(and strangely":["they're"],"(and thanks":["in"],"(and the":["comment","safe"],"(and then":["scan"],"(and this":["definitely"],"(and when/how":["to"],"(and you":["get","can","probably"],"(and your":["code"],"(another power":["for"],"(any Enum)":["as"],"(any isAsciiLower)`":["is"],"(any isLower":["s)","message)`","a)","xs)`.","str)`","s)`,","s)`.","text)","msg)`."],"(any isUpper":["\u003e\u003e=)"],"(any predicate":["list)"],"(anything more":["than"],"(ap (ap":[".",".","."],"(ap .":["((&&)","((&&)","((&&)","((&&)"],"(apart from":["anything","abandoning"],"(area, (first,":["second))"],"(area_code, prefix,":["subscriber)"],"(arguably). Looks":["nice"],"(as ++":["bs)","bs)`."],"(as @wilfrid":["mentioned),"],"(as a":["best"],"(as an":["analog"],"(as defined":["in"],"(as in":["your","`readMVar`)"],"(as is":["any"],"(as it":["is","is"],"(as of":["2013"],"(as used":["in"],"(as you":["are"],"(as, b)":["\u003c-"],"(assume `m`":["is"],"(assuming it's":["the"],"(assuming that":["type's"],"(at least":["if","to","one","as","not","lazy","asymptotically,","for"],"(at runtime).":["The"],"(at which":["point"],"(atomically .)":["."],"(attoparsec) for":["this"],"(avoiding `do`,":["basically),"],"(b ++":["(c"],"(b -&gt;":["c)"],"(b -\u003e":["b","c)","c)","c)"],"(b ==":["'1')`"],"(b `asTypeOf`":["a)"],"(b c":["d)"],"(b) I":["feel"],"(b) `putMVar":["v"],"(b) `tryTakeMVar":["v`"],"(b, c))`":["(if"],"(b:bs) !n`":["or"],"(b:bs) =":["a","fromEnum","acc","fromEnum"],"(backticks were":["mangled"],"(bal +":["i)`","i)`."],"(bar (baz))`":["but"],"(bar.baz())` (which":["looks"],"(basically an":["alias"],"(basically the":["same","same"],"(baz))` but":["usually"],"(bearing in":["mind"],"(because I":["contributed"],"(because it":["looks"],"(because of":["its"],"(because otherwise":["it'd"],"(because what":["I"],"(before you":["mentioned"],"(besides the":["learning"],"(better algorithm":["too)."],"(binary as":["well)"],"(binary or)":["from"],"(bit arithmetic,":["Vector"],"(both are":["the"],"(building a":["nested"],"(but I've":["forgot"],"(but forgot":["earlier)"],"(but it":["would"],"(but it's":["inlined,"],"(but just":["one"],"(but leaving":["it"],"(but not":["as","including)","including)","the"],"(but really,":["you"],"(but still":["very"],"(but thanks":["for"],"(but that":["would"],"(but that's":["probably"],"(but this":["site","takes"],"(but you":["should"],"(but you'd":["probably"],"(by composing":["with"],"(by itself),":["see"],"(by tab-completion":["in"],"(c ++":["d))"],"(c -&gt;":["d","d","d","d","d","d","d"],"(c -\u003e":["d)","d)"],"(c ==":["x)","x)`,"],"(c, 1)`":["etc."],"(c, d)":["="],"(cabal install":["missingh)"],"(can be":["kinda"],"(canonicalize), and":["use"],"(case normalization":["and"],"(causes a":["space"],"(chars, score)":["\u003c-"],"(check out":["`map`)."],"(check that":["there"],"(checking for":["spaces"],"(chunksOf 2":["$"],"(closer to":["point-free"],"(collectively, fixity)":["of"],"(compare `on`":["fst)``"],"(compare the":["location"],"(comparing head)`":["instead."],"(compilation will":["optimize"],"(complement (0::Int64))`":["with"],"(concat (replicate":["x"],"(conceptually) cleaner":["one-pass"],"(consider eta-reduction,":["by"],"(consider generating":["the"],"(consider this":["as"],"(consider what":["`++`"],"(consider words":["like"],"(const (==))":["a"],"(const (ap":["(ap","(ap","(ap"],"(const Nothing)":["Just"],"(const [])":["."],"(const f)":["[1..n]`"],"(constant space":["for"],"(converting to":["fixed"],"(could use":["`ap`"],"(count, nucleotideCounts)":["where"],"(countUp set":["k)"],"(countWords empty)":["in"],"(crashes with":["empty"],"(created with":["`++`)"],"(cs, s)":["\u003c-"],"(cycle [id,":["double])`","luhnDouble])`"],"(d -&gt;":["c)"],"(d 100)`":["aren't"],"(defaults could":["be"],"(definition) param`":["or"],"(depending on":["compiler/runtime"],"(didn't know":["it"],"(divisibleBy 4":["&&"],"(doesn't look":["much"],"(doesn't require":["Eq)."],"(doesn't start":["with"],"(downcase s1)`":["is"],"(downcase …)`":["can"],"(drive acc":["x))`."],"(drop n":["x)","xs)`"],"(due to":["non-strict","the","the","fusion"],"(e.g. Binary":["or"],"(e.g. Data.Set).":["It"],"(e.g. Fifth":["Monday"],"(e.g. I":["cannot"],"(e.g. Teenth's":["Day"],"(e.g. `\"Take":["\""],"(e.g. `(\"M\"++)`":["or"],"(e.g. `((Just":["(Just"],"(e.g. `(Just":["1"],"(e.g. `2:3:[n":["+"],"(e.g. `bstRight`,":["`bstLeft`,"],"(e.g. `fromListWith`":["or"],"(e.g. `head":["."],"(e.g. `maybe`,":["matching"],"(e.g. `module":["Bob"],"(e.g. `responseFor":["::"],"(e.g. `undefined`":["or"],"(e.g. `xs`":["is"],"(e.g. a":["sorted"],"(e.g. given":["`Just"],"(e.g. have":["it"],"(e.g. if":["the"],"(e.g. in":["GHCi)"],"(e.g. instead":["of"],"(e.g. it's":["not"],"(e.g. numpy":["for"],"(e.g. rewrite":["rules)."],"(e.g. take":["advantage"],"(e.g. the":["`display`"],"(e.g. using":["`foldl'`)","`filter`,"],"(e.g., `import":["System.Random"],"(each line":["is"],"(easier to":["type,"],"(eg: `fromMaybe`),":["I'll"],"(either `atomicWriteIORef`":["or"],"(either literally":["or"],"(either of":["ioref,"],"(eliminate intermediate":["data"],"(empty s)":["would"],"(error \"invalid\")":["s"],"(esp with":["parsers),"],"(especially since":["`x`"],"(especially w/o":["optimizations)."],"(especially when":["the"],"(eta reduction)":["to"],"(evaluated constructor":["and"],"(even `undefined`).":["The"],"(even if":["not","that's"],"(even in":["GHCi,"],"(even simpler":["than"],"(even though":["they","there"],"(even to":["check"],"(even when":["interpreted"],"(every 100":["years,"],"(except for":["`isQuestion`)","`isQuestion`).","the","the"],"(except in":["circumstances"],"(exported or":["not)."],"(f .":["g)`).","g)"],"(f .)":[".",".",".","."],"(f a":["c,"],"(f r)":["r"],"(f w2":["(f"],"(f w3":["(f"],"(f w4":["…)))))`"],"(f x)":["(repeat","y`","++","++"],"(f x)`.":["Very"],"(f x,":["g"],"(f(a)) {":["return","return"],"(f.g)` rule,":["then"],"(failing on":["non-\"AGCT\""],"(far more":["practical)"],"(fewer maps":["over"],"(filter (==w)":["words)`"],"(filter (`elem`":["\"ACGT\")"],"(filter f":["dna)"],"(filter id)":["="],"(filter isAlpha":["s)","message)"],"(filter isLetter":["xs)\u003c/pre\u003e"],"(filter isLower":["xs)"],"(filterFunction w)`":["without"],"(first (map":["."],"(first 2":["approaches)"],"(first time":["I've"],"(first, rest)":["="],"(first, second))":["="],"(fix (const":["(ap","(ap"],"(fixed in":["iteration"],"(flip $":["M.insertWith","M.insertWith","M.insertWith","M.insertWith","M.insertWith","M.insertWith","M.insertWith'"],"(flip (++)":["\"\\n\")","\"\\n\")"],"(flip (,)":["1)","1)`,","1"],"(flip (,))":["(repeat"],"(flip f)":["...`?"],"(flip insert)":["(singleton"],"(flip isAllergicTo":["i)"],"(flip zip":["(repeat"],"(fmap (+1))":["::"],"(fmap sort)":["."],"(fmap sort)`":["due","since"],"(foldMap f)`":["on"],"(foldl' (.)":["id"],"(foldr in":["particular),"],"(foldr/build fusion)":["and"],"(for a":["simple"],"(for any":["string)"],"(for better":["or"],"(for digits)":["or"],"(for example":["functions"],"(for how":["Haskell's"],"(for implementing":["the"],"(for inserting/looking-up":["keys)"],"(for lists)":["`return`"],"(for me)":["some"],"(for more":["specific"],"(for non-empty":["search"],"(for primes":["\u003e"],"(for some":["reason"],"(for strict":["`Text`"],"(for sufficiently":["large"],"(from -":["1)"],"(from Control.Arrow).":["You"],"(from Data.List)":["or"],"(from Data.List).":["My"],"(from `Control.DeepSeq`)":["in"],"(from `Data.Maybe`)":["to"],"(from editing":["I'd"],"(fromEnum .":["(==x))"],"(fromEnum `comp2`":["(/=))"],"(fromIntegral days)":["febThirteenth"],"(fromJust) .":["replaceThymine"],"(fromListWith (+)":["[('a',","[('a',"],"(fst x)":["(repeat"],"(function application":["binds","has"],"(functions that":["are"],"(g a":["b)"],"(generateName \u003e\u003e=":["atomically"],"(generateName \u003e\u003e=)":["."],"(getting the":["grades"],"(given the":["current","lack"],"(good) remarks,":["I"],"(google haskell":["stream"],"(grade, sort":["pupils))`."],"(guard True":["&gt;&gt;="],"(ha..get it?)":["the"],"(hasLower y)`":["because"],"(have a":["look","look"],"(haven't got":["that"],"(head &&&":["length)"],"(head xs,":["length"],"(hence my":["sorting"],"(hence the":["use"],"(hierarchy of":["choices)."],"(higher precedence":["binds"],"(hint: combine":["`all`"],"(hint: don't":["use"],"(hopefully) much":["faster."],"(http://en.wikibooks.org/wiki/Haskell/More_on_datatypes#Named_Fields_.28Record_Syntax.29) for":["a"],"(http://en.wikipedia.org/wiki/Tail_recursion#Tail_recursion_modulo_cons) and":["I"],"(http://exercism.io/submissions/523d5d6d603aa67ff90000ff) but":["I"],"(http://hackage.haskell.org/package/split-0.1.1/docs/Data-List-Split.html) has":["a"],"(http://pastebin.com/yDQuGRmn) are":["the"],"(http://pastebin.com/yFULJr7S) (sorry":["can't"],"(http://stackoverflow.com/questions/3728709/haskell-pattern-matching-how-to-use-constants-variable) but":["I"],"(http://tutorials.jumpstartlab.com/academy/workshops/scrabble_intermediate.html). I'll":["write"],"(http://www.hasbro.com/scrabble/en_US/scoringRules.cfm) is":["that"],"(http://www.haskell.org/ghc/docs/latest/html/libraries/) has":["a"],"(http://www.haskell.org/haskellwiki/Haskell_programming_tips), which":["would"],"(https://github.com/tibbe/haskell-style-guide) has":["some"],"(i +":["1)"],"(i -":["1)"],"(i did":["in"],"(i know":["that"],"(i,j) -\u003e":["i*m+j."],"(i,j) you":["need"],"(i..e `Bs":["="],"(i.e without":["using"],"(i.e. decimal":["5)"],"(i.e. if":["you'll"],"(i.e. is":["not"],"(i.e. lots":["of"],"(i.e. remove":["the","parameter"],"(i.e. threads":["calling"],"(i.e. use":["the"],"(i.e. without":["any"],"(i.e., 6^2":[")."],"(i.e., ```[(\"word\",":["1)..]```)"],"(i.e., is":["impure)."],"(id &&&":["id)"],"(id &amp;&amp;&amp;":["const","const","pred))","const","sort)`.","const"],"(ie: check":["if"],"(ie: map)":["and"],"(ie: thisIsCamelCase)":["by"],"(if ...`":["works"],"(if even":["x"],"(if such":["a"],"(if they":["are"],"(if x":["==","=="],"(if you":["massage","do","just","choose","want"],"(if you're":["really"],"(ignoring case":["normalization"],"(ignoring the":["call"],"(imo), it":["also"],"(in Data.Map,":["every"],"(in Haskell":["or"],"(in Haskell)":["and"],"(in ML":["you"],"(in Scala...":["it's"],"(in a":["gist","more"],"(in binary),":["100"],"(in combination":["with"],"(in fact":["it"],"(in heroic":["detail!)"],"(in iteration":["1)"],"(in largest":["to"],"(in line":["9)."],"(in my":["opinion).","opinion).","testing"],"(in other":["languages)","words:","words,","cases)"],"(in program":["order)"],"(in some,":["not"],"(in the":["case","`where`","guards","extreme,"],"(in this":["case,","case,","case,","case,","case","case),","case,","case","case)"],"(including `Data.List.Split`)":["are"],"(including myself)":["use"],"(including the":["\"if"],"(increment \"bb\"":["(increment"],"(increment \"cc\"":["..."],"(incrementBalance a":["1)","1)","1)"],"(incrementProc acct)":["\u003e\u003e="],"(incword (incword":["…)))`."],"(incword …)))`.":["You'll"],"(indented 2":["spaces),"],"(infixr 3).":["For"],"(inputMap==) .":["map"],"(insert \"b\"":["(insert"],"(insert \"c\"":["M.empty)))```,"],"(insert .":["head)"],"(insert x)":["mx"],"(insert z)":["x"],"(insertWith (+)":["w2","w3"],"(instead of":["`dropWhile`,","a","cases)"],"(intercalate)` import":["is"],"(internally or":["externally)."],"(into point-free":["notation)"],"(isAllUpper, \"Woah,":["chill"],"(isAllergicTo s)":["allergens`"],"(isAlpha c)":["||","||"],"(isAlpha x)":["||"],"(isAlphaNum, toLower)`,":["etc."],"(isAnagram subject)":["words```","words`"],"(isAnagramOf `on`":["(map"],"(isJibberish str)`":["encodes"],"(isJibbersish str)`":["check"],"(isLetter `implies`":["isLower)"],"(isLetter a)":["||"],"(isLetter a))`":["however"],"(isLetter c)":["||"],"(isLower a)`":["will"],"(isLower, isSpace,":["isUpper)`)."],"(isSilence)? It":["would"],"(isSpace c)`":["is"],"(isSpace x)`":["is"],"(isSuffixOf \"?\")":["msg"],"(isYelling s)`.":["However,"],"(it can":["be"],"(it does":["the"],"(it doesn't":["include"],"(it is":["`String`)."],"(it uses":["Monday"],"(it went":["from"],"(it will,":["in"],"(it worked":["well"],"(it would":["have"],"(it'd just":["have"],"(it's debatable":["if"],"(it's duplicate":["in"],"(it's got":["a"],"(it's not":["shorter"],"(it's really":["not"],"(it's shorter":["to"],"(iterate pred":["to)`"],"(ix 0)":["toUpper`"],"(just `responseFor`":["in"],"(just `wordCount`":["in"],"(just a":["matter"],"(just an":["integer"],"(just import":["from"],"(just line":["25)."],"(just match":["against"],"(just not":["in"],"(just now":["figured"],"(k -\u003e":["a"],"(k+1) (k:acc)\u003c/pre\u003e":["Do"],"(k,v) -\u003e":["v"],"(k,x) =":["insertWithKey"],"(k:acc)\u003c/pre\u003e Do":["you"],"(key, value)":["pairs."],"(kinda ugly":["due"],"(l, n)":["\u003c-"],"(l:ls) =":["l"],"(last str":["=="],"(last x)":["=="],"(latest) Haskell":["Platform."],"(lazy) instead":["of"],"(length .":["filter"],"(length a)":["(length","(length"],"(length b))":["but"],"(length b)`":["but"],"(length digits,":["digits)"],"(length s":["-"],"(length s)```":["is"],"(length str+1":["-"],"(length xs":["-","-"],"(length xs)`?":["If"],"(let's call":["that"],"(liftA2 (&&)":["notDuplicate"],"(liftA2 .":["liftA2"],"(liftM (+1))":["::"],"(like \"CM\")":["too,"],"(like `ap`":["for"],"(like `isShouting`)":["will"],"(like `isSilence`":["and"],"(like allocate":["pipped"],"(like any":["other"],"(like appending":["`[toLower"],"(like it":["does"],"(like the":["above)"],"(like you":["did","would"],"(line 20)":["is"],"(line 7)":["you"],"(linear instead":["of"],"(linear space":["for"],"(linearithmic worst":["case"],"(lines 4":["and"],"(list is":["traversed"],"(look at":["#3)"],"(look last":["test"],"(looking at":["the"],"(lookup k":["m)`."],"(lookup x":["[('T',","[('T',"],"(lowWord, lowSortedWord)":["="],"(lowXs, lowSortedXs)":["="],"(lowered, sort":["lowered)"],"(lx, sort":["lx)`."],"(ma, mb)":["of"],"(mainly because":["I"],"(mainly for":["Sure"],"(make pointless)":["your"],"(map (,0)":["\"AGCT\""],"(map (toUpper)":["msg)"],"(map .":["toLower))`","flip"],"(map f":["xs)`","ns)`","xs)"],"(map g":["xs)`","xs)`"],"(map id":["[1,"],"(map paddedVerse":["xs)`"],"(map toLower":["s2)","s1)","word)`,","s)`","w)`,","le,","$","w)`"],"(map toLower)":["w)`,","--"],"(map toLower)`":["using","since"],"(map toLower)`,":["although"],"(map toUpper":["str)`","str)`.","letter,"],"(map verse":["xs)`"],"(map …)`":["looks"],"(map)``` is":["best"],"(mapFB (:)":["f)","f)"],"(mapFB c":["f)","f)","f)","f)"],"(mapped._2) sort`":["could"],"(maxDecimalValue, maxRomanValue):_":["="],"(maybe with":["a"],"(maybe) made":["my"],"(measuring with":["eyes,"],"(might be":["actually","a"],"(mine doesn't),":["you"],"(mkName \u003e\u003e=":["newMVar)`"],"(mod 100))":["||"],"(mod 4":["&amp;&amp;"],"(modulo unicode,":["which"],"(more like":["the"],"(mostly) and":["clean."],"(msInt \"1":["2\")\u003c/pre\u003e"],"(much easier":["to"],"(much) bigger":["test"],"(my original":["example"],"(my past":["is"],"(n 'div'":["k)\u003c/pre\u003e"],"(n +":["1)"],"(n `div`":["i)"],"(n*6-1, n*6+1,":["but"],"(n-1) m`":["or"],"(n-1)` are":["unnecessary"],"(n-1)` is":["equivalent"],"(n-1)`) and":["you"],"(n-1)`. The":["parentheses"],"(n; k)(n-k)/(k+1)`.":["I"],"(n=='T') &gt;&gt;":["return"],"(named) functions":["to"],"(namely lazy":["evaluation)"],"(newIORef =\u003c\u003c":["randName)"],"(newMVar 0)`":["(usually"],"(newTVar n)":["\u003e\u003e="],"(newTVarIO Nothing)`":["is"],"(newlines), use":["a"],"(newtype will":["not"],"(next n)`":["would."],"(no `atomically`,":["basically)"],"(no `union`":["required)"],"(no characters":["are"],"(no lists":["or","or"],"(no lists)":["as"],"(no need":["for","for","for"],"(no pre-filter":["necessary)"],"(no preprocessing":["is"],"(noLowerCase &amp;&amp;&amp;":["atLeastOneUpperCase)"],"(non-exported functions":["in"],"(non-tail-recursive) recursion":["in"],"(nor is":["there"],"(normalise w))`,":["to"],"(normalize &&&":["id)"],"(normalize is":["a"],"(normalize w)`":["vs."],"(not $":["any"],"(not (isLetter":["c)"],"(not (isLower":["c))"],"(not .":["f)```","isLower)`.","isLower)`","isLower)`","...)","isAlphaNum)`.","isSpace)","f)","isAsciiLower)","isSpace)","isLower)`.","isLower)","isLower)","isSpace)`.","isLower)","isSpace)","isAlphaNum)`.","isLower)","isSpace)","isAlphaNum)","_)`","null","null)","isAlphaNum)","predicate)","isSpace)```","isAlphaNum)","isSpace)","isSpace)`.","f)`","isAlpha)","isAlphaNum)`","null)`","isSpace)`","isSpace)","isAlphaNum)`","isAlphaNum)","null)`","Data.Char.isAlphaNum)","Data.Char.isAlphaNum)","null)","isAlphaNum)","isAlphaNum)`?","isAlphaNum)`"],"(not a":["case"],"(not just":["the"],"(not my":["favorite"],"(not necessarily":["improvements,"],"(not only":["keys,)"],"(not really":["better"],"(not so":["non-constructive)","much"],"(not sure":["we"],"(not that":["its","`unsafePerformIO`"],"(not the":["map"],"(not usually":["an"],"(not when":["account"],"(notP isLetter":["`orP`"],"(note the":["backslashes):","apostrophe)"],"(nothing wrong":["with"],"(null alpha)`":["which"],"(null alphaMessage)`":["(i.e"],"(null input)":["&&"],"(null letters)":["&&"],"(null letters)`,":["where"],"(null letters)`.":["Just"],"(null r)`":["is"],"(null str)":["&&"],"(null str)`":["to"],"(null text)\u003c/code\u003e":["saves"],"(null w)":["$"],"(null word)`":["rather"],"(null xs)":["&amp;&amp;"],"(null xs))```":["?"],"(null xs)`":["because","which","because"],"(number string)`":["or"],"(numbers in":["particular)."],"(numeral, value)":["n"],"(obviously) incomplete;":["on"],"(of 40":["million"],"(often used":["together"],"(on (==)":["normalized"],"(on isAnagramOf":["(map"],"(on the":["right)"],"(on)`, so":["that"],"(once I":["had"],"(once I'll":["complete"],"(once for":["each"],"(once per":["nucleotide)"],"(once started":["in"],"(once) you":["can"],"(one for":["member"],"(one letter)":["`as"],"(one subtract,":["one"],"(only 23":["lines)."],"(only allowing":["valid"],"(only works":["for"],"(only) the":["String?"],"(only) when":["it's"],"(optionally) some":["variable"],"(or *any":["function"],"(or 6n":["+/-"],"(or Control.Applicative).":["`Robot"],"(or Data.IntMap":["or"],"(or `\"\"`":["in"],"(or `.|.`)":["the"],"(or `\u003c$\u003e`)":["to"],"(or `\u003c\u003e`)":["would"],"(or `[from,":["from"],"(or ``":["if"],"(or `all":["isAlpha`)."],"(or `alter`)":["you"],"(or `concatMap`,":["or"],"(or `foldl'`":["combined"],"(or `insertWith`":["if"],"(or `length`":["and"],"(or `randomRIO`)":["is"],"(or `shiftL`":["by"],"(or any":["use"],"(or at":["least","least,"],"(or even":["c","N"],"(or fromListWith,":["which"],"(or his":["thesis)"],"(or if":["you"],"(or is":["there","there"],"(or its":["equivalent)"],"(or just":["function)"],"(or maybe":["more","HLint)"],"(or more":["exactly","exactly,"],"(or more?)":["```Char```s"],"(or perhaps":["`zip"],"(or preferably":["`foldl'`)?"],"(or saves":["me"],"(or should":["I"],"(or something":["similar)"],"(or the":["Applicative","syntax","other"],"(or to":["use"],"(or true)\"":["seems"],"(or use":["qualified","a","`liftM2`","```Maybe``)."],"(or whole":["``sanitized``)"],"(or η-reduction).":["Simply"],"(order of":["fields"],"(other may":["not"],"(other than":["`'?'`,","2,"],"(out of":["memory,"],"(p.s. I":["also"],"(p1p2: \u003cthunk:":["f","f"],"(p1p2:\u003cthunk: f":["p2"],"(p2:\u003cthunk: f":["p2"],"(package) is":["your"],"(particularly in":["`allSilence`)."],"(particularly with":["regard"],"(perhaps even":["crashing,"],"(perhaps my":["solution"],"(perhaps on":["several"],"(personal) interpretation":["of"],"(petty, I":["know),"],"(please correct":["me"],"(possible, but":["unlikely)."],"(possibly in":["`where`"],"(possibly using":["some"],"(potentially causing":["a"],"(preferably; some":["people"],"(prepare s)":["."],"(prepending 2),":["or"],"(printing the":["strings)."],"(probably an":["MVar"],"(pronounced \"x":["prime\")."],"(pure st)`,":["which"],"(put a":["space"],"(putting the":["guards"],"(race conditions)":["this"],"(randomRIO will":["be"],"(randomRIO)`). That":["way"],"(reading down":["the"],"(really Data.Map.Lazy)":["do"],"(regardless of":["the"],"(relative) ease":["of"],"(remove an":["argument"],"(remove space":["before"],"(removing an":["argument"],"(repeat (snd":["x)))`"],"(repeat 0)":["++",")"],"(repeat 0)`":["can"],"(repeat 1)":["is",".","is",")","="],"(repeat 1))":["."],"(repeat 1))\u003c/pre\u003eNotice":["this"],"(repeat 1))`":["rather"],"(repeat 1))`.":["This"],"(repeat 1)`":["is","to","as","would"],"(repeat k)`":["(though"],"(repeat n)`":["could"],"(repetitive) pattern":["matching"],"(replicate 10000000":["1)","1)","1)","1)","1)","1)","1)","1)","1)","1)","1)","1)"],"(replicate 2":["$"],"(replicate 3":["$"],"(replicate dv":["k)`","k)`"],"(replicate x":["numeral),"],"(requires LANGUAGE":["TupleSections"],"(responseFor) where`":["would","-","would"],"(responseFor) where`)":["because"],"(responseFor) where`.":["It's","Looks"],"(responseFor)`. `yell`":["is"],"(return 'M')":["[1..3]`."],"(return .":["Robot)","join","(id"],"(return .)":["."],"(returning the":["correct"],"(reverse [from..to])":["with"],"(reverse s)`":["as"],"(reverse x)":["=="],"(reverseLinkedList $":["fromList"],"(reversed of":["course)."],"(rnf b)":["(rnf"],"(rnf c)`":["should"],"(robot-name seems":["trivial"],"(rows &&&":["cols)"],"(s, 1))`":["with"],"(s,1)) .":["wordsFrom"],"(s,ls) \u003c-":["[(1,\"aeioulnrst\"),...],"],"(same Map":["type,"],"(same data":["type"],"(same for":["87)"],"(same semantics":["for"],"(same thing)":["might"],"(score, chars)":["\u003c-"],"(score, letters)":["{-","\u003c-","\u003c-"],"(scoreLetter, scoreWord)":["where"],"(scoreTable !)":["."],"(second sort)`":["not","is"],"(see GHC's":["RULES"],"(see Iso)":["but"],"(see Iteration":["7)."],"(see `anaGrams":["word`"],"(see `fromEnum`,":["`toEnum`,"],"(see my":["first","next"],"(see previous":["iteration"],"(see the":["avoid"],"(sequence of":["steps)"],"(sharing is":["caring!)."],"(short) M":["and"],"(shorter but":["still"],"(should) have":["a"],"(show k)":["++"],"(show s)`":["since"],"(similarly to":["how"],"(since `^`":["works"],"(since `anagram":["word"],"(since `randomRs`":["is"],"(since in":["this"],"(since it":["can","can","doesn't"],"(since that's":["what"],"(since the":["common","`Key`s"],"(since you":["can't"],"(sing, verse...`":["since"],"(single character,":["followed"],"(singleton x)":["xs"],"(size \u003c=":["length"],"(slightly) more":["idiomatic"],"(snd x)))`":["as"],"(so bitmasks":["would"],"(so called":["eta-reduce)"],"(so long":["as"],"(so might":["be"],"(so you":["have"],"(so, will":["never"],"(so-called eta":["reduction)."],"(some exceptions":["exist"],"(some of":["the"],"(some-expr)` will":["construct"],"(sometimes the":["compiler"],"(somewhat arbitrary)":["spec."],"(somewhat) absorb":["the"],"(sorry I":["have"],"(sorry can't":["figure","figure"],"(sort (toLower'":["x)"],"(sort .":["lower)\u003c/code\u003e.","map","normalize)"],"(sort children)":["cups"],"(sort childs)":["(chunksOf"],"(sort of)":["at"],"(sort w)":["=="],"(specialize) `b`,":["so"],"(splitAt 3)":["."],"(splitDigits !!":["1)","2)"],"(st :":["[])`"],"(stack can":["be"],"(stage of":["the"],"(static parser),":["and"],"(storing the":["thunk"],"(strict). Repeatedly":["using"],"(strict-concurrency doesn't":["seem"],"(stringToPlants .":["concat)`","concat)","concat)"],"(subjectively, in":["my"],"(succ (…":["(succ"],"(succ 1)))`":["instead"],"(such as":["`map`","`$`)","a","Data.Map","a","cons","in","lists),","maps,","Int).","one","an","an","in","numbers).","a"],"(suggested by":["a"],"(suggestions?). I":["don't"],"(sum .)":[".",".",".",".","."],"(sum, foldl',":["etc.)."],"(swap .":["fmap"],"(tail xs)`,":["but"],"(tail-)recursive helper":["function"],"(take 1":["cs)"],"(take 2":["."],"(take n":["x,"],"(take n)`":["in"],"(take size":["a,"],"(term by":["Okasaki),"],"(terminology depends":["on"],"(thanks for":["it)"],"(thanks to":["@diana)"],"(that also":["depend"],"(that have":["other"],"(that is,":["I"],"(that just":["return"],"(that's the":["real","only"],"(the Map":["type","type"],"(the Map)":["of"],"(the STM":["monad)"],"(the `==`":["and"],"(the `qualified`":["prevents"],"(the big":["idea"],"(the built-in":["functions),"],"(the data":["type"],"(the highest":["available"],"(the identity":["test)"],"(the lambda":["is"],"(the last":["expression"],"(the notable":["exception"],"(the null":["case","check"],"(the one":["in"],"(the parentheses":["there"],"(the pattern":["match"],"(the safe":["use"],"(the stdlib":["uses"],"(the syntax":["is"],"(the tokens":["that"],"(the trailing/leading":["backslashes"],"(the type":["is"],"(the values":["will"],"(then you":["have"],"(there are":["no","no","many"],"(there's no":["grey"],"(there's usually":["no"],"(these implicitly":["match"],"(these thunks":["take"],"(they are":["the"],"(they both":["re-export"],"(they just":["look"],"(think `Maybe`)":["and"],"(this can":["be"],"(this code":["as-is","doesn't,"],"(this eta-reduction":["removes"],"(this is":["called","usually"],"(this kind":["of"],"(this makes":["it"],"(this terminology":["comes","comes"],"(this uses":["a"],"(though I":["already","think","think"],"(though I'm":["generally"],"(though both":["versions"],"(though it":["passes"],"(though k":["should"],"(though not":["because"],"(though order":["of"],"(though tests":["do"],"(though that":["is"],"(thought not":["needed"],"(thunks of":["```1"],"(thus there":["should"],"(thymidine `to`":["uracil)"],"(tile frequency":["would"],"(to convert":["to"],"(to me":["it"],"(to me)":["any"],"(to weak-head":["normal"],"(toInteger .":["fromEnum))"],"(toLower x,":["n))"],"(toLower' x":["/="],"(toLower' x)":["==","=="],"(toLower)` limits":["the"],"(toLower, isPunctuation,":["isSymbol)"],"(toRNA) where`":["then"],"(toUpper) msg":["=="],"(toUpper) msg)":["=="],"(toUpper)`. There":["are"],"(toUpper, isSpace)`,":["or"],"(trans .":["toLower)"],"(transcribe .":["toDNA)"],"(traversed .":["_2"],"(tree with":["inserted"],"(trial division,":["but"],"(type sig":["doesn't"],"(types, typeclasses,":["functions"],"(typically the":["first)...\"","first)...\"","first)...\""],"(uncurry (/=))":["[(1,1),","$"],"(uncurry (/=)))":[".)"],"(uncurry (map":["."],"(uncurry enumFromThenTo":["."],"(underspecified) problem":["have"],"(unevaluated computations)":["that"],"(unevaluated value)":["that"],"(unless enemy":["knows"],"(unless it":["got"],"(unless there's":["maybe"],"(unless they":["are","diverged"],"(unless you":["are","explicitly","mean"],"(unless you're":["just"],"(unlines .":["map"],"(unwords .":["words)","map","words)"],"(using Data.Map.Strict),":["which"],"(using ```error```),":["or"],"(using a":["function"],"(using time":["function"],"(usually they're":["not!)"],"(usually written":["infix,"],"(v', t)":["="],"(value-lazy) instead":["of","of","of"],"(value-strict), and":["the"],"(value-strict). For":["better"],"(value:value-based-on-the-1st-neighbours:value-based-on-the-2nd-neigh...) this":["will","will"],"(vec V.!)`?":["Could"],"(vector construction)":["it"],"(verse a)":["++"],"(very mildly)":["hacky"],"(very) long":["time"],"(via `peek`)":["robot-name"],"(void .":["takeMVar)"],"(w -":["1"],"(w, 1))`":["with","as"],"(w, 1))`,":["but"],"(w, 1)`.":["It"],"(w, s')":["="],"(w,1))` with":["`(,1)`."],"(want to":["take"],"(wednesday -":["w)"],"(well in":["all"],"(well, it":["may"],"(what is":["bad"],"(what probably":["doesn't"],"(what you've":["done"],"(whatever it":["was)!"],"(when building":["a"],"(when n":["\u003e="],"(when optimizations":["are"],"(when the":["code","length"],"(when unoptimized),":["but"],"(where available)":["and"],"(where you":["create"],"(whether closed":["before"],"(whether you're":["using"],"(which Haskell":["doesn't"],"(which I":["didn't"],"(which `[n'..n]`":["uses."],"(which also":["eliminates"],"(which always":["returns"],"(which are":["in"],"(which can":["have"],"(which does":["what","more","tend"],"(which doesn't":["include"],"(which fixes":["a"],"(which is":["closely","in","O(n))","O(1))","strict","accumulator","O(n!)","included","basically","included","the","just","an","part","just","like","what","why","the"],"(which isn't":["totally","even"],"(which looks":["ridiculous"],"(which might":["be"],"(which never":["applies"],"(which should":["be"],"(which the":["alphabet"],"(which will":["work"],"(which would":["be","likely"],"(which you":["probably","aren't)."],"(which your":["code"],"(which, I":["believe,"],"(will not":["work"],"(with -Wall)":["is"],"(with 4":["distinct"],"(with `null`)":["can"],"(with a":["constructor"],"(with an":["inlined","`import"],"(with and":["without"],"(with appropriate":["RULES"],"(with fromEnum)":["too,"],"(with help":["from"],"(with locking)!":["So"],"(with memoization).":["As"],"(with module":["name)"],"(with optimization":["enabled,"],"(with optimizations":["on),"],"(with the":["exception"],"(without do":["at"],"(without using":["==)."],"(won't choke":["if"],"(word, 1))`":["can"],"(wordCount) where`.":["This"],"(wordCount)`, `import":["Data.Char"],"(words)` is":["another"],"(words)`). You":["could"],"(worst case)":["and"],"(would be":["a"],"(would like":["`(..)`,"],"(would this":["be"],"(wrong command":["from"],"(x +":["1)"],"(x -":["1)`"],"(x /=":["y)`."],"(x ==":["y)`)."],"(x \\\\":["y)"],"(x)` instead,":["as"],"(x)` or":["`f"],"(x)` would":["of"],"(x)`. In":["other"],"(x, 1)":[":"],"(x, 1))`":["as","with","as","as"],"(x, 1))`,":["either","such"],"(x, 1))`.":["This"],"(x, 1)`":["could","as"],"(x, 1)`.":["All"],"(x, length":["xs)`"],"(x, remain)":["="],"(x, y,":["..)"],"(x, ys)":["="],"(x,1))` if":["you"],"(x,1))``` can":["replace"],"(x,1))``` seems":["to"],"(x,y)) words":["[1,1..]```"],"(x:xs) =":["(if","f","x","foldl'","…","(x,"],"(x:xs) n":["="],"(x:xs), it":["will"],"(x@(digit, numeral):xs)":["k"],"(xs+1 -":["n)`"],"(y \\\\":["x)"],"(y, _)":["-\u003e"],"(yay, my":["first"],"(yet deprecated)":["way"],"(you are":["right,"],"(you can":["construct","search","do"],"(you even":["guessed"],"(you have":["mentioned"],"(you need":["both"],"(you only":["need"],"(you still":["need"],"(you won't":["need"],"(you would":["have","not"],"(your current).":["Not"],"(zip \"AGCT\"":["(repeat"],"(zip str":["(repeat"],"(zip words":["(repeat"],"(zipWith ((fromEnum":[".)"],"(|\u003e) ::":["a"],"(||) ::":["Bool"],"(||) \u003c$\u003e":["g"],"(||) False`":["has"],"(||) g":["e","e"],"(~10 sec":["vs"],"(… (succ":["1)))`"],"(… +":["(1"],"(… insertWith":["(+)"],"(…) (map":["toLower"],"(…) .":["map"],"(…)` either,":["since"],"(…)`. I":["don't"],"(⊥) such":["as"],") )`":["instead"],") .":["group"],") and":["after"],") are":["not"],") around":["the"],") as":["("],") because":["it"],") implementation":["because"],") is":["only"],") st":["x```"],")...)\u003e)` then":["when"],")` instead":["of"],")`, most":["Haskell"],"* \"1\"":["="],"* \"11\"":["="],"* \"111\"":["="],"* (0":["+","+"],"* (2":["*"],"* (a)":["`tryTakeMVar","`putMVar"],"* (b)":["`tryTakeMVar","`putMVar"],"* (t":["planet)"],"* 1":["+"],"* 10":["="],"* 10^0)":["binary"],"* 10^1":["+"],"* 10^2":["+"],"* 15485867":["which"],"* 15485867`":["seems"],"* 2":["+","+1)"],"* 2)":["n"],"* 2^0).":["Furthermore"],"* 2^1":["+"],"* 2^2":["+"],"* 3":["+"],"* 4":["+"],"* 5":["+"],"* 6":["+"],"* 7":["+","+"],"* 8":["+"],"* 9":["+"],"* Add":["the","type","type","this"],"* All":["character"],"* Also,":["you"],"* Calculate":["the","the"],"* Checking":["whether"],"* Click":["http://hackage.haskell.org/package/base-4.6.0.1/docs/Prelude.html","on"],"* Comments":["are"],"* Consider":["using"],"* Data.Char":["exports"],"* Data.Map":["is"],"* Depends":["on"],"* Error":["Driven"],"* Final":["test"],"* For":["the","readability"],"* Get":["the"],"* Go":["to"],"* Google":["Search"],"* Have":["you"],"* I":["don't","think","like","agree","first","like","thought","think"],"* If":["you","there","there","uppercase"],"* Is":["there"],"* It":["seems","must","has","does"],"* It's":["better","generally","considered"],"* Limit":["exports","imports","exports","imports"],"* MUST":["be"],"* Maybe":["use"],"* Nice":["simple,"],"* Put":["the"],"* Rather":["than"],"* Same":["goes"],"* Search":["for"],"* Shrink":["the"],"* Technically,":["the"],"* The":["name","`Data.Char`","code","first"],"* Then":["sort"],"* There":["is","are"],"* Try":["to"],"* Using":["`Data.Map`","an","guards"],"* When":["robots"],"* Would":["it"],"* You":["can","can","might"],"* Your":["module"],"* `Am":["\u003c-","\u003c-","\u003c-"],"* `As":["=","+=","=","+=","=","+="],"* `Bs":["=","+=","=","+=","=","+="],"* `M":["\u003c-","\u003c-","\u003c-","\u003c-","\u003c-","\u003c-"],"* `S":["=","=","=","=","=","="],"* `elem`":["is"],"* `foldl`":["in"],"* `foldr`":["is"],"* `isQuestion`":["will"],"* `null":["query`"],"* `seen":["++"],"* acc":["+"],"* add":["1","2"],"* an":["expression"],"* case":["planet"],"* earthYear":["/"],"* how":["to"],"* i":["\u003e"],"* invalid":["digits","digits"],"* log":["n).","n)","n)","n)`"],"* perhaps":["a"],"* put":["M","M"],"* read":["S","S"],"* swapConcat":["looks"],"* take":["M"],"* the":["RequestType"],"* write":["S","S"],"* you":["can","can"],"*** Exception:":["stack","stack","stack","stack","stack","stack","Prelude.undefined"],"**Data.String.Utils** module":["in"],"**Doh**, I":["put"],"**Example:** imagine":["running"],"**Now** it":["is"],"**That said,":["it's"],"**change** the":["order."],"**hate** mixing":["UI"],"**line 13**.":["I"],"**strict** or":["**lazy**?"],"*Alphagram*, cool,":["it's"],"*BankAccount\u003e :p":["b","b","b"],"*BankAccount\u003e Control.Monad.replicateM_":["10000000","10000000","10000000"],"*BankAccount\u003e a":["\u003c-","\u003c-","\u003c-"],"*BankAccount\u003e b":["\u003c-","\u003c-","\u003c-"],"*DNA&gt; :t":["toRNA"],"*DO* repeat":["yourself!"],"*Data.Char*, *any*,":["*all*"],"*Defaulting the":["following"],"*HIGHLY* recommend":["reading"],"*O(n* log":["*n)*,"],"*Scrabble\u003e scoreWord":["\"FOOBAR\"","\"FOOBAR\""],"*String -&gt;":["[String]*"],"*` and":["put"],"*` in":["front"],"*` kind":["of"],"*adds vote":["for"],"*all alpha":["characters"],"*all* and":["*last*."],"*allAlphas* into":["seperate"],"*also* do":["only"],"*always* write":["type"],"*am* thinking":["about"],"*anagramsFor* a":["*str*"],"*and* `insert`?":["`insertWith`"],"*and* making":["a"],"*and* the":["beginning:"],"*any function":["from"],"*any type*":["for"],"*any*, *all*":["and"],"*are* the":["efficient","characters"],"*bad*. Definitely":["makes"],"*canonical* and":["*len*)."],"*do* want":["a"],"*do* want.":["Most"],"*do* work":["on"],"*doh* sorry,":["I"],"*exactly equivalent*":["to"],"*filter*, *map*,":["any"],"*findWithDefault* (or":["something"],"*have* to":["calculate"],"*how* it":["is"],"*if* away":["from"],"*is* a":["\"chill-out\"","space,"],"*is* more":["appropriate?"],"*is* thunks.":["You"],"*isAnagram* before":["the"],"*isAnagram* test":["for?"],"*isAnagram*, what":["does"],"*know* it":["will"],"*last*. The":["basic"],"*len*). That":["way"],"*let* and":["*where*"],"*lot* of":["memory"],"*map*, any":["of"],"*might* be":["an"],"*my* implementation":["any,"],"*n)*, and":["the"],"*n*-tuples where":["n"],"*normalization* function":["which"],"*not* a":["letter","separator"],"*not* return":["the"],"*nucleotideCounts* instead":["of"],"*one* alphabetic":["character.\""],"*one* call":["to"],"*only* CGAT":["-\u003e"],"*out* of":["the"],"*possible* primes,":["just"],"*realy* want":["to"],"*rules* of":["a"],"*seriously* advocating":["the"],"*should* be":["considered"],"*simpler* than":["canonicalizing"],"*something* for":["```translateNucleotide```"],"*something* if":["the"],"*stops evaluating":["the"],"*str* filters":["a"],"*strict* left":["fold"],"*then*, as":["it"],"*think* I":["like"],"*think* the":["indentation"],"*were* going":["to"],"*where* going":["on"],"*would* be":["a"],"+ (0)))`":["and"],"+ (1":["+","+","+","+","+","+","+","+","+"],"+ (1))`":["and"],"+ (bar.baz())`":["(which"],"+ (if":["even"],"+ (…":["+"],"+ ...":["+","+"],"+ 0":["*"],"+ 0*3^2":["+"],"+ 0*3^3":["+"],"+ 0*3^4":["+","+"],"+ 1":["*","+","in","+","+","+","+","+","+","+"],"+ 1)":["+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","-","+","+","+","+","+","+","+","+","+","+","+","n","+","+","+","+","+","+","+","…)","[1,2,3,4]",":","+","+"],"+ 1)))":["]"],"+ 1)]`":["and"],"+ 1)]`.":["This"],"+ 1)`":["instead","in","which","will","take","instead"],"+ 1)`,":["which"],"+ 1)`.":["This"],"+ 1*3^1":["+","+"],"+ 1...,":["etc.)."],"+ 12":["*"],"+ 1`":["=","not","that","then","and","instead","instead","instead","as","which","instead","instead","thunk","instead","instead","instead","doesn't","which","which"],"+ 1`.":["So","The","Needless","Instead"],"+ 1```":["in"],"+ 2":["*"],"+ 2*3^0":["#","#"],"+ 2*3^3":["+","+"],"+ 2*n^3":["-"],"+ 2^(n-1)`.":["I'm"],"+ 2^0":["+"],"+ 2^1":["+","+"],"+ 2^2":["+"],"+ 2^3`":["grains."],"+ 2`.":["Say"],"+ 3":["*"],"+ 4":["*","*","*"],"+ 6":["*","*","*"],"+ 7*k":["\u003e="],"+ 7*k`":["with"],"+ 8":["*"],"+ 9":["*"],"+ IORef":["with","should/could"],"+ `any`":["+","+"],"+ `isLower`.":["Otherwise"],"+ b":["in","+"],"+ b)))":["=="],"+ bar.baz()`.":["For"],"+ bit`.":["It's"],"+ c":["in"],"+ c`":["desugars"],"+ comment":["from"],"+ filter',":["but"],"+ fromEnum":["(x","(a/=b))"],"+ hammingDistance":["as","as"],"+ i)`":["could"],"+ i)`.":["It's"],"+ k":["|"],"+ length":["bs","as","bs","bs"],"+ m":["|"],"+ map.":["Hopefully"],"+ new`":["(lazy)","(strict)."],"+ ord":["'a'```?)"],"+ studentsCount)`).":["I","Is"],"+ wdNum":["else"],"+ x)":["+","+"],"+ x*g^1":["+"],"+ x*g^2":["+"],"+ y)":["+","+","+"],"+ y*g^1":["+"],"+ z":["=","="],"+ z*g^0":["="],"+ …)":["+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"],"+ …))`":["which","which","instead"],"+ …`":["instead"],"+) \u003c$\u003e":["readTVar","readTVar","readTVar"],"+)`. `Maybe`":["values"],"++ \"":["\"","down…\"`)"],"++ \"'\"`":["and"],"++ \",":["\""],"++ \"C\")":["++"],"++ \"M\")":["++","++"],"++ \"\\n\"":["==","|"],"++ \"\\n\")`":["is"],"++ \"\\n\"`":["is","is","as"],"++ \"a\")":["++"],"++ \"b\")":["++"],"++ \"c\")`":["nests"],"++ '\".":["show"],"++ '\\n'":[":"],"++ (b":["++"],"++ (c":["++"],"++ (f":["x)","x)"],"++ (if":["...`"],"++ (verse":["a)"],"++ ..`":["has"],"++ [\"\\n\"]`":["is"],"++ [c]":["++"],"++ [t]`":["and"],"++ [x]":["++"],"++ [x]`":["is"],"++ a1":["++"],"++ actualCounts`":["but"],"++ b":["++","++"],"++ b)":["++"],"++ b`":["always","regardless"],"++ b`,":["in"],"++ b`.":["For"],"++ bar`":["always","no"],"++ bs":["=","="],"++ bs)`.":["An"],"++ c)":["++"],"++ c`":["desugars"],"++ drop":["1"],"++ f":["x","x"],"++ go":["(x:xs)","mappings'"],"++ map":["(,1)"],"++ nucleotide":["++"],"++ pluralizedBeer":["x`"],"++ show":["c`.","x"],"++ toList":["r"],"++ versePartTwo":["i`:"],"++ xs`":["is","is"],"++ you":["would","can"],"++ zip":["strand"],"++ …":["++"],"++) .":["map","concat"],"+++ OK,":["passed"],"++` and":["not"],"++` on":["the"],"++` should":["be"],"+/- 1":["numbers"],"+1 for":["Data.Composition,","efficiency:"],"+1'd this":["submission"],", (\"BCMP\"":[","],", (\"DG\"":[","],", (\"FHVWY\"":[","],", (\"JX\"":[","],", (\"K\"":[","],", (\"QZ\"":[","],", (\"dg\",":["2)"],", (\"fhvwy\",":["4)"],", (1,":["\"I\")"],", (10,":["\"X\"),"],", (5,":["\"V\"),"],", bstLeft":["::","::"],", bstRight":["::","::"],", but":["not"],", cols":["::"],", matrixCols":["::"],", matrixRows":["::"],", next":["::"],", nodeNext":["::","::"],", nodePrev":["::","::"],", testCase":["\"What","\"What","\"What","\"matrix","\"matrix"],", val":["::"],", who":["likes"],", would":["be"],", x":["{-"],",1]`, and":["`sum"],",2 ,5":[",3"],",3 ,9":[",8"],",5 ,1]`,":["and"],",5 ,3":[",9"],",8 ,5":[",1]`,"],",9 ,8":[",5"],"- \":-)":["?\""],"- \"WHAT":["THE"],"- &gt;":["(x,y))"],"- 1":["..","`mod`","..","..","..","..","..",")","..","..","..","..","..",".."],"- 1)":["to`","j`)."],"- 1)`":["into","which"],"- 1)```":["to"],"- 1,":["lowest"],"- 10`.":["You"],"- 1`,":["or"],"- 1`.":["So","Hope"],"- 1`?":[":)","The"],"- 2*n)":["div"],"- 3*n^2":["-"],"- \u003ccode\u003ea":["\\`isGramonymOf\\`"],"- Added":["several","a"],"- Changed":["```intercalate","```catMaybes","```charMap```"],"- Consider":["using"],"- Counting":["from"],"- Factored":["out"],"- Fixed":["the"],"- Forgot":["to"],"- Got":["rid","rid"],"- Holy":["crap,"],"- I":["learned","don't","want","literally","have","have","can","can","would","was","hadn't","was","just","tried","don't","think","can","want","know","like","ended","took","did","need","could","know","think","knew","do","don't","hope","don't","will","hadn't","like","thought","think","like"],"- I'd":["never","actually"],"- I'll":["update","give"],"- I'm":["not","happy","just"],"- IMHO":["`mod`"],"- IO":["based"],"- Improved":["the"],"- Instead":["of"],"- Is":["it"],"- It's":["(slightly)"],"- Made":["School"],"- Make":["weekdays","```Schedule```"],"- Maybe":["`isEmpty`"],"- Output":["a"],"- Redo":["```toDecimal```"],"- Same":["with"],"- Shouldn't":["`bstValue`"],"- Similarly,":["`replicate","I"],"- Since":["`insertWord`"],"- Strings":["are"],"- The":["type","naive"],"- There":["may"],"- Threw":["in"],"- Which":["means"],"- Why":["not"],"- With":["current"],"- You":["don't","could","don't","can"],"- `Control.Concurrent.STM`":["is"],"- `\\_":["i"],"- ```add```":["creates"],"- ```grade```":["has"],"- ```sorted```":["has"],"- `allAlphasAreCaps`":["handles"],"- `classify`":["might"],"- `countWords`":["is"],"- `filter":["isAlpha"],"- `fromEnum`":["will"],"- `insertWith`":["in"],"- `isAlphaNum`":["in"],"- `isShouting`":["could","perhaps."],"- `newtype`":["again"],"- `number`,":["`prettyPrint`"],"- `square":["n`"],"- `toRNA":["::"],"- `uracilToThymidine":["::"],"- `wordsBy`":["in"],"- all":["tests"],"- also":["it","generated","see","see","see"],"- alternatively,":["if"],"- always":["overlook"],"- and":["I'll","one","it"],"- anyone":["tell"],"- are":["maps"],"- arguably":["only"],"- as":["it","I'm","I"],"- at":["the","least","least"],"- both":["structures"],"- but":["not","my","it","it's","I","maybe","in","I","there's","these","that","i've"],"- calling":["tail"],"- can":["you","we"],"- careless":["of"],"- didn't":["get"],"- don't":["know"],"- earlier":["attempts"],"- every":["external"],"- everything":["else"],"- for":["example,","all"],"- forgot":["to"],"- full":["I.e."],"- getC,":["getX"],"- good":["thinking"],"- great":["tip"],"- i":["see"],"- if":["it","I","you","you'd","only","you"],"- in":["this"],"- is":["`last","it","there","this"],"- it":["contains","doesn't","takes","is","just","will","does","is"],"- it's":["a","less"],"- just":["replace","\"responseFor"],"- lines":["of"],"- list":["comprehension"],"- looking":["at"],"- looks":["useful!"],"- many":["of"],"- matching":["against"],"- moved":["```do```s"],"- mutable":["structure"],"- my":["tests","initial"],"- n":["+"],"- n)":["[unfolded","$","...`"],"- n)`":["and"],"- new":["version"],"- nice":["work!"],"- no":["name","more"],"- not":["```Eq```","sure"],"- note":["\"x"],"- now":["your"],"- or":["at","actually"],"- ord":["x`"],"- other":["possible"],"- over":["engineered"],"- s`":["than"],"- second":["p1p2"],"- seeing":["dense"],"- simple":["but"],"- so":["the","doesn't","you"],"- software":["transactional"],"- something":["like"],"- stNum":["+"],"- stNum`":["-"],"- suffers":["from"],"- switched":["`fold`"],"- test":["cases"],"- thanks":["for","Bartavelle..."],"- thanks!":["Looking","That"],"- thanks,":["@zora!"],"- that":["said,","requires","would"],"- that's":["why","where"],"- the":["number","number","\"base","list"],"- then":["you"],"- there":["isn't"],"- this":["makes","can","breaks"],"- though":["I"],"- to":["use","use"],"- unless":["there's"],"- use":["`wordsby`","foldl'","Data.Map.Strict"],"- using":["`Data.Text`","`HashMap`","the"],"- w)":["`mod`"],"- was":["thinking"],"- we":["can't","fold"],"- what":["if","am","am","is"],"- what's":["the"],"- where":["I","I"],"- which":["changes"],"- while":["sometimes"],"- whoa,":["crazytown."],"- whoops,":["just"],"- wish":["it"],"- with":["`mkName"],"- without":["it"],"- x)":["`mod`"],"- y2`":["but"],"- yes,":["if","I"],"- you":["might","could","could","are","would","basically","can"],"-&gt; (+1)`,":["or"],"-&gt; (String":["-&gt;"],"-&gt; ([String]":["-&gt;","-&gt;"],"-&gt; (a":["-&gt;","-&gt;"],"-&gt; (c":["-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;"],"-&gt; (f":["x,"],"-&gt; (grade,":["sort"],"-&gt; (if":["x"],"-&gt; (not":["(isLetter"],"-&gt; (s,":["1))`"],"-&gt; (s,1))":["."],"-&gt; (w,":["1))`"],"-&gt; (w,1))`":["with"],"-&gt; (x,":["1))`,","1))`,","1))","1))`","1))`"],"-&gt; (x,1))```":["seems"],"-&gt; 0.2408467":["Venus"],"-&gt; Bool)":["-&gt;","-&gt;"],"-&gt; Bool`,":["might"],"-&gt; Char`":["function)"],"-&gt; Data.Map.Map":["String"],"-&gt; Double`":["to"],"-&gt; Float":["-&gt;"],"-&gt; Float`.":["Had"],"-&gt; Int.":["Once"],"-&gt; Integer`.":["Is"],"-&gt; Map":["String","String"],"-&gt; Maybe":["Integer`"],"-&gt; Set":["String","String"],"-&gt; String":["-&gt;","-&gt;","-&gt;"],"-&gt; String)`":["constructor"],"-&gt; String`,":["it's"],"-&gt; [String]*":["that"],"-&gt; [[a]]```":["and"],"-&gt; [a]":["-&gt;","-&gt;"],"-&gt; `[(Int,":["[String])]`"],"-&gt; `[(a,":["String)]`"],"-&gt; a":["-&gt;","-&gt;","-&gt;"],"-&gt; a)":["-&gt;","-&gt;","-&gt;","-&gt;"],"-&gt; b":["-&gt;","-&gt;"],"-&gt; b)":["makes","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;"],"-&gt; c":["--","-&gt;"],"-&gt; c)":["-&gt;","-&gt;"],"-&gt; containers-0.5.0.0:Data.Map.Base.Map":["Char"],"-&gt; d":["-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;"],"-&gt; d)":["-&gt;"],"-&gt; etc":["etc,"],"-&gt; f":["x","x"],"-&gt; foldr":["((:)","((:)"],"-&gt; i":["+"],"-&gt; if":["x","x","x"],"-&gt; m":["()`"],"-&gt; maybe":["n"],"-&gt; not":["(isAlpha","(isSpace"],"-&gt; s1'":["=="],"-&gt; toUpper":["char"],"-&gt; x":["=="],"-- $":["pointfree"],"-- (along":["with","with"],"-- 2":[":"],"-- 3":[":"],"-- \u003c$\u003e":["lifts"],"-- =":["liftA2","liftM2"],"-- \u003e":["let","fromListWithKey","fromListWithKey"],"-- Defined":["at","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in"],"-- I":["prefer","think"],"-- In":["phase","phase"],"-- It's":["important","important"],"-- TODO":["how"],"-- The":["rules","\"mapFB\"","rest","rules","\"mapFB\""],"-- This":["handles","same","same","works"],"-- Up":["to","to"],"-- Using":["an"],"-- With":["{-#"],"-- \\xA0":["No-break"],"-- `capitalize`":["makes"],"-- a":["quite"],"-- according":["to"],"-- all":["you"],"-- and":["again","again"],"-- another":["19!"],"-- apply":["monad"],"-- as":["we"],"-- by":["monad"],"-- can't":["derive"],"-- convert":["$"],"-- could":["be"],"-- divMod":["21","7"],"-- do":["you"],"-- drop":["fractional"],"-- e.g.":["append,","append,"],"-- equational":["reasoning"],"-- for":["simple","example"],"-- form,":["hoping","hoping"],"-- fromList":["[","["],"-- in":["the","the"],"-- it":["will"],"-- it's":["taking"],"-- its":["clean,"],"-- math":["rounding"],"-- now":["lets"],"-- of":["as"],"-- once":["any"],"-- one":["19"],"-- or":["|mempty|","equivalently","using"],"-- requires":["{-#"],"-- rewrite":["all","all"],"-- robot":["a"],"-- start":["evaluation"],"-- switch":["on","on"],"-- takes":["a"],"-- thanks!":[":)"],"-- that":["should"],"-- that's":["what"],"-- the":["definition","`Functor`"],"-- there":["are"],"-- these":["two"],"-- they":["sometimes"],"-- thing":["back","back"],"-- this":["is","takes"],"-- to":["upper,","lower"],"-- unType":["::"],"-- w/o":["introduction"],"-- weirdly":["I've"],"-- what's":["a"],"-- which":["is","is"],"-- who":["doesn't"],"-- with":["```Data.Char```,"],"-- you":["probably","could"],"-- you've":["created"],"-- |":["/O(n*log"],"--- account":["is"],"--- incrementBalance":["started","finished"],"--\u003e exactly":["what"],"--verbose 'anyAndAll":["p"],"-1 =":["\"99\""],"-1 or":["+1)."],"-1 special,":["but"],"-1)..` can":["be"],"-1` recursively":["to"],"-2 maps":["to"],"-\u003e \"0\"":["and"],"-\u003e \"CM\"":["++"],"-\u003e \"M\"`":["which"],"-\u003e \"Sure\"`":["and"],"-\u003e 'C":[":"],"-\u003e 'C'":[":"],"-\u003e (\"000\",":["\"000\","],"-\u003e ('0',":["'9')"],"-\u003e ('A',":["'Z')"],"-\u003e ((a,":["c)"],"-\u003e (Char,":["Char)`"],"-\u003e (Just":["2"],"-\u003e (String":["-\u003e","-\u003e"],"-\u003e (String,":["String,","String)`"],"-\u003e ([a]":["-\u003e"],"-\u003e ([a],":["[a])`..."],"-\u003e (a":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],"-\u003e (a,":["sort","Int)"],"-\u003e (area_code,":["prefix,"],"-\u003e (b,":["c))`"],"-\u003e (c,":["1)`"],"-\u003e (head":["xs,"],"-\u003e (map":["toLower"],"-\u003e (not":["."],"-\u003e (toLower":["x,"],"-\u003e (w,":["1))`,","1))`","1)`.","1)`."],"-\u003e (word,":["1))`"],"-\u003e (x":["+"],"-\u003e (x,":["1)`.","1)`.)","1))`","1))`.","length","1)`.","1))`","1)`"],"-\u003e (x,1))`":["if"],"-\u003e (x,1))```":["can"],"-\u003e *`":["kind"],"-\u003e ...)":["(False,"],"-\u003e 0,":["Peanuts"],"-\u003e 1,":["…)."],"-\u003e 2":["*"],"-\u003e Bool":["-\u003e","--","-\u003e","--","-\u003e","-\u003e","--","-\u003e","--"],"-\u003e Bool\"":["and"],"-\u003e Bool)":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],"-\u003e Bool)`":["so","and"],"-\u003e Bool`":["or,","which","combinator","combinator","type","so"],"-\u003e Bool`)":["but","i.e.","to"],"-\u003e Bool`).":["So","Either"],"-\u003e Bool`,":["too."],"-\u003e CGAU.":["I"],"-\u003e Char.":["But"],"-\u003e Char`":["be"],"-\u003e Char`.":["This"],"-\u003e Day":["-\u003e"],"-\u003e Either":["String"],"-\u003e Float`":["instead?"],"-\u003e IO":["()","String","()`","()`","()","String","String`.","(Maybe","a`","()","String?"],"-\u003e Int)`":["as"],"-\u003e Int`,":["since"],"-\u003e Integer)]`":["into"],"-\u003e Integer)`":["like"],"-\u003e Integer]`,":["I'm"],"-\u003e Integer`":["here."],"-\u003e Just":["(a","(a","$","$!"],"-\u003e M.Map":["String"],"-\u003e Map":["k","k","a","k","k","k","k","String","Char","String","String","String"],"-\u003e Map.Map":["k"],"-\u003e Map.alter":["incr","updateCount"],"-\u003e Map.findWithDefault":["'?'"],"-\u003e Maybe":["Int`","Base","Base`","(String,","a","Comment","a","a`?","Char`"],"-\u003e Noise`":["function."],"-\u003e School`":["which"],"-\u003e String":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","version","-\u003e","-\u003e","-\u003e","where"],"-\u003e String\u003c/pre\u003emeaning":["it"],"-\u003e String?":["Not"],"-\u003e String`":["and","instead","(and","in","as","so","but"],"-\u003e String`,":["although"],"-\u003e Text":["-\u003e"],"-\u003e Value`":["if"],"-\u003e Violets`":["be"],"-\u003e [":["String"],"-\u003e [(Int,":["String)]"],"-\u003e [(a,":["Int)]`,","Int)]`"],"-\u003e [(k,a)]":["-\u003e","-\u003e"],"-\u003e [Char]`":["or"],"-\u003e [String]":["-\u003e","-\u003e","-\u003e"],"-\u003e [a]":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","--","-\u003e","-\u003e","-\u003e","--"],"-\u003e [a]`":["that"],"-\u003e [b]`":["in"],"-\u003e [f":["x])`"],"-\u003e [k]`":["to"],"-\u003e [x])":["[1,2,3]"],"-\u003e \\anagram":["-\u003e","-\u003e"],"-\u003e `concatMap":["keyify`."],"-\u003e `minimum`)":["etc."],"-\u003e a":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","b","b","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],"-\u003e a)":["-\u003e","-\u003e","-\u003e","-\u003e"],"-\u003e a1":["-\u003e","-\u003e"],"-\u003e a`":["and"],"-\u003e acc":["+"],"-\u003e all":["isSpace","isUpper"],"-\u003e atomically":["(newTVar"],"-\u003e b":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],"-\u003e b)":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],"-\u003e b)`":["will"],"-\u003e c":["--","--"],"-\u003e c)":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],"-\u003e compare":["x"],"-\u003e d)":["-\u003e","-\u003e"],"-\u003e d`.":["In"],"-\u003e elem":["x"],"-\u003e error`":["construct"],"-\u003e f":["b)`.","a","b","a","b","x","a","b","c`","a","b","b","a","b","b","a","b","b","a","a","b","x`","x`","x"],"-\u003e foldr":["(mapFB","(mapFB"],"-\u003e force":["(drive"],"-\u003e fromEnum":["scheduleEnum"],"-\u003e g":["a"],"-\u003e if":["x","c","c","n","n","null","null"],"-\u003e insertWith":["(+)","(+)"],"-\u003e isAllergicTo":["a"],"-\u003e justIf":["(size"],"-\u003e k":["-\u003e","-\u003e","(f"],"-\u003e lastDayOfMonth":["year"],"-\u003e let":["ab"],"-\u003e m":["b)","b","r","b)","b","a`","[a]`","b)","[b]"],"-\u003e ma":["\u003c|\u003e"],"-\u003e mod":["b"],"-\u003e newName)`":["are"],"-\u003e normalize":["x"],"-\u003e not":["(isAlpha","$"],"-\u003e notIdentical":["w'"],"-\u003e nuc`":["which"],"-\u003e rest`":["clause."],"-\u003e return":["(Robot","x","'M'`.","Nothing)`","x","b'`"],"-\u003e s":["\\`isAnagramOf\\`"],"-\u003e snoc).":["I'm"],"-\u003e tryParse":["x"],"-\u003e v":["`seq`"],"-\u003e verse":["n"],"-\u003e x":["/=","+","==","*","*"],"-\u003e x`":["yields"],"-\u003e x`,":["the"],"-\u003e zip":["(fst"],"-\u003e …)`":["(the"],"-\u003e …`":["are"],"-\u003e …`,":["but"],"-\u003e)` if":["we"],"-\u003e` is":["monad"],"-\u003e` then":["indetation"],"-O -c":["-v"],"-O or":["better."],"-O2 -ddump-simpl":["output"],"-O2 of":["course)."],"-Wall --make":["bar.hs"],"-Wall on":["runhaskell","this"],"-Wall will":["give"],"-Wall) is":["going"],"-Wall` and":["run"],"-Wall` or":["add"],"-Werror, to":["see"],"-as it":["will"],"-c -v":["-ddump-simpl"],"-ddump-simpl anagram.hs`":["correctly,"],"-ddump-simpl output":["for"],"-v -ddump-simpl":["anagram.hs`"],"-yes Control.Arrow":["is"],". (\"XC\"++)":[".","."],". (&&)":["=\u003c\u003c"],". ((&&)":[".)",".)",".)",".)"],". (*2)":["$"],". (*2)]":["(digits"],". (+)))":["."],". (+2)":["."],". (,)":["n"],". (.)`":[";)"],". (.)`.":["Then,","The"],". (/=)":["`ap`"],". (/=))":["from"],". (/=))`":["would"],". (/=))`.":["The"],". (/=)`":["(and"],". (:":["[])`","[])`"],". ([('A',0),('C',0),('G',0),('T',0)]":["++)`"],". (`elem`":["\"01\"))"],". (add":["`on`"],". (any":["isAsciiLower)`"],". (atomically":[".)"],". (id":["&amp;&amp;&amp;","&&&"],". (isAnagramOf":["`on`"],". (isLetter":["`implies`"],". (map":["toLower)","(,0)","toLower)"],". (noLowerCase":["&amp;&amp;&amp;"],". (return":[".)"],". (traversed":["."],". (zipWith":["((fromEnum"],". ...)":["...`"],". \u003cthunk:":["f"],". AlphaNum,":["so"],". B.pack`":["in"],". BankAccount":["=\u003c\u003c"],". ByteString.pack)`":["is"],". Complicated":["stuff"],". Data.Char.isAlphaNum)":["\"#test#\"","\"#test#\""],". I":["was"],". M.insertWith":["(++)`.","(++)"],". M.toAscList":["."],". Map.findWithDefault":["Set.empty"],". Map.lookup":["g"],". Map.lookup`":["is"],". Robot)":["ioName"],". _)`":["which"],". _2":["%~","%~"],". any":["isLower`","isLower`,","p`","(not.f)","isLower","isLower`","isLower`.","isLower`","isLower`","isLower`","isLower`","isLower`","isAsciiLower`","(not","p","(_)`","isLower]","isLower","isUpper","isLower","(not"],". any)":["all)))","all)))","all))","all"],". any`":["as","is"],". ap":["((\u003e\u003e)"],". b":["$","$"],". bar`":["feels"],". both":["$"],". cleanUpStr`":["would"],". concat":[".","$"],". concat)":["$"],". concat)`":["seems"],". const":["\"foo\")","\"bar\"))"],". digits":["."],". downcase)":["s1"],". drive)`":["or"],". drop":["(n-1)`","."],". dropWhile":["isSpace`"],". encipher":["."],". even`":["as"],". f":["$","$","p1"],". f\"":["is"],". f)":["[]`)?","[]","xs","x","[]`"],". f)`":["is"],". f)```":["is"],". f1":["$"],". f2":["."],". f`":["is","can"],". filter":["isAlphaNum)`.","isAlpha)","isAlpha`","wordsDifferent`.","id)","(filterFunction","id)","id","(==","(uncurry","id)","((==xn)","(/=x)`","notDublicate`","g`","notDuplicate`","(uncurry","id","..`","pred2`"],". filter`":["because","uses","traverses"],". findWithDefault":["[]"],". find`":["and"],". flip":["zip","mod`","map","($)","M.lookup","((,)"],". fmap":["toLowerStr)`.","repeat`","(+i))`"],". foo`.":["You"],". forkIO":["$"],". fromEnum))":["(+)`"],". fromGregorian":["year"],". fromList":["::","::"],". fst)":["xs","map"],". g":[".","$",".","."],". g)":["xs`"],". g`":["because"],". group":[".",".","."],". group```":["on"],". guard":["."],". h":["$","$","."],". h.":["i`"],". head)":["g"],". head`":["and"],". i":["."],". id`":["is"],". insertWith":["(insert","(+)","(+)"],". insertWith'":["(+)","(+)"],". intersperse":["\""],". isAlpha)":["x"],". isAlphaNum)":["c","s]`","lowerText`","rest","to"],". isAlphaNum)`":["would've","this"],". isAlphaNum)`.":["It","`wordsBy`"],". isAlphaNum)`?":["I've"],". isAlphaNum`":["test"],". isAlphaNum```":["because"],". isAlphaNum```.":["Thanks"],". isAnagram":["."],". isAnagram`":["since"],". isAnagram`,":["and"],". isAsciiLower)":["a`"],". isLogical)":["tri`"],". isLower)":["x`.","message","str)","a","str)"],". isLower)`":["rather","in","instead"],". isLower)`,":["removing"],". isLower)`.":["If","If"],". isLower`":["is"],". isLower`,":["which"],". isLower`.":["Both"],". isSpace)":["x","message`,","x","x`","ws`","x`"],". isSpace)`":["instead"],". isSpace)```":["isn't"],". isSpace`":["that"],". isanagramOf\",":["though"],". j":["."],". join":["(,)"],". last)":["q"],". last`":["but","?"],". letters)`":["should"],". liftA2":["$","$","$","$","$"],". liftA2`":["it","actually","but","will"],". lines":["$"],". lines)":["\"\\xdcML\\xc4\\xdcTS!\""],". lookup`":["rather"],". lower))":["=\u003c\u003c)`"],". lowerCase":["."],". map":["(flip","toLower`","toLower`","toLower`","toLower`","f```","toLower`","toLower`.","filter'","f","stringMap","toLower","toLower`","g","toLower`","toLower)","(,1)","(flip","verse)","verse)","verse)","f","f","(second","toLower`","toLower)`","toLower`","toLower","clean","toLower`","$","toLower)","(\\n","verse`","readNucleotide`.","scoreLetter","(fromEnum","(,1)","keyify`","f`","f`.","toLower`","toLower`","toLower`.","verse","isSpace","(","toLower`","g","(unwords","(unwords","concat`,","g`","(chunksOf","(chunksOf","fromEnum`","fromEnum`","toLower`.","toLower```","toLower)","f```","fromEnum)"],". map`":["and","has","and","can","in","is","feels","is","to","is"],". map`.":["The"],". mfilter":["(=="],". mod":["n`"],". newT*IO`.":["Except"],". newTVar":["\u003e\u003e="],". next)":["n`"],". normalise`":["should"],". normalize":["$"],". normalize)":["x","w`,"],". normalize`":["at"],". nub`":["gets"],". null":["&&&",".","$"],". null)":["v`","a","(all","is"],". null)`":["and","have..."],". null)`,":["you"],". number":["$"],". on":["isAnagramOf"],". or":["$"],". parseNumber`":["because"],". predicate)":["list"],". pure`.":["To"],". readTVar`":["with"],". removeNoAlpha":["$"],". removeNonAlphanumeric`":["would"],". removeSilence":["."],". repeat)":["[1,2,3,4,5]`"],". repeat`":["looks","is"],". replace":[")"],". replaceThymine":["$"],". reverse":["=","==","looks"],". reverse)`.":["Guess,"],". runEitherT":["$"],". runIdentity":["."],". sanitize`":["is","(although"],". sequence":["[anagramForS,","[conditions]`*,"],". show":["==","=="],". sort":["."],". sort`":["with","-\u003e"],". sort```":["is"],". splitAt":["3"],". splitWords":["."],". sqrt`":["could"],". stringMap)`":["or"],". stringMap)```":["works"],". strip`":["just"],". take":["n"],". toList`":["instead"],". toList`,":["as"],". toLower)":["xs"],". toLower))`":["using"],". toLower`,":["but"],". token":["$"],". transpose":["."],". transpose`":["is"],". wordCounters":["."],". words":[".",".",".","."],". words)":[".","."],". wordsBy":["(…)","(not"],". wordsFrom":["."],". words`":["you","or","will"],". writeTVar":["."],". x)":["[]',","[])'"],". zipWith":["((fromEnum","((fromEnum","((fromEnum","((fromEnum","(/=)`","((fromEnum","(/=)`","(/=)"],". zipWithOne":["."],". zip`,":["but"],".) .":["(/=)`","(add","zipWith","(/=))","(/=))","g","revlist","revlist","g","g","zipWith","(/=))","(zipWith","(/=)))","flip","zipWith","(/=))`","zipWith","(/=))","writeTVar","zipWith","g","(&&)","any)","any)","any)","any)","Map.lookup`","drive)`","zipWith","(/=))`","zipWith","(/=))`.","zip`,","any`","zipWith"],".). (/=)`":["however"],".)` is":["for"],".)`. That":["serves"],".-&gt; isUpper`":["is"],".. 'a']`":["is"],".. 'z']`":["is"],".. 0]`":["or"],".. Cats]":["seems"],".. a]`,":["or"],".. a]`.":["The"],".. b]`":["is","given"],".. b]`,":["but"],".. endDay]`":["to"],".. end]`":["is","is"],".. end]`.":["Looks"],".. from]`":["is","is"],".. j]`":["instead","(which"],".. m]`":["that's"],".. m]`.":["See"],".. maxBound":["but"],".. n]`":["is"],".. stopAt]`.":["I'd"],".. t]`.":["Everything"],".. the":["parens"],".. to]":["would've"],".. to]`":["which","is","will"],".. to]`,":["but","`map`"],".. to]`.":["For"],".. tthen":["go"],".. y]":["would"],".. y]`":["to","to","or","for","or"],".. y]`.":["Other"],".. yes,":["@noemi"],"..) as":["M\u003c/code\u003e"],".., b":["="],"... &lt;*&gt;...`":["out"],"... (well":["in"],"... +":["2^(n-1)`.","1```"],"... --":["to","drop"],"... .)`":["is"],"... I":["wanted"],"... M.empty":["...)))```"],"... and":["because"],"... at":["the"],"... in":["c'","a"],"... in```":["but"],"... lazy":["evaluation"],"... let`":["usage"],"... linking":["...","...","..."],"... of`":["and"],"... on":["the"],"... they":["can"],"... weren't":["you"],"... where`":["clauses"],"...) (False,":["0)"],"...) ...`":["if"],"...: go":["i"],"...]` to":["be"],"...]`, but":["this"],"...` (or":["to"],"...` and":["without"],"...` as":["well:"],"...` expression":["has"],"...` if":["you"],"...` pushed":["to"],"...` to":["`(\\b"],"...` under":["the"],"...` works":["just"],"...`? Can":["you"],"...`? I":["wasn't"],"...``` (or":["use"],"...```, why":["not"],"...but why":["reinvent"],"...etc. But":["approaching"],"...so now":["I"],"..] .":["words"],"..]` is":["better","generally"],"..` has":["O(N^2)"],"..` into":["an"],"..` since":["they"],"..y]` if":["you"],".: fmap":["."],".: g":["="],".: join":["(***)`"],".: zipWith":["(/=)`","(/=)"],".^ b":["="],".``` part":["so"],".cabal file":["to"],"/ (":["31557600...`"],"/ (and":["maybe"],"/ 31..600":["*"],"/ 60":["/","/"],"/ Data.Functor":["alias"],"/ `[Char]`":["(Haskell"],"/ `isUpperOrSpecial`":["can"],"/ `toEnum`":["(to"],"/ `toEnum`,":["there's"],"/ `turnRight`.":["If"],"/ `two`":["was"],"/ case":["planet"],"/ clarifications":["of"],"/ functions.":["Kind"],"/ in\"":["approach"],"/ lambdadot":["thing"],"/ no":["more\","],"/ orElse":["was"],"/ otherwise":["case"],"/ strictness":["-"],"/ traversal":["in"],"/ x":["bottle"],"/= \"\"`,":["since"],"/= )":["st"],"/= 0)":["(n"],"/= 0`":["has"],"/= []`":["with"],"/= a":["&&","&&","&&"],"/= anagram'":["&&"],"/= b'":["&&","&&"],"/= b)":["is","+","+"],"/= b)`":["from"],"/= b)`,":["which"],"/= b)`.":["Bool"],"/= b`":["after","is"],"/= is":["the"],"/= lowXs":["&&"],"/= lx":["&&"],"/= ly":["&&"],"/= map":["toLower"],"/= s2`":["should"],"/= toLower'":["b`.","s)"],"/= w'":["&&"],"/= w`":["makes"],"/= word`":["comparison."],"/= x":["&&"],"/= x`":["should"],"/= y":["&&","=","then"],"/= y)`":["is"],"/= y`":["also"],"/=, fromEnum":["and"],"/\u003e Just":["submitted"],"/\u003e... Java":["for"],"/O(n*log n)/.":["Build"],"0 &&":["fromEnum"],"0 (`\\acc":["y"],"0 *":["2^1"],"0 +":["1"],"0 .":["flip"],"0 =":["\"No","i","c","\"no"],"0 ==":["length"],"0 @=?":["toDecimal"],"0 Failures:":["1","0","1","1","0"],"0 and":["n","True","6","`sum`,"],"0 aren't":["disallowed"],"0 as":["just"],"0 case,":["but"],"0 does":["not"],"0 else":["1)","1`","1`"],"0 equal":["sides,"],"0 for":["False,","non","each"],"0 id`":["or"],"0 implies":["`mod`"],"0 in":["`isShout`,"],"0 isn't":["in"],"0 k":["set)"],"0 points,":["although"],"0 that":["would"],"0 whatever`":["is"],"0 would":["be"],"0 xs`":["is"],"0\". I":["think"],"0' that":["handles"],"0) (n":["'div'"],"0) ++":["zip"],"0) --":["2","3","[7]"],"0) .":["mod"],"0) .)":["."],"0) ...```":["(or"],"0) \u003e\u003e=":["return"],"0) toUpper`":["and"],"0), (C,":["0),"],"0), (G,":["0)]`"],"0), (T,":["0),"],"0)]` looks":["much"],"0)` (usually":["written"],"0)` can":["be"],"0)` is":["a","could"],"0)` was":["a"],"0*3^2 +":["1*3^1"],"0*3^3 +":["1*3^1"],"0*3^4 +":["2*3^3","2*3^3"],"0, 1,":["n"],"0, Peanuts":["-\u003e"],"0, or":["last"],"0, otherwise":["it"],"0, row":["!!"],"0, rows":["!!"],"0, so":["we"],"0, we":["switch","switch"],"0, which":["is"],"0. If":["it's"],"0. Most":["people"],"0. This":["seems"],"0..3 is":["First..Fourth"],"0..6 as-is,":["but"],"0..6 to":["1..7"],"0..9 from":["lowest"],"0.004s compiled":["with"],"0.197s on":["my"],"0.2408467 Venus":["-&gt;"],"0.5, replaced":["by"],"00 |":["01"],"000-0000\", but":["obviously"],"01 |":["11"],"0:1:add more":["students"],"0:5:new name":["is"],"0]` or":["to"],"0` (or":["the"],"0` (same":["thing)"],"0` and":["`Just"],"0` because":["it"],"0` but":["then"],"0` case?":["There"],"0` could":["be","be"],"0` has":["to"],"0` instead":["of"],"0` is":["probably","O(n),","a","equivalent"],"0` looks":["at"],"0` separately,":["which"],"0` to":["avoid"],"0` you're":["better"],"0`, but":["now"],"0`, you":["could"],"0`\u003c/pre\u003e and":["then"],"0``` instead":["of"],"0``` to":["achieve"],"1 $":["foldr","foldl'","foldr","foldl'","foldr","foldl'","foldr","foldl'","foldr","foldl'","foldr","foldl'","empty","empty"],"1 &amp;":["3."],"1 (1.0%)":["high","high"],"1 (Map.insertWith":["(+)","(+)"],"1 (i.e.,":["```[(\"word\","],"1 (insertWith":["(+)","(+)"],"1 (repeat":["1)"],"1 (reverse":["x)"],"1 (…":["insertWith"],"1 )":["100"],"1 *":["10^2","2^2","2^0)."],"1 +":["b","12","2^0","2`.","1","1","1...,","1","1","…`","1","..."],"1 .":["reverse","insertWith","insertWith","insertWith'","insertWith'","map"],"1 ..":["to]`).","m]`","end]`","m]`.","to]`","j]`","to]`","y]`","to]`","to]","y]`","b]`"],"1 ..]":["."],"1 ..]`":["is"],"1 =":["[]"],"1 ==":["choose"],"1 \u003e\u003e=":["\\a"],"1 `mod`":["7)```."],"1 and":["Falses","using","0,","0,","2","2,","False","the"],"1 apart,":["and"],"1 as":["a"],"1 by":["implementing"],"1 case":["distinction"],"1 cs)":["++"],"1 else":["0`","0)`","0`,","0`","2)\u003c/pre\u003e`if-then-else`","0`"],"1 empty))))`.":["You"],"1 even":["though"],"1 for":["True","a","my","an"],"1 if":["one"],"1 in":["guard,"],"1 infix,":["but"],"1 is":["inserted,"],"1 line.":["But"],"1 m`,":["if"],"1 map)":["empty"],"1 n`,":["but"],"1 numbers":["for"],"1 or":["inserting"],"1 pass":["is"],"1 point":["letters","in"],"1 still":["apply."],"1 time.":["With"],"1 to":["the","As"],"1 valued":["chars"],"1 with":["a"],"1 x)":["empty"],"1's and":["then"],"1) +":["1`","1)`.","1)`","1)`","1)","1)`","1`","1)","…)","…)","…)","…)","…)","…)","1)]","…)","…)","1)","…)","1)","…)","1)","…)","1)","…)","1)","…)","…)","1)","1)`","1","1)","1","…)","1)","1)","…)"],"1) -":["1`,"],"1) --":["divMod","divMod"],"1) .":["toLower`,","words`","f"],"1) :":["toWeights","acc)"],"1) \u003c**\u003e":["(foldl'"],"1) =":["(...((1)+1)+1)+...1)+1)"],"1) I":["don't"],"1) Is":["that"],"1) can":["you"],"1) is":["clearer","neat."],"1) strand1":["strand2`,"],"1) strand`":["though"],"1) to":["```O(n^2)```,"],"1) to`":["just"],"1) ws`":["if"],"1) |":["x","w","w"],"1) …)":["+"],"1)) .":["f"],"1)) \u003e\u003e=":["id)"],"1)))` instead":["of"],"1))\u003c/pre\u003eNotice this":["also"],"1))` as":["`(,1)`","`(,","`(,","`map"],"1))` can":["be"],"1))` rather":["than"],"1))` with":["`(,1)`.","`(,1)`.","the"],"1))`, but":["that's"],"1))`, either":["is"],"1))`, such":["as"],"1))`. This":["is","is"],"1), (\"DG\",":["2),","2),","2),"],"1), (\"LNRS\",2)]`":["and"],"1), (\"bar\",":["1)]`."],"1), ('b',":["3)","undefined)])","undefined)])"],"1), …],":["char"],"1). There":["are"],"1). bytestring":["uses"],"1). check":["if"],"1). generate":["list"],"1). use":["list","list"],"1)..]```) and":["using"],"1)]` and":["at"],"1)]` will":["have"],"1)]`, the":["second"],"1)]`. This":["isn't","takes"],"1)` and":["you"],"1)` as":["`map","simply"],"1)` but":["that"],"1)` could":["be"],"1)` etc.":["as"],"1)` if":["you","you're","you"],"1)` in":["the"],"1)` instead":["of","of"],"1)` into":["a"],"1)` is":["equivalent","very"],"1)` more":["often"],"1)` or":["using"],"1)` take":["up"],"1)` to":["build"],"1)` which":["obviously","would"],"1)` will":["store"],"1)` with":["`(,1)`."],"1)` would":["be","be","be"],"1)`, although":["that"],"1)`, but":["this"],"1)`, which":["takes"],"1)`. All":["of"],"1)`. It":["would"],"1)`. This":["takes"],"1)``` a":["function"],"1)``` if":["I'm"],"1)``` to":["access"],"1*2^0 =":["1"],"1*3^1 +":["2*3^0","2*3^0"],"1*3^5 +":["0*3^4","0*3^4"],"1, 2,":["n]"],"1, Monday":["it"],"1, Sunday":["="],"1, in":["mine"],"1, lowest":["being"],"1, n":["but"],"1, we":["use","use"],"1, which":["is"],"1- handle":["invalid"],"1- has":["at"],"1-point letters":["in"],"1. Bang":["patterns"],"1. Categorise":["the"],"1. Code":["doesn't"],"1. Create":["a"],"1. First,":["I"],"1. Looks":["good"],"1. Not":["shure"],"1. What":["does"],"1. You":["shadow"],"1. ```sanitizeInput'":["char```"],"1. defining":["showBottles"],"1. use":["lenses"],"1..]... though":["[1,1..]"],"1..]` but":["I"],"1.0e9 might":["be"],"1.127686 s":["(primes/many)"],"1.2.5.1 installed":["from"],"1.254422 us,":["ub"],"1.276473 us,":["lb"],"1.320440 us,":["ci"],"1.321476 us,":["ub"],"1.323841 us,":["lb"],"1.326522 us,":["ci"],"1/2 of":["it,"],"10 $":["repeat","repeat","repeat"],"10 '0'`":["is","would"],"10 (123":["="],"10 (though":["I","I"],"10 =":["uncurry","322"],"10 and":["11","b"],"10 are":["unnecessary."],"10 be":["automatically"],"10 digit":["numbers,","isn't"],"10 element":["list."],"10 elements":["long"],"10 from":["me."],"10 gets":["you"],"10 is":["a"],"10 long.":["Your"],"10 strikes":["me"],"10 to":["get"],"10 works":["as"],"10 would":["be"],"10, but":["looks"],"10, if":["you"],"10, then":["check","it's"],"10-13). Also":["you"],"10. It":["was"],"10. Perhaps":["something"],"10. The":["reason"],"10.07447 us,":["ub"],"10.10659 us,":["lb"],"10.14804 us,":["ci"],"100 (length":["xs)`?"],"100 and":["100","400.","thus"],"100 characters":["in"],"100 for":["a"],"100 is":["a","2^2"],"100 samples":["(3.0%)","(2.0%)","(17.0%)"],"100 years,":["except"],"100% sure":["that","it's","why"],"100) I":["think"],"100)) ||":["mod"],"100)\u003c/pre\u003e and":["then"],"100)` aren't":["strictly"],"100. The":["code"],"1000 eggs,":["400"],"100000 }":["$"],"10000000 (incrementBalance":["a","a","a"],"10000000 --":["takes","this"],"100= 0,":["or"],"100rd Mercury":["birthday..."],"101 (i.e.":["decimal"],"1010 (10),":["just"],"10^0) binary":["numbers"],"10^1 +":["3"],"10^2 +":["2"],"10^9 `div`":["secodsInDay`"],"10` in":["the"],"10` instead":["of"],"10` to":["accomplish"],"10`. You":["could"],"10``` is":["same"],"11 &&":["head","head"],"11 &amp;&amp;":["head"],"11 +":["1."],"11 =":["parseNumber"],"11 Errors:":["0"],"11 Tried:":["11"],"11 and":["14","we"],"11 are":["unnecessary"],"11 digit":["numbers"],"11 digits":["are","such"],"11 digits\"":["test."],"11 elements":["string,"],"11 is":["quite"],"11. Possibly":["even"],"11.27313 ns,":["ub"],"111_bin =":["[1,1,1]"],"11_bin =":["[1,1]"],"12 *":["2"],"12 Errors:":["0"],"12 Tried:":["12"],"12 and":["13"],"12 but":["not"],"12 digits":["to"],"12 doesn't":["seem"],"12, `.`":["has"],"12-13. As":["when"],"12-digit number":["\"111111111111\"."],"12..], k":["\u003c-"],"12..], m":["\u003c-"],"12.91355 ns,":["lb"],"123 \"":["::"],"123*.-123-.--1234\"`. Nice":["usage"],"123. 456.7890\"```,":["but"],"1234 pieces":["of"],"128 :)":["."],"13 (the":["pattern"],"13 could":["just"],"13 of":["_[Learn"],"13 pairs":["here"],"13 to":["be","guarantee"],"13**. I":["will"],"13, and":["Last"],"13, with":["no"],"13-14? I":["couldn't"],"13-15 you":["can"],"13-15. Basically,":["the"],"13. I":["added"],"13.04 desktop":["computer."],"1337 uber":["coder,"],"13`) and":["then"],"13th day":["of"],"13th of":["the"],"14 but":["I"],"14 is":["still"],"14 would":["be"],"14 you":["can"],"15 Errors:":["0","0","0"],"15 Tried:":["15","15","15"],"15 as":["`show`"],"15 letters,":["and"],"15 letters?":["This"],"15 lines":["of"],"15. (Only":["infix"],"15.02281 ns,":["ci"],"151.2879 ns,":["lb"],"152.2779 ns,":["ub"],"15485863 *":["15485867","15485867`"],"15485867 which":["is"],"15485867` seems":["to"],"16 are":["superfluous,"],"16 could":["be"],"16 it":["would"],"16 looks":["like"],"16. (You":["can"],"1600. The":["nested"],"17 lines":["of"],"17 outliers":["among"],"17 unicode":["shout.."],"18 aren't":["necessary."],"18 do":["the"],"18 splitted":["over"],"18 will":["be"],"18. You":["only"],"185.9828 ns,":["lb"],"18bit in":["int,"],"18bits. But":["before"],"19 (from":["editing"],"19 --":["one","another"],"19 I":["think"],"19 by":["writing"],"19 doesn't":["need"],"19 using":["pointfree"],"196.0717 ns,":["ub"],"1972 `Principles":["of"],"1] Compiling":["WordCount","Main","Main","Bob","WordCount"],"1]]`). Sometimes":["it's"],"1]` or":["`[succ,"],"1_bin =":["[1]"],"1` =":["`\\_"],"1` and":["so","`drop","`phrase","`+","`sum"],"1` as":["the"],"1` but":["that's"],"1` check,":["because"],"1` doesn't":["evaluate"],"1` even":["without"],"1` instead":["of","of","of","of","of","of","of","of"],"1` is":["O(n)","equivalent","also","probably","probably"],"1` not":["the"],"1` that":["you"],"1` then":["`((1)"],"1` thunk":["takes"],"1` to":["the"],"1` which":["take","take","takes"],"1` will":["build"],"1` with":["`.|."],"1`) that":["you"],"1`, or":["in"],"1`, which":["you"],"1`. Hope":["that"],"1`. Instead":["of"],"1`. Needless":["to"],"1`. So":["you","the"],"1`. The":["best"],"1`. This":["might"],"1`? The":["latter"],"1`?) I":["dislike"],"1``` in":["the"],"1e9 or":["1.0e9"],"1s together,":["or"],"1s. It's":["of"],"1st iteration.":["I'll"],"1st of":["the"],"1st string":["one"],"1×2¹+1*2^0 =":["2*(1)"],"2 $":["randomRIO","map"],"2 (101":["="],"2 (2.0%)":["high"],"2 (`M":["\u003c-"],"2 (or":["`shiftL`"],"2 *":["acc","(0","(2","10^1"],"2 +":["9"],"2 +1)":["n"],"2 .":["repeat)"],"2 :":["3","divMod"],"2 =":["(21,","(10,"],"2 \u003e\u003e=":["\\b"],"2 ^":["64"],"2 and":["3","3).","this","checking","4?","3),","3).","go","odd"],"2 any/all":["calls"],"2 approaches)":["or"],"2 at":["the"],"2 but":["with"],"2 common":["ways"],"2 conditions":["were"],"2 for":["a","an"],"2 guards":["in"],"2 import":["statements"],"2 in":["`(^"],"2 into":["the"],"2 is":["easier","better"],"2 lines":["were","of"],"2 matrix?":["The"],"2 or":["more","3).","3","4.","4"],"2 outliers":["among"],"2 points":["I"],"2 possible":["variants:"],"2 raised":["to","to","to","to","to","to","to"],"2 redundant":["imports,"],"2 respectively)":["to"],"2 rows":["of"],"2 since":["right"],"2 space,":["however"],"2 spaces":["for","offset,","from","off."],"2 spaces),":["otherwise"],"2 spaces,":["and"],"2 spaces.":["I","You"],"2 spaces?":["This"],"2 to":["Bs"],"2 uses":["the"],"2 x":["4"],"2\" $":["do","do"],"2\")\u003c/pre\u003e Now":["the"],"2) $":["lmap"],"2) @=?":["(rows"],"2) I":["don't"],"2) Is":["there"],"2), (\"BCMP\",":["3),"],"2), (\"b\",":["2),"],"2), (\"c\",":["2)]```?"],"2), or":["only"],"2). It":["worth"],"2). break":["cycle","cycle"],"2). bytestrings":["don't"],"2). call":["`map"],"2)\u003c/pre\u003e`if-then-else` here":["is"],"2)]```? You":["should"],"2)` in":["order"],"2*(1) +":["1=3"],"2*3^0 #":["the","the"],"2*3^3 +":["0*3^3","0*3^2"],"2*n) div":["12`..."],"2*n^3 -":["3*n^2"],"2, 1)":["--"],"2, 3\"`,":["it"],"2, 3?\"":["?"],"2, and":["put","Equilateral"],"2, but":["I"],"2, etc.":["So","The"],"2, it":["will"],"2, it's":["kind"],"2, n]":["on"],"2, no":["even"],"2, or":["better,"],"2- all":["the"],"2- to":["have"],"2-3 checks":["+"],"2-4 comparisons":["and"],"2-4 spaces.":["Also"],"2-space indent":["is","for","is","is","is"],"2-tuple, `(,)":["a"],"2-tuples instead":["of"],"2-tuples you":["should"],"2-tuples you'll":["quickly"],"2-tuples, and":["I"],"2. Consider":["using"],"2. I":["am"],"2. In":["`response`,"],"2. Not":["sure"],"2. Return":["the"],"2. There":["are"],"2. `'?'":["=="],"2. `r`":["isn't"],"2. factor":["out"],"2. let":["c'"],"2. using":["string"],"2. you're":["passing"],"2.429012 s":["(candidates/many)"],"2/3rds this":["size"],"2/4 spaces":["depending"],"20 (incrementProc":["acct)"],"20 pairs.":["Maybe"],"20% less":["time"],"20) is":["unused."],"20-22 are":["doing"],"2008, but":["the"],"2013.2.0.0, so":["unless"],"2013.2.0.0. Generally":["speaking,"],"2014 2":["13"],"204.1705 ns,":["ub"],"2056320 -\u003e":["\"0\""],"21 2":["="],"21 3":["="],"21, 28,":["33,"],"218.3281 ns,":["ci"],"22 with":["`otherwise`."],"220, nothing":["special"],"23 lines).":["It"],"237.6315 ns,":["ci"],"25 comparisons":["to"],"253`, but":["why"],"26 -":["but"],"26 characters":["long."],"26 comparisons":["to","each."],"26 element":["array,"],"26 entries)":["there's"],"26, but":["looking"],"27 lines":["in"],"28 to":["work"],"28, 33,":["38)..."],"283.4461 ns,":["lb"],"28: type":["of"],"29 is":["unnecessary."],"2: you":["get"],"2D matrix":["of"],"2]\u003c/pre\u003e according":["to"],"2]` without":["having"],"2^(n-1)`. I'm":["still"],"2^0 +":["2^1"],"2^0). Furthermore":["consider"],"2^1 +":["2^2","...","1"],"2^2 +":["2^3`","0"],"2^2 and":["also"],"2^3` grains.":["That's"],"2^52 on":["today's"],"2` different":["names,"],"2` it":["is"],"2` was":["called."],"2`. Say":["`start`"],"2nd iteration,":["does","I'm"],"3 \"Pling\"":["`mappend`"],"3 $":["randomRIO","number"],"3 ((\"foo\"++)":["undefined)"],"3 (n*6-1,":["n*6+1,"],"3 (number":["string)`"],"3 *":["10^0)"],"3 +":["8"],"3 .":["number"],"3 3":["4"],"3 4":["without"],"3 :":["[n","divMod"],"3 =":["(","("],"3 and":["`||`","n"],"3 are":["of","6n-1","in","6n+1"],"3 but":["the"],"3 c":["++`"],"3 days":["ago."],"3 element":["list"],"3 it":["will"],"3 lines":["to"],"3 more":["closely"],"3 outliers":["among"],"3 plus":["5"],"3 s`":["in"],"3 times),":["since"],"3 to":["remove"],"3 uses":["a"],"3 you're":["starting","starting"],"3\"`, it":["is"],"3) .":["splitAt"],"3) [(+3),":["(*3),"],"3), (\"FHVWY\",":["4),"],"3), and":["I"],"3), due":["to"],"3), not":["checking"],"3). For":["the"],"3). You":["can"],"3*3*3=27 bits":["that"],"3*n^2 -":["2*n)"],"3, 4]":["digits","digits"],"3, 5":["or"],"3, 5,":["and","and"],"3, but":["then"],"3, so":["the"],"3-4 really":["basic"],"3-6 is":["unnecessary"],"3-tuple instead":["of"],"3-tuple of":["its"],"3. `\"Fine.":["Be"],"3. phrase":["passed"],"3.5, it":["doesn't"],"3/4 functions":["are"],"30 extra":["characters,"],"30 lines":["to"],"3001 =":["go"],"31..600 *":["(t"],"311.6777 ns,":["lb"],"31557600...` for":["a"],"32 @=?":["answer"],"322 comparisons":["just"],"33, 38)...":["if"],"36 (i.e.,":["6^2"],"37-38 lines":["is"],"38 (vector":["construction)"],"38)... if":["I"],"38. The":["misspelling"],"3`), or":["remove"],"3rd condition,":["`last"],"4 &&":["not"],"4 &amp;&amp;":["not","not"],"4 *":["5","6","9"],"4 +":["4"],"4 5":["6"],"4 ==":["0`."],"4 @=?":["answer"],"4 and":["8","everything"],"4 arithmetic":["operations."],"4 case":["first"],"4 distinct":["lines),"],"4 guards":["and"],"4 is":["a"],"4 much":["simpler."],"4 occur":["in"],"4 of":["these"],"4 or":["higher.","a"],"4 passes":["at","over"],"4 space":["from"],"4 spaces":["for","when","from"],"4 spaces.":["Alternatively"],"4 thunks":["it's"],"4 times":["if","(once","to","(once","instead"],"4 times.":["If"],"4 without":["processing"],"4 x":["2"],"4 you":["can"],"4's, and":["it"],"4), (\"K\",":["5),"],"4, 7,":["6,"],"4, as":["5"],"4-spaces rule":["is"],"4. The":["indent"],"4. This":["looks"],"4. Your":["implementation"],"4. using":["`last`"],"40 million":["moves)"],"400 but":["not"],"400 is":["divisible"],"400 then":["it's"],"400 tons":["beef,"],"400 years":["not"],"400 years),":["i.e."],"400 ||":["(divisibleBy"],"400. I":["couldn't"],"41 you":["can"],"42 2":["="],"42 for":["example."],"42 times":["for"],"456.7890\"```, but":["reject"],"456_7890\"` could":["be"],"48 (same":["for"],"48 and":["87"],"48, I":["know"],"4\u003c/pre\u003e works":["fine"],"4? This":["is"],"4` in":["`subscriberLine`"],"4` instead":["of"],"4`, since":["`divisible`"],"4th iteration":["with"],"4x traversal":["issue"],"5 \"Plang\"":["`mappend`"],"5 $":["randomRIO"],"5 +":["4"],"5 6":["as"],"5 by":["10"],"5 cubed?":["`"],"5 elements.":["You"],"5 in":["the"],"5 min":["or"],"5 or":["fewer","7."],"5 plus":["What"],"5 random":["letters"],"5 s`":["was"],"5 separated":["by"],"5 types":["of"],"5 was":["in"],"5) by":["2:"],"5), (\"JX\",":["8),"],"5, and":["7.","7."],"5, to":["concatenate"],"5. Another":["nitpick,"],"50. In":["both"],"501s that":["were"],"505.8640 ns,":["ci"],"509` the":["last"],"53 cubed?\"":["is"],"567.9838 ns,":["ci"],"57.83001 ns,":["ub"],"5th power":["divided","divided"],"5th power?\"":["$"],"6 *":["7","8","10"],"6 +":["6"],"6 as":["illogical"],"6 days":["to","ahead."],"6 of":["the"],"6 spaces":["seems"],"6 that":["you"],"6 times":["-"],"6 was":["really"],"6 weeks":["I'm"],"6 would":["also"],"6 you":["don't"],"6*7 or":["42"],"6, -2":["maps"],"6, 9,":["7,"],"60 /":["60","24)"],"64 -":["1`?"],"64 might":["need"],"64*2 comparsion":["in"],"64-bit Ubuntu":["13.04"],"64-bit platform":["and"],"64-bit platforms":["where"],"64-square checkboard,":["so"],"64\u003c/pre\u003e for":["example?"],"64` gives":["`0`,"],"65 -":["1`."],"66 lines":["of"],"66.00215 ns,":["lb"],"67` But":["`addends`"],"6` for":["explanation."],"6k+1 after":["2"],"6k-1 and":["6k+1"],"6k±1 (along":["with"],"6n +/-":["1"],"6n+1 (for":["primes"],"6n+1 or":["6n-1.","6n+5.","6n-1"],"6n-1 (because":["otherwise"],"6n-1 (but":["that"],"6n-1 or":["6n+1)","6n+1","6n-1"],"7 +":["6","1"],"7 -":["stNum"],"7 3":["="],"7 7":["="],"7 =":["(1,"],"7 ==":["6`."],"7 and":["8"],"7 elements":["long,"],"7 instead":["of"],"7 of":["M."],"7 out":["of"],"7 to":["9."],"7) you":["could"],"7*k \u003e=":["13`\"."],"7*k` with":["the"],"7, 0)":["--"],"7, 2]\u003c/pre\u003e":["according"],"7, 6,":["9,"],"7, 7,":["2]\u003c/pre\u003e"],"7. Why":["bother"],"7.0.4 -":["I'll"],"7.101970 us,":["ub"],"7.146006 us,":["lb"],"7.219372 us,":["ci"],"7.4 is":["pretty"],"7.4, but":["it's"],"7.4.1. The":["thing"],"7.593824 us,":["ub"],"7.6.2 and":["hunit"],"7.6.3: http://www.haskell.org/ghc/":[":?"],"7.640108 us,":["lb"],"7.724408 us,":["ci"],"7.8 is":["already"],"7.968814 us,":["ub"],"7.980707 us,":["lb"],"7.994604 us,":["ci"],"70-80 column":["lines,"],"76 lines":["what"],"79.17362 ns,":["ci"],"7992739871 =":["[7,"],"7` of":["this"],"7` will":["fail"],"8 *":["4"],"8 +":["4"],"8 bit":["restriction"],"8 contiguous":["elements"],"8 doesn't":["need"],"8 gives":["it"],"8 in":["pointfree"],"8 lines":["in"],"8 make":["it"],"8 will":["evaluate"],"8), (\"QZ\",":["10)]"],"8, `show":["c`"],"8,12-14. Can":["you"],"8-14? For":["example"],"8-9 and":["19."],"8. Also":["you"],"80 char":["width,","width"],"80 characters":["per","per"],"80 columns.":["A"],"81.85053 ns,":["ub"],"87 should":["probably"],"9 *":["1","3"],"9 +":["6"],"9 ,2":[",5"],"9 /":["60"],"9 and":["10"],"9 tiles":["so"],"9 to":["generate"],"9 would":["be"],"9's and":["4's,"],"9)` doesn't":["work,"],"9, 4,":["7,"],"9, 7,":["7,"],"9, 9":[",2"],"9, 9,":["4,"],"9, `map":["toLower`"],"9, should":["I"],"9-10 lines":["with"],"9-11 and":["the"],"9. I":["think","suppose"],"98 letter":["tiles."],"98 lookups":["to"],"98's Prelude.":["You're"],"99 bottles":["of"],"99. Maybe":["there"],"99.99% sure":["this"],": \"'\"`":["are"],": \"M\"":["++"],": 'M'":[":"],": (as":["++"],": 3":[":"],": \u003cThunk:":["map"],": \u003cthunk\u003e`":["so"],": About":["`cleanUpInput`"],": [3,":["5"],": [3,5..]`.":["The"],": [])`":["or"],": []`,":["so"],": [n":["+"],": `inSeconds":["*"],": `zipDNA":["="],": acc)":["[]`","[]","[]","[]"],": bs`":["(function"],": divMod":["21","7"],": ds')":["="],": go":["i","cz"],": if":["`str"],": it":["always"],": l":["t"],": map":["f"],": rest)`":["causes"],": s`":["is"],": seen`":["would"],": split":["rest'","rest'`"],": toRNA":["xs","xs","xs"],": toWeights":["xs"],": unlines":["ls"],": xs`.":["I","Doesn't"],": xs```":["form"],":) Even":["simpler"],":) Honestly...":["I"],":) I":["also","feel","expect","searched","think","wondered"],":) I'd":["use"],":) I'll":["try"],":) Is":["Haskell.org"],":) No":["lookup"],":) Only":["possible"],":) See":["[here](http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/base-4.6.0.1/src/GHC-Base.html#map)"],":) Something":["like"],":) The":["rest","best","things"],":) Time":["to"],":) Unless,":["of"],":) Was":["pretty"],":) You":["know","shouldn't","don't"],":) You'd":["use"],":) as":["in"],":) but":["I"],":) still,":["here's"],":) that":["will"],":) this":["exercise"],":) very":["nice."],":) yes":["I"],":) you'll":["need"],":)). Yes,":["there's"],":). Actually":["I"],":). After":["reading"],":). OK":["I've"],":). Really":["it's"],":). The":["solution"],":). i":["learn"],":-( Maybe":["the"],":-) But":["it's","since"],":-) I":["didn't"],":-) I'll":["work"],":-) I'm":["curious"],":-) Though":["some"],":-) Why":["can't"],":-). Swings":["and"],":: (Bounded,":["Enum)"],":: (Char":["-\u003e"],":: (Enum":["a)"],":: (Eq":["a)"],":: (Functor":["f,","f,"],":: (Integral":["b,","b,"],":: (Maybe":["(Node"],":: (Monad":["m,"],":: (String":["-&gt;"],":: (String,":["String)"],":: (a":["-&gt;","-&gt;","-&gt;","-&gt;","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],":: (b":["-&gt;","-\u003e","-\u003e","-\u003e","-\u003e"],":: (c":["-\u003e","-\u003e"],":: (d":["-&gt;"],":: A":["-\u003e","-\u003e"],":: Applicative":["f","f"],":: Array":["Char"],":: Arrow":["a"],":: BankAccount":["-\u003e"],":: Bool":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],":: Category":["-\u003e","-\u003e"],":: Char":["-&gt;","-&gt;","-&gt;","-&gt;","→","→","-\u003e","-\u003e","-\u003e","-\u003e","}","-\u003e","-\u003e"],":: Char`":["to"],":: Char`.":["The"],":: DNA":["→","-\u003e"],":: DNABase":["-\u003e"],":: Double":["-&gt;"],":: Eq":["a"],":: IO":["String","String`","()","()","Robot","Robot","Robot","Char"],":: IORef":["String"],":: Int":["-&gt;","-\u003e","-\u003e","-\u003e"],":: Int))`.":["The"],":: Int`":["words","words"],":: Integer":["-\u003e","-\u003e"],":: Integer)`":["makes"],":: Integral":["a","a","b"],":: M.Map":["Int"],":: MVar":["(Maybe"],":: Map":["Int","Grade","Int"],":: Maybe":["(BST","(BST","(BST","(BST","(BST"],":: Monad":["m"],":: Node":["a"],":: Nucleotide":["-\u003e"],":: Nucleotide\u003c/code\u003e,":["even"],":: Num":["a"],":: Ord":["k","k","a","a","k"],":: Planet":["-&gt;","-\u003e"],":: ReadS":["(Base"],":: Robot":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],":: School":["-\u003e"],":: Show":["a"],":: String":["-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","→","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","-&gt;","→","-&gt;","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","}`","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],":: String}":["does"],":: TMVar":["(Node","(Node","(Node","(Node","(Maybe","(LL","(LL","(LL","(LL"],":: Type":["-\u003e"],":: V.Vector":["a"],":: [(Char,":["Char)]"],":: [(Int,":["String)]"],":: [Char]":["-\u003e"],":: [Char]-\u003e":["[Char]"],":: [DNABase]":["-\u003e"],":: [Nucleotide]":["-\u003e","-\u003e"],":: [String]":["-\u003e","-\u003e","-\u003e","-\u003e"],":: [Vector":["a]","a]"],":: [a]":["-\u003e","-\u003e","-\u003e"],":: a":["-&gt;","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],":: f":["(a"],":: forall":["a.","a."],":: m":["a","a"],":? for":["help"],":D! thank":["you"],":D. but":["there"],":D. thank":["you."],":P That":["looks"],":info in":["GHCI"],":p Maybe":["this"],":p plus":["then"],":type ((+1)":["\u003c$\u003e)"],":type (fmap":["(+1))"],":type (liftM":["(+1))"],":λ\u003e :info":["Functor"],";) A":["proper"],";) And":["I"],";) Function":["application"],";) I'll":["incorporate"],";) I'm":["just"],";) Thanks,":["I'll"],";) Thanks.":["I"],";) using":["`all`"],";-). So,":["given"],"\u003c 3001":["="],"\u003c d*d`,":["because"],"\u003c maxDecimalValue`":["guard"],"\u003c$\u003e (+2)`,":["so"],"\u003c$\u003e (generateName":["\u003e\u003e="],"\u003c$\u003e (mkName":["\u003e\u003e="],"\u003c$\u003e (newIORef":["=\u003c\u003c"],"\u003c$\u003e anagramForS":["\u003c*\u003e"],"\u003c$\u003e as":["it"],"\u003c$\u003e b`.":["I"],"\u003c$\u003e bar`":["is"],"\u003c$\u003e find":["(($"],"\u003c$\u003e from":["Data.Functor"],"\u003c$\u003e g":["\u003c*\u003ee"],"\u003c$\u003e haveUpper":["\u003c*\u003e"],"\u003c$\u003e lifts":["to"],"\u003c$\u003e m1":["\u003c*\u003e"],"\u003c$\u003e m`":["is"],"\u003c$\u003e newMVar":["(Just","0`"],"\u003c$\u003e newTVarIO":["Nothing`"],"\u003c$\u003e readMVar":["m`"],"\u003c$\u003e readTVar":["acct`","acct`","acct`","acct"],"\u003c$\u003e sequence":["[Just"],"\u003c$\u003e) ::":["(Functor"],"\u003c&\u003e (/=)":["where"],"\u003c* in":["rhs.."],"\u003c**\u003e (foldl'":["(.)"],"\u003c*\u003e (+2)`":["not"],"\u003c*\u003e Just":["x`"],"\u003c*\u003e not":["."],"\u003c*\u003e notS`?":["Looks"],"\u003c*\u003ee --":["\u003c$\u003e"],"\u003c- M.toList":["m,"],"\u003c- [":["(1,"],"\u003c- [(\"AEIOULNRST\",":["1),"],"\u003c- [(+1),":["(-1)]`"],"\u003c- [(1,\"aeioulnrst\"),...],":["l\u003c-ls]"],"\u003c- [-1,":["1]]","1]]`)."],"\u003c- [-1,1]]`":["because"],"\u003c- [1..dv],":["c"],"\u003c- [6,":["12..],","12..],"],"\u003c- [6,12..],":["m"],"\u003c- abs,":["a"],"\u003c- as":["]`"],"\u003c- atomically":["$","$","$"],"\u003c- fmap":["(amt","(amt"],"\u003c- func`":["line"],"\u003c- getBalance":["a","acc","a","a"],"\u003c- l,":["Q"],"\u003c- letterValues,":["c"],"\u003c- m,":["isAlpha"],"\u003c- newIORef":["name"],"\u003c- newRobot":["--"],"\u003c- ns]`":["is"],"\u003c- randomName":["\u003e\u003e=","\u003e\u003e="],"\u003c- range":["r]"],"\u003c- replicateM":["n"],"\u003c- resetName":["r"],"\u003c- resetRobot":["x"],"\u003c- robotName":["r","r"],"\u003c- st,":["isAlpha"],"\u003c- strand]`":["is"],"\u003c- table,":["c"],"\u003c- toList":["m,"],"\u003c- wordsBy":["(not"],"\u003c- ws,":["not("],"\u003c- xs]`":["then"],"\u003c-`. To":["quote"],"\u003c/pre\u003e If":["you"],"\u003c0 cases":["should"],"\u003c= 1":["="],"\u003c= length":["a)"],"\u003c= that":["numeral."],"\u003c=\u003e `null":["l`)."],"\u003c\u003e Just":["[2]`"],"\u003c\u003e Nothing`":["then"],"\u003c\u003e b`":["is"],"\u003c\u003e f":["y","x"],"\u003c\u003e ff":["r","l","r","r"],"\u003c\u003e mb`":["is"],"\u003cThunk: map":["f"],"\u003cb\u003e rsslldnphy\u003c/b\u003e:":["Well,"],"\u003cb\u003eetrepum\u003c/b\u003e: Thanks.":["Done."],"\u003ccode\u003e(\"?\" \\`isSuffixOf\\`)\u003c/code\u003e":["is"],"\u003ccode\u003e(==) \\`on\\`":["canonicalize\u003c/code\u003e"],"\u003ccode\u003eMap.fromListWith\u003c/code\u003e blew":["my"],"\u003ccode\u003eString\u003c/code\u003e is":["a","really"],"\u003ccode\u003e[Char]\u003c/code\u003e I'll":["use"],"\u003ccode\u003e[Char]\u003c/code\u003e because":["here"],"\u003ccode\u003ea \\`isGramonymOf\\`":["b\u003c/code\u003e"],"\u003ccode\u003eanagramOf =":["(==)"],"\u003ccode\u003ebreak\u003c/code\u003e. Then":["fortunately"],"\u003ccode\u003ecomplement\u003c/code\u003e is":["specific"],"\u003ccode\u003efrequency w\u003c/code\u003e":["on"],"\u003ccode\u003efromChar\u003c/code\u003e looks":["like"],"\u003ccode\u003egroupBy\u003c/code\u003e groups":["elements"],"\u003ccode\u003eimport qualified":["Data.Map.Strict"],"\u003ccode\u003emap\u003c/code\u003e solution":["over"],"\u003ccode\u003enot (null":["text)\u003c/code\u003e"],"\u003ccode\u003espan\u003c/code\u003e and":["\u003ccode\u003ebreak\u003c/code\u003e."],"\u003ccode\u003etoRNA\u003c/code\u003e and":["not"],"\u003ccode\u003eunwords\u003c/code\u003e. Mind":["showing"],"\u003ccode\u003euracil =":["fromChar"],"\u003ccode\u003ewhere\u003c/code\u003e clauses":["can't"],"\u003ccode\u003ewhere\u003c/code\u003e syntax":["for"],"\u003ccode\u003ewordsBy\u003c/code\u003e it":["looks"],"\u003cfacepalm /\u003e":["Just"],"\u003cgasp /\u003e...":["Java"],"\u003cgasp\u003ethe Java":["world\u003c/gasp\u003e"],"\u003cpre\u003e-- data":["Bool"],"\u003cpre\u003e...f3 .":["f2"],"\u003cpre\u003e400 `elem`":["iterate"],"\u003cpre\u003e9223372036854775808 @=?":["square"],"\u003cpre\u003ePrelude\u003e (++)":["\"ab\""],"\u003cpre\u003eV.map V.head":["zs"],"\u003cpre\u003e[Scalene, Isosceles,":["Equilateral]"],"\u003cpre\u003eaddends 7992739871":["="],"\u003cpre\u003edata Matrix":["a"],"\u003cpre\u003edivisibleBy x":["="],"\u003cpre\u003eevenlyDivisible x":["="],"\u003cpre\u003eimport Data.Time.Calendar":["(Day,"],"\u003cpre\u003eisAsking str":["="],"\u003cpre\u003eisLeapYear year":["="],"\u003cpre\u003eisYell xs":["="],"\u003cpre\u003eisYelling str":["="],"\u003cpre\u003elexeme $":["foldr1"],"\u003cpre\u003enextOdd x":["="],"\u003cpre\u003enucleotideCounts str":["="],"\u003cpre\u003ereducedN =":["until"],"\u003cpre\u003eshow ::":["Show"],"\u003cpre\u003eslices n":["str"],"\u003cpre\u003esplit \"\"":["="],"\u003cpre\u003etestCase \"rows":["&"],"\u003cpre\u003eunfoldr (\\x":["-\u003e"],"\u003cpre\u003ewordCount =":["fromListWith"],"\u003cthunk f":["p2"],"\u003cthunk: f":["p2","p2","p2","p1","p1"],"\u003cthunk\u003e \u003cthunk\u003e`":["so"],"\u003cthunk\u003e` again.":["So"],"\u003cthunk\u003e` so":["we","data"],"\u003cvalue\u003e and":["go"],"\u003cvalue\u003e is":["bigger"],"\u003c|\u003e Just":["(singleton"],"\u003c|\u003e bar`":["is"],"\u003c|\u003e tryParse":["y)"],"\u003c|\u003e y":["=","="],"\u003c||\u003e is":["a"],"= \"Fine.":["Be","Be","Be","Be...\"","Be","Be","Be"],"= \"No":["more"],"= \"Whatever.\"`":["would"],"= \"Woah,":["chill","chill","chill","chill"],"= \"first":["line\\n\\"],"= \"no":["more\""],"= '":["'","'","'"],"= 'U'":[":"],"= 'Z'.":[":D"],"= (":["7,","2,"],"= (\"?\"":["`isSuffixOf`)"],"= (\"invalid":["nucleotide"],"= (&&)":[".","\u003c$\u003e"],"= ('0',":["'9')","'9')","'9')","'9')"],"= ('A',":["'Z')","'Z')","'Z')","'Z')","'Z')"],"= ((==)":["`on`","`on`"],"= ((length":[".","."],"= ((sum":["."],"= ((unlines":[".","."],"= (++":["\"\\n\")"],"= (,)":["a","a"],"= (,1)`":["(at"],"= (.":["unSchool)","pure)","(return"],"= (.)":[".",".",".","."],"= (/=":["s)"],"= (/=)":["string"],"= (1,":["0)"],"= (10,":["1)"],"= (21,":["0)"],"= (\u003cThunk:":["f"],"= (==":["'?')","'?')","'?')"],"= (==)":["string","`on`","\\`on\\`","`Data.Function.on`","`Data.Function.on`"],"= (==nil)`":["with"],"= (M.findWithDefault":["0"],"= (Maybe":["(Node"],"= (WordCount":[".)"],"= (\\a":["b"],"= (\\x":["-\u003e"],"= (_t1::Maybe":["Balance)"],"= (`Set.member`":["Set.fromList"],"= (`elem`":["\",.;$^:!&amp;@%\")","\"ACGTU\")"],"= (`zip`":["repeat"],"= (a,":["f","sort"],"= (any":["isUpper"],"= (concat":["(replicate"],"= (f":[".)",".)",".)",".)","a"],"= (generateName":["\u003e\u003e=)"],"= (if":["x"],"= (last":["str","x)"],"= (length":["."],"= (liftA2":["."],"= (lowered,":["sort"],"= (mod":["4"],"= (n;":["k)(n-k)/(k+1)`."],"= (p1p2:":["\u003cthunk:","\u003cthunk:"],"= (scoreTable":["!)"],"= (show":["k)"],"= (sum":[".)",".)",".)",".)",".)"],"= (toEnum":[".).(/=)`."],"= (uncurry":["(map"],"= (unlines":["."],"= (wednesday":["-"],"= (x,":["1)`","1)"],"= (||)":["\u003c$\u003e"],"= (…)`.":["I"],"= --":["now","and","and","start","as","inner","outer"],"= ..,":["b"],"= ...":["in","in"],"= ...:":["go"],"= ...`":["under","pushed"],"= 0":["and","+"],"= 0`":["looks"],"= 1":["as","*","*"],"= 1*2^0":["="],"= 1,":["Sunday"],"= 10":["and"],"= 100000":["}"],"= 10^9":["`div`"],"= 1×2²+1×2¹+1×2^0":["="],"= 1×2¹+1*2^0":["="],"= 2":["^","*","*"],"= 2*(1)":["+"],"= 2^64-1`":[":)"],"= 2×(1×2+1)+1=":["7"],"= 322":["comparisons"],"= 67`":["But"],"= 8":["will"],"= A":["|","|","{"],"= BankAccount":["{"],"= Bin":["{-#"],"= Bool`.":["I"],"= C":["|","|","|"],"= Data.List.Split.splitPlaces":["...`","...`"],"= Deque":["{"],"= Dna":["Char`"],"= DnaC":["|"],"= Dq":["{"],"= Emphasis":["|","|","|"],"= False":["--","|"],"= False\"":["line"],"= False`":["when","to","for","isn't"],"= False`.":["So"],"= Flase\u003c/pre\u003ebecause":["you"],"= IntMap":["[String]`"],"= Just":["(f","(_t1::Integer)","10000000"],"= Long":["|"],"= M.Map":["Grade","Grade"],"= M.findWithDefault":["(error"],"= M.fromList":["$","[","[('A',0),('C',0),('G',0),('T',0)]"],"= M.fromListWith":["[_","(+)","(+)"],"= M.insert":["k"],"= M.insertWith":["(++)","(++)","(++)"],"= M.map":["sort`"],"= Map.fromListWith":["(+)"],"= Map.unionWith":["(+)"],"= Matrix":["{","{","(Vector","(Vector","Rows"],"= MyState":["Id"],"= N":["(Maybe","(Maybe","(Maybe"],"= Node":["a","(Maybe","{","{","a","{","{","(Maybe"],"= Nothing`":["and"],"= Nothing`.":["So"],"= Nucleotide":["Char`","{","Char"],"= Point":["!Int"],"= RnaC":["|"],"= Robot":["(TVar","(MVar","{","\u003c$\u003e","{name","(","(IORef"],"= S`":["will"],"= Sch":["$","."],"= School":["{",".","{","{","{","{"],"= Set.toList":["."],"= Silence":["|"],"= SnocList":["[a]","[]","(x:xs)"],"= T.last":["s'...`"],"= T.strip":["$"],"= True`":["when","would","and"],"= True`,":["so"],"= Type":["{"],"= TypeConstructor":["Parameters"],"= V.fromList":["[1,3,3,2,...]"],"= WordCount":["("],"= Yelling":["|"],"= [":["(\"AEIOULNRST\",","e"],"= [(\"AEIOULNRST\",":["1),"],"= [(w,":["1)]`"],"= [1,1,1]":["="],"= [1,1]":["="],"= [1]":["="],"= [1]++concatMap":["(...)"],"= [7,":["9,"],"= [C,":["C,"],"= [Char]":["--"],"= [[Char]]":["thing."],"= [c,":["c,"],"= [x]`":["I"],"= [x|":["x"],"= \\b":["-\u003e"],"= \\r":["-\u003e"],"= \\s2":["-&gt;"],"= \\string":["-\u003e"],"= \\word":["-\u003e","-\u003e"],"= \\x":["-&gt;"],"= \\xs":["-\u003e","-\u003e","-\u003e"],"= `(\u003e\u003e=":["f)`"],"= `\\_":["-&gt;"],"= `all":["isSpace"],"= `flip":["(,)"],"= a":["==","(b","+","/=",":","^","^"],"= a`":["as"],"= acc":["`seq`","+"],"= ageOn":["Earth"],"= all":["isSpace","(not","isSpace`.","isSpace",".","isUpper","isSpace","isSpace",".","isSpace","isSpace","isSpace","isSpace","isSpace`.","isSpace","isSpace`","(not","isSpace"],"= allWhitespace":["str`"],"= allWhitespace`":["wich"],"= and":["."],"= any":["f","isUpper","isUpper","p","p","isLetter","isLetter","isAlpha","isAlpha"],"= ap":["(ap"],"= array":["('A',","('A',"],"= atomically":["$"],"= b":["==","`deepseq`"],"= break":["reject","pred"],"= build":["(\\c","(\\c"],"= by":["desugaring","eta","[right"],"= c":[":"],"= caesar":["(+)","(-)"],"= caps":["$","$"],"= case":["planet","sched","filter","(length","nuc","acc","dna","dna"],"= charToRna":["$"],"= concat":["[\"(\","],"= const":["readsBase","0`"],"= digits":["++"],"= display":["."],"= divMod":["n"],"= divisibleBy":["400"],"= do":["acct"],"= dropWhile":["reject","(not"],"= either":["id"],"= endswith":["\"?\""],"= error":["$","\"tree","$","\"error-string\"`,","..."],"= f":["(g","x","x`","x","x","a`","x","p2","p2","p2","p2","p2"],"= f(acc,":["x)"],"= f(x,":["acc)"],"= f*g^3":["+"],"= f,":["otherwise"],"= f`,":["so"],"= ff":["l","l"],"= filter":["((inputMap","(inputMap==)","isAlpha","sortedWordsSame","(not",".",".",".",".",".",".","(not","(not","(not.isSpace)","nonSpace","p`.","go","go","(`isAllergicTo`","(\\x","id`","isLetter","isLetter","isAlpha","isAnagram"],"= first":["succ","pred"],"= first'":[":",":"],"= fix":["(const"],"= flip":["zip","$"],"= floor":["$"],"= fmap":["(\\n","fmap","(insert","(\\x","(\\x"],"= foldMap":["(foldMap","(foldMap","(foldMap"],"= foldl":["collate"],"= foldl'":["(flip","insert'","(\\map"],"= foldlStrict":["ins"],"= foo":["\"Whatever.\""],"= frequencies":["."],"= frequencyTable":["'M.union'"],"= fromChar":["'U'","'U'","'U'","'T'"],"= fromEnum":["(a","(a"],"= fromGregorian":["year","2014"],"= fromIntegral":["(complement","$"],"= fromList":["[(letter,","$","$","$"],"= fromListWith":["(+)","(+)","(+)","(+)","(+)"],"= fromListWithKey":["(\\_"],"= g":["x`","x`","x","a","a","a`","$","."],"= g*(f*g^2":["+"],"= g*(g*(f*g^1":["+"],"= g*(g*(g*(f)":["+"],"= g`.":["In","In","Similarly"],"= getMap":["a"],"= go":[".",".","2","(i","0","cs","baseNums","xs"],"= guard":["(n=='T')","(all"],"= guard0`,":["so"],"= gx":["=="],"= i":[":"],"= id":["(fix","(fix"],"= if":["(not","c","null","isAlphaNum","..","x"],"= insertWithKey":["f"],"= isJust":["."],"= isShouting":["s"],"= iterateUntil":["null"],"= join":["(***)`","Data.Biapplicative.biliftA2`"],"= k`,":["although"],"= l":["++"],"= last":["message","xs","string","s"],"= length":["no",".",".","as","as"],"= let":["w1'","{","lx"],"= liftA2":[".",".","(&&)","(||)"],"= liftM2":["(&&)","(||)"],"= log(\\Prod_{k=1}^n":["k)"],"= lowWord":["/="],"= lower":["s","x"],"= lowerCase":["s"],"= lx":["/="],"= map":["transcribe`.","translate`.","translate`","(id","(flip","(,1)","transcribe","dnaFilter`.","ctoRNA","convert`?","go","toUpper","((,x)","(transcribe","transformThymadine","toLower","toLower","f","\\x","f","translateToRNA","translate`.","(fmap","sanitize","toLower","(\\","proteinToRNA`.","charToRNA`.","(\\c","(thymidine","toUpper","toUpper`.","replace","nucleotideToRNA","toRNAc","toLower","toLower","toLower","toLower","toLower","replace","toLower","(f.g)`","$","...","charToPlant`","(stringToPlants","(stringToPlants","toLower","translateDNA","(,1)","complement`.","toLower","toLower","(trans"],"= mapFB":["c","c"],"= mapM":["randomRIO","randomRIO`.","$","randomRIO","randomRIO"],"= maybe":["x","x","[]"],"= mconcat":["$"],"= messageResponse":["."],"= mkDate":["$"],"= mod":["("],"= modifyMVar":["ba"],"= normalForms":["xs","word"],"= normalize":["x`","w"],"= not":["isLower`",".",".",".",".","$",".",".",".",".","."],"= null":["$",".","voice`"],"= null`":["would"],"= number":["string"],"= numeral":["++"],"= old_value":["+"],"= ord":["x"],"= over":["(ix"],"= parseNumber":["no'"],"= parts":["s"],"= period":["Earth"],"= print":["$","$","$","$"],"= randomRIO":["('A',","$"],"= reDigit":["xs"],"= reLower":["xs"],"= reUpper":["xs"],"= readDNA'":["[]"],"= readMVar":["."],"= readMVar`":["is"],"= replicateM":["n"],"= reverse":["[b..a]","xs","."],"= s":["=~","=~","/"],"= s'":["/="],"= school":["&"],"= scores":["!"],"= second":["succ","pred","(splitAt"],"= seq":["(rnf","f"],"= show":["x"],"= snd":["\u003c$\u003e"],"= somePreevaluate":["[(\"AEIOULNRST\","],"= sort":["(map",".",".","s'","a'",".",".",".","lx","w","ls","lx",".","children","(toLower'","."],"= sortAndLower":["w1"],"= span":["isAlpha"],"= splitAt":["3"],"= splitOn":["\"\\n\""],"= splitPlaces":["[3,","[3,"],"= str":["=="],"= string":["=="],"= sum":["$","$","`comp2`","$",".",".","."],"= tail":["phone`."],"= take":["(length","(length"],"= takeWhile":["(\u003e=from)"],"= tell":["."],"= template_1":["(show"],"= toDecimal'":["bin"],"= toEnum":["$"],"= toList":["l"],"= toLower":["c"],"= toWeekDate":["febThirteenth"],"= trace":["\"calculating\""],"= uncurry":["PhoneNumber","(&amp;&amp;)","(&&)","(***)"],"= unfoldr":["(\\a"],"= unless":["it's"],"= unlines":["$","[firstCouplet,"],"= until":["('mod'"],"= v":["`divMod`"],"= valuePairs`":["and"],"= words":["lowers","."],"= x":[":","/=","`mod`","+"],"= x`":["is"],"= x`,":["`Nothing"],"= xx":["}`"],"= y.":["Now"],"= y`":["the"],"= year":["`mod`","`mod`"],"= zip":["a"],"= zipWith":["(flip"],"= …`":["as","instead","is","and","and"],"=&gt; Bool":["-&gt;","-&gt;"],"=&gt; Eq":["[a]"],"=&gt; Map":["String"],"=&gt; Read":["(Base"],"=&gt; WordCount":["M.empty","$"],"=&gt; [Char]":["-&gt;"],"=&gt; [a]":["-&gt;"],"=&gt; a`":["means"],"=&gt; so":["i'll"],"=&gt; v":["(PrimState"],"=\u003c\u003c case":["…`"],"=\u003c\u003c incrementBalance":["acct"],"=\u003c\u003c newMVar":["0`"],"=\u003c\u003c not":["."],"=\u003c\u003c)` isn't":["much"],"=\u003c\u003c)` outside":["of"],"== \"\"":["="],"== \"\"`":["check","is","part","is","looked","is"],"== \"\"```":["to"],"== \":)":["?\""],"== \"?\"":[")"],"== \"hello,":["world.\""],"== '1'":["&amp;&amp;","in","=","then","="],"== '1')`":[";)"],"== '1'`":["or"],"== '?'":[":","=","="],"== '?')`,":["and"],"== '?'`":["instead","not","to","would","(the","works","(the","means","or","without"],"== '?'`,":["you"],"== 'C'":["||"],"== 'T'":["then","=","=","then","then","then","then","then","then","then","then"],"== 'U'":["="],"== 'a'`":["right"],"== (b:bs)":["="],"== (map":["toUpper","toUpper"],"== (not":["(isLower"],"== 0":["=","=","&&","implies","\u003c/pre\u003e"],"== 0)`":["was"],"== 0,":["otherwise"],"== 0`":["to","because"],"== 0`\u003c/pre\u003e":["and"],"== 1":["+"],"== 10":["="],"== 10`":["instead","in"],"== 11":["=","&&","&&"],"== 1`":["is",":-)","check,","and","is"],"== 1`,":["which"],"== False`":["so"],"== Just":["3`),","1`)"],"== Mercury":["="],"== True`":["for","so"],"== True`,":["which","in"],"== True`.":["If"],"== True```":["is"],"== Venus":["="],"== []":["="],"== []`":["as","\u003c=\u003e","could","anyway."],"== _":["="],"== `'-'`,":["it"],"== `fromMaybe":["f`"],"== all":["f"],"== any":["f"],"== b":["&amp;&amp;","then"],"== b`":["is","case"],"== b`,":["for"],"== c)`":["is"],"== c`":["requiring"],"== candidate`":["would"],"== capStr`.":["The"],"== char)`.":["But"],"== choose":["n"],"== f":["b`,","b`"],"== filter":["isLetter"],"== fromList":["[(\"foobar\",","[(3,"],"== g":["b)","y"],"== id`.":["For"],"== last":["string`"],"== length":["target`","w2`)","(filter"],"== lowerB`":["has"],"== map":["toUpper","toUpper","(f","toUpper"],"== s`":["with","in"],"== set":["\"yxx\"`,"],"== sort":["(map","target`.","s2'\"","y`","x","b'","b'`.","ly","anagram'`","a`","a`","a`","a","a","lb`","w')","(toLower'","(toLower'"],"== sortAndLower":["w2"],"== thymidine":["="],"== unify":["y`,"],"== unlines":["ls`"],"== upCase":["y)`"],"== v`":["shouldn't"],"== wordsBy":["isSpace`.","isSpace`"],"== x)":["then"],"== x)`,":["since"],"== x2,":["y1"],"== x`":["case","comparison."],"== xs`":["with"],"== y":["then","=","then"],"== y2,":["…"],"== y`":["doesn't","to"],"=='G' ||":["'c=='A'"],"==) .":["stringMap)```","stringMap)`","letters)`"],"==)` is":["equivalent"],"==Integer` so":["`secondInDay::Integer`"],"=\u003e (a":["-\u003e","-\u003e","-\u003e"],"=\u003e (k":["-\u003e"],"=\u003e Applicative":["f"],"=\u003e Bool":["-\u003e"],"=\u003e Bounded":["(a,"],"=\u003e Either":["e."],"=\u003e Eq":["(a,"],"=\u003e Fractional":["a"],"=\u003e LinkedList":["a"],"=\u003e Ord":["(a,"],"=\u003e Read":["(a,"],"=\u003e Show":["(a,"],"=\u003e [(k,a)]":["-\u003e"],"=\u003e [a]":["-\u003e","-\u003e","-\u003e"],"=\u003e [a]`":["or"],"=\u003e a":["-\u003e","-\u003e","b","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],"=\u003e a`":["but"],"=\u003e a`.":["In"],"=\u003e b":["-\u003e"],"=\u003e f":["b","b","(a"],"=\u003e m":["r"],"=~ \"^1?(...)(...)(....)$\"":["of"],"\u003e (++)":["(verse"],"\u003e (verse":["a)"],"\u003e -":["Counting"],"\u003e ..":["the"],"\u003e ...":["lazy"],"\u003e 0`":["could","is"],"\u003e 10":["would"],"\u003e 10.":["It"],"\u003e 3":["and","are","are"],"\u003e 3),":["not"],"\u003e 5":["in"],"\u003e Also":["afaiu"],"\u003e Another":["thing"],"\u003e Create":["an"],"\u003e For":["more","more","more"],"\u003e I'm":["not"],"\u003e If":["the","someone"],"\u003e Is":["there","that"],"\u003e Like":["many"],"\u003e On":["line"],"\u003e Selects":["Unicode"],"\u003e The":["parentheses"],"\u003e There":["is"],"\u003e You":["should"],"\u003e `biapp":["f"],"\u003e atomicModifyIORef":["acts"],"\u003e end`":["cases"],"\u003e fromListWithKey":["f","f"],"\u003e let":["f"],"\u003e n":["="],"\u003e something":["++"],"\u003e v":["="],"\u003e verse":["a"],"\u003e wdNum":["then"],"\u003e* `A`":["➜"],"\u003e* `C`":["➜"],"\u003e* `G`":["➜"],"\u003e* `T`":["➜"],"\u003e0. Can't":["say"],"\u003e= 13,":["and"],"\u003e= maxDay":["-"],"\u003e= that":["numeral"],"\u003e= the":["current","last","last","first"],"\u003e\u003e Just":["s`","Silence"],"\u003e\u003e k`":["might"],"\u003e\u003e readTheAcc`.":["I"],"\u003e\u003e= \\":["x"],"\u003e\u003e= \\_":["-\u003e","-\u003e","-\u003e","-\u003e"],"\u003e\u003e= \\a":["-\u003e"],"\u003e\u003e= \\b":["-\u003e"],"\u003e\u003e= \\b'":["-\u003e"],"\u003e\u003e= \\bal":["-\u003e"],"\u003e\u003e= \\x":["-\u003e"],"\u003e\u003e= atomically":[".","."],"\u003e\u003e= const":["\"M\"`"],"\u003e\u003e= f`":["could"],"\u003e\u003e= id)":["=="],"\u003e\u003e= k":["="],"\u003e\u003e= mapM_":["(void"],"\u003e\u003e= newIORef":["\u003e\u003e="],"\u003e\u003e= newIORef```":["instead"],"\u003e\u003e= putMVar":["a"],"\u003e\u003e= return":[".",".","k`","k`","\"M\"`","\"M\"`","k`.","k`",".",".",".","."],"\u003e\u003e= return)":["\"M\"`"],"\u003e\u003e= writeIORef":["nr`."],"\u003e\u003e=) .":["(atomically","(return"],"\u003ebank-race.exe +RTS":["-N8"],"? And":["with"],"? At":["least"],"? In":["this"],"? On":["the"],"? That's":["what"],"? There":["are"],"? This":["is"],"? comp2":["::"],"?\" =":["\"Sure.\"``"],"?\" contains":["no"],"?\" should":["be"],"?\"` doesn't":["exactly"],"?\"` test":["case,"],"?\"` to":["Bob?"],"?] add":["a"],"@ [#haskell](irc://irc.freenode.net/haskell)":["gave"],"@ zhanrnl":["for"],"@\" to":["be"],"@=? (rows":["&&&"],"@=? answer":["\"What","\"What","\"What"],"@=? responseFor":["\"\"","\"","\"\\n\\r","\"\"","\"\\xdcML\\xc4\\xdcTS!\"","\"\\xdcML\\xe4\\xdcTS!\""],"@=? square":["64\u003c/pre\u003e"],"@=? toDecimal":["\"carrot1\""],"@aaliyah suggested":["isLetter."],"@aaliyah's suggestion.":["@aaliyah"],"@abby Thanks.":["Just"],"@abdul: I":["do"],"@adelle? I":["don't"],"@adonis to":["be"],"@adrianna Yeah":["good"],"@ahmed and":["@ahmed!"],"@alba OK...":["I"],"@alba suggested":["the"],"@alessia I":["need","didn't"],"@alfreda thanks":["a"],"@alize That":["seems"],"@alvena Yeah":["I"],"@alyce Thank":["you!"],"@alycia Yep,":["that's"],"@alyson Yep":["that's"],"@amalia Did":["you"],"@anabel No":["worries."],"@anastacio, didn't":["know"],"@andy I":["just"],"@angus That's":["a"],"@anibal and":["@anibal."],"@anibal. I'll":["try"],"@anita maybe":["you"],"@annabel Yeah":["this"],"@ansel Thanks":["for"],"@antonina Then":["the"],"@april Now":["it's"],"@archibald Arrow":["was"],"@archibald actually,":["I"],"@arnold aah":["I'm"],"@arnoldo I":["can"],"@arthur, I":["now"],"@arturo I":["think"],"@arturo That's":["very"],"@assunta! I've":["rewritten"],"@athena, I":["missed"],"@autumn wow":["this"],"@ayden; if":["you"],"@barton I":["tried"],"@baylee and":["@baylee!"],"@bella and":["why"],"@bernie I":["think"],"@berry Sorry":["I"],"@bert Great.":["Thanks"],"@bonita Ok":["I'll"],"@brady Hmmm...":["I"],"@braeden I":["have"],"@braeden for":["the"],"@brandy Do":["you"],"@brandy: it's":["true"],"@braulio already":["said"],"@breana I":["just"],"@breanne Can":["you"],"@brendan, @brendan,":["hlint,"],"@brendan, hlint,":["the"],"@brendon It's":["a"],"@bridget's option":["of"],"@bridie I":["think"],"@brielle. I'm":["on"],"@brody -":["Holy"],"@brooke Hah!":["I"],"@brooks I":["took"],"@burdette, thanks":["for"],"@cara New":["test"],"@carissa Ugh...":["this"],"@carissa You":["guys"],"@carlotta's comment.":["Can't"],"@carmel Didn't":["know"],"@carmela thanks":[":)"],"@carmella adviced":["me"],"@carol's point,":["keeping"],"@carrie A":["set"],"@cary You're":["right."],"@cecelia Oh":["good"],"@cecilia How":["is"],"@chance Makes":["sense"],"@cielo @cielo":["Yeah"],"@cielo Yeah":["it's"],"@citlalli and":["@citlalli!"],"@cleora I":["originally"],"@clifton Actually":["I"],"@consuelo Gah...":["this"],"@cordelia -":["yes,"],"@cordie &":["@cordie"],"@craig Thanks":["for"],"@cristina Good":["to"],"@cristina I":["should"],"@cyrus Thanks.":["I'm"],"@dagmar Yep,":["looks"],"@darian Yeah":["I"],"@darrion Now":["I'm"],"@daryl you're":["right,"],"@dashawn, @dashawn:":["Great"],"@dashawn: Great":["point"],"@dashawn: I":["can't"],"@dashawn: If":["I"],"@dayana Yeah":["I'm"],"@dean I":["like"],"@declan I":["too"],"@deion \u003cfacepalm":["/\u003e"],"@dell Folding":["just"],"@delpha I":["would"],"@delpha —":["pull"],"@deron Do":["you"],"@deshaun that’s":["incredibly"],"@destin Didn't":["think"],"@destiny I'm":["not"],"@diamond. I'll":["give"],"@dianna I":["would"],"@drake Thanks":["again."],"@dulce I'm":["a"],"@dusty than":["a"],"@ed yes,":["I"],"@eddie for":["actually"],"@effie thanks":["for"],"@einar thank":["you"],"@elena, that's":["a"],"@elenor Very":["useful."],"@elisa Thank":["you!"],"@eliza. I":["didn't"],"@elizabeth You're":["right."],"@elliot I":["think"],"@ellsworth re:":["the"],"@elmira I":["have"],"@elody lol...":["apostrophes"],"@elyse haha":["I"],"@emerald By":["importing"],"@enola: Over":["engineered?"],"@enola: Yes,":["good"],"@era ah,":["of"],"@erik Good":["call,"],"@erik tends":["to"],"@erling I":["had"],"@erling. I've":["already"],"@ernestine All":["good"],"@esteban: I":["use"],"@estevan, good":["point!"],"@etha: I":["was"],"@eugenia \\o/":["That's"],"@eunice, finally":["got"],"@everardo and":["@everardo"],"@everardo for":["the"],"@evert Do":["you"],"@faustino I":["didn't"],"@fay Was":["it"],"@felipa, @felipa,":["@felipa."],"@felipa, @felipa.":["A"],"@felipa. A":["lot"],"@flavie! I":["have"],"@flo Neat.":["I'm"],"@florence `map":["id`?"],"@florence's suggestion.":["Couldn't"],"@foster hmm..":["I"],"@franco When":["you"],"@franco very":["true,"],"@frederik Not":["sure"],"@frederik The":["idea"],"@gabriel, I":["try"],"@gabriel, Though":["it"],"@gage I":["intentionally"],"@garret Yeah":["I"],"@geovany you're":["right,"],"@geraldine, I've":["rewritten"],"@gerardo I":["remember"],"@gia Yeah":["moving"],"@gideon: It":["cannot"],"@gina, this":["is"],"@giovani Nice.":["Now"],"@giovanni *doh*":["sorry,"],"@giovanny Thanks,":["I'll"],"@glennie. I've":["rewritten"],"@gloria Yep,":["much"],"@greyson Ok":["I"],"@gudrun because":["that's"],"@gudrun: I":["knew"],"@gunnar. I've":["not"],"@hal, thanks":["so"],"@haylie aah,":["I"],"@heaven Yep,":["thanks."],"@heidi Ok":["I"],"@helene Ugh...":["I"],"@hellen Yep.":["So"],"@herminio Actually":["it"],"@hilario Regarding":["your"],"@hillary, I":["had"],"@hollie aah":["very"],"@howell Good":["to"],"@howell! I've":["tried"],"@isabelle and":["@isabelle!"],"@ivah: that":["does"],"@ivy Thanks":["anyway"],"@jacklyn I'm":["not"],"@jaeden `flip":["zip"],"@jaiden said":["it"],"@jalon huh,":["that's"],"@jannie Is":["there"],"@jarret i":["made"],"@jarrett Weird.":["I"],"@jasen for":["all"],"@javon I'll":["be"],"@jayden, your":["explanation"],"@jaydon for":["suggesting"],"@jaylan: Fair":["point,"],"@jeanette Thanks":["for"],"@jeff Good":["point."],"@jeramy Thanks":["for"],"@jeramy what":["is"],"@jerel Now":["it's"],"@jermain OK...":["this"],"@jeromy not":["sure"],"@jerry -":["if"],"@jesus is":["sure"],"@joany, other":["than"],"@joey I":["meant:"],"@johnnie that":["an"],"@jolie! I":["took"],"@judge the":["`isSilence`"],"@julianne! I've":["changed"],"@julie that":["makes"],"@julius: good":["note,"],"@june [Here]":["(http://pastebin.com/yDQuGRmn)"],"@justus to":["ask"],"@kaley Good":["call."],"@kamille So":["then"],"@kari, Thanks,":["definitely"],"@karl? Just":["vanilla"],"@karolann use":["something"],"@katelin -":["whoops,","looking"],"@keira thanks":["a"],"@kellen Exercism":["showed"],"@kelli, I'd":["skimmed"],"@kelsi! You":["mean"],"@kelton I":["changed"],"@ken do":["you"],"@kenya like":["so?"],"@kevin. It's":["good"],"@kim, Can":["you"],"@king Nice":["one."],"@king that's":["brilliant!"],"@krista last":["time."],"@krista's suggestion.":["On"],"@krystina, I":["find"],"@lamar's suggestion":["first"],"@lauren against":["each"],"@lauren and":["@lauren"],"@laury -":["if"],"@laury, I":["really"],"@lazaro you're":["right,"],"@leif You're":["right,"],"@leila I":["know"],"@lempi, I'll":["try"],"@leonard will":["do,"],"@leonie, which":["should"],"@leonora comes":["through"],"@leopoldo: it":["doesn't"],"@leslie: you":["should"],"@leta. I":["think"],"@libby: what":["is"],"@lindsay. The":["code"],"@loma That":["last"],"@lorena, not":["sure"],"@loyce, thanks":["for"],"@lucinda I":["think"],"@lulu, negative":["numbers"],"@lyric: How":["can"],"@mack is":["just"],"@madyson Yep":["I"],"@makenna I'm":["not"],"@makenzie Yep,":["now"],"@manuel Thanks.":["I"],"@mara's suggested":["simplification"],"@marcelino OK...":["I"],"@margot Thanks.":["So"],"@marguerite Any":["idea"],"@mariane I":["was"],"@marjorie `T`":["is"],"@marlee thank":["you"],"@marquis Isn't":["it"],"@matilde ah":["I"],"@maureen 's":["nitpicking"],"@maxime :)":["Honestly..."],"@maxwell and":["if"],"@maybell: maybe.":["I"],"@maymie interesting,":["is"],"@megane for":["pointing"],"@mekhi Aha!":["Thanks."],"@melany. Just":["need"],"@melissa, here's":["another"],"@miguel I'm":["not"],"@milo Yeah":["it"],"@mitchell That's":["neat,"],"@mohamed I":["think"],"@mona @mona":["I"],"@mona I":["apologize"],"@monserrat Do":["you"],"@mozelle Thanks":["for"],"@natalia sorry":["the"],"@natalie Something":["like"],"@nathen because":["my"],"@nedra, I":["had"],"@nicklaus is":["right"],"@nicolette; I'll":["check"],"@nigel, I":["can't"],"@noemi \"shout":["test\""],"@noemi you":["are"],"@norbert `toUpper":["'-'`"],"@norene Oh":["man..."],"@norval Good":["point."],"@nyah the":["benefit"],"@odie That":["explains"],"@oleta Alternatively":["`Control.Arrow`"],"@ora could":["verify/correct."],"@orland Very":["useful"],"@ottilie, using":["a"],"@peggie, I":["agree"],"@peggie, who":["suggested"],"@perry is":["right"],"@pierce -":["new"],"@presley! It":["was"],"@preston, that":["link"],"@price Hm,":["I"],"@prudence That's":["a"],"@queen I've":["revised"],"@quincy. Leaving":["out"],"@quinn OK...":["I"],"@rachael, thanks":["for"],"@rae Exactly":["the"],"@rae to":["thank"],"@ralph Regarding":["your"],"@randal, that":["feels"],"@randi said":["in"],"@ransom Ah...":["good"],"@ransom means":["is"],"@raphaelle Got":["it."],"@rashawn heh,":["updated"],"@reginald How":["is"],"@rene Oh,":["it"],"@ressie! I've":["modified"],"@rhea `filter":["id`"],"@rhea. I":["don't"],"@rhianna Yep.":["Missed"],"@rhiannon `Text`":["is"],"@robb That's":["pretty"],"@robbie like":["how"],"@roberto I":["wanted"],"@rodger in":["the"],"@rodger. However":["can't"],"@rollin, lol":["I"],"@rollin. I":["tried"],"@rosalind I":["think"],"@rosalinda I":["didn't"],"@rosario thanks":["for"],"@rosendo. I":["had"],"@rosetta I":["hope"],"@rowena Great,":["that"],"@roy, I'm":["curious"],"@rubye I":["picked"],"@russel, my":["mind"],"@rusty I":["couldn't"],"@sabina Thanks":["for"],"@sage, having":["accumulator"],"@salvatore It":["was"],"@sammie I":["don't."],"@sammie, /=":["is"],"@santino already":["made."],"@santino, that":["is"],"@sasha I":["try"],"@shad: Isn't":["that"],"@shyann Thanks":["for"],"@sienna That":["Scalene"],"@skye's best":["efforts"],"@sofia The":["second"],"@sonny or":["maybe"],"@sophie, thanx":["for"],"@spencer about":["using"],"@stacey do":["you"],"@stacey, thanks":["for"],"@stefanie, Thanks":["for"],"@stephon is":["right."],"@sunny These":["look"],"@susan, they":["were"],"@susana's solution":["does"],"@susana's, so":["any"],"@sylvester Note":["that"],"@tamara. I've":["rewritten"],"@tamara: Ah,":["didn't"],"@tania: This":["indeed"],"@taylor How":["many"],"@terry thanks":["a"],"@tess haha":["good"],"@thora Thanks...":["even"],"@tiara I":["see."],"@timmy aah":["another"],"@tommie for":["the"],"@torrance I":["can"],"@trey and":["@trey!"],"@troy about":["new"],"@tyler But":["how"],"@tyra I":["see"],"@una I":["gave"],"@uriah Personal":["preference,"],"@vada Yeah,":["I"],"@valerie Oh":["yeah"],"@veda Clever":["code"],"@verna Do":["you"],"@vernon @vernon":["I"],"@vernon I":["guess"],"@viviane Thanks.":["Didn't"],"@vivien -":["thanks!"],"@walker, needless":["to"],"@weldon :":["About"],"@wendy, I":["tried"],"@wiley (good)":["remarks,"],"@wilford I":["just"],"@wilford That's":["very"],"@wilford there":["is"],"@wilfrid mentioned),":["consider"],"@willy Is":["there"],"@woodrow: mind":["="],"@xavier: for":["the"],"@yasmeen thanks":["for"],"@yasmine's suggestion.":["It"],"@zola I":["selected"],"@zora! What":["do"],"A -\u003e":["Int","Int"],"A =":["A"],"A GHC":["specific"],"A Haskell":["class"],"A Map":["is"],"A QUESTION?\".":["If"],"A `(String,":["String,"],"A `concatMap`":["or"],"A `foldl'`":["version."],"A `where`":["clause"],"A and":["B","B","B"],"A better":["way","way","solution"],"A bit":["less"],"A case":["expression"],"A cleaner":["way"],"A common":["way","convention"],"A confusing":["exercise..."],"A convenient":["way"],"A couple":["things,","things:"],"A definition":["of"],"A different":["name"],"A does,":["each"],"A few":["good,","standard"],"A good":["way","resource","data"],"A great":["reference","explanation"],"A guard":["is"],"A hint":["(mainly"],"A left":["strip"],"A linear":["space"],"A list":["comprehension"],"A little":["googling"],"A lot":["of","nicer"],"A map":["is"],"A more":["performant","robust","serious"],"A much":["better","simpler","more"],"A neat":["trick"],"A newtype":["for"],"A nice":["trick"],"A patterns":["with"],"A point-free":["solution"],"A potential":["consideration"],"A precomputed":["list"],"A proper":["implementation"],"A pure":["version"],"A qualified":["import"],"A quick":["fix"],"A reads":["from"],"A reason":["to","for"],"A related":["suggestion:"],"A reverse":["composition"],"A right":["fold"],"A rule":["of"],"A safer":["option"],"A sensible":["way"],"A set":["actually","doesn't"],"A similar":["strictness"],"A simple":["solution"],"A simpler":["way","way"],"A slicker":["version"],"A slightly":["simpler"],"A solution":["to"],"A somewhat":["nicer"],"A strict":["left","left"],"A suggestion":["on"],"A termination":["was"],"A trick":["for","to","that"],"A type":["spec"],"A very":["similar","nice"],"A way":["to","to","to"],"A word":["is"],"A {":["a::Int,"],"A |":["C","T","U","C"],"A, C,":["G,"],"A, C,G":["or"],"A. Jackson's":["1972"],"A. That's":["the"],"ADT makes":["the"],"ADT to":["represent","define"],"ADT with":["one"],"ADT. (We":["don't"],"AFAIK the":["code"],"AFAIR all":["tries"],"AKA `(dimap":["(*"],"API (`anagramsFor`":["in"],"API (`toRNA`":["in"],"API (just":["`responseFor`"],"API and":["tests","you","all","all","data"],"API as":["vector"],"API defined":["in"],"API explicitly":["for"],"API for":["this.","Map.","this"],"API from":["a","the","a","a","a","your"],"API goes,":["the"],"API here,":["since"],"API is":["niiiiiiiice","defined,","necessary"],"API of":["the","the"],"API should":["be","be"],"API tests":["relies"],"API, `module":["Bob"],"API, and":["forcing"],"API, it's":["typically"],"API, so":["`module"],"API, there's":["no"],"API, which":["in"],"API. Also,":["since"],"API. But":["these"],"API. I":["produced"],"API. I'll":["try"],"API. Specifically:":["`resetName`"],"API. There's":["no"],"API. This":["can"],"ASAP and":["where"],"ASCII inputs":["when"],"ASCII, but":["I'm"],"ASCII? `isLower`":["works"],"ASM and":["Core"],"A` for":["using"],"A` in":["`toChar`,"],"About `::":["[m"],"About `cleanUpInput`":["you"],"About matrix,":["you"],"About simplicity,":["you"],"About task:":["I'm"],"About the":["second","unused"],"About transactions":["-"],"About try/catch":["you"],"About using":["`newtype`"],"About writing":["isShouting"],"Above pragma":["makes"],"Absolutely correct":["(at"],"Absolutely feel":["free"],"Absolutely no":["good"],"Absolutely. Since":["Functor"],"According to":["their","you"],"Accroding to":["tests,"],"Ace, thanks.":["I"],"Actually I":["was","think"],"Actually I'm":["slightly"],"Actually i":["didn't"],"Actually it":["looks","wasn't"],"Actually it's":["better"],"Actually maybe":["it's"],"Actually there":["seems"],"Actually wanted":["to"],"Actually, isAlphaNum":["does"],"Actually, looking":["at"],"Actually, try":["it"],"Actually, you":["could"],"Adam Savage:":["\"now"],"Adapted to":["the"],"Add the":["complete"],"Add this":["number"],"Add type":["signature","signature"],"Added a":["few"],"Added an":["intermediate"],"Added pullrequest":[";)"],"Added several":["explicit"],"Added the":["type"],"Adding an":["unused"],"Adding integers":["should"],"Adding it":["to"],"Adding more":["cases"],"Additionally it's":["clearer"],"Additionally, Haskell":["has"],"Additionally, can":["you"],"Additionally, consider":["the"],"Additionally, remember":["that"],"Additionally, since":["the"],"Additionally, you":["can"],"Addressed both":["in"],"Afaiu it":["may"],"After all,":["I"],"After an":["unexpected"],"After going":["back"],"After reading":["the"],"After submitting":["this"],"After that":["I"],"After that,":["looking"],"Again, not":["much"],"Again, strings":["were"],"Again, thank":["you."],"Aggression |":["Question"],"Agree on":["the"],"Agree that":["named"],"Agree with":["@troy","the","the"],"Agreed with":["the"],"Agreed! Those":["changes"],"Agreed, it":["doesn't"],"Agreed. I":["guess","liked"],"Ah !":["this"],"Ah I":["always","see."],"Ah nevermind,":["I"],"Ah nice!":["This"],"Ah of":["course."],"Ah right,":["I","forgot"],"Ah thanks":["I've"],"Ah thanks,":["it"],"Ah well,":["it"],"Ah yes,":["I'll","didn't","thanks!","I","I"],"Ah! I":["didn't"],"Ah, I":["will","see,","see.","see"],"Ah, I'll":["have"],"Ah, I'm":["on"],"Ah, because":["any/all"],"Ah, but":["you"],"Ah, careless":["of"],"Ah, cool,":["went"],"Ah, didn't":["think","know"],"Ah, good":["point.","catch!","remarks,","idea!"],"Ah, gotcha.":["Thanks."],"Ah, hmm.":["Yes"],"Ah, just":["realised"],"Ah, lovely,":["I"],"Ah, no,":["actually"],"Ah, of":["course!","course,"],"Ah, ok":["cool."],"Ah, right,":["thank","you","it"],"Ah, thanks,":["that"],"Ah, wonderful.":["I"],"Ah, yeah":["I"],"Ah, yeah,":["`foldl'`"],"Ah, yes,":["good","good","it"],"Ah, you":["are"],"Ah. I've":["had"],"Ah. Thanks":["for"],"Ah... good":["to"],"Aha! I":["think","understand"],"Aha! Very":["good"],"Aha, I":["was"],"Ahaha, I":["just"],"Ahh, I":["didn't"],"Ahh, interesting.":["Yeah,"],"Ahh, looks":["like"],"Ahh, thanks":["both","again"],"Ahh, that":["list"],"Ahh, yeah":["I","that","I"],"Ahh, yes":["I"],"Ahhh, I":["had"],"Ahhhh, I":["was"],"Ain't that":["cheating"],"Algebraic data":["gives"],"All character":["will"],"All feedback":["is"],"All functions":["from"],"All good":["points."],"All in":["all,"],"All input":["should"],"All my":["comments"],"All of":["the","the","the","the","the","these","the","the"],"All other":["code"],"All primes":["\u003e"],"All tests":["pass"],"All that":["said,","said,","said,","is"],"All the":["rest","top","test","`take"],"All top-level":["functions","declarations","bindings","bindings","bindings"],"Almost all":["counters","containers"],"Almost everyone":["makes"],"Almost get":["there"],"Almost identical":["to"],"Almost literally":["anything"],"Almost same":["as"],"Along the":["same"],"Alpha or":["not"],"Alpha, there":["must"],"AlphaNum, so":["you"],"Alphas are":["Uppercased(That"],"Alright, I":["got"],"Alright, I'll":["try"],"Alright, so":["I"],"Also I":["don't","debated","personally","like","totally","had","found"],"Also I'd":["sort","prefer"],"Also I'm":["not","not"],"Also I've":["seen"],"Also `Data.Char`":["has"],"Also `Just":["x"],"Also `[max,(max":["-1)..`"],"Also `all":["[]","isSpace","isSpace"],"Also `any`/`all`":["is"],"Also `bottlesOfBeer(n-1)`":["is"],"Also `fold`":["there"],"Also `foldl`":["is"],"Also `modifyMVar_`":["can"],"Also `resetName`":["should"],"Also a":["`String`"],"Also afaiu":["this","this"],"Also all":["the"],"Also check":["`s1"],"Also consider":["using","implementing","that","gathering","that"],"Also considered":["using"],"Also do":["you"],"Also elem":["is"],"Also for":["some"],"Also from":["the","`Data.List.Split`:"],"Also function":["`tails`"],"Also how":["do","can"],"Also it":["would","should"],"Also it's":["recommend","better","preferred","possible"],"Also most":["of"],"Also note":["that","that"],"Also now":["only"],"Also on":["the","line"],"Also one":["improvement"],"Also please":["use"],"Also square":["may"],"Also take":["a","a"],"Also thanks":["for"],"Also that":["the"],"Also the":["parens","`Map`","thought","```null```"],"Also think":["about"],"Also this":["is"],"Also transpose":["seems"],"Also try":["using"],"Also use":["of"],"Also using":["`module"],"Also very":["slightly"],"Also when":["you"],"Also you":["could","shadow","could","can","can","may","may","may","may","may","may","may","don't","may","don't","can","may","may","may","may","can","can","may"],"Also you've":["got"],"Also, Data.Map":["is"],"Also, I":["find","find","generally","don't","noticed","used","think","just","have","don't","really","feel","don't","suspect","think","had","pulled","would","should","can","don't"],"Also, I'm":["not"],"Also, I've":["renamed"],"Also, ```M.Map```":["is"],"Also, `coordinates`":["and"],"Also, `foldl'`":["or"],"Also, `fromListWith`":["can"],"Also, `isEmpty`":["is"],"Also, `null`":["is"],"Also, `words`":["is"],"Also, and":["if","I"],"Also, any":["suggestions"],"Also, are":["you"],"Also, as":["I","per"],"Also, can":["you"],"Also, check":["spelling"],"Also, checking":["if"],"Also, choosing":["a"],"Also, consider":["giving"],"Also, could":["you"],"Also, despite":["your"],"Also, didn't":["know"],"Also, do":["you","you","you"],"Also, does":["this"],"Also, first":["statement"],"Also, for":["the"],"Also, function":["application"],"Also, glad":["to"],"Also, if":["you","you","you","there's"],"Also, in":["an"],"Also, instead":["of"],"Also, is":["it","the"],"Also, it":["will"],"Also, it's":["great","possible","formuulated"],"Also, just":["one"],"Also, let's":["say"],"Also, looking":["at"],"Also, many":["haskellers"],"Also, my":["point","`create`"],"Also, please":["remove"],"Also, since":["you","each","Data.Map"],"Also, some":["of"],"Also, sometimes":["Control.Applicative"],"Also, thanks":["for","for"],"Also, the":["use","Enum","accumulator","superfluous","function","module"],"Also, try":["using","using","`unlines`."],"Also, using":["`foldr`","`foldr`","`foldr`","`foldr`","`foldr`"],"Also, what":["is"],"Also, what's":["`all"],"Also, when":["you","you"],"Also, why":["do","not"],"Also, will":["using"],"Also, with":["explicit"],"Also, you":["can","can","can","can","can","can","shouldn't","don't","may","should","could","every","can"],"Also, you're":["doing"],"Also, your":["code","strategy"],"Alternative (which":["is"],"Alternative to":["write"],"Alternative typeclass":["and","that"],"Alternatively `Control.Arrow`":["and"],"Alternatively `concat":["."],"Alternatively `swap":["."],"Alternatively `{-#":["LANGUAGE"],"Alternatively the":["`where`"],"Alternatively you":["could","could"],"Alternatively, I've":["always"],"Alternatively, if":["you"],"Alternatively, some":["people"],"Alternatively, you":["could've","can","could"],"Alternatives to":["a"],"Alternatives would":["be"],"Although GHC":["can"],"Although I":["understand","do"],"Although I'm":["realizing"],"Although a":["valid"],"Although considering":["that"],"Although i":["think,"],"Although in":["this","this"],"Although is":["there"],"Although my":["previous"],"Although slightly":["less"],"Although the":["other","GHC"],"Although there's":["no"],"Although when":["I"],"Although you":["can"],"Always happy":["to"],"Always use":["strict"],"Am (`Am":["\u003c-"],"Am (`M":["\u003c-"],"Am I":["missing","defining","defining","just","missing","still","missing","missing","missing","right"],"An `Integer`":["solution"],"An additional":["approach"],"An alternate":["way"],"An alternative":["solution","approach","to","would","definition"],"An anagram":["is"],"An array":["based","would"],"An atomicModifyIORef":["is"],"An equivalent":["lower-level"],"An even":["easier"],"An example":["of"],"An exercise":["in"],"An explicit":["export"],"An extra":["challenge"],"An if/then/else":["might"],"An important":["concept"],"An interesting":["post"],"Anagram (anagramsFor)":["where`","where"],"And I":["believe","wanted","factored","agree,","was","think","love","just","learned","have","actually","learned","finally","can't","thought","would"],"And TVars":["are"],"And add":["type"],"And all":["the"],"And along":["the"],"And also":["commented"],"And as":["`translate`","far"],"And because":["it"],"And bit":["arithmetic"],"And definatelly":["get"],"And does":["it"],"And don't":["forget"],"And for":["lines"],"And good":["spot"],"And here":["no"],"And if":["you","you","`Data.Time.Calendar`","you","there"],"And in":["this"],"And is":["the","there"],"And isn't":["isSuffixOf"],"And it":["looks","seems","readme","looks"],"And nice":["work"],"And not":["reversing"],"And obviously":["`any"],"And of":["course"],"And point-free":["to"],"And since":["the"],"And such":["expression"],"And thank":["you"],"And that":["style"],"And that,":["by"],"And the":["additional","`Data.List`"],"And then":["use","to","you'd","I","`liftA`"],"And to":["make"],"And use":["mapping"],"And what":["the","do"],"And why":["not"],"And with":["that"],"And yes":["it","that"],"And yes,":["`_`"],"And you":["can"],"And you'll":["have"],"And your":["gist"],"And.. Do":["you"],"Another advantage":["that"],"Another alternative":["would","would"],"Another case":["where"],"Another choice":["would","would"],"Another clever":["way"],"Another concise":["way"],"Another consideration":["would"],"Another function":["to"],"Another hint":["here"],"Another idea":["would","would"],"Another nitpick,":["a"],"Another nitpick:":["is"],"Another option":["would","is","for"],"Another popular":["choice","implementation"],"Another practical":["benefit"],"Another safe":["total"],"Another simplification":["is","is"],"Another straightforward":["and"],"Another strategy":["would"],"Another technical":["point"],"Another thing":["you","I","I","to","to","to","to","to","you","you","that","you","is"],"Another thing,":["consider","I"],"Another trick":["you","to"],"Another way":["to","around","to","to","to","of","to","would","to","(not","to"],"Answers. This":["is"],"Any alternative":["suggestions"],"Any and":["all","all"],"Any better":["ways"],"Any further":["improvements"],"Any hints":["how"],"Any idea":["why"],"Any ideas":["why?"],"Any ideas?":["Is"],"Any map":["following"],"Any other":["nits?","suggestions","pointer?"],"Any reason":["why","for"],"Any reference":["to"],"Any suggestions":["on","on","?","you"],"Any thoughts":["or"],"Any way":["of"],"Any ways":["to"],"Anyhow, I":["think"],"Anyhow, thanks":["a"],"Anyone got":["an"],"Anything else":["I'm","I"],"Anything more":["complex"],"Anything that":["looks","looks"],"Anyway I":["rewrote","think"],"Anyway I've":["submitted"],"Anyway it's":["not"],"Anyway, I":["took","didn't"],"Anyway, I'll":["submit"],"Anyway, I'm":["gonna"],"Anyway, a":["question:"],"Anyway, for":["this"],"Anyway, most":["style"],"Anyway, thanks":["for"],"Anyway, this":["all"],"Anyway, you're":["solution"],"Anyway, your":["code"],"Anyway... took":["your"],"Api a":["function"],"Apologies for":["the"],"Apologies. This":["contains"],"AppError e":["=\u003e"],"Apparently `\"Fine.":["Be"],"Applicative `(\u003c&&\u003e)`":["operator,"],"Applicative and":["Monad","ViewPatterns"],"Applicative because":["it'll"],"Applicative f":["where","=\u003e","=\u003e"],"Applicative instance":["for","to"],"Applicative instance).":["Applicative's"],"Applicative instances":["that"],"Applicative is":["supposed"],"Applicative operators":["instead","instead"],"Applicative or":["use","Monad."],"Applicative to":["be"],"Applicative's ((-&gt;)":["a)"],"Applicative's `\u003c*\u003e`":["operator"],"Applicative's `\u003c|\u003e`":["and"],"Applicative's liftA2":["instead"],"Applicative, Num,":["Show"],"Applicative, and":["Applicative"],"Applicative, and/or":["Monad"],"Applicative, because":["the"],"Applicative, for":["example,"],"Applicative, so":["make"],"Applied the":["η-reduction"],"Applying strip":["first"],"Arch Linux":["ghc"],"Are `:double`":["and"],"Are either":["of"],"Are external":["modules"],"Are numbers":["really"],"Are there":["tradeoffs","any"],"Are we":["basically"],"Are you":["using","familiar","aware","familar"],"Aren't both":["solutions"],"Aren't there":["type"],"Arf it's":["all"],"Argh; I":["should"],"Arguably it'd":["be"],"Arguably overkill":["-"],"Arithmetic should":["be"],"Array Char":["Int"],"Array and":["not"],"Array can":["have"],"Array for":["this,","this"],"Array is":["O(1)."],"Array one":["is"],"Array or":["Vector"],"Array using":["the"],"Array would":["work","be"],"Array, would":["be"],"Arrays, the":["difference"],"Arrow (I":["guess)"],"Arrow a":["=\u003e"],"Arrow here.":["Why"],"Arrow might":["be"],"Arrow usage":["is"],"Arrow was":["one"],"As (`As":["=","+="],"As (`S":["="],"As I":["am"],"As I'm":["still"],"As a":["general","sidenote,","fun","minor"],"As an":["example,","additional"],"As and":["store"],"As data":["constructor"],"As far":["as","as","as","as","as","as","as","as","as","as","as","as","as","as","as","as"],"As for":["organization.","naming,","style,","the","the","writing","style,","`foldl`,","style,","the","bit","the","what","general","style,","Text,","where,","style,","the","the","arithmetic,","null,","what's","the"],"As in":["`Matrix"],"As is,":["my"],"As it":["happens,","is,","happens,","is,","is,","is,"],"As much":["as"],"As of":["version"],"As optional":["task,"],"As others":["have"],"As soon":["as"],"As such,":["shouldn't"],"As suggested":["by"],"As to":["the"],"As usual":["some"],"As we":["don't","are"],"As when":["you've"],"As you":["can","can","can","are","run","pointed","see"],"As-is the":["values"],"Asc version.":["Less"],"Aside from":["that,","this"],"Assigning it":["in"],"Assume there":["is"],"Assume we":["have"],"Assumes DNA":["strings"],"At a":["guess,"],"At best":["it"],"At first":["I","this"],"At first,":["I"],"At least":["now","that","I","I","I","I"],"At least,":["I'm"],"At my":["level"],"At one":["point"],"At some":["point"],"At the":["moment"],"Attempted to":["introduce"],"Attoparsec for":["this,"],"Attoparsec to":["get"],"Attoparsec, so":["I"],"Attoparsec. The":["parser"],"Avoiding regular":["expressions"],"Aw man,":["as"],"Awesome feedback.":["Thanks!"],"B and":["an"],"B are":["done"],"B hiding":["(aFun)`."],"B import":["to"],"B is":["overwritten"],"B module":["gets"],"B puts":["a"],"B who":["both"],"B.pack` in":["this"],"B8 for":["Bytestring.Char8."],"BS/B for":["strict"],"BST (Maybe":["a)"],"BST (order":["of"],"BST a":["=","=","=","="],"BST non-strict":["here,"],"BST that":["looks"],"BST this":["way,"],"BSTs can":["have"],"BSTs to":["have"],"BTW if":["I"],"BTW tests":["does"],"BTW the":["widely"],"BTW, ```M.HashMap```":["is"],"BTW, you":["can"],"BTW: An":["interesting"],"BTree a":["="],"B` for":["other"],"Bang patterns":["+"],"BangPattern for":["`hd`"],"BangPatterns (the":["stdlib"],"BangPatterns and":["changing"],"BangPatterns as":["well,"],"BangPatterns in":["the"],"BangPatterns on":["nextOdd"],"BangPatterns or":["an","other"],"BangPatterns pragma.":["All"],"BangPatterns to":["ensure"],"BangPatterns with":["`(!a,"],"BangPatterns) can":["cause"],"BangPatterns, OverloadedStrings,":["NoMonomorphismRestriction"],"BangPatterns, `seq`":["or"],"BangPatterns, but":["a"],"BankAccount (newMVar":["0)`"],"BankAccount (openAccount,":["incrementBalance)"],"BankAccount -\u003e":["IO"],"BankAccount \u003c$\u003e":["newMVar"],"BankAccount =":["BankAccount"],"BankAccount =\u003c\u003c":["newMVar"],"BankAccount is":["`Maybe"],"BankAccount {":["unBankAccount"],"Base approach":["as"],"Base covers":["only"],"Base just":["by"],"Base so":["you"],"Based on":["@wiley","some"],"Basic Eratosthenes'":["sieve."],"Basically that":["would"],"Basically the":["types"],"Basically this":["means"],"Basically what":["ends"],"Basically wondering":["if"],"Basically you":["define","want"],"Basically, I":["don't"],"Basically, such":["combinators"],"Basically, the":["only"],"BayerPrimes.hs were":["faster)"],"Be careful":["about"],"Be sure":["to"],"Be that":["way!\"","way!\"","way!\"","way!\"","way!\"`","way.\"","way.\"),","way.\"","way\"","way!\",","way!\".","way!\"","way!\"`","way!\"","way!\"","way\""],"Bearing also":["derive"],"Bearing derive":["`Bounded`","Enum"],"Because \u003ccode\u003ecomplement\u003c/code\u003e":["is"],"Because `atomically`":["can"],"Because deadlocks":["tend"],"Because if":["it's"],"Because it":["needs"],"Because it's":["not"],"Because of":["your","to","lazy","test"],"Because placement":["of"],"Because the":["input","only"],"Because this":["example"],"Because you":["didn't"],"Been thinking":["too"],"Beer (sing,":["verse...`"],"Before you":["go"],"Besides something":["like"],"Besides, no":["one"],"Best practice":["is"],"Better documentation":["could"],"Better now?":[":)"],"Better still":["would","would"],"Better to":["use","add"],"Better way":["of"],"Better yet,":["use","do"],"Better, however":["its"],"Big thanks,":["I"],"Bikeshedding perhaps,":["but"],"Bin {-#":["UNPACK"],"Binary Tree,":["so"],"Binary or":["Builder)."],"Bindings in":["`let`"],"Bob (":["Bob.hs,"],"Bob (responseFor)":["where`.","where`","where`.","where`.","where`","where`.","where`","where`)","where`","where`)","where","where`"],"Bob (responseFor)`.":["`yell`"],"Bob (responseTo)":["where`."],"Bob except":["that"],"Bob if":["you"],"Bob into":["therapy"],"Bob learns":["new"],"Bob yet":["(Exercism"],"Bob's I":["see."],"Bob, as":["all"],"Bob, it's":["not"],"Bob. Since":["everyone"],"Bob.hs file:":["`{-#"],"Bob.hs, Bob.o":[")",")"],"Bob.hs:10:12: Error:":["Redundant"],"Bob.hs:10:7: Warning:":["Redundant"],"Bob.hs:11:7: Warning:":["Use"],"Bob.hs:16:31: Warning:":["Defined"],"Bob.hs:18:43: Error:":["Redundant"],"Bob.hs:19:44: Error:":["Redundant"],"Bob.hs:9:41: Illegal":["tuple"],"Bob? There":["should"],"Bob](https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/bob/example.hs) uses":["an"],"Boobs looks":["nice"],"Bool (specifically":["`fromEnum`)."],"Bool -&gt;":["a","a"],"Bool --":["Defined","Defined","Defined","Defined"],"Bool -\u003e":["Bool","Bool","Bool","Bool","Bool","Bool`)","Bool`,","a","Bool","Bool","a","Bool","Bool"],"Bool =":["False"],"Bool as":["a"],"Bool constructors":["are"],"Bool could":["be"],"Bool has":["an"],"Bool implements":["Enum"],"Bool is":["`False","kind","kind"],"Bool to":["Int.","change","Int","turn"],"Bool\" and":["uncurry"],"Bool) -&gt;":["[a]","([String]"],"Bool) -\u003e":["(a","a","(a","a","(a","a","[a]","[a]","([a]"],"Bool)` and":["you've"],"Bool)` so":["all"],"Bool, (),":["and"],"Bool. \"validNumber\"":["would"],"Bool` combinator":["in","from"],"Bool` function":["there's"],"Bool` or,":["more"],"Bool` so":["I"],"Bool` type":["instead?"],"Bool` which":["is"],"Bool`) but":["relations"],"Bool`) i.e.":["the"],"Bool`) to":["an"],"Bool`). Either":["that,"],"Bool`). So":["it's"],"Bool`, might":["be"],"Bool`, too.":["(The"],"Bool`. I":["think"],"Boolean function":["is"],"Bools by":["writing"],"Bools, how":["do"],"Both I":["guess."],"Both `foldl`":["and"],"Both feel":["a"],"Both guards":["and"],"Both have":["the"],"Both seemed":["equally"],"Both your":["versions"],"Bounded (a,":["b)"],"Bounded and":["minBound","use","use"],"Bounded as":["well","well)."],"Bounded b)":["=\u003e"],"Bounded can":["also"],"Bounded eliminates":["the"],"Bounded for":["one"],"Bounded here":["to"],"Bounded then":["you"],"Bounded to":["make"],"Bounded was":["recommended"],"Bounded you":["can"],"Bounded)` for":["the"],"Bounded, you":["could"],"Bounded/minBound in":["combination"],"Boy does":["this"],"Boy, haskell":["really"],"Bs (`Bs":["=","+="],"Bs (`S":["="],"Bs and":["store"],"Btdubs you":["were"],"Btw Djinn":["can"],"Btw is":["`foldr`"],"Btw seems":["that"],"Btw, STM":["is"],"Btw, there":["is"],"Build a":["map"],"Building a":["map","Map"],"Building it":["will"],"But @carmella":["adviced"],"But I":["found","prefer","wasn't","did","feel","decided","after","ran","would","think","didn't","think","will","will","still","think","have","thought","was","must","can","had","thought","think","am","think","am","still","don't","still","quite","think","wanted"],"But I'll":["definitely"],"But I'm":["not","confused","not","not"],"But If":["\u003ccode\u003eString\u003c/code\u003e"],"But `(.":["foo)"],"But ```==```":["should"],"But `addends`":["that"],"But anyway":["what"],"But approaching":["each"],"But as":["I","you"],"But before":["implement"],"But bringing":["big-Oh"],"But for":["that,","some"],"But here":["we"],"But how":["would"],"But i":["don't","considered"],"But if":["it's","you","you","it"],"But in":["my","ghci","this","order","the"],"But is":["my","there"],"But isn't":["it"],"But it":["does","misclassifies","is","might","passes","also","look","was","will"],"But it's":["a","a","probably","not"],"But its":["a"],"But just":["to"],"But looking":["into"],"But maybe":["`sorted`"],"But now":["3/4","I"],"But please":["don't"],"But really":["its"],"But rewriting":["`f`"],"But since":["all","the"],"But sorry":["I"],"But still,":["it"],"But tests":["still"],"But thanks":["@gabriel,"],"But that":["actually","would","aside.","aside","depend"],"But that's":["just","up"],"But the":["specs","tests","lack","test"],"But then":["it","I"],"But then,":["I"],"But there":["is"],"But these":["functions"],"But think":["about"],"But this":["time","(maybe)","definitely","could","approach","way","is"],"But those":["are"],"But uninteresting,":["so"],"But with":["\u003ccode\u003ewordsBy\u003c/code\u003e"],"But yes,":["I"],"But you":["can","did","don't"],"But your":["implementation","are"],"But, I":["was"],"But, the":["code"],"But, then":["I've"],"But, with":["one"],"But, you":["know,"],"But, you're":["duplicating"],"But... I":["love"],"By \"it's":["well"],"By \"silly":["quoting"],"By \"the":["function"],"By De":["Morgan's"],"By contrast,":["foldl"],"By convention,":["this","all"],"By default,":["Data.Map"],"By giving":["names"],"By importing":["explicitly"],"By instancing":["`show`"],"By just":["replacing"],"By passing":["`baseNums`"],"By removing":["the"],"By the":["way,","same","time","way,"],"ByteString is":["a"],"ByteString), where":["`length"],"ByteString.Short type":["that"],"ByteString.pack)` is":["not"],"C -\u003e":["('A',"],"C =":["randomRIO"],"C and":["C++"],"C are":["both"],"C byte":["arrays"],"C camelCase":["will"],"C feel":["free"],"C or":["M."],"C |":["G","N","G","G","T","G"],"C++ to":["prevent"],"C, D":["etc..."],"C, G,":["and","and"],"C, N,":["N,"],"C,G or":["T..."],"C. Okasaki":["book"],"C.isSpace rather":["than"],"C/G/A cases":["would"],"CAPS? to":["be"],"CGAT -\u003e":["CGAU."],"CGAU. I":["suppose"],"CLI tool":["doesn't"],"CONDITION FOR":["LOWERCASE)"],"CPP extension":["used"],"C`. It":["can"],"Calculate the":["day","difference"],"Calling `newStdGen`":["twice"],"Came out":["pretty"],"Can I":["improve","ask","get"],"Can be":["done"],"Can lose":["the"],"Can make":["it"],"Can someone":["enlighten"],"Can you":["think","think","think","think","please","think","think","think","think","think","think","think","think","think","think","think","think","post","think","see","think","explain","think","think","explain","explain","think","tell","please","give","think","think","explain?","point","make","think","think","express","do","make","express","think","provide","think","figure","think","think","find","come","explain","come","think","figure","think","point","find","think","think","find","think","tell","explain","suggest","implement","think","think","think","implement","think","try","tell","give","think","explain?","tell","explain","try","optimize","think","compact","think","express","find","think","think","think","think","eleminate","think","think","use","think","think"],"Can't believe":["I"],"Can't decide":["if"],"Can't figure":["out"],"Can't personally":["stand"],"Can't say":["either","it"],"Can't think":["of"],"Can't you":["express"],"Capitalize may":["be"],"Carry on,":["sir"],"Carsten, I":["think"],"Cases: 11":["Tried:"],"Cases: 12":["Tried:"],"Cases: 15":["Tried:","Tried:","Tried:"],"Categorise the":["text"],"Category -\u003e":["String","String"],"Category =":["Emphasis","Emphasis","Emphasis"],"Cats] seems":["fairly"],"Certainly I":["ended"],"Cha-ching! I":["did"],"Changed ```catMaybes":["."],"Changed ```charMap```":["formatting"],"Changed ```intercalate":["\""],"Changed `insertWith`":["to"],"Changed `isQuestion":["[]"],"Changed to":["strict."],"Changed two":["`splitAt`"],"Changes of":["note:"],"Changing implementations":["is"],"Changing the":["import","name"],"Changing to":["`unlines`"],"Chapter 7":["of"],"Char (other":["than"],"Char -&gt;":["Char","Char","String","Char`"],"Char -\u003e":["Char","Maybe","Int","String","Char","Char","Char.","Maybe","Either"],"Char Int.":["Consider"],"Char a\"":["result."],"Char a`.":["From"],"Char also":["implements"],"Char and":["used","some","the"],"Char appropriately,":["so"],"Char as":["escape"],"Char at":["a"],"Char between":["'A'"],"Char conversion":["code"],"Char deriving":["(Show)"],"Char for":["which","the"],"Char in":["the"],"Char is":["probably","enumerable,"],"Char literals,":["e.g."],"Char of":["input","output,"],"Char or":["a"],"Char so":["the"],"Char supports":["more"],"Char that":["is"],"Char that's":["not"],"Char with":["a"],"Char }":["deriving"],"Char →":["DNA","Char"],"Char)? What":["do"],"Char)` or":["maybe"],"Char, Bool,":["(),"],"Char, not":["a"],"Char, specifically":["`fromEnum`"],"Char, you":["shouldn't","can"],"Char-based solution":["is"],"Char. But":["in"],"Char? Consider":["what"],"CharPattern =":["C"],"Char` and":["enforcing","`ShowS`","modify"],"Char` be":["a"],"Char` in":["my"],"Char` is":["in"],"Char` might":["be"],"Char` or":["`replaceChar"],"Char` to":["`maxBound::Char`"],"Char`. The":["compiler"],"Char`. This":["would"],"Chars in":["it."],"Chars) isn't":["strictly"],"Chars. That's":["why"],"Cheaters! I'll":["try"],"Cheating, code":["reuse"],"Check it":["out!"],"Check out":["`all`","this","Parallel","this","this","this","this","`randomRIO`,","[`splitPlaces`](http://hackage.haskell.org/package/split-0.1.1/docs/Data-List-Split.html#v:splitPlaces)","`Map.findWithDefault`","`wordsBy`","this","[this"],"Check the":["docs,"],"Check with":["`null`"],"Checking `length":["xs"],"Checking `null":["."],"Checking if":["there"],"Checking the":["length"],"Checking whether":["all"],"Chris Okasaki":["(or"],"Cincinnati Functional":["Programmers"],"ClassyPrelude is":["strict"],"ClassyPrelude, because":["I"],"Cleaned up":["imports.","a"],"Clear code!":["But"],"Clearly I":["am","am"],"Clearly I'm":["new"],"Clever code":["disgusts"],"Clever the":["filtering"],"Clever, and":["cleaner"],"Click on":["Source"],"Clojure (where":["available)"],"Clojure and":["was"],"Clojure code":["was","to"],"Clojure implementation":["and"],"Clojure style,":["you"],"Clojure suite":["when"],"Clojure tests,":["I"],"Clojure, Erlang,":["or"],"Clojure, which":["were"],"Clojure. Most":["of"],"Closing does":["not"],"Code doesn't":["pass"],"Code is":["read"],"Code looks":["pretty","good","nice,"],"Code reuse":["is"],"Code reviews":["and"],"Code smells.":["But"],"Code style":["and"],"Code will":["be"],"Code with":["space"],"Col) as":["an"],"Cols (Vector":["a)`?"],"Combinators too,":["although"],"Combined with":["the"],"Combining those":["you"],"Come to":["think","think"],"Comedy option:":["`(.:)"],"Comment from":["previous"],"Comments about":["the"],"Comments are":["consistently"],"Comments welcome.":["E.g.,"],"Common use":["cases"],"Comp Sci":["at"],"Compare with":["the"],"Compared to":["the"],"Comparing a":["string"],"Compiler can":["do"],"Compiling Bob":["("],"Compiling Main":["(","("],"Compiling WordCount":["(","("],"Complexitywise it's":["pretty"],"Complicated stuff":["though!"],"Concurrent Haskell":["for","has","chapter","to"],"Concurrent Haskell's":["explanation"],"Concurrent Programming":["in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in","in"],"Concurrent's MVar":["rather"],"Congratulations, this":["is"],"Conor McBride:":["http://www.haskell.org/pipermail/haskell-cafe/2007-July/028183.html"],"Consequence of":["what,"],"Consider \"aluminum\"":["\"alumin\","],"Consider 42":["for"],"Consider adding":["a"],"Consider an":["explicit","explicit","input","interleaving"],"Consider breaking":["up"],"Consider building":["a"],"Consider defining":["`howMany","`isSeperator`"],"Consider deriving":["`Enum`"],"Consider eta-reducing":["`anagramsFor`"],"Consider eta-reduction":["on"],"Consider following":["C"],"Consider how":["you"],"Consider implementing":["the","`scoreLetter`","this","this"],"Consider importing":["your"],"Consider moving":["some"],"Consider refactoring":["to"],"Consider removing":["unnecessary"],"Consider reordering":["the"],"Consider solving":["it"],"Consider splitting":["up"],"Consider string":["\"0101ups01\","],"Consider that":["you're","Teenth","you","lines","this:","you"],"Consider the":["value","class","exact"],"Consider these":["anagrams:"],"Consider using":["an","`all`","`all`","more","the","`Map.insertWith`","the","`wordsBy`","`map`","a","the","a","`wordsBy`","a","isAlphaNum","`import","an","arithmetic","a","`mapM","`fromListWith`.","a","Data.List.Split's","```insertWith```","a","foldl'","higher"],"Consider what":["you","makes"],"Considered using":["`flip"],"Control Monad's":["`void`"],"Control.Applicative /":["Data.Functor"],"Control.Applicative and":["`\u003c\u003e`"],"Control.Applicative but":["I"],"Control.Applicative has":["the"],"Control.Applicative in":["particular"],"Control.Applicative instead":["of"],"Control.Applicative is":["used"],"Control.Applicative operators":["for","instead"],"Control.Applicative operators.":["I"],"Control.Applicative to":["make","make"],"Control.Applicative's fmap":["operator"],"Control.Applicative), but":["this"],"Control.Applicative). `Robot":["\u003c$\u003e"],"Control.Applicative. I":["would've"],"Control.Arrow appear":["to"],"Control.Arrow is":["unused,"],"Control.Arrow tip":["-"],"Control.Arrow to":["make"],"Control.Arrow you":["can"],"Control.Arrow's `&amp;&amp;&amp;`":["operator","operator","operator"],"Control.Arrow's first":["and"],"Control.Arrow), this":["one"],"Control.Arrow). You":["might"],"Control.Arrow, like":["this:"],"Control.Arrow, or":["the"],"Control.Arrow. Code":["looks"],"Control.Arrow\u003e :t":["(&&&)"],"Control.Arrows and":["do"],"Control.Concurrent to":["make"],"Control.Concurrent.MVar appear":["to"],"Control.Concurrent.MVar to":["deal"],"Control.Concurrent.STM is":["a"],"Control.Concurrent.STM.TMVar or":["Control.Concurrent.MVar"],"Control.Lens also":["gazes"],"Control.Lens or":["TemplateHaskell."],"Control.Lens, Control.Lens":["also"],"Control.Monad (void,":["replicateM)"],"Control.Monad are":["unused"],"Control.Monad could":["be"],"Control.Monad import,":["I"],"Control.Monad instead":["of"],"Control.Monad or":["implement"],"Control.Monad to":["generate"],"Control.Monad, it":["would"],"Control.Monad. However,":["in"],"Control.Monad. `guard`":["from"],"Control.Monad.Fix appears":["to"],"Control.Monad.Fix or":["Data.Function"],"Control.Monad.Plus isn't":["in"],"Control.Monad.Writer.Strict, I":["suspect"],"Control.Monad.replicateM_ 10000000":["(incrementBalance","(incrementBalance","(incrementBalance"],"Convenience operators":["like"],"Conventionally a":["function"],"Conversion using":["enum"],"Cool! Great":["tip!"],"Cool, I":["was","read"],"Cool, good":["to"],"Cool, thanks":["for","for","for"],"Cool, thanks.":["I"],"Cool. I":["was"],"Cool; I":["was"],"Copy and":["paste,"],"Core by":["compiling"],"Correct on":["all"],"Could `func`":["get"],"Could also":["be"],"Could be":["a"],"Could have":["made"],"Could use":["some"],"Could you":["implement","separate","separate","clarify","suggest","please","provide","show","not","generalize","find","use","point","help"],"Couldn't find":["a"],"Couldn't have":["done"],"Couldn't match":["type"],"Couldn't work":["out"],"Couldn't you":["simplify"],"Count is":["count"],"Counting from":["rightmost"],"Coursera) but":["not"],"Create a":["new"],"Create an":["account"],"Creative use":["of"],"Criterion ([benchmark":["source"],"Criterion (package)":["is"],"Criterion and":["ghc"],"Criterion so":["I"],"Current version":["looks"],"Currently, `wordCount":["\"foo%%%bar\""],"Currying and":["partial"],"Curses! I":["tried"],"Cut down":["on"],"D etc...":["instead"],"D'oh you're":["right!"],"DFA or":["something"],"DFA to":["do"],"DFA. You":["could"],"DMS for":["qualified"],"DNA (":["function1,"],"DNA (a),":["when"],"DNA (count,":["nucleotideCounts)"],"DNA (hammingDistance)":["where","where"],"DNA (toRNA)":["where","where`"],"DNA -\u003e":["RNA"],"DNA =":["A","C","DnaC"],"DNA and":["RNA,","RNA","RNA","RSA"],"DNA bases":["and"],"DNA is":["quite"],"DNA nucleotide,":["or"],"DNA nucleotides":["as"],"DNA or":["RNA."],"DNA sequences":["will"],"DNA sequences,":["you"],"DNA strands":["in"],"DNA strands,":["as"],"DNA string":["and","(so,","once?"],"DNA string.":["Since"],"DNA strings":["are","aren't"],"DNA they":["came"],"DNA was":["a"],"DNA when,":["of"],"DNA which":["would"],"DNA you":["will"],"DNA →":["Char"],"DNA)` seemed":["more"],"DNA, `count":["'U'`"],"DNA, so":["if","if"],"DNA. Hard":["to"],"DNA/RNA aren't":["just"],"DNA: `A`,":["`C`,"],"DNABase -\u003e":["RNABase"],"DNABase and":["RNABase"],"DON'T TALK":["TO"],"DOW of":["the"],"DRY stands":["for"],"Dag nabbit...":["I"],"Darn you":["Haskell"],"Data Structures":["by"],"Data.Aray has":["something"],"Data.Array (Array,":["(!),"],"Data.Array and":["a"],"Data.Array as":["the"],"Data.Array can":["use"],"Data.Array could":["be"],"Data.Array instead":["of"],"Data.Array might":["be"],"Data.Array would":["allow"],"Data.Array, which":["could"],"Data.Array. The":["way"],"Data.Array. You":["can"],"Data.Attoparsec.Text (only":["23"],"Data.Biapplicative.biliftA2` i":["think"],"Data.Bits and":["then"],"Data.Bits has":["everything"],"Data.Bits instead":["of"],"Data.Bits is":["so","simple,"],"Data.Bits that":["does","will"],"Data.Bits to":["get"],"Data.Bits) and":["add"],"Data.Bits, `shiftL`":["and"],"Data.Bits, or":["Numeric."],"Data.ByteString is":["interesting,"],"Data.ByteString.Char8 is":["a"],"Data.ByteString.Char8 still":["isn't"],"Data.Char (isAlphaNum,":["toLower)`,"],"Data.Char (isLower,":["isSpace,"],"Data.Char (isSpace,":["isLower)`"],"Data.Char (toLower)`":["limits"],"Data.Char (toLower,":["isPunctuation,"],"Data.Char (toUpper)`.":["There"],"Data.Char (toUpper,":["isSpace)`,","isAlpha)`."],"Data.Char and":["prelude","Control.Monad"],"Data.Char as":["C`."],"Data.Char but":["this"],"Data.Char composed":["with"],"Data.Char exports":["`isSpace`,"],"Data.Char for":["a","better"],"Data.Char functionality":["in"],"Data.Char has":["an","the","some","all"],"Data.Char import":["weirdness."],"Data.Char instead":["of","of","of"],"Data.Char is":["always","actually"],"Data.Char rather":["than","than"],"Data.Char that":["does","you","does","you"],"Data.Char the":["most"],"Data.Char to":["do","determine","have"],"Data.Char with":["much"],"Data.Char would":["be"],"Data.Char you":["could","can"],"Data.Char's `isDigit`":["might"],"Data.Char's `isPunctuation`":["function."],"Data.Char's functionality,":["as"],"Data.Char(isAlphaNum, isSpace,":["toLower)"],"Data.Char(isLower, isSpace,":["isUpper)`)"],"Data.Char). This":["is"],"Data.Char). To":["quote"],"Data.Char, Data.Bits,":["or"],"Data.Char, I":["think"],"Data.Char, a":["la"],"Data.Char, and":["Data.List."],"Data.Char, but":["this"],"Data.Char, which":["I"],"Data.Char, you":["could","shouldn't","shouldn't"],"Data.Char, you'll":["find"],"Data.Char. I":["think"],"Data.Char. I'd":["suggest"],"Data.Char. Nice":["work."],"Data.Char. Note":["that"],"Data.Char. Right":["now"],"Data.Char.toLower either":[":)"],"Data.Char? I":["first"],"Data.Composition, would":["use"],"Data.DList (which":["isn't"],"Data.Foldable (Foldable,":["foldMap,"],"Data.Function (on)`,":["so"],"Data.Function and":["Control.Arrow"],"Data.Function but":["that's"],"Data.Function has":["an"],"Data.Function's `on`":["and"],"Data.Function. In":["fact,"],"Data.Function` try":["specifying"],"Data.Functor (or":["Control.Applicative)."],"Data.Functor alias":["for"],"Data.Functor or":["Control.Applicative"],"Data.HashMap…) for":["this"],"Data.IntMap as":["internal","internal"],"Data.IntMap functionality,":["its"],"Data.IntMap here,":["it's"],"Data.IntMap may":["suite"],"Data.IntMap or":["Data.HashMap…)"],"Data.IntMap.Strict its":["optimized"],"Data.List (and":["it"],"Data.List *and*":["making"],"Data.List and":["the"],"Data.List as":["List`","List`.","List`"],"Data.List at":["all.","all?"],"Data.List because":["it"],"Data.List being":["apart"],"Data.List called":["`isSuffixOf`."],"Data.List functions":["to"],"Data.List has":["an","a"],"Data.List in":["almost"],"Data.List instead":["of","of","of","of","of","of"],"Data.List instead.":["The","This"],"Data.List is":["not.","nearly","in"],"Data.List it":["will"],"Data.List library.":["Combined"],"Data.List may":["also"],"Data.List of":["Pairs."],"Data.List or":["explicitly","Data.List.Split"],"Data.List rather":["than"],"Data.List that":["you","can","will"],"Data.List to":["implement"],"Data.List used":["explicitly"],"Data.List was":["imported."],"Data.List would":["be","be","be"],"Data.List's `foldl'`":["should"],"Data.List's `splitAt`":["and/or","or"],"Data.List) must":["be"],"Data.List) or":["`('?'==)"],"Data.List), or":["even"],"Data.List). My":["usual"],"Data.List, Data.Char,":["Data.Bits,"],"Data.List, but":["this","a"],"Data.List, it's":["very"],"Data.List, or":["even","to","using"],"Data.List, which":["handles","gracefully","is","will"],"Data.List. Alternatively,":["you"],"Data.List. Even":["better"],"Data.List. It":["might"],"Data.List. The":["Prelude","Prelude"],"Data.List. There":["are"],"Data.List. You'd":["use"],"Data.List.Ordered for":["that,"],"Data.List.Split (hint:":["don't"],"Data.List.Split (which":["is","is"],"Data.List.Split `chunksOf`.":["The"],"Data.List.Split `wordsBy`.":["Included"],"Data.List.Split and":["Data.Char","`isDigit`","see"],"Data.List.Split could":["help"],"Data.List.Split for":["a","an"],"Data.List.Split from":["listsplit"],"Data.List.Split function":["`wordsBy`,"],"Data.List.Split has":["a","a","a","a","a","a","a","a","a","some","a","a","a","some","a","some","a","a","a","a","a","a"],"Data.List.Split instead":["of"],"Data.List.Split is":["actually","included","part","not","a","included","in"],"Data.List.Split isn't":["part"],"Data.List.Split just":["so"],"Data.List.Split library":["from"],"Data.List.Split module":["as","instead","useful."],"Data.List.Split modules":["to"],"Data.List.Split offers":["a"],"Data.List.Split provides":["a"],"Data.List.Split rather":["than","than"],"Data.List.Split stuff":["that"],"Data.List.Split that":["makes","you","will"],"Data.List.Split to":["make"],"Data.List.Split's `chunksOf`":["to"],"Data.List.Split's `splitPlaces`":["to"],"Data.List.Split's `wordsBy":["(not"],"Data.List.Split's `wordsBy`":["would","you","function,","instead","function","can","is","to","instead","function","function"],"Data.List.Split's `wordsBy`,":["but","I","you"],"Data.List.Split's `wordsBy`.":["Given"],"Data.List.Split's wordsBy,":["but"],"Data.List.Split, as":["I"],"Data.List.Split, but":["this"],"Data.List.Split, there":["are"],"Data.List.Split, which":["is"],"Data.List.Split. 3":["uses"],"Data.List.Split. But":["looking"],"Data.List.Split. The":["other"],"Data.List.Split. `isAlphaNum":["x`"],"Data.List.Split.words by,":["it"],"Data.List.Split.wordsBy (not":["."],"Data.List.Split.wordsBy combinator,":["it"],"Data.List.Split.wordsBy function":["useful","useful","uselfull","useful"],"Data.List.Split.wordsBy instead":["of"],"Data.List.Utils ships":["with"],"Data.List.Utils though,":["kinda"],"Data.List.foldl'. An":["even"],"Data.List.insert to":["?]","insertWith"],"Data.List.last, it's":["not"],"Data.Map (Map)`":["along","on","etc."],"Data.Map (Map,":["fromListWith)`.","fromListWith)`.","fromListWith)"],"Data.Map (basically":["an"],"Data.Map (but":["you"],"Data.Map (or":["Data.IntMap"],"Data.Map (really":["Data.Map.Lazy)"],"Data.Map (the":["type","data"],"Data.Map (value-lazy)":["instead","instead","instead"],"Data.Map ?":["This"],"Data.Map a":["second"],"Data.Map adds":["another"],"Data.Map and":["I","fix","use","that's"],"Data.Map are":["all","also","non-strict,","lazy."],"Data.Map as":["M`.","M","M","an","M","M","M","M","qualified","Map`","Map","M`,","M```."],"Data.Map being":["value-lazy.","value-lazy."],"Data.Map but":["wasn't","with"],"Data.Map by":["supplying","default"],"Data.Map can":["save"],"Data.Map causes":["a"],"Data.Map doesn't":["need","forces"],"Data.Map fixes":["the"],"Data.Map for":["that","`worth`.","insertion,","my"],"Data.Map functionality":["instead","instead","to"],"Data.Map had":["the"],"Data.Map has":["a","some","a","some"],"Data.Map imports":["the"],"Data.Map in":["many"],"Data.Map instead":["of","of"],"Data.Map is":["often","to","value","not","value-lazy,","value-lazy,","value-lazy","value-lazy,","value-lazy,","because","value-lazy.","value-lazy","value-lazy","is","value-lazy,","in","value-lazy,","a","value-lazy.","value-lazy","the","value-lazy,","value-lazy","value-lazy,","value-lazy","value","not","spine-strict."],"Data.Map isn't":["value-strict,"],"Data.Map leads":["to"],"Data.Map not":["being"],"Data.Map or":["Data.Map.Lazy.","Data.Map.Strict).","Data.Map.Strict.","something?"],"Data.Map should":["be"],"Data.Map since":["everything"],"Data.Map solution,":["Data.Map.Strict"],"Data.Map standpoint":["next..."],"Data.Map symbols,":["you"],"Data.Map that":["makes","you"],"Data.Map to":["do","build"],"Data.Map twice:":["once"],"Data.Map uses":["O(n)"],"Data.Map value":["strictness"],"Data.Map were":["most"],"Data.Map's `fromListWith`":["and/or"],"Data.Map's `fromListWith`.":["Using"],"Data.Map's functionality":["is","is"],"Data.Map's functions":["are","are","are"],"Data.Map's implementation":["is"],"Data.Map's value":["laziness"],"Data.Map's value-lazy":["implementation,"],"Data.Map, and":["how"],"Data.Map, as":["the"],"Data.Map, but":["being"],"Data.Map, every":["insert"],"Data.Map, so":["it"],"Data.Map, there's":["two"],"Data.Map, which":["has","use"],"Data.Map. (Data.Map.Strict":["is"],"Data.Map. Also,":["the"],"Data.Map. By":["default,"],"Data.Map. Incrementing":["in"],"Data.Map. It's":["the"],"Data.Map. Otherwise":["you'll"],"Data.Map. The":["version","Map","functions"],"Data.Map.Base is":["explicitly"],"Data.Map.Lazy and":["Data.Map.Strict","not"],"Data.Map.Lazy that":["will"],"Data.Map.Lazy) do":["not"],"Data.Map.Lazy) is":["the"],"Data.Map.Lazy.Map and":["Data.Map.Map"],"Data.Map.Map String":["Int"],"Data.Map.Map are":["all"],"Data.Map.Map but":["the"],"Data.Map.Strict (Map)":["--"],"Data.Map.Strict (Map)`":["above"],"Data.Map.Strict (Map,":["fromListWith)`","fromListWith)"],"Data.Map.Strict (same":["Map"],"Data.Map.Strict (value-strict),":["and"],"Data.Map.Strict (value-strict).":["For"],"Data.Map.Strict (which":["is"],"Data.Map.Strict (x,":["y,"],"Data.Map.Strict and":["I","a","using","perhaps","`fromListWith`."],"Data.Map.Strict as":["Map.","Map`","M","M","lazy"],"Data.Map.Strict because":["Map"],"Data.Map.Strict but":["otherwise"],"Data.Map.Strict fixes":["the"],"Data.Map.Strict for":["spine-strict","this,","counting,"],"Data.Map.Strict functionality":["to"],"Data.Map.Strict guarantees":["that"],"Data.Map.Strict has":["the","to","the"],"Data.Map.Strict here.":["A"],"Data.Map.Strict instead":["though","of","of","of","of","of","of","of","which","of","for","of","of","of","of","of","is","of","of","of"],"Data.Map.Strict instead)":["and"],"Data.Map.Strict instead,":["which","you","which","which","which","because","since","as","this"],"Data.Map.Strict instead.":["The","The","If","For","For","The","For","To","For","The"],"Data.Map.Strict is":["the","a","not","also"],"Data.Map.Strict not":["the"],"Data.Map.Strict on":["the"],"Data.Map.Strict share":["the"],"Data.Map.Strict should":["be","be"],"Data.Map.Strict to":["avoid","avoid","avoid"],"Data.Map.Strict unfortunately,":["I'll"],"Data.Map.Strict uses":["O(1)"],"Data.Map.Strict version":["of"],"Data.Map.Strict wasn't":["installed."],"Data.Map.Strict which":["takes"],"Data.Map.Strict will":["solve"],"Data.Map.Strict with":["`foldl'`"],"Data.Map.Strict would":["be","fix"],"Data.Map.Strict you":["can"],"Data.Map.Strict's `fromListWith`":["and"],"Data.Map.Strict's version":["of"],"Data.Map.Strict), which":["uses","would"],"Data.Map.Strict, because":["I"],"Data.Map.Strict, but":["use","my"],"Data.Map.Strict, for":["the"],"Data.Map.Strict, it":["seems"],"Data.Map.Strict, it's":["quite"],"Data.Map.Strict, or":["I"],"Data.Map.Strict, which":["has"],"Data.Map.Strict. Also,":["you"],"Data.Map.Strict. I'm":["a"],"Data.Map.Strict. I've":["been"],"Data.Map.Strict. It":["matters"],"Data.Map.Strict. It's":["my"],"Data.Map.Strict. Since":["Data.Map's"],"Data.Map.Strict. The":["value-laziness"],"Data.Map.Strict. You":["should"],"Data.Map.Strict.Map and":["Data.Map.Lazy.Map"],"Data.Map.Strict.map, then":["there"],"Data.Map.Strict\u003e (fromListWith":["(+)"],"Data.Map.Strict? Will":["read"],"Data.Map.Strict` since":["it's"],"Data.Map.Strict` then":["this"],"Data.Map.Strict`. I":["see"],"Data.Map\u003e (fromListWith":["(+)"],"Data.Map\u003e :m":["Data.Map.Strict"],"Data.Map? There's":["a"],"Data.Map` to":["`import"],"Data.Maybe imports,":["because"],"Data.Maybe is":["unused"],"Data.Maybe that":["is"],"Data.Maybe. I'm":["sure"],"Data.Monoid (which":["is"],"Data.Set and":["Data.Maybe"],"Data.Set didn't":["help"],"Data.Set instead":["of"],"Data.Set is":["already"],"Data.Set might":["be"],"Data.Set per":["kimhyunkang's"],"Data.Set to":["represent"],"Data.Set). It":["really"],"Data.String.Utils isn't":["in"],"Data.String.Utils library?":["I'm"],"Data.String.Utils, which":["has"],"Data.String.Utils.replace, but":["I"],"Data.String.Utils? It":["has"],"Data.Text -":["I"],"Data.Text and":["back"],"Data.Text even":["though"],"Data.Text for":["such","this","the"],"Data.Text here":["is"],"Data.Text here,":["definitely"],"Data.Text import":["and"],"Data.Text is":["maybe","great,","ugly"],"Data.Text or":["stay"],"Data.Text seemed":["to"],"Data.Text than":["See"],"Data.Text which":["would"],"Data.Text would":["probably"],"Data.Text's `split`.":["The"],"Data.Text's chunksOf":["source"],"Data.Text's version":["but"],"Data.Text, now":["stripping"],"Data.Text, or":["use"],"Data.Text. If":["the"],"Data.Text.map can":["be"],"Data.Text.replace however":["Data.Text.map"],"Data.Text.split (not":["."],"Data.Text.strip -":["but"],"Data.Time.Calendar (Day,":["addDays,","addDays,","addDays,"],"Data.Time.Calendar.WeekDate.toWeekDate for":["doing"],"Data.Time.Calendar.WeekDate.toWeekDate. Can":["lose"],"Data.Tuple has":["a"],"Data.Vector as":["V"],"Data.Vector have":["a"],"Data.Vector or":["Data.Array"],"Data.Vector, but":["I"],"Data.Vector. Unboxed":["here,"],"DataKinds extensions":["to"],"DataKinds, so":["it's"],"Day -\u003e":["Day"],"Day that":["is"],"Day to":["shift","a"],"Day would":["be"],"Day,Int]` and":["created"],"De Morgan's":["law,"],"Dealing with":["date"],"Death to":["`fst`"],"Debug.Trace is":["an","an"],"Debug.Trace` in":["the"],"Decided to":["leave","make"],"Defaulting the":["following","following","following"],"Define `(.:)":["="],"Defined at":["WordCount.hs:10:5"],"Defined but":["not"],"Defined in":["`GHC.Base'","`GHC.Base'","`GHC.Base'","`Control.Applicative'","`GHC.Base'","`Data.Function'","`GHC.Base'","`GHC.Tuple'","`GHC.Enum'","`GHC.Classes'","`GHC.Base'","`GHC.Classes'","`GHC.Read'","`GHC.Show'","`GHC.Base'","`Data.Maybe'","`Data.Either'","`GHC.Base'","`GHC.Base'","`GHC.Base'","`GHC.Base'","`GHC.Classes'","`GHC.Classes'","`GHC.Classes'","`GHC.Base'","`Data.Maybe'","`Data.Either'","`GHC.Base'","`GHC.Base'","`GHC.Base'","`GHC.Base'","`GHC.Classes'","`GHC.Classes'","`GHC.Num'","`GHC.Base'","`GHC.Classes'","`GHC.Classes'","`GHC.Base'","`GHC.Base'","`GHC.Base'","`GHC.Real'","`GHC.Classes'","`GHC.Classes'"],"Defining appropriately":["named"],"Defining increaseCount":["in"],"Definitely a":["lot"],"Definitely cleans":["things"],"Definitely makes":["it"],"Definition of":["“punctuation”"],"Depending on":["whether","Data.Text"],"Depends on":["isQuestion"],"Deprecated. As":["of"],"Deque (newTVarIO":["Nothing)`"],"Deque a":["="],"Deque as":["a"],"Deque structure":["it"],"Deque {":["unDeque"],"Deriving Enum":["and"],"Design` show":["why"],"Despite what":["it"],"Desugars to":["this:"],"Did I":["build"],"Did not":["mean"],"Did you":["try","consider","look","know","have","see","consider","leave","submit","submit","know","know","know","mean","consider"],"Didn't find":["it"],"Didn't know":["about","these","about","about","that."],"Didn't like":["this"],"Didn't need":["the"],"Didn't realize":["I"],"Didn't think":["about","about"],"Didn't use":["any"],"Different meaning":["with"],"Direct translation":["of"],"Direction is":["used"],"Djinn can":["infer"],"Djinn&gt; ?":["comp2"],"Djinn's version":["most."],"Dna =":["Dna"],"Dna Char`":["and"],"DnaA |":["DnaT"],"DnaC |":["DnaG"],"DnaG |":["DnaA"],"Do I":["have"],"Do negative":["roman"],"Do not":["like","afraid"],"Do the":["BangPatterns"],"Do we":["need"],"Do you":["mean","think","mean","really","know","pass","think","mean","think","pass","mean","find","have","have","mean","want","know","mean","mind","want","see","know","mean","think","think","mean","mean","mean","mean","have"],"Does Data.Vector":["have"],"Does `addLetter`":["keep"],"Does anyone":["know"],"Does haskell":["have"],"Does take":["some"],"Does that":["mean"],"Does the":["exercise","Python"],"Does this":["still"],"Doesn't make":["a","a","too","a"],"Doesn't quite":["fix"],"Doesn't really":["change"],"Doesn't work":["in"],"Doh! I":["knew"],"Doing base":["\u003e"],"Doing it":["in","right"],"Doing that":["for"],"Doing the":["version"],"Doing this":["with"],"Don Stewart.":["Good"],"Don't assume":["that"],"Don't give":["up!"],"Don't know":["if","how","if"],"Don't need":["to"],"Don't quote":["me"],"Don't think":["I"],"Don't try":["to"],"Don't worry":["about","about","too"],"Done with":["arithmetic"],"Double (it":["would"],"Double -&gt;":["Double`"],"Double and":["use"],"Double or":["whatever","Float."],"Double over":["Float"],"Double precision":["to"],"Double` to":["remove"],"Dq a":["="],"Dq {":["dqhd"],"Dropped obsoleted":["```import```s."],"DrunkTalk would":["blow"],"DrunkTalk. Or":["is"],"Due to":["my","`(`","the","laziness"],"E.ErrorCall` is":["equivalent"],"E.g. \u003cpre\u003enucleotideCounts":["str"],"E.g., should":["I"],"EDIT: I":["posted","suspect"],"EDSL-style to":["make"],"Each `…":["+"],"Earth *":["case"],"Earth *`":["in"],"Earth =":["31557600","1.0"],"Earth s":["/"],"Earth, and":["one"],"Earth` though.":["Consider"],"East =":["first"],"Easy enough":["to"],"Edit2: OK,":["`biapp"],"Edit: Ah,":["I"],"Edit: I":["see,"],"Edit: No,":["I"],"Edit: Oh,":["hah,"],"Edit: `x`":["too"],"Edit: also":["to"],"Edit: for":["example"],"Edit: no,":["that'd"],"Edit: not":["*seriously*"],"Edit: of":["course,"],"Edit: sorry,":["read"],"Edit: the":["question"],"Edit: to":["link"],"Edit: you":["can"],"Eggs` is":["shorter","usually"],"Either Integer":["Integer"],"Either PhoneError,":["or"],"Either String":["with","Char`"],"Either e.":["But"],"Either if":["you're"],"Either is":["an"],"Either keep":["all"],"Either monad":["works"],"Either rather":["than"],"Either should":["be"],"Either that,":["or"],"Either transformer":["will"],"Either way":["it"],"Either way,":["look"],"Either with":["`Data.Map.fromListWith`"],"Elegant solution,":["but"],"Elixir (`flip":["($)`)."],"Elixir implementation.":["I"],"Elixir mixed":["up"],"Elixir! Is":["there"],"Elixir/Clojure it's":["not"],"Emacs ghc-mod":["will"],"Emacs there's":["a"],"Emacs](https://github.com/haskell/haskell-mode). I":["have"],"Emotion datatype.":["Arguably"],"EmotionalContent =":["Silence"],"EmotionalContent is":["not"],"EmotionalContent to":["a"],"Emphasis |":["Silence","Silence","Silence"],"English adjectives.":["I"],"English version":["of"],"English, but":["why"],"Enum (and":["perhaps"],"Enum and":["just","Bounded","use","Bounded","WeekDate","Bounded","perhaps","Bounded"],"Enum approach":["as"],"Enum for":["Weekday,","now"],"Enum has":["certainly"],"Enum implementation":["(Eggs"],"Enum instance":["of","of","on","to","where","on","where","for","for","instead","for","for"],"Enum might":["help"],"Enum such":["that"],"Enum typeclass":["instance","to","will"],"Enum typeclass,":["I've"],"Enum until":["you"],"Enum yourself":["here."],"Enum's `fromEnum`,":["`toEnum`)."],"Enum) =\u003e":["[a]`"],"Enum) as":["`[x,"],"Enum, so":["you"],"Enum, which":["will"],"Enum. You're":["using"],"Enum` and":["it"],"Eq (a,":["b)"],"Eq [a]":["where"],"Eq a":["=&gt;","=&gt;","where","where","where","where","where"],"Eq b)":["=\u003e"],"Eq for":["Robot"],"Eq typeclass.":["In"],"Eq, Ord,":["Show"],"Equilateral has":["3,"],"Equilateral] !!":["equalSideCount\u003c/pre\u003e"],"Er, my":["bad,"],"Eratosthenes from":["the"],"Erlang I":["like"],"Erlang or":["ML"],"Erlang with":["dialyzer."],"Erlang, or":["ML"],"Err, good":["point","point."],"Err, not":["quite,"],"Error Driven":["Development™"],"Error: Redundant":["bracket","bracket","bracket"],"ErrorT? I":["tried"],"Errors: 0":["Failures:","Failures:","Failures:","Failures:","Failures:"],"Especially makes":["sense"],"Essentially the":["same"],"Eta reduced":["`isEmpty`:"],"Eta reduction":["is"],"Eta-conversion is":["exactly"],"Eta-reduction (in":["the"],"Etrepum's useful":["comments"],"Evaluation and":["normal"],"Even `unsafePerformIO`":["doesn't"],"Even better":["might","would","is"],"Even if":["it","Haskell","I","you","that's"],"Even simpler":["than"],"Even the":["cabal"],"Even though":["the","there"],"Even to":["get"],"Every so":["often"],"Everyone else":["gets"],"Everything else":["looks","here","looks","looks","looks","looks","you","looks","is","looks","in","looks"],"Everything here":["looks","looks","looks","looks"],"Everything is":["also","great","nice","OK","working","nice,"],"Everything looks":["good","good","pretty","good","great.","nice","great"],"Everything that":["_etrepum_"],"Exactly the":["way"],"Examples where":["this"],"Excellent point,":["thanks!"],"Excellent remark!":["Thank"],"Excellent, `wordsBy`":["was"],"Except `readTVarIO`":["this"],"Exception: stack":["overflow","overflow","overflow","overflow","overflow","overflow"],"Exercism showed":["up"],"Exercism to":["learn"],"Exercism's github":["and"],"Explicit Recursion](http://www.haskell.org/haskellwiki/Haskell_programming_tips#Avoid_explicit_recursion),":["can"],"Explicit recursion":["always"],"Exported functions":["(and","should"],"Expressed this":["way,"],"Expressing this":["as"],"Expressions make":["this"],"FFI calls":["or"],"FFUUUUU precedence":[";)"],"FOR LOWERCASE)":["message`."],"FP lang":["with"],"FP languages":["that"],"FP, using":["accumulator"],"FWIW I":["also"],"FYI there":["are"],"FYI: since":["every"],"Factored out":["```name'```"],"Failure in:":["0:1:add","12:questioned","12:questioned","12:questioned","4:normalizeCiphertext:0","0:5:new"],"Fair enough":["if"],"Fair enough!":["(That'll"],"Fair point":["on"],"Fair point,":["I'll"],"False &gt;&gt;=":["return"],"False -":["but"],"False --":["This"],"False =":["undefined","True`","0"],"False ==":["False`","0"],"False and":["True"],"False if":["there","the"],"False into":["0"],"False is":["0"],"False stands":["for"],"False |":["True"],"False\" line":["seems"],"False, False,":["True..."],"False, so":["you"],"False. Also":["all"],"False. So":["you"],"False] and":["then"],"False` for":["clarity."],"False` has":["exact"],"False` is":["equivalent"],"False` isn't":["strictly"],"False` so":["they're"],"False` to":["`isQuestion"],"False` when":["`x"],"False`. How":["could"],"False`. One":["needs"],"False`. So":["the"],"Falses to":["1,"],"Fantastic. I":["never"],"Feedback is":["very"],"Feel free":["to","to","to","to","to"],"Feeling a":["bit"],"Feels like":["it"],"Felt kind":["of"],"Felt like":["I'd"],"Few things":["to"],"Fifth Monday":["in"],"Figured out":["you"],"Final test":["doesn't"],"Finally figured":["out"],"Finally had":["an"],"Finally the":["answer"],"Finally, the":["way"],"Finally, you":["have"],"Find a":["start"],"First I":["would","tried"],"First I'm":["searching"],"First [detectSilence,":["detectShout,"],"First let":["me"],"First monoid)":["might"],"First newtype":["and"],"First of":["all,"],"First pass,":["I"],"First solution":["is"],"First time":["I"],"First variant":["has"],"First you":["have","don't"],"First, I":["agree"],"First, Second,":["Third,"],"First, its":["much"],"First, you":["have"],"First. The":["`fromJust`"],"First..Fourth which":["would"],"Fixed the":["solution","capitalization"],"Fixed this":["up"],"Fixed up":["the"],"Fixed. Thanks":["for"],"Fixing this":["is"],"Flase\u003c/pre\u003ebecause you":["know"],"Flip tends":["to"],"Flipped the":["args"],"Flipping that":["order"],"Float -&gt;":["Float`."],"Float in":["any"],"Float or":["Double"],"Float` instead?":["e.g."],"Float`. Had":["some"],"Floating type,":["you"],"Fold looks":["unnecessary"],"Foldable BST":["where","where","where"],"Foldable and":["Monoid"],"Foldable introduced":["based"],"Foldable next":["instance"],"Foldable, here's":["an"],"Foldable, just":["add"],"Folding just":["on"],"Foldl Foldl'":["on"],"Foldl' is":["almost"],"Foldl' on":["the"],"Foldr usage":["here"],"Following Twisol's":["advice,"],"Following discussion":["on"],"Following this":["considerations,"],"Following your":["advice"],"Foo bar,":["you"],"Foo.Errors. This":["allows"],"For Bob,":["it's"],"For Great":["Good'."],"For Maybe,":["`foo","`ma"],"For `allergies":["509`"],"For `closeAccount`":["you"],"For `incrementBalance`":["to"],"For `isShout`,":["think","as"],"For `prettyPrint`,":["`Text.Printf`"],"For `silence`":["you"],"For `sing`,":["I"],"For `splitWords`":["you"],"For `toPlant`":["I"],"For `toRNA`":["you"],"For a":["simple","human","much","great","great","great","great","refresher","type","few","great","great","great","great","great","good","great","slightly","great","great","good","great","great","deeper","one-line","great","great"],"For added":["peace"],"For better":["explanations"],"For bonus":["points,","points,"],"For completeness/consistency":["then,"],"For consistency's":["sake,"],"For conversation's":["sake,"],"For count,":["you"],"For efficiency":["here"],"For example":["`module","`map","`(not","[this","`f`","given","you","with"],"For example,":["`head","you","adding","`import","a","`robotName","if","`word'","the","`foldr`","moving","`any`","if"],"For example:":["http://hackage.haskell.org/package/base-4.6.0.1/docs/Prelude.html#v:map","`[a,"],"For extra":["points,","practice,"],"For future":["reference,"],"For great":["information"],"For implementing":["`process`"],"For instance,":["`set","have","what","why"],"For lists,":["`a"],"For me,":["readability"],"For more":["information","information","information","information","information","about","information","information","efficiency","information","info","information"],"For n=4":["it's"],"For nice":["output"],"For now":["it's"],"For older":["distributions"],"For optimizing":["the"],"For predicate-y,":["filter-y"],"For readability":["I'd"],"For readability's":["sake"],"For readability,":["you","you"],"For reference,":["`words"],"For row":["`n`"],"For saving":["the"],"For similar":["strictness/space","reasons"],"For small":["lists"],"For some":["reason,","reason"],"For sorted,":["you"],"For strictness":["reasons,"],"For such":["a"],"For that":["matter,"],"For the":["map","\"Woah,","same","case","rationale,","most","latter","same","sake","older","three","parsing","appropriate","same"],"For these":["predicates","prime"],"For this":["situation,","particular","use","kind","exercise,","case,","snippet","exercise","reason,","exercise","exercise"],"For top-level":["functions"],"For validNucleotide,":["some"],"For what":["it's"],"For where":["swapMVar"],"Forgot about":["those"],"Forgot to":["use","mention","mention","switch"],"Form; the":["Map"],"Formatting suggestion":[":"],"Found it":["in"],"Fourth are":["of"],"Fractional a":["where"],"From [base](http://hackage.haskell.org/package/base-4.6.0.1/docs/Foreign-Marshal-Utils.html#v:fromBool)":["(Prelude,"],"From a":["quick"],"From containers":["documentation:"],"From my":["end,","limited"],"From test":["suite:"],"From the":["documentation","README:","docs:","sound","api"],"Function application":["binds","has","has","always","is","in","!=","is","with","is"],"Function arguments":["are"],"Function names":["tend"],"Functional Data":["Structures"],"Functional Programmers":["meeting."],"Functions have":["a"],"Functions of":["form"],"Functions that":["are"],"Functor ((,)":["a)","a)","a)"],"Functor ((-\u003e)":["r)","r)"],"Functor (Either":["a)","a)"],"Functor (`snd`":["is"],"Functor IO":["--","--"],"Functor Maybe":["--","--"],"Functor []":["--","--"],"Functor and":["thus","Alternative"],"Functor are":["available"],"Functor f":["where","=\u003e","where","where"],"Functor instance":["for","and","for","for","for","on","to","is","on","for","that","of"],"Functor is":["a","a"],"Functor such":["that"],"Functor the":["instances"],"Functor\" in":["Base.lhs"],"Functor's `fmap`":["is"],"Functor, Applicative":["and"],"Functor, Applicative,":["and/or"],"Functor, and/or":["Applicative"],"Functor. Functors":["have"],"Functor/Applicative style":["seems"],"Functors have":["only"],"Funny how":["you"],"Funny that":["I"],"Funny, I":["was","was"],"Funny, ubuntu":["12"],"Furthermore consider":["what"],"Furthermore, if":["you"],"Fusion is":["an"],"G |":["T","A","A","C","T"],"G, and":["A","T."],"GADT here":["allows"],"GADTs can":["be"],"GAH... I":["had"],"GC, so":["all"],"GH repositories":["etc"],"GHC (or":["maybe"],"GHC 7.4.1.":["The"],"GHC 7.8":["is"],"GHC HEAD,":["so"],"GHC and":["with","you'll","GHC"],"GHC are":["really"],"GHC automatically":["created"],"GHC can":["often","do","do","do","do"],"GHC compiler":["is","can"],"GHC complains":["about"],"GHC converted":["`9223372036854775808`"],"GHC core":["code."],"GHC defines":["these"],"GHC does":["mechanically"],"GHC gives":["two"],"GHC has":["a","a","fromBool"],"GHC in":["my"],"GHC is":["done","smart","going","probably","complaining"],"GHC issues":["warnings"],"GHC often":["has"],"GHC optimizer":["can","can"],"GHC raises":["a"],"GHC should":["do"],"GHC smart":["enough"],"GHC specific":["so","trick"],"GHC specific.":["Other"],"GHC supports":["OverloadedStrings."],"GHC there":["are"],"GHC to":["build"],"GHC will":["probably","figure","choose","do","do"],"GHC with":["optimizations"],"GHC would":["optimize"],"GHC's RULES":["pragma,"],"GHC's TupleSections":["feature"],"GHC's float":["out"],"GHC's float-out":["optimization"],"GHC's optimizer":["should","can"],"GHC's prelude":["can"],"GHC) It's":["a"],"GHC.* for":["any"],"GHCI I":["get"],"GHCI `square":["64`"],"GHCI and":["run"],"GHCI is":["great"],"GHCI). The":["code"],"GHCI, but":["if"],"GHCI? I":["can't"],"GHCi (which":["never"],"GHCi but":["probably"],"GHCi is":["one"],"GHCi version":["7.4.2"],"GHCi will":["not"],"GHCi you":["can","can"],"GHCi, no":["optimizations"],"GHCi, version":["7.6.3:"],"GHCi, which":["does"],"GHCi](http://vimeo.com/68669612) tomorrow":["morning"],"GND given":["`[Base]`"],"Gaelan, the":["`msg"],"Gaelan. That":["does"],"Gaelan: extracting":["your"],"Gah, I":["left"],"Gah, precedence":["rules!"],"Gah... this":["was"],"Generalizing to":["`Num`"],"Generally I":["also"],"Generally it's":["best"],"Generally one":["should"],"Generally speaking":["you","if"],"Generally speaking,":["`s''`","top-level","reviewers","lists","all"],"Generally using":["`fromListWith`"],"Get the":["`mod"],"Getting rid":["of"],"Getting the":["trailing"],"Ghc complains":["that"],"Ghci is":["not"],"Give functions":["used"],"Given a":["variable","better"],"Given that":["the","each","(for","number,"],"Given that,":["you"],"Given the":["`\\n`","assumption"],"Given these":["two"],"Given your":["reasoning,"],"Go to":["Functor"],"Going for":["clarity"],"Going to":["change","have"],"Gone from":["30"],"Good call":[":)","on"],"Good call!":["Forgot"],"Good call,":["thanks.","thanks.","thanks.","I"],"Good call.":["That"],"Good catch":["-","with",":)","with"],"Good catch!":["Thanks"],"Good catch,":["the","I","that"],"Good idea":["!"],"Good idea,":["I'll","thanks"],"Good job":["with","with"],"Good luck":["with"],"Good point":["about","about",":)","crazymykl.","about","about","about"],"Good point,":["I","thanks!","thanks.","thanks.","thanks."],"Good point.":["So","It","The"],"Good points!":["I"],"Good points,":["though"],"Good question":["about"],"Good question!":["There"],"Good shout":["@pierce"],"Good solution;":["for"],"Good start,":["structuring"],"Good suggestion":["about"],"Good tip,":["thanks"],"Good to":["know","learn","know.","know.","know.","know,"],"Good\" I":["will"],"Good'. My":["original"],"Google Search":["Driven"],"Got Haskell":["and"],"Got a":["better"],"Got home":["late"],"Got it":["point"],"Got it.":["Thanks"],"Got rid":["of","of"],"Got surprised":["when"],"Gotta love":["the"],"Gotta say":["I"],"Grade [Child]":["}`.","}"],"Grade). Can":["you"],"Great Good\"":["I"],"Great Good'.":["My"],"Great call":["on"],"Great feedback,":["thanks."],"Great point":["@jolie!","re:"],"Great tip!":["See"],"Great, I'd":["write"],"Great, it":["did"],"Great, just":["what"],"Great, that":["solves"],"Greatly simplified":["random-string-by-pattern"],"Grr, I":["wish","tried"],"Guards are":["processed"],"Guards basically":["removed"],"Guards looks":["better"],"Guards may":["be"],"Guards seemed":["slightly"],"Guards, are":["better"],"Guess I":["should"],"Guess all":["of"],"Guess that":["solves"],"Guess you":["need"],"Guess you're":["right."],"Guess, how":["is"],"HARD to":["get"],"HEAD version":["of"],"HEAD, so":["it's"],"HELL WERE":["YOU"],"HINT: You":["won't"],"HINT: don't":["call","use"],"HINT: look":["at"],"HLint hint":["for"],"HLint suggested":["I"],"HLint will":["recommend"],"HLint) complained":["about"],"HLint? I":["forget"],"HOMG I":["can't"],"HSpec) without":["worrying"],"HUGE jump":["with"],"HUnit loaded":["would"],"HUnit that":["comes"],"Ha ha!":["I"],"Ha ha.":["Now"],"Ha! I":["had"],"Ha! Well,":["that..."],"Ha.. Really":["I've"],"Ha; you're":["right."],"Hackage that":["does"],"Had some":["trouble"],"Had to":["look"],"Had you":["defined"],"Haddock comments":["at"],"Haddock comments,":["this"],"Haddock documentation":["for"],"Hah! I":["didn't","usually"],"Hah! Just":["found"],"Hah, I":["see"],"Haha, thanks!":["Funny,"],"Haha. Not":["sure"],"Haha; I":["never"],"Handing nonsense":["inputs"],"Handling all":["possible"],"Happy that":["I"],"Happy to":["help"],"Happy? let":["me"],"Hard to":["say"],"Harder to":["do"],"HashMap from":["unordered-containers"],"HashMap which":["would"],"Hashable instead":["but"],"Hashmap, but":["rather"],"Haskell \"might":["be"],"Haskell (a":["two","la"],"Haskell (namely":["lazy"],"Haskell (putting":["the"],"Haskell (robot-name":["seems"],"Haskell (there's":["usually"],"Haskell -":["what's"],"Haskell 98's":["Prelude."],"Haskell For":["Great"],"Haskell I'd":["highly"],"Haskell I'm":["sure","doing"],"Haskell I've":["ever","done"],"Haskell IO":["a"],"Haskell Platform":["that","for","on","anywhere","so",":)","(you","but","has","and","that","2013.2.0.0.","(at","(although","2013.2.0.0,","(which","(as","installed.","yet."],"Haskell Platform\"":["would"],"Haskell Platform)":["https://gist.github.com/etrepum/6428601","in"],"Haskell Platform,":["but","can","but","so","there"],"Haskell Platform.":["I","At","Much"],"Haskell Platform…":["but"],"Haskell Wiki](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl')":["for"],"Haskell _should_":["be"],"Haskell `1":["+"],"Haskell a":["String"],"Haskell always":["has"],"Haskell and":["have","I","I","I","have","can't","Elixir","any","OCaml.","it's"],"Haskell applications,":["I'm"],"Haskell are":["done","only"],"Haskell as":["I","you'll"],"Haskell assignments.":["You"],"Haskell at":["all\""],"Haskell book":["that"],"Haskell but":["I","I","clearly"],"Haskell calls":["them"],"Haskell carry":["a"],"Haskell chapter":["about"],"Haskell class":["I've","would"],"Haskell code":["is","I","usually","is","doesn't","isn't","looks","to","today).","is","uses","uses","and"],"Haskell code.":["Here's","Flipping"],"Haskell compiler":["works"],"Haskell convention":["is"],"Haskell data":["structures,"],"Haskell developers":["tend","wouldn't","would","would","wouldn't","are","would","who","wouldn't","wouldn't","would","would","would","seem","would","wouldn't","will","would","won't"],"Haskell docs":["about"],"Haskell documentation,":["so"],"Haskell does":["a","have","have"],"Haskell doesn't":["have","have,","support","come"],"Haskell equivalent":["of"],"Haskell ever.":["Feedback"],"Haskell exercises":["recently","without"],"Haskell exercises.":[":S"],"Haskell expert":["to"],"Haskell expert,":["I"],"Haskell for":["Great","some","a","a","a","a","a","some","a","making"],"Haskell function":["with"],"Haskell functions":["names"],"Haskell handle":["the"],"Haskell handles":["caching"],"Haskell has":["more","an","a","a","a","a","a","a","an","a","a","non-strict","a","a","the","a","a","the","a"],"Haskell here,":["but"],"Haskell http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf":["–","has"],"Haskell idioms":["I"],"Haskell idiom…":["I"],"Haskell if":["a"],"Haskell involving":["mutation,"],"Haskell is":["very","non-strict,","extremely","to","to","concerned","lazy","higher","lazy,","almost","to","great:","a","here:","non-strict","just"],"Haskell is...":["using"],"Haskell it's":["pretty","common","customary"],"Haskell keeps":["working"],"Haskell long":["enough"],"Haskell looks":["like"],"Haskell may":["be","be"],"Haskell mentor":["haha!"],"Haskell methods":["that"],"Haskell myself":["and"],"Haskell newbie":["myself"],"Haskell newbie.":["Can"],"Haskell noob":["and"],"Haskell often":["compile"],"Haskell or":["not,","something","otherwise)"],"Haskell precedence":["rules,"],"Haskell prelude":["has"],"Haskell pro's":["eye"],"Haskell problems":["so"],"Haskell program":["I've"],"Haskell program,":["so"],"Haskell programmers":["to"],"Haskell programs.":["Try"],"Haskell projects":["I've"],"Haskell randomness":["were"],"Haskell really.":["So"],"Haskell reddit":["feed"],"Haskell return":["is"],"Haskell section":["here)."],"Haskell short":["variable"],"Haskell so":["I","this","a"],"Haskell solutions":["I've","that"],"Haskell some":["additional"],"Haskell specific":["exercises"],"Haskell standard":["libraries","like"],"Haskell stuff":["like"],"Haskell style":["guide](https://github.com/tibbe/haskell-style-guide/blob/master/haskell-style.md#imports)","(if","though,","requires","is"],"Haskell style,":["you"],"Haskell style.":["In"],"Haskell syntax":["than"],"Haskell tests":["were","will"],"Haskell that":["I","seem"],"Haskell there":["really"],"Haskell thing":["to"],"Haskell to":["implicitly","use","write","only","me…","write","have","me,","write","avoid","understand","learn","learn"],"Haskell today,":["but"],"Haskell too,":["you"],"Haskell track":["to"],"Haskell tutorial":["which"],"Haskell use":["Int."],"Haskell use,":["I"],"Haskell users":["would"],"Haskell uses":["Text","juxtaposition"],"Haskell variable,":["and"],"Haskell was":["a"],"Haskell way":[":)","(a","of","instead","to"],"Haskell when":["the"],"Haskell wiki":["has","to","and"],"Haskell will":["take"],"Haskell work":["differently"],"Haskell works":["differently."],"Haskell you":["write","can","will"],"Haskell's `Maybe`":["in"],"Haskell's arrays":["better."],"Haskell's built-in":["\"guards\""],"Haskell's compiler":["may"],"Haskell's coverage":["of"],"Haskell's declarative":["syntax"],"Haskell's evaluation":["works","semantics:","model","model","works","works","actually","works","works,","works","works","works)","works:","strategy","works:","works","works","works,","works,","works,","model","model"],"Haskell's execution":["model"],"Haskell's explanation":["for"],"Haskell's guard":["lent"],"Haskell's layout":["rules"],"Haskell's laziness,":["not"],"Haskell's lazy":["evaluation"],"Haskell's list":["comprehensions"],"Haskell's non-strict":["evaluation","evaluation.","evaluation,","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation.","evaluation","evaluation","evaluation","evaluation:","evaluation","evaluation","evaluation.","evaluation","evaluation,","evaluation,","evaluation:","evaluation.","evaluation,","evaluation:","evaluation","evaluation,","evaluation:","evaluation","evaluation.","evaluation,","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation,","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation.","evaluation","evaluation","evaluation","evaluation.","evaluation","evaluation","evaluation","evaluation"],"Haskell's non-struct":["evaluation"],"Haskell's optimisation":["process"],"Haskell's simple":["string"],"Haskell's try/catch":["implementation"],"Haskell's well":["regarded"],"Haskell) and":["calling"],"Haskell) don't":["require"],"Haskell, 6":["spaces"],"Haskell, I":["don't","am","haven't","copied"],"Haskell, I'm":["sure"],"Haskell, `Int`":["is"],"Haskell, `silence(statement)`":["isn't"],"Haskell, and":["Data.Text","I'm","this","apparently","math"],"Haskell, be":["as"],"Haskell, but":["for","it","their","nevertheless"],"Haskell, check":["out","out"],"Haskell, coming":["from"],"Haskell, for":["succinctness,"],"Haskell, function":["application","application"],"Haskell, generally":["speaking,"],"Haskell, it":["should"],"Haskell, it's":["easy","not"],"Haskell, just":["the"],"Haskell, only":["pattern"],"Haskell, parentheses":["are"],"Haskell, please":["guide"],"Haskell, say,":["I'll"],"Haskell, since":["lists"],"Haskell, so":["I","I'm","I","I'm","the","you"],"Haskell, so,":["I"],"Haskell, the":["commonly"],"Haskell, this":["is","is"],"Haskell, with":["IO-based"],"Haskell, you":["hardly","can"],"Haskell-like with":["abstract"],"Haskell-y way":["to"],"Haskell-y. How":["can"],"Haskell-y. Neither":["is"],"Haskell. Building":["it"],"Haskell. Convenience":["operators"],"Haskell. First":["I"],"Haskell. I":["don't"],"Haskell. Pattern":["matching"],"Haskell. Relying":["on"],"Haskell. Same":["with"],"Haskell. The":["only"],"Haskell. This":["isn't"],"Haskell.org also":["the"],"Haskell: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf":["-","–","-","-","-"],"Haskell? I":["find"],"Haskell? I'm":["confused"],"Haskell? Should":["it"],"Haskell](http://learnyouahaskell.com/)_? I":["hadn't"],"Haskell_. I":["actually"],"Haskelled enough":["yet?"],"Haskeller, so":["writing"],"Haskellers are":["more"],"Haskellers cry;":["I'm"],"Haskellers often":["like"],"Haskellers prefer":["naming"],"Haskellers to":["understand"],"Haskelly way":["of"],"Hate to":["tell"],"Have a":["look","look","look","look","look","look","look"],"Have to":["admit"],"Have we":["spoken"],"Have you":["considered","seen","thought","seen","tried","considered","looked","considered","considered","considered","thought","had","considered","considered","read","thought","looked","considered","considered","noticed"],"Having a":["`Display","full"],"Having and":["`=`"],"Having nosed":["about"],"Having point":["free"],"Having said":["that,"],"Hayoo and":["Hoogle"],"Heath-Robinson here-":["but"],"Heh, I":["certainly"],"Heh, yes,":["I"],"Hehe, sure":["I"],"Help! (and":["thanks"],"Hence the":["activation","activation"],"Here I":["tried","built"],"Here are":["some","the","some","some","the","the"],"Here fields":["`a`"],"Here is":["a","another","my"],"Here length":["is"],"Here reader":["monad"],"Here the":["prefix"],"Here you":["will"],"Here's a":["hint:","sketch","hint:","hint:","way","hint:","sort","typical","demonstration:","hint:","hint:","hint:","hint:"],"Here's an":["example","example:","example","example","interleaving","example.","example"],"Here's another":["one,"],"Here's how":["you","I","I"],"Here's mine:":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/beer-song/example.hs"],"Here's no":["chance"],"Here's one":["way","way"],"Here's the":["data","correct","spoiler","simplest","import"],"Here's what":["mine","the","it","mine","thread","thread","you'd"],"Here, you":["only"],"Hey @yasmeen":["thanks"],"Hey kadoban.":["Thank"],"Hey thanks":["for"],"Hey this":["is"],"Hey, I":["misunderstood"],"Hey, let's":["keep"],"Hi! Looks":["good!"],"Hi, ```all":["isSpace"],"Hi.. ```all":["isSpace"],"Higher level":["code","functions"],"Hint: `any`":["and/or"],"Hint: `count`":["should"],"Hint: take":["a"],"Hint: the":["enumerable"],"Hint: try":["to"],"Hint: you":["might","may"],"Hm as":["far"],"Hm maybe":["some"],"Hm, I":["can't","don't"],"Hm, `toComparable`":["might"],"Hm, if":["you"],"Hm. Good":["point,"],"Hm.. I":["kind"],"Hmh, right.":["Fixed,"],"Hmm, I":["don't","thought","was","can't","should"],"Hmm, I'll":["redo"],"Hmm, I'm":["not"],"Hmm, `take":["(length"],"Hmm, could":["just"],"Hmm, that's":["odd"],"Hmm, well,":["there's"],"Hmm, why":["Prelude.map?"],"Hmm, yeah":["should"],"Hmm, yeah.":["Looks"],"Hmm, yes.":["Guess"],"Hmm, yes...":["I"],"Hmm, you":["mean"],"Hmm. Definitely":["shorter."],"Hmm. I":["should","suppose"],"Hmm. It":["would"],"Hmm. Seems":["like"],"Hmm... coming":["from"],"Hmm... in":["[multiset](http://hackage.haskell.org/package/multiset-0.2.2/docs/Data-MultiSet.html)"],"Hmm; I":["couldn't"],"Hmmm... I":["might"],"Holy crap,":["you"],"Honestly, I":["only","haven't"],"Honestly... I":["was"],"Hoo boy...":["this"],"Hoogle by":["word"],"Hoogle can":["even"],"Hoogle for":["some"],"Hoogle is":["a"],"Hoogle makes":["you"],"Hoogle to":["see","be"],"Hoogle useful":["to"],"Hoogle](http://www.haskell.org/hoogle/?hoogle=count). Is":["`B.pack`"],"Hope that":["makes"],"Hope this":["is"],"Hope you":["know"],"Hopefully I":["didn't"],"Hopefully it's":["mostly"],"Hopefully my":["latest"],"How about":["`Data.Map.fromListWith`","`last`","building","refactoring","`Map.findWithDefault`?","now?","`ifNull","trying","```ceiling```"],"How all":["this"],"How can":["this","I","I","you","I","I"],"How could":["you","you","you"],"How did":["I","you","I"],"How do":["you"],"How does":["it"],"How is":["is","it"],"How many":["numbers"],"How/where can":["I"],"However Criterion":["(package)"],"However I":["chose","could","thought","also","could"],"However I'd":["slightly"],"However I'll":["close"],"However `[1..dv]":["\u003e\u003e="],"However `where`":["will"],"However a":["map"],"However as":["each"],"However can't":["really"],"However for":["learning"],"However if":["algorithm"],"However it":["will"],"However printf":["for"],"However tests":["require"],"However the":["Boolean"],"However there":["is"],"However this":["is"],"However with":["big-O"],"However, I":["am","don't","do","think","have","can't","kept"],"However, I'd":["expect"],"However, Text":["is"],"However, because":["guards"],"However, consider":["using"],"However, if":["you"],"However, in":["this"],"However, it":["does"],"However, it's":["probably","not"],"However, just":["`map"],"However, maybe":["it"],"However, my":["particular","understanding"],"However, now":["that"],"However, this":["version"],"However, what":["do"],"However, will":["need"],"However, with":["all"],"However, yes,":["you"],"However, you":["can't","can"],"However, you'll":["notice"],"However, your":["code","`myInsert`"],"Huh. I":["get:"],"I \"borrowed\"":["the"],"I \"fixed\"":["everything"],"I (and":["hopefully"],"I (other":["may"],"I **hate**":["mixing"],"I *HIGHLY*":["recommend"],"I *am*":["thinking"],"I *know*":["it"],"I *think*":["I","the"],"I +1'd":["this"],"I /":["(and"],"I :":["l"],"I Actually":["wanted"],"I \\*thought\\*":["it"],"I _always_":["forget"],"I _could_":["have"],"I `evaluate'":["$"],"I absent-mindedly":["switched"],"I accept":["that"],"I accidentally":["the","didn't","submitted","resubmitted"],"I accidently":["submited"],"I achieved":["a"],"I acknowledge":["that"],"I actually":["used","was","meant","wanted","am","get","did","vary","had","think","really","really","prefer","made","looked","imported","do"],"I adapted":["this"],"I added":["a","type","it","that","the"],"I admit":["that"],"I after":["I"],"I again":["learnt"],"I agree":["with","with","that","explicit","with","that","with","that","that","with","that","with","that","on","with","it's","with","with","that","for","about","with","that","with","that","@gabriel,","with","with","that","with","with","with","with","that","it's","that","with","regarding","with","[from,","this","it's","that","it's"],"I agree,":["spec","point-free","I"],"I agree.":["Exported","Without"],"I agree;":["outside"],"I almost":["forgot","always"],"I already":["assumed","have","had","had","thought"],"I also":["found","prefer","like","like","like","considered:","took","took","used","prefer","thought","notice","switched","removed","removed","tend","like","like","like","suggest","like","get","switched","micro-benchmarked","considered","prefer","used","don't","wonder","tried","realized","realized","see","find","prefer","like","prefer","tried","found","could","need","did","started","could","am","think"],"I always":["explicitly","like","use","forget","try","go","forget","got","think","misuse"],"I am":["at","forced","in","with","too","always","struggling","very","using","using","afraid","happy","not","unsure","not","always","not","not","not","not","in","looking","also","more","sure","new","sooo","actually","not","certainly","not","having","determined","battling","still","missing","a","validating","not","attempting","not","successful..","in","not","not","sorry","in","not","still","actually","still","still","going","using","sure","unable","curious","not","really","not","quite","not","ready","not","not","not","not","fairly","also"],"I apologize":["if"],"I apply":["anagramForm"],"I appreciate":["all","that"],"I ask":["because,","you","it,"],"I asked":["myself","for","on"],"I asked.":["I"],"I assume":["they","I","you","that","there's","it","that","this","because"],"I assumed":["that","that","that"],"I avoid":["the"],"I avoided":["using","lists.","trying"],"I be":["concerned"],"I become":["more"],"I believe":["you're","a","is","that","that","there","it","that","that"],"I believe,":["needed"],"I bet":["I","there's","I've"],"I better":["get"],"I build":["my"],"I built":["the","my","a"],"I called":["mine","it","it"],"I came":["up","to","up","up"],"I can":["make.","find","simplify","certainly","resolve","think","remove","live","not","do","-","see","write","see","actually","expand","do","understand","see","see","think","ask","get","think","see,","see","do","make","suggest","annotate","play","understand","annotate","get","do","think","make?","get","use","make","keep","use","refactor","see","see","use.","pretend","see","see","tell,","dispense","imagine","tell","describe","store","do?","go","describe","make","see.","give","check","pass","write","do","see","see","tell.","whip","write"],"I can't":["really","pinpoint","find","figure","force","think","say","write","help","simply","find","think","figure","look","really","believe","say","figure","see","even","think","submit","thank","figure","grok","find","think","make","tell","pretend","believe","think","even","see","seem","skip","think","get","think","figure","think","derive","immediately","split","figure","really","say","win","imagine","come","quite"],"I can.":["I"],"I cannot":["find","help","see","see","use","use","see"],"I cannot.":["I"],"I certainly":["approve","couldn't","don't"],"I change":["it","the","it"],"I changed":["it","it","the","the","the"],"I cheated":["and"],"I checked":["[`map`'s","the"],"I checked,":["the"],"I choose":["liftM","`reverse`"],"I choosed":["to"],"I chose":["to","not","`IORef`","to","to","to","to","to","not"],"I cleaned":["up"],"I come":["back","to."],"I commented":["on"],"I compiled":["with"],"I completely":["forgot","missed","forgot"],"I confuse":["potential"],"I confused":["myself","hamming"],"I considered":["different","this","```fromListWith```","validating"],"I considered.":["I"],"I contributed":["the"],"I copied":["this","a"],"I could":["have","rewrite","have","eliminate","do","write","implement","handle","drop","just","reuse","have","write","give","replace","detect","make","have","eliminate","not","make","test","think","use","try","imagine","afford","of","go","have","have","not","get","get","simply","also","have","be","reduce","also","do","do","mark","remember","halve","have","think","understand","simplify","not","have","do","see","just","maybe","change","make","never","avoid","make","use","use","construct","dispense","have","get","eta","actually","do,","probably","have","get","have"],"I could've":["done","done"],"I could.":["It"],"I couldn't":["work","let","find","find","see","think","use","be","figure","make","figure","come","find","find","get","think","figure","get","figure","Hoogle","work","figure","find","figure","find","figure","get","think","get","decide"],"I count":["the"],"I create":["them?"],"I created":["to","a","a"],"I cut":["out"],"I dare":["not"],"I debated":["the","whether"],"I debug":["this"],"I decided":["to","to","to","to","wrapping","that","to","to","`(\\a","to","to","it","against","to","to","to","to","against"],"I declare":["the"],"I define":["the","Robot?"],"I defined":["instead","a"],"I defining":["the","the"],"I definitely":["failed","agree","prefer","want","had"],"I definitively":["need"],"I designed":["this"],"I determine":["if"],"I did":["replace","use","what","not","it","not","use","write","say","end","learn","have","consider","a","it.","it,","not","it","it.","use","mine","this","a","not","that.","something","write","look","favor","it","here","it","write","not","in","consider","try","consider","the","it.","but","it","everything","also","have","initially","consider","play","look","see","this","more","some","like","get","not","what","not","to","not","for","this.)","intend"],"I didn't":["even","think","know","even","even","feel","make","do","think","remember","think","know","find","feel","take","think","try","think","even","like","think","even","like","try","know","realize","even","want","know","know","actually","check","like","know","get","see","know","get","like","expect","know","know","bother","think","want","realize","know","know","do","want","think","write","know","know","realize","know","notice","just","consider","get","know","miss","find","realise","know","get","consider","like","think","use","even","know","notice","know","like","bother","see","think","realize","know","really","consider","see","know","notice","realize","in","think","see","use","know","notice","get","see","know","use","notice","like","know","notice","see","want","actually","actually","realize","notice"],"I didn't,":["the"],"I digest":["that"],"I disagree":["with"],"I discovered...":["MissingH!"],"I dislike":["the"],"I disliked":["that"],"I dismissed":["the"],"I do":["like","think","find","wonder","understand","agree","like","if","already","use","`runhaskell","like","not","not","respect","not","something","not","think","not","not","wonder","like","have","here,","not","think","not","not","admit","think","like","not","think","wish","anyway).","a","not","like","not","like","however.","think","hate","this","default","seem"],"I do?":["Or"],"I doing":["wrong?"],"I don't":["think","force","think","know","mind","think","really","know","think","think","sort","like","have","have","just","pass","think","think","mind","generally","know","think","know","think","think","yet","know","like","think","use","know","like","see","like","think","think","see","know","think","know","think","have","know","usually","see","like","know","think","think","think","think","think","really","think","care","like","like.","like","think","really","dispute","like","really","think","really","like","think","like","think","know","think","think","like","see","think","like","know","like","like","like","think","want","understand","like","want","feel","think","think","want","think","actually","export","think","see","use","have","think","commonly","totally","know","like","fully","think","want","see","really","know","understand","know","know","see","think","think","understand","know","know","expect","know","know","need","even...","see","consider","see","think","think","know?","agree","spoil","like","think","depend","think","like","get","know","like","really","have","see","know","think","like","really","think","know","know","understand","like","think","know","like","know","see","think","really","think","have","really","expect","see","even","think","think","understand","have","think","remember","know.","see","know","want","use","think","really","think","see","recall","like","think","think","think","find","think","really","really","understand","like","think","see","recall","bring","mind","know","think","like","think","really","want","know","think","like","fully","like","think","see","think","think","have","like","know","know","think","know","know","know","think","see","understand","like","know","like","see","think","like","remeber","want","understand.","think","think","understand","like","think","want","like","get","practice","really","need","know","think","think,","appreciate","think","quite","think","think"],"I don't.":["I"],"I don’t":["know","like"],"I doubt":["it'd","it"],"I eliminate":["`word`"],"I end":["up","up","up"],"I ended":["up","up","up","up","up","up","up","up","up","up","up"],"I especially":["like","like","liked"],"I eta":["reduce"],"I eta-reduce":["the"],"I ever":["get","know"],"I expect":["lots","it's","there's","a","even","to","that","`where`","`ord`","to","`rest`","reversing"],"I expected":["that","`[1..dv]"],"I export":["toward"],"I exposed":["them"],"I factored":["it","`nucleotides`"],"I fail":["to","to"],"I failed":["to"],"I favor":["in"],"I feel":["like","understandable)","like","about","about","like","like","that","its","than","like","pretty","kind","like","like","it","like","like","that","like","that","like","like","like","like","like","could","like","like","like","that","like","with","like","are"],"I fell":["like","into"],"I felt":["makes","the","that","`isSilence`","a","it","like","it","it","like","like","it","it"],"I fetched.":["Does"],"I fiddled":["with"],"I figured":["if","I","that","that","that","it","it","for","explicit"],"I figured,":["if"],"I finally":["wrote","got","understand.","have","figured"],"I find":["that","code","`fromListWith","prefixing","it","the","it","it","that","it","that","the","a","`countOccurrences","a","this","the","it","having","that","Applicative","the","this","the","solutions","it","more","it","the","Hoogle"],"I finished":["passing"],"I finished.":["But"],"I first":["don't","use","convert","realised","wrote","totally","wrote"],"I fixed":["the"],"I follow":["those","the"],"I follow.":["Why"],"I followed":["the"],"I forget":["about","a","to","about","to"],"I forgot":["to","to","to","this","to","to","to"],"I found":["this","it","a","the","a","it","it","it","an","the","another","[this](http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html)","space","incredibly","the","to","the","[this](http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html)","this","`uncurry`,","that","this","this","`insertWith`","more","out","the","no","no","this","the","to"],"I fully":["grok","understand","understand","understand"],"I gave":["them","it","up"],"I generally":["try","don't","avoid","like","err","like","use","agree.","prefer","prefer"],"I generated":["all"],"I get":["a","the","containers-0.5.0.0:Data.Map.Base.Map","at","problems,","that","my","this","rid","a","type","to","that,","some","it,","how","another","there.","to","an","it","a","any"],"I go":["back"],"I googled":["`haskell"],"I got":["rid","caught","a","some","into","the","the","values","too","a","to","distracted"],"I greatly":["appreciate"],"I guess":["I","that's","it","I","I","I","`ageOn","I","I","`foldl'`","I'm","this","I","I","I","the","I","the","it","I","now","I","I'm","I","I","you","i've","`primeFactors'`","it's","`maybeToList`","`difference","I","it's","a","that","it","I"],"I guess.":["The"],"I had":["in","never","a","no","done","to","to","a","them","looked","in","wrapped","`isAlpha`","a","a","refactored","deleted","got","no","that","master","that","to","to","had","no","to","no","thought","a","thought","an","to","meant","to","written","figured","originally","to","thought","before.","been","which","played","originally","the","no","to","to","`toLower'`","the","the","no","that","when","a","following","not","to","following","not","to","in","a","`rest'`","a","a","another","to","a","to","a","no"],"I hadn't":["heard","heard","heard","thought","had","when","thought","seen","thought","considered"],"I hate":["mixing"],"I have":["no","is","no","the","to","type","implemented","no","is","considered","to","been","no","with","describe","an","some","seen","used","always","for","modified","to","a","one","some","`sayNothing`","to","never","noticed","a","to","no","to","retained","used","to","some","finally","to","to","to","read","yet","actually","a","no","heard","@rae","this","destroyed","been","the","here).","no","no","a","little","used","to","to","uploaded","no","no","a","been","to","looks","python","a","also","to","no","to","a","no","is","no","to","the","no","a","no","a","a","not","submitted","not","no","thought","a","to","reverted","never","fail.","an",":-/","a"],"I have,":["following"],"I haven't":["worked","tried","liked","run","heard","done","been","tried","quite","been","been","used","mentioned","found","yet","yet","tried","taken","looked","noticed","responded","actually","quite"],"I haven't.":["Thanks"],"I hear":["your","you"],"I held":["there,"],"I hesitated":["to"],"I highly":["recommend","recommend","recommend","recommend","recommend","recommend","recommend","recommend","recommend","recommend","recommend","recommend"],"I hit":["the"],"I honestly":["do"],"I hope":["`stigid`","this","you'll","it's","it","I'm","my","it"],"I hoped":["to"],"I imagine":["it","the"],"I implemented":["like","this","it,","it:","all","it","my"],"I imported":["that","Data.Map"],"I improve":["this"],"I included":["the"],"I initally":["wanted"],"I initially":["started","had","wrote"],"I installed":["syntastic"],"I intentionally":["used","didn't"],"I interpreted":["the"],"I just":["suggest","stuck","noticed","missed","found","can't","fetched","don't","realised","can't","handled","read.","wasn't","discovered","deleted","submitted","used","ported","could","had","can't","didn't","need","not","set","left","wanted","want","meant","wanted","ran","simply","need","went","started","don't","had","realized","did","arrived","figured","wanted","realised","wanted","thought","wanted","use","wanted","implemented","wanted","being","ran","wasn't","finished","saw","got","did","wrote","wanted","blithely","wasn't","want","included","saw"],"I keep":["forgetting","making","getting","falling","forgetting"],"I kept":["parents","hitting"],"I kind":["of","of","of"],"I kinda":["expect","like"],"I knew":["I'd","in","about","how","somebody","`show`","that","someone","there","about","they","existed.","this"],"I know":["that","how","this","you've","this","of.","I","about","you've","there","exactly","of","better","exactly","that","the","what","of","that","how","the","I","I","you","that","Haskell","what","that","about","why","about","how","you","hugs","what","they","that","of.","of,","it","I","it's","about","it","there","```sorted```"],"I know),":["you"],"I know,":["prime","all","a"],"I know.":["But"],"I later":["remove"],"I learn":["that"],"I learned":["to","how","a","more","it","what","from"],"I left":["most","the","on","`foldl'`","the","the","the","it","it","the","some","the","`w'`","for"],"I lied,":["one"],"I like":["this","to","that.","to","the","the","the","your","that","the","the","that","it!","to","the","how","this,","the","your","the","to","it.","the","that","how","the","the","the","how","that","the","to","your","your","this,","it","my","the","how","the","`fold`","it","that","this","the","the","your","the","the","that","how","your","what","`TVar`s","it;","Djinn's","that","your","how","the","`freqDist`.","it.","how","your","Attoparsec","this","this","the","the","the","the","the","BangPatterns","to","that","this","the","is","to","the","that.","the","`isSuffixOf`","that","`last","the","the","the","there","how","that","that","that","your","the","the","the","this","it","filters","it.","this","the","how","when.","the","the","the","it","the","the","the","the","the","it.","the","this","that","for","the","this","the","how","the","`unwords`.","the","\u003c$\u003e","the","how","the","my","the","`splitAt`...","the","the","solution","attoparsec","your","this","pointfree","your","that","this","putting","traversable","your","the","putting","the","to"],"I liked":["the","in","the","my","having"],"I literally":["have"],"I load":["it"],"I look":["to","at"],"I looked":["a","at","at","at","up","up","for"],"I lost":["the"],"I love":["to","the","the","the","the","the"],"I made":["a","the","the","a","them","the","them","that","some","School"],"I make":["my","those","it","my"],"I managed":["to","to","to","to","to"],"I marked":["this"],"I may":["be","be"],"I mean":["by","to","using","that","that","this:","of","though","that","that","if","my","the","though."],"I mean,":["essentially,","to"],"I mean.":["There"],"I mean:":["2056320"],"I meant":["exactly","to","was","that","length,","in","to","`any`.","to","combinator","owl","eta"],"I meant,":["I"],"I mentioned":["in","earlier"],"I messed":["around"],"I might":["use","explicitly","try","consider","have","run","go","be","be","need","just","move","try","get","write","reevaluate","have","have"],"I might've":["written"],"I misinterpreted":["your"],"I misread":["that"],"I miss":["that!","something?"],"I missed":["that.","that","this","something",";)","to","this","that."],"I missing":["something?","something","something?","something","something?","something?","something?","something?"],"I misspelled":["the"],"I misunderstanding":["the"],"I misunderstood":["the","your"],"I misunderstood,":["I"],"I more":["often"],"I mostly":["just"],"I moved":["the","the","the"],"I much":["prefer"],"I must":["be","have","go"],"I must've":["missed"],"I need":["the","to","to","that","a","to","to","to","an","to,","to","to","some","strict","to","to","to","to","to","a","to","to","to","some","to","a","to","to"],"I need.":["Thanks!","`chunksOf`"],"I needed":["to","a","to","to","there,"],"I needed!":["And"],"I needed.":["I","Thanks"],"I never":["liked","used","know","even","saw"],"I new":["about"],"I normally":["would","put","like","only","expect"],"I not":["sure","understanding","sure"],"I notice":["that"],"I noticed":["that","recently","that","that","both","this","that"],"I now":["just","make"],"I often":["forget","see"],"I ommited":["the"],"I on":["the"],"I only":["see","need","did","uploaded","ported","replace","thought","ported","have","needed"],"I open":["up"],"I opted":["for"],"I originally":["used","had","started"],"I particularly":["don't","liked","like"],"I personally":["do","do","think","prefer","find","find","would","find"],"I picked":["a"],"I played":["with"],"I ported":["most","all","it.","the"],"I posted":["the","versus"],"I posted?":["Here's"],"I prefer":["to","function","to","parenthesizing","`f","`readStatement`","using","to","`String`","algebraic","to",":","`filter","v3","`hammingDistance`","the","`isAnagramOf`.","the","writing","point-free","it","to","it","the","the","guard","simple","looks","to","how","fromJust"],"I prefer,":["maybe"],"I prefer.":["There"],"I prefered":["not"],"I preferred":["this","to","not"],"I presume":["the","there's"],"I pretty":["much"],"I probably":["would've","should","prefer","shouldn't","need","should","should"],"I processed":["the"],"I produced":["this"],"I propose":["to"],"I provided":["an"],"I pull":["it"],"I pulled":["a"],"I put":["the","isSilence","in","the","`where`"],"I quite":["like","get","like","understand.","like"],"I ran":["into","the","out","into"],"I rather":["see"],"I read":["[this](http://www.haskell.org/haskellwiki/Stack_overflow)","the","the","the","in","a","your"],"I realise":["that","that"],"I realised":["that"],"I realize":["that","that"],"I realized":["that","that","that"],"I really":["like","hope","clever","don't","just","like","do","want","like","appreciate","like","like","hate","like","like","don't","understood","don't","need","like","like","wanted","like","appreciate","have","understand","just","don't","have","understand"],"I received":["the","from"],"I recommend":["reading"],"I reduced":["`isQuestion`"],"I refactored":["to","to"],"I reformatted":["this"],"I reimplemented":["high"],"I reinvented":["the"],"I remember":["reading","looking"],"I remembered":["that"],"I remotely":["understand"],"I remove":["it,"],"I removed":["the","the","the","the","the","bindings"],"I reorder":["them"],"I replace":["`safeLast`"],"I resisted":["putting"],"I revised":["the"],"I reworked":["it,"],"I rewrote":["this","almost","your","the"],"I right":["in","in"],"I rolled":["back"],"I run":["that","your","```last","the"],"I said":["\"I"],"I said,":["there's"],"I saw":["after","`fromListWith`","that","only","them!","recently","a","were"],"I say":["it","Python's","no.","here.."],"I say,":["will"],"I searched":["Hoogle"],"I see":["that","is","verse","you've","what","no","that","your","the","the","is","a","that","doesn't","`(repeat","`[1,","that","what","now.","there's","the","pretty","you","how","now.","it","`if`","what","a","what","no","what","at","nothing","that","now","what","thanks.","now","what","that","what","what"],"I see,":["I","it's","sorry,","thanks","thanks.","in"],"I see.":["I'm","So","I","Thanks","Where","So","Yeah"],"I seem":["to","to"],"I selected":["`foldr`"],"I separated":["`insert`","the"],"I should":["be","have","learn","have","be","make","just","probably","use","have.","have","add","remove","just","add","update","use","leave","seperate","probably","not","replace","put","just","choose","use.","have","know","be","have","have","use","prefer","return","be","really","be","validate","be","always","be","be","probably"],"I should've":["used","thought","read"],"I should,":["and"],"I shouldn't":["be"],"I showed":["the"],"I shunted":["to"],"I simply":["wasn't","wouldn't"],"I somehow":["doubt","totally"],"I sometimes":["err","find"],"I sort":["of","of","of"],"I sped":["it"],"I spend":["a"],"I spent":["the","a","an"],"I split":["it","them","a"],"I spoke":["about"],"I stand":["corrected."],"I start":["thinking"],"I started":["refactoring","with","with","wondering","out","to","passing","with","with","implementing","to","reading","rewriting","doing","refactoring.","using"],"I still":["fail","prefer","feel","haven't","missing","get","can't","do","missing","don't","don't","don't","can't","fill","need","do","don't","don't","think","get","like","haven't","have","have","have","don't","have","need","think"],"I stole":["some"],"I strip":["the"],"I struggled":["a"],"I stuck":["with","with","that","with"],"I stumbled":["around"],"I submit":["here.","here."],"I submitted":["my","an","two","it","that","a","this","a","the"],"I submitted,":["except"],"I submitted.":["I"],"I subtract":["from"],"I suggest":["that","having","reading","reading"],"I suggest,":["that"],"I suggested,":["I"],"I support":["experimentation"],"I suppose":["I","I","that","I","it","you","writing","this","the","there's","that","I'll","it","there","semantically","this","it's","I","I","it's","this","the","is","I",":)","instead","a","any","this","I","this","is","it","it's","you","I"],"I suppose,":["which","let's","but"],"I suppose.":["It"],"I surrounded":["the"],"I suspect":["you","that","that","I","that","I'm","from","that","it'll","that","it's","the","this","in","it's"],"I switched":["the"],"I take":["a","it","your","it"],"I tend":["to","to","to","to","to","to","to","to"],"I tested":["out"],"I then":["have"],"I there":["is"],"I think":["you'll","that","about","the","this","this","that","there","using","it's","this","this","most","this","this","hlint","the","you","you'd","this","it","you","they","using","I","you're","this","that","there","would","pattern","it","using","`Int`","it's","this","you","there","that","they","I","the","that","there's","the","your","it's","something","a","it's","`length","the","this","that","you","```filterString```","the","it's","you'd","the","I","this","you'll","most","for","some","it","it's","that","that","I'll","I","best","the","I'll","it's","about","I","you'll","I'm","you","it's","I","it's","both","it's","`number","this","you","I","you've","it's","the","you're","it","that","a","it","it's","this","`create`","you","it's","@jaiden","the","I","`isEmpty`","this","you","the","that","not","for","it","the","for","that","`orElse`","I've","the","the","`responseFor","it","the","that's","you'll","```dispatch```","it","a","it's","it","what","this","I've","it'd","in","about","if","it","grouping","`hash`","I","I","(when","I","this","it's","the","`grade`","this","it","there","you","that","you","it","it's","it's","this","the","because","it's","that","I","this","you","it","all","@mack","that's","you","in","you","you","sometimes","in","is","I","I","`isDelimiter`","this","it's","`[(nucleotide,1)","you're","the","this","we're","it","it's","`map","I","for","I'm","the","is","I","that","you","they're","the","the","there's","this","laziness","it's","I","I","I","I","I","it","it's","the","I","pattern-matching","you","it's","the","I","having","in","infix","`null","you","so.","you","it's","I","`prettyPrint`","there","I","such","I","iteration","it","point","this","they're","this",":p","it's","it","the","adding","this","both","I","I","I'll","the","point","iteration","the","it","being","I","the","this","is","line","this","I'll","I","that","I","I","the","there","pattern","`isDiag`","it'd","the","it","it'd","those","this","I","all","it's","that","I'll","`go","this","I","the","`isCapitalIfLetter`","that","you","that","were","that","that","I","I","the","a","for","that","I","this","I'll","a","it's","there","makes","I'm","coding","that","I","that's","it","I'll","I","it","I","I'll","I've","it's","I","I","I","`FlexibleInstances`","is","it's","that","you're","you'll","you","it's","I","there's","the","that","it","it","I","this","lines","```sort","it","```219```","it's","this","that","it","I","you'd","just","this","it's","it's","the","that's","this","is","about","the","there","the","a","either","it's","that","this","it's","translating","it","if","about","lenses","conventionally","that","```zs```","you","you'll","it","I'm"],"I think!)":["Was"],"I think,":["is","I","this","but"],"I think.":["It","You","It","Is","Plus"],"I thinking":["with"],"I thought":["about","it",":-)","`wordCount`'s","things","`isJibbersish`","was","it","that","this","I'd","so,","it","people","it","my","I'd","`isAnagramOf`","about","of","about","it","we","of","that","guards","I","it","it","that","I","that","it","`reverse`","I'd","of","it","compiler","of","that","that","you","that","`putMVar`","might","I'd","about","a","the","using","the","you","it","you"],"I throw":["a"],"I time":["a"],"I too":["think","tried"],"I took":["a","a","a","a","your","that","out","the"],"I tossed":["the"],"I totally":["missed","agree","agree","forgot"],"I transformed":["the"],"I tried":["an","a","to","searching","to","making","it","both","to","to","using","your","to","to","extracting","to","to","to","to","with","`fromListWith`.","your","another","to","to","to","some","extracting","to","`bit`","some","to","came","`toDecimal'`","to","to","very","to","the","it","to","to","to","it","doing","simplifying","doing","writing","everything","to","to","to"],"I try":["to","and","to","I","that","to","to"],"I tweaked":["what"],"I understand":["\"show\"","that","that","you","that","why","it","you...","that","-","the","these","your","it.","`const`","what","it),","the","the","now,","that","the","this","how","correctly","the","what","whether","that","what","your","what","that"],"I understood":["how","stream","doubling","that","correctly.","from"],"I updated":["the"],"I urge":["that"],"I use":[":info","[hoogle](http://www.haskell.org/hoogle/)","`sort`","bang-patterns","the","non-standard","one","`any`","it","bytestring","`specialChar`","for","`getStdGen`","a","```unowords```?","folds","```foldl'```?","a"],"I used":["here","`fromListWith`","MVar","Data.Time.Calendar.WeekDate.toWeekDate","`filter`","in","an","`Text.Regex.Posix`","ErrorT?","the","backpermute","Ruby","`zipWith","the","a","in","to","the","an","and","the","[criterion][1]","the","`isLower`","`\u003c$\u003e`","in","in","quotes","it","`foldWithIndex`","a","`MVar`s","function","just"],"I usually":["prefer","do,","do","put","only","like","see","put","don't","just","run","do","have","write","try","see","find","like","remember!"],"I very":["highly"],"I want":["to","sorted","it","any","my","to","to","to","to.","to","to"],"I want,":["ie."],"I wanted":["to","to","to","to","to","to","to","to","to","to","to","it","to","to","to","to","to","to","a","to","to","to","to","to"],"I was":["just","unfamiliar","maddeningly","thinking","referring","always","writing","just","trying","thinking","reading","also","thinking","able","trying","thinking","questing","going","looking","most","composing","after..","going","wondering","sure","wondering","trying","annoyed","looking","expecting","trying","cargo","porting","going","just","dissatisfied","wondering,","doing.","wondering","doing","wondering","just","doing","disappointed","not","aware","trying","a","really","just","being","going","just","optimizing","troubleshooting","a","not","under","just","somewhat","lucky","unaware","looking","confused","pretty","writing","trying","trying","trying","trying","unsure","wondering","mistaken","getting","wondering","[searching","just","happy","wondering","done,","using","looking","thinking","in","planning","thinking","recently","shown","probably","done","looking","using","completely","able","just","unable","also","just","a","juggling","ignoring","fixated","looking","also","wrong","doing","using","originally","trying","looking","referring","reading","thinking","under","trying","wondering","wondering","looking","compiling","under","wrong","thinking","starting","just","wondering","talking","completely","comfortable","getting","blinded","thinking","getting","trying","kind","wondering","going","reading","driving","thinking"],"I was.":["Still,"],"I wasn't":["going","sure","sure","using","much","too","sure","sure","familiar","sure","sure","referring","familiar","sure","sure","aware","really","aware","actually","sure","sure","on","aware","quite"],"I went":["ahead","and","with","ahead","with","for","back","for","a","ahead","for"],"I will":["now","look","point","probably","look","fix","still","shoehorn","revise","investigate","try","change","think","try","try","try","have","read","allow","have","make","leave","definitely","admit","try","have","have","re-write","try...","get","try","try","forget","have","try"],"I wish":["I","unsigned","I","`showIntegral`","I","there","there"],"I won't":["pick","be","pretend","know"],"I wonder":["if","if","if","whether","which","how","why","If","how","how","if","if","if","if","if","if","if"],"I wondered":["also","whether"],"I worried":["about"],"I worry":["that"],"I would":["wholeheartedly","have","use","change","not","try","prefer","use","refer","probably","also","get","expect","recommend","explicitly","probably","use","write","improve","improve","have","recommend","prefer","write","use","seriously","like","suggest","really","suggest","probably","recommend","have","add","say","expect","highly","make","use","try","expect","like","have","be","have","recommend","also","detect","also","group","only","lean","encourage","suggest","suggest","say","change","highly","explicitly","rather","probably","want:","be","keep","suggest","write","suggest","probably","prefer","expect","expect","recommend","also","expect","recommend","love","expect","expect","recommend","agree","argue","probably","suggest","tend","submit","always","suggest","also","probably","probably","try","expect","recommend","prefer","change","have","choose","not","appreciate","need","assume","be","prefer","recommend","also","suggest","expect","expect","normally","personally","just","like","separate","suggest","have","either","filter","pass","indent","just","also","have","recommend","be","put","go","have","still"],"I would've":["figured","used","written","gone","never","counted"],"I wouldn't":["recommend","need","be","use","necessarily","use","even","bothering","get","expect","worry","do","need","say","bother","get","even","be","have","have"],"I wound":["up"],"I write":["code,","this","\u003ccode\u003euracil"],"I wrote":["it","that","acronym,","the","this","it","the","it","this.","(","```and","can","the","tallyWord"],"I'd actually":["encoded","originally","use"],"I'd add":["a"],"I'd also":["have","find","define","write","use","recommend"],"I'd appreciate":["any"],"I'd argue":["that"],"I'd be":["happy","interested","pretty","pretty","tempted"],"I'd been":["looking"],"I'd break":["up"],"I'd certainly":["feel"],"I'd code":["that"],"I'd do":["that"],"I'd expect":["to","to","it","to","to"],"I'd extract":["the"],"I'd fixed":["the"],"I'd forgotten":["something...","about"],"I'd get":["a","\"Sure.\""],"I'd give":["an"],"I'd go":["look","with"],"I'd got":["for"],"I'd gotten":["it"],"I'd guess)":["and"],"I'd have":["been","fun","named","a","to"],"I'd highly":["recommend"],"I'd imagine":["the"],"I'd implement":["this","it"],"I'd inlined":["insertWord"],"I'd just":["write"],"I'd kill":["for"],"I'd like":["to","to","to"],"I'd love":["to","suggestions","to","to"],"I'd make":["is","a","is","is"],"I'd mention":["it","it."],"I'd merge":["that"],"I'd much":["rather"],"I'd never":["have"],"I'd not":["assign","use","say"],"I'd note":["here"],"I'd only":["be"],"I'd personally":["name"],"I'd prefer":["`last","to","flattened"],"I'd probably":["do","try","reverse","use","order"],"I'd put":["them","the","`someChars`"],"I'd rather":["not","not","not","not"],"I'd recommend":["this","using","solving","reading","figuring"],"I'd remove":["the"],"I'd rename":["`School`"],"I'd rewrite":["Map"],"I'd say":["this","it","that","Map","\"from","that","use","that"],"I'd skimmed":["that"],"I'd slightly":["changed"],"I'd sort":["values"],"I'd start":["the"],"I'd suggest":["installing","making","using","a","looking","taking","you","reading","this","getting","reading"],"I'd test":["`key"],"I'd then":["need"],"I'd think":["of"],"I'd throw":["that"],"I'd try":["it"],"I'd use":["isSpace","a","filter","`zipWith`","guard","different","sort","`&&`"],"I'd write":["`plant`","a"],"I'll add":["comment"],"I'll address":["other"],"I'll adhere":["to"],"I'll admit":["this"],"I'll be":["able","sure","able"],"I'll change":["it"],"I'll check":["out","those"],"I'll close":["this"],"I'll come":["clean:"],"I'll complete":["all"],"I'll definitely":["submit","give","hit","try","try"],"I'll delete":["it"],"I'll do":["that."],"I'll double":["check."],"I'll ever":["know"],"I'll find":["it"],"I'll fix":["that,","that.","that."],"I'll frequently":["leave"],"I'll get":["used","to","on"],"I'll give":["that","it","it","a","it","it","it","a"],"I'll go":["ahead","ahead","for"],"I'll have":["a","to","to","to","to","to","to","to","to","to"],"I'll incorporate":["your","it!"],"I'll keep":["it","it","refining...","it","the","that"],"I'll leave":["it","it","this","it"],"I'll look":["into","back"],"I'll modify":["my","this"],"I'll move":["on"],"I'll need":["to"],"I'll not":["qualify."],"I'll pass":["this"],"I'll poke":["around"],"I'll pretend":["that"],"I'll probably":["have"],"I'll pursue":["that."],"I'll push":["it","updates"],"I'll reach":["my"],"I'll read":["up"],"I'll redo":["it","it"],"I'll remember":["that!","that"],"I'll replace":["that."],"I'll rethink":["the"],"I'll revisit":["and"],"I'll see":["what","if"],"I'll start":["including"],"I'll stick":["with","with","to"],"I'll submit":["it,","my"],"I'll take":["it","a"],"I'll test":["it"],"I'll think":["about"],"I'll try":["that","to","to","it","to","to","to","to","the","to","to","doing","to","to","to","a","it"],"I'll tweak":["it"],"I'll unlock,":["but"],"I'll update":["soon.","that","the"],"I'll use":["regular","to","Text"],"I'll work":["up"],"I'll write":["some"],"I'm 99.99%":["sure"],"I'm OK":["with"],"I'm a":["vim","little","little","heavily","bit","bad","total","Haskell","big","complete","Haskell","little","little"],"I'm able":["to","to"],"I'm actually":["almost","not","filtering"],"I'm afraid":["I"],"I'm already":["using","pretty"],"I'm also":["quite","not","usually","doing"],"I'm always":["longing"],"I'm an":["idiot."],"I'm applying":["`makeThisFunctionPassTests`"],"I'm assuming":["the","that"],"I'm at":["least"],"I'm aware":["that","of),","of"],"I'm aware,":["importing"],"I'm back":["to"],"I'm basically":["guessing"],"I'm bothered":["by"],"I'm brand":["new"],"I'm brushing":["up"],"I'm catching":["the"],"I'm clearly":["missing"],"I'm coming":["across"],"I'm completely":["stumped,"],"I'm concerned":["about"],"I'm confused":["about","by","by"],"I'm considering":["to"],"I'm converting":["to"],"I'm correct":["then"],"I'm curious":["on","on","to","about","why","myself.","how","what"],"I'm curious,":["what's"],"I'm currently":["the","entirely"],"I'm debating":["how"],"I'm defining,":["and"],"I'm definitely":["still"],"I'm doing":["this","everything","the"],"I'm done.":["I"],"I'm failing":["to"],"I'm fairly":["certain","certain"],"I'm far":["from"],"I'm feeling":["like"],"I'm figuring":["out"],"I'm free":["I'll"],"I'm generally":["not"],"I'm getting":["better"],"I'm giving":["up."],"I'm glad":["I","you","I","I","my"],"I'm going":["to","to","to","to","to","to","to","to","to","to","to","to","to","in","to","to","to","to","to","to","off","to"],"I'm gonna":["keep","leave","go","skip","take"],"I'm guessing":["you"],"I'm hacking":["and"],"I'm happy":["with","with","to","I"],"I'm having":["trouble","trouble","difficulty"],"I'm honestly":["not"],"I'm in":["the"],"I'm interested":["in"],"I'm just":["starting","wondering,","doing","arguing","not","pointing","throwing","making","pointing","wondering","abstracting","always","pleased","BSing"],"I'm keeping":["those"],"I'm kicking":["myself"],"I'm kind":["of"],"I'm learning":["a","that"],"I'm learning,":["I"],"I'm looking":["forward","for"],"I'm lying":["here,"],"I'm marking":["this"],"I'm missing":["something.","some","something","something."],"I'm missing,":["which"],"I'm mistaken,":["a"],"I'm misunderstanding":["something,","something.","something"],"I'm more":["familiar"],"I'm much":["happier"],"I'm new":["to","to","to","to","to","to","to","to","to","to"],"I'm no":["longer"],"I'm not":["sure","saying","sure","happy","sure","including","sure","really","going","sure","sure","too","sure","sure","entirely","sure","familiar","a","only","a","sure","familiar","sure","a","sure.","sure","sure","familiar","saying","sure","sure.","actually","particularly","sure","sure","even","sure","completely","convinced","sure","a","as","sure","sure","sure","very","exposing","exposing","even","happy","sure","sure...","sure","sure","sure","sure","proud","sure","entirely","really","sure","sure","certain","sure","only","only","sure","familiar","sure","by","entirely","sure","a","a","sure","sure","sure","used","sure","entirely","sure","that","seeing","thrilled","sure","very","sure","sure","disagreeing","sure","sure","certain","sure","in","in","really","sure","sure","proud","nearly","sure","totally","sure","sure","sure","sure","sure","really","sure","experienced","quite","sure","quite","sure","a","aware","convinced","sure","sure","sure","sure","sure","sure","sure","sure","very","too","a","sure","satisfied","supposed","sure","sure","sure","familiar","sure","sure","exactly","sure","sure","sure","sure","sure,","sure","sure","sure","repeating","sure","100%","100%","understanding","sure","quite","really","a"],"I'm not.":["I"],"I'm now":["realizing.","following","pleased"],"I'm obviously":["not"],"I'm on":["7.0.4","mobile","GHC"],"I'm only":["doing"],"I'm open":["to"],"I'm overcomplicating":["things."],"I'm picking":["up"],"I'm planning":["next!"],"I'm pleased":["at"],"I'm pretty":["sure","new,","sure","sure","sure","sure"],"I'm probably":["missing"],"I'm quite":["worried","sure."],"I'm rather":["confused"],"I'm reading":["correctly,","it","it"],"I'm ready":["for"],"I'm realizing":["that"],"I'm really":["confused","new","nitpicking","stuck","stuck","struggling"],"I'm referencing":["`w`"],"I'm relatively":["new"],"I'm returning":["a"],"I'm satisfied":["with;"],"I'm saying":["that"],"I'm searching":["for"],"I'm seeing":["here"],"I'm slightly":["surprised","less"],"I'm slowly":["working"],"I'm so":["used","used"],"I'm starting":["to","to","to","to"],"I'm sticking":["with","with"],"I'm still":["performing","wrestling","on","a","new","not","just","honing","learning","confused.","not","trying","fairly","pretty","new,","not","learning","not","a","pretty","wrapping"],"I'm stuck":["on"],"I'm sure":["there","there's","you","pull","there","I'll","many","there","I","there's","fusion","that","there's","there","you","that","for","it","is","there","there's","I've","you"],"I'm sure,":["some"],"I'm surprised":["there"],"I'm talking":["about"],"I'm thinking":["take","now","I"],"I'm thrilled":["with"],"I'm too":["lazy"],"I'm truly":["very"],"I'm trying":["to","to","to","to","hard","to","to","to"],"I'm trying.":["It"],"I'm tying":["myself"],"I'm uncertain":["about"],"I'm understanding":["from"],"I'm unsure":["style-wise"],"I'm used":["to"],"I'm using":["Emacs","`isSuffixOf`","isPunctuation,","an","the","Data.Text","Exercism","the","the","GHCi"],"I'm very":["new","curious","enamoured"],"I'm wondering":["it","if","if","how","if"],"I'm wrong":["@jesus","in"],"I'm wrong)":["I.e.:"],"I've actually":["been"],"I've added":["that","an"],"I've addressed":["everything."],"I've already":["read","checked.","submitted"],"I've also":["made","modified","seen","included","read","solved","look"],"I've always":["found"],"I've been":["doing","trying","trying","taking","thinking","toying"],"I've benchmarked":["this"],"I've briefly":["described"],"I've changed":["the","the","this","the","the","`catMaybes","my"],"I've checked":["your"],"I've chosen":["to","a"],"I've combined":["the"],"I've come":["to","across.","to"],"I've completely":["forgot","forgotten","forgot"],"I've copied":["your"],"I've covered":["in"],"I've defaulted":["to"],"I've demonstrated":["that"],"I've described":["on","and"],"I've desided":["if"],"I've done":["the","here","it","thus","this"],"I've dropped":["guards,"],"I've ever":["written.","written."],"I've experimented":["with"],"I've filed":["an"],"I've fixed":["types","comment."],"I've forgot":["that","it"],"I've forgotten":["some"],"I've found":["this","to","that","so","for"],"I've googled":["a"],"I've got":["a","something","to","incomplete","the"],"I've had":["to","the","no"],"I've implement":["only"],"I've implemented":["in","the"],"I've incorporated":["the"],"I've introduced":["the"],"I've just":["read","submitted"],"I've learned":["some"],"I've left":["in"],"I've looked":["at,"],"I've made":["that"],"I've managed":["to","to","in"],"I've mess":["up"],"I've missed":["a"],"I've modified":["the"],"I've never":["done","actually","seen","seen"],"I've not":["managed","used","tried","find","thought"],"I've noticed":["is","about","is","that"],"I've only":["really"],"I've pushed":["a"],"I've read":["about","it,"],"I've read,":["for"],"I've relied":["on"],"I've removed":["the","the"],"I've renamed":["`when`"],"I've reshuffled":["the"],"I've rethought":["the"],"I've revised":["the"],"I've reworked":["```verse```"],"I've rewritten":["```capitalize```","it","```anagramsFor```","```wordCount```","```wordCount```","the","```validate```"],"I've ripped":["the"],"I've seen":["most","a","(and","`Dl`","it","it","a","this","for","of","no","ghc","someone","an","it","a","you"],"I've seen,":["variables"],"I've seen.":["Some"],"I've subitted":["a"],"I've submitted":["an","4th","a","a","this","a","a","a"],"I've switched":["from"],"I've thought":["enum","about"],"I've to":["use"],"I've totally":["missed","forgot","forgot"],"I've tried":["to","creating","using","to","MonadLoops","it","to","it","using","reading","with"],"I've updated":["my","comment,","my"],"I've used":["it","it...","any,","the","approach","`Data.Time.Calendar`","strategies","`Int`","`where`","slightly"],"I've written":["in","and","a"],"I've yet":["to"],"I)` aren't":["necessary"],"I*n+j. Also":["you"],"I, I":["actually"],"I, then":["jump"],"I.e. Vector":["a,"],"I.e. `as":["Map`"],"I.e. `diff":["x"],"I.e. it":["may"],"I.e. phrase":["it"],"I.e. same":["variable"],"I.e. you":["may"],"I.e.: `splitPlaces":["[3,5,7::Int]`"],"I.e.you don't":["need"],"I/O and":["Foreign"],"I18n translations":["are"],"I:l t":["V:s`."],"I? I":["tried","tried"],"IIRC they're":["all"],"IMHO `count":["'U'"],"IMHO `mod`":["inside"],"IMHO failing":["is"],"IMHO it":["will"],"IMHO making":["anagramsFor"],"IMHO sorting":["is"],"IMHO the":["code"],"IMHO, more":["explicit"],"IMHO, qualified":["imports"],"IMO this":["is"],"IMO, is":["the"],"IMO. I":["just"],"IMO. I'd":["certainly"],"INLINABLE fromListWith":["#-}"],"INLINABLE fromListWithKey":["#-}"],"INPUT: \u003cvalue\u003e,":["\u003clist-of-mappings\u003e"],"IO ()`":["since","(Control.Monad's"],"IO (Maybe":["Integer)"],"IO (that":["is,"],"IO --":["Defined","Defined"],"IO Monad,":["you're"],"IO String`":["you","as"],"IO String`.":["Take"],"IO Strings":["together"],"IO a":["bit."],"IO a`":["for"],"IO and":["mutable","other","readability","places"],"IO anyway,":["so"],"IO api,":["so"],"IO based":["mutable"],"IO format,":["but"],"IO gets":["involved"],"IO if":["you"],"IO in":["this"],"IO inside":["`atomically`"],"IO interact":["we"],"IO monad":["and","and"],"IO monad,":["but","also"],"IO monad.":["Normally"],"IO monads":["and"],"IO of":["text,"],"IO random":["generator,"],"IO). There":["are"],"IO, so":["it"],"IO-based state":["not"],"IO. Any":["hints?"],"IO. It":["also"],"IO. You":["cannot"],"IORef (with":["locking)!"],"IORef -":["mutable"],"IORef I":["felt"],"IORef String":["}`.","and",")"],"IORef and":["stick"],"IORef because":["I"],"IORef instead":["of"],"IORef is":["a"],"IORef on":["hackage"],"IORef operations,":["or"],"IORef should/could":["cooperate"],"IORef with":["the"],"IORef would":["work"],"IORef, MVar":["or"],"IORef, maybe":["it"],"IORef. That's":["essentially"],"IORef.. so":["I'm"],"IORefs (either":["`atomicWriteIORef`"],"IORefs or":["MVars,"],"IRL it":["would"],"Id [String]":["[(Id,"],"Ideally I":["simply"],"Ideally `toRNA`":["and"],"Ideally `word":["=="],"Ideally you":["would"],"Ideally, you":["should"],"Ie the":["following"],"If \u003ccode\u003eString\u003c/code\u003e":["is"],"If I":["refactored","understand","stuck","would","would","run","had","remove","understand","understand","understand","look","understand","understand","strip","`evaluate'","could","subtract","had"],"If I'd":["remove"],"If I'll":["ever"],"If I'm":["feeling","correct"],"If `f'`":["is"],"If `resetName`":["took"],"If `s'`":["is"],"If `s`":["were"],"If `transcribe`":["were"],"If a":["`where`-scoped"],"If anyone":["reading"],"If anything,":["`sort`"],"If input":["will"],"If instead":["it's"],"If instruction":["says"],"If it":["was","was","was","isn't"],"If it's":["truly","`Just","an","the","a"],"If not,":["I'll","passes"],"If only":["there"],"If so,":["I","how","you"],"If someone":["doesn't"],"If that's":["not"],"If the":["order","functions","first","`=`","8","input","message","message","account","accumulator","version","balance","value","right"],"If there":["was","is","is","is","isn't","are","is","is","are"],"If there's":["a","no"],"If this":["was","is","were","doesn't"],"If those":["two"],"If uppercase":["any"],"If we":["could","had"],"If you":["pop","really","define","move","invert","would","like","prefer,","want","try","don't","look","really","really","were","haven't","don't,","get","have","had","mean","reordered","cared","can't","wanted","make","really","want","enable","enable","were","ensure","want","change","use","really","want","only","bind","measure","do","were","derived","still","used","did","use","want","change","move","still","don't","wanted","were","wanted","haven't","have","nest","stick","really","run","use","google","_really_","do","measure","want","*realy*","added","try","think","come","don't","want","use","switch","begin","don't","want","do","still","load","choose","re-order","buy","wanted","do","use","sort","were","used","have","put","do","wanted","haven't","use","wanted","like","have","had","put","use","used","place","choose","define","bind","like","want","wanted","wand","wanted","want","don't","want","look","try","do:","look","use","really","want","leave","wanted","wanted","have","like,","don't","play","do","want","extract"],"If you'd":["like"],"If you'll":["move"],"If you're":["not","using","looking","interested","using","confused","confused","confused","confused","looking","set","curious","trying","using","looking","looking","doing","going","not","finding","looking","concerned","composing"],"Ignore me!":["Accidental"],"Ignore the":["Control.Monad"],"Ignore this":["submission;","one."],"Ignoring that,":["I"],"Ignoring the":["Maybe/Monad","fact"],"Illegal tuple":["section:"],"Illogical as":["well,"],"Imagine if":["a"],"Imho this":["is"],"Immediately after":["`unlines`"],"Implement questions":["of"],"Implement with":["`foldl'`,"],"Implementation of":["a"],"Implementing `prettyPrint`":["using"],"Implementing something":["like"],"Importing from":["Data.Map.Strict"],"Improved the":["implementation"],"In GHCi":["you"],"In Haskell":["you","there","it's","a"],"In Haskell,":["`silence(statement)`","`Int`","the","only","function","function","generally"],"In `Data.List.Split`":["you"],"In `getBalance`":["I'd"],"In `isEmpty`":["one"],"In `isShout`":["you"],"In `isShouting`":["the"],"In `isShouting`,":["`filter"],"In `isSilence`,":["a"],"In `lowerCaseBottleText`":["there's"],"In `mkRobot`,":["some"],"In `nucleotideCounts`":["you"],"In `number'`":["the"],"In `prettyPrint`":["you"],"In `resetName`":["both"],"In `responseFor`":["I"],"In `response`,":["predicates"],"In `sing`":["it's"],"In `sorted`":["–"],"In `verse`":["I"],"In a":["strict","`where`","production","Data.Map","very","simplier"],"In addition":["to"],"In addition,":["I"],"In all,":["`toRNA`"],"In an":["equation","equation","equation","equation","equation","equation"],"In any":["way,"],"In both":["cases"],"In case":["with"],"In either":["case"],"In fact":["I","it's","it"],"In fact,":["using","if","it's","I","that's","there","I've"],"In general":["you","looks","looks"],"In general,":["you","how","this"],"In line":["13-15"],"In mine":["I"],"In most":["cases"],"In my":["experience,","next","solution","local","limited","opinion","experience","example","case"],"In order":["to","to","to","to","to","to","to","for"],"In other":["words,","words,","words,","words,","words,","words","solutions","words","cases","words,"],"In particular":["`(all","I"],"In particular,":["check","consider"],"In phase":["1","1"],"In practice":["all"],"In retrospect,":["one"],"In simple":["cases"],"In some":["libraries","cases"],"In terms":["of"],"In that":["gist","case,","case","case"],"In the":["unlikely","later","previous","second","expression:","second","expression:","case","case","US","current","`isSilence`","end,","exercise","end","expression:","end,","second","spirit"],"In these":["case"],"In this":["case","case,","case,","case","case","example","case,","case","code","case","solution","case,","case","code,","case","case,","case,","case,","case","code","case,","case","particular","iteration,","case","iteration","case,","case,","particular","case,","case","case,","case","case,","way,","case,","case","case","case","case","case","task","case,","case,"],"In which":["cases"],"In your":["case,","current","example,","previous"],"Included in":["the"],"Incrementing in":["a"],"Indeed using":["\u003ccode\u003enot"],"Indeed you":["can"],"Indeed, but":["I"],"Indeed, it":["should"],"Indeed, this":["a"],"Infix operators":["are"],"Initially I":["wrote"],"Initially, and":["without"],"Input data":["is"],"Input validation":["is"],"Inserting a":["`deepseq`"],"Inserting into":["a"],"Inspired by":["the","previous"],"Instead of":["using","list","using","using","measuring","strip","taking","comparing","`Data.Text`","comparing","`concat`ing","`uncurry3`","building","generating","storing","using","creating","storing","normalizing","`Integral","testing","`words'","masking","trying","that","using","(\\xs","simply","inserting","taking","using","trying","`fromMaybe","`helper`","a","repeated","storing","looking","hardcoding","trying","writing","`reverse","`last","using","reversing"],"Instead on":["foldl"],"Instead, you":["can"],"Int (S.Set":["String)"],"Int -&gt;":["Integer`."],"Int -\u003e":["String`","[a]","Maybe","a"],"Int Int,":["with"],"Int [String]":["}`","}`,"],"Int `4`.":["For"],"Int and":["get","overflowed"],"Int in":["the","your","the"],"Int instead":["of"],"Int is":["the","forced","far"],"Int it":["should"],"Int key":["and"],"Int of":["`6`."],"Int or":["a","a"],"Int takes":["up"],"Int would":["probably","and","and"],"Int would.":["The"],"Int you":["want"],"Int's maxBound":["is"],"Int) and":["you're"],"Int) tuples":["before"],"Int))` instead?":["It"],"Int))`, which":["I"],"Int))`. The":["type"],"Int). Check":["out"],"Int). The":["fix"],"Int). To":["implement"],"Int)]))` then":["you"],"Int)]` as":["a"],"Int)]`, such":["that"],"Int)` as":["a"],"Int)` is":["only"],"Int)` not":["work?"],"Int)` rather":["than"],"Int)`, or":["is"],"Int)`. In":["other"],"Int, Char,":["Bool,"],"Int, and":["`wordsBy`."],"Int, but":["Char"],"Int, creating":["it"],"Int, has":["an"],"Int, it's":["storing"],"Int, once":["the"],"Int, which":["doesn't","would"],"Int, with":["some"],"Int. Consider":["\"aluminum\""],"Int. Each":["`…"],"Int. However":["as"],"Int. I.e.":["`diff"],"Int. Once":["again,"],"Int. This":["can","would"],"Int64 works":["for"],"IntMap API":["is"],"IntMap [String]`":["might"],"Int])`. Can":["you"],"Int` and":["`toDecimal`"],"Int` as":["the","a"],"Int` from":["count"],"Int` instead":["of"],"Int` is":["a","also"],"Int` or":["something"],"Int` value":["of"],"Int` words":["into","in"],"Int`, since":["`Bool`"],"Int`. My":["typical"],"Integer -\u003e":["Noise`","Day"],"Integer Integer":["instead"],"Integer and":["warn"],"Integer instead":["of"],"Integer then":["how"],"Integer' (Integral":["b0)"],"Integer) on":["chessboard"],"Integer)]` into":["a"],"Integer)` like":["in"],"Integer)` makes":["the"],"Integer, Int,":["Char,"],"Integer, not":["just"],"Integer, now":["lets"],"Integer, otherwise":["you"],"Integer, since":["we're"],"Integer. Left":["would"],"Integer]`, I'm":["looking"],"Integer` in":["WHNF"],"Integer` or":["by","even"],"Integer` you":["might"],"Integer`. Is":["it"],"Integral a":["=\u003e","=\u003e"],"Integral b":["=\u003e"],"Integral for":["counters,"],"Integral, it":["will"],"Intentionally choosing":["a"],"Interesting -":["I","I'm"],"Interesting that":["you"],"Interesting thing":["here"],"Interesting use":["of"],"Interesting way":["to"],"Interesting. I'll":["have"],"Interesting... I":["didn't"],"Interestingly I":["looked"],"Interestingly, this":["made"],"Internally, `foldListWith`":["just"],"Interpreting this":["code"],"Into indices":["and"],"Ints all":["over"],"Is @jordyn":["around?"],"Is Haskell.org":["also"],"Is `B.pack`":["in"],"Is `fromListWith`":["strict"],"Is `go`":["a"],"Is effectively":["the"],"Is having":["a"],"Is it":["a","just","common","good","common","worth","possible","better","typical","generally","cheating","better","normal","possible","true","really","inefficient?"],"Is it?":["Data.String.Utils"],"Is point-free":["notation"],"Is shouting":["can","looks"],"Is some":["amount"],"Is something":["very"],"Is that":["what","what","deliberate","problematic","worth","what","not","correct?","correct?"],"Is the":["gain","way","use","use","increase","name","length","new","same"],"Is there":["a","a","a","a","really","a","any","still","a","any","any","a","a","a","a","a","any","a","a","usually","a","a","a","any","a","a","a","a","a","any","any","any","any","a","a","a","anywhere","anything","an","any","a","a"],"Is this":["what","really","in","more","OK,","`union`","as","what"],"IsXyzOf style":["is"],"Isn't `intersperse":["'"],"Isn't `length":["ds`"],"Isn't `map":["."],"Isn't `merge":["."],"Isn't `words":["."],"Isn't it":["`length"],"Isn't that":["sort"],"Isn't there":["a"],"Isn't this":["iteration"],"Iso) but":["it"],"Isosceles has":["2,"],"Isosceles, Equilateral]":["!!"],"Isosceles, Scalene]":["!!"],"It actually":["isn't","only"],"It adds":["a"],"It aids":["in"],"It also":["uses","has","uses","might","doesn't","applies"],"It calculates":["`toLower"],"It can":["become","be","be","be","look"],"It can't":["be"],"It cannot":["be"],"It comes":["down","down"],"It could":["be","end","make","maybe","be","be","be","also"],"It definitely":["will","looks","cuts"],"It didn't":["quite","update"],"It does":["look","have","look","the","indeed","one","require","not","definitely","seem"],"It doesn't":["look","handle","keep","make"],"It feels":["dirty,","like"],"It felt":["like"],"It gets":["the","kind"],"It gives":["the"],"It guarantees":["that"],"It has":["a","functions","a","no"],"It helps":["readers"],"It introduces":["a"],"It is":["pretty","slightly","usually","possible","possible","used","basically","hard","done.","also","possible","so","in","more","a","not","part","definitely","unnecessary","possible","not","not","typical","problematic"],"It is,":["however,"],"It isn't":["as","a","necessary","specified","clear"],"It just":["ended","felt","depends"],"It keeps":["popping"],"It led":["me"],"It looks":["a","much","very","like","nice","like","good,","like","like","like","like","like","like","like","like","strange","better,","good,","like"],"It makes":["me","my","more","your","the"],"It matters":["much"],"It may":["not","be","be","be","be","be","be","be","just"],"It might":["be","be","be","be","be","be","not","be","be","be","be","be","be","be","cause","be","be","be","also","be","be","be","be","be","be","not","not","be","perform","be","be","be","be","be","be","be","make","be","be","help","also","be","be","be","make","not"],"It must":["ends"],"It pattern":["matches"],"It places":["\"None\""],"It prevents":["the"],"It probably":["isn't","depends","is","would"],"It reads":["a"],"It really":["depends","depends"],"It requires":["`verse`"],"It seems":["like","```filterString```","like","to","like","like","way","the","almost","odd","that","like","somewhat"],"It should":["have","really","be","work","be"],"It should've":["worked"],"It shouldn't":["be"],"It still":["only","feels"],"It takes":["a"],"It took":["me","me","me"],"It translates":["into"],"It turns":["out","out"],"It uses":["a"],"It validates":["all"],"It was":["pointed","much","so","horribly","a","moderately","not","a","slightly","somewhat"],"It wasn't":["specified"],"It will":["not","not","remove","fit","also","be","be","allow","warn","be","also"],"It won't":["be"],"It worked":["so"],"It works":["for"],"It worth":["to"],"It would":["be","certainly","be","be","be","be","be","be","be","be","be","be","probably","also","probably","be","be","be","be","be","be","almost","be","be","be","be","be","be","be","be","be","probably","only","be","be","be","make","be","also","make","be","simply","be","probably","have","be","be","work"],"It'd be":["very","good","better","a","better","nice","equivalent"],"It'd like":["to"],"It'll all":["compile"],"It'll be":["cleaner,","simpler","more"],"It'll eventually":["turn"],"It's (slightly)":["more"],"It's a":["little","little","good","good","shorter,","bit","bit","useful","pretty","general","lot","lot","little","good","little","little","pretty","lot","very","neat","neat","bit","drop-in","good","matter","little","bit","bit","little","shame","bit","bit"],"It's actually":["about","preferable","better"],"It's all":["a"],"It's almost":["always","always"],"It's already":["in"],"It's also":["nice","nice","simpler","possible","not","possible","a","not","very","a","standard","more","common","indented"],"It's amazing":["how"],"It's an":["elegant"],"It's annoying":["that"],"It's atypical":["to"],"It's been":["a","a"],"It's best":["not","to","to","to"],"It's better":["style","to","to","to","to"],"It's called":["TupleSections."],"It's calling":["something"],"It's certainly":["possible","one"],"It's clear":["that"],"It's common":["to","to","to","to"],"It's confusing":["to","to"],"It's considered":["good","good","good"],"It's customary":["to","to","to","for"],"It's desirable":["to"],"It's difficult":["to"],"It's documented":["that"],"It's doing":["both"],"It's easier":["to"],"It's easy":["enough"],"It's entirely":["possible"],"It's especially":["strange"],"It's exported":["by"],"It's extremely":["uncommon"],"It's fantastically":["concise,"],"It's fixed":["now."],"It's generally":["considered","not","a","good","considered","better","bad","preferable","better","preferable"],"It's good":["to","for","for","to"],"It's great":["that"],"It's important":["that","that"],"It's in":["MissingH."],"It's installed":["with"],"It's interesting":["to"],"It's lazy":["enough"],"It's less":["code"],"It's like":["using"],"It's more":["common","conventional","common","idiomatic","efficient","common","common","natural"],"It's much":["clearer","better","more"],"It's my":["fault"],"It's nearly":["always"],"It's never":["problematic"],"It's nice":["to"],"It's nicer":["if"],"It's normal":["to","to"],"It's not":["creating","essential,","common","super","maximally","obvious","obvious","necessarily","urgent","uncommon","possible","that","easy","guaranteed","common","common","much","quite","standard","best","all","typical","an","common","a","going","idiomatic"],"It's obviously":["subjective"],"It's of":["course"],"It's often":["good","quite","not"],"It's ok":["to"],"It's only":["\"insignificant\""],"It's perfectly":["fine","acceptable"],"It's possible":["to","to","to","to","to","to","to"],"It's preferred":["to"],"It's presumed":["that"],"It's pretty":["new,","easy","hard","much"],"It's probably":["more","good","not","a","within"],"It's really":["a"],"It's safe":["to"],"It's shorter":["and"],"It's simpler":["and"],"It's simply":["a"],"It's slightly":["more","longer","less"],"It's something":["I'd"],"It's still":["quite","using","a"],"It's strange":["to","to","that"],"It's strict":["to"],"It's suggesting":["that"],"It's the":["thunks","same","difference"],"It's too":["bad"],"It's totally":["fine"],"It's tricky":["to"],"It's typical":["to","in","to","to"],"It's uncommon":["to"],"It's unfortunate":["that"],"It's up":["to"],"It's usually":["best","best"],"It's very":["subjective","clear"],"It's weird":["to"],"Iteration #2":["and"],"Iteration 2":["uses"],"Iteration. Thank":["you"],"Its a":["warning,"],"Its better":["to","to","to","to"],"Its common":["to"],"Its nice":["that"],"Its not":["common","so"],"Its possible":["to","to","to","to","to"],"Its quite":["standard"],"Ix type":["for"],"Ix typeclass.":["There"],"JS as":["a"],"Jack that's":["the"],"Jackson's 1972":["`Principles"],"Java equivalent":["would"],"Java for":["my"],"Java world\u003c/gasp\u003e":["in"],"Java/C# background.":["I"],"Jones's articles":["about"],"Just $":["parse","...`"],"Just $!":["...`"],"Just (-16)":["@=?"],"Just (a":["+","\u003c\u003e"],"Just (bal":["+","+"],"Just (f":["x)`."],"Just (singleton":["z)"],"Just (take":["n"],"Just 10000000":["--","--"],"Just 19":["--","--"],"Just 1`)":["that"],"Just 32":["@=?"],"Just 3`),":["or"],"Just 4":["@=?"],"Just [2]`":["then"],"Just _":["-\u003e"],"Just `foldl'`,":["`*`"],"Just `mapM`,":["`randomRIO`,"],"Just a":["few","thought.","tip,","letter","side"],"Just about":["any"],"Just added":["an"],"Just all":["the"],"Just as":["readme"],"Just b)":["-\u003e"],"Just checking":["all"],"Just curious":["why"],"Just curious,":["as"],"Just discovered":["`splitAt"],"Just foo`":["or"],"Just for":["future","fun,"],"Just forgot":["about"],"Just found":["that"],"Just general":["recommendations,"],"Just getting":["rid"],"Just import":["needed"],"Just in":["general,"],"Just like":["decimal"],"Just look":["up"],"Just makes":["it"],"Just need":["to"],"Just occurred":["to"],"Just reading":["the"],"Just realised":["I"],"Just s":["else"],"Just submitted":["with"],"Just that":["code","I"],"Just thinking":["outloud."],"Just thinking..":["no"],"Just to":["point","clarify,","make"],"Just use":["`fromListWith`"],"Just vanilla":["function"],"Just x":["else"],"Just x`":["you"],"Just. Then":["just"],"Juxtaposition separates":["a"],"Keep `isYell`":["pointfull"],"Keeps all":["the"],"Key -\u003e":["Value`"],"Key Value`":["that"],"Key equal":["to"],"Kimhyunkang -":["thanks!"],"Kind of":["got","surprised"],"KindSignatures or":["DataKinds"],"Kinda funky;":["maybe"],"Kinda strange":["coming"],"Knowing this,":["you"],"Knowing what":["there"],"Kobata, that's":["definitely"],"L and":["M."],"L or":["C"],"L10: `not":["."],"L12 is":["redundant"],"L12-13: `all":["isSpace"],"L17-18, L22-23":[":"],"L17: There":["is"],"L18 is":["redundant."],"L18: How":["about"],"L22-23 :":["if"],"L23 has":["the"],"L30: How":["about"],"L9: `all":["isSpace`"],"LANGUAGE BangPatterns":["pragma."],"LANGUAGE OverloadedStrings":["#-}`","#-}```"],"LANGUAGE TupleSection":["#-}```"],"LANGUAGE TupleSections":["#-}","#-}`","#-}`.","#-}`.","#-}`.","#-}`","#-}`.","#-}`.","#-}`","#-}","pragma).","#-}`","#-}","#-}`","#-}`","#-}","#-}`."],"LANGUAGE TupleSections,":["BangPatterns,"],"LANGUAGE parameters":["on"],"LANGUAGE pragma":["and","so","`go","that"],"LBS/LB for":["lazy"],"LHS or":["to"],"LIKE THAT.`":["Otherwise,"],"LL a":["="],"LOWERCASE) message`.":["Which"],"LYaH covers":["the"],"Lambda functions":["made"],"LambdaBot. I":["don't"],"LambdaCase is":["brand"],"LambdaCase language":["extension"],"LambdaCase makes":["this"],"Last -\u003e":["lastDayOfMonth"],"Last 2":["guards"],"Last I":["checked,"],"Last days":["are"],"Last rather":["than"],"Last readTVar":["is"],"Last submission":["was"],"Last with":["the"],"Lastly, as":["far"],"Lastly, guards":["are"],"Lastly, it's":["good"],"Lastly, your":["shout"],"Latest bytestring":["package"],"Lazy evaluation":["is"],"Lazy version":["of","of","of","of","of"],"Lazy, because":["in"],"Leaf approach":["is"],"Learn You":["A"],"Learned something":["new."],"Leaving out":["type"],"Left \"empty":["string\""],"Left and":["Right"],"Left would":["be"],"Left...and if":["the"],"Lefts ever":["being"],"Len =":["Long"],"Len` in":["an"],"Length and":["filter"],"Less important":["and"],"Less keen":["about"],"Let me":["know","know","start","know","give","know","know","know"],"Let's start":["from"],"Lets remove":["Data.List"],"Lets see":["what"],"Lets take":["a"],"Levenshtein distance":["at"],"Like @randi":["said"],"Like I":["said,"],"Like many":["other"],"Like others":["said,"],"Likewise I've":["tried"],"Likewise, `unify`":["and"],"Limit exports":["(`module","(`module"],"Limit imports":["(`import","(`import"],"Line 10":["is"],"Line 11":["is"],"Line 16":["looks"],"Line 18":["do"],"LinkedList a":["-\u003e"],"Linking bar":["..."],"Linux ghc":["install"],"Linux it":["gives"],"Lisp/prefix style.":["Thanks"],"List `foldl'`":["and"],"List comprehensions":["can"],"List functions?":["I"],"List.foldr when":["the"],"List.map or":["List.foldr"],"List: when":["you're"],"ListLike type":["class"],"List` (the":["`qualified`"],"List` you":["are"],"List`. It's":["not"],"Lists aren't":["the"],"Loading package":["ghc-prim","integer-gmp","base"],"Logic is":["really"],"Logically it":["is"],"Long |":["Short`"],"Look at":["the"],"Looked at":["the"],"Looking around":["a"],"Looking at":["that","other","your","both","your","others'","the"],"Looking forward":["to"],"Looking good!":["My"],"Looking more":["closely","closely"],"Looks OK":["if","but"],"Looks OK,":["but"],"Looks a":["ton"],"Looks better":["on"],"Looks better,":["however"],"Looks better.":["Try"],"Looks fine,":["some"],"Looks good":["though,","to","then!","overall.","to","though,","to","to","though!","though,","to","to","though!","so","though.","though",":)","but","otherwise.","but","now","overall.","though.","to","--"],"Looks good!":["The","Instead","I"],"Looks good,":["I","although","but","a","but","though","but","there's","but","you"],"Looks good.":["One",":)","You","Try","If","In","I","Two","You"],"Looks great":["to","to","already.","except","to"],"Looks great!":["I",":)","A","You",":)"],"Looks great,":["I","but","nothing","some","sometimes","the","I'd","note","just"],"Looks great.":["One","Minor","`not","There's"],"Looks like":["my","this","the","`foldl'`","you","it","`map`","there","I","the","this:"],"Looks more":["interesting"],"Looks much":["better,"],"Looks nice":["otherwise.","as-is","to","if","but"],"Looks nice,":["a"],"Looks nice.":["One"],"Looks pretty":["close","good","good","good.","good."],"Looks quite":["good."],"Looks really":["good."],"Looks very":["nice","nice","good."],"Lookup in":["a"],"Love `fmtNumber`;":["you've"],"Love the":["use"],"Lower, Space,":["Punctuation"],"M --":["of"],"M and":["long"],"M from":["local","constant"],"M instead":["of"],"M into":["local"],"M where":["A"],"M. A.":["Jackson's"],"M. I":["think"],"M. It's":["a"],"M. functions":["are"],"M.Map Grade":["[Child]","[Student]```?"],"M.Map Int":["(S.Set"],"M.Map String":["Int"],"M.empty (replicate":["10000000","10000000","10000000","10000000","10000000","10000000","10000000","10000000","10000000","10000000","10000000","10000000"],"M.empty --":["or"],"M.empty .":["splitWords"],"M.empty)))```, then":["finally"],"M.empty` but":["`foldl'`"],"M.findWithDefault (error":["\"invalid\")"],"M.fromList $":["do"],"M.fromList [":["('a',"],"M.fromList [(s,I)|":["(s,ls)"],"M.fromListWith (+)":[".","(zip"],"M.fromListWith [_":["|"],"M.insert k":["(countUp"],"M.insertWith (+)":["(1::Int))","(1::Int))","(1::Int))","(1::Int))","(1::Int))","(1::Int))"],"M.insertWith (++)":["g","g","g","g","g"],"M.insertWith would":["be"],"M.insertWith' (+))":["1"],"M.lookup 1":["$","$","$","$","$","$","$","$","$","$","$","$"],"M.lookup scores`":["you"],"M.map sort`":["only"],"M.singleton s":["1"],"M.singleton w":["1"],"M.toAscList .":["records"],"M.toList m,":["_]`"],"ME LIKE":["THAT.`"],"ML I":["would"],"ML you":["could"],"MUCH more":["useful.","efficient"],"MUST be":["ordered"],"MVar (Maybe":["Integer)","Integer)","Integer)"],"MVar (as":["in"],"MVar (probably":["an"],"MVar +":["IORef","IORef"],"MVar -":["IO"],"MVar M":["where"],"MVar `v`":["with"],"MVar in":["Robot"],"MVar instead":["of"],"MVar is":["certainly","basically"],"MVar isn't":["full"],"MVar keeping":["the"],"MVar of":["unit"],"MVar on":["its"],"MVar or":["IORef","TMVar"],"MVar provided":["by"],"MVar rather":["than"],"MVar stuff":["but"],"MVar to":["store","the","become","be"],"MVar, STMVar,":["or"],"MVar, TVar":["and/or"],"MVar, TVar,":["and"],"MVar, it":["will"],"MVar, you":["must"],"MVar. Certainly":["I"],"MVar. If":["I"],"MVar. `modifyMVar`":["does"],"MVars are":["lazy.","a"],"MVars but":["Software"],"MVars can":["be"],"MVars from":["the"],"MVars or":["TVars)."],"MVars, which":["I"],"MVars. MVars":["can"],"MVector v":["e,"],"MWC or":["mersene"],"M`, and":["again"],"M`, latter":["is"],"M`, without":["the"],"M`. Alternatively,":["you"],"M```. You":["then"],"Mac, and":["in"],"Made School":["a"],"Made the":["change.","changes"],"Main (":["bar.hs,","bar.hs,"],"Make ```Schedule```":["an"],"Make an":["attempt"],"Make it":["more"],"Make weekdays":["an"],"Makes for":["an"],"Makes it":["easier","look"],"Makes sense":["to","to","then,"],"Makes sense,":["the"],"Makes sense.":["I"],"Making `isQuestion`":["a"],"Making a":["datatype"],"Making an":["update..."],"Many Haskell":["developers","developers","users"],"Many haskellers":["prefer"],"Many implementors":["of"],"Many other":["solutions"],"Many people":["also"],"Many thanks":["for","for"],"Many things":["in"],"Map Char":["Int.","Int"],"Map Grade":["[Child]"],"Map Int":["[String]","[String]","Int,"],"Map String":["Int`","Int","Int`.","Int`","Int","[Plant]","[Plant]"],"Map a":["Int`"],"Map and":["also","foldr"],"Map anyway.":["As"],"Map as":["well.","it"],"Map at":["all","all,"],"Map builder":["is"],"Map building":["using"],"Map but":["then"],"Map code":["could"],"Map code,":["there"],"Map do":["not"],"Map doesn't":["force"],"Map for":["this","`lookups`"],"Map from":["beginning"],"Map functions":["replaced"],"Map functions,":["there's"],"Map has":["some"],"Map here":["that"],"Map here:":["you"],"Map if":["you"],"Map implementation":["is","is"],"Map imports":["from"],"Map in":["addition","ClassyPrelude","`sorted`","this","this"],"Map instead":["of"],"Map internally":["somewhere"],"Map is":["built","a","a","spine-strict.","in","now","a","still","a","not","value-lazy.","a","spine-strict","a"],"Map it":["will","doesn't"],"Map iteratively":["so"],"Map itself":["is","to","in","to"],"Map itself.":["Consider"],"Map k":["a","a","a","a","a`,","a","a`."],"Map keys,":["because"],"Map like":["this"],"Map lookup":["is"],"Map or":["converting"],"Map should":["also"],"Map since":["it","it"],"Map structure":["is"],"Map that's":["`[('a',"],"Map though,":["dealing"],"Map to":["feed","do","zeros","simplify","do"],"Map type":["is","is","is","is","itself"],"Map type,":["different"],"Map using":["a"],"Map value":["can"],"Map will":["look"],"Map with":["`foldr`","an"],"Map without":["using","using"],"Map wouldn't":["been"],"Map you":["are"],"Map's functionality,":["when"],"Map) of":["the"],"Map), then":["you"],"Map, Array":["or"],"Map, I":["think"],"Map, although":["in"],"Map, an":["Array"],"Map, because":["with","Map","Map"],"Map, but":["I"],"Map, instead":["of"],"Map, it's":["more","generally"],"Map, since":["it"],"Map, so":["addWord"],"Map, the":["difference"],"Map, which":["is"],"Map, you":["can","should","will"],"Map. Another":["thing"],"Map. As-is":["the"],"Map. Due":["to"],"Map. For":["the"],"Map. It's":["like"],"Map. Of":["course"],"Map. See":["also:"],"Map. Thanks":["again"],"Map. The":["reason","exception"],"Map. You":["should"],"Map. Your":["`countWords`"],"Map.Map k":["a"],"Map.Strict, you":["can"],"Map.alter incr":["(normalise"],"Map.alter updateCount":["x"],"Map.alter was":["overkill"],"Map.findWithDefault '?'":["s"],"Map.findWithDefault Set.empty":["g"],"Map.fromList $":["zip"],"Map.fromListWith (+)":[".","$"],"Map.fromListWith list":["will"],"Map.fromListWith which":["I've"],"Map.fromListWith, it":["means"],"Map.insertWith (+)":["w2"],"Map.insertWith could":["accomplish"],"Map.insertWith would":["make"],"Map.lookup g":["."],"Map.lookup` is":["`Map.findWithDefault"],"Map.map is":["already"],"Map/IntMap to":["store"],"Map: when":["you're"],"Map? Data.Bits":["has"],"Map? Note":["that"],"Map` and":["short"],"Map` is":["a"],"Map` to":["`import","actually"],"Maps are":["what"],"Maps was":["pretty"],"Maps, though.":["I'm"],"Markdown code":["spans"],"Marlow book":["about","Parallel","Parallel"],"Marlow's book":["may","you"],"Marlow's book,":["also"],"Mathematically this":["is"],"Matrix (Vector":["a)","a)"],"Matrix =":["Matrix"],"Matrix Rows":["Cols"],"Matrix a":["=","="],"Matrix is":["not"],"Matrix problem":["my"],"Matrix would":["allow"],"Matrix {":["matrixCells","rows"],"May go":["readd"],"Maybe (BST":["a)","a)","a)","a)","a)`,"],"Maybe (N":["a)"],"Maybe (String,":["(Int,"],"Maybe (tree":["with"],"Maybe --":["Defined","Defined"],"Maybe Base":["approach"],"Maybe Base`":["function."],"Maybe Char`":["or"],"Maybe I":["had","should","should","can","am"],"Maybe Int`":["type."],"Maybe Integer":["then"],"Maybe Integer.":["Left"],"Maybe Integer`":["you"],"Maybe Phone":["as"],"Maybe `chop`":["is"],"Maybe `isEmpty`":["would"],"Maybe a":["(Nothing","little","-\u003e"],"Maybe a`?":["I'm"],"Maybe an":["alternative"],"Maybe and":["understanding","Functor"],"Maybe as":["a"],"Maybe at":["all."],"Maybe comments":["could"],"Maybe consider":["`readNucleotide`"],"Maybe different":["method"],"Maybe do":["the"],"Maybe for":["the"],"Maybe here,":["you"],"Maybe implements":["Functor"],"Maybe insertDefaults":["could"],"Maybe instead":["but"],"Maybe is":["a"],"Maybe it":["would","should","would"],"Maybe it's":["my"],"Maybe itt's":["need"],"Maybe length":["and"],"Maybe monad":["application"],"Maybe other":["persons","reviewers"],"Maybe should":["just"],"Maybe some":["regex"],"Maybe something":["like:","along"],"Maybe soon":["I'll"],"Maybe that":["should","helps"],"Maybe that's":["because"],"Maybe the":["reason","compiler"],"Maybe there":["should","is"],"Maybe there's":["some"],"Maybe this":["would","is","is","should"],"Maybe to":["represent","list"],"Maybe too":["concise."],"Maybe type":["if","to"],"Maybe type.":["One"],"Maybe use":["`String`"],"Maybe we":["should"],"Maybe when":["I've"],"Maybe would":["use"],"Maybe you":["could","could","could","could","could","want"],"Maybe, `foo":["\u003c|\u003e"],"Maybe, `ma":["\u003c\u003e"],"Maybe, inner":["one"],"Maybe, was":["writing"],"Maybe-lifting would":["be"],"Maybe. I":["also"],"Maybe. It":["also"],"Maybe. Same":["concept."],"Maybe/Monad stuff":["for"],"Maybes is":["`closeAccount`."],"Maybes? And":["what"],"Measuring the":["length"],"Meh, I":["could"],"Memorization always":["seems"],"Memory (the":["big"],"Memory in":["modern"],"Mercury -&gt;":["0.2408467"],"Mercury -\u003e":["0.2408467"],"Mercury =":["0.2408467","0.2.."],"Mercury should":["be"],"MessageKind =":["Yelling"],"MessageType) from":["your"],"Messing around":["with","with"],"Metadata collector":["(which"],"Metadata is":["dedicated"],"Might as":["well"],"Might be":["nice","a","a","a","nice","worth","a"],"Might have":["something"],"Might want":["to"],"Mike, which":["do"],"Mind showing":["me"],"Mine isn't":["even"],"Minor advice:":["it's"],"Minor and":["more","unimportant:"],"Minor nitpick:":["consider","instead","if"],"Minor style":["point:"],"Minor stylistic":["point:"],"MissingH !":["That"],"MissingH (cabal":["install"],"MissingH, seems":["like"],"MissingH. \"cabal":["install"],"Mistake in":["REAMDE"],"Mk being":["convential;"],"Modeling this":["with"],"Module still":["lacks"],"Monad ((-\u003e)":["r)"],"Monad (e.g.":["`(Just"],"Monad abstractions":["to"],"Monad are":["all"],"Monad because":["you"],"Monad bind":["(`\u003e\u003e=`)"],"Monad has":["a"],"Monad instance":["won't","entirely."],"Monad is":["just"],"Monad m":["where","where","=\u003e"],"Monad operators":["for"],"Monad so":["you"],"Monad to":["really"],"Monad typeclass":["so"],"Monad will":["be"],"Monad would":["make"],"Monad's `\u003e\u003e=`":["if"],"Monad's `void`":["is"],"Monad's liftM2.":["Doesn't"],"Monad, about":["which"],"Monad, it's":["perfectly"],"Monad, you're":["probably"],"Monad. It's":["especially"],"Monad. The":["choice"],"MonadLoops but":["that"],"MonadLoops etc.":["but"],"MonadPlus but":["also"],"MonadPlus type.":["I"],"MonadPlus with":["Maybe."],"MonadPlus's `msum`":["method,"],"Monadic binds":["for"],"Monadic style":["and"],"Monads are":["about."],"Monads are.":["Totally"],"Monads goes,":["you"],"Monday =":["1,"],"Monday in":["a"],"Monday it":["will"],"Monoid instance":["on","seems"],"Monoid might":["be"],"Monoid's `mappend`":["(or"],"Monoid, Applicative,":["Num,"],"Monoid, Functor,":["and/or"],"Monoid?\" muscles.":["I"],"Monoids, and":["hopefully"],"MonomorphismRestriction (fixed":["in"],"More correct":["would"],"More importantly":["though,"],"More lines,":["but"],"More of":["a"],"More or":["less","less"],"More readable":["isShouting?"],"Moreover due":["to"],"Moreover, is":["there"],"Most Haskell":["developers","developers","developers","developers","developers"],"Most choose":["to"],"Most everything":["else"],"Most modern":["compilers"],"Most of":["this","the","the","the","the","the","this","the","containers","the"],"Most optimizations":["take"],"Most parentheses":["here"],"Most people":["pull","end","choose","solve","choose","who","choose"],"Most solutions":["to","I","to","to","don't"],"Mostly a":["style"],"Mostly just":["preference."],"Moved related":["functions"],"Moving the":["zip"],"Much as":["I","I"],"Much better":["than",":-)"],"Much better!":["Some"],"Much better,":["thanks."],"Much better.":["An","I"],"Much cleaner":["from"],"Much cleaner.":["And"],"Much happier":["with","with"],"Much of":["the"],"Much simpler":["now!"],"Multi line":["comments.I"],"Multiple atomicModifyIORef":["operations"],"Multiplying by":["2"],"Must be":["doing"],"My absolutely-favorite":["programming"],"My approach":["with"],"My bad!":[":)"],"My bad,":["didn't"],"My best":["for"],"My code":["is","also"],"My comment":["about"],"My design":["was"],"My fault":["on"],"My first":["version","real","splitting","attempt","iteration"],"My general":["rule"],"My god,":["it"],"My haskell":["distribution"],"My idea":["was"],"My implementation":["relies"],"My installation":["doesn't"],"My instinct":["is"],"My mistake":[":)"],"My n":["in"],"My new":["submissions"],"My next":["version","iteration","iteration"],"My only":["concern","knit","nit","suggestion"],"My original":["attempts"],"My personal":["preference"],"My preference":["usually","would"],"My preferred":["solution"],"My problem":["in"],"My question":["is:"],"My reasoning":["behind","there"],"My recommendations":["would"],"My rule":["of"],"My solution":["to","that"],"My stylistic":["taste"],"My suspicion":["is"],"My test":["fails"],"My thinking":["with"],"My typical":["usage"],"My understanding":["is"],"My usual":["rule-of-thumb,"],"My very":["first"],"MyState =":["MyState"],"MyState Id":["[String]"],"MyState {Id,":["String,"],"N (Maybe":["a)","a)","(N"],"N -\u003e":["('0',"],"N 1s":["together,"],"N a":["=","=","="],"N characters":["and"],"N in":["most"],"N is":["a"],"N nested":["thunks."],"N steps,":["where"],"N times":["or"],"N, N,":["N]"],"NFData Robot":["where"],"NFData for":["your","Robot"],"NFData instance":["which"],"NFData instance,":["so"],"NFData instances":["so"],"NP. But":["you"],"Name Int`":["or"],"Narrowing down":["the"],"Nearly every":["other"],"Nearly one-third":["of"],"Neat. I":["didn't"],"Neat. I'm":["keeping"],"Needless to":["say,"],"Neither `performAction`":["nor"],"Neither is":["using"],"Nested `where`":["is"],"Nevermind, I":["was"],"Nevermind, exporting":["that"],"Nevertheless, a":["fraction"],"Nevertheless, since":["there"],"New test":["really"],"New version":["incoming...","up.","submitted."],"Newtypes supports":["getters:"],"Next step":["to"],"Nice addition":["to"],"Nice and":["clean.","readable!"],"Nice but":["you"],"Nice code!":["But"],"Nice exercise,":["if"],"Nice one-liner!":["However,"],"Nice one.":["I"],"Nice simple,":["intention"],"Nice solution,":["I"],"Nice solution.":["You"],"Nice usage":["of","of","of"],"Nice use":["of","of","of","of","of","of"],"Nice work":["with","though!","otherwise."],"Nice work!":["You're"],"Nice work.":["I"],"Nice! I":["like","didn't","haven't"],"Nice! Making":["an"],"Nice! Only":["prob"],"Nice! Yet,":["I"],"Nice, I":["like","didn't","love"],"Nice, catch.":["I'll"],"Nice, one.":["Do"],"Nice, thanks":["-"],"Nice, thanks!":["I","`mapM`"],"Nice. I":["like"],"Nice. Now":["I"],"Nicely done.":["Did"],"Nicely written":["code."],"Nil case":["here,"],"Nitpicking (since":["that's"],"No attempt":["to"],"No good":["deliberate","reason,"],"No idea":["why"],"No indentation":["of"],"No it":["will"],"No lookup":["tables"],"No matter":["what"],"No need":["to","to","for","to","to","for","to","for"],"No one":["said"],"No probs,":["your"],"No reason":["to","to"],"No sorting":["or"],"No with":["recursion"],"No worries.":["That"],"No, I":["cannot.","mean","didn't"],"No, it's":["quite"],"No, the":["`foldl'`"],"No, there":["is"],"No-break space,":["\\x2002"],"Node (Maybe":["(BTree","(BST"],"Node a":["(Maybe","=","=","(Maybe","-\u003e"],"Node {":["nodeValue","nodeValue","bstValue","bstValue","prev"],"Node |":["Leaf","Leaf"],"Noise` function.":["Still"],"None of":["the","the","the","these"],"None plants":["in"],"Nonetheless, I":["acknowledge"],"Nonetheless, the":["code"],"Nope -":["thanks!"],"Nope, doesn't":["look"],"Normal Form;":["the"],"Normally Data.Map":["is"],"Normally I":["expect","like"],"Normally multi-line":["functions"],"Normally pattern":["matching"],"Normally there":["wouldn't"],"Normally there's":["no"],"Normally this":["is"],"Normally when":["you"],"North =":["second"],"Not a":["big","big","big","nit,","big","big","big","nit-pick","big","big","nitpick","huge"],"Not after":["5"],"Not an":["issue"],"Not any":["worse"],"Not as":["big"],"Not built-in":["to"],"Not disagreeing":["with"],"Not entirely":["interchangeable"],"Not exactly":["this"],"Not liking":["the"],"Not much":["to","chance"],"Not only":["simpler","does"],"Not quite":["happy"],"Not quite.":["You"],"Not realising":["that"],"Not really":["much","a","a"],"Not shure":["if"],"Not so":["important"],"Not sure":["how","what's","if","why","if","if","about","if","if","what","if","how","if","`|\u003e`","if","what","I","if","which","what","that","I","that","that","if","if","how","what's","that's"],"Not that":["this","I"],"Not the":["least","most","most"],"Not to":["mention"],"Not using":["a","the"],"Note also":["that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that"],"Note that":["`show","`foldl`","I","most","`fromListWith`","`findWithDefault","you","First,","everything","if","`all","Haskell","`cleanNumber`","the","you","you're","Haskell","this","Control.Monad.Plus","this","the","you","the","you","your","there","your","the","you","either","you"],"Note the":["'verse","package"],"Noted, thanks.":["I"],"Nothing =":["Nothing`","Nothing`."],"Nothing and":["Just","calls"],"Nothing but":["the"],"Nothing case,":["but"],"Nothing cases":["correctly."],"Nothing else":["Just"],"Nothing fancy":["here."],"Nothing fancy,":["but"],"Nothing here":["either."],"Nothing in":["this"],"Nothing left":["to"],"Nothing simpler,":["really."],"Nothing to":["complain"],"Nothing when":["you"],"Nothing will":["be"],"Nothing wrong":["with","with","with"],"Nothing) Just":["$"],"Nothing)` is":["equivalent"],"Nothing)` with":["a"],"Nothing, and":["Nothing"],"Nothing` a":["bit"],"Nothing` and":["`fmap"],"Nothing` returns":["`\"0000000000\"`."],"Nothing` then":["you"],"Nothing` to":["be"],"Nothing`. So":["what"],"Notice how":["you"],"Notice that":["```nub```"],"Now I":["can","can","know","don't","have","really"],"Now I'll":["try"],"Now I'm":["picking"],"Now `foldl'`":["is"],"Now a":["question."],"Now it":["says"],"Now it's":["simpler,","much"],"Now monads":["go"],"Now that":["you","you're"],"Now the":["update","code"],"Now they":["have"],"Now this":["code"],"Now to":["what","how"],"Now try":["this"],"Now with":["added","`Data.List.Split`.","`IntMap`."],"Now you":["may","have"],"Nucleotide -\u003e":["Nucleotide`"],"Nucleotide =":["Nucleotide","A","Nucleotide","Nucleotide"],"Nucleotide Char":["deriving"],"Nucleotide Char`":["might"],"Nucleotide DNA":["you"],"Nucleotide as":["a"],"Nucleotide type":["that"],"Nucleotide {":["unNucleotide"],"Nucleotide {unNucleotide":["="],"Nucleotide\u003c/code\u003e, even":["though"],"Nucleotide]` in":["`readDNA`?"],"Num a":["where","=&gt;","=&gt;","=&gt;","where","=\u003e","=\u003e","=\u003e"],"Num a)":["=\u003e","=\u003e","=\u003e"],"Num b)":["=\u003e","=\u003e"],"Num needs":["type"],"Num r)":["=\u003e"],"Num to":["be"],"Num, Show":["and"],"Num. This":["comes"],"Numeric. Using":["only"],"O'Reilly's website.":["One"],"O( n^2":[")",")",")."],"O(1) access":["time?"],"O(1) all":["the"],"O(1) and":["the","`scoreWord`","O(n),"],"O(1) as":["long"],"O(1) because":["V.slice"],"O(1) if":["you"],"O(1) in":["both"],"O(1) lookup":["of"],"O(1) lookup.":["You"],"O(1) lookups,":["maybe"],"O(1) on":["each"],"O(1) operation":["on"],"O(1) rather":["than"],"O(1) reference":["to"],"O(1) since":["you"],"O(1) space":["would've"],"O(1) space.":["A"],"O(1) storage":["(just"],"O(1) time":["without","and","and"],"O(1) too":["-"],"O(1) with":["regard"],"O(1) without":["incurring"],"O(1)) to":["know"],"O(1), potential":["for"],"O(1). The":["order"],"O(N) complexity":["of"],"O(N) complexity,":["so","you"],"O(N) memory":["and"],"O(N^2) complexity,":["while"],"O(log n)":["so","lookup,","access."],"O(log n).":["Doing","Same"],"O(log(map size))":["and"],"O(log(n)) is":["pretty"],"O(max (length":["a)"],"O(n *":["log","log","log"],"O(n lg":["n)?"],"O(n log":["n).","n),","n).","n)","n)","n)"],"O(n!) in":["size)"],"O(n!) work":["on"],"O(n) \"first":["pass\""],"O(n) and":["`insertWith`","it's"],"O(n) because":["`length"],"O(n) complexity,":["so"],"O(n) first":["pass"],"O(n) for":["long"],"O(n) in":["the"],"O(n) instead":["of"],"O(n) into":["something"],"O(n) memory":["for","and","and"],"O(n) of":["`foldl`)"],"O(n) operation":["twice"],"O(n) operation,":["but"],"O(n) since":["it"],"O(n) space":["to","when","and"],"O(n) stack":["space","to"],"O(n) storage":["when"],"O(n) time":["to","to","to"],"O(n) to":["build"],"O(n)) but":["you"],"O(n), a":["much"],"O(n), not":["O(n"],"O(n), plus":["it"],"O(n), unless":["I'm"],"O(n), where":["`x","n"],"O(n). Better":["still"],"O(n*log(n)) pass.":["I"],"O(n*log(n)) versus":["the"],"O(n^2) algorithm":["(you","by"],"O(n^2) also":["it"],"O(n^2) and":["the","so"],"O(n^2) due":["to"],"O(n^2) instead":["of","of"],"O(n^2). If":["you"],"O(n^2*m), let":["n"],"O(number of":["unique","grades),"],"OK @melissa,":["here's"],"OK I":["wasn't"],"OK I've":["not"],"OK as":["far"],"OK but":["really"],"OK didn't":["know"],"OK if":["I'll","it's"],"OK now,":["except"],"OK that":["its"],"OK to":["use","return"],"OK with":["accepting"],"OK, I've":["noticed"],"OK, Much":["simpler"],"OK, `biapp":["="],"OK, but":["you","its"],"OK, just":["using"],"OK, or":["frowned"],"OK, passed":["100000"],"OK, there":["are","are"],"OK, there's":["actually"],"OK, this":["gets","is"],"OK... I":["did","wound","did"],"OK... this":["exercise"],"OMG, I've":["submitted"],"ONeillPrimes.hs and":["BayerPrimes.hs"],"OR between":["predicates."],"OS's package":["manager"],"OTOH, I":["hate","**hate**"],"OUT for":["ME!`"],"Obsessive code":["golf"],"Obviously It":["will"],"Obviously this":["doesn't"],"Obviously you":["can"],"Odd... on":["my"],"Of _course_":["there"],"Of cause":["using"],"Of course":["isEmpty","I","words","this","this"],"Of course!":["Thanks.","How"],"Of course,":["that's","fixing","it's","this","then","the","you","sorry","I","you","with"],"Of course...":["Silly"],"Of the":["if..else"],"Often in":["Haskell"],"Often this":["gets"],"Oh I":["left","see"],"Oh and":["I'm"],"Oh bugger,":["```Data.String.Utils.replace```"],"Oh complexity":["than"],"Oh good":["grief..."],"Oh good,":["it's"],"Oh indeed,":["the"],"Oh man,":["you've"],"Oh man...":["my"],"Oh my":["goodness"],"Oh my,":["thats"],"Oh ok":[":)."],"Oh sweet,":["didn't"],"Oh we":["discount"],"Oh yeah":["I"],"Oh yeah,":["thanks!","that's"],"Oh yeah...":["I"],"Oh, I":["didn't","actually","hadn't","thought"],"Oh, I'm":["an"],"Oh, also":["some","the"],"Oh, also,":["the","your"],"Oh, and":["thanks","the","kudos"],"Oh, cool!":["I"],"Oh, damn,":["yeah"],"Oh, good":["point,","catch","point."],"Oh, hah,":["I"],"Oh, huh.":["I"],"Oh, it":["does"],"Oh, man,":["I"],"Oh, nice!":["I"],"Oh, not":["a"],"Oh, of":["course."],"Oh, one":["last"],"Oh, right!":["Thanks."],"Oh, thanks":["for"],"Oh, that":["makes"],"Oh, that's":["interesting,"],"Oh, yeah!":["Thanks."],"Oh, yeah,":["duh,"],"Oh, you're":["right."],"Oh.. Seems":["I've"],"Oh... you":["can"],"Oh.... right,":["I"],"Ohh, I":["see.","see,"],"Ohhhh, is":["that"],"Ohhhhh... right.":["I"],"Ok -":["so"],"Ok I":["think","found","think"],"Ok I'll":["leave"],"Ok! You":["do"],"Ok, I":["think","see"],"Ok, I'm":["curious,"],"Ok, `normalizeWords`":["is"],"Ok, didn't":["see"],"Ok, modules":["loaded:","loaded:"],"Ok, obviously":["there"],"Ok, so":["the"],"Ok, thank":["you"],"Ok, thanks!":["I'll"],"Ok, this":["is"],"Ok, will":["add."],"Okasaki (or":["his"],"Okasaki book":["uses"],"Okasaki), i.e.":["once"],"Okay, *anagramsFor*":["a"],"Okay, I":["admit","need"],"Okay, that's":["fair.","fine.","pretty"],"Okey dokey.":["Done."],"On (much)":["bigger"],"On a":["higher","small"],"On large":["lists"],"On line":["16","6","8,","3","14","3"],"On sane":["input,"],"On second":["thought,","thought...give"],"On the":["other","same","other","other","2nd","other"],"On your":["previous"],"Once I'm":["free"],"Once again,":["when"],"Once in":["```anagramsFor```"],"Once you":["are","have"],"Once you've":["used","imported"],"One area":["that"],"One day":["I'll"],"One for":["Earth,"],"One good":["reason"],"One idea":["for"],"One issue":["you"],"One more":["free","change:"],"One needs":["to"],"One nitpick":["to"],"One note,":["you"],"One of":["them","binary,","my"],"One option":["would"],"One other":["question:"],"One possible":["subjective"],"One question":["though,"],"One real":["issue"],"One reason":["for"],"One small":["note:","consideration"],"One thing":["I","you","that","I","to","that","for"],"One very":["picky"],"One way":["is","to","to","to","to"],"Only nit:":["since"],"Only possible":["nits"],"Only prob":["I"],"Only style":["things"],"Only the":["non-strict"],"Only thought":["is"],"Ooh good":["point."],"Ooh wait,":["getting"],"Ooh yeah,":["`tails`,"],"Ooh, I":["like","like"],"Ooh, nice":["one."],"Ooh, wonderful.":["I"],"Ooo right,":["good"],"Ooooo, very":["good."],"Oops left":["the"],"Oops, I":["missed","did","accidently","accidentally"],"Oops, didn't":["mean"],"Oops, meant":["to"],"Oops, submitted":["the"],"Oops, you're":["right,"],"Oops. @braulio":["already"],"Oops. You've":["got"],"Operator precedence":["isn't"],"Ops, I've":["missed"],"Ops.. Please":["sorry"],"Optimizing for":["the"],"Optional: `sorted`":["could"],"Options include":["```error```ing"],"Options seem":["to"],"Or BangPatterns":["with"],"Or I":["guess"],"Or `let":["a"],"Or `map":["(,"],"Or `take":["dv"],"Or `total":["="],"Or alternatively":["what"],"Or am":["I","I","I","I","I","I"],"Or are":["you"],"Or can":["something"],"Or do":["you"],"Or even":["better,","better"],"Or is":["there","GHC","it"],"Or just":["```sum```."],"Or maybe":["that's","it","just","Either"],"Or see":["if"],"Or should":["`anagramOf`"],"Or simply":["coerce"],"Or to":["totally"],"Or use":["pattern","alternative,"],"Or we":["can"],"Or, move":["it"],"Or, of":["course,"],"Or, using":["fold,"],"Or, without":["using"],"Orchestra). This":["told"],"Ord (a,":["b)"],"Ord a":["=\u003e","=\u003e"],"Ord b)":["=\u003e"],"Ord e)":["=&gt;"],"Ord k":["=\u003e","=\u003e","=\u003e"],"Ord, Show":["instances"],"Ordering, Integer,":["Int,"],"Ordinarily, I":["would"],"Originally I":["had"],"Originally, I":["left"],"Other from":["that,"],"Other people":["probably"],"Other solutions":["uses"],"Other than":["than,","that","that","that,","that,","that,","isQuestion","the","that,","that","that,","that,","these","that","this,","that,","simplifying","that","the","that","that"],"Other that":["that,"],"Other things":["looks"],"OtherMessage then":["putting"],"Otherwise I":["see","don't","have"],"Otherwise it":["looks","looks","all"],"Otherwise looks":["good.","great.","pretty","great!"],"Otherwise nothing":["to"],"Otherwise one":["has"],"Otherwise the":["solution"],"Otherwise this":["looks","looks","looks","looks","looks","looks","is","is","looks"],"Otherwise you":["see","could"],"Otherwise you'll":["have"],"Otherwise, I":["would","think","would","like"],"Otherwise, an":["empty"],"Otherwise, everything":["looks"],"Otherwise, it":["looks"],"Otherwise, looks":["good!","good!","good!"],"Otherwise, the":["implementation"],"Otherwise, this":["looks","looks","looks","is","all","looks","is","is"],"Otherwise, using":["functions"],"Out of":["interest,","curiosity,","curiosity,"],"Outer one":["is"],"Output a":["nicer"],"Over engineered?":["Probably.","Probably."],"Overall I":["like","think"],"Overall good":["though,"],"Overall looks":["good"],"Overall nothing":["here"],"Overall this":["looks","is","looks","is","solution","is","solution","is","is"],"Overall, I'm":["pleased"],"Overall, looks":["pretty"],"Overall, this":["is","is"],"Overall, very":["succinct"],"OverloadedStrings #-}`":["pragma"],"OverloadedStrings #-}```":["extension"],"OverloadedStrings extension":["in"],"OverloadedStrings is":["pretty"],"OverloadedStrings you":["can"],"OverloadedStrings, NoMonomorphismRestriction":["#-}`."],"OverloadedStrings. Usually":["people"],"P.P.S. and":["please"],"P.S. Definition":["of"],"P.S. I've":["also"],"P.S. if":["you"],"PL, if":["you"],"PM, thanks":["for"],"PR that":["demonstrates"],"PR to":["fix"],"PR. I":["noticed"],"PRNG state":["g"],"PS. Can":["someone"],"PS: yes,":["I"],"Pairs. Both":["feel"],"Pandoc or":["aeson."],"Parallel and":["Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent","Concurrent"],"Paralllel and":["Concurrent"],"Parens around":["`filter"],"Parentheses are":["only"],"Parentheses in":["Haskell"],"Parsec and":["skipped"],"Parsec doesn't":["have"],"Parsec or":["Attoparsec","Attoparsec."],"Parsec though":[":)"],"Parsec, but":["it"],"Parsec. When":["using"],"Parser Combinator":["btw)."],"Parser Combinators":["too,"],"Part of":["it"],"Pass it":["a"],"Passes tests,":["but"],"Passes the":["unit"],"Pattern match(es)":["are","are"],"Pattern matching":["makes","sometimes","works","it","and"],"Patterns not":["matched:","matched:"],"Peanuts -\u003e":["1,"],"People are":["being"],"People, plz":["help"],"Per my":["nitpick","last"],"Per the":["documentation,"],"Performance is,":["of"],"Perhaps \"isSilence\"":["would"],"Perhaps Haskellers":["are"],"Perhaps `and":["."],"Perhaps `countWord`":["and"],"Perhaps a":["simpler"],"Perhaps add":["a"],"Perhaps because":["it"],"Perhaps by":["breaking","using"],"Perhaps factor":["`sort"],"Perhaps give":["it"],"Perhaps instead":["of"],"Perhaps nicer":["would"],"Perhaps someone":["clever"],"Perhaps something":["like"],"Perhaps that":["was"],"Perhaps there":["should","are"],"Perhaps you":["should","could","should","should","should"],"Personal preference":["-"],"Personal preference,":["I"],"Personally I":["find","think","find"],"Personally I'd":["just"],"Personally, I":["think","agree","think","couldn't"],"Peyton Jones's":["articles"],"PharseHeard data":["in"],"Phew... couldn't":["have"],"Phone as":["a"],"PhoneError, or":["maybe"],"PhoneNumber $":["splitAt"],"PhoneNumber pAreaCode":["pFirstPart"],"PhoneNumber should":["have"],"Places is":["the"],"Planet -&gt;":["Float"],"Planet -\u003e":["Float","Float`"],"Planet as":["the"],"Plant` would":["be"],"Platform (although":["the"],"Platform (as":["of"],"Platform (at":["least"],"Platform (which":["doesn't"],"Platform (you":["can"],"Platform 2013.2.0.0,":["so"],"Platform 2013.2.0.0.":["Generally"],"Platform and":["couldn't"],"Platform anywhere":["that"],"Platform but":["Data.Map.Strict"],"Platform for":["a"],"Platform has":["it."],"Platform installed.":["GHC"],"Platform on":["this"],"Platform so":["it's"],"Platform that":["matched.","I'm"],"Platform\" would":["be"],"Platform) in":["combination"],"Platform, but":["it","I"],"Platform, can":["you"],"Platform, so":["it","if"],"Platform, there":["are"],"Platform. At":["least,"],"Platform. I":["wonder"],"Platform. Much":["of"],"Platform](http://lambda.haskell.org/platform/doc/current/frames.html), so":["you"],"Platform… but":["it's"],"Please add":["explicit","type","type","top"],"Please correct":["me"],"Please could":["you","you"],"Please delete":["or"],"Please feel":["free"],"Please give":["advice!"],"Please ignore":["it!","it.","this"],"Please let":["me","me"],"Please read":["the"],"Please sorry":["missed"],"Please take":["a"],"Please upgrade":["your"],"Please use":["explicit","Data.Map.Strict","pattern"],"Plenty of":["ways","food"],"Plus `Data.List`":["comes"],"Plus it":["has"],"Plus there's":["some"],"Pluto and":["complain"],"Point !Int":["!Int"],"Point =":["Point"],"Point free":["is"],"Point still":["isn't"],"Point taken":["about"],"Point-free maybe":["a"],"Point-free style":["is"],"Pointfree goodness":[":)"],"Poor Bob.":["Since"],"Possible minor":["improvements"],"Possibly a":["useful","nicer"],"Possibly cause":["I"],"Possibly even":["better,"],"Possibly need":["to"],"Practical though,":["considering"],"Precomputing every":["permutation"],"Prelude (check":["out"],"Prelude (such":["as"],"Prelude (the":["built-in"],"Prelude Control.Arrow\u003e":[":t"],"Prelude Data.Map.Strict\u003e":["(fromListWith"],"Prelude Data.Map\u003e":["(fromListWith",":m"],"Prelude `any`":["and"],"Prelude `foldl`":["is"],"Prelude and":["you're","`foldl'`","various","Data.Char.","see"],"Prelude are":["supposed","all"],"Prelude as":["the"],"Prelude at":["all."],"Prelude don't":["need"],"Prelude functions":["I"],"Prelude has":["a","exactly"],"Prelude hiding":["(words)`).","(words)`"],"Prelude imports":["in"],"Prelude instead":["of"],"Prelude so":["a"],"Prelude that":["could","is","will","does","would"],"Prelude to":["do"],"Prelude version":["of"],"Prelude's `error`":["is"],"Prelude's `fromEnum`":["(by"],"Prelude, I":["think..."],"Prelude, so":["it"],"Prelude. Note":["that"],"Prelude. There":["is"],"Prelude. There's":["also"],"Prelude. This":["is"],"Prelude. Try":["not"],"Prelude. You're":["right"],"Prelude. `isSeparator`,":["`isValidChar`"],"Prelude.foldl, hinting":["about"],"Prelude.map? Is":["there"],"Prelude\u003e :m":["Data.Map"],"Prelude\u003e :set":["-XOverloadedStrings"],"Prelude\u003e Data.List.Split.wordsBy":["(not"],"Prelude\u003e Data.Text.split":["(not"],"Prelude\u003e flip":["(++)"],"Prelude\u003e fromEnum":["False","True"],"Prelude\u003e sum":["$"],"Prelude\u003efilter id":["[True,"],"Prelude\u003ezipWith (/=)":["xs"],"Presumably this":["function"],"Pretty minor":["nits"],"Pretty much":["a"],"Pretty nice":["though!"],"Pretty straightforward":["and"],"Pretty sure":["there"],"Pretty typeclass":["or"],"Previous solution":["was"],"Prime factorization":["has"],"Probably a":["bit"],"Probably doesn't":["matter"],"Probably i'm":["not"],"Probably just":["too","a"],"Probably lots":["to"],"Probably not":["the","necessary"],"Probably should":["have"],"Probably should've":["used"],"Probably shouldn't":["have"],"Probably time":["to"],"Probably. OTOH,":["I","I"],"Problem statement":["doesn't"],"Problem with":["this","length"],"Program Design`":["show"],"Programming in":["Haskell","Haskell","Haskell","Haskell","Haskell","Haskell","Haskell","Haskell","Haskell","Haskell","Haskell:","Haskell","Haskell","Haskell:","Haskell:","Haskell:","Haskell:","Haskell","Haskell:","Haskell","Haskell","Haskell","Haskell:","Haskell","Haskell:","Haskell","Haskell","Haskell:","Haskell:","Haskell:","Haskell:","Haskell:","Haskell","Haskell:","Haskell","Haskell:","Haskell:","Haskell:","Haskell","Haskell","Haskell","Haskell","Haskell:","Haskell:","Haskell's","Haskell:","Haskell:","Haskell:","Haskell:","Haskell:","Haskell","Haskell","Haskell","Haskell","Haskell","Haskell:","Haskell","Haskell","Haskell","Haskell:","Haskell:","Haskell","Haskell:","Haskell","Haskell","Haskell","Haskell:","Haskell:","Haskell","Haskell:","Haskell","Haskell"],"Props for":["making"],"Props to":["@eddie"],"Pull request:":["https://github.com/exercism/exercism.io/pull/1323"],"Pulling in":["a"],"Punctuation and":["the"],"Purely Functional":["Data"],"Pushing the":["`letterSet`"],"Put a":["`isSilence`"],"Put takes":["an"],"Put that":["in"],"Put the":["auxiliary"],"Putting `where`":["on"],"Python in":["Haskell"],"Python solution,":["comments","and"],"Python split":["would"],"Python version":["of"],"Python's [translate](http://docs.python.org/2/library/string.html#string.translate)":["method,"],"Python's `reduce`":["is"],"Python's has":["by"],"Python's list":["comprehensions"],"Python). The":["only"],"Python. It":["would"],"Q ]":["="],"QUESTION?\". If":["I"],"QUESTION?` should":["be"],"QuasiQuotes for":["this,"],"Question will":["throw"],"Question |":["Meh","Shout","Shout","Shout"],"Question: I":["had"],"Quite a":["clever"],"Quite pleased":["by"],"RAM and":["creates"],"RC, so":["7.4"],"RE: `TupleSections`":["-"],"README and":["just"],"README describes.":["The"],"README do":["you"],"README doesn't":["describe"],"README file":["says"],"README file,":["nor"],"README file.":["However"],"README is":["basically","shared","broken."],"README most":["cleanly"],"README or":["the"],"README provides":["enough"],"README says":["the","to"],"README should":["be"],"README since":["it's"],"README soon,":["I've"],"README used":["a"],"README was":["changed"],"README's suggestion":["to"],"README, and":["the"],"README, but":["in"],"README, everything":["looks"],"README. In":["that"],"README. Now":["I"],"READMEs for":["problems"],"READMEs were":["all"],"REAMDE in":["example?"],"RHS of":["`\u003c$\u003e`"],"RHS. Yet":["one"],"RNA =":["C","RnaC"],"RNA a":["newtype"],"RNA and":["DNA","DNA","DNA"],"RNA anywhere.":["You"],"RNA as":["distinct"],"RNA bases":["in"],"RNA data":["type"],"RNA or":["DNA","DNA"],"RNA remain":["chars"],"RNA strings":["will"],"RNA transcription":["works."],"RNA type":["in"],"RNA with":["DNA,"],"RNA, but":["that's"],"RNA. I'm":["not"],"RNA: `A`,":["`C`,"],"RNABase should":["be"],"RSA and":["their"],"RULE that":["can"],"RULE to":["optimize"],"RULES in":["the","the"],"RULES pragma,":["and/or"],"RULES pragmas":["that","in"],"RULES pragmas:":["http://hackage.haskell.org/package/base-4.6.0.1/docs/src/GHC-Base.html#map"],"RULES term":["rewriting"],"RULES …":["#-}`"],"RX837 or":["BC811.","BC811.\""],"Random facilities":["I"],"Random module.":["I"],"Random stuff":["works"],"RandomRIO like":["that,"],"Rather than":["using","trying","checking","using","guards"],"Rather, it's":["just"],"Re Data.Text":["-"],"Re the":["qualified"],"Re-implemented countWords":["using"],"Re: Haskell's":["non-strict"],"Re: `$`,":["I'm"],"Re: `length":["digits`"],"Re: explicit":["exports,"],"Re: laziness":["/"],"Re: predicates,":["`isShouting`"],"Re: signatures,":["I"],"Re: the":["algorithm"],"Read (Base":["DNA)`","p)"],"Read (a,":["b)"],"Read b)":["=\u003e"],"Read instance":["where"],"ReadChar class":["with"],"ReadS (Base":["p)"],"Reading STM":["chapter"],"Reading solutions":["by"],"Reading the":["code,"],"Reading this":["section"],"Readme explicitly":["says:"],"Readme, someone":["is"],"ReadsBase DNA":["where"],"ReadsBase p":["=&gt;","where"],"Realized `zipWith`":["could"],"Realized that":["Map.alter","the","`Integer`"],"Really I":["don't"],"Really I'm":["not"],"Really I've":["got","used"],"Really a":["nit"],"Really appreciate":["it."],"Really elegant":["solution,"],"Really helpful":["when"],"Really helpful,":["@diamond."],"Really it's":["safe","interesting"],"Really its":["possible"],"Really just":["a"],"Really simple":["concat"],"Really starting":["to"],"Really the":["task"],"Really there":["is","is","is"],"Really this":["task","task"],"Really you":["don't","don't"],"Really, you":["just"],"Recent discussions":["on"],"Recovering from":["an"],"Recursion](http://www.haskell.org/haskellwiki/Haskell_programming_tips#Avoid_explicit_recursion), can":["you"],"Redo ```toDecimal```":["in"],"Regarding `Data.Bits`,":["how"],"Regarding ```toUpper":["k```,"],"Regarding `cleanUpInput`,":["if"],"Regarding `isQuestion`":["I"],"Regarding `isShout`":["both"],"Regarding comments,":["I"],"Regarding point":["free"],"Regarding qualified":["imports:"],"Regarding readability,":["this"],"Regarding style,":["the"],"Regarding your":["first","second,","second","first"],"Regex in":["there"],"Regexes should":["generally"],"Regular Expressions":["make"],"Regular expressions":["are"],"Relying on":["`Data.Char`"],"Remember that":["list"],"Remember to":["write"],"Remembering that":["`randomRIO`"],"Reminds me":["of"],"Remove an":["unnecessary"],"Remove the":["space."],"Removed a":["few","redundant"],"Removed the":["dependency"],"Removed those":["extra"],"Reordered conditions":["so"],"Reordering your":["guards"],"Repeatedly using":["`insertWith"],"RequestType ADT":["makes"],"Resounding praise,":["right?"],"Responses and":["Answers."],"Return is":["a"],"Return the":["correct"],"Returning `False`":["could"],"Reusing lx":["to"],"Reverse is":["monolithic"],"Revision, coming":["up!"],"Reworked previous":["submission"],"Rewritten using":["```not"],"Rewrote based":["on"],"Rewrote my":["solution"],"Ridiculous silly":["bikeshed"],"Right Thing":["to"],"Right constructors":["would"],"Right folds":["are"],"Right now":["the","all","you","it","it's","you"],"Right to":["be"],"Right would":["be"],"Right you":["are!","are!"],"Right, I'm":["not"],"Right, but":["what"],"Right, that":["make"],"Right/default value":["is"],"RnaC |":["...."],"Robot (":["IORef"],"Robot (IORef":["String)"],"Robot (MVar":["StdGen)"],"Robot (TVar":["String)`"],"Robot -\u003e":["IO","IO","String`","IO","IO","undefined","IO","IO"],"Robot \u003c$\u003e":["(generateName","(newIORef"],"Robot =":["Robot","Robot","Robot","Robot","Robot","Robot"],"Robot and":["not","use"],"Robot are":["not"],"Robot doesn't":["force"],"Robot instead":["of"],"Robot since":["`(a,"],"Robot so":["changed"],"Robot using":["`NFData`"],"Robot you":["would"],"Robot {":["name"],"Robot {name":["::"],"Robot's fields":["are"],"Robot, but":["then"],"Robot, just":["the"],"Roman numerals":["in"],"Roman numerals,":["etc."],"Rome, take":["advantage"],"Rows Cols":["(Vector"],"Ruby exercises.":["I've"],"Ruby first,":["and"],"Ruby or":["JS"],"Ruby when":["I"],"Ruby worked.":["I"],"Ruby, not":["because"],"Ruby, so":["there","there"],"Ruby, where":["it"],"Ruby... then":["some"],"Running time":["is"],"Russian we":["have"],"S from":["local","local"],"S into":["local","local"],"S is":["`start","only"],"SImon Marlow's":["book"],"SPJ's presentations.":["For"],"ST monad":["is"],"ST monad,":["etc.)."],"ST or":["IO"],"STM (TMVar":["is"],"STM and":["IO"],"STM chapter":["in"],"STM comes":["in,"],"STM computation":["must"],"STM however":["detects"],"STM improves":["on"],"STM is":["rather","another"],"STM isn't":["the"],"STM monad)":["is"],"STM monad).":["Even"],"STM monad,":["but"],"STM stuff":["from."],"STM though":["because"],"STM transaction":["we"],"STM variant":["of"],"STM's TVar.":["It's"],"STM, almost":["possible"],"STM. However":["tests"],"STMVar, but":["that's"],"STMVar, or":["IORef."],"S` will":["come"],"Same as":["insertWith,"],"Same comment":["regarding"],"Same for":["`yelling`,","`elem`,","Foo","`prettyPrint`"],"Same goes":["for","for"],"Same story":["for"],"Same thing,":["I'm"],"Same with":["imports,","isAsking.","`isUpper"],"Savage: \"now":["there's"],"Say `start`":["is"],"Say you":["have"],"Saying \"the":["result"],"Scala... it's":["called"],"Scalene has":["0"],"Scalene is":["a"],"Scalene] !!":["diffSides"],"Sch $":["M.insertWith"],"Sch .":["M.insertWith"],"Schedule an":["Enum"],"Schedule is":["clever,"],"Schedule. Note":["that"],"School (and":["implicitly"],"School -\u003e":["School`"],"School .":["insertWith"],"School ...```,":["why"],"School =":["IntMap","School","School","School","School","School","M.Map"],"School a":["real","```newtype```."],"School and":["School'"],"School datatype":["(whatever"],"School that":["might"],"School up":["in"],"School {":["unSchool","unSchool","records","records","unSchool"],"School' types":["(but"],"School` which":["I"],"School`. The":["two"],"Schools, since":["every"],"Sci at":["uni"],"Scoring a":["letter"],"Scoring\" [here]":["(http://tutorials.jumpstartlab.com/academy/workshops/scrabble_intermediate.html)."],"Scrabble (scoreLetter,":["scoreWord)"],"Scrabble the":["wildcard"],"Scrabble there":["are"],"Scrabble, but":["apparently"],"Scrabble, where":["I"],"Search Driven":["Development™"],"Search for":["\"instance","\"Back"],"Second one":["imports"],"Second predicate":["can"],"Second question:":["The"],"Second, Third,":["Fourth"],"Secondly `wordsBy":["."],"See I":["knew"],"See T":["and"],"See [Foldr":["Foldl"],"See [modules](http://www.haskell.org/tutorial/modules.html),":["specifically","specifically","specifically"],"See also":["'fromAscListWithKey'.","http://www.haskell.org/haskellwiki/Stack_overflow","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'"],"See an":["example,"],"See here:":["http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'"],"See http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf":["for","for"],"See http://hackage.haskell.org/package/deepseq":["for"],"See http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'":["for","for"],"See if":["you","you","you","you"],"See iteration":["1"],"See my":["next","new"],"See next":["revision."],"See the":["relevant","newer"],"See this":["section","section"],"Seeing this":["I"],"Seem like":["a"],"Seemed like":["the"],"Seemed pretty":["straightforward,"],"Seems I've":["totally"],"Seems a":["bit"],"Seems because":["I"],"Seems like":["a","it","that's","it","it","you","an"],"Seems odd":["to"],"Seems pretty":["straightforward."],"Seems probably":["not"],"Seems rather":["obscure."],"Seems require":["some"],"Seems so,":["but"],"Seems tests":["missing"],"Seems that":["being","show","the","addens"],"Seems to":["be","me"],"Seems trace":["is"],"Seems unintuitive":["to"],"Seems weird":["that"],"Selects Unicode":["numeric"],"SentenceKind, new":["condition"],"Separate treatment":["of"],"Separated conditions":["into"],"Separating out":["the"],"Set --":["all"],"Set String":["-&gt;"],"Set is":["redundant"],"Set made":["my"],"Set over":["not"],"Set, check":["out"],"Set. The":["example"],"Set.empty g":["."],"Set.toList .":["Map.lookup","Map.findWithDefault"],"Set.union` made":["my"],"Sets are":["the"],"Several functions":["might"],"Several small":["things:"],"Shoot, I":["meant"],"Short and":["sweet.","concise"],"Short variable":["names"],"Short` you":["could"],"Shortens the":["code"],"Should I":["actually"],"Should `nucleotideCounts`":["check"],"Should be":["`foldl'","`(fromBool"],"Should have":["type"],"Should include":["type"],"Should it":["be"],"Should the":["README","answer"],"Should we":["avoid"],"Should you":["\"just"],"Shouldn't 9":["and"],"Shouldn't `bstValue`":["return"],"Shouldn't `sort":["$"],"Shouldn't any":["string"],"Shouldn't it":["get"],"Shouldn't matter":["here"],"Shout |":["Anything","Anything","Anything"],"Shouts, but":["`all`"],"Show (a,":["b)"],"Show a":["=\u003e"],"Show and":["Monad…"],"Show b)":["=\u003e"],"Show for":["this,"],"Show instances":["as","often","have"],"Show to":["be"],"Show typeclass,":["anyway)."],"ShowS (which":["is"],"ShowS is":["just"],"ShowS represents":["is"],"ShowS works.":["I"],"ShowS. Is":["the"],"Shrink the":["module"],"Sieve of":["Eratosthenes"],"Silence |":["Aggression","Question","Question","Question"],"Silly me!":["Rewritten"],"Silly quoting":["algorithm."],"Similar reasoning":["for"],"Similar to":["how"],"Similarly `f":["x"],"Similarly something":["that"],"Similarly you":["could"],"Similarly, I":["would"],"Similarly, `(not":["$"],"Similarly, `readStatement`":["could"],"Similarly, `replicate":["10"],"Similarly, you":["should"],"Simon Marlow":["book","book","book"],"Simon Marlow's":["book","book,"],"Simon Peyton":["Jones.","Jones's"],"Simple and":["concise."],"SimplePrimes.hs in":["http://www.cs.hmc.edu/~oneill/code/haskell-primes.zip"],"Simplified the":["lstrip"],"Simply deleting":["the"],"Simply put":["an"],"Simply remove":["the"],"Since 'T'":["is"],"Since Data.Map":["is"],"Since Data.Map's":["functions"],"Since Functor":["is"],"Since Haskell":["is","is"],"Since `(-\u003e)":["r`"],"Since `anagrams`":["is"],"Since `countSides":["(const"],"Since `foldl'`":["uses"],"Since `insertWord`":["is"],"Since `isQuestion`":["is"],"Since `n`":["isn't"],"Since `question`":["is"],"Since `yelling`":["doesn't"],"Since both":["take"],"Since everyone":["is"],"Since function":["application"],"Since it":["doesn't"],"Since it's":["purely","big","required"],"Since only":["one"],"Since the":["order","result","fields","last","starting"],"Since there's":["never"],"Since these":["are"],"Since they":["are"],"Since they're":["equivalent"],"Since you":["only","picked","don't","only"],"Since you're":["only","already","building"],"Since your":["predicate"],"Since, as":["you"],"Slightly better":["refactoring"],"Slightly different":["bottom"],"Small nit,":["but"],"Small nit:":["I"],"Smart way":["to"],"SnocList a":["="],"SnocList anywhere":["already"],"So \"equivalent":["but"],"So Data.Map's":["value"],"So GHC":["converted"],"So I":["reworked","must","went","assumed","guess","think","think","followed","guess","choosed","started","guess","am","would"],"So I'm":["really","not"],"So I've":["not"],"So `count`":["looks"],"So `foldr`":["is"],"So `toRNA":["="],"So a":["simpler"],"So b,":["the"],"So essentially":["it's"],"So first":["we"],"So having":["one"],"So here's":["the","a"],"So if":["I'm","I'm","you"],"So in":["this","theory","this"],"So instead":["of"],"So it":["becomes","does","ends"],"So it's":["only","not"],"So let's":["define"],"So lets":["say"],"So my":["implementation","`toRNA`"],"So no,":["it"],"So not":["a"],"So now":["we","I've"],"So obviously":["I'm"],"So really,":["\"Left\""],"So since":["you"],"So something":["like"],"So strongly":["consider"],"So such":["approach"],"So suggestions":["for"],"So that":["`lettersInStatement`","means"],"So the":["only","better","rule","guard","way","purpose","tests","first","sum","only","`foldl'`"],"So then":["it"],"So there":["is"],"So there's":["a","actually"],"So this":["lower","may","one","approach","exercise"],"So to":["make"],"So using":["the"],"So we":["have"],"So what":["that","if","did"],"So when":["`anaGrams`","this","you"],"So which":["one"],"So why":["not"],"So with":["`Data.Map.Strict`,"],"So you":["can","need","could","have","can","end","end","may","can"],"So you're":["looking","suggesting"],"So, I":["figured,"],"So, `do`":["is"],"So, are":["you"],"So, given":["that"],"So, in":["this"],"So, just":["to"],"So, the":["`newtype`"],"So... is":["this"],"Software Transactional":["Memory"],"Solution is":["overly","overly","to"],"Solution looks":["unnecessary"],"Some BSTs":["can"],"Some code":["will"],"Some definitions":["`howMany`"],"Some extensions":["can"],"Some functions":["are"],"Some great":["information"],"Some like":["to"],"Some may":["suggest"],"Some might":["find","write","suggest"],"Some much-needed":["tidying"],"Some of":["the","the","the"],"Some parenthesis":["are"],"Some people":["choose","also","might"],"Some people,":["when"],"Some possible":["improvements"],"Some problem":["with"],"Some programmers":["like"],"Some reasons":["why"],"Some simple":["rules"],"Some small":["suggestions:"],"Some useful":["tips"],"Somebody suggested":["fromListWith"],"Somehow I":["had"],"Somehow I'd":["gotten"],"Something involving":["`Data.List.intersperse`"],"Something like":["`import","the","this:","`chunksOf`","this:","this:","`data","this:","Data.Vector","this","this","the","`f","this?","this?"],"Sometimes convention":["is"],"Sometimes it's":["nice"],"Sometimes the":["arguments"],"Sometimes you":["even","probably","might"],"Somewhat more":["succinct."],"Soo.... this":["works."],"Sorry @ayden;":["if"],"Sorry I":["didn't","haven't","didn't"],"Sorry about":["the"],"Sorry for":["the"],"Sorry if":["I'm"],"Sorry should":["be","be"],"Sorry this":["is"],"Sorry what":["exactly"],"Sorry, I":["thought","just"],"Sorry, I'm":["a"],"Sorry, autocomplete":["play"],"Sorry, didn't":["mean"],"Sorry, please":["forget"],"Sorry, submitted":["in"],"Sorry, the":["comment"],"Sorry, yeah,":["for"],"Sorry, you're":["right."],"Sorry; I'm":["missing"],"Sort and":["then"],"Sort of":["have"],"Sorting and":["then"],"Sorting is":["a"],"Sorting the":["list"],"Sorting will":["also"],"Sounds almost":["like"],"Sounds like":["a"],"Source (on":["the"],"South =":["second"],"Space, Punctuation":["and"],"Spaces and":["punctuation"],"Speaking of":["that,"],"Specifically, `words":["=="],"Specifically, it":["would"],"Specifically, this":["property"],"Specifically: `resetName`":["doesn't"],"Split but":["I"],"Split is":["in"],"Split, as":["the"],"Splitting can":["be"],"Square`s than":["this."],"StackOverflow question":["shows"],"StackOverflow, and":["I"],"Standard Haskell":["Platform,"],"Standard `take`s":["and"],"Start by":["looking"],"Started with":["a","sing","the"],"State monad":[":)","because","isn't"],"State or":["StateT,"],"StateT trying":["to"],"StateT, without":["using"],"Statement` at":["the"],"StdGen rather":["than"],"Stewart. Good":["luck"],"Still could":["be"],"Still get":["a"],"Still getting":["used"],"Still have":["a"],"Still it":["seems"],"Still looking":["for","for"],"Still needs":["type"],"Still think":["the"],"Still thinking":["about"],"Still very":["new"],"Still wondering":["if"],"Still wordy,":["but"],"Still, I":["do"],"Still, a":["good"],"Still, fun":["to"],"Stm also":["allowed"],"Stole some":["ideas"],"Strange -":["I"],"Strange, I":["am"],"Strict instead":["of","of"],"Strict map":["here"],"Strict version":["forces"],"Strict. Thanks":["a"],"Strictly speaking,":["you"],"Strictness issues":["with"],"String -&gt;":["Data.Map.Map","String","Bool`","Bool`","PhoneNumber","String","Bool","String","String","Set","Set","Map","Int.","String","String","Bool","Map","String","(String","([String]","WordCount","String.","String","Bool","EmotionalContent","String","Int","String"],"String -\u003e":["String`).","(String,","(String","String`)","String","Bool","M.Map","[String]","String","Bool","Map","String","Int","Int","Int","Map","(String","String","String`)","String`","Map","[","String","[String]","String","IO","String","Int","[Plant]","Map","Map","IO","Maybe","String","String","String","String```","[String]"],"String =":["[Char]"],"String Char`":["and"],"String I":["chose"],"String IO":["String`"],"String Int))`,":["which"],"String Int,":["which"],"String Int`":["is","as","is","instead.","as","from"],"String Int`.":["My"],"String `message`":["be"],"String all":["the"],"String and":["upcases","some","not","you"],"String anyway":[":)"],"String anyway.":["I"],"String are":["lists"],"String for":["both","the"],"String if":["you"],"String in":["Haskell","the"],"String input.":["`(ByteString.unpack"],"String into":["words"],"String is":["less","also"],"String it's":["pretty"],"String m":["a`"],"String so":["large"],"String straight":["from"],"String that's":["longer"],"String version":["using"],"String when":["you","modern"],"String where":["`unwords`"],"String with":["error"],"String would":["have"],"String wouldn't":["be"],"String }`":["implicitly"],"String }`.":["I"],"String →":["(Strand","String"],"String) -\u003e":["Bool"],"String))` because":["I'm"],"String)] -\u003e":["String"],"String)]` for":["the"],"String)]` such":["that"],"String)]`). Any":["hints?"],"String)` constructor":["has"],"String)` in":["parts?"],"String)` since":["using","you"],"String)` tuple":["would"],"String)` where":["`fst`"],"String)` which":["does"],"String, ()}`":["where"],"String, String)`":["since","in","tuple"],"String, as":["they"],"String, before":["you"],"String, it's":["probably"],"String, only":["the"],"String, so":["there's"],"String, which":["is"],"String, you":["could"],"String. Changing":["the"],"String. So":["you're"],"String. Take":["a"],"String. The":["fact","trick"],"String. WHat":["else"],"String. What":["would"],"String\u003c/pre\u003emeaning it":["takes"],"String? Not":["entirely"],"String? There's":["no"],"String` (and":["`lookups`"],"String` and":["leave"],"String` as":["`ShowS`,","the"],"String` but":["with"],"String` field.":["That's"],"String` in":["the"],"String` instead":["of"],"String` so":["that"],"String` you":["could"],"String`, although":["in"],"String`, instead":["of"],"String`, it's":["nothing"],"String`. Take":["a"],"String`s? If":["so,"],"Strings are":["just","just"],"Strings can":["be"],"Strings together":["-"],"Strings. For":["the"],"String} does":["this"],"Structures by":["Chris"],"Stuff like":["that."],"Stylistically, I":["prefer"],"SublimeText for":["Haskell"],"Submitted an":["issue"],"Such representation":["will"],"Suddenly S":["is"],"Suggestion for":["line"],"Suggestions on":["how"],"Sunday =":["7).","Monday`)"],"Super case":["heavy"],"Supporting negative":["numbers"],"Sure =)":["thanks"],"Sure and":["ChillOut)."],"Sure you":["could"],"Sure, always":["optimize"],"Sure, go":["ahead"],"Sure, it":["is"],"Sure, it's":["point"],"Surely it":["should"],"Surely there's":["a","a","a"],"Surface issues":["aside,"],"Swings and":["roundabouts?"],"Switched from":["a","`alter`"],"Switched the":["repeated"],"Switched to":["`fromListWith`"],"Switching to":["`foldr`"],"System.Random (randomRIO)`).":["That"],"System.Random's `randomRIO`":["in"],"T =":["'U'"],"T and":["U","U.","try"],"T combinator":["is"],"T deriving":["Show"],"T rather":["than"],"T with":["U\""],"T |":["U`","U"],"T.last s'...`":["and"],"T.pack s`":["inside"],"T.strip $":["T.pack"],"TALK TO":["ME"],"TH but":["kept"],"THAT.` Otherwise,":["it"],"THE HELL":["WERE"],"THINKING?\" should":["be"],"THIS A":["QUESTION?\"."],"TMVar (LL":["a),","a)","a)","a)"],"TMVar (Maybe":["(Node"],"TMVar (Node":["a)","a)","a)","a)"],"TMVar instead":["of"],"TO ME":["LIKE"],"TODO how":["to"],"TVar -":["software"],"TVar after":["modifying"],"TVar and/or":["IORef."],"TVar may":["be"],"TVar there":["is"],"TVar, and":["IORef"],"TVar. It's":["also"],"TVars I":["think"],"TVars and":["what-have-you"],"TVars are":["a","a"],"TVars). Not":["sure"],"Take a":["look","look","look","look","look","look","look","closer","look","look","look","look","look","look","look","look","look","look","look","closer","look","look","closer","look","closer","closer","look","look","look","look"],"Take takes":["a"],"Technically in":["the"],"Technically this":["is"],"Technically, an":["anagram"],"Technically, the":["code"],"Teenth -\u003e":["13"],"Teenth and":["Last"],"Teenth days":["are"],"Teenth or":["Last."],"Teenth's Day":["would"],"Template Haskell.":["Building"],"TemplateHaskell. Of":["course,"],"Terrible code,":["too"],"Test cases":["are"],"Test code":["highlight"],"Tests here":["are"],"Text -\u003e":["Bool`)."],"Text and":["recognize"],"Text code":["is"],"Text conversion":["..."],"Text given":["the"],"Text here":["(even"],"Text import":["by"],"Text in":["my"],"Text instead":["of"],"Text is":["generally","that","basically"],"Text more.":["But"],"Text needs":["to"],"Text platform":["is"],"Text wasn't":["buying"],"Text, I'm":["curious"],"Text, then":["the"],"Text, try":["doing"],"Text. In":["this"],"Text.InterpolatedString.Perl6 isn't":["part"],"Text.Parsec.Token and":["I"],"Text.Printf could":["be"],"Text.Printf is":["the"],"Text.Printf or":["`concat`"],"Text.Printf which":["is"],"Text.Regex, it's":["just"],"Text.map will":["do"],"Text.map, and":["you"],"Thank You,":["your"],"Thank you":["for","for","very","for","for","much.","for","@presley!","for","very","once","for","for","for","for","for","for"],"Thank you!":["I","I",":)","I","Nothing","That's"],"Thank you,":["that","@eryn","I"],"Thank you.":["I","I","I","I","I","I","I'll"],"Thanks -":["I","great"],"Thanks :)":["I","Was"],"Thanks @anastacio,":["didn't"],"Thanks @assunta!":["I've"],"Thanks @daryl":["you're"],"Thanks @elena,":["that's"],"Thanks @erling.":["I've"],"Thanks @everardo":["and"],"Thanks @felipa,":["@felipa,"],"Thanks @jasen":["for"],"Thanks @kelli,":["I'd"],"Thanks @kelsi!":["You"],"Thanks @mitchel":["."],"Thanks @ottilie,":["using"],"Thanks @preston,":["that"],"Thanks @randal,":["that"],"Thanks @rosalind":["I"],"Thanks @sage,":["having"],"Thanks @tamara.":["I've"],"Thanks @tommie":["for"],"Thanks Kobata,":["that's"],"Thanks [etrepum](http://exercism.io/etrepum),":["I"],"Thanks a":["lot","lot","lot","lot,","lot,","lot","lot","million","bunch","ton.","bunch.","lot","lot","bunch","lot!","bunch!","lot.","bunch!","lot!"],"Thanks again":["for","for","for"],"Thanks again.":["I"],"Thanks and":["agreed."],"Thanks anyway":["for"],"Thanks etrepum.":["Haskell"],"Thanks for":["the","the","the","the","the","your","the","the","the","the","pointing","all","the","the","the","the","the","nitpicking!","the","the","the","the","the","those","the","the","the","your","the","the","the","the","the","pointing","bearing","the","this,","the","the","the","the","your","your","all","the","your","the","the","all","the","the","the","all","the","the","all","the","the","the","doing","the","the","the","the","the","the","the","taking","the","pointing","the","the","the","the","the","the","your","the","the","the","the","your","@maureen","that.","the","the","the","confirming!","the","the","the","the","the","the","the","going","the","your","the","the","the","the","the","the","the","the","the","the","all","your","your","pushing","the","the","the","the","the","the","the","the","these","the","the","the","the","the","the"],"Thanks guys!":["I'm"],"Thanks phadel!":["I"],"Thanks qnikst,":["I"],"Thanks so":["much!","much","much","much"],"Thanks to":["both","Twisol","@brendan,","@megane","@jaydon","etrepum"],"Thanks twisol":["-"],"Thanks very":["much"],"Thanks zhanrnl,":["I've"],"Thanks! And":["I"],"Thanks! Anyway,":["for"],"Thanks! How":["did"],"Thanks! I":["wrote","think","didn't","was","sort","need","didn't"],"Thanks! I've":["rethought","rewritten"],"Thanks! Learned":["something"],"Thanks! Made":["the"],"Thanks! Well,":["I'm"],"Thanks! When":["I"],"Thanks! Will":["install"],"Thanks! Your":["first"],"Thanks, @gina,":["this"],"Thanks, I":["removed","suppose","had","didn't","tried","see","don't","was","like"],"Thanks, I'll":["get","incorporate","remember"],"Thanks, I'm":["really"],"Thanks, I've":["submitted","submitted","incorporated","tried","changed"],"Thanks, `splitPlaces`":["is"],"Thanks, both":["of"],"Thanks, definitely":["better"],"Thanks, everyone.":["Point-free"],"Thanks, for":["the"],"Thanks, got":["it."],"Thanks, great":["feedback.","nits!"],"Thanks, i'm":["very"],"Thanks, improved":["it"],"Thanks, looks":["cleaner.","great!"],"Thanks, man.":["That's"],"Thanks, nice":["trick."],"Thanks, that":["makes"],"Thanks, that's":["really","a"],"Thanks, those":["help","are"],"Thanks, will":["take"],"Thanks, you're":["right,","right,"],"Thanks. Didn't":["know"],"Thanks. I":["think","will","definitely","figured","am","think"],"Thanks. I'm":["going"],"Thanks. I've":["submitted"],"Thanks. Just":["to"],"Thanks. So":["if"],"Thanks. That":["does","makes","is"],"Thanks. The":["`fmap"],"Thanks... even":["better,"],"Thanks; will":["look."],"That Scalene":["has"],"That `empty`":["function"],"That being":["said,"],"That can":["lead"],"That can't":["happen"],"That could":["let"],"That does":["sound","indeed"],"That explains":["the"],"That function":["composition","is"],"That is":["a","strange.","why","more","a","probably","correct,","very","a"],"That it":["catches"],"That last":["one"],"That let's":["you"],"That looks":["good","problematic."],"That makes":["much","it","sense","sense.","sense!","sense."],"That means":["there"],"That module":["contains"],"That never":["happens"],"That one":["isn't"],"That said":["it's"],"That said,":["you","given","you","there's","in","it's","a","given","I","it's","this","for","you"],"That saves":["you"],"That seems":["like","to"],"That serves":["as"],"That should":["be","make","clean"],"That shouting":["test"],"That sort":["of"],"That sounds":["very"],"That style":["is"],"That there's":["are"],"That this":["code"],"That warning":["you"],"That was":["my","a","easy.","a","from"],"That way":["you","it'd","I","you","you","you","you","a","it","their","their","their","their","seems","you're","the"],"That will":["be"],"That works,":["and"],"That works.":["You"],"That would":["be","remove","prevent"],"That'd avoid":["silent"],"That's a":["pretty","good","good","very","lot","good","good","nice","very","great","matter","very","very","lot"],"That's almost":["exactly"],"That's an":["interesting"],"That's awesome!":["haha"],"That's because":["`data"],"That's both":["confusing"],"That's brilliant!":["Thanks"],"That's correct,":["Map"],"That's correct.":["To"],"That's equivalent":["to","to"],"That's essentially":["the"],"That's exactly":["what"],"That's excellent":["feedback."],"That's fair.":["I"],"That's fine!":["I"],"That's four":["times"],"That's good":["to"],"That's high":["praise"],"That's how":["the","I"],"That's idea":["of"],"That's just":["a"],"That's neat,":["so"],"That's not":["so","how","to"],"That's pretty":["nice.","neat."],"That's rather":["cute,"],"That's really":["cool."],"That's right,":["the"],"That's right.":["Map"],"That's sometimes":["all"],"That's starting":["to"],"That's thanks":["to"],"That's the":["best","problem","nice"],"That's true,":["`all","it"],"That's very":["interesting","inefficient","interesting.","cool,","interesting,"],"That's what":["I","I","I"],"That's why":["it","I","I","i"],"That, of":["course,"],"That’s what":["I"],"The \"let":["/"],"The \"mapFB\"":["rule","rule"],"The 'right'":["way"],"The 64":["might"],"The Array":["one"],"The Arrow":["usage"],"The BangPattern":["for"],"The Data.Map":["value"],"The Either":["monad"],"The GHC":["compiler","optimizer","optimizer"],"The Haskell":["wiki","tests"],"The LambdaCase":["language"],"The Map":["code","type"],"The Node":["|"],"The Prelude":["`foldl`","version"],"The README":["is","file","says","is"],"The READMEs":["were"],"The ST":["monad"],"The T":["combinator"],"The Text":["platform"],"The TupleSections":["pragma","language"],"The [Data.List.Split]":["(http://hackage.haskell.org/package/split-0.1.1/docs/Data-List-Split.html)"],"The [Haskell](http://www.reddit.com/r/haskell/comments/nxu8d/f_g_x_y_f_g_x_y_in_haskell_prime_prelude)":["[boobs](http://stackoverflow.com/questions/17972422/how-does-haskells-boobs-operator-work-in-plain-non-functional-english)"],"The _":["/"],"The `!`":["annotations"],"The `$`":["in"],"The `((-\u003e)":["r)`"],"The `(==)`":["instance"],"The `(show":["n)`"],"The `Data.Char`":["module"],"The `DefaultGarden`":["trick"],"The `Display`":["constructor"],"The `Map`":["type"],"The `MessageType`":["allowed"],"The `Right":["a`"],"The `School`":["doesn't"],"The `Text`":["version"],"The `[1..dv]":["\u003e\u003e="],"The `\\_":["-\u003e"],"The ```map":["(\\x"],"The ```||":["isSpace"],"The `all`":["clause"],"The `c/=target`":["comparison"],"The `case":["()"],"The `cleanNumber`":["step"],"The `count`":["function","thing","function"],"The `create`":["here"],"The `flip`":["combinator"],"The `fmap":["sort`"],"The `foldl'`":["doesn't","doesn't"],"The `foldlStrict`":["in"],"The `foldl`":["problem"],"The `foldr`":["space"],"The `fromJust`":["wasn't"],"The `id`":["in"],"The `initList`":["function"],"The `isSpace`":["is"],"The `isSuffixOf`":["sure"],"The `j":["&amp;lt-"],"The `last`":["function"],"The `length`":["check"],"The `map`":["is"],"The `newtype`":["wrapper"],"The `not":["."],"The `otherwise`":["case"],"The `randomRobot`":["implementation"],"The `return`":["in"],"The `rnf`":["instance"],"The `seq`":["here"],"The `shiftL`":["call"],"The `shouting`predicate":["looks"],"The `take":["4`"],"The `try`":["function"],"The `up`":["function"],"The `where`":["clause","clause"],"The `words'`":["implementation"],"The `words`":["in"],"The `x`":["in"],"The `zipWith":["(++)`"],"The `|`":["and"],"The accumulator":["(the"],"The actual":["fold","code"],"The added":["complexity"],"The advantage":["of"],"The algorithm":["is","you've"],"The all":["isSpace","symbols"],"The alternative":["was","is","would","would","would"],"The area":["I"],"The associated":["`show`"],"The asymmetry":["of"],"The backslashes":["were"],"The backticks":["turn"],"The bad":["thing"],"The basic":["idea"],"The benefit":["is","here"],"The best":["way","way","way","way","way","solution","way","way","way","explanation","resource","way","idea","coverage","resource"],"The better":["solution"],"The binding":["for"],"The biological":["term"],"The body":["of"],"The brackets":["I"],"The call":["to"],"The cases":["in"],"The casing":["is"],"The check":["for","for"],"The choice":["basically"],"The closest":["one"],"The code":["would","looks","you're","seems","for","is","is","itself","looks","above","for"],"The combination":["of"],"The commented":["line"],"The compiler":["knows","(with","can","is","can","can","should"],"The concurrency":["code"],"The condition":["you're"],"The constant":["factor"],"The correct":["way","fold"],"The current":["implementation","version"],"The data":["type","type","type"],"The defaults":["can"],"The definition":["of","is","is","of","of","for","is"],"The definitions":["of"],"The difference":["between","would","is","is","here"],"The direct":["solution"],"The documentation":["only"],"The double":["computation"],"The downside":["is"],"The easiest":["way"],"The empty":["string"],"The encode":["could"],"The end":["result"],"The entire":["comparison","input","thing"],"The equality":["comparison"],"The exact":["code","same"],"The example":["in","for","uses"],"The examples":["for"],"The exception":["is"],"The exercise":["constraints"],"The exercises":["here"],"The explicit":["[]","type"],"The extension":["code"],"The extra":["whitespace","whitespace"],"The fact":["that","that"],"The filter":["in"],"The find/insert":["pattern"],"The first":["two","guard","time","step","clauses","guard","one","clause","issue","is","iteration","time","one","is","`map`"],"The fist":["clause"],"The fix":["for","for","for"],"The fixity":["declaration"],"The fold":["used"],"The foldl":["works"],"The following":["trick"],"The format":["might"],"The formatting":["code"],"The former":["is"],"The formula":["works"],"The fromListWith":["sounds"],"The function":["```isAnagramProcessed```"],"The functions":["in","in"],"The general":["rule"],"The global":["counter"],"The guards":["could"],"The handling":["of","of"],"The hard-coded":["48"],"The hexadecimal":["conversion"],"The idea":["is","would","is","is","is","is"],"The identity":["test"],"The idiomatic":["use","way"],"The implementation":["of","of","of","got","of","you've","looks","voluntarily","seemed","of","of","of"],"The import":["of","of"],"The impression":["I"],"The indent":["should"],"The indentation":["is","here","for"],"The info":["about"],"The inner":["`isAnagram`"],"The input":["of","and","handling"],"The intent":["of","of","of"],"The isQuestion":["and"],"The issue":["is","here"],"The key":["to","point"],"The lambda":["syntax","expression","in","lift"],"The latest":["Haskell"],"The latter":["implementation","forms","is"],"The letters":["and"],"The links":["are"],"The list":["comprehension","comprehension","is"],"The logic":["here","of"],"The main":["logic","problem"],"The majority":["of"],"The map":["approach","on"],"The math":["looks"],"The meat":["of"],"The message":["(`\"Madness,"],"The misspelling":["has"],"The module":["should","should","should","should","should","should","definition","should","should"],"The more":["common","subtle","commonly"],"The most":["questionable"],"The multi-pass":["ad-hoc"],"The mutable":["things"],"The naive":["way"],"The name":["`dnaFilter`","choice","`upperCase`","choice","`mapFunc`","`go`","`insertCount`"],"The names":["were","`whereAt`"],"The nested":["functions","conditionals"],"The next":["part","iteration","problem"],"The non-recursive":["function"],"The normalized":["ciphertext"],"The null":["checks"],"The obvious":["way"],"The one":["big","thing","thing","improvement","simplification","simplification","thing","thing"],"The only":["algorithmic","other","thing","thing","thing","thing","nit","nit","thing","thing","note","changes","way","thing","parentheses","other","change","other","way","nit","thing","thing","nit","other","thing","real","obstacle","way","nit,","parentheses","thing","way","meaningful","thing","thing","thing","popular/modern","thing","reason","terms","suggestion","difference"],"The operation":["is"],"The optimization":["of"],"The order":["of"],"The ordering":["of","of"],"The other":["two","trick","way","consideration","thing","thing","thing","improvement","problem","issue","small","thing","way","thing","suggestion","rule","thing","thing","trick","exercise","note","thing","thing","trick","one","option"],"The over":["point"],"The packing":["just"],"The parantheses":["were"],"The parens":["around","around","around","around","in","on","around","around","around"],"The parentheses":["in","on","around","around","around","around","around","around","in","around","around","around","around","around","around","in","around","on","don't","aren't","in","in","around","around","around","on","on"],"The parser":["here"],"The pattern":["matching","`.).)"],"The penny":["has"],"The point":["of","of"],"The pointer":["to"],"The pointfree":["combinator"],"The potential":["problem"],"The previous":["submission"],"The problem":["with","I","with","is","description","there","specifies","is","with","was","that","may","that","is"],"The problems":["that"],"The profiler":["should"],"The purpose":["of"],"The question":["is"],"The random":["number"],"The readme":["for","files"],"The real":["reason","issue","issue"],"The reason":["why","why","why","why","why","for","they","is","is","why","the","is","for","is","for","for","you","for","that","for","for","to","mutability","why","for","why","is,"],"The recursion":["and","doesn't"],"The recursive":["function"],"The representation":["is"],"The rest":["of","looks","of"],"The result":["is","should","will","is","of"],"The return":["type"],"The right":["way","way","way","way","way","way","fold","fold"],"The rule":["often","to"],"The rules":["for","for","of","are"],"The running":["time"],"The same":["technique","applies"],"The second":["solution","part","part","guard","one","alternative","one,","is","issue"],"The set":["version"],"The short":["story"],"The shorter":["way"],"The show":["constraint"],"The signature":["of","for","for"],"The simple":["rule"],"The simpler":["way"],"The simplest":["solution","way"],"The single":["change"],"The smallest":["square"],"The solution":["is","is","with","of","to","here","looks","will","here","here","may","is","to"],"The spacing":["of","here","for"],"The spec":["is","for"],"The spine":["is"],"The standard":["Haskell"],"The style":["guide","guide"],"The suggestions":["below"],"The syntax":["is"],"The target":["string"],"The test":["that","cases","is"],"The tests":["don't","don't","don't","all","for"],"The thing":["is,"],"The things":["I","you"],"The threading":["of"],"The three":["tests"],"The tip":["about"],"The top":["level"],"The top-level":["bindings"],"The topic":["of"],"The total":["can"],"The traditional":["solution"],"The transcribe":["function"],"The trick":["is","to","to","is","to","to","there"],"The tricky":["part"],"The tuples":["are"],"The two":["tricks","school"],"The type":["spec","signature","signature","signature","signature","annotations","signature","for","of","signature","a"],"The typeclass":["was"],"The typical":["implementation"],"The upside":["is"],"The usage":["of","of"],"The use":["of","of","of","appropriately","of","of","of","of","or","of","of","of"],"The validation":["test"],"The value":["contained"],"The value-laziness":["of"],"The variable":["naming"],"The version":["of","in","in"],"The way":["the","a","the","this","that","you","you're","I","around","to","the","to","it's","to"],"The whole":["monoid"],"The wiki":["pages"],"Theese variants":["are"],"Then I":["looked","switched","started"],"Then again,":["maybe"],"Then fortunately":["I"],"Then in":["linear"],"Then just":["call"],"Then one":["of"],"Then only":["in"],"Then sort":["it,"],"Then the":["user","inner"],"Then use":["V.map"],"Then w'":["will"],"Then you":["can","won't","don't","can","wouldn't","can"],"Then you'd":["simply"],"Then, `hammingDistance":["="],"Then, a":["function"],"Then, because":["`&amp;&amp;`"],"Then, line":["16"],"Then, your":["function"],"There already":["exists"],"There are":["other","a","only","a","some","a","a","built-in","2","`Map.insertWith`","plenty","other","even","more","still","also","faster","two","subtle","a","a","lecture","ways","a","however,","almost","pragmas","(IMO)","some","simpler","much","also","some","space","several","some","instances","a","redundant","some","some","typos","two","2","a","2","a","some","less","two","repeated","some","some","some","some"],"There doesn't":["really"],"There is":["a","no","a","a","a","a","an","a","a","also","a","also","also","a","slight","no","no","also","`[n,","an","no","a","still","a","little","also","some","no","a","no","a","a","absolutely","a","actually","another","some","no","an","still","no","a.nice","a","no","a","little","much","not","no","one","never","a"],"There isn't":["really","even"],"There may":["be"],"There might":["be"],"There niciest":["one"],"There seems":["to"],"There should":["be","be","be"],"There shouldn't":["be"],"There was":["something"],"There were":["two","no","some"],"There would":["be"],"There you've":["got"],"There'd be":["some"],"There's a":["function","comment","slightly","somewhat","problem","few","better","dependency","function","lot","few","function","nice","better","Functor","`wordsBy`","better","bit","chance","shorter","race","slightly","function","more","nice","great","much","much","simpler","closed","bit","closed","function","link","trap","way","better","technique","more","very","`divMod`","deprecated"],"There's also":["`Data.Map.empty`","of","the","a","a","an","a","the","a"],"There's an":["operator","alternative"],"There's another":["clever","way","function"],"There's definitely":["a"],"There's functionality":["in"],"There's much":["more"],"There's no":["faster","real","need","spec","need","reason","good","real","need","need","need","situation","real","great","need"],"There's not":["a","much","much","a","enough"],"There's nothing":["wrong","wrong","at","wrong","wrong","wrong","in","wrong"],"There's one":["important"],"There's short-hand":["for"],"There's still":["no","the"],"Therefore if":["you"],"Therefore it'd":["be"],"Therefore, the":["`scoreWord`"],"These are":["enough","just","completely","very","not"],"These exercises":["are","are"],"These look":["great."],"These modules":["use"],"These predicates":["might"],"They *are*":["the"],"They appear":["here"],"They are":["normally","equivalent,"],"They can":["both","help"],"They do":["end","not.","exactly"],"They don't":["need"],"They end":["up"],"They follow":["the"],"They go":["in."],"They help":["protect"],"They make":["the"],"They mean":["the","the"],"They'll simply":["your"],"They're not":["that","intended"],"Thing to":["do"],"Things will":["look"],"Think I'm":["starting"],"Think about":["the","how","what","how","this","how","some"],"Think of":["the","it"],"Third option":["is"],"Third, Fourth":["are"],"This \"isQuestion":["\"\""],"This StackOverflow":["question"],"This algorithm":["goes"],"This all":["looks"],"This allows":["me","right"],"This alone":["would"],"This also":["has","compares"],"This approach":["will"],"This binding":["for","for","for","for","for","for"],"This can":["also","be","be","be","be","also","be","lead"],"This case":["has"],"This chapter":["of","of"],"This code":["is","mostly","has","passes"],"This comes":["from"],"This contains":["redundant"],"This could":["probably","be","get","have","be","also"],"This does":["not","the"],"This doesn't":["compile","pass","really","need","terminate","guarantee","really"],"This exercise":["is","has","is","has","has","seems"],"This feels":["like","better","a"],"This fixes":["the"],"This gets":["the"],"This handles":["the"],"This happens":["with"],"This imho":["renders"],"This implementation":["isn't","of"],"This import":["style"],"This includes":["chars,","`romanNumbersBase`"],"This indeed":["seems"],"This is":["my","quite","pretty","the","better","good","not","exactly","probably","a","fine,","basically","much","not","certainly","a","a","the","a","what","usually","probably","something","already","interesting,","a","a","my","a","not","nicer","a","how","horribly","just","refactored","good","literally","outside","actually","much","not","basically","probably","very","nearly","a","almost","kind","tiny,","the","easily","the","better","the","an","non-portable","pretty","very","wrong","an","great.","a","a","probably","certainly","a","the","the","a","really","a","just","exactly","my","perfect","totally","pretty","shorter,","what","fine","what","obviously","my","the","an","equivalent:","actually","way","certainly","not","a","a","plain","fine,","a","a","not","also","purely","also","the","a","my","a","a","precisely","a","a","ok","a","one","great,","basically","ok","a","missing","obviously","exactly","perfect","because","great,","now","great,","what","great,","a","not","doable","almost","extremely","OK,","exactly","possible","totally","kind","definitely","a","a","`O(n","readable","a"],"This isn't":["in","ideal","really","required","Erlang"],"This issue":["is"],"This iteration":["was","is"],"This just":["doesn't"],"This kind":["of","of"],"This leads":["to"],"This led":["me"],"This lets":["you","you"],"This looks":["great,","mostly","nice,","great","fine.","fine","good","fine","good","pretty","fine","pretty","good,","great,","great,","good","good,","good,","like","like","good,","good,","great,","like","good,","good!","nice","good,","awesome!","clean","kinda","great!","great,","good,","fine","good!","good","a","great,","good","like","great,"],"This made":["the"],"This makes":["it","the"],"This may":["help"],"This means":["your","having","that","that"],"This might":["be","be","be","be","be","be"],"This needs":["type"],"This often":["occurs"],"This one":["definitely","was","is","is","is","is","is","is"],"This particular":["pragma","transform","transformation,"],"This probably":["isn't"],"This problem":["is","is"],"This raises":["(for"],"This reads":["much"],"This rejects":["a"],"This same":["pattern","pattern"],"This section":["of","of","of","of","of","of"],"This seemed":["too"],"This seems":["to","almost","more","to"],"This should":["be","be","simplify","make","use"],"This solution":["is","is","is","would","is","has","is"],"This sort":["of"],"This specific":["transformation","transformation"],"This still":["fails","isn't","has","invokes"],"This style":["is"],"This tail":["recursion"],"This takes":["up","two","up","O(n)"],"This tends":["to"],"This told":["me"],"This transformation":["simply"],"This trick":["allowes"],"This version":["is","looks","is","removed","doesn't","is"],"This was":["commented","a","pretty","a","vastly","partly","more","made","a"],"This way":["you","if","you","you"],"This wiki":["entry"],"This will":["execute","make","also","work","be","save","leave","traverse"],"This works":["well","of","fine"],"This works,":["but","but","but"],"This would":["get","let","end","further","eliminate"],"This wouldn't":["necessarily"],"This year":["should"],"Those are":["for"],"Those changes":["make"],"Those functions":["for"],"Though (reading":["down"],"Though I":["like","know"],"Though it":["looks","looks"],"Though some":["have"],"Though then":["again,"],"Threw in":["some"],"Threw out":["Data.Text,"],"Thus L12":["is"],"Thus example":["assumes"],"Thus far,":["the"],"Thus, if":["f"],"Thus, you":["don't"],"Time to":["use"],"Tip: when":["is"],"To Nitpick\"":["guide."],"To achieve":["point-free"],"To add":["it"],"To avoid":["the","hard-coding","++"],"To be":["fair,","clear","honest,"],"To build":["the"],"To check":["if"],"To compose":["two"],"To elaborate":["on"],"To fix":["the"],"To fully":["evaluate"],"To get":["the","rid","the"],"To go":["a"],"To guarantee":["that"],"To help":["you"],"To implement":["this"],"To import":["instances"],"To keep":["with"],"To kill":["two"],"To make":["this","`generateRandom`"],"To me":["that","that"],"To me,":["matching","the","this","the"],"To most":["people"],"To my":["haskell-untrained"],"To quote":["jwz:","someone...","Adam","someone..."],"To remove":["`g`"],"To reuse":["the"],"To run":["STM"],"To simplify":["the"],"To test":["my"],"Too complex,":["and"],"Too much":["(repetitive)","hardcoding,"],"Took me":["a","a","a"],"Top-level binding":["with","with","with","with"],"Top-level bindings":["should","(`anagramsFor`"],"Totally unimportant":["style"],"Totally valid":["to"],"Totally worth":["getting"],"Touché! I":["didn't"],"Transactional Memory":["(the"],"Transcription implies":["what"],"Transformed to":["pointfree"],"Translate can":["be"],"Traversable works":["from"],"Tree a":["="],"Tree, so":["has"],"Trick here":["is"],"Tried `intercalate`":["to"],"Tried a":["couple"],"Tried to":["do"],"Tried with":["`unfoldr`."],"Tried: 11":["Errors:"],"Tried: 12":["Errors:"],"Tried: 15":["Errors:","Errors:","Errors:"],"True &gt;&gt;=":["return"],"True =":["1","1"],"True ==":["1`,"],"True Bool":["constructors"],"True and":["0"],"True else":["False`.","False"],"True for":["literally","characters","empty","any","prime,"],"True into":["1"],"True is":["1."],"True so":["the"],"True type-safety":["(only"],"True) $":["zipWith"],"True) =":["filter"],"True)` is":["equivalent"],"True, and":["also"],"True, but":["I","for"],"True, though":["you"],"True. But":["you"],"True. It's":["not"],"True` and":["it","`False"],"True` for":["any"],"True` is":["the"],"True` so":["the"],"True` when":["`foo"],"True` would":["be"],"True`, in":["fact"],"True`, so":["null"],"True`, which":["seems"],"True`. If":["you"],"True``` and":["`foldr"],"True``` is":["the"],"Trues from":["that?"],"Trues to":["1"],"Try `[x,":["x-1"],"Try `fromListWith`":["function."],"Try aligning":["all","your"],"Try and":["solve"],"Try changing":["the"],"Try compiling":["with"],"Try deriving":["Enum"],"Try feeding":["an"],"Try generalizing":["`isAnagram`'s"],"Try implementing":["this","`isSilence`","`nucleotideCounts`"],"Try looking":["at"],"Try not":["to"],"Try pasting":["this"],"Try refactoring":["to"],"Try solving":["this"],"Try to":["write","eliminate","make","write","name","take","convert"],"Try using":["`fromListWith`","`Map.fromListWith`","`any`","just","`Map.fromListWith`","`sort`","the","`Map.fromListWith`","`[i,","`fromListWith`","`any`","`testBit`","other","IORef,","`findWithDefault`","`not","```rem```","`case`"],"Try zipping":["it"],"Trying again":["without"],"Trying an":["EDSL-style"],"Trying to":["up","demonstrate"],"Trying with":["all"],"Tuesday is":["going"],"Tuesday this":["will"],"TupleExtensions is":["benign"],"TupleSections #-}`":["(or","at","and","at","extension"],"TupleSections #-}`.":["Looks","I","Or,"],"TupleSections -":["looks"],"TupleSections LANGUAGE":["pragma","pragma","pragma"],"TupleSections and":["use"],"TupleSections extension,":["which"],"TupleSections feature":["to"],"TupleSections is":["quite","one","enabled"],"TupleSections language":["pragma","pragma","pragma","extension?","extension"],"TupleSections or":["`\\x"],"TupleSections pragma":["and","could","with"],"TupleSections syntax":["extension"],"TupleSections, BangPatterns,":["OverloadedStrings,"],"TupleSections, nice":["work"],"TupleSections. Very":["useful."],"Turns out":["the","Data.List.Split"],"Tweaked isShouting":["per"],"Twey @":["[#haskell](irc://irc.freenode.net/haskell)"],"Twisol and":["I"],"Twisol for":["feedback,"],"Twisol here.":["Your"],"Twisol's advice,":["I"],"Twisol, that":["is"],"Twisol, the":["(a"],"Twitter so":["I'll"],"Two (or":["more?)"],"Two alternative":["phrasings"],"Two brute-force":["implementations."],"Two possible":["fixes"],"Two small":["nits","nits:"],"Two things":["to"],"Type -\u003e":["Char"],"Type =":["Type"],"Type signatures":["for","are","would"],"Type {":["unType"],"TypeConstructor it":["should"],"TypeName TypeParameters":["="],"TypeParameters =":["TypeConstructor"],"Typical Haskell":["style","code"],"Typical usage":["is"],"Typically, `where`":["should"],"U deriving":["(Show,"],"U is":["indeed"],"U mean":["are"],"U\" solution":["because"],"U's. Anyway":["I"],"U. Your":["declarations"],"UI and":["parse","parse"],"UNPACK #-}":["!Size"],"US version":["of"],"U` and":["ensure"],"Ubuntu 13.04":["desktop"],"Ugh, fixed,":["thank"],"Ugh... I":["am","keep"],"Ugh... this":["was"],"Ugly as":["hell."],"Ugly, I":["know."],"Uhm, isn't":["that"],"Uhm, no,":["ignore"],"Unboxed here,":["as"],"Uncommon solution":["but"],"Under cover":["it"],"Understandability, for":["example,"],"Unfortunately I":["don't"],"Unfortunately ghc":["does"],"Unfortunately the":["tests"],"Unfortunately using":["`count`"],"Unfortunately, I":["can't"],"Unfortunately, even":["with"],"Unfortunately, to":["accomplish"],"Unicode numeric":["characters,"],"Uniform is":["supposed"],"Unimportant minor":["nitpick:"],"Unless I'm":["mistaken,","misunderstanding"],"Unless someone":["out"],"Unless the":["problem"],"Unless there's":["a","something"],"Unless, of":["course,"],"Unlikely to":["make"],"Unlock, thanks":["@estefania"],"Unsubmit doesn't":["seem"],"Unsubmit's still":["not"],"Unsure of":["the"],"Until you've":["done"],"Up to":["(but","(but","this"],"Updated for":["style."],"Updated my":["code"],"Updated to":["use"],"Updating the":["value"],"Upper, Lower,":["Space,"],"Uppercased(That is":["allCpas!)"],"Uracil is":["not"],"Usage of":["Set"],"Use `isSpace`":["instead"],"Use `null`":["function"],"Use explicit":["exports"],"Used Enum":["and"],"Used strict":["fold"],"Useful stuff,":["thanks."],"Uses an":["incremental"],"Using Arrow":["might"],"Using Data.Array":["would"],"Using Data.IntMap":["as"],"Using Data.Map.Strict":["you"],"Using Enum":["has"],"Using Monoid's":["`mappend`"],"Using `!!`":["isn't"],"Using `(/=)`":["as"],"Using `Control.Arrow.first`":["for"],"Using `Data.Map.fromListWith`":["instead"],"Using `Data.Map`":["instead"],"Using `Text`":["instead"],"Using `acc":["++`"],"Using `all`":["instead"],"Using `concatMap`":["with"],"Using `count`":["in","in"],"Using `elem`":["isn't","to"],"Using `foldl'`":["is","should"],"Using `foldl`":["is"],"Using `foldr`":["is"],"Using `fromListWith`":["is"],"Using `grade`":["in"],"Using `isLower`":["cleaned"],"Using `map`":["instead"],"Using `maybe`":["here"],"Using `permutations`":["is"],"Using `sequence`":["here"],"Using `show":["nucleo`"],"Using `unfoldr`":["with"],"Using `where`":["instead"],"Using `wordsBy`":["would"],"Using a":["fold","list","where","type","little","right","tuple","`case`","strict"],"Using all":["wouldn't"],"Using an":["operator","operator","operator"],"Using combinators":["like"],"Using datatypes":["to"],"Using error":["instead"],"Using explicit":["recursion"],"Using findWithDefault":["per"],"Using functionality":["from"],"Using guards":["in","per","to"],"Using isSuffixOf":["avoids"],"Using lazy":["version"],"Using map":["instead"],"Using on":["of"],"Using only":["Data.Char,"],"Using parentheses":["to"],"Using separate":["variables"],"Using that":["reduced"],"Using that,":["you"],"Using the":["ViewPatterns","enum","`Data.IORef`","`^`","more"],"Using unlines":["which","and"],"Usually Haskell":["code"],"Usually I":["see"],"Usually `[Char]`":["is"],"Usually `[x]":["++"],"Usually `let`":["is"],"Usually `map`":["is"],"Usually `sing`":["is"],"Usually a":["list"],"Usually all":["top","top"],"Usually explicit":["export"],"Usually if":["you","you're"],"Usually people":["put"],"Usually the":["State"],"Usually there's":["not"],"Usually top-level":["bindings"],"Usually when":["a"],"Usually you":["want"],"V :":["s`"],"V.!)`? Could":["you"],"V.backpermute might":["help"],"V.head zs":["`V.cons`"],"V.slice is":["O(1))."],"V.tail zs)\u003c/pre\u003ewhich":["makes"],"VERY HARD":["to"],"VERY useful":["information,"],"Value)]` (since":["the"],"Value-strict is":["the"],"Value` if":["you"],"Value` that":["you'll"],"Variables and":["functions"],"Vector (Vector":["a)"],"Vector a,":["not"],"Vector creation":["in"],"Vector for":["this"],"Vector instead":["of"],"Vector of":["size"],"Venus -&gt;":["etc"],"Venus =":["0.61519726"],"Very cool.":["The"],"Very good":["point","looking","idea","point."],"Very good!":["Additionally,"],"Very interesting":["article."],"Very interesting!":["I'll"],"Very minor:":["consider"],"Very much":["a"],"Very nice":[":)","helpful","suggestions,"],"Very nice.":["Thank"],"Very simple.":["To"],"Very useful":["to"],"Very useful.":["Thanks"],"Very well.":["I"],"ViewPatterns and":["defining"],"ViewPatterns extension":["avoids"],"Vim is":["killing"],"Vim or":["SublimeText"],"Violets` be":["explicit"],"WAY more":["space"],"WERE YOU":["THINKING?\""],"WHNF (perhaps":["even"],"WHNF I":["have"],"WHNF all":["the"],"WHNF for":["a"],"WHNF form":["(evaluated"],"WHNF in":["each"],"WHNF is":["either"],"WHNF means,":["check"],"WHNF of":["this"],"WHNF still":["allows"],"WHNF which":["in"],"WHNF with":["`seq"],"WHNF, so":["you"],"WHNF, that":["is,"],"WHNF, then":["`foldl'`"],"WHNF, which":["gets"],"WHNF. For":["more"],"WHat else":["would"],"Waiting for":["the"],"War\" ,":["who"],"Warning: Defined":["but"],"Warning: Redundant":["bracket"],"Warning: Use":["infix"],"Was it":["something","for"],"Was pretty":["nice"],"Was there":["any"],"Way\" or":["not."],"Way\" to":["annotate"],"We can":["define","already"],"We need":["to"],"We should":["really"],"We'll handle":["that"],"Weak-Head Normal":["Form;"],"Wednesday I":["know"],"Wednesday and":["`w`."],"Wednesday this":["value"],"WeekDate to":["simplify"],"Weekday derive":["from"],"Weekday of":["that","the"],"Weekday type":["isn't"],"Weekday, probably":["because"],"Weird api":["choice"],"Weird. I":["actually"],"Well I":["don't","don't"],"Well another":["way"],"Well as":["I"],"Well if":["you","you"],"Well in":["the"],"Well it's":["hard"],"Well spotted,":["thanks","thanks!"],"Well that's":["the","where"],"Well the":["first"],"Well there":["are","are"],"Well this":["wouldn't","is"],"Well written,":["though"],"Well you":["can"],"Well, 'T'":["and"],"Well, I":["was","did","won't","have"],"Well, I'm":["ready"],"Well, if":["you"],"Well, in":["this"],"Well, it":["is","works,","depends"],"Well, it's":["a","often"],"Well, now":["I"],"Well, shoot.":["This"],"Well, thank":["you."],"Well, that":["would"],"Well, that...":["certainly"],"Well, the":["way","built-in","links","warnings"],"Well, there's":["Data.List.Split's"],"Well, we":["are"],"Well, yes...":["I"],"Well, you":["can"],"Well, you're":["right"],"Well, you've":["figured"],"Well, your":["`weekDayDiff`"],"Well... I":["didn't"],"Went for":["the"],"Were this":["a"],"Were you":["using","able"],"West =":["first"],"What I":["liked:","meant","ran","still","usually"],"What I'm":["seeing","understanding","stuck"],"What `floor":["$"],"What `fmap":["(amt"],"What about":["using","with","having","the","additional","the"],"What alternative":["would"],"What am":["I"],"What are":["your"],"What atomic":["write"],"What bugs":["me"],"What do":["you","you","you","ya'll","you","we","you","you","you","you","you","you"],"What does":["`all","your","toUpper","the"],"What don't":["you"],"What exactly":["is"],"What happens":["if"],"What he":["means"],"What if":["you","you"],"What if,":["for"],"What is":["your","the","going","the","the","5","3?","the","the","2"],"What purpose":["does","does"],"What was":["supposed"],"What would":["you","have","you"],"What you":["want"],"What'll be":["the"],"What's the":["benefit","`where`","rationale","difference","alternative","rationale"],"Whatever I":["change"],"When I":["was","take"],"When I'm":["using"],"When `anagramOf":["s`"],"When `fromListWith`":["combines"],"When a":["function"],"When it":["makes"],"When l":["or"],"When matching":["all"],"When presented":["with"],"When robots":["come"],"When scanning":["a"],"When the":["map","map","map","map","map","Map"],"When this":["was"],"When using":["OverloadedStrings"],"When you":["`import","run","gaze","eventually","have","have","wrote","have","ran"],"When you're":["reading"],"Where I":["am"],"Where can":["I"],"Where clauses":["look"],"Where does":["the"],"Where is":["quote"],"Where seems":["nice,"],"Where should":["I"],"Where](http://www.haskell.org/haskellwiki/Let_vs._Where) after":["you"],"Whereas placing":["the"],"Whether or":["not","not"],"Which are":["checking"],"Which is":["better?","why","the"],"Which library":["do"],"Which list":["do"],"Which means":["we"],"Which one?":["I"],"Which seems":["like"],"Which you":["might"],"While @susana's":["solution"],"While I":["like","liked"],"While almost":["all"],"While i":["am"],"While it's":["true"],"While looking":["around"],"While not":["the"],"While the":["remove*"],"While this":["is","does","solution","is"],"While working":["on"],"While you":["could"],"Whis this":["code,"],"Whoops -":["forgot"],"Whoops, Data.Char":["is"],"Whoops, just":["forgot"],"Whoops, need":["to"],"Whoops, when":["I"],"Whoops. Suddenly":["S"],"Whoops. This":["is"],"Whoops; you're":["right."],"Why `pred":["$"],"Why are":["you","you","you","you","you"],"Why bother":["with"],"Why build":["a"],"Why can't":["you"],"Why check":["`leap"],"Why did":["you","you","you"],"Why do":["we","you","we","you"],"Why does":["applying","`sameSorting`","`!(Int,"],"Why have":["you"],"Why is":["strict","the","Data.Map.Strict","it","it"],"Why isn't":["it"],"Why not":["just","practice","use","use","`isYelling`","`total","stick","use","just","use","give","use","use","derive","use","use","build","foldl`?","use"],"Why not,":["indeed!"],"Why should":["it"],"Why the":["function","`curry"],"Why would":["it","you"],"Why you":["are","are"],"Wiki](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl') for":["more"],"Will add":["in."],"Will change":["`isNumber`"],"Will do":["all"],"Will do,":["thanks!"],"Will fix":["in"],"Will have":["a","a","a","a"],"Will install":["HLint"],"Will it":["be","definitely","be"],"Will look":["into","nicer:)","better"],"Will make":["the"],"Will read":["that"],"Will refactor.":["Also"],"Will rework.":["Thanks!"],"Will roll":["update"],"Will try":["to"],"Will work.":["You"],"Will you":["try?"],"Windows either.":["I've"],"Wish that":["there"],"With Linux":["it"],"With `String":["-&gt;"],"With `fromListWith`":["or"],"With `insert`:":["![equation](http://latex.codecogs.com/gif.latex?%5CSigma_{k=1}^n{O(log%5C,k)})"],"With `show`":["it's"],"With `union`:":["![equation](http://latex.codecogs.com/gif.latex?O(n%5C:log%5C,n)+O(n)"],"With a":["mostly","destructor","programming","fixed","closed","newtype"],"With an":["implementation","extra"],"With current":["definition"],"With good":["variable"],"With nearly":["all"],"With optimization":["GHC"],"With optimizations":["off,"],"With records":["you"],"With regard":["to","to","to","to","to","to","to"],"With respect":["to"],"With some":["maths."],"With that":["in"],"With the":["`TupleSections`","usage","above","functions","right","right","right"],"With this":["iteration,","definition","API,"],"With three":["guards"],"With your":["help"],"With {-#":["LANGUAGE"],"Within my":["own"],"Without a":["doubt,"],"Without the":["use","empty"],"Without wanting":["to"],"Woah, chill":["out!"],"Wonder if":["there's","there's"],"Wondering if":["the"],"Woops, I":["forgot"],"Woot! After":["an"],"WordCount $":["M.singleton","M.singleton"],"WordCount (":["WordCount.hs,","...","Bob.hs,","wordCount"],"WordCount (wordCount)":["where","where`."],"WordCount (wordCount)`,":["`import"],"WordCount M.empty":["--"],"WordCount.hs, interpreted":[")"],"Words by":["may"],"World Haskell_":["first."],"Worse is":["`x"],"Worse yet,":["you"],"Worst case,":["if"],"Would I":["confuse"],"Would `Char":["-\u003e"],"Would be":["a","equal"],"Would it":["make","not","be","be","be","be","be","be"],"Would love":["to"],"Would save":["you"],"Would that":["not","still"],"Would the":["performance"],"Would this":["evaluate"],"Would you":["prefer","mind"],"Wouldn't it":["be","be"],"Wouldn't this":["return"],"Wouldn't you":["want"],"Wow -":["thanks,"],"Wow thanks":["for"],"Wow! thanks":["a"],"Wow, @hal,":["thanks"],"Wow, I":["did","didn't","like","would've","was"],"Wow, it's":["getting"],"Wow, sorry;":["not"],"Wow, thanks":["a"],"Wow, thanks,":["that's"],"Wow, that":["LambdaCase","exists;"],"Wow, this":["is"],"Wow, you're":["becoming"],"Wow... this":["is"],"Wowwww I":["had"],"Write a":["class"],"Writer monad":["...","idea,","to"],"Writing it":["tail-recursive"],"Writing the":["word"],"X, C,":["D"],"YELL. Maybe":["that"],"YOU THINKING?\"":["should"],"Yachoo! we":["got"],"Yay for":["lazy!"],"Yea, that":["had"],"Yeah I":["meant","submitted","see","was","had","find"],"Yeah I'm":["not","trying"],"Yeah `choice`":["works"],"Yeah good":["point."],"Yeah it":["didn't"],"Yeah it's":["much","working"],"Yeah moving":["`normalize`"],"Yeah that":["looked"],"Yeah this":["code"],"Yeah! I":["don't"],"Yeah, @stephon":["is"],"Yeah, I":["saw","couldn't","figured","was","saw","just","don't","knew","started","thought","agree.","had","agree.","wouldn't","was","felt","realise","find","realized","was","intentionally","usually","usually","understand","probably","don't"],"Yeah, I'm":["not"],"Yeah, but":["this"],"Yeah, it":["seems","does","does"],"Yeah, it's":["more","more","definitely","the"],"Yeah, list":["comprehentions"],"Yeah, maybe":["something"],"Yeah, my":["first"],"Yeah, thanks,":["that"],"Yeah, that's":["definitely","what"],"Yeah, the":["API","asymptotic","reason","type","tests"],"Yeah, these":["are"],"Yeah, this":["one"],"Yeah. My":["implementation"],"Yeah. That":["way"],"Yelling clause":["is"],"Yelling could":["also"],"Yelling |":["...`."],"Yep I":["know","agree,","misunderstood,"],"Yep `Enum`":["is"],"Yep in":["Russian"],"Yep that's":["much"],"Yep, I":["feel","wasn't"],"Yep, good":["idea."],"Yep, it's":["very"],"Yep, looks":["better."],"Yep, much":["cleaner"],"Yep, now":["I"],"Yep, that'd":["do"],"Yep, that's":["better"],"Yep, the":["benefit"],"Yep, there":["are"],"Yep, you're":["absolutely"],"Yep. Missed":["it."],"Yep. So":["you're"],"Yes I":["should"],"Yes and":["no."],"Yes i":["mean","considered"],"Yes it":["is,."],"Yes this":["overrides"],"Yes try":["is"],"Yes you":["need"],"Yes your":["invalid"],"Yes! I":["just"],"Yes! That":["will"],"Yes, I":["meant","had","think","know,","think","think","was","get","know","considered","like","have","can","see"],"Yes, `a`":["is"],"Yes, `isShout`":["can"],"Yes, although":["I"],"Yes, and":["that's","no"],"Yes, as":["non"],"Yes, but":["Int","why"],"Yes, doing":["this"],"Yes, even":["concatMap"],"Yes, good":["suggestion."],"Yes, intermediate,":["unevaluated,"],"Yes, it's":["a"],"Yes, of":["course"],"Yes, or":["from","you"],"Yes, thanks":["for"],"Yes, that":["helped.","is","looks","is"],"Yes, that's":["right,"],"Yes, the":["infix","`resetName`"],"Yes, there's":["a"],"Yes, this":["way","is"],"Yes, write":["an"],"Yes, you":["can","should","might","need","can","can."],"Yes. What":["`floor"],"Yes; it's":["definitely"],"Yet one":["more"],"Yet, I":["don't"],"You A":["Haskell...)"],"You a":["Haskell","Haskell](http://learnyouahaskell.com/)_?","Haskell_."],"You actually":["don't","don't","shouldn't"],"You already":["realize","have","know","know","convinced"],"You also":["aren't","shouldn't","don't","wouldn't","shouldn't","have"],"You are":["absolutely","right,","re-inventing","using","technically","calling","better","correct","on","the","using","right,","right","right"],"You aren't":["using"],"You can":["also","write","even","cancel","make","build","use","import","clarify","use","replace","find","use","remove","test","simplify","shorten","use","shorten","also","use","do","also","make","use","avoid","kind","get","get","use","replace","do","fix","clear","avoid","also","replace","also","simplify","stop","usually","compose","also","make","make","also","do","use","have","just","be","multiply","do","shorten","write","simplify","use","also","see","define","simplify","still","of","write","have","make","bring","do","see","avoid","use","derive","remove","rewrite","also","look","do","drop","simplify","also","write","even","implement","write","do","generate","use","do","see","also","solve","get","import","write","look","see","also","eta-reduce","do","still","make","write","fuse","eta","clean","use","write","use","get","imagine","make","get","easily","also","do","do","write","use","move","do","define","use","simplify","simplify","do","use","use","ask","use","optimize","play","do","write","check","get","do","calculate","write","try","use","abstract","get","use","use`","indent","also","compile","look","think","try","use","also","write","use","do","also","rewrite","call","make","use","write","write","use","write","close","use","use","try","use","use","use","use","use","pre-sort","instantly","write","see","look","also","`import","also"],"You can't":["do"],"You can,":["but","but"],"You cannot":["do","know"],"You choose":["Strict"],"You convert":["a"],"You could":["clean","consider","use","extract","make","use","replace","save","also","compact","use","write","also","simplify","also","just","use","also","rewrite","instead","even","make","simplify","easily","foldM","use","certainly","use","import","even","define,","use","manually","use","simplify","also","combine","use","also","simplify","build","fix","move","probably","use","make","also","get","make","make","use","make","simplify","move","write","use","discover","align","use","look","make","roll","make","scope","define","probably","use","also","also","build","for","have","use","also","simplify","also","also","write","clean","also","use","also","improve","factor","also","get","get","get","have","easily","use","also","keep","do","use","also","use","eta-reduce","easily","use","simplify","replace","use","easily","do","implement","also","make","also","do","write","also","trivially","simplify","initialize","eta-reduce","also","use","write","also","also","write","use","guarantee","have","use","write","even","eta-reduce","also","factor","also","also","use","derive","do","write","also","use","use","use","allow","reasonably","use","write","then","write","make","use","use","write","try","unify","also","use","simplify","factor","remove","use","also","use"],"You could've":["made"],"You do":["not","not","not","not","not"],"You don't":["need","need","need","have","need","use","have","need","have","have","need","need","actually","need","need","have","need","need","need","need","need","need","need","need","need","need","need","need","have","need"],"You get":["points"],"You give":["feedback"],"You guys":["are"],"You have":["unused","been","2","the","to","to","fixed","mentioned","`isUpper`","coordinates","some"],"You know":["I"],"You know,":["I"],"You may":["want","consider","want","want","want","want","want","also","want","also","even","find","like","want","read","like","like","like","want","like","find","use","like","simplify","want","use","find","want","like","find","find","use","use","find","do","give","use","read","search","group","read","optimize","break","use","use","use","do","take","build","group","use","use","use","be","indent"],"You mean":["something","`isSpace`","to"],"You mentioned":["`last`"],"You might":["need","want","consider","want","also","be","want","consider","want","want","also","want","try","also","also","want","consider","consider","consider","replace","want","want","consider","not","want","want","also","want","want","want","also","want","want","use","also","find","want","be","want","find","want","want","be","be","have","want","also","want","also","want","consider","want","want","try","consider","find","want","find","be","prefer","be","have","want"],"You missed":["a"],"You need":["to","to","@justus","to","to","to"],"You nred":["to"],"You only":["have","need","need"],"You pay":["a"],"You point":["about"],"You probably":["want","noticed","shouldn't","want","want"],"You really":["need","shouldn't","want","want","want"],"You seem":["to"],"You shadow":["`name`"],"You should":["be","also","be","use","use","make","be","use","strongly","be","use","also","be","be","be","be","be","either","try","never","always","be","be","also","basically","change","really","import","be","consider","get","consider","be","try","be","almost","explicitly","explicitly","write","be","be","import","be","be","use","be","explicitly","be","avoid","be","be","be","implement","check","probably","really","explicitly","also","probably","explicitly","be","explicitly","definitely","try","explicitly","be","be","at","use","do","consider","import","be","almost","also","probably","be","be"],"You shouldn't":["need","need","be","use","need","indent","need","need","need","need"],"You start":["out"],"You still":["have"],"You suggest":["adding"],"You sure":["like"],"You then":["have"],"You use":["a"],"You used":["a"],"You want":["to","a","to"],"You will":["probably","have","want"],"You won't":["need","need","want","need"],"You would":["need","transform","need"],"You wouldn't":["want","know","be"],"You'd be":["able"],"You'd get":["a"],"You'd have":["to","an"],"You'd implement":["reverse"],"You'd need":["a","to"],"You'd then":["just"],"You'd use":["sum","a"],"You'll also":["want","want"],"You'll end":["up"],"You'll find":["that"],"You'll have":["a"],"You'll need":["one","fewer"],"You'll probably":["also","just"],"You'll still":["get"],"You'll want":["to"],"You're `illogical`":["is"],"You're absolutely":["correct,","right.","right.","right.","right–```isCapitalIfLetter```"],"You're almost":["there,"],"You're also":["shadowing"],"You're asking":["the"],"You're certainly":["right"],"You're correct":["that"],"You're done!":[":)"],"You're essentially":["zipping"],"You're exactly":["correct"],"You're going":["to"],"You're inconsistent":["in"],"You're not":["exporting","missing"],"You're only":["checking"],"You're recursing":["a"],"You're repeating":["yourself"],"You're returning":["an"],"You're right":["that","about","that","``","though,","that","that","that","that","that","that"],"You're right,":["of","I","the"],"You're right.":["I","I","I"],"You're so":["close!"],"You're somewhat":["better"],"You're using":["`isJibberish`","Int,"],"You're working":["with"],"You've got":["a"],"You, your":["response"],"Youda comes":["from"],"Youda condition":["is","in","because"],"Your 3rd":["condition,"],"Your `countWords`":["function"],"Your `do":["...`"],"Your `module":["..."],"Your `mutation`":["looks"],"Your `remove*`":["functions"],"Your `sortStudents`":["could"],"Your `wordsBy`":["function"],"Your best":["bet,"],"Your code":["would","is","looks","is"],"Your code,":["which"],"Your declarations":["for"],"Your definition":["seems"],"Your error":["message"],"Your feedback":["has","has"],"Your first":["remark"],"Your guard":["against"],"Your implementation":["of","of","of","is","with","is"],"Your list":["comprehension"],"Your module":["begins","declaration"],"Your naming":["convention"],"Your preference":["for"],"Your problem":["here"],"Your remove":["functions"],"Your solution":["is","to"],"Your suggested":["implementation"],"Your understanding":["of"],"Your use":["of"],"Yours is":["probably"],"Yup! Assigning":["it"],"Yup, this":["was","passes"],"Yup. Nice":["call."],"Z (or":["even"],"Z requires":["25"],"Z will":["likely"],"[ (\"AEIOULNRST\",":["1)"],"[ (\"bc\",":["3)"],"[ (\"foo\",":["(1","3)"],"[ ('a',":["1),"],"[ (1,":["\"aeioulnrst\"),"],"[ (1000,":["\"M\"),"],"[ String":["]"],"[ [x,":["x]"],"[ e":["|","|"],"[ x1":["=="],"[\"(\", area,":["\")"],"[\"Bob\"]``` gives":["a"],"[\"\\n\"]` is":["equivalent"],"[\"antidisestablishmentarianism\"]``` You":["might"],"[\"b\", \"b\"],":["[\"c\","],"[\"bob\"]``` be":["different"],"[\"bob\"]``` perform":["any"],"[\"bob\"]```, which":["seems"],"[\"c\", \"c\"]]```.":["Can"],"[\"derp\", \"bar\",":["\"baz\","],"[\"may be":["tricky!\",\"really","tricky!\","],"[#haskell](irc://irc.freenode.net/haskell) gave":["me"],"['A'..'Z'])``` is":["equivalent"],"['A'..'Z']` and":["`elem"],"['a' ..":["'z']`"],"['a'..'z'])``` is":["equivalent"],"['a'..'z']` as":["the"],"[(\"AEIOULNRST\", 1),":["(\"DG\",","(\"DG\",","…],","(\"DG\","],"[(\"a\", (((1)":["+"],"[(\"a\", ((1)":["+"],"[(\"a\", (1)":["+"],"[(\"foo\", 1),":["(\"bar\","],"[(\"foobar\", 1)]`.":["This"],"[('a', 1),":["('b',","('b',"],"[(+1), (-1)]`":["doesn't"],"[(+3), (*3),":["(^3)]","(^3)]"],"[(1000, \"M\"),(900,":["\"CM),"],"[(3, \"3ab\"),":["(5,"],"[(5,\"a\"), (5,\"b\"),":["(3,\"b\"),"],"[(A, 0),":["(T,"],"[(Id, String)]`).":["Any"],"[(Int, String)]":["-\u003e"],"[(String, Int)]))`":["then"],"[(a, Int)]`,":["such"],"[(c, n)":["|"],"[(c, s)":["|"],"[(char, score)":["|"],"[(isBlank, \"Fine.":["Be"],"[(k,a)] -\u003e":["Map","Map","Map.Map"],"[(l,s l)":["|","|"],"[(letter, score)":["|"],"[(s,I)| (s,ls)":["\u003c-"],"[(score, char)":["|"],"[(w, 1)]`":["will"],"[-1, 1]]`).":["Sometimes"],"[-1,1]]` because":["it"],"[-1.9,-1.1,1.1,1.9] --":["to"],"[0, 1,":["2,"],"[0..7]` instead":["of"],"[0..9])` and":["saves"],"[1 of":["1]","1]","1]","1]","1]"],"[1, 1":["..]"],"[1, 1..]...":["though"],"[1, 2]`":["without"],"[1, undefined])":["=="],"[1,1,1] =":["1×2²+1×2¹+1×2^0"],"[1,1..] can":["be"],"[1,1..] is":["pretty"],"[1,1] =":["1×2¹+1*2^0"],"[1,2,3,4,5] ]`,":["but"],"[1,2,3,4,5]` or":["`["],"[1,2,3] =":["[1]++concatMap"],"[1,2,3]` I":["used"],"[1..3]`. Is":["something"],"[1..64]`, to":["make"],"[1..]` means":["is"],"[1..dv], c":["\u003c-"],"[1..n]` is":["equivalent"],"[1] \u003c\u003e":["Just","Nothing`"],"[1] =":["1*2^0"],"[1] You":["should"],"[1] forall":["f.","f."],"[1] to":["be"],"[1]++concatMap (...)":["[2,3]"],"[2,3] =":["..."],"[2]` then":["you"],"[3, ....]":["digits"],"[3, 3,":["4]","4]"],"[3, 5":["..]`"],"[3,5..]`. The":["advantage"],"[6, 12..],":["m","k"],"[6,12..], m":["\u003c-"],"[7, 9,":["9,"],"[@gus's solution](http://exercism.io/submissions/523b025f2ef81a2977000282)":["now."],"[Arrow parser](http://www.haskell.org/haskellwiki/Arrow#Parser)":["in"],"[Avoiding Explicit":["Recursion](http://www.haskell.org/haskellwiki/Haskell_programming_tips#Avoid_explicit_recursion),"],"[Base]` type":["when"],"[C, C,":["N,"],"[Char] -&gt;":["containers-0.5.0.0:Data.Map.Base.Map"],"[Char] --":["Defined"],"[Char] -\u003e":["Bool`"],"[Char] implementation,":["so"],"[Char], but":["where"],"[Char]` or":["compatible."],"[Child] }`.":["For"],"[DNABase] -\u003e":["[RNABase]"],"[Data.List.Split] (http://hackage.haskell.org/package/split-0.1.1/docs/Data-List-Split.html)":["has"],"[Data.List](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-List.html). I":["built"],"[Data.List](www.haskell.org/ghc/docs/latest/html/libraries/base-4.6.0.1/Data-List.html). Can":["you"],"[Data.List][1]. I'd":["like"],"[Data.Map.Lazy](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html) which":["are"],"[Data.Map.Lazy](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html). All":["functions"],"[Data.Map](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html) documents":["only"],"[Data.Map](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html), there":["are"],"[Data.String](http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-String.html) but":["surely"],"[Eggs ..":["Cats]"],"[Equilateral, Isosceles,":["Scalene]"],"[Foldr Foldl":["Foldl'"],"[Guard syntax](http://en.wikibooks.org/wiki/Haskell/Control_structures#if_and_guards_revisited)":["will"],"[HLint](http://community.haskell.org/~ndm/darcs/hlint/hlint.htm) is":["useful"],"[Hackage](http://hackage.haskell.org/packages/hackage.html), and":["installable"],"[Haskell Platform](http://lambda.haskell.org/platform/doc/current/frames.html),":["so"],"[Haskell platform](http://lambda.haskell.org/platform/doc/current/frames.html)":["as"],"[Haskell](http://www.reddit.com/r/haskell/comments/nxu8d/f_g_x_y_f_g_x_y_in_haskell_prime_prelude) [boobs](http://stackoverflow.com/questions/17972422/how-does-haskells-boobs-operator-work-in-plain-non-functional-english)":["[operator](http://stackoverflow.com/questions/5821089/haskell-function-composition-operator-of-type-cd-abc-abd)!"],"[Here] (http://pastebin.com/yDQuGRmn)":["are"],"[Hoogle](http://www.haskell.org/hoogle) and":["the"],"[I did](https://github.com/kytrinyx/exercism.io/commit/2564b1549b95044b14f52c84c37f7ea3a6bda6a0),":["in"],"[Integer -\u003e":["Integer]`,"],"[Just (+1),Just":["(+2)])"],"[Let vs.":["Where](http://www.haskell.org/haskellwiki/Let_vs._Where)"],"[Let-floating](http://research.microsoft.com/pubs/67060/float.ps.gz) from":["which"],"[Maybe Nucleotide]`":["in"],"[Monad laws](http://www.haskell.org/haskellwiki/Monad_laws)":["is"],"[Nucleotide] -\u003e":["[Nucleotide]`","[Nucleotide]"],"[Point-free style](http://www.haskell.org/haskellwiki/Pointfree)":["could"],"[Prelude](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html) and":["[Data.List](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-List.html)."],"[String] -\u003e":["String`.","[String]","[String]","String","String","String?","String","[String]"],"[String] =":["[[Char]]"],"[String] Char`":["in"],"[String] [(Id,":["String)]`)."],"[String] to":["Int."],"[String] }`,":["which"],"[String]* that":["will"],"[String], so":["I"],"[String]` might":["show"],"[Student])]` (i.e.":["remove"],"[Student])]` `School`":["when"],"[This link]":["(https://github.com/tibbe/haskell-style-guide)"],"[This page]":["(http://www.haskell.org/ghc/docs/latest/html/libraries/)"],"[This page](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl%27)":["might"],"[True, False,":["False,"],"[True, False]":["and"],"[True, True,":["False]"],"[V.Vector Int])`.":["Can"],"[Vector a]":[",","}\u003c/pre\u003e"],"[[\"this one\",":["\"one\"],"],"[[\"this one\",\"one\"],":["[\"may"],"[[Ignore -":["wish"],"[[_, area_code,":["prefix,"],"[[a]]``` and":["didn't"],"[] ++":["bs"],"[] --":["Defined","Defined"],"[] -\u003e":["…`"],"[] .":["map"],"[] =":["[]","True`,","...","False`.","True`.","True`","True","[]","map","map","[]","error","False`","[]","…`","case","[]"],"[] ==":["True`,","[]","True`","empty","True`.","1`","0`."],"[] Set.toList":["."],"[] []":["="],"[] and":["_.","(x:xs),"],"[] id`":["anyway."],"[] is":["redundant"],"[] v`":["case,"],"[] would":["have"],"[]', it":["might"],"[]) .":["runIdentity"],"[])' to":["see"],"[])` or":["`M.insertWith","`add"],"[])` the":["same"],"[]\u003e =":["--"],"[]` (even":["simpler"],"[]` \u003c=\u003e":["`null"],"[]` as":["explicit"],"[]` clause":["is"],"[]` could":["be"],"[]` is":["True","true","vacuously","always","longer","True"],"[]` on":["turning"],"[]` returns":["`True`.","True"],"[]` to":["`empty`."],"[]` with":["`not"],"[]`, so":["I"],"[_ |":["(score,"],"[`IORef`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-IORef.html) or":["[`MVar`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Control-Concurrent-MVar.html)."],"[`TVar`s](http://hackage.haskell.org/package/stm-2.4.2/docs/Control-Concurrent-STM-TVar.html) for":["mutating"],"[`fromListWith`](http://hackage.haskell.org/package/containers-0.5.3.1/docs/Data-Map-Strict.html#v:fromListWith) here":["and"],"[`isAlphaNum`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Char.html#v:isAlphaNum) instead":["of"],"[`liftA2`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Control-Applicative.html#v:liftA2) to":["turn"],"[`map`'s source](http://hackage.haskell.org/package/base-4.6.0.1/docs/src/GHC-Base.html#map)":["after"],"[`null`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:null) instead":["of"],"[`pointfree`](http://hackage.haskell.org/package/pointfree) if":["you"],"[`sum` is":["defined](http://hackage.haskell.org/package/base-4.6.0.1/docs/src/Data-List.html#sum)."],"[a, a,":["n,"],"[a, b,":["c,"],"[a,b,c..]` and":["unlined"],"[a,b] =":["caps"],"[a..b]` is":["equivalent"],"[a] -&gt;":["[[a]]```","[a]","Int"],"[a] --":["Defined","Defined"],"[a] -\u003e":["[b]","[(a,","[(a,","Map","[b]`","Bool`.","([a],","[a]","[a]","Bool`","Bool`","m","[a]","[a]"],"[a]` its":["a"],"[a]` or":["at"],"[a]` that":["returns"],"[added](https://github.com/kytrinyx/exercism.io/commit/2476edf358c563f7e84a899c86011a6a71070954) only":["3"],"[anagramForS, notS]`":["can"],"[any isUpper,":["not"],"[atomic](https://en.wikipedia.org/wiki/Atomicity_(programming)) instruction":["is"],"[avoid explicit":["recursion](http://www.haskell.org/haskellwiki/Haskell_programming_tips#Avoid_explicit_recursion)."],"[b, b-a,":["a]"],"[b,b-1,..,a] function":["will"],"[b..a]` because":["the"],"[b..a]` is":["probably","not"],"[b]` in":["Prelude."],"[base](http://hackage.haskell.org/package/base-4.6.0.1/docs/Foreign-Marshal-Utils.html#v:fromBool) (Prelude,":["doc"],"[bottles n,":["\"on"],"[c, c,":["n,"],"[c] ++":["\"'\"`"],"[char, char,":["num,"],"[conditions]` and":["`and"],"[conditions]`*, but":["I'm"],"[core](http://hackage.haskell.org/package/ghc-core) using":["either"],"[criterion][1] to":["benchmark"],"[currying](http://www.haskell.org/haskellwiki/Currying) and":["[pointfree](http://www.haskell.org/haskellwiki/Pointfree)"],"[detectSilence, detectShout,":["detectQuestion]"],"[end..begin]`, try":["`[begin,begin-1..end]`"],"[end..initial]`, everything":["else"],"[etrepum](http://exercism.io/etrepum), I":["will"],"[example solution":["to"],"[existing binding":["in"],"[f n":["++"],"[f x])`":["is"],"[filter](http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.6.0.1/Prelude.html#v:filter). It":["can"],"[firstCouplet, secondCouplet]`":["and"],"[firstPart, secondPart]`":["and"],"[fmap (,'W')":["p1,"],"[foldr, foldl,":["foldl'](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl%27)"],"[from, from":["-"],"[from, from-1":[".."],"[from,from-1..to] will":["be"],"[from..to]) with":["a"],"[from..to]` is":["better"],"[fromListWith](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html#v:fromListWith). It's":["exported"],"[guarded recursion]":["(http://en.wikipedia.org/wiki/Tail_recursion#Tail_recursion_modulo_cons)"],"[guards](http://www.haskell.org/haskellwiki/Haskell_programming_tips#Guards) in":["this"],"[haskell-mode for":["Emacs](https://github.com/haskell/haskell-mode)."],"[here] (http://tutorials.jumpstartlab.com/academy/workshops/scrabble_intermediate.html).":["I'll"],"[here](http://hackage.haskell.org/package/MissingH-1.0.0/docs/Data-String-Utils.html#v%3Areplace). It":["is"],"[here](http://lpaste.net/5764321645716045824) on":["line"],"[here](http://lpaste.net/96283) on":["line"],"[here][hp]), but":["earlier"],"[hlint](http://community.haskell.org/~ndm/hlint/). It's":["often"],"[hoogle](http://www.haskell.org/hoogle/) all":["the"],"[hoogle](http://www.haskell.org/hoogle/?hoogle=Char+-%3E+Char+-%3E+String+-%3E+String) finds":["is"],"[id, double])`":["instead"],"[id, sum":["."],"[k]` generator":["is"],"[k]` to":["yield"],"[lens](http://hackage.haskell.org/package/lens-4.0.4) has":["some"],"[m a]":["-\u003e"],"[m..n]` I":["think"],"[m..n]` instead":["which"],"[m..n]` is":["bad"],"[m..n]`, while":["`[n..m]`"],"[modules](http://www.haskell.org/tutorial/modules.html), specifically":["\"Because","\"Because","\"Because"],"[multiline string":["constants](http://book.realworldhaskell.org/read/characters-strings-and-escaping-rules.html#id689881)."],"[multiset](http://hackage.haskell.org/package/multiset-0.2.2/docs/Data-MultiSet.html) there":["is"],"[my solution](http://exercism.io/submissions/522b834ec4120de916000090).":["The"],"[n +":["m"],"[n,(n-1)..m] would":["make"],"[n,n-1..m] this":["way"],"[n] .":["schoolData"],"[name] .":["unSchool"],"[operator section](http://www.haskell.org/haskellwiki/Section_of_an_infix_operator)":["of"],"[p1, p2,":["p1+p2]"],"[p1,p2,p1p2]\u003e =":["--"],"[p1p2]\u003e =":["--"],"[p1p2]\u003e) =":["--"],"[page with":["links](http://www.haskell.org/haskellwiki/Software_transactional_memory)"],"[point free":["style](http://www.haskell.org/haskellwiki/Pointfree)"],"[point-free style](http://www.haskell.org/haskellwiki/Pointfree).":["`isThymine`"],"[pointfree](http://www.haskell.org/haskellwiki/Pointfree) `normalize`":["and"],"[pointfree](http://www.haskell.org/haskellwiki/Pointfree) might":["be"],"[pointfree](http://www.haskell.org/haskellwiki/Pointfree) style":["for","functions"],"[questions] where":["it"],"[randomRIO ('A',":["'Z'),"],"[rows !!":["0,"],"[scoring rules]":["(http://www.hasbro.com/scrabble/en_US/scoringRules.cfm)"],"[searching for":["`count`"],"[splitWhen](http://hackage.haskell.org/package/split-0.1.1/docs/Data-List-Split.html#v:splitWhen) is":["what"],"[st]` into":["`M.insertWith"],"[stopAt..startFrom]` is":["probably"],"[suggested in":["the"],"[t..f]` is":["better"],"[t]` and":["`f"],"[the docs":["use](http://www.haskell.org/ghc/docs/latest/html/libraries/containers/Data-Map.html)."],"[this article":["about"],"[this article]":["(http://en.wikibooks.org/wiki/Haskell/More_on_datatypes#Named_Fields_.28Record_Syntax.29)"],"[this link]":["(http://www.haskell.org/haskellwiki/Haskell_programming_tips),"],"[this one](http://exercism.io/submissions/5217622eafd3df7a3c00024a)":["has"],"[this] (http://pastebin.com/yFULJr7S)":["(sorry"],"[this](http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html) quite":["informative."],"[this](http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html) to":["be"],"[this](http://www.haskell.org/haskellwiki/Stack_overflow) and":["I"],"[tibbe's Haskell":["style"],"[to ..":["from]`"],"[to.. from]":["is"],"[to..from]` is":["better"],"[translate](http://docs.python.org/2/library/string.html#string.translate) method,":["right?"],"[unfolded list":["with"],"[use Data.List.insert":["to"],"[uses a":["strict"],"[value-strict](http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html) so":["using"],"[video on":["GHCi](http://vimeo.com/68669612)"],"[wiki](http://www.haskell.org/haskellwiki/Prime_numbers#Sieve_of_Eratosthenes). Took":["me"],"[x, x-1":[".."],"[x, x]":["|"],"[x,x] ,":["x"],"[x] ++":["toList"],"[x]) [1,2,3]":["="],"[x], which":["is"],"[x]` I":["expected"],"[x]` is":["O(n),"],"[x| x":["\u003c-"],"[x|xs]`. That":["would"],"[y..x]` is":["better"],"[~1] forall":["f","f"],"[η-reduction](http://www.haskell.org/haskellwiki/Eta_conversion) (eta":["reduction)"],"[…]` (possibly":["using"],"[…]` and":["involves"],"\\ numeric":["value"],"\\ to":["the"],"\\ x":["-\u003e"],"\\\"one\\\" \\n\\\"may":["be","be"],"\\* *adds":["vote"],"\\*thought\\* it":["was"],"\\= False":["="],"\\Sum_{k=1}^n log(k)":["="],"\\This is":["the"],"\\\\ y)":["&&"],"\\\\ y`":["is"],"\\_ -\u003e":["[k]`","x`","\"M\"`","return"],"\\`isGramonymOf\\` b\u003c/code\u003e":["rolls"],"\\`isSuffixOf\\`)\u003c/code\u003e is":["more"],"\\`on\\` (sort":["."],"\\`on\\` canonicalize\u003c/code\u003e":["into"],"\\a -\u003e":["(Just"],"\\anagram -\u003e":["…`,"],"\\b -\u003e":["Just"],"\\b' -\u003e":["return"],"\\c -&gt;":["(not"],"\\n -\u003e":["atomically","if"],"\\n on":["sing"],"\\n' -\u003e":["return"],"\\n\\\"may be":["tricky!\\\"","tricky!\\\""],"\\o/ That's":["high"],"\\r -\u003e":["k"],"\\s2 -&gt;":["s1'"],"\\string -\u003e":["all"],"\\t\\v\\xA0\\x2002\" --":["\\xA0"],"\\word -\u003e":["\\anagram","\\anagram"],"\\x -&gt;":["(f"],"\\x -\u003e":["if","return"],"\\x2002 En":["space"],"\\xA0 No-break":["space,"],"\\xs -\u003e":["\"CM\"","'C'","'C"],"]` (perhaps":["on"],"]` is":["probably"],"]` –":["note"],"]`, but":["I"],"^ (b":["`asTypeOf`"],"^ 64":["-"],"^ 9":["/"],"^ I":["like"],"^ b":["`asTypeOf`"],"^ because":["apparently"],"^^ and":["impriving"],"^^... but":["I'm"],"_ -\u003e":["(\"000\",","\"0000000000\"","foo","bar","ma"],"_ /":["otherwise"],"_ \u003c-":["[1..dv],"],"_ =":["False","[]","all","...`","0`","error","[]","Nothing"],"_ ==":["_"],"_ []":["="],"_ _":["="],"_ x)":["="],"_ |":["n"],"_) (y,":["_)"],"_) -\u003e":["compare"],"_)` where":["you"],"_)` which":["would"],"_, w)":["="],"_,\". Given":["that,"],"_. The":["_"],"_1)`. When":["the"],"_2 %~":["sort","sort)"],"_Learn You":["a"],"_Real World":["Haskell_"],"_[Learn You":["a"],"_]` where":["`_`"],"__GLASGOW_HASKELL__ \u003e=":["700","700"],"__lot__ of":["code"],"_` is":["unevaluated."],"_` line":["is"],"_` or":["`[]`"],"_`/`Nothing` case":["analysis."],"_a_ standard":["library,"],"_all_ for":["the"],"_all_, _any_,":["..."],"_always_ forget":["which"],"_and_ the":["message"],"_any_ query":["starting"],"_any_, ...":["they"],"_could_ have":["done"],"_course_ there":["was"],"_dna has":["no"],"_etrepum_ said,":["plus"],"_expression_ that":["uses"],"_filter_, _all_,":["_any_,"],"_for all":["x..._."],"_guard_ clause\".":["You're"],"_head _tail`":["but"],"_isEmpty_ case.":["It"],"_less_ readable":["than"],"_map_, _filter_,":["_all_,"],"_really_ don't":["want"],"_should_ be":["able","free"],"_spine-strict_ data":["structure—"],"_spine-strict_, and":["so"],"_tail` but":["no"],"_there exists":["an"],"_this_ code":["(see"],"_zip_ with":["a"],"` (definition)":["param`"],"` (length":["xs"],"` [(1000,":["\"M\"),(900,"],"` especially":["that"],"` head":["digits"],"` is":["``sortBy"],"` will":["be"],"`!!` is":["usually"],"`!!` isn't":["ever"],"`!(Int, Int)`":["is","not"],"`!@#$%^?`, it":["is"],"`!@@!@#$%%^^*&&()` is":["not"],"`!@@!@#$%%^^*&&()`, what":["will"],"`!` \"fooled\"":["`hlint`"],"`!` annotations":["means"],"`!` directly":["in"],"`\"\"` in":["this"],"`\"\"` is":["also","typically"],"`\"\"` to":["`responseFor`"],"`\"\"`, returning":["False"],"`\"\"`. I've":["made"],"`\"'\" ++":["[c]"],"`\"'C'\"`, so":["you"],"`\", \",":["bots,"],"`\"0000000000\"`. I":["would"],"`\"1, 2,":["3\"`,"],"`\":( ?\"`":["to"],"`\":) ?\"`":["doesn't","test"],"`\"?\" ==":["'?'"],"`\"?\"` into":["a"],"`\"?\"` is":["the"],"`\"A\"`. A":["newtype"],"`\"Fine. Be":["that","that"],"`\"T\"` to":["`\"U\"`."],"`\"Take \"":["++"],"`\"\\n\"` noise":["in"],"`\"\\n\"` to":["every"],"`\"a,b\"` as":["one"],"`\"cd\"`. I":["believe"],"`\"invalid nucleotide\"":["++"],"`\"my number":["is"],"`\"of beer":["on"],"`\"|123| 456_7890\"`":["could"],"`### Failure":["in:"],"`$!!` (from":["`Control.DeepSeq`)"],"`$!` instead":["of"],"`$!` might":["be"],"`$!`, or":["the"],"`$` after":["`getFirst`.`"],"`$` and":["just","just","parentheses"],"`$` in":["`empty`"],"`$` is":["just","just"],"`$` on":["line"],"`$` once":["at"],"`$` or":["infix"],"`$` rather":["than"],"`$` to":["get","get","`.`"],"`$` vs":["`.`"],"`$`, I'm":["not"],"`$`, and":["I"],"`&& not":["(any"],"`&&&` is":["trying"],"`&&&`, `uncurry`":["and"],"`&&` and":["`||`","`==`!"],"`&&` are":["superfluous"],"`&&` at":["all"],"`&&` so":["parentheses"],"`&&` there's":["no"],"`&&` without":["any"],"`&&`, `||`,":["`not`,"],"`&&`. Also,":["`null`"],"`&&`. Most":["of"],"`&&`. You":["can"],"`&amp;&amp;&amp;` operator":["can","`map","which"],"`&amp;&amp;&amp;`, sorry,":["wasn't"],"`&amp;&amp;` happens":["because"],"`&amp;&amp;` is":["infixr","a"],"`&amp;&amp;` needed?":["Shouldn't"],"`&amp;&amp;` short":["circuits,"],"`&amp;lt$&gt;` is":["just"],"`&amp;lt*&gt;` is":["a"],"`&gt;&gt;=` and":["`&gt;&gt;`"],"`&gt;&gt;` functions":["from"],"`&lt;-` and":["`/=`"],"`' '`.":["Use"],"`'-'`, it":["just"],"`'?' ==":["last"],"`'?'` followed":["by"],"`'?'`, you":["can"],"`'A'`, so":["I"],"`'T'` instead":["of"],"`'T'` or":["`'U'`)"],"`'U'` to":["be"],"`'U'` with":["a"],"`'U'`) and":["then"],"`'V' -\u003e":["Violets`"],"`'a'` and":["`'z'`."],"`'a'` should":["be","be"],"`(!) cipher":["n`"],"`(!)` and":["then"],"`(!)` instead":["of"],"`(!a, !b)":["="],"`(\"\" ==)`":["is"],"`(\"CM\"++) .":["(\"XC\"++)"],"`(\"M\"++)` or":["`('M':)`),"],"`($)', namely":["`bar","`bar"],"`($)` is":["neat"],"`($)` operators?":["They"],"`($)` to":["remove"],"`($)`, `(.)`,":["and"],"`(&&) \u003c$\u003e":["anagramForS"],"`(&&)` from":["a"],"`(&amp;&amp;&amp;)` and":["figure"],"`(&amp;&amp;&amp;)` here.":["However,"],"`(&amp;&amp;&amp;)`, though":["I"],"`('0', '9')`":["would"],"`('1':digits)` feels":["more"],"`('?'==) .":["last`"],"`('C':'M': ('X':'C':":["('I':'I':'I:"],"`('C':'M':)` construction":["that"],"`('M':)`), like":["how"],"`((\"\" ++":["\"a\")"],"`((((1) +":["1)","1)","1)","1)"],"`(((1 +":["1)","1)","1)","1)","1)","1)"],"`(((1) +":["1)","1)","1)","1)","1)","1)"],"`(((… +":["1)"],"`(((…) +":["1)","1)","1)"],"`((+1) 1)`":["and"],"`((-\u003e) r)`":["Functor","(which","monad"],"`((1) +":["1)"],"`((== 0)":[".)"],"`((Just (Just":["1))"],"`((inputMap ==)":["."],"`((length .":["filter"],"`((letters word":["==)"],"`((…) +":["1)"],"`(+) ((+)":["a"],"`(+) old_value":["new_value"],"`(+)` (you":["would"],"`(+)` as":["the"],"`(+)` does":["everything"],"`(+)` here":["is"],"`(+)` which":["is"],"`(++\" of":["beer"],"`(++) &lt;$&gt;":["..."],"`(++) a":["((++)"],"`(++)` in":["place","prefix","the"],"`(++)`). I":["also"],"`(++)`, it":["is"],"`(+1) \u003c$\u003e":["(+2)`,"],"`(+2)` is":["a","the"],"`(+:)` operator":["(which"],"`(, 1)":["."],"`(, 1)`":["but","if","if"],"`(, 1)`,":["although"],"`(,) \u003cthunk\u003e":["\u003cthunk\u003e`"],"`(,) a":["b`","b`"],"`(,) a`":["has","that","does.","is","makes"],"`(,) a`,":["or"],"`(,) a`.":["Would"],"`(,)` (which":["is"],"`(,)` has":["a"],"`(,)` in":["Prelude"],"`(,0)` and":["`(,1)`"],"`(,1)` equivalent":["to","to"],"`(,1)` instead":["of","of"],"`(,1)` to":["mean"],"`(,1)` which":["is"],"`(,1)` with":["TupleSections"],"`(,1)` would":["be"],"`(,1)`, if":["you"],"`(,1)`. It's":["called"],"`(,1)`. Not":["a"],"`(,k) .":["map"],"`(,n) .":["map"],"`(-\u003e) r`":["is"],"`(. foo)":["."],"`(.&&.) =":["liftA2"],"`(.) .":["(.)`.","(.)`."],"`(.) f":["g`"],"`(.)$(.)` is":["sometimes"],"`(.).(.) ::":["(c"],"`(.).(.)`, some":["call"],"`(.).(.)`, which":["has"],"`(.)` and":["`($)`"],"`(.)` but":["I"],"`(.)` for":["two-argument"],"`(.)`\" is":["that"],"`(.)`, and":["`(&amp;&amp;&amp;)`"],"`(.)`. `add`":["is"],"`(.-.)` and":["`(.:)`"],"`(..)`, but":["can't)"],"`(.:) =":["(.)","fmap"],"`(.:)` are":["so"],"`(.:)` but":["that's"],"`(.:)` itself":["as"],"`(.:)`'s type":["annotation"],"`(/=)` and":["`sum`","`fromEnum","getting"],"`(/=)` as":["a"],"`(/=)` only":["for"],"`(1) +":["1`"],"`(3*n^4 +":["2*n^3"],"`(4, \"IV\")`.":["Can"],"`(900, \"CM\")`,":["`(4,"],"`(:) _`":["or"],"`(:) _head":["_tail`"],"`(:)`), so":["it"],"`(:)`, it":["evaluates"],"`(\u003c$\u003e)` but":["you"],"`(\u003c&&\u003e)` operator,":["which"],"`(== '":["')`","')`.","')`"],"`(== 0)":["."],"`(==) 'on'":["(sort","sort"],"`(==) \u003c*\u003e":["allcaps`."],"`(==) a":["b`"],"`(==)` instance":["for"],"`(==)`, but":["this"],"`(=~)` are":["often"],"`(=~)` with":["the"],"`(\u003e\u003e= f)`":[":)"],"`(ByteString.unpack .":["ByteString.pack)`"],"`(False==)` is":["equivalent"],"`(Integral b,":["Num"],"`(Just 1":["\u003e\u003e="],"`(Map.alter incr)`":["to"],"`(Num (Either":["String"],"`(PrimMonad m,":["MVector"],"`(String, (String,":["String))`"],"`(String, String)`":["where"],"`(String, String,":["String)`","String)`","String)`"],"`(String, a)`,":["type"],"`(String, a0)`":["which"],"`([1..3] \u003e\u003e=":["return)"],"`([])` can":["be"],"`(\\(a, ns)":["-\u003e"],"`(\\(x,y) -\u003e":["x"],"`(\\a -\u003e":["isAllergicTo"],"`(\\a b":["-\u003e"],"`(\\b -\u003e":["Just","Just"],"`(\\c -\u003e":["not"],"`(\\s -&gt;":["(s,1))`.","(s,"],"`(\\s -\u003e":["Map.findWithDefault"],"`(\\w -&gt;":["(w,1))`","(w,"],"`(\\w -\u003e":["(w,","(w,","Map.alter"],"`(\\word -\u003e":["(word,"],"`(\\x -&gt;":["x","not","(x,","(x,"],"`(\\x -\u003e":["elem","(x,","(x,","zip"],"`(\\y -\u003e":["f"],"`(^ (2":["::"],"`(^ 2)`":["in"],"`(^)` is":["`(Integral"],"`(^2)` instead":["of"],"`(` not":["being"],"`(a -\u003e":["b)`","a","b)","Bool)","Bool)"],"`(a /=":["b)`"],"`(a, b)`":["and"],"`(acc ++)":["."],"`(all (not":["."],"`(all isSpace)":["string`."],"`(all isUpper":["$"],"`(area, rest)":["="],"`(b -\u003e":["a"],"`(c==)` or":["`(==c)`."],"`(century)` in":["parentheses"],"`(count +":["1)`"],"`(d :":["ds')"],"`(dimap (*":["2)"],"`(dv, rm)`":["in"],"`(f &&&":["g)"],"`(f a":["-\u003e"],"`(f kx":["x"],"`(f w1":["_1)`.","(f"],"`(f x,":["g"],"`(first :":["rest)`"],"`(flip (Map.findWithDefault":["'?')"],"`(flip isAllergicTo":["value)`"],"`(fromBool .).":["(/=)`"],"`(fromEnum .)":["."],"`(fromMaybe default":[".)"],"`(g .":["f)"],"`(head .":["reverse)`."],"`(id &&&":["const"],"`(id &amp;&amp;&amp;":["const"],"`(if b":["=="],"`(incword (incword":["(incword"],"`(insertWith (+)":["w1"],"`(intersperse \"\\n\"":["list)"],"`(isLetter a":["&&"],"`(isQuestion \"\")`":["doesn't"],"`(join (*))`":["to"],"`(l t":["I)`"],"`(la, sa)":["="],"`(lowerCaseBottleText .":["next)"],"`(map intToDigit":["[0..9])`"],"`(map toLower":["."],"`(map toLower)`":["aren't","over"],"`(n -":["1)`"],"`(n; k+1)":["="],"`(next end)`":["in"],"`(normalize x)`":["aren't"],"`(not $":["isLetter","any","isYelling"],"`(not .":["isLower)`","isLower)`,","isLower)`.","null)`,","null)","null)","isAlpha)","isLower)","null)`","isLower)`","null","isLogical)","isAlphaNum)`"],"`(not .)":["."],"`(not .)`.":["That"],"`(not hasLower)":["y`."],"`(r -\u003e)`":["if"],"`(repeat 1)`":["more"],"`(show $":["x"],"`(show =\u003c\u003c)`":["outside"],"`(show i)`":["aren't"],"`(show n)`":["on"],"`(sort .":["map","normalize)"],"`(sum $":["addends"],"`(sum .)":["."],"`(w, s'')":["="],"`(word, _)`":["where"],"`(words, 1)`":["would"],"`(x)` is":["different"],"`(x:xs)` (except":["for"],"`(x:xs)` and":["looping."],"`(x:xs)` instead":["of"],"`(x:xs)` later.":["You"],"`(x:xs)` rather":["than"],"`(y ==":["upCase"],"`(y:ys)` pattern.":["`([])`"],"`(…)` rather":["than"],"`* -\u003e":["*`"],"`* secondsPerEarthYear`":["while"],"`*With` that":["supports"],"`*` and":["`+`"],"`*`. This":["is"],"`*`. Try":["to"],"`+ 1`":["with"],"`++` all":["over."],"`++` because":["it's"],"`++` but":["more"],"`++` has":["to"],"`++` is":["usually"],"`++` might":["be."],"`++` on":["the"],"`++` operator":["may"],"`++` so":["that","it's"],"`++` the":["list"],"`++` which":["makes"],"`++`, or":["even"],"`++`. Is":["there"],"`++`. It":["can"],"`++`. The":["recursion"],"`+1` computations":["will"],"`+` (or":["if"],"`+` function":["could"],"`+` is":["left"],"`+`, `*`.":["Try"],"`+`, so":["no"],"`+`. Unlikely":["to"],"`, 0":["@=?"],"`,` or":["a"],"`-- Implementation":["of"],"`---` is":["supposed"],"`-1` needs":["parenthesis"],"`-1`), instead":["of"],"`-\u003e Bool`":["function"],"`-Wall` it":["will"],"`-Wall` you":["should've"],"`-XTupleSections`? That":["was"],"`.).) ...":[".)`"],"`.).` part":["doing"],"`.).` to":["2,"],"`.*\u003e` operator":["!"],"`.:` would":["be"],"`.:`. Not":["built-in"],"`.` and":["the"],"`.` apply":["to"],"`.` as":["a"],"`.` but":["the"],"`.` combinator":["to"],"`.` for":["other","each"],"`.` has":["the","very"],"`.` instead":["of"],"`.` is":["quite"],"`.` operator":["helps","as"],"`.` operator's":["type"],"`.` operator.":["The","This"],"`.` so":["that"],"`.` to":["join"],"`.`, consider":["`filter"],"`.`, it":["looks"],"`.`. It":["turns"],"`.`. is":["an"],"`.|. 1`.":["This"],"`.|.` (binary":["or)"],"`.|.`) the":["current"],"`/=` and":["`filter"],"`/=` comparison":["to"],"`/=` comparison,":["though"],"`/=` in":["the"],"`/=` instead":["of","of"],"`/=` operators":["have"],"`/=` so":["that"],"`/=` you":["could"],"`/` and":["`\\`"],"`0..6`, not":["`1..7`"],"`0` or":["`\u003e1`"],"`0`, but":["the"],"`0`. However,":["I"],"`1 'elem'":["[1,2,3]`"],"`1 +":["(…","(1","(1","1`.","(1","1`","1","(1"],"`1+1+1+1+1+1` is":["many"],"`1.` binding":["more"],"`10000 -":["1`."],"`10^(9 ::":["Integer)`"],"`10^(fromIntegral 9)`":["doesn't"],"`10^9::Integer', now":["take"],"`1111`.. which":["in"],"`17` into":["a"],"`1` and":["`False`s"],"`1`, but":["then"],"`1`? And":["then"],"`2 :":["[3,","[3,5..]`."],"`2*acc` with":["`shiftL"],"`219` come":["from?"],"`219` is":["the"],"`255` since":["there"],"`2:3:[n +":["k"],"`2:3:[n+m |":["n"],"`2:[3,5..]` for":["15485863"],"`2:[3,5..]` it":["will"],"`2^0 +":["2^1"],"`2^64-1` is":["difficult"],"`2^n ==":["1"],"`2^n` but":["they're"],"`2^n` is":["more"],"`2` can":["be"],"`3' at":["Phone.hs:14:36"],"`3*(n-1)/2` arithmetic":["operations"],"`31` and":["`32`"],"`32` don't":["forget"],"`48`. I":["don't"],"`48`. You":["can"],"`4`. For":["a"],"`6`. The":["fix"],"`9223372036854775808` to":["an"],"`:: (a":["-\u003e"],"`:: Int":["-\u003e"],"`:: Integer`":["or"],"`:: Key":["-\u003e"],"`:: Num":["a"],"`:: Planet":["-\u003e"],"`:: [m":["a]"],"`::Integer` should":["be"],"`::` but":["that"],"`::` normally":["has"],"`::` should":["have"],"`::`, but":["this"],"`::`. I":["would"],"`:` constructor":["at"],"`:` is":["an","an","normally"],"`:double` and":["`:triple`"],"`:info ($)`":["in"],"`:load file.hs`":["at"],"`:set -Wall`":["or"],"`:triple` another":["value"],"`;` for":["separating"],"`\u003c$\u003e` (which":["is"],"`\u003c$\u003e` and":["`liftM`","`\u003c*\u003e`","`\u003c*\u003e`!"],"`\u003c$\u003e` are":["not"],"`\u003c$\u003e` because":["I"],"`\u003c$\u003e` has":["a"],"`\u003c$\u003e` is":["just"],"`\u003c$\u003e` operator":["from"],"`\u003c$\u003e`) to":["implement"],"`\u003c$\u003e`, something":["like"],"`\u003c$\u003e`. It":["keeps"],"`\u003c*\u003e` operator":["is"],"`\u003c*\u003e` save":["quite"],"`\u003c*\u003e`! I'm":["still"],"`\u003c-` operator,":["why"],"`\u003c=` comparisons":["yourself."],"`\u003c=` is":["better"],"`\u003c=`, subtraction,":["and"],"`\u003c\u003e` from":["Data.Monoid"],"`\u003c\u003e`) would":["make"],"`\u003c|\u003e` and":["`fmap`"],"`\u003c|\u003e` but":["I'm"],"`\u003c|\u003e` from":["Control.Applicative"],"`\u003c|\u003e` operator":["and"],"`\u003c|\u003e` operators":["in"],"`\u003c|\u003e` over":["`choice`,"],"`\u003c|\u003e` you":["may"],"`= undefined`":["to"],"`=\u003c\u003c`. That":["seems"],"`== False`":["is"],"`== True`":["is"],"`==` and":["`&&`.","`/=`"],"`==` anywhere":["either."],"`==` as":["`=`"],"`==` bother":["you,"],"`==` comparator":["separated"],"`==` does":["the"],"`==` for":["lists"],"`==` has":["a"],"`==` implies":["Eq."],"`==` needs":["to"],"`==` operator.":["Technically"],"`==` over":["using"],"`==`, you":["could"],"`==`. Note":["also"],"`==`. Totally":["valid"],"`==`? Hint:":["`any`"],"`=` (thus":["there"],"`=` and":["`==`"],"`=` carelessly.":["Youda"],"`=` rather":["than"],"`=` sign":["and"],"`=` signs":["inside"],"`=` signs.":["It"],"`=`. You":["don't"],"`=`s under":["the"],"`\u003e1` or":["anything"],"`\u003e=\u003e` could":["be"],"`\u003e=` and":["`\u003c=`","`\u003c=`"],"`\u003e\u003e return":["()`."],"`\u003e\u003e=` \"trick\"":["(once"],"`\u003e\u003e=` allows":["you"],"`\u003e\u003e=` can":["get"],"`\u003e\u003e=` has":["very"],"`\u003e\u003e=` if":["you"],"`\u003e\u003e=` instead":["of"],"`\u003e\u003e=` rather":["than"],"`?` so":["it"],"`A |":["G"],"`AA`, `BB`,":["etc.?"],"`ALL-CAPS QUESTION?`":["should"],"`A` ➜":["`U`"],"`A`, `C`,":["`G`,","`G`,"],"`A`. It's":["possible"],"`Aggression` and":["could"],"`Alternative` version,":["I"],"`Alternative`, I've":["used"],"`Am \u003c-":["M`","M`","M`"],"`Applicative` a":["bit"],"`Applicative` instance":["for"],"`As +=":["1`","1`","1`"],"`As =":["S`","S`","S`"],"`B.pack` in":["the"],"`B.pack` is":["going"],"`BangPatterns` clearer":["than"],"`BankAccount (MVar":["(Maybe"],"`BankAccount \u003c$\u003e":["newMVar"],"`Bearing` data":["type?"],"`Bearing` that":["will"],"`Bin`, but":["`f`,"],"`Bool` and":["name"],"`Bool` constructors),":["or"],"`Bool` instead":["of"],"`Bool` is":["conveniently"],"`Bool` this":["simplifies"],"`Bool`s to":["`Int`:"],"`Bounded` and":["use"],"`Bounded` for":["the"],"`Bs +=":["2`","2`","2`"],"`Bs =":["S`","S`","S`","S`"],"`ByteString`s? The":["added"],"`C.toLower` are":["superfluous,"],"`C.toUpper x":[":"],"`C` and":["`N`,"],"`C` instead":["of"],"`C` would":["be"],"`C` ➜":["`G`"],"`C`, `G`,":["and","`U`.\""],"`Callable` class.":["It"],"`Callable` typeclass":["for"],"`Char -&gt;":["Bool`,"],"`Char -\u003e":["Maybe","Maybe","Bool`","Bool`","String`","Char`.","Char`"],"`CharPattern -\u003e":["(Char,"],"`Char` and":["`a`."],"`Char` is":["obvious,"],"`Char` list":["literal"],"`Char` to":["make"],"`Char` will":["correspond"],"`Char`). But":["i"],"`Char`s as":["sentinels."],"`Char`s between":["`'a'`"],"`Char`s. That's":["why"],"`ClassyPrelude` though.":["Also"],"`Cons a":["(some-expr)`"],"`Control.Applicative` to":["turn"],"`Control.Arrow.first` for":["`mapFst`"],"`Control.Arrow` and":["`map"],"`Control.Arrow` combinator":["is"],"`Control.Arrow`. The":["way"],"`Control.Concurrent.MVar` module":["in"],"`Control.Concurrent.STM` is":["better"],"`Control.DeepSeq`) in":["the"],"`Control.Monad.STM` slightly":["simpler"],"`Control.Monad.liftM2` to":["work"],"`DList Char`":["and"],"`DNA [Base]`":["type"],"`DNA` that":["takes"],"`Data,Char`. Also,":["check"],"`Data.Bits.shiftL` instead":["of"],"`Data.Bits.testBit` to":["make"],"`Data.Bits` functions":["to"],"`Data.Bits` now":["too."],"`Data.Bits`, how":["would"],"`Data.Bits`? That":["module"],"`Data.ByteString` is":["a"],"`Data.Char.digitToInt` function":["useful"],"`Data.Char.digitToInt` is":["largely"],"`Data.Char.isSpace` instead":["of","of"],"`Data.Char.isSpace` on":["L7."],"`Data.Char.isUpper`, and":["```(`elem`"],"`Data.Char.toLower` handles":["punctuation"],"`Data.Char` adds":["a"],"`Data.Char` are":["enough"],"`Data.Char` certainly":["uses"],"`Data.Char` exclusively":["seems"],"`Data.Char` has":["function","predicates"],"`Data.Char` is":["imported,"],"`Data.Char` isn't":["generally"],"`Data.Char` module":["contains"],"`Data.Char` provided":["functions"],"`Data.Char` tests.":["I"],"`Data.Char`, you":["can"],"`Data.Char`. Also,":["many"],"`Data.Char`. If":["there"],"`Data.Function.on` combinator":["as"],"`Data.Function` to":["simplify"],"`Data.IORef` module":["might"],"`Data.List (intercalate)`":["import"],"`Data.List' is":["redundant"],"`Data.List.Split.wordsBy` instead":["of"],"`Data.List.Split.wordsBy` might":["make"],"`Data.List.Split.wordsBy` with":["a"],"`Data.List.Split` and":["removed"],"`Data.List.Split` functions":["any"],"`Data.List.Split` in":["writing","`normalize`."],"`Data.List.Split` instead":["of","of"],"`Data.List.Split` library),":["and"],"`Data.List.Split` listed":["in"],"`Data.List.Split` module,":["as"],"`Data.List.Split` you":["can"],"`Data.List.Split`'s `splitPlaces`":["to"],"`Data.List.Split`) are":["included"],"`Data.List.Split`, specifically":["`wordsBy`,"],"`Data.List.Split`, this":["might","would"],"`Data.List.Split`, which":["would","comes"],"`Data.List.Split`. Also,":["why"],"`Data.List.Split`. I":["wasn't"],"`Data.List.Split`. This":["lets"],"`Data.List.Split`: `wordsBy`,":["is"],"`Data.List.Split`; it":["should"],"`Data.List.all`? You":["might"],"`Data.List.any` and":["`Data.List.all`?"],"`Data.List.isSuffixOf` and":["`null`"],"`Data.List.last` function":["to"],"`Data.List.map` is":["the"],"`Data.List.singleton`, yes":["they"],"`Data.List.splitAt` to":["capture"],"`Data.List.transpose` if":["that"],"`Data.List.unfoldr` and":["`scanl`."],"`Data.List` comes":["standard"],"`Data.List` could":["be"],"`Data.List` eg":["`all"],"`Data.List` for":["help."],"`Data.List` has":["both"],"`Data.List` is":["better","preferred."],"`Data.List` module":["has"],"`Data.List` module,":["so"],"`Data.List` module.":["They"],"`Data.List` that's":["a"],"`Data.List` which":["helps","inserts"],"`Data.List` you":["can"],"`Data.List`) you":["don't"],"`Data.List`, as":["it"],"`Data.List`? Sorry":["if"],"`Data.Map.Lazy` are":["re-exported"],"`Data.Map.Map` isn't":["[value-strict](http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html)"],"`Data.Map.Map` to":["just"],"`Data.Map.Strict' is":["redundant.\""],"`Data.Map.Strict.fromListWith` instead":["of"],"`Data.Map.Strict.insertWith` instead.":["Alternatively"],"`Data.Map.Strict` be":["a"],"`Data.Map.Strict` instead":["of","of"],"`Data.Map.Strict` instead,":["its"],"`Data.Map.Strict` is":["preferred"],"`Data.Map.Strict` rather":["than","than"],"`Data.Map.Strict` so":["I"],"`Data.Map.Strict`) but":["you"],"`Data.Map.Strict`, the":["keys/values"],"`Data.Map.Strict`, you'll":["find"],"`Data.Map.Strict`. I":["ended"],"`Data.Map.Strict`. It's":["fixed"],"`Data.Map.empty` which":["you"],"`Data.Map.fromListWith` although":["I"],"`Data.Map.fromListWith` here,":["it"],"`Data.Map.fromListWith` instead":["of"],"`Data.Map.fromListWith` might":["come"],"`Data.Map.fromListWith` or":["with"],"`Data.Map.insertWith'` is":["deprecated"],"`Data.Map.insertWith` or":["`Data.Map.fromListWith`"],"`Data.Map.map` to":["map"],"`Data.Map` and":["`Data.Set`?"],"`Data.Map` as":["`M`.","nothing"],"`Data.Map` by":["default"],"`Data.Map` exports,":["and"],"`Data.Map` for":["your"],"`Data.Map` functions":["to","but"],"`Data.Map` instead":["of","of"],"`Data.Map` instead.":["Could"],"`Data.Map` is":["powerful."],"`Data.Map` module":["(although"],"`Data.Map` only...":["also,"],"`Data.Map` or":["types"],"`Data.Map` provides.":["[Data.Map](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html)"],"`Data.Map` so":["you"],"`Data.Map` supports":["fancy"],"`Data.Map` that":["performs"],"`Data.Map` there":["are"],"`Data.Map` to":["build","build"],"`Data.Map` was":["really"],"`Data.Map` when":["I"],"`Data.Map` which":["completely"],"`Data.Map`, I":["don't"],"`Data.Map`, but":["it's"],"`Data.Map`. I":["wish"],"`Data.Map`. You":["might"],"`Data.Map`. `Data.Map.Map`":["isn't"],"`Data.Maybe.fromJust .":["lookup`"],"`Data.Maybe`) to":["do"],"`Data.Set` but":["that"],"`Data.Set` didn't":["help"],"`Data.Set` to":["simplify"],"`Data.Set`? Set":["made"],"`Data.Set`? They":["make"],"`Data.Strict.Tuple` or":["simply"],"`Data.String.Utils` and":["it"],"`Data.Text` functions,":["use"],"`Data.Text` is":["a"],"`Data.Text` isn't":["necessary."],"`Data.Text`. `pack`":["is"],"`Data.Time.Calendar.Weekdate` to":["build"],"`Data.Time.Calendar` and":["`Data.Time.Calendar.Weekdate`"],"`Data.Time.Calendar` has":["everything"],"`Data.Time.Calendar`, so":["I"],"`Data.Vector.Algorithms.Intro`. At":["least"],"`Data.Vector` and":["some"],"`Data.Vector` is":["because"],"`Day` construct":["rather"],"`Day` is":["an"],"`Day` types":["and"],"`DefaultGarden` trick":["in"],"`Defaulting the":["following"],"`Deque \u003c$\u003e":["newTVarIO"],"`Display (EmotionalContent":["-&gt;"],"`Display` constructor":["doesn't"],"`Dl.insert .":["head`"],"`Dl` or":["`Dm`."],"`Double` as":["the"],"`E.throw $":["E.ErrorCall`"],"`E.throw .":["E.ErrorCall`"],"`Either String":["Int`","Int`"],"`EitherT String":["m"],"`Either` in":["the"],"`Either` instead":["of"],"`Either` is":["also"],"`Either` monad":["instance."],"`Either`. `Either`":["is"],"`Either`s using":["the"],"`Enum` and":["possibly"],"`Enum` instance":["to","I","will"],"`Enum` instance,":["which"],"`Enum` is":["the"],"`Enum` make":["this"],"`Enum`. Looking":["at"],"`Eq a":["=\u003e"],"`FOOBAR`, yes.":["It's"],"`FOOBAR`? I":["think"],"`False \\=":["False"],"`False |":["True`"],"`False ||":["False"],"`False` anyway,":["so"],"`False` could":["be"],"`False` for":["non-alphabetic"],"`False` in":["any"],"`False`, the":["expression"],"`False`. Everything":["else"],"`False`s to":["0"],"`First` `y`":["such"],"`First`'s monoid":["instance."],"`FlexibleInstances` (it's":["got"],"`FlexibleInstances` was":["a"],"`Foldable` in":["the"],"`Foldable` instance,":["then"],"`Functor` because":["the"],"`Functor` instance":["for"],"`G` ➜":["`C`"],"`G`, and":["`T`."],"`HasDigits` to":["shoehorn"],"`IO ()`":["so"],"`IO String`s?":["If"],"`IORef String":["-\u003e"],"`IORef String`":["field."],"`IORef String`,":["instead"],"`IORef' with":["`IO'`"],"`IORef` and":["`MVar`"],"`IORef` as":["I"],"`IORef` instead":["of"],"`IORef` may":["work"],"`IORef`. I":["was"],"`IO` monad":["also"],"`Illogical` could":["be"],"`Inquiry -\u003e":["String`"],"`Int -\u003e":["[Char]`","Integer`","[(Int,"],"`IntMap` will":["be"],"`IntMap`. Thanks":["@anastacio,"],"`Int` and":["`Integer`"],"`Int` before.":["So"],"`Int` but":["in"],"`Int` have":["NFData"],"`Int` instead":["of","of"],"`Int` is":["probably","easier","often","almost","more"],"`Int` then":["write"],"`Int` would've":["been"],"`Int`, an":["`Integer`"],"`Int`s. Then":["you"],"`Integer` and":["a"],"`Integer` but":["there"],"`Integer` is":["the"],"`Integer` so":["`a"],"`Integer` solution":["is"],"`Integer`, so":["eventually"],"`Integer`. It's":["more"],"`Integer`. The":["explicit"],"`Integral a":["=\u003e","=\u003e"],"`Integral int`,":["just"],"`Integral`s, not":["only"],"`Intersperse '":["'`"],"`Just (+1)":["\u003c*\u003e"],"`Just \u003c$\u003e":["readMVar"],"`Just [1,":["2]`"],"`Just [1]":["\u003c\u003e","\u003c\u003e"],"`Just _`":["is"],"`Just _`/`Nothing`":["case"],"`Just f":["\u003c*\u003e"],"`Just x":["\u003e\u003e=","\u003c|\u003e"],"`Just y`":["or"],"`Just` constructor":["and"],"`Just` for":["the"],"`Key`s are":["significant,"],"`L.filter` when":["it's"],"`LANGUAGE` header":["at"],"`L` and":["`M`"],"`L`. This":["seems"],"`LambdaCase`. Nice":["one."],"`Last` just":["that"],"`Last`. I'll":["have"],"`Left a`":["immediately."],"`Left a`,":["the"],"`Left error`,":["otherwise"],"`Left res`,":["short-circuiting"],"`List.foldl' (+)":["0"],"`List.foldr` when":["the"],"`List.intersperse` from":["also"],"`List.map` or":["`List.foldr`"],"`List` and":["`Map`"],"`List` functions":["you"],"`List` seems":["to"],"`List`/`Char` operations":["(as"],"`M \u003c-":["Am`","2`","2`","Am`","2`","Am`"],"`M.Map String":["Int`"],"`M.Map` and":["`S.Set`"],"`M.adjust (+1)`":["and"],"`M.foldlWithKey'` or":["`M.foldrWithKey'`"],"`M.foldrWithKey'` and":["using"],"`M.fromListWith` instead":["of"],"`M.fromListWith` which":["does"],"`M.insertWith (+)":["word"],"`M.insertWith (++)":["g","g"],"`M.insertWith` so":["that"],"`M.insert`, leading":["to"],"`M.keys` is":["`O(n)`"],"`M.map` as":["it"],"`M.map`, and":["I"],"`M.toAscList` to":["clarify"],"`M.toAscList`, there":["isn't"],"`M.toList oldData`":["inside"],"`M.toList` already":["returns"],"`M.toList` the":["school"],"`MVar` -":["and"],"`MVar` altogether),":["can"],"`MVar` is":["not","never","preferred."],"`MVar` or":["`IORef`"],"`MVar` seems":["overhead"],"`MVar`s I":["think."],"`MVar`s and":["why"],"`MVar`s not":["`TVar`s"],"`MVar`s, latter":["are"],"`MVar`s. This":["seems"],"`M` or":["`List`","`L`."],"`MakeSchool` would":["be"],"`Map Key":["Value`"],"`Map Name":["Int`"],"`Map String":["Int`"],"`Map [String]":["Char`"],"`Map, alter,":["empy`"],"`Map.Map` all":["the"],"`Map.Map` in":["type"],"`Map.Map`). Second":["one"],"`Map.alter` first":["expects"],"`Map.findWithDefault` for":["a"],"`Map.findWithDefault` would":["make"],"`Map.findWithDefault`, you":["should"],"`Map.fromList*` family":["of"],"`Map.fromListWith (+)":["."],"`Map.fromListWith` instead,":["which"],"`Map.fromListWith` instead…":["this"],"`Map.fromListWith` or":["at","at"],"`Map.fromListWith` to":["do","build","build"],"`Map.fromListWith` would":["make"],"`Map.fromListWith`, which":["would"],"`Map.fromListWith`. It":["can"],"`Map.fromList`. I":["bet"],"`Map.insertWith (+)`":["it"],"`Map.insertWith Set.union`":["made"],"`Map.insertWith` not":["`Map.alter`"],"`Map.insertWith` or":["even"],"`Map.insertWith` to":["do"],"`Map.toAscList` (which":["would"],"`Map.toList` is":["guaranteed"],"`Map` (and":["`Set`,"],"`Map` as":["the","I"],"`Map` earlier":["and"],"`Map` functions":["directly"],"`Map` functions?":["If"],"`Map` import":["with","and"],"`Map` imports":["aren't"],"`Map` in":["a"],"`Map` instead":["of"],"`Map` is":["the","dependent"],"`Map` so":["didn't"],"`Map` type":["that","in","is"],"`Map` type,":["so"],"`Map` unqualified":["so"],"`Map` will":["perform"],"`Map` would":["be"],"`Map`, and":["then"],"`Map`. Also,":["I"],"`Map`. I":["went"],"`Map`. i":["kind"],"`Map`s to":["union"],"`Matrix a":["b","="],"`Maybe (Int":["-\u003e"],"`Maybe (Int,":["Int)`"],"`Maybe (Integer":["-\u003e"],"`Maybe (N":["a)"],"`Maybe Int`":["and"],"`Maybe Integer`":["or","in"],"`Maybe Plant`":["would"],"`Maybe Square`s":["than"],"`Maybe [Integer":["-\u003e"],"`Maybe [Maybe":["Nucleotide]`"],"`Maybe a`":["in"],"`Maybe` and":["`mappend`"],"`Maybe` for":["that","now."],"`Maybe` in":["this"],"`Maybe` instead":["of"],"`Maybe` or":["`Either`"],"`Maybe` value":["around,"],"`Maybe` values":["are"],"`Maybe`) and":["essentially"],"`Maybe`? It's":["pretty"],"`Mercury` should":["start"],"`MessageType` allowed":["me"],"`MessageType` is":["perfectly"],"`MessageType`, uh,":["type"],"`MissingH` package.":["That"],"`Monad` instance":["for"],"`Monad` requires":["writing"],"`MoveLeft`, `MoveRight`":["as"],"`MoveRight` as":["constructors"],"`MultiwayIf` comment,":["I"],"`MultiwayIf` is":["a"],"`NFData` is":["new"],"`NFData` so":["not"],"`N`, it":["would"],"`N`. Alternatively,":["you"],"`No instance":["for"],"`Node a":["="],"`None` isn't":["really"],"`None` to":["the"],"`None`. And":["I"],"`Normal` and":["`nOrmal`"],"`Nothing \u003c|\u003e":["y"],"`Nothing` although":["the"],"`Nothing` as":["well"],"`Nothing` to":["`0`."],"`Nothing`, but":["`Just"],"`Nucleotide` appropriate":["in","in"],"`Nucleotide` as":["I"],"`Nucleotide`. Right":["now"],"`Num a":["=&gt;","=\u003e"],"`Num` here":["isn't"],"`O(gradesCount +":["studentsCount)`)."],"`O(log gradesCount":["+"],"`O(log gradesCount)`":["to"],"`O(n *":["log"],"`O(n lg":["n)`."],"`O(n)` and":["`grade`"],"`O(n)` comparison":["before"],"`O(n)` price":["by"],"`O(n)`. This":["is"],"`OK, I'm":["done."],"`Ord` for":["a"],"`Ord` of":["any"],"`Ord` property":["of"],"`OtherMessage` explicitly":["in"],"`Other` for":["the"],"`Parser a0`.":["I"],"`Parser a`,":["i"],"`PhoneNumber \"000\"":["\"000\""],"`PhoneNumber &lt;$&gt;":["pAreaCode"],"`PhoneNumber` was":["being"],"`Prelude.`, since":["they're"],"`Prelude.foldl` if":["you"],"`Prelude.head`, for":["instance."],"`Prelude.reads` method":["it"],"`Prelude` also":["has"],"`Prelude` and":["`Data.Char`","you"],"`Prelude` from":["other"],"`Prelude` you":["have"],"`Prelude`, and":["you"],"`Prelude`. Try":["using"],"`Principles of":["Program"],"`Q` is":["much"],"`Read` altogether,":["and"],"`Read` classes,":["how"],"`Read` instance.":["I"],"`Read`, and":["I"],"`Response -\u003e":["String`,"],"`Response` and":["make"],"`Response` to":["the"],"`Response` type":["altogether."],"`Revision 6`":["for"],"`Right '!'`":["case"],"`Right Int`":["value","instead"],"`Right a`":["value"],"`Robot -\u003e":["IO"],"`Robot \u003c$\u003e":["m`","(mkName"],"`Robot {":["name"],"`Robot.hs:8:10: Couldn't":["match"],"`RobotRec -\u003e":["IO"],"`Robot` a":["`newtype`.","`data`"],"`Robot` and":["returned"],"`Robot` constructor":["is"],"`Robot` has":["a"],"`Robot` inside":["module."],"`Robot` to":["match."],"`Robot` type":["here"],"`S =":["Bs`).","As`","Bs`","Bs`","As`","As`","Bs`"],"`S.Set` ugly?":["You"],"`S.sorted` has":["type"],"`S.sorted`. So":["you"],"`S.toList` --":["the"],"`STRICT_2_OF_4` macro":["and"],"`STRef`, since":["`IO`"],"`SU.split \"":["\"`"],"`Sch` constructor":["in"],"`Schedule` derive":["`Enum`."],"`Schedule`), it":["would"],"`School'` to`":["School`."],"`School.add` from":["3"],"`School.sorted` runs":["in"],"`School` -&gt;":["`[(Int,"],"`School` a":["type"],"`School` an":["instance"],"`School` as":["a"],"`School` data":["structure."],"`School` doesn't":["seem"],"`School` into":["a"],"`School` to":["be","`Map`.","`[(Grade,"],"`School` type":["is"],"`School` when":["in"],"`School`, then":["just"],"`School`. Since":["it's"],"`Seq`, etc)":["is"],"`Set` is":["sorted"],"`Set`, `Seq`,":["etc)"],"`Set`. If":["you"],"`ShowS` are":["isomorphic,"],"`ShowS` type.":["LYaH"],"`ShowS` was":["once"],"`ShowS`, which":["would"],"`Show` and":["`Read`"],"`Show` class":["and"],"`Show` class,":["inclduing"],"`Show` for":["either"],"`Show` instance":["for","as"],"`Show` to":["translate","satisfy"],"`Show`. I":["think"],"`Silence` or":["`Aggression`"],"`State MyState":["{Id,"],"`StateT String":["IO"],"`State` monad":["(yay,"],"`StatementType` and":["`analyze`."],"`StdGen` between":["`letters`"],"`StdGen`, and":["use"],"`String -&gt;":["String`,","Maybe"],"`String -\u003e":["String`","String`","(String,"],"`String =&gt;":["Map"],"`String` -&gt;":["`[(a,"],"`String` /":["`[Char]`"],"`String` `Text`":["to"],"`String` because":["`Text`"],"`String` for":["`[Char]`."],"`String` in":["place","Haskell","`convert'`?"],"`String` instead":["of","of","of"],"`String` into":["`Text`.","a"],"`String` is":["a","the","a","probably","perfectly","really","generally","just","usually","a","a","a"],"`String` it":["requires"],"`String` only":["once"],"`String` over":["`[Char]`","`[Char]`"],"`String` rather":["than","than"],"`String` to":["be"],"`String` type":["instead"],"`String` version":["because"],"`String` you":["use"],"`String` yourself":["quite"],"`String`). sentence":["might"],"`String`, I":["would"],"`String`, but":["this"],"`String`, it":["doesn't"],"`String`. Pretty":["nice"],"`System.Random` there":["is"],"`T.last` did":["you"],"`T.last` to":["skip"],"`T.pack` in":["`isQuestion`"],"`T.pack` is":["not"],"`T.pack` once":["in"],"`T.stripStart` into":["`responseFor`"],"`TVar (Maybe":["Int)`."],"`TVarIO` commands?":["I"],"`TVar` in":["`Control.Monad.STM`"],"`TVar` is":["probably"],"`TVar`s more":["than"],"`TVar`s when":["I"],"`TVar`s, after":["an"],"`T` is":["how"],"`T` ➜":["`A`"],"`T`. 4":["occur"],"`Teenth` has":["no"],"`Teenth` or":["`Last`."],"`Teenth`— I":["just"],"`Text -&gt;":["Bool`"],"`Text -\u003e":["Text"],"`Text.Printf.printf`, not":["sure"],"`Text.Printf` is":["worth"],"`Text.Printf` might":["come"],"`Text.Regex.Posix` to":["check"],"`Text.Regex` and":["switched"],"`Text` and":["back."],"`Text` at":["least)"],"`Text` for":["free."],"`Text` instead":["of"],"`Text` is":["a","based"],"`Text` over":["regular"],"`Text` takes":["only"],"`Text` to":["and"],"`Text` type":["before"],"`Text` value":["(for"],"`Text` version":["of"],"`Text`. You":["pay"],"`Text`. `Prelude`":["and"],"`Tip` and":["`Bin`,"],"`True &amp;&amp;":["False`."],"`True` for":["the","empty","an","any"],"`True` values.":["I"],"`True`. Knowing":["this,"],"`True`. Thus":["L12"],"`True`s to":["`1`"],"`TupleSections` -":["whoa,"],"`TupleSections` extension":["enabled.","within","and","to"],"`TupleSections` extension,":["you","you","you","allowing"],"`TupleSections` in":["my"],"`TupleSections` language":["extension"],"`TupleSections` suggestion":["in"],"`TupleSections`! and":["thanks"],"`TupleSections`. This":["makes"],"`UArray` for":["O(1)"],"`UArray` to":["calclutate"],"`UTCTime` by":["working"],"`Uniform` is":["supposed"],"`V.Vector a`":["as"],"`V.cons` transposeVs":["(V.map"],"`Vector (Vector":["a)`"],"`Vector a`":["to"],"`Vector`. Are":["you"],"`WATCH OUT":["for"],"`WHAT? DON'T":["TALK"],"`Weekday` (and":["perhaps"],"`Weekday`) then":["applied"],"`What is":["3"],"`WordCount {":["getMap"],"`Word` here":["for"],"`[ (a,":["b)"],"`[ c":["|"],"`[ y":["|"],"`['0'..'9']` is":["a"],"`['A', 'T',":["'C',"],"`['G', 'C',":["'T',"],"`['z', 'y'":[".."],"`[(\"AEIO\", 1),":["(\"LNRS\",2)]`"],"`[('A',0),..]` or":["make"],"`[('a', (((1)":["+"],"`[('a', (1)":["+"],"`[('a', 1)]`,":["the"],"`[(+1), subtract":["1]`"],"`[(Grade, [Student])]`":["`School`","(i.e."],"`[(Int, String)]`":["for"],"`[(Key, Value)]`":["(since"],"`[(String, Int)]`":["as"],"`[(a, String)]`":["such"],"`[(nucleotide,1) |":["nucleotide"],"`[(w, 1)":["|","|"],"`[(x, 1)":["|"],"`[1, 1":["..]`"],"`[1, 1..]`":["but"],"`[1..3] \u003e\u003e=":["return","return","const","\\_","\\_"],"`[1..dv] \u003e\u003e":["k`"],"`[1..dv] \u003e\u003e=":["return","return","\\_","\\_","return","return"],"`[10, 9,":["8]`."],"`[2..n]` only":["the"],"`[5, 9,":["9"],"`[A..Z]`. Using":["all"],"`[Base]` or":["`[DNABase]`"],"`[Base]`. You":["could"],"`[C.toUpper x]":["++"],"`[Char]` (Haskell":["noob"],"`[Char]` (`String`":["is"],"`[Char]` ===":["`String`"],"`[Char]` and":["idiomatic","we"],"`[Char]` for":["cases","these"],"`[Char]` in":["type","type","Haskell."],"`[Char]` is":["more","much","written","the"],"`[Char]` rather":["than"],"`[Char]` would":["be"],"`[Char]`, even":["though"],"`[Char]`, perhaps":["you"],"`[Char]`, so":["you","you"],"`[Char]`. They":["mean","mean"],"`[DNABase]` instead":["of"],"`[Eggs..]` is":["sufficient,"],"`[Eggs..]`, it":["will"],"`[Eggs..]`. You":["could"],"`[Eggs..]`? You":["could"],"`[Key]` when":["you"],"`[Maybe (Integer":["-\u003e"],"`[Maybe Day,Int]`":["and"],"`[Maybe a]`":["in"],"`[Myabe a]`":["in"],"`[String] -\u003e":["Bool`"],"`[String]` (it":["is"],"`[String]` so":["it"],"`[Value]` would":["be"],"`[[Char]]` is":["more"],"`[]:qss` case":["instead"],"`[]` and":["`(x:xs)`"],"`[]` for":["`isSilent`.","empty"],"`[]` in":["the"],"`[]` is":["not"],"`[]` or":["`(:)"],"`[]` so":["it"],"`[a, a":["-"],"`[a, a-1":[".."],"`[a, b,":["c]","c]"],"`[a, pred":["a"],"`[a,a-1,..b]` you":["may"],"`[a,a-1..b]` in":["this"],"`[a-z0-9]` iff":["`isAlphaNum"],"`[b, b-1":[".."],"`[b, pred":["b"],"`[begin,begin-1..end]` (is":["lazy)."],"`[c |":["_"],"`[f x":["|"],"`[f, f-1":[".."],"`[from, from":["-","-","-","-"],"`[from, from-1":[".."],"`[from, then":["..",".."],"`[from,from-1 ..":["to]`,"],"`[from,then..to]`, which":["lets"],"`[i, i":["-"],"`[i, i-1":[".."],"`[initial, initial":["-"],"`[len-1, len-2":[".."],"`[m,m-1 ..":["n]`"],"`[max,(max -1)..`":["can"],"`[max,max-1..` since":["there"],"`[minBound ..]`":["is"],"`[minBound..]` or":["more"],"`[minBound..maxBound]` or":["`[minBound..]`"],"`[n'..n]` uses.":["i"],"`[n, n":["-","-"],"`[n, n-1...":["n']`"],"`[n,n-1..m]` as":["a"],"`[n,n-1..m]` then":["list"],"`[n..m]` won't":["work"],"`[n]` you":["could"],"`[row !!":["0,"],"`[start, pred":["start"],"`[start, start-1":[".."],"`[startDay ..":["endDay]`"],"`[startFrom, pred":["startFrom"],"`[to ..":["from]`"],"`[toLower x]`":["onto"],"`[x |":["x"],"`[x, pred":["x"],"`[x, x":["-","-"],"`[x, x-1":["..","..",".."],"`[x,x-1 ..":["y]`"],"`[x,x-1 ..y]`":["if"],"`[x] ++":["xs`"],"`\\(Nucleotide x)":["-\u003e`"],"`\\_ -&gt;":["(+1)`,"],"`\\_ -\u003e":["error`"],"`\\_ i":["-&gt;"],"`\\` have":["the"],"`\\acc bit":["-\u003e"],"`\\c -\u003e":["(c,"],"`\\n -\u003e`":["then"],"`\\n` at":["the"],"`\\n` in":["the"],"`\\n`s off":["the"],"`\\w -\u003e":["(w,","(w,"],"`\\x -&gt;":["not"],"`\\x -\u003e":["(x,","(x,","(x,","not","f","f","(not","(x,"],"`\\xdcML\\xc4\\xdcTS!` will":["return"],"`\\xs@(x:more) -\u003e":["(x,"],"`\\y -\u003e":["x"],"`^` operator":["you"],"`^` or":["`reverse`"],"`^` then":["you'll"],"`^` to":["solve"],"`^` using":["just"],"`^` works":["for"],"`^`, `length`,":["`zip`,"],"`^`, always":["has"],"`^`. Just":["`foldl'`,"],"`_ -\u003e":["nuc`"],"`_1`. The":["correct"],"`_` being":["used"],"`_` has":["a"],"`_` in":["the"],"`_` instead":["of","of"],"`_` is":["somehow","handling."],"`_` represents":["code"],"`_` will":["match","bind"],"`_`, is":["there"],"`_`. What":["if"],"`_responseFor` is":["not"],"`_s` convention":["is"],"`` (\"?\"":["`isSuffixOf`)`"],"`` from":["`Data.List`,"],"`` if":["you"],"`` looks":["more"],"``\"?\" `isSuffixOf`":["message"],"``((==) `on`":["unify)"],"``10^9 `div`":["secondsInDay``"],"``WordCount {":["getMap"],"``` `seq`":["```ing?"],"``` let":["dispatch"],"``` st":["/="],"```\"\"``` is":["a"],"```\"god\" `isAnagramOf`":["\"dog\"```."],"```\"inventory: 1000":["eggs,"],"```\"my number":["is:"],"```'T'``` case,":["and"],"```( /=":[")"],"```((,1))``` and":["```-XTupleSections```..."],"```(+)``` function":["to"],"```(++)``` by":["another"],"```(, 1)```":["a"],"```(-x) `mod`":["10```"],"```(10 -":["x)"],"```(==) `on`":["(not","f```"],"```(==)``` with":["```(\\=)```"],"```(\\=)``` as":["per"],"```(\\x -\u003e":["(x,1))```"],"```(\\xs -\u003e":["all"],"```(`elem` ['A'..'Z'])```":["is"],"```(`elem` ['a'..'z'])```":["is"],"```(`zip` (repeat":["1))"],"```(`zip` repeat":["1)```"],"```(a -&gt;":["Bool)"],"```(any isLetter":["message)"],"```(increment \"aa\"":["(increment"],"```(insert \"a\"":["(insert"],"```(isAnagram subject)```":["would"],"```++``` does":["make"],"```++``` would":["suffice"],"```++```, and":["using"],"```++```. In":["fact,"],"```, I":["can"],"```... where```":["clause,"],"```.```. This":["would"],"```0``` (look":["last"],"```1 +":["1"],"```101ups000``` result":["is"],"```1```s (have":["a"],"```219``` is":["magick"],"```2:[3,5..]``` I":["suppose,"],"```2^n```. Can":["you"],"```2n``` versus":["```n```"],"```==``` should":["equally"],"```? Obviously":["It"],"```Beer.toUpper```. I":["wasn't"],"```C.toUpper x":[":"],"```Char```s can":["be"],"```Char```s that":["are"],"```Data.Array.Unboxed.array ('A','Z')":["[...]```."],"```Data.Char```, ```Data.List```":["etc."],"```Data.HashMap``` is":["modern"],"```Data.List.Split.wordsBy``` with":["an"],"```Data.List.Split```. Doesn't":["make"],"```Data.List``` will":["help"],"```Data.Map.Strict``` convenience":["functions"],"```Data.Map.Strict``` here,":["but"],"```Data.Map.Strict``` would":["be"],"```Data.Map.Strict```, which":["is"],"```Data.Map.Strict```. Lazy":["evaluation"],"```Data.Map``` to":["```Data.Map.Strict```."],"```Data.Map``` would":["be"],"```Data.Map```, you":["may"],"```Data.Map```. It's":["a"],"```Data.Set``` in":["favour"],"```Data.Set``` instead":["of"],"```Data.String.Utils.replace``` must":["have"],"```Data.char```, IMHO":["it"],"```Eq``` instance),":["but"],"```False```. Maybe":["length"],"```M.HashMap``` is":["better"],"```M.Map``` instead":["of"],"```M.Map``` is":["not"],"```M.Map```, use":["it!"],"```M.fromListWith``` instead":["of"],"```Map.insertWith```. You":["can"],"```Map``` every":["single"],"```Map``` first":["and"],"```Map```, but":["still."],"```Maybe``). But":["this"],"```Maybe```. Did":["I"],"```Nothing```, so":["power"],"```O(max(length a,":["length"],"```O(n lg":["n)```"],"```O(n!)``` (in":["iteration"],"```O(n^2)``` (your":["current)."],"```O(n^2)```, and":["this"],"```Prelude``` functions,":["as"],"```Schedule``` an":["enum,"],"```Schedule``` to":["be"],"```School``` from":["tampering"],"```School``` type":["outside"],"```State``` Monad":["would"],"```String``` with":["a"],"```String```s to":["represent"],"```True``` and":["```False```."],"```True```. So":["the"],"```True```/```False```. ```filter```":["and"],"```Uniform``` meant":["that"],"```[(\"a\", 2),":["(\"b\","],"```[(\"word\", 1)..]```)":["and"],"```[A-Z]{2}[0-9]{3}``` as":["the"],"```[A-Z]{2}[1-9][0-9]{2}```, not":["```[A-Z]{2}[0-9]{3}```"],"```[[\"a\", \"a\"],":["[\"b\","],"```[]```–even though,":["in"],"```a !!":["((length"],"```a``` is":["going","constant"],"```add``` creates":["a"],"```add``` function.":["Do","Have"],"```add``` should":["only"],"```add``` to":["a"],"```add```, but":["I"],"```all (notP":["isLetter"],"```all isSpace":["\"\"```","\"\"```"],"```all isUpper":["```?"],"```allSpace x":["=="],"```allSpace x```":["is"],"```all``` or":["```any```,"],"```anagram``` function":["-"],"```anagramsFor \"antidisestablishmentarianism\"":["[\"bob\"]```"],"```anagramsFor \"bob\"":["[\"bob\"]```","[\"Bob\"]```?","[\"antidisestablishmentarianism\"]```","[\"Bob\"]```","[\"bob\"]```,"],"```anagramsFor input":["="],"```anagramsFor``` ?":["In"],"```anagramsFor``` in":["the"],"```anagramsFor``` using":["```filter```,"],"```anagramsFor```, which":["is"],"```and $":["zipWith"],"```any``` and":["```all```."],"```any```, thus":["removing"],"```anything```? Using":["on"],"```b``` is":["going"],"```bstValue``` doesn't":["yield"],"```cabal``` and":["I"],"```candidates``` from":["both"],"```capitalize``` using":["pattern"],"```catMaybes .":["map"],"```charMap``` formatting":["to"],"```ciphertext``` could":["be"],"```closeAccount``` supposed":["to"],"```concat .":["map"],"```concatMap f```.":["And"],"```concat``` and":["```map```."],"```difference``` in":["pure"],"```difference``` with":["pure"],"```dispatch``` could":["be"],"```do```s to":["the"],"```dropFor``` for":["me."],"```endsWith``` thus":["allowing"],"```endsWith```. In":["this"],"```enumFromTo``` in":["```month```"],"```error```), or":["just"],"```error```ing out":["with"],"```f``` as":["inner"],"```filter (isAnagram":["subject)"],"```filter (not":["."],"```filterString``` can":["be"],"```filterString``` has":["the"],"```filter``` and":["```length```"],"```filter``` calls":["with"],"```filter``` instead":["of"],"```filter``` is":["very"],"```filter```, and":["I've"],"```filter```. You":["can"],"```flip``` function":["to"],"```flip``` to":["```endsWith```."],"```foldl' (\\(isError,":["accum)"],"```foldl'``` from":["```Data.List```"],"```foldl'``` instead":["of"],"```foldl'``` which":["will"],"```foldl``` (in":["line"],"```foldl```/```foldr``` in":["```lettersToPointsList```"],"```foldr (&amp;&amp;)":["True```"],"```foldr``` does":["not"],"```foldr``` is":["not"],"```foldr```, and":["you"],"```fromEnum``` definition":["for"],"```fromEnum``` trick,":["it"],"```fromEnum``` values":["of"],"```fromLIstWith``` but":["i"],"```fromListWith``` applied":["over"],"```fromListWith``` but":["I"],"```fromListWith``` from":["Data.Map.Strict."],"```fromListWith``` is":["way"],"```grade``` function":["makes"],"```grade``` has":["to"],"```group $":["sort"],"```group```? The":["problem"],"```hiding (map)```":["is"],"```hiding```. More":["[here](http://www.haskell.org/haskellwiki/Import_modules_properly)."],"```import qualified":["Data.Map"],"```import``` statement":["and/or"],"```individual```, ```Uniform```":["meant"],"```ing? Hmm,":["I"],"```insertWith' (+)":["`flip`"],"```insertWith``` from":["Map"],"```intercalate \"":["\"```"],"```isAnagramOf``` for":["first"],"```isAnagramProcessed``` can":["be"],"```isAnagram``` slightly":["more"],"```isAnagram```. The":["target"],"```isLower``` and":["```any```"],"```isLower``` from":["```Data.char```,"],"```isQuestion``` and":["```isYelling```?"],"```isShouting``` with":["```isLower```"],"```isSilence``` can":["be"],"```isYelling``` instead":["of"],"```isYelling``` with":["using"],"```k'``` and":["move"],"```last \"\"```":["and"],"```length .":["group```"],"```length``` and":["```filter```"],"```length``` seem":["clearer,"],"```let ...":["in```"],"```let in```":["defined,"],"```let...in``` clause":["in"],"```let```, and":["then"],"```letterValues =":["somePreevaluate"],"```lettersToPointsList``` function.":["Or"],"```lowerWord``` and":["```sortedWord```"],"```map (\\x":["-&gt;"],"```map .":["group"],"```map toLower":["a```"],"```map toLower```":["the"],"```mapM``` in":["the"],"```mapM```, that's":["good"],"```mapSingleValue [noLowerCase,":["atLeastOneUpperCase]```"],"```map``` and":["change"],"```map``` doesn't":["care"],"```map``` is":["more"],"```map```, remember,":["you"],"```map```. Have":["a"],"```map```. In":["this"],"```map```. It":["does"],"```mod```, it's":["slighly"],"```myResponse s```":["does"],"```n``` divisable":["by"],"```name'``` in":["```add```"],"```newStdGen \u003e\u003e=":["newIORef```"],"```newtype School":["...```,"],"```not $":["any"],"```not .":["isAlphaNum```","isAlphaNum```."],"```not.isAlphaNum``` is":["normally"],"```nub``` in":["there,"],"```nub``` is":["O(n^2)?"],"```nub``` on":["it"],"```nub```, it":["will"],"```nucleotideCounts``` as":["per"],"```null s```":["is"],"```null xs```":["check,"],"```null``` hint":["is"],"```number``` function.":["As"],"```parseWords``` if":["you"],"```phrase [a,b]":["="],"```phrase xs":["="],"```prepareInput``` could":["probably"],"```private``` methods":["which"],"```pure``` it":["seems"],"```qualified``` keyword,":["or"],"```question =":["isJust"],"```question``` by":["applying"],"```quotRem``` is":["slightly"],"```rem``` instead":["of"],"```repeat 0```":["instead"],"```repeat``` function).":["Note"],"```replace 'T'":["'U'```"],"```replicate 0```":["to"],"```responseFor``` ```where```":["clause"],"```reverse``` and":["an"],"```sanitizeInput' char```":["may"],"```saysNothing``` like":["you"],"```scoreLetter k":["="],"```sep``` more":["specific"],"```sep```. Doesn't":["quite"],"```seq``` or":["two"],"```shouting =":["uncurry"],"```shouting``` function,":["you"],"```show c```":["in"],"```silence``` function":["by"],"```sing``` is":["concerned,"],"```sort $":["words"],"```sort .":["map"],"```sort``` and":["```group```?"],"```sortedWord``` to":["both"],"```sortedWordsSame``` and":["```wordsDifferent```"],"```sorted``` could":["be"],"```sorted``` function":["but"],"```sorted``` has":["a"],"```sorted``` since":["I'm"],"```sorted```. I'm":["still"],"```sorted```. Not":["using"],"```split``` package,":["and"],"```sqrt (length":["s)```"],"```st``` in":["the"],"```str``` from":["the"],"```str```.... On":["the"],"```substThymidine``` function":["as"],"```sumsOfSquares``` &":["```squareOfSums```?"],"```take``` and":["```drop```."],"```toDecimal``` in":["terms"],"```toEnum (w":["-"],"```toRNA```. And":["add"],"```toRna ::":["String"],"```toUpper k```,":["do"],"```toUracil``` function":["to"],"```translateNucleotide``` on":["```Char```s"],"```tupleIze``` by":["swapping"],"```type School":["="],"```unify```, ```individual```,":["```Uniform```"],"```union``` where":["```++```"],"```unlines``` and":["thanks"],"```unlines``` to":["glue"],"```unlines```. Let":["me"],"```unwords``` and":["```unlines```."],"```unwords``` in":["place"],"```validNucleotide``` in":["point-free"],"```validate``` is":["concerned,"],"```validate``` using":["separate"],"```verse``` using":["both"],"```verse```, but":["not"],"```w``` is":["a"],"```where...``` is":["not"],"```where``` clause.":["Doesn't"],"```where``` or":["as"],"```where``` part":["in"],"```wordCount``` because":["I"],"```wordCount``` on":["long"],"```wordCount``` using":["```fromListWith```"],"```wordCount``` utilising":["```wordsBy```."],"```wordCount``` without":["```sort```"],"```word``` and":["```b```"],"```words .```":["part"],"```wordsBy``` and":["```insertWith```."],"```wordsBy``` but":["decided"],"```wordsBy``` from":["```Data.List.Split```."],"```wordsBy``` in":["my"],"```wordsBy```. Have":["a"],"```wordsBy```. So":["it"],"```wordsDifferent``` For":["small"],"```words``` to":["the"],"```words``` was":["implemented."],"```xs``` on":["both"],"```yelling``` to":["express"],"```zipWith (\\x":["y"],"```zipWith``` with":["the"],"```zip``` can":["be"],"```zip``` in":["place"],"```zs``` might":["not"],"```{-# LANGUAGE":["TupleSection","OverloadedStrings"],"```|| isSpace":["c```"],"``cleanChar`` (or":["whole"],"``f $":["g"],"``f .":["g"],"``liftA2 (\u003e)":["toLower"],"``range`` function.":["Is"],"``sanitized``) implementation":["could"],"``sortBy (compare":["`on`"],"``toUpper```in: ```scoreLetter":["k"],"``| sentence":["=="],"`a $":["b"],"`a &lt;=":["b`"],"`a +":["b"],"`a ++":["b","b`.","b`,","(f","f"],"`a -\u003e":["m","Maybe"],"`a -\u003e`":["is"],"`a .":["b","b"],"`a .^":["b"],"`a /=":["b`"],"`a \u003c\u003e":["b`"],"`a =":["b"],"`a ==":["b`","b`","b`,","\"\"`","b`"],"`a ==Integer`":["so"],"`a ||":["b"],"`a' /=":["b'"],"`a'` in":["the"],"`a'` only":["need"],"`aFun` and":["`import"],"`aFun` then":["your"],"`a` and":["`b`,","`la`","`b`"],"`a` has":["it."],"`a` is":["equivalent","an"],"`a` later":["on,"],"`a` out":["to"],"`a` should":["be"],"`a` value":["that"],"`a`, which":["is"],"`a`. It":["takes"],"`a`. `Char`":["is"],"`a`s were":["counted."],"`acc ++`":["on"],"`acc` is":["`Parser"],"`acc` on":["the"],"`acc`, which":["makes"],"`acct` and":["transform"],"`acct` is":["a"],"`action \u003e\u003e=":["return"],"`actualCounts` use":["`dna`,"],"`add =":["(."],"`add g":["st","=","="],"`addDays daysInGigasecond`,":["and"],"`addDays` to":["add"],"`addGregorianMonthsClip` instead":["of"],"`addLetter` is":["evaluated"],"`addLetter` keep":["adding"],"`addLowerBit` by":["either"],"`addOrIncrement` function.":["Is"],"`addWord` in":["point-free"],"`addZeros` before":["summing"],"`add` a":["little","bit"],"`add` as":["simply"],"`add` cleaner.":["I"],"`add` getMap":["b"],"`add` is":["that","not","now"],"`add` you":["could"],"`add`, `grade`,":["and"],"`add`, it's":["not"],"`add`, which":["makes"],"`add`? Well":["it's"],"`addends` method":["with"],"`addends` seems":["a"],"`addends` that":["passes"],"`addends`, I'll":["have"],"`addends`. `addends`":["seems"],"`adenine ::":["Char`."],"`after`(/`before`) arose":["from"],"`ageOn ::":["Planet"],"`ageOn planet":["s"],"`ageOn` are":["all"],"`all $":["not"],"`all (=='":["')`"],"`all (\\char":["-&gt;"],"`all (not":[".",".",".",".",".","."],"`all []":["="],"`all f":["[]`","[]`","[]","[]","[]","xs`,","[]","m`","\"\"`","[]`","[]`"],"`all f`,":["otherwise"],"`all isAlpha`).":["Regexes"],"`all isAsciiUpper":["v`"],"`all isLetter":["xs`"],"`all isLetter`":["(or"],"`all isSomething`":["is"],"`all isSpace":["[]`","xs`","[x|xs]`.","[]`","s`","\"\"`","x`.","\"\"`.","message`","[]","string`.","string`","::","\"\"","\"\"","\"\"`?"],"`all isSpace(string)`":["should"],"`all isSpace`":["with","captures","is","is","so"],"`all isSpace`.":["`all`"],"`all isUpper":[".","letters"],"`all isUpper`,":["but"],"`all isUpper`.":["Derp."],"`all predicate":["[]`"],"`all undefined":["\"\""],"`all' does":["the"],"`all'` the":["meaning"],"`allAlphasAreCaps` by":["using"],"`allAlphasAreCaps` handles":["that"],"`allCaps` and":["`isQuestion`.","`isQuestion`,"],"`allCaps` but":["`isQuestion`"],"`allCaps` even":["more"],"`allCaps` perhaps?":[":)"],"`allCaps` sounds":["good!"],"`allCaps`. I":["changed"],"`allSpace` and":["`question`"],"`allSpace` conditions":["as"],"`allSpace` could":["make"],"`allSpace`, but":["otherwise"],"`allTrue` might":["make"],"`allUpper` might":["be"],"`allWhiteSpace` an":["so."],"`allWhitespace` is":["not"],"`all` (instead":["of"],"`all` (or":["`any`..)?"],"`all` +":["`isSpace`."],"`all` `isSpace`":["instead"],"`all` and":["an","`any`.","`filter`","it","`any`.","a"],"`all` and/or":["`any`?","`any`","`any`","`any`"],"`all` are":["the","the"],"`all` as":["well.","\"there"],"`all` can":["be"],"`all` clause":["in"],"`all` defined":["that"],"`all` for":["efficiency,"],"`all` from":["Prelude."],"`all` function":["from"],"`all` functions.":["Funny"],"`all` handles":["that","an"],"`all` here.":["You"],"`all` higher-order":["function"],"`all` if":["you"],"`all` in":["place","terms","`isShout`,","your","combination","order","a","the","combination"],"`all` instead":["of","of","of","of","of","of","of"],"`all` is":["haskell","`true`","typically","`(a"],"`all` makes":["sense"],"`all` might":["be"],"`all` or":["`any`?","`any`","`any`","`any`,"],"`all` out":["of"],"`all` rather":["than","than"],"`all` returns":["`True`","`True`"],"`all` seems":["kind"],"`all` since":["you"],"`all` so":["that"],"`all` to":["make","implement","simplify","check","simplify","implement"],"`all` when":["testing"],"`all` with":["a"],"`all`) and":["none"],"`all`, `last`":["from"],"`all`, and":["shouting","`null`"],"`all`, but":["short-circuiting","it"],"`all`, might":["be"],"`all`, preferring":["a"],"`all`, you":["can"],"`all`. However,":["now"],"`all`. The":["obvious"],"`all`. `length":["alpha"],"`all`. this":["is"],"`all`: True,":["though"],"`allergies 253`,":["but"],"`allergies 509`":["the"],"`allergies` a":["little"],"`allergies`, otherwise":["everything"],"`allergies`. You":["can"],"`allergies`? It":["should"],"`alphaChars` and":["`isEmpty`"],"`alter` instead":["of"],"`alter` or":["`insertWith`."],"`alter` to":["`insertWith`,"],"`alter`) you":["will"],"`alter`, since":["it's"],"`anaGramOfX` is":["superfluous,"],"`anaGramOfX`, which":["already"],"`anaGrams word`":["in"],"`anaGrams` is":["called"],"`anaGrams` type":["signature"],"`anaGrams` was":["optimized"],"`anagram =":["\\word"],"`anagram word":["anagram"],"`anagramFilter` a":["bit."],"`anagramOf s`":["is"],"`anagramOfX` and":["`normalizedX`"],"`anagramOf` practically":["be"],"`anagramOf` with":["`on`"],"`anagramOf`: \u003ccode\u003eanagramOf":["="],"`anagram` *is*":["more"],"`anagram` a":["top"],"`anagram` actually":["has"],"`anagram` are":["superfluous"],"`anagram` have":["non-obvious"],"`anagram` such":["that"],"`anagram` top":["level"],"`anagram`, the":["implementation"],"`anagramsFor =":["filter","filter"],"`anagramsFor a":["="],"`anagramsFor word":["=","="],"`anagramsFor` (even":["when"],"`anagramsFor` (line":["7)"],"`anagramsFor` (so-called":["eta"],"`anagramsFor` a":["function"],"`anagramsFor` and":["adding"],"`anagramsFor` as":["`filter"],"`anagramsFor` can":["be"],"`anagramsFor` could":["also","easily"],"`anagramsFor` doesn't":["use"],"`anagramsFor` helps":["much,"],"`anagramsFor` if":["you","you"],"`anagramsFor` in":["such","point-free"],"`anagramsFor` more":["closely"],"`anagramsFor` needs":["to"],"`anagramsFor` since":["`xs`","you"],"`anagramsFor` such":["that"],"`anagramsFor` to":["remove"],"`anagramsFor` too":[":)"],"`anagramsFor` without":["relying","relying"],"`anagramsFor`'s where":["clause."],"`anagramsFor`), it":["returns"],"`anagramsFor`). Also,":["`words`"],"`anagramsFor`. A":["reason"],"`anagramsFor`. Although":["is"],"`anagramsFor`. GHC":["can"],"`anagramsFor`. I":["like"],"`anagramsFor`. One":["way"],"`anagramsFor`. Since":["`anagrams`"],"`anagramsFor`. This":["looks"],"`anagrams` is":["on"],"`analyze` function,":["with"],"`analyze`. Something":["like"],"`and $":["zipWith"],"`and .":["map`","map`","map`","sequence","map`","sequence"],"`and` or":["`or`"],"`and`, possibly":["with"],"`answer` is":["missing"],"`answer` more":["semantic."],"`answer` would":["be"],"`any $":["isAsciiUpper`"],"`any ::":["(a"],"`any [":["x1"],"`any f":["[]"],"`any isAlpha":["text`,"],"`any isAsciiUpper`.":["`$`"],"`any isLetter":["a`.","s`","message`","query`"],"`any isNotSomething`":["when"],"`any isUpper":["text`","s`"],"`anyAndAll =":["(liftA2"],"`anyAndAll` is":["hard"],"`anyChar` and":["then"],"`any` +":["`isLower`.","`isLower`."],"`any` `Char`":["`isLower`"],"`any` and":["`all`","`all`","`all`?","`all`","`isLower`.","`all`,","`all`","`all`","`all`","without","`all`","`all`"],"`any` and/or":["`all`","`all`","`all`?","`all`","`all`","`all`","`all`.","`all`"],"`any` combinator":["with","in"],"`any` combinatorial,":["it"],"`any` in":["my"],"`any` instead":["of","of"],"`any` lower":["letter"],"`any` or":["`all`.","`all`","`all`","`all`","`all`.","`all`","`all`","`all`"],"`any` rather":["than"],"`any` returns":["at"],"`any` to":["satisfy","satisfy","express","express"],"`any` vs":["`all`:"],"`any`) and":["`isLower`."],"`any`, `all`,":["`last`","and"],"`any`, or":["`all`."],"`any`, so":["I'll"],"`any`, which":["would","is"],"`any`. We":["can"],"`any`. With":["the"],"`any`. if":["that"],"`any`. it":["basically"],"`any`/`all` is":["more"],"`any`? I":["find"],"`any`? This":["is"],"`anything`. Also,":["the"],"`ap` for":["Monad)."],"`ap` from":["Control.Monad"],"`ap` on":["(==)"],"`areAnagrams` where":["`word1`"],"`areaCode Nothing`":["returns"],"`areaCode n`":["are"],"`areaCode` and":["`prettyPrint`","are","`prettyPrint`"],"`areaCode` are":["required"],"`areaCode` as":["well"],"`areaCode` is":["required"],"`areaCode`, `number`,":["and"],"`as M`,":["and","latter"],"`as Map`":["is","and"],"`ask` should":["have"],"`asking` definitions.":["I'd"],"`asking`, and":["so"],"`asking`, for":["example."],"`assocs` but":["obviously"],"`assocs` instead":["of"],"`assocs` seems":["to"],"`atLeastOneUpperCase` would":["actually"],"`atomicWriteIORef` does":["not"],"`atomicWriteIORef` instead":["of"],"`atomicWriteIORef` or":["a"],"`atomicWriteIORef`, that":["makes"],"`atomically $":["modifyTheAcc"],"`atomically .":["newT*IO`.","readTVar`"],"`atomically readTVar`":["in"],"`atomically` (or":["more"],"`atomically` (well,":["it"],"`atomically` at":["least"],"`atomically` can":["assume"],"`atomically` is":["that"],"`atomically` means.":["It's"],"`atomically` or":["one"],"`atomically` so":["something"],"`atomically` to":["\"run\""],"`atomically`, basically)":["if"],"`b` are":["lazy,"],"`b`, and":["`f"],"`b`, normalize":["it,"],"`b`, so":["it's"],"`backpermute` is":["another"],"`badNumber` doesn't":["have"],"`bal \u003c-":["fmap","fmap"],"`bar \u003e\u003e=":["return"],"`bar' at":["bar.hs:3:16-18","bar.hs:3:16-18"],"`bar': Patterns":["not","not"],"`baseMap` should":["have"],"`baseNums` around":["as"],"`baseNums` list.":["Separate"],"`bearing` become":["obsolete"],"`bearing`, `turnRight`":["and"],"`biapp =":["join","join","uncurry"],"`biapp f":["(a,b)"],"`bifunctors` isn't":["in"],"`big` because":["it's"],"`binary` function,":["right?"],"`bit` in":["ghci"],"`bogus`, `phoneNum`,":["`rawPhoneNum`,"],"`bots@(b:bs)` and":["then"],"`bottlesOfBeer (n-1)`.":["The"],"`bottlesOfBeer(n-1)` is":["usually"],"`bottles` function.":["Consider"],"`break` seems":["strange."],"`bstLeft ::":["(Maybe"],"`bstLeft`, `bstRight`,":["`bstValue`"],"`bstLeft`, `bstValue`":["are"],"`bstRight`, `bstLeft`,":["`bstValue`"],"`bstRight`, `bstValue`":["can"],"`bstValue` are":["just"],"`bstValue` being":["partial,"],"`bstValue` can":["all"],"`bstValue` return":["a"],"`bstValue` to":["be"],"`buildCounts` or":["some"],"`c :":["`"],"`c ==":["'U'","v`"],"`c/=target` comparison":["should"],"`c:: Char`":["is"],"`c` on":["the"],"`c` parameter":["instead"],"`c` was":["strict,"],"`cabal update;":["cabal"],"`calculating` is":["printed"],"`calculating` would":["be"],"`canAttack` as":["`||`"],"`candidates` is":["the"],"`candidates` it":["takes"],"`canonical =":["sort"],"`canonical` is":["evaluated"],"`canonicalize s1`":["in"],"`canonicalize` function":["solved"],"`canonicalize`, and":["inline"],"`capitalise =":["over"],"`capitalise` using":["`uncurry`"],"`capitalize` --":["`capitalize`"],"`capitalize` are":["superfluous,"],"`capitalize` makes":["me"],"`capitalize` or":["something"],"`capitalize`... or":["maybe"],"`case ()":["of"],"`case ...":["of`"],"`case grade":["g"],"`case sch":["of`."],"`case` expression":["to","instead"],"`case` expression,":["not"],"`case` here":["might"],"`case` instead":["of"],"`case` is":["an"],"`case` on":["`lookup`,"],"`case` rather":["than"],"`case` relative":["to"],"`case` to":["distinguish","implement"],"`case` which":["would"],"`case`, something":["like:"],"`case`. See":["my"],"`case`. Usually":["`let`"],"`catMaybes .":["map`","map`?"],"`catMaybes [fmap":["(,'W')"],"`ceiling .":["sqrt`"],"`ceiling, floor,":["truncate,"],"`ceiling` to":["it."],"`ceiling`. Seems":["like"],"`cfgPerformGC` parameter":["that's"],"`chainl1` for":["Attoparsec,"],"`char :":["\"'\"`"],"`chars` separately":["so"],"`checkAnagram st`":["out"],"`checkDigit` is":["`head"],"`check` has":["one"],"`checksum`. It":["might"],"`chillOutString` sounds":["like"],"`chmod`. Adding":["it"],"`choice` function":["that"],"`choice` to":["do"],"`choice` works":["perfectly."],"`choice`, just":["happened"],"`chop` is":["the"],"`chr` and":["`ord`"],"`chr` are":["way"],"`chr`, and":["would"],"`chunk .":["encipher"],"`chunksOf` could":["be","split"],"`chunksOf` for":["`split5`."],"`chunksOf` from":["Data.List.Split","Data.List.Split","`Data.List.Split`."],"`chunksOf` to":["implement"],"`chunksOf`. The":["encode"],"`chunksOf`. This":["solution"],"`cipher !":["n`"],"`cipher` with":["some"],"`class`, or":["`instance`"],"`classification`, since":["it's"],"`classify` might":["be"],"`classify` over":["and"],"`classify` then":["it"],"`classify` to":["ensure"],"`classify` using":["pattern"],"`cleanNumber` is":["unused,"],"`cleanNumber` step":["is"],"`cleanUpInput=unwords .":["words`"],"`cleanUpInput` could":["be"],"`cleanUpInput` you":["mean"],"`cleanUpInput`, if":["I"],"`cleanUpInput`. I":["thought"],"`cleaned` and":["`replace`"],"`closeAccount` can":["be"],"`closeAccount` to":["avoid"],"`closeAccount` you":["could"],"`closeAccount`. If":["the"],"`collate` does,":["but"],"`cols`) but":["others"],"`column` could":["probably"],"`comp2 =":["(.)"],"`comp2` g":["="],"`comp2` zipWith":["(fromEnum"],"`compare` since":["it"],"`complement` function":["inside"],"`complement` with":["a"],"`comps'` with":["a"],"`comps` or":["`comps'`?"],"`comps`\", do":["you"],"`concat $":["intersperse"],"`concat (map":["paddedVerse"],"`concat (replicate":["dv","dv"],"`concat .":["concat","map","map","map","intersperse"],"`concat [":["[x,"],"`concat [bottles":["n,"],"`concat [f":["n"],"`concat `is":["a"],"`concatMap (\\x":["-\u003e"],"`concatMap (take":["2"],"`concatMap f`":["instead"],"`concatMap` and":["you","`filter`"],"`concatMap` anywhere":["to"],"`concatMap` can":["often"],"`concatMap` if":["you"],"`concatMap` is":["a"],"`concatMap` or":["`foldr"],"`concatMap` though.":["I'm"],"`concatMap` to":["build"],"`concatMap` with":["a"],"`concatMap` you":["can"],"`concatMap`). In":["this"],"`concatMap`, or":["the"],"`concat` for":["this,"],"`concat` on":["a"],"`concat` or":["`unwords`","`intersperse`"],"`concat` to":["build"],"`concat`, `unwords`":["or"],"`concat`ing the":["verses"],"`const Statement`":["at"],"`const` (sort":["of)"],"`const` sure":["would've"],"`containers-0.5.0.0:Data.Map.Base.Map Char":["a`."],"`containers` didn't":["have"],"`convert` on":["its"],"`convert` should":["return"],"`convert` that":["uses"],"`coordinates` and":["`bearing`"],"`coordinates`, `bearing`,":["`turnRight`"],"`count 'U'":["\"UUU\"`","_"],"`count 'U'`":["should"],"`count .":["B.pack`"],"`count =":["length"],"`count `":["especially"],"`count n":["sequence`"],"`count'` can":["be"],"`count'` first":["and"],"`countElem` for":["each"],"`countInternal` is":["just"],"`countOccurences .":["words"],"`countOccurrences .":["wordsBy"],"`countSides (const":["(==))"],"`countUp` works":["is"],"`countWithMap` is":["simply"],"`countWord` and":["`buildCounts`"],"`countWords` a":["little"],"`countWords` function":["is"],"`countWords` is":["just"],"`count` as":["it"],"`count` at":["all"],"`count` does":["not"],"`count` for":["each","looking"],"`count` function":["covers","separate","rather","a","feels"],"`count` function.":["So,"],"`count` happens":["to"],"`count` if":["you"],"`count` in":["this","the","the","Hoogle](http://www.haskell.org/hoogle/?hoogle=count).","the","terms"],"`count` inline":["in"],"`count` inside":["`nucleotideCounts`"],"`count` is":["a","kind","a"],"`count` looks":["good,","fine,"],"`count` much":["cleaner."],"`count` out":["of"],"`count` over":["`foldl'`."],"`count` returns":["a"],"`count` should":["do"],"`count` suffers":["from"],"`count` thing":["is"],"`count` to":["build","implement","avoid"],"`count`, `foldl'`":["should"],"`count`, eg":["`put"],"`count`, so":["I"],"`count`. Consider":["using"],"`count`. I've":["tried"],"`count`? Why":["should"],"`counts` isn't":["ideal,"],"`createInverseMap` is":["a"],"`create` here":["is"],"`create` just":["use"],"`create` method":["is"],"`create` should":["always"],"`curry f`":["when"],"`cycle` and":["the"],"`cycle`, since":["your"],"`d 4":["&amp;&amp;"],"`data BTree":["a"],"`data Len":["="],"`data Len`":["in"],"`data Matrix":["="],"`data MessageKind":["="],"`data N":["a"],"`data Robot":["="],"`data School":["="],"`data Tree":["a"],"`data` type":["since"],"`datum` and":["`next`"],"`day` with":["just"],"`daysInGigasecond =":["10^9"],"`daysInGigasecond` is":["`Integer`"],"`decimalPlaceToRoman` just":["to"],"`decimalValues` argument":["and"],"`decimal` in":["`powP`"],"`decimal` that":["get"],"`deepseq` c":["`deepseq`"],"`deepseq` or":["`$!!`"],"`defaultParts` and":["`phoneNumberPattern`"],"`definition $":["param`"],"`delete w":["."],"`delete` only":["deletes"],"`deriving (Enum,":["Bounded)`"],"`deriving Enum`":["and"],"`detectShout`'s body":["by"],"`diff =":["(toEnum"],"`diff x":["y"],"`diff` could":["be"],"`difference n`":["could"],"`digitToInt` and":["`isHexDigit`"],"`digitToInt` from":["Data.Char"],"`digitToInt` you":["could"],"`digits` are":["actually"],"`digits` here":["are"],"`digits` returns":["the"],"`dispatch` has":["a"],"`dispatch` if":["you"],"`display` function":["is"],"`display`, or":["some"],"`div a":["b"],"`divMod` (same":["semantics"],"`divMod` function":["that"],"`divMod` or":["`quotRem`"],"`divMod` would":["give"],"`divMod`; that's":["a"],"`div` and":["`mod`"],"`divisible 4`":["instead"],"`divisible year":["4`,"],"`divisibleBy` is":["especially"],"`divisibleBy` that":["uses"],"`divisible` is":["defined"],"`dnaFilter` seems":["somewhat"],"`dnaNucleotides` and":["`rnaNucleotides`."],"`dna` argument":["by"],"`dna` at":["the"],"`dna` in":["`count_list`:"],"`dna` is":["on"],"`dna`, not":["`nucleotides`?"],"`do ...":["let`"],"`do ...`":["expression"],"`do expression`":["is"],"`do` here":["doesn't"],"`do` in":["the"],"`do` is":["just","on"],"`do` notation":["and","looks"],"`do` notation—":["no"],"`do` syntax":["is"],"`do` syntax,":["it"],"`do` syntax.":["Also","Consider"],"`do` would":["be"],"`do`). Will":["make"],"`do`, basically),":["but"],"`do`. You'd":["get"],"`downCaseFirst` function":["the"],"`drive r`":["not"],"`drop 5":["s`"],"`drop n":["xs`"],"`dropNullStrings` and":["`removePunctuation`."],"`dropUntil` and":["`none`"],"`dropWhile` and":["`filter`"],"`dropWhile` then":["`break`"],"`dropWhile`, `map`,":["and"],"`drop`s in":["`prettyPrint`,","`prettyPrint`"],"`drop`s will":["do"],"`ds` (for":["digits)"],"`earthYear *`":["and"],"`echo -n`":[":D"],"`echo` does":["not"],"`echo` from":["bash."],"`either (const":["Nothing)"],"`either` and":["`runEitherT`"],"`either` forces":["your"],"`elem ['A'..'Z']`":["and"],"`elem ['a'":[".."],"`elem` \"ACGT\"":["="],"`elem` \"CGA\"),":["but"],"`elem` \"GACTU\"":["="],"`elem` for":["looking"],"`elem` function,":["I"],"`elem` has":["O(N)","linear"],"`elem` have":["O(N)"],"`elem` is":["almost","an"],"`elem` isn't":["a"],"`elem` iterate":["(*10)"],"`elem` or":["to"],"`elem` to":["choose","implement"],"`elem` works":["but"],"`elem`, elem":["has"],"`elem`, you":["can"],"`elem`; just":["use"],"`else n`)":["or"],"`else` clause":["to"],"`else` on":["line"],"`emptyMap` to":["the"],"`emptyMessage`, which":["sounds"],"`empty` and":["`shouting`"],"`empty` function":["looks","for","for"],"`empty` is":["superfluous."],"`encode'` could":["be"],"`encodeChar` looks":["like"],"`encode` should":["have"],"`encoded ==":["\"\"`"],"`end` should":["never"],"`endsWith` already":["returns"],"`endswith` or":["`isSuffixOf`."],"`enumFrom Eggs`":["is","is"],"`enumFrom minBound`":["or","could","is"],"`enumFromThenTo from":["(from"],"`enumFromThenTo i":["(i"],"`enumFromThenTo n":["(n-1)"],"`enumFromThenTo` (or":["`[from,","the"],"`enumFromThenTo` (which":["`[n'..n]`"],"`enumFromThenTo` or":["`[start,"],"`enumFromThenTo` syntax":["for","which"],"`enumFromThenTo` syntax!":["If"],"`enumFromThenTo`, which":["is"],"`enumFromThenTo`? `[from,":["from"],"`enumFromTo to":["from`."],"`enumToFrom to":["from"],"`enumerate ::":["(Bounded,"],"`equivalent` into":["`anagramOf`:"],"`equivalent`, you":["could"],"`equivalent`? Technically,":["an"],"`error \"some":["informative"],"`error ::":["String"],"`error\"invalid\"` even":["though"],"`error` and":["the"],"`error` case":["as"],"`error` in":["`parseNucleotide`","the"],"`error` is":["not","equivalent"],"`error` statement":["so"],"`error` works":["but","everywhere,"],"`errors` package,":["since"],"`eval*` function,":["etc.)."],"`evaluate' $":["f"],"`even` and":["`odd`"],"`evenlyDivisible` as":["\u003cpre\u003eevenlyDivisible"],"`exceptional ||":["leap"],"`exceptional`. With":["three"],"`exercism fetch`":["to"],"`exercism peek`":["if"],"`exercism` to":["fetch"],"`exers:doubleicm` means":["that"],"`exploded` is":["```(`zip`"],"`expression`, i.e.":["an"],"`f $":["x`","g","g","g"],"`f (a,":["b)"],"`f (x":["y)`."],"`f (x)`":["or","instead,","would"],"`f (x)`.":["In"],"`f (x,":["ys)"],"`f .":["g`","g","g","g"],"`f \u003c$\u003e":["action`","b`."],"`f \u003c-":["[(+1),"],"`f =":["g`.","g`.","((length","f,","g`.","g"],"`f a":["==","==","=","b","="],"`f o":["i++v`"],"`f p1`.":["On"],"`f x":["==","=","=","&&","=",":","="],"`f x1:":["\u003cthunk\u003e`"],"`f x`":["instead.","or","not","or","after","or"],"`f'` is":["a","exported,"],"`f'` or":["some"],"`f'` that":["isn't"],"`f( x":[")`,"],"`f(x(y))` in":["Haskell,"],"`f(x)` instead":["of"],"`f(x)` is":["not"],"`f(x)` or":["`f(x(y))`"],"`f(x)` you":["should"],"`f(x)`. `f":["(x)`"],"`f.g` syntax":["to"],"`f` (even":["`undefined`)."],"`f` -":["is"],"`f` and":["`g`"],"`f` for":["function,"],"`f` in":["that"],"`f` is":["a","a"],"`f` or":["`g`,","`number'`"],"`f` should":["be"],"`f` that":["generates","match"],"`f` though,":["something"],"`f` without":["any"],"`f`\". I":["don't"],"`f`, `x`,":["or"],"`f`, in":["this"],"`f`, so":["you"],"`fail` will":["not"],"`fancyWords` to":["contain"],"`filter ('elem'":["['0'..'9'])`"],"`filter ((==)":["True)"],"`filter ((fromEnum":[".)"],"`filter (==":["True)`"],"`filter (anagram":["(prepare"],"`filter (isAllergicTo":["s)"],"`filter (isAnagram":["subject)"],"`filter (liftA2":["(&&)"],"`filter (not":[".",".",".",".","."],"`filter (on":["isAnagramOf"],"`filter .":["on"],"`filter compareAgainst":[".","."],"`filter f":["."],"`filter id`":["are","for","so","is"],"`filter id`.":["Might"],"`filter isAlpha":["greeting`","str`","m`","x","st`"],"`filter isAlphaNum`":["you","and"],"`filter isDigit`":["to","are"],"`filter isLetter":["s`."],"`filter pred1":["."],"`filterFunction` in":["such"],"`filterString` was":["not"],"`filterWord word":[":"],"`filter` (in":["combination"],"`filter` and":["`map`?","`map`,","`isAnagram`","a","`isAnagram`","then"],"`filter` but":["I"],"`filter` by":["using"],"`filter` depends":["on"],"`filter` do":["not"],"`filter` expression,":["`normalize"],"`filter` in":["O(n)"],"`filter` instead":["of","of"],"`filter` is":["already"],"`filter` might":["be"],"`filter` operations":["then"],"`filter` or":["`null`?","something"],"`filter` over":["the"],"`filter` pretty":["quickly"],"`filter` rather":["than"],"`filter` the":["`dna`"],"`filter` to":["be"],"`filter` will":["be"],"`filter` with":["a"],"`filter` would":["look","be"],"`filter`) and":["you"],"`filter`, I":["find"],"`filter`, `length`,":["`splitPlaces`"],"`filter`, and":["your's","`(==)`."],"`filter`, but":["it"],"`filter`, resulting":["in"],"`filter`, so":["the"],"`filter`, which":["are"],"`filter`. Specifically,":["`words"],"`filter`. Think":["about"],"`filter`... though":["I"],"`filter`? Or":["is"],"`filter`? You":["may"],"`findIndex` might":["be"],"`findResponse`: it":["successively"],"`findWithDefault d":["k"],"`findWithDefault` and":["to"],"`findWithDefault` existed,":["so"],"`findWithDefault` for":["`grade`"],"`findWithDefault` function":["for","that"],"`findWithDefault` instead":["of"],"`findWithDefault` just":["moves"],"`findWithDefault` would":["make","make","make"],"`findWithDefault`, check":["out"],"`findWithDefault`. Or":["even"],"`find`. Once":["you've"],"`fingerprint target`":["so"],"`first (map":["toLower)`"],"`firstCouplet` and":["`secondCouplet`"],"`firstDay` stuff":["then."],"`firstInMonth` simplified":["by"],"`first` and":["`ret`,"],"`first` from":["Control.Arrow.","Control.Arrow,","`Control.Arrow`."],"`first` is":["`(a"],"`flatten` function":["is"],"`flatten` in":["O(1)"],"`flip (,)":["1`","n","1`","1`"],"`flip (M.findWithDefault":["0)"],"`flip (…)`":["either,"],"`flip const`":["instead"],"`flip elem`":["seems","would","(for"],"`flip elem`!":["You"],"`flip f":["x`"],"`flip insertWord`":["in"],"`flip maybe":["id`"],"`flip zip":["(repeat","(repeat","(repeat","(repeat"],"`flip` but":["that's"],"`flip` by":["using"],"`flip` combinator":["makes"],"`flip` excessively":["to"],"`flip` in":["a"],"`flip` is":["a"],"`flip` or":["an"],"`floor $":["head"],"`fmap $":["sortBy"],"`fmap (amt":["+)","+)`."],"`fmap (map":["toLower)`"],"`fmap (return":["'M')"],"`fmap BankAccount":["(newMVar"],"`fmap Deque":["(newTVarIO"],"`fmap f":["Nothing","(Just","(a,","(Just","Nothing"],"`fmap not":["even`."],"`fmap sort`":["is","is","since","due"],"`fmap` (*2)":["$"],"`fmap` (+2)":["`fmap`"],"`fmap` (or":["``","the","`\u003c$\u003e`)"],"`fmap` adding":["something"],"`fmap` and":["`liftM`"],"`fmap` are":["all"],"`fmap` but":["it's"],"`fmap` is":["very"],"`fmap` maps":["a"],"`fmap` on":["Monad","a"],"`fmap` or":["the"],"`fmap` since":["you"],"`fmap` works":["as"],"`fmap`, `show`,":["`++`,"],"`fmap`, which":["given"],"`fmap`ing over":["2-tuples"],"`fmtNumber`; you've":["reminded"],"`fold'` gives":["you"],"`fold'` to":["prevent"],"`foldListWith` just":["ends"],"`foldM` isn't":["strict"],"`foldM` needs":["to"],"`foldM`, then":["in"],"`foldM`. I":["was"],"`foldMap (foldMap":["f)`"],"`foldMap` (basically":["the"],"`foldWithIndex` from":["the"],"`fold` families":["better"],"`fold` there":["is"],"`fold` to":["`fold'`"],"`fold` wasn't":["making"],"`fold`. I":["had"],"`foldl (++)":["\"\"`"],"`foldl (\\acc":["x"],"`foldl' ((force":[".)"],"`foldl' (+)":["0`,","0`"],"`foldl' (.)":["id"],"`foldl' (\\map":["key"],"`foldl' (\\x":["y"],"`foldl' (flip":["f)"],"`foldl' countInMap":["M.empty"],"`foldl'` (which":["is"],"`foldl'` (you":["have"],"`foldl'` actually":["doesn't"],"`foldl'` and":["`insertWith`","it","`Map`","`insertWith`","`insertWith`","the","`rnf`.","`insertWith`","simplify","`insertWith`."],"`foldl'` based":["version","solution"],"`foldl'` before":["-"],"`foldl'` but":["I","it's"],"`foldl'` can":["only"],"`foldl'` combined":["with"],"`foldl'` directly":["or"],"`foldl'` does,":["but"],"`foldl'` doesn't":["fully","have","give"],"`foldl'` for":["you).","a","building","this"],"`foldl'` from":["Data.List","Data.List,","Data.List.","Data.List","Data.List","Data.List","Data.List","Data.List","Data.List","Data.List,","Data.List","Data.List","Data.List.","Data.List","Data.List,","Data.List.","Data.List.","Data.List.","Data.List,","Data.List.","`Data.List`","Data.List.","Data.List","Data.List","Data.List,","`Data.List`","Data.List","Data.List."],"`foldl'` here.":["I"],"`foldl'` if":["you"],"`foldl'` in":["Data.List","this","there","that","**line","the"],"`foldl'` instead":["of","of","of","of","of","of"],"`foldl'` instead.":["It","Worst","Also"],"`foldl'` is":["O(n)","almost","unused","MUCH","not.","always","not","the","a","more","perfectly","pretty","doing","not","better"],"`foldl'` isn't":["actually"],"`foldl'` not":["in"],"`foldl'` only":["ensures","guarantees"],"`foldl'` or":["`fromListWith`","`fromList`","better","something","`fromListWith`.","`fromListWith`.","`unfoldr`.","`unfoldr`","`fromListWith`","simply"],"`foldl'` over":["`insertWith`,","the"],"`foldl'` should":["also","be","be","be"],"`foldl'` so":["that","it","the"],"`foldl'` takes":["care"],"`foldl'` this":["will"],"`foldl'` to":["build"],"`foldl'` uses":["strict"],"`foldl'` version.":["see"],"`foldl'` was":["left"],"`foldl'` which":["would"],"`foldl'` with":["`insertWith`."],"`foldl'` without":["any"],"`foldl'` would":["work"],"`foldl'`'s accumulator":["to"],"`foldl'`), but":["it's"],"`foldl'`, `*`":["and"],"`foldl'`, although":["in"],"`foldl'`, but":["I","`fromListWith`"],"`foldl'`, still":["not"],"`foldl'`, which":["will"],"`foldl'`. Even":["better"],"`foldl'`. Nice":["work."],"`foldl'`. See":["http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'"],"`foldl'`. Strict":["version"],"`foldl'`. You":["can","won't"],"`foldl1' max`":["is"],"`foldlStrict` in":["Data.Map.Base","this"],"`foldlStrict` under":["the"],"`foldl` (`foldl'`":["from"],"`foldl` (or":["preferably"],"`foldl` and":["`wordsBy`.","`foldr`","lazy"],"`foldl` approach":["would"],"`foldl` as":["the"],"`foldl` but":["will"],"`foldl` does":["something"],"`foldl` evaluate":["the"],"`foldl` evaluates":["the"],"`foldl` exists":["in","at"],"`foldl` in":["Haskell","`count`"],"`foldl` inside":["of"],"`foldl` instead":["of"],"`foldl` is":["almost","basically","basically","bad","basically","pretty","ever","almost","almost","inappropriate.","almost","going","basically","basically","almost","inefficient","basically","almost","generally","accumulator-lazy.","almost","generally","almost","almost","almost"],"`foldl` isn't":["strict","strict"],"`foldl` overflows":["the"],"`foldl` problem":["you"],"`foldl` since":["`foldl`"],"`foldl` to":["`foldl'`"],"`foldl` trap":[":-)"],"`foldl` unless":["you"],"`foldl` using":["`insertWith`."],"`foldl` which":["has"],"`foldl` with":["`insertWith`","a"],"`foldl` would":["be"],"`foldl`\". Generally":["speaking"],"`foldl`, I":["was"],"`foldl`, `+`,":["`*`."],"`foldl`, `fromList`,":["or"],"`foldl`, although":["with"],"`foldl`, always":["use","use","use"],"`foldl`, as":["the"],"`foldl`, because":["`foldl`"],"`foldl`, but":["just"],"`foldl`, don't":["do"],"`foldl`. Better":["yet,"],"`foldl`. Check":["out"],"`foldl`. Maps":["are"],"`foldl`. Since":["you're"],"`foldl`. You":["might"],"`foldl`: it":["doesn't"],"`foldlstrict` with":["`insertWith`,"],"`foldr ((++)":["."],"`foldr ((:)":["."],"`foldr (\\x":["acc"],"`foldr (||)":["False`"],"`foldr incrWord":["M.empty`."],"`foldr1 (&&)":["…`"],"`foldr1 (++)":["."],"`foldr1`. I":["think"],"`foldr` and":["that's","a"],"`foldr` are":["in"],"`foldr` basically":["just"],"`foldr` because":["the","it"],"`foldr` do":["not"],"`foldr` forces":["all"],"`foldr` has":["the"],"`foldr` here.":["I"],"`foldr` instead":["of","of","of"],"`foldr` is":["okay,","the","the","the","the","the","the","always","the","a","computed","a","the","the","wrong,","constructed","the","basically","the","the","totally","the","the","the","wrong","also","the","the","the","only","the","only"],"`foldr` isn't":["the","the"],"`foldr` problem":["but"],"`foldr` rather":["than"],"`foldr` since":["you"],"`foldr` space":["leak","leak,"],"`foldr` to":["build","construct","build","build","build"],"`foldr` version":["and","some"],"`foldr` was":["equivalent."],"`foldr` which":["is"],"`foldr` would":["actually"],"`foldr`'s function,":["i.e."],"`foldr`) is":["the","the"],"`foldr`, as":["it's"],"`foldr`, it's":["a"],"`foldr`---it's much":["clearer"],"`foldr`. I":["think"],"`foldr`. It's":["generally"],"`foldr`? (to":["me"],"`foo $":["bar"],"`foo (bar":["(baz))`"],"`foo +":["(bar.baz())`","bar.baz()`."],"`foo ++":["(f","f"],"`foo \u003c$\u003e":["bar`"],"`foo \u003c|\u003e":["bar`"],"`foo =":["(…)`.","x`"],"`foo a":["="],"`foo |":["x"],"`foo(bar(baz))` is":["the"],"`force` is":["applied"],"`force` on":["the"],"`fours` and":["`nines`?"],"`freqDist`. Very":["clever."],"`from..to` case":["at"],"`fromAscListWith` after":["`sort`"],"`fromBool x":["="],"`fromBool` it":["seems"],"`fromChar` (as":["an"],"`fromDay` should":["have"],"`fromEnum '0'`":["instead"],"`fromEnum '0'`.":["That's"],"`fromEnum (a":["/=","/="],"`fromEnum (b":["=="],"`fromEnum (c":["=="],"`fromEnum (x":["/="],"`fromEnum .":["('1'==)`."],"`fromEnum ::":["(Enum"],"`fromEnum False":["=="],"`fromEnum w`":["you"],"`fromEnum` (by":["tab-completion"],"`fromEnum` (which":["are"],"`fromEnum` /":["`toEnum`,","`toEnum`"],"`fromEnum` and":["`toEnum`","`toEnum`","`sum`","`toEnum`."],"`fromEnum` at":["all."],"`fromEnum` does":["the"],"`fromEnum` for":["Bool"],"`fromEnum` instance":["for"],"`fromEnum` instead":["of","of"],"`fromEnum` is":["really"],"`fromEnum` to":["go","convert","convert"],"`fromEnum` will":["return","return"],"`fromEnum` won't":["be"],"`fromEnum`, `(/=)`":["and"],"`fromEnum`, `maxBound`":["which"],"`fromEnum`, `toEnum`).":["In"],"`fromEnum`, `toEnum`,":["`minBound`,"],"`fromEnum`, which":["returns"],"`fromGregorian y":["m","m`"],"`fromIntegral r`":["are"],"`fromIntegral` should":["be"],"`fromJust $":["M.lookup`."],"`fromJust` instead.":["Although"],"`fromJust` versions":["-"],"`fromJust` wasn't":["relevant."],"`fromJust` when":["possible."],"`fromJust`. Technically":["in"],"`fromLIstWith` implementation":["has"],"`fromList [(\"foo\",":["1),"],"`fromList []`":["to"],"`fromListWith (+)":["…`","$","(zip"],"`fromListWith (+)`":["solution","from","isn't"],"`fromListWith (\\a":["b"],"`fromListWith .":["map`"],"`fromListWith f":["(as"],"`fromListWith` (as":["@wilfrid"],"`fromListWith` (or":["`foldl'`","`insertWith`","*any"],"`fromListWith` (which":["I"],"`fromListWith` -":["I","whoops!"],"`fromListWith` [uses":["a"],"`fromListWith` and":["`wordsBy`,","it","not","ensure","not","Data.List.Split's","you"],"`fromListWith` and/or":["`insertWith`."],"`fromListWith` are":["the","faster"],"`fromListWith` because":["it"],"`fromListWith` but":["it","this"],"`fromListWith` can":["help"],"`fromListWith` combines":["values"],"`fromListWith` could":["have","spare"],"`fromListWith` for":["some","fun/experimentation.","this"],"`fromListWith` from":["Data.Map.Strict","Data.Map","Data.Map.Strict","Data.Map.Strict","Data.Map","Data.Map.Strict"],"`fromListWith` function":["that"],"`fromListWith` function.":["Under","You"],"`fromListWith` functions":["in"],"`fromListWith` has":["different"],"`fromListWith` implementation":["because","(as"],"`fromListWith` in":["Data.Map","Data.Map","particular","the"],"`fromListWith` instead":["of","of","of","of"],"`fromListWith` instead,":["which"],"`fromListWith` is":["less","a","a","better","unnecessary","very","the","another","the"],"`fromListWith` isn't":["value"],"`fromListWith` looks":["pretty"],"`fromListWith` may":["make"],"`fromListWith` might":["be"],"`fromListWith` on":["a"],"`fromListWith` or":["`insertWith`)","a","`insertWith`","a","pretty","`insertWith`."],"`fromListWith` proven":["or"],"`fromListWith` rather":["than"],"`fromListWith` should":["be"],"`fromListWith` since":["the"],"`fromListWith` strict":["as"],"`fromListWith` that":["encapsulates"],"`fromListWith` to":["create","build","construct"],"`fromListWith` uses":["a","a","an","`foldl'`","the"],"`fromListWith` using":["`unionWith`"],"`fromListWith` was":["very"],"`fromListWith` which":["is","is","is","is","is","is","uses","converts","internally","does","will"],"`fromListWith` with":["the"],"`fromListWith` without":["either","a","`unionWith`."],"`fromListWith` works":["well."],"`fromListWith` would":["require","likely","allow"],"`fromListWith`, I":["think"],"`fromListWith`, and":["that"],"`fromListWith`, but":["failed","I","I","unfortunately","I'm","the"],"`fromListWith`, or":["alternately"],"`fromListWith`, using":["`count`"],"`fromListWith`, which":["would","specifically","is"],"`fromListWith`, you":["can","would"],"`fromListWith`. All":["of"],"`fromListWith`. Consider":["that"],"`fromListWith`. I":["like"],"`fromListWith`. Parallel":["and"],"`fromListWith`. The":["find/insert","second"],"`fromListWith`. Using":["that,"],"`fromListWith`. You":["shouldn't"],"`fromListWith`? Hint:":["`count`"],"`fromListWith`? It":["might"],"`fromListWith`? The":["usage"],"`fromList` and":["not"],"`fromList` are":["unused"],"`fromList` being":["partial"],"`fromList` if":["you"],"`fromList` in":["two"],"`fromList` or":["`fromListWith`.","`fromListWith`.","`fromListWith`"],"`fromList` that":["many"],"`fromList` to":["be"],"`fromList` would":["do"],"`fromList`, `toList`":["and"],"`fromList`, or":["`insertWith`."],"`fromList`, since":["there's"],"`fromList`. I":["couldn't"],"`fromList`. Several":["functions"],"`fromMaybe 0":["."],"`fromMaybe 0`":["(same"],"`fromMaybe []`":["is"],"`fromMaybe bogus":["."],"`fromMaybe f`":[":)"],"`fromMaybe` and":["`fromJust`"],"`fromMaybe` is":["the"],"`fromMaybe` or":["`(.:)`)."],"`fromMaybe` to":["save"],"`fromMaybe`), I'll":["not"],"`fromSchool` (or":["maybe"],"`fromString` if":["you"],"`from` and":["`to`)."],"`fs` a":["little"],"`fst` and":["`snd`","`snd`","`snd`?","`snd`!"],"`fst` is":["the"],"`fst`. You":["can"],"`func` get":["a"],"`function'` but":["this"],"`fw` does":["indeed"],"`g (f":["x)"],"`g x`":["is","can"],"`g` argument":["in"],"`g` as":["a","simply"],"`g` to":["input"],"`g` using":["`maybe`?"],"`g`, which":["would"],"`garden ::":["[String]","[String]"],"`garden` could":["be"],"`garden` more":["elegant."],"`garden` with":["just"],"`genName` without":["using"],"`generateName` as":["well"],"`generateName` better":["but"],"`generateName` for":["every"],"`generateName` itself":["could"],"`generateRandom` simplier":["you"],"`generateResponse`. Also,":["try"],"`generate`, I":["haven't"],"`genericSlices` with":["just"],"`getBalance acc":["\u003e\u003e=","\u003e\u003e="],"`getBalance` I'd":["expect"],"`getBalance` could":["be"],"`getBalance` etc.":["should"],"`getBalance` in":["the"],"`getBalance` into":["the"],"`getDigits`? You":["won't"],"`getMap`, you":["can"],"`getName` without":["even"],"`getStdGen` instead":["of"],"`getWeekDay` simpler":["with"],"`getWords` can":["be","be"],"`get` would":["be"],"`gg=G` looked":["stupid)"],"`ghc --make":["-O2`"],"`ghc -O":["-c"],"`ghc -Wall`":["and"],"`ghc-pkg list":["|"],"`ghci file.hs`":["or"],"`ghci` as":["well:"],"`ghci` before":["you've"],"`go !c":["[]"],"`go (b:bs)":["!n`"],"`go 3":["c"],"`go []":["v`"],"`go x":["=","[]","acc"],"`go` a":["standard"],"`go` as":["a"],"`go` by":["a"],"`go` function":["that"],"`go` in":["this"],"`go` is":["that","often","a"],"`go` looks":["clean"],"`go` rather":["than"],"`go`, but":["there's"],"`grade` a":["bit","bit"],"`grade` and":["`sorted`"],"`grade` are":["now"],"`grade` could":["be"],"`grade` in":["the"],"`grade` is":["`O(log"],"`grade` much":["shorter."],"`grade` shadows":["the"],"`grade` to":["stop"],"`grade` would":["be"],"`grade`, and":["`sorted`"],"`groupBy`, `group`,":["`sort`,"],"`groupBy`. Looks":["great."],"`group` and":["`sort`.","`sort`"],"`group` is":["interesting!"],"`group` or":["`sort`","`sort`?"],"`group`, `sort`,":["or","`head`,","or"],"`groupsOf`. You":["could"],"`guard f":["x"],"`guard. not":["$"],"`guard` example":["was"],"`guard` from":["that","Control.Monad,"],"`guard` function":["from"],"`guard` is":["a","just"],"`guard` nearly":["the"],"`h8`) for":["chess"],"`hammingDistance =":["(length","(sum","((length"],"`hammingDistance'` requires":["two"],"`hammingDistance` because":["it"],"`hammingDistance` from":["DNA,"],"`hammingDistance` function":["but"],"`hammingDistance` in":["points-free"],"`hasLetter` looks":["like"],"`hasLetter`. The":["benefit"],"`hash` as":["a"],"`hash` is":["a"],"`haskell replace`,":["and"],"`hd` doesn't":["really"],"`head \"?\"`":["is"],"`head &&&":["length`"],"`head (map":["f","id"],"`head (reverse":["s)`"],"`head .":["reverse`.","reverse`","sort`","drop","reverse","toList`"],"`head digits`":["in"],"`head query":["=="],"`head.toReversedList` makes":["perfect"],"`head` and":["`tail`","`tail`","`tail`"],"`head` instead":["of"],"`head`, and":["`tail`."],"`head`, or":["`length`."],"`helper` you":["could"],"`hexCharToInt` to":["give"],"`hlint` before":["submitting,"],"`hlint` in":["this"],"`hlint` over":["your"],"`howMany -1`":["recursively"],"`howMany n`.":["Also"],"`howMany(n)` is":["the"],"`howMany` could":["be"],"`i` and":["`j`"],"`i` as":["a"],"`id` and":["thus"],"`id` for":["Bool.","that"],"`id` function":["defined"],"`id` in":["`isAllCaps`"],"`if (c":["=="],"`if (isSpace":["c)`"],"`if a":["=="],"`if a/=":["b"],"`if f":["x"],"`if isSpace":["c`,"],"`if stNum":["\u003e"],"`if then":["else`"],"`if x":["then","==","/="],"`ifNull d":["l"],"`ifNull raindrops":["$"],"`if` expressions":["formatted"],"`if` expressions.":["It's"],"`if` here,":["since"],"`if` to":["convert"],"`if…then…else` isn't":["a"],"`ignore non":["allergen"],"`illogical` is":["much"],"`import A`":["for"],"`import B":["hiding"],"`import B`":["for"],"`import Data.Char":["(toUpper)`.","(toUpper,","(toLower)`","(toUpper,","(isSpace,","(isAlphaNum,"],"`import Data.Char(isSpace,":["toUpper)`."],"`import Data.Function":["(on)`,"],"`import Data.Function`":["try"],"`import Data.List":["as","(foldl'`)`."],"`import Data.Map":["(Map,","(Map,","(Map)`","(Map)`","(Map)`"],"`import Data.Map.Strict":["(Map,","(Map)`"],"`import Data.Map.Strict`":["then","since"],"`import Data.Map.Strict`.":["I"],"`import Data.Map`":["to"],"`import Data.Time.Calendar.WeekDate":["(toWeekDate)`."],"`import Debug.Trace`":["in"],"`import Prelude":["hiding","hiding"],"`import System.Random":["(randomRIO)`)."],"`import qualified":["Data.Char","Data.Map","Data.List","Data.Map","Data.Map.Strict","Data.Map","Data.List"],"`inSeconds *":["earthYear"],"`inWeekOffset` relative":["to"],"`incrementBalance =":["(."],"`incrementBalance acct":["amt"],"`incrementBalance ba":["i"],"`incrementBalance` but":["rarely"],"`incrementBalance` is":["to"],"`incrementBalance` returns":["the"],"`incrementBalance` should":["be"],"`incrementBalance` so":["it"],"`incrementBalance` to":["be"],"`incrementBalance` with":["no"],"`incrementBalance` without":["using"],"`incrementBalance` you":["want"],"`incrementBalance`. What":["is"],"`infixl` declaration":["too)"],"`initList` function":["might"],"`initList` would":["be"],"`input` directly":["from"],"`insert k1":["v1","v1","v1","v1"],"`insert'` are":["superfluous"],"`insert'` to":["`fromList`,"],"`insertCount` function":["is"],"`insertCount` isn't":["so"],"`insertIncrement` there":["is"],"`insertKey`. It":["looks"],"`insertNucleotide` must":["evaluate"],"`insertWith (+)":["word"],"`insertWith (+)`":["you","will","(or","does"],"`insertWith (+)`.":["(I"],"`insertWith'` here":["instead"],"`insertWith'` looks":["like"],"`insertWith'` that":["is","would"],"`insertWith'` which":["avoids"],"`insertWith'` will":["force"],"`insertWith'`. I":["have"],"`insertWith'`. Will":["it"],"`insertWithKey`'s result":["will"],"`insertWithKey`, you":["could"],"`insertWith` (but":["really,"],"`insertWith` (just":["import"],"`insertWith` (which":["does"],"`insertWith` because":["it"],"`insertWith` directly":["which"],"`insertWith` does":["both","have"],"`insertWith` everything":["from"],"`insertWith` for":["this"],"`insertWith` from":["Data.Map.Strict"],"`insertWith` function":["used,"],"`insertWith` has":["a"],"`insertWith` here.":["There's"],"`insertWith` if":["you"],"`insertWith` in":["`Data.Map`","`Data.Map`"],"`insertWith` inside":["the"],"`insertWith` is":["O(log","lazy.","definitely","fine,","much","one"],"`insertWith` looks":["more"],"`insertWith` might":["make"],"`insertWith` or":["`fromListWith`.","better","`fromListWith`","`fromListWith`","`fromListWith`","`fromListWith`."],"`insertWith` performs":["both"],"`insertWith` technique":["is"],"`insertWith` to":["accomplish","do","its"],"`insertWith` will":["be"],"`insertWith` you":["are"],"`insertWith`) is":["O(log"],"`insertWith`) there":["are"],"`insertWith`, `fromListWith`":["or"],"`insertWith`, but":["`insertWith`","that's"],"`insertWith`, the":["implementation"],"`insertWith`, which":["would","simplifies"],"`insertWith`, you":["will"],"`insertWith`. I":["also"],"`insertWith`. In":["this"],"`insertWith`. It":["does"],"`insertWith`. It's":["very"],"`insertWith`. Note":["that"],"`insertWith`. That":["said,"],"`insertWith`. The":["best"],"`insertWith`. `M.insertWith":["(+)"],"`insertWord w":["="],"`insertWord` because":["the"],"`insertWord` has":["O(n)"],"`insertWord` is":["a"],"`insert` each":["element."],"`insert` from":["`Data.List`?"],"`insert` function":["that"],"`insert` function,":["but"],"`insert` in":["three","`add`"],"`insert` needs":["to"],"`insert`. It'll":["all"],"`insert`: ![equation](http://latex.codecogs.com/gif.latex?%5CSigma_{k=1}^n{O(log%5C,k)})":["??"],"`insert`? `insertWith`":["might"],"`instance Read":["(Base"],"`instance` declarations":["but"],"`instersectBy` and":["`permutations`"],"`instructions` then":["you"],"`intercalate \"":["\"`","\"`","\"`","\"`","\"`.","\"`...","\"`","\"`"],"`intercalate \"\\n\"":["xs","ls)","xs","x"],"`intercalate` and":["`chunksOf`"],"`intercalate` that":["you"],"`intercalate` to":["start"],"`intersperse \"\\n\"`.":["This"],"`intersperse '":["'`"],"`intersperse` try":["using"],"`intersperse`) or":["by"],"`invalidNucleotideError` :P":["That"],"`invalidNucleotideError`... I":["would"],"`invalidNucleotide`, `baseMap`":["should"],"`invalid` check":["can"],"`invalid` should":["have"],"`invalid` test":["was"],"`is a":["part"],"`is*` predicates":["closer"],"`isAggressive` because":["`all`"],"`isAllCaps =":["not"],"`isAllCaps` in":["the"],"`isAllCaps` is":["a"],"`isAllCaps` something":["like"],"`isAllCaps`, but":["I'm"],"`isAllergicTo` in":["your","the"],"`isAllergicTo`. Bounded":["was"],"`isAllowed`; why":["not"],"`isAlpha x`.":["Perhaps"],"`isAlphaNum c":["||"],"`isAlphaNum c`":["(modulo"],"`isAlphaNum x`":["is"],"`isAlphaNum` as":["`toLower"],"`isAlphaNum` from":["`Data,Char`."],"`isAlphaNum` in":["`Data.Char`","`Data.Char`."],"`isAlphaNum`, which":["covers"],"`isAlpha` and":["`isDigit`"],"`isAlpha` check.":["Also,"],"`isAlpha` first,":["I"],"`isAlpha`) instead":["of"],"`isAlpha`. It":["will"],"`isAnagram s`":["is"],"`isAnagramOf` are":["both"],"`isAnagramOf` doesn't":["need"],"`isAnagramOf` in":["such"],"`isAnagramOf` into":["pointfree"],"`isAnagramOf` looks":["kind"],"`isAnagramOf` slightly":["so"],"`isAnagramOf` such":["that"],"`isAnagramOf` used":["a"],"`isAnagramOf` with":["guards"],"`isAnagramOf` would":["be"],"`isAnagramOf`, to":["make"],"`isAnagramOf`. Consider":["an"],"`isAnagram` actually":["uses"],"`isAnagram` and":["`isAnagramOf`"],"`isAnagram` are":["also"],"`isAnagram` function":["would"],"`isAnagram` is":["not"],"`isAnagram` or":["`isAnagramOf``?"],"`isAnagram` since":["`(g"],"`isAnagram` then":["you'd"],"`isAnagram` to":["normalize"],"`isAnagram` up":["into"],"`isAnagram` when":["implementing"],"`isAnagram` with":["a"],"`isAnagram`'s type":["signature"],"`isAnagram`, it":["might"],"`isAnagram`. If":["I'd"],"`isAnagram`. Sets":["are"],"`isAsciiLower` or":["doing"],"`isAsciiLower` treat":["non-alphabetic"],"`isAsciiLower`, `isDigit`,":["etc."],"`isAsciiUpper` and":["`isAsciiLower`"],"`isAsciiUpper` to":["`isUpper`."],"`isAsking` and":["`isSilent`"],"`isAsking` may":["be"],"`isAsking` would":["be"],"`isBlank, isAllUpper,":["isQuestion`"],"`isBlank` in":["terms"],"`isBlank` is":["not"],"`isBlank` matches":["empty"],"`isCapitalIfLetter` would":["be"],"`isCaps` looks":["exactly"],"`isDelimiter` would":["be"],"`isDelimiter`? Perhaps":["you"],"`isDiag` might":["miss"],"`isDigit x":["||"],"`isDigit` from":["Data.Char)."],"`isDigit` instead":["of"],"`isDigit` might":["be"],"`isDigit` though,":["thanks!"],"`isDigit` using":["just"],"`isDigit` with":["`isAlphaNum`,"],"`isDigit`, etc.":["that"],"`isDivBy` without":["yet"],"`isEmpty =":["all","\\string","all"],"`isEmpty string":["="],"`isEmpty` and":["`isAllCaps`","`isShouting`."],"`isEmpty` could":["be"],"`isEmpty` is":["a","a"],"`isEmpty` one":["of"],"`isEmpty` simpler":["because"],"`isEmpty` test":["is"],"`isEmpty` which":["would"],"`isEmpty` would":["be","look"],"`isEmpty`: `isEmpty":["="],"`isEquilateral` and":["friends,"],"`isEven` and":["`isOdd`."],"`isExclamation` doesn't":["seem"],"`isFoo` is":["usually"],"`isHexDigit` by":["having"],"`isIgnoring =":["null`"],"`isIgnoring voice":["="],"`isIgnoring` could":["be"],"`isIgnoring` doesn't":["really"],"`isIgnoring` here,":["the"],"`isInfinite`, etc.":["but"],"`isJibberish` for":["the"],"`isJibbersish` is":["misspelled","not"],"`isJibbersish` was":["dead"],"`isLeapYear` makes":["perfect"],"`isLetter .-&gt;":["isUpper`"],"`isLetter a":["&&","&&"],"`isLetter` +":["`isNumber`?"],"`isLetter` and":["`isNumber`."],"`isLetter` or":["rename"],"`isLetter` which":["check"],"`isLong` or":["something"],"`isLower` and":["`isUpper`","`isUpper`"],"`isLower` cleaned":["things"],"`isLower` from":["`Data.Char`."],"`isLower` since":["what"],"`isLower` to":["simplify"],"`isLower` works":["just"],"`isLower`, it's":["much"],"`isLower`. Otherwise":["looks"],"`isNaN`, `isInfinite`,":["etc."],"`isNil ::":["(Eq"],"`isNil =":["(==nil)`"],"`isNil` function":["is"],"`isNil` is":["incorrect,"],"`isNotSomething` span":["the"],"`isNothing` using":["`all`"],"`isNucleotide` in":["point-free"],"`isNucleotide` so":["many"],"`isNucleotide` would":["be"],"`isNumber` and":["a"],"`isNumber` is":["a"],"`isNumber` since":["`isNumber`"],"`isNumber` to":["`isDigit`"],"`isOdd`. `Data.List`":["has"],"`isPermutationOf`, I":["think"],"`isPrefixOf` xs":["="],"`isPrefixOf`, etc.":["Seems"],"`isPunctuation c":["||`"],"`isPunctuation` at":["all"],"`isPunctuation`. It'll":["be"],"`isQuestion \"\"":["=","="],"`isQuestion -\u003e":["\"Sure\"`"],"`isQuestion =":["(==","T.last"],"`isQuestion []":["="],"`isQuestion str":["="],"`isQuestion string":["="],"`isQuestion xs":["="],"`isQuestion` I":["think"],"`isQuestion` a":["total"],"`isQuestion` and":["the","`isShouting`","`isYelling`.","`isSilence`","`isSilence`.","`isShout`","`allCaps`."],"`isQuestion` as":["the"],"`isQuestion` becomes":["a"],"`isQuestion` being":["a"],"`isQuestion` by":["using"],"`isQuestion` can":["never"],"`isQuestion` check":["for"],"`isQuestion` clearly":["tells"],"`isQuestion` could":["be","be"],"`isQuestion` function":["where"],"`isQuestion` if":["you"],"`isQuestion` is":["a","equivalent","never"],"`isQuestion` since":["all"],"`isQuestion` so":["it","that"],"`isQuestion` to":["emphasize","point-free."],"`isQuestion` was":["fine"],"`isQuestion` will":["fail"],"`isQuestion` without":["guarding"],"`isQuestion` would":["be"],"`isQuestion`) `foldr`":["would"],"`isQuestion`). But":["those"],"`isQuestion`). It":["is"],"`isQuestion`, and":["modified"],"`isQuestion`, so":["it"],"`isQuestion`, which":["could"],"`isQuestion`. But":["it"],"`isQuestion`. If":["the"],"`isQuestion`. The":["purpose"],"`isQuestion`. You":["will"],"`isQuestion`; I":["meant"],"`isSep` in":["a"],"`isSep` is":["any"],"`isSeparator =":["not"],"`isSeparator` be":["the"],"`isSeparator` by":["deciding"],"`isSeparator` simpler,":["but"],"`isSeparator`, `isValidChar`":["and"],"`isSeparator`. You":["can"],"`isSeperator` in":["terms"],"`isSeperator` should":["be"],"`isShout =":["all"],"`isShout xs":["="],"`isShout` both":["work"],"`isShout` by":["removing"],"`isShout` can":["be"],"`isShout` definition":[":)"],"`isShout` in":["terms"],"`isShout` is":["whether"],"`isShout` on":["their"],"`isShout` you":["could"],"`isShout`, and":["`isQuestion`)."],"`isShout`, as":["suggested,"],"`isShout`, but":["now"],"`isShout`, think":["about"],"`isShout`, try":["using"],"`isShout`, which":["could"],"`isShout`. It":["would"],"`isShout`. That":["said,"],"`isShouted` because":["it'd"],"`isShouted` in":["a"],"`isShouting str":["="],"`isShouting` and":["`isQuestion`","`isAsking`"],"`isShouting` by":["replacing"],"`isShouting` can":["be"],"`isShouting` could":["be"],"`isShouting` doesn't":["help"],"`isShouting` in":["a"],"`isShouting` is":["indeed","too"],"`isShouting` or":["`isQuestion`."],"`isShouting` so":["that"],"`isShouting` the":["parens"],"`isShouting` to":["a"],"`isShouting` your":["code"],"`isShouting`) will":["make"],"`isShouting`, `filter":["isAlpha"],"`isShouting`, but":["it"],"`isShouting`, to":["match"],"`isShouting`. Much":["better"],"`isShouty` starts":["from"],"`isSilence` (didn't":["know"],"`isSilence` and":["`isQuestion`","`isShout`.","`isQuestion`)."],"`isSilence` before":["`isShouting`"],"`isSilence` can":["be"],"`isSilence` case,":["it's"],"`isSilence` coming":["first."],"`isSilence` function":["has"],"`isSilence` guard":["is"],"`isSilence` guards":["on"],"`isSilence` here.":["Would"],"`isSilence` was":["semantically"],"`isSilence` with":["a"],"`isSilence` without":["even"],"`isSilence` wrapper":["around"],"`isSilence`, a":["point-free"],"`isSilence`, since":["`all`"],"`isSilent =":["all"],"`isSilentTreatment` is":["way"],"`isSilent` so":["that"],"`isSilent` to":["`isSilent"],"`isSilent`, which":["is"],"`isSomething` and":["`isNotSomething`"],"`isSpace ::":["(Char"],"`isSpace` do":["you"],"`isSpace` from":["`Data.Char`"],"`isSpace` function":["in","that"],"`isSpace` handles":["tabs"],"`isSpace` in":["`Data.Char`","Data.Char?"],"`isSpace` instead":["of","of"],"`isSpace` is":["completely"],"`isSpace` returns":["True,"],"`isSpace` since":["you"],"`isSpace` with":["your"],"`isSpace`, which":["you"],"`isSpace`, whose":["name"],"`isSquare` function.":["You"],"`isSuffixOf \"?\"`":["(from"],"`isSuffixOf \"?\"`,":["but"],"`isSuffixOf` appear":["more"],"`isSuffixOf` as":["opposed","an","it"],"`isSuffixOf` but":["that's"],"`isSuffixOf` for":["cases"],"`isSuffixOf` from":["Data.List,","Data.List,","Data.List","Data.List,","`Data.List`","Data.List,","Data.List","Data.List","`Data.List`."],"`isSuffixOf` if":["not"],"`isSuffixOf` instead":["of","of"],"`isSuffixOf` is":["a","a"],"`isSuffixOf` message":["``"],"`isSuffixOf` more,":["I"],"`isSuffixOf` only":["makes"],"`isSuffixOf` reads":["better"],"`isSuffixOf` sure":["is"],"`isSuffixOf` to":["implement"],"`isSuffixOf` would":["be"],"`isSuffixOf`)` ``":["looks"],"`isSuffixOf`, and":["`\"?\""],"`isSuffixOf`, but":["otherwise"],"`isSuffixOf`, provided":["by"],"`isSuffixOf`. Although":["a"],"`isSuffixOf`. But":["I"],"`isThymine` and":["`toRNA`"],"`isThymine` function,":["you"],"`isTrashChar`? For":["the"],"`isUpper '1'`":["returns"],"`isUpperCase` as":["it"],"`isUpperLetter =":["not"],"`isUpperOrSpecial =":["not"],"`isUpperOrSpecial` can":["be"],"`isUpperString` in":["terms"],"`isUpper` already":["defined"],"`isUpper` and":["`isLower`","`isAlpha`)","`isLower`"],"`isUpper` it":["will"],"`isUpper` only":["worked"],"`isUpper` or":["something"],"`isUpper` predicate":["would"],"`isUpper` predicate,":["but"],"`isUpper` returns":["false"],"`isUpper` treat":["non-alphabetic"],"`isUpper` variant":["point-free"],"`isValidChar` and":["the"],"`isYell` 1-":["has"],"`isYell` is":["just"],"`isYell` pointfull":["and"],"`isYelling` are":["superfluous"],"`isYelling` could":["be"],"`isYelling` instead":["of"],"`isYelling` with":["`not`"],"`isYelling`, you":["might"],"`isYelling`. But":["it"],"`isYelling`. Would":["love"],"`is` combinator":["is"],"`iterate`. No":["need"],"`j &amp;lt-":["[k]`"],"`j` map":["to?"],"`join \"\\n\"`":["is"],"`join (,)`":["might"],"`join`. I'm":["definitely"],"`join`. Revision,":["coming"],"`justIf` that":["works"],"`k'` -":["it"],"`k` as":["many"],"`k` directly":["since"],"`k` explicitly":["using"],"`k` that":["satisfies"],"`key /=":["map"],"`keyword` too":["and"],"`l t":["I","I:l"],"`l` isn't":["evaluated?"],"`la` bindings":["out"],"`largestPalindrome` and":["`smallestPalindrome`"],"`last .":["toList`,"],"`last message`":["and"],"`last phrase":["=="],"`last s":["=="],"`last s`":["are"],"`last s`.":["But"],"`last str":["==","=="],"`last string":["=="],"`last txt":["=="],"`last voice":["=="],"`last x":["==","=="],"`last(s)` this":["looks"],"`lastDayOfMonth`, letting":["Haskell"],"`lastFour` at":["the"],"`lastMay` since":["any"],"`lastTen` is":["kinda"],"`lastTen` notice":["how"],"`lastTen` quite":["a"],"`last` an":["empty"],"`last` are":["safe."],"`last` being":["a"],"`last` breaks":["on"],"`last` can":["be"],"`last` can't":["do"],"`last` does,":["so"],"`last` for":["question,","detecting","clarity","checking"],"`last` from":["Prelude."],"`last` function":["is"],"`last` if":["you"],"`last` in":["my","`question`.","`isQuestion`"],"`last` is":["a"],"`last` to":["make"],"`last` when":["I"],"`last`, so":["thanks"],"`last`, using":["a"],"`last`. Strictly":["speaking,"],"`last`: the":["empty"],"`leap &&":["century"],"`leap =":["…`"],"`left g`":["and"],"`leftOnTheWall` do":["not"],"`len ==":["10`","10`","11"],"`length (filter":["isAlpha","(==w)","id)"],"`length (xs+1":["-"],"`length .":["filter`","filter","filter","nub`","filter","filter"],"`length a`":["calls"],"`length alpha":["&gt;"],"`length bin":["-"],"`length cleaned`":["to"],"`length digits`":["in","-","to"],"`length ds`":["calculated"],"`length l`":["is"],"`length source":["=="],"`length str":["\u003e"],"`length w1":["=="],"`length x":["/=","=="],"`length x`":["(especially","in"],"`length xs":["==","&gt;","\u003e"],"`length xs`":["to"],"`length xxx":["=="],"`length.filter (==":["True)"],"`length` and":["`tails`,","`filter`,","no","`filter`)","`filter`."],"`length` approach":["over"],"`length` at":["every","most"],"`length` calls":["in"],"`length` check":["is"],"`length` here":["at"],"`length` in":["this","the"],"`length` is":["O(n)"],"`length` of":["a"],"`length` or":["calculate"],"`length` requires":["completely"],"`length` which":["is"],"`length` with":["`0`"],"`length`, `head`,":["and"],"`length`, `splitPlaces`":["from"],"`length`, `zip`,":["etc."],"`length`, so":["it"],"`length`. Data.Map.Strict":["has"],"`lens` here...":["it"],"`let a":["="],"`let j":["="],"`let l":["="],"`let …":["in"],"`let` and":["that","`where`"],"`let` because":["it's"],"`let` expression":["or"],"`let` for":["the"],"`let` in":["there"],"`let` is":["used","mostly","a"],"`let` or":["`where`","`where`","`where`"],"`let` to":["`where`"],"`let` would":["make"],"`let`, especially":["in"],"`let`, it":["will"],"`let`, so":["maybe"],"`let`. When":["you're"],"`let`. You":["might"],"`let`; is":["there"],"`let`s hard":["to"],"`letterSet` already":["maps"],"`letterSet` map":["into"],"`letters /=":["[]`"],"`letters word`":["is"],"`lettersByScore`, a":["list"],"`lettersInStatement` let":["is"],"`letters` and":["`numbers`","`numbers`"],"`letters` can":["just"],"`letters` for":["equality?"],"`letters` to":["`alphanumerics`.","be","a"],"`liftA2 (&&)":["(not","even"],"`liftA2 (==)":["allCaps"],"`liftA2 .":["liftA2`","liftA2`","liftA2","liftA2","liftA2`","liftA2`"],"`liftA2 ::":["Applicative"],"`liftA2` brings":["back"],"`liftA2` will":["take"],"`liftA2`), no?":["`liftA2`"],"`liftA3 PhoneNumber":["pAreaCode"],"`liftA` maps":["a"],"`liftM2` instead":["of"],"`liftM2` or":["any"],"`liftM2`, `fmap`,":["`show`,"],"`liftM` and":["`fmap`"],"`liftM` in":["cases"],"`lift` and":["it"],"`likeThis` instead":["of"],"`lineNumber` share":["many"],"`lineNumber` work":["at"],"`line_take s":["="],"`line_take` (line":["20)"],"`linked-list` problem,":["the"],"`linked-list` problem.":["Can"],"`list` in":["`sing`,"],"`list`, so":["it"],"`loeb` only,":["but","but"],"`loeb` to":["created","created"],"`lookupPlant`, but":["otherwise"],"`lookupPlants \"Blargh\"":["defaultGarden`"],"`lookupPlants` a":["little"],"`lookupPlants` is":["clever"],"`lookupPlants` might":["be"],"`lookup` can":["do"],"`lookup` does":["not"],"`lookup` in":["the"],"`lookup` instead":["of"],"`lookup`, to":["catch"],"`lookups` is":["most"],"`lookups` list":["which"],"`lookups` should":["be"],"`lowerA ==":["lowerB`"],"`lowerA` are":["only"],"`lowerCaseBottleText (next":["n)`.","n)`"],"`lowerCaseBottleText(next n)`":["doesn't"],"`lowerCaseBottleText` there's":["no"],"`lowerCase` such":["that"],"`lowerWord` and":["`sortedWord`"],"`ls` and":["whatever"],"`luhnDigits`. Very":["clever!"],"`m \u003e\u003e=":["return"],"`m a`":["and"],"`m isLike":["\"^\\\\s*$\"`"],"`m` `n`":["times,"],"`m` and":["`m`"],"`m` are,":["but"],"`m` explicitly":["to"],"`m` is":["the"],"`m` is,":["well,"],"`m`. This":["means"],"`ma \u003c\u003e":["mb`"],"`main =":["print"],"`main': main":["=","="],"`main` should":["have"],"`makeAllLowercase .":["words`"],"`makeThisFunctionPassTests` --\u003e":["exactly"],"`makeThisFunctionPassTests` to":["result"],"`makeWordCountMap` is":["equivalent"],"`many` but":["it"],"`map $":["map","map"],"`map ($":["x)"],"`map (,":["1)","1)`","1)","1)`","1)","1)`."],"`map (,0)":["dna`","\"ATCG\"","\"ATCG\"","\"AGCT\"`."],"`map (,1)`":["in","hack"],"`map (,1)`,":["or"],"`map (,1)`.":["Some"],"`map (,n)":["xs`"],"`map (\\(grade,":["pupils)"],"`map (\\(s,":["le)"],"`map (\\s":["-&gt;"],"`map (\\x":["-&gt;","-&gt;","-&gt;","-\u003e","-\u003e","-\u003e"],"`map (f":["."],"`map (filter":["isAlphaNum)`."],"`map (first":["(map"],"`map (flip":["(,)","(,)"],"`map (fmap":["sort)`","sort)`"],"`map (head":["&&&"],"`map (id":["&amp;&amp;&amp;","&amp;&amp;&amp;","&amp;&amp;&amp;","&amp;&amp;&amp;"],"`map (second":["sort)`","sort)`"],"`map (stringToPlants":["."],"`map (swap":["."],"`map (take":["n)`"],"`map (vec":["V.!)`?"],"`map (zip":["words"],"`map .":["map","map`"],"`map ::":["(a"],"`map canonicalize`":["and","on"],"`map f":["(map","xs","xs","s","xs",".","list","xs`."],"`map f`,":["you"],"`map g":["$"],"`map id`?":["That's"],"`map map`.":["I"],"`map snd":["."],"`map stringMap`":["on"],"`map stringToPlants":["."],"`map toEnum":["[0..7]`"],"`map toLower":["s1`","word`","letter`","&&&","x`","word`","x`","xs`","word`"],"`map toLower`":["are","entirely","are","to","are","aren't","first","before","separately).",",","and","is"],"`map toLower`.":["I"],"`map toUpper":["(take","s"],"`map toUpper`":["is"],"`map verse":["[from,"],"`map verse`":["with","on"],"`mapAccumL` was":["a"],"`mapFst` is":["like","equivalent","equivalent"],"`mapFunc` doesn't":["very"],"`mapFunc` is":["no"],"`mapHead` instead":["of"],"`mapLetter` function.":["What"],"`mapLetter`? It":["isn't"],"`mapM (const":["f)"],"`mapM f`":["to"],"`mapM randomRIO":["…`","[…]`","[…]`"],"`mapM` here":["too,"],"`mapM` is":["one"],"`mapM` or":["something"],"`mapM` to":["me","make"],"`mapM`, `randomRIO`,":["a"],"`mapM`. Also":["consider"],"`mapMaybe` (from":["`Data.Maybe`)"],"`mapMaybe` in":["this"],"`mapMaybe` solution.":["I'm"],"`mapMaybe`. It's":["an"],"`mapSnd` function,":["you"],"`mapSorted` its":["own"],"`mapWords` having":["this"],"`map` (or":["use","`length`"],"`map` GHC":["has"],"`map` `(map":["toLower)`"],"`map` and":["`==`","a","`==`.","`filter`,","`filter`","scoped","`==`.","`foldr`","`unlines`","`sum`","a","the","`unwords`.","`verse`","no"],"`map` as":["it","`map"],"`map` because":["thay"],"`map` by":["something"],"`map` call:":["`map"],"`map` calls":["in"],"`map` for":["example?"],"`map` from":["Prelude."],"`map` here,":["usually"],"`map` here?":["I"],"`map` implementation":["after"],"`map` implementation,":["but"],"`map` in":["GHC","the","the"],"`map` instead":["of","of","of","of","of"],"`map` is":["not","practically","definitely","used","basically","much","already"],"`map` isn't":["changing"],"`map` it":["can"],"`map` matters,":["can"],"`map` or":["`null`)"],"`map` over":["the"],"`map` rather":["than","than","than"],"`map` results":["in"],"`map` sources":["that"],"`map` than":["to","to","with"],"`map` then":["GHC"],"`map` to":["determine","`all`,","`all`","do"],"`map` was":["slightly"],"`map` with":["a","a"],"`map` would":["work","*also*","be"],"`map`, I":["just"],"`map`, `filter`,":["and"],"`map`, `foldr`":["and"],"`map`, `take`,":["`length`"],"`map`, and":["`reverse`).","`[i,"],"`map`, but":["not","a","that"],"`map`, can":["you"],"`map`, not":["a","`foldr`."],"`map`, rather":["than"],"`map`, the":["other"],"`map`. And":["as"],"`map`. I":["was","don't"],"`map`. The":["reason"],"`map`. They":["end"],"`map`. Yay":["for"],"`map`? It":["makes"],"`map`? You":["might"],"`mappend (WordCount":["a)"],"`mappend` (or":["`\u003c\u003e`)"],"`mappend` in":["about"],"`matchesAnyOf` is":["equivalent"],"`matrix of":["strings`"],"`max 100":["(length"],"`maxBound ::":["Int`","Int`"],"`maxBound::Char` of":["integers."],"`maxBound` instead":["of"],"`maxBound` which":["all"],"`maximum` from":["Data.List."],"`maybe 0":["id`"],"`maybe []":["id`"],"`maybe bar":["Just"],"`maybe d":["id"],"`maybe defaultNumber":["id"],"`maybe f":["id`"],"`maybeInsert` I'd":["be"],"`maybeInsert` to":["a"],"`maybeToList` and":["`maybeInsert`"],"`maybeToList` isn't":["too"],"`maybe` function":["in"],"`maybe` here":["is"],"`maybe` is":["in"],"`maybe`, matching":["directly"],"`meetupDay` but":["this"],"`meetupDay` could":["be"],"`meetupDay` is":["computed,"],"`meetup` exercise.":["Can"],"`merge .":["(:"],"`messageFor`. In":["case"],"`messageType` will":["choke"],"`message` be":["empty."],"`min (length":["a)"],"`minBound ::":["Char`"],"`minBound` and":["`maxBound`"],"`minBound` is":["necessary,"],"`minimum`) etc.":["I"],"`mkName ::":["IO"],"`mkName` a":["bit"],"`mkName` function":["and"],"`mkNucleotide` is":["another"],"`mkRobot` (there":["are"],"`mkRobot` and":["`resetName`","`resetName`,","`robotName`","`resetName`"],"`mkRobot` as":["well."],"`mkRobot` can":["be"],"`mkRobot` could":["be"],"`mkRobot` is":["used"],"`mkRobot` over":["`Robot`"],"`mkRobot` with":["the","its"],"`mkRobot`, some":["people"],"`mkRobot`. Also,":["`coordinates`"],"`mkRobot`? That":["way"],"`mod (-1)":["7"],"`mod 7`":["of"],"`mod100 &&":["mod400`"],"`mod` (I":["don't"],"`mod` 100=":["0,"],"`mod` 10```":["is"],"`mod` 4":["=="],"`mod` and":["may"],"`mod` d":["then"],"`mod` i":["=="],"`mod` inside":["`toEnum`"],"`mod` or":["`rem`","`rem`."],"`mod` x":["==","=="],"`mod`), and":["in"],"`mod`, so":["a"],"`mod`. Specifically,":["this"],"`mod`4 ==":["0"],"`modifyIORef name":["(\\_"],"`modifyMVar_ (\\_":["-\u003e"],"`modifyMVar_` can":["be"],"`modifyMVar_` instead":["if"],"`modifyMVar_` which":["would"],"`modifyMVar` does":["but"],"`modifyMVar` to":["implement"],"`modifyMVar`, `resetName`":["will"],"`modifyTVar'` in":["`incrementBalance`.","case"],"`modifyTVar'` instead":["of"],"`modifyTVar` I":["still"],"`modifyTVar` can":["create"],"`modifyTVar` is":["not"],"`modifyTVar`, and":["also"],"`module ...":["where`"],"`module Anagram":["(anagramsFor)"],"`module Beer":["(sing,"],"`module Bob":["(responseFor)","(responseFor)","(responseFor)","(responseFor)","(responseFor)","(responseTo)","(responseFor)","(responseFor)","(responseFor)","(responseFor)","(responseFor)`."],"`module DNA":["(","(toRNA)"],"`module WordCount":["(wordCount)`,","(wordCount)","("],"`module` line":["to"],"`module` line,":["all"],"`module`, `class`,":["or"],"`msg ==":["\"\"`"],"`msum` method,":["which"],"`mutation` looks":["like"],"`mx ::":["Maybe"],"`myInsert` is":["essentially"],"`n +":["7*k`","7*k"],"`n \u003c":["d*d`,"],"`n \u003c-":["atomically"],"`n ==":["1`","x`"],"`n \u003e":["m`."],"`n(n+1)(2n+1)/6` and":["`n(n+1)/2`"],"`n(n+1)/2` multiplied":["by"],"`n*6` being":["calculated"],"`n*7 +":["1`."],"`n*m` and":["that"],"`nOrmal` are":["not"],"`n^0 =":["1`."],"`n` agruments,":["in"],"`n` and":["couldn't","`(acc","`m`"],"`n` by":["`k`"],"`n` is":["the","smaller","sum"],"`n` isn't":["forced"],"`n` times,":["that"],"`n` you'll":["do"],"`n`, as":["that"],"`n`, which":["you"],"`n`. The":["way"],"`name ::":["Robot"],"`name r`":["for"],"`namePrefix` and":["`nameSuffix`,"],"`nameSuffix`, can":["you"],"`name` in":["your"],"`newName \u003e\u003e=":["writeIORef"],"`newName` and":["it's"],"`newName` would":["be"],"`newStdGen` and":["`randomRs`.","`randomRs`."],"`newStdGen` twice":["for"],"`newStdGen` twice,":["call"],"`newStdGen`. What":["am"],"`newTVarIO` and":["`readTVarIO`,"],"`newType` lead":["to"],"`newX` variables":["is"],"`newtype Dna":["="],"`newtype Nucleotide":["="],"`newtype Robot":["="],"`newtype School":["=","="],"`newtype` -":["was"],"`newtype` again":["is"],"`newtype` and":["in","perhaps"],"`newtype` by":["the"],"`newtype` from":["before,"],"`newtype` instead":["of","of"],"`newtype` is":["cool,","more"],"`newtype` wrapper":["is"],"`newtype`. I":["particularly"],"`newtype`. Then":["you"],"`nextWeekDay` you'd":["just"],"`nextWeekday` you":["could"],"`next` already":["implements"],"`next` instead":["of"],"`none p":["="],"`none` would":["make"],"`normalise .":["words`"],"`normalise s`":["is"],"`normaliseCase` functions":["into"],"`normalise` function.":["There"],"`normalise` to":["the"],"`normalise` using":["`isAlphaNum`"],"`normalize =":["sort"],"`normalize x`":["is","only","is","in","is"],"`normalize x`.":["So"],"`normalizeWord` and":["`removeEmptyWords`."],"`normalizeWord` instead":["of"],"`normalizeWords` could":["be"],"`normalizeWords` got":["a"],"`normalizeWords` is":["now"],"`normalizeWords`, which":["you"],"`normalizeWords`. Consider":["that"],"`normalize` (and":["if"],"`normalize` and":["`tokens`","`anagramsFor`"],"`normalize` is":["a"],"`normalize` or":["something"],"`normalize` outside":["and"],"`normalize` twice":["vs"],"`normalize`, but":["then"],"`normalizedX` is":["only"],"`normalizedX` seem":["superfluous,"],"`not $":["any","any","isLower"],"`not (any":["isLower","isLower","isLower","isLower","isLower"],"`not (hasLower":["y)`"],"`not (isAlpha":["c)"],"`not (isJibberish":["str)`"],"`not (isJibbersish":["str)`"],"`not (isLetter":["a)"],"`not (isLogical":["tri)`"],"`not (isLower":["a)`","a)`"],"`not (isYelling":["s)`."],"`not (null":["alpha)`","xs)","xs)`","v)`.","letters)`,","xs)`","letters)","letters)`","r)`","alphaMessage)`","xs)`","input)","word)`","str)`","str)"],"`not .":["any","any","any`","any","any","any","any","any","isLower`.","(any","any","isSpace`.","any","even`","any","any","id`","isSpace`","isSpace`","isLower`","isAlphaNum`"],"`not ::":["Bool"],"`not any":["(SOME"],"`not null":["xs","alphas"],"`not(isAlpha x)`":["appear"],"`not(null message)`":["doesn't"],"`not(null word)`.":["Also,"],"`not. any":["isLower`"],"`notDuplicate` and":["`compareAnagram`."],"`notIdentical x":["&&"],"`not` (`all`":["or"],"`not` (as":["is"],"`not` +":["`any`","`any`"],"`not` `any`":["`Char`"],"`not` and":["the","`.`."],"`not` with":["something"],"`not`, and":["that"],"`not`, like":["in"],"`not`. They":["appear"],"`not`. `[Char]`":["is"],"`not`s throughout":["the"],"`nsForBottles`. The":["`|`"],"`nth` could":["probably"],"`nub` function":["in"],"`nub` is":["O(n^2)"],"`nub`, it":["uses"],"`nuclelotideCounts` accept":["only"],"`nucleoCounts` with":["`fromListWith`"],"`nucleotide' _":["="],"`nucleotideCounts` (using":["Data.Map.Strict),"],"`nucleotideCounts` a":["bit"],"`nucleotideCounts` apparently":["should"],"`nucleotideCounts` as":["it","in"],"`nucleotideCounts` but":["it's"],"`nucleotideCounts` check":["invalid"],"`nucleotideCounts` does":["four"],"`nucleotideCounts` doesn't":["scan"],"`nucleotideCounts` function,":["but"],"`nucleotideCounts` in":["a","the","terms","`count`"],"`nucleotideCounts` is":["missing","kind","a"],"`nucleotideCounts` isn't":["the"],"`nucleotideCounts` looks":["great,"],"`nucleotideCounts` makes":["four"],"`nucleotideCounts` more":["efficiently"],"`nucleotideCounts` results":["in"],"`nucleotideCounts` should":["look","probably","use"],"`nucleotideCounts` since":["it","function"],"`nucleotideCounts` such":["that"],"`nucleotideCounts` that":["will"],"`nucleotideCounts` to":["be"],"`nucleotideCounts` without":["the","`union`","using"],"`nucleotideCounts` you":["do"],"`nucleotideCounts`, I":["think?"],"`nucleotideCounts`, because":["in"],"`nucleotideCounts`, you":["could"],"`nucleotideCounts`. You":["could","should"],"`nucleotideCounts`? HINT:":["don't"],"`nucleotideToRNA` isn't":["part"],"`nucleotide_toRNA` is":["a"],"`nucleotide` in":["a"],"`nucleotide` or":["perhaps"],"`nucleotide` to":["`n`,"],"`nucleotidesCounts` is":["`Map.fromListWith"],"`nucleotidesCounts` traverses":["the"],"`nucleotides`? (Should":["the"],"`nuke` in":["the"],"`null .":["filter`"],"`null ::":["[a]"],"`null comps'`":["is"],"`null message":["||"],"`null message`":["is"],"`null query`":["is"],"`null query`...":["thanks"],"`null s":["||"],"`null s`":["or","isn't","check"],"`null(chars)` etc.":["Function"],"`null` (`l":["=="],"`null` (hint:":["combine"],"`null` and":["`filter`,","`isPrefixOf`,"],"`null` doesn't":["imply"],"`null` function":["instead"],"`null` if":["there"],"`null` in":["`isQuestion`","Prelude"],"`null` instead":["of","of"],"`null` is":["a"],"`null` or":["not!),","pattern"],"`null`) can":["be"],"`null`, `any`,":["or"],"`null`, but":["this","using"],"`null`, then":["this"],"`null`. For":["instance:"],"`numBottles 0`":["instead"],"`number \"\"`":["might"],"`number' []`":["clause"],"`number'` the":["second"],"`number` a":["little"],"`number` always":["returns"],"`number` and":["use"],"`number` are":["superfluous,"],"`number` but":["otherwise"],"`number` could":["be"],"`number` is":["only"],"`number` will":["incorrectly"],"`number`, `areaCode`":["and"],"`number`, `prettyPrint`":["and"],"`number`, and":["`prettyPrint`"],"`number`. I":["would"],"`number`. The":["recursion"],"`numbers s`":["in","and"],"`numbers` negatively":["affects"],"`numbers` subfunctions,":["you"],"`numerals (-1)`":["will"],"`numerals'`, you":["won't"],"`numeralsIter` should":["be"],"`numeralsIter` the":["`lookups`"],"`numerals` without":["introducing"],"`o +":["1`","1`."],"`obitalPeriods` as":["a"],"`odd` rather":["than"],"`ofBeer s`":["in"],"`ofBeer` using":["an"],"`ofWhat` are":["cute."],"`old +":["new`","new`"],"`on (==)":["unify"],"`on` (map":["toLower)","toLower))"],"`on` (not":["."],"`on` and":["use:"],"`on` from":["Data.Function.","`Data.Function`"],"`on` function":["that","that"],"`on` has":["the"],"`on` letters)":["\u003c&\u003e","word)"],"`on` normalized)":["x)"],"`on` or":["`.`."],"`on` sort":["."],"`on` sortderString)":["s"],"`on` unify)":["x"],"`on` was":["exactly"],"`on`. Try":["using"],"`oneOf` had":["been"],"`one` /":["`two`"],"`onlyDigits` because":["I"],"`op` on":["line"],"`openAccount` and":["`getBalance`"],"`openAccount` can":["be"],"`operations` where":["you"],"`operator` and":["not"],"`or .":["map`"],"`or [a,":["b,"],"`orElse` is":["unused"],"`orP` isUpper)":["q```"],"`or` with":["lists"],"`or`? It's":["slightly"],"`orbital Earth":["*`"],"`orbital planet`":["into"],"`orbitalPeriod` and":["just"],"`orbitalPeriod` on":["every"],"`orbital` with":["a"],"`ord '0'`":["would","or"],"`ord 'a'":["-"],"`ord x":["-"],"`ord` and":["`chr`","`chr`,"],"`ord` are":["equivalent"],"`ord`, `fromEnum`":["does"],"`otherwise =":["a`","leap`.","x"],"`otherwise` -":["if"],"`otherwise` case":["is"],"`otherwise` guard":["that"],"`otherwise` implies":["that"],"`otherwise` part":["in"],"`otherwise`). Expressing":["this"],"`over (mapped._2)":["sort`"],"`own` operator":["either.","that"],"`own` operator:":["`(.).(.)`"],"`p =":["(\\x"],"`p x":["="],"`pack` I":["get"],"`pack` is":["a"],"`pad` is":["very"],"`parListChunk num":["rdeepseq`"],"`parseNucleotide` which":["I"],"`parts $":["onlyDigits"],"`parts` responsible":["for"],"`parts` with":["an"],"`parts` you":["are"],"`parts`, or":["just"],"`parts`, you":["can"],"`parts`. It's":["lazy"],"`pattern guards`":["is"],"`peek`) robot-name":["seems"],"`performAction` nor":["`foldl`"],"`performAction` you":["won't"],"`permutations \"aaaaaaaaaaaab\"`":["you'll"],"`permutations` -":["if"],"`permutations` are":["heavy,"],"`permutations` does":["O(n!)"],"`permutations` is":["kind"],"`phoneNum`, `rawPhoneNum`,":["etc."],"`phoneNumberFromString` a":["bit"],"`phoneNumberPattern` should":["have"],"`phoneNumber` will":["do"],"`phrase 1`":["and"],"`phrase 2`":["different"],"`phrase` into":["your"],"`phrase` param":["from"],"`pickSchedule` can":["be"],"`plant` with":["a"],"`pling, plang,":["plong"],"`pnAreaCode` exposed,":["which"],"`pointfree` /":["lambdadot"],"`possibleAnagrams` in":["the"],"`possiblePrimes` and":["`primeFactors'`?"],"`potential` is":["used"],"`powP` just":["has"],"`powtest` could":["use"],"`powtest` exercise,":["consider"],"`pred $":["length"],"`pred` and":["`succ`"],"`pred` function,":["instead"],"`pred`, which":["work"],"`prefix` and":["`lineNumber`","`lineNumber`"],"`prep s`":["are","are"],"`prep s`,":["not"],"`prep str`":["binds"],"`prep str`.":["Line"],"`prepare` function.":["The"],"`preprocess`. I":["generally"],"`prettyPrint Nothing`":["to"],"`prettyPrint'` and":["`pnAreaCode`"],"`prettyPrint` a":["little."],"`prettyPrint` and":["`areaCode`"],"`prettyPrint` are":["not"],"`prettyPrint` can":["be"],"`prettyPrint` if":["you"],"`prettyPrint` is":["ok"],"`prettyPrint` on":["invalid"],"`prettyPrint` should":["be"],"`prettyPrint` slightly":["by"],"`prettyPrint` using":["`printf`"],"`prettyPrint` would":["be"],"`prettyPrint` you":["could"],"`prettyPrint`, `Text.Printf`":["might"],"`prettyPrint`, which":["might"],"`prettyPrint`---you probably":["want"],"`prettyPrint`. Not":["a"],"`primeFactors'` in":["the"],"`primeFactors'` is":["the"],"`primeFactors'`? They're":["not"],"`primeFactors` seems":["to"],"`primeFactors`, and":["giving"],"`primeFactors`, but":["I"],"`primes` (~10":["sec"],"`primes` and":["`wheel`"],"`primes` between":["samples"],"`primes` code":["from"],"`primes` is":["that"],"`primes` serve":["here?"],"`primes` so":["I"],"`primes` version":["is"],"`print' at":["bar.hs:3:8-12","bar.hs:3:8-12"],"`printf \"'%c'\"":["c`."],"`printf` from":["Text.Printf"],"`printf` more":["liberally"],"`printf` was":["a"],"`process` consider":["using"],"`process` to":["get"],"`product []":["=="],"`punctuation` in":["a"],"`pure (++)":["&lt;*&gt;`"],"`pure` is":["the"],"`pure` simply":["wraps"],"`put =":["tell"],"`putMVar v":["x`","x`","2`","2`"],"`putMVar` in":["`closeAccount`"],"`putMVar` will":["block"],"`putMVar` wouldn't":["work"],"`q` are":["not"],"`q` when":["the"],"`qualified` prevents":["`List.intersperse`"],"`question =":["(=="],"`question ys`":["will"],"`question(ys)`, `question":["ys`"],"`question` (eta":["conversion)."],"`question` a":["total"],"`question` as":["predicates,"],"`question` function":["\"crash-unsafe\""],"`question` is":["a"],"`question` out":["of"],"`question`. Ordinarily,":["I"],"`questioned nonsense`.":["The"],"`questions` list":["has"],"`quotRem` by":["10"],"`quotRem` or":["`divMod`","`divMod`"],"`quotRem` version":["seems"],"`quotRem`). I":["used"],"`quotedWords` -":["it"],"`r -\u003e":["x`,"],"`r /=":["\"\"`,"],"`r` is":["a"],"`r` isn't":["used"],"`raised to":["the"],"`randomChar C":["="],"`randomChar` at":["all."],"`randomName` function":["is"],"`randomName` is":["a"],"`randomName` would":["be"],"`randomR ('A',":["'Z')"],"`randomRIO ('A',":["'Z')`."],"`randomRIO` I":["suppose)"],"`randomRIO` and":["it","`replicateM`"],"`randomRIO` for":["all"],"`randomRIO` in":["`resetName`,","the"],"`randomRIO` instead":["of"],"`randomRIO` instead,":["which"],"`randomRIO` is":["a","a"],"`randomRIO` so":["you'll"],"`randomRIO` to":["make"],"`randomRIO` work":["on"],"`randomRIO` works":["on"],"`randomRIO` would":["make"],"`randomRIO`'s range":["can"],"`randomRIO`) is":["a"],"`randomRIO`, I":["don't"],"`randomRIO`, a":["list,"],"`randomRIO`, you":["should"],"`randomR` (or":["`randomRIO`)"],"`randomR` and":["`randomRIO`"],"`randomRobot` (since":["`randomRs`"],"`randomRobot` implementation":["does"],"`randomRs` a":["bit."],"`randomRs` are":["using"],"`randomRs` does":["not"],"`randomRs` is":["pure)."],"`randomRs`. Alternatives":["would"],"`randomString =":["mapM"],"`range r`":["could"],"`read .":["(:[])`","show"],"`readDNA =":["readDNA'"],"`readDNA'` around":["you"],"`readDNA'`? Can't":["you"],"`readDNA` like":["this:"],"`readDNA`. Maybe":["it"],"`readDNA`? That's":["a"],"`readList`/`showsList` fancy":["stuff."],"`readMVar v`":["and","to"],"`readMVar` (apart":["from"],"`readMVar` and":["`modifyMVar`.","`swapMVar`"],"`readMVar` is":["a"],"`readMVar` point-free":["and"],"`readMVar` warns":["you"],"`readMVar`) and":["B"],"`readNucleotide` to":["return"],"`readOct` should":["be"],"`readProtein` function?":["It's"],"`readStatement` as":["it"],"`readStatement` could":["have"],"`readStatement` wouldn't":["kill"],"`readStatement`, and":["put"],"`readTVarIO` --":["according"],"`readTVarIO` this":["is"],"`readTVarIO`, respectively.":["Looks"],"`readTVar` using":["`modifyTVar`"],"`readTVar`ing the":["account,"],"`read` and":["`show`","`show`","`show`","`show`","`show`"],"`read` for":["either"],"`read` instance":["wants"],"`read` to":["work"],"`read`, for":["that"],"`reads \"":["\"`"],"`readsPrec` has":["a"],"`readsPrec` to":["be"],"`reads` function":["to"],"`reads` it":["will"],"`reads` rather":["than"],"`records` for":["you:"],"`records` or":["equivalent"],"`records` using":["record"],"`records`. In":["either"],"`reduce` is":["more"],"`rem n":["maxDecimalValue`"],"`rem` is":["sufficient"],"`rem` test":["instead"],"`remain` and":["defining"],"`remoeSilence =":["filter"],"`remove*` functions":["are"],"`removeNoString speak`":["instead."],"`removeNoString(speak)` is":["valid"],"`removeNonAlphaNum` could":["be"],"`removeNonAlphanumerics` at":["the"],"`removePunctuation` and":["`normaliseCase`"],"`removeSilence ws":["="],"`removeSilience` as":["`removeSilence"],"`render`, `display`,":["or"],"`repeatUpdate` you":["could"],"`repeat`. (`TupleSections`":["is"],"`replace =":["id`?"],"`replaceChar ::":["Char","Char"],"`replaceChar y":["="],"`replaceThymidine` is":["superfluous,"],"`replace` [here](http://hackage.haskell.org/package/MissingH-1.0.0/docs/Data-String-Utils.html#v%3Areplace).":["It"],"`replace` a":["bit"],"`replace` appears":["to"],"`replace` function":["from","in","from"],"`replace` in":["a","the"],"`replace`, it":["will"],"`replicate 10":["'0'`","'0'`","'0'`"],"`replicate x":["y`"],"`replicateM 5":["$"],"`replicateM n":["f`"],"`replicateM n`":["to"],"`replicateM` and":["`randomRIO`"],"`replicateM` from":["Control.Monad"],"`replicateM` in":["name"],"`replicateM` or":["`mapM`."],"`reponseFor s`":["for"],"`repr` in":["Python."],"`resetName (Robot":["name)`"],"`resetName` any":["neater."],"`resetName` both":["`resetName"],"`resetName` can":["all"],"`resetName` doesn't":["return"],"`resetName` function":["is","does","is"],"`resetName` function.":["Even"],"`resetName` in":["a"],"`resetName` is":["called"],"`resetName` on":["multiple"],"`resetName` should":["be","be"],"`resetName` since":["`putMVar`"],"`resetName` took":["a"],"`resetName` will":["deadlock"],"`resetName` without":["`do`"],"`resetName` you":["use"],"`resetName`, but":["I","I"],"`resetName`s have":["functionally"],"`reshape` and":["`flatten`"],"`reshape`, `rows`,":["`cols`)"],"`responseFor \"\"`":["if"],"`responseFor \"1234\"`":["should"],"`responseFor ::":["String"],"`responseFor _":["="],"`responseFor a`":["instead"],"`responseFor m@(_:_)`":["and"],"`responseFor m`":["would"],"`responseForHelper` harder":["to"],"`responseFor` (I":["mean,"],"`responseFor` (it'd":["just"],"`responseFor` I":["would"],"`responseFor` a":["type"],"`responseFor` and":["not","define"],"`responseFor` can":["be","be"],"`responseFor` does":["not."],"`responseFor` don't":["matter."],"`responseFor` from":["your","your","the"],"`responseFor` function":["(although","itself.","could","from","instead"],"`responseFor` function,":["`str`."],"`responseFor` function.":["Possibly","(And"],"`responseFor` if":["you"],"`responseFor` in":["this","all","a"],"`responseFor` is":["missing","the"],"`responseFor` just":["to"],"`responseFor` near":["the"],"`responseFor` needs":["to"],"`responseFor` otherwise":["`yelling`"],"`responseFor` so":["that"],"`responseFor` will":["be"],"`responseFor` you":["can"],"`responseFor`, as":["they","it's"],"`responseFor`, just":["move"],"`responseFor`, so":["developer","you"],"`responseFor`, the":["other"],"`responseFor`, you":["might"],"`responseFor`. It's":["not"],"`responseFor`. That":["way","way"],"`responseFor`. This":["made"],"`responseFor`. Top-level":["bindings"],"`responseFor`? I":["felt"],"`responseTo` in":["my"],"`response` or":["`responseWhen`?"],"`response`, predicates":["are"],"`rest -\u003e":["rest`"],"`rest'` being":["called"],"`rest'` computation":["will"],"`rest` to":["be"],"`result ++":["..`"],"`ret`, or":["just"],"`return \"M\"`":["has"],"`return $":["both"],"`return $!`.":["Since"],"`return ()`":["on","is"],"`return ()`.":["It"],"`return .":["BankAccount","both"],"`return bal`":["at","because"],"`return x":["="],"`return` call":["you"],"`return` for":["`Data.List.singleton`,"],"`return` in":["the","all"],"`return` is":["defined","all"],"`return` rather":["than"],"`return` to":["me?"],"`return` you":["were"],"`return`. In":["the"],"`reusing` count":["in"],"`revDigits` in":["mine,"],"`reverse $":["map"],"`reverse ['a'..'z']`":["as"],"`reverse [a..b]`":["is"],"`reverse [b..a]`":["is","because","is"],"`reverse [end..begin]`,":["try"],"`reverse [end..initial]`,":["everything"],"`reverse [m..n]`":["I","instead","is"],"`reverse [m..n]`,":["while"],"`reverse [stopAt..startFrom]`":["is"],"`reverse [t..f]`":["is"],"`reverse [to":[".."],"`reverse [to..from]`":["is"],"`reverse [y..x]`":["is"],"`reverseLinkedList` doesn't":["work."],"`reverseLinkedList` is":["to"],"`reverse` (you":["can"],"`reverse` a":["list"],"`reverse` and":["`enumFromThenTo`"],"`reverse` in":["between"],"`reverse` is":["not","monolithic"],"`reverse` needs":["to"],"`reverse` not":["because"],"`reverse` or":["`^`","`digitValues`?"],"`reverse` reminds":["that"],"`reverse` should":["usually"],"`reverse` traverses":["a"],"`reverse` using":["`[start,","just"],"`reverse` was":["clearer."],"`reverse`). It'll":["be"],"`reverse`, or":["`^`."],"`reverse`. But":["in"],"`reverse`. The":["double","way"],"`right g`.":["This"],"`rle` to":["`runLengthEncode`"],"`rn` on":["its"],"`rnaNucleotide` as":["a"],"`rnaNucleotides` at":["all,"],"`rnaNucleotides` because":["one"],"`rnf (Robot":["b"],"`rnf` a":["little"],"`rnf` instance":["could"],"`rnf`. See":["[Control.DeepSeq](http://hackage.haskell.org/package/deepseq/docs/Control-DeepSeq.html)."],"`robotB`, maybe":["I"],"`robotB`, there's":["no"],"`robotName =":["readMVar`"],"`robotNamePattern` you":["define"],"`robotName` (assume":["`m`"],"`robotName` are":["called"],"`robotName` call,":["even"],"`robotName` could":["be"],"`robotName` has":["to"],"`robotName` in":["point-free"],"`robotName` reads":["now,"],"`robotName`, `mkRobot`":["and"],"`romanNumbersBase` and":["`romanNumbers`."],"`romanNumbers` appears":["to"],"`romans` (in":["largest"],"`romans` as":["an"],"`rows` as":["`[row"],"`rows`, `cols`)":["but"],"`run*` or":["`eval*`"],"`runEitherT` are":["incompatible?"],"`runIdentity` and":["code"],"`runIdentity` because":["`either`"],"`runLengthEncode` and":["would"],"`runhaskell bob_test.hs`":["and"],"`s /":["("],"`s /=":["x`"],"`s ==":["[]`","map"],"`s' =":["T.strip"],"`s' shadows":["the","the","the"],"`s''` should":["depend"],"`s''`. Generally":["speaking,"],"`s'` depends":["on"],"`s'` is":["being"],"`s'`. Why":["not"],"`s1 /=":["s2`"],"`s` (in":["the"],"`s` and":["when","`x`,","`q`","composing"],"`s` binding,":["would","and"],"`s` directly":["from"],"`s` from":["`responseFor`"],"`s` in":["the","the","`wordCount`,"],"`s` is":["in"],"`s` or":["the"],"`s` parameter":["on"],"`s` too.":["If"],"`s` were":["just"],"`s`, this":["is"],"`s`, which":["means"],"`s`s and":["define"],"`safeLast` with":["`last`:"],"`safeToEnum` for":["here?"],"`sameLetters`! I":["still"],"`sameSorting` point-free":["as"],"`sameSorting` take":["two"],"`sanitizeInput` is":["overcomplicated"],"`sanitize` function":["than"],"`sanitize` is":["top-level"],"`sanitize` though,":["which"],"`sanitize`. Data.List.Split":["has"],"`sayNothing` first,":["will"],"`scanl` but":["in"],"`scanl`. For":["row"],"`scheadule` is":["misspelled"],"`scoreByLetter` a":["little"],"`scoreLetter` a":["constant"],"`scoreLetter` all":["over)."],"`scoreLetter` and":["`scoreWord`"],"`scoreLetter` as":["the"],"`scoreLetter` can":["always"],"`scoreLetter` in":["terms"],"`scoreLetter` is":["the","O(1)","partial,"],"`scoreLetter`, which":["would,"],"`scoreTable` at":["compile"],"`scoreWord` function":["signature"],"`scoreWord` in":["this","point-free"],"`scoreWord` is":["concerned,","O(n)."],"`scoreWord` with":["just"],"`scoreWord`, not":["`scoreLetter`."],"`score` isn't":["really"],"`second sort`":["(from"],"`secondCouplet` in":["a"],"`secondInDay::Integer` and":["`10^9::Integer',"],"`second` from":["Control.Arrow"],"`second` so":["you"],"`seen ++":["[x]`"],"`seen` doesn't":["matter"],"`sentenceKind` feels":["a"],"`sentence` rather":["than"],"`sep` looks":["a"],"`separatePots`; this":["one"],"`separate` is":["equivalent"],"`seq foldResult":["()`"],"`seq` (Map.insert":["k"],"`seq` (a,b)`":["but"],"`seq` False":["="],"`seq` ```ing?":["Hmm,"],"`seq` and":["BangPatterns)","there's"],"`seq` b":["`seq`"],"`seq` but":["I"],"`seq` calls":["to"],"`seq` go":["(acc",".."],"`seq` here":["are"],"`seq` only":["evaluates"],"`seq` or":["perhaps","BangPatterns","BangPatterns,","BangPatterns","importing"],"`seq` which":["looks"],"`seq`, `$!`,":["or"],"`seq`, but":["I","as"],"`seq`, parallelism,":["or"],"`seq`. It":["is"],"`seq`… although":["even"],"`sequence (map":["…)`"],"`sequence .":["take","map`"],"`sequenceA`. You":["might"],"`sequence` here":["may"],"`sequence` in":["`verse`"],"`sequence` is":["used"],"`sequence` returns":["a"],"`sequence`, `mapM`":["or"],"`set \"xxy\"":["=="],"`setBit`, that":["might"],"`shift 1":["n`,"],"`shiftL acc":["1`"],"`shiftL` 1":["+"],"`shiftL` and":["`.|.`)"],"`shiftL` by":["a"],"`shiftL` call":["could"],"`shiftMap` using":["just"],"`shoutChar =":["not"],"`shout` and":["`allSpace`"],"`shout` condition.":["Maybe"],"`shout` in":["point-free,"],"`shout`, `allSpace`":["and"],"`shout`, and":["`question`"],"`shouting =":["string","(==)"],"`shouting` case":["because"],"`shouting` do":["for"],"`shouting` is":["implemented."],"`shouting` predicate,":["so"],"`shouting` that":["uses"],"`shouting` to":["`not","use"],"`shouting` using":["`all`"],"`shouting`, `asking`,":["and"],"`shouting`predicate looks":["kinda"],"`show 'A'`":["is"],"`show 'A'`,":["although"],"`show 'C'`":["is"],"`show (n-1)`":["are"],"`show (x":["-"],"`show =\u003c\u003c":["case"],"`show A`":["in"],"`show c`":["will","instead","is","would","instead","is"],"`show c`,":["since"],"`show n`":["are","and"],"`show nucleo`":["would"],"`show x":["++"],"`show x`":["aren't","on"],"`showIntegral` wasn't":["so"],"`showProtein` and":["`readProtein`"],"`show` and":["`read`"],"`show` are":["very"],"`show` at":["all."],"`show` felt":["dirty,"],"`show` for":["arbitrary"],"`show` functions":["like"],"`show` has":["the"],"`show` instance":["was"],"`show` instead,":["you'd"],"`show` is":["as"],"`show` it's":["a"],"`show` on":["the"],"`show` outside":["of"],"`show` over":["`[c]`?"],"`show` returns":["the"],"`show` should":["ideally"],"`show` to":["implement"],"`show` typeclasses.":["Although"],"`show` would":["thus"],"`show`, `++`,":["or"],"`show`, really":["you"],"`show`, you'd":["get"],"`signed`, and":["`decimal`"],"`silence (removeNonSlphaNum":["str)`."],"`silence =":["null","allWhitespace`"],"`silence statement`,":["there"],"`silence str":["="],"`silence(removeNonAlphaNum(str))` should":["be"],"`silence(statement)` isn't":["a"],"`silence,shouting,question` reduces":["to"],"`silence` `silence(removeNonAlphaNum(str))`":["should"],"`silence` and":["`question`"],"`silence` are":["superfluous,"],"`silence` covers":["that"],"`silence` is":["more","an"],"`silence` using":["`all`?","`all`"],"`silence` you":["can"],"`silence`, `shout`,":["and"],"`silence`, `yell`":["and"],"`silence`. Also":["consider"],"`silence`? You":["should"],"`silent` and":["`asking`"],"`silent`, but":["it"],"`simulate` function,":["but"],"`simulate` looks":["like"],"`sing start":["finish`"],"`sing` and":["`verse`."],"`sing` by":["using"],"`sing` function.":["I"],"`sing` is":["separated","implemented"],"`sing` it's":["often"],"`sing` looks":["nice"],"`sing` may":["be"],"`sing` shadows":["the"],"`sing` tests,":["no"],"`sing` you":["might"],"`sing`, I":["would"],"`sing`, consider":["using"],"`sing`, using":["an"],"`sing`. `unlines`":["may"],"`sing`? Something":["involving"],"`singleItem` can":["be"],"`size ==":["11"],"`slice` works":["but"],"`slices xs":["="],"`slices'` such":["that"],"`slices` and":["replace"],"`slices` that":["doesn't","takes"],"`smallestPalindrome` seem":["to"],"`snd` calls":["superfluous."],"`snd` instead":["of"],"`snd` is":["the"],"`snd`? You":["aren't"],"`someChars` first":["in"],"`someFun'` all":["over"],"`sort $":["n","map"],"`sort (downcase":["…)`","s1)`"],"`sort (map":["toLower","toLower","toLower","toLower"],"`sort (normalize":["w)`"],"`sort .":["map","map","map","map","map","map","map","sort`"],"`sort a'`":["still","or"],"`sort a`":["is"],"`sort la":["=="],"`sort la`.":["GHC"],"`sort lowerA`":["and"],"`sort lower{A,B}`":["are"],"`sort ls`":["and"],"`sort s1'`":["might"],"`sort source":["=="],"`sort source`":["is"],"`sort str'`":["so"],"`sort w":["==","=="],"`sort w1`":["are"],"`sort w`":["are","in"],"`sort word`":["to"],"`sort x":["=="],"`sort x`":["is"],"`sort xs`":["would"],"`sort'` isn't":["the"],"`sort'` probably":["isn't"],"`sortAndLower w1`":["is"],"`sortAndLower` the":["parentheses"],"`sortBy (\\(x,":["_)"],"`sortLower st`":["is"],"`sortStudents` could":["be"],"`sortValues` as":["`fmap"],"`sort` *and*":["`insert`?"],"`sort` and":["`group`","the"],"`sort` are":["also"],"`sort` doesn't":["buy"],"`sort` from":["Data.List","Data.List,"],"`sort` in":["your"],"`sort` is":["O(n","the"],"`sort` look":["different"],"`sort` makes":["the"],"`sort` more":["than"],"`sort` on":["the","`w`"],"`sort` to":["decide"],"`sort` with":["higher"],"`sort` works":["and"],"`sort`, `head`,":["or"],"`sort`, or":["`on`.","`length`"],"`sort`, so":["I"],"`sort`. Be":["careful"],"`sort`. I":["think"],"`sort`? You'll":["want"],"`sorted ::":["School"],"`sorted =":["M.map"],"`sortedLetters`, I'm":["thinking"],"`sortedWord word1`":["is"],"`sortedWord` it's":["not"],"`sorted` a":["little"],"`sorted` and":["`grade`"],"`sorted` because":["you're"],"`sorted` better":["than"],"`sorted` by":["one"],"`sorted` cannot":["avoid"],"`sorted` could":["be"],"`sorted` instead":["of"],"`sorted` is":["as"],"`sorted` since":["doing"],"`sorted` that":["you"],"`sorted` you'd":["need"],"`sorted` –":["`toAscList`"],"`sorted`. I":["assume"],"`sorted`. Using":["`grade`"],"`source` exactly":["once."],"`space`, `signed`,":["and"],"`span` and":["simply"],"`span` instead?":["`dropWhile`"],"`specialChar` to":["pass"],"`specialChar`? What":["purpose"],"`split str":["="],"`split5`. It's":["also"],"`splitAt 10`":["to"],"`splitAt 3":[".","(number","$"],"`splitAt ::":["Int"],"`splitAt` and":["pointfree"],"`splitAt` and/or":["Data.List.Split's"],"`splitAt` in":["`prettyPrint`"],"`splitAt` instead":["of"],"`splitAt` is":["usually"],"`splitAt` looks":["like"],"`splitAt` might":["be","be"],"`splitAt` or":["Data.List.Split's"],"`splitAt` tightens":["it"],"`splitAt` to":["implement","one"],"`splitAt` would":["also"],"`splitAt`'s in":["`prettyPrint`?"],"`splitAt`. You":["could"],"`splitBy` (compare":["the"],"`splitEvery`. Alternatively":["you"],"`splitIntoAlphaWords` function":["a"],"`splitOn \"\\n\"`":["is"],"`splitOn` now":["too."],"`splitPhone` return":["a"],"`splitPlaces' at":["Phone.hs:14:23-33"],"`splitPlaces` from":["Data.List.Split","`Data.List.Split`."],"`splitPlaces` is":["very"],"`splitPlaces` to":["simplify","shorten"],"`splitPlaces`, but":["it"],"`splitWhen` because":["then"],"`splitWhen`, you":["should"],"`splitWords` can":["be"],"`splitWords` you":["can"],"`split` a":["little"],"`split` and":["`wordsBy`"],"`split` first":["because"],"`split` has":["already"],"`split` in":["the"],"`split` or":["`splitWith`).","use"],"`split` package":["(which"],"`split`. The":["input"],"`sqrt ::":["Double"],"`sqrt` in":["`squareSize`"],"`sqrt` like":["`sqrt"],"`sqrt` result":["with"],"`sqrt` with":["Double"],"`square (n":["+"],"`square 64`":["gives"],"`square 65":["-"],"`square ::":["Int"],"`square n`":["values","and"],"`squareSize ::":["String"],"`squareSize` looks":["more"],"`squareSize` that":["it"],"`squareSize`, since":["it's"],"`squareSize`? Or":["simply"],"`square` at":["all"],"`square` but":["there"],"`square` more":["efficient"],"`square`: `square":["(n"],"`start +":["1"],"`start \u003e":["end`"],"`start` is":["0"],"`start` such":["that"],"`stigid` isn't":["too"],"`str ==":["\"\"`","(map","capStr`.","x`"],"`strToLower` at":["all,"],"`str` a":["binding"],"`str` and":["then"],"`str` bound":["name."],"`str` for":["every"],"`str` so":["that"],"`str` which":["is","it"],"`str` would":["be"],"`str`. They":["do"],"`strand` argument":["like"],"`stringToPlants ::":["String"],"`string` argument":["on"],"`string` exactly":["once,"],"`stringsToEntries` should":["have"],"`strip =":["filter"],"`stripMessage` at":["all."],"`strip` at":["all"],"`strip` for":["example.","`String`","strings"],"`strip` function.":["However,"],"`strip` is":["well","here."],"`strip` or":["`null`"],"`strip` should":["be"],"`strip` to":["sanitize"],"`stripped` seems":["to"],"`stripped`. If":["there"],"`subscriberLine` is":["also"],"`subsequenceFromTo` are":["unnecessary,"],"`succ (succ":["(…"],"`succ cnt`":["since"],"`succ` and":["`pred`,"],"`succ` to":["get"],"`sum $":["zipWith","map"],"`sum (addends":["n)`"],"`sum .":["map"],"`sum []":["=="],"`sum it":["=","="],"`sum. zipWith":["((fromEnum"],"`sum` &":["`map`"],"`sum` actually":["does"],"`sum` and":["`zipWith`?","`map`.","`map`","`map`","`map`","`map`","`filter`","`map`"],"`sum` but":["thought"],"`sum` from":["Prelude"],"`sum` instead":["of",":)"],"`sum` or":["`length`."],"`sum`, or":["I"],"`sum`. I":["presume"],"`summarize` in":["point"],"`sw` are":["floated-out"],"`swap .":["(,)"],"`swapConcat =":["(uncurry"],"`swapMVar` and":["`void`."],"`swapMVar` are":["not"],"`swapMVar` could":["be"],"`swapMVar` to":["remove"],"`swap` function":["too."],"`t2u` using":["pattern"],"`tToU`, if":["you"],"`tToU`. Would":["that"],"`t` is":["forced"],"`t` read":["better"],"`tail` and":["rejected"],"`tail` instead":["of"],"`tail`. In":["fact,"],"`tails` function":["that"],"`tails` function,":["as"],"`tails` may":["be"],"`tails`, might":["be"],"`tails`, that's":["useful!"],"`take (length":["s"],"`take 10":["$","$","$"],"`take 1`":["and"],"`take 4`":["in"],"`take dv":["(repeat"],"`take mult":["."],"`take n":["$","xs`","(drop"],"`take x":["$"],"`takeDown` and":["`leftOnTheWall`"],"`takeDown` has":["another"],"`takeMVar a":["\u003e\u003e="],"`takeWhile` and":["`iterate`."],"`take` and":["`drop`."],"`take`, `length`":["and"],"`take`. Just":["`mapM`,"],"`take`s and":["`drop`s","`drop`s","`drop`s"],"`talkToBob`. It":["gives"],"`tallyWord` looks":["much"],"`tally`, check":["this:"],"`target` is":["evaluated"],"`target` to":["variables"],"`test ::":["String","String"],"`testBit` could":["make"],"`testBit` even":["more"],"`testBit` from":["Data.Bits"],"`testBit` is":["definitely"],"`testBit` to":["make","make"],"`thousands`, `hundreds`,":["etc."],"`thymidineToUracil` to":["`tToU`."],"`thymidine` and":["`uracil`"],"`thymidine` as":["functions"],"`thymineToUracil` makes":["it"],"`time` command":["to"],"`titleCase` or":["`capitalize`"],"`to/fromList`. I":["will"],"`toAscList` anyways":[":)"],"`toAscList` is":["more"],"`toAscList` so":["I"],"`toAscList` that":["is"],"`toAscList` to":["be"],"`toAscList`. Then":["you"],"`toBinary` return":["`Maybe"],"`toBit` for":["our"],"`toChar`, not":["`show"],"`toComparable` might":["be"],"`toComparable` using":["`Data.Function.on`."],"`toDecimal'` one":["the"],"`toDecimal` I":["don't"],"`toDecimal` a":["bit"],"`toDecimal` iteratively,":["without"],"`toDecimal` should":["handle"],"`toEnum 7`":["will"],"`toEnum w`":["with"],"`toEnum` (to":["convert"],"`toEnum` and":["`fromEnum`","`fromEnum`"],"`toEnum` makes":["`nextWeekday`"],"`toEnum` should":["be"],"`toEnum` which":["might"],"`toEnum`). In":["this"],"`toEnum`, `fromEnum`,":["`maxBound`"],"`toEnum`, `minBound`,":["`maxBound`)."],"`toEnum`, there's":["no"],"`toList h":["++"],"`toList` a":["little"],"`toList` already":["returns"],"`toList` and":["a","`f`"],"`toList` does":["this"],"`toList` implementation":["and"],"`toList` is":["a","internal"],"`toList` makes":["it"],"`toLower &amp;&amp;&amp;":["const"],"`toLower c`":["for"],"`toLower letter`":["for","for"],"`toLower' a":["/="],"`toLower'` as":["a"],"`toLower` before":["splitting."],"`toLower` into":["line"],"`toLower` is":["perfectly"],"`toLower` once":["for"],"`toLower` would":["be"],"`toMap .":["fromList"],"`toNoise ::":["Integer"],"`toNucleotide` by":["using"],"`toOccurList .":["fromList"],"`toPlant` I":["much"],"`toRNA ::":["[Nucleotide]"],"`toRNA =":["map","map","map","map","map","map","map","map","map"],"`toRNA'` doesn't":["really"],"`toRNA'` has":["type"],"`toRNA'` would":["often"],"`toRNA'`'s parameter,":["which"],"`toRNA` (this":["eta-reduction"],"`toRNA` a":["bit"],"`toRNA` accordingly.":["But"],"`toRNA` and":["`translateNucleotide`"],"`toRNA` before":["`replace`,"],"`toRNA` but":["otherwise"],"`toRNA` doesn't":["have"],"`toRNA` from":["the"],"`toRNA` function":["to","looks","with"],"`toRNA` function,":["and"],"`toRNA` in":["[point-free](http://www.haskell.org/haskellwiki/Pointfree)","[point","a","point-free","point-free","a"],"`toRNA` is":["a"],"`toRNA` might":["be"],"`toRNA` points-free":["by"],"`toRNA` should":["have","probably"],"`toRNA` since":["the"],"`toRNA` that":["it"],"`toRNA` to":["strings).","point-free"],"`toRNA` using":["`where`"],"`toRNA` wouldn't":["do"],"`toRNA` you":["don't"],"`toRNA`'s type":["signature?"],"`toRNA`, but":["it","`translateNucleotide`?"],"`toRNA`, so":["you"],"`toRNA`, you":["could"],"`toReversedList` then":["`head.toReversedList`"],"`toString` is":["enough."],"`toTuple =":["(,1)`"],"`toTuple` just":["`toTuple"],"`toUpper '-'`":["=="],"`toUpper b":[":"],"`toUpper k`":["in"],"`toUpper letter`":["once"],"`toUpper' =":["map"],"`toUpper' ws":["="],"`toUpper(b):bs` is":["usually"],"`toUpper` in":["parentheses"],"`toUpper` is":["confusing"],"`toUpper` to":["`titleCase`"],"`toUpper` would":["be"],"`toUpper`, and":["although"],"`toWeekDate`. Given":["that"],"`toWeekday` as":["well,"],"`to` that":["takes"],"`to`). Other":["than"],"`token` a":["bit"],"`tokenize` (`f`":["&"],"`tokenize` step":["and"],"`tokens` definitions":["by"],"`total =":["2^64-1`","2","sum","fromIntegral"],"`total` and":["`square`"],"`total` can":["be","be"],"`total` more":["efficient."],"`total` that":["doesn't"],"`total`! HINT:":["don't"],"`total`, it":["might"],"`total`. Other":["than"],"`total`? There's":["no"],"`trans` more":["than"],"`transcribe` on":["its"],"`transcribe` were":["lifted"],"`transcribe`, but":["make"],"`transcribe`, though,":["since"],"`transcribe`. Both":["guards"],"`transform ::":["Char"],"`transform m":["="],"`transformElem` is":["a"],"`transformThymidine` (which":["is"],"`transform` (shorter":["but"],"`transform` function":["inside"],"`transform` is":["kind"],"`transform` shouldn't":["be"],"`translateDNA` binding":["on"],"`translateNucleotide` into":["a"],"`translateNucleotide` more":["closely"],"`translateNucleotide` to":["write"],"`translateNucleotide` would":["have"],"`translate` as":["recommended"],"`translate` is":["only"],"`translate` under":["`toRNA`"],"`transpose` could":["be"],"`transpose` here,":["many"],"`transpose` which":["was"],"`trim` function,":["you"],"`trim` is":["very","a"],"`true` for":["an"],"`tryPutMVar` has":["no"],"`tryTakeMVar` is":["buggy"],"`try` function":["looks"],"`turnLeft` ...":["I"],"`turnLeft` /":["`turnRight`."],"`turnLeft` a":["little"],"`turnLeft` and":["`turnRight`"],"`turnLeft` by":["hand."],"`turnLeft` would":["be"],"`turnRight` and":["`turnLeft`","`turnLeft`","`turnLeft`"],"`turnRight` just":["call"],"`turnRight`, `turnLeft`":["would"],"`turnRight`. If":["you"],"`turn` function":["with"],"`two` was":["a"],"`txt ==":["map"],"`type MyState":["="],"`type School":["="],"`type` but":["I"],"`type` synonym":["would"],"`type` synonym.":["Then,"],"`type` won't":["accomplish"],"`type`, I":["was"],"`unSchool` instead":["of","of"],"`unSchool` or":["`_school`."],"`unSchool` rather":["than"],"`uncurry (/=)`,":["but"],"`uncurry (/=)`.":["Although","To"],"`uncurry zip":["."],"`uncurry3` you":["could"],"`uncurry` and":["friends.","`splitAt`."],"`uncurry` entirely":["by"],"`uncurry` or":["`(&amp;&amp;&amp;)`,"],"`uncurry` with":["a"],"`uncurry`, it":["made"],"`uncurry`, like":["this:"],"`uncurry`, otherwise":["this"],"`uncurry`... it":["makes"],"`uncurry`? Also,":["the"],"`undefined` for":["f,"],"`undefined` or":["`error`).","`error`","`error","`error`."],"`undefined`). The":["`isSpace`"],"`undefined`s in":["`mappings`."],"`unequal (a,b)":["="],"`unfoldr` and":["`scanl`","`*`."],"`unfoldr` from":["Data.List."],"`unfoldr` is":["a","there"],"`unfoldr` with":["`guard`"],"`unfoldr` would":["be"],"`unfoldr`. Not":["sure"],"`unify x":["=="],"`unify` and":["`anagram`"],"`unionWith (+)":["$"],"`unionWith` and":["`fromList`"],"`unionWith` at":["all."],"`unionWith` to":["add"],"`unionWith`. Pass":["it"],"`union` function":["even"],"`union` of":["2"],"`union` required)":["if"],"`union` would":["be"],"`union`: ![equation](http://latex.codecogs.com/gif.latex?O(n%5C:log%5C,n)+O(n)":["="],"`unique words`,":["since"],"`unique` does,":["but"],"`unique` is":["slow"],"`unique` looks":["like"],"`unlines (map":["f","verse"],"`unlines .":["map","map"],"`unlines ::":["[String]"],"`unlines [firstPart,":["secondPart]`"],"`unlines xs`,":["you"],"`unlines` and":["`map`.","`map`","`map`","the","`unwords`","`map`","see"],"`unlines` for":["this."],"`unlines` function":["usefull","which"],"`unlines` functions":[":)"],"`unlines` has":["looked"],"`unlines` idea":["for"],"`unlines` instead":["of","of"],"`unlines` is":["helpful","equivalent","a"],"`unlines` looks":["at"],"`unlines` may":["be","also","be"],"`unlines` needs":["to"],"`unlines` now":[":-)"],"`unlines` rather":["than"],"`unlines` there":["as"],"`unlines` to":["put","join"],"`unlines` useful,":["as"],"`unlines`, `map`,":["and"],"`unlines`, and":["it's"],"`unlines`. I":["also"],"`unlines`. Otherwise,":["I"],"`unlines`. That":["is"],"`unsafePerformIO` doesn't":["work"],"`unsafePerformIO` isn't":["likely"],"`unsafePerformIO`. This":["is"],"`unsubmit` functionality":["is"],"`unwords [a,b,c..]`":["and"],"`unwords` and":["`unlines`.","`unlines`","`unlines`"],"`unwords` but":["otherwise"],"`unwords` can":["be"],"`unwords` functions.":["and"],"`unwords` instead":["of","of","of"],"`unwords` is":["more","[String]"],"`unwords` may":["also"],"`unwords` might":["be"],"`unwords` or":["`unlines`"],"`unwords` to":["avoid"],"`unwords` will":["improve"],"`unwords`. I'd":["forgotten"],"`unwords`. On":["the"],"`up` function":["looks"],"`up` function.":["It"],"`upperCase =":["map"],"`upperCase` suggests":["that"],"`uracilToThymidine ::":["Nucleotide"],"`uracil` and":["`thymidine`"],"`uracil` are":["top-level"],"`v` with":["initial"],"`validChars` to":["get"],"`validDnaNucleotide`, which":["are"],"`validFactor` or":["not."],"`validNucleotides`, `invalidNucleotide`,":["`baseMap`"],"`valid` and":["`lastTen`"],"`valid` check":["on"],"`validate` isn't":["correct,"],"`var \u003c-":["func`"],"`var \u003c-`.":["To"],"`verse 0`":["separately,"],"`verse a":["++"],"`verse n":["="],"`versePartOne i":["++"],"`verse` I":["tried"],"`verse` instead,":["it"],"`verse` it":["will"],"`verse` over":["the"],"`verse` so":["you"],"`verse` to":["remove","pull"],"`verse` when":["called"],"`verse`) but":["everything"],"`versesToSing` is":["interesting,"],"`verses` is":["just"],"`voice` is":["already"],"`void` from":["Control.Monad","Control.Monad"],"`void` is":["used"],"`w /=":["a"],"`w', x'`,":["and"],"`w'` and":["`sort"],"`w'` inside":["is"],"`w, x`":["to"],"`w` and":["`sw`"],"`w` are":["only"],"`w` if":["and"],"`w` in":["`notIdentical"],"`w` is":["Wednesday"],"`w` on":["line"],"`w` unnecessarily":["inside"],"`w` variable":["binding"],"`w`. For":["example,"],"`wall` are":["superfluous."],"`wasShouted` /":["`isUpperOrSpecial`"],"`wasShouted` and":["`hasLetter`."],"`weekDayDiff` function":["doesn't"],"`weekDayDiff`) and":["the"],"`weekOf` in":["`toWeekDate`"],"`wheel` could":["use"],"`when` (because":["of"],"`when` and":["that"],"`when` either,":["maybe"],"`when` is":["a"],"`when` to":["`responseTo`"],"`where (maxDecimalValue,":["maxRomanValue):_"],"`where oneOf":["="],"`where t":["="],"`whereAt` and":["`ofWhat`"],"`where` almost":["always"],"`where` and":["the","the","below","can't","I"],"`where` as":["`yelling`."],"`where` at":["the"],"`where` bindings)":["instead"],"`where` bindings,":["and","but"],"`where` bindings.":["My"],"`where` block,":["if"],"`where` clause":["and","in","for","called","of","to","for","if","defining","on","in","of","sans","grants","to","in","of","here","belonging","is","belonging","belonging","(`lookupPlants`)!"],"`where` clause).":["Personally,"],"`where` clause,":["but","or","personally.","it's"],"`where` clause.":["It","That"],"`where` clauses":["for","don't"],"`where` clauses.":["I","they"],"`where` definitions,":["because"],"`where` for":["here?"],"`where` goes":["on"],"`where` in":["pretty"],"`where` indented":["by"],"`where` inside":["a"],"`where` instead":["of","of"],"`where` is":["generally","preferred.","also","almost","more","syntax","more","far"],"`where` on":["the","the","the","its","a","its","its","its","the","its","its","its"],"`where` or":["`let`."],"`where` rather":["than"],"`where` should":["all","be"],"`where` so":["much"],"`where` style":["since"],"`where` such":["that"],"`where` the":["binding"],"`where` to":["`let`,","be"],"`where` usually":["goes"],"`where` vs":["`let`;"],"`where` where":["it's"],"`where` will":["not","look"],"`where` without":["them"],"`where` would":["be"],"`where`, but":["it's"],"`where`-defined predicates":["on"],"`where`-scoped definition":["is"],"`withMVar` doesn't":["mutate"],"`word ==":["candidate`"],"`word' /=":["anagram'"],"`word1 /=":["word`"],"`word1` is":["curried?"],"`wordCount \"foo%%%bar\"":["=="],"`wordCount ::":["String","String"],"`wordCount =":["frequencies","fromListWith"],"`wordCount` a":["lot:"],"`wordCount` and":["`summarize`","`wordCount`"],"`wordCount` function":["got"],"`wordCount` has":["the"],"`wordCount` i":["would"],"`wordCount` in":["point-free","this"],"`wordCount` is":["too."],"`wordCount` point":["free"],"`wordCount` point-free,":["`foldl'"],"`wordCount` should":["have","have"],"`wordCount` works":["fine"],"`wordCount`'s definition":["was"],"`wordCount`'s normalization/splitting":["in"],"`wordCount`, not":["everything."],"`wordCount`, you":["can"],"`wordCount`. Note":["that"],"`wordCounters` without":["syntax"],"`wordCounters`. `[(w,":["1)"],"`wordList str":["="],"`wordList` can":["be"],"`word` (which":["is"],"`word` and":["`chars`"],"`word` here.":["I"],"`word` in":["map,","the","`anagramsFor`?"],"`word` is":["only","normalized"],"`word` too.":[":)"],"`word`, eek.":["This"],"`words \"\"":["=="],"`words .":["map`.","filter`","strip`","cleanUpStr`","sanitize`","map"],"`words ==":["wordsBy","wordsBy"],"`words' lowerText`":["you"],"`words'` function,":["which"],"`words'` implementation":["is"],"`wordsBy (not":[".",".",".",".",".","."],"`wordsBy .":["map`"],"`wordsBy` and":["`isAlphaNum`?"],"`wordsBy` behave":["in"],"`wordsBy` can":["help"],"`wordsBy` from":["Data.List.Split","`Data.List.Split`,","`Data.List.Split`","`Data.List.Split`,","`Data.List.Split`","Data.List.Split.","`Data.List.Split`","Data.List.Split","`Data.List.Split`.","module","`Data.List.Split`.","the","Data.List.Split","Data.List.Split","Data.List.Split.","`Data.List.Split`","Data.List.Split.","`Data.List.Split`.","Data.List.Split."],"`wordsBy` function":["that","that","that","that","that","that","in","can","that","that","works","that","should","instead","that","that","that","from"],"`wordsBy` function,":["you"],"`wordsBy` guarantees":["that"],"`wordsBy` in":["`Data.List.Split`","`Data.List.Split`;"],"`wordsBy` instead":["of"],"`wordsBy` is":["a","a","actually","the"],"`wordsBy` method":["you"],"`wordsBy` needs":["to"],"`wordsBy` predicate":["into"],"`wordsBy` predicate.":["Hint:"],"`wordsBy` that":["you"],"`wordsBy` to":["reformatting"],"`wordsBy` was":["just","kind"],"`wordsBy` which":["would"],"`wordsBy` won't":["have"],"`wordsBy` would":["also","be"],"`wordsBy` you":["can","can"],"`wordsBy`, I":["like","usually"],"`wordsBy`, but":["this"],"`wordsBy`, for":["example,"],"`wordsBy`, from":["Data.List.Split,"],"`wordsBy`, is":["better"],"`wordsBy`, so":["it","that"],"`wordsBy`, they":["make"],"`wordsBy`, you":["could","won't"],"`wordsBy`. Given":["these"],"`wordsBy`. Got":["Haskell"],"`wordsBy`. I":["submitted"],"`wordsBy`. Included":["in"],"`wordsBy`. Not":["sure"],"`wordsFrom` can":["be"],"`wordsWhen (…)":["(map"],"`wordsWhen`, so":["you"],"`words` and":["`filter`...","a","`sanitize`","`removeNonAlphanumerics`","`strip`."],"`words` but":["lets"],"`words` code":["by"],"`words` due":["to"],"`words` from":["Prelude."],"`words` function":["(maybe"],"`words` functions":["would"],"`words` in":["the","Prelude"],"`words` instead":["of"],"`words` is":["a","in"],"`words` only":["working"],"`words` plus":["`filter`."],"`words` starts":["out"],"`words` that":["splits"],"`words` will":["split"],"`words`, but":["I"],"`words`, simplifying":["the"],"`words`. A":["reason"],"`wordsby` to":["more"],"`worth`. You":["can"],"`writeIORef` since":["2"],"`writeIORef`. Memory":["in"],"`ws'` once":["for"],"`x /=":["y","w`"],"`x :":["seen`","xs`."],"`x ==":["y"],"`x \\\\":["y`"],"`x' shadows":["the"],"`x'` (pronounced":["\"x"],"`x1 -":["x2`."],"`x:xs`, meaning":["`x`"],"`x` and":["`y`","`y`,","returns"],"`x` appropriate":["in"],"`x` are":["only"],"`x` can't":["be"],"`x` for":["a"],"`x` implicit":["and"],"`x` in":["`line_take`","Haskell,"],"`x` is":["unused","the"],"`x` once":["even"],"`x` too":["(in"],"`x` which":["could"],"`x`, and":["to"],"`x`, or":["the"],"`xn =":["normalize"],"`xs ==":["filter","\"\"`"],"`xs' shadows":["the","the"],"`xs` appears":["on"],"`xs` everywhere":["you"],"`xs` for":["a"],"`xs` in":["`isYell`"],"`xs` is":["used"],"`xs` the":["tail"],"`xs` then":["another"],"`xs` you":["can"],"`xs`) because":["they"],"`y1 -":["y2`"],"`y` but":["it"],"`y` such":["that"],"`y`, even":["though"],"`yearOn Earth`":["though."],"`year`, and":["they're"],"`yell` and":["`ask`"],"`yell` is":["an"],"`yell` might":["be"],"`yelling` a":["little"],"`yelling` as":["`all"],"`yelling` doesn't":["have"],"`yelling` is":["separated","also"],"`yelling` should":["be"],"`yelling` without":["the"],"`yelling`, which":["is"],"`ys` argument":[":)"],"`ys` is":["small."],"`ys` or":["`ds`"],"`zip \"AGCT\"":["(repeat"],"`zip (f":["x)"],"`zip (map":["f"],"`zip (sort":["childs)"],"`zip nucleotide":["(replicate"],"`zip strand":["$"],"`zip xs":["(repeat","(repeat"],"`zipDNA =":["zipWith"],"`zipDNA dna`":["and"],"`zipDNA` in":["pointfree"],"`zipWith ($)":["(cycle","(cycle","cycle`","[id,"],"`zipWith (++)`":["is"],"`zipWith (/=)`":["which"],"`zipWith a":["b`"],"`zipWith f":["a"],"`zipWith id`":["isn't"],"`zipWith3` without":["creating"],"`zipWith` avoids":["the"],"`zipWith` could":["be","be"],"`zipWith` implementation":["is"],"`zipWith` instead":["of","of","of","of","of"],"`zipWith` is":["nice","definitely","useful"],"`zipWith` on":["the"],"`zipWith` to":["do","eliminate","split"],"`zipWith`, although":["you"],"`zipWith`, definitely":["a"],"`zipWith`, it":["will"],"`zipWith`. I":["would"],"`zipWith`. Using":["`(/=)`"],"`zipWords` in":["point-free"],"`zip` and":["`uncurry`","`uncurry`,"],"`zip` function":["will"],"`zip` in":["the","disguise."],"`zip` on":["line"],"`zip` then":["you"],"`zip`, `reverse`,":["or"],"`zip`, so":["you"],"`zip`? You":["might"],"`zs` name":["and"],"`{-# LANGUAGE":["TupleSections","TupleSections","TupleSections","TupleSections","TupleSections","TupleSections","TupleSections","TupleSections","TupleSections","TupleSections,","TupleSections","TupleSections","OverloadedStrings","TupleSections"],"`{-# RULES":["…"],"`| guard":["="],"`| n":["\u003c"],"`| otherwise":["=","="],"`|\u003e` is":["the"],"`|\u003e` operator":["in"],"`|` and":["binary","`where`","the"],"`||` (such":["as"],"`||` also":["passes"],"`||` instead":["of"],"`||` is":["infixr","lower"],"`||` operator":["unless"],"`||` or":["`&&`"],"`||`, `not`,":["etc."],"`||`. I":["don't"],"`||`? (I":["see"],"`}` rather":["than"],"`… +":["1`"],"`…` is":["an"],"a !(Map":["k"],"a \"Warning:":["The"],"a \"[\"":["and"],"a \"[Char]\"":["so"],"a \"]\",":["a"],"a \"aaaaaaaaaaaab\"),":["this"],"a \"chill-out\"":["string,","string."],"a \"float":["out\"","out\""],"a \"looks":["great!\""],"a \"new":["word\""],"a \"non-empty\"":["BST"],"a \"not":["equals\""],"a \"shout\"":["which"],"a \"space":["leak\"."],"a \"spine-strict\"":["data"],"a \"wildcard":["import\","],"a $":["and"],"a &&":["sort","sort","trace","isUpper","isUpper","isUpper"],"a &amp;&amp;":["last","all","not","none"],"a 'blank":["tile'"],"a 'fresher!":["Can"],"a 'non-standard'":["(?)"],"a 'smart":["constructor')"],"a 'sum":["+"],"a 'thunk'":["leaking."],"a ((++)":["b"],"a (A":["x"],"a (Maybe":["(BST","(BTree","(Tree","(BST","(Node","a)","a)`","(N"],"a (Nothing":["means"],"a (b":["c"],"a (conceptually)":["cleaner"],"a (repeat":["b)"],"a (reverse":["[from..to])"],"a (some-expr)`":["will"],"a (tail-)recursive":["helper"],"a (very":["mildly)"],"a (very)":["long"],"a *lot*":["of"],"a *str*":["filters"],"a *strict*":["left"],"a +":["b"],"a ++":["(b","\",","(if"],"a -":["1"],"a -&gt;":["a","a","c","b"],"a -\u003e":["f","f","f","(a","a)","a","a)","f","b","b","Int`,","a)","Map","Map","a)","Map","a","c","c","f","f","a","Bool","a","Bool","a1","f","f","f","b","a","Bool","b","b","(a,","a","a","b","Maybe","[a]","a","Bool","(a","(a","c","b","b","a","a","b","c","String\u003c/pre\u003emeaning","Bool`?","Maybe","[a]","a`","a","a","a","Bool"],"a .":["f`"],"a ..":["b]`,"],"a .cabal":["file"],"a /=":["b`","toLower'"],"a 10":["element"],"a 2":["x"],"a 2-space":["indent"],"a 2-tuple,":["`(,)"],"a 3":["element"],"a 3-tuple":["instead","of"],"a 4":["x"],"a 64-bit":["platform"],"a :":["(as"],"a ::":["A"],"a \u003c-":["as","openAccount","b","openAccount","openAccount"],"a \u003ccode\u003elet\u003c/code\u003e":["statement."],"a \u003ccode\u003emap\u003c/code\u003e":["solution"],"a =":["a","Node","SnocList","Node","Node","\\b","Node","Deque","Bin","filter","Node","Matrix","map","map","Node","('A',","guard0`,","Node","g","mconcat","Node","Matrix","Matrix","..,","Dq","Empty","(Maybe","N","N","N","10","g"],"a =&gt;":["Eq","a`","[Char]","[a]","Bool","Bool"],"a ==":["'T'","b","'1'","0)`","b","f","f","g"],"a =\u003e":["[a]","[a]","[a]","a","a","a`.","a`","a","Bool","a","a`.","a","Fractional"],"a \u003e\u003e=":["\\","putMVar"],"a Binary":["Tree,"],"a Bool":["is"],"a Char":["at","that","in","for","index."],"a Char,":["you","not"],"a Char-based":["solution"],"a DFA":["or"],"a DNA":["string"],"a Data.Array":["instead"],"a Data.List":["of"],"a Data.Map":["standpoint","for","should","(or","solution,"],"a Data.Map.":["(Data.Map.Strict"],"a Data.Set":["to"],"a Day":["that","to"],"a Deque":["as"],"a Double":["(it"],"a DrunkTalk.":["Or"],"a FP":["lang"],"a Functor":["instance","instance","instance","(`snd`","instance"],"a Functor.":["Functors"],"a Grade).":["Can"],"a HLint":["hint"],"a HUGE":["jump"],"a Haddock":["comment."],"a HashMap":["which"],"a Hashmap,":["but"],"a Haskell":["expert,","function","for","noob","expert","beginner.","For","newbie.","newbie","thing","tutorial","return"],"a Haskell](http://learnyouahaskell.com/)_?":["I"],"a Haskell_.":["I"],"a Haskeller,":["so"],"a Java/C#":["background."],"a LANGUAGE":["pragma"],"a Lisp/prefix":["style."],"a MVar":["in"],"a Map":["Char","though,","if","instead.","with","at","using","is","internally","that's","directly.","since","and","as","in","with","like","or","is","wouldn't"],"a Map),":["then"],"a Map,":["because","Array","but","you","although","because","an","since","it's","because","instead"],"a Map.":["The","Thanks","See"],"a Map?":["Data.Bits"],"a Maybe":["type","type","monad?"],"a Monoid?\"":["muscles."],"a NFData":["instance","instance,"],"a Nil":["case"],"a Nucleotide":["type"],"a PR":["to","that"],"a PR.":["I"],"a Prelude.foldl,":["hinting"],"a RNA":["data"],"a RULE":["to"],"a Right":["to"],"a Robot":["and"],"a STM":["monad)."],"a Set":["--"],"a Set.":["The"],"a Strict":["map"],"a String":["and","wouldn't","and","in","so","that's","is","straight"],"a String.":["WHat","Changing","So"],"a Tuesday":["this"],"a TupleSections":["language"],"a Youda":["condition"],"a [Difference":["List](http://www.haskell.org/haskellwiki/Difference_list)?"],"a [page":["with"],"a [pointfree](http://www.haskell.org/haskellwiki/Pointfree)":["style","style."],"a ^":["b","(b"],"a __lot__":["of"],"a _spine-strict_":["data"],"a `$`":["to"],"a `(String,":["String,","String)`","a0)`"],"a `(not":["."],"a `(y:ys)`":["pattern."],"a `,`":["or"],"a `=`.":["You"],"a `?`":["so"],"a `Char":["-\u003e","-\u003e","-\u003e"],"a `Char`":["will","list"],"a `Control.Arrow`":["combinator"],"a `DNA":["[Base]`"],"a `Display":["(EmotionalContent"],"a `IORef":["String`"],"a `Left":["a`,"],"a `Map":["Name","Key"],"a `Map.fromList*`":["family"],"a `Map`":["earlier","so","is","as","will"],"a `Maybe":["a`","[Integer"],"a `Maybe`":["value"],"a `Maybe`?":["It's"],"a `O(n)`":["price"],"a `Parser":["a0`."],"a `Read`":["instance."],"a `Right":["Int`"],"a `Robot`":["and","has"],"a `State`":["monad?"],"a `String`":["into","in"],"a `String`,":["it"],"a `TVar":["(Maybe"],"a `Text`":["type"],"a `UTCTime`":["by"],"a ```...":["where```"],"a ```Maybe```.":["Did"],"a ```seq```":["or"],"a ```where```":["clause."],"a `add`":["getMap"],"a `case`":["expression","rather","to","expression,","statement.","expression","is","here"],"a `case`.":["Usually"],"a `cfgPerformGC`":["parameter"],"a `choice`":["function"],"a `countWords`":["step."],"a `count`":["function","for"],"a `data`":["type"],"a `deepseq`":["or"],"a `divMod`":["function"],"a `do`":["block."],"a `filter`":["or"],"a `findWithDefault`":["function"],"a `foldl'`":["over"],"a `foldl`":["inside"],"a `foldl`,":["don't"],"a `foldr`":["is","since","and","rather"],"a `foldr`---it's":["much"],"a `fromListWith`":["using","function"],"a `generate`,":["I"],"a `go":["[]"],"a `isSilence`":["wrapper"],"a `last`":["for"],"a `let`":["expression","or","for","in"],"a `list`,":["so"],"a `map":["stringMap`","(,1)`","toLower`."],"a `map`":["and","rather","and","rather"],"a `mkName`":["function"],"a `name`":["variable."],"a `newtype":["Nucleotide"],"a `newtype`.":["Then"],"a `newtype`;":["nice!"],"a `not":["::"],"a `nub`":["function"],"a `pred`":["function,"],"a `read`":["instance"],"a `replace`":["[here](http://hackage.haskell.org/package/MissingH-1.0.0/docs/Data-String-Utils.html#v%3Areplace)."],"a `run*`":["or"],"a `seq`":["b"],"a `shouting`":["predicate,"],"a `showProtein`":["and"],"a `sorted":["::"],"a `swap`":["function"],"a `toEnum`":["and"],"a `toNoise":["::"],"a `tokenize`":["step"],"a `type`":["synonym.","synonym"],"a `union`":["of"],"a `var":["\u003c-"],"a `where`":["clause","clause","block,","clause","clause,","clause","clause.","clause.","clause?","binding.","clause","clause,","clause","clause?","clause","clause","clause,","clause","clause","clause","clause","clause"],"a `where`-scoped":["definition"],"a `wordsBy`":["function","function","function","function","function","function","function","function","function"],"a `zipWith`":["instead","instead"],"a `zip`":["in"],"a `{-#":["LANGUAGE"],"a `}`":["rather"],"a a":["a","a","a","a…\".","a","…\"."],"a a…\".":["The"],"a b":["=","=","=","=","c","c`","=","--","c","c'","(c,","=","==","=","=","="],"a b)":["c`"],"a b`":["is","would","is","is","will","is"],"a b`)":["to"],"a backslash":["or"],"a bad":["way","habit","rep),","README,","thing","reviewer.","way","idea","algorithm","number","number","idea","name","tradeoff.","idea.","efficiency","idea","idea"],"a bag":["of","or"],"a balanced":["search"],"a barrier":["to"],"a base":["\u003e","case"],"a beautiful":["two"],"a beginner,":["so"],"a beguinner":["like"],"a benefit":["to","to","to"],"a best":["practice)","to"],"a better":["algorithm,","name","algorithm","way","type.","name.","somewhat","way","way","name","understanding","way","way","way","data","way","name.","function","representation","type","name","way","name","way","solution?","option","algorithm","name","name.","way","function","way","way","way","algorithm","way","understanding","fit","approach?","way","way","way","way.","list","way","definition","idea","word","way","version","way?","fit.","way","algorithm","choice","reason","solution","solution","choice","candidate?","approach?","choice","way","way","approach","approach.","choice","way","option","abstraction","that","way.","way","way","way","way","way","way.","way","way","constant","way.","way","definition","version","filter","algorithm","way"],"a big":["deal.","deal.","deal","deal","deal.","rant","improvement.","advantage","deal,","nested","thunk","difference,","fan","help.","nested","deal,","deal","deal,","gain.","deal","deal","fan","deal","win","deal,","string","deal","deal","difference","fan","fan","number","number","deal","problem","input","big"],"a biggers":["tests"],"a binary":["number,","number","search","tree,"],"a binding":["for","at","for","called"],"a bit":["strange","better","of","simpler.","cleaner","much","more","long","closer,","slicker.","more","shorter,","disorganized.","cleaner.","annoying.","for","awkward","of","laying","unwieldy.","nicer","overkill","cleaner,","cleaner","of","excessively","more","overboard","random,","confusing","simpler","more","overcomplicated,","you","more","shorter","too","cleaner","odd.","more","more","more","clearer","too","better","awkward","less","of","odd,","of","of","of","over","fuzzy","better,","disappointed","simpler","by","more","overkill,","too","big.","cleaner.","excessive?","suboptimal","better","more","of","easier","clunky","more","cleaner","simpler","nicer","more","if","cleaner","overkill","shorter","more","more","more","cleaner","cleaner","nicer.","like","nicer.","more","shorter","ugly","nicer","more","simpler","cleaner.","so","of","clunky","inelegant","more","cleaner.","simpler","more","tighter","of","simpler","more","wary","simpler.","simpler","of","simpler.","more..","strange.","less","simpler","simpler","shorter","too","easier","worse","sloppy","easier","shorter","redundant,","more","technical","confusing","of","too),","illegible","ugly","so","easier","like","simpler","shorter","if","of","excessive","inefficient","more","clearer:","stuck","simpler","of","by","ridiculous)","more","more","complicated,","off","more.","better.","of","longer.","faster","due","of","clever","ugly...","far...","of","simpler","less","too","dense","simpler","if","better","over","confusing","fugly,","weird","longer","less","higher","of","shorter:","more","more","shorter.","more","messy","less","strange,","too","better","to","confusion,","differently:","nicer","odd","more","tricky","weird","more","more","easier","differently","better","simpler","more","faster","split","odd","faster","more","hard","more","less","ambiguous","strange","odd,","and","slower","of","shorter","confused","of","of","more","silly","closer...","by","more","more","further","longer","less","more","more","shorter","of","more","nicer","shorter:","simpler","simpler,","when","for","longer","simpler.","more","clunky.","annoying.","with","simpler","from","using","of","simpler,","more","of","nicer,","annoying","too","of","more.","more","about","further.","with","more","wonky.","too","more","less","more","of","of","more","like:","more","slower.","more","opaque,","more","more"],"a bit,":["since","but","maybe","but","especially","as","I","both"],"a bit.":["You","All","Getting","Also","IRL","There","Here's"],"a bitset":["may"],"a blank":["Char"],"a blast":["writing"],"a blocking":["operation"],"a board":["of"],"a book":["obfuscates","or"],"a boolean":["expression","operator","operator","operator","operator","operator","for"],"a boolean,":["since"],"a bottom":["like","(⊥)"],"a branch":["and"],"a branches":["instead"],"a break":["from"],"a briefer":["way"],"a broader":["range"],"a bug":["in","in"],"a bug.":["I"],"a buildup":["of"],"a built":["in","in"],"a built-in":["way","thing,"],"a builtin":["way"],"a bunch":["of","I","of","of","overall","of","of","for","guys!","of","of","of","of","of"],"a bunch!":[":)"],"a bunch.":["That"],"a burden":["by"],"a c,":["f"],"a caesar":["cipher"],"a cakewalk.":["I"],"a call":["stack","to","to"],"a call-stack":["with"],"a candidate":["because"],"a canonical":["form,"],"a capable":["interface."],"a case":["where","statement","for","like","expression,","by","statement","normalized","statement","statement","where","expression","normalized","where","statement.","for","where","here.","normalized","normalized","in","in","pattern,"],"a case,":["however"],"a catalyst":["for"],"a catch-all":["guard"],"a catch-all,":["which"],"a cell":["of"],"a certain":["way","order.","case?","exercism","letter"],"a chain":["of","of","of","of"],"a chance":["it"],"a change":["here)."],"a changing":["state,"],"a chapter":["in"],"a char":["at","is","is"],"a character":["level","into","that","such","is","from","at","using"],"a check":["for","for","for"],"a choice":["though"],"a choice,":["based"],"a class":["`DNA`","of","of"],"a class.":["Can"],"a classic":["way.","example"],"a clause":["`head"],"a clean":["and","way"],"a cleaner":["solution","way","API","way.","way","solution.","way","way"],"a clear":["improvement","feel","idea"],"a clearer":["delineation","idea"],"a clever":["algorithm","solution,"],"a closed":["form","form","form","form","form","form","account"],"a closed-form":["solution"],"a closer":["look","look","look","look","look","look","look"],"a closure":["and"],"a closure,":["defining"],"a clue":["that","what!","of","what's"],"a code":["smell.","block"],"a collecting":["chunks"],"a combination":["of","of"],"a combinator":["that","and","that"],"a combinator,":["especially"],"a combining":["operation","function.","function,"],"a comma":["in"],"a comment":["at","making","about","why","explaining","about","on","on","about"],"a common":["style","format","problem.","module","technique,","name","technique,","name","scenario.","practice","part."],"a commonly":["used","used"],"a compare":["function"],"a compiler":["would","issue","other","warning","error","warning","optimazation"],"a complete":["function","'partially","newbie","halt:","mess"],"a complexity":["vs"],"a complicated":["transform"],"a composition":["of","of","of","of"],"a composition,":["which"],"a comprehension":["that"],"a computation":["is"],"a computer":["and"],"a concat":["at"],"a concern":["if","here,"],"a concise":["way"],"a conciser":["single-line"],"a concrete":["tips"],"a condition":["with"],"a conditional":["-"],"a conflict":["coming"],"a consequence":["of"],"a constant":["(11,574),","instead","term","time","time","factor","factor"],"a constant,":["you"],"a constructor":["a","that","(either"],"a context":["where"],"a contiguous":["range,"],"a contrary":["opinion"],"a convenient":["way","syntax"],"a conversion":["`toList`...?","to"],"a cool":["way","way"],"a copy":["of","of"],"a correct":["implementation","solution","way","solution,"],"a corresponding":["Read","single"],"a count":["in","of"],"a counter,":["since"],"a counterexample":["to"],"a couple":["times","ways","ways","of","things","of","ways:","changes.","of","of","of","of","of"],"a crawled":["through"],"a crazy":["day"],"a crime":["to"],"a cross":["between"],"a currently":["full"],"a curried":["function"],"a custom":["version","combinator","function,","predicate,","mapping","record","one","data","type","data","function)."],"a cute":["pattern"],"a data":["declaration","type","concept","or","type","structure,","structure."],"a database":["engineer,"],"a datatype":["just","along","for","for","for","for"],"a datatype,":["there's"],"a datatype.":["Since"],"a date":["could","in"],"a day":["to"],"a day,":["return"],"a dead":["comment,"],"a decade":["in"],"a decent":["start,","name,"],"a decision":["on"],"a dedicated":["type,"],"a deep":["indent"],"a deeper":["(but"],"a default":["(PhoneNumber","of","reply","value","`PhoneNumber","case","behavior"],"a definition":["before","is"],"a definitive":["answer..."],"a demand":["and"],"a dependency":["of"],"a dependently":["typed"],"a deprecated":["way"],"a deque":["with"],"a derived":["Enum","Enum"],"a descending":["sequence","list","interval."],"a descriptive":["error","value\u003cpre\u003eisYell"],"a destructor":["on","you"],"a detection":["heuristic"],"a dictionary.":["In","I'll"],"a diehard":["follower"],"a difference":["at","for","in","between","in","is","list,","list.","as","list,","in","list","list,","for"],"a difference,":["and","the","but","but","it"],"a difference.":["`foldl'`"],"a different":["number","result","function","function","predicate","constructor","way","approach","meaning","space","trick","function","way","space","data","day","type","name","module","definition","way.","name","way...","approach.","result,","data","test.","version","route","answer","one."],"a different,":["reset"],"a difficult":["task"],"a digit":["is","to"],"a digit,":["you"],"a dilemma:":["either"],"a direct":["port","port"],"a direction":["here."],"a disagreement":["about"],"a disconnect":["between"],"a discussion":["on"],"a do":["block."],"a dot":["in"],"a doubt,":["this"],"a drop-in":["replacement,"],"a efficiency":["optimization."],"a endless":["spiral"],"a exactly":["one"],"a factor":["of","of"],"a fairly":["standard"],"a fan":["of","too,","of","of"],"a fancy":["way"],"a fantastic":["way","explanation"],"a fast":["`grade`","`add`?"],"a faster":["pass","path","representation,","solution:"],"a feel":["for"],"a feeling":["I","that"],"a few":["small","imports.","years","imports","clever","things.","days","lines.","other","style","bytes:","things","definitions","common","things","ways","times","people","more","letters","things","seconds","that","more","nits","reasons:","ways","minor","small","of","things","style","iterations","superfluous","weeks","weeks","examples","lines.","guards.","more,","simpler,","hundred","thousand).","other","things","of","notes","of","hints.","rules","more","common","other","other","articles","other","days?","reads-through.","lines!","more","million"],"a file":["of"],"a filter":["would"],"a filter,":["but"],"a filter.":["I","If"],"a filters":["based"],"a fine":["solution,","solution,","solution."],"a finite":["alphabet","(and"],"a first-class":["function."],"a fixed":["size","size"],"a fixity":["of"],"a flat":["`V.Vector"],"a flattened":["Vector."],"a fold":["with","over","in","and","accumulator,","instead","instead","should","would","a","would","isn't","in","with","thinking","with","over"],"a fold,":["or","check","since","avoiding","it's"],"a fold.":["Or","`map`"],"a fold..":["will"],"a foldl'-based":["version"],"a foldr":["to","is"],"a for":["loop."],"a for-loop,":["but"],"a form":["of"],"a format":["where"],"a fraction":["of"],"a frequency":["Map."],"a fromListWith":["solution"],"a frustrating":["exercise,"],"a full":["generation","table","traversal","mvar"],"a fully":["point-free","specified","strict"],"a fun":["implementation,","extra"],"a function":["in","for","in","is","that","\"replace\".","which","to","like","that","to","that","that","in","that","which","named","named","that","from","`isSpace`","that","in","that","expression,","for","that","that","in","to","in","for","that","so","in","\"infix\",","does,","of","of","that","that","revlist:","that","to","in","like","to","for","name,","defined","is","on","on","the","`(a","from","in","call","`Eq","like","of","does.","as","without","in","with","of","named","that","of","to","that","declared","in","work","(apart","that","which","that","like","`::","and","at","from","that","definition)","that","in","in","at","that","`name","called","(the","that","like","from","with","`wordsBy`","`f`","called","and","to","that","has","defined","that","in","that","definition","defined","from","would","to","in","sequence","that","over","that","from","in","name","of","in","from","from","from"],"a function,":["but","and"],"a function.":["It's"],"a functional":["language","programming"],"a functor":["you","instance"],"a functor.":["And"],"a fundamental":["level."],"a further":["nitpick."],"a future":["where"],"a general":["rule,","consensus","consensus","number"],"a generic":["character-replace","version"],"a gigasecond":["and"],"a gist":["in"],"a gist):":["https://gist.github.com/etrepum/6394557"],"a given":["`Char","ordering.","other","scenario","operator","range,","row"],"a glance":["see","that","(at"],"a glance\"":["-"],"a glance,":["rather","hopefully."],"a glance.":["However"],"a go":["at","on","at","at"],"a go,":["but"],"a go.":["(Trying"],"a good":["solution","practice","practice","idea","route","idea","replacement","compliment","idea","point.","resource","combination","idea.","decision","idea","sign","idea","point,","way","idea!","idea","match.","way","example","idea","idea.","job","example","candidate","solution","refresher","way","solution","name","name","idea","algorithm?","point.","reason","solution","addition.","chance","start,","refresher","idea","idea","solution,","question,","reference,","rule","rule","rule","article","algorithm","idea...","idea","thing","example","algorithm.","balance","constant","two","constant","mix","understanding","strategy","idea","idea","overview","exercise.","solution,","exercise","primer","choice.","idea","habit","reason","idea","idea","opportunity","idea","idea","function.","approach","place","choice,","example","idea","fold","way","encapsulation","habit","idea","reason.","data"],"a grade":["is"],"a great":["mode","suggestion.","name","example,","implementation,","solution","solution.","explanation","explanation","explanation","explanation","chapter","learning","refresher","refresher","refresher","refresher","refresher","job","intro","refresher","challenge.","refresher","refresher","refresher","refresher","refresher","refresher","solution.","refresher","way","explanation","start,","section","explanation","hold","explanation","explanation","argument","way","reason","candidate","explanation","intro","solution.","first","explanation","explanation","reference","explanation","explanation","function!","deal","solution","start.","overview","solution","idea","function","explanation","explanation","handle"],"a group":["of"],"a guard":["might","on","using","clause","clause.","clause","that","to"],"a guard)":["rather"],"a guard.":["It's"],"a guess,":["are"],"a habit":["of"],"a hack.":["But","Also"],"a handle":["on"],"a handy":["function","function","function"],"a hangover":["from"],"a hard":["time","time","time"],"a harder":["exercise"],"a hash":["instead."],"a hashtable":["instead?"],"a haskell":["noob,","for"],"a haskell.":["I'll"],"a head":["of"],"a heap":["overflow"],"a heavily":["type"],"a heavy":["trade"],"a heck":["of"],"a helper":["function.","function","function","function","functions","function"],"a helpful":["article"],"a hexCharToInt":["in"],"a higher":["fixity","level,","order","level","precedence","order","level","order","level","level","precedence","precedence","level","order","precedence"],"a higher-level":["API."],"a hint":["to","on","that","if"],"a hint,":["the"],"a hint:":["you","it's","`randomRIO`'s","Data.List"],"a hints).":["Can"],"a hlint":["warning"],"a holdover":["from"],"a horrible":["hack."],"a huge":["difference","difference","fan","benefit","fan","fan","jump","difference,","savings","difference","difference","fan","fan","chain","thunk","chain","fan"],"a human":["reading"],"a hypothetical":["general"],"a i)`":["(the"],"a insertion":["in"],"a is":["specialized"],"a joke":["in"],"a key":["of","at"],"a key-value":["pair"],"a kind":["of"],"a la":["[tibbe's"],"a lambda":["and","like","for","instead","or","for","with","that","abstraction","function"],"a lambda,":["using","but","like","usually"],"a lambda.":["The","I'm","The"],"a language":["with"],"a language.":["Should"],"a large":["input.","scope","project,","chuck","system,","number"],"a larger":["code","codebase.","project,","program.","prime","project,","table,","table","system,","program"],"a last":["resort,"],"a lazy":["foldr.","fold,","left","language","map?","language","way","fold,","language,"],"a leap":["year"],"a left":["fold","fold","fold,","fold","fold","fold","fold,","fold","fold,","fold,","fold","shift","fold","fold"],"a length":["to","with","of"],"a less":["launch-all-the-missiles"],"a lesser":["degree.","precedence"],"a let":["or","or"],"a letter":["or","or","in","you","`Q`","`A`.","replacer!","it","or","char"],"a letter,":["we"],"a letter.":["With"],"a letterSet":["function"],"a level":["that","simple","of"],"a library":["function","```Data.List.Split```","would"],"a library.":["The"],"a limit":["on"],"a limitation":["of"],"a line":["of","in","up","shorter.","of","by","by"],"a line,":["but"],"a line.":["It's"],"a linear":["time","algorithm","way.","amount"],"a linearly":["sized"],"a linebreak":["there"],"a link":["only","in"],"a linked":["list.","list,","list,","list"],"a lint":["warning"],"a lisp.":["You"],"a list":["of","(and","of","and","of","and","comprehension,","with","containing","comprehension","(`fromListWith`),","comprehension","of","comprehension,","of","here","comprehension","with","would","of","comprehension)","comprehension.","comprehension?","of","of","comprehension","comprehension","and","like","of","is","for","of","of","to","of","first","to","based","of","of","of","of","of","is","I'll","of","of","would","of","though,","comprehension)","comprehension","or","with","comprehension.","comprehension","of","of","of","of","of","comprehension","comprehension","being","comprehension","of","comprehension","comprehension","of","comprehension","comprehension","comprehension.","comprehension:","comprehension:","is","that","comprehension","of","can","of","of","here","then","of","is","by","as","of","in","comprehension","comprehension","comprehension","of","of","of","comprehension","of","such","of","of","of","comprehension","of","of","of","is","`[Maybe","of","of","of","of","of","and","you","of","to","for",":-)","of","of","of","of","of","beforehand","of","by","of","comprehension,","and","of","of","in"],"a list)\",":["\"you"],"a list)...":["Also,"],"a list,":["because","and","not"],"a list.":["This","Also","As","But","The",";)","There","Some","This","That's"],"a list;":["a"],"a little":["more","more","more","simpler,","more","more","shorter","confused","confusing;","bit","bit","wordier.","Heath-Robinson","less","bit","bit.","easier","exercise","confusing,","differently,","more","cheaper","inefficient,","shorter","scared","simpler,","more","more","bit","clearer","less","less","better","bit?","simpler","simpler","shorter","while.","more","better","shorter","more","easier","shorter,","and","bit","simpler","easier","easier","bit","weird","more","nicer","more","easier","sloppy,","easier","nicer.","math","overboard","uglier.","shorter?","cleaner","bit","easier","shorter","pattern-matching","cleaner","shorter.","bit","longer","nicer","more","shorter","simpler","bit","shorter,","bit.","less","confused","more","wonky","more","more","nicer","hard","overkill.","less","hard","more","better","cleaner","code","confusing","shorter","nicer","confused","easier","more","algebra","bit","better","tricky","nicer","nicer.","in-efficient","unsatisfactory","more","too","bit","more","dangerous","ugly,","more","bit","shorter:","algebra","simpler","sooner","nicer","more","cleaner","immediate","shorter","awkward","more","better","algebra,","more","better","while,","progress","having","ugly.","bit","algebra","harder","simpler","better","[longer](http://ro-che.info/ccc/21).","nicer","more","more","bigger","strange","nicer","more","confused","simpler,","more","by","bit","more","more","algebra.","bit,","while,","algebra","bit","more","bit","more","counter","more","more","bit","harder","less","too","nicer","different.","easier","shorter)","stuck","different,","more","bit","confusing","bit","differently.","bit","confused","tricky.","more","clearer,","too","with","bit.","bit","bit","more","bit.","bit","more"],"a little.":["https://github.com/kytrinyx/exercism.io/pull/705"],"a local":["definition","binding,"],"a localized":["variant"],"a long":["list","time","while","string","way","pattern","time","way","time"],"a look":["in","at","at","at","at","at","at","in","at","at","at","at","at","at","at","at","in","at","at","at","at","at","at","at","at","into","at","at","at","at","at","at","at","at","at","into","at","in","at","in","at","at","and","and","at","and","and","in","at","at","as","at","at","there.","at","at","at","at","at","at","at"],"a look-up":["table,"],"a lookup":["for","data","table","table","table.","table,","table"],"a loop":["from"],"a loop,":["but"],"a loop.":["Any"],"a lor":["clearer."],"a lot":["more","more","of","shorter.","of","cleaner","uglier:","of","nicer","longer","of","less","of","of","more","of","cleaner.","of","more","of","more","of","more","of","simpler","of","of","of","better","lower","better!","of","of","@meda!","of","as","more","of","of","@brittany!","@howell!","of","of","of","of","better","more.","@flavie!","of","of","of","of","more","more","of","of","of","shorter,","like","more","of","of","more","of","cleaner.","@","better","more","nicer","of","of","on","of","more","about","of","of","better","of","closer","more","of","better.","clearer","nicer","about","between","simpler.","safer.","of","for","of","faster","simpler","of","of","of","of","of","of","to","of","about","more","of","more","simpler","simpler,","less","of","shorter","of","for","less","of","of","more","like","more","simpler.","faster","nicer,","less","for","of","of","less","for","of","better","better.","about","faster","differently","less","longer.","of","less","easier.","of","of","less","to","better.","of","of","of","of","of","more","of","of","of","of"],"a lot!":["I've"],"a lot,":["by","will","@anibal","I","I'll","but"],"a lot.":["Consider","I'm","I"],"a lot:":["`countOccurences"],"a low":["precedence"],"a lower":["precedence.","case","level","level","case,"],"a lowercase":["letter"],"a maintainable":["one.."],"a major":["light-bulb"],"a manifestation":["of"],"a manual":["`foldl'`","search"],"a map":["unless","is","union?","would","(in","of","at","would","here,","with","is","until","instead","and","is","from","is","incrementally","but","that","with","for","or","is","until","is","for","and","and","may","key"],"a map)":["but"],"a map,":["because","because","because","because","because","because","and","it","it","i.e.","i.e."],"a map.":["You","I'll","Is"],"a map/dictionary":["with"],"a map:":["from"],"a map;":["it'll"],"a mapping":["to","of","from"],"a marginally":["wordier"],"a match":["but"],"a matching":["type"],"a matter":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"a meaningful":["difference.","name.","way."],"a means":["of"],"a measurable":["difference"],"a member":["of","of"],"a memoising":["solution,"],"a mere":["`(not"],"a mess":["than","as"],"a mess.":["Which"],"a method":["`isSpace`","of"],"a middle":["ground?","ground?"],"a million":["@walker,"],"a minimal":["public"],"a minimum,":["what"],"a minor":["whitespace","refinement","stylistic","issue.","style","point."],"a minority":["that"],"a minute":["to"],"a misleading":["name.","name"],"a misnomer.":["i"],"a misunderstanding":["of"],"a model":["to"],"a modified":["version","version"],"a module":["and","should","and","as","(`scoreLetter`,","boundary","makes","DNA.hs."],"a module)":["should"],"a module,":["you","e.g.","e.g.","and","and","and","in"],"a module.":["In"],"a moment,":["it"],"a monad,":["and"],"a monday,":["and"],"a monoid":["so"],"a month":["though.","with"],"a more":["basic","words","efficient","elegant","simple","elegant","Haskelly","elegant","correct","sensible","sensible","elegant","data-driven","explicitly","traditional","elegant","elegant","concise","compact","efficient","robust","efficient","succinct","explicit","better","conventional","functional","specific","descriptive","optimized","elegant","descriptive","descriptive","robust","succinct","elegant","efficient","readable","non-trivial","succinct","natural","clear","appropriate","efficient","cute","concise"],"a most":["correct"],"a mostly":["as-is"],"a much":["better","shorter","simpler","later","better","simpler","better","better","nicer","simpler","more","better","nicer","more","more","easier","easier","more","shorter","more","simpler","nicer","shorter","earlier"],"a multiple":["of","of","of"],"a multiplication":["by","by"],"a multithreaded":["environment."],"a must":["implement"],"a mutable":["doubly","data","variable"],"a mutable-vector":["sieve"],"a mystery":["until"],"a naive":["`fromListWith`"],"a name":["for","clash,","though.","field","but","when","the","for","like","consistent","from"],"a named":["alias","function","function,","function"],"a naming":["convention"],"a native":["speaker."],"a natural":["place","Haskell"],"a natural,":["and"],"a neat":["function,","trick","solution","trick,","solution"],"a necessary":["property"],"a need":["to","to"],"a negative":["exponent"],"a nested":["list","thunk"],"a net":["gain","win"],"a new":["submission.","revision.","empty","grade","reader","version","solution","method","data","line","Map","method","type","version","Map","tuple","solution,","clause","line.","version","variable","version.","version.","thing","version","word","version","data","robot,","way","value","binding","Map","state,","version","process","version","version","robot","function","version","record","type","type","line","iteration","one"],"a new-line":["character"],"a newer":["Haskell","version."],"a newline":["immediately"],"a newline,":["so"],"a newtype":["for","declaration.","for","here?","you'll"],"a nice":["trick","enough","way","straightforward","TupleSections","`wordsBy`","function","`wordsBy`","choice","advice!","exercise","solution","pointfree","trick","`wordsBy`","wordsBy","trick,","`wordsBy`","extension","way,","way","case","functionallity","solution","overview","looking","replacement","and","wiki","function","solution."],"a nice,":["simple"],"a nicer":["representation","way","way","way","error","way"],"a nit":["but","pick,"],"a nit,":["but","but"],"a nit-pick":["but"],"a nitpick":[":D.","but"],"a nitpick,":["just","but"],"a no-op,":["it","see"],"a node.":["Hmm."],"a non":["performance"],"a non-DNA":["string."],"a non-DNA-only":["string."],"a non-awkward":["way)."],"a non-bit":["character"],"a non-exhaustive":["pattern"],"a non-overlapping":["pattern"],"a non-space.":["`isQuestion`"],"a non-std":["lib"],"a non-strict":["data","left","right","fold"],"a nonpartial":["manner?"],"a nontrivial":["way."],"a normal":["style","list","fold"],"a normal-order":["evaluation"],"a noticeable":["amount","amount"],"a noun,":["perhaps"],"a nucleotide":["for"],"a nudge":["in"],"a null":["check"],"a number":["of","of","that's","of","of","is","of","of","of","of","of","(1","of","in","is","that","char,"],"a number,":["since","which"],"a number.":["Consider","The"],"a numeric":["value."],"a nut,":["the"],"a one":["argument","argument","liner.","or"],"a one-line":["`where`"],"a one-liner.":["It"],"a one-pass":["solution"],"a overriden":["';'"],"a pain":["since"],"a pair":["of","of"],"a paper":["[Let-floating](http://research.microsoft.com/pubs/67060/float.ps.gz)"],"a parameter":["to"],"a parser":["that","with","(attoparsec)","with"],"a part":["of","of.","of","of"],"a partial":["function?","function.","function","function.","function","function.","function...","function","import","function.","function","answer","function.","function","function","function","function."],"a partially":["applied"],"a particular":["piece","meaning","order","input.","reason","numeral,"],"a particularly":["good","good"],"a patch":["at"],"a pattern":["arises.","is","matching,"],"a per-file":["basis"],"a perfect":["idea"],"a perfectly":["elegant","fitting"],"a period,":["not"],"a permutation":["of"],"a phone":["number"],"a piece":["of","of"],"a place":["where","to"],"a placeholder":["for"],"a plain":["translation","count","list","list"],"a planet":["after"],"a plant,":["typically"],"a play":["around","on"],"a pleasant":["pointfree"],"a point":["full","free","about"],"a point,":["you"],"a point-free":["version","definition","style,","style."],"a pointfree":["style,","style,","style,","version","way","style,","form"],"a poorly":["designed"],"a popular":["word,"],"a positive":["alternative"],"a possibility/good":["way"],"a possible":["implementation","for"],"a possibly":["pretty-printed"],"a potential":["space","stack"],"a potentially":["useful"],"a powerful":["elaboration"],"a practical":["use"],"a precedence":["of","of","of"],"a precedence/priority":["rule"],"a predefined":["reverse"],"a predetermined":["sequence"],"a predicate":["function","to","that","either.","that"],"a predicate.":["For"],"a preferable":["naming"],"a prefix":["with"],"a preliminary":["pass"],"a pretty":["big","mild","decent","ugly","good","good","ideal","generally","small","big","classic","special","vanilla","big"],"a previous":["reviewer)."],"a prime":["factorization,","factorization"],"a priori":["is"],"a private":["method,"],"a problem":["that","in","with","with","with","with","because","here?","and","with","when","accurately","with","in","with","here,","to","since"],"a problem,":["but","think","namely","but"],"a problem.":["Why","Since"],"a problem?":["In"],"a problems":["in"],"a production":["system"],"a program":["raising","is","must","that","for"],"a programming":["exercise"],"a prompt":["like"],"a proper":["pattern?","subclass"],"a properties":["of"],"a public":["function"],"a pull":["request.","request,","request:","request"],"a pupil":["to"],"a pure":["way\""],"a purely":["functional","functional"],"a puzzle":["to"],"a qualified":["import","import","import","import","import","import,","import.","import"],"a question":["mark\"","had","or","or","for","on","-","isn't","since","about"],"a question,":["but","on"],"a question.":["Code","Was"],"a question:":["on"],"a quick":["modification","Google.","glance","glance","look","glance"],"a quickcheck":["property"],"a quite":["from","strong"],"a quoted":["char"],"a race":["condition","condition"],"a random":["seed.","character,","Char","name","name","name"],"a range":["go","expression"],"a rather":["interesting"],"a read":["from"],"a readability":["standpoint.","improvement,"],"a readable":["`beer-song`."],"a real":["nucleotide","application","example,","jolt","world","ADT.","benefit","need","problem.","program","type"],"a realistic":["parsing"],"a really":["interesting","clever","terse","useful","tiny","cool","hard"],"a reason":["not","for","as","you","you","you","you","for","to"],"a reasonable":["feature","assumption,","chance,","amount","message,"],"a recent":["Haskell"],"a record":["for"],"a recursive":["function","solution","call","function,"],"a red":["herring,"],"a redundant":["line"],"a refactoring":["with"],"a reference":["when","to","for"],"a refresher":["on","-",";)","on"],"a regex":["myself","library","in"],"a regex.":["fromListWith"],"a regular":["list"],"a reimplementation":["of"],"a relatively":["small","easy"],"a relic":["of"],"a reminder":["to"],"a remnant":["of"],"a repeated":["map"],"a replace":["fuction"],"a representation?":["`a"],"a resource":["or"],"a response":["to"],"a restricted":["sort"],"a result":["such","-","value","looks","default","overflow","you","you","value","and","you'll"],"a result.":["This"],"a return":["in","type"],"a revision":["not"],"a rewrite":["RULE"],"a right":["fold.","fold.","fold","approach"],"a robot":["`r`."],"a roman":["numeral"],"a row":["with"],"a row-major":["matrix"],"a rule":["outlined","is","of"],"a runtime":["cost","error.","error"],"a same":["value"],"a scalene":["triangle"],"a scary":["implementation","term,"],"a score":["of"],"a scrabble":["word,","app"],"a search":["tree"],"a second":["time,","guard.","to","strictness","strictness","space","look","generator."],"a second,":["unrelated","one","I"],"a second.":["As"],"a section":["at","like"],"a seemingly":["simple"],"a selected":["few"],"a selective":["transcription."],"a sense":["of","that"],"a sensible":["precaution","way,"],"a sentence":["when"],"a separate":["function,","function.","`transform","module","function","function.","transcribe","issue","case","line,","function,","line","function.","line","line.","newline"],"a separator":["and"],"a separator.":["You'd","You"],"a sequential":["application"],"a series":["of","of","of","of","of","of","of","of"],"a serious":["disadvantage,"],"a set":["won't","will","for","of","of"],"a setting":["to"],"a shame":["to","it's"],"a shared":["variable"],"a shift.":["My"],"a short":["one-liner.","and","name","explanation","example,","piece","and"],"a shorter":["way","way","syntax","name","way","way","copy","message?","way"],"a shorter,":["more"],"a shot":["just"],"a shot,":["and"],"a shot.":["I'm"],"a side":["effect","note,"],"a sidenote,":["I"],"a sieve)":["to"],"a signal":["I"],"a silly":["place","name,","question."],"a similar":["effect.","way","thing,","way?","way","spacing","overhead","example","optimization","objection","problem,"],"a similarly":["ugly"],"a simple":["task.","predicate","recursion.","wildcard","code","```toUracil```","Int","pipeline","list","problem,","closed","version.","storage","description","foldl...","utility"],"a simpler":["way","all-caps","way","way","way","way","way","version","to","form","way","predicate","solution","`map`.","way","validation","closed","version","way","approach?"],"a simplier":["code","way"],"a single":["pass.","one.","pass","pass","character","character","line","data","value","case","method","pass","pass,","value?","`responseFor","clause","`filter`","pass","value,","recursive","guard.","integer","value.","`Map`","Int","function","list","expression","function","expression","function","Int","like,","rule","element","place,","Int,","element","expression","extra","unit","Int.","Int,","function","char","Int.","argument","character","case,","`normalise`","loop","function","letter,","clause","function,","definition","list","convention","function","call.","number","Int","value","input,","list","transaction.","line,","identifier"],"a single-line":["test"],"a single-pass":["check","solution"],"a singleton":["points"],"a singleton,":["exactly"],"a situation,":["but"],"a size":["of"],"a sketch":["of"],"a slices":["function"],"a slight":["optimization,"],"a slightly":["simpler","more","more","different","different","irrational","different","different","more","different","more"],"a slightly-more-accurate":["description"],"a slippery":["slope,"],"a slot":["of"],"a slow":["way"],"a small":["possibility","set,","amount","amount","number","one,","data","helper","function","things,","amount","change","part)","change","change","margin,","input","helper","bit"],"a smaller":["type."],"a smart":["constructor","constructor.","constructor,","constructor","constructor","constructor","constructor"],"a solid":["solution.","way"],"a solution":["is","iteratively","where","that","that","that","to","that","from","that","that","that","you","with","that"],"a solution!":["In"],"a somewhat":["easier","better","better","awkward"],"a song":["when"],"a sort":["over","of","of"],"a sort.":["I"],"a sorted":["list","fashion","manner","bag).","list","list.","list).","string","list"],"a source":["for"],"a space":["leak,","after","leak","leak","between","leak.","after","between","leak","after","leak","leak","leak","leak","after","leak","leak.","leak","leak,","leak","leak).","leak.","leak","leak,","leak.","leak","leak.","leak","leak","leak","leak","leak","leak,","between","between","and","between","leak.","leak.","leak","leak","leak.","leak","between","after","leak.","leak","leak","leak","leak,","leak","between"],"a space'.":["That"],"a space,":["punctuation,","and"],"a space-leak,":["and"],"a space.":["Everything"],"a spec":["ought"],"a special":["case.","way,","case"],"a specialized":["map"],"a specific":["character","way","reason","meaning","thread","order,","case"],"a speed":["hack"],"a spine-lazy":["data","data","data","data","data"],"a spine-strict":["data","data","result","data","data","data","data","data","data","data"],"a split":["function"],"a spoiler):":["https://gist.github.com/etrepum/8bfa758dd3532bc16c62"],"a spoiler,":["here"],"a square,":["choose"],"a stack":["overflow","overflow","overflow","overflow","that","overflow","overflow","overflow","overflow","overflow","as","overflow).","overflow).","overflow,"],"a stack.":["See"],"a standalone":["`isAnagram`"],"a standard":["library.","library.","method","function","fold","library,","Enum","way","typeclass","function"],"a standart":["function"],"a start":["date"],"a statement":["like"],"a static":["O(n)"],"a step":["further,"],"a straight-up":["copy."],"a straightforward":["and","and","solution","implementation","way"],"a strange":["way","way?","behavior:"],"a strategies":["that"],"a strategy":["for"],"a strict":["left","left","`foldl'`","version.","left","left","left","left","left","left","`foldl'`","pattern","solution","fold](http://www.haskell.org/ghc/docs/latest/html/libraries/containers/src/Data-Map-Base.html#fromListWith).","accumulator","version","left","accumulator,","fold","Map","left","left","left","left","left","left","left","fold","left","fold,","accumulator.","left","left","accumulator","left","way","accumulator","left","left","version","version","fold","language,","MVar","fold.","left","left"],"a strict-value":["map."],"a stricter":["variant"],"a strictness":["problem","issue","issue","issue,","issue"],"a string":["to","to","that","is","anyway.","belong","with","*is*","to","but","literal","literal","to","to","the","is","serialization?","\"a","of","is","and","and","into","with","is","is","that","and","without"],"a string,":["without"],"a string.":["That's","If"],"a strong":["reason","preference"],"a student,":["then"],"a style":["thing","thing,","thing.","nit.","is","thing","thing,","note"],"a subjectively":["valued"],"a subpart":["of"],"a substitution":["of"],"a subtle":["issue"],"a suitable":["name","function","(and"],"a sum":["is","+"],"a sum.":["The"],"a super-pleasant":["way"],"a superclass":["of","of"],"a superfluous":["argument"],"a surprise.":["For"],"a symbol":["with"],"a synonym.":["I"],"a syntactic":["extension!"],"a syntax":["that","sugar"],"a table":["that","like","of","is"],"a tad":["shorter","past","bit"],"a tally":["much"],"a task":["solution,"],"a technique":["called"],"a teenager":["named"],"a ten-character":["string"],"a terrible":["disease...","name"],"a terser":["way"],"a test":["because","to","case).","(#12,","to","to","for","failed","case"],"a text?":["Usually"],"a the":["next","WHNF"],"a theoretical":["universe"],"a thing":["exists),","as","now),"],"a think":["then."],"a third":["of"],"a thorn":["in"],"a thunk":["`succ","that","leak.","[here](http://lpaste.net/96283)","that","that","that","that","(unevaluated","for","to","that","that","leak.","[here](http://lpaste.net/5764321645716045824)","leak","leak","leak"],"a thunk,":["not","1"],"a ticket":["to"],"a time":["to","(consider","instead","into"],"a time).":["Everything"],"a time,":["like"],"a tiny":["nit","part","bit","bit","bit","bit","bit","bit","bit","bit","program"],"a tip,":["instead"],"a ton":["better","from","of","of","of","of","of"],"a tool":["called"],"a top":["level","level","level","level"],"a top-level":["definition,","definition","function,","function","function","function.","function","definition","function","`f'`","binding","signature","binding.","definition,"],"a total":["function.","function","function)","function.","function","function,","function,","function?","function","function","function,","n00b","function?","function","function)."],"a totally":["subjective","different"],"a touch":["verbose."],"a tough":["nut"],"a trade-off":["I'm"],"a tradeoff":["in"],"a trailing":["space?","newline,","one)?","newline,"],"a transform":["and"],"a transformation.":["The"],"a translation":["of"],"a trap":[":)","in","in"],"a trap,":["you"],"a tremendous":["waste"],"a triangle":["with","with"],"a trick":["here","that","to"],"a trick,":["you"],"a trim":["function"],"a trivial":["case","String"],"a trouble":["for"],"a truly":["random"],"a try":["with","tomorrow.","to"],"a tuple":["with","section","is","section,","section","in","in","for"],"a tuple,":["but"],"a two":["space","space"],"a type":["alias","signature,","`String`","signature,","signature.","alias","for","signature.","signature","synonym,","synonym","alias","level.","signature","signature","signature","signature","signature.","signature,","signature","signature","signature.","signature","signature","signature","signature.","signature,","that","alias","alias.","for","annotation","signature","like","alias","signature","signature,","annotation","signature.","signature","signature","alias.","synonym","and","signature.","signature","is","signature.","annotation","signature","just","parameter?","and","synonym","synonym","definition","synonym","sig","signature,"],"a typeclass":["for","that","for"],"a typical":["fold","example:","module"],"a typo.":["I"],"a typo...":["and"],"a uniform":["way"],"a union-find":["data"],"a unique":["student"],"a unit":["called"],"a use":["of","of","of","of","for","of","of"],"a usecase":["and"],"a useful":["exercise","package","helper","higher-order","purpose.","starting","function","mental","exercise","exercise","function"],"a useless":["`null"],"a user":["and"],"a valid":["question","dna","DNA","nucleotide","interpretation.","triangle","variable","range","separator"],"a validate":["function"],"a value":["for","accumulating","would","in","for","that"],"a value,":["`xs`"],"a value-lazy":["map","the"],"a value-strict":["version.","`Map`","Map","map,","map","version","map"],"a value.":["It's","For","On"],"a var/function":["for"],"a variable":["that","in","for","in","for","binding","binding","so","so","as","you","but","binding",":)","for","and","that","with","that","that's","is","since","binding"],"a variable.":["Eta"],"a vector":["parameter"],"a version":["with","of","with:","of","with","that","using","that","that's","of","like","with"],"a very":["concise","restrictive","neat","straightforward","simple","nice","slow","inefficient","good","good","nice","fast","easy","good","uncommon","fixed","common","compact","fast","good","similar","nice","descriptive","strange","small","minor","typical","neat","specific","good","complex","simplified","long","nice","clunky","sensible","good","simple","good","good"],"a vim":["user.","integration"],"a visual":["representation","representation"],"a warning":["in","here","about","if","(since","about","with","for","since","is","that","about","without"],"a warning,":["but","in"],"a way":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","you","to","you","to","to","that","to","to","around","to","to","to","to","that","that","that","to","you","that","that","to","to","to","to","to","to","to","that","that","to","to","to","to","to","to","where","to","to","to","to","that","that","to","to","to","to","of","that's","that","that'll","to","to","that","to","you","of","to","to","to","to","to","that","to","to","to","to","of","to","to","that","to","to","to","to","to","to","that","of","that","of","to","to","to","to","to","to","to","to","to","to","to"],"a way,":["while"],"a week":["reading"],"a well-formed":["DNA"],"a where":["clause","clause","clause","block","clause","clause,","clause.","clause","clause,","clause","clause","clause","clause","clause.","clause","block,","clause","clause","clause","clause.","clause.","block","block.","block.","block.","clause","clause,","clause","clause"],"a while":["I","to","to","to","to","to","to"],"a while,":["and"],"a whitespace\"":["post"],"a whole":["import","lot","order","bunch","new","bunch","lot","lot","different","```Map```"],"a word":["count","as","-","for","from","or","in","instead","is","is"],"a word,":["and","and"],"a word.":["`Data.Char`"],"a wordBy":["function"],"a wordsBy":["function","function."],"a working":["solution","example","solution"],"a worse":["algorithm."],"a wrapped":["value,","value,","function","value,"],"a wrapper":["around","to"],"a zero":["is","to"],"a zipped":["list"],"a ||":["e"],"a …\".":["Here's"],"a\" result.":["Anyone"],"a' /=":["b'"],"a' =":["map"],"a' ==":["sort"],"a'` or":["for"],"a'` still":["get"],"a) !(Map":["k"],"a) !a":["(Maybe"],"a) (Int,":["Int)`,"],"a) (WordCount":["b)"],"a) (length":["b)`","b))"],"a) (take":["size"],"a) ++":["something"],"a) -":["1)```"],"a) -&gt;":["(c","(c","(c","c"],"a) --":["Defined","Defined","Defined","Defined","Defined"],"a) -\u003e":["[(k,a)]","[(k,a)]","k","k","[a]`"],"a) ...`?":["Can"],"a) =\u003e":["a","a","a","a","LinkedList"],"a) a":["(Maybe","(Maybe"],"a) instance":["here"],"a) on":["both"],"a) to":["exist,"],"a) ||":["not","isUpper"],"a)) (Maybe":["(BST","(Tree"],"a)) a":["(Maybe","(Maybe","(Maybe","(Maybe"],"a)) deriving":["(Show)"],"a))` however":["`not"],"a))` is":["a"],"a))` without":["degenerating"],"a))` you":["can"],"a))`. Other":["than"],"a), but":["it"],"a), dqtl":["::"],"a). account":["can't"],"a). fractional":["part"],"a). text":["b)."],"a)` is":["nice"],"a)` to":["work"],"a)` will":["work,"],"a)`, type":["of"],"a, Bounded":["b)"],"a, Eq":["b)"],"a, Just":["b)"],"a, Ord":["b)"],"a, Read":["b)"],"a, Show":["b)"],"a, length":["b))```."],"a, n,":["n,"],"a, not":["Vector"],"a, tail":["a))"],"a-1 ..":["b]`"],"a. It":["adds"],"a. Num":["a","a"],"a.hack to":["pass"],"a.nice way":["to"],"a/= b":["then"],"a0) arising":["from","from","from","from","from"],"a0)` which":["is"],"a0`. I":["think"],"a1 ++":["a2"],"a1 -\u003e":["b)","c"],"a1 a2":["="],"a2 =":["(show"],"a::Int, b":["::Int}"],"a] ,":["cols"],"a] -\u003e":["m"],"a] }\u003c/pre\u003e":["Everything"],"a]` in":["`comps`\",","comps"],"a]`, or":["more"],"a]`. The":["latter"],"a` (ignoring":["case"],"a` (the":["`==`"],"a` and":["`2`","have"],"a` as":["the","the"],"a` be":["the"],"a` but":["we"],"a` calls":["for"],"a` for":["any","that"],"a` has":["a"],"a` immediately.":["The"],"a` in":["case","point"],"a` instead":["of","of"],"a` instead,":["and"],"a` is":["not","a","evaluated"],"a` makes":["that"],"a` means":["that"],"a` or":["simply","`f"],"a` that":["works"],"a` this":["means"],"a` to":["store"],"a` value":["is"],"a`, darn.":["It"],"a`, i":["don't"],"a`, or":["you"],"a`, the":["entire"],"a`. From":["the"],"a`. In":["other"],"a`. Would":["save"],"a`. You":["can"],"a`? I'm":["tying"],"a``` is":["constant"],"aah I'm":["glad"],"aah another":["problem"],"aah very":["cool."],"aah you":["mean"],"aah, I":["think","tried"],"aahh. Wrong":["command."],"aanin dninn":["dlaet"],"ab =":["a"],"ab ab)`":["or"],"ab)` or":["use"],"abandoned pattern":["matching?"],"abandoned the":["use"],"abandoning `MVar`":["altogether),"],"abbreviation that":["I"],"abilities if":["I"],"ability to":["spot"],"able to":["do","optimize","shorten","factor","simplify","do","put","make","do","tell,","optimize","simplify","do","use","early","do","fix","fuse","simplify","accomplish","compare","express","do","do","be","write","make","do","simplify","optimize","clean","get","help","use","implement","remove","get","do","get","clean","do","find","import","update","implement","make","make","implement","much","get","do","infer","interleave","write","catch","do","fuse","make","do","do","remove","guarantee","map","get","make","do","work","easily","consolidate","close","get","do","complete","use","find","drop","infer","simplify","go","get","answer","use","do","write","measure","come","write","write","use","produce","use","give","simplify","be","do","indent","find","do.","do","do","do","without","improve","pick"],"able to.":["Almost"],"aborted), then":["the"],"aborts and":["restarts"],"about \"creating\"":["a"],"about \"finding":["the"],"about 'rd'":["will"],"about (Data.Vector":["Char)?"],"about -":["calling"],"about 0..99":[":)"],"about 15":["lines"],"about 2/3rds":["this"],"about 20%":["less"],"about 3,":["5,"],"about 30":["extra"],"about 4":["arithmetic"],"about Arrows":["anyway!"],"about Data.Map.Strict":["unfortunately,"],"about Data.Map.Strict,":["it"],"about Data.Text.replace":["however"],"about First":["monoid."],"about Foldable":["next"],"about Haskell":[":-)"],"about Haskell's":["non-strict"],"about Haskell,":["so","you"],"about IORef":["on"],"about MVar,":["TVar"],"about Mk":["being"],"about ShowS.":["Is"],"about Split,":["as"],"about TupleSections":["-"],"about TupleSections.":["Very"],"about WHNF":["I"],"about [guarded":["recursion]"],"about `$`,":["and"],"about `Data.Bits`?":["That"],"about `Data.Map.fromListWith`":["?"],"about `LambdaCase`.":["Nice"],"about `StateT":["String"],"about `TupleSections`.":["Thanks!"],"about ```ceiling```":["?"],"about ```foldr```,":["and"],"about ```last```":["function?"],"about ```mapM```,":["that's"],"about ```wordsBy```":["but"],"about `areaCode`":["and"],"about `cycle`":["and"],"about `exercism":["peek`."],"about `fmap`":["but"],"about `foldM`.":["I"],"about `foldr`.":["I"],"about `fromEnum`":["though."],"about `i`":["as"],"about `ifNull":["raindrops"],"about `isSpace`":["function"],"about `last`":["?"],"about `last`?!":[":p"],"about `let`":["because"],"about `map":["($"],"about `mapMaybe`.":["It's"],"about `s`":["too."],"about `total`?":["There's"],"about `where`":["style"],"about `wordsBy`.":["I","Got"],"about a":["linear","third","little","function","decade"],"about additional":["exercise"],"about all":["the","the","the"],"about an":["incomplete"],"about angles":["when"],"about another":["implementation"],"about any":["language"],"about applicative,":["don't"],"about applicatives":["(first"],"about applying":["the"],"about as":["concise","clear","compact","efficient","good"],"about bang":["patterns,"],"about big-Oh":["complexity,","notation"],"about boolean":["logic"],"about building":["the"],"about changing":["`thymidineToUracil`"],"about characters":["like"],"about checking":["for"],"about conciseness":["since,"],"about creating":["you","you"],"about defining":["functions","operators"],"about doing":["but"],"about each":["step","and"],"about efficiency":["though","&"],"about empty":["lists","tiles"],"about eval":["and"],"about everything":["in"],"about everywhere,":["although"],"about explaining":["the"],"about extra":["brackets,"],"about factoring":["that"],"about fallthrough":["with"],"about fmap.":["Yeah,"],"about foldl":["semantics?"],"about foldl'":["and"],"about folds:":["http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'"],"about frequency":["no"],"about fromListWith,":["I"],"about function":["```unlines```"],"about general":["Haskell"],"about guards.":["The"],"about handling":["infinite"],"about haskell":["style"],"about having":["private","those","something"],"about how":["you","`all`","you","this","they","to","non-strict","to","Haskell's","to","you","you","it","inefficient","to","lazy","to","Haskell's","to","to","the","evaluation","`System.Random`","you","you","Haskell's","Haskell's"],"about id;":["I'm"],"about idea":["that"],"about implicit":["export"],"about imports":["and"],"about imports,":["and"],"about in":["terms"],"about including":["both"],"about incomplete":["pattern","pattern"],"about infinite":["messages,"],"about input":["\"Hello,world!\"?"],"about instancing":["`show`"],"about instead":["of"],"about introducing":["edge"],"about isAggressive":["is"],"about it":["but","might","though.","my","other","and",":)",":)..","but","some"],"about it's":["main","running"],"about it,":["you","but","but","there","my","it's","this","but","hit","thanks.","so"],"about it.":["Thoughts?","This"],"about it?":["If","Or"],"about iteration":["instead","/"],"about its":["big-Oh"],"about lazy":["evaluating","Maps,"],"about list":["comprehensions.."],"about lookup":["or"],"about making":["this"],"about measuring":["a"],"about monads,":["applicative"],"about money":["on"],"about monoids":["that"],"about multiline":["string"],"about mutability":["in"],"about my":["use"],"about new":["type."],"about non-exhaustive":["pattern"],"about now?":["Since"],"about nub":["and"],"about obscure":["magic"],"about on":["its"],"about operator":["precedence,","sections,"],"about optimization,":["but"],"about optimizations":["they're"],"about optimizing":["for"],"about other":["possible"],"about pattern":["overlap,"],"about performance":["optimizations","on","here,"],"about performance,":["but","you"],"about performance.":["I'm"],"about playing":["with"],"about point-free":["style...","style"],"about possible":["changes,"],"about pragmas,":["I"],"about premature":["optimization"],"about primes":["in"],"about protecting":["```School```"],"about pulling":["in"],"about range.":["But"],"about readability,":["but"],"about really,":["nice"],"about recursion":["is"],"about redundant":["brackets"],"about refactoring":["the"],"about reimplementation":["of"],"about renaming":["your"],"about reorganizing":["the"],"about responseFor":["is"],"about reverse":["usage,"],"about right":["to"],"about right.":["You"],"about runtime":["cost,"],"about scoring":["Scrabble,"],"about simple,":["expressive,"],"about simply":["write"],"about skipping":["the"],"about solving":["things"],"about some":["features","way"],"about speed":["but","you'll"],"about spine-strictness":["etc."],"about stack":["usage"],"about stm":["may"],"about stream":["fusion"],"about strict":["vs"],"about strictness":["and","when"],"about strictness,":["and"],"about structure,":["so"],"about stuff":["like"],"about style":["and"],"about sum":["of"],"about tail-recursion":["and","and"],"about ten":["times"],"about that":["possibility.","in","I","shadowing","condition","possibility.","issue.","before..","code.","bit.","part."],"about that!":["VERY"],"about that,":["thanks!","thanks!","thanks!","but"],"about that.":["So","I'd"],"about the":["same","case.","proper/idiomatic","unused","efficiency","string","extra","code","efficiency","logic","usage","partiality","case","function,","spec,","laziness,","confusion!","point","code","part","`up`","types","standard","last","test","spaces","usefulness","advantage","internals","performance,","input,","output.","eco-system","only","order","future","multi-line","definition,","4x","idiomaticity","line","function","comparisons,","asymptotic","runtime","bool","refactoring.","sort","list,","sides'","latter","value","float-out","same","differences","composition","```split```","README","other","correctness","split","top-level","`own`","data","memory","same","strict","formatting","pointy","different","various","answer","associativity","thunks","same","precedence","bang"],"about their":["details"],"about them":["in"],"about these":["extra","(far"],"about things":["like"],"about this":["sort",":)","is","in","one.","than","case","specific","approach:)","task","solution.","case","some","kind","is","will"],"about this,":["but"],"about this.":["I","You"],"about this:":["https://github.com/exercism/exercism.io/issues/1310"],"about those":["when"],"about to":["find"],"about trivial":["things"],"about trying":["to","to"],"about unused":["functions."],"about using":["`M.fromListWith`?","`Show`","Text.","the","Data.Vector.Algorithms.Intro?","filter","IORef","Data.String.Utils.replace,","`newtype`","the","it\").","a","guards","more","map."],"about what":["you're","the","you","you're","that","you're","they","will"],"about what's":["going","going"],"about whatever":["it"],"about when":["you","to"],"about where":["something"],"about whether":["I","it","`toUpper`","the"],"about which":["constructor"],"about whitespace":["except"],"about why":["that","this","this","this","`foldl`","strictness"],"about with":["a","-Wall.","the"],"about writing":["`isShouted`"],"about your":["pointers,"],"about, but":["let"],"about, since":["you"],"about, understand":["and"],"about, unfortunately.":["Using"],"about. And":["the"],"about. Is":["the"],"about. Might":["be"],"about. When":["it"],"about: \"This":["function"],"above all":["explain"],"above and":["beyond"],"above bothers":["me"],"above by":["the"],"above code":["you"],"above definition":["it's"],"above each":["function"],"above function":["definitions"],"above is":["a"],"above it":["makes"],"above lists":["are"],"above nits":["regarding"],"above the":["qualified","code"],"above trick":["is"],"above two":["cases."],"above, although":["here's"],"above, right":["monad"],"above, which":["is"],"above. None":["of"],"abs, a":["\u003c-"],"absence of":["letters."],"absent-mindedly switched":["syntaxes"],"absolutely certain":["how"],"absolutely clear":["as"],"absolutely correct,":["I"],"absolutely no":["runtime"],"absolutely nothing":["wrong","wrong","wrong","to"],"absolutely positively":["doesn't"],"absolutely right":[";)","about"],"absolutely right.":["Don't"],"absolutely right–```isCapitalIfLetter```":["sounds"],"absolutely right–a":["very"],"absolutely sure":["that","that","the","that","that","that"],"absolutely-favorite programming":["quote:"],"absorb the":["material"],"abstract `map":["toLower"],"abstract concept,":["instead"],"abstract core":["of"],"abstract data":["or","seems","types"],"abstract it":["by"],"abstract out":["the"],"abstract over":["internal"],"abstract the":["offset","pattern:"],"abstract these":["without"],"abstracting the":["verses."],"abstraction I":["decided","decided"],"abstraction behind":["each"],"abstraction is":["to","redundant"],"abstraction that":["ShowS"],"abstraction to":["use"],"abstraction. For":["example,"],"abstraction. Might":["have"],"abstractions and":["naming"],"abstractions that":["work"],"abstractions to":["deal"],"abstracts the":["recursion"],"abuse of":["type"],"academia to":["learn"],"academic courses":["so"],"acc (a:as)":["(b:bs)"],"acc +":["fromEnum","bit`.","length"],"acc -&gt;":["f","if","(if","f"],"acc -\u003e":["(x"],"acc 1`":["and"],"acc =":["f(acc,","f(x,"],"acc \u003e\u003e=":["\\b'","return`"],"acc []":["="],"acc `seq`":["go"],"acc as":["bs"],"acc of":["[]"],"acc x))`.":["Functions"],"acc) []":["[1,2,3,4]"],"acc) []`":["(even"],"accept 10":["digit"],"accept only":["DNA"],"accept plenty":["of"],"accept that":["maybe"],"accept the":["most"],"accept this.":["Aren't"],"acceptable (yet":["deprecated)"],"acceptable and":["(b)"],"acceptable because":["I"],"acceptable for":["it"],"acceptable if":["there"],"acceptable or":["rather"],"acceptable style":["or"],"acceptable to":["not","have","use"],"acceptable, it's":["ok"],"acceptable, just":["letting"],"acceptable. In":["my"],"acceptable. It's":["actually"],"acceptance. Is":["that"],"accepted style":["to","guide."],"accepted styles":["for"],"accepted though,":["so"],"accepted within":["haskell"],"accepted. Must":["be"],"accepting bad":["input"],"accepting invalid":["DNA"],"accepts many":["strings"],"access `input`":["directly"],"access `s`":["directly"],"access complexity,":["this"],"access element":["(i,j)"],"access in":["a"],"access it":["from"],"access m":["direcly"],"access the":["last"],"access to":["abstractions","all","Map","the","all"],"access will":["work?"],"access, so":["we"],"access. I'd":["say"],"access. Perhaps":["someone"],"accessed from":["multiple"],"accessed multiple":["times."],"accessed, and":["you"],"accesses so":["you'll"],"accessible as":["`intersperse`)"],"accessible) explanation":["of"],"accessing things":["in"],"accessors and":["it"],"accessors for":["the"],"accident since":["L"],"accident, only":["change"],"accident? I":["don't"],"accidental name":["clashes."],"accidentally didn't":["clean"],"accidentally export":["stuff."],"accidentally expose":["functionality."],"accidentally has":["a"],"accidentally resubmitted":["my"],"accidentally submitted":["this."],"accidentally the":["test."],"accidentally. For":["conversation's"],"accidently create":["collisions"],"accidently submited":["the"],"accommodate. In":["this"],"accomplish additional":["task","task?"],"accomplish it":["is"],"accomplish some":["task"],"accomplish such":["purpose."],"accomplish the":["same","job","same","additional"],"accomplish this":["more","task.","without","task.","task","task.","task."],"accomplish this,":["I"],"accomplish with":["BangPatterns,"],"accomplished via":["the"],"accomplishes the":["same"],"according to":["your","the","the"],"accordingly. But":["since"],"account `getBalance`":["etc."],"account as":["an"],"account can't":["be"],"account for":["the"],"account in":["such"],"account is":["closed,","active)","open.","Maybe","closed"],"account on":["pending"],"account that":["can"],"account will":["discard"],"account, I":["cannot"],"account, why":["do"],"accounted for":["it"],"accounts now":["that"],"acct \u003c-":["openAccount"],"acct =":["do"],"acct \u003e\u003e=":["\\bal"],"acct amt":["="],"acct bal":["\u003e\u003e"],"acct) \u003e\u003e=":["mapM_"],"acct` has":["to"],"acct` line?":["I"],"acct` says":["is"],"accum) -\u003e":["...)"],"accumulate a":["value."],"accumulate is":["`f"],"accumulate primes":["as"],"accumulate results,":["by"],"accumulate the":["\"words\"","tuples."],"accumulated value":["into"],"accumulating a":["lot"],"accumulating function":["in"],"accumulating function,":["or"],"accumulating thunks":["that"],"accumulation generates":["a"],"accumulation in":["a"],"accumulation. Is":["the"],"accumulator (the":["Map)"],"accumulator and":["can","a","explicitly","the"],"accumulator argument":["and"],"accumulator at":["the"],"accumulator by":["2","the"],"accumulator for":["left","you"],"accumulator function":["I"],"accumulator here":["should"],"accumulator in":["recursive"],"accumulator is":["strict.","strict.","spine-strict.","in","on","in","forced","evaluated","evaluated","going","on","an"],"accumulator isn't":["strict.","strict"],"accumulator iteratively":["in-place."],"accumulator of":["that","a"],"accumulator on":["left","the"],"accumulator since":["Data.Map"],"accumulator so":["you"],"accumulator strict)":["instead"],"accumulator strict.":["A"],"accumulator strictness":["(`foldl`"],"accumulator such":["as"],"accumulator sufficiently":["to"],"accumulator to":["nf","be","be","be"],"accumulator will":["typically"],"accumulator, but":["it's","it's"],"accumulator, it":["evaluates"],"accumulator, it's":["going","very"],"accumulator, so":["it","it"],"accumulator, then":["adding"],"accumulator, whether":["that's"],"accumulator-strict fashion,":["so","so","so","so","so"],"accumulator-strict left":["fold"],"accumulator-strict). The":["reason"],"accumulator-strict, so":["the"],"accumulator. Also,":["Data.Map"],"accumulator. If":["you"],"accumulator. In":["this"],"accumulator. It":["may"],"accumulator. This":["is"],"accumulator. When":["you"],"accumulator. `Data.Bits.shiftL`":["instead"],"accumulator[1] the":["only"],"accurate to":["say"],"accurately coerce":["it"],"accurately convert":["to"],"accurately don't":["necessarily"],"achieve an":["infinite"],"achieve better":["complexity"],"achieve by":["importing"],"achieve much":["more"],"achieve point-free":["for"],"achieve such":["functionality"],"achieve the":["same","same,"],"achieve this":["kind"],"achieved a":["marginally"],"achieving maximum":["performance"],"achive with":["`own`"],"acids. What":["would"],"acknowledge that":["I"],"acronym, read":["anagram."],"across IORef,":["maybe"],"across IORef..":["so"],"across `Data.Vector.Algorithms.Intro`.":["At"],"across all":["the"],"across binary":["in"],"across what":["it"],"across. Props":["for"],"act both":["as"],"act on":["either"],"acting on":["a","that"],"action (sequence":["of"],"action may":["be"],"action that":["does"],"actions are":["much"],"actions... but":["I"],"activation control":["below.","below."],"activation of":["`TupleSections`"],"active at":["once","once","the","the","the"],"active user":["are"],"active) so":["closing"],"acts as":["a"],"actual answer).":["Now"],"actual code":["is","looks"],"actual difference":["compared"],"actual digits":["without"],"actual fold":["itself"],"actual functionality?":["since"],"actual name":["rather"],"actual parsing.":["Maybe"],"actual performance":["profiling,"],"actual result":["of"],"actual result.":["Should"],"actual school":["type."],"actual strand":["of"],"actual text":["munging."],"actualCounts` but":["this"],"actuality it":["checks"],"actually *worked*":[":)"],"actually I'm":["not"],"actually MUCH":["more"],"actually `map":["(second"],"actually a":["number","problem?","nice","good","test","problem"],"actually about":["the"],"actually almost":["tempted"],"actually am":["using"],"actually an":["algorithmic"],"actually apply":["them"],"actually be":["better","better,","constructing"],"actually been":["chided"],"actually better":["to"],"actually building":["up"],"actually come":["across"],"actually comments":["in"],"actually compiled/run,":["even"],"actually compiles":["and"],"actually correct,":["or"],"actually creating":["a"],"actually defined,":["not"],"actually did":["add"],"actually do":["anything","it.","this?"],"actually does":["pass","have","use","seem"],"actually does.":["Perhaps"],"actually doesn't":["get"],"actually doing":["anything.","one"],"actually don't":["even","need"],"actually encoded":["the"],"actually end":["up"],"actually equivalent":["to","to"],"actually evaluate":["it"],"actually feel":["that"],"actually filtering":["for"],"actually get":["evaluated","bitten"],"actually gone":["wild"],"actually had":["a"],"actually has":["to","nothing"],"actually have":["to","to","to","to"],"actually implementing":["the"],"actually imported":["`\u003c$\u003e`"],"actually incorrect":["since"],"actually inside":["the"],"actually isn't":["a"],"actually it":["could"],"actually just":["performing"],"actually learn":["it"],"actually looked":["it"],"actually made":["an"],"actually makes":["it","sense,"],"actually manipulating":["DNA/RNA"],"actually matches":["how"],"actually matter":["here.","in"],"actually matters,":["but"],"actually meant":["inlining"],"actually much":["better"],"actually necessary,":["since"],"actually need":["`lastMay`","here","a","this"],"actually need,":["like"],"actually needed.":["The"],"actually not":["going","sure","needed."],"actually only":["requires"],"actually originally":["done"],"actually prefer":["the"],"actually preferable":["in"],"actually primes":["(if"],"actually put":["`isAnagramOf`"],"actually reads":["more"],"actually realize":["that"],"actually really":["close","like","like"],"actually rely":["on"],"actually runs":["your"],"actually seemed":["to"],"actually seems":["to"],"actually shouldn't":["even"],"actually sinks":["in."],"actually solving":["this."],"actually suggesting":["that"],"actually surprised":["that"],"actually that":["check"],"actually that's":["two"],"actually the":["convention","one"],"actually think":["this"],"actually to":["implement"],"actually trying":["to","to"],"actually two":["different"],"actually use":["on","in"],"actually used":["`isSuffixOf`"],"actually uses":["`str`"],"actually using":["the"],"actually vary":["quite"],"actually very":["slow,"],"actually want":["to","to"],"actually wanted":["to"],"actually was":["using"],"actually work":["best","quite","on"],"actually work?":["Unless"],"actually works":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"actually works.":["For"],"actually worse":["than"],"actually wouldn't":["work"],"actually you":["could"],"actually, I":["didn't"],"actually, is":["to"],"actually. I":["could"],"ad-hoc template":["stuff"],"adapt. I":["guess"],"adapted this":["answer"],"add \"looks":["great\""],"add (or":["`.|.`)"],"add 1":["to","to"],"add 2":["to"],"add Foldable":["instance:"],"add `\"\\n\"`":["to"],"add `-Wall`":["switch:"],"add `import":["Data.Map.Strict"],"add `s":["=="],"add a":["variable","pupil","new","strict","comment","type","space","digit","test","check","bit","quickcheck","`go","number","head","bunch","`map","student,"],"add an":["additional","extra","additional","internally-used","additional","`infixl`","instance","extra"],"add another":["clause"],"add brackets?":[":P"],"add comment":["about"],"add corresponding":["value"],"add exercises":["to"],"add explicit":["export"],"add fixed":["point","point"],"add g":["pupil","pupil","pupil","name","n","n"],"add in":["the"],"add it":["to","to"],"add mappings":["for"],"add more":["testcases"],"add much":["coding"],"add new":["SentenceKind,"],"add one":["more","more"],"add or":["prevent"],"add parens":["in"],"add parentheses":["or"],"add some":["zero","private","space","strictness"],"add somewhere":["between"],"add spaces":["around"],"add tests":["for"],"add that":["to","many","type","case"],"add the":["pupils","pupil","current","function","correct","'G',"],"add them":["on","just"],"add this":["test"],"add to":["my","the"],"add toList":["to"],"add top":["level"],"add type":["declarations","signatures.","signatures","signatures","signatures","declarations","signatures."],"add. I'm":["new"],"add. Messing":["around"],"addDays (fromIntegral":["days)"],"addDays ::":["Integer"],"addDays, fromGregorian,":["addGregorianMonthsClip)","addGregorianMonthsClip)","addGregorianMonthsClip)"],"addGregorianMonthsClip and":["was"],"addToSum and":["used"],"addWord has":["a"],"addWord may":["be"],"addZeros because":["the"],"added Pointfree":["goodness"],"added a":["variable","test","lot"],"added an":["example","improved"],"added another":["constructor"],"added as":["you"],"added benefit":["of"],"added complexity":["of"],"added in":["trivially"],"added it":["to"],"added peace":["of"],"added some":["comments,"],"added that":["as","bit"],"added the":["list","catch"],"added this":["revisions"],"added to":["testcases.","the","the"],"added type":["signatures"],"added, that":["it"],"addends n)`":["could"],"addens can":["be"],"adding $":["and"],"adding 1":["or"],"adding `{-#":["LANGUAGE"],"adding a":["clause","comment","definition","type","new"],"adding always":["type"],"adding an":["explicit"],"adding anything":["substantial"],"adding integers":["together,","together"],"adding it":["to"],"adding items":["to"],"adding more":["guard"],"adding much":["code"],"adding my":["comment..."],"adding newlines,":["consider"],"adding one":["word"],"adding something":["to"],"adding strictness":["qualifiers,"],"adding the":["following","element","newlines"],"adding thunks":["because"],"adding words":["to"],"adding. You":["will"],"addition and":["garbage","storing"],"addition happen":["eagerly,"],"addition to":["the","spaces.","`fromListWith`,","fromList","that,"],"addition without":["checking"],"addition, I":["go"],"addition, and":["you'll","then"],"additional approach":["to"],"additional arithmetic":["in"],"additional avenues":["for"],"additional benefit":["of"],"additional benefits":["are"],"additional binding,":["that's"],"additional check":["to"],"additional closures,":["also"],"additional complexity":["by"],"additional condition":["to","to"],"additional constraint":["(Eq"],"additional evaluation":["cost"],"additional exercise":["will","with","may"],"additional exersice":["may"],"additional expressions":["in"],"additional information":["with","on"],"additional library":["functions,"],"additional operations":["that"],"additional opportunities":["for"],"additional pattern":["guard"],"additional task":["with","can"],"additional tasks.":["I"],"additional type":["parameters."],"additions for":["other"],"address other":["issues."],"address that.":["What"],"address this":["type"],"adds N":["1s"],"adds a":["function","few","level"],"adds another":["level","level","test"],"adds extra":["code."],"adds up":["very"],"adds yet":["another"],"adequately handled":["in"],"adequately terse":["to"],"adhere to":["that","the"],"adjacent to":["its"],"adjectives. I":["think"],"admit looks":["better"],"admit that":["I","I"],"admit this":["one","one","is"],"admit, I'm":["not"],"adorable. \"The":["`First`"],"advance East":["="],"advance North":["="],"advance South":["="],"advance West":["="],"advance could":["be"],"advance, but":["I"],"advanced Haskell":["assignments."],"advanced features":["of"],"advanced problems...":["maybe"],"advanced stuff":["just"],"advanced techniques":["(all","like:"],"advantage in":["terms"],"advantage of":["the","using","deriving","with","prompting","the","the","using","strong","the","it","the","strings","Haskell's","laziness","laziness","the","laziness.","using"],"advantage of,":["which"],"advantage since":["`responseFor`"],"advantage that":["was"],"advantage to":["all,","using","doing","using","using","using","permitting"],"advice @geraldine,":["I've"],"advice as":["always,"],"advice in":["here"],"advice is":["welcome."],"advice it's":["food"],"advice regarding":["the"],"advice, I":["have"],"advice, I've":["switched"],"advice, but":["the","it"],"advice. Check":["it"],"advice. I'll":["stick"],"advice: it's":["possible"],"adviced me":["to"],"advices, but":["I'm"],"advicing my":["approach."],"advise where":["should"],"advised to":["leave"],"advising people":["that"],"advocating the":["use"],"aesthetic quality":["of"],"aesthetic reasons,":["but"],"aesthetically isn't":["a"],"aesthetically pleasing,":["but"],"aesthetically. I":["don't"],"afaiu this":["task","task"],"affects map":["generation."],"affects the":["randomness","correctness"],"afford to":["make"],"afraid I":["might"],"afraid of":["do"],"afraid that":["this"],"after \"module":["Bob"],"after 2":["and"],"after 2,":["or"],"after 5":["min"],"after Control.Concurrent.MVar":["appear"],"after I":["finished","submitted.","was","finished.","submitted","digest"],"after I've":["had"],"after `\\n":["-\u003e`"],"after `else":["n`)"],"after `gg=G`":["looked"],"after `readTVar`ing":["the"],"after `sort`":["doesn't"],"after `unlines`":["has"],"after a":["`=`.","little","function","question?","test","comma"],"after all":["these"],"after all,":["we"],"after all.":["Ideally"],"after an":["exploration"],"after any":["later"],"after case":["normalization?"],"after changing":["`(\\b"],"after complicated":["composition,"],"after every":["verse"],"after failing":["enough"],"after filtering,":["if"],"after finishing":["that"],"after it":["ended"],"after it's":["a"],"after manually":["adding"],"after modifying":["it"],"after my":["initial"],"after optimizations":["they"],"after posting":["a"],"after reading":["it,"],"after testing":["the"],"after that":["I","putting"],"after the":["function","first","function","`module`","module","where,","`&amp;&amp;`","cons","recursive","cleaning,","optimizer.","backslash","function","other,","last","start"],"after using":["other"],"after viewing":["other's"],"after writing":["my"],"after you":["insert","strip","told"],"after.. I've":["subitted"],"afterwards to":["\"zip"],"again (not":["sure"],"again I":["am"],"again I've":["learned"],"again `foldl'":["(\\x"],"again and":["again","my","make"],"again does":["it"],"again for":["the","your","pointing","the","the"],"again if":["the"],"again in":["the"],"again is":["exactly"],"again it":["is","will","will"],"again learnt":["something"],"again solution":["is"],"again thanks":["for"],"again to":["make","use"],"again unqualified":["but"],"again when":["you're"],"again with":["```take```","the"],"again without":["over-engineering..."],"again wrong":["command.."],"again, because":["I"],"again, but":["I"],"again, maybe":["not..."],"again, since":["I'm"],"again, something":["like:"],"again, this":["introduces"],"again, what":["*are*"],"again, when":["I"],"again, you're":["right."],"again. I":["won't","thought","get"],"again. Maybe":["consider"],"again. Otherwise":["you"],"again. See":["an"],"again. So":["we"],"against \"\",":["or"],"against `\":)":["?\"`"],"against `('1':digits)`":["feels"],"against a":["string","constant,","specific"],"against any":["elements"],"against defined":["type"],"against each":["other."],"against empty":["lists"],"against every":["other"],"against exercism":["for"],"against it":["since"],"against my":["own"],"against only":["the"],"against references":["to"],"against the":["client","use","latest","spirit"],"against using":["the"],"ageOn Earth":["s"],"ageOn is":["I"],"ageOn planet":["s"],"ago, and":["it"],"ago. I'm":["not"],"agree @gabriel,":["Though"],"agree [from,":["from"],"agree about":["the"],"agree completely":["-"],"agree explicit":["arguements"],"agree for":["running"],"agree it's":["probably","more","better","a"],"agree on":["`concatMap`","the"],"agree regarding":["`filter`"],"agree that":["the","throwing","wrapping","double","mapMaybe","some","```map```","it","a","strings","using","this"],"agree this":["is"],"agree to":["disagree"],"agree when":["developing"],"agree with":["you","@quincy.","@aylin","these","it,","your","your","@spencer","Gaelan:","the","your","your","@delpha","you","using","@jerry","@krystina,","point","@joany,","Gaelan,","you.","me","@kevin.","etrepum's","your","the","@lindsay.","@johnnie","test"],"agree) see":["no"],"agree, I":["just"],"agree, point-free":["style"],"agree, spec":["neither"],"agree. Exported":["functions"],"agree. I":["think"],"agree. Without":["wanting"],"agree; outside":["of"],"agreed that":["`foldl'`"],"agreed. I":["am"],"agreeing with":["garrets"],"agreement with":["Twisol"],"agruments, in":["pointfree"],"ah I":["didn't","see."],"ah ok.":["Didn't"],"ah that's":["pretty"],"ah! i":["had"],"ah, of":["course,","course!"],"ah. and":["why","easiest","see"],"ahead and":["unlock","unlock.","did","made","submit","validate","reimplemented"],"ahead of":["any"],"aide of":["the"],"aids in":["figuring","readability"],"aids readability":["and"],"ain't it?":["Might"],"albeit denser.":["`transform`"],"albeit not":["being"],"algebra before":["writing","writing"],"algebra first":[":)"],"algebra here,":["you"],"algebra so":["you"],"algebra you":["can"],"algebra, `total`":["can"],"algebraic notation":["(`a1`"],"algebraic type,":["I"],"algebraically, @osborne":["!"],"algo that":["was"],"algorightm there;":["you"],"algorithm (you":["can"],"algorithm -":["I"],"algorithm above":["lists"],"algorithm and":["fall"],"algorithm automatically":["in"],"algorithm but":["it's"],"algorithm by":["checking","associativity"],"algorithm can":["potentially"],"algorithm for":["this,","this,"],"algorithm goes":["from"],"algorithm has":["almost"],"algorithm in":["Haskell","the","general"],"algorithm is":["OK","pretty","the","asymptotically","still"],"algorithm isn't":["too","always"],"algorithm itself":["is"],"algorithm probably":["isn't"],"algorithm rather":["than"],"algorithm should":["get"],"algorithm than":["this?"],"algorithm that":["should"],"algorithm to":["analyze","use","`[2..n]`","find"],"algorithm very":["well."],"algorithm which":["looks"],"algorithm with":["a","minimal","just","just"],"algorithm works":["or"],"algorithm would":["be"],"algorithm you":["need"],"algorithm you've":["used"],"algorithm\" I":["was"],"algorithm's complexity),":["which"],"algorithm, `count`":["is"],"algorithm, as":["it"],"algorithm, but":["it"],"algorithm, it's":["how"],"algorithm, otherwise":["we"],"algorithm, so":["I"],"algorithm. (unless":["you"],"algorithm. Also":["you"],"algorithm. Either":["should"],"algorithm. I":["went"],"algorithm. Your":["list"],"algorithm. `insertWith`":["or"],"algorithm. here":["the"],"algorithmic complexity":["as"],"algorithmic complexity.":["if"],"algorithmic loss.":["Internally,"],"algorithmic performance…":["`count"],"algorithmic win":["is","here."],"algorithmic win,":["but"],"algorithmically better":["algorithm","definition"],"algorithmically identical...":["pretty"],"algorithmically just":["checking"],"algorithmically) than":["it"],"algorithmically, but":["it"],"algorithmically, the":["`insertCount`"],"algorithms exists,":["that"],"algorithms for":["this","`isYelling`."],"algorithms if":["the"],"algorithms in":["mind","ST"],"algorithms out":["there,"],"algorithms with":["a"],"algorithms without":["having"],"alias for":["`[Char]`,","the","`String","`[Char]`).","it","`[Char]`).","Data.Map.Lazy)","`Map.toAscList`","the"],"alias that":["is"],"alias) and":["rename"],"aliased `School`":["to"],"aliases for":["RNA"],"aliases of":["`toAscList`"],"aliasing and":["I"],"align as":["well"],"align more":["closely"],"align the":["dots"],"aligned where":["needed."],"aligned with":["the"],"aligning all":["your"],"aligning your":["`=`"],"alignment of":["the"],"all (`elem`":["\"01\")"],"all (not":[".",".",".",".","."],"all (out":["of"],"all (sometimes":["the"],"all (this":["uses"],"all (using":["a"],"all -":["I"],"all --":["it"],"all .":["(isLetter","isSpace","isSpace"],"all 98":["letter"],"all \u003e=":["13,","maxDay"],"all Alphas":["are"],"all Haskell":["code."],"all M.":["functions"],"all Monad":["bind"],"all String,":["only"],"all `\"T\"`":["to"],"all `True`s":["to"],"all a":["little"],"all about":["playing","things"],"all alpha":["in"],"all alphabetic":["characters"],"all anagrams":["the"],"all and":["isSuffixOf"],"all as":["it's"],"all at":["once,"],"all bases":["into"],"all be":["pointfree","kept","automatically","evaluated"],"all become":["clear"],"all but":["it's","one","will"],"all bytestring":["with"],"all can":["be"],"all caps":["because","test.","case."],"all caps\"":["if"],"all caps.":["Your"],"all cases":["and","for"],"all cases).":["I"],"all cases,":["but","I"],"all cases?":["`AA`,"],"all characters":["are"],"all characters,":["some"],"all chars":["that"],"all checks":["failed."],"all code":["is"],"all compile":["down"],"all compositions":["and"],"all container":["functions"],"all containers":["supports"],"all counters":["in"],"all counts.":["This"],"all criticism":["is"],"all digits":["in"],"all else":["looks","and"],"all ends":["up"],"all equations":["must","for"],"all explain":["strictness"],"all exported":["ones),"],"all expressed":["as"],"all f":["="],"all fairness,":["my"],"all feedback":["is"],"all finite":["alphabets!"],"all first":["attempt..."],"all for":["the","this"],"all four":["nucleotides"],"all from":["scratch.","Data.Map"],"all function":["yet?"],"all function.":["Initially"],"all functions":["for","are","`r","in","to"],"all functions,":["not","but"],"all guards":["there","on"],"all haskell":["and"],"all have":["the"],"all helper":["functions","functions),"],"all helpers":["are"],"all here":["and"],"all in":["the","the"],"all infix":["operators"],"all information":["about"],"all into":["the"],"all isSpace":["q","message","seems","s","s","s","s","s`?","message`","string`","string`","s"],"all isSpace`.":["Personally"],"all isUpper":["(filter","alphas","letters`.","xs","letters","(filter","$","letters"],"all it":["says"],"all its":["uses","inputs,"],"all just":["a"],"all kinds":["of"],"all languages.":["The"],"all later":["one"],"all left-hand-side":["references"],"all letter":["characters,"],"all letters":["in","were","in","are"],"all line":["up","up","up"],"all list":["to","combinators"],"all list,":["but","also"],"all look":["for"],"all looked":["more"],"all looks":["good","pretty","good","good","pretty"],"all lowercase":["letters"],"all makes":["perfect","perfect"],"all matched":["up,"],"all my":["mistakes","programming","other"],"all necessary":["fixes"],"all newline":["characters"],"all night":["for"],"all non-alphabetic":["characters"],"all non-alphanumeric":["characters"],"all null":["cases"],"all numbers":["in"],"all obey":["some"],"all occurrences":["of"],"all of":["the","the","its","them","the","the","the","your","the","the","them.","them","the","the","the","the","the","the","the","the","the","your","your","the","the","Data.List","the","the","that","the","that","the","the","the","the","the","the","the","it.","the","the","these","the","Prelude","the","it","the","the","the","the","them","the","which","the","the","the","the","the","the","the","the","the","your","the","this","it.","the","them","the","the","the","the","the","the","them","the","those","the","the","the","those","that","the"],"all on":["`isUpper`","the"],"all or":["any."],"all other":["cases.","factors"],"all out,":["I'd"],"all over":["the","the","the","the","the","the","the"],"all over).":["But"],"all p":["xs","xs'"],"all pass":["except"],"all permutations":["of","is"],"all possible":["nonsense","inputs","inputs.","Allergen.","permutations,","chars"],"all possible.":["It's"],"all pragmatic":["to"],"all pretty":["quickly."],"all primes":["larger","&gt;","\u003e"],"all programming":["languages"],"all quite":["a"],"all real":["numbers"],"all references":["to"],"all relatively":["simple"],"all saturated":["applications","applications"],"all says":["\"I"],"all schools":["are"],"all scores":["first."],"all scoring":["lookups"],"all seem":["like"],"all shout":["...`"],"all sorts":["of"],"all standard":["warnings"],"all statement":["to"],"all suggestions,":["I'm"],"all superfluous":["since"],"all symbols":["expressions"],"all tests":["pass."],"all that":["syntactic","is","used","hard","bad.","is","clear"],"all that's":["required"],"all the":["way","details","test","tests?","top","tests","time.","time?","nucleotides","fixes","characters","exercises,","way","useful","tests","extra","submissions?","computation","calls","samples.","suggestions","lines","time","libraries","boilerplate","data","functions","trial","time,","time.","strict","work","`firstDay`","`if","verses","time.","feedback,","same","time","feedback.","parentheses:","help.","feedback.","great","same,","way","`s`s","options","days","feedback!","strictness","input!","functionality","robot","original","original","Haskell","time.","counts","way","page","special","string,","special","tests","help.","repetitions),","valid","module","knowledge","rules","list","letters","functions,","different","code","plumbing","methods","different","Control.Applicative","types","wrapping","wrapping"],"all there":["is"],"all these":["methods","weeks...","helpers"],"all this":["input!","string","worked","works","in"],"all those":["exercises","functions","functions...","thunks,","thunks","auxiliary"],"all three":["to","(`isSilence`,","clauses"],"all to":["go","leave","your"],"all top":["level","level","level"],"all top-level":["bindings.","definitions.","definitions.","definitions","functions","functions","bindings","bindings","bindings","bindings","bindings"],"all tries":["in"],"all twice,":["then"],"all unless":["necessary."],"all until":["all"],"all uppercase,":["so"],"all use-immediately-after":["bindings."],"all valid":["matches"],"all value-lazy":["or"],"all value-lazy,":["so"],"all value-lazy.":["In","In"],"all values":["into"],"all very":["simple."],"all which":["return"],"all whitespace":["characters"],"all would":["be"],"all wouldn't":["pass"],"all written":["for"],"all wrong":["with"],"all x..._.":["There"],"all you":["need","need","need","need","want","need"],"all your":["top","guards","recommendations.","comments","suggestions","`=`s"],"all! So":["suggestions"],"all\" but":["it"],"all), here's":["how:"],"all, I":["would"],"all, `toRNA`":["is"],"all, because":["`all"],"all, but":["obviously","will","this"],"all, generate":["a"],"all, if":["you"],"all, it":["was","should"],"all, it's":["a"],"all, just":["some","some","loop"],"all, less":["efficient."],"all, or":["define"],"all, since":["you","the"],"all, so...this":["is"],"all, some":["simple"],"all, the":["spec"],"all, we":["are","have"],"all, why":["didn't"],"all, you":["can"],"all, your":["solution"],"all-caps case.":["Aside"],"all-caps clause":["must"],"all-caps detector...":["which"],"all-caps response,":["not"],"all. As":["far"],"all. Consider":["building"],"all. I":["was"],"all. I'll":["stick"],"all. I18n":["translations"],"all. Ideally":["I"],"all. Most":["solutions"],"all. Otherwise,":["this"],"all. You":["may"],"all? Arithmetic":["should"],"all? Can":["you"],"all? HINT:":["look"],"all? Think":["about"],"allCaps =":["uncurry"],"allCaps and":["now","blank"],"allCaps definition":["can"],"allCaps depends":["on"],"allCaps id`":["more"],"allCaps with":["something"],"allSpace could":["be"],"allTrue much,":["partly"],"allUpper doesn't":["actually"],"allWhiteSpace =":["all"],"allWhitespace str`":["simplifies"],"allWhitespace` wich":["is"],"all_caps is":["going","going"],"allergen score":["parts`"],"allergens go":["away"],"allergens without":["having"],"allergens` to":["the"],"allergies s":["="],"alleviate the":["`uncurry`"],"allocate O(n)":["memory"],"allocate all":["list,"],"allocate entire":["list,"],"allocate memory":["and"],"allocate pipped":["and"],"allocate that":["whole"],"allocate the":["whole","entire"],"allocated at":["once,"],"allocated however":["if"],"allocated or":["generated"],"allocated will":["not"],"allocated, also":["you"],"allocates linear":["space"],"allocates more":["memory"],"allocating nested":["thunks"],"allocation (although":["it"],"allocation, however":["[from,from-1..to]"],"allocations. You'd":["need"],"allow Haskell":["to"],"allow `fromList`":["to"],"allow `validChars`":["to"],"allow empty":["trees"],"allow for":["multiple","much","some"],"allow map":["fusion"],"allow strings":["like:"],"allow tail":["call"],"allow that":[";-)."],"allow the":["guard","correct","underlying"],"allow to":["use","test","share","you"],"allow us":["to"],"allow you":["to","to","to","to","to","to","that","to","to","to","to","to","to","to","to","to","to"],"allow: IO.":["You"],"allowed except":["there"],"allowed in":["variable","test."],"allowed me":["to"],"allowed you":["to"],"allowes to":["use"],"allowing Haskell":["to"],"allowing Integral":["for"],"allowing the":["type-inferencer"],"allowing valid":["DNA"],"allowing you":["to","to","to"],"allows me":["to","to"],"allows right":["folds"],"allows the":["tree"],"allows us":["to"],"allows you":["to","to"],"allupper function,":["you"],"all… when":["it"],"almost all":["Haskell","code"],"almost always":["better","add","the","use","preferable","spaces","used","inefficient.","means","goes","prefer","use","a","specialized","do","inefficient,"],"almost certainly":["overkill","be","more"],"almost done":["it."],"almost enough":["(like"],"almost equivalent":["to"],"almost every":["case","function"],"almost everyone":["gets"],"almost everything":["from","is"],"almost everywhere":["is"],"almost exactly":["what"],"almost forgot":["about"],"almost great,":["but"],"almost immeasurable":["amount"],"almost just":["right,"],"almost like":["cheating","a"],"almost never":["used","the","the","the","the","the","be"],"almost no":["detriment","use"],"almost not":["try"],"almost point-free.":["For"],"almost possible":["with"],"almost similar":["like"],"almost tempted":["to"],"almost the":["same","right","same"],"almost there,":["you"],"almost there.":["If"],"almost trivial;":["I"],"almost universally":["preferred","suboptimal"],"almost working":["it"],"alone with":["this"],"alone would":["earn"],"alone, use:":["import"],"along a":["Right"],"along than":["you,"],"along the":["lines","lines","lines","lines","same","lines","lines","way"],"along those":["lines,","lines"],"along what":["you"],"along with":["the","the","the","the","alphanumeric","the"],"along. The":["associated"],"alongside with":["Hoogle."],"aloud it's":["clear"],"alpha &gt;":["0`"],"alpha caracteres":[".."],"alpha character,":["consider"],"alpha characters":["are"],"alpha in":["a"],"alpha)` which":["is"],"alpha-numeric chars.":["All"],"alpha-numeric, not":["just"],"alphaMessage)` (i.e":["without"],"alphabet (a":["measly"],"alphabet (which":["the"],"alphabet -":["I'm"],"alphabet and":["therefore"],"alphabet as":["nonsensical"],"alphabet expands":["in"],"alphabet may":["be"],"alphabet pretty":["much"],"alphabet your":["solution"],"alphabet. Since":["it's"],"alphabetic character":["is"],"alphabetic characters":["are"],"alphabetic characters,":["but","so"],"alphabetical or":["a"],"alphabetical, and":["you"],"alphanumeric strings.":["Is"],"alphas &&":["…`"],"alphas &amp;&amp;":["not"],"alphas =":["filter"],"already (before":["you"],"already -":["test"],"already `String`":["/"],"already a":["function"],"already accounted":["for"],"already almost":["point-free."],"already an":["entry"],"already assumed":["both"],"already be":["sorted"],"already been":["implemented.","checked","divided"],"already binds":["tighter"],"already checked":["smaller","the"],"already comfortable":["with"],"already contains":["the"],"already convinced":["me"],"already covered":["by","by"],"already curried":["with"],"already defined":["in"],"already delimited":["by"],"already did":["in","one"],"already does":["the","something"],"already done":["if"],"already efficient,":["so"],"already exist":["in"],"already exist,":["which"],"already existing":["solution"],"already exists":["in","somewhere","the"],"already familiar":["with"],"already get":["the"],"already gone":[":)"],"already guaranteed":["to"],"already had":["a","the"],"already have":["a","the","an","a","these.","fired","improved","them"],"already implemented":["for"],"already implements":["the"],"already imported":["by"],"already in":["a","GHC","Prelude).","RC,"],"already invented":["it."],"already knew":["it,"],"already know":["that","that","what","at"],"already looks":["great."],"already lowercase.":["In"],"already maps":["every"],"already moved":["on,","on"],"already paying":["O(n)"],"already pretty":["confused"],"already provided":["in","in"],"already re-exported":["to"],"already read":["that"],"already realize":["that"],"already returns":["the","the","a"],"already rule":["out"],"already said":["this,"],"already sanitized.":[":S"],"already scanned":["3"],"already see":["a","`year`."],"already sorted":["`Set`"],"already sorted.":["`fromListWith`","`toList`"],"already stopped":["thinking"],"already stored":["flattened."],"already submitted":["a"],"already tackled":["a"],"already thought":["about"],"already use":["`Applicative`"],"already used":["it"],"already using":["`showString`","recursion","String,","it."],"already using,":["and"],"already very":["readable","readable,"],"already, I'd":["suggest"],"already, but":["this"],"already. I'm":["not"],"already. Very":["minor:"],"also 11":["+"],"also Bounded":["for"],"also Data.List.Split":["provides"],"also Simon":["Peyton"],"also System.Random":["documentation."],"also `Bounded`":["for"],"also `Data.Map.empty`":["which"],"also `echo":["-n`"],"also `f":["a"],"also `fromListWith`":["that"],"also `unwords`":["and"],"also a":["monad,","way","strictness","space","bit","strictness","bit","pretty","bit","bit","smart","bit","monoid","function","\"[Char]\""],"also acceptable,":["it's"],"also add":["them"],"also allowed":["you"],"also am":["not"],"also an":["other","appropriate"],"also applicable":["here."],"also applies":["quite"],"also aren't":["using"],"also avoid":["the"],"also be":["used,","using","a","able","helpful","useful","sure","implemented","hard","written","used","a","solved","best","acceptable","defined","more","written","required,","used,","written","possible","done","done","easily","useful.","used","worth","case","in","convenient","nicer"],"also being":["accessible"],"also called":["eta","eta"],"also causes":["warnings:"],"also come":["in"],"also comment":["on"],"also commented":["out"],"also common":["to"],"also commonly":["seen,"],"also compare":["the"],"also compares":["case"],"also concatenate":["the"],"also concurrency.":["Now"],"also confusing":["that"],"also consider":["using","inlining","naming","using","using","using","using"],"also considered":["bad","`liftM`."],"also converting":["to"],"also convey":["this"],"also could":["have","do"],"also define":["`shout`,","`isAsking`","it","your"],"also depend":["on"],"also derive":["Enum","Bounded"],"also did":["an"],"also do":["it","this"],"also doesn't":["align"],"also doing":["this"],"also don't":["need","need","think"],"also easily":["make"],"also either":["simply"],"also eliminates":["the"],"also equivalent":["to"],"also evaluated.":["See"],"also explicit":["exports"],"also explicitly":["list","do"],"also exported":["when"],"also exported.":["Guards"],"also factor":["out"],"also find":["`String`","that","Hayoo","it"],"also for":["reminding","that!)"],"also found":["'isSpace'","the"],"also gazes":["into"],"also generated":["`toEnum"],"also get":["`succ`","a"],"also give":["you"],"also gives":["\"Whatever.\""],"also going":["to"],"also good":["though."],"also hard-code":["the"],"also has":["a","`even`","the","a","great"],"also have":["verseComponents","type","written","optimized","toAscList","been","the","to"],"also help":["here."],"also helps":["a"],"also http://www.haskell.org/haskellwiki/Stack_overflow":["--"],"also implement":["`shiftMap`"],"also implemented":["for"],"also implements":["Enum."],"also import":["Text","the","Data.Map.Strict"],"also in":["valid","your","the","order,"],"also included":["in","in","case"],"also indent":["this"],"also indented":["such"],"also indicate":["more"],"also it":["might","guarantees","require","(`stripped`)","may","builds"],"also it'd":["more"],"also just":["use"],"also know":["to"],"also let":["you"],"also like":["to","to","to","to","to","to","to","using","to","that"],"also look":["into","at","at","into"],"also looks":["nice."],"also made":["sing"],"also make":["this","it","sense","it","the","this","the","your"],"also micro-benchmarked":["the"],"also might":["like","be"],"also modified":["```nucleotideCounts```"],"also more":["common"],"also move":["```filter","that","the"],"also mvar":["contents"],"also need":["a","to"],"also new":["to"],"also nice":["that","to","as"],"also no":["comma","reason","reason","need"],"also non-strict,":["so"],"also not":["happy","too","sure","the","common","important","as","sure"],"also notice":["that"],"also now":["I'm"],"also of":["course"],"also passes":["the"],"also pick":["apart"],"also possible":["to","to"],"also prefer":["to","to","to","my","explicit"],"also pretty":["neat..."],"also produce":["a"],"also propose":["a"],"also provides":["random"],"also push":["`isBlank,"],"also put":["it"],"also quite":["new"],"also randomly":["shuffle"],"also ransoms":["(randomRIO"],"also read":["more","[Let"],"also reading":["\"composable"],"also realized":["that","that"],"also reason":["that"],"also recommend":["using"],"also reformulate":["`isQuestion`"],"also related,":["it's"],"also removed":["the","the"],"also render":["some"],"also reorder":["your"],"also replace":["the"],"also require":["the"],"also requires":["`Ord`"],"also runs":["a"],"also saves":["you"],"also say":["that"],"also see":["indented","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","you"],"also seen":["some","both"],"also selectively":["import"],"also separate":["words."],"also shadowing":["`s`"],"also shouldn't":["need","need"],"also simpler":["to"],"also simplify":["the","a"],"also simply":["`import","use"],"also skip":["the"],"also solved":["task"],"also some":["imports","superfluous","issues","RULES"],"also something":["I'm"],"also standard":["to"],"also started":["to"],"also still":["good"],"also suboptimal":["due"],"also suffers":["from"],"also suggest":["you","using","explicitly"],"also superfluous":["but"],"also superfluous,":["e.g."],"also switch":["from"],"also switched":["from","to"],"also syntax":["sugar"],"also takes":["a"],"also tend":["to"],"also that":["some","`all","in","Haskell","Data.Map","you","it's","there","there","if","Data.List.Split","`==","`[Eggs..]`","`foldl`","Data.Map","`insertWith`","Haskell"],"also the":["TupleSections","`on`","goto","class","kind","value-laziness","right","trade","parens"],"also there":["are"],"also think":["it"],"also thinking":["about","of"],"also thought":["it"],"also to":["copy","make"],"also took":["advantage","your"],"also totally":["acceptable,"],"also tried":["functions","to"],"also try":["using","rewriting"],"also turn":["your"],"also unnecessary,":["and"],"also unusual,":["because"],"also updated.":["I've"],"also use":["`Data.Char.isSpace`","`len","names","`all","map","section","Control.Applicative","quotRem","wordsBy","Planet","the","`split`","the","plain","functions","Control.Applicative","the","infix","`endswith`","strict","`all`"],"also used":["isAlphaNum","a","internally","it"],"also uses":["way","divMod"],"also usually":["an","suspicious"],"also very":["easily","common","good"],"also want":["to","to","to","to","to"],"also wasted":["work."],"also whether":["```(isAnagram","the"],"also wonder":["about"],"also work":["well."],"also worth":["checking"],"also wouldn't":["need"],"also write":["`not","`letters","`split`"],"also you":["might","may","may","may","may","are","may","may","may"],"also) :).":["OK"],"also, \"last\"":["is"],"also, I":["was"],"also, i":["tend"],"also, the":["test"],"also, your":["strip"],"also. Is":["@jordyn"],"also. `slice`":["works"],"alter the":["solution.","existing","behavior,"],"alter, empy`":["from"],"altered slightly":["to"],"altering the":["strategy."],"alternate but":["I"],"alternate option":["to"],"alternate way":["to"],"alternately `foldl`":["using"],"alternative \"No":["more"],"alternative and":["foldable"],"alternative approach":["to","would"],"alternative approach:":["`length"],"alternative approaches":["but"],"alternative definition":["of"],"alternative instance":["of"],"alternative is":["to","to"],"alternative looks":["very"],"alternative phrasings":["of"],"alternative solution":["could","to"],"alternative suggestions":["for"],"alternative take":["on"],"alternative to":["`last`","the","zipping","using","`readMVar`","using"],"alternative type":["of"],"alternative was":["to"],"alternative would":["be","be","be","have","you","be","be","have"],"alternative, but":["this"],"alternatively what":["you"],"alternatively write":["`&&"],"alternatively, if":["your"],"alters the":["original"],"although GHC":["should"],"although I":["prefer","don't","am","will","generally","think","take","do","think","wouldn't","wouldn't","have","started","believe","think","think"],"although I'd":["test","implement"],"although I'm":["debating","confused"],"although `removeNoString(speak)`":["is"],"although a":["`newtype"],"although because":["Data.Map"],"although even":["with"],"although here's":["another"],"although in":["this","this","this","this","this"],"although it":["is","did","was","doesn't","doesn't","depends","will"],"although it's":["not","harder"],"although its":["a"],"although looking":["up"],"although not":["sure","always"],"although possibly":["at"],"although pqueue":["isn't"],"although simulate":["would"],"although since":["you"],"although that":["still","requires"],"although that's":["a"],"although the":["blank","test","tests","tests","tests","tests","community","correct","compiler","specification"],"although there":["is"],"although there's":["probably"],"although they":["might","both"],"although they're":["not"],"although this":["would","isn't"],"although to":["a"],"although with":["the","just"],"although you":["can","should","can","could","could","could","could","can","probably","might"],"altogether (since":["in"],"altogether at":["compile"],"altogether), can":["I"],"altogether, and":["just"],"always (should)":["have"],"always False.":["Also"],"always `True`.":["Knowing"],"always a":["space","bad","bit","bit","space"],"always add":["parens","a","type"],"always be":["a","0,","in","a","upper","possible"],"always better":["even","to","than","if","to"],"always better.":["http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'"],"always define":["`none"],"always do":["it","provided"],"always either":["shouting"],"always evaluated":["into"],"always evaluates":["the","identically"],"always explicitly":["import"],"always forces":["the"],"always forget":["that","the"],"always found":["`concat"],"always get":["hung"],"always go":["for","for"],"always goes":["on"],"always going":["to"],"always got":["from"],"always has":["a","a","higher","the","higher","the","the","the","the","the","the","to"],"always have":["something","a","a","a","an","them"],"always hesitant":["to"],"always higher":["precedence","precedence","precedence","precedence","precedence"],"always highest":["precedence"],"always inefficient,":["because"],"always inefficient.":["You"],"always is":["adequate..."],"always keep":["the"],"always less":["optimal","than"],"always like":["to"],"always lists.":["And"],"always longing":["for"],"always makes":["me"],"always means":["\"strict"],"always misuse":["them,"],"always need":["to"],"always on":["(e.g."],"always one":["for","Char"],"always optimize":["last."],"always overlook":["it"],"always prefer":["`where`","simplicity","to","higher"],"always preferable":["to","to"],"always preferable.":["In"],"always provide":["type"],"always returns":["true),","immediately,","a"],"always run":["(e.g."],"always scan":["the"],"always seems":["like"],"always should":["be"],"always something":["like"],"always spaces":["on"],"always specialized":["to"],"always strict,":["because"],"always succeeds":["with"],"always the":["highest","best?","wrong","wrong","right","wrong","wrong","wrong","head"],"always think":["it's"],"always to":["spend"],"always true":["I"],"always try":["to"],"always type":["signatures,"],"always under":["the"],"always use":["`foldl'`","`foldl'`","`foldl'`","a","MVars","the","`foldl'`","`foldl'`"],"always used":["for"],"always ways":["around"],"always will":["have"],"always worried":["that"],"always write":["operators"],"always wrong":[":)"],"always yield":["pairs"],"always, @nicolette;":["I'll"],"always, once":["again"],"am I":["misunderstanding","still","missing","missing?","missing?","right","not","missing","missing","just","doing","wrong?"],"am I?":["I","I"],"am a":["beginner,"],"am actually":["using","surprised"],"am afraid":["that"],"am also":["new","not"],"am always":["hesitant","a"],"am at":["your"],"am attempting":["to"],"am battling":["to"],"am certainly":["no"],"am curious":["whether"],"am determined":["to"],"am fairly":["new"],"am forced":["to"],"am going":["to"],"am happy":["with"],"am having":["the"],"am in":["a","agreement","this","the"],"am looking":["for!"],"am missing":["something."],"am more":["inclined"],"am new":["to"],"am not":["very","certain","sure","good","disagreeing","sure","a","sure","familiar","quite","sure","a","sure","sure","sure","really","sure","sure","sure","versed","getting","confident","100%","sure"],"am quite":["unhappy"],"am ready":["to"],"am really":["bad"],"am sooo":["not"],"am sorry":["but"],"am still":["battling","relatively","not","learning"],"am struggling":["with"],"am sure":["there","there"],"am too":["drowsy"],"am unable":["to"],"am unsure":["this"],"am using":["the","type","the","haskell-mode"],"am validating":["the"],"am very":["sorry"],"am with":["Haskell,"],"amazing at":["tirelessly"],"amazing for":["a"],"amazing how":["much"],"ambiguity about":["where"],"ambiguity in":["_dna","this"],"ambiguity since":["this"],"ambiguity? in":["this"],"ambiguous and":["\"0000000000\""],"ambiguous as":["to"],"ambiguous at":["all"],"ambiguous what":["type"],"ambiguous. Function":["application"],"amino acids.":["What"],"among 100":["samples","samples","samples"],"amortized O(1)":["if"],"amount of":["code","expressiveness","code","code.","duplication?","duplication","redundant","work.","time,","time","code","time.","extra","whitespace","challenge","time","repeated","further"],"amounts to":["`True"],"amt =":["atomically"],"amusingly I":["received"],"an \"eta-reduction\"":["by"],"an \"optimization":["fix\","],"an 'implies'":["function"],"an 'x',":["it's"],"an 80":["char"],"an ADT":["to","with"],"an API":["from","here,"],"an API,":["it's"],"an API.":["But"],"an Applicative,":["for"],"an Array":["would","can","using"],"an Array,":["would"],"an EDSL-style":["to"],"an EmotionalContent":["to"],"an Enum":["instance","instance"],"an IORef":["String"],"an Int":["or","in","in","takes","is","or","instead","in","and"],"an Int)":["and"],"an Int).":["Check","To"],"an Int,":["once"],"an Int.":["This"],"an Integral":["constraint."],"an MVar":["to","to","`v`","of","M","(as"],"an MVar,":["STMVar,","it","you"],"an O(":["n^2"],"an O(1)":["reference"],"an O(n":["*","log","*"],"an O(n)":["operation","search"],"an O(n^2)":["algorithm","algorithm"],"an OR":["between"],"an STM":["computation"],"an [atomic](https://en.wikipedia.org/wiki/Atomicity_(programming))":["instruction"],"an [existing":["binding"],"an [operator":["section](http://www.haskell.org/haskellwiki/Section_of_an_infix_operator)"],"an [η-reduction](http://www.haskell.org/haskellwiki/Eta_conversion)":["(eta"],"an _expression_":["that"],"an `-\u003e":["Bool`"],"an `ALL-CAPS":["QUESTION?`"],"an `Alternative`":["version,"],"an `Either`":["instead"],"an `Enum`":["instance,"],"an `IORef":["String`,"],"an `Int`,":["an"],"an `Integer`":["and"],"an `Integer`.":["The"],"an `O(n)`":["operation."],"an `UArray`":["to","for"],"an `[(Int,":["String)]`"],"an `all":["(not"],"an `enumerate":["::"],"an `error`":["statement"],"an `if`":["to"],"an `import":["Debug.Trace`"],"an `infixl`":["declaration"],"an `insertWith'`":["that"],"an `insert`":["function"],"an `isQuestion`":["function"],"an `isSilence`":["function."],"an `isSpace`":["function"],"an `isUpper`":["predicate,","predicate"],"an `isYell`":["1-"],"an `isYelling`,":["you"],"an `on`":["function"],"an `otherwise":["="],"an `uncurry`...":["it"],"an `unlines`":["function"],"an abuse":["of"],"an acceptable":["solution.","(yet"],"an accident,":["only"],"an account":["`getBalance`","that"],"an accumulator":["and"],"an accumulator,":["it's"],"an accumulator-strict":["left","fashion,","fashion,","fashion,","fashion,","fashion,"],"an action":["."],"an additional":["condition","check","condition","evaluation","pattern","hint?","task","type","exercise"],"an advice":[":)"],"an algebraic":["type,"],"an algorithmic":["win,","loss.","win"],"an algorithmically":["better","better"],"an alias":["for","for","for"],"an almost":["immeasurable"],"an alpha":["character,"],"an already":["existing"],"an alternative":["approach","to","to","take","type","approach:","would","to","solution"],"an alternative:":["http://hackage.haskell.org/package/split-0.2.2/docs/Data-List-Split.html"],"an anagram":["of","of","of","is","of","of","of"],"an anagram,":["\"banana\"","that"],"an analog":["to"],"an answer":["on"],"an anti-pattern":["(especially"],"an anti-pattern,":["it'd"],"an api":["forcing"],"an approach":["based","similar","like","that","like"],"an appropriate":["predicate,","one","Applicative","test.","date,"],"an arbitrary":["sub-list.","step","order"],"an arg.":["Great"],"an argument":["to","from","from","to","from","appears"],"an argument,":["if"],"an array":["lookup.","comprehension,","or","based"],"an article":["about"],"an artifact":["from"],"an as":["pattern"],"an association":["list","list","list."],"an at-pattern,":["e.g."],"an atomic":["operation","instruction:"],"an attempt":["to","using"],"an awesome":["way"],"an awfully":["hard"],"an awkward":["way","arrangement"],"an axample,":["please!"],"an collect":["in"],"an earlier":["iteration","iteration.","version","(failed)"],"an easier":["way"],"an easy":["way","way","way","optimization.","task","description","explanation","way"],"an efficient":["implementation","type","version","implementation","algorithm."],"an elegant":["way","solution.","suggestion!","solution"],"an element":["of","into","of","of"],"an empty":["list","string","Map","list.","list.)","string","list.","line.","tree?","string.","tree.","list","list.","list","string","list","list.","string","list","tree.","list.","list...","list,","list.","list","string","string","string","string","mvar","string","list","string","string?","list,","`where`"],"an entire":["extra","line","map"],"an entry":["for"],"an enum":["type"],"an enum,":["and"],"an equation":["for","for","for","for","for","for","you"],"an equation,":["is"],"an equilateral,":["2"],"an equivalent":["statement,"],"an error":["or","without","to","(e.g.","response","when","however","here.","with","with","message","when","or","either","in","\"Could","(using","condition"],"an error,":["so","which","but"],"an error:":["`Robot.hs:8:10:"],"an esoteric":["function"],"an eta":["reduction"],"an eta-reduction":["and","and","to","(removing","to","on","to","to","though","to","(or","to","on"],"an eta-reduction),":["much"],"an eternity":["depending"],"an evaluated":["result)"],"an even":["lower","shorter"],"an example":["of","implementation","in","of","of","of","to","of","algorithm","later."],"an example,":["here's","f"],"an excellent":["description","explanation","name"],"an exception":["with","to","in","if"],"an exception.":["Using"],"an exclamation":["point.","mark."],"an excuse":["not"],"an exercise.":["Anything"],"an exhaustive":["search."],"an existing":["predicate.","one"],"an expanded":["version"],"an expected":["performance"],"an expensive":["unevaluated"],"an expert":["myself"],"an explicit":["exports","import","export","export","export","null","`seq`","`seq`…","accumulator","null","type","export","export","`return","test","`fromEnum`","type","internal","export","type","binding","namespace","import,","list","list"],"an exploration":["of"],"an expression":["context","using","like","with","that"],"an extension":["that"],"an extensions,":["as"],"an external":["lib"],"an extra":["pattern.","import","datatype","value","case","cons","space","challenge","argument?","```map```,"],"an eye":["on"],"an hour":["trying"],"an idea":["how","today"],"an idea,":["if"],"an ideal":["solution?"],"an identifier":["in","since"],"an identity":["function"],"an idiom,":["but"],"an idiomatic":["Haskell"],"an idiot.":["Of"],"an if":["expression,"],"an if,":["defining"],"an if-then":["for"],"an imperative":["interface.","language"],"an implementation":["of","of","I","that's","detail.","detail","detail","detail","of","that"],"an import":[":)","list."],"an import.":["`fromMaybe"],"an important":["step"],"an improved":["version."],"an improvement":["(suggested","as","in",":","to","or","in"],"an improvement,":["or"],"an incomplete":["set","pattern"],"an incremental":["Sieve"],"an indentation":["style"],"an index":["instead"],"an individual":["element."],"an infinite":["loop","loop","list,","list","list.","sequence,","loop."],"an infinitely":["large","large"],"an infix":["function.","operator","operator,","fmap","use"],"an influx":["of"],"an initial":["state","value"],"an initially":["empty"],"an inline":["pragma","lambda,","```let"],"an inlined":["strict","strict","strict","strict"],"an inner":["function"],"an input":["list","that"],"an insignificant":["difference"],"an instance":["for","of","of","of","of","of","of","declaration","of","of"],"an instruction":["who's"],"an int.":["What"],"an integer":["instead"],"an integer,":["performing"],"an interesting":["observation,","multi-line","aside.","way","implementation,","bit","solution,"],"an interleaving":["of","you'd","of","you"],"an intermediate":["step.","`isAnagram`"],"an internal":["debate","function"],"an internally-used":["function"],"an introductory":["text"],"an invalid":["number","digit","char","pattern","input.","character."],"an iota":["of"],"an isSpace":["function"],"an isosceles...etc,":["which"],"an issue":["-","what","for","with","with","with","with","at","against","about","with:"],"an issue),":["but"],"an issue.":["For"],"an item":["in"],"an n":["space"],"an obfuscated":["Haskell"],"an obvious":["one","way","one"],"an official":["package,"],"an ok":["trade-off."],"an old":["version","version"],"an older":["version,","version","bob_test.hs.","version","version","containers"],"an operation":["vs"],"an operator":["section.","section","(`?`)","in","section,","for","to","is","on","on","on","so","section,","so","on","for","section","section","function"],"an operator's":["fixity"],"an opposite":["to"],"an optimization":["at","fix.","here"],"an optimization,":["so","(will"],"an optional":["exercise."],"an order":["of","of"],"an ordering":["issue"],"an ordinary":["function"],"an other":["reason."],"an outcome,":["one"],"an outdated":["version"],"an outer":["scope"],"an output)":[":"],"an overflow":["and"],"an overkill":["here,","for"],"an overkill,":["but"],"an oversight":["of"],"an pleasant":["way"],"an similar":["function"],"an simpler":["filter"],"an something":["that"],"an then":["can"],"an ultimate":["hint"],"an un-satisfyable":["condition"],"an uncommon":["operator"],"an underscore":["if"],"an understanding":["of","of"],"an unexpected":["hiatus,","input,"],"an unnecessary":["step","import,"],"an unsolicited":["pull"],"an unused":["import.","variable","`None`","import","import"],"an update":["even"],"an updated":["version."],"an upper":["bound","bound","bound"],"an uppercase":["letter,","letter?","letter)"],"an warning":["about"],"an x":["such"],"anaGrams ::":["(String,","String"],"anagram =":["\\word","let","…`"],"anagram function":["and"],"anagram has":["a"],"anagram is":["any","\"the"],"anagram of":["another","each","itself.","\"banana\".","the","itself.","the","`w`"],"anagram suite":["for"],"anagram testing":["nicer"],"anagram word":["=","anagram"],"anagram }":["in"],"anagram\", but":["I"],"anagram' &&":["sort"],"anagram'` seems":["easier"],"anagram, \"banana\"":["is"],"anagram, that":["doesn't"],"anagram.hs` correctly,":["this"],"anagramFor ::":["String"],"anagramForS \u003c*\u003e":["notS`?"],"anagramForm to":["target"],"anagramOf a":["="],"anagramOf point-free,":["but"],"anagramming, or":["so"],"anagrams from":["words\"."],"anagrams generated":["where"],"anagrams is":["by"],"anagrams of":["each","each"],"anagrams or":["not."],"anagrams since":["it"],"anagrams the":["same"],"anagrams to":["the"],"anagrams. (It":["probably"],"anagrams. Consider":["refactoring"],"anagrams. There":["is"],"anagrams: \"hamlet\"":["and"],"anagramsFor \"Blah\"":["[\"blah\"]"],"anagramsFor \"blah\"":["[\"blah\"]"],"anagramsFor ::":["String","String","String"],"anagramsFor =":["filter","filter"],"anagramsFor before":["it"],"anagramsFor by":["leaving"],"anagramsFor in":["point-free","a"],"anagramsFor input":["="],"anagramsFor is":["not"],"anagramsFor may":["be"],"anagramsFor s":["=","="],"anagramsFor to":["\"anagramsFor","omit"],"anagramsFor very":["obscure."],"anagramsFor w":["="],"anagramsFor word":["="],"anagramsFor would":["be"],"analog to":["`fromList`"],"analogous to":["the"],"analysis anyway.)":["I"],"analysis on":["the"],"analysis works.":["Given"],"analyze then":["it"],"analyze though,":["and"],"analyze your":["word."],"analyze. If":["it"],"and \"0000000000\"":["as"],"and \"Right\"":["means"],"and \"XX":["power\""],"and \"all\"":["are"],"and \"amleth\".":["If"],"and \"dry\"":["in","where","where"],"and \"equal\",":["and"],"and \"equal\".":["I"],"and \"error\"":["seems"],"and \"returns\"":["that"],"and \"there":["exists"],"and \"words'\"":["could"],"and 'A'":["nucleotides."],"and 'N'":["that"],"and 'U'":["are","in"],"and 'any'":["combinators"],"and 'are":["anagrams"],"and (again)":["completely"],"and (b)":["I"],"and (hopefully)":["clearer."],"and (if":["you're"],"and (optionally)":["some"],"and (relative)":["ease"],"and (x:xs),":["it"],"and *last*.":["The"],"and *len*).":["That"],"and *where*":["going"],"and .":["map","flip","map"],"and 0":["for","isn't","aren't"],"and 0,":["we","we"],"and 0.004s":["compiled"],"and 10":["be"],"and 100":["is"],"and 11":["digit","elements"],"and 13":["of"],"and 14":["fail."],"and 2":["since","respectively)"],"and 2,":["and"],"and 2-":["all"],"and 3),":["due"],"and 4's,":["and"],"and 4?":["This"],"and 6":["days"],"and 6k+1":["after"],"and 7.":["Why"],"and 8":["make","lines"],"and 87":["should"],"and \u003ccode\u003ebreak\u003c/code\u003e.":["Then"],"and @anibal.":["I'll"],"and @everardo":["for"],"and @lauren":["against"],"and A":["patterns"],"and Alternative":["to"],"and Answers.":["This"],"and Applicative":["is"],"and B":["who","are","and","puts"],"and BangPatterns)":["can"],"and BayerPrimes.hs":["were"],"and Bounded":["then","can","to"],"and C++":["to"],"and Concurrent":["Programming","Programming","Haskell's","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Haskell","Programming","Haskell","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Programming","Haskell","Haskell","Programming","Programming","Programming"],"and Control.Arrow":["appear"],"and Control.Monad":["are"],"and Core":["by"],"and DNA":["strands","when,","strings","(a),"],"and Data.Char":["rather"],"and Data.Char.":["Right"],"and Data.List.Split's":["`wordsBy`."],"and Data.Map's":["implementation"],"and Data.Map.Lazy.Map":["and"],"and Data.Map.Map":["are"],"and Data.Map.Strict":["share"],"and Data.Maybe":["imports,"],"and Data.Text":["seemed"],"and Elixir":["mixed"],"and Equilateral":["has"],"and False":["into"],"and Falses":["to"],"and Foreign":["Functions."],"and Functor":["instance."],"and GHC":["supports","(or"],"and Haskell":["randomness","has"],"and Hoogle":["useful"],"and I":["don't","just","knew","wasn't","dismissed","think","started","think","had","spoke","can't","just","think","do","don't","should","don't","got","suppose","agree","think","feel","don't","don't","guess","do","accidentally","think","agree","got","was","wanted","can","got","think","ported","haven't","feel","can't","wasn't","am","wouldn't","can't","cannot","understand","don't","kinda","bet","think","was","came","think","just","feel","like","do","think","think","can","believe","think","think","found","had","found","had","don't","assume","think","removed","had","didn't","don't"],"and I'd":["rather"],"and I'll":["revisit","double"],"and I'm":["sure","trying","not","figuring","catching","still","sure","obviously","kicking","not","too"],"and I've":["also","used","removed"],"and IO":["interact"],"and IORef":["I"],"and Integer)":["on"],"and Just":["all"],"and LambdaCase":["makes"],"and Last":["with","days"],"and M.":["It's"],"and M.toList":["here?"],"and Monad":["are"],"and Monoid":["might"],"and Nothing":["otherwise.","will"],"and O(N)":["complexity"],"and O(n)":["space","stack"],"and O(n),":["plus"],"and OCaml.":[";)"],"and Orchestra).":["This"],"and RNA":["remain","as"],"and RNA,":["but"],"and RNABase":["should"],"and RSA":["and"],"and Right":["constructors","would"],"and School'":["types"],"and Split":["but"],"and Text":["wasn't"],"and Text.InterpolatedString.Perl6":["isn't"],"and True":["Bool","is","for"],"and U":["mean"],"and U.":["Your"],"and ViewPatterns":[":)"],"and WeekDate":["to"],"and [Data.List](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-List.html).":["I"],"and [pointfree](http://www.haskell.org/haskellwiki/Pointfree)":["might"],"and [this":["one](http://exercism.io/submissions/5217622eafd3df7a3c00024a)"],"and ^":["because"],"and _.":["The"],"and _for":["all"],"and `\"?\"":["=="],"and `&&`.":["You"],"and `&amp;&amp;`":["is"],"and `&amp;lt*&gt;`":["is"],"and `&gt;&gt;`":["functions"],"and `($)`":["operators?"],"and `(&amp;&amp;&amp;)`":["and"],"and `(,1)`":["would"],"and `(,n)":["."],"and `(.:)`":["are"],"and `(acc":["++)"],"and `(x:xs)`":["rather"],"and `*`.":["This"],"and `+":["1`"],"and `+`":["(or"],"and `.`":["has","for"],"and `.`.":["is"],"and `/=`":["in","operators"],"and `10^9::Integer',":["now"],"and `2`":["can"],"and `32`":["don't"],"and `:`":["is"],"and `:triple`":["another"],"and `\u003c*\u003e`":["save"],"and `\u003c*\u003e`!":["I'm"],"and `\u003c=`":["comparisons","is"],"and `\u003c\u003e`":["from"],"and `\u003c|\u003e`":["from"],"and `==`":["over","bother"],"and `=`":["sign"],"and `\u003e\u003e=`":["has"],"and `Bin`,":["but"],"and `Data.Char`":["are","tests."],"and `Data.List.all`?":["You"],"and `Data.Map.Strict`":["instead"],"and `Data.Set`?":["They"],"and `Data.Time.Calendar.Weekdate`":["to"],"and `False":["||"],"and `False`s":["to"],"and `IORef`":["may"],"and `Int`":["have"],"and `Integer`":[":)"],"and `Just":["\u003c$\u003e"],"and `MVar`":["-"],"and `M`":["or"],"and `Map`":["is","as"],"and `N`,":["it"],"and `Read`":["classes,"],"and `S.Set`":["ugly?"],"and `ShowS`":["are"],"and `T`.":["4"],"and `Weekday`)":["then"],"and `[i,":["i"],"and `\\`":["have"],"and ```(`elem`":["['a'..'z'])```"],"and ```False```.":["Maybe"],"and ```any```":["instead"],"and ```b```":["is"],"and ```filter```":["is","instead"],"and ```group```?":["The"],"and ```length":["."],"and ```length```":["seem"],"and ```map```.":["Have"],"and ```sortedWord```":["to"],"and ```unlines```.":["Let"],"and ```wordsDifferent```":["For"],"and `a":["++"],"and `a`.":["`Char`"],"and `allCaps`.":["I"],"and `allSpace`":["conditions"],"and `allWhitespace`":["is"],"and `all`":["to","(instead","are","functions.","when","are","in","if"],"and `all`,":["you"],"and `anagram`":["have"],"and `anagramsFor`":["if"],"and `and":["."],"and `any`.":["if","http://hackage.haskell.org/package/base-4.6.0.1/docs/Prelude.html"],"and `areaCode`":["are"],"and `ask`":["should"],"and `asking`":["definitions."],"and `atomicWriteIORef`":["does"],"and `b`":["are"],"and `b`,":["and"],"and `bearing`":["become"],"and `buildCounts`":["or"],"and `char":[":"],"and `chars`":["separately"],"and `chr`":["are"],"and `chr`,":["and"],"and `chunksOf`":["for"],"and `decimal`":["that"],"and `drop":["1`?","n"],"and `drop`s":["will","in","in"],"and `elem":["['a'..'z']`"],"and `enumFromThenTo`":["(which"],"and `f":[".","a","o"],"and `f`":["should"],"and `filter":["id`"],"and `filter`":["(in","do","is","in","pretty","to"],"and `filter`)":["and"],"and `filter`,":["I","but","which"],"and `filter`...":["though"],"and `flatten`":["in"],"and `fmap":["f","f"],"and `fmap`":["(or","are","(or"],"and `foldM`":["isn't"],"and `foldl'`":["is","should"],"and `foldl`":["(`foldl'`"],"and `foldr":["(||)"],"and `foldr`":["is","are","do"],"and `fromEnum":["::"],"and `fromEnum`":["(which","to"],"and `fromJust`":["versions"],"and `fromListWith":["."],"and `fromListWith`.":["All"],"and `fromList`":["are"],"and `g`":["to"],"and `getBalance`":["could"],"and `go":["x"],"and `grade`":["are","is"],"and `group`":["is"],"and `hasLetter`.":["The"],"and `import":["B`"],"and `insertWith`":["is","because","is","will","(which","directly","technique"],"and `isAllCaps`":["in"],"and `isAlpha`)":["instead"],"and `isAnagramOf`":["are"],"and `isAnagram`":["when","since"],"and `isAsciiLower`":["treat"],"and `isAsking`":["may"],"and `isDigit`":["with","from"],"and `isEmpty`":["which"],"and `isHexDigit`":["by"],"and `isLower`":["from"],"and `isNotSomething`":["span"],"and `isOdd`.":["`Data.List`"],"and `isPrefixOf`,":["etc."],"and `isQuestion`":["and","to"],"and `isQuestion`).":["But"],"and `isQuestion`,":["and"],"and `isQuestion`.":["You"],"and `isShout`":["on"],"and `isShouting`":["so"],"and `isSilence`":["point-free."],"and `isSilent`":["so"],"and `isUpper`":["treat",";)"],"and `isYelling`.":["Would"],"and `iterate`.":["No"],"and `j`":["map"],"and `la`":["bindings"],"and `last":["s`"],"and `lastTen`":["notice"],"and `leftOnTheWall`":["do"],"and `len":["=="],"and `liftM`":["in","and"],"and `lineNumber`":["share","work"],"and `lowerA`":["are"],"and `m`":["`n`","are,"],"and `map":["(,1)`.","toLower"],"and `map`":["than","instead","is","instead","would","results","(or","over","here,"],"and `map`,":["can"],"and `map`?":["You"],"and `mappend`":["in"],"and `maxBound`":["instead"],"and `maybeInsert`":["I'd"],"and `mod`":["and"],"and `modifyIORef":["name"],"and `n(n+1)/2`":["multiplied"],"and `nOrmal`":["are"],"and `nameSuffix`,":["can"],"and `next`":["instead"],"and `none`":["would"],"and `normaliseCase`":["functions"],"and `normalizedX`":["seem"],"and `null`":["in","(`l"],"and `numbers`":["subfunctions,","negatively"],"and `odd`":["rather"],"and `ofWhat`":["are"],"and `or":["."],"and `ord`":["are"],"and `permutations`":["are"],"and `phoneNumberPattern`":["should"],"and `phrase":["2`"],"and `pnAreaCode`":["exposed,"],"and `pred`,":["which"],"and `prettyPrint`":["on","are","should"],"and `primeFactors'`?":["They're"],"and `q`":["are"],"and `question":["="],"and `question`":["as","out","(eta"],"and `randomRIO`":["and","work"],"and `randomRs`.":["Alternatives"],"and `readProtein`":["function?"],"and `readTVarIO`,":["respectively."],"and `read`":["to"],"and `readsPrec`":["has"],"and `removeNonAlphanumerics`":["at"],"and `replace`":["a"],"and `replicateM`":["or"],"and `resetName`":["can","without"],"and `resetName`,":["but"],"and `ret`,":["or"],"and `reverse`).":["It'll"],"and `right":["g`."],"and `rnf`.":["See"],"and `robotName`":["are"],"and `runEitherT`":["are"],"and `sanitize`":["though,"],"and `scanl`":["but"],"and `scoreWord`":["is","in"],"and `secondCouplet`":["in"],"and `shouting`":["using"],"and `show":["(n-1)`"],"and `show`":["should","typeclasses.","functions","to","are"],"and `smallestPalindrome`":["seem"],"and `snd`":["calls","is","instead"],"and `snd`?":["You"],"and `sort":["s1'`","(map","w1`","w`","xs`","w`"],"and `sort`":["works","look"],"and `sort`.":["Be"],"and `sortedWord`":["it's"],"and `sorted`":["better","by"],"and `splitAt`":["tightens"],"and `square`":["more"],"and `succ`":["to"],"and `sum":["[]","it","it"],"and `sum`":["but"],"and `sum`,":["or"],"and `summarize`":["in"],"and `sw`":["are"],"and `swapMVar`":["are"],"and `t`":["read","is"],"and `tail`":["and","instead","instead?"],"and `tail`.":["In"],"and `tails`,":["might"],"and `thymidine`":["as"],"and `toDecimal`":["should"],"and `toEnum`":["which","should"],"and `toRNA`":["might"],"and `to`).":["Other"],"and `tokens`":["definitions"],"and `total`":["can"],"and `translateNucleotide`":["would"],"and `turnLeft`":["...","a","by"],"and `turnRight`":["just"],"and `uncurry`,":["otherwise"],"and `unlines`":["rather","and","may","functions"],"and `unlines`.":["I"],"and `unwords`":["functions."],"and `unwords`.":["On"],"and `uracil`":["are"],"and `verse`":["it"],"and `w`.":["For"],"and `wheel`":["could"],"and `where`":["should","rather","is","so"],"and `wordCount`":["should"],"and `wordsBy`":["behave"],"and `wordsBy`,":["they"],"and `wordsBy`.":["Not"],"and `x`,":["and"],"and `xs`":["the"],"and `y`":["altogether..."],"and `y`,":["even"],"and `||`":["is","instead"],"and a":["function","function","transformation.","somewhat","smart","second,","`(not","lambda,","`countWords`","datatype","helper","list","little","data","whole","list","certain","few","variable","list","better","strict","strict","Char","comparison.","tiny","Map","Data.List","bit","`zipWith`","lot","dot","bit","`Char","`toNoise","few","series","*lot*","function"],"and about":["4"],"and accumulate":["primes"],"and act":["accordingly."],"and actually":["the"],"and add":["an","one","(or","the","that","some","exercises"],"and adding":["a"],"and adds":["another"],"and after":["that"],"and afterwards":["to"],"and again":["unqualified","in","(not"],"and agreed.":["I"],"and all":["feedback","criticism","of","the","top-level","top-level","top-level","of","the"],"and all,":["but"],"and allocate":["that"],"and allocated":["however"],"and almost":["everyone","working"],"and also":["straightforward.","compare","in","faster.","the","the","11","it","now","have","concurrency.","to","try"],"and also)":[":)."],"and although":["its","I"],"and always":["should","succeeds"],"and an":["appropriate","if,","operator","ADT","MVar","explicit"],"and ands.":["I"],"and another":["does"],"and any":["name","piece"],"and apparently":["the"],"and appending,":["it"],"and applicative":["styles","styles"],"and applicative,":["so"],"and apply":["them","`ceiling`","of"],"and applying":["the"],"and are":["possibly","at","clear"],"and argument":["names!","names."],"and arrange":["the"],"and as":["you","you","`prefix`","`prefix`","a","a","a"],"and assimilate":["the"],"and at":["the","a"],"and availability":["to"],"and avoid":["`group`","parentheses","the","these"],"and b":["="],"and back":["again"],"and be":["unable","written","able"],"and because":["it's","some","it"],"and been":["using"],"and below":["is"],"and bench":["it"],"and better":["outlines","then"],"and beyond":["the"],"and binary":["predicates","operators"],"and blank":["to"],"and both":["functions"],"and breaks":["it"],"and bstLeft,":["this"],"and build":["a","the","the","it"],"and builders":["that"],"and buses":["might"],"and buy":["some"],"and by":["then","a"],"and calculating":["`addends`."],"and call":["it","that.","to"],"and calling":["methods"],"and calls":["`rest'`","toList"],"and came":["up"],"and can":["easily","use","overflow","participate","even","not","be","be","even"],"and can't":["be","be","be","be","be","be","be","be","be","be","be"],"and cannot":["optimise,"],"and case":["conversion"],"and case,":["also"],"and cause":["the"],"and ceiling.":["1)"],"and century":["means"],"and certainly":["not"],"and chain":["them,"],"and change":["name","it","definition.","```words```"],"and changing":["the"],"and check":["if","if"],"and checking":["which","both"],"and choose":["what"],"and chose":["the"],"and chr":["and"],"and classify.":["Thus,"],"and clauses":["of"],"and clean":["as","up"],"and clean,":["but"],"and clean.":["You"],"and cleaner":["than"],"and clear":["what","if","code,"],"and clearer":["than"],"and clearer.":["In"],"and clearer..":["without"],"and code":["like","will","looks"],"and code)":["pair"],"and coding":["style"],"and cols":["are"],"and come":["back"],"and common":["letter"],"and compare":["two"],"and comparing":["them"],"and complain":["when"],"and complexity":["when"],"and complexity.":["You"],"and composing":["the"],"and composition":["for"],"and comprehend).":["Given"],"and concatenate":["it."],"and concatenation":["of"],"and concise":["-","way?"],"and concise,":["but"],"and conciseness":["for"],"and conditionals":["this"],"and consequently":["more"],"and consider":["\"^$#&amp;!!!\"","implementing"],"and considered":["using"],"and consume":["the"],"and contain":["too"],"and continue":["using","algorithm."],"and contrary":["to"],"and control":["your"],"and converting":["back."],"and coordinates":["to","are","are","as"],"and correct":["me"],"and correctness,":["then"],"and could":["be","easily","potentially"],"and couldn't":["believe","easily","work","get","find"],"and count":["them"],"and count-of-one":["tuples,"],"and counting":["all"],"and create":["all"],"and created":["the","a"],"and creates":["a"],"and data":["type","structures?","type"],"and data.char":["that"],"and datatypes":["from"],"and dc=220":["so"],"and decode":["look"],"and decomposition":["is"],"and deconstructed,":["but"],"and define":["all","the","it"],"and defined,":["you"],"and defining":["the","a"],"and determine":["the"],"and did":["that","`exercism"],"and didn't":["see","find","even"],"and digest":["a"],"and do":["this","it","syntax","it","`fromJust`"],"and documentation":["strings."],"and dodge":["the"],"and doesn't":["seem","do","need","need","require","have","have","require","pass,"],"and doing":["two","`10^(9"],"and don't":["know","have"],"and dowhat":["may"],"and dropping":["all"],"and each":["other?"],"and eases":["reusability."],"and easier":["to","to","to","to","to","to"],"and easiest":["(but"],"and easy":["to"],"and effective":["solution"],"and efficient":["manner.","way","use"],"and efficiently":["using"],"and either":["I"],"and elegant":["in","solution","here,"],"and elegant.":["The"],"and eliminate":["the"],"and eliminates":["the"],"and end":["up"],"and enforcing":["constraints"],"and ensure":["you're","correctness"],"and environment":["in"],"and equality":["(what","checking."],"and especially":["follow","multi-line"],"and essentially":["support"],"and evaluate":["them","only"],"and even":["got"],"and everybody":["hates"],"and everything":["else","else"],"and exercism":["has"],"and expanding":["those"],"and explicit":["recursion."],"and explicitly":["import","import","import","import","import","sequence"],"and export":["lists"],"and exported,":["but"],"and exports":["look"],"and exports,":["was"],"and expressive,":["and"],"and extracting":["capture"],"and f":["aren't"],"and failed":["the"],"and fairly":["popular."],"and fall":["to"],"and fast,":["I"],"and faster":["using","to","to","implementation"],"and few":["nice"],"and figure":["out","out"],"and filter":["on","instead","out","though.","don't","would"],"and filtering":["in"],"and filters":["isn't"],"and find":["a"],"and finish":["isn't"],"and first":["sorted","sorted","access"],"and fix":["all","the","that","it","them","this","solution"],"and fixing":["the"],"and flip,":["but"],"and flipped":["the"],"and foldable":["to"],"and foldable\"":["?"],"and folding":["over"],"and foldr":["are","in","instead"],"and following":["that"],"and for":["your","this"],"and force":["the"],"and forces":["entire"],"and forcing":["the","me"],"and forcing,":["so"],"and forgot":["to","about"],"and forth":["between","would"],"and found":["it","it","only"],"and fours":["are"],"and friends,":["but"],"and friends.":["I"],"and fro.":["I'm"],"and from":["all","a"],"and fromListWith?":["Might"],"and function":["composition","names,","applications"],"and functions":["from","due","first.","that"],"and functors":["and"],"and fuzed":["inside"],"and garbage":["collect"],"and gave":["it"],"and general":["comments"],"and generally":["having","not"],"and generic":["usefullness"],"and get":["an","to","the","rid","a","a","you"],"and getting":["a","just","the"],"and ghc":["-O2"],"and ghci":["trac."],"and give":["O(log","them","it"],"and gives":["Haskell"],"and giving":["it"],"and go":["up","back","to"],"and good":["point"],"and googling":["has"],"and got":["an"],"and grasp":["some"],"and great":["in"],"and group":["words"],"and grouping.":["Take"],"and guaranteed":["to"],"and guards":["instead","you","makes","combined"],"and had":["a","it"],"and hard":["to","to"],"and harder":["to"],"and has":["no","the","to","nice"],"and haskell":["basic"],"and have":["type","type","otherwise","the","a","only","`isSeparator`","a","another","`start","another","to","`a`","more","correspond","O(1)","O(1)","the","bad","gone"],"and haven't":["rechecked"],"and having":["strict"],"and hayoo":["for"],"and haystack":["are"],"and hdevtools":["and"],"and here's":["why:"],"and hope":["that"],"and hopefully":["produce","it","that"],"and how":["to","quickly","it","to","Data.Map.Strict","to","Haskell's","do","the","do","to"],"and http://stackoverflow.com/questions/841851/how-do-you-combine-filter-conditions":["though"],"and hunit":["1.2.5.1"],"and i":["had"],"and ideally":["the"],"and idiomatic":["haskell."],"and if":["readability","the","you","it","you","there's","they","it","you","the","you","you","that's","the","you","it"],"and implement":["them","it"],"and implementation":["in"],"and implemented":["strip"],"and import":["functions,","the"],"and important":["to"],"and imports":["to","(preferably;"],"and impossible":["with"],"and impriving":["it"],"and impure":["implementation"],"and in":["need","particular","`nextWeekDay`","`Prelude`","some","that","that","this","all","the","secret-handshake","a","Python","`map","GHCI","some"],"and inconsistent":[":)"],"and incrementing":["a"],"and indented":["by","minimally"],"and inefficient":["as","solution,","was"],"and informative":["(I"],"and initialize":["them"],"and inline":["\u003ccode\u003e(==)","lambda."],"and insert":["separately."],"and installable":["with"],"and instead":["I've","use"],"and intermediate":["thunks"],"and into":["variable","`responseFor`."],"and involves":["no"],"and is":["treated","not","indeed","reasonably","pretty","easy","almost","called","still","therefore","left","much","27","fixed","an","arguably"],"and isAlpha.":["I"],"and isEmpty":["as"],"and isLower":["from","from","treat","treat"],"and isShout":["functions"],"and isShouting":["predicates"],"and isSuffixOf":["to"],"and isYell":["are"],"and isn't":["used"],"and isolation":["is"],"and it":["still","would","will","will","was","only","works","passed","is","will","will","will","would","is","will","would","implements","will","will","looks","run","throws","may","ensures","does","takes","looks","has","doesn't","will","might","is","might","explains","builds","might","avoids","basically","takes","matches","would","has","took","will","shouldn't","means","didn't","doesn't","requires","points","was","indents","seems","lifts","is","looks","contains","would","says","says","also","can","doesn't","will","will","will","makes","doesn't","results","may","does"],"and it'll":["have","be"],"and it's":["equally","instance","a","not","arguments.","not","customary","only","using","not","used","very","a","called","many","often","slightly","really","conceptually"],"and its":["use","two","argument,","argument.","first","second","contents","argument.","result","more"],"and just":["making","write","do","calculate","use","use","pumps","adds","ported","now","use","used","transformed","drop","use","say","operate","use"],"and keep":["the"],"and kinda":["trace"],"and knowledgeable":["should"],"and kudos":["for"],"and lack":["of"],"and last":["functions,"],"and later":["on","with"],"and laziness":["was"],"and lazy":["map"],"and learn":["why"],"and leave":["out","everything"],"and left":["fold","it","handside"],"and length":["is"],"and lengths,":["so"],"and less":["code","readable","code."],"and let":["me","me","me","me","me","me","me","me"],"and let.":["Not"],"and letters":["as"],"and libraries":["to"],"and library":["optimizations"],"and likely":["confusing.","no"],"and linear":["time"],"and list":["deforestation.","comprehension"],"and listen":["for"],"and lists":["being"],"and little":["else."],"and locally":["changed"],"and locking":["after"],"and long":["Map."],"and long-winded":["solution"],"and look":["for","at"],"and looks":["good","like"],"and looping.":["But"],"and lost":["it's"],"and lowercase":["into","is"],"and lowercased":["version."],"and m":["be"],"and made":["some","the","it","the","a"],"and mainly":["personal"],"and maintainability":["trumps","issues"],"and make":["something","sure","it","it","an","it","code","it","it","sure"],"and makeNucleotide":["being"],"and makes":["it","it"],"and making":["it"],"and map":["lines","(and"],"and math":["in"],"and may":["be","be"],"and maybe":["use","lazier.","the","even","I'll","a"],"and memory":["lookup","footprint."],"and merely":["guessed"],"and might":["let"],"and minBound":[".."],"and mine.":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/leap/example.hs"],"and mixtures":["of"],"and mkRobot":["become"],"and mod":["separately"],"and modified":["them"],"and modify":["`toRNA`"],"and modularity.":["I"],"and monads":["are"],"and monoidal":["functions"],"and monoids":["so"],"and more":["performant","clear.","readable.","readable.","performant","efficient","subjective:","efficient","consistent","readable","clear","likely","compact","consistent.","examples.","succint...","robust.","general","efficient","complicated.","idiomatic","obvious.","performant"],"and most":["elegant","clearly"],"and move":["``toUpper```in:"],"and moved":["the","the"],"and moving":["left,"],"and much":["like","much"],"and mutable":["state."],"and mutation":["for"],"and my":["code","servers","brain","`checkDigit`","string","hands"],"and n":["=","\u003e="],"and n'":["don't"],"and name":["the"],"and naming":["of","conventions"],"and need":["to"],"and negate":["that."],"and negative":["numbers."],"and next":["submission"],"and nice":["solution."],"and no":["harder","lowercase","lists…","lists","`reverse`.","mutable","sooner","need","`zip`?"],"and no-one":["to"],"and no.":["Fusion"],"and non":["pinned"],"and none":["of"],"and normal":["forms","forms."],"and normalization":["of"],"and not":["a","guards.","export","syntax.","a","exported.","use","an","a","had","really","need","completely","need","need","`Map.empty`?","use","`choice`?","really","create","bottom.","part","for","`length","necessarily","count","sure","really","for","as","as","\u003cpre\u003eisAsking","worth"],"and nothing":["custom"],"and now":["we","I'm","that","I","it"],"and numbers":["are","as","could"],"and numerous":["calls"],"and obvious":["way"],"and odd":["divisors."],"and often":["preferable","used"],"and on":["the","each"],"and once":["you"],"and one":["functions.","that","that's","for","for"],"and ones":["for"],"and only":["evaluating","traverse","covers","one","if","if","care"],"and open":["to"],"and opens":["up"],"and optimize":["if"],"and optimized":["away"],"and ors":["and"],"and other":["list","concepts","common"],"and others":["don't."],"and others,":["in","if"],"and others.":["`isUpper"],"and outcome":["is"],"and output":["is"],"and over":["on","again,"],"and over,":["e.g."],"and overall":["length"],"and overflowed":["silently?"],"and parameter":["names"],"and parameters":["better"],"and parentheses":["if"],"and parse":["concerns.","concerns.","each"],"and partial":["to","application","functions"],"and partly":["because"],"and pass":["`numeralsIter`"],"and passing":["it","the"],"and paste":[":/"],"and paste,":["rather"],"and pattern":["matching","matching","matching,","will"],"and perform":["an"],"and perhaps":["not","also","also","`fromListWith`"],"and picking":["a"],"and places":["to","where"],"and please":["sumbit"],"and point":["on"],"and pointers":["@abagail"],"and pointfree":["if","it..."],"and pop":["it"],"and pop/shift.":["The"],"and positive.":["I"],"and possibly":["even","also"],"and precedence":["(collectively,"],"and predicates":["such"],"and prelude":["functions"],"and pretty":["interesting"],"and prettyPrint":["functions"],"and previous":["use"],"and probably":["just","just"],"and problematic":["when"],"and provide":["the"],"and provides":["a"],"and providing":["alternatives.","it"],"and publicly":["available"],"and pull":["requests"],"and punctuation":["may"],"and put":["`responseFor`","in","it","`firstCouplet`","will","the","you","it"],"and put.":["Take"],"and question":["is"],"and questioned":["nonsence."],"and questioning":["rules","cases"],"and quiet":["more"],"and re-ordered":["conditions,"],"and read":["better"],"and readability":["is"],"and readability.":["I'm"],"and readable":["-","solution."],"and reading":["haskell"],"and reads":["just"],"and really":["simplify"],"and recognize":["it"],"and redone":["my"],"and reduces":["the"],"and refactor":["it"],"and regret":["this"],"and reimplemented":["this"],"and reinforced":["my"],"and rejected":["it"],"and relevant":["structure"],"and rely":["on"],"and remember":["what"],"and remove":["repetition..."],"and removed":["the","my"],"and removing":["will"],"and rename":["`School'`"],"and renaming":["it"],"and replace":["zipping","them","it","together."],"and replaced":["it"],"and response":["for"],"and restarts":["one"],"and restrict":["you"],"and restructuring":["(`:(toRNA"],"and result":["will"],"and resulted":["in"],"and results](http://lpaste.net/7484140762804781056))":["because"],"and return":["value"],"and returned":["a"],"and returning":["the"],"and returns":["a","data","the","a","a","a","`(f","its"],"and reuse":["it."],"and review":["other"],"and rewrite":["it"],"and rewriting":["as"],"and right":["hand","branches?"],"and role":["is","is"],"and run":["':t","`hlint`"],"and saves":["you"],"and saving":["an"],"and scope":["is","is"],"and scoped":["`translate`"],"and scores":["as"],"and searched":["that"],"and second":["parts.","part"],"and second,":["although"],"and see":["whether","if","whether","what","there's","what's","how","how","which","if","if","how","which"],"and seeing":["what"],"and seems":["immediately","not"],"and seen":["that"],"and semicolons...":["that's"],"and separate":["dots"],"and shadow":["the"],"and ships":["with"],"and short":["implementation","(one"],"and shortcircuit":["evaluation."],"and shorter":["ways","even."],"and should":["have","compile","work"],"and shouldn't":["be","be"],"and shout":["with"],"and shouting":["could","clauses"],"and similar,":["otherwise"],"and simple":["that","exercise."],"and simplicity":["for"],"and simplifies":["your"],"and simplify":["code","code."],"and simply":["map","write","aborts","do","say"],"and since":["you"],"and sincerely":["I"],"and sing":["defined"],"and skipped":["the"],"and slightly":["more"],"and so":["does","on,","I","forth.","probably","was","populating","can","took","forth.","is","can't"],"and solve":["this","this"],"and some":["of","arithmetic","effectful","slicing,"],"and sometime":["in"],"and sometimes":["I","it"],"and sort":["target","of","came","toLower'"],"and sort)":["on"],"and sorted":["lower","list,"],"and sorting":["part,"],"and space":["performance."],"and space,":["and"],"and spares":["us"],"and split":["afterwards.."],"and starting":["to"],"and step":["through"],"and stick":["it"],"and still":["pretty","uses","be","have","readable."],"and stole":["some"],"and store":["the","the","the"],"and storing":["the","an"],"and strict":["modules,","variant","Map?"],"and strictness,":["check"],"and stuck":["with"],"and stuff,":["so"],"and submit":["a"],"and submitted":["iteration"],"and subtract":["that"],"and successive":["sequences"],"and such,":["but"],"and suffer":["`fromList`"],"and sum":["might","them"],"and swapMVar":["being"],"and sweet.":["It's"],"and switched":["to","to"],"and switching":["between"],"and symbols":["on"],"and syntax":["rather"],"and syntax.":["I'll"],"and tail":["on"],"and take":["up","the","O(n)"],"and taking":["advantage"],"and tell":["them","me"],"and tells":["us"],"and test":["resulting","pass."],"and tests":["can't"],"and tests.":["I"],"and text,":["as"],"and than":["understand"],"and thanks":["for","for","to","also","for","for"],"and that":["would","looks","Alternative","every","if","allCaps","the","it's","`==","that","you","the","multiplication","thunk","you"],"and that's":["originally","not","not","not","the","avoided","when"],"and that,s":["what"],"and the":["function's","accumulation.","accumulation","final","latter","``","people","interface","parens,","responses,","way","clojure","function","result,","most","parens","`\"\\n\"`","other","identity","monoid","next","previous.","outer","solutions","accumulator","last","parentheses","second","`$`","parens","response,","example","public","other","numbers","parentheses,","exercise","prettyPrint","fixity","`fromEnum`","check","string.","nested","function","function","specifications","second","computation","fact","algorithm","way","maths","libraries,","temporary","`filter`","Alternative","lack","tests","8","Map","program","second","haddock","recursion","use","strictness","implementation","list","function","previous","difference","`fromEnum","Weekday","surrounding","accumulator","way","algorithm","Enum","thunks","rest","`==`,","meaning","`map","result","MVar","value","String","API.","goodies","folds,","storage","meaning","other","first","body","where","issue","rest","error","time","strictness","way","length","operator","nines","successor","specific","`baseNums`","second","tests","rest","next","tests","if","documentation","logic","whole","suggested","unnecessary"],"and their":["respective"],"and then":["on","using","seeing","using","the","negating","not'ing","decided","group","remove","put","_fromListWith_,","you","when","extracting","you","filtered","illumination.\"`),","move","do","also","submitted","you","functions","funcitons","two","use","I","you","put","rethrow","either","all","the","creating","have","acting","look","return.","do","manually","a","`map`","use","recurses","writing","call","it's","immediately","caller","run","using","grouping","take","I","if","gather","gather","pattern","try","another","find","a","it","return","combine","the","you","you'd","iteratively","group","compare","grouping","the","`map","it","use","look","appying","tried","drill","finally","after","seeing","tries","stops"],"and there":["are","didn't","are","should","isn't"],"and there's":["nothing","a","nothing"],"and therefore":["a"],"and they":["don't","were","all"],"and they're":["fun","localized"],"and think":["about","in"],"and this":["one","really","only","challenge","one,","one","function","code","one","kind","looks","will","is","is","is","function","is","is"],"and those":["are"],"and throw":["a","an"],"and throwing":["it"],"and thunk":["in"],"and thus":["```map","fmap","the","the","the","`toRNA`","kept","it","you","right"],"and thymidine":["are"],"and time":["is","performance"],"and to":["clean","understand","write","import","bind","make","avoid","the","put","float","do","Int.","to"],"and toEnum":["but"],"and toEnum,":["so"],"and top":["were"],"and total":["without"],"and totally":["abandoned"],"and trailing":["white"],"and transform":["it"],"and translated":["it"],"and transpose,":["not"],"and treat":["all","all","them"],"and trick":["fromEnum"],"and tried":["a","to","tinkering"],"and tries":["to"],"and try":["to","and","a"],"and trying":["to"],"and tuples":["up"],"and turn":["a","it"],"and type":["signature","signatures)","signature","level"],"and ugly":["without"],"and unconverting":["from"],"and uncurry":["popped","have"],"and understand":["and","the"],"and understand.":["They","Of"],"and understandable":["a"],"and understanding":["Monads"],"and unevaluated":["arguments),"],"and unimportant:":["if"],"and unintuitive":["than"],"and unlikely":["to"],"and unlined":["for"],"and unlines":["in","functionality"],"and unnecessary.":["With"],"and unneeded.":["A"],"and unsorted":["versions"],"and unwrap":["Schools,"],"and unwrapping":["boilerplate","a","but"],"and unwrapping,":["but"],"and upcases":["all"],"and update":["this"],"and updating":["of"],"and use":["let","an","`toAscList`.","`none","the","that","`minBound`","that","other","`unfoldr`","that","m","a","`(,1)`.","`foldl'`","only","the","them","a","more","another","more","`foldl'`","`mapM`","the","that","`reverse","`[minBound..]`","sqrt,","`[minBound..]`","that.","only","them","`RandomRIO`"],"and used":["guards.","a","two","pattern","the","curry","only"],"and uses":["many","explicit"],"and using":["randomRs.","these","fromListWith","`(,1)`","that","record","functionality","`foldl'`","`unlines`","the","that","the","the","```(+)```","a"],"and validate":["this"],"and validateLength":["into"],"and value":["strict,","strict","for"],"and values":["defined","instead"],"and variable":["names"],"and various":["popular"],"and very":["much","subjective"],"and vim-hdevtools,":["but"],"and w":["=="],"and w'":["in"],"and wanted":["to"],"and warn":["you"],"and was":["just","just","surprised","looking","happy","able"],"and watch":["your"],"and we":["know","determined","don't","need"],"and we'll":["see"],"and what":["problems","all","this","WHNF","is"],"and what-have-you":["-"],"and whatever":["binding"],"and whatnot.":["I"],"and when":["I","you","you","it's","it","to","to","you","that"],"and whenever":["else"],"and where":["in","to","instead"],"and whether":["that","or"],"and which":["should"],"and why":["is","it","they're","not"],"and widely":["accepted"],"and will":["build","use","take","take","run","look","do","work","not","be","have","fuse","have"],"and with":["the","sufficiently"],"and without":["looking","pattern","a","the"],"and won't":["have"],"and wondered":["why"],"and word,":["and"],"and wordsBy":["function"],"and works":["for","basically","really","better","great"],"and would":["like","make","save","much","get","save","it"],"and write":["out","this","the","`return","the","an","wordsBy"],"and y":["are"],"and yeah...":["it"],"and yelling":["with"],"and yet":["`isQuestion`"],"and yield":["a"],"and you":["might","get","add","might","only","shouldn't","aren't","wouldn't","can","can","can","can","have","can","could","should","would","wouldn't","want","only","are","can","can","code","started","need","can","do","have","may","indent","won't","won't","should","need","won't","can","won't","never","aren't","could"],"and you'd":["specify"],"and you'll":["see","have","not","end"],"and you're":["shadowing","only","doing"],"and you've":["got","almost"],"and your":["imports'","use","code","code","response","original","function"],"and your's":["predicate"],"and yours":["beats"],"and/or Applicative":["instances"],"and/or Data.List.Split's":["`splitPlaces`"],"and/or Monad":["abstractions"],"and/or ```hiding```.":["More"],"and/or `all`":["so","instead","in","might","rather","here."],"and/or `any`":["instead","instead","and"],"and/or `any`?":["I"],"and/or `insertWith`.":["That"],"and/or hashable.":["Hint:"],"and/or look":["up"],"and/or multiple":["equations"],"and/or operators":["that"],"and/or poor":["performance."],"and/or readable":["though..."],"and/or run":["out"],"and/or space":["leak."],"and/or the":["precision"],"and/or use":["qualified","qualified","import"],"and/or very":["carefully"],"ands and":["ors"],"ands. I":["have"],"angle brackets,":["so"],"angle test":["before"],"angles when":["you"],"anindn inndla":["etltsh"],"annotate the":["1","`sqrt`"],"annotate top-level":["bindings,"],"annotate types":["to"],"annotation I":["looked"],"annotation avoids":["that"],"annotation for":["the"],"annotation off":["of"],"annotation to":["avoid","guarantee"],"annotations means":["that"],"annotations pretty":["often."],"annotations were":["no"],"annotations, but":["it"],"annotations. If":["you"],"annoyed by":["the"],"annoyed. We":["need"],"annoying that":["this"],"annoying to":["have"],"annoying, really":["made"],"annoying. I'll":["try"],"another (I":["think"],"another `map`":["in"],"another approach,":["because","have","just"],"another binding":["in"],"another catch-all":["case"],"another character":["that"],"another clause":["to","for"],"another clever":["solution"],"another common":["option"],"another constructor":["for","to"],"another convenient":["way"],"another data":["structure","structure"],"another does":["`putMVar"],"another easy-to-use":["typeclass"],"another element.":["(It"],"another eta-reduction":["(remove"],"another evaluation":["properties."],"another failing":["tests"],"another font":["(Menlo),"],"another from":["Prelude."],"another fun":["one"],"another function":["or","in","and","take","but","from","in","for","in"],"another function,":["to","then"],"another generator":["for"],"another go":["at","tomorrow."],"another implementation":["that"],"another import,":["it's"],"another in":["case"],"another instance":["where"],"another internal":["representation"],"another is":["to"],"another level":["of","of"],"another list.":["A"],"another look":["at","at"],"another map,":["or"],"another module,":["it's"],"another name)":["that"],"another nested":["function,"],"another newline":["at"],"another non":["included"],"another occurrence":["of"],"another one":["that","of"],"another one,":["where","but"],"another operator":["that"],"another option":["would","as","instead","which"],"another parser":["or"],"another pattern":["(for"],"another popular":["choice."],"another problem":["with","that"],"another problem,":["I"],"another shot":["later."],"another significant":["improvement."],"another snippet":["--"],"another solution":["that","to","that"],"another step":["further"],"another story,":["but"],"another strategy":["for"],"another task":["with"],"another test":["that"],"another thing":["for"],"another time":["then."],"another try":["to"],"another type":["it's","expression.","such"],"another type.":["This"],"another typeclass.":["The"],"another value":["with"],"another way":["would","to","to","of","to","to","it","of"],"another way,":["and"],"another, and":["then"],"anotherStyleOfNamingFunctions is":["used"],"answer \"What":["is","is","is"],"answer a":["few"],"answer at":["the","the"],"answer considering":["how"],"answer for":["```anagramsFor"],"answer from":["my"],"answer in":["less"],"answer is":["relying","not"],"answer looks":["like"],"answer on":["that"],"answer or":["early"],"answer than":["```anagramsFor"],"answer when":["you"],"answer would":["be","be"],"answer your":["question"],"answer). Now":["I'll"],"answer. Search":["for"],"answer... for":["now"],"answerElse ::":["String"],"answerNothing, answerElse":["::"],"answerQuestion, answerShout,":["answerNothing,"],"answerShout, answerNothing,":["answerElse"],"answered by":["looking"],"answering function":["from"],"answering whether":["or"],"answers and":["make"],"answers looks":["nice,"],"answers my":["question"],"answers succinctly":["like"],"anti-pattern (especially":["when"],"anti-pattern, it'd":["be"],"any (SOME":["CONDITION"],"any (_)`":["or"],"any (not":[".",".","."],"any ..`":["into"],"any Char":["that's"],"any Data.List":["functions"],"any Enum,":["so"],"any Enum.":["You're"],"any Haskell":["so","class"],"any Haskell,":["so,"],"any Integer,":["not"],"any Integral,":["it"],"any Lefts":["ever"],"any MonadPlus":["type."],"any Num":["to"],"any Wednesday":["I"],"any `atomically":["."],"any `f`":["(even"],"any `seq`":["calls"],"any added":["clarity."],"any advice":["there?","is"],"any all`":[":p"],"any amount":["of"],"any and":["map."],"any arguments).":["It's"],"any arguments,":["you"],"any arguments.":["The"],"any attempt":["to"],"any auto-generated":["\"de-constructor\""],"any base":["monad,","2-10"],"any base,":["except"],"any behavior":["that"],"any belong":["to"],"any benchmarks":["though"],"any better":["than","by","with"],"any case":["other"],"any case),":["but"],"any case.":["Carry"],"any character,":["it"],"any choice":["of","of"],"any circumstance":["whatsoever."],"any circumstance,":["since"],"any cleaner":["or"],"any clearer,":["as"],"any clue":["how"],"any code":["importing"],"any comments":["were"],"any comparative":["inefficiency"],"any compiler":["warnings","optimizations.","tricks."],"any computation":["is"],"any computation,":["it"],"any constructors":["or"],"any context":["to"],"any criticism":["here."],"any custom":["operators"],"any data":["structure","it"],"any difference":["between"],"any direction":["I"],"any drawbacks":["to"],"any earlier":["(in"],"any efficiency":["compared"],"any efficient":["way"],"any elegant...":["Is"],"any element":["will"],"any elements":["of"],"any error":["handling","checking."],"any exists.":["Note"],"any explicit":["recursion.","recursion.","`seq`"],"any f.":["You"],"any faster":["when"],"any faster.":["Inserting"],"any flipping":["or"],"any folding":["function"],"any fromEnum":["or"],"any function":["name","in","that"],"any functions":["explicitly"],"any good":["reasons"],"any guarantee":["that"],"any guards.":["Here's","For"],"any headway":["in"],"any helper":["function"],"any hint":["how"],"any improvement.":["I"],"any information":["on","about"],"any inputs":["that"],"any insight":["into"],"any intermediary":["Floating","thunks."],"any intermediate":["tuples."],"any invalid":["characters"],"any isAlpha":["s","str","str"],"any isAsciiLower`":["since"],"any isLetter":["a","a","a","voice","s`?","xs","xs"],"any isLower":["anyway.","s`","message)```?","str)`,"],"any isLower]":["."],"any isLower`":["but","but","would","which","or","will","is","might"],"any isLower`,":["you"],"any isUpper":["s)`","message","str","str`","xs","\u003c*\u003e","text"],"any issues":["here."],"any kind":["of","of"],"any language":["extensions","to","aside"],"any language)":["instead"],"any language.":["They're"],"any large":["Haskell"],"any later":["IORef"],"any leftovers":["in"],"any letter;":["Char"],"any letters":["is","at"],"any line":["returns"],"any lists":["at","or","or"],"any lists,":["moreover"],"any looking":["up"],"any loops":["here,"],"any loss":["of"],"any lowercase":["letters","letters","letters."],"any meaning":["of"],"any module":["too,"],"any monad":["`m`."],"any more":["elegantly","clear","complicated.","but"],"any name":["starting"],"any neater.":["It","What'll"],"any need":["to","to","for"],"any nitpicks":["yet"],"any nits":["left."],"any non-standard":["libraries,"],"any normal":["function,"],"any of":["those","these","the","these","that","these","several.","these","them","the","the"],"any operator":["and","and","(which","and","and"],"any operator,":["so","so","so","you"],"any operator.":["You","The","Everything","Same","`takeDown`","You","`a","`foo"],"any optimizations.":["I've"],"any other":["top-level","concept...\"","function","functions","possible","transformation","way","functions)","way","function,"],"any output":["generated"],"any p":["xs","xs"],"any p`":["and"],"any pair":["of"],"any particular":["reason","reason","reason"],"any pattern":["matching."],"any performance":["improvements,","requirements"],"any permutation":["of"],"any piece":["of"],"any planet":["is"],"any pointers":["to"],"any positional":["base"],"any positive":["integers"],"any potential":["name"],"any predefined":["functions."],"any previous":["rows"],"any problems":["with"],"any progress":["at","in."],"any purpose":["due"],"any ramifications":["to"],"any real":["loss"],"any reason":["you","you","(whether","why","not"],"any result":["at"],"any runtime":["overhead"],"any sense":["any"],"any separator,":["consider"],"any shortcut":["for"],"any simpler":["than"],"any sort":["of","of","of","of"],"any sorted":["list"],"any sorting":["at"],"any special":["cases."],"any specific":["reason?","Char"],"any spine-strict":["data"],"any standard":["`translate`"],"any stretch":["saying"],"any string":["that","that"],"any string)":["but"],"any stylistic":["consensus"],"any subsequent":["digits","test"],"any suggestions":["for","very","would"],"any suggestions?":["Any"],"any test":[":)"],"any to":["me."],"any top-level":["binding","bindings.","function.","function,","functions.","declaration."],"any tradeoffs":["with"],"any trash":["character"],"any tuples,":["not"],"any two":["uppercase"],"any type":["that","that's"],"any type,":["using"],"any unnecessary":["computation"],"any use":["here","case"],"any valid":["input)."],"any variables":["at"],"any warnings":["about"],"any way":["is","to","to","works","of","to"],"any way,":["I"],"any way.":["This"],"any work.":["The"],"any worse":["than"],"any\" is":["equivalent"],"any' thing":["with"],"any, all":["and"],"any, but":["I"],"any/all calls":["or"],"any/all can":["operate"],"any/all without":["changing"],"anyAndAll =":["id","id","fix","ap"],"anyAndAll p":["xs"],"any` as":["opposed"],"any` is":["a"],"anybody has":["any"],"anyone (including":["myself)"],"anyone has":["suggestions,"],"anyone know":["if"],"anyone reading":["this"],"anyone tell":["me"],"anyone was":["arguing"],"anything I":["could"],"anything about":["whitespace","the","the","angles","primes","power."],"anything and":["it's"],"anything besides":["use"],"anything better":["because","than","can","that"],"anything but":["being","normal","`isNumber`"],"anything else":["other"],"anything else,":["it"],"anything else.":["With"],"anything except":["']'."],"anything from":["your","Control.Arrow.","there,"],"anything here.":["My"],"anything in":["the","Haskell","that","[Data.List](www.haskell.org/ghc/docs/latest/html/libraries/base-4.6.0.1/Data-List.html).","GHC.*","`Data.Maybe`"],"anything is":["better"],"anything like":["that","that.","it","an"],"anything list-wise":["means"],"anything more":["efficient"],"anything nicer":["with"],"anything nicer.":["Will"],"anything not":["supplied"],"anything of":["the"],"anything other":["than","than"],"anything outside":["of","of"],"anything substantial":["to"],"anything terribly":["fancy:"],"anything that":["let","ships","is","is"],"anything this":["way,"],"anything to":["change.","ensure"],"anything top-level":["in"],"anything until":["the"],"anything useful":["here."],"anything whatsoever":["with"],"anything with":["a","an","finite","it","small"],"anything without":["binding"],"anything wrong":["with","with","with"],"anything), I'm":["not"],"anything, `sort`":["is"],"anything, and":["it"],"anything, because":["it's"],"anything, btw),":["which"],"anything, but":["time","the"],"anything, perhaps":["you"],"anything, you":["do"],"anything. Also,":["it's"],"anything. Here's":["a"],"anything. I":["couldn't"],"anything. If":["it's"],"anything? Shouldn't":["it"],"anything… it's":["just"],"anyway -":["I"],"anyway because":["my"],"anyway by":["the"],"anyway for":["your"],"anyway if":["you"],"anyway so":["it"],"anyway to":["generate"],"anyway what":["I"],"anyway!), and":["you"],"anyway, and":["in"],"anyway, but":["alright."],"anyway, it's":["just"],"anyway, see":["http://hackage.haskell.org/package/containers/docs/Data-Sequence.html"],"anyway, so":["`otherwise`","it's"],"anyway. As":["others"],"anyway. But,":["the"],"anyway. I":["like"],"anyway. In":["Haskell"],"anyway. It":["will"],"anyway. Maybe":["I"],"anyway.) I":["didn't"],"anyways mainly":["due"],"anyways, to":["ensure"],"anyways. I":["took"],"anywhere I":["can"],"anywhere as":["such."],"anywhere that":["I"],"anywhere to":["get"],"anywhere, and":["`foldM`","it's"],"anywhere, or":["at"],"anywhere. Putting":["`where`"],"anywhere. What":["do"],"anywhere. You":["also"],"ap ((\u003e\u003e)":["."],"ap (ap":["."],"apart again,":["because"],"apart of":["`base`."],"apart some":["code"],"apart to":["reduce"],"apart, and":["you"],"api and":["availability"],"api choice":["indeed."],"api forcing":["mutable"],"api is":["final"],"api you":["just"],"api, so":["its"],"apologize if":["I"],"apostrophe) function":["in"],"apostrophes are":["not"],"app that's":["used"],"app to":["convert"],"apparent :-)":["I'll"],"apparently \"The":["Map"],"apparently I":["need"],"apparently only":["works"],"apparently should":["not?"],"apparently the":["meaning"],"apparently they":["don't"],"apparently, so":["it"],"appear deceivingly":["close"],"appear here":["to"],"appear more":["grammatical:"],"appear particularly":["more"],"appear to":["behave","be","matter,","be","be","be"],"appears on":["the","the"],"appears to":["be","work","be","solve","be","be","be"],"append =":["(WordCount"],"append an":["collect"],"append and":["considered"],"append is":["O(n),"],"append, filter,":["iterate,","iterate,"],"appending `[('A',0),..]`":["or"],"appending `[toLower":["x]`"],"appending, it":["makes"],"appends in":["sing,"],"application !=":["infix"],"application (like":["`ap`"],"application I":["would"],"application `($)`":["is"],"application always":["has","has","has","has","has","has","has","has"],"application and":["partial"],"application between":["the"],"application binds":["tighter","stronger"],"application during":["the"],"application for":["a"],"application has":["the","the","higher","higher","higher","the","the","the","higher","the","the","higher","higher","higher","the","the","the","a","a"],"application in":["isAnagram","Haskell","Haskell","Haskell","Haskell"],"application inside":["the"],"application is":["used","always","the","always","higher","always","always","always","the","the","guaranteed","separated","just","something","guaranteed","always","always","always"],"application of":["more","f"],"application on":["line"],"application over":["list"],"application until":["it"],"application with":["the","`=\u003c\u003c`.","function"],"application, I":["absent-mindedly"],"application, gotta":["remember"],"application, so":["it's"],"application, you":["don't"],"application. The":["definition"],"application. This":["is"],"applications (which":["does"],"applications of":["map","map"],"applications, I'm":["not"],"applicative functor":["equivalent"],"applicative functors,":["etc."],"applicative styles":["you","?"],"applicative syntax":["can"],"applicative, but":["less"],"applicative, don't":["I"],"applicative, or":["equivalently"],"applicative, so":["you"],"applicatives (first":["2"],"applicatives and":["monads"],"applicatives as":["they"],"applicatives, and":["monads."],"applied filters":["to"],"applied function":["to","but"],"applied function'":["i.e."],"applied non-strictly":["which"],"applied on":["the"],"applied over":["a"],"applied to":["the","the","both","Haskell","the"],"applies function":["`f`"],"applies here":["as"],"applies optimizations":["to"],"applies quite":["nicely"],"applies to":["`any`"],"applies. GHCI":["is"],"apply `(++)`,":["it"],"apply `ceiling`":["to"],"apply a":["detection","list","list","list"],"apply anagramForm":["to"],"apply constuctor":["':'"],"apply it":["on","in"],"apply monad":["associativity"],"apply of":["accumulate"],"apply the":["function","transformation"],"apply them":["to","to"],"apply this":["simplification.","algorithm","optimization"],"apply to":["the","lots","a","expression","one","this"],"apply y\",":["since"],"apply your":["sorting"],"apply. Of":["course"],"applying ```flip```":["to","function"],"applying `makeThisFunctionPassTests`":["to"],"applying a":["function"],"applying cleanUpInput":["on"],"applying it":["naked"],"applying the":["pattern","same","tuple"],"applying your":["predicates"],"appreciate a":["nudge"],"appreciate all":["your","the"],"appreciate any":["hint"],"appreciate it.":["Made"],"appreciate that":["basically"],"appreciate the":["comment"],"appreciate your":["comments"],"appreciated. `on`":["was"],"appreciated; I":["am"],"approach (check":["that"],"approach I":["used"],"approach Monad":["is"],"approach and":["impossible"],"approach as":["they","readme","enumeration","mine?"],"approach at":["first,"],"approach based":["on"],"approach better.":["This"],"approach but":["ran"],"approach compile":["you"],"approach exists":[":)"],"approach for":["`instance","textValue."],"approach have":["no"],"approach here.":["I"],"approach if":["I"],"approach in":["my","`addends`,"],"approach is":["map","also","a","more","very","better","required","the"],"approach it":["like"],"approach like":["this"],"approach may":["lead"],"approach might":["make","be"],"approach much":["easier"],"approach of":["checking","breaking"],"approach or":["not..."],"approach over":["the"],"approach seems":["more"],"approach similar":["to"],"approach so":["it"],"approach than":["using"],"approach that":["passed","was","I've","will"],"approach things":[":-)."],"approach this":["problem"],"approach to":["`foldr","doing","easily-understood","this","the","factorization!","foldr","prettyPrint","sublists."],"approach versus":["yours"],"approach was":["to"],"approach where":["I"],"approach will":["be","build","work"],"approach with":["mine","the"],"approach without":["altering"],"approach would":["start","require","be","be","be"],"approach, as":["seems"],"approach, because":["I'm"],"approach, have":["not"],"approach, it":["would"],"approach, just":["recurce"],"approach, maybe":["someday"],"approach, mind":["you."],"approach, so":["you'll"],"approach, the":["same"],"approach, using":["fewer"],"approach, you":["would"],"approach. Even":["though"],"approach. I'm":["going"],"approach. My":["solution"],"approach. Out":["of"],"approach. The":["example"],"approach... Any":["hints"],"approach: `length":["."],"approach? Feel":["free"],"approach? If":["I"],"approaches but":["they"],"approaches for":["example"],"approaches) or":["monad"],"approaching each":["one"],"approaching the":["problem"],"approch is":["quite"],"appropriate Applicative":["instance"],"appropriate RULES":["in"],"appropriate ```wordsBy```.":["So"],"appropriate amount":["of"],"appropriate as":["it"],"appropriate date,":["rather"],"appropriate for":["`School`?","implementing"],"appropriate if":["the"],"appropriate in":["my","this","this","this","this"],"appropriate level":["of"],"appropriate normal":["form,"],"appropriate one":["in"],"appropriate operator.":["This"],"appropriate predicate,":["there's"],"appropriate signature":["for"],"appropriate since":["it"],"appropriate test.":["If"],"appropriate than":["`Word`","`fromJust`."],"appropriate? It":["reads"],"appropriately named":["predicates","predicates","predicates","function"],"appropriately, so":["you"],"appropriately-named functions,":["the"],"approve of":["understanding"],"approximated as":["O(n^2)"],"approximately the":["same"],"aproach is":["perfectly"],"apt-get on":["my"],"arbitrary Chars.":["That's"],"arbitrary String":["input."],"arbitrary choice":["of"],"arbitrary data":["types."],"arbitrary order":["that"],"arbitrary parsing":["between"],"arbitrary step":["(in"],"arbitrary string":["that"],"arbitrary sub-list.":["Otherwise,"],"arbitrary tacking":["on"],"arbitrary) spec.":["Carry"],"arbitrary, I":["tend"],"arbitrary. Perhaps":["by"],"arcane for":["me"],"are (IMO)":["simpler"],"are *O(n*":["log"],"are 2":["points","possible","common"],"are 3,":["5,"],"are 5":["types"],"are 6n+1":["or"],"are 6n-1":["or","or"],"are \u003e=":["the"],"are I/O":["and"],"are OK":["to"],"are RULES":["pragmas"],"are String.":["Take"],"are Uppercased(That":["is"],"are `Char`":["and"],"are `IO":["()`"],"are `Map.insertWith`":["or"],"are a":["lot","number","bunch","couple","few","lot","few","lot","few","little","natural,","lot","number","few","number","few","pretty","number","linked","few","number","few","list","solution","small","form","strategies","few","chapter","few","2","matter"],"are about":["the","to"],"are about.":["When"],"are absolutely":["right","right–a"],"are acceptable":["though."],"are actually":["building","two","needed.","primes"],"are aliases":["of"],"are all":["guards","value-lazy","value-lazy,","the","in","value-lazy.","value-lazy.","references","\u003e=","\u003e=","superfluous","very","that"],"are almost":["always"],"are already":["re-exported","in","using"],"are also":["in","superfluous,","some","some","exported","non-strict,","superfluous","unnecessary,","some","superfluous.","evaluated."],"are alternative":["approaches"],"are always":["ways","evaluated","lists."],"are anagram":["of"],"are anagrams":["since","or","to"],"are any":["lowercase","letters","ramifications","lowercase"],"are applying":["it"],"are appreciated:":["https://github.com/kytrinyx/exercism.io/tree/master/assignments"],"are at":["the","the","least"],"are available":["in"],"are based":["on"],"are basically":["expected"],"are being":["very"],"are best":["applied."],"are better":["is","off","looking","solutions..","algorithms"],"are binary":["trees"],"are blank":["tiles"],"are both":["good","ascending","covered","O(n),"],"are building":["the","thunks"],"are built-in":["functions"],"are calculating":["it","length"],"are call-by-value":["while"],"are called":["in"],"are calling":["`generateName`"],"are catastrophic":["with"],"are certainly":["design"],"are checking":["for","length"],"are cleaned":["up"],"are clear":["for","in"],"are collecting":["thunks"],"are coming":["from."],"are compared":["with","to"],"are completely":["right","equivalent"],"are computed":["at"],"are concerned,":["you"],"are conscious":["of"],"are consistently":["placed,"],"are constants.":["They"],"are constructed":["and"],"are context":["dependent"],"are contiguous,":["e.g."],"are correct":["my"],"are created":["with"],"are created.":["I"],"are creative!":["But,"],"are decidable,":["really"],"are defined":["in","for"],"are defined.":["You"],"are defining":["your"],"are described":["there"],"are different,":["when"],"are doing":["with",";-)","a","these","smth","though."],"are done":["with","S"],"are doubled":["starting"],"are downcase":["and"],"are easier":["to"],"are easy":["to","to","to"],"are either":["way"],"are enabled.":["Don't"],"are enough":["to","to"],"are equal":["to"],"are equivalent":["to"],"are equivalent,":["an","there"],"are essentially":["the"],"are evaluated":["in","at","at","from","(also"],"are evaluated.":["Please"],"are even":["more"],"are exactly":["the"],"are exhausted,":["or"],"are exist":["in"],"are expecting":["O(1),"],"are exported":["so"],"are exported,":["it's"],"are expressed":["in","in"],"are extracting":["all"],"are factors":["of"],"are farther":["along"],"are faster":["algorithms","and"],"are filters,":["you"],"are floated-out":["(since"],"are for":["returning","returning","the","situations","my"],"are forced":["(to","to"],"are from":["totally"],"are functions":["in"],"are functors,":["`fmap"],"are further":["simplifications"],"are fused,":["however"],"are generating":["new"],"are generic":["variants"],"are getting":["hammered","exported.","huge"],"are given":["the"],"are going":["to","to","to","to","to","to"],"are good":["documentation,"],"are handled":["by","ok?"],"are hard":["core."],"are hardly":["worth"],"are heavy,":["you"],"are helpful":["functions."],"are hidden":["behind"],"are higher":["precedence","than","level","level."],"are highest,":["operators"],"are highly":["appreciated."],"are however,":["even"],"are identical":["or"],"are idiomatic.":["use"],"are implementation":["details"],"are implemented":["by","in"],"are imported":["and"],"are importing":["all","now)."],"are importing,":["e.g.:"],"are in":["lowercase.","the","a","Prelude.","Prelude.","a","a","a","the","Prelude)","the","the","monad","scope"],"are inappropriate":["to"],"are included":["in"],"are indented":["by"],"are indenting":["top"],"are initially":["storing"],"are inserted":["in"],"are inserting":["into","`((+1)"],"are instances":["built-in"],"are instead":["of"],"are intended":["to"],"are interested":["in."],"are interleaved":["though,"],"are intermediate,":["unevaluated"],"are invalid.":["Options"],"are isomorphic":["to"],"are isomorphic,":["former"],"are just":["adorable.","record","functions","noise.","slightly","[Char],","ideas,","about","lists","about","`atomically","encoded","`Integral","in"],"are keeping":["a","thunks,","thunks"],"are kind":["of"],"are known":["as"],"are lazy":["in"],"are lazy,":["so"],"are lazy.":["You","This"],"are lecture":["notes"],"are leftovers":["--"],"are less":["unused","naive"],"are library":["functions"],"are likely":["to"],"are lists":["and"],"are looking":["at","at"],"are lost":["here?"],"are lower.":["Operator"],"are lowercase":["letters)"],"are many":["improvements","other"],"are mapping":["each"],"are maps":["a"],"are meant":["to"],"are memoized":["anyway."],"are merged":["into"],"are minor,":["mostly"],"are missing":["required","TypeConstructor"],"are more":["an","functions","than","complicated,","elegant","idiomatic","things","sophisticated.","often","thasks","than"],"are mostly":["GHC","subjective"],"are much":["more","more","more","easier","cheaper","simpler"],"are mutex-like":["so"],"are named":["using"],"are naming":["related,"],"are naturally":["done"],"are neater":["ways"],"are necessary":["or","at","since","here."],"are necessary).":["The"],"are needed":["(usually","is"],"are needed,":["it's"],"are nested":["thunks"],"are never":["any","forced."],"are nicer":["methods."],"are no":["multiple","uppercase","value","`word`","auto","letters,","empty","`words`","other"],"are non-strict":["in"],"are non-strict,":["so"],"are normally":["aligned"],"are not":["in","anagrams.","necessary","particularly","necessary,","equal","equal),","added","much","necessary","used","semantically","necessarily","a","the","very","highlighted","needed.","the","idiomatic","considered","necessary","unique...","enabled","amino","prime,","allowed","really","even","multiples","independent,","lower","descriptive","strict,","great","really","in","using","collecting","atomic","required","required","needed","accepted","applied","dividable,","suitable.","in","strict","much","loosing","postponing","forced,"],"are now":["faster,","in"],"are occasions":["where"],"are of":["the","the"],"are often":["so","light","harmless.","well","not"],"are on":["the"],"are on)":["but"],"are one-character":["each,"],"are only":["two","four","talking","extracting","evaluated","done","computed","computed","ever","used","useful","needed","visible","symbols"],"are operating":["on"],"are operators":["and"],"are or":["how"],"are ordered":["sometimes"],"are ordering":["dependencies","dependencies","dependencies\""],"are other":["functions","people,","possible","approaches"],"are overlapping,":["you"],"are parsed":["as"],"are part":["of","of","of"],"are partial":["because"],"are particular":["to"],"are passed,":["but"],"are playing":["with"],"are plenty":["of","of"],"are point":["free"],"are ported":["from"],"are possible":["in"],"are possible,":["you"],"are possibly":["more"],"are potentially":["more"],"are pragmas":["you"],"are predicates":["value"],"are preferable":["to"],"are preferred":["when"],"are present":["mostly"],"are pretty":["sure","simple,","much","simple,"],"are private":["and"],"are probably":["correlated.","some"],"are processed":["in"],"are put":["into"],"are quiet":["right."],"are quite":["short."],"are randomly":["generated"],"are rarely":["big"],"are re-exported":["to"],"are re-inventing":["control"],"are real":["issues"],"are really":["just","storing","helpful.","great.","heard","just","old,"],"are redundant":["brackets","as"],"are redundant,":["and","`foldl'`"],"are referring":["to"],"are related":["to"],"are repeated":["verbatim.","digits"],"are required":["by","by"],"are returning":["are"],"are reviewing":["these"],"are right":["with","with"],"are right,":["I've","if","that","...","will","sorry","say","better"],"are right.":["Seems"],"are rolling":["your"],"are rules":["that"],"are running":["the"],"are safe":["-"],"are safe.":["In"],"are saying":["that"],"are set":["up?"],"are several":["problems"],"are shadowing":["variables"],"are shared":["between"],"are sharing":["the"],"are short":["and"],"are shown":["`sorted`..."],"are significant,":["otherwise"],"are simpler":["ways","(`shape`,"],"are simply":["confusing."],"are so":["much","inclined.","few","point-free","small.","much"],"are solving":["the"],"are some":["small","useful","zeros","suggestions","issues","simple","useful","things","now","other","exceptions,","situations","strictness","optimizations","subtleties","shorthands","missing","examples:","strictness","not","extra","extra","redundant","redundant"],"are sorted.":["Also,"],"are space":["leaks"],"are spaces":["might"],"are spine-lazy,":["such"],"are split":["to"],"are spot":["on,"],"are still":["things","a","part","missing","a"],"are storing":["as","the","the","just"],"are strange.":["I"],"are strict.":["Note"],"are strict:":["http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'"],"are strictly":["evaluated."],"are subtle":["semantic","two","implicit"],"are superfluous":["since","since","but","since","since","since","because","since","on","to","since"],"are superfluous,":["most","e.g.","everything","function","function","function","function","since","but","since"],"are superfluous.":["isQuestion","Looks","The","Function"],"are supposed":["to","to","to","to"],"are syntax":["sugar,"],"are take":["and"],"are technically":["right,"],"are testing,":["what"],"are that":["unreadable?"],"are the":["only","data","same).","same)","same","same,","best","correct","data","first","wrong","tests","type","same","chapters","way","way","cases","imports","updated","powers","same","imports","same","first"],"are there":["other"],"are things":["like,"],"are too":["much","complicated,"],"are tools":["that"],"are top-level":["functions.","bindings,"],"are top-level,":["`defaultParts`"],"are total,":["if"],"are tried":["in","one"],"are trying":["to"],"are two":["ways","reasons","methods","ways"],"are typical":["in"],"are typos":["in"],"are unnecessary":["(and","as","too,"],"are unnecessary,":["function","since"],"are unnecessary.":["You","There's"],"are unrelated":["to"],"are unused":["and","imports"],"are upper":["case*","case."],"are uppercase":["letters"],"are used":["(e.g.","one","to","to.","internally,"],"are used,":["but"],"are used.":["For"],"are using":["`[(String,","another","the","too","language","one","a","Data.Bits,","zeroCounts,","lazy","it","in","one","lazy"],"are using.":["Also"],"are usually":["negligible."],"are valid":["(only"],"are value-lazy":["the"],"are value-strict.":["Check"],"are very":["readable","local","related.","useful","haskellian...)","welcom...","small","good","efficient","high"],"are way":["more"],"are ways":["to"],"are what":["are"],"are whitespaces":["would"],"are wildcard":["letter"],"are worth":["1"],"are writing":["functions"],"are written":["force"],"are written.":["It"],"are wrong":[":/"],"are wrong.":["I"],"are you":["so","sure","proposing","trying","referring","dropping","using","using","using","qualifying"],"are your":["opinions"],"are zero":["occurrences"],"are! I":["usually"],"are! Thanks":["for"],"are, but":["once"],"are, or":["see"],"are. This":["can"],"are. Totally":["worth"],"are: throw":["an"],"area I":["was"],"area here,":["something"],"area that":["I"],"area, \")":["\","],"areaCode of":["an"],"areaCode, number":["and"],"area_code, prefix,":["subscriber]]"],"aren't SnocList":["anywhere"],"aren't actually":["doing"],"aren't always":["on"],"aren't both":["active","active"],"aren't combining":["predicates"],"aren't commonly":["used"],"aren't disallowed":["in"],"aren't doing":["the"],"aren't evaluated":["in"],"aren't exporting":["them.","it"],"aren't going":["to"],"aren't highlighted":["is"],"aren't in":["the"],"aren't just":["arbitrary"],"aren't much":["simpler"],"aren't necessary":["here.","since","in","because","as"],"aren't necessary,":["function","since","since"],"aren't needed":["here","on"],"aren't part":["of","of"],"aren't shadowing":["each"],"aren't so":["nice"],"aren't strictly":["necessary"],"aren't supposed":["to"],"aren't the":["same","clearest"],"aren't too":["bad"],"aren't using":["lookup,","`rn`"],"aren't very":["haskell-y"],"aren't). I":["would"],"arg, `.).`":["to"],"arg. Great":["otherwise."],"args to":["make"],"args. If":["instead"],"arguably gives":["a"],"arguably only":["\"responseFor\""],"arguably the":["API","more"],"argue that":["`liftA2","the"],"arguements aren't":["too"],"arguing for":["just"],"arguing that":["it's"],"argument (```str```)":["in"],"argument (in":["other"],"argument (see":["`anaGrams"],"argument N":["times"],"argument against":["the","that?"],"argument and":["make","pass","provide"],"argument appears":["on"],"argument application":["over"],"argument around":["and"],"argument being":["passed"],"argument by":["eta-reduction."],"argument entirely":["(If"],"argument for":["`silence`","using"],"argument from":["both","both","both","both"],"argument function":["is","that"],"argument functions":["in"],"argument in":["the","point-free","encode's","the","brackets","```wordCount```","the","the","go.","the"],"argument is":["constant","(a","on"],"argument last":["to"],"argument like":["you","this:"],"argument list":["of"],"argument name":["was"],"argument names":["are"],"argument names!":["I"],"argument names.":["I've"],"argument of":["`($)',","`($)',","`isAnagram`."],"argument on":["the"],"argument plumbing":["is"],"argument pretty":["easily;"],"argument that":["returns"],"argument then":["the"],"argument to":["the","determine","implies","weak-head","`isAnagram`.","`foldr`?","`nextWeekday`","the","`numerals'`,","GHC)","be","another","`^`,","be"],"argument used":["and"],"argument you":["mean"],"argument). You":["can"],"argument, I'd":["expect"],"argument, `lowerCaseBottleText(next":["n)`"],"argument, but":["to"],"argument, if":["you"],"argument. I":["generally","think","expect"],"argument. Since":["you're"],"argument. You":["can"],"arguments (in":["this"],"arguments -":["anyone"],"arguments are":["both","in","sorted.","just"],"arguments ensures":["that"],"arguments explicitly":["named"],"arguments in":["the","`readDNA'`"],"arguments isn't":["what"],"arguments match":["better,"],"arguments may":["be","require"],"arguments of":["verse."],"arguments required":["by"],"arguments so":["you"],"arguments strictly,":["so"],"arguments supplied":["should"],"arguments the":["applicative"],"arguments to":["all","the","`map`","a"],"arguments when":["the"],"arguments would":["be"],"arguments), so":["you"],"arguments). It's":["also"],"arguments, since":["logically"],"arguments, something":["like"],"arguments, you":["can"],"arguments. (Although":["obviously,"],"arguments. Due":["to"],"arguments. If":["it's"],"arguments. My":["design"],"arguments. So":["essentially"],"arguments. The":["`j","binding"],"arise due":["to"],"arise in":["these"],"arise. I":["worry"],"arises. I":["wonder"],"arising from":["a","a","a","a","a","a","the"],"arithmetic (and":["have"],"arithmetic (no":["lists)"],"arithmetic a":["bit"],"arithmetic and":["no","not","no","the"],"arithmetic before":["solving"],"arithmetic expression":["a"],"arithmetic for":["`meetupDayIter`"],"arithmetic in":["your"],"arithmetic instead":["of","of"],"arithmetic is":["really","sufficient"],"arithmetic on)":["or"],"arithmetic operations":["(one"],"arithmetic operations.":["Lookup"],"arithmetic or":["an","mapping"],"arithmetic progression":["should"],"arithmetic rather":["than","than","than","than"],"arithmetic to":["be","manipulate","build","calculate"],"arithmetic you're":["trying"],"arithmetic, Vector":["creation"],"arithmetic, `fromEnum`":["and"],"arithmetic, consider":["that"],"arithmetic, lists":["aren't"],"arithmetic, no":["lists.","lists?"],"arithmetic, using":["lists"],"arithmetic, without":["any"],"arithmetic. There's":["no"],"arithmetically— no":["need"],"arose from":["a"],"around \"filter":["isDigit\""],"around \"last":["message\""],"around Data.Map.Lazy":["and"],"around I":["found"],"around `&&`.":["Most"],"around `(.)":["."],"around `(l":["t"],"around `(map":["toLower)`"],"around `(normalize":["x)`"],"around `(show":["i)`"],"around `(y":["=="],"around `::`":["but"],"around `::`,":["but"],"around `::`.":["I"],"around `C.toLower`":["are"],"around `Int`s.":["Then"],"around `any":["isLetter","isLetter","isUpper"],"around `areaCode":["n`"],"around `filter":["id`","isDigit`"],"around `flip":["(…)`"],"around `fromIntegral":["r`"],"around `head":["digits`"],"around `insert'`":["are"],"around `isLower`":["and"],"around `last":["message`"],"around `map":["toLower`","toLower","toLower`","toLower`","toLower`"],"around `null`,":["then"],"around `ofBeer":["s`"],"around `prep":["s`","s`"],"around `show":["n`","x`","n`"],"around `sort":["lower{A,B}`","(downcase"],"around `sort`":["are"],"around `swapMVar`":["to"],"around `zipDNA":["dna`"],"around a":["bit,"],"around and":["shadow","came"],"around anywhere.":["Putting"],"around as":["an"],"around because":["the"],"around characters.":["I've"],"around explicitly.":["Didn't"],"around in":["GHCi.","hoogle","memory"],"around into":["a"],"around isNumber":["on"],"around it":["sans","completely..."],"around it,":["`l"],"around just":["a"],"around line":["41"],"around map":["toLower"],"around me":["to"],"around native":["`Day`"],"around operators.":["You"],"around predicates":["on"],"around rhs":["of"],"around since":["I"],"around so":["that","my"],"around that":["here."],"around that,":["such"],"around the":["fact","filter.","`d","`|`","filter.","idea","Haskell","additional","left","arguments","problem","`.`","`map`","expression","if/then/else"],"around this":["would","entirely,","is"],"around with":["Data.Set","it.","`generateName`","doing","StateT","`fmap`ing"],"around would":["be"],"around you":["can"],"around). Note":["that"],"around, but":["that"],"around, since":["this","uppercase"],"around, the":["other"],"around. You":["also"],"arrange the":["functions"],"arrangement of":["`.`,"],"array ('A',":["'Z')","'Z')","'Z')"],"array ('A','Z')":["[(l,s"],"array and":["initialize"],"array based":["implementation","implementation"],"array caching,":["but"],"array comprehension,":["but"],"array from":["`minBound"],"array literals":["for"],"array of":["scores."],"array once":["for"],"array or":["hash"],"array r":["[(l,s"],"array would":["be"],"array, there":["is"],"arrays while":["`String`"],"arrays. Otherwise":["I"],"arrived at":["the","arithmetically—"],"arrow `toLower":["&amp;&amp;&amp;"],"arrowPairs =":["map"],"arrows are":["or"],"arrows or":["a"],"arrows weren't":["HTML-escaped.)"],"arrows) to":["this"],"arrows. I":["found"],"arrows. it":["is"],"article [foldr,":["foldl,"],"article about":["monoids","folds](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl').","folds:"],"article and":["we'll"],"article http://www.haskell.org/haskellwiki/Stack_overflow":["about"],"article of":["Simon"],"article on":["the","folds"],"article. I":["am"],"article] (http://en.wikibooks.org/wiki/Haskell/More_on_datatypes#Named_Fields_.28Record_Syntax.29)":["for"],"articles about":["this,","stm"],"artifact from":["when"],"as \"!":["@\""],"as \"\"":["instead"],"as \"CCNNN\"":["and"],"as \"Looks":["great!\""],"as \"Treat":["invalid"],"as \"actions\",":["one"],"as \"always":["use"],"as \"equivalent":["but"],"as \"f":["fmap"],"as \"given":["that"],"as \"respond\",":["\"display\","],"as \"the":["first"],"as \"there":["does"],"as '\\x":["-&gt;"],"as 'l'":["is"],"as 'xs'":["tend"],"as (":["and"],"as **strict**":["or"],"as +":["length","length","length"],"as 2":["bits:"],"as 5":["was"],"as \u003cpre\u003eevenlyDivisible":["x"],"as \u003cpre\u003eisLeapYear":["year"],"as =":["unless"],"as ==":["bs"],"as @sasha":["proposed."],"as Arrays,":["the"],"as Bob":["except"],"as C":["or"],"as C`.":["It"],"as Clojure,":["Erlang,"],"as Data.Map":["in","but"],"as Data.Map,":["but"],"as Data.Map.Map":["but"],"as Either":["if"],"as Haskell":["is"],"as I":["have","am","have","/","make","know,","wanted","should,","don't","mentioned","quite","submitted","know,","see","do","say,","felt","felt","don't","have","didn't","understand","needed","was","was","thinking","follow","can","am","understand","know","can","am","can","had","had","have","like","can"],"as I'm":["sure","new","currently","still","aware,","basically","sure","going"],"as I've":["done","not","seen,"],"as Int).":["The"],"as List`":["you","(the"],"as List`.":["It's"],"as M":["--","instead"],"as M\u003c/code\u003e":["?"],"as M`,":["without"],"as M`.":["Alternatively,"],"as M```.":["You"],"as Map.":["For"],"as Map.Strict,":["you"],"as Map`":["to","to"],"as O(n^2)":[":)"],"as Pandoc":["or"],"as README":["doesn't"],"as RULES":["pragmas:"],"as RX837":["or","or"],"as Readme":["explicitly"],"as String.":["What"],"as T":["rather"],"as ]`":["–"],"as `(&&)":["\u003c$\u003e"],"as `('C':'M':":["('X':'C':"],"as `((((1)":["+"],"as `(((1)":["+"],"as `(+)":["((+)"],"as `(++)":["&lt;$&gt;`"],"as `(,":["1)`","1)`","1)`","1)`,"],"as `(:":["[])`"],"as `(==)":["\u003c*\u003e"],"as `([1..3]":["\u003e\u003e="],"as `(a,":["b)`)."],"as `(c==)`":["or"],"as `(fromEnum":[".)"],"as `(la,":["sa)"],"as `(not":["hasLower)"],"as `(…)`":["rather"],"as `2":[":"],"as `=":["undefined`"],"as `=`":["carelessly."],"as `B.pack`":["is"],"as `C.toUpper":["x"],"as `Data.Char.toLower`":["handles"],"as `Data.Map`":["or"],"as `M.keys`":["is"],"as `Node":["a"],"as `PhoneNumber":["&lt;$&gt;"],"as `ShowS`,":["which"],"as `String`,":["but"],"as `[1..3]":["\u003e\u003e=","\u003e\u003e="],"as `[1..dv]":["\u003e\u003e="],"as `[Char]`":["and","would"],"as `[Eggs..]`.":["You"],"as `[a,":["pred"],"as `[f,":["f-1"],"as `[from,":["from-1"],"as `[max,max-1..`":["since"],"as `[n,n-1..m]`":["then"],"as `[row":["!!"],"as `[startFrom,":["pred"],"as `[x,":["x-1","pred"],"as `\\x":["-\u003e"],"as ```(-x)":["`mod`"],"as ```(==)":["`on`"],"as ```(`zip`":["(repeat"],"as ```Data.Array.Unboxed.array":["('A','Z')"],"as ```Data.Map.Strict```,":["which"],"as ```O(n!)```":["(in"],"as ```all":["isSpace```?"],"as ```allSpace":["x```."],"as ```let":["in```"],"as ```public```":["API"],"as ```sing```":["is"],"as ```validate```":["is"],"as `a":["==","==","++"],"as `all":["(not","isSpace"],"as `all`,":["might"],"as `alter`":["or"],"as `anagramsFor":["a","="],"as `any":["isAsciiUpper`.","isLetter`."],"as `bar":["\u003e\u003e="],"as `cipher":["!"],"as `defaultCounts`":["suggest?)"],"as `delete`":["only"],"as `enumFromThenTo`":["(or"],"as `enumToFrom":["to"],"as `f":[".","x`"],"as `filter":["(on","((fromEnum"],"as `flip":["maybe"],"as `fmap":["not","sort`","(return","BankAccount"],"as `foldl'`":["or","from"],"as `foldl`":["but"],"as `foldr":["insertIntoMap`"],"as `foldr`)":["is","is"],"as `foo":["$"],"as `fromListWith`,":["which"],"as `from`":["and"],"as `head":["."],"as `howMany":["n`."],"as `if":["x"],"as `import":["qualified"],"as `incrementBalance`":["returns"],"as `insert":["k1"],"as `insertNucleotide`":["must"],"as `insertWith":["(+)"],"as `insert`":["from"],"as `intersperse`)":["or"],"as `isAllCaps":["="],"as `isLetter":["a"],"as `isQuestion":["xs"],"as `isSuffixOf":["\"?\"`"],"as `isSuffixOf`":["if"],"as `last":["s`.","voice"],"as `last`":["are"],"as `length`":["and"],"as `lowerCaseBottleText":["(next"],"as `map":["toUpper","verse","(,","(,","(,","(first","(,0)","(,n)","(,","(fmap","f"],"as `map`":["or","from"],"as `not":["(null",".","$",".","(any","(null","(isYelling",".","."],"as `null":["a`."],"as `or":["[a,"],"as `ord":["x"],"as `otherwise`":["-","case."],"as `prefix`":["and","and"],"as `removeSilence":["ws"],"as `render`,":["`display`,"],"as `repeat":["1`","1`"],"as `replicate":["10"],"as `return":["x","."],"as `reverse":["[m..n]`"],"as `scoreWord`":["is"],"as `second":["sort`"],"as `seq`":["and"],"as `shoutChar":["="],"as `show":["(x"],"as `show`":["returns"],"as `silence":["str"],"as `size":["=="],"as `sort":["(map","."],"as `sort`.":["I"],"as `space`,":["`signed`,"],"as `splitAt":["3"],"as `str":["=="],"as `str`":["and"],"as `sum":["(addends"],"as `toBit`":["for"],"as `toLower":["c`"],"as `translate`":["is"],"as `uncurry":["(/=)`.","zip"],"as `undefined`":["or"],"as `unlines":["xs`,","x`."],"as `unlines`":["needs"],"as `x":[":"],"as `||`":["is"],"as a":["catch-all","name","matter","means","predicate.","partial","question","special","newtype","possible","composition","boolean","word","string","`foldr`","composition,","part","consequence","function","sieve)","reference","foldr","visual","parameter","separate","barrier","comment","linked","name","`foldr`---it's","separate","String","point,","valid","`Map`","default","variable","binary","list)\",","fold","single","`map`","function","map","single","whole.","string.","string.","name","function","Map","_spine-strict_","function","function.","single","lookup","map,","hash","list.","hint","section","where","map","list)...","dictionary.","map","list.","lot","letter","separate","response","named","fold","result","single","signal","map","result","vector","result","result","function","Monad.","lazy","placeholder","result","result","return","type","loop,","maintainable","list","node.","for-loop,","result","\"aaaaaaaaaaaab\"),","fold","totally","partial"],"as absolutely":["clear"],"as all":["its","of","schools"],"as already":["stated."],"as always,":["once","@nicolette;"],"as an":["element","arg.","alternative","infix","optimization.","infix","argument.","argument,","alternative","exercise)","intermediate","error","Int","alternative","MVar,","argument","index","Int","if","Int)","opposite","extra","error,"],"as another":["list."],"as any":["other","to","normal"],"as applying":["the"],"as bad":["as"],"as being":["a","oppositional;"],"as benchmarking,":["I"],"as big":["a"],"as binary":["0\".","0s\""],"as bs":["=","=","="],"as catMaybes":["from"],"as clear":["as","to","as"],"as compact":["as"],"as concise":["as"],"as concurrency":["(in"],"as cons":["-\u003e"],"as constructors":["instead"],"as correspondent":["with"],"as currect":["one"],"as current":["approach"],"as currying.":["The"],"as distinct":["types.","functions,"],"as divisors":[":)"],"as does":["the"],"as doing":["one"],"as each":["number"],"as eager":["as"],"as easily":["done"],"as easy":["as","to"],"as effective":["as"],"as efficient":["in","though","after","as","as"],"as efficient)":["might"],"as enumeration":["is"],"as escape":["sequences"],"as etrepum":["said,"],"as expected":["now."],"as expected.":["So"],"as explicit":["check?"],"as externally":["visible"],"as fair":["game."],"as far":["as","as","as","as","as","as","as","I","as","as","as"],"as fast":["as","as","as"],"as first":["18bit"],"as foldr,":["it's"],"as follows:":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/word-count/example.hs","`(f"],"as function":["application"],"as functions":["in","`::","(e.g."],"as general":["as"],"as generic":["as"],"as good":["as","a","a","as"],"as happening":["\"from"],"as happy":["with"],"as hard":["as"],"as hell.":["I"],"as helper":["functions"],"as helpers":["for"],"as here":["you"],"as how":["it"],"as idiomatic":["code"],"as if":["it"],"as illogical":["although"],"as implementing":["such"],"as importing":["from"],"as in":["it","word-count,","GHCi).","your","this","this","this","this","interpreted","imperative","C","`toRNA`"],"as initializing":["the"],"as inline":["```where```."],"as inner":["function"],"as input)":["would"],"as input,":["whereas"],"as insertWith,":["but"],"as internal":["structure","structure"],"as is":["necessary.","now.","with","for","then","for"],"as is,":["`MessageType`","fixed"],"as is.":["Really"],"as is;":["since"],"as isAlphaNum,":["also"],"as it":["is.","is'","is.","is.","is","seemed","returns","would","is","is.","is","were.","is","is,","is,","is","feels","went.","does","does","occurs.","could","doesn't","is?","handles","gets","is","will","is","could","was,","implements","conveys","falls","quite","is","can","will","aids","will","gives","recommends","accepts","is","can","check","require","doesn't","doesn't","is","will","keeps","does","can","use","really","reads","will","has","covered","monolithic","leads","returns","stands,","happens","is.","should","is","doesn't"],"as it's":["generally","well","not","possible","not","a","very","possible","just","guaranteed","meaningful"],"as its":["own","possible"],"as just":["single","`either","`if","`fromEnum","`wordsBy","an","`a`.","`[String]`.","`f","`[]`","`(,1)`."],"as key/value":["pairs"],"as keys":["and"],"as lazily":["as"],"as lazy":["version"],"as left":["shifting"],"as legal,":["but"],"as like":["```M.Map```"],"as line":["38"],"as lists),":["strict"],"as little":["as","of"],"as long":["as","as","as","as","as","as","as","as","as"],"as many":["guards","times"],"as maps,":["sets,"],"as mine.":["Nothing"],"as mine?":["First"],"as more":["guards"],"as most":["Haskell"],"as much":["work","sense","as","horizontal","as"],"as much.":["It"],"as my":["code,","implementation…","last","evidence"],"as named":["functions."],"as needed.":["Haskell's"],"as nicely.":["And"],"as non":["native"],"as nonsensical":["-"],"as normalized":["version"],"as not":["."],"as notes":["go,"],"as nothing":["in"],"as null":["doesn't"],"as numbers).":["The"],"as of":["late","now,"],"as often":["as"],"as one":["word","can","of","function","of","or","equation"],"as opposed":["to","to","to"],"as optimal":["as"],"as optional":["task"],"as others":["have","will"],"as parsec":["but"],"as pattern":["for"],"as per":["suggestions.","@florence's","your","your","your"],"as point-free":["as"],"as possible":["until","while","because","but","before","if"],"as possible,":["would","would"],"as possible.":["I","One"],"as predicates,":["in"],"as prelude":["simply"],"as pretty":["as"],"as problematic":["when"],"as programmer":["error,"],"as programmers":["end"],"as public":["functions/methods/etc"],"as punctuation.":["Will"],"as qualified":["or","Data.Text"],"as rather":["odd."],"as readable":["and","and","as"],"as readable,":["and","and"],"as readable.":["Since"],"as readme":["says","says:"],"as really":["show"],"as recommended":["in"],"as response":["to"],"as rest'":["is"],"as reverse":["is"],"as rows":["and"],"as rules.":["In"],"as searching":["for"],"as seems":["no"],"as semantically":["meaningful"],"as sentinels.":["Something"],"as separate":["definitions.","where","description"],"as short":["as","as"],"as simple":["as","to"],"as simply":["`wordCount","using","`Dl.insert","`toUpper'","`not","`fromEnum","`(,1)`.","`++`"],"as simply:":["```all"],"as sin":["and"],"as some":["combination"],"as something":["of","more"],"as soon":["as","as","as"],"as special,":["or"],"as specified":["is"],"as straightforward":["to"],"as strict":["unless"],"as succinct":["as"],"as such.":["There"],"as suggested":["by","by","by","by"],"as suggested,":["I"],"as suggested.":["It"],"as suggested–thanks":["a"],"as tail":["recursion."],"as test":["with"],"as tests":["require"],"as that":["goes.","slope","it's","appears"],"as the":["combining","usage","last","test","order","first","list)","unit","type","manual","API","tests","backing","basic","value","current","tests","accumulator","default","values","values.","\"custom","value","qualified","main","data-structure","`n","`str`.","where","first","kind","pattern","Ix","type","input","input","names","score","index?","`ShowS`","Prelude","latter","test","input","docs","C/G/A","value-lazy","part","lack","map.","type","name","local","same"],"as then":["there"],"as there":["have","is","will"],"as they":["are","don't","are","don't","expect","have","may","are","use"],"as this":["one","way.","seems","way","approach","code).","solution."],"as this,":["so"],"as this.":["Since"],"as to":["not","the","detect","which","why","whether","why"],"as toUpper.":["If"],"as top-level":["functions."],"as tuples.":["Thanks"],"as types,":["so"],"as unused,":["since"],"as using":["Control.Arrow's","prefix","Maybe","`fromListWith`","`\u003e\u003e=`","a","something"],"as usually":["it"],"as values":["are"],"as vector":["is"],"as we":["iterate","apply","have"],"as we're":["nitpicking)"],"as well":["-","as","to","but","to","`liftA2","as","as","to","without","to","in","for","throw","be","with","(would","and","as","keep"],"as well)":["would"],"as well,":["since","but","but","such","but","if","still","and","saves","although","good","skipping","most","since"],"as well.":["i","But",":S","I","I","The","On","`show`"],"as well?":["I","What"],"as where":["x"],"as with":["uniques"],"as word,":["but"],"as yet":["have"],"as you":["need","suggested.","suggested.","first,","said,","have","put","go","said","can","said,","already","grow","go","don't","have","don't","use","can","can","can","said,","suggested.","said,","define","traverse","can","can","may","follow","already","did","can","say,","find"],"as you'll":["see","have"],"as you're":["doing"],"as you:":["`Data.Set`"],"as your":["`when`","code","`mapSnd`","last","variant","'subsequences'`","version","one,"],"as zero,":["or"],"as-is and":["do"],"as-is approach,":["it"],"as-is since":["it's"],"as-is will":["give"],"as-is, `zipWith":["f"],"as-is, but":["it's","will"],"as-is, since":["that's"],"as-is. If":["you"],"as-is; the":["solution"],"as: *filter*,":["*map*,"],"as: ```(`elem`":["\"..\")```."],"ascending or":["descending."],"aside as":["it's"],"aside from":["Haskell"],"aside, I":["would"],"aside, the":["real"],"ask (but":["forgot"],"ask about":["having"],"ask because,":["not"],"ask for":["the","help.","hints","correct","a"],"ask it,":["and"],"ask questions":["about"],"ask you":["for","to"],"asked for":["help","a"],"asked myself":["the"],"asked on":["StackOverflow,"],"asked that":["because"],"asked. I":["completely"],"asking about":["spine-strictness"],"asking for":["a"],"asking me":["to"],"asking the":["wrong"],"asks tips,":["really"],"asks you":["to"],"assertions are":["about"],"assign `normalize":["x`"],"assigned. If":["you"],"assignment for":["you,"],"assignment in":["clojure."],"assignment is":["an"],"assignment like":["this"],"assignment with":["parentheses"],"assignments. You":["have"],"assimilate 66":["lines"],"assimilate the":["difference"],"assimilated the":["concepts"],"associated `show`":["would"],"associated with":["the"],"association list":["rather","I","at","since"],"association list?":["Or"],"association-list strangeness":["is"],"associations as":["key/value"],"associative and":["commutative)."],"associative so":["`all"],"associative, so":["`a"],"associativity (once)":["you"],"associativity and":["lack","precedence"],"associativity of":["the","`++`","`&&`"],"associativity or":["something,"],"assume GHC":["will"],"assume I":["just"],"assume because":["in"],"assume it":["won't"],"assume quite":["a"],"assume that":["```a```","GHC","code","reading","it","the","Map","the","means","nonempty"],"assume the":["compiler"],"assume there's":["a"],"assume they":["have"],"assume this":["is"],"assume you":["ruled"],"assumed both":["sides"],"assumed since":["you"],"assumed that":["perhaps","would","haskell","`split`"],"assumes invalid":["DNA"],"assumes you":["use"],"assuming it's":["an"],"assuming that":["the","\u003ccode\u003efrequency"],"assuming the":["input"],"assuming we":["have"],"assuming you":["ordered","have"],"assuming you've":["thought"],"assuming) curry":["in"],"assumption right":["that"],"assumption that":["more"],"assumption, the":["test"],"assumptions about":["the"],"assumptions in":["the"],"asymmetry of":["the"],"asymptotic complexity":["doesn't","of","of","is","even","as"],"asymptotic complexity,":["but"],"asymptotic complexity.":["You"],"asymptotic performance,":["but","but"],"asymptotic reasoning":["being"],"asymptotically *exactly":["equivalent*"],"asymptotically, I":["didn't"],"asymptotically, since":["maps"],"at #3)":["keeping"],"at 0.197s":["on"],"at Control.Concurrent.MVar":[":)"],"at Data.Char":["for"],"at Data.Char,":["I"],"at Data.List.Split,":["there"],"at Data.Map's":["`fromListWith`"],"at Data.String.Utils?":["It"],"at Haskell":["really."],"at Iteration":["#2"],"at MVar,":["TVar,"],"at MissingH":["(cabal"],"at [Data.Map.Lazy](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html).":["All"],"at [filter](http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.6.0.1/Prelude.html#v:filter).":["It"],"at [this":["article"],"at `Data.List.Split`,":["specifically"],"at `Map.findWithDefault`,":["you"],"at `Map.fromListWith`.":["It"],"at ```any```":["and"],"at ```repeat```":["function)."],"at `all`":["and"],"at `any`":["and","and"],"at `concat":["."],"at `foldl'`":["from"],"at `fromListWith`,":["or","you"],"at `modifyTVar`,":["and"],"at `numbers":["s`"],"at `s`":["and"],"at `setBit`,":["that"],"at `unfoldr`":["and"],"at `wordsBy`":["from"],"at a":["time).","glance.","glance\"","tiny","level","beautiful","glance","time","time","tool","custom","minimum,","time","serious","time).","time,","few","glance.","glance","glance,","glance,","glance"],"at algorithmic":["complexity."],"at all":["really.","though.","to","pragmatic","until","would","possible.","in","for","to","unless","(this","(sometimes","from",":)","can","but","wrong","for","-","actually.","as","--",":)","(using","but"],"at all!":["So"],"at all\"":["but"],"at all),":["here's"],"at all,":["just","if","the","we","but","since","since","some","it","just","it's","so...this","your","less","because","or","just","you","generate"],"at all.":["I'll","As","I","You","I18n","Otherwise,","Consider","Most"],"at all?":["Think","HINT:","Arithmetic",":)","Can"],"at although":["you"],"at another":["solution","nested"],"at arithmetically—":["no"],"at basically":["the","any"],"at both":["versions"],"at compile":["time","time","time"],"at construction":["time,"],"at date":["manipulation."],"at doing":["a"],"at each":["option","iteration.","iteration,","step"],"at earlier":["versions"],"at every":["function","iteration.","step?"],"at example":["`daysInGigasecond"],"at first":["glance,","glance."],"at first,":["but","but","but","but"],"at for":["this"],"at hand":["right"],"at hand,":["not"],"at him,":["questioning"],"at home":["again."],"at how":["semantic","both","both","both","both","much","to"],"at http://hackage.haskell.org/package/deepseq/docs/Control-DeepSeq.html":["and"],"at http://hackage.haskell.org/package/split":["package"],"at it":["and","again,","and","for","later"],"at it,":["my"],"at least":["somewhat","O(n^2)","one","that's","for","twice","there's","*one*","one","the","the","use","use","one","I","one","in","log","the","slightly","compiles,","one","one","two","that's","your","the","linear","has","once,","in","learn","`isShouting`","at","I","put","one","one","strange..","100","adequately","one","one","on","be","1/2"],"at least)":["but","whereas"],"at least,":["I","this","less"],"at least.":["You"],"at line":["4"],"at list":["comprehension"],"at maximum,":["in"],"at most":["once.","once","once","once.","once","two","once.","once.","once.","once.","once.","once.","once,","once,","once","once?","once,","once","once","once","once","once","once","once","two"],"at my":["new","Bob","code,","solution"],"at nagging":["about"],"at once,":["because","which","in"],"at once.":["Thanks"],"at one":["point.","point","value."],"at other":["solutions","submissions","better"],"at others'":["solutions,"],"at pains":["to"],"at point-free":["style."],"at reasoning":["about"],"at revision":["3)."],"at rewriting":["it"],"at robot-name.":["The"],"at runtime":["either","(even","due"],"at runtime,":["using"],"at runtime.":["This"],"at separating":["implementation"],"at some":["point,","second","point.","point"],"at something":["like"],"at such":["long"],"at suggesting":["improvements"],"at that":["model","point","file","submission?","level."],"at the":["bottom","time.","end...","moment.","test","language","end.","start.","fact","same","next","very","moment","'last","README","gist","functions","same","source,","same","tests","end,","expense","extrema.","module","module","top","top","right","same","left","beginning","source,","end","same","beginning:","same","source","core","last","end","multi-line","value","same","same","top","source","expense","docs","code","single","end","top","same","top-level.","sig","top","cost","time.","effort","Cincinnati","end.","Data.String.Utils","top","top","`toWeekDate`.","same","top","bool","same","docs)","conclusion","end","end","end,","top","ghci","finished","`map`","response","head","tail","head","API","top,","end","functions","end.","module","first","test","top","top","cost","end","start","end","revised","revised","beginning,","end.","output","type","API.","expense","moment.","time","map","beginning","end","head","top","tests.","tests","signature.","`Data.Map`","`Data.List.Split`","moment","same","same","end","end,","top.","end","result","end,","functions","moment","cost"],"at things":["the"],"at this":["involved","`Monad`","code","point.","point.","point.","sometime,","point"],"at tirelessly":["explaining"],"at trying":["to"],"at two":["different"],"at typeclassopedia":["for"],"at uni":["and"],"at up":["to"],"at using":["Control.Applicative","`all`","`splitAt`","`splitAt`.","one","Data.Map.Strict"],"at vector-fixed":["package"],"at whether":["it's"],"at why":["the"],"at worst":["case","it'll"],"at your":["mercy","last","allupper","Bob","example.","solution","hint"],"at, along":["with"],"at-pattern, e.g.":["`responseFor"],"at; That":["there's"],"atomic (there's":["no"],"atomic in":["the"],"atomic instructions.":["Simply"],"atomic only":["if"],"atomic operation":["when"],"atomic operation,":["doesn't"],"atomic operations":["are"],"atomic operations:":["take"],"atomic or":["it"],"atomic write":["could"],"atomic, you":["can't"],"atomic? And":["TVars"],"atomicModifyIORef acts":["as"],"atomicModifyIORef is":["never"],"atomicModifyIORef operations":["occur"],"atomically $":["newTVar","newTVar","newTVar"],"atomically (newTVar":["n)"],"atomically .":["newTVar","newTVar)"],"atomically readTVar":["doesn't"],"atomically, but":["there"],"atomicity and":["isolation"],"attach type":["signatures","signatures"],"attached to":["my"],"attempt at":["Haskell"],"attempt has":["a"],"attempt now":["it"],"attempt on":["that"],"attempt this":["approach,"],"attempt to":["reach","fully","make","redefine"],"attempt took":["a"],"attempt using":["a"],"attempt while":["getting"],"attempt, and":["in"],"attempt. I":["sped"],"attempting this":["problem"],"attempting to":["compute"],"attempts at":["this"],"attempts had":["failed"],"attempts to":["make"],"attention to":["performance."],"attoparsec combinators,":["I"],"attoparsec its":["not"],"attoparsec, however":["there"],"atypical to":["specify"],"auto-generated \"de-constructor\"":["to"],"auto-magically for":["me"],"autocomplete on":["my"],"autocomplete play":["bad"],"automalically create":["functions:"],"automatic memorization":["but"],"automatically created":["variable"],"automatically defined":["with"],"automatically generated":["getters,"],"automatically in":["a"],"automatically inferred":["as","to"],"automatically perform":["this"],"auxiliary computations":["concerned"],"auxiliary function":["in"],"auxiliary functions":["wouldn't"],"availability to":["use"],"available as":["`fromListWith`,"],"available for":["operators)"],"available horizontal":["space"],"available in":["Haskell","my","the","Data.Map,","the"],"available is":["always"],"available to":["it,"],"available) and":["I"],"available, here":["are"],"available... or":["perhaps"],"avenues for":["optimizations"],"average number":["of"],"avoid (the":["safe"],"avoid ++":["you"],"avoid [explicit":["recursion](http://www.haskell.org/haskellwiki/Haskell_programming_tips#Avoid_explicit_recursion)."],"avoid `fromJust`":["when"],"avoid `group`":["and"],"avoid a":["compiler","conversion"],"avoid accidental":["name"],"avoid all":["of"],"avoid and":["once"],"avoid any":["compiler"],"avoid building":["up"],"avoid checking":["every"],"avoid creating":["new"],"avoid dumb":["requirements"],"avoid explicit":["recursion","recursion","recursion","recursion"],"avoid going":["beyond"],"avoid hard-coding":["some"],"avoid having":["to","to"],"avoid introducing":["the","the"],"avoid it":["(just","by","by"],"avoid libraries":["you"],"avoid name":["clashes"],"avoid nested":["maps"],"avoid non-exhaustive":["pattern"],"avoid parentheses":["at"],"avoid possible":["name"],"avoid re-searching":["through"],"avoid recomputing":["things."],"avoid regexes.":["`c::"],"avoid repeating":["the","the"],"avoid reversing":["the"],"avoid silent":["failures,"],"avoid some":["of","of"],"avoid sorting,":["but"],"avoid such":["functions."],"avoid that":["`uncurry`","entirely,","`return","if","issue."],"avoid the":["explicit","obvious:","ReadChar","\"string-replace","wrapping","`uncurry`","explicit","empty","special","need","if","issue","need","introduction","unnecessary","creation","intermediate","relatively","folding","`String`","explicit","manual"],"avoid them,":["it"],"avoid these":["sorts"],"avoid this":["dilemma","problem","issue.","problem.","problem.","problem","as","problem","problem."],"avoid those":["warnings,"],"avoid traversing":["the"],"avoid unnecessary":["computations."],"avoid using":["them.","`flip`","`fromListWith`","regexes.","brackets"],"avoided if":["you"],"avoided lists.":["Maybe"],"avoided that":["mistake,"],"avoided trying":["to"],"avoided unless":["you're"],"avoided using":["unsafe"],"avoided whenever":["possible"],"avoided with":["the"],"avoided, it":["requires"],"avoiding ```reverse```":["and"],"avoiding by":["using"],"avoiding the":["infix","unnecessary"],"avoids a":["different","repeated"],"avoids creating":["unnecessary"],"avoids introducing":["a"],"avoids some":["of","lazyness"],"avoids that":["warning."],"avoids the":["tuple"],"avoids this":["problem."],"aware of":["a","`fromListWith`.","the","`insertWith'`.","the","what","the","is","a","any","in"],"aware of),":["and"],"aware that":["doesn't","`Data.Map`"],"aware, importing":["modules"],"away (this":["kind"],"away and":["you'll"],"away as":["`=","expected."],"away by":["the","GHC."],"away from":["the","`do`"],"away if":["it"],"away implementation":["detail,"],"away in":["`allergies`."],"away the":["multiple","plural"],"away with":["calling","just","a","`word`","not","just","shorter","a","omitting"],"away, but":["the"],"away, it'll":["force"],"away. Check":["out"],"away. Not":["sure"],"awesome feedback.":["I'm"],"awesome way":["to"],"awesome! I":["can't"],"awesome! haha":["Haskell"],"awesomely suiting":["for"],"awful it":["can"],"awful; Ints":["all"],"awfully bad":["haskell"],"awfully hard":["time","to"],"awhile before":["I've"],"awhile now":["too),"],"awkward (and":["strangely"],"awkward arrangement":["of"],"awkward because":["there's","`s'`"],"awkward to":["me","see","use"],"awkward type":["sig..."],"awkward way":["to"],"awkward when":["you"],"a…\". The":["first"],"b $":["c`","c`"],"b &amp;&amp;":["as"],"b (A":["_"],"b (c,":["c')"],"b +":["c`"],"b ++":["c`","\".\""],"b -&gt;":["d)","c"],"b --":["Defined"],"b -\u003e":["let","mod","c)","f","Bool)","Bool)","Bool","c)","d`.","Map","c)","f","f","f","f","Bool`)","Bool)","Bool)","Bool`.","Bool)","Bool)","Bool`).","c)","d","a`","g","a","a","b","b","c)","a"],"b ..":["a]`."],"b :":["bs`"],"b ::":["A"],"b \u003c-":["getBalance","getBalance","getBalance"],"b =":["sum","f","reverse","unlines","(,)","(_t1::Maybe","a","a","(,)","Matrix","...","Just","Just","8","g"],"b ==":["'1'","c`","1`"],"b =\u003e":["b"],"b `asTypeOf`":["a`"],"b `deepseq`":["c"],"b `seq`":["(a,b)`"],"b a":["=="],"b c":["d","-\u003e"],"b c'":["-\u003e"],"b c)":["=","="],"b c`":["is"],"b d)":["--"],"b do":["not"],"b in":["seq"],"b then":["0","1"],"b to":["build"],"b ||":["c"],"b' &&":["sorteda","sort"],"b' \u003c-":["getBalance"],"b' =":["map"],"b) (rnf":["c)`"],"b) +":["hammingDistance","hammingDistance"],"b) ++":["c)"],"b) -&gt;":["a","(c","(c","(c","(c"],"b) --":["Defined","Defined","Defined","Defined"],"b) -\u003e":["f","f","m","[a]","[a]","a","a","f","a","f","f","((a,","b","m","a","Just","a","[a]"],"b) \u003c-":["abs,"],"b) =":["WordCount","(a,","(a,"],"b) =\u003e":["Bounded","Eq","Ord","Read","Show","f","f"],"b) c`":["and"],"b) is":["there"],"b) makes":["this"],"b) x":["y"],"b) |":["(as,"],"b)) but":["the"],"b))) ==":["Just"],"b))```. Or":["am"],"b). how":["negative"],"b). transaction":["should"],"b). values":["that"],"b)` and":["`Int`"],"b)` but":["obviously"],"b)` from":["`equivalent`,"],"b)` since":["there's"],"b)` will":["return"],"b)`, which":["you"],"b)`. Bool":["has"],"b)`. Maybe":["implements"],"b, Num":["a)","a)","a)"],"b, c,":["d]`."],"b, c]":["=","="],"b, the":["second"],"b-1 ..":["a]`,"],"b. It":["doesn't"],"b\u003c/code\u003e rolls":["better"],"b]` given":["a"],"b]` is":["better"],"b]`, but":["this"],"b` after":["case"],"b` always":["evaluates"],"b` can":["be"],"b` case":["from"],"b` case.":["It's"],"b` is":["false.","an","the","more","the","`a","equivalent"],"b` regardless":["of"],"b` will":["be"],"b` would":["be"],"b`) to":["denote"],"b`, for":["example."],"b`, in":["this"],"b`, then":["you"],"b`. For":["Maybe,"],"b`. I":["suspect"],"b`. That's":["why"],"ba (return":["."],"ba i":["="],"back &":["forth"],"back again":["to"],"back and":["forth","forth","tried","regret","forth.","fix"],"back at":["me."],"back burner":["for"],"back here":["after"],"back in":["though.","somehow?"],"back in.":["I'm"],"back into":["plain","plain","academia","[questions]","a"],"back on":["Statement\""],"back slashes":["connecting"],"back something":["'mechanical'"],"back to":["it.","it","count.","a","the","bite","this","\"brute-forcing\"","previous","this!","this","using","this","this","reading.","I,j","the","the"],"back together":["half"],"back using":["a"],"back with":["the"],"back- as":["it"],"back. That":["can"],"background balking":["at"],"background. I":["considered"],"backing for":["your"],"backpermute to":["implement"],"backpermute will":["be"],"backquotes, e.g.":["`1"],"backslash continuation":["trick,"],"backslash in":["a"],"backslash or":["another"],"backslashes do":["it,"],"backslashes were":["unnecessary"],"backslashes you":["can"],"backticks in":["Markdown"],"backticks turn":["a"],"backticks...) and":["`where`"],"backtracking, but":["it"],"backwards, it's":["not"],"backwards. Nice":["usage"],"bad README,":["and"],"bad `toRNA`":["doesn't"],"bad algorithm":["probably","is"],"bad and":["can"],"bad as":["the"],"bad at":["date"],"bad because":["`reverse`"],"bad code":["being"],"bad constant":["factors,"],"bad efficiency":["(especially"],"bad for":["the"],"bad games":["with"],"bad habit":["to"],"bad haskell":["code"],"bad here":["because"],"bad idea":["because","for","as","as"],"bad idea.":["The"],"bad in":["this","types,"],"bad input":["is","altogether","(\"QUUX\").","came","is","is","but"],"bad it":["is"],"bad memory":["footprint"],"bad name":["as"],"bad number":["will"],"bad on":["its"],"bad performance":["characteristics."],"bad practice":["in","to"],"bad rep),":["but"],"bad style":["(unless","to","to"],"bad style,":["but"],"bad thing":["to","is"],"bad to":["use"],"bad tradeoff.":["(Unless"],"bad way":["to","to"],"bad, a":["map"],"bad, didn't":["see"],"bad, especially":["the"],"bad, it's":["actually"],"bad. Going":["to"],"bad. The":["input"],"bad. This":["could"],"bad. You":["can"],"badly worded,":["it"],"baffled with":["some"],"bag of":["letter"],"bag or":["multiset)"],"bag). If":["you"],"bal` at":["the"],"bal` because":["the"],"balance and":["then"],"balance between":["performance"],"balance may":["lead"],"balance of":["the"],"balance to":["but"],"balance was":["not"],"balance which":["I"],"balance, and":["the"],"balanced it's":["possible"],"balanced search":["tree"],"balancing process":["if"],"balking at":["such"],"bang patterns":["to","don't",":-/."],"bang patterns,":["I"],"bang-patterns to":["maintain"],"bank account":["problem?","is"],"bank can't":["close"],"bank is":["opened"],"bank, then":["open"],"bar ::":["forall","forall"],"bar Just":["foo`"],"bar True":["="],"bar, you":["need"],"bar.baz()`. For":["the"],"bar.hs, bar.o":[")"],"bar.hs, interpreted":[")"],"bar` always":["evaluates"],"bar` feels":["weird,"],"bar` is":["the","equivalent"],"bar` no":["matter"],"barely modify":["the"],"barked. Is":["there"],"barrier to":["reordering."],"bartavelle, flip":["zip"],"bartavelle, would":["this"],"base ...":["linking"],"base 10":["digit"],"base \u003e":["10","10."],"base and":["they"],"base case":["in","in"],"base g":["lest"],"base libraries.":["Maybe"],"base monad":["as"],"base monad,":["including"],"base package,":["that"],"base there":["would"],"base). It's":["safe"],"base, but":["I"],"base, except":["unary."],"base, so":["that"],"base. It":["could"],"base. Multiplying":["by"],"base? It":["won't"],"baseCounts could":["be"],"baseTable =":["M.fromList"],"based implementation":["that","is","to"],"based mutable":["concurrent"],"based on":["incorrect","a","`replicateM`","how","what","the","its","the","foldr,","your","String,","the","the","\u003ccode\u003espan\u003c/code\u003e","feedback.","the","input","default","that","a","your","the","@yasmine's","your"],"based solution":["before"],"based synchronization,":["better"],"based synchronization.":["MVars","The"],"based the":["schedule,"],"based under":["the"],"based version":["is"],"bases and":["if"],"bases in":["that"],"bases into":["a"],"bases where":["all"],"bases. And":["I"],"basic (-+*)":["operations"],"basic (and":["I"],"basic Haskell":["stuff"],"basic functionality.":["You"],"basic haskell":["functions"],"basic idea":["is"],"basic mutable":["variables"],"basic reason":["here"],"basic. I":["wrote"],"basically I":["only"],"basically `toRNA":["="],"basically a":["restricted","more","trivial"],"basically always":["a","wrong","the","less","the","going"],"basically any":["cost."],"basically assumed":["since"],"basically combinator":["of"],"basically comes":["down"],"basically constructed":["in"],"basically exactly":["how"],"basically expected":["to"],"basically guessing":["trying"],"basically just":["reverse"],"basically makes":["exactly"],"basically means":["instead"],"basically never":["use","the","better"],"basically no":["cost"],"basically only":["works"],"basically removed":["the"],"basically rewrote":["Haskell's"],"basically saying":["that"],"basically the":["same","wrong","same","same","same","same","same","same","ideal"],"basically this":["all"],"basically to":["use"],"basically useless":["for"],"basically using":["it"],"basically want":["to"],"basically will":["just"],"basically) if":["you"],"basically), but":["this"],"basis with":["pragmas"],"bastard on":["Pluto"],"battling to":["understand","\"grok\""],"be \"(000)":["000-0000\","],"be \"000\",":["and"],"be \"refrain\",":["not"],"be \"triple\".":["Since"],"be (another":["power"],"be (at":["least"],"be (getting":["the"],"be (hopefully)":["much"],"be (numbers":["in"],"be (subjectively,":["in"],"be -":["is","without"],"be 0,":["so"],"be 0.":["If"],"be 1,":["in","Monday"],"be 2,":["etc."],"be 26":["-"],"be 3.5,":["it"],"be 6":["days"],"be 7":["elements"],"be 8-bit":["safe."],"be 80":["characters"],"be Foldable,":["just"],"be Maybe":["(N"],"be O(1)":["all"],"be O(1).":["The"],"be O(n).":["Better"],"be OK":["if"],"be `(3*n^4":["+"],"be `(a":["-\u003e"],"be `(fromBool":[".)."],"be `(isLetter":["a"],"be `::":["Int"],"be `False`.":["Everything"],"be `Int":["-\u003e"],"be `Int`":["before."],"be `Nothing`":["as"],"be `Num":["a"],"be `RobotRec":["-\u003e"],"be ```word```":["and"],"be `ageOn":["planet"],"be `all":["isSpace"],"be `canonical":["="],"be `foldMap":["(foldMap"],"be `foldl'":["((force"],"be `fromEnum":["(c","(b"],"be `fromGregorian":["y"],"be `fromList":["[(\"foo\","],"be `isAnagram`":["or"],"be `isSuffixOf`":["from"],"be `isUpperLetter":["="],"be `lift`":["and"],"be `min":["(length"],"be `modifyMVar_`":["which"],"be `not":["$","(null"],"be `null`":["if"],"be `on":["(==)"],"be `raised":["to"],"be `silence":["(removeNonSlphaNum"],"be `sum`":["or"],"be `where":["oneOf"],"be a":["list","faster","useful","little","bit","simpler","combinator","little","little","little","way","good","separate","lot","question","slightly","convenient","bit","good","good","slightly","bit","bit","bit","more","space","little","way","good","space","little","little","little","bit","better","bit","shorter","little","little","bit","better","problem.","little","version","little","little","bit","little","bit","little","really","reimplementation","single","little","better","bit","visual","little","little","somewhat","function","short","lot","little","way","pretty","well-formed","simpler","few","type","little","bit","little","tiny","nice-to-have.","little","bit","good","planet","bit","guard","bit","little","nicer","type","silly","non-space.","bit","total","bit","crime","good","bit","runtime","line","partial","little","little","potential","function","good","nice","readability","positive","way","lot","bit","valid","refresher","difference","bit","nice","little","tiny","good","test","better","little","lot","bit","good","little","little","good","bit","better","list","helpful","nicer","way","strict","little","little","little","little","little","Char,","good","way","good","multiple","better","code","lot","multiple","runtime","bit","bit","proper","superclass","plain","better","concern","check","good","pretty","thunk","better","bit","little","useful","newline","little","good","higher","bit","particularly","slight","bit","good","better","little","shame","bit","valid","bit","question.","bit","whole","lot","little","nicer","64-bit","bit","direction","more","better","model","little","way","lot","result","good","better","variable","little","higher","lot","case","bad","little","little","little","bit","bit","correct","small","square.","short","lot","better","little","little","better","realistic","bit","much","more","bit","set","similar","bit","small","bit"],"be able":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to.","to","to","to","to","to","to","to","to","to","to"],"be about":["making","ten"],"be absolutely":["sure","sure","sure","sure","sure","certain","sure"],"be acceptable":["too).","for","if"],"be accessed":["from","multiple"],"be accessed,":["and"],"be accomplished":["via"],"be accumulating":["thunks"],"be accurate":["to"],"be actually":["a"],"be added":["to","in"],"be adequately":["handled"],"be adjacent":["to"],"be advising":["people"],"be all":["you"],"be allocated":["at"],"be allocated,":["also"],"be almost":["enough"],"be also":["worth"],"be altered":["slightly"],"be ambiguous":["what"],"be an":["algorithmic","idiom,","influx","unused","anagram","eternity","issue","improvement","issue","issue","improvement","`Int`,","awesome","anagram?","explicit","interleaving","overkill,","error","overkill","anagram,","easier"],"be anagrams.":["There"],"be another":["name)","convenient","task"],"be answered":["by"],"be any":["faster.","simpler","need","Enum.","two"],"be applied":["on","to"],"be appropriate":["for","in"],"be approximated":["as"],"be arrived":["at"],"be as":["readable,","pretty","hard","readable,","succinct","readable","effective","readable"],"be at":["least"],"be atomic,":["you"],"be automatically":["defined","inferred"],"be avoided":["whenever","if"],"be avoided,":["it"],"be avoiding":["by"],"be aware":["of"],"be awfully":["hard"],"be awhile":["before"],"be based":["on"],"be because":["I'm","I'm","we"],"be beefed":["up,"],"be being":["daft"],"be below":["the"],"be beneficial":["to"],"be best":["to","to","to","to","if"],"be better":["off","than","than","if","as","to","to","than","named","to","to","to","to","if","to","to","to","to","than","to","than","to","to","also.","to","style","to","than","than","with","than","expressed","than","optimized","than","as","than","to","but","and","than","to","form","as"],"be better,":["why","depending","but","instead","maybe","right?"],"be better?":["It's"],"be blocked,":["so"],"be both":["computed","RNA","simpler"],"be bothered":["to"],"be buggy":["if"],"be build":["unless"],"be building":["up"],"be built":["with","in,"],"be calculated":["directly.","once","very","once"],"be called":["with","with","unnecessarily","`thymidineToUracil`?","a","`normalize`,","every","from","`MkSchool`."],"be canceled,":["it's"],"be captured":["with"],"be careful":["about","about"],"be case":["normalized","normalized.","normalized."],"be case-insensitive.":["It's"],"be caught":["by","by"],"be caught,":["and"],"be certain":["one"],"be changed":["in","to","is"],"be changed.":["Guess"],"be cheap":["the"],"be cheating":["when"],"be checked":["somewhere"],"be checking":["all","primes"],"be circumvented":["with"],"be cleaned":["up","up","up","up"],"be cleaner":["-","to","with","with"],"be cleaner,":["you"],"be cleaner.":["There"],"be clear":["and","and","though,"],"be clearer":["and","to","and","without","to","if","if","as:","if","than"],"be clearer,":["adding"],"be clearer.":["Thanks"],"be clever":["in"],"be closed":["and","when"],"be closer":["to"],"be code":[";)"],"be collected":["until"],"be collecting":["thunks"],"be columns":["and"],"be common":["to"],"be compared":["to"],"be compiled":["fixed"],"be completely":["evaluated","with"],"be computed":["during","at","once."],"be computed,":["so","really"],"be concerned":["about"],"be concise,":["try"],"be confused":["with"],"be confusing":["and","or"],"be connected":["to"],"be considered":["as","the","cleaner?","a","\"Yoda-programming\".","a","as"],"be considered.":["You"],"be consistent":["with","for"],"be consolidated,":["and"],"be constrained":["to"],"be constructed.":["The"],"be constructing":["a"],"be consulted":["since"],"be consumed":["by"],"be convenient":["to"],"be cool":["all"],"be correct":["for"],"be correlated":["in"],"be counted),":["then"],"be counted---this":["is"],"be created":["with","using"],"be created,":["and"],"be customary":["to"],"be dangerous":["to","but"],"be dangerous\"":["if"],"be dealt":["with"],"be defined":["as","in","in","a","as:","for"],"be delayed":["it"],"be dependent":["on"],"be deriving":["`Ord`"],"be descructering":["the"],"be desirable":["to","to","to"],"be different":["from","than"],"be difficult":["to","to"],"be discarded":["when"],"be disinclined":["to"],"be distinct":["type."],"be divisible":["by","if"],"be divisors,":["etc.)."],"be divisors.":["For"],"be doing":["something"],"be done":["in","easily","better","with","better","in","with","to","a","with","in","better","between","in","in","much","this","more","with","anyway","more","with","by","algorithmically,","with","with","in","like","more","to","in","more","with","here","very","with","in","lazily.","a","much","with","with","for","with","with","with","nicely","in","using","via","in","with","a"],"be done,":["and"],"be done.":["The"],"be each":["element"],"be easier":["than","or","to","since","to","to","use","for","to","to"],"be easily":["inferred)","cached?","implemented","defined","looked","done"],"be easy":["and","to"],"be efficient":["because","here.","and"],"be efficient).":["You"],"be efficient,":["the"],"be efficient.":["It"],"be efficiently":["compiled"],"be either":["RNA"],"be elaborated":["in"],"be eliminated":["by"],"be empty":["or","or"],"be empty,":["although","but"],"be empty.":["I'm","But"],"be enough":["and"],"be equal":["(or","in"],"be equivalent":["to","with","to"],"be eta":["reduced,"],"be eta-reduced":["to"],"be evaluated":["in","and","by","fully","only","on","to","and","from","on","only","later","only","in","upon","only"],"be evaluated,":["Haskell","and"],"be evaluated.":["If","The"],"be even":["simpler.","more","more","better.","faster","better).","more","better,"],"be executed":["if"],"be exercise":["#2"],"be expected":["to"],"be explicit":["about","and","that","in","about","about","here","about"],"be explicit.":["As","See"],"be explicitly":["stated","exported","laid"],"be exported":["from","from"],"be exported,":["but"],"be exporting":["the"],"be expressed":["as","as"],"be extensions":["to"],"be extracted":["into"],"be fair,":["this"],"be fairly":["easy)."],"be familar":["with"],"be faster":["than","since","to","and","as","since"],"be fine":["if","to","here,"],"be fine,":["but"],"be finite,":["which"],"be first.":["The"],"be fixed":["only","the","by"],"be flippant,":["these"],"be floated":["out"],"be flush":["left","left"],"be forced":["on","when"],"be forced,":["which"],"be forcing":["the"],"be found":["here","[here](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl')."],"be found.":["It"],"be free":["to"],"be fully":["evaluated","evaluated","strict."],"be functionally":["identical"],"be further":["cleaned"],"be fused":["and"],"be fused,":["but"],"be fuzed":["away"],"be gained":["there"],"be genuinely":["faster"],"be given":["the","an"],"be going":["down"],"be good":["practice","style","style","practice).","style","style.","practice","practice","practice","practice","to"],"be gratefully":["received."],"be great,":["but"],"be greater":["than"],"be grouped,":["sorted,"],"be guarantee":["that"],"be guarded":["against"],"be handled":["algebraically,"],"be happening?":["I'm"],"be happy":["to"],"be hard":["to","to","to","to"],"be harder":["to","to","without"],"be having":["them"],"be helpful":["to","when","for"],"be helpful,":["the","also"],"be hesitant":["to"],"be hit":["or"],"be honest":["I'm"],"be honest,":["i"],"be how":["I'd","ghc"],"be ideal":["to"],"be identified":["as"],"be if":["you","you"],"be implemented":["using","and","using","this","elegantly","in","more","purely","with","without","much","as","with","very","a","in","with","more"],"be important":["here."],"be improved":["slightly","because","would","by","here","upon.","as"],"be improved,":["I","what"],"be in":["this","another","groups","memory","a","two","case:","a","sync","one","a","such"],"be included":["in","in"],"be indented":["the","two"],"be inefficient":["because"],"be infered":["to"],"be infered,":["as"],"be infinite":["provided"],"be infix":["dropped"],"be inserted":["before"],"be instantiated":["based"],"be intercepted.":["Whereas","Different"],"be interchangeable":["with"],"be interested":["to","to","in"],"be interesting":["to","to","to"],"be interpreted":["several","as"],"be introduced":["if"],"be inverses":["of"],"be isShouting,":["to"],"be iterative":["and","and"],"be joined":["with"],"be just":["`['A'..'Z']`","as","once","an","as","`c","a"],"be kept":["one","in"],"be kinda":["tricky","buggy.","nice"],"be known":["by"],"be language":["dependant,"],"be large":["so"],"be lazy":["evaluated"],"be lazy,":["but"],"be leaked":["strict"],"be left":["out."],"be less":["performant","dependent","obvious","noisy","efficient","faff","code?","or"],"be like":["`!@#$%^?`,","`foo","the","[this]","this"],"be linear":["(but"],"be listed":["by"],"be longer":["but","than"],"be looking":["for"],"be made":["simpler","simpler","simplier","simple","easier.","better","much","clearer","here","shorter","point-free","a","more","point-free.","significantly","for"],"be maintained,":["at"],"be map":["toLower"],"be marginally":["nicer"],"be materialized":["in"],"be meaningful,":["since"],"be measurably":["slower"],"be memoized,":["although"],"be merged":["with"],"be missing":["something.","something"],"be modified":["to"],"be more":["elegant","straightforward","than","common","readable?","clumbersome.","like","expressive","concise","clear","simply","obvious.","efficient","idiomatic","natural.","verbose,","easily","obvious","generic","reasonable","common","common","common","slick,","efficient","efficient","explicit","sensible","elegant.","succinct","specific","straightforward","\"correct\".","obvious","performant","common","obvious","optimal,","readable.","clear","idiomatic","clear:","efficient.","difficult.","interesting.","clear.","fun","efficient","or","idiomatic","simple","readable","efficient.","readable,","effective.","clear","idiomatic.","efficient","readable"],"be most":["verbose"],"be moved":["into"],"be much":["improved","better.","harder.","more","more","better","cheaper","cheaper","prettier","better","cleaner","better","simpler","simpler.","better.","much"],"be named":["`go`,","`go`","something"],"be near":["to"],"be necessary":["because","since","in","here."],"be necessary,":["most"],"be needed":["instead"],"be nice":["to","to","to","to","if","to","if","to","to","to","to","to","to","to","to","to","to","to","to","if","to","to","to","if","in","to","to"],"be nice,":["but"],"be nice.":["Otherwise,"],"be nicer":["with","to","if","than","about","to","to"],"be nicer.":["`\u003c$\u003e`"],"be no":["extra","overhead.","difference"],"be non-empty?":["There's"],"be normalized":["only","only"],"be not":["an"],"be note":["readable"],"be observed":["by"],"be obvious":["from"],"be of":["any","use,"],"be ok":["in","but","if"],"be on":["its","a","a","the"],"be once":["you"],"be one":["glyph"],"be onerous":["at"],"be open.":["The"],"be optimal,":["you"],"be optimized":["a","better","out."],"be ordered":["and","or","this"],"be overridden":["by","by","by","by","by","by","by","by","by"],"be part":["of","of","of","of"],"be partial,":["or"],"be partial...":["which","I"],"be passed":["around.)","to","to","in?","in"],"be perfect":["expression,"],"be perfectly":["acceptable"],"be performed":["anyway"],"be personal":["preference.","preference,"],"be picked":["up","up"],"be pieced":["together"],"be placed":["in"],"be pointfree":["or"],"be pointless.":["Looks"],"be possible":["to","to","to","to","to","to","to","to","to","to"],"be potential":["issues"],"be preferable":["to","to","since","to"],"be preferable,":["but"],"be preferred.":["In"],"be presented":["as","as"],"be prettified,":["isn't"],"be pretty":["cool.","printed.","simple:","helpful","happy.","worried"],"be printed":["6*7"],"be private.":["All"],"be problematic":["when"],"be processed":["by"],"be processes":["iterativelly"],"be producing":["better"],"be pure.":["Because"],"be pushing":["through"],"be put":["into"],"be qualified":["with"],"be quite":["similar"],"be raised":["for"],"be re-written":["as"],"be read":["many","top","in"],"be readable":["by"],"be really":["clever,"],"be reasonable,":["who"],"be recomputed":["for"],"be recursive,":["there's"],"be reduced":["to","to","to","further,"],"be reevaluated":["later"],"be referencing":["function"],"be regarded":["as"],"be relatively":["efficient,"],"be removed,":["so"],"be renamed":["to","and"],"be reordered":["in"],"be replaced":["with","by","by","by","by","with"],"be represented":["as"],"be required,":["then,"],"be result":["of"],"be returned":["to"],"be reversed,":["so"],"be revised,":["in"],"be reworked,":["right"],"be rewritten":["to","`a","without","as","as","as","using","using","as"],"be right":["that","about"],"be rows.":["However,"],"be run":["only","only","again","once,"],"be running":["compiled"],"be safe,":["but"],"be satisfied":["without"],"be saved":["from"],"be scoped":["to"],"be sent":["SMS"],"be separate,":["but"],"be sharing":["`primes`"],"be shorter":["with","as","and","if","and","than"],"be significantly":["improved","simplified"],"be simple":["to","and"],"be simpler":["than","using","to","than","than","if"],"be simpler,":["more","though","but"],"be simpler.":["Consider","Also"],"be simplest":["choice)"],"be simplified":["with","to","by","slightly","(and","by","with","some","using","by","a","using","using","by","to"],"be simplified.":["Also,","Anything"],"be simplified:":["consider"],"be simply":["explained"],"be slightly":["simpler","better","nicer","easier"],"be slower":["with","since","and"],"be smiled":["upon"],"be so":["clear.","easy","much"],"be solved":["with","using","if","as:","with"],"be some":["clever","measurable","argument"],"be something":["like:","like:","like","that","I'm"],"be somewhat":["shorter."],"be somewhere":["to","but"],"be sorted":["by","only","only","only"],"be sorted.":["Besides,"],"be spelled":["`isSeparator`."],"be split":["into"],"be splitted,":["but"],"be stated":["twice."],"be statically":["verified.","determined"],"be still":["more"],"be stored":["in","in"],"be storing":["the"],"be stream":["fusion).","fusion)."],"be strict":["folds","as"],"be strict,":["so"],"be stripped),":["but"],"be stripped.":["Yelling"],"be stubborn":["of"],"be style.":["Typical"],"be succinct":["as"],"be such":["a"],"be sufficient":["to","to","(`seq`","here."],"be sufficiently":["fast."],"be sure":["that","that","it","this","that","that","how","that","to","that"],"be surprised":["if","to"],"be surprising":["(doesn't"],"be tackled":["when"],"be tail":["recursive"],"be tempted":["to","to"],"be terser":["(and"],"be tested":["in"],"be that":["much"],"be the":["commonly","failure","right","`responseFor`","same","opposite.","same","default?","only","best","way","beautiest","most","way","most","right","right","`analyze`","expected","negation","best","API","whole","second","first","point","most","\"body\"","preferred","preferred","same","value","first","type","simplest","same.","new","best"],"be there":["to","would","(but"],"be there!":["Maybe"],"be there,":["most"],"be there.":["You"],"be this":["method"],"be thought":["about","of"],"be thunks":["that","of","of"],"be to":["use","have","have","collect","make","pattern","use","make","use","have","use","look","do","just","use","avoid","work","use","use","use","still","work","use","enable","use","use","add","use","compare","use","write","convert","write","use","use","use","write","write","write","use","use","compare","write","use","just","read","use","use","either","use","use","try","create","use","use","make","use","do","have","write","use","use","refactor","use","use","use","use","use","factor","do","use","use","give","change","implement","write","modify/debug","use","write","use","put","use","make","`M.toList`","use","make","use"],"be too":["hard","hard","wordy","easy","complex,","many","concerned"],"be top-level":["functions."],"be total":["function.","before"],"be total,":["because"],"be traded":["out"],"be transformed":["into"],"be translated":["by"],"be traversed":["before","first,","to"],"be treated":["as","as"],"be tricky":["to"],"be tricky!\",":["\"really"],"be tricky!\",\"really":["tricky\"]]"],"be tricky!\\\"":["\\\"really","\\\"really"],"be trimmed":["before"],"be trimming":["all"],"be true":["in"],"be truncated.":["https://twitter.com/NotDoctorOk/status/371358278741397504"],"be trying":["to"],"be two":["words."],"be typed":["`Robot"],"be ugly":["like"],"be unable":["to"],"be under":["the"],"be unecessary":["in"],"be unevaluated":["and"],"be unindented":["two"],"be unnecessary.":["Otherwise"],"be unused":["imports.","here,"],"be unused.":["Otherwise"],"be updated":["in"],"be updated,":["but"],"be upper":["bounded","bounded"],"be usage":["of"],"be use":["even"],"be used":["for","when","to","to","to","when","to","as","to","for","with","to","such","in","around","for","elsewhere","to","outside","to","from","for","instead","in","instead","in","there.","instead","to","e.g.","to","to","to","here.","inside","for","instead","whenever","instead"],"be used,":["`map","e.g.","`import","although"],"be used.":["Otherwise,","The","It"],"be useful":["to",":","to","in","for","for","someday.","here.","in","in","here.","in","in","here"],"be useful,":["like"],"be useful.":["`lookup`"],"be useful:":["`Data.List.isSuffixOf`","http://www.haskell.org/haskellwiki/How_to_read_Haskell"],"be usefull":["when","for"],"be using":["Data.Map's","right","Text","String","do","Data.Text","a","`foldl'`","`foldl'`","O(1)","`filter","the","the","Data.Map.Strict","Data.Map.Strict","`foldl'`","`foldl'`,","*findWithDefault*","Data.Map.Strict,","words","up"],"be using\u003ccode\u003eunlines\u003c/code\u003e?":["I'm"],"be value-strict":["(I"],"be veering":["quite"],"be verbose":["and"],"be very":["gentle","welcome!","commonly","noticeable","useful","useful","cheap","helpful.","difficult.","welcome."],"be visible":["only"],"be way":["too"],"be welcome":["-"],"be well":["known"],"be whether":["or"],"be wise":["to"],"be with":["different"],"be without":["actual"],"be words":["of"],"be working":["as"],"be worried":["about."],"be worse":["to"],"be worth":["considering","the","the","the","doing.","mentioning","implementing","unpacking","the","thinking","thinking","it"],"be worthwhile":["-","just"],"be wrapped":["in","in","in"],"be written":["```concatMap","in","`first","in","in","as","as","in","if","more","as","as","tail-recursive?","`(r","much","using","somewhat","as","as","as","as","as","as","as","as","as","more","more","much","as","using","in","in","on","as","as","as","very","as","as"],"be wrong":["also."],"be wrong,":["I"],"be your":["generators","first","choice"],"be! I'm":["a"],"be, I":["see"],"be, `mod`":["or"],"be, `not":["."],"be, and":["could","I'd"],"be, can":["you"],"be, especially":["since","with"],"be, for":["example."],"be, it's":["much"],"be, you":["were"],"be. Consider":["the"],"be. Fixing":["this"],"be. Given":["a"],"be. I'll":["give"],"be. In":["Haskell"],"be. You":["should"],"be.) Interestingly":["I"],"be: how":["to"],"be?) -":["I"],"bearing and":["coordinates","coordinates","coordinates","coordinates"],"bearing with":["me"],"beats it":["by"],"beautiest solution":["to"],"beautiful and":["expressive!"],"beautiful two":["lines"],"beauty of":["pure"],"became a":["problem"],"becauese zeros":["are"],"because DNA/RNA":["aren't"],"because Data.Map":["is","is","is","(basically"],"because I":["need","think","like","think","used","don't","thought","did","don't","don't","know","cut","don't","had","need","think","felt","don't","came","felt","have","am","was","thought","thought","there","don't","definitely","was","was","didn't"],"because I'd":["imagine"],"because I'm":["still","relatively","still","not","new","not","actually","so","not"],"because Map":["is","is","is","is"],"because V.slice":["is"],"because `&amp;&amp;`":["short"],"because `(,)":["a`"],"because `(,)`":["has"],"because `:`":["is"],"because `Int`":["is"],"because `Text`":["is"],"because `all":["f","f"],"because `all`":["returns"],"because `any`":["returns"],"because `data":["Robot"],"because `do":["expression`"],"because `either`":["forces"],"because `foldl`":["is"],"because `foldr`":["is"],"because `isAnagram`":["actually"],"because `isUpper`":["returns"],"because `l`":["isn't"],"because `length":["xs"],"because `length`":["is"],"because `lookup`":["can"],"because `n":["\u003e"],"because `primeFactors`":["seems"],"because `reverse`":["is"],"because `s'`":["depends"],"because `silence`":["covers"],"because `words":["\"\""],"because a":["list","Map"],"because all":["of"],"because anagramsFor":["is"],"because any/all":["can"],"because apparently":["they"],"because both":["sides"],"because doing":["all"],"because each":["digit","tile"],"because evaluating":["`length`"],"because everything":["else","else"],"because for":["all"],"because function":["application","application","application","application"],"because ghc":["will"],"because guards":["are"],"because here":["in"],"because higher":["order"],"because i":["did","find"],"because if":["you","it"],"because in":["doing","Haskell","this"],"because inner":["filter"],"because instead":["of"],"because isSilence":["would"],"because it":["knows","can","can","can","can","can","can","can","is","only","processes","causes","is","is","will","uses","requires","doesn't","is","doesn't","is","is","doesn't","would","will","wouldn't","let","requires","not","would","will","causes","only","needs","doesn't","turns","can","checks","builds","just","can","didn't","can't","doesn't","doesn't","rhymes","has","is","looks","makes","doesn't"],"because it'd":["allow"],"because it'll":["thread"],"because it's":["not","noticeably","the","not","too","a","not","so","already","the","a","never","necessary","easy","not","really","part","so","less","never"],"because its":["name"],"because last":["is"],"because lazy":["variant"],"because length":["will"],"because likewise":["the"],"because list":["is"],"because lists":["are"],"because multiplication":["is"],"because my":["brain","brain"],"because n":["cannot"],"because non-alphabet":["characters"],"because of":["other","symmetry","the","the","the","the","the","the","the","Haskell's","the","the","how","the","markdown","your","line","the","where","lazy","the","the","api","an","performance","the","all"],"because once":["a"],"because one":["of"],"because otherwise":["both","it","the"],"because punctuation":["is"],"because shadowing":["names"],"because some":["of","of"],"because someone":["mentioned"],"because something":["like"],"because tests":["doesn't"],"because that":["significantly"],"because that's":["just","caught","what","what's","how","just","not"],"because thay":["have"],"because the":["string","compiler","rest","result","arguments","tests","list","semantics","accumulator","function","input","constant","css","other","problems","resetName","rhs","cons","argument","latter","compiler","first","default","type","guards","test","`isSilence`","user","operation","function","expression"],"because then":["addWord","you","you","the","`rem","you","its"],"because there":["was","are"],"because there's":["another","a","no","only"],"because they":["don't","have","are","use","align"],"because they're":["just","not"],"because this":["can","forcing"],"because two":["people"],"because using":["anything"],"because we":["were","are"],"because we're":["working"],"because what":["they"],"because with":["large"],"because you":["don't","could","can't","are","can't","check","can","strict","don't","didn't","might","can","are","can","have","already","need"],"because you'll":["be"],"because you're":["not","building","checking","not","also","thinking","not"],"because your":["current"],"because, in":["the"],"because, not":["having"],"because, of":["course,"],"become a":["bit"],"become an":["issue."],"become clear":[":-)"],"become empty,":["so"],"become empty.":["What's"],"become enamored":["of"],"become hard":["to"],"become more":["familiar"],"become much":["more"],"become nested":["booleans"],"become obsolete":["if"],"become one":["liners"],"become problematic":["to"],"become simultaneously":["more"],"becomes \"never\"":[":-)"],"becomes a":["matter","bit","one-liner."],"becomes extremely":["easy"],"becomes overly":["complex."],"becomes point":["free"],"becomes slippery":["very"],"becomes unwieldy":["quickly."],"becoming a":["big"],"becoming my":["Haskell"],"becoming quite":["cryptic"],"bed, so":["here"],"beef, 1234":["pieces"],"beefed up,":["please"],"been a":["while","long","better","great","bit"],"been able":["to","to","to","to","to","to"],"been added":["as"],"been amazing":["at"],"been better":["or"],"been better,":["it"],"been calculated":["once"],"been cheaper":["in"],"been checked":["(and"],"been chided":["on"],"been constructed":["in"],"been created":["to"],"been desugared.":["You"],"been divided":["out)."],"been doing":["it","Haskell","something"],"been easier..":["oh"],"been eta":["reduced?"],"been fine.":["Most"],"been fixed":["in"],"been getting":["that"],"been great":["if"],"been implemented":["with"],"been in":["the"],"been just":["as"],"been looking":["at"],"been more":["clever"],"been nice":["to"],"been passed":["in."],"been reading":["up"],"been really":["helpful,"],"been replaced":["with"],"been shorter":["to"],"been some":["significant","pretty"],"been stuck":["on"],"been sufficient":["for"],"been taking":["a"],"been the":["only","data-structure","best"],"been thinking":["how"],"been to":["try","create","spell"],"been toying":["with"],"been trying":["to","it"],"been using":["`intercalate"],"been warned":["about"],"been written":["about,","using"],"been. (you":["are"],"beer on":["the","the","the","the"],"beer\" phrase":["it"],"beer\" up":["into"],"beer' to":["the"],"before (esp":["with"],"before -":["careless"],"before I":["submitted.","pull","fully","realised","added","started","made","really"],"before I've":["got"],"before [HLint](http://community.haskell.org/~ndm/darcs/hlint/hlint.htm)":["is"],"before `==`":["does"],"before `S":["="],"before `isShouting`":["and"],"before `replace`,":["it"],"before `transform":["|`)"],"before adding":["my"],"before and":["I"],"before any":["progress"],"before being":["passed"],"before bikeshedding":["it"],"before but":["it"],"before by":["using"],"before calling":["`isQuestion`,"],"before checking":["to"],"before cleaning":["it"],"before coming":["back"],"before converting":["the"],"before doing":["all"],"before fold,":["(```any"],"before happening":["to"],"before implement":["it"],"before inserting":["them"],"before it":["does","hits","actually","can"],"before learning":["about"],"before making":["the"],"before or":["the"],"before passing":["them"],"before question":["guard"],"before recurring":["(it"],"before shouting.":["NM"],"before solving":["the"],"before splitting":["into"],"before submitting,":["but"],"before summing":["up."],"before the":["newline","`otherwise`","end.","existing","case.","`O(n","loop","`/=`","swap,","`DeepSeq`.","recursive","definitions"],"before this":["task"],"before this?":["These"],"before using":["it."],"before writing":["the","the"],"before you":["commented,","can","tokenize.","will","```wordsBy```"],"before you've":["defined"],"before, `$`":["is"],"before, but":["it's","didn't"],"before, is":["my"],"before. I":["think"],"before. Seems":["like"],"before. So":["you","I"],"before.. oh":["well."],"beforeahead (Only":["one"],"beforehand and":["afterwards"],"beg the":["question"],"begging of":["the"],"begin every":["operation"],"begin to":["do"],"begin with":["'1'."],"begin with,":["but"],"begin with.":["The"],"beginner, so":["I"],"beginners, the":["way"],"beginning an":["then"],"beginning and":["then"],"beginning checks":["does"],"beginning of":["a","the","this","this","this","this","the","this"],"beginning with":["`'a'`"],"beginning without":["intermediate"],"beginning, there's":["no"],"beginning: `add":["="],"beginnings of":["a"],"begins with":["an"],"beguinner like":["me."],"behave at":["runtime."],"behave identically":["(with"],"behave in":["the"],"behaves like":["`First`'s"],"behaves very":["much"],"behavior (not":["usually"],"behavior depends":["not"],"behavior for":["sensible","`insertWith","`insertWith","a","everything"],"behavior in":["this"],"behavior is":["specified","correct,"],"behavior of":["`&amp;&amp;`"],"behavior probably":["stripping"],"behavior than":["`foldl'`."],"behavior that":["you"],"behavior you":["want"],"behavior, especially":["`anagram`,"],"behavior, except":["for"],"behavior. You'll":["probably"],"behavior. `!@@!@#$%%^^*&&()`":["is"],"behaviour (like":["allocate"],"behaviour of":["`incrementBalance`"],"behaviour on":["error","the"],"behaviour. It":["definitely"],"behind `isShout`,":["but"],"behind diff-lists,":["but"],"behind each":["method"],"behind it":["properly."],"behind that":["and"],"behind the":["song","scene","`Callable`","scenes","scenes.","scenes","scenes"],"behind those":["rules"],"being a":["partial","reasonable","partial","bit","non-strict","little","simple","bit","valid"],"being able":["to","to","to"],"being accessible":["as"],"being all":["that"],"being apart":["of"],"being applied":["to"],"being before":["shouting."],"being better":["than","as"],"being calculated":["twice."],"being called":["once"],"being computed":["twice..."],"being confused":["at"],"being constructed":["like","and"],"being convential;":["I'll"],"being created":["than"],"being daft":["here"],"being dubious":["when"],"being easier":["to"],"being either":["of"],"being equivalent":["in"],"being evaluated":["before"],"being exported.":["Since"],"being generated,":["little"],"being idiomatic.":["I"],"being inserted":["to"],"being insufficiently":["definitely"],"being its":["own"],"being lazy":["is"],"being least":["significant,"],"being longer":["than"],"being mapped":["yet.)"],"being more":["complex"],"being necessary.":["Thanks!"],"being oppositional;":["I"],"being partial":[":confounded:"],"being partial,":["or"],"being passed":["in).","to"],"being relatively":["concise..."],"being responded":["to."],"being returned,":["the"],"being said,":["this"],"being slightly":["slower"],"being sorted":["since"],"being stored":["in"],"being tail":["recursive)."],"being test,":["and"],"being the":["same,","1st","tail."],"being to":["check"],"being too":["specific,"],"being unsafe":["(and"],"being used":["in","infix","in","repeatedly.","to","extensively"],"being value":["strict?"],"being value-lazy.":["Changing","To"],"being value-strict":["is"],"being value-strict,":["you"],"being very":["declarative.","efficient","helpful"],"belief, brevity":["seldom"],"believe I":["didn't"],"believe a":["better"],"believe how":["long"],"believe is":["part","incorrect?"],"believe it":["should"],"believe that":["there","the","either","would"],"believe there":["is"],"believe there's":["an"],"believe this":["works.","was"],"believe you're":["correct"],"believe, needed":["them)"],"believes a":["solution"],"belong to":["the","the","it"],"belonging to":["`responseFor`.","`responseFor`."],"belonging to`":["responseFor`."],"below are":["minor,","just","just"],"below can":["be"],"below is":["2"],"below it":["at"],"below it.":["I'm"],"below the":["`where`"],"below, because":["non-alphabet"],"below? (both":["are"],"bench it":["with"],"benchmark factorising":["a"],"benchmark it":["with","if"],"benchmark or":["profile"],"benchmark the":["function."],"benchmarked this":["against"],"benchmarked with":["Criterion"],"benchmarking by":["the"],"benchmarking in":["Haskell"],"benchmarking rna/using":["map"],"benchmarking this":["with"],"benchmarking, I":["used"],"benchmarks not":["samples?"],"benchmarks though":["so"],"benchmarks to":["see"],"beneficial to":["use"],"benefit doesn't":["really"],"benefit from":["a","typing","parallelism,"],"benefit here":["other","is"],"benefit in":["using"],"benefit is":["less"],"benefit of":["guaranteeing","using","making","exception","explicit"],"benefit over":["allowing","letting"],"benefit to":["using","using","factor","doing","using","using","an","using","restricting","doing","pointfree"],"benefits are":["usually","compared"],"benefits from":["lookup"],"benefits of":["mine"],"benefits over":["version"],"benefits would":["outweigh"],"benefits you":["expect"],"benign and":["widely"],"benign so":["I"],"besides the":["fact"],"besides use":["by"],"best I":["can"],"best advantage":["in"],"best approach":["here."],"best avoided":["unless"],"best because":["it's"],"best bet,":["I"],"best binding":["name"],"best but":["it"],"best case":["is"],"best case,":["getting"],"best coverage":["of"],"best efforts":["I"],"best explanation":["of","I've"],"best fold":["to"],"best for":["clarity"],"best function":["to"],"best gotten":["rid"],"best guess":["for"],"best idea":["is"],"best if":["`c`"],"best in":["this"],"best it":["will"],"best kind":["of"],"best metric,":["is"],"best module":["to"],"best name":["probably,"],"best naming":["is"],"best not":["to","to"],"best one,":["without"],"best option":["here."],"best option,":["but"],"best place":["to"],"best possible":["solution"],"best practice":["for","to","to","to"],"best practice)":["on"],"best practice.":["I'll"],"best practices":["to"],"best predicate":["to"],"best resource":["I've","I've"],"best scenario":["to"],"best shape":["as"],"best solution":["to","I"],"best solution.":["Although"],"best thing":["to","to"],"best to":["handle","use","bind","move","use","have","explicitly","explicitly","normalize","assume","simplify","make","leave","explicitly","carry","have","use","try"],"best tool":["for"],"best way":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","I've","to","is"],"best with":["different"],"best\" algorithm,":["as"],"best. If":["you"],"best. Moving":["the"],"bet I":["should've"],"bet I've":["forgotten"],"bet there's":["a"],"bet, I":["think,"],"beter to":["use"],"better (`liftA3`":["or"],"better (a":["bit)"],"better (named)":["functions"],"better -":["list"],"better --":["thanks!"],"better abstraction":["to"],"better aesthetically.":["I"],"better algorithm":[":)","to","to","would","than","has","with","by","in"],"better algorithm,":["but"],"better algorithm.":["here"],"better algorithmic":["performance…"],"better algorithmically":["just"],"better algorithms":["exists,"],"better also.":["`slice`"],"better and":["readable","more","more","still","I've"],"better approach":["that"],"better as":["the","a","`from`","it","well,","```Data.Map.Strict```,"],"better at":["that."],"better because":["they're"],"better big":["Oh"],"better both":["valiant"],"better build":["map"],"better but":["I","anyway."],"better by":["changing","having","getting","using","using"],"better cache":["locality:"],"better can":["be"],"better candidate":["divisors."],"better choice":["for","for","than","of","here."],"better code,":["in"],"better combinators":["can"],"better complexity":["while","cost."],"better constant":["factor"],"better convey":["the","their","intention"],"better data":["structure"],"better datastructures":["can"],"better definition":["of","of","of"],"better depending":["on"],"better distribution":["in"],"better done":["using","with"],"better even":["when"],"better explanation":["of"],"better explanations":["of"],"better expressed":["as","\"long-form\"","as","as"],"better filter":["conditon?"],"better fit":["for"],"better for":["`insertDefaults`","a"],"better form":["to"],"better function":["in","to","..."],"better functionality":["for"],"better functions":["to"],"better get":["used"],"better here.":["First"],"better however,":["I"],"better idea":["for"],"better if":["there","the","it","they","it's","I","you","you"],"better in":["the","that","multithreaded","the"],"better information":["about"],"better is":["that","to","to"],"better list":["of"],"better looking":["than"],"better looking.":["Yay."],"better memory":["performance","footprint","footprint?"],"better might":["be"],"better modern":["variant"],"better module":["to"],"better my":["`invalid`"],"better name":["for","(suggestions?).","for","than","should"],"better name.":["But"],"better named":["function.","`sortedLetters`,"],"better names":["for"],"better now":["(though"],"better off":["going","the","using","doing","sorting","using"],"better on":["a"],"better optimizations":["than","with"],"better optimized":["(e.g."],"better option":["is","than"],"better or":["worse.","worse).","more","worse)","worse","not,"],"better outlines":["what"],"better performance":["out","and"],"better performance,":["you"],"better place":["to"],"better practice":["to"],"better reason":["for"],"better representation":["for"],"better separation":["of"],"better since":["`foldl`","it"],"better so":["that"],"better solution":["here","to","I","in","maybe"],"better somewhat":["better"],"better stated":["as"],"better still":["would"],"better structure":["instead"],"better style":["to","to"],"better suited":["for","to"],"better than":["my","I","`words","`last`","mine,","working","too","filtering","having","my","this","my","doing","v3","explicit","deeply-nested","this.","this","some","most","my","using","doing","`take","this.","`elem`","folding","`splitWhen`","the","`foldl'`","if-then-else.","using","having","`reverse","I","using","`48`.","leaving","`if","having","the","a","building","`mapMaybe`","`elem`","MVar","mutexes","`splitWhen`","a","a","just","split","doing","I"],"better that":["previous","string","vectors","can","if"],"better the":["intent,"],"better then":["piling"],"better this":["way."],"better time":["algorithmically,"],"better to":["not","me","me.","use","my","get","rewrite","lowercase","either","use","use","use","either","`T.pack`","use","build","leave","build","have","rewrite","retrieve","catch","just","use","have","almost","just","do","treat","define","use","use","remove","use","use","work","what's","remove","put","replace","just","write","represent","use","use","split","use","use","move","use","use","use","use","write","use","introduce","use","think","split","use","use","use","have","the","be","my"],"better tokenize":["with"],"better type":["signature"],"better type.":["(You"],"better understand":["how"],"better understanding":["of","of"],"better use":["`zipWith"],"better using":["fromListWith","`mod`","a","PM,"],"better version":["of","soon"],"better way":["to","to","to","of","to","to","to","to","of","to","to","to","around","is","to","to","to","to","to","to","to","to","to","to","to","to","would","to","to","to","to","to","to","for","to","than","to","to","to"],"better way.":["I","The"],"better way?":["I"],"better ways":["to","to"],"better when":["the"],"better with":["```isSpace```","infix","less","`fromListWith`","a","Maybe.","a","`foldl'`.","`findWithDefault`","respect"],"better word":["than"],"better would":["be","be"],"better written":["as","as","as","as","with","as","as"],"better yet":["use"],"better yet,":["just","`fromListWith`."],"better you":["could","can"],"better your":["way."],"better! Some":["possible"],"better, I":["think.","haven't","suppose"],"better, but":["`foldl'`","I","better","I'm","it"],"better, consider":["using"],"better, depending":["on"],"better, express":["the"],"better, for":["example"],"better, however":["you"],"better, instead":["of"],"better, it":["doesn't","looks","just"],"better, it's":["actually"],"better, maybe":["I'll"],"better, or":["you"],"better, smallish":["style"],"better, than":["that"],"better, though":["I","I"],"better, why":["not"],"better, you":["can","can"],"better. (for":["some"],"better. A":["more"],"better. Also":["you"],"better. An":["array"],"better. And":["in"],"better. Better":["still"],"better. But":["for"],"better. Didn't":["realize"],"better. I":["didn't","tried","might","suspect"],"better. Interpreting":["this"],"better. Is":["this"],"better. It":["probably"],"better. New":["version"],"better. Sometimes":["the"],"better. This":["exercise"],"better. Too":["much"],"better. Try":["aligning"],"better. Well,":["it"],"better. http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'":["–"],"better? It's":["shorter"],"better?) solution":["using"],"between \"x":["bottles"],"between 'A'":["and"],"between 0":["and"],"between 1":["&amp;"],"between O(1)":["and"],"between Wednesday":["and"],"between `'a'`":["and"],"between `C`":["and"],"between `IORef`":["and"],"between `error`":["and"],"between `f":["$"],"between `letters`":["and"],"between `not`":["and"],"between a":["`String`.","`tokenize`","type","type","function","variable","function"],"between benchmarks":["not"],"between calling":["`normalize`"],"between cases":["and"],"between different":["kinds"],"between numbers,":["etc."],"between partial":["application"],"between performance":["and"],"between prepending":["and"],"between push/unshift":["and"],"between really":["bugged"],"between samples":["for"],"between separate":["clauses"],"between the":["two","type","\"replace\"","List","lazy","two","response","two","Weekday","Data.Array","`Just`","way","lambda","two?","guards","words,","four","two","accumulator","indexes","regular"],"between these":["clauses"],"between this":["version","version","submission"],"between those":["types."],"between using":["`map`","the","lists"],"between variables":["and"],"between where":["and"],"between yours":["and"],"beyond my":["ken"],"beyond one":["of"],"beyond the":["next","problem"],"beyond your":["preference."],"big Oh":["we","complexity"],"big Text,":["then"],"big ```where```":["part"],"big a":["difference"],"big advantage":[":D"],"big big":["hint."],"big case":["statement."],"big deal":["to","at","since","though.","but","though.","either","either","here"],"big deal,":["since","but","but","but","just"],"big deal.":["I"],"big difference":["between"],"big difference,":["but"],"big enough":["to"],"big fan":["of","of","of","of"],"big from":["further"],"big help.":["I've"],"big hint.":["Think"],"big idea":["of"],"big input":["it"],"big inputs,":["so"],"big jump":["in","in"],"big line":["there?"],"big nested":["thunk","thing","thunk"],"big number":["of","of"],"big of":["a"],"big picture":["things,"],"big problem":["and"],"big rant":["here"],"big space":["leak."],"big stack":["of"],"big string":["of"],"big thunk":["of"],"big tradeoff":["is"],"big win":["since"],"big you'll":["use"],"big-O notation":["it"],"big-Oh complexity":["seems"],"big-Oh complexity,":["I"],"big-Oh notation":["because","into"],"big. Another":["idea"],"bigger and":["more"],"bigger problem":["that"],"bigger test":["cases,"],"bigger than":["add"],"bigger that":["head"],"bigger, you":["can"],"biggers tests":["suite"],"bikeshed comment:":["for"],"bin -":["1`?"],"bin =":["toDecimal'"],"bin` and":["not"],"binary 0\".":["I"],"binary 0s\"":[";)"],"binary 101":["(i.e."],"binary function":["could"],"binary in":["anything"],"binary number":["`1111`..","`10000","is"],"binary number,":["where"],"binary numbers":["are"],"binary operation":["is","is","is"],"binary operators":["`&lt;-`"],"binary operators?":["I'm"],"binary or":["hexadecimal"],"binary predicates":["on","will","(AKA"],"binary search":["tree."],"binary tree,":["so"],"binary trees":["and"],"binary values.":["This"],"binary will":["try"],"binary works.":["If"],"binary), 100":["is"],"binary, from":["a"],"binary, trinary,":["octal,"],"bind (`\u003e\u003e=`)":["instead"],"bind `filter":["isAlpha"],"bind `length":["xs`"],"bind `sort":["word`"],"bind `w'`":["and"],"bind but":["won't"],"bind early":["are"],"bind harder":["than"],"bind it":["as","to"],"bind or":["deconstruct."],"bind some":["of"],"bind something":["to"],"bind the":["preprocessed","various"],"bind use-case":["pretty"],"binding (in":["this"],"binding (this":["code"],"binding `_`,":["is"],"binding `letters`":["to"],"binding at":["all."],"binding called":["`aFun`"],"binding can":["be"],"binding doesn't":["really"],"binding for":["it","`filter","`x'","`xs'","`xs'","`s`","`s'","`s'","`s'","`s`","y","`n`,","it","`length","`sort"],"binding in":["`anagramsFor`","Prelude](http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:compare)","a","the"],"binding is":["often"],"binding it":["can"],"binding it,":["and"],"binding more":["tightly"],"binding name":["in"],"binding of":["the"],"binding on":["its"],"binding or":["two"],"binding signature":["if"],"binding so":["that"],"binding with":["no","no","no","no"],"binding you":["give"],"binding, and":["it"],"binding, improved":["`lastTen`"],"binding, that's":["a"],"binding, they":["can"],"binding, which":["is"],"binding, would":["I"],"bindings (`anagramsFor`":["in"],"bindings (in":["the"],"bindings `validNucleotides`,":["`invalidNucleotide`,"],"bindings any":["helper"],"bindings are":["still"],"bindings exist,":["but"],"bindings for":["`map","`first`"],"bindings from":["an"],"bindings have":["type"],"bindings in":["the","the"],"bindings indented":["by"],"bindings like":["this:"],"bindings out":["to"],"bindings really":["helps"],"bindings should":["have","have","also","have","have","have","have","have","be","have","have"],"bindings so":["that","much.","much."],"bindings such":["as"],"bindings that":["are","have","were"],"bindings to":["make","make","guarantee"],"bindings will":["have"],"bindings you":["aren't"],"bindings) instead":["of"],"bindings, and":["I","whenever"],"bindings, but":["any"],"bindings, the":["Java"],"bindings, they":["should"],"bindings. Bindings":["in"],"bindings. My":["rule"],"bindings. This":["is"],"bindings. To":["avoid"],"bindings. hlint":["would"],"binds for":["sure."],"binds stronger":["than"],"binds tighter":["than","than"],"binds to":["the"],"binomial coefficients":["(`choose"],"biological term":["would"],"biologist will":["change"],"biology. I":["propose"],"birds with":["one"],"bit -\u003e":["2"],"bit I":["was"],"bit about":["what","the"],"bit ambiguous":["as"],"bit and":["will"],"bit annoying":["to"],"bit annoying.":["I'll"],"bit arithmetic":["or"],"bit awkward":["because","when"],"bit better":["now.","than","if","to","than","than"],"bit better,":["I"],"bit big.":["Another"],"bit by":["making","removing","writing","extracting","doing","having"],"bit cleaner":["with","and","to","and","than","if","too."],"bit cleaner,":["but"],"bit cleaner.":["I","Similarly"],"bit clearer":["to"],"bit clearer:":["http://stackoverflow.com/questions/19958897/return-whats-going-on-here/19959139?noredirect=1#19959139"],"bit clever":["but"],"bit closer,":["and"],"bit closer...":["to"],"bit clunky":["and","and"],"bit complicated,":["can"],"bit confused":["when","by"],"bit confusing":["to","visually,","naming"],"bit confusion,":["but"],"bit dense":["and"],"bit differently":["to"],"bit disappointed":["that"],"bit disorganized.":["Have"],"bit due":["to"],"bit easier":["to","to","to","to","that","to"],"bit excessive":[":-)"],"bit excessive?":["If"],"bit excessively":["decomposed,"],"bit faster":["would","too,","than"],"bit for":["other","example"],"bit from":["the"],"bit fugly,":["but"],"bit further":["down"],"bit further.":["I"],"bit fuzzy":["about"],"bit hard":["on"],"bit higher":["level."],"bit if":["you're","you","you"],"bit illegible":["but"],"bit inconsistent":["(just"],"bit inefficient":["if"],"bit inelegant":["-"],"bit laying":["out"],"bit less":["noise.","tortuous","boilerplate","code","whitespace","verbose","code","code","code","syntax","code"],"bit level":["makes"],"bit level,":["instead"],"bit like":["`map","cheating."],"bit long":["so"],"bit longer":["but","than","but"],"bit longer,":["but"],"bit longer.":["If"],"bit messy":["as","to"],"bit more":["self-documenting","readable","efficient.","obvious","obvious","concise","general","substantial","closely!","readable:","efficient","elegant","explicit","idiomatically.","efficient","common","obvious","if","why","about","detail","programatic,","common","clear","about","common","hand-holding","simply","common","on","(particularly","straightforward.","common.","with","simply","commonly","efficient","common","efficiently","common","common","common","try","idiomatic","of","practical","readable.","of","subtle,","general","natural","complicated","complicated.","clear","common"],"bit more.":["Not"],"bit more..":["elegant"],"bit much":["and"],"bit n":["-"],"bit nervous":["that"],"bit nicer":["than","if","to","as","than","if","since"],"bit nicer,":["and"],"bit nicer.":["Anyway"],"bit odd":["that","to"],"bit odd,":["most","it"],"bit of":["research","overkill","refactoring,","syntactic","clarity,","over","code","state.","a","elegance","Haskell","stretch","duplication","precedent","boilerplate","code","refactoring","legibility.","a","algebra","complexity,","a","experience","a","efficiency","algebra","repetition","redundancy","code","code.","this","verbosity","code","error","a","overkill","a","a"],"bit off":["the"],"bit opaque,":["but"],"bit operations":["can"],"bit over":["the","my"],"bit overboard":["for"],"bit overcomplicated,":["there"],"bit overkill":["here.","for"],"bit overkill,":["you"],"bit random,":["I"],"bit redundant":["to"],"bit redundant,":["since"],"bit restriction":["is"],"bit ridiculous)":["idea"],"bit shifting,":["consider"],"bit shorter":["for","and","but","with","and","if","using","than","using"],"bit shorter,":["as"],"bit shorter.":["For"],"bit silly":["about"],"bit simpler":["than","(no","and","by","using","(avoiding","as","by","and","as","and","for","if","in","without"],"bit simpler,":["but","although","as"],"bit simplistic,":["does"],"bit sloppy":["in"],"bit slower":["in"],"bit so":["they're","it"],"bit split":["on"],"bit strange":["but","looking,"],"bit strange,":["it"],"bit strange.":["The"],"bit stuck":["there"],"bit suboptimal":["because"],"bit technical":["for"],"bit tighter":["too."],"bit to":["find"],"bit too":["far","complicated","obscure.","verbose","subtle.","complicated","cute","specific"],"bit too),":["but"],"bit tricky":["and"],"bit ugly":["to","and"],"bit ugly...":["functions"],"bit using":["`mod`."],"bit wary":["of"],"bit weird":["to","on"],"bit when":["I'll"],"bit with":["it.","this"],"bit wonky.":["You're"],"bit worse":["Data.Map"],"bit you":["wouldn't"],"bit, I":["don't","see"],"bit, as":["`ord"],"bit, both":["in"],"bit, but":["then","the"],"bit, especially":["that"],"bit, maybe":["to"],"bit, since":["`(,0)`"],"bit-shifting, as":["I'm"],"bit. All":["in"],"bit. Also":["very"],"bit. Getting":["rid"],"bit. Here's":["a"],"bit. I":["would","read"],"bit. I'm":["also"],"bit. IRL":["it"],"bit. There":["is"],"bit. You":["really","don't"],"bit? (EDIT:":["Or"],"bit`. It's":["a"],"bite me,":["though."],"bitmasks would":["be"],"bits (in":["binary),"],"bits -":["I"],"bits if":["you"],"bits of":["my"],"bits that":["will"],"bitset may":["be"],"bitten by":["needing"],"bitty conditional":["logic?"],"bitwise I'm":["going"],"blah no":["matter"],"blank Char":["so"],"blank Chars":["in"],"blank characters":["than"],"blank check":["would"],"blank lines":["look"],"blank tiles":["worth"],"blank to":["something"],"blanket rules":["to"],"blanket rules,":["that's"],"blast writing":["this."],"blew my":["mind","mind."],"blew up":["on"],"blinded by":["the"],"blinding me":["to"],"blithely fmap'd":["over"],"block and":["just","see","see","then"],"block exits":["without"],"block in":["`reponseFor`.","case"],"block inside":["responseFor."],"block operations":["but"],"block short-circuits":["and"],"block when":["full."],"block, and":["actually"],"block, if":["you"],"block, that":["interleaving"],"block. But":["then,"],"block. I":["tend"],"block. If":["not,"],"block. You":["could"],"blocked indefinitely\"":["errors"],"blocked operations":["like"],"blocked, so":["you'll"],"blocking operation":["that"],"blocks I":["was"],"blocks for":["any"],"blocks of":["text"],"blow up":["if","messageResponse,","on"],"blowing people":["off,"],"blown :D!":["thank"],"board as":["a"],"board of":["n"],"boardString is":["super"],"boat, @brielle.":["I'm"],"boat, too":[":)"],"bob_test.hs looks":["like"],"bob_test.hs` and":["I"],"body by":["2"],"body isn't":["indented"],"body of":["the","the","the","the","`transcribe`","`convert`","`case`","your"],"body so":["much."],"bogus .":["parseNumber`"],"bogus DNA.":["Hard"],"bogus input":["(such"],"boilerplate and":["the"],"boilerplate code":["that"],"boilerplate for":["you,","you.","the","converting"],"boilerplate here":["if"],"boilerplate if":["you"],"boilerplate in":["`turnLeft`","my"],"boilerplate of":["defining"],"boilerplate than":["a"],"boilerplates from":["your"],"bonus points":["in"],"bonus points,":["but","you","you"],"bonus points.":["I"],"bonus points:":["```anagramsFor"],"book (actually":["need"],"book Parallel":["and","and"],"book about":["WHNF"],"book may":["be"],"book myself,":["@melany."],"book obfuscates":["the"],"book or":["webpage"],"book recommendation":["by"],"book that":["I"],"book uses":["Node"],"book which":["explains"],"book you":["suggested."],"book, also":["Simon"],"book, really":["just"],"book; it":["looks"],"books have":["been"],"bool and":["if"],"bool equivalent":["of"],"bool operators":["vs"],"bool to":["int"],"boolean constructors":["as"],"boolean expression":["rather"],"boolean expressions":["rather"],"boolean for":["you."],"boolean formulas":["with"],"boolean functions":["rather"],"boolean logic":["inline?","with","one.","version."],"boolean logical":["operators"],"boolean operator":["into","into","(`::","to","to"],"boolean to":["Int."],"boolean, since":["you"],"booleans evaluated":["by"],"booleans for":["counting)."],"booleans to":["integers"],"booleans, you":["can"],"bools, and":["then"],"bools, ints":["..etc"],"bools. Start":["by"],"boot them":["up,","up,"],"boot! I":["guess"],"boring challenge":["so"],"both $":["Just","Just"],"both (a)":["the"],"both 100":["and"],"both DNA":["and"],"both IO":["and"],"both O(n),":["unless"],"both RNA":["and"],"both ```unwords```":["and"],"both `digitToInt`":["and"],"both `fmap`":["and"],"both `isAsciiUpper`":["and"],"both `isEmpty`":["and"],"both `isLower`":["and"],"both `left":["g`"],"both `mkRobot`":["and"],"both `namePrefix`":["and"],"both `null`":["and"],"both `resetName":["(Robot"],"both `toList":["h"],"both active":["at","at"],"both add":["a"],"both and":["use","applying"],"both are":["*O(n*","aliases","clear"],"both as":["a","a"],"both ascending":["or"],"both at":["the"],"both be":["upper"],"both because":["of"],"both better":["convey"],"both calls":["to"],"both cases":["a"],"both cases.":["Either"],"both character":["classes."],"both computed":["directly,"],"both confusing":["and"],"both covered":["in"],"both easier":["and"],"both end,":["that"],"both ends":["and"],"both equations":["and","you"],"both for":["the"],"both forms":["(with"],"both functional":["programming"],"both functions":["are"],"both functions,":["and"],"both good":["names!"],"both have":["the"],"both in":["the","the","your","terms"],"both inner":["functions"],"both input":["and"],"both interpretations":["as"],"both isUpper":["and","and"],"both its":["definition"],"both jobs":["in"],"both just":["a"],"both lazy":["and"],"both list":["comprehensions"],"both lower":["case"],"both modules":["(although"],"both more":["complex"],"both nitpicks":["into"],"both of":["them","these","you!","them","you!","you","these.","you","them","those","these"],"both ones":["used"],"both ors":["and"],"both parts":["is","with"],"both points!":["isExclamation"],"both predicates":["in"],"both produce":["the"],"both re-export":["it"],"both right":["and"],"both sanitation":["of"],"both sides":["were","just","and","of","you","of","of","of","of","of","of","of","of"],"both sides)":["and"],"both sides,":["it"],"both sides.":["Especially"],"both simpler":["and"],"both smaller":["in"],"both solutions":["O(n"],"both structures":["(README"],"both take":["and"],"both the":["initializing","initialization","tests","error","presorted","previous","School","first","mapping"],"both these":["functions"],"both threads":["are"],"both try":["to"],"both unnecessary":["and"],"both valiant":["covering"],"both versions":["I","passed"],"both ways":["due"],"both ways,":["although"],"both when":["you're"],"both with":["a"],"both words":["on","at"],"both words?":["See"],"both work":["and"],"both, but":["decided"],"both. But":["I"],"bother commenting":["on"],"bother implementing":["a"],"bother reading":["the"],"bother to":["try"],"bother using":["them"],"bother with":["the","factorization?","`atomically`.","error","`span`"],"bother you,":["you","will"],"bothered by":["line"],"bothered to":["explicitly"],"bothered, compiler":["can"],"bothering exposing":["`School`."],"bothers me":["a"],"bothers to":["lowercase"],"bottle /":["no"],"bottleneck since":["it"],"bottleneck, and":["thanks"],"bottler to":["save"],"bottler. Ah,":["I'll"],"bottles /":["x"],"bottles n,":["...]`"],"bottles of":["beer","beer.\\nGo\\","beer","beer\""],"bottles\" in":["the"],"bottles\" instead":["of"],"bottles\". Do":["you"],"bottles, I":["could"],"bottom (⊥)":["such"],"bottom behavior":["(not"],"bottom like":["`undefined`"],"bottom of":["the"],"bottom that":["shows"],"bottom to":["handle"],"bottom-left then":["top-right","top-right"],"bounce between":["the"],"bound (and":["a"],"bound (regardless":["of"],"bound `length":["digits`"],"bound at":["Bob.hs:8:14","Bob.hs:8:16","Bob.hs:8:16","Bob.hs:5:13","Bob.hs:5:13","Bob.hs:5:13"],"bound for":["the"],"bound on":["their"],"bound to":["`(.:)`.","call"],"boundaries (i.e.":["is"],"boundaries this":["is"],"boundary that":["those"],"bounded by":["a","a"],"bounds first":["to"],"bounds of":["Float."],"box on":["this"],"box, and":["no-one"],"box. Once":["you"],"boxing &":["unboxing."],"boxing, but":["it"],"boy... this":["one"],"braces and":["semicolons..."],"braces, try":["running"],"brackets --":["for"],"brackets I":["feel"],"brackets and":["mixtures"],"brackets around":["`sort"],"brackets in":["shouting","the","pattern"],"brackets on":["line","line","line","lines","line"],"brackets so:":["redundant"],"brackets, I":["do"],"brackets, either":["have"],"brackets, making":["rewrite"],"brackets, so":["here's","we"],"brain is":["not"],"brain stops":["working"],"brain was":["stuck"],"brain works.":["Like"],"brain would":["have"],"brakets, less":["indetation."],"branch and":["I"],"branches could":["then"],"branches instead":["of"],"brand new":["to","for"],"breadth of":["experience"],"break away":["from"],"break conventions":["which"],"break cycle":["by","by"],"break down":["quickly"],"break from":["exercism"],"break it":["into","on"],"break line":["after"],"break other":["modules"],"break pred":["s'`."],"break reject":["s''"],"break string":["with"],"break the":["tests","readability"],"break things":["up"],"break up":["wordCount"],"break values":["into"],"break. Otherwise":["it"],"breaking any":["laws."],"breaking each":["words"],"breaking if":["two"],"breaking some":["of"],"breaking the":["API"],"breaking those":["rules"],"breaking up":["long","the"],"breaking. I":["could"],"breaks in":["lines"],"breaks it":["into"],"breaks on":["empty"],"breaks out":["the"],"breeds a":["habit"],"brevity seldom":["equals"],"briefer way":["to"],"briefly described":["how"],"brilliant! Thanks":["a"],"brilliant. Of":["_course_"],"bring in":["```union```","everything"],"bring it":["up"],"bring out":["a"],"bring to":["mind"],"bringing big-Oh":["notation"],"brings back":["something"],"brings you":["up"],"broad. If":["the"],"broader range":["of"],"broke it":["apart"],"broken solution":["so"],"broken, and":["\"error\""],"browse the":["contents"],"brushing up":["on"],"brute force":["this","it","way."],"brute-force implementations.":["Pattern"],"bs $!":["n"],"bs =":["bs","a","length","acc","length"],"bs)`. An":["equivalent"],"bs` (function":["application"],"bst by":["bstValue,"],"bstLeft ::":["Maybe","Maybe"],"bstLeft, this":["will"],"bstRight ::":["Maybe","Maybe"],"bstRight and":["bstLeft,"],"bstValue ::":["a","a"],"bstValue, bstRight":["and"],"btw), which":["looks"],"btw, would":["you"],"bug in":["my","the"],"bug me":["that"],"bug. I":["have"],"bugged me,":["but"],"bugger, ```Data.String.Utils.replace```":["must"],"bugging me":["now"],"buggy :":["it"],"buggy if":["I"],"buggy. There":["are"],"buggy: for":["string"],"bugs in":["how"],"bugs me":["the"],"bugs me,":["actually."],"build (\\c":["n","n"],"build *is*":["thunks."],"build Map":["iteratively","from"],"build `(=~)`":["with"],"build `nucleotideCounts`":["without"],"build `scoreTable`":["at"],"build `slices'`":["such"],"build a":["map","map","better","map,","more","map,","parser","map,","map,","map,","map,","Map,","map:","map.","map","Map","call-stack","new","map","Map","simpler","Map.","Map,","Map,","spine-lazy","counter,","Map","Map","Map,","map,","constant","look-up","Map,","Map.","Map,","list","list","list","Map,","list","list"],"build all":["list,"],"build an":["efficient"],"build full":["list."],"build intermediate":["list."],"build it":["and","again,"],"build map":["in","with","with"],"build map,":["you"],"build meaningful":["transaction"],"build my":["tree"],"build score":["map"],"build some":["sort"],"build strings.":["There's"],"build successfully":["last"],"build that":["Map."],"build the":["pairs","result","prettyPrinted","counts","word","Map,","map.","map","digits","map.","map,","map","Map,","output","map):","Map,","map.","filter","map,","Map","map","first","array.","array","table.","values"],"build this":["Map","big","Map"],"build tying":["the","the"],"build unless":["they"],"build up":["thunks.","the","N","a","a","a","a","a","a","a","a","the","the","a","a","a","thunks","a","a","a"],"build values,":["instead"],"build's unfolding)":["else","else"],"build-up inside":["the"],"build-up of":["thunks,"],"builder is":["a"],"builders that":["allowes","will"],"building a":["Set","new","big","spine-strict","result","lookup","Day","`map`","frequency","Map","closure"],"building an":["entire"],"building any":["lists,"],"building conditions":["at"],"building it":["with"],"building nested":["thunks"],"building of":["the","the"],"building the":["word","Map.","Map","result"],"building thunks":["in"],"building up":["a","a","a","the","isn't","a","a","thunks","a","a"],"building up.":["You"],"building using":["functions"],"builds a":["big","stack"],"builds another,":["and"],"builds more":["intermediate"],"builds up":["bunches","that"],"buildup of":["thunks,"],"built a":["list"],"built in":["trim","library","functions","function."],"built in,":["so"],"built instead":["of"],"built is":["a"],"built it":["with"],"built list.":["But"],"built my":["own"],"built the":["list"],"built with":["Data.List.Split's"],"built-in \"guards\"":["capability.)"],"built-in date":["math."],"built-in for":["Ordering,"],"built-in functions":["with"],"built-in functions),":["Data.Char,"],"built-in list":["processing"],"built-in ones":["are"],"built-in thing,":["it's"],"built-in to":["the","Prelude"],"built-in way":["to"],"builtin way":["from"],"builtins from":["the"],"bunch I":["think."],"bunch for":["your"],"bunch of":["people","strings","garbage","little","guards,","thunks","functions","simple","empty","useless","different","study"],"bunch overall":["since"],"bunch. That":["makes"],"bunches of":["lazy"],"burden by":["making"],"burdened with":["lowercasing"],"burner for":["awhile"],"buses might":["not"],"business altogether":["(since"],"business; indeed":["I"],"busy (though":["not"],"busy work,":["hence"],"but \"last\"":["just"],"but 'X'":["isn't."],"but 1).":["There"],"but @leonora":["comes"],"but Char":["also"],"but Data.List.Split":["is"],"but Data.Map":["uses"],"but Data.Map.Strict":["guarantees","wasn't"],"but FYI:":["since"],"but GHC":["with"],"but Haskell":["works"],"but Haskell's":["try/catch"],"but I":["haven't","urge","assume","cannot","did","couldn't","think","really","thought","fell","can't","think","think","factored","haven't","thought","think","tried","don't","don't","missed","generally","couldn't","like","think","think","figured","feel","find","guess","wonder","disliked","think","suspect","was","couldn't","don't","think","hear","am","think","have","think","think","think","suppose","was","am","agree","don't","changed","liked","try","still","didn't","decided","can't","learned","would","didn't","don't","suppose","think","left","do","decided","suppose","am","don't","think","feel","can't","couldn't","really","feel","just","do","think","cannot","didn't","feel","think","felt","will","understand","don't","might","think","don't","have","think","couldn't","thought","don't","prefer","suppose","was","think","think","couldn't","think","think","still","wasn't","submitted","can't","am","could","got","don't","assumed","can't","was","think","suppose","don't","decided","understand","don't","can't","can","chose","tend","do","forgot","was","still","couldn't","feel","can't","sort","can't","somehow","did","haven't","think","couldn't","think","guess","couldn't","have","won't","suspect","thought","support","didn't","think","wanted","resisted","find","expect","suspect","feel","can't","found","missed","tend","think","wrote","don't","already","feel","just","do","couldn't","don't","couldn't","thought","thought","could","think","really","felt","am","am","assume","don't","just","think","like","think","wasn't","don't","expect","know","had","didn't","couldn't","think","think","don't","could","had","had","still","have","usually","haven't","am","understand","don't","think","am","doubt","think","really","still","don't","think","like","think","can't","wouldn't","added","decided","would","haven't","can't","also","just","think"],"but I'd":["suggest","use"],"but I'll":["go","try","tweak","give","pass"],"but I'm":["sure,","having","not","a","not","concerned","not","not","wondering","not","still","thinking","not","completely","not","not","not","not","not","not","actually","not","still","not","not","pretty","sure","still","failing","sure","gonna","now","not","not","not","sure"],"but I've":["only","used"],"but IIRC":["they're"],"but IMHO":["`count"],"but Int":["is"],"but It":["is"],"but O(log(n))":["is"],"but Parallel":["and"],"but Software":["Transactional"],"but String":["is"],"but Teenth":["and"],"but TupleSections":["is"],"but `==`":["implies"],"but `Int`":["is"],"but `Just":["x"],"but `Prelude`":["also"],"but `a`":["has"],"but `all`":["is"],"but `areaCode":["Nothing`"],"but `bifunctors`":["isn't"],"but `f`,":["`x`,"],"but `fail`":["will"],"but `fmap":["sort`"],"but `foldl'`":["is","or"],"but `foldl`":["and"],"but `fromListWith`":["from","has","works"],"but `go`":["looks"],"but `insertWith`":["looks"],"but `intercalate":["\"\\n\""],"but `isNumber`":["and"],"but `isQuestion`":["becomes"],"but `liftA2`":["brings"],"but `normalizeWords`":["got"],"but `not":["."],"but `responseFor`":["does"],"but `sing`":["is","looks"],"but `testBit`":["could"],"but `zipWith":["id`"],"but a":["little","bit","wrapper","different","very","strict","list","question","function","ton"],"but after":["optimizations","changing"],"but all":["else","of","functions"],"but allUpper":["doesn't"],"but also":["shorter.","takes","whether","nice:)","a"],"but always":["forces","get"],"but am":["I"],"but an":["api","extra","explicit"],"but any":["way","way"],"but apparently":["\"The","I"],"but are":["not","not"],"but argument":["names"],"but as":["I","far","optional"],"but avoid":["the"],"but because":["you're","of","that's","tests","the"],"but before":["I"],"but being":["a","value-strict"],"but better":["still","memory"],"but boring":["challenge"],"but broke":["it"],"but but":["this"],"but can":["you","you","you"],"but can't":["seem","deal"],"but clearly":["it"],"but comments":["on"],"but complex":["for"],"but conversion":["to"],"but could":["you","not","not"],"but couldn't":["think","come","work","get","figure","think","come"],"but current":["aproach"],"but decided":["to","on","not","it","against"],"but definitely":["a","should","good"],"but did":["it","you","not"],"but didn't":["test,","know","realize","succeed,","know","have","bother"],"but different":["`x1"],"but do":["not","you","you"],"but doesn't":["change"],"but doing":["`f","\u003cpre\u003e400"],"but don't":["quote","bother"],"but due":["to"],"but earlier":["versions"],"but easier":["than"],"but either":["way","is"],"but ended":["up"],"but error":["handling"],"but especially":["all"],"but even":["though"],"but every":["time","time"],"but everything":["else","else","here","else","else","else","else","else"],"but expresses":["the"],"but failed":["to"],"but faster).":["`fromListWith`"],"but feel":["it","that,","like","free"],"but figured":["out"],"but following":["previous"],"but for":["non-matches","such","sufficiently","this","this","now,","the","the","reasons","functions","an","some","bogus","strict"],"but forces":["it's"],"but forcing":["the"],"but forgot":["to"],"but forgot,":["so"],"but from":["what"],"but function":["forces"],"but generally":["speaking"],"but generates":["it"],"but ghci":["doesn't.)","doesn't."],"but glad":["to"],"but good":["to"],"but got":["weird","baffled"],"but got:":["[(2,[\"Paul\",\"Blair\",\"James\"])]`","\"Woah,","\"Woah,","\"Woah,","\"msemoa"],"but guarantees":["that"],"but had":["some"],"but handle":["the"],"but haskell's":["libraries"],"but haskell.":["Added"],"but have":["no","you"],"but haven't":["really"],"but here":["it","they","it","I","it"],"but how":["do","can","does","that"],"but i":["guess","hoped","dislike","prefer","always","think","cant"],"but i've":["had"],"but if":["that","you","I","you","it's","we're","you","there","you","it","that's","not","you","you","I","it","you"],"but ignoring":["such"],"but implementation":["of"],"but in":["this","general","general,","Haskell","GHC","this","this","`robotNamePattern`","the","the","general","practice","each","most","this","order","this","presence","the","my"],"but indicate":["precedence"],"but inlining":["it"],"but intermediate":["actions"],"but is":["that","likely","there","easier"],"but it":["is","requires","seems","is","matches","failed","was","doesn't","does","seems","introduces","looks","does.","does","is","may","makes","still","doesn't","looks","might","seems","is","all","seems","seemed","will","might","doesn't","isn't","does","will","is","doesn't","looks","pushes","wouldn't","seems","is","definitely","doesn't","lives","was","causes","could","works.","worked.","does","might","feels","might","sometimes","would","works.","could","looks","shadows","would","wasn't","breeds","makes","might","also","still","was","is","feels","would","prevents","certainly","can","usually","hadn't","should","seems","can","probably","deals","allocates","can","does","does","will","may","does","is","forces","will","seems","may","must","has","seems","doesn't","only","just","looks","seems","would","was","is","was","seems","reads","might","helped","seems"],"but it'd":["be","be"],"but it'll":["translate"],"but it's":["definitely","in","not","a","not","not","not","not","easy","nice","easier","not","better","your","not","not","a","good","commonly","not","more","still","much","useful","not","not","just","not","more","just","inlined).","done","much","good","not","not","probably","standard","a","not","equally","sometimes","a","definitely","worth","rather","only","immediately","very","probably","not","not","a","nice","a","a","easier","given","not","ok.","enough","gruesome","not","good","not","not","possible","getting","still","need","hard","good","very","not","probably","probably","also","rather","not","not","not","clear"],"but its":["something","quite","not","better","easier","possible","not"],"but just":["ignored"],"but kept":["the"],"but kind":["of"],"but lazy":["semantics"],"but leaving":["it"],"but less":["legible.","powerful"],"but let":["me"],"but lets":["you","check."],"but limited":["to"],"but looking":["at"],"but looks":["fine","good","good.","good.","fine.","great","great","good","good","good"],"but loose":["compiler"],"but make":["no"],"but makes":["it","me"],"but many":["people"],"but map,":["filter,"],"but marginally":["so"],"but maybe":["you","you","knowing","`Text.Printf`","that's","I'm","`\"|123|"],"but might":["it"],"but missed":["on"],"but more":["concise","succinctly.","robust","general)."],"but most":["certainly","importantly,","solutions","Haskell","of","Haskell","people"],"but move":["it"],"but my":["focus","preference","thought","maths","installation","installation"],"but negligible":["for"],"but neither":["is"],"but nevertheless":["here's"],"but nice":["and"],"but no":["runtime","other"],"but nobody":["does"],"but normal":["spaces."],"but not":["using","often.","in","too","a","sure","equal\"","equal\".","in","actual","often)","used:","to","if","found","necessarily","for","in","less","sure","be","so","in","sure","exported.","`responseFor`.","sure","sure","yet","both.","optimal","here.","on","in","interpreter.","very","performant","so","with"],"but nothing":["wrong","wrong","in"],"but now":["I","that","I'm","my","it","it","it","the"],"but obviously":["not","the","this","`map`"],"but of":["course"],"but oh":["well..."],"but on":["the","the","the","a","the"],"but once":["you","the"],"but one":["thing","test"],"but only":["the","with","if","with"],"but optimizations":["aren't"],"but other":["than","than"],"but others":["seem"],"but otherwise":["this","it's","looks","this","this","it","you","everything","this","I","looks","this","everything","everything"],"but our":["robot"],"but outside":["it"],"but people":["kept"],"but perhaps":["I"],"but personally":["I"],"but please":["try","not"],"but prepending":["2"],"but probably":["for","not"],"but problem":["still"],"but pulling":["in"],"but quirks":["of"],"but quite":["a"],"but ran":["into"],"but rarely":["`getBalance`.~~"],"but rather":["is","on"],"but really":["you","you"],"but refactored":["it"],"but reject":["things"],"but relations":["(`::a"],"but restricted":["to"],"but results":["were"],"but seemed":["reasonable."],"but seems":["more","inefficient.","that"],"but short":["predicates"],"but short-circuiting":["isn't"],"but short.":["Int"],"but should":["not"],"but similarly":["you"],"but simply":["wouldn't"],"but since":["that'd","the","you","you","looking"],"but solution":["that"],"but some":["cases","projects"],"but something's":["only"],"but sometimes":["it's","it's"],"but still":["keep","introduces","always","descriptive).","based",":-)"],"but still,":["I"],"but still.":["The"],"but string":["munging"],"but sum":["of"],"but surely":["there"],"but switched":["to"],"but take":["a"],"but thanks":["for","for"],"but that":["test","adds","didn't","doesn't","gets","feels","doesn't","makes","seems","does","didn't","requires","only","requires","simply","might","seems","might","turned","is","would","ended","requires"],"but that's":["what","ok.","not","a","hardly","the","only","probably","just","a","more","personal","matter","GHC","a","not","just","about","not","not","done","not","a","very","about","basically","not","just"],"but the":["solution","first","responseFor","alignment","prepare","name","former","spec","introspection","issue","association-list","naming","correct","`unsubmit`","condition","first","code","functions","better","implementations","space","problem","functions","regex","problem","idioms","idioms","implementation","casing","compiler","parens","compiler","other","return","return","condition","unit","performance","problem","result","code","advice","meaning","stack","list","algorithm","implementations","tests","above","tiniest","other","iterative","work","performance","answer","functions","effect","compiler","second","value","type","tests","fully","optimizer","problem","required"],"but their":["syntax"],"but then":["again","again,","I","changed","I","you","it","update","it","I","I","again","switched","kind","again","defining","all","you","I","found"],"but there":["is","is","are","is","is","are","might","are","are","is","are","is","appears"],"but there's":["a","not","nothing","nothing","not","at","no","probably","nothing","nothing","no","not","nothing","no","no","a","a"],"but these":["constant"],"but they":["are","appear","seem","are","may","are","seem"],"but they'd":["be"],"but they're":["quite","so","functionally","really"],"but think":["about"],"but this":["is","is","looks","looks","looks","looks","looks","is","looks","is","looks","looks","looks","is","looks","is","is","is","looks","looks","approach","is","is","looks","is","is","version","looks","seems","becomes","fails","looks","is","looks","is","looks","point-free","looks","is","is","is","looks","looks","looks","is","looks","looks","looks","is","is","looks","is","looks","is","still","seemed","kind","looks","doesn't","looks","looks","is","looks","is","might","seems","is","exercise","is","is","will","solution","one","is","was","looks"],"but those":["are"],"but thought":["that"],"but time":["to"],"but to":["me","do","parse","me","me"],"but took":["them"],"but try":["to","to","running:"],"but two":["blank"],"but typical":["Haskell"],"but ultimately":["I","is"],"but unfortunately":["multiset","the"],"but unlikely).":["Almost"],"but unsure":["of"],"but use":["`fromListWith`"],"but using":["`foldr`","a","`all`","guards","this","`all`","lists","`||`"],"but usually":["it's","the"],"but value":["strictness"],"but want":["to"],"but was":["then","lazy"],"but wasn't":["sure","sure"],"but we":["are","know"],"but well…":["it"],"but what":["about","fun","if","exactly","I","if","about","do","purpose"],"but what's":["the"],"but when":["I","it's"],"but where":["should"],"but why":["not...","`assocs`","take","did","not","generate","are","restrict"],"but wildcard":["that"],"but will":["generate","make","map","be"],"but with":["something","strings","similar","this","the","some","Map","optimizations","a","another"],"but won't":["give","pass"],"but would":["be","be"],"but wouldn't":["it"],"but yeah,":["it's"],"but you":["can","should","could","could","only","can","only","can","could","shouldn't","can","could","might","still","could","need","can","can","should","can","could","should","could","need","don't","should","should","could","may","can","get","can","may","don't","should","can","are","seem","didn't","can","avoid","can","should"],"but you're":["right","right.","right"],"but your":["code","code","`nucleotideCounts`","pointers"],"but, as":["long"],"but... both":["are"],"but... meh.":["The"],"buts that's":["just"],"button right":["above"],"button. I've":["seen"],"button. My":["understanding"],"buttons. I":["hit"],"buy some":["more,"],"buy that":["argument"],"buy you":["any","very"],"buying me":["anything"],"buys you":["much"],"by \"Silly":["quoting"],"by \"decimal\"":["they"],"by \"equivalent\"":["and","and"],"by \"function":["combination"],"by \"isQuestion":["x"],"by 's')":["are"],"by *isAnagram*,":["what"],"by -2?\"":["$"],"by 10":["to","gets"],"by 100":["and"],"by 1600.":["The"],"by 2":["(or","for","spaces.","spaces,","or","spaces"],"by 2,":["but","it's"],"by 2:":["you"],"by 3":["3"],"by 3,":["but","5"],"by 4":["spaces."],"by 400":["but","then"],"by 8":["spaces."],"by @leonie,":["which"],"by @leta.":["I"],"by @rodger":["in"],"by @rodger.":["However"],"by Chris":["Okasaki"],"by Conor":["McBride:"],"by Data.Map":["not"],"by Don":["Stewart."],"by GC,":["so"],"by List":["functions?"],"by Okasaki),":["i.e."],"by [right":["identity](http://www.haskell.org/haskellwiki/Monad_laws)"],"by `(!)`":["and"],"by `(,)`":["(which"],"by `Data.Map`,":["I"],"by `Just":["_`"],"by ```endsWith```":["thus"],"by `ghci":["file.hs`"],"by `k`":["as"],"by `lowerA":["=="],"by `modifyMVar`,":["`resetName`"],"by `nucleotide'":["_"],"by `silence`":["first."],"by `toRNA`,":["you"],"by a":["level.","previous","multiplication","bit","case","space.","series","function","constant","'sum","space,","list","single","space","series","computer","user","small","little"],"by accident":["since"],"by accident?":["I"],"by adding":["the"],"by all":["the"],"by an":["operator's","order"],"by another":["one?","one,","thread."],"by any":["operator.","stretch","operator.","operator.","operator.","operator.","operator,","operator.","operator.","chance?","operator","test"],"by applying":["```flip```"],"by associativity":["or"],"by at":["least"],"by both":["100"],"by breaking":["those"],"by bstValue,":["bstRight"],"by building":["a"],"by case":["basis."],"by cases":["for"],"by changing":["the","the","the","your","prep","the"],"by checking":["if","only","only"],"by clicking":["that","the"],"by column,":["so"],"by combining":["the"],"by comparing":["the"],"by compiling":["with"],"by composing":["`not`"],"by constant":["factor"],"by convention.":["It"],"by deciding":["what"],"by default":["is","so","but","exports"],"by default.":["I","So"],"by defining":["a","it","the","BST"],"by delimiters.":["Also,"],"by depends":["on"],"by doing":["these","something","something"],"by dropping":["the"],"by early":["breaking"],"by either":["making"],"by enabling":["the"],"by encoding":["them"],"by eta":["reducing","reducing"],"by exhaustively":["checking"],"by expressing":["intent","intent","its"],"by extracting":["out"],"by first":["going","going"],"by floating":["the"],"by forcing":["the"],"by forgetting":["to"],"by four":["spaces."],"by gc":["and"],"by getting":["rid","rid"],"by going":["through"],"by google'd":["everything"],"by halves":[":p"],"by hand":["in"],"by hand,":["they"],"by hand.":["I","This","It"],"by handling":["these"],"by haskell..":["I"],"by having":["a","`length","the","decent","`sort","a"],"by hlint":["but"],"by implementing":["a","`nucleotideCounts`"],"by importing":["Data.Map.Strict","Data.Map.Strict","from","from","just","Strict"],"by interpolating":["pupil"],"by introducing":["an","the"],"by introduction":["of"],"by isEmpty,":["but"],"by itself":["isn't"],"by itself,":["as"],"by just":["combining","using"],"by key,":["so","it's"],"by key.":["You"],"by leaving":["off","off"],"by length":["perhaps?"],"by leveraging":["the"],"by line":["13."],"by looking":["there.","to","at","at"],"by making":["a","`School`","`wordCount`","the"],"by many":["other","other"],"by matching":["over"],"by may":["be","be"],"by millions":["of"],"by mistake.":["=("],"by monad":["associativity"],"by moving":["the","the"],"by my":["reasoning","pointfree"],"by name":["or","when"],"by needing":["to"],"by normalizing":["the"],"by not":["using","recomputoing"],"by noting":["there"],"by one":["guard","(adding","argument","and"],"by one,":["so"],"by oneself":["!"],"by only":["one","doing"],"by others":["helped"],"by outliers:":["38.498%","36.566%"],"by parsing":["the"],"by pattern":["matching"],"by phrasing":["the"],"by prepending":["those"],"by previous":["comments"],"by putMVar":["since"],"by putting":["it"],"by record":["syntax."],"by removing":["the","those","the"],"by replacing":["`(not"],"by reusing":["the"],"by reverse,":["use"],"by rewriting":["your","technique"],"by row":["then"],"by seeing":["`fmap`"],"by separating":["the","the"],"by signature":["really"],"by simply":["in-lining"],"by skipping":["its"],"by some":["of"],"by something":["like","I"],"by staying":["in"],"by supplying":["a"],"by surrounding":["the"],"by swapping":["```zip```"],"by switching":["the"],"by testing":["for"],"by that?":["It's"],"by the":["[Arrow","tests","first","way).","previous","first","regexes","exercism","multiple","radix","tests,","tests,","compiler?","markdown","way,","catch-all","tests","output","first","sum","caller,","[Haskell","names","name","Map","do","way?","computer","notation","thread","strict-concurrency","[haskell-mode","[Monad","problem","fact","index","cost","`any`","compliter","end","tests.","strict","next.","other","first","second","mapAll","type","previous","way,","way).","children's","result."],"by their":["RHS."],"by then":["I"],"by this":["one","approach.","exercise.","file:"],"by threading":["the"],"by twisol,":["I"],"by two":["spaces","spaces"],"by use":["of"],"by using":["`any`.","`isSuffixOf`,","`(not","`_`","`(not","`isSuffixOf","`all`.","infix","`any`","`randomRIO`,","record","the","BangPatterns","`enumFromThenTo`","`insertWith`","`wordsBy`","a","the","a","Data.List.foldl'.","```map```.","`zipWith`.","`wordsBy`","Data.Map.Strict?","`splitAt`.","the","`fromListWith`","`M.foldlWithKey'`","`foldl'`","[`on`](http://hackage.haskell.org/package/base-4.2.0.0/docs/Data-Function.html#v%3Aon).","the","Data.List.Split's","```Map.fromListWith```.","the","a","built-in","`Data.List.transpose`","an","sorting","the","`Data.List.splitAt`","Maybe.","second","another","`Data.List.Split.wordsBy`","`Int`","`foldl'`","`wordsBy`","fromListWith","```fromListWith```"],"by virtue":["of"],"by walking":["each"],"by what":["would","happened"],"by where":["in"],"by whitespace":["to"],"by with":["a"],"by word":["'split'"],"by word,":["tallying"],"by working":["out"],"by writing":["another","`[x,","cycle","\u003cpre\u003eisAsking"],"by you're":["not"],"by your":["implementation","problem"],"by zipping":["the"],"by, it":["may"],"byte arrays":["while"],"bytes that":["are"],"bytestring is":["allocated"],"bytestring or":["LBS/LB"],"bytestring package":["has"],"bytestring short":["is"],"bytestring uses":["pinned"],"bytestring with":["no"],"bytestrings don't":["fuse,"],"bytestrings leads":["to"],"c ++`":["should"],"c -&gt;":["d"],"c --":["Defined","Defined","Defined"],"c -\u003e":["if","a"],"c :":["go"],"c \u003c-":["m,","k]`.","cs]","l]"],"c =":["c","c","'","'","c","c","c","if","('A',","if","c","..."],"c ==":["'C'","'T'","'T'","'T'"],"c =='G'":["||"],"c \u003e":["v"],"c `deepseq`":["()"],"c `elem`":["\"CGA\"),","\"ACGT\""],"c d":["="],"c else":["'"],"c f":["g.","g."],"c f)":["n","g","n","g"],"c in":["`go"],"c then":["'","Just","c"],"c x":["="],"c |":["c","c"],"c ||":["isSpace","isSpace","d`"],"c ||`":["everything"],"c' -\u003e":["a"],"c' =":["..."],"c' `seq`":["go"],"c) ++":["d"],"c) -&gt;":["(a","(a"],"c) -\u003e":["f","a","(a","(a","(a","a","(b,","(a","b"],"c) =":["seq","b"],"c) ==":["(not"],"c) ||":["isUpper","isUpper","isUpper"],"c))` (if":["you"],"c)` is":["often","more","equivalent"],"c)` should":["be"],"c, f":["b"],"c, n,":["n,"],"c] =":["Data.List.Split.splitPlaces","Data.List.Split.splitPlaces"],"c` (modulo":["unicode,"],"c` and":["`a"],"c` can":["be"],"c` desugars":["to","to"],"c` for":["non-alpha"],"c` instead":["of","as"],"c` is":["used","equivalent","a"],"c` requiring":["a"],"c` style":["since"],"c` will":["escape"],"c` would":["work"],"c`, since":["it","`if…then…else`"],"c`. Function":["application"],"c`. The":["backslashes"],"c``` clause":["of"],"c``` in":["line"],"cabal at":["all."],"cabal install":["containers`.","something."],"cabal sandbox":["feature"],"cabal to":["get"],"cabal-sandbox, but":["thanks"],"cabal. Just":["to"],"cabal? It's":["installed"],"cache the":["sorted","sorted"],"caching functions":["under"],"caching, but":["I"],"caesar cipher":[":)"],"caesarDecode ::":["String"],"caesarDecode =":["caesar"],"caesarEncode =":["caesar"],"caesarEncode, caesarDecode":["::"],"cakewalk. I":["checked"],"calclutate all":["scores"],"calculate `toLower":["letter`"],"calculate `toLower`":["once"],"calculate an":["upper","appropriate"],"calculate everyone's":["score"],"calculate how":["many","much"],"calculate it":["from","without"],"calculate monthStart…":["perhaps"],"calculate number":["of"],"calculate primes":["since"],"calculate square":["and"],"calculate the":["length","digit","result.","`inWeekOffset`","score","common","numbers","number"],"calculate these":["values"],"calculate this,":["no"],"calculate total,":["so"],"calculate. Where":["seems"],"calculated directly.":["If"],"calculated each":["time?"],"calculated length":["on"],"calculated more":["than"],"calculated multiple":["times,"],"calculated on":["every"],"calculated once":["it","for","per"],"calculated once,":["but","not"],"calculated only":["once."],"calculated twice":["for"],"calculated until":["it's"],"calculated very":["simply"],"calculates `length":["x`"],"calculates `toLower":["letter`"],"calculating `addends`.":["`addends`"],"calculating any":["previous"],"calculating it":["only"],"calculating length":["on"],"calculating length,":["as"],"calculating the":["length","exponent."],"calculation in":["your"],"calculation still":["persists,"],"calculation with":["some","a"],"calculation yet":["(it's"],"calculation. A":["more"],"calculations (it":["uses"],"calculations a":["lot"],"calculations in":["arithmetic"],"calculations more":["than"],"calculite ```2^n```.":["Can"],"calculus, but":["didn't"],"calendar date":["that"],"call `map":["verse`"],"call `split`":["or"],"call `square`":["at"],"call atomically,":["but"],"call could":["be"],"call error":["on"],"call fromListWith":["which"],"call in":["every"],"call init":["on"],"call inside":["```isAnagram```."],"call is":["`f","made."],"call it":["`normalize`","`.:`.","`toReversedList`","`ys`","complement"],"call itself":["with"],"call number":["in"],"call of":["`anagramsFor`","`scoreLetter`.","```isAnagramOf```"],"call on":["both","dropping"],"call optimisation":["and"],"call optimization":["(the"],"call or":["return"],"call should":["bind"],"call stack":["the"],"call that":["`turn`","`w`)"],"call that.":["This"],"call them":["`x'`"],"call this":["`unSchool`","\"record","helper","function","bastard"],"call to":["last...).","show","`anagramsFor`.","`toUpper`,","primeFactors","`length`","unique.","`length`","`putMVar`.","`anagramsFor`.","`anagramsFor`.","`anagramsFor`","`anagramsFor`.","`anagramsFor`","`anagramsFor`.","`anagramsFor`"],"call with":["no"],"call yelling":["twice."],"call you":["should"],"call! Forgot":["about"],"call! The":["backticks"],"call). Have":["you"],"call, I":["didn't"],"call, even":["when"],"call, in":["Haskell,"],"call-by-need (with":["memoization)."],"call-by-need with":["memoization)."],"call-by-value while":["lazy"],"call-stack with":["size"],"call. Can":["you"],"call. I":["want"],"call. If":["you"],"call. That":["was"],"call: `map":["(\\(grade,"],"callable from":["this"],"called Data.String.Utils,":["which"],"called Parser":["Combinator"],"called TupleSections.":["http://www.haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#tuple-sections"],"called [hlint](http://community.haskell.org/~ndm/hlint/).":["It's"],"called `aFun`":["then"],"called `asking`,":["for"],"called `lookup`":["in"],"called `normalize`,":["but"],"called `toDecimal`":["I"],"called a":["'blank","difference","matter","space"],"called again":["and","does"],"called an":["eta","eta-reduction"],"called by":["a"],"called eta":["reduction","reduction"],"called eta-reduce)":["your"],"called eta-reduction":["(also","that"],"called every":["iteration?"],"called from":["any"],"called in":["a"],"called it":["`unSchool`).","`revDigits`"],"called mine":["TurnLeft,"],"called on":["every"],"called once":["in","in"],"called once.":["GHC's"],"called outside-in":["or"],"called point-free":["style"],"called recursively":["a"],"called something":["like"],"called that":["is"],"called the":["\"owl\""],"called to":["not"],"called transpose":["that's"],"called unnecessarily":["when"],"called with":["an","an","a","non-empty","empty"],"called without":["that"],"called η-reduction).":["This"],"called, it's":["just"],"called. It":["should"],"called. It's":["not"],"caller can":["compose"],"caller from":["constructing"],"caller is":["burdened"],"caller isn't":["doing"],"caller, but":["I"],"calling `[(Grade,":["[Student])]`"],"calling `fromList`.":["Several"],"calling `generateName`":["for"],"calling `isQuestion`,":["so"],"calling `normalize`":["twice"],"calling `randomRIO`":["is"],"calling `sort`":["on"],"calling fromEnum":["and"],"calling it":["three"],"calling map":["over"],"calling methods":["(in"],"calling my":["default"],"calling putMVar)":["for"],"calling robotName.":["Otherwise,"],"calling something":["along"],"calling tail":["on"],"calling this":["function"],"calls `isQuestion":["-\u003e"],"calls `rest'`":["again."],"calls are":["higher"],"calls for":["a"],"calls have":["the","the"],"calls in":["`slices'`.","`nucleotideCounts`"],"calls or":["using","for"],"calls superfluous.":["e.g.:"],"calls them":["Parser"],"calls to":["`randomRs`","`randomRIO`","make","toUpper."],"calls toList":["if"],"calls with":["```all```"],"calls without":["any"],"calls, so":["although"],"calls: `howMany(n)`":["is"],"came as":["something"],"came from":["either,"],"came from.":["If"],"came later":["so"],"came to":["the"],"came up":["with,","with","with","with."],"camel case":["(ie:"],"camelCase will":["look"],"camelCase, it":["is"],"can (functions":["that"],"can -":["but"],"can I":["determine","find","find","eliminate","start","ask?","debug","make","use","use","use"],"can ```map":["toLower```"],"can `filter`":["the"],"can `import":["Data.Map"],"can abstract":["out"],"can access":["m","`s`","`input`"],"can accurately":["convert"],"can actually":["rely","put"],"can add":["more","a","`import","it"],"can all":["be","be"],"can almost":["always"],"can already":["see","rule","see"],"can also":["use","be","reformulate","push","use","be","let","use","use","switch","be","use","separate","write","move","skip","make","do","use","define","be","indent","use","use","just","avoid","use","make"],"can always":["write","be"],"can and":["cannot"],"can annotate":["the","types"],"can apply":["the"],"can arise":["in","due"],"can ask":["for","for"],"can assume":["that"],"can avoid":["using","them!","nested","that","introducing","this","the","such","the"],"can be":["sure","done","easily","rewritten","done","built","replaced","made","written","applied","considered","changed","a","rewritten","confused","made","replaced","simplified","used","written","statically","defined","simplified","used","much","simplified","added","answered","unindented.","expressed","thought","written","more","satisfied","empty,","written","simplified:","unindented","removed.","explicit","finite,","changed","improved","improved.","moved","absolutely","certain","even","sure","written","easily","both","sorted.","ambiguous","done?","absolutely","done","done","sure","made","used","fixed","absolutely","implemented","sent","solved","easily","simpler.","easily","absolutely","written","sure","dangerous","dangerous","used","implemented","absolutely","passed","rewritten","simplified.","rewritten","calculated","made","simply","made.","done","calculated","used","written","ordered","implemented","done","rewritten:","simplified","sure","done","read","arrived","good","simplified","simplified","done","done","used","a","written","cleaned","cleaned","avoided","an","written","used","any","a","good","good","efficient","written","created","implemented","done","nicer.","accessed","written","used","done","written","found","splitted,","statically","implemented","empty","used","used","rewritten","used","infinite","written","done","on","used","floated","stripped),","more","passed","done","done","eliminated","done","fixed","translated","applied","used","written","reworked,","written","without","efficiently","done","solved","solved","thought","done","done","`Nothing`","written","done","written","a","one","done","done"],"can be.":["In"],"can because":["then"],"can become":["hard","an"],"can begin":["to"],"can benchmark":["it","it"],"can both":["be"],"can bring":["in"],"can browse":["the"],"can build":["a","the","a"],"can calculate":["the","these","how","an","number","the"],"can call":["it"],"can cancel":["the"],"can cause":["a","the","expressions","a"],"can certainly":["do"],"can check":["`all`","if","for","definition","generated","string"],"can choose":["better"],"can clarify":["your"],"can clean":["up","things"],"can clear":["a"],"can close":["bank,","your"],"can combine":["7"],"can come":["with","up","up"],"can compile":["file"],"can compose":["`swapMVar`","the","`length"],"can consider":["a","using"],"can construct":["it","this"],"can contrive":["some"],"can count":["how","how"],"can create":["the","a","reversed","a"],"can define":["`all`","this","a","a","the","them"],"can derive":["Bounded","for"],"can describe":["in","idea,"],"can dispense":["with"],"can do":["something","the","to","`map","it","this","in","this","this","the","it","away","to","here","this","that","is","to","to","the","this","this","with","here.","here,","to","for","this","the","things","much","much","this","an","with","this","is","constant","this","a","the","short","this","some","a","to","`name","this","this","`concatMap`","the","this","this","that","better","this","this","it","what's","this","it","an","short-cut","this","this","this","this","indentation","this","the","this","this","this","this","it","the","a","arithmetic","`fromListWith","better","this","efficient"],"can do?":["I"],"can dodge":["the"],"can drill":["down"],"can drop":["the"],"can easily":["cause","lead","precompute","fix","switch","calculate","perform","solve"],"can efficiently":["build"],"can either":["use"],"can eliminate":["the"],"can ensure":["that"],"can eta":["reduce","reduce"],"can eta-reduce":["anagramsFor","`mkRobot`.","`toRNA`"],"can even":["use","get","get","find","cause","do","find","drop","crash"],"can expand":["the"],"can expect":["better","it"],"can explicitly":["import"],"can exploit":["the"],"can express":["that"],"can extract":["out"],"can factor":["out"],"can fail":["faster,"],"can figure":["that","them","out"],"can find":["more","a","an","anything","`wordsBy`"],"can fix":["this","by","by","here","that"],"can force":["the"],"can further":["simplify"],"can fuse":["operations","stuff","toLower"],"can gather":["results"],"can generally":["re-write"],"can generate":["that"],"can get":["the","a","rid","rid","rid","away","this","away","all","a","when","rid","to","rid","some","the","a","rid","used","a","pretty","a","away","rid","rid","```isAnagram```","rid","those","away","rid","rid","list","away","rid"],"can give":["names","an"],"can go":["to","on","on"],"can guarantee":["that","that","that","that","that","that","that","that"],"can guess":["what"],"can happen":["when"],"can happen;":["usually"],"can have":["more","more","multiple","a","the","O(1)","multiple","a","deadlocks.","type","guards","any","it","almost"],"can help":["you","clean","me","me","you"],"can imagine":["it","that","this","that","it"],"can implement":["the","```saysNothing```","this","this","`incrementBalance`"],"can import":["Data.Map","Data.Map","(&&&)","Data.Function's"],"can in":["some"],"can indent":["this"],"can index":["on","on"],"can infer":["the","them."],"can inspect":["each"],"can instantly":["compare"],"can introduce":["a"],"can it":["be"],"can just":["use","write","`import","use","use","use","`deriving","import","omit","do","cut","write","get","use","put","change","use","return","add","get"],"can keep":["line"],"can kick":["out"],"can kind":["of"],"can lead":["to","to"],"can leave":["off","that"],"can likely":["do"],"can live":["with."],"can look":["this","up","at","it","something"],"can make":["this","this","your","my","both","`isQuestion`","that","the","`strip`","this","your","this","`isSeparator`","`toRNA`","this","this","it","it","it","this","this","a","use","it","this","it.","it","line","it","```f```","some","it"],"can make,":["15"],"can make.":[":)"],"can mechanically":["perform"],"can mix":["cases"],"can modify":["the"],"can move":["all","filter"],"can multiply":["the"],"can never":["be","grow"],"can normalizedX":["be"],"can not":["fault","be"],"can not,":["as"],"can obsure":["code"],"can occur":["with"],"can of":["course"],"can often":["prevent","avoid","optimize","do","be","be","figure","be"],"can omit":["additional"],"can only":["check","check","ensure","improve"],"can operate":["on"],"can optimize":["this","this","thing","this"],"can overflow":["the","the","the","the","the","the","the","the","the"],"can parse":["(static","\"01\""],"can participate":["in"],"can pass":["the","error"],"can pattern":["match","match","match"],"can perform":["fusion","exactly"],"can pick":["out"],"can play":["with","with"],"can potentially":["terminate"],"can pre-sort":["```str```...."],"can pretend":["that"],"can probably":["figure","even"],"can properly":["split"],"can prove":["it,","that"],"can put":["all"],"can read":["it"],"can reduce":["code","a"],"can refactor":["code"],"can remove":["the","the","the","`runIdentity`","the","my","that","the"],"can reopen":["it"],"can replace":["`(\\w","`isAlpha`","the","`(\\w","`(all","`(\\x","the","with"],"can resolve":["this"],"can reuse":["the"],"can review":["it"],"can rewrite":["it","it","`zip","the","`numerals`","line","`evenlyDivisible`","it","it"],"can run":["through","when"],"can safely":["remove","run","assume"],"can satisfy":["the"],"can save":["a","some","you"],"can search":["for"],"can see":["all","here","from","it","that","that","all","both","that","your","what","this","how,","the","how","what","in","that","how","a","that","how","how","replace","I'm","that","a","myself","how"],"can see,":["it","which"],"can separate":["the"],"can shorten":["(so","`isSilent`","it"],"can show":["you"],"can simplify":["`isShout`","`allAlphasAreCaps`","some","the","`isShouting`","(make","it","your","the","your","your","the","`addLowerBit`","`toRNA`","`anagramFilter`"],"can simply":["check","write","use","write","write","remove","wrap","remove","change","remove","import"],"can sing":["a"],"can so":["easily"],"can solve":["these","this","this"],"can someone":["give"],"can something":["be"],"can sometimes":["do","do"],"can sort":["each","out"],"can specify":["the","all"],"can start":["generating","with"],"can still":["extract","do","index","be"],"can stop":["as","iteration"],"can store":["that"],"can suggest":["here"],"can take":["place","advantage","the","care","advantage","up","this"],"can take,":["which"],"can tell":["whether","them.","`withMVar`"],"can tell,":["replace"],"can terminate":["early.","with"],"can test":["`isSilence`","definitively"],"can then":["eta-reduce"],"can thing":["of"],"can think":["of","about","of:","of","of","of"],"can this":["be,"],"can try":["to","`last`","to","start","write","to"],"can understand":["the","how"],"can use":["to","to","`unlines`","`fromEnum`","to","`Data.Map.map`","instead","`M.toAscList`","`TupleSections`","any","pattern","Data.List.Split","`[x,","`isUpper`","to","`T.last`","`Data.Char.isSpace`","many","instead","`(area,","to","the","that","a","the","`isAlphaNum`","`fromListWith`","to","to","to","for","\u003c$\u003e","custom","`fromListWith`","pattern","`unlines`","both","`zipWith`","to","to","```Map.insertWith```.","`fromListWith`","`Data.List.Split`'s","`addDays`","a","methods","`testBit`","`fromListWith`","*any","constant","(&&&)","[`isAlphaNum`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Char.html#v:isAlphaNum)","syntax","it","imperative","guards","`zip","wordsBy","function","`Data.List.Split.wordsBy`","Data.Map.Strict","the","to","only","this","withMVar","`Data.Function.on`","to","`Map.fromListWith`","(toLower'","Map/IntMap","`toAscList`","qualified","alongside","`unwords`","`filter`","`insertWith`","head","pure","functions","to","`zip`","the","`show","previously","```newStdGen","```foldl'```","pure","Data.List.Split.words","```unlines```","pure","`reads`","```maybe```.","zipwith","`map`","insertWith'","```foldl'```","instead","pure"],"can use.":["You","Do"],"can use`":["ceiling`"],"can usually":["assume"],"can very":["easily"],"can view":["my"],"can void":["that"],"can we":["be"],"can whip":["up"],"can with":["a"],"can work":["with"],"can wrap":["the"],"can write":["`yelling`","it","less","your","this","clearer","toRNA","it","`complement`","`not","`intercalate","a","`(\\x","something","`head","`liftA2","that","that","your","`readDNA`","`pling,","any","`removeSilience`","`(\\x","it","a","something","function","a","`unwords","much","`Foldable`","`Map.insertWith","line","show","a","conversion","an","9-10","it","it","a"],"can you":["think","think","think","use","come","elaborate?","simplify","think","think","think","think","imagine","think","do","think","combine","rewrite","tell","rewrite","rewrite","find","try","think","useore","convert","try","think"],"can't `last`":["an"],"can't accommodate.":["In"],"can't accurately":["coerce"],"can't be":["empty.","created,","overridden","overridden","overridden","overridden","overridden","overridden.","overridden","overridden","overridden","any","overridden","overridden.","collected","closed","used","infered,","done","empty","called"],"can't believe":["this","how"],"can't close":["account"],"can't come":["up"],"can't crash":["due"],"can't deal":["with"],"can't derive":["`Show`"],"can't directly":["do"],"can't do":["anything","anything","with","something"],"can't even":["figure","remember."],"can't fail":["and"],"can't figure":["out","out","out","it","out","out","out","out"],"can't find":["an","function","any","the"],"can't force":["`exercism`"],"can't get":["it","`filter"],"can't grok":["them."],"can't happen":["because"],"can't help":["but","but"],"can't imagine":["someone"],"can't immediately":["see"],"can't look":["at"],"can't make":["my","it","it"],"can't pattern":["match"],"can't pinpoint":["why."],"can't possibly":["get"],"can't pretend":["to"],"can't properly":["handle"],"can't quite":["work"],"can't really":["think","remove","figure","work"],"can't reproduce":["in"],"can't return":["a","a"],"can't say":["no","I'm","I"],"can't see":["it","how","a"],"can't seem":["to","to"],"can't simply":["inline"],"can't simultaneously":["be"],"can't skip":["the"],"can't split":["it"],"can't submit":["it"],"can't talk":["about"],"can't tell":["if"],"can't thank":["you"],"can't think":["of","of","of","of","of","of","of","of"],"can't throw":["an"],"can't use":["`getBalance`","a","`Data.Map.Strict`)"],"can't win":[":cold_sweat:"],"can't work":["out"],"can't write":["the"],"can't you":["reduce"],"can't. Take":["a"],"can, but":["my","it's"],"can. I":["think"],"cancatMap (\\x":["-\u003e"],"cancel the":["`w`"],"canceled, it's":["possible"],"candidate and":["word,"],"candidate because":["it"],"candidate divisors.":["A"],"candidate for":["using"],"candidate primes":["(e.g."],"candidate to":["have"],"candidate, so":["I'll"],"candidate` would":["be"],"candidates (other":["than"],"candidates (prepending":["2),"],"candidates argument.":["I"],"candidates that":["are"],"candidates to":["check."],"cannot avoid":["a"],"cannot be":["fixed","observed","delayed"],"cannot do":["IO"],"cannot find":["a"],"cannot have":["a"],"cannot help":["but"],"cannot just":["read"],"cannot know":["how"],"cannot optimise,":["and"],"cannot see":["how","how","how"],"cannot use":["the","a"],"cannot. I":["am"],"canonical Haskell":["or"],"canonical form,":["canonicalizing"],"canonical in":["point-free"],"canonicalise =":["sort"],"canonicalize\u003c/code\u003e into":["`isAnagramOf`?"],"canonicalize` and":["filter"],"canonicalize` on":["the"],"canonicalizing to":["`String`","`Map`."],"cant come":["up"],"capStr` is":["much"],"capStr`. The":["former"],"capStr``` because":["I"],"capital letter":["in"],"capitalization of":["\"no","```atbash```."],"capitalize is":["(obviously)"],"capitalize the":["first"],"capitalize to":["handle"],"capitalized and":["the"],"caps $":["a","concat"],"caps because":["there"],"caps case.":["I"],"caps\" if":["there's"],"caps. Your":["code,"],"capture both":["the"],"capture groups":["seems"],"captured with":["a"],"captures the":["idea"],"caracteres ..":["yes,"],"care about":["conciseness","the","instead","whether","3,","the","performance","speed","their","the"],"care if":["you"],"care of":["indentation","this","your","using","it","that?","forcing"],"care that":["they"],"cared about":["performance,"],"careful about":["when","lazy","premature"],"carefully around":["line"],"carefully at":["the"],"carefully read":["the"],"careless of":["me","me!"],"carelessly. Youda":["comes"],"cargo culting":[";)"],"carry Deque":["structure"],"carry a":["similar"],"carry any":["meaning"],"carry it":["through"],"carry result":["of"],"carry the":["string"],"case \":)":["?\""],"case \"carrot\".":["Consider"],"case (a":["number"],"case (all-caps)":["at"],"case (ie:":["thisIsCamelCase)"],"case (length":["digits,"],"case (ma,":["mb)"],"case (or":["any"],"case -":["what"],"case Bob":["learns"],"case I":["think","would","would","think","had","see","should","(other","agree","had"],"case I'm":["aware","not"],"case `[]`":["for"],"case `count`":["returns"],"case `map":["."],"case `questioned":["nonsense`."],"case acc":["of"],"case analysis":["anyway.)","on"],"case and":["either","you","DNA","check","then","it"],"case as":["it","well,","a","`B.pack`","well"],"case at":["all."],"case because":["I'd","it's","the","of"],"case before":["checking"],"case but":["for"],"case by":["case","testing"],"case character\"":["instead"],"case checks":["like"],"case clauses":["with"],"case conversion":["is"],"case distinction":["(the"],"case dna":["of","of"],"case does":["the"],"case don't":["forgot"],"case expression":["necessary?","to","in","in","if","instead","here"],"case expression,":["something"],"case extremely":["tiny)"],"case filter":["isDigit"],"case first":["so"],"case foo":["of"],"case for":["this","other","when","\"\"","the","Data.Array.","it,","them.","the","that","do.","values","that"],"case from":["`equivalent`?"],"case gracefully":["on"],"case has":["absolutely"],"case heavy":["code"],"case here,":["it's","would"],"case here.":["Reading"],"case i":["prefer"],"case i'll":["fail"],"case if":["they","the","any"],"case in":["Ruby","`isSilence`","`responseFor`?","copying","compiled","case"],"case includes":["this:"],"case inside":["functions"],"case instead":["of"],"case is":["based","wrong.","a","caught","linearithmic.","linearithmic.","not","the","`+`,","just","just","a"],"case isn't":["necessarily"],"case it":["can","would","might","might","doesn't","would","would","is","will","is"],"case it's":["better","not","more","a"],"case just":["means"],"case like":["this"],"case none":["of","of"],"case normalisation.":["Have"],"case normalization":["or","before","and","before","on","in"],"case normalized":["as","candidate","comparison.","versions","words","comparison","versions","comparison.","comparison"],"case nuc":["of"],"case nucleotide":["and"],"case of":["very","differing","`last`.","an","map,","duplicates","the","`map`","`scoreLetter`","an","`[1..dv]","the","`foldr`,","`map`","`'U'`","folding","left","Nothing"],"case on":["isAllCaps","the","its"],"case or":["split"],"case other":["than"],"case pattern,":["and"],"case planet":["of","of","of","on"],"case prefix":["would"],"case really).":["http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'"],"case sch":["of"],"case sched":["of"],"case scheduleEnum":["of"],"case several":["times"],"case since":["the","the","no"],"case so":["that"],"case statement":["of","?","(you","that"],"case statement,":["buts"],"case statement.":["That"],"case statements,":["and"],"case statements.":["Check"],"case still":["feels"],"case than":["if/else","`findWithDefault`,","let"],"case that":["both","would","could"],"case that.":["Also,"],"case the":["benefits","human","input","parenthesis","only","accumulator","optimizer","non-strict","`_`"],"case there":["probably","isn't","is"],"case there's":["a"],"case they're":["probably"],"case this":["would"],"case though":["it","`length"],"case though,":["it's"],"case though?":["I"],"case under":["any"],"case using":["`modifyTVar`"],"case we":["have","can","had"],"case when":["you","there","you"],"case where":["all","`fromListWith`","you","you","you","it","there","you","transcribing","you","parentheses","an","can","there's"],"case while":["1"],"case will":["not"],"case with":["only","guards","`undefined`","empty","`Control.Concurrent.STM`"],"case won't":["change"],"case would":["pass","it"],"case x":["of"],"case you":["would","know","decide","should","should","can","don't","really","can","have","see"],"case you'd":["want","typically","want"],"case you'll":["have","have"],"case you're":["exposing"],"case …`":["with"],"case\", pattern":["matching"],"case\". These":["are"],"case) and":["doing"],"case) should":["have"],"case) so":["I"],"case), but":["everything","sum"],"case), if":["you"],"case), it's":["better"],"case). If":["you"],"case). Otherwise,":["this"],"case). Same":["with"],"case* -":["but"],"case, I":["just","don't","think","initially","think!)","just"],"case, `-1`),":["instead"],"case, `foldl'`.":["Even"],"case, `read`":["for"],"case, `show":["=\u003c\u003c"],"case, `square":["65"],"case, `toRNA":["=","="],"case, also":["mvar","you"],"case, and":["simply","you","the","couldn't"],"case, but":["am","it","I","it's","only","I","it's","that's","a","move","Haskell's","it's"],"case, correct?":["That"],"case, encoding":["in"],"case, even":["though"],"case, explicit":["imports"],"case, getting":["the"],"case, however":["text"],"case, however,":["it's"],"case, if":["your","you"],"case, it":["fails","obviously","would","looks","would","doesn't","can"],"case, it'd":["be"],"case, it's":["applied","not"],"case, just":["`anagramsFor`).","`responseFor`)"],"case, making":["it"],"case, maybe":["there's"],"case, or":["am"],"case, otherwise":["you'll"],"case, seems":["that"],"case, since":["`ceiling"],"case, so":["I"],"case, sorting":["the"],"case, the":["default","whole","phrase","common","solution","error"],"case, then":["you"],"case, try":["to","using"],"case, using":["`map`"],"case, via":["folding"],"case, where":["you"],"case, with":["optimizations"],"case, would":["look"],"case, you":["should","can","would","can"],"case, you'd":["get"],"case-insensitive. It's":["unfortunate"],"case. A":["termination"],"case. Aside":["from"],"case. Carry":["on!"],"case. Have":["a"],"case. I":["think","need","wanted","agree"],"case. I've":["updated"],"case. If":["you","you're"],"case. In":["my"],"case. It":["could"],"case. It's":["good"],"case. Optimizing":["for"],"case. Since":["your"],"case. That":["sort","way"],"case. The":["fact","issue","compiler"],"case. You":["might"],"case. but":["that"],"case. isSuffixOf":["might"],"case.. 17":["unicode"],"case.. I":["will"],"case.. and":["passing"],"case: `Map.alter`":["first"],"case; in":["that"],"case? (I":["used"],"case? I":["tried","tried"],"case? There":["is"],"cases (1":["point)"],"cases (hierarchy":["of"],"cases 11":["and"],"cases I":["prefer","do","prefer"],"cases a":["zero"],"cases affects":["the"],"cases and":["have","the","it","what","restrict","guards?"],"cases are":["handled","trivial.","set","I/O","missing","passed,"],"cases as":["well.","I","the"],"cases but":["Teenth"],"cases by":["noting","2"],"cases can":["have"],"cases correctly.":["Control.Applicative"],"cases covered.":["Logically"],"cases demand,":["is"],"cases dictate":["that"],"cases don't":["cover","look"],"cases expect":["`'?'`"],"cases for":["[]","typeclass","`and`","`turnRight`","this"],"cases here.":["The"],"cases however.":["Why"],"cases immediately":["anyway"],"cases in":["four","`operations`","the"],"cases it":["can"],"cases it's":["better"],"cases laziness":["is"],"cases like":["this,","this","this","this","this,","these.","this."],"cases make":["it"],"cases not":["covered"],"cases now,":["but"],"cases of":["`isQuestion`","a","9's"],"cases on":["separate"],"cases return":["an"],"cases seemed":["to"],"cases should":["get","be"],"cases shouldn't":["alter"],"cases so":["they"],"cases solution":["should"],"cases syntactically":["is"],"cases that":["invalidated"],"cases the":["input,","compiler"],"cases this":["is"],"cases to":["make","use","use"],"cases we're":["given,"],"cases were":["very"],"cases where":["`map`","difference","they","it","s","a","you","you","the"],"cases will":["be"],"cases without":["converting"],"cases would":["be"],"cases you":["may"],"cases) and":["`unlines`"],"cases) since":["the"],"cases), which":["is"],"cases). I":["like"],"cases). So":["such"],"cases, I":["need"],"cases, IMO":["this"],"cases, but":["I","it","I","everything","the","if","it's","still","not"],"cases, for":["the"],"cases, so":["that"],"cases, such":["as"],"cases, you'd":["probably"],"cases. Consider":["that"],"cases. Either":["way"],"cases. I":["also"],"cases. I'm":["not"],"cases. In":["this"],"cases. Thanks":["for"],"cases. What":["I"],"cases. Your":["best"],"cases. one":["might"],"cases? `AA`,":["`BB`,"],"case… since":["it's"],"casing is":["different","a"],"catMaybes from":["Data.Maybe."],"catagoriseStatement::String -\u003e":["Category"],"catalyst for":["more"],"catastrophic with":["large"],"catch -":["it's"],"catch :)":["You'd"],"catch all":["statement"],"catch an":["exception"],"catch everything":["that"],"catch or":["throw"],"catch that":["base"],"catch the":["error"],"catch with":["`newtype`!","`fromEnum","the"],"catch! And":["nice"],"catch! Thanks":["for"],"catch, I":["meant"],"catch, should":["be"],"catch, that":["does"],"catch, the":["`do`"],"catch-all case":["with"],"catch-all for":["completeness."],"catch-all guard":["rather"],"catch-all pattern":["below"],"catch-all, which":["means"],"catch. I'll":["push"],"catches the":["empty"],"catching empty":["strings"],"catching that,":["but"],"catching the":["empty"],"categoriseStatement::String -\u003e":["Category","Category"],"categorising the":["text,"],"cater for":["the"],"caught by":["the","isEmpty,","the","`silence`"],"caught up":["in","on","following"],"caught, and":["it's"],"cause I":["did"],"cause a":["space","stack","test","stack","stack","space","heap","problem"],"cause an":["exception"],"cause confusion":["with"],"cause expressions":["to"],"cause it":["is"],"cause some":["spurious"],"cause surprising":["results"],"cause the":["program","program","lookup"],"cause using":["Maybe"],"cause your":["program"],"caused by":["Data.Map"],"causes a":["space","space","space","problem","space","space"],"causes an":["error"],"causing a":["stack"],"causing trouble":["in"],"causing unintended":["side-effects."],"caveats depend":["on"],"ceiling [-1.9,-1.1,1.1,1.9]":["--"],"ceiling. 1)":["Is"],"ceiling` in":["sqrtInt"],"cell of":["the","the"],"cell that":["gets"],"century &&":["exceptional`?"],"century means":["400"],"century` sort":["of"],"certain behavior":["for"],"certain case?":["(I"],"certain exercism":["user"],"certain how":["the"],"certain if":["the"],"certain letter":["is"],"certain my":["change"],"certain one":["way"],"certain order.":["Am"],"certain that":["the","like"],"certain this":["is"],"certain way":["so"],"certainly approve":["of"],"certainly be":["nice","better"],"certainly could":["be"],"certainly couldn't":["get"],"certainly design":["problems"],"certainly do":["a"],"certainly don't":["mind"],"certainly easier":["to","to"],"certainly feel":["I"],"certainly getting":["more"],"certainly has":["it's"],"certainly make":["it"],"certainly makes":["life"],"certainly more":["expensive"],"certainly no":["1337"],"certainly not":["more"],"certainly one":["of","way"],"certainly overkill":["to"],"certainly possible":["to"],"certainly right":["that"],"certainly saved":["me"],"certainly the":["most"],"certainly thorough,":["but"],"certainly use":["newtype"],"certainly used":["on"],"certainly uses":["the"],"certainly wouldn't":["be"],"ch =":["ch"],"chain `Either`s":["using"],"chain of":["thunks","thunks","thunks","thunks","thunks","thunks","splitting","thunks","unevaluated","outputs-to-inputs","unevaluated","unevaluated","appends","thunks,","thunks,"],"chain shift":["and"],"chain so":["easy"],"chain them,":["but"],"chains, but":["here"],"challenge here,":["you"],"challenge in":["this"],"challenge is":["too"],"challenge so":["I"],"challenge you":["could"],"chance it":["could"],"chance of":["confusion","converting","confusion","losing"],"chance that":["there"],"chance to":["try","continue","test:)"],"chance, at":["least"],"chances of":["making"],"chances to":["be","be"],"change 'C'":["="],"change I'd":["make","make"],"change I'm":["planning"],"change ```words```":["to"],"change `import":["Data.Map`"],"change `isNumber`":["to"],"change `nucleotide`":["to"],"change `rle`":["to"],"change algorithm":["you"],"change anything,":["because"],"change behavior":["in"],"change concatMap":["to"],"change from":["`map`"],"change here":["is"],"change here).":["Here"],"change implementation":["on"],"change in":["this"],"change is":["ensuring","here:"],"change it":["to","anyway.","to","so","to","to","from","can"],"change it's":["semantics,"],"change its":["name"],"change much,":["but"],"change much.":["It's"],"change my":["strip"],"change name":["from","obviosly)"],"change score":["letter"],"change so":["long"],"change that":["into","`import","goes"],"change the":["```let...in```","asymptotic","code","way","name","```(++)```","other","order","semantics.","\"LLNNN\"","`(Map.alter","order","difficulty.","first","B","`$`","name","result!","tests","import","ending"],"change things":["much."],"change this":["from","to","a"],"change to":["isShout","the","the"],"change values":["on"],"change when":["reset"],"change you":["return"],"change your":["import","`module`","definition","import","module","import,","import"],"change, this":["means"],"change: eta-reduced":["```sorted```"],"changed `catMaybes":["."],"changed any":["trash"],"changed because":["someone"],"changed from":["the"],"changed in":["future.","6"],"changed is":["pretty"],"changed it":["after","to","many"],"changed line":["13"],"changed my":["approach"],"changed or":["removed."],"changed since":["2008,"],"changed some":["functions:"],"changed the":["type","order","```sorted```","test","tests","robotName","function","name"],"changed this":["one","week","was"],"changed, and":["everything"],"changed. Guess":["all"],"changes I":["would"],"changes after":["viewing"],"changes and":["submitted"],"changes for":["my"],"changes in":["diff"],"changes make":["it"],"changes on":["a"],"changes over":["time."],"changes so":["we"],"changes the":["semantics","meaning","efficiency.","derived"],"changes to":["the","make"],"changes you":["suggested."],"changes, you":["can"],"changing `(\\b":["-\u003e"],"changing `thymidineToUracil`":["to"],"changing as":["little","little"],"changing code":["in"],"changing it":["to"],"changing it's":["behaviour."],"changing prep":["a"],"changing state,":["but"],"changing the":["order","first","naming","function","last","constants","import","name","numbers","length","test","meaning."],"changing things":["around"],"changing your":["import"],"chapter about":["eval"],"chapter from":["Parallel","SImon"],"chapter in":["Simon","Simon"],"chapter of":["Parallel","Parallel","Parallel","Parallel","Parallel","Parallel"],"chapter on":["how","monads"],"chapter too":["of"],"chapter until":["before"],"chapters 12":["and"],"chapters of":["\"Learn","Simon"],"chapters on":["monoids,","lambda"],"chapters that":["give"],"char (what":["is"],"char -":["so"],"char \u003c-":["chars]","chars]"],"char =":["('A',"],"char ==":["char)`."],"char `x`":["which"],"char and":["first","first"],"char are":["not","not"],"char at":["a"],"char for":["instance,"],"char if":["it"],"char in":["both","it"],"char is":["present","Alpha"],"char list":["by"],"char of":["a"],"char or":["a"],"char string":["instead"],"char width":["limit."],"char width,":["so"],"char will":["not"],"char) |":["(score,"],"char)`. But":["think"],"char, everything":["else"],"char, its":["not"],"char, num,":["num,"],"charToRNA`. This":["specific"],"charToRna $":["if"],"char``` may":["better"],"charachers. Hint:":["try"],"character (type":["sig"],"character actually":["seemed"],"character array":["literals"],"character as":["it"],"character at":["the","a","a"],"character binding":["of"],"character classes":["using","you"],"character frequency":["maps"],"character from":["a"],"character in":["the","`Text`","it's","their"],"character into":["a"],"character is":["present.","uppercase","found","thymidine","alphabetical.","in","an"],"character level":["and"],"character might":["be"],"character on":["the"],"character once":["remember."],"character or":["the"],"character predicates":["in"],"character returns":["either"],"character seemed":["silly."],"character should":["suffice."],"character somewhere.":["There's"],"character such":["that"],"character that":["is","is","does","needs"],"character through":["unchanged."],"character to":["3*3*3=27"],"character using":["`anyChar`"],"character values.":["The"],"character will":["in"],"character your":["code"],"character\" instead":["of"],"character, consider":["filtering"],"character, followed":["by"],"character, it":["will"],"character, no":["arithmetic"],"character, rather":["than"],"character, the":["rest"],"character, where":["the"],"character-replace function,":["then"],"characteristics of":["Haskell"],"characteristics. I'm":["assuming"],"characteristics. It":["could"],"characteristics? Tip:":["when"],"characters (but":["it"],"characters (unless":["there's"],"characters *should*":["be"],"characters T":["and"],"characters and":["then","the","dc=220"],"characters are":["upper","whitespaces","spaces","uppercase","contiguous,","whitespace).","lowercase","not","in"],"characters as":["zero,"],"characters but":["are"],"characters by":["a"],"characters comes":["out"],"characters contains":["incorrect"],"characters do":["you"],"characters first.":["Haskell"],"characters for":["both"],"characters from":["both"],"characters in":["the","the","there?","a","length,","nucleotideCounts..."],"characters instead":["of"],"characters is":["not","identity."],"characters like":["我"],"characters long.":["The"],"characters multiple":["times."],"characters per":["line.","line,"],"characters satisfies":["the"],"characters than":["just"],"characters that":["are","you"],"characters to":["both","split","```sep```."],"characters when":["all"],"characters with":["`wsChars`.","spaces."],"characters would":["pass"],"characters you":["*do*","care","want","need"],"characters, I":["assume"],"characters, but":["there's"],"characters, including":["digits"],"characters, namely":["`all"],"characters, so":["this","`\"?\"`"],"characters, some":["predicate\""],"characters, with":["the"],"characters. Hint:":["you"],"characters. However,":["you"],"characters. I":["did"],"characters. I've":["been"],"characters/bytes in":["parsec."],"characters; check":["that"],"chars `[Char]`,":["so"],"chars and":["have","then","treat"],"chars anyway.":["In"],"chars as":["keys"],"chars fit":["in"],"chars that":["the","do","are","are"],"chars to":["bits."],"chars were":["left"],"chars) \u003c-":["["],"chars, bools,":["ints"],"chars, numbers,":["bools..etc"],"chars, the":["number"],"chars. All":["that"],"chase with":["`[(Key,"],"cheap the":["first"],"cheaper and":["take"],"cheaper in":["every"],"cheaper than":["creating","generating","in"],"cheaper to":["actually"],"cheated and":["used"],"cheater value":["`None`."],"cheating ;)":["http://bob.ippoli.to/archives/2013/01/11/getting-started-with-haskell/#install-ghc-mod"],"cheating ?":["On"],"cheating but":["there's"],"cheating to":["use","use"],"cheating when":["sampled"],"cheating, but":["you"],"cheating, for":["some"],"check (which":["isn't"],"check (with":["`null`)"],"check -":["`allAlphasAreCaps`"],"check 6k-1":["and"],"check ``10^9":["`div`"],"check `all`":["`isSpace`"],"check `isSpace`":["since"],"check `leap":["&&"],"check `s1":["/="],"check a":["letter."],"check anything.":["Also,"],"check as":["well."],"check at":["the"],"check between":["`C`"],"check both":["conditions."],"check can":["be"],"check definition":["only"],"check digit)":["and"],"check elements":["one"],"check every":["character"],"check execution":["with"],"check first.":["Thanks!"],"check for":["an","the","isLetter","questions,","10,","11","a","silence,","white","empty","```anything```?","`null`","it,","`isQuestion`,","errors,","presence","silence","strings","`null","`len","it,","the","any","anagrams","that?","an","`c","these","non-empty","the"],"check from":["`isSilence`,","`isShouting`."],"check generated":["ASM"],"check if":["one","two","all","it","the","a","a","`drop","it's","your","current","key"],"check in":["convertAcid","parentheses","`detectSilence`"],"check into":["a"],"check invalid":["nucleotides?"],"check is":["to","simply","redundant"],"check isLower":["than"],"check isUpper":["and"],"check isn't":["actually"],"check it":["out"],"check matching,":["for"],"check my":["comment"],"check necessary":["in"],"check now":["implicitly"],"check odd":["numbers"],"check of":["those"],"check on":["existing","line","the"],"check only":["for","up"],"check out":["[`insertWith`](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html#v:insertWith).","the","everything","Data.List.Split's","this","this","this","this","`insertWith`","this","this","this","this","this","`isAlphaNum`","this","this","this","this","[`pointfree`](http://hackage.haskell.org/package/pointfree)","[`zipWith`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Prelude.html#v:zipWith).","these","this","this","`wordsBy`","the","this"],"check something":["and"],"check spelling":[":)"],"check string":["before"],"check tests":["of"],"check that":["it","all"],"check the":["input:","end","types","inputs","invariant","'core'","other"],"check their":["signatures."],"check those":["out."],"check to":["isShouting.","be","see","see"],"check type":["of"],"check whether":["there"],"check works":["for"],"check would":["work"],"check, as":["well"],"check, because":["for"],"check, but":["do","the"],"check, so":["I"],"check. Also,":["you"],"check. I've":["copied"],"check. Since":["these"],"check. isSuffixOf":["from"],"checkboard, so":["it's"],"checked (and":["this"],"checked [`map`'s":["source](http://hackage.haskell.org/package/base-4.6.0.1/docs/src/GHC-Base.html#map)"],"checked how":["others"],"checked out":["when","this"],"checked smaller":["factors."],"checked somewhere":["else."],"checked that":["the"],"checked the":["smaller","wikipedia"],"checked your":["code,"],"checked, the":["exercism"],"checking `[A..Z]`.":["Using"],"checking `isAsciiLower`":["or"],"checking a":["`Map.fromList*`"],"checking all":["the","alphabetic","the"],"checking at":["all,"],"checking balance":["may"],"checking both":["predicates"],"checking every":["character?"],"checking for":["each","null","other","null.","membership","which","silence","'!',","something","odd","`[A..Z]`.","`exceptional`."],"checking if":["all","there","all","any"],"checking in":["toRNAc"],"checking length":["with/without","of"],"checking more":["factors"],"checking only":["even","odd"],"checking primes":["rather"],"checking queen":["attacks"],"checking strings.":["Nice"],"checking stuff.":["Okay,"],"checking that":["`not`","the"],"checking the":["input","score","legnth"],"checking to":["see"],"checking two":["predicates"],"checking whether":["each"],"checking which":["response"],"checking, but":["the"],"checking. If":["you"],"checking. Try":["to"],"checkout the":["`findWithDefault`"],"checks +":["1"],"checks a":["bit"],"checks are":["redundant"],"checks does":["seem"],"checks for":["every","testing","neighbors,"],"checks from":["it."],"checks if":["a","a"],"checks in":["isQuestion"],"checks like":["`length"],"checks needed":["on"],"checks should":["be"],"checks the":["length"],"checks, although":["the"],"chere a":["`choice`"],"chess board":["as"],"chess problems,":["but"],"chessboard and":["total?"],"chided on":["here"],"child generated":["with"],"children diagram":["=","="],"children' =":["sort"],"children's name,":["since"],"childs) (chunksOf":["2"],"chill out!\"":["case,","@=?"],"chill out!\"),":["…]"],"chillOutString str":["="],"choice \"validateNumber\"":["might"],"choice and":["the"],"choice basically":["comes"],"choice for":["the","that","performance","this","this"],"choice here":["since"],"choice here.":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"choice indeed.":["'U'"],"choice is":["arbitrary,","arbitrary."],"choice of":["`when`","`f`.","`f`,","row","fold","predicate","data","data"],"choice so":["I"],"choice than":["```Data.Map```."],"choice though":["I"],"choice to":["convey","do"],"choice would":["be","be"],"choice, based":["on"],"choice, since":["it"],"choice. I":["would"],"choices that":["it"],"choices you":["could've"],"choices. It's":["not"],"choise looks":["very"],"choke if":["there"],"choke on":["an"],"choose Strict":["instead","instead"],"choose `reverse`":["not"],"choose a":["character","fold,"],"choose any":["of"],"choose better":["(named)","candidate"],"choose characters":["to"],"choose declarative":["over"],"choose different":["names"],"choose either":["you"],"choose fewer":["candidates"],"choose liftM":["here."],"choose n":["(n-1)`)"],"choose not":["to"],"choose one":["over"],"choose the":["number"],"choose to":["implement","implement","make","write","mix","do","do","interpret","define","attempt","use"],"choose what":["suits"],"choosed to":["use"],"chooses to":["use"],"choosing a":["bad","record"],"choosing one":["over"],"choosing the":["bad"],"chose `IORef`":["instead"],"chose `foldl`":["in"],"chose a":["where"],"chose another":["internal"],"chose not":["to","to"],"chose the":["minimal"],"chose to":["build","include","make","make","use","remove","use"],"chosen a":["solution"],"chosen algorithm.":["I"],"chosen for":["me"],"chosen to":["avoid"],"chosen. `s`":["and"],"chr 'z'":["instead"],"chr and":["I"],"chuck of":["memory."],"chunk lists":["?"],"chunks for":["n"],"chunks until":["you","the"],"chunksOf source":["to"],"cipher :)":["No"],"cipher n`":["is"],"ciphertext should":["always"],"circuits, it":["*stops"],"circular so":["a"],"circumstance whatsoever.":["Always"],"circumstance, since":["you"],"circumstance. Everything":["looks"],"circumstances should":["I"],"circumstances where":["they"],"clamp down":["the"],"clarification on":["`atomicWriteIORef`,"],"clarifications of":["what"],"clarify its":["intent."],"clarify more":["than"],"clarify my":["concept"],"clarify that":["silence"],"clarify that?":["I"],"clarify your":["intention","intention."],"clarify, I":["thought"],"clarity and":["conciseness","just"],"clarity at":["the"],"clarity but":["it"],"clarity here.":["At"],"clarity is":["worth"],"clarity of":["revision","code."],"clarity or":["keep"],"clarity though,":["dealing"],"clarity's sake":["("],"clarity, but":["I"],"clarity. I'm":["sure"],"clash with":["the","prelude"],"clash, I":["would"],"clashes and":["not"],"clashes as":["your"],"clashes or":["ambiguity?"],"clashes require":["it"],"class Eq":["a","a","a","a","a"],"class Functor":["f","f","f","f"],"class I've":["looked"],"class Monad":["m","m"],"class Num":["a","a","a"],"class ReadsBase":["p"],"class `DNA`":["that"],"class and":["returns"],"class as":["I've","punctuation."],"class instances":["close"],"class of":["characters","Char","valid"],"class on":["them"],"class or":["modify"],"class that":["you"],"class where":["your"],"class will":["present."],"class with":["something"],"class would":["be"],"class, inclduing":["chars,"],"class. Can":["you"],"class. It":["feels"],"classes available,":["here"],"classes using":["fewer"],"classes you":["are"],"classes, an":["similar"],"classes, how":["about"],"classic Purely":["Functional"],"classic case":["where"],"classic example":["of"],"classic mutex+var":["there."],"classification as":["some"],"classification code":["(returning"],"classification from":["how","display"],"classification is":["assigned."],"classification stage":["and"],"classification— probably":["not"],"classify 'A'":["="],"classify 'C'":["="],"classify ::":["String"],"classify dna":["=","="],"classify would":["still"],"classify, but":["all"],"classify. Thus,":["you"],"classify? That":["could"],"classifying the":["input"],"clause (`lookupPlants`)!":["Normally"],"clause (and":["remain"],"clause (e.g.":["`xs`"],"clause `head":["query"],"clause and":["just","guards","implement","give"],"clause be":["`ageOn"],"clause because":["they"],"clause before":["the"],"clause belonging":["to","to","to`"],"clause but":["got","I"],"clause called":["`asking`,"],"clause could":["be"],"clause defining":["some"],"clause for":["each","`generateResponse`.","`orbitalPeriod`?","`fromDay`","`verse`","`N`.","readability","re-used"],"clause grants":["any"],"clause here":["to"],"clause if":["you"],"clause in":["`isShouting`","`isBlank`","a","messageResponse.","`17`","`scoreLetter`?","`scoreLetter`,","here","yelling","verse,"],"clause instead":["of","since","of","of","of","of"],"clause is":["a","checking","reduntant","overcomplicated,","usually"],"clause it's":["better"],"clause looks":["a"],"clause must":["come"],"clause of":["`words`).","`transform`","responseFor.","fromList","classify,","transform,","`parts`,","isAnagramFor","`responseFor`","analyze","fromString","a","`orbitalPeriod`","`primeFactors`,","line","`responseFor`","`toRNA`"],"clause on":["toRNA","`readStatement`"],"clause or":["give"],"clause out":["of"],"clause per":["response."],"clause sans":["arguments"],"clause should":["be"],"clause since":["it's"],"clause so":["you"],"clause than":["to"],"clause that":["says"],"clause to":["store","capitalize","hide","alleviate","check","reduce","understand"],"clause was":["added,"],"clause with":["a"],"clause you":["could"],"clause\". You're":["absolutely"],"clause). Personally,":["I"],"clause). That":["should"],"clause, a":["case"],"clause, but":["I","that"],"clause, it's":["common"],"clause, like":["in:","in:"],"clause, or":["didn't","only","just"],"clause, personally.":["There's"],"clause, thinking":["about"],"clause, this":["will"],"clause. Doesn't":["really"],"clause. I":["would","might"],"clause. It":["would"],"clause. Normally":["I"],"clause. Otherwise":["this"],"clause. See":["[modules](http://www.haskell.org/tutorial/modules.html),","[modules](http://www.haskell.org/tutorial/modules.html),"],"clause. That":["way"],"clause. The":["inner"],"clause. or":["even"],"clauses a":["much"],"clauses are":["kind"],"clauses because":["they"],"clauses can't":["be"],"clauses don't":["need"],"clauses follow":["the"],"clauses for":["`isQuestion`","this","10"],"clauses have":["strange"],"clauses here,":["but"],"clauses in":["`responseFor`,","`f"],"clauses isn't":["necessary."],"clauses it's":["beter"],"clauses look":["a"],"clauses of":["isSilence","a","the","day","`toDecimal`","`orbital`"],"clauses read":["better."],"clauses since":["they"],"clauses that":["are"],"clauses using":["`any`"],"clauses vs":["knowing"],"clauses with":["4"],"clauses, but":["I"],"clauses. Come":["to"],"clauses. However,":["because"],"clauses. I":["*think*"],"clauses. Maybe":["you"],"clauses. Something":["like"],"clauses. they":["are"],"clause… so":["`responseFor"],"clean and":["concise.","nice","short.","fast,"],"clean as":["it"],"clean code":["in"],"clean enough":["here."],"clean it":["up","up.","up,"],"clean or":["use"],"clean the":["input"],"clean things":["up?","up","up"],"clean this":["up"],"clean though,":["I"],"clean type":["signatures."],"clean up":["the","the","_this_","the","the","`isNoResponse`","`phoneNumberFromString`","nested","most","`punctuation`"],"clean way":["to"],"clean would":["be"],"clean, I":["don't"],"clean, but":["I"],"clean, works":["("],"clean. HLint":["suggested"],"clean. You":["could"],"clean: this":["problem"],"cleanUpInput on":["`\\xdcML\\xc4\\xdcTS!`"],"cleanUpInput was":["written"],"cleanUpInput will":["become:"],"cleanUpStr` would":["be"],"cleaned things":["up."],"cleaned up":["-","a","a","if","my","by","a"],"cleaned` to":["the"],"cleaner (imo),":["it"],"cleaner (particularly":["in"],"cleaner (where":["you"],"cleaner -":["or"],"cleaner API":["for"],"cleaner and":["a","more"],"cleaner as-is:":["https://www.fpcomplete.com/school/pick-of-the-week/guide-to-ghc-extensions/basic-syntax-extensions#lambdacase"],"cleaner but":["I'm"],"cleaner by":["walking"],"cleaner from":["the"],"cleaner if":["you","I","you","you","I"],"cleaner in":["the"],"cleaner one-pass":["version."],"cleaner or":["faster"],"cleaner point-free":["if"],"cleaner solution":["out"],"cleaner solution.":["A"],"cleaner than":["`map","my","calculating","I","my"],"cleaner that":["way."],"cleaner to":["use","do","just","have"],"cleaner using":["`[from,from-1"],"cleaner way":["to","to","to","to","to"],"cleaner with":["wordsBy,","`all`.","a","a"],"cleaner, albeit":["denser."],"cleaner, but":["using","looks","I'll","leaving"],"cleaner, you":["really"],"cleaner. And":["point-free"],"cleaner. I":["also","would"],"cleaner. I'm":["not"],"cleaner. Is":["there"],"cleaner. Similarly":["you"],"cleaner. There":["should"],"cleaner? Pattern":["matching"],"cleanest-looking solution":["I've"],"cleaning it":["up"],"cleaning this":["up"],"cleaning, not":["the"],"cleanly separate":["the"],"cleanly translated":["to"],"cleans things":["up.","up"],"cleans up":["user-entered"],"clear -":["we"],"clear IMO.":["I'd"],"clear a":["pair","variable"],"clear and":["concise","won't","to","should","it","concise"],"clear as":["possible","I","`if","a"],"clear at":["a","a"],"clear code,":["than"],"clear either,":["because"],"clear feel":["of"],"clear for":["different"],"clear from":["its","the"],"clear how":["all"],"clear idea":["of"],"clear if":["you"],"clear improvement":["beyond"],"clear in":["use.","my","`shouting`"],"clear it's":["really"],"clear on":["what"],"clear than":["my","just","`[Char]`","before.","guards"],"clear that":["neither","it's","it","way,","`words`","whether","the","you"],"clear they":["will"],"clear they're":["defined"],"clear though,":["I"],"clear to":["simply","read,","Haskell","me","me.","me"],"clear what":["is","is","libraries","the","the","went"],"clear what's":["going"],"clear why":["`mapWords`","`foldMap`","`foldr`","`foldr`"],"clear, and":["fast."],"clear, but":["the"],"clear, or":["that"],"clear, personally.":["Looks"],"clear. Also":["the"],"clear. I":["agree"],"clear. Reading":["the"],"clear. The":["things"],"clear. `.`":["is"],"clear; the":["guard"],"clearer (after":["some"],"clearer I":["think."],"clearer and":["less","more","simplifies"],"clearer as:":["```(`elem`"],"clearer by":["defining"],"clearer delineation":["between"],"clearer fashion":["-"],"clearer idea":["of"],"clearer if":["you","you","you"],"clearer in":["`responseFor`"],"clearer so":["I"],"clearer than":["[1,","`seq`,","just","the","doing"],"clearer to":["use","write","use","return","do"],"clearer type":["signatures"],"clearer what":["it"],"clearer without":["them,"],"clearer, I":["mean"],"clearer, IMO.":["I"],"clearer, adding":["a"],"clearer, and":["the","will"],"clearer, as":["this"],"clearer, it":["explains"],"clearer. I":["didn't"],"clearer. In":["this"],"clearer. Now":["it"],"clearer. Thanks":["again."],"clearer.. without":["you"],"clearer: http://stackoverflow.com/questions/19958897/return-whats-going-on-here/19959139?noredirect=1#19959139":["."],"clearest thing":["in"],"clearly a":["question"],"clearly as":["`(&&)"],"clearly expressed":["with","as"],"clearly expresses":["its"],"clearly gets":["across"],"clearly identifies":["it"],"clearly if":["the"],"clearly isn't":["the"],"clearly it":["will"],"clearly missing":["out"],"clearly represent":["what"],"clearly states":["that"],"clearly tells":["the"],"clearly than":["the"],"clearly that":["responseFor"],"clever algorithm":["isn't"],"clever although":["it"],"clever and":["knowledgeable"],"clever but":["I"],"clever enough":["to"],"clever in":["that","addToSum"],"clever solution":["possible"],"clever solution,":["but"],"clever than":["it","it"],"clever trick":["to"],"clever way":["would","implement","to"],"clever ways":["to"],"clever\", so":["I"],"clever, `not":["."],"clever, but":["you"],"clever, hadn't":["thought","seen"],"clever, you":["could"],"cleverer in":["mind?"],"cleverly. My":["next"],"clicked the":["\"looks"],"clicking that":["button."],"clicking the":["`OK,"],"client doing":["unexpected"],"clojure examples":["indiscriminately."],"clojure tests":["weren't"],"clojure. Most":["of"],"clone the":["example."],"close account":["on"],"close an":["account"],"close bank,":["then"],"close non-empty":["accounts..."],"close over":["bindings"],"close this":["exercise"],"close to":["how","their","what","the","point","a","C"],"close together":["until"],"close your":["solution","solution."],"close! Don't":["give"],"close, but":["I"],"closed account":["as"],"closed and":["Right"],"closed before":["or"],"closed form":["solution","solution","solution","solution","solution","solution","solution","solution"],"closed when":["there"],"closed, you":["should"],"closed-form solution":["to"],"closely I":["see"],"closely and":["seen"],"closely at":["the"],"closely related":["to"],"closely resembles":["the"],"closely to":["`toRNA`"],"closely with":["how"],"closely! Thank":["you!"],"closely). Is":["the"],"closely, as":["in"],"closer look":["at","tomorrow.","in","at","at","in","at"],"closer maps":["to"],"closer to":["what","parseNumber?","`readStatement`,","idiomatic,","a","the","folder..","O(number"],"closer, and":["had"],"closer... to":["the"],"closes transaction":["in"],"closest one":["that"],"closest to":["the"],"closing account":["will"],"closing my":["solution"],"closing non-zero":["accounts"],"closure and":["then"],"closure, defining":["`word`"],"closures, also":["you"],"clue how":["at"],"clue of":["where"],"clue that":["it"],"clue what":["you"],"clue what's":["going"],"clues to":["still"],"clumsy with":["the"],"clumsy. is":["there"],"clunkiness of":["lock"],"clunky and":["`splitAt`","hacky","long-winded"],"clunky to":["me"],"clutter in":["my"],"cluttering your":["code"],"cnt` since":["that"],"coalesced around":["the"],"code (":["comment"],"code (and":["you"],"code (e.g.":["take","`bstRight`,"],"code (except":["in"],"code (in":["this"],"code (no":["`atomically`,"],"code (not":["the"],"code (printing":["the"],"code (returning":["the"],"code (see":["my"],"code -":["it"],"code Base":["covers"],"code I":["like","do","posted","might","see","use","submit","submit","have","wrote","think."],"code a":["little","little","lot","bunch","bit!","bit","little","bit","little","bit","little","lot","bit","bit","bit.","bit"],"code above":["is"],"code according":["to"],"code actually":["does","compiles"],"code already":["-"],"code also":["gives"],"code and":["not","get","works","your","failed.","coding","see","reduces","failed","you","unlikely","then","avoid","locally","think","nitpicks.","that","it","it","few","in"],"code anyway,":["but"],"code are":["unnecessary,","both"],"code as":["comments.","of","a"],"code as-is":["will"],"code available":["in"],"code base":["there"],"code because":["you","`do","`words"],"code becomes":["clearer."],"code being":["generated,"],"code block":["and"],"code box":["on"],"code box.":["Once"],"code breaking.":["I"],"code builds":["up"],"code but":["I","the","had","makes","its"],"code by":["getting","google'd","default","simply","using","phrasing"],"code can":["be"],"code can't":["accommodate."],"code changes":["over"],"code cleaner,":["but"],"code clearer,":["and"],"code considerably;":["none"],"code could":["be","become"],"code couldn't":["be"],"code disgusts":["me."],"code do":["it."],"code does":["pass","not"],"code doesn't":["even","have"],"code doesn't,":["due"],"code duplication":["without","by"],"code easier":["to","to","to","to"],"code effective":["were"],"code ever.":["internal"],"code fails":["two"],"code faster":["(in"],"code feels":["a"],"code filters":["out)"],"code fits":["within"],"code for":["boardString","a","a","`square`:","the"],"code from":["the","changes","SimplePrimes.hs","@camden?"],"code generation":["or"],"code gets":["to","simpler."],"code golf":["is"],"code has":["a","a","a"],"code here":["that","is"],"code here)":["actually"],"code highlight":["effects"],"code if":["the"],"code immediately.":["But"],"code implementing":["the"],"code importing":["your"],"code in":["such","the","such","such","my","most","GHCi).","the","GHCi).","order","such","a","IO","lines"],"code into":["a"],"code is":["great!","going","all","that","very","concise","already","used","unnecessarily","very","well-written","a","probably","normally","unreadable,","different.","inefficient","the","a","actually","simpler","easier","to","indented","preferred","in","serviceable.","interpreted","executed","run","just","short","calling","really"],"code isn't":["the","indented"],"code it":["so","makes"],"code itself":["looks"],"code just":["works","felt"],"code less":["clear.","verbose","pretty,"],"code like":["`all","this"],"code look":["like"],"code looks":["to","quite","fine","pretty","great!!!","good!","good","like","perfectly","fine","great,","well."],"code may":["be"],"code might":["be","be"],"code more":["complicated","difficult","readable","readable,","readable","readable.","robust","readable","readable","obvious.","obvious:","readable,","nice.","clean.","readable.","clean?"],"code mostly":["follows"],"code much":["less"],"code not":["doing"],"code now":[":)"],"code of":["this"],"code on":["this"],"code only":["has"],"code or":["if"],"code pass":["the"],"code passes":["the","even"],"code points":["which"],"code points,":["you"],"code put":["inside"],"code readable":["(mostly)"],"code readable,":["and"],"code related":["to"],"code repetition,":["also","which"],"code reuse":["is"],"code reuse,":["modularity"],"code run":["in"],"code safely,":["without"],"code seem":["busy"],"code seems":["overwrought;","good","fine","more"],"code shorter":["and","and","and","and"],"code shorter.":["`bstLeft`,"],"code should":["be"],"code simpler":["and","and","and"],"code size":["difference","by"],"code snippet":["perhaps)."],"code so":["far."],"code some":["buggy:"],"code sorely":["lacks"],"code spans":[";)"],"code style":["is"],"code styling":["goes"],"code swapping":["```(==)```"],"code that":["uses","is","looks","does","I","could","`where`","is","uses","relies","can","can","you","returns","in","I"],"code that's":["not","fast"],"code the":["recursion","numbers"],"code then":["maybe","I"],"code there":["isn't"],"code though":[":D.",":)","(it"],"code to":["write","use","put","use","check","it","run","use","tokenize","use","create","port.","work","look","pointfree.","me,","do","use","be","check","use"],"code underneath":["the"],"code unless":["it's"],"code up":["what"],"code uses":["shorter","shorter"],"code using":["pattern","`all`","`sum`","only","a","a"],"code usually":["looks"],"code was":["ever","ported","quite"],"code when":["half"],"code where":["you"],"code while":["I'm"],"code will":["recognize","break.","treat","compile.","still","scan","stop","evaluate","be","be","no","be","be"],"code with":["`Data.Map`s","it.","the","vastly","all","GHCi","GHCi","simple","terser"],"code within":["Emacs!"],"code without":["using","using","import"],"code works":["but","in"],"code would":["be","be","be"],"code wouldn't":["work"],"code you":["had","will","would","wouldn't","haven't"],"code you're":["using"],"code! But":["I","there"],"code\", so":["hopefully"],"code) and":["see"],"code) pair":["a"],"code). So":["my"],"code, I":["use","just","tend"],"code, I've":["pushed"],"code, `map":["toLower"],"code, although":["I"],"code, and":["when","it","for","let","let","you"],"code, but":["I","I'd","what's","take","this","for","it","I"],"code, does":["it?"],"code, easily":["fixed"],"code, given":["all"],"code, in":["the"],"code, is":["there"],"code, it":["would","is","will","shouldn't"],"code, mine":["is"],"code, more":["obvious,"],"code, one":["is"],"code, since":["\"I'll","`dna`"],"code, so":["I've"],"code, than":["reading"],"code, there":["are"],"code, this":["arguably"],"code, too":["much"],"code, which":["can","should"],"code. About":["the"],"code. Also,":["despite"],"code. Both":["your"],"code. But":["with"],"code. By":["just"],"code. Can":["you"],"code. Consider":["using"],"code. Did":["you"],"code. Flipping":["that"],"code. For":["example,"],"code. Generally":["speaking,"],"code. Here's":["how"],"code. Higher":["level"],"code. I":["probably","did","worried","am"],"code. I'm":["not"],"code. If":["I","you"],"code. In":["this"],"code. It":["looks","isn't"],"code. Maybe":["it"],"code. Nonetheless,":["I"],"code. One":["of"],"code. Perhaps":["`countWord`"],"code. Point":["free"],"code. Similarly,":["you"],"code. Some":["code"],"code. There":["is"],"code. They":["do"],"code. This":["looks"],"code. Unless":["someone"],"code. Using":["a"],"code. What":["is"],"code. You":["actually","are"],"code. `scoreLetter`":["is"],"code... Any":["other"],"code... Other":["solutions"],"code/logic here":["anyways..."],"code: it's":["concise"],"code; is":["there"],"code? It":["may"],"coder, I":["always"],"codes (+2":["if"],"code… there's":["a"],"codify what":["we"],"coding in":["haskell"],"coding it":["by","yourself"],"coding overhead,":["you"],"coding style":["in","and"],"coding then":["this"],"coefficients (`choose":["n"],"coerce it":["to"],"coerce to":["Double"],"coercion completely.":["I"],"coincidental implementation":["detail"],"coincidentally implemented":["as"],"coined! While":["you"],"collapse all":["of"],"collate M.empty":["wordCollection"],"collate set":["k"],"collect all":["those"],"collect in":["a"],"collect metadata":["about"],"collected immediately":["but"],"collected sooner":["but"],"collected until":["the"],"collecting chunks":["until"],"collecting thunks":["unless","and"],"collection runtime":["systems)"],"collections, however":["the"],"collector (which":["might"],"collisions and":["better"],"collisions with":["stuff"],"cols ::":["[Vector"],"cols are":["sharing"],"cols\" $":["(1,"],"cols) (msInt":["\"1"],"column (typically":["the","the","the"],"column and":["transpose,"],"column lines,":["so"],"column major":["storage."],"column with":["no"],"column, so":["at"],"columns and":["m"],"columns but":["not"],"columns that":["corresponds"],"columns. A":["`where`"],"columns. Something":["like"],"combination of":["`not`","\"for","`foldl'`","`sum`","`Data.List.unfoldr`"],"combination using":["`(.)`","`(.)`\""],"combination with":["`isUpper`","`any`","`map","the","a"],"combinator `any`":["I.e.:"],"combinator and":["code"],"combinator for":["this,"],"combinator from":["Data.Char."],"combinator in":["`shouting`.","Data.Char"],"combinator is":["justified...?","`head","usually"],"combinator like":["you"],"combinator makes":["things"],"combinator of":["parsers"],"combinator that":["does","does"],"combinator to":["write"],"combinator with":["`isLower`"],"combinator you're":["looking"],"combinator\" `(.).(.)`,":["which"],"combinator, especially":["when"],"combinator, it":["may"],"combinator? There's":["no"],"combinatorial, it":["may"],"combinators are":["better","easier","not"],"combinators can":["be"],"combinators could":["be"],"combinators for":["maps.","this"],"combinators from":["base"],"combinators in":["here","terms"],"combinators instead":["of","of","of","of","of"],"combinators like":["`map`","map","`flip`"],"combinators such":["as"],"combinators that":["you"],"combinators the":["compiler"],"combinators when":["possible):"],"combinators, I":["don't"],"combinators. This":["may"],"combine 7":["and"],"combine `all`":["with"],"combine conditions,":["any"],"combine filters.":["I"],"combine it":["with"],"combine monadic":["and"],"combine operations,":["and"],"combine some":["of"],"combine the":["passes"],"combine them":["with"],"combine them?":["Here's"],"combine things,":["and"],"combine this":["functionality"],"combine those":["into"],"combine two":["instances"],"combine values":["having"],"combine with":["`replicateM`."],"combined as":["you"],"combined the":["result","`removePunctuation`"],"combined with":["id,","`insertWith`,"],"combines `div`":["and"],"combines values":["you"],"combining function,":["and"],"combining function.":["See"],"combining functions":["in"],"combining operation":["on"],"combining predicates":["(`::a"],"combining the":["two"],"come a":["lot"],"come across":["`Data.Vector.Algorithms.Intro`.","binary","IORef,"],"come across.":["Props"],"come at":["the","things"],"come back":["to","with","to","to","to","and"],"come back-":["as"],"come before":["`S"],"come clean:":["this"],"come in":["handy.","and","handy","handy."],"come off":["the"],"come to":["mind:","this:","haskell"],"come to.":["Pretty"],"come up":["with","with","with","with","with","with","with","with","with","with","with","with","with","with","with","with"],"come with":["and","*normalization*","solution","Data.Map.Strict.","a"],"comes after":["the"],"comes as":["a"],"comes back":["to"],"comes down":["to","to","to","to"],"comes from":["the","the","the","the","the"],"comes in":["the"],"comes in,":["with"],"comes into":["play","this"],"comes out":["really"],"comes standard":["with"],"comes the":["jargon"],"comes through":["again"],"comes up":["in"],"comes with":["the","experience."],"comfortable with":["the","those.","`map`","them.","-"],"comforting.. I":["didn't"],"cominator approach":["will"],"coming across":["IORef.."],"coming back":["to"],"coming first":["so"],"coming first.":["I'm"],"coming from":["you.","other","Erlang","a","other","a","a"],"coming from.":["It"],"coming in":["from"],"coming to":["me","me","me)."],"coming up":["with"],"comma in":["an"],"comma to":["separate"],"command as":["suggested"],"command from":["history,"],"command line":["options"],"command line.":["It"],"command to":["test"],"command, please":["ignore."],"command.. please":["ignore"],"commands? I":["guess"],"comment )":["and"],"comment about":["the","it,","\"finding","tail-recursion","strictness","that"],"comment after":["I"],"comment as":["concurrency"],"comment at":["the"],"comment because":["it"],"comment explaining":["why"],"comment from":["@branson.","previous"],"comment here":["is"],"comment in":["the","the"],"comment is":["wrong","better"],"comment making":["it"],"comment of":["course,"],"comment on":["why","the","the","the","here","the","previous","the","the"],"comment out":["dead"],"comment regarding":["the"],"comment removed)":["to"],"comment should":["do"],"comment to":["turn","be"],"comment until":["after"],"comment why":["the"],"comment with":["a"],"comment, I":["don't","thought","didn't"],"comment, and":["moved"],"comment, but":["it","it's","that"],"comment, don't":["miss"],"comment, it":["is"],"comment. But":["I"],"comment. Can't":["personally"],"comment. I":["thought"],"comment. Your":["preference"],"comment: for":["consistency"],"commented line":["is"],"commented on":["in","the"],"commented out":["version","version"],"commented, very":["useful!"],"commenting on":["the"],"comments about":["tail-recursion","trivial"],"comments and":["sincerely","http://stackoverflow.com/questions/841851/how-do-you-combine-filter-conditions","the","previous"],"comments are":["highly","not"],"comments at":["the"],"comments below":["are","are"],"comments could":["have"],"comments from":["version"],"comments hurt":["the"],"comments in":["the","Haskell:"],"comments of":["iteration"],"comments on":["my","how","idiomaticity","asymptotic","iteration","the","previous","the"],"comments were":["necessary."],"comments! This":["is"],"comments, @ahmed":["and"],"comments, I":["rather","tried"],"comments, but":["not"],"comments, this":["looks"],"comments, you":["have"],"comments. Also,":["since"],"comments. I":["am"],"comments. This":["is"],"comments.. Those":["are"],"comments.I try":["to"],"commit most":["of"],"common '\\n'.join":["isn't"],"common 1":["point"],"common 1-point":["letters"],"common and":["publicly","often","everybody","important"],"common approach":["exists"],"common bases.":["And"],"common because":["then"],"common cases":["(1"],"common clause":["in"],"common code":["into"],"common convention":["for"],"common folds":["in"],"common for":["me"],"common form,":["as"],"common format":["and"],"common functions":["and"],"common idiom":["in"],"common if":["you're"],"common in":["Haskell","BSTs","Haskell","real","Haskell,","Haskell","haskell","Haskell"],"common is":["(short)"],"common letter":["order."],"common module":["internal"],"common modules":["like","with"],"common name":["for","for"],"common operators":["so"],"common option":["is"],"common parts":["of"],"common pattern":["to"],"common patterns":["in"],"common practice":["for"],"common readability":["and"],"common scenario.":["Say"],"common shared":["strings"],"common solution":["to","uses"],"common strings":["(not"],"common stuff,":["something"],"common style":["to","for","is"],"common styles":["for"],"common technique,":["you'll","encapsulated"],"common than":["using"],"common these":["days,"],"common thing":["to"],"common though.":["I'd"],"common to":["see","implement","see","put","do","use","have","write","use","have","write","define","use","do","just","name","use","write","call","import","have","use","write","write","write","put","put","use","put","separate","write","use","place","put","see","do","do","see","use","indent","use","write","have","do","do","use","write"],"common typeclasses,":["not"],"common way":["to"],"common ways":["for"],"common) to":["be"],"common). But":["I'm"],"common. 2).":["It"],"common. Nothing":["wrong"],"common. You":["could"],"commonly accepted":["styles","style","style"],"commonly just":["`String`."],"commonly see":["code"],"commonly seen,":["but"],"commonly used":["Haskell","function","unless","(for","for","wherever","either.","for","though,","than","than","formatting","in"],"commonly used,":["and"],"commonly written":["as","as","as","as","as","as"],"communication as":["externally"],"community :)":["but"],"community is":["a"],"community site":["which"],"community standard?":["I"],"comp as":["`map"],"comp because":["it"],"comp-sci studies;":["I've"],"comp2 ::":["(a","(a","(a","(a"],"comp2 a":["b"],"comp2 f":["g"],"compact and/or":["readable"],"compact as":["your"],"compact code":["in"],"compact it":["down"],"compact representation,":["and"],"compact this.":["Thanks!"],"compact way":["but"],"compact when":["shoving"],"comparative inefficiency":["is"],"comparator separated":["by"],"compare \"apple\"":["and"],"compare `length`":["with"],"compare against":["a"],"compare case":["normalized"],"compare elements,":["creating"],"compare lower-case":["`s`"],"compare the":["two","case","case"],"compare two":["lists."],"compare word":["with"],"compare x":["y)"],"compare your":["version"],"compare? It":["took"],"compareAgainst .":["filter","filter"],"compareAnagram =":["((==)"],"compareAnagram)` if":["you"],"compared to":["others).","`fromListWith`","most.","the","having","the","Strings.","all","```O(n^2)```","where.","using"],"compared with":["the"],"compares case":["normalized"],"comparing sooner":["if"],"comparing the":["values","sorted","results"],"comparing them":["would"],"comparing to":["the","empty","0"],"comparison and":["memory"],"comparison before":["the"],"comparison between":["1"],"comparison for":["the","`x"],"comparison is":["supposed"],"comparison should":["probably","probably"],"comparison to":["a","also"],"comparison, though":["the"],"comparison. I":["don't"],"comparison. Otherwise,":["this"],"comparison. The":["tests"],"comparison? Then":["again,"],"comparisons and":["about"],"comparisons for":["any"],"comparisons just":["to"],"comparisons needed":["to"],"comparisons to":["other","check"],"comparisons yourself.":["A"],"comparisons, the":["fact"],"comparisons, these":["implementations"],"comparisons. The":["hard-coded"],"comparsion in":["lines"],"compartmentalization and":["modularity."],"compatible. The":["`return`"],"competing typeclasses":["because"],"compilaction (e.g.":["rewrite"],"compilation) of":["the"],"compile because":["of"],"compile down":["to","to","to","to","to"],"compile file":["with"],"compile into":["equal"],"compile time":["by","without","you"],"compile to":["the","better"],"compile until":["you"],"compile with":["optimizations...)","optimizations...)"],"compile without":["this"],"compile you":["need"],"compile your":["code"],"compile, but":["it"],"compile. How":["can"],"compile. Where":["can"],"compiled as":["a"],"compiled code":["anyway,"],"compiled down":["into"],"compiled fixed":["by"],"compiled program":["but"],"compiled with":["-O2","optimizations.","`ghc"],"compiled. There's":["a"],"compiled/run, even":["if"],"compiler (with":["-Wall)"],"compiler a":["little"],"compiler and":["library","libraries"],"compiler barked.":["Is"],"compiler better":["information"],"compiler can":["infer","figure","optimize","often","sometimes","mechanically","take","sometimes","likely","do","do","do","optimize","do"],"compiler define":["`records`"],"compiler doesn't":["eliminate","rewrite"],"compiler enforce":["correctness"],"compiler error":["here."],"compiler for":["further"],"compiler has":["more","more"],"compiler how":["to"],"compiler infers":["that"],"compiler is":["going","stupid,","telling","clever","with"],"compiler isn't":["optimizing"],"compiler issue":["that"],"compiler knows":["how","more"],"compiler makes":["the"],"compiler may":["even"],"compiler might":["make"],"compiler more":["information","information"],"compiler offers":["no"],"compiler optimazation":["not"],"compiler optimizations)":["would"],"compiler optimizations.":["There's"],"compiler other":["than"],"compiler output,":["but"],"compiler recognize":["that"],"compiler should":["be","be"],"compiler to":["optimize","figure"],"compiler tricks.":["The"],"compiler warning":["for"],"compiler warnings":["in","about"],"compiler will":["realize","generate","do"],"compiler won't":["fix"],"compiler works":["but"],"compiler would":["accept","infer","take"],"compiler wouldn't":["make"],"compiler's output,":["if"],"compiler's precedence":["hierarchy."],"compiler/runtime do":["the"],"compiler? It":["seems"],"compilers do":["trivial"],"compiles and":["works"],"compiles, then":["start"],"compiling if":["it"],"compiling in":["Windows..."],"compiling or":["running"],"compiling with":["`ghc","-O2","ghc-core:"],"complain :-)":["Though"],"complain about":["really,","here.","here."],"complain when":["it"],"complained about":["including"],"complaining about":["empty"],"complaining that":["it's"],"complains about":["the"],"complains that":["it"],"complement or":["transcribe"],"complement`. Also":["you"],"complete 'partially":["applied"],"complete all":["haskell"],"complete function":["now.","import,"],"complete halt:":["I"],"complete mess":[":-)"],"complete module":["(as"],"complete newbie":["in"],"complete the":["exercise."],"complete this":["problem.","task.","task.","task.","task.","task.","task."],"complete unless":["you"],"completed more":["advanced"],"completely -":["I"],"completely by":["using"],"completely convinced,":["but"],"completely discount.":["While"],"completely done,":["and"],"completely eliminated":["my"],"completely equivalent":["but"],"completely evaluated":["to"],"completely forgot":["about","about","about","about","about"],"completely forgotten":["how"],"completely irrelevant.":["It"],"completely lost,":["and"],"completely missed":["that"],"completely pointfree":["`f"],"completely right":["sir."],"completely stumped,":["so"],"completely the":["wrong"],"completely traversing":["the"],"completely understanding":["why."],"completely unequipped":["to"],"completely unwieldy,":["while"],"completely with":["only"],"completely wrong.":["Sorry"],"completely. I":["can"],"completeness/consistency then,":["I"],"complex (`fromString`,":["`column`,"],"complex :)":["I'll"],"complex and":["harder"],"complex enough":["to"],"complex for":["reading."],"complex function":["is"],"complex idea":["is"],"complex looking":["as"],"complex monad":["transformers."],"complex since":["I'm"],"complex sort":["operation,"],"complex than":["others."],"complex the":["input"],"complex to":["fit"],"complex ways":["of"],"complex will":["make"],"complex, and":["contain"],"complex, you":["can"],"complex. There":["are"],"complexity `O(gradesCount":["+"],"complexity and":["this"],"complexity as":["`sort`.","you.","this"],"complexity but":["better"],"complexity by":["constant","reverse,"],"complexity doesn't":["get"],"complexity even":["comes"],"complexity for":["not"],"complexity is":["very"],"complexity of":["type","your","`scoreLetter`","your","algorithms","the"],"complexity over":["the"],"complexity seems":["a"],"complexity than":["mine"],"complexity that":["doesn't"],"complexity to":["use"],"complexity vs":["\"make"],"complexity when":["I","reading."],"complexity which":["might"],"complexity while":["staying"],"complexity), which":["isn't"],"complexity, I":["don't"],"complexity, but":["it","it"],"complexity, can":["you"],"complexity, so":["foldr","solution"],"complexity, this":["will"],"complexity, while":["in"],"complexity, you":["may"],"complexity. I'll":["keep"],"complexity. You":["would","may"],"complexity. if":["it"],"complicate code.":["Can"],"complicated (and":["much"],"complicated and":["less","hard","unintuitive","uses"],"complicated but":["it","I'm"],"complicated composition,":["it"],"complicated custom":["accumulator"],"complicated for":["no","a"],"complicated implementation":[":)."],"complicated logic":["for"],"complicated part":["sits."],"complicated projects":["it"],"complicated semantics":["when"],"complicated than":["it","this,","it","this.","it","it","it","I","is"],"complicated to":["do,"],"complicated transform":["operation"],"complicated, and":["partly"],"complicated, can":["you"],"complicated, e.g.":["e.g."],"complicated, i.e.":["it","it"],"complicated, then":["you"],"complicated, try":["searching"],"complicated. How":["could"],"complicated. I'm":["not"],"complicated. Of":["course"],"complicated. What":["does"],"complicated. You":["may"],"complicated. it":["could"],"complile for":["me."],"compliter to":["the"],"components (*f*,":["*canonical*"],"components for":["a"],"components\" -":["while"],"components. Then":["you"],"composable in":["general"],"composable mutability":["and"],"compose `filter`":["and"],"compose `length":["."],"compose `swapMVar`":["and"],"compose functions.":["I'm"],"compose than":["MVar)."],"compose the":["together"],"compose two":["functions","two-argument"],"compose, e.g.":["consider:"],"compose2 ::":["(d"],"compose2 =":["(.)"],"compose2 f":["g","g"],"composed of":["alpha-numeric"],"composed with":["other","another","`id`"],"composes two":["functions:"],"composing `not`":["with"],"composing a":["function"],"composing the":["functions.","functions,"],"composing two":["`filter`"],"composing with":["`unSchool`"],"composition and":["the","not"],"composition around":["into"],"composition chains,":["but"],"composition for":["readability."],"composition from":["#2"],"composition in":["line"],"composition isn't":["right..."],"composition of":["existing","the","```concat```","functions"],"composition operator":["is","```.```."],"composition operator.":["I've"],"composition or":["freeing"],"composition to":["get"],"composition will":["make"],"composition you":["used"],"composition, it":["might"],"composition, that's":["just"],"composition, which":["can"],"composition. I":["don't","had"],"composition? I":["like"],"compositionally oriented,":["like"],"compositions and":["function"],"compositions of":["map.","map."],"compositions, then":["a"],"compositions. I":["can"],"compositions. `unlines":["."],"compositions? I":["feel"],"comprehend everything":["and"],"comprehend how":["the"],"comprehend). Given":["that"],"comprehend. But":["if"],"comprehensible. First,":["you"],"comprehension (just":["not"],"comprehension (or":["`concatMap`,"],"comprehension `[(x,":["1)"],"comprehension and":["it"],"comprehension anyways.":["I"],"comprehension as":["is,","I"],"comprehension but":["this","this"],"comprehension can":["do"],"comprehension documentation":["`concatMap`"],"comprehension doesn't":["make"],"comprehension for":["readability"],"comprehension in":["`anagramsFor`.","`createInverseMap`?","`allergies`,"],"comprehension instead":["of"],"comprehension is":["the","an","very","nicer."],"comprehension of":["`[(w,"],"comprehension or":["list","map"],"comprehension should":["do"],"comprehension that":["wouldn't","looks"],"comprehension to":["generate","build","build","flatten"],"comprehension with":["a","more"],"comprehension without":["the","too"],"comprehension works":["fine"],"comprehension) over":["the"],"comprehension). Would":["be"],"comprehension, `(words,":["1)`"],"comprehension, but":["it"],"comprehension, like":["[n,(n-1)..m]"],"comprehension, nice":["work"],"comprehension, your":["input"],"comprehension. Did":["you"],"comprehension. Here's":["one"],"comprehension. You":["can"],"comprehension? You":["don't"],"comprehension? that's":["comforting.."],"comprehensions and":["`Data.Char`"],"comprehensions are":["just","very"],"comprehensions can":["often","have"],"comprehensions in":["`garden`"],"comprehensions is":["a"],"comprehensions most":["of"],"comprehensions or":["the"],"comprehensions to":["see"],"comprehensions yet,":["time"],"comprehensions, `toUpper'":["ws"],"comprehensions, but":["that's","it"],"comprehensions, consider":["using"],"comprehensions. If":["you"],"comprehensions.. yeah":["that"],"comprehensive the":["standard"],"comprehentions looks":["cool"],"comprehentions to":["make"],"compress the":["amount"],"compromises on":["the"],"comps and":["then"],"comps' logic":["changed"],"comps', as":["it's"],"comps'` is":["wrong"],"computaion, but":["in"],"computation `(f":["kx"],"computation `o":["+"],"computation `old":["+"],"computation and":["storing","still","saving"],"computation based":["on"],"computation cannot":["be"],"computation eagerly":["and"],"computation from":["the"],"computation happens":["when","at"],"computation has":["to"],"computation is":["done","forced.","guaranteed","run","failed"],"computation isn't":["fused"],"computation multiple":["times."],"computation must":["be","be"],"computation of":["length"],"computation on":["`target`"],"computation passed":["to"],"computation related":["to"],"computation that":["will"],"computation will":["be"],"computation without":["do"],"computation) and":["when"],"computation, and":["the","you've"],"computation, excluding":["auxiliary"],"computation, it":["generates"],"computation. Examples":["where"],"computation. This":["is"],"computation. You":["can"],"computational context":["(Monad),"],"computational resources":["n!(n-m)!/m!"],"computations concerned":["with"],"computations for":["a"],"computations in":["territories."],"computations when":["`fromListWith`"],"computations where":["you"],"computations will":["create"],"computations) that":["look"],"computations. Because":["deadlocks"],"compute `Teenth`—":["I"],"compute `normalize":["x`"],"compute `squareSize`,":["since"],"compute `total`":["directly."],"compute a":["sum.","multiple"],"compute nx":["avoids"],"compute the":["counts","same","name","value","transform"],"compute those":["once"],"computed as":["`insert"],"computed at":["most","most","most","most","most"],"computed directly,":["but"],"computed during":["the"],"computed even":["if"],"computed exactly":["once"],"computed for":["both"],"computed multiple":["times","times"],"computed once":["per","for"],"computed once.":["It","This"],"computed only":["once."],"computed the":["primes"],"computed twice...":["but"],"computed value":["for"],"computed, really":["there"],"computed, so":["what"],"computed, using":["an"],"computer and":["by"],"computer in":["binary,"],"computers has":["very"],"computes `1+1+1+1+1+1`":["is"],"computing a":["sum","list"],"computing the":["score","Int,","accumulator","length"],"conaines a":["list","list"],"concat $":["replicate","intersperse","map"],"concat .":["map","transpose`"],"concat [\"(\",":["area,"],"concat and":["unlines","the"],"concat as":["a"],"concat at":["the"],"concat operation":["when"],"concat will":["work"],"concat) $":["transpose"],"concat)` seems":["more"],"concat, or":["in"],"concat. Reverse":["is"],"concatMap (++":["\"\\n\")"],"concatMap (\\(d,":["s)"],"concatMap (flip":["(++)"],"concatMap and":["M.toList"],"concatMap is":["not"],"concatMap isDivisible":["raindrops`"],"concatMap to":["map"],"concatMap will":["iteratively"],"concat`, however":["it"],"concatenate all":["the"],"concatenate the":["two","zeros"],"concatenating the":["strings"],"concatenating with":["`++`."],"concatenation happening.":["I'll"],"concatenation of":["a","a"],"concatenation with":["prepending"],"concatenation. You":["might"],"concatenations but":["I"],"conceivably short-circuit":["if"],"concept here":["is"],"concept of":["a","invalid","how","an"],"concept should":["be"],"concept which":["uses"],"concept, instead":["reflects"],"concept, it":["might"],"concepts (in":["heroic"],"concepts are":["different,","often","used."],"concepts first.":["I"],"concepts in":["Haskell."],"concepts it":["all"],"concepts simple":["to"],"conceptually because":["you"],"conceptually quite":["nice."],"conceptually simple,":["but"],"concern here,":["as"],"concern if":["I"],"concern regarding":["`isSuffixOf`."],"concern this":["is"],"concern was":["that"],"concern with":["this"],"concerned about":["the","all","iteration","lookup","measuring","handling","the"],"concerned for":["me,"],"concerned with":["getting","having"],"concerned, I":["guess"],"concerned, I've":["dropped"],"concerned, the":["asymptotic"],"concerned, you":["have"],"concerns about":["\"creating\""],"concerns and":["make"],"concerns in":["this"],"concerns of":["classifying"],"concerns. Wonder":["if","if"],"concise (although":["you"],"concise -":["I"],"concise and":["is","readable.","clearer"],"concise as":["it","is..."],"concise if":["written"],"concise than":["things","checking"],"concise way":["to","to","of","to"],"concise way,":["so"],"concise without":["sacrificing"],"concise yet":["descriptive."],"concise you":["could"],"concise, but":["it's","I'm","I'm","complex"],"concise, clear,":["and"],"concise, try":["using"],"concise. Maybe":["too"],"concise. Thanks":["a"],"concise... just":["trying"],"concisely (without":["do"],"concisely as":["just","`isLetter"],"concisely split":["words"],"concisely using":["`all`"],"concisely with":["just"],"concisely, so":["that's"],"conciseness for":["this"],"conciseness over":["runtime"],"conciseness since,":["and"],"conciser single-line":["formulation."],"concision rather":["than"],"concision to":["be"],"concision, and":["made"],"conclusion experimentally":["while"],"conclusion it":["probably"],"concrete example":["there"],"concrete tips":["how"],"concrete type":["makes"],"concurrency (in":["Haskell"],"concurrency and":["it's","locking"],"concurrency code":["looks"],"concurrency. Now":["I"],"concurrency. Only":["the"],"concurrent access":["will"],"concurrent code.":["What"],"concurrent constructs,":["they"],"concurrent for":["free."],"concurrent users":["and"],"concurrent variables,":["conposable."],"condense the":["two"],"condition (e.g.":["Fifth"],"condition (empty":["s)"],"condition (like":["you"],"condition and":["outcome","response"],"condition because":["the","it"],"condition catching":["empty"],"condition entirely":["if"],"condition for":["input","that"],"condition in":["a","a","`resetName`","`incrementBalance`."],"condition is":["referring","slightly","already","not"],"condition matched":["meant."],"condition might":["be"],"condition to":["your","check","`allCaps`"],"condition was":["so"],"condition with":["an"],"condition without":["requiring"],"condition you":["could"],"condition you're":["missing"],"condition, `last":["x"],"condition, but":["it","couldn't"],"condition, so":["you"],"condition. I":["marked"],"condition. Maybe":["you"],"conditional -":["something"],"conditional and":["the"],"conditional logic?":["Etrepum's"],"conditionality -":["both"],"conditionals approach":["would"],"conditionals this":["simple,"],"conditionals, I":["think"],"conditions as":["separate"],"conditions at":["runtime,"],"conditions for":["increased","isAggressive,","0,"],"conditions into":["separate","where","functions","functions","functions.","their"],"conditions more":["semantic"],"conditions separately,":["possibly"],"conditions so":["I"],"conditions to":["use","their"],"conditions using":["nested"],"conditions were":["removed,","changed"],"conditions without":["use"],"conditions) this":["effectively"],"conditions, any":["advice"],"conditions, as":["you"],"confident in":["it)."],"confident of":["the"],"confirm, `fromListWith`":["would"],"confirming! I'm":["wondering"],"conflict coming":["in"],"conflict with":["`show`."],"conflicts with":["Prelude."],"confronted with":["a","a"],"confuse potential":["reviewers"],"confused about":["why","why","why","why","Data.Map.Strict,","how"],"confused at":["why"],"confused by":["your","this","this","some","something","all","what"],"confused hamming":["distance"],"confused myself":["a"],"confused on":["imports.","the"],"confused what":["to"],"confused when":["I"],"confused why":["you're"],"confused with":["module"],"confusing and":["inefficient","unnecessary."],"confusing because":["it","it"],"confusing exercise...":["every"],"confusing here.":["Why"],"confusing naming":["since"],"confusing or":["simply"],"confusing people":["who"],"confusing that":["you"],"confusing though":["for"],"confusing to":["use","see","Haskell","have","use"],"confusing visually,":["but"],"confusing with":["the"],"confusing, I":["would"],"confusing; I":["prefer"],"confusion and":["it"],"confusion between":["different"],"confusion of":["what"],"confusion with":["other"],"confusion! This":["looks"],"confusion, but":["personally"],"confusion. And":["bit"],"conjunction or":["disjunction.)"],"connected to":["encourage"],"connecting the":["two"],"conplains. maybe":["it"],"cons (`:`)":["comes"],"cons -\u003e":["snoc)."],"cons cell":["that"],"cons operator.":["whoops."],"cons over":["(++)."],"cons-reverse scheme":["in"],"conscious of":["the"],"consensus over":["using"],"consensus to":["use","omit"],"consequence in":["this"],"consequence of":["the"],"consequently more":["obscure"],"consequently. Using":["that"],"consice, and":["informative"],"consider \"3rd\",":["\"23rd\","],"consider \"^$#&amp;!!!\"":["to"],"consider \"using":["Control.Concurrent.STM.TMVar"],"consider ``\"?\"":["`isSuffixOf`"],"consider `filter":["(anagram"],"consider `readNucleotide`":["to"],"consider `unlines":["::"],"consider a":["[pointfree](http://www.haskell.org/haskellwiki/Pointfree)","class","simpler"],"consider composing":["a"],"consider doing":["this"],"consider either":["passing"],"consider encountering":["such"],"consider factoring":["out"],"consider factors":["\u003e="],"consider filtering":["out"],"consider gathering":["your"],"consider giving":["type"],"consider here":["that"],"consider here.":["It's"],"consider implementing":["`map","NFData"],"consider in":["the"],"consider inlining":["that"],"consider is":["that","to","to","that","that"],"consider it":["premature"],"consider it,":["but"],"consider leaving":["the"],"consider looking":["into"],"consider making":["`Robot`"],"consider moving":["it","the"],"consider naming":["the"],"consider not":["making"],"consider numbers":["that"],"consider performance":["issues"],"consider refactoring":["out"],"consider removing":["the"],"consider renaming":["`compare`","`isAllCaps`"],"consider scoping":["it"],"consider splitting":["on"],"consider storing":["the"],"consider taking":["advantage"],"consider that":["the","you","`head","`a`","it's","there's","`('0',","you"],"consider that,":["but"],"consider that.":["That's"],"consider the":["phrase","pattern","append"],"consider thinking":["about"],"consider this":["but"],"consider to":["change"],"consider using":["`not`","pattern","higher-order","the","`any`","`newtype","it","the","a","`wordsBy`","guard","Haskell's","the","string","section","`any`","`($)`","`last`","the","an","Data.Map","`Data.Map`","`insertWith`","`Data.Map`","`wordsBy`","`map`","a","boolean","Data.Map.Strict","`map`","`[from,","`concatMap","is","Data.List's","`Data.Map.fromListWith`","map","outside","`foldl'`","`map`","`unlines`","Data.Map.Strict","Data.Map.Strict","data.map.strict","Data.Map.Strict"],"consider valid":["the"],"consider what":["it","exactly","happens"],"consider words":["like"],"consider wrapping":["School"],"consider writing":["the"],"consider yourself":["as"],"consider: `filter":["(not"],"considerably by":["using"],"considerably to":["avoid"],"considerably with":["this"],"considerably; none":["of"],"consideration is":["that"],"consideration it":["won't"],"consideration to":["make"],"consideration would":["be","be"],"consideration. The":["map"],"considerations in":["`incrementBalance`."],"considerations, the":["definition"],"considered \"Yoda-programming\".":["Would"],"considered \"acceptable":["style\""],"considered \"insertWith\"":["a"],"considered ```fromListWith```":["but"],"considered `foldl`":["(or"],"considered a":["word,","question.","list"],"considered an":["`isYell`"],"considered as":["\"actions\",","programmer"],"considered bad":["style"],"considered best":["practice","practice"],"considered cleaner?":["Pattern"],"considered different":["ways"],"considered good":["style","style","style","style","Haskell","style","style","style"],"considered idiomatic":["Haskell"],"considered not":["using"],"considered pattern":["matching."],"considered something":["more","along"],"considered strings":["such"],"considered that":["`randomR",":)"],"considered the":["specification?"],"considered this":["two"],"considered using":["`all`","`alter`","the","difference","filter","`BankAccount","pattern"],"considered validating":["the"],"considered. I":["am"],"considered. You":["can"],"considering how":["comprehensive"],"considering one":["or"],"considering such":["a"],"considering that":["`Teenth`","it","if"],"considering to":["abstract"],"considering what":["it"],"consistency I":["would"],"consistency of":["`resetName`","English,"],"consistency's sake":["I"],"consistency's sake,":["you"],"consistent enough":["to"],"consistent for":["all"],"consistent in":["application.","all"],"consistent with":["`Data.Time.Calendar`","the"],"consistently placed,":["consice,"],"consists of":["numbers"],"consolidate three":["of"],"consolidated, and":["you"],"consolidation that":["could"],"const \"M\"`":["which"],"const \"foo\")":["(guard"],"const 0`":["case?"],"const 1)`":["or","with","would"],"const 1`":["to"],"const` instead":["of"],"constant 'stack'":["space"],"constant (11,574),":["but"],"constant 2":["(`M"],"constant and":["thus"],"constant as":["well?"],"constant factor":["benefit","it","in","speedup.","improvement","better","better","if"],"constant factors":["are"],"constant factors,":["etc."],"constant feedback.":["Also,"],"constant instead":["directly"],"constant is":["at"],"constant it":["will"],"constant space":["and","due","(and"],"constant space.":["Importing"],"constant stack":["space","space."],"constant term":["-"],"constant terms,":["so"],"constant time":["without","(or","with","by","lookup.","lookup","lookup","operation","with","to"],"constant time.":["Same"],"constant), otherwise":["this"],"constant), wastes":["a"],"constant, you":["either"],"constants and":["memory"],"constants in":["`toRNA`"],"constants to":["the"],"constants, a":["guard"],"constants. They":["*are*"],"constrained to":["something,"],"constraint (Eq":["a)"],"constraint isn't":["really"],"constraint(s) to":["type","type","type","type","type"],"constraints can":["be"],"constraints the":["solution"],"constraints with":["a"],"constraints. Might":["be"],"construct a":["map","valid","cell","map/dictionary"],"construct any":["spine-strict"],"construct feel":["less"],"construct it":["right"],"construct on":["line"],"construct rather":["than"],"construct that":["map"],"construct this":["string?","map"],"constructed and":["can","deconstructed,"],"constructed as":["follows:"],"constructed from":["right"],"constructed in":["some","reverse"],"constructed like":["this:"],"constructed the":["tuple"],"constructed. The":["entire"],"constructing a":["value-strict","number,"],"constructing the":["different","Map."],"constructing their":["own"],"construction that":["you"],"construction time,":["i.e."],"construction) it":["would"],"constructor (`[]`":["or"],"constructor (`[]`,":["or"],"constructor (either":["literally"],"constructor `'T'`":["instead"],"constructor `(:)`,":["it"],"constructor `Map`":["unqualified"],"constructor a":["certain"],"constructor and":["its","unevaluated","then"],"constructor at":["all,"],"constructor can't":["be"],"constructor doesn't":["seem"],"constructor for":["Data.Map","a","it.","Maybe.","`Nucleotide`."],"constructor from":["that"],"constructor has":["nothing"],"constructor in":["didn't","this","your"],"constructor is":["not","in","an"],"constructor naming":["scheme"],"constructor on":["the"],"constructor so":["that"],"constructor that":["you"],"constructor to":["enforce","enforce","enforce","that"],"constructor you":["want"],"constructor') I":["always"],"constructor, and":["only"],"constructor, might":["be"],"constructor. And":["I"],"constructor. Maybe":["insertDefaults"],"constructor? I":["noticed"],"constructors `Tip`":["and"],"constructors all":["over"],"constructors are":["defined","hidden"],"constructors as":["the"],"constructors don't":["need"],"constructors in":["```Schedule```"],"constructors instead":["of"],"constructors or":["special-case"],"constructors would":["be"],"constructors), or":["case"],"constructors). Handling":["all"],"constructors, a":["`run*`"],"constructors. (The":["short-circuiting"],"constructs vs.":["the"],"constructs when":["it's"],"constructs, they":["are"],"constructs, which":["you"],"constuctor ':'":["to"],"consulted since":["the"],"consume the":["original"],"consumed by":["the"],"consumers list":["from"],"consumes it,":["not"],"consuming the":["entire"],"contain U's.":["Anyway"],"contain an":["empty"],"contain any":["letters"],"contain hardcoded":["charachers."],"contain just":["whitespace."],"contain too":["much"],"contained anything":["else"],"contained by":["`Just"],"contained in":["the"],"container functions":["that"],"container, using":["it"],"containers I":["believe"],"containers and":["it"],"containers package":["that"],"containers provide":["`empty`"],"containers qualified":["as"],"containers supports":["`empty`"],"containers without":["problems"],"containers, not":["in"],"containers-0.5.0.0:Data.Map.Base.Map Char":["a\""],"containers-0.5.0.0:Data.Map.Base.Map String":["Int,"],"containers`. I":["think"],"containing this":["pupil\""],"contains a":["unit"],"contains an":["`isSpace`"],"contains any":["invalid"],"contains comparison":["and"],"contains every":["prime"],"contains incorrect":["character"],"contains no":["uppercase"],"contains redundant":["code,"],"contains some":["functions"],"contains the":["computed"],"content of":["the"],"contents (types,":["typeclasses,"],"contents and":["then"],"contents is":["associated","lazy","not"],"contents of":["the"],"context (Monad),":["looking"],"context (although":["`MultiwayIf`"],"context I":["should"],"context dependent":["though,"],"context in":["last"],"context looks":["fine."],"context of":["a","a","the"],"context that":["often"],"context to":["help"],"context where":["early"],"context, laziness":["should"],"context. If":["a","there's"],"context. Not":["any"],"context. Or":["maybe"],"context. So":["when"],"context. You":["could"],"context? It's":["strange"],"contexts, but":["your"],"contiguous elements":["are"],"contiguous range,":["there's"],"contiguous storage":["and"],"contiguous, e.g.":["you"],"continuation character":["at"],"continuation trick,":["I"],"continue algorithm.":["Also"],"continue going":["your"],"continue pursuing":["Haskell."],"continue using":["account."],"continue writing":["after"],"continued strings":["is"],"continued super-helpful":["feedback!"],"continuous feedback!":["I"],"continuous subset":["of"],"contradicts the":["usual"],"contrary opinion":["and"],"contrary to":["popular"],"contrast, foldl":["will"],"contribute in":["some"],"contributed the":["Haskell"],"contrive some":["examples"],"control flow":["with","than"],"control it,":["check"],"control your":["module"],"convenience functions":["(have"],"convenient `fromList`":["or"],"convenient syntax":["to"],"convenient to":["derive"],"convenient way":["to","to","to"],"convenient, you":["likely"],"conveniently an":["instance"],"convential; I'll":["remember"],"convention for":["predicate","Haskell?","`newX`","the","that,","both"],"convention in":["the"],"convention is":["used,","to","to","for","reserved","not"],"convention seems":["to"],"convention to":["put"],"convention, all":["top-level"],"convention, this":["kind"],"convention. It":["aids"],"convention. Or,":["move"],"convention. This":["often"],"conventional for":["`show`"],"conventional way":["to"],"conventionally `MakeSchool`":["would"],"conventions should":["be"],"conventions used":["here"],"conventions which":["you"],"conventions, indentation":["&"],"conversation's sake,":["please"],"conversion between":["those"],"conversion code":["is"],"conversion dubiously":["justifies"],"conversion earlier.":["I"],"conversion in":["Haskell","the"],"conversion is":["out"],"conversion of":["a"],"conversion problem":["already"],"conversion to":["`List`","`Data.Vector`"],"conversion, just":["didn't"],"conversion, looks":["like"],"conversions from":["strings"],"convert $":["to"],"convert 'T'":["="],"convert 0..6":["to"],"convert `Bool`s":["to"],"convert `Int":["-\u003e"],"convert `String`":["into"],"convert a":["string","one"],"convert all":["`True`s"],"convert back":["and"],"convert bool":["to"],"convert boolean":["to"],"convert from":["Bool","letters"],"convert integer":["to"],"convert it":["into","back","to","to"],"convert it,":["eh?"],"convert my":["lambda","message"],"convert number":["without"],"convert take":["a"],"convert the":["Bool","booleans","```silence```"],"convert to":["and","Double","code"],"convert toRNA":["to"],"convert x":["="],"convertAcid 'T'":["="],"convertAcid a":["bit."],"convertAcid ch":["="],"convert`? While":["looking"],"converted `9223372036854775808`":["to"],"converted `let`":["to"],"converted decimals":["which"],"converted to":["use","a"],"converting Trues":["to"],"converting `Nothing`":["to"],"converting `to/fromList`.":["I"],"converting and":["unconverting"],"converting back":["and"],"converting chars":["to"],"converting function":["into"],"converting number":["to"],"converting the":["map"],"converting them":["to"],"converting to":["Data.Text","`Text`","lowercase,","numbers","and"],"converting to/from":["strings"],"converts a":["list"],"convey better":["the"],"convey intention":["than"],"convey its":["behaviour"],"convey the":["logic","intention:","true"],"convey their":["intention,"],"convey this":["meaning."],"conveys the":["intent"],"convince either":["of"],"convince myself":["that"],"convinced by":["my"],"convinced it":["isn't"],"convinced me":["that"],"convinced this":["looks"],"convinced, but":["it"],"convincing GHC":["to"],"cool all":["the"],"cool for":["this"],"cool how":["smart"],"cool solution.":["I"],"cool stuff":["and"],"cool way":["to","to"],"cool! I":["like"],"cool! I've":["tried"],"cool, I":["was"],"cool, but":["is"],"cool, it's":["useful"],"cool, went":["back"],"cool. Every":["so"],"cool. Looks":["more"],"cool. The":["syntax"],"cooperate to":["be"],"cooperating. I":["can't"],"coordinate x,":["using"],"coordinates are":["forced","also"],"coordinates as":["well."],"coordinates pair":["(I,j)"],"coordinates to":["be"],"cope with":["stream-based"],"copied a":["solution"],"copied from":["the"],"copied them":["from"],"copied this":["over."],"copied your":["code"],"copied, the":["style"],"copy I":["actually"],"copy but":["it's"],"copy of":["them","the"],"copy paste":["from"],"copy the":["input","strings"],"copy-and-paste a":["solution"],"copy. I'm":["not"],"copying garbage":["collection"],"copying, current":["vector"],"core API.":["I"],"core functions":["with"],"core lib":["feels","(Data.Map"],"core of":["a"],"core output":["for"],"core snippets.":["I"],"core syntax":["(`where`"],"correct (at":["least"],"correct GHCI":["session:"],"correct MessageType)":["from"],"correct `m`":["is,"],"correct about":["the"],"correct all":["the"],"correct and":["concise,"],"correct answer":["when"],"correct as":["`delete`","it"],"correct behavior":["for","for"],"correct behavior.":["`!@@!@#$%%^^*&&()`"],"correct behaviour":["on"],"correct classification":["is"],"correct dates":["will"],"correct decision":["but"],"correct elements":["-"],"correct fold":["to"],"correct fold,":["because"],"correct for":["arbitrary","this"],"correct grade":["without"],"correct if":["you"],"correct implementation":["with"],"correct in":["that"],"correct me":[":)).","if","if"],"correct my":["solution"],"correct number":["of"],"correct one":["and"],"correct or":["not."],"correct place":["in"],"correct positive":["numbers"],"correct response":["for"],"correct result":["datatype","and"],"correct result?":["Or"],"correct solution":["to"],"correct solution,":["but"],"correct solution.":["Data.ByteString.Char8"],"correct space":["and"],"correct spelling":["should"],"correct splitting":["plus"],"correct terms.":["I"],"correct that":["`fw`"],"correct then":["your"],"correct to":["me."],"correct way":["to","myself"],"correct workaround":["to"],"correct would":["be"],"correct\" code.":["Point"],"correct, I":["asked"],"correct, Map":["is"],"correct, as":["in"],"correct, but":["it's"],"correct, harder":["to"],"correct, it":["should"],"correct, or":["whether"],"correct, so":["long"],"correct, there":["is"],"correct. To":["guarantee"],"correct? That":["one"],"corrected test":["suite."],"correctly and":["works"],"correctly but":["the"],"correctly given":["an"],"correctly order":["the"],"correctly you":["are","should","won't"],"correctly, `end`":["should"],"correctly, a":["Map"],"correctly, this":["should","is"],"correctly. Control.Applicative":["has"],"correctly. Or":["`map"],"correctly? eteprem":["seemed","seemed"],"correctness (It's":["not"],"correctness here.":["Another"],"correctness of":["isCaps"],"correctness using":["smart"],"correctness, then":["worry"],"correlated in":["some"],"correlated. In":["order"],"correspond read":["instance"],"correspond to":["an","serialization"],"correspondent with":["mkRobot,"],"corresponding Read":["instance"],"corresponding single":["character"],"corresponding value":["from","to"],"corresponds to":["the"],"cost as":["in"],"cost between":["the"],"cost due":["to"],"cost elsewhere":["(`row`"],"cost in":["cases","programming"],"cost of":["doing","a","it","some","clarity."],"cost to":["do","doing"],"cost when":["you"],"cost, because":["you're"],"cost, it's":["got"],"cost. It's":["totally"],"cost. Since":["Haskell"],"cost. The":["representation"],"costs zero,":["so"],"could \"[eta":["reduce](http://www.haskell.org/haskellwiki/Eta_conversion)\""],"could _zip_":["with"],"could accomplish":["the","with"],"could actually":["use"],"could afford":["to"],"could align":["the"],"could allow":["for"],"could also":["simply","turn","consider","use","do","make","be","factor","be","be","move","concatenate","simply","be","very","convey","know","be","define","randomly","use","use","use","have","have","easily","say","be","pick","be","consider","use","make","implement","be","simplify","use","look","make","move","use","be","derive","happen:","have","explicitly","use","hard-code","use"],"could alternatively":["write"],"could always":["define"],"could approach":["this"],"could avoid":["the","the","the"],"could be":["just","isShouting,","done","a","made","implemented","a","made","altered","circumvented","much","found","a","done","a","a","even","better,","simpler.","done","done","improved,","more","done","renamed","written","rewritten","used","done","an","implemented","done","replaced","still","slightly","problematic","used","reduced","less","given","`fromEnum","defined","used","`isUpperLetter","simplified","made","use","implemented","made","of","accomplished","extracted","passed","cleaner.","simplified","a","separate,","safe,","improved","made","done","done","improved","simpler,","improved,","`all","written","a","done","used","`[minBound..]`","optimized","simplified","(subjectively,","a","rewritten","easily","a","defined","used","simplified","beefed","implemented","changed","implemented","used","made","made","cleaned","improved","re-written","considered","done","made","written","better","expressed","shorter","missing","significantly","rewritten","captured","consolidated,","traded","a","handled","done","written","`fromEnum","done","a","done","inserted","written","simplified","done","written","eta-reduced","written","written","written","further","much","written","made","improved","completely","used","made","`modifyMVar_`","done","indented","useful","reduced","written","reduced","useful","rewritten","pieced","reasonable,","written","done","useful","to"],"could be,":["and"],"could be.)":["Interestingly"],"could become":["simultaneously"],"could benefit":["from"],"could break":["other"],"could build":["a","`(=~)`","`slices'`"],"could calculate":["the"],"could certainly":["make"],"could change":["is","the","to"],"could choose":["better","to"],"could clean":["up","up","this"],"could combine":["with","those"],"could compact":["it"],"could compute":["`Teenth`—"],"could conceivably":["short-circuit"],"could consider":["storing","using","scoping"],"could construct":["a","a"],"could convert":["the"],"could count":["them"],"could create":["nested"],"could define":["`isUpperString`","`sortValues`","`(.:)`","this"],"could define,":["for"],"could definitely":["use"],"could derive":["Enum","Bounded"],"could detect":["drunk-talk"],"could discover":["Functor"],"could dispense":["with"],"could do":["something","that","the","the","it","that","the","that,","`reshape`","this","to","would","it","that","something","here","`BankAccount","the","another","this","here","an","here,","would","here.","a","this","here,","most","the","more"],"could do,":["but"],"could drop":["`Read`"],"could easily":["write","locate","be","matter","work","compute","implement","[pointfree](http://www.haskell.org/haskellwiki/Pointfree)","write"],"could eliminate":["this","the","numbers","the"],"could end":["up"],"could eta":["reduce","reduce"],"could eta-reduce":["`letters`","`lookupPlant`,","`ofBeer`","`add`,"],"could even":["go","further","be","make","build"],"could ever":["prefer"],"could export":["a"],"could express":["f"],"could extract":["`sort"],"could factor":["out","out","out"],"could find":["it"],"could fix":["the","that"],"could foldM":["over"],"could for":["example"],"could gain":["a"],"could generate":["only"],"could get":["rid","away","a","away","greater","rid","rid","a","rid","most","it","rid"],"could give":["name","names"],"could go":["back","another"],"could guarantee":["a"],"could guide":["me"],"could halve":["the"],"could handle":["an","that"],"could have":["used","a","inlined","technically","Weekday","gone","helped","made","been","used","wider","been","used","aliased","this","a","imported","simply","avoided","multiple","been","the","implemented","Bearing","put","named","the","used"],"could help":["with","solve","with"],"could imagine":["a"],"could implement":["isEmpty","this","NFData","`rnf`","this","the"],"could import":["the","Data.Map.Strict","`chunksOf`"],"could improve":["on","the","your","the"],"could indent":["this"],"could initialize":["the"],"could inline":["`equivalent`"],"could instead":["rewrite"],"could introduce":["new"],"could involve":["`TVar`s."],"could join":["lines"],"could just":["define","compute","do","use","do","write","declare","use","use","use","define","have","do","`divMod`","wait","as","use","map","be","use","be"],"could keep":["the"],"could leave":["off"],"could let":["you"],"could look":["into","at","like"],"could make":["`isEmpty`","the","noComment","the","`getWeekDay`","it","this","that","this","it","grade","the","`nucleotideCounts`","`number`","this","all","it","for","this","this","it","`School`"],"could manually":["fuse"],"could mark":["it"],"could maybe":["help","see"],"could mix":["the"],"could move":["your","the","out"],"could name":["it"],"could never":["figure"],"could not":["think","remember","find","find","find","find","be"],"could of":["course","course"],"could pattern":["match"],"could perform":["an","a"],"could play":["with"],"could potentially":["cause"],"could probably":["use","be","be","skip","define","be","imagine","just","be"],"could provide":["more"],"could put":["`orbital"],"could re-write":["`toRNA`"],"could read":["it"],"could reasonably":["use"],"could reduce":["duplication"],"could remember":["who"],"could remove":["the","if","`leap","the"],"could rename":["allCaps"],"could rephrase":["`yelling`"],"could replace":["the","`(\\x","the","the","`modifyMVar_"],"could result":["in"],"could return":["either","a"],"could reuse":["the"],"could rewrite":["it","this","`toRNA`","whole","the","```validNucleotide```"],"could roll":["\""],"could run":["in"],"could satisfy":["the"],"could save":["a","you","some"],"could say":["that","'++"],"could scope":["`translate`"],"could see":["if"],"could separate":["out","out"],"could simplify":["`isYelling`","`anagramOf`","nucleotideCounts","your","`toNucleotide`","`shouting`","the","the","things","things","the","`normalise`","```tupleIze```","this"],"could simply":["be","perform","have","replace","have","compute","use"],"could spare":["you"],"could split":["by"],"could still":["do"],"could store":["the"],"could take":["advantage","advantage","advantage"],"could terminate":["early","on"],"could test":["them"],"could then":["be","use"],"could think":["about","of","of"],"could translate":["that"],"could trivially":["perform"],"could try":["reordering","to"],"could understand":["what"],"could unify":["the"],"could use":["that","something","instead","`where`","`Data.Char.isSpace`","instead","to","pipe","a","this","union","in","`M.fromListWith`","for","isBlank","`where`","something","`any","that,","`Map.insertWith`","`second`","`(not","here","the","`all`","`chunksOf`","the","```isYelling```","to","record","`splitAt`","`seq`,","`splitAt`","fix","Data.List.Split's","`zipWith","a","`(!)`","`fromEnum","`zipWith`","`zipWith`","that","to","more","to","`findWithDefault`","the","it","an","`.|.`","type","`(^2)`","`wordsBy`","guards","```wordsBy```","`Map.fromListWith`.","instead","explicit","arrows","`not","Applicative's","`filter","to","instead","`putMVar`","Either","`flip","top-level","the","`digitToInt`","Applicative's","an","`void`","a","a","to","an","`concat`","`splitAt","lazy","`flip`","`Data.Map.Strict.fromListWith`","`M.fromListWith`","`newtype`","newtype","RandomRIO","`unwords`","something","`Data.Bits.testBit`"],"could use,":["here's"],"could work":["with"],"could write":["an","isQuestioning","allCaps","eg.","it","`(==)","`filterFunction`","`map","it","`p","`String","\"there","responseFor","`token`","in","this","`_","the","the","\"classify\""],"could you":["simplify","achieve","elaborate","make","insert","be","give"],"could've done":["is","a"],"could've just":["as"],"could've made":["RNA"],"could've used":["here,"],"could. It":["looks"],"could. You":["could"],"couldn't Hoogle":["one."],"couldn't be":["expected","bothered"],"couldn't believe":["this"],"couldn't come":["up","up","up"],"couldn't decide":["which"],"couldn't do":["tail"],"couldn't easily":["install"],"couldn't figure":["out","the","how","out","out","out","out","out"],"couldn't find":["an","any","a","any","anything","anything","out"],"couldn't get":["more","that","that","anywhere.","very","`data","it"],"couldn't have":["done"],"couldn't let":["it"],"couldn't make":["it"],"couldn't see":["how"],"couldn't think":["of","of","of","of","of"],"couldn't use":["that"],"couldn't work":["out","out","out","out"],"count 'U's":["when"],"count 1":["(i.e.,"],"count ::":["Char","Char"],"count a":["complete","bit"],"count all":["of"],"count as":["punctuation."],"count c":["s"],"count directly":["or"],"count for":["one"],"count frequencies.":["For"],"count from":["that."],"count function":["here","to"],"count function,":["so","as"],"count generator":["in"],"count how":["many","many"],"count in":["the","a","`nucleotideCounts`"],"count is":["awkward","desired,","a"],"count it":["towards"],"count just":["see"],"count map":["from"],"count map,":["not"],"count of":["every","how"],"count perhaps":[":-)"],"count s":["=","="],"count so":["can"],"count the":["length","holes","number"],"count them":["on","into"],"count to":["build"],"count using":["`Map`"],"count with":["an"],"count, although":["you"],"count, you":["could"],"count-of-one tuples,":["then"],"count. But":["the"],"count. Ie":["the"],"count. So":["I"],"count. Third":["option"],"countInMap M.empty":["."],"countOne method":["with"],"countUp set":["k"],"countWords using":["fromListWith."],"count_list to":["do"],"counted differently":["to"],"counted), then":["have"],"counted---this is":["bad"],"counted. Could":["have"],"counted. Just":["use"],"counter have":["to"],"counter intuitive.":["Thanks"],"counter, since":["the"],"counterexample to":["this"],"counterintuitive to":["me."],"counters in":["Haskell"],"counters, at":["least"],"counters, since":["it"],"counter… most":["solutions"],"counting all":["of"],"counting and":["a"],"counting for":["you.","you,"],"counting from":["zero."],"counting one":["nucleotide"],"counting operations":["will"],"counting than":["`Integer`."],"counting, because":["Data.Map"],"counting. For":["more"],"counting. It's":["almost"],"counting. Take":["a"],"counts and":["lengths,","only"],"counts as":["a","a"],"counts for":["the","specific","all"],"counts in":["one"],"counts list":["and"],"counts of":["0"],"counts or":["lengths"],"counts this":["way."],"counts to":["0"],"counts will":["scan"],"counts. This":["looks"],"counts. Unsure":["of"],"counts. `nucleotideCounts`":["should"],"couple of":["typos.","things","cycles.","days","words","gigabytes","improvements","them,"],"couple things":["you"],"couple things,":["though:"],"couple times":["with"],"couple ways":["to","-"],"couple years":["Monad"],"couplet lines":["which"],"courageous) see":["if"],"course \"no":["plausible,"],"course -":["note"],"course I":["understand"],"course `[Value]`":["would"],"course `flip":["(,)"],"course abstract":["the"],"course also":["be"],"course an":["introductory"],"course both":["of"],"course due":["to"],"course in":["Haskell"],"course is":["just"],"course isEmpty":["is"],"course make":["isAnagram"],"course mix":["them:"],"course of":["`sorted`."],"course only":["makes"],"course possible":["to"],"course re:":["function"],"course that":["in"],"course this":["is","implementation"],"course words":["are"],"course you":["could"],"course! How":["did"],"course). If":["you"],"course, DNABase":["and"],"course, I":["could"],"course, `comp2":["="],"course, `total":["="],"course, but":["I","it's"],"course, fixing":["that"],"course, is":["a"],"course, it's":["not"],"course, its":["clear"],"course, just":["explaining"],"course, less":["than"],"course, sorry":["(about"],"course, that's":["so","a"],"course, the":["rest","generic"],"course, then":["you"],"course, this":["is"],"course, with":["a"],"course, you":["could","can","suspect"],"course, you're":["handling"],"course. For":["a"],"course. I":["only","should've","was"],"course... Silly":["me!"],"courses so":["know"],"cover all":["cases"],"cover it":["but","is","all"],"cover some":["of"],"cover that":["case."],"cover the":["failure"],"cover this":["I'm","case,","edge","issue,","issue.."],"cover this,":["but","so"],"cover what":["if"],"coverage for":["bad"],"coverage of":["Haskell's","Haskell's"],"coverage on":["how"],"covered by":["\"isQuestion","the","the","the"],"covered in":["`sort","a","the","the","the","_Learn"],"covered pretty":["early"],"covered this":["in"],"covered very":["well"],"covered. Logically":["it"],"covering and":["complexity."],"covers a":["single"],"covers all":["of"],"covers both":["character"],"covers only":["DNA"],"covers that":["case.","case)","in"],"covers the":["technique"],"cpu cycles":["it"],"crack a":["nut,"],"crack! To":["help"],"crap, you":["just"],"crash (not":["that"],"crash at":["runtime"],"crash condition":["(empty"],"crash due":["to"],"crash if":["an","you"],"crash on":["`responseFor","an"],"crash the":["program."],"crash). The":["exact"],"crash, since":["you"],"crash. If":["you"],"crash. Maybe":["we"],"crashing if":["someone"],"crashing, due":["to"],"crashy functions,":["even"],"crawled through":["the"],"crazy day":["and"],"crazy mathematicians":["--"],"crazy more":["expensive"],"crazy. I":["figured"],"crazymykl. It":["is"],"crazytown. Is":["it"],"create 2-tuples":["instead"],"create a":["`union`","new","var/function","function","new","new","simple","datatype",".cabal","list","space","descending","`type`","whole","binding","list","thunk","loop","thunk"],"create all":["bytestring"],"create an":["empty","extra"],"create bindings":["such"],"create collisions":["with"],"create multiple":["definitions"],"create nested":["thunk"],"create reversed":["list"],"create several":["small"],"create something":["like"],"create space":["leak"],"create such":["a"],"create that":["map."],"create the":["heuristic","temporary","map"],"create them?":["Or"],"create with":["`zip`"],"create your":["own"],"created a":["function","new","filters","new"],"created than":["scanning"],"created the":["thunk"],"created to":["variables","track","address"],"created tyed":["data","data"],"created using":["only"],"created variable":["bindings"],"created with":["`unsafePerformIO`.","the","Data.Map"],"created, and":["your"],"created. I":["have"],"creates a":["new","space","lot","chain","whole"],"creates roman":["in"],"creating a":["function","list","RNA","variable","higher","thunk","single","new","thunk"],"creating any":["tuples,"],"creating empty":["container,","containers."],"creating it":["is"],"creating lots":["of"],"creating more":["of"],"creating n":["nested"],"creating new":["generators","names"],"creating those":["tuples,"],"creating true/false":["list."],"creating unnecessary":["names."],"creating you":["datatype","datatype"],"creation and":["forcing,"],"creation in":["the"],"creation of":["unnecessary","a"],"creation to":["know"],"creation when":["using"],"creative! But,":["you're"],"creep out":["of"],"crime to":["do"],"criteria (e.g.":["Teenth's"],"criterion, but":["I'm"],"critical environment,":["this"],"criticism from":["others."],"criticism is":["heartily"],"cross between":["a"],"cross haskell":["memory"],"cry; I'm":["not"],"cryptic (at":["least"],"cryptic and":["used"],"cs) ++":["drop"],"css file":["to"],"css for":["this"],"ctoRNA 'T'":["="],"ctoRNA c":["="],"cubed) is":["falcify"],"cubed? `":["will"],"cubed?\" is":["```Nothing```,"],"culting ;)":["using"],"cups =":["map","map"],"cures the":["deadlock"],"curiosity, Why":["are"],"curiosity, do":["you"],"curiosity, does":["type"],"curious about":["how"],"curious how":["that"],"curious myself.":["Moreover,"],"curious on":["feedback","feedback"],"curious to":["see","hear"],"curious what":["the"],"curious whether":["this"],"curious why":["you","text"],"curious, as":["I'm"],"curious, what's":["the"],"curious: why":["did"],"curly braces":["and"],"currect one":["may"],"current \u003cvalue\u003e":["is"],"current API.":["I'll"],"current algorithm":["which"],"current approach":["is"],"current aproach":["is"],"current definition":["of","of"],"current factor":["since"],"current form":["in"],"current implementation":["using","it's","is"],"current implementation,":["it's"],"current instant":["running"],"current master":["version"],"current naming":["issue."],"current one":["by"],"current order":["of"],"current power":["in"],"current predicate":["are"],"current revision.":["Have"],"current solution":["for","is"],"current solution,":["I'd"],"current state":["along"],"current tests":["doesn't"],"current tests)":["if"],"current tests,":["but"],"current to":["list."],"current value":["result"],"current vector":["library"],"current version":["is"],"current). Not":["as"],"currently cover":["that"],"currently crash":["if"],"currently entirely":["unsure"],"currently full":["MVar."],"currently have":["a"],"currently it":["will"],"currently the":["only"],"currently you":["are"],"curriculum based":["on"],"curried function":["in"],"curried with":["one"],"curried, will":["`sort"],"curried? Or":["am"],"curry and":["flip,","uncurry"],"curry in":["the"],"curry the":["function"],"currying, default":["arguments"],"currying. The":["only"],"custom accumulator":["function"],"custom at":["all."],"custom combinator":["like"],"custom data":["type","type.","type","type"],"custom function,":["but"],"custom function;":["it's"],"custom gurads":["in"],"custom mapping":["function"],"custom one":["?"],"custom operators":[":)"],"custom predicate,":["you"],"custom record":["type"],"custom scoring":["that"],"custom type":["and"],"custom typeclass":["`HasDigits`"],"custom version":["of"],"customary for":["the"],"customary to":["put","have","have","have","export","have","name"],"customary, but":["looks"],"cut and":["paste"],"cut fusion":["with"],"cut fusion\"":["and"],"cut out":["all"],"cut to":["the"],"cute for":["this?"],"cute pattern":["that"],"cute way,":["like"],"cute, but":["it"],"cuteness. Absolutely":["feel"],"cutesy trick,":["but"],"cuts down":["on"],"cycle [True,":["False]"],"cycle by":["first","first"],"cycle` approach":["seems"],"cycles it":["takes?"],"cz is":["never"],"d -&gt;":["a)","b)","a)","b)","a)","b)","a)","b"],"d =":["a"],"d else":["l`?"],"d id":["(lookup"],"d k":["m`"],"d l":["="],"d then":["s"],"d) -&gt;":["a"],"d) --":["TODO"],"d) -\u003e":["(a","(a"],"d) =":["(f"],"d*d`, because":["n"],"d` could":["be"],"d`. In":["some"],"daft here":["but"],"damn, yeah":["you're"],"dangerous because":["it"],"dangerous but":["TupleSections"],"dangerous constructors":["are"],"dangerous to":["use"],"dangerous\" if":["used"],"dare not":["comment"],"dark haskell":["magic,"],"darn. It":["would"],"data (,)":["a","a"],"data A":["="],"data ASAP":["and"],"data BST":["a","a","a","a"],"data BankAccount":["="],"data Bool":["="],"data Category":["=","=","="],"data CharPattern":["="],"data DNA":["=","=","="],"data Dq":["a"],"data EmotionalContent":["="],"data LL":["a"],"data Map":["k"],"data Matrix":["a"],"data N":["a","a"],"data Node":["a","a"],"data Nucleotide":["=","=","="],"data Point":["="],"data RNA":["=","="],"data Robot":["=","=","=","="],"data TypeName":["TypeParameters"],"data and":["not","updating"],"data as":["tuples.","in"],"data concept":["should"],"data constructor":["is"],"data constructor.":["And"],"data declaration":["above","to"],"data declaration,":["using"],"data declarations.":["In"],"data flow":["between"],"data from":["`romans`"],"data gives":["us"],"data here,":["right?)"],"data in":["another","`nucleotideCounts`,","the"],"data insertion":["part,"],"data into":["the"],"data is":["no","`(,)"],"data it":["is","processes...\"","contains?"],"data itself,":["not"],"data keeps":["thunks,"],"data kept":["in"],"data or":["the","newtype"],"data seems":["sensical."],"data set":["simpler"],"data structure":["you","you","readily","as","itself","and","is","I","behind","that","wrapped","that","(such","(unless","such","is","and","with","(a","first.","the","wouldn't","for","there","to"],"data structure,":["like","meaning","and","so","this","but","so","and","and","theoretically","```add```"],"data structure.":["It","You","See","See","I"],"data structures":["like","or","(such","(such","and","vs","have,","explicitly,"],"data structures)":["with"],"data structures,":["MVars"],"data structure—":["each"],"data structure…":["in"],"data that":["your"],"data to":["return,","a"],"data type":["represent","for","while","to","that","though).","but","but","but","(Data.Map.Base.Map).","to","for","is","out","is","is","`Response`","is","instead","and","doesn't","itself","as","declaration","implementing","as","as"],"data type,":["is","but"],"data type.":["I"],"data types":["I","instead","like"],"data types,":["leaving","after"],"data types.":["The"],"data with":["evaluated"],"data you're":["returning),"],"data, (newtype":["will"],"data, but":["it's"],"data, especially":["on"],"data, it's":["about"],"data, so":["keeping"],"data-driven approach":["in"],"data-structure one":["would"],"data-structure the":["tests"],"data-structure you":["are"],"data.char that":["do"],"data.list qualified":["as"],"data.list will":["fit"],"data.map.strict to":["avoid"],"database engineer,":["optimize"],"database transactions":["work,"],"datastructure that":["fit"],"datastructures can":["be"],"datatype (whatever":["it"],"datatype -":["it"],"datatype along":["the"],"datatype because":["of"],"datatype for":["DNA","`Nucleotide`","`Nucleotide`","this,"],"datatype in":["this"],"datatype is":["a"],"datatype itself.":["And"],"datatype just":["to"],"datatype to":["store","store"],"datatype, there's":["a"],"datatype. Arguably":["overkill"],"datatype. Since":["'T'"],"datatypes from":["`Data.Map`"],"datatypes to":["represent"],"datatypes) and":["the"],"date and":["time","the"],"date arithmetic":["here."],"date based":["the"],"date could":["be"],"date in":["`weekOf`","order"],"date that":["could"],"date, rather":["than"],"date-math functions":["already"],"dates tend":["to"],"dates will":["be"],"day &gt;=":["that"],"day (although":["you'd"],"day =":["case"],"day I'll":["be"],"day and":["so"],"day given":["by"],"day magically":["it"],"day of":["week","the","the","week","this"],"day than":["the"],"day that":["matches"],"day to":["do","see"],"day, return":["the"],"day-job PL,":["if"],"day-to-day stuff.":["I"],"day.) A":["simpler"],"day.... but":["I"],"day: you":["can"],"days =":["(wednesday"],"days ago.":["I'm"],"days are":["all","all"],"days between":["Wednesday"],"days from":["one"],"days in":["a","the","`pickSchedule`"],"days rather":["than"],"days there":["are"],"days to":["the","the","the"],"days, and":["sometime"],"days, unless":["you"],"days? I":["think"],"daysInGigasecond is":["`Integral"],"daysInGigasecond will":["be"],"db of`,":["followed"],"db or":["not."],"db; add":["g"],"dc=220 so":["\\xdc=\\220."],"de-clunkify my":["phrasings"],"dead code":["because"],"dead code,":["but"],"dead comment,":["and"],"dead data":["ASAP"],"dead data,":["it's"],"deadlock in":["`mkRobot`","a"],"deadlock problems":["which"],"deadlocks and":["simply"],"deadlocks tend":["to"],"deadlocks. STM":["however"],"deal at":["all"],"deal but":["you"],"deal either":["way,","way,"],"deal here":["either"],"deal since":["you"],"deal to":["check."],"deal with":["in","the","the","more","Nothing","escaping","infinite","the","it.","all"],"deal, but":["because","sometimes","the"],"deal, just":["something"],"deal, since":["the"],"deal. I":["think"],"dealing in":["tuples."],"dealing with":["the","Maps","`Maybe`s.","lists","something","large","unicode","splitting"],"deals more":["with"],"dealt with":["up","strictly","strictly"],"debatable if":["this"],"debate about":["whether"],"debate: in":["`sing`,"],"debated the":["two"],"debated whether":["to"],"debating how":["legible"],"debug this":["in"],"decade in":["technology-years."],"deceiving me":["about"],"deceivingly close":["to"],"decent libraries":["for"],"decent name,":["and"],"decent performance":["of"],"decent speedup":["when"],"decent start,":["especially"],"decidable, really":["first"],"decide Mercury":["should"],"decide if":["one","I"],"decide the":["order"],"decide to":["stop","create"],"decide when":["you","to"],"decide which":["way"],"decided `(\\a":["b"],"decided against":["using","it","it."],"decided it":["was","wasn't","was"],"decided not":["to"],"decided on":["the"],"decided that":["was"],"decided to":["reimplement","keep","be","make","require","do","use","accept","make","make","keep","implement","not","make","use"],"decided wrapping":["the"],"deciding between":["the"],"deciding what":["characters"],"decimal 5)":["by"],"decimal conversion":["earlier."],"decimal numbers":["are"],"decimal value":["of"],"decimals which":["I"],"decipher it.":["Another"],"decision but":["I've"],"decision on":["the"],"decision to":["convert"],"decision! Running":["time"],"decision, @rhea.":["I"],"decisions (like":["appending"],"decisions. In":["the"],"declaration (possibly":["in"],"declaration above":["function"],"declaration and":["got"],"declaration for":["`(Num"],"declaration into":["one"],"declaration like":["this:"],"declaration should":["explicitly"],"declaration syntax":["in"],"declaration there":["makes"],"declaration to":["a"],"declaration, ```toRna":["::"],"declaration, and":["indented"],"declaration, i.e.":["in"],"declaration, using":["record"],"declaration. Shortens":["the"],"declaration. You":["also"],"declaration.) Although":["the"],"declarations I":["ended"],"declarations `isQuestion":["="],"declarations but":["it's"],"declarations first":["-"],"declarations for":["uracil","top","me"],"declarations must":["all","all","all"],"declarations should":["have"],"declarations to":["this..."],"declarations. In":["addition,"],"declarative over":["expression"],"declarative syntax":["style:"],"declarative than":["having"],"declarative), but":["if"],"declarative. Saying":["\"the"],"declare `nucleotide`":["in"],"declare it":["in"],"declare the":["core"],"declare which":["functions"],"declared externally,":["but"],"declares a":["function"],"declaring letters.":["If"],"declaring type":["signature"],"decode look":["very"],"decomposed, it's":["pretty"],"decomposes it":["back"],"decomposition is":["still"],"decomposition: perhaps":["use"],"deconstruct the":["same"],"deconstructed, but":["that's"],"dedicated type,":["but"],"deduce what":["each"],"deduce which":["specific"],"deem too":["important."],"deemed too":["cryptic"],"deep end":["there."],"deep indent":["here."],"deep it":["is."],"deep that":["looks"],"deep' so":["`map"],"deeper (but":["still"],"deeper in":["the"],"deeper to":["find"],"deeply (depending":["on"],"deeply about":["simple,"],"deeply-nested expressions":["all"],"def foldl(f,":["acc,"],"def foldr(f,":["acc,"],"defacto community":["standard?"],"default (PhoneNumber":["\"000\""],"default .)":["."],"default Map":["functions,","implementation"],"default `Enum`":["instance"],"default `PhoneNumber":["\"000\""],"default accessors":["and"],"default and":["have"],"default arguments":["would"],"default arguments.":["(Although"],"default behavior":["for"],"default but":["I"],"default case":["for"],"default counts":["to","of"],"default exports":["the"],"default if":["it"],"default implementation":["is","in","is"],"default insertWith":["implementation"],"default is":["dependent","the","a"],"default null,":["i'll"],"default of":["0"],"default reply":["to"],"default repositories":["via"],"default so":["you"],"default solution":["and"],"default to":["use","something","Integer","strict","strict"],"default type":["is"],"default val":["back"],"default value":["of"],"default value-lazy":["Map"],"default values":["in"],"default, Data.Map":["is"],"default. I":["can"],"default. So":["you"],"default. This":["is"],"defaultGarden` will":["return"],"defaultNumber id":["(parseString"],"defaulted to":["using"],"defaulting either":["but"],"defaults ++":["actualCounts`"],"defaults can":["be"],"defaults for":["the"],"defeats the":["purpose"],"defense mechanisms":["of"],"deficiencies of":["MVars"],"definatelly get":["rid"],"define `(.:)`":["itself"],"define `all`":["in"],"define `classify`":["using"],"define `complement`":["function"],"define `fromSchool`":["(or"],"define `isAsking`":["and"],"define `isNil":["="],"define `isUpperString`":["in"],"define `list`":["in"],"define `mapHead`":["instead"],"define `none":["p"],"define `records`":["for"],"define `shout`,":["`allSpace`"],"define `sortValues`":["as"],"define `spaceChars`.":["http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Char.html"],"define `strToLower`":["at"],"define a":["parser","function","simpler","function","type","data","\"non-empty\"","hexCharToInt","small"],"define all":["of"],"define an":["`isSilence`"],"define another":["function"],"define f":["as"],"define fields":["as"],"define it":["with","something","as","as","in","in","and"],"define it,":["just"],"define method":["yourADTtoString."],"define one":["for"],"define only":["safe"],"define patterns":["[0,"],"define possible":["answers"],"define that":["boilerplate","`insert`","transform"],"define the":["helper","helpers","inner","predicates","response,","`transform`","account","one","functions"],"define them":["in"],"define this":["more","yourself),","a","as"],"define your":["own.","own"],"define, for":["example,"],"defined `count`":["function."],"defined a":["little","function:"],"defined anywhere":["as"],"defined as":["`shoutChar","`isAllCaps","`return","`silence"],"defined behavior":["for"],"defined for":["invalid","any"],"defined here":["seems"],"defined in":["the","`Control.Monad`.","3","a","Haskell","a","analyze","terms","the","the","the","the","`Data.Char`.","where","`Prelude`,","the","Haskell"],"defined inside":["`classify`","`where`"],"defined instead":["of"],"defined is":["not"],"defined it":["another"],"defined like":["this.."],"defined predicates":["as"],"defined somewhere":["that"],"defined specifically":["as"],"defined that":["way?"],"defined twice?":["Makes"],"defined type":["signatures."],"defined using":["`where`"],"defined what":["that","you're"],"defined with":["record","dropWhile"],"defined, ```where```":["or"],"defined, `data":["BTree"],"defined, not":["where"],"defined, you":["can"],"defined. You":["can"],"defines these":["optimizations"],"defining BST":["this"],"defining `howMany":["-1`"],"defining `isSeperator`":["in"],"defining `records`":["or"],"defining `thymineToUracil`":["makes"],"defining `uracil`":["and"],"defining `word`":["and"],"defining a":["new","variable"],"defining all":["those"],"defining functions":["`isQuestion`"],"defining it":["in","for","in"],"defining operators":["for"],"defining showBottles":["to"],"defining some":["variables/functions"],"defining the":["`trim`","`responseFor`","function","function","pattern","non-earth"],"defining them":["in"],"defining your":["own","data"],"defining, and":["explicitly"],"definitely a":["matter","simpler","bit","must-read.","huge","Haskell"],"definitely agree":["with"],"definitely atomic?":["And"],"definitely better":["than","to"],"definitely better.":["Didn't"],"definitely clean":["things"],"definitely cleaner":["than","than"],"definitely come":["at"],"definitely cuts":["down"],"definitely failed":["a"],"definitely feels":["a"],"definitely get":["calculated"],"definitely give":["it"],"definitely go":["over"],"definitely good":["to"],"definitely had":["to"],"definitely hit":["you"],"definitely isn't":["my"],"definitely look":["to"],"definitely looks":["cleaner."],"definitely more":["in"],"definitely not":["that!"],"definitely on":["the","the"],"definitely prefer":["the"],"definitely seems":["like"],"definitely should":["use"],"definitely some":["sort"],"definitely still":["in"],"definitely submit":["more"],"definitely the":["right","convention","developer's","way"],"definitely try":["that","a"],"definitely ugly.":["I"],"definitely use":["improvement."],"definitely want":["to"],"definitely what":["I"],"definitely will":["work"],"definitely work,":["not"],"definitely works":["because"],"definition :)":["I"],"definition Char":["-\u003e"],"definition I":["might"],"definition `all":["isSpace`"],"definition a":["little"],"definition and":["its","that's"],"definition as":["it"],"definition at":["the","the"],"definition before":["the"],"definition but":["I"],"definition can":["be"],"definition especially":["for"],"definition for":["`messageFor`.","capitalize","the","```True```/```False```."],"definition in":["the","view."],"definition is":["complex","very","nice.","literally","usually"],"definition it's":["an"],"definition looks":["like:"],"definition of":["`transcribe`.","`==`","`readDNA`.","an","wordCount.","`trans`","`Enum`","several","`isShout`.","`isNil`","`anagramsFor`.","isYelling","`divisibleBy`","`divisibleBy`","`Weekday`","`anagramsFor`","`fromListWith`","`isLeapYear`","`isDivBy`.","`addLetter`","`numerals`).","what","`BankAccount`.","`isYelling`.","BST","`candidates`","`ceiling`.","`silence,shouting,question`","`fromBool`","`isTrashChar`?","`map`,","`map`...","*isAnagram*","`classify`?","what","`sorted`"],"definition of`isShouted`":["though"],"definition on":["the"],"definition only":["if"],"definition seems":["fine"],"definition should":["export"],"definition suggests":["itself"],"definition that's":["only"],"definition to":["this,","make"],"definition was":["a"],"definition with":["guard","multiple"],"definition would":["normally"],"definition) to":["`anagramsFor`"],"definition, I":["would"],"definition, `nucleotideToRNA`":["isn't"],"definition, and":["also"],"definition, as":["in"],"definition, just":["look"],"definition, perhaps":["you"],"definition, since":["I"],"definition. Additionally,":["you"],"definition. I":["don't"],"definition. In":["other"],"definition. Looks":["good."],"definitions `howMany`":["could"],"definitions a":["type"],"definitions and":["try","your","similar,"],"definitions are":["meant"],"definitions based":["on"],"definitions by":["using"],"definitions can":["be"],"definitions first,":["and"],"definitions from":["a"],"definitions into":["`let`"],"definitions isn't":["necessary,"],"definitions not":["just"],"definitions of":["Functor,","the","its"],"definitions that":["I"],"definitions with":["2"],"definitions you're":["exporting."],"definitions, and":["indented"],"definitions, because":["I"],"definitions, imports,":["etc.","etc."],"definitions. For":["a"],"definitions. I":["know"],"definitions. I'd":["personally"],"definitions. See":["[modules](http://www.haskell.org/tutorial/modules.html),"],"definitions. Unless":["there's"],"definitive answer...":["for"],"definitively is)":["in"],"definitively need":["to"],"definitively with":["a"],"definitly a":["question,"],"deforestation (foldr/build":["fusion)"],"deforestation rewrite":["RULES"],"deforestation you'll":["have"],"deforestation. Due":["to"],"degenerating into":["a"],"degree. If":["you're"],"delay in":["getting"],"delayed it":["seems."],"delete a":["comment...]]"],"delete or":["comment"],"delete these":["\"submitted-in-errors\"."],"delete those":["comments.."],"deleted it":["and"],"deleted the":["type"],"deletes the":["first"],"deleting the":["line"],"deliberate or":["an"],"deliberate reason.":["I"],"delimit the":["argument"],"delimited by":["record"],"delimited lists,":["which"],"delimiters. Also,":["`fromListWith`"],"delineation between":["the"],"demand and":["doesn't"],"demand, is":["that"],"demand, so":["generating"],"demanded, then":["the"],"demonstrably true.":["But"],"demonstrate how":["little"],"demonstrate the":["problem"],"demonstrated that":["a"],"demonstrates this":["(my"],"demonstrating the":["difference"],"demorgan's law":["and"],"demystify it":["much...!"],"denote function":["application,"],"dense and":["that"],"dense blocks":["of"],"dense now.":["I"],"dense though":[";)"],"denser. `transform`":["is"],"depend on":["this","`s'`.","the","the","optimization","optimization","the","context.","optimizations).","a","the","the"],"depend so":["much"],"dependant, when":["the"],"dependence on":["any"],"dependence. You":["could"],"dependencies here":["and","and"],"dependencies in":["task"],"dependencies outside":["of"],"dependencies\" I":["mean"],"dependency in":["letters"],"dependency of":["that"],"dependency on":["`Text.Regex`"],"dependency pretty":["easily:"],"dependent on":["the","implementation","the","compiler","the","the"],"dependent though,":["in"],"dependently typed":["language."],"depending on":["whether","what","the","the","how","whether","how","the","the"],"depends I":["think,"],"depends not":["only"],"depends of":["what"],"depends on":["`s''`.","the","the","isQuestion.","DataKinds,","what","whether","the","the","some","GHC's","your","a","the","the","the"],"depends what":["benefits"],"deprecated functions":["that"],"deprecated so":["you"],"deprecated though,":["so"],"deprecated way":["to"],"deprecated) way":["to"],"deque since":["there's"],"deque with":["a"],"derive Bounded":["as","you","and","and"],"derive Bounded,":["you"],"derive Enum":["until","and","and","and"],"derive Enum,":["which"],"derive Eq":["for"],"derive `Bounded`":["and"],"derive `Enum`.":["Looking"],"derive `Show`":["for"],"derive for":["`Bearing`"],"derive from":["Enum"],"derive some":["class"],"derived Enum":["instance","(and"],"derived Show":["to"],"derived `show`,":["you'd"],"derived read/show":["happens"],"deriving (Show,":["Eq)","Eq)","Eq)","Eq)"],"deriving Enum":["for","might","and"],"deriving `Enum`":["and"],"deriving `Ord`":["for"],"descending list":["seems"],"descending sequence":["of"],"describe \"the":["sentence"],"describe how":["to"],"describe idea,":["if"],"describe in":["a"],"describe it.":["This"],"describe the":["algorithm"],"describe what":["should"],"described and":["then"],"described how":["to"],"described in":["instruction,","the"],"described on":["the","http://www.haskell.org/haskellwiki/Let_vs._Where"],"described there":["in"],"describes. The":["Haskell"],"describing algorithms":["with"],"description and":["my","it"],"description clearly":["states"],"description doesn't":["guarantee"],"description gives":["no"],"description here":[":)"],"description in":["the"],"description of":["this","the","the","the","how","the"],"description, i.e.":["\"a"],"description, or":["maybe"],"description, other":["than"],"description. It":["would"],"description. My":["bad!"],"descriptive I":["don't"],"descriptive and":["I"],"descriptive error":["message"],"descriptive function":["and","and"],"descriptive name":["because","and"],"descriptive name,":["but"],"descriptive names,":["and"],"descriptive than":["`f`"],"descriptive value\u003cpre\u003eisYell":["xs"],"descriptive variable":["names"],"descriptive variable/function":["names"],"descructering the":["list"],"desided if":["the"],"design of":["these"],"design problems":["with"],"design was":["driven"],"design, but":["most"],"designed API":["and"],"designed mutable":["name"],"designed this":["library."],"designing the":["program."],"desirable to":["use","make","export","do","write"],"desirable, you":["should"],"desire, although":["that's"],"desired effect":["here"],"desired functionality.":["So"],"desired functions.":["Therefore"],"desired outcome?)":["http://stackoverflow.com/questions/8235797/is-foldl-ever-preferable-to-its-strict-cousin-foldl"],"desired strictness":["characteristics?"],"desired weekday.":["You"],"desired you":["could"],"desired, so":["this"],"despite getting":["almost"],"despite having":["fewer"],"despite me":["saying"],"despite the":["slight"],"despite your":["`MultiwayIf`"],"destroyed it.":[":)"],"destructor is":["a"],"destructor on":["the"],"destructor you":["could"],"destructuring (`('T':rest)`)":["and"],"desugar to":["something"],"desugared `map":["(\\x"],"desugared. You":["can"],"desugars to":["as","`(++)"],"detail and":["shouldn't"],"detail behind":["the"],"detail in":["the"],"detail of":["the","the"],"detail that":["the"],"detail with":["nice"],"detail!) but":["is"],"detail, but":["I"],"detail. I":["could"],"detailed explanation":["although"],"detailed response!":["I'll"],"detailed review.":["I"],"detailed unit":["tests"],"details and":["not"],"details are":["also"],"details for":["the"],"details here":["that"],"details if":["you","they"],"details of":["what","other","analyze.","filtering"],"details with":["examples."],"details. All":["of"],"details. You":["may"],"details. `fromListWith`":["[uses"],"detect OtherMessage":["then"],"detect a":["word"],"detect drunk-talk":["but"],"detect this":["problem."],"detectSilence ::":["String"],"detectSilence s":["="],"detecting if":["all"],"detection heuristic":["on"],"detection, rather":["than"],"detector... which":["I"],"detects deadlocks":["and"],"determine if":["I"],"determine is":["that"],"determine the":["result,"],"determine this.":["I"],"determine what":["a"],"determine what's":["a"],"determine where":["a"],"determine whether":["there","to","the"],"determine which":["of"],"determined (when":["the"],"determined by":["where"],"determined that":["`a`"],"determined to":["repeatedly"],"determining whether":["to"],"deterministically using":["only"],"detriment in":["this"],"detriment of":["our"],"dev: 12.91355":["ns,"],"dev: 151.2879":["ns,"],"dev: 185.9828":["ns,"],"dev: 283.4461":["ns,"],"dev: 311.6777":["ns,"],"dev: 66.00215":["ns,"],"developed as":["response","a"],"developed the":["defense"],"developer can":["omit"],"developer's instinct":["to"],"developers are":["conscious"],"developers seem":["to"],"developers tend":["to"],"developers who":["are"],"developers will":["write"],"developers won't":["put"],"developers would":["write","do","define","just","write","make","make","write","do"],"developers wouldn't":["use","write","bother","use","include"],"developing an":["API."],"development have":["coalesced"],"diagram =":["fromList","fromList"],"diagrams and":["more"],"dictate that":["an"],"dictated by":["this"],"dictionary. I'll":["definitely"],"dictionary. In":["fact,"],"did I":["forget","miss","miss"],"did `exercism":["fetch`"],"did `fromListWith":["(+)"],"did a":["quick","new"],"did add":["in"],"did also":["propose"],"did an":["eta-reduction","eta-reduction"],"did ask":["about"],"did but":["I"],"did consider":["that,","this","the","using"],"did crash.":["Maybe"],"did end":["up"],"did everything":["except"],"did favor":["conciseness"],"did for":["Elixir!"],"did fuse":["everything"],"did get":["rid"],"did give":["a"],"did have":["a","it"],"did here":["for"],"did in":["my","Ruby,","`makeList`.","lines"],"did include":["RNA"],"did initially":["try"],"did intend":["that"],"did it":["in","that","as","anyway","this","the","this","in","build"],"did it,":["so"],"did it.":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/grade-school/example.hs","Turns","To"],"did learn":["of"],"did like":["the"],"did look":["at","at","a"],"did matter.":["Removed!"],"did mine":["without"],"did more":["difficulties"],"did myself).":["Most"],"did not":["know","tell","know","work,","want","like","try","think","know","know","cover","find","define","suggest"],"did one":["eta-reduction."],"did play":["with"],"did pretty":["good."],"did replace":["the"],"did say":["_a_"],"did see":["a"],"did seem":["excessive,"],"did some":["refactorings"],"did something":["similar"],"did that":["for"],"did that.":["So"],"did the":["it","same","case","exercise:","same"],"did them":["separately:"],"did this":["because","at"],"did though,":["I'm"],"did to":["fix"],"did try":["for"],"did use":["`last`","```wordsBy```","function"],"did want":["to"],"did what":["you","you"],"did with":["shouting"],"did wonders":["for"],"did write":["it","a","it"],"did you":["consider","choose","define","go","use","consider","decide","implement","think"],"did, it's":["easier"],"did, the":["answer"],"did. Strictness":["issues"],"did](https://github.com/kytrinyx/exercism.io/commit/2564b1549b95044b14f52c84c37f7ea3a6bda6a0), in":["case"],"didn't -":["`newtype`"],"didn't I,":["I"],"didn't actually":["want","realize","benchmark)."],"didn't already":["have"],"didn't bother":["reading","implementing","to"],"didn't change":["the"],"didn't check":["if"],"didn't clean":["it"],"didn't consider":["that","that.","performance","using"],"didn't do":["it","Comp"],"didn't even":["notice,","think","know","think","know","consider","think","think","think"],"didn't expect":["to"],"didn't export":["it"],"didn't feel":["like","any","right..."],"didn't find":["`last`","it","a"],"didn't get":["that","the","the","what","to","what"],"didn't have":["the","the","a","`Data.Map.Strict`.","to","that","the"],"didn't help":["me","(see","much."],"didn't hit":["on"],"didn't import":["from"],"didn't in":["mine"],"didn't just":["use","use"],"didn't know":["about","about).","about","there","that.","about","why.","about","that","about","if","about","that","the","about","about","about","about","about","about","about","about","about","that","about","about","there","about","that.","isAlphaNum","that."],"didn't like":["using","my","it","the","the","the","what"],"didn't look":["right.","consistent"],"didn't make":["any","`Schedule`"],"didn't mean":["to","to"],"didn't miss":["anything"],"didn't need":["the"],"didn't notice":["them","that","that.","that","that.","this","that"],"didn't quite":["feel"],"didn't realise":["that"],"didn't realize":["it","`split`","that","that","that","that","about"],"didn't really":["fully"],"didn't rely":["so"],"didn't remember":["that"],"didn't see":["anything","`Data.List.Split`","that","what","it","that","your","anything","that"],"didn't seem":["to","as","to"],"didn't succeed,":["I"],"didn't take":["advantage"],"didn't test,":["thanks!"],"didn't think":["about","to","to","about","of","too","of","of","of","the","about","about"],"didn't thought":["about"],"didn't try":["and","to"],"didn't update":["for"],"didn't use":["the","the","your","a","any","it"],"didn't want":["to","to","to","to","to","to"],"didn't work":["out"],"didn't write":[":)"],"didn't you":["use"],"didn't, for":["use"],"didn't, the":["main"],"diehard follower":["of"],"diff-lists, but":["I"],"differect clauses":["for"],"difference and":["how"],"difference as":["```O(n!)```"],"difference at":["runtime","all"],"difference between":["using","the","yours","variables","the","the","the","partial","where","the","O(1)"],"difference but":["it"],"difference compared":["to"],"difference except":["for"],"difference for":["performance,","IO","the"],"difference here":["made","for","is","is"],"difference in":["efficiency","performance","runtime","runtime","this","efficiency","terms","this","days"],"difference is":["that","how","that","significant,","the","to","that","how","also","negative","early"],"difference list":["possibly,"],"difference list,":["yes?","which","you"],"difference lists":["are"],"difference lists,":["but"],"difference that":["I've","laziness"],"difference would":["be"],"difference, and":["as"],"difference, but":["with","a","it's","usually"],"difference, compare":["your"],"difference, it":["would"],"difference, so":["the"],"difference, the":["implementation"],"difference. Simple":["and"],"difference. This":["will"],"difference. `foldl'`":["only"],"difference? And":["what"],"differences between":["`IORef`"],"differences described":["on"],"differences too":[".."],"different (Carthorse":["and"],"different (so":["might"],"different `x1":["-"],"different answer":["than"],"different approach":["where","with"],"different approach.":["My"],"different behavior.":["You'll"],"different bottom":["behavior"],"different but":["they're"],"different cases":["of","so"],"different cases,":["so"],"different character":["classes"],"different constructor":["from"],"different data":["structure.","structure"],"different datastructure":["that"],"different day":["than"],"different definition":["of"],"different exercises":["that"],"different formats":["and"],"different from":["most","what","most","`x`","old","yours):"],"different function":["from","that","between"],"different going":["on"],"different heuristics.":["Which"],"different implementations":["of"],"different in":["other"],"different indentation":["here,"],"different inputs":["made"],"different kinds":["of","of"],"different lengths":["-"],"different level":["of"],"different lines":["of"],"different locations),":["but"],"different manner":["of"],"different meaning":["for"],"different method":["signature"],"different module":["`Map.fromList`."],"different modules,":["which"],"different name":["could","should","every"],"different names":["for","for"],"different names,":["or"],"different naming":["conventions"],"different now":["that"],"different number":["of"],"different opinion":["on"],"different options":["that"],"different orders":["of"],"different performance":["characteristics."],"different predicate":["for"],"different reasons,":["you"],"different result":["depending"],"different result,":["even"],"different route":["though."],"different scale.":["Thanks."],"different scopes":["is"],"different semantics.":["Otherwise"],"different sides":["is"],"different sides,":["so"],"different sizes.":["Sometimes"],"different solution":["to"],"different space":["leak.","leak."],"different strictness":["semantics"],"different strings":["(anagrams)","in"],"different suggestions":["you"],"different syntax,":["and"],"different test.":["I"],"different than":["namespacing","```anagramsFor","just"],"different trick":["that"],"different type":["signature."],"different types":["(that's"],"different values.":["Either"],"different variable":["names"],"different version":["where","of"],"different warnings":["for"],"different way":["to","than"],"different way.":["The","I"],"different way...":["the"],"different ways":["of"],"different ways.":["That,"],"different words'":["and"],"different, `":["(length"],"different, in":["this"],"different, reset":["one,"],"different, when":["reading"],"different/equal sides":["that"],"differentiate operators":["from"],"differentiating characteristics":["of"],"differently (although":["at"],"differently anyway,":["see"],"differently at":["the"],"differently like":["you"],"differently to":["prevent","other"],"differently, maybe":["something"],"differently. I":["think"],"differently. Normally":["multi-line"],"differs from":["the"],"difficult concepts":["in"],"difficult for":["me..."],"difficult in":["Integer."],"difficult task":["in"],"difficult to":["understand.","deal","get","create","get","support)."],"difficult. Also":["square"],"difficult. The":["solution"],"difficulties to":["do,"],"difficulty benchmarking":["this"],"difficulty for":["Haskell"],"difficulty from":["the"],"difficulty in":["Haskell,"],"difficulty. My":["general"],"dig deeper":["to"],"dig into":["Haskell","that"],"digest a":["little"],"digest size),":["just"],"digest that":["all."],"digested how":["yet."],"digesting the":["monad"],"digit (no":["preprocessing"],"digit (which":["is"],"digit ::":["IO"],"digit =":["numeral"],"digit and":["overall","subtract"],"digit character,":["rather"],"digit is":["dropped","0","'1'."],"digit isn't":["necessary."],"digit models":["into"],"digit numbers":["that"],"digit numbers,":["and"],"digit processed.":["`foldl'`"],"digit requires":["a"],"digit to":["int"],"digit with":["`checksum`."],"digit) and":["moving"],"digit, and":["if"],"digit, then":["you"],"digit, you":["should"],"digits (like":["\"CM\")"],"digits ++":["go"],"digits .":["(*2)]"],"digits =":["case","reverse","number"],"digits ==":["'1'`","1`"],"digits a":["Char"],"digits and":["calculating","it"],"digits are":["invalid.","ignored","parsed"],"digits as":["binary"],"digits directly.":["`read`"],"digits either.":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/roman-numerals/example.hs"],"digits from":["various","least","smallest"],"digits in":["`create`"],"digits such":["that"],"digits to":["know"],"digits under":["the"],"digits without":["converting","using","too"],"digits yourself":["in"],"digits\" test.":["I"],"digits) or":["if"],"digits, and":["the"],"digits, digits)":["of"],"digits, it":["can"],"digits` -":["can"],"digits` in":["`number`","a"],"digits` to":["a"],"dilemma with":["a"],"dilemma: either":["you"],"dimention layout":["to"],"dimentional Vector":["of"],"direcly from":["the"],"direct equivalence":["in"],"direct equivilance.":["Which"],"direct methods.":["Also,"],"direct port":["of","of"],"direct recursion":["due","rather"],"direct recursion.":["Higher"],"direct solution":["here"],"direct than":["the"],"direction I":["should"],"direction and":["tell"],"direction here.":["Enum"],"direction seemed":["like"],"directions that":["I"],"directly 'T'":["and"],"directly but":["it's"],"directly do":["anything"],"directly either":["by"],"directly find":["the"],"directly from":["Clojure,","the","the","Clojure.","`Inquiry"],"directly in":["the","a"],"directly instead":["of"],"directly on":["`School`.","the","the"],"directly or":["implicitly","filter"],"directly rather":["than"],"directly since":["you"],"directly to":["strings."],"directly when":["adding"],"directly which":["is"],"directly, but":["what"],"directly, some":["characters"],"directly. If":["you"],"directly. There":["is"],"directly. `read`":["and"],"dirty, but":["I","I"],"disadvantage to":["laziness"],"disadvantage). The":["reason"],"disadvantage, and":["those"],"disagree on":["this","whether"],"disagree with":["Carsten,"],"disagreeing on":["this,"],"disagreeing whatsoever":["that"],"disagreeing with":["anything,"],"disagreement about":["that,"],"disagreement, @laury,":["I"],"disallow them":["and"],"disallowed in":["the"],"disappear... (might":["be"],"disappointed that":["unify","it","I"],"discard all":["information"],"discard some":["of"],"discarded when":["overwritten."],"discarding, bad":["input"],"disconnect between":["the"],"discount the":["possibility","constant"],"discount. While":["@susana's"],"discouraged to":["rely"],"discouraged. Ignoring":["the"],"discover Functor":["and"],"discover it":["would"],"discover that":["one"],"discover why":["`foldl'`"],"discovered `splitAt":["::"],"discovered that":["I"],"discuss about":["possible"],"discussion about":["the"],"discussion on":["#haskell.","the"],"discussions involving":["both"],"discussions on":["test-driven"],"disinclined to":["optimise","factor","use"],"disk is":["slow"],"dislike `not":["."],"dislike that":["i"],"dislike the":["list"],"dislike using":["default"],"disliked that":["it"],"dismissed the":["idea"],"disorganized. Have":["you"],"dispatch xs":["x"],"dispense with":["importing","`maybeToList`"],"display .":["classify\""],"display a":["function"],"display and":["classify."],"display function,":["it"],"display in":["my"],"display is":["already"],"display responses":["is"],"dispute that":["the"],"dissatisfied with":["the"],"distance at":["first"],"distance indicator":["and"],"distance with":["Levenshtein"],"distant future,":["some"],"distinct functions,":["and"],"distinct lines),":["and"],"distinct type.":["That's"],"distinction (the":["one"],"distinguish between":["constants."],"distinguish two":["words"],"distracted a":["little"],"distracting, e.g.":["\u003cpre\u003eV.map"],"distribution in":["case"],"distribution is":["quite"],"distributions there":["are"],"distrust of":["`++`"],"disturbed that":["`sort"],"div ::":["Integral"],"div and":["mod"],"divMod 21":["2","2","3","3"],"divMod 42":["2"],"divMod 7":["3","3","4","7"],"divMod n":["value"],"divMod to":["figure"],"dive deeper":["in"],"dive in\",":["or"],"diverged later).":["As"],"dividable, and":["then"],"divide it":["by"],"divided `n`":["by"],"divided by":["-2?\"","-2?\""],"divided out).":["It's"],"divided the":["data"],"divined how":["that"],"divisable by":["3,"],"divisible by":["1600.","4","100","400.","both","400","400","100"],"divisible if":["they"],"divisible is":["really"],"divisibleBy 100)\u003c/pre\u003e":["and"],"divisibleBy 400":["||"],"division when":["I"],"division with":["numbers"],"division, but":["with"],"division, e.g.":["with"],"divisions. However,":["it's"],"divisors :)":["that"],"divisors before":["doing"],"divisors, it":["will"],"divisors. A":["precomputed"],"divisors. For":["more"],"divisors? Because":["if"],"dlaet ltshu":["i\""],"dna =":["case","case"],"dna argument":["entirely"],"dna reduction":["-"],"dna strand":["only"],"dna string":["to"],"dnaToRna (DNA":["x)"],"dnaToRna a":["little"],"dna` and":["`char"],"dna` than":["a"],"dninn dlaet":["ltshu"],"do (an":["example"],"do (consider":["eta-reduction,"],"do (due":["to"],"do *something*":["for","if"],"do 9":["*"],"do 98":["lookups"],"do \u003cpre\u003e...f3":["."],"do Comp":["Sci"],"do First.":["The"],"do Haskell,":["but"],"do I":["just","get","create","split","need","count","define"],"do IO":["inside"],"do O(1)":["lookup"],"do `(id":["&&&"],"do `:info":["($)`"],"do `BankAccount":["\u003c$\u003e"],"do `Integral":["a`."],"do `[minBound..]`":["or"],"do ```sorted```.":["I'm"],"do ```wordCount```":["without"],"do `all":["isUpper`."],"do `concatMap`":["if"],"do `f(":["x"],"do `flip":["insertWord`"],"do `fromJust`":["instead."],"do `fromListWith":["(+)","f"],"do `genName`":["without"],"do `i`":["and"],"do `import":["Data.Map","qualified"],"do `isShouting":["str"],"do `map":["(\\x","(id","(swap"],"do `name":["r`"],"do `not":["."],"do `nucleotideCounts`":["without"],"do `reshape`":["and"],"do `reverse":["[end..initial]`,"],"do `runhaskell":["bob_test.hs`"],"do `sum":["$"],"do `toWeekday`":["as"],"do a":["bit","static","\"wildcard","few","single-pass","trim","lot","full","lookup","lot","bit","lot","case","lot","foldl'-based","straightforward","case","left","little","qualified","version","little","left","`count`","case","little","tiny","better","little","very","lot","little","single-pass","full","prime","bit","bit","constant","little","tiny","little","little","\"float","bit","simpler","\u003c-","fold"],"do about":["`parseNucleotide`?"],"do acct":["\u003c-"],"do actually":["works."],"do admit":["that"],"do agree":["when"],"do all":["necessary","of","of","kinds","of","scoring"],"do almost":["the"],"do already":["use","exists"],"do an":["[η-reduction](http://www.haskell.org/haskellwiki/Eta_conversion)","eta-reduction","eta-reduction","eta-reduction","eta-reduction","eta-reduction","eta-reduction","iota","eta-reduction"],"do and":["I"],"do another":["eta-reduction"],"do any":["`seq`","unnecessary","filtering.","sorting","work.","computation,"],"do anything":["useful.","with","with","about","here.","and","in","whatsoever","to","nicer"],"do anything,":["btw),"],"do anything.":["Here's"],"do anything?":["Shouldn't"],"do argument":["plumbing"],"do arithmetic":["on)"],"do at":["all),"],"do automatic":["memorization"],"do away":["with","the"],"do b'":["\u003c-"],"do backticks":["in"],"do be":["more"],"do better":["optimizations","optimizations"],"do block":["short-circuits","exits","in"],"do block.":["If"],"do blocks":["I","for"],"do both":["parts","the"],"do case":["normalization"],"do constant":["time"],"do correct":["splitting"],"do default":["to"],"do efficient":["imperative"],"do end":["up"],"do essentially":["the"],"do exactly":["what"],"do explicit":["recursion"],"do feel":["that"],"do find":["it"],"do fine,":["except"],"do fix":["the"],"do for":["the","`total`!"],"do force":["it."],"do function":["application"],"do hate":["using"],"do have":["to","read","a"],"do here":["to","is","is"],"do here,":["such","that","which","most"],"do here.":["Seemed","You're"],"do his":["auto-magically"],"do if":["it's","you","the"],"do import":["the"],"do in":["point","haskell","your","this","a","Haskell?","Haskell,","code","`anagramsFor`?"],"do indentation":["better,"],"do inserts":["with"],"do is":["to","to","a","explicitly","verify","keep","feed","import"],"do it":["on","one","without","in","only","by","as","Haskell","and","iteratively.","without","while","once.","with","without","would","with","in","exactly","with","any","cleverly.","with","by","that","would","by","with","in","most","in","for","like","though.","with","is","inline","(an","in","in","other","cleaner","on","only","by","without","is","for","for","like","a","in-place","a","with","using","you","for","than","without","with","simpler","with","with","iteratively","though!","without","quicker,","from","with","without"],"do it)":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"do it).":["The"],"do it,":["but","since","but","I","the","but","since","although","but"],"do it.":["Without","Looked","You","I","It's"],"do just":["about","fine."],"do like":["that.","long","the","this","the","how","the"],"do many":["things."],"do map":["insertions"],"do more":["of","optimizations","with"],"do most":["of","of"],"do much":["since","since","better","better","here,"],"do much.":["To"],"do multi-line":["string"],"do not":["like","see","specify","need","check","have","really","need","think","like","think","deem","gain","see","understand","think","export),","ever","understand.","need","have","find","fully","understand","yet","understand","have","know","match.","have","force","need","belong","get","need","depend","import","forces","forces","forces","clash","bothered,"],"do only":["one","one"],"do prepare":["using"],"do proper":["Haddock"],"do provided":["you"],"do qualified":["imports","imports"],"do redundant":["sanitization."],"do regarding":["the"],"do respect":["your"],"do seem":["to"],"do short":["cut"],"do short-cut":["fusion"],"do since":["it"],"do so":["the","much"],"do so,":["but"],"do so.":["For"],"do some":["pre-computation","useful","values"],"do something":["more","for","like:","with","a","silly,","for","like","about","like","like","similar.","similar","like","that","like","like","like"],"do statements":["can"],"do strict":["evaluation?"],"do syntax":["or","when","execute"],"do syntax.":["It's"],"do tail":["call"],"do take":["then"],"do that":["and","without","part","grouping.","later\"","if","with","with","sort","(unless","calculation.","though.","more","refactor.","`Map.fromList`.","as","I","for","unless","for","in","anyway,","when","for","for",":)","sensibly!","using","though,","is:","is","though,",":)"],"do that,":["but","it'd"],"do that.":["One","No","A","I"],"do that?":["Everything"],"do the":["rest","splitting","randomRIO","same","trick.","replacement","right","verses","same","same","meetupDay","optimization","rotation","same","partial","same","summing","quoting.","`O(n)`","wrong","foldl).","whole","latter","right","space","unnecessary","continued","right","incrementing","trick,","same","pattern","equivalent","comparisons.","direct","trick","same","inserts","transformations","conversion,","addition","eta-reduction","calculation","`toUpper","same","optimizations,","conversion","same","pass","`force`","case","split","counting.","exercises","eta","\"float","trick?","`map","whole","trick.","right","`map","counting","float","same","computation.","same","equivalent","any'","same","same","same","same","work","imports","counting"],"do them":["in"],"do these":["kinds","calculations."],"do things":["this","like","unless","the","that"],"do think":["you'll","it","it's","the","that","`mkRobot`","I"],"do this":["with","without","by","using","without","if","iteratively","iteratively","without","iteratively","iteratively","in","iteratively","I","with","with","a","using","with","with","without","with","Metadata","involves","without","?","with","sort","sort","more","with","more","in","with","more","in","you","without","with","exercise","as","is","(e.g.","by","better","would","with","in","is","without","would","point-free?","in","without","much","at","with","exercise","with","is","is","would","in","optimization","without","with","in","a","with","-","slightly","without","\"float","with","more","with","in","without","without","optimization","that","without","bitwise","with","by","float","in","with","without","in","with","pretty","instead","with","(+1)","for","float","without","optimization,","optimization","without","more","float","with","with","without","float","using","float","such","with","optimization","optimization","with","optimization","mostly","optimization","iteratively?","without","without"],"do this,":["but","do","as","but"],"do this.":["Here's"],"do this..":["but"],"do this...":["but"],"do this:":["have"],"do this?":["What","Seems"],"do those":["counts."],"do to":["simplify","make","improve","make","make","get","make"],"do trivial":["pre-computations"],"do two":["filters"],"do understand":["your"],"do use":["`runIdentity`","a"],"do use,":["rather"],"do was":["to"],"do we":["need","end","have","have","need"],"do what":["you're"],"do what's":["called"],"do while":["reading"],"do wish":["validate"],"do with":["Data.List","an","anagrams.","anagramming,","your","the","the","what","Haskell's","strings?","String","the","`Map`","addGregorianMonthsClip.","the","whether","`a","their","the","w","the","laziness","composition","inserting.","```unwords```","Haskell's","`seq`,","it","starting","the"],"do without":["here,"],"do wonder":["if","about"],"do would":["be","be","be"],"do x":["\u003c-","\u003c-","\u003c-"],"do ya'll":["think?"],"do yelling,":["but"],"do you":["think","exactly","think","work","think","mean","correct","think","mean","think","mean","feel","now?","get","mean","mean","think","use","split","find","use","think","think","choose","mean","end","figure?","believe","know","mean","think?","need","need","want,","know","mean","need","recommend?","recommend?","mind","mean","mean","think","want","gain","mean","know","need","want","mean","need","find"],"do your":["map","own","list"],"do). Using":["a"],"do, I":["can"],"do, an":["obvious"],"do, and":["I"],"do, because":["of"],"do, but":["I","I"],"do, due":["to"],"do, just":["makes"],"do, so":["it"],"do, you":["may"],"do. If":["you"],"do. It":["is"],"do. You":["have"],"do. You're":["working"],"do.. and":["how"],"do? I":["know","just"],"do? Or":["am"],"doable with":["the"],"doc says":["it"],"docs about":["[guarded"],"docs don't":["tell)"],"docs for":["[Data.String](http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-String.html)","`readMVar`"],"docs here":["for"],"docs is":["even"],"docs that":["is"],"docs warn":["that"],"docs) that":["Map"],"docs, it":["is"],"docs, look":["for"],"docs][haddock]. You":["can"],"document [Data.Map](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html),":["there"],"document why":["uses"],"documentation `concatMap`":["is"],"documentation and":["the"],"documentation could":["help"],"documentation for":["Haskell,"],"documentation on":["package,"],"documentation only":["says"],"documentation rarely":["helps"],"documentation strings.":["For"],"documentation though.":["Could"],"documentation) is":["going"],"documentation, and":["the","in"],"documentation, shouldn’t":["`Data.Map.Strict`"],"documentation, so":["`fold`"],"documented that":["there","there","there","this"],"documented to":["do"],"documenting the":["code."],"documents only":["handful"],"dodge the":["whole","list"],"does (ie:":["check"],"does *isAnagram*":["test"],"does *not*":["return"],"does 4":["passes"],"does I":["think."],"does O(n!)":["work"],"does `!(Int,":["Int)`"],"does `Just":["(+1)"],"does `all":["isSpace"],"does `filter":["(not"],"does `primes`":["serve"],"does `putMVar":["v"],"does `readMVar":["v`"],"does `sameSorting`":["take"],"does `square":["n`"],"does a":["good","strict","great","similar","strict","lot"],"does adhere":["to"],"does an":["OR"],"does and":["it's"],"does anything,":["and"],"does applying":["cleanUpInput"],"does at":["least"],"does beg":["the"],"does both":["the","of"],"does but":["it"],"does definitely":["clean"],"does evaluate":["you"],"does everything":["you"],"does exactly":["what","what","what","what"],"does for":["you"],"does four":["passes"],"does has":["little"],"does have":["a","some","syntax","a","to","one","a","immutable"],"does here.":["You"],"does in":["the","some"],"does indeed":["need","make","ensure"],"does is":["increment"],"does it":["protect","make","work?","look","make","serve","ever","work","get"],"does keep":["your"],"does kind":["of"],"does look":["funny.","really","better","better","like","quite","much","like","rather"],"does make":["the","performance"],"does mean":["that."],"does mechanically":["in"],"does merges":["by"],"does misuse":["`randomRs`"],"does more":["than","than"],"does most":["of"],"does my":["mapper"],"does need":["it,"],"does no":["error"],"does not":["really","work","allow","have","return","pass","represent","feel","have","convey","add","add","expect.","address","end","have","use","return","take","allow","contribute","alter","return","cover","exist","prevent","do","warn","use","seem"],"does one":["pass,","pass"],"does other":["weird"],"does pass":["tests,","the"],"does recalculate":["for"],"does remove":["some"],"does require":["enabling","wrapping","the"],"does retain":["some"],"does run":["in"],"does seem":["to","to","to","like","like","like"],"does show":["off"],"does something":["different","that"],"does sound":["like"],"does tend":["to"],"does that,":["I"],"does that.\u003cpre\u003ePrelude\u003e":[":t"],"does the":["`insert`","comparison?","same","same","compiler","same","same","application","work","`foldl'`","work","same","same","magic","right","`Control.Arrow`","`map","shifting","nucleotide","normalization"],"does this":["not","but","for","internally","with","mean","for","for","efficiently.","implicitly)","code","behind","work?","actually"],"does toUpper":["return"],"does type":["conversion"],"does use":["a"],"does very":["little."],"does what":["i'd","isAll","your","`unique`"],"does with":["with"],"does work!":[":)"],"does work,":["it's"],"does your":["`shouting`"],"does, but":["more","faster).","it","it","`foldl`"],"does, each":["point"],"does, so":["you","it's"],"does. I":["really"],"does. Just":["reading"],"does. Not":["much"],"does. Perhaps":["you"],"does. So":["I"],"does. This":["leads"],"does. thank":["you"],"doesn't actually":["matter","need","feel","matter","have"],"doesn't add":["or"],"doesn't agree":["with"],"doesn't align":["as"],"doesn't allow":["tail"],"doesn't allow:":["IO."],"doesn't already":["exist."],"doesn't always":["run"],"doesn't appear":["particularly","to","to"],"doesn't apply":["the","to"],"doesn't build":["intermediate"],"doesn't buy":["you"],"doesn't care":["if"],"doesn't carry":["Deque"],"doesn't catch":["it.."],"doesn't change":["the"],"doesn't clash":["with"],"doesn't come":["with","with"],"doesn't compile":["because","without"],"doesn't complile":["for"],"doesn't conflict":["with"],"doesn't contain":["any"],"doesn't convey":["its"],"doesn't count":["frequencies."],"doesn't cover":["this","this,"],"doesn't cross":["haskell"],"doesn't default":["to"],"doesn't depend":["on"],"doesn't describe":["what"],"doesn't do":["anything","the","any","anything"],"doesn't eliminate":["it,"],"doesn't escape":["this"],"doesn't evaluate":["thunks","anything"],"doesn't even":["handle","happen"],"doesn't exactly":["go"],"doesn't exclude":["invalid"],"doesn't explicitly":["take","export"],"doesn't feel":["very","very"],"doesn't fit":["neatly"],"doesn't force":["values,","result","its","them","values","values","the"],"doesn't forces":["values","its","its"],"doesn't fully":["evaluate"],"doesn't get":["better,","all"],"doesn't give":["you"],"doesn't go":["through"],"doesn't guarantee":["that","that"],"doesn't handle":["errors","the"],"doesn't have":["a","a","to","great","to","styles","any","such","to","exhaustive","much","a","the","effects.","any","updated","to","locks","an","that"],"doesn't have,":["for"],"doesn't help":["readability"],"doesn't imply":["anything","any"],"doesn't include":["lens).","all"],"doesn't index":["as"],"doesn't involve":["an"],"doesn't it":["*have*"],"doesn't it!":["Changing"],"doesn't it?":["Not"],"doesn't keep":["information"],"doesn't know":["about"],"doesn't lead":["to"],"doesn't like":["the"],"doesn't line":["up"],"doesn't logically":["apply?"],"doesn't look":["like","like","like","like","like","like"],"doesn't love":["function"],"doesn't make":["as","it","a","sense,","a","much","sense:","a","any","it","sense","clear","a"],"doesn't makes":["sense"],"doesn't match":["the","Data.Char's"],"doesn't matter":["-","too","much","much","here,","much.","so","in","too"],"doesn't matter,":["that"],"doesn't mean":["that"],"doesn't measure":["`length`"],"doesn't mutate":["the"],"doesn't need":["pre-filtered","any","that","parentheses.","the","parentheses.","to","parentheses","parentheses.","to","to","parentheses,","it)","to","to","to","to","to"],"doesn't pass":["all","the","the","the","the"],"doesn't pass,":["then"],"doesn't quite":["work"],"doesn't really":["matter.","seem","buy","change","outweigh","check","do","make","need","do","do","allow","help","seem","do","need","matter.","matter","matter","hurt","buy"],"doesn't repeatedly":["apply"],"doesn't require":["computing","lists","sorting","transaction","it","two","such"],"doesn't return":["anything,"],"doesn't rewrite":["it"],"doesn't run":["(such"],"doesn't say":["anything"],"doesn't scan":["the"],"doesn't seem":["to","too","correct","to","right?","to","really","much","used,","to","to","vital.","to","to","wise","great.","to","to","to","to","any","to","quite"],"doesn't serve":["a"],"doesn't share":["computations"],"doesn't submit":["a"],"doesn't suffer":["from"],"doesn't support":["default"],"doesn't take":["the"],"doesn't terminate":["for"],"doesn't that":["mean"],"doesn't traverse":["the"],"doesn't type":["check,"],"doesn't update":["test"],"doesn't use":["`last`,","it","explicit","many","`length`,"],"doesn't very":["clearly"],"doesn't work":["if","but","on","inside","on"],"doesn't work,":["correct?"],"doesn't work.":["It","Therefore"],"doesn't yield":["a"],"doesn't), you":["can"],"doesn't, due":["to"],"doesn't. The":["issue"],"doing \u003cpre\u003e400":["`elem`"],"doing Haskell":["long"],"doing IO":["of"],"doing `10^(9":["::"],"doing `10^(fromIntegral":["9)`"],"doing `f":["\u003c-"],"doing `intercalate":["\""],"doing `sort":["$"],"doing `sorted":["="],"doing a":["`map","strict","qualified","version"],"doing all":["the","of"],"doing an":["array","almost"],"doing and":["opens"],"doing any":["sort","sort"],"doing anything":["with"],"doing at":["least"],"doing both":["sanitation","jobs"],"doing but":["not"],"doing compared":["to"],"doing computations":["where"],"doing everything":["as"],"doing explicit":["recursion","recursion"],"doing folds":["makes"],"doing from":["the"],"doing here:":["you're"],"doing in":["76","this"],"doing it":["this","manually","wrong.","by","by","yourself).","wrong.","that","is"],"doing less":["work."],"doing lookup":["and"],"doing normalization":["of"],"doing one":["thing.","pass","loop"],"doing smth":["wrong,"],"doing so":["you","via"],"doing so.":["It","I"],"doing so...":[":-P"],"doing some":["kind"],"doing something":["wrong...","with","called","wrong","like"],"doing string":["manipulation"],"doing temporary":["assignment"],"doing that":["in","at","with","and"],"doing that,":["but"],"doing that.":["It"],"doing the":["checks,","day","let","`++`","whole","whole","folds","computation","exact","recursion","`mutation`","same","addition,","legwork!","addition","evaluation","`\u003e=`","right","computation","same","computation","`foldr`","right","work","operations","same"],"doing these":["inserts","exercises"],"doing this":["better","using","without","with","is","as","without","meanwhile","on"],"doing this,":["so"],"doing this:":["```(\\xs"],"doing though.":["This"],"doing though?":["I"],"doing transformations":["and"],"doing trial":["division"],"doing two":["reverses."],"doing unexpected":["things?"],"doing weird":["stuff"],"doing with":["`Data.List`)","`normalise"],"doing, and":["gives"],"doing. Probably":["lots"],"domain of":["`answer`"],"don't (e.g.":["Data.Set)."],"don't I":["know"],"don't accidentally":["expose"],"don't accidently":["create"],"don't actually":["need","have","need","work","have"],"don't agree":["with"],"don't appreciate":["the"],"don't ask":["you"],"don't bother":["with"],"don't bring":["it"],"don't build":["up"],"don't build-up":["inside"],"don't call":["`square`"],"don't care":["about","about","about"],"don't check":["for"],"don't clean":["the"],"don't commonly":["see"],"don't compile":["your"],"don't consider":["it","encountering"],"don't count":["as"],"don't cover":["it","this,","this","this","this"],"don't currently":["cover"],"don't delimit":["the"],"don't depend":["so"],"don't describe":["the"],"don't dispute":["that"],"don't do":["explicit","that","anything,","this","much"],"don't evaluate":["until"],"don't even":["need","know"],"don't exist,":["since"],"don't expect":["that","it","to"],"don't export":["the"],"don't feed":["the"],"don't feel":["\"which"],"don't find":["idiomatic"],"don't force":["people"],"don't forget":["that","to"],"don't forgot":["that"],"don't fulfil":["isLower"],"don't fully":["understand","understand","understand"],"don't fuse,":["this"],"don't generally":["put"],"don't get":["discouraged.","the","a","it,","the"],"don't get,":["is"],"don't give":["me,"],"don't got":["any"],"don't have":["to","to","any","the","this","to","to","to","to","to","to","to","to","to","much","to","to","to","to","to","to","to","to","to,","to","to","reference","time","any","to","so","a","to","to","to","to","to","to","to","such","to","a","to"],"don't include":["any","these"],"don't involve":["`isPunctuation`"],"don't just":["need"],"don't know":["why","what","why","your","much","about","if","if","what","a","exactly","how","how","if","how","how","how","if","why","what","how","it","how","how","why","if","what","a","if","why","why","if","how","how","if","the","if","how","I've","what","how","another","if","if","how","if","the"],"don't let":["this"],"don't like":["clutter","seeing","using","blanket","the","that","them).","the","the","to","is","the","is","that","allTrue","all","the","the","my","concept","how","it","that","that","the","it.","this,","the","the","using","using","such","some","to","having","about","language","using","using","API","using","case","repeating"],"don't like.":["Which"],"don't look":["for"],"don't make":["a"],"don't mean":["anything."],"don't mind":["the","it.","adding","using","a","and","hearing"],"don't miss":["it"],"don't necessarily":["lead"],"don't need":["this","the","to","to","a","any","the","to","to","to","to","to","to","to","to","to","them","a","the","parens","to","to","to","cabal","them","to","that","the","to","to","them,","to","to","to","to","to","to","to","to","them","to","`Prelude.foldl`","to","any","to","to","to","any","to","filter","to","to","trying","to","to","to","to","to","to","null","it","to","element","the","to","them","to","recursion.","parentheses","full","the","a"],"don't need,":["around"],"don't need.":["Everything"],"don't notice":["because"],"don't pass":["over"],"don't practice":["some"],"don't quite":["follow."],"don't quote":["me"],"don't really":["understand","like","know","see","see","have","want","know","use.","need","know","encourage","think","see","want","have","comprehend","understand","understand","have","understand"],"don't recall":["ever","changing"],"don't remeber":["if"],"don't remember":["seeing"],"don't require":["explicit","operator","this.","it,","this,"],"don't see":["how","a","how","how","what","the","anything","anything","a","any","a","how","anything","enough","how","a","when","a","though","anything"],"don't seem":["to"],"don't shadow":["existing"],"don't sort":["the"],"don't spoil":["it"],"don't stack":["up"],"don't test":["for"],"don't think":["this","they're","so.","you","the","using","the","you","using","that","guard","a","you're","wrapping","it's","that","it's","that","that","the","it","the","it's","this","it's","it's","the","that","explicitly","it's","performance","it","your","it's","there's","you","that","that's","Direction","it","about","you","I","it","if","it's","it","the","there's","your","this","asymptotic","I'm","it","you","there's","the","it's","I","anyone","it","that","the","the","backpermute","there's","`yelling`","putting","i","I","that","that","that","I","that's","it","I","I"],"don't think,":["is"],"don't totally":["grok"],"don't understand":["how","what","the","what","this","Haskell","why","what","second"],"don't use":["often,","words).","the","anything","it","it","anything","a","`count`.","where"],"don't usually":["use","indent"],"don't want":["to","`School`","anyone","to","to","to","to","to","to","to","to","to","a","to","to","to","to","more","to"],"don't with":["`Char`s."],"don't worry":["too"],"don't yet":["have"],"don't you":["like"],"don't, and":["you"],"don't. I":["got"],"done S":["is"],"done `import":["Data.Map"],"done a":["little","length","`fromListWith`","little","little"],"done actual":["performance"],"done aesthetically":["isn't"],"done algorithmically,":["but"],"done and":["see","found"],"done any":["Haskell","large","benchmarks"],"done anything":["in"],"done anyway":["by"],"done better":["with",";)","here."],"done between":["push/unshift"],"done but":["I'm"],"done by":["`lowerA","the"],"done easier":["with"],"done easily":["otherwise."],"done for":["both","now","datatypes)","`fours`"],"done here":["but","is","with","is"],"done here.":["No"],"done if":["the","it's"],"done in":["a","6:","a","a","`isSilence`","constant","constant","Ruby","`newName`","a","one","a","almost","fewer","a","a"],"done infix":["for"],"done is":["used","fine"],"done it":["without","in","here"],"done lazily":["and"],"done like":["so:"],"done more":["elegantly,","cheaply.","simply","simply"],"done much":["more","more"],"done nicely":["with"],"done once":["regardless"],"done outside":["the"],"done so":["you","far"],"done strictly,":["as"],"done that":["earlier","without","way"],"done the":["transformation","`join`.","other"],"done there.":["Nice"],"done this":["way","way","way?","before"],"done thus":["far"],"done to":["match","get","`x`","`normalizeWords`,"],"done toRNA":["from"],"done transforming":["the"],"done using":["`insertWith`","alternative"],"done very":["concisely"],"done via":["two","traversable."],"done with":["union","`flip","arithmetic","`map`","Prelude","`foldl'`","guards","just","fewer","arithmetic","a","setBit.","ord","`ord`","`foldM`?","lines","a","the","fewer"],"done within":["reason."],"done, albeit":["not"],"done, and":["it","by","then"],"done, because":["`Int`"],"done, but":["pulling","I"],"done. Did":["you"],"done. I":["don't"],"done. The":["only"],"done. Why":["not"],"dont know":["how"],"don’t know":["what"],"don’t like":["the"],"dot in":["an"],"dot is":["used"],"dots of":["the"],"dots with":["parentheses."],"double check.":["Thanks"],"double computation":["of"],"double iteration":["over"],"double logical":["negation."],"double makes":["the"],"double map":["in"],"double mention":["of"],"double monad/functor":["involved."],"double the":["value"],"double-flipped! I":["think"],"double])` instead":["of"],"doubled or":["tripled"],"doubled starting":["with"],"doubling and":["tripling?"],"doubling or":["trippling"],"doubly linked":["list,"],"doubt it":[";-)","matters"],"doubt it'd":["make"],"doubt that":["it"],"doubt, this":["is"],"dowhat may":["be"],"down I":["think."],"down into":["a","the"],"down is":["that","all"],"down naturally":["without"],"down on":["a","line"],"down quickly":["if"],"down that":["route?"],"down the":["number","page)","set","module","types"],"down to":["basically","the","a","preference,","what","unboxed","an","which","one","a","precisely","roughly","obtain","what"],"down with\u003cpre\u003efactors":["reducedN"],"down, but":["wouldn't"],"down, or":["pick"],"downcase and":["following"],"downcase) s1":["s2"],"downcased `str`":["for"],"downside is":["that"],"down…\"`) to":["make"],"dqhd ::":["TMVar"],"dqtl ::":["TMVar"],"draw the":["line?"],"drawbacks to":["syntax"],"drill down":["naturally","into"],"drink so":["much"],"drive)` or":["`foldl"],"driven by":["the"],"driven dude":["and"],"driving at":["although"],"drop (n-1)`":["is"],"drop .":["reverse"],"drop 1":["cs`"],"drop `Read`":["altogether,"],"drop fractional":["part,"],"drop head":["of"],"drop isPuntuation":["with"],"drop it":["and"],"drop m":["xs`?"],"drop some":["checks"],"drop the":["`nonempty`","(","argument","same","usage"],"drop type":["signature,"],"drop-in replacement,":["the"],"dropWhile (\u003c":["sqrt","x)"],"dropWhile (not":["."],"dropWhile and":["other"],"dropWhile if":["you"],"dropWhile isSpace`":["and"],"dropWhile reject":["s"],"dropWhile, etc.":["are"],"dropWhile, instead":["of"],"dropped a":["$"],"dropped from":["consideration"],"dropped guards,":["and"],"dropped the":["`readList`/`showsList`","`phrase`"],"dropping all":["over"],"dropping first":["index"],"dropping the":["parens.","`s`"],"drops =":["["],"drowsy to":["be"],"drunk-talk but":["still"],"ds') =":["ds`?"],"ds) -\u003e":["ds"],"ds` calculated":["on"],"dubious when":["you've"],"dubiously justifies":["any"],"dude and":["I"],"due to":["Haskell's","updated","all","Haskell's","Haskell's","the","Haskell's","haskell's","the","impatience","its","multiple","Data.Map's","Haskell's","the","lazy","Haskell's","the","having","the","the","the","Data.Map","stack","Haskell's","entrepum's","the","Data.Map","the","the","laziness,","subtle","`isSilence`","strictness","`cleanUpInput`.","deforestation","the","a","readMVar","less","the","some","lazy","code","laziness.","the"],"duh, the":["memory"],"dumb mistakes,":["now."],"dumb mistakes;":["this"],"dumb requirements":["like"],"dumb the":["compiler"],"dumb, but":["I"],"duplicate in":["10-13)."],"duplicates like":["`insertWith`."],"duplicating functionality":["already"],"duplication a":["bit"],"duplication already.":["I'm"],"duplication by":["introduction"],"duplication in":["this"],"duplication of":["the"],"duplication without":["real"],"duplication, but":["I"],"during add.":["Messing"],"during the":["iteration.","parse."],"dv (repeat":["k)`"],"dv k)`":["could","is"],"dwarf it,":["but"],"e -&gt;":["m"],"e =\u003e":["Either"],"e a":["nice"],"e a`":["in"],"e for":["the"],"e |":["p","Q"],"e) =&gt;":["v"],"e, Ord":["e)"],"e. But":["that"],"e.g. \u003cpre\u003eV.map":["V.head"],"e.g. L":["and"],"e.g. `\"1,":["2,"],"e.g. `&&`,":["`||`,"],"e.g. `((inputMap":["==)"],"e.g. `1":["'elem'"],"e.g. `C`":["would"],"e.g. `Cons":["a"],"e.g. `Data.Map`":["supports."],"e.g. `[len-1,":["len-2"],"e.g. `a'":["/="],"e.g. `adenine":["::"],"e.g. `data":["School"],"e.g. `filter":["isLetter"],"e.g. `fromListWith":["(\\a"],"e.g. `if":["(isSpace"],"e.g. `import":["qualified","Data.Char(isSpace,"],"e.g. `isAlphaNum":["c"],"e.g. `isAsciiLower`,":["`isDigit`,"],"e.g. `last":["x"],"e.g. `lookupPlants":["\"Blargh\""],"e.g. `module":["Bob","Bob","Bob","WordCount"],"e.g. `parts":["$"],"e.g. `randomRIO":["('A',"],"e.g. `responseFor":["m@(_:_)`"],"e.g. `upperCase":["="],"e.g. a":["`Map`"],"e.g. all":["or"],"e.g. append,":["filter,","filter,"],"e.g. building":["conditions"],"e.g. define":["a"],"e.g. e.g.":["it"],"e.g. for":["any"],"e.g. including":["`(900,"],"e.g. isEmpty":["could"],"e.g. it":["x"],"e.g. planetMultiplier":["="],"e.g. using":["a"],"e.g. variables":["that"],"e.g. with":["`quotRem`"],"e.g. would":["you"],"e.g. you":["can"],"e.g.: `import":["Data.Function"],"each \"instance\"":["of"],"each Char":["of"],"each Monad":["has"],"each `.`":["as"],"each `anagramsFor`":["call"],"each and":["choose"],"each base":["10"],"each base.":["It"],"each can":["be"],"each case":["though?","where"],"each case.":["Have"],"each change":["you"],"each change,":["this"],"each char":["if","for"],"each character":["is","once"],"each classification":["as"],"each clause":["in","in"],"each condition":["matched","represents."],"each condition,":["so"],"each count":["in"],"each count.":["Third"],"each digit":["requires","processed."],"each element":["in","from","of","of","to"],"each element.":["Can"],"each function":["separately."],"each guard":["is"],"each guard.":["Just"],"each helper":["function"],"each iteration":["so"],"each iteration,":["it"],"each iteration.":["The"],"each language":["would"],"each letter":["in","as"],"each level":["to"],"each list":["(assuming","will","n"],"each method":["and"],"each nucleotide":["without","occurs"],"each nucleotide)":["in"],"each nucleotide.":["It's"],"each number":["may"],"each numeral":["once,"],"each of":["the","your","you."],"each one":["individually"],"each operator":["is"],"each option":["one"],"each other'":["you"],"each other'.":["As"],"each other,":["you"],"each other.":["In","First","I"],"each part":["of"],"each point":["is"],"each possible":["nucleotide."],"each response":["is"],"each separately,":["making"],"each side":["of"],"each slice":["to"],"each step":["individually,","of","in"],"each step,":["here","and"],"each step?":["You","So"],"each test":["help"],"each tile":["may"],"each time":["it"],"each time?":["I"],"each time?)":["and"],"each type":["of"],"each value":["that","and","of","in"],"each variable":["and"],"each word":["into","as"],"each word,":["and"],"each words":["into"],"each, but":["I"],"each, in":["which"],"eager as":["most"],"eagerly and":["getting"],"eagerly computing":["the"],"eagerly evaluating":["the"],"eagerly, and":["that"],"earlier (failed)":["experiment."],"earlier (in":["program"],"earlier `binary`":["function,"],"earlier and":["so"],"earlier attempts":["had"],"earlier but":["people"],"earlier exercise?":["I"],"earlier it's":["much"],"earlier iteration":["and"],"earlier iteration.":["I'll"],"earlier iterations.":["I'm"],"earlier prime":["factors"],"earlier version":["the"],"earlier versions":["before","of"],"earlier) does":["`square"],"earlier. I":["see"],"earlier. Let":["me"],"early and":["you"],"early are":["memoized"],"early breaking":["if"],"early exit":["here"],"early failure":["can"],"early in":["any"],"early on":["in"],"early terminate":["(that's"],"early termination":["like"],"early when":["a"],"earn a":["score"],"earthYear /":["secondsPerYear`."],"earthYearsPerYearOn would":["be"],"ease of":["understanding."],"easier (and":["not"],"easier :)":["The"],"easier and":["more"],"easier by":["having"],"easier for":["sure.","checking","the","use","you,"],"easier in":["a","```parseWords```"],"easier on":["my"],"easier or":["more"],"easier since":["you"],"easier than":["quoting","that","previous:)"],"easier that":["way."],"easier time":["if"],"easier to":["understand.","see","see","read.","understand","read","implement","just","use","read.","follow","use","solve","do","use","code","use","write.","read","use)","read,","scan.","read.","reason","follow.","write.","read","use","handle","compose","read","read,","grok.","read","read","use","implement","read,","read","understand.","follow.","understand.","read","read/maintain","read.","understand,","read","read.","trace","use","write)","just","use","read","just","define","read","modify","read","read","read","process:)","read","read.","have","read,","return","read","read,","grok","read?"],"easier use":["that"],"easier way":["to","to","to","to","to"],"easier ways,":["such"],"easier with":["other"],"easier! In":["particular,"],"easier. I":["don't"],"easier.. oh":["well."],"easiest (but":["not"],"easiest to":["read,"],"easiest way":["to","to"],"easily (consider":["this"],"easily [pointfree](http://www.haskell.org/haskellwiki/Pointfree)":["`normalize`"],"easily annoyed.":["We"],"easily as":["`splitAt"],"easily avoid":["it"],"easily be":["written"],"easily calculate":["the"],"easily cause":["a"],"easily compute":["a"],"easily defined":["with"],"easily do":["is","this"],"easily done":["`import","with"],"easily enumerate":["all"],"easily express":["`isSilence`"],"easily extensible":["for"],"easily fix":["that"],"easily fixed":["by","by"],"easily guessable":["that"],"easily if":["it"],"easily implement":["it"],"easily implemented":["in"],"easily in":["GHCi","GHCi:"],"easily install":["Data.List.Split"],"easily lead":["to"],"easily locate":["the"],"easily looked":["up"],"easily make":["`readMVar`"],"easily matter":["if"],"easily perform":["an"],"easily precompute":["`sort"],"easily replace":["the"],"easily solve":["this"],"easily switch":["to"],"easily using":["`wordsBy`","Data.List.Split's"],"easily with":["`wordsBy`","`fmap`","GHCi:"],"easily work":["for"],"easily write":["it","`robotName`","the"],"easily you":["can"],"easily, here's":["what"],"easily-understood code":["would"],"easily. The":["`map`"],"easily; in":["`sorted`"],"easy (I'm":["not"],"easy (or":["is"],"easy and":["still"],"easy as":["importing"],"easy comparison":["between"],"easy description":["of"],"easy enough":["to","here"],"easy explanation":["of"],"easy in":["haskell"],"easy task":[":)"],"easy to":["determine","think","edit,","just","take","read.","implement","see.","use","find.","write","parse","search","just","avoid","chain","understand","remember","count.","implement","deconstruct","reason","compose","read","reason","grok","read"],"easy way":["to","to","to","to","to","out","to"],"easy with":["a"],"easy, for":["example:"],"easy, or":["you"],"easy, this":["module"],"easy-to-read code,":["given"],"easy-to-use typeclass":["that"],"easy. You'd":["need"],"ebnf to":["attoparsec"],"eco-system to":["learn"],"ecosystem at":["all."],"edge cases":["not"],"edge cases,":["such","but"],"edit `mkRobot`":["as"],"edit, but":["then"],"edit: phew,":["etrepum"],"edit: we":["have"],"editing I'd":["guess)"],"editor you're":["using,"],"editor's line":["spacing."],"editors. You":["really"],"editor… it's":["almost"],"educational and":["great"],"eek. This":["will"],"effect as":["inline","tail"],"effect here":["because"],"effect must":["be"],"effect of":["Haskell's","the"],"effect... Please":["give"],"effectful code":["in"],"effective as":["`HashMap`"],"effective but":["also"],"effective solution":["if"],"effective were":["made."],"effective would":["ruin"],"effectively cures":["the"],"effectively pit":["@lauren"],"effectively the":["same","same"],"effectively use":["the"],"effects for":["multi-line"],"effects. The":["general"],"efficiency &":["complexity"],"efficiency (especially":["w/o"],"efficiency a":["little"],"efficiency and":["readability."],"efficiency between":["using","the","prepending"],"efficiency by":["using"],"efficiency compared":["to"],"efficiency for":["all"],"efficiency here":["it"],"efficiency in":["cases"],"efficiency just":["from"],"efficiency of":["a","my"],"efficiency out":["of"],"efficiency though":["(although"],"efficiency worth":["it?"],"efficiency you":["could"],"efficiency, because":["`any`"],"efficiency. I'd":["have"],"efficiency: word'":["is"],"efficient (`add`":["has"],"efficient (constant":["space"],"efficient `Char":["-\u003e"],"efficient `isAnagram`.":["Sets"],"efficient `isSuffixOf`":["instead"],"efficient after":["the"],"efficient and":["no","also","clear","that"],"efficient as":["the","I","possible"],"efficient because":["it"],"efficient but":["most","not","now"],"efficient by":["moving"],"efficient due":["to"],"efficient if":["you","you"],"efficient imperative":["algorithms"],"efficient implementation":["for","using","as"],"efficient in":["time","time"],"efficient is":["to"],"efficient manner.":["Another"],"efficient method":["that"],"efficient or":["not."],"efficient since":["you","it","only"],"efficient solution":["(when"],"efficient solutions":["are"],"efficient solutions?":["As"],"efficient string":["type"],"efficient than":["revision","my","using","using","previous","a","using","`reverse","`Map","direct","doing"],"efficient that":["one","way,","way","bytestring"],"efficient thing":["is","to"],"efficient though":["I"],"efficient to":["represent","solve","build"],"efficient type":["without"],"efficient use":["a"],"efficient version":["were","that"],"efficient way":["ended","of","would","to","to","for","to"],"efficient when":["lazy"],"efficient\", even":["though"],"efficient) might":["be"],"efficient). You":["could"],"efficient, although":["you"],"efficient, as":["you","it"],"efficient, foldr":["isn't"],"efficient, perhaps.":["Didn't"],"efficient, so":["you"],"efficient, the":["strict"],"efficient, using":["randomRIO"],"efficient. If":["anything,"],"efficient. It":["would"],"efficient. Would":["the"],"efficient. `((\"\"":["++"],"efficient; basically":["I"],"efficiently (fewer":["maps"],"efficiently build":["this"],"efficiently compiled":["as"],"efficiently in":["cases"],"efficiently is":["to"],"efficiently leveraging":["the"],"efficiently re-used":["in"],"efficiently using":["only","`foldl'`?","the","`splitAt`."],"efficiently with":["`any`.","`foldl'`","less"],"efficiently without":["adding"],"efficiently. Consider":["deriving"],"efficiently. If":["you"],"effort into":["making"],"effort or":["readability"],"effort to":["make","reduce","support"],"effort you":["have"],"effort, especially":["in"],"efforts I":["still"],"eg `all":["isSpace"],"eg `put":["="],"eg. mkRobot":["as"],"eggs, 400":["tons"],"either (remove":["space"],"either .":["or"],"either 1-":["handle"],"either I":["could"],"either RNA":["or"],"either State":["or"],"either `(:)":["_`"],"either `Just":["y`"],"either `[(+1),":["subtract"],"either ```qualified```":["keyword,"],"either `f'`":["or"],"either `length":["."],"either adding":["1"],"either all":["be"],"either alphabetical":["or"],"either another":["parser"],"either appending":["`[('A',0),..]`"],"either because":["there's"],"either behavior":["is"],"either but":["it's"],"either by":["`ghci","`nucleotide'"],"either case":["this"],"either convert":["all"],"either define":["one"],"either do":["`import"],"either guards":["or"],"either have":["spaces"],"either id":["(const"],"either ignore":["it"],"either in":["FFI"],"either is":["fine","valid.","fine"],"either it":["round"],"either making":["`toBinary`"],"either match":["the"],"either move":["your"],"either need":["to","to"],"either of":["you","these","the","those.","the","those"],"either one":["is"],"either pass":["that"],"either passing":["`m`"],"either rows":["or"],"either shouting":["at"],"either side":["of"],"either silence":["or"],"either simply":["not"],"either since":["`(+)`"],"either take":["it"],"either the":["abstract"],"either type":["would"],"either unescape":["value"],"either uppercase":["or"],"either use":["case","`isLetter`","the","tuples"],"either version,":["since"],"either way":["is","is","but"],"either way,":["just","just"],"either way.":["The","If","Is"],"either you":["allow","treat"],"either! My":["suspicion"],"either, I":["did"],"either, `fromIntegral`":["should"],"either, because":["it's"],"either, but":["that"],"either, maybe":["`response`"],"either, since":["function"],"either, so":["it"],"either. Don't":["worry"],"either. However,":["if","with"],"either. I":["know"],"either. I'm":["still"],"either. I've":["mess"],"either. Thanks":["for"],"either. The":["all"],"either. `[1..3]":["\u003e\u003e="],"either... you":["could"],"elaborate on":["@carol's","what"],"elaborated in":["the"],"elaborating some,":["@adelle?"],"elaboration tool":["and"],"elegance of":["Bounded/minBound"],"elegant (arguably).":["Looks"],"elegant approach":["is"],"elegant choice":["to"],"elegant here,":["thanks"],"elegant in":["the"],"elegant solution":["from","to","using","for"],"elegant solution,":["looks"],"elegant solution.":["After"],"elegant test":["for"],"elegant than":["`xs"],"elegant to":["me.","me"],"elegant way":["to","of","to","of","of","to","to","of"],"elegant ways":["to"],"elegant with":["a"],"elegant, but":["it","it"],"elegant, especially":["the"],"elegant. Thanks":["so"],"elegant. The":["Arrow"],"elegant. You":["could"],"elegant. advance":["could"],"elegant... Is":["there"],"elegantly expressed":["with"],"elegantly than":["`words`"],"elegantly with":["Control.Arrow's"],"elegantly, especially":["the"],"elem $":["toUpper"],"elem has":["linear"],"elem is":["a","not"],"elem x":["\"\\n\\r"],"elem` (for":["non-empty"],"elem` seems":["to"],"elem` would":["be"],"elem`! You":["should"],"element (i,j)":["you"],"element I,":["then"],"element array,":["there"],"element from":["the","a","the"],"element in":["db;","the","the","`strs`.","the"],"element index,":["assuming"],"element into":["a"],"element j,":["also"],"element list":["for"],"element of":["'xs').","each","a","a","the","the","this","the","the","numeralSymbols,","the","a","the"],"element to":["a"],"element until":["finding"],"element will":["pass,"],"element you're":["checking"],"element) in":["case"],"element, and":["that"],"element, i.e.":["`foldl'"],"element, then":["you"],"element. (It":["doesn't"],"element. Can":["you"],"element. I":["think"],"element. You":["could"],"element.So I":["used"],"elements -":["that's"],"elements are":["a"],"elements by":["name."],"elements can":["be"],"elements consequently.":["Using"],"elements from":["a"],"elements in":["result"],"elements like":["logical"],"elements long":["and","so"],"elements long,":["so"],"elements of":["a"],"elements one":["by"],"elements there)":["then"],"elements updating":["in"],"elements, creating":["true/false"],"elements, so":["it"],"elements, where":["this"],"elements. You":["can"],"elementwise. HEAD":["version"],"eliminate `isThymine`":["function,"],"eliminate `word`":["in"],"eliminate a":["candidate"],"eliminate all":["of"],"eliminate elements,":["where"],"eliminate it,":["since"],"eliminate line":["26,"],"eliminate numbers":["that"],"eliminate parentheses:":["as"],"eliminate that":["filter"],"eliminate the":["need","`Data.Maybe`","repeated","tuple","introduction","`decimalValues`","explicit","`filter","need","lambda","need","warning","usage"],"eliminate this":["step"],"eliminate unnecessary":["traverses."],"eliminate), function":["application"],"eliminated by":["combining"],"eliminated my":["`addOrIncrement`"],"eliminates the":["redundancy","need","`foldl'`)"],"eliminating that":["case…"],"else \"\")":["drops"],"else '":["'"],"else 0)`":["is"],"else 0`":["could","is","but"],"else 0`,":["you"],"else 1)":["strand1"],"else 1`":["is","is"],"else 2)\u003c/pre\u003e`if-then-else`":["here"],"else False`.":["How"],"else I":["can"],"else I'm":["missing?"],"else Just":["(take"],"else Nothing`":["a"],"else add":["a"],"else and":["to"],"else big":["altogether?"],"else could":["just"],"else entirely!":["Using"],"else for":["such"],"else gets":["the"],"else go":["(x:xs)"],"else goto":["loop;"],"else here":["is","looks","is","looks","looks","looks","looks","looks","looks"],"else if":["…\"."],"else in":["mind","Haskell","here","`number`","most"],"else is":["going","spot","already","copied","allowed"],"else just":["stuck"],"else looks":["good.","fine,","good","great!","good!","nice.","good.","good.","good","fine.","good","good","good."],"else other":["than"],"else passes":["the"],"else statements":[":-)"],"else that":["doesn't","is"],"else toLower":["c"],"else unchanged,":["but"],"else wdNum":["-"],"else we'd":["get","get"],"else would":["you"],"else x)":[":",":","$"],"else x:acc)":["[]"],"else you":["can","have","need"],"else {":["foo(a+1);"],"else's code":["and"],"else's solution":["doing"],"else, also":["there"],"else, it":["seems"],"else, save":["throwing"],"else. Because":["the"],"else. The":["ST"],"else. This":["way"],"else. With":["a"],"else? If":["it's"],"else` in":["this"],"elsewhere (`row`":["is"],"elsewhere in":["the"],"elsewhere), but":["couldn't"],"elsewhere, and":["then"],"elsewhere: `foo(bar(baz))`":["is"],"elucidating to":["have"],"eludes me,":["so"],"emacs would":["do"],"embed the":["logic"],"embedded within":["yelling."],"embracing the":["pain"],"emoji now?":[":worried:"],"emphasis on":["the"],"emphasize that":["they're","since","this"],"empty $":["process","process"],"empty .":["words"],"empty Map":["to"],"empty `where`":["clause"],"empty being":["before"],"empty can":["be"],"empty case":["by"],"empty case,":["it"],"empty container,":["using"],"empty import":[":-)."],"empty input":["because"],"empty input).":["That"],"empty input,":["but"],"empty instead":["of"],"empty list":["even","to","possibility","case","when","(string).","since","case","seems","is","(doesn't","or","in"],"empty list,":["docs","so"],"empty list.":["Any","It","Length"],"empty list...":["is"],"empty lists":["like","at","gracefully.","(or","gracefully.","in"],"empty lists,":["which","that's"],"empty lists.":["Thanks!"],"empty lists/strings.":["A"],"empty mvar":["and"],"empty or":["not.","full","otherwise"],"empty respectively":["they"],"empty string":["to","test,","is","after","safely,","had","case?","is","were","in","is","is","as","```\"\"```","is","pattern,","(checking","is","is"],"empty string,":["so"],"empty string.":["You","it"],"empty strings":["in","in","first.","in"],"empty strings,":["so"],"empty tiles":["in","but"],"empty trees":["and"],"empty while":["returning"],"empty) in":["another"],"empty))))`. You":["can"],"empty, `robotName`,":["`mkRobot`"],"empty, although":["they"],"empty, and":["the"],"empty, but":["our"],"empty, just":["to"],"empty, so":["you"],"empty. But":["I"],"empty. I'm":["not"],"empty. What's":["the"],"empty. When":["the","the","the","the"],"empty/nonempty case":["analysis."],"empty` and":["it'll"],"empty`. A":["strict"],"empty`. When":["the"],"empy` from":["`Data.Map`"],"emulate it":["without"],"emulate mutable":["instances"],"enable TupleSections":["and"],"enable `{-#":["LANGUAGE","LANGUAGE","LANGUAGE","LANGUAGE"],"enable that":["trick."],"enable the":["`TupleSections`","`TupleSections`","`TupleSections`","language","TupleSections","TupleSections"],"enabled (such":["as"],"enabled by":["default"],"enabled. But":["I"],"enabled. Don't":["assume"],"enabled? (`-Wall`":["argument"],"enables syntax":["`(,1)`"],"enabling `{-#":["LANGUAGE","LANGUAGE","LANGUAGE"],"enabling is":["useless,"],"enabling the":["`TupleSections`"],"enamored of":["the"],"enamoured of":["the"],"encapsulate logic":["and"],"encapsulate the":["first","'C'"],"encapsulate this":["state,"],"encapsulated in":["the"],"encapsulates the":["scan/unfold","pattern"],"encapsulation argument":["to"],"encapsulation without":["much"],"encipher .":["normalize`"],"encode Responses":["and"],"encode and":["decode"],"encode could":["probably"],"encode it":["in"],"encode most":["of"],"encode the":["symbols","rules"],"encode's definition.":["In"],"encoded into":["that"],"encoded my":["stuff"],"encoded the":["rules"],"encodes a":["rule"],"encodes the":["problem"],"encoding in":["the"],"encoding them":["in"],"encoding. Seems":["like"],"encounter a":["separator."],"encountering such":["letters"],"encourage code":["reuse,"],"encourage that":["you"],"encourage the":["Char"],"encourage you":["to"],"end (in":["ML"],"end *and*":["the"],"end I":["thought"],"end and":["thus"],"end if":["you"],"end in":["a","an"],"end it'll":["collapse"],"end of":["the","singing","the","the","the","the","a","function.","both","questions","the","program,","the","the","each","both","both"],"end result":["is"],"end the":["key"],"end this":["optimized"],"end up":["being","finding","with","causing","with","using","(look","with","building","with","being","pursuing","with","reversing","being","scanning","as","looking","with","with","using","with","building","with","looking","with","running","with","with","with"],"end with":["'s'","a","an"],"end without":["checking"],"end worse":["then"],"end you":["have"],"end) elements":["by"],"end)` in":["`versesToSing`."],"end, I":["just"],"end, all":["the"],"end, and":["`.`","intermediate"],"end, but":["`sing`"],"end, foldr":["only"],"end, i":["like"],"end, rather":["than"],"end, that":["means"],"end. I":["also"],"endDay]` to":["iterate"],"end]` is":["the","a"],"end]`. Looks":["like"],"end` cases":["return"],"end`. This":["is"],"ended up":["being","being","too","using","not","using","being","with:","with","doing","being","with","having","with","with","using","being"],"ending ```map```":["and"],"endless spiral":["of"],"ends and":["so"],"ends in":["'?'","'!'"],"ends up":["using","rather","happening","being","as"],"ends with":["a","'?'"],"endswith \"?\"":["str\u003c/pre\u003e","str"],"enemy knows":["random"],"enforce correctness":["here."],"enforce invariants,":["but"],"enforce it.":["Still"],"enforce the":["constraints.","type"],"enforcing constraints":["with"],"engineer, optimize":["for"],"engineered Writer":["monad"],"engineered at":["that"],"engineered? Probably.":["OTOH,","OTOH,"],"engineering for":["this"],"enjoyed reading":["up"],"enlighten me":["on"],"enormously _less_":["readable"],"enough (like":["you"],"enough and":["wondered"],"enough at":["the"],"enough by":["itself,"],"enough entropy":["here,"],"enough for":["all","all","my"],"enough here":["(just"],"enough here,":["since"],"enough if":["you"],"enough info":["to"],"enough input":["it","to"],"enough input.":["You'll"],"enough name),":["this"],"enough of":["the","them,","an","that"],"enough that":["the","it"],"enough times":["with"],"enough to":["implement","take","need","pattern","perform","efficiently","look","figure","inline.","inline","figure","do,","know","do","match","completely","stumble","complete","mechanically","cause","know","use","be","see","have","use"],"enough with":["the","monads/applicatives."],"enough! (That'll":["teach"],"enough, and":["is"],"enough. Almost":["identical"],"enough. I":["processed"],"enough. It":["would"],"enough. You":["could"],"enouph and":["I","I"],"ensure correctness":["using"],"ensure haskell":["gives"],"ensure strictness.":["If"],"ensure that":["map","the","there","the","both","the","they","the","they","`sort","the","it","the","the","bearing","bearing","the","the","something","`g","`target`","`sort","it's"],"ensure the":["`MVar`","correct","Map","accumulator"],"ensure you're":["using"],"ensured that":["they"],"ensures that":["the","it","the","the"],"ensures the":["result","accumulator"],"ensuring sequential":["consistency"],"ensuring that":["at","the"],"entering my":["head"],"entire comparison":["is"],"entire do":["block"],"entire extra":["pass"],"entire fold":["by"],"entire input":["string","list.","needs"],"entire input,":["you"],"entire input.":["A"],"entire line":["of"],"entire list":["up","of","of","to","which","unnecessarily.","to","(and","allocation,","to"],"entire list,":["but"],"entire list.":["The"],"entire map":["of"],"entire module)":["need"],"entire school":["roster"],"entire spine":["of"],"entire thing":["becomes"],"entire time?":["Consider"],"entirely (If":["the"],"entirely by":["using"],"entirely clear":["-"],"entirely happy":["with","with"],"entirely if":["you"],"entirely interchangeable":["(?)"],"entirely or":["assume"],"entirely out":["of"],"entirely point-free":["if"],"entirely possible":["that"],"entirely satisfied":["with"],"entirely thrilled":["with"],"entirely unsure":["how"],"entirely whitespace":["or"],"entirely! Using":["separate"],"entirely, check":["out"],"entirely, would":["be"],"entirely. The":["benefit"],"entirely. This":["is"],"entirely: `anagramsFor":["word"],"entrepum's comments":["on"],"entries) there's":["basically"],"entropy here,":["the"],"entry about":["the"],"entry also":["has"],"entry for":["that"],"enum instance":["is"],"enum of":["Schedule"],"enum should":["be"],"enum type":["just"],"enum, and":["trick"],"enumFromThenTo .":["(id"],"enumerable property":["will"],"enumerable, ordered,":["and/or"],"enumerate all":["possible"],"enumeration is":["a"],"enumeration. Also,":["if"],"enums, doing":["transformations"],"environment in":["general."],"environment, I":["would"],"environment, so":["it"],"environment, this":["would"],"environment. You":["should"],"environment? I'm":["not"],"ephemeral tuple":["creation"],"equal (or":["true)\""],"equal `a`s":["were"],"equal code":["but"],"equal in":["performance,"],"equal length,":["so"],"equal sides\"":["instead"],"equal sides,":["Isosceles"],"equal signs":["looks"],"equal so":["you"],"equal to":["Nothing.","`map","msg"],"equal\" is":["an"],"equal\". Perhaps":["factor"],"equal), it's":["not"],"equal, and":["there"],"equalSideCount\u003c/pre\u003e worked.":["That"],"equality (what":["you've"],"equality check":["in"],"equality checking.":["Try"],"equality comparison":["should"],"equality test":["out"],"equality to":["check"],"equality, and":["it"],"equally clear,":["but"],"equally fast":["if"],"equally good":["to"],"equally have":["that"],"equally well":["with"],"equally well.":["I"],"equals operator":["and"],"equals sign.":["Generally"],"equals to":["itself."],"equals\" operator,":["`/=`"],"equation (but":["not"],"equation N-1":["times."],"equation and":["letters","the"],"equation because":["of"],"equation for":["`bar':","`main':","`bar':","`main':","`splitDigits':","`prettyPrint':"],"equation is":["equivalent"],"equation not":["just","the"],"equation on":["its"],"equation only":["use"],"equation with":["multiple"],"equation you":["can","can"],"equation) `toRNA":["="],"equation, indentation":["usually"],"equation, is":["called"],"equation. It's":["normal"],"equations and":["isn't"],"equations for":["a"],"equations in":["O(1)"],"equations it's":["guaranteed"],"equations must":["have"],"equations using":["pattern"],"equations you":["end"],"equations. One":["for"],"equilateral, 2":["for"],"equivalence in":["the"],"equivalent and":["simpler."],"equivalent but":["more","to"],"equivalent in":["the","a","this","this"],"equivalent lower-level":["solution"],"equivalent of":["lowers/sanitize","exclusive","mutex","`map"],"equivalent pattern":["match,"],"equivalent so":["I"],"equivalent statement,":["which"],"equivalent to":["`map","\"all","the","the","the","the","the","a","`any","the","`Data.Char.isUpper`,","`Data.Char.isLower`","`first`","`word`","`unlines`,","`all","the","Data.List.Split","`unwords`.","`unlines","`first`","what","your","guards,","`flip","`not`.","`unwords`","`not","your","`maybe","the","`not","`(flip","`unlines","a","`Deque","the","`fromEnum","`\\x","the","`unlines","the","`concat","`null`,","the","the","`m","Prelude's","`f","`(\\x","`(.)","`fmap","`map","using","`unlines","`(not","using","the","`not`,","`id`","`toEnum`","the","`all","`map","`[b,","`\\w","`(,1)`","`anagram","`E.throw","`replicate","`id`","`g","`((((1)","`all`","`concatMap","`f","`maybe","`sum","`fromEnum","`replicateM","the","Haskell's","`maximum`","`not`","`(!!","`printf","zero.","`filter","express","`catMaybes","`f","`f","`mapM`"],"equivalent with":["no"],"equivalent would":["be"],"equivalent) once,":["instead"],"equivalent* to":["@susana's,"],"equivalent, an":["empty"],"equivalent, and":["moved"],"equivalent, but":["using"],"equivalent, there":["is"],"equivalents in":["`Prelude`","`Prelude`"],"equivilance. Which":["seems"],"er does":["this"],"err on":["the"],"err too":["far"],"error \"Could":["not"],"error \"error-string\"`,":["or"],"error \"tree":["must"],"error $":["\"invalid","\"invalid"],"error (e.g.":["`undefined`"],"error (using":["```error```),"],"error checking":["at","in"],"error checking,":["but"],"error checking.":["If"],"error code":["a"],"error condition":["you"],"error description,":["or"],"error either":["by"],"error function":["will"],"error handling":["either.","via","would"],"error however":["requires"],"error if":["bad","given"],"error in":["my","that","the","that"],"error instead":["of"],"error is":["not","thrown","gone."],"error message":["will","is","when","anything","(since"],"error on":["empty"],"error or":["a","exception"],"error out":["though,"],"error out,":["but"],"error parameter:":["```foldl'"],"error response":["is"],"error strategies,":["so"],"error thrown":["by"],"error to":["create","show"],"error used":["somewhere"],"error using":["`show"],"error when":["str","an"],"error with":["`[n]`","the","my"],"error without":["it)"],"error you":["could"],"error, but":["it's"],"error, per":["@carlotta's"],"error, so":["I"],"error, which":["I"],"error, will":["fix."],"error-prone (which":["is"],"error. By":["instancing"],"error: `Robot.hs:8:10:":["Couldn't"],"error` construct":["on"],"error`, otherwise":["it"],"errors about":["pattern"],"errors even":["with"],"errors in":["a"],"errors like":["parsec"],"errors once":["in"],"errors or":["determine"],"errors returns":["Left"],"errors seems":["wrong,"],"errors separately":["in"],"errors that":["I"],"errors to":["be"],"errors when":["not"],"errors, and":["I","the"],"errors, but":["unsure"],"errors, returning":["a"],"errors, which":["is"],"errors. Anyway,":["thanks"],"errors. At":["a"],"errors. Is":["it"],"escape backticks...)":["and"],"escape from":["the","concurrency"],"escape sequences":["that"],"escape the":["ampersands","Char","module,"],"escape this":["module"],"escaping and":["text,"],"esoteric function":["to"],"especially `anagram`,":["the"],"especially `foldl`":["which"],"especially all":["exported"],"especially as":["the"],"especially confusing":["because"],"especially considering":["what"],"especially follow":["the"],"especially for":["the"],"especially if":["it's","you","they","it's","you"],"especially in":["ghci).","Haskell.","this"],"especially like":["the","how","`findWithDefault`."],"especially liked":["`\u003c$\u003e`."],"especially multi-line":["bindings"],"especially on":["64-bit"],"especially re":["using"],"especially since":["`isSuffixOf`","it","you"],"especially strange":["to"],"especially that":["it's","you"],"especially the":["part","all","first"],"especially to":["the"],"especially when":["there's","you're","its"],"especially with":["the","IO"],"essence of":["the"],"essential to":["go"],"essential, just":["a"],"essentially a":["public"],"essentially doing":["the"],"essentially for":["free."],"essentially it's":["in"],"essentially specifying":["that"],"essentially support":["two"],"essentially the":["same","same","Haskell","same,"],"essentially zipping":["two"],"essentially, this":["isn't"],"eta reduce":["something","anagramsFor","bit.","```anagramsFor```,","in","anagramsFor","`translateNucleotide`","`toRNA`,"],"eta reduced,":["I.e."],"eta reducing":["`toRNA`:","`toRNA`."],"eta reduction":["or","or","wiki","and","(or"],"eta reduction!":[";P"],"eta-reducability. `assocs`":["seems"],"eta-reduce 'toRNA'":["(i.e."],"eta-reduce `\\y":["-\u003e"],"eta-reduce `add`,":["`grade`,"],"eta-reduce `letters`":["to"],"eta-reduce `lookupPlant`,":["but"],"eta-reduce `mkRobot`.":["Also,"],"eta-reduce `ofBeer`":["using"],"eta-reduce `toRNA`":["to"],"eta-reduce anagramsFor":["to"],"eta-reduce functions":["where"],"eta-reduce into":["`add"],"eta-reduce some":["of"],"eta-reduce the":["`toRNA`","first","`xs`"],"eta-reduce) your":["`toRNA`"],"eta-reduced ```sorted```":["since"],"eta-reduced to":["point-free"],"eta-reducing `anagramsFor`":["to"],"eta-reduction (also":["called"],"eta-reduction (closer":["to"],"eta-reduction (or":["η-reduction)."],"eta-reduction (remove":["an"],"eta-reduction (removing":["an"],"eta-reduction and":["define","write"],"eta-reduction because":["I"],"eta-reduction on":["line","the","the"],"eta-reduction removes":["all"],"eta-reduction that":["you"],"eta-reduction though":[":)"],"eta-reduction to":["`toRNA`","`isSilence`:","`toRNA`","`anagramsFor`","`anagramsFor`","a"],"eta-reduction), much":["like"],"eta-reduction, by":["the"],"etc etc,":["but"],"etc, but":["I"],"etc, which":["are"],"etc. Function":["application"],"etc. I":["highly"],"etc. Is":["there"],"etc. Seems":["to"],"etc. So":["in"],"etc. The":["tricky"],"etc. along":["with"],"etc. are":["good."],"etc. as":["`(,"],"etc. but":["the","`Prelude`","that"],"etc. if":["you"],"etc. in":["your"],"etc. should":["return"],"etc. that":["you"],"etc. to":["fully"],"etc. will":["be","be"],"etc.), it's":["not"],"etc.). Well,":["that"],"etc... instead":["of"],"eteprem seemed":["to","to"],"eternity depending":["on"],"etrepeum meant":["by"],"etrepum and":["kluge"],"etrepum for":["your","pointing"],"etrepum is":["back"],"etrepum said,":["nothing"],"etrepum's comments.":["Also,"],"etrepum's suggestions":["on"],"etrepum, looks":["like"],"etrepum, thanks":["for"],"etrepum. Haskell":["is"],"eval and":["normal"],"evaluate Robot":["you"],"evaluate a":["list"],"evaluate and":["will"],"evaluate anything":["until"],"evaluate at":["runtime"],"evaluate element,":["and"],"evaluate enough":["to"],"evaluate entire":["list"],"evaluate for":["every"],"evaluate from":["left"],"evaluate it":["all…","as","(stack","if","when","later","every","once","enough"],"evaluate it,":["but"],"evaluate its":["arguments"],"evaluate lower":["and"],"evaluate only":["ones,","interesting","once"],"evaluate that":["big"],"evaluate the":["expression","Robot","accumulator","Robot,","constructor","normalization","function","resulting","whole","accumulator"],"evaluate them":["right"],"evaluate them).":["Then,"],"evaluate them,":["using"],"evaluate thunks":["at"],"evaluate to":["`[]`","`[10,"],"evaluate until":["that"],"evaluate values":["to"],"evaluate when":["you","it","it"],"evaluate you":["might"],"evaluate' f":["="],"evaluate), these":["take"],"evaluate), which":["is"],"evaluated (also":["called"],"evaluated (and":["even"],"evaluated Int":["`4`."],"evaluated and":["step","thus","allocated"],"evaluated as":["well."],"evaluated at":["most","most","most","most","most","most","each","each","most","most","most","most","most","most","most","most","most"],"evaluated before":["the"],"evaluated by":["their","the"],"evaluated exactly":["once?"],"evaluated first":["and"],"evaluated first.":["Otherwise"],"evaluated from":["top","the"],"evaluated fully":["in"],"evaluated in":["guard","guard","`M.insert`,","the","weak-head"],"evaluated into":["Weak-Head"],"evaluated just":["once"],"evaluated later":["rather"],"evaluated like":["this:"],"evaluated map":["is"],"evaluated more":["than"],"evaluated on":["a","each"],"evaluated once":["regardless"],"evaluated only":["when","once","once","once?","once,"],"evaluated or":["do","not,"],"evaluated result)":["so"],"evaluated to":["extract","an","WHNF"],"evaluated upon":["a"],"evaluated value":["and"],"evaluated, Haskell":["will"],"evaluated, and":["Data.Map's"],"evaluated. If":["you"],"evaluated. Please":["let"],"evaluated. Right":["now"],"evaluated. See":["http://hackage.haskell.org/package/deepseq"],"evaluated. The":["end"],"evaluated. With":["a"],"evaluates identically":["to"],"evaluates it":["to"],"evaluates its":["argument"],"evaluates just":["enough"],"evaluates the":["first","lists","arguments","string","same"],"evaluates to":["[x],","a"],"evaluating `length`":["requires"],"evaluating an":["infinite"],"evaluating as":["happening"],"evaluating but":["I"],"evaluating enough":["to"],"evaluating the":["list*","insertion.","addition","result","accumulator."],"evaluation (I.e.":["call-by-need"],"evaluation actually":["works","works","happens."],"evaluation and":["lists","a","the","how","list"],"evaluation argument":["..."],"evaluation can":["arise"],"evaluation cost":["when"],"evaluation desirable":["here?"],"evaluation in":["this"],"evaluation instead":["of"],"evaluation is":["this","in","still","forced"],"evaluation language":["is"],"evaluation model":["is","I","that","is"],"evaluation model.":["If"],"evaluation model:":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"evaluation of":["the","the","the","inner","the","the"],"evaluation order...":["Probably"],"evaluation semantics:":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"evaluation strategy":["I"],"evaluation strategy:":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"evaluation such":["as"],"evaluation that":["I'll"],"evaluation to":["free"],"evaluation we":["will"],"evaluation will":["ensure","work"],"evaluation with":["manual"],"evaluation works":["in","in","which","which","which","which","in","I","in","is","and","and","in","and","and","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","and","I'd","in","is","is"],"evaluation works,":["it","which","and","check","check","check","check","check","check","check","check","I","I","I","I","I","I","see","check","I","I","I","I"],"evaluation works:":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"evaluation you'd":["need"],"evaluation) needs":["to"],"evaluation) unless":["you're"],"evaluation), but":["due"],"evaluation, I":["don't"],"evaluation, I'd":["recommend"],"evaluation, and":["`insertWith`","the"],"evaluation, check":["out","out","out"],"evaluation, is":["that"],"evaluation, would":["be"],"evaluation. Before":["you"],"evaluation. If":["this"],"evaluation. More":["correct"],"evaluation. There":["are"],"evaluation. This":["chapter","sort","particular"],"evaluation. You":["should"],"evaluation? I":["don't"],"evaluations don't":["actually"],"even (\u003e":["0)`"],"even N":["in"],"even `::":["Num"],"even `Map.fromListWith`,":["which"],"even `[x,x-1":["..y]`"],"even `fromChar`":["(as"],"even `isIgnoring":["="],"even `take`.":["Just"],"even a":["single","newline,","RULE","binary"],"even after":["you"],"even agree":["with"],"even amortized":["O(1)"],"even and":["positive."],"even be":["able","slower","able"],"even better":["you","you","use"],"even better,":["consider","express","it's","but"],"even bind":["the"],"even break":["conventions"],"even build":["some"],"even by":["my"],"even c":["`elem`"],"even cause":["a"],"even comes":["into"],"even compile":["(signleton)."],"even concatMap":["will"],"even consider":["doing"],"even covered":["in"],"even crash":["if"],"even crashing,":["due"],"even do":["an"],"even drop":["it"],"even easier":["way","ways,"],"even eliminate":["that"],"even end":["up"],"even exist,":["given"],"even faster":["but"],"even figure":["out"],"even find":["functions","a"],"even further":["simplify","to"],"even get":["rid","a"],"even go":["point-free"],"even goes":["out"],"even gonna":["bother"],"even got":["rid"],"even guess":["its"],"even guessed":["that"],"even handle":["it"],"even happen":["until"],"even has":["less"],"even have":["to","a"],"even hoogled":["\"(a,b)"],"even if":["folds","implementing","you","the","not","called","they","I","you","it's","you"],"even in":["Haskell","Haskell","such","folds.","this"],"even inside":["your"],"even it":["will"],"even just":["use"],"even know":["`findWithDefault`","you","if","what"],"even knowing":["the"],"even led":["people"],"even lower":["fixity"],"even make":["it"],"even may":["want"],"even more":["clearer.","concision","parentheses","obscure,","of","elegantly","than","so!","generically","likely","safe","so"],"even more,":["as"],"even need":["to"],"even needing":["these"],"even notice,":["you"],"even numbers":["are"],"even over":["your"],"even rather":["short"],"even relatively":["novice"],"even remember.":["I"],"even rewrite":["it."],"even say":["it's"],"even shorter":["`remoeSilence","`getName`"],"even simpler":[":)"],"even sure":["it"],"even the":["beginnings"],"even then,":["only"],"even think":["about","about","of","about","about"],"even this":[":-)"],"even though":["it","they","they","this","the","that","its","this","they","the","we","they","it's","it","the","`putMVar","you","it","it","it"],"even thought":["about"],"even traversing":["the"],"even use":["a"],"even used":["in"],"even using":["isAnagram","guards."],"even valid":["syntax"],"even when":["not","it","optimizations","everything"],"even with":["strictness","@skye's","new","the"],"even without":["the"],"even x":["then"],"even` as":["`fmap"],"even`. That's":["not"],"evenly divisible":["by","by","by"],"event that":["`Data.Char`"],"event to":["that"],"events. From":["the"],"eventually I":["get"],"eventually ask":["for"],"eventually be":["evaluated"],"eventually evaluate":["it,"],"eventually force":["into"],"eventually turn":["out"],"eventually work,":["but"],"eventually you'll":["have"],"ever be":["7","able","calculated","used"],"ever become":["problematic"],"ever being":["returned,"],"ever compare":["`length`"],"ever do":["that."],"ever force":["the","the"],"ever forcing":["the"],"ever get":["serious"],"ever going":["to"],"ever happens.":["Thanks"],"ever know":["all","about"],"ever let":["you"],"ever modified":["or"],"ever possible":["for"],"ever prefer":["it?"],"ever preferable.":["I'm"],"ever seeing":["a"],"ever use":["of","foldl","`foldl`"],"ever very":["Haskell-y."],"ever written.":["Any","I'm"],"ever. Feedback":["is"],"ever. internal":["use"],"every 400":["years),"],"every `robotName`":["call,"],"every call":["inside","of"],"every case":["where"],"every char":["in"],"every character":["in","anyway."],"every element":["until","in"],"every element.":["I"],"every external":["function"],"every filter":["check,"],"every function":["is","is","outputs","for"],"every function.":["The"],"every function...":["well"],"every guard":["clause","unless"],"every insert":["will"],"every item":["in"],"every iteration":["of"],"every iteration.":["A"],"every language":["on","but"],"every letter":["is","in"],"every letter?":["In"],"every line":["of","of"],"every line.":["Also"],"every multiplication":["by"],"every new":["name","one"],"every nucleotide":["you'll"],"every number,":["and"],"every odd":["number"],"every operation":["does","by"],"every other":["package","letter","odd"],"every permutation":["was"],"every prime":["will"],"every second":["digit."],"every sense":["to"],"every single":["time","time,"],"every step":["here?"],"every step?":["Ideally,"],"every string":["to"],"every time":["it's","I","-","the","it's","calculite","you","instead"],"every time?":["Well"],"every top":["level"],"every valid":["input"],"every verse":["happens"],"every word.":["Something"],"every year":["that","that","that"],"everybody hates":["me"],"everyone else":["just"],"everyone gets":["some"],"everyone is":["always"],"everyone knows":["immediately"],"everyone makes":["mistakes"],"everyone's score":["I'll"],"everyone. Point-free":["style"],"everything I'm":["going"],"everything and":["made"],"everything around":["explicitly."],"everything as":["lazily","like"],"everything below":["can"],"everything but":["`a`"],"everything came":["from."],"everything else":["here","here","here","looks","looks","here","here","in","unchanged,","looks","looks","here","is","could","here","here","is","passes","is"],"everything else.":["This"],"everything except":["switch","A,","the"],"everything execpt":["the"],"everything from":["your","the","the"],"everything here":["to","looks","looks","looks","looks","looks","is"],"everything in":["Haskell,","the"],"everything into":["ridiculous"],"everything is":["exported,","a","ok"],"everything looks":["great!","fine","good","good","not"],"everything or":["import"],"everything out.":[":)"],"everything qualified":["under"],"everything that":["isn't","I","is"],"everything to":["write"],"everything together,":["they"],"everything up":["under"],"everything would":["be"],"everything you":["mentioned.","want","need","told","know","need"],"everything you're":["using"],"everything. If":["you"],"everywhere is":["preffered"],"everywhere you":["have"],"everywhere, although":["I"],"everywhere, even":["in"],"everywhere, use":["`and`"],"evidence for":["\"more"],"evidence to":["support"],"evil, and":["will"],"exact code":["from"],"exact equivalents":["in","in"],"exact link":["on"],"exact nature":["of"],"exact place":["as"],"exact same":["thing.","issue","thing","thing,","feedback"],"exact situation":["only"],"exactly 10":["long."],"exactly `map`.":["I"],"exactly clear":["what"],"exactly clear;":["the"],"exactly correct":["in"],"exactly do":["`i`"],"exactly go":["along"],"exactly how":["I","lazy"],"exactly in":["the"],"exactly is":["the","`.).`"],"exactly it":["does."],"exactly mean":["by"],"exactly once":["regardless"],"exactly once\".":["Sorting"],"exactly once,":["I'd"],"exactly once?":["The"],"exactly one":["new"],"exactly strict":["left"],"exactly sure":["why"],"exactly that":["way..."],"exactly the":["same,","same","same,","same","same","kind","same","same","same","things","same,","same","same","same,","same.","definition","right"],"exactly this":["way,"],"exactly what":["I","the","I","isAnagramOf","I","it","I","I","it","I","I","the","test","I","you","is","I","you","left"],"exactly where":["everything"],"exactly which":["argument"],"exactly why":["I"],"exactly without":["using"],"exactly you":["mean"],"exactly you're":["doing"],"exactly, cubed)":["is"],"exactly. Also":["this"],"exactly? There's":["no"],"examine the":["head"],"example (you":["need"],"example :)":["Only"],"example I":["did","think.","used"],"example I'm":["applying"],"example Map":["Int"],"example [this":["one](http://research.microsoft.com/en-us/um/people/simonpj/papers/stm/STMTokyoApr10.pdf)."],"example `(not":["."],"example `daysInGigasecond":["="],"example `f`":["for"],"example `liftA2":["(&&)"],"example `map":["f"],"example `mod`4":["=="],"example `module":["Bob"],"example `over":["(mapped._2)"],"example a":["little."],"example algorithm":["to"],"example and":["the"],"example assumes":["you"],"example file":["in"],"example for":["this","`Foldable`"],"example functions":["visible"],"example given":["two"],"example have":["used"],"example if":["you"],"example implementation":["of"],"example in":["the","a","`silence`"],"example it":["gives"],"example like":["that"],"example list":["comprehensions:"],"example may":["not"],"example of":["what","this","KISS.","how","a","that","where","how","a","what","how"],"example seems":["more"],"example since":["I"],"example solution.":["Felt"],"example supplying":["`\"\"`"],"example there":["will"],"example to":["the"],"example uses":["`parListChunk"],"example was":["relavent.","much"],"example where":["you're"],"example while":["reading"],"example with":["Maybe"],"example you":["make","can"],"example) is":["the"],"example). I":["just"],"example). What":["do"],"example, I":["would"],"example, I'm":["curious"],"example, `any`":["or"],"example, `calculating`":["is"],"example, `foldr`":["is"],"example, `head":["(map"],"example, `import":["Data.Char"],"example, `isQuestion":["str"],"example, `newName":["\u003e\u003e="],"example, `robotName":["="],"example, `word'":["/="],"example, `wordsBy":["(not"],"example, a":["question","quick"],"example, adding":["a","a"],"example, and":["in"],"example, f":["is"],"example, here's":["what"],"example, if":["you","`w`"],"example, lies":["in"],"example, moving":["`T.stripStart`"],"example, nice":["work"],"example, the":["`.`"],"example, this":["is"],"example, to":["the"],"example, you":["might"],"example. Also":["`any`/`all`"],"example. Here's":["the"],"example. I":["like"],"example. So":["I"],"example. Some":["might"],"example. The":["problem"],"example. You":["have"],"example. and":["`sum"],"example: `[a,":["a"],"example? So":["`toRNA"],"examples for":["this"],"examples very":["directly"],"examples where":["the","`foldl`","`f'`"],"exceed 80":["characters"],"excellent description":["of"],"excellent explanation":["of"],"excellent feedback.":["Will"],"excellent name":["for"],"except ']'.":["Will"],"except (every":["100"],"except A,":["C,"],"except a":["ticket"],"except as":["an"],"except every":["year","year","400"],"except for":["top-level","the","`number`.","overflow","the","\"otherwise\")","one-liners"],"except in":["the"],"except it":["fills"],"except it's":["strict"],"except perhaps":["to"],"except strict,":["so"],"except switch":["to"],"except that":["he","I","unlike","`map","where"],"except the":["use","lack","\"invalid","\"broken"],"except there":["are"],"except unary.":["I"],"except usage":["of"],"except with":["liftM"],"except you":["can","want","should"],"exception (haven't":["got"],"exception if":["you"],"exception in":["pure"],"exception is":["that","when"],"exception that":["`isJibbersish`","this"],"exception to":["be","the"],"exception with":["an"],"exception. Using":["isSuffixOf"],"exceptional`? Mathematically":["this"],"exceptions exist":["to"],"exceptions in":["code"],"exceptions were":["converted"],"exceptions, but":["it"],"excessive, but":["I"],"excessive? If":["it"],"excessively \"clever\",":["in"],"excessively decomposed,":["it's"],"excessively to":["do"],"excitement when":["I"],"exclude invalid":["nucleotides,","nucleotides."],"excluding auxiliary":["computations"],"excluding functions":["imported"],"excluding the":["`a"],"exclusion of":["all"],"exclusively seems":["to"],"excusable, since":["you"],"excuse for":["having"],"excuse not":["to"],"excuses for":["not"],"execpt the":["obvious."],"execute (measuring":["with"],"execute fast":["enough,"],"execute from":["top"],"execute that":["huge","huge","huge","huge","huge"],"executed if":["it"],"executed in":["parallel"],"execution but":["its"],"execution cannot":["be"],"execution model":["and"],"execution with":["threadscope."],"exercise #2":["or"],"exercise (all":["you"],"exercise (via":["`peek`)"],"exercise I":["guess","wouldn't","like"],"exercise README":["should"],"exercise again":["to"],"exercise and":["this"],"exercise are":["strange."],"exercise as":["specified"],"exercise at":["https://github.com/kytrinyx/exercism.io/issues/831"],"exercise constraints":["the"],"exercise could":["be","be"],"exercise directly":["from"],"exercise exactly.":["Also"],"exercise get":["updated"],"exercise has":["much","a","a"],"exercise here":["don't"],"exercise hurt":["my"],"exercise in":["particular","flip-flopping.","which"],"exercise is":["weird;","kinda","a","that","like,","actually","hard","a","about","implemented.","using","understanding"],"exercise isn't":["to"],"exercise it":["doesn't","says"],"exercise it's":["not"],"exercise may":["still","be"],"exercise more":["verbose"],"exercise my":["\"what"],"exercise please.":["this"],"exercise requires":["\"banana\""],"exercise says":["the"],"exercise seems":["like"],"exercise submit":["solutions"],"exercise than":["usual,"],"exercise that":["took"],"exercise there's":["not"],"exercise this":["short"],"exercise though":["..."],"exercise to":["try","not","understand","refactor","at","write"],"exercise unless":["anybody"],"exercise uses":["readHex","this"],"exercise using":["just","Data.Map.Strict"],"exercise was":["to","not","done","implemented.","simplified"],"exercise where":["the","it","updated"],"exercise will":["probably"],"exercise with":["power?"],"exercise without":["generalizing"],"exercise worked,":["I'm"],"exercise would":["be"],"exercise wouldn't":["permit"],"exercise wrong":["too"],"exercise you":["could","could","can"],"exercise's code?":["It"],"exercise). Just":["in"],"exercise, I":["would"],"exercise, I'd":["argue"],"exercise, `sort":["x"],"exercise, although":["there"],"exercise, and":["I"],"exercise, but":["it","I","is"],"exercise, consider":["\"3rd\","],"exercise, if":["a","you"],"exercise, or":["have"],"exercise, since":["the"],"exercise, so":["don't"],"exercise, where":["do"],"exercise, you":["might"],"exercise, your":["solution"],"exercise. Anything":["more"],"exercise. Can":["you"],"exercise. I":["used","should","cannot","don't"],"exercise. If":["there"],"exercise. Thanks":["for"],"exercise. The":["exercises"],"exercise. While":["this"],"exercise. Why":["do"],"exercise. Yes,":["I"],"exercise. You":["could"],"exercise. isQuestion":["should"],"exercise... every":["language"],"exercise? I":["can't"],"exercises (I":["already"],"exercises (binary":["as"],"exercises I've":["defaulted"],"exercises are":["based","present","so"],"exercises definition":["of"],"exercises here":["are"],"exercises in":["the"],"exercises it":["made"],"exercises later":["on."],"exercises make":["a"],"exercises originated":["in"],"exercises recently":["have"],"exercises so":["I"],"exercises teach":["people"],"exercises that":["do"],"exercises to":["move","fill","port!)."],"exercises using":["only","only"],"exercises were":["done"],"exercises where":["I"],"exercises with":["monads/functors","just"],"exercises without":["having"],"exercises, I":["really","only"],"exercises, but":["didn't"],"exercises, so":["perhaps"],"exercises. I":["suspect","adapted"],"exercises. I've":["googled"],"exercises. thanks":["for"],"exercism CLI":["tool"],"exercism binary":["will"],"exercism for":["so","those"],"exercism gem,":["as"],"exercism git":["repo):"],"exercism has":["been"],"exercism is":["to","intended"],"exercism user":["has"],"exercism, given":["that"],"exercism, so":["I"],"exercism.io on":["the"],"exercism.io so":["far"],"exersice may":["be:"],"exhausted, or":["2-"],"exhaustive pattern":["matching,"],"exhaustive. Would":["it"],"exhaustively checking":["the"],"exist a":["counterexample"],"exist in":["Prelude","a","Map,"],"exist to":["this"],"exist, but":["it's"],"exist, given":["that"],"exist, however":["`isNil`"],"exist, since":["you'd"],"exist, which":["would"],"existed) but":["I"],"existed, so":["thanks!)"],"existed. I":["am"],"existence of":["fromEnum"],"existing `words`":["function"],"existing binding":["for"],"existing bindings":["(in"],"existing boundaries":["this"],"existing function":["`map"],"existing higher-order":["functions,","functions."],"existing keys":["are?"],"existing letters":["and"],"existing one":["that","where"],"existing predicate.":["It's"],"existing solution":["though,"],"existing solutions":["to"],"exists (I":["thought"],"exists :)":["as"],"exists a":["character"],"exists an":["x"],"exists at":["all,"],"exists in":["this","the","`Prelude`"],"exists some":["non-whitespace"],"exists somewhere":["since"],"exists the":["standard"],"exists they":["are"],"exists), how":["would"],"exists, that":["doesn't"],"exists. Note":["that"],"exists; that's":["super"],"exit with":["an"],"exits without":["any"],"expand the":["functionality"],"expandPairs =":["..."],"expanded version":["of"],"expanding out":["all"],"expanding those":["to"],"expands in":["size"],"expansion (or":["is"],"expansion that":["may"],"expect `'?'`":["followed"],"expect `ord`":["and"],"expect `prettyPrint":["Nothing`"],"expect `rest`":["to"],"expect `where`":["to"],"expect a":["validate","pretty","given"],"expect an":["exception"],"expect areaCode":["of"],"expect better":["performance"],"expect even":["relatively"],"expect given":["only"],"expect it":["to","to","to","to","to","to","to"],"expect it's":["a"],"expect just":["a"],"expect lots":["of"],"expect people":["to"],"expect reversing":["a"],"expect that":["multiset","this","there"],"expect the":["compiler","`/=`"],"expect there's":["a"],"expect this":["to"],"expect those":["imports"],"expect to":["see","have","have.","learn","see","get","find","see","really","see","see","see","see","happen:","see","see"],"expect. It's":["not"],"expected \"Woah,":["chill"],"expected `[1..dv]":["\u003e\u003e="],"expected behaviour":["of"],"expected it":["to"],"expected now.":["I'll"],"expected order":["and/or"],"expected output.":["**Now**"],"expected performance":["problem,","you"],"expected string":["representation"],"expected string.":["It"],"expected that":["one,"],"expected to":["see","be","be","use","handle"],"expected you":["could"],"expected, at":["worst"],"expected. So":["b,"],"expected: \"msemo":["aanin"],"expecting O(1),":["potential"],"expecting `IO":["String`s?"],"expecting a":["simple","`(String,"],"expecting to":["reuse"],"expects `'U'`":["to"],"expects a":["list"],"expects the":["key"],"expense of":["cuteness.","a","readability"],"expense with":["readability"],"expensive an":["operation"],"expensive than":["lists?","just","scoring"],"expensive unevaluated":["thunk"],"experience `let`":["is"],"experience in":["Haskell."],"experience that":["others"],"experience, `Data.Char`":["isn't"],"experience, dealing":["with"],"experience, most":["Haskell"],"experienced user":["to"],"experienced with":["them,"],"experiment a":["bit","bit"],"experiment with":["is"],"experimentally while":["playing"],"experimentation even":["more."],"experimented with":["the"],"expert myself":["yet,"],"expert to":["judge..."],"expert, I":["only"],"explain `return`":["to"],"explain a":["bit"],"explain how":["the"],"explain it":["a","to"],"explain strictness":["issues."],"explain the":["performance"],"explain this":["guard?","right","stuff!"],"explain what":["you"],"explain which":["parts"],"explain why":["lazy"],"explain? You":["already"],"explained here:":["http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'"],"explained in":["a"],"explaining Haskell's":["non-strict","evaluation"],"explaining how":["evaluation"],"explaining how.":["Otherwise"],"explaining my":["thinking"],"explaining the":["concepts"],"explaining them":["to"],"explaining what":["would"],"explaining why":["the"],"explains how":["Haskell's","Haskell's"],"explains the":["two"],"explains things":["better"],"explains this":["in"],"explains very":["well,"],"explanation (more":["like"],"explanation @lucienne":["!"],"explanation I've":["seen"],"explanation although":["I"],"explanation doesn't":["make"],"explanation for":["how","how"],"explanation is":["a","great","that"],"explanation of":["how","how","how","how","how","how","how","how","how","how","folds","the","Haskell's","Haskell's","Haskell's","how","how","Haskell's","what","how","how","why"],"explanation on":["why"],"explanations of":["Haskell's","STM."],"explanatory to":["me"],"explanatory. But":["sorry"],"explicable, as":["does"],"explicative names,":["and"],"explicit (a":["code"],"explicit []":["is"],"explicit `fromEnum`":["at"],"explicit `return":["()`"],"explicit `seq`":["or","or"],"explicit `seq`…":["although"],"explicit about":["it.","them","the","what's","sharing."],"explicit accumulator":["argument"],"explicit and":["use","better"],"explicit arguements":["aren't"],"explicit argument":["for"],"explicit arguments":["in"],"explicit arithmetic":["instead"],"explicit as":["to"],"explicit binding":["for"],"explicit but":["seemed"],"explicit concat":["and"],"explicit equals":["operator"],"explicit export":["of","list","list,","list","list","list","from","and","for"],"explicit exports":["list,","and","(always)","i.e.","would"],"explicit exports,":["fair"],"explicit fold":["by"],"explicit function":["mentions"],"explicit grouping":["isn't"],"explicit here":["and"],"explicit import":["list","lists.","and"],"explicit import,":["excluding"],"explicit imports":["wouldn't","on","is","for"],"explicit imports,":["because","although"],"explicit imports.":["In"],"explicit imports/exports,":["no"],"explicit in":["your"],"explicit internal":["type"],"explicit it":["is"],"explicit list":["of","of","as","of"],"explicit lists":["or"],"explicit namespace":["for"],"explicit null":["check.","check."],"explicit recursion":["to","(google","in","for","and","when","(basically","or","when","you","here","vs","unless","yourself.","this","would","in","when","instead,",":feelsgood:","that","to","was","is","link","like"],"explicit recursion,":["but","only","which","you","try"],"explicit recursion.":["That","It'd","The","Getting","You","One","Expressed","If"],"explicit recursion](http://www.haskell.org/haskellwiki/Haskell_programming_tips#Avoid_explicit_recursion).":["It"],"explicit state":["machine"],"explicit test":["to"],"explicit testing,":["since"],"explicit that":["I"],"explicit type":["signature","signatures.","signatures.","signature,","annotation","signature"],"explicit types":["to"],"explicit types.":["Looks"],"explicit use":["of","of"],"explicit vars.":["I"],"explicit with":["`length`"],"explicit, by":["doing"],"explicit. As":["I'm"],"explicit. See":["the"],"explicitly `import":["Prelude"],"explicitly add":["the"],"explicitly annotate":["the"],"explicitly bind":["`sort"],"explicitly check":["for"],"explicitly declare":["which"],"explicitly do":["something","any","you","it"],"explicitly doing":["the"],"explicitly export":["functions","functions","functions","responseFor,","and","and","`responseFor`","responseFor","functions","responseFor","the","functions,","functions","an","an","`responseFor`","responseFor","the","the","only","`toRNA`","the","the","`hammingDistance`","`wordCount`","only","`responseFor`","only","functionality","its","its","its","its","the","`responseFor`."],"explicitly export/import,":["but"],"explicitly exported":["only","from"],"explicitly exports":["responseFor,"],"explicitly folding,":["if"],"explicitly for":["your"],"explicitly forcing":["the"],"explicitly fuse":["the"],"explicitly give":["it"],"explicitly handle":["the"],"explicitly have":["`'V'"],"explicitly holds":["the"],"explicitly imperative":["rather"],"explicitly import":["things,","individual","functions","functions","functions","isUpper,","functions","functions,","the","functions","functions","isSpace","isSpace","functions","functions,","only","what"],"explicitly imported":["from","from"],"explicitly in":["last"],"explicitly introducing":["the"],"explicitly laid":["out"],"explicitly list":["the","my"],"explicitly marked":["with"],"explicitly matching":["Last"],"explicitly mess":["with"],"explicitly name":["the"],"explicitly named":["because"],"explicitly operate":["on"],"explicitly optimized":["version."],"explicitly passed":["in,"],"explicitly pattern":["matching"],"explicitly read":["a"],"explicitly sequence":["it,"],"explicitly specify":["the"],"explicitly spelled":["out,"],"explicitly spelt":["out"],"explicitly stated":["and"],"explicitly take":["any"],"explicitly that":["a"],"explicitly to":["isSilence,"],"explicitly use":["`seq`,","toAscList","`seq`"],"explicitly using":["the","its"],"explicitly when":["they"],"explicitly, otherwise":["is"],"explicitly. Didn't":["know"],"explicitly. Thanks":[":)"],"explicitness if":["you"],"exploit the":["symmetry"],"exploration of":["`MVar`s"],"explore using":["`any`"],"explore what":["you've"],"explosions ;)":["And"],"exponent because":["it"],"exponent operator.":["But"],"exponentiation or":["reverse."],"exponentiation! It's":["much"],"exponentiation. Basically":["this"],"exponents, e.g.":["`[len-1,"],"export STM":["variant"],"export `hammingDistance`":["from"],"export `responseFor`":["and","from","from"],"export `responseFor`,":["so"],"export `responseFor`.":["It's"],"export `toRNA`":["but"],"export `wordCount`":["and"],"export `wordCount`,":["not"],"export a":["less"],"export all":["top-level"],"export an":["API","API"],"export and":["import","import","type"],"export everything":["implicitly."],"export everything.":["If"],"export for":["`responseFor`"],"export from":["the"],"export functionality":["from"],"export functions":["from","from","from","from","(e.g."],"export functions,":["e.g."],"export it":["from","since"],"export its":["API,","API","API","API"],"export list":["for","now","since"],"export list,":["everything"],"export lists":["to"],"export of":["toRNA","`coordinates`,","everything"],"export only":["the","the","`responseFor`","`toRNA`","the","the","the","the","the","the"],"export responseFor":["and","from","from"],"export responseFor,":["e.g."],"export straight":["away"],"export stuff.":["I"],"export the":["`responseFor`","responseFor","desired","data","functions","intended","API","API","API"],"export toward":["the"],"export your":["API"],"export), so":["you"],"export, i.e.":["`module"],"export/import, but":["you're"],"exported as":["Data.Map.Map"],"exported by":["`Data.Map`,"],"exported from":["Bob","the","the","a"],"exported functions":["in","via"],"exported ones),":["and"],"exported ones).":["If"],"exported only":["responseFor,"],"exported or":["used"],"exported should":["be"],"exported so":["this","instances","it","it","it"],"exported to":["and","and"],"exported when":["they"],"exported, because":["you"],"exported, but":["this","the"],"exported, it's":["just","still"],"exported, then":["it"],"exported. Guards":["may"],"exported. Since":["it's"],"exported. You":["can"],"exporting anything":["other"],"exporting every":["top"],"exporting it":["outside","(which"],"exporting more":["than"],"exporting that":["instance"],"exporting the":["public"],"exporting them.":["So"],"exporting. Here,":["you"],"exporting. I":["usually"],"exporting; I'm":["a"],"exports (`module":["Bob","Bob"],"exports (always)":["and"],"exports `isSpace`,":["which"],"exports and":["imports"],"exports by":["using"],"exports i.e.":["`module"],"exports list,":["rather"],"exports look":["much"],"exports responseFor,":["the"],"exports the":["lazy"],"exports were":["written"],"exports would":["be"],"exports, and":["its"],"exports, fair":["point,"],"exports, was":["too"],"exports, which":["is"],"expose Functor":["instance"],"expose `insert'`":["to"],"expose the":["`School`","```School```"],"exposed at":["the"],"exposed them":["so"],"exposed, which":["are"],"exposing `School`.":["Since"],"exposing a":["whole"],"exposing isQuestion":["am","am"],"exposing the":["structure."],"expresiveness. I":["didn't"],"express ```difference```":["with","in"],"express `anagramsFor`.":["I"],"express `g`":["as"],"express `isShout`":["in"],"express `isSilence`":["without"],"express `map":["f","f","toUpper"],"express `wasShouted`":["and"],"express a":["function"],"express all":["functions"],"express each":["classification"],"express f":["as"],"express isQuestion":["without"],"express it":["in","via","instantly"],"express that":["I","is","condition"],"express the":["first","predicate,","shouting","line","function","solution.","same"],"express this":["more","with","concept","one"],"express what":["each"],"express your":["algorithm"],"expressed \"long-form\"":["for"],"expressed as":["`repeat","`not","just","helper","`[1..dv]","`not","`str","`a"],"expressed in":["terms","powers"],"expressed with":["a","guard"],"expressed, so":["I"],"expresses its":["intent."],"expresses the":["purpose"],"expressing \"if":["this"],"expressing intent":["rather","rather"],"expressing its":["intent"],"expression (e.g.":["`\"Take"],"expression (requires":["LANGUAGE"],"expression ```(,":["1)```"],"expression `unify":["x"],"expression a":["bit,"],"expression and":["have"],"expression context":["(although"],"expression doesn't":["need"],"expression enough":["to"],"expression even":["further"],"expression from":["end"],"expression gets":["evaluated"],"expression has":["type"],"expression here":["will"],"expression if":["I"],"expression in":["parens.","anagramsFor","`performAction`","the","a","the","`else`"],"expression instead":["of","of","of"],"expression is":["0."],"expression itself.":["Worse"],"expression just":["using"],"expression like":["`(not"],"expression looks":["simpler,"],"expression may":["be"],"expression on":["line"],"expression or":["`where`"],"expression rather":["than"],"expression returns":["`False`"],"expression simpler?":["(HINT:"],"expression since":["`wordsBy`"],"expression style,":["and"],"expression that":["looks","are","has"],"expression to":["implement","get"],"expression using":["only"],"expression with":["an"],"expression without":["guards","parentheses."],"expression, `f":["(x)`"],"expression, `normalize":["x`"],"expression, e.g.":["`((inputMap","`Cons"],"expression, guard":["or"],"expression, not":["a"],"expression, something":["like"],"expression. For":["this"],"expression: print":["$","$"],"expression: splitPlaces":["[3,"],"expression` is":["the"],"expressions all":["over"],"expressions are":["the","really"],"expressions around":["`&&`."],"expressions formatted":["as:"],"expressions in":["`responseFor`,","guard."],"expressions instead":["of"],"expressions rather":["than"],"expressions refers":["(I"],"expressions seemed":["more"],"expressions to":["actually"],"expressions unqualified":["(this"],"expressions which":["I"],"expressions you":["use"],"expressions, and":["`where`"],"expressions. It's":["very"],"expressions.\" Now":["they"],"expressive to":["have"],"expressive with":["a"],"expressive, and":["maybe"],"expressive, readable":["code\","],"expressiveness of":["Haskell."],"expressiveness without":["introducing"],"extend in":["case"],"extend the":["matrix"],"extend this":["code"],"extensible for":["larger"],"extensible if":["the"],"extensible to":["an"],"extensible version":["AppError"],"extension `TupleSections`.":["This"],"extension and":["replace","using"],"extension avoids":["creating"],"extension code":["looks"],"extension compared":["to"],"extension could":["also"],"extension enabled.":["But"],"extension for":["writing"],"extension in":["the"],"extension that":["would","would","enables"],"extension to":["replace"],"extension used":["here"],"extension which":["would"],"extension within":["`splitString`."],"extension, allowing":["you"],"extension, which":["would"],"extension, you":["can","can","can"],"extension. There's":["nothing"],"extension? It":["will"],"extensions (that":["have"],"extensions can":["be"],"extensions for":["such"],"extensions to":["offer","the"],"extensions you":["should"],"extensions, as":["```(`zip`"],"extensions. I":["think"],"extensions. TupleExtensions":["is"],"extensively inside":["the"],"extent that":["I"],"external code":["that"],"external communication":["as"],"external function":["uses"],"external function.":["Here's"],"external lib":["these"],"external libraries":["for"],"external libs":["unless"],"external modules":["next.","just"],"externally visible":["structures"],"externally). Then":["the"],"externally, but":["the"],"extra '\\n'":["sounds"],"extra ```map```,":["remember,"],"extra brackets,":["I"],"extra case":["on"],"extra challenge":["you","in"],"extra character.":[":)"],"extra characters,":["with"],"extra check":["from"],"extra clarity":["is"],"extra cons":["cell"],"extra datatype":["in"],"extra fluff":["on"],"extra functions":["I"],"extra import":["has","and"],"extra import.":["I"],"extra importable":["modules?"],"extra level":["of"],"extra line":["and","noise","of"],"extra little":["bit"],"extra mile":["to"],"extra ms.":["Looks"],"extra parens...":["what"],"extra parentheses":["here","are","on","in","in"],"extra pass":["to"],"extra points,":["try"],"extra practice":["you","you"],"extra practice,":["see"],"extra space":["is"],"extra thing,":["you"],"extra times.":["Note"],"extra value":["accumulating"],"extra whitespace":["is","between","is"],"extract `sort":["."],"extract any":["data"],"extract it":["from"],"extract out":["the"],"extract that":["element"],"extract the":["`sort","original","fold"],"extracted into":["helpers","its"],"extracting `(n":["-"],"extracting `sort":["."],"extracting a":["`mkName`"],"extracting all":["of"],"extracting capture":["groups"],"extracting it":["into"],"extracting one":["word"],"extracting out":["the"],"extracting substrings,":["so"],"extracting your":["guard"],"extraction of":["the"],"extraction result":["to"],"extrapolate the":["concept"],"extravagent. A":["good"],"extreme, pointfree)":["style"],"extremely easy":["to"],"extremely good":["at"],"extremely inefficient":["for"],"extremely tiny)":["bound"],"extremely uncommon":["in"],"eye on":["complexity"],"eye than":["another."],"eye, this":["looks"],"eyes having":["to"],"eyes than":["the"],"eyes weren't":["deceiving"],"eyes), but":["it's"],"eyes, not":["benchmarked)."],"f \"\"`":["is"],"f $":["x`","x```.","x"],"f &amp;&amp;&amp;":["g"],"f (BST":["l","l","l"],"f (Just":["x)","x)"],"f (a":["-\u003e","-\u003e"],"f (a,":["b)"],"f (a,b)":["(c,"],"f (as":["++"],"f (g":["a"],"f (map":["g"],"f (x:xs)":["="],"f )...)\u003e)`":["then"],"f .":["map","map","filter"],"f .:":["g"],"f \u003c*\u003e":["Just"],"f \u003c-":["[(+1),(-1)])"],"f =":["not","any","(++","f","seq","(||)","liftA2","liftM2","filter"],"f ==":["all","any"],"f =\u003e":["Applicative","(a","f"],"f \u003e\u003e=":["k"],"f Nothing":["=","="],"f [(5,\"a\"),":["(5,\"b\"),"],"f []":["==","=","=","=","==","=="],"f []`":["is","is","is","is"],"f `comp2`":["g"],"f a":["b`","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","-\u003e"],"f aren't":["in"],"f as":["`(fromEnum","a"],"f b":["-\u003e","-\u003e","-\u003e","-\u003e","-\u003e","d)"],"f b)`.":["Maybe"],"f b`":["can"],"f b`,":["then"],"f c":["|"],"f g":["a","=","="],"f g.":["mapFB","mapFB"],"f g`":["here:"],"f id`":["=="],"f is":["able","filter"],"f k":["a1","x"],"f list":["="],"f list\u003e":[":"],"f m`":["where"],"f p1":["$","\u003cthunk","[]\u003e)"],"f p2":[".",".","[p1,p2,p1p2]\u003e","\u003cthunk:","[p2,p1p2]\u003e","(p2:\u003cthunk:","[p1p2]\u003e)","\u003cthunk:","[p1p2]\u003e","(p1p2:\u003cthunk:","[]\u003e","[]\u003e\u003e"],"f s":["=="],"f string`,":["then"],"f to":["the"],"f x":[":",":","=","y)",":","then","\u003e\u003e","|","=","y)`.","|","\u003c\u003e","\u003c\u003e","++","++"],"f x`":["as","and","may","as"],"f xs":["=","=","==","==","=="],"f xs)":["(map"],"f xs)`":["is"],"f xs.":["map","map"],"f xs`,":["and"],"f y":["\u003c\u003e","=","="],"f y`":["since"],"f\" is":["really"],"f) ...`?":["I"],"f) [1..n]`":["is"],"f) []":["=","="],"f) []`":["on"],"f) g":["=","="],"f) n":["xs)","xs)"],"f) x":["y`"],"f) xs":["=="],"f)` is":["equivalent"],"f)` on":["the"],"f)``` is":["same"],"f*g^3 +":["x*g^2"],"f, Num":["b)","b)"],"f, and":["it"],"f, otherwise":["="],"f-1 ..":["t]`."],"f. You":["can"],"f. foldr":["(mapFB","(mapFB"],"f1 $":["initialValue\u003c/pre\u003eSlightly"],"f2 .":["f1"],"f` =":["`(\u003e\u003e="],"f` can":["be"],"f` could":["return"],"f` from":["Control.Monad."],"f` instead":["of"],"f` is":["equivalent"],"f` to":["just"],"f` when":["you"],"f`, otherwise":["this"],"f`, so":["it's"],"f`, you":["need"],"f``` can":["be"],"f``` to":["```mapMaybe"],"f```. And":["if"],"facilities I":["could"],"facilities are":["going"],"facilities of":["`Data.Map`"],"facilities, because":["the"],"fact I":["could"],"fact `all":["undefined"],"fact it":["is","may"],"fact it's":["pretty","just"],"fact that":["just","4","the","the","it","all","all","the","you","you","some","\u003ccode\u003eString\u003c/code\u003e","`last","I","this","the","`number`","Char","all","Haskell","400","all","the","Data.Map's","each","the"],"fact, I":["didn't","prefer"],"fact, I've":["reworked"],"fact, if":["you"],"fact, it's":["essentially"],"fact, that's":["how"],"fact, there":["is"],"fact, using":["`length`"],"factor `sort":["."],"factor benefit":["to"],"factor better":["if","algorithm"],"factor if":["you'll"],"factor improvement":["by"],"factor in":["your"],"factor it":["you'll"],"factor of":["100","400."],"factor out":["the","`earthYear","the","all","the","`sort","the","the","the","intermediate","a"],"factor since":["you","you've"],"factor speedup.":["Not"],"factor than":["square"],"factor that":["stuff","was"],"factor the":["`all`","other"],"factor this":["number"],"factor, since":["you"],"factored `nucleotides`":["out."],"factored a":["different"],"factored it":["out"],"factoring a":["lot"],"factoring out":["your"],"factoring that":["out."],"factorising a":["single"],"factorization a":["number."],"factorization has":["no"],"factorization in":["BQP."],"factorization! :)":["You"],"factorization, if":["you"],"factors \u003e=":["the"],"factors algorightm":["there;"],"factors and":["then","a"],"factors are":["exactly","\u003e=","3,"],"factors because":["they"],"factors in":["the"],"factors of":["`n`."],"factors past":["sqrt"],"factors, etc.":["but"],"factors, ideally":["I'd"],"factors. This":["should"],"factory floor,":["they"],"factory since":["it"],"faff than":["`intercalate"],"fail (there":["are"],"fail and":["doesn't"],"fail faster,":["but"],"fail for":["something","spaces,"],"fail if":["the","passed","the","an","x","the"],"fail on":["first","the"],"fail this":["test"],"fail to":["see","understand","see","parse."],"fail unexpectedly":["if"],"fail wasn't":["present"],"fail when":["confronted"],"fail yo":["do"],"fail, because":["anagramsFor"],"failed a":["test"],"failed because":["of"],"failed later":["without"],"failed on":["numbers"],"failed pretty":["miserably."],"failed the":["last"],"failed to":["procuce","use","parse,"],"failing all":["but"],"failing enough":["times"],"failing is":["better"],"failing only":["one"],"failing tests":["if","for"],"failing tests,":["not"],"failing to":["give"],"fails 6":["of"],"fails and":["the"],"fails for":["one"],"fails if":["I"],"fails is":["essentially"],"fails on":["only"],"fails one":["test:","test"],"fails then":["it"],"fails two":["tests."],"fails with":["an"],"fails, because":["the"],"fails, you're":["guaranteed"],"failure can":["happen;"],"failure case":["of"],"failure probability":["without"],"failures, but":["would"],"fair point,":["will"],"fair, this":["one"],"fair. I":["usually"],"fair. Looks":["good"],"fairly certain":["that","that"],"fairly concise":["as"],"fairly easily":["guessable"],"fairly easy":["to"],"fairly explicable,":["as"],"fairly generic":["concepts"],"fairly new":["to","to"],"fairly obviously":["suited"],"fairly short,":["but"],"fairly standard":["library."],"fairness, my":["formulation"],"faithfully follows":["instructions."],"fall back":["on"],"fall into":["the"],"fall through":["the","to"],"fall to":["another"],"falling into":["myself,"],"falls into":["`otherwise`"],"fallthrough with":["guard"],"false on":["things"],"false, which":["would"],"false. You":["could"],"familar with":["linearizing","that"],"familiar enough":["with","with"],"familiar in":["the"],"familiar with":["how","`any`,","`uncurry`?","its","it","the","Clojure","Control.Applicative.","the","`Data.Map`","this","layout","the"],"families better":["than"],"family of":["functions","functions."],"fan of":["`isQuestion`","defining","learning","that","the","not","the","the","the","camelCase,","fromJust,","the","using"],"fan too,":["but"],"fancier algorithms":["without"],"fancy family":["of"],"fancy way":["of"],"fancy, but":["it's"],"fancyWords a":["top-level"],"fantastic explanation":["of"],"fantastic way":["around"],"fantastically concise,":["but"],"far -":["I"],"far I":["can"],"far and":["end"],"far as":["the","I","that","I","idiomatic","implementing","the","the","using","the","notes","I","Haskell","`scoreWord`","I","initializing","benchmarking,","I","```sing```","I'm","I","```validate```","I","I","I've","applying"],"far but":["you"],"far fetched":[":)"],"far for":["`add`."],"far from":["what's","anything","an"],"far has":["been"],"far into":["Learn"],"far is":["so","just","the"],"far less":["memory."],"far more":["optimized","common"],"far on":["the"],"far righthand":["side"],"far smaller":["than"],"far superior.":["Since"],"far though":["the"],"far with":["any"],"far! Your":["feedback"],"far, I":["just"],"far, the":["tests"],"far. Yes,":["`isShout`"],"fares in":["this"],"farther along":["than"],"fashion -":["at"],"fashion in":["`add`,"],"fashion, so":["the","the","the","the","the"],"fasion so":["it"],"fast `add`?":["Well"],"fast `grade`":["and"],"fast algorithm":["for"],"fast as":["my","it","```Data.Array.Unboxed.array"],"fast enough":[":)"],"fast enough,":["and"],"fast enough.":["I"],"fast if":["not"],"fast lookup,":["but"],"fast regardless":["of"],"fast this":["is"],"fast to":["just"],"fast), for":["reference"],"fast, I":["think."],"fast. For":["extra"],"fast. This":["takes"],"faster (in":["the","my"],"faster (when":["unoptimized),"],"faster algorithms":["out"],"faster and":["not","shorter"],"faster as":["there"],"faster but":["O(log(n))"],"faster by":["using","a"],"faster for":["the","`many`","positive"],"faster implementation":["of"],"faster in":["the"],"faster pass":["in"],"faster path":["than"],"faster representation,":["this"],"faster since":["it","I"],"faster solution:":["once"],"faster than":["checking","the","using","coding","the","`isDigit"],"faster then":["lookup","```divMod```."],"faster to":["do","use","use","understand.","work"],"faster too,":["as"],"faster unless":["I'm"],"faster using":["`fromListWith`."],"faster way":["to"],"faster when":["benchmarked"],"faster with":["less","an"],"faster would":["be"],"faster) it":["seemed"],"faster). `fromListWith`":["uses"],"faster, but":["that's","on"],"faster, which":["makes"],"faster, you":["could"],"faster. Additionally":["it's"],"faster. Inserting":["into"],"faster. This":["case"],"faster. You":["should"],"faster? It":["uses"],"fastest (in":["my"],"fault code":["like"],"fault for":["not"],"fault it":["is)."],"fault on":["not"],"favor conciseness":["over"],"favor in":["this"],"favor of":["readability,"],"favorite option),":["or"],"favour of":["```Data.Map.Strict```"],"favoured over":["`let`"],"favourite things":["about"],"feasible to":["have"],"feature of":["STM."],"feature to":["have","make","keep"],"features like":["pattern"],"features of":["Haskell"],"febThirteenth =":["fromGregorian"],"fed in,":["which"],"feed both":["nitpicks"],"feed into":["a"],"feed it":["`isSpace"],"feed the":["result"],"feed yesterday,":["so"],"feedback --":["weirdly"],"feedback I":["left"],"feedback after":["posting"],"feedback again":[":)"],"feedback and":["point"],"feedback as":["always,"],"feedback between":["this","this"],"feedback both":["of"],"feedback has":["been","been"],"feedback here.":["It's"],"feedback is":["welcome.","greatly","amazing"],"feedback on":["`fold`.","my","this`"],"feedback really":["quickly!"],"feedback then.":["For"],"feedback to":["other"],"feedback would":["be"],"feedback! I":["actually","was","submitted","think","need"],"feedback! I've":["used","submitted"],"feedback! Really":["appreciate"],"feedback, I":["moved"],"feedback, but":["it"],"feedback, dropped":["the"],"feedback, especially":["re"],"feedback, much":["cleaner."],"feedback, really":["learned"],"feedback, thanks.":["I"],"feedback. Also,":["it's"],"feedback. Definitely":["a"],"feedback. I":["have","almost","fiddled","also"],"feedback. I'll":["keep"],"feedback. I'm":["very","pretty","still"],"feedback. It":["led"],"feedback. My":["question"],"feedback. Regarding":["`isQuestion`"],"feedback. Will":["look"],"feedback; I":["tried"],"feedback; I'm":["learning"],"feeding an":["empty"],"feeding my":["code"],"feeds that":["to"],"feel \"which":["isn't"],"feel I":["had"],"feel a":["touch"],"feel about":["it.","using"],"feel any":["comments"],"feel are":["a"],"feel could":["be"],"feel for":["how"],"feel free":["to","to","to","to","to"],"feel it":["could","*might*"],"feel its":["lacking.."],"feel kind":["of"],"feel less":["like"],"feel like":["the","using","it","it","there's","it.","\u003ccode\u003e(\"?\"","the","there's","there","it","as","the","`garden`","it","I'm","I'm","there","there's","variables.","`2^n`","I'm","putting","they","I"],"feel more":["readable"],"feel natural":["for"],"feel of":["what"],"feel pretty":["dense"],"feel right":["to"],"feel than":["a"],"feel that":["they","`MVar`","asking","``cleanChar``","the","inefficient.","this"],"feel that,":["while"],"feel understandable)":["approach"],"feel very":["\"discoverable\"","Haskell-y."],"feel with":["the"],"feeling I":["was"],"feeling as":["to"],"feeling like":["it,","the"],"feeling that":["the","it's"],"feels a":["bit","bit","little","lot","lot","bit","bit","bit"],"feels better":["than"],"feels dirty,":["but"],"feels fragile":["to"],"feels like":["an","cheating","it","a","a","a","I'm","a","a"],"feels messier":["than"],"feels more":["declarative","readable."],"feels rather":["complicated"],"feels really":["clunky"],"feels to":["escape"],"feels weird,":["man."],"fell into":["the"],"fell like":["this"],"felt \"more":["functional\""],"felt `isSilence`":["was"],"felt a":["lot","real","little"],"felt dirty,":["but"],"felt it":["made","was","read","was","was"],"felt like":["cheating","none","I'd","a","I"],"felt makes":["it"],"felt that":["added"],"felt the":["problem"],"fetch the":["latest."],"fetch` to":["get"],"fetched the":["exercise"],"fetched. Does":["the"],"fever though...":["it's"],"few articles":["about"],"few clever":["ways"],"few common":["styles","patterns"],"few days":["ago)"],"few days?":["I"],"few definitions":["from"],"few examples":["where"],"few functions":["from"],"few good,":["stable"],"few grades,":["but"],"few hundred":["thousand."],"few imports":["and"],"few iterations":["before"],"few letters":["long"],"few lines!":["I"],"few million":["words,"],"few minor":["nits."],"few more":["things.","characters","hints.","characters"],"few more,":["but"],"few nice":["tricks."],"few nits":["at"],"few notes":["(not"],"few of":["them","them,","the","those"],"few other":["options","options.","list","ways","solutions"],"few people":["that"],"few places":["I've"],"few reads-through.":["I"],"few reasons:":["it's"],"few rules":["to"],"few seconds":["to"],"few simpler,":["Haskell"],"few small":["things","nitpicks."],"few standard":["functions"],"few style":["things","nits"],"few superfluous":["parentheses"],"few that":["you"],"few things":["you","more:","to","that","that"],"few times":["faster"],"few ways":["to","to"],"few weeks":["between","ago,"],"few years":["ago."],"few. In":["this"],"fewer `$`":["and"],"fewer candidate":["primes"],"fewer candidates":["(other","to"],"fewer case":["statements?"],"fewer checks":["for"],"fewer combinators":[":)"],"fewer comparisons":["for"],"fewer comparisons,":["these"],"fewer comparisons.":["The"],"fewer imports":["and"],"fewer operations":["than"],"fewer optimisations,":["and"],"fewer parens":["in"],"fewer than":["ten"],"ff =":["foldMap","foldMap","foldMap"],"ff l":["\u003c\u003e","\u003c\u003e","\u003c\u003e"],"fiddled with":["both,"],"fiddling with":["more"],"field on":["`Robot`"],"field that":["is"],"field, that":["thunk"],"field. Slightly":["different"],"field. That's":["how"],"fields `a`":["and"],"fields are":["strict.","not"],"fields as":["strict"],"fields doesn't":["matter):"],"fields for":["free."],"fields if":["it"],"fields of":["that","Robot","bst"],"fields that":["you"],"fields. Check":["out"],"fight which":["one"],"figure evaluation":["order..."],"figure how":["to.",":("],"figure it":["out.","out"],"figure out":["what","how","what","by","why","a","how","which","yet.","what","how","how","how","what","which","the","in","how","the","where","how","how","how","how","what's","how","a","how","a","why","what","the","for","how","how","why","why","how"],"figure out,":["at"],"figure that":["stuff"],"figure the":["type"],"figure them":["out"],"figure this":["sort","out,","out","out!)"],"figure? `\u003c$\u003e`":["has"],"figured I":["would"],"figured explicit":["recursion"],"figured for":["such"],"figured if":["there"],"figured it":["out","would","out,"],"figured out":["is","how","how","how","why","why"],"figured that":["might","would","`filterString`","it"],"figured this":["out)."],"figured, if":["I"],"figuring out":["the","what","when","@lamar's"],"file --":["I"],"file and":["test"],"file at":["one","a"],"file directly":["either"],"file here":[":)"],"file in":["the"],"file into":["`ghci`"],"file is":["import"],"file it":["says"],"file of":["a"],"file one":["thing"],"file or":["put"],"file says":["not"],"file so":["you"],"file that":["look"],"file the":["other"],"file to":["change","setup"],"file with":["-Werror,"],"file, nor":["detailed"],"file. However":["if"],"file. I":["normally"],"file.hs` at":["the"],"file.hs` or":["`:load"],"file: `{-#":["LANGUAGE"],"filed an":["issue"],"files are":["often"],"fill in":["the","some"],"fills the":["stack"],"filter (((==)":["`on`"],"filter ((==xn)":["."],"filter ((inputMap":["==)"],"filter (==":["n)`"],"filter (==True)":["$"],"filter (\\x":["-\u003e","-\u003e"],"filter (`isAllergicTo`":["s)"],"filter (anagram":["\"foo\")"],"filter (filterFunction":["w)`"],"filter (inputMap==)":["."],"filter (not":[".",".",".",".","."],"filter (on":["(==)"],"filter (uncurry":["(/=))","(/=))","(/=)))"],"filter .":["(isAnagramOf","isanagramOf\",","isAnagram`,","isAnagram","isAnagram`","isAnagram","isAnagramOf`"],"filter ..`":["since"],"filter again.":["See"],"filter and":["map"],"filter as":["`filter"],"filter at":["all)."],"filter but":["then"],"filter by":["using","length"],"filter check,":["but"],"filter clause,":["thinking"],"filter don't":["mind"],"filter down,":["or"],"filter found":["elements"],"filter function":["on"],"filter function.":["Typical"],"filter g`":["approach"],"filter id":[".:",".`"],"filter id)":[".:",".)",".)"],"filter in":["isShouting","`slices`","normalize"],"filter incorrect":["characters."],"filter input":["so"],"filter instead":["of","of","of"],"filter is":["only","forced,"],"filter isAlpha":["str","x","str","str\u003c/pre\u003e"],"filter isAlpha)":["q"],"filter isAlpha)`":["with"],"filter isAlpha`":["can"],"filter isDigit":["input"],"filter isLetter":["xs`.","s","str\u003c/pre\u003e"],"filter it":["out"],"filter length":["worked"],"filter notDuplicate`":["to"],"filter on":["the","the"],"filter only":["runs"],"filter out":["specific","the","function","empty"],"filter p1":["p2"],"filter pred2`":["this"],"filter predicate":["did"],"filter sortedWordsSame":["."],"filter though.":["I"],"filter to":["transform,","ensure"],"filter unless":["any"],"filter versus":["a"],"filter will":["be"],"filter with":["`all`","functions"],"filter without":["using"],"filter would":["potentially","be"],"filter', but":["I"],"filter). Nothing":["wrong"],"filter, although":["the"],"filter, and":["we","list"],"filter, but":["kind","this"],"filter, iterate,":["repeat,","repeat,"],"filter, p1":["is"],"filter, so":["shouldn't","shouldn't"],"filter, takeWhile,":["dropWhile,"],"filter, where":["everyone"],"filter-y sorts":["of"],"filter. I":["also"],"filter. If":["you're"],"filter. Most":["Haskell"],"filter. Which":["is"],"filter` because":["punctuation"],"filter` traverses":["all"],"filter` uses":["O(1)"],"filtered to":["see"],"filtering a":["word"],"filtering and":["case"],"filtering at":["once."],"filtering by":["isLetter!"],"filtering for":["primes"],"filtering in":["one"],"filtering logic":["as"],"filtering on":["the"],"filtering out":["the","the","characters"],"filtering the":["keys"],"filtering, if":["i"],"filters a":["list"],"filters based":["on"],"filters don't":["make"],"filters into":["two,"],"filters isn't":["really"],"filters or":["list"],"filters out)":["but"],"filters to":["built"],"filters will":["actually"],"filters with":["almost"],"filters, you":["can"],"filters. I":["know"],"final access,":["so"],"final and":["change"],"final expression":["in"],"final function":["is"],"final lookup":["and"],"final result":["`3`.","is"],"final string":["if"],"final three":["chapters"],"finally at":["the"],"finally figured":["out"],"finally get":["something"],"finally got":["it,","things"],"finally have":["the"],"finally performs":["them."],"finally setup":["vim,"],"finally understand.":["Because"],"finally wrote":["a"],"find \"Monad":["is"],"find (($":["x)"],"find Applicative":["to"],"find Data.List.Split":["from"],"find Data.List.Split.wordsBy":["function","function","function","function"],"find Hayoo":["and"],"find Hoogle":["to"],"find `BangPatterns`":["clearer"],"find `Data.Char.digitToInt`":["function"],"find `String`":["to"],"find `TVar`":["in"],"find `chainl1`":["for"],"find `countOccurrences":["."],"find `filter":["isDigit`"],"find `fromListWith":["(+)"],"find `last`":["when"],"find `unlines`":["useful,","function"],"find `wordsBy`":["function","which"],"find a":["function","slot","function","more","way","function","better","cleaner","suitable","built-in","little","better","function","simpler","function","way","cleaner","more","function","way","better","solution","way","shorter"],"find an":["pleasant","elegant","algorithmically","equivalent","easy"],"find any":["information","efficient","auto-generated","standard"],"find anything":["that","useful","in","in"],"find code":["like","like"],"find different":["datastructure"],"find easiest":["to"],"find element":["I,","j,"],"find even":["the"],"find function":["you"],"find functions":["given"],"find having":["the"],"find how":["to"],"find idiomatic":["is"],"find it":["helpful","simpler","helps","nice","to","necessary","via","on","interesting","in","more","nicer","very","very","more","much","a","better","relevant","to","more","interesting","into"],"find it's":["simpler","tolerant"],"find module\"":["when"],"find more":["elegant","expressive."],"find myself":["writing"],"find nice":["`f`"],"find nicer":["would"],"find one.":["Maybe"],"find out":["how","that","how"],"find over":["time"],"find prefixing":["functions"],"find qualified":["names"],"find simple":["solution"],"find so":["far"],"find solutions":["that"],"find some":["functions","list","of"],"find something":["in","like"],"find that":["they","more","`fromListWith`","to","this","approach","Num","you","the","code"],"find the":["unique","latter","`f.g`","rules","guards","source","result","`wordsBy`","solutions","next","logic","version","right","teenth"],"find things":["like"],"find this":["unnecessary,","page:","information?)","pretty","easier"],"find useful":["as"],"find useful:":["[multiline"],"find ways":["to"],"find your":["`let`s"],"find. Just":["look"],"find/insert pattern":["is"],"findWithDefault per":["gnuvince's"],"find` and":["then"],"finding a":["very","the"],"finding functions":["by"],"finding it":["complicated,","on"],"finding that.":["Ahh,"],"finding the":["right"],"finds a":["lowercase"],"finds is":["a"],"finds unequal":["elements,"],"fine and":["there's"],"fine as":["well.","it","is"],"fine for":["the","this","me.","me."],"fine given":["the"],"fine here,":["but"],"fine here.":["`isQuestion"],"fine if":["you","you"],"fine in":["many","GHCI,"],"fine on":["the","anything"],"fine otherwise":["though."],"fine solution,":["just","other"],"fine then?":["Or"],"fine to":["me","me.","use.","do","leave","write","do","me,","approach","have"],"fine up":["to"],"fine without":["parentheses","the"],"fine! I":["used"],"fine, although":["because","you"],"fine, and":["so"],"fine, any":["insight"],"fine, but":["I","many","I"],"fine, except":["you"],"fine, so":["I'll"],"fine, some":["minor"],"fine, this":["one"],"fine, though":["I"],"fine. (In":["fact,"],"fine. Along":["the"],"fine. Also":["I've"],"fine. I":["just","would"],"fine. I'd":["use"],"fine. I'm":["pretty"],"fine. Most":["people"],"fine. Note":["the"],"fine. Nothing":["fancy,"],"fine. Parentheses":["are"],"fine. shoutChar":["could"],"fine? I":["Actually"],"finish isn't":["necessary"],"finish this!":["This"],"finish up":["_Real"],"finish` can":["be"],"finished passing":["the"],"finished product,":["it"],"finished reading":["functors"],"finished. But":["I"],"finishing that":["course."],"finite (and":["in"],"finite alphabet":["and"],"finite input":["is"],"finite, which":["can"],"fired if":["the"],"first -":["in"],"first 18bit":["in"],"first 2":["conditions"],"first ==":["'1'"],"first Haskell":["program,","program","ever."],"first I":["used"],"first N":["characters"],"first _guard_":["clause\"."],"first `Map`":["import"],"first `filter`":["and"],"first `filter`,":["so"],"first `map`":["is"],"first access":["to","complexity,"],"first access.":["I'd"],"first and":["second,","second","was","then","split","always","doesn't"],"first argument":["to","to","N","of","to","in"],"first argument,":["I'd"],"first argument.":["You","Since"],"first as":["well,"],"first attempt":["at","while","now"],"first attempt,":["and"],"first attempting":["this"],"first because":["otherwise"],"first binding":["can"],"first bit":["of","of"],"first broken":["solution"],"first calendar":["date"],"first case,":["also"],"first case.":["In"],"first chapters":["of"],"first char":["and","and","of","`x`"],"first character":["is"],"first character,":["where","the"],"first check":["in"],"first checks":["are"],"first clause":["of","of"],"first clauses":["of"],"first clause…":["so"],"first column":["with"],"first comment":["on"],"first condition":["because"],"first condition,":["but"],"first condition.":["I"],"first convert":["it"],"first day:":["you"],"first digit":["and","is"],"first don't":["know"],"first element":["of","in"],"first element,":["then"],"first equation":["because","here?"],"first ever":["use"],"first exercise,":["or"],"first expects":["the"],"first find":["element"],"first fixes":["that)."],"first four":["chapters"],"first generating":["a"],"first glance,":["then"],"first glance.":["That","Although"],"first glimmerings":["of"],"first going":["bottom-left","bottom-left"],"first guard":["case","implies","to","in","anyway?","can't","catches","eliminating","of","covers","works","and","makes","fails","to"],"first guard),":["but"],"first guard.":["Usually"],"first handler":["(`all"],"first haskell":["I've"],"first implementation.":["Nice"],"first in":["this","`isShouted`"],"first index":["in"],"first instance,":["and"],"first integer":["not"],"first is":["that","ignored?","`foldl`:"],"first issue":["with"],"first issue,":["you"],"first iteration":["you","(and","was,","used"],"first iteration).":["This"],"first iteration,":["probably","do"],"first letter":["will"],"first line":["after",":)","to"],"first lines":["in"],"first list":["is"],"first lowercase":["and"],"first monad":["exercise."],"first nitpick":["will"],"first nitpick,":["I"],"first non-whitespace":["character"],"first occurrence,":["and"],"first one":["is","is","is","that","and","is","who","fails,"],"first one,":["allowing","are"],"first one.":["Am"],"first part":["of","of","of"],"first part,":["categorising"],"first pass":["just"],"first pass,":["but","just"],"first passing":["parser?"],"first phase":["of"],"first phrase":["of"],"first place":["since"],"first place,":["since"],"first post),":["as"],"first predicate,":["p2"],"first principles,":["like"],"first problem,":["this"],"first real":["program"],"first realised":["that"],"first remark":["makes"],"first result":["of"],"first rule":["is"],"first section":["of"],"first simplification":["you"],"first so":["that","that"],"first solution":["was","I'm"],"first solves":["that"],"first sorted":["char","char"],"first splitting":["was"],"first statement":["check","as","is"],"first statement,":["just"],"first step":["in"],"first submission),":["that"],"first submission.":["Basically,","But"],"first test":["perhaps?"],"first then":["calling"],"first thing":["I","I","I"],"first this":["looked"],"first thought":["was"],"first three":["pass-through"],"first three,":["next"],"first time":["I","around.","I've","you","calling","it's","you","writing","you","I've","I","I'm"],"first time,":["probably"],"first time.":["Btw"],"first to":["make"],"first tool,":["it"],"first totally":["lost"],"first two":["guards","conditions","conditions","lines","arguments:","guards","that"],"first use":["`process`","of"],"first value":["outer"],"first variant":["--"],"first version":["was","(which,","(although","(using"],"first we":["will"],"first whateverday":["of"],"first with":["`findWithDefault`.","respect"],"first word":["never","will"],"first working":["solution"],"first wrote":["this","`fromBool"],"first you":["can","test"],"first' :":["split","split"],"first' =":["map"],"first, \"-\",":["second]"],"first, I":["thought","was","started"],"first, and":["I","I","then","then","then"],"first, but":["I","then","then","that's","I"],"first, creating":["n"],"first, the":["whole"],"first, then":["map"],"first, which":["is"],"first, will":["the"],"first. Because":["it"],"first. Do":["you"],"first. Haskell":["_should_"],"first. I":["also","feel"],"first. I'm":["just"],"first. Maybe":["is"],"first. Otherwise":["nothing"],"first. The":["only"],"first? Knowing":["what"],"fist clause":["of"],"fit better":["in"],"fit for":["string"],"fit in":["nicely","8","there."],"fit neatly":["into"],"fit the":["inferred","problem"],"fits inside":["the"],"fits that":["definition."],"fits there.":["So"],"fits with":["the"],"fits within":["an"],"fits your":["algorithm,"],"fitting function":["but"],"fitting more":["than"],"fix (const":["(ap"],"fix a":["strictness"],"fix algorithm":["easily."],"fix all":["the"],"fix by":["using","importing"],"fix for":["this","this","this"],"fix from":["Control.Monad.Fix"],"fix here":["is"],"fix if":["you"],"fix in":["next"],"fix it":["up."],"fix mine":["but"],"fix my":["imports"],"fix solution":["if"],"fix strictness":["issues"],"fix that":["by","when","Data.Char","just","by","by"],"fix that,":["thanks!"],"fix the":["tests","specification,","problem","value","solution","former","latter","first","problem"],"fix them":["or"],"fix this":["in","is","is","is","once"],"fix to":["the"],"fix\", because":["the"],"fix. As":["such,"],"fixated on":["how"],"fixed by":["importing","importing","compilation).","using"],"fixed digest":["size),"],"fixed for":["brevity"],"fixed in":["subsequent","the"],"fixed leftover":["from"],"fixed only":["by"],"fixed point":["(`go`)","iteration","(`go`)","iteration"],"fixed size":["array","alphabet"],"fixed small":["alphabet"],"fixed the":["hard","`foldr`","problems","issue.","indentation"],"fixed types":["so"],"fixed version":["much"],"fixed, thank":["you."],"fixed. Were":["you"],"fixes a":["few","thunk"],"fixes suggested.":["Not"],"fixes that).":["I"],"fixes the":["strictness","value","`foldr`"],"fixes you":["suggested."],"fixing that":["in"],"fixing the":["indentation"],"fixity declaration":["there"],"fixity for":["each"],"fixity of":["0,","common","an","the","`\u003c|\u003e`"],"fixity than":["`||`.","`||`"],"fixity) of":["a"],"flakey on":["the"],"flat `V.Vector":["a`"],"flatten this":["could"],"flattened storage":["layout"],"flattened there":["are"],"flattened. Also,":["I"],"flawed, and":["is"],"flexibility. Is":["it"],"flip $":["(flip"],"flip ((,)":["."],"flip (++)":["\"ab\""],"flip ::":["(a"],"flip M.lookup":["scores`"],"flip it":["back"],"flip map":["[any"],"flip mod`":[":)"],"flip the":["first","composition","order"],"flip zip":["(repeat","[1,","(repeat"],"flip, but":["I"],"flip. algorithm":["is"],"flippant, these":["are"],"flipped the":["sense"],"flipping or":["lambdas."],"flips seem":["to"],"flips the":["logic"],"float optimization":["that"],"float out":["the","optimization","optimization.","`sort","optimization","optimization,","optimization,","optimization,"],"float-out optimisation.":["I"],"float-out optimization":["some","to"],"floated out":["like"],"floated-out (since":["`anagram"],"floating the":["`a`"],"floor $":["head"],"floor (10":["^"],"floor ...":["--"],"floor, they":["have"],"floor, truncate,":["round`?"],"flow between":["a"],"flow than":["data"],"flow with":["complex"],"fluff on":["the"],"flush left":["even","even"],"fly structures":["that"],"fmap (+amt)":["\u003c$\u003e"],"fmap (+i))`":["in"],"fmap (,'B')":["p2]`?"],"fmap (=='1')":["."],"fmap (\\n":["-&gt;"],"fmap (\\x":["-\u003e","-\u003e"],"fmap (amt":["+)","+)"],"fmap (insert":["x)","z)"],"fmap .":["(+)))"],"fmap ::":["(a","(a","(a"],"fmap and":["`&amp;lt*&gt;`"],"fmap by":["looking"],"fmap fmap":["fmap`."],"fmap instead":["of"],"fmap operator":["for","(`\u003c$\u003e`)"],"fmap repeat`":["if"],"fmap toLowerStr)`.":["I"],"fmap x":["apply"],"fmap'd over":["the"],"fmap) and":["`\u003c|\u003e`"],"fmap. Yeah,":["I'm"],"fmtNumber doesn't":["have"],"focus here":["was"],"focus on":["maintaining"],"fold (`foldl'`":["from","for"],"fold (`foldl'`)":["or","or","or","or","or","or","is","and"],"fold (`foldl'`),":["or"],"fold (`foldl'`).":["I"],"fold (or":["fromListWith,"],"fold (which":["is"],"fold `foldl'`":["from"],"fold a":["go"],"fold accumulator,":["then"],"fold and":["a","having"],"fold because":["it"],"fold by":["using","using"],"fold can":["create"],"fold completely":["by"],"fold could":["do"],"fold creates":["a"],"fold due":["to"],"fold for":["this","you.","lists.","you).","this","this","this","results","this,"],"fold function":["already","at"],"fold here":["because","is"],"fold in":["a","its","its","their","this","this","ghci"],"fold instead":["of","if","of","of"],"fold internally":["and"],"fold is":["bad","also","the","always","done","only"],"fold isn't":["an"],"fold itself":["seems"],"fold left":["instead"],"fold only,":["do"],"fold or":["else","something","iterative","recursion."],"fold over":["4","an","the","the","the"],"fold regardless":["of"],"fold right":["in"],"fold should":["be"],"fold similar":["to"],"fold situation,":["but"],"fold thanks.":["But"],"fold the":["string"],"fold thinking":["it"],"fold to":["use","use","use,","build","use,","use","use","use","use"],"fold used":["to","in"],"fold wasn't":["working."],"fold when":["you"],"fold with":["`insertWith`","`insertWith`","a","repeated","something","`M.insertWith`"],"fold without":["a"],"fold would":["be","be"],"fold you":["shouldn't"],"fold, (```any":["(`elem`"],"fold, I":["can"],"fold, as":["it"],"fold, avoiding":["```reverse```"],"fold, because":["you","that","it"],"fold, but":["I"],"fold, check":["out"],"fold, due":["to"],"fold, for":["example."],"fold, hrmm.":["So"],"fold, it's":["nicer"],"fold, or":["other"],"fold, since":["you're","you"],"fold, such":["as"],"fold, which":["you"],"fold, you":["probably"],"fold. I":["can"],"fold. If":["you"],"fold. In":["fact,"],"fold. Not":["sure"],"fold. Or":["see"],"fold. See":["also"],"fold. There":["is"],"fold. `map`":["is"],"fold.. will":["try"],"foldM doesn't":["appear"],"foldM over":["the"],"foldMap (foldMap":["f)","f)","f)"],"foldMap f":["(BST","(BST","(BST"],"foldResult ()`":["I"],"foldable to":["make"],"foldable, and":["other"],"folder purely":["for"],"folder.. and":["my"],"folding `foldl'`":["this"],"folding at":["all"],"folding based":["on"],"folding from":["the"],"folding function":["on"],"folding function.":["But"],"folding insert":["over","and"],"folding over":["with","the","the"],"folding which":["forces"],"folding with":["`insertWith`)","`insertWith`."],"folding, if":["you"],"foldl (+)":["1"],"foldl (\\m":["x"],"foldl and":["foldr"],"foldl better":["combinators"],"foldl collate":["M.empty"],"foldl function":["and"],"foldl gets":["out"],"foldl in":["any"],"foldl is":["bad.","preffered"],"foldl on":["the"],"foldl semantics?":["Really"],"foldl will":["immediately"],"foldl works":["from"],"foldl you":["have:"],"foldl' (\\map":["(k,v)"],"foldl' (flip":["$","$","$","$","$","$","insert)"],"foldl' (from":["Data.List)."],"foldl' (note":["the"],"foldl' and":["switched","this","the","strict"],"foldl' from":["data.list"],"foldl' go":["b"],"foldl' if":["I"],"foldl' insert'":["empty"],"foldl' was":["gonna"],"foldl' will":["do","do","do","do","do"],"foldl', otherwise":["use","use","use"],"foldl'-based version":["though..."],"foldl'](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl%27) quite":["useful"],"foldl(f, acc,":["xs):"],"foldl, and":["you"],"foldl, foldl'](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl%27)":["quite"],"foldl... since":["i"],"foldlStrict ins":["empty"],"foldlStrict internally,":["so"],"foldling it;":["like"],"foldr ((:)":[".",".","."],"foldr (M.insertWith":["(+)","(+)","(+)","(+)","(+)","(+)"],"foldr (\\x":["acc","acc","acc","acc"],"foldr (mapFB":["c","(:)","c","(:)"],"foldr are":["in"],"foldr consumers":["list"],"foldr here":["is"],"foldr in":["imperative"],"foldr instead":["of"],"foldr is":["great,","not","that"],"foldr isn't":["really"],"foldr only":["if"],"foldr overflows":["the","the","the","the","the"],"foldr to":["compute","build","select"],"foldr will":["have","create","immediately","build"],"foldr you":["may"],"foldr(f, acc,":["xs):"],"foldr, but":["map,","it"],"foldr, it's":["chere"],"foldr. Implementing":["something"],"foldr1 (\\x":["y"],"foldr` (and":["your"],"folds (`foldl'`).":["See"],"folds I've":["yet"],"folds again.":["I"],"folds are":["for","for","for","very"],"folds commonly":["used"],"folds even":["if"],"folds for":["this,","handling"],"folds happen":["to"],"folds if":["the","it"],"folds in":["the","a","Haskell:"],"folds instead":["of"],"folds is":["to"],"folds makes":["sense."],"folds over":["tuples"],"folds to":["use.","operate"],"folds\", \"only":["use"],"folds, I'd":["suggest"],"folds. I":["have"],"folds. Recovering":["from"],"folds: if":["the","the","the"],"folks get":["that"],"follow a":["very"],"follow if":["you"],"follow such":["as"],"follow the":["link","logic","exercises.","specifications","same"],"follow them":["as"],"follow those":["instructions"],"follow through":["the"],"follow when":["deciding"],"follow. Any":["map"],"follow. Flip":["tends"],"follow. There's":["a"],"follow. Why":["does"],"followed by":["cases","many","many","whitespace","'s')"],"followed in":["Haskell"],"followed the":["comments"],"follower of":["point"],"following 12-digit":["number"],"following C":["code:"],"following `wordsBy`":["needs"],"following a":["proper"],"following are":["equivalent"],"following constraint(s)":["to","to","to","to","to"],"following is":["infinite"],"following language":["pragma"],"following line":[":"],"following on":["Twitter"],"following previous":["feedback,"],"following rule":["of"],"following signature":["\u003cpre\u003eshow"],"following something":["I"],"following that":["if"],"following the":["instructions."],"following this":["logic"],"following trick":["can"],"following: `insert":["k1"],"following: insert":["k1","k1","k1","k1"],"follows the":["restriction","right"],"follows: `(f":["w1"],"fond of":["parseNumber'.","the"],"font (Menlo),":["it"],"font (Monaco),":["the"],"foo \"Whatever.\"":["[(isBlank,"],"foo =":["\"first"],"foo x":["="],"foo(int a)":["{"],"foo) .":["bar`"],"foo` or":["perhaps"],"foo`. You":["could"],"food for":["thought.","thought","thought."],"food-for-thought with":["all"],"fool the":["system?"],"footprint and":["first"],"footprint on":["the"],"for \"\"":["if"],"for \"Back":["to"],"for \"Chill.\"":["Specifically,"],"for \"fmap\"":["-"],"for \"instance":["Functor\""],"for \"more":["idiomatic\")."],"for \"resetName\"":["is"],"for '!',":["anyway?"],"for '['":["then"],"for 'if',":["'then',"],"for (Num":["[V.Vector"],"for (only)":["the"],"for (you":["only"],"for *DO*":["repeat"],"for 0":["does"],"for 0,":["1,"],"for 10":["and"],"for 10,":["then"],"for 11":["&amp;&amp;"],"for 15485863":["*"],"for 2":["spaces."],"for 64-square":["checkboard,"],"for :)":["The"],"for @dusty":["than"],"for @maureen":["'s"],"for ASCII":["inputs"],"for Applicative":["or","or"],"for Attoparsec,":["so"],"for Bool":["could","(specifically","to"],"for Bounded":["instances."],"for Char":["and","is","with","and"],"for Char,":["specifically"],"for DNA":["which","and"],"for Data.Array.":["The"],"for Data.Char":["the"],"for Data.Char,":["a"],"for Data.Composition,":["would"],"for Data.Map":["that"],"for Data.Map.Lazy)":["is"],"for Earth,":["and"],"for Elixir!":["Is"],"for Elixir/Clojure":["it's"],"for Emacs](https://github.com/haskell/haskell-mode).":["I"],"for False,":["so"],"for Foo":["bar,"],"for Functor's":["`fmap`"],"for Great":["Good\""],"for Haskell":["but","(robot-name"],"for Haskell's":["non-strict"],"for Haskell,":["just"],"for Haskell?":["I"],"for IO":["and"],"for IO).":["There"],"for Illogical":["as"],"for Int":["key"],"for Into":["indices","key."],"for Map":["keys,"],"for Map.":["Another"],"for Map?":["Note"],"for Maybe":["at"],"for Maybe,":["inner"],"for Monad.":["The"],"for O(1)":["lookups,"],"for Ordering,":["Integer,"],"for Python).":["The"],"for RNA":["and"],"for Robot":["since","and","instead"],"for Ruby,":["so"],"for School":["(and"],"for Shouts,":["but"],"for String":["when"],"for Sure":["and"],"for Teenth":["or"],"for Text,":["I'm"],"for True":["and"],"for Weekday,":["probably"],"for Z":["will"],"for [Data.String](http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-String.html)":["but"],"for []":["and"],"for [wordsBy](http://holumbus.fh-wedel.de/hayoo/hayoo.html?query=wordsBy).":[":/"],"for `(,)":["a","a`","a`","a`,","a`"],"for `(,)`":["in"],"for `(.)":["f"],"for `(.).(.)`,":["some"],"for `(Num":["(Either"],"for `(^)`":["is"],"for `(head":["."],"for `.:`":["would"],"for `Bearing`":["that"],"for `Char`":["to"],"for `Data.List.singleton`,":["yes"],"for `Data.Map.Strict`,":["you'll"],"for `Data.Vector`":["is"],"for `Foldable`":["in"],"for `Illogical`":["could"],"for `Last`":["just"],"for `Map.toAscList`":["(which"],"for `N`.":["Alternatively,"],"for `Nucleotide`":["appropriate","appropriate"],"for `Nucleotide`.":["Right"],"for `Show`":["instance"],"for `String":["-&gt;"],"for `String`":["yourself","it"],"for `Teenth`":["or"],"for `[Char]`,":["so","perhaps"],"for ```(a":["-&gt;"],"for ```True```/```False```.":["```filter```"],"for ```anagramsFor":["\"bob\""],"for ```anything```?":["Using"],"for ```shouting```":["function,"],"for ```toRNA```.":["And"],"for ```translateNucleotide```":["on"],"for `a`":["later"],"for `allSpace`,":["but"],"for `allergies":["253`,"],"for `and`":["though."],"for `bar':":["Patterns","Patterns"],"for `big`":["because"],"for `c":["=="],"for `case":["..."],"for `count`":["out","in","function."],"for `count`.":["Consider"],"for `cycle`,":["since"],"for `dnaNucleotides`":["and"],"for `elem`,":["you"],"for `enumFromThenTo":["from","i"],"for `enumFromThenTo`?":["`[from,"],"for `enumFromTo":["to"],"for `exceptional`.":["With"],"for `f":["$"],"for `fancyWords`":["to"],"for `filter":["isAlpha"],"for `fingerprint":["target`"],"for `first`":["and"],"for `foldl`,":["I"],"for `fours`":["and"],"for `generateResponse`.":["Also,"],"for `group`,":["`sort`,"],"for `hd`":["doesn't"],"for `incrementBalance`":["so"],"for `insertDefaults`":["though."],"for `insertWith":["(+)`","(+)`"],"for `instance":["Read"],"for `isAnagramOf`":["doesn't"],"for `isDifferentTo`":["entirely."],"for `isIgnoring`":["here,"],"for `isNothing`":["using"],"for `isQuestion`":["and"],"for `isQuestion`)":["`foldr`"],"for `isQuestion`).":["It"],"for `isQuestion`,":["which"],"for `isQuestion`;":["I"],"for `isShout`":["is"],"for `isYelling`.":["But"],"for `last`,":["so"],"for `len":["=="],"for `length":["cleaned`","x`"],"for `let`.":["When"],"for `lettersByScore`,":["a"],"for `liftM2`":["or"],"for `lookups`":["is"],"for `main':":["main","main"],"for `many`":["but"],"for `map":["toLower"],"for `mapFst`":["is"],"for `max":["100"],"for `messageFor`.":["In"],"for `minBound`":["is"],"for `n`,":["which"],"for `newX`":["variables"],"for `normalize":["x`."],"for `nucleotideCounts`":["to"],"for `nucleotideCounts`,":["I"],"for `null":["s`"],"for `null(chars)`":["etc."],"for `null`":["in"],"for `number`.":["The"],"for `numbers":["s`"],"for `preprocess`.":["I"],"for `prettyPrint`":["if"],"for `randomName`":["would"],"for `readMVar":["v`"],"for `readMVar`":["warns"],"for `replaceThymidine`":["is"],"for `responseFor`":["otherwise"],"for `responseFor`.":["Top-level"],"for `reverse`":["or"],"for `s'":["shadows","shadows","shadows"],"for `s`":["from","is"],"for `shouting`":["that"],"for `shouting`,":["`asking`,"],"for `show`":["and"],"for `silence":["statement`,"],"for `silence`":["and"],"for `silent`,":["but"],"for `sort":["la`."],"for `sorted`":["because","since"],"for `split5`.":["It's"],"for `splitEvery`.":["Alternatively"],"for `split`":["or"],"for `square`":["but"],"for `square`:":["`square"],"for `toRNA`,":["but"],"for `total`!":["HINT:"],"for `turnRight`":["and"],"for `turnRight`,":["`turnLeft`"],"for `unlines`":["here?"],"for `verse`":["so"],"for `when`":["either,"],"for `where`":["and"],"for `words":["simplified`."],"for `wordsBy`":["you"],"for `words`.":["A"],"for `worth`.":["You"],"for `x":["/="],"for `x'":["shadows"],"for `xs'":["shadows","shadows"],"for `yelling`,":["which"],"for a":["`where`","way","list","while","sorted","list","valid","more","further","function","function","seemingly","filter.","map","function","similar","second,","case","counter).","good","refresher","teenager","popular","few","`count`","large","mutable-vector","better","solution","great","broader","great","great","2-tuple,","board","negative","particular","subjectively","`,`","comment.","given","good","number","lot","beguinner","map","way","little","function","lookup","simpler","simple","faster","bit...","Map.","bit","great","good","lazy","single","simpler","function","binary","multiplication","robot","String.","function","value,","list","function","relatively","function","large","great","descending","pointfree","`do`","split","list","type","given","row","shorter","good","hint","specific","working","cleaner","list","few","tiny","Grade)."],"for a).":["text"],"for acceptance.":["Is"],"for accessing":["things"],"for actual":["functionality?"],"for actually":["solving"],"for adding":["integers"],"for aesthetic":["reasons,","reasons)."],"for ageOn":["is"],"for all":["top-level","top","this","suggestions,","String,","the","possible","possible","cases.","suggestions.","top-level","strings.","the","real","the","the","the","functions","finite","cases,","use-immediately-after","the","container","of","of","functions,","programming","numbers","the","reviews.","functions,"],"for alphabetic":["characters,"],"for ambiguity":["in"],"for an":["extra","empty","empty","operator","identifier","explicit","identity","example.","insignificant","empty","obfuscated","elegant","empty","inner","`-\u003e","exercise.","alternative:","extra","equilateral,","isosceles...etc,","answer"],"for anagrams":["is"],"for and":["add"],"for another":["non","time"],"for any":["f.","subsequent","purpose.","purpose","monad","top-level","top-level","of","of","output","choice","base","top-level","top-level","choice","specific","top-level","Integral,","top-level","positive","lists","specific","message:","valid","loops","Integer,","letter;","reason","`f`","of","Wednesday","subsequent","type,","inputs"],"for anything":["but","besides","top-level."],"for anything,":["perhaps"],"for applying":["a"],"for arbitrary":["String","data"],"for arithmetic,":["consider"],"for articulating":["why!"],"for awhile":["now"],"for bad":["input"],"for bases":["where"],"for bearing":["with"],"for being":["unsafe"],"for benchmarking":["by","in"],"for better":["solutions.","functions","performance,","solution"],"for bindings":["you"],"for bit":["shifting,"],"for boardString":["is"],"for bogus":["input"],"for bonus":["points.","points:"],"for both":["DNA","words","`isEmpty`","parts","`left","words?","`namePrefix`","and"],"for building":["a","a"],"for but":["missed"],"for capitalize":["is"],"for case":["as","before"],"for cases":["like","like","like"],"for catching":["that,"],"for characters":["you"],"for checking":["queen","that).","`[A..Z]`."],"for chess":["problems,"],"for choosing":["one"],"for clarity":["and","or","here."],"for clarity's":["sake"],"for classify?":["That"],"for clean":["type"],"for cleaning":["this"],"for code":["clarity.","I"],"for comes":["with"],"for common":["operators."],"for completeness'":["sake?"],"for composition":["and"],"for computing":["the"],"for conditionality":["-"],"for confirming!":["I'm"],"for consistency":["I"],"for consistency's":["sake"],"for converting":["to/from","to"],"for core":["snippets."],"for correct":["terms."],"for counters,":["since"],"for counting":["words.","than"],"for counting).":["Thanks!"],"for counting,":["because"],"for counting.":["For","It's"],"for counts":["and","or"],"for creating":["empty","empty"],"for data":["structures"],"for datatypes)":["and"],"for dealing":["with"],"for deforestation":["(foldr/build"],"for descriptive":["function"],"for detecting":["questions."],"for determining":["whether"],"for different":["reasons,","orders"],"for documentation":["reasons."],"for doing":["the","computations","the","this:"],"for e.g.":["\"c1rr0t\"..."],"for each":["char","element","nucleotide","condition,","value","count","nucleotide)","guard.","value","test","base.","operator","possible","clause","letter","clause","value","element.","case.","nucleotide.","element","digit","case.","\"instance\"","variable","nucleotide"],"for each,":["in"],"for easy":["comparison"],"for efficiency":["in"],"for efficiency,":["because"],"for efficiency:":["word'"],"for either":["type","silence","of"],"for empty":["strings","lists.","lists,","String"],"for error,":["per"],"for errors":["to"],"for errors,":["returning"],"for every":["element.","character","new","word.","`robotName`","language","other","letter.","letter?","letter","element","guard","call"],"for everything":["else.","else.","except"],"for example":["have","`liftA2","`over","Map","you","if","`mod`4","list","in"],"for example)":["is"],"for example).":["I"],"for example,":["`wordsBy","a","adding","`isQuestion","`newName","lies"],"for example.":["Also","Some","You","Here's"],"for example?":["So"],"for excluding":["the"],"for expansion":["that"],"for explaining":["Haskell's"],"for explicit":["recursion"],"for external":["communication"],"for f,":["and"],"for factors,":["ideally"],"for factors.":["This"],"for feedback,":["much"],"for feedback.":["I"],"for filter).":["Nothing"],"for filtering":["a"],"for finding":["functions"],"for first":["and","argument."],"for foldl":["function"],"for foldr":["is"],"for folds:":["if","if","if"],"for free":["by"],"for free,":["I.e.you"],"for free.":["`strip`","Shouldn't","With"],"for from":["module"],"for fun":[":p"],"for fun,":["can","you"],"for function":["calls,","equations."],"for function,":["`x`"],"for functionality.":["Hoogle"],"for functions":["with","is","(but","that","with"],"for further":["optimizations,"],"for fusion":["to","to"],"for future":["references:","readers:"],"for general":["techniques"],"for generating":["a","them."],"for giving":["my"],"for going":["the"],"for good":["reason)."],"for grades":["and"],"for grouping,":["not"],"for guards":["is"],"for handling":["error"],"for haskell.":["I"],"for having":["parentheses"],"for help":["there."],"for here":["since"],"for here.":["\"There"],"for here?":["You"],"for hints":["if"],"for how":["do","non-strict","Haskell's","Haskell's","to","to","complex"],"for identifiers":["rather"],"for if":["this"],"for impl":["now"],"for implementing":["`map`,","`sum`."],"for imports,":["although"],"for improvements":["I'm"],"for improvements?":["I'm"],"for improvine":["`add`:"],"for incoming":["events."],"for increased":["readability."],"for indetetion":["of"],"for inequality":["called"],"for infinite":["lists,"],"for inner":["functions"],"for input":["(no"],"for insertion,":["this"],"for inspecting":["the"],"for inspiration":["for"],"for instance,":["keeping"],"for instance.":["But","Sometimes"],"for interpreted":["code"],"for introducing":["me!)","maybe,"],"for invalid":["inputs."],"for is":["probably"],"for isAggressive,":["it's"],"for isAnagram,":["you"],"for isLetter":["&amp;&amp;"],"for isShouting":["would","though."],"for isShouting,":["perhaps"],"for isSilence":["`m"],"for isYell,":["and"],"for it":["to","from","to","to","[here][hp]),","`\u003c$\u003e`,","to","in","and","though,","to","to","to",":confounded:"],"for it)":["is"],"for it,":["extend","but","but","the","and"],"for it.":["Since","I"],"for just":["a","lowercase.","one","straight"],"for kind":["feedback"],"for knot":["tying"],"for large":["enough"],"for larger":["strings","numbers,"],"for lazy":["together"],"for leading":["me"],"for learning":["about","tasks","purposes."],"for left":["folds"],"for letters,":["unlike"],"for line":["#9:","14"],"for lines":["`31`"],"for list":["operations,"],"for lists":["is","only"],"for lists,":["`pure`"],"for literally":["any"],"for long":["input"],"for looking":["up","at","up"],"for loop":["without"],"for lower":["and"],"for making":["code","it"],"for many":["algorithms","tasks"],"for map":["work","work","here:","include","builders"],"for markdown":["quoting"],"for me":["to","...","to","to","now.","since","though","to",":P","so","to",":-)","using","to","there","to","if"],"for me).":["The"],"for me,":["so"],"for me.":["Thank","I","Could","Should"],"for me...":[":("],"for me:)":["and"],"for member":["and"],"for membership":["via"],"for merging":["two"],"for mine:":["[37c7b4f](https://github.com/bxt/exercism.io-exercises/commit/37c7b4fdc624b6731de890c42da5aad85a1bf174)?"],"for modern":["uses."],"for more":["details.","than","space","information","information","reading","information","than","experienced","readability","available"],"for most":["beginners,"],"for much":["else,"],"for multi-line":["string","comments."],"for multiline":["where"],"for multiple":["values","where","bindings"],"for mutating":["state."],"for my":["day","actual","next","understanding!","map,","solution,","understanding..","slacking","own"],"for n":["==","workers."],"for naming,":["I"],"for neighbors,":["my"],"for network":["protocols"],"for newtypes.":["The"],"for nitpicking!":["I'm"],"for nits":["before"],"for no":["real","reason.","real"],"for non":["printable","prime","prime"],"for non-ASCII":["input,"],"for non-alpha":["characters"],"for non-alphabetic":["characters."],"for non-appearing":["nucleotides,"],"for non-characters,":["anyway?"],"for non-constructive":["comment,"],"for non-empty":["input","strings"],"for non-matches":["you"],"for not":["a","mentioning","realizing","reading..."],"for note":["about"],"for novices.":["To"],"for now":["it","it","and","-"],"for now,":["I'll"],"for now.":["I","Thanks","I"],"for null":["first."],"for null,":["I"],"for numbers,":["since"],"for odd":["numbers"],"for one":["test","nucleotide,","of","that","or"],"for one-liners":["I"],"for only":["four","two"],"for operator":["precedence"],"for operators)":["and"],"for optimization.":["In"],"for optimizations":["in"],"for optimizations,":["like:"],"for organization.":["I"],"for other":["things,","possible","languages","input)","languages.","things),","compositions.","purposes"],"for our":["purpose."],"for overflow":["conditions."],"for parentheses":["in"],"for parentheses.":["In"],"for parentheses;":["they"],"for parenthesis":["on"],"for parity":["with"],"for parsing":["the"],"for pattern":["matching*","guards","matching"],"for people":["to"],"for performance":["when","or","compared"],"for performance,":["since"],"for performing":["these"],"for picking":["this"],"for point":["free","free"],"for point-free":["style."],"for pointing":["that","that","out","it","out","out","out","that"],"for positive":["numbers","integers."],"for practice,":["so"],"for predicate":["methods"],"for presence":["of"],"for prettyPrint":["were"],"for prime":["numbers?"],"for prime,":["however","then"],"for primes":["\u003e","\u003e","(trial"],"for problems":["you're"],"for producing":["results"],"for public":["functions","use."],"for purposes":["that"],"for pushing":["the"],"for qualified":["imports,","imports,","imports,","imports","map,","name,"],"for question,":["but"],"for questions,":["but"],"for quickly":["testing"],"for random":["characters"],"for re-used":["functions"],"for readability":["purpose,","instead","(also"],"for readability,":["but"],"for readability.":["Also"],"for reasons":["other"],"for records":["for"],"for recursing":["on"],"for reference":["for","you"],"for reference:":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/leap/example.hs"],"for reminding":["me"],"for removing":["punctuation"],"for results":["that"],"for return.":["I"],"for returning":["spine","spine","results"],"for reuse.":["If"],"for robustness":["and"],"for roll-your-own,":["but"],"for running":["the"],"for saidNothing":["rather"],"for sanitization,":["and"],"for sensible":["input,"],"for separating":["those"],"for several":["classes"],"for sharing":["or"],"for shouting":["would","would","using"],"for silence":["first,","will","first."],"for silence,":["though","because"],"for similar":["purposes."],"for similarly":["named"],"for simple":["access","types"],"for single":["counting"],"for situations":["when"],"for small":["inputs."],"for so":["long","long"],"for some":["reason.","reason.","reason","reason,","reason","very","of","more","inputs.","native","of","reason.","reason","reason.","reason","reason","inputs).","good","reason","hints","trailing","reason.","extra","reason","reason.","reason.","purpose.","reason."],"for something":["that","like","like","that","like","like"],"for sorted":["students."],"for spaces":["or"],"for spaces,":["etc,"],"for specific":["nucleotides)."],"for spine-strict":["values\".","values"],"for split":["and"],"for splitting":["input.","string","lists"],"for spotting":["redundant"],"for sqrt":["and"],"for stack":["overflow,","overflow)."],"for standard":["functions),"],"for start":["and"],"for steering":["me"],"for storing":["bytes"],"for strict":["bytestring","languages"],"for string":["substitution.","matrix,","```101ups000```"],"for strings":["that","then?"],"for style,":["some","most","public","most","it's"],"for style.":["Is"],"for succinctness,":["or"],"for such":["a","a","lightweight","problem.","a","a","a"],"for sufficiently":["large"],"for suggesting":["`chunksOf`."],"for sure":["what","a","until"],"for sure.":["i","But"],"for suspension":["creation"],"for synonym":["for"],"for taking":["the","the","the","time","time"],"for testing":["a","single","if"],"for that":["too.","reason,","grade","robot-name","exercise.","response.","in","predicate.","and","either","matter*)","either.",":)","matter","cutesy","matter,",";)","`(w,","initial",":)","extra","list","idea.","if","task","operation.","matter),","module.","is","operation,"],"for that,":["consider","although","if","I","which"],"for that.":["For","Complexitywise","And","I","I"],"for that?":["In"],"for the":["help.","detailed","filter","reasons","chance","hint","top-level","pointers!","tip!","pointers.","test","public","nudge.","valid","pairs,","record,","comments!","first","roman","pointers","reminder.","module.","sake","feedback!","syntax","`\":)","confusion!","`filter`","last","feedback","feedback!","pointer","`toRNA`","counters,","tip","other","exercise,","map","current","parsing,","suggestion","feedback.","tip.","feedback!","`Show`","intent","silent","silent","```null```","specific","feedback!","abstract","reader","feedback.","same","feedback.","ugly","feedback!","tip","type,","ordering","minimal","algorithm","top-level","implementation","feedback.","tip.","more","empty","module","tip!","suggestions.","feedback!","better","right","predicates,","guards","pointers!","bonus","link!","headsup.","same","`simulate`","pointer","next","critiques","detailed","test","parts","category.","given","best","feedback.","_isEmpty_","empty","top-level","tip","`c`","implementation","feedback!","clarification","tips,","search.","tips.","pointer","purposes","parentheses,","other,","predicates","suggestion.","implementation","full","comprehension","great","feedback.","nitpick!","rest,","tip","feedback;","same","feedback!","suggestions!","direction.","input","feedback","2","`wordsBy`","functions).","other","silence","use","newtype","sharks...","review.","empty","other","string","tests","suggestions","review,","Matrix","relation","definition","spec","reviews,","nits,","given","greater","feedback,","pointers","function","empty","pointer","info.","Array","eta-reduction","review!","great","`Maybe","reviews,","compiler","references","input","reviews,","hints","whole","feedback.","filter,","advice","tip.","great","normalized","feedback","insights,","helpful","review.","review","tips,","pointer.","tips","phone","sake","community","feedback.","sake","if","last","tip!","pointer","expression.","feedback.","largest","types.","heads","index,","whitespace","string","bonus","`unfoldr`","Control.Arrow","`(next","tips!","tip","index,","algorithm.","former.","catch.","then-case","compiler","difference?","feedback","tips.","nitpick.","function?","awesome","feedback!","delay","richer","detailed","optimization","tip!","inner","feedback","pointers,","anagram","simple","uncommon","unusual","feedback.","info!","function","Wall","definition","inputs!","indentation,","record","tips","`toAscList`","same","tops,","```fromEnum```","styling","feedback.","MVar","hint!","tip!","advice!","note","hint","pointers","note","most","same","link.","tips.","problem","type","helper","link.","suggestions!","smart","strict","tip!","subsequent","tip!","tip.","continuous","tips","case","type","comments!","link.","tips!","original","link.","case","reduced","implementation","`fromMaybe`","advices,","examples","explanation","`Robot`","two","formula,","main","pointer.","reader","tip","description","explanation.","next","pointer.","reminder.","hint","tip,","book","nucleotides","hint","rest,","same","tip","data","important","suggestions.","suggestions,","sake","work","advice.","cases","small-ish","version"],"for their":["particular"],"for them":["(it","since"],"for them.":["Seems"],"for these":["types","\"functions\"","exercises","higher-level","variables","implementations,","character","advice"],"for things":["like"],"for third":["value"],"for this":["exercise.","kind","exercise.","problem","kind","kind","exercise.","problem","task","purpose,","kind","purpose","task.","one","is","case","one","example","exercise.","problem.","case","problem.","exercise","task.","purpose.","purpose.","case.","exercise","exercise,","in","purpose,","is","exercise.","example,","kind","example.","site","use","is","exercise","kind","sort","purpose.","has","purpose.","is","is","exercise,","stuff.","is,","exercise","is","use","purpose","small","kind","kind","kind","purpose","kind","use","code.","usage),","usage).","is","kind","kind","use","is","iteration?","is","kind","exercise,","sort","one","a","code","kind","is","is","purpose,","is","exercise.","is","use","code)","problem.","particular","MVar.\"","problem","exercise.","exercise's","is","purpose","particular","problem,","exercise","problem.","task.","one","solution..not","particular","task!","little","one.","code.","kind","exercise.","one","application"],"for this,":["nice","you","and","but","I","Parsec","as","usually","try","it'll","although","but","since","since","it","I","where","from","but","but"],"for this.":["The","(.-.","The"],"for this?":["What's","Maybe"],"for those":["handy","modules,","already","weird","who"],"for thought":["to"],"for thought.":["Are"],"for time":["and"],"for top":["level,","level","level"],"for top-level":["functions","bindings.","bindings.","bindings.","functions"],"for transforming":["functions"],"for triagonal":["matrices)"],"for trying":["it."],"for two":["versions","reasons:"],"for two-argument":["functions"],"for type":["signatures"],"for typeclass":["instances"],"for uracil":["and","is"],"for use":["in","and"],"for using":["`foldl'`","`ByteString`s?","type","guards:","guards.","a","`aFun`","guards.","something","`[Char]`"],"for value":["of"],"for values":["and","which"],"for variable":["bindings","so"],"for variables":["that"],"for various":["ways"],"for verbs":["(such"],"for verse.":["It's"],"for version":["2"],"for ways":["to"],"for what":["it's","you","exercises","the"],"for what's":["going"],"for whatever":["reason."],"for when":["`null","to","I"],"for where":["I.e."],"for where,":["I"],"for which":["adds","`isSpace`"],"for white":["space."],"for working":["with","with"],"for writing":["\u003ccode\u003e[Char]\u003c/code\u003e","`shout`","`tally`,"],"for x":["in","in"],"for y":["so"],"for you":["(if","in","detailed",":)","(similarly","(with","because","so","to","in","with","in","as","without","in","(Integer"],"for you).":["Take"],"for you,":["because","here's","assuming","which","but","you","without"],"for you.":["I","The","In","If","The"],"for your":["text","suggestion,","`School`","\"chill","helpers","feedback.","module,","feedback.","great","constant","thoughts","matrix","help!","notice!","comment.","feedback!","comment,","feedback","map,","feedback;","code","comments.","continued","Robot","comments,","code:","module.","prompt","explanation","advice.","comments,","comment.","suggestion","comments.","help","time.","nucleotide-count"],"for, so":["letter"],"for, thanks!":["It's"],"for-loop, but":["intermediate"],"for. I":["didn't"],"for. It":["would"],"for. Thanks":["for"],"for? Oh":["good,"],"forall a.":["Num","Num"],"forall c":["f","f"],"forall f":["xs.","xs."],"forall f.":["foldr","foldr"],"force (drive":["acc"],"force `exercism`":["to"],"force `n`.":["The"],"force all":["of","of"],"force bearing":["and"],"force each":["part"],"force evaluation":["with"],"force into":["WHNF"],"force it":["all","will","with"],"force it's":["values,"],"force it,":["and"],"force it.":["Worse"],"force its":["accumulator,"],"force people":["to"],"force result":["thus"],"force the":["whole","computation","accumulator","value","values","accumulated","value,","values.","value.","values","value","argument","accumulator"],"force them":["to"],"force this":["into","with"],"force thunk":["only"],"force values":["as","so"],"force values,":["so"],"force you":["to","to"],"forced (but":["this"],"forced (potentially":["causing"],"forced (to":["weak-head"],"forced and":["will"],"forced anywhere,":["and"],"forced depending":["on"],"forced from":["that"],"forced implicitly":["by"],"forced implicitly.":["In"],"forced in":["primeFactors'","the"],"forced into":["WHNF","WHNF","weak-head"],"forced on":["demand,"],"forced the":["initial"],"forced to":["just","avoid"],"forced when":["it"],"forced, and":["it","when"],"forced, consider":["using"],"forced, it":["tries","tries","tries","tries","tries","has"],"forced, returning":["`f"],"forced, which":["forces"],"forced, without":["building"],"forced. Can":["you"],"forced. It":["translates"],"forced. The":["way"],"forced. This":["is","means","issue"],"forces `bstValue`":["to"],"forces `k`":["explicitly"],"forces accumulator,":["it"],"forces all":["list"],"forces entire":["list"],"forces it's":["value,","values","value"],"forces its":["values","values"],"forces list":["result"],"forces the":["values","accumulator","evaluation"],"forces values":["(not","to","so"],"forces values,":["not"],"forces your":["base"],"forcing accumulator":["to"],"forcing entire":["list"],"forcing me":["to"],"forcing mutable":["state?"],"forcing other":["modules"],"forcing the":["counts","accumulator,","implementation","export","values?","`_1`.","accumulator,","reader","accumulator"],"forcing values":["unless"],"forcing, so":["fusing"],"forever in":["an"],"forget a":["letter"],"forget about":["`last`?!","some"],"forget quickly":["if"],"forget that":["`.*\u003e`","for"],"forget the":["above","type"],"forget their":["precedence."],"forget to":["match","name","use"],"forget which":["of"],"forgetting about":["the","list"],"forgetting to":["be"],"forgiven that":["you"],"forgot about":["`isAlpha`!","that,","guards.","implicit","`seq`.","`seq`.","that","the","that","'rd'","it,","idea","the","that"],"forgot earlier)":["does"],"forgot it":["in"],"forgot that":["using","you"],"forgot this":["time."],"forgot to":["remove","remove","run","refactor","remove","think.","remove","put","eta","get","clamp","remove","add","delete"],"forgot, so":["thank"],"forgotten about":["it"],"forgotten how":["to"],"forgotten some":["Haskell"],"forkIO $":["do"],"form (WHNF).":["There's"],"form (and":["saves"],"form (due":["to","to"],"form (evaluated":["constructor"],"form (single":["character,"],"form 6k±1":["(along"],"form 6n+1":["or"],"form I":["should"],"form `2:[3,5..]`":["it"],"form `\\x":["-\u003e"],"form `n*7":["+"],"form as":["`anagramsFor","`sort"],"form by":["using"],"form for":["pattern"],"form if":["you","you"],"form in":["a","`total`.","the"],"form is":["basically"],"form like":["this:"],"form of":["6n+1","6n-1","lock","Robot"],"form solution":["to","(no","to","here","you","if","(no","to"],"form than":["this"],"form to":["raise"],"form using":["`.`"],"form you":["know"],"form) before":["inserting"],"form), so":["the"],"form). This":["is"],"form, as":["it"],"form, because":["both"],"form, but":["if"],"form, canonicalizing":["to"],"form, hoping":["for","for"],"form, it":["can't","doesn't"],"form, or":["utilize"],"form, so":["you"],"form, unless":["you"],"form. For":["example,"],"form. It":["is"],"form. The":["value"],"formal comp-sci":["studies;"],"format and":["common"],"format might":["look"],"format where":["works"],"format, but":["for"],"format. E.g.":["\u003cpre\u003enucleotideCounts"],"formats and":["parse"],"formatting code":["might"],"formatting for":["guards"],"formatting of":["that,"],"formatting to":["be"],"formatting. The":["`where`"],"formed by":["a"],"former can":["take"],"former expression":["even"],"former is":["somewhat","to"],"former it":["would"],"former just":["offer"],"former uses":["one","constant"],"former way,":["which"],"forms (with":["and"],"forms are":["described"],"forms can":["use"],"formula works":["only"],"formula, and":["pretty"],"formulas to":["accomplish"],"formulas with":["both"],"formulate it":["without"],"formulation might":["be"],"formulation of":["the"],"formulation using":["foldl'"],"formuulated the":["other"],"forth between":["using"],"forth on":["that."],"forth would":["dwarf"],"forth. As":["you"],"forth. Instead":["of"],"fortunately I":["noticed"],"forward to":["see","learning"],"forward. Thanks,":["@alec."],"found 'isSpace'":["in"],"found 17":["outliers"],"found 2":["outliers"],"found 3":["outliers"],"found Prelude's":["`fromEnum`"],"found [this](http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html)":["quite","to"],"found `concat":["[bottles"],"found `insertWith`":["in"],"found `uncurry`,":["it"],"found a":["function","bug","builtin","perfectly"],"found an":["acceptable"],"found and":["is"],"found another":["(I"],"found elements":["out."],"found for":["explaining"],"found incredibly":["difficult"],"found it":["semantically","a","slightly","a","when","unsolvable,","was"],"found more":["readable."],"found nearest":["digit,"],"found no":["way","way"],"found one":["yet."],"found only":["Data.Text's"],"found out":["that"],"found primes":["as"],"found so":["far"],"found space":["characters,"],"found stop":["condition.","condition."],"found that":["my","book","explains"],"found the":["`replace`","same.","\"falling","same","answer.","wiki","naming"],"found this":["to","useful,","(http://stackoverflow.com/questions/3728709/haskell-pattern-matching-how-to-use-constants-variable)","section","one","to","article"],"found to":["be","learn","restate"],"found toAscList":["before"],"found, can":["you"],"found. It":["is"],"four \"bottle(s)\"":["hard-coded"],"four chapters":["of"],"four different":["heuristics."],"four functions":["are"],"four guards?":["What"],"four nucleotides":["and"],"four options,":["`ceiling,"],"four passes":["over","over"],"four possible":["results"],"four spaces.":["[This"],"four squares,":["`2^0"],"four times":["(ignoring","when","an","if"],"four times,":["once"],"four times.":["If","It"],"four, but":["this"],"four. And":["then"],"fours are":["just"],"fraction of":["second"],"fractional part":["is"],"fractional part,":["negatives"],"fractions of":["a"],"fragile to":["me"],"fragile. And":["the"],"fragility –":["the"],"fragmentation (not":["a"],"fragmentation. This":["is"],"freaks me":["out."],"free Haskell":["book"],"free I'll":["poke"],"free and":["there"],"free at":["the"],"free by":["using"],"free dead":["data"],"free form":["by","if"],"free form,":["but"],"free form.":["It"],"free helps":["you"],"free is":["weird"],"free like":["this:"],"free makes":["it"],"free now,":["but"],"free online":["course"],"free style":["as","with","I","than","is","then","`swapConcat"],"free style,":["that","basically","but","you"],"free style.":["Here's","the","This"],"free to":["lookup","submit","push","change","comment.","do,","submit","improve","read","push","ask","ask","use","asks","ask"],"free using":["`.`"],"free version":["would","is"],"free, I'm":["not"],"free, I.e.you":["don't"],"free, at":["least"],"free. I'm":["not"],"free. It":["still"],"free. Shouldn't":["`sort"],"free. With":["records"],"free. `strip`":["for"],"free. i'd":["really"],"freeing dead":["data,"],"frequencies .":["words"],"frequencies function":["is"],"frequencies, but":["the"],"frequencies. For":["instance,"],"frequency Map.":["Due"],"frequency map":["and"],"frequency maps":["for"],"frequency no":["longer"],"frequency would":["be"],"frequencyTable 'M.union'":["baseTable"],"frequencyTable =":["M.fromListWith"],"frequently leave":["the"],"friend you":["may"],"friends, but":["that's"],"friends. I":["think"],"fro. I'm":["probably"],"from #2":["with"],"from (from":["-"],"from -":["1","1","1","1","1"],"from 3":["lines"],"from 30":["lines"],"from \u003cvalue\u003e":["and"],"from =":["takeWhile"],"from @camden?":[":-)"],"from Bob":["anyway."],"from Bob,":["as"],"from Bool":["to"],"from Clojure":["(where"],"from Clojure,":["which"],"from Clojure.":["Most"],"from Control.Applicative":["and","instead"],"from Control.Arrow":["to"],"from Control.Arrow,":["or"],"from Control.Arrow.":["Code"],"from Control.Arrows":["and"],"from Control.Concurrent":["to"],"from Control.Monad":["could","instead","or","to"],"from Control.Monad,":["it"],"from Control.Monad.":["However,"],"from Control.Monad.Fix":["or"],"from DNA,":["so"],"from Data.Bits":["and","to","instead"],"from Data.Char":["to","but","to","composed","is","with","instead","instead","to","rather"],"from Data.Char).":["This","To"],"from Data.Char,":["but"],"from Data.Char.":["I","Nice","I'd","Note"],"from Data.Function.":["In"],"from Data.Functor":["or","(or"],"from Data.List":["is","*and*","used","may","would","instead","it","instead","would","would","instead.","because","to","instead","(and","in","or","instead.","instead","rather","instead","and","or","instead"],"from Data.List)":["must"],"from Data.List),":["or"],"from Data.List,":["but","or","which","which","or","which","but","it's","which","or"],"from Data.List.":["There","Alternatively,","Even","You'd","The","The"],"from Data.List.Split":["rather","rather","(hint:","could","for","and","is","to","(which","(which","module","instead","module","that"],"from Data.List.Split,":["which","but"],"from Data.List.Split.":["The","`isAlphaNum"],"from Data.Map":["since","and","fixes","for","to","or","(but","or"],"from Data.Map.Strict":["(which","fixes","instead","instead.","instead.","instead","instead","(same","instead,","instead.","instead,","instead.","which","instead","instead.","because","instead.","instead.","will","instead)"],"from Data.Map.Strict),":["which"],"from Data.Map.Strict,":["it's"],"from Data.Map.Strict.":["It's","Also,","The"],"from Data.Maybe.":["I'm"],"from Data.Monoid":["(which"],"from Data.Text,":["or"],"from Enum":["and"],"from Erlang":["I"],"from Exercism's":["github"],"from Foldable,":["here's"],"from Haskell":["and"],"from IORef":["and"],"from Map":["to"],"from Monad":["to"],"from MonadPlus,":["I.e."],"from Numeric.":["Using"],"from Parallel":["and"],"from Prelude":["instead","and","to"],"from Prelude.":["There's","There","`isSeparator`,"],"from README":["file."],"from Ruby":["when"],"from Ruby,":["so"],"from SImon":["Marlow's"],"from SimplePrimes.hs":["in"],"from Text.Printf":["or","could"],"from [@omer's](http://exercism.io/kimhyunkang/haskell/phone-number)":["version"],"from [Data.List][1].":["I'd"],"from [String]":["to"],"from `(f":["a"],"from `Control.Applicative`":["to"],"from `Control.Arrow`.":["The"],"from `Data,Char`.":["Also,"],"from `Data.Char`.":["Also,"],"from `Data.Function`":["to"],"from `Data.List.Split`":["instead","instead","in","in"],"from `Data.List.Split`,":["this","which","which"],"from `Data.List.Split`.":["This","Also,"],"from `Data.List.Split`:":["`wordsBy`,"],"from `Data.List`":["could","eg","is","is","that's"],"from `Data.List`,":["as"],"from `Data.List`?":["Sorry"],"from `Data.Map.Lazy`":["are"],"from `Data.Map.Strict`.":["I"],"from `Data.Map`":["instead","only...","was"],"from `Data.Map`.":["You"],"from `Data.String.Utils@maverick`":["=)"],"from `Data.String.Utils`":["and"],"from `Inquiry":["-\u003e"],"from `O(log":["gradesCount)`"],"from `Response`":["to"],"from `Text`":["for"],"from ```Data.List.Split```.":["Doesn't"],"from ```Data.List```":["will"],"from ```Data.Map```":["to"],"from ```Data.char```,":["IMHO"],"from `alter`":["to"],"from `count`.":["I've"],"from `do`":["notation"],"from `emptyMap`":["to"],"from `equivalent`,":["you"],"from `equivalent`?":["Technically,"],"from `fromList*`":["family."],"from `isSilence`,":["since"],"from `mapM":["f`"],"from `map`":["to","to"],"from `minBound":["::"],"from `responseFor`":["in"],"from `romans`":["(in"],"from `toUpper`":["to"],"from `wordCount":["="],"from `x`":["in"],"from a":["string","Data.Map","list","data","module","module,","length","readability","quick","use","use","use","use","string","module,","suitable","list","common","list","class.","module,","boolean","list.","discussion","space","`UTCTime`","'non-standard'","list","module","module","book","module,","strictness","string","module.","module","use","lisp.","use","few","dictionary.","Java/C#"],"from abandoning":["`MVar`"],"from academic":["courses"],"from additional":["checks?"],"from all":["three","over"],"from also":["being"],"from an":["implementation","O(n^2)","error","error","MVar","outer","O(n^2)","expert"],"from and":["to"],"from any":["other"],"from anything":["else,","like"],"from base":["and"],"from base?":["It"],"from bash.":[":)"],"from before,":["is"],"from beginning":["without"],"from being":["its","tail"],"from both":["end,","sides","sides)","sides","sides","sides."],"from building":["up"],"from cabal?":["It's"],"from changes":["to"],"from character":["to"],"from cluttering":["your"],"from code":["repetition,"],"from concurrency":["and"],"from consideration":["it"],"from constant":["2"],"from constructing":["their","the"],"from context.":["If"],"from count":["function,"],"from data.list":["will"],"from dealing":["with"],"from default":["repositories"],"from display":["in"],"from document":["[Data.Map](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html),"],"from each":["count.","of"],"from either,":["so"],"from end":["(in"],"from exercism":["for"],"from factors":["and"],"from filter":["to"],"from first":["principles,"],"from function":["bindings,"],"from function,":["this"],"from further":["consideration."],"from fusing":["(at"],"from greatest":["to"],"from hanging":["out"],"from having":["to","that","to"],"from here":["is"],"from history,":["hehe)."],"from hlint":["and"],"from how":["to"],"from http://www.haskell.org/haskellwiki/Stack_overflow":["is","is","is"],"from https://www.haskell.org/haskellwiki/Fold.":["Hopefully"],"from imperative":["languages:)"],"from it's":["arguments."],"from its":["name."],"from learn":["you"],"from least":["significant"],"from left":["to","to","to","to"],"from left-to-right,":["stops"],"from letters":["to/from"],"from list":["by"],"from listsplit":["package"],"from local":["variable","variable","variable"],"from lookup":["performance"],"from lowest":["to"],"from me":["a",":-)"],"from me,":["maybe"],"from me.":["However,"],"from memory,":["half"],"from module":["are","`Data.List.Split`,"],"from modules":["and/or"],"from most":["of","specific","other"],"from moving":["onto"],"from much":["rewrites"],"from multiple":["threads.","threads/processes"],"from my":["modules,","past","Python","initial"],"from not":["having"],"from number":["of"],"from old":["name"],"from one":["of","weekday"],"from other":["modules","modules","modules,","languages","languages","modules"],"from parallelism,":["if"],"from pattern":["matching"],"from phone":["and","so"],"from plain":["text"],"from pointfree":["style."],"from previous":["version.","iteration","attempt."],"from random":["things"],"from re-sorting":["the"],"from reading":["about"],"from receiving":["comments"],"from responseFor.":["This"],"from right":["to","or","to","to"],"from rightmost":["digit"],"from scratch,":["but"],"from scratch.":["I'm"],"from similar":["problems"],"from smallest":["to"],"from strict":["package","package."],"from strings":["to"],"from such":["expressions."],"from tampering":["outside"],"from that":["module","map.","than","function","module."],"from that,":["great","very"],"from the":["module","module","module","top","where","tests","last","use","Clojure","module","where","where","number.","list","start).","first","guard","outer","display","Monad","module,","*then*,","`Text`","world","module","leftmost","chapter:","map,","\"How","same","sci-fi","helper","general","`nucleotideCounts`","inside","structure","module.","same","module","module","lambda","lambda","input","first","implementation","`Data.List.Split`","last","ground","first","module","data","module,","module","Map,","previous","`Control.Concurrent.MVar`","usual","`split`","equation.","example","[wiki](http://www.haskell.org/haskellwiki/Prime_numbers#Sieve_of_Eratosthenes).","function's","end","right","inside","begging","left","context.","equation,","function.","real","original","tests","tests","first","right","`Data.Sequence`","first","recursive","literal","previous","value,","README,","function","hard","other"],"from their":["definitions."],"from there":["is"],"from there,":["is","so"],"from there.":["These","All"],"from these":["[scoring"],"from this":["a","module,","code;","exercise"],"from thread":["B","A."],"from time":["to"],"from top":["to","to"],"from totally":["different"],"from two":["different"],"from typing":["are"],"from unordered-containers":["if"],"from using":["`fromListWith`","some"],"from various":["scripts,"],"from version":["1"],"from what":["I","I","I've"],"from what's":["considered"],"from when":["I","I","the"],"from which":["I"],"from word-count":["to"],"from words\".":["It"],"from words,":["you"],"from writing":["`==`"],"from you.":[";P"],"from your":["code.","list","`Control.Monad`","output","module,","module,","module.","module,","function","explanation","one"],"from zero.":["If"],"from, it":["seems"],"from-1 ..":["to]`,","to]`"],"from. If":["`transcribe`"],"from. It":["might"],"fromBool ::":["Num"],"fromBool False":["="],"fromBool True":["="],"fromBool in":["the"],"fromChar 'U'":["::"],"fromDNA n":["="],"fromEnum $":["zipWith"],"fromEnum (a":["/=","/="],"fromEnum (a/=b))":["as"],"fromEnum (x":["=="],"fromEnum True":["=="],"fromEnum and":["sum.","sum","toEnum,","toEnum"],"fromEnum as":["a"],"fromEnum function":["."],"fromEnum into":["implementing"],"fromEnum or":["toEnum"],"fromEnum scheduleEnum":["*"],"fromEnum) .)":["."],"fromEnum) too,":["though"],"fromEnum)) (+)`":["I"],"fromEnum, then":["no"],"fromEnum/toEnum rather":["than"],"fromEnum` later":["one"],"fromEnum`. I":["can"],"fromGregorian 2014":["2"],"fromGregorian year":["month","month"],"fromIntegral $":["length"],"fromIntegral (complement":["(0::Int64))`"],"fromJust ((guard":["False"],"fromJust over":["fromMaybe"],"fromJust, but":["it's"],"fromList $":["map","zip","zip"],"fromList (x:xs)":["="],"fromList ::":["Ord","Ord","Ord"],"fromList =":["foldl'"],"fromList [":["(\"foo\",","(\"foo\","],"fromList [(\"foobar\",":["1)]`."],"fromList [(3,":["\"3ab\"),"],"fromList [(A,":["0),"],"fromList [(letter,":["score)"],"fromList [[\"this":["one\",\"one\"],","one\","],"fromList []":["="],"fromList and":["you'd"],"fromList is":["redundant."],"fromListWith (+)":[".",".",".",".","."],"fromListWith (+),":["so"],"fromListWith (+).":["The"],"fromListWith ::":["Ord"],"fromListWith call":["with"],"fromListWith early":["on"],"fromListWith f":["xs"],"fromListWith for":["the"],"fromListWith from":["Data.Map.Strict,"],"fromListWith here.":["As"],"fromListWith not":["being"],"fromListWith or":["foldl'","foldl'","foldl'","foldl'","foldl'"],"fromListWith solution":["then"],"fromListWith sounds":["awesomely"],"fromListWith that":["was"],"fromListWith uses":["foldlStrict"],"fromListWith version":["look"],"fromListWith which":["will"],"fromListWith would":["also"],"fromListWith)` (the":["Map"],"fromListWith, I":["guess"],"fromListWith, which":["does"],"fromListWith. It's":["a"],"fromListWith. fromListWith":["uses"],"fromListWith? Also,":["could"],"fromListWith? Might":["be"],"fromListWith? No":["sorting"],"fromListWithKey (\\_":["x"],"fromListWithKey ::":["Ord"],"fromListWithKey f":["[(5,\"a\"),","[]","xs"],"fromMaybe Statement":["a"],"fromMaybe but":["but"],"fromString doesn't":["appear"],"from] is":["a"],"from]` is":["very","sugar"],"front cost":["due"],"front of":["the","the"],"front. For":["added"],"frowned upon.":["The"],"fruits for":["optimizations,"],"frustrating exercise,":["but"],"fst) map":["(normalize"],"fst) xs":["```"],"fuction in":["prelude."],"fugly, but":["here"],"fulfil isLower":["either..."],"fulfil isUpper,":["but"],"full 'power'":["of"],"full (think":["`Maybe`)"],"full I.e.":["`as"],"full MVar.":["Certainly"],"full generation":["each"],"full list":["evaluation","will"],"full map":["generation","that"],"full mvar":["and"],"full names":["(with"],"full or":["empty"],"full prime":["factors"],"full rules":["there"],"full strictness":["that"],"full style":["everything"],"full table":["would"],"full traversal":["of"],"full tree,":["AFAIR"],"full while":["returning"],"full-size slices":["you"],"full. Consider":["an"],"fully evaluate":["the","the","Robot"],"fully evaluated":["Int","only","and","in"],"fully evaluating":["the"],"fully explain":["this"],"fully get":["there"],"fully grasp":["that."],"fully grok":["that"],"fully in":["the"],"fully lowercased":["before"],"fully point":["free"],"fully point-free":["solution,","but"],"fully qualified":["because"],"fully re-understanding":["the"],"fully specified":["26"],"fully strict":["simulation"],"fully strict.":["I"],"fully understand":["them.","how","the","then","the","strictness.","what"],"fun :p":["Maybe"],"fun I":["suppose"],"fun consider":["that"],"fun could":["be"],"fun extra":["thing,"],"fun implementation,":["but"],"fun one":["to"],"fun out":["of","of"],"fun though":[":-)"],"fun to":["do.","play","write."],"fun with":["`any`.","the"],"fun would":["that"],"fun, and":["is"],"fun, can":["you"],"fun, you":["can"],"func` line":["while"],"function \"crash-unsafe\"":["since"],"function \"infix\",":["and"],"function (although":["you"],"function (apart":["from"],"function (canonicalize),":["and"],"function (crashes":["with"],"function (e.g.":["given"],"function (failing":["on"],"function (http://exercism.io/submissions/523d5d6d603aa67ff90000ff)":["but"],"function (ie:":["map)"],"function (instead":["of"],"function (maybe":["with"],"function (normalize":["is"],"function (once":["started"],"function (only":["works"],"function (the":["notable"],"function -":["not","is","everything"],"function I":["don't","would","defined","had","was","would"],"function O(n^2)":["instead"],"function _all_":["for"],"function `(a":["-\u003e"],"function `::":["Planet"],"function `Eq":["a"],"function `Map.fromListWith`":["to"],"function ```isAnagramProcessed```":["can"],"function ```pure```":["it"],"function ```unlines```":["and"],"function `a":[".^"],"function `all'":["does"],"function `canonicalize`,":["and"],"function `drive":["r`"],"function `f`":["that","and"],"function `fst`.":["You"],"function `insertWith'`.":["Will"],"function `insertWith`":["or"],"function `isLetter`":["which"],"function `isPermutationOf`,":["I"],"function `isSpace`":["from","in"],"function `map":["::"],"function `name":["::"],"function `parts`.":["It's"],"function `slices`":["that"],"function `sum`":["from"],"function `tails`":["may"],"function `toString`":["is"],"function `to`":["that"],"function `wordsBy`":["from","from","that"],"function `wordsBy`,":["for"],"function `words`":["from"],"function a":["whole","lot"],"function accumulate":[":anguished:"],"function already":["does","implemented"],"function always":["have"],"function analogous":["to"],"function and":["I","ships","explicitly","using","it's","parameter","whether","I'm","it's","argument","argument","its","its","I","its","apply","you","concatenate"],"function application":["is","is","with","is","always","is","is","always","always","is","is","always","always","in","is","always","has","in","is","has","has","is","in","has","has","until","has","is","has","has","has","has","always","has","has","has","has","is","has","inside","`($)`","has","is","is"],"function application,":["so","I","gotta","you"],"function application.":["The","This"],"function applications":["(which"],"function argument":["and"],"function as":["well","it","being","```let","it","it"],"function at":["all).","all","all.","the","all."],"function be":["called"],"function being":["mapped"],"function between":["these."],"function bindings,":["the"],"function but":["I","how","could","that's","this","refactored","indicate","a"],"function by":["putting","skipping","introducing"],"function call":["is","should"],"function callable":["from"],"function called":["`lookup`","transpose"],"function calls":["have","are","have","`isQuestion"],"function calls,":["so"],"function calls:":["`howMany(n)`"],"function can":["be","make"],"function combination":["using"],"function combined":["with"],"function composed":["with"],"function composition":["in","and","you","will","isn't","to"],"function composition,":["that's"],"function composition.":["I"],"function composition?":["I"],"function compositions,":["then"],"function compositions.":["I"],"function correctly?":["eteprem","eteprem"],"function could":["simply","be","create","be"],"function covers":["a"],"function declaration":["(possibly","like"],"function declaration,":["i.e.","and"],"function declarations":["`isQuestion"],"function declared":["externally,"],"function defined":["inside","in","using","as","in","in"],"function definition":["with","on"],"function definition)":["to"],"function definitions":["and","and","are"],"function does":["(ie:","not","not"],"function does,":["so","but"],"function does.":["I"],"function does/acts":["on."],"function doesn't":["need","need"],"function each":["time"],"function easier":["to","to"],"function even":["used?"],"function expression,":["e.g."],"function feels":["rather"],"function for":["something","maps.","`(head","just","single","generating","aesthetic","this","this","creating","each","splitting","creating","free.","parsing","```toRNA```."],"function forces":["values,"],"function from":["`Data.String.Utils@maverick`","`Data.Char`.","Data.Char).","`Data.String.Utils`","the","`Data.List`","`(f","Data.Map","`toUpper`","Data.Char.","most","the","Data.Char","Data.Bits","it's","Data.List.Split,","[String]","Data.List.Split","Data.List.Split","Data.List.Split","MonadPlus,","`Data.List`","Data.Char","Data.List.Split).","Prelude"],"function got":["smaller"],"function guards":["(with","approach"],"function has":["been","the","guards"],"function head":["to"],"function heads":["for"],"function here":["is","would"],"function here,":["it's"],"function highlight":["just"],"function i.e.":["`split"],"function if":["it","it"],"function import,":["like"],"function in":["prelude","`Data.Map`","a","`all","`Data.List`","Data.List","question","the","Data.List.Utils","Data.List","Data.Char","Data.List","Network.CGI.Protocol.","equivalent,","Prelude","a","terms","particular.","Data.Map","Prelude.","the","`Data.List`","Data.List.Split","case","a","Data.Char","Data.Char","Data.Bits","Prelude","a","iteration","the","Data.Bits","a","a","the","a","this","`where`","Prelude","Data.List","`Data.Char`,","GHCI).","prefix","reverse","a","the","`Data.List`","Data.Maybe","there"],"function inside":["the","where"],"function instead":["of","of","of","of","of","of","of"],"function into":["toRNA?","pass"],"function is":["coming","really","a","not","safe","customary,","pretty","to","a","a","made","not","not","exposed","a","inside","thread-safe","not","not","not","equivalent","called","actually","expecting","pretty","deprecated","understood","not","called.","called","pair","just","not","not","O(","atomic","not","already","very","not","there.","still","more"],"function isn't":["restricted"],"function it":["should","would","can"],"function its":["arguments"],"function itself":["looks"],"function itself.":["I"],"function just":["now,"],"function like":["`toRNA'`","that,","this:","`null`,","this.","this,","`map`"],"function look":["okay?"],"function looks":["good","weird,","like","at"],"function makes":["things"],"function mentions":["in"],"function might":["be"],"function much":["more"],"function name":["in","doesn't","in","that"],"function name,":["`not(null","type"],"function name.":["Note"],"function named":["`Data.Time.Calendar.isLeapYear`.","`isShouting`","`intercalate`"],"function names":["with","are","but","can"],"function names,":["that"],"function nonidentical":["helps.."],"function not":["to"],"function now.":["is"],"function of":["that","one","one","the","one","two","`CharPattern","type","`String"],"function on":["that.","the","the","Strings","input","my","lines"],"function or":["two","two."],"function outputs":["something"],"function over":["a","a"],"function parameter":["names"],"function parameters":["in"],"function point-free,":["but"],"function rather":["than","a"],"function result":["that"],"function right":["after"],"function runs":["in"],"function seems":["a"],"function separate":["from"],"function sequence":["from"],"function should":["fail","make"],"function signature":["and","on","should"],"function signatures":["more"],"function signatures.":["I"],"function since":["they're"],"function so":["`check`","you","it"],"function solved":["the"],"function such":["that"],"function take":["the"],"function than":["to"],"function that":["behaves","returns","you","you","doesn't","you","given","specifies","given","would","works","does","already","is","you","returns","pattern","does","does","you","might","has","takes","takes","mutates","would","doesn't","should","leverages","return","couldn't","you","abstracts","has","takes","gets","you","you","would","you","does","you","does","does","matches,","encapsulates","would","increases","can","does","takes","takes","could","it's","returns","does","does","would","you","turns","requires","seemed","I","only","you","would","could","being","can","returns","will","you","does","you","do","followes","uses","does","do","takes","either","allow","is","you","combines"],"function that,":["given"],"function the":["expression","fact"],"function there's":["probably"],"function there.":["I"],"function to":["operate","use","get","use","`toRNA","return","use","parse","retrieve","be","use","each","hide","apply","call.","get","make","replace","handle","do","try","use,","do","take","satisfy","consider","make","do","combine","```elem```.","be","use","them","function,","write","do","get","[avoid","split"],"function type":["signatures","sections)","signatures"],"function used,":["just"],"function useful":["for","to","here.","to"],"function usefull":["to"],"function uselfull":["to"],"function uses":["IO"],"function using":["`zipWith`,"],"function was":["being","called"],"function where":["they"],"function which":["returns","means","will","takes","you'll"],"function will":["zip","evaluate","be","be","return"],"function with":["guards","type","some","-1","`not`.","a","a","the","two"],"function without":["it,","any","checking"],"function work":["with"],"function works":["and"],"function would":["often","only","be","simply","end","give","parse","get"],"function yet?":["http://bit.ly/1gRgORl"],"function you":["want","can","pass"],"function\" because":["`(,)"],"function' i.e.":["if"],"function's name":["and"],"function) if":["you"],"function) is":["used."],"function). Map":["should"],"function). Note":["that"],"function, I":["think","didn't","think"],"function, `str`.":["They"],"function, `x`":["for"],"function, also":["you"],"function, and":["call","to","use","avoid","this","to","you","the"],"function, as":["others","tests","you"],"function, but":["looks","the","it","I","that","especially","it","this","it"],"function, i.e.":["change"],"function, instead":["of"],"function, it":["shouldn't","would","seems","looks"],"function, letters.":["When"],"function, maybe":["that'd"],"function, or":["`fromListWith`","better"],"function, rather":["than","than"],"function, since":["it's","`potential`"],"function, so":["added","I'm","that","isQuestion","that's","I","the"],"function, that":["takes"],"function, the":["radix"],"function, then":["the","the","there's"],"function, this":["means"],"function, though":["-"],"function, to":["keep"],"function, took":["me"],"function, which":["has","was"],"function, with":["the"],"function, you":["have","could","have","can","can","could","could","have"],"function. (And":["you"],"function. (You":["can't"],"function. Also":["I'd"],"function. Also,":["some"],"function. As":["far"],"function. But":["now"],"function. Consider":["defining","following"],"function. Do":["I"],"function. Even":["if"],"function. For":["instance,"],"function. Funny":["how"],"function. Guess":["that"],"function. Have":["you"],"function. Here's":["no"],"function. However,":["I"],"function. I":["suggest","would","wonder","suppose"],"function. If":["you","you"],"function. Initially":["I"],"function. Instead":["of"],"function. Is":["there","that","there"],"function. It":["could","is"],"function. It's":["also"],"function. Maybe":["you"],"function. Much":["happier"],"function. One":["thing"],"function. Or":["just"],"function. Possibly":["cause"],"function. See":["also"],"function. So,":["in"],"function. Still":["thinking"],"function. That":["way"],"function. The":["actual","`cleanNumber`","recursive"],"function. There":["was"],"function. There's":["a"],"function. They":["are"],"function. Typical":["usage"],"function. Under":["cover"],"function. What":["happens"],"function. You":["wouldn't","want","can"],"function. `unwords`":["may"],"function. it":["should"],"function... well":["you're"],"function1, functionN)":["where`"],"function; it's":["all"],"function? I":["feel"],"function? It's":["more"],"function? do":["I"],"functional and":["the"],"functional approach":["to"],"functional at":["all"],"functional data":["structure"],"functional decomposition:":["perhaps"],"functional language":["since"],"functional language.":["Changing"],"functional programming":["language","and"],"functional style,":["and"],"functional values":[":)"],"functional way":["..."],"functional\" to":["me."],"functionality already":["provided"],"functionality and":["data","make"],"functionality for":["this","this","Map?"],"functionality from":["Data.List.Split","base?","Prelude","Data.Char","Data.Char.","a"],"functionality in":["normalize","Text.Regex,","different","Data.List.Split"],"functionality instead":["on"],"functionality is":["currently","lazy,","value-lazy."],"functionality makes":["it"],"functionality of":["messageType","those"],"functionality present":["in","in"],"functionality rather":["than"],"functionality that":["gets","conflicts","you","might"],"functionality that's":["present"],"functionality to":["what","make","accomplish","accomplish"],"functionality using":["only"],"functionality where":["you"],"functionality you":["have","need,"],"functionality, as":["it"],"functionality, its":["optimized"],"functionality, when":["you"],"functionality. Hoogle":["can"],"functionality. If":["I"],"functionality. So":["using"],"functionality. You":["could"],"functionality? since":["it"],"functionallity for":["splitting"],"functionally (ha..get":["it?)"],"functionally identical":["if"],"functionally same":["result"],"functions \"tallyListItems\"":["and"],"functions (`map`,":["`concatMap`"],"functions (a":["partial"],"functions (and":["really","you"],"functions (but":["this"],"functions (by":["composing"],"functions (e.g.":["responseFor)","`fromListWith`","`(\"M\"++)`"],"functions (exported":["or"],"functions (have":["a"],"functions (internally":["or"],"functions (like":["`isQuestion`).","`isShouting`)","`isSilence`"],"functions (my":["past"],"functions (namely":["`map`)"],"functions (non-exported":["functions"],"functions (same":["data"],"functions (though":["I"],"functions *do*":["work"],"functions I":["created","used"],"functions `*With`":["that"],"functions `::":["Key"],"functions `any`,":["`all`,"],"functions `areaCode`,":["`number`,"],"functions `isNothing`":["etc."],"functions `isQuestion`":["and"],"functions `isUpper`":["and"],"functions `r":["-\u003e"],"functions `silence`,":["`shout`,"],"functions a":["bit"],"functions allowed":["in"],"functions already":["provided"],"functions and":["datatypes","parameters","put","LambdaCase","filter","type","chain","then","values","predicates","data","nothing"],"functions and/or":["use","operators"],"functions any":["more"],"functions are":["point","very","preferable","imported","value-strict.","all","exported,","private","all","all","potentially","creative!","filters,","named","indented","now","value-lazy","lazy","really","simpler","highest,"],"functions aren't":["part"],"functions as":["you","`\\x"],"functions at":["the","the"],"functions available":["in"],"functions based":["on"],"functions because":["likewise","it's"],"functions but":["I","not","conversion"],"functions by":["name","name"],"functions certainly":["could"],"functions dealing":["with"],"functions declaration,":["```toRna"],"functions defined":["here"],"functions directly":["on","instead"],"functions do":["redundant"],"functions due":["to"],"functions ensure":["that"],"functions explicitly":["imported","imported"],"functions following":["this"],"functions for":["converting","that","from","the","each","free.","splitting"],"functions force":["the"],"functions from":["my","the","other","the","modules","Data.Char","Data.Char,","Data.List","Data.List","`Data.List`.","Data.Text,","a","other","Prelude.","`Data.Map.Lazy`","the","there.","Data.Map.Strict","Data.Map.Strict","`Data.Map.Strict`.","Data.Char","Control.Concurrent","that","`Data.List.Split`,","`fromList*`","a","Data.Char","Data.Char","there,","Data.List","Data.Char"],"functions given":["a"],"functions had":["same"],"functions have":["different"],"functions heads,":["guards"],"functions heavily":["relies"],"functions here":["would","are","are","give"],"functions immediately":["below"],"functions imported":["into"],"functions in":["Data.Char","the","Haskell","there","the","[Data.Map.Lazy](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html)","[Prelude](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html)","point-free","Prelude.","a","the","Data.Char","Haskell)","Data.Map","Haskell","Data.Map","a","this","Prelude.","one","Haskell","a","Prelude","both","Data.Map,","their","WordCount.","pure","point-free","`Data.Text`.","the","where","Haskell","learning","FP,","where","Data.List.Split."],"functions inside":["a"],"functions instead":["of"],"functions into":["a","a","a","a"],"functions is":["used","equivalent","a","rarely"],"functions isShout,":["isQuestion"],"functions like":["toRNA","`import","that.","`all`","this,","_map_,","folds","`numBottles","`dropUntil`"],"functions made":["a"],"functions might":["be"],"functions more":["complicated","closely"],"functions much,":["why"],"functions names":["specific"],"functions not":["top-level"],"functions of":["one"],"functions on":["one","one"],"functions operate":["on"],"functions out":["of","to","into"],"functions over":["`elem"],"functions point-free":["which"],"functions rather":["than"],"functions read":["like"],"functions replaced":["by"],"functions required.":["I"],"functions requiring":["two"],"functions returning":["a"],"functions should":["take","have","be","have","be","have","be"],"functions so":["can"],"functions started":["looking"],"functions such":["as","as","as"],"functions terminate":["within"],"functions that":["you're","`Data.Map`","you","do","act","return","happen","take","are","you","are","you","might","are","end","can","aren't","would","replace","are","could","may","uses","look","will"],"functions their":["own"],"functions then":["become"],"functions there,":["I"],"functions to":["the","get","localscope","compose,","a","roll","work","hurt","build","be","use","solve","point-free","remember","explicitly","have","make","one"],"functions together?":["There"],"functions total":["if"],"functions toward":["the"],"functions under":["the","the","a","a"],"functions unless":["specialization","it's"],"functions used":["in"],"functions via":["`module"],"functions visible":["to"],"functions was":["that"],"functions were":["longer"],"functions when":["possible.","you","it"],"functions where":["an"],"functions which":["can"],"functions while":["improving"],"functions with":["`Prelude.`","so","type","`[String]","more"],"functions would":["just","work.","be"],"functions wouldn't":["be"],"functions you":["really","use,","are","are","need","could","should","are","need","wish"],"functions you're":["already"],"functions) type":["of"],"functions), Data.Char,":["and"],"functions), so":["that"],"functions), then":["you"],"functions, I":["kinda","never"],"functions, a":["pattern"],"functions, although":["it"],"functions, and":["the","I'm"],"functions, and/or":["use"],"functions, as":["@sasha"],"functions, both":["ones"],"functions, but":["\"last\"","the","this","it's","they","they're","not","some"],"functions, e.g.":["`module","`isAsciiLower`,"],"functions, even":["if"],"functions, it":["only"],"functions, it's":["uncommon"],"functions, like":["in"],"functions, not":["dependent"],"functions, or":["use","does"],"functions, since":["you're","every"],"functions, so":["you","you"],"functions, the":["reasoning"],"functions, there's":["always"],"functions, this":["method"],"functions, though.":["They"],"functions, use":["`map`"],"functions, which":["I"],"functions, you":["won't","should"],"functions--they're usually":["a"],"functions. \u003cfacepalm":["/\u003e"],"functions. Funny":["that"],"functions. I'm":["afraid"],"functions. If":["you"],"functions. It's":["considered"],"functions. Kind":["of"],"functions. More":["lines,"],"functions. Mostly":["just"],"functions. Not":["a"],"functions. That's":["because"],"functions. Therefore":["if"],"functions. This":["also"],"functions. Would":["it"],"functions. You":["can"],"functions. You'd":["have"],"functions. and":["code"],"functions/methods/etc remain":["consistent"],"functions: display":["and"],"functions? I":["think"],"functions? If":["you"],"functor equivalent":["to"],"functor instance":["such","I"],"functor you":["can"],"functor. And":["then"],"functors and":["stuff,","monoids"],"functors, `fmap":["f"],"functors, etc.":["to"],"fundamental level.":["However,"],"fundamentals may":["produce"],"funky; maybe":["the"],"further I":["would"],"further and":["write"],"further by":["moving"],"further cleaned":["up"],"further consideration.":["The"],"further down":["is"],"further improve":["readability."],"further improvements":["I"],"further optimizations,":["and"],"further processing":["required,"],"further simplifications":["that"],"further simplify":["this","(into"],"further to":["`(==)"],"further, but":["I"],"further, you":["could"],"further. I":["used"],"fuse everything":["together,"],"fuse into":["for"],"fuse operations":["together."],"fuse stuff":["like"],"fuse the":["two","first","two"],"fuse these":["together,","operations"],"fuse this":["all"],"fuse toLower":["and"],"fuse tryTrimFirstDigit":["and"],"fuse, this":["means"],"fused and":["result"],"fused at":["all,"],"fused, but":["maybe"],"fused, however":["with"],"fusing (at":["least"],"fusing is":["also"],"fusion (eliminate":["intermediate"],"fusion correctly,":["this"],"fusion for":["`map`."],"fusion made":["for"],"fusion makes":["the"],"fusion on":["a"],"fusion possible,":["so"],"fusion to":["happen.","happen.","occur."],"fusion with":["its"],"fusion would":["have"],"fusion\" and":["\"deforestation\")."],"fusion) and":["have"],"fusion, so":["the"],"fusion. I":["still"],"future of":["this"],"future readers:":["there"],"future reference,":["`SU.split"],"future references:":["\"Multiline"],"future where":["that"],"future, it":["could"],"future, some":["biologist"],"future-proof or":["something."],"future-proof, if":["you"],"future. So":["having"],"future... At":["least"],"fuzed away":["and"],"fuzed inside":["computation."],"fuzzy about":["bang"],"fxyz_g =":["f*g^3"],"g $":["h","zip","x`...","h","h"],"g (pure":["st)`,"],"g (st":[":"],"g .":["h","(:","pure`.","h","h.","getGrades","getGrades","h"],"g \u003c*\u003ee":["--"],"g =":["\\x","(f","(f","(f","mapFB","mapFB","M.insertWith","M.insertWith","(f","maybe","Set.toList","map"],"g ==":["map"],"g [n]":["s","."],"g [name]":["."],"g [st]`":["into"],"g a":["b","==","||","b`"],"g a`":["or"],"g b)":["x"],"g db":["of`,"],"g for":["both"],"g lest":["translate"],"g n":["(School","="],"g name":["="],"g pupil":["[]","[]","((grade,"],"g st":["="],"g x)`.":["But"],"g x`":["you","you","and","but"],"g xs)`":["will","with"],"g) x`":["applies"],"g) xs`":["which"],"g*(f*g^2 +":["x*g^1"],"g*(g*(f*g^1 +":["x)"],"g*(g*(g*(f) +":["x)"],"g. mapFB":["(mapFB","(mapFB"],"g` and":["`right"],"g` because":["it's"],"g` here:":["http://www.haskell.org/ghc/docs/latest/html/libraries/base/src/GHC-Base.html"],"g` will":["return"],"g`. In":["this","this"],"g`. Similarly":["`f"],"g`. This":["is"],"gain a":["tiny"],"gain by":["the"],"gain from":["using"],"gain much":["by","by"],"gain when":["you"],"gain. Compare":["with"],"gained much.":["If"],"gained there":["but"],"game Scrabble":["there"],"game that":["have"],"game there":["is"],"game? It":["probably"],"games with":["me,"],"gaps. I'd":["recommend"],"garbage (linear":["instead"],"garbage and":["doesn't"],"garbage collect":["all"],"garbage collected":["sooner"],"garbage collection":["runtime"],"garbage thunks":["as"],"garden children":["diagram","diagram"],"garrets nitpick":["i"],"gather results":["using"],"gather values,":["but","but"],"gathering your":["test"],"gaurds at":["the"],"gave it":["a","that"],"gave me":["the"],"gave them":["separate"],"gave up":["and"],"gave you":["a"],"gaze long":["into"],"gazes into":["you."],"gc and":["will"],"gem, as":["there"],"gem, at":["least"],"gen \u003c-":["newStdGen"],"general (won't":["choke"],"general Data.Char":["functionality"],"general Haskell":["style."],"general I":["think"],"general `foldr`":["is"],"general a":["good"],"general and":["should"],"general as":["the","far"],"general case":["since","I"],"general case,":["because:"],"general comments":["are"],"general consensus":["to","to"],"general functions":["out"],"general in":["Haskell."],"general instances":["are"],"general isn't":["trivial."],"general looks":["pretty","good."],"general number":["parser"],"general purpose":["than"],"general recommendations,":["but"],"general rule":["is","is"],"general rule,":["one"],"general space":["behavior"],"general techniques":["to"],"general than":["the"],"general too,":["I"],"general version":["with"],"general you":["should"],"general, I":["know"],"general, how":["can"],"general, it":["can"],"general, this":["looks"],"general, you":["can"],"general. Hmm.":["I"],"general. In":["this"],"general. Line":["18"],"general. Of":["cause"],"generality and":["likely"],"generality since":["other"],"generality, since":["the"],"generalize `lookupPlants`":["a"],"generalize approach,":["so"],"generalize for":["any"],"generalize it":["and"],"generalize the":["\"Sure.\""],"generalize this":["approach?"],"generalize to":["vary"],"generalize your":["approach,"],"generalizing `isAnagram`'s":["type"],"generalizing across":["all"],"generalizing it":["to"],"generally (any":["Enum)"],"generally a":["good","lot"],"generally agree.":["I"],"generally agreed":["that"],"generally avoid":["`fromJust`"],"generally bad":["style"],"generally be":["avoided","preferred."],"generally best":["avoided"],"generally better":["to","to"],"generally considered":["good","good","\"acceptable"],"generally don't":["like"],"generally err":["on"],"generally favoured":["over"],"generally good":["style","style."],"generally having":["access"],"generally imported":["qualified."],"generally like":["to","to"],"generally more":["idiomatic."],"generally much":["faster"],"generally not":["advised","frowned","a","right"],"generally only":["useful"],"generally prefer":["the","the"],"generally preferable":["to","to","to"],"generally preferred":["to","to","than"],"generally put":["type"],"generally re-write":["them"],"generally short":["enough"],"generally speaking":["bytestrings"],"generally speaking,":["it's"],"generally try":["to"],"generally use":["where"],"generally used":["instead"],"generally useful":["function."],"generally. It":["definitely"],"generate 5":["random"],"generate a":["rather","list","list","left","list","key","truly","series"],"generate all":["the","possible"],"generate fewer":["candidate"],"generate list":["[99,98,...1]"],"generate name":["in"],"generate new":["list"],"generate only":["odd"],"generate primes":["to"],"generate that":["sequence.","with"],"generate the":["map.","\"verse","map","candidates","intermediate","answer.","association","robot","None"],"generateName ::":["IO"],"generateName =":["mapM"],"generateName \u003e\u003e=":["atomically"],"generateName could":["also"],"generateName`, but":["couldn't"],"generateRespone::Category -\u003e":["String"],"generateResponse ::":["Category","Category"],"generated \"The":["first"],"generated ASM":["and"],"generated `toEnum":["7`"],"generated all":["of"],"generated by":["it.","the"],"generated getters,":["I"],"generated name.":["In"],"generated on":["the"],"generated where":["the"],"generated with":["patch."],"generated, little":["dependence"],"generated, such":["as","as"],"generates a":["\"chill-out\"","lot","very","thunk"],"generates it":["in"],"generates nested":["thunks"],"generates type":["declarations"],"generating a":["list","char","map","list","list"],"generating all":["permutations"],"generating new":["name"],"generating output":["without"],"generating the":["map","digits"],"generation (would":["this"],"generation code":["here"],"generation each":["time?)"],"generation of":["verses"],"generation or":["I","mapM."],"generation, except":["that"],"generation, forgot":["about"],"generation. Does":["`addLetter`"],"generation. Quite":["pleased"],"generator could":["also"],"generator for":["that"],"generator in":["a","the"],"generator is":["also"],"generator, so":["it'll"],"generator. But":["I"],"generator. You":["can"],"generators and":["using"],"generators for":["the"],"generators of":["numbers"],"generators, just":["didn't"],"generators, there's":["never"],"generic and":["doesn't"],"generic as":["well","parsec"],"generic character-replace":["function,"],"generic concepts":["are"],"generic functions":["\"tallyListItems\"","is"],"generic functions,":["which"],"generic is":["usually"],"generic or":["too"],"generic task":["into"],"generic usefullness":["of"],"generic variants":["on"],"generic version":["of","is"],"generic, I.e.":["you"],"generic. I'm":["not"],"generically with":["`[minBound..]`."],"gentle if":["you"],"genuinely faster":["for"],"get \"Sure.\"":["instead"],"get 1010":["(10),"],"get Bob":["into"],"get Eq,":["Ord,"],"get HUnit":["loaded"],"get Nothing,":["and"],"get O(n":["*"],"get `Control.Monad.liftM2`":["to"],"get `Just":["[1,","[1]`."],"get `Silence`":["or"],"get ```isAnagram```":["slightly"],"get `data":["N"],"get `filter":["compareAgainst"],"get `op`":["on"],"get `succ`":["and"],"get a":["stack","lot","lint","feel","typeclass","DrunkTalk.","better","really","big","number","bit","problem.","single","list","stack","better","stack","sense","list","list","stack","warning","stack","good","good","closed","hlint","warning","compiler","prime","more","warning","warning","count","convenient","list","character","chance."],"get access":["to"],"get all":["of","of","of","of","the"],"get an":["O(n","error","O(1)","infinite","infinite","warning","error:","overflow"],"get another":["failing"],"get any":["result","warnings","tradeoffs"],"get anywhere.":["What"],"get around":["that?","the","that."],"get at":["home","the"],"get away":["with","with","with","with","with","with","with","with"],"get back":["here"],"get better":["too.","memory"],"get better,":["but"],"get bitten":["by"],"get built":["instead"],"get calculated":["each"],"get called":["on"],"get caught":["up"],"get containers-0.5.0.0:Data.Map.Base.Map":["String"],"get correct":["behavior","behavior"],"get correct,":["harder"],"get discouraged.":["Ignoring"],"get empty":["string"],"get evaluated":["(and"],"get exported":["to","to"],"get fixed.":["Were"],"get for":["free","now."],"get forced":["in"],"get from":["a","constructing"],"get garbage":["collected"],"get going,":["here"],"get good":["at"],"get greater":["clarity"],"get handled":["for"],"get how":["they"],"get hung":["up"],"get in":["that","the","to"],"get intermediate":["results"],"get into":["the"],"get into.":["It","It's"],"get it":["to","accepted.",":P","to","via","working.","now.","working","to"],"get it,":["now?","how"],"get list":["of"],"get more":["concise","familiar","familiar","details."],"get most":["of"],"get moved":["out"],"get my":["code","head"],"get newer":["one."],"get on":["those"],"get optimized":["away","away,"],"get others":["opinions."],"get over":["complicated"],"get parentheses":["like"],"get past":["the"],"get people":["to"],"get points":["for"],"get pretty":["wacky"],"get problems,":["becauese"],"get put":["off"],"get resetName":["to"],"get rid":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"get round":["it"],"get run":["twice?"],"get serious":["with"],"get some":["low","time."],"get something":["that","like","to","along"],"get started":["on"],"get started.":["Wish","Even"],"get sublists":["than"],"get that":["show","you","efficiency","to","to","wrong"],"get that,":["it"],"get the":["number","same","grades","count","ugly-looking","last","whole","whole","hang","first","response","pattern-matching","`length`","best","value","value","correct","error","head","sum","arbitrary","automatically","functions","advantage","total.","new","importance","scale","correct","expected","digits","same","day","differences","number","predecessor","point.","number","last","id","same"],"get there":["on","from"],"get there.":["Thanks"],"get this":["done.","behavior.","through","error:","information?"],"get those":["semantics"],"get to":["all","a","in","it","work!","this","that","integer","the"],"get too":["confusing"],"get type":["mismatch"],"get updated":["intermittently?"],"get used":["to","to","to","to","to","to","to","to"],"get values":["out"],"get very":["far"],"get what":["you","you","you","I"],"get when":["you"],"get you":["better"],"get your":["validation;"],"get, is":["a"],"getBalance ::":["BankAccount"],"getBalance =":["readMVar"],"getC, getX":["etc..?"],"getMap =":["xx","getMap"],"getMap a":["`add`"],"getMap b":["}``."],"getWords. Any":["help?"],"gets a":["little","bit","binding"],"gets across":["what"],"gets collected":["immediately"],"gets constructed":["from"],"gets covered":["pretty"],"gets evaluated":["first."],"gets extracted":["into"],"gets forced":["from"],"gets handled":["by"],"gets interpreted":["as"],"gets involved":["it's"],"gets it":["you"],"gets kind":["of"],"gets larger,":["can"],"gets messier":["I"],"gets mixed":["up"],"gets out":["of"],"gets pulled":["out."],"gets reduced.":["In"],"gets rid":["of"],"gets some":["nitpicking"],"gets the":["job","second","job","job","strictness","job","number"],"gets to":["the"],"gets ugly...":["or"],"gets used":["over"],"gets you":["50."],"getters, I":["provided"],"getting a":["single","bit","`Parser","bunch"],"getting almost":["there."],"getting an":["empty","integer,"],"getting at;":["That"],"getting back":["to"],"getting better":["at"],"getting comfortable":["with"],"getting completely":["unwieldy,"],"getting data":["into"],"getting exported.":["You"],"getting hammered":["trying"],"getting huge":["thunk"],"getting just":["an"],"getting late...":["Ignore"],"getting more":["and"],"getting my":["head"],"getting myself":["tangled"],"getting rid":["of","of","of"],"getting shorter":["and"],"getting that":["sort"],"getting that,":["but"],"getting the":["desired","first","last","desired","warning:","count"],"getting too":["\"complicated\""],"getting used":["to,","to","to"],"ghc -Wall":["--make","Bob","Bob.hs"],"ghc can":["and"],"ghc compiler":["can"],"ghc conplains.":["maybe"],"ghc does":["not"],"ghc install":["(and"],"ghc prints":["it"],"ghc will":["(I'm"],"ghc with":["`-Wall`"],"ghc, than":["it's"],"ghc-7.6, it":["seems"],"ghc-mod or":["hdevtools"],"ghc-mod will":["lint"],"ghc-prim ...":["linking"],"ghci (compilation":["will"],"ghci -Wall":["bar.hs"],"ghci I":["can"],"ghci and":["put"],"ghci but":["got"],"ghci if":["I"],"ghci prints":["\\"],"ghci prompt":["you"],"ghci will":["do"],"ghci) which":["accomplishes"],"ghci), but":["lazy"],"ghci). Please":["read"],"ghci, and":["have"],"ghci, it":["turns"],"ghci, too,":["run"],"ghci, you":["can","can"],"ghci. Seems":["that"],"ghci.... Honestly,":["I"],"ghci\u003e :t":["(\u003c*\u003e)"],"ghci\u003e [(+3),":["(*3),"],"ghci\u003e import":["Control.Applicative"],"ghci\u003e map":["($"],"gigabytes and":["watch"],"gigantic expression.":["For"],"gigasecond and":["using"],"gigasecond-to-day calculation":["with"],"gist (thanks":["for"],"gist I":["posted?","assume"],"gist in":["case"],"gist is":["probably"],"gist that":["uses"],"gist the":["best"],"gist. The":["\"let"],"gist? In":["that"],"github and":["tried"],"github, ain't":["it?"],"give O(log":["n)"],"give `phrase":["1`"],"give `responseFor`":["a"],"give `str`":["a"],"give a":["warning","warning,","fold","`sorted","concrete","short","try","simple","spoiler:","hints)."],"give all":["top-level"],"give an":["explicit","advice","error"],"give another":["try"],"give each":["of"],"give feedback":["really","then."],"give helper":["functions"],"give it":["a","a","a","a","a","a","a","another","a","a","a","an","a"],"give me":["a","pointers","a","a","a","pause"],"give me,":["and"],"give name":["to"],"give names":["for","to"],"give that":["a","directly"],"give the":["body","compiler","robot","compiler","compiler"],"give them":["type","descriptive"],"give up":["pattern","on"],"give up!":["But,"],"give you":["the","a","a","a","`(dv,","enough","a","a","a","an","those","the","a"],"given Day":["to"],"given Haskell's":["well"],"given `Char":["-&gt;"],"given `Just":["f"],"given `[Base]`":["or"],"given `all":["isSomething`"],"given `r`":["is"],"given a":["day,","non-DNA-only","function","matching","date","sorted","date","="],"given all":["the"],"given an":["empty","MVar","un-satisfyable"],"given by":["`weekOf`."],"given currying,":["default"],"given list":["at"],"given nucleotides":["(`++`"],"given only":["the"],"given operator":["easily"],"given other":["word"],"given problem":["though!"],"given range,":["as"],"given row":["without"],"given scenario":["(and"],"given some":["input"],"given string":["was"],"given that":["\"The","`_`","you","zero"],"given the":["all-caps","order","context","problem","Maybe","silent","inputs","requirement","lack","context.","spec,","binding"],"given two":["words,","threads"],"given type.":["This"],"given, so":["I"],"given, that's":["rather"],"given. Would":["it"],"gives \"Whatever.\"":["as"],"gives Haskell":["some"],"gives `0`,":["but"],"gives `[5,":["9,"],"gives a":["slightly-more-accurate","way","different","different"],"gives it":["a"],"gives me":["errors","the"],"gives more":["information"],"gives no":["reason"],"gives some":["strange"],"gives the":["impression","compiler"],"gives two":["different"],"gives us":["a"],"gives us,":["I"],"gives warnings":["when"],"gives what":["I"],"gives you":["the","value-strict","the","accessors"],"giving him":["the"],"giving it":["a"],"giving me":["a"],"giving my":["Haskell"],"giving names":["to"],"giving the":["predicates"],"giving type":["signatures"],"giving up.":["Can't"],"glad I":["submitted","found","asked."],"glad my":["eyes"],"glad to":["go","see"],"glad you":["found"],"glance (at":["least"],"glance at":["the"],"glance see":["what"],"glance that":["would","way,"],"glance this":["is"],"glance\" -":["at"],"glance, rather":["than"],"glance, then":["looked"],"glance. Although":["considering"],"glance. However":["the"],"glance. That":["is"],"glazed over":["that"],"glimmerings of":["understanding"],"global counter":["have"],"global state":["created"],"glue up":["stirngs"],"glyph in":["unicode"],"gnarly, but":["`sing`"],"gnuvince -":["my"],"gnuvince's recommendation,":["which"],"go 'T'":["="],"go (acc":["+"],"go (i":["+"],"go (sum,":["foldl',"],"go (x:xs)":["n","n'","(k-digit)"],"go (x@(digit,":["numeral):xs)"],"go .":["lowerCase","map"],"go _":["_"],"go a":["step"],"go about":["that..."],"go acc":["(a:as)","as"],"go ahead":["and","and","and","and"],"go all":["out,"],"go along":["with"],"go another":["step"],"go around":["since"],"go at":["the","using","rewriting","rewriting."],"go away":["in","as"],"go away.":["Not"],"go back":["and","into","to","to"],"go backwards.":["Nice"],"go baseNums":["n"],"go bs":["$!"],"go c":["="],"go cs":["v"],"go cz":["v'"],"go cz@(c:cs)":["v"],"go directly":["from"],"go down":["to","to","that"],"go for":["the","a","`f","a","the","foldr"],"go from":["and"],"go i":["n","(n","x:xs","xs"],"go improve":["the"],"go in":["that","there,","reverse"],"go into":["the"],"go look":["through"],"go looking":["for"],"go ly":["="],"go mappings":["n"],"go mappings'":["n'"],"go n":["'0'","'1'"],"go off":["=)"],"go on":["my","their","the"],"go over":["80","that"],"go overboard":["with"],"go point-free":["all"],"go read":["up"],"go readd":["that,"],"go this":["way"],"go though":["the"],"go though,":["I'm"],"go though.":["`foldl'`"],"go through":["the","a","4"],"go to":["pointfree-land.","bed,","step","read"],"go too":["much"],"go up":["when"],"go which":["will"],"go with":["`sum`","three","whichever","`nucleotide`","whichever"],"go word":["by"],"go x":["=","="],"go xs":["n'","k"],"go, but":["when"],"go, given":["Haskell's"],"go, look":["at"],"go, this":["is"],"go-inspired avatar":[":)"],"go. (Trying":["not"],"go. First":["variant"],"go. I":["will"],"go. Thank":["you!!"],"goal of":["exercism","this"],"goal then":["I"],"goal, there":["must"],"goal, without":["(to"],"goals of":["this"],"god, it":["is"],"goes (petty,":["I"],"goes a":["long"],"goes as":["far"],"goes away.":["Check"],"goes for":["imports,","`null(chars)`"],"goes from":["left-to-right,"],"goes in":["that"],"goes into":["a"],"goes on":["a","its","its"],"goes out":["of"],"goes point":["free."],"goes with":["double"],"goes, the":["areaCode,"],"goes, you":["should","can"],"goes. (However,":["I"],"going about":["this"],"going against":["the"],"going back":["to"],"going beyond":["one"],"going bottom-left":["then","then"],"going by":["the"],"going down":["to"],"going for":["a"],"going forward.":["Thanks,"],"going in":["circles!"],"going nuts":["trying"],"going off":["of"],"going on":["behind","rather","in","a","here.","in","without",":-)","would","now","enough"],"going on,":["I"],"going on.":["(Hint","I","Some","But,","You're"],"going straight":["from"],"going the":["extra"],"going through":["pack,","it"],"going to":["have","tell","do","stick","use","split","be","work","be","hack","give","traverse","build","be","be","learn","tell","do.","flip","happen","use","suggest","give","spend","be","get","get","evaluate","extend","miss","ask","suggest","tack","have","create","have","want","be","worry","do","do","discount","get","convince","look","allocate","be","risk","behave","be","be","have","revisit","export","effectively","use/don't","be","have","desugar","need","try","change","take","be","use","have","put","talk","evaluate","wait","evaluate","come","start","change","be","get","try","be","get","go","need","have"],"going your":["way"],"going, here":["are"],"golf is":["one"],"gone :)":["I"],"gone a":["bit"],"gone for":["a"],"gone overboard":["pulling","when"],"gone wild":["with"],"gone with":["a","Parsec","`isEquilateral`"],"gone. The":["threading"],"gonna bother":["commenting"],"gonna go":["ahead"],"gonna handle":["the"],"gonna keep":["it"],"gonna leave":["it"],"gonna like":["this"],"gonna skip":["those"],"gonna take":["another"],"good --":["I"],"good Haskell":["style"],"good a":["reason","handle"],"good about":["it"],"good advice,":["but"],"good algorithm":["automatically"],"good algorithm.":["`insertWith`"],"good approach":["or"],"good article":["on"],"good as":["one","reverse","I'm"],"good at":["separating","reasoning","suggesting","Haskell...","nagging"],"good balance":["between"],"good but":["you","it's","still","since","its"],"good candidate":["to"],"good case":["for"],"good catch":["with"],"good catch!":["And"],"good chance":["to"],"good choice":["for"],"good choice,":["since"],"good combination":[":)"],"good compliment":["there."],"good constant":["factor","factor"],"good coverage":["on"],"good data":["structure","structure"],"good decision":["to"],"good deliberate":["reason."],"good documentation,":["and"],"good encapsulation":["argument"],"good enough.":["Almost"],"good error":["in","message"],"good example":["of","of","I","of","and"],"good except":["the","for"],"good exercise":["to"],"good fold":["to"],"good for":["doing","robustness","now.","`square`","producing","the"],"good form":["(and"],"good from":["here."],"good grief...":["FAIL."],"good guidelines":["that"],"good habit":["to","to","to"],"good here":["though!"],"good here,":["but","it","the","this"],"good idea":["to","in","to","about","to","after","would","on","to","by","to","to","to","to","if","in","here","here,","to","to","to"],"good idea.":["thanks."],"good idea...":["found"],"good in":["some","that"],"good information":["to"],"good it":["feels"],"good job":["explaining"],"good looking":["Haskell"],"good match.":["I"],"good mix":["of"],"good modes":["for"],"good name":["-","for"],"good names!":["I"],"good names,":["the"],"good note,":["thank"],"good now":[":)"],"good opportunity":["to"],"good other":["than"],"good otherwise.":["(Apparently"],"good overall.":["It's","I"],"good overview":["I"],"good place":["to"],"good point":["about","about","!","about","about","about"],"good point,":["thanks.","I"],"good point.":["I","Thanks","I","I","I","Been","And"],"good points!":["Will"],"good points.":["Thanks"],"good practice":["to","to","to","to","to","to","since","to","to","to","to","to"],"good practice,":["but"],"good primer":["on"],"good question,":["I"],"good reason":["to","to","to","that","to","to"],"good reason,":["it"],"good reason.":["I"],"good reasons":["to"],"good reference,":["I'll"],"good refresher":["on","on"],"good remarks,":["will"],"good replacement":["for"],"good resource":["for","that"],"good route":["then"],"good rule":["of","of","of","is"],"good sign":["if"],"good signatures":["(I"],"good so":["I'll","far."],"good solution":["if","to","since","with","now."],"good solution,":["but","although"],"good spot":["on"],"good start,":["it"],"good strategy":["to"],"good style":["to","to","though,","to","to","to","to","to","to","to","in","to","though,","to"],"good style,":["but"],"good style.":["If","Though"],"good suggestion":["re:"],"good suggestion.":["Much"],"good that":["the","you"],"good thing":["as"],"good thinking":["there"],"good though":["so",":)","you"],"good though,":["nice","so","so","but","very","just","although","these","nice"],"good though.":["There"],"good to":["go","me","me.","me,","highlight","me,","me","me.","me.","add","me.","me!","me","go.","keep","me,","me.","me.","me.","me.","me!","know","me.","me,","me","know!","know!","know","me","me.","me,","know.","me,","me.","be","always","me.","me.","me.","know","me!","me,","me,","remember","try","know","me","me","me.","reuse","me.","know.","know.","use","have","know.","require"],"good too.":["My"],"good two":["weeks"],"good understanding":["of"],"good use":["cases"],"good variable":["and"],"good way":["to","to","for","to","might","to","to"],"good ways":["to"],"good with":["the"],"good! Actually":["it's"],"good! Additionally,":["remember"],"good! I":["think"],"good! I'd":["prefer"],"good! Instead":["of"],"good! It":["is"],"good! My":["only"],"good! One":["possible"],"good! The":["`shouting`predicate"],"good!\" and":["wanted"],"good, I":["suppose.","took","ended"],"good, a":["trick"],"good, although":["you"],"good, but":["I","using","the","try","it's","you","can","your","`intercalate","you","why","I","won't","you","I","an","there's","I","why"],"good, it's":["right"],"good, nice":["work.","work!","work."],"good, other":["than"],"good, otherwise":["wrapping"],"good, stable":["modules"],"good, the":["only"],"good, there's":["just","also"],"good, though":["typically"],"good, you":["could","could"],"good. +":["comment"],"good. A":["couple"],"good. Another":["option"],"good. I":["like"],"good. If":["you"],"good. In":["fact","the","mine"],"good. It's":["also"],"good. No":["need"],"good. One":["thing","issue"],"good. The":["TupleSections","suggestions"],"good. Try":["zipping"],"good. Two":["small"],"good. You":["also","might","could","could","could","could","could"],"good. you":["might"],"goodies from":["`Text`"],"goodies it":["provides."],"goodness monad":["comprehensions"],"google for":["\"fmap\"","comes","`Data.Map.Strict`,"],"google for.":["Thanks"],"google'd everything":["out."],"googled `haskell":["replace`,"],"googled a":["little"],"googling has":["yielded"],"googling led":["me"],"got 13":["pairs"],"got `all":["isSpace"],"got a":["lot","bad","`replace`","bit","little","bit","nice","strange","point"],"got an":["idea","error,","upper"],"got any":["nitpicks"],"got as":["far"],"got baffled":["with"],"got caught":["up"],"got compiled":["down"],"got distracted":["a"],"got for":["it,"],"got from":["number","reading"],"got incomplete":["solution"],"got into":["an"],"got it,":["thanks!","thx"],"got longer,":["you"],"got lucky":["with"],"got memoization":["essentially"],"got optimized).":["The"],"got rid":["of","of"],"got smaller":["and"],"got some":["errors"],"got something":["working"],"got that":["far"],"got the":["spec","problems","same","time"],"got things":["working"],"got to":["have","grips","get","this"],"got too":["caught"],"got ugly":["..."],"got values":["of"],"got weird":["syntax"],"got your":["nit"],"got: \"Woah,":["chill","chill","chill"],"got: \"msemoa":["anindn"],"goto site":["if"],"gotta remember":["that..."],"gotten back":["to"],"gotten it":["in"],"gotten rid":["of,"],"gracefully handles":["empty"],"gracefully on":["its"],"grade =":["(."],"grade already":["exists"],"grade and":["sorted"],"grade g":["db","=","="],"grade have":["the"],"grade in":["db"],"grade is":["O(number"],"grade point-free":["like"],"grade shorter":["(you"],"grade was":["sorted"],"grade with":["a"],"grade without":["a"],"grade, but":["I'd"],"grade, but...":["meh."],"grade; at":["least,"],"grades and":["names."],"grades are":["higher"],"grades or":["the"],"grades out":["of","in"],"grades), which":["is"],"grades, but":["it"],"grades, that":["may"],"gradesCount +":["studentsCount)`)."],"gradesCount)` to":["`O(log"],"grains for":["a"],"grains to":["get"],"grains. That's":["equivalent"],"grammatical, but":["I'm"],"grammatical: \u003ccode\u003e(\"?\"":["\\`isSuffixOf\\`)\u003c/code\u003e"],"grants any":["improvement."],"grasp some":["of"],"grasp when":["you"],"gratuitous. I":["felt"],"great (and":["after"],"great advantage":["of","to"],"great already.":["Very"],"great argument":["against"],"great as":["is,"],"great but":["this"],"great candidate":["for"],"great chapter":["on"],"great combinators":["for"],"great deal":["first..."],"great example,":["to"],"great except":["for","usage"],"great explanation":["of","of","of","of","of","of","of","of","of","of","of","of","for","of","of","of"],"great feedback!":["I've"],"great first":["monad"],"great food":["for"],"great for":["quickly"],"great function":["as"],"great good!\"":["and"],"great handle":["on"],"great here":["though!"],"great hold":["on"],"great idea":["as","as"],"great if":["\u003cpre\u003e[Scalene,"],"great implementation,":["nicer"],"great in":["general.","a"],"great information":["on","about","about"],"great intro":["on","on"],"great is":["to"],"great it's":["better"],"great job":["explaining"],"great learning":["experience,"],"great mode":["that'll"],"great name":["for"],"great nitpicks":[":)."],"great nits!":["Addressed"],"great overview":["of"],"great practice":["to"],"great program":["design,"],"great reason":["to"],"great reference":["for","for"],"great refresher":["on","on","on","on","on","on","on","on","on","on","on","on","on"],"great section":["on"],"great so":["there's"],"great solution":["here,","to"],"great solution.":["Will"],"great start,":["but"],"great start.":["These"],"great suggestion.":["i"],"great testing":["file"],"great that":["you"],"great thing":["in"],"great tip":["about"],"great to":["me","me!","me.","have","me!"],"great use":["cases"],"great way":["to","to"],"great with":["the"],"great! A":["GHC"],"great! BTW,":["you"],"great! I":["don't","found"],"great! The":["names"],"great! You":["can"],"great!\" for":["this"],"great\" button.":["I've"],"great\" from":["me,"],"great, I":["really","also","was"],"great, I'd":["put"],"great, although":["I'd","I"],"great, because":["lists"],"great, but":["two","could","`testBit`","glad","the","I","you","for","there"],"great, constant":["time"],"great, for":["some"],"great, input":["validation"],"great, it":["could"],"great, just":["a","FYI"],"great, most":["real"],"great, my":["comments"],"great, nice":["work!","work!"],"great, no":["obvious"],"great, not":["much"],"great, note":["that"],"great, nothing":["left"],"great, some":["small"],"great, sometimes":["Control"],"great, the":["one","code"],"great, you'd":["want"],"great. A":["potential"],"great. About":["simplicity,"],"great. However":["I'd"],"great. I":["+1'd","didn't","like","like","understand"],"great. Minor":["nitpick:"],"great. Nice":["work!"],"great. One":["very"],"great. The":["only","example"],"great. There's":["a"],"great. `not":["."],"great. isQuestion":["is"],"greater clarity":["at"],"greater part":["of"],"greater than":["99."],"greatest to":["smallest."],"greatly appreciate":["your"],"greatly appreciated;":["I"],"greatly simplify":["`grade`."],"greatly when":["I"],"greeting` to":["a"],"gregorianMonthLength instead":["of"],"grep containers`.":["I"],"grey area":["here,"],"grips with...":["now"],"grok at":["a","a"],"grok monads":["yet,"],"grok that":["link,"],"grok them.":["The"],"grok, don't":["worry"],"grok. There":["is"],"gross when":["you"],"ground my":["progress"],"ground up":["to"],"ground? Good":["suggestion"],"grounds that,":["if"],"group .":["sort```","sort`","sort"],"group `isAlpha":["x`."],"group all":["bases","of","your","helper"],"group helper":["functions","functions"],"group is":["quite"],"group it,":["and"],"group of":["functions"],"group stuff":["with"],"group the":["expression,"],"group things":["with"],"group words":["as"],"group, or":["sort."],"group``` on":["it"],"grouped words":["once"],"grouped works":["would"],"grouped, sorted,":["or"],"grouping around":["operators."],"grouping into":["one"],"grouping is":["quite"],"grouping isn't":["needed"],"grouping may":["be"],"grouping should":["be"],"grouping up":["letters"],"grouping your":["definitions"],"grouping, not":["for"],"grouping. Take":["a"],"groups elements":["consequently."],"groups of":["5"],"groups seems":["more"],"grow in":["your"],"grow larger":["than"],"growing larger":["integers"],"gruesome even":["by"],"gruesome results.":["But"],"guarantee `word`":["is"],"guarantee a":["more"],"guarantee bad":["input"],"guarantee that":["the","all","the","bad","`map","`map","`word`","`w`","`normalize","nothing","they","it","it","`sortedWord","this","`sort","it","toLower'","`sort","s","str","first","str"],"guarantee the":["robot"],"guaranteed that":["this","`canonical`","they","in","```allSpace"],"guaranteed to":["happen","have","already","return","be","be","be"],"guaranteeing that":["every"],"guarantees (unless":["enemy"],"guarantees all":["of"],"guarantees that":["all","the","condition","there","the","`sort","template"],"guarantees the":["uniqueness"],"guard (all":["isSpace"],"guard (and":["l"],"guard (n=='T')":["&gt;&gt;"],"guard (or":["its"],"guard .":["(`elem`"],"guard =":["True","Bool`."],"guard ```null":["s```"],"guard ``|":["sentence"],"guard `|":["otherwise"],"guard a":["tiny"],"guard against":["`\":)"],"guard and":["it'll","`len","calls"],"guard as":["```allSpace"],"guard before":["question"],"guard can't":["be"],"guard case":["is"],"guard cases":["shouldn't"],"guard catches":["that)."],"guard clause":["of","for","for","is","per"],"guard clause.":["Otherwise"],"guard clauses":["are","a","read","vs","because","here,"],"guard clauses,":["but"],"guard clauses.":["However,","Something"],"guard conditions":["into","into","for","more"],"guard could":["be"],"guard covers":["that"],"guard either.":["However,"],"guard eliminating":["that"],"guard ensuring":["that"],"guard expressions":["instead"],"guard fails":["and"],"guard first":["you"],"guard for":["\"Chill.\""],"guard implies":["that"],"guard in":["`talkToBob`.","isAnagram"],"guard into":["the"],"guard is":["probably","testing;","evaluated"],"guard isn't":["needed"],"guard lent":["perfectly"],"guard makes":["this"],"guard might":["be"],"guard needed":["the"],"guard of":["the"],"guard on":["a","it","line"],"guard or":["with"],"guard order":["here"],"guard order,":["which"],"guard parameter?":["or"],"guard rather":["than"],"guard really":["works"],"guard rules":["in"],"guard syntax":["is","works"],"guard that":["says","is"],"guard then":["you'll"],"guard there":["is"],"guard to":["handle","be","return","check"],"guard unless":["the"],"guard up":["to"],"guard using":["`all`","`otherwise`."],"guard without":["using"],"guard works":["just"],"guard's `|`":["and"],"guard) rather":["than"],"guard), but":["that"],"guard, and":["have"],"guard, but":["it"],"guard, just":["the"],"guard, so":["this"],"guard, we":["have"],"guard. Additionally,":["Haskell"],"guard. Had":["you"],"guard. It's":["also"],"guard. Just":["makes"],"guard. The":["parentheses","compiler"],"guard. Usually":["if"],"guard0 =":["True"],"guard0`, so":["at"],"guard1 =":["result1","..."],"guard2 =":["result2","..."],"guarded against":["empty"],"guarding on":["input"],"guards (as":["it"],"guards (these":["implicitly"],"guards (with":["4"],"guards a":["little","bit"],"guards and":["pattern","pattern","consider","into","the","pattern","where","the","maybe"],"guards and/or":["multiple"],"guards approach":["would"],"guards are":["idiomatic.","tried","superfluous.","in","tried","too"],"guards before,":["but"],"guards but":["if"],"guards combined":["as"],"guards could":["eliminate","be"],"guards for":["conditionality","cases","`isIgnoring`","an","each"],"guards from":["the","the"],"guards having":["to"],"guards here":["I"],"guards here.":["The","Another"],"guards in":["the","`responseFor`","`responseFor`,","`_responseFor`.","number","defining","`go`","`responseFor`","`responseFor`","the","your","isAnagram","your"],"guards instead":["of","of","of","of","of","of","of","if"],"guards instead;":["I"],"guards into":["more","separate"],"guards is":["the","okay,","more","to","just"],"guards makes":["`responseForHelper`"],"guards matter\"":["comment"],"guards might":["look"],"guards more":["explicative"],"guards much":["easier"],"guards on":["`isQuestion`","`convert`","stripped","their"],"guards or":["case","pattern","pattern"],"guards per":["@aaliyah's"],"guards reminder!":["Now"],"guards return":["booleans.","booleans,"],"guards syntax,":["consider"],"guards than":["if-then-else."],"guards that":["return"],"guards there":["is"],"guards there;":["part"],"guards to":["a","implement","return","spread","one"],"guards together":["to"],"guards too,":["so"],"guards under":["a","your"],"guards version,":["but"],"guards will":["make"],"guards with":["pattern","boolean","an","2"],"guards within":["`responseFor`)."],"guards would":["make","make","be","be"],"guards you":["just","should","can"],"guards! I":["also"],"guards, I":["think"],"guards, and":["a","instead"],"guards, but":["less"],"guards, case":["statements,"],"guards, code":["will"],"guards, e.g.":["`isAlphaNum","building","`a'","`&&`,"],"guards, it":["will"],"guards, nice":["suggestion."],"guards, that's":["a"],"guards, though":["now","this"],"guards, would":["look"],"guards, you":["already","may","are"],"guards. And":["I"],"guards. Defining":["appropriately"],"guards. For":["example,"],"guards. Got":["surprised"],"guards. Here's":["a"],"guards. It":["helps"],"guards. Otherwise,":["this"],"guards. The":["`isSuffixOf`"],"guards. To":["most"],"guards. Usually":["I"],"guards. You":["should"],"guards; I":["went"],"guards? What":["about"],"guards` is":["justified"],"guess I":["am","saw","would","had","should","would","lost","don't","fail","could","would","will","don't","wanted","was","could"],"guess I'm":["used","back"],"guess `ageOn":["::"],"guess `difference":["n`"],"guess `foldl'`":["is"],"guess `maybeToList`":["isn't"],"guess `primeFactors'`":["is"],"guess a":["Map"],"guess for":["such"],"guess i've":["had"],"guess it":["does","wouldn't","can't","only"],"guess it's":["either","still"],"guess its":["name"],"guess now":["I"],"guess part":["of"],"guess that":["would"],"guess that's":["inevitable"],"guess the":["only","only"],"guess this":["is"],"guess what":["that"],"guess you":["were"],"guess) and":["I"],"guess) because":["what"],"guess, are":["the"],"guess. The":["readme"],"guessable that":["the"],"guessed that":["I"],"guessed the":["function"],"guessing trying":["to"],"guessing you":["don't"],"guide is":["just"],"guide me":["towards","in"],"guide says":["there"],"guide was":["the"],"guide, as":["it"],"guide. There":["niciest"],"guidelines that":["you"],"guides are":["going"],"gurads in":["Haskell,"],"guys are":["hard"],"guys! I'm":["very"],"gx =":["g"],"gx ==":["g"],"h $":["x``","i`","i`","i"],"h ++":["[t]`"],"h .":["i"],"h&gt; (uncurry":["enumFromThenTo"],"h&gt; :info":["wordCount","String","(.)"],"h&gt; :load":["WordCount"],"h&gt; M.lookup":["1","1","1","1","1","1","1","1","1","1","1","1"],"h&gt; fromJust":["((guard"],"h&gt; import":["qualified","Data.List","qualified","Data.List","Control.Arrow","qualified","Data.List","qualified","Data.List","qualified","Data.List","qualified","Data.List"],"h&gt; sequence":["[randomRIO"],"h&gt; show":["'A'"],"h. i`":["since"],"h\u003e :info":["fmap","(\u003c*\u003e)","(\u003e\u003e=)","`on`","(.)","(,)","Functor","(==)","(/=)","(&&)","(&&)","(==)","(+)","(++)","(&&)","(==)"],"h\u003e :type":["(liftM","((+1)","(fmap"],"h\u003e filter":["(uncurry"],"h\u003e range":["('A','Z')"],"h\u003e sort":["\"hamlet\"","\"amleth\""],"h\u003e take":["3"],"h\u003e toList":["(reverseLinkedList"],"ha! I":["see"],"ha. Now":["that"],"ha... nice":["catch,"],"ha..you've used":["rule:"],"habit of":["never","keeping","specifying"],"habit to":["get","get","get","get"],"hack is":["not"],"hack on":["to"],"hack that":["is"],"hack. Also":["you"],"hack. But":["I"],"hackage http://hackage.haskell.org/package/base-4.0.0.0/docs/Data-IORef.html":["also"],"hacked together.":["Any"],"hacking and":["let"],"hacking around":["so"],"hacky way":["to"],"hacky, do":["you"],"had (you":["even"],"had `isAlpha`":["first,"],"had `rest'`":["being"],"had `toLower'`":["as"],"had a":["major","hard","version","trailing","fully","version","error.","lot","feeling","`Char","look","few","function","`let`","(reverse","setting","slightly","blast","question","quick","bit","problems"],"had an":["approach","idea"],"had another":["solution"],"had been":["passed","calculated","stuck"],"had before.":["Seems"],"had deleted":["the"],"had done":["that"],"had even":["hoogled"],"had failed":["because"],"had figured":["out"],"had following":["variants:","variants:"],"had four":["squares,"],"had function":["type"],"had got":["as"],"had had":["(you"],"had http://whathecode.wordpress.com/2013/02/16/camelcase-vs-underscores-revisited/":["in"],"had ignored":["it."],"had in":["mind;","mind","mind?","previous"],"had it":["in","as","in"],"had just":["and"],"had let":["me"],"had looked":["into"],"had master":["checked"],"had meant":["to"],"had never":["gotten"],"had no":["idea!","idea","idea","idea!","idea","formal","pain","luck","chance","idea"],"had not":["found","found"],"had nothing":["to"],"had occurred":["to"],"had originally":["considered","though,"],"had parentheses":["around"],"had played":["around"],"had plenty":["of"],"had problems":["using"],"had refactored":["count_list"],"had same":["readability."],"had some":["comments"],"had something":["cleverer"],"had that":["done","at","from"],"had the":["time","same","reverse","fun","first","same","same"],"had them":["in"],"had this":["function","idea,"],"had thought":["there'd","foldl'","of"],"had to":["implement","write","tackle","write","do","nitpick","import","do","convert","use","write","combine","pass","think","look","be","add","add","look","generate","use"],"had used":["the"],"had when":["I've"],"had which":["is"],"had wrapped":["(countWords"],"had written":["what's"],"haddock comments.":["This"],"haddock documentation":["on"],"haddock of":["Data.Map"],"hadn't considered":["that"],"hadn't had":["to"],"hadn't heard":["of","of","of"],"hadn't really":["sunk"],"hadn't seen":["Control.Arrow","that"],"hadn't thought":["of","of","of","of"],"hadn't when":["first"],"hah, I":["called","didn't"],"haha Haskell":["keeps"],"haha I":["didn't"],"haha good":["to"],"haha! Thanks":["a"],"haha, yep!":["thanks"],"half from":["memory,","random"],"half that":["many"],"halt: I":["was"],"halve the":["number"],"hammer available":["is"],"hammered trying":["to"],"hamming distance":["with"],"hammingDistance (a:as)":["(b:bs)","(b:bs)"],"hammingDistance ::":["String","Eq","String"],"hammingDistance =":["sum","(sum","(sum","(sum","length","go","((sum"],"hammingDistance a":["b"],"hammingDistance as":["bs","bs","bs","bs"],"hand I":["*know*","can"],"hand `add`":["is"],"hand aide":["of"],"hand in":["this"],"hand it":["does"],"hand right":["now"],"hand side":["which","may"],"hand side.":["This"],"hand this":["is"],"hand type":["encoded"],"hand very":["quickly."],"hand, compiler":["can"],"hand, if":["you"],"hand, it's":["generally"],"hand, not":["some"],"hand, they":["either"],"hand-holding to":["get"],"hand. I":["did"],"hand. It":["also"],"hand. This":["section"],"handful of":["functions,"],"handle all":["of"],"handle an":["empty","error","unexpected"],"handle converting":["`Nothing`"],"handle errors":["or","like"],"handle errors,":["but"],"handle invalid":["input"],"handle it":["in"],"handle it,":["if"],"handle on":["asymptotic","that;"],"handle such":["\"all-symbols\""],"handle that":["sans","in","manually"],"handle the":["null","empty","`Display`","null","```'T'```","fold","strictness","Nothing","`from..to`","nucleotideCounts,","letters","date","cases","error","`[]:qss`","\"Fine.","`Maybe"],"handle this":["not","is"],"handle three":["cases"],"handle two":["people"],"handled algebraically,":["@osborne"],"handled by":["the","`isAlphaNum`)."],"handled either":["it"],"handled for":["Illogical"],"handled in":["the"],"handled n":["="],"handled ok?":["I"],"handler (`all":["isSpace`)."],"handlers are":["reordered."],"handles Just/Nothing":["automatically."],"handles all":["cases,"],"handles an":["empty"],"handles caching":["functions"],"handles empty":["lists","lists.","lists"],"handles punctuation":["and"],"handles sorting,":["lowercasing"],"handles tabs":["and"],"handles that":["case","case"],"handles the":["case","first","very"],"handling `verse":["0`"],"handling a":["default"],"handling error":["chars?"],"handling has":["to"],"handling in":["Haskell."],"handling infinite":["inputs,"],"handling is":["still"],"handling of":["non-alphabetic","mutable","isAggressive","U"],"handling these":["conditions"],"handling via":["`error`"],"handling would":["be"],"handling. Probably":["doesn't"],"hands are":["tied."],"hands type":["it"],"handside of":["the"],"handwritten sing,":["also"],"handy function":["in","that","that"],"handy with":["Git"],"hang of":["this."],"hanging fruits":["for"],"hanging out":["in"],"hangover from":["an"],"happen at":["the"],"happen because":["of"],"happen before":["you"],"happen eagerly,":["and"],"happen if":["you","you","you"],"happen separately.":["If"],"happen to":["be","use.","use"],"happen until":["you"],"happen when":["all"],"happen would":["be"],"happen; usually":["I"],"happen? We":["can"],"happened to":["be","produce","`f"],"happening \"from":["the"],"happening but":["doing"],"happening clearer":["so"],"happening if":["you're"],"happening is":["because"],"happening to":["come"],"happening yesterday":["so"],"happening. I'll":["keep"],"happening? I'm":["using"],"happens I":["saw"],"happens at":["most"],"happens because":["it","of"],"happens behind":["the"],"happens here":["is"],"happens if":["you","you"],"happens in":["your","order."],"happens the":["two"],"happens to":["match","not"],"happens when":["the","you","you"],"happens which":["builds"],"happens with":["every"],"happens, \"not":["any\""],"happens. Thanks":["for"],"happier with":["this","pattern","this,"],"happy I":["understand"],"happy about":["checking","the"],"happy because":["I"],"happy to":["unlock","help.","help"],"happy with":["this","the","my","my","the","this","`hash`","explicit","this;","it","the","that.","reverse,","the"],"hard about":["how"],"hard as":["possible."],"hard code":["the"],"hard coding":["then"],"hard core.":[";P"],"hard disk":["is"],"hard for":["me","most","me","the","me:)","me"],"hard not":["to"],"hard on":["the"],"hard one":["as"],"hard time":["with","fitting","finding","convincing"],"hard to":["figure","nitpick.","generalize","do","read.","extend","read.","understand.","do","generalize","decide","fix","follow.","force","read","grok.","refactor","use","look","read","implement","say","follow.","grasp","take","measure."],"hard way":["with"],"hard-code the":["subtractive","results,"],"hard-coded 48":["and"],"hard-coded 48,":["I"],"hard-coded in,":["and"],"hard-coded solution":["and"],"hard-coding some":["unicode"],"hard-coding the":["uppercase"],"hardcoded charachers.":["Hint:"],"hardcoding like":["\"what"],"hardcoding special":["char"],"hardcoding, can":["you"],"hardcoding, it":["is"],"harder exercise":["than"],"harder for":["you"],"harder here":["regardless"],"harder parts":["of"],"harder than":["it,","bind."],"harder to":["follow.","read.","comprehend.","screw","reason","do","read","maintain,","parse","use","work","extend.","write","read.","implement","read","test,"],"harder without":["fully"],"hardest problem":["I've"],"hardest time":["with"],"hardly better":[":)"],"hardly have":["to"],"hardly worth":["mentioning."],"harm if":["the"],"harm in":["specializing"],"harmless. In":["this"],"has 0":["equal"],"has 2,":["and"],"has 3,":["so"],"has 4":["characters?"],"has ByteString.Short":["type"],"has O(N)":["complexity,"],"has O(N^2)":["complexity,"],"has O(n)":["complexity,"],"has `A":["|"],"has `False`":["in"],"has `even`":["and"],"has `replace`":["in"],"has a":["higher","clear","function","wordBy","different","`wordsBy`","`wordsBy`","type","`wordsBy`","wordsBy","simpler","handy","name.","fixity","method","few","particular","`wordsBy`","space","great","nice","great","great","great","nice","couple","great","different","name","nice","stack","higher","little","space","functor","great","`findWithDefault`","`wordsBy`","way","function","nice","nice","great","great","space","two","nice","name","space","great","great","`nub`","better","lower","very","minor","fantastic","NFData","very","function","space","`swap`","`wordsBy`","`fromListWith`","value-strict","[page","`wordsBy`","function","precedence","precedence","`wordsBy`","very","rewrite","function","\"not","LANGUAGE","higher","somewhat","module","useful","lot","nice","numeric","thunk","higher","nice","new-line","similar"],"has absolutely":["nothing"],"has all":["the","these","the","the","sorts"],"has almost":["no"],"has already":["been"],"has an":["isSpace","even","excellent","Enum","interesting","`insert`","additional","`on`","Integral","`unlines`"],"has another":["occurrence"],"has any":["nits"],"has at":["least"],"has been":["added","fixed","really","amazing","to","the","invaluable.","a","desugared.","eta","created"],"has better":["big","performance?"],"has both":["`null`"],"has by":["having"],"has certainly":["saved"],"has changed":["in","any"],"has defaults":["for"],"has defined":["behavior"],"has developed":["the"],"has different":["semantics."],"has dropped.":[":)"],"has everything":["that","you"],"has exact":["equivalents","equivalents"],"has exactly":["the"],"has explosions":[";)"],"has fewer":["candidates"],"has fromBool":["in"],"has function":["`isLetter`"],"has functions":["such"],"has gaps.":["I'd"],"has gone":["away."],"has great":["information"],"has guards":["and/or"],"has had":["a"],"has higher":["precedence","precedence","precedence","precedence","precedence","precedence","precedence","precedence","precedence","precedence"],"has invalid":["characters"],"has it's":["qualities"],"has it.":["http://www.haskell.org/haskellwiki/Performance/Data_types","I"],"has key":["and"],"has less":["chances"],"has linear":["complexity","complexity,"],"has little":["to","usefulness","to"],"has looked":["at"],"has lower":["precedence"],"has more":["information.","information","optimizations","to"],"has much":["of"],"has nice":["functions"],"has no":["uracil_","\"the","writing","up","runtime","set","place"],"has non-strict":["evaluation."],"has not":["changed."],"has nothing":["to","to","to","to"],"has numbers":["in"],"has one":["more"],"has optimizations":["for"],"has polymorphic":["map"],"has potentially":["bad"],"has predicates":["to"],"has really":["neatened"],"has severe":["performance"],"has similar":["functionality"],"has slightly":["different"],"has some":["strictness","better","good","functionality","useful","useful","functions","functionality","much","information","good","chars","machinery"],"has something":["more","to"],"has spaces":["and"],"has spent":["the"],"has suggestions,":["then"],"has the":["added","```words","same","highest","same","highest","same","benefit","functions","lowest","highest","right","same","`\u003c|\u003e`","highest","highest","highest","highest","highest","highest","highest","potential","strictness","highest","highest","initial","highest","highest","highest","highest","right","highest","right","highest","highest","higher","same","following","same"],"has time":["complexity"],"has to":["calculate","be","do","do","do","do","be","have","do","do","return","do","traverse","be","be","do","be","do).","be.","be","come","be","sort"],"has type":["`School`","`EitherT","`(.).(.)","`Char"],"has value-strict":["versions","versions"],"has very":["complicated","high","low","bad"],"has whitespace":["on"],"has yielded":["nothing"],"has, at":["least,"],"has, imho,":["the"],"hasUpper. The":["current"],"hash function":["from"],"hash is":["\"more"],"hashable. Hint:":["the"],"hashing (converting":["to"],"hashtable instead?":["the"],"haskell I've":["written"],"haskell and":["this","review"],"haskell basic":["libraries."],"haskell code":["ever.","that","that"],"haskell distribution":["is"],"haskell due":["to"],"haskell for":["the"],"haskell from":["academic"],"haskell functions":["and"],"haskell gives":["warnings","us,"],"haskell have":["something"],"haskell idioms,":["laziness,"],"haskell is":["put"],"haskell lazy":["evaluation"],"haskell magic,":["and"],"haskell memory":["boundaries"],"haskell noob,":["so"],"haskell platform":["so"],"haskell really":["knows"],"haskell so":["I"],"haskell stream":["fusion)"],"haskell style":["and"],"haskell this":["weekend."],"haskell to":["eta-reduce"],"haskell using":["exercism,"],"haskell will":["return"],"haskell with":["Data.Map.Strict,"],"haskell would":["do","have"],"haskell yet,":["but"],"haskell's libraries":["seem"],"haskell's non-strict":["evaluation"],"haskell, I'd":["much"],"haskell, i'll":["change..."],"haskell-mode in":["emacs"],"haskell-mode with":["haskell-mode-exts"],"haskell-mode-exts and":["it"],"haskell-platform is":["neither"],"haskell-platform using":["homebrew"],"haskell-untrained eye,":["this"],"haskell. Added":["pullrequest"],"haskell. Feel":["free"],"haskell. I":["like"],"haskell. I'll":["update"],"haskell.. I":["have"],"haskellers prefer":["[pointfree](http://www.haskell.org/haskellwiki/Pointfree)","[point-free"],"hassle, but":["I'll"],"hassle. But":["I"],"hat on":["and"],"hate mixing":["UI"],"hate the":["lines"],"hate using":["potentially"],"hates angle":["brackets,"],"hates me":["for"],"have \"clicked\"":["with"],"have \"finished.\"":["This"],"have \"separated-word\"":["be"],"have 2":["redundant"],"have 2D":["matrix"],"have 4":["guards)"],"have @rae":["to"],"have Bearing":["derive","also","derive"],"have DNA":["and"],"have HLint?":["I"],"have NFData":["instances"],"have O(1)":["lookup.","operation","on"],"have O(N)":["complexity,"],"have O(n)":["complexity?"],"have O(n^2)":["also"],"have Python":["equivalents."],"have Weekday":["derive"],"have `'V'":["-\u003e"],"have `(++)`":["in"],"have `Data.Map.Strict`.":["It's"],"have `Just":["[1]"],"have `Maybe`":["for"],"have `[Base]`.":["You"],"have ```sort":["$"],"have `a`":["value"],"have `anagramsFor":["word"],"have `any`,":["`all`,"],"have `containers-0.5.0.0:Data.Map.Base.Map":["Char"],"have `count`":["for"],"have `f":["x","x"],"have `foo":["|"],"have `isNaN`,":["`isInfinite`,"],"have `isSeparator`":["be"],"have `isShout":["="],"have `isShouting`":["in"],"have `isUpper`":["already"],"have `mx":["::"],"have `normalizeWord`":["instead"],"have `prettyPrint'`":["and"],"have `randomString":["="],"have `sayNothing`":["first,"],"have `start":["\u003e"],"have `toEnum`,":["`fromEnum`,"],"have `toLower'":["a"],"have `turnLeft`":["and"],"have `unlines":["[firstPart,"],"have a":["faster","better","look","default","function","better","different","problem","unique","play","built","bad","smart","`where`","cool","`shouting`","type","binding","name...","function","name","new","look","Nil","fixed","space","type","type","lot","clue","partial","larger","type","lot","think.","corresponding","problem,","problem.","type","type","good","slightly","non-overlapping","string","search","compare","default","type","hard","`DNA","go,","measurable","better","go.","great","clue","think","quite","meaningful","case","function","second","type","great","very","name","String.","hard","finite","prefix","space","go","clear","word","clue","look","function","line","good","space","NFData","precedence","more","feeling","`Map","much","rule","look","specific","type","pretty","lot","list","go","type","'thunk'","String","space","short","way","clear","clearer","suggestions.","space","type","space","reference","linearly","space","bad","number","top-level","Just.","list","lot","link","question,","lot","new","lot","higher","solution","result","clue","type.","lot","look","better","comprehension","go","strong","top","type","great"],"have access":["to"],"have actually":["gone"],"have aliased":["`School`"],"have all":["the","of"],"have almost":["every"],"have already":["checked","been","been"],"have also":["seen"],"have always":["to"],"have an":["'implies'","older","older","`isYelling`,","explicit","uppercase","awfully","excuse","explicit","explicit","alternative","IORef","initial","idea....","explicit","issue","`error`","empty"],"have another":["function","go","clause","catch-all","go"],"have any":["clue","suggestions","special","guarantee","way","arguments.","performance","arguments,","amount"],"have as":["a","much","good"],"have at":["maximum,"],"have avoided":["that"],"have bad":["memory"],"have been":["some","fine.","able","the","better,","submitted","nice","banished.","implemented","constructed","just","able","more","the","better","to","reading","written","written","great","to","in","some","doing"],"have been.":["(you"],"have better":["(a","distribution","memory","complexity","both"],"have blank":["Chars"],"have by":["staying"],"have certain":["behavior"],"have changed":["since","this"],"have chosen.":["`s`"],"have coalesced":["around"],"have code":["readable,","duplication.."],"have completed":["more"],"have composable":["mutability"],"have considered":["strings"],"have convert":["take"],"have coordinates":["pair"],"have correspond":["read"],"have deadlocks.":["STM"],"have decent":["performance"],"have dependency":["in"],"have describe":["it."],"have destroyed":["it."],"have different":["names","lengths","implementations).","opinion"],"have done":["toRNA","the","before.","it","here.","in","that","there.","if"],"have dropped":["the"],"have duplicate":["nodes."],"have effects.":["The"],"have emoji":["now?"],"have empty":["strings"],"have ensured":["that"],"have equal":["length,"],"have error":["used"],"have everything":["you","to"],"have exhaustive":["pattern"],"have explicit":["type","type"],"have figured":["out"],"have finally":["setup"],"have fired":["if"],"have first":["value"],"have fixed":["the"],"have for":["this","what"],"have fun":["with","with"],"have functionally":["same"],"have gone":["with","overboard","for","with","overboard","a"],"have good":["modes","use"],"have got":["your"],"have great":["combinators"],"have guaranteed":["that"],"have guards":["return","return","too,"],"have heard":["so"],"have helped":["there."],"have here":["but"],"have here).":["Can"],"have higher":["precedence","precedence","precedence"],"have identical":["names"],"have immutable":["data"],"have implementation":["details"],"have implemented":["your","the","`nucleotideCounts`"],"have imported":["the"],"have improved":["my"],"have in":["the","the","the"],"have inlined":["the"],"have is":["that","the","in","one","\u003e=","that"],"have it":["be","there.","do?","as","working","in","in","aligned"],"have it,":["but"],"have it.":["Easy"],"have just":["written"],"have known":[":)"],"have less":["hardcoding.","code"],"have liked":["to"],"have linear":["search,"],"have liner":["complexity."],"have list":["of"],"have little":["one-line","bit"],"have locks":["or"],"have longer":["and"],"have looked":["better,"],"have looks":["acceptable"],"have lower":["precedence"],"have made":["sense","it","my","this","things","fancyWords","a"],"have mentioned":["`foldl'`","it"],"have modified":["it."],"have more":["than","than","than","spaces","clean","intuition","chances"],"have much":["to","to","to"],"have multiple":["values,","guards","generators,","generators,"],"have mutable":["state,","variable"],"have n*m":["elements"],"have named":["`transformThymidine`","functions"],"have nearly":["the"],"have never":["come","used","seen"],"have no":["nits","idea","nits","idea","better","idea","spaces","idea","name.","problem","idea","idea","idea","clue","idea","lists","thunk","exact","benefits","trouble","such","ideas","windows","recursion","idea","idea"],"have non-obvious":["behavior,"],"have not":["solved","realized","considered","checked"],"have nothing":["to"],"have noticed":["the"],"have now":["since"],"have one":["line","minor","function","instead","of","transaction"],"have only":["two","read","one","one","one","one."],"have optimizations":["on,"],"have optimized":["`grade`"],"have other":["potential","fields","strange"],"have otherwise":["be"],"have partial":["functions"],"have patten":["match"],"have predicted":["that"],"have preferred":["to"],"have probably":["added"],"have problems":["when"],"have propagated":["from"],"have proper":["indentation."],"have properly":["assimilated"],"have provided":["to"],"have put":["the"],"have python":["to"],"have reached":["the","that"],"have read":["the","that","the"],"have reference":["links"],"have remembered":["`foldl'`"],"have retained":["`rnaNucleotides`"],"have reverted":["back"],"have right":["now)"],"have rows":["of"],"have said,":["just","you"],"have same":["complexity"],"have save":["time."],"have scanned":["things"],"have scoreLetter":["take"],"have seemed":["way"],"have seen":["use","it","a"],"have several":["solutions"],"have sides":["that"],"have signatures":["in"],"have simply":["substituted"],"have so":["much","many"],"have solutions":["without"],"have solved":["this"],"have some":["nice","failing","subtleties","questions:","function","other","unused","more","case","redundant"],"have something":["to","else","better.","like","to","to"],"have spaces":["around","just","on"],"have spent":["some"],"have stated":["that","is"],"have strange":["layout."],"have styles":["for"],"have submitted":["an"],"have such":["long","pattern,"],"have support":["for"],"have syntax":["for"],"have tail-recursive":["function"],"have take":["outside"],"have technically":["been"],"have that":["problem.","module","advantage.","yet","problem.","and"],"have the":["same","time","latest","same","one,","intuition","constructor","otherwise","data","compiler","highest","message","same","behavior","highest","newer","same","right","sorted","parentheses","compiler","problem","strict","same","logic","latest","length","`Sch`","second","chance","predicate","right","functions","same","function","arguments","issue.","definition","same","same","not","desired","property","same","other","same","Haskell","accumulator","same","option","minor","option","same","same","type","same","default"],"have their":["types"],"have them":["without","for","listed","here.","in"],"have there":["now"],"have these.":["Nearly"],"have things":["done"],"have this":["lazy-evaluation","come","feeling","sequencing)."],"have those":["haskell","packages"],"have thought":["to","of"],"have three":["elements."],"have thunk":["leak,","leaks"],"have time":["to"],"have time,":["Chapter"],"have to":["explicitly","sort","add","read","either","do","force","traverse","repeat","admit,","do","special","special","split","repeat","repeat","evaluate","traverse","ensure","tell","write","use","check","traverse","change","edit","scan","do","be","write","compose","replace","do","name","replace","use","warn","pattern","use","traverse","track","write","fall","evaluate","explicitly","make","remember","repeat","define","scroll","know","support","dig","write","add","write","be","treat","enable","agree","do","change","flip","look","know","study","do","pass","write","be","do","kick","repeat","take","use","`map`","expose","read","pick","create","know","do","do","say","agree","do","suggest","be","make","calculate","build","scan","evaluate","bounce","receive","deduce","create","think","add","be","convert","encode","merge","know","turn","use","suffer","repeat","admit","`fmap`","have","bother","traverse","be","study","ensure","deal","indent","try","add","ident","iterate","be","be","traverse","read","indent","allocate","do","put","read","all","read","read","traverse","use","build","be","stop","use","check","count","force","passes","read","have","deduce","be","validate","hard","provide","do","provide","empty","provide","actually","take","build","steal","upgrade","add","be","traverse","single","single","refer","wait","add","barely"],"have to,":["you"],"have toAscList":["function."],"have toList":["for","for"],"have too":["many"],"have total":["functions)."],"have toy":["problems"],"have tried":["to"],"have trouble":["(not"],"have two":["problems.","guards","clauses","strings","threads","functions"],"have type":["signatures","signatures","`[String]`","safety","signatures","signature","signatures.","signatures.","signatures,","signatures.","signatures.","signatures","signatures","`Int","signatures","signatures,","signatures.","signatures,","signatures","signatures.","signatures.","signatures","signatures","`Char","signatures.","signatures.","signatures,","signatures."],"have unused":["imports.","`isSquare`"],"have updated":["test"],"have uploaded":["a"],"have used":["before.","pattern","`randomRIO`","the","is","a","your","would","this","`isSuffixOf`","`wordsBy","it","```Data.Map.Strict```","testBit"],"have verseComponents":["return"],"have very":["bad"],"have waited":["for"],"have well-defined":["interfaces."],"have wider":["use"],"have with":["this","`ghc-pkg"],"have worse":["behavior"],"have written":["`(x:xs)`","toRNA"],"have written,":["but"],"have yet":["to"],"have you":["looked","abandoned","considered"],"have zero":["excuses"],"have, following":["field"],"have, for":["good"],"have, likely":["including"],"have, or":["Enum's"],"have. Anyway,":["I"],"have. You":["could"],"have... is":["it"],"have: `(not":["."],"haveUpper \u003c*\u003e":["allUpper"],"haven't actually":["compiled/run,"],"haven't been":["getting","able","able","doing"],"haven't checked":["out"],"haven't done":["any"],"haven't found":["a"],"haven't grokked":["infixing."],"haven't heard":["the"],"haven't learned":["enough"],"haven't liked":["writing"],"haven't looked":["at"],"haven't mentioned":["it"],"haven't noticed":["nice"],"haven't quite":["properly","digested"],"haven't really":["comprehend"],"haven't rechecked":["it."],"haven't responded":["yesterday.."],"haven't run":["it)."],"haven't seen":["it","it","before."],"haven't taken":["the"],"haven't tried":["using","to","is"],"haven't used":["Haskell's"],"haven't worked":["out","out"],"haven't yet":["divined","wrapped"],"haven't. Thanks":["for"],"having `$`":["everywhere."],"having `isQuestion`":["check"],"having `length":["digits`"],"having `nuke`":["in"],"having `sort":["w"],"having a":["function","`Char","case","recursive","lot","guard","nucleotide","fast","fast","single","function"],"having access":["to"],"having accumulator":["on"],"having an":["upper"],"having conditions":["for"],"having decent":["libraries"],"having difficulty":["benchmarking"],"having done":["any"],"having exactly":["the"],"having fewer":["optimisations,"],"having functions":["that"],"having it":["non-strict?"],"having lots":["of"],"having no":["overlapping"],"having one":["line"],"having parentheses":["to"],"having private":["functions"],"having read":["the"],"having right":["and"],"having seen":["the"],"having something":["that"],"having strict":["value"],"having that":["information"],"having the":["line","hardest","gaurds","intermediate","position","tests","same","symmetry","four"],"having them":["ready-baked.","inline","explicitly","all","as"],"having this":["kind"],"having those":["two"],"having to":["repeat","refer","type","call","worry","read","type","name","convert","match","be","traverse","rethink","write","map","search","use","write","write","follow"],"having trouble":["with","with","with"],"hayoo for":["```(a"],"haystack are":["equal)."],"hdevtools and":["vim-hdevtools,"],"hdevtools did":["not"],"hdevtools for":["your"],"he has":["developed"],"he is":["easily"],"he means":["by"],"he says":["\"Whatever.\""],"head $":["dropWhile","dropWhile"],"head &&&":["length"],"head a":["=="],"head and":["created","`xs`","tail"],"head around":["the","the","`(.)"],"head at":["this","once,"],"head digits":["==","=="],"head even":["though"],"head first,":["and"],"head for":["some"],"head inside":["guard."],"head normal":["form"],"head of":["the","the","the","the","the","the","the"],"head phone":["=="],"head that":["once"],"head to":["`go"],"head when":["you're"],"head) g":["[name]"],"head, and":["I"],"head. dropWhile":["and"],"head` and":["then"],"header at":["the"],"heads for":["this,"],"heads, guards":["(these"],"headsup. Guess":["I"],"headway in":["this."],"heap overflow":["in"],"hear about":["it!"],"hear if":["this"],"hear thoughts":["about"],"hear you":["on"],"hear your":["points"],"heard of":["that.","that","that"],"heard so":["far,"],"heard the":["term"],"heard to":["google."],"hearing about":["redundant","extra"],"heavily on":["`do`"],"heavily relies":["on"],"heavily type":["driven"],"heavy code":["but"],"heavy trade":["off"],"heavy weather":["of"],"heavy, you":["don't"],"heavy. Plus":["`Data.List`"],"heavyweight would":["be"],"heck of":["a"],"heh, updated":["to"],"hehehe, only":["4"],"held there,":["as"],"hell is":["```closeAccount```"],"hell. I":["think"],"help (see":["previous"],"help as":["the"],"help at":["all."],"help but":["feel","feel","feel"],"help clean":["up"],"help from":["`Control.Arrow`):"],"help here":["if","just"],"help make":["it","it","this"],"help man,":["I"],"help me":["much","exercise","clean","in","?","reach","better","out!","understand"],"help much":["here,"],"help much.":["The"],"help on":["this"],"help people":["dig"],"help protect":["you"],"help quite":["a"],"help readability":["IMO."],"help shorten":["things"],"help simplify":["your"],"help solve":["that"],"help that":["is"],"help the":["code,"],"help to":["load","think","factor"],"help with":["that.","a","the","what"],"help you":["understand","sort","if","to","get","make","make","make","write","think","get","with","much","understand","avoid"],"help you,":["with"],"help! The":["pointer"],"help. I":["really"],"help. I've":["got"],"help... but":["not"],"helped clarify":["my"],"helped me":["find"],"helped my":["implementation"],"helped to":["improve"],"helped. The":["penny"],"helped. initially":["i"],"helper as":["suggested"],"helper function":["in","to","that","(http://exercism.io/submissions/523d5d6d603aa67ff90000ff)","that,","be","to","of","for"],"helper function.":["If","Much"],"helper functions":["toward","at","into","and","(like","`silence`,","into","out","their","but","a","`isNothing`","that","under","under","under"],"helper functions),":["then"],"helper functions,":["a"],"helper functions.":["It's"],"helper on":["a"],"helpers are":["part","operating"],"helpers for":["their","`responseFor`.","the"],"helpers instead":["of"],"helpers themselves":["weren't"],"helpers top-level":["based"],"helpers with":["an"],"helpful (see":["my"],"helpful about":["explaining"],"helpful advice":[":)"],"helpful article":["on"],"helpful for":["you."],"helpful hints!":["Thanks"],"helpful in":["`sing`"],"helpful to":["keep","change","me."],"helpful when":["trying","you"],"helpful with":["this"],"helpful! I've":["experimented"],"helpful, @diamond.":["I'll"],"helpful, also":["reading"],"helpful, but":["I"],"helpful, the":["order"],"helpful. I'm":["going"],"helps a":["little","little"],"helps considerably":["with"],"helps demystify":["it"],"helps here.":["Not"],"helps make":["the"],"helps me":["greatly"],"helps much,":["`filter"],"helps much.":["This"],"helps now.":["It"],"helps readers":["to"],"helps when":["you"],"helps with":["readability","understanding"],"helps you":["to","write","very"],"helps... but":["not"],"hence I":["do"],"hence resulting":["in"],"hence this":["solution."],"here (bearing":["in"],"here (even":["if"],"here (just":["match"],"here (nor":["is"],"here (or":["saves"],"here 18":["splitted"],"here :":["`inSeconds"],"here Data.Map.Strict":["as"],"here I":["wasn't","think"],"here about":["readability,"],"here actually":["has"],"here after":["finishing"],"here allows":["us"],"here and":["pull","just","the","the","`Data.Map.Strict`","have","`IORef`"],"here are":["naming","intended","not","the","the","so","implementation","implemented","not","pretty","the","superfluous","superfluous,"],"here as":["with","the","the","well.","well,","well.","it"],"here at":["all,","all"],"here because":["it","it","we","you","of","I"],"here but":["avoid","looks","maybe","I'm","I'm"],"here can":["be"],"here could":["be"],"here doesn't":["serve"],"here don't":["do"],"here either":["way."],"here for":["the","easy","mine:","`toRNA`,","that","`isAnagramOf`","giving","one","time"],"here from":["@demetrius."],"here give":["the"],"here handles":["the"],"here if":["one","you","you","you","you","you"],"here in":["my","one"],"here instead":["of"],"here is":["type","good.","a","to","an","actually","pretty","good","to","to","clever,","very","zipWith","straightforward","strictly","a","that","around","also","really","a","that","the","to","that","to","that","that","sound,","that","to","that","unusual,","incorrect,","a","the","to","to","the","that","why","that","to","to","to","that","switch","that","that","that","that","non-standard.","applied","`foldl'`","that","also","related","that","that","to","to","a","that","excellent.","an","mostly","that","great.","quite"],"here isn't":["typically","where","quite"],"here it":["is","is","would","is:","seems"],"here it's":["used"],"here just":["a"],"here looks":["good","good","good","good","reasonable","good","pretty","pretty","good","good.","good,","good","good","good","like","just","quite"],"here made":["me"],"here may":["add"],"here might":["be"],"here much,":["but"],"here no":["parenthesis"],"here on":["the"],"here once":["you"],"here or":["something"],"here other":["than","than"],"here regardless":["of"],"here seems":["to"],"here should":["probably"],"here since":["`==`","Data.Map","String","Robot's"],"here so":["maybe","you","that"],"here still":["works)"],"here that":["you","many","guard","are","you","could","is","could","I","you","are","you"],"here the":["tradeoff"],"here they":["only"],"here to":["start","implement","make","\"invoke\"","improve","complain","guarantee","group"],"here too,":["`sequence`","they're","to"],"here unless":["you"],"here was":["just","to"],"here we":["don't"],"here will":["manifest","help"],"here with":["this","lambda","`possiblePrimes`"],"here would":["be","be","be","be"],"here you":["are","don't"],"here! The":["only"],"here's a":["few:","gist):","few","question:"],"here's an":["example","example"],"here's another":["version.","solution","one"],"here's one":["way:"],"here's the":["docs:","first","-O2"],"here's what":["that","silence"],"here) (`succ":["Sunday"],"here) actually":["does"],"here) is":["more"],"here) you'll":["need"],"here). Can":["be"],"here). Here":["are"],"here, I":["see","just"],"here, IMO,":["is"],"here, `foldl'`":["only"],"here, a":["list"],"here, and":["what","this"],"here, as":["`unlines`","currect","you","usually"],"here, but":["everything","I","the","`not","there's","in","I","I","thanks","my","I"],"here, but,":["as"],"here, definitely":["better"],"here, except":["that"],"here, foldl'":["from"],"here, for":["example"],"here, in":["Haskell"],"here, it":["could","might"],"here, it's":["only","redundant","really","above","optimized"],"here, just":["indent"],"here, many":["miss"],"here, mod4":["means"],"here, most":["importantly"],"here, returning":["the"],"here, right?)":["less"],"here, since":["the","Haskell","you","it's","`!(Int,","keeping"],"here, so":["prepending"],"here, something":["is"],"here, such":["as"],"here, thanks":["for"],"here, that":["part"],"here, the":["prefix","whole","only","actual","implementations","right"],"here, there":["is","are"],"here, there's":["a"],"here, this":["code","implementation"],"here, to":["clarify"],"here, usually":["folds"],"here, which":["GHC"],"here, would":["be"],"here, you":["can","really","can","likely","really","should","may","may","may","should"],"here- but":["why"],"here. \"There":["are"],"here. A":["good"],"here. All":["top-level"],"here. Almost":["everyone"],"here. Another":["thing","choice"],"here. As":["is,"],"here. At":["one"],"here. But":["I"],"here. Consider":["that"],"here. Data.Map.Strict":["is"],"here. Enum":["typeclass"],"here. First":["I"],"here. From":["the"],"here. However,":["it's"],"here. I":["know","think","ported","showed","think","did","simply"],"here. I'm":["going"],"here. If":["you"],"here. Input":["validation"],"here. Isn't":["`words"],"here. It":["can"],"here. It's":["generally","nice","a","not"],"here. Most":["Haskell"],"here. My":["bad."],"here. No":["reason"],"here. Not":["only"],"here. Reading":["STM"],"here. Seemed":["pretty"],"here. Seems":["because"],"here. Since":["function"],"here. Take":["a"],"here. Thanks":["a"],"here. The":["call","algorithm","use","alternative","solution","parens"],"here. There":["is"],"here. There's":["also"],"here. What":["do"],"here. Why":["not","not"],"here. Would":["it","I"],"here. You":["also","should","can","might"],"here. You're":["done!"],"here. Your":["code","code"],"here. `foldl`":["is"],"here. `isQuestion":["\"\""],"here. `normalizedX`":["is"],"here. deriving":["Enum"],"here.. myabe":["you"],"here... it":["would"],"here.... Can":["you"],"here: you":["can"],"here: you're":["constructing"],"here? How":["does"],"here? I":["still","think"],"here? Is":["it"],"here? It's":["clear"],"here? Its":["possible"],"here? Other":["than"],"here? You":["could"],"heredoc handling":["in"],"heroic detail!)":["but"],"herring, you":["shouldn't"],"hesitant to":["name","reinvent"],"hesitated to":["put"],"heuristic by":["separating"],"heuristic on":["each"],"heuristics. Which":["are"],"hexCharToInt in":["such"],"hexadecimal conversion":["problem"],"hexadecimal tasks.":["Or"],"hexadecimal would've":["been"],"hiatus, I":["finally"],"hidden inside:":["http://hackage.haskell.org/packages/archive/random/1.0.1.1/doc/html/src/System-Random.html#theStdGen"],"hide away":["implementation"],"hide explicit":["recursion"],"hide it":["from"],"hide the":["details.","functionality"],"hiding (words)`":["is"],"hiding (words)`).":["You"],"hiding internals":["of"],"hierarchy. Perhaps":["Haskellers"],"high level,":["very"],"high order":["stuffs"],"high praise":["coming"],"high precedence":["(the"],"high-level content":["of"],"higher fixity":["than"],"higher level":["facilities,","`fromListWith`.","type,","combinators","combinator?","combinators","functions","functions","functionality","functionality","functions,","functionality","combinators","combinator","combinators","in","way","combinators","combinators","function","functions.","functions"],"higher level,":["a"],"higher level.":["This","Let"],"higher order":["functions","function","function","combinators","combinators","combinators","combinators","functions","function","function","function"],"higher precedence":["than","than","than","than","than","than","than","than","than","than","than","than","than","than","than","than","than","than","than","than","than","than","than","than","than"],"higher than":["the"],"higher-level combinators":["instead"],"higher-level constructs,":["which"],"higher-level functions":["in"],"higher-level stuff":["that's"],"higher-order function":["to","that","instead"],"higher-order functions":["like"],"higher-order functions,":["like"],"higher-order functions--they're":["usually"],"higher-order functions.":["This"],"highest (if":["you"],"highest available":["for"],"highest operator":["precedence"],"highest precedence":["you","and","in","and","and","and","and","in","and","and","and","in"],"highest precedence,":["so","so","so","and","so","so","so"],"highest precedence.":["Looks","Also,","Using"],"highest, but":["still"],"highest, operators":["are"],"highlight an":["alternative"],"highlight any":["potential"],"highlight effects":["for"],"highlight just":["the"],"highlight quirks,":["but"],"highlighted as":["expected."],"highlighted is":["because"],"highlighting went":["nuts,"],"highly optimized":["and"],"highly recommend":["that","this","reading","reading","this","it.","this","this","this","this","this","this","reading","this","this","reading"],"him the":["silent"],"him, or":["giving"],"him, questioning":["him,"],"hinder. I":["also"],"hint (mainly":["because"],"hint (sorry":["I"],"hint and":["have"],"hint at":["the","Iteration"],"hint for":["it"],"hint here":["is"],"hint how":["to","to"],"hint if":["needed."],"hint is":["usually..I"],"hint on":["where"],"hint that":["puts","the"],"hint to":["consider","do"],"hint was":["too"],"hint, the":["best"],"hint. Think":["about"],"hint: Data.List":["has"],"hint: `randomRIO`'s":["range"],"hint: it's":["bad"],"hint: you":["might"],"hinting about":["stream"],"hints I":["left"],"hints and":["pointers"],"hints for":["sure."],"hints how":["this"],"hints if":["they"],"hints made":["it"],"hints on":["the"],"hints or":["pointers"],"hints! Thanks":["@maybelle"],"hints). Can":["you"],"hints, or":["will"],"his auto-magically":["for"],"history of":["a"],"hit me":["up"],"hit on":["approaching"],"hit or":["miss,"],"hit the":["wrong"],"hit you":["up"],"hits `last":["s`."],"hits the":["isAnagram"],"hitting an":["error"],"hlint and":["ghc:"],"hlint but":["I"],"hlint suggests":["this"],"hlint warning":["for"],"hlint would":["warn","probably"],"hlint, the":["documentation,"],"hm.. I":["had"],"hmm, not":["sure"],"hmm. Yes":["I"],"hmm. i":["might"],"hmm.. I":["think"],"hold an":["int."],"hold on":["how"],"hold only":["when"],"hold you":["up"],"holdover from":["the"],"holds nonetheless.":[":)"],"holds the":["thunk"],"hole pretty":["easily."],"holes in":["the"],"home again.":["Otherwise"],"home late":["last"],"homebrew on":["my"],"honest I'm":["lying"],"honest, i":["think"],"honestly do":["think"],"honestly not":["sure"],"honing my":["ability"],"hood on":["something"],"hoogle and":["hayoo"],"hoogle for":["some"],"hoogled \"(a,b)":["-\u003e"],"hope I":["can"],"hope I'm":["not"],"hope `stigid`":["isn't"],"hope it":["helps.","helps."],"hope it's":["better"],"hope my":["answer"],"hope of":["making"],"hope that":["one"],"hope this":["is"],"hope you'll":["allow"],"hoped someone":["might"],"hoped to":["learn"],"hopefully being":["idiomatic."],"hopefully it":["won't"],"hopefully optimal)":["approach"],"hopefully others)":["can"],"hopefully produce":["more"],"hopefully that":["won't"],"hopefully you":["haven't"],"hopelessly for":["the"],"hoping for":["fusion","fusion"],"horizontal leeway":["as"],"horizontal space":["in"],"horizontally to":["read."],"horrible in":["some"],"horrible unreadable":["brackets"],"horribly inefficient,":["but"],"horribly slow,":["hence"],"horrid in":["practice,"],"hour trying":["to"],"hour-long [video":["on"],"how \"haskell\"-like":["this"],"how \"splitting":["a"],"how (e.g.":["I"],"how Bounded":["eliminates"],"how Data.Map.Strict":["would"],"how GADTs":["can"],"how Haskell":["handles"],"how Haskell's":["non-struct","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","evaluation","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","lazy","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","optimisation","non-strict","non-strict","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","evaluation","non-strict","non-strict","non-strict"],"how I":["feel","did","feel","did","did","could","can","did","should","implemented","did","found","would","ended","understand","can","missed","ended","would","could","could"],"how I'd":["got","do","code"],"how MVar":["+"],"how Map.fromListWith,":["it"],"how RNA":["transcription"],"how ShowS":["works."],"how Traversable":["works"],"how [`sum`":["is"],"how `System.Random`":["works."],"how `[1..dv]":["\u003e\u003e="],"how ```words```":["was"],"how `all`":["handles"],"how `anaGramOfX`":["is"],"how `chunksOf`":["could"],"how `fromListWith`":["uses"],"how `meetupDay`":["is"],"how `yelling`":["is"],"how a":["combination","larger"],"how a).":["fractional"],"how about":["`isSpace`","simply"],"how all":["this"],"how at":["the","least"],"how awful":["it"],"how bad":["it"],"how best":["to","to","to"],"how binary":["works."],"how both":["`isLower`","`isAsciiUpper`","isUpper","isUpper"],"how can":["I","normalizedX","you","I","I","I"],"how clean":["would"],"how complex":["the"],"how comprehensive":["the"],"how concurrent":["access"],"how deep":["it"],"how do":["actually","you","I","I","I","I","I","I","use"],"how does":["it","it"],"how easily":["you"],"how evaluation":["works:","works"],"how explicit":["it"],"how extracting":["it"],"how fast":["this"],"how ghc":["prints"],"how good":["it"],"how guard":["clauses"],"how i've":["done"],"how idiomatic":["this"],"how if":["sorted"],"how indenting":["is"],"how inefficient":["it"],"how is":["it","this"],"how it":["could","would","looked:","works,","worked.","could","will","gets","works).","pans","works.","would","is","works","works...","would","works..","should"],"how it's":["going","preferred."],"how laziness":["fares"],"how lazy":["evaluation","evaluation"],"how legible":["that"],"how little":["impact"],"how long":["it"],"how many":["times","people","keys","times","full-size","days","of","times","chars","cpu"],"how maps":["work."],"how much":["a","simpler","memory","I","better","slices"],"how multiplying":["5"],"how my":["brain"],"how negative":["numbers"],"how non-strict":["evaluation","evaluation","evaluation","evaluation"],"how null":["comps'"],"how often":["this"],"how other":["than","FP"],"how others":["did","solve"],"how quickly":["you"],"how readable":["the","the"],"how resetName":["and"],"how semantic":["Haskell's"],"how smart":["the","or"],"how that":["would","would","would","implementation","works."],"how the":["unfamiliar","test","other","tests","semantics","code","word-count","order","Haskell","compiler","Random","laziness","original","'namespace'","evaluation","pattern","stack","code","lazy"],"how there":["could"],"how these":["concepts"],"how they":["work,","could","work","are"],"how things":["are","work.","are"],"how this":["site","could","could","got","can","can","could","kind","works","relates","would","works,"],"how thunks":["are"],"how to":["omit","effectively","get","cache","respond,","utilize","delete","add","do","remove","use","correctly","use","rewrite","get","use","get","do","name","make","put","ensure","improve","do","write","make","make","make","line","learn","escape","pass","get","do","get","control","pattern-match","change","write","build","use","pick","use","write","do","make","get","clean","avoid","use","get","do","perform","do","avoid","make","do","be","implement","choose","do","handle","install","code","make","escape","use","make","emulate","improve","do","do","do","do","make","create","stub","tell","read","combine","write","apply","handle","apply","implement","\"use\"","do","\"pull\"","write","write","manage","actually","make","move","get","accumulate","get","so","do","do","evaluate","evaluate","abstract","do","get","write","do","finish","improve","deal","lead","do","use","guarantee","generalize","\"time\"","split","do","do","do","do","accomplish","rewrite","get","express","make","do","do","actually","do","eta-reduce","do"],"how to.":["Also,"],"how types":["are"],"how ugly":["it"],"how unused":["variables"],"how useful":["isAnagram"],"how we":["could"],"how would":["i","I","you","I","this","that"],"how yet.":["I"],"how you":["might","could","split","can","took","could","would","divided","simplified","solved","are","might","might","can","implemented","check","can","wrote","did","might","took","only","can","could","have","can"],"how you're":["calculating"],"how your":["`guard`"],"how, in":["a"],"how. Also,":["does"],"how. Otherwise":["I"],"how. Probably":["should"],"however -":["\u003ccode\u003ea"],"however Data.Text.map":["can"],"however I":["think"],"however I've":["seen"],"however [from,from-1..to]":["will"],"however `isNil`":["function"],"however `not":["(isLower"],"however detects":["deadlocks"],"however if":["it","it","it","you","you"],"however in":["this"],"however it":["will"],"however it's":["possible"],"however its":["easier"],"however more":["wordy"],"however requires":["the"],"however text":["only"],"however that":["Haskell"],"however the":["building"],"however there":["is","will"],"however using":["int","show"],"however with":["lazy"],"however you":["want","still"],"however, I":["think"],"however, a":["bit"],"however, even":["easier"],"however, in":["this"],"however, it":["does"],"however, it's":["a"],"however, you":["will"],"however. Why":["not"],"hrmm. So":["I"],"http://book.realworldhaskell.org/read/profiling-and-optimization.html (some":["of"],"http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf (for":["how"],"http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf -":["many","also","also","also"],"http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf for":["more","more"],"http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf has":["a"],"http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf –":["Note","the","another"],"http://exercism.io/submissions/523f9cc1f90faad79e0000ae did.":["Strictness"],"http://hackage.haskell.org/package/base-4.0.0.0/docs/Data-IORef.html also":["System.Random"],"http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Char.html to":["see"],"http://hackage.haskell.org/package/base-4.6.0.1/docs/src/Data-List.html#transpose (if":["you"],"http://hackage.haskell.org/package/containers-0.5.3.1/docs/src/Data-Map-Base.html#insert for":["an"],"http://hackage.haskell.org/package/containers-0.5.3.1/docs/src/Data-Map-Base.html#line-95 (although":["most"],"http://hackage.haskell.org/package/containers/docs/Data-Sequence.html and":["if"],"http://hackage.haskell.org/package/criterion is":["probably"],"http://hackage.haskell.org/package/deepseq for":["a"],"http://hackage.haskell.org/package/deepseq/docs/Control-DeepSeq.html and":["consider"],"http://hackage.haskell.org/package/split package":["and"],"http://stackoverflow.com/questions/19958897/return-whats-going-on-here/19959139?noredirect=1#19959139 .":["Complicated"],"http://stackoverflow.com/questions/8235797/is-foldl-ever-preferable-to-its-strict-cousin-foldl ...":["on"],"http://stackoverflow.com/questions/841851/how-do-you-combine-filter-conditions though":["I"],"http://whathecode.wordpress.com/2013/02/16/camelcase-vs-underscores-revisited/ in":["my"],"http://www.cs.hmc.edu/~oneill/code/haskell-primes.zip after":["my"],"http://www.haskell.org/ghc/ :?":["for"],"http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html to":["memory"],"http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl' (for":["more"],"http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl' for":["more","a"],"http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl' –":["however,"],"http://www.haskell.org/haskellwiki/List_instance might":["help"],"http://www.haskell.org/haskellwiki/Pointfree probably":["has"],"http://www.haskell.org/haskellwiki/Stack_overflow --":["the"],"http://www.haskell.org/haskellwiki/Stack_overflow about":["the"],"http://www.haskell.org/haskellwiki/Stack_overflow is":["\"The","\"The","\"The"],"http://www.haskell.org/onlinereport/decls.html#field-labels –":["you're"],"http://www.haskell.org/tutorial/numbers.html has":["some"],"https://github.com/NICTA/course that":["is"],"https://github.com/exercism/exercism.io/pull/1070 adds":["another"],"https://www.haskell.org/haskellwiki/Fold. Hopefully":["it's"],"huge benefit":["to"],"huge chain":["of","of","of","of","of","of","of"],"huge difference":["between","but",":)","here"],"huge difference,":["but"],"huge fan":["of","of","of","of","of","of"],"huge jump":["in"],"huge savings":["in"],"huge thunk":["leak,","like:"],"huge. `unlines`":["looks"],"hugs has":["had"],"huh, that's":["good"],"huh. I":["must've"],"human can,":["too."],"human reading":["the"],"hundreds/tens/units tables":["but"],"hung up":["thinking"],"hunit 1.2.5.1":["installed"],"hurt anything":["with"],"hurt my":["head,"],"hurt other":["portions"],"hurt the":["readability"],"hurt. I'll":["come"],"hypothetical general":["version"],"i $":["j"],"i (i":["-"],"i (n":["`div`"],"i *":["i"],"i +":["1`"],"i ++":["versePartTwo"],"i -":["1"],"i -&gt;":["i"],"i .":["j"],"i :":["go"],"i =":["modifyMVar"],"i ==":["0"],"i \u003e":["n"],"i already":["get"],"i always":["prefer","go"],"i am":["not","not"],"i cant":["come"],"i considered":["\"insertWith\"","pattern"],"i did":["it","not"],"i didn't":["thought"],"i dislike":["that"],"i don't":["know","think","think","think","think","know"],"i even":["agree"],"i expected":["it"],"i find":["your","code"],"i guess":["it","part"],"i had":["even","ignored","a"],"i have":["to"],"i hoped":["someone"],"i kind":["of"],"i learn":["quiet"],"i like":["your","your","`TupleSections`!","arrows.","nested","my"],"i made":["some"],"i mean":["`foldl'`."],"i meant":["`Map`."],"i might":["do"],"i molecular":["biology."],"i moved":["it"],"i need":["to"],"i needed":["the"],"i prefer":["it.","the","the","lambda"],"i see":["some"],"i shouldn't":["optimize"],"i simplified":["the"],"i tend":["to"],"i think":["words","it","`echo`","i'd","it's","but"],"i think,":["that"],"i thought":["there"],"i tried":["to"],"i understood":[":D."],"i used":["null","your"],"i very":["much"],"i wanted":["to","to"],"i will":["come"],"i won't":["write"],"i would":["inline"],"i write":["it"],"i x:xs":["="],"i'd call":["this"],"i'd like.":["thanks!"],"i'd rather":["keep"],"i'd really":["like"],"i'll fail":["yo"],"i'll have":["a"],"i'll need":["some"],"i'll play":["with"],"i'm always":["a"],"i'm becoming":["a"],"i'm in":["your"],"i'm just":["disinclined"],"i'm not":["alone","really","really"],"i'm very":["newbie"],"i've done":["it"],"i've had":["problems","http://whathecode.wordpress.com/2013/02/16/camelcase-vs-underscores-revisited/"],"i)` (the":["lambda"],"i)` aren't":["necessary"],"i)` could":["be"],"i)`. It's":["common"],"i++v` are":["bad."],"i-1 ..":["j]`"],"i.e. \"a":["Scalene"],"i.e. \u003cpre\u003eaddends":["7992739871"],"i.e. I":["suppose"],"i.e. `Matrix":["a"],"i.e. `foldl'":["(flip"],"i.e. `module":["DNA","Beer"],"i.e. `n(n+1)(2n+1)/6`":["and"],"i.e. `split":["str"],"i.e. about":["`isLower`."],"i.e. an":["something"],"i.e. change":["the"],"i.e. if":["I"],"i.e. in":["the","order"],"i.e. it":["was","was"],"i.e. once":["it"],"i.e. recursive":["definitions"],"i.e. the":["relations","last"],"i.e. their":["contents"],"i.e. value":["in","in"],"i.e. when":["you"],"i.e. xor.":["`False"],"i.e., without":["repeating"],"i` although":["in"],"i` as":["`f"],"i` since":["the"],"i`: function":["application"],"icomming data":["and"],"id (const":["[])"],"id (fix":["(const","(const"],"id (lookup":["x","x","k"],"id (parseString":["str)`"],"id .:":["zipWith"],"id .`":["or"],"id \u003c$\u003e":["sequence"],"id [(+1),":["(+2)]`."],"id [1,":["undefined])"],"id [True,":["True,"],"id part..":["how"],"id) .":["filter","fmap"],"id) .)":[".","."],"id) .:":["zipWith"],"id) =":["sum"],"id) ==":["Just"],"id, I":["just"],"id; I'm":["more"],"id` ==":["`fromMaybe"],"id` are":["redundant."],"id` for":["this"],"id` is":["equivalent","exactly"],"id` isn't":["too"],"id` more":["neatly"],"id` or":["`fromMaybe"],"id` so":["it's"],"id` which":["is"],"id`. For":["nice"],"id`. Might":["be"],"id`? That's":["equivalent"],"idea about":["using","function"],"idea after":["all."],"idea as":["you","it","really","it"],"idea at":["the"],"idea because":["it's"],"idea by":["@leta."],"idea for":["improvine","that","first","a)."],"idea here":["as"],"idea here,":["I"],"idea how":["I","the","to","it","to","to","to","good","to","the"],"idea if":["it"],"idea in":["this","making","a"],"idea instead":["of"],"idea is":["to","IMHO","to","that","that","that","to","that","to"],"idea it":["was"],"idea of":["giving","`newtype`.","not","being","defining","indicating","traversing","using","the","how","which","what","the"],"idea on":["the"],"idea tha":["the"],"idea that":["`\"\"`","private","function","I"],"idea to":["keep","replace","explicitly","use","commit","use","me","point","adapt.","use","do","at"],"idea today":["on"],"idea was":["the"],"idea what":["Youda","I","the"],"idea where":["to"],"idea why":["the","this"],"idea would":["be","be","be","be"],"idea! Is":["`fromListWith`"],"idea, I'll":["do"],"idea, `fromListWith`":["could"],"idea, and":["the"],"idea, but":["the","maybe"],"idea, if":["bank","you"],"idea, thanks":["!"],"idea. It":["does"],"idea. The":["reason"],"idea... found":["it"],"ideal (causes":["a"],"ideal because":["of"],"ideal for":["this","counting."],"ideal since":["you"],"ideal solution":["to"],"ideal to":["ensure"],"ideal use":["case"],"ideal variant":["here,"],"ideal way":["to"],"ideal, it":["will"],"ideal? cause":["it"],"ideally I'd":["only"],"ideally be":["inverses"],"ideally the":["ordering"],"ideas from":["the"],"ideas how":["to"],"ideas, I":["understand"],"ideas? Is":["this"],"ident the":["body"],"identical except":["it's"],"identical if":["you"],"identical names":["to"],"identical names,":["but"],"identical or":["only"],"identical to":["the"],"identical... pretty":["cool"],"identically (with":["the"],"identically to":["`foo"],"identified as":["a"],"identifier available":["somewhere."],"identifier in":["a","parentheses"],"identifier since":["it"],"identifier without":["knowing"],"identifiers rather":["than"],"identifiers with":["lowerCamelCase"],"identifies it":["as"],"identify different":["cases,"],"identity for":["all"],"identity function":["but"],"identity permutation":["fits"],"identity test":["was't"],"identity test)":["that"],"idiom brackets,":["so"],"idiom in":["Haskell"],"idiom is":["to"],"idiom, but":["in"],"idiomatic 'go'":["helper"],"idiomatic (see":["the"],"idiomatic -":["to"],"idiomatic Haskell":["style","to","style.","is","to","looks"],"idiomatic Haskell,":["I'm"],"idiomatic code":["styling","(except"],"idiomatic code.":["One"],"idiomatic here.":["All"],"idiomatic is":["the"],"idiomatic naming.":["you"],"idiomatic than":["using","`intercalate"],"idiomatic this":["was"],"idiomatic to":["use","do","write","import","represent","me,","write","use","write"],"idiomatic use":["of"],"idiomatic way":["to"],"idiomatic, but":["this"],"idiomatic, though":["there"],"idiomatic. I":["prefer","thought"],"idiomatic. What":["I"],"idiomatic. use":["them."],"idiomaticity are":["welcome."],"idiomaticity of":["the"],"idioms I":["was"],"idioms as":["well.","well."],"idioms, laziness,":["and"],"idiom… I":["normally"],"idiot. Of":["course"],"ie. mapping":["over"],"if (f(a))":["{","{"],"if (not":["."],"if (repeat":["1)"],"if ..":["tthen"],"if 8":["contiguous"],"if \u003cpre\u003e[Scalene,":["Isosceles,"],"if Haskell":["was"],"if I":["could.","don't","could","agree","personally","put","later","should","follow","could","replace","used","did","used","created","understood","forget","designed","should","want","do","should","run","ever","have","do","first","should","change","haven't","hadn't","like","use","have","could","am","used","misinterpreted","have","could","have","reorder","stole","use","just","declare","do?","write","understood","have","didn't,","use","need","know","run","ever","just","used","don't","end","end","was","can","think","ask","have,"],"if I'll":["modify"],"if I'm":["not","reading","misunderstanding","reading","wrong","wrong!","wrong)","at","just"],"if `(+2)`":["is"],"if `Data.Time.Calendar`":["has"],"if ```hiding":["(map)```"],"if ```w```":["is"],"if `a":["=="],"if `as":["Map`"],"if `c`":["was"],"if `do`":["is"],"if `drop":["5"],"if `f`":["is"],"if `isAnagramOf`":["used"],"if `map`":["with"],"if `readMVar`":["is"],"if `sort":["w"],"if `str":["=="],"if `w`":["is"],"if a":["string","little","function","string","given","character","new","number","string","string","number","computation","variable"],"if algorithm":["is"],"if all":["letters","alpha","letters","letters","of","checks"],"if an":["empty","empty"],"if and":["only","only"],"if any":["belong","exists.","of","of","computation"],"if anyone":["has"],"if at":["all","all,"],"if bad":["input"],"if bank":["account"],"if bigger":["than"],"if c":["==","==","then"],"if called":["by"],"if changing":["the"],"if clause":["looks"],"if closing":["my"],"if current":["\u003cvalue\u003e"],"if defined":["in"],"if desired":["you"],"if either":["one"],"if exercism":["is"],"if expression,":["guard"],"if f":["is"],"if folds":["happen"],"if for":["some"],"if fully":["point-free"],"if given":["a","an"],"if i":["used"],"if implementing":["it"],"if importing":["other"],"if inference":["won't"],"if input":["is"],"if isAlphaNum":["c"],"if isQuestion":["was"],"if it":["can","doesn't","makes","finds","is","made","does","is,","wasn't","was","is","was","changes?","wern't?","read","did","can","wasn't","is","turns","was","ain't","didn't,","mattered.","is","might","did,","isn't.","makes","compromises","were","closes","will","is","original","will","doesn't?","doesn't","fails","helps","will","pass","was","makes","is","is"],"if it's":["something","not","big","a","empty.","a","large","composed","unused.","the","all","possible","more","valid","nested","doing","good","`null`","valid","unused","better","not","good","factoring","`validFactor`","just","just","even","just","\u003e0.","mutually","the"],"if its":["OK"],"if key":["in"],"if laziness":["comes"],"if lowercase":["'t'"],"if my":["brain","reasoning","explanation"],"if n":["`mod`","==","=="],"if none":["of"],"if not":["faster","in","more","needed","a","return","."],"if null":["l","x","(drop"],"if one":["doesn't","word","wants","is","wasn't","thread","way"],"if only":["there"],"if optimizations":["are"],"if others":["think"],"if parens":["are"],"if passed":["the"],"if readability":["is"],"if reusing":["the"],"if size":["is"],"if some":["other"],"if someone":["says","accidentally"],"if sorted":["is"],"if sorting":["for"],"if statement":["in"],"if statement,":["that"],"if statements":["would"],"if stream":["fusion"],"if that":["does","was","would","was","became","expression","would","doesn't","is"],"if that's":["just","really","the","the","more","the","a","just","the"],"if the":["pupils","Metadata","helpers","first","arrows","use","handlers","code","input","error","module","character","module","empty","recursive","code","very","result","Map","students","caller","input","year","point","binary","binary","binary","`newtype`","do","result","input","number","function","compiler","compiler","test","last","type","DNA","problem","MVar","exports","code","work","list","`isSep`","following","are","numeral","majority","list","first","`isEmpty`","arguments","function","user","current"],"if then":["else","else","else,","else."],"if there":["are","was","is","were","is","are","are","was","was","is","was","were","was","is","was","are","are","is","is","are","are","are","is","is","is"],"if there's":["an","a","one","a","a","a","a","a","a","a","a","some","at","a","much","some","a","a","something","a","a","another","more","only"],"if these":["exercises"],"if they":["were","were","have","would","are","are","are","exists","want","pass"],"if they're":["bigger,","lucky,"],"if this":["module","is","relevant","is","can","is","is","was","is","is","code","ever","is"],"if those":["are"],"if true,":["mean"],"if two":["things","words","kids","versions"],"if used":["incorrectly."],"if using":["arithmetic","`Data.ByteString`","`unwords`"],"if valued":["will"],"if values":["are"],"if we":["gain","had"],"if we're":["free"],"if what":["I'm"],"if written":["in"],"if x":["==","==","==","==","==","=","then"],"if you":["put","do","import","are","like","try","want","can","find","so","decide","separated","want","weren't","added","also","wanted","get","look","can","feel","explained","wanted","moved","do","want","want","can","did","use","use","look","were","were","`toLower`","like","used","use","want.","separate","use","had","want","had","import","use","were","are","really","make","simplify","used","inlined","avoid","had","have","have","are","are","flip","use","get","have","separate","switch","use","implement","evaluate","want","chain","use","had","were","tried","want","were","do","put","don't","insist","wanted","use","stick","just","used","can","solve","want","could","were","needed","think","would","incline","use","could","use","wanted","use","use","want","want","put","use","have","don't","had","refactor","fuse","were","enable","were","would","asked","look","for","enable","were","change","want","do","ever","haven't","really","agree","enable","were","use","have","didn't","*were*","moved","only","reference","just","didn't","want","imagine","like,","derive","are","added","were","factor","put","compile","were,","were","don't","used","derive","can","derive","can","can","force","only","rename","can","write","write","use","change","can","`map","can","fancy","didn't","run","use","enable","noticed,","change","use","want","do","like","give","apply","did","enable","used","want","used","were","went","place","lifted","would","compose","use","`import","put","either","have","are","start","give","don't","encode","used","choose","do","do","switch","have","like","do","wanted","match","really","will","like","would","put","think","use","are","do.","put","don't","derive","will","write","will","like","think","put","notice","place","will","run","call","like","will","already","want","use","like","will","don't","like","want","want.","introduce","think","check","want","care","restrict","pass","want","evaluate","compile","want)","want/need","try","like.","manually","give","don't","run","run","get","can","wanted","do.","use","run","generate","need","really","don't"],"if you'd":["like","like","like","like"],"if you'll":["check","look","change","test"],"if you're":["going","generating","just","feeling","using","willing","willing","not","going","working","doing","using","using","not"],"if your":["comment","fold","solution","install"],"if z":["then"],"if …\".":["When"],"if, and":["yeah..."],"if, but":["that"],"if, defining":["`thymineToUracil`"],"if, for":["example,"],"if, say,":["`PhoneNumber`"],"if-else expressions":["in"],"if-then for":["`preprocess`."],"if-then-else that":["will"],"if-then-else unless":["you"],"if-then-else, and":["its"],"if-then-else. Avoiding":["regular"],"if..else can":["be"],"if/else for":["this"],"if/else or":["case?"],"if/then/else and":["put"],"if/then/else as":["more"],"if/then/else in":["the"],"if/then/else might":["be"],"if/then/else stuff":["go"],"if/then/else. Another":["option"],"iff `isAlphaNum":["c`"],"ignorance of":["`unwords`."],"ignore it":["(wrong","entirely"],"ignore overrun":["and"],"ignore this":["one,"],"ignore this..":["wrong"],"ignore those":["crazy"],"ignore when":["we"],"ignore whitespace":["and"],"ignore, wrong":["command"],"ignored and":["is"],"ignored it.":["the"],"ignored them":["for"],"ignored? If":["you"],"ignores unpack":["pragma"],"ignoring such":["an"],"ignoring the":["first","types"],"ignoring them,":["or"],"illegal in":["the","the"],"illegible but":["perhaps"],"illogical although":["I"],"illumination.\"`), when":["normalized"],"illustrate a":["common"],"imagine a":["future","theoretical"],"imagine any":["other"],"imagine it":["should","looking","being"],"imagine running":["tests"],"imagine someone":["would"],"imagine that":["for","a"],"imagine the":["overhead","IsXyzOf"],"imagine this":["takes"],"imagine yourself":["using"],"imho renders":["the"],"imho, the":["advantage"],"imitation of":["the"],"immeasurable amount":["of"],"immediate understandability":["IMO."],"immediately after":["`=`)."],"immediately anyway":["so"],"immediately below":["it"],"immediately but":["in"],"immediately call":["itself"],"immediately clear":["IMO."],"immediately feeds":["that"],"immediately obvious":["what's"],"immediately obvious,":["and","and"],"immediately put":["a"],"immediately readable.":["`hammingDistance'`"],"immediately return":["the"],"immediately see":["what"],"immediately what":["the"],"immediately, so":["you"],"immediately. But":["I"],"immediately. The":["`Right"],"imminent, so":["maybe"],"immutable Haskell":["variable,"],"immutable data":["types,"],"impact on":["passing"],"impact there":["is"],"impair readability":["and"],"imperative algorithms":["in"],"imperative deque":["since"],"imperative language":["\"return\""],"imperative languages:)":["to"],"imperative languages?":["wrt"],"imperative rather":["than"],"imperative stuff":["like"],"impl now":["^^..."],"implement Enum":["yourself"],"implement NFData":["for"],"implement ```isQuestion```":["and"],"implement ```saysNothing```":["like"],"implement ```total```":["as"],"implement `analyze`.":["Something"],"implement `cipher`":["with"],"implement `datum`":["and"],"implement `day`":["with"],"implement `decimalPlaceToRoman`":["just"],"implement `empty`":["and"],"implement `g`":["using"],"implement `genericSlices`":["with"],"implement `incrementBalance`":["with"],"implement `insert`.":["It'll"],"implement `isBlank`":["in"],"implement `isDelimiter`?":["Perhaps"],"implement `isNucleotide`":["would"],"implement `isQuestion`":["so","as"],"implement `map":["f"],"implement `nucleotideCounts`":["such","without","(using","in","that"],"implement `nucleotideCounts`.":["You"],"implement `rnf`":["a"],"implement `scoreWord`":["with"],"implement `shiftMap`":["using"],"implement `silence`":["using"],"implement `silence`.":["Also"],"implement `silence`?":["You"],"implement `toDecimal`":["iteratively,"],"implement `verse`":["instead,"],"implement `wordCount`'s":["normalization/splitting"],"implement `yelling`":["without"],"implement a":["better","deque","Deque","caesar"],"implement advance,":["but"],"implement all":["of"],"implement an":["efficient"],"implement column":["and"],"implement full":["tree,"],"implement getWords.":["Any"],"implement hasUpper.":["The"],"implement in":["terms"],"implement invalid":["would"],"implement isBlank":["with"],"implement isEmpty":["using"],"implement it":["this","like","for","with","myself.","myself.","I","in"],"implement map":["by"],"implement only":["with"],"implement reverse":["with"],"implement shouting":["and"],"implement silence":["using","and"],"implement simple":["functions"],"implement the":["silence","typeclass","exercises","exercises","`resetName`","if/then/else","next"],"implement them":["and","against","myself","and","yourself,","yourself."],"implement things":["in"],"implement this":["with","much","would","without","correctly","such","without","with","more","more","algorithm","sort","exercise.","function.","with","deterministically","in","count","that","using","algorithm","without","without","efficiently.","exercise"],"implement this,":["and"],"implement those":["isSilent"],"implement turning":["in"],"implement using":["`randomRIO`"],"implement well.(and":["it"],"implement with":["Concurrent's"],"implement, but":["then:"],"implementable using":["any."],"implementation (Eggs":["-\u003e"],"implementation (as":["used"],"implementation (but":["it's"],"implementation (doesn't":["look"],"implementation (see":["`wordCount`)."],"implementation (whether":["you're"],"implementation I":["did"],"implementation I've":["used"],"implementation a":["tad."],"implementation after":["I"],"implementation and":["tests.","I"],"implementation any,":["but"],"implementation as":["your","well."],"implementation aside,":["I"],"implementation at":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/grade-school/example.hs"],"implementation basically":["does."],"implementation because":["your","each"],"implementation better":["than"],"implementation but":["how","because"],"implementation by":["using"],"implementation choice":["for"],"implementation choices.":["It's"],"implementation chooses":["to"],"implementation could":["be"],"implementation detail":["of","that","of","and","behind"],"implementation detail,":["but"],"implementation detail.":["I"],"implementation details":["for","of","of","are","and","here"],"implementation didn't":["work"],"implementation does":["not","misuse","one","4"],"implementation encodes":["the"],"implementation except":["the"],"implementation following":["a"],"implementation for":["bases","`isNothing`","this."],"implementation got":["ugly"],"implementation has":["a","some"],"implementation here":["is"],"implementation if":["you"],"implementation in":["this","Data.Map","Ruby","Haskell,"],"implementation is":["one-liner","taken","that","inefficient","value-lazy","not","also","lazy","that","going","going","value-lazy.","used.","preferable.","possible,","a","value-lazy","a","still","pretty"],"implementation isn't":["necessarily"],"implementation it's":["not"],"implementation looks":["good"],"implementation makes":["it"],"implementation more":["efficient,","clean."],"implementation much":["faster"],"implementation note":["here,"],"implementation of":["`responseFor`.","`lstrip`.","`foldlStrict`","`foldl'`","isShouting","`isEmpty`","`counts`","`separatePots`;","this","`atLeastOneUpperCase`","`second`","isSilence.","`allergies`?","which","`randomRobot`","`trim`","`number`.","`prettyPrint`","`isAnagramOf`","your","`wordCount`.","this","one","map,","`count`","`prettyPrint`---you","`nucleotideCounts`,","`diff`","Map.map","`insertKey`.","`nucleotideCounts`","`allergies`.","`isShouting`","a","`nucleotideCounts`","`randomString`.","`nucleotideCounts`","`areaCode`","`wordCount`","the","`versesToSing`","`nucleotideCounts`","`nucleotideCounts`","`reverseLinkedList`","the","`nucleotideCounts`","`wordCount`","`turnRight`","`check`.","this","`newName`","`squareSize`?","it","meetup:","these","Data.Map","power","`grade`.","```sorted```."],"implementation on":["this"],"implementation quite":["simple","a"],"implementation relies":["on"],"implementation seemed":["really"],"implementation simple":["without"],"implementation since":["`sort`","`permutations`","it"],"implementation some":["letters"],"implementation that":["tests","would","can","only","is"],"implementation that's":["not"],"implementation to":["use,","be"],"implementation using":["`last`","a"],"implementation voluntarily":["just"],"implementation will":["use","be"],"implementation with":["lists,","`sort`","the"],"implementation would":["certainly"],"implementation you":["can"],"implementation you've":["written"],"implementation, I":["was"],"implementation, an":["Int"],"implementation, and":["yours","totally"],"implementation, but":["a","ultimately"],"implementation, it's":["not"],"implementation, nicer":["and"],"implementation, or":["is"],"implementation, so":["it"],"implementation, thanks":["I"],"implementation, where":["non-illegal"],"implementation, which":["I've"],"implementation, you":["should","do"],"implementation. :-(":["Maybe"],"implementation. Consider":["solving"],"implementation. For":["a"],"implementation. I":["held"],"implementation. If":["the"],"implementation. Nice":["work."],"implementation. The":["first","first"],"implementation. Try":["using"],"implementation. You're":["certainly"],"implementations I've":["seen"],"implementations are":["possible","quite"],"implementations is":["easier"],"implementations less":["repetitive"],"implementations of":["this","these","`map`","map","that,","the"],"implementations out":["of"],"implementations require":["up"],"implementations were":["not"],"implementations, although":["it"],"implementations. It's":["only"],"implementations. Pattern":["matching"],"implementation… I":["think"],"implemented Enum":["for"],"implemented `luhnDigits`.":["Very"],"implemented `nucleotideCounts`":["more"],"implemented a":["lot"],"implemented all":["your"],"implemented and":["`readsPrec`"],"implemented as":["a","a","types,"],"implemented by":["`(,)`"],"implemented elegantly":["with"],"implemented for":["you","you"],"implemented in":["a","terms","terms","an","terms"],"implemented it":["with"],"implemented it,":["I"],"implemented it:":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/wordy/example.hs"],"implemented like":["this"],"implemented more":["simply","directly"],"implemented much":["more"],"implemented my":["solution"],"implemented purely":["using"],"implemented strip":["for"],"implemented the":["correct","Applicative"],"implemented this":["by","way"],"implemented using":["`not`","Arrow"],"implemented very":["simply"],"implemented with":["these","`map`","2","`unlines`,","`all`)","`map`,"],"implemented without":["the"],"implemented your":["suggestions"],"implemented, but":["I"],"implemented. The":["check"],"implementing (and":["perhaps"],"implementing NFData":["for"],"implementing ```dropFor```":["for"],"implementing `foldl`":["yourself."],"implementing `isSilence`":["with"],"implementing `map":["f"],"implementing `map`,":["but"],"implementing `nucleotideCounts`":["in","in"],"implementing `process`":["consider"],"implementing `scoreLetter`":["in"],"implementing `sum`.":["I"],"implementing a":["function","solution"],"implementing it":["all"],"implementing such":["a"],"implementing that":["filter"],"implementing the":["Show","Functor","not-Earth","whole","functions"],"implementing them":["one"],"implementing things":["this"],"implementing this":["exercise,","with","with","with","without","without","as"],"implementors of":["this"],"implements Enum":["such"],"implements Functor":["such"],"implements the":["Enum","wrap-around.","Ix"],"implications are":["either"],"implications for":["this"],"implications of":["that."],"implications). `fromListWith`":["in"],"implicit and":["just"],"implicit assumptions":["in"],"implicit export":["of"],"implicit handling":["of"],"implicit. Do":["you"],"implicitly by":["pattern"],"implicitly declares":["a"],"implicitly depends":["on"],"implicitly export":["all"],"implicitly for":["a"],"implicitly match":["`Bool`"],"implicitly using":["one","natural"],"implicitly) to":["build"],"implicitly. In":["your"],"implies `mod`":["100="],"implies machine":["readable"],"implies mod100,":["so"],"implies not":["."],"implies that":["_any_","only","the","`(+2)`"],"implies what":["the"],"implies when":["I"],"imply `nucleotide_toRNA`":["is"],"imply any":["conversion."],"imply anything":["about"],"imply meaning,":["like"],"import (&&&)":["from"],"import (and":["so"],"import BankAccount":["(openAccount,"],"import Control.Applicative":["but","((\u003c*\u003e))"],"import Control.Applicative),":["but"],"import Control.Arrow":["((&amp;&amp;&amp;)))","(&amp;&amp;&amp;)"],"import Control.Monad":["(void,"],"import Data.Array":["(Array,"],"import Data.Char":["(toLower,","(toLower)","(toUpper)","(toLower)"],"import Data.Char(isAlphaNum,":["isSpace,"],"import Data.Foldable":["(Foldable,"],"import Data.Function's":["`on`"],"import Data.List":["(splitAt)","(foldl')","(foldl')","(foldl')","(foldl')","(foldl')","(foldl')","(sort)","at","(sort)"],"import Data.List(group,":["sort)"],"import Data.Map":["a","twice:","(Map,","as","(Map)"],"import Data.Map(Map,":["fromList)"],"import Data.Map,":["so"],"import Data.Map.Strict":["instead","instead","instead","instead.","instead","instead.","and","instead,","instead","instead,","instead,","(Map,","instead,","(Map)","instead","(Map)","instead"],"import Data.Map.Strict,":["but","which"],"import Data.Time.Calendar":["(Day,","(Day,"],"import Data.Time.Calendar.WeekDate":["(toWeekDate)","(toWeekDate)","(toWeekDate)\u003c/pre\u003e"],"import Debug.Trace":["(trace)"],"import STM":["stuff"],"import Text":["qualified."],"import `Data.Map.Strict`":["rather","rather","so"],"import `Data.Map`":["as"],"import `chunksOf`":["from"],"import `import":["Data.Function`"],"import and":["turn","export","implemented","a","rely"],"import at":["the"],"import both":["lazy"],"import by":["rewriting"],"import containers":["qualified"],"import data.list":["qualified"],"import doesn't":["complile"],"import everything":["or"],"import for":["just","Map.","`Data.Vector`"],"import from":["Data.Char.","Data.Map.Strict","Data.List","Data.Map.Strict","Data.Map.Strict","Data.Map.Strict","Data.Map.Strict.","Data.Map.Strict","Data.Map.Strict","Data.Map.Strict"],"import functions":["like","from","from","and/or","from","from","that","by"],"import functions,":["but","and/or","or"],"import has":["little"],"import in":["order"],"import individual":["types"],"import instances":["from","alone,"],"import is":["unused"],"import isSpace":["and","and"],"import isUpper,":["isAlpha,"],"import it":["qualified,","from"],"import it's":["uncommon"],"import just":["a"],"import list":["for","for"],"import makes":["it"],"import more":["than"],"import needed":["functions"],"import of":["`Data.List'","Regex","`Data.Map.Strict'","Data.Map"],"import only":["the"],"import or":["just"],"import qualified":["Data.Map","Data.Map","Data.Map","Data.Map","Data.Map","Data.Map","Data.Map","Data.Map.Strict","Data.Map.Strict","Data.Vector"],"import regexy":["stuff"],"import section":["can","as"],"import some":["functions","expressions"],"import specific":["functions,"],"import statements":["in","now"],"import style":["is"],"import such":["as"],"import the":["things","functions","`Map`","complete","`replace`","errors","type","necessary","type","pieces"],"import these":["functions"],"import things,":["e.g."],"import to":["include","`import","`import","`import","Data.Map.Strict.","Data.Map.Strict","something","Data.Map.Strict."],"import weirdness.":["Try"],"import what":["you"],"import with":["the"],"import your":["functions"],"import\", I":["always"],"import, I":["forgot"],"import, as":["I"],"import, excluding":["functions"],"import, it's":["not"],"import, like":["in"],"import, so":["you"],"import, take":["names"],"import, use":["Data.Map.Strict"],"import. I":["found"],"import. `fromMaybe":["[]`"],"importance for":["computing"],"importance of":["having"],"important and":["open"],"important but":["you"],"important concept":["here"],"important definitions":["first,"],"important either":["way."],"important for":["this","top-level","efficiency"],"important here?":["It's"],"important or":["\"variable\""],"important precedence":["rule:"],"important rule":["to"],"important since":["the","the"],"important step":["to"],"important that":["these","these","they"],"important thing":["to"],"important to":["use","me","understand","codify","be"],"important unless":["we're"],"important values":["of"],"important. I'm":["trying"],"important. If":["you're"],"importantly though,":["this"],"importantly to":["float"],"importantly, try":["to"],"imported Data.Map":["for"],"imported `(\u003c$\u003e)`":["but"],"imported `\u003c$\u003e`":["because"],"imported and":["exported,"],"imported by":["default.","Prelude."],"imported from":["Data.Map","Data.List"],"imported into":["`Prelude`"],"imported non-strict":["version"],"imported qualified,":["e.g."],"imported that":["start"],"imported the":["needed"],"imported, you":["don't"],"importing Data.Map.Strict":["instead","as"],"importing Strict":["Map"],"importing `foldl'`":["from"],"importing `ord`,":["`fromEnum`"],"importing `splitOn`":["now"],"importing all":["of"],"importing explicitly":["do"],"importing from":["Data.Map.Strict","Data.Map.Strict","Data.Map.Strict"],"importing just":["the"],"importing modules":["using"],"importing other":["packages"],"importing very":["common"],"importing your":["modules","module"],"importing, but":["you"],"importing, e.g.:":["`import"],"imports &":["unnecessary"],"imports (Data.List":["doesn't"],"imports (`import":["Data.Char","Data.Char(isLower,"],"imports (e.g.,":["`import"],"imports (preferably;":["some"],"imports -":["I","full"],"imports I":["like","used","used"],"imports after":["Control.Concurrent.MVar"],"imports all":["of"],"imports and":["exports,","flipped","control","exports","forgot","a"],"imports are":["redundant,","handled"],"imports aren't":["shadowing"],"imports differently":["like"],"imports everything":["from"],"imports for":["all"],"imports from":["the","Data.Map"],"imports in":["there.","this"],"imports is":["that"],"imports now":["that","as"],"imports of":["common"],"imports on":["infrequently-used"],"imports only":["`Map`"],"imports the":["value-lazy"],"imports to":["avoid","look:","avoid"],"imports used":["for"],"imports with":["short"],"imports wouldn't":["be"],"imports' code":["changes"],"imports, although":["to","the"],"imports, and":["good","variable"],"imports, because":["you're","I"],"imports, but":["this"],"imports, e.g.":["`import","L"],"imports, etc.":["will","will"],"imports, lower":["risk"],"imports, so":["there's"],"imports, such":["as","as"],"imports. Also,":["your","the"],"imports. I":["also"],"imports. In":["the","this"],"imports. Makes":["it","sense"],"imports. This":["makes"],"imports. When":["you"],"imports. it":["usually"],"imports/exports, no":["more"],"imports: I":["do"],"impossible or":["undesirable."],"impossible with":["MVar"],"impossiblt to":["do."],"impressed. I've":["benchmarked"],"impression I":["always"],"impression that":["`read`","there's","each","the","they","`isUpper`"],"impriving it":["now"],"improve V2?":["http://exercism.io/submissions/522bf7c5c4120dbada000132"],"improve here":["would"],"improve it":["quite"],"improve my":["code."],"improve on":["here,","here","here"],"improve only":["Haskell,"],"improve readability,":["however"],"improve readability.":["Right"],"improve something.":["It"],"improve the":["names","names","tests","looks","performance.","efficiency"],"improve things":["without"],"improve this":["would","solution","solution","implementation,"],"improve your":["```add```"],"improve, but":["I"],"improved `lastTen`":["quite"],"improved as":["well,"],"improved because":["the"],"improved by":["using"],"improved for":["larger"],"improved here":["still?"],"improved it":["a"],"improved my":["code"],"improved on,":["probably"],"improved slightly":["by"],"improved version.":["I"],"improved would":["be"],"improved, I":["was"],"improved, what":["you're"],"improved. The":["`MessageType`"],"improvement (suggested":["by"],"improvement I":["would"],"improvement as":["well,"],"improvement beyond":["your"],"improvement by":["changing"],"improvement in":["clarity","performance,"],"improvement is":["to"],"improvement may":["be"],"improvement of":["a"],"improvement or":["not."],"improvement that":["can"],"improvement to":["bind"],"improvement, in":["my"],"improvement. Another":["way"],"improvement. I":["read"],"improvements I":["can","can"],"improvements I'm":["sure"],"improvements `where":["(maxDecimalValue,"],"improvements in":["algorithms."],"improvements such":["at"],"improvements that":["I"],"improvements would":["be"],"improvements, and":["the"],"improvements, just":["other"],"improvements? I'm":["still"],"improves on":["lock"],"improves readability,":["but"],"improving it,":["the"],"improving the":["understanding"],"impure implementation":["but"],"impure). If":["`resetName`"],"in #haskell":["and"],"in (lx,":["sort"],"in (since":["it"],"in **line":["13**."],"in *Data.Char*,":["*any*,"],"in *allAlphas*":["into"],"in *nucleotideCounts*":["instead"],"in -":["matching"],"in 1":["by"],"in 10-13).":["Also"],"in 3":["ways"],"in 6":["weeks"],"in 76":["lines"],"in 8":["bits."],"in As":["(`As"],"in BSTs":["to"],"in Base":["so","just"],"in Bs":["(`Bs"],"in C":["and","camelCase"],"in C.":["Okasaki"],"in Char.":["http://www.haskell.org/haskellwiki/Smart_constructors"],"in ClassyPrelude":["is"],"in Control.Monad.":["`guard`"],"in DNA,":["`count"],"in DNA:":["`A`,"],"in Data.Bits":["that","that"],"in Data.Char":["you","that","that","instead","for","you","that","that"],"in Data.Char,":["which","you'll","you","you"],"in Data.Char?":["I"],"in Data.List":["is","called","that","that","that"],"in Data.List.Split":["that","and","that","for"],"in Data.List.Split.":["3"],"in Data.List.Utils":["though,"],"in Data.Map":["as","that","is","(really","are","are","by","are","are","is"],"in Data.Map,":["which","there's"],"in Data.Map.Base":["is"],"in Data.Maybe":["that"],"in Data.Text":["for"],"in Elixir":["(`flip"],"in English,":["but"],"in Erlang":["with"],"in FFI":["calls"],"in FP,":["using"],"in GHC":["there","and","and","HEAD,"],"in GHC's":["prelude"],"in GHC.*":["for"],"in GHCI":["I","`square"],"in GHCI).":["The"],"in GHCI,":["but"],"in GHCI?":["I"],"in GHCi":["(which","but"],"in GHCi,":["which","no"],"in Hackage":["that"],"in Haddock":["documentation"],"in Haskell":["(a","to","Platform","is...","to","Platform)","Platform\"","has","for","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html","has","has","has","has","has","does","has","programs.","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","is","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","it's","for","to","Platform.","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","that","for","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","I'd","for","(a","code","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","are","use","or","and","to","\"might","is","involving","but","is","and","has","has","always","Platform","has","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","has","is","are","and","has","to","Platform","projects","is","to","may","is","is","may","for","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","short","for",":)","`1","for","today,","is","(there's","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","it's","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","too,","often","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","Platform","and","carry",";)","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","code","is","to","to","if","when","(putting"],"in Haskell's":["coverage"],"in Haskell)":["don't"],"in Haskell,":["check","but","you","so","so","be","since","with","parentheses","check","I","so","this","for","it's","6","this","it"],"in Haskell.":["Same","Convenience","Relying","This","Pattern","First","I","The"],"in Haskell:":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"in Haskell?":["Should","I'm"],"in Hoogle](http://www.haskell.org/hoogle/?hoogle=count).":["Is"],"in IO":["monad,"],"in IO,":["so"],"in Iteration":["2."],"in L18":["is"],"in Map,":["so"],"in Markdown":["code"],"in MissingH.":["\"cabal"],"in N":["steps,"],"in O(1)":["without","time","time","time","since"],"in O(n":["log"],"in O(n)":["into"],"in O(n),":["not"],"in O(n^2)":["time)."],"in Parallel":["and","and"],"in Prelude":["(such","and","that","and","(check","that","that","has","that","so","that"],"in Prelude,":["so"],"in Prelude.":["Note","This","Try"],"in Python":["split"],"in Python.":["It"],"in RC,":["so"],"in REAMDE":["in"],"in RNA:":["`A`,"],"in Robot":["so"],"in Rome,":["take"],"in Ruby":["exercises.","first,",";)","worked."],"in Ruby,":["where"],"in Ruby...":["then"],"in Russian":["we"],"in ST":["or"],"in Scrabble,":["but"],"in Simon":["Marlow's","Marlow"],"in String":["if"],"in TVar":["there"],"in Text.Regex,":["it's"],"in WHNF":["which","still","with","is"],"in WHNF,":["that","then"],"in Windows":["either."],"in [@gus's":["solution](http://exercism.io/submissions/523b025f2ef81a2977000282)"],"in [Data.List](www.haskell.org/ghc/docs/latest/html/libraries/base-4.6.0.1/Data-List.html).":["Can"],"in [Data.Map.Lazy](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html)":["which"],"in [Prelude](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html)":["and"],"in [iteration":["3](/submissions/65a4cdddc202bdfedae0679d)."],"in [multiset](http://hackage.haskell.org/package/multiset-0.2.2/docs/Data-MultiSet.html)":["there"],"in [point":["free"],"in [point-free](http://www.haskell.org/haskellwiki/Pointfree)":["style:"],"in _Learn":["You"],"in _dna":["has"],"in `(^":["2)`"],"in `*":["secondsPerEarthYear`"],"in `17`":["into"],"in `\u003e\u003e=`":["allows"],"in `Control.Monad.STM`":["slightly"],"in `Data.Char`,":["you"],"in `Data.List.Split`;":["it"],"in `Data.List`":["which","for","which","you"],"in `Data.Map`":["that","which"],"in `Data.Text`":["isn't"],"in `Data.Text`.":["`pack`"],"in `Data.Time.Calendar`,":["so"],"in `FOOBAR`,":["yes."],"in `M.adjust":["(+1)`"],"in `M.insert`,":["leading"],"in `Matrix":["a"],"in `Prelude`":["you","and"],"in `Prelude`,":["and"],"in `Prelude`.":["Try"],"in `Text`":["takes"],"in `[a-z0-9]`":["iff"],"in ```Schedule```":["to"],"in ```add```":["to"],"in ```anagramsFor```":["in"],"in ```lettersToPointsList```":["function."],"in ```mapM```":["in"],"in ```parseWords```":["if"],"in ```union```":["where"],"in ```verse```,":["but"],"in ```wordCount```":["because"],"in `addDays":["daysInGigasecond`,"],"in `add`":["is","a","as","you"],"in `add`,":["which"],"in `addends`,":["I'll"],"in `ageOn`":["are"],"in `all":["(=='"],"in `allSpace`":["could"],"in `allWhiteSpace`":["an"],"in `all`":["in"],"in `allergies`,":["otherwise"],"in `anagram`":["are"],"in `anagramsFor`":["helps","(line"],"in `anagramsFor`),":["it"],"in `anagramsFor`.":["This"],"in `bstLeft":["::"],"in `closeAccount`":["to"],"in `comps`\",":["do"],"in `count`":["over","as"],"in `count`,":["eg","`foldl'`"],"in `create`":["just"],"in `dispatch`":["if"],"in `else`":["clause"],"in `empty`":["is"],"in `f":["x"],"in `filterWord":["word"],"in `findResponse`:":["it"],"in `foldl'":["(.)"],"in `fromList`.":["I"],"in `fromString`":["if"],"in `garden`":["with"],"in `go":["!c"],"in `go`":["by"],"in `incrementBalance`":["you"],"in `incrementBalance`.":["What"],"in `invalidNucleotideError`...":["I"],"in `isAllCaps`":["is"],"in `isAllCaps`,":["but"],"in `isAllergicTo`.":["Bounded"],"in `isAllowed`;":["why"],"in `isAnagram`":["are"],"in `isAnagram`,":["it"],"in `isBlank`":["matches","is"],"in `isQuestion`":["by","without","since"],"in `isQuestion`.":["The"],"in `isShout`,":["which","try"],"in `isShout`.":["That"],"in `isShouted`":["because"],"in `isShouting`":["doesn't"],"in `isShouting`.":["Much"],"in `isSilence`":["(didn't","and","here."],"in `isYell`":["is"],"in `isYelling`":["are"],"in `k'`":["-"],"in `let`":["or"],"in `line_take`":["(line"],"in `lookupPlants`":["is"],"in `makeAllLowercase":["."],"in `map":["toLower`"],"in `meetupDay`":["but"],"in `mkRobot`":["(there"],"in `mkRobot`?":["That"],"in `mod100":["&&"],"in `module`,":["`class`,"],"in `newName`":["and"],"in `nextWeekDay`":["you'd"],"in `not(isAlpha":["x)`"],"in `notIdentical":["x"],"in `nsForBottles`.":["The"],"in `nucleotideCounts`":["since","is"],"in `nucleotideCounts`,":["you"],"in `nucleotideCounts`.":["You"],"in `number`":["are","but","and"],"in `operations`":["where"],"in `operator`":["and"],"in `parseNucleotide`":["which"],"in `parts`":["you","with"],"in `performAction`":["you"],"in `phoneNumber`":["will"],"in `pickSchedule`":["can"],"in `powP`":["just"],"in `prettyPrint`":["slightly","can"],"in `prettyPrint`,":["which"],"in `prettyPrint`.":["Not"],"in `question`.":["Ordinarily,"],"in `readDNA'`":["around"],"in `readDNA'`?":["Can't"],"in `readDNA`?":["That's"],"in `readMVar`)":["and"],"in `readOct`":["should"],"in `resetName`":["since","you"],"in `resetName`,":["but"],"in `responseFor`":["don't","(it'd","and","you","in"],"in `responseFor`,":["you","as","just"],"in `responseFor`?":["I"],"in `robotNamePattern`":["you"],"in `s":["/"],"in `sanitize`.":["Data.List.Split"],"in `scoreLetter`,":["which"],"in `shouting`":["to"],"in `silence`":["are","`silence(removeNonAlphaNum(str))`"],"in `sing`":["you","by","function.","shadows"],"in `sing`,":["consider","using"],"in `sing`?":["Something"],"in `slices`":["and"],"in `sort":["source"],"in `sortAndLower`":["the"],"in `sorted`":["instead","you'd"],"in `squareSize`":["that","than:"],"in `subscriberLine`":["is"],"in `subsequenceFromTo`":["are"],"in `talkToBob`.":["It"],"in `toChar`,":["not"],"in `toList`":["makes"],"in `toRNA`":["to","scope.","here"],"in `toRNA`'s":["type"],"in `toWeekDate`":["instead?"],"in `tokenize`":["(`f`"],"in `total`.":["Other"],"in `transcribe`,":["but"],"in `transformElem`":["is"],"in `turnLeft`":["/"],"in `validDnaNucleotide`,":["which"],"in `versePartOne":["i"],"in `verse`":["to"],"in `wall`":["are"],"in `weekOf`":["in"],"in `where`":["bindings)","bindings,","instead"],"in `wordCount`":["i","a"],"in `wordCount`,":["you"],"in `wordsBy`,":["so"],"in `x:xs`,":["meaning"],"in a":["line","single","where","hurry.","new","regex","month","very","sorted","sorted","very","standard","minority","where","larger","where","comment","larger","nonpartial","string","fairly","couple","```...","list","word,","where","context","where","module)","where","multithreaded","check","FP","straightforward","more","standard","where","`where`","`where`","branch","certain","separate","let","non-strict","very","pointfree","slightly","function","where","purely","functional","`let`","second.","functional","data","`?`","revision","where","similar","special","`where`","fold","list","pointfree","larger","singleton,","particular","variable","second","`where`","bit","value-lazy","comment","where","module","`where`","where","`where`","single","contiguous","bit","similar","much","real","where","single","normal","book","where","pointfree","`let`","similar","more","word","strict","place","meaningful","program","gigasecond","way.","real","way","`where`","where","solution","`where`","`where`","larger","runtime","single","non","way","Lisp/prefix","function","non-awkward","list","`(y:ys)`","linear","predetermined","sensible","different","couple","way","nice","Maybe","left","pretty","Data.Map","where","function","where","where","large","very","different","while.","`var","pure","strange","format","way","large","case","sense","way","much","localized","bit","table","list","given","way","partial","lazy","`generate`,","correct","Haskell","pointfree","`where`","specific","lambda,","more","space","point-free","correct","same","point","table","classic","map,","map,","lower","word.","very","couple","short","`seq`","way","`where`","uniform","point","lazy","normal-order","more","list.","more","real","simpler","definition","nontrivial","where","[pointfree](http://www.haskell.org/haskellwiki/Pointfree)","more","month","data","point-free"],"in a'":["/="],"in about":["a","the"],"in actuality":["it"],"in addDays":["(fromIntegral"],"in addToSum":["and"],"in addZeros":["because"],"in addition":["to","to","to"],"in after":["a"],"in agreement":["with"],"in all":["of","fairness,","caps","of","languages.","cases?","my","three","equations","of","of"],"in all,":["it"],"in allowing":["Integral"],"in almost":["every","all"],"in an":["accumulator-strict","accumulator-strict","accumulator-strict","accumulator-strict","accumulator-strict","earlier","expression","error.","imperative","apostrophe.","Array","import","expression","arbitrary","equation).","MVar","ideal","enumeration.","earlier","infinite","enumeration.","invalid","expanded"],"in anagramsFor":["would"],"in analyze":["then"],"in and":["correct","update"],"in anonymous":["function."],"in another":["function,","context.","function"],"in any":["case.","way.","language","circumstance","Haskell","language)","case","base,","language.","case","of","clause.","case),","case."],"in anything":["outside"],"in applicative":["style:"],"in approximately":["the"],"in arbitrary":["strings.)"],"in arithmetic":["rather"],"in as":["well."],"in assuming":["that"],"in at":["construction"],"in backquotes,":["e.g."],"in base":["g"],"in base).":["It's"],"in base,":["but","so"],"in because":["it's"],"in between":["really","the","the"],"in binary,":["from"],"in boolean":["formulas"],"in both":["words","`mkRobot`","cases.","modules","the"],"in brackets":["in"],"in breaking":["some"],"in c'":["`seq`"],"in camel":["case"],"in case":["you","you","Bob","of","you","of","none","you","we","if","i'll","when","we","if","of","none","using"],"in cases":["where","like","I","where","like"],"in circumstances":["where"],"in clarity":["but"],"in clearer":["fashion"],"in clojure.":["Most"],"in code":["safely,","that's","it","do","that","I"],"in code.":["If"],"in combination":["with","with","with","with"],"in comparison":["to"],"in compiled":["program"],"in compiler":["and"],"in complexity":["over"],"in comps":["and"],"in concatMap":["is","ok"],"in constant":["time","time","time","time","time","'stack'","stack"],"in containers,":["not"],"in context.":["So"],"in convertAcid":["a"],"in copying":["garbage"],"in count":["is"],"in data":["structure,","structure."],"in day-to-day":["stuff."],"in days":["between"],"in db":["or"],"in db;":["add"],"in defining":["the"],"in demonstrating":["the"],"in details":["with"],"in didn't":["I,"],"in diff":["tool."],"in different":["cases","locations),","scopes"],"in difficulty":["from"],"in doing":["so"],"in each":["helper","step?","case","case","iteration."],"in earlier":["iterations."],"in editors.":["You"],"in efficiency":["between","between","worth"],"in emacs":["would"],"in encode's":["definition."],"in equivalent,":["and"],"in every":["function","guard","sense","function."],"in everything":["qualified"],"in fact":["it's","`all"],"in favor":["of"],"in favour":["of"],"in fewer":["comparisons."],"in figuring":["out"],"in filter,":["and"],"in first":["case,"],"in fold":["here"],"in folds.":["Recovering","I"],"in for":["clarity."],"in four":["different"],"in from":["Data.Map"],"in front":["of"],"in full":["rules"],"in function":["calls:"],"in function.":["That"],"in functions":["heads,","and","and"],"in future.":["So"],"in general":["isn't","`foldr`","a","I","in","space","case","case,","case.","as","too,"],"in general,":["it","I"],"in general.":["In","Of","Hmm."],"in generic":["way?"],"in getting":["back"],"in ghc-7.6,":["it"],"in ghci":["if","but","I","prints","(compilation","and"],"in ghci)":["which"],"in ghci),":["but"],"in ghci).":["Please"],"in ghci,":["you","too,","you"],"in ghci.":["Seems"],"in go.":["First"],"in grade":["function"],"in grade,":["but"],"in groups":["of"],"in guard":["order.","order,"],"in guard,":["so"],"in guards.":["Otherwise,"],"in handy":["here."],"in handy.":[";-)"],"in haskell":["is","^^","due","is:","to"],"in haskell,":["i'll"],"in haskell.":["Feel"],"in here":["with","isn't","still","looks","so","that","too,"],"in here,":["mod4","IMO,"],"in here.":["Most"],"in hoogle":["for"],"in how":["this"],"in http://www.cs.hmc.edu/~oneill/code/haskell-primes.zip":["after"],"in idiomatic":["code"],"in if":["not"],"in ignorance":["of"],"in imperative":["Python:","languages?"],"in improving":["it,"],"in infix":["notation","form"],"in instruction,":["it's"],"in int,":["because"],"in interpreted":["code"],"in isAnagram":["(e.g.","should","are"],"in isQuestion":["shouldn't"],"in isShout":["either."],"in isShouting":["will"],"in isolation,":["which"],"in it":["-","is","(possible,","is","rather","(including","because"],"in it's":["position"],"in it.":["It","a","Possibly","That's"],"in iteration":["3),","1.","one.","3"],"in its":["accumulator","own","accumulator,","accumulator.","keys","return","accumulator.","implementation","implementation.","output","accumulator,","accumulator.","values,"],"in knots":["a"],"in lambda?":["If"],"in larger":["calculations."],"in last":["`messageResponse`","step"],"in layman's":["terms"],"in learning":["purposes","about","tasks"],"in left-to-right":["fasion"],"in less":["code.","time","code.","code."],"in letters":["and"],"in library":["rather"],"in line":["6","11.","9","8.","16."],"in linear":["time","time"],"in lines":["7-10.","7","8-14?","8,12-14."],"in list":["comprehension.","is"],"in lock-step,":["usually"],"in love":["with","with"],"in lowercase.":["I"],"in ls":["/="],"in making":["`anagramsFor`"],"in many":["cases),","cases"],"in map":["conaines","conaines"],"in map,":["than"],"in math":["sence"],"in memory":["all","–","and","to","(unless","until","until"],"in memory,":["however","there"],"in memory.":["However"],"in messageResponse.":["I"],"in mind":["however","when","to","and","that","at","I'd"],"in mind;":["a"],"in mine":["it",":)"],"in mine,":["which"],"in mkRobot,":["inside"],"in modern":["computers"],"in monad":["or"],"in more":["point-free","complicated","'things'","than","than"],"in most":["introductory","Haskell","numerics","cases","cases).","cases,","cases,","cases."],"in much":["more","better"],"in multithreaded":["scenarios,"],"in my":["code).","own","mind","Haskell","first","mind","type","character","side","initial","version.","version","first","latest","comments","last","own","GH","reference","first","opinion,","opinion.","opinion.","humble","implementation:","example","mind","opinion)","opinion.","new","solution,","latest","code","folding","code","first","submission","responses.","experience.","head","own","experience.","previous","day-job","test","opinion,","2nd","previous","implementation.","mind.","implementation","implementation","implementation","case","OS's"],"in name":["generation"],"in near":["to"],"in need":["of"],"in next":["iteration."],"in nicely":["with"],"in nmany":["and"],"in no":["particular"],"in normalize":["rather","anymore"],"in nucleotideCounts...":["Anyway"],"in number":["would"],"in obvious":["way,"],"in on":["the","the"],"in one":["of","pass.","go","pass","line","place","signature","operation","pass.","clause","line","short","pass?","pass.","pass,","of","call?","place.","place.","function","place","step."],"in one-pass":["with"],"in only":["one","one"],"in order":["of","to","to","to","to","not","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to"],"in order,":["with","so"],"in originally,":["but"],"in other":["languages","languages,","places","languages?","languages.","programming"],"in parallel":["on"],"in parantheses":["improves"],"in parens":["besides"],"in parentheses":["looks","on","to","like"],"in parralel":["execution"],"in parsec.":["I"],"in particular":["the","how","is","seems","`fromListWith`","will"],"in particular),":["but"],"in particular).":["It's"],"in particular.":["It's"],"in pattern":["matching.","matching"],"in performance":["when"],"in performance,":["but","being"],"in place":["of","of","of","of","of","of","of","of"],"in places":["(20,"],"in point":["free","free","free","free","free","free","free","free"],"in point-free":["style.","style","style.","style,","style.","style","style","style","style","style,","(kinda","style","style.","style.","style.","style.","form","form.","style.","form).","style","style,","style","style","style).","without","style","style","style","style"],"in point-free,":["here's"],"in pointfree":["style","form","style.","style"],"in points-free":["style"],"in poitfree":["form,"],"in powers":["of"],"in practice":["the","that's"],"in practice,":["so"],"in practice?":["2)"],"in prefix":["style.","style,","form,","form"],"in prelude":["that","for"],"in prelude)":["instead"],"in prelude,":["I"],"in prelude.":["Once"],"in presence":["of"],"in pretty":["much","much"],"in previous":["exercises","versions."],"in primeFactors'":["due"],"in problems":["due"],"in programming":["and","complexity"],"in pure":["code","math,","math,"],"in question":["is"],"in question,":["then"],"in quite":["some"],"in quotes":["(which"],"in readability":["and"],"in readability,":["so"],"in readability/performance.":["This"],"in reading":["your"],"in real":["code","Haskell","world,"],"in recursive":["functions"],"in refactoring":["that"],"in reshape?":["Seems"],"in response":["to"],"in responseFor":["seem"],"in responseFor's":["definition,"],"in result":["of"],"in returns":["an"],"in rev":["2"],"in reverse":["most","order","order,","by","order,","order"],"in running":["time"],"in runtime":["cost.","cost"],"in same":["class"],"in scenarios":["when","when"],"in scope":["anyway.","on"],"in scrabble":["is"],"in secret-handshake":["you"],"in separate":["step."],"in separating":["the"],"in seq":["ab"],"in sequence,":["the"],"in shouting":["equation"],"in signatures":["without"],"in similar":["approach"],"in simple":["cases"],"in simpler":["cases"],"in sing":["and"],"in sing,":["I'd"],"in single":["quotes","ticks"],"in situations":["like"],"in size":["towards"],"in size)":["so"],"in slower":["code."],"in some":["way,","respects:","über-elegant","cases","way","cases","cases.","way.","contexts,","way","cases","cases","of","cases,","of","cases,","bang","of","cases"],"in somehow?":["What"],"in someone":["else's"],"in sorted":["orders","orders","order","order"],"in sorted,":["as"],"in specializing":["them"],"in specs":["(I"],"in strict":["program","immutable","language"],"in sublime.":["Now"],"in suboptimal":["performance"],"in subsequent":["submissions."],"in such":["a","a","a","a","a","a","a","a","a","a","a","way","a","a"],"in sync":["with"],"in tail-recursive":["case"],"in task":["order"],"in terms":["of","of","of","of","of","of","of","of","of","of","of","of","of:","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"in territories.":["I"],"in test":["were"],"in thanks":["to"],"in that":["a","you","the","way","regard.","style","style","version","case).","area.","it's","habit.","case","code,","hole","nucleotideCounts","type","case","single","function","case.","lambda:","order","context,","case.","respect.","respect,","case,","style","list?","position","class","class","case:","case","big","it"],"in the":["first","implementation","last","first","array","prelude.","README","string","string","last","`Prelude`?","example,","all-caps","definition","definitions.","result.","wiki,","course","list,","test","string","Standard","`map`","top-level","string","functionality","Haskell","import","exercises.","list","list","next","list","code","case","library.","second","```let```,","Platform,","where","function","future,","previous","Other","next","new","`where`","same","silence","guards,","top","README","second","given","spirit","range","tests.","most","README","second","Writer","monoid","Clojure","anagram","test,","same","distant","where","yml","process","guards","spirit","list","`where`","result,","module","right","ST","\"do","map","problem","box,","same","list","string.","last","`letters`","aforementioned","`where`","Haskell","`shouting`","language","implementation","implementation","Haskell","README.","type","string","[Haskell","standard","type","type","first","cases","same","map","implementation","definition","solution.","same","where","lens","non-FP","map","context","test","source","right-hand-side","latest","same","value","set","previous","closure?","code,","rules.","spirit","rules.","Haskell","(latest)","map","haskell","**Data.String.Utils**","`MissingH`","Haskell","scope","Haskell","number","form","Map","definition:","implementation","last","message.","other","```add```","scope","code","first","list?","two","first","DNA","case","latest","`where`","`isAnagram`","next","latest","anagramsFor","Haskell","case","readme","last","Haskell","first","'of","definition","docs][haddock].","implementation","first","use","values","source","strict","map","cases","expected","same","pipeline:","implementation","interest","accumulator.","word-count","tests.","readme)","same","old","implementation","fact","same","definition","Prelude.","expression.","same","strings.","exercise.","definition","links","implementation","definition","spirit","stdlib","Prelude","first","definition","implementation","documentation","implementation","otherwise","IO","nitpick","Haskell","platform","core","tail","process.","end,","wiki","implementation","end","second","imports).","README","order","case","alphabet.","special","implementation","habit","expression","first","second...","above,","`((-\u003e)","implementation","case","`where`-defined","first","end","code","code","base","same","pattern","list.","library","`hammingDistance`","same","same","definition","future.","same","list","month,","Map","sch","last","form","exact","description","where","where","`filter`","places","Either","structure","simplest","module,","enumeration.","type","accumulator.","type","spec.","implementation","Map,","spec,","implementation.","learning","first","second.","next","first","where","context","possiblePrimes","beginning","definition","tuple","wrong","`bal","maybe","STM","previous","accumulator.","Prelude","sense","where","process","\"real","lambda","accumulator","next","following","`n","where","\"good\"","future.","right","IO","Prelude.","string.","cabal","`resetName`","actual","right","Diagrams","exercism","where","docs","\"sorted\"","future...","scope","current","test","where","test","same","implementation","first","presence","game","IORef.","middle","best","implementation","body","context.","next","second","second","second","docs","first","output:","same","hope","`rem`","topic","end","current","`rest","same","same","case","value","map","\"Woah\"","same,","context","`word1","right","accumulator","right","language.","beginning","outer","where","Prelude.","optional","map","way","base","Prelude,","module.","pattern.","next","next","place","Haskell","docs","`(,)`","task","tests.","data","standard","last","`Data.List`","string,","first","presence","case","Data.List","second","beginning","`Data.List`","same","code","very","unit","right","next","list/string.","original","same","end","toRNA","tests,","Nothing","task","next","same","Haskell","next","test","end","wrong","map","same","main","next","implementation","implementation","implementation","next","input","libraries).","future.","function","same","values),","Readme,","`normalize`","last","```number```","correct"],"in their":["case.","scope.","implementation","own","first","head","nucleotide"],"in themselves.":["So"],"in theory":["you","to"],"in there":["that","that","accidentally.","since","but","either,","with",":)","that","so"],"in there,":["but","it"],"in there.":["You"],"in these":["cases."],"in thinking":["that"],"in this":["case","case.","case","task.","sentence.","case","case","exercise,","case.","program.","case","list,","example","case).","case,","case,","case,","particular","map","case","case,","case","way","scenario.","case.","way","exercise,","exercise,","case).","situation","case?","direction","one","case),","exercise","context?","case,","case.","scheme.","case).","scenario","case","case","problem","case,","case","case","module.","case:","case","case","module","case","case","exercise","case,","iteration","case,","example,","case","case.","exercise","case","case.","case,","submission","case","implementation.","case?","case?","case...)","case","case,","exercise.","case","case.","example","case","case,","case","case,","case.","case.","case","case","case,","case!).","case,","case.","list","case,","case.","instance?","case","context:","case,","case,","case.","implementation","case)","version.","case","case,","case.","case),","case.","case.","case","case?","case.","chapter:","case","case","case,","implementation,","case,","case.","case","case.","case","case.","version","case)","case","case","case","case","solution","case).","case,","task","section","case,","case.","question","case","code.","task","task","case","case","case","code,","case","case.","implementation?","case","case","circumstance.","case","case","case,","case?","concrete","case.","context.","case,","case","exercise","case","case","example","way","way","case","case,","case","case","case","case.","solution,","problem,","case","case)","version.","problem"],"in this.":["How"],"in those":["terms,","solutions."],"in three":["guards."],"in time":["or","and"],"in tiny":["fractions"],"in to":["be","and","make"],"in toRNAc":["because,"],"in total":["(34"],"in trim":["function,"],"in trivially":["too."],"in trying":["to"],"in tuples.":["With"],"in turn":["is"],"in two":["clauses:","ways:","equations","traversals"],"in type":["signatures.","signatures","sigs","signatures"],"in types,":["doesn't"],"in unicode":["I'm"],"in unicode.":["Two"],"in using":["`strip`","pragmas?","a","`let`."],"in valid":["'shouting'"],"in value":["and"],"in variable":["names"],"in various":["places"],"in vector":["Api"],"in verse":["but","using"],"in verse,":["but"],"in verses":["either."],"in view.":["Variables"],"in vim,":["and"],"in w":["/=","/="],"in w1'":["=="],"in was":["a"],"in weak-head":["normal","normal","normal","normal"],"in where":["clauses.","section,","clause.","loop"],"in which":["I","case","it","the","I've","terms","case"],"in windows":["under"],"in with":["pattern","`fromList`"],"in word-count,":["Data.Map.Strict"],"in wordCount":["more"],"in writing":["your"],"in yelling":["though."],"in your":["second","sort","type","case.","`when`","anagramsFor","implementation","gist.","`parts`,","implementation","implementation","solution.","exports","Haskell","file","code","comments,","comment","comment","last","implementation,","boat,","advice?","head","map,","`count`","parameters,","data","code","lookup","implementation","definition","possible","`countInternal`","functions.","comment","case","previous","Data.Map.Lazy","program,","module,","file","definition"],"in yours,":["you"],"in ~N":["instead"],"in …`":["instead,"],"in\" and":["only"],"in\" approach":["is"],"in\", or":["spend"],"in, and":["slightly"],"in, like":["I'm"],"in, so":["I"],"in, which":["defeats"],"in, with":["ordinary"],"in-efficient in":["that"],"in-lining the":["predicates"],"in-place rather":["than"],"in-place using":["`fromListWith`,"],"in-place. This":["can"],"in. However":["`where`"],"in. I'm":["not"],"in. If":["anyone"],"in: 0:1:add":["more"],"in: 0:5:new":["name"],"in: 12:questioned":["nonsence","nonsence","nonsence"],"inAnagram s1":["="],"in``` but":["then"],"in``` defined,":["```where```"],"inappropriate to":["do"],"inappropriate. Instead":["of"],"inappropriate. The":["operation"],"incidentally, though,":["your"],"inclduing chars,":["bools,"],"incline towards":["such"],"inclined towards":["simple"],"inclined, but":["looks"],"include Map":["in"],"include RNA":["bases"],"include ```error```ing":["out"],"include all":["the"],"include an":["explicit"],"include and":["when"],"include any":["error"],"include coverage":["for"],"include information":["of"],"include lens).":["There's"],"include one":["case"],"include spitting":["out"],"include that.":["For"],"include these":["edge"],"include type":["signatures","signatures."],"include using":["guards"],"included a":["Haddock"],"included all":["of"],"included case":["normalisation."],"included in":["this","the","the","the","the","the","the","the"],"included lazily":["evaluating"],"included that":["catch-all"],"included the":["roman","`a"],"included with":["the","the"],"includes `romanNumbersBase`":["and"],"includes chars,":["numbers,"],"includes this:":["`WATCH"],"including `(900,":["\"CM\")`,"],"including `Either`.":["`Either`"],"including `bogus`,":["`phoneNum`,"],"including both":["with"],"including digits":["from"],"including that":["in"],"including the":["activation","last"],"including you,":["to"],"including) phase":["1,","1,"],"incoming events.":["From"],"incoming map,":["inserting"],"incomming data,":["but"],"incomplete pattern":["matches","match","matches."],"incomplete set":["intersection"],"incomplete solution":["thanks"],"incomplete; on":["the"],"inconsistent (just":["line"],"inconsistent :)":["I"],"inconsistent in":["this","the"],"inconsistent, so":["you"],"incorporate your":["feedback,"],"incorporated the":["name"],"incorrect :).":["The"],"incorrect as":["an"],"incorrect behavior":["probably"],"incorrect character":["on"],"incorrect characters":["contains"],"incorrect characters.":["Hint:"],"incorrect in":["unicode."],"incorrect queries":["like:"],"incorrect since":["you're"],"incorrect, the":["second"],"incorrect, you're":["using"],"incorrectly consider":["valid"],"incorrectly. For":["example,"],"incorrectly. Perhaps":["that"],"incr (normalise":["w))`,"],"incr)` to":["`(\\w"],"increase in":["efficiency"],"increaseCount in":["terms"],"increases linearly":["with"],"incredibly common)":["to"],"incredibly difficult":["to"],"incredibly elegant.":["Thanks"],"incredibly inefficient":["use"],"increment the":["int"],"incrementBalance a":["single"],"incrementBalance acct":["1"],"incrementProc acct":["="],"incremental Sieve":["of"],"incremental right":["fold,"],"incrementally rather":["than"],"incremented for":["any"],"incrementing a":["counter.","closed"],"incrementing count":["so"],"incurring significant":["cost"],"indeed I":["got"],"indeed a":["better","bit"],"indeed cleaner,":["but"],"indeed ensure":["that"],"indeed make":["it"],"indeed most":["useful"],"indeed much":["better."],"indeed need":["errors,"],"indeed readable.":["This"],"indeed seems":["more"],"indeed that":["`readMVar`"],"indeed, the":["Strict."],"indeed. 'U'":["is"],"indefinitely\" errors":["that"],"indent `detectShout`'s":["body"],"indent after":["the"],"indent all":["the","of"],"indent by":["two"],"indent case":["clauses"],"indent differently.":["Normally"],"indent everything":["in"],"indent for":["Haskell."],"indent guards":["with"],"indent is":["more","a","a","a"],"indent properly":["(because"],"indent should":["be"],"indent the":["first","bindings","bindings","body","code"],"indent this":["code","a","a"],"indent top":["level"],"indent your":["code"],"indent, where":["n"],"indent; the":["\"where\""],"indentation &":["spacing"],"indentation and":["complexity","the"],"indentation better,":["for"],"indentation by":["a"],"indentation doesn't":["look"],"indentation for":["you.","the","`where`","the"],"indentation here":["is"],"indentation here,":["just"],"indentation if":["you"],"indentation is":["very","a","non-standard,","right"],"indentation issues,":["and"],"indentation of":["all"],"indentation style":["that"],"indentation usually":["shouldn't"],"indentation wasn't":["working"],"indentation wouldn't":["be"],"indentation, I":["was"],"indentations problem":["that"],"indented 2-4":["spaces."],"indented by":["two","2","4","8","four"],"indented like":["this:"],"indented minimally":["for"],"indented quite":["like"],"indented so":["much."],"indented such":["that"],"indented the":["same)"],"indented two":["spaces"],"indented with":["2"],"indenting after":["the"],"indenting is":["supposed"],"indenting top":["level"],"indents by":["2"],"independent, which":["simplifies"],"independent. Another":["way"],"indetation is":["great"],"indetation will":["be"],"indetetion of":["functions"],"index as":["nicely."],"index in":["reshape?"],"index instead":["of"],"index of":["the"],"index on":["Char.","Char.","Char"],"index that":["is"],"index, as":["long"],"index, assuming":["you've"],"index, so":["you"],"index? And":["does"],"indexes generated":["by"],"indexing doesn't":["work."],"indexing would":["be"],"indicate more":["clearly"],"indicate precedence":["of"],"indicated by":["a"],"indicating explicitly":["that"],"indication that":["`not"],"indicator and":["then"],"indices and":["also"],"indirection does":["not"],"indirection with":["tuples,"],"indirection, i.e.":["in"],"individual element.":["You"],"individual nucleotides":["in","is"],"individual type":["signatures"],"individual types":["and"],"individually seems":["to"],"individually, rather":["than"],"induction. The":["reason"],"inefficiency is":["trivial"],"inefficient (linear":["space"],"inefficient and":["only","not"],"inefficient as":["you"],"inefficient because":["it","you","`lookup`","`length`"],"inefficient due":["to"],"inefficient for":["spine-strict","numbers,"],"inefficient here,":["you"],"inefficient if":["you"],"inefficient it":["is"],"inefficient since":["you"],"inefficient solution,":["but"],"inefficient than":["scoring"],"inefficient to":["use","do"],"inefficient use":["`foldr`"],"inefficient was":["probably"],"inefficient way":["with"],"inefficient with":["`normalize`"],"inefficient you":["may"],"inefficient). Consider":["implementing"],"inefficient, because":["it"],"inefficient, but":["I","I"],"inefficient. You":["should","really"],"inefficient? Aren't":["both"],"inefifcient you":["may"],"inelegant -":["unless"],"inequality called":["`/=`"],"inequality tests,":["and"],"inevitable since":["the"],"inexperience or":["not."],"infect people":["with"],"infer it":["correctly?"],"infer it,":["then"],"infer the":["implementation:"],"infer type":["of"],"infered to":["Integer,"],"infered, as":["a"],"inference won't":["do"],"inferencer doesn't":["default"],"inferencer work":["it"],"inferred as":["Integers?"],"inferred to":["type"],"inferred type":["signature"],"infers that":["in"],"infinite inputs,":["I"],"infinite list":["but..."],"infinite list,":["so"],"infinite lists":["at"],"infinite lists,":["however","they"],"infinite lists.":["Of","By"],"infinite loop.":["Another"],"infinite messages,":["will"],"infinite provided":["at"],"infinite sequence,":["you"],"infinitely growing":["larger"],"infinitely large":["alphabet","alphabet"],"infinity is":["only"],"infix 4":["==","/=","==","==","=="],"infix `mod`":["(I"],"infix and":["looks"],"infix divisible":["is"],"infix dropped":["a"],"infix fmap":["and"],"infix for":["markdown"],"infix form":["like"],"infix function":["application","application,"],"infix here":["so"],"infix more":["readable."],"infix notation":["(backticks).","based","and"],"infix notation,":["looks"],"infix operator":["section"],"infix operator,":["but"],"infix operators":["have","need"],"infix still":["`(.:)`"],"infix use":["as","was","of"],"infix version":["of"],"infix with":["non-operator"],"infix, but":["that's","I"],"infixl 0":["`on`"],"infixl 1":["\u003e\u003e="],"infixl 6":["+"],"infixl 7":["/"],"infixr 2":["||"],"infixr 3":["and","&&","&&","&&"],"infixr 5":["++","++"],"infixr 8":[".:",".:"],"infixr 9":[".",".","."],"inflated by":["outliers","outliers"],"influx of":["Haskell"],"info about":["strict"],"info on":["how"],"info to":["extrapolate"],"info! I'm":["going"],"info. I":["can't"],"information about":["how","the","how","what","what","folds.","what","how","how","money","how","this","structure,","the"],"information contained":["in"],"information in":["the"],"information of":["the"],"information on":["this,","how","how","how","how","how","how","how","how","Haskell's","folds)","the","how"],"information they":["hold."],"information to":["figure","the","learn"],"information with":["a"],"information would":["have"],"information, thanks":[":)"],"information. In":["these"],"information? I":["mean,"],"informative (I":["especially"],"informative. It's":["certainly"],"infrequently-used packages.":["When"],"inherent complexity.":["I'll"],"inhibitor, not":["nucleotide."],"init on":["the"],"initally wanted":["`hexCharToInt`"],"initial -":["1"],"initial String,":["before"],"initial approach":["was"],"initial list":["is"],"initial naive":["attempt"],"initial pairs":["`++`"],"initial parameter":["is","before"],"initial state":["which"],"initial submission,":["but"],"initial suggestion":[":)"],"initial thought...":["Well"],"initial value":["1","and"],"initial values":["to"],"initialValue\u003c/pre\u003eSlightly more":["readable"],"initialization and":["the"],"initialize the":["Map"],"initialize them":["to"],"initializing of":["the"],"initializing the":["map"],"initially and":["there"],"initially empty":["map."],"initially had":["a"],"initially i":["had"],"initially started":["out"],"initially storing":["`1`,"],"initially try":["to"],"initially wrote":["this"],"inline \u003ccode\u003e(==)":["\\`on\\`"],"inline ```let":["..."],"inline `equivalent`":["into"],"inline `isAggressive`":["because"],"inline build,":["and","and"],"inline in":["the"],"inline it":["in"],"inline lambda,":["but"],"inline pragma":["where"],"inline the":["`where`"],"inline transcribe":["if"],"inline where":["it"],"inline would":["improve"],"inlined functions":["had"],"inlined insertWord":["inside"],"inlined it":["into"],"inlined strict":["left","left","left","left"],"inlined the":["cases,"],"inlined, so":["might"],"inlining `invalidNucleotideError`":[":P"],"inlining it":["felt"],"inlining that":["function"],"inndla etltsh":["ui\""],"inner `isAnagram`":["function"],"inner declaration":["and"],"inner filter":["unless","again.","is","only"],"inner filter,":["p1","so","so"],"inner function":["would","here,","in","that","for"],"inner functions":["is","unless","because"],"inner functions,":["but","so"],"inner generic":["task"],"inner loop,":["so"],"inner one":["is"],"inner pattern":["match"],"inner vecot":["and"],"input \"Hello,world!\"?":["It"],"input (\"QUUX\").":["Your"],"input (O(n)":["memory"],"input (no":["need"],"input (such":["as"],"input -":["it"],"input 4":["times"],"input =":["filter","filter","case"],"input ==":["'?'`."],"input =~":["\"^1?(...)(...)(....)$\""],"input `String`":["only"],"input ```String```":["with"],"input `x`":["and"],"input altogether":["at"],"input and":["use","returning","turn","output","pattern","throw","little"],"input as":["binary"],"input because":["the"],"input being":["sorted","null"],"input but":["implementation"],"input came":["in."],"input can":["be.","never"],"input character":["returns"],"input comes":["as"],"input data":["in"],"input did":["not"],"input digits":["as"],"input dna":["string"],"input for":["`words`."],"input four":["times","times?"],"input gets":["larger,"],"input handling":["has","is"],"input if":["you're","the"],"input in":["the","the"],"input is":["already","valid.","DNA.","a","String","String","`!@@!@#$%%^^*&&()`,","non-empty","traversed.","never","the","O(1)","illegal","already","illegal","always","a","a"],"input it":["can","will","doesn't","will"],"input length":["is"],"input letters":["to"],"input like":["`[0,-1..8]`."],"input list":["four","whose","to","is","instead"],"input list).":["The"],"input list.":["On"],"input lists).":["It"],"input map":["will"],"input more":["than"],"input must":["be"],"input needs":["to"],"input of":["a","the","`FOOBAR`?"],"input once":["or"],"input once?":["This"],"input only":["once."],"input parameters":["(`Schedule`"],"input should":["be"],"input so":["only"],"input strand":["4"],"input string":["into","first.","is","when","you","may","and","would","has","and","has","however"],"input string)":["using"],"input strings":["that","from","to"],"input strings.":["Surely"],"input that":["is"],"input to":["be","every","`wordCount`.","it,","`isShouty`","observe","have","your"],"input unchanged.":["True"],"input validation":["is"],"input was":["n"],"input will":["be","be","always","always","even"],"input with":["a","a"],"input! I":["had","will"],"input) &&":["last"],"input) rather":["than"],"input) would":["be"],"input). That":["said,"],"input). You":["need"],"input, and":["this"],"input, but":["it's","it","if"],"input, check":["out"],"input, including":["the"],"input, maps":["into"],"input, since":["it","the","`map`"],"input, so":["long","we"],"input, the":["other"],"input, versus":["something"],"input, when":["all"],"input, where":["answering"],"input, whereas":["I"],"input, you":["can","should"],"input. A":["right"],"input. At":["best"],"input. I":["found"],"input. If":["you","you"],"input. The":["tests"],"input. You'll":["end"],"input. `(ByteString.unpack":["."],"inputs I":["would"],"inputs and":["making"],"inputs are":["unique.","String."],"inputs at":["every"],"inputs for":["the","start"],"inputs made":["it"],"inputs that":["were","the"],"inputs to":["```zip```"],"inputs when":["it"],"inputs you":["might"],"inputs), but":["also"],"inputs, I":["didn't"],"inputs, a":["letter"],"inputs, and":["is"],"inputs, e.g.":["`lookupPlants"],"inputs, so":["I","I'd"],"inputs. \"last\"":["is"],"inputs. I":["don't"],"ins empty":["xs"],"ins t":["(k,x)"],"insert a":["name.","thunk"],"insert and":["instead"],"insert at":["all,"],"insert functions":["that"],"insert k1":["v1","v1","v1","v1"],"insert k2":["v2","v2","v2","v2","v2","v2","v2","v2"],"insert kn":["vn","vn","vn","vn","vn","vn","vn","vn"],"insert over":["empty."],"insert pupils":["in","in"],"insert separately.":["Take"],"insert something":["into"],"insert to":["Map"],"insert will":["build"],"insert with":["function,"],"insert' empty":["."],"insert) (singleton":["x)"],"insertDefaults could":["use"],"insertWith (+)":["\"foo\"","\"foo\"","\"foo\"","key","y","wn"],"insertWith (insert":["."],"insertWith implementation":["is"],"insertWith in":["the"],"insertWith somehow,":["but"],"insertWith' (+)":["\"foo\"","\"foo\"","\"foo\""],"insertWith, but":["the"],"insertWithKey f":["k"],"insertWord inside":["map"],"insertWord` in":["`wordCount`."],"inserted before":["this?"],"inserted element)":["in"],"inserted in":["sorted"],"inserted to":["the"],"inserted, otherwise":["it's"],"inserting 2":["into"],"inserting 2,":["it"],"inserting 3":["it"],"inserting `((+1)":["1)`"],"inserting into":["the","an","the"],"inserting it,":["you"],"inserting them":["into"],"inserting. The":["name"],"inserting/looking-up keys)":["and"],"insertion because":["then"],"insertion easier!":["In"],"insertion happens":["in"],"insertion in":["a"],"insertion internally,":["that's"],"insertion part,":["that"],"insertion, this":["is"],"insertion. When":["you"],"insertions (i":["know"],"insertions with":["an"],"inserts an":["element"],"inserts given":["the"],"inserts with":["a","less"],"inserts would":["be"],"inserts you":["are"],"inserts, however":["more"],"inside ```isAnagram```.":["The"],"inside `atomically`":["(or","(well,"],"inside `classify`":["then"],"inside `nucleotideCounts`":["as"],"inside `toEnum`":["makes"],"inside `where`":["without"],"inside a":["where","`case`.","code"],"inside an":["MVar,"],"inside both":["of"],"inside computational":["context"],"inside either":["(remove"],"inside functions":["much,"],"inside is":["that"],"inside lambdas.":["Is"],"inside map":["as"],"inside monad":["it"],"inside of":["the","a"],"inside out":["to","when"],"inside responseFor.":["Then"],"inside that":["robot"],"inside the":["code","Monad,","applicative,","map.","fold","IO","`toRNA`","map,","lambda.","`where`","body","same","range"],"inside where":["clause"],"inside your":["where","square","robot."],"insight into":["why"],"insights, @aaron":[":)"],"insignificant difference":["in"],"insist on":["solving","using"],"inspect each":["numeral"],"inspecting the":["string."],"inspiration for":["how"],"install (and":["haskell-platform"],"install Data.List.Split":["otherwise."],"install HLint":["now."],"install doesn't":["have"],"install it).":["I'm"],"install missingh\"":["should"],"install missingh)":["-"],"install these":["on"],"installable with":["[cabal-install](http://www.haskell.org/haskellwiki/Cabal-Install)."],"installation doesn't":["seem","know"],"installation is":["too"],"installed from":["default"],"installed syntastic":["and"],"installed with":["haskell-platform"],"installed you":["don't"],"installed. GHC":["has"],"installed. With":["your"],"installing ghc-mod":["or"],"instance (Bounded":["a,"],"instance (Eq":["a,"],"instance (Ord":["a,"],"instance (Read":["a,"],"instance (Show":["a,"],"instance Eq":["a"],"instance Foldable":["BST","BST","BST"],"instance Functor":["((,)","Maybe","(Either","[]","IO","((-\u003e)","((,)","Maybe","(Either","[]","IO","((-\u003e)","((,)"],"instance I":["also","needed!"],"instance Monad":["((-\u003e)"],"instance NFData":["Robot"],"instance ReadsBase":["p","DNA"],"instance and":["`fmap`"],"instance as":["all"],"instance could":["be"],"instance declaration":["for"],"instance entirely.":["This"],"instance for":["lists","the","Bool","functions","`(,)","`Char`","`(,)`","lists,","`(,)","`(,)","all","Bool","Bool","Char,","Char","Char.","`(,)","(Num","`(,)"],"instance here":["is"],"instance instead":["of"],"instance is":["defined","bad.","another","not","just"],"instance it's":["cleaner"],"instance of":["Bool","`return`","Bool","said","`Enum`.","`Read`,","`Show`.","`Show`","Pretty","the","the","maybe:","Maybe","Enum"],"instance on":["(a","Char,","Schedule.","`(,)","`(,)"],"instance seems":["like"],"instance should":["correspond"],"instance so":["`read"],"instance such":["that"],"instance that":["only"],"instance to":["be","do","do","decipher"],"instance wants":["`readsPrec`"],"instance was":["probably"],"instance where":["0..3","False","you'd","I"],"instance which":["is"],"instance will":["be","work"],"instance won't":["ever"],"instance yourself,":["or"],"instance), but":["you"],"instance). Applicative's":["`\u003c*\u003e`"],"instance, `set":["\"xxy\""],"instance, and":["a"],"instance, have":["`normalizeWord`"],"instance, keeping":["track"],"instance, so":["no"],"instance, then":["you"],"instance, what":["if"],"instance, which":["means"],"instance, why":["do"],"instance. But":["for"],"instance. I":["don't"],"instance. Sometimes":["you"],"instance? I":["just"],"instances alone,":["use:"],"instances and":["in"],"instances are":["preferred"],"instances as":["well)."],"instances built-in":["to","for"],"instances close":["to"],"instances don't":["do"],"instances from":["`Data.List'"],"instances have":["something"],"instances in":["Haskell"],"instances of":["that","the","Functor","`(++)`"],"instances often":["have"],"instances so":["`rnf"],"instances that":["Maybe"],"instancing `show`":["for","instead,"],"instant running":["time"],"instantiated based":["on"],"instantly (```ord":["'z'"],"instantly compare":["elements,"],"instead I've":["rewritten"],"instead and":["eliminate"],"instead as":["it"],"instead be":["stored"],"instead but":["I","this"],"instead directly":["'T'"],"instead for":["that."],"instead if":["that","you","then"],"instead is":["preferred."],"instead it's":["a"],"instead of":["foldr","`(==","`head","dropping.","`filter`","`isSuffixOf`,","`concatMap`","a","folding","separate","passing","~2N.","`[Char]`","`(==","reinventing","an","an","`flip","`fromList","sorting","fromListWith.","lists","`isUpper`.","`Other`","`map`.","`/=`","grouping","IORef","folds","building","`insertWith`,","`\\_","String","`last`.","`[Char]`,","`STRef`,","using","`(map","`last`","once","map","if,","a","`and","`and`,","in","if","`null`","nested","passing","passing","separate","Data.DList","using","defining","using","hiding","subtracting","O(n)","pattern","`emptyMessage`,","`all","the","`data","a","`data","list","comprehensions,","adding","`words`","if-else","zip,","your","lambdas,","`if`","\"No","`(\\s","last.","mapping","using","`allTrue`","liftM2...","\"a\"","div","`reverse`.","one?","a","character","the","the","using","interleave/choose/uninterleave","`isUpperCase`","a","`Prelude.head`,","list","`foldl`.","doing","a","string","simple","using","rolling","the","one","`numLetters`.","`(x:xs)`","```yelling```","`choice`","`$`","doing","`findWithDefault`.","explicit","using","`(\\w","exponentiation!","using","regex","`foldr`","Data.Map,","folding","`writeIORef`.","that","the","the","trying","just","folding","Data.Map","Data.List.","Data.Map.","doing","doing","iteratively","inserting","Data.Map.","`seq`","explicit","`foldr`","`insertWith`.","Data.Map","`take`s","leaving","`alter`,","using","`toList`?","explicit","eagerly","`foldl`","`last`.","a","`foldl'","using","sorting","`isNumber`","`words`","Data.Map,","just","just","explicit","`records`.","`[Char]`","`Map.Map`.","the","Data.Map.","just","spreading","`fromJust","nested","symbols/keywords/etc.","an","48","manually","simply","Data.Map.","`[Char]`.","wrapping","converting","`zip`","`take","using","STMVar,","using","do","explicitly","`foo","reversing.","`intersperse","Data.Map","`foldl'`.","`map`,","storing","`DNA","just","using","adding","`\u003c*\u003e`):","sorting/grouping,","`(==","just","leaving","the","just","the","explicit","explicit","`Data.Map`.","a","just","`zip`,","my","`newStdGen`","`zip`","the","`_`","just","`foldl'`","Data.Map.Strict","Data.Map.Strict","`fromListWith`,","Data.Map.Strict","`foldl'`","Data.Map.Strict?","a","lists","recursing.","a","for","`foldl`.","repeating","a","doing","O(n)","just","constant),","Monad","`unique","eagerly","list","`==`.","guard","a","do","the","`\u003e\u003e","`||`?","this","just","`concat","arithmetic","`lastDayOfMonth`,","addGregorianMonthsClip","`fst`","importing","`2^n`","just","`+`.","writing","Data.Map.","`zip`","`!`.","`(\"CM\"++)","filtering","a","your","list","`(join","`f","just","`isLetter`","`foldl'`","implicitly","lazy","names","`$`","`let`","using","`p","`groupsOf`.","explicit","using","\"in","having","\"all","a","Data.Text's","Data.Map.","`foldr`","creating","using","Monad's","defining","constant","if/then/else.","`divisible","`foldl`\".","`foldl`.","checking","IOArray.","using","liftM*","Maybe","repeating","modifyMVar","expanding","`let`,","Data.Map","if/then/else","`[Eggs..]`?","Lazy?","iterative","[]?","Lazy,","some","data","swapMVar","`Data.Map`","pure","`String`","`++`.","`liftA2`),","Map.","Data.Map","```replicate","Char?","`read","using","using","`words","using","using","testing","delete","`foldl`,","`[Char]`.","`like_this`.","trying","`any`?","running","a","`words","`fmap`.","`length","`length","scrub.","strandToStr.","four,","calculating","`foldl`,","using","actually","length.","if-then-else","split","guards.","Data.Map.","the","`newStdGen`.","`length","your_one","a","guards.","\"a","`Integer`,","`Bool`","`M.unionsWith","128","if-then-else.","using","using","foldl.","equality,","all","`insert`","list","computing","using","regular","handwritten","`last","a","`instructions`","foldl'","hard","++","an","strings,","data.","fold","it.","current","```mod```,","```foldl```","`ord`?","the","list?","vector","`type`,","folding.","explicitly","using","`foldl`","Data.Map.","`modifyTVar`","guards","a","guards?","```Map```,","`data`.","just","Data.Map.","just","closer","`words`","crashing","manually","`concat","the","lazy.","maintaining","comparing","`[]`"],"instead on":["using"],"instead reflects":["the"],"instead rewrite":["`anagramsFor`"],"instead since":["as"],"instead though":["(the"],"instead use":["Map.fromListWith"],"instead which":["does","would"],"instead) and":["`foldl`"],"instead, although":["I"],"instead, and":["then"],"instead, as":["you","the"],"instead, because":["the"],"instead, but":["it's"],"instead, it":["may","will"],"instead, its":["the"],"instead, or":["just"],"instead, since":["you"],"instead, this":["is"],"instead, which":["you","uses","has","has","has","gives","does"],"instead, you":["shouldn't"],"instead, you'd":["get"],"instead. Also":["you"],"instead. Alternatively":["you"],"instead. Although":["I"],"instead. Could":["you"],"instead. For":["a","a","a","a"],"instead. I'll":["try"],"instead. If":["there's","you","you're"],"instead. It":["would"],"instead. The":["reason","reason","reason","reason","data"],"instead. This":["section"],"instead. To":["kill"],"instead. Worst":["case,"],"instead. You":["may"],"instead; I":["don't"],"instead? It":["would"],"instead? `dropWhile`":["then"],"instead? e.g.":["using"],"instead? the":["look"],"instead… this":["is"],"instegers you":["may"],"instinct is":["to"],"instinct to":["reduce"],"instinct too,":["since"],"instread of":["multiplication,"],"instruction for":["a"],"instruction is":["an"],"instruction restrict":["you"],"instruction says":["that"],"instruction who's":["execution"],"instruction, it's":["not"],"instructions I":["get"],"instructions exactly?":["There's"],"instructions of":["both","a"],"instructions. Simply":["put"],"instructions. You":["cannot"],"insufficiently definitely":["atomic?"],"int foo(a)":["{"],"int foo(int":["a)"],"int function,":["the"],"int in":["the"],"int is":["also"],"int you":["may"],"int, because":["each"],"int. What":["`fmap"],"int. You":["should"],"intToDigit [0..9])`":["and"],"int`, just":["do"],"integer calculation":["yet"],"integer instead":["of"],"integer not":["less"],"integer representation":["of"],"integer square":["root"],"integer to":["digits"],"integer would.":["The"],"integer, performing":["\"basic\""],"integer-gmp ...":["linking"],"integer. Check":["out"],"integers and":["sum"],"integers in":["any"],"integers should":["almost"],"integers together":["since"],"integers together,":["so"],"integers. Then":["in"],"integral numbers?":["split"],"integration script":["that"],"intend that":["to"],"intended API":["(just"],"intended and":["likely"],"intended for":["those"],"intended purpose":["of"],"intended to":["be","ever"],"intended way":["to"],"intent as":["absolutely"],"intent of":["this","the","this","this","`lookups`"],"intent rather":["than","that","than"],"intent, would":["be"],"intention more":["obvious"],"intention of":["the"],"intention revealing":["code."],"intention than":["```sanitizeInput"],"intention with":["`Data.Map.toAscList`"],"intention would":["be"],"intention, particularly":["`anything`."],"intentionally didn't":["use"],"intentionally used":["non-atomic"],"intentions more":["clear."],"interact we":["either"],"interact with":["the"],"intercalate \"":["\""],"intercalate needing":["a"],"intercepted. Different":["meaning"],"intercepted. Whereas":["placing"],"interchangeable with":["the"],"interest of":["achieving"],"interest, what":["is"],"interested in":["improving","with","using","breaking","learning"],"interested in.":["However"],"interested to":["here","get"],"interesting :":[")"],"interesting about":["the"],"interesting approach":["to"],"interesting article.":["I"],"interesting as":["it"],"interesting bit":["of"],"interesting class":["will"],"interesting elements":["like"],"interesting exercises":["later"],"interesting implementation,":["where"],"interesting in":["the"],"interesting multi-line":["string"],"interesting observation,":["npbarnes."],"interesting on":["its"],"interesting point,":["I"],"interesting post":["by"],"interesting questions":["about"],"interesting so":["I'm"],"interesting solution,":["but"],"interesting song":[":)"],"interesting than":["a"],"interesting to":["come","come","see","do","read","show","bench.","see"],"interesting way":["of","to"],"interesting with":["external"],"interesting! I'll":["refactor"],"interesting! Most":["solutions"],"interesting, I":["didn't"],"interesting, although":["I","you","I'd","I'm"],"interesting, because":["then"],"interesting, but":["from"],"interesting, educational":["and"],"interesting, is":["it"],"interesting. I":["believe","don't"],"interesting. The":["impression"],"interesting. Yeah,":["I"],"interface (just":["`wordCount`"],"interface -":["`number`,"],"interface does":["not"],"interface for":["the"],"interface is":["right"],"interface that":["the"],"interface, this":["approach"],"interface, which":["in"],"interface. Something":["like"],"interfaces. You":["want"],"interleave a":["different"],"interleaved though,":["though"],"interleaving is":["no"],"interleaving of":["two","threads,"],"interleaving you":["might"],"interleaving you'd":["expect."],"intermediary Floating":["type,"],"intermediary thunks.":["In"],"intermediate `foldr":["addNextNucleotide`?"],"intermediate `isAnagram`":["to"],"intermediate `parts`":["variable."],"intermediate actions":["are"],"intermediate data":["structures)"],"intermediate digits":["(like"],"intermediate lists":["will"],"intermediate mapped":["array?"],"intermediate processing":["steps."],"intermediate results":["and","of"],"intermediate structures":["that"],"intermediate thunks":["in"],"intermediate values":["and"],"intermediate values.":["It"],"intermediate, unevaluated":["expression"],"intermediate, unevaluated,":["and"],"internal debate":["about"],"internal function":["defined","so"],"internal functions":["to"],"internal list":["of"],"internal representation":["isn't"],"internal robot":["structure,"],"internal structure":["may","to"],"internal to":["the"],"internal type":["to"],"internal use":["of"],"internal workings":["of"],"internal, this":["enabling"],"internally (with":["an"],"internally and":["provides","ones"],"internally by":["`fromListWith`."],"internally in":["a"],"internally somewhere":["and"],"internally uses":["a"],"internally, and":["be"],"internally, but":["forgot"],"internally, it":["may"],"internally, so":["`School.sorted`","if"],"internally, that's":["not"],"internally-used function":["in"],"internals _should_":["be"],"internals of":["modules.","the","structure"],"internals without":["causing"],"internals. I'll":["frequently"],"interpolating pupil":["properly"],"interpolation there's":["Text.Printf"],"interpret it":["the"],"interpret this":["as"],"interpretation of":["an"],"interpretation. So":["when"],"interpretations as":["legal,"],"interpreted and":["0.004s"],"interpreted as":["`([1..3]","`(not"],"interpreted code":["in","in"],"interpreted code)":["and"],"interpreted in":["GHCi,"],"interpreted several":["different"],"interpreted the":["first"],"interpreted with":["no"],"interpreting the":["code"],"intersection as":["soon"],"intersperse \"":["\"`."],"intersperse \",":["\""],"into 'classify',":["classify"],"into 0":["(`\\acc"],"into 1":["and"],"into Control.Lens,":["Control.Lens"],"into GHC's":["TupleSections"],"into Haskell":["IO"],"into IO":["(that"],"into IO.":["Any"],"into Learn":["You"],"into WHNF":["all","in","(perhaps"],"into WHNF,":["which"],"into WHNF.":["For"],"into Weak-Head":["Normal"],"into [questions]":["where"],"into `(/=)`":["only"],"into `Data.List.any`":["and"],"into `M.insertWith":["(++)"],"into `MVar`":["or"],"into `Prelude`":["from"],"into `Text`.":["`Prelude`"],"into `add":["g"],"into `anagramOf`:":["\u003ccode\u003eanagramOf"],"into `fromListWith`":["in"],"into `ghci`":["before"],"into `let`":["or"],"into `otherwise`":["guard"],"into `responseFor`":["so"],"into `responseFor`.":["This"],"into `splitPlaces`,":["but"],"into `where`":["clauses."],"into `wordsBy`":["from"],"into `wordsBy`,":["from"],"into a":["helper","fold.","tuple","string","pair","map","common","single","few","separate","list","map;","map,","function!","bag","guard","`last`","useful","single","`where`","where","sorted","composition","`Map`.","square,","section","`where`","`where`","where","local","new","`Map`","custom","balanced","single","single","first-class","map","list","data","separate","`Text`.","`Text`","function,","list","single","String","loop.","similar","list","descriptive","mess.","single","endless","variable?","Data.Map.","where","list."],"into academia":["to"],"into account":["for"],"into an":["`all","`isQuestion`","operator","internal","initially","operator"],"into another":["module,"],"into appropriately-named":["functions,"],"into better":["blocks."],"into complete":["mess)"],"into equal":["code"],"into first":["three,"],"into first-class":["ones."],"into for":["loop"],"into functions":["(like","(like"],"into functions.":["Would"],"into helpers":["for"],"into implementing":["```dropFor```"],"into inner":["functions"],"into it":["in"],"into its":["own","own","own","own","own","own","current","own"],"into line":["18."],"into list":["of"],"into local":["bindings","variable","variable","variable"],"into making":["something"],"into memory":["at","and"],"into more":["patterns","patterns?"],"into mostly":["is"],"into much":["more"],"into myself,":["and"],"into one":["line.","line:","function","simpler","function.","dimentional"],"into other":["options"],"into pairs":["of"],"into pass":["over"],"into plain":["map.","map."],"into play":["to"],"into pointfree":["style","style"],"into ridiculous":["point-free"],"into roughly":["`insert"],"into separate":["vars","lists","functions","functions","statements?"],"into seperate":["functions"],"into several":["different"],"into something":["more","that"],"into that":["algorithm.","a","list."],"into the":["specification.","problem","on","filter","`f`","`Callable`","function","where","first","map.","map,","Map","Map.","Map.","issue","where","`foldl`","same","`where`","map","same","habit","right","functions","details","`atomically`"],"into their":["own","functions,"],"into therapy":["which"],"into these":["reviews."],"into this":["problem.","task"],"into this!":["Will"],"into this...":["Awesome"],"into those":["things."],"into toRNA?":["I"],"into tuples,":["but"],"into two":["strings,","equations.","regions"],"into two,":["like:"],"into upper":["case."],"into using":["fromListWith","liftM2"],"into variable":["bindings"],"into weak-head":["normal","normal"],"into where":["clauses."],"into why":["you"],"into words":["in","would","(the"],"into words,":["maps","as"],"into your":["inner","bottler"],"into, so":["it's"],"into. It":["might"],"into. It's":["the"],"intro on":["Haskell's","how"],"intro to":["this"],"introduce Data.Set":["per"],"introduce a":["more","new","helper"],"introduce additional":["complexity."],"introduce indirection":["with"],"introduce new":["types"],"introduce power?Code":["looks"],"introduce such":["mapping"],"introduced based":["on"],"introduced by":["outliers:","outliers:"],"introduced if":["the"],"introduced line":["13"],"introduced the":["Emotion"],"introduces a":["lot","new","space"],"introduces some":["complexity","fragility"],"introducing `thousands`,":["`hundreds`,"],"introducing a":["variable","new"],"introducing an":["additional"],"introducing edge":["cases,"],"introducing function":["nonidentical"],"introducing maybe,":["it's"],"introducing the":["`ys`","variable","intermediate","`(+:)`"],"introducing types.":["Can't"],"introduction of":["the","both","a","a","the","the"],"introductory chapters":["on"],"introductory material":["for"],"introductory text":["is"],"introspection facilities":["are"],"ints since":["there"],"intuition on":["that"],"intuition that":["`all"],"intuitive feeling":["as"],"intuitive. Thanks":["for"],"inured to":["point-free"],"invalid =":["(\"invalid"],"invalid DNA":["sequences,","sequences"],"invalid at":["all.."],"invalid char":["will"],"invalid char,":["its"],"invalid character":["in","through"],"invalid characters":["that","as"],"invalid conversion,":["looks"],"invalid digit":["is"],"invalid digits":["are","are"],"invalid input":["-","as","digits","and"],"invalid inputs,":["so"],"invalid inputs.":["I"],"invalid is":["a.hack"],"invalid nucleotides,":["than"],"invalid nucleotides.":["Passes"],"invalid number":["to","at"],"invalid pattern":["match"],"invalid text,":["instead"],"invalid would":["be:"],"invalid, but":["should"],"invalid. Options":["seem"],"invalidated my":["original"],"invariant using":["`fromListWith`"],"invariants, but":["nothing"],"inverses of":["each"],"invert the":["order"],"invest my":["time"],"investigate type":["encoding."],"investigate what":["this"],"invokes `sort`":["more"],"involve `isPunctuation`":["at"],"involve a":["Map,"],"involve an":["exhaustive"],"involve external":["libs"],"involved (such":["as"],"involved in":["using"],"involved it's":["a"],"involved some":["use"],"involved to":["factor"],"involved, parentheses":["are"],"involved. `acct`":["is"],"involves `fromListWith`":["(or"],"involves no":["concatenation."],"involves only":["one"],"involves traversing":["the"],"involves using":["Data.Map.Strict"],"involving `Data.List.intersperse`":["perhaps?"],"involving both":["of"],"involving mutation,":["so"],"ioName \u003c-":["newIORef","randomName","randomName"],"ioref, mvar,":["tvar)[1]"],"iota of":["harm"],"irks me":["a"],"irrational distrust":["of"],"irrelevant. It":["might"],"is \"\".":["Perhaps"],"is \"The":["one-line","one-line","one-line"],"is \"containers-0.5.0.0\".":["This"],"is \"empty\";":["your"],"is \"more":["efficient\","],"is \"much":["faster\"."],"is \"read":["the"],"is \"the":["result","first"],"is '1'.":["This"],"is (a":["list)."],"is (obviously)":["incomplete;"],"is (short)":["M"],"is *how*":["it"],"is -":["I","it's"],"is --":["you"],"is 0":["and","that"],"is 0.":["Most"],"is 1.":["Looks"],"is 10,":["then"],"is 123*.-123-.--1234\"`.":["Nice"],"is 2":["or","raised","raised","raised","raised","raised","raised","spaces","raised"],"is 26":["characters"],"is 27":["lines"],"is 2^2":["and"],"is 3":["plus"],"is 36":["(i.e.,"],"is 5":["plus"],"is 53":["cubed?\""],"is 64*2":["comparsion"],"is \u003cpre\u003e9223372036854775808":["@=?"],"is \u003e=":["that","the"],"is Alpha":["or"],"is Alpha,":["there"],"is Data.Map.Strict":["not"],"is False.":["So"],"is First..Fourth":["which"],"is GHC":["smart"],"is Haskell's":["non-strict"],"is I":["guess"],"is IMHO":["making"],"is MUCH":["more"],"is Maybe":["Integer"],"is NP.":["But"],"is O(":["n^2","n^2"],"is O(1)":["with","rather","and","as","too","and"],"is O(1))":["to"],"is O(log":["n)","n).","n)"],"is O(log(map":["size))"],"is O(n":["log"],"is O(n!)":["in"],"is O(n)":["and","since","and","operation,"],"is O(n))":["but"],"is O(n),":["a","where","where"],"is O(n*log(n))":["versus"],"is O(n^2)":["and","and"],"is O(n^2).":["If"],"is O(n^2)?":["Gross!"],"is O(number":["of"],"is OK":["that","as","now,"],"is OK,":["but"],"is String":["and","I"],"is String,":["so"],"is True":["for","for","for"],"is True.":["It's"],"is Wednesday":["this"],"is [String]":["-\u003e"],"is _spine-strict_,":["and"],"is `!@@!@#$%%^^*&&()`,":["what"],"is `\"cd\"`.":["I"],"is `'A'`,":["so"],"is `(,)":["\u003cthunk\u003e"],"is `(Integral":["b,"],"is `(String,":["a)`,"],"is `(a":["-\u003e","-\u003e"],"is `(all":["isSpace)"],"is `+`,":["so"],"is `.).`":["part"],"is `2":[":"],"is `False":["|"],"is `False`,":["the"],"is `Integer`":["so"],"is `Integral":["a"],"is `Map.findWithDefault":["default`"],"is `Map.fromListWith":["(+)"],"is `Maybe":["Integer`"],"is `O(log":["n)`)"],"is `O(n":["*"],"is `O(n)`":["and"],"is `O(n)`.":["This"],"is `Parser":["a`,"],"is `Response":["-\u003e"],"is `String`).":["sentence"],"is `Text":["-\u003e"],"is `True`":["for"],"is `[Char]`":["and"],"is `[]`":["or"],"is `[n,":["n"],"is ```(`zip`":["repeat"],"is ```Nothing```,":["so"],"is ```closeAccount```":["supposed"],"is ```n```":["divisable"],"is ``sortBy":["(compare"],"is `a":["++"],"is `all":["(\\char"],"is `all`":["defined"],"is `closeAccount`.":["If"],"is `concatMap`).":["In"],"is `f":["x`","x"],"is `foldl'`":["not","from","or"],"is `foldl`:":["it"],"is `foldr`":["basically"],"is `head":["&&&","."],"is `insertWith`,":["the"],"is `isAsciiUpper`":["to"],"is `last":["str"],"is `n":["+"],"is `n`":["and"],"is `not":["(null"],"is `replaceChar":["y"],"is `replicate":["x"],"is `square":["::"],"is `start":["+"],"is `tails`":["function"],"is `toRNA":["="],"is `true`":["for"],"is `txt":["=="],"is `unfoldr`":["from"],"is `unlines":["."],"is `x":["=="],"is a":["bit","type","trick","typo...","function","little","type","better","much","space","selective","good","good","nice","top-level","cleaner","little","good","tradeoff","Monoid?\"","bit","bit","top-level","space'.","standart","great","very","really","bad","good","complete","simpler","factor","factor","real","misleading","little","problem","list","function","function","type","better","bit","fine","more","little","bit","function","lot","bit","function","case","good","bit","bit","good","bit","`pred`","function","function","good","__lot__","strange","typical","fine","very","list;","good","great","slippery","bit","bit","total","bit","bit","sequential","bit","speed","poorly","solid","matter","way","problem","lot","bit","matter","thing","big","slow","little","subpart","tad","great","much","little","bit","fun","bit","single","spine-strict","tremendous","bit","piece","Char,","linked","type","bit","little","common","solid","predicate.","bad","snippet:","Functor.","bit","Youda","subtle","cleaner","function","little","partial","good","comment","block","little","much","space-leak,","different","space","\"spine-strict\"","bit","little","misleading","functor","little","nice","`list`,","substitution","very","top-level","bit","little","space","single","nice,","little","slightly","space","more","typeclass","problem","list.","kind","good","bit","space","better","part","neat","better","tough","single","space","long","much","spine-strict","sort","nice","match","private","strict","great","space","little","little","good","matter","predicate","common","little","more","type","trick,","constructor","second","second","great","race","trap,","spine-lazy","bit","member","spine-lazy","pretty","fine","tuple","terrible","bad","spine-strict","case","bit","bit","trade-off","whole","value-lazy","spine-strict","good","standard","pretty","spine-strict","bit","much","lot","strict","thing?","bit","cross","bit","Binary","bit","good","really","long","totally","straight-up","Robot","neat","superclass","new","bit","bit","much","bit","fancy","more","spine-strict","lot","bit","very","suitable","bit","`TVar","better","net","common","bit","great","very","good","good","very","matter","function","function","much","normal","bit","very","bit","common","bit","great","bit","bit","great","space","Functor","bad","total","good","lambda,","Functor","huge","bit","bit","bit","mapping","lower","great","better","composition","list.","trivial","case,","bit","blocking","great","bad","good","size","nice","bad","permutation","list,","bit","bit","common","working","way","necessary","binary","little","straightforward","whitespace\"","shorter","bad","triangle","`cfgPerformGC`","lazy","top-level","bit","list","bit","syntax","difference,","big","very","standard","good","handy","mapping","better","wrapped","functor.","standard","value","part","bad","little","lot","way","type","nice","bit","decent","big","bit","nice","bit","good","good","potentially","bit","corresponding","bit","way"],"is a.hack":["to"],"is a.nice":["way"],"is able":["to","to","to"],"is about":["the","as","scoring","as","all","2/3rds","it","creating","creating","a"],"is absolutely":["no","nothing"],"is acceptable":["as-is."],"is accumulator":["strict)"],"is accumulator-strict).":["The"],"is accumulator-strict,":["so"],"is active":["at","at","at"],"is active)":["so"],"is actually":["really","not","incorrect","equivalent","much","to","inside","doing","worse","very","correct,","doing.","MUCH","the","a","not"],"is added":["to"],"is adding":["strictness"],"is algorithm":["implementation."],"is all":["here","you","letter","to","about!","that"],"is allocated":["will"],"is allowed":["except"],"is almost":["never","always","the","equivalent","always","just","never","always","never","never","certainly","always","never","never","universally","always","everything","universally","great,","no","everywhere","always"],"is alphabetical,":["and"],"is already":["sorted.","very","very","imported","a","efficient,","`String`","True.","gone","lowercase.","guaranteed","compact!","curried","sorted.","in"],"is also":["no","included","pretty","included","no","a","commonly","something","considered","the","unusual,","an","`echo","used","acceptable,","related,","confusing","no","a","usually","suboptimal","called","called","used","a","going","the","a","relevant.","not","good","totally","the","a","equivalent","very","a","possible","exported.","possible:","acceptable","implemented","nice","not","in","applicable","a"],"is always":["the","either","the","the","preferable","higher","highest","better","higher","has","the","strict,","`True`.","one","False.","higher","higher","higher"],"is amazing":["for"],"is an":["`Enum`","older","improvement","anagram","awkward","`isUpper`","error","excellent","improvement","implementation","issue","improvement","`IORef","anagram","issue","element","anagram","extension","_expression_","easy","uppercase","expression","example","easy","O(n)","error.","O(","operator.","operator","`insertWith'`","anagram","abuse","excellent","implementation","O(n","operator","instruction","atomic","alternative","unused","interesting","important","order","unused","empty","instance","ordinary","optimization,","expression"],"is and":["avoid","possibly","what"],"is another":["element.","way","snippet","significant","fun","way","option.","function","option","story,","option","popular","option"],"is any":["more","lowercase","permutation","other","elegant...","better."],"is anything":["I"],"is applied":["to","non-strictly"],"is appreciated.":["`on`"],"is arbitrary,":["I"],"is arguably":["the"],"is around":["the"],"is as":["short","a","easy","simple","efficient","fast","efficient","simple","optimal"],"is assigned.":["If"],"is associated":["with"],"is associative":["and"],"is asymptotically":["*exactly"],"is at":["least","the","least","least","most","a","least"],"is atomic":["only","or"],"is available":["as"],"is awfully":["bad"],"is awkward":["because"],"is back":[":sweat_smile:"],"is bad":["here","for","and","to","on","because"],"is bad,":["a"],"is bad.":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html","Going","This"],"is based":["on","under"],"is basically":["always","always","the","exactly","useless","always","the","combinator","the","the","the","always","never","never","always","assumed","always","constructed","a","to","a","the","using"],"is because":["`isUpper`","of","the","`foldr`","that's","Data.Map","Data.Map","Map","of","I","some"],"is becoming":["quite"],"is being":["used"],"is benign":["and"],"is best":["option,","practice"],"is better":["expressed","than","done","or","written","performance-wise..","than","written","stated","place","(`liftA3`","than","for","done","written","than","suited","than","in","since","than","than","than","choice","than","modern","or","than"],"is better,":["though"],"is better.":["Too"],"is better?":["Why?"],"is beyond":["my"],"is bigger":["that"],"is bit":["n"],"is blah":["no"],"is blown":[":D!"],"is both":["more","unnecessary"],"is bound":["to"],"is brand":["new"],"is broken,":["and"],"is buggy":[":"],"is built":["is"],"is burdened":["with"],"is but":["it"],"is by":["comparing"],"is calculated":["only","multiple"],"is call-by-need":["(with"],"is called":["`toDecimal`","a","point-free","with","again","a","without","an","again"],"is called.":["It"],"is calling":["fromEnum","my"],"is canonical":["Haskell"],"is caught":["by"],"is cause":["problems."],"is certainly":["thorough,","easier","getting","the","one","easier"],"is cheating":[":)"],"is cheating,":["for"],"is checking":["for"],"is cleaner,":["albeit"],"is clear":["what","they"],"is clearer":["than"],"is clearly":["superior."],"is clever":["enough","although"],"is clever,":["`not","hadn't","hadn't"],"is closed,":["you"],"is closely":["related"],"is coincidentally":["implemented"],"is coming":["from.","from.","from"],"is complaining":["that"],"is completely":["irrelevant."],"is complex":["enough"],"is composed":["of"],"is computed":["for","multiple","as","multiple","even","exactly","only","at","at","at"],"is computed,":["using"],"is concat.":["Reverse"],"is concerned":["for"],"is concerned,":["the","I've","I"],"is concise":["and"],"is concise,":["clear,"],"is confusing":["to"],"is considered":["idiomatic","good","an"],"is constant":["and","as","it"],"is constructed":["as"],"is contiguous":["storage"],"is conveniently":["an"],"is cool,":["but"],"is copied":["from"],"is correct":["and"],"is correct,":["there","so","but"],"is could":["be"],"is count":["::"],"is covered":["in","in"],"is crazy":["more"],"is crazy.":["I"],"is created":["to"],"is currently":["bugged."],"is curried,":["will"],"is curried?":["Or"],"is customary,":["but"],"is dead":["code"],"is dealt":["with"],"is dedicated":["type"],"is defined":["in","as","in","in","like"],"is defined,":["`data"],"is definitely":["more","the","the","cleaner","the","cleaner","what","preferred.","ugly."],"is definitly":["a"],"is demonstrably":["true."],"is dependent":["on","on"],"is deprecated":["though,","so"],"is desired,":["so"],"is determined":["by"],"is dictated":["by"],"is different":["from","(Carthorse","from","from"],"is different,":["in"],"is difficult":["in"],"is divisible":["by","by"],"is doable":["with"],"is doing":["less","normalization","an"],"is done":["transforming","so","easier","aesthetically","strictly,"],"is doubled":["or"],"is dropped":["from"],"is early":["exit"],"is easier":["for","to","to","in","to","to","to","to","to","to","to","for","to"],"is easily":["annoyed.","fixed"],"is easy":["to","to"],"is efficient":["(constant","or"],"is either":["uppercase","alphabetical","`(:)"],"is empty":["can","or"],"is empty,":["and"],"is enough":["for","to"],"is ensuring":["sequential","that"],"is entirely":["possible.","whitespace"],"is enumerable,":["ordered,"],"is equal":["to"],"is equivalent":["to","to","to","to","to","to","but","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","and","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to:","to","to","to","to","to:","to","to","to","to","to","to","to","to","to","to","to","to","to"],"is error-prone":["(which"],"is especially":["confusing"],"is essentially":["specifying","a","doing"],"is evaluated":["at","just","as","at","first","at","at","at","or","like","at","at","at","at","at","at","to","at","at","at","exactly"],"is evaluated.":["Right"],"is even":["more","and","a"],"is evenly":["divisible","divisible","divisible"],"is eventually":["forced."],"is ever":["preferable."],"is exactly":["what","strict","the","what","the","the","what","the","the","the","the","the","the","what","what","what"],"is excusable,":["since"],"is executed":["in"],"is existing":["boundaries"],"is expecting":["a"],"is explicitly":["marked","export"],"is exported,":["then","because"],"is exposed":["at"],"is expressed,":["so"],"is extensible":["to"],"is extremely":["good","inefficient"],"is failed":["to"],"is failing":["all","only"],"is fairly":["obviously"],"is falcify":["tests."],"is far":["smaller","more","more"],"is faster":["than","(when","unless","then","by"],"is feed":["it"],"is filter":["p1"],"is filtered":["out"],"is final":["and"],"is fine":["though.","for","to","though).","in","though.","given"],"is fine,":["so","although","this","but","but"],"is fine.":["shoutChar"],"is fine?":["I"],"is fixed":["in"],"is flattened":["there"],"is followed":["by","by"],"is following":["something"],"is for":["the","using","sure","now.","applying","some","Maybe,","value","the"],"is forced":["into","implicitly","depending","into","into","(potentially","in","the"],"is forced,":["it","it","it","it","it","without","it","and"],"is forced.":["It","This","This","This","Can"],"is forcing":["values"],"is formed":["by"],"is found":["and"],"is fully":["evaluated"],"is functionally":["(ha..get"],"is general":["and"],"is generally":["much","short","used","favoured","preferred","preferred","best","preferred","not","preferable"],"is generated,":["such","such"],"is ghci,":["and"],"is given.":["Would"],"is global":["state"],"is going":["to","to","to","to","to","to","to","to","on.","to","to","to","to","to","to","to","to","to","to","on","on.","to","to","to","on"],"is gone.":["The","Thanks"],"is good":["though.","to","enough.","to","though.","enough","practice","form","but","in","too","but"],"is good,":["but","nice","but"],"is good.":["No","In"],"is got":["from"],"is great":["food","it's","except","but","for"],"is great!":["BTW,"],"is great,":["nice","nice","most","because","thanks)","constant","my","no","but","but","I","just"],"is great.":["A","I","I"],"is great:":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"is greatly":["appreciated;"],"is guaranteed":["to","to","to","to"],"is handled":["either"],"is handling.":["Probably"],"is happening":["but"],"is hard":["not","for","for"],"is haskell":["will"],"is heartily":["welcomed."],"is heavyweight":["would"],"is helpful":["in"],"is helpful,":["but"],"is here":["for","to"],"is here)":["is"],"is here.":["Isn't"],"is here:":["https://github.com/kytrinyx/exercism.io/blob/master/frontend/app/css/pygments.css"],"is higher":["precedence","precedence"],"is highly":["optimized"],"is horribly":["inefficient,"],"is how":["the","you","much","the","I","a).","to"],"is huge.":["`unlines`"],"is ideal":[":)"],"is identical":["except"],"is ignored?":["If"],"is illegal":["in","in"],"is imitation":["of"],"is immediately":["obvious,","obvious,"],"is imminent,":["so"],"is implementable":["using"],"is implemented":["as","with"],"is implemented.":["The"],"is import":["statements.","everything"],"is important":["to","to","for"],"is imported,":["you"],"is importing,":["but"],"is impossible":["or"],"is impure).":["If"],"is in":["one","point-free","prelude,","base,","prelude)","the","`[a-z0-9]`","your","the","the","weak-head","their","the","the","a","the","the","containers,","the","WHNF,","`findResponse`:","WHNF,","WHNF","a","Prelude","the","`nucleotides`.","Prelude,","the","this","weak-head","weak-head","the","Haskell"],"is inappropriate.":["Instead"],"is included":["in","with","in","in","with"],"is inconsistent":["in"],"is incorrect":["behavior"],"is incorrect,":["the","you're"],"is incredibly":["inefficient","common)"],"is increment":["the"],"is indeed":["readable.","a","better.","redundant.","a","much","that","most"],"is indented":["with"],"is inefficient":["and","with","here,"],"is infinite":["loop:"],"is infix":["more","and"],"is infixr":["3","2."],"is inserted,":["otherwise"],"is inside":["the"],"is intended":["for"],"is interesting!":["Most"],"is interesting,":["although","although","although"],"is internal":["function"],"is interpreted":["in"],"is is":["question","value-lazy"],"is it":["an","called?","preferred","unused?","good","typical","some","that","that","that","ever","considered"],"is just":["the","a","a","an","a","poor","the","`uncurry","`foldl'`","a","inured","a","syntax","to","brilliant.","for","sugar","syntax","a","indicated","`'?'`","for","a","a","\"a","fmap)","`anagramsFor`.","`sing`","`fmap`.","a","a","a","a","a","`str`","`otherwise","a","another","a","letting"],"is justified":["in"],"is keep":["track"],"is key":["and"],"is killing":["me"],"is kind":["of","of","of","of","of","of","of","of","of","of","of"],"is kinda":["silly,","weird"],"is known":["at"],"is known,":["so"],"is kosher":["here."],"is largely":["the"],"is larger":["than"],"is lazy":["because","by","and","so","function","version?"],"is lazy,":["so","the","left"],"is lazy.":["The"],"is left":["associative,","associative"],"is leftmost":["on"],"is legitimate,":["depending"],"is less":["clear","code,","comprehensible.","keystrokes","code","noisy).","clear","code,","confusing)","then"],"is lighter":["on"],"is like":["using","`words`","this:","`++`","this:"],"is like,":["worst"],"is likely":["to","what","garbage"],"is linear":["time,"],"is linearithmic.":["In"],"is literally":["the","this"],"is little":["point","room"],"is located":["on,"],"is longer":["than","than"],"is longer,":["but"],"is looking":["for"],"is lost":["you"],"is lower":["precedence"],"is made":["up","one","simpler"],"is made.":["This"],"is magic\"":["phase"],"is magick":["number,"],"is mainly":["to"],"is make":["it"],"is making":["-1"],"is many":["times"],"is map":["over"],"is mapped":["over)"],"is maybe":["a","it's"],"is missing":["a","a","type","a"],"is missleading":["especially"],"is misspelled":["but",":)"],"is moderately":["inflated","inflated"],"is modern":["variant"],"is modified,":["like"],"is monad":["and"],"is monolithic":["(term","function","there"],"is monolitic":["function"],"is more":["efficient","idiomatic","verbose","efficient;","clever","clear,","concise","clearly","of","efficient,","aesthetically","semantic?","commonly","commonly","idiomatic.","commonly","readable:","readable.","idiomatic,","commonly","efficient.","of","powerful.","clear","clear","complicated","commonly","nicely","code","clear.","specific","trouble","than","nicely","transparent","typically","efficient","future-proof","efficient","readable","succinct","idiomatic.","idiomatic","commonly","obvious.","typical","to","commonly","subjective.","readable.","of","or","efficient","preferred","common.","commonly","readable","readable","generic","obvious,","obvious,","preferable:"],"is most":["commonly","appropriate","of"],"is mostly":["used","to","layout."],"is much":["more","better","of","more","nicer","faster.","uglier","more","better,","simpler","easier","shorter","slower","more","more","simpler","more","more","worse","more","nicer","less","simpler","more","simplier","like","easier"],"is much,":["if"],"is my":["first","implementation","\"working\"","preferred","first","assumption","first","shot","first","first"],"is n":["deep"],"is naming":["it"],"is nearly":["always","twice"],"is neat":["and","(first",":-)"],"is neat.":["That"],"is necessary":["in","in"],"is necessary,":["it","I"],"is needed.":["The"],"is negative":["(Thursday..Sunday)."],"is neither":["an"],"is never":["empty,","observed","forced","forced","expected","use","called","empty,","demanded,","a"],"is new":["for"],"is nice":["and","and","but","when","(though","for","here,","in"],"is nice,":["I","but","but"],"is nicer":["indeed.",":-)"],"is no":["static","need","longer","error","help","real","utility","external","more","need","Alpha,","need","need","pragmatic","longer","excuse","reason","reason","reason","explicit","longer","ambiguity","doubt","try)","Left...and","longer","need","law","list","pure","pure","empty","difference","different","commonly","use","number","way","way","`own`","need","lowercase","function","way","need","such","reason","common","state"],"is non-empty":["before"],"is non-null":["and"],"is non-portable":["and"],"is non-standard,":["usually"],"is non-standard.":["Typically,"],"is non-strict":["the"],"is non-strict,":["your"],"is normalized":["at"],"is normally":["written","written","styled","written"],"is not":["a","used","part","required","used","a","ignored","A,","well-specified","a","immediately","that","used","recommended,","idiomatic","really","only","a","total,","preferable","supposed","an","empty.","a","in","the","entirely","correct","identity","exported","invalid,","standard","used","safe","so","total","a","really","strict","a","value-strict","exported","exported","exported","possible","in","a","the","so","the","a","a","ambiguous.","one","so","in","a","desirable,","hard","within","a","necessarily","often","to","an","necessary.","shouting","so","ideal","there","there","exactly","exported.","needed","strong.","re-computed.","ideal","a","necessary","a","less","working","a","alpha-numeric,","passing.","guaranteed","uncommon","a","correct,","whether","required","enough","required,","good","complicated","used","moved","much","needed","needed","a","ideal","necessary.","simpler","as","complicated.","exactly","the","working,","good","that","enouph","enouph","required.","the","just","entering","a","in","tailrecursive,","a","working,","completely","exhaustive..","already","being","much","really","optimal,","used","that","good","that","so","really","```0```","as","enough","value-strict):","obvolious","strict","part","a","very","functional"],"is not).":["Most"],"is not,":["and"],"is not.":["Here's"],"is nothing":["but","to"],"is now":["`[('a',","slower","in","a","strict,"],"is null":["or"],"is obfuscation,":["which"],"is objectively":["less"],"is obvious":["as"],"is obvious,":["and"],"is obviously":["total","flawed,"],"is oddly":["not"],"is of":["no","the"],"is often":["imported","more","more","more","more","more","more","used","used","written","written","written","written","used","just","a","the"],"is ok":["but","but","both","for","now"],"is ok,":["except"],"is okay,":["but","but"],"is on":["[Hackage](http://hackage.haskell.org/packages/hackage.html),","readability):","Ubuntu.","both","the","github,","both","both","the","the","a","a","the"],"is one":["extra","char","thing,","less","of","of","of","of","way,","of","bigger","reason","example.","more","that","possible"],"is one's":["top"],"is one-liner":["too,"],"is only":["being","slightly","used","one","needed","used","calculated","being","called","10","used","doing","performed","going","called","computed","referenced","good","normalized","used","one","2","going","going","strict","run","appropriate","really"],"is opened":["(not"],"is otherwise":["very"],"is out":["on","of"],"is outdated":["and"],"is outside":["of"],"is over":["engineered"],"is over-engineered,":["doing"],"is overcomplicated":["as"],"is overcomplicated,":["can"],"is overkill":["in"],"is overly":["complicated,","complicated,"],"is overwritten":["by"],"is pair":["in"],"is part":["of","and","of","of","of"],"is partial":["application."],"is partial,":["so","in"],"is passed":["and"],"is perfect":["for","except"],"is perfectly":["justified","valid.","good","legal","reasonable","OK.","ok."],"is performance,":["since"],"is perhaps":["more"],"is placed":["-","on."],"is plain":["lazy"],"is positively":["*bad*."],"is possible":["to","to","to","to","to","to","for","to","only"],"is possible,":["it"],"is potentially":["useful"],"is powerful.":["I"],"is practically":["free"],"is precisely":["where"],"is preferable,":["but"],"is preferred":["even","over","in","here."],"is preferred.":["But","Is"],"is preffered":["here","over"],"is present":["in","whether"],"is preserved":["(i..e"],"is pretty":["clear","verbose,","cool.","awkward","obvious,","much","ugly.","close","easy.","readable","simple,","limited.","concise,","straightforward","simple","good.","good,","performant.","much","much","self","common","old","horrid"],"is printed":["6"],"is probably":["better","as","because","more","expressed","a","better","just","doing","closer","excessively","more","*simpler*","better","not","better","a","better,","the","making","a","horrible","the","not","the","the","better","less","more","cheaper","a","not","better","going","good","incorrect"],"is problematic":["to"],"is processed":["twice?"],"is properly":["exported"],"is provided":["some"],"is pure":["it"],"is pure,":["so"],"is purely":["functional","a"],"is put":["the"],"is question":["a","mark\"?."],"is quite":["self-descriptive","nice.","long.","a","safe","fine","good!","long","benign","idiomatic.","common).","slow,","nice!","old,","possible","clear","inefficient","inefifcient","readable.","apparent","minor"],"is quote":["from,"],"is rarely":["needed).\"","the"],"is rather":["implicit.","jargony,","similar","a","common","extravagent."],"is read":["much"],"is readable":["and","but"],"is ready":["for"],"is really":["a","simple","badly","just","the","dumb,","readable","what","worth","strange.","clear.","a","cute","more","more","just","close","all","readable","helpful.","a"],"is reasonably":["readable."],"is redundant":["with","because","(in","as","and","you"],"is redundant,":["because","since","and"],"is redundant.":["L23","Everything"],"is redundant.\"":["So"],"is reduntant":["as"],"is refactored":["with","thanks"],"is referring":["to..."],"is related":["to"],"is relative":["to"],"is relying":["on"],"is removed":["if"],"is repeated":["three","more"],"is repeated,":["isn't"],"is represented":["by"],"is required":["by","is","only"],"is required,":["this"],"is reserved":["for"],"is returned":["instead."],"is right":[":)","that","about","now?"],"is right-associative":["just"],"is right.":["Using"],"is run":["without","once"],"is running":["transaction."],"is safe":["or","in","in"],"is safe,":["though"],"is same":["as","as"],"is sameSorting":["x`?"],"is separated":["into","by","by"],"is shared":["between","for"],"is short":["&"],"is shorter":["(and","as"],"is shorter,":["but","but"],"is shouting,":["which"],"is significant,":["it"],"is silence,":["you"],"is silly.":["I"],"is simple":["and","enough","enough"],"is simple,":["but","just","you"],"is simpler":["and","and"],"is simply":["a","`foldl'`."],"is slight":["ambiguity"],"is slightly":["better","less","misleading,","inefficient","easier","faster"],"is slow":["for","anyway)."],"is small":["enough"],"is smaller":["than"],"is smart":["enough","enough"],"is so":["great!","descriptive","hard","long.","trivial","easily","small,","huge.","much"],"is some":["discussion","way","build-up"],"is somehow":["the","recognized"],"is something":["like","that","I'm","I","you","simpler?","that","that","whole"],"is sometimes":["called"],"is somewhat":["less"],"is sorted":["internally,"],"is sound,":["but"],"is special":["and"],"is specialized":["to"],"is specific":["to"],"is specified":["in"],"is spent":["on"],"is spine-strict":["(such","it","(such"],"is spine-strict.":["You","See","See"],"is spot":["on."],"is starting":["to"],"is still":["```2n```","unhelpful","O(1)","a","performant.","a","gnarly,","a","very","there","a","sub-par.","a","a","something","robot","room","working.","not","primitive","(log","too","fine.","possible"],"is stores":["a"],"is storing":["thunks"],"is straightforward":["although"],"is strange.":["It"],"is strict":["evaluation","in","in","or","use","use","use","to","in"],"is strict.":["Otherwise,","`seq`"],"is strictly":["equivalent"],"is strongly":["suggested"],"is structured":["doesn't"],"is stupid,":["this"],"is suboptimal":["because"],"is subtle":["and"],"is subtle,":["very"],"is sufficient":["to","to"],"is sufficient,":["where","or"],"is sugar":["for"],"is sum":["of"],"is super":["ugly."],"is superfluous,":["usually","but"],"is supplied,":["rather"],"is supposed":["to","to","to","to","to","to","to","to"],"is sure":["to"],"is switch":["`foldl`"],"is syntax":["sugar"],"is taken":["from"],"is talking":["about."],"is technically":["redundant."],"is telling":["you"],"is ternary":["..."],"is testing;":["the"],"is that":["in","the","i","it's","it's","(AFAICS)","only","of","it's","it's","it's","you're","the","the","there","it","isAllCaps","it's","I","I","they","I","those","`intercalate","I","there","this","the","most","the","it","`messageType`","you","possible?","you","there's","the","this","it","`fromListWith`","it","there","your","instead","none","there's","the","the","the","it","Data.Map","you","Data.Map","all","with","most","it","you're","the","you","all","this","GHC","the","I","I","instead","although","you","it","I","you","`any","it","acceptable","an","Data.Map","you","what","you","the","`sorted`","it's","their","it","the","necessary?","`anagramOfX`","the","all","it's","it's","using","Data.Map","you","it","it's","you","an","simply","once","although","if","things","you're","you","they're","`voice`","correct?","the","you","when","of","way","it","sometimes","if","I'm","a","you","really","a","it","first","this","this","tail","its","foldr","the","strict","you","inner","your","you're","i","it's","you","you","the","`last`"],"is the":["first","great","wrong","wrong","best","same","same","right","wrong","wrong","same","wrong","wrong","otherwise","way","wrong","same","same","lack","advantage","simplest","'mapMaybe'.","`.`","same","point","lowest","one","same","way","benefit","reason","string","same","same","same","highest","right","most","problem","wrong","wrong","wrong","wrong","second","easiest","same).","same","same,","isShout","definition","same).","better","same","only","answer?","benefit","same","convention","anagram","right","`not","applicative","version","prefix","same","first","first","next","case","wrong","package","second","shortest","first","problem","next","same,","wrong","same","closest","wrong","opposite","arbitrary","zip.","best","lowercased","sorted","wrong","wrong","wrong","following:","highest","one","same","last","one","way","wiki","only","use","wrong","`Monad`","way","size","size","warts","right","same","same","most","naming","equivalent","last","original","result","last","implementation","issue,","efficiency","first","brute","same","change","first","\"alternate","second","correct","bool","bottleneck","same","wrong","same","sum","same","higher","Haskell","second","`score`","wrong","value-lazy","same","significance","value-lazy","other","first","same","purpose","head","right","exactly","action","same,","same","instructions","case,","root","CPP","main","same","same","same","first","function","same","where","wrong","problem","definition","way","worst","first","first","only","overlap?","check","one.","same","best","limit","foldl'","same","same","best","same","first","same.","same","same","right","problem","interesting","one","reason","length","same","one"],"is then":["match","add"],"is ther":["e"],"is there":["a","a","because","some","some","such","a","a","a","something","a","a","a","some","a","and","a","a","either.","some","any","a","any","much","a","a","a"],"is there.":["It's"],"is there?":["I"],"is therefore":["technically"],"is this":["chapter","solution","is","section","implementation.","section","shouting?"],"is this,":["lisp?"],"is thread-safe":["(I"],"is thrown":["_and_"],"is thus":["the"],"is thymidine":["and"],"is tiny,":["but"],"is to":["simply","use","convert","never","avoid","explicitly","use","use","use","test","add","use","use","use","use","use","just","be","be","explicitly","explicitly","create","import","use","provide","use","name","convert","convert","move","create","think","get","avoid","make","do","have","create","know","use","make","use","have","either","just","apply","import","write","simply","use","use","use","use","use","import","use","*always*","put","explicitly","always","use","do","ensure","only","use","import","include","import","do","import","note","write","use","also","be","use","know","just","notice","use","use","use","import","try","do","only","make","remove","shift","implement","benchmark","provide","import","use","call","import","it.","do","use","consider","refactor","use","mention","be","convert","use","not","use","use","export","pass","check","check","use","use","pass","define","either","use","use","start","return","return","name","have","do","use","replace","use","filter","return","just","use","use","use","eliminate","use","drop"],"is too":["uninteresting","broad.","obscure","complex","old"],"is too.":["This"],"is top":["level,"],"is top-level":["so"],"is total,":["why"],"is totally":["worth","unnecessary","appropriate","up","an"],"is traveresed":["by"],"is traversed":["only","and","by"],"is traversed.":["A"],"is treated":["like","as"],"is tricky.":["I"],"is tried":["first"],"is trivial":["enough"],"is true":["for","because"],"is true,":["returns"],"is true.":["It"],"is trying":["to"],"is type":["specs"],"is typical":["to"],"is typically":["defined","called","written","used"],"is ugly":["and",":)"],"is uncharted":["territory"],"is understandability":["over"],"is understanding":["the"],"is understood":["when"],"is unneccessarily":["complicated."],"is unnecessarily":["complicated"],"is unnecessary":["since","to","in","and","(it's"],"is unreadable,":["just"],"is unrelated":["to"],"is unused":["too?","in","and"],"is unused,":["if","I"],"is unused.":["You"],"is unusual,":["typically"],"is uppercase":["or"],"is used":["to","to","anywhere.","inconsistently","newtype","to","with","in","twice","here?","for","instead","in","instead","for","instead","for","pretty","once","twice.","in","instead","to","at"],"is used,":["e.g.","it"],"is useful":["for","for","here"],"is useful:":["`mod"],"is useless,":["and"],"is using":["the","a","`any`,","Data.Map","all","`countElem`","2","a","`fromEnum`,"],"is using.":["It"],"is usually":["good,","the","written","done","urged","preferred","written","bad","written","a","written","written","better","not","both","used","named","preferable","preferable","done","when","indented","fine.","written"],"is usually..I":["knew"],"is vacuously":["true."],"is valid":["syntax.","syntax,","into"],"is valid,":["and"],"is valid.":["I"],"is value":["lazy,","lazy"],"is value-lazy":["here,","so","you","so","so","so","so","so","so"],"is value-lazy,":["so","so","so","so","you","which","this","it's"],"is value-lazy.":["For","The","For","Check"],"is verify":["that"],"is very":["common","beautiful","simple","readable,","efficient.","clever.","similar","similar.","inefficient","similar","hard","similar","inefficient","inefficient.","readable.","concise.","nice!","pythonic","inefficient","useful","inefficient).","inefficient","useful!","welcome!","inefficient","easy","slow","ineffective.","easy","cheap.","obvious,","clear","true.","well"],"is wanted.":["Interesting"],"is way":["better,","more","more","more","too"],"is weird":["coming"],"is weird;":["what"],"is welcome.":["Also,"],"is well":["implemented,"],"is well-written":["and"],"is what":["it","bob_test.hs","`[n,","you","you","I","your","I","a","the","you","`foldl'`","map","I","haskell-mode","you're","you","new"],"is when":["you","this"],"is whether":["or"],"is whitespace":["around"],"is why":["I","I","I've","I","you","you","have","such","there's","doing"],"is with":["the","fromListWith","`fromListWith`,","`fromListWith`","`Data.Map`,","Data.Map,","Data.Map.","type"],"is without":["the","non-alpha"],"is working":["fine"],"is worse":["because"],"is worth":["it.","looking","it,"],"is written":["as","like","as","that","against"],"is written,":["I"],"is wrong":["-","and","is",":-)"],"is wrong,":["you"],"is wrong.":["With"],"is yet":["simpler."],"is your":["rationale","friend"],"is zipWith":["instead"],"is\" and":["\"XX"],"is\" or":["\"the"],"is' concept,":["it"],"is) in":["both"],"is, I":["got"],"is, `MessageType`":["is"],"is, and":["now"],"is, as":["you"],"is, but":["in","not"],"is, fixed":["imports."],"is, foldr":["will"],"is, however,":["a"],"is, is":["there"],"is, it":["will","doesn't","requires"],"is, it's":["probably"],"is, look":["at"],"is, my":["frequencies"],"is, of":["course,"],"is, other":["than"],"is, otherwise":["just"],"is, take":["a"],"is, there's":["a"],"is, these":["versions"],"is, using":["the"],"is, very":["new"],"is, well,":["you"],"is, you":["don't"],"is, you'll":["exit","error"],"is,. But":["is"],"is. My":["n"],"is. Really":["helpful"],"is. The":["first"],"is... using":["mutable"],"is: 123.":["456.7890\"```,"],"is: under":["what"],"is; since":["I'm"],"isAggressive is":["that"],"isAggressive ist":["really"],"isAggressive message":["="],"isAggressive, it's":["tricky"],"isAll does":["here."],"isAllCaps I":["could"],"isAllCaps can":["be"],"isAllCaps is":["more"],"isAllUpper, isQuestion`":["functions"],"isAllergicTo a":["i)`"],"isAllergicTo value)`":["is"],"isAlpha and":["isDigit)"],"isAlpha greeting`":["to"],"isAlpha m`":["than"],"isAlpha message)":["\u003e"],"isAlpha s":["(Shout)"],"isAlpha st`":["rather"],"isAlpha str":["&&","&&"],"isAlpha str\u003c/pre\u003e":["But"],"isAlpha str`":["you"],"isAlpha text`,":["since"],"isAlpha x":["==","to"],"isAlpha) q":["="],"isAlpha) x":["||"],"isAlpha)` with":["`all"],"isAlpha, any":["and"],"isAlpha, isSpace":["from"],"isAlpha. I":["don't"],"isAlphaNum -":["earlier"],"isAlphaNum c":["||"],"isAlphaNum does":["need"],"isAlphaNum exists":["(I"],"isAlphaNum to":["select"],"isAlphaNum x":["="],"isAlphaNum) c":["then"],"isAlphaNum) lowerText`":["(`wordsBy`"],"isAlphaNum) rest":["\u003c/pre\u003e"],"isAlphaNum) s]`":["is"],"isAlphaNum) to":["change"],"isAlphaNum)` this":["will"],"isAlphaNum)` would've":["been"],"isAlphaNum)`. It":["is"],"isAlphaNum)`. `wordsBy`":["won't"],"isAlphaNum)`? I've":["thought"],"isAlphaNum, also":["Data.List.Split"],"isAlphaNum` and":["cause"],"isAlphaNum` test":["fails"],"isAlphaNum` you":["may"],"isAlphaNum``` because":["this"],"isAlphaNum```. Thanks":["@mikayla!"],"isAlpha` can":["be"],"isAlpha`). Regexes":["should"],"isAnagram (e.g.":["have"],"isAnagram .":["prep"],"isAnagram ::":["String"],"isAnagram are":["the"],"isAnagram in":["your","terms","a"],"isAnagram is":["removed"],"isAnagram should":["probably","have"],"isAnagram since":["isAnagram"],"isAnagram take":["both"],"isAnagram w1":["="],"isAnagram would":["only","be"],"isAnagram x":["y","="],"isAnagram xs":["="],"isAnagram, you":["can"],"isAnagramFor ::":["String"],"isAnagramFor rather":["than"],"isAnagramFor s":["="],"isAnagramOf (map":["toLower)","toLower)`,"],"isAnagramOf ::":["String","String"],"isAnagramOf =":["(==)","((==)"],"isAnagramOf `on`":["(map"],"isAnagramOf means,":["in"],"isAnagram` since":["the"],"isAnagram`, and":["then"],"isAsciiLower) a`":["instead"],"isAsciiLower)` is":["really"],"isAsciiLower` since":["all"],"isAsciiUpper v`":["to"],"isAsciiUpper` as":["`any"],"isAsciiUpper`. `$`":["is"],"isBlank =":["all"],"isBlank from":["Data.Char."],"isBlank with":["`all`?"],"isCaps (though":["it"],"isDigit input":["=~"],"isDigit x":["="],"isDigit\" or":["\"take"],"isDigit` are":["also"],"isDigit` to":["be"],"isDivisible raindrops`":["where"],"isEmpty as":["a"],"isEmpty could":["be"],"isEmpty is":["implementable"],"isEmpty only":["ignore"],"isEmpty using":["any/all"],"isEmpty, but":["it's"],"isExclamation was":["a"],"isFoo rather":["than"],"isIndifferent? Imho":["this"],"isJust .":["mfilter"],"isJust is":["used"],"isLeapYear year":["="],"isLetter &amp;&amp;":["isUpper."],"isLetter '":["'"],"isLetter `orP`":["isUpper)"],"isLetter a":["&amp;&amp;","&amp;&amp;","&amp;&amp;"],"isLetter a`.":["You"],"isLetter l)":["||"],"isLetter message)":["&amp;&amp;"],"isLetter message`":["are"],"isLetter query`":["doesn't"],"isLetter s":["in"],"isLetter s`":["are"],"isLetter s`.":["It"],"isLetter xs":["&&","&&"],"isLetter xs`":["to"],"isLetter xs`.":["It's"],"isLetter ||":["isNumber"],"isLetter, but":["looks"],"isLetter. Over":["engineered?"],"isLetter` (or":["`all"],"isLike \"^\\\\s*$\"`":["but"],"isLogical) tri`":["as"],"isLower anyway.":["Maybe"],"isLower either...":["you"],"isLower from":["Data.Char.","Data.Char."],"isLower l`.":["Then,"],"isLower message)`":["for"],"isLower msg)`.":["In"],"isLower s)":["&amp;&amp;"],"isLower s)`,":["which"],"isLower s)`.":["It's"],"isLower str)`":["would"],"isLower str)`,":["same"],"isLower text)":["="],"isLower than":["to"],"isLower treat":["non-alphabetic","non-alphabetic"],"isLower x":["="],"isLower xs)`.":["I"],"isLower) str)":["&amp;&amp;","&&"],"isLower) x`.":["If"],"isLower)` in":["my"],"isLower)` instead":["of"],"isLower)` rather":["than"],"isLower)`, removing":["your"],"isLower)`. If":["you're","you're"],"isLower, which":["seems"],"isLower] .":["flip"],"isLower` but":["this","this"],"isLower` is":["a","also"],"isLower` might":["be"],"isLower` or":["`all"],"isLower` which":["is"],"isLower` will":["cover"],"isLower` would":["be","do"],"isLower`, which":["is"],"isLower`, you":["could"],"isLower`. Both":["seemed"],"isNonsense =":["all"],"isNotSomething` when":["`isSomething`"],"isNucleotides c":["="],"isNumber is":["the"],"isNumber on":["line"],"isPunctuation =":["(`elem`"],"isPunctuation c":["="],"isPunctuation implies":["not"],"isPunctuation, then":["adding"],"isPuntuation with":["no"],"isQuestion \"?\"":["="],"isQuestion ('?':[])":["="],"isQuestion -":["yes,"],"isQuestion =":["(\"?\"","(==","last"],"isQuestion a":["total","total"],"isQuestion am":["I?","I?"],"isQuestion and":["isShout","isEmpty"],"isQuestion are":["partial"],"isQuestion could":["be"],"isQuestion doesn't":["actually"],"isQuestion is":["a","a"],"isQuestion isn't":["either."],"isQuestion message":["="],"isQuestion s":["="],"isQuestion should":["probably"],"isQuestion shouldn't":["really"],"isQuestion this":["looks"],"isQuestion was":["in"],"isQuestion without":["a"],"isQuestion. It":["would"],"isQuestion` functions":["to"],"isQuestioning in":["point"],"isQuiet =":["\"Fine.","all"],"isSentenceChar as":["a"],"isShout condition,":["but"],"isShout function":["and"],"isShout function,":["it"],"isShout functions":["certainly"],"isShout is":["much"],"isShout, isQuestion":["and"],"isShouting =":["(&&)"],"isShouting in":["applicative"],"isShouting per":["@mara's"],"isShouting pointfree,":["but"],"isShouting predicates":["without"],"isShouting seems":["to"],"isShouting still":["seems"],"isShouting will":["check"],"isShouting would":["be","say"],"isShouting, perhaps":["something"],"isShouting, to":["be"],"isSilence ::":["String","String"],"isSilence =":["all","all","all","all"],"isSilence `m":["isLike"],"isSilence and":["isYell"],"isSilence can":["be"],"isSilence check":["first."],"isSilence guard":["first"],"isSilence m":["="],"isSilence s":["="],"isSilence simpler":["with"],"isSilence would":["already"],"isSilence, or":["making"],"isSilent and":["isShouting"],"isSomething` is":["equivalent"],"isSpace \"\"":["==","=="],"isSpace \"\"`":["evaluate"],"isSpace \"\"```":["yields","yields"],"isSpace $":["s"],"isSpace ::":["[Char]"],"isSpace []":["=="],"isSpace []`":["returns","returns"],"isSpace [x|xs]`.":["That"],"isSpace and":["last","isLower","isLower"],"isSpace c":["then"],"isSpace c`,":["since"],"isSpace c```":["clause"],"isSpace for":["saidNothing"],"isSpace from":["Data.Char","Data.Char"],"isSpace function":["as"],"isSpace is":["True"],"isSpace message`":["=","since"],"isSpace might":["be"],"isSpace q":["="],"isSpace s":["(Silence)",")"],"isSpace s)":["\u003e\u003e"],"isSpace s`":["guard"],"isSpace s`?":["(Maybe"],"isSpace seems":["better"],"isSpace string`":["is"],"isSpace string`.":["Same"],"isSpace x":["=="],"isSpace x`.":["Essentially"],"isSpace xs`":["is"],"isSpace' for":["the"],"isSpace(string)` should":["be"],"isSpace) message`,":["etc."],"isSpace) string`.":["Though"],"isSpace) ws`":["or"],"isSpace) x":["==","=="],"isSpace) x`":["could","it's"],"isSpace)` instead":["of"],"isSpace)`, or":["use"],"isSpace)``` isn't":["that"],"isSpace` -":["just"],"isSpace` and":["`question","be"],"isSpace` captures":["the"],"isSpace` is":["equivalent","equivalent"],"isSpace` so":["you"],"isSpace` that":["is"],"isSpace` with":["the"],"isSpace`). But":["then"],"isSpace`. Personally":["I"],"isSpace`. `all`":["returns"],"isSuffixOf avoids":["this"],"isSuffixOf because":["I"],"isSuffixOf from":["Data.List","Data.List"],"isSuffixOf might":["be"],"isSuffixOf overkill":["for"],"isSuffixOf to":["achieve"],"isSymbol c":["="],"isUpper $":["filter","filter"],"isUpper (filter":["isAlpha","isLetter"],"isUpper .":["filter"],"isUpper \u003c*\u003e":["not"],"isUpper \u003e\u003e=)":["."],"isUpper ```?":["Obviously"],"isUpper a)":["||"],"isUpper a`":["or","is",":)"],"isUpper alphas":["&amp;&amp;"],"isUpper and":["isAlpha.","isLower","isLower"],"isUpper c)":["=="],"isUpper c)`":["is"],"isUpper c`.":["Function"],"isUpper l`":["is"],"isUpper letters":["&&"],"isUpper letters`.":["There's"],"isUpper message":["&amp;&amp;"],"isUpper s)`":["represents"],"isUpper s`":["and"],"isUpper str`":["might"],"isUpper text":["&&"],"isUpper text`":["with"],"isUpper x":["="],"isUpper x)`":["with"],"isUpper x`":["with"],"isUpper xs":["&&","&&"],"isUpper) .":["filter"],"isUpper) q```":["-"],"isUpper)` should":["do"],"isUpper, but":["on","it"],"isUpper, isAlpha,":["isSpace"],"isUpper, not":["."],"isUpper` is":["really"],"isUpper`, but":["using"],"isXyz style":["and"],"isYell are":["superfluous."],"isYell, and":["the"],"isYelling -":["my"],"isYelling could":["be","definitely"],"isYelling is":["unneccessarily"],"isYelling s":["="],"isYelling s)`":["is"],"isYelling seems":["more"],"isYelling str":["="],"is_foo but":["this"],"isanagramOf\", though":["the"],"isn't Erlang":["or"],"isn't [value-strict](http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html)":["so"],"isn't a":["common","super-pleasant","bad","great","function","lot","good","very","problem","standard","strict","very","great","need","lower","separator.","pleasant","built-in"],"isn't actually":["an","necessary,"],"isn't adding":["anything"],"isn't always":["better"],"isn't an":["`enumerate","optimization,"],"isn't as":["problematic"],"isn't calculated":["twice","until"],"isn't changing":["the"],"isn't clear":["from","from"],"isn't cooperating.":["I"],"isn't correct,":["it"],"isn't covered":["in"],"isn't dealt":["with"],"isn't doing":["something"],"isn't either.":["However,"],"isn't enormously":["_less_"],"isn't evaluated":["more"],"isn't even":["in","in","amortized","necessary.","a"],"isn't ever":["very"],"isn't forced":["anywhere,"],"isn't full":["or"],"isn't fused":["at"],"isn't generally":["imported"],"isn't going":["to"],"isn't ideal":["because"],"isn't ideal,":["it"],"isn't in":["my","the","my","the","Haskell","the","the"],"isn't indented":["quite","so"],"isn't isSuffixOf":["overkill"],"isn't it":["more","ideal?","possible","more"],"isn't let":["me"],"isn't likely":["to"],"isn't much":["advantage","of","better"],"isn't my":["favorite"],"isn't necessarily":["correct","a"],"isn't necessary":["for","to"],"isn't necessary,":["since"],"isn't necessary.":["Also,"],"isn't needed":["when","because"],"isn't needed,":["depends"],"isn't obvious":["why"],"isn't one":["of"],"isn't optimizing":["out"],"isn't part":["of","of","of","of","of","of"],"isn't pragmatic":["to"],"isn't quite":["correct"],"isn't really":["an","necessary,","necessary","ideal","the","such","what","a","much","a","relevant,","too","good","a"],"isn't recognized":["by"],"isn't relevant":["to"],"isn't relevant.":["The"],"isn't required":["of"],"isn't restricted":["to"],"isn't so":["clear"],"isn't something":["you","the"],"isn't specified":["in"],"isn't strict":["in","so","because","in","in"],"isn't strictly":["necessary","necessary."],"isn't subject":["to"],"isn't that":["the","what"],"isn't the":["best","best","case","only","best","case","best","ideal","only","way","best"],"isn't there":["any"],"isn't this":["better"],"isn't to":["parse"],"isn't too":["efficient,","much","cutesy","unwieldy","much"],"isn't totally":["necessary"],"isn't trivial.":["There's"],"isn't typically":["done,"],"isn't unreasonable":["to"],"isn't used":["anywhere","in"],"isn't useful":["since"],"isn't value":["strict"],"isn't value-strict,":["so"],"isn't value-strict.":["If"],"isn't very":["useful.","good"],"isn't what":["you","it"],"isn't where":["I'd"],"isn't write-only":["code,"],"isn't, but":["there's"],"isn't. Maybe":["comments"],"isn't. There":["are"],"isn'tTarget =":["(/="],"isolated and":["avoid"],"isolation is":["about"],"isolation, which":["I"],"isomorphic to":["Int)."],"isomorphic, former":["just"],"isosceles...etc, which":["doesn't"],"issue -":["this"],"issue I":["didn't"],"issue about":["this:"],"issue against":["exercism"],"issue and":["a"],"issue at":["all"],"issue based":["on"],"issue but":["didn't"],"issue for":["me."],"issue goes":["away."],"issue happens":["when"],"issue here":["will"],"issue is":["that","with","actually","to","created","that","to","that","in","present","that","a"],"issue of":["`words`","the"],"issue per":["my"],"issue since":["it"],"issue that":["should"],"issue what":["about"],"issue when":["I"],"issue which":["probably"],"issue with":["the","this","non-strictness","this","the","this","the","non-strictness","using","folds","this","roman","the"],"issue you":["might"],"issue\" is":["with"],"issue), but":["no"],"issue, has":["nothing"],"issue, same":["as"],"issue, you":["could","can"],"issue. For":["example,","a","a"],"issue. I'm":["not"],"issue. Should":["the"],"issue. That":["said,"],"issue: Data.Map's":["functions","functions"],"issues (race":["conditions)"],"issues are":["related"],"issues aside,":["the"],"issues better.":["I"],"issues for":["you"],"issues here":["with"],"issues here.":["Almost","Input","From"],"issues if":["the"],"issues or":["if"],"issues related":["to"],"issues slightly":["more"],"issues that":["the"],"issues to":["complain"],"issues warnings":["on"],"issues with":["this","regard","the","your","this"],"issues you":["might"],"issues, and":["both"],"issues, you":["should"],"issues. Basically":["what"],"issues. See":["http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl%27"],"ist really":["nice"],"ist so":["strict,"],"is— I":["just"],"it \"message":["!="],"it (`stripped`)":["will"],"it (after":["already"],"it (an":["example"],"it (but":["thanks"],"it (even":["to"],"it (for":["a"],"it (including":["the"],"it (it":["can"],"it (just":["a"],"it (might":["be"],"it (possible,":["but"],"it (so":["bitmasks"],"it (stack":["can"],"it (the":["STM"],"it (which":["is","you"],"it (wrong":["command"],"it *have*":["to"],"it *is*":["a"],"it *might*":["be"],"it *stops":["evaluating"],"it -":["I"],"it --":["that's"],"it :)":["I"],"it =":["67`","56`"],"it ?":["And"],"it Haskell":["way."],"it I":["wonder"],"it I'd":["not"],"it In":["a"],"it [here][hp]),":["but"],"it `.:`.":["Not"],"it `\u003c$\u003e`,":["something"],"it `hammingDistance`":["in"],"it `isSpace":["::"],"it `length":["(xs+1"],"it `normalize`":["or"],"it `not":["."],"it `revDigits`":["in"],"it `toReversedList`":["then"],"it `ys`":["or"],"it a":["lot","lot","problem","bit","little","total","little","few","little","shot,","little","top-level","little","bit?","variable","total","type","lot.","bit","bit","lesser","little","bit","go.","shot","bit","partial","short","different","shot","list","try","bit","number","bit","non-DNA","bit","second","partial","total","character","total","bit","little","lot","try.","try","lot,","little","decent"],"it about":["the"],"it absolutely":["positively"],"it acceptable":["because"],"it accepted.":["Must"],"it accepts":["many"],"it actual":["allocation."],"it actually":["does.","is","sinks","matches","matters,"],"it added":["clarity."],"it after":["it","failing"],"it again":["when","with","it"],"it again,":["you're","but","since"],"it aids":["readability"],"it ain't":["broke..."],"it aligned":["where"],"it all":["pretty","from","ends","of","looks","makes","looks","makes"],"it all:":["http://apfelmus.nfshost.com/blog/2013/08/21-space-invariants.html"],"it allocates":["linear","more"],"it allows":["me"],"it all…":["when"],"it almost":["always"],"it aloud":["it's"],"it already":["looks"],"it also":["requires","suffers","causes","runs","saves"],"it always":["returns"],"it an":["algorithmic","instance","empty"],"it and":["see","it","I","did","see","then","is","O(n)","at","it","use","continue","been","write","it","use"],"it another":["way","shot"],"it any":["better.","clearer.","clearer,","neater."],"it anyway":["because"],"it anyways":["mainly"],"it anywhere,":["and"],"it apart":["to","again,"],"it as":["an","a","it","a","`[Char]`","follows:","an","an","\"equivalent","\"f","much","it","often","a","you","data.","a","a","it","`(…)`","much.","a","it","\"CCNNN\"","`(,1)`.","simply","\"given","a","a","if","String.","qualified","special,","`[n,n-1..m]`","is","is","it","is","it"],"it as-is,":["`zipWith"],"it as-is;":["the"],"it at":["the","the","the","this","the"],"it avoids":["introducing","some"],"it away":["(this"],"it away,":["it'll"],"it back":["in","to","together","in.","into"],"it basically":["makes","only","will"],"it be":["a","a","`isAnagram`","a","better","accurate","better,","OK","(another","more","faster?","better","like","like","done","better","possible"],"it because":["it","I","it","everything"],"it becomes":["a","overly"],"it before":["submitting.","(esp","[HLint](http://community.haskell.org/~ndm/darcs/hlint/hlint.htm)"],"it before,":["`$`"],"it before.":["So"],"it being":["easier"],"it better":["your","than","is","by","to","using","to"],"it both":["ways,"],"it breeds":["a"],"it build":["successfully"],"it builds":["a","a","more","up"],"it but":["didn't","I","they","it","can't","comments","why","I","anyway","I"],"it by":["halves","hand","hand.","exhaustively","hand.","seeing","hand","an","looking","hand.","writing","introducing","2?","3"],"it can":["be","be","overflow","overflow","parse","take","overflow","overflow","overflow","overflow","overflow","fail","easily","pass","get","become","be","be","perform","terminate","be","be","do","be","be","show","in","be","safely","be","often","terminate","be","use","already","be","take","be","do","check","have","begin","get?","be","clean","be","be","be","be","be","not,","be","go"],"it can't":["directly","be","fail","be"],"it catches":["the"],"it causes":["a","a","a","a"],"it certainly":["wouldn't"],"it changes":["the"],"it cheating":["to"],"it check":["only","elements"],"it checks":["if","the"],"it cleaner":["than"],"it clear":["that","what's","that","that"],"it clearer":["what"],"it cleverly.":["My"],"it closely).":["Is"],"it closes":["transaction"],"it comes":["down"],"it common":["in","in"],"it complement":["or"],"it complicated,":["then"],"it composes":["two"],"it compromises":["on"],"it considered":["best"],"it contains":["a","comparison"],"it conveys":["the"],"it correctly":["but","here."],"it correctly.":["Or"],"it correctly?":["Thanks!"],"it could":["be","break","be","be","be","be","be","have","easily","easily","be","be.)","be","be","be","be","even","be.","be","be","be","not","be","just"],"it count":["'U's"],"it covered":["by"],"it creates":["a","roman"],"it deals":["more"],"it definitely":["seems","get"],"it depends":["on","of","on","on"],"it did":["them","crash.","matter.","include","give","look"],"it did,":["the"],"it didn't":["use","need","have","change","look"],"it didn't,":["for"],"it directly.":["There"],"it divided":["`n`"],"it does":["look","not","keep","make","show","anything,","remove","not","work!","the","and","not","evaluate","a","kind","exactly","more","I","exactly","beg","recalculate","matter.","in","not","run","has","in","require","a","seem","with","look","look","look","seem","very","adhere","seem"],"it does,":["but"],"it does.":["So","Just","Not"],"it doesn't":["really","count","match","use","actually","seem","really","traverse","go","matter","exclude","seem","make","handle","compile","evaluate","require","make","seem","have","appear","really","clash","explicitly","really","actually","matter","make","come","like","repeatedly","look","feel","suffer","matter","do","add","matter","need","force","require","force","forces","force","have","forces","seem","make","really","force","really","make","make","make","work.","really","share","matter","seem"],"it doesn't.":["The"],"it done":["and","in"],"it down":["to","with\u003cpre\u003efactors"],"it easier":["to","to","to","to","to","for","to"],"it easy":["to","to"],"it efficient":["but"],"it either":["way."],"it empty":["while"],"it ended":["up"],"it ends":["up"],"it enough":["to"],"it ensures":["that"],"it entirely":["point-free","or"],"it evaluates":["just","the","to","the","it"],"it even":["more","has"],"it eventually":["you'll"],"it ever":["become","possible"],"it every":["time."],"it exactly":["that"],"it existed)":["but"],"it expects":["a"],"it explains":["very","things"],"it failed":["on"],"it fails":["for","with","then"],"it falls":["into"],"it faster":["than"],"it faster,":["you"],"it feel":["more"],"it feels":["like","more","like","like","to"],"it felt":["\"more"],"it fills":["the"],"it finds":["unequal","a"],"it first,":["I"],"it fits":["inside","with"],"it flips":["the"],"it for":["this","being","you","some","you","verbs","just","standard","a","operator","Bounded","the","each","function","2","them","now.","this","another","feedback.","my"],"it forces":["values","list"],"it four":["times."],"it from":["Prelude.","the","the","Bob,","multiple","Data.Map.Strict.","a","`wordCount","Data.Map.Strict","Foldable,","Maybe:","your","scratch,"],"it full":["while"],"it fully":["qualified"],"it further":["by"],"it generally":["considered"],"it generates":["a","nested","a"],"it get":["forced","run"],"it gets":["it","reduced.","a"],"it gives":["some","more","the","a","me","a","you"],"it goes":["into"],"it going":["on."],"it good":["practice","practice"],"it got":["optimized)."],"it guarantees":["all","the"],"it hadn't":["really"],"it handles":["empty","Just/Nothing"],"it happens":["I"],"it happens,":["\"not"],"it hard":["to"],"it harder":["to","to","to","for","to","to","to"],"it has":["to","a","a","to","explosions","`replace`","nothing","been","been","a","lower","a","fewer","a","all","something","to","to"],"it have":["to"],"it helped":["my"],"it helpful":["to"],"it helps":["when","now.","with","make"],"it here":["is",":","(bearing"],"it here,":["for"],"it here.":["What"],"it here....":["Can"],"it hits":["`last","the"],"it ideal?":["cause"],"it if":["it's","you","you"],"it ignores":["unpack"],"it immediately":["feeds"],"it implements":["the","the"],"it implies":["machine"],"it imports":["all"],"it in":["the","a","the","my","`isShout`.","a","the","more","infix","point-free","one-pass","a","`allWhiteSpace`","V4?","the","the","point-free","`nucleotideCounts`.","the","terms","to","a","terms","point-free","[@gus's","one","single","a","a","your","such","one","every","most","`isAllCaps`,","a","the","my","this","a","this","the","the","1","this","a","all","a","a","the","a","a","terms","one","a","`toSplit`.","this","this","the","a","a","a","mind!","the","anonymous","terms","one","`addDays","such","any","at","`transpose`?","a","Haskell...","a","more","more","WHNF"],"it in-place":["rather"],"it indents":["by"],"it inefficient?":["Aren't"],"it inline":["where"],"it instance":["of"],"it instantly":["(```ord"],"it interesting":["to","to"],"it internally":["in"],"it into":["a","a","'classify',","words","a","more","a","pairs","IO","the","IO.","\u003ccode\u003etoRNA\u003c/code\u003e.","a","a","a"],"it introduces":["a"],"it is":["objectively","O(n*log(n))","only","possible","in","less","quite","exactly","here)","what",":D.","good","less","possible","placed","to","somehow","definitly","one","covered","something","only","clear","not","now).","still","not","extensible","quite","the","one","something","supplied,","a","unnecessary.","doing","more","less","a","to","rather","non-null","uppercase.","safe,","good","not","very","very","nothing","top","nice","strict","a","NP.","treated","cheating,","not","not","`[]`","forced.","best","all","evaluated","certainly","forced","very","not","not","top-level.","top-level.","indeed","doing","a","perfectly","storing","important","usually","only","bad","formed","clear","equivalent","right-associative","a","modified,","that","not","almost","the","but","only","to","also","written","quite","more",":)","both","and","O(n^2)","a","less","then!","coming","that","demonstrably","written\".","about","a","only","true,","equivalent","written,","O(n^2).","written","much","a","quite","to","evaluated.","evaluated","much","possible","forced.","a","very","-","computed","missleading","very","not.","forced","able","that","about","evaluated","simpler","an","probably","possible","located","unrelated","portable):","a","safe","a","lazy","the","called","a","to","very","then","more","easier","not","now.","rather","efficient"],"it is'":["concept,"],"it is,":["you","there's","it's","otherwise","it","and","you'll","you'll"],"it is,.":["But"],"it is:":["https://github.com/etrepum/exercism.io/blob/f4103ea12500f9feb011d5adcb47a0ac814213da/assignments/haskell/pascals-triangle/example.hs"],"it isn't":["in","a","unreasonable","enormously","write-only","part","let","obvious"],"it isn't.":["Maybe","There"],"it it":["goes"],"it iterates":["through"],"it iterative":["instead"],"it iteratively":["here."],"it iteratively.":["For"],"it just":["me","won't","replaces","wouldn't","to","ensures","returns","irks","ensures","saves","small","feels"],"it justifies":["this"],"it keeps":["thunks,"],"it kind":["of"],"it knows":["more"],"it lacks":["a"],"it later":["on","anyway!),","and","when"],"it later,":["on"],"it leads":["to"],"it leaves":["the"],"it less":["verbose...","clear."],"it let":["me"],"it lifts":["pure"],"it like":["YELL.","this.","this:","that.","this","word-count,","that...","this","this.","this,"],"it lives":["in"],"it long":["and"],"it longer,":["not"],"it look":["nicer?","a","cleaner","not"],"it looked":["out","like"],"it looking":["something"],"it looks":["kind","great.","suspiciously","great.","good!","great!","VERY","too","good!","more","great.","with","fine.","great!","interesting.","like","good","kind","cleaner","like","like","like","like.","clean,","much","cleaner.","like","really","like","like","good.","a","good","nicer.","fine.","strange","better.","like","like","like","like","like","like","like","like","like","reasonable.","similar","much","much","nice."],"it lowercase":["as"],"it made":["a","it","a","this","more"],"it make":["more","sense","sense","it","sense"],"it makes":["reasoning","the","the","much","total","more","sense","code","sense,","a","much","sense","the","sense,","no","sense","sense","it","to","it","no","perfect","it","sense"],"it making":["some"],"it manually":["in"],"it many":["times."],"it matches":["the","all"],"it matters":["much","that","for"],"it may":["still","fail","give","not","not","not","depend","not","work","be","feel","do","make","do","be","be","introduce","take","be","simplify","lead","make","help","be","make","lead","not","never"],"it mean":["that"],"it means":["I","the","to","I","this","to"],"it might":["be","be","be","make","help","make","be","be","be","help","have","be","be","depend","lose","take","be","also","be","not","be","be","be","be","be","be","be","take","simplify","help","work","be","be"],"it misclassifies":["a"],"it monolithic":["and"],"it more":["clear","clear","clear","clear","clear","explicit.","readable.","readable.)","obvious/readable.","of","readable.","like","readable.","\"mathy\".","readable.","interesting","or","than","than","simple","efficient","readable","complex","or","clean","performant","simply"],"it most":["simply"],"it moves":["to"],"it much":["less","less","slower"],"it must":["read","be"],"it mutates":["the"],"it my":["sanitize"],"it myself.":["The"],"it naked":["in"],"it necessary":["to"],"it needed":["to"],"it needs":["to","to","to","to","to","to","to","to","to","to.","to"],"it never":["forces"],"it nice":["and"],"it nicer":["to","to"],"it normal":["to"],"it normally":["need"],"it not":["be","only","exists"],"it now":["instead"],"it obfuscates":["what's"],"it obscured":["some"],"it obvious":["why"],"it obviously":["doesn't"],"it occurs.":["Precomputing"],"it off":["until"],"it often,":["which"],"it on":["a","hoogle,","the","a","simple","ghci,","generation","Hoogle"],"it once":["at","and"],"it once,":["but"],"it once.":["Notice"],"it one":["way"],"it only":["with","necessitated","needs","once","makes","needs","makes","measures","looks","once","bothers","once,","works","goes"],"it open":["for"],"it opens":["up"],"it operates":["on"],"it original":["code"],"it other":["than","than"],"it ought":["to","to","to."],"it out":["it","to","into","like","on","like","loud","so","with","again.","since","in","when"],"it out),can":["you"],"it out,":["it","but"],"it out.":["I'm","Thanks.","Even"],"it out?":["Just"],"it outside":["the"],"it over":["guards,","your"],"it pans":["out."],"it pass":["we"],"it passed":["the"],"it passes":["the","the","the","the"],"it past":["the"],"it point":["free.","free,","free.","free."],"it point-free,":["you","since"],"it points":["at","out"],"it positively:":["if"],"it possible":["to","to","to","to","to","right"],"it preferred":["to"],"it prefix":["because"],"it premature":["optimization"],"it pretty":["clearly"],"it prevents":["`n*6`","the"],"it prints":["\"sort"],"it probably":["doesn't.","wouldn't.","wasn't","doesn't"],"it processes":["`source`"],"it produces":["a"],"it protect":["against"],"it provides.":["Thanks!"],"it pushes":["the"],"it qualified,":["so"],"it quicker,":["no?"],"it quite":["trivial,","a"],"it rather":["than"],"it reaches":["the"],"it read":["`all","mode","a","more"],"it readme":["case"],"it reads":["pretty","more","slightly"],"it really":["matters.","may","essential","matters"],"it recommends":["4"],"it redoes":["the"],"it relevant":["here.."],"it relies":["on"],"it replaces":["non-alphanumeric"],"it require":["full","to"],"it requires":["first","only","introducing","the","explicit","the","walking","you"],"it result":["into"],"it results":["in"],"it return":["`Nothing`,"],"it returns":["`False`","`anaGramOfX`,","the"],"it rhymes":["with"],"it right":["now.","from","will"],"it round":["to"],"it run":["sucessfully."],"it runs":["it"],"it sans":["the"],"it says":["*all","\"Treat","\"There","is","that","`No","in"],"it seemed":["to","like","a","like"],"it seems":["reasonable","like","that","that","to","like","more","to","somewhat","pretty","quite","like","you","odd","`sum`","a","a","to","to","explicitly","quite","a","to","a","`MVar`","the","that","it","that","that","there's","there","relatively","far","to","like","maybe"],"it seems.":["As"],"it selected":["`Double`"],"it semantically":["meaningful"],"it serve":["in"],"it shadows":["an","the","it"],"it short-circuits":["at"],"it shorter":["you","to","with","with"],"it shorter.":["I"],"it should":["compile","be","be","(e.g.","explicitly","be","return","be,","have","be","work,","be","be","have","be","be","be","be!","save","end","be","be","be","just","be","only","have","be","be:","be","work","for","be"],"it shouldn't":["be","have.","be","even"],"it similarly":["to"],"it simpler":["to","without"],"it simply":["as"],"it since":["```replace","you","it's","this"],"it slightly":["easier","differently"],"it slightly.":["It"],"it so":["that","I","you","that","you","I"],"it some":["other","more"],"it somehow":["-"],"it something":["like","like:","like"],"it sometimes":["doesn't","when"],"it specializes":["to"],"it stands":["for,"],"it stands,":["I'm"],"it started":["complaining"],"it still":["works.","looks","feels","required"],"it strict,":["e.g."],"it strictly":["needs"],"it successively":["tries"],"it such":["that","that"],"it suffers":["from"],"it super":["readable."],"it tail":["recursive?","recursive"],"it tail-recursive":["would"],"it takes":["a","your","an","up","O(n)","O(n","care","about","constant","value","any","to"],"it takes?":["(and"],"it than":["that","this...","just","what"],"it that":["way","way","way.","name","`_`","n","way","way.","way","you","you","way!","that","`-1`","way","way"],"it the":["same","same","former","same"],"it there).":["So"],"it this":["way.","way,","way","way","way","way.","way.)","far"],"it though":["because","I"],"it though,":["considering"],"it three":["extra"],"it through":["[`pointfree`](http://hackage.haskell.org/package/pointfree).)","computation.","unchanged."],"it through)":["but"],"it throws":["an"],"it to":["indent","look","be","be","the","simple","have","make","be","just","your","every","clarify","make","be","this.","a","uracil","any","be","be","`fromListWith`","`(1)","be","check","be.","the","a","use","work.","in","another","[my","return","measure","mean","a","do","have","still","the","me.","be,","my","make","the","Int","variable:","something","use","a","be","be","context","decimal:","be","pass","WHNF","where","get","understand.","ever","return","look","refresh"],"it to,":["because","so"],"it together":["with"],"it too":["far","easy"],"it took":["me","for","me","me"],"it top-level":["unless"],"it total":["so"],"it total,":["like"],"it touching":["the"],"it towards":["difference,"],"it tries":["to","to","to","to","to"],"it true":["that"],"it turns":["out","out","out","into","out"],"it twice,":["whereas","but"],"it typical":["to","for"],"it unnecessary":["to"],"it unnecessary.":["I"],"it unsolvable,":["but"],"it unstuck":["my"],"it up":["to","so","nicely.","by","by","and","was","in","every","now","easily"],"it up,":["though."],"it up.":["Very"],"it updated":["the"],"it usable":["as"],"it use":["no"],"it uses":["a","explicit","and","a","O(N)","Integer,"],"it using":["`all`","only","pure","`fmap","a","only","`MVar`s"],"it usually":["does.","works."],"it very":["generic.","visually","useful"],"it via":["hoogle:","cabal.","Control.Arrow"],"it want":["to"],"it was":["nice","super","done","ugly","best","imported","more","fun","good","obvious,","very","a","okay","in","defined","actually","the","a","somewhat","fun","not","to","someone","important","more","exactly","awkward.","done","better","good","the","maybe","impossiblt","when","fairly","possible","possible","a","passed,","Just.","kind","going","returning","I","even"],"it was,":["and"],"it wasn't":["a","a","worth","any","pointless","too"],"it well":["enough."],"it went.":["It"],"it were":["possible","the"],"it were.":["I'm"],"it when":["you","I"],"it whenever":["you"],"it where":["you're"],"it while":["not"],"it will":["fail","become","run","run","be","run","run","run","overflow","be","have","have","quote","often","quickly","require","use","wrap","also","be","generate","build","scan","fail","handle","equals","be","reverse","work","look","be","store","warn","default","traverse","crash","be","take","never","traverse","be","only","have","be","all","only","be","not","terminate","never","end","go","take","insert","be","be","be","fail","look","only","be","call","change","make","have","use","be","result","make","force","be","be","just","probably","have","require","use","allow","make","run","allocate","be","simplify","remember","be","save","be","be","look","not","work","be","be","may","be","work","be","return","work","recurse","be","eventually","make","be","not","always","be","be","be","be","be","actually","be","still","be","accept"],"it with":["the","foldM.","a","`=`","an","`take`","`concatMap","a","one","`fromListWith`.","something","`insertWith","some","zip","a","optimizations","a","that","length,","a","just","printf","Text.Printf","Map.fromListWith","`zipWith","\u003ccode\u003eunwords\u003c/code\u003e.","criterion,","`length`","http://hackage.haskell.org/package/deepseq/docs/Control-DeepSeq.html","just","left","a","criterion.","`insertWith'`","only"],"it without":["an","them","using","using","the","that.","a","using","actually","repeating","the","using","that?","changing","Data.Char","outside"],"it won't":["be","matter","build","have","matter.","create","take","take","benefit","be","have"],"it won't,":["because"],"it work":["would","with","you","in","for","with"],"it work?":["At"],"it worked.":["however,"],"it working":["with","a","at"],"it working.":["If"],"it works":["totally","fine.","without","with","like","slightly","in","perfect"],"it works,":["but","but"],"it works.":["Dealing","Waiting"],"it worth":["putting"],"it would":["stay","be","be","male","compare","probably","be","be","seem","be","fail","be","fail","if","not","be","work","fail","be","need","help","be","be","be","be","compile.","be","be","be","be","be","be","save","be","be","be","be","have","need","probably","currently","be","be","be","make","start","be","not","look","matter.","be","be","probably","also","change","be","make","be","be","only","be","allow","be","be","be","be","be","be","be","be","simply","make","depend","help","be","look","still","be","be","be","be","be","read","be","probably","use","be","be","read","be","be","be","be","be","nice","be","look","be","be","give","be","be"],"it would've":["been","been"],"it wouldn't":["have","be","be","make","have","be"],"it wouly":["say"],"it wrong.":["You"],"it x":["is"],"it yet,":["Hoogle"],"it you":["want","are","need","need"],"it you'll":["try"],"it yourself":[":)","(see"],"it yourself).":["The"],"it! Changing":["to"],"it! Where":["I"],"it'd allow":["`validChars`"],"it'd be":["the","simple","perfectly","scoped","better","a","a","a","much","kinda"],"it'd make":["too","more"],"it'd more":["extensible"],"it'd read":["better"],"it'd save":["LOC."],"it'll be":["a","faster","awhile"],"it'll collapse":["all"],"it'll crash":["at"],"it'll force":["each"],"it'll have":["to"],"it'll look":["like"],"it'll shorten":["your"],"it'll thread":["the"],"it'll translate":["any"],"it's *not*":["a"],"it's \u003e0.":["Can't"],"it's False":["if"],"it's `Just":["[1]"],"it's `[('a',":["(((1)"],"it's ```anagram```":["function"],"it's `null`":["or"],"it's `validFactor`":["or"],"it's a":["better","bit","matter","sensible","non-exhaustive","good","lot","lot","question","verb.","general","lor","direct","partial","little","good","generic","top-level","matter","lot","hangover","top","little","top-level","list?","bit","bit","top","matter","bit","little","terrible","space","matter","trap","lot","lot","matter","right","String","matter","bit","pretty","very","whole","variable","matter","partial","useful","matter","minor","higher","top-level","common","hack.","special","classic","case","little","compiler","\"]\",","Tuesday","problem,","bit","matter","bit"],"it's about":["how"],"it's above":["and"],"it's acceptable":["to"],"it's actually":["`map","defined,","equivalent","a"],"it's aliasing":["and"],"it's all":["about","the","compositions"],"it's almost":["like","certainly"],"it's already":["covered","delimited","covered","doing?","in","done"],"it's also":["still","not"],"it's always":["the"],"it's an":["error","`Integer`.","infinite"],"it's any":["better"],"it's applied":["to"],"it's arguments.":["If","Due"],"it's assuming":["it's"],"it's bad":["style"],"it's basically":["irrelevant"],"it's because":["I'm"],"it's behaviour.":["It"],"it's best":["to","to","to"],"it's beter":["to"],"it's better":["to","to","than","to","than","with","to","to","to",":)","to","to","if","to","to","to","or","to","to","to"],"it's big":["enough.","Oh"],"it's bound":["to"],"it's called":["Parser","that","recursively"],"it's called,":["it's"],"it's certainly":["possible"],"it's chere":["a"],"it's cleaner":["in","to"],"it's clear":["that","they're","that"],"it's clearer":["I"],"it's common":["and","to","to","to","in"],"it's commonly":["used"],"it's completely":["done,"],"it's composed":["with"],"it's conceptually":["quite","simple,"],"it's concise":["without"],"it's considered":["good"],"it's contents":["and"],"it's converted":["to"],"it's correct":["or"],"it's customary":["to","to","to"],"it's defined":["in.","in"],"it's definitely":["a","the","a","on","some","not"],"it's divisible":["by"],"it's documented":["to"],"it's doing":["the"],"it's done":["this","with"],"it's easier":["to","to","to","to","to"],"it's easy":["to","to","enough","to"],"it's effectively":["the"],"it's either":["`[(+1),"],"it's elucidating":["to"],"it's enough":["to"],"it's equally":["fast","good"],"it's equivalent":["to","to","to","to","to","in"],"it's essentially":["the"],"it's evaluated":["at"],"it's even":["it"],"it's exactly":["the","10"],"it's except":["(every"],"it's expecting":["a"],"it's exported":["or"],"it's factoring":["a"],"it's fairly":["easily","easy"],"it's faster":["to"],"it's fine":["to","to","to"],"it's food":["for"],"it's forced":["(but"],"it's forced,":["and","returning"],"it's forced.":["The"],"it's forgiven":["that"],"it's formuulated":["the"],"it's free":["to"],"it's generally":["more","agreed","only"],"it's getting":["late...","at;","a"],"it's given":["a"],"it's going":["to","to","to","to"],"it's good":["practice","to","to","practice.","that","to","to","practice.","habit"],"it's got":["to"],"it's great":["to","program"],"it's gruesome":["even"],"it's guaranteed":["that","that"],"it's hard":["to","to","for"],"it's harder":["to"],"it's how":["I"],"it's immediately":["obvious"],"it's in":["scope","the","Prelude","-","the"],"it's inlined,":["so"],"it's instance":["is"],"it's interesting":["to","to"],"it's interesting,":["educational"],"it's just":["more","inherent","bad","confusing","generally","(much","my","not","what","inefficient","avoiding","even","an","rather","a","a","me","incorrect","a","a","3-4"],"it's kind":["of"],"it's kinda":["weird"],"it's large":["enough."],"it's lazy,":["so"],"it's less":["tricky","code"],"it's likely":["a","to"],"it's looking":["for","pretty"],"it's main":["core"],"it's many":["problems"],"it's meaningful":["in"],"it's more":["of","readable","readable","readable.","a","subjective","powerful","interesting","common","common","difficult","maintainable","straightforward","efficient","common","a","preferable."],"it's mostly":["accurate"],"it's much":["simpler!","appreciated","better","easier","more","easier","better","cleaner","more"],"it's mutually":["recursive"],"it's my":["editor's"],"it's nearly":["always"],"it's necessarily":["better,"],"it's necessary":["for","to","to","to","but"],"it's necessary.":["This"],"it's need":["two"],"it's nested":["too"],"it's never":["called","ambiguous."],"it's nice":["to","to","to","to","to","to"],"it's nicer":["to","when"],"it's no":["big"],"it's non-strict":["in"],"it's not":["strict","part","in","like","a","a","safe","part","a","necessary.","free","usually","common","a","as","very","exactly","necessarily","tail","at","pretty.","like","a","exported","exported,","ambiguous","really","very","being","such","strict","important.","calculated","coming","obvious","covered","so","just","a","quite","worth","repeated","worth","any","expected","common","coming","nearly","necessarily","a","tail","a","that","necessary","weird","bad","likely","about","a","very","really","normal","a","so","atomic","really","forcing","balanced","practical","required","a","actually","just","the","used","working.","defined","very","necessary","required","a","clear","a","really","particularly"],"it's nothing":["special"],"it's noticeably":["different"],"it's obvious":["(eg:"],"it's often":["considered","important","more"],"it's ok":["to","to"],"it's ok.":["Really"],"it's only":["calculated","common","in","a","```O(n","a"],"it's operating":["on"],"it's optimized":["for"],"it's own":["(i.e."],"it's own,":["but"],"it's packed":["with"],"it's part":["of","of"],"it's perfectly":["acceptable."],"it's personal":["preference."],"it's point":["free"],"it's position":["as"],"it's possible":["to","to","to","to","to","to","to","using","that","to","to","to","to","especially","to","to","to","to","to","to","to","to","to"],"it's possible,":["in"],"it's preferred":["not","to"],"it's preferred.":["Just","In"],"it's pretty":["easy","silly.","easy","hacked","bad,","much"],"it's probably":["unnecessary","simpler","simpler","not","best","time","a","best","a","a","about"],"it's purely":["internal,"],"it's qualities":["though,"],"it's quite":["common","inconsistent,","hard","handy"],"it's rare":["that"],"it's rather":["better","kind","useful","useless"],"it's read":[":)"],"it's readability.":["I"],"it's really":["necessary,","not","just","building","just","more","good"],"it's recommend":["to"],"it's recursive.":["I've"],"it's redundant":["given"],"it's required":["to","incidentally,"],"it's result":["you"],"it's right":["here"],"it's running":["time"],"it's safe":["to","to"],"it's semantics,":["for"],"it's sensible":["to"],"it's shoe-horned":["in)."],"it's silly":["to"],"it's simpler":["that","than"],"it's simpler,":["thanks!"],"it's simplified":["*my*"],"it's slighly":["faster"],"it's slightly":["less"],"it's so":["deeply","simple;","short","much","awkward"],"it's some":["sort"],"it's something":["I","that","to"],"it's sometimes":["desirable"],"it's somewhat":["better"],"it's specialized":["to"],"it's standard":["practice"],"it's starting":["to"],"it's still":["exported","going","better","best","better","a"],"it's storing":["the","nested"],"it's strict":["instead","over"],"it's taking":["a"],"it's terribly":["common"],"it's that":["common"],"it's the":["most","best","most","same","body","\"Haskell","intended","worst","former","`1.`","right"],"it's tidier":["and"],"it's tolerant":["of"],"it's too":["complex","long."],"it's tricky":["to"],"it's true":["that","that"],"it's truly":["just"],"it's type":["will"],"it's typical":["to"],"it's typically":["an"],"it's ugly":["but"],"it's ugly.":["But"],"it's unambiguous":["even"],"it's uncommon":["to","for"],"it's unnesessary":["overcompication"],"it's unobservable":["whether"],"it's unreasonable":["to"],"it's unused":["in"],"it's updated":["with"],"it's used":["one","not","here"],"it's useful":["from","to"],"it's using":["`foldlStrict`"],"it's usually":["better"],"it's valid":["or","handle"],"it's value":["so"],"it's value,":["so"],"it's values":["so"],"it's values,":["as"],"it's very":["easy","inefficient","similar","likely","simple","fragile.","good"],"it's wasteful":["to"],"it's way":["too"],"it's wednesday,":["it"],"it's well":["defined","documented","documented"],"it's working":["now,"],"it's worth":["the","in","noting"],"it's worth,":["this"],"it's worth.":["I"],"it's your":["call!","instinct"],"it) and":["fairly","to"],"it) is":["following"],"it), and":["this"],"it), so":["this"],"it). I'm":["going"],"it). If":["you"],"it). It's":["good"],"it). The":["solution"],"it, \"excessively":["clever\","],"it, I":["found","just","separated","might","wanted","think"],"it, `l":["t"],"it, although":["you"],"it, and":["I","I","count.","any","then","can","the","sometimes","I"],"it, and/or":["very"],"it, but":["I","easier","it","I","well…","forgot,","it","string","it","it","yeah,","it","not","`areaCode","good","simply","it","if","I","it","feel","then"],"it, cases":["11"],"it, check":["out"],"it, even":["over"],"it, extend":["the"],"it, great":["fun!"],"it, group":["it,"],"it, hit":["me"],"it, how":["can"],"it, however":["if"],"it, if":["not"],"it, in":["any","the"],"it, isn't":["there"],"it, it":["looks"],"it, it's":["not"],"it, just":["add","from"],"it, maybe,":["at"],"it, my":["version","solution"],"it, not":["the"],"it, now?":["The"],"it, or":["use","it's"],"it, rather":["than"],"it, since":["`randomRs`","it","it"],"it, so":["I","atomically","I"],"it, something":["more"],"it, the":["code","next","problem"],"it, then":["forgot"],"it, there":["are"],"it, this":["time"],"it, to":["see"],"it, we":["know"],"it, while":["verse"],"it, you":["could","don't","can","may","can"],"it, you'll":["get"],"it. A":["common"],"it. According":["to"],"it. Also":["I"],"it. Another":["way"],"it. At":["least"],"it. Be":["sure"],"it. But":["really"],"it. Can't":["believe"],"it. Code":["reviews"],"it. Doing":["it"],"it. Easy":["enough"],"it. Evaluation":["and"],"it. For":["some"],"it. I":["would","like","didn't","don't","can't","personally","usually","understand","think"],"it. I'm":["not","not"],"it. If":["the"],"it. In":["the","most"],"it. It":["looks","should"],"it. It's":["still","probably"],"it. Looked":["at"],"it. Made":["the"],"it. Nice":["work!"],"it. Perhaps":["instead"],"it. Please":["feel","ignore"],"it. Possibly":["need"],"it. Props":["to"],"it. Reusing":["lx"],"it. Seem":["like"],"it. Seems":["rather"],"it. Since":["the"],"it. Still":["it"],"it. Thanks":["a"],"it. That's":["sometimes","why"],"it. This":["is","was"],"it. To":["avoid"],"it. Turns":["out"],"it. Using":["combinators"],"it. Were":["you"],"it. Without":["the"],"it. Worse":["yet,"],"it. You":["can"],"it. `all":["f"],"it. `f":["a"],"it. a":["string"],"it. the":["name"],"it... For":["instance,"],"it... and":["I"],"it... why":["is"],"it/one expression":["(e.g."],"it: `anyAndAll":["="],"it; like":["the"],"it; yeah,":["this"],"it? And":["if"],"it? Data.String.Utils":["isn't"],"it? IMHO":["the"],"it? If":["you"],"it? Might":["as"],"it? Not":["much"],"it? Or":["alternatively"],"it? So":["it's"],"it?) the":["same"],"itching to":["use"],"item in":["the","an"],"items in":["your","a"],"items to":["a"],"iteraction i":["used"],"iterate (*10)":["4\u003c/pre\u003e"],"iterate over":["my","this"],"iterate through":["days.","the"],"iterate, repeat,":["etc.","etc."],"iterateUntil null":["$"],"iterates through":["the"],"iterating over":["the"],"iteration (and":["enjoyed"],"iteration (which":["is"],"iteration -":["where"],"iteration /":["traversal"],"iteration 1":["for","for"],"iteration 1)":["to"],"iteration 2":["is","but","is"],"iteration 2.":["I"],"iteration 3":["but","more","page."],"iteration 3),":["and"],"iteration I":["tried","found"],"iteration I've":["combined"],"iteration along":["what"],"iteration and":["then","especially","this"],"iteration applies":["here"],"iteration but":["I"],"iteration could":["result"],"iteration goes":["point"],"iteration if":["you"],"iteration instead":["of","of"],"iteration is":["more","needed."],"iteration it's":["`[('a',"],"iteration of":["the"],"iteration one.":["I"],"iteration over":["the"],"iteration so":["you"],"iteration that":["I've"],"iteration the":["Map"],"iteration uploaded":["for"],"iteration used":["`all`,"],"iteration was":["uploaded"],"iteration was,":["thanks!"],"iteration when":["`n"],"iteration will":["be"],"iteration with":["your","your"],"iteration you":["build"],"iteration). This":["is"],"iteration, I":["had","agree","thought"],"iteration, I'm":["unsure","just"],"iteration, and":["I'm"],"iteration, at":["least"],"iteration, but":["I'm"],"iteration, do":["you"],"iteration, does":["it"],"iteration, it":["takes"],"iteration, my":["`wordCount`"],"iteration, probably":["I"],"iteration. A":["better"],"iteration. Happy":["that"],"iteration. However":["I","I"],"iteration. I":["initally"],"iteration. I'll":["fix","think"],"iteration. Is":["there","that"],"iteration. Let":["me"],"iteration. Lets":["see"],"iteration. The":["alternative"],"iteration: eta":["reduction"],"iteration? The":["Array"],"iterations before":["it"],"iterations once":["and","and"],"iterations. I'm":["not"],"iterations. This":["was"],"iterative and":["will","fuzed"],"iterative computation,":["and"],"iterative instead":["of"],"iterative processing":["of"],"iterative processing,":["consider"],"iterative solution":["with"],"iterativelly without":["real"],"iteratively build":["a","result."],"iteratively building":["the"],"iteratively from":["the"],"iteratively generate":["new"],"iteratively in":["an","an","an","an","an"],"iteratively in-place.":["This"],"iteratively so":["program"],"iteratively without":["the","it"],"iteratively, without":["the"],"iteratively. A":["strict"],"iteratively. For":["n=4"],"iteratively? There's":["a"],"itrrations, but":["its"],"its API":["and","and","(`anagramsFor`"],"its API,":["`module"],"its OK":["to"],"its RULES":["term"],"its a":["bit","right","matter","most","good","function"],"its accumulator":["and"],"its accumulator,":["it's","so","so"],"its accumulator.":["When","Also,","If"],"its argument":["to","(```str```)","to","in"],"its argument,":["`lowerCaseBottleText(next"],"its argument.":["I"],"its arguments":["strictly,","may"],"its behaviour":["on"],"its better":["to","to"],"its big-Oh":["complexity"],"its chain":["of"],"its clean,":["works"],"its clear":["that"],"its closer":["to"],"its components":["(*f*,"],"its components.":["Then"],"its contents":["is"],"its current":["form"],"its definition":["and"],"its easier":["to","to"],"its ecosystem":["at"],"its equivalent)":["once,"],"its first":["argument","argument,","digit"],"its implementation":["(but"],"its implementation,":["you"],"its inputs,":["and"],"its intent":["rather"],"its keys":["and","and"],"its lacking..":["any"],"its lame":["for"],"its letters,":["which"],"its list":["of"],"its more":["readable."],"its much":["much"],"its mutable":["concurrent"],"its name":["to","doesn't",":-)"],"its new":["name,"],"its not":["relevant.","a","C","interesting","as","optimal."],"its optimized":["for","for"],"its output":["and"],"its own":["function,","function,","function","variable.","function","function,","function","but","for","combinator,","anagram\",","for","anagram","function,","line,","line.","line,","line.","function,","line,","line","line","line.","definition","line","line.","line,","but","but","line","line","line"],"its own)":["you"],"its own,":["but","even","and"],"its own.":["You","Most"],"its possible":["to","to","to","to","to"],"its presence":["elsewhere),"],"its quite":["advanced"],"its result":["will","without"],"its return":["list."],"its second":["argument."],"its something":["I"],"its strict":["version"],"its string":["representation."],"its the":["best","same"],"its two":["parameters","arguments."],"its usage":["of"],"its use":["read"],"its used":["in"],"its uses":["in"],"its values":["as","so"],"its values,":["so"],"its way":["to"],"itself -":["the"],"itself and":["passing"],"itself as":["point-free"],"itself could":["be"],"itself in":["the"],"itself is":["forced,","shared","a"],"itself isn't":["something"],"itself looks":["good.","good,"],"itself on":["both"],"itself seems":["fairly"],"itself to":["accumulate","do","do"],"itself towards":["implementing"],"itself with":["new"],"itself), see":["http://hackage.haskell.org/package/containers-0.5.3.1/docs/src/Data-Map-Base.html#insert"],"itself, as":["it"],"itself, but":["`fromListWith`","if","ghci"],"itself, not":["necessarily"],"itself. And":["because"],"itself. Consider":["using"],"itself. I":["find"],"itself. Rather,":["it's"],"itself. Worse":["is"],"itt's need":["to"],"j $":["k"],"j .":["k`."],"j =":["k`,"],"j, also":["it"],"j]` (which":["is"],"j]` instead":["of"],"jargon \"Youda":["condition\"."],"jargony, it's":["just"],"job done":["but"],"job done,":["but","but","albeit"],"job explaining":["how","Haskell's"],"job of":["adding"],"job with":["separating","the"],"jobs in":["the"],"join (***)`":["--"],"join (,)":[".:"],"join Data.Biapplicative.biliftA2`":["i"],"join lines":["1"],"join sequences":["of"],"join them":["together."],"joined with":["conjunction"],"joke in":["response"],"jolt of":["excitement"],"judging by":["the"],"juggling the":["guards"],"jump in":["complexity","Haskell,","difficulty","memory"],"jump with":["the"],"jumps out:":["`mkRobot`"],"jury is":["out"],"just \"":["_,\"."],"just \"a":["compute"],"just \"responseFor":["="],"just (much":["easier"],"just 3-4":["really"],"just BSing":[":cold_sweat:"],"just FYI":["there"],"just MonadPlus":["but"],"just [Char],":["but"],"just `'":["'`."],"just `(,1)`.":["Not"],"just `(/=)`":["and"],"just `(f":["x)`."],"just `\u003c=`,":["subtraction,"],"just `Data.List`":["alone?"],"just `Integral":["a"],"just `Map`":["instead)."],"just `Map`.":["Also,"],"just `String`.":["Pretty"],"just `Vector":["a`"],"just `[]`":["though."],"just `addZeros`":["before"],"just `anagram`":["*is*"],"just `anagramsFor`).":["Also,"],"just `atomically":["."],"just `c":[":"],"just `deriving":["Enum`"],"just `divMod`":["or"],"just `either":["(const"],"just `f":["."],"just `f`,":["in"],"just `fmap`":["on"],"just `fold'`":["gives"],"just `foldl'`":["and","or","or"],"just `fromEnum":["."],"just `fromListWith`":["and"],"just `fromList`,":["`toList`"],"just `if":["isSpace"],"just `import":["Data.Map`"],"just `map":["canonicalize`"],"just `mapM":["randomRIO"],"just `map`,":["`take`,"],"just `not":["."],"just `null`,":["but"],"just `otherwise":["="],"just `sing`":["and"],"just `str`":["which"],"just `sum`":["and"],"just `takeWhile`":["and"],"just `toLower`":["is"],"just `toTuple":["="],"just `uncurry":["(/=)`."],"just `wordsBy":["(not"],"just a":["few","style","style","few","style","list","way","`foldl`,","boolean,","style","type","bit","`IORef","few","list","type","minor","type","single","matter","single","matter","range","generic","`foldl'`.","composition","way","style","low","selected","read","no-op,","overriden","translation","shift.","mapping","symbol","set","modified","horrible","function","bit","type","task","different","little","tad.","nit,","number.","type","`String`,"],"just about":["speed","everything","as","style","as","other","everywhere,"],"just abstracting":["the"],"just add":["Foldable","toList","some"],"just adds":["extra"],"just adorable.":["\"The"],"just after":["I"],"just always":["worried"],"just an":["`isUpper`","infix","Int.","Int).","Int).","interesting","Int.","alias","alias","Int","Int.","exercise."],"just and":["Nothing"],"just another":["`map`","one"],"just arbitrary":["Chars."],"just arguing":["that"],"just arithmetic":["and","and","and"],"just arithmetic,":["lists","no"],"just arrived":["at"],"just as":["easily","semantically","well.","efficient.","happy","easy","well","clear","well","well."],"just avoiding":["the"],"just awful;":["Ints"],"just bad":["style,"],"just be":["a","using","personal","`(3*n^4","personal","me."],"just being":["optimistic?"],"just blew":["my"],"just blithely":["fmap'd"],"just boolean":["functions"],"just brilliant.":["Of"],"just by":["changing","threading","the"],"just calculate":["it"],"just call":["that","this","this"],"just can't":["make","see","get"],"just care":["about"],"just cause":["some"],"just change":["that","the","the"],"just checking":["for","for"],"just clone":["the"],"just combining":["functions"],"just compute":["the"],"just concatenating":["with"],"just confusing":["to"],"just converted":["`let`"],"just copy-and-paste":["a"],"just could":["not"],"just count":["the"],"just creating":["more"],"just curious:":["why"],"just cut":["to"],"just declare":["`nucleotide`"],"just define":["patterns","an","f","method"],"just deleted":["it"],"just depends":["what"],"just did":["it","the"],"just didn't":["look","know","have","hit"],"just discovered":["that"],"just disinclined":["to"],"just do":["`isShouting","a","`map","`Integral","it","`[minBound..]`","`all"],"just doesn't":["really"],"just doing":["so","the","the","the"],"just don't":["like","think"],"just drop":["the"],"just embracing":["the"],"just encoded":["into"],"just ended":["up"],"just ends":["up"],"just enough":["of"],"just ensures":["the","that"],"just even":["more"],"just explaining":["my"],"just factored":["a"],"just fall":["through"],"just feels":["a"],"just felt":["a","a"],"just fetched":["the"],"just figured":["that"],"just fine":["without","on","and"],"just fine,":["and"],"just fine.":["Note","Parentheses"],"just finished":["reading"],"just fmap)":["and"],"just follows":["the"],"just for":["the","more","the","practice,","learning"],"just forgot":["to"],"just found":["toAscList"],"just four":["guards?"],"just from":["not","what"],"just function":["composition,"],"just function)":["is"],"just functions":["that"],"just fuse":["this"],"just generally":["good"],"just get":["the","used","rid","rid"],"just give":["up"],"just glazed":["over"],"just going":["to","by"],"just got":["lucky"],"just hacking":["around"],"just had":["no","to"],"just handled":["n"],"just happened":["to"],"just has":["an"],"just have":["a","to","to","4","`randomString","a","got","the","a"],"just having":["a"],"just helpers":["for"],"just how":["bad","things"],"just ideas,":["I"],"just ignored":["them"],"just implemented":["Enum"],"just import":["that.","the","the"],"just in":["the","the"],"just included":["all"],"just incorrect":[":)."],"just indent":["all"],"just indicated":["by"],"just inefficient":["and"],"just inherent":["complexity."],"just inlined":["it."],"just inside":["both"],"just intermediate":["processing"],"just inured":["to"],"just irks":["me"],"just judging":["by"],"just keep":["allocating","getting"],"just keeping":["a"],"just leave":["it"],"just left":["it"],"just letting":["you","money"],"just leverages":["the"],"just like":["this.","in","in","`.`","`[to","the","how"],"just lists":["of"],"just look":["the","at","at"],"just looking":["at","at"],"just looks":["like"],"just loop":["over"],"just lucky":["enough"],"just make":["sure","that"],"just makes":["no"],"just making":["helpers","dumb"],"just map":["the"],"just me":["or","but"],"just me,":["but"],"just me?":["I"],"just means":["that","that"],"just meant":["that"],"just merge":["things"],"just missed":["the"],"just mod4":["and"],"just more":["common","complicated"],"just move":["the"],"just moves":["where"],"just my":["experience","opinion,","non-functional","default","preference.","inexperience"],"just need":["to","to","to","to","`\"invalid","to","to","to","to"],"just noise.":["The"],"just not":["Haskelled","great","willing"],"just noticed":["that."],"just now":["looked"],"just now,":["actually."],"just offer":["operations"],"just omit":["it"],"just on":["the"],"just once":["or","because"],"just once,":["you"],"just once.":["Try"],"just one":["function","function","use","tiny","instance","-","`flip`"],"just operate":["on"],"just other":["possible"],"just overly":["attached"],"just packages":["that"],"just pass":["it"],"just passing":["it","the"],"just performing":["the"],"just personal":["preference."],"just picking":["a"],"just placed,":["atomicity"],"just plain":["simple"],"just pleased":["I"],"just pointing":["out","out"],"just poor":["code"],"just ported":["them","this","the"],"just porting":["these"],"just pumps":["your"],"just put":["`wordList","on","those"],"just ran":["it","into"],"just rather":["likely."],"just read":["an","the"],"just realised":["doesn't","I","I"],"just realized":["(looking"],"just record":["accessors)."],"just recurce":["over"],"just redefine":["\u003cpre\u003edivisibleBy"],"just reintroduce":["the"],"just relieved":["to"],"just remove":["your"],"just replace":["`isSpace`","`2*acc`"],"just replaces":["the"],"just replacing":["thymidine","occurrence"],"just reset":["the"],"just return":["a","`'T'`","newbalance."],"just returns":["the"],"just reverse":["application"],"just right":["to"],"just right,":["but"],"just saves":["an"],"just saw":["this,","someone"],"just say":["`randomChar","`line_take","`divisible"],"just says":["the"],"just see":["if","what"],"just seemed":["like"],"just send":["event"],"just set":["me"],"just shadow":["`(++)`)."],"just show":["an"],"just simple":["arithmetic.","map"],"just simply":["did"],"just single":["`filter`,"],"just skip":["right","invalid"],"just slightly":["less"],"just small":["refactoring"],"just so":["I"],"just some":["adding.","things","simple","simple"],"just something":["worth","like","I've"],"just sorting":["the"],"just sounded":["wrong."],"just start":["with"],"just started":["to"],"just starting":["out!","to"],"just stick":["with"],"just store":["the"],"just storing":["the","the"],"just straight":["up"],"just stuck":["with","to"],"just submitted":["a","a"],"just sugar":["for"],"just suggest":["that"],"just syntax":["sugar.","sugar","sugar."],"just talking":["about"],"just teasing":["to"],"just that":["it's","you'll"],"just that.":["There's"],"just the":["first","`Map`","naming","thing","three","Int,","Int","functor","exported","first","function","top-level","Enum","right","constructor","`List`","ones","guard,","main","students"],"just think":["about"],"just thinking":["how","of"],"just those":["that","that"],"just thought":["I'd","I'd"],"just throwing":["spaghetti"],"just to":["confirm,","transcribe","code","unpack","avoid","convince","demonstrate","make","calculate","compare?","reduce","highlight","avoid","find","replace","make","learn"],"just too":["used"],"just transformed":["them,"],"just trying":["to","to"],"just use":["`flip`","`fromListWith`).","`map","`fromListWith`.","them","`return","lens","`foldl'`","`Bool`","(with","parens","`randomRIO`","`count`","`gen`","string","`head`","the","randomRIO","your","`foldl'`","`fromList`","their","`insertWith`","the","`fmap","boolean","whitespace","`ls`","otherwise?","something","the","`sort`","that","`map","composition.","pattern","the","words,","`fmap","`map`","let","types","fixed","fixed","math","`s'","that","`show","`fromEnum`","```enumFromTo```"],"just used":["subtraction…","a","`words`"],"just uses":["an"],"just using":["an","the","`List`/`Char`","`||`","`fromList`.","`length","`remain`","it","a","```import```","Either.","`modifyTVar'`","```2:[3,5..]```"],"just wait":["for"],"just want":["to","the","to"],"just wanted":["one","it","to","to","to","to","to","to","to","**something**"],"just wasn't":["sure","sure","sure"],"just wasteful,":["it's"],"just went":["which"],"just what":["I","I","idiomatic","I"],"just whitespace.":["If"],"just won't":["work"],"just wondering":["if"],"just wondering,":["where"],"just works":["well."],"just wouldn't":["compile."],"just wrapping":["another"],"just wraps":["another"],"just write":["`[startDay","a","`let","`map","`obitalPeriods`","`(,1)`","`replace","it"],"just writing":["something","`[Eggs..]`,"],"just written":["a"],"just wrote":["it","it"],"just you":["can"],"justIf (size":["\u003c="],"justIf ::":["Bool"],"justIf c":["x"],"justified in":["separating","any"],"justifies any":["performance"],"justifies this":["kind"],"juxtaposition (`f":["a"],"k (countUp":["set"],"k (f":["r)"],"k -\u003e":["a","b"],"k /=":["0)"],"k \u003c-":["[-1,"],"k =":["M.insert","(M.findWithDefault","\\r","scores"],"k =\u003e":["(a","(k","[(k,a)]"],"k a":["=","-\u003e","-\u003e"],"k a)":["!(Map"],"k a1":["a2"],"k a`,":["darn."],"k m`":["is"],"k set)":["+"],"k should":["then"],"k v":["map))"],"k x":["t"],"k x`":["is"],"k |":["n"],"k) ++":["a1"],"k) =":["log(n!)"],"k)(n-k)/(k+1)`. I":["totally"],"k)\u003c/pre\u003e And":["then"],"k)` (though":["k"],"k)` could":["be"],"k)` is":["the"],"k+1) =":["(n;"],"k1 v1":["$","$","$","$","$","$","$","$"],"k2 v2":["$","$","$","$","$","$","$","$"],"k\u003e= digit":["="],"k` certainly":["has"],"k` in":["`k'`"],"k` might":["be"],"k` or":["`[c"],"k` works":[":-)"],"k`, although":["that"],"k```, do":["you"],"kadoban. Thank":["you"],"keen about":["Split,"],"keep a":["few","name","big"],"keep adding":["thunks"],"keep additional":["closures,"],"keep all":["the","the"],"keep allocating":["nested"],"keep falling":["into"],"keep forgetting":["about","about"],"keep getting":["the","shorter"],"keep in":["mind","their"],"keep information":["about"],"keep intermediate":["results"],"keep it":["open","like","point-free,","as-is;","as","as-is,","point","in","as"],"keep line":["8"],"keep lines":["short,"],"keep making":["really"],"keep normalize":["and"],"keep note":["of"],"keep original":["string,"],"keep solving":["the"],"keep spaces":["even"],"keep that":["in","generality,"],"keep the":["list","list","`isSilence`","same","code","\"empty\"","same","lambda","`sanitize`","complexity","code","predicates","Monadic","thunks","pretty","submitted"],"keep things":["isolated"],"keep this":["is","implementation"],"keep track":["of","of"],"keep type":["class"],"keep with":["the"],"keep your":["definitions"],"keeping a":["`Maybe`","minimal","single","lot"],"keeping an":["eye"],"keeping it":["readable."],"keeping the":["point-free","logic","value","`Maybe"],"keeping then":["in"],"keeping those":["two"],"keeping thunks":["up","consider"],"keeping thunks,":["to"],"keeping track":["of"],"keeps it":["super"],"keeps popping":["up.)"],"keeps them":["around","in"],"keeps thunks,":["so","really"],"keeps working":["for"],"ken (and":["I"],"kept hitting":["an"],"kept in":["memory,","memory.","memory,"],"kept one":["line"],"kept parents":["on"],"kept pointing":["out"],"kept the":["lenses"],"key (for":["example)."],"key -\u003e":["insertWith"],"key 1":["map)"],"key and":["value","value","has","then"],"key at":["all,"],"key if":["sorting"],"key in":["list"],"key is":["and"],"key of":["length","at"],"key point":["here","of"],"key to":["`atomically`"],"key, it's":["just"],"key, so":["you"],"key-value pair":["into"],"key-value pairs,":["the"],"key. Let":["me"],"key. You":["can"],"key/value pairs":["than"],"key/value pairs.":["Am"],"key\\/value pairs":["with"],"keyboard\" case,":["and"],"keyify` -\u003e":["`concatMap"],"keys and":["values).","scores","values"],"keys are":["at"],"keys first":["with"],"keys must":["happen"],"keys present":["in"],"keys that":["already"],"keys there":["are,"],"keys to":["see"],"keys together":["(and"],"keys) and":["also"],"keys, because":["a"],"keys,) thus":["you'll"],"keys/values aren't":["evaluated"],"keystrokes (or":["even"],"keyword, layout":["is","is","is"],"keyword, or":["import"],"kick out":["an","the"],"kick that":["ugly"],"kicking myself":["for"],"kids in":["the"],"kill for":["some"],"kill two":["birds"],"kim: I'm":["not"],"kimhyunkang's suggestion":["on"],"kind feedback":["again"],"kind in":["the"],"kind of":["thing,","transformation,","optimization","wrote","clumsy.","hard","new","a","guard","a","magnificent.","scenario","thing,","think","usage","inner","reduntant,","strange,","like","disappointed","like","a","explicit","ugly","a","tokenization,","application.","data","problem.","a","a","a","hard","thing","thing","bug","use","thing.","data","stuff","map","string","gross","an","an","situation","thing.","operation,","operation,","operation,","thing","things","pattern","split","fold","`Monad`","analysis","solution.","a","problem","mistake:","opacity.","operation","feedback","solution","thing.","mandates","fold","silly,","use","grouping","assumed","thing","an","sequencing","fold","space,","helper","fold","rule","my","like","like","peeked","task.","thing,","wondering.","messy.","confusion.","fold"],"kind to":["assume"],"kinda buggy.":["There"],"kinda expect":["the"],"kinda feels":["like"],"kinda hacky,":["do"],"kinda like":["you're","the","`(((1"],"kinda nice":["to"],"kinda silly,":["but"],"kinda trace":["through"],"kinda tricky":["since"],"kinda weird":["to","too,"],"kinds of":["equivalence.)","array","calculations","constructs","folds"],"kn vn":["empty.","empty.","empty.","empty.","empty`.","empty`.","empty`","$"],"knew I'd":["forgotten"],"knew `show`":["felt"],"knew about":["```wordsBy```","the"],"knew existed.":["I"],"knew how":["to"],"knew in":["this"],"knew it,":["but"],"knew somebody":["was"],"knew someone":["would"],"knew that":["the"],"knew there":["would","has"],"knew they":["could"],"knew this":["had"],"knit is":["that"],"knock is":["performance,"],"knot structure":["with","with"],"knot tying":["i.e."],"knots a":["bit"],"know (actually":["@alba"],"know Haskell":["doesn't"],"know I":["did","could","can","sometimes","have"],"know I've":["desided"],"know ```sorted```":["could"],"know `findWithDefault`":["existed,"],"know `splitAt`":["exists."],"know a":["simpler","better","great"],"know about":["that,","stuff","`LambdaCase`.","`TupleSections`.","that","TupleSections.","unlines.","these","TupleSections","First","`fmap`","`exercism","that,","the","id;","`wordsBy`.","`Debug.Trace`.","foldl'","fallthrough","`mapMaybe`.","the","these","operator","`Data.Bits`?","empty","applicative,","`$`,","the","sum","the","it","`foldM`.","Data.Map.Strict","it,","`map"],"know all":["my","those","other","about"],"know and":["I'll"],"know another":["easy-to-use"],"know anything":["about"],"know at":["least"],"know better":["--","than"],"know exactly":["why","which","what","where"],"know for":["sure","sure"],"know how":["to","to","to","ugly","to","at","to","(e.g.","it","to","Haskell","to","to","to","to","to","to","I","to","to","they","to","to","to","it","to"],"know hugs":["has"],"know if":["there","`map`","lowercase","there's","it's","these","there's","using","I","I","the","any","parens","it's","it's","there's","my","you'd","it's","closing","the","that's","it's","it","there","there's","it","one","you"],"know is":["valid,"],"know isAlphaNum":["exists"],"know it":["existed)","well","can","doesn't"],"know it's":["there.","not"],"know more":["about"],"know much":["about"],"know of":["to","course","to"],"know of,":["one"],"know seems":["like"],"know something":["about"],"know that":["you","I'm","a","`String`","you","about","they're","about","Strings","`number`","the","there","it's","`2^n","I'd","there","it","before!","sort",":)","cz","there's","`daysInGigasecond`","you","you","the","all","the","`endsWith`"],"know that's":["just"],"know that.":["Thank","I","Thanks"],"know the":["word","day","function","tests","unit","actual","```fromEnum```","```fromEnum```","precedence"],"know their":["purpose,"],"know there":["was","is","were","are"],"know these":["existed.","because"],"know they":["must","can't"],"know this":["exercise","one"],"know this.":["I'm"],"know to":["write","look"],"know what":["arrows","you","the","they","exactly","the","to","it","you","a","the","the","the","it","you're","as","the","you","you","you","you","you","you","you","you","you","you","to","to","to","`n`","would","I"],"know when":["to"],"know where":["to","the"],"know whether":["it"],"know why":["Hoogle","hdevtools","comments","the","so","I","I","GHC","this"],"know why.":["It's"],"know you":["could","could","know"],"know you've":["already","already"],"know your":["rationale"],"know), you":["don't"],"know, I":["was"],"know, I'll":["use"],"know, a":["`Map`"],"know, all":["of"],"know, prime":["factorization"],"know, why":["not?"],"know. And":["it"],"know. But":["uninteresting,"],"know. I":["noticed"],"know. I'll":["keep","leave"],"know. Thanks":["for"],"knowing a":["little"],"knowing about":["boolean"],"knowing the":["precedence","precedence","usage"],"knowing what":["to","the","the","used"],"knowing\". Basically":["wondering"],"knowledge of":["what"],"knowledge to":["eliminate),"],"knowledge. You":["may"],"knowledgeable should":["comment"],"known :)":["thanks."],"known as":["a"],"known at":["compile"],"known by":["the"],"known, so":["all","there's"],"knows how":["types","to"],"knows immediately":["what"],"knows more":["about","about"],"knows random":["seed"],"knows there":["was"],"knows? The":["spec"],"kosher here.":["I"],"kudos for":["descriptive"],"kx x":["y)`"],"l ++":["[x]","'\\n'"],"l \u003c-":["['A'..'Z']]","range"],"l \u003c\u003e":["f","ff","f"],"l =":["if","filter"],"l is":["computed"],"l or":["r"],"l t":["V"],"l then":["d"],"l x":["r)","r)","r)"],"l y":["r)"],"l) |":["l","l"],"l) ||":["isUpper"],"l, Q":["]"],"l` is":["the","calculated"],"l`. Then,":["line"],"la ==":["sort"],"la Coursera)":["but"],"la [tibbe's":["Haskell"],"la`. GHC":["will"],"labels\" http://www.haskell.org/onlinereport/decls.html#field-labels":["–"],"lack of":["an","a","accumulator","any","RNA","a","need","regularity","strictness"],"lacking.. any":["suggestions?"],"lacks a":["bit"],"lacks abstraction.":["For"],"lacks explicit":["exports.."],"lacks laziness":["solved"],"laid out":["without"],"lambda abstraction":["is","is"],"lambda and":["an","its"],"lambda calculus,":["but"],"lambda comparing":["the"],"lambda evaluate":["its"],"lambda expression":["in"],"lambda for":["that","map"],"lambda function":["there.","is","is"],"lambda in":["your","`sing`"],"lambda instead":["of","😌"],"lambda into":["its"],"lambda is":["fine,"],"lambda lazily":["it"],"lambda lift":["would"],"lambda lifting,":["where,"],"lambda like":["this,"],"lambda or":["replace","another"],"lambda syntax":["in"],"lambda that":["looks"],"lambda to":["function","map,"],"lambda used":["in"],"lambda using":["a"],"lambda was":["very"],"lambda with":["`all`,","parentheses."],"lambda would":["be"],"lambda, but":["it's","that's"],"lambda, like":["this:"],"lambda, using":["a"],"lambda, usually":["they"],"lambda. \u003cpre\u003eisYell":["xs"],"lambda. But":["I"],"lambda. I'm":["not"],"lambda. The":["LambdaCase","entire"],"lambda: `\\acc":["bit"],"lambda? If":["you'll"],"lambdadot thing":["is,"],"lambdas, and":["guards"],"lambdas. Is":["that"],"lame for":["this"],"lang with":["strict"],"language \"return\"":["--"],"language (unless":["they"],"language aside":["from"],"language behaviour,":["right?"],"language but":["haskell."],"language depend":["on"],"language dependant,":["when"],"language extension":["and","could","that","`TupleSections`."],"language extension?":["It"],"language extensions":["(that","you"],"language extensions.":["I"],"language for":["completeness'"],"language fundamentals":["may"],"language intermediate":["lists"],"language is":["that"],"language on":["this"],"language performance":["level"],"language pragma":["which","would","you","at"],"language pragmas":["(like"],"language since":["they"],"language this":["might"],"language to":["allow"],"language we":["will"],"language which":["is"],"language with":["strict","a"],"language would":["need"],"language) instead":["of"],"language, since":["the"],"language, such":["approach"],"language. Changing":["implementations"],"language. Should":["you"],"language. They're":["not"],"languages (JS,":["at"],"languages I":["decided"],"languages are":["call-by-value"],"languages but":["it's","I"],"languages do,":["and"],"languages don't":["include"],"languages for":["a"],"languages here,":["the"],"languages often":["provide"],"languages that":["lacks"],"languages this":["task"],"languages would":["be"],"languages) so":["I"],"languages, and":["it's"],"languages, but":["here","in"],"languages, there":["is"],"languages. But":["isn't"],"languages. The":["implementation"],"languages:) to":["have"],"languages? I":["think"],"languages? wrt":["`fromEnum`"],"laptop. Really":["there"],"large Haskell":["applications,"],"large alphabet":["as","your"],"large chuck":["of"],"large enough":["input","input.","input"],"large enough.":["You"],"large input":["(O(n)","will"],"large input).":["You"],"large input.":["I","At"],"large inputs),":["but"],"large lists":["this"],"large n":["it"],"large number":["of"],"large project,":["then"],"large scope":["(for"],"large so":["it's"],"large system,":["we"],"large that":["you"],"large word":["lists"],"large words":["and"],"largely the":["same"],"larger code":["base"],"larger constants":["and"],"larger integers":["involved."],"larger names,":["shorter"],"larger numbers,":["in"],"larger prime":["factor"],"larger program":["(due"],"larger program.":["It"],"larger project,":["the","something"],"larger scopes":["require"],"larger strings":["if"],"larger system,":["Data.Text"],"larger table":["could"],"larger table,":["e.g."],"larger than":["3","the","that","a","a"],"larger, can":["you?"],"largest hammer":["available"],"largest something":["rather"],"largest to":["smallest"],"largest until":["you"],"last 2":["import"],"last 3-4":[":)"],"last I've":["read,"],"last `messageResponse`":["clause."],"last a`":["instead,"],"last argument":["to","in","used","is","from"],"last attempt.":["I"],"last case.":["I"],"last character":["in"],"last clause":["in"],"last comment,":["it"],"last comment.":["Your"],"last element":["of","of","of","in"],"last errors":["returns"],"last expression":["to:","in"],"last factor":["since","that"],"last factor,":["since"],"last four":["functions"],"last four.":["And"],"last function":["application"],"last functions,":["though."],"last guard":["in"],"last hasty":["attempt."],"last input":["=="],"last is":["not","to"],"last iteration":["I","it's","and"],"last iteration,":["I","my","at"],"last letter":["is\"","is"],"last line":["here).","to"],"last message":["==","=="],"last msg":["=="],"last n":["elements"],"last night.":["I"],"last one":["around,","looks"],"last one.":["One","This"],"last one:":["(not"],"last operation":["is"],"last resort,":["especially"],"last revision,":["you"],"last revision.":["Fixed"],"last s":["=="],"last statement":["(which","just"],"last step":["of"],"last string":["=="],"last string`":["could"],"last submission":["helped"],"last submission.":["I'm"],"last ten":["characters"],"last test":["case?","given,","case?","wants","case)."],"last test.":["Because","This"],"last thing":["is"],"last time":["I"],"last time.":["I","But"],"last time:":["`(lowerCaseBottleText"],"last to":["enable"],"last two":["lines","guards","elements."],"last version":["that"],"last version,":["it"],"last version.":["If"],"last x":["=="],"last xs":["==","=="],"last) q":["="],"last, because":["last"],"last, so":["it"],"last. I":["personally"],"last. isSpace":["might"],"lastDayOfMonth year":["month"],"last` but":["this"],"late --":["which"],"late last":["night."],"late... Ignore":["this"],"later (as":["in"],"later IORef":["operations."],"later and":["add"],"later anyway!),":["and"],"later exercise":["where"],"later on":[";-)","the"],"later on,":["and"],"later on.":["This"],"later one":["may","will"],"later ones":["like"],"later rather":["than"],"later remove":["the"],"later since":["all"],"later so":["I"],"later tasks":["are"],"later use":["of"],"later versions":["they"],"later when":["I"],"later with":["writing"],"later without":["really"],"later\" most":["of"],"later). As":["far"],"later, on":["the"],"later. As":["for"],"later. I":["really"],"later. You":["actually"],"latest Haskell":["Platform","Platform.","Platform).","Platform)","Platform","Platform"],"latest attempt":["has"],"latest iteration.":["Let"],"latest revision":["is"],"latest test":["code."],"latest version":["-"],"latest version..":["I'll"],"latest. Submitted":["an"],"latter are":["so"],"latter as":["simply"],"latter case,":["where"],"latter forms":["can"],"latter implementation":["does"],"latter implementation.":["Consider"],"latter is":["more","more","to"],"latter must":["allocate"],"latter needs":["to"],"latter obviating":["the"],"latter slightly":["more"],"latter two":["will"],"latter, in":["Haskell,"],"launch a":["new"],"launch-all-the-missiles interface,":["this"],"law and":["make"],"law that":["you"],"laws](http://www.haskell.org/haskellwiki/Monad_laws) is":["equivalent"],"laying out":["the"],"layman's terms":["when"],"layout I.e.":["Vector"],"layout and":["whether"],"layout is":["active","active","active"],"layout linearization":["so"],"layout of":["the"],"layout rules":["on"],"layout to":["store"],"layout, i.e.":["when"],"layout. Here's":["one"],"layout. Other":["from"],"lazily and":["I"],"lazily as":["possible"],"lazily evaluating":["an"],"lazily here.":["If"],"lazily it":["will"],"lazines is":["for"],"laziness (and":["when/how"],"laziness /":["strictness"],"laziness affects":["map"],"laziness but":["you"],"laziness by":["early"],"laziness can":["do"],"laziness comes":["into"],"laziness doesn't":["work"],"laziness fares":["in"],"laziness in":["that","Haskell"],"laziness is":["at"],"laziness it":["will"],"laziness means":["that"],"laziness of":["sort"],"laziness only":["when"],"laziness should":["generally"],"laziness solved":["this"],"laziness was":["a"],"laziness, and":["the"],"laziness, but":["once"],"laziness, not":["immutability,"],"laziness, the":["values"],"laziness. As":["you"],"laziness. Not":["a"],"lazy Map":["and"],"lazy Maps,":["though."],"lazy `insertWith`":["has"],"lazy and":["strict","the","strict"],"lazy as":["a"],"lazy at":["the"],"lazy because":["everything"],"lazy by":["default."],"lazy data":["structures","structures"],"lazy enough":["to"],"lazy evaluated":["or","map"],"lazy evaluating":["as"],"lazy evaluation":["and","can","argument","works","will","works","of","and","(I.e.","of","we"],"lazy evaluation)":["needs"],"lazy evaluation.":["This"],"lazy fold,":["hrmm.","but"],"lazy foldr.":["Implementing"],"lazy function":["and"],"lazy in":["value"],"lazy is":["the"],"lazy language":["depend","with","we"],"lazy language,":["such"],"lazy left":["fold"],"lazy map":["do"],"lazy ones":["is"],"lazy or":["strict"],"lazy recursion":["example?"],"lazy semantics":["is","work"],"lazy semantics,":["in"],"lazy so":["addition"],"lazy string":["generation,"],"lazy string).":["I'm"],"lazy though,":["unless"],"lazy thunks,":["keeps"],"lazy to":["do","time"],"lazy together":["with"],"lazy variant":["do"],"lazy version":["of","of","has","of","of","doesn't"],"lazy version.":["Changed"],"lazy version?":["or"],"lazy way":["to"],"lazy when":["doing"],"lazy which":["will"],"lazy, but":["if"],"lazy, left":["folds"],"lazy, or":["normal-order"],"lazy, so":["when","there","WHNF","you'll"],"lazy, the":["other"],"lazy-evaluation thing":["totally"],"lazy. The":["combination"],"lazy. This":["means"],"lazy. You":["really"],"lazyness issues.":["See"],"lb 1.254422":["us,"],"lb 1.321476":["us,"],"lb 10.07447":["us,"],"lb 11.27313":["ns,"],"lb 152.2779":["ns,"],"lb 196.0717":["ns,"],"lb 204.1705":["ns,"],"lb 57.83001":["ns,"],"lb 7.101970":["us,"],"lb 7.593824":["us,"],"lb 7.968814":["us,"],"lb 81.85053":["ns,"],"lb` and":["in"],"le) -\u003e":["(map"],"le, s))`":["as"],"lead me":["to"],"lead to":["misconceptions","the","a","the","the","problematic","a","memory","stack","a","thunk"],"lead you":["to","to"],"leading and":["trailing"],"leading me":["to"],"leading to":["a"],"leads to":["the","me","the","the","additional","much"],"leaf the":["order"],"leak (I":["covered"],"leak (Maybe":["is"],"leak (building":["a"],"leak (since":["you"],"leak (storing":["the"],"leak (the":["values"],"leak (these":["thunks"],"leak and":["the"],"leak and/or":["poor"],"leak as":["values"],"leak because":["the","you'll","you","it","doing"],"leak can":["be"],"leak caused":["by"],"leak due":["to","to"],"leak for":["a"],"leak here,":["`foldl'`"],"leak here.":["The"],"leak in":["general","a","`M.adjust"],"leak is":["because","still"],"leak issue":["of"],"leak problems":["with"],"leak reasons,":["it"],"leak since":["the"],"leak that":["can","the"],"leak when":["using","constructing"],"leak with":["a","the"],"leak ~~if":["you"],"leak). Instead":["of"],"leak, `foldl'`":["from"],"leak, and":["to"],"leak, because":["it","instead"],"leak, but":["this"],"leak, consider":["using","using"],"leak, has":["the"],"leak, try":["to"],"leak. For":["a","the"],"leak. Instead":["of"],"leak. It's":["a"],"leak. See":["also"],"leak. That":["function"],"leak. The":["better","only"],"leak. When":["`fromListWith`"],"leak. You":["could","can","can"],"leak. `foldl`":["is"],"leaked strict":["map"],"leaks are":["catastrophic"],"leaks due":["to"],"leaks in":["this","code."],"leaks until":["value"],"leaks usually":["appears"],"leaks, there":["are"],"lean toward":["keeping"],"leap &&":["not"],"leap year":["if"],"learn Haskell":["as"],"learn a":["lot","language.","lot"],"learn about":["MVar,","`fromEnum`","Haskell","mutability"],"learn and":["remember."],"learn by":["doing"],"learn haskell":["using"],"learn here":["unless"],"learn how":["to","to"],"learn it":["to"],"learn more":["about","about","about"],"learn of":["the"],"learn quiet":["a"],"learn so":["there","much"],"learn standard":["library"],"learn stuff":["in"],"learn that":["`error`"],"learn the":["standard","standard"],"learn this":["kind"],"learn to":["apply.","do"],"learn why":["the"],"learn you":["a"],"learn. And":["I"],"learn/use more":["functional"],"learned a":["lot.","lot"],"learned enough":["to"],"learned from":["this"],"learned how":["to"],"learned it":["by"],"learned more":["about"],"learned some":["cool"],"learned this":["stuff"],"learned to":["look"],"learned what":["\"eta-reduce\""],"learning (it":["worked"],"learning Haskell,":["and"],"learning a":["ton","lot"],"learning about":["Haskell's","whatever","the","parsing."],"learning by":["this"],"learning exercise).":["Just"],"learning experience,":["dealing"],"learning haskell,":["I'd"],"learning mode":["of"],"learning purposes":[":)"],"learning tasks":["string","where"],"learning that":["this"],"learning, I":["want"],"learning, too":[":-)"],"learns new":["type"],"learnt something":["new."],"least *one*":["alphabetic"],"least 1/2":["of"],"least 100":["characters"],"least I":["don't","couldn't","understood","see","need","need"],"least I've":["used)"],"least O(n^2)":["due"],"least `isShouting`":["and"],"least adequately":["terse"],"least amount":["of"],"least as":["far"],"least asymptotically,":["I"],"least at":["the"],"least be":["able"],"least compiles,":["then"],"least favourite":["things"],"least for":["me).","me):"],"least has":["a"],"least if":["you're"],"least in":["GHC","the"],"least it":["makes"],"least lazy":["string)."],"least learn":["how"],"least linear":["time"],"least log":["time"],"least not":["the"],"least now":["I"],"least on":["the"],"least once,":["why"],"least one":["alphabetic","uppercase","or","character","other","character","capital","success\",","case","is","uppercase","letter"],"least put":["the"],"least redundant":["way"],"least significant":["to"],"least significant,":["counting"],"least slightly":["better."],"least somewhat":["more"],"least that":["helps"],"least that's":["what","how"],"least the":["simpler","current","main","first"],"least there's":["no"],"least to":["me)..."],"least twice":["as"],"least two":["letters,"],"least use":["of","of"],"least your":["original"],"least) but":["not"],"least) whereas":["for"],"least, I":["didn't","see"],"least, I'm":["new"],"least, less":["dependent"],"least, this":["advantage"],"least. You":["may"],"least. ```":["st"],"leave 0..6":["as-is,"],"leave ```nub```":["in"],"leave everything":["else"],"leave it":["as","to","like","as","as","for","as","for","as","for"],"leave list":["comprehension"],"leave off":["the","the","```xs```"],"leave out":["the","the"],"leave that":["to","test"],"leave the":["Prelude","module"],"leave them":["out","in","in"],"leave this":["character","as"],"leave unused":["code"],"leaves the":["factory"],"leaving it":["as","to","at","as"],"leaving off":["the","```candidates```"],"leaving the":["mutability","1","BST"],"leaving this":["file"],"lecture notes":["for"],"led me":["to","to","to"],"led people":["to"],"leeway as":["you"],"lefht hand":["aide"],"left `foldl'`":["in"],"left `w'`":["inside"],"left after":["filtering,"],"left and":["thus","right","top"],"left associative":["so"],"left associative,":["so"],"left even":["though","though"],"left fold":["(`foldl'`),","(`foldl'`)","(`foldl'`)","with","(`foldl'`)","(`foldl'`)","(`foldl'`)","(`foldl'`)","(`foldl'`)","(`foldl'`).","or","internally","with","for","(`foldl'`)","in","(which","regardless","similar","for","internally.","used","(`foldl'`","in","without","though.","internally.","with","(or","(`foldl'`","in","instead","functions.","to","and","can","over","`foldl'`","internally.","in","here","instead.","do.","only,"],"left fold,":["because","due","such","since","for","because","you"],"left fold.":["There","I"],"left folding":["which","`foldl'`"],"left folding,":["`Data.List.foldl'`"],"left folds":["(`foldl'`).","are","if","in"],"left folds\",":["\"only"],"left for":["your"],"left hand":["side","side."],"left handside":["of"],"left in":["order","code."],"left instead":["of"],"left is":["the","10,"],"left it":["in","as","at","that"],"left iteratively.":["A"],"left most":["of"],"left of":["the","that","```++```"],"left on":["v1?"],"left over":["from"],"left really":["is"],"left shift":["instruction"],"left shifting":["by"],"left side":["of","are","then"],"left some":["hints"],"left strip":["function"],"left the":["Map","mapping","constructor","import","type","argument","argument"],"left to":["right…","figure","nitpick","comment","right","right","be","right"],"left two":["import"],"left with":["an"],"left\" is":["not"],"left\" though,":["but"],"left, double":["the"],"left, instead":["of"],"left-associative rule":["applies."],"left-hand-side references":["to"],"left-to-right fasion":["so"],"left-to-right, stops":["early"],"lefthand side":["and"],"leftmost digit":["(no"],"leftmost on":["both"],"leftover from":["pointfree"],"leftovers --":["there"],"leftovers in":["this"],"legal to":["interpret"],"legal, but":["I"],"legible that":["is."],"legible. Point":["taken."],"legitimate, depending":["on"],"legnth on":["each"],"legwork! I":["didn't"],"len =":["length","fromIntegral"],"len ==":["10","11"],"len-2 ..":["0]`"],"lends itself":["towards"],"length $":["filter"],"length (filter":["isLower"],"length )":["."],"length .":["filter","find`"],"length 100":["for"],"length 4":["5"],"length a)":["(take"],"length and":["filter"],"length as":["+","+","+"],"length at":["every"],"length b))```.":["Or"],"length bin`":["and"],"length calculation":["still"],"length can":["be"],"length check":["necessary","at"],"length is":["unsafe.","10.","easy","O(n).","calculated"],"length isn't":["really"],"length of":["the","strands.","the","the","b","`word`,","the","the","`xs`","the","`s`,","the","the","the","`zipWith","these","the","the","some","some","the","the","each","the","a"],"length on":["each","each"],"length target`":["is"],"length to":["a"],"length validations,":["but"],"length will":["have"],"length with":["filter,"],"length with/without":["the"],"length worked":["for"],"length xs)),":["you"],"length xs)`":["using"],"length you":["know"],"length) .":["group"],"length, `(sum":[".)"],"length, as":["null"],"length, group,":["or"],"length, not":["sum."],"length, so":["you"],"length, which":["I"],"length` (it's":["debatable"],"lengths -":["but"],"lengths so":["if"],"lengths, so":["we"],"lens everywhere":[";)"],"lens for":["the"],"lens if":["you"],"lens). There's":["no"],"lenses are":["going"],"lenses in":["`simulate`."],"lenses or":["similar"],"lent perfectly":["to"],"less \"clutter\")":["because"],"less OK,":["there"],"less a":["direct"],"less ambiguity":["about"],"less boilerplate":["if"],"less boxing,":["but"],"less brakets,":["less"],"less chances":["to"],"less clear":["than","either.","to"],"less clear.":["Reading","`.`"],"less code":["and","and","to","and","to","and","(no","(and","using","using","if","using","using","repetition.","to","and"],"less code,":["more","and"],"less code.":["Using","Generally","For","Similarly,","Higher","`scoreLetter`"],"less complex":["ways"],"less comprehensible.":["First,"],"less convinced":["by"],"less dense":["though"],"less dependent":["on","on"],"less efficient":["than","that"],"less efficient,":["using"],"less efficient.":["If"],"less equal,":["and"],"less equivalent":["to","to"],"less faff":["than"],"less for":["readability."],"less helper":["functions."],"less if":["you","you","you","`do`"],"less indentation":["if"],"less insertions":["(i"],"less keystrokes":["(or"],"less launch-all-the-missiles":["interface,"],"less legible.":["Point"],"less like":["magic:","one"],"less magical":["than"],"less meaningful":["name"],"less memory":["than"],"less naive":["ways"],"less noisy":["than"],"less obvious":["and"],"less obviously":["simple"],"less of":["that","the","a","a"],"less optimal":["than"],"less or":["equal"],"less performant":["because"],"less powerful":["than"],"less pretty,":["I"],"less readable":["for","IMO.","or","once","since","than"],"less repetition":["you'd"],"less repetition.":["Here's"],"less repetitive":["and"],"less robust":["(in"],"less simple.":["As"],"less spaces":["for"],"less syntax":["using"],"less tedious":["(see"],"less than":["spectacular","function","x\"."],"less the":["same","same"],"less then":["you"],"less time":["if","than"],"less tortuous":["than"],"less tricky":["this"],"less type":["safe,"],"less unused":["imports!"],"less verbose":["and","using"],"less whitespace":["though"],"less work":["to"],"less work.":["Maybe"],"lesser degree.":["If"],"lesser precedence":["than"],"lest translate":["it"],"let (.^)":["a"],"let a":["="],"let ab":["="],"let anagram":["word"],"let b'":["="],"let binding":["in"],"let bindings.":["This"],"let c'":["="],"let dispatch":["xs"],"let f":["k"],"let is":["important"],"let it":["be."],"let lx":["=","="],"let me":["know","move","make","ensure","write","try","know","know.","answer","know.","know","know","know","know","try","know","know","know","know","know"],"let n":["be"],"let ok":["p"],"let or":["a","where","where"],"let the":["compiler/runtime","user"],"let things":["unsaid"],"let this":["hold"],"let through":["characters"],"let variables":["for"],"let w":["="],"let w1'":["="],"let with":["empty"],"let you":["write","write","get","use","separate","get","write","map","chunk","build","know","write","do","write"],"let {":["w"],"let's keep":["solving"],"let's not":["go"],"let's say":["that"],"let's you":["leverage"],"let, so":["you","anagramsFor"],"let-in. Otherwise":["ok"],"let. Not":["sure"],"let... in":["to"],"let` usage":["is"],"lets check":["``10^9"],"lets check.":["I've"],"lets combine":["things,"],"lets say":["you"],"lets you":["supply","count","do","choose"],"letter \u003c-":["letters]"],"letter =":["('A',","('A',","('A','Z')"],"letter `A`.":["It's"],"letter `Q`":["is"],"letter and":["no","2-"],"letter as":["the"],"letter before":["the"],"letter char":["or"],"letter characters,":["namely"],"letter first":["in"],"letter frequencies,":["but"],"letter in":["it.","`FOOBAR`,","a","O(1)","it"],"letter is":["either","question","placed"],"letter is\"":["or"],"letter it":["stands"],"letter or":["use","digit","a"],"letter out":["of"],"letter that":["costs"],"letter tiles.":["Your"],"letter to":["be"],"letter twice":["in"],"letter vars":["feel"],"letter will":["be","suffice"],"letter you":["have"],"letter {-":["letters"],"letter) &&":["(no"],"letter) `as":["M`,"],"letter, digit":["::"],"letter, like":["`M`"],"letter, otherwise":["it"],"letter, we":["might"],"letter. With":["the"],"letter; Char":["supports"],"letter? In":["your"],"letterSet function":["with"],"letterValues =":["[(\"AEIOULNRST\","],"letterValues, c":["\u003c-"],"letter` (with":["an"],"letter` are":["superfluous,"],"letter` for":["every","every"],"letter` once":["instead"],"letters &&":["not"],"letters \u003c-":["replicateM"],"letters =":["sort","filter","filter"],"letters I'd":["be"],"letters and":["then","the","numbers","the","numerous","numbers","numbers"],"letters are":["uppercase).","not","downcase","upper"],"letters as":["separate"],"letters at":["all."],"letters exactly":["once\".","once."],"letters for":["comparison."],"letters have":["to"],"letters in":["the","the","arbitrary","the","a","`FOOBAR`?","the","the"],"letters is":["shouting,","more"],"letters long":["anyway."],"letters of":["a","the"],"letters only?":["What"],"letters relate":["to"],"letters that":["are"],"letters to":["their","make","an"],"letters to/from":["int."],"letters were":["capitalized"],"letters will":["take"],"letters worth":["the"],"letters) &&":["all"],"letters) \u003c&\u003e":["(/=)"],"letters) \u003c-":["M.toList","toList"],"letters) {-":["M.toList"],"letters)` should":["work."],"letters)`, where":["I"],"letters)`. Just":["thinking"],"letters, and":["it","this"],"letters, not":["exactly"],"letters, one":["letter"],"letters, unlike":["`isAlpha`."],"letters, which":["isn't"],"letters, you":["get"],"letters-values association":["list"],"letters. If":["you"],"letters. It":["might"],"letters. Just":["a"],"letters. When":["I"],"letters. elem":["is"],"letters? This":["will"],"lettersOf =":["sort"],"letters`. There's":["nothing"],"letting Haskell":["handle"],"letting money":["silently"],"letting the":["type"],"letting you":["know"],"level I":["mean."],"level `fromListWith`.":["The"],"level and":["folding","gave"],"level as":["the"],"level bindings":["`validNucleotides`,"],"level code":["is"],"level combinator":["for"],"level combinator?":["There's"],"level combinators":["are","instead","instead","such","like","are"],"level definition":["that's"],"level definition,":["perhaps"],"level definition.":["Looks"],"level definitions":["can","not","with"],"level definitions,":["imports,","imports,"],"level definitions.":["See","I"],"level facilities,":["because"],"level function":["as","and","to"],"level functionality":["rather","makes","for"],"level functions":["here","defined","that","here","in","declaration,","because"],"level functions,":["but","you"],"level in":["Haskell."],"level it":["seems"],"level leads":["to"],"level makes":["sense."],"level naturals":["on"],"level of":["work.","indirection","abstraction","abstraction","a","space","a","a","a","indentation?","using","the","compilaction","indirection,"],"level simple":["enough"],"level stuff":["can't."],"level that":["semantically"],"level to":["apply."],"level type,":["such"],"level way":["to"],"level\" of":["a"],"level) `transform`":["(shorter"],"level, a":["more"],"level, because":["then"],"level, currently":["it"],"level, however":["I"],"level, instead":["of","of"],"level, it":["should"],"level, very":["much"],"level. However,":["your"],"level. Let":["me"],"level. The":["compiler"],"level. This":["is"],"levels of":["nesting","indentation"],"leverage the":["type"],"leverages a":["derived"],"leverages the":["same"],"leveraging the":["type","Map"],"lg n)```":["compared"],"lib (Data.Map":["is"],"lib feels":["a"],"lib string":["substitution"],"lib these":["days,"],"liberal possible":["input."],"liberally in":["the"],"libraries are":["OK"],"libraries but":["the","the"],"libraries first?":["Knowing"],"libraries for":["these","dealing"],"libraries it's":["bound"],"libraries more.":[";)"],"libraries seem":["to","to"],"libraries that":["are","work"],"libraries to":["know"],"libraries you":["could"],"libraries). That":["said,"],"libraries, and":["a"],"libraries, that":["someone"],"libraries, which":["you"],"libraries, writing":["it"],"libraries. Gone":["from"],"libraries. Maybe":["there's"],"library do":["you"],"library from":["cabal?"],"library function":["I"],"library functions":["that"],"library functions,":["although"],"library is":["more"],"library like":["parsec"],"library optimizations":["that"],"library rather":["than"],"library routines":["like"],"library so":["I"],"library support":["block"],"library was":["overkill;"],"library works":["elementwise."],"library would":["only"],"library), and":["then"],"library, it's":["part"],"library, not":["the"],"library, or":["is"],"library. Combined":["with"],"library. I":["don't"],"library. The":["only","closest"],"library. `anagramsFor`":["doesn't"],"library; how":["would"],"library? I'm":["a"],"libs unless":["necessary,"],"lied, one":["more:"],"lies in":["the"],"life easier":[":)","in"],"lift it":["to"],"lift would":["break"],"lift(?) it":["into"],"liftA2 $":["(&&)","(&&)`","(&&))","(&&)`","(&&)`"],"liftA2 (&&)":["haveUpper"],"liftA2 (&amp;&amp;)":["."],"liftA2 (||)":["g"],"liftA2 .":["liftA2","liftA2"],"liftA2 instead":["of"],"liftA2` actually":["*worked*"],"liftA2` but":["I"],"liftA2` it":["operates"],"liftA2` will":["take"],"liftM /":["orElse"],"liftM here.":["Seems"],"liftM instead":["of"],"liftM2 (&&)":["haveUpper"],"liftM2 (++)":["(replicate","m1"],"liftM2 (||)":["g"],"liftM2 to":["try"],"liftM2. Doesn't":["make"],"liftM2... should":["have"],"lifted `checkAnagram":["st`"],"lifted out":["to"],"lifting, where,":["and"],"lifts pure":["value"],"lifts to":["applicative,"],"light of":["day.)"],"light on":["details."],"light-bulb moment.":["Brilliant."],"lighter on":["memory---at"],"like \"@@@\"":["(though"],"like \"IV\",":["than"],"like \"apple\"":["and","and"],"like \"case\"":["but"],"like \"if":["…"],"like \"original\"":["or"],"like \"s1/=s2":["&amp;&amp;"],"like \"what":["is\""],"like 'map":["two"],"like (and":["-Wall"],"like (each":["line"],"like -":["https://gist.github.com/petrblaho/6422732"],"like 20":["pairs."],"like 70-80":["column"],"like :":["`zipDNA"],"like \u003c$\u003e":["as"],"like \u003ccode\u003e(\"?\"":["\\`isSuffixOf\\`)\u003c/code\u003e"],"like \u003ccode\u003eimport":["qualified"],"like \u003cpre\u003eisYelling":["str"],"like \u003cpre\u003eslices":["n"],"like API":["tests"],"like Attoparsec":["for"],"like BangPatterns":["as"],"like CAPS?":["to"],"like Data.IntMap":["here,","functionality,"],"like Data.List.Split.wordsBy":["combinator,"],"like Data.Map":["is"],"like Data.Vector":["or"],"like Debug.Trace":["is"],"like Djinn's":["version"],"like English":["adjectives."],"like Haskell,":["but"],"like I":["need","did","would","commented","started","remotely","would"],"like I'd":["actually","have"],"like I'm":["overcomplicating","just","missing","just","referencing"],"like IORefs":["or"],"like M.insertWith":["would"],"like Monoid,":["Applicative,"],"like O(1)":["access"],"like X,":["C,"],"like YELL.":["Maybe"],"like [I":["did](https://github.com/kytrinyx/exercism.io/commit/2564b1549b95044b14f52c84c37f7ea3a6bda6a0),"],"like [`IORef`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-IORef.html)":["or"],"like [`TVar`s](http://hackage.haskell.org/package/stm-2.4.2/docs/Control-Concurrent-STM-TVar.html)":["for"],"like [n,(n-1)..m]":["would"],"like [this]":["(http://pastebin.com/yFULJr7S)"],"like _map_,":["_filter_,"],"like `":["[(1000,"],"like `!@#$%^?`,":["it"],"like `\"of":["beer"],"like `$`":["or"],"like `(((1":["+","+"],"like `(((1)":["+","+","+","+"],"like `(((…":["+"],"like `(..)`,":["but"],"like `(=~)`":["are"],"like `(\\y":["-\u003e"],"like `(f":["w1"],"like `(not":[".)`."],"like `++`":["but"],"like `.`":["and"],"like `/`":["and"],"like `1":["+","+","+","+","+"],"like `2^n`":["is"],"like `3*(n-1)/2`":["arithmetic"],"like `Data.Char`.":["If"],"like `Data.Map.fromListWith`":["although"],"like `First`'s":["monoid"],"like `M.Map`":["and"],"like `M`":["or"],"like `Maybe":["Plant`"],"like `Prelude.reads`":["method"],"like `Robot":["\u003c$\u003e"],"like `TVar`s":["more"],"like `TupleSections`!":["and"],"like `WHAT?":["DON'T"],"like `[":["(a,"],"like `[0,-1..8]`.":["Nice!"],"like `[f":["x"],"like `[from,":["then"],"like `[to":[".."],"like `\\(Nucleotide":["x)"],"like ```\"inventory:":["1000"],"like ```M.Map```":["instead"],"like ```mapSingleValue":["[noLowerCase,"],"like ```not":["."],"like ```null":["xs```"],"like ```private```":["methods"],"like `addGregorianMonthsClip`":["instead"],"like `all":["isLetter","f"],"like `all`":["and"],"like `any":["["],"like `atomically":["readTVar`"],"like `bots@(b:bs)`":["and"],"like `catMaybes":["[fmap"],"like `chunksOf`":["from"],"like `concat`,":["`unwords`"],"like `convert`":["should"],"like `count":["="],"like `data":["MessageKind"],"like `dropUntil`":["and"],"like `f":["(x,","x`","(x)`.","x"],"like `flip":["zip"],"like `flip`":["excessively"],"like `fold`":["families"],"like `foldl'`":["is","in"],"like `foldr`":["does."],"like `foo":["=","(bar","+"],"like `force`":["is"],"like `freqDist`.":["Very"],"like `fromMaybe":["bogus"],"like `garden`":["could"],"like `go`":["is"],"like `guard":["f"],"like `hammingDistance":["="],"like `import":["Data.Char","Data.Char","B"],"like `insert":["k1"],"like `insertWith`":["to"],"like `isShouting`":["or"],"like `isShouting`,":["to"],"like `isSuffixOf`":["more,"],"like `last":["string"],"like `last`":["does,"],"like `length":["w1"],"like `map":["(zip","(flip","(\\s","(f","(\\x"],"like `mapM":["randomRIO"],"like `mapM`":["to"],"like `mapMaybe`":["(from"],"like `map`":["for","was","rather","because"],"like `map`.":["And"],"like `maybe":["defaultNumber"],"like `n":["\u003c-"],"like `newStdGen`":["and"],"like `normalize":["="],"like `not":["any","(hasLower","(null"],"like `not.":["any"],"like `nucleotideCounts":["\"ABCDEFG\"`."],"like `null`,":["`any`,"],"like `numBottles":["0`"],"like `number`,":["`areaCode`"],"like `ord":["'0'`"],"like `records`":["using"],"like `replicateM":["n`","5"],"like `show":["x"],"like `sqrt":["::"],"like `strip`":["for"],"like `sum":["$"],"like `toRNA'`":["would"],"like `transform":["m"],"like `unSchool`":["or"],"like `uncurry":["(/=)`,"],"like `undefined`":["for"],"like `unwords`":["and"],"like `unwords`.":["I'd"],"like `verse":["n"],"like `wordsBy":["(not"],"like `words`":["but"],"like `x`":["appropriate"],"like `{-#":["LANGUAGE"],"like a":["heavy","`enumStepFromTo`...","specialized","good","noun,","compiler","nice","big","natural","good","list,","better","database","hack.","'smart","single","valid","really","good","HUGE","minor","`type`","(very","definition.","big","great","good","monday,","more","correct","hint,","typo.","return","changing","foldl:","`zip`","pretty","good","neat","good"],"like about":["it?","this","reimplementation"],"like all":["the"],"like allTrue":["much,"],"like an":["unnecessary","implementation","implementation","Applicative,","optimization","acceptable","alternative","ok","imperative","understanding","efficient","interesting"],"like append":["an"],"like arrows.":["it"],"like as":["it"],"like attoparsec":["its"],"like before":["I"],"like big":["```where```"],"like black":["magic."],"like blanket":["rules"],"like by":["using"],"like case":["inside"],"like cheating":[";)",":P","but","to"],"like cheating,":["but"],"like clutter":["in"],"like code":["generation"],"like combine":["two"],"like concat":["as"],"like concept":["of"],"like control":["flow"],"like copying,":["current"],"like decimal":["numbers"],"like do":["syntax."],"like everyone":["else"],"like extracting":["`sort"],"like filter,":["where"],"like filters":["or"],"like folds":["instead","over"],"like for":["`randomName`"],"like functional":["style,"],"like getting":["the"],"like having":["`nuke`"],"like how":["you","the","you","it","`yelling`","you","you","i've","you","this","readable","you","you","you","guard","Bounded","ShowS","you","multiplying","the","you"],"like idiom":["brackets,"],"like idiomatic":["Haskell","Haskell","Haskell"],"like if":["you"],"like in":["your","other","Erlang","this","the","this","`foldl'","the"],"like insertion":["internally,"],"like is":["that","making","to"],"like isJust":["is"],"like isQuestion":["are"],"like it":["fit.","was","ought","obscured","this","better","better","generates","would","as","depends","wouldn't","could","should","might","as","could","would","shouldn't","a","points","is","in","but","doesn't","may","would","should","has","more","might","should","can","as"],"like it!":["Where"],"like it'd":["save"],"like it's":["packed","reasonable.","operating","free"],"like it,":["I"],"like it.":["I","Seems","Also","I","For","I","I"],"like it;":["yeah,"],"like just":["the"],"like language":["extensions."],"like leaving":["the"],"like like":[":"],"like linked-list":["(Eq),"],"like logical":["operations"],"like long":["composition"],"like magic,":["and"],"like maybe":["I'm"],"like more":["natural"],"like my":["assignment","version","previous","`isShout`","cons","rewrite","approach.","code"],"like nested":["where"],"like newT*IO":["that"],"like nice":["improvements."],"like none":["of"],"like normal":["Haskell"],"like numbers":["and"],"like obfuscation":["to"],"like objects,":["to"],"like once":["it","IO"],"like one":["here,"],"like ordinary":["immutable"],"like owl":["eyes),"],"like parenthesis/brakets":["all"],"like parsec":["does.","or"],"like pattern":["matching","matching."],"like point":["free"],"like point-free":["style,"],"like pointfree":["style","style,"],"like previous":["one."],"like putting":["that","the","`where`"],"like random":["numbers"],"like repeating":["`classify`"],"like saying":["the"],"like seeing":["qualified"],"like semantic":["code,"],"like so?":["I"],"like solution":["with"],"like some":["very","combination","hardcoding"],"like spaces":["(though"],"like such":["busy","Enum"],"like templates":["to"],"like that":["you","your","the","(I'm","you","you","this","the","you","you",":","implementation,","in","property","version","would","because","this","I","you",":)","is","you","you","in","your","means","but","and","the","you","`xn","are","I'm","is"],"like that's":["a"],"like that,":["but","maybe","most","`toUpper`","that's"],"like that.":["I","Thanks!","I"],"like that...":["seems"],"like the":["haddock","new","use","prepending","explicit","usage","number","re-organization","double","semantics","lined-up","perfect","usage","naming","function","change","isSpace","idea","`isQuestion`.","\"order","implementation","second","second","style","use","`count","function","approach","use","pattern","most","count","defaulting","correct","use","EmotionalContent","guard","use","explicit","indentation","`TupleSections`","logic","class","use","kind","style","function","thought","way","readability,","way","use","use","idea","names","hard-coded","style","usage","use","elegance","use","point-free","previous","use","use","idea","way","Maybe","spec.","idea","fixed","use","coercion","terseness","most","splitting","way","idea","following","retry","use","algorithms","sing","new","submitted","use","optimization","README","idea","Debug.Trace","same,","readability!","`primes`","`const","fact","code.","way","actual","below,","explicit","use"],"like them).":["They"],"like there":["must","might","is","must","is","are"],"like there's":["probably","probably","a","nothing"],"like they":["don't"],"like this":["pointfree","who","you","(even","test","too","?","version","I","needs","problem","it","(which","`(((…)","solution","code.","algorithm,","as","doesn't","solution","type","(note","for","would","programmer","will","together","one","approach","now:","version","version","section","from","other","would've","but","way","might","`Robot","(nothing","is","implementation","(foldr","(there","implementation","\u003cpre\u003eunfoldr","\u003cpre\u003edata","(sorry","code,","one","but"],"like this,":["but","it's","seems","but","you","as","e.g.","feels","but","which","you","without"],"like this.":["It","It's","It's","Most","Since"],"like this...":["(what"],"like this:":["`map","https://gist.github.com/etrepum/6406325#file-gistfile1-txt-L41-L71","`zip","`(incword","`toRNA","`((length","`readDNA","`[(\"AEIO\",","`2:3:[n+m"],"like this?":["And"],"like to":["explicitly","do","explicitly","explicitly","explicitly","be","be","see","generalize","use","be","explicitly","explicitly","document","inline","simplify","comment","explicitly","avoid","use","keep","explicitly","explicitly","have","refactor","improve,","use","explicitly","think","write","do","write","use","avoid","`import","see","use","start","me.","use","progress","omit","emphasize","use","use","use","see","make","use"],"like toRNA":["in"],"like to…\",":["and"],"like traversable":["usage"],"like unwords":["and"],"like using":["`foldl`","partial","last,","`return`","`foldl'`","lens","iteration","extensions","show,","head","explicit"],"like we":["need"],"like we've":["gained"],"like weak":["head"],"like what":["you've","I"],"like when":["written"],"like where":["it"],"like with":["`fromListWith`"],"like word-count,":["but"],"like wordsBy,":["so"],"like you":["propose.","have.","missed","do","submitted","have","had","want","already","can","should","suggested,","should","suggest,"],"like you're":["definitely","trying","doing"],"like your":["wordsBy,","approach","first","implementation","second.","type-based","solution","version","use","solution","solution","code","solution","go-inspired","restatement","approach","use"],"like yours":["is"],"like ~2":["years"],"like 我":["which"],"like, \"always":["use"],"like, `pred`":["and"],"like, for":["reference:"],"like, like":["`n"],"like, similar":["to"],"like, which":["makes"],"like, worst":["haskell"],"like, you":["can","could"],"like. I":["wonder"],"like. Which":["is"],"like: ```\"my":["number"],"like: ```(insert":["\"a\""],"like: `atomically":["$"],"liked having":["the"],"liked in":["the"],"liked my":["first"],"liked that":["lambda"],"liked the":["bit","`unlines`","`\u003e\u003e=`"],"liked to":["use"],"liked writing":["```Prelude.map```"],"likely I'll":["use"],"likely a":["lot"],"likely be":["preferable"],"likely do":["the"],"likely garbage":["and"],"likely get":["optimized"],"likely have":["to"],"likely haven't":["learned"],"likely including":["you,"],"likely inside":["`atomically`))."],"likely no":["measurable"],"likely to":["be","get","make","cause","do","be","bother"],"likely want":["the"],"likely what":["you"],"likely wouldn't":["\"abstract\""],"likely yield":["better"],"likely. But":["that"],"likes putting":["the"],"likewise the":["one"],"liking the":["way"],"liking this":["style"],"limit for":["how"],"limit on":["n,"],"limit the":["imports","definition","definition"],"limitation of":["this"],"limited Haskell":["use,"],"limited experience,":["most"],"limited to":["`(Map)`."],"limited understanding":["of"],"limits the":["number"],"line #9,":["perhaps"],"line (by":["itself),"],"line (though":["order"],"line 10":["(though","are","strikes","works","(though"],"line 10,":["if","but"],"line 10.":["Perhaps","The"],"line 11":["are"],"line 11.":["Possibly"],"line 12":["but"],"line 12,":["`.`"],"line 13":["to","(the","could","to"],"line 13-15":["you"],"line 13-15.":["Basically,"],"line 13.":["I"],"line 14":["is","but","you","would"],"line 15":["as"],"line 15.":["(Only"],"line 16":["are","it","could"],"line 16.":["(You"],"line 18":["will","aren't"],"line 18.":["You"],"line 19":["doesn't","(from","using","by","I"],"line 22":["with"],"line 26,":["but"],"line 28":["to"],"line 28:":["type"],"line 29":["is"],"line 3":["to","you're","you're"],"line 38":["(vector"],"line 38.":["The"],"line 4":["much","you"],"line 41":["you"],"line 5,":["to"],"line 6":["was","would","you","that"],"line 8":["doesn't","point-free.","in"],"line 8,":["`show"],"line 8.":["Also"],"line 9":["would","to"],"line 9,":["`map","should"],"line 9.":["I"],"line `concat":["(replicate"],"line `module":["Bob"],"line after":["\"module","`\\n","the","the"],"line and":["still","you"],"line as":["a","="],"line at":["the"],"line breaks":["in"],"line by":["using","itself","itself."],"line checking":["for"],"line comments.I":["try"],"line continuation":["character"],"line count":["perhaps","a"],"line does":["is"],"line doesn't":["have"],"line everything":["up"],"line from":["previous","the"],"line in":["`isQuestion`","the","`module`,","the"],"line indented":["by"],"line is":["a","the","redundant,","the"],"line like":["this."],"line noise":["it"],"line of":["code","the","the","whitespace.","whitespace","the"],"line options":["have"],"line or":["splitting"],"line per":["action"],"line returns":["a"],"line seems":["redundant,"],"line shorter.":["`all"],"line so":["there","the"],"line start":["with"],"line that":["reads"],"line there?":["Put"],"line to":["`module","be","`module","prevent"],"line up":["like","in","in","in","in","the"],"line while":["`resetName`"],"line with":["`not","a","2"],"line without":["any"],"line you":["don't"],"line, all":["your"],"line, and":["you"],"line, but":["you","looks","that"],"line, in":["the"],"line, or":["at"],"line, so":["you","how"],"line, though":["I"],"line, you":["won't"],"line. Also":["you"],"line. But":["your"],"line. It":["is"],"line. It's":["not"],"line. Or":["use"],"line. There's":["also"],"line. `last`":["can't"],"line? I":["wanted"],"linear (but":["you'd"],"linear algorithm":["but"],"linear algorithm.":["(unless"],"linear amount":["of"],"linear complexity":["and"],"linear complexity,":["can"],"linear representation":["Vector"],"linear search,":["you"],"linear space":["because","thing","(and","instead","leak","and"],"linear stack":["space"],"linear time":["(linearithmic","best","you","to","to"],"linear time,":["the","not"],"linear way.":["Map:"],"linearithmic. In":["a"],"linearization so":["I'll"],"linearizing matrix":["layout,"],"linearly sized":["stack)"],"linearly with":["the"],"linebreak there":[":D."],"lined-up `=`":["signs."],"liner as":["I'm"],"liner. I":["wanted"],"lines $":["diagram`"],"lines (indented":["2"],"lines 1":["and"],"lines 12-13.":["As"],"lines 13-14?":["I"],"lines 2":["and"],"lines 20-22":["are"],"lines 3-6":["is"],"lines 7":["to"],"lines 8,12-14.":["Can"],"lines 8-14?":["For"],"lines 8-9":["and"],"lines 9-11":["and"],"lines `31`":["and"],"lines after":["the","imports."],"lines and":["switching"],"lines as":["to"],"lines can":["be"],"lines here":["or"],"lines in":["Haskell,","total","one"],"lines into":["one"],"lines is":["there","redundant"],"lines look":["odd"],"lines might":["be"],"lines of":["`map`.","`show","code?","easy-to-read","code","code","codes","the","code","`null","that"],"lines or":["not)"],"lines short,":["though"],"lines that":["look"],"lines to":["1","13,"],"lines using":["`fmap`"],"lines were":["surrounded."],"lines what":["could"],"lines which":["might"],"lines with":["'all'.","one"],"lines! I":["can't"],"lines) only":["require"],"lines), and":["I"],"lines). It":["has"],"lines, but":["i","they'd"],"lines, maybe":["try"],"lines, so":["long"],"lines, you":["could"],"lines. Here's":["an"],"lines. However":["printf"],"lines. I":["did"],"lines. You":["can"],"link as":["my"],"link in":["the"],"link it":["a"],"link on":["it."],"link only":["to"],"link really":["helped!"],"link to":["the"],"link you":["sent"],"link! I":["hadn't"],"link, but":["I"],"link. One":["day"],"link] (http://www.haskell.org/haskellwiki/Haskell_programming_tips),":["which"],"link] (https://github.com/tibbe/haskell-style-guide)":["has"],"linked list":["data"],"linked list,":["you","using","not"],"linked to":["and"],"linked-list (Eq),":["saddle-points"],"linking ...":["done.","done.","done."],"links above":["all"],"links above,":["although"],"links are":["still"],"links at":["hand"],"links circular":["so"],"links](http://www.haskell.org/haskellwiki/Software_transactional_memory) to":["explanations"],"lint the":["code"],"lint warning":["with"],"lisp. You":["can"],"list (`fromListWith`),":["or"],"list (almost)":["all"],"list (and":["if","then","have"],"list (assuming":["that"],"list (created":["with"],"list (doesn't":["require"],"list (reversed":["of"],"list (which":["is"],"list :-)":["But"],"list =":["(\u003cThunk:"],"list I":["included","don't","think"],"list I'll":["have"],"list `(x:xs)`":["and"],"list `[Maybe":["Day,Int]`"],"list again.":["I"],"list allocation,":["however"],"list and":["throwing","I","was","use","googling","then","the","if","to","tries","check","simplify","then","just"],"list append":["is"],"list as":["needed.","one","a","it"],"list at":["each","all."],"list based":["implementation","on"],"list beforehand":["and"],"list being":["constructed"],"list business":["altogether"],"list by":["another","the","itself?","*isAnagram*,"],"list can":["be","be"],"list case":["is","in"],"list combinators":["in"],"list comp":["because","as"],"list comprehension":["or","is","`[(x,","in","is","of","but","but","as","to","for","without","to","that","(or","is","and","in","works","with","or","without","as","is","with","to","or","to","doesn't","can","(just","in","should","intuition.","documentation","sugar:"],"list comprehension)":["over"],"list comprehension).":["Would"],"list comprehension,":["your","nice","`(words,","like"],"list comprehension.":["Did","You","Here's"],"list comprehension?":["You","that's"],"list comprehensions":["most","and","or","yet,","to","are","can","in","is"],"list comprehensions,":["consider","but","`toUpper'"],"list comprehensions.":["If"],"list comprehensions..":["yeah"],"list comprehentions":["looks","to"],"list concatenation":["happening."],"list containing":["this"],"list data":["structure,"],"list deforestation.":["Due"],"list do":["you"],"list doesn't":["need"],"list evaluation":["instead"],"list even":["though"],"list first":["then"],"list for":["Data.Char,","your","the","values","this,","a"],"list four":["times.","times,"],"list from":["`emptyMap`","right"],"list functions":["you"],"list has":["all"],"list here":["is","is"],"list in":["`Data.Map`","`sing`","a","reverse","grade,","the","the","```grade```.","a","a","`toList`","memory","case","line","WHNF"],"list instead":["of","and","of"],"list into":["memory"],"list is":["a","shorter","linear","a","empty","traversed","only","a","processed","dealt","used","so","huge.","likely","at","basically","only","null","empty.","monolithic","traversed","less"],"list it":["is"],"list iteratively":["without"],"list like":["`"],"list literal":["in"],"list map":["for"],"list monad":["makes","but","(`\u003e\u003e=`","is"],"list multiple":["times."],"list my":["imports"],"list n":["times,"],"list needs":["to"],"list now":["since"],"list of":["papper.","pairs","(key,","pairs","names","pupils;","possible","names","names","imports","whitespaces.","words.","`Nucleotide`","word","functions","1's","prime","key\\/value","String,","words","2-tuples","all","2-tuples,","candidate","them","Bool.","answering","functions","all","strings","things","words","occurrences","functions","results","functions","results?","two","pairs","allergens","all","pairs,","pairs","tuples","words\"","*possible*","characters","99","the","words","roman","character","non-equal","values","grouped","pairs,","primes","primes.","factors","tuples","tuples.","tuple","map","thinks","some","instructions.","words","exported","```1```s","words.","days.","bools,","the","values","values","digits","instegers","Bools","bools.","Bools,","pairs","converted","elements","repeated","chars","odd","like","chunks","chars","say...a","a","the"],"list only":["once."],"list operation":["with"],"list operations,":["so"],"list or":["the","to","not."],"list originally,":["but"],"list passed":["by"],"list possibility":["for"],"list possibly,":["or"],"list processing":["functions"],"list rather":["than"],"list result":["to"],"list seems":["like","weird."],"list shorter":["to"],"list since":["`isQuestion`","not","it's"],"list slightly).":["Then"],"list so":["that"],"list sorted":["by","by","even"],"list such":["as"],"list supplied":["to"],"list that":["wouldn't","has","contains"],"list that's":["\u003c="],"list the":["functions"],"list then":["doing"],"list though,":["much"],"list to":["add","the","weak-head","the","a","build","avoid","read","be","produce","be","return.","represent","result","be"],"list traversal":["rather"],"list traversal.":["And"],"list twice":["(worst"],"list twice,":["but"],"list up":["to"],"list using":["math"],"list when":["it"],"list where":["the"],"list which":["it","takes"],"list whose":["predicate"],"list will":["only","only","have","be","be","become","be","be","not"],"list with":["`toAscList`.","the","more","a","unwanted"],"list without":["ever"],"list would":["probably","do"],"list you":["create","can","may"],"list |":["grep"],"list's constructor":["(`[]`"],"list) ++":["[\"\\n\"]`"],"list)\", \"you":["probably"],"list), and":["the"],"list), the":["obvious"],"list). The":["right"],"list)... Also,":["any"],"list* if":["`a"],"list, also":["it"],"list, and":["(optionally)","then"],"list, because":["you"],"list, but":["now","it","the","`==`","the","if","if"],"list, docs":["don't"],"list, even":["if"],"list, everything":["else"],"list, instead":["of"],"list, not":["a","an"],"list, of":["course."],"list, rather":["than"],"list, see":["if"],"list, so":["only","you","you"],"list, then":["update"],"list, there":["is"],"list, using":["another"],"list, which":["seems","basically"],"list, with":["the"],"list, you":["have","just"],"list-like (and":["possibly"],"list-wise means":["you're"],"list. A":["Map"],"list. Also":["take"],"list. Any":["suggestions"],"list. As":["it"],"list. But":["If","@carmella"],"list. I":["hope"],"list. Immediately":["after"],"list. It":["isn't"],"list. Length":["and"],"list. On":["large"],"list. Separate":["treatment"],"list. Some":["reasons"],"list. That's":["both"],"list. The":["'right'","reason"],"list. There":["isn't"],"list. This":["is","tail","works"],"list. Thus,":["if"],"list... is":["that"],"list; a":["map"],"list\u003e :":["\u003cThunk:"],"list? Data.Set":["is"],"list? I've":["used"],"list? Or":["are"],"listed (tile":["frequency"],"listed by":["default."],"listed in":["the"],"listen for":["incoming"],"lists (anything":["more"],"lists (not":["my"],"lists (or":["`\"\"`"],"lists :)":["You"],"lists ?":["That's"],"lists and":["filters","length"],"lists are":["used","the","not","a","more"],"lists aren't":["necessary"],"lists at":["all,","the","all.","all,","all,","all.","all,","all","all?"],"lists being":["a"],"lists by":["delimiters."],"lists could":["make"],"lists first":["fixes"],"lists for":["this,","a"],"lists if":["you"],"lists in":["its"],"lists is":["something"],"lists like":["`last`"],"lists of":["strings.","characters","characters,"],"lists only":["evaluates"],"lists or":["`concatMap`","recursion","recursion?","iteration","recursion","iterating.","arrows)","recursion"],"lists rather":["than"],"lists some":["people"],"lists sorted,":["perhaps"],"lists the":["multiple"],"lists this":["can"],"lists to":["avoid","do"],"lists until":["it","one"],"lists versus":["mapping"],"lists will":["be"],"lists) `return`":["is"],"lists) as":["suggested"],"lists), strict":["left"],"lists). It":["would"],"lists). It's":["not"],"lists, `a":["\u003c\u003e"],"lists, `pure`":["simply"],"lists, but":["I"],"lists, due":["to"],"lists, for":["clarity's"],"lists, however":["I've"],"lists, it's":["possible"],"lists, moreover":["it"],"lists, that's":["a"],"lists, they":["requiring"],"lists, which":["is","will"],"lists. And":["if"],"lists. By":["contrast,"],"lists. Maybe":["for"],"lists. Of":["course,"],"lists. That":["saves"],"lists. The":["only"],"lists. This":["is","will"],"lists/strings. A":["safer"],"lists? It":["just"],"listsplit package":["useful"],"literal `3'":["at"],"literal anyways,":["to"],"literal in":["`validDnaNucleotide`,"],"literal instead":["of"],"literally any":["f."],"literally anything":["is"],"literally have":["`isShout"],"literally or":["just"],"literally the":["first"],"literally this":["simple:"],"literals for":["`dnaNucleotides`"],"literals instead":["of"],"literals that":["would"],"literals with":["`++`"],"literals\" in":["http://book.realworldhaskell.org/read/characters-strings-and-escaping-rules.html"],"literals, e.g.":["`randomRIO"],"little Heath-Robinson":["here-"],"little [longer](http://ro-che.info/ccc/21).":[";)"],"little `Map`s":["to"],"little algebra":["you","first","here,","first"],"little algebra,":["`total`"],"little and":["didn't"],"little as":["possible,"],"little awkward":["to"],"little better":["than","to","by","would","using","using","using"],"little bigger":["and"],"little bit":["simpler.","nervous","nicer","simpler,","redundant","more","too.","by","inconsistent","more","of","by","of","messy","of","confused","cleaner.","less","of","simpler..","longer,","by","cleaner.","about"],"little bit,":["I"],"little bit.":["I","I'm"],"little bit?":["(EDIT:"],"little by":["not"],"little cheaper":["than"],"little cleaner":["IMO","(where","that","using"],"little clearer":["to"],"little clearer,":["I"],"little code":["though"],"little confused":["on","by","by","by","what"],"little confusing":["here.","because"],"little confusing,":["I"],"little confusing;":["I"],"little counter":["intuitive."],"little dangerous":["because"],"little dependence":["on"],"little different,":["`"],"little differently,":["maybe"],"little differently.":["I"],"little easier":["to","to","to","to","to","to","to","to","to"],"little exercise":["I"],"little flexibility.":["Is"],"little googling":["led"],"little hard":["for","to"],"little harder":["here","to"],"little having":["to"],"little immediate":["understandability"],"little impact":["there"],"little in-efficient":["in"],"little inefficient,":["but"],"little less":["obviously","ambiguity","dense","complex.","of","work"],"little longer":["digesting"],"little math":[":)"],"little more":["common","simply.","verbose","sense","sophisticated","simply","efficient","clear","performance,","simply","complicated.","boilerplate","concise.","room","sane","sense","specific","permissible","simply","straightforward.","common","severe","interesting,","appropriate","nicely","explicit","simply","correct","clear.","common","appropriate","generic.","easily","clear","reading","readable.","explicit","performant","nicely"],"little nicer":["to","than","to","to","would","looking","using","but","to"],"little of":["the"],"little one-line":["things"],"little overboard":["and"],"little overkill.":["So"],"little package":["named"],"little pattern-matching":["cleverness."],"little point":["in"],"little progress":["elsewhere,"],"little room":["for"],"little scared":["of"],"little shorter":["to","than","if","by","(e.g.","and","if","with"],"little shorter,":["but","`show"],"little shorter.":["Here's"],"little simpler":["(no","(it's","with","than","with","with"],"little simpler,":["but","but","although"],"little sloppy,":["since"],"little sooner":["if"],"little strange":["being"],"little stuck":["on"],"little to":["do","do"],"little too":["clever,","verbose","much"],"little tricky":["but"],"little tricky.":["Here's"],"little ugly,":["you"],"little unsatisfactory":["due"],"little usefulness":["to"],"little weird":["in"],"little while,":["make","but"],"little with":["debugging."],"little wonky":["with"],"little wordier.":["I'm"],"little, especially":["since"],"lives in":["Base"],"lmap (toInteger":["."],"load it":["up"],"load the":["file","file"],"load up":["GHCI"],"loaded would":["have"],"local binding,":["improved"],"local bindings":["any"],"local copy":["I"],"local definition":["but"],"local helper":["functions"],"local optima":["-"],"local scope":["of"],"local socpe":["of"],"local tests":["I"],"local to":["`responseFor`,"],"local variable":["As","As","Bs","Bs","Am","Am"],"localized to":["this"],"localized variant":["of"],"locally changed":["line"],"localscope of":["`responseFor`"],"locate the":["error."],"located on,":["meaning"],"location in":["the"],"location of":["the"],"location where":["it's"],"locations), but":["generally"],"lock based":["synchronization.","synchronization,","synchronization."],"lock-step, usually":["a"],"locking after":["all"],"locking and":["the"],"locking)! So":["I'm"],"locking, non":["composable"],"locks or":["concurrent"],"loeb only":["as","as"],"log *n)*,":["and"],"log n)":["algorithm","time.","time","operation.","algorithm"],"log n))":["involves"],"log n),":["which"],"log n).":["There's"],"log n)`":["as"],"log time":["with"],"log(24)~3, not":["that"],"log(\\Prod_{k=1}^n k)":["="],"log(k) =":["log(\\Prod_{k=1}^n"],"logic a":["little","bit"],"logic and":["used","the"],"logic as":["well."],"logic behind":["the","`isShout`,"],"logic changed":["from"],"logic close":["together"],"logic for":["generating","removing"],"logic here":["is","if"],"logic here.":["Consider"],"logic in":["`add`","`isShouting`."],"logic is":["in","nice","correct","still"],"logic of":["the","both","the","finding","the","a"],"logic one.":["That"],"logic the":["code"],"logic to":["handle"],"logic with":["my"],"logic, as":["suggested."],"logic, but":["it"],"logic? Etrepum's":["useful"],"logical negation.":["i.e."],"logical operations":["in"],"logical operators":["in"],"logically there":["are"],"lol I":["thought"],"lol. Does":["take"],"lol... apostrophes":["are"],"long Map.":["The"],"long String,":["you"],"long and":["you're","ugly"],"long anyway.":["It"],"long as":["we're","my","you","they","public","it's","all","you","it","the","`incrementBalance`","you","it's"],"long composition":["chains,"],"long distance":["indicator"],"long enough":["to"],"long input":["strings"],"long into":["Control.Lens,"],"long it":["took"],"long lines":["as","can"],"long lines,":["maybe"],"long list":["of"],"long on":["the"],"long pattern":["to"],"long so":["I","this"],"long string":["literals","of"],"long strings":["of"],"long that":["I've","I"],"long time":["to","for","to","wrestling"],"long to":["write"],"long too":["--"],"long way":["to","towards"],"long while":["since"],"long, so":["the"],"long-winded solution":["(although"],"long. But":["its"],"long. Secondly":["`wordsBy"],"long. The":["smallest"],"long. Writing":["the"],"long. Your":["implementation"],"longer I'd":["put"],"longer and":["especially"],"longer any":["looking"],"longer being":["necessary."],"longer but":["it","more","the","expresses"],"longer compile":["until"],"longer digesting":["the"],"longer explicitly":["using"],"longer lines.":["You"],"longer list":["comprehension."],"longer needed":["(as"],"longer needs":["to"],"longer seems":["worthwhile."],"longer than":["it","just","`maybe","4","11","2^52","the","having"],"longer the":["case!","more"],"longer to":["execute"],"longer trimmed":["of"],"longer, but":["seems","now"],"longer, not":["shorter."],"longer, you":["should've"],"longer. If":["you're"],"longest scrabble":["word"],"longing for":["your"],"look a":["lot","lot","little","little","bit","lot"],"look and":["let","let","let","let"],"look as":["`^`:"],"look at":["MissingH","earlier","it","my","using","`fromListWith`,","```any```","[Data.Map.Lazy](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html).","the","how","how","a","how","http://hackage.haskell.org/package/split","how","trying","Control.Concurrent.MVar","algorithmic","`fromListWith`.","some","`fromListWith`,","your","`any`","Data.Char,","the","another","that","the","the","something","Data.Char","`foldl'`","using","`wordsBy`","it","`Map.findWithDefault`,","the","your","your","[`isSuffixOf`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-List.html#v:isSuffixOf).","`all`","the","[this","using","`unfoldr`","it","this","the","this","using","up","a","the","doing","one","http://hackage.haskell.org/package/deepseq/docs/Control-DeepSeq.html","`repeat`.","the","the","the","Data.Map's","`setBit`,","point-free","the","other","`Map.fromListWith`.","revision","the","the","```repeat```","the","[filter](http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.6.0.1/Prelude.html#v:filter).","the","example","the","vector-fixed","`any`","the","the","the","list","line","typeclassopedia","Data.List.Split,","a","whether","this","my","`Data.List.Split`,","`modifyTVar`,","using","the","```Functor```."],"look back":["and"],"look better":["indeed.","inline."],"look better.":["Well,"],"look carefully":["at","around"],"look cleaner":["if","(imo),"],"look consistent":["enough"],"look different":["but"],"look for":["[wordsBy](http://holumbus.fh-wedel.de/hayoo/hayoo.html?query=wordsBy).","each,","the","a","the","this","functions","if","this,","similarly"],"look good":["now."],"look great.":["The"],"look in":["Haskell...","Data.Char,","`Data.List`","prelude","Data.Char","Base","Data.Char,","the","the","Data.List.Split","Data.Char,"],"look into":["`MVar`","the","`wordsBy`,","that","using","GHC's","`Data.List.any`","those","`wordsBy`","`splitPlaces`,"],"look it":["up"],"look like":["isJust","`insert","idiomatic","random","`(((…","`(((1)","`guard","`(((1)","(each","I","it","idiomatic","`{-#","`[","`f","once","it's","`/`","this","this:","a","`\\(Nucleotide","this:","it.","this","more","`1","`1","there"],"look like,":["similar"],"look like?":[":)"],"look more":["like","like"],"look much":["better","different","nicer."],"look nicer":["than"],"look not":["so"],"look odd":["and"],"look okay?":["can"],"look pretty":["to","clean"],"look quite":["a"],"look rather":["bad"],"look really":["ugly"],"look right.":["I"],"look simpler":["if"],"look slightly":["better."],"look something":["like","like","like","like"],"look the":["same","same"],"look them":["up."],"look there.":["Lastly,"],"look this":["up"],"look through":["the","the"],"look to":["see","find","factor","properly","the"],"look up":["all","the","Prelude","the","some","the","\"short","operation"],"look up.":["Something"],"look very":["much","strange,","similar,"],"look way":["more"],"look-up table,":["you"],"look. I":["knew"],"look: `module":["WordCount"],"looked a":["bit","little","little","bit"],"looked at":["robot-name.","Data.String.Utils?","the","the","the","```Data.Map.insertWith```?","the","the"],"looked at,":["along"],"looked better":["to"],"looked better,":["than"],"looked for":["a"],"looked in":["Data.List.Split"],"looked into":["a","using"],"looked it":["up","up"],"looked like":["it","before"],"looked more":["complicated"],"looked out":["of"],"looked similar":["enough"],"looked up":["(higher","the","using"],"looking Haskell":["you"],"looking ``WordCount":["{"],"looking around":["I","Data.Map.Lazy"],"looking as":["well."],"looking at":["other","it,","the","the","the","that","the","`s`","`numbers","my","it","for","my","MVar,","how","the","the","the","the","your"],"looking for":["a","a","something","a","better","is","[Text.Printf](http://hackage.haskell.org/package/base-4.6.0.1/docs/Text-Printf.html)","an","a","a","better","and","the","ways","something","a","a","factors.","inspiration","something","here","one"],"looking for,":["thanks!"],"looking for.":["It","I"],"looking forward":["to"],"looking into":["`fromListWith`","other","the"],"looking or":["easy"],"looking pretty":["fool-proof."],"looking really":["distracting,"],"looking solution":["--"],"looking something":["like","like","like"],"looking than":["if-then-else"],"looking to":["see","implement"],"looking up":["one","all","the","the","the","the","of","characters","in","methods"],"looking worse,":["not"],"looking, but":["I'm"],"looking. Functor":["is"],"looks OK,":["there"],"looks VERY":["complicated."],"looks a":["bit","bit","bit","bit","bit","bit","bit","little","bit","bit"],"looks about":["right."],"looks acceptable":["and"],"looks and":["works"],"looks any":["better"],"looks at":["the","each","the","least"],"looks awesome!":["I"],"looks awkward":["to"],"looks better":["aesthetically.","than","now.","than","that","to",";-D"],"looks better,":["thanks!"],"looks better.":["But","And"],"looks clean":["enough","though,"],"looks clean,":["I"],"looks cleaner":["if"],"looks cleaner.":["Is"],"looks cool":["for"],"looks easier":["on"],"looks exactly":["right."],"looks fine":["to","though.","otherwise","though","as","though.","for","here.","to","for"],"looks fine,":["though","although"],"looks fine.":["I'd","I","Nothing","Along","Also"],"looks good":["to","to","to","though,","to","to","so","to","here,","to","to","here.","already.","to",":)","too.","to","otherwise.","to","otherwise","otherwise.","except","though","though,","though,","otherwise.","for","here","to","to","now.","but","except","here!","though,","otherwise.","to","here,","to","to","to","though.","here","here,","to","to","here!","for","other"],"looks good!":["It","I'd"],"looks good,":["nice","but","you","but","but","the","I","I","nice","but","but","but","but","otherwise","other","but","but","but"],"looks good.":["You","The","It's","you","You","A","In","The","+"],"looks great":["to","as","otherwise.","otherwise!","(and","already.","in","otherwise.","here"],"looks great!":["The","I"],"looks great,":["I","but","for","but","it","input","although","not","although","but","the"],"looks great.":["I","I","I","isQuestion","Nice","The","However"],"looks just":["right"],"looks kind":["of","of","of"],"looks kinda":["hacky,","like","like"],"looks like":["this:","when","-","I","just","you're","a","the","with","that.","a","this","the","the","idiomatic","`(f","`uncurry","`all","it","`foo","you","`transform","if","an","this","this:","a","`replicateM","some","you","this:","it","`(((1)","`mapM`","this","linked-list","in","a","`force`","`f","normal","we","`1","a","(and","this","`mapM","there","it","insertion","Debug.Trace","it","`(\\y","it","the","it's","the","a","ordinary","this","the","the","an","a","owl","it","this","there's","it","magic,","`[from,","`[f","a"],"looks like,":["for"],"looks like:":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/wordy/example.hs"],"looks more":["concise.","grammatical,","explicit","like:","complicated","readable"],"looks mostly":["good,"],"looks much":["nicer","better","pretier,","more","better","better."],"looks nice":["now.","otherwise.","though.","now","but","but"],"looks nice,":["although","however","an","I'm"],"looks nicer":["but"],"looks nicer.":["Thanks."],"looks noisy":["but"],"looks not":["so"],"looks of":["this"],"looks perfectly":["fine."],"looks pretty":["ugly.","good","good","good","readable,","good","good.","good!","cool.","good.","good","good","good!","good.","good","good","good","interesting,","good","good","much","good"],"looks quiet":["nice"],"looks quite":["good,","simple","good"],"looks really":["clumsy"],"looks reasonable":["to"],"looks reasonable.":["About"],"looks ridiculous":["in"],"looks similar":["to"],"looks simple":["and"],"looks simpler,":["the"],"looks something":["like","like","like"],"looks somewhat":["confusing"],"looks strange":["to","to"],"looks suspiciously":["like"],"looks to":["be","me."],"looks too":["complicated."],"looks ugly":["and"],"looks ugly..":["seems"],"looks unnecessary":["complicated,","complicated","complicated."],"looks useful!":["I"],"looks very":["ugly.","organized.","sensible","nice.","nice"],"looks weird,":["filtering"],"looks with":["the"],"lookup and":["insert","it"],"lookup another":["nucleotide."],"lookup could":["be"],"lookup data":["structure"],"lookup for":["the"],"lookup in":["*nucleotideCounts*"],"lookup is":["ideal","O(log"],"lookup list":["in"],"lookup of":["score,"],"lookup on":["each"],"lookup or":["need"],"lookup over":["list"],"lookup performance":["speed"],"lookup table":["and","version","that","is","to","is"],"lookup table,":["but"],"lookup table.":["Makes"],"lookup tables":["are"],"lookup to":["crash."],"lookup with":["the"],"lookup without":["much"],"lookup, but":["not"],"lookup, so":["no"],"lookup, where":["Array"],"lookup. You":["could"],"lookup` rather":["than"],"lookups in":["constant","reverse"],"lookups to":["score"],"lookups, maybe":["it"],"loop and":["its","checking"],"loop anyway.":["But,"],"loop from":["the"],"loop over":["input."],"loop started.":["I"],"loop the":["input"],"loop without":["list"],"loop, but":["can't"],"loop, so":["here"],"loop. Another":["technical"],"loop. Any":["ideas"],"looping. But":["I"],"loops here,":["there's"],"loose compiler":["warnings"],"loosing memory":["to"],"lose most":["of"],"lose quite":["a"],"lose the":["last"],"losing track":["where"],"loss of":["generality","generality","generality."],"loss. Internally,":["`foldListWith`"],"lost here?":["Other"],"lost it's":["readability."],"lost myself":["in"],"lost the":["map"],"lost you":["could"],"lost, and":["they"],"lot @":["zhanrnl"],"lot @flavie!":["I"],"lot @howell!":["I've"],"lot about":["the","haskell","Haskell,","your"],"lot as":["reference?"],"lot better":["with","to","by","since","if"],"lot better.":["Thanks!","Thanks."],"lot between":["`f"],"lot cleaner":["if"],"lot cleaner.":["thanks.","I'm"],"lot clearer":["than"],"lot closer":["to"],"lot differently":["anyway,"],"lot faster":["with","than","with"],"lot for":["the","all","the","your"],"lot less":["work.","simple.","code","memory","if","indentation","if","if"],"lot like":["`foldl'`","black"],"lot longer":["than"],"lot lower":["(infixr"],"lot more":["readable.","concise!","clever","common","from","sense.","elegant.","memory","common","space","space","expensive","memory","space","complicated","efficiently","common.","space","readable?"],"lot more.":["(Just"],"lot nicer":["using","to",":)","solution"],"lot nicer,":["in"],"lot of":["possibilities","this","boilerplates","other","nits","goodies","things","syntactic","thunks","oversights","methods","work","effort","heavy","functions:","stack","the","work","puzzling","time","this.","input,","code","complexity","benefit.","food-for-thought","memory","stack","fun,","work.","code","nested","stack","thunks.","functionality","the","nuances","nested","room","`length`","reason","sense","benefit","trade-offs","1s.","RAM","garbage","time","difference.","values","the","sense,","redundancy","Clojure","other","memory","advantage","folks","robots,","advantage","additional","numbers.","fields.","functions","thinks,","practice","edge","hardcoding,","*let*","great","unevaluated"],"lot on":["this"],"lot shorter":["(no","if",":)","than"],"lot shorter,":["it"],"lot simpler":["with","that","(i.e."],"lot simpler,":["and"],"lot simpler.":["I"],"lot to":["both","read."],"lot! I've":["changed"],"lot, @anibal":["and"],"lot, I":["didn't"],"lot, I'll":["give"],"lot, but":["every"],"lot, by":["forcing"],"lot, will":["read"],"lot. Consider":["using"],"lot. I":["do"],"lot. I'm":["glad"],"lot: `countOccurences":["."],"lots of":["nitpicking.","bitty","code","singleton","conditional"],"lots to":["fix"],"loud like":["that,"],"love Clojure":["style,"],"love comments":["on"],"love function":["pipelines?"],"love hearing":["about"],"love suggestions":["to"],"love the":["new","name","default","way","way","consistency"],"love to":["have","know","do","find","hear","hear"],"love with":["`go`","this"],"lovely, I":["should"],"low hanging":["fruits"],"low precedence":["(second","version"],"lowSortedWord) =":["normalForms"],"lowSortedXs ==":["lowSortedWord"],"lowSortedXs) =":["normalForms"],"lowWord /=":["lowXs"],"lowXs &&":["lowSortedXs"],"lower (infixr":["3)."],"lower ::":["String"],"lower =":["map"],"lower and":["sorted","sort","sort"],"lower case":["character\"","nucleotide"],"lower case\".":["These"],"lower case,":["seems"],"lower cases":["the"],"lower each":["character"],"lower fixity":["than"],"lower letter":["will"],"lower level":["stuff","primitive.","implementation)."],"lower or":["to"],"lower precedence":["than","than","than"],"lower risk":["of"],"lower versions":["of"],"lower)) =\u003c\u003c)`":["isn't"],"lower-case `s`":["and"],"lower-level solution":["is"],"lower. Operator":["precedence"],"lowerA` and":["`lowerA`"],"lowerB` has":["to"],"lowerCamelCase for":["identifiers"],"lowerCamelCase rather":["than"],"lowerCase .":["removeNonAlphanumeric`"],"lowerCase word":["only"],"lowerText` (`wordsBy`":["from"],"lowerText` you":["could"],"lowercase 't'":["is"],"lowercase and":["shortcircuit"],"lowercase as":["the"],"lowercase into":["its"],"lowercase is":["used"],"lowercase letter":["before","in"],"lowercase letters":["in","is","and"],"lowercase letters,":["so"],"lowercase only":["the"],"lowercase the":["string","first"],"lowercase vs":["capitalise."],"lowercase, `(not":["$"],"lowercase, it":["might"],"lowercase. I":["really"],"lowercase. In":["other"],"lowercased before":["being"],"lowercased version":["and"],"lowercased version.":["This"],"lowercasing and":["equality"],"lowercasing the":["arguments."],"lowered =":["map"],"lowers =":["map"],"lowers/sanitize much":["more"],"lower{A,B}` are":["unnecessary."],"lowest being":["least"],"lowest precedence":["instead","and"],"lowest precedence).":["By"],"lowest to":["highest,"],"ls /=":["lx"],"ls =":["lower"],"ls) ++":["\"\\n\""],"ls` and":["just"],"lstrip function":["to"],"luck finding":["it"],"luck with":["later"],"lucky enough":["to"],"lucky that":["the"],"lucky with":["having"],"lucky, documentation)":["is"],"lx &&":["ns"],"lx /=":["ly"],"lx =":["map","lower","map"],"lx to":["compute"],"lx)`. You":["could"],"ly &&":["sx"],"ly =":["lx"],"lying here,":["there"],"m ()`":[":)"],"m 13`)":["and"],"m \u003c-":["[-1,","[-1,1]]`"],"m =":["\"Fine.","M.fromListWith","fromList"],"m =\u003e":["(a"],"m \u003e\u003e=":["\\x"],"m [a]`":["its"],"m a":["-\u003e","-\u003e"],"m a`":["for","this"],"m b)":["-\u003e","-\u003e","-\u003e"],"m be":["rows."],"m direcly":["from"],"m instead":["of"],"m r":["-\u003e"],"m xs`?":["I"],"m |":["n"],"m\" vs":["\"m"],"m) e":["-&gt;"],"m, MVector":["v"],"m, Num":["r)"],"m, _]`":["where"],"m, isAlpha":["c]`."],"m, letter":["\u003c-"],"m1 \u003c*\u003e":["m2"],"m@(_:_)` and":["use"],"m]` that's":["the"],"m]`. See":["also"],"m` is":["equivalent","equivalent"],"m` or":["`[n,"],"m` than":["`["],"m` to":["the","shorten"],"m` where":["`f`"],"m` would":["be"],"m`, if":["there"],"ma \u003c|\u003e":["mb"],"mac, using":["the"],"machine interpreted":["and"],"machine or":["DFA."],"machine readable":["versions,"],"machine. In":["the"],"machine. ```cabal```":["and"],"machinery for":["working"],"macro and":["`t`"],"macros in":["the"],"maddeningly close,":["but"],"made RNA":["a"],"made School":["a"],"made a":["new","bit","difference,","lot","clearer","little","conclusion.","comment"],"made about":["how"],"made an":["error"],"made better":["with"],"made clearer":["by"],"made easier":["by"],"made easier.":["I"],"made fancyWords":["a"],"made for":["some","using"],"made here":["is"],"made it":["more","a","nicer","possible","feel","harder"],"made me":["think","rip"],"made more":["efficient","sense"],"made much":["simpler"],"made my":["implementation","`School.add`","implementation","cod","code"],"made one":["is"],"made point-free":["using"],"made sense":["anyway."],"made shorter":["with"],"made significantly":["cleaner"],"made simple":["and"],"made simpler":["by","with","by"],"made simplier":["if"],"made sing":["point"],"made some":["of","changes","changes"],"made that":["in","change."],"made the":["code","predicates","change.","(all-too-common-for-myself)","links","solution","function"],"made them":["fail.","more"],"made things":["hard","much"],"made this":["a","very"],"made up":["of"],"made, so":["both"],"made. This":["can"],"magic is":["already"],"magic number":["`219`"],"magic numbers.":["`219`"],"magic\" phase":["though,"],"magic, and":["you'll","the"],"magical than":["you"],"magically it":["will"],"magick number,":["please"],"magnificent. I":["assume"],"magnitude difference":["in"],"magnitude harder":["to"],"magnitude, despite":["having"],"main ::":["IO","IO"],"main =":["print","print","print","do"],"main computation,":["excluding"],"main core":["API."],"main feature":["of"],"main function":["would","that","in","highlight"],"main function,":["you","and"],"main issue":["of"],"main logic":["is"],"main predicates.":["That"],"main problem":["seems"],"main responseFor":["function","function"],"main verse":["function"],"mainly concerned":["about","about"],"mainly due":["to"],"mainly personal":["preference."],"mainly to":["highlight"],"maintain sorted":["order"],"maintain strictness":["in"],"maintain, has":["potentially"],"maintainability benefits":["of"],"maintainability issues":["you"],"maintainability trumps":["optimization"],"maintainable because":["if"],"maintained, at":["some"],"maintaining it":["internally"],"maintaining strictness":["where"],"major concepts":["are"],"major light-bulb":["moment."],"major vs.":["column"],"majority of":["that","this"],"make Haskell":["work"],"make STM":["and"],"make Schedule":["an"],"make `(,1)`":["equivalent"],"make `Robot`":["a"],"make `Schedule`":["derive"],"make `School`":["an"],"make ```anagramsFor":["\"antidisestablishmentarianism\""],"make ```f```":["as"],"make `add`":["cleaner.","a"],"make `allCaps`":["even"],"make `allergies`":["a"],"make `anagram`":["a","top"],"make `cleaned`":["and"],"make `countWords`":["a"],"make `count`":["much"],"make `generateRandom`":["simplier"],"make `getWeekDay`":["simpler"],"make `grade`":["shorter.","a","a","much","shorter"],"make `hammingDistance`":["point-free."],"make `isAllergicTo`":["shorter."],"make `isAnagram`":["with"],"make `isEmpty`":["simpler"],"make `isQuestion`":["and","nicer."],"make `isSeparator`":["simpler,"],"make `isSuffixOf`":["appear"],"make `mapSorted`":["its"],"make `mkName`":["a"],"make `nucleotideCounts`":["a"],"make `number`":["a"],"make `question`":["a"],"make `readMVar`":["point-free"],"make `replaceChar":["::"],"make `resetName`":["clearer.","any"],"make `responseFor`":["clearer."],"make `sameSorting`":["point-free"],"make `scoreByLetter`":["a"],"make `scoreLetter`":["a"],"make `sing`":["simpler."],"make `sorted`":["a"],"make `splitPhone`":["return"],"make `strip`":["for"],"make `toList`":["a"],"make `toRNA`":["points-free"],"make `toTuple`":["just"],"make `total`":["more","and"],"make `wordsWhen`":["redundant."],"make a":["little","map","variable","range","huge","lot","function","function","quoted","choice,","big","higher","method","lot","heck","more","refactoring","little","version","difference","difference.","huge","ton","difference","huge","new","nice","difference"],"make all":["the","of"],"make an":["operator","even","explicit"],"make anagram":["testing"],"make anagramOf":["point-free,"],"make another":["typeclass."],"make any":["Haskell,","sort","progress","headway","sense"],"make anything":["that"],"make as":["much"],"make assumptions":["about"],"make both":["its"],"make clear":["what"],"make code":["effective","more","more","more","more","cleaner.","more","cleaner,"],"make count":["a"],"make differect":["clauses"],"make different":["strings"],"make display":["a"],"make efficient":["version"],"make for":["an","a"],"make function":["signatures"],"make functions":["total"],"make grade":["shorter","point-free"],"make here":["is"],"make implementation":["more"],"make incrementBalance":["a"],"make indent":["case"],"make insertion":["easier!"],"make intent":["clear."],"make is":["that","`isAsciiUpper`","to"],"make isAnagram":["take"],"make isEmpty":["only"],"make isQuestion":["a","a"],"make isSilence":["simpler"],"make it":["a","a","look","`not","total","to","total,","a","a","clear","such","very","a","a","a","point-free","clear","any","more","more","more","more","less","\"message","easier","more","strict,","iterative","easy","return","shorter.","work.","more","a","points-free?","more","better","possible","better","nicer.","top-level","that","a","point-free:","more","a","shorter","tail","work","harder","efficient","check","a","a","a","read","tail","easier","faster","a","an","point","obvious","entirely","shorter","faster,","longer,","any","a","easier","more","a","usable","a","work","work","more","unnecessary","instance","harder","more","long","shorter","simpler..","a","shorter","more","this","much","simpler.","more","clear","about"],"make it.":["Reusing"],"make line":["4"],"make many":["tree"],"make matters":["a","more"],"make me":["think"],"make more":["sense","sense","sense","sense"],"make much":["of","of"],"make my":["code","import","way","submissions"],"make no":["reference"],"make noComment":["cleaner"],"make of":["it."],"make other":["functions"],"make performance":["worse."],"make predicate":["functions"],"make screaming":["simpler,"],"make sense":["if,","to","to","of","to","since","to","to","to","in","to","to"],"make sense,":["please","you"],"make sense.":["Also,"],"make sense:":["https://gist.github.com/etrepum/90626a30d44ded20102f"],"make shouty":["and"],"make sing":["just"],"make solution":["more","more","much"],"make some":["`fst`","pretty","variable","progress"],"make something":["happen","generic"],"make subscriberNumber":["more"],"make sure":["`S.sorted`","I","I","that","the","that","you're","the","all","that","I"],"make sure,":["you're"],"make task":["in"],"make that":["abstraction.","very","redundant.","second","addition","optimization.","a","happen).","happen?","work,","approach","the","work.","simple,"],"make the":["intention","code","code","code","test","code","code","code","code","code","function","domain","code","line","whole","handling","splitting","logic","lambda","responsibilities","accumulator","code","error","code","`question`","code","code","if/then/else","code","explicit","calculations","solution","test","internal","code","list","underlying","implementation","tests","`x`","syntax","final","code","code","main","change,","following","memory","order"],"make their":["purpose"],"make them":["public","public","return","tests","read","separate","more"],"make these":["point-free.","implementations"],"make thing":["simpler."],"make things":["clearer,"],"make this":["simpler","shorter.","without","a","much","program","a","a","a","a","shorter","a","more","even","cleaner","better","efficient","shorter","a","a","more","a","cleaner","nicer.","\"thread-safe\"","much","expression","a","simpler.","problem","shorter","a","simpler","a","code","simpler.","easy,","solution","more","a","code","shorter.","much","more","cleaner","a","run","easy)","prettier","simpler.","safer.","a","better?","totally","shorter","less","easy","simpler.","shorter.","implementation","a","simpler?","shorter","code","shorter"],"make those":["typeclasses","two","transformations."],"make to":["filter"],"make toEnum":["a"],"make toRNA":["a"],"make too":["much","much"],"make trailing":["comma"],"make use":["of","of"],"make verseComponents":["separate"],"make would":["be","be"],"make yoi":["r"],"make you":["go"],"make your":["`isUpper`","solution","code","program","implementation","responseFor","code","code","`splitIntoAlphaWords`","`count`","code","life"],"make, 15":["letters?"],"makeNucleotide being":["used."],"makes `nextWeekday`":["clearer."],"makes `parts`":["responsible"],"makes `responseForHelper`":["harder"],"makes a":["little","word"],"makes code":["more","more"],"makes difference":[":)"],"makes exactly":["what"],"makes expression":["```(,"],"makes four":["passes"],"makes it":["harder","easy","clearer","kind","past","any","easier","more","easier","nicer.","read","hard","easier","harder","harder","harder","less","empty","full","unnecessary.","a","more","clear","much"],"makes life":["easier"],"makes me":["sad.","disturbed","disinclined","think","suspicious,","wonder","think","feel"],"makes mistakes":["implementing"],"makes more":["sense:","sense","sense"],"makes much":["sense.","of","of","sence","more"],"makes my":["intentions"],"makes no":["sense.","sense","sence,"],"makes perfect":["sense,","sense","sense","sence.","sense","sense,"],"makes reasoning":["about"],"makes sense":["-","used","if","in","when","now,","now.","since","and","to","if","to","though)","for","to","there.","here.","here.","in","when"],"makes sense,":["each","I'll","but","or"],"makes sense.":["Since","I","\u003ccode\u003efromChar\u003c/code\u003e"],"makes some":["sense"],"makes sure":["it"],"makes that":["quite"],"makes the":["code","code","code","chain","code","code","purpose","rest","word","syntax","code","intent","choices","code","code","warning","code"],"makes things":["easy,","nicer","easy","both"],"makes this":["much","work","a","code","a","function"],"makes to":["have"],"makes total":["sense"],"makes what's":["happening"],"makes would":["could"],"makes you":["dig"],"makes your":["solution"],"making -1":["special,"],"making Haskellers":["cry;"],"making `Robot`":["a"],"making `School`":["a"],"making ```sep```":["more"],"making `anagramsFor`":["a"],"making `sort":["."],"making `toBinary`":["return"],"making `wordCount`":["point-free,"],"making a":["preliminary","named","list","lot"],"making anagramsFor":["very"],"making changes":["to"],"making code":["that"],"making dumb":["mistakes,"],"making helpers":["top-level"],"making isShouting":["pointfree,"],"making it":["work","explicit.","a","a","lowercase","into","too"],"making poor":["decisions"],"making really":["dumb"],"making rewrite":["suggestions"],"making some":["let"],"making something":["point"],"making sure":["things"],"making that":["construct"],"making the":["other","right","school","utility","recursive"],"making this":["point-free,","kind"],"making types":["for"],"making your":["code"],"male some":["things"],"man, I":["totally","got"],"man, as":["soon"],"man, you've":["no"],"man. Am":["I"],"man. That's":["the"],"man... my":["first"],"manage space":["leak","leaks,"],"managed in":["the"],"managed to":["find","pass","kick","get","get","remove","make","come","solve","get","produce"],"manager is":["the"],"mangled above":["by"],"manifest only":["with"],"manifestation of":["this"],"manipulate dates":["tend"],"manipulating DNA/RNA":["strings."],"manipulation is.":["The"],"manipulation on":["a"],"manipulations in":["a"],"manner -":["I"],"manner as":["any"],"manner in":["which"],"manner of":["building"],"manner. Another":["straightforward"],"manner... that's":["the"],"manner? (":["I'm"],"manual `foldl'`":["instead"],"manual a":["little"],"manual fold":["completely"],"manual search":["like"],"manual sequencing.":["If"],"manual version":["was"],"manually `insertWith`":["everything"],"manually adding":["newlines,"],"manually constructed":["the"],"manually do":["the"],"manually folding":["at"],"manually force":["all"],"manually fuse":["these"],"manually in":["`invalidNucleotideError`..."],"manually lookup":["in"],"manually removing":["whitespace"],"manually sum":["up"],"manually tallying":["up"],"manually with":["`seq`"],"many Haskell":["developers"],"many algorithms":["if"],"many cases":["as"],"many cases),":["which"],"many chars":["were"],"many cpu":["cycles"],"many data":["structures"],"many days":["there","to"],"many different":["exercises"],"many full-size":["slices"],"many function":["compositions."],"many guards":["from"],"many haskellers":["prefer"],"many have":["figured","done"],"many improvements":["I"],"many incorrect":["queries"],"many insert":["functions"],"many keys":["there"],"many local":["optima"],"many many":["things"],"many miss":["that"],"many more":["times"],"many new":["things"],"many numbers":["should"],"many of":["these","each"],"many other":["functions:","functions:","Haskell","ways"],"many parentheses.":["Function","Haskell"],"many pattern":["matches"],"many people":["have","prefer"],"many problems":["is"],"many recursive":["functions"],"many similarities":["with"],"many spacers":["between"],"many strings":["that"],"many superfluous":["parentheses."],"many symbols":["for"],"many tasks":["that"],"many things":["I","together."],"many thunks":["are"],"many times":["each","a","and","it","as","larger"],"many times.":["But"],"many tree":["functions"],"many type":["signatures"],"many would":["easily"],"many. I'm":["sticking"],"map $":["toLower`","\\n"],"map (":["head","toLower"],"map ($":["3)"],"map ((,x)":["."],"map (++)":["onto"],"map (,1)":["(filter","(filter","s`"],"map (\\":["c"],"map (\\c":["-\u003e"],"map (\\n":["-\u003e"],"map (\\x":["-\u003e"],"map (and":["a"],"map (chunksOf":["2)","2)"],"map (f":["."],"map (f.g)`":["rule,"],"map (flip":["zip","(,)","(++)"],"map (fmap":["sort)"],"map (fromEnum":["."],"map (i.e.":["if"],"map (id":["&amp;&amp;&amp;"],"map (in":["this"],"map (normalize":["&&&"],"map (second":["sort)"],"map (stringToPlants":[".","."],"map (thymidine":["`to`"],"map (toUpper)":["msg"],"map (trans":["."],"map (transcribe":["."],"map (unwords":[".","."],"map ,":["would"],"map ::":["(a"],"map First":["[detectSilence,"],"map [any":["isUpper,"],"map \\x":["-\u003e"],"map _":["[]"],"map a":["sort","new"],"map already":["sorted."],"map and":["getting","filter","a","foldr","sort","as","as","it"],"map approach":["is"],"map are":["going","nested"],"map as":["it"],"map at":["all"],"map avoid":["this"],"map because":["lazy"],"map builders":["that"],"map but":["not","also"],"map by":["yourself:"],"map ceiling":["[-1.9,-1.1,1.1,1.9]"],"map charToRNA`.":["This"],"map complement`.":["Also"],"map conaines":["a","a"],"map concat`,":["however"],"map convert`?":["While"],"map data":["structure"],"map do":["not","not"],"map f":["=","==","==","(x:xs)","xs","xs","xs",")...)\u003e)`"],"map f`":["="],"map f```":["can","to"],"map floor":["..."],"map following":["`wordsBy`"],"map for":["`nucleotideCounts`,","`sorted`","`lettersByScore`,","some"],"map from":["words,","each","a","a"],"map fromEnum":["$","[True,True,False]"],"map fromEnum)":[".)"],"map fromEnum`":["later"],"map fromEnum`.":["I"],"map function,":["so"],"map functions":["more"],"map fusion":["to"],"map g":["==","="],"map generation":["(would"],"map generation.":["Does"],"map getPlant":["row)`"],"map gets":["constructed"],"map goes,":["you"],"map has":["defaults"],"map here":["but","(nor","Data.Map.Strict"],"map here,":["you"],"map here:":["http://www.haskell.org/ghc/docs/latest/html/libraries/base/src/GHC-Base.html#map"],"map in":["makeAllLowercase.","one"],"map in-place":["using"],"map include":["using"],"map incrementally":["rather"],"map insertions":["with"],"map instead":["of","of","of","of"],"map instead,":["it"],"map into":["the"],"map is":["to","a","forced,","forced,","forced,","forced,","forced,","that","that","a","still","to","with","a","a","more","the","better","evaluated","spine-strict"],"map isSpace":["$"],"map it":["over"],"map iteratively":["without"],"map itself,":["but","but"],"map key":["if"],"map keyify`":["-\u003e"],"map lines":["with"],"map looks":["like"],"map mapLetter":["in"],"map may":["be"],"map modificators":["and"],"map of":["the","all"],"map on":["line","ln"],"map or":["list"],"map over":["the","a","the","that"],"map proteinToRNA`.":["This"],"map readNucleotide`.":["In"],"map round":["--"],"map sanitize":["message"],"map so":["to","to"],"map square":["[1..64]","[1..64]`,"],"map than":["with"],"map that":["should","you","to:"],"map the":["letters","function","negative"],"map them":["to","to"],"map this":["is"],"map to":["a","sort","do","do","build"],"map to?":["I"],"map toLower":["isn't","b","a","x","are","w`","w.","in","word","word","anagram","word;","anagram","x","word1`","and","ws","xs```"],"map toLower)":["ys`.","w`","."],"map toLower)`":["or"],"map toLower`":["into","into","is","its","into","out","can","to","(backticks","and","=",":)","into"],"map toLower`.":["It",":)"],"map toLower```":["must"],"map toUpper":["txt`","string`","string`","onlyAlpha`,","s`","s","ws`"],"map transcribe`.":["The"],"map translate`":["would"],"map translate`.":["That's"],"map truncate":["..."],"map union":["to"],"map unless":["the"],"map until":["all","I"],"map vers":["with"],"map verse":["[b,","[from..to]`","$","[..]"],"map verse)":[".)","`compose2`",".)"],"map verse`":["I"],"map via":["a"],"map while":["iterating"],"map will":["be","have"],"map with":["a","its","its","a","your","function.","M.fromList..","less"],"map work":["like","like"],"map would":["be","be"],"map x":["back"],"map x`":["seems"],"map you":["may"],"map you're":["building"],"map's spine":["is"],"map) and":["a"],"map) but":["with"],"map) empty":["$"],"map, `any`":["and"],"map, and":["the","also"],"map, because":["it","it","it","it","it","it","it"],"map, but":["if","in","results"],"map, filter,":["takeWhile,","and"],"map, i.e.":["value","value"],"map, inserting":["into"],"map, it":["is","will","has","can"],"map, it's":["storing"],"map, not":["`Map"],"map, or":["did"],"map, than":["1"],"map, the":["version"],"map, then":["you"],"map, which":["is"],"map, you":["can","are","are","can"],"map. But":["I"],"map. Hopefully":["I"],"map. I":["could","try"],"map. I'll":["read"],"map. Is":["there"],"map. None":["of"],"map. Presumably":["this"],"map. So":["instead"],"map. The":["problem","`Map`"],"map. Unfortunately":["I"],"map. Using":["a"],"map. You":["could","can"],"map. `foldl`":["is"],"map/dictionary with":["chars"],"map/filter/zip/etc. rather":["than"],"map: from":["a"],"map; it'll":["shorten"],"map; there's":["a"],"map? Either":["with"],"mapFB (mapFB":["c","c"],"mapFB c":["(f.g)","(f.g)"],"mapFunc if":["you"],"mapLetter in":["the"],"mapLetter should":["be"],"mapM $":["fmap"],"mapM ::":["Monad"],"mapM randomRIO":["[char,","[a,","[letter,letter,num,","[leter,letter,digit,digit,digit]","[letter,letter,number,number,number]"],"mapM_ (void":["."],"mapMaybe is":["not"],"mapPairs =":["map"],"mapTupleSections =":["map"],"map` and":["`or","`fromListWith"],"map` can":["be"],"map` feels":["like"],"map` has":["exact"],"map` in":["`allSpace`"],"map` is":["basically","equivalent","equivalent"],"map` to":["`mapMaybe`"],"map`. I":["do"],"map`. The":["type"],"mapped over)":["instead"],"mapper function":["look"],"mapping (i,j)":["-\u003e"],"mapping and":["filtering"],"mapping argument":["application"],"mapping directly":["to"],"mapping each":["element"],"mapping from":["character"],"mapping function":["is","that"],"mapping function\"":["because"],"mapping of":["`verse`"],"mapping over":["values,","the"],"mapping that":["will"],"mapping to":["intermediate","some","a"],"mappings for":["the"],"mappings n":["="],"maps a":["lot","function","wrapped"],"maps and":["such,"],"maps are":["binary"],"maps as":["functions"],"maps every":["string"],"maps for":["some"],"maps if":["you"],"maps into":["words,","a"],"maps over":["the"],"maps that":["will"],"maps to":["make","the","6,","5,"],"maps together":["though"],"maps work.":["How"],"maps, sets,":["numbers)."],"maps. GHC":["defines"],"maps: `map":["(flip"],"margin, but":["for"],"marginal type":["safety,"],"marginally nicer":["to"],"marginally so":["since"],"marginally wordier":["solution"],"mark gets":["pulled"],"mark it":["done"],"mark the":["last"],"mark\" using":["`isSuffixOf`,"],"markdown quoting":["reasons)."],"markdown quoting)":["which"],"marked this":["as"],"marked with":["an"],"marking this":["done"],"markup but":["you"],"markup isn't":["working).","working)."],"masking the":["potential"],"massage your":["token"],"master checked":["out"],"master version":["prevents"],"match \"\"":["as"],"match Data.Char's":["`isPunctuation`"],"match `(first":[":"],"match `Bool`":["constructors),"],"match `_`":["being"],"match `isQuestion`":["and"],"match a":["certain"],"match against":["references","a","any","\"\","],"match any":["constructors"],"match anything":["without"],"match better,":["but"],"match but":["the"],"match everything":["you"],"match if":["you","you"],"match in":["a","nmany"],"match is":["different,"],"match off":["of"],"match on":["the","its","`[]`.","the","that","the","the","the","that","the","the"],"match over":["guards?"],"match some":["IO"],"match that":["will"],"match the":["first","Clojure","`:`","`[]`","constructor","constructor","type"],"match to":["make"],"match type":["`IORef'"],"match using":["`[]`"],"match your":["case."],"match(es) are":["non-exhaustive","non-exhaustive"],"match, another":["option"],"match, fall":["back"],"match. But":["```==```"],"match. I":["tried"],"match. If":["the"],"match. Otherwise,":["looks"],"matched up,":["not"],"matched. I":["suppose"],"matchers for":["`trimNum`."],"matches (instead":["of"],"matches all":["other"],"matches and":["not","add"],"matches are":["exhausted,"],"matches empty":["strings,"],"matches even":["if"],"matches for":["the"],"matches how":["RNA"],"matches in":["functions"],"matches non-exhaustive\"":["would"],"matches on":["the","`\"\"`,"],"matches or":["anything"],"matches the":["desired","order","problem","monadic"],"matches to":["do"],"matches, add":["`-Wall`"],"matches, maybe":["you"],"matching (in":["this"],"matching (some":["exceptions"],"matching --":["which"],"matching Last":["rather"],"matching `[]`":["is"],"matching against":["a","`('1':digits)`"],"matching all":["on"],"matching and":["should","haskell","a","case,","guards"],"matching are":["very"],"matching as":["suggested–thanks","here"],"matching becomes":["unwieldy"],"matching but":["not"],"matching case":["than"],"matching definition":["of"],"matching directly":["on","rather"],"matching for":["`transcribe`."],"matching in":["this","the","the","order","the"],"matching instead":["of","of","of","of"],"matching is":["used","preferred","not"],"matching it":["is"],"matching keeps":["it"],"matching list":["elements."],"matching looks":["like"],"matching makes":["this"],"matching might":["be"],"matching on":["`toRNA'`'s","lists","the","the","the"],"matching or":["using"],"matching over":["[guards](http://www.haskell.org/haskellwiki/Haskell_programming_tips#Guards)","[]"],"matching rather":["than"],"matching since":["I'm"],"matching sometimes":["feels"],"matching than":["guards."],"matching the":["valid","`School`","constructors"],"matching to":["cover","check"],"matching type":["signature."],"matching version":["would"],"matching version:":["it's"],"matching was":["not"],"matching with":["guards"],"matching works":["on"],"matching would":["be"],"matching, I":["think"],"matching, although":["I"],"matching, and":["is"],"matching, but":["this","loose"],"matching, decided":["to"],"matching, for":["example"],"matching, guards,":["and"],"matching, other":["languages"],"matching, which":["I"],"matching, with":["an"],"matching. Can":["I"],"matching. Definitely":["cleans"],"matching. In":["this"],"matching? It":["is"],"material enough":["to"],"material for":["whatever"],"materialized in":["order"],"materials you":["provided"],"math formulas":["to"],"math in":["general."],"math looks":["good"],"math only":["to"],"math rounding":["to"],"math to":["calculate","complete","calculate","accomplish","calculate","solve"],"math you":["can"],"math, without":["```sum```?","```sumsOfSquares```"],"mathematicians --":["they"],"maths behind":["it"],"maths is":["not"],"maths that":["simplifies"],"maths. Much":["nicer."],"matrices (e.g.":["numpy"],"matrices) but":["not"],"matrix for":["any"],"matrix in":["data"],"matrix is":["flattened"],"matrix layout,":["i.e."],"matrix of":["matches","size"],"matrix you":["could"],"matrix, this":["version"],"matrix, you":["are"],"matrix. I've":["briefly"],"matrix? The":["formula"],"matrixCells ::":["V.Vector"],"matrixCols ::":["Int"],"matrixRows ::":["Int"],"matter -":["or"],"matter `a'`":["only"],"matter but":["it"],"matter for":["a"],"matter here":["but"],"matter here,":["so"],"matter if":["the"],"matter in":["a","this"],"matter much":["whether","in","but"],"matter much,":["since"],"matter of":["principle","personal","taste.","replacing","taste!","taste","adding","language","taste.","personal","taste.","taste","preferences...","taste).","taste).","taste","taste.","taste","taste,","taste.","personal","personal","taste,","taste.","taste","preference.","personal","personal","personal","taste","taste","taste/style","taste","personal","taste"],"matter so":["much"],"matter the":["language."],"matter too":["much.","much"],"matter what":["I","the"],"matter whether":["you"],"matter\" comment":["because"],"matter), hlint":["would"],"matter*) will":["not"],"matter, but":["it"],"matter, is":["understandability"],"matter, that":["seemed"],"matter, why":["restrict"],"matter, yes,":["but"],"matter. However":["I"],"mattering, as":["opposed"],"matters a":["bit"],"matters for":["this"],"matters here":["much,"],"matters more":["fun"],"matters much":["for","more"],"matters that":["Data.Map"],"matters, but":["I"],"matters, can":["you"],"maxBound but":["that"],"maxBound is":["so"],"maxDay -":["6"],"maxDecimalValue` guard":["isn't"],"maxDecimalValue` is":["`n`"],"maxRomanValue):_ =":["valuePairs`"],"maxSuccess =":["100000"],"max` is":["equivalent"],"maximally readable":["this"],"maximum 15":["letters,"],"maximum performance":["alters"],"maximum, in":["an"],"may 1).":["generate"],"may achive":["with"],"may add":["a"],"may allow":["you"],"may also":["be","need","be","want","come"],"may apply":["to"],"may assume":["that","that"],"may avoid":["it"],"may be":["able","usefull","an","desirable","preferable","able","worth","a","a","interested","of","inefficient","useful","helpful","simplified.","usage","simplified","done","considered","better","a","nice","reordered","simplified","helpful","better","once","presented","presented","prettified,","reduced","helpful,","stubborn","a","less","better","nicer","nicer.","too","a","useful","merged","not","with","simplified","very","helpful.","an","eta","removed,","to","unevaluated","guarantee","helpful.","a","better","better","either","both","more","done","more","saved","more","extensions"],"may be:":["how"],"may better":["convey"],"may break":["line","values"],"may build":["score"],"may change":["it's"],"may choose":["to","any","either"],"may consider":["to"],"may create":["a"],"may define":["`complement`","a"],"may depend":["on"],"may do":["an","something","the","it","it"],"may drop":["isPuntuation"],"may eta-reduce":["'toRNA'"],"may even":["be","eliminate"],"may eventually":["be"],"may extract":["it"],"may fail":["unexpectedly"],"may feel":["natural"],"may find":["useful.","`unlines`","useful","`wordsBy`","`unlines`","`Data.Char.digitToInt`","a","Data.List.Split.wordsBy","Data.List.Split.wordsBy","Data.List.Split.wordsBy","Data.List.Split.wordsBy","useful:","Data.List.Split"],"may fix":["algorithm"],"may give":["the","a"],"may go":["through"],"may group":["helper","helper"],"may have":["a","only"],"may help":["simplify","you","you.","you"],"may import":["some"],"may indent":["guards"],"may introduce":["additional"],"may just":["be"],"may lead":["to","to","you","to","to"],"may like":["unwords","Data.IntMap","to","Data.IntMap","to","to","Data.List.Split.wordsBy","`Prelude.reads`","`unwords`"],"may look":["at"],"may make":["this","thing","code","solution"],"may map":["x"],"may never":["arrive.","complete"],"may not":["fulfil","be","be","be","be","be","be","matter","be","as","hold","want","agree)","be","search","matter"],"may notice":["that","that"],"may number":["of"],"may optimize":["guards"],"may or":["may"],"may overlap":["with"],"may process":["list"],"may produce":["a"],"may read":["poitfree","first","haddock"],"may reduce":["complexity"],"may refactor":["solution"],"may replace":["a"],"may require":["2-3"],"may rewrite":["anagramsFor","it"],"may run":["plain"],"may search":["in"],"may see":["BS/B"],"may simplify":["validNucleotide","arithmetic","some","code"],"may still":["not","be"],"may suggest":["using"],"may suite":["you"],"may take":["more","a","a"],"may think":["of"],"may try":["to","to","to","to","to","to"],"may use":["`unwords`","`filter","filter","map","desugared","`error","one","this","`any`","Applicative,","a","Functor","pure","`mapM`","pure","map","`reads`","data.map.strict.","less","facilities","ADT","`fromEnum`","`zipWith`","fromEnum","Data.IntMap","modifyTVar","`fromEnum`","only","a","only","only","`replicateM`","better","`randomRIO`","`mapM`","mapM,","list","left","`tails`","another","algo","alternative","it.","[n,n-1..m]"],"may useore":["advanced"],"may want":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","default","to","it","to","to","to","to","to","to","to"],"may well":["be"],"may work":["in","better","well"],"may write":["`Map`","filter","`zipDNA`","a","all"],"maybe Either":["String","PhoneError,"],"maybe HLint)":["complained"],"maybe I":["should","should","should","need"],"maybe I'll":["test","be"],"maybe I'm":["missing","missing"],"maybe []":["Set.toList"],"maybe `\"|123|":["456_7890\"`"],"maybe `Text.Printf`":["is"],"maybe `response`":["or"],"maybe `sorted`":["cannot"],"maybe a":["bit","spec","bit","simple"],"maybe better":["this"],"maybe even":["this","more"],"maybe extensible":["version"],"maybe for":["the"],"maybe from":["strict"],"maybe help":["you"],"maybe i":["will"],"maybe id`":["which"],"maybe is":["not"],"maybe it":["would","would","could","would","was"],"maybe it's":["faster","better"],"maybe just":["a","`anagram`","factored","embracing"],"maybe knowing":["what"],"maybe more":["conventionally,"],"maybe n":["(fromJust)"],"maybe not":["so"],"maybe one":["or"],"maybe only":["the"],"maybe other":["people"],"maybe others?)":["would"],"maybe see":["liking"],"maybe some":["more.."],"maybe someday":["in"],"maybe something":["along","like","like","like:"],"maybe that'd":["help."],"maybe that's":["just","just","just"],"maybe the":["`|","test","current"],"maybe then":["you"],"maybe there's":["a","a","a"],"maybe to":["return"],"maybe try":["using","wrapping"],"maybe use":["a"],"maybe value":["if"],"maybe version":["here,"],"maybe will":["I"],"maybe x":["id","id"],"maybe ya'll":["can"],"maybe you":["had","should","would","can","could","are","can","want"],"maybe you'll":["be","change"],"maybe you're":["right."],"maybe) instead":["of"],"maybe, at":["some"],"maybe, it's":["possible"],"maybe. I":["still"],"maybe?), but":["other"],"maybeInsert may":["be"],"maybeInsert z":["x"],"mb` is":["equivalent"],"mconcat $":["map"],"me (given":["the"],"me (so":["long"],"me -":["I'll"],"me ...":["at"],"me :)).":["Yes,"],"me ```unify```,":["```individual```,"],"me a":["few","better","minute","long","few","reminder","second","hint","while","good","little","bit,","while","great","few","while","list","long","second,","warning"],"me about":["the","this","it,","the"],"me an":["example?"],"me answer":["a"],"me anything),":["I'm"],"me as":["rather","`last"],"me because":["of"],"me better":["understand"],"me but":["I","I","I"],"me clean":["up"],"me considering":["that"],"me disinclined":["to"],"me disturbed":["that"],"me either.":["Thanks"],"me ensure":["that"],"me errors":["even"],"me exercise":["my"],"me feel":["better."],"me find":["some"],"me for":["writing"],"me from":["receiving","having"],"me give":["you"],"me greatly":["when"],"me having":["to"],"me here.":["The"],"me how":["I","this","to"],"me if":["two","I'm","I'm","I","I'm","I"],"me in":["the","reading","[iteration","the","the"],"me it":["looks"],"me know":["about","what","what","if","if","what","what","what","what","what","what","what","what","what","and","if","if"],"me like":["an","once"],"me little,":["especially"],"me make":["some"],"me more":["than","about"],"me move":["on"],"me much":["sadly"],"me not":["to"],"me now":["is"],"me now.":["Using"],"me of":["http://youtu.be/qEu1NYbhWuM?t=23m16s"],"me on":["that.","that","monad"],"me or":["does"],"me other":["than"],"me out!":[":-D"],"me out.":["Probably"],"me over":["the"],"me pause":["at"],"me pointers":["on"],"me pretty":["much"],"me quite":["a"],"me reach":["there."],"me right":["now."],"me rip":["it"],"me saying":["\"make"],"me since":["I'm"],"me so":["when"],"me some":["verbiage"],"me start":["that"],"me suspicious,":["is"],"me than":["creating"],"me that":["a","is","they","looks","it","their","would","isAnagram","a","it's","the","`null","numbers"],"me the":["80","hint","first","impression","more","most"],"me there":["is"],"me think":["that","about","a","if"],"me though":["so"],"me throwing":["`error`"],"me to":["see","look","express","the","eliminate","these","assimilate","import","get","say","read.","something","use","do","write","realize","make","fiddling","do","those","BST","see","use","test","line","reason"],"me towards":["the","it,","reusing"],"me try":["that","to"],"me understand":["why"],"me up":["on"],"me using":["2/4"],"me what":["`isEmpty`","the","the"],"me when":["the"],"me while":["I"],"me wonder":["if"],"me write":["`addWord`"],"me writing":["the"],"me you":["can"],"me! Accidental":["submit!"],"me! I":["certainly","actually"],"me! I'll":["adhere"],"me! In":["fact,"],"me! Rewritten":["using"],"me! You":["could"],"me) any":["added"],"me) some":["interesting"],"me). The":["fromListWith"],"me)... how":["would"],"me, I":["think.","meant"],"me, actually.":["I"],"me, although":["this","the"],"me, and":["I"],"me, but":["i","it's","then","`responseFor`","I'm","most"],"me, here's":["a"],"me, matching":["the"],"me, maybe":["other"],"me, meaning":["something"],"me, my":["solution"],"me, readability":["and"],"me, since":["the"],"me, so":["it's","much"],"me, the":["number","version"],"me, this":["process"],"me, though":["I","maybe"],"me, unless":["the"],"me, very":["straightforward"],"me, where":["`lowerCaseBottleText"],"me, you":["could"],"me. Any":["ideas?"],"me. Code":["looks"],"me. Could":["you"],"me. For":["readability,"],"me. However,":["I","I"],"me. I":["put","think","think","suppose","found"],"me. Kinda":["funky;"],"me. One":["thing","thing"],"me. Should":["I"],"me. Thank":["you"],"me. Thanks":["for"],"me. The":["only","only"],"me. What":["don't"],"me. You":["could've","might","might","might"],"me. i'll":["play"],"me. tiny":["thing:"],"me... but":["apparently","I"],"me:) and":["I'm"],"me? I":["do","think"],"mean 'increase'":["the"],"mean -":["the"],"mean Data.List.last,":["it's"],"mean `\\x":["-\u003e"],"mean ```all":["isUpper"],"mean `calculating`":["would"],"mean `comps`":["or"],"mean `foldl'`.":["Strict"],"mean `isSpace`":["in"],"mean `isUpper`":["or"],"mean about":["fmap.","Mk"],"mean anything.":["I"],"mean are":["lost"],"mean by":["\"Silly","using","making","\"equivalent\"","\"equivalent\"","that?","just","depends","you're","the","checking"],"mean copy":["the"],"mean duplication":["of"],"mean generalizing":["across"],"mean if":["a"],"mean it's":["better"],"mean like":["`map`","this?","this?"],"mean looking":["up"],"mean make":["isQuestion"],"mean my":["new"],"mean now":["regarding"],"mean now,":["Gaelan."],"mean of":["course"],"mean something":["else?","like","else"],"mean special":["case"],"mean that":["in","`responseFor`","`cleanUpInput=unwords","you","the","there","you","the","when"],"mean the":["exact","exact","same","other","`else`","second"],"mean though":["-"],"mean three":["recursive"],"mean to":["create","submit","sort","leave","submit"],"mean under":["\"alternative"],"mean using":["a","some"],"mean whenever":["we"],"mean without":["having","recursion?"],"mean, I'm":["trying"],"mean, `where`":["clause)."],"mean, essentially,":["this"],"mean, to":["look"],"mean. I":["still","need"],"mean. There":["would"],"mean... it":["is"],"mean: 1.127686":["s"],"mean: 1.276473":["us,"],"mean: 1.323841":["us,"],"mean: 10.10659":["us,"],"mean: 2.429012":["s"],"mean: 2056320":["-\u003e"],"mean: 7.146006":["us,"],"mean: 7.640108":["us,"],"mean: 7.980707":["us,"],"mean? Hmm,":["I'll"],"meaning `x`":["is"],"meaning and":["implementation"],"meaning for":["`toUpper`."],"meaning from":["the"],"meaning in":["pattern"],"meaning is":["strongly","the","not"],"meaning of":["the","isAnagram","the","a","its","the","the","various","which"],"meaning something":["like"],"meaning that":["the","the"],"meaning this":["information"],"meaning though":["(`appendNewline`"],"meaning will":["be"],"meaning with":["the"],"meaning, like":["\"original\""],"meaningful and":["made"],"meaningful as":["`isSuffixOf`"],"meaningful difference":["between"],"meaningful difference.":["Simple"],"meaningful factors":["are"],"meaningful in":["isolation,"],"meaningful name":["(`go`"],"meaningful name.":["Another"],"meaningful to":["describe"],"meaningful transaction":["and"],"meaningful way.":["I"],"meaningful, since":["it"],"means \"at":["least"],"means \"no":["successes\","],"means \"strict":["`f`\"."],"means 400":["years"],"means I":["have","will"],"means an":["invalid"],"means by":["\"function"],"means explicit":["recursion"],"means having":["a"],"means instead":["of"],"means is":["that","\"the"],"means it":["is"],"means it's":["looking"],"means more":["than"],"means nothing":["to"],"means nucleotide":["polymerase"],"means of":["converting","forcing"],"means parse":["failure)."],"means refactoring":["will"],"means that":["the","looking","it","`insertWithKey`'s","the","the","I","you've","if","you","it","you","user","daysInGigasecond","'s'","optimizer"],"means the":["string","same"],"means there":["has"],"means there's":["no"],"means this":["section","lazy"],"means to":["be","be"],"means we":["can"],"means you":["can","should"],"means you're":["stepping"],"means your":["Either"],"means, check":["out"],"means, in":["this"],"means. Are":["`:double`"],"means. For":["`allergies"],"means. It's":["not"],"meant `Map`.":["i"],"meant `words":["input`."],"meant by":["the","a","the"],"meant combinator":["`any`"],"meant eta":["reducing"],"meant exactly":["`map`."],"meant in":["this","the"],"meant inlining":["`invalidNucleotideError`"],"meant length,":["not"],"meant that":["you","you","removing"],"meant to":["add","run","properly","be","type","have"],"meant was":["that"],"meant you":["want"],"meant, I":["used"],"meant. There":["is"],"meant? I":["was"],"meanwhile https://github.com/NICTA/course":["that"],"measly 26":["entries)"],"measurable benefit":["to"],"measurable difference":["in"],"measurable performance":["regression."],"measurably slower":["than"],"measure `length`":["at"],"measure it":["with"],"measure once":["would"],"measure the":["length","total"],"measures the":["length"],"measuring `length":["xs"],"measuring a":["very"],"meat of":["the"],"mechanically do":["this"],"mechanically in":["this"],"mechanically perform":["this"],"mechanically, but":["only"],"mechanisms of":["blowing"],"meetup in":["a"],"meetupDay -":["thanks"],"meetupDay calculation":["with"],"meetupDay sched":["weekday"],"meetupDay scheduleEnum":["weekdayEnum"],"meetupDayIter weekday":["."],"meh. The":["upside"],"member and":["one"],"member of":["the","the"],"membership via":["a"],"memoising solution,":["but"],"memoization essentially":["for"],"memoization). Also":["it's"],"memoization). As":["data"],"memoize this":["to"],"memoized, although":["GHC"],"memorization but":["lets"],"memory (unless":["it"],"memory all":["at"],"memory allocation":["(although"],"memory and":["still","perform","much","take","O(N)","create","try"],"memory at":["the"],"memory boundaries":["(i.e."],"memory footprint":["on","and"],"memory for":["each","no"],"memory fragmentation":["(not"],"memory fragmentation.":["This"],"memory it":["uses"],"memory lookup":["on"],"memory performance":["that"],"memory than":["whatever","a","it","a","```O(max(length"],"memory to":["store","inner","keep","run."],"memory until":["it's","it's","it's"],"memory usage":["when","is","O(n)"],"memory usage.":["The"],"memory when":["there's"],"memory with":["sufficiently"],"memory –":["an"],"memory, half":["from"],"memory, however":["it's"],"memory, i.e.":["their"],"memory, its":["mutable"],"memory, or":["a"],"memory, there":["are"],"memory---at least":["it"],"memory. Does":["that"],"memory. However":["for"],"memory. Instead,":["you"],"mental model":["to"],"mentally parse":["out"],"mention he":["is"],"mention it":["since"],"mention of":["`toComparable`"],"mention that":["I","`(flip","between"],"mention to":["convert"],"mentioned `foldl'`":["before"],"mentioned `last`":["being"],"mentioned earlier":["it's"],"mentioned in":["the","the"],"mentioned it":["before","a","in"],"mentioned makes":["much"],"mentioned), consider":["using"],"mentioning here":["is","is"],"mentioning somewhere":["that"],"mentioning this":["the"],"mentions in":["the"],"mentions is":["to"],"mentor haha!":["Thanks"],"mercy to":["move"],"mere `(not":["."],"merely guessed":["the"],"merge that":["`toLower`"],"merge things":["together."],"merge two":["keys"],"merge/adjust/insertWith then":["you"],"merged into":["a"],"merged with":["zipWith:"],"merges by":["row"],"merging two":["lines."],"mersene random.":["And"],"mess :-)":["I"],"mess RNA":["with"],"mess as":["I'm"],"mess than":["necessary"],"mess up":["with"],"mess with":["the"],"mess. Which":["library"],"message &amp;&amp;":["all"],"message (`\"Madness,":["and"],"message (since":["it"],"message -":["just"],"message =":["last","any","foldl"],"message ==":["'?'","'?'\")"],"message ``":["from"],"message anything":["else."],"message consists":["of"],"message doesn't":["fit"],"message has":["not"],"message into":["complete"],"message is":["altered."],"message variable":["from"],"message when":["all"],"message will":["be"],"message ||":["all"],"message\" aren't":["necessary."],"message) &amp;&amp;":["(not"],"message) \u003e":["0`"],"message)` doesn't":["look"],"message)` for":["the"],"message, or":["just"],"message. Is":["there"],"messageResponse .":["messageType"],"messageResponse, but":["only"],"messageResponse. I":["had"],"messageType without":["my"],"message` =":["`all"],"message` and":["the"],"message` are":["not"],"message` is":["True."],"message` since":["`all"],"message`. Which":["is"],"messages, will":["fix."],"messed around":["and"],"messier I":["feel"],"messier than":["I"],"messy as":["it"],"messy to":["me,"],"messy. I":["couldn't"],"metadata about":["the"],"method `isSpace`":["do"],"method and":["later"],"method could":["be"],"method doesn't":["lead"],"method gave":["you"],"method gets":["ugly..."],"method is":["not","clearly"],"method it":["may"],"method like":["`map`."],"method mentioned":["in"],"method of":["isIndifferent?"],"method or":["Pretty"],"method signature":["will"],"method such":["as","as"],"method that":["combined","replacing"],"method very":["much,"],"method with":["(,1).","their"],"method you":["spoke"],"method, `fmap`,":["which"],"method, right?":["I"],"method, which":["behaves"],"method, you":["could"],"methods (in":["other"],"methods -":["getC,"],"methods I'm":["not"],"methods as":["```public```"],"methods by":["signature"],"methods for":["inspecting"],"methods in":["```Data.Char```","Haskell?","that"],"methods like":["allWhitespace?","`addGregorianMonthsClip`"],"methods that":["would"],"methods to":["build"],"methods which":["are"],"methods. Also,":["the"],"metric of":["code"],"metric, is":["there"],"me… but":["other"],"mfilter (==":["'?')"],"micro-benchmarked the":["explicit"],"middle ground?":["Good"],"middle of":["operation"],"might also":["be","try","be","replace","want","look","define","consider","like","make","find","see","reason","consider","be"],"might as":["well"],"might be":["nice","preferable","more","a","nice","recomputed","cleaner","interesting","cleaner","clearer","a","a","a","more","a","able","a","more","beneficial","right","a","more","nice","a","a","easier","better","useful.","more","possible","a","a","clearer","a","nice","a","a","defined","also","good","clearer","a","a","a","a","able","another","useful","possible","better","better","better","a","able","better","nice","nice","a","a","a","better","easy","possible","buggy","a","better,","a","useful","worthwhile","worthwhile","ok","needed","appropriate","wrong,","wrong","easier","nicer.","nice","useful,","to","more","slightly","because","a","an","being","a","a","(at","nicer","a","a","a","veering","marginally","able","because","a","more","nicer","better?","desirable","good","useful:","able","an","something","a","better","able","helpful.","useful","called","a","more","worth","preferable","a","optimized","easier.","a","a","useful:","a","written","better","because","a","useful","useful","a","more","to","a","a","an","less","a","an","a","better","a","able","worth","right","wise","nice","happening?","worth","worth","a"],"might be,":["for"],"might be.":[";P"],"might benefit":["from"],"might cause":["surprising"],"might come":["in","in"],"might consider":["looking","it,","moving","factoring","using","using","renaming","using","renaming","removing","leaving","using"],"might crash,":["since"],"might create":["an"],"might deadlock":["in"],"might depend":["on"],"might do":["that","that:"],"might end":["up"],"might even":["end"],"might explicitly":["import","export"],"might express":["each","it"],"might find":["this","it","it","`TVar`","that","that","nicer"],"might fit":["better.","better"],"might get":["moved","rid","a","rid"],"might go":["improve"],"might have":["some","gone","a","been","a","a","made","gone","is","to"],"might help":["to","here","you","shorten","some","you","me","make","to","to"],"might inline":["transcribe"],"might it":["possible"],"might just":["use","have","be"],"might let":["through"],"might like":["to","to","to","to","to"],"might like,":["`pred`"],"might look":["like:","a","something","a"],"might lose":["quite"],"might make":["more","the","the","this","the","this","use","sense","the","this","you","more","a","things","sense"],"might miss":["some"],"might move":["the","on"],"might need":["another","to","a"],"might not":["be","be","have","be","make","be","be","happen","be","have","happen","be","be"],"might notice":["that"],"might perform":["faster?"],"might prefer":["to","it"],"might read":["more"],"might reevaluate":["my"],"might refactor":["it"],"might replace":["the"],"might represent":["a"],"might run":["on","into,"],"might save":["you"],"might say":["-","(i"],"might see":["followed"],"might show":["little"],"might simplify":["things."],"might suggest":["more"],"might take":["some","up"],"might try":["to","to","it","to","to"],"might typically":["done"],"might use":["`any`","concat","`exercism","to"],"might want":["to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","to","`isDigit`","to","to","to","to","to","to","here,","it","to","to","to","to","to","to","to","to","to","to","to"],"might work":["well"],"might write":["`wordCount`","`(not"],"might've written":["dnaToRna"],"mild extension":["compared"],"mildly) hacky":["way"],"mile to":["explain"],"million @walker,":["needless"],"million moves)":["has"],"million words,":["you're"],"million words.":["Actually,"],"millions of":["concurrent"],"min or":["once"],"minBound ..":["maxBound"],"minBound` could":["be"],"minBound` is":["usually"],"minBound` or":["`[minBound"],"mind --":["do"],"mind =":["blown"],"mind I":["would"],"mind I'd":["have"],"mind a":["bit.","little"],"mind adding":["`{-#"],"mind and":["if","the"],"mind around":["it"],"mind at":["a"],"mind elaborating":["some,"],"mind explaining":["what"],"mind hearing":["about"],"mind however":["that"],"mind is":["blown"],"mind it.":["If"],"mind taking":["a"],"mind that":["only","it"],"mind the":["usage","`read`"],"mind to":["use"],"mind using":["that."],"mind was,":["that"],"mind when":["you"],"mind. I":["completely"],"mind; a":["cute"],"mine I":["just"],"mine TurnLeft,":["TurnRight."],"mine but":["there"],"mine in":["comparison"],"mine is":["much"],"mine it":["would"],"mine looks":["like:","like,"],"mine where":["I"],"mine without":["`transpose`"],"mine, in":["which"],"mine, is":["that"],"mine, which":["I"],"mine. I":["didn't","would've"],"mine. I'm":["just"],"mine. Nothing":["to"],"mine? First":["I'm"],"mini-projects in":["themselves."],"minimal approach...":["Any"],"minimal char":["in"],"minimal cost":["in"],"minimal example.":["The"],"minimal public":["API"],"minimal version":["(I'd"],"minimally for":["more"],"minimize the":["effect"],"minimize using":["syntactic"],"minimum, what":["is"],"minor and":["very"],"minor but":["it"],"minor improvements":["`where"],"minor issue.":["Should"],"minor nitpick.":["Question"],"minor nitpick:":["I"],"minor nits":["though,"],"minor refinement":["at"],"minor style":["nits","nit","issues"],"minor stylistic":["quibble,"],"minor things":["qualified?"],"minor though,":["since"],"minor whitespace":["thing."],"minor, mostly":["related"],"minor: consider":["using"],"minority that":["think"],"minute to":["work"],"misclassifies a":["test"],"misconceptions when":["skimming"],"misinterpreted your":["points"],"misleading name":["since"],"misleading, it":["doesn't"],"mismatch errors.":["At"],"misnomer. i":["expected"],"misread that":["as"],"miss anything":["else."],"miss it":[":)"],"miss one":["at"],"miss some":["cases."],"miss that":["opportunity"],"miss that!":["Thanks"],"miss, although":["looking"],"missed a":["real","type"],"missed an":["idea,"],"missed on":["my"],"missed something":["because"],"missed that":["you're","in",":-)"],"missed that.":["Thanks.","Thanks!"],"missed the":["point","point","unconstrained","task."],"missed this":["before,","last"],"missed to":["change"],"missing TypeConstructor":["it"],"missing a":["type","type","better","type"],"missing anything,":["you"],"missing cases":["in"],"missing for":["`isShout`"],"missing here":["is","is","is"],"missing out":["on"],"missing required":["'and'"],"missing some":["part","case."],"missing something":["else","in","but","here.","but"],"missing something.":["I'll","At"],"missing something?":["This",":p","Thanks"],"missing space":["it"],"missing type":["signatures","signatures."],"missing, which":["is"],"missingh\" should":["do"],"missingh) -":["it"],"missleading especially":["when"],"misspelled but":["most"],"misspelled the":["name"],"misspelling has":["been"],"mistake :)":["yes"],"mistake of":["planning"],"mistake, and":["I"],"mistake: takes":["up"],"mistaken -":["I"],"mistaken, a":["set"],"mistakes implementing":["this"],"mistakes; this":["time"],"misunderstanding of":["requirements"],"misunderstanding something":["in"],"misunderstanding something,":["`fromAscListWith`"],"misunderstanding the":["difference"],"misunderstood the":["directions"],"misunderstood your":["comment."],"misunderstood, I":["thought"],"misuse `randomRs`":["a"],"misuse them,":["sorry"],"mix cases":["and"],"mix monadic":["and"],"mix of":["overloading","efficiency"],"mix the":["translate"],"mixed up":["there.","quite"],"mixing UI":["and","and"],"mixing of":["functionality"],"mixtures of":["ands"],"mkDate $":["case"],"mkRobot ::":["IO","IO","IO"],"mkRobot =":["Robot","undefined"],"mkRobot as":["oneliner"],"mkRobot become":["one"],"mkRobot, and":["the"],"mkRobot, inside":["that"],"mobile right":["now,"],"mod (":["x"],"mod 4.":["This"],"mod b":["a"],"mod n`":["into"],"mod separately":["to"],"mod100 is":["redundant."],"mod100, so":["in"],"mod4 and":["century"],"mod4 means":["more"],"mod400 implies":["mod100,"],"mod400` mod100":["is"],"mode cleanly.":["Thanks!"],"mode does":["for"],"mode of":["trying"],"mode that'll":["take"],"model I":["*HIGHLY*"],"model and":["strictness,"],"model implementation":["except","at"],"model implementation,":["I"],"model is":["in","in","the"],"model that":["I've"],"model to":["use.","help"],"model. If":["this"],"models into":["separate"],"moderately inflated":["by","by"],"moderately more":["interesting."],"modern Haskell":["uses"],"modern compilers":["do"],"modern computers":["has"],"modern uses.":["The"],"modern variant":["of","of"],"modes for":["that"],"modification to":["remove"],"modificators and":["builders"],"modified (and":["has"],"modified ```nucleotideCounts```":["as"],"modified it.":["It"],"modified or":["extended."],"modified textual":["data"],"modified the":["type","abbreviation"],"modified them":["both."],"modified to":["include"],"modified version":["of","of"],"modified, like":["a"],"modify `Bearing`":["data"],"modify `toRNA`":["accordingly."],"modify later":["since"],"modify my":["code."],"modify the":["State","input","School."],"modify this":["solution"],"modify/debug it,":["I"],"modifyMVar ba":["(return"],"modifyMVar in":["first"],"modifyTVar to":["make"],"modifyTheAcc \u003e\u003e":["readTheAcc`."],"modifying it":["makes"],"modular arithmetic":["(and"],"modularity ...etc.":["But"],"modularity. I":["could"],"module (`scoreLetter`,":["`scoreWord`"],"module (although":["you'll"],"module (as":["you"],"module (e.g.":["`module"],"module (just":["now"],"module Anagram":["(anagramsFor)"],"module Bob":["(responseFor)"],"module DNA":["(toRNA)","(hammingDistance)","(hammingDistance)","(count,"],"module Foo.Errors.":["This"],"module I'm":["defining,"],"module Scrabble":["(scoreLetter,"],"module WordCount":["(wordCount)"],"module `Data.List.Split`,":["this"],"module after":["testing"],"module and":["have","explicitly","explicitly","all","if"],"module are":["safe","exported"],"module as":["it","I've"],"module be":["considered"],"module begins":["with"],"module boundary":["that"],"module contained":["anything"],"module contains":["an","some"],"module declaration":["into","should"],"module declaration.":["You"],"module definition":["looks","should"],"module definition,":["`nucleotideToRNA`"],"module doesn't":["explicitly"],"module ensure":["that"],"module explicitly":["exported","exports"],"module exports,":["which"],"module from":["the"],"module gets":["a"],"module has":["all","an"],"module imports,":["but"],"module in":["the","this"],"module instead":["of"],"module interface.":["Something"],"module internal":["to"],"module is":["actually","included","preferred","required.","using"],"module it":["doesn't"],"module less":["clear."],"module level)":["`transform`"],"module makes":["the"],"module might":["make"],"module name":["when"],"module name)":["just"],"module now":["thanks"],"module plus":["you"],"module qualified.":["The"],"module really,":["will"],"module requires":["strings"],"module should":["explicitly","have","explicitly","explicitly","explicitly","explicitly","explicitly","export","export"],"module shouldn't":["be"],"module size":["stays"],"module statement":["to"],"module statement,":["everything"],"module to":["use","use"],"module too,":["try"],"module was":["bogus."],"module wide":["open"],"module will":["have"],"module would":["be"],"module\" when":["I"],"module) need":["a"],"module) should":["always"],"module, and":["it","thus","thus","thus","as"],"module, as":["it"],"module, but":["qualified.","the"],"module, e.g.":["`module","`module"],"module, forcing":["other"],"module, in":["this"],"module, into":["a"],"module, it's":["still"],"module, no,":["and"],"module, otherwise":["all_caps","all_caps"],"module, since":["you"],"module, so":["you","take"],"module, the":["other"],"module, you":["can"],"module-internal functions":["is"],"module. For":["example"],"module. Haskell":["does"],"module. I":["tried"],"module. In":["this"],"module. Right":["now"],"module. They":["do"],"module. You":["probably","should"],"module. `areaCode`":["is"],"modules (although":["that"],"modules (including":["`Data.List.Split`)"],"modules (or":["use"],"modules I":["imported"],"modules and/or":["use"],"modules by":["default?"],"modules just":["those"],"modules like":["`Data.Char`."],"modules loaded:":["WordCount.","Main."],"modules or":["use"],"modules qualified":["as"],"modules that":["depend"],"modules to":["use","break"],"modules use":["the"],"modules using":["either"],"modules with":["very"],"modules, and":["have"],"modules, meaning":["that"],"modules, or":["use"],"modules, this":["is"],"modules, which":["didn't"],"molecular biology.":["I"],"moment I":["write"],"moment is":["how"],"moment to":["upgrade"],"moment you're":["exporting"],"moment, it":["all"],"monad (`\u003e\u003e=`":["in"],"monad (last":["approach)"],"monad (or":["just"],"monad (yay,":["my"],"monad -":["every"],"monad :)":["Thanks!"],"monad `m`.":["This"],"monad also":["provides"],"monad and":["mutation","don't","applicative,"],"monad application":["with"],"monad as":["`Either`."],"monad associativity":["(once)","again:"],"monad because":["I"],"monad but":["the","the"],"monad comprehensions":["are"],"monad exercise.":["The"],"monad fits":["there."],"monad idea,":["and"],"monad instead,":["or"],"monad is":["`concatMap`).","another"],"monad isn't":["part"],"monad it":["looks"],"monad makes":["things"],"monad or":["use"],"monad part":["of"],"monad question?":["In"],"monad to":["do"],"monad transformers.":["[Guard"],"monad works":["like"],"monad) is":["pure"],"monad). Even":["`unsafePerformIO`"],"monad, also":["ransoms"],"monad, and":["it's","listen"],"monad, but":["you","you"],"monad, etc.).":["Well,"],"monad, including":["`Either`."],"monad. Normally":["this"],"monad/functor involved.":["`acct`"],"monadic `return`.":["In"],"monadic and":["applicative","applicative"],"monadic bind":["use-case"],"monads and":["Haskell","functors"],"monads are":["best"],"monads before":["coming"],"monads go":["off"],"monads to":["break"],"monads yet,":["so"],"monads) but":["was"],"monads, and":["also"],"monads, applicative":["functors,"],"monads. Using":["`all`"],"monads/functors could":["be"],"monday, and":["my"],"money on":["it."],"money silently":["disappear..."],"monoid definition":["especially"],"monoid definition.":["I"],"monoid so":["you"],"monoid thing":["seems"],"monoid) might":["be"],"monoids so":["I"],"monoids that":["I"],"monoids, applicatives,":["and"],"monolithic (term":["by"],"monolithic and":["forces"],"monolithic function":["so"],"monolithic there":["is"],"monolithic. Have":["you"],"monolitic function":["(once"],"monospace font":["(Monaco),"],"month $":["case"],"month (let's":["call"],"month -":["6"],"month =":["fromGregorian"],"month is":["`n"],"month with":["only"],"month, but":["it's"],"month, the":["teenth"],"monthStart… perhaps":["in"],"more \"correct\".":["Sorry,"],"more \"mathy\".":["This"],"more \"obviously":["correct\""],"more \"programmy\"":["by"],"more 'things'":["being"],"more 'write":["out'"],"more (particularly":["with"],"more Haskell-like":["with"],"more Haskelly":["way"],"more `resetName`s":["have"],"more a":["play","matter"],"more about":["what","the","monads,","pragmas,","what's","point-free","thunks!","Arrows","the","strictness","this","how","how"],"more abstractions":["and"],"more acceptable.":["In"],"more advanced":["problems...","techniques","Haskell","features","stuff"],"more aesthetically":["pleasing,"],"more along":["the"],"more an":["artifact","additional"],"more and":["more","look"],"more appropriate":["than","since","than","signature"],"more appropriate?":["It"],"more arguments":["the"],"more attention":["to"],"more available":["horizontal"],"more basic":["(and"],"more better":["way"],"more blank":["characters"],"more boilerplate":["than"],"more bottles":["of","of","of"],"more bottles\"":["instead","in"],"more bottles\".":["Do"],"more but":["you"],"more can":["be"],"more cases":["syntactically"],"more chances":["to"],"more change:":["eta-reduced"],"more characters":["(but","are","to"],"more clean":["and","code","or","and"],"more clear":["than","and","than","at","why","why","why","why","to","than","in","that","than","as","to","and","in","a"],"more clear,":["personally."],"more clear.":["Also","I","The"],"more clearer.":["Now"],"more clearly":["a","that","as","than","expressed","if","expressed"],"more clever":["than","than","in"],"more closely":["I","internally.","at","and","resembles","with","to"],"more closely!":["Thank"],"more closely,":["as"],"more code":["and","(in"],"more common":["to","style","for","to","solution","solution","to","to","because","to","to","to","to","to","to","to","and","to","to","to","to","to","in","to","in","to","to","to","to","in","in","to","to","is","than","form,","in"],"more common.":["Nothing","You","2)."],"more commonly":["used,","written","just","written","written","written","written","used","written","used","used","used"],"more compact":["and/or","when","way"],"more complex":["IMO.","and","looking","since","(`fromString`,","will","than"],"more complicated":["than","than","than","than","projects","than","than","for","and","custom","(and","to","than","than","than"],"more complicated,":["and"],"more complicated.":["I'm","Of"],"more compositional":["code."],"more compositionally":["oriented,"],"more computational":["resources"],"more concise":["if","than","you","(although","yet","way","and","and","way"],"more concise.":["Thanks"],"more concisely":["split","as","(without","as","using"],"more concisely,":["so"],"more concision":["to"],"more concision,":["and"],"more condition":["and"],"more conditionals,":["I"],"more consistent":["with"],"more conventional":["for","way"],"more conventionally,":["`unSchool`)."],"more correct":["solution.","if"],"more cute":["way,"],"more data-driven":["approach"],"more declarative":["than"],"more definition":["for"],"more descriptive":["variable","than","name","name?","name"],"more detail":["in","with"],"more details.":["`fromListWith`"],"more difficult":["to","to","concepts"],"more difficult.":["Also"],"more difficulties":["to"],"more direct":["than","methods."],"more directly":["but"],"more easily":["deduced.","if","with","using","do","using","extensible","as","with"],"more effective":["would"],"more efficiency":["you"],"more efficient":["that","`isAnagram`.","and","`isSuffixOf`","to","that","that","than","than","than","since","to","since","than","and","by","implementation","as","is","way","way","than","lookup.","than","to","if","than","in","string","`Char","since","due","than","solutions","method","than","if","but","way","than"],"more efficient,":["foldr","perhaps."],"more efficient;":["basically"],"more efficiently":["without","with","using","using","using","with","in","(fewer","leveraging","with",":)"],"more elegant":["than","way.","way","with","choice","way","code.","way","way.","ways","(arguably).","way","way","solution","test","way","solution","way"],"more elegant,":["but"],"more elegant.":["advance","You"],"more elegantly":["than","expressed"],"more elegantly,":["especially"],"more exactly":["in"],"more exactly,":["cubed)"],"more expensive":["an","than","than","than"],"more experienced":["user"],"more explicative":["names,"],"more explicit":["with","and",":)","as","state","(a","about"],"more explicit,":["by"],"more explicitly":["optimized","`[minBound..maxBound]`."],"more explicitly.":["Thanks"],"more expressive":["to","with"],"more extensible":["if"],"more factors":["past"],"more familiar":["with","with","with","with","in"],"more feedback":["on"],"more free":["Haskell"],"more from":["that"],"more fun":["consider",":)"],"more functional":["approach","patterns."],"more functions":["in"],"more future-proof":["or"],"more future-proof,":["if"],"more general":["Data.Char","(won't","than","purpose"],"more generally":["(any"],"more generic":["as","functions,","and"],"more generic,":["I.e."],"more generically":["with"],"more grammatical,":["but"],"more grammatical:":["\u003ccode\u003e(\"?\""],"more guard":["clauses."],"more guards":["on","instead"],"more hand-holding":["to"],"more idiomatic":["-","than","to","to","to","Haskell","to","to","'go'","than","Haskell.","to","to","(see"],"more idiomatic,":["but"],"more idiomatic.":["I"],"more if":["I"],"more import":["from"],"more in":["the"],"more inclined":["towards"],"more inefficient":["than"],"more info":["on"],"more information":["on","about","about","about","to","on","on","on","about","on","on","on","about","on","about","about","on"],"more information.":["In"],"more interesting":["in","exercises",":","than"],"more interesting,":["because"],"more intermediate":["structures"],"more intuition":["on"],"more involved":["(such"],"more liberally":["in"],"more like":["`map","silence?","your","`map","an","`maybe","control","O(1)","this:"],"more likely":["to","inside"],"more lines":["here"],"more maintainable":["because"],"more manual":["approach."],"more memory":["than","than","than","than"],"more naive).":["If"],"more named":["bindings"],"more natural":["to","to","way:","than","to"],"more natural.":["The"],"more naturally,":["unless"],"more neatly":["as"],"more nicely":["written","formatted:",":)","and"],"more nitpicks":["from"],"more non-trivial":["example)."],"more obscure":["solution."],"more obscure,":["but"],"more obvious":["for","than","what","in","than","to","to"],"more obvious,":["and","like","and","and"],"more obvious.":["It"],"more of":["a","an","an","a","a","these","an","a","code...","verse"],"more often":["than","see","than","used"],"more on":["that."],"more optimal":["solution"],"more optimal,":["of"],"more optimisations,":["and"],"more optimizations":["available","without"],"more optimized":["and","(for","implementation","code.","version"],"more or":["less","less","less","less","less","less","less"],"more packed":["in"],"more parameter":["than"],"more parentheses":["you"],"more parentheses,":["and"],"more pattern":["matches"],"more patterns":["as"],"more performance,":["but"],"more performant":["than","if","way","since","(or","methods","still","is","version","(at"],"more permissible":["and"],"more pleasant":["to"],"more point-free":["style,"],"more powerful":["than"],"more powerful.":["However,"],"more practical":["to"],"more practical)":["libraries."],"more precisely":["`[b,"],"more preferred":["than"],"more programatic,":["though"],"more ram":["than"],"more readability":["then"],"more readable":["per","but","that","in","by","by","than","to","(in","than","to","once","way","in","and","yet.","though).","than","way.","or","than","than","when","idiom","because","and","and","to","that","at"],"more readable,":["by","also","but"],"more readable.":["Thanks","Anything","I",":)","I'm","But","And","In"],"more readable?":["I"],"more reading":["and","before"],"more reasonable":["to"],"more related":["to"],"more relevant":["and"],"more reusable,":["you"],"more robust":["and","and","way","solution","IORef"],"more robust,":["please"],"more room":["for"],"more safe":["as"],"more sane":["than","pattern"],"more searching":["to"],"more self-documenting":["this"],"more semantic":["naming,","names,","names."],"more semantic?":["You"],"more sense":["than","to","to","for","to","to","to","if","because","there,"],"more sensible":["functional","order.","to"],"more sensical":["names."],"more serious":["worry"],"more severe":["than"],"more simple":["way",":).","and"],"more simpler":["check"],"more simply":["by","defined","with","using","without","in","using","using","in","using","as","using","because","without","with","with"],"more simply,":["take"],"more simply.":["Consider","It"],"more slick,":["use"],"more so":["when"],"more so?":["Also,"],"more sophisticated":["and"],"more sophisticated.":[";P"],"more space":["than","than","than","than","than","in","than","than"],"more spaces":["in"],"more specific":["and","on","than","hint.","information","was"],"more straightforward":["to","implementation","than","to"],"more students":["in"],"more subjective":["if"],"more subjective:":["consider"],"more substantial":["this"],"more subtle":["non-strictness"],"more subtle,":["one"],"more succinct":["`(,1)`,","than","to","way","and","implementation","solution"],"more succinctly.":["You"],"more suggestively,":["`(a"],"more test":["cases"],"more testcases":["to"],"more than":["one","one","one","once,","just","hinder.","one","2","one","once.","2","the","one","`MVar`s,","a","one","one","mine,","one","once.","once.","you","`maxBound","it","`maxBound","one","one","1","one","11","once","one","the","one","one","once.","a","that","just","`filter","once,","once","one","just","one","one","one"],"more thasks":["here"],"more that":["you"],"more the":["convention"],"more things":["you","from"],"more things.":["The"],"more tightly":["than"],"more time":["looking"],"more times":["than"],"more to":["say,","make","it","learn","do","it","it","it"],"more traditional":["imperative"],"more transparent":["than"],"more trouble":["than"],"more try":["checking"],"more typical":["for"],"more typically":["written"],"more understandable,":["at"],"more verbose":["than","to","..."],"more verbose,":["and"],"more version":["up."],"more way":["-"],"more whitespace":["and","(newlines),"],"more why":["it"],"more with":["parallelism","them.","```add```,"],"more without":["the"],"more words":["function"],"more wordy":["implementations"],"more work":["for"],"more\", but":["it"],"more, 99":["bottles"],"more, I":["think"],"more, as":["you"],"more, but":["I"],"more. (Just":["try"],"more. ;)":["I'm"],"more. But":["that"],"more. Not":["sure"],"more.. elegant":["manner."],"more: ```allSpace":["x"],"more?) ```Char```s":["can"],"moreover it":["work"],"moreover this":["list"],"morning to":["see"],"most Bob's":["I"],"most Haskell":["developers","programmers","code","developers","developers","code.","developers","developers","developers","developers","developers","code","code","code","code","developers"],"most Haskell-y":["way"],"most about":["this"],"most appropriate":["as"],"most beginners,":["the"],"most cases":["I","where"],"most cases).":["So"],"most cases,":["but","IMO"],"most certainly":["used"],"most cleanly":["translated"],"most clearly":["expresses"],"most common":["thing"],"most commonly":["used"],"most correct":["decision"],"most developers":["would"],"most don't":["have"],"most efficient":["way","and","solution","thing"],"most efficient.":["Would"],"most elegant":["approach"],"most elegant,":["but"],"most general":["instances"],"most general.":["Line"],"most helpful":["to"],"most important":["or","to"],"most importantly":["to"],"most importantly,":["try"],"most instances":["of"],"most interesting":["exercise."],"most introductory":["material"],"most liberal":["possible"],"most likely":["I'll"],"most numerics":["libraries"],"most of":["the","the","the","the","them","the","the","the","the","the","this,","which","these","http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html","the","these","the","the","the","this","the","these","them","the"],"most often":["except"],"most once":["regardless","per","per","on","the","per","per","per","per","per","per"],"most once,":["although","but","you"],"most once.":["GHC's","The","Reading","You're","GHC","Most","Many"],"most once?":["In"],"most other":["instances","programming"],"most part":["the","but"],"most people":["would","would","only","would","would","they"],"most performant":["code,"],"most performant,":["but"],"most pragmatic":["and"],"most questionable":["thing"],"most readable":["solution."],"most readable.":["I'd"],"most real":["Haskell"],"most recent":["Haskell"],"most relevant":["declarations"],"most significant,":["which"],"most simply":["you'd"],"most solutions":["to","to"],"most specific":["to"],"most straightforward":["rather","way"],"most style":["guides"],"most succinct":["way"],"most time":["with"],"most two":["elements","neighbors"],"most uncertain":["about"],"most unsafeCoerce":["in"],"most useful":["here."],"most verbose":["then"],"most visible":["spot"],"mostly GHC":["specific."],"mostly accurate":["information!"],"mostly as-is":["approach,"],"mostly follows":["the"],"mostly for":["documentation","parity","knot"],"mostly good,":["but"],"mostly is":["that"],"mostly just":["converted"],"mostly layout.":["Here's"],"mostly related":["to"],"mostly subjective":["style"],"mostly to":["decide","see"],"mostly used":["mostly"],"move `(show":["=\u003c\u003c)`"],"move ```filter":["(not"],"move ``toUpper```in:":["```scoreLetter"],"move `isAnagram`":["up"],"move all":["three","of"],"move around":["would"],"move case":["planet"],"move filter":["isAlpha"],"move in":["on"],"move into":["local"],"move it":["into","to"],"move local":["helper"],"move on":["to","to","to","to","and"],"move on!":["thanks"],"move on,":["I"],"move out":["into"],"move sing":["to"],"move that":["`map"],"move the":["isSilence","`is*`","sort","*if*","string","case","sort","`show`","`getBalance`"],"move them":["outside"],"move these":["into"],"move things":["around"],"move your":["helper","predicate","third"],"moved ```do```s":["to"],"moved all":["of"],"moved by":["GC,"],"moved into":["the"],"moved it":["into"],"moved on":["now,","but"],"moved on,":["but"],"moved out":["of"],"moved the":["type","equality","trimNum","helper","lambda","default"],"moved your":["guard"],"moves :-).":["Swings"],"moves to":["the"],"moves where":["the"],"moves) has":["gone"],"movie \"Star":["War\""],"moving `T.stripStart`":["into"],"moving `normalize`":["outside"],"moving it":["to"],"moving left,":["double"],"moving onto":["the"],"moving some":["of"],"moving the":["predicates","short","guard","`normalise`","guards"],"moving to":["more"],"ms. Looks":["a"],"msString \"\\\"this":["one\\\"","one\\\""],"msg =":["\"Fine.","\"Woah,"],"msg ==":["msg","'?'"],"msg size":["gives"],"msg) ==":["msg"],"msg)`. In":["other"],"much (repetitive)":["pattern"],"much --":["its"],"much I":["like"],"much a":["type","Haskell","plain","matter","no-op,"],"much about":["it's","the","why","applying","it"],"much advantage":["since","to"],"much again":["for"],"much all":["the","my"],"much always":["a","better."],"much and":["would"],"much any":["language.","other"],"much appreciated":[":)"],"much as":["this","I","possible"],"much benefit":["to"],"much better":["solution.","that","for","and","to","looking.","explanation","to","to","than","way","way","separation","algorithmically","algorithm","when","performance","with","with","to","time","to","my","now."],"much better,":["smallish","I"],"much better.":["Better","I","New","Is","Sometimes"],"much bottles,":["I"],"much braces,":["try"],"much but":["on"],"much by":["using","using"],"much chance":["of","of"],"much cheaper":["to","and","than"],"much cleaner":["there.","if","to","now."],"much cleaner,":["thanks!"],"much clearer":["to","and"],"much code":["(e.g."],"much code,":["and"],"much code.":["You"],"much coding":["overhead,"],"much comments":["about"],"much copied,":["the"],"much data,":["especially"],"much definitively":["is)"],"much different":["from"],"much disadvantage).":["The"],"much dislike":["using"],"much earlier":["exercise?"],"much easier":["to","to","to","to","time","way","to","than","way"],"much effort":["into"],"much else,":["save"],"much faster":["than",":)","to"],"much faster,":["which"],"much faster.":["You","Additionally","This"],"much flips.":[";)"],"much fond":["of"],"much for":["the","the","taking","your","the","the","looking"],"much fun":["though"],"much further":["I"],"much going":["on"],"much happier":["with"],"much hardcoding,":["can"],"much here)":["you'll"],"much here,":["it's","a"],"much horizontal":["leeway"],"much idiomatic":["to"],"much improved":["on,"],"much improvements":["left:"],"much in":["this","exercism.io.","this","it?","the"],"much indentation":["for"],"much interesting":["as"],"much into":["the"],"much larger":["constants"],"much later":["exercise"],"much less":["readable","clear","of","readable","if"],"much like":["`words`.","functional","your","this","you","this,","a","a"],"much memory":["it"],"much more":["concise.","obvious","to","readable","clean","concision,","complicated","without","readable","concisely.","efficiently","easily","common","easily","commonly","detail","simply","acceptable.","easily","readable","closely,","often","blank","that","expensive","to","simply","optimal","easily","pleasant","inefficient","readable.","efficient","code","clearly","elegant","to","efficient","clearer.","efficient","clearly","efficient","concisely","readable?","simply,","naive).","optimized","concise.","concise","readable","sense"],"much much":["faster,","faster","more"],"much need":["to"],"much nested.":["`((((1)"],"much nicer":["putting","indeed.","way","approach.","than","that","way,"],"much obliged":["for"],"much of":["a","an","a","an","the","a","a","a","a","a","a","an","a","classic"],"much on":["the"],"much overhead":["you"],"much overkill":["for"],"much prefer":["to"],"much pretier,":["thanks!"],"much prettier":["if"],"much rather":["do","see"],"much reason":["to","to","to"],"much repetition":["of"],"much repetition,":["but"],"much rewrites":["and"],"much richer":["functionality"],"much sadly":["(see"],"much sence":["here"],"much sense":["as"],"much sense.":["I'll"],"much shorter":["solution.","than","than","and","solution"],"much simpler":["way","than","with","to","without","way.","some","way.","math","example","and","without","approach","approach","ways"],"much simplier":["approach","implementation","and"],"much since":["there","it","you're"],"much slices":["do"],"much slower":["than","algorithmically)","using","than"],"much slower,":["especially"],"much the":["same","same","same"],"much time":["on"],"much to":["say","say","say","it","do","say"],"much trouble":["I"],"much trouble,":["let's"],"much uglier":["because"],"much unnecessary":["anagrams"],"much whether":["or"],"much with":["your"],"much work":["as"],"much worse":["than","than"],"much! It":["was"],"much, `filter":["(isAnagram"],"much, but":["couldn't","it's","it"],"much, if":["at"],"much, partly":["because"],"much, since":["reading"],"much, test":["cases"],"much, why":["not:"],"much-needed tidying":["up"],"much. I":["suggest","also"],"much. If":["we"],"much. It":["might"],"much. It's":["also","been","also"],"much. Looks":["good"],"much. Maybe":["other"],"much. Same":["for"],"much. The":["other"],"much. This":["is"],"much. To":["fully"],"mult .":["repeat`"],"multi-line bindings":["in"],"multi-line functions":["are"],"multi-line string":["literals","syntax","literals","notation,"],"multi-pass ad-hoc":["template"],"multiline string":["literals."],"multiline strings":["in"],"multiline where":["clauses"],"multiple argument":["functions"],"multiple bindings":["like"],"multiple definitions":["of"],"multiple equations":["it's"],"multiple filters":["don't"],"multiple generators,":["there's","just"],"multiple guard":["clauses."],"multiple guards":["under"],"multiple guards,":["that's"],"multiple of":["7","2","100)"],"multiple passes":["required"],"multiple robots,":["but"],"multiple threads.":["It's"],"multiple times":["per","needlessly.","in"],"multiple times,":["or","you"],"multiple times.":["Once","Why"],"multiple times?":["Initially,"],"multiple values":["(this"],"multiple values,":["some"],"multiple where":["definitions."],"multiple writers":["to"],"multiples of":["2"],"multiplication by":["2,","the","2,"],"multiplication is":["associative"],"multiplication on":["`n`"],"multiplication, unless":["instruction"],"multiplied by":["itself."],"multiply `n*m`":["and"],"multiply binary":["101"],"multiply the":["accumulator","accumulator"],"multiply, one":["add)."],"multiplying 5":["by"],"multiset doesn't":["seem"],"multiset would":["be"],"multiset) and":["implement"],"multithreaded environment.":["You"],"multithreaded scenarios,":["IORef"],"munging is":["blah"],"muscles. I":["could"],"must all":["line","line","line"],"must allocate":["the"],"must be":["first.","missing","a","done,","based","ordered","completely","a","traversed","a","pure.","anagrams.","to","sharing","a","an","used."],"must come":["first."],"must ends":["with"],"must evaluate":["for","the"],"must go":["to"],"must happen":["before"],"must have":["an","the","propagated","been"],"must implement":["the"],"must not":["all","be"],"must read":["the"],"must take":["it's"],"must work":["around"],"must've missed":["that"],"mutability and":["it"],"mutability in":["was","Haskell?"],"mutability is":["required"],"mutability,\" but":["it"],"mutable concurrent":["constructs,","variables,"],"mutable data":["structure"],"mutable doubly":["linked"],"mutable instances":["in"],"mutable name":["spirit"],"mutable refs.":["I"],"mutable state":["might","and"],"mutable state,":["the"],"mutable state.":["I"],"mutable state?":["WTF?"],"mutable structure":["supports"],"mutable things":["are:"],"mutable variable":["inside","in"],"mutable variables":["easier","(either","and","(IORef)"],"mutable-vector sieve":["approach."],"mutate the":["MVar."],"mutates state":["(i.e.,"],"mutates the":["record."],"mutation for":["that"],"mutation, so":["I"],"mutex +":["var."],"mutex-like so":["supports"],"mutexes in":["most"],"mutexes you":["can"],"mutually recursive":["in"],"mvar and":["makes","makes"],"mvar contents":["is"],"mvar, tvar)[1]":["the"],"my \"what":["is"],"my \"working\"":["one..."],"my 100rd":["Mercury"],"my 1st":["iteration."],"my 2nd":["iteration,","iteration."],"my 64-bit":["Ubuntu"],"my Bob":["if"],"my Elixir":["implementation."],"my GH":["repositories"],"my Haskell":["Platform.","mentor","functions"],"my Mac,":["and"],"my OS's":["package"],"my Python":["solution,","solution,"],"my `Enum`":["instance"],"my `School.add`":["from"],"my ```++```,":["and"],"my ``range``":["function."],"my `addOrIncrement`":["function."],"my `case`":["on"],"my `checkDigit`":["is"],"my `concatMap`":["implementation."],"my `create`":["method"],"my `invalid`":["check"],"my `isShout`":["definition"],"my `one`":["/"],"my `quotedWords`":["-"],"my `resetName`":["function"],"my `rnf`":["implementation."],"my `scoreLetter`":["can"],"my `strip`":["function."],"my `toRNA`":["function"],"my `wordCount`":["function"],"my abilities":["if"],"my ability":["to"],"my actual":["answer."],"my alternate":["option"],"my answer":["is"],"my approach":["(check","to","so"],"my approach.":["Even"],"my approch":["is"],"my assignment":["is"],"my assumption":["right"],"my attempt":[":-)","on"],"my bad,":["it's"],"my best":["guess"],"my brain":["was","would","hurts.","works.","is","stops"],"my brain.":["Thanks!"],"my case":["I'm","it's"],"my change":["to"],"my character":["count...)"],"my clojure":["solution."],"my cod":["unclear."],"my code":["pass","to","breaking.","to","as","I","according","less","are","to","on","a","to","to"],"my code).":["So"],"my code,":["which","and"],"my code.":["About","You","I"],"my code/logic":["here"],"my code:":["it's"],"my comment":["on","on","on"],"my comments":["from","below","below"],"my concept":["of"],"my cons":["over"],"my day":["job."],"my day-job":["PL,"],"my default":["to","accessors"],"my editor's":["line"],"my end,":["all"],"my errors":["in"],"my evidence":["for"],"my example":[":)","code.","for","I"],"my example.":["I"],"my experience":["talking.","`let`"],"my experience,":["`Data.Char`"],"my explanation":["doesn't"],"my eyes":["than","weren't"],"my fault":["for"],"my favorite":[":)","option),"],"my first":["Haskell","pass,","submission.","version.","post),","ever","submission),","broken","comment","use","attempt","iteration","working","time","submission.","thought","Haskell","variant","point"],"my focus":["here"],"my foldCount":["function"],"my folding":["function."],"my formulation":["might"],"my frequencies":["function"],"my functions":["point-free"],"my goodness":["monad"],"my guard":["clause"],"my hands":["type"],"my haskell-untrained":["eye,"],"my head":["around","that","around","at","for","around"],"my head,":["and"],"my humble":["opinion."],"my implementation":["chooses","quite","following","since","basically","more","I've","of","by","(doesn't","a"],"my implementation.":[":-(","You're"],"my implementation…":["I"],"my import":["section"],"my imports":["(e.g.,","(Data.List"],"my indentation,":["i.e.:"],"my inexperience":["or"],"my initial":["submission,","approach","naive","thought..."],"my input":["being"],"my installation":["doesn't","is"],"my intentions":["more"],"my ken":["(and"],"my knowledge.":["You"],"my lambda":["into"],"my laptop.":["Really"],"my last":["version:","submission","hasty","iteration.","3-4","attempt.","comment,"],"my latest":["iteration.","attempt","attempt."],"my least":["favourite"],"my level":["it"],"my limited":["Haskell","experience,","understanding"],"my line":["count"],"my list":["of"],"my local":["copy"],"my mac,":["using"],"my machine":["interpreted"],"my machine.":["```cabal```"],"my map,":["filter,"],"my mapper":["function"],"my maths":["is"],"my memory":["and"],"my message":["into"],"my mind":["was,","that","is","--","a","around"],"my mind.":["I"],"my mistake,":["sorry!"],"my mistakes":[";)"],"my modules,":["and"],"my new":["submission,","submission,","version","submission","submission"],"my next":["thing","submission.","version).","version,","iteration","iteration:"],"my nitpick":["on"],"my non-functional":["background"],"my numerals":["equivalent"],"my opinion":["an"],"my opinion)":["cleaner"],"my opinion,":["your","neither","so"],"my original":["one.","submission.","approach","version,"],"my other":["code"],"my own":["implementation.","code","code","word","I'm","programs","implementation,","generic","luhn."],"my parameters":["were"],"my particular":["use"],"my past":["exercise"],"my pattern":["matching"],"my personal":["readability"],"my phone":["convert"],"my phrasings":["here."],"my point":["about"],"my pointfree":["```insertWith'","loving"],"my preference":["is"],"my preferred":["iteration."],"my previous":["solution","implementation","use","solution","version","solution.","submission.","submission,","solution"],"my problem":["with"],"my programming":["for"],"my progress":["on"],"my question":["then."],"my reasoning":["there","is"],"my reference":["implementation!)"],"my responses.":["Everyone"],"my reviews":["for"],"my rewrite":["that"],"my sanitize":["function"],"my servers":["are"],"my shot":["at"],"my side":["as"],"my slacking":["on"],"my solution":["is","that","to","to","I","—","prematurely.","would","is","(perhaps","needs","will","of","with","does"],"my solution,":["and","I"],"my solution.":["Geez!"],"my sorting":["them"],"my space/tab":["indentation"],"my string":["into","function"],"my strip":["function,"],"my study":["list,"],"my stuff":["and"],"my style":["once"],"my submission":["to","by"],"my submissions":["through","but"],"my suite":["(the"],"my system":["either."],"my system,":["so","but"],"my test":["program"],"my testing":["ONeillPrimes.hs"],"my tests":["fail"],"my thinking":["there."],"my thought":["is"],"my time":["into"],"my to-dos!":[";)"],"my tradeoff":["no"],"my tree":["wrong"],"my type":["signatures.","looks"],"my ubuntu":["to"],"my understanding":["is","of","of"],"my usage":["of"],"my use":["of"],"my v1":["of"],"my version":["and","of","better.","of"],"my version.":["Sorry","Well"],"my way":["through"],"my wheres":["on"],"my, thats":["short"],"myFunc x":["|"],"myFunction param":["="],"myabe you":["want"],"myself a":["couple"],"myself and":["exercism","it"],"myself but":["did"],"myself by":["implementing"],"myself for":["not"],"myself in":["trying","my","the"],"myself just":["for"],"myself needing":["it"],"myself tangled":["up"],"myself that":["the"],"myself the":["same"],"myself up":["in"],"myself writing":["`f(x)`"],"myself yet,":["I"],"myself) use":["`Map`"],"myself). Most":["people"],"myself, @melany.":["Just"],"myself, and":["that's"],"myself. Moreover,":["is"],"myself. The":["definitions"],"mystery until":["you"],"n $":["drop","randomRIO","randomRIO"],"n &gt;":["2."],"n '0'":["="],"n '1'":["="],"n (School":["s)"],"n (can":["be"],"n (drop":["n"],"n (fromJust)":["."],"n (n-1)":["m`"],"n (n-1)`)":["and"],"n (x:xs)":["="],"n +":["1)`"],"n ++":["\"\\n\"","\"\\n\")`"],"n -":["1","1,","1"],"n -\u003e":["foldr","foldr"],"n .":["repeat`","map","map"],"n 1":["=="],"n :":["ns`."],"n \u003c":["maxDecimalValue`","3001"],"n \u003c-":["ns]`","generateName","generateName","[6,","[6,12..],","[6,"],"n \u003c=":["1"],"n =":["n","guard","0","1","n","unlines","('0',","Sch","do","replicateM","(concat","(,n)","[n]","('0',","if","digits"],"n ==":["0,","'T'","T"],"n \u003e=":["m).","1)"],"n _":["|"],"n `mod`":["d","i"],"n `seq`":["False"],"n `shiftL`":["1"],"n and":["n'"],"n be":["columns"],"n but":["broke"],"n cannot":["have"],"n characters/bytes":["in"],"n deep":["that"],"n elements":["from"],"n else":["x)"],"n f`":["from"],"n for":["factors,"],"n in":["this","the"],"n is":["bit","2","the"],"n is.":["My"],"n it":["just"],"n maxDecimalValue`":["is"],"n nested":["thunks,"],"n sequence`":["is"],"n space":["indent,"],"n squares":["is,"],"n str":["="],"n times,":["hence"],"n times.":["With"],"n was":["\u003cpre\u003ereducedN"],"n x)":["then"],"n x,":["tail"],"n xs)`":["stuff"],"n xs`":["and","in"],"n' \u003c-":["atomically","atomically"],"n' don't":["really"],"n' else":["go"],"n']` uses,":["is"],"n) $":["tails"],"n) ...`":["and"],"n) \u003c-":["letterValues,"],"n) [unfolded":["list"],"n) access.":["Perhaps"],"n) algorithm":["rather","for"],"n) lookup,":["where"],"n) operation.":["But"],"n) so":["if"],"n) time":["to"],"n) time.":["That"],"n) |":["(l,"],"n)) involves":["using"],"n), which":["is"],"n). Doing":["that"],"n). Same":["as"],"n). There's":["no"],"n)/. Build":["a"],"n)` and":["then"],"n)` as":["`M.keys`"],"n)` could":["also","be"],"n)` doesn't":["look"],"n)` in":["any","`checksum`"],"n)` on":["line","the"],"n)``` compared":["to"],"n*6+1, but":["prepending"],"n*m elements":["there)"],"n*m. And":["use"],"n, \"on":["the"],"n, ...]`":["to"],"n, `n^0":["="],"n, n,":["n]","n]"],"n, thank":["you"],"n, the":["running"],"n,m then":["(so"],"n-1... n']`":["uses,"],"n00b with":["Haskell,"],"n1 \u003c-":["robotName","robotName"],"n=4 it's":["just"],"nMany -1":["="],"nMany 0":["="],"n] on":["`verse`"],"n]` is":["a"],"n^2 )":["implementation","because"],"n` and":["`total`","`show"],"n` are":["unnecessary","superfluous"],"n` could":["be","just"],"n` into":["a"],"n` is":["usually"],"n` to":["me"],"n` values":["can"],"n`) or":["have"],"n`, but":["maybe"],"n`. Also":["consider"],"nabbit... I":["took"],"nagging about":["this"],"nailed it.":["Nice"],"naive [Char]":["implementation,"],"naive `fromListWith`":["implementation"],"naive attempt":["took"],"naive way":["is"],"naive ways":["to"],"naive). If":["you"],"naked in":["ghci."],"name \"isEmpty\"":["implies"],"name (\\_":["-\u003e"],"name (`go`":["is"],"name (suggestions?).":["I"],"name -":["`isShouting`","but"],"name ::":["String","IORef"],"name \u003c-":["randomName"],"name =":["School"],"name I'm":["now"],"name `dnaFilter`":["seems"],"name `go`":["is"],"name `insertCount`":["isn't"],"name `insertWord`":["because"],"name `mapFunc`":["doesn't"],"name `rnaNucleotide`":["as"],"name `s`,":["this"],"name `unSchool`":["instead"],"name `upperCase`":["suggests"],"name a":["constructor"],"name and":["type","read","the"],"name as":["it"],"name at":["the"],"name because":["the"],"name but":["couldn't"],"name choice":["of","\"validateNumber\"","and"],"name clash,":["I"],"name clashes":["as","require","and","i.e.:","or"],"name clearly":["identifies"],"name consistent":["in"],"name could":["also"],"name doesn't":["convey","imply"],"name every":["time","time"],"name field":["that"],"name fields":["of"],"name for":["`allSpace`,","a","`when`","`allSpace`.","an","a","this","variables","a","a","a","it"],"name from":["filter","IORef"],"name generation":["or"],"name in":["signatures","Control.Monad.","`mkRobot`?","infix","backquotes,","less","the"],"name inserts,":["however"],"name is":["generated,","generated,","different"],"name it":["similarly","`xs'`"],"name just":["sounded"],"name like":["`go`.","`go`"],"name may":["not"],"name might":["be"],"name obviosly)":["or"],"name of":["the","that","```Beer.toUpper```.","@krista","`isDivBy`","the","both","the"],"name or":["type."],"name probably,":["but"],"name rather":["than"],"name should":["be","be","change"],"name since":["you're"],"name something":["like"],"name sounds,":["i"],"name spirit":["of"],"name starting":["with"],"name suggests.":["and"],"name than":["`classification`,"],"name that":["is","closer"],"name the":["definitions","variable","predicates","transformation.","message","first","variable."],"name them":["`isSilence`"],"name to":["`isAnagramOf`,","(would","`q`"],"name too,":["for"],"name variables":["`likeThis`"],"name was":["meaningful"],"name when":["using","it","there's"],"name with":["regex"],"name without":["the"],"name you":["like"],"name your":["functions"],"name) just":["`toLower`"],"name) that":["is"],"name), this":["is"],"name)` and":["`modifyIORef"],"name, `not(null":["message)`"],"name, and":["reuse"],"name, but":["oh","it","how"],"name, however":["-"],"name, more":["common"],"name, since":["there"],"name, though":["IORef"],"name, type":["signature,"],"name, you":["wouldn't","might"],"name. A":["different"],"name. Another":["popular"],"name. But":["I"],"name. However":["a"],"name. In":["this"],"name. Note":["also"],"name. You're":["exactly"],"named #":["in"],"named Jack":["that's"],"named `anagram`":["actually"],"named `go`":["rather"],"named `go`,":["but"],"named `intercalate`":["that"],"named `isShouting`":["your"],"named `sortedLetters`,":["I'm"],"named `transformThymidine`":["(which"],"named alias":["for"],"named because":["the"],"named bindings":["so"],"named function":["in","that","in"],"named function,":["maybe"],"named function.":["For"],"named functions":["for","based","in"],"named outer":["function"],"named predicates":["on","and","would"],"named something":["like"],"named using":["the"],"named where":["meaning"],"namely `all":["isLetter`"],"namely `bar":["False'","False'"],"namely that":["it's"],"names (`f`":["and"],"names (easier":["to"],"names (with":["module"],"names `whereAt`":["and"],"names along":["those"],"names and":["clear"],"names are":["not","at","inserted","not","typical","randomly"],"names before":["converting","happening"],"names but":["I"],"names can":["tell","still"],"names could":["be"],"names for":["the","the","the","each","those","these","bindings","the","qualified","qualified","qualified","data","split"],"names from":["[@omer's](http://exercism.io/kimhyunkang/haskell/phone-number)"],"names imply":["meaning,"],"names in":["`tokenize`","my","that","type"],"names is":["error-prone"],"names like":["that"],"names of":["your","the","higher","their"],"names on":["every"],"names seems":["wrong,"],"names sorted.":["You"],"names specific":["to"],"names such":["as"],"names takes":["up"],"names tend":["to"],"names to":["the","record","parameters"],"names were":["self"],"names where":["it"],"names which":["refer"],"names with":["it."],"names you":["have"],"names! I":["prefer","don't"],"names, `words`":["is"],"names, and":["maybe","also"],"names, but":["if"],"names, doesn't":["it!"],"names, e.g.":["`C`"],"names, like":["`isShouting`"],"names, or":["to"],"names, shorter":["scopes"],"names, since":["there","they're"],"names, that":["really"],"names, the":["reader"],"names. Did":["you"],"names. I've":["actually"],"names. The":["idea"],"names. Will":["have"],"names. You":["could"],"names. `normalizeWord`":["and"],"namespace for":["all"],"namespacing (in":["Haskell)"],"naming `fs`":["a"],"naming and":["(if","decomposition"],"naming convention":["seems","for","for","for"],"naming conventions":["should","used"],"naming conventions,":["indentation"],"naming functions,":["I"],"naming identifiers":["with"],"naming in":["here,","count"],"naming is":["there"],"naming issue.":["I'm"],"naming it":["something"],"naming it's":["good"],"naming of":["those","variables","things,"],"naming related,":["e.g."],"naming scheme":["'Mk'"],"naming since":["`isFoo`"],"naming the":["conditions"],"naming, I":["can't"],"naming, so":["I"],"naming. you":["might"],"narrow down":["the"],"nasty way":["to"],"native `Day`":["construct","types"],"native heredoc":["handling"],"native speaker":["I"],"natural Haskell":["idiom…"],"natural for":["Elixir/Clojure"],"natural number":["arithmetic."],"natural place":["to"],"natural than":["let-in."],"natural to":["support","use","use"],"natural, and":["although"],"natural, but":["`liftA2`"],"natural. The":["first"],"naturally done":["in"],"naturally into":["two."],"naturally without":["your"],"naturally, unless":["you're"],"naturals on":["Haskell"],"nature in":["one"],"nature of":["the"],"nature, or":["maybe"],"near the":["bottom."],"near to":["constant","2-4"],"nearest (0.5":["to"],"nearest b).":["how"],"nearest digit,":["then"],"nearly all":["relatively"],"nearly always":["preferable.","better","better"],"nearly as":["bad"],"nearly familiar":["enough"],"nearly the":["same","breadth","same"],"nearly twice":["as"],"neat (IMO)":["solution"],"neat (first":["time"],"neat :-)":["But"],"neat and":["clean,"],"neat function,":["took"],"neat solution":["though,","overall"],"neat trick":["others","though.","with"],"neat trick,":["and"],"neat, so":["it's"],"neat. However,":["just"],"neat. I'll":["have"],"neat. In":["this"],"neat. That":["style"],"neaten up":["`resetName`"],"neatened up":["`grade`."],"neater ways":["to"],"neater. It":["gets"],"neater. What'll":["be"],"neatly as":["`(==)"],"neatly by":["using"],"neatly into":["a"],"neatly using":["[`filter`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Prelude.html#v:filter)"],"necessarily a":["good"],"necessarily acting":["on"],"necessarily an":["optimization"],"necessarily better":["ways"],"necessarily better,":["but"],"necessarily correct":["as"],"necessarily for":["any"],"necessarily improvements,":["just"],"necessarily lead":["to"],"necessarily make":["sense"],"necessarily say":["that"],"necessarily the":["best","order","best.","intention"],"necessarily worth":["the"],"necessary -":["no"],"necessary Char/String-\u003eBase/DNA":["conversions."],"necessary as":["function"],"necessary at":["all,","all"],"necessary because":["that's","it's","`:`"],"necessary but":["because"],"necessary either,":["but"],"necessary except":["for"],"necessary for":["`silent`,","the","this","`case"],"necessary functions":["from"],"necessary here":["at"],"necessary here.":["deriving"],"necessary in":["any","that","there","any","`anagramFilter`?"],"necessary is":["excusable,"],"necessary or":["not,"],"necessary property":["for"],"necessary since":["silence","`&amp;&amp;`","function","the","function","it's","every"],"necessary to":["verify","trim","do","compare","eliminate","do","give","use","make"],"necessary when":["importing"],"necessary) by":["using"],"necessary). The":["name"],"necessary, I":["am"],"necessary, because":["higher"],"necessary, but":["it"],"necessary, function":["application"],"necessary, it":["should"],"necessary, most":["people"],"necessary, normally":["I"],"necessary, or":["even"],"necessary, since":["function","the","function","function","function"],"necessary. Also,":["I"],"necessary. For":["example,"],"necessary. It's":["generally"],"necessary. This":["looks"],"necessary? It":["seems"],"necessitated about":["30"],"need 9":["tiles"],"need @justus":["to"],"need `\"invalid":["nucleotide\""],"need `Prelude.foldl`":["if"],"need `^`,":["`length`,"],"need ```{-#":["LANGUAGE"],"need `atomically`":["to"],"need `elem`,":["elem"],"need `fromMaybe`":["or"],"need `hasPrime`":["function?"],"need `import":["Data.List"],"need `lastMay`":["since"],"need `liftM2`,":["`fmap`,"],"need `map":["(take"],"need `randomChar`":["at"],"need `readTVar`":["right?"],"need `rnaNucleotides`":["at"],"need `stripMessage`":["at"],"need `zip`,":["`reverse`,"],"need a":["linebreak","type","map","datatype","function","lambda","refresher","'fresher!","map","type","separate","smart","Map,","type","`map","more","resource","wrapper","`name`","version","base","bunch","reminder.","difference"],"need an":["explicit","explicit","initial","explicit"],"need another":["function"],"need any":["lists","of","functions","flipping","intermediate","other","kind","variables"],"need anything":["in","but"],"need beforeahead":["(Only"],"need both":["the","lines)"],"need cabal":["at"],"need element":["index,"],"need errors,":["which"],"need fewer":["`$`"],"need filter":["in"],"need first":["find"],"need flexible":["instances?"],"need for":["them.","the","an","isAnagram,","the","a","the","'if',","filter).","`isDifferentTo`","a","a","`intercalate`","these","explicit","them.","an","`split`","parentheses;","Maybe","a","all","any","`cycle`,","the","parentheses.","a","any","a","parentheses","`concat`.","`Show`","parenthesis","it","`reverse`","`group`,"],"need full":["prime"],"need here":["to","is"],"need in":["this"],"need invalid":["at"],"need it":["(after","for","(it","but","if"],"need it)":["and"],"need it,":["but"],"need it.":["In"],"need just":["to"],"need less":["insertions"],"need more":["than","than"],"need names,":["since"],"need null":["comps',"],"need of":["creating","some"],"need one":["more"],"need only":["`foldl`,"],"need parens":["around"],"need parentheses":["because","to","in"],"need parentheses,":["because"],"need parentheses.":["Function","Function"],"need pre-filtered":["input."],"need primes":["at"],"need recursion.":["If"],"need relative":["indentation"],"need so":["many"],"need some":["boilerplate","help","additional","hints"],"need something":["more"],"need strict":["maybe"],"need that":["(and","clause","overhead,","kind"],"need the":["full","original","`where`","`foldl`.","`concatMap`.","Writer","filter","input","DOW","empty","`(not","tuple","`M.map`.","parentheses","additional","optimizer","latter.","lambda.","parens","full","where","`reverse`."],"need them":["in","so","for","in","here,","in"],"need them,":["but"],"need this":["much","many"],"need to":["use","perform","group","use","add","insert","hide","prefix","use","use","create","do","get","be","check","manually","use","traverse","transform","import","know","write","use","check","put","change","do","group","export","be","compute","learn","read","know","count","look","indent","force","do","add","add","use","explicitly","use","repeat","indent","wrap","be","convert","fight","be","indent","use","supply","encode","match","be","cater","lower","use","use","give","do.","-","be","get","be","implement","be","type","write","handle","test","add","export","be","investigate","use","use","use","use","use","come","be","brute","check","ensure","learn","import","import","get","get","know","change","`filter","have","be","import","move","explicitly","look","give","store","read","carry","finish","use","use","use","calculate","refer","use","put","read","prove","tell","be","whip","store","add","define","use","do","wrap","write","build","scan","stay","check","be","try","manually","`return","`return","sort","be","do","use","recover","generate","worry","tweak","re-implement","create","traverse","keep","fool","drop","pack","change","carry","use","know","rely","be","keep","call","care","use","derive","try","use","call","call","lift","pass","rewrite","use","repeat","build","consider","evaluate","do","look","explicitly","launch","and","be","be","multiply","use","change","try","evaluate","test","store","map","use","update","prefer","rewrite","store","introduce","use","sort","use","experiment","change","know","check","add","use","verify","decide","import","use","make","have","have","read","use","read","carry","specify","define","have","build","either","sort","test","fix","filter","experiment","lower","implement","add","add","recurse"],"need to,":["although"],"need to.":["you","You'll"],"need tryPutMVar":["on"],"need trying":["to"],"need two":["pass."],"need unique":["keys."],"need, around":["`isLower`"],"need, like":["you're"],"need, there's":["no"],"need. Everything":["else"],"need. `chunksOf`":["could"],"needed (as":["a"],"needed (function":["application"],"needed (usually":["they're"],"needed `Map,":["alter,"],"needed a":["good","standalone"],"needed an":["`uncurry`..."],"needed because":["then"],"needed by":["one"],"needed for":["this","things"],"needed functions":["and"],"needed given":["the"],"needed here":["and","either)."],"needed here)":["(`succ"],"needed if":["you"],"needed instead":["of"],"needed is":["in"],"needed on":["the","the"],"needed since":["`all"],"needed some":["iterations."],"needed the":["work","index"],"needed them)":["anyways."],"needed there,":["way"],"needed to":["really","return,","brute","leave","yield","parse","return","be"],"needed when":["function"],"needed! And":["I"],"needed).\" So":["I"],"needed, depends":["on"],"needed, it's":["easy"],"needed. Haskell's":["compiler"],"needed. I":["really"],"needed. The":["bad","result"],"needed? Shouldn't":["any"],"needing a":["trailing"],"needing it":["again,"],"needing these":["extra"],"needing to":["be"],"needing two":["arguments"],"needle and":["haystack"],"needless to":["say"],"needs a":["little"],"needs one.":["Consider"],"needs parenthesis":["on"],"needs special":["treatment"],"needs to":["end","evaluate","pattern","be,","return","be,","be,","use","know","be.","be","be","be.","in","traverse","be","be,","traverse","traverse","look","see","be","create","change","be","be","be,","be","operate"],"needs to.":["Another"],"needs type":["signatures,","annotations","signatures,"],"negate that.":["You"],"negation of":["that.","what"],"negation. i.e.":["about"],"negative (Thursday..Sunday).":["We'll"],"negative exponent":["because"],"negative numbers":["and","and","are","to"],"negative roman":["numerals"],"negative\" of":["`not"],"negatively affects":["the"],"negatives to":["upper,"],"negatives works":["in"],"negligible for":["small"],"negligible. This":["chapter"],"neighbors will":["be"],"neighbors, my":["solution"],"neither RNA":["or"],"neither an":["official"],"neither is":["it","much"],"neither tests":["say"],"nervous that":["`isAnagram"],"nest enough":["of"],"nested booleans":["evaluated"],"nested conditionals":["approach"],"nested control":["structures"],"nested function,":["letters."],"nested functions":["then"],"nested list":["comprehension"],"nested maps":["if"],"nested parentheses.":["For"],"nested thing":["of"],"nested thunk":["of","of","that","instead"],"nested thunks":["that","(in","as","`(((1","get","such","(unevaluated","that","that","that","instead","that"],"nested thunks).":["The"],"nested thunks,":["and","then"],"nested thunks.":["Right"],"nested too":["deeply"],"nested where":["clauses"],"nested. `((((1)":["+"],"nesting (e.g.":["`((Just"],"nesting 4":["thunks"],"nests a":["lot"],"net gain":["when"],"net win":["or"],"network protocols":["but"],"never a":["great","reason"],"never actually":["come"],"never ambiguous.":["Function"],"never any":["leftovers"],"never applies":["optimizations"],"never be":["called","able","called","greater","done"],"never better":["than"],"never called":["with","with"],"never come":["across"],"never complete":["unless"],"never contain":["'U')."],"never demanded,":["then"],"never do":["a"],"never done":["anything"],"never empty,":["`robotName`,","just"],"never even":["thought"],"never ever":["use"],"never expected":["to"],"never figure":["out"],"never forced":["and","implicitly."],"never forces":["the"],"never going":["to"],"never gotten":["back"],"never grow":["larger"],"never happens":["in"],"never have":["thought","to"],"never know":["when"],"never liked":["that"],"never need":["that","them"],"never observed":["to"],"never problematic":["to"],"never saw":["it"],"never see":["the"],"never seen":["one","this","pattern"],"never the":["best","best","best","best","right","right"],"never thought":["of","haskell"],"never uracil":["in"],"never use":["`foldl`,","`foldl`,","`foldl`,"],"never used":["because","data","them"],"never using":["`foldl`"],"nevermind, I":["was"],"nevertheless here's":["the"],"new Map":["here","in","it"],"new README":["describes.","soon,"],"new SentenceKind,":["new"],"new about":["nub"],"new approach,":["mind"],"new balance":["and","of"],"new binding":["for"],"new cabal":["sandbox"],"new clause":["was"],"new condition":["to"],"new data":["type","type"],"new empty":["list"],"new exercises.":["thanks"],"new for":["me.","me."],"new function":["`a"],"new generators":["and"],"new grade":["with"],"new haskell":["this"],"new initial":["parameter"],"new iteration":["along","uploaded"],"new language":["which"],"new line":["at","in"],"new list":["I.e."],"new method":["such","such"],"new name":["with","might"],"new name,":["however"],"new names":["where"],"new one":["adds","with"],"new one,":["this"],"new parameters":["until"],"new process":["in"],"new reader":["of"],"new record":["using"],"new representation":["will"],"new robot":["a1"],"new robot,":["but"],"new solution":["is","based"],"new solution,":["now"],"new state,":["so"],"new submission":["-","is"],"new submission,":["but","you"],"new submission.":["Is"],"new submissions":["is"],"new term":["you"],"new test":["suite."],"new thing":["I'm"],"new things":["at"],"new to":["Haskell","Haskell,","Haskell,","Haskell,","Haskell,","Haskell.","Haskell","haskell","Haskell","haskell","Haskell","Haskell","Haskell","Haskell.","both","it","Haskell","Haskell","Haskell","haskell","Haskell,","Haskell","Haskell,"],"new tuple":["with"],"new type":["of","for","that","instead"],"new types":["for"],"new updated":["type.","balance,"],"new value":["back","in:"],"new variable":["but"],"new version":["with","is","that","coming","would","using","submitted.","of","with","in","of","of","where"],"new version.":["I","But"],"new way":["of"],"new word":["or"],"new, and":["I'm"],"new, definitely":["a"],"new, what":["does"],"new-line character":["in"],"new. I":["don't"],"newIORef \u003e\u003e=":["return"],"newIORef``` instead":["of"],"newMVar (Just":["0)","0)"],"newMVar 0`":["and","(or"],"newName =":["mapM"],"newName)` are":["`IO"],"newRobot --":["robot"],"newT*IO that":["are"],"newT*IO`. Except":["`readTVarIO`"],"newTVar \u003e\u003e=":["return"],"newTVar generateName`,":["but"],"new_value =":["old_value"],"new` (lazy)":["instead"],"new` (strict).":["Repeatedly"],"newbalance. You":["may"],"newbie in":["haskell,","Haskell"],"newbie myself":["and"],"newbie. Can":["you"],"newer Haskell":["Platform"],"newer haskell":["with"],"newest version":["of"],"newline after":["every","the"],"newline at":["the"],"newline characters":["is"],"newline if":["you're"],"newline immediately":["after"],"newline, but":["didn't"],"newline, so":["you","`cleanUpInput`"],"newlines yourself":["with"],"newlines, consider":["`unlines"],"newtype (with":["a"],"newtype Deque":["a"],"newtype School":["=","="],"newtype SnocList":["a"],"newtype Type":["="],"newtype and":["a","monoidal"],"newtype declaration.":["Shortens"],"newtype for":["Char","Char","Char"],"newtype here?":["How"],"newtype is":["that"],"newtype rather":["than"],"newtype so":["that"],"newtype when":["there's"],"newtype would":["be"],"newtype you'll":["also"],"newtypes (I":["think"],"newtypes then":["this"],"newtypes. The":["only"],"next ::":["TMVar"],"next Iteration.":["Thank"],"next Tuesday":["is"],"next assignment":["for"],"next couple":["years"],"next element,":["i.e."],"next exercise":["please.","(via","unless",":)","is.."],"next function.":["Funny"],"next guard":["and"],"next instance":["will"],"next is":["ternary"],"next iteration":["goes","will","I","with"],"next iteration.":["However","Happy","Lets"],"next iteration:":["eta"],"next line":["doesn't","(by","with"],"next line.":["Or"],"next occurrence":["of","of"],"next one":["using","to"],"next operation":["(-1"],"next part":["is"],"next problem":["is"],"next release":["is"],"next revision":["and"],"next step":["what","in","in","someone"],"next steps":[":)"],"next submission":["will"],"next thing":["to"],"next three,":["last"],"next to":["a"],"next two,":["which"],"next version":["has","of"],"next version,":["things"],"next x":["="],"next) n`":["could"],"next, e.g.":["for"],"nextOdd or":["primeFactors'"],"nf (please":["correct"],"nice (though":["I'm"],"nice -":["no","good","simple"],"nice TupleSections":["syntax"],"nice `f`":["that"],"nice `wordsBy`":["function","function","function","function"],"nice about":["the","having"],"nice and":["readable.","clean","clear","clean!","seems","readable"],"nice approach":["to","for"],"nice as":["well.","its"],"nice as-is":["though."],"nice because":["you"],"nice but":["you","I","you","it's","doing","solution"],"nice case":["for"],"nice catch,":["should"],"nice choice":["to"],"nice clean":["code."],"nice clues":["to"],"nice diagrams":["and"],"nice enough":["name),"],"nice exercise":["to"],"nice explanation":["of"],"nice extension":["for"],"nice finding":["that."],"nice first":["pass,","attempt,"],"nice for":["storing"],"nice function":["`all'","that"],"nice functionallity":["for"],"nice functions":["toAscList/fromAscList."],"nice helpful":["hints!"],"nice here,":["except"],"nice if":["I","you","fully","there","its","you"],"nice in":["some","order"],"nice little":["package"],"nice looking":["solution","or"],"nice now":[":)"],"nice now.":["Thank"],"nice otherwise.":["Some","I"],"nice output":["its"],"nice overview":["of"],"nice pointfree":["pipeline."],"nice replacement":["for"],"nice solution":["though,","that"],"nice solution,":["my"],"nice solution.":["I"],"nice solutions":["using"],"nice straightforward":["solution."],"nice stuff.":["I've"],"nice suggestions,":["thanks!"],"nice that":["`isSpace`","you've"],"nice thing":["about"],"nice to":["add","not","use","explicitly","explicitly","use","move","explicitly","explicitly","explicitly","know","leaf","see","give","combine","explicitly","change","explicitly","write","make","explicitly","be","explicitly","me.","be","import","run","read","be","remove","put","include","be","have","know."],"nice trick":["to","for","here"],"nice trick,":["took"],"nice tricks.":["Its"],"nice way":["to","to"],"nice way,":["but"],"nice when":["you"],"nice wiki":["entry"],"nice wordsBy":["function"],"nice work":[":)",":)","with"],"nice work!":[":)"],"nice work.":["I"],"nice! Another":["consideration"],"nice! I":["do"],"nice! Is":["there"],"nice! This":["reads"],"nice, I":["like"],"nice, I'm":["quite"],"nice, a":["bit"],"nice, although":["it"],"nice, an":["additional"],"nice, but":["looks","I","what","as"],"nice, however":["using"],"nice, simple":["formulation"],"nice, thanks":[":D"],"nice. Not":["sure"],"nice. One":["thing"],"nice. Otherwise,":["the"],"nice. Thank":["you"],"nice. is":["there"],"nicely (thought":["not"],"nicely and":["efficiently"],"nicely formatted:":["https://gist.github.com/etrepum/7427960"],"nicely in":["terms"],"nicely with":["a","just"],"nicely written":["as"],"nicely. And":["I"],"nicer `wordsFrom`":["can"],"nicer about":["it?"],"nicer and":["more","maybe"],"nicer approach.":["I'm"],"nicer as":["`isQuestion","well,"],"nicer but":["the","ultimately"],"nicer error":["if"],"nicer if":["you","you","you","you"],"nicer looking":["to"],"nicer putting":["it"],"nicer representation":["than"],"nicer since":["you"],"nicer than":["using","`(not","using","`(++)`.","coding","a","explicit"],"nicer that":["`fromList"],"nicer to":["see","write","separate","read,","use","express","give","have","have","split","write","define","express"],"nicer using":["fromListWith","```wordsBy```"],"nicer way":["to","to","to","to","to","to"],"nicer way,":["but"],"nicer when":["you're"],"nicer with":["a","guards","`fromList`?"],"nicer would":["be","be","be"],"nicer, and":["shorter"],"nicer, in":["particular"],"nicer. Anyway":["I've"],"nicer. Will":["have"],"nicer. `\u003c$\u003e`":["is"],"niciest one":["is:"],"night for":["an"],"night. I":["do"],"nines and":["fours"],"nit I":["have","see","have","have"],"nit but":["since"],"nit confused":[":-)"],"nit here":["is","is"],"nit in":["all"],"nit is":["that","that"],"nit pick,":["but"],"nit to":["pick."],"nit, as":["I"],"nit, but":["since","you","you"],"nit, your":["concern"],"nit-pick but":["a"],"nit... shouldn't":["the"],"nit: I":["think"],"nit: since":["`candidates`"],"nitpick I'd":["say"],"nitpick and":["now"],"nitpick but":["1)."],"nitpick here!":[":)"],"nitpick i":["simplified"],"nitpick on":["v3,","the"],"nitpick to":["consider:"],"nitpick will":["be"],"nitpick, I":["guess","_always_"],"nitpick, a":["matter"],"nitpick, but":["you"],"nitpick, just":["curious:"],"nitpick, this":["looks"],"nitpick. I":["think"],"nitpick. Question":["will"],"nitpick: I":["would"],"nitpick: consider":["using"],"nitpick: if":["you"],"nitpick: instead":["of"],"nitpick: is":["there"],"nitpickers about":["renaming"],"nitpicking here,":["but,"],"nitpicking on":["performance"],"nitpicking! I'm":["using"],"nitpicks :).":["i"],"nitpicks from":["me"],"nitpicks into":["this..."],"nitpicks yet":["but"],"nitpitting my":["last"],"nits as":["far"],"nits at":["once):"],"nits before":["bikeshedding"],"nits here":["are"],"nits left.":[";)"],"nits regarding":["readability."],"nits that":["are"],"nits this":["is"],"nits though,":["looks"],"nits to":["pick.","pick","pick.","pick","pick"],"nits! Addressed":["both"],"nits, I":["liked"],"nits? If":["not,"],"nmany and":["dowhat"],"no \"the":["best\""],"no 1337":["uber"],"no Alpha,":["True"],"no I":["mean"],"no Left...and":["if"],"no `own`":["operator"],"no `readTVar`":["using"],"no `reverse`.":["The"],"no `word`":["in"],"no `words`":["due"],"no `zip`?":["You"],"no advantage":["to"],"no alpha":["caracteres"],"no ambiguity":["since"],"no arithmetic":["necessary."],"no attempts":["to"],"no auto":["modulo)"],"no backtracking,":["but"],"no benefit":["in"],"no benefits":["over"],"no better":["ideas..."],"no big":["deal,"],"no case":["where"],"no chance":["of","of","to"],"no clue":["what"],"no comma":["to"],"no common":["approach.."],"no commonly":["accepted"],"no concatenation.":["You"],"no concept":["of"],"no confusion":["between"],"no cost":["to"],"no detriment":["in"],"no difference":["between","for","at"],"no different":["than"],"no disadvantage":["to"],"no doubt":["that"],"no empty":["lists","tiles"],"no error":["checking.","checking,"],"no even":["numbers"],"no exact":["link"],"no excuse":["for"],"no explicit":["argument","recursion"],"no external":["code"],"no extra":["whitespace"],"no faster":["way"],"no formal":["comp-sci"],"no function":["application"],"no good":["reason","reason"],"no great":["advantage"],"no grey":["area"],"no harder":["to"],"no harm":["in"],"no help":["at"],"no higher":["level"],"no idea":["what","how","where","what","about","what","how","how","how","how","how","how","how","how","it"],"no idea!":["Is"],"no ideas":["how"],"no imports":["required."],"no imports,":["lower"],"no input":["string"],"no integer":["square"],"no iteration":["is"],"no law":["that"],"no letters,":["and"],"no list":["concatenation"],"no lists":["or","at"],"no lists.":["This"],"no longer":["trimmed","needed","the","possible","needs","any","being","seems","compile","explicitly"],"no loss":["of"],"no lowercase":["letters,","letter"],"no luck":["finding"],"no matter":["the","what"],"no measurable":["performance"],"no more":["parentheses,","nitpicks","descriptive","bottles","than","searching"],"no more\",":["but"],"no multiple":["argument"],"no mutable":["variables"],"no name":["clashes","clashes."],"no need":["for","to","to","to","to","for","to","to","for","to","for","for","to","to","for","for","to","for","to","for","to","in","for","to","for","for","to","to","for"],"no nits":["to","to"],"no number":["that"],"no obvious":["nits"],"no one":["is"],"no optimizations":["on),","are","that"],"no other":["computation","producers","references","active","top-level"],"no overlapping":["conversions"],"no pain":["building"],"no parentheses":["(this"],"no parenthesis":["around"],"no particular":["reason,","order:"],"no penalty":["for"],"no place":["in"],"no possibility":["for"],"no possible":["improvements?"],"no practical":["consequence"],"no pragmatic":["reason"],"no problem":["with"],"no pure":["code","code"],"no real":["need","benefit).","reason","need","benefit","need","issues","reason,"],"no reason":["to","for","your","to","to","to","to","to","to","to","for","to","not"],"no reason.":["The"],"no recursion":["here,"],"no reference":["to"],"no reversal":["of"],"no risk":["of"],"no runtime":["cost.","cost.","cost,"],"no sence,":["as"],"no sense":["for"],"no set":["location"],"no situation":["where"],"no sooner":["than"],"no space":["between"],"no spaces":["inside"],"no spec":["in"],"no state":["to"],"no static":["O(n)"],"no such":["problem","optimization"],"no tail":["call)."],"no temporary":["tuple"],"no test":["case"],"no thunk":["leaks"],"no time":["for"],"no to":["this"],"no trouble":["understanding"],"no type":["signature:","signature:","signature:","signature:"],"no up":["front"],"no uppercase":["alphabetic","letters."],"no uracil_":["test,"],"no use":["of","in","for"],"no utility":["in"],"no value":["in"],"no version":["of"],"no warnings,":["unlike"],"no way":["I","to","to","to","to","to","to","to","to","to","to"],"no windows":["around"],"no writing":["on"],"no, actually":["that"],"no, and":["if"],"no, ignore":["it"],"no, it":["isn't"],"no, that'd":["be"],"no-one to":["put"],"no-op, it":["doesn't"],"no-op, see":["my"],"no. Fusion":["is"],"no.. just":["you"],"no? See":["if"],"no? `liftA2`":["will"],"noComment cleaner":["with"],"nobody does":["that."],"nodeNext ::":["TMVar","TMVar"],"nodePrev ::":["TMVar","TMVar"],"nodeValue ::":["a","a"],"noise in":["verse"],"noise it":["introduces?"],"noise. The":["compiler"],"noisy but":["the"],"noisy than":["using"],"non allergen":["score"],"non composable":["in"],"non included":["allergen?"],"non native":["speaker"],"non performance":["critical"],"non pinned":["structures"],"non prime":["and","and"],"non printable":["characters"],"non-\"AGCT\" Chars)":["isn't"],"non-ASCII input,":["since"],"non-DNA string.":["Then"],"non-DNA-only string.":["The"],"non-Earth planets":["into"],"non-FP languages,":["but"],"non-alpha characters":["first.","is"],"non-alpha or":["non-digit"],"non-alphabet characters":["satisfies"],"non-alphabetic characters":["would"],"non-alphabetic characters.":["I"],"non-alphanumeric characters":["with","by"],"non-appearing nucleotides,":["but"],"non-atomic `writeIORef`":["since"],"non-awkward way).":["This"],"non-bit character":["is"],"non-constructive comment,":["but"],"non-earth planets":["in"],"non-empty before":["calling"],"non-empty input":["lists)."],"non-empty input,":["but"],"non-empty search":["lists)."],"non-empty strings":["instead"],"non-empty? There's":["nothing"],"non-exhaustive pattern":["match.","matches,","matching","warning."],"non-exhaustive\" would":["be"],"non-extended types":["(besides"],"non-functional background":["balking"],"non-illegal type":["was"],"non-matches you":["need"],"non-null and":["that"],"non-obvious behavior,":["especially"],"non-operator functions":["when"],"non-overlapping pattern":["work?"],"non-portable and":["I"],"non-recursive function":["would"],"non-space characters":["and"],"non-space. `isQuestion`":["would"],"non-specified recovery":["fallback."],"non-standard libraries,":["writing"],"non-standard, usually":["there's"],"non-standard. Typically,":["`where`"],"non-std lib":["string"],"non-strict `Map`":["would"],"non-strict data":["structure."],"non-strict evaluation":["model.","works,","you'd","works","works","and","actually","works","works","works","works","works","is","that","works,","works,","works","works","works,","will","works:","works","strategy:","works,","works,","and","works,","works,","works,","works,","works:","works,","works,","works,","works,","works:","and","works.","works.","works","works:","works,","works,","works,","model:","is","works,","works:","works:"],"non-strict evaluation)":["unless"],"non-strict evaluation,":["would","I'd","I","check","check","and","check"],"non-strict evaluation.":["More","This","Before","You","If","There","This"],"non-strict evaluation:":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"non-strict fold":["when"],"non-strict here,":["since"],"non-strict in":["terms","Data.Map"],"non-strict left":["fold,"],"non-strict manner":["in"],"non-strict right":["fold"],"non-strict the":["evaluations"],"non-strict version":["qualified"],"non-strict, so":["this","what"],"non-strict, your":["concerns"],"non-strictly which":["causes"],"non-strictness here":["is"],"non-strictness is":["how"],"non-strictness issue":["is"],"non-struct evaluation":["works,"],"non-tailsafe recursion,":["but"],"non-trivial example).":["What"],"non-whitespace character":["actually"],"non-whitespace characters;":["check"],"non-zero accounts":["now"],"nonSpace =":["not"],"nondeterministic IO":["random"],"none isLower":["a"],"none match,":["fall"],"none of":["them.","the","your","the","the","the","the","the","these"],"none p":["="],"nonempty tree":["is"],"nonpartial manner?":["("],"nonsence. Whatever":["I"],"nonsense inputs":["at","for"],"nonsense inputs,":["e.g."],"nonsense, but":["still"],"nonsense`. The":["input"],"nonsensical -":["I"],"noob and":["don't"],"noob, so":["please"],"nope.. again":["wrong"],"nor `foldl`":["evaluate"],"nor detailed":["unit"],"nor did":["it"],"nor the":["spec"],"normal Haskell":["code"],"normal fold":["wasn't"],"normal form":["you","(due","(due","in","(WHNF).","of"],"normal form)":["before"],"normal form),":["so"],"normal form,":["it","or","it"],"normal form.":["For","The"],"normal forms":["are"],"normal function,":["so"],"normal functions":["(`map`,"],"normal guards.":["And"],"normal list":["of"],"normal style":["rather"],"normal to":["have","put","do","be"],"normal-order evaluation":["language"],"normal-order evaluation,":["is"],"normalForms ws":["="],"normalisation. Have":["a"],"normalise` should":["do"],"normalization and":["sort)","w"],"normalization before":["you","the"],"normalization in":["the"],"normalization is":["only"],"normalization of":["`a`","the"],"normalization on":["the","`string`"],"normalization or":["the"],"normalization steps,":["but"],"normalization/splitting in":["a"],"normalize $":["str`?"],"normalize and":["w'"],"normalize for":["case","case"],"normalize it,":["and"],"normalize looks":["ugly.."],"normalize rather":["than"],"normalize the":["case","input","input,"],"normalize x":["/="],"normalize x`":["is"],"normalize) w`,":["although"],"normalize) x":["=="],"normalize` at":["the"],"normalized (`\"madnessandthenillumination\"`),":["is"],"normalized as":["well"],"normalized at":["most"],"normalized candidate":["and"],"normalized ciphertext":["should"],"normalized comparison":["for","for"],"normalized comparison.":["The","Otherwise,"],"normalized only":["once,","ones,"],"normalized value":["outside"],"normalized version":["is"],"normalized versions":["of","of"],"normalized words":["so"],"normalizedX be":["-"],"normalizing the":["words,","input"],"normally I":["only"],"normally `get`":["would"],"normally `where`":["goes"],"normally aligned":["with"],"normally expect":["to","this"],"normally has":["whitespace"],"normally like":["to…\",","to"],"normally look":["like"],"normally need":["to"],"normally only":["see"],"normally put":["data"],"normally styled":["such"],"normally the":["`_s`"],"normally there":["would"],"normally would":["use"],"normally written":["with","as","with"],"nosed about":["a"],"not \"Fine.":["Be"],"not \"to":["string\"."],"not $":["s","isSpace`","any"],"not 'G',":["'C',"],"not (any":["isLower","isLower","isLower","predicate","isLower"],"not (d":["100)`"],"not (isAlpha":["x)","c)"],"not (isLetter":["a))`"],"not (isSpace":["x)`"],"not (mod":["100))"],"not (null":["alphas)","letters)`.","xs))```"],"not *seriously*":["advocating"],"not .":["any","any","any","any","any","isLower`.","isAlphaNum","isLower`,","any","isAlphaNum`","any","any","any","isSpace","AlphaNum,","null"],"not 100%":["sure","sure","sure"],"not 100.":["The"],"not \u003cpre\u003eisAsking":["str"],"not A,":["C,G"],"not C":["feel"],"not GHC":["is"],"not Haskelled":["enough"],"not O(n":["log"],"not Vector":["(Vector"],"not `&amp;&amp;&amp;`,":["sorry,"],"not `(d":[":"],"not `255`":["since"],"not `Map":["String"],"not `Map.Map`).":["Second"],"not `TVar`s":["when"],"not ```0```":["(look"],"not ```Eq```":["instance),"],"not ```[A-Z]{2}[0-9]{3}```":["as"],"not `data":["Matrix"],"not `f(x)`.":["`f"],"not `foldl'`":["over"],"not `foldr`.":["It's"],"not `isYelling`":["instead"],"not `length":["bin"],"not `nucleotides`?":["(Should"],"not `prep":["str`."],"not `show":["'A'`,"],"not `total":["="],"not a":["huge","worse","commonly","quick","filter,","test","meaningful","problem,","fan","Haskell","concern","big","big","diehard","noun.","big","fantastic","big","strong","reasonable","fan","huge","lot","spine-strict","big","total","lot","lot","question.","purely","spine-strict","good","list","pleasure.","list","very","Haskeller,","big","lot","huge","huge","big","big","big","lot","[Char]...","Hashmap,","big","real","native","fan","predicate","more","real","lot","partially","huge","natural","big","difficult","fold.","case","great","lot","problem","best","huge","word","recursive","very","perfect","particularly","very","good","huge"],"not able":["to"],"not about":["solving"],"not accepted":["within"],"not accumulating":["a"],"not actual":["text"],"not actually":["trying","a"],"not add":["much","to"],"not added":["to"],"not address":["that."],"not advised":["to"],"not afraid":["of"],"not agree)":["see"],"not all":["Alphas","helpers","functions","cases).","that","that"],"not allow":["to","the","you"],"not allowed":["in"],"not alone":["with"],"not alpha-numeric,":["not"],"not already":["stored","familiar"],"not already,":["I'd"],"not also":["updated."],"not alter":["the"],"not always":["the","is","true"],"not ambiguous":["at"],"not amino":["acids."],"not an":["exclamation","alpha","anagram","algebraic","\"optimization","interleaving","individual","easy"],"not any":["cleaner"],"not applied":["to"],"not as":["clean.","efficient)","eager","yet","efficient","straightforward","clear","general","generic","fast","readable"],"not assign":["`normalize"],"not at":["all"],"not atomic":["in","(there's"],"not automatically":["perform"],"not aware":["of","of","of"],"not bad":["practice"],"not balanced":["it's"],"not be":["an","the","in","a","an","a","the","listed","a","efficient","tested","worth","forcing","surprised","worth","worth","as","empty\"","good","overridden.","a","a","appropriate.","efficient","replaced","processed","true","able","caught,","able","allocated,","that","the"],"not because":["I","of","it's","of"],"not being":["value","value-strict,","used","very","a","all","either","evaluated"],"not belong":["to"],"not best":["practices"],"not bother":["with"],"not bothered,":["compiler"],"not build":["Map"],"not but":["it's"],"not by":["any"],"not calculated":["more"],"not century`":["sort"],"not certain":["this","my","if"],"not change":["implementation"],"not check":["for","for"],"not checked":["how"],"not checking":["more"],"not clash":["with"],"not clear":["it's"],"not collecting":["thunks."],"not comfortable":["with","with"],"not coming":["to","to","to"],"not comment":["as"],"not common":["to","to","to","to","to","to","to","to"],"not commonly":["used"],"not compile,":["but"],"not completely":["convinced,","understanding","wrong."],"not complicated":["but"],"not confident":["in"],"not considered":["anagrams.","?"],"not constant":["time."],"not contain":["hardcoded"],"not contribute":["in"],"not convey":["the"],"not convinced":["it","this"],"not correct":["for"],"not correct,":["as"],"not count":["it"],"not cover":["what","this","all"],"not covered":["very","by"],"not create":["the"],"not creating":["a","a","a"],"not dealing":["in"],"not deem":["too"],"not define":["the","`strToLower`"],"not defined":["anywhere"],"not depend":["on"],"not dependent":["on"],"not derive":["Eq"],"not descriptive":["and"],"not desirable,":["you"],"not detect":["a"],"not developed":["as"],"not different":["sides,"],"not disagreeing":["on","whatsoever"],"not distinguish":["two"],"not dividable,":["and"],"not divisibleBy":["100)\u003c/pre\u003e"],"not do":["two","any","it)."],"not doing":["this,"],"not done":["infix"],"not easy":["to"],"not enabled":["(such"],"not end":["in"],"not enough":["entropy","by","here,"],"not enouph":["and","and"],"not entering":["my"],"not entirely":["happy","clear","thrilled","happy","satisfied"],"not equal\"":["is"],"not equal\".":["Perhaps"],"not equal),":["it's"],"not essential,":["just"],"not even":["using","sure","gonna","covered","used"],"not even`.":["That's"],"not ever":["force"],"not exactly":["clear;","clear","\"QN\".","what","sure"],"not exceed":["80"],"not exhaustive.":["Would"],"not exist":["a"],"not exists":["in"],"not expected":["to"],"not expense":["with"],"not experienced":["with"],"not explicitly":["introducing"],"not export":["everything"],"not export),":["so"],"not exported":["should","so","so","so","so"],"not exported,":["it's"],"not exporting":["it"],"not exposing":["isQuestion","isQuestion"],"not familiar":["with","enough","with.","with","with","with"],"not faster":["for"],"not fault":["code"],"not feel":["like"],"not find":["`chainl1`","anything","it.","it","it.","one.","it","module\""],"not for":["a","implementing","function","accessing","actual"],"not force":["the","it's"],"not forced,":["consider"],"not forces":["it's","values","it's"],"not forcing":["accumulator","the"],"not found":["one","stop","stop"],"not free":["to"],"not frowned":["upon."],"not fulfil":["isUpper,"],"not fully":["understand"],"not functional":["at"],"not gain":["much"],"not get":["a"],"not getting":["it?"],"not give":["the"],"not go":["to"],"not going":["to","to","to"],"not good":["at","here,","as","here."],"not great":["practice","use"],"not guaranteed":["that","to"],"not had":["to"],"not happen":["if","if"],"not happy":["with","with","with"],"not hard":["to"],"not have":["\"clicked\"","to","to","the","a","to","to","it.","nearly","the","them","the","this","that"],"not having":["the","done","to"],"not highlighted":["as"],"not hold":["an"],"not how":["this"],"not ideal":["(causes","since","for"],"not identity":["for"],"not idiomatic":["naming.","here.","to"],"not if":["you"],"not ignored":["and"],"not immediately":["clear"],"not immutability,":["right?"],"not import":["anything?"],"not important":["for","for","since"],"not important.":["If"],"not in":["sorted","the","point","base,","obvious","Haskell.","the","the","all","the","the","the","base).","love","love","expression.","point-free","the","a","a","that","ghci."],"not including":["the"],"not including)":["phase","phase"],"not incremented":["for"],"not independent,":["which"],"not independent.":["Another"],"not insanely":["interesting."],"not intended":["to"],"not interesting":["with"],"not invalid,":["but"],"not is,":["but"],"not isLower`":["would"],"not it":["means"],"not it's":["necessary?"],"not just":["have","as","use","amortized.","put","about","write","those","\"","write","the","the","MonadPlus","the"],"not know":["the","about","about","that","their"],"not language":["behaviour,"],"not less":["readable","efficient","than"],"not like":["```null","it'd","how","big","```private```","we've"],"not likely":["to"],"not look":["pretty"],"not loosing":["memory"],"not lower":["case\"."],"not make":["assumptions","much","them"],"not making":["it"],"not managed":["to"],"not match.":["But"],"not matched:":["False","False"],"not matching":["the"],"not matter":["but","much,"],"not maximally":["readable"],"not mean":["to"],"not mentioning":["this"],"not missing":["anything,"],"not more":["so?","readable","complex"],"not moved":["by"],"not much":["more","benefit","cleaner.","reason","to","more","more","nicer","to","like","advantage","different.","improvements","chance"],"not much.":["I"],"not multiples":["of"],"not my":["last"],"not n":["times."],"not nearly":["as","familiar"],"not necessarily":["an","the","acting","for","the","the","worth","better"],"not necessary":["when","since","either,","is","to","at","to","since","for"],"not necessary,":["since"],"not necessitate":["unsafePerformIO)."],"not need":["to","to","a","`randomChar`","the","to","to","parentheses","to","to","`elem`,"],"not needed":["here)","to","since","here.","if","(function"],"not normal":["to"],"not null":["requirement"],"not obvious":["what","what","whether"],"not obvolious":["at"],"not of":["key/value"],"not often":["relevant."],"not often)":[":-)"],"not on":["line"],"not one":["of"],"not only":["using","simpler,","one.","`Int`","trying","trying","shadows","on","keys."],"not optimal":["in","for"],"not optimal,":["can"],"not optimize":["prematurely"],"not optimizing":["-"],"not overload":["String"],"not part":["of","of","of","of","of","of"],"not particularly":["necessary","satisfied","nice"],"not pass":["all","the","anymore.","AFAIU"],"not passing.":["I"],"not pattern":["match"],"not performant":["for"],"not point-free,":["you"],"not possible":["for","to"],"not postponing":["work"],"not practical":["to"],"not practice":["taking"],"not preferable":["here,"],"not present,":["I"],"not pretty.":["You"],"not prevent":["comments"],"not prime,":["earlier"],"not proud":["of","of"],"not put":["the"],"not qualify.":["Also,"],"not quite":["as","sure","function","sure","the","sure","right","sure"],"not quite,":["see"],"not re-inventing":["the"],"not real-time":["seconds)"],"not realized":["how"],"not realizing":["it"],"not really":["help","sure","something","needed","needed","need","needed","an","what","what","hashing","sure","better.","sure","a","any","sure","equivalent,","sure","relevant","sure","in","interesting","feasible","required.","a","nice","the","worth","sure,"],"not recommended,":["and"],"not recomputoing":["the"],"not relevant":["to"],"not remember":["it."],"not repeated":["everywhere,"],"not repeating":["code.","myself"],"not represent":["some"],"not require":["people"],"not required":["in","but","due","around","to","by"],"not required,":["this"],"not return":["a","the","the","a"],"not reverse":["it's"],"not reversing":["the"],"not rewrite":["an"],"not right":["function"],"not safe":["on","in"],"not samples?":[":confounded:"],"not satisfied":["with","with"],"not say":["that"],"not saying":["it's","it's"],"not search":["in"],"not see":["how","how"],"not seeing":["how"],"not seem":["like"],"not semantically":["equivalent"],"not shorter":["though)."],"not shorter.":["My"],"not shouting":["and"],"not simpler":["than"],"not simpy":["```type"],"not so":["important","clear,","interesting","nice","common","great","readable.","great.","effective","obvious","frightening.","optimal","clean","clear","good"],"not solved":["meetup"],"not some":["other"],"not something":["I"],"not specify":["this"],"not spent":["too"],"not standard":["Haskell","style"],"not stick":["with"],"not strict":["in","in","to","so","in"],"not strict,":["this"],"not submit.":["Unsubmit's"],"not such":["a","a"],"not suggest":["it"],"not suggesting":["a"],"not sum.":["Good"],"not super":["nice"],"not super-valuable":["in"],"not supplied":["by"],"not supposed":["to","to"],"not sure":["how","it's","how","how","whether","how","if","I","I","I","if","should","the","that","how.","how","if","if","if","how.","if","why","why","if","which","I","whether","whether","if","if","if","if","that's","how","it's","about","how","I","how","why","when","if","what","it","what","I","this","of","having","exactly","what","I","were","about","if","what","if","about","why","you're","whether","if","this","which","I","the","if","if","if","how","how","how","how","how","how","that","that","its","what","if","that","whether","if","about","faithfully","that","that","i","how","if","if","that","if","that","why","I","how","why","where","I","what's","you're","if","I'm","it","if","about","what","if","how","why","how","if","that","though","I","what","that","whether","either","if","quite","if","how"],"not sure,":["I"],"not sure...":["`Data.Char`"],"not syntax.":["I"],"not tail":["recursive.","recursive"],"not tailrecursive,":["i.e."],"not take":["constant"],"not tell":["me"],"not that":["simple.","it","hard","I","happy","important","far","much","bad.","much","great"],"not the":["standard","right","question","type","README.","best","same","value","best","most","way","same","compiler","caller.","default","main","best","robot","return","most","fastest","one","bit.","actual","whole","actual","best","thread","type","case?","ideal","best","great","whole","minimal","equals"],"not then":["it"],"not there":["are","on","on"],"not think":["of","this","`foldl`","the","of"],"not thought":["about"],"not thrilled":["with"],"not to":["use","(for","use","spoil","use","simple","use","use","complicate","write","use","look","use","remember","enable","observe","use","move","the","apply","use","use","use","say"],"not too":["concerned","much","hard","confident","much","big","many","familiar","many"],"not top-level":["bindings."],"not total":["because"],"not total,":["so"],"not totally":["sure"],"not tried":["to"],"not try":["and","to"],"not two,":["due"],"not typical":["to"],"not uncommon":["to","either."],"not understand":["(hence","how","your"],"not understanding":["it","with"],"not unique...":["Strugging"],"not urgent":["because"],"not use":["either","`show`.","it),","the","the","`span`","Data.Char.toLower","`isAllergicTo`","`count`","a","`head`","optimizations).","`foldl`,","pattern","a","two","`show`","guards","`count`","`filter","fold","`M.toList","```Data.Set```","pattern"],"not used":["now","anywhere.","for","in","to","and","beyond","Data.List.Split","to","to","either","for","now."],"not used:":["`x'"],"not using":["`foldl'`","them.","it","anything","`Data.Map`.","recursion","explicit","error","guards","a","Data.List.Split,","a","`do`.","old"],"not usually":["necessary","implemented"],"not valid":["syntax,"],"not value-strict":["so"],"not versed":["in"],"not very":["fond","good","happy","interesting.","fast.","sure","commonly","handy","easy","readable","smart","efficient,"],"not viewing":["code"],"not want":["to","to"],"not warn":["of"],"not weird":["that"],"not well-specified":["and"],"not what":["you","you","you're"],"not when":["compiled"],"not where":["it"],"not whether":["the"],"not willing":["to"],"not with":["a"],"not within":["the"],"not work":["because","for","here):","if","because","in"],"not work,":["because"],"not work?":["Also,"],"not working":["for","at"],"not working,":["or","so"],"not worse":["then"],"not worth":["it,","the","defining","too"],"not wrapping":["and"],"not yet":["submitted.","understand",":-)"],"not you":["change","use"],"not!) then":["it"],"not!), so":["you"],"not\", so":["you"],"not( isSpace(":["x))]"],"not). Most":["optimizations"],"not, I'll":["move"],"not, I'm":["still"],"not, and":["to"],"not, as":["`insertNucleotide`"],"not, but":["value","this"],"not, or":["maybe"],"not, passes":["along"],"not, so":["I"],"not, the":["problem"],"not-Earth case":["as"],"not. Feels":["like"],"not. Here's":["how"],"not. I":["see","understand","implemented"],"not. It":["does"],"not. The":["spine","majority"],"not. This":["will"],"notDuplicate =":["(/=)"],"notDuplicate compareAnagram)`":["if"],"notDuplicate into":["`(/=)`"],"notDuplicate` to":["match"],"notIdentical w'":["x"],"notS]` can":["be"],"notS`? Looks":["good."],"notable exception":["is"],"notable variables":["in"],"notation (`a1`":["to"],"notation acceptable":["or"],"notation and":["an","really"],"notation base.":["Multiplying"],"notation based":["on"],"notation because":["they're"],"notation into":["it"],"notation it":["will"],"notation looks":["easier"],"notation to":["make"],"notation) ```question```":["by"],"notation, and":["using"],"notation, looks":["like"],"notation? I've":["seen"],"notation— no":["need"],"note \"x":["m\""],"note I'd":["make"],"note about":["the","['0'..'9']"],"note but":["I"],"note here":["is","is","is"],"note here,":["to","the"],"note in":["the"],"note is":["that","that"],"note of":["where"],"note on":["`sameLetters`!"],"note readable":["and"],"note that":["`String`","`show","this","\"return","the","most","a"],"note the":["use"],"note, I":["think"],"note, thank":["you!"],"note, you":["should"],"note: curry":["and"],"note: the":["parens"],"notes (not":["necessarily"],"notes for":["several"],"notes go,":["this"],"nothing about":["`areaCode`"],"nothing at":["all"],"nothing but":["a"],"nothing custom":["at"],"nothing here":["to"],"nothing in":["your","this","code"],"nothing is":["lost"],"nothing left":["to"],"nothing particular,":["just"],"nothing preventing":["me"],"nothing really":["terrible"],"nothing special":["on","with"],"nothing that":["would","helps.","prevent"],"nothing to":["do","do","the","do","complain","do","do","do","do","restrict"],"nothing wrong":["with","with","with","with","with","with","with","with","with","with","with","with","with","with","with","with","with","with","with"],"notice because":["you"],"notice how":["you're"],"notice that":["you're","you","when","in","`takeDown`","you","`a","maybe","a","it","everything","one"],"notice that.":["And","If"],"notice them":["as"],"notice this":["the"],"notice! Just":["forgot"],"notice, you":["are"],"noticeable amount":["of","of"],"noticeable if":["you"],"noticeably different":["than"],"noticed about":["general"],"noticed both":["lower"],"noticed is":["the","that"],"noticed nice":["little"],"noticed recently":["is"],"noticed that":["you","\u003ccode\u003egroupBy\u003c/code\u003e","while","scores","the","you're"],"noticed that.":["Fixed!"],"noticed the":["function"],"noticed this":["already,","issue"],"noticed, but":["argument"],"noting that":["some"],"noting there":["is"],"notion of":["punctuation"],"notion to":["keep"],"noun, perhaps":["use"],"novice Haskellers":["to"],"novices. To":["me,"],"now (though":["both"],"now -":["didn't"],"now 3/4":["functions"],"now I":["know!","too","know","will","know","need","am.","know"],"now I'm":["brushing","not","returning"],"now I've":["ripped"],"now ^^...":["but"],"now `[('a',":["(1)"],"now `count'`":["first"],"now a":["lot"],"now all":["of"],"now and":["redone","will","then"],"now are":["superfluous"],"now as":["well…"],"now but":["this","Parallel"],"now code":["passes"],"now deprecated":["functions"],"now faster,":["but"],"now figured":["this"],"now following":["on"],"now for":["it"],"now implicitly":["depends"],"now in":["point-free","point-free"],"now instead":["of"],"now involves":["only"],"now is":["that"],"now it":["is","looks","is","is","creates","even","flips","looks","looks"],"now it's":["really","a","looking"],"now just":["`addZeros`"],"now lets":["check","combine"],"now looked":["in"],"now make":["`isAnagram`"],"now my":["brain"],"now only":["exporting"],"now pass,":["but"],"now pleased":["to"],"now realizing.":["I'm"],"now regarding":["the"],"now since":["only","you"],"now slower":["(it"],"now strict,":["uses"],"now stripping":["spaces"],"now take":["a"],"now thanks":["to"],"now that":["I","you're","you","I'm","I","I'm","you","[splitWhen](http://hackage.haskell.org/package/split-0.1.1/docs/Data-List-Split.html#v:splitWhen)","I"],"now that's":["not"],"now the":["solution","essence"],"now too),":["but"],"now we":["understand","have"],"now will":["take"],"now you":["will","have","have","have"],"now you're":["testing"],"now your":["module"],"now! Thanks":["a"],"now\"... blinding":["me"],"now) would":["be"],"now), and":["generally"],"now): `[1..3]":["\u003e\u003e="],"now, Gaelan.":["That"],"now, I":["just"],"now, I'll":["stick"],"now, and":["the","doing"],"now, but":["I","there","I","this","I"],"now, except":["that"],"now, it":["pretty"],"now, must":["have"],"now, that's":["very"],"now, the":["list"],"now, why":["not"],"now. \"Write":["a"],"now. Also":["you"],"now. I":["think","like","think"],"now. I'll":["see"],"now. It":["would"],"now. Only":["thought"],"now. So":["with"],"now. Thank":["you,"],"now. Using":["`foldl'`"],"now. is":["`txt"],"now? Since":["both"],"now? The":["list"],"npbarnes mentions":["is"],"npbarnes. I":["did"],"nr`. You":["could"],"nred to":["indent"],"ns =":["sort"],"ns ==":["nx"],"ns) -\u003e":["(a,"],"ns))` is":["equivalent"],"ns, ci":["0.950","0.950","0.950","0.950","0.950","0.950"],"ns, lb":["204.1705","196.0717","57.83001","152.2779","11.27313","81.85053"],"ns, ub":["567.9838","505.8640","79.17362","218.3281","15.02281","237.6315"],"ns]` is":["equivalent"],"nuances with":["haskell"],"nub and":["Split"],"nub` gets":["the"],"nuc =":["nuc","case"],"nuc` which":["would"],"nucleo` would":["be"],"nucleotide \"":["++"],"nucleotide \"++)":["."],"nucleotide (even":["though"],"nucleotide (replicate":["0)`."],"nucleotide ++":["'\"."],"nucleotide \u003c-":["strand]`"],"nucleotide =":["nucleotide"],"nucleotide ==":["thymidine"],"nucleotide and":["counting","makeNucleotide"],"nucleotide because":["if"],"nucleotide characters":["in"],"nucleotide count.":["But"],"nucleotide for":["uracil"],"nucleotide it's":["no"],"nucleotide occurs":["in"],"nucleotide or":["not","generate"],"nucleotide polymerase":["inhibitor,"],"nucleotide string":["for","for"],"nucleotide that":["may"],"nucleotide transcription":["and"],"nucleotide type":["by"],"nucleotide without":["any"],"nucleotide you'll":["have"],"nucleotide |":["nucleotide"],"nucleotide\" ++":["show"],"nucleotide' rather":["than"],"nucleotide) in":["order","order"],"nucleotide, I.e.":["it"],"nucleotide, or":["nucleotide"],"nucleotide, you'd":["probably"],"nucleotide-count solution":["apply"],"nucleotide. Can":["you"],"nucleotide. It's":["possible"],"nucleotideCounts ::":["String"],"nucleotideCounts =":["Map.fromListWith","fromListWith"],"nucleotideCounts a":["bit,"],"nucleotideCounts s":["="],"nucleotideCounts to":["use"],"nucleotideCounts walks":["the"],"nucleotideCounts, not":["sure"],"nucleotideCounts... Anyway":["it's"],"nucleotideToRNA 'T'":["="],"nucleotideToRNA ::":["Char"],"nucleotideToRNA n":["="],"nucleotides (`++`":["is"],"nucleotides and":["forcing","returns"],"nucleotides are":["in"],"nucleotides as":["input)"],"nucleotides in":["`transcribe`,"],"nucleotides into":["a"],"nucleotides is":["--"],"nucleotides that":["don't"],"nucleotides this":["will"],"nucleotides). You":["could"],"nucleotides, and":["then"],"nucleotides, but":["the"],"nucleotides, than":["you"],"nucleotides, you":["have"],"nucleotides. 4":["of"],"nucleotides. Passes":["the"],"nucleotides. That'd":["avoid"],"nucleotidesCounts -":["thanks."],"nudge in":["the"],"null $":["words","do","l"],"null &&&":["all"],"null (drop":["n"],"null (tail":["xs)`,"],"null (x":["\\\\"],"null (y":["\\\\"],"null .":["dropWhile","removeSilence"],"null alphas":["&&"],"null case":["is","and"],"null case,":["you'd"],"null cases":["are"],"null check":["is","is","(which","isn't","into"],"null check.":["Since"],"null checks":["in"],"null comps'":["logic"],"null comps',":["as"],"null doesn't":["need"],"null instead":["of"],"null l":["then"],"null lists":["first"],"null or":["not","not."],"null requirement":["embedded"],"null s":["=&gt;"],"null voice`":["or"],"null with":["the"],"null x":["then"],"null xs":["&&"],"null) (all":["isUpper)`"],"null) a":["&amp;&amp;"],"null) is":["generally"],"null) v`":["is"],"null)` and":["the"],"null)` have...":["is"],"null)`, you":["could"],"null, I":["thought"],"null, i'll":["have"],"null-ish Meh":["case."],"null` would":["be"],"num =":["('0',","('0',"],"num rdeepseq`":["as"],"num, num,":["num]"],"num, num]":["where"],"num` is":["repeated"],"number \"111111111111\".":["Although"],"number $":["string`"],"number (1":["and"],"number 220,":["nothing"],"number =":["('1','9')"],"number `10000":["-"],"number `1111`..":["which"],"number `219`":["come"],"number against":["every"],"number and":["returns","prettyPrint","I"],"number as":["a"],"number at":["all,"],"number but":["I"],"number can't":["simultaneously"],"number char,":["everything"],"number function":["could"],"number generation":["code"],"number in":["various","`parts`","base"],"number into":["a"],"number is":["123*.-123-.--1234\"`.","even","\u003e=","thus","probably","valid","to"],"number is:":["123."],"number may":["be"],"number of":["explicit","days","chars,","Upper,","things","collisions","rows","things","subtle","points","words","columns","characters","reasons","top","paragraphs","comparisons","Prelude","other","letters","moves","letters","reasons:","days.","functions","top-level","levels","times","ways","times","arguments.","thunks","times,","++.","reductions.","elements","different","unique,","different/equal","different","elements.","iterations","iterations","days","Trues","arguments.","unique","days","times.","maps"],"number parser":["is"],"number pattern":["and"],"number that":["is","contains"],"number that's":["too"],"number to":["be","string,"],"number will":["just"],"number without":["building"],"number would":["make"],"number, and":["I","the"],"number, but":["to"],"number, please":["express"],"number, since":["a"],"number, where":["square"],"number, which":["is"],"number. Consider":["42"],"number. For":["this"],"number. The":["solution"],"number. This":["happens"],"number? You":["only"],"numbers (or":["6n"],"numbers (see":["`fromEnum`,"],"numbers I've":["already"],"numbers after":["2,"],"numbers and":["punctuation.","others.","accumulate","0","0"],"numbers are":["probably","factors","expressed","expressed","going","handled:","doubled"],"numbers as":["they"],"numbers by":["rewriting"],"numbers could":["be"],"numbers either":["way)."],"numbers for":["primes","a","the"],"numbers from":["factors"],"numbers in":["the","it.","this","prettyPrint.","the"],"numbers n,":["`n^0"],"numbers of":["the"],"numbers only,":["e.g."],"numbers or":["letters:"],"numbers really":["important"],"numbers regardless":["of"],"numbers should":["the","be"],"numbers so":["that"],"numbers somewhere":["right?"],"numbers that":["were","are","you","begin"],"numbers to":["search","the"],"numbers were":["supported"],"numbers will":["be"],"numbers with":["more"],"numbers). The":["way"],"numbers, and":["11"],"numbers, in":["practice"],"numbers, since":["a"],"numbers. `219`":["is"],"numbers? split":["Places"],"numeral ++":["go"],"numeral in":["question,"],"numeral is":["repeated"],"numeral list":["as"],"numeral no":["longer"],"numeral once,":["and"],"numeral then":["you"],"numeral values":["at"],"numeral you":["have"],"numeral, you":["can"],"numeralSymbols, and":["build"],"numerals equivalent":["so"],"numerals even":["exist,"],"numerals in":["it"],"numerals, and":["when"],"numeric characters,":["including"],"numeric value":["for"],"numerical types":["as"],"numerics libraries":["that"],"numerous calls":["to"],"numpy for":["Python)."],"nut to":["crack!"],"nut, the":["largest"],"nuts trying":["to"],"nuts, but":["here"],"nx =":["sort"],"nx avoids":["a"],"o i++v`":["are"],"obey some":["property."],"obfuscated Haskell":["contest."],"obfuscates the":["meaning"],"obfuscates what's":["going"],"obfuscation to":["me."],"obfuscation, which":["I"],"object at":["the"],"objection to":["closing"],"objectively less":["code"],"objects, to":["do"],"obliged for":["your"],"obscure but":["it's"],"obscure magic":["numbers."],"obscure solution.":["The"],"obscure to":["require"],"obscure, but":["it"],"obscured some":["of"],"observation, npbarnes.":["I"],"observations with":["the"],"observe that":["rule"],"observed by":["another"],"observed to":["take"],"obsolete if":["you"],"obstacle is":["the"],"obsure code":["with"],"obtain a":["\"looks"],"obviating the":["need"],"obviosly) or":["in"],"obvious (eg:":["`fromMaybe`),"],"obvious and":["more","ideally"],"obvious as":["well:"],"obvious clarity":["of"],"obvious for":["this"],"obvious from":["context."],"obvious in":["the"],"obvious nits":["to"],"obvious one":["seems","is"],"obvious solution":["using"],"obvious than":["using","`onlyDigits`"],"obvious to":["use","the"],"obvious way":["is","to","to"],"obvious way,":["and"],"obvious what":["each","the","the"],"obvious what's":["going"],"obvious whether":["or"],"obvious why":["I","they"],"obvious, I'm":["a"],"obvious, and":["it's","we","it","you","you","all","you"],"obvious, like":["`ord"],"obvious, so":["I'd"],"obvious. It":["also"],"obvious. Sometimes":["convention"],"obviously I'm":["trying"],"obviously `any":["f"],"obviously `map`":["isn't"],"obviously be":["great,"],"obviously doesn't":["matter"],"obviously flawed,":["and"],"obviously not":["much.","used"],"obviously simple":["than"],"obviously subjective":["and"],"obviously suited":["to"],"obviously takes":["up"],"obviously the":["tests"],"obviously there":["is"],"obviously this":["works"],"obviously total":["overkill"],"obviously, given":["currying,"],"obviously. I":["wonder"],"obvolious at":["all"],"occasions where":["the"],"occur due":["to"],"occur in":["strict","DNA:","RNA:"],"occur with":["MVar's."],"occurred to":["me,","me"],"occurrence of":["`Map`.","weekday","the","this.","'T'"],"occurrence, and":["it"],"occurrences in":["the"],"occurrences of":["'T'","equal"],"occurrences seemed":["elegant"],"occurs in":["the","C"],"occurs. Precomputing":["every"],"ocrmap)` is":["equivalent"],"ocrmap)`. Not":["really"],"octal, or":["hexadecimal"],"odd -":["if"],"odd and":["you"],"odd candidates":["(prepending"],"odd divisors,":["it"],"odd divisors?":["Because"],"odd number":["against"],"odd numbers":["after","and","(or"],"odd that":["we","`robotName`","that"],"odd to":["have","me..."],"odd x":["="],"odd, it":["basically"],"odd, most":["people"],"oddly not":["part"],"of \"Learn":["you"],"of \"No":["more"],"of \"T.pack\"?":["(I'm"],"of \"\\n\"":["to"],"of \"\\n\\r":["\\t\\v\\xA0\\x2002\""],"of \"a":["a","triangle"],"of \"a\"":["or"],"of \"all":["characters"],"of \"for":["all"],"of \"in":["reverse\""],"of \"no":["more"],"of \"not":["cheating\""],"of \"parsing\"":["the"],"of \"swapable\"":["`Char`s"],"of \"top-level\"":["functions."],"of 'T'":["with","with"],"of 'are":["different"],"of (\\xs":["-\u003e"],"of (key,":["value)"],"of *isAnagram*":["before"],"of *let*":["and"],"of *n*-tuples":["where"],"of *possible*":["primes,"],"of ++":["you"],"of 0":["as","for"],"of 0,":["which"],"of 0..9":["from"],"of 1's":["and"],"of 10":["from","(123"],"of 100":["and"],"of 100)":["I"],"of 128":[":)"],"of 1]":["Compiling","Compiling","Compiling","Compiling","Compiling"],"of 1s.":["It's"],"of 2":["maps","or","or","(101"],"of 2-tuples":["you"],"of 2-tuples,":["and"],"of 2013":["anyway)"],"of 4":["and","or","guards"],"of 400.":["I"],"of 48":["(same"],"of 5":["separated"],"of 6n+1":["or"],"of 6n-1":["or"],"of 7":["out","instead"],"of 9's":["and"],"of 99":["items."],"of @krista":["last"],"of @ruthie's":["comments"],"of Applicative":["and"],"of Applicative's":["((-&gt;)"],"of Applicative,":["and"],"of Array":["for"],"of BST":["that"],"of BankAccount":["is"],"of Bool":[":)","to"],"of Bools":["by"],"of Bools,":["how"],"of Bounded":["here"],"of Bounded/minBound":["in"],"of Char":["for"],"of Char?":["Consider"],"of Clojure":["code",";)"],"of DFA":["to"],"of DNA":["they"],"of Data.Array.":["You"],"of Data.ByteString":["is"],"of Data.DList":["(which"],"of Data.List":["was"],"of Data.List.":["It"],"of Data.List.Split's":["`wordsBy`,","`wordsBy`"],"of Data.List.Split.":["But"],"of Data.Map":["is","(the","and","is","were","adds","(value-lazy)","(value-lazy)","causes","(the","for","had","is","leads","doesn't","can"],"of Data.Map,":["which","as"],"of Data.Map.":["The","The","Incrementing","The","By","Also,","Otherwise","It's"],"of Data.Map.Strict":["(value-strict).","(value-strict).","(value-strict),"],"of Data.Map.Strict,":["because"],"of Data.Text":["here,","is","here"],"of Data.Text's":["chunksOf","`split`."],"of Data.Time.Calendar.WeekDate.toWeekDate.":["Can"],"of English,":["right?"],"of Enum":["and"],"of Eratosthenes":["from"],"of Functor":["are"],"of Functor,":["Applicative"],"of GHC":["are","in"],"of Haskell":["users.","but","(namely","that","Platform.","I've","Platform,","Platform","here,","Platform."],"of Haskell's":["layout","non-strict","non-strict","non-strict","evaluation","evaluation","execution","non-strict","non-strict","evaluation","evaluation"],"of Haskell,":["I"],"of IO":["monads"],"of IORef":["because"],"of Lazy,":["because"],"of M.":["A."],"of MVars":["but"],"of Map":["it","doesn't","do"],"of Map's":["functionality,"],"of Map,":["I"],"of Map.map":["is"],"of Maybe":["Integer.","here,"],"of Mercury":["-&gt;"],"of Monad":["operators"],"of Monad's":["liftM2."],"of Monad,":["it's"],"of Monoids,":["and"],"of Nothing":["and"],"of O(n)":["because","for"],"of O(n^2*m),":["let"],"of Pairs.":["Both"],"of Parallel":["and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and","and"],"of Paralllel":["and"],"of Parsec":["though"],"of Prelude":["are","don't","and","functions"],"of Pretty":["typeclass"],"of Program":["Design`"],"of RAM":["and"],"of RNA":["anywhere."],"of Regex":["in"],"of Robot":["are","doesn't"],"of Robot,":["but"],"of Roman":["numerals"],"of SPJ's":["presentations."],"of STM":["comes"],"of STM.":["However"],"of STMVar,":["but"],"of Schedule":["is"],"of Scrabble":["the"],"of Set":["is"],"of Simon":["Peyton","Marlow","Marlow's"],"of String":["anyway."],"of String,":["which"],"of Trues":["from"],"of TupleSections,":["nice"],"of U":["is"],"of Upper,":["Lower,"],"of Z":["requires","(or"],"of [Avoiding":["Explicit"],"of [String],":["so"],"of []":["-\u003e"],"of _[Learn":["You"],"of _`":["line"],"of `!`":["\"fooled\""],"of `$`":["to","and"],"of `&&`":["is.","are","and"],"of `&amp;&amp;`":["happens"],"of `'U'`":["with"],"of `(\"CM\"++)":["."],"of `($)',":["namely","namely"],"of `($)`,":["`(.)`,"],"of `(((1":["+"],"of `(((1)":["+"],"of `(((…)":["+"],"of `((…)":["+"],"of `(+)`":["which","(you"],"of `(++)`":["in"],"of `(.)`":["for"],"of `(.)`.":["`add`"],"of `(/=)`":["and"],"of `(==":["'","'","'","'?')`."],"of `(PrimMonad":["m,"],"of `(\\s":["-&gt;"],"of `(\\w":["-\u003e"],"of `(insertWith":["(+)"],"of `(join":["(*))`"],"of `(map":["toLower"],"of `(word,":["_)`"],"of `(x:xs)`":["later."],"of `++`":["which","might"],"of `+`.":["Unlikely"],"of `.`,":["it"],"of `/=`":["so"],"of `1":["+"],"of `2^n`":["but"],"of `6`.":["The"],"of `\u003c$\u003e`":["and","are"],"of `\u003c|\u003e`":["you","but"],"of `==`":["for","and"],"of `==`.":["Note"],"of `\u003e\u003e":["return"],"of `\u003e\u003e=`":["can","rather"],"of `Alternative`,":["I've"],"of `Bool`":["this"],"of `CharPattern":["-\u003e"],"of `Char`).":["But"],"of `DNA":["[Base]`."],"of `Data.List'":["is"],"of `Data.List.unfoldr`":["and"],"of `Data.Map.Strict'":["is"],"of `Data.Map`":["as","only."],"of `Data.Map`.":["`Data.Map.Map`"],"of `Data.Text`":["functions,"],"of `Enum`":["instance"],"of `FOOBAR`?":["I"],"of `FlexibleInstances`":["(it's"],"of `Integer`,":["so"],"of `Integral":["int`,"],"of `Integral`s,":["not"],"of `M.toAscList`,":["there"],"of `M.unionsWith":["(+)`"],"of `MVar`s":["and"],"of `Maybe`":["or"],"of `Monad`":["requires"],"of `Nucleotide`":["as"],"of `Other`":["for"],"of `Prelude.head`,":["for"],"of `Read`,":["and"],"of `S.sorted`.":["So"],"of `STRef`,":["since"],"of `Set`.":["If"],"of `Show`":["to"],"of `Show`.":["I"],"of `StatementType`":["and"],"of `String":["-\u003e"],"of `String`":["is"],"of `Text":["-&gt;"],"of `TupleSections`":["in"],"of `Weekday`":["(and"],"of `[(w,":["1)"],"of `[1..dv]":["\u003e\u003e="],"of `[Char]`":["(`String`"],"of `[Char]`,":["even"],"of `[Char]`.":["They"],"of `[Eggs..]`?":["You"],"of `[]`":["for"],"of `\\_":["-&gt;`."],"of `\\xs@(x:more)":["-\u003e"],"of `^`":["then"],"of `_`":["in"],"of ```++```":["does"],"of ```++```.":["In"],"of ```1":["+"],"of ```1```s":["(have"],"of ```Beer.toUpper```.":["I"],"of ```Data.Map.Strict```":["convenience"],"of ```Data.Map```,":["you"],"of ```Data.Set```":["in"],"of ```M.Map```,":["use"],"of ```Map```,":["but"],"of ```True```":["and"],"of ```concat```":["and"],"of ```foldl```":["(in"],"of ```group":["$"],"of ```isAnagramOf```":["for"],"of ```map```.":["In"],"of ```mod```,":["it's"],"of ```nub```,":["it"],"of ```replicate":["0```"],"of ```sortedWordsSame```":["and"],"of ```sorted```.":["Not"],"of ```yelling```":["to"],"of `a":["++"],"of `a'`":["in"],"of `a`":["out"],"of `a`.":["It"],"of `acc`":["is"],"of `acct`":["and"],"of `all":["isAsciiUpper","isSpace"],"of `allCaps`":["and","and"],"of `allTrue`":["might"],"of `all`":["instead","instead","or","is","as","rather"],"of `allergies`.":["You"],"of `allergies`?":["It"],"of `alter`,":["since"],"of `anagramsFor`":["(so-called","(even"],"of `anagramsFor`.":["Although"],"of `and":["."],"of `and`,":["possibly"],"of `answer`":["more"],"of `any`":["or","or"],"of `areAnagrams`":["where"],"of `areaCode`":["as"],"of `atLeastOneUpperCase`":["would"],"of `bar'":["at","at"],"of `canAttack`":["as"],"of `candidates`":["it"],"of `capitalize`":["are"],"of `case`":["relative"],"of `ceiling`.":["http://hackage.haskell.org/package/base-4.6.0.1/docs/Prelude.html#v:ceiling"],"of `chmod`.":["Adding"],"of `choice`":["to"],"of `chunk":["."],"of `concat":[".","."],"of `concatMap`":["to"],"of `concat`ing":["the"],"of `containers`":["didn't"],"of `convert`":["that","on"],"of `coordinates`,":["`bearing`,"],"of `count`":["looks"],"of `counts`":["isn't"],"of `data":["Len`","Len"],"of `decimal`":["in"],"of `diff`":["could"],"of `digits`":["here"],"of `divisible":["year"],"of `divisibleBy`":["that","is"],"of `dropNullStrings`":["and"],"of `dropWhile`":["and"],"of `dropWhile`,":["`map`,"],"of `either`":["and"],"of `emptyMessage`,":["which"],"of `f":["x`"],"of `f`":["-","without"],"of `f`,":["so"],"of `filter`":["and","or"],"of `flip":["elem`"],"of `foldl'":["(+)"],"of `foldl'`":["in","from","from","and","without","or","or","which","with","and"],"of `foldlStrict`":["in"],"of `foldl`":["is","instead","isn't","since"],"of `foldl`\".":["Generally"],"of `foldl`,":["because","as"],"of `foldl`.":["Check","Since","Better"],"of `foldr`":["which","instead","instead","to"],"of `foldr`,":["it's"],"of `foo":["+"],"of `fromBool`":["it"],"of `fromJust":["$"],"of `fromList":["[]`."],"of `fromListWith`":["in","uses","which"],"of `fromListWith`,":["but","you"],"of `fromMaybe":["0"],"of `fst`":["and"],"of `garden`":["more"],"of `ghc":["-O"],"of `groupBy`.":["Looks"],"of `group`":["and"],"of `groupsOf`.":["You"],"of `head":["."],"of `helper`":["you"],"of `if`":["expressions."],"of `incrementBalance`":["is"],"of `insertKey`.":["It"],"of `insertWith'`.":["I"],"of `insertWith`":["is","(just"],"of `insertWith`,":["but"],"of `insertWith`.":["`M.insertWith"],"of `insert`":["each","needs"],"of `instructions`":["then"],"of `intersperse":["\"\\n\"`."],"of `isAnagramOf`":["with"],"of `isAnagram`.":["If"],"of `isDivBy`":["without"],"of `isEmpty`":["and"],"of `isLeapYear`":["makes"],"of `isLetter`":["and"],"of `isLower`":["since"],"of `isNil`":["is"],"of `isNumber`":["since"],"of `isQuestion`":["being","if","and","was"],"of `isSeparator`":["by"],"of `isShout`.":["It"],"of `isShouting`":["is"],"of `isSuffixOf`":["for","but"],"of `isSuffixOf`,":["but"],"of `isTrashChar`?":["For"],"of `isUpperCase`":["as"],"of `justIf`":["that"],"of `keyword`":["too"],"of `last":[".","s"],"of `lastDayOfMonth`,":["letting"],"of `last`":["in","to"],"of `last`.":["Strictly"],"of `length":["xxx","x","str"],"of `length`":["calls"],"of `let`":["is"],"of `let`,":["it"],"of `letters`":["for"],"of `liftA2":["."],"of `liftA2`),":["no?"],"of `lookups`":["better."],"of `m`":["and"],"of `map":["f","(vec"],"of `mapM`":[":)"],"of `map`":["it","and","GHC","and"],"of `map`,":["`filter`,","rather","I"],"of `map`.":["They","I"],"of `maybeInsert`":["to"],"of `modifyMVar_`":["instead"],"of `modifyTVar`":["is"],"of `n`":["and"],"of `newStdGen`":["and"],"of `newStdGen`.":["What"],"of `newtype`.":["I"],"of `not":["null`.","."],"of `not`":["(`all`"],"of `not`s":["throughout"],"of `nucleotideCounts`":["isn't","as","is","since","results","looks","doesn't"],"of `nucleotideCounts`,":["because"],"of `null":["s"],"of `null`":["and"],"of `number`.":["I"],"of `numeralsIter`":["should"],"of `o":["+"],"of `old":["+"],"of `on`":["or"],"of `or`?":["It's"],"of `orbitalPeriod`":["and"],"of `orbital`":["with"],"of `p":["="],"of `parts`,":["or"],"of `pattern":["guards`"],"of `prep":["str`"],"of `prettyPrint`---you":["probably"],"of `primeFactors`,":["but","and"],"of `print'":["at","at"],"of `randomRIO`":["I","is"],"of `randomRobot`":["(since"],"of `read":["."],"of `readDNA`.":["Maybe"],"of `reads`":["rather"],"of `records`.":["In"],"of `replace`":["in"],"of `resetName`":["on"],"of `responseFor`":["(I","can","just","if"],"of `responseFor`,":["as"],"of `return`":["you"],"of `reverse":["[m..n]`,","[end..begin]`,"],"of `reverseLinkedList`":["doesn't"],"of `reverse`":["(you"],"of `reverse`.":["But","The"],"of `s`,":["which"],"of `scoreLetter`":["as","is"],"of `second`":["so"],"of `seen`":["doesn't"],"of `separatePots`;":["this"],"of `seq`":["which","and"],"of `sequenceA`.":["You"],"of `sequence`":["in"],"of `show":["A`"],"of `show`":["is"],"of `silence,shouting,question`":["reduces"],"of `sorted`":["that"],"of `sorted`.":["I"],"of `splitBy`":["(compare"],"of `splitPlaces'":["at"],"of `sqrt`":["like"],"of `squareSize`?":["Or"],"of `strip`":["is"],"of `sum`":["and"],"of `take":["1`"],"of `take`s":["and"],"of `tallyWord`":["looks"],"of `toAscList`":["anyways"],"of `toComparable`":["using"],"of `toDecimal`":["a"],"of `toRNA`":["that"],"of `toRNA`,":["so"],"of `trans`":["more"],"of `transcribe`":["on"],"of `transcribe`.":["Both"],"of `transform`":["shouldn't"],"of `transpose`":["here,"],"of `trim`":["is"],"of `tryTakeMVar`":["is"],"of `turnRight`":["and"],"of `type`,":["I"],"of `uncurry3`":["you"],"of `undefined`s":["in"],"of `unique":["words`,"],"of `unlines`":["and","for"],"of `unwords`":["and"],"of `verse`":["over"],"of `versesToSing`":["is"],"of `w`":["if"],"of `when`":["is"],"of `wordCount`":["is","has"],"of `wordCount`.":["Note"],"of `word`":["(which"],"of `word`,":["eek."],"of `words":[".","."],"of `words'":["lowerText`"],"of `wordsBy`":["here."],"of `words`":["that","in","plus","only","and","and","and"],"of `words`,":["simplifying"],"of `writeIORef`.":["Memory"],"of `x`":["is)","and"],"of `xs`":["you","then"],"of `yearOn":["Earth`"],"of `ys`":["is"],"of `zipWith":["a"],"of `zipWith`,":["although","definitely"],"of `zipWith`.":["I"],"of `zip`":["and","and","in"],"of `zip`,":["so"],"of `||`?":["(I"],"of a":["way","way","way","way","library.","way","way","way","list.","shorter","better","way","submission!)","way","better","particular","second.","transformation.","misnomer.","great","better","`Char`","day","rule","better","problem.","way","simpler","list.","way","way","way","better","way","way","helper","way","list.","custom","difference","program","\"shout\"","problem.","`foldr`","list","syntactic","list","result.","way","benefit","list.","scrabble","`newtype`.","lot","way","way","haskell","`Char`","sorted","disconnect","datatype.","number,","way","real","program","manifestation","`filter`","sentence","larger","difference","question","predicate","string","red","single","`zip`.","scary","better","type","lot","difference,","difference","difference,","single","verse.","bag","small","better","\"space","recent","text?","module,","deal.","way","key-value","function","single","top-level","left","little","for","string.","list...","right","function.","datatype","datatype","solution","`Maybe`?","letter","trap","way","`map`","difference","lot","case","problem","named","module,","module,","mystery","variable","Day","typeclass","way","module","more","lot","surprise.","way","joke","difference.","difference","given","Data.Map","variable.","larger","way","way","function","more","solution!","harder","word","burden","way","list","string","case","list).","difference,","one-pass","line.","line.","way","way","challenge.","results.","better","replace","specific","predicate","(conceptually)","string","string?","function","way","shorter","lambda","mess","way","lambda","way","use","way","number","\u003ccode\u003emap\u003c/code\u003e","slices","bug.","string","function,","way","way","way","way","guard.","way","ton","way","warning","way","way","row-major","mess","list","synonym.","couple","way","way","way","way","bunch","disagreement","pain","few","custom","more","way","way","fold,","couple","puzzle"],"of about":["15"],"of abstraction":["I","I"],"of accumulate":["is"],"of accumulation":["generates"],"of accumulator":["strictness"],"of achieving":["maximum"],"of actions...":["but"],"of actually":["creating"],"of addGregorianMonthsClip":["and"],"of adding":["more","it","items","the"],"of additional":["work."],"of advantage":["to","to"],"of advice":["it's"],"of algebra":["before"],"of algorithms":["in"],"of all":["lowercase","the","the","permutations","the","non-alphabetic","the","else","the","the","the","possible","which","the","arguments."],"of all,":["why"],"of allergens":["without","go"],"of alpha-numeric":["chars."],"of alphabet":["may"],"of an":["`if`","if-then","explicit","easy","improvement","anagram.","idiomatic","anagram,","adjective.","array","operator","empty","invalid","improvement,","instance","operator","earlier","inline","empty","anti-pattern","anti-pattern,","obvious","infinitely","infinitely","understanding","optimization","easy","equation,","API,","optional","action","ordering","equation.","if/then/else","`Int`.","earlier","item","equation"],"of analysis":["works."],"of analyze":["though,"],"of analyze.":["If"],"of ands":["and"],"of another":["is","data","way"],"of answering":["function"],"of any":["runtime","use","earlier","explicit","module","planet","pair","function","other","type"],"of anything":["to","better"],"of api":["and"],"of appends":["in"],"of appropriately":["named"],"of arguments":["required"],"of arithmetic":["for","progression"],"of array":["caching,"],"of as":["Map","a"],"of assignment":["(?)"],"of assumed":["that"],"of at":["the","least"],"of atomic":["instructions."],"of b":["to"],"of bad":["code"],"of beer":["on","on","on"],"of beer\"":["up","phrase"],"of being":["very"],"of benefit":["to"],"of binary":["or"],"of binary,":["trinary,"],"of binomial":["coefficients"],"of bits":["(in","if"],"of bitty":["conditional"],"of blowing":["people"],"of boilerplate":["in"],"of boilerplates":["from"],"of bools,":["and"],"of bools.":["Start"],"of both":["the","these","IO","list","inner","equations","threads","sides","sides","equations","sides","sides"],"of breaking":["each","up"],"of bst":["by"],"of bug":["me"],"of building":["a","up","up","the"],"of calculating":["length,"],"of calculations":["more"],"of camelCase,":["it"],"of candidate":["dates."],"of cascading":["conditions."],"of cases":["where"],"of cases)":["and"],"of challenge":["here,"],"of character":["array","values."],"of characters":["but","with","in","(unless","comes","for","you"],"of characters,":["so"],"of chars":["`[Char]`,","anyway."],"of chars,":["the"],"of checking":["strings.","for"],"of checks":["should"],"of chunks":["until"],"of clarity":["though,"],"of clarity,":["but"],"of clarity.":["I'm"],"of classic":["mutex+var"],"of classify,":["but"],"of classifying":["the"],"of closer":["to"],"of clumsy.":["is"],"of code":["to","available","for","duplication","when","without","isn't","quality","to","here","in","by","that","is","using","here.","you","and"],"of code,":["it"],"of code.":["Both","But","In"],"of code...":["Other"],"of codes":["(+2"],"of collections,":["however"],"of collisions":["and"],"of columns":["that"],"of common":["strings","operators","modules","functions"],"of comparing":["to","to","the"],"of comparison-based":["map?"],"of comparisons":["needed"],"of compartmentalization":["and"],"of compilaction":["(e.g."],"of compiler":["optimizations."],"of complexity":["for"],"of complexity,":["but"],"of comprehensions,":["but"],"of computaion,":["but"],"of computation":["without"],"of computation,":["and"],"of computing":["the"],"of concision":["rather"],"of concurrency":["and"],"of concurrent":["users"],"of condition":["and"],"of conditional":["clauses)"],"of confusion":["and","of"],"of constant":["space."],"of constant),":["wastes"],"of constructors.":["(The"],"of constructs":["vs."],"of containers":["I","provide"],"of converted":["decimals"],"of converting":["Trues","back","and","to","them","function"],"of course":["both","`flip","only","you","also","re:","that","mix","make","\"no","abstract","is","possible","`[Value]`","due","an","-"],"of course!":["Thanks.","thanks."],"of course)":["http://web.maths.unsw.edu.au/~davidharvey/talks/factoring.pdf"],"of course).":["If"],"of course,":["that's","less","but","its","`comp2","`total","is","you're","but","you","DNABase","the","just"],"of course.":["I","I","I","For"],"of crashing":["if"],"of creating":["types.","those","a"],"of criticism":["from"],"of curiosity,":["do","does","Why"],"of curly":["braces"],"of current":["to"],"of cuteness.":["Absolutely"],"of data":["structure","you're","type.","as","structure"],"of day":["(although"],"of day.)":["A"],"of days":["in","ago.","from","to"],"of daysInGigasecond":["is"],"of declaring":["type"],"of defining":["your","all","`records`","`uracil`","it","`replaceNonAlphaNumWithSpace`?"],"of delete":["all?"],"of deriving":["Enum"],"of detecting":["if"],"of difference":["except"],"of different":["sides:","sides","sizes.","formats"],"of different/equal":["sides"],"of differing":["lengths."],"of digits":["and","without"],"of disappointed":["that"],"of div":["and"],"of do":["syntax","notation.","in"],"of documenting":["the"],"of doing":["the","it!","explicit","this?","it","the","the","it","that","the","so.","the","the","temporary","that."],"of duplicates":["like"],"of duplication":["in","already."],"of e.g.":["planetMultiplier"],"of each":["other.","can","list","other,","other'.","other'","level","iteration","`.`","base","string..","slice"],"of eagerly":["computing","evaluating"],"of easy-to-read":["code,"],"of ebnf":["to"],"of edge":["cases"],"of efficiency":["between","and","by"],"of effort":["to"],"of elegance":["though!"],"of elements":["in","[(1000.\"M\"),(900,CM),(800,..),(500..),.."],"of empty":["strings."],"of equal":["`a`s"],"of equality,":["and"],"of error":["checking/reporting"],"of evaluating":["the"],"of every":["nucleotide","second"],"of everything":[":("],"of exception":["safety."],"of excitement":["when"],"of exclusive":["or."],"of exercism":["is"],"of exercism,":["given"],"of existing":["higher-order"],"of expanding":["out"],"of experience":["that","in"],"of explicit":["arguments","recursion","recursion,","recursion.","recursion.","recursion,","recursion.","recursion","recursion.","recursion.","imports"],"of explicitly":["pattern","folding,"],"of exponentiation!":["It's"],"of exponents,":["e.g."],"of exported":["functions"],"of exposing":["the"],"of expressing":["\"if"],"of expressiveness":["without"],"of extra":["work"],"of f":["to"],"of factors":["and"],"of feedback":["is"],"of feeding":["my"],"of fields":["doesn't"],"of fields.":["Check"],"of filter":["versus"],"of filtering":["the","and"],"of finding":["a"],"of flip.":["algorithm"],"of fold":["for","because","for","or","or","right","you"],"of folding":["over","insert","`insertWith`.","from","over"],"of foldl'":["and"],"of foldr":["you","here"],"of foldr,":["but"],"of folds":["even","I've","commonly"],"of folks":["get"],"of food":["for"],"of food-for-thought":["with"],"of for":["each"],"of forcing":["the","the"],"of form":["`\\x"],"of four,":["but"],"of fromEnum":["as"],"of fromJust,":["but"],"of fromList":["is"],"of fromListWith.":["It's"],"of fromString":["doesn't"],"of fun,":["and"],"of function":["application.","on","compositions,"],"of function.":["it"],"of functionality":["in","of"],"of functions":["from","to","and","on","on","required.","that","that","`*With`","that","and","dealing","in","for","together?"],"of functions,":["so","I","this"],"of further":["processing"],"of fusion":["possible,"],"of fusion.":["I"],"of garbage":["thunks","(linear"],"of generality":["since","and"],"of generating":["a"],"of getting":["an","the"],"of gigabytes":["and"],"of giving":["the"],"of goodies":["from"],"of got":["a"],"of grade":["was"],"of grade;":["at"],"of grades),":["which"],"of grains":["for"],"of great":["packages."],"of gross":["when"],"of grouped":["words"],"of grouping":["into","around"],"of guaranteeing":["that"],"of guard":["parameter?","clauses","clauses,"],"of guards":["and","in","matter\"","instead","in","in","here"],"of guards,":["would"],"of guards.":["Defining","You"],"of had":["it"],"of hand":["very"],"of handling":["a"],"of handwritten":["sing,"],"of hard":["to","to","coding"],"of hardcoding":["special"],"of hardcoding,":["it"],"of harm":["if"],"of have":["all"],"of having":["right","to"],"of heavy":["weather"],"of helper":["functions,","functions","functions."],"of hiding":["`Either`."],"of higher":["level","order"],"of his":["comment."],"of how":["you","Haskell's","Haskell's","Haskell's","Haskell's","Haskell's","to","binary","Haskell's","to","Haskell's","other","Haskell's","you","Haskell's","Haskell's","maps","Haskell's","Haskell's","Haskell's","this","to","Haskell's","MVar","you","to","Haskell's","many","Haskell's","it","do"],"of http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html":["to"],"of icomming":["data"],"of if":["statements"],"of if,":["but"],"of if-else":["expressions"],"of if-then-else":["that"],"of if/then/else":["in"],"of if/then/else.":["Another"],"of implementation":["is"],"of implicitly":["using"],"of import":["lists."],"of importing":["`ord`,"],"of imports":["I"],"of improvements":["that"],"of in":["where","the","the"],"of incorrect":["as"],"of indentation":["is","for","and"],"of indicating":["explicitly"],"of indirection":["does"],"of indirection,":["i.e."],"of infix":["divisible"],"of inner":["function","loop,","filter,"],"of input":["is"],"of input,":["since","so"],"of inputs":["and"],"of inserting":["2","3","into"],"of instegers":["you"],"of instructions":["exactly?","of"],"of instructions.":["You"],"of integers.":["Then"],"of interest,":["what"],"of invalid":["number"],"of ioref,":["mvar,"],"of is":["to","in"],"of isAggressive":["ist"],"of isAnagram":["is"],"of isAnagramFor":["rather"],"of isCaps":["(though"],"of isIndifferent?":["Imho"],"of isShouting":["seems","would"],"of isSilence":["and"],"of isSuffixOf":["because"],"of isYelling":["could"],"of it":["would","(which","here","back","like","all:","is","as",":)","so","in","working","from","though","was"],"of it,":["but","it","just"],"of it.":["`all","I'm","A","Props","Were","`f"],"of it...":["why"],"of iteration":["one."],"of iterations":["once","once"],"of iterative":["processing,"],"of iteratively":["building"],"of its":["way","presence","letters,","components.","own.","result","two","components"],"of itself.":["Rather,"],"of just":["an","keeping","an","the","storing","an","using","a","once.","an","a","using","using","doing","storing","a"],"of keeping":["an"],"of key/value":["pairs."],"of key\\/value":["pairs"],"of lambdas,":["and"],"of language":["preference/history.","(unless"],"of last.":["isSpace"],"of late":["--"],"of layout":["and"],"of laziness":["by","in","it"],"of laziness.":["Not"],"of lazy":["which","evaluation","version","evaluation","thunks,"],"of lazy,":["or"],"of leading":["and"],"of learning":["by","(it"],"of least":["surprise."],"of leaving":["it","it"],"of left":["fold,","folds","folding"],"of length":["is","4","100"],"of letter":["frequencies,"],"of letters":["in","in","relate","and"],"of letters.":["It"],"of levels":["of"],"of liftM":["/"],"of liftM2...":["should"],"of like":["that","cheating","saying","the","my","20","cheating,"],"of line":["13","36."],"of list":["comprehensions,","comprehensions","comprehensions?","comprehensions,","comp.","of","comprehension","comprehensions."],"of list?":["Data.Set"],"of lists":["could","for"],"of little":["`Map`s"],"of lock":["based","based"],"of looking":["up","up"],"of lookups":["in"],"of losing":["track"],"of lowers/sanitize":["much"],"of magnificent.":["I"],"of magnitude":["difference","harder"],"of magnitude,":["despite"],"of maintaining":["it"],"of making":["poor","your","the","that"],"of mandates":["it."],"of manually":["folding","tallying"],"of many":["local"],"of map":["here","with","with","with","and","modificators","this","(i.e.","do","and","here"],"of map,":["but","the","because"],"of mapFunc":["if"],"of mapping":["to"],"of maps":["to","and"],"of maps.":["GHC"],"of markdown":["quoting)"],"of masking":["the"],"of matches":["and"],"of maximum":["15"],"of maybe":["(BST).","from"],"of me":["not","but"],"of me!":["I"],"of measuring":["`length"],"of meetupDay":["-"],"of memory":["to","with","until","when","for","to"],"of memory,":["or"],"of memory.":["Does","Instead,"],"of merge/adjust/insertWith":["then"],"of messageType":["without"],"of messy.":["I"],"of methods":["I'm"],"of mind":["I"],"of mine":["in"],"of minimal":["version"],"of mistake:":["takes"],"of modifyMVar":["in"],"of modular":["arithmetic"],"of monad":["involved)"],"of monads":["to"],"of monads)":["but"],"of more":["generic","interesting"],"of most":["unsafeCoerce","instances"],"of moves":[":-)."],"of multiple":["writers"],"of multiplication,":["unless"],"of mutable":["variables","state"],"of mutex":["+"],"of my":["implementation","best","functions","code/logic","clojure","Python","`case`","study","`scoreLetter`","least","reviews","problem","previous","```++```,"],"of n":["squares"],"of name":["inserts,","clashes"],"of names":["sorted.","seems","takes","for"],"of naming":["conventions,","functions,"],"of need":["for"],"of nested":["control","thunks","thunks,","thunks).","thunks","thunks","thunks","thunks"],"of nesting":["(e.g."],"of never":["using"],"of new":["approach,","tests:"],"of nits":["to","to"],"of no":["practical"],"of non-alphabetic":["characters."],"of non-equal":["pairs)"],"of non-strict":["evaluation."],"of nonsense":["inputs,"],"of normalizing":["the"],"of not":["using","optimizing","re-inventing","being"],"of now,":["the"],"of nuances":["with"],"of nucleotide":["count."],"of nucleotide,":["I.e."],"of nucleotides.":["4"],"of numbers":["only,","or","to","in"],"of numeralSymbols,":["and"],"of occurrences":["seemed"],"of odd":["divisors,"],"of once":["in"],"of one":["set","argument","argument).","element","of","argument,","argument","of"],"of one?":["Shouldn't"],"of only":["`fromListWith`"],"of operation":["can","that"],"of operation,":["a","a","a"],"of operations":["rather"],"of optimization":["would","settings."],"of other":["errors,","solutions","functions","solutions","numerical","exercises","nice","languages"],"of our":["code"],"of output,":["which"],"of outputs-to-inputs":["matches"],"of over":["engineering"],"of overkill":["for","using"],"of overloaded":["strings"],"of overloading":["and"],"of oversights":["in"],"of pairs":["isn't","and","as","that","or"],"of pairs,":["which","and"],"of paragraphs":["in"],"of parentheses":["in","in","in","in"],"of parseNumber'.":["it"],"of parsers":["(in"],"of parsing":["that","the"],"of partial":["functions"],"of passing":["it","it","it"],"of pattern":["matching","matching","matches","is"],"of peeked":["already"],"of people":["submit"],"of performance":["but"],"of personal":["preference.","taste.","preference.","preference,","preference","programming","choice","taste."],"of php/python/javascript":["-"],"of place":["when"],"of placing":["them"],"of planning":["for"],"of point":["free"],"of pointfree":["than","--","although"],"of points":["would"],"of points-free":["style"],"of possibilities":["for"],"of possible":["anagrams."],"of power":["would"],"of powers":["of"],"of practice":["with"],"of precedent":["for"],"of predicate":["for"],"of preference.":["On"],"of preferences...":["but"],"of prime":["divisors"],"of primes":["would"],"of principle":["anyway"],"of problem":["is",":-)"],"of problem.":["Guards"],"of problem?":["Maybe"],"of program,":["you"],"of prompt,":["not"],"of prompting":["the"],"of punctuation":["doesn't"],"of pupils;":["or"],"of pure":["value","functions"],"of putting":["it!"],"of puzzling":["out"],"of question?":["And"],"of questions":["that"],"of randomRobot,":["per"],"of readability":["was","is","and"],"of readability,":["this","try"],"of reading":["it,"],"of rearranging":["the"],"of reason":["to"],"of reasons":["why"],"of record":["types!"],"of recursing":["for"],"of reductions.":["While"],"of redundancy":["by","here"],"of redundant":["work.","language"],"of reduntant,":["maybe"],"of refactoring":["to"],"of refactoring,":["there"],"of regex":["substitution,"],"of regular":["expressions","recursion,"],"of regularity":["of"],"of reinventing":["it."],"of repeated":["use","elements.","text,"],"of repeating":["the","nearly"],"of repetition":["with"],"of repetitive":["string"],"of replacePunctuation":["(then"],"of replacing":["all"],"of representing":["the"],"of requirements":["and"],"of research":["to"],"of resolving":["```filter"],"of response,":["you"],"of response.":["This","In"],"of responseFor.":["Not","It"],"of results":["?"],"of retraction":["to"],"of reverse":["depends","by"],"of reversing":["the"],"of revision":["#1"],"of rewriting":["sing","sign"],"of right":["now"],"of robot":["on","on"],"of robot.":["In"],"of robots,":["I"],"of rolling":["your"],"of roman":["numeral"],"of room":["to"],"of routes":["to"],"of row":["major"],"of rows":["or"],"of rule":["to","of"],"of running":["rmPunc."],"of s":["and"],"of said":["principle"],"of say...a":["million"],"of saying":["you"],"of scenario":["(defaults"],"of score,":["Data.Array"],"of scores.":["very"],"of second":["could"],"of sense":["given"],"of sense,":["but","because"],"of separate":["functions.","functions."],"of sequencing":["for"],"of setting":["up"],"of several":["of"],"of sgerrand":["taught"],"of show":["is","and"],"of significance":["with"],"of silly,":["yeah"],"of simple":["pattern","if"],"of simple,":["easily-tested"],"of simply":["the","inserting","getting"],"of singing":["it,"],"of singleton":["maps"],"of situation":["where"],"of size":["n,m","n*m."],"of solution":["works,","but","and"],"of solution.":["Obviously"],"of some":["kind","so","parens","of","sort","nested","data","boilerplate","flexibility.","identifier.","identifier.","useless"],"of something":["is","else.","better?"],"of something,":["right?"],"of sort":["in"],"of sorting":["at","Data.Text.","the"],"of sorting/grouping,":["which"],"of space":["leak."],"of space,":["even"],"of specifying":["the"],"of speculated":["performance"],"of split":["often","function."],"of splitting":["combinators."],"of spreading":["it"],"of square":["is"],"of squares":["before","formula:"],"of stack":["space.","space.","space.","space.","space.","space","to","when"],"of steps)":["of"],"of storing":["just","an","an","an"],"of strange,":["in"],"of stretch":["for"],"of strictness":["in"],"of string":["for","interpolation","do"],"of string,":["so"],"of strings":["here","not","being","2\"","2\""],"of strings,":["but"],"of strings`":["test"],"of strip":["it"],"of strong":["typing"],"of structure":["is","so"],"of study":["before"],"of stuff":["and"],"of stumbled":["upon"],"of subtle":["issues"],"of subtracting":["1"],"of suggestions":["to"],"of surprised":["me"],"of swapMVar":["here"],"of symbols/keywords/etc.":["(which"],"of symmetry":["with"],"of syntactic":["overhead:","overhead."],"of tail":["recursion,"],"of taking":["and","constant"],"of taste":["i","...","but","though",":)","but","but"],"of taste,":["actually,","but"],"of taste/style":["and"],"of temporary":["list"],"of test":["case"],"of testing":["if","every"],"of text":["freaks"],"of text,":["which"],"of that":["stuff.","name","kind","form.","(but","description,","nature,","`foldM`","variable","extension.","book;","constructor","nature","it","function","computation","repetition,","ugly","lambda","naming","(could","actually","list","would","tuple","in","start","spec","`++`.","error","condition","computation.","special","`++`","thunk","is","memory","being","form"],"of that,":["outside","thanks!","ta!","all","you","sorry."],"of that.":["I've","These"],"of the":["clauses","library","work","list","list","public","test","spec.","extra","first","task","arguments","window","Enum","parameters","list","functions","`not`s).","equal","test","information","common","exercise.","way","file.","three","processing","conditions","existence","expressions","map","Monoid","ongoing","few","logic","backslash","more","programs,","condition.","`map`","code.","buttons.","Text","guard,","file","printf","Num","guards!","curriculum","Haskell","other","characters","Haskell","tests","special","time","examples","MonomorphismRestriction","assignment","methods","`base`","set","spec,","counts.","best","Haskell","beginning","`||`","explicit","guards.","problem.","main","tests?","function","code.","guards","clojure","tuple","unit","tests.","entire","letters","order","```map","recursive","test","highest","Haskell","arguments","guards,","time,","list","list","`str`","Haskell","definition","form","more","functions","list),","current","guards","arguments","values","goals","other","guards","chosen","list.","extra","counts","way","chars","fact","strand.","nucleotides,","assignment","ones","ones","prefix","robot","`StdGen`,","generated","utmost","time","other","more","code","cases","entire","parentheses","precedence","module","slightly-more-abstract","abstract","first","unnecessary","computation","computation","computation.","computation","result.","keys","data","computation","exercise","data","string","input","case","cases","functionality","expected","exercise","function.","parentheses","top-level","parentheses","program","words","characters","maybe","same","Monad","scope","functions,","same","same","computation","underlying","second","top-level","unused","absence","fancier","digit","implementation","`StatementType`s.","platform.","products","space","map.","differentiating","`filter`?","`sing`","form","name,","functions","counts","Enum","form","leak.","result","values","first","harder","datatype","structure","code","points","other.","bounds,","other.","generators","other","functions","```st```","\"sledge-hammer\"","exercise","problem","comprehension","`Applicative`","where","explicit","parentheses","tests","public","resulting","first","week","module.","public","module.","Map.","regexes","implementation","public","top-level","inner","tests","module","function","isShout","tuple,","boilerplate","inputs","properties","optimizer's","length,","functions","output.","reasons.","numbers","list","tuple","solution.","exercises","Clojure","Haskell","indentations","rest","private","most","Haskell","Haskell","right","rest!","structure","song","song","song","chess","binary","things","same","operators","boilerplate","meaning","code.","input","arguments","Map","code.","problem","other","fact","placement","inner","preceding","where","`\\n`","code,","parentheses","boilerplate","previous","same","value","same","variable","program","macros","expressions","work","sorts,","head.","file","`map","problems","wrapping/unwrapping","reason","```Map```","Maybes","arguments","exercise.","core","list","last","basic","platform","other","Maybe-lifting","fold.","result","`++`","same","Maybes?","word.","alphabet","non-Earth","algorithm's","alphabet","fact","values","counts","list","`((-\u003e)","maintainability","functions","big","filter","many","hundreds/tens/units","purpose","functions.","learning,","no","`remove*`","`(.)`","where","where","functions.","more","call","binding,","fold","existing","fact","containers","algorithm","Unboxed","logic","weekday\"","cheater","one","`case","code","exercise,","last","month,","month","later","where","module","month.","function","appropriately","code","`try`'s","other","things","previous","simplicity","infinitely","common","days","superfluous","lookup.","letters-values","public","variables,","enumeration.","values","linked","file","safest","folds","each","`Ord`","top","algorithm","command","top-level","public","answers","different","comment,","items","test","string","quote","recursive","function","arguments","list.","list","fun","skill","more","code","guards","case","`\u003c-`","incrementing","easier","computations.","list,","list","otherwise","required","alternative","work,","Enum","magic","equation.","functions","entire","other","work","equation","series","Haskell","string","arithmetic","number.","functions","list","length","`Text`","precondition","list","tests.","tests","file","key","variable","`responseFor`","Haskell","named","function","line","pipeline","`sort`","code","equation","type","functions","iteration","other","equation","other","test","case,","case","case","digits,","implementations","list.","tuple","code","imports","list","name","words…","types","given","first","new","other","discussions","empty","time","needle","Text","name.","Monoid,","where","tasks","evil,","functions","special","account?","inputs","arguments.","equation","guards","pattern.","first","cases","guard","\u003c$\u003e","parentheses","operators","map,","module","core","`++`-ing","mutable","`[q]:qss`","string,","case.","cases","week","tests.","equation)","compilation)","resulting","list","problem.","second","result.","form","string,","expressiveness","left","input","recursive","possible","school","list","function","description","very","\u003clist\u003e","list","list","logic.","markup","way","functions","matrix","tests","earlier","-\u003e","`Show`","letters","list.","result","list.","list","initial","final","`Show`","data","list.","code","tests","function","view.","data","foldable,","element.So","helper","squares,","people","transformation","inner","data","inner","script.","filter","numbers","date","13th","month.","task","definition,","test","regular","form","equation","type:","first","next","character","string","`enumFromThenTo`","parentheses,","`++`","input,","parentheses","same","Haskell","definitions,","problem.","game?","fold.","weekDays","type","dwarf","powers","same","list,","`++`.","parens"],"of their":["functions","ordering","own","sub-functions"],"of them":["and","build","it's",";)","(because","even","are","I","(put","defined","use","actually","become","seem","back.","almost","is"],"of them,":["shouldn't","you","I","since","but"],"of them.":["I'm"],"of these":["things.","things.","constraints","functions,","issues","functions","methods","functions","calculations.","exercises","parentheses.","operations","exercises,","do","numbers","definitions","problems","are","occur","common","sequences","cases,","in","functions,","exercises","types.","match.","functions","cases.","operators."],"of thing":["out","behind","wouldn't","that","is","is","as","@erik","yourself","comes"],"of thing,":["e.g.","but","and","redundant"],"of thing.":["If","`foo"],"of things":["in","that","automatically","here","you","I","that"],"of things,":["but"],"of think":["about"],"of thinking":["about","about","about"],"of thinks":["as"],"of thinks,":["use"],"of this":["kind","complexity?","is","submission.","code","exercise.","exercises","file","where","code.","warning?","exercise","exercise","exercise","is","principle.","exercise,","site","line","exercise","list,","exercise.","also","exercise","code","exercise","exercise:","to","code","exercise","function.","sort","chapter","is","problem?","that","section","function","exercise","problem","game","problem","solution","looks","iteration","code,","section","section","section","section","data","symbol","module","exercise","month:","month","difference.","chapter","section","program,","problem"],"of this,":["but","which"],"of this.":[";)","Thanks"],"of those":["parentheses.","constructors.","in","functions","times","two","lines","cases.","in","plus","`+1`","is","and"],"of those:":["http://hackage.haskell.org/package/base/docs/Data-IORef.html"],"of threads,":["that"],"of three":["behaviors:"],"of thumb":["is","from","from","from","for","for","to","to"],"of thumb:":["larger"],"of thunks":["and","and","and","and","and","that","before","when","that","from","that","instead"],"of thunks,":["either.","since","a","keeps"],"of thunks.":["With"],"of time":["with","(allocating","to"],"of time).":["Here"],"of time,":["both","regardless"],"of time.":["If"],"of times":["already).","proportional"],"of times,":["you"],"of times.":["Remember"],"of to":["simply","use","get","list"],"of toAscList.":["Nice"],"of toRNA":["from"],"of toast\"```.":["That's"],"of tokenization,":["you'd"],"of too":["many"],"of top":["level"],"of top-level":["functions"],"of trade-offs":["considered."],"of transform,":["but"],"of transformation,":["but"],"of transforming":["the"],"of traversing":["the"],"of trim":["too."],"of trying":["to","to","the","to","to","to","to"],"of tuple":["`insertWord"],"of tuples":["and","maybe)"],"of two":["numbers","arguments?","elements","threads","generators.","filters."],"of two.":["Just"],"of two?":["You"],"of type":["conversion","`State","classes,","`m","errors.","`Maybe"],"of types.":["Nonetheless,"],"of ugly":["right"],"of understanding":["the","of"],"of unevaluated":["thunks","thunks.","thunks","thunks"],"of unfamiliar":["code."],"of unicode":["in"],"of unique":["items","words),"],"of unique,":["not"],"of unit":["(`MVar"],"of unnecessary":["thunks."],"of updating":["a"],"of usage":["you"],"of use":["case","case"],"of use,":["it"],"of useless":["parenthesis"],"of using":["`filter`","Set","it","a","ViewPatterns","`isLower`,","two","mod","`filter`","lists","`Text`","`show`","a","exponentiation.","`Char`s","`foldl'`.","[`^`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Prelude.html#v:-94-)?","`take`","the","a","`splitWhen`,","`type`","`map`?","`printf`).","an","Map","a","Data.List.Split's","a","these","`digitToInt`","the","`repeatUpdate`","union","an","a","Control.Arrow.","an","the","a","a","`!`","`sqrt`","`words`,","`primes`","`loeb`","`loeb`","`case`,","a","`Data.Set`","*count*.","`concat`","`|"],"of utilizing":["the"],"of valid":["chars"],"of values":["that","(often","(value:value-based-on-the-1st-neighbours:value-based-on-the-2nd-neigh...)","(value:value-based-on-the-1st-neighbours:value-based-on-the-2nd-neigh...)"],"of values,":["there"],"of variables":["that","/"],"of various":["things"],"of vector":["library","of"],"of vectors":["may"],"of verbosity":["for"],"of verse":["to"],"of verses":["and"],"of version":["0.5,"],"of very":["large"],"of view":["as","you"],"of ways":["to","to"],"of week":["calculations","of"],"of weekday":["given"],"of what":["that","T","Monads","you","the","the","kind","I've","one","I","pattern","it","ghc","happens","it's","isn't","the","is","the","it","the"],"of what's":["going","*not*","available"],"of what,":["the"],"of whatever":["data"],"of where":["`do`","to","I","you","my"],"of where;":["I'm"],"of whether":["or"],"of which":["seems","is","optimizations","failed","TVars","approach","isn't"],"of whitespace":["in","instead","on","that"],"of whitespaces.":["Just"],"of why":["i","it"],"of with":["these"],"of wondering.":["That"],"of word":["and"],"of wordCount,":["any"],"of wordCount.":["Looking"],"of words":["to","and","doesn't","to","with","assuming"],"of words\"":["would"],"of words,":["say"],"of words.":["There"],"of work":["for","when"],"of work.":["I","The"],"of working":["with"],"of wrapping":["it"],"of writing":["it.","`nucleotidesCounts`","in","this","a","`isSep`"],"of wrote":["it"],"of x":["is"],"of you":[";-)","@trey","have"],"of you!":["New"],"of your":["helper","questions","chain","top-level","guard","abstraction.","cases","function","predicates","sorting","predicates","Bob.hs","comment,","predicates","own","API,","it/one","guards","code.","strictness","lookup","submission","recommendation).","code.","robot","main","usage"],"of your_one":["in"],"of zip,":["but"],"of ||":["is"],"of “punctuation”":["for"],"of) a":["partial"],"of) at":["least"],"of), and":["taking"],"of, but":["I"],"of, one":["using"],"of, which":["may"],"of. (Is":["there"],"of: _there":["exists"],"of? For":["example,"],"of` and":["you"],"of`, followed":["by"],"of`. I":["don't"],"of`isShouted` though":["perhaps"],"off ```candidates```":["from"],"off ```xs```":["on"],"off between":["calling"],"off by":["haskell.."],"off doing":["the"],"off going":["straight"],"off how":["we"],"off of":["`Show`.","constructors.","`responseFor`","memory"],"off sorting":["the"],"off that":["rule,","rule,"],"off the":["tongue.","type","`strand`","couplet","factory","deep","parens,"],"off to":["me."],"off until":["both"],"off using":["`not","`insertWith`"],"off, ignoring":["them,"],"off, it's":["going"],"offer any":["criticism"],"offer operations":["you"],"offers a":["nicer"],"offers no":["warnings,"],"official package,":["nor"],"offset stuff":["a"],"often I":["look"],"often `incrementBalance`":["but"],"often a":["bad"],"often as":["I"],"often avoid":["some"],"often be":["named","named","written","replaced","confusing"],"often compile":["to"],"often considered":["best"],"often do":["the","this"],"often end":["up"],"often except":["as"],"often figure":["it"],"often forget":["their"],"often good":["practice"],"often harmless.":["In"],"often has":["optimizations"],"often have":["a"],"often important":["to"],"often imported":["qualified,"],"often is":["to"],"often just":["put"],"often light":["on"],"often like":["to"],"often makes":["code"],"often means":["nucleotide"],"often more":["elegant.","elegant.","elegant.","elegant.","elegant.","elegant.","efficient"],"often not":["in","important"],"often occurs":["in"],"often optimize":["that"],"often preferable":["in"],"often prevent":["bad"],"often provide":["a"],"often quite":["good"],"often relevant.":["The"],"often see":["`L`","introductory"],"often so":["few"],"often than":["I","it"],"often the":["reason"],"often this":["kind"],"often turns":["out"],"often used":["for","in","for","for","for"],"often we":["as"],"often well":["typed"],"often written":["with","as","as","as"],"often, especially":["if"],"often, which":["doesn't"],"often. In":["this"],"oh well.":["What"],"oh, right.":["I"],"ok :).":["Actually"],"ok _":["="],"ok both":["ways","because"],"ok but":["'X'","an","I"],"ok for":["an","external"],"ok if":["it"],"ok in":["that"],"ok now":["sorry."],"ok p":["="],"ok to":["use","assume","have"],"ok, except":["you"],"ok. Didn't":["know"],"ok. Really":["its"],"ok? I":["could"],"okay since":["I'm"],"okay with":["accepting"],"okay, but":["of","did"],"okay? can":["it"],"old MVars":["from"],"old at":["this"],"old guard":["syntax"],"old state":["monad,"],"old then":["there"],"old to":["have"],"old version":["of","that","of","of","of"],"old, apparently,":["so"],"old, like":["~2"],"oldData` inside":["comprehension?"],"old_value +":["1`"],"old_value new_value":["="],"older containers":["and"],"older distributions":["there"],"older version":["of","of","of","of"],"older version,":["and"],"omit ```str```":["from"],"omit additional":["checks."],"omit it":["entirely."],"omit parens":["in"],"omit the":["null","candidates","type"],"omit type":["signatures."],"omitting `null":["query`..."],"omitting it":["from"],"ommited the":["`dna`"],"on \"nucleotides\",":["but"],"on #2":["one,"],"on #haskell.":["It's"],"on (==)":["unify"],"on (a":["-&gt;"],"on (e.g.":["in"],"on -Wall":["on"],"on 64-bit":["platforms"],"on 7.0.4":["-"],"on :-)":["I'm"],"on ::":["(b"],"on \u003ccode\u003espan\u003c/code\u003e":["and"],"on @carol's":["point,"],"on @wiley":["(good)"],"on @yasmine's":["suggestion."],"on Char":["and"],"on Char,":["you"],"on Control.Arrow),":["this"],"on Data.Text":["is"],"on DataKinds,":["so"],"on GHC":["and","7.4.1."],"on GHC's":["float-out","float"],"on GHCi](http://vimeo.com/68669612)":["tomorrow"],"on Haskell":["wiki","wiki"],"on Haskell's":["non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","evaluation"],"on Haskell,":["I"],"on Hoogle":["for"],"on IO":["and","in"],"on Integral":["numbers."],"on Monad":["so"],"on O'Reilly's":["website."],"on Pluto":["and"],"on Schedule.":["Note"],"on Source":["(on"],"on StackOverflow,":["and"],"on Statement\"":["rule)."],"on String,":["as"],"on String.":["The","The"],"on Strings":["can"],"on Twitter":["so"],"on [Hackage](http://hackage.haskell.org/packages/hackage.html),":["and"],"on [currying](http://www.haskell.org/haskellwiki/Currying)":["and"],"on `\"\"`,":["returning"],"on `(,)":["a`","a`."],"on `Data.Char`":["exclusively"],"on `Enum`":["make"],"on `Robot`":["to"],"on `Text.Regex`":["and"],"on `[String]`":["so"],"on `\\xdcML\\xc4\\xdcTS!`":["will"],"on ```Char```s":["that"],"on `atomicWriteIORef`,":["that"],"on `classify`":["to"],"on `concatMap`":["though."],"on `do`":["syntax."],"on `echo`":["from"],"on `fold`.":["I"],"on `isQuestion`":["and"],"on `isUpper`":["it"],"on `lookup`,":["to"],"on `n`":["is"],"on `newtype`":["-"],"on `readStatement`":["wouldn't"],"on `replicateM`":["and"],"on `responseFor":["\"\"`"],"on `robotB`,":["maybe"],"on `s''`.":["Generally"],"on `s'`.":["Why"],"on `sameLetters`!":["I"],"on `scoreWord`,":["not"],"on `string`":["exactly"],"on `tToU`,":["if"],"on `target`":["to"],"on `toList`":["and"],"on `toRNA'`":["doesn't"],"on `toRNA'`'s":["parameter,"],"on `w,":["x`"],"on `w`":["are","unnecessarily"],"on `where`":["definitions,"],"on `wordCounters`.":["`[(w,"],"on a":["list","given","single","character","precedence/priority","single","string","type","case","fundamental","datatype,","specific","single","series","trailing","tuple","bit","list","separate","per-file","separate","line","demand","separate","separate","situation,","usecase","length","separate","properties","branches","biggers","few","lot","whole","big","file","list","line","list","good"],"on all":["the","top-level","counts."],"on an":["empty","empty","empty","empty"],"on and":["be","hope","think"],"on another":["problem,"],"on any":["Enum,","kind","optimizations.","separator,","compiler","compiler"],"on anything":["reasonable.","that"],"on applicative":["functors."],"on approaching":["the"],"on arrows":["yet."],"on asymptotic":["complexity","reasoning"],"on at":["the"],"on behind":["that"],"on binary":["predicates"],"on bit-shifting,":["as"],"on both":["points!","ends","sides","sides","sides","sides","sides.","sides,","right","branches"],"on but":["I"],"on chessboard":["and"],"on compiler":["optimizations)"],"on compiler/runtime":["settings)."],"on completely":["the"],"on complexity":["which"],"on context.":["If"],"on default":["rules."],"on demand,":["so"],"on details.":["All"],"on dropping":["the"],"on each":["char","side","step,","step","change","change,","step:","step.","step.","step,","step.","step?"],"on either":["the","side"],"on empty":["being","lists,","lists.","string.","lists/strings."],"on enough":["to"],"on error":["is"],"on eta-reducability.":["`assocs`"],"on even":["rather"],"on every":["filter","call","line","line.","line.","iteration","year","step"],"on exercism.io":["so"],"on existing":["letters"],"on external":["libraries"],"on feedback":["between","between"],"on feedback.":["My"],"on first":["lowercase","glance."],"on foldl":["better"],"on foldr,":["but"],"on folds":["in","again."],"on function":["composition."],"on function,":["though"],"on functions":["inside"],"on generation":["of"],"on ghci,":["it"],"on github,":["ain't"],"on hackage":["http://hackage.haskell.org/package/base-4.0.0.0/docs/Data-IORef.html"],"on here":["is","is",":)","for",":-)"],"on here,":["but"],"on hoogle,":["though."],"on how":["readable","to","Haskell's","non-strict","Haskell's","non-strict","Haskell's","deep","Haskell's","Haskell's","Haskell's","this","Haskell's","Haskell's","Haskell's","Haskell's","Haskell's","Haskell's","Haskell's","Haskell's","Haskell's","Haskell's","Haskell's","the","Haskell's","Haskell's","Haskell's","smart","Haskell's","to","Haskell's","to","to","Haskell's"],"on idiomaticity":["are"],"on if":["you"],"on implementation":["details"],"on imports.":["When"],"on in":["this","my","each","the"],"on incorrect":["assumptions."],"on infinite":["lists.","lists."],"on infrequently-used":["packages."],"on input":["length","parameters","strings"],"on insert":["to"],"on insertion":["because"],"on invalid":["inputs,"],"on is":["smart"],"on isAllCaps":["I"],"on isAnagramOf":["(map"],"on isQuestion.":["It"],"on it":["to","and","directly.","a","once","once."],"on it's":["own.","own","own,"],"on it,":["rather"],"on it.":["At","Evaluation","Thanks","But"],"on iteration":["2."],"on iterative":["processing"],"on its":["own.","first","new","own.","own,","own","own","own,","own,","own","own","own","own","own","own","own","own.","own","own","own)","own","own","own","own","own","own","own","own"],"on keys":["that"],"on lambda":["with"],"on large":["inputs."],"on larger":["lists."],"on last":["submission."],"on laziness":["of"],"on left":["of"],"on letters.":["Just"],"on line":["10,","38.","16","3","13-15.","15.","9.","19","10,","8","10","13","22","10","19","29","12,","10","29.","18","5,","10.","12","25?","15","9,","10","13.","9","19","19","28","28:","28?","count","10","6","15.","10.","9,","18","11","21."],"on lines":["9-11","2","12-13.","8-9"],"on lists":["rather"],"on lists.":["That"],"on ln":["9"],"on lock":["based"],"on long":["strings"],"on maintaining":["strictness"],"on memory---at":["least"],"on mine,":["is"],"on mobile":["right"],"on monad":["question?"],"on monads":["before"],"on monoids,":["applicatives,"],"on multiple":["robots,","processors?"],"on my":["64-bit","indentation,","last","last","computer).","own.","input","new","mac,","Elixir","system,","system","system,","eyes","next","Mac,","phone","2nd","machine","machine."],"on n,":["the"],"on new":["exercises."],"on nextOdd":["or"],"on non-\"AGCT\"":["Chars)"],"on non-empty":["lists."],"on non-exhaustive":["pattern"],"on not":["using"],"on now":["that's"],"on now,":["but"],"on numbers":["and"],"on of":["the","\"\\n\""],"on one":["hand.","value","value","line"],"on only":["two"],"on optimization":["settings.","settings."],"on package,":["and"],"on passing":["the"],"on pending":["transaction,"],"on performance":["is"],"on predicates,":["while"],"on predicates.":["And","That"],"on previous":["iteration","iterations?"],"on purpose":["because"],"on question":["saves"],"on rather":["than"],"on relations":["(`::"],"on runhaskell":[":)"],"on russian..":["don't"],"on sanitize":["isn't"],"on separate":["lines."],"on several":["lines"],"on side":["effect..."],"on simple":["methods","strings."],"on sing":["(since"],"on solving":["this"],"on some":["feedback,","other"],"on something":["close"],"on stripped":["version"],"on test-driven":["development"],"on than":["the"],"on that":["one.","though,","first","type,","optimization.","point",":-)","list.","assumption.","one.","again"],"on that.":["From"],"on that;":["I"],"on the":["plus","main","last","blanket","single","operation.","input","input","data","input","imports.","extra","cases","second","grounds","argument:","list's","side","message.","definition","difficulty","Haskell","outside,","guards","inner","right","main","wall\"`.","pragma.","surface","value","input","right","line","performance","code.","other","empty","empty","length","original","surface","use","right","input,","desired","other","string","implementation","Haskell","isShouting","character","first","datatype","data","implementation","structures","other","value","constructors,","LHS","RHS?","semantics","wall,","wall.\\n\"","semantics,","web.","last","empty","page.","\"mapList\"","constructors","\"mapList\"","special","length","nested","left","optimizer","last","extra","outside","next","first","outside","characters","compiler's","export.","point-free","next","beginning","topic.","way","placement","other","previous","\"element","right","left","side","previous","`String`?","dna","descriptive","sing","way","other","last","concrete","wall","previous","purpose","placement","result","list","web...","last","back","list.","phrase","command","right","right","given","eta","tail.","last","tail,","bit","outside","Haskell","last","right","top-level","right","lowercase","wall\")`.","clarity","bit","first","B","implementation","various","eyes.","previous","problem","same","last","iteration","big","left","`str","same","given","context","constructor","length","bounds","same","result","second","fly","string","functions","`notDuplicate`","same","next","RHS","right","previous","negation","first","same","right","next","right","next","`meetup`","environment,","environment?","square","char","`True`","helper","length","left","right","first","length","same","Matrix","lefthand","lefht","first","`linked-list`","two","same","`linked-list`","right","guards,","square","word","result","purpose","`mapLetter`","left","far","next","outer","digits","Haskell","end","context","tiles.","`zs`","other","right","right","same"],"on their":["own?","input.","own","own"],"on them":["is"],"on them.":["As"],"on things":["like"],"on this":["page!","one.","site","machine.","exercise!","one!","one:","exercise,","problem","exercise","related","one.","works","style","exercise.","pass,","trick."],"on this,":["except","`TVar`"],"on this`":["button"],"on those":["guards","changes."],"on to":["the","that","the","the","the"],"on toRNA":["it's"],"on today's":["computers."],"on turning":["the"],"on twitter":["at"],"on using":["a","some","map","sort"],"on v3,":["you"],"on values":["more"],"on what":["\"stage\"","to","on","the","your","Random"],"on when":["to"],"on where":["to"],"on whether":["there","you","that","`all`","the","you"],"on why":["using","do"],"on without":["any"],"on would":["be"],"on you":["are"],"on your":["suggestions,","programming","type","nitpick","comments"],"on! thanks":["for"],"on) but":["it"],"on) or":["to"],"on), but":["it's","GHC"],"on, I":["guess","dare"],"on, and":["now"],"on, but":["FYI:","it"],"on, especially":["`foldl`"],"on, meaning":["this"],"on, probably":["using"],"on, sir":["(or"],"on, then":["using"],"on, would":["be"],"on. (Hint":["for"],"on. But,":["you"],"on. I":["managed"],"on. Some":["questions:"],"on. Therefore,":["the"],"on. This":["one"],"on. You're":["essentially"],"once (*)":["due"],"once (I":["am"],"once I":["started","become","really"],"once I'm":["happy"],"once IO":["gets"],"once `n`":["is"],"once `oneOf`":["had"],"once a":["digit"],"once again":["I've"],"once and":["keep","determine","lowercase","have","have","```length"],"once any":["line"],"once as":["they"],"once at":["the","the"],"once because":["of"],"once before":["the"],"once but":["I"],"once even":["when"],"once for":["each","each","each","each","the","each","each"],"once in":["each","`nucleotideCounts`?","`responseFor`","`prettyPrint`.","a","the"],"once inside":["a"],"once instead":["of"],"once it":["wouldn't","has","runs"],"once on":["the"],"once or":["even","every"],"once per":["call","call","player","call","iteration","call","call","call","call","call","call","call"],"once qualified":["`as"],"once regardless":["of","of","of","of"],"once the":["Int","grades","`g","matrix","first"],"once there's":["a"],"once this":["way."],"once to":["generate"],"once using":["division,"],"once would":["be"],"once you":["get","do","have","`reverse`","close","mentioned","will","do,","move","close"],"once\". Sorting":["will"],"once, I'd":["recommend"],"once, although":["the"],"once, and":["if"],"once, as":["rest'"],"once, because":["the"],"once, but":["otherwise","there's","the","it's"],"once, e.g.":["`filter"],"once, ghci":["will"],"once, in":["this"],"once, instead":["of"],"once, no":["reversal"],"once, not":["n"],"once, now":["it's"],"once, really":["ghc"],"once, there":["is"],"once, which":["is"],"once, why":["not"],"once, you":["can","need"],"once. GHC":["can"],"once. GHC's":["optimizer","optimizer"],"once. Inspired":["by"],"once. Is":["that"],"once. It":["is","turns"],"once. It's":["also"],"once. Look":["at"],"once. Many":["implementors"],"once. Moreover":["due"],"once. Most":["people"],"once. Notice":["that"],"once. Other":["things"],"once. Reading":["this"],"once. Thanks":["for"],"once. The":["GHC"],"once. This":["also"],"once. Try":["implementing"],"once. You're":["almost"],"once. guards":["will"],"once.( Compiler":["can"],"once? In":["this"],"once? The":["GHC"],"once? This":["will"],"once— I":["don't"],"one (adding":["a"],"one (in":["a"],"one (that":["also"],"one -":["that"],"one Char":["of"],"one I":["have","meant.","need?","have","prefer,"],"one I'm":["a"],"one `Maybe":["(Integer"],"one `Vector`.":["Are"],"one `flip`":["in"],"one `length`":["and"],"one `map`":["and"],"one `pack`":["I"],"one `scoreLetter`":["is"],"one `splitPlaces`":["from"],"one adds":["yet"],"one after":["the"],"one alphabetic":["character"],"one and":["a","hopefully","write","continue"],"one answer":["at"],"one arg,":["`.).`"],"one argument":["function","function).","that","like",":)","in","pretty"],"one argument).":["You"],"one argument,":["but"],"one around,":["since"],"one as":["well.","I"],"one at":["some","all,"],"one be":["tackled"],"one believes":["a"],"one best.":["Moving"],"one better,":["though"],"one big":["tradeoff"],"one bigger":["problem"],"one binding":["it"],"one bit":["of"],"one by":["one,","one","a"],"one can":["get.","make,"],"one capital":["letter"],"one case":["where","that"],"one char":["less!)"],"one character":["seemed","that","is","at"],"one clause":["with"],"one common":["clause"],"one comparing":["to"],"one constructor,":["and"],"one coordinate":["x,"],"one count":["is"],"one day":["magically"],"one definitely":["isn't"],"one dimention":["layout"],"one dimentional":["Vector"],"one does":["have"],"one doesn't":["already","pass","have"],"one element":["maps)"],"one equation":["with"],"one extra":["character."],"one fails,":["you're"],"one felt":["like"],"one field.":["Slightly"],"one for":["Applicative","completeness.","what","adjust/insert).","everything"],"one from":["Monad","Data.Map.Strict),"],"one fromListWith":["call"],"one function":["and","I","(instead","but","that","call.","from","you","definition","with"],"one functions.":["Not"],"one generator":["in","could"],"one glyph":["in"],"one go":["which"],"one ground":["my"],"one guard":["on","(and","needed","clause"],"one guard.":["The"],"one has":["to"],"one has,":["at"],"one here,":["returning"],"one hurt.":["I'll"],"one if":["the"],"one import":["from"],"one important":["precedence","rule"],"one imports":["everything"],"one improvement":["I","may"],"one in":["Prelude","with","verse).","the"],"one individually":["seems"],"one initially":["and"],"one instance":["it's"],"one instead":["of"],"one is":["subtle","fine.","really","a","to","really","better","worse","an","the","about","a","pretty","looking","the","using","more","fine,","a","a","easier","pretty","slightly","obvious","a","finite.","more","`2","not","simple,","taken?","a","using","for","for","faster","only"],"one is,":["but"],"one isn't":["in"],"one last":["one:"],"one later.":["I"],"one length":["check"],"one less":["sigil.","import."],"one letter":["vars","and"],"one line":["per","in","long.","without","with","like"],"one liner":["as"],"one liner.":["I"],"one liners":["?"],"one looked":["similar"],"one looks":["very"],"one loop":["and"],"one may":["have","be"],"one method,":["`fmap`,"],"one might":["say"],"one minor":["nitpick."],"one module":["from"],"one more":["import","parameter","definition","condition","version","way"],"one more:":["```allSpace"],"one multiply,":["one"],"one needed":["modification."],"one new":["one,"],"one nitpitting":["my"],"one nucleotide":["it's","because","and"],"one nucleotide,":["you'd"],"one occurrence":["of"],"one of":["the","the","the","the","the","each","the","my","the","the","the","the","the","the","these","@ruthie's","those","many","the","the","the","the","them,","the","SPJ's","those","those:","three","them","the","my","its","the"],"one on":["the"],"one operator":["when"],"one or":["zero,","the","the","two).","the","two","two","both"],"one other":["possibility.","way","top-level"],"one over":["the","the"],"one parenthesis":["is"],"one part":["of"],"one pass":["with","through","through","through","because"],"one pass,":["not","without"],"one pass.":["I","Using"],"one pass?":["Some"],"one per":["line"],"one place":["somehow","as","in"],"one place,":["I"],"one place.":["May"],"one point":["I","I"],"one point.":["that"],"one possibility":["if"],"one possible":["optimization,"],"one pretty":["tricky,"],"one processor.":["That"],"one reaches":["the"],"one reason":["why"],"one resource":["on"],"one said":["there"],"one seems":["misplaced."],"one set":["of"],"one short":["line"],"one should":["I","not","prefer"],"one signature":["it's"],"one simpler":["expression"],"one simplification":["most","most"],"one since":["the"],"one solution":["is"],"one stone":["you"],"one success\",":["and"],"one test":["case.","per","case..","case..","case.."],"one than":["the"],"one that":["[hoogle](http://www.haskell.org/hoogle/?hoogle=Char+-%3E+Char+-%3E+String+-%3E+String)","pattern","is","recommended","might","ships","too","really","has","is","@santino","reduces"],"one that's":["tail"],"one the":["`sum`"],"one then":["you'd"],"one thing":["that","missing","you","you","I","to","you","I","you","jumps"],"one thing,":["but"],"one thing.":["It's"],"one thread":["does"],"one time.":["It"],"one tiny":["nit..."],"one to":["show","wrap","see","process."],"one took":["me"],"one transaction":["for"],"one type":["of"],"one uppercase":["letter","letter."],"one use":["here,","of"],"one used":["in","in"],"one using":["function","a","`filter`."],"one value":["and","and","will"],"one variable":["just","to"],"one wants":["to"],"one was":["a"],"one wasn't":["\"meant\""],"one way":["or","or","to","to","looks","to"],"one way,":["`fromListWith`"],"one weekday":["to"],"one where":["it's","you","binding,"],"one who":["managed"],"one will":["be"],"one with":["the","something"],"one without":["imports"],"one word":["`\"ab\"`","is","from","is","at"],"one would":["probably","expect"],"one yet.":["I"],"one you":["find","use"],"one you're":["looking"],"one! I":["find"],"one\", \"one\"],":["[\"may"],"one\",\"one\"], [\"may":["be"],"one's top":["concern"],"one). Juxtaposition":["separates"],"one, I'm":["not"],"one, allowing":["you"],"one, and":["was","they"],"one, are":["you"],"one, as":["Readme"],"one, but":["@leonora","I","if"],"one, despite":["the"],"one, in":["this","this"],"one, so":["I","maybe","it"],"one, someone":["suggested"],"one, still":["I"],"one, that":["would"],"one, this":["is"],"one, though":["that"],"one, where":["I've"],"one, without":["manually"],"one, would":["you"],"one-character each,":["but"],"one-line `where`":["the"],"one-line summary":["for","for","for"],"one-line things":["like"],"one-liner too,":["so"],"one-liner! However,":["consider"],"one-liner. It":["may"],"one-liners I":["put"],"one-liners, most":["of"],"one-pass `foldl'`":["based"],"one-pass solution":["to"],"one-pass with":["just"],"one-third of":["this"],"one. Am":["I"],"one. Consider":["how","using"],"one. Do":["you"],"one. I":["have","reduced","don't","have"],"one. I'm":["already"],"one. It's":["a"],"one. Maybe":["there"],"one. One":["of"],"one. Perhaps":["give"],"one. Seems":["like"],"one. Thanks":["for"],"one. That":["said,"],"one. There":["are"],"one. This":["should"],"one: (not":["."],"one? I":["didn't"],"one? Shouldn't":["matter"],"oneOf =":["trace"],"one\\\" \\\"one\\\"":["\\n\\\"may","\\n\\\"may"],"one](http://exercism.io/submissions/5217622eafd3df7a3c00024a) has":["a"],"onerous at":["all."],"ones are":["not).","easy"],"ones explicitly":["imported."],"ones for":["map","public"],"ones in":["the","the"],"ones is":["call-by-need"],"ones like":["isQuestion"],"ones on":["a"],"ones that":["threw","use"],"ones to":["use,"],"ones used":["internally"],"ones with":["a"],"ones you":["want.","can"],"ones), and":["it's"],"ones). If":["you"],"ones, just":["for"],"ones, most":["of"],"ones. So":["I"],"oneself !":[":)"],"ongoing status":["for"],"online course":["in"],"only \"in":["all"],"only \"insignificant\"":["because"],"only \"responseFor\"":["should"],"only 1":["apart,"],"only 10":["elements"],"only 2":["at","and"],"only 3":["days"],"only 4":["revs!"],"only DNA":["strands,","bases"],"only Data.Char,":["you"],"only Data.Map":["functionality","functionality","functionality"],"only Data.Map.Strict":["functionality"],"only Data.Text's":["version"],"only Haskell,":["say,"],"only `Data.Map`":["there","functions"],"only `Int`":["and"],"only `Map`":["type,"],"only ```O(n":["lg"],"only ```Prelude```":["functions,"],"only `anagramsFor`":["needs"],"only `foldl`":["overflows"],"only `foldl`,":["`+`,"],"only `fromListWith`":["and"],"only `responseFor`":["from"],"only `return`":["call"],"only `toRNA`":["from"],"only a":["nitpick","few","single","few","few","few","small","`State`","linear"],"only accept":["10"],"only access":["in"],"only advantage":["of"],"only algorithmic":["win"],"only allow":["the"],"only appropriate":["if"],"only arithmetic,":["no","without"],"only as":["I","I"],"only atomic":["operations"],"only be":["better","used","a","computed","a","checking","divisible","80","using"],"only because":["that's"],"only being":["used","used"],"only between":["benchmarks"],"only bothers":["to"],"only by":["`modifyMVar`,"],"only calculated":["once,","once,"],"only called":["once","once."],"only calling":["it"],"only candidates":["that"],"only capitalize":["the"],"only care":["about","about","about"],"only change":["in","I'd"],"only changes":["I"],"only changing":["it"],"only check":["odd","6k-1"],"only checking":["two"],"only common":["to"],"only compute":["those"],"only computed":["once.","once","once"],"only concern":["with"],"only consider":["numbers","factors"],"only covers":["ASCII."],"only deletes":["the"],"only did":["the"],"only difference":["is","is","is"],"only does":["it"],"only doing":["that","trial","one"],"only done":["once"],"only efficient":["way"],"only ended":["up"],"only ensure":["the"],"only ensures":["that"],"only evaluate":["the","the"],"only evaluated":["once"],"only evaluates":["the","its"],"only evaluating":["enough"],"only even":["divisors."],"only ever":["be","going","be"],"only exception":["to"],"only expect":["to"],"only export":["the","the","`wordCount`."],"only exporting":["`responseFor`"],"only extracting":["one"],"only for":["letters,","readability"],"only four":["defaults.","possible","Mondays)"],"only function":["callable"],"only functionality":["that's","present"],"only functions":["and/or"],"only goes":["as"],"only going":["to","to","to"],"only good":["for"],"only guarantees":["that"],"only guards,":["it"],"only handful":["of"],"only handle":["the"],"only happens":["because"],"only has":["defined","4"],"only have":["the","one","to","the","it","a","to","one","to"],"only if":["`sort","optimizations","there","input","you","you","I"],"only ignore":["whitespace"],"only improve":["readability,"],"only in":["the","the","the","`toRNA`","that","strict"],"only interesting":["class","elements"],"only into":["weak-head"],"only involves":["traversing"],"only keys,)":["thus"],"only knit":["is"],"only libraries":["that"],"only list":["functions"],"only looks":["at"],"only makes":["sense","sense","sense","the","sense"],"only meaningful":["difference","factors"],"only measures":["the"],"only metric":["of"],"only necessitated":["about"],"only need":["to","to","to","to","to","to","to","to","it","to","to","the","to","to"],"only needed":["by","for","to"],"only needs":["to","one."],"only nesting":["4"],"only nit":["I","I","is","I","is"],"only nit,":["as"],"only normalized":["once."],"only note":["I'd"],"only obstacle":["is"],"only odd":["divisors.","candidates","divisors?"],"only on":["the"],"only once":["and","in","per","and","before","for","(*)","(I"],"only once,":["no","there","ghci","now","really"],"only once.":["Inspired","guards","Moreover","Other","Look"],"only once.(":["Compiler"],"only one":["occurrence","of","variable","nitpitting","method,","function","field.","fromListWith","import","guard","function","pass","pass","`length`","place,","where","constructor,","field.","test","guard.","processor.","common","length","`Vector`.","test","use","binding"],"only one).":["Juxtaposition"],"only ones":["explicitly"],"only ones,":["just","most"],"only option":["right?"],"only other":["thing","comment","nit","small"],"only otherwise":["uninteresting"],"only parentheses":["you","that"],"only partial":["function"],"only passes":["over"],"only pattern":["matching"],"only performed":["to"],"only performs":["operations"],"only person":["that"],"only place":["they"],"only play":["a"],"only popular/modern":["case"],"only ported":["this","them"],"only process":["the"],"only provide":["the","marginal"],"only purely":["functional"],"only read":["the"],"only real":["difference","knock"],"only really":["seen","concerned"],"only reason":["not","why","i"],"only referenced":["once—"],"only replace":["all"],"only require":["short"],"only requires":["*one*"],"only responseFor,":["or"],"only returns":["a"],"only run":["when"],"only runs":["until"],"only safe":["functions"],"only says":["that"],"only see":["them","this","the"],"only serve":["to","to"],"only shadows":["`y`"],"only simpler":["but"],"only simpler,":["but"],"only slightly":["different."],"only solution":["will"],"only state":["and"],"only strict":["in"],"only suggestion":["I","would"],"only symbols":["in"],"only talking":["about"],"only terms":["that"],"only the":["implementation","ones","Asc","subset","`&gt;&gt;=`","time","intended","functions","name.","first","public","public","words","primes","public","public","public","public","correct","letters","fields","English"],"only there":["was","was"],"only thing":["missing","missing","I","bugging","I","I","I","laziness","I'd","left","I","worth","you","that","worth","I","here","I","left","to","I've"],"only thought":["of"],"only to":["one","complete"],"only toRNA":["function"],"only top-level":["signatures"],"only traverse":["sequence","the"],"only trying":["to","to"],"only two":["good","terms,","terms","inputs,"],"only up":["to"],"only uploaded":["this"],"only use":["two","explicit","'T'","it","`dna`","it"],"only used":["to","by","once.","for","in","primes","once.","in"],"only useful":["for","for"],"only using":["strip"],"only visible":["in"],"only want":["to"],"only wanted":["the","look"],"only way":["to","to","that","to","to","to","to","to"],"only when":["necessary,","`all","necessary","they","it's","accesses","we"],"only will":["give"],"only with":["`sum`","`-Wall`.","sufficiently","functions","-O","lazy"],"only work":["on"],"only worked":["with"],"only working":["for"],"only works":["for","by","on","on"],"only write":["them"],"only x'":["will"],"only zipWith,":["/=,"],"only, but":["I","I"],"only, do":["you"],"only, e.g.":["`\"1,"],"only... also,":["I"],"only? What":["I'm"],"onlyAlpha isn't":["evaluated"],"onlyAlpha`, `strip":["="],"onlyDigits num`":["is"],"onto `acc`,":["which"],"onto the":["next","second"],"oops, missed":["that"],"oops. I":["stuck"],"opaque, but":["on"],"opaque. [lens](http://hackage.haskell.org/package/lens-4.0.4)":["has"],"open GHCi":["you"],"open for":["a"],"open it":["and"],"open so":["when"],"open to":["debate:","suggestions"],"open up":["a"],"open. The":["key"],"opened (not":["when"],"opened an":["issue"],"opens up":["additional","a"],"operate on":["the","empty","the","the","it","infinite","`[String]`"],"operates on":["binary"],"operating on":["\"nucleotides\",","the","the"],"operation (-1":["maps"],"operation by":["parsing"],"operation can":["be"],"operation does":["at"],"operation in":["the"],"operation is":["not","strict","strict","strict","not","still"],"operation it":["does"],"operation on":["keys","`w,","each"],"operation should":["be"],"operation takes":["linear"],"operation that":["operation","waits"],"operation twice":["to"],"operation using":["Data.Array."],"operation vs":["\"last\"."],"operation when":["you","writing"],"operation with":["`concatMap`"],"operation, a":["good","good","good"],"operation, but":["really"],"operation, doesn't":["have"],"operation, it's":["best"],"operation, there":["are"],"operation. But":["I"],"operation. Why":["not"],"operations (as":["it"],"operations (one":["subtract,"],"operations and":["not"],"operations are":["take"],"operations but":["they"],"operations can":["kick","so"],"operations in":["O(1)","C."],"operations like":["copying,"],"operations occur":["in"],"operations rather":["than"],"operations than":["mine."],"operations that":["e.g."],"operations then":["doesn't"],"operations together.":["For"],"operations when":["the"],"operations will":["happen"],"operations you":["would"],"operations yourself,":["the"],"operations, and":["when"],"operations, or":["after"],"operations, so":["technitially"],"operations. Lookup":["in"],"operations: take":["and"],"operator (`::":["Bool"],"operator (`\u003c$\u003e`)":["from"],"operator (`?`)":["looks"],"operator (because":["it"],"operator (which":["can","does"],"operator ```.```.":["This"],"operator `map":["(id"],"operator and":["are","the","can","can't","`:`","can't"],"operator as":["`not"],"operator before":["the"],"operator can":["also"],"operator easily":["in"],"operator either.":["The"],"operator for":["`(.).(.)`,","this:","inequality"],"operator from":["Data.Functor"],"operator function":["in"],"operator helps":["considerably"],"operator in":["GHC.","other"],"operator into":["an","an"],"operator is":["also","to","to","indeed"],"operator makes":["it"],"operator may":["be."],"operator on":["predicates.","predicates.","relations","predicates,","relations."],"operator precedence":["so","knowledge","reasons"],"operator precedence,":["the"],"operator section":["with","for","to"],"operator section,":["like","`(++\""],"operator sections":["as"],"operator sections,":["so"],"operator so":["has","it"],"operator that":["has","I"],"operator to":["have","operator","an"],"operator unless":["you"],"operator when":["not"],"operator which":["for"],"operator you":["can"],"operator's fixity":["declaration."],"operator's type":["signature:"],"operator) and":["it"],"operator, but":["it"],"operator, so":["most","they","you"],"operator, which":["makes"],"operator, why":["do"],"operator, you":["don't"],"operator. But":["it"],"operator. Everything":["else"],"operator. I've":["added"],"operator. Same":["story"],"operator. Technically":["this"],"operator. The":["type","parens"],"operator. This":["is","is"],"operator. You":["don't","could"],"operator. `a":["++"],"operator. `foo":["++"],"operator. `takeDown`":["has"],"operator. whoops.":["thanks"],"operator: `(.).(.)`":[":)"],"operators `&lt;-`":["and"],"operators `(==)`,":["but"],"operators and":["negative"],"operators are":["syntax","lower.","defined."],"operators for":["this","this.","these"],"operators from":["function"],"operators have":["lower","higher"],"operators in":["`isAnagram`,","prefix","`operator`"],"operators instead":["of","of","of"],"operators involved,":["parentheses"],"operators like":["`$`","`(=~)`"],"operators need":["to"],"operators so":["they"],"operators that":["you"],"operators vs":["guards;"],"operators you're":["using"],"operators) and":["`\u003e\u003e=`"],"operators, since":["I"],"operators. I":["guess"],"operators. You":["could"],"operators? I'm":["not"],"operators? They":["can"],"opinion an":["additional"],"opinion and":["need"],"opinion on":["this"],"opinion) cleaner":["point-free"],"opinion, neither":["is"],"opinion, so":["as"],"opinion, your":["code"],"opinions on":["this?"],"opportunities for":["optimization."],"opportunity to":["write"],"opposed to":["`last`.","`all`.","my","using"],"opposite of":["what"],"opposite to":["correct"],"opposite. Seems":["unintuitive"],"oppositional; I":["misunderstood"],"ops, yes,":["was"],"ops\u003c/pre\u003e GHC":["is"],"opted for":["the"],"optima -":["and"],"optimal as":["your","a"],"optimal for":["this"],"optimal in":["general"],"optimal solution":["to"],"optimal than":["a"],"optimal) approach":["to"],"optimal, can":["you"],"optimal, of":["course)."],"optimal, you":["would"],"optimazation not":["language"],"optimisation and":["would"],"optimisation process":["works,"],"optimisation. I":["wasn't"],"optimisations, and":["is","resulted"],"optimise for":["performance"],"optimise, and":["now"],"optimises compositions":["of","of"],"optimization (in":["this"],"optimization (the":["last"],"optimization (when":["optimizations"],"optimization GHC":["will"],"optimization as":["well?"],"optimization at":["all"],"optimization but":["it's"],"optimization by":["hand,"],"optimization enabled,":["anyway)."],"optimization every":["time"],"optimization fix.":["As"],"optimization for":["you,","you,"],"optimization has":["to"],"optimization here":["since","so"],"optimization here.":[":-)"],"optimization in":["this","that","interpreter."],"optimization is":["a","the"],"optimization isn't":["needed"],"optimization itself,":["but"],"optimization mechanically,":["but"],"optimization of":["course"],"optimization on":["its","its","it's"],"optimization settings.":["The","This"],"optimization some":["of"],"optimization that":["would"],"optimization to":["avoid","guarantee","be"],"optimization when":["you"],"optimization would":["be"],"optimization, (will":["not"],"optimization, but":["inlining","doesn't","optimizations","there","the"],"optimization, currently":["you"],"optimization, for":["some","example."],"optimization, so":["there's"],"optimization. In":["this"],"optimization. Right":["now"],"optimization. You":["can"],"optimizations are":["enabled.","not","on)","on.","applied)."],"optimizations aren't":["always"],"optimizations available":["to"],"optimizations for":["these"],"optimizations in":["some"],"optimizations off,":["it's"],"optimizations on":["this","anyway)."],"optimizations on),":["but","but"],"optimizations on,":["would","but"],"optimizations take":["place"],"optimizations than":["a"],"optimizations that":["the","are"],"optimizations they":["compile"],"optimizations they're":["going"],"optimizations to":["interpreted"],"optimizations turned":["on"],"optimizations when":["they"],"optimizations with":["`{-#","them"],"optimizations without":["breaking"],"optimizations you":["could"],"optimizations) would":["be"],"optimizations). Seems":["require"],"optimizations, and":["it"],"optimizations, interpreting":["the"],"optimizations, they":["probably"],"optimizations. I've":["added"],"optimizations. There's":["no"],"optimize away":["the"],"optimize cases":["where"],"optimize for":["point",":)","this."],"optimize guards":["a"],"optimize if":["it"],"optimize it":["away","out),can"],"optimize it.":["In"],"optimize last.":["I"],"optimize prematurely":["as"],"optimize that":["out","in","away"],"optimize the":["ephemeral","string"],"optimize thing":["later:"],"optimize this":["out,","algorithm","behaviour","by","and"],"optimize this,":["you"],"optimize your":["code"],"optimize, as":["I"],"optimized (e.g.":["Binary"],"optimized (for":["inserting/looking-up"],"optimized `grade`":["to"],"optimized a":["bit,","bit"],"optimized and":["consequently","relevant"],"optimized away":["by","by"],"optimized away,":["but"],"optimized better":["depending"],"optimized for":["Int","Into","Into"],"optimized implementation":["if"],"optimized version":["of"],"optimized version.":["(Although"],"optimized). The":["foldl"],"optimizer (e.g.":["if"],"optimizer can":["often","do","do","do","create"],"optimizer doesn't":["run","always"],"optimizer making":["the"],"optimizer should":["be"],"optimizer wants":["to","to"],"optimizer. Another":["choice"],"optimizing -":["at","I"],"optimizing for":["performance","the","efficiency.)"],"optimizing out":["the"],"optimizing the":["latter,"],"option as":["well."],"option could":["be"],"option for":["line"],"option here.":["It"],"option instead":["of"],"option is":["to","to","to","to","to"],"option of":["using","placing"],"option one":["time."],"option than":["```[]```–even"],"option to":["iteration"],"option which":["uses"],"option would":["use","be","be","be"],"option), or":["even"],"option, but":["I"],"option: `(.:)":["="],"optional `powtest`":["exercise,"],"optional improvement":["is"],"optional task":["can"],"optional task,":["can"],"options for":["this."],"options have":["changed"],"options in":["here"],"options such":["as"],"options that":["seem"],"options, `ceiling,":["floor,"],"options. I":["choose"],"or \"field":["labels\""],"or \"sorted\"":["instead"],"or \"take":["3\"."],"or \"the":["last"],"or \"variable\"":["argument"],"or #3,":["not"],"or $":["but"],"or 'A'":["to"],"or .":["map","map"],"or 1":["time."],"or 1.0e9":["might"],"or 2-":["to"],"or 3":["(n*6-1,"],"or 3).":["You"],"or 4":["space"],"or 4.":["The"],"or 42":["times"],"or 6n+1":["(for"],"or 6n-1":["(but","(because"],"or Array":["for"],"or Attoparsec":["to"],"or Attoparsec.":["The"],"or BangPatterns":["to","in"],"or BangPatterns,":["but"],"or C":["are"],"or Control.Applicative":["to"],"or Control.Concurrent.MVar":["to"],"or DFA.":["You"],"or DNA":["is","nucleotide,"],"or Data.Array":["could"],"or Data.Function":["but"],"or Data.HashMap…)":["for"],"or Data.List.Split":["modules"],"or Data.List.Split's":["`chunksOf`"],"or Data.Map.Strict.":["It"],"or DataKinds":["extensions"],"or Double":["or"],"or Enum's":["`fromEnum`,"],"or I":["don't","made","would","would"],"or IO":["if"],"or IORef":["instead"],"or JS":["as"],"or LBS/LB":["for"],"or List.foldr":["when"],"or M.":["I"],"or ML":["I",":)"],"or MVars,":["which"],"or Maybe":["a"],"or Monad.":["It's"],"or Pretty":["instance."],"or READMEs":["for"],"or RNA.":["I'm"],"or StateT,":["without"],"or SublimeText":["for"],"or TMVar":["instead"],"or TVars).":["Not"],"or TemplateHaskell.":["Of"],"or Vector":[":)"],"or `$!!`":["(from"],"or `&&`":["without"],"or `'U'`)":["and"],"or `(&amp;&amp;&amp;)`,":["though"],"or `('?'==)":["."],"or `('M':)`),":["like"],"or `(:)":["_head"],"or `(:)`),":["so"],"or `.`.":["It"],"or `:load":["file.hs`"],"or `\u003e1`":["or"],"or `Aggression`":["and"],"or `Data.Map.fromListWith`":["might"],"or `Either`":["in"],"or `IORef`":["as"],"or `L`.":["This"],"or `Last`.":["I'll"],"or `List.foldr`":["when"],"or `List`":["and"],"or `M.foldrWithKey'`":["and"],"or `M.insertWith":["(++)"],"or `[":["y"],"or `[DNABase]`":["instead"],"or `[]`":["so"],"or `[c":["|"],"or `[minBound":["..]`"],"or `[n,":["n"],"or `[start,":["start-1"],"or `[succ,":["pred]`"],"or `\\x":["-\u003e"],"or `^`":["to"],"or `^`.":["Just"],"or ``((==)":["`on`"],"or ```any```,":["thus"],"or `add":["g"],"or `all":["$","(not"],"or `all`":["since","from","instead","and","as","can"],"or `all`.":["However,"],"or `any`":["to","to"],"or `any`)":["and"],"or `any`,":["which"],"or `any`?":["This"],"or `capitalize`":["or"],"or `concatMap`":["anywhere"],"or `concat`":["to"],"or `definition":["$"],"or `delete":["w"],"or `divMod`":["would","(same"],"or `ds`":["(for"],"or `error":["\"some"],"or `error`":["in"],"or `eval*`":["function,"],"or `f":["$","(x)`","=","(x"],"or `f(x(y))`":["in"],"or `foldl":["(\\acc"],"or `foldr":["((++)"],"or `fromListWith`":["which","which","to","which","which","which","which","which","functions","are","would","are","should"],"or `fromListWith`.":["Parallel","The"],"or `fromList`":["would"],"or `fromMaybe":["0`"],"or `g`,":["which"],"or `insertWith`":["you"],"or `insertWith`)":["there"],"or `insertWith`.":["It","The","Note"],"or `instance`":["declarations"],"or `intersperse`":["try"],"or `isQuestion":["="],"or `isQuestion`.":["But"],"or `isSuffixOf`.":["But"],"or `length`.":["Data.Map.Strict"],"or `let`.":["You"],"or `mapM`.":["Also"],"or `null`":["(hint:"],"or `on`.":["Try"],"or `or`":["with"],"or `ord":["'a'"],"or `quotRem`":["by"],"or `rem`":["is"],"or `replaceChar":["::"],"or `reverse`":["using"],"or `sort`":["with"],"or `sort`?":["You'll"],"or `splitAt":["3"],"or `unfoldr`":["and"],"or `unlines`":["to"],"or `unwords`":["to"],"or `where`":["bindings.","clause.","clause","clauses"],"or a":["where","warning.","lot","higher","Map,","`foldl'`","*strict*","digit,","Nucleotide","`}`","small","Map),","word","4","number","stack"],"or actually":["it","you","that's"],"or add":["that"],"or after":["any"],"or alternately":["`foldl`"],"or am":["I","I"],"or ambiguity?":["in"],"or an":["operator","explicit","oversight","Array,"],"or another":["binding","character"],"or any":["custom"],"or anything":["like","like"],"or anything…":["it's"],"or are":["there"],"or arrows)":["to"],"or as":["is"],"or associativity":["of","of"],"or assume":["GHC"],"or at":["least","least","least","least","least","least","least"],"or attoparsec,":["however"],"or be":["under"],"or better":["yet","yet,","yet,","build"],"or better,":["you"],"or better.":["Interpreting"],"or big":["space"],"or bind":["it"],"or both":["of"],"or by":["using","importing"],"or calculate":["it"],"or case":["than","statements."],"or changing":["the"],"or columns":["but"],"or columns.":["Something"],"or comment":["out"],"or compatible.":["The"],"or concurrency.":["Only"],"or concurrent":["blocks."],"or converting":["chars"],"or counted.":["Just"],"or define":["it"],"or determine":["whether"],"or did":["I"],"or didn't":["export"],"or digit":["character,"],"or do":["a"],"or does":["this","not"],"or doing":["a","the"],"or don't":["have"],"or done":["any"],"or dumb":["the"],"or early":["termination"],"or easy":["to","to"],"or else":["add","you"],"or empty":["respectively"],"or equal":["so"],"or equivalent":["in","yourself."],"or even":["goes","better","`Map.fromListWith`,","just","break","better","in","bind","shorter","`take`.","in","`isIgnoring","`::","`[x,x-1"],"or every":["time"],"or exception":["(haven't"],"or explicitly":["use"],"or externally).":["Then"],"or faster":["(in"],"or fewer":["comparisons"],"or filter":["found","input"],"or fmap/ap)":[":)"],"or foldl'":["will","will","will","will","will"],"or folds":["here."],"or for":["that","IO)."],"or freeing":["dead"],"or from":["README"],"or frowned":["upon?"],"or full":["(think"],"or generate":["the"],"or generated":["on"],"or give":["it"],"or giving":["him"],"or grouping":["should"],"or hash":["is"],"or have":["no","to"],"or hdevtools":["for"],"or hexadecimal":["would've","tasks."],"or how":["they"],"or if":["isQuestion","you","for","you","it's","I'm"],"or implement":["in"],"or implicitly":["using"],"or import":["just","specific"],"or importing":["`foldl'`"],"or in":["separate","this","this"],"or infix":["function"],"or inserting":["it,"],"or is":["ther","there","that","there","there"],"or it":["isn't)."],"or it's":["documented"],"or iteration":["if"],"or iterative":["computation,"],"or just":["preference?","trying","use","by","import","something","having","use","show","define","passing","passing"],"or keep":["it"],"or last":["two"],"or lazy":["variant.","evaluation)."],"or leave":["it"],"or lengths":["so"],"or less":["for","equivalent","a","equivalent","like","equal,","the","the","OK,"],"or list":["comprehension","comprehensions.","monad"],"or lookup":["tables."],"or lowercase,":["`(not"],"or make":["a","it","all","Haskell","it"],"or making":["the"],"or map":["to"],"or mapping":["to"],"or may":["not"],"or maybe":["just","you're","something","Either","extensible","even","there's"],"or mersene":["random."],"or miss,":["although"],"or modify":["`Bearing`"],"or monad":["(last"],"or more":["efficient","`resetName`s","explicitly","precisely","generally","robust,"],"or move":["case"],"or multiset)":["and"],"or need":["unique"],"or newtype":["(with"],"or non-digit":["words."],"or none":["of"],"or normal-order":["evaluation,"],"or not":["but","an","GHC","there","a","all","you","the","for","you","the","to","it's","then","it","is,"],"or not!),":["so"],"or not,":["but","I'm","but","right?","the","or"],"or not.":["It","I","The","The","This","I"],"or nucleotide":["that"],"or null":["lists"],"or once":["there's"],"or one":["of"],"or only":["1","export","candidates"],"or other":["higher-level","means"],"or otherwise":["it"],"or otherwise)":["is"],"or parse":["anything"],"or pattern":["matching,","matching","matching"],"or perhaps":["just","just","this","even"],"or persistence":["here."],"or phrase":["to"],"or phrase,":["using"],"or pick":["out"],"or pointers":["on"],"or predicate,":["not"],"or predicate.":["Same"],"or prepend":["an"],"or pretty":["much"],"or prevent":["any"],"or primeFactors'":["really"],"or priority":["of"],"or profile":["it,"],"or put":["the"],"or r":["can"],"or ram":["exhaustion."],"or rather":["\"hard"],"or readability":["and","sacrifice."],"or recursion":["at","involved).","at"],"or remove":["levels"],"or removed.":["I"],"or rename":["`letters`"],"or replace":["it"],"or return":["from"],"or rewriting":["the"],"or running":["with"],"or see":["what"],"or should":["I","you","I","I?","I"],"or similar":["in"],"or simply":["long","`not","use","define"],"or so":["that"],"or some":["such,","such","less","names"],"or something":["similar.","like","of","like","else","of","like","else","for","like","like","like","explaining","to","else?"],"or something,":["but"],"or something?":["Hmm.","If"],"or sort.":["You"],"or space":["as"],"or spec,":["I"],"or special-case":["anything."],"or spend":["a"],"or split":["it"],"or splitting":["them"],"or starting":["from"],"or stay":["in"],"or strict":["functions?"],"or suggestions":["are"],"or switch":["to"],"or symbol.":["You"],"or that":["is"],"or the":["other,","where","not,","test","Functor","LANGUAGE","string","other.","other.","computation","other,","equivalent","`wordsBy`","Control.Applicative","list","list","parameter","entire","other?","result","transaction","list"],"or throw":["exceptions"],"or to":["simply","have","just","use","be","explicitly","build","use","do","explicitly","nearest","match"],"or toEnum":["(at"],"or too":["specific."],"or transcribe":["see:"],"or tripled":["depending"],"or trippling":["extension"],"or two":["from","lines)","numbers","in","and"],"or two).":["Take"],"or types":["wouldn't"],"or undesirable.":["\""],"or use":["qualified","a","the","qualified","a","qualified","qualified","`modifyMVar`.","it","`fromListWith`","BangPatterns","`randomR`","it","data.text.printf","`Debug.Trace.trace`.","recursion."],"or used":["by"],"or using":["the","a","toUpper","monad","Data.Map's"],"or utilize":["a"],"or value-strict":["respectively."],"or webpage":["that"],"or what":["information"],"or whatever":["concrete"],"or where":["to","clause"],"or whether":["it"],"or who's":["fault"],"or why":["you","I"],"or will":["try"],"or with":["a","something","Control.Arrow","pattern","case,"],"or worse":["with"],"or worse)":["to"],"or would":["there"],"or yelling":["in"],"or you":["can","could","could","disallow","could","can","treat","can"],"or you're":["okay"],"or zero,":["you"],"or η-reduction":["(this","(this"],"or) from":["Data.Bits"],"or, if":["you"],"or, more":["suggestively,"],"or, of":["course,"],"orElse was":["ultimately"],"orbital period":["of"],"orbitalPeriod ::":["Planet"],"ord and":["chr"],"ord of":["the"],"ord x":["-"],"ord x`":["equivalent"],"order (e.g.":["a"],"order and":["there"],"order and/or":["range."],"order as":["you","the"],"order because":["I'm"],"order changes":["the"],"order combinators":["instead","the","are","like"],"order defined":["in"],"order even":["if"],"order for":["`nucleotideCounts`"],"order function":["(ie:","to","`to`","like","to"],"order functions":["like","like","in"],"order here":["could"],"order in":["`makeAllLowercase","the"],"order internally,":["and"],"order is":["dictated","`O(n)`."],"order mattering,":["as"],"order not":["to"],"order of":["the","guards","the","the","the","condition","significance","actions...","`allCaps`","`isQuestion`","`allCaps`","operations","the","your","the","the","magnitude","`seen`","magnitude,","the","`chunk","arguments","instructions","magnitude","checks","the","my"],"order should":["be"],"order so":["that"],"order stuffs":["like"],"order that":["they're","doesn't"],"order the":["guards,","clauses"],"order then":["`flip`"],"order to":["prevent","build","check","implement","suppress","do","get","get","fit","have","use","get","find","do","have","have","get","make","use","ensure","ensure","make","solve","guarantee","avoid","access","prove","remove"],"order we":["traverse"],"order with":["an"],"order you":["write","have"],"order) IORef":["operations,"],"order) as":["a"],"order, ...":["and"],"order, so":["once"],"order, this":["is"],"order, which":["is"],"order, with":["foldl"],"order, you":["don't"],"order. Am":["I"],"order. An":["atomicModifyIORef"],"order. Clearly":["I'm"],"order... Probably":["i'm"],"ordered and":["that"],"ordered or":["hashed)."],"ordered sometimes":["gives"],"ordered the":["days"],"ordered this":["way"],"ordered, and/or":["hashable."],"ordering and":["`atomicWriteIORef`"],"ordering dependencies":["here","here"],"ordering dependencies\"":["I"],"ordering issue":["I"],"ordering of":["the","pattern","the","the"],"orders (hence":["my"],"orders of":["the"],"orders with":["`add`,"],"ordinary function":["its"],"ordinary immutable":["Haskell"],"ordinary mutexes":["you"],"organization. I":["usually"],"organized. I've":["got"],"oriented, like":["`map"],"origin of":["something"],"original `[Char]`":["once."],"original approach":["but"],"original approach,":["the"],"original attempts":["at"],"original code":["was","works"],"original code.":["Unless"],"original description":["of"],"original disagreement,":["@laury,"],"original example":["was"],"original guard":["implementation."],"original implementation":["in"],"original letters":["exactly","exactly"],"original line":["`concat"],"original meaning":["of"],"original nit,":["your"],"original record":["as"],"original string":["from"],"original string,":["also"],"original strings":["that"],"original submission.":["(Namely,"],"original suggestion":["was"],"original version,":["that","which"],"original words":["in"],"original. Resounding":["praise,"],"originally considered":["using"],"originally done":["a"],"originally had":["a"],"originally how":["I"],"originally porting":["the"],"originally started":["out"],"originally though,":["so"],"originally used":["`last`"],"originally, but":["took","it's","switched"],"originated in":["Ruby"],"ors and":["ands.","whatnot."],"ot perform":["them"],"other (which":["also"],"other 2":["lines"],"other FP":["languages"],"other Haskell":["data"],"other `where`":["clause"],"other active":["user"],"other approaches":["for"],"other assertions":["are"],"other better":["solutions."],"other bindings":["should","indented"],"other cases":["as","are","solution"],"other cases)":["since"],"other clauses":["of"],"other code":["that","seems","so"],"other comment":["here"],"other common":["typeclasses,"],"other compositions.":["`unlines"],"other computation":["is"],"other concepts":["first."],"other condition":["for","catching"],"other conditions":["into"],"other consideration":["to"],"other day":["to"],"other error":["strategies,"],"other errors,":["and"],"other exercise":["you"],"other exercises":["make","it","to"],"other exported":["functions"],"other factors":["are"],"other feedback":["I"],"other fields":["if","of"],"other form":["for"],"other function":["at"],"other function,":["then"],"other functions":["in","aren't","to","that","should","(e.g.","are","do","shorter).","from","here","from","in","would"],"other functions)":["type"],"other functions,":["or"],"other hand":["type","this","I","`add`","I","it"],"other hand,":["it's","if","compiler"],"other higher-level":["functions"],"other hints":["made"],"other implementations":["of"],"other improvement":["that"],"other in":["O(n"],"other input)":["rather"],"other instances":["don't"],"other is":["this"],"other issue":["with"],"other languages":["don't","I","(JS,","but","do,","but","for","would",":)"],"other languages)":["so"],"other languages,":["there","but"],"other languages?":["I"],"other letter":["first"],"other letters":["and"],"other list":["fns.","functions."],"other means":["of"],"other modules":["or","that","(or","to","by"],"other modules,":["or"],"other monad-y":["thing?"],"other name":["that"],"other nice":["stuff."],"other nit":["here"],"other nitpickers":["about"],"other nits?":["If"],"other note":["here"],"other numerical":["types"],"other odd":["number."],"other one":["fails.","is","is"],"other ones":["are","on","in"],"other option":["is"],"other options":["such","for"],"other package":["you'd"],"other packages":["is"],"other people":["will"],"other people's":["solutions"],"other people,":["but"],"other persons":["have"],"other places":["(only)"],"other points":["are","though."],"other portions":["of"],"other possibilities":["first,"],"other possible":["types","option","choices","strategies","function","solutions"],"other potential":["downsides)."],"other predicate":["returns"],"other predicates":["are"],"other problem":["is",":)"],"other producers":["(i.e."],"other programming":["languages,","languages."],"other purposes":["and"],"other question:":["I"],"other reason.":["If"],"other references":["that"],"other representation,":["then"],"other reviewers":["will"],"other rule":["is"],"other rules":["are","against"],"other side":["in"],"other silently":["discarding,"],"other small":["nit","thing"],"other solutions":["it","use","if","I've","to","because"],"other strange":["things"],"other submissions":["and","were"],"other suggestion":["I"],"other suggestions":["for","though"],"other than":["`responseFor`,","that.","that.","this","as","the","that,","that,","that","to","`otherwise`).","the","ghc.","adding","asymptotic","the","not","\"just","the","having","the","`['G',","the"],"other thing":["here","you","you","you","to","you","is","you","you","to"],"other things":["blow","are"],"other things)":["if"],"other things),":["the"],"other things,":["so"],"other time":["you"],"other time,":["-as"],"other top-level":["function,","function.","bindings"],"other transformation":["of"],"other trick":["that","is","here"],"other two":["suggestions,","point-free","predicates"],"other types":["simply","at"],"other variables":["to"],"other way":["of","to","around,","to","around).","around,","to","to"],"other way,":["where"],"other ways":["to","you","to","to"],"other weird":["input"],"other word":["is"],"other words":["it's","you"],"other words,":["it","try","you","`hasLetter`","`foldr`","perform","should"],"other words:":["a"],"other would":["probably"],"other' you":["can"],"other'. As":["it"],"other's code":["and"],"other, I":["just"],"other, although":["I"],"other, but":["I"],"other, detailed":["info."],"other, so":["if"],"other, you":["can"],"other. A":["word"],"other. But":["yes,"],"other. First":["one"],"other. I":["originally"],"other. In":["this"],"others as":["`show"],"others did":["it."],"others have":["used","said,","said,"],"others have,":["likely"],"others helped":["to"],"others said,":["there"],"others seem":["more"],"others solve":["this"],"others think":["it's"],"others will":["explain"],"others' solutions,":["I"],"others) can":["understand."],"others, if":["you'll"],"others, in":["addition"],"others. Also,":["you"],"others. `isUpper":["'1'`"],"others?) would":["learn"],"otherwise -\u003e":["fromEnum"],"otherwise =":["nucleotide","…`","def","default","1","error...","a","\"Whatever.\"","toLower","\"Whatever.\"","Default","..","error","Whocares","…","…","error","baz","\"Whatever.\"`","\"Whatever.\"","go","0","False","go","undefined","False","f`,","sort","go","Flase\u003c/pre\u003ebecause","error","'"],"otherwise =&gt;":["WordCount"],"otherwise ==":["\"hello,"],"otherwise I":["don't"],"otherwise `where`":["is"],"otherwise `yelling`":["is"],"otherwise all_caps":["is","is"],"otherwise any":["code"],"otherwise be":["the","the"],"otherwise both":["calls"],"otherwise case":["still"],"otherwise clause,":["or"],"otherwise drop":["head"],"otherwise everything":["here","looks","here","here"],"otherwise guard.":["Had"],"otherwise if":["there's"],"otherwise is":["ok"],"otherwise it":["wouly","looks","would","looks","will","won't"],"otherwise it'd":["be"],"otherwise it's":["great!","updated"],"otherwise just":["pass"],"otherwise looks":["great.","great."],"otherwise of":["course"],"otherwise the":["accumulator","sky"],"otherwise this":["is","looks","looks","looks","looks","looks","looks","looks"],"otherwise uninteresting":["queries"],"otherwise use":["foldr.\"","foldr.\"","foldr.\""],"otherwise very":["similar","nice."],"otherwise we":["will"],"otherwise wrapping":["the"],"otherwise you":["need","get"],"otherwise you'll":["have"],"otherwise) is":["beyond"],"otherwise. (Apparently":["I've"],"otherwise. I":["like"],"otherwise. Some":["may"],"otherwise? To":["me"],"ouch, I":["did"],"ought to":["be","compare","be.","be","be"],"ought to.":["Going"],"our code":["as"],"our list":["of"],"our original":["disagreement,"],"our robot":["always"],"out (like":["the"],"out (with":["optimization"],"out @lamar's":["suggestion"],"out Data.List.Split":["isn't"],"out Data.List.Split's":["`wordsBy`"],"out Data.Text,":["now"],"out I":["need","have"],"out Parallel":["and"],"out STM":["(TMVar"],"out [`pointfree`](http://hackage.haskell.org/package/pointfree)":["if"],"out [this":["article]"],"out `Map.findWithDefault`":["for"],"out ```name'```":["in"],"out `all`":["to"],"out `earthYear":["*`"],"out `insertWith`":["or"],"out `isAlphaNum`":["in"],"out `randomRIO`,":["you"],"out `someFun'`":["all"],"out `sort":[".","str'`"],"out `sort`":["on"],"out `wordsBy`":["in","from"],"out a":["list","workaround.","lot","name","way","clean","long","bit"],"out again.":["Maybe"],"out all":["of","of","of"],"out an":["incomplete","error"],"out and":["providing","replaced"],"out anyway,":["and"],"out as":["it","`str`"],"out as-is":["and"],"out because":["I"],"out by":["oneself"],"out characters":["when"],"out dead":["code."],"out directly,":["some"],"out easily,":["here's"],"out empty":["strings"],"out entirely.":["The"],"out even":["if"],"out everything":["you"],"out for":["a","some"],"out function":["result"],"out how":["to","to","to","to","to","easily","to","to","to","to","to","to","to","it","to","to","it","many","to","to","to","to","to","Haskell's","to","to","to","to","to","to","to","to","Traversable","to","to","to"],"out if":["I"],"out in":["this","order","#haskell","that","simpler","sorted"],"out intermediate":["values"],"out into":["an","its","first-class","separate","a"],"out is":["that"],"out isUpper,":["but"],"out it":["does"],"out just":["the"],"out like":["maybe","this,","this,","this"],"out loud":["like"],"out of":["its","higher","the","stack","stack","some","stack","stack","the","the","stack","the","that","place","10","the","equivalent.","the","*n*-tuples","curiosity,","the","hand","routes","the","their","the","the","the","Clojure","memory","it","it,","alphabet","the","memory","the","memory."],"out ok":["both"],"out on":["my","whether","a"],"out optimization":["by","for"],"out optimization,":["but","but","but"],"out pretty":["clean."],"out really":["clean."],"out since":["count"],"out so":["I","`sortLower"],"out some":["alternatives.","issues"],"out specific":["chars"],"out stuff.":["Thanks!"],"out than":["something"],"out that":["in","I","you","it's","`on`","it","way.","GHC","list","this","Control.Concurrent.STM","the","you","the"],"out the":["type","conditionals?","conditions?","model","`prepare`","predicate","non-space","tests.","non-alpha","unit","type","recursion","type","tuple","parts","precedence","algebra","inner","algebra","other","math","type","`Response`","direct","type","functions","Prelude","lack","common","difference","`fromGregorian","smaller","appropriate","destructuring","logic","null","beginning","values.","`(==","algebra","function","meaning","cases.","functions","parts","repetition","repetition","empty","`(-\u003e)"],"out there":["isn't","has"],"out there,":["but"],"out these":["links:"],"out this":["chapter","section","section","section","section","section","section","section","section","section","section","section","section","section","section","section","section","section","section","section","section","section","section"],"out though,":["if"],"out to":["see","a","get","`anagramsFor`'s","break","look","be","be","`anagramsFor`"],"out type":["signatures"],"out using":["Map"],"out version":["is","left"],"out what":["the","instance","a","goes","was","is","that"],"out what's":["supposed"],"out when":["they're","I","to","the","I","I"],"out where":["to"],"out which":["version","functions"],"out why":["you","sorting","my","my","markup","markup"],"out will":["go"],"out with":["just","guards,","a","making","the","a"],"out without":["me"],"out yet":["though,"],"out yet.":["Better"],"out you":["could"],"out your":["other","quasi-imperative"],"out! There":["are"],"out!\" @=?":["responseFor"],"out!\" case,":["I"],"out\" by":["using"],"out\" case,":["try"],"out\" optimization":["yourself.","in","here"],"out\" optimization.":["Right"],"out' what":["a"],"out) but":["it"],"out),can you":["try"],"out). It's":["a"],"out, I'd":["add"],"out, at":["a"],"out, but":["why","now","not"],"out, either":["`length"],"out, it":["did"],"out, just":["like"],"out, so":["it's"],"out, uploaded":["a"],"out. Even":["if"],"out. I":["find"],"out. I'll":["try"],"out. I'm":["sure"],"out. It's":["also"],"out. Probably":["just"],"out: `mkRobot`":["and"],"out? Just":["that"],"outcome is":["reversed)."],"outcome, one":["per"],"outcome?) http://stackoverflow.com/questions/8235797/is-foldl-ever-preferable-to-its-strict-cousin-foldl":["..."],"outdated and":["doesn't"],"outdated version":["of"],"outer equation":["with."],"outer filter":["will","executes","is"],"outer filter.":["Which"],"outer function,":["since"],"outer parens":["on","and"],"outer scope":["then","in"],"outliers among":["100","100","100"],"outlined by":["the"],"outlines what":["you"],"outloud. Another":["thing"],"output and":["if"],"output code":["(printing"],"output for":["version","two","any"],"output generated":["by"],"output in":["quotes"],"output is":["String,"],"output its":["better"],"output length":["can"],"output of":["grade;","`:info`","`ghc"],"output or":["done"],"output without":["any","having"],"output, but":["all"],"output, if":["you"],"output, which":["can"],"output. **Now**":["it"],"output. Here's":["the"],"output. Is":["there"],"output. You":["should"],"outputs something":["that's"],"outputs-to-inputs matches":["the"],"outside a":["recursive"],"outside and":["fixing"],"outside in\"":["and"],"outside it":["looks"],"outside of":["the","the","your","parentheses","the","the","this","`primeFactors`,","`chmod`.","the","the","the","Haskell"],"outside the":["module,","module.","module,","parentheses","lambda."],"outside then":["only"],"outside, but":["this"],"outside-in or":["lazy"],"outsmart the":["test"],"outweigh the":["cost","cost"],"over (ix":["0)"],"over 2-tuples":["you'll"],"over 4":["elements."],"over 80":["characters."],"over Float":["in"],"over []":["and"],"over [guards](http://www.haskell.org/haskellwiki/Haskell_programming_tips#Guards)":["in"],"over `Robot`":["inside"],"over `[Char]`":["for","in"],"over `choice`,":["just"],"over `elem":["['A'..'Z']`"],"over `insertWith`,":["you"],"over `let`":["and"],"over a":["line","zipped","wrapped","wrapped"],"over again,":["something"],"over allowing":["the"],"over an":["input"],"over and":["over,","over","over"],"over bindings":["from"],"over complicated":["logic"],"over data":["and"],"over engineered":["at","Writer"],"over engineering":["for"],"over expression":["style,"],"over foldl,":["and"],"over from":["when"],"over fromMaybe":["but"],"over guards":["for"],"over guards,":["e.g."],"over incomming":["data,"],"over internal":["robot"],"over it?":["IMHO"],"over its":["keys"],"over letting":["the"],"over list":["of","in"],"over my":["head","list"],"over not":["using"],"over on":["the"],"over performance":["(and"],"over point":["free"],"over previously":["allocated"],"over regular":["strings"],"over runtime":["efficiency"],"over terseness.":["Understandability,"],"over that":["one","and","with"],"over the":["student","input,","string","other,","string","list","string.","last","string,","place,","top.","input","input","list","place,","input","place.","Map.","`sum`.","input","incoming","other.","place.","input","input","place.","top.","input","list","number.","place.","input","grouped","place","string.","list,","rest","module","list","balance","whole","actual"],"over this":["list","attempt?"],"over time":["that"],"over tuples":["aren't"],"over using":["`all`","`$`"],"over values,":["whereas"],"over version":["with"],"over with":["`Data.Map.insert`."],"over your":["code","string.","version"],"over) instead":["of"],"over). But":["still,"],"over, e.g.":["`parts"],"over-engineered, doing":["in"],"over-golfed, i'm":["always"],"overall but":["it"],"overall layout":["of"],"overall length":["validations,"],"overall meaning":["of"],"overall since":["you"],"overall. I":["agree"],"overall. It's":["often"],"overboard and":["not"],"overboard for":["the"],"overboard pulling":["things"],"overboard when":["doing"],"overboard with":["point-free."],"overcompication as":["normalized"],"overcomplicated as":["`Data.Char.toLower`"],"overcomplicated things":["when"],"overcomplicated, can":["you"],"overcomplicated, there":["is"],"overcomplicating things.":["But"],"overflow (for":["sufficiently"],"overflow and":["in"],"overflow and/or":["space","run"],"overflow at":["runtime."],"overflow because":["it's"],"overflow error":["in"],"overflow if":["it's"],"overflow in":["larger"],"overflow or":["big","ram"],"overflow the":["stack.","stack.","stack.","stack.","stack.","stack.","stack","stack","stack.","stack"],"overflow was":["both"],"overflow when":["you","it","it's"],"overflow). On":["the"],"overflow). You":["want"],"overflow, etc.),":["it's"],"overflow, something":["like"],"overflowed silently?":["That"],"overflows the":["stack","stack","stack","stack","stack","stack"],"overflows when":["one"],"overhead cost":["as"],"overhead here":["and"],"overhead of":["converting","your","temporary"],"overhead you":["could"],"overhead, because":["there's"],"overhead, you":["should"],"overkill -":["other"],"overkill for":["testing","this","functions","this","this","this","this"],"overkill here,":["there"],"overkill here.":["Take"],"overkill in":["this"],"overkill to":["use","use"],"overkill using":["Parsec,"],"overkill when":["Map.insertWith"],"overkill, and":["translated"],"overkill, but":["you"],"overkill, you":["can"],"overkill. So":["the"],"overkill; this":["is"],"overlap with":["Prelude"],"overlap, I":["wonder"],"overlap. Other":["than"],"overlapping conversions":["from"],"overlapping, you":["only"],"overload String":["for"],"overloaded strings":["(`T.isSuffixOf`"],"overloading and":["guards"],"overlook it":["(might"],"overly attached":["to"],"overly complex.":["There"],"overly complicated,":["i.e.","i.e."],"overly complicated.":["What"],"overridden by":["any","any","an","any","any","any","any","any","any"],"overridding reason":["not"],"overriden ';'":["from"],"overrides `mod`,":["so"],"overrun and":["not"],"oversight of":["the"],"oversights in":["the"],"overview I":["recommend"],"overview of":["how","what's"],"overwritten by":["what"],"overwrought; specifically":["the"],"owl eyes),":["but"],"own (i.e.":["without"],"own I'm":["converting"],"own School":["that"],"own `silent`":["and"],"own anagram":["has"],"own anagram\",":["but"],"own but":["similarly","ghci","not"],"own code":["I","unless","and"],"own combinator,":["e.g."],"own custom":["function;"],"own data,":["(newtype"],"own definition":["as","`all"],"own feedback":["here."],"own filtering":["on"],"own for":["anything","clean"],"own function":["(canonicalize),","(normalize","`canonicalize`,","that","that","that"],"own function,":["and","but","rather","and","since"],"own generic":["functions"],"own implementation,":["and"],"own line":["so","you","and","after","so","to"],"own line,":["so","you","or","and"],"own line.":["There's"],"own lines":["(indented"],"own parameters,":["or"],"own programs":["and"],"own right":["(that"],"own set":["of"],"own splitting":["predicate."],"own typeclass":["in"],"own variable.":["There's"],"own variables…":["the"],"own word":["splitter"],"own) you":["can"],"own, and":["if"],"own, but":["it's","there"],"own, even":["if"],"own. For":["Bob,"],"own. Most":["of"],"own. You":["already"],"own. [This":["page]"],"p \u003c-":["l,"],"p =":["not","not","["],"p =&gt;":["Read"],"p ==":["Mercury","Venus"],"p xs":["=","&&","=","&&"],"p →":["r)"],"p1 $":["[p1,"],"p1 \u003cthunk":["f"],"p1 []\u003e)":["="],"p1 is":["filtered"],"p1 p2":["are"],"p1 passes":["first"],"p1, fmap":["(,'B')"],"p1`. On":["line"],"p1p2 -":["both."],"p2 (p1p2:\u003cthunk:":["f"],"p2 (p2:\u003cthunk:":["f"],"p2 -":["second"],"p2 .":["f","\u003cthunk:"],"p2 \u003cthunk:":["f","f"],"p2 []\u003e":["="],"p2 []\u003e\u003e":["="],"p2 [p1,p2,p1p2]\u003e":["="],"p2 [p1p2]\u003e":["="],"p2 [p1p2]\u003e)":["="],"p2 [p2,p1p2]\u003e":["="],"p2 are":["predicates"],"p2, p1+p2]":["="],"pAreaCode &lt;*&gt;":["pFirstPart"],"pAreaCode pFirstPart":["pSecondPart`"],"pFirstPart &lt;*&gt;":["pSecondPart`"],"pFirstPart pSecondPart`":["is"],"pSecondPart` (it's":["not"],"pSecondPart` is":["often"],"p` and":["use"],"pack the":["`\"?\"`"],"pack, so":["it"],"pack/unpack in":["their"],"package (which":["is"],"package :).":["After"],"package `Data.Strict.Tuple`":["or"],"package and":["wordsBy","type"],"package apparently":["only"],"package base":["..."],"package ghc-prim":["..."],"package has":["ByteString.Short"],"package in":["Hackage","a"],"package integer-gmp":["..."],"package manager":["is"],"package name":["at"],"package named":["'split'..."],"package recommended":["in"],"package that":["Data.Map.Strict","didn't"],"package to":["know.","accomplish"],"package useful":["to"],"package you'd":["want"],"package, and":["the","second"],"package, nor":["did"],"package, since":["it"],"package, that":["comes"],"package. That":["is"],"packages installed":["you"],"packages is":["kosher"],"packages that":["ship"],"packages. When":["scanning"],"packed in":["terms"],"packed with":["goodies"],"packing just":["to"],"paddedVerse xs)`":["is"],"page before":["but"],"page on":["Haskell"],"page where":["bytestring"],"page you":["linked"],"page! I":["do"],"page) `testBit`":["even"],"page, I":["think"],"page] (http://www.haskell.org/ghc/docs/latest/html/libraries/)":["has"],"page](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl%27) might":["make"],"pages on":["[currying](http://www.haskell.org/haskellwiki/Currying)"],"pain building":["up"],"pain since":["the"],"pain would":["be"],"pains to":["note"],"pair (I,j)":["you"],"pair a":["condition"],"pair in":["`delta`."],"pair into":["a"],"pair of":["types.","parentheses","\"swapable\""],"pairs `++`":["the"],"pairs and":["the"],"pairs as":["input,"],"pairs but":["this"],"pairs here":["18"],"pairs isn't":["really"],"pairs of":["`(word,","the"],"pairs or":["the"],"pairs than":["as"],"pairs that":["you"],"pairs with":["a"],"pairs, and":["then"],"pairs, here's":["a"],"pairs, the":["data"],"pairs, which":["doesn't"],"pairs. Am":["I"],"pairs. Maybe":["I"],"pairs. This":["feels"],"palindromes. This":["is"],"paper [Let-floating](http://research.microsoft.com/pubs/67060/float.ps.gz)":["from"],"papers about":["optimizations"],"para sums":["it"],"paragraphs in":["a"],"parallel on":["multiple"],"parallelism and":["the"],"parallelism, if":["this"],"parallelism, or":["concurrency."],"param =":["foo","bar"],"param from":["all"],"param` if":["you"],"param` or":["`definition"],"parameter before":["making"],"parameter instead":["of"],"parameter is":["not"],"parameter names":["imply","on"],"parameter of":["b:"],"parameter on":["`wordCounters`."],"parameter than":["you"],"parameter that":["is"],"parameter that's":["enabled"],"parameter to":["my","the","the"],"parameter where":["False"],"parameter, which":["would"],"parameter. HLint":["will"],"parameter: ```foldl'":["(\\(isError,"],"parameter? As":["in"],"parameter? or":["should"],"parameterize nucleotide":["type"],"parameters (`Schedule`":["and"],"parameters are":["`Char`"],"parameters because":["once"],"parameters better":["so"],"parameters in":["functions"],"parameters on":["the"],"parameters until":["it"],"parameters were":["placed."],"parameters you":["can"],"parameters, or":["make"],"parameters, such":["as:"],"parameters. But":["it's"],"parantheses improves":["readability,"],"parantheses were":["more"],"pare things":["down"],"parens and":["the"],"parens are":["necessary"],"parens aren't":["needed"],"parens around":["`(map","`map","`any","the","the","`last","`any","`head","\"filter","`map","map","`fromIntegral","`ofBeer","`sort","`zipDNA","`show","isNumber"],"parens besides":["the"],"parens in":["boolean","cases","the","sing","`isAnagram`","`subsequenceFromTo`","line","`bstLeft"],"parens on":["line","the"],"parens only":["when"],"parens you":["have"],"parens, but":["this"],"parens... what":["is"],"parent binding":["for"],"parentheses (this":["is"],"parentheses are":["superfluous.","also","superfluous,","superfluous","much","needed","only","needed","superfluous","not"],"parentheses aren't":["very","necessary","needed"],"parentheses around":["\"last","it:","`map","`any","`show","`prep","`insert'`","`filter","`prep","the","`map","`areaCode","`sort`","`(normalize","`map","the","the","the","`(show","`(y","`(l","rhs","`C.toLower`","`show"],"parentheses at":["basically"],"parentheses because":["I","function"],"parentheses don't":["delimit"],"parentheses elsewhere:":["`foo(bar(baz))`"],"parentheses here":["since","are","are"],"parentheses here.":["Since"],"parentheses if":["the","you"],"parentheses in":["`dispatch`","`not(isAlpha","line","function","Haskell","most","`silence`","`anagramsFor`","your","`ageOn`","`meetupDay`","`isYelling`","`anagram`","`filterWord","go.","here","`add`."],"parentheses let":["you"],"parentheses like":["that","in"],"parentheses looks":["better"],"parentheses now,":["I"],"parentheses on":["each","lines","line","line","the","the","either","line"],"parentheses or":["bind"],"parentheses right":["next"],"parentheses since":["function"],"parentheses that":["actually"],"parentheses there":["don't"],"parentheses to":["be","differentiate","group","separate"],"parentheses you":["could","actually","have"],"parentheses, and":["question","because"],"parentheses, because":["function"],"parentheses, but":["the"],"parentheses, function":["application"],"parentheses, in":["the"],"parentheses, there":["is"],"parentheses, there's":["no"],"parentheses, you":["can"],"parentheses. For":["example"],"parentheses. Function":["application","application","application","application"],"parentheses. Haskell":["uses"],"parentheses. I'm":["not"],"parentheses. In":["Haskell,"],"parentheses. It's":["not"],"parentheses. Other":["than"],"parentheses. The":["parentheses"],"parentheses. You":["don't","may"],"parentheses: as":["long"],"parentheses; that's":["a"],"parentheses; they":["were"],"parenthesis `str`":["would"],"parenthesis are":["actually","not"],"parenthesis around":["predicates"],"parenthesis is":["technically"],"parenthesis on":["line","line"],"parenthesis/brakets all":["matched"],"parenthesizing these":["operators,"],"parents on":["purpose"],"parity with":["Ruby,"],"parralel execution":["but"],"parse \"01\"":["with"],"parse (static":["parser),"],"parse a":["possibly","\"[\""],"parse and":["understand.","understand."],"parse anything":["except"],"parse concerns.":["Wonder","Wonder"],"parse each":["type","separately,"],"parse on":["first"],"parse out":["the"],"parse question":["\"\""],"parse some":["arbitrary"],"parse than":["point"],"parse them":["from"],"parse, you":["will"],"parse. I":["think"],"parse. Really":["I'm"],"parseNumber' ::":["String"],"parseNumber'. it":["looks"],"parseNumber` because":["function"],"parsec but":["is"],"parsec does.":["This"],"parsec in":["a"],"parsec or":["attoparsec,"],"parsec. I":["would"],"parsed as":["0"],"parser (attoparsec)":["for"],"parser blew":["up"],"parser combinators":["from"],"parser here":["isn't"],"parser is":["typically"],"parser or":["Maybe"],"parser that":["reads"],"parser with":["a","Parsec"],"parser), and":["a"],"parser](http://www.haskell.org/haskellwiki/Arrow#Parser) in":["the"],"parsers (in":["Scala..."],"parsers), but":["my"],"parsing between":["a"],"parsing function":["from"],"parsing library":["like"],"parsing of":["digits"],"parsing task":["to"],"parsing that":["character"],"parsing the":["phone","whole","\"[text]\""],"parsing version":["though"],"parsing, and":["then","trying"],"parsing. Maybe":["some"],"part after":["the"],"part and":["partial"],"part but":["always"],"part doing":["though?"],"part for":["me"],"part in":["L18","```verse```,","`isBlank`"],"part is":["`[Char]`","for","pretty","handled","when"],"part more":["simply."],"part of":["the","the","the","the","why","the","the","a","the","it","the","replacePunctuation","Prelude","this","your","the","Haskell","the","your","the","the","the","the","the","Haskell","the","this","the","my","Haskell","the","the","a","the","the","the","the","an","the","this","its","Simon","it.","||","list","the","this","the"],"part of.":["(Is"],"part of?":["For"],"part so":["that"],"part that":["I"],"part that's":["relevant"],"part the":["tests"],"part where":["your","it"],"part\". It'll":["eventually"],"part) was":["developed"],"part, but":["this","I"],"part, categorising":["the"],"part, less":["brakets,"],"part, negatives":["to"],"part, that":["would"],"part. Thanks":["again!"],"part.. how":["can"],"partial answer":["or"],"partial application":["in","is","and"],"partial because":["they"],"partial function":["combined","in","is","(only","(crashes","that","is","(failing","as","here"],"partial function.":["I","It","I","Instead"],"partial functions":["(my","such","so","(a"],"partial import":["and"],"partial to":["the"],"partial, in":["full"],"partial, or":["you're","you"],"partial, so":["it"],"partial... I":["can't"],"partial... which":["is"],"partiality is":["safe"],"partiality would":["have"],"partially applied":["function","function"],"participate in":["compiler"],"particular I":["think"],"particular `(all":["(not"],"particular `fromListWith`":["or"],"particular case":["it's","it's"],"particular case,":["using"],"particular choice":["of"],"particular data":["types,"],"particular function":["I"],"particular how":["these"],"particular is":["pretty"],"particular issue":["is"],"particular meaning":["in"],"particular numeral,":["you"],"particular order":["(e.g."],"particular piece":["of"],"particular pragma":["is"],"particular reason":["for","that","you","to"],"particular reason,":["as"],"particular seems":["to"],"particular solution":["it's"],"particular task.":["GADT"],"particular test":["for"],"particular the":["Alternative"],"particular to":["the"],"particular transform":["could"],"particular transformation,":["where"],"particular use":["of"],"particular will":["help"],"particular), but":["this"],"particular). It's":["best"],"particular, check":["out"],"particular, consider":["that"],"particular, just":["simple"],"particular. It's":["a"],"particularly `anything`.":["Also,"],"particularly don't":["want"],"particularly good":["case","error"],"particularly like":["how"],"particularly liked":["the"],"particularly more":["readable"],"particularly necessary":["-"],"particularly nice":["looking"],"particularly satisfied":["with"],"partly because":["the","its"],"partly due":["to"],"parts ::":["String"],"parts =":["second"],"parts are":["that"],"parts input":["="],"parts is":["it"],"parts of":["a","Haskell","the"],"parts that":["break"],"parts with":["no"],"parts you're":["interested"],"parts` means.":["For"],"pass Data.List.insert":["to"],"pass `numeralsIter`":["the"],"pass above":["two"],"pass all":["tests.","the"],"pass and":["seems"],"pass anything":["other"],"pass around":["because"],"pass because":["list"],"pass either":["way."],"pass error":["parameter:"],"pass everything":["around"],"pass except":["the"],"pass for":["me:","some"],"pass how":["many"],"pass in":["your"],"pass is":["enough"],"pass it":["through)","a","down"],"pass its":["argument"],"pass just":["for"],"pass of":["the"],"pass over":["the","the","the","previously"],"pass solution.":["Nevertheless,"],"pass string":["there."],"pass tests,":["but","e.g.:"],"pass that":["argument","value"],"pass the":["tests","tests","tests...","test","(somewhat","test","partially","last","tests.","constants","tests,","last","tests?","last","test","tests","tests,"],"pass them":["all"],"pass this":["go"],"pass through":["the","the","the"],"pass to":["find","zip","unfoldr"],"pass two":["arguments"],"pass version":["and","of"],"pass we":["have"],"pass with":["no"],"pass you":["bogus"],"pass your":["all"],"pass\" due":["to"],"pass), please":["let"],"pass, I":["always"],"pass, and":["fix"],"pass, but":["I","I'm"],"pass, just":["a"],"pass, not":["two,"],"pass, thanks":["for"],"pass, then":["for","outer"],"pass, which":["is"],"pass, without":["intermediate"],"pass. I":["still","think"],"pass. Using":["`count`"],"pass? Some":["of"],"passed 100000":["tests."],"passed all":["the"],"passed and":["this"],"passed by":["the"],"passed in":["as"],"passed in,":["like"],"passed into":["inner"],"passed the":["tests.","empty","tests,","tests"],"passed to":["this","functions","it","all"],"passed, but":["there's"],"passed, so":["`letters`"],"passed. One":["option"],"passes along":["a"],"passes at":["worst"],"passes even":["with"],"passes first":["predicate,"],"passes of":["filter"],"passes over":["the","the","the","the","the","incomming"],"passes required":["by"],"passes somehow":["for"],"passes test":["but"],"passes the":["tests,","tests","tests,","tests.","unittests,","tests)","tests","tests.","test"],"passes to":["accomplish"],"passes. You":["could"],"passing `baseNums`":["around"],"passing `m`":["explicitly"],"passing `phrase`":["into"],"passing around":["`Int`s.","`Int`s.","native"],"passing inputs":["that"],"passing it":["as","as","as","in","through"],"passing the":["tests,","tests,","rest.","invalid"],"passing them":["to"],"passing, I'm":["having"],"passing. I":["have"],"past exercise":["and"],"past is":["that"],"past my":["personal"],"past sqrt":["n"],"past the":["first","`filter"],"paste from":["one"],"paste, rather":["than"],"pasting this":["in"],"patch at":["it"],"path than":["`foldl'`"],"patten match":["\"\""],"pattern (for":["any"],"pattern `.).)":["..."],"pattern and":["extracting"],"pattern arises.":["I"],"pattern below":["it."],"pattern but":["in"],"pattern for":["that.","silence,"],"pattern guard":["`|"],"pattern guards":["reminder!"],"pattern guards,":["code"],"pattern is":["better","followed","followed","with","quite","an"],"pattern match":["using","on","off","on","on","to","that","against","against","in","on","against","if","on","on","on","is","in","on","on","`_`","`(first","if","over"],"pattern match,":["another"],"pattern matchers":["for"],"pattern matches":["and","on","to","on","even","in","or","(instead","for"],"pattern matches,":["add"],"pattern matching":["is","with","and","in","on","in","are","in","might","for","on","would","to","since","definition","and",":)","--","on","version","or","(some","version","the","version:","case","`[]`","in","instead","looks","on","but","directly","than","is","over","as","keeps","to","becomes","as","usage.","instead","is","and","was","on","and","rather","instead","instead","(in","in"],"pattern matching*":["*"],"pattern matching,":["although","but","but","I","guards,","and","decided","with","which","other"],"pattern matching.":["Definitely","In","Can"],"pattern matching?":["It"],"pattern of":["just","`foldl'`","updating"],"pattern overlap,":["I"],"pattern step":["in"],"pattern that":["was"],"pattern to":["return","transform","all","match."],"pattern warning.":["I"],"pattern will":["map"],"pattern with.":["Maybe"],"pattern, and":["explicit"],"pattern, as":["we"],"pattern, but":["there"],"pattern, can":["you"],"pattern, my":["mistake,"],"pattern, right?":["Or"],"pattern-match something":["like"],"pattern-matching makes":["the"],"pattern. To":["achieve"],"pattern. `([])`":["can"],"patterns +":["c"],"patterns [0,":["1,"],"patterns as":["'l'"],"patterns don't":["do"],"patterns in":["here"],"patterns to":["fix"],"patterns with":["a"],"patterns, I":["am"],"pause at":["least."],"pay a":["`O(n)`"],"pay for":["suspension"],"paying O(n)":["to"],"paying enough":["attention."],"paying more":["attention"],"peace of":["mind"],"pedantic note:":["curry"],"peek` if":["you"],"peeked already":["(before"],"pen paper.":["Thanks"],"penalty for":["it,"],"pending transaction":["will"],"pending transaction,":["however"],"penny has":["dropped."],"people also":["use","like"],"people choose":["to","to","to","to"],"people could":["guide"],"people dig":["into"],"people do":["not"],"people don't":["like"],"people end":["up"],"people explore":["using"],"people have":["completed","used"],"people how":["to"],"people kept":["pointing"],"people like":["to"],"people might":["like"],"people off,":["ignoring"],"people only":["write"],"people prefer":["combinators"],"people probably":["know"],"people pull":["it"],"people put":["a"],"people solve":["this"],"people submit":["feedback"],"people that":["are","asymptotic","using"],"people they":["read"],"people to":["do","learn","use","run","understand","pack/unpack","use"],"people towards":["that"],"people use":["Control.Applicative's"],"people using":["your"],"people who":["may","have"],"people will":["have"],"people with":["the","identical","pointfree"],"people would":["find","use","write","write","pick","write","fuse","do"],"people's solutions":["by"],"people, but":["I"],"people, when":["confronted"],"people. i'm":["becoming"],"per @aaliyah's":["suggestion."],"per @carlotta's":["comment."],"per @florence's":["suggestion."],"per @krista's":["suggestion."],"per @mara's":["suggested"],"per action":["may"],"per all":["steps."],"per call":["to","of","of","to","to","to","to","to","to","to"],"per each":["`anagramsFor`"],"per etrepum's":["suggestions"],"per gnuvince's":["recommendation,"],"per iteration":["but"],"per kimhyunkang's":["suggestion"],"per line":["(though"],"per line,":["so"],"per my":["comment"],"per nucleotide)":["in"],"per player":["turn,"],"per your":["advice,","suggestion.","suggestion."],"per-file basis":["with"],"perfect application":["for"],"perfect except":["you"],"perfect expression,":["e.g."],"perfect for":["roll-your-own,"],"perfect guarantees":["(unless"],"perfect idea":["to"],"perfect sense":["just","now!","to"],"perfect sense,":["obviously.","but"],"perfect with":["CONS-list"],"perfectly acceptable":["to","to"],"perfectly acceptable.":["It's"],"perfectly elegant":["solution."],"perfectly fine":["to"],"perfectly fine,":["any"],"perfectly fitting":["function"],"perfectly good":["for"],"perfectly justified":["in"],"perfectly legal":["to"],"perfectly reasonable":["and"],"perfectly to":["this"],"perfectly valid.":["However"],"perform a":["\"float"],"perform an":["O(n)","O(n","eta-reduction),","eta-reduction","eta-reduction","\"eta-reduction\""],"perform any":["better"],"perform arbitrary":["parsing"],"perform calculations":["in"],"perform exactly":["what"],"perform faster?":["It"],"perform fusion":["on","for"],"perform the":["checks","tasks"],"perform them":["all"],"perform these":["operations."],"perform this":["optimization","task,","optimization,"],"performance (and":["let"],"performance advantage":["to"],"performance alters":["the"],"performance and":["less","(relative)"],"performance be":["significantly"],"performance but":["because"],"performance can":["be"],"performance characteristics.":["It","I'm"],"performance compared":["to"],"performance critical":["environment,"],"performance here,":["but"],"performance if":["I"],"performance implications":["are","for"],"performance implications).":["`fromListWith`"],"performance improvements,":["and"],"performance is":["not","of","going"],"performance issues":["there."],"performance level":["I"],"performance of":["name"],"performance on":["the"],"performance optimizations":["when"],"performance or":["readability"],"performance out":["of"],"performance problem,":["but"],"performance profiling,":["you"],"performance requirements":["in"],"performance since":["it"],"performance that":["way."],"performance when":["i","compiled."],"performance will":["be"],"performance worse.":["Also"],"performance you":["need","should"],"performance, being":["the"],"performance, but":["for","it's","there","it","can","can"],"performance, since":["there","anything"],"performance, you":["probably","should"],"performance. Adding":["integers"],"performance. I'm":["not"],"performance. Neither":["`performAction`"],"performance. Using":["`fromListWith`"],"performance… `count":["n"],"performant (at":["least"],"performant (or":["at"],"performant because":["of"],"performant code,":["but"],"performant for":["two"],"performant if":["you"],"performant is":["to"],"performant methods":["for"],"performant since":["it"],"performant still":["by"],"performant than":["using"],"performant way":["to"],"performant, but":["for"],"performed anyway":["to"],"performed to":["`x`"],"performing \"basic\"":["addition,"],"performing a":["complicated"],"performing case":["analysis"],"performing the":["computation)"],"performing these":["inserts"],"performs both":["the"],"performs operations":["when"],"performs the":["same"],"performs them.":["On"],"perhaps @ora":["could"],"perhaps Bounded":["as"],"perhaps I":["just"],"perhaps `Schedule`),":["it"],"perhaps `fromListWith`":["in"],"perhaps `zip":["strand"],"perhaps a":["few","fold"],"perhaps also":["a","Bounded"],"perhaps even":["`fromChar`"],"perhaps in":["Data.Time.Calendar.WeekDate?"],"perhaps it's":["better"],"perhaps just":["use","see"],"perhaps more":["easily"],"perhaps not":["super-valuable"],"perhaps renaming)":["`lowerCase`"],"perhaps something":["like"],"perhaps that":["was"],"perhaps there":["is"],"perhaps this":["would"],"perhaps to":["import"],"perhaps use":["`isSilent`,","a"],"perhaps using":["Data.Set"],"perhaps you":["should","can","can","only"],"perhaps you'd":["prefer"],"perhaps, but":["the"],"perhaps. Didn't":["find"],"period Earth":["=","*"],"period of":["any"],"period planet":["="],"period, not":["an"],"permissible and":["might"],"permit that":["implementation"],"permitting any":["Num"],"permutation efficiently.":["If"],"permutation fits":["that"],"permutation of":["the","the"],"permutation was":["also"],"permutation, try":["to"],"permutations is":["much"],"permutations of":["`word`"],"permutations, think":["about"],"persistence here.":["It's"],"persists (and":["now"],"persists, but":["it's"],"person that":["can"],"person. (Not":["that"],"personal choice":[":o)"],"personal preference":["is","though."],"personal preference,":["just","but"],"personal preference.":["But"],"personal programming":["style,"],"personal readability":["threshold,"],"personal taste.":["As"],"personally I":["wouldn't"],"personally do":["not","in"],"personally find":["`filter","`BangPatterns`","it"],"personally go":["with"],"personally name":["them"],"personally prefer":["the"],"personally stand":["the"],"personally think":["it's"],"personally would":["still"],"personally. Awesome":["tool."],"personally. Looks":["good"],"personally. There's":["not"],"persons have":["different"],"phadej, yes":["I"],"phadel! I":["was"],"phase 1":["and","and"],"phase 1,":["we","we"],"phase of":["the"],"phase though,":["so"],"phew, etrepum":["is"],"phone ==":["'1'"],"phone and":["haven't"],"phone convert":["my"],"phone number":["and","pattern","into"],"phone number,":["but"],"phone number.":["For"],"phone number?":["You"],"phone numbers":["so"],"phone so":["had"],"phone`. That":["way"],"php/python/javascript -":["I"],"phrase \"IS":["THIS"],"phrase \"first":["part\"."],"phrase =":["fromList"],"phrase ==":["'?'`"],"phrase `yelling`,":["though?"],"phrase it":["was","positively:"],"phrase of":["a"],"phrase passed":["into"],"phrase to":["produce"],"phrase was":["already"],"phrase, using":["all"],"phrasing the":["scores"],"phrasings here.":["But"],"phrasings of":["randomRobot,"],"pick a":["random"],"pick apart":["some"],"pick but":["they're"],"pick here":["other"],"pick is":["that"],"pick nits":["as"],"pick on":["the"],"pick out":["the","directly,","just"],"pick totally":["unintuitive"],"pick, but":["allUpper"],"pick. This":["is","looks"],"pickSchedule reads":["like"],"picked a":["fold"],"picked good":["names,"],"picked up":["and","by"],"picking a":["single","grade"],"picking this":["out,"],"picking up":["what"],"picky nit":["I"],"picture things,":["and"],"piece of":["code.","gold!","advice","unfamiliar","code.","code"],"pieced together":["from"],"pieces of":["it","toast\"```."],"pieces you":["actually"],"piggybacking off":["of"],"piling up":["functions"],"pinned memory,":["i.e."],"pinned structures":["in"],"pipe operator)":["and"],"pipeline because":["it's"],"pipeline using":["point-free"],"pipeline. The":["only"],"pipped and":["non"],"pit @lauren":["and"],"place `.`":["for"],"place ahead":["of"],"place an":["expensive"],"place appears":["to"],"place as":["the","long"],"place at":["that"],"place because":["shadowing"],"place in":["the","their","a","an"],"place of":["`[Char]`.","`dropWhile`","that","show","the","`f`","```++```.","```map```."],"place since":["the"],"place spaces":["after"],"place the":["type"],"place them":["without"],"place they":["are"],"place to":["import","go,","start.","use","start"],"place when":["the"],"place where":["it","it's"],"place yelling":["guard"],"place, I":["think","think"],"place, I'd":["make"],"place, but":["I'm"],"place, since":["`isIgnoring`"],"place. May":["go"],"place? They":["are"],"placed -":["which"],"placed in":["an"],"placed on.":["Therefore,"],"placed, atomicity":["and"],"placed, consice,":["and"],"placeholder for":["variable"],"placement of":["where;","a","the","the"],"places \"None\"":["plants"],"places (20,":["21,"],"places (only)":["when"],"places I've":["used"],"places because":["we're"],"places to":["go."],"places where":["you","modified"],"places. Note":["also"],"placing the":["same"],"placing them":["in"],"plain `Maybe`":["for"],"plain count":["function,"],"plain lazy":["string"],"plain list":["(reversed","based"],"plain old":["MVars","state"],"plain simple":["to"],"plain text":["strings"],"plain translation":["of"],"planet =":["period"],"planet after":["all."],"planet is":["total,"],"planet of":["Mercury","…`."],"planet on":["the"],"planet s":["=","="],"planetMultiplier =":["case"],"planet` into":["two"],"planets in":["a"],"planets into":["the"],"plang, plong":["::"],"planning for":["expansion"],"planning to":["come"],"plant' and":["plant'')"],"plant, typically":["something"],"plants in":["between","between"],"platform and":["the"],"platform as":["fair"],"platform but":["not"],"platform is":["also"],"platform so":["rather"],"platform](http://lambda.haskell.org/platform/doc/current/frames.html) as":["that"],"platforms where":["Int's"],"plausible, sensible":["way\")"],"play a":["small"],"play about":["with."],"play around":["with","with"],"play bad":["games"],"play on":["`echo`"],"play to":["combine"],"play with":["demorgan's","RNA","regexes","the","it","a","private","arrows","\"bottle(s)\"","`foldr`"],"played around":["with"],"played with":["Haskell,"],"player turn,":["worrying"],"playing around":["in"],"playing with":["the","maybe"],"pleasant pointfree":["way"],"pleasant to":["read,"],"pleasant way":["either,"],"please add":["type"],"please advise":["where"],"please don't":["let"],"please explain":["why","which"],"please express":["it"],"please feel":["free"],"please forget":["the"],"please guide":["me"],"please ignore,":["wrong"],"please ignore.":[";)"],"please let":["me","me"],"please not":["do"],"please point":["out"],"please refer":["to"],"please remove":["unused"],"please sumbit":["`foldl'`"],"please try":["to"],"please use":["explicit"],"please. this":["is"],"pleased I":["could"],"pleased at":["how"],"pleased by":["the"],"pleased to":["see"],"pleasing, but":["it's"],"plenty of":["`Integral`s,","more","other","nonsense"],"plong ::":["Int"],"plumbing details":["of"],"plumbing is":["probably"],"plumbing with":["`&&&`,"],"plural form":["problem,"],"pluralizedBeer x`":["multiple"],"plus 5":["cubed?"],"plus What":["is"],"plus `filter`.":["Specifically,"],"plus `mkNucleotide`":["is"],"plus `uncurry`,":["like"],"plus filtering":["at"],"plus it":["will"],"plus side":["they"],"plus the":["fact"],"plus then":["you"],"plus you":["have"],"plus-value!). Basically,":["such"],"plz help":["me"],"point (`go`)":["instead","instead"],"point @jolie!":["I"],"point I":["have","put","defined"],"point about":["imports","the","`foldr`.","the","stack","`School`.","range.","`wordsBy`.","the","the","`cycle`","obscure","optimizing","```foldr```,","`where`"],"point and":["not"],"point as":["`all`."],"point crazymykl.":["It"],"point form,":["thanks."],"point free":["and","style.","style,","style,","style)","style.","style,","style","style)","form.","style.","style","form,","like","version","version","style","now,","style","helps","makes","style.","style","using","form","at","style","style,","style","form"],"point free,":["I'm","at"],"point free.":["i'd","It","I'm"],"point full":["style"],"point here":["is"],"point holds":["nonetheless."],"point in":["using","allowing","that"],"point is":["an"],"point it":["out"],"point iteration":["then.","then."],"point letters":["have"],"point me":["to","in","in"],"point of":["his","instructions","the","the","the","using","view","this"],"point on":["the","the"],"point out":["that","if","that","some","that"],"point people":["towards"],"point re:":["`\"\"`."],"point regarding":["simplifying"],"point someone":["else"],"point though.":["so"],"point to":["something,","be"],"point value":["in"],"point where":["it"],"point you":["should"],"point) have":["to"],"point, I":["didn't","could","just"],"point, I'll":["update"],"point, I've":["never"],"point, and":["I"],"point, keeping":["a"],"point, thanks!":["I'd"],"point, thanks.":["However,"],"point, think":["about"],"point, will":["sort"],"point, you":["have"],"point-free (kinda":["ugly"],"point-free (this":["can"],"point-free (which":["should"],"point-free I":["can't"],"point-free all":["the"],"point-free and":["a"],"point-free as":["it","well"],"point-free because,":["in"],"point-free business;":["indeed"],"point-free but":["you"],"point-free by":["composing"],"point-free code":["by","now"],"point-free code,":["I"],"point-free definition":["suggests"],"point-free for":["```shouting```"],"point-free form":["as"],"point-free form).":["This"],"point-free form,":["because"],"point-free if":["defined","you"],"point-free is":["ok,"],"point-free like":["so:"],"point-free notation":["acceptable"],"point-free notation)":["```question```"],"point-free solution":["looks"],"point-free solution,":["but"],"point-free style":["would","using","to","points","with","bwahahahaha","and","gets","to","as","in","compositions?","and","(since","version","so","using","applying","(I'm","with"],"point-free style,":["like","and","might","to","however","which","you","i.e.,"],"point-free style.":["You","When","When","Since","In",";)","This","I'm"],"point-free to":["boot!","begin"],"point-free transformation":["to"],"point-free using":["`getRobot`"],"point-free version":["of"],"point-free which":["seems"],"point-free with":["an"],"point-free without":["any"],"point-free, `foldl'":["countInMap"],"point-free, but":["it","that","every"],"point-free, especially":["if"],"point-free, here's":["one"],"point-free, since":["there's"],"point-free, you":["can","can"],"point-free. For":["a","`isShout`,"],"point-free. `(.:)`'s":["type"],"point. And":["yes"],"point. Been":["thinking"],"point. Here's":["a"],"point. I":["figured","could","will","got","need","didn't"],"point. It":["does"],"point. Maybe":["soon"],"point. So":["this"],"point. Thanks":["for"],"point. The":["way"],"point. that":["surely"],"point: usually":["function"],"point: you":["rarely"],"pointed out":["that"],"pointed out,":["either"],"pointer on":["function"],"pointer to":["MissingH,","`fromListWith`","it.","`unlines`.","[`printf`](http://hackage.haskell.org/package/base-4.2.0.1/docs/Text-Printf.html)."],"pointer. (Though":["most"],"pointer. I":["actually"],"pointers @abagail":[":)"],"pointers @glennie.":["I've"],"pointers and":["places"],"pointers on":["what","a"],"pointers should":["help"],"pointers so":["far!"],"pointers to":["`fromListWith`","making"],"pointers! I":["like"],"pointers, @susan,":["they"],"pointers, especially":["to"],"pointfree --":["it's"],"pointfree --verbose":["'anyAndAll"],"pointfree ```insertWith'":["(+)"],"pointfree `anagramsFor`":["too"],"pointfree `capitalise`":["using"],"pointfree `f":["="],"pointfree although":["I"],"pointfree combinator":["you're"],"pointfree fever":["though..."],"pointfree form":["using","if"],"pointfree if":["you","you"],"pointfree it...":["yes!!"],"pointfree it:":["`anyAndAll"],"pointfree loving":["standard"],"pointfree on":["question"],"pointfree or":["none"],"pointfree pipeline.":["The"],"pointfree style":["with","too...","unless","then","and","if"],"pointfree style,":["but","if","I","you","the"],"pointfree than":["plumbing"],"pointfree version":["of","in"],"pointfree version,":["but"],"pointfree way":["to","to"],"pointfree) style":["is"],"pointfree, but":["it"],"pointfree-land. 'Tis":["a"],"pointfree. Sure,":["it's"],"pointful version":["of"],"pointfull and":["you"],"pointing it":["out,"],"pointing out":["that","that","the","the","that","that","that"],"pointing that":["one","out","out."],"pointless -":["but"],"pointless) your":["mapping"],"pointless. Looks":["great."],"points I":["would"],"points about":["pulling"],"points are":["spot"],"points at":["two"],"points for":["point-free"],"points have":["been"],"points in":["the"],"points of":["view"],"points out":["how","some"],"points to":["itself"],"points which":["you"],"points would":["make"],"points! I":["went"],"points! Will":["refactor."],"points! isExclamation":["was"],"points, although":["this"],"points, but":["I"],"points, though":["this"],"points, try":["to"],"points, you":["could","can","might"],"points-free by":["leaving"],"points-free style":["but","(in"],"points. I":["managed"],"points: ```anagramsFor":["\"bob\""],"pointy version":["being"],"poitfree form,":["so"],"poitfree page":["on"],"poke around":["in"],"policy), but":["I"],"polymerase inhibitor,":["not"],"polymorphic map":["function"],"poor code":["and"],"poor decisions":["(like"],"poor performance.":["Using"],"poorly designed":["mutable","API"],"pop it":["will"],"pop open":["GHCi"],"pop/shift. The":["code"],"popped up,":["and"],"popular belief,":["brevity"],"popular choice":["for"],"popular choice.":["I"],"popular implementation":["choice"],"popular libraries,":["that"],"popular word,":["that's"],"popular/modern case":["I'm"],"populating the":["map"],"port of":["the","my"],"ported all":["of"],"ported from":["the","Ruby,","there.","Clojure"],"ported it.":["Please"],"ported most":["of"],"ported the":["tests.","rest"],"ported them":["as-is.","to"],"ported this":["exercise","one"],"porting it":["but"],"porting the":["exercises,"],"porting these":["exercises."],"portion. (...there":["is"],"portions of":["the"],"posed like":["this:"],"position as":["zero."],"position goes":["with"],"position in":["the"],"position of":["an"],"positional base":[":)"],"positive alternative":["to"],"positive integers":["in"],"positive numbers":["either","for"],"positive to":["lower"],"positive. I":["probably"],"positively *bad*.":["Definitely"],"positively doesn't":["allow:"],"positively: if":["it's"],"possibilities first,":["which"],"possibilities for":["the"],"possibility for":["`isQuestion`;","sharing"],"possibility if":["it"],"possibility of":["an"],"possibility that":["there's"],"possibility. I":["should've"],"possibility/good way":["of"],"possible anagrams.":["(It"],"possible answers":["and"],"possible because":["that's"],"possible before":["recurring"],"possible but":["now"],"possible changes,":["you"],"possible chars":["that"],"possible choices":["you"],"possible digits,":["and"],"possible especially":["with"],"possible fixes":["are"],"possible for":["an","`readMVar","`fancyWords`","novices."],"possible function":["composed"],"possible if":["it"],"possible implementation":["detail."],"possible improvements":["would"],"possible in":["order"],"possible inputs":["for"],"possible inputs.":["\"last\""],"possible instead":["of"],"possible name":["clashes"],"possible nits":["here"],"possible nonsense":["inputs"],"possible nucleotide.":["Can"],"possible only":["with"],"possible optimization,":["currently"],"possible option":["would"],"possible performance":["advantage"],"possible permutations,":["think"],"possible primes":["list"],"possible results":["and"],"possible right":["now"],"possible since":["the"],"possible solution":["you"],"possible solutions":["that"],"possible strategies":["and"],"possible subjective":["optional"],"possible that":["it","the","I"],"possible to":["delete","come","use","avoid","implement","traverse","eta-reduce","use","unify","use","achieve","do","do","use","implement","cause","compute","refactor","clean","implement","implement","refactor","proceed","talk","do","do","implement","make","have","do","write","traverse","implement","do","use","use","build","use","use","you","take","calculate","use","use","remove","get","calculate","drink","use","do","rewrite","use","just","just","make","use","have","have","define","write","define","divide","use","factor","calculate","have","implement,","keep"],"possible types":["of"],"possible until":["I"],"possible using":["`fromEnum`,","STM,"],"possible ways":["are:"],"possible while":["still"],"possible with":["this"],"possible, in":["this"],"possible, it":["relies"],"possible, so":["you"],"possible, would":["be","be"],"possible, you":["could"],"possible. Could":["also"],"possible. I":["just"],"possible. It's":["easy"],"possible. One":["area"],"possiblePrimes list":["will"],"possibly also":["`Bounded`"],"possibly at":["the"],"possibly by":["encoding"],"possibly even":["rewrite"],"possibly get":["any"],"possibly more":["idiomatic."],"possibly over-golfed,":["i'm"],"possibly pretty-printed":["phone"],"possibly smart":["constructors)."],"possibly with":["point-free"],"possibly, or":["is"],"post by":["Conor","Don"],"post this":["up"],"post your":["bob_test.hs,"],"post), as":["I"],"post-condition (mainly":["for"],"posted the":["`randomRIO`"],"posted versus":["what"],"posted? Here's":["another"],"posting a":["question"],"postponing work":["to"],"potential consideration":["would"],"potential error":["with"],"potential for":["stack","stack"],"potential issues":["if"],"potential name":["clashes"],"potential problem":["with"],"potential reviewers":["if"],"potential space":["leak"],"potential stack":["overflows","overflow"],"potentially bad":["constant"],"potentially cause":["a"],"potentially crashy":["functions,"],"potentially eliminate":["elements,"],"potentially more":["reusable,"],"potentially terminate":["a"],"potentially useful":["on","idea,"],"power \"of\"`":["Will"],"power (or":["more"],"power divided":["by","by"],"power for":["third"],"power in":["particular"],"power of":["maps"],"power would":["be"],"power\" but":["seems"],"power?Code looks":["nice"],"powerful elaboration":["tool"],"powerful than":["`Functor`","Monad"],"powerful. However,":["your"],"powerful. I":["have"],"powers of":["two.","10","2","two?","two."],"pqueue isn't":["part"],"practical benefit":["of"],"practical consequence":["in"],"practical to":["run","use"],"practical use":["for"],"practical) libraries.":["Gone"],"practically be":["something"],"practically free":["to"],"practice all":["the"],"practice for":["`turnRight`,","newtypes.","a"],"practice in":["Haskell,"],"practice is":["to"],"practice mostly":["for"],"practice since":["major"],"practice some":["more."],"practice taking":["advantage"],"practice that's":["never"],"practice the":["compiler"],"practice to":["attach","attach","include","explicitly","use","write","make","do","explicitly","have","write","learn","use","do","write","do","default"],"practice with":["newtypes"],"practice you":["may","should"],"practice) on":["the"],"practice, but":["there's"],"practice, see":["if"],"practice, so":["I'm","it"],"practice. I'll":["take"],"practice? 2)":["Is"],"practices to":["re-bind"],"pragma `go":["x"],"pragma and":["`map","simply"],"pragma at":["the","the"],"pragma could":["also"],"pragma is":["quite"],"pragma makes":["expression"],"pragma on":["`robotB`,"],"pragma so":["that"],"pragma that":["you"],"pragma where":["the"],"pragma which":["would"],"pragma with":["`{-#"],"pragma would":["let"],"pragma you":["could"],"pragma, and/or":["look"],"pragma. All":["that"],"pragma. This":["particular"],"pragmas (like":["it"],"pragmas at":["the"],"pragmas in":["the"],"pragmas that":["tell"],"pragmas you":["can"],"pragmas, I":["never"],"pragmas, you":["can"],"pragmatic and":["obvious"],"pragmatic reason":["to"],"pragmatic to":["stick","use"],"praise coming":["from"],"pre-computation in":["my"],"pre-computations for":["us."],"pre-filter necessary)":["by"],"pre-filtered input.":["The"],"pre-sort ```str```....":["On"],"precaution I":["guess..."],"precedence (collectively,":["fixity)"],"precedence (second":["lowest)."],"precedence (the":["highest"],"precedence ;)":["Function"],"precedence and":["`&amp;&amp;`","can't","`.`","can't","can't","can't","can't","can't","`.`."],"precedence binds":["tighter):"],"precedence for":["common"],"precedence hierarchy.":["Perhaps"],"precedence in":["Haskell.","Haskell","Haskell,"],"precedence instead":["of"],"precedence is":["and"],"precedence isn't":["a"],"precedence knowledge":["to"],"precedence of":["an","`($)`,","`&&`","`on`","`==`","0..9","one","4","4","the","these"],"precedence or":["associativity","associativity"],"precedence reasons":["so"],"precedence rule:":["function"],"precedence rules":["and"],"precedence rules!":["Memorization"],"precedence rules,":["as"],"precedence so":["you"],"precedence than":["||,","any","function","function","any","any","any","any","any","any","`.`","any","any","any","any","any","any","any","`&&`","any","any","this","any","any","any","any","any","any","`==`."],"precedence version":["of"],"precedence you":["don't"],"precedence). By":["the"],"precedence, and":["can't"],"precedence, so":["there's","there","there","explicit","already","there's"],"precedence, the":["extra"],"precedence. Also,":["you"],"precedence. Looks":["good"],"precedence. Using":["parentheses"],"precedence/priority rule":["that"],"precedent for":["that"],"precisely `[b,":["pred"],"precisely the":["same"],"precisely where":["operating"],"precision bounds":["of"],"precision to":["compute"],"precompute `sort":["ls`"],"precomputed list":["of"],"precomputing `lowerWord`":["and"],"precondition when":["you"],"pred a":[".."],"pred b":[".."],"pred start":[".."],"pred startFrom":[".."],"pred x":[".."],"pred)) 10":["0"],"pred1 .":["filter"],"pred2` this":["will"],"predecessor and":["the"],"predefined functions":["in"],"predefined reverse":["application"],"predetermined sequence":["`[Key]`"],"predicate []`":["is"],"predicate `s`":["or"],"predicate and":["the"],"predicate are":["necessary"],"predicate can":["be"],"predicate did":["wonders"],"predicate for":["isShouting,","`wordsBy`"],"predicate function":["to"],"predicate functions":["read","into"],"predicate handles":["sorting,"],"predicate in":["`wordsBy`,"],"predicate into":["several","their"],"predicate is":["a","almost","slightly"],"predicate it":["seems"],"predicate methods":["in"],"predicate returns":["True."],"predicate that":["checks","tries"],"predicate to":["test","test","use"],"predicate would":["work"],"predicate\" and":["\"there"],"predicate\". Just":["a"],"predicate, but":["there's","I","could"],"predicate, not":["a"],"predicate, p2":["-"],"predicate, so":["you"],"predicate, there's":["some"],"predicate, you":["could"],"predicate-y, filter-y":["sorts"],"predicate. For":["reference,","future"],"predicate. Hint:":["you"],"predicate. It's":["also"],"predicate. Same":["for"],"predicate1 param":["="],"predicate2 param":["="],"predicates (AKA":["relations"],"predicates (`::a":["-\u003e"],"predicates (except":["for"],"predicates and":["using"],"predicates are":["fine.","pretty","not"],"predicates as":["named","separate"],"predicates because":["you"],"predicates but":["what"],"predicates closer":["to"],"predicates could":["be"],"predicates have":["to"],"predicates in":["`isAllowed`;","parantheses","Data.Char","terms","terms","the","the","*Data.Char*,"],"predicates into":["the"],"predicates is":["in"],"predicates might":["be"],"predicates more":["semantic"],"predicates on":["the","those","if","line"],"predicates or":["questions."],"predicates out":["because"],"predicates point-free":["because,"],"predicates such":["as:"],"predicates to":["`sentence`","classify"],"predicates using":["higher"],"predicates value":["p1"],"predicates will":["fold"],"predicates without":["using"],"predicates would":["make","aid"],"predicates you":["use"],"predicates, `isShouting`":["is"],"predicates, in":["point-free"],"predicates, so":["they"],"predicates, while":["`liftA2"],"predicates. And":["if"],"predicates. That":["would","way"],"predicted that":["one."],"predominant style":["is"],"prefer \"a":["question"],"prefer [point-free":["style](http://www.haskell.org/haskellwiki/Pointfree)."],"prefer [pointfree](http://www.haskell.org/haskellwiki/Pointfree)":["style"],"prefer `String`":["over"],"prefer `f":["."],"prefer `filter":["(isAllergicTo"],"prefer `hammingDistance`":["because"],"prefer `isAnagramOf`.":["Consider"],"prefer `last":["phrase"],"prefer `mkRobot`":["over"],"prefer `readStatement`":["as"],"prefer `where`":["to"],"prefer algebraic":["notation"],"prefer applicatives":["as"],"prefer combinators":["when"],"prefer explicit":["imports,"],"prefer flattened":["storage"],"prefer fromJust":["over"],"prefer function":["combination"],"prefer guard":["clauses"],"prefer higher":["level"],"prefer how":["explicit"],"prefer it":["to","that","as"],"prefer it?":["So"],"prefer looks":["like"],"prefer lowerCamelCase":["for"],"prefer my":["original"],"prefer naming":["identifiers"],"prefer parenthesizing":["these"],"prefer point-free":["code,"],"prefer reducing":["those"],"prefer simple":["solutions"],"prefer simplicity":["over"],"prefer the":["arrow","arrow.","infix","pattern","non-strict","`length`","shorter","pattern","sub-function","boolean","simpler","shorter","\u003ccode\u003ewhere\u003c/code\u003e"],"prefer this":["approach,","way,","one,","version,"],"prefer this:":["no"],"prefer to":["use","do","use","avoid","use","use","use","remove","avoid","have","define","explicitly","use","leave","define","explicitly","use","use","be","write","read."],"prefer using":["explicit","the","map/filter/zip/etc.","Data.List.Split's","pattern"],"prefer v3":["with"],"prefer writing":["\u003ccode\u003e[Char]\u003c/code\u003e"],"prefer, maybe":["the"],"prefer, you":["can"],"prefer. There":["might"],"preferable here,":["but"],"preferable in":["Haskell","some"],"preferable naming":["convention"],"preferable since":["the"],"preferable to":["using","regexes","pattern","`foldl`,","use","use","use","`fromMaybe`","using","`l","computing","use"],"preferable, but":["Haskell","the"],"preferable. I'm":["honestly"],"preferable. In":["this"],"prefered not":["to"],"preference -":["`classify`"],"preference for":["using","it."],"preference is":["to","to"],"preference usually":["is"],"preference would":["be"],"preference, I":["guess."],"preference, but":["you","I"],"preference, just":["wanted"],"preference. As":["I"],"preference. But":["it"],"preference. On":["the"],"preferences... but":["probably"],"preferred even":["when"],"preferred in":["Haskell"],"preferred not":["to","to"],"preferred over":["guards"],"preferred solution":["is"],"preferred style,":["especially"],"preferred than":["let,","let,"],"preferred this":["(shorter)"],"preferred to":["put","`[Char]`.","use","keep","`r","avoid","`reverse","use"],"preferred way":["in"],"preferred when":["they"],"preferred. But":["I"],"preferred. In":["some","my"],"preferred. Is":["this"],"preferred. Just":["that"],"preferring a":["function"],"prefers recursion":["instead"],"preffered here":["as"],"preffered over":["foldl,"],"prefix because":["of"],"prefix constructor":["for"],"prefix form":["is"],"prefix form,":["unless"],"prefix of":["the"],"prefix operators":["`(==)`,"],"prefix should":["be"],"prefix style,":["in"],"prefix the":["function"],"prefix with":["a"],"prefix would":["save"],"prefix, subscriber]]":["-\u003e"],"prefixing functions":["with"],"preliminary pass":["to"],"preliminary solution":["that"],"prelude and":["each"],"prelude can":["fuse"],"prelude for":["a","a"],"prelude functions":["are"],"prelude has":["a"],"prelude simply":["reexports"],"prelude that":["you"],"prelude) instead":["of"],"prelude, I":["probably"],"prelude, [suggested":["in"],"prelude. I":["find"],"prelude. Once":["I'm"],"premature optimization":["to","but","is"],"prematurely as":["I"],"prematurely. It":["has"],"prep a":["bit,"],"prepare function":["is"],"prepare using":["functionality"],"prepend an":["underscore"],"prepend them":["to"],"prepending 2":["and"],"prepending and":["appending,"],"prepending is":["definitely"],"prepending those":["initial"],"prepending to":["prevent"],"preprocessed word":["to"],"preprocessing in":["a"],"preprocessing is":["necessary"],"presence elsewhere),":["but"],"presence of":["whitespace","multiple","laziness","lazy,"],"present in":["that","the","the","Haskell","Prelude."],"present mostly":["for"],"present whether":["you"],"present you":["with"],"present, I":["wouldn't"],"presentations. For":["example"],"presented as":["first","2"],"presented with":["this"],"preserved (i..e":["`Bs"],"presorted and":["unsorted"],"presumably ported":["from"],"presume the":["default"],"presume there's":["a"],"presumed that":["you"],"pretend that":["I","this","premature"],"pretend to":["speak"],"prettier but":["that's"],"prettier if":["you"],"prettified, isn't":["it?"],"pretty annoying,":["really"],"pretty as":["it"],"pretty awkward":["(and"],"pretty bad,":["especially"],"pretty big":["jump","improvements.","jump","improvement."],"pretty classic":["case"],"pretty clean.":["HLint"],"pretty clear":["and"],"pretty clearly":["gets"],"pretty close":["to","to"],"pretty common":["if"],"pretty concise,":["but"],"pretty confused":["about"],"pretty cool":["how"],"pretty cool.":["Every"],"pretty decent":["speedup"],"pretty dense":["now."],"pretty early":["in"],"pretty easily.":["The"],"pretty easily;":["in"],"pretty easy":["to","to","to"],"pretty easy.":["You'd"],"pretty elegant":["to"],"pretty exactly,":["though."],"pretty far":["from"],"pretty fast":["to"],"pretty flakey":["on"],"pretty generally":["useful"],"pretty good":["though,","though","to","to","though.","example","to","to","to","with","solution","to","though","from"],"pretty good!":["One"],"pretty good,":["but"],"pretty good.":["You","You"],"pretty hacked":["together."],"pretty hard":["for"],"pretty helpful":["with"],"pretty horrid":["in"],"pretty ideal":["use"],"pretty interesting":["about"],"pretty interesting,":["but"],"pretty mild":["extension"],"pretty minor":["but"],"pretty much":["all","always","any","any","like","the","definitively","always","idiomatic","the","copied,","a","all","the"],"pretty neat.":["In","I'll"],"pretty new,":["definitely","and"],"pretty nice":["finding"],"pretty obvious,":["so"],"pretty often":["is"],"pretty often.":["In"],"pretty old":["at"],"pretty print":["could","as"],"pretty quickly":["with"],"pretty quickly.":["If","I"],"pretty readable":["though."],"pretty readable,":["though."],"pretty relaxing":["compared"],"pretty self":["explanatory."],"pretty silly.":["I"],"pretty simple":["to"],"pretty simple,":["I","though","functions"],"pretty simple:":["right"],"pretty small":["number"],"pretty special":["situation"],"pretty straightforward":["to"],"pretty straightforward,":["but"],"pretty straightforward.":["Again,"],"pretty sure":["that's","nitpicking","that","at","that's","that"],"pretty to":["me,"],"pretty tricky,":["not"],"pretty ugly":["solution,","and","code."],"pretty ugly.":["I"],"pretty vanilla":["setup,"],"pretty verbose,":["but"],"pretty wacky":["pretty"],"pretty well":["as"],"pretty worried":["about"],"pretty, I":["had"],"pretty-printed phone":["number,"],"pretty. You":["can"],"prettyPrint functions":["*do*"],"prettyPrint s":["="],"prettyPrint to":["be"],"prettyPrint were":["passing"],"prev ::":["TMVar"],"prevent a":["space","space"],"prevent any":["behavior"],"prevent bad":["input"],"prevent from":["writing","fusing"],"prevent having":["a"],"prevent me":["from"],"prevent potential":["stack"],"prevent repeat":["scans"],"prevent repeated":["list"],"prevent that":["kind"],"prevent this":["you"],"preventing me":["from"],"prevents `List.intersperse`":["from"],"prevents `n*6`":["being"],"prevents the":["caller","retry"],"prevents this":[":P"],"previous `generateName`":["better"],"previous comments":["and"],"previous exercises":["where"],"previous exercises,":["so"],"previous feedback,":["dropped"],"previous guard,":["but"],"previous implementation":["of"],"previous iteration":["comments).","and","-","applies","has."],"previous iteration,":["I","and","but"],"previous iteration.":["However","I"],"previous key-value":["pairs,"],"previous one,":["despite"],"previous recommendation":["I"],"previous revision":["because","while","which"],"previous rows":["using"],"previous solution":["because","is","you","to"],"previous solution.":["Why"],"previous submission":["is","to","because"],"previous submission,":["once"],"previous use":["of","of"],"previous value.":["Not"],"previous version":["with","with","it","of"],"previous version,":["they","and"],"previous versions.":["Keeps"],"previous where":["a"],"previous, due":["to"],"previously allocated":["or"],"previously defined":["`count`"],"previously found":["primes"],"price by":["going"],"prime and":["True","value"],"prime divisors":["before"],"prime exercises":["I've"],"prime factor":["than"],"prime factorization":["in","a"],"prime factorization,":["if"],"prime factors":["in","algorightm"],"prime will":["do,"],"prime\"). That's":["a"],"prime, earlier":["prime"],"prime, however":["using"],"prime, then":["extraction"],"primeFactors $":["15485863"],"primeFactors ::":["Integral"],"primeFactors =":["go"],"primeFactors should":["only"],"primeFactors' due":["to"],"primeFactors' really":["do"],"primer on":["how"],"primes &gt;":["3"],"primes (e.g.":["`2:3:[n"],"primes (if":["they"],"primes (trial":["division,"],"primes \u003e":["5","3","3),","3","3"],"primes \u003e=":["the"],"primes as":["it","divisors"],"primes at":["all?"],"primes in":["order","the"],"primes larger":["than"],"primes list":["will"],"primes rather":["than"],"primes since":["we"],"primes to":["do"],"primes too":["many"],"primes will":["be"],"primes would":["obviously"],"primes, just":["to"],"primitive but":["this"],"principle anyway":["-"],"principle of":["least"],"principle. I":["on"],"principle. STM":["improves"],"principles, like":["this:"],"print $":["bar","bar","bar","bar","bar","primeFactors"],"print =\u003c\u003c":["incrementBalance"],"print as":["it"],"print could":["have"],"printable characters":["and"],"printed 6":["times"],"printed 6*7":["or"],"printf but":["because"],"printf dependency":["pretty"],"printf for":["this"],"printf from":["Text.Printf"],"printf in":["place"],"prints \"sort":["w\":"],"prints \\":["numeric"],"prints as":["\u003cpre\u003ethis_is_all_one_long_line\u003c/pre\u003e"],"prints it":["out."],"prior. First,":["its"],"priori is":["unnecessary"],"priority of":["a"],"private and":["shouldn't"],"private data":["structures"],"private functions":["(non-exported","at"],"private functions.":["\u003cfacepalm"],"private method,":["you"],"private. All":["of"],"pro's eye":["than"],"prob I":["see"],"probability without":["retry"],"probably *simpler*":["than"],"probably I":["should"],"probably a":["better","matter","faster","bit","silly","good","cleaner","useful","good","little","good"],"probably about":["as"],"probably add":["a"],"probably added":["some"],"probably already":["have"],"probably also":["use","want","be"],"probably as":["good"],"probably be":["hesitant","made","done","strict.","case","using","\"individual\".","a","better","best","functionally","to","nice","best","better.","better","a","your","the","case","best","represented","a","implemented","implemented","to","implemented"],"probably because":["I'm","I"],"probably being":["a"],"probably benefits":["from"],"probably best":["gotten","not","to"],"probably better":["written","written","suited","written","written","expressed"],"probably better,":["I"],"probably change":["this"],"probably cheaper":["than"],"probably closer":["to"],"probably correlated.":["In"],"probably define":["that"],"probably depends":["on"],"probably do":["the","*something*"],"probably doesn't":["matter","actually","really"],"probably doing":["at","it"],"probably don't":["want"],"probably even":["more","guess"],"probably excessively":["\"clever\","],"probably expressed":["as"],"probably figure":["out","this"],"probably for":["only"],"probably get":["an"],"probably go":["directly","read"],"probably going":["against"],"probably good":["to","to"],"probably has":["some"],"probably have":["gone","a","some","to"],"probably horrible":["in"],"probably imagine":["yourself"],"probably import":["`Data.Map.Strict`","`Data.Map.Strict`"],"probably incorrect":["in"],"probably indent":["differently."],"probably is":["still"],"probably isn't":["the","pragmatic","very","a","the"],"probably isn't,":["but"],"probably just":["use","personal","want","fuse","use","as","fine.","get","about","copy-and-paste"],"probably know":["better","more","that."],"probably less":["magical"],"probably make":["a","the"],"probably making":["Haskellers"],"probably missing":["something"],"probably more":["appropriate","idiomatic","efficient","clear"],"probably need":["to"],"probably normalize":["for"],"probably not":["the","use","much","a","my","what","commonly","worth","much","using","when","the","very"],"probably noticed":["this"],"probably only":["be"],"probably order":["the"],"probably overkill":["to"],"probably prefer":["this"],"probably put":["the"],"probably reverse":["the"],"probably revise":["this"],"probably right,":["I'll"],"probably run":["in","fine","out"],"probably should":["have","have","do"],"probably shouldn't":["matter,","have","go","be"],"probably simpler":["to","to"],"probably skip":["the"],"probably some":["problems"],"probably stripping":["all"],"probably taking":["things"],"probably tell":["you"],"probably the":["\"dot","nicer","cleanest-looking","best"],"probably time":["to"],"probably try":["and","to"],"probably turn":["on","it"],"probably unnecessary":["here."],"probably use":["a","anyway.","[`fromListWith`](http://hackage.haskell.org/package/containers-0.5.3.1/docs/Data-Map-Strict.html#v:fromListWith)","Data.Text","`count`","a","Data.Map.Strict","`Data.Map.Strict.insertWith`"],"probably using":["Control.Arrow."],"probably want":["to","to","to","Data.Map.Strict","`deriving","to","to","to","to"],"probably wasn't":["value","there"],"probably will,":["since"],"probably within":["my"],"probably won't":["ever"],"probably would":["be"],"probably would've":["used"],"probably wouldn't":["be"],"probably wouldn't.":["I've"],"probably, but":["have"],"problem (O(n":["log"],"problem (as":["defined"],"problem I":["have"],"problem I've":["had"],"problem accurately":["don't"],"problem allows":["the"],"problem already":["tackled"],"problem and":["always","found","when"],"problem at":["all","hand,","hand."],"problem because":["you're"],"problem build":["the"],"problem but":["you"],"problem concise,":["but"],"problem description":["in","says:","doesn't","clearly","gives"],"problem description.":["My","It"],"problem don't":["involve"],"problem first":["with"],"problem for":["so","free."],"problem has":["changed"],"problem have":["one"],"problem here":["is","is"],"problem here,":["this"],"problem here?":["I"],"problem if":["you"],"problem in":["the","`add`","other","pretty","ghci:","the"],"problem involve":["a"],"problem is":["that","with","not","that","that","not","better","with","that","not","*how*","made","indeed","not","that","that"],"problem kind":["of"],"problem lends":["itself"],"problem may":["be"],"problem much,":["test"],"problem my":["type"],"problem npbarnes":["mentions"],"problem of":["that"],"problem only":["serve"],"problem or":["make"],"problem really":["neat."],"problem requires":["sorting"],"problem seems":["to"],"problem should":["simply"],"problem since":["we"],"problem so":["using"],"problem space.":["I"],"problem spec":["or"],"problem spec.":["This"],"problem specifies":["that"],"problem split":["naturally"],"problem statement":["into"],"problem statement,":["I"],"problem still":["persists"],"problem that":["all","since","Python's","Data.Map","are","bank","code","also","specification"],"problem the":["way"],"problem there":["is","is,"],"problem this":["comment"],"problem though,":["thanks"],"problem to":["add."],"problem use":["System.Random's","a"],"problem using":["Data.Map","something"],"problem was":["done","that"],"problem was.":["I"],"problem well":["enough"],"problem were":["posed"],"problem when":["you're"],"problem with":["`when`","using","it.","your","using","how","the","this","having","a","the","anything","them.","the","exercism","guards","this","implementing","monads,","integral","idiomatic"],"problem would":["require"],"problem you":["can","can","may"],"problem's notion":["of"],"problem, I":["found"],"problem, but":["in","I","error","I","makes","it"],"problem, check":["out"],"problem, except":["it"],"problem, it":["redoes"],"problem, namely":["that"],"problem, the":["README"],"problem, think":["\"I"],"problem, this":["seems"],"problem, which":["means"],"problem, you":["can"],"problem. And":["your"],"problem. Can":["you"],"problem. Data.List":["is"],"problem. Guards":["basically"],"problem. If":["you"],"problem. Instead":["of"],"problem. Pushing":["the"],"problem. Seems":["to"],"problem. Since":["`foldl'`"],"problem. Sometimes":["you"],"problem. The":["only"],"problem. Try":["changing"],"problem. Why":["not"],"problem. With":["a"],"problem. Yes":["try"],"problem. You'll":["also"],"problem? In":["which"],"problem? Maybe":["I"],"problematic in":["practice?"],"problematic scenarios.":["For"],"problematic to":["be","close","pass"],"problematic when":["a","troubleshooting,","you're"],"problems I":["would"],"problems as":["a"],"problems due":["to"],"problems had":["let"],"problems if":["you're"],"problems in":["more","similar"],"problems is":["something"],"problems so":["far"],"problems such":["as"],"problems that":["http://exercism.io/submissions/523f9cc1f90faad79e0000ae","lazy","can","are","I"],"problems using":["it."],"problems when":["it"],"problems which":["can"],"problems with":["most","it.","`foldl`,","`cabal","space","making","it.","feedback"],"problems you're":["working"],"problems! I":["hope"],"problems, becauese":["zeros"],"problems, but":["`Int`"],"problems... maybe":["will"],"probs, your":["point"],"proceed anyways":[";)"],"process if":["there"],"process in":["mkRobot,"],"process list":["iteratively"],"process of":["resolving","reading"],"process represents":["several"],"process the":["source","list"],"process works,":["so"],"process. But":["this"],"processed by":["gc"],"processed in":["order,"],"processed the":["\"word\""],"processed twice?":["I"],"processed. `foldl'`":["is"],"processes `source`":["exactly"],"processes input.":["If"],"processes iterativelly":["without"],"processing functions":["(namely"],"processing of":["icomming"],"processing required,":["or"],"processing the":["last"],"processing they're":["part"],"processing, consider":["using"],"processor. That":["means"],"procuce something":["nice."],"produce a":["perfectly","new","\"new"],"produce more":["compositional"],"produce output.":["Here's"],"produce similar":["code."],"produce some":["part","evidence"],"produce that":["list"],"produce the":["string","same"],"produce them.":["But"],"produced it.":["Be"],"produced this":["code"],"producers (i.e.":["threads"],"produces a":["result"],"producing better":["code."],"producing results":["where"],"product, it":["makes"],"production system":["I"],"products of":["two"],"profile it,":["and/or"],"profiler should":["probably"],"profiling, you":["should"],"program (due":["to"],"program (of":["40"],"program (sharing":["is"],"program I":["probably","might"],"program I've":["ever"],"program a":["bit"],"program at":["least"],"program but":["not"],"program design,":["but"],"program for":["an"],"program in":["haskell."],"program is":["simple","as"],"program like":["this"],"program looks":["good"],"program must":["be"],"program order)":["IORef"],"program order.":["An"],"program raising":["errors,"],"program run":["ridiculously"],"program runs":["or"],"program that":["cleans"],"program to":["crash","crash).","crash"],"program will":["get","have"],"program with":["large"],"program work\"":["trade-off"],"program would":["probably"],"program, and":["you"],"program, but":["I"],"program, so":["I"],"program, the":["type"],"program, they":["are"],"program, you":["can"],"program, you'd":["need"],"program. Is":["there"],"program. It":["makes"],"program. So":["if"],"program. Some":["simple"],"programatic, though":["it"],"programmatically handle":["the"],"programmer error,":["will"],"programmer for":["the"],"programmers end":["up"],"programmers like":["70-80"],"programmers to":["eliminate"],"programming and":["forgot","Haskell!"],"programming complexity":["to"],"programming exercise":["this"],"programming for":["that"],"programming hat":["on"],"programming language":[":-)."],"programming languages":["here,"],"programming languages,":["and"],"programming languages.":["But"],"programming quote:":["\"code"],"programming style,":["I"],"programs and":["it"],"programs, but":["I"],"programs. Try":["looking"],"progress at":["all"],"progress elsewhere,":["and"],"progress in.":["If"],"progress on":["the"],"progress without":["feeling","evaluating"],"progression should":["be"],"project, like":["[I"],"project, something":["like"],"project, the":["generic"],"project, then":["after"],"projects I've":["seen."],"projects it":["can"],"projects using":["such"],"proliferation of":["`not`s"],"prompt like":["\"@@@\""],"prompt nitpick":["@ruthe,!"],"prompt you":["get"],"prompt, not":["the"],"prompting by":["@marjory)"],"prompting the":["high-level"],"propagated from":["my"],"proper Haddock":["comments,"],"proper implementation":["would"],"proper subclass":["of"],"proper/idiomatic use":["of"],"properly (because":["what"],"properly assimilated":["the"],"properly during":["add."],"properly exported":["from"],"properly got":["to"],"properly handle":["two"],"properly parse":["than"],"properly split":["the"],"properly write":["wordCount"],"properties of":["function"],"properties that":["you're"],"property $":["\\c"],"property for":["Map"],"property is":["useful:"],"property of":["`Char`)."],"property that":["if"],"property to":["be","responseFor"],"property will":["let"],"property. Have":["you"],"proportional to":["the","the"],"propose a":["solution"],"propose is":["just"],"propose to":["call"],"propose. Looks":["good"],"proposing that":["the"],"protect against":["the"],"protect you":["and"],"protecting ```School```":["from"],"proteinToRNA`. This":["specific"],"protocols but":["not"],"proud of":["my","it."],"prove anything":["about"],"prove it":["is"],"prove it,":["or"],"prove that":["it"],"proven or":["just"],"provide `empty`":["function"],"provide a":["partial","link?","stricter"],"provide marginal":["type"],"provide more":["efficient","an"],"provide pure":["and"],"provide simple":["signatures","type","type"],"provide some":["real"],"provide the":["next","`responseFor`","result"],"provide them":["for"],"provide type":["signatures"],"provided I've":["come"],"provided an":["example"],"provided at":["least"],"provided by":["Data.List.","the"],"provided functions":["over"],"provided in":["`Prelude`.","`Data.Time.Calendar`,"],"provided some":["other"],"provided test":["cases"],"provided to":["me."],"provided you":["find"],"provides a":["higher-level","nice"],"provides enough":["info"],"provides random":["functions."],"provides. Thanks!":["I've"],"provides. [Data.Map](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map.html)":["documents"],"providing it":["only"],"providing the":["locking"],"public API":["is","of","should","from","(`toRNA`","explicitly","from"],"public API,":["and","which"],"public API.":["This"],"public as":["well."],"public function":["that"],"public functions/methods/etc":["remain"],"public interface":["that","for","-","(just"],"public interface,":["which"],"publicly available":["libraries."],"pull it":["out","apart"],"pull out":["the"],"pull request":["from","or"],"pull request,":["it"],"pull request:":["http://github.com/kytrinyx/exercism.io"],"pull requests":["would","are"],"pull template":["out"],"pull that":["common"],"pull things":["into"],"pulled a":["copy"],"pulling in":["`Data.Text`","Data.Text"],"pulling the":["`map"],"pulling things":["into"],"pumps your":["line"],"punctuation and":["symbols"],"punctuation by":["using"],"punctuation doesn't":["match"],"punctuation is":["not"],"punctuation may":["not"],"punctuation, or":["symbol."],"punctuation. Will":["roll"],"pupil ((grade,":["pupils):rest)"],"pupil []":["would","="],"pupil properly":["during"],"pupil to":["the"],"pupil to,":["if"],"pupil\" then":["I've"],"pupils are":["not"],"pupils in":["sorted","a","a"],"pupils) -&gt;":["(grade,"],"pupils):rest) =":["..."],"pupils; or":["else"],"pure and":["impure"],"pure code":["without","that","that"],"pure functions":["was"],"pure it":["can"],"pure math":[":)","to","to","to","to","formulas","to"],"pure math,":["without","without"],"pure value":["so","inside"],"pure version":["would"],"pure way\"":["function."],"pure) .":["M.insertWith"],"pure, so":["you"],"pure. Because":["`atomically`"],"pure`. To":["remove"],"purely a":["style"],"purely for":["the"],"purely functional":["and","language.","data","values"],"purely internal,":["this"],"purely using":["the"],"purpose I":["don't"],"purpose also":["looks"],"purpose because":["i"],"purpose does":["it","`primes`","`filter"],"purpose due":["to"],"purpose more":["explicitly."],"purpose obvious.":["Sometimes"],"purpose of":["using","the","_insertWith_","show","`strip`","the","the","code","\"T.pack\"?","a","the"],"purpose rather":["than"],"purpose than":["`alter`.","`\"'\""],"purpose that":["can"],"purpose, I":["can't"],"purpose, because":["it"],"purpose, especially":["since"],"purpose, however,":["you"],"purpose, or":["what"],"purpose. Also,":["I"],"purpose. Another":["alternative"],"purpose. It":["wasn't"],"purpose. You'd":["have"],"purposes and":["later"],"purposes of":["this"],"purposes that":["look"],"pursuing to":["the"],"push `isBlank,":["isAllUpper,"],"push back":["at"],"push it":["up"],"push them":["to"],"push updates":["to"],"push/unshift and":["pop/shift."],"pushed a":["new"],"pushed to":["the"],"pushes the":["point)."],"pushing me":["towards"],"pushing the":["update."],"pushing through":["this"],"put M":["from","from"],"put `(century)`":["in"],"put ```substThymidine```":["function"],"put `firstCouplet`":["and"],"put `isAnagramOf`":["into"],"put `orbital":["Earth"],"put `responseFor`":["near"],"put `someChars`":["first"],"put `toRNA`":["before"],"put `translateNucleotide`":["into"],"put `where`":["at","on","on","on","on","on","on"],"put `wordList":["str"],"put a":["space","space","space","`{-#","copy"],"put all":["values"],"put an":["[atomic](https://en.wikipedia.org/wiki/Atomicity_(programming))"],"put data":["declaration"],"put digits":["under"],"put exercism.io":["on"],"put in":["a","on"],"put inside":["of"],"put into":["the","upper","these","this!"],"put is":["a"],"put isSilence":["check","first"],"put it":["there).","here","back","in","in","in"],"put it,":["\"excessively","or"],"put many":["things"],"put more":["semantic"],"put my":["errors","wheres"],"put off":["by"],"put on":["the"],"put ones":["in"],"put pieces":["of"],"put responseFor":["at"],"put some":["stuff","rather"],"put the":["type","definitions","most","helper","operator","words","functions","4","whole","constructor","cases","whitespace","helper","`where`","`s`","transformed","most","trace","annotation.","recursion","OverloadedStrings","type","guards","`where`","`translateDNA`","map","definition"],"put them":["together","in","together","in"],"put those":["bindings"],"put type":["signatures","signatures"],"put up":["code"],"put whitespace":["between","between"],"put will":["block,"],"put you":["cannot"],"put your":["programming"],"put. Take":["takes"],"putMVar a":["."],"putMVar instead":["of"],"putMVar since":["put"],"putMVar v":["()"],"putMVar) for":["this"],"puts a":["new"],"puts me":["over"],"putting DrunkTalk":["would"],"putting `primeFactors'`":["in"],"putting `where`":["on"],"putting down":["I"],"putting it":["back","in"],"putting signatures":["([Integer]"],"putting that":["much"],"putting the":["object","helper","important","supporting"],"putting them":["in"],"puzzle to":["work"],"puzzling out":["of"],"python to":["thank"],"pythonic (or":["should"],"q =":["\"Fine.","\"Woah,","\"Sure.\""],"q``` -":["this"],"qnikst, I":["greatly"],"qualifications on":["the"],"qualified Data.Char":["as"],"qualified Data.List":["as","as"],"qualified Data.Map":["as","as","as","as","as","as","as","as","as","as","as"],"qualified Data.Map.Strict":["as","as","as","(x,"],"qualified Data.Text":["than"],"qualified Data.Vector":["as"],"qualified `as":["M`,"],"qualified as":["a","then","prelude"],"qualified because":["all"],"qualified import":["such","though.","for","it's","or","for","(and","in","for","of"],"qualified import,":["so","as"],"qualified imports":["-","(especially","and","of","-","with","used","to"],"qualified imports,":["so","e.g.","such","such"],"qualified imports.":["This","Makes","In","I"],"qualified imports:":["I"],"qualified it":["imports"],"qualified map,":["and"],"qualified module":["imports,"],"qualified name,":["more"],"qualified names":["for","here.","for","in"],"qualified or":["to"],"qualified then":["all"],"qualified types":["in"],"qualified under":["`Map`,"],"qualified with":["`Prelude.`,"],"qualified, e.g.":["`import"],"qualified, so":["`M.Map"],"qualified. The":["code"],"qualifiers, though":["I'm"],"qualify. Also,":["with"],"qualifying `map`":["here?"],"qualities though,":["it's"],"quality of":["concision"],"quantities here":["are"],"quantitize the":["improvement"],"quantity of":["numbers"],"quasi-imperative tail":["recursion"],"queries beginning":["with"],"query ==":["'a'`"],"query starting":["with"],"query` doesn't":["need"],"query` is":["redundant,"],"query`... thanks":["for"],"questing for":["but"],"question \"\"":["src`"],"question -":["what"],"question a":["partial"],"question about":["why","performance"],"question and":["questioned"],"question as":["to"],"question check":["now"],"question due":["to"],"question for":["@dusty"],"question guard":["then"],"question had":["a"],"question how":["to"],"question is":["a","fine","-"],"question is,":["is"],"question is:":["under"],"question isn't":["really"],"question mark":["the","gets"],"question mark\"":["using"],"question on":["Twitter."],"question or":["predicate,","predicate."],"question response":["-"],"question saves":["me"],"question shows":["some"],"question since":["the"],"question then.":["Thanks"],"question though,":["does"],"question to":["raise"],"question x":["="],"question! There":["is"],"question, I":["think"],"question, but":["I","your"],"question, on":["the"],"question, then":["the"],"question. Code":["is"],"question. I":["will"],"question. Was":["there"],"question: I":["could"],"question: The":["style"],"question: on":["line"],"question? And":["isn't"],"question? In":["this"],"questionable thing":["in"],"questioned nonsence.":["Whatever"],"questioning cases":["to"],"questioning him,":["or"],"questioning rules":["overlap."],"questions :)":["The"],"questions =":["s"],"questions about":["how","this"],"questions are":["ordered"],"questions can":["be"],"questions more":["generally."],"questions of":["the"],"questions that":["I"],"questions, and":["find"],"questions, but":["don't"],"quibble, the":["proliferation"],"quick fix":["to"],"quick glance":["at","that","this"],"quick indication":["that"],"quick look":["at"],"quick modification":["to"],"quickCheckWith stdArgs{":["maxSuccess"],"quickcheck property":["to"],"quicker, no?":["See"],"quickly if":["there","I"],"quickly see":["what"],"quickly testing":["things"],"quickly turn":["ugly"],"quickly with":["less"],"quickly you":["can"],"quickly, it's":["definitely"],"quickly. I":["do"],"quickly. If":["you're"],"quickly. Is":["there"],"quiet a":["bit."],"quiet more":["elegant?"],"quiet nice":["as"],"quiet right.":["i"],"quirks of":["Prelude"],"quirks, but":["quirks"],"quite a":["list","bit","bit.","bit","lot","bit","bit","bit.","bit","lot.","bit.","bit,","bit","bit.","bit","large","bit","while,","bit","bit","bit,"],"quite advanced":["topic."],"quite apparent":[":-)"],"quite as":["efficient"],"quite benign":["so"],"quite clear":["to","on"],"quite common":["pattern"],"quite common).":["But"],"quite correct":["as"],"quite cryptic":["(at"],"quite differs":["from"],"quite digested":["how"],"quite easily":["(consider"],"quite far":["from"],"quite feel":["right"],"quite fine":["as"],"quite fix":["the"],"quite follow.":["Any"],"quite from":["the"],"quite function":["application"],"quite get":["what"],"quite good":["at","in","to"],"quite good!":["Actually"],"quite good,":["there's"],"quite good.":["One"],"quite happy":["with"],"quite hard":["for"],"quite how":["to"],"quite idiomatic.":["What"],"quite inconsistent,":["so"],"quite inefficient":["you"],"quite inefifcient":["you"],"quite informative.":["It's"],"quite like":["the","to","this.","this","it"],"quite long":["too"],"quite long.":["Secondly"],"quite minor":["though,"],"quite new":["to"],"quite nice!":["Another"],"quite nicely":["in"],"quite old,":["apparently,"],"quite possible":["that"],"quite properly":["got"],"quite readable.":["Several"],"quite right":["statements..."],"quite safe":["(the"],"quite short.":["This"],"quite similar":["to"],"quite simple":["and"],"quite slow,":["checking"],"quite some":["time."],"quite standard":["but"],"quite strong":["intuitive"],"quite sure":["about","what","if","which"],"quite sure.":["This"],"quite the":["same"],"quite trivial,":["but"],"quite understand.":["Could"],"quite unhappy":["with"],"quite useful":["in"],"quite work":["for","out"],"quite worried":["about"],"quite worthwhile":["to"],"quite, see":["below)"],"quite. You":["shouldn't"],"quotRem instead":["of"],"quotRem to":["get"],"quotRem? Sounds":["almost"],"quote Adam":["Savage:"],"quote from,":["it"],"quote me":["on","on"],"quote suffixes":["plant'"],"quote the":["char","value"],"quote: \"code":["will"],"quoted char":["string"],"quoted strings":["will"],"quotes (which":["your"],"quotes around":["characters."],"quotes here":["because"],"quoting algorithm\"":["I"],"quoting algorithm.":["Your"],"quoting it":["yourself."],"quoting) which":["is"],"r -\u003e":["m"],"r \u003c-":["mkRobot","resetName","mkRobot"],"r =":["('A','Z')"],"r [(l,s":["l)"],"r can":["be"],"r in":["the"],"r structure":["concurrent"],"r) --":["Defined","Defined"],"r) =":["ff","f","toList","ff"],"r) =\u003e":["m"],"r) →":["Maybe"],"r)` (which":["would"],"r)` Functor":["instance"],"r)` is":["generally"],"r)` monad":["fits"],"r` are":["superfluous"],"r` could":["be"],"r` for":["a"],"r` is":["a"],"r` not":["the"],"race condition":["in","in"],"radix and":["add","the"],"raindrops $":["concatMap"],"raindrops` where":["`ifNull"],"raise an":["error"],"raise would":["be"],"raised for":["'X'"],"raised to":["the","the","the","the","the","the","the"],"raises (for":["me)"],"raises a":["warning"],"raising errors,":["and"],"ram than":["expected,"],"ramifications to":["the"],"ran at":["0.197s"],"ran into":["the","the","mostly","a"],"ran it":["through"],"ran out":["of"],"ran the":["tests.","tests,"],"random Char":["between"],"random character,":["no"],"random characters":["in"],"random generator,":["so"],"random key":["of"],"random letters":["I'd"],"random name":["is","in","is"],"random number":["generation"],"random numbers":["regardless"],"random seed":["and"],"random things":["on"],"random, I":["confused"],"random-string-by-pattern generation.":["Quite"],"random. And":["definatelly"],"randomChar x":["="],"randomLetters n":["=","="],"randomName =":["mapM"],"randomName \u003e\u003e=":["newIORef","newIORef","newIORef"],"randomRIO $":["case"],"randomRIO ('0',":["'9'))","'9')]"],"randomRIO ('A',":["'Z'))","'Z')`","'Z')","'Z')`"],"randomRIO [a,":["a,"],"randomRIO [char,":["char,"],"randomRIO [letter,letter,num,":["num,num]"],"randomRIO […]`":["and","(possibly"],"randomRIO and":["store"],"randomRIO calls":["without"],"randomRIO is":["usually"],"randomRIO makes":["much"],"randomRIO …`":["for"],"randomRIO. Seems":["like"],"randomRobot, per":["etrepum's"],"randomRs. This":["looks"],"randomly generated":["\"The"],"randomly shuffle":["the"],"randomness of":["the"],"randomness were":["mini-projects"],"range at":["all."],"range can":["be"],"range check":["on"],"range expression":["and"],"range generation,":["forgot"],"range go":["backwards."],"range of":["allergens","unicode"],"range syntax":["`[from,then..to]`,"],"range to":["use","be"],"range, as":["it"],"range, there's":["a"],"range. But":["I"],"ransoms (randomRIO":["will"],"rant here":["about"],"rare that":["you'd"],"rarely big":["enough"],"rarely creep":["out"],"rarely helps":["demystify"],"rarely needed).\"":["So"],"rarely see":["`where`"],"rarely the":["answer"],"rather \"hard":["to"],"rather a":["lot.","last"],"rather bad":["in"],"rather be":["`fromList"],"rather better":["now"],"rather common":["and"],"rather complicated":["and"],"rather confused":["by"],"rather cute,":["but"],"rather do":["them"],"rather easily":["in"],"rather extravagent.":["A"],"rather general":["functions"],"rather implicit.":["Do"],"rather interesting":["song"],"rather is":["a"],"rather jargony,":["it's"],"rather keep":["the"],"rather kind":["to"],"rather likely.":["But"],"rather look":["like"],"rather nice":["to"],"rather not":["overload","rewrite","optimize","require"],"rather on":["letters."],"rather read":["`isQuestion"],"rather see":["descriptive","Text"],"rather short":["words,"],"rather similar":["to"],"rather stick":["to"],"rather than":["is_foo","`|","creating","isLetter,","cut","check","your","resorting","using","piggybacking","allowing","`words`","a","using","`insertWith`","O(n).","(=='","list","filter","having","separate","`function'`","implementation","its","checking","using","`Maybe(Int,","`length`,","moving","the","STM's","the","overriding","explicit","linearithmic","`::`,","underscore_separated,","the","the","the","using","use","`stripped`.","try","underscore_separated,","that","preprocessing","`isEven`","having","a","guards","`;`","writing","`records`","hide","doing","clarifying","relying","a","Maybe.","point-free,","use","the","`[Char]`","`[Char]`","explicit","e.g.","another","lists","every","the","guards,","just","`let`","`do`","`map`,","understanding","combing","using","the","declarative),","passing","`foldl`.","passing","`Data.Map`","performing","complexity.","implement","implement","`[x","just","equality.","a","mapping","`all`","a","parentheses","just","all","Text.","the","doing","`not(null","direct","doing","a","`Just`","`trim`?","ord/chr?","follow","`Data.Map`","`all'`","guards.","`read`","lazy","data","having","a","`String`","a"],"rather that":["implementation."],"rather ugly":["and"],"rather useful":["still."],"rather useless":["until"],"rationale for":["choosing","excluding","the","`max"],"rationale, check":["my"],"rdeepseq` as":["well."],"re isQuestion":["-"],"re using":["`foldl`"],"re-bind names,":["`words`"],"re-export it":["from"],"re-exported to":["`Data.Map`","`Data.Map`"],"re-implementing this":["example"],"re-inventing control":["flow"],"re-inventing the":["wheel,"],"re-mplementation of":["`pattern"],"re-order the":["guards"],"re-ordered conditions,":["as"],"re-organization you":["did,"],"re-searching through":["numbers"],"re-sorting the":["target"],"re-understanding the":["problem"],"re-used in":["`areaCode`"],"re-write `toRNA`":["in"],"re-write them":["in"],"re-write to":["use"],"re-written as":["a"],"re: `\"\"`.":["I've"],"re: changing":["the"],"re: function":["application,"],"re: the":["public"],"reach for":["some"],"reach my":["laptop."],"reached that":["test."],"reached the":["point"],"reaches the":["end","end"],"read \"Learn":["you"],"read (although":["it's"],"read .":["show"],"read /":["understand\"?"],"read S":["into","into"],"read Simon":["Marlow"],"read [Let":["vs."],"read [this](http://www.haskell.org/haskellwiki/Stack_overflow)":["and"],"read `(++)":["&lt;$&gt;"],"read `all":["isUpper"],"read `anagramsFor`":["more"],"read `isQuestion":["string"],"read `sort":["(normalize"],"read `verse`)":["but"],"read a":["little","bit","new","few"],"read about":["the","applicatives","IORef"],"read about,":["understand"],"read an":["MVar,"],"read and":["understand","understand","understand.","comprehend).","understand.","the","digest","understand."],"read at":["a"],"read because":["you"],"read before":["I"],"read better":["by","as","if","than","in"],"read chapters":["12"],"read closer":["to"],"read compared":["to"],"read depends":["on"],"read expression":["from"],"read first":["chapters"],"read from":["thread"],"read haddock":["documentation"],"read how":["other"],"read if":["you"],"read in":["two","a"],"read instance":["so"],"read is":["the"],"read it":["as","closely).","as","again"],"read it,":["however","great"],"read like":["English","\"if"],"read many":["more"],"read mode":["cleanly."],"read more":["about","about","nicely.","easily","clearly"],"read much":["more"],"read nicer":["with"],"read on":["O'Reilly's"],"read poitfree":["page"],"read rather":["than"],"read some":["existing"],"read than":["`[a,a-1..b]`","`capitalize`","`(show"],"read that":["section","chapter","section","link","chapter"],"read the":["first","manual","comment","article","section","definition","comments","last","whole","book,","GHC","page","first","chapter"],"read through":["the","all"],"read too":["quickly,"],"read top":["down"],"read up":["on","on","on","on","on","on"],"read using":["just"],"read very":["nicely."],"read your":["reference).","comment"],"read, and":["also","faster","most"],"read, but":["that's"],"read, but...":["both"],"read, for":["me"],"read, parse":["and"],"read, since":["you"],"read, so":["I'm"],"read. I":["probably"],"read. Maybe":["it's"],"read. Not":["sure"],"read. You":["have"],"read. but":["i"],"read/maintain by":["using"],"read/show happens":["to"],"readDNA' []":["."],"readHex from":["Numeric."],"readMVar .":["unBankAccount"],"readMVar and":["swapMVar"],"readMVar m`":["to"],"readMVar` is":["equivalent"],"readNucleotide`. In":["Haskell"],"readOct' n":["_","(x:xs)"],"readTVar acct":["\u003e\u003e="],"readTVar acct`":["line?","has","says"],"readTVar doesn't":["makes"],"readTVar is":["redundant"],"readTVar` in":["`getBalance`..."],"readTVar` with":["`readTVarIO`"],"readTheAcc`. I":["think"],"readability (also":["the"],"readability I'd":["put"],"readability and":["simplicity","understanding.","I","generic","correctness,","maintainability","eases","maintainability","performance."],"readability by":["surrounding"],"readability here.":["Your"],"readability improved.":["The"],"readability improvement,":["in"],"readability instead":["of"],"readability into":["a"],"readability is":["one's","on","often"],"readability purpose,":["I"],"readability then":["you"],"readability threshold,":["since"],"readability was":["the"],"readability's sake":["defined"],"readability, but":["that's","then","this","something's"],"readability, however":["in"],"readability, so":["where"],"readability, this":["was","is"],"readability, try":["moving"],"readability, you":["could","could"],"readability. Also":["I"],"readability. I":["feel"],"readability. I'm":["using"],"readability. Nested":["`where`"],"readability. Right":["now"],"readability/performance. This":["is"],"readable (in":["my"],"readable (mostly)":["and"],"readable -":["now"],"readable and":["in","debuggable.","expressive,","clearer..","easy","understandable","more"],"readable as":["using"],"readable at":["a"],"readable because":["it"],"readable but":["either","not"],"readable by":["expressing","expressing","a"],"readable code\",":["so"],"readable code,":["but"],"readable for":["this"],"readable idiom":["is"],"readable in":["case","my","this"],"readable of":["course,"],"readable once":["you","I"],"readable or":["maintainable:","not.","easy"],"readable per":["advice."],"readable since":["you"],"readable solution.":["The","Although"],"readable than":["this,","the","the","`map","else","the","the"],"readable that":["way.","way."],"readable the":["code","model"],"readable this":["way,"],"readable to":["me.","me.","use"],"readable versions,":["not"],"readable way":["to"],"readable when":["done"],"readable, also":["no"],"readable, and":["I","I","I"],"readable, but":["current"],"readable, by":["expressing"],"readable, so":["it's"],"readable, though.":["It"],"readable, which":["is"],"readable. And":["I","not"],"readable. Anything":["else"],"readable. But":["it"],"readable. I":["like","should"],"readable. I'd":["love"],"readable. I'm":["learning"],"readable. In":["the"],"readable. Several":["small"],"readable. Since":["only"],"readable. The":["`shiftL`"],"readable. This":["alone"],"readable. You":["can"],"readable. `hammingDistance'`":["requires"],"readable? I":["expect"],"readd that,":["and"],"readed from":["list"],"reader can":["safely"],"reader if":["it"],"reader monad":["(or"],"reader of":["this","the"],"reader that":["that"],"reader to":["keep","wade","know"],"readers to":["know","know"],"readers: there":["is"],"readily available":["in"],"reading \"composable":["transactions\""],"reading TVar":["after"],"reading [this":["link]"],"reading a":["paper"],"reading about":["the","recursion"],"reading all":["the"],"reading and":["study."],"reading before":["I"],"reading correctly,":["a"],"reading for":["various"],"reading from":["the"],"reading functors":["and"],"reading haskell":["code"],"reading it":["as","correctly.","wrong?"],"reading it,":["I","but"],"reading one":["of"],"reading papers":["about"],"reading responseFor,":["and"],"reading that":["section","\u003ccode\u003ewhere\u003c/code\u003e","as"],"reading the":["compiler","program,","intro","name,","README","Haskell","materials","classic","beginning","beginning","beginning","first"],"reading this":["code.","section","section","learned"],"reading through":["http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Char.html"],"reading too":["much"],"reading up":["on","on"],"reading your":["code."],"reading. Is":["this"],"readme case":["we"],"readme files":["are"],"readme for":["this"],"readme it":["says"],"readme says":["that"],"readme) much":["more"],"reads \"":["123"],"reads \"filter":["anagrams"],"reads a":["bit"],"reads better":["with"],"reads from":["an"],"reads just":["like"],"reads like":["a"],"reads more":["clearly","naturally,"],"reads much":["better."],"reads now,":["it"],"reads pretty":["well"],"reads slightly":["better"],"reads the":["input"],"reads very":["nicely"],"reads-through. I":["like"],"readsBase ('A':s)":["="],"readsBase ('C':s)":["="],"readsBase ('G':s)":["="],"readsBase ('T':s)":["="],"readsBase ::":["ReadS"],"readsBase _":["="],"readsPrec =":["const"],"ready for":["acceptance.","the"],"ready to":["be","give"],"real ADT.":["(We"],"real Haskell":["code","code"],"real application":["I"],"real benefit":["to","here"],"real code":["though"],"real difference":["that"],"real example,":["this"],"real gain.":["Compare"],"real issue":["and","is","with"],"real issues":["to","or"],"real jolt":["of"],"real knock":["is"],"real loss":["of"],"real need":["for","to","to","to"],"real nucleotide":["or"],"real numbers":["n,"],"real one,":["as"],"real plus-value!).":["Basically,"],"real pointers":["and"],"real problem":["is"],"real problem.":["Yes"],"real program":["in","I"],"real reason":["to","it's"],"real reason,":["and"],"real type":["instead"],"real world":["environment,"],"real world,":["but"],"realise that":["might","fmtNumber","they"],"realised I":["don't","left","was"],"realised doesn't":["pass"],"realised that":["`liftA2","forces"],"realising that":["I"],"realistic parsing":["task"],"realize I":["could"],"realize `split`":["has"],"realize about":["```mapM```,"],"realize it":["was"],"realize that":["this","this","`sort",":D","setting","I","this","isSpace","I","you"],"realized (looking":["at"],"realized I":["could"],"realized how":["null"],"realized that":["I","just","I","everything","you're"],"realized there":["was"],"realizing it":["sooner."],"realizing that":["writing"],"realizing. I'm":["open"],"really a":["one","net","choice","trouble","nit","potential","benefit","nitpick,","nitpick,","fan","complete","plant,"],"really all":["just"],"really allow":["for"],"really an":["issue.","external"],"really any":["more"],"really anything":["top-level"],"really appreciate":["all","it."],"really bad":["at"],"really badly":["worded,"],"really basic":["haskell"],"really be":["necessary","part"],"really better":["than","or"],"really both":["just"],"really bugged":["me,"],"really building":["an"],"really buy":["much.","you"],"really change":["much.","this","much,"],"really check":["anything."],"really clever":["way","way"],"really clever,":["you"],"really close":["to","to"],"really clumsy":["with"],"really clunky":["to"],"really compact":["this."],"really comprehend":["how","everything"],"really concerned":["with"],"really confused":["why"],"really consider":["not"],"really cool":["solution."],"really cool!":["I've"],"really cool.":["Thanks."],"really courageous)":["see"],"really cute":[":)"],"really depends":["on","I"],"really dislike":["`not"],"really distracting,":["e.g."],"really do":["anything?","feel","anything","much","much","much."],"really don't":["need","see","have","care","like","think","care"],"really dumb":["mistakes;"],"really dumb,":["but"],"really encourage":["the"],"really equivalent,":["but"],"really essential":["to"],"really ever":["use"],"really feasible":["to"],"really figure":["how"],"really first":["checks"],"really for":["the"],"really fully":["get"],"really get":["this"],"really ghc":["compiler"],"really good":["style","that"],"really good.":["You"],"really great.":["About"],"really happy":["with"],"really hard":["one"],"really hashing":["(converting"],"really hate":["the"],"really have":["is","any","to","a","a","to","a"],"really heard":["to"],"really help":["the","much"],"really helped":["clarify"],"really helpful!":["I've"],"really helpful,":["thanks."],"really helps":["much.","with"],"really hope":["I"],"really hurt":["anything"],"really ideal":["for"],"really important":["here?"],"really in":["Haskell."],"really insist":["on"],"really interesting":["way","so"],"really is":["the","tricky."],"really isn't":["much"],"really itching":["to"],"really its":["a"],"really just":["talking","ported","`not","be","wrapping","need","wraps","`fmap`","say","the","need","the","a","helpers","wrote"],"really know":["what","how","where"],"really knows":["how"],"really learned":["a"],"really like":["the","a","how","it","your","how","Haskell,","the","how","this","this.","the","this","that"],"really list":["comprehensions"],"really love":["to","Clojure"],"really made":["things"],"really make":["sense"],"really makes":["sense","things"],"really matter":["much","for"],"really matters":["here"],"really may":["be"],"really meant":["\"integer\"."],"really more":["common","common.","readable"],"really much":["reason","of"],"really neat.":["However,"],"really neatened":["up"],"really necessary":["here"],"really necessary,":["normally","because"],"really need":["here","to","the","a","to","any","names,","a","to","it"],"really needed":["for","given","here"],"really new":["to"],"really nice":["-","and","either"],"really nice,":["thanks"],"really nitpicking":["here,"],"really no":["case","harm","need"],"really not":["important","coming"],"really old,":["like"],"really only":["need"],"really optimizing":["-"],"really ought":["to"],"really outweigh":["the"],"really quite":["a"],"really readable":["in","too."],"really relevant":["for"],"really relevant,":["is"],"really remove":["the"],"really review":["it."],"really saying":["here"],"really see":["why","any","why"],"really seem":["that","to"],"really seen":["it"],"really should":["switch","write"],"really shouldn't":["need"],"really show":["instance"],"really simple":["and"],"really simplify":["your"],"really something":["to"],"really start":["paying"],"really startled":["me..."],"really state":["is"],"really storing":["the"],"really strange.":["You"],"really struggling":["to"],"really stuck":["on","on"],"really such":["a"],"really sunk":["in"],"really sure":["what","the","what","how","which","how","what"],"really sure,":["either!"],"really terrible":["about"],"really terse":["formulation"],"really testing":["for"],"really that":["is"],"really the":["best","same","right","way"],"really there":["is"],"really think":["of","that's"],"really thinking.":["Now"],"really tiny":["nit."],"really too":["much"],"really trying":["to"],"really ugly":["and"],"really understand":["why","the","it...","what's","all","what's"],"really understood":["this"],"really upgrade,":["but"],"really use":["it"],"really use.":["In"],"really useful":["tool,"],"really want":["to","to","to","to","a","strict","to","to","a","to","to","to","to"],"really wanted":["to","to","to","to","to"],"really what":["I","you","you","you"],"really work":["out"],"really works":["here"],"really worth":["the","the"],"really you":["may","may","are","can","can"],"really, \"Left\"":["means"],"really, nice":["work!"],"really, really":["optimizing"],"really, really,":["really"],"really, will":["be"],"really, you":["should"],"really. So":["not"],"really? it":["can"],"rearranging the":["letters"],"reason (in":["Data.Map,"],"reason (thunks":["of"],"reason (whether":["closed"],"reason I":["can't","did","left","can't","was"],"reason `product":["[]"],"reason about,":["since","unfortunately."],"reason about.":["Might"],"reason as":["any"],"reason didn't":["have"],"reason for":["the","using","this","the","this?","this","this","this","this","this","the","point","this","this","introducing","it","using","this","that","my","using"],"reason functions":["are"],"reason here":["is"],"reason i":["always"],"reason is":["that","that","that","that","that"],"reason is,":["foldr"],"reason it's":["called"],"reason mutability":["is"],"reason never":["thought"],"reason not":["to","to","to","to.","to."],"reason of":["course"],"reason parentheses":["are"],"reason takes":["slightly"],"reason that":["computing","I","`foldr`","you","the"],"reason the":["`quotRem`","Map"],"reason they":["aren't"],"reason through":["with"],"reason to":["bring","remove","worry","implement","do","go","reference","have","do","build","support","make","have","use","use","use","do","avoid","do","use","write","use","use","use","put","pull","use","wrap"],"reason why":["foldr","foldr","foldr","foldr","foldr","higher","you","`foldl`","`:`","I","you","I","I"],"reason you":["work","didn't","would","used","use","switched","used","did","don't"],"reason your":["internal"],"reason, I":["didn't"],"reason, and":["can"],"reason, as":["in"],"reason, it":["would","just"],"reason, such":["languages"],"reason, the":["I"],"reason, when":["that"],"reason. As":["for"],"reason. I":["suppose","started"],"reason. If":["I"],"reason. See":["next"],"reason. Thanks":["for"],"reason. The":["entire"],"reason. This":["is"],"reasonable amount":["of"],"reasonable and":["readable."],"reasonable assumption,":["the"],"reasonable chance,":["at"],"reasonable feature":["to"],"reasonable message,":["or"],"reasonable that":["the"],"reasonable to":["depend","me."],"reasonable, who":["knows?"],"reasonable. About":["`::"],"reasonably readable.":["The"],"reasonably use":["`sqrt`"],"reasoning about":["the","this."],"reasoning behind":["those","the"],"reasoning being":["dubious"],"reasoning for":["`Last`"],"reasoning is":["incorrect."],"reasoning there":["than","is:"],"reasoning, `not":["."],"reasoning, you":["could"],"reasons are":["for"],"reasons as":["in"],"reasons for":["that:"],"reasons it's":["nearly"],"reasons other":["than"],"reasons so":["you"],"reasons that":["I"],"reasons to":["import"],"reasons why":["this","you"],"reasons, but":["short"],"reasons, it":["is"],"reasons, you":["have","want"],"reasons: it's":["a"],"rebalance them":["and"],"recalculate for":["every"],"recall changing":["things"],"recall ever":["seeing"],"receive the":["number"],"received from":["each"],"received the":["exact"],"receiving comments":["on"],"recent Haskell":["Platform","Platform)."],"recent ghc,":["than"],"recently a":["cool"],"recently have":["seemed"],"recently is":["that"],"recently taught,":["you'll"],"recognize `\"a,b\"`":["as"],"recognize it":["as"],"recognize that":["```a```"],"recognized as":["unused,"],"recognized by":["the"],"recommend creating":["a"],"recommend exporting":["anything"],"recommend figuring":["out"],"recommend it":["over"],"recommend just":["function"],"recommend reading":["this","it","this","one","the","http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf","the"],"recommend solving":["this"],"recommend taking":["a"],"recommend that":["you","you"],"recommend these":["sorts"],"recommend this":["section","section","section","section","section","section","section","section","section","section","section"],"recommend to":["declare","use","use"],"recommend using":["C.isSpace","`where`,","`testBit`","`fromListWith`","`foldl'`"],"recommend writing":["out"],"recommend? It":["will"],"recommendation I":["have"],"recommendation by":["the"],"recommendation, which":["has"],"recommendations would":["be"],"recommendations, but":["it'd"],"recommended fromListWith?":["Also,"],"recommended in":["iteration","the"],"recommended to":["me..."],"recommended, and":["the"],"recommends 4":["spaces"],"recomputed for":["every"],"recomputing things.":["It's"],"recomputoing the":["sorted"],"record as":["is."],"record definition":["a","would"],"record fields,":["like"],"record for":["the"],"record syntax":["to","will","to","to","`newtype","like","on"],"record syntax,":["e.g."],"record syntax.":["You'll"],"record type":["to"],"record using":["an"],"record, the":["[example"],"records ::":["Map"],"records =":["M.Map"],"records for":["```bst*```-functions."],"records you":["also"],"recover from":["an"],"recurce over":["the"],"recurring (it":["doesn't"],"recurse forever":["in"],"recurse on":["the"],"recurse you're":["calling"],"recurses on":["the"],"recursing a":["lot,"],"recursing for":["you."],"recursing on":["the"],"recursion (basically":["the"],"recursion (google":["haskell"],"recursion I":["wouldn't"],"recursion always":["makes"],"recursion and":["force","use","call"],"recursion at":["all.","all?"],"recursion by":["hand."],"recursion can":["be"],"recursion doesn't":["even"],"recursion due":["to"],"recursion for":["`count`.","you,"],"recursion from":["`count`."],"recursion here,":["and"],"recursion in":["`sing`?","`sing`?","`readDNA'`?","your"],"recursion instead":["of"],"recursion instead,":["but"],"recursion into":["a"],"recursion is":["in","the","that"],"recursion like":["that"],"recursion link":["as"],"recursion on":["a"],"recursion or":["folds"],"recursion outside":["the"],"recursion rather":["than"],"recursion should":["be"],"recursion that":["doesn't"],"recursion this":["is"],"recursion to":["build","split","do"],"recursion unless":["it's"],"recursion vs":["the"],"recursion was":["best"],"recursion when":["there's","you","there"],"recursion will":["stop."],"recursion would":["allow"],"recursion you":["could"],"recursion yourself":["you"],"recursion yourself.":["The"],"recursion, but":["`go`","in","it"],"recursion, only":["use"],"recursion, such":["folds"],"recursion, try":["implementing"],"recursion, which":["looks"],"recursion, would":["be"],"recursion, you":["could"],"recursion. Expressed":["this"],"recursion. Getting":["the"],"recursion. Higher":["level"],"recursion. If":["you","I"],"recursion. It'd":["be"],"recursion. One":["good"],"recursion. That":["should"],"recursion. The":["version"],"recursion. Think":["about"],"recursion. You":["should"],"recursion] (http://en.wikipedia.org/wiki/Tail_recursion#Tail_recursion_modulo_cons)":["and"],"recursion](http://www.haskell.org/haskellwiki/Haskell_programming_tips#Avoid_explicit_recursion). It":["might"],"recursive ```toListCount```":["method"],"recursive `divMod`;":["that's"],"recursive approach":["at"],"recursive because":["the"],"recursive call":["to","or","is"],"recursive call,":["in"],"recursive call.":["Can"],"recursive case":["of"],"recursive case,":["and"],"recursive definitions":["and"],"recursive function":["rather","that","that","would"],"recursive function,":["also"],"recursive function.":["The"],"recursive functions":["in","heavily"],"recursive in":["this","a"],"recursive method":["gave"],"recursive one":["is"],"recursive passes":["over"],"recursive since":["the"],"recursive solution":["instead"],"recursive solution,":["it"],"recursive). I":["do"],"recursive, there's":["a"],"recursive. I've":["tried"],"recursive. If":["you"],"recursively a":["number"],"recursively building":["up."],"recursively to":["avoid"],"red herring,":["you"],"reddit feed":["yesterday,"],"redefine \u003cpre\u003edivisibleBy":["x"],"redefine the":["data"],"redo it":["with","using"],"redoes the":["sorting"],"redone my":["version"],"reduce `[Maybe":["(Integer"],"reduce ```anagramsFor```,":["which"],"reduce `toRNA`,":["but"],"reduce `translateNucleotide`":["to"],"reduce a":["bit"],"reduce anagramsFor":["to","by"],"reduce bit.":["I"],"reduce code":["by"],"reduce complexity":["by"],"reduce duplication":["a"],"reduce duplication,":["but"],"reduce in":["`isQuestion`."],"reduce it,":["but"],"reduce something":[":o"],"reduce the":["words","boilerplate","number","search","code"],"reduce usage":["of"],"reduce your":["indentation"],"reduce](http://www.haskell.org/haskellwiki/Eta_conversion)\" `alphaChars`":["and"],"reduced `isEmpty`:":["`isEmpty"],"reduced `isQuestion`":["to"],"reduced amount":["of"],"reduced further,":["but"],"reduced it":["to"],"reduced n":["was"],"reduced to":["a","just","one"],"reduced, I.e.":["same"],"reduced. In":["particular,"],"reducedN (k+1)":["(k:acc)\u003c/pre\u003e"],"reduces all":["functions"],"reduces the":["complexity","chances"],"reduces to":["one-liners,"],"reducing `comps'`":["with"],"reducing the":["number"],"reducing those":["guards"],"reduction (or":["η-reduction)."],"reduction -":["always"],"reduction and":["re-ordered"],"reduction is":["rather"],"reduction or":["η-reduction","η-reduction"],"reduction wiki":["page,"],"reduction) to":["this"],"reductions you":["can"],"reductions. While":["this"],"redundancy by":["defining"],"redundancy here":["as"],"redundancy of":["\"message\"."],"redundant (in":["fact"],"redundant `isPunctuation":["c"],"redundant and":["can"],"redundant arguments,":["something"],"redundant as":["it's","you"],"redundant because":["of"],"redundant brackets":["on","--","on","on","so:","on"],"redundant brackets,":["making","etc."],"redundant code,":["so"],"redundant given":["the"],"redundant here,":["you"],"redundant import":["statements"],"redundant imports,":["and"],"redundant language":["pragmas"],"redundant line":["from"],"redundant parameter.":["HLint"],"redundant to":["me,"],"redundant way":["to"],"redundant with":["the"],"redundant you":["can"],"redundant, `foldl'`":["is"],"redundant, and":["on","`allWhitespace`"],"redundant, because":["`all"],"redundant, it's":["already"],"redundant, since":["you","regular"],"redundant. But":["I"],"redundant. Everything":["else"],"redundant. L23":["has"],"redundant.\" So":["I"],"reduntant as":["it"],"reduntant, maybe":["try"],"reevaluate my":["style"],"reevaluated later":["(as"],"reexports functions":["from"],"refactor `anagram`":["such"],"refactor `anagramsFor`":["such"],"refactor `isAnagramOf`":["slightly"],"refactor `isShouting`":["to"],"refactor code":["to"],"refactor it":["to","so","later","such"],"refactor it,":["you"],"refactor nucleotideCounts":["to"],"refactor solution":["to"],"refactor the":["whole"],"refactor this":["code"],"refactor to":["compare"],"refactor your":["`verse`","code"],"refactor. Also":["I"],"refactor. Something":["like"],"refactored count_list":["to"],"refactored it":["out"],"refactored thanks":["to"],"refactored to":["this:","use"],"refactored with":["all"],"refactoring out":["your"],"refactoring that":["I"],"refactoring the":["conditions"],"refactoring to":["introduce","use","get","make"],"refactoring until":["the"],"refactoring will":["be"],"refactoring with":["yours"],"refactoring, there":["are"],"refactoring. It":["might"],"refactorings with":["yours"],"refer to":["the","the","this","start","fairly","that","everything"],"reference for":["learning","how","when","both."],"reference it":["fully"],"reference links":["at"],"reference the":["parameter"],"reference to":["the","the","`s`","your","the"],"reference when":["I"],"reference you":["may"],"reference, I'll":["start"],"reference, `SU.split":["\""],"reference, `words":["=="],"referenced once—":["I"],"references that":["put"],"references to":["values.","`s`","exactly"],"references: \"Multiline":["string"],"referencing `w`":["in"],"referencing function":["parameters"],"referring to":["bugs","Python's","lists","sorting","Data.Text.strip","the"],"refers (I":["think)"],"refinement at":["this"],"reflect the":["abstract"],"reflect your":["suggestion."],"reflects the":["coincidental"],"reformat code":["in"],"reformatted this":["so"],"reformatting the":["input"],"reformulate `isQuestion`":["so"],"refresh my":["memory"],"refresher -":["I"],"refresher ;)":["I'll"],"refresher on":["the","how","how","how","Haskell's","Haskell's","Haskell's","Haskell's","how","Haskell's","how","how","how","how","Haskell's","how","how"],"refs. I":["chose"],"regard to":["xs.","precomputing","Haskell's","`insertIncrement`","the","parentheses,","the","`valid`","the","naming","performance."],"regarded as":["**strict**"],"regarded strength":["in"],"regarding `filter`":["but"],"regarding `isSuffixOf`.":["Although"],"regarding readability.":["Nested"],"regarding simplifying":["my"],"regarding the":["name.","current","`cleanUpInput`.","formatting."],"regardless of":["compiler","the","their","optimization","what","the","what","what","language","which","whether","the","what"],"regardless, even":["if"],"regex (even":["if"],"regex ```[A-Z]{2}[1-9][0-9]{2}```,":["not"],"regex at":["all"],"regex in":["scenarios"],"regex is":["the"],"regex library":["was"],"regex makes":["sense"],"regex myself":["by"],"regex parser":["blew"],"regex stuff.":["I"],"regex substitution,":["makes"],"regex twice.":["You"],"regex. fromListWith":["would"],"regexes and":["using"],"regexes but":["you're"],"regexes for":["this"],"regexes myself":["but"],"regexes. Standard":["`take`s"],"regexes. `c::":["Char`"],"regexps for":["this"],"regexy stuff":["from"],"regions and":["treat"],"regret this":["day...."],"regular Arch":["Linux"],"regular expressions":["which","seemed"],"regular expressions.\"":["Now"],"regular list":["map"],"regular old":["guard"],"regular recursion,":["but"],"regular strings":["in"],"regular, non-extended":["types"],"regularity of":["the"],"reignite our":["original"],"reimplement the":["wheel"],"reimplementation of":["`words`","map"],"reimplemented high":["order"],"reimplemented this":["per"],"reimplementing with":["`elem`;"],"reinforced my":["understanding"],"reintroduce the":["case"],"reinvent the":["wheel?","wheel."],"reinvented the":["wheel"],"reject =":["not"],"reject such":["nonsense,"],"reject things":["like"],"rejected it":["for"],"rejects a":["triangle"],"relate to":["the"],"related functions":["to"],"related suggestion:":["printf"],"related to":["the","the","strictness.","strictness.","Haskell's","Bob's","style","`ceiling`.","strictness."],"related, e.g.":["isEmpty"],"related, it's":["more"],"relates to":["MVars."],"relation 'are":["anagrams"],"relations (`::":["(a"],"relations (`::a":["-\u003e"],"relations I":["suppose?)!"],"relations of":["'are"],"relative indentation":["for"],"relative to":["the","the","Data.Char's","the"],"relatively \"heavy":["looking\""],"relatively concise...":["just"],"relatively easy":["way"],"relatively efficient,":["although"],"relatively new":["to","to"],"relatively novice":["Haskellers"],"relatively simple":["functions","still...I"],"relatively small":["association"],"relavent. Also,":["I"],"relaxed instances":["extension."],"relaxing compared":["to"],"release is":["imminent,"],"relevant and":["elegant"],"relevant declarations":["first"],"relevant for":["the"],"relevant structure":["for"],"relevant to":["your","the","this","either","this","this"],"relevant, is":["naming"],"relevant. The":["`(==)`","ordering"],"relic of":["an"],"relied on":["laziness"],"relies on":["empty","side","iterative","this"],"relieved to":["finally"],"rely on":["my","external","prelude.","GHC's","IO"],"rely so":["heavily"],"relying on":["a","the","any","any"],"remain a":["total"],"remain chars":["and"],"remain consistent":["in"],"remain) =":["divMod"],"remark makes":["sense,"],"remark! Thank":["you."],"remarks, I":["finally"],"remarks, will":["update."],"remeber if":["I"],"remember how":["to"],"remember looking":["at"],"remember reading":["that"],"remember seeing":["anything"],"remember that":["myself.","you","next"],"remember that.":["However,"],"remember the":["results","following","sum","sketches"],"remember this":["syntax"],"remember to":["use"],"remember what":["they","modules"],"remember which":["child"],"remember who":["told"],"remember work":["it's"],"remember! Will":["add"],"remember, you":["just"],"remember. I":["hadn't"],"remembered `foldl'`":["(you"],"remembered that":["I"],"reminded me":["to"],"reminder to":["my"],"reminder! Now":["monads"],"reminding me":["the"],"reminds that":["the"],"remnant of":["an"],"remotely understand":["what's"],"remove Data.List":["dependency!"],"remove `(a":["/="],"remove ```k'```":["and"],"remove `g`":["as"],"remove `leap":["="],"remove `runIdentity`":["and"],"remove `x`":["and"],"remove a":["function.","submission?","few","variable"],"remove above.":["None"],"remove all":["left-hand-side","the"],"remove an":["argument"],"remove as":["many"],"remove code":["duplication"],"remove everything":["except"],"remove functions":["are"],"remove if":["you","then"],"remove it":["before","?","you","without"],"remove it,":["cases","I"],"remove levels":["of"],"remove lot":["of"],"remove my":["foldCount"],"remove one,":["so"],"remove parameter":["that"],"remove parentheses":["elsewhere:"],"remove redundant":["arguments,"],"remove repetition...":["see"],"remove some":["redundancy.","redundancies."],"remove that":["check,"],"remove the":["double","Data.Set","need","`str","extra","splitAt","empty","need","warning.","double","redundant","need","outer","redundant","filter","sort","guards","`candidates`","dependence.","need","brackets","parenthesis","extra","function","last","type","variable","brackets"],"remove this":["guard"],"remove unused":["imports"],"remove your":["`toList`"],"remove* functions":["are"],"removeNoAlpha $":["speak)`."],"removeNonAlphanumeric` would":["be"],"removeSilence .":["removeNoAlpha"],"removeSilence =":["filter","filter"],"removeSilience ::":["[Char]-\u003e"],"removeSilience ws":["="],"removed a":["useless"],"removed bindings":["that"],"removed if":["the"],"removed my":["`strip`"],"removed the":["qualifications","parentheses.","Data.Text","qualified","use","need","do","TH","unnecessary","insertWith","parentheses"],"removed) to":["`all"],"removed, so":["you'll"],"removed, using":["it"],"removed. I":["always"],"removes all":["of"],"removing `do`":["would"],"removing punctuation":["by"],"removing the":["`not","need","point","`Right","variable","dna"],"removing those":["parentheses."],"removing unnecessary":["parentheses"],"removing whitespace":["characters."],"removing will":["cause"],"removing your":["`isAlpha`"],"rename `School'`":["to`"],"rename `School`":["to"],"rename `letters`":["to"],"rename allCaps":["and"],"rename it":["to"],"rename the":["field"],"renamed `when`":["to"],"renamed and":["used"],"renamed to":["better"],"renaming `compare`":["since"],"renaming `isAllCaps`":["something"],"renaming it":["slightly."],"renaming your":["guard"],"renaming) `lowerCase`":["such"],"render some":["Char"],"rendering of":["a"],"renders the":["code"],"reopen it":["for"],"reorder them":["I"],"reorder your":["guards"],"reordered in":["a"],"reordered your":["checks"],"reordering makes":["what's"],"reordering the":["guards","code"],"reordering. Multiple":["atomicModifyIORef"],"reorganizing the":["order"],"rep), but":["this"],"repeat '0'`":["can"],"repeat '0'`.":["Looks"],"repeat 1":["and"],"repeat 1)```":["if"],"repeat 1`?)":["I"],"repeat `orbitalPeriod`":["on"],"repeat `scoreLetter`":["all"],"repeat common":["bases.","shared"],"repeat it":["for"],"repeat on":["every"],"repeat scans":["if"],"repeat the":["show","`g`","`reponseFor"],"repeat things":["like"],"repeat y`":["is"],"repeat yourself!":["It's"],"repeat) [1,2,3,4,5]`":["or"],"repeat` if":["you'd"],"repeat` is":["equivalent"],"repeat` looks":["like"],"repeated `\u003c|\u003e`":["over"],"repeated `length":["a`"],"repeated concatenation":["of"],"repeated digits":["and"],"repeated everywhere,":["use"],"repeated list":["traversal."],"repeated map":["sort."],"repeated more":["than"],"repeated text,":["but"],"repeated three":["times."],"repeated use":["of"],"repeated verbatim.":["It's"],"repeated, isn't":["this"],"repeatedly apply":["`(++)`,"],"repeatedly fall":["into"],"repeatedly... there":["is"],"repeating `c`":["on"],"repeating `classify`":["over"],"repeating `isNucleotide`":["so"],"repeating code.":["I"],"repeating myself":["in"],"repeating nearly":["the"],"repeating the":["string","function","same"],"repeating yourself":["a"],"repetition in":["`s","`*"],"repetition of":["`yearOn"],"repetition too.":["I"],"repetition with":["the","`sort"],"repetition you'd":["really"],"repetition, also":["you"],"repetition, but":["this","boring"],"repetition, which":["you"],"repetition. Here's":["mine:"],"repetition... see":["iteration"],"repetitions), but":["that"],"repetitive and":["easier"],"repetitive string":["fragments."],"rephrase `yelling`":["as"],"replace 'T'":["with","=","="],"replace ::":["Char"],"replace =":["id"],"replace `(\\s":["-&gt;"],"replace `(\\w":["-&gt;","-&gt;"],"replace `(\\x":["-&gt;","-&gt;","-\u003e"],"replace `(all":["isUpper"],"replace `(id":["&amp;&amp;&amp;"],"replace `2*acc`":["with"],"replace `fromList":["[]`"],"replace `isAlpha`":["and"],"replace `isSpace`":["with"],"replace `modifyMVar_":["(\\_"],"replace `safeLast`":["with"],"replace `toEnum":["w`"],"replace a":["variable"],"replace all":["this","`\"T\"`"],"replace an":["element"],"replace any":["`atomically"],"replace anything":["of"],"replace c":["="],"replace concatenation":["with"],"replace fuction":["in"],"replace function,":["which"],"replace happens":["which"],"replace is":["a"],"replace isn't":["subject"],"replace it":["with","with","with"],"replace nuc":["="],"replace seems":["redundant"],"replace text":["did"],"replace that.":["Most"],"replace the":["filter","guards","```filter```","`map`","C,","`foldl`","gigasecond-to-day","guard","arithmetic"],"replace them":["with"],"replace those":["with"],"replace together.":["Looks"],"replace truly":["did"],"replace with":["```((,1))```"],"replace your":["countOne"],"replace zipping":["with"],"replace:: Char":["-\u003e"],"replacePunctuation (then":["you"],"replaceThymine $":["n)"],"replaceThymine as":["a"],"replaceThymine n":["="],"replaceThymine x":["="],"replace`, and":["I"],"replaced by":["```(==)```.","a","a","List","putMVar","insertWith."],"replaced it":["with"],"replaced with":["standard","a","a"],"replacement for":["`last`,","`words"],"replacement instead":["of"],"replacement, the":["difference"],"replaces non-alphanumeric":["characters"],"replaces the":["guards"],"replacing `(not":["."],"replacing `any":["isUpper"],"replacing a":["Map"],"replacing all":["occurrences"],"replacing chars":["and"],"replacing occurrence":["of"],"replacing thymidine":["with"],"replicate 0":["whatever`"],"replicateM 20":["(incrementProc"],"replicateM n":["$","$"],"reply to":["anything"],"repo. I'm":["not"],"repositories etc":["*oops*"],"repositories via":["apt-get"],"represent 1":["and"],"represent Nucleotide":["as"],"represent a":["module","question","letter,"],"represent all":["of"],"represent an":["empty"],"represent answers":["looks"],"represent invalid":["char,"],"represent some":["useful"],"represent such":["associations"],"represent the":["students,","type","null-ish","same"],"represent what":["it"],"represent. Likewise,":["`unify`"],"representation Vector":["instead"],"representation but":["either"],"representation for":["sorted"],"representation is":["the"],"representation isn't":["relevant"],"representation of":["whatever","the","the","the","the","any","the"],"representation than":["a"],"representation to":["escape"],"representation will":["lead","do."],"representation, and":["reads"],"representation, then":["the"],"representation, this":["just"],"representation. This":["includes"],"representation? `a":["-\u003e"],"represented as":["something"],"represented by":["the"],"representing the":["data"],"represents \"shouting\",":["for"],"represents code":["that"],"represents is":["typically"],"represents several":["steps"],"reproduce in":["ghc-7.6,"],"request from":["me"],"request or":["should"],"request, it":["looks"],"requests are":["appreciated:"],"requests would":["be"],"require 2-3":["checks"],"require Hashable":["instead"],"require IO":["api,"],"require a":["single"],"require additional":["constraint"],"require another":["import,","generator"],"require computing":["a"],"require enabling":["`{-#"],"require explicit":["testing,"],"require full":["list"],"require it":["and"],"require it,":["you"],"require it.":["According"],"require larger":["names,"],"require lists":["or"],"require non-tailsafe":["recursion,"],"require operator":["precedence"],"require people":["to"],"require readers":["to"],"require recursion":["on"],"require short":["variable"],"require slightly":["more"],"require some":["improvements"],"require sorting":["over"],"require stack":["space"],"require such":["constraint."],"require the":["IO","trailing","use","boilerplate"],"require this,":["I"],"require to":["use"],"require transaction":["because"],"require two":["functions","traversals"],"require type":["to"],"require up":["to"],"require value,":["but"],"require wrapping":["the"],"require you":["to"],"require your":["reader"],"require zipping":["each"],"required 'and'":["but"],"required another":["newline"],"required around":["`flip"],"required but":["was"],"required by":["the","the","the","```endsWith```","your","any"],"required due":["to"],"required flips":["seem"],"required in":["this"],"required incidentally,":["though,"],"required is":["constant","constant.","to","constant","constant","constant.","because"],"required number":["of"],"required of":["course,"],"required only":["in"],"required to":["do","return","use"],"required) if":["you"],"required, or":["should"],"required, then,":["so"],"required, this":["will","is"],"required. I":["ask"],"requirement embedded":["within"],"requirement of":["using"],"requirements and":["I"],"requirements in":["the"],"requirements like":["code"],"requires \"banana\"":["to"],"requires *one*":["call"],"requires 25":["comparisons"],"requires `Ord`":["property"],"requires `verse`":["when"],"requires a":["call"],"requires an":["entire"],"requires completely":["traversing"],"requires enabling":["`{-#","`{-#"],"requires explicit":["recursion."],"requires first":["generating"],"requires introducing":["a"],"requires it.":["That's"],"requires knowing":["what","the","a"],"requires no":["more"],"requires only":["a"],"requires sorting":["the"],"requires strings":["anyways."],"requires that":["you"],"requires the":["`errors`","entire","IO","spine","string"],"requires two":["passes"],"requires walking":["the"],"requires writing":["it"],"requires you":["to"],"requires {-#":["LANGUAGE"],"requires. How":["about"],"requiring a":["second","source"],"requiring building":["a"],"requiring the":["Eq"],"requiring two":["arguments."],"res`, short-circuiting":["the"],"research to":["discover"],"resembles the":["second"],"resend latest":["version.."],"reserved for":["variable"],"reset one,":["that"],"reset the":["counter…"],"resetName ::":["Robot","Robot","Robot"],"resetName =":["(generateName","undefined"],"resetName and":["mkRobot"],"resetName function":["does"],"resetName to":["modify"],"resetName was":["being"],"resetRobot x":["--"],"reshape? Seems":["tests"],"reshuffled the":["order"],"resisted putting":["them"],"resolve an":["expected"],"resolve this":["issue?"],"resolving ```filter":["(isAnagram"],"resort to":["strict"],"resort, especially":["if"],"resorting to":["a"],"resource I've":["found","found"],"resource for":["finding"],"resource on":["russian.."],"resource or":["something"],"resource that":["explains"],"resources n!(n-m)!/m!":["?"],"respect to":["omitting","readability","the"],"respect your":["attempt"],"respect, my":["tradeoff"],"respective data":["declarations."],"respective nucleotides,":["and"],"respectively they":["will"],"respectively) to":["a"],"respectively. Looks":["good"],"respectively. Value-strict":["is"],"respond, and":["if"],"responded yesterday..":["the"],"response !!":["2"],"response -":["so"],"response for":["it.","the"],"response is":["appreciated.","silly.","used"],"response should":["be"],"response string.":["The"],"response to":["a","that","the","the","the"],"response was":["third"],"response! I'll":["check"],"response, not":["the"],"response, rather":["than"],"response, which":["is"],"response, you":["would"],"response. In":["this"],"response. This":["looks"],"responseFor \"":["\""],"responseFor \"\\n\\r":["\\t\\v\\xA0\\x2002\""],"responseFor ::":["String","String","String","String"],"responseFor =":["foo","messageResponse"],"responseFor and":["explicitly"],"responseFor as":["one"],"responseFor at":["the"],"responseFor from":["the","your"],"responseFor function":["instead","itself","and","instead","that","-","much"],"responseFor is":["that","properly"],"responseFor must":["be"],"responseFor s":["="],"responseFor seem":["arbitrary."],"responseFor to":["verify"],"responseFor works":["for"],"responseFor x":["|","|"],"responseFor's definition,":["and"],"responseFor, I'd":["get"],"responseFor, and":["only"],"responseFor, e.g.":["`module"],"responseFor, or":["if"],"responseFor, the":["other"],"responseFor. It":["might"],"responseFor. Not":["sure"],"responseFor. Then":["I"],"responseFor. This":["way"],"responseFor`. That":["way"],"responses instead":["of"],"responses is":["to"],"responses, so":["that"],"responses. Everyone":["else"],"responsibilities clearer":["in"],"responsible for":["sanitization,"],"rest as":["possible,"],"rest being":["the"],"rest from":["Ruby"],"rest is":["really","fine."],"rest looks":["good."],"rest of":["the","it","this,","the","this","this","the","it.","the","the","the","the","the","the"],"rest' =":["dropWhile"],"rest' is":["defined"],"rest'` is":["very"],"rest) =":["splitAt","span"],"rest)` causes":["an"],"rest)`) by":["using"],"rest, depending":["on"],"rest, you":["can"],"rest` clause.":["Normally"],"restarts one":["of"],"restate `rows`":["as"],"restate it":["so"],"restate slices/consecutives,":["but"],"restatement of":["`maybeInsert`"],"restrict (specialize)":["`b`,"],"restrict the":["`Map`","transformer"],"restrict type":["to"],"restrict you":["from","from"],"restrict yourself":["to"],"restricted sort":["of"],"restricted to":["(Map),","*only*"],"restricting it":["here."],"restricting their":["use"],"restriction is":["an"],"restriction on":["values"],"restriction\" error":["message."],"restrictive manner...":["that's"],"restructuring (`:(toRNA":["rest)`)"],"resubmitted my":["1st"],"result (when":["building"],"result -":["then"],"result and":["all","then"],"result as":["`foldl`","we"],"result at":["all"],"result back":["to"],"result clearer":["(after"],"result datatype":["because"],"result default":["type"],"result depending":["on"],"result for":["more","`allergies"],"result from":["the"],"result in":["an","more","a","slower","problems","As","Bs","the","a","grade"],"result into":["much"],"result is":["a","not","the","a","in","spine-strict.","lazy,","lazy","spine-strict","eventually","a","never","impossible","not","that"],"result list":["without"],"result list,":["of"],"result looks":["better."],"result more":["elegant"],"result of":["`S.sorted`.","grade","```sortedWordsSame```","both","`prep","feeding","the","reverse","that","rearranging","parsing","parsing","`reads`","a","a","`nucleotideCounts`","the","the","computation,","that","```group"],"result overflow":["was"],"result regardless":["of"],"result should":["rather","be","be"],"result substract":["corresponding"],"result such":["as"],"result that":["are"],"result thus":["you"],"result to":["the","evens","list","be"],"result value":["will","with"],"result wasn't":["that"],"result will":["have","be","be","have","be"],"result with":["fewer","a"],"result without":["reference"],"result you":["will","are","are"],"result you'll":["build"],"result) so":["it"],"result, I":["think"],"result, and":["then"],"result, even":["though"],"result, not":["the"],"result, substract":["that"],"result, that":["was"],"result. An":["anagram"],"result. Anyone":["got"],"result. Both":["have"],"result. Building":["a"],"result. It's":["presumed"],"result. Its":["nice"],"result. Put":["takes"],"result. Should":["be"],"result. This":["could"],"result. You":["can"],"result? Or":["do"],"resulted in":["the"],"resulting RNA":["strings"],"resulting gigantic":["expression."],"resulting in":["running","a","two"],"resulting list,":["but"],"resulting program,":["but"],"results and":["use","conditionals"],"results for":["e.g."],"results if":["given"],"results in":["only","suboptimal","one","an"],"results of":["computaion,","two"],"results that":["are","are"],"results using":["First"],"results were":["looking"],"results where":["you"],"results, by":["using"],"results, if":["the"],"results. But":["I"],"results](http://lpaste.net/7484140762804781056)) because":["`primeFactors`"],"retain some":["of"],"retained `rnaNucleotides`":["because"],"rethink the":["nucleotidesCounts"],"rethink them":["(in"],"rethought the":["implementation,"],"rethrow a":["custom"],"retraction to":["a"],"retrieve bad":["preconditions."],"retrieve the":["correct"],"retrieving grades":["or"],"retrospect, one":["part"],"retry from":["being"],"retry here,":["it's"],"retry is":["infinitesimal."],"return \"Fine.":["Be"],"return \"M\"`":["does","gets"],"return \"Whatever.\",":["not"],"return $":["Robot","Robot","Robot","f"],"return ()`.":["Also,"],"return (Robot":["n')"],"return (map":["toUpper"],"return .":["const","const","Robot","Robot`","foo`.","BankAccount","Robot","f`"],"return 1":["for","and"],"return =":["const"],"return Bool":["is"],"return Bool.":["\"validNumber\""],"return False":["if"],"return Nothing":["when"],"return Nothing)`":["with"],"return `\"Bob\"`'s":["plants."],"return `'T'`":["or"],"return `(String,":["String,"],"return `0..6`,":["not"],"return `Either":["String"],"return `Left":["error`,"],"return `Maybe":["Int`","Integer`"],"return `Nothing`":["although"],"return `Nothing`,":["but"],"return `True`":["for"],"return `[Maybe":["a]`"],"return `\\220ML\\196\\220TS`":["?"],"return a":["random","`(String,","string","random","Maybe","3-tuple","`Maybe","value","function","different","list","Bool","`(String,","bottom","different","value","new","list","new","String"],"return an":["`Either`","empty"],"return anything,":["but"],"return booleans,":["you"],"return either":["`Just"],"return false.":["You"],"return for":["non-characters,"],"return from":["function,"],"return function":["call"],"return in":["other"],"return is":["not"],"return k`":["or","works","certainly"],"return newbalance.":["You"],"return of":["the","the"],"return something":["different?"],"return sorted":["result"],"return the":["day","same","input","same","same","*right*","same","new","default.","`Right","application","whitespace."],"return those":["same"],"return to":["the"],"return type":["for","you're"],"return unsorted":["list"],"return value":["in","should"],"return what":["it"],"return x":["--"],"return) \"M\"`":["but"],"return, also":["it'd"],"return, like":["in"],"return. I":["refactored"],"return. I'm":["now"],"return. This":["lets"],"returned a":["different,"],"returned order":["should"],"returned to":["be"],"returned value":["from"],"returned, the":["Right/default"],"returning False":["-"],"returning `f":["x1:"],"returning a":["String","default","spine-strict","spine-lazy","spine-lazy","sorted"],"returning an":["Int,"],"returning are":["the"],"returning is":["so"],"returning results":["that"],"returning spine":["lazy","strict"],"returning the":["appropriate","result.","result.","new"],"returning whitespace/other":["values"],"returning), and":["the"],"returns Left":["\"empty"],"returns True":["for","so"],"returns True,":["and"],"returns `\"0000000000\"`.":["I"],"returns `(f":["x,"],"returns `False`":["for","anyway,"],"returns `True`":["for","for"],"returns `True`.":["Thus"],"returns `anaGramOfX`,":["which"],"returns a":["one","sorted","function","3-tuple","10","boolean\"","function","boolean\"","`Left","value","`Right","`Maybe","boolean"],"returns an":["evaluated"],"returns at":["the"],"returns both":["and"],"returns data":["as"],"returns either":["another"],"returns empty":["list"],"returns false":["on"],"returns false,":["which"],"returns immediately,":["so"],"returns its":["string"],"returns result":["to"],"returns the":["list","list","digits","mapping","character","`Left","sequence","correct","string","expected","position"],"returns true),":["to"],"returns whether":["one"],"reusable, you":["aren't"],"reuse `nucleotideCounts`":["in"],"reuse is":["good,","not"],"reuse the":["full","character","`s`","computations"],"reuse, modularity":["...etc."],"reuse. If":["this"],"reusing `count`,":["so"],"reusing the":["`StdGen`","`bottles`"],"rev 2":["and"],"reversal of":["the"],"reverse (e.g.":["using"],"reverse .":["stigid","drop"],"reverse =":["last"],"reverse ==":["last`"],"reverse [to..":["from]"],"reverse all":["the"],"reverse application":["operator.","between"],"reverse by":["a","switching"],"reverse composition":["operator"],"reverse depends":["on"],"reverse is":["easier","monolitic"],"reverse it's":["result"],"reverse list":["originally,"],"reverse looks":["ugly"],"reverse most":["of"],"reverse order":["to","then"],"reverse order,":["you","..."],"reverse the":["order","order"],"reverse usage,":["because"],"reverse with":["a"],"reverse\" I'd":["say"],"reverse)`. Guess,":["how"],"reverse, but":["I"],"reverse, use":["strict"],"reversed list":["and"],"reversed, so":["it"],"reverses. That's":["four"],"reversing a":["list"],"reversing the":["list","string","list","list"],"reverted back":["to"],"review e":["for"],"review it":["whenever"],"review my":["code.","code."],"review other":["solutions)"],"review this":["approach,"],"review. I":["didn't"],"review. Yeah,":["I"],"reviewers if":["I"],"reviewers should":["have"],"reviewers will":["advice"],"reviewing these":["tasks?"],"reviews ^^":["and"],"reviews and":["buses"],"reviews for":["this"],"reviews, @baylee":["and"],"reviews, @citlalli":["and"],"reviews, @isabelle":["and"],"reviews. (I":["was"],"revise after":["I've"],"revise this":["as"],"revised code,":["and","and"],"revised the":["cleanUpInput","code."],"revised, in":["my"],"revision #1":["(list","is"],"revision and":["let"],"revision because":["using"],"revision is":["much"],"revision not":["yet"],"revision which":["had"],"revision while":["you"],"revision, but":["using"],"revision, you":["can"],"revision. Fixed":["now."],"revision. Have":["a"],"revisions with":["it."],"revisit and":["optimize"],"revisit this":["one"],"revlist a":["b"],"reworked ```verse```":["using"],"reworked it,":["and"],"reworked, right":["now"],"rewrite Map":["building"],"rewrite RULE":["that"],"rewrite RULES":["in"],"rewrite ```validNucleotide```":["in"],"rewrite `anagramsFor`":["as"],"rewrite `evenlyDivisible`":["as"],"rewrite `incrementBalance`":["without"],"rewrite `numerals`":["without"],"rewrite `toRNA`":["in"],"rewrite `zip":["(f"],"rewrite all":["saturated","saturated","list"],"rewrite allCaps":["and"],"rewrite an":["existing"],"rewrite anagramsFor":["in"],"rewrite code":["in","in","in"],"rewrite it":["that","without","using","as","but","to","simply","in","better:"],"rewrite line":["19"],"rewrite suggestions":["(e.g."],"rewrite that":["function","uses"],"rewrite the":["last","above"],"rewrite them":["before"],"rewrite this":["using","function"],"rewrite this.":["Thanks"],"rewrite whole":["thing"],"rewrites and":["make"],"rewrites the":["foldr/mapFB","foldr/mapFB"],"rewriting `f`":["in"],"rewriting `isAnagramOf`":["in"],"rewriting as":["a"],"rewriting it":["to","using"],"rewriting sign":["in"],"rewriting sing":["w/o"],"rewriting system.":["http://www.haskell.org/haskellwiki/Short_cut_fusion"],"rewriting technique":["that"],"rewriting the":["condition"],"rewriting this":["to"],"rewriting your":["first"],"rewritten ```anagramsFor```":["using"],"rewritten ```capitalize```":["using"],"rewritten ```validate```":["using"],"rewritten ```wordCount```":["utilising","using"],"rewritten `a":["$"],"rewritten as":["`second","just","`a`.","simply:"],"rewritten it":["using"],"rewritten the":["code"],"rewritten to":["`all","perform"],"rewritten using":["`any","`Data.Function.on`"],"rewritten without":["the"],"rewrote Haskell's":["built-in"],"rewrote almost":["everything"],"rewrote the":["function"],"rewrote this":["using"],"rewrote your":["whole"],"rhs letters":["are"],"rhs of":["the"],"rhymes with":["verse"],"richer functionality":["where"],"richer type":["signature)."],"rid of":["it.","variables","the","the","the","the","the","that","`reverse`","the","one","the","any","some","a","`keyword`","it?","mapFunc","the","the","the","the","the","`dropNullStrings`","the","a","the","the","that","hasLetters.","some","that","all","about","the","the","parentheses.","the","the","the","the","a","the","both","trim","the","that","it","that","repetitive","show.","the","`foldl'`","an","some","the","a","most","all","your","the","it.","a","some","the","reverse"],"rid of,":["but"],"rid the":["need"],"ridiculous in":["any"],"ridiculous point-free":["style"],"ridiculous) idea":["of"],"ridiculously slow":["on"],"right (consider":["what"],"right (that":["just"],"right :)":["still,"],"right BangPatterns":["or"],"right ``":["(\"?\""],"right about":["the","the","skipping","the","factoring","the"],"right above":["it","the"],"right after":["the","the"],"right and":["left","evaluate","left","guaranteed"],"right approach":["as"],"right approach.":["Out","The"],"right asymptotic":["performance.","performance,","performance,","complexity,"],"right binary":["function"],"right choice":["here"],"right data":["structure,"],"right decision!":["Running"],"right decisions.":["In"],"right direction":["and"],"right file":["!"],"right fold":["is","to","is","to","due","could","to"],"right fold,":["as"],"right fold.":["If"],"right folding":["based"],"right folds":["if","to"],"right format.":["E.g."],"right from":["the"],"right function":["to"],"right given":["the"],"right goal,":["there"],"right hand":["side.","side?","side"],"right here":["on"],"right idea":["in"],"right idea,":["`fromListWith`"],"right implementation":["you"],"right in":["thinking","assuming","`fromList`."],"right is":["empty,"],"right kind":["of"],"right monad":["but"],"right name":["for"],"right next":["to"],"right now":["you","involves","but","you're","for"],"right now\"...":["blinding"],"right now)":["would"],"right now):":["`[1..3]"],"right now,":["but"],"right of":["the","both"],"right one.":["Consider","Perhaps"],"right or":["starting"],"right part":["of"],"right pattern,":["but"],"right place":["appears"],"right places.":["Note"],"right quantity":["of"],"right side":["of","still","you","has","of","of","of","of","of","of","of","of","of","of"],"right that":["it","`foldl`","it","it's","using","it's","as","`any`","this","it","you","using","more","this","you"],"right there,":["and"],"right thing":["there.","to","to","for","to","regardless","is","on"],"right thing,":["not","but"],"right thing.":["Looks"],"right though,":["it's"],"right time":["to"],"right times.":["Data.Map's"],"right to":["me","figuring","left","left,","me.","left\"","me.","left","left\""],"right track":["to","here."],"right track?":["sorry"],"right type":["so"],"right way":["is","is","to","is","is","is","is","to","to","to"],"right way,":["changing","but","but"],"right will":["make"],"right with":["\"fromListWith\".","you"],"right without":["any"],"right your":["solution"],"right). In":["fact"],"right, I":["agree","didn't","was","didn't","meant"],"right, I'll":["redo"],"right, I've":["completely"],"right, Show":["instances"],"right, better":["to"],"right, but":["the"],"right, forgot":["about"],"right, good":["point."],"right, if":["this"],"right, it":["should"],"right, it's":["a","ugly."],"right, of":["course","course."],"right, say":["I"],"right, thank":["you"],"right, that":["is"],"right, the":["abstraction","indentation","tests"],"right, this":["is"],"right, will":["wait"],"right, you":["could"],"right-associative just":["like"],"right-hand-side expressions":["refers"],"right. Don't":["know"],"right. Fixed,":["thanks."],"right. I":["didn't","don't","had","made","somehow","tried","started","was","didn't"],"right. I'll":["try"],"right. Map":["lookup"],"right. Seems":["that"],"right. Using":["a"],"right. You":["could"],"right. i":["shouldn't"],"right. the":["`responseFor`"],"right? Do":["you"],"right? I":["don't"],"right? Or":["am"],"right?) less":["tedious"],"righthand side":["of"],"rightmost digit":["(which"],"rightmost digit,":["and"],"right–```isCapitalIfLetter``` sounds":["a"],"right–a very":["nice"],"rip it":["out."],"ripped the":["custom"],"risk confusing":["people"],"risk in":["the"],"risk of":["bad","name"],"rm)` in":["one"],"rmPunc. toMap":["looks"],"rnf (Robot":["b"],"road of":["the"],"robot a":["random"],"robot always":["has","(should)"],"robot has":["a"],"robot instead":["of"],"robot is":["pure,"],"robot names":["before"],"robot names.":["Did"],"robot on":["each","each"],"robot structure,":["there"],"robot will":["always"],"robot you":["may"],"robot, but":["it"],"robot-name exercise.":["I"],"robot-name seems":["harder"],"robot-name. The":["README"],"robot. In":["order"],"robotName ::":["Robot","Robot","Robot","Robot"],"robotName =":["undefined"],"robotName function":["and"],"robotName. Otherwise,":["I"],"robotNamePattern ::":["[CharPattern]","[(Char,"],"robotNamePattern =":["[C,","[c,"],"robots come":["off"],"robots, I":["can"],"robots, but":["it"],"robust (in":["other"],"robust IORef":["(with"],"robust and":["extensible.","(hopefully)"],"robust even":["though"],"robust solution":["would"],"robust way":["to"],"robust, please":["let"],"robustness and":["all,"],"role and":["scope"],"role is":["more","more"],"roll \"":["of"],"roll my":["own"],"roll the":["dice."],"roll update":["with"],"roll-your-own, but":["have"],"rolled back":["to"],"rolling your":["own.","own."],"rolls better":["off"],"roman in":["one"],"roman numeral":["list","in","no","is","values"],"roman numerals":["even"],"roman numerals,":["and"],"room for":["optimization.","another","ambiguity"],"room to":["make"],"root algorithm":["in"],"root of":["n","the"],"roster doesn't":["require"],"rotation with":["`fromEnum`"],"roughly `insert":["k1"],"roughly the":["same"],"round --":["math"],"round it":["with"],"round to":["upper"],"round you":["have"],"round`? The":["documentation"],"rounding and/or":["the"],"rounding to":["nearest"],"route then":["any"],"route? I":["had"],"routes to":["do..."],"routines like":["that."],"row !!":["1]`..."],"row `n`":["you'll"],"row major":["vs."],"row should":["have"],"row then":["by"],"row with":["`scanl`."],"row without":["calculating"],"row-major matrix":["for"],"rows !!":["1]`"],"rows ::":["[Vector"],"rows =":["splitOn"],"rows and":["cols"],"rows of":["plants).","different"],"rows or":["columns.","columns"],"rows using":["binomial"],"rows. However,":["I"],"rsslldnphy\u003c/b\u003e: Well,":["you"],"ruin this":["exercise."],"rule applies.":["GHCI"],"rule for":["type","this"],"rule in":["the"],"rule is":["determined","that","to","never","to","the","to"],"rule of":["thumb","thumb","thumb","thumb","thumb","thumb:","thumb","thumb"],"rule often":["turns"],"rule optimises":["compositions","compositions"],"rule out":["the"],"rule outlined":["by"],"rule that":["can"],"rule to":["use","know.","remember"],"rule will":["hold"],"rule, inline":["build,","build,"],"rule, one":["should"],"rule, such":["as"],"rule, then":["cleanUpInput"],"rule, which":["rewrites","rewrites"],"rule-of-thumb, although":["not"],"rule: `(n;":["k+1)"],"rule: function":["application"],"rule: use":["text"],"ruled out":["`sort`"],"rules against":["only"],"rules and":["the"],"rules are":["things","context","pretty"],"rules aren't":["both","both"],"rules as":["an"],"rules can":["be"],"rules for":["that?","map","map"],"rules in":["responseFor","it"],"rules into":["appropriately-named"],"rules of":["Roman","thumb"],"rules on":["my"],"rules overlap.":["Other"],"rules that":["may"],"rules there":["are"],"rules to":["some","follow"],"rules! Memorization":["always"],"rules, as":["I'm"],"rules, that's":["why"],"rules. Hence":["the","the"],"rules. In":["this"],"rules] (http://www.hasbro.com/scrabble/en_US/scoringRules.cfm)":["is"],"run ':t":["(\\x"],"run (e.g.":["it's"],"run (such":["as"],"run STM":["transaction"],"run `:set":["-Wall`"],"run ```last":["\"\"```"],"run ```wordCount```":["on"],"run `filter":["isAlphaNum`"],"run `hlint`":["over"],"run a":["lot"],"run action":["(sequence"],"run again":["if"],"run all":["guards"],"run concurrent":["code."],"run faster":["in"],"run fine":["on"],"run ghc":["with"],"run in":["~N","tiny","IO,","near"],"run inner":["filter","filter"],"run into":["a"],"run into,":["so"],"run it).":["It's"],"run it,":["you'll","so"],"run my":["submissions"],"run on":["larger"],"run once":["inside"],"run once,":["as"],"run only":["once","once."],"run out":["of","of","of","of","of","of","of","of"],"run plain":["old"],"run ridiculously":["slow"],"run tests,":["not"],"run that":["through"],"run the":["test","tests,","computation","tests","`addends`"],"run this":["time!","on"],"run through":["the"],"run twice?":["In"],"run until":["the"],"run when":["bank","outer"],"run with":["`-XTupleSections`?"],"run without":["optimizations,"],"run wordCount":["on"],"run your":["code"],"run. If":["you"],"runEitherT $":["do"],"runIdentity .":["runEitherT"],"runghc 7.6.2":["and"],"runhaskell -Wall":["bob_test.hs"],"runhaskell command":["as"],"running at":["the"],"running compiled":["code"],"running rmPunc.":["toMap"],"running tests":["on"],"running the":["HUnit","regex"],"running through":["the"],"running time":["as","of","of","should","wasn't"],"running with":["`-Wall`"],"running, which":["fails,"],"running: ```anagramsFor":["\"bob\""],"runs a":["lot"],"runs in":["O(n),","O(n^2)","constant"],"runs it":["will"],"runs or":["not"],"runs until":["it"],"runs your":["program"],"runtime (even":["in"],"runtime cost":["in","between"],"runtime cost,":["it's","because"],"runtime cost.":["The","It's","Since"],"runtime due":["to"],"runtime efficiency":["for"],"runtime either":["way."],"runtime error":["if"],"runtime of":["the"],"runtime overhead":["of"],"runtime). The":["way"],"runtime, using":["in"],"runtime. This":["is"],"russian.. don't":["know"],"s (repeat":["1)"],"s )":["as"],"s -":["n"],"s .":["nucleotideCount"],"s /":["case","31..600"],"s 4":["times"],"s =":["either","iterateUntil","concat","go","Silence","\"foo\\n\\","template_1","ageOn","filter","filter","....","....","filter","M.findWithDefault","Map.unionWith","guard","s"],"s =&gt;":["WordCount"],"s ==":["s`","s`","s","'?'","'?'`,"],"s =~":["\"^[[:space:]]*$\"","\"[a-z]\"","\"\\\\?$\""],"s \\`isAnagramOf\\`":["str)"],"s and":["f","x."],"s else":["Nothing`","\"\")"],"s in":["if"],"s ocrmap)`":["is"],"s will":["be","be"],"s |":["shouting"],"s ||":["all"],"s' /=":["x"],"s' =":["lowerCase"],"s'' =":["dropWhile","sort"],"s'' ==":["sort"],"s'') =":["break"],"s') =":["break"],"s'...` and":["just"],"s) &&":["(sort"],"s) &amp;&amp;":["any"],"s) -\u003e":["if"],"s) .":["prepare)`"],"s) \u003c-":["table,"],"s) =":["Sch"],"s) \u003e\u003e":["Just"],"s) allergens`":["to"],"s) would":["be"],"s) |":["(cs,"],"s))` as":["`map"],"s)` as":["`last"],"s)` is":["sufficient,","probably"],"s)` represents":["\"shouting\","],"s)` since":["the"],"s)`, which":["is"],"s)`. However,":["you"],"s)`. It's":["confusing"],"s)``` is":["faster"],"s1 =":["\\s2"],"s1 s2`.":["(Get"],"s1' =":["sort"],"s1' ==":["sort","sort"],"s1'` might":["be"],"s1)` is":["computed"],"s1` and":["`sort"],"s1` in":["its"],"s2` should":["also"],"s2`. (Get":["the"],"s]` is":["another"],"s` and":["use","`last"],"s` are":["redundant,","superfluous,","superfluous,","superfluous.."],"s` check":["in"],"s` could":["be"],"s` for":["every"],"s` guard":["and"],"s` in":["a","the","terms","`wall`"],"s` inside":["the"],"s` is":["computed","curried,","evaluated","usually"],"s` isn't":["needed,"],"s` or":["the"],"s` than":["you"],"s` was":["null"],"s` with":["`any`"],"s`, not":["`prep"],"s`. But":["it's"],"s`. It":["doesn't"],"s`? (Maybe":["the"],"s``` does":["not"],"s``` is":["redundant."],"sa) =":["f"],"sacrificing expresiveness.":["I"],"saddle-points (Monoid)":["have"],"sadly (see":["Iteration"],"safe (the":["syntax"],"safe -":["arguably"],"safe as":["your"],"safe functions":["you"],"safe in":["my","general.","this"],"safe on":["empty"],"safe or":["rewriting"],"safe to":["treat","use","replace"],"safe total":["function"],"safe use":["of)"],"safe versions":["of"],"safe, but":["it's","maybe"],"safe, though":["I"],"safe. In":["this"],"safely assume":["quite"],"safely remove":["the"],"safely run":["the"],"safely, but":["I"],"safely, without":["having"],"safer option":["could"],"safest ones":["to"],"safety (at":["runtime)."],"safety now,":["why"],"safety, but":["you"],"said \"I":["normally"],"said \"eta-reduction\"?":["I"],"said **That":["said,"],"said avoid":["them,"],"said in":["the"],"said it":["first,"],"said it's":["a"],"said principle":["(IMHO)."],"said that,":["I"],"said there":["would"],"said this,":["sorry."],"said, I":["don't"],"said, I'm":["sure"],"said, a":["`where`"],"said, and":["stuck"],"said, for":["this"],"said, given":["the","the"],"said, if":["you"],"said, in":["this"],"said, it":["probably","is"],"said, it's":["well","well","a","probably"],"said, just":["means"],"said, nothing":["wrong"],"said, plus":["the"],"said, the":["Monad"],"said, there":["are"],"said, there's":["no","a","nothing"],"said, they're":["very"],"said, this":["is","pattern"],"said, you":["can","can","can","can"],"said. Boy":["does"],"said. Unfortunately,":["I"],"saidNothing rather":["than"],"sake (":["I"],"sake I":["left"],"sake defined":["predicates"],"sake of":["speculated","readability,","learning","clarity","\"not"],"sake, please":["ignore."],"sake, you":["might"],"same (Hint:":["it"],"same (after":["changing"],"same (except":["for"],"same (they":["just","both"],"same API":["and"],"same Map":["value"],"same Monad":["(e.g."],"same PRNG":["state"],"same [core](http://hackage.haskell.org/package/ghc-core)":["using"],"same `Data.List.last`":["function"],"same `where`":["as"],"same `y1":["-"],"same account,":["I"],"same algorithm,":["otherwise"],"same algorithmic":["complexity"],"same amount":["of","of","of","of"],"same answer":["in"],"same applies":["to"],"same approach":["as"],"same argument":["being"],"same as":["```(==)","mine.","you","catMaybes","`flip","`otherwise`","the","Char.","`[Char]`","`unlines","`toBit`","word,","`not","`howMany","`foo","`foldr`)","`foldr`)","`map`","my","Bob","`Data.Map`","`reverse","`(:","`insert`","`(a,","the","`a","```all","`fmap","`[1..3]","`[1..3]","`bar","`expression`.","`fmap","this,","`'?':[]`,","the","left","how","README","`not","isAlphaNum,","`unlines`","the","`any","your","line","`foldr","String.","```(-x)"],"same asymptotically,":["since"],"same block":["and","and"],"same boat,":["@brielle."],"same but":["`fromListWith`","handle"],"same characters":["multiple"],"same characters.":["However,"],"same clause":["before","syntax.","of"],"same code":["put","but"],"same code,":["but"],"same column":["(typically","(typically","(typically"],"same complexity":["but"],"same data":["type,","type","type","type"],"same data,":["so"],"same difficulty.":["My"],"same effect":["as","as"],"same equation":["N-1"],"same every":["time?"],"same exact":["place"],"same except":["strict,"],"same expression":["without"],"same feedback":["on","after"],"same form":["as"],"same function":["to"],"same function.":["You","They"],"same functionality":["and"],"same functionality.":["If"],"same goal,":["without"],"same grade":["have"],"same guard":["as"],"same hints":["I"],"same implementation":["as"],"same implementations":["of","of"],"same issue":["happens"],"same iteration.":["Is"],"same just":["using"],"same key.":["Let"],"same letter":["twice"],"same level":["of","of","as","of"],"same level,":["however"],"same line":["as","or"],"same line,":["but","but"],"same lines":["is"],"same lines,":["you"],"same logic,":["but"],"same look":["for"],"same manner":["as"],"same module.":["You"],"same name":["may","twice)","without"],"same name.":["However"],"same naming":["convention"],"same number":["of","of","of","of"],"same on":["the"],"same one":["liner"],"same operation":["on"],"same order":["as"],"same output":["for"],"same package":["to"],"same pattern":["is","is","is"],"same pattern,":["can"],"same person.":["(Not"],"same point":["as"],"same point-free":["transformation"],"same predicate,":["but"],"same principle.":["STM"],"same problem":["so"],"same problem,":["except"],"same problems":["that","as"],"same problems!":["I"],"same reason":["that","why","you","`product","(in","(thunks"],"same reason,":["it"],"same reasoning,":["`not"],"same reasons":["as"],"same result":["with","as","regardless"],"same result.":["An","Its"],"same seed":["so"],"same set":["of"],"same signature":["for"],"same solution":["I"],"same speed":["really"],"same strategy":["from"],"same string":["that"],"same structure":["as","but","as","but"],"same structure,":["but"],"same stuff":["regardless"],"same style":["with","as"],"same suffix(?)":["for"],"same task,":["and"],"same technique":["can","that"],"same thing":["(unless","without","in","as","as","as","as","with","as","as","with","your","that","as","in","without","for","in","as","(`String`","were","as","in","so","in","I","as","though,"],"same thing,":["but","but","since","but","but"],"same thing.":["I'm","Looks","See","This","Is","I"],"same thing..":["or"],"same time":["and","the","with","complexity"],"same time,":["because"],"same time.":["You","I'm","There"],"same trap":["again."],"same trick":["hidden"],"same tuple,":["line"],"same type":["as"],"same using":["left"],"same value":["multiple","if","and","`year`,"],"same value.":["Can"],"same values":["from"],"same variable":["in","in","names","as-is,","on"],"same way":["you","as","that","you","as","but","as"],"same with":["the","questions,","the"],"same without":["pattern"],"same word":["as","and"],"same wrapped":["value?"],"same you":["suggested,","may"],"same, but":["they","the","the","Data.Map","it","the","the","in","you"],"same, i.e.":["I"],"same, in":["the"],"same, only":["the"],"same, that":["will"],"same, the":["only"],"same. It's":["not"],"same. This":["looks"],"same. You":["could"],"sameLetters =":["(==)"],"sameSorting w'":["x)"],"sampled repeatedly...":["there"],"samples for":["`big`"],"sandbox feature":["to"],"sane input,":["the"],"sane pattern":["generation."],"sane than":["`((=="],"sanitation of":["input,"],"sanitization, and":["returns"],"sanitize c":["="],"sanitize digits":["="],"sanitize function":["is"],"sanitize isn't":["really"],"sanitize it":["in"],"sanitize the":["input"],"sanitize` (although":["you'd"],"sanitize` is":["very"],"sans arguments":["ensures"],"sans the":["relaxed"],"satisfied with":["the","line","the","the"],"satisfied with;":["thanks"],"satisfied without":["even"],"satisfies `n":["+"],"satisfies the":["condition:"],"satisfy that":["condition"],"satisfy the":["conditions","tests.","criteria","problem","condition.","test"],"satisfying working":["out"],"saturated applications":["of","of"],"save a":["line","few","bunch","lot"],"save an":["import."],"save quite":["a"],"save some":["computation.","repetition","space"],"save the":["StdGen"],"save throwing":["an"],"save you":["the","the","from","the","a","the","a","some","a","an","from","the","from","from","from","from"],"saved from":["an"],"saved me":["some"],"saves a":["couple"],"saves an":["import."],"saves me":["little,","anything),"],"saves the":["tuple"],"saves you":["the","tons","an","from"],"saving an":["Int."],"saving first":[":D"],"saving the":["name,"],"savings in":["this"],"saw `fromListWith`":["but"],"saw a":["solution"],"saw after":["`gg=G`"],"saw it":["before."],"saw only":["the"],"saw recently":["a"],"saw someone":["else's"],"saw that":["when"],"saw this,":["so"],"saw were":["cleaner,"],"say \"from":["right"],"say \"no":["more"],"say '++":["show"],"say 'if":["every"],"say (i":["did"],"say -":["over"],"say I":["find","agree","fully","can"],"say I'm":["thrilled"],"say Map":["for"],"say Python's":["list"],"say _a_":["standard"],"say `divisible":["4`"],"say `isShout":["xs"],"say `line_take":["s"],"say `otherwise":["="],"say `randomChar":["C"],"say a":["string","few"],"say about":["that."],"say anything":["about"],"say either":["way"],"say else":["for"],"say here!":["The"],"say here..":["myabe"],"say in":["general"],"say it":["as","out","gives","really"],"say it's":["more"],"say no":["to"],"say nothing":["about"],"say that":["Uracil","a","`silence`","\"any\"","it's","anything","n","I'm","this","`2^64-1`","`foldr`","it's","foldl","I"],"say the":["least."],"say this":["looks","exercise"],"say use":["`where`"],"say without":["knowing"],"say you":["have"],"say, I'll":["definitely"],"say, `PhoneNumber`":["was"],"say, `String`":["is"],"say, is":["there?"],"say, this":["takes"],"say, will":["have"],"say. You":["should"],"say...a million":["words."],"saying \"make":["it"],"saying `matrix":["of"],"saying about":["using"],"saying here":["is"],"saying it's":["a","more"],"saying now,":["and","and"],"saying that":["a","a","the"],"saying the":["code","number"],"saying you":["can"],"says \"I":["don't"],"says \"There":["are"],"says \"Treat":["invalid"],"says \"Whatever.\"":["when"],"says *all":["alpha"],"says `":["head"],"says `\":(":["?\"`"],"says `No":["instance"],"says `w":["/="],"says in":["the"],"says is":["\"read","\u003cpre\u003e9223372036854775808"],"says it":["is"],"says not":["to"],"says that":["transactions","you","you","the"],"says the":["same","input","following:"],"says there":["should"],"says to":["consider"],"scale per":["planet"],"scalene triangle":["exists."],"scan `ws'`":["once"],"scan s":["4"],"scan the":["code","string","strand","whole","string","list","ByteString),","list","input"],"scan. Overall,":["very"],"scan/unfold you":["use"],"scanned 3":["times),"],"scanned things":["more"],"scanning a":["long"],"scanning the":["list","input"],"scans if":["I"],"scared of":["`FlexibleInstances`"],"scary implementation":["since"],"scary term,":["eta"],"scenario (and":["you"],"scenario (defaults":["could"],"scenario is":["ensuring"],"scenario to":["use"],"scenario. It":["makes"],"scenario. Say":["you"],"scenarios when":["they","the"],"scenarios, IORef":["is"],"scenarios. For":["example"],"scene is":["the"],"scenes can":["be"],"scenes is":["cheating"],"scenes of":["something"],"sch clause).":["That"],"sch of`.":["I"],"sched weekday":["year"],"schedule, figure":["out"],"scheduleEnum *":["7"],"scheduleEnum weekdayEnum":["year"],"scheme 'Mk'":["is"],"scheme in":["a"],"scheme. It":["actually"],"school &":["traversed"],"school =":["school"],"school a":["`newtype`;"],"school first,":["then"],"school roster":["doesn't"],"school types":["are"],"schools are":["shown"],"sci-fi movie":["\"Star"],"scope (for":["example"],"scope (such":["as"],"scope `translate`":["under"],"scope and":["into","role","role"],"scope for":["aesthetic"],"scope in":["Haskell"],"scope is":["immediately","immediately"],"scope of":["`responseFor`,","what","`anagramsFor`.","the","this","this"],"scope on":["the"],"scope then":["you"],"scope. Haskell's":["non-strict"],"scoped `translate`":["as"],"scoped to":["the"],"scopes get":["away"],"scopes is":["not"],"scopes require":["larger"],"scoping it":["to"],"score I'll":["look"],"score a":["letter"],"score all":["98"],"score letter":["to"],"score map":["with"],"score of":["7","a","a","Z"],"score parts`":["means."],"score table":["with"],"score) \u003c-":["[(\"AEIOULNRST\","],"score) |":["(score,","(chars,"],"score, Data.Array":["might"],"scoreLetter ::":["Char"],"scoreLetter =":["(scoreTable"],"scoreLetter take":["constant"],"scoreMap =":["M.fromList"],"scoreTable ::":["Array"],"scoreTable =":["array"],"scoreVec =":["V.fromList"],"scoreWord ::":["String"],"scoreWord =":["sum"],"scores !":["toUpper"],"scores =":["array"],"scores as":["values?"],"scores first.":["Do"],"scores here":["are"],"scores instead":["be"],"scores like":["this:"],"scores. very":["neat."],"scores` you":["could"],"scoring 'Z'":["in"],"scoring Scrabble,":["where"],"scoring a":["letter"],"scoring lookups":["in"],"scoring that":["can"],"scrabble app":["that's"],"scrabble is":["doubled"],"scrabble word":["that"],"scrabble word,":["which"],"scratch, but":["it's"],"scratch. I'm":["not"],"screaming simpler,":["think"],"screw up,":["but"],"screw with":["me."],"script that":["generates"],"scripts, Roman":["numerals,"],"scroll horizontally":["to"],"search as":["per"],"search dependencies":["in"],"search for":["`(.)","it","functionality.","this"],"search in":["vector","the"],"search like":["that."],"search lists).":["It's"],"search much.":["Ex:"],"search space,":["and"],"search tree":["allow","without"],"search tree.":["The"],"search, you":["may"],"searched Hoogle":["by"],"searched that":["function"],"searching for":["Z","map","'['"],"searching hoogle":["and"],"searching once":["the"],"searching to":["do"],"sec vs":["~1"],"sec) when":["I"],"second (splitAt":["3)"],"second O(n*log(n))":["pass."],"second `filter`":["depends"],"second `filter`,":["resulting"],"second alternative":["looks"],"second argument":["of","of","to","is","to"],"second argument.":["I"],"second as":["the"],"second case":["(all-caps)","expression"],"second clause":["should","be","could"],"second condition":["is"],"second could":["be"],"second element":["of","of","of"],"second exercise":["in"],"second field,":["that"],"second function,":["so"],"second generator.":["You"],"second gist":["is","the"],"second gist?":["In"],"second guard":["a","could","there"],"second guard,":["and"],"second guard.":["The"],"second import":["makes"],"second interpretation.":["So"],"second is":["simpler.","that","`insertWith`,"],"second issue":["is"],"second iteraction":["i"],"second iteration":["the"],"second look":["to"],"second nitpick,":["I"],"second one":["is","is"],"second one,":["I'm","though"],"second order":["functions"],"second p1p2":["-"],"second parameter":["of"],"second part":["is","after","of","of"],"second pass":["of"],"second pattern":["for"],"second pattern,":["my"],"second pattern.":["To"],"second revision,":["but"],"second solution":["is"],"second space":["leak."],"second still":["remains."],"second strictness":["issue:","issue:"],"second thing":["in"],"second thought,":["let's"],"second thought...give":["me"],"second time,":["unqualified"],"second to":["figure"],"second)) =":["parts"],"second, I":["think"],"second, although":["simulate"],"second, amusingly":["I"],"second, one":["thing"],"second, unrelated":["function"],"second. As":["a"],"second. You'll":["need"],"secondCouplet]` and":["take"],"secondPart]` and":["then"],"seconds to":["mentally","run"],"secondsPerEarthYear` while":["keeping"],"secret-handshake you":["have"],"section `(,":["1)"],"section and":["change","it"],"section as":["long","an"],"section at":["the"],"section can":["make"],"section for":["this"],"section in":["Parallel","Parallel"],"section like":["so:"],"section notation":["to"],"section of":["Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","the","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Paralllel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel","Parallel"],"section on":["how"],"section syntax":["instead"],"section to":["write"],"section will":["be"],"section with":["infix"],"section, `(++\"":["of"],"section, but":["then"],"section, like":["this:"],"section, so":["you"],"section: use":["-XTupleSections"],"section](http://www.haskell.org/haskellwiki/Section_of_an_infix_operator) of":["`(=="],"sections as":["`(c==)`"],"sections, so":["thanks"],"see BS/B":["for"],"see I'm":["going"],"see Text":["and"],"see Youda":["condition"],"see `(repeat":["1)`"],"see `Data.List.Split`":["listed"],"see `L`":["and"],"see `Maybe":["(Int,"],"see `Revision":["6`"],"see `String`":["instead"],"see `[1,":["1..]`"],"see `\\w":["-\u003e"],"see `foldl'`":["here."],"see `if`":["expressions"],"see `not":["(null","(null"],"see `scoreLetter`":["and"],"see `where`":["inside"],"see `wordCount":["::"],"see a":["problem","linear","huge","small","lot","sum","thunk","way","problem","similar","problem","thunk"],"see all":["the","of","the"],"see also":["comment"],"see any":["problems","issues"],"see anything":["in","wrong","from","wrong","wrong","about"],"see anywhere,":["or"],"see at":["least"],"see both":["interpretations"],"see chr":["'z'"],"see code":["that","that"],"see descriptive":["variable/function"],"see doesn't":["use"],"see enough":["of"],"see everything":["here"],"see final":["expression"],"see followed":["in"],"see from":["my"],"see function":["is"],"see functions":["from","explicitly"],"see here":["that"],"see how":["to","to","things","to","there","this","I","GADTs","resetName","```words```","`chunksOf`","to","to","that","to","the","`meetupDay`","to","a","it","others","extracting","\"splitting","many","I","it","it's","to","many","this","you","I"],"see how,":["in"],"see http://hackage.haskell.org/package/containers-0.5.3.1/docs/src/Data-Map-Base.html#insert":["for"],"see http://hackage.haskell.org/package/containers/docs/Data-Sequence.html":["and"],"see if":["I","anyone","you","I","any","you","what","they","you","there's","a","the","this","you","they're","it's","you","there's","I","this","a","you","you","I"],"see in":["the"],"see indented":["like"],"see individual":["type"],"see introductory":["chapters"],"see is":["that","that"],"see isFoo":["rather"],"see it":["right","making","together","often,","done","at","touching","because"],"see iteration":["1"],"see just":["how"],"see liking":["this"],"see my":["comment"],"see myself":["needing"],"see no":["reason","possible","difference","benefit"],"see nothing":["that"],"see now":["that"],"see now.":["\"Write","So"],"see pretty":["often"],"see primes":["\u003e="],"see qualified":["imports"],"see replace":["is"],"see right":["away)"],"see signatures":["for"],"see some":["reviews","repetition","later"],"see spaces":["around"],"see that":["your","types","GHC","it","foldl","next","you","there","the","you","it's","`+`","identifier","none","I","the","it","that","when","wasn't"],"see the":["type","data","function","other","linear","light","ones","need","tail","errors","wildcard","difference,"],"see them":["for"],"see there":["are"],"see there's":["a","a"],"see things":["like"],"see this":["in","section","kind"],"see though":["how"],"see type":["signatures","signatures"],"see verse":["and"],"see warnings":["about"],"see what":["you","on","the","the","suggestions","it","you","typeclasses","version","an","instances","etrepeum","I","you","`ShowS`","the","you","you're","you're","the","I","looks","I","you","you"],"see what's":["available..."],"see when":["you"],"see where":["the","things"],"see whether":["i","you","the"],"see which":["you","style","looks"],"see why":["you","this"],"see you":["use","didn't","opened"],"see you've":["moved"],"see your":["point.","guard","comment"],"see, I":["must"],"see, in":["no"],"see, it":["expects"],"see, it's":["in"],"see, sorry,":["`insertWith`"],"see, thanks":["for"],"see, thanks.":["That"],"see, which":["you"],"see. I":["read"],"see. I'm":["not"],"see. So":["in","GHC"],"see. Thanks":["for"],"see. Where":["should"],"see. Yeah":["`choice`"],"see: `a":["-\u003e"],"seed and":["also)"],"seed so":["the"],"seed. Still,":["fun"],"seeing `fmap`":["on"],"seeing a":["top-level"],"seeing anything":["like"],"seeing dense":["blocks"],"seeing here":["is"],"seeing how":["to"],"seeing if":["it's"],"seeing it":["that"],"seeing qualified":["types"],"seeing what":["sticks"],"seeing whether":["you're"],"seem any":["of"],"seem arbitrary.":["Perhaps"],"seem as":["readable."],"seem at":["least"],"seem busy":["(though"],"seem clearer,":["IMO."],"seem correct":["to"],"seem excessive,":["but"],"seem like":["a","a","nice","a","folds"],"seem more":["complex"],"seem much":["need"],"seem quite":["worthwhile"],"seem really":["beneficial."],"seem subtly":["different:"],"seem superfluous,":["now."],"seem that":["elegant,"],"seem to":["break","say","be","be","make","have","always","work.","be","have","be","require","have","get","be","know","be","impact","enforce","be","be","be","make","suggest","be.","share","be","work).","do","make","know","understand","get","include","remember","add"],"seem too":["important"],"seem used,":["so"],"seem very":["specialized..."],"seem wise":["to"],"seemed a":["good"],"seemed as":["good"],"seemed elegant":["to"],"seemed equally":["clear,"],"seemed like":["it","leaving","it","an","to"],"seemed more":["direct","Haskelly."],"seemed really":["straightforward."],"seemed slightly":["preferable"],"seemed to":["be","me","be","think","think","specify","result","fit"],"seemed too":["basic."],"seemed way":["too"],"seemingly simple":["task."],"seemingly too":["specialized"],"seems `MVar`":["is"],"seems ```filterString```":["has"],"seems `sum`":["actually"],"seems a":["little","bit","bit","bit","bit","bit","bit","lot","little","bit"],"seems almost":["trivial;","similar"],"seems better":["and"],"seems common":["these"],"seems conceptually":["simple"],"seems counterintuitive":["to"],"seems easier":["to","to"],"seems explicitly":["imperative"],"seems fairly":["explicable,","concise"],"seems far":["superior."],"seems fine":["to","for"],"seems good":["to"],"seems harder":["than"],"seems immediately":["readable."],"seems it":["not"],"seems it's":["better"],"seems kind":["of"],"seems like":["it","everyone","it's","you","overkill","obfuscation","this","a","`convert`","some","the","an","it","a","a","a","a","a","such","it's","you","I"],"seems maybe":["not"],"seems more":["natural","complicated","readable","succinct","or","common","relevant","readable","packed","readable"],"seems natural,":["but"],"seems nice,":["but"],"seems no":["other"],"seems not":["optimal","more"],"seems odd":["that","that"],"seems overhead":["here"],"seems overly":["complicated."],"seems overwrought;":["specifically"],"seems pretty":["elegant","convoluted."],"seems quite":["interesting!","useful..."],"seems rather":["odd."],"seems reasonable":["that"],"seems redundant":["here,"],"seems redundant,":["it's"],"seems relatively":["simple"],"seems simpler":["than"],"seems somewhat":["inappropriate.","monolithic.","obscure"],"seems that":["I","you","I","ok","you","solution","it's","current","clauses"],"seems the":["intended","infix","second"],"seems there":["are"],"seems there's":["more"],"seems to":["be","be","work","do","clarify","specify","stick","be","be","have","imply","be","be","be","be","be","me","have","bring","have","work","work,","me","require","be","pass","make","be","be","be","be","be","make","be"],"seems trivial":["in"],"seems unusual":["to"],"seems way":["too","better"],"seems worthwhile.":["I'll"],"seems wrong,":["it","because"],"seems you":["left"],"seems. As":["it"],"seen (and":["did"],"seen Control.Arrow":["yet."],"seen `Dl`":["or"],"seen a":["bunch","few","contrary","warning"],"seen an":["interesting"],"seen both":["of"],"seen for":["Haskell's"],"seen ghc":["conplains."],"seen it":["yet,","for","both","in","before,","without","more"],"seen most":["often"],"seen no":["other"],"seen of":["this"],"seen one":["that"],"seen pattern":["matching"],"seen some":["nice"],"seen someone":["use"],"seen that":["the","before."],"seen the":["all","definition"],"seen this":["done","way"],"seen use":["isSpace"],"seen you":["use"],"seen, but":["for"],"seen, variables":["of"],"seen. Some":["people"],"seen` would":["be"],"seldom equals":["clarity."],"select a":["class","single"],"select first":["passing"],"select the":["characters"],"selected `Double`":["as"],"selected `foldr`":["because"],"selected few":["functions"],"selectively import":["the"],"selectively restricting":["their"],"self explanatory":["to"],"self explanatory.":["But"],"self-documenting this":["way."],"semantic Haskell's":["simple"],"semantic code,":["this"],"semantic differences":["too"],"semantic names,":["like"],"semantic names.":["You"],"semantic naming,":["so"],"semantic? You":["may"],"semantically `toList`":["is"],"semantically clearer,":["and"],"semantically equivalent":["though."],"semantically matches":["the"],"semantically meaningful":["as","to"],"semantics are":["more"],"semantics better,":["it"],"semantics by":["importing"],"semantics for":["the","positive"],"semantics here":["if"],"semantics is":["enough"],"semantics of":["the","Haskell's","guard","this"],"semantics when":["you"],"semantics work":["in","in"],"semantics, for":["example"],"semantics, in":["strict"],"semantics, it's":["just"],"semantics. Otherwise":["this"],"semantics. The":["alternative"],"semantics? Really":["there"],"semicolons... that's":["what"],"sence here":["as"],"sence, as":["it's"],"send event":["to"],"sense -":["thanks"],"sense and":["is"],"sense any":["more"],"sense as":["simply"],"sense because":["the"],"sense for":["me","your","the"],"sense given":["that","the"],"sense here.":["The"],"sense if":["the","you","you"],"sense if,":["say,"],"sense in":["`isSilence`","real","English,"],"sense just":["judging"],"sense now!":["Thanks"],"sense now,":["but"],"sense of":["`splitBy`","the","it"],"sense since":["the","you're"],"sense than":["Integer,"],"sense that":["the","it"],"sense then,":["or"],"sense there,":["and"],"sense to":["put","use","do","just","me","do","restrict","sing","me.","me.","me!","do","me.","lowercase","do","you?","use","make","have","need","bind"],"sense used":["as"],"sense when":["you're","you"],"sense, I'll":["modify"],"sense, because":["a"],"sense, but":["I","figured","to"],"sense, each":["Monad"],"sense, obviously.":["I"],"sense, or":["use"],"sense, please":["refer"],"sense, the":["choice"],"sense, you":["can"],"sense. \u003ccode\u003efromChar\u003c/code\u003e":["looks"],"sense. Also,":["I"],"sense. I":["tend","have"],"sense. I'll":["try"],"sense. Since":["they're"],"sensible definition":["of"],"sensible functional":["decomposition:"],"sensible input,":["so"],"sensible order.":["Clearly"],"sensible precaution":["I"],"sensible to":["discard","keep","me"],"sensible way":["to"],"sensible way,":["such"],"sensical names.":["`normalizeWord`"],"sent SMS":["messages.\""],"sent to":["understand"],"sentence ==":["\":)"],"sentence ends":["with"],"sentence might":["fit"],"sentence when":["talking"],"sentenceKind s":["|"],"sentinels. Something":["like"],"separate `orbital":["planet`"],"separate `transform":["::"],"separate a":["type"],"separate arguments,":["since"],"separate bindings":["for"],"separate case":["for"],"separate clauses":["of"],"separate concerns":["and"],"separate dots":["with"],"separate from":["the"],"separate function":["heads","type","defined"],"separate function,":["rather","it"],"separate function.":["Maybe"],"separate functions":["(internally","to"],"separate functions,":["but"],"separate functions.":["More"],"separate guards":["for"],"separate guards,":["e.g."],"separate issue":["is"],"separate line":["from","indented"],"separate line,":["in"],"separate line.":["Yay!"],"separate lines.":["I"],"separate lists":["of"],"separate module":["Foo.Errors."],"separate newline":["after"],"separate out":["the","the"],"separate parsing":["of"],"separate the":["conditions","silence","concerns","classification","parsing","clauses"],"separate transcribe":["function"],"separate variables":["is"],"separate vars":["or"],"separate where":["clauses."],"separate your":["classification"],"separate, but":["they"],"separated `insert`":["in"],"separated by":["only","newlines.","a","any"],"separated each":["of"],"separated into":["a"],"separated the":["classification"],"separately in":["specs"],"separately so":["it"],"separately to":["make"],"separately, although":["since"],"separately, making":["sure"],"separately, possibly":["by"],"separately, which":["is"],"separately. If":["you"],"separately. Take":["a"],"separates a":["function"],"separating implementation":["details"],"separating the":["classification","cases","`shout`","various"],"separating those":["cases,"],"separation of":["parts"],"separator and":["negate"],"separator should":["be,"],"separator, consider":["splitting"],"separator. You":["should"],"separator. You'd":["then"],"seperate functions":["but"],"seperate the":["check"],"seq (rnf":["b)"],"seq ab":["ab)`"],"seq f":["f"],"sequence [Just":["(+1),Just"],"sequence [anagramForS,":["notS]`"],"sequence [conditions]`*,":["but"],"sequence [randomRIO":["('A',"],"sequence `[Key]`":["when"],"sequence but":["it's"],"sequence for":["each"],"sequence four":["times"],"sequence from":["control.Monad"],"sequence it,":["something"],"sequence of":["exponents,"],"sequence once":["this"],"sequence with":["repeat"],"sequence you":["want"],"sequence, the":["'precedence'"],"sequence, you":["won't"],"sequence. Harder":["to"],"sequence` is":["going"],"sequences of":["functions","letters"],"sequences so":["they're"],"sequences that":["contain"],"sequences will":["be"],"sequences, you":["can"],"sequencing for":["Applicative"],"sequencing takes":["up"],"sequencing). Most":["of"],"sequencing. If":["you"],"sequential application":["(like"],"sequential consistency":["of"],"serialization is":["ghci,"],"serialization? I":["guess"],"series of":["nested","maps.","cascading","nested","nested","functions","functions,","function","nested"],"serious disadvantage,":["and"],"serious with":["Haskell,"],"serious worry":["is"],"seriously propose":["is"],"serve a":["useful"],"serve here?":["Is"],"serve in":["this"],"serve to":["group","make"],"servers are":["getting"],"serves as":["a"],"set \"yxx\"`,":["even"],"set 'A'":["to"],"set 'a'":["to"],"set actually":["wouldn't"],"set doesn't":["work"],"set for":["a"],"set intersection":["as"],"set it":["up"],"set k":["=","="],"set k)":["set"],"set location":["in"],"set me":["a"],"set of":["characters","all","characters","parentheses","\"\\n\\r","numbers","new","suggestions","4"],"set on":["using"],"set operations":["can"],"set simpler":["and"],"set up?":["It"],"set version":["looks"],"set will":["work"],"set won't":["tell"],"set) +":["1"],"set, it":["might"],"sets of":["letters"],"setting default":["counts"],"setting to":["show"],"setting up":["the"],"settings. The":["version"],"settings. This":["looks"],"setup cabal-sandbox,":["but"],"setup vim,":["and"],"setup, but":["I'll"],"several classes":["available,"],"several different":["functions.","ways."],"several explicit":["types"],"several lines":["or"],"several of":["the"],"several problems":["with"],"several small":["functions"],"several solutions":["that"],"several steps":["of"],"several times":["the","but"],"several times...":["My"],"severe performance":["implications"],"severe than":["just"],"sgerrand taught":["me"],"shadow `(++)`).":["I"],"shadow `name`":["in"],"shadow existing":["bindings"],"shadow the":["binding"],"shadow your":["first"],"shadowing `s`":["in"],"shadowing each":["other."],"shadowing names":["is"],"shadowing that":["binding,"],"shadowing variables":["inside"],"shadowing with":["-Wall"],"shadows `y`":["but"],"shadows an":["[existing"],"shadows it":["to"],"shadows the":["existing","existing","existing","top-level","existing","existing","existing","existing","parent"],"shame it's":["so"],"shame to":["lose"],"shape as":["test"],"share a":["bit"],"share computations":["in"],"share many":["similarities"],"share the":["same"],"share work":["if"],"shared between":["the","cases"],"shared for":["all"],"shared strings":["like"],"shared variable":["(S)."],"sharing `primes`":["between"],"sharing or":["persistence"],"sharing the":["same"],"shave 17":["lines"],"shift and":["pop"],"shift instruction":["for"],"shift it":["to"],"shift the":["result,"],"shift. My":["solution"],"shifting by":["one"],"shifting with":["arithmetic"],"shifting, consider":["what"],"ship with":["Haskell"],"ships with":["Haskell","Haskell","Haskell","Haskell"],"shoehorn everything":["into"],"shoehorn my":["string"],"shoot. This":["one"],"short &":["clear"],"short (one":["letter)"],"short and":["elegant","simple","you","efficient","simple","inconsistent"],"short as":["this","it"],"short circuits,":["it"],"short cut":["fusion"],"short example,":["I'm"],"short explanation":["on"],"short implementation":["with"],"short implementations":["out"],"short is":["nice"],"short it":["doesn't"],"short it's":["basically"],"short line":["with"],"short name":["like"],"short named":["where"],"short names":["for","such"],"short names,":["e.g."],"short one":["comparing"],"short piece":["of"],"short predicates":["are"],"short story":["is"],"short variable":["names","names"],"short words,":["and"],"short, but":["its"],"short, though":["-"],"short-circuit if":["it"],"short-circuiting behavior":["of"],"short-circuiting isn't":["relevant."],"short-circuiting the":["do"],"short-circuits and":["\"returns\""],"short-circuits at":["the"],"short-cut fusion":["(eliminate"],"short-hand for":["that,"],"short. Int":["would"],"short. This":["problem"],"shortcut for":["this?"],"shorten (so":["called"],"shorten `Data.Map.Map`":["to"],"shorten `isSilent`":["to"],"shorten it":["up"],"shorten things":["up","a"],"shorten this":["up"],"shorten your":["code"],"shorter (and":["constant),"],"shorter (e.g.":["using"],"shorter (no":["need","need"],"shorter (you":["won't"],"shorter `fromListWith":["(+)`"],"shorter `getName`":["without"],"shorter `remoeSilence":["="],"shorter although":["possibly"],"shorter and":["clearer.","more","eliminates","easier","faster","doesn't","more","it","get","spares","probably","faster","shorter...","clearer.","easier"],"shorter as":["just","`[Eggs..]`."],"shorter but":["I"],"shorter by":["using","having"],"shorter copy":["but"],"shorter for":["isYell,"],"shorter if":["you","you","you","you","you"],"shorter name":["here."],"shorter names":["for","for"],"shorter names.":["The"],"shorter representation":["but"],"shorter scopes":["get"],"shorter solution":["by"],"shorter syntax":["for"],"shorter than":["using","mine.","my","using","that","`(map"],"shorter to":["use","use","write","use","write"],"shorter using":["`_name`.","`.`,"],"shorter variable":["names,"],"shorter version":["here,"],"shorter way":["to","to","to","to","to","to"],"shorter ways":["to"],"shorter with":["less","less","`fmap`","that.","a","the","it?"],"shorter you":["could"],"shorter, `show":["c`"],"shorter, as":["already"],"shorter, but":["there's","the","it"],"shorter, it":["gives"],"shorter, more":["elegant"],"shorter. For":["example:"],"shorter. Here's":["what"],"shorter. I":["mostly"],"shorter. My":["bad!"],"shorter. Note":["also"],"shorter. Take":["a"],"shorter. You":["could"],"shorter. `all":["f"],"shorter. `bstLeft`,":["`bstRight`,"],"shortest to":["write"],"shortest way":["that"],"shorthand for":["working"],"shorthands like":["newT*IO"],"shot at":["a"],"shot just":["to"],"shot later.":["As"],"shot, and":["I"],"shot. I'm":["not"],"should (e.g.":["the"],"should I":["try","pick?","change","split","eta-reduce","say","still","use","use","say","have","use","use","be","throw"],"should `anagramOf`":["practically"],"should actually":["work."],"should add":["to","`s","a"],"should all":["have"],"should almost":["always","always","never","always"],"should also":["be","be","look","have","be","consider","import","work","consider","be"],"should always":["have","be","have","add","use","use","be","do","prefer","add"],"should at":["least"],"should avoid":["explicit"],"should basically":["never"],"should be":["able","trimmed","trimming","a","a","able","a","fairly","obvious","a","shouting.","using","able","the","a","the","intercepted.","intercepted.","given","necessary.","able","added","`Int`","all","able","the","able","able","able","able","enough","able","strict","found.","exported","8-bit","sufficient","exercise","revised,","careful","possible","a","able","able","more","a","some","less","private.","explicitly","elaborated","explicit","able","using","able","`False`.","O(1)","able","returned","(numbers","spelled","counted),","able","able","a","\"refrain\",","able","using","able","able","able","able","able","using","able","cleaner","a","done","able","able","able","able","able","defined","faster","equal","able","`\"Whatever.\"`","able","done","a","used.","map","`RobotRec","able","typed","useful.","advising","able","just","explicitly","necessary","sufficient","able","fine","able","sufficient","able","much","written","used,","`Int","renamed","changed.","a","able","able","a","implemented","able","done","using","using","using","exporting","`(isLetter","used","any","correct","more","\"triple\".","relatively","canceled,","just","used.","necessary","able","fused","fused,","consistent","linear","Nothing.","pinned.","in","discarded.","`lift`","going","on","below","written","used","used","able","used","no","sufficient","language","used","in","dealt","used","known","very","able","possible","the","Maybe","modified","replaced","`raised","Foldable,","recursive,","a","`silence","using","able","improved","able","able","able","written","important","implemented","able","able","able","able"],"should be!":["I'm"],"should be,":["and","it's"],"should bind":["harder"],"should built":["it"],"should change":["it","when"],"should check":["out","out"],"should choose":["one"],"should clean":["up"],"should comment":["with"],"should compile":["down","to"],"should consider":["thinking","making","using","using","using","composing","taking"],"should correspond":["to"],"should definitely":["look"],"should depend":["on"],"should differ":["from:"],"should do":["a","it.","a","is","it","the","the","it.","it","case","the","the"],"should either":["all","take"],"should end":["with","up"],"should equally":["have"],"should exist":["in"],"should explicitly":["export","do","export","export","export","export","handle","export","export","export","export","export","export","export","export"],"should export":["your","only","only","only"],"should fail":["when"],"should find":["a"],"should for":["example)."],"should generally":["be","be"],"should get":["fixed.","rid","rid","better","`Nothing`.","a","in","handled"],"should give":["you"],"should go":["for","with","down"],"should handle":["converting"],"should have":["used","predicted","tried","several","spent","done","waited","read","identical","signatures.","type","their","a","a","type","type","other","a","a","a","explicit","a","the","more","type","type","a","no","probably","explicit","known","an","type","just","remembered","type","type","type","type","a","spaces","type","a","type","a","been","seen","type","type","a","made","type","a"],"should help":["me"],"should ideally":["be"],"should implement":["it","`nucleotideCounts`"],"should import":["Data.Map.Strict","Data.Map.Strict","Data.Map.Strict","from","Data.Map.Strict","Data.Map.Strict,","these"],"should it":["count"],"should just":["skip","change","use","be","use","work.","write"],"should know":["this."],"should learn":["standard"],"should leave":["it"],"should let":["things"],"should look":["at","for","very","at"],"should make":["their","a","isEmpty","it","this","it","it","it","your","the","your","`sing`"],"should never":["use","ever","be"],"should not":["make","expense","be","be","pass","pass"],"should only":["provide","expect","accept","be","have"],"should pointfree":["`anagramsFor`"],"should prefer":["lowerCamelCase","applicatives"],"should probably":["just","turn","not","be","be","normalize","be","be","be","have","have","use","import","be","indent","be","be","be","be","use","try","import","use","do","go"],"should produce":["similar"],"should put":["```substThymidine```","it"],"should rather":["be","look"],"should really":["just","have","consider","change","just","start","upgrade,"],"should reflect":["the"],"should remove":["the","the"],"should replace":["`fromList"],"should resort":["to"],"should return":["`3`.","a","`Maybe","\"Whatever.\",","`Nothing`","to"],"should save":["you"],"should seperate":["the"],"should set":["it"],"should simplify":["the"],"should simply":["ignore"],"should specify":["the"],"should start":["after","small"],"should still":["be"],"should strongly":["consider"],"should switch":["to"],"should take":["a","more","a"],"should the":["table"],"should then":["be"],"should try":["`Data.Map`","doing","using","building","and","using","and","using","and"],"should update":["the"],"should use":["the","a","explicit","explicit","`not","the","pattern","more","laziness","lazy","`insertWith'`","`foldl'`","the","Data.Map.Strict","`foldl'`","the","Data.Map.Strict","them","guards","`length`","Data.Map.Strict.","strict","Data.Map.Strict"],"should usually":["be"],"should validate":["nucleotide"],"should work":["equally","for","just","as"],"should work,":["although"],"should work.":["You"],"should write":["`f","`f","a","`removeNoString"],"should you":["wish","expect"],"should've been":["able","warned"],"should've read":["`anagramsFor`"],"should've thought":["of"],"should've used":["a","`Data.Map.Strict`,","Data.Map.Strict."],"should've worked":["if"],"should, and":["I"],"should/could cooperate":["to"],"shouldn't `actualCounts`":["use"],"shouldn't alter":["the"],"shouldn't be":["a","necessary,","using","there.","hard","indented.","exported.","trying","too","checking","any","indented.","exported.","necessary.","dependent"],"shouldn't do":["things"],"shouldn't even":["have","be","compile"],"shouldn't go":["over"],"shouldn't have":["a","\"finished.\"","been"],"shouldn't have.":["Anyway,"],"shouldn't indent":["top"],"shouldn't it":["be","be","be"],"shouldn't matter,":["yes,"],"shouldn't need":["to","any","to","an","so","to","`stripMessage`","to","the","to","`zip`,","them","to","to","more","anything","the"],"shouldn't optimize":["for"],"shouldn't really":["be","ever","be"],"shouldn't that":["one"],"shouldn't the":["helper"],"shouldn't use":["`nub`,","it","it","M.map","`count`","it"],"shouldn’t `Data.Map.Strict`":["be"],"shout ...`":["(or"],"shout =":["and","(any","(&&)"],"shout @pierce":["-"],"shout test":["seems"],"shout with":["`any`"],"shout x":["=","=","="],"shoutChar could":["be"],"shouted question":["and"],"shouting =":["Shouting","isShouting"],"shouting and":["silence.","questions)?","questioning","your"],"shouting at":["him,"],"shouting can":["be"],"shouting clauses":["using"],"shouting could":["be"],"shouting equation":["and"],"shouting guard":["using"],"shouting looks":["OK,"],"shouting test":["looks"],"shouting using":["toUpper,"],"shouting would":["be","be"],"shouting, which":["doesn't"],"shouts =":["not"],"shouty and":["quiet"],"shoving it":["into"],"show ==":["id","id`."],"show an":["error?"],"show and":["++."],"show call":["in"],"show constraint":["isn't"],"show how":["awful"],"show in":["`phoneNumber`","ghci"],"show instance":["is","should","yourself,"],"show is":["kind"],"show little":["more"],"show me":["what"],"show n":["else"],"show nucleotide'":["rather"],"show number":["of"],"show off":["how"],"show supplied":["the"],"show that":["`guard`","a","counting"],"show the":["preliminary"],"show thunk":["creation"],"show up":["if"],"show which":["data-structure"],"show why":["such"],"show will":["quote"],"show you":["that","allocations."],"show, since":["it"],"showBottles to":["do"],"showed the":["compiler's"],"showed up":["on"],"showing me":["an"],"shown on":["mine,"],"shown to":["me"],"shows how":["it"],"shows some":["examples"],"shuffle the":["allowed"],"shunted to":["the"],"shure if":["```hiding"],"side and":["right"],"side are":["not"],"side as":["well"],"side effect":["of"],"side effect...":["Please"],"side has":["`False`"],"side in":["addZeros"],"side may":["be"],"side note,":["I"],"side of":["too","the","the","`M.toAscList`,","the","not","that","these","`capitalize`","both","it.","the","both","`&&`","the","the","`canAttack`"],"side still":["looked"],"side then":["the"],"side they":["don't"],"side which":["contradicts"],"side you":["could"],"side. This":["is"],"sidenote, I":["like"],"sides and":["it"],"sides is":["3.\""],"sides just":["once,"],"sides of":["length","a","the","the","an","the","the","an","the","an"],"sides that":["make","is"],"sides were":["fully"],"sides you":["can"],"sides\" instead":["of"],"sides' inequality":["tests,"],"sides) and":["function"],"sides, Isosceles":["has"],"sides, it":["looks"],"sides, so":["1"],"sides. Especially":["makes"],"sidestep the":["need"],"sieve) to":["reduce"],"sig doesn't":["really"],"sig for":["`splitEvery`."],"sig of":["`numeralsIter`"],"sig... I":["managed"],"sign and":["then"],"sign if":["you're"],"sign in":["terms"],"sign. Generally":["it's"],"signal I":["think."],"signature (`responseFor":["::","::"],"signature (and":["if"],"signature (like":["any"],"signature \u003cpre\u003eshow":["::"],"signature `(b":["-\u003e"],"signature `IORef":["String"],"signature `isNil":["::"],"signature `return":["\"M\"`"],"signature above":["each"],"signature aids":["in"],"signature and":["renaming","removed","the","clauses"],"signature as":["simply"],"signature can":["communicate.","be"],"signature for":["toRNA.","any","verse.","ageOn","`responseFor`.","Functor's","`anagramsFor`","`replaceThymidine`","`minBound`","any","multiple","classify?"],"signature from":["the"],"signature here":["for","for"],"signature if":["I"],"signature in":["(since","the","`\u003e\u003e=`","there","such","one"],"signature is":["exactly","definitely"],"signature it's":["not"],"signature of":["wordCount,","`(PrimMonad","square","\"top-level\"","a","`insert`"],"signature on":["all","functions","`toRNA'`"],"signature or":["be"],"signature really":["helps"],"signature right":["above","there,"],"signature should":["make","be"],"signature since":["it's","the","it","it's","it's","it"],"signature to":["the","`transcribe`,","the"],"signature will":["be"],"signature you'd":["have"],"signature!), and":["the"],"signature, and":["it","documentation"],"signature, but":["I'll","this"],"signature, since":["it"],"signature, that's":["a"],"signature, the":["rest"],"signature, use":["simple"],"signature, you":["should"],"signature. Other":["than"],"signature. Otherwise":["this","this"],"signature. You":["could","could"],"signature: main":["::","::"],"signatures (I":["copied"],"signatures ([Integer]":["and"],"signatures (`Map`,":["not"],"signatures (e.g.":["`responseFor"],"signatures (in":["this"],"signatures (not":["just"],"signatures (which":["will"],"signatures :p":["plus"],"signatures are":["good","specified.","just"],"signatures as":["they"],"signatures being":["better"],"signatures could":["be:"],"signatures explicitly,":["otherwise"],"signatures for":["all","all","the","public","your","the","any","any","all","any","any","inner","top-level","top-level","the","them","top"],"signatures from":["the","their"],"signatures in":["Haskell.","idiomatic"],"signatures is":["normally","to"],"signatures like":["`M.Map`"],"signatures more":["clean"],"signatures on":["all","`where`","the","`toList`"],"signatures since":["you"],"signatures to":["top-level","your","the","the"],"signatures under":["a"],"signatures within":["`where`"],"signatures without":["the"],"signatures would":["help"],"signatures) of":["any"],"signatures, I":["had"],"signatures, `::`":["should"],"signatures, and":["I've"],"signatures, but":["everything","I"],"signatures, e.g.":["`adenine"],"signatures, including":["`bogus`,"],"signatures, not":["because"],"signatures, wasn't":["really"],"signatures, you":["can","can"],"signatures. Also,":["I"],"signatures. Everything":["else"],"signatures. I":["notice","would"],"signatures. If":["you"],"signatures. It":["would","would"],"signatures. Since":["you"],"signatures. The":["spacing"],"signatures. This":["is","includes"],"signatures. it":["makes"],"significance of":["the"],"significance with":["`quotRem`)."],"significant cost":["elsewhere"],"significant to":["most"],"significant, counting":["from"],"significant, it":["is"],"significant, otherwise":["of"],"significant, which":["is"],"significantly alter":["the"],"significantly changes":["the"],"significantly cleaner":["by"],"significantly improved":["for"],"significantly simplified":["via"],"signify something?":["I've"],"signs inside":["the"],"signs looks":["awkward"],"signs. It":["looks"],"sigs looks":["a"],"silence =":["s","all","\"Fine.","null","\"Fine.","all"],"silence _":["="],"silence and":["yelling","shout","shouting"],"silence case.":["isSuffixOf"],"silence comes":["first)."],"silence condition":["(like"],"silence first,":["but"],"silence guard":["without"],"silence looks":["like"],"silence must":["be"],"silence or":["yelling"],"silence test,":["which"],"silence unused'":["="],"silence using":["`all`,"],"silence will":["result"],"silence x":["=","=","="],"silence! Most":["solutions"],"silence, because":["of"],"silence, though":["it"],"silence, you":["can"],"silent and":["questioning"],"silent check":["to"],"silent failures,":["but"],"silent treatment":["he"],"silent treatment?":["Simply"],"silently disappear...":["(might"],"silently discarding,":["bad"],"silently? That":["looks"],"silly about":["trying"],"silly bikeshed":["comment:"],"silly name,":["but"],"silly question.":["I"],"silly to":["have"],"silly, but":["it"],"silly, or":["even"],"silly, yeah":["-"],"silly. I":["might","only"],"similar (i.e.":["use"],"similar approach":["if"],"similar but":["I"],"similar code.":["They"],"similar enough":["at"],"similar example":["while"],"similar function":["`toString`"],"similar functionality":["to"],"similar in":["the"],"similar issue":["is"],"similar like":["previous"],"similar objection":["to"],"similar optimization":["as"],"similar overhead":["cost"],"similar problem,":["it"],"similar problem.":["Instead"],"similar problems":["in","if"],"similar reasons":["it's"],"similar spacing":["nit"],"similar strictness":["issue"],"similar strictness/space":["leak"],"similar thing,":["and"],"similar to":["`silent`.","how","Monad's","my","how","`repr`","yours,","`foldl'`","implementing","the","the","a"],"similar way":["with","to"],"similar) regardless,":["even"],"similar, can":["you"],"similar, otherwise":["`where`"],"similar. This":["looks"],"similarities with":["`areaCode`"],"similarly named":["functions"],"similarly to":["`isSpace`,"],"similarly ugly":["thing"],"similarly you":["can"],"simple :).":["Really"],"simple Int":["would"],"simple ```toUracil```":["function"],"simple access":["to"],"simple and":["elegant.","works","readable","unerstandable.","pointfree","elegant","stupid.","common."],"simple arithmetic":["is","to"],"simple arithmetic,":["using"],"simple arithmetic.":["There's"],"simple as":["possible"],"simple binary":["predicates"],"simple but":["not"],"simple case":[":)"],"simple cases":["I","like"],"simple closed":["form"],"simple code":["using","("],"simple concat":["will"],"simple description":["here"],"simple enough":["that","to","for"],"simple foldl...":["since"],"simple formulation":["of"],"simple functions":["like","in","in"],"simple if":["then"],"simple if/else":["or"],"simple it":["doesn't"],"simple list":["of"],"simple map":["over"],"simple matter":["of"],"simple methods":["like"],"simple pattern":["matches","matching,","matching."],"simple pipeline":["using"],"simple predicate":["it"],"simple problem,":["but"],"simple problems":["such"],"simple reductions":["you"],"simple rule":["for"],"simple rules":["are"],"simple signatures":["since","for"],"simple solution":["that","just"],"simple solutions":["to"],"simple still...I":["hope."],"simple storage":["for"],"simple string":["manipulation"],"simple task.":["Do"],"simple than":["my"],"simple that":["the"],"simple to":["allow","start","understand,","read.","`go`"],"simple too,":["search"],"simple type":["signatures.","signatures."],"simple types":["it"],"simple utility":["function"],"simple version,":["without"],"simple way":["to","to"],"simple wildcard":["pattern"],"simple without":["requiring"],"simple, I":["think"],"simple, but":["the","try","it's"],"simple, easily-tested":["functions)."],"simple, expressive,":["readable"],"simple, functions":["are"],"simple, intention":["revealing"],"simple, just":["inlined","replace"],"simple, this":["is"],"simple, though":["-"],"simple, you":["can"],"simple. As":["we"],"simple. I":["like"],"simple. To":["get"],"simple: right":["folds"],"simple; no":["need"],"simpler (`shape`,":["`reshape`,"],"simpler (avoiding":["`do`,"],"simpler (i.e.":["lots"],"simpler (it's":["shorter"],"simpler (no":["`union`","pre-filter"],"simpler `exceptional":["||"],"simpler `map`.":["Yay"],"simpler all-caps":["detector..."],"simpler and":["more","more","more","probably","faster","clearer.","not","inefficient","more","easier","more","can","more"],"simpler approach":["to","that"],"simpler approach?":["If"],"simpler as":["well.","well."],"simpler because":["that's"],"simpler but":["with"],"simpler by":["using","using","eta","normalizing","the"],"simpler cases":["like"],"simpler check":["for"],"simpler closed":["form"],"simpler example":["where"],"simpler expression":["since"],"simpler filter":["function"],"simpler for":["Robot"],"simpler form":["than"],"simpler if":["you","you","you"],"simpler implementation":["instead."],"simpler in":["this"],"simpler math":["you"],"simpler now!":[":)"],"simpler predicate":["to"],"simpler solution":[":\\"],"simpler some":["other"],"simpler tests":["for"],"simpler than":["using","the","`foldr","mine.","mine!","`take","my","more","using","`IORef`.","the","this.","its"],"simpler that":["way","way."],"simpler things":["work"],"simpler to":["do","check","ensure","enable","just","hard-code","understand"],"simpler using":["`any`","`all`","`guard`"],"simpler validation":["check"],"simpler version":["of","would"],"simpler way":["to","to","you","to","than","to","to","is","to","to","to","to","using"],"simpler way.":["`wordsWhen"],"simpler ways":["to","of"],"simpler with":["`all`?","`isSuffixOf`","a","splitAt.","usage","`mod`),","`newTVarIO`","`readMVar`"],"simpler without":["using","`do`","any","the"],"simpler, Haskell":["specific"],"simpler, although":["it's","it's"],"simpler, and":["one"],"simpler, as":["you"],"simpler, but":["this","faster.","not","not","otherwise","this"],"simpler, more":["commonly"],"simpler, the":["word"],"simpler, think":["about"],"simpler, though":["less"],"simpler. Also":["afaiu"],"simpler. Consider":["the"],"simpler. I":["fixed"],"simpler. There's":["a"],"simpler? (HINT:":["Think"],"simplest and":["most"],"simplest conceptually":["because"],"simplest solution":["I"],"simplest way":["of","I","to"],"simplicity back":["using"],"simplicity for":["the"],"simplicity over":["performance"],"simplicity, you":["may"],"simplier and":["effective"],"simplier approach":["than"],"simplier code":["and"],"simplier if":["you"],"simplier implementation":["is"],"simplier way":["using"],"simplier you":["may"],"simplification is":["to","to"],"simplification most":["Haskell","Haskell"],"simplification you":["can"],"simplifications that":["I"],"simplified (and":["the"],"simplified *my*":["implementation"],"simplified a":["bit"],"simplified approach":["Monad"],"simplified by":["checking","use","defining","not","matching"],"simplified considerably":["by"],"simplified random-string-by-pattern":["generation."],"simplified slightly":["by"],"simplified some":["with"],"simplified the":["logic","pattern","composition"],"simplified to":["`all","just"],"simplified using":["`\u003e\u003e=`","binary","those."],"simplified via":["use"],"simplified with":["standard","`sequence`,"],"simplified. Also,":["you"],"simplified. Anything":["that"],"simplified: consider":["using"],"simplifies `if":["stNum"],"simplifies code":["but"],"simplifies extraction":["of"],"simplifies stuff":["a"],"simplifies the":["`count`"],"simplifies to":["`silence"],"simplifies your":["code"],"simplify (into":["point-free"],"simplify (make":["pointless)"],"simplify ```tupleIze```":["by"],"simplify `addLowerBit`":["by"],"simplify `allAlphasAreCaps`":["by"],"simplify `anagramFilter`":["a"],"simplify `anagramOf`":["with"],"simplify `isShout`":["by"],"simplify `isShouting`":["by"],"simplify `isShouting`,":["but"],"simplify `isYelling`":["with"],"simplify `normalise`":["using"],"simplify `prettyPrint`":["a"],"simplify `shouting`":["to"],"simplify `sing`.":["`unlines`"],"simplify `toNucleotide`":["by"],"simplify `toRNA`":["a"],"simplify `weekDayDiff`)":["and"],"simplify a":["lot","code.","solution."],"simplify arithmetic":["expression"],"simplify checking":["that"],"simplify code":["a","a"],"simplify it":["further"],"simplify line":["14"],"simplify nucleotideCounts":["a"],"simplify some":["predicates","of","expressions,"],"simplify the":["first","'just","second","first","expression","\"Sure\"","semantics","former","error","`words`","conversion","silence","logic","logic,","solution","tokenization","code...","definition","tests?"],"simplify things":["-","by"],"simplify things?":["You"],"simplify this":["with","by","would","quite","quite","arithmetic","a","and"],"simplify understanding":["of"],"simplify validNucleotide":["test"],"simplify your":["\"chill","\"chill","code,","code","filtering","code","code","code","tokenization","`normalize`","`take`s","tokenization.","tokenization.","code."],"simplifying it.":["It's"],"simplifying my":["`rnf`"],"simplifying the":["code","notDuplicate"],"simplistic, does":["no"],"simply `(,1)`.":["It's"],"simply `Dl.insert":["."],"simply `fromEnum":["(x"],"simply `import":["Data.Map"],"simply `not":["(isLogical","(isLower"],"simply `toUpper'":["="],"simply `wordCount":["::"],"simply a":["efficiency","matter","limitation"],"simply aborts":["and"],"simply apply":["a"],"simply aren't":["commonly"],"simply as":["well.","`lowerCaseBottleText","\u003cpre\u003eisLeapYear"],"simply be":["the","discarded","too"],"simply because":["`(,)`"],"simply by":["using"],"simply change":["your","the"],"simply check":["that"],"simply coerce":["to"],"simply compute":["the"],"simply define":["your"],"simply defined":["as"],"simply did":["not"],"simply do":["it"],"simply evaluate":["from"],"simply explained":["here:"],"simply get":["rid"],"simply getting":["an"],"simply have":["`[Base]`.","used"],"simply ignore":["overrun"],"simply import":["Data.Map.Strict"],"simply in":["terms","terms"],"simply in-lining":["the"],"simply inline":["`isAggressive`"],"simply inserting":["2,"],"simply isn't":["the"],"simply just":["remove"],"simply long":["to"],"simply map":["it"],"simply means":["that"],"simply not":["define"],"simply perform":["the"],"simply prepend":["them"],"simply reexports":["functions"],"simply remove":["it.","the","it"],"simply replace":["'T'"],"simply say":["`isShout","`otherwise"],"simply substituted":["all"],"simply take":["`b`,"],"simply the":["Int."],"simply use":["`fromListWith`","'all","`(++)`","`fromListWith`."],"simply using":["the","`k`","`Dm.findWithDefault`","`fromListWith`,","`/=`","some"],"simply wasn't":["aware"],"simply with":["`fromEnum`","a","a","`map`"],"simply without":["using","`isDigit`"],"simply wouldn't":["\"think","expose"],"simply wrap":["Char"],"simply wraps":["in"],"simply write":["a","`fromList`","`f","`f","it"],"simply you'd":["want"],"simply your":["approach"],"simply, take":["a"],"simply. Consider":["that"],"simply. It":["might"],"simply: ```all":["isSpace```."],"simpy ```type":["School"],"simulate would":["be"],"simulation then":["you"],"simultaneously be":["divisible"],"simultaneously more":["concise"],"sin and":["lost"],"since \"I'll":["do"],"since 2":["or"],"since 2008,":["but"],"since Bool":["is"],"since Data.Map":["is","is","is","is","is"],"since Haskell":["is"],"since I":["often","have","don't","imagine","played","knew","preferred","can","kind","wouldn't"],"since I'm":["not","using","so","learning,","interested","clearly","no","sure"],"since L":["or"],"since Robot's":["fields"],"since String":["are"],"since TupleSections":["is"],"since `!(Int,":["Int)`"],"since `&amp;&amp;`":["is"],"since `&amp;lt$&gt;`":["is"],"since `(+)`":["does"],"since `(,)":["a`"],"since `(,0)`":["and"],"since `(a,":["b)`"],"since `(g":["."],"since `==`":["has"],"since `Bool`":["is"],"since `IO`":["monad"],"since `String`":["is"],"since ```replace":["'T'"],"since `all":["predicate","isSpace"],"since `all`":["handles"],"since `candidates`":["is"],"since `ceiling":["."],"since `divisible`":["is"],"since `dna`":["is"],"since `foldl`":["evaluates","is","isn't"],"since `fromListWith`":["uses"],"since `if…then…else`":["isn't"],"since `isFoo`":["is"],"since `isIgnoring`":["doesn't"],"since `isNumber`":["is"],"since `isQuestion`":["can"],"since `isSuffixOf`":["only"],"since `map`":["is"],"since `null`":["doesn't"],"since `permutations`":["does"],"since `potential`":["is"],"since `putMVar`":["will"],"since `randomRs`":["does"],"since `responseFor`":["needs"],"since `sort`":["is"],"since `thymidine`":["and"],"since `wordsBy`":["guarantees"],"since `x`":["can't"],"since `xs`":["appears"],"since a":["tuple","thunk"],"since all":["infix","null","the","these"],"since any":["string"],"since anything":["list-wise"],"since as":["you"],"since count":["is"],"since doing":["`sorted"],"since each":["response"],"since every":["letter","operation","function","new"],"since everything":["you're","else"],"since function":["calls","calls","application","calls","application","application","application","application","application","application","application","application","application","application","application","application","application","application","application","application","application"],"since i":["needed"],"since isAnagram":["would"],"since it":["doesn't","allows","makes","is","is","will","has","shadows","took","will","does","shadows","is","seems","is","is","isn't","will","would","creates","can","is","uses","just","can","mutates","will","is","is","seems","handles","must","will","will","gets","avoids","prevents","seems","is","requires","is","implies","never","gives","is","isn't","already"],"since it's":["a","a","a","already","a","a","a","tidier","so","a","wasteful","unobservable","so","not","not","not","a","a","just","a","just"],"since keeping":["the"],"since lists":["are"],"since logically":["there"],"since looking":["up"],"since major":["concepts"],"since maps":["are"],"since nested":["thunks"],"since no":["other"],"since not":["all"],"since only":["`anagramsFor`","the"],"since other":["types"],"since otherwise":["any"],"since put":["is"],"since reading":["from"],"since regular":["old"],"since right":["now"],"since silence":["comes"],"since that":["is"],"since that'd":["require"],"since that's":["what","the","what"],"since the":["implementation","shouting","tests","values","type","internals","input","first","constructors","common","first","first","method","types","tests","compiler","specification","compiler","set","tests","values","`w`","quantities","`x`","accumulator","last","input","result","result","first","last","final","sort","text","compiler","length","question","input","use","data","result","problem","newest","left","tests"],"since there":["are","are","are","is","is","seems","is","is"],"since there's":["no","no","a","no","no","a"],"since they":["rarely","are","won't","take"],"since they're":["imported","not","under"],"since this":["one","is","can't","function","version"],"since uppercase":["is"],"since using":["a"],"since we":["only","always"],"since we're":["really"],"since what":["you're"],"since you":["could","really","already","are","already","need","are","use","could","have","match","are","only","can","were","can","only","know","know","sanitize","need","have","have","have","end","only","like","know","can","would","already","already","*do*","don't","don't","can","won't","can","use","have","can","would","have","won't","can","imported","use"],"since you'd":["have"],"since you're":["ignoring","not","returning","returning","already","using"],"since you've":["already"],"since your":["`next`"],"since, and":["contrary"],"sincerely I":["didn't"],"sing (since":["the"],"sing =":["((unlines","(unlines","((unlines"],"sing a":["b","song"],"sing and":["replace"],"sing backwards,":["it's"],"sing becomes":["point"],"sing defined":["twice?"],"sing function,":["but"],"sing having":["conditions"],"sing just":["a"],"sing method":["very"],"sing point":["free,"],"sing to":["point"],"sing w/o":["guards,"],"sing, I'd":["be"],"sing, also":["`unwords`"],"singing it,":["while"],"single Int":["would","would.","of"],"single Int,":["has","creating"],"single Int.":["Each"],"single `Map`":["in"],"single `filter`":["over"],"single `filter`,":["and"],"single `normalise`":["function."],"single `responseFor":["a`"],"single argument":["(see"],"single call.":["I"],"single case":["and"],"single case,":["would"],"single change":["I'd"],"single char":["-"],"single character":["string?","might","that","binding"],"single characters":["to"],"single clause":["(and","that"],"single convention":["for"],"single count":["1"],"single counting":["and"],"single data":["type"],"single definition":["with"],"single element":["from","from"],"single expression":["that","instead","without","version."],"single extra":["line"],"single function":["that","from","in","with","in","in"],"single function,":["so"],"single guard.":["Additionally,"],"single identifier":["in"],"single input,":["since"],"single integer":["would."],"single letter,":["like"],"single letters":["only?"],"single like,":["like"],"single line":["by"],"single line,":["though"],"single list":["(created","of","comprehension?"],"single loop":["anyway."],"single method":["that"],"single number":["but"],"single out":["the"],"single pass":["version","version","solution.","and","how"],"single pass,":["which"],"single place,":["I"],"single quotes":["around","yourself."],"single recursive":["function"],"single rule":["for"],"single that":["case"],"single ticks":["as"],"single time":["you"],"single time,":["and"],"single unit":["to"],"single value":["out","like"],"single value,":["and"],"single value.":["This"],"single value?":["I'm"],"single-line test":["but"],"single-pass check":["as"],"single-pass solution":["would"],"singleWord ::":["String"],"singleton maps":["that"],"singleton points":["to"],"singleton, exactly":["the"],"sir (or":["ma'am)."],"site I":["think"],"site doesn't":["have"],"site has":["polymorphic"],"site hates":["angle"],"site if":["I"],"site processes":["input."],"site which":["is"],"situation is":["cause","on"],"situation only":["a"],"situation to":["deal"],"situation where":["list","`(x)`"],"situation, but":["haskell's","in"],"situation, then,":["having"],"situations like":["`fromMaybe"],"situations when":["the"],"situations where":["GHC"],"size =":["unfoldr"],"size O(n)":["in"],"size a,":["tail"],"size alphabet":["(which"],"size array":["from"],"size by":["using"],"size difference":["here"],"size gives":["you"],"size is":["expressed,","known"],"size n*m.":["And"],"size n,m":["then"],"size of":["the","the","the","the","a","`ys`"],"size stays":["small"],"size towards":["infinity"],"size) so":["that"],"size)) and":["it"],"size), just":["sorting"],"sized stack)":["before"],"sizes of":["the"],"sizes. Sometimes":["you"],"sketch of":["how"],"sketches of":["a"],"skimmed that":["page"],"skip invalid":["text,"],"skip right":["to"],"skip the":["whole","entire","argument"],"skip those":["here..."],"skip unnecessary":["`T.pack`"],"skipped the":["Text"],"skipping all":["of"],"skipping its":["argument"],"skipping the":["argument"],"sky is":["the"],"slacking on":["here."],"slashes connecting":["the"],"slice to":["stop"],"slices do":["you"],"slices function":["without"],"slices you":["are","can"],"slices/consecutives, but":["I"],"slicing, but":["do"],"slick, use":["`splitAt`."],"slick. I":["was"],"slicker version":["of"],"slides which":["cover"],"slighly faster":["for"],"slight ambiguity":["in"],"slight mixing":["of"],"slight optimization,":["but"],"slightly another":["approach,"],"slightly better":["than","than","to"],"slightly by":["reusing","changing","using"],"slightly changed":["some"],"slightly different":["way.","approach","manner","solution","performance","in","version"],"slightly different.":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/space-age/example.hs"],"slightly differently":["(although"],"slightly easier":["to","to","to"],"slightly faster":["then"],"slightly faster.":["Cool!"],"slightly inefficient":["since"],"slightly irrational":["distrust"],"slightly less":["readable","complex","efficient,","type","convinced","readable"],"slightly longer":["but","to"],"slightly misleading,":["it"],"slightly more":["idiomatic.","elegant","elegant","efficient","elegant","efficiently","performant","clearly...","complex","code","readable"],"slightly nicer":["than"],"slightly preferable":["to"],"slightly shorter":["and"],"slightly simpler":["way","and","version","than"],"slightly slower":["than"],"slightly so":["that"],"slightly sped":["up"],"slightly surprised":["that"],"slightly to":["cope","be"],"slightly). Then":["you"],"slightly-more-abstract phone":["number."],"slightly-more-accurate description":["of"],"slightly. It":["will"],"slim down":["the"],"slippery slope,":["but"],"slippery very":["quickly."],"slope becomes":["slippery"],"slope, but":["ignoring"],"sloppy in":["my"],"sloppy, since":["you"],"slot of":["time!"],"slow for":["a"],"slow on":["even"],"slow relative":["to"],"slow way":["to"],"slow, `unique`":["looks"],"slow, checking":["the"],"slow, hence":["this"],"slower (it":["went"],"slower algorithmically)":["than"],"slower and":["use"],"slower in":["GHCi"],"slower since":["`fromListWith`"],"slower than":["checking","one","the","it"],"slower using":["`primes`","`primes`"],"slower with":["Criterion"],"slower, especially":["if"],"slowly working":["through"],"small alphabet":["(a"],"small amount":["of","of","of"],"small association":["list?"],"small bit":["easier"],"small change":["to","it","that"],"small consideration":["is"],"small constant":["factor"],"small data":["set"],"small enough":["that"],"small first.":["Maybe"],"small function":["to"],"small functions":["and"],"small helper":["function","function."],"small input":["it"],"small input,":["but"],"small it":["could"],"small lists":["the"],"small margin,":["but"],"small nit":["here"],"small nits":["here:","that"],"small note:":["the"],"small number":["of","and"],"small one,":["in"],"small part)":["was"],"small possibility":["that"],"small program":["I"],"small refactoring":["to"],"small scope":["(such"],"small set,":["it"],"small suggestions":["to"],"small thing":["is"],"small things":["that","you"],"small things,":["maybe"],"small total":["maps"],"small, it":["would"],"small-ish test":["cases"],"smaller and":["easier"],"smaller factors":["because"],"smaller in":["memory"],"smaller than":["the","a"],"smallest `k`":["that"],"smallest order)":["as"],"smallest square":["that","larger"],"smallest to":["largest"],"smallest. You":["can"],"smallish style":["issue:"],"smalltalk like":["objects,"],"smart constructor":["to","to","so","to","for"],"smart constructor,":["might"],"smart constructor.":["Maybe"],"smart constructor?":["I"],"smart constructors).":["Handling"],"smart enough":["to","to","to"],"smart or":["dumb"],"smart the":["optimizer"],"smart to":["make"],"smells. But":["it"],"smiled upon":["generally."],"smth will":["require"],"smth wrong,":["as"],"snd .":["filter"],"snd \u003c$\u003e":["find"],"snippet --":["a"],"snippet of":["code,"],"snippets. I":["think"],"snoc x":["(SnocList"],"snoc). I'm":["not"],"snocnil =":["SnocList"],"so 1":["for"],"so 7.4":["is"],"so I":["expect","think","prefer","split","didn't","decided","don't","could","suppose","can't","went","think","won't","didn't","don't","would","can","know","made","had","really","could","would","don't","had","haven't","could","want","shunted","don't","get","just","stuck","just","avoided","can","don't","went","tried","left","think","was","wanted","do","thought","rewrote","thought","didn't","could","decided","say","stuck","can","think","don't","don't","think","don't","have","wouldn't","guess","have","guess","checked","don't","hope","don't","agree.","hesitated","suppose","had"],"so I'd":["say","rewrite"],"so I'll":["unlock,","unlock.","unlock.","have","unlock.","go","delete","definitely","pursue","have","definitely"],"so I'm":["still","not","looking","not","sticking","marking","gonna","still"],"so I've":["removed"],"so WHNF":["of"],"so `\"?\"`":["is"],"so `.`":["apply"],"so `M.Map":["String"],"so `School.sorted`":["runs"],"so `a":["+","==Integer`"],"so `all":["isSpace"],"so `check`":["has"],"so `cleanUpInput`":["could"],"so `fold`":["wasn't"],"so `fromListWith`":["is"],"so `head":["\"?\"`"],"so `letters`":["can"],"so `map":["$"],"so `module":["Bob"],"so `otherwise`":["part"],"so `read":["."],"so `responseFor":["m`"],"so `rnf":["(Robot"],"so `secondInDay::Integer`":["and"],"so `sortLower":["st`"],"so a":["better","singleton","lot","different"],"so addWord":["may"],"so added":["this"],"so addition":["without"],"so all":["of","you","the"],"so already":["binds"],"so although":["`removeNoString(speak)`"],"so anagramsFor":["may"],"so any":["comparative","suggestions"],"so as":["you"],"so at":["least","most"],"so atomically":["readTVar"],"so awkward":["to"],"so be":["able"],"so both":["`toList"],"so can":["someone","be","remove","be"],"so can't":["throw"],"so changed":["the"],"so clean":["and"],"so clear":["either,","to"],"so clear,":["or"],"so close!":["Don't"],"so closing":["account"],"so comes":["the"],"so common":["to"],"so concise":["than"],"so data":["keeps"],"so deeply":["nested."],"so descriptive":["I"],"so desire,":["although"],"so developer":["can"],"so didn't":["-"],"so does":["other"],"so doesn't":["it"],"so don't":["get"],"so easily":["read.","replace"],"so easy":["to","(or"],"so effective":["but"],"so even":["though"],"so eventually":["I"],"so explicit":["grouping"],"so far":["for","-","has","is","is"],"so far!":["Your"],"so far,":["I"],"so far.":["Yes,"],"so few":["of","grades,"],"so foldr":["will"],"so for":["consistency's"],"so forth.":["As","Instead"],"so fusing":["is"],"so generating":["the"],"so given":["`all"],"so good":["to"],"so great":["is"],"so had":["no"],"so hard":["to"],"so has":["slightly","a"],"so heavily":["on"],"so here":["is","it's"],"so here's":["a"],"so hopefully":["you"],"so how":["do"],"so i":["even"],"so i'll":["need"],"so i'm":["not"],"so if":["you","I","I","you","you","you","you","the","you"],"so important":["since","but"],"so in":["`mod100"],"so inclined,":["but"],"so inside":["monad"],"so instances":["of"],"so interesting":["on"],"so is":["using"],"so isQuestion":["isn't"],"so it":["fits","doesn't","evaluates","isn't","isn't","won't","short-circuits","can","would","won't","may","may","may","is","is","can","is","should","doesn't","is","won't","wouldn't","doesn't","was","can","might","can","causes","won't","has","uses","will","may","will","have","can't","works","will","suffers","evaluates","generates","will","will","forces","worked.","can","looks","is","doesn't","seems","might","does","could"],"so it'll":["look"],"so it's":["forgiven","personal","nice","not","not","not","just","pretty","not","not","not","probably","not","not","likely","possible","the","only","type","a","better","a"],"so its":["not","possible"],"so keeping":["then"],"so know":["all"],"so large":["that"],"so last":["errors"],"so letter":["out"],"so little":["flexibility."],"so long":["as","as","that","that","lines","as"],"so long.":["Writing"],"so make":["your"],"so many":["pattern","parentheses.","different","functions!)","times."],"so many.":["I'm"],"so maybe":["that's","just","ya'll","you","you","you'll"],"so might":["be"],"so most":["Haskell"],"so much":["cleaner,","of","messier.","for","in","on","for","for","again","repetition","shorter","faster.","obliged","code,",":)","fun","bottles,","slower","in","indentation"],"so much.":["It's","Same","Looks","I"],"so my":["understanding","solution"],"so nice":["about","if"],"so no":["need","need","tail","name"],"so non-constructive)":["nitpick."],"so not":["always","too"],"so now":["code"],"so null":["check"],"so obvious":["and"],"so often":["I"],"so on,":["then"],"so once":["you","the"],"so only":["changing","interesting"],"so opposed":["to"],"so optimal":["as"],"so parentheses":["aren't"],"so perhaps":["it's","@ora","a"],"so please":["point"],"so point-free":["I"],"so populating":["the"],"so power":["(or"],"so prepending":["is"],"so probably":["benefits"],"so program":["will"],"so rather":["than"],"so readable.":["You"],"so seemed":["like"],"so seems":["like"],"so short":["and","and"],"so shouldn't":["it","it"],"so simple,":["just"],"so simple;":["no"],"so since":["the"],"so small,":["it"],"so solution":["is"],"so some":["of"],"so something":["like:"],"so sometimes":["you"],"so strict,":["I'd"],"so submitted":["it"],"so supports":["locking,"],"so take":["a"],"so technitially":["you've"],"so thank":["you"],"so thanks":["for","again","also","for"],"so that":["they're","was","I","the","`(isQuestion","the","it","the","they","solution","you","DNA","more","shouldn't","you","there's","you're","it","people","something","function","there","all","the","you","your","one","you","you","it's","it","the","they","`length","it's","`Normal`","you","insertion","you","you","won't","it's","the","retrieving","`normalize","`addLetter`","the","`zip","I","you","you","it's","you","is","you","should","you","user","I","it's"],"so that's":["my","what"],"so the":["stack","stack","stack","stack","stack","simplest","all-caps","letters","first","stack","order","default","compiler","average","algorithm","trick","`do`","computations","Map","`return","`zipWith`","Text","choice","second","indexing","resulting","solution","weak-head","usual","computation","possible","body"],"so there":["is","may","are","are","are","is","is","is","are","wouldn't"],"so there's":["a","no","not","not","not","no","no","not"],"so they":["tell","won't","are","will","are","should"],"so they're":["not.","not","equivalent"],"so this":["was","is","is","is","is","was","code","code","is","strategy","is","should","with","implies","approach","will"],"so thunk":["will"],"so to":["be","be"],"so toRNAc":["will"],"so took":["too"],"so trivial":["that"],"so ugly,":["but"],"so underscores":["are"],"so unfortunately":["to"],"so unless":["you're"],"so used":["to","to"],"so using":["it","Data.Map.Strict","`insertWith"],"so via":["trial-and-compiler-error"],"so was":["a"],"so we":["are","can","don't","can","can","keep","will"],"so well":["I"],"so what":["you","you're","happens"],"so when":["you","in","I","used"],"so where":["it's"],"so why":["not","does"],"so writing":["point-free"],"so you":["can","shouldn't","could","don't","can","won't","don't","should","can","traverse","would","would","might","could","can","might","can","don't","shouldn't","could","should","should","probably","can","don't","can","can","would","don't","just","should","will","don't","don't","should","could","could","may","can","don't","should","could","can","don't","could","won't","have","won't","should","can't","could","didn't","don't","could","don't","never","have","often","don't","don't","need","will","don't","can","are","don't","may","can","van","may","may","introduces","a","may","can","may","may","may","are","are","keeping","can","are","may","have","are","can","should","don't","don't"],"so you'll":["traverse","need","have:","not","have","be"],"so you're":["better"],"so your":["program"],"so, I":["reimplemented","like"],"so, but":["it's","I","for"],"so, how":["do"],"so, you":["might"],"so. For":["top-level"],"so. I":["left"],"so. It":["also"],"so. When":["matching"],"so...this is":["probably"],"so: redundant":["brackets"],"so? Also,":["my"],"so? I":["think"],"socpe of":["responseFor."],"software transactional":["memory,"],"sole purpose":["of"],"solid solution.":["I"],"solid way":["of"],"solution (although":["it"],"solution (given":["the"],"solution (no":["lists","lists"],"solution (perhaps":["my"],"solution (when":["the"],"solution (with":["fromEnum)"],"solution --":["who"],"solution I":["have","used","can","submitted,","think.","prefer"],"solution I'm":["satisfied"],"solution I've":["come"],"solution O(n^2)":["instead"],"solution a":["lot,","little","lot"],"solution and":["will","not","you"],"solution apply":["to"],"solution based":["on"],"solution because":["I'm","DNA/RNA","it"],"solution before":["cleaning","you"],"solution but":["I","this","nice"],"solution by":["handling","@leonie,"],"solution could":["involve"],"solution does":["retain","merges"],"solution doing":["the"],"solution due":["to"],"solution fine":["then?"],"solution for":["shouting","determining","counting","this","`repeatedWords`."],"solution from":["there.","Exercism's"],"solution handles":["all"],"solution has":["better","a"],"solution here":["is","would","if","actually","is","is"],"solution here,":["you"],"solution if":["you","you","you","it"],"solution in":["that","a"],"solution instead":["of"],"solution into":["better"],"solution is":["good.","less","really","a","to","only","ready","not","OK","to","make","neat","to","cleaner,","to","pretty","a","general","not","certainly","O(1)","perhaps","probably","much","great,","preferable,","suboptimal","too","OK.","to","not","to","to","a","not"],"solution it":["should"],"solution it's":["likely","a"],"solution iteratively":["from"],"solution just":["merge"],"solution looks":["simple","good.","good.","something","good","like"],"solution may":["be"],"solution maybe":["you'll"],"solution more":["complicated","clean","generic,"],"solution much":["better","easier."],"solution needs":["to"],"solution now.":["Only"],"solution of":["sgerrand","inserting","binary"],"solution only":["works"],"solution out":["ther."],"solution over":["this"],"solution overall":["but"],"solution possible":["using"],"solution quite":["a"],"solution requires":["no"],"solution seemed":["to"],"solution shorter,":["since:"],"solution should":["be","not"],"solution since":["the"],"solution so":["that"],"solution temporarily":["by"],"solution thanks":["for"],"solution that":["might","does","would","only","makes","gets","would","has","used","allow","does","I","does","uses","worked","would"],"solution then":["you"],"solution though,":["so","these","nice"],"solution to":["Bob](https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/bob/example.hs)","this","do","use","use","this","the","word-count","use","this","this?).","your","`total`","this","this","use","this),","\"pattern","both","make","`nucleotideCounts`?","`total`,","`newName`","use","square","this","this","this","use","this","all","\"robot-name\".","this"],"solution uses":["`filter`","too"],"solution using":["foldM","sort,","`case`.","guards","a","\"strip\"?"],"solution was":["it","better,"],"solution we":["will"],"solution where":["you"],"solution which":["traverses"],"solution will":["may","prevent","require","be","pass,"],"solution with":["regexes.","zip.","only","`map","sequencing","toList","fromListWith","something"],"solution without":["arrows."],"solution works,":["it's","but"],"solution would":["always","produce","be","use"],"solution you":["would","ve","don't","can"],"solution —":["they're"],"solution! In":["the"],"solution, Data.Map.Strict":["should"],"solution, I":["took","don't"],"solution, I'd":["go"],"solution, although":["it"],"solution, and":["I","it"],"solution, but":["I'm","I","then","please","this","it","please","not","you"],"solution, comments":["welcome."],"solution, don't":["know"],"solution, for":["example"],"solution, it":["could"],"solution, just":["something"],"solution, looks":["great"],"solution, my":["comments"],"solution, now":["will"],"solution, other":["than"],"solution. A":["case"],"solution. After":["submitting"],"solution. Although":["my","i"],"solution. But":["as"],"solution. Data.ByteString.Char8":["is"],"solution. Does":["the"],"solution. Felt":["kind"],"solution. I":["especially","didn't","like","try"],"solution. I'm":["going"],"solution. I've":["found"],"solution. If":["input"],"solution. Instead":["of"],"solution. Nevertheless,":["a"],"solution. Obviously":["you"],"solution. One":["way"],"solution. Some":["might"],"solution. The":["optimization","`[1..dv]"],"solution. There's":["no"],"solution. Why":["is"],"solution. Will":["rework."],"solution. You":["could","might"],"solution..not sure":["about"],"solution: once":["`n`"],"solution; for":["fun,"],"solution; it":["seems"],"solution](http://exercism.io/submissions/522b834ec4120de916000090). The":["only"],"solutions I":["have","saw"],"solutions I've":["seen","seen"],"solutions O(n":["lg"],"solutions are":["possible,"],"solutions because":["I"],"solutions by":["clicking","others"],"solutions don't":["clean"],"solutions if":["you're"],"solutions it":["seems"],"solutions look":["way"],"solutions that":["would","use","rely","doesn't","seem"],"solutions to":["this","this","even","this","this","simple","this","this","this"],"solutions use":["`last"],"solutions uses":["list"],"solutions using":["`Text.Printf.printf`,"],"solutions without":["dependencies"],"solutions, I":["see"],"solutions? As":["far"],"solve in":["some"],"solve it":["would","--"],"solve it?":["And"],"solve task":["in"],"solve that":["problem"],"solve the":["problem"],"solve these":["equations"],"solve this":["with","using","without","kind","using","particular","exercise.","problem","one","efficiently","one","would","much","with","without","since","issue.","without","task","task","task.","task"],"solve this)?":["I"],"solve this,":["changing"],"solve with":["just"],"solve working":["in"],"solved if":["you"],"solved it":["without"],"solved meetup":["in"],"solved task":["by"],"solved the":["problem"],"solved this":["exercise","problem,"],"solved using":["parsec"],"solved with":["a","a"],"solves first":["problem:"],"solves it.":["Can't"],"solves my":["problem."],"solves that":["problem."],"solving it":["using"],"solving the":["same","problem","problem"],"solving things":["the"],"solving this":["with","exercise","with","with"],"some Char":["as"],"some Haskell":["methods"],"some IO":["format,"],"some RULES":["pragmas"],"some `fst`":["and"],"some adding.":["You"],"some additional":["opportunities","information"],"some advantage":["of"],"some algorithms":["for"],"some amount":["of"],"some arbitrary":["string"],"some argument":["against"],"some arguments":["in"],"some arithmetic":["rather"],"some arithmetic,":["`fromEnum`"],"some bang":["patterns"],"some better":["functionality"],"some big":["nested"],"some biologist":["will"],"some boilerplate":["still,","here"],"some buggy:":["for"],"some build-up":["of"],"some call":["it"],"some case":["normalization"],"some cases":["it","it's","to","make","laziness","you","the"],"some cases,":["but","but"],"some cases.":["In","Consider"],"some changes":["after","and"],"some characters":["that"],"some chars":["that"],"some checks":["from"],"some class":["or"],"some clever":["trick"],"some code":["that","from"],"some combination":["of","of"],"some combinators":["in"],"some comments":["about"],"some comments,":["but"],"some community":["site"],"some complexity":["that"],"some consolidation":["that"],"some contexts,":["but"],"some continuous":["subset"],"some cool":["stuff"],"some data":["type"],"some defacto":["community"],"some deforestation":["rewrite"],"some different":["implementations"],"some discussion":["about"],"some don't":["(e.g."],"some effectful":["code"],"some effort,":["especially"],"some errors":["about"],"some evidence":["to"],"some examples":["where","where"],"some excellent":["points."],"some exceptions,":["but"],"some existing":["solutions"],"some expressions":["unqualified"],"some expressions,":["and"],"some external":["function."],"some extra":["practice","practice","parentheses","parentheses"],"some failing":["tests,"],"some features":["like"],"some feedback,":["I"],"some fragility":["–"],"some free":["online"],"some fun":["could"],"some function":["with"],"some functionality":["that","from","that"],"some functions":["in","from","from","that","that"],"some good":["information","coverage","guidelines"],"some hardcoding":["like"],"some hash":["function"],"some have":["used"],"some help":["on","as"],"some higher-order":["function"],"some hints":["on","or"],"some hints,":["or"],"some ideas":["from"],"some imports":["are"],"some improvements":["in"],"some information":["about"],"some input":["character"],"some interesting":["questions"],"some invalid":["input"],"some issues":["with","related","with"],"some iterations.":["This"],"some kind":["of","of","of","of","of"],"some later":["tasks"],"some lazyness":["issues."],"some less":["meaningful"],"some let":["variables"],"some letters":["will"],"some libraries":["it's"],"some list":["operation"],"some low":["hanging"],"some machinery":["for"],"some maths":["that"],"some maths.":["Much"],"some measurable":["benefit"],"some method":["or"],"some minor":["style"],"some missing":["cases"],"some more":["time","information","performant","and"],"some more,":["99"],"some much":["richer"],"some names":["along"],"some nasty":["way"],"some native":["heredoc"],"some nested":["thunks"],"some nice":["clues","solutions"],"some nitpicking":["here."],"some non-specified":["recovery"],"some non-whitespace":["characters;"],"some not":["quite"],"some now":["deprecated"],"some of":["these","the","your","the","the","my","the","your","the","these","the","the","the","the","them","the","them","the","the","these","the","the","the","the","the","the","the","these","the","Data.Text's","the","the","the","the","the","these"],"some optimizations":["you"],"some other":["languages,","way,","time","name","things","submissions","code","monad-y","ways","condition","variables","problem","time,","day."],"some overridding":["reason"],"some package":["in"],"some parens":["in"],"some parsing":["library"],"some part":["of","of"],"some people":["would","don't","would","would","have","use","like"],"some piece":["of"],"some point":["I","someone"],"some point,":["think"],"some possible":["performance"],"some pre-computation":["in"],"some predefined":["functions"],"some predicate\"":["and"],"some predicate\".":["Just"],"some predicates":["using","could"],"some pretty":["big","ugly"],"some private":["functionality."],"some problems":["with"],"some progress":["without"],"some projects":["using"],"some prompting":["by"],"some property.":["Have"],"some quick":["indication"],"some rather":["general"],"some real":["pointers"],"some reason":["I","I","the","didn't","parentheses","I","takes","never","I"],"some reason,":["I","when"],"some reason.":["See","As","This","Thanks"],"some redundant":["brackets","brackets","brackets"],"some refactorings":["with"],"some regex":["is"],"some repetition":["too.","with"],"some reviews":["^^"],"some second":["order"],"some sense":["given"],"some shorthands":["like"],"some significant":["improvements."],"some simple":["arithmetic,","reductions","arithmetic","arithmetic","arithmetic."],"some situations":["where"],"some slicing,":["but"],"some small":["constant","things","suggestions"],"some so":["that"],"some sort":["(a","of","of","of","of"],"some space":["with","`[x,"],"some spurious":["test"],"some strange":["results"],"some strictness":["issues","issues","issues","annotations."],"some stuff":["on","with"],"some subtleties":["in","here,"],"some such":["that"],"some such,":["rather"],"some suggestions":["from"],"some superfluous":["parentheses,"],"some task":["in"],"some things":["easier","to","I","work"],"some time":["to","(want","to"],"some time,":["trying"],"some trailing":["space"],"some tricks),":["while"],"some trouble":["working"],"some type":["checking"],"some typeclass":["tricks"],"some unicode":["code"],"some unused":["imports"],"some use":["of"],"some useful":["functions","\"modular\"","functions","functions,","functionality","work"],"some useless":["parenthesis."],"some values":["need"],"some variable":["bindings","bindings"],"some variables/functions":["would"],"some verbiage":["in"],"some very":["interesting","useful"],"some way":["to","that","to","you","to"],"some way,":["not"],"some ways":["I"],"some with":["a"],"some zero":["values"],"some zeros":["in"],"some über-elegant":["way."],"some, @adelle?":["I"],"some, not":["all"],"somePreevaluate [(\"AEIOULNRST\",":["1),"],"somebody was":["going"],"someday in":["the"],"somehow -":["it"],"somehow aborted),":["then"],"somehow doubt":["it"],"somehow for":["code"],"somehow recognized":["as"],"somehow the":["'opposite'"],"somehow totally":["missed"],"somehow, but":["I'm"],"somehow? What":["is"],"someone accidentally":["has"],"someone clever":["and"],"someone doesn't":["submit"],"someone else":["is"],"someone else's":["code","solution"],"someone enlighten":["me"],"someone give":["me"],"someone has":["spent"],"someone is":["bound"],"someone mentioned":["it"],"someone might":["have"],"someone on":["here"],"someone or":["use"],"someone out":["there"],"someone says":["`\":("],"someone suggested":["I"],"someone use":["Data.Map.Strict"],"someone would":["have","make"],"something 'mechanical'":["in"],"something ++":["(verse"],"something I":["don't","had","need","should","don't","considered.","read"],"something I'd":["like","actually"],"something I'm":["sure","going","missing,","not"],"something I've":["noticed"],"something a":["bit"],"something about":["`s`","operator"],"something along":["those","the","the","the","the"],"something and":["if"],"something be":["improved"],"something because":["I"],"something better.":["I","A"],"something but":["I","what"],"something called":["eta-reduction"],"something cleverer":["in"],"something close":["to"],"something different":["(so","now"],"something else":["in","that","big","that","entirely!"],"something else.":["The"],"something else?":["If"],"something equivalent":["to","to"],"something even":["shorter?)."],"something explaining":["how."],"something for":["each","all","readability,"],"something generic":["is"],"something here.":["`normalizedX`"],"something in":["Data.List.Split.","your","the"],"something into":["a"],"something is":["without","coming","done","atomic","evaluated"],"something like":["`not","this","extracting","`sum","`[3,2..2]`.","that","this:","this:","`WHAT?","`not.","this","`map","`flip","```mapSingleValue","that.","that.","`f","templates","`catMaybes","concat","\"s1/=s2","`isShouting`,","`foo","this","isLower)","that,","this:","`nucleotideCounts","that","this","`records`","`concat`,","`(((1)","[`TVar`s](http://hackage.haskell.org/package/stm-2.4.2/docs/Control-Concurrent-STM-TVar.html)","that.","IORefs","`Robot","`verse","that","a","'map","that?","`count","this:","this:","this","`1","that","`bots@(b:bs)`","filter,","`x`","`1","this:","`isAnagramOf`.","`unSchool`","getting","`hammingDistance","this","`import","`(((1","`atomically","\u003ccode\u003eimport","this:","`3*(n-1)/2`","\"case\"","this:","M.insertWith","`normalize","\u003cpre\u003eslices","`newStdGen`","\u003cpre\u003eisYelling","`not","`Data.Map.fromListWith`","wordsBy,","`replicateM","`error`?","`mapMaybe`","that).","`wordsBy","`Maybe","`any","this:"],"something like:":["`atomically"],"something more":["like","compositionally","involved","effective","like","related","like","like","like","obvious,","built-in."],"something named":["`anagram`"],"something new.":["I"],"something nice":["about"],"something nice.":["is"],"something of":["that","that","a"],"something old":["then"],"something opaque.":["[lens](http://hackage.haskell.org/package/lens-4.0.4)"],"something point":["free"],"something rather":["than"],"something short":["and"],"something silly,":["or"],"something similar":["but","(i.e.","to"],"something similar)":["regardless,"],"something simple":["and"],"something such":["as:"],"something that":["can","managed","I","a","should","will","runs","looks","is","might","happened","already","ensures","actually","would","works","gets","looks","eludes","evaluates"],"something that's":["ready","list-like"],"something the":["mode"],"something this":["simple"],"something to":["optimize","do","an","feed","do","do","it,","increment.","do","do","do"],"something too":["generic"],"something very":["different","much"],"something went":["wrong"],"something whole":["books"],"something with":["compiler","your"],"something working":["now"],"something worth":["trying"],"something wrong":["the"],"something you":["want","could"],"something's only":["\"in"],"something, `fromAscListWith`":["after"],"something, and":["it"],"something, but":["it's"],"something, right?":["Do"],"something, you":["can"],"something. At":["least"],"something. I'll":["submit"],"something. It":["introduces"],"something? I've":["seen"],"something? If":["so,"],"something? Thanks":["for"],"something? This":["seemed"],"sometime in":["the"],"sometime, and":["maybe"],"sometimes Control":["Monad's"],"sometimes Control.Applicative":["is"],"sometimes DRY":["stands"],"sometimes I":["wish"],"sometimes a":["string"],"sometimes all":["there"],"sometimes called":["the"],"sometimes choosing":["the"],"sometimes code":["is"],"sometimes desirable":["to"],"sometimes do":["more","a"],"sometimes doesn't":["feel"],"sometimes err":["too"],"sometimes feels":["fragile"],"sometimes find":["myself"],"sometimes gives":["me"],"sometimes help...":["but"],"sometimes helps...":["but"],"sometimes it":["can"],"sometimes it's":["nice","nice"],"sometimes when":["I"],"sometimes you":["may"],"sometimes, that's":["why"],"somewhat awkward":["type"],"somewhat better":["tokenize","algorithm","function","off","and"],"somewhat confusing":["with"],"somewhat discouraged":["to"],"somewhat easier":["way"],"somewhat gruesome":["results."],"somewhat inappropriate.":["The"],"somewhat less":["robust"],"somewhat monolithic.":["Have"],"somewhat more":["idiomatic","simply"],"somewhat nicer":["`wordsFrom`"],"somewhat obscure":["to"],"somewhat satisfying":["working"],"somewhat tempted":["to"],"somewhere and":["not"],"somewhere between":["0"],"somewhere but":["I"],"somewhere else.":["Because"],"somewhere in":["the"],"somewhere since":["it"],"somewhere that":["'words'","`digits`"],"somewhere to":["start"],"somewhere. There's":["no"],"song as":["you're"],"song correctly,":["`end`"],"song from":["this"],"song is":["not"],"song might":["be,"],"song when":["arguments"],"soon I'll":["find"],"soon after":["I"],"soon as":["you","you","I","it"],"soon, I've":["already"],"sooner but":["that's"],"sooner if":["there's","that"],"sooner than":["that"],"sooo not":["a"],"sophisticated and":["could"],"sorely lacks":["abstraction."],"sorry (about":["the"],"sorry I":["fail"],"sorry about":["the"],"sorry but":["I"],"sorry for":["non-constructive","confusion"],"sorry forgot":["to"],"sorry missed":["the"],"sorry the":["explanation"],"sorry, I":["misread"],"sorry, `insertWith`":["does"],"sorry, i":["meant"],"sorry, read":["too"],"sorry, submitted":["without"],"sorry, wasn't":["paying"],"sorry. Hope":["you"],"sorry; not":["sure"],"sort $":["words"],"sort &":["sort","lowerCase"],"sort (a":["list"],"sort (map":["toLower","toLower"],"sort (toLower'":["x)","s)","s))"],"sort .":["map","map","(map","(traversed","map","map","token","(map","downcase)","map"],"sort a'":["=="],"sort a`":["(ignoring","be","(the"],"sort anagram'`":["seems"],"sort and":["lowercase","normalization","group","group."],"sort b)`":["since"],"sort before":["I"],"sort bottleneck,":["and"],"sort came":["later"],"sort directly":["when"],"sort each":["word,"],"sort every":["single"],"sort in":["order"],"sort is":["explicit).","not"],"sort it,":["group"],"sort lb`":["and"],"sort lx)`.":["You"],"sort ns))`":["is"],"sort of":["thing.","problem.","fusion","thing","criticism","computation","thing","thing,","stumbled","the","code","thing","rule","problem","minimal","like","thing","thing","had","explicit","retraction","difference","thing","left","IO.","solution","comparison-based","DFA","merge/adjust/insertWith","a","inner","like"],"sort on":["insertion"],"sort operation,":["there"],"sort out":["how","how"],"sort over":["the"],"sort require":["you"],"sort s1'":["=="],"sort target":["every"],"sort the":["values","result.","student","letters,"],"sort toLower'":["x"],"sort values":["on"],"sort w":["==","=="],"sort when":["you"],"sort word'":["=="],"sort y`":["is"],"sort) .":["M.toAscList"],"sort) on":["`w`"],"sort)` due":["to"],"sort)` is":["equivalent"],"sort)` not":["`&amp;&amp;&amp;`,"],"sort)` since":["there's"],"sort, the":["best"],"sort. I":["think"],"sort. You":["can"],"sortAndLower w1":["in"],"sortAndLower w2":["&&"],"sortBy (comparing":["head)`"],"sort` (from":["Control.Arrow)."],"sort` -\u003e":["`minimum`)"],"sort` could":["be"],"sort` due":["to"],"sort` is":["equivalent","just"],"sort` only":["will"],"sort` since":["that's"],"sort` with":["`fromListWith`"],"sort``` is":["better"],"sorted =":["sort","sort","map"],"sorted and":["lowercased"],"sorted bag).":["If"],"sorted by":["key,","key.","key,"],"sorted char":["are","are"],"sorted downcased":["`str`"],"sorted even":["after"],"sorted fashion":["in"],"sorted incorrectly.":["Perhaps"],"sorted internally,":["so"],"sorted is":["evaluated"],"sorted list":["in","is","of","in","that"],"sorted list,":["which"],"sorted lower":["versions"],"sorted manner":["-"],"sorted on":["and"],"sorted only":["once.(","once?","once,"],"sorted order":["so","is","internally,"],"sorted orders":["(hence","with"],"sorted output.":["You"],"sorted result":["in"],"sorted school":["="],"sorted since":["I"],"sorted string":["so"],"sorted students.":["I"],"sorted version":["of"],"sorted versions.":["The"],"sorted, as":["follows:"],"sorted, or":["counted."],"sorted, perhaps":["using"],"sorted, you":["can"],"sorted. Also,":["can"],"sorted. Besides,":["no"],"sorted. You":["can"],"sorted. `fromListWith`":["could"],"sorted. `toList`":["does"],"sortedWordsSame .":["filter"],"sorteda =":["sort"],"sorteda ==":["sort"],"sorting Data.Text.":["If"],"sorting and":["grouping."],"sorting arguments":["may"],"sorting at":["the","all"],"sorting every":["time"],"sorting for":["the"],"sorting helps":["here."],"sorting in":["a"],"sorting is":["not"],"sorting of":["inputs"],"sorting or":["grouping"],"sorting over":["and"],"sorting part,":["but"],"sorting the":["output","letters","students","values","two"],"sorting them":["in"],"sorting, but":["then"],"sorting, lowercasing":["and"],"sorting, therefore":["I"],"sorting/grouping, which":["I"],"sorts of":["cases","things","functions,","issues","functions"],"sorts that,":["then"],"sorts, so":["the"],"sound 3":["\"Pling\""],"sound 5":["\"Plang\""],"sound 7":["\"Plong\""],"sound better":["to"],"sound like":["a"],"sound of":["it,"],"sound, but":["it"],"sounds a":["lot"],"sounds about":["right"],"sounds awesomely":["suiting"],"sounds like":["a","it","an"],"sounds very":["interesting"],"sounds, i":["moved"],"source ==":["length","sort"],"source and":["results](http://lpaste.net/7484140762804781056))"],"source as":["RULES"],"source but":["if"],"source code":["to"],"source code,":["mine"],"source for":["prime"],"source it":["turns"],"source string":["multiple"],"source to":["`map`","Functor","apply"],"source, \"isSuffixOf\"":["uses"],"source, and":["it's"],"source](http://hackage.haskell.org/package/base-4.6.0.1/docs/src/GHC-Base.html#map) after":["writing"],"source` is":["computed"],"sources that":["will"],"space (and":["constant","at"],"space `[x,":["x"],"space after":["the","`not`?","a","`else","the"],"space and":["has","time","is","with","O(n)","linear"],"space as":["using"],"space because":["it's","it"],"space before":["`transform"],"space behavior":["depends"],"space between":["`not`","`error`","a","the","a","the","a","the"],"space characters,":["I"],"space detection,":["rather"],"space due":["to"],"space for":["this","this"],"space from":["the"],"space in":["editors.","`fromString`","the"],"space indent,":["where"],"space indent;":["the"],"space instead":["of"],"space is":["important.","more"],"space it":["all","takes"],"space leak":["that","with","because","with","problems","caused","when","(these","for","is","(storing","because","(I","(the","and","due","can","since","due","because","(building","here.","in","because","issue","in","is","here,","in","when","and/or","because"],"space leak).":["Instead"],"space leak,":["`foldl'`","because","and","but","has","because"],"space leak.":["`foldl`","For","You","The","See","The","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","That","For","When","Instead"],"space leaks":["are","in","due","usually"],"space leaks,":["there"],"space of":["a"],"space overflow":["error"],"space performance.":["Adding"],"space proportional":["to"],"space required":["is","is","is","is","is"],"space than":["actually","a","a","a","a","the","O(max"],"space thing":["would"],"space to":["store","evaluate"],"space when":["O(1)","evaluating"],"space with":["that"],"space would've":["sufficed."],"space'. That":["it"],"space, \\x2002":["En"],"space, and":["then","using","you"],"space, even":["a"],"space, however":["there"],"space, punctuation,":["or"],"space-leak, and":["the"],"space. A":["linear"],"space. Everything":["else"],"space. I":["think"],"space. Importing":["from"],"space. The":["following"],"space. fromListWith":["or","or","or","or","or"],"space. they":["don't"],"space/tab indentation":["wasn't"],"space? Applying":["strip"],"spacers between":["numbers,"],"spaces (though":["tests"],"spaces (you":["still"],"spaces after":["a"],"spaces and":["punctuation."],"spaces around":["the","`::`","`::`,","the","it,"],"spaces depending":["on"],"spaces even":["inside"],"spaces for":["top","where","indetetion"],"spaces from":["the","the"],"spaces in":["here."],"spaces inside":["either"],"spaces instead":["of"],"spaces just":["inside"],"spaces might":["be"],"spaces not":["to"],"spaces offset,":["i.e.:"],"spaces on":["the","both"],"spaces or":["null"],"spaces rather":["than"],"spaces seems":["unusual"],"spaces when":["the"],"spaces with":["'trim'"],"spaces), otherwise":["if"],"spaces, and":["the"],"spaces, etc,":["which"],"spaces. Also":["`[max,(max"],"spaces. Alternatively":["the"],"spaces. I":["don't"],"spaces. You":["can"],"spaces. [This":["link]"],"spaces. `mapFunc`":["is"],"spaces? This":["is"],"spacing etc.":["Is"],"spacing for":["the"],"spacing here":["is"],"spacing nit":["in"],"spacing of":["parentheses"],"spacing. The":["asymmetry"],"spaghetti on":["the"],"span isAlpha":["str"],"span the":["whole"],"spare you":["a"],"spares us":["from"],"speak for":["the"],"speaker I":["always"],"speaking bytestrings":["leads"],"speaking if":["you're"],"speaking you":["don't"],"speaking, `s''`":["should"],"speaking, all":["top-level"],"speaking, it's":["usually"],"speaking, lists":["are"],"speaking, reviewers":["should"],"speaking, top-level":["bindings"],"speaking, you":["could"],"spec \"does":["not"],"spec as":["that"],"spec being":["able"],"spec considerably":["to"],"spec doesn't":["say"],"spec for":["`count`","`.:`","this"],"spec has":["changed"],"spec have":["much"],"spec in":["the"],"spec is":["talking","spec.","a"],"spec neither":["tests"],"spec on":["sanitize"],"spec or":["tests."],"spec ought":["to"],"spec, I":["ported","separated"],"spec, I'd":["implement"],"spec, and":["they're"],"spec, even":["though"],"spec, though":["I"],"spec. Carry":["on,"],"spec. The":["examples"],"spec. This":["is"],"special `TVarIO`":["commands?"],"special and":["doesn't"],"special case":["that.","`[]`","checks","for","of","and"],"special case.":["Thanks!"],"special cases":["now,","will"],"special cases.":["I","Thanks"],"special char":["(what"],"special characters":["in"],"special on":["its"],"special situation":["to"],"special treatment":["and"],"special way,":["so"],"special with":["it,"],"special, but":["there's"],"special, or":["filter"],"special-case anything.":["If"],"special-case for":["`\"\"`"],"specialization is":["necessary."],"specialized for":["reuse."],"specialized function":["`sum`"],"specialized map":["function,"],"specialized to":["compile","Int.","`Integer`"],"specialized... seemingly":["too"],"specializes to":["`Int`"],"specializing them":["as"],"specific Char":["(other"],"specific and":["would"],"specific case":["and","of","the"],"specific character":["here."],"specific chars":["that"],"specific compiler":["flags."],"specific exercises":["with"],"specific functions,":["it's"],"specific information":["on"],"specific meaning":["and"],"specific nucleotide":["or"],"specific nucleotides).":["You"],"specific on":["the"],"specific order,":["this"],"specific permutation":["efficiently."],"specific reason":["functions"],"specific so":["not"],"specific syntax":["to"],"specific than":["a"],"specific thread":["is"],"specific to":["the","the","\u003ccode\u003etoRNA\u003c/code\u003e","me,"],"specific transformation":["is","is"],"specific trick":["you"],"specific was":["to"],"specific way":["to"],"specific, but":["it's"],"specific. Other":["than"],"specifically \"Because":["of","of","of"],"specifically `fromEnum`":["and"],"specifically `wordsBy`,":["so"],"specifically as":["helpers"],"specifically does":["a"],"specifically the":["Monoid"],"specification doesn't":["cover","cover"],"specification for":["this"],"specification of":["this"],"specification, I":["just"],"specification. Input":["data"],"specifications and":["the"],"specifications are":["concerned,"],"specified 26":["element"],"specified in":["the","the"],"specified is":["that"],"specified that":["the"],"specifies that":["the"],"specifies the":["input"],"specify LANGUAGE":["parameters"],"specify all":["of"],"specify only":["the"],"specify the":["`nucleotideCounts`","signature","type","type","type"],"specify this":["particular"],"specify type":["I.e.:"],"specify using":["String"],"specifying that":["the"],"specifying the":["functions"],"specifying which":["functions"],"specs (I":["test"],"specs for":["the"],"specs say":["that"],"speculate this":["is"],"speculated performance":["gains."],"sped it":["up"],"sped up":["`lastFour`"],"speed but":["also"],"speed hack":["that"],"speed of":["tail"],"speed really":["for"],"speed you'll":["be"],"speedup when":["it"],"speedup. Not":["a"],"spell out":["the"],"spelled `isSeparator`.":["You"],"spelled out,":["just"],"spelling should":["be"],"spelt out":["the"],"spend a":["lot","week","little"],"spend some":["time,"],"spent a":["long"],"spent an":["hour"],"spent on":["the"],"spent some":["more"],"spent the":["most","time"],"spent too":["much"],"spine is":["strict.","always"],"spine lazy":["data"],"spine of":["the","the"],"spine strict":["data"],"spine-lazy data":["structure","structure,","structure","structure","structure."],"spine-lazy, such":["as"],"spine-strict (such":["as","as"],"spine-strict data":["structure","structure.","structure,","structure…","structure","structure,","structure","structure.","structure.","structure,"],"spine-strict it":["will"],"spine-strict result":["(when"],"spine-strict values":["(such"],"spine-strict values\".":["Stuff"],"spine-strict. See":["here:","also"],"spine-strict. You":["can"],"spine-strictness etc.":["in"],"spiral of":["type"],"spirit of":["the","the","the","exercism,","pointfree","pointfree","pointfree","[Avoiding"],"spit out":["(like"],"spitting out":["an"],"split Places":["is"],"split String":["into"],"split a":["line","ten-character","string"],"split and":["data.char"],"split by":["3,"],"split correctly":["you"],"split filters":["into"],"split function":["instead"],"split into":["two","words"],"split it":["into","up.","by"],"split naturally":["into"],"split often":["makes"],"split on":["anything","this","any","any"],"split out":["the"],"split package":["recommended"],"split quoted":["strings"],"split rest'`":["is"],"split str":["="],"split the":["text","string","words,","number","string","longer","numbers","number"],"split them":["or"],"split this":["solution"],"split to":["implement"],"split up":["the"],"split using":["filter"],"split was":["a"],"split when":["as"],"split words":["out"],"split would":["be"],"splitAt 3":["xs","s`"],"splitAt but":["with"],"splitAt could":["save"],"splitDigits =":["splitPlaces","splitPlaces"],"splitOn \"\\n\"":["diagram"],"splitOn '\\n'":["is"],"splitPlaces [3,":["3,","3,","....]"],"splitPlaces. All":["the"],"splitWhen function":["to"],"splitWords .":["normalise`"],"splits based":["on"],"splitted over":["the"],"splitted, but":["it's"],"splitter using":["some"],"splitting a":["bit"],"splitting code,":["is"],"splitting combinators.":["This"],"splitting into":["words,"],"splitting lists":["by"],"splitting on":["the"],"splitting plus":["filtering"],"splitting predicate.":["For"],"splitting string":["to"],"splitting the":["words."],"splitting them":["into"],"splitting up":["your","delimited"],"splitting was":["based"],"splitting with":["Data.List.Split"],"spoil it":["for"],"spoil too":["much"],"spoiler if":["my"],"spoiler, here":["it"],"spoke about":["that"],"spoke of":["in"],"spoken about":["foldl"],"spot for":["the"],"spot on":["the"],"spot on,":["especially"],"spot where":["applicatives"],"spotted, thanks":["@pinkie!"],"spotting redundant":["brackets,"],"spread out":["the"],"spreading it":["out"],"spurious test":["errors"],"sqrt and":["ceiling."],"sqrt len)":["[1..]"],"sqrt n":["(can"],"sqrt n,":["thank"],"sqrt, since":["it's"],"sqrtInt on":["a"],"sqrt` could":["work"],"square 64\u003c/pre\u003e":["for"],"square [1..64]`,":["to"],"square a":["certain"],"square and":["total"],"square brackets,":["either"],"square is":["`square","nice,"],"square larger":["than"],"square may":["be"],"square n":["is"],"square root":["of","algorithm"],"square that":["is","it"],"square, choose":["the"],"squareSize text":["="],"squares before":["this"],"squares formula:":["http://jeremykun.com/2011/06/24/sums-of-the-first-n-numbers-squares/"],"squares is,":["using"],"squares, `2^0":["+"],"squares, breaking":["the"],"st /=":["x```?"],"st =":["M.insertWith"],"st x```":["is"],"st)`, which":["you"],"st, isAlpha":["x]`"],"stNum +":["wdNum"],"stNum \u003e":["wdNum"],"stNum` -":["but"],"st` is":["computed"],"st` out":["so"],"st` rather":["than"],"stable modules":["(including"],"stack and":["`foldr`"],"stack as":["long"],"stack for":["large"],"stack in":["a"],"stack is":["that","that","that","that","that"],"stack of":["thunks"],"stack on":["large"],"stack overflow":["(for","and/or","when","because","when","when","or","at","and/or","if","or","happens."],"stack overflow).":["You","On"],"stack overflow,":["etc.),","something"],"stack overflows":["when"],"stack space":["required","required","required","required","required","because","proportional","overflow","and","to","when"],"stack space.":["fromListWith","fromListWith","fromListWith","fromListWith","fromListWith","The"],"stack that":["is"],"stack the":["size"],"stack to":["evaluate","evaluate"],"stack up":["they"],"stack usage":["is","is"],"stack when":["the","it"],"stack) before":["it"],"stack. See":["[Foldr"],"stack. The":["right","right","right","right","right","right"],"stack. `foldr`":["has"],"stage and":["the"],"stand for":["(you"],"stand out":["when"],"stand the":["idea"],"standalone `isAnagram`":["then"],"standard Enum":["implementation"],"standard Haskell":["style.","convention"],"standard `translate`":["function"],"standard `words`":["functions"],"standard but":["when"],"standard fold":["or"],"standard function":["`isSpace`","that","`any`.","already"],"standard functions":["`isUpper`","that"],"standard functions),":["so"],"standard libraries":["more.","but","but","seem"],"standard libraries,":["which"],"standard library":["better."],"standard library,":["not","or","it's"],"standard library.":[":)","The"],"standard library;":["how"],"standard like":["Monoid,"],"standard method":["like"],"standard practice":["mostly"],"standard runhaskell":["command"],"standard style":["to"],"standard to":["use"],"standard typeclass":["you"],"standard warnings":["enabled?"],"standard way":["to"],"standard with":["the"],"standard? I":["prefer"],"standart function":["for"],"stands for":["*DO*","non"],"stands for,":["so"],"stands, I'm":["just"],"start (and":["end)"],"start ..":["end]`."],"start after":["`case`."],"start and":["finish"],"start date":["based","and"],"start end`.":["This"],"start evaluation":["of"],"start finish`":["can"],"start from":["left"],"start generating":["output"],"start getting":["completely"],"start implementing":["them"],"start in":["the"],"start including":["that"],"start looking.":["Functor"],"start making":["changes"],"start of":["a","a","the"],"start on":["arrows"],"start out":["with"],"start paying":["more"],"start small":["first."],"start that":["again!"],"start the":["next","right","body"],"start them":["on"],"start thinking":["about","of"],"start this":["exercise."],"start to":["impair"],"start with":["an","0).","on","2","the","creation","just"],"start with.":["I'd"],"start, but":["there"],"start, especially":["considering"],"start, it":["would"],"start, structuring":["with"],"start-1 ..":["end]`"],"start. Even":["to"],"start. These":["are"],"startDay =":["mkDate"],"startFrom ..":["stopAt]`."],"started complaining":["about"],"started doing":["this"],"started implementing":["the"],"started in":["returns"],"started looking":["really"],"started on":["the"],"started out":["with","with","using"],"started passing":["around"],"started reading":["about"],"started refactoring":["until"],"started rewriting":["this"],"started the":["pattern"],"started to":["read","understand","find","write"],"started using":["a"],"started with":["foldl'","a","the","the"],"started wondering":["how"],"started. Even":["the"],"started. I":["would"],"started. Wish":["that"],"starting from":["right","left.."],"starting out!":["There"],"starting the":["evaluation","evaluation"],"starting to":["learn","get","get","believe","become","understand","look","become","think","get","give","think"],"starting type":["uses"],"starting with":["`'a'`","`_`","the"],"startled me...":["but"],"starts from":["the"],"starts out":["as"],"state (i.e.,":["is"],"state along":["with"],"state and":["no","on"],"state created":["with"],"state g":["for"],"state is":["imitation"],"state machine":["or"],"state might":["be"],"state monad":["-","instead,"],"state monad,":["and"],"state not":["even"],"state to":["remember"],"state which":["the"],"state, I":["hadn't"],"state, but":["outside"],"state, so":["inside"],"state, the":["only"],"state. I":["ended"],"stated and":["a"],"stated as":["`[f,"],"stated is":["correct."],"stated that":["responseFor"],"stated twice.":["If"],"statement (which":["always"],"statement (you":["would"],"statement and/or":["```hiding```."],"statement as":["correspondent"],"statement check":["(with"],"statement doesn't":["agree"],"statement in":["`robotName`."],"statement into":["a"],"statement is":["mainly"],"statement just":["says"],"statement like":["yours"],"statement of":["e.g."],"statement so":["that"],"statement that":["covers"],"statement to":["export","avoid"],"statement' part,":["but"],"statement, I":["can"],"statement, buts":["that's"],"statement, everything":["below"],"statement, just":["leave"],"statement, that":["looks"],"statement, which":["would"],"statement. That":["way"],"statement`, there":["is"],"statements can":["be"],"statements in":["the"],"statements now":["too."],"statements would":["be"],"statements, and":["do"],"statements. Check":["out"],"states that":["numbers"],"static O(n)":["\"first","first"],"statically determined":["(when"],"status for":["instance."],"stay in":["String","memory."],"stay inside":["the"],"stay the":["same."],"staying in":["Char."],"stays small":["it"],"std dev:":["311.6777","283.4461","66.00215","185.9828","12.91355","151.2879"],"stdArgs{ maxSuccess":["="],"stdlib do":["it"],"stdlib uses":["this"],"steal it":["for"],"steering me":["towards"],"step (in":["this"],"step and":["adds","a"],"step by":["interpolating"],"step further":["and"],"step further,":["you"],"step here?":["Its"],"step in":["the","every","the","the","ghci"],"step individually,":["rather"],"step is":["totally"],"step of":["the","an"],"step size":["is"],"step someone":["or"],"step through":["how"],"step to":["keep","getting"],"step what":["to"],"step, and":["this"],"step, here":["you"],"step? Ideally,":["you"],"step? So":["something"],"step? You":["can"],"stepping through":["every"],"steps of":["transforming"],"steps) of":["type"],"steps, but":["this"],"steps, where":["N"],"stick it":["into"],"stick out":["like"],"stick to":["only","the","Haskell","`ClassyPrelude`","functions","adding"],"stick with":["empty","a","point","a","this","that.","this","ClassyPrelude,","String","your"],"sticking with":["two","plain"],"sticks rather":["than"],"still (log":["n)"],"still :-)":[")"],"still I":["like"],"still O(1)":["because"],"still `(.:)`":["but"],"still ```2n```":["versus"],"still a":["Haskell","few","very","space","strictness","space","bit","problem","space","bit","little","good","couple"],"still allows":["you"],"still always":["less"],"still apply.":["Of"],"still based":["on"],"still battling":["to"],"still be":["desirable","ok","total,","just","efficient).","fast.","used","there","as"],"still best":["to"],"still better":["practice","to"],"still by":["using"],"still can't":["work","help"],"still do":["a","the","not","not"],"still doesn't":["make"],"still don't":["know","get,","like","fully","have","get"],"still end":["up"],"still exported":["as"],"still extract":["the"],"still fail":["to"],"still fails":["one"],"still fairly":["new"],"still feel":["that"],"still feels":["really","like","messier"],"still fill":["in"],"still get":["called","a","the","an"],"still getting":["used"],"still gnarly,":["but"],"still going":["to"],"still good":["style,"],"still has":["the"],"still have":["to","the","to","to","not","a","to","to","linear"],"still haven't":["worked","grokked"],"still honing":["my"],"still hopefully":["being"],"still import":["Data.Map.Strict,"],"still in":["the","the"],"still indenting":["after"],"still index":["on"],"still introduces":["some"],"still invokes":["`sort`"],"still isn't":["a","strict","dealt"],"still just":["hacking"],"still keep":["the"],"still keeping":["the"],"still lacks":["explicit"],"still learning":["a","Haskell,","haskell,"],"still like":["my"],"still look":["into"],"still looked":["better"],"still looks":["somewhat"],"still make":["sense"],"still missing":["something?","a","type"],"still more":["compact"],"still need":["relative","to","`readTVar`"],"still new":["to"],"still new,":["what"],"still no":["reason"],"still not":["have","working","too","sure","sure","sure","as","comfortable","passing?","satisfied"],"still on":["that"],"still only":["passes"],"still part":["of"],"still pass":["the","for"],"still performing":["a"],"still persists":["(and"],"still persists,":["but"],"still possible":["to"],"still prefer":["this"],"still pretty":["fast","far","flakey"],"still primitive":["but"],"still quite":["a"],"still readable.":["I"],"still relatively":["new"],"still required":["another"],"still robot":["a"],"still room":["for"],"still seems":["to"],"still something":["that"],"still suffers":["from"],"still take":["quite"],"still the":["space"],"still there":["(lines"],"still things":["left"],"still think":["you","`incrementBalance`"],"still too":["difficult"],"still traverse":["the"],"still trying":["to"],"still unhelpful":["from"],"still uses":["pattern","old"],"still using":["lists"],"still very":["inefficient","accessible)"],"still want":["to","to","to","to"],"still work":["if"],"still working.":["If"],"still would":["be","be","be"],"still wrapping":["my"],"still wrestling":["with"],"still write":["it"],"still, I":["can't"],"still, here's":["another"],"still, it":["would"],"still. The":["other"],"stirngs with":["\"\\n\"."],"stm may":["be"],"stole some":["of","code"],"stone you":["can"],"stop and":["go"],"stop as":["soon"],"stop comparing":["sooner"],"stop compiling":["if"],"stop iteration":["when"],"stop itrrations,":["but"],"stop searching":["once"],"stop. This":["allows"],"stopAt]`. I'd":["also"],"stopped thinking":["about"],"stops ```":["`seq`"],"stops early":["when"],"stops working":["sometimes,"],"storage (just":["an"],"storage and":["a"],"storage for":["triagonal"],"storage layout":["I.e."],"storage should":["be"],"storage when":["you"],"store `(((1":["+"],"store `canonicalize":["s1`"],"store `toUpper":["k`"],"store a":["thunk","thunk,"],"store all":["those","the"],"store and":["buy"],"store either":["rows"],"store grades,":["that"],"store it":["as"],"store it).":["If"],"store matrix.":["I've"],"store sizes":["of"],"store that":["additional"],"store the":["name,","name","actual","result","result","result"],"store two":["dimentional"],"stored flattened.":["Also,"],"stored in":["a","an","the"],"stores a":["series"],"stores something":["equivalent"],"storing `1`,":["but"],"storing an":["Int","Int","Int).","Int"],"storing as":["the"],"storing bytes":["that"],"storing in":["the"],"storing just":["the","an"],"storing nested":["thunks"],"storing the":["student","computation","Int.","thunk","thunk","integer.","thunk","computation","appropriate"],"storing thunks":["that"],"story for":["the"],"story is":["that"],"story, but":["that's"],"str &&":["all","all"],"str (repeat":["1))\u003c/pre\u003eNotice"],"str =":["str","all","(last","...`","allWhitespace","take","any","any","first'","first'","endswith","True","frequencyTable"],"str ==":["'?'`","(map","'?')`,","'?'`"],"str \u003e":["0`"],"str capStr`":["is"],"str capStr```":["because"],"str is":["\"\""],"str will":["be","be"],"str'` so":["that"],"str) &&":["any","all"],"str) &amp;&amp;":["any"],"str)` check":["-"],"str)` encodes":["a"],"str)` is":["`False`,"],"str)` to":["check"],"str)` would":["be"],"str)`, same":["with"],"str+1 -":["n)"],"str\u003c/pre\u003e But":["that's"],"str\u003c/pre\u003e and":["not"],"str` binds":["to"],"str` might":["benefit"],"str` simplifies":["to"],"str` you":["can"],"str`. Line":["9."],"straight away":["as"],"straight from":["a","the"],"straight up":["replacing"],"straight-up copy.":["I'm"],"straightforward although":["it"],"straightforward and":["inefficient","short","efficient","efficient"],"straightforward implementation":["of","that"],"straightforward rather":["than"],"straightforward solution":["without"],"straightforward solution.":["One","Some"],"straightforward than":["using"],"straightforward to":["understand","solve","use","understand"],"straightforward way":["to","to"],"straightforward, but":["I"],"straightforward. Again,":["strings"],"strand $":["repeat"],"strand (repeat":["1))`."],"strand 4":["times","times.","times"],"strand four":["times."],"strand of":["DNA"],"strand only":["once"],"strand. Writing":["it"],"strand1 strand2`,":["but"],"strand2`, but":["maybe"],"strand]` is":["more"],"strand` though":["that"],"strands in":["code"],"strands, as":["`defaultCounts`"],"strange being":["able"],"strange but":["the"],"strange coming":["from"],"strange implementation":["of"],"strange layout.":["Other"],"strange looking,":["but"],"strange results":["for"],"strange that":["you"],"strange things":["on"],"strange to":["repeat","make","see","see","me"],"strange way":["to"],"strange, in":["that"],"strange, it":["was"],"strange, so":["underscores"],"strange. I":["did"],"strange. It":["works"],"strange. The":["way"],"strange. You":["convert"],"strangely they're":["not"],"strangeness is":["strange."],"strategies and":["not"],"strategies that":["optimize"],"strategies with":["chunks"],"strategies, so":["it's"],"strategy I":["highly"],"strategy for":["performing","transforming","filtering"],"strategy from":["word-count"],"strategy of":["accumulation"],"strategy to":["use"],"strategy would":["be"],"strategy: http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf":["–"],"stream fusion":["makes","correctly,","made"],"stream-based IO.":["It"],"strength in":["that"],"stretch for":["me"],"stretch saying":["the"],"strict MVar":["provided"],"strict Map":["anyway."],"strict `Text`":["at"],"strict `foldl'`":["or","if"],"strict `fromListWith`":["implementation"],"strict accumulator":["such","and","for"],"strict accumulator,":["whether"],"strict accumulator.":["It"],"strict as":["well?","well"],"strict because":["there's"],"strict bytestring":["or"],"strict data":["structures"],"strict evaluation":["such","desirable","to"],"strict evaluation),":["but"],"strict evaluation,":["and"],"strict evaluation?":["I"],"strict fold":["over","is","creates","left"],"strict fold,":["which"],"strict fold.":["See"],"strict foldl":["on"],"strict folds":["for"],"strict immutable":["languages."],"strict in":["its","its","its","its","its","its","the","the","its","its"],"strict instead":["of"],"strict language":["intermediate"],"strict language,":["since"],"strict languages":["are","this"],"strict left":["fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold).","fold.","fold","fold","fold","fold","fold","fold","fold","fold","fold.","folds\",","fold,","fold","fold.","fold","fold","fold","fold","fold","fold","fold","folds","fold","fold","fold"],"strict map":["because","avoid"],"strict maybe":["version"],"strict modules,":["meaning"],"strict or":["not,","lazy"],"strict over":["its"],"strict package":["`Data.Strict.Tuple`"],"strict pattern":["match"],"strict program":["order."],"strict rather":["than"],"strict simulation":["then"],"strict so":["unfortunately","it","the"],"strict solution":["using"],"strict structures":["such"],"strict to":["weak-head","normal","avoid"],"strict unless":["lazines"],"strict use":["foldl',","foldl',","foldl',"],"strict value":["semantics."],"strict values":["for"],"strict variant":["of"],"strict variant,":["I"],"strict version":["of","as","or","of","of","of","instead.","`foldl'`","of","as","of","`modifyTVar'`","of"],"strict version.":["I"],"strict version?":["Should"],"strict versions":["of","instead.","of","of"],"strict vs":["lazy"],"strict way":["and"],"strict will":["end"],"strict) instead":["of"],"strict, I'd":["appreciate"],"strict, because":["of"],"strict, e.g.":["`fromListWith"],"strict, otherwise":["the"],"strict, so":["I","you"],"strict, this":["doesn't"],"strict, uses":["Int,"],"strict, which":["is"],"strict-value map.":["You"],"strict. A":["great"],"strict. I":["guess"],"strict. Note":["that"],"strict. Otherwise,":["using"],"strict. `seq`":["only"],"stricter variant":["of"],"strictly (such":["as"],"strictly equivalent":["to"],"strictly evaluated.":["With"],"strictly here,":["since"],"strictly necessary":["since","because"],"strictly necessary.":["It's"],"strictly needs":["to"],"strictly, as":["this"],"strictly, so":["it"],"strictness (`foldl`":["could"],"strictness -":["as"],"strictness and":["how"],"strictness annotations.":["If"],"strictness characteristics?":["Tip:"],"strictness concerns":["in"],"strictness doesn't":["really"],"strictness fold":["is"],"strictness in":["my","the"],"strictness is":["provided","also","good"],"strictness issue":["with","is","with","is","with","since","per","which"],"strictness issue,":["you"],"strictness issue:":["Data.Map's","Data.Map's"],"strictness issues":["that","with","for","here.","with"],"strictness issues,":["you"],"strictness issues.":["Basically"],"strictness it's":["still"],"strictness on":["insertWith."],"strictness problem":["with","you"],"strictness qualifiers,":["though"],"strictness reasons,":["you"],"strictness semantics":["for"],"strictness stuff":["means"],"strictness that":["you're"],"strictness when":["I'll"],"strictness where":["appropriate"],"strictness you":["might"],"strictness, and":["this"],"strictness, check":["out"],"strictness. Although":["I'm"],"strictness. If":["you're"],"strictness. `foldl`":["is"],"strictness. `fromListWith":["(+)`"],"strictness/space leak":["reasons,"],"strikes me":["as"],"string \"\"":["would"],"string \"0101ups01\",":["how"],"string \"1,":["2,"],"string \"a":["a"],"string $":["map"],"string (checking":["for"],"string (consider":["words"],"string (so,":["will"],"string *is*":["a"],"string 4":["times"],"string =":["all","last"],"string ==":["map","'?'`","'?'`"],"string `\"'C'\"`,":["so"],"string `\"A\"`.":["A"],"string ```\"\"```":["is"],"string ```101ups000```":["result"],"string a":["priori"],"string after":["you"],"string along.":["The"],"string and":["tells","also","breaks","returns","returns","than","apply"],"string are":["uppercase."],"string as":["\"\""],"string at":["the"],"string before":["`==`","splitting","fold,"],"string being":["test,"],"string belong":["to"],"string brings":["you"],"string but":["on"],"string by":["with"],"string can't":["be"],"string concatenation":["?"],"string concatenations":["but"],"string do":["not"],"string ends":["in","in"],"string first,":["and"],"string for":["each","error,","instance."],"string four":["times","times."],"string from":["it."],"string function":["is"],"string generation,":["except"],"string had":["been"],"string has":["spaces","invalid","some"],"string however":["you"],"string if":["it"],"string in":["verses","any"],"string instead":["of"],"string interpolation":["there's"],"string into":["first","words.","the","a"],"string is":["faster","uppercase.","not","a","repeated,","\"\".","broken,","passed","all","ugly.","\"empty\";","entirely","usually","a","more","empty","silence,","given."],"string literal":["anyways,","instead"],"string literals":["instead",":)","with","that"],"string literals\"":["in"],"string manipulation":["on","is."],"string manipulations":["in"],"string matrix,":["this"],"string may":["go","be"],"string might":["represent"],"string multiple":["times","times."],"string munging":["is"],"string notation,":["and"],"string of":["\"a","all","thunks"],"string one":["(that","char?"],"string parsing,":["and"],"string pattern,":["right?"],"string representation":["of","of","of","of"],"string representation.":["This"],"string safely,":["but"],"string serialization?":["I"],"string several":["times..."],"string so":["it's"],"string substitution":["library"],"string substitution.":["Am"],"string syntax":["that"],"string templating":["to"],"string test,":["because"],"string that":["was","doesn't","makes","could","has","will","you're"],"string the":["entire"],"string to":["isQuestion.","a","use","a","\"\"","nucleotideCounts","that","text","the","be","a"],"string twice.":["Really,"],"string type":["than"],"string typing":["FTL."],"string unless":["you"],"string was":["a"],"string were":["passed."],"string when":["it"],"string while":["foldling"],"string with":["all","binary","less"],"string without":["using"],"string would":["result"],"string you":["could"],"string\". But":["I"],"string) but":["I"],"string) using":["`fromListWith`,"],"string). I'm":["using"],"string)` is":["evaluated"],"string)` or":["`splitAt"],"string, accumulate":["the"],"string, also":["it"],"string, moreover":["this"],"string, not":["the"],"string, or":["move"],"string, so":["last","you","you"],"string, when":["in"],"string, while":["`any`"],"string, without":["the"],"string. Even":["if"],"string. If":["you"],"string. Instead":["of"],"string. It":["seems"],"string. Since":["there's"],"string. That's":["very"],"string. The":["alternative","one"],"string. This":["would"],"string. You":["can","may"],"string. it":["would"],"stringDistance =":["(sum"],"stringMap)` or":["doing"],"stringMap)``` works":["fine."],"stringMap` on":["the"],"stringToPlants .":["map"],"stringToPlants =":["map"],"string` could":["be"],"string` is":["`(all"],"string` might":["read"],"string`, then":["it"],"string`. Same":["goes"],"string`. Though":["I"],"strings (`T.isSuffixOf`":["is"],"strings (anagrams)":["look"],"strings (not":["so"],"strings -":["that"],"strings 2\"":["$","$"],"strings `a`":["and"],"strings and":["returns","comparing"],"strings are":["valid"],"strings aren't":["supposed"],"strings being":["lists."],"strings bring":["to"],"strings from":["the","the"],"strings here":["that"],"strings if":["you","`isAnagramOf`"],"strings in":["isShout","this","its","a","the","this"],"strings instead":["of"],"strings is":["like"],"strings like":["`\"of"],"strings like:":["```\"my"],"strings not":["of"],"strings of":["`\u003e\u003e=`","words,"],"strings should":["be"],"strings such":["as"],"strings that":["make","contain","have","shouldn't"],"strings this":["short"],"strings to":["make","ints","build"],"strings were":["chosen"],"strings which":["made"],"strings will":["have","be"],"strings with":["```++```?"],"strings, but":["it'd","I"],"strings, so":["you"],"strings. For":["example:"],"strings. Is":["some"],"strings. Nice":["piece."],"strings. Surely":["there's"],"strings. There's":["nothing"],"strings? How/where":["can"],"strings` test":["is"],"strip $":["map"],"strip =":["map"],"strip all":["whitespace"],"strip first":["solves"],"strip for":["strings."],"strip function":["on","seems"],"strip function,":["but"],"strip it":["might"],"strip the":["string"],"strip to":["check"],"strip` just":["`words`?"],"stripped version":["of"],"stripped), but":["i"],"stripped. Yelling":["could"],"stripping all":["newline"],"stripping spaces":["with"],"strong intuitive":["feeling"],"strong preference":["for"],"strong reason":["to"],"strong typing":["e.g."],"stronger than":["the"],"strongly consider":["using","refactoring"],"strongly suggested":["by"],"structural induction.":["The"],"structure (a":["list),"],"structure (such":["as"],"structure (unless":["you're"],"structure I":["used"],"structure a":["big"],"structure and":["you","the"],"structure as":["a","this.","Data.Map"],"structure behind":["the"],"structure but":["forces","function"],"structure concurrent":["for"],"structure depends":["on"],"structure for":["many","School"],"structure instead":["of"],"structure is":["known,","_spine-strict_,","far","not"],"structure it":["was"],"structure itself":["to"],"structure may":["help"],"structure must":["be"],"structure of":["a","the","the","the"],"structure readily":["available"],"structure so":["sometimes"],"structure such":["as"],"structure supports":["atomic"],"structure that":["might","would"],"structure the":["good"],"structure there":["would"],"structure to":["make","use"],"structure with":["a","loeb","loeb"],"structure wouldn't":["it"],"structure wrapped":["up"],"structure you":["want","want."],"structure, ```add```":["should"],"structure, and":["Haskell","I","I"],"structure, but":["that","it"],"structure, like":["a"],"structure, meaning":["that"],"structure, so":["you","what","its"],"structure, theoretically":["if"],"structure, there":["is"],"structure, this":["operation"],"structure. I":["also"],"structure. It":["will"],"structure. See":["http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'","http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl'"],"structure. You":["can't"],"structured doesn't":["make"],"structured that":["way"],"structures (README":["and"],"structures (such":["as","as"],"structures and":["functions"],"structures explicitly,":["I.e."],"structures have,":["or"],"structures in":["different"],"structures like":["this."],"structures of":["all"],"structures or":["lookup"],"structures should":["be","be"],"structures such":["as"],"structures that":["could","leads"],"structures vs":["the"],"structures) with":["`map`,"],"structures, MVars":["are"],"structure— each":["value"],"structure… in":["this"],"structuring with":["guards"],"struggled a":["bit"],"struggling to":["see"],"struggling with":["the"],"stub out":["stuff."],"stubborn of":["me"],"stuck on":["them.","this","this","the","the","at"],"stuck that":["in"],"stuck there":["so"],"stuck to":["the"],"stuck with":["that","`String`,","Data.Text","this","MonadPlus's"],"student identifier":["available"],"student lists":["sorted,","some"],"student names":["before"],"student, then":["decomposes"],"students after":["it's"],"students in":["same","the"],"students were":["expected"],"students, but":["this"],"students. I":["also"],"studentsCount)`). I":["could"],"studentsCount)`). Is":["having"],"studies; I've":["never"],"study a":["bit"],"study before":["I"],"study list,":["but"],"study on":["bit-shifting,"],"stuff a":["lot.","little"],"stuff and":["used","the","reinforced"],"stuff but":["as"],"stuff can't.":["Take"],"stuff for":["a"],"stuff from":["two","a"],"stuff go":["away."],"stuff in":["Haskell","the","`prettyPrint`"],"stuff is":["still"],"stuff just":["looks"],"stuff like":["that.","`lc`.","this","Data.Map","[`IORef`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-IORef.html)"],"stuff means":["this"],"stuff on":["the"],"stuff out":["easily,","in"],"stuff regardless":["of"],"stuff that":["let"],"stuff that's":["harder"],"stuff until":["I"],"stuff with":["`Data.Set`","more","bottom"],"stuff works":["a"],"stuff! I":["can"],"stuff, so":["thanks","there"],"stuff, something":["like"],"stuff, thanks.":["A"],"stuff. I":["can't","looked","also","think"],"stuff. I've":["totally"],"stuff. Okay,":["that's"],"stuff. When":["I'm"],"stuffs like":["append"],"stumble upon":["it"],"stumbled around":["with"],"stumbled upon":["it"],"stumped, so":["submitted"],"stupid, this":["way"],"style (I'm":["not"],"style (if":["such"],"style (in":["some,"],"style (since":["it"],"style (unless":["you"],"style I":["preferred"],"style `swapConcat":["="],"style and":["general","using","in","how","syntax.","syntax","write","redundancy.","naming","composition"],"style applying":["```flip```"],"style as":["`isSuffixOf","it","this"],"style but":["couldn't"],"style by":["default.","default."],"style choice":["so"],"style compositions?":["I"],"style everything":["looks"],"style for":["`silence","the","multiple"],"style from":["learn"],"style gets":["a"],"style guide":["was","says","is"],"style guide,":["as"],"style guide.":["There"],"style guides":["are"],"style if":["you"],"style in":["your","my","the","terms"],"style is":["great!","something","to","good","supposed","quite","to","nice","a","perfectly","using","to"],"style issues":["though."],"style it's":["in"],"style might":["be"],"style nit":["though."],"style nits":["left.","this"],"style note":["but","that"],"style of":["indentation","it.","your","implementation"],"style once":["I"],"style or":["should"],"style point:":["usually"],"style points":["out"],"style rather":["than"],"style requires":["that"],"style seems":["common"],"style since":["it","I'm"],"style so":["for"],"style than":["I"],"style that":["doesn't"],"style then":["you","you"],"style thing":["that","but","though."],"style thing,":["there's","there's","there's"],"style things":["to","(except","to"],"style though,":["I","so","it's"],"style to":["explicitly","use","pattern","write","get","use","separate","have","explicitly","give","make","express","combine","have","have","avoid","use","do","make","always"],"style unless":["you've"],"style using":["the","the"],"style version":["is"],"style with":["`foldl'`","to","enough","somewhat","no"],"style would":["be","be","look"],"style you":["prefer."],"style\" to":["combine"],"style, I":["quite","just"],"style, and":["apply","mainly","uses"],"style, basically":["`toRNA"],"style, but":["that's","for","it's","I"],"style, especially":["when"],"style, however":[":)"],"style, i.e.,":["without"],"style, if":["you'd"],"style, in":["my"],"style, it's":["customary"],"style, like":["this:"],"style, might":["make"],"style, most":["Haskell","Haskell"],"style, public":["API"],"style, some":["of"],"style, such":["as"],"style, that":["is"],"style, the":["brackets","pointful"],"style, to":["take"],"style, which":["I"],"style, you":["should","can","could","should","may"],"style-wise about":["the"],"style. Here's":["an"],"style. I'm":["still"],"style. If":["it","you"],"style. In":["Haskell,","this"],"style. Is":["this"],"style. Since":["the"],"style. Thanks":["for"],"style. This":["is","is"],"style. Though":["I"],"style. Typical":["Haskell"],"style. When":["you","you"],"style. You":["might"],"style. the":["`reverse`"],"style: function":["declaration"],"style](http://www.haskell.org/haskellwiki/Pointfree) could":["be"],"style](http://www.haskell.org/haskellwiki/Pointfree). `isThymine`":["and"],"styled such":["that"],"styles for":["that.","haskell.","them."],"styles you":["could"],"styling goes":["(petty,"],"stylistic consensus":["over"],"stylistic nitpick,":["this"],"stylistic point:":["you"],"stylistic quibble,":["the"],"stylistic taste":["prefers"],"sub-function coming":["first"],"sub-functions as":["in"],"sub-list. Otherwise,":["I"],"subclass of":["Applicative."],"subfunctions, you":["can"],"subitted a":["new"],"subject to":["fusion,"],"subject) words`":["would"],"subject) words```":["so"],"subject)``` would":["curry"],"subjective and":["I"],"subjective if":["this"],"subjective on":["when"],"subjective optional":["improvement"],"subjective style":["things","thing,","thing"],"subjective: consider":["using"],"subjectively valued":["aesthetic"],"sublime. Now":["I"],"sublist of":["the"],"sublists than":["`take"],"submission -":["if"],"submission 4,":["as"],"submission and":["the"],"submission because":["it"],"submission by":["forgetting","any"],"submission depends":["on"],"submission helped":["me"],"submission if":["you"],"submission is":["my","failing"],"submission quite":["readable."],"submission to":["reflect","be"],"submission was":["an"],"submission will":["have"],"submission), that":["that's"],"submission, and":["left"],"submission, but":["I'm","still,"],"submission, once":["I'm"],"submission, you":["might"],"submission. (Namely,":["`\":)"],"submission. Basically,":["I"],"submission. But":["the"],"submission. I'm":["not"],"submission. Is":["that"],"submission; doesn't":["pass"],"submissions and":["[this"],"submissions but":["it's"],"submissions is":["failing"],"submissions through":["`hlint`"],"submissions were":["when"],"submissions? or":["are"],"submit a":["pull","PR","pull","pull","pull","key"],"submit feedback":["to"],"submit here.":["Data.Map.Strict","Would"],"submit it":["for"],"submit it,":["though."],"submit iteration":["3"],"submit more":["test"],"submit my":["attempt"],"submit solutions":["that"],"submit the":["original","testcase"],"submit this":["by","one."],"submit this,":["I"],"submit. Unsubmit's":["still"],"submited the":["test"],"submitted 4th":["iteration"],"submitted a":["PR","new","version","new","new","new","new","new","PR.","PR"],"submitted an":["update","updated","attempt"],"submitted code":["is"],"submitted in":["error"],"submitted it":["anyways","so"],"submitted iteration":["2"],"submitted my":["first","solution"],"submitted that":["comment,"],"submitted the":["test","right","wrong","wrong","next"],"submitted this":["by","version"],"submitted this.":["Please"],"submitted two":["versions"],"submitted version.":["Having"],"submitted with":["the"],"submitted without":["saving"],"submitted, except":["that"],"submitted. I":["was"],"submitting this":["I"],"submitting, but":["I"],"suboptimal because":["of","it"],"suboptimal due":["to"],"suboptimal for":["the"],"suboptimal performance":["since"],"suboptimal since":["it"],"subpart of":["`toRNA`,"],"subscriberNumber more":["sensible."],"subscriber]] -\u003e":["(area_code,"],"subsequent digits":["either."],"subsequent test":["you"],"subset of":["the","Z"],"subset where":["the"],"substantial this":["time."],"substantial to":["my"],"substituted all":["non-alphanumeric"],"substitution library":["so"],"substitution of":["`reverse"],"substitution, makes":["`parts`"],"substitution. Am":["I"],"substract corresponding":["value"],"substract that":["value"],"substrings, so":["I"],"subtle and":["almost"],"subtle implicit":["assumptions"],"subtle issue":["with"],"subtle issues":["here."],"subtle non-strictness":["issue"],"subtle semantic":["differences"],"subtle timing":["issues"],"subtle two":["issues"],"subtle, one":["solution"],"subtle, very":["different"],"subtle. It's":["a"],"subtleties here,":["since"],"subtleties in":["it"],"subtract 1]`":["or"],"subtract from":["the"],"subtract that":["amount."],"subtract, one":["multiply,"],"subtracting 1":["infix,"],"subtraction, and":["the"],"subtraction… but":["using"],"subtractive values,":["like"],"succeed, I":["guess"],"succeeds with":["empty"],"success\", and":["\"Right\""],"successes\", in":["this"],"successful or":["not."],"successfully last":["time"],"successive sequences":["of"],"successively tries":["different"],"successor in":["an"],"succinct -":["nice"],"succinct `(,1)`,":["if"],"succinct and":["more"],"succinct as":["possible.","possible."],"succinct implementation":["for"],"succinct solution":["using"],"succinct than":["checking"],"succinct to":["define"],"succinct way":["of","to"],"succinctly like":["this:"],"succinctly. You":["shouldn't"],"succinctness, or":["would"],"such \"all-symbols\"":["questions"],"such Enum":["approach"],"such a":["little","simple","thing","good","thing","small","list","style","function?","value","problem","way","way","way","simple","way","way","way","scalene","small","relatively","way","small","way","deep","way","way","way","representation?","way","library"],"such an":["obvious"],"such approach":["may","is"],"such as":["'xs'","Clojure,","`import","using","where","`last`","\"!","using","\"respond\",","`space`,","`render`,","`foldl'`","`TVar`s)","an","`map","`seq`","using","`(((1)","using","`foldl'`","an","RX837","`alter`","Either","`undefined`","Pandoc","`enumToFrom","another","`((((1)","this.","RX837","\"always","`length`","`2","M","T","`(la,","C","Map.Strict,"],"such as:":["*filter*,"],"such associations":["as"],"such at":["`concat"],"such busy":["work,"],"such combinators":["could"],"such expression":["may"],"such folds":["are"],"such functionality":["using"],"such instead":["of"],"such language":["extensions."],"such languages":["often"],"such letters":["to"],"such lightweight":["processing."],"such long":["lines!","lines,"],"such mapping":["that"],"such nonsense,":["but"],"such optimization":["in"],"such pattern,":["as"],"such problem.":["And"],"such style":["by"],"such that":["there","isYelling","`test","the","it","it","doesn't","`fmap","some","occurrences","you","`fmap","you","there","it","you","`number`","you","you","`normalise","it","these","its","it","`fromEnum","you","fully","except"],"such that..._":["and"],"such usage":["is"],"such way":["that"],"such, but":["you"],"such, rather":["than"],"such, shouldn't":["that"],"such. There":["is"],"suffer `bstValue`":["being"],"suffer `fromList`":["being"],"suffer from":["the"],"suffers from":["a","an","a","re-sorting","similar"],"suffice to":["satisfy"],"suffice while":["reducing"],"sufficed. In":["this"],"sufficient (`seq`":["not"],"sufficient for":["the"],"sufficient here.":["You"],"sufficient to":["guarantee","do","convert","determine"],"sufficient, or":["if"],"sufficient, where":["`…`"],"sufficiently fast.":["For"],"sufficiently large":["input).","n","input.","input.","input"],"sufficiently to":["avoid"],"suffix(?) for":["all"],"suffixes plant'":["and"],"sugar for":["`enumFromThenTo","`enumFromTo","`enumFromThenTo","records","`enumFromThenTo`?","`let`.","list"],"sugar haskell":["gives"],"sugar, like":["do"],"suggest @karl?":["Just"],"suggest a":["few"],"suggest adding":["an"],"suggest an":["infix"],"suggest any":["function"],"suggest different":["indentation"],"suggest explicitly":["matching"],"suggest getting":["comfortable"],"suggest having":["`isQuestion`"],"suggest here":["is"],"suggest installing":["ghc-mod"],"suggest is":["to"],"suggest it":["is"],"suggest looking":["at"],"suggest making":["`sort"],"suggest more":["simpler","abstractions"],"suggest not":["using"],"suggest putting":["`primeFactors'`"],"suggest reading":["the","through","the","the","the"],"suggest replacing":["`any"],"suggest taking":["a"],"suggest that":["people","they","you",":)","MVar"],"suggest this":["section"],"suggest trying":["to"],"suggest using":["wordsBy","`isSuffixOf`","`on`","a","the","`[x,x-1","the"],"suggest you":["to","create"],"suggest, but":["I"],"suggest, it":["does"],"suggest, that":["cominator"],"suggested I":["eta","could"],"suggested but":["I"],"suggested by":["twisol,","the","etrepum.","@rodger","@rodger.","hlint","the"],"suggested changes":["on"],"suggested fromListWith":["early"],"suggested implementation":["of"],"suggested in":["Data.List.Split.","Iteration"],"suggested isLetter.":["Over"],"suggested that":["in"],"suggested the":["same"],"suggested, I":["transformed","moved"],"suggested, and":["just"],"suggested, but":["I"],"suggested. It":["worked"],"suggested. Let":["me"],"suggested. Not":["sure"],"suggested. Thanks":["for"],"suggested–thanks a":["lot!"],"suggesting `chunksOf`.":["This"],"suggesting a":["change"],"suggesting improvements":["such"],"suggesting that":["removing","the"],"suggesting the":["next"],"suggesting to":["copy"],"suggesting writing":["it"],"suggestion I":["had","have"],"suggestion about":["isLetter."],"suggestion first":["as"],"suggestion in":["my"],"suggestion looked":["a"],"suggestion of":["Data.Map.Strict,"],"suggestion on":["the","a"],"suggestion re:":["changing"],"suggestion though,":["maybe"],"suggestion to":["try"],"suggestion was":["a"],"suggestion with":["`isLower`,"],"suggestion would":["be"],"suggestion, the":["`canonicalize`"],"suggestion. @aaliyah":["suggested"],"suggestion. Couldn't":["work"],"suggestion. Have":["a","a"],"suggestion. It":["definitely"],"suggestion. Much":["nicer."],"suggestion. My":["next"],"suggestion. On":["sane"],"suggestion. i":["thought"],"suggestion: printf":["from"],"suggestions (I":["think)."],"suggestions (e.g.":["`head"],"suggestions @eliza.":["I"],"suggestions are":["welcome."],"suggestions below":["are"],"suggestions except":["for"],"suggestions for":["improvements","improvements?","how","cleaning"],"suggestions from":["@garland","hlint"],"suggestions in":["the"],"suggestions on":["how","last","my"],"suggestions they":["have."],"suggestions though":["and"],"suggestions to":["make","make","common"],"suggestions very":["welcome!"],"suggestions would":["be"],"suggestions you":["made","have"],"suggestions, I'm":["really"],"suggestions, I've":["implemented"],"suggestions, all":["seem"],"suggestions, and":["even"],"suggestions, then":["compare"],"suggestions, they":["were"],"suggestions. I":["tried"],"suggestions. Yes,":["I"],"suggestions? Any":["way"],"suggestively, `(a":["-\u003e"],"suggests itself":["-"],"suggests that":["it"],"suggests this":["style"],"suggests. and":["it"],"suggests.. thanks":["again"],"suitable (and":["hopefully"],"suitable function":["to"],"suitable name":["-"],"suite (after":["compiling"],"suite (the":["identity"],"suite covers":["that"],"suite for":["other"],"suite pass),":["please"],"suite when":["I"],"suite you":["better."],"suite, but":["your"],"suite, the":["problem"],"suite, you":["can"],"suite. This":["doesn't"],"suited for":["this"],"suited to":["using","using"],"suites or":["READMEs"],"suiting for":["this"],"suits you":["rather"],"sum $":["map","map","zipWith","map","map"],"sum +":["map."],"sum .":["map","map","map","digits"],"sum `comp2`":["zipWith"],"sum and":["filter"],"sum based":["on"],"sum instead":["of"],"sum instread":["of"],"sum is":["bad,"],"sum might":["make"],"sum of":["grains","the","`m`","squares","arithmetic","squares"],"sum them":["`hammingDistance"],"sum up":["the"],"sum with":["map"],"sum. Good":["catch"],"sum. The":["result"],"sumbit `foldl'`":["based"],"summarize =":["fromListWith"],"summary for":["folds:","folds:","folds:"],"summing internally,":["but"],"summing up.":["And"],"sums it":["up!"],"sums via":["fromListWith."],"sunk in":[":)"],"super heavy.":["Plus"],"super nice":["but"],"super ugly.":["Any"],"super useful":["here"],"super useful,":["lol."],"super-pleasant way":["to"],"super-valuable in":["this"],"superclass of":["Applicative,","Monad,"],"superfluous argument":["in"],"superfluous because":["function"],"superfluous but":["that","everything"],"superfluous on":["line"],"superfluous parentheses":["aren't","here.","in"],"superfluous parentheses,":["there's"],"superfluous parentheses.":["It's"],"superfluous since":["function","function","function","function","function","function","function","function"],"superfluous to":["begin"],"superfluous, but":["how","everything"],"superfluous, e.g.":["`if","`last"],"superfluous, everything":["else"],"superfluous, function":["application","application","application","application"],"superfluous, most":["Haskell"],"superfluous, since":["function","function"],"superfluous, usually":["only"],"superfluous. Function":["application"],"superfluous. Looks":["nice"],"superfluous. The":["only"],"superfluous. isQuestion":["could"],"superior. Since":["you"],"supplied by":["the"],"supplied should":["be"],"supplied the":["single"],"supplied to":["```anagramsFor```"],"supplied, rather":["than"],"supply those":["args."],"supply your":["own"],"supplying `\"\"`":["to"],"supplying a":["strict"],"support an":["older"],"support block":["operations"],"support default":["arguments."],"support experimentation":["even"],"support for":["deforestation"],"support my":["first"],"support other":["types"],"support that":["version."],"support two":["atomic"],"support was":["an"],"supporting functions":["first."],"supporting ones.":["So"],"supports OverloadedStrings.":["Usually"],"supports `empty`":["function"],"supports atomic":["operation,"],"supports elements":["updating"],"supports fancy":["family"],"supports locking,":["non"],"supports more":["than"],"suppose :)":["Time"],"suppose I":["should","should","could","could","should","could've","also","could"],"suppose I'll":["have"],"suppose a":["fold"],"suppose any":["sorted"],"suppose instead":["of"],"suppose is":["as","just"],"suppose it":["might","depends","comes","doesn't"],"suppose it's":["somewhat","a","a"],"suppose semantically":["`toList`"],"suppose that":["could","is"],"suppose the":["compiler","compiler"],"suppose there":["are"],"suppose there's":["nothing"],"suppose this":["is","assumes","can","para","should"],"suppose writing":["something"],"suppose you":["might","could."],"suppose, but":["quite"],"suppose, let's":["see..."],"suppose, which":["would"],"suppose. It":["would"],"supposed to":["look","be","return","represent.","represent.","teach","suggest","be","be","be","do?","mean?","be","represent","go","be?)","contain","be","know"],"suppress a":["warning"],"sure I":["have","understood","agree","could","can","agree","quite","find","shouldn't","want","understand","understand.","follow.","understand","follow.","was","suppose","understand."],"sure I'll":["get"],"sure I'm":["able"],"sure I've":["done"],"sure `S.sorted`":["has"],"sure `|\u003e`":["is"],"sure a":["problem"],"sure about":["efficiency","the","this.","protecting","the","my","the","it.","this","the"],"sure all":["top-level"],"sure as":["to"],"sure at":["one"],"sure either":["of"],"sure exactly":["how"],"sure faithfully":["follows"],"sure for":["those"],"sure fusion":["would"],"sure having":["a"],"sure how":["indenting","I","to","it","to","that","I","to","to","to","laziness","to","idiomatic","it's","it","to","I'd","much","best","to","often","to","\"haskell\"-like","to","to","to","I","much","I'd","to","to"],"sure how.":["Also,","Probably"],"sure i":["like"],"sure if":["I","that's","I","I","it's","there's","that's","I","reusing","I","this","the","we","importing","there's","that","it's","that","using","I","your","I","this","there's","that's","you","I","this","there","`readMVar`","it","there's","either","I","the","using","it's","I","there","I","that","that's","this","it's","it"],"sure is":["a","quite"],"sure it":["would","helps","is","is","makes","will","could"],"sure it's":["simplified","the","a"],"sure its":["a"],"sure just":["`fold'`"],"sure like":["pattern"],"sure many":["have"],"sure nitpicking":["on"],"sure of":["an","how"],"sure pull":["requests"],"sure quite":["how"],"sure should":["I"],"sure that":["it's","using","onlyAlpha","the","the","the","the","the","it's","`sortAndLower","the","the","`sort","it","you're","randomRIO","I","`reusing`","indetation","I","introducing","its","union","I","I'm","you","this","I","i'd","you're","`type`","they"],"sure that's":["what","the","what","it's"],"sure the":["new","length","first","computation","empty","best"],"sure there":["are","is","are","are","is","is","must","is"],"sure there's":["a","a","a","a"],"sure things":["like"],"sure this":["behavior","kind","is","is"],"sure though":["how"],"sure to":["come","evaluate","check"],"sure until":["I"],"sure we":["need"],"sure were":["they"],"sure what":["is","the","the","I","the","you","I","I","the","I","to","should","you","to","the","to"],"sure what's":["better","going","up"],"sure when":["I"],"sure where":["to"],"sure whether":["convention","I","to","that's","it's","I"],"sure which":["is","is","editor","has","one"],"sure why":["I","all","it's","you're","that","I","this","your","the","you","I"],"sure would've":["been"],"sure you":["can","need","know","love"],"sure you're":["using","gonna","able"],"sure, I":["really"],"sure, either!":["My"],"sure, some":["fun"],"sure, you're":["saying"],"sure. But":["I'll"],"sure. This":["wouldn't"],"sure. i":["guess"],"sure... `Data.Char`":["certainly"],"surely is":["over"],"surely there":["are"],"surface -":["that's"],"surface amounts":["to"],"surprise. For":["example,"],"surprised at":["how"],"surprised if":["the"],"surprised me":["when"],"surprised that":["there","I"],"surprised there":["isn't"],"surprised to":["discover"],"surprised when":["I"],"surprising (doesn't":["start"],"surprising results":["if"],"surrounded the":["right"],"surrounding Haskell,":["and"],"surrounding bits":["-"],"surrounding the":["function"],"suspect I":["reinvented"],"suspect I'm":["wrong"],"suspect an":["array"],"suspect from":["hanging"],"suspect in":["a"],"suspect it'll":["be"],"suspect it's":["something","your"],"suspect that":["calling","this","by","GHC","you"],"suspect the":["alternative"],"suspect this":["function"],"suspect you":["would"],"suspended computation":["that"],"suspension creation":["and"],"suspicion is":["that"],"suspicious of":["`a"],"suspicious, is":["there"],"suspiciously like":["a"],"sw =":["sort"],"swap letters":["in"],"swap, you":["can"],"swapConcat looks":["noisy"],"swapMVar being":["insufficiently"],"swapMVar here":["because"],"swapMVar is":["used,"],"swapMVar then":["pending"],"swapped for":["a"],"swapping ```(==)```":["with"],"swapping ```zip```":["in"],"sweet, didn't":["know"],"sweet. It's":["too"],"switch `foldl`":["to"],"switch from":["`mapM"],"switch in":["```mapM```"],"switch off":["that","that"],"switch on":["the","the"],"switch some":["arguments"],"switch the":["order"],"switch to":["Data.Text","a","Data.Map.Strict.","another","Data.Map.Strict","a"],"switched `fold`":["to"],"switched from":["`map`","```Data.Map```"],"switched syntaxes":["after"],"switched the":["extra"],"switched to":["folder","`$!`","list","Vector","a","a"],"switching between":["\"x"],"switching the":["order"],"sx =":["sort"],"sx ==":["sort"],"symbol like":["puntuation."],"symbol with":["number"],"symbol. You":["can"],"symbols as":["functions"],"symbols expressions":["are"],"symbols for":["such","different"],"symbols in":["it."],"symbols on":["it's"],"symbols, you":["could"],"symbols/keywords/etc. (which":["Haskell"],"symmetry between":["the"],"symmetry of":["binomial"],"symmetry with":["`any`."],"sync with":["the"],"synchronization, better":["than"],"synchronization. MVars":["are"],"synchronization. The":["Haskell"],"synonym (`type`)":["instead"],"synonym and":["an"],"synonym for":["qualified","a","`[Char]`,"],"synonym here":["because"],"synonym would":["suffice"],"synonym, I":["want"],"synonym. I":["guess"],"synonym. Then,":["your"],"synonyms now":["and"],"syntactic constructs":["when"],"syntactic overkill":["for"],"syntactic sugar":["haskell"],"syntactically is":["a"],"syntastic and":["hdevtools"],"syntax (`where`":["is"],"syntax `(,1)`":["equivalent","to"],"syntax `[from,":["then"],"syntax `[from,then..to]`,":["which"],"syntax `newtype":["School"],"syntax can":["be"],"syntax errors.":["Anyway,"],"syntax execute":["from"],"syntax extension":["that"],"syntax extensions":["?"],"syntax extensions.":["TupleExtensions"],"syntax for":["that","multi-line","using","readability"],"syntax highlighting":["went"],"syntax in":["`transformElem`","haskell"],"syntax instead":["of"],"syntax is":["more","an","becoming","heavyweight","that"],"syntax like":["that"],"syntax on":["your"],"syntax or":["a"],"syntax rather":["than"],"syntax style:":["function"],"syntax sugar":["for","for","for","for","for"],"syntax sugar,":["like"],"syntax than":["to"],"syntax that":["avoids","convenient,"],"syntax tip":[":)"],"syntax to":["be","define","implement","get","make","do","have"],"syntax uses":["some"],"syntax using":["`case`"],"syntax when":["you're"],"syntax which":["looks"],"syntax will":["define"],"syntax works":["fine"],"syntax! If":["you"],"syntax\" or":["\"field"],"syntax, I'm":["going"],"syntax, all":["equations"],"syntax, and":["I"],"syntax, consider":["using"],"syntax, e.g.":["`data"],"syntax, it":["would"],"syntax, you":["really"],"syntax. Also":["note","`resetName`"],"syntax. Consider":["that"],"syntax. I":["think"],"syntax. I'll":["try"],"syntax. It's":["not"],"syntax. You'll":["probably"],"syntax](http://en.wikibooks.org/wiki/Haskell/Control_structures#if_and_guards_revisited) will":["be"],"syntaxes after":["the"],"system (and":["possibly"],"system I":["would"],"system and":["use"],"system either.":["I"],"system is":["pretty"],"system more":["to"],"system more.":["Define"],"system or":["switch"],"system so":["that"],"system to":["make"],"system, Data.Text":["would"],"system, but":["It","I'm"],"system, so":["I"],"system, we":["should"],"system, you'd":["want"],"system? There":["is"],"t (k,x)":["="],"t =":["ord"],"t ==":["0"],"t Earth":["="],"t I":[":"],"t I)`":["aren't"],"t I:l":["t"],"t Mercury":["="],"t V":[":"],"t) =":["v"],"t]`. Everything":["else"],"tab-completion in":["ghci)"],"table =":["["],"table and":["my"],"table could":["simplify"],"table have":["at"],"table is":["not","about","O(log(map"],"table like":["this:"],"table of":["lookups","some"],"table that":["can","looks"],"table to":["keep"],"table version":["would"],"table with":["a"],"table would":["be"],"table, but":["there's"],"table, c":["\u003c-"],"table, e.g.":["including"],"table, you":["really"],"table. Consider":["using"],"table. Makes":["for"],"table? Seems":["a"],"tables are":["necessary"],"tables but":["I'm"],"tabs and":["others,"],"tack on":["a"],"tacking on":["of"],"tackle on":["exercism.io"],"tackle that":["book"],"tackled a":["base"],"tackled when":["it's"],"tacks on":["the"],"tad bit":["less"],"tad past":["my"],"tad shorter":["(no"],"tail call":["optimisation","optimization"],"tail call).":["Have"],"tail first,":["the"],"tail first.":["Because"],"tail of":["that","the","each","a"],"tail on":["an","it."],"tail phone`.":["That"],"tail recursion":["and","into","should","can"],"tail recursion,":["such"],"tail recursive":["because","too.","implementation.","one","since","in"],"tail recursive).":["I"],"tail recursive.":["If"],"tail x)\u003c/pre\u003e":["Maybe"],"tail, that":["cell"],"tail-recursion and":["laziness","++"],"tail-recursive case":["you'll"],"tail-recursive function":["that"],"tail-recursive would":["be"],"tail-recursive? This":["isn't"],"tail. `reverse`":["needs"],"tailrecursive, i.e.":["the"],"take (length":["str+1","xs"],"take 1":[".","(reverse"],"take 3":["((\"foo\"++)"],"take M":["into"],"take O(n)":["time","space","time"],"take `b`,":["normalize"],"take a":["decision","look","look","look","look","look.","look","digit","closer","while","look.","moment,","look","look","few","look","look","look","closer","look","boolean","boolean","look","look.","new","look","look","look","look","look","look"],"take advantage":["of","of","of","of","of","of,","of","of","of"],"take and":["put","put.","put"],"take another":["look","approach,","look"],"take any":["arguments)."],"take both":["the"],"take care":["of","of","of","of"],"take constant":["time.","time."],"take it":["out.","too","and","that","you"],"take it's":["contents"],"take linear":["space"],"take more":["than","than","computational"],"take n":["."],"take names":["from"],"take on":["this"],"take outside":["a"],"take place":["in","ahead","at"],"take quite":["a"],"take required":["number"],"take some":["time","time","time","of","advantage"],"take that":["in","digit"],"take the":["chain","list","risk","`\\n`s","last","tail","tail","fun","same"],"take then":["put."],"take this":["into"],"take two":["arguments"],"take up":["more","far","a","a","a","more","more","to","O(n)"],"take your":["point"],"take, which":["would"],"takeWhile (\u003e=from)":["(iterate"],"takeWhile, dropWhile,":["etc."],"taken about":["`isIndifferent`."],"taken from":["[Data.List][1]."],"taken the":["time"],"takes 2":["arguments."],"takes O(n":["log"],"takes O(n)":["time","stack"],"takes `n`":["agruments,"],"takes a":["String","while","phone","DNA","value","string","string","noticeable","full","single","noticeable"],"takes about":["20%"],"takes an":["EmotionalContent","empty"],"takes any":["type"],"takes care":["of","of","of"],"takes constant":["stack"],"takes linear":["time,","space"],"takes longer":["than","the"],"takes me":["pretty"],"takes only":["a"],"takes slightly":["longer"],"takes some":["effort,"],"takes the":["input"],"takes to":["just"],"takes two":["arguments.","seconds","nucleotides","strings"],"takes up":["most","a","WAY","a","a","O(n)","a","several","a","a","a","linear","O(1)"],"takes value":["and"],"takes your":["code."],"takes? (and":["not"],"taking a":["look","boolean","break","look?","look"],"taking advantage":["of","of","of"],"taking and":["dropping"],"taking constant":["space"],"taking the":["time","time","time"],"taking things":["a"],"taking time":["to","to"],"talk about":["the","it's","big-Oh","it,","`let`"],"talk in":["layman's"],"talking about":["0..99","0..99","a","with"],"talking so":["comes"],"tally ::":["Int"],"tally much":["more"],"tally n":["="],"tallyWord =":["flip"],"tallyWord point-free":["to"],"tallying up":["each","matching"],"tampering outside":["the"],"tangled up":["trying"],"target every":["time."],"target grade,":["but..."],"target once":["per"],"target string":["too."],"target word":["but"],"target` is":["unnecessary"],"target` so":["you"],"task (but":["I've"],"task (if":["you"],"task and":["to"],"task but":["its"],"task by":["defining"],"task can":["you","you","be"],"task hiding":["internals"],"task in":["Haskell.","a","generic","this"],"task into":["a"],"task is":["stupid.","forcing","algorithm","about","about","not"],"task it's":["unnesessary"],"task like":["about"],"task more":["efficiently"],"task order":["even"],"task quite":["differs"],"task solution,":["don't"],"task some":["other"],"task to":["practice"],"task using":["normal","a"],"task want":["you"],"task was":["updated"],"task with":["doubling","them."],"task you":["need"],"task, and":["you","rewriting"],"task, can":["you"],"task. Code":["will"],"task. Do":["you"],"task. GADT":["here"],"task. If":["you"],"task. Lazy":["version"],"task. `wordCount":["="],"task: I'm":["OK"],"tasks (once":["I'll"],"tasks are":["much"],"tasks of":["`words`"],"tasks string":["may"],"tasks that":["require"],"tasks where":["idea"],"tasks. I":["am"],"tasks. Or":["we"],"taste ...":["(well"],"taste but":["most","it's","do"],"taste i":["suppose."],"taste prefers":["recursion"],"taste though":[":)"],"taste, actually,":["is"],"taste, but":["you"],"taste. As":["for"],"taste/style and":["not"],"taught me":["how"],"taught, you'll":["want"],"teach me":["to"],"teach people":["how","to"],"teasing to":["play"],"technical for":["me"],"technical point":["to"],"technically been":["replaced"],"technically redundant.":["But"],"technically right,":["I"],"technically unsafe,":["but"],"technically you":["are"],"technique called":["eta-reduction"],"technique can":["be"],"technique in":["this"],"technique is":["available"],"technique that":["you","I've"],"technique, encapsulated":["in"],"technique, you'll":["find"],"techniques (all":["are"],"techniques to":["manage"],"technitially you've":["used"],"tedious (see":["Iso)"],"teenager named":["Jack"],"teenth wednesday":["of"],"teenth whateverday":["of"],"tell $":["WordCount"],"tell .":["singleWord`"],"tell `withMVar`":["doesn't"],"tell if":["it's","this","8","those"],"tell intention":["better"],"tell it":["that"],"tell me":["that","about","if","how","how","more","if","what","if","what"],"tell people":["that"],"tell the":["final","compiler"],"tell them":["when"],"tell whether":["they"],"tell you":["this,","that."],"tell, Haskell":["doesn't"],"tell, replace":["isn't"],"telling you":["that"],"tells the":["reader"],"tells us":["how"],"template out":["into"],"template stuff":["is"],"template will":["be"],"template_1 (show":["s)`"],"templates to":["replace"],"templating to":["get"],"temporarily by":["clicking"],"temporary assignment":["like"],"temporary list":["cells."],"temporary tuple":["will","at"],"tempted to":["use","go","use","write"],"ten characters":["starts."],"ten lines":["of"],"ten times":["slower"],"ten-character string":["into"],"tend to":["use","be","prefer","use","prefer","write","prefer","be","prefer","have","prefer","agree","be","use","occur","prefer","be"],"tends to":["spit","be","be"],"term -":["the"],"term rewriting":["system."],"term would":["be"],"term you":["coined!"],"term, eta":["reduction!"],"terminate (that's":["the"],"terminate a":["little"],"terminate at":["the"],"terminate early":["and"],"terminate for":["n"],"terminate on":["the"],"terminate with":["the"],"terminate within":["a"],"termination like":["`foldr`"],"termination was":["necessary"],"terminology comes":["from","from"],"terminology used":["i"],"terms are":["evaluated"],"terms is":["infix"],"terms of":["`any`:","readability","an","`any`","liftM","documenting","`Text","a","evaluating","the","`(/=)`","`(.)`.","`all`","a","`foldl'`","modular","`any`","`unlines`","`not","their","Data.List.Split's","efficiency","Data.Array.","layout","bits","only","`isLower`","powers","[String],","bits","what's","`modifyMVar_`","`map`,","whitespace).","foldr,","a","`all`","the","`map`","a","readability"],"terms of:":["_there"],"terms that":["typically"],"terms when":["suggesting"],"terms, so":["my"],"terms, which":["should"],"terms, why":["avoiding"],"terms. I":["mean"],"terrible about":["using"],"terrible name":["I'm"],"terrible or":["anything…"],"terribly common":["to"],"terribly fancy:":["https://gist.github.com/etrepum/6348918"],"territories. I":["was"],"territory as":["far"],"terse formulation":["using"],"terse to":["start"],"terseness of":["`\u003c$\u003e`."],"terseness. Understandability,":["for"],"terser (and":["more"],"terser names":["can"],"terser way":["to"],"test (#12,":["questioned"],"test `-\u003e`":["here"],"test `a":["/="],"test `isSilence`":["before"],"test `key":["/="],"test again":["`foldl'"],"test all":["digits"],"test because":["the"],"test before":["learning"],"test but":["it's","not"],"test by":["accident","using:","virtue"],"test case":["-","is","`questioned","for","with","includes","and","will","\"carrot\"."],"test case,":["correct?"],"test case.":["but"],"test case..":["17","I","and"],"test case?":["I","I"],"test cases":["that","dictate","and","were","and","as","don't","seemed","should","immediately","expect","are","demand,","to","by","without","are","don't","for","we're"],"test cases,":["but","but","you'd"],"test cases.":["one"],"test definitively":["with"],"test doesn't":["pass"],"test due":["to"],"test errors":["once"],"test failed":["later"],"test fails":["if","on"],"test file":["one","now.","it"],"test for":["this","Shouts,","random","`shouting`","this,","\"resetName\"","string"],"test for?":["Oh"],"test functions":["in"],"test given,":["so"],"test got":["the"],"test help":["make"],"test if":["a","values"],"test in":["N"],"test instead":["of"],"test is":["that","that","still","tried","```n```"],"test it":["later,"],"test looks":["a"],"test made":["my"],"test module":["be"],"test my":["usage"],"test odd":["numbers"],"test only":["2"],"test out":["of","of"],"test per":["all"],"test program":["(of"],"test really":["is"],"test requires":["it."],"test requires.":["How"],"test resulting":["in"],"test runtime":["of"],"test seems":["overly"],"test simple":["binary"],"test spec":["considerably"],"test suite":["pass),","(after","covers"],"test suite,":["but","you","the"],"test suite.":["This"],"test suites":["or"],"test that":["fails","it's","would","would"],"test them":["in"],"test this":["behavior:("],"test to":["fail.","my","the","create"],"test wants":["the"],"test was":["[added](https://github.com/kytrinyx/exercism.io/commit/2476edf358c563f7e84a899c86011a6a71070954)","`null"],"test was't":["in"],"test were":["automatically"],"test will":["fail"],"test with":["HSpec)","incorrect"],"test you":["know"],"test\" was":["the"],"test) that":["is"],"test, and":["do"],"test, because":["`silence`"],"test, but":["it","IMHO"],"test, in":["which"],"test, like":["I"],"test, which":["is"],"test-driven development":["have"],"test. All":["primes"],"test. Because":["you"],"test. I":["could","see"],"test. If":["you"],"test. This":["one"],"testBit instead.":["I'll"],"testCase \"What":["is","is","is"],"testCase \"matrix":["of","of"],"test_respondsToOtherWhitespace ::":["Assertion"],"test_respondsToProlongedSilence ::":["Assertion"],"test_respondsToSilence ::":["Assertion"],"test_respondsToUnicodeNonShout ::":["Assertion"],"test_respondsToUnicodeShout ::":["Assertion"],"testcase instead":["of"],"testcases to":["project,"],"tested in":["the"],"tested out":["isUpper,"],"testing ONeillPrimes.hs":["and"],"testing a":["single"],"testing but":["wasn't"],"testing every":["odd"],"testing file":[":)"],"testing for":["here.","silence","either"],"testing if":["```w```","a","none"],"testing nicer":["and"],"testing single":["letters"],"testing the":["internals."],"testing things":["like"],"testing, since":["the"],"testing, what":["is"],"testing; the":["function"],"tests (isSilence)?":["It"],"tests I":["have"],"tests again":["and"],"tests all":["look","pass"],"tests and":["removing","clean","the","use","build"],"tests are":["compared","ported","written.","wrong.","written"],"tests asked":["for"],"tests but":["it'll"],"tests can't":["properly"],"tests care":["about."],"tests changed":["because"],"tests could":["be"],"tests despite":["getting"],"tests do":["not"],"tests does":["not"],"tests doesn't":["seem","carry","catch"],"tests don't":["cover","use","use","cover","include","check","ask","really","cover","give","currently","require","test","cover","require","require"],"tests expect":["just"],"tests expecting":["`IO"],"tests expects":["`'U'`"],"tests fail":["if"],"tests for":["some","it.","primes","shouting","prettyPrint","more","that.","`sorted`","this","`Illogical`","this"],"tests force":["you"],"tests gives":["`[5,"],"tests go,":["though."],"tests happen":["to"],"tests have":["changed"],"tests if":["others","I"],"tests just":["fine."],"tests lead":["me"],"tests missing":["some"],"tests nor":["the"],"tests now":["pass,"],"tests of":["other"],"tests on":["my","`classify`"],"tests only":["capitalize","have"],"tests or":["spec,"],"tests pass":["for","either"],"tests passing,":["I'm"],"tests present":["you"],"tests relies":["on."],"tests require":["it.","it.","IO","type"],"tests robust":["even"],"tests say":["nothing"],"tests show":["which"],"tests slightly":["to"],"tests still":["uses","pass"],"tests suite":["example:"],"tests that":["I"],"tests to":["catch"],"tests try":["to"],"tests use":["has"],"tests using":["runghc"],"tests wanted":["a"],"tests was":["to"],"tests were":["ported","pushing"],"tests weren't":["much"],"tests which":["include"],"tests while":["being"],"tests will":["be"],"tests with":["Haskell's","it"],"tests would":["fail,"],"tests you":["apply"],"tests you'd":["want"],"tests you'll":["notice"],"tests) if":["you"],"tests, \"What":["is"],"tests, I":["didn't","decided"],"tests, and":["this","as","as","didn't"],"tests, as":["your"],"tests, because":["otherwise"],"tests, but":["what","I","it","I'm","you","there"],"tests, most":["of"],"tests, no":["need"],"tests, not":["only","submit."],"tests, or":["not?"],"tests, so":["i'm","I'm"],"tests, you":["should"],"tests. Apparently":["`\"Fine."],"tests. But":["the"],"tests. Feel":["free"],"tests. I":["might","also","think"],"tests. I'll":["take"],"tests. I'm":["new"],"tests. So":["I'm"],"tests. Sorry":["about"],"tests. The":["only","tests"],"tests. You":["might"],"tests? I'm":["not"],"tests? Looks":["like"],"tests? There's":["a"],"text &&":["not"],"text =":["floor"],"text b).":["values"],"text did":["seem"],"text editor…":["it's"],"text freaks":["me"],"text into":["list"],"text is":["going","not"],"text just":["to"],"text only":["solution"],"text package":["apparently"],"text since":["the"],"text strings":["to"],"text that":["was"],"text wherever":["it's"],"text) =":["\"Woah,"],"text)\u003c/code\u003e saves":["a"],"text, as":["current"],"text, but":["it's"],"text, instead":["of"],"text, needed":["some"],"text, which":["is"],"text? Usually":["when"],"text` with":["`any"],"text`, since":["that's"],"textual data":["kept"],"tha the":["only"],"than \"function-per-line\"":["style."],"than \"just":["knowing\"."],"than (=='":["')"],"than 1":["is","case"],"than 11":["digits","digits"],"than 2":["rows","lines"],"than 2,":["no"],"than 2^52":["on"],"than 3":["are"],"than 4":["petabytes!)."],"than 99.":["Maybe"],"than I":["would","thought","see","thought","have","do","had","think","do","was","could."],"than Integer,":["since"],"than MVar":["on"],"than Maybe.":["Same"],"than Monad":["because"],"than O(max":["(length"],"than STM's":["TVar."],"than See":["T"],"than [1,":["1..]..."],"than `\"'\"":["++"],"than `&&`":["so"],"than `&&`.":["Also,"],"than `'?'`,":["you"],"than `((==":["0)"],"than `(map":["intToDigit"],"than `(not":["$"],"than `(show":["$"],"than `.`":["so"],"than `48`.":["You"],"than `::`,":["ta."],"than `;`":["for"],"than `==`.":["Totally"],"than `Data.Map`":["to","to"],"than `Functor`":["because"],"than `IORef`.":["I"],"than `Integer`.":["It's"],"than `Just`":["for"],"than `MVar`s,":["latter"],"than `Map":["[String]"],"than `Maybe(Int,":["Int)`."],"than `String`":["because","in"],"than `Word`":["here"],"than `[":["c"],"than `['G',":["'C',"],"than `[Char]`":["for","in"],"than `[a,a-1..b]`":["in"],"than `[x":["|"],"than ```Data.Map```.":["It's"],"than ```O(max(length":["a,"],"than ```[]```–even":["though,"],"than ```a":["!!"],"than ```anagramsFor":["\"bob\"","\"bob\""],"than ```sanitizeInput":["string```"],"than `all'`":["the"],"than `all`":["for"],"than `assocs`":["but"],"than `capitalize`":["--"],"than `capitalize`...":["or"],"than `classification`,":["since"],"than `do`":["notation—"],"than `elem`":["to","for"],"than `f`":["or","or"],"than `filter":["f"],"than `findWithDefault`,":["check"],"than `foldl'`":["and","from"],"than `foldl'`.":["See"],"than `foldl`.":["Maps"],"than `foldr":["((:)"],"than `fromJust`.":["Technically"],"than `function'`":["but"],"than `if":["then"],"than `insertWith`":["for","here."],"than `intercalate":["\"","\""],"than `isDigit":["x"],"than `isEven`":["and"],"than `last`":["if"],"than `length`,":["`head`,"],"than `let`":["would"],"than `let`,":["especially"],"than `map":["g","stringToPlants"],"than `mapMaybe`":["in"],"than `map`,":["but"],"than `maxBound":["::","::"],"than `maybe":["[]"],"than `not(null":["word)`."],"than `onlyDigits`":["because"],"than `otherwise`).":["Expressing"],"than `read`":["and"],"than `records`":["though."],"than `responseFor`,":["the"],"than `reverse":["[b..a]`","[to..from]`."],"than `seq`,":["but"],"than `shift":["1"],"than `splitWhen`":["because","here."],"than `stripped`.":["If"],"than `take":["10","10","n"],"than `words":[".","."],"than `words`":["and","and"],"than `xs":["=="],"than `|":["True`."],"than `||`":["(such"],"than `||`.":["I"],"than a":["list","list","simple","straightforward","few","3","single","nitpick.","simple","single","bunch","strict","single","single","list","list","single","naive","few","Map","thunk","thunk","fold,","qualified","list","lower","fold","left","lookup","bunch","single","filter?","fold,"],"than actually":["just"],"than add":["a"],"than adding":["bindings."],"than all":["the"],"than allowing":["Haskell"],"than another":["type"],"than any":["operators.","operator.","operator.","operator,","operator,","operator,","operator.","operator.","operator","operator","operator.","operator.","operator.","operator","operator","operator.","operator.","operator","operator.","operator.","operator.","operator.","operator."],"than as":["a","a"],"than asymptotic":["analysis."],"than before.":["I"],"than building":["a"],"than calculating":["the"],"than canonicalizing":["to"],"than check":["for"],"than checking":["if","whether","all","if","length","`isAsciiLower`"],"than clarifying":["it."],"than coding":["it","it"],"than combing":["lists"],"than concatenating":["the"],"than creating":["a","new","lots"],"than cut":["and"],"than data":["structures","here,"],"than declarative),":["but"],"than deeply-nested":["expressions"],"than direct":["recursion.","recursion"],"than doing":["an","it","explicit","lookup","the","the","the","both"],"than e.g.":["a"],"than else":["in"],"than every":["number,"],"than expected,":["at"],"than explicit":["recursion,","recursion.","recursion.","where."],"than filter":["out"],"than filtering":["out"],"than folding":["with"],"than follow":["them"],"than function":["application.","application,","application)."],"than generating":["a"],"than guards":["with","syntax,","here."],"than guards,":["e.g."],"than having":["lots","a","a","a","a","`$`","the","the","to"],"than hide":["the"],"than hinder.":["I"],"than if-then-else":["unless"],"than if-then-else.":["Avoiding"],"than if/else":["for"],"than implement":["this","it"],"than implementation":["details."],"than in":["this"],"than is":["necessary,"],"than isLetter,":["but"],"than isQuestion":["this"],"than is_foo":["but"],"than it":["actually","needs","needs","needs","needs","needs","ought","strictly","is","is","needs","needs","needs","has"],"than it's":["worth","definitely"],"than it,":["maybe,"],"than its":["implementation.","own"],"than just":["mod4","in","concatenating","wasteful,","`'","doing","doing","writing","give","checking","Eq.","using","that.","using","shadow"],"than last":["time."],"than lazy":["though,"],"than leaving":["the"],"than let":["with"],"than let,":["so","so"],"than let-in.":["Otherwise"],"than linearithmic":["time."],"than list":["comprehensions,"],"than lists":["to"],"than lists?":["It"],"than mapping":["directly"],"than me":["writing"],"than mine":[";-)"],"than mine!":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/etl/example.hs"],"than mine,":["in","thanks."],"than mine.":["I","I","I'm"],"than more":["direct"],"than most":["Bob's"],"than moving":["to"],"than mutexes":["in"],"than my":["example","original","first","example","solution","previous","example.","approach","`concatMap`","solution.","version."],"than namespacing":["(in"],"than not":["having"],"than once":["using","but"],"than once,":["e.g.","but"],"than once.":["It"],"than one":["guard",";-).","other","count","generator","bit","module","argument","nucleotide","argument!","operator","type","generator","guard","value","that","possibility","place","guard.","where"],"than overriding":["\"show\"."],"than parentheses":["if"],"than passing":["around","around"],"than performing":["case"],"than piggybacking":["off"],"than plumbing":["with"],"than point":["free"],"than point-free,":["especially"],"than preprocessing":["in"],"than previous":["submission"],"than quoting":["it"],"than reading":["comments."],"than relying":["on"],"than resorting":["to"],"than revision":["#1"],"than scanning":["the"],"than scoring":["'Z'","a"],"than separate":["guards,"],"than simplifying":["the"],"than some":["non-specified"],"than something":["I'd"],"than spectacular":[":p"],"than split":["when"],"than square":["root"],"than ten":["lines"],"than than,":["I"],"than that":["stylistic","is","I'm","missing","it","is","it","`responseFor","this","of","much","you","name",":)","I","looks"],"than that,":["code","the","everything","it","it","really","everything","you","you"],"than that.":["i"],"than the":["regex","naive","typeclass","String?","strictness","guards","rendering","other.","original.","seed.","most","multiple","`last(s)`","number","prior.","previous,","utility","explicit","variations","++","target","Monadic","ones","smallest.","1st","previous","roman","lookup","two","previous.","performance.","`:`","fully","last","last","`String`","first","input","hard-coded","redundant","first","previous","first","pointy","type","`..`"],"than these":["minor"],"than things":["were"],"than this":["one","way.","though.","function,","(non-tail-recursive)","function"],"than this,":["of","but","all"],"than this.":["Also,","This"],"than this?":["There"],"than to":["perform","check","explicitly","embed","use","use","understand","use"],"than too":["few."],"than try":["to"],"than trying":["to"],"than underscore_separated,":["which","since"],"than understand":["if"],"than understanding":["why"],"than use":["a","`False==`."],"than using":["`any`","a","`null`.","Applicative","regexes?","a","`foldl'`","`foldr`","`map`","a","`reverse`","recursion,","a","`Map.lookup`","a","`map`","regular","explicit","lists.","`foldl'`","`_`.","`insertWith`.","union.","`++`","guards","permutation,","`let`"],"than usual,":["so"],"than v3":["in"],"than what":["I"],"than whatever":["Int"],"than when":["using"],"than with":["explicit","explicit"],"than working":["with"],"than writing":["it"],"than x\".":["This"],"than you":["usually","can","need","think","could"],"than you,":["but"],"than your":["current","first"],"than ||,":["thus"],"than, I":["can't"],"thank for":["a","my"],"thank you":["for","for","etrepum","for","@arthur,","very","very","enough","for","for","for"],"thank you.":["I"],"thanks -":["I"],"thanks @athena,":["I"],"thanks @braeden":["for"],"thanks @estefania":["again."],"thanks @faustino":["I"],"thanks @gabriel,":["I"],"thanks @hillary,":["I"],"thanks @jarret":["i"],"thanks @julianne!":["I've"],"thanks @lempi,":["I'll"],"thanks @rollin.":["I"],"thanks I":["again"],"thanks I've":["thought"],"thanks a":["lot","lot","lot!","lot!","lot,","lot","lot"],"thanks again":["for","both."],"thanks also":["for","for"],"thanks both":["for"],"thanks for":["pattern","the","the","the","the","that.","the","the","catching","the","the","the","the","the","the","the","the","introducing","the","the","the","the","the","the","the","the","the","that","the","pointing","the","the","steering","that.","the","leading","core","the","idea.","note","your","the","kind","picking","your","your","the","the"],"thanks in":["advance)"],"thanks so":["much"],"thanks to":["you,","comment","a","@adonis","@peggie,","all","LambdaBot."],"thanks! Funny,":["I"],"thanks! I":["was","think"],"thanks! I'd":["rather"],"thanks! I'll":["fix"],"thanks! It's":["not"],"thanks! Looking":["at"],"thanks! That":["was"],"thanks! `mapM`":["is"],"thanks, @zora!":["What"],"thanks, I":["was"],"thanks, a":["new"],"thanks, it":["did"],"thanks, that":["makes","does"],"thanks, that's":["a"],"thanks. A":["Haskell"],"thanks. But":["I'm"],"thanks. However,":["will"],"thanks. I":["knew","couldn't","implemented","think"],"thanks. I've":["read","reshuffled"],"thanks. That":["makes"],"thanx for":["comment!"],"thasks here":["that"],"that \"The":["goal"],"that \"any\"":["and"],"that \"return":["."],"that 's'":["only"],"that 'words'":["is"],"that (AFAICS)":["I"],"that (I":["think)"],"that (I'm":["not"],"that (and":["could"],"that (assuming":["it's"],"that (but":["leaving"],"that (could":["use"],"that (for":["lists)"],"that (unless":["they"],"that 4":["is"],"that 400":["is"],"that :)":["Unless,"],"that ;)":["Thanks,"],"that ;-).":["So,"],"that \u003ccode\u003eString\u003c/code\u003e":["is"],"that \u003ccode\u003efrequency":["w\u003c/code\u003e"],"that \u003ccode\u003egroupBy\u003c/code\u003e":["groups"],"that \u003ccode\u003ewhere\u003c/code\u003e":["clauses"],"that @santino":["already"],"that API":["as"],"that Alternative":["(which"],"that Char":["is"],"that Control.Concurrent.STM":["is"],"that Control.Monad.Plus":["isn't"],"that DNA":["and"],"that Data.Char":["import"],"that Data.List.Split":["has"],"that Data.List.Utils":["ships"],"that Data.Map":["is","is","is","imports","is","is","isn't","is"],"that Data.Map's":["functionality"],"that Data.Map.Strict":["is"],"that First,":["Second,"],"that GHC":["automatically","is","often","will","would","7.8"],"that Haskell":["developers","is","does","has","has","doesn't","has"],"that I":["think","mentioned","reformatted","fetched.","don't","export","am","should","think","was","didn't","think","just","want","could","am","am","can","have","usually","added","don't","expect","know","called","had","haven't","think","don't","prefer","didn't","can","have","prefer","prefer","don't","do","ended","see","had","missed","didn't","know","sometimes","fully","ommited","wanted","(and","did","was","think","already","tried","should","did","received","tried","don't","think","wouldn't","knew","was","would","like","thought","understood","could","need","often","was","need","like","will","use","need.","had","had","prefer","could","know","think","could","come","have","know","keep","am","wasn't","can","haven't","think","do","don't","could","could","see,"],"that I'd":["been","fixed"],"that I'll":["get"],"that I'm":["doing","happy","wondering","aware","starting","new","doing","able","not"],"that I've":["left","noticed","completely","described","found","described"],"that LambdaCase":["is"],"that MVar":["is"],"that Map":["is","structure"],"that Map.":["You"],"that Map.alter":["was"],"that Maybe":["has."],"that Num":["needs"],"that Python's":["has"],"that ShowS":["represents"],"that Strings":["are"],"that TVar":["may"],"that Teenth":["days"],"that Uracil":["is"],"that [hoogle](http://www.haskell.org/hoogle/?hoogle=Char+-%3E+Char+-%3E+String+-%3E+String)":["finds"],"that [splitWhen](http://hackage.haskell.org/package/split-0.1.1/docs/Data-List-Split.html#v:splitWhen)":["is"],"that [x,":["x-1"],"that _any_":["query"],"that _etrepum_":["said,"],"that `\"\"`":["is"],"that `$!`":["might"],"that `('0',":["'9')`"],"that `(+2)`":["is"],"that `(flip":["isAllergicTo"],"that `(isQuestion":["\"\")`"],"that `(w,":["s'')"],"that `++`":["so"],"that `++`.":["The"],"that `+`":["is"],"that `-1`":["needs"],"that `.*\u003e`":["operator"],"that `2^64-1`":["is"],"that `2^n":["=="],"that `==":["False`","True`"],"that `Data.Char`":["adds"],"that `Data.Map`":["exports,","provides.","by"],"that `IntMap`":["will"],"that `Integer`":["is"],"that `Left":["a`"],"that `MVar`":["is"],"that `Map.Map`":["in"],"that `Map.fromList`.":["I"],"that `Map.insertWith":["Set.union`"],"that `Normal`":["and"],"that `String`":["is","is"],"that `Teenth`":["has"],"that `[Eggs..]`":["is"],"that `_`":["has","is"],"that ```a```":["is","is"],"that ```allSpace":["x```"],"that ```bstValue```":["doesn't"],"that ```map```":["is"],"that ```nub```":["is"],"that ``cleanChar``":["(or"],"that `a":["-\u003e`"],"that `a`":["should","is"],"that `addLetter`":["is"],"that `all":["f","isSpace`","f","f"],"that `anagramOfX`":["and"],"that `any":["isLetter"],"that `any`":["and"],"that `canonical`":["is"],"that `cleanNumber`":["is"],"that `cleanUpInput=unwords":["."],"that `daysInGigasecond`":["is"],"that `digits`":["returns"],"that `encoded":["=="],"that `endsWith`":["already"],"that `error`":["works"],"that `filterString`":["was"],"that `findWithDefault":["d"],"that `fmap":["f","f"],"that `fmap`":["maps"],"that `foldM`":["needs"],"that `foldl'`":["is"],"that `foldl`":["would","is","is","is"],"that `foldr`":["is","forces"],"that `fromEnum":["False"],"that `fromList":["[]`."],"that `fromListWith`":["may","isn't","(or"],"that `fw`":["does"],"that `g":["x`"],"that `guard`":["nearly"],"that `head":["(map"],"that `import":["qualified"],"that `insertWithKey`'s":["result"],"that `insertWith`":["or"],"that `insert`":["in"],"that `intercalate":["\""],"that `isAnagram":["s`"],"that `isJibbersish`":["is"],"that `isSpace`":["handles"],"that `isUpper`":["only"],"that `last":["str"],"that `last`":["breaks"],"that `length":["l`"],"that `letterSet`":["already"],"that `lettersInStatement`":["let"],"that `liftA2":[".","."],"that `map":["toLower`","toLower","toLower","toLower"],"that `mapAccumL`":["was"],"that `messageType`":["will"],"that `n`":["is"],"that `normalise":["s`"],"that `normalize":["x`","x`"],"that `not":["(any"],"that `not`":["`any`"],"that `null":["comps'`"],"that `number`":["always","is","will"],"that `on`":["has"],"that `randomR":["('A',"],"that `randomRIO`":["works"],"that `readMVar`":["and"],"that `read`":["and"],"that `responseFor":["_"],"that `responseFor`":["is"],"that `return":["()`."],"that `return`":["is"],"that `reusing`":["count"],"that `robotName`":["has"],"that `s":["=="],"that `show":["'A'`","'C'`"],"that `silence`":["is"],"that `sort":["source`","x`","a'`","lowerA`","(map","a`","(map","(downcase"],"that `sortAndLower":["w1`"],"that `sortedWord":["word1`"],"that `sorted`":["is","and"],"that `split`":["and"],"that `takeDown`":["and"],"that `target`":["is"],"that `test":["x`\"."],"that `toLower`":["would","into"],"that `turn`":["function"],"that `type`":["won't"],"that `uncurry`":["entirely"],"that `unfoldr`":["is"],"that `unsafePerformIO`":["isn't"],"that `var":["\u003c-`."],"that `voice`":["is"],"that `w`":["and"],"that `where`":["is"],"that `word`":["is"],"that `words`":["starts"],"that `xn":["="],"that `zip":["\"AGCT\""],"that a":["`foldl`","filter","`read`","list","new","straightforward","better","`Robot`","bit","shot.","bit","Char-based","much","clever","pattern","series","list","Haskell","the","letter","word"],"that about":["imports,","multiline"],"that abstraction.":["Might"],"that abstracts":["the"],"that acceptable":["style"],"that act":["on"],"that actually":["seems","makes","makes","do","runs"],"that added":["a"],"that addens":["can"],"that addition":["happen"],"that additional":["information"],"that adds":["a","N"],"that again":["and"],"that all":["the","primes","primes","of","letters","of","of","of","characters","primes","of","of","later"],"that allCaps":["depends"],"that allow":["us","to"],"that allowes":["it."],"that already":["does","exist,","exists"],"that also":["has"],"that although":["the","the"],"that an":["`ALL-CAPS","Array","STM","empty"],"that and":["it","because","come","fix","see","GHC","I'm"],"that answers":["my"],"that anything":["with"],"that anyway,":["it's"],"that appears":["to"],"that approach":["much","compile","would"],"that are":["repeated","farther","in","part","part","supposed","6n-1","equal","unused","not","strict:","created","value-strict.","worth","not","used,","spine-lazy,","higher","not","hardly","only","defined","short","already","just","used","getting","operators","shared","required","really","not","unrelated","anagrams","invalid."],"that aren't":["actually","so","part"],"that argument":["around","then"],"that as":["it","\"the","one","well","of","well.","well","a"],"that aside":["as"],"that asking":["me"],"that asymptotic":["complexity"],"that at":["least","first,","first,"],"that avoids":["some"],"that away":["if"],"that bad":["input"],"that bad.":["You"],"that bank":["can't"],"that base":["case"],"that basically":["this"],"that bearing":["and","and"],"that became":["a"],"that because":["evaluating","you're"],"that before..":["oh"],"that begin":["with"],"that behaves":["very"],"that being":["lazy","applied","too"],"that between":["the"],"that big":["stack","line"],"that binding,":["which"],"that bit":["I"],"that bit.":["Thanks."],"that boilerplate":["for"],"that book":["myself,","(actually"],"that book;":["it"],"that both":["have","the"],"that break":["the"],"that but":["did"],"that button.":["My"],"that by":["changing","using","\"decimal\"","making","changing"],"that bytestring":["ones."],"that calculates":["`length"],"that calculation.":["A"],"that calling":["`randomRIO`"],"that can":["be","reduce","cause","be","make","see","be","be","be","arise","fuse","be","take","cause","do","perform","satisfy","be","reduce","do","be","happen","do","be"],"that case":["gracefully","gracefully.","you'd","though.","I","on","would","you'll","out."],"that case).":["If"],"that case,":["you","but"],"that case.":["Since"],"that case:":["`Map.alter`"],"that case…":["since"],"that catch-all":["for"],"that cell":["of"],"that changing":["code"],"that chapter":["too","from"],"that character":["or"],"that cheating":["?"],"that check":["works"],"that check,":["as"],"that checks":["if"],"that class":["as","that"],"that classification—":["probably"],"that clause":["to"],"that clauses":["follow"],"that cleans":["up"],"that clear":["at"],"that clearly":["isn't"],"that closer":["maps"],"that code":["only","will","without","with"],"that code,":["I"],"that code.":["If"],"that combined":["the"],"that combines":["`div`"],"that come":["to"],"that comes":["with","back","in"],"that cominator":["approach"],"that comment,":["I"],"that common":["code","to"],"that computation":["from"],"that computation.":["You"],"that computes":["`1+1+1+1+1+1`"],"that computing":["a"],"that condition":["for","might","without","entirely","is"],"that conflicts":["with"],"that construct":["feel"],"that constructor":["can't"],"that consumes":["it,"],"that contain":["digits!","just"],"that contains":["every","any"],"that context,":["laziness"],"that convenient,":["you"],"that corresponds":["to"],"that costs":["zero,"],"that could":["be","be","be","be","be","be","be","be,","be","satisfy","compute","make","help","take","be","be","run"],"that couldn't":["do"],"that counting":["one"],"that counts":["as"],"that covers":["all"],"that current":["tests"],"that cutesy":["trick,"],"that cz":["is"],"that datatype.":["So..."],"that day":["that"],"that daysInGigasecond":["will"],"that deliberate":["or"],"that demonstrates":["this"],"that depend":["on","on"],"that describe":["how"],"that description,":["other"],"that didn't":["help","seem","have","seem"],"that digit":["and"],"that directly":["in"],"that do":["this","essentially","not","almost","not","the"],"that does":["what","not","this","both","the","what","this","look","require","a","this","this","have","have","the","`2^`","what","that,","an","not","exactly","most","the","look","the","the","mean","that.\u003cpre\u003ePrelude\u003e","not","look","*not*"],"that doesn't":["need","contain","apply","really","do","quite","conflict","use","require","need","take","have","allow","measure","cross","require","mean","depend","build","involve"],"that don't":["exist,"],"that done":["in"],"that double":["makes"],"that e.g.":["`Data.Map`"],"that each":["language","list","Char"],"that earlier":["but"],"that efficiency":["though."],"that either":["since","behavior","of","unescape"],"that elegant,":["especially"],"that element":["of"],"that eludes":["me,"],"that enables":["syntax"],"that encapsulates":["the","the"],"that end":["with","in"],"that ended":["up"],"that ensures":["the"],"that entirely,":["would"],"that error":["you"],"that evaluates":["to"],"that every":["valid","char"],"that everything":["but","would","that"],"that except":["for"],"that exercise.":["I"],"that exists;":["that's"],"that explains":["how","how"],"that explicitly":["holds"],"that expression":["gets"],"that extension.":["Thanks!"],"that extra":["little"],"that fact":["maybe!"],"that fails":["is"],"that far":["fetched","into"],"that fast),":["for"],"that feels":["a","a"],"that file":["the"],"that filter":["without","with","by"],"that first":["variable.","you","word"],"that fit":["better."],"that fits":["your"],"that fmtNumber":["doesn't"],"that foldl":["gets","is"],"that foldr":["will"],"that followes":["algorithm:"],"that for":["every","both","a","you","some","simple","you","you"],"that forces":["`bstValue`"],"that form":["(single"],"that from":["the","when"],"that fully":["evaluating"],"that function":["just","in","parameter","does,","(e.g.","from","definitions","is","on"],"that generality,":["since"],"that generates":["a","type"],"that get":["rid"],"that gets":["forced","messier","used","the","covered","collected","the","mixed"],"that gist":["I"],"that give":["you"],"that given":["a","some"],"that gives":["what"],"that go":["into"],"that goes":["a"],"that goes.":["(However,"],"that going":["forward."],"that grade":["in"],"that great":["thing"],"that guarantees":["that","that"],"that guard":["syntax"],"that guards,":["case"],"that had":["occurred"],"that handles":["the"],"that happen":["to"],"that happen?":["We"],"that happened":["to"],"that happens":["the"],"that happy":["with"],"that hard":["to","to"],"that has":["an","little","to","numbers","`A","the","more","gaps.","been","a"],"that haskell":["would"],"that have":["been.","a","signatures","to","other"],"that he":["says"],"that head":["of"],"that helped.":["The"],"that helps":["a","me"],"that hole":["pretty"],"that http://exercism.io/submissions/523f9cc1f90faad79e0000ae":["did."],"that huge":["chain","chain","chain","chain","chain"],"that i":["very","have","wanted","wanted"],"that i'd":["call"],"that idea.":["It"],"that identifier":["without"],"that if":["inference","you","you","you","you","exercism","you","you","the","I","I","any","then","you"],"that implementation":["is","since"],"that implementation,":["thanks"],"that important":["unless"],"that in":["yours,","real","earlier","a","general","`count`,","the","both","Haskell.","the","`where`","`parts`","your","this","point-free","my","iteration","the","the","`resetName`","and","code.","the","order","Haskell.","vim,","this","after","mind","general","Haskell","case","mind.","this","that","TVar","the","the","`incrementBalance`","a"],"that increases":["linearly"],"that indetation":["is"],"that information":["to","contained"],"that initial":["suggestion"],"that inner":["filter"],"that input":["can"],"that insertion":["happens"],"that instance":["is"],"that instead":["of","of"],"that instead.":["If"],"that interleaving":["is"],"that into":["a"],"that introducing":["function"],"that invalidated":["my"],"that is":["`toRNA","not","a","not","to","equivalent","often","easier).","exactly","able","most","in","useful","valid","the","calling","an","never","exactly","alphabetical,","done","accumulator-strict).","the","all","n","`Response","larger","36","because","what","`not","considered","no","a","either","to","covered","rarely","also","the","a","potentially","evenly","evenly","evenly","so","necessary.","strict","not","more","a","a","more","the","the","longer","much","a","strict","that","leftmost","true.","got","as","not","not","very","a","an","considered","any","traveresed","as","the","\"much","rather","equivalent","to","not"],"that is,":["take","it"],"that isAllCaps":["can"],"that isAnagram":["should"],"that isSpace":["is"],"that isYelling":["could"],"that isn't":["something","a"],"that issue.":["http://www.haskell.org/haskellwiki/Performance/Data_types#Enumerations"],"that is—":["I"],"that it":["should","would","takes","matters","didn't","is","can","looked","selected","has","doesn't","won't,","is","isn't.","composes","would","is","should","replaces","would've","is","looks","is","really","just","seems","is","*is*","guarantees","makes","is","takes","specializes","only","works","wasn't","didn't","looks","would","gives","mind.","can","would","is","does","could","is","needed","could","was","needs","evaluates","only","works","won't","won't","is","is","ignores","takes","uses","actually","changes","is","will","is","looks","will","was","probably","doesn't"],"that it's":["only","equivalent","equivalent","equivalent","equivalent","equivalent","just","common","a","recursive.","silly","rare","*not*","non-strict","not","specialized","not","hard","any","not","a","not","really","clear","cleaner","equivalent","the","defined","except","possible","False","assuming","because","strict","a","easier","not","preferred.","a","evaluated","not","expecting","lazy,","unambiguous"],"that its":["not","the","first","a","closer"],"that just":["using","an","by","after"],"that kind":["in","of","of"],"that lacks":["laziness"],"that lambda":["in","function","would","comparing"],"that lambda:":["`\\acc"],"that last":["case."],"that later\"":["most"],"that laziness":["makes?"],"that lazy":["evaluation"],"that leads":["to"],"that let":["you","me"],"that leverages":["a"],"that like":["`number`,"],"that line":["does"],"that lines":["that"],"that link":["you","really"],"that link,":["but"],"that list":["comp","I","comprehensions","comprehension).","with","comprehension","append"],"that look":["like","like","like","like","more","like","like","something","like","like","like"],"that looked":["a"],"that looking":["up"],"that looks":["like:","quiet","fine","like","like","like","something","like","like","pretty","like","like","pretty","more","something","like","like","like","like","kinda","nice..","good.","like"],"that make":["different","sense!","sense."],"that makes":["this","sense","it","the","sense","the","sense.","it","the","perfect","sense.","sense.","sense!"],"that managed":["to","to"],"that manually":["with"],"that many":["Haskell","have","would","days","data"],"that map":["is","toLower"],"that map.":["`foldl`","Presumably"],"that mapMaybe":["is"],"that match":["your"],"that matched.":["I"],"that matches":["the"],"that matches,":["maybe"],"that matter":["`a'`"],"that matter),":["hlint"],"that matter*)":["will"],"that matter,":["why","is"],"that may":["never","be","or","overlap","eventually","simplify","be"],"that maybe":["only","is","just"],"that mean":["whenever","that"],"that means":["the","it's","there's","explicit"],"that means.":["Are"],"that memory":["allocation"],"that might":["look","be","be","be","be","have","typically","not","help","help","be","just","be","be.","be","be","be"],"that missing":["space"],"that mistake,":["and"],"that model":["implementation,"],"that module":["is","(just"],"that modules":["split"],"that more":["readable","can","efficiently","than","efficient"],"that most":["of","developers","Haskell","of","Haskell"],"that moving":["the"],"that much":["effort","less","data,","interesting","difference..","slower,"],"that multiplication":["on"],"that multiset":["would"],"that mutates":["state"],"that my":["guard","code","pattern","approch"],"that n":["and","in"],"that name":["in","too,","choice"],"that named":["functions"],"that naming":["convention."],"that nature":["in"],"that nature,":["or"],"that necessary?":["It"],"that need":["an"],"that needs":["special"],"that neither":["RNA"],"that next":["is","time."],"that no":["input"],"that none":["of","of"],"that nonempty":["tree"],"that normally":["`get`"],"that not":["be","the"],"that nothing":["is"],"that nucleotideCounts":["walks"],"that number,":["and"],"that numbers":["with","should"],"that numeral":["then"],"that occurrences":["of"],"that of":["php/python/javascript","course.","atomic"],"that often":["means"],"that ok":["for"],"that once":["`oneOf`","you"],"that one":["used","out.","can","doesn't","of","be","day","needed"],"that one,":["still"],"that one.":["Thanks","Seems"],"that only":["`foldl`","one","otherwise","ended","involves","makes","returns","performs","used","has"],"that onlyAlpha":["isn't"],"that operation":["should"],"that operation,":["it's"],"that opportunity":[":)"],"that optimization":["is"],"that optimization.":["You"],"that optimize":["this"],"that optimizer":["can"],"that order":["because","with"],"that others":["have,"],"that out":["and","there.","in","yet","entirely.","when"],"that out.":["I'll"],"that overhead,":["because"],"that page":["before"],"that part":["more","of"],"that part.":["Thanks"],"that passed":["the"],"that passes":["the"],"that pattern":["matches","matches"],"that people":["explore","could"],"that performs":["the"],"that perhaps":["that"],"that point":["though.","of"],"that point.":["Here's"],"that portion.":["(...there"],"that position":["goes"],"that possibility.":["I"],"that premature":["optimization"],"that prevent":["from"],"that previous":["version","iteration."],"that private":["functions"],"that problem":["too."],"that problem.":["You'll"],"that problematic":["in"],"that process.":["But"],"that produced":["it."],"that property":["to"],"that put":["many"],"that puts":["me"],"that putting":["the"],"that quite":["terse."],"that randomRIO":["makes"],"that reading":["that"],"that reads":["the","\"filter"],"that really":["just","makes","state","makes"],"that reason,":["the"],"that recommended":["fromListWith?"],"that reduced":["amount"],"that reduces":["all"],"that refactor.":["Something"],"that regex":["makes"],"that relies":["on"],"that rely":["on"],"that removing":["the","`do`"],"that repetition,":["but"],"that replace":["concatenation"],"that replacing":["chars"],"that require":["performance."],"that requires":["an","knowing","enabling","knowing","the","enabling","knowing"],"that resetName":["was"],"that respect,":["my"],"that responseFor":["must","works"],"that retrieving":["grades"],"that return":["those","false.","the"],"that returns":["a","True","a","the","both","result","empty"],"that robot":["you"],"that robot-name":["exercise."],"that route?":["I"],"that rule":["in"],"that rule,":["inline","inline"],"that runs":["in"],"that s":["will","will"],"that said,":["I'm","if","the","there's"],"that sans":["args."],"that satisfies":["`n"],"that says":["`","`w"],"that scores":["here"],"that second":["guard"],"that section":[":)","will","and"],"that seem":["to","at","to"],"that seemed":["as","to"],"that seems":["to","like","to"],"that semantically":["matches"],"that sequence.":["Harder"],"that setting":["default"],"that shadowing":["with"],"that ship":["with"],"that ships":["with","with"],"that should":["be","be","get","exist","make","be","be","make","be","be","actually","differ"],"that shouldn't":["be","have","parse."],"that show":["supplied","in"],"that shows":["how"],"that significantly":["changes"],"that silence":["must"],"that simple,":["but"],"that simple.":["I"],"that simplifies":["stuff","`if"],"that simply":["isn't","a"],"that since":["`foldl`","it"],"that single":["pass"],"that slope":["becomes"],"that solution":["seemed","for","uses"],"that solves":["my","first","it."],"that some":["other","of","predicate\".","other","people","people"],"that someone":["has"],"that something":["named","is","is"],"that sometimes":["choosing","code"],"that sort":["of","of","of","is"],"that spec":["as"],"that special":["case."],"that specification":["doesn't"],"that specifies":["the"],"that splits":["based"],"that start":["date","with"],"that still":["doesn't","make"],"that stores":["something"],"that str":["will","will"],"that strict":["languages"],"that string":["one"],"that strings":["of"],"that stuff":["out","out"],"that stuff.":["When"],"that style":["would","might","would","guide","guide,"],"that stylistic":["nitpick,"],"that supports":["elements"],"that surely":["is"],"that syntactic":["sugar"],"that tail":["recursion"],"that take":["more"],"that takes":["me","two","a","a","the","two","two","a","`n`","2","a"],"that task":["(if"],"that tell":["the"],"that template":["will"],"that test":["case","out"],"that tests":["for","lead"],"that than":["`words","me"],"that that":["my","the","can","was","should"],"that that's":["a"],"that that,":["this"],"that the":["current","tests","name","whole","result","`show`","order","default","returned","order","`is`","logic","computation","derived","way","type","words","string","tests","problem","accumulator","shorter","exercise","accumulator","argument","robot","`School`","efficient","input","accumulator","strings","`Robot`","result","counting","slices","functions","False","test","goal","module","variable","usage","extra","caller","input","map's","css","way","way","lookup","structure","inferencer","fields","value","underscore","two","compiler","accumulator","compiler","crash","benefit","transformations","values","values","lower","program","value","values","values","input","tests","transformations","first","list","tests","parentheses","map","map","same","`foldl`","same","first","recursive","compiler","normalization","word-counts","difference","whole","custom","idea","sets","whole","function","name","input","Data.Aray","scores","module","accumulator","given","exercises","parens","dot","second","`foldl'`","computation","code","recursion","previous","compiler","idea","names","reordering","optimization","parentheses","second","solution","parentheses","tuple","contents","constructor","fold","code","order","first","first","beauty","verses","tests","`questions`","parens","next","numbers","algorithm","default","pattern","Matrix","`rest'`","input","strict","new","string","tests","previous","input","Right"],"that their":["use","meaning"],"that there":["could","are","is","doesn't","are","is","are","is","are","are","are","is","exists","are","is","is","is","are","was","are","are","are","was","is"],"that there's":["some","more","some","a","some","a","a","also","a"],"that these":["two","two","thunks"],"that they":["make","think","should","were","might","are","are","are","can","all","were","be","got","are","have","are","are","are"],"that they're":["more","predicates","all","defined","more"],"that things":["visible"],"that think":["the"],"that this":["problem's","code","implementation","is,","is","is","solution","is","would","is","is","is","could","problem","requires","way","will","type","exercise","implementation","is","version","could","is","is","could","isn't","doesn't","might","helps","api","is","function","hint","function","is","solution","would","solution"],"that those":["don't","dangerous"],"that though,":["I'm","for","I'd"],"that threw":["exceptions"],"that through":["responseFor,"],"that throwing":["errors"],"that thunk":["will","will","will"],"that tip":["in"],"that to":["be","existing","your","work","point-free","work.","outer","be"],"that to:":["```[(\"a\","],"that toLower'":["x"],"that too":["often"],"that too.":["http://bob.ippoli.to/archives/2013/01/11/getting-started-with-haskell/#install-ghc-mod"],"that took":["the"],"that transactions":["can"],"that transform":["as"],"that tries":["to"],"that tuple":["won't"],"that turned":["out"],"that turns":["a"],"that type":["you","signature","came"],"that type's":["`==`"],"that type,":["your"],"that types":["of","will"],"that typically":["get"],"that ugly":["habit...","if,"],"that unify":["ist"],"that union":["will"],"that unless":["you're"],"that unlike":["my"],"that use":["arithmetic","arithmetic","lists."],"that used":["to","anything"],"that user":["should","knows"],"that uses":["them","`lookup`","`filter`","the","the","list","the","Data.Array","Parsec","unstream.stream","Text.map,","MonadPlus","them.","linear","`count`."],"that using":["an","Data.Char","Left","\"isSuffixOf\"","`String`","`randomRIO`","an","higher","module-internal","Text.map","bytestring","pattern","Criterion"],"that value":["is","to","from","to"],"that values":["in"],"that variable":["entirely:"],"that vectors":["because"],"that version":["of","even"],"that version.":["I"],"that very":["short.","neatly"],"that waits":["the"],"that was":["in","just","shown","fed","a","expected","overkill,","being","the","structured","the","supposed","found,","probably","my","necessarily","described","incorrect.","described","indeed"],"that wasn't":["a"],"that way":["(better","and","is",":)","to","as","because","to","only","it","for","for","and"],"that way!\"":["@=?","@=?","@=?","@=?"],"that way!\",":["you"],"that way!\"`":["needs","should"],"that way\"":["response"],"that way,":["but","but","since"],"that way.":["It's","And"],"that way.\"),":["(isAllUpper,"],"that way...":["except"],"that way?":["Surely"],"that we":["should","ignore","got"],"that were":["too","already","happening","only"],"that what":["you","you","that","it's","you"],"that when":["I","I","we","the","A","evaluation","I"],"that where":["is"],"that whether":["a"],"that while":["testing"],"that whole":["list","chain"],"that will":["do","only","never","force","help","need","make","do","allow","simplify","allow","look","allow","allow","guarantee","be","allow","be","work","make","guarantee","definitely","translate","do","be","only"],"that with":["the","functions","`head`","higher","a","`S.toList`"],"that without":["writing","the"],"that won't":["work.","take","be"],"that work":["over","with","for"],"that work,":["which"],"that worked":["for"],"that works":["on","like","with","both","in"],"that worth":["the"],"that would":["rid","interact","make","apply","be","allow","be","be","be","make","be","make","let","let","test","mean","be","expose","be","also","use","make","make","work","force","fail","make","be","de-clunkify","result","work?","be","require","fail","show","catch","loop","make","replace","act","have","not","let","make","perform","have","guarantee","have","have","make","work","be"],"that wouldn't":["be","really"],"that wrapping":["the"],"that writing":["my"],"that wrong":["and"],"that yet":["(mine"],"that you":["might","could","can","do","can","point","also","could've","included","use","can","could","mention","process","do","(I","wrote","can","could","can","could","went","use","don't","should","basically","could","can","may","algorithm","put","use","used","reduce","put","included","write","might","can","chose","can","should","don't","could","can","don't","multiply","can't","are","could","can","don't","could","do","have","import","can","are","want","shouldn't","can","can","want","don't","can","likely","have","could","fixed","use.","used","can","can","can","can","can","can","can","can","need","could","may","write","can","can","use","use","can","can","shouldn't","put","are","can","can","have","can","chose","should","used","test.","might","want","could","want","suggested","prefer","meant","try","can","will","should","can","want","can","can","didn't","could","need","know","can","build","can","can","can't","don't","may","could","used","would","have","suggested","wrote","could","have","can","can't","do","can","should","can","actually","refer","get","will","could","want","wouldn't","remove","do","do","may","can","can","place","handle","solution","are","need","need","may","can","can","can","may","can","can","can","can","might","want","might","may","can","require","could","need","can","may","included","can","will","may","may","can","might","might","could","would"],"that you'd":["prefer"],"that you'll":["be","only","build","not"],"that you're":["checking","using","using","not","not","reimplementing","working","looking","exporting","defining","using","not","running","probably","having","calling","looking","not","using","treating","recursively","using"],"that you've":["checked","just","introduced"],"that your":["implementation","use","code","code","code","code","`countUp`","solution","implementation","`randomName`","commented","code"],"that zero":["doesn't"],"that! Thanks":["a"],"that! VERY":["useful"],"that'd be":["partial..."],"that'd do":["it."],"that'd require":["another"],"that'll make":["it"],"that'll take":["care"],"that's \u003c=":["that"],"that's GHC":["specific"],"that's `[('a',":["1)]`,"],"that's a":["great","tiny","matter","hint","matter","matter","good","bug","matter","good","lot","useful","really","better","great","great","bit","good","minor","little","good","bit"],"that's about":["runtime","the","it."],"that's an":["instance"],"that's avoided":["with"],"that's basically":["a"],"that's because":["the"],"that's better":["and"],"that's brilliant!":[":-)"],"that's caught":["by"],"that's comforting..":["I"],"that's definitely":["better.","better."],"that's done":["lazily"],"that's enabled":["by"],"that's fair.":["Looks"],"that's fast":["regardless"],"that's fine.":["I'm"],"that's good":["to","to"],"that's harder":["to"],"that's hardly":["better"],"that's how":["[`sum`","I","the"],"that's inevitable":["since"],"that's interesting,":["I"],"that's it's":["necessarily"],"that's just":["`null`,","my","me,","my","the","a","me.","more","a","my","me?","about","what","how","a","my"],"that's let":["me"],"that's list-like":["(and"],"that's longer":["than"],"that's matter":["of"],"that's more":["work","common"],"that's much":["better."],"that's my":["next"],"that's never":["going"],"that's not":["really","a","the","really","really","point-free,","really","too","important.","in","the","valid","quite","what","relevant","'G',","all"],"that's odd":["-"],"that's on":["the"],"that's only":["a","between","used"],"that's originally":["how"],"that's personal":["preference."],"that's possible":["since"],"that's present":["in"],"that's pretty":["elegant!","neat."],"that's probably":["a","fine)."],"that's rather":["nice"],"that's ready":["to"],"that's really":["helpful!","better"],"that's relevant":["to","to"],"that's required":["is"],"that's right,":["Show"],"that's slick.":["I"],"that's so":["much"],"that's super":["useful,","useful"],"that's tail":["recursive"],"that's the":["worst","only","only","same","implementation","same","best","usual","Haskell","\"Haskell","goal","syntax,","right"],"that's too":["big"],"that's true,":["if"],"that's two":["extra"],"that's up":["to"],"that's used":["by"],"that's very":["much","cool."],"that's what":["the","I've","we","you're","it","the","the","they","it","you","I","this"],"that's what's":["most"],"that's when":["you"],"that's where":["you","the"],"that's why":["I","it's",":-)"],"that's with":["`foldl'`"],"that's worthwhile":["for"],"that). I":["didn't"],"that, I":["don't","think","have","like"],"that, `toUpper`":["is"],"that, all":["of"],"that, although":["not"],"that, and":["do"],"that, but":["don't","I","I","otherwise","the","I","it"],"that, by":["the"],"that, code":["is"],"that, consider":["using"],"that, everything":["looks","here"],"that, given":["two"],"that, if":["you","you"],"that, it":["looks","looks","just"],"that, it'd":["be"],"that, looking":["at"],"that, maybe":["a"],"that, most":["other"],"that, or":["I"],"that, outside":["of"],"that, plus":["`uncurry`,"],"that, really":["nice"],"that, sorry.":["Hope"],"that, such":["as"],"that, that's":["slick."],"that, the":["caveats","lazy"],"that, then":["creates"],"that, this":["is"],"that, very":["nice"],"that, which":["actually"],"that, while":["this"],"that, you":["can","should","should","could","should"],"that,s what":["my"],"that. A":["much"],"that. Ahh,":["yes"],"that. Also,":["instead"],"that. And":["good","yes"],"that. Complexitywise":["it's"],"that. For":["some","completeness/consistency"],"that. From":["the"],"that. However,":["it"],"that. I":["also","never","was","still","revised","believe","just","think"],"that. I'd":["also","then"],"that. I'm":["going"],"that. I've":["been"],"that. If":["there"],"that. It":["was"],"that. Most":["modern"],"that. No":["matter"],"that. One":["way"],"that. So":["I","that"],"that. Something":["like"],"that. Thank":["you."],"that. That's":["pretty"],"that. There's":["a"],"that. These":["exercises"],"that. This":["kind"],"that. What":["atomic"],"that. You":["won't"],"that. i":["am"],"that... certainly":["makes"],"that... seems":["like"],"that..._ and":["_for"],"that.\u003cpre\u003ePrelude\u003e :t":["flip"],"that; I":["did"],"that? Everything":["else"],"that? I":["have"],"that? In":["that"],"that? It's":["certainly"],"thats short":["one"],"that’s incredibly":["elegant."],"thay have":["support"],"the \"Fine.":["Be"],"the \"Haskell":["Way\"","Way\""],"the \"How":["To"],"the \"LLNNN\"":["but"],"the \"Sure\"":["check."],"the \"Sure.\"":["case"],"the \"Woah\"":["case."],"the \"Woah,":["chill"],"the \"[text]\"":["values."],"the \"alternate":["value\""],"the \"base":["case\","],"the \"body\"":["of"],"the \"broken":["keyboard\""],"the \"custom":["mapping"],"the \"do":["is"],"the \"dot":["combinator\""],"the \"double":["negative\""],"the \"element":["level\""],"the \"empty\"":["out"],"the \"falling":["through\""],"the \"float":["out\""],"the \"good\"":["case."],"the \"if":["none"],"the \"invalid":["when"],"the \"looks":["great\""],"the \"map\"":["rule","rule"],"the \"mapList\"":["rule,","rule,"],"the \"monomorphism":["restriction\""],"the \"official\"":["test,"],"the \"on\"":["function"],"the \"order":["of"],"the \"owl\"":["operator"],"the \"pointfree\"":["app"],"the \"prime\"":["notation?"],"the \"real":["world\"."],"the \"replace\"":["function"],"the \"sledge-hammer\"":["approach."],"the \"sorted\"":["function"],"the \"strictness":["issue\""],"the \"string-replace":["T"],"the \"verse":["components\""],"the \"where\"":["and"],"the \"word\"":["many"],"the \"words\"":["and"],"the &&":["to"],"the 'C'":["and"],"the 'G',":["'C',"],"the 'core'":["(stage"],"the 'just":["leave"],"the 'last":["statement'"],"the 'mapMaybe'.":["It"],"the 'namespace'":["of"],"the 'of":["beer'"],"the 'opposite'":["of"],"the 'otherwise'":["case,"],"the 'precedence'":["or"],"the 's',":["it's"],"the 'space":["leak'"],"the 'verse":["0'"],"the (":[")"],"the (a":["/="],"the (admittedly":["a"],"the (all-too-common-for-myself)":["mistake"],"the (latest)":["Haskell"],"the (somewhat":["arbitrary)"],"the **Data.String.Utils**":["module"],"the *if*":["away"],"the *right*":["type."],"the *rules*":["of"],"the *then*,":["as"],"the ++":["nucleotide"],"the -":["you"],"the -\u003e":["manually."],"the -O2":["-ddump-simpl"],"the 0":["case,"],"the 1":["with","valued"],"the 13th":["day","of"],"the 1st":["of","string"],"the 2":["in"],"the 2nd":["power?\"","iteration,"],"the 2nd?\"":["$"],"the 4":["case","spaces"],"the 4-spaces":["rule"],"the 4x":["traversal"],"the 5th":["power?\"","power?\"","power","power","power?"],"the 8":["bit","gives"],"the 80":["char"],"the \u003c$\u003e":["operator"],"the \u003c0":["cases"],"the \u003ccode\u003ewhere\u003c/code\u003e":["syntax"],"the API":["should","and","goes,","is","of","from","from","for","for","from","defined"],"the API.":["There's","Specifically:","Also,"],"the Alternative":["typeclass","typeclass"],"the Applicative":["instance","instance).","`(\u003c&&\u003e)`"],"the Array":["and"],"the Asc":["version."],"the B":["module","import"],"the BST":["non-strict"],"the BangPatterns":["on"],"the Bool":["to"],"the Boolean":["function"],"the ByteString),":["where"],"the C,":["G,"],"the C/G/A":["cases"],"the CPP":["extension"],"the Char":["literals,","appropriately,","-\u003e","conversion"],"the Cincinnati":["Functional"],"the Clojure":["implementation","tests,","suite","code"],"the Control.Applicative":["/","operators."],"the Control.Arrow":["tip"],"the Control.Monad":["import,"],"the DNA":["string).","string","was"],"the DOW":["of"],"the Data.Aray":["has"],"the Data.Array":["and"],"the Data.List":["library."],"the Data.List.Ordered":["for"],"the Data.List.Split":["stuff","module","library"],"the Data.Set":["and"],"the Data.String.Utils":["library?"],"the Data.Text":["import"],"the Debug.Trace":["is"],"the Diagrams":["package."],"the Either":["monad."],"the Emotion":["datatype."],"the EmotionalContent":["is"],"the English":["version"],"the Enum":["instance","typeclass","instance","instance","typeclass.","instance","instance","instance","instance","typeclass","typeclass,","instance","instance"],"the Eq":["typeclass."],"the False":["and"],"the First":["monoid)"],"the Functor":["instance","instance","instance?","instance","instance","instance","instance"],"the GHC":["core","compiler"],"the HUnit":["that"],"the Haskell":["way","Platform","exercises","reddit","idioms","Platform","standard","Platform,","solutions","section","Platform…","standard.","Platform","Wiki](http://www.haskell.org/haskellwiki/Foldr_Foldl_Foldl')","way","way","Platform","Platform.","world.","standard","Platform.","tests","Platform.","Platform","Platform.","problems","exercises.","Platform.","compiler","documentation,","way...","way","way","track","I've","Platform","Platform).","Platform)","equivalent","Platform","docs","pro's","Platform.","exercises","precedence","Platform"],"the I":["figured"],"the IO":["monad","Monad,","monad","monad,","monad."],"the IORef.":["That's"],"the Int":["is","you"],"the Int,":["which","it's"],"the Int.":["This"],"the IntMap":["API"],"the IsXyzOf":["style"],"the Ix":["type","typeclass."],"the Java":["equivalent"],"the KindSignatures":["or"],"the LANGUAGE":["BangPatterns"],"the LHS":["or"],"the List":["`foldl'`"],"the M":["namespace."],"the MVar":["to","keeping","(probably","isn't","to"],"the MVar.":["If","`modifyMVar`"],"the Map":["imports","to","code,","you","is","is","builder","itself","in","instead","is","here:","is","type","will","is","`fromList`.","since","itself.","in","itself","itself","to","itself"],"the Map,":["you","you","the","which","it's"],"the Map.":["Your","As-is","It's","Of"],"the Matrix":["would","problem","is"],"the Maybe":["branches.","type.","monad"],"the Maybe-lifting":["would"],"the Maybe/Monad":["stuff"],"the Maybes":["is"],"the Maybes?":["And"],"the Metadata":["is"],"the Monad":["typeclass","instance","instance"],"the Monad,":["about"],"the Monadic":["binds","style"],"the Monoid":["instance","instance"],"the Monoid,":["Functor,"],"the MonomorphismRestriction":["(fixed"],"the None":["plants"],"the Nothing":["cases","case,"],"the Num":["typeclass::"],"the O(n)":["of"],"the Other":["category."],"the OverloadedStrings":["extension"],"the PharseHeard":["data"],"the Platform,":["so"],"the Prelude":["and","`any`","imports","at","as","`filter`."],"the Prelude,":["I"],"the Python":["version"],"the README":["used","or","most","provides","file,","and","since","do","was","is","says"],"the README's":["suggestion"],"the README,":["everything","but"],"the README.":["In","Now"],"the RHS":["of"],"the RNA":["type"],"the Random":["module.","stuff"],"the ReadChar":["class"],"the Readme,":["someone"],"the RequestType":["ADT"],"the Right":["Thing"],"the Right/default":["value"],"the Robot":["using"],"the Robot,":["just"],"the ST":["monad,"],"the STM":["monad,"],"the School":["and","datatype"],"the Show":["typeclass,"],"the Standard":["Haskell"],"the State":["monad","monad","monad","?"],"the StdGen":["rather"],"the Strict":["form."],"the Strict.":["Thanks"],"the String":["`message`","would"],"the String?":["There's"],"the TH":["but"],"the Text":["import","conversion","needs","code"],"the TupleSections":["pragma","language","language","language","extension,","LANGUAGE","LANGUAGE","pragma","LANGUAGE"],"the US":["version"],"the Unboxed":["implementations."],"the ViewPatterns":["extension"],"the WHNF":["for"],"the Wall":["tip."],"the Weekday":["type","of","of"],"the Writer":["monad","monad"],"the [Arrow":["parser](http://www.haskell.org/haskellwiki/Arrow#Parser)"],"the [Haskell":["Platform](http://lambda.haskell.org/platform/doc/current/frames.html),","platform](http://lambda.haskell.org/platform/doc/current/frames.html)"],"the [Monad":["laws](http://www.haskell.org/haskellwiki/Monad_laws)"],"the [String]":["="],"the [example":["solution"],"the [haskell-mode":["for"],"the [wiki](http://www.haskell.org/haskellwiki/Prime_numbers#Sieve_of_Eratosthenes).":["Took"],"the _isEmpty_":["case."],"the `\":)":["?\"`"],"the `\"?\"`":["into"],"the `\"\\n\"`":["noise"],"the `$`":["and","to","on"],"the `&&&`":["is"],"the `&amp;&amp;`":["needed?"],"the `&gt;&gt;=`":["and"],"the `('C':'M':)`":["construction"],"the `((-\u003e)":["r)`","r)`"],"the `(+)`":["here"],"the `(++)`":["operator."],"the `(+:)`":["operator"],"the `(,)`":["constructor"],"the `(-\u003e)":["Int`."],"the `(.)`":["and"],"the `(==":["0)"],"the `(Map.alter":["incr)`"],"the `(next":["end)`"],"the `(not":["."],"the `*":["-\u003e"],"the `++`":["on","because","operator"],"the `++`.":["It"],"the `+`":["function"],"the `..`":["token."],"the `.`":["operator.","operator's","operator","operator","operator.","combinator"],"the `/=`":["comparison,","comparison"],"the `1.`":["binding"],"the `::Integer`":["should"],"the `:`":["constructor","operator)."],"the `\u003c$\u003e`":["operator","means."],"the `\u003c-`":["operator,"],"the `\u003c|\u003e`":["operator"],"the `==`":["comparator","operator."],"the `==`,":["you"],"the `=`":["and","(thus"],"the `\u003e=`":["and"],"the `\u003e\u003e=`":["\"trick\""],"the `Applicative`":["instance"],"the `Callable`":["typeclass","class."],"the `Control.Arrow`":["do?"],"the `Control.Concurrent.MVar`":["module"],"the `Data.Bits`":["functions"],"the `Data.Char`":["provided"],"the `Data.IORef`":["module"],"the `Data.List":["(intercalate)`"],"the `Data.List.Split`":["functions","library),","module,"],"the `Data.List`":["module.","module","module,"],"the `Data.Map`":["module"],"the `Data.Maybe`":["import."],"the `Data.Sequence`":["module."],"the `Display`":["constructor)."],"the `Either`":["monad"],"the `Functor`":["instance"],"the `Just`":["constructor"],"the `Key`s":["are"],"the `LANGUAGE`":["header"],"the `Left":["res`,"],"the `List`":["functions"],"the `M.map`,":["and"],"the `MVar`":["is"],"the `Map`":["type","type","imports","import"],"the `Maybe":["[Maybe","Square`s","Integer`"],"the `MessageType`,":["uh,"],"the `MissingH`":["package."],"the `Monad`":["instance"],"the `O(n":["lg"],"the `O(n)`":["comparison"],"the `OK,":["I'm"],"the `Ord`":["of"],"the `Response`":["type"],"the `Right":["'!'`","Int`"],"the `Robot`":["constructor","type"],"the `STRICT_2_OF_4`":["macro"],"the `Sch`":["constructor"],"the `School`":["type","as","constructor)."],"the `ShowS`":["type."],"the `Show`":["and","instance","class","class,"],"the `State`":["monad"],"the `StdGen`":["between"],"the `StdGen`,":["and"],"the `String`":["type","version","`Text`"],"the `Text`":["datatype.","value"],"the `True`":["values."],"the `TupleSections`":["extension,","extension","extension,","extension","extension,","extension,","extension","extension","trick."],"the `[]:qss`":["case"],"the `[]`":["in"],"the `[q]:qss`":["case."],"the `\\n`":["at","in"],"the `\\n`s":["off"],"the `^`":["operator"],"the `_1`.":["The"],"the `_`":["is"],"the `_s`":["convention"],"the ``":["operator."],"the ```'T'```":["case,"],"the ```(++)```":["by"],"the ```C.toUpper":["x"],"the ```Map```":["first"],"the ```School```":["type"],"the ```add```":["function."],"the ```filter```":["calls"],"the ```fromEnum```":["trick,","values","definition"],"the ```grade```":["function"],"the ```let...in```":["clause"],"the ```let```,":["and"],"the ```lowerWord```":["and"],"the ```map":["."],"the ```null```":["check.","hint"],"the ```number```":["function."],"the ```silence```":["function"],"the ```sorted```":["function"],"the ```split```":["package,"],"the ```st```":["in"],"the ```words":[".```"],"the `a":[".","==","&lt;="],"the `a`":["and"],"the `addends`":["method"],"the `all":["isSpace"],"the `all`":["out","function","higher-order"],"the `analyze`":["function,"],"the `any`":["combinator","combinator","combinatorial."],"the `atomically`":["so"],"the `bal":["\u003c-"],"the `baseNums`":["list."],"the `bottles`":["function."],"the `c`":["parameter"],"the `candidates`":["binding."],"the `canonicalize`":["function"],"the `case":["sch"],"the `choice`":["combinator."],"the `cleanUpInput`.":["I"],"the `const":["Statement`"],"the `count":["`"],"the `count`":["inline","function"],"the `curry":["f`"],"the `d":["4"],"the `decimalValues`":["argument"],"the `display`":["function"],"the `dna`":["in","argument"],"the `do":["..."],"the `do`":["here","notation"],"the `do`).":["Will"],"the `downCaseFirst`":["function"],"the `elem`":["function,"],"the `else`":["on"],"the `enumFromThenTo`":["syntax!","syntax"],"the `error`":["case"],"the `errors`":["package,"],"the `f.g`":["syntax"],"the `f`":["though,"],"the `filter":["(not","isAlphaNum`"],"the `filter`":["by","will","expression,"],"the `filter`?":["You","Or"],"the `findWithDefault`":["function"],"the `firstDay`":["stuff"],"the `flatten`":["function"],"the `foldl'`":["for","actually","and","takes"],"the `foldl'`),":["but"],"the `foldl`":["with","approach","trap"],"the `foldr`":["problem","space","version"],"the `foldr`'s":["function,"],"the `force`":["on"],"the `from..to`":["case"],"the `fromEnum":["w`"],"the `fromEnum`":["won't","for","instance"],"the `fromGregorian":["y"],"the `fromLIstWith`":["implementation"],"the `fromListWith`":["function."],"the `fromMaybe`":["and"],"the `g":["x`"],"the `g`":["argument"],"the `getBalance`":["into"],"the `hammingDistance`":["function"],"the `id`":["function"],"the `if":["f"],"the `inWeekOffset`":["relative"],"the `insertCount`":["function"],"the `insert`":["function,"],"the `invalid`":["test"],"the `is*`":["predicates"],"the `isAnagram`":["implementation."],"the `isEmpty`":["test"],"the `isQuestion`.":["If"],"the `isSep`":["is"],"the `isSilence`":["function","guards","case,","guard"],"the `is`":["combinator"],"the `join`.":["Revision,","I'm"],"the `last(s)`":["this"],"the `length":["(filter"],"the `length`":["of","approach"],"the `letterSet`":["map"],"the `letters`":["and"],"the `linked-list`":["problem,","problem."],"the `lookup`":["function."],"the `lookups`":["list"],"the `map":["toLower`","map`.","(filter","toLower`","toLower`","toLower"],"the `mapLetter`":["function."],"the `mapMaybe`":["solution."],"the `map`":["call:","to","by","calls","implementation","sources"],"the `maybe`":["function"],"the `meetup`":["exercise."],"the `mod":["7`"],"the `module`":["line,"],"the `msg":["=="],"the `mutation`":["function?"],"the `n":["==","=="],"the `newtype`":["is","is"],"the `nonempty`":["conditions."],"the `normalise`":["to"],"the `normalize`":["function."],"the `not":["(isJibbersish","(null"],"the `notDuplicate`":["and"],"the `not`.":["They"],"the `nuclelotideCounts`":["accept"],"the `nucleotideCounts`":["function,","function."],"the `null":["s`"],"the `on`":["function"],"the `otherwise`":["implies","clause."],"the `own`":["operator"],"the `phrase`":["param"],"the `prepare`":["function."],"the `primes`":["code","version"],"the `question`":["function"],"the `questions`":["list"],"the `quotRem`":["version"],"the `randomRIO`":["version."],"the `readList`/`showsList`":["fancy"],"the `read`":["and","and"],"the `rem`":["test"],"the `remove*`":["functions."],"the `removePunctuation`":["and"],"the `replace`":["function","function"],"the `reponseFor":["s`"],"the `resetName`":["function","function.","function?","function"],"the `responseFor`":["function","function","function.","function","function.","function","function"],"the `response`":["method."],"the `rest":["-\u003e"],"the `rest'`":["computation"],"the `return":["()`","()`"],"the `reverse`":["in"],"the `s`":["binding,","binding,","parameter","and"],"the `s`s":["and"],"the `sanitize`":["function"],"the `scoreWord`":["function"],"the `score`":["isn't"],"the `shout`":["condition.","and"],"the `shouting`":["case"],"the `show`":["instance","outside"],"the `simulate`":["function,"],"the `sing`":["tests,"],"the `sort":["."],"the `sort`":["and"],"the `split`":["package"],"the `sqrt`":["result"],"the `str":["==","=="],"the `str`":["bound"],"the `strand`":["argument"],"the `succ":["cnt`"],"the `sum`":["&"],"the `take":["n"],"the `toAscList`":["so"],"the `toRNA`":["function?","function,","function"],"the `toUpper":["letter`"],"the `toWeekDate`.":["Given"],"the `transform`":["function"],"the `translateDNA`":["binding"],"the `trim`":["function,"],"the `try`'s":["succeed."],"the `uncurry`":["or","with"],"the `unfoldr`":["is"],"the `unlines`":["idea"],"the `unsubmit`":["functionality"],"the `up`":["function."],"the `valid`":["check"],"the `w`":["on","variable"],"the `where`":["clause","clauses","block.","clauses.","clause","clause.","clause,","such","clause?","for","clause","clause","indented","and","and","clause."],"the `where`-defined":["predicates"],"the `word1":["/="],"the `wordsBy`":["predicate","predicate.","method"],"the `words`":["code"],"the `x`":["is","implicit"],"the `xs`":["here."],"the `ys`":["argument"],"the `zipWith`":["implementation"],"the `zs`":["name"],"the `{-#":["LANGUAGE"],"the `|":["n"],"the `|\u003e`":["operator"],"the `|`":["and"],"the `||`":["operator"],"the abbreviation":["that"],"the above":["comment.","trick","definition","code","bothers","nits"],"the above)":[":)"],"the above,":["right"],"the absence":["of"],"the abstract":["concept,","core","data","data"],"the abstraction":["that","behind"],"the account":["is","in","is"],"the account,":["why"],"the accumulated":["value"],"the accumulation":["in"],"the accumulation.":["Is"],"the accumulator":["of","of","at","here","is","so","isn't","by","strict.","by","isn't","is","is","is","is","is","sufficiently","is","is","is","is","is","will","on","is","to","iteratively","and","since","to","for"],"the accumulator,":["but","but"],"the accumulator.":["`Data.Bits.shiftL`","This","In"],"the accumulator[1]":["the"],"the action":["that"],"the activation":["of","control","control"],"the actual":["strand","name","result.","result","school","code","difference","answer).","digits"],"the added":["benefit"],"the addition":["and","eagerly.","and"],"the addition,":["and"],"the additional":["arithmetic","benefit","operations","binding,","exercise","tasks.","benefits"],"the advantage":["to","of","of","of"],"the advice":["as","in"],"the advice.":["I'll"],"the advices,":["but"],"the aforementioned":["cases)."],"the algebra":["before","so"],"the algorithm":["above","works","-","should","can","that","[here](http://www.blackwasp.co.uk/NumberToRoman.aspx).","very","itself","is","in"],"the algorithm's":["complexity),"],"the algorithm,":["`count`"],"the algorithm.":["Either"],"the algorithms":["for"],"the alignment":["of"],"the all":["function","caps"],"the all-caps":["case.","response,","clause"],"the allowed":["values."],"the alphabet":[";)","-","pretty","expands"],"the alphabet.":["Since"],"the already":["sorted"],"the alternative":["\"No","to","is"],"the amount":["of"],"the ampersands":["properly.)"],"the anagram":["suite","of","function"],"the anagramsFor":["before"],"the angle":["test"],"the answer":["is","would","for","would","looks","considering","at"],"the answer.":["Search"],"the answers":["succinctly"],"the any'":["thing"],"the api":["you"],"the apostrophe)":["function"],"the append":["and"],"the application":["of","during","of"],"the applicative":["functor","syntax"],"the applicative,":["but"],"the approach":["of"],"the appropriate":["string.","operator.","level","normal","amount","Int.","```wordsBy```."],"the appropriately":["named"],"the arbitrary":["tacking","choice"],"the are":["decidable,"],"the areaCode,":["number"],"the args":["to"],"the argument":["to","is","name","for","list","(in","in","in.","in","in","to"],"the arguments":["isn't","match","to",":)","to","supplied","so","of","to","(in","explicitly","are","are"],"the arguments.":["My"],"the arithmetic":["before","you're"],"the array":["and","once","of"],"the arrow":["`toLower"],"the arrows":["weren't"],"the article":["and"],"the assignment":["with","in"],"the association":["list"],"the association-list":["strangeness"],"the associativity":["and","and","of"],"the assumption":["that"],"the asymptotic":["complexity","complexity.","complexity","complexity"],"the automatically":["generated"],"the auxiliary":["function"],"the average":["number"],"the avoid":["explicit"],"the awesome":["feedback."],"the back":["burner"],"the backing":["for"],"the backslash":["continuation","in"],"the bad":["algorithm"],"the balance":["was","which","to"],"the balancing":["process"],"the bang":["patterns","patterns"],"the bank":["account"],"the base":["libraries.","package,"],"the basic":["functionality.","Haskell","reason","(-+*)"],"the bearing":["and"],"the beautiest":["solution"],"the beauty":["of"],"the begging":["of"],"the beginning":["checks","of","of","of","of","of","an","of","and","of","of"],"the beginning,":["there's"],"the beginning:":["`add"],"the beginnings":["of"],"the behavior":["you"],"the behavior,":["except"],"the below,":["because"],"the below?":["(both"],"the benefit":["to","to","of","over","over","of","doesn't"],"the benefits":["would","are"],"the best":["approach","way","way","one,","option.","because","name...","name","choice.","option","solution","case","readability.","but","possible","fold","thing","way.","way","function","way","way","way","way","way","way","kind","solution.","explanation","way","way","place","tool","thing","naming","predicate","shape","scenario","metric,","I","module","binding"],"the best.":["If"],"the best?":[":D"],"the better":["way","algorithm.","way","module"],"the big":["case","inputs,","picture"],"the binary":["number","number","operation","operation","operation"],"the binding":["for","(this","`_`,","is"],"the binding,":["right?"],"the bindings":["so","so"],"the bit":["twiddling.","level,","level","operations"],"the bit.":["You"],"the blank":["check"],"the blanket":["rules,"],"the body":["of","of","of","so","of","of","of","of","isn't"],"the boilerplate":["for","and","of","in","for","for","code"],"the bonus":["points","points,"],"the book":["which","recommendation"],"the book,":["really"],"the bool":["operators","and","equivalent"],"the boolean":["logic","logic","logic"],"the booleans":["for","to"],"the bottleneck":["since"],"the bottler.":["Ah,"],"the bottom":["that","of"],"the bounds":["first"],"the bounds,":["no?"],"the box,":["and"],"the brackets":["in","around","on"],"the breadth":["of"],"the brute":["force"],"the building":["of"],"the built-in":["ones","date"],"the builtins":["from"],"the buttons.":["I"],"the cabal":["to","file."],"the calculation":["in"],"the calculations":["a"],"the call":["to","to"],"the caller":["isn't","from","is"],"the caller,":["but"],"the calls":["to"],"the candidates":["too.","argument."],"the capitalization":["of","of"],"the capsLock":["guard."],"the case":["of","of","that","where","for","\":)","where","of","analysis","normalized","of","of","normalization","statement,","where","normalized","of","here.","of","of","expression","normalization","normalization","expression","expression","of","on","when","of"],"the case,":["`show","but"],"the case.":["If"],"the cases":["in","(hierarchy","where","but","where","covered.","on","where","of","where","affects","by","here."],"the cases,":["but"],"the casing":["is"],"the catch":["all"],"the catch-all":["pattern"],"the caveats":["depend"],"the chain":["so","of"],"the chance":["that","to"],"the chances":["of"],"the change":["from","I'm"],"the change,":["thanks!"],"the changes":["you"],"the chapter":["until","on"],"the chapters":["that"],"the char":["appropriately.","list"],"the character":["frequency","somewhere.","is","(type","predicates"],"the characters":["are","are","T","are","you","instead"],"the chars":["fit"],"the chase":["with"],"the cheater":["value"],"the check":["on","of","digit)"],"the checks":["needed","for","for"],"the checks,":["although"],"the chess":["board"],"the children's":["name,"],"the choice":["is","is"],"the choices":["that"],"the chosen":["algorithm."],"the clarification":["on"],"the clarity":["and","of"],"the class":["on","of","where"],"the classic":["Purely"],"the classification":["from","stage","from"],"the clauses":["isn't","of","in"],"the cleanUpInput":["again."],"the cleanest-looking":["solution"],"the cleaning,":["not"],"the clearest":["thing"],"the client":["doing"],"the clojure":["tests","examples"],"the closest":["to"],"the clunkiness":["of"],"the code":["while","box","run","a","a","looks","faster","feels","shorter","easier.","a","to","less","already","considerably.","a","is","for","more","simpler","simpler","more","more","more","I","elegant.","shorter","will","shorter","there","is","to","you","looks","immediately.","easier","was","you","are","a","simpler","a","more","is","to","for","will","implementing","a","more","gets","readable","easier","I","I",":-)","is","just","is","size","more","is","becomes","is","or","to","in","yourself","easier","I","of","in","swapping","is","gets","with","will","seems","is","look","is","repetition,","a","then","I","may","shorter","box.","size","much"],"the code,":["does","it","but","and","but","I","although"],"the code.":["It","There","Also,","Nonetheless,","This","By","Maybe"],"the code...":["Any"],"the code…":["there's"],"the coercion":["completely."],"the coincidental":["implementation"],"the combining":["function."],"the command":["line.","line"],"the comment":["is","removed)","in","of"],"the comment,":["but"],"the comments":["hurt","on","on","of","on"],"the comments!":["This"],"the common":["and","cases","'\\n'.join","1-point","parts","1","stuff,","approach"],"the commonly":["accepted","accepted"],"the community":[":)","is"],"the comparison?":["Then"],"the comparisons,":["the"],"the compilation)":["of"],"the compiler":["has","enforce","output,","recognize","is","isn't","might","more","for","can","wouldn't","would","offers","has","will","define","how","can","won't","barked.","more","can","to","to","knows","is","should","infers","makes","can","better","and","is","will","can","doesn't","doesn't","will","can","a","can"],"the compiler's":["output,","precedence"],"the compiler/runtime":["do"],"the compiler?":["It"],"the complete":["module","function"],"the complexity":["of","of"],"the complicated":["part"],"the compliter":["to"],"the composition":["from","around","operator","operator."],"the comprehension":["instead","anyways."],"the computation":["isn't","based","has","is","happens","must","related","on","`o","and","`(f","is","happens","`old","and","passed","multiple","eagerly","cannot"],"the computation)":["and"],"the computation.":["Examples","This"],"the computations":["when","for"],"the computations.":["Because"],"the computed":["value"],"the computer":["in"],"the concat,":["or"],"the concept":["of"],"the concepts":["(in","it"],"the concerns":["of"],"the conclusion":["it","experimentally"],"the concrete":["type."],"the condition":["in","is","was"],"the conditional":["and"],"the conditions":["into","into","to","for","using"],"the confusion!":["This"],"the confusion.":["And"],"the cons":["operator.","(`:`)"],"the considerations":["in"],"the consistency":["of"],"the constant":["list?","is","terms,"],"the constants":["in","to"],"the constants,":["a"],"the constraints.":["Might"],"the constructor":["`(:)`,","in","on","in","(`[]`,","naming","for","is","for","`'T'`"],"the constructors":["don't","`Tip`","all"],"the constructors,":["a"],"the containers":["package).","package"],"the contents":["(types,","of"],"the context":["I","of","of","looks","that","of"],"the context.":["You","Or"],"the continued":["strings"],"the continuous":["feedback!"],"the convenient":["`fromList`"],"the convention":["in","is","to","is","for"],"the conversion":["of","between"],"the conversion,":["just"],"the core":["output","lib","lib","functions","syntax"],"the correct":["place","result?","behaviour","size.","workaround","classification","response","MessageType)","behavior.","answer","elements","fold,","GHCI","number","weekday.","result","space","`m`","dates","spelling","result","positive","grade"],"the corrected":["test"],"the correctness":["of","(It's"],"the cost":["to","of","of","of","of","of"],"the count":["of","function","for","generator","function","from"],"the counters,":["at"],"the counter…":["most"],"the counting":["operations","for","for"],"the counting.":["Take"],"the counts":["this","for","will","and","list","for","in","for"],"the counts.":["Unsure"],"the couplet":["lines"],"the course":["of"],"the crash":["condition"],"the creation":["of"],"the criteria":["(e.g."],"the critiques":["everyone!"],"the css":["for","file"],"the current":["solution","tests","state","power","master","bit.","value.","implementation","implementation,","tests)","tests,","definition","order","factor","predicate","revision.","one","instant"],"the curriculum":["based"],"the custom":["typeclass","data","data"],"the data":["to","structure","type","flow","structure","constructor.","structure","itself,","structure","type,","it","types","structure","constructor.","from","in","type","insertion","type","with","types.","types","type","type","type"],"the data-structure":["the","one"],"the datatype":["is","-","itself."],"the date":["in","math.","arithmetic"],"the date-math":["functions"],"the day":["&gt;=","of","given","of","of","of"],"the days":["properly.","in","in"],"the deadlock":["issue."],"the decimal":["conversion","value"],"the declarations":["must","must","must"],"the deep":["end"],"the default":["is","values","implementation","value-lazy","implementation","insertWith","Map","if","Map","implementation","val","and","counts"],"the default.":["This"],"the defaulting":["either"],"the defense":["mechanisms"],"the deficiencies":["of"],"the definition":["of","of","of","in","at","at","of","of","of","of`isShouted`","to","of","of","of","for","of","of","of","in","of","of","of","of","of","of","of"],"the definition,":["just","as"],"the definition.":["Additionally,"],"the definitions":["that","you're","of"],"the definitions,":["and"],"the definitions.":["Unless"],"the delay":["in"],"the dependence.":["You"],"the dependency":["on"],"the derived":["read/show","Show"],"the description":["of","and","of"],"the description,":["i.e."],"the descriptive":["function"],"the design":["of"],"the desired":["weekday.","behaviour.","functions.","outcome?)","strictness","effect","functionality."],"the destructor":["is"],"the destructuring":["(`('T':rest)`)"],"the detailed":["explanation!","response!","review."],"the details":["of","if"],"the details.":["You"],"the detriment":["of"],"the developer's":["instinct"],"the difference":["between","is","is","is","in","in","between","between","is","that","and","here","in","between"],"the difference,":["compare"],"the difference?":["And"],"the differences":["between","described"],"the different":["suggestions","lines","inputs","options","naming","kinds"],"the differentiating":["characteristics"],"the difficulty":["for"],"the digit":["with","models"],"the digits":["yourself","a","from","from","directly."],"the digits,":["it"],"the direct":["equivalence","equivilance."],"the directions":["that"],"the discussions":["involving"],"the display":["function."],"the distant":["future,"],"the dna":["reduction","argument"],"the do":["notation.","blocks","block","block.","block"],"the docs":["for","here","warn","for","is","that"],"the docs)":["that"],"the docs,":["it","look"],"the docs:":["http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Char.html"],"the docs][haddock].":["You"],"the documentation":["and","though.","rarely"],"the documentation,":["and","shouldn’t"],"the domain":["of"],"the dot":["is"],"the dots":["of"],"the double":["map","logical","iteration","mention","conversion.","monad/functor"],"the dwarf":["planets."],"the each":["letter"],"the earlier":["`binary`"],"the easier":["questions."],"the easiest":["way"],"the easy":["way"],"the eco-system":["to"],"the effect":["of","must"],"the efficiency":["of","of","just","a"],"the efficiency.":["I'd"],"the efficient":["solutions?","thing"],"the effort":["to","or","you","to"],"the elegance":["of"],"the element":["in"],"the element.So":["I"],"the elements":["can"],"the eletter":["\"T\"."],"the empty":["string","string","case,","list","string.","list","string.","list.","list.","string","string","string","list","case","string","string","case?","list","import","string","list."],"the end":["without","of","of","*and*","of","I","worse","if","of","of","of","of","of","of","and","of","of","of","of","of","the","of","you","of","it'll","of"],"the end,":["but","I","and","rather","i","foldr","and"],"the end.":["I"],"the ending":["```map```"],"the entire":["list.","spine","input","list","time?","fold","school","do","input","list","list","list","module)","list","list","input,","input.","list"],"the enum":["of"],"the enumerable":["property"],"the enumeration.":["Also,"],"the environment,":["so"],"the environment?":["I'm"],"the ephemeral":["tuple"],"the equal":["signs"],"the equality":["check","test"],"the equals":["sign."],"the equation":["only","and","on","(but","not","you"],"the equation)":["`toRNA"],"the equation,":["indentation"],"the equation.":["It's"],"the equivalent":["pattern","of","to","of"],"the error":["message","is","code","to","using","thrown","in","is","function"],"the error.":["By"],"the errors":["separately","when"],"the essence":["of"],"the eta":["reduction","reduce","reduce"],"the eta-reduction":["(closer","because"],"the evaluation":["in","actually","of","of","of"],"the evaluations":["don't"],"the evil,":["and"],"the exact":["same","same","same","same","situation","nature"],"the exactly":["the"],"the example":["a","solution.","file"],"the example,":["nice"],"the examples":["very"],"the exception":["that","that"],"the exclusion":["of"],"the exercise":["get","again","requires","it","is","README","more","was","that","exactly.","was","it"],"the exercise,":["since","I"],"the exercise.":["I","Yes,","If"],"the exercises":["using","using","in","were","teach","with"],"the exercises,":["I","but"],"the exercises.":["I"],"the exercism":["site)","git","CLI"],"the existence":["of"],"the existing":["one","`words`","binding","binding","binding","function","binding","binding","binding","binding","keys","robot."],"the expected":["string.","\"Woah,","output.","order","performance","string","behaviour"],"the expense":["of","of","of"],"the explanation":["is","(more"],"the explicit":["types.","equals","concat","use","recursion,","recursion","recursion","recursion","list","recursion?","fold","use"],"the explicitness":["if"],"the exponent":["operator."],"the export":["of"],"the exported":["ones)."],"the exports":["were"],"the expression":["returns","`unify","doesn't","itself.","enough","(requires","on","looks"],"the expression,":["`f"],"the expression:":["print","print","splitPlaces"],"the expressions":["you","around"],"the expressiveness":["of"],"the extension.":["There's"],"the extent":["that"],"the extra":["ms.","import","import.","check","library?","functions","punctation?","fluff","level","'\\n'","parentheses","line.","line","clarity","line","parentheses","mile"],"the extreme,":["pointfree)"],"the fact":["that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that","that"],"the factory":["floor,","since"],"the failure":["case.","case","probability"],"the fancier":["algorithms"],"the far":["righthand"],"the fastest":["(in"],"the feedback":["on","as","and","both","--"],"the feedback!":["I","I","I've","I","Really"],"the feedback,":["really","especially"],"the feedback.":["I'm","I","I'm","I'll","Definitely","It","Regarding"],"the feedback;":["I"],"the few":["places"],"the field":["on"],"the fields":["are","of","that"],"the file":["at","--","that","directly","into","or"],"the file.":["I"],"the filter":["and","at","predicate","to","in","function.","clause,","by"],"the filter,":["although"],"the filter.":["Most"],"the filtering":["by"],"the final":["char.","string","three","function","access,","result","result","result.","lookup"],"the finished":["product,"],"the first":["column.","haskell","iteration:)","two","test","problem,","three","word","iteration,","iteration:)","statement,","guard","check","one,","element","condition.","one","two","2","argument","four","handler","implementation.","char","char","line","guard","glimmerings","two","guard","condition,","rule","char","part,","clause…","char","guard","guard","Haskell","two","clause","guard","guard","time","guard","thing","two","argument","solution","guard),","day:","guard","occurrence,","bit","two","phrase","line.\\n\\","case.","iteration).","place?).","time","simplification","letter.","one.","digit","nitpick","letter","argument","statement","time","version","phase","argument","place.","thing","time","time,","time","thing","instance,","guard","one","calendar","whateverday","non-whitespace","part","section","one","column","list","result","solution","character,","condition","character,","one","`True`.","N","mismatch","line","line","guard.","place,","access","place","binding","equation","equation","time","try!","statement","time","is","version","bit","argument","part","element,","one","attempt","guard","guard","iteration,","access.","time.","iteration","time","`filter`","`filter`,","time:","version...","argument.","one","issue,","part"],"the fixed":["version"],"the fixes":["suggested.","you"],"the fixity":["of","of","of","for","of"],"the float":["optimization"],"the float-out":["optimization","optimisation."],"the fly":["structures"],"the fmap":["operator"],"the fold":["for","instead","is","thanks.","is","in"],"the fold.":["In","Not"],"the foldable,":["and"],"the folding":["insert"],"the foldl'":["(note"],"the folds":["yourself.","to"],"the folds,":["I'd"],"the following":["is","line","constraint(s)","constraint(s)","language","12-digit","constraint(s)","are","code:","rule","maybe?","constraint(s)","way:","signature","constraint(s)","substitutions:"],"the following:":["insert","insert","insert","insert","`insert"],"the folowing":["code:"],"the form":["6n+1","6k±1","`n*7","of","of","`2:[3,5..]`"],"the formatting":["of"],"the formatting.":["The"],"the former":["uses","expression","uses","can","way,","is","it"],"the formula,":["and"],"the four":["\"bottle(s)\"","options,"],"the fromListWith":["version"],"the front":["of"],"the full":["sort)","map","map","strictness","'power'"],"the fully":["evaluated","point"],"the fun":["out","out","I"],"the function":["name.","names","should","being","signature","definitions","is","right","declaration,","easier","`wordsBy`","`Map.fromListWith`","head","`parts`.","`wordsBy`","each","I","```pure```","and","declaration","_all_","correctly?","correctly?","is","is","is","is","`words`","`insertWith'`.","is","by","there.","composition","```insert```","signature","has","guards","that","names","if","easier","names","is","was","in","doesn't","you","`drive","but","does.","name,","was","in","signatures.","that","that","`insertWith`","analogous","for","argument","I","not","name","that","`slices`","name","declaration,","`fst`.","i.e.","and","does/acts","can","body."],"the function's":["name","definition."],"the function,":["I"],"the function.":["One","Consider"],"the function?":["I"],"the functional":["way"],"the functionality":["you","of","that","in","that","you"],"the functions":["from","were","in","you","`any`,","should","in","you","`areaCode`,","ensure","(same","in","from","are","you","that","that","that","(though","that","returning","for","from","as","operate","immediately","available","force","isShout,","in","in","have","terminate","in","following","directly","started","you","there,","you're"],"the functions,":["but","both","since"],"the functions.":["You'd","Mostly"],"the functor":["instance"],"the future":["of"],"the future,":["it"],"the future...":["At"],"the gain":["from"],"the game":["Scrabble","that"],"the game?":["It"],"the gaurds":["at"],"the gem,":["at"],"the general":["case"],"the generated":["name."],"the generator.":["But"],"the generators":["for"],"the generic":["functions","version"],"the ghci":["prompt"],"the gigasecond-to-day":["calculation"],"the gist":["I","that"],"the given":["string","type.","problem","nucleotides","Day","`r`","list","Robot.","list."],"the goal":["of","then"],"the goals":["of"],"the good":["rule"],"the goodies":["it"],"the goto":["site"],"the grade":["and"],"the grades":["out","are","out"],"the grains":["to"],"the great":["advantage","nitpicks!","feedback!","good!\"","feedback!","idea"],"the greater":["part"],"the ground":["up"],"the grounds":["that,"],"the grouped":["works"],"the guard":["order","to","```null","expression.","rules","into","either.","on","cases"],"the guard's":["`|`"],"the guard,":["just","we"],"the guards":["with","in","would","more","under","version,","and","are","within","and","from","in","into","much","there;","into","in","in","are","before,","with","to","and","on"],"the guards!":["I"],"the guards,":["though","nice","though","you","you"],"the guards.":["It"],"the habit":["of","of"],"the haddock":["comments.","of"],"the handlers":["are"],"the handling":["of"],"the hang":["of"],"the hard":["way","disk"],"the hard-coded":["48,","solution"],"the harder":["parts"],"the hardest":["problem","time"],"the haskell":["platform"],"the hassle,":["but"],"the hassle.":["But"],"the head":["of","of","first,","and","and","of","of"],"the head.":["dropWhile"],"the heads":["up!"],"the headsup.":["Guess"],"the hell":["is"],"the help.":["I"],"the helper":["function","functions","as","functions","functions","function","functions","functions","functions","function."],"the helpers":["themselves","with"],"the helpful":["advice"],"the heuristic":["by"],"the high-level":["content"],"the higher":["level","level","precedence).","level"],"the higher-level":["combinators"],"the highest":["precedence.","precedence","precedence,","(if","precedence","precedence","precedence","operator","precedence","precedence,","precedence.","precedence","precedence.","precedence","precedence,","precedence,","precedence","precedence","precedence.","precedence,","precedence","precedence,","precedence","precedence,","precedence."],"the hint":["how","that","to","@ruthie"],"the hints":["and","for"],"the history":["of"],"the holes":["in"],"the hood":[":)","on"],"the hope":["of"],"the human":["can,"],"the hundreds/tens/units":["tables"],"the id":["part.."],"the idea":["at","that","of","that","of","of","that","of","of","is","of","of","tha"],"the ideal":["way","solution","variant"],"the identity":["permutation"],"the idiomaticity":["of"],"the idioms":["as","as"],"the if":["statement","statement,","clause"],"the if..else":["can"],"the if/then/else":["stuff","and","as"],"the implementation":["of","of","of","note","changes:","here","of","of","in","of","of","detail","of","of","of","details","of","of","of","details","of","of","didn't","of","of","of","of","that","of","of","of","(see","of","of","of","of","but","of","of","of","of","makes","of","for","of"],"the implementation,":["and"],"the implementation.":["Try"],"the implementations":["of","of","I've","are","were"],"the implications":["of"],"the implicit":["handling"],"the import":["section","to","of","to","to","list"],"the importance":["of"],"the important":["definitions","values"],"the imports":["now","and","after","I","I","differently"],"the impression":["that","that","that","that","that","that"],"the improvement":["of"],"the incoming":["map,"],"the increase":["in"],"the incrementing":["count","process?"],"the indentation":["is","doesn't","issues,","is","wouldn't","and"],"the indentation,":["I"],"the indentations":["problem"],"the index":["that","of"],"the index,":["so","as"],"the index?":["And"],"the indexes":["generated"],"the indexing":["doesn't"],"the individual":["nucleotides"],"the inferencer":["doesn't"],"the inferior":["sign)"],"the inferred":["type"],"the infinitely":["growing"],"the infix":["version","notation","use","use"],"the info!":["I'm"],"the info.":["I"],"the information":["in"],"the initial":["pairs","parameter","list","String,"],"the initialization":["and"],"the initializing":["of"],"the inner":["function","generic","functions,","function","declaration","functions.","pattern","filter,","filter,"],"the input":["is","did","and","only","it","strings.","is","is","string","list","string","unchanged.","strand","and","is","string","dna","list","string","will","is","list.","to","string","is","is","is","to","string","comes","will","and","is","was","to","4","once","list).","is","for","with","of","can","gets","if","data","to","in","to","is","four","with","`String`","string","more","string?","list","string)","to","if","in","is","being","```String```","four","string","strings","string","string","handling","once?","and","letters","to"],"the input!":["I"],"the input,":["when","maps","you","where","and","check","including"],"the input.":["If"],"the inputs":["are","are","I","to"],"the insertWith":["in"],"the insertion.":["When"],"the inserts":["given"],"the inside":["out","out"],"the insights,":["@aaron"],"the instances":["built-in"],"the instructions":["of"],"the int":["in"],"the integer":["representation"],"the integer.":["Check"],"the intended":["purpose","API","interface.","way"],"the intent":["of","as","of"],"the intent,":["would"],"the intention":["more","would","of"],"the intercalate":["needing"],"the interest":["of"],"the interesting":["function"],"the interface":["does","is"],"the intermediate":["digits","mapped","function.","`parts`"],"the internal":["list","workings"],"the internals":["of","_should_","of"],"the internals.":["I'll"],"the intro":["to"],"the introduction":["of","of","of"],"the introspection":["facilities"],"the intuition":["that"],"the invalid":["conversion,","character"],"the invariant":["using"],"the isAnagram":["since"],"the isShout":["function","function,","condition,"],"the isShouting":["naming."],"the isSilence":["guard"],"the isSpace":["and"],"the isXyz":["style"],"the issue":["is","is","of","with","with","based"],"the issue,":["has"],"the issue.":["For"],"the issues":["slightly"],"the it":["because"],"the items":["in"],"the iteration":["(which","3"],"the iteration.":["Is"],"the iterative":["solution"],"the jargon":["\"Youda"],"the job":["done,","of","done","done,","done,"],"the jury":["is"],"the key":["is","(for","and","point"],"the keys":["first","present","must","are","to"],"the keys/values":["aren't"],"the kind":["of","of","of","of"],"the knot":["structure","structure"],"the knowledge":["of"],"the lack":["of","of","of","of","of","of","of","of"],"the lambda":["using","lazily","evaluate","or","calculus).","calculus).","function","does","and","calculus,","used","to","to","abstraction","was"],"the lambda.":["But","\u003cpre\u003eisYell"],"the language":["btw...","performance","fundamentals","for","extension","out.","this"],"the largest":["hammer","something"],"the last":["comment.","line","submission.","guard","statement","statement","exercises.","element","one","element","expression","is","test","revision.","clause","2","line","example.","test","test","test.","iteration.","iteration","iteration","letter","test.","one.","n","ten","argument","function","argument","iteration,","argument","version.","comment:","test.","factor,","factor","factor","two","test.","element","revision.","iteration,","iteration,","version.","argument","character","argument","thing","position.","I've","test","operation","revision,","four","element","guard.","two","line.","one.","iteration."],"the later":["versions","use","ones"],"the latest":["revision","version","Haskell","Haskell","Haskell","Haskell","Haskell","test"],"the latest.":["Submitted"],"the latter":["slightly","two","implementation.","case,","needs","obviating","must","as","is"],"the latter,":["in"],"the laziness":["affects"],"the laziness,":["the"],"the lazy":["and","`insertWith`","data","evaluation","recursion","semantics","version."],"the leak.":["It's"],"the learning":["mode","exercise)."],"the learning,":["too"],"the least":["redundant","amount"],"the least.":["```"],"the lefht":["hand"],"the left":["hand","side","side","side","of","of","hand","is","is","and","and"],"the lefthand":["side"],"the leftmost":["digit"],"the legnth":["on"],"the legwork!":["I"],"the length":["of","of","is","of","of","of","of","of","of","of","you","isn't","of","of","of","of","of","of","at","of","of","check","of","of","of","of","of"],"the length,":["`(sum"],"the lens":["package)."],"the lenses":["in"],"the let":["binding"],"the letters":["in","and","to","for","that","of","of","are","are"],"the letters,":["you"],"the letters-values":["association"],"the libraries":["first?"],"the libraries).":["That"],"the libraries,":["and"],"the library":["is","itself.)"],"the library.":["`anagramsFor`"],"the light":["of"],"the limit":["for"],"the line":["as","start","that","`module","checking","continuation","breaks","in","after"],"the line?":["Thanks!"],"the linear":["algorithm.","space"],"the lined-up":["`=`"],"the lines":["of","of","after","of:","like:","of","of","of:"],"the link":["to"],"the link!":["I"],"the link.":["One"],"the linked":["chapter."],"the links":["circular","above","above,"],"the list":["as","of","`(x:xs)`","I","searching/mangling.","sorted","sorted","of","sorted","comprehension","or","of","is","it","supplied","(which","that","comprehension","in","comprehension","is","instead","comprehension,","of","comprehension.","comp","from","you","monad).","of","monad","is","business","and","twice","once.","is","in","monad","(and","passed","monad","of","doesn't","of","comprehension","once.","is","shorter","is","that's","instead","four","so","of","will","is","and","using","and","in","to","and","is","in","and","of","of","and","twice,","you"],"the list's":["constructor"],"the list),":["the"],"the list*":["if"],"the list,":["instead","but","there","but","but","so","and","with"],"the list.":["Immediately","Thus,","This"],"the list?":["I've"],"the lists":["until"],"the lists,":["for"],"the literal":["`3'"],"the local":["socpe","tests"],"the location":["of","where"],"the locking":["and"],"the logic":["of","and","of","a","behind","in","for","close","in","to","of","here.","a","here","behind","is","of","is","of"],"the logic,":["as"],"the long":["distance"],"the longer":["list","lines."],"the longest":["scrabble"],"the look":["up"],"the looks":["of"],"the lookup":["could","with","table","list","to"],"the loop":["started."],"the lower":["level"],"the lowercase":["vs"],"the lowercased":["version"],"the lowest":["precedence","precedence).","precedence"],"the lstrip":["function"],"the macros":["in"],"the magic":["number","is"],"the main":["responseFor","responseFor","predicates.","function","function.","issue","feature","function","function","function,","function","computation,","verse","function,"],"the maintainability":["benefits"],"the majority":["of"],"the manual":["version","a","fold"],"the many":["many","recursive"],"the map":["is","is","to","is","is","already","to","is","is","and","from","for","is","data","to","itself,","looks","itself,","will","is","are","you're","has","via","toLower","gets","iteratively","in-place","goes,","while","you","is","functions","is","mapLetter","toLower"],"the map's":["spine"],"the map,":["but","you","you","which","then","it's"],"the map.":["Using","The","The","None","So","Unfortunately","I"],"the map;":["there's"],"the map?":["Either"],"the mapAll":["function?"],"the mapLetter":["should"],"the mapping":["function","function.","and"],"the markdown":["here)"],"the markup":["but"],"the material":["enough"],"the materials":["you"],"the math":["though."],"the maths":["behind"],"the matrix":["of","is","in"],"the maybe":["for","value"],"the meaning":["of","of","of","of","of","is","will","from","of"],"the meetupDay":["calculation"],"the memory":["fragmentation.","part.","usage","usage"],"the message":["variable","-","has","doesn't","consists"],"the message.":["Is"],"the method":["gets","mentioned"],"the methods":["in","-"],"the middle":["of"],"the minimal":["char","approach...","example."],"the minor":["things"],"the mix":["of"],"the mode":["does"],"the model":["implementation","implementation","is"],"the module":["I'm","and","would","and","declaration","are","requires","declaration.","statement,","less","explicitly","now","size","definition","definition","explicitly","shouldn't","(e.g.","`Bob`.","and","definition,","after","wide","exports,","is","level)","doesn't","qualified.","is","plus"],"the module,":["but","no,","but","forcing","into","the"],"the module.":["You","`areaCode`","Haskell"],"the moment":["I","is","you're","to"],"the monad":["part"],"the monadic":["`return`.","bind"],"the monoid":["definition.","definition"],"the monospace":["font"],"the month":["is"],"the month,":["but","the"],"the more":["common","efficient","advanced","succinct","optimized","advanced","straightforward","complicated","manual","difficult","idiomatic","characters","common","advanced"],"the most":["relevant","time","efficient","visible","efficient","Haskell-y","performant","liberal","succinct","straightforward","efficient.","interesting","elegant,","general.","part","recent","readable.","pragmatic","important","efficient","readable","performant,","efficient","straightforward","general","part","common","about"],"the multi-line":["syntax.","string"],"the multiple":["passes.","filters","passes","comparisons?"],"the mutability":["in"],"the mutability,\"":["but"],"the mutable":["state"],"the naive":["[Char]"],"the name":["`rnaNucleotide`","suggests.","\"isEmpty\"","every","of","of","of","of","`unSchool`","just","\"unSchool\".","of","of","for","of","change.","to","`insertWord`","of","sounds,"],"the name,":["though","you","but","you"],"the name.":["You're","A"],"the named":["outer"],"the names":["of","of","of","in","of","are","are","could"],"the naming":["in","and","of","and","of","`fs`"],"the native":["`Day`"],"the necessary":["Char/String-\u003eBase/DNA","functions"],"the need":["for","of","to","for","for","for","for","for","to","for","for","for","for","to","for","for","for","for"],"the needed":["`Map,"],"the needle":["and"],"the negation":["of","of"],"the negative":["numbers"],"the nested":["functions).","functions","thunks."],"the new":["solution","version.","term","version","updated","haskell","balance","value","function","cabal","balance","iteration","README","README","initial","updated"],"the newer":["haskell","version."],"the newest":["version"],"the newline":["if"],"the newlines":["yourself"],"the newtype":["would"],"the next":["assignment","exercise","iteration.","version","exercise","step","one","steps","exercise","exercise","line","paragraph.","line.\\n\"","iteration","one.","step","step","exercise.","line","exercise!","occurrence","occurrence","exercise!","one","couple","release","iteration.","revision","line","submission!","iteration.","line.","submission!","function.","Tuesday","guard","element,","way:","iteration.","exercise","step","step.","operation","Iteration.","line.","two,","iteration.","iteration.","iteration"],"the next,":["e.g."],"the nice":["thing"],"the nicer":["way"],"the nines":["and"],"the nitpick":["on"],"the nitpick.":["I"],"the nits,":["I"],"the no":["alpha"],"the non-Earth":["planets"],"the non-FP":["languages,"],"the non-alpha":["characters"],"the non-earth":["planets"],"the non-space":["characters"],"the non-strict":["version.","manner","`Map`"],"the nondeterministic":["IO"],"the normalization":["is","on","steps,"],"the normalized":["value"],"the not":["null"],"the not,":["so"],"the not-Earth":["case"],"the notDuplicate":["into"],"the notation":["base."],"the note":["on","about"],"the nucleotide":["transcription"],"the nucleotideCounts,":["not"],"the nucleotides":["are","into","that"],"the nucleotides,":["you"],"the nucleotidesCounts":["-"],"the null":["check","case,","case","with","check"],"the null-ish":["Meh"],"the number":["of","of","of","of","of","of","of","of","of","function","of","in","of","of","of","as","of","of","of","is","of","of","of","of","of","of","is"],"the number.":["This"],"the numbers":["will","in","that","for","are","somewhere","in","are."],"the numeral":["you"],"the object":["at"],"the obvious":["clarity","solution"],"the obvious.":["Thanks"],"the offset":["stuff"],"the old":["version","version"],"the older":["version"],"the on":["function,"],"the one":["from","that","that","from","important","that","you're","I","used","I","thing","you","I","I"],"the one,":["in"],"the one-pass":["`foldl'`"],"the one.":["There"],"the ones":["you","that","with","for","that","you"],"the ongoing":["status"],"the only":["difference","list","way","meaningful","ones","thing","person","`return`","one","thing","metric","place","thing","function","thing","reason","thing","efficient","advantage","difference","one","real","one).","way","thing","partial","atomic","exception","option","way","reason","way"],"the operation":["it"],"the operation.":["Why"],"the operations":["separately."],"the operator":["before","`||`."],"the operators":["you're","involved,","are"],"the opposite":["of"],"the opposite.":["Seems"],"the optimization":["for","to","isn't","has"],"the optimizations,":["they"],"the optimizer":["wants","wants","making","is.","can","(e.g.","doesn't","doesn't"],"the optimizer's":["choices."],"the optimizer.":["Another"],"the option":["of","of"],"the optional":["`powtest`"],"the options":["in"],"the orbital":["period"],"the ord":["of"],"the order":["in","as","of","of","in","of","changes","you","of","of","mattering,","alone.","of","of","of","defined","that","of","of","we","of","of","you","is","of","of","of","of","of","of","of"],"the ordering":["of","of"],"the origin":["of"],"the original":["words","`[Char]`","strings","string","approach,","meaning","guard","line","version,","code.","letters","letters","implementation","description","record","solution?"],"the original.":["Resounding"],"the other":["functions","two","hints.","languages","2","condition","silently","nitpickers","exercises","side","implementations","ones","day","cases","two","hand,","feedback","functions","hand","ones","hand","predicates","in","languages","one","ones","functions","way","assertions","comments.","exercises","functions","would","hand","points","hints","fields","hand","possibilities","`where`","way","functions","(which","functions","things","way","cases","rules","functions","hand,","languages.","representation,","is","bindings","bindings","points","clauses","hand","form","rules","guards","hand,","suggestions","one","modules.","hand"],"the other,":["I","although","detailed","but","so"],"the other.":["A","But"],"the others":["as"],"the others.":["Also,"],"the otherwise":["guard.","be","guard.","clause,"],"the outer":["parens","parens","scope.","equation","scope","function,"],"the output":["of","in","without","of","of","length","or"],"the output.":["Is"],"the output:":["https://gist.github.com/etrepum/0997fd3fc38957eb1dbf#file-dna-using-text-map"],"the outside":["in\"","of","of","of"],"the outside,":["but"],"the overall":["layout","meaning"],"the overhead":["of"],"the package":["name","that"],"the page":["you","where"],"the page)":["`testBit`"],"the pain":["would"],"the pairs":["but"],"the pairs,":["here's"],"the parameter":["to","to"],"the parameters":["because"],"the parens":["around","you","around","in","around","around","around","around","in","around","in","around","aren't"],"the parens,":["but","thanks."],"the parens.":[":)"],"the parent":["binding"],"the parentheses":["let","are","are","are","you","right","are","around","in","in","are","around","on","around","here","now,"],"the parentheses,":["in","but","you"],"the parentheses.":["I'm"],"the parenthesis":["are","`str`"],"the parse.":["I"],"the parser":["combinators"],"the parsing":["function","version"],"the parsing,":["and"],"the part":["where","of","that","where"],"the partial":["function","application"],"the partiality":["would","is"],"the partially":["applied"],"the parts":["you're","of","that"],"the pass":["over"],"the passes":["somehow"],"the pattern":["step","matching","matchers","matching","of","match","with.","but","matching","matching","to","of","matching","match","matches","matching"],"the pattern-matching":["part."],"the pen":["paper."],"the people":["using","do"],"the perfect":["application","guarantees"],"the performance":["implications","if","be","can","is","will","implications)."],"the performance,":["but"],"the performance.":["Neither"],"the phone":["number?","number"],"the phrase":["\"IS","was","\"first"],"the pieces":["you"],"the pipeline":["because"],"the place":["because","where"],"the place,":["but","I'd"],"the place.":[":S"],"the placement":["of","of","of"],"the places":["where"],"the platform":["but","as"],"the plumbing":["details"],"the plural":["form"],"the plus":["side"],"the point":["somewhere...","of","of","free","`st`.","of","where","free","free","of","value"],"the point-free":["style,","business;","style."],"the pointer":["to","on","to","to","to"],"the pointer.":["(Though","I"],"the pointers":["to","so","@glennie."],"the pointers!":[":)","I"],"the pointers,":["especially"],"the pointfree":["version"],"the pointful":["version"],"the points":["have"],"the pointy":["version:","version"],"the poorly":["designed"],"the position":["in","of"],"the possibility":["of"],"the possible":["digits,","ways"],"the possiblePrimes":["list"],"the potential":["for","error"],"the power":["of","\"of\"`"],"the powers":["of","of"],"the pragma.":["This"],"the precedence":["of","rules","of","of","of","is","of","of","or","or","of","for"],"the preceding":["line."],"the precision":["bounds"],"the precondition":["when"],"the predecessor":["and"],"the predicate":["into","`s`","and"],"the predicate,":["but"],"the predicates":["point-free","more","into","you","in","would","but","in","in"],"the predicates,":["so"],"the predominant":["style"],"the preferred":["style,","way"],"the prefix":["operators","constructor","should","of"],"the preliminary":["solution"],"the prelude":["for"],"the prelude,":["[suggested"],"the prelude.":["I"],"the prepare":["function"],"the prepending":["idea."],"the preprocessed":["word"],"the presence":["of","of"],"the presorted":["and"],"the pretty":["print"],"the prettyPrint":["to"],"the prettyPrinted":["string."],"the previous":["version,","guard,","exercise!","iteration,","version,","key-value","revision","revision","iteration","where","`generateName`","iteration,","value.","one,","exercises,","iteration,","version","iteration","iteration","version.","iteration.","exercise!","iteration"],"the previous,":["due"],"the previously":["defined"],"the primes":["too","will"],"the principle":["of"],"the printf":["dependency"],"the prior.":["First,"],"the private":["functions."],"the problem":["well","really","requires","statement","description","that","statement,","description.","description.","that","split","is","using","is","would","anyways.","description","that","npbarnes","with","first","(as","domain!","description","space.","the","kind","with","best.","in","was.","spec.","is","is","description.","at","spec","were","this","at","at","with","or","is","again.","with","has","here","of","description"],"the problem,":["which"],"the problem.":["Try","The","Sometimes"],"the problems":["that","that","with","had"],"the process":["of","of"],"the processing":["they're"],"the products":["of"],"the program":["to","(sharing","to","at","runs","will","looks"],"the program,":["the"],"the program.":["Some","Is"],"the programs,":["but"],"the proliferation":["of"],"the proper/idiomatic":["use"],"the properties":["that"],"the property":["that"],"the provided":["test"],"the public":["interface","functions","interface","interface.","interface","API","API.","API,","API.","API","API.","API","API","interface","API,","interface,","API"],"the pupil":["to,"],"the pupils":["are","in"],"the purpose":["of","of","of","of","of","of","of","more","of"],"the purposes":["of"],"the qualifications":["on"],"the qualified":["imports.","imports","imports","import,","names","import","it","imports"],"the quantities":["here"],"the question":["response","is,","as","check","mark"],"the questions":["are"],"the quick":["patch."],"the quote":["suffixes"],"the radix":["and","and"],"the randomRIO":["calls"],"the randomness":["of"],"the range":["generation,","syntax","at","to"],"the rationale":["for","for"],"the rationale,":["check"],"the re-organization":["you"],"the readability":["improved.","here.","into"],"the readability,":["but"],"the reader":["of","that","if","to","to","can"],"the readme":["it"],"the readme)":["much"],"the real":["plus-value!).","problem","one,"],"the reason":["is","for","I","for","of","for","for"],"the reasoning":["behind"],"the reasons":["that","are"],"the record":["definition","definition"],"the record,":["the"],"the recursion":["from","yourself","for","is","by","outside","in","will"],"the recursive":["```toListCount```","method","approach","call.","call","`divMod`;","function.","case","case,","call","call,","function."],"the reduced":["n"],"the redundancy":["of"],"the redundant":["parameter.","import","sanitizing.","`isPunctuation"],"the refactoring.":["It"],"the references":["@dashawn!"],"the regex":["(even","twice.","parser"],"the regexes":["myself","and"],"the regular":["Arch","plants."],"the relation":["'are"],"the relations":["of"],"the relatively":["\"heavy"],"the relaxed":["instances"],"the relevant":["[source](http://hackage.haskell.org/package/base-4.6.0.1/docs/src/GHC-Base.html#Monad)."],"the remove*":["functions"],"the rendering":["of"],"the reordering":["makes"],"the repeated":["`length","case."],"the repetition":["in","in"],"the repetitions),":["but"],"the replace":["happens","function,"],"the replacement":["instead"],"the repo.":["I'm"],"the required":["interface.","flips"],"the requirement":["of"],"the resetName":["function"],"the response":["to","!!","string."],"the response,":["which","rather"],"the responseFor":["function","function","function"],"the responses":["instead"],"the responses,":["so"],"the responsibilities":["clearer"],"the rest":["of","of","of","is","from","as","of","of","of","of","of","of","of","of","is","being"],"the rest,":["you","depending","thanks."],"the restriction":["on"],"the result":["should","of","of","list,","of","back","will","is","list","for","as","clearer","is","is","tuple.","of","wasn't","of","is","is","is","is","of","of","in","in","of","should","to","is","for","is","of","is","of","from","of","really."],"the result,":["and","I","not","that"],"the result.":["You","Building","It's","Put","Both"],"the resulting":["list,","program,","RNA","gigantic"],"the results":["of.","of"],"the results,":["if"],"the retry":["from","here,"],"the return":["of","of","function","value"],"the returned":["order","value"],"the reverse":["(e.g.","is","list"],"the review":["e"],"the review,":["@hazle!"],"the review.":["Yeah,"],"the reviews,":["@isabelle","@citlalli","@baylee"],"the revised":["code,","code,"],"the rhs":["letters"],"the richer":["type"],"the right":["approach.","thing","way","side","thing.","track","way","one.","side","direction.","track","hand","idea.","file","thing","thing","thing","thing","pattern,","times.","thing","way","idea,","idea","decisions.","way,","type","BangPatterns","side","side","decision!","asymptotic","one.","fold","side","thing","side","asymptotic","choice","side","asymptotic","side","asymptotic","of","direction.","place","fold","side","name","thing,","side","implementation","thing,","of","side","places.","direction?","way,","time","hand","(consider","is","`foldr'`?","algorithm/function.","track?","direction","thing","format.","approach.","quantity","way","goal,","way,","binary","data","kind","side","side"],"the right).":["In"],"the right-hand-side":["expressions"],"the rightmost":["digit,"],"the risk":["in"],"the road":["of"],"the robot":["always","will","instead","a","has","names","names."],"the robotName":["function"],"the roman":["numerals,","numeral","numeral","numeral"],"the root":["of"],"the rotation":["with"],"the rounding":["and/or"],"the rule":["will"],"the rule:":["use"],"the rules":["for","of","as","in"],"the rules.":["Hence","Hence"],"the running":["time"],"the runtime":["cost."],"the safe":["versions"],"the safest":["ones"],"the sake":["of","of","of","of","of"],"the same":["type","thing.","thing","code","thing","amount","meaning","predicate,","amount","as","thing","string","as","set","algorithmic","thing","as","as","as","way.","thing","clause","clause","name","person.","name","as","as","point","thing","order","result","thing,","thing","look","thing","problem.","with","with","thing","as","variable","variable","one","reasoning,","thing","time.","as","(after","(Hint:","as","place.","time","thing","thing.","point-free","line,","(they","on","seed","value","way","as","as","as","reason,","goal,","functionality.","amount","reason","problem,","result","as","as","clause.","thing","thing","value.","way.","manner","Monad","`xs`).","name.","as","problems","package","exact","task,","time.","as","implementation","grade","name.","as","but","thing.","code,","variable","thing,","time","data","pattern","but","as","number","data","as","functionality","you","thing","as","level","reason","level","variable","module.","as","as","stuff","time","(they","time.","thing.","data","thing","indentation.","way","letter","characters.","thing","thing","implementations","as","expression","feedback","implementations","column","thing","file.","thing","level","functions.","functions.","as","function.","problems!","Map","data","thing","reasons","PRNG","as","thing","structure","word","result.","result.","function.","lines","as:","clause","strategy","thing.","as","as","as","signature","answer","solution","way","column","column","tuple,","as","name.","level","difficulty.","thing.","asymptotically,","as","code","as","as","thing","account,","thing.","as","every","(except","result.","thing.","as","as","characters","number","`y1","as","reason","as","equation","technique","amount","level,","way","equation","lines,","structure","principle.","effect","key.","reason","thing","style","thing,","line","as","line,","value","code.","as","as","thing","`where`","structure,","signature","thing):","as","structure","problem","line","operation","naming","function","suffix(?)","as","as","line","problems","effect","as","you","data,","block","thing..","trap","structure","way","thing.","argument","block","without","thing","as","wrapped","as","number","thing.","form","value","word","as","result.","`Data.List.last`","algorithm,","as","time,","thing","iteration.","approach","logic,","using","function.","level.","time","thing,","way","except","guard","pattern,","reason","[core](http://hackage.haskell.org/package/ghc-core)","way","output","hints","API","boat,","reason","number","just","speed","name","thing.","thing","line."],"the same,":["only","but","but","but","but","i.e.","but","the","but","but","but","that","in","but"],"the same.":["It's","This","You"],"the scale":["per"],"the scan/unfold":["you"],"the scene":["is"],"the scenes":["is","of","can"],"the sch":["clause)."],"the schedule,":["figure"],"the school":["a",":)","first,"],"the sci-fi":["movie"],"the scope":["of","of","of","of","of"],"the score":["of","of","of","table"],"the scores":["like","instead"],"the search":["space,"],"the second":["function,","case","guard,","revision,","gist","gist","gist?","is","one.","argument","argument","part","clause.","clause","is","element","iteration","case","one,","argument","as","element","clause","interpretation.","exercise","element","argument","guard.","thing","clause","guard","pattern.","pattern","pattern,","pass","still","condition","import","parameter","argument","one","field,","`filter`,","`filter`","iteraction"],"the section":["of"],"the seed.":["Still,"],"the semantics":["better,","of","are","of","work","here","of"],"the semantics,":["it's"],"the semantics.":["The"],"the sense":["of","that"],"the sequence":["but","with","four","you"],"the series":["of"],"the set":["'A'","'a'","of","of","operations","of"],"the sets":["of"],"the shifting":["with"],"the short":["implementations"],"the shorter":["`fromListWith","representation","version"],"the shortest":["to","way"],"the shouted":["question"],"the shouting":["and","guard"],"the show":["call"],"the side":["of","of"],"the sides'":["inequality"],"the sig":[":relaxed:","of"],"the signature":["as","`isNil"],"the significance":["of"],"the silence":["condition","guard","case.","and","test,","check."],"the silent":["treatment","check","and","treatment?"],"the simple":["version,"],"the simpler":["fromList.","things","`exceptional"],"the simplest":["and","way","way","strategy:","conceptually"],"the simplicity":["back"],"the sing":["function,","method"],"the single":["characters","quotes","expression"],"the situation":["is"],"the size":["of","of","of","of","of"],"the sketches":["of"],"the skill":["gaps."],"the sky":["is"],"the slices":["you"],"the slight":["mixing"],"the slightly-more-abstract":["phone"],"the small-ish":["test"],"the smaller":["ones.","factors"],"the smallest":["square","`k`"],"the smart":["constructor?"],"the sole":["purpose"],"the solution":["is","due","looks","using","a","to","shown.","only","shorter,","a","I","of","quite","will"],"the solution.":["Does","But","There's"],"the solutions":["look","to"],"the song":["is","from","might","as","correctly,"],"the sort":["and","before","and","bottleneck,","is"],"the sorted":["versions.","version","on","and","list","downcased"],"the sorting":["every"],"the sorts":["of"],"the sorts,":["so"],"the sound":["of"],"the source":["string","code,","code","it","to","as","but","to"],"the source,":["\"isSuffixOf\"","and"],"the space":["detection,","leak","leak","is","of","leak"],"the spaces":["around"],"the spacing.":["The"],"the spec":["is","says...","for","doesn't","is","have","being","\"does","has"],"the spec,":["though","I","even","I'd","and"],"the spec.":["The"],"the special":["cases","characters","case","case","`TVarIO`","cases.","cases"],"the special-case":["for"],"the specialized":["function"],"the specific":["nucleotide","syntax"],"the specification":["for","of"],"the specification,":["I"],"the specification.":["Input"],"the specifications":["are","and"],"the specs":["say"],"the speed":["of"],"the spine":["of"],"the spirit":["of","of","of","of","of","of","of"],"the split":["package","correctly","package"],"the splitAt":["import."],"the splitWhen":["function"],"the splitting":["with","a","code,"],"the spoiler":["if"],"the square":["that","a"],"the squares,":["breaking"],"the stack":["and","is","space","is","space","is","space","is","space","is","space","when","for","in","usage","on","space","overflow"],"the stack.":["The","The","The","The","The","The","`foldr`"],"the standard":["platform)","library,","runhaskell","library;","libraries","libraries","`words`","function","libraries","libraries,"],"the start":["of","date...","of","of"],"the starting":["type"],"the state":["monad","monad"],"the stdlib":["do"],"the storage":["should"],"the store":["and"],"the strand":["four","4","4"],"the strand.":["Writing"],"the strict":["foldl","functions.","variant,","`fromListWith`","left","alternatives?","or","version","version","version?","version","version","version","versions"],"the strict-concurrency":["package."],"the strictness":["issue","is","issues","on","concerns","doesn't","issue","you","fold"],"the string":["has","is","are","while","several","unless","along.","multiple","brings","four","\"\"","is","`\"A\"`.","is","four","before","`\"'C'\"`,","`\"bottles\"`.","representation","representation","and","to","by","4","\"1,","twice.","is","parsing,","first,","being","a","to","might","at","in","concatenations","lazily.","representation","can't","that"],"the string,":["accumulate","while","or","not","so"],"the string.":["Instead","This","Even"],"the strings":["should","from","with"],"the strong":["types."],"the structure":["must","of","of","of","depends"],"the structures":["of"],"the student":["lists","names","lists"],"the students":["were","after","in"],"the students,":["but"],"the style":["in","it's","of","from"],"the style,":["such"],"the styling":["hints!"],"the sub-function":["coming"],"the sublist":["of"],"the submission,":["and"],"the submissions?":["or"],"the submitted":["code","version."],"the subsequent":["cases."],"the subset":["where","of"],"the subtractive":["values,"],"the successor":["in"],"the suggested":["changes"],"the suggestion":["with"],"the suggestion.":["My"],"the suggestions":["from","@eliza."],"the suggestions,":["all"],"the suggestions.":["I","Yes,"],"the sum":["instead","of","and","of","of"],"the summing":["internally,"],"the superfluous":["parentheses","parentheses"],"the supporting":["ones."],"the surface":["amounts","-"],"the surrounding":["bits"],"the swap,":["you"],"the symbols":["as","for"],"the symmetry":["between","of"],"the syntax":["tip","`(,1)`","`[from,","highlighting","work."],"the syntax,":["I'm"],"the system":["so"],"the system?":["There"],"the table":["of","have"],"the table.":["Consider"],"the tail":["of","of","recursive","recursive","of","first.","first,","of"],"the tail,":["that"],"the tail.":["`reverse`"],"the target":["grade,","word"],"the task":["and","was","quite","but","is"],"the tasks":["of","(once"],"the technique":["in"],"the teenth":["whateverday","wednesday"],"the temporary":["tuple","stuff."],"the term":["before."],"the terminology":["used"],"the terseness":["of"],"the test":["suite,","passes.","cases.","cases,","case","suite,","cases.","requires","simpler.","got","module","suite.","cases.","cases.","cases","by","will","case","for","cases,","cases","spec","cases","that","suite","suite","cases","requires","for","file","cases","suite,","cases.","cases","case","cases","suite","cases","cases","by","case","cases","cases","file","cases"],"the test,":["but"],"the testcase":["instead"],"the tests":["expect.","for","using","are","that","despite","and","you","don't","are","happen","don't","and","require","on","or","are","nor","go,","if","and","asked","are","passing,","expects","now","all","just","expecting","could","show","use","are","don't","don't","only","which","don't","don't","you'd","slightly","for","don't","don't","wanted","don't","present","doesn't","don't","don't","pass.","were","was","robust","while","don't","break.","with","for","changed","still","but","to","with","gives","and","again","and","you'll","pass.","try","only","have","force","care","expect"],"the tests,":["I","most","and","but","and","and","so","but","so","because","you","but"],"the tests.":["I","Sorry","I'm","I'll","The","But","You","The","So"],"the tests?":["There's","I'm","Looks"],"the text":["into","that","package"],"the text,":["needed"],"the then-case":["anyway."],"the theory":["behind"],"the thing":["to"],"the things":["relevant","you","that","I"],"the thoroughly":["unscientific"],"the thought":["on","of"],"the thread":["that","that"],"the three":["predicates","of","different"],"the thunk":["for","`(((…)","`((((1)","`1","`(((1","for","leaking.","leak"],"the thunks":["part","part","in","there?"],"the tiles.":["Since"],"the time":["tonight","becomes","to","GHC","(e.g.","personally.","I'd","to","to","to","to","to","to","to","for","(I","to","you","program"],"the time,":["e.g.","not"],"the time.":["Then","Not","I"],"the tiniest":["of"],"the tip":["😊",":)","about","on","about","on","with"],"the tip!":["Couldn't","Is"],"the tip,":["I"],"the tips":["..","on","@ressie!"],"the tips,":["looks","I"],"the toRNA":["function."],"the together":["this"],"the tokenization":["here."],"the tokenization),":["I"],"the top":["level","level","with","level,","level,","of","then","level","is","level","if","of","level","level","level","of","level","of","level","level","is","level","level","(`zTop`"],"the top,":["then"],"the top-level":["functions","scope","scope.","functions","bindings","function,","function","functions","scope","stuff","`wordCount`","`anagramsFor`.","bindings","binding"],"the top-level.":["Everything"],"the top.":["Basically","I","That"],"the topic":["I'd"],"the topic.":["It's"],"the tops,":["will"],"the total":["length"],"the trace":["on"],"the trade":["off"],"the tradeoff":["is"],"the trail":["back"],"the trailing":["newline","\\n"],"the transaction":["was"],"the transform":["instead"],"the transformation":["to","directly","along"],"the transformations":["(case","done","by"],"the transformed":["first"],"the transformer":["to"],"the translate":["function"],"the tree":["to"],"the trial":["divisions."],"the trick":["with","is","of"],"the trick,":["or"],"the trick.":["Nice","I"],"the trimNum":["into"],"the trouble":["to","of","of","of","of"],"the trouble\"":["I"],"the trouble.**":["Can"],"the true":["meaning"],"the tuple":["section","before","creation","sections:","and","expansion","for","in","is","is","are","and","boxing","constructor"],"the tuple,":["sorts"],"the tuples.":["Not"],"the two":["cases.","buttons?","passes","maps","cases","IO","operations","arrays.","into","different","uses","implementations.","versions","node","strings","on","weird","fields","lines.","backslashes","inputs","filters","supporting"],"the two-argument":["version"],"the type":["signature","signature","name","to","`String`","of","of","in","of","a","signature","into","signature","of","for","signature","you're","signatures","signature","Uniform","`Uniform`","signature","system","signature","system","system","is","checker.","of","signatures","suggested","declaration.)","inferencer","signature","signature","signatures...","annotation","it's","signatures","constructor","system","system","system","declarations","signature.","safety","separately,","signature","signatures!","-","signature.","system,","system,","signature","`String`","`String","system","signatures,","signature","conversion!","alias)","of","signature","of","signatures","you","of","signature!),","signature","signatures","signature","doesn't","of","signature","signature","of","signature","signature","constructors"],"the type,":["after"],"the type-inferencer":["to"],"the typeclass":["approach","Num."],"the types":["are","btw,","are","of","there.","and","of","are"],"the types.":["In"],"the ugly":["looking","regex"],"the ugly-looking":["\"nucleotideCounts"],"the uncommon":["case"],"the unconstrained":["exporting;"],"the underlying":["order","representation","concepts"],"the underscore":["can"],"the understanding":["of"],"the unfamiliar":["things"],"the unique":["words"],"the uniqueness":["of"],"the unit":["test","tests","tests","tests,","tests","tests","tests,"],"the unittests,":["but"],"the unlikely":["event"],"the unnecessary":["parentheses,","computation.","parentheses;","`Just","introduction","parentheses."],"the unused":["imports.","imports","imports"],"the unusual":["case;"],"the update":["from"],"the updated":["tests."],"the uppercase":["letters."],"the usage":["of","of","of","of","of","of","is","of","pattern.","of","of"],"the use":["of","of","of","of","of","of","of","of","of","of","case.","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"the useful":["combinators"],"the usefulness":["of"],"the user":["and","doesn't","know","might","asks"],"the usual":["convention.","convention.","deadlock","left-associative"],"the utility":["of","functions"],"the utmost":["importance"],"the valid":["cases","phone","results"],"the value":["is","is","and","is","out","inside","*out*","of","strictness","to","in","of","strictness","is","of","-","instead","is","of","in","strict","of.","of","to","of","is","in","is","1","being","is","such","of","being","in","of"],"the value,":["where","then"],"the value-laziness":["of"],"the value-lazy":["`insertWith`).","version","implementation.","variant.","version"],"the value.":["How"],"the values":["in","in","there","are","you","are","are","in","that","will","on","in","are","for","are","in","through.","in","lazily","(which","in","of","in","into","using"],"the values),":["```Data.Map```"],"the values.":["Here's","This"],"the values?":["Or"],"the variable":["`isLong`","`grade`","`possibleAnagrams`","names.","`word`","names","name","from","from"],"the variables,":["so"],"the variations":["on"],"the various":["lines","conditions","combinators","common"],"the verse":["function.","function."],"the verses":["without","after","and","go"],"the verses,":["but"],"the version":["from","in","I","from","in","using","without","with","that"],"the very":["least,","same","first","dark","specific","end."],"the wall":["and"],"the wall\")`.":["Not"],"the wall,":["no","\","],"the warning":["go","somehow."],"the warnings":["are"],"the warts":["'n'"],"the way":["to","to","I","to","you","we're","to","with","Haskell's","to","to","that","to","you","to","the","the","that","non-strict","`robotName`","`shouting`","that","to","imports","to","up","to","it","to","out.","to","round","I've","pickSchedule","you're","step","`unlines`","`reverse`","that","you","database","to","test","out.","that","to","to","you've","Haskell","to","to","you're"],"the way).":["Is"],"the way,":["checkout","I","I've","I've"],"the way?":["It's"],"the weak-head":["normal"],"the week":["of","given"],"the weekDays":["list"],"the weekday\"":["included"],"the weird":["style"],"the wheel":["for","with"],"the wheel,":["especially"],"the wheel.":["As"],"the wheel?":["It's"],"the where":["clause","clause?","clause.","clause","block.","clause","clause","clause","clause","clause","clause","clause","clause","clause?","clause","keyword,","a","keyword,","keyword,","clause","clause","functions","clause","clause.","block","clause","clause,","clause","bugs","clauses.","clause.","clause","and"],"the where,":["which"],"the whitespace":["between","on","doesn't","on"],"the whitespace.":["Take"],"the whole":["string","thing","thing","program","space.","string","expression","right","sequence","thing","nucleotide","range","string","function","thing","thing","concat","thing","module","`map","list,","empty/nonempty","thing","input","input","table?","thing","`responseFor`","thing","function","package","input","list","input","thing","list","list","list","list","list","equation","equation","thing","expression","string.","thing","module","rest"],"the widely":["using"],"the wiki":["that","article","article"],"the wiki,":["but"],"the wikipedia":["example.","description"],"the wildcard":["tile","pattern"],"the window":["in"],"the word":["scalene.","count","count","split","tokenization","into","`reverse`","`expression`,"],"the word-count":["example.","exercise).","exercise"],"the word-counts":["exercise"],"the word.":["The"],"the words":["into","are","in","then","after"],"the words,":["and","you","which"],"the words.":["Instead"],"the wordsBy":["suggested"],"the words…":["it"],"the work":["is","of","isn't","done","is","done","isn't","involved","needed","only","all","you've"],"the work,":["it"],"the world":["of"],"the worst":["part","case","case","case","case"],"the wrap-around.":["That"],"the wrapping":["and","and","and"],"the wrapping/unwrapping":["overhead"],"the wrong":["way","way","function","way","way","response","way","way","way","fold","one","function","questions","thing","file","choice","choice","choice.","choice","file","implementation","solution","way","way","way","fold","fold","fold","fold","choice","way","kind","thing","way","place?","way...","fold","track","order"],"the year":["was"],"the yml":["not"],"the zeros":["list"],"the zip":["to","filter"],"the zipWith":["solutions"],"the η-reduction":["(thanks"],"their (personal)":["interpretation"],"their RHS.":["Yet"],"their best":["advantage"],"their case.":["A"],"their contents":["is"],"their definitions.":["For"],"their details":["if"],"their difficulty":["in"],"their example":["it"],"their first":["exercise,"],"their functions":["to"],"their functions,":["but"],"their head":["at"],"their implementation":["(whether"],"their intention,":["particularly"],"their meaning":["is"],"their nucleotide":["string"],"their ordering":["and"],"their own":["`silent`","School","variables…","parameters,","right","definition","line)","lines"],"their particular":["data"],"their purpose":["obvious."],"their purpose,":["or"],"their respective":["data","nucleotides,"],"their role":["and"],"their scope":["and","and"],"their scope.":["Haskell's"],"their sub-functions":["as"],"their syntax":["uses"],"their type":["signatures"],"their types":["explicitly"],"their usage":["and"],"their use":["to","is"],"their values":["as-is,"],"their values...":[";)"],"them (because":["I"],"them (in":["a"],"them (it":["will,"],"them (put":["a"],"them (with":["appropriate"],"them ;)":["A"],"them I":["didn't","can"],"them Parser":["Combinators"],"them `hammingDistance":["="],"them `isSilence`":["and"],"them `x'`":["(pronounced"],"them actually":["work"],"them against":["defined"],"them all":["the","over","on","(out"],"them almost":["trivial."],"them and":["the","arrange","suffer","add","stole"],"them are":["unused"],"them around":["in"],"them as":["they","top-level","rules.","much"],"them as-is.":["If"],"them at":["first,","all"],"them back.":["That"],"them become":["empty,"],"them before":["by"],"them both.":["But"],"them build":["up"],"them but":["then"],"them defined":["somewhere"],"them descriptive":["names,"],"them even":["led"],"them explicitly":["passed"],"them for":["top-level","this","any","Teenth","anything"],"them from":["plain","the"],"them having":["them"],"them here,":["you"],"them here.":["You"],"them in":["the","list","the","originally,","your","there","GHCI...","other","a","for","a","that","`versePartOne","a","a","different","a","situations","because","memory","there"],"them inline":["would"],"them into":["the","a","separate"],"them is":["`\"cd\"`.","uppercase."],"them it":["will"],"them it's":["more"],"them just":["about"],"them listed":["(tile"],"them more":["Haskell-like","explicit,"],"them myself":["just"],"them on":["one","simple","a"],"them one":["by"],"them only":["when","when"],"them or":["not","make"],"them out":["as","even","anyway,"],"them outside":["then"],"them public":["as","too."],"them read":["very"],"them return":["the"],"them right":["to"],"them seem":["to"],"them separate":["types.","functions,"],"them separately:":["https://gist.github.com/etrepum/6406279#file-gistfile1-txt-L41-L58"],"them since":["it","they"],"them so":["I","often."],"them tests":["(isSilence)?"],"them to":["0.","the","`s`","people.","enums,","Haskell).","`M.fromList`.","my","the","`w',","the","be","one"],"them together":["you","(`++`"],"them type":["signatures."],"them up,":["a","a"],"them use":["`str`"],"them when":["you"],"them with":["a","`foldM`,"],"them without":["signatures","having"],"them would":["be"],"them yourself,":["the"],"them yourself.":["`elem`"],"them). Then,":["because"],"them). They":["help"],"them, I":["changed"],"them, but":["typical","it","this","I","IIRC"],"them, especially":["if"],"them, it":["unstuck"],"them, or":["just"],"them, shouldn't":["be"],"them, since":["it"],"them, sorry":["for"],"them, using":["`Data.Map.Strict`"],"them, you":["can"],"them. A":["good"],"them. As":["soon"],"them. But":["I"],"them. I":["could"],"them. I'm":["currently"],"them. On":["(much)"],"them. Otherwise":["looks"],"them. Seems":["like"],"them. So":["why"],"them. That":["way"],"them. The":["other","meat"],"them? Here's":["a"],"them? Or":["is"],"themselves weren't":["guarded."],"themselves. So":["this"],"then '":["'"],"then 'U'":["else","else","else","else","else","else","else","else"],"then 'U':acc":["else"],"then (so":["you"],"then ..":["to]`)","to]`."],"then 0":["else","else","else"],"then 1":["else","else","else","else","else","else"],"then 7":["-"],"then GHC":["can"],"then I":["get","went","exposed","started","looked","had","forgot","assume","would","would","will","usually","can't","can","need"],"then I've":["managed","also"],"then Just":["s","x"],"then Nothing":["else"],"then True":["else","else"],"then _fromListWith_,":["but:"],"then `((1)":["+"],"then `break`":["seems"],"then `flip`":["is"],"then `foldl'`":["is"],"then `head.toReversedList`":["makes"],"then `liftA`":["maps"],"then `map":["toLower`"],"then `map`":["`(map"],"then `rem":["n"],"then a":["few","default","slightly"],"then acting":["on"],"then add":["corresponding"],"then addWord":["has"],"then adding":["$","words"],"then after":["complicated","that"],"then again":["it","I","it"],"then again,":["what","this"],"then all":["those","the","M."],"then also":["selectively"],"then another":["map,","common"],"then any":["pointers"],"then applied":["filters"],"then appying":["it."],"then be":["a","joined"],"then become":["nested"],"then by":["column,"],"then c":["else"],"then call":["fromListWith"],"then caller":["can"],"then calling":["`fromList`."],"then can":["check"],"then changed":["it"],"then check":["for"],"then cleanUpInput":["will"],"then combine":["them"],"then compare":["solutions.","it."],"then creates":["a"],"then creating":["a"],"then d":["else"],"then decided":["it"],"then decomposes":["it"],"then defining":["them"],"then do":["the","the"],"then doesn't":["that"],"then doing":["anything"],"then drill":["down"],"then either":["adding"],"then else":["in","statements"],"then else,":["also"],"then else`":["in"],"then eta-reduce":["into"],"then extracting":["substrings,"],"then extraction":["result"],"then filtered":["to"],"then finally":["performs","at"],"then find":["element"],"then for":["any"],"then forgot":["to"],"then found":["Prelude's"],"then gather":["values,","values,"],"then group":["all","is"],"then grouping":["may","is"],"then have":["another","to","the","to"],"then how":["concurrent"],"then if":["the"],"then if-then-else,":["and"],"then illumination.\"`),":["when"],"then immediately":["put"],"then in":["this","case"],"then indetation":["will"],"then it":["may","makes","would","will","would","will","would","means","would","almost","would","would","will","is","moves","immediately"],"then it's":["converted","exactly","divisible"],"then iteratively":["build"],"then its":["possible"],"then jump":["in"],"then just":["make","have","count","using"],"then kind":["of"],"then lift(?)":["it"],"then list":["will"],"then look":["at","at"],"then looked":["it"],"then lookup":["over"],"then manually":["constructed"],"then map":["over"],"then match":["everything"],"then maybe":["you"],"then move":["the"],"then need":["to"],"then negating":["that."],"then no":["imports"],"then not'ing":["it."],"then on":["every"],"then only":["x'","toRNA"],"then open":["it"],"then outer":["filter"],"then pattern":["match"],"then pending":["transaction"],"then piling":["up"],"then put":["it,","the"],"then putting":["DrunkTalk"],"then recurses":["on"],"then recursive":["function"],"then remove":["it"],"then rethrow":["a"],"then return":["Nothing"],"then return.":["I'm"],"then run":["it,"],"then s":["else"],"then scan":["the"],"then seeing":["whether","if"],"then show":["n"],"then sing":["becomes"],"then some":["of"],"then start":["making"],"then stops":["```"],"then submitted":["my"],"then sums":["via"],"then switched":["to"],"then take":["required"],"then the":["`==`","arguments","Char","whole","standard","map","roman","sig","only","replace","result","lambda","recursion","map.","result"],"then there":["doesn't","*would*","probably","will"],"then there's":["really"],"then this":["would","issue","would","way"],"then to":["build"],"then top-right":["and","and"],"then tried":["to"],"then tries":["ot"],"then try":["to"],"then two":["functions"],"then update":["its","it"],"then use":["`(+)`","`isAllergicTo`","`\",","this","the"],"then using":["map.","those","a","'words',","```nub```"],"then when":["you","you"],"then why":["we"],"then worry":["about"],"then write":["less"],"then writing":["the"],"then you":["can","could","need","can","wouldn't","have","have","wouldn't","can","wouldn't","wouldn't","can","can","can","can","don't","know","will","get","get","should","are","may","may","just","could","need","can","should","may","can","may","don't","will","take","would","need","can","don't","can","can","know","can","refactor","can","value,","can"],"then you'd":["use","move","just","just"],"then you'll":["be","see:"],"then your":["code","approach","code"],"then, I":["used","just"],"then, having":["functions"],"then, only":["into"],"then, or":["you"],"then, so":["that"],"then. For":["now"],"then. Good":["catch"],"then? Or":["can"],"theoretical universe":["in"],"theoretically if":["size"],"theory behind":["diff-lists,"],"theory to":["reject"],"theory you":["might"],"ther e":["a"],"therapy which":["sometimes"],"there (but":["that's"],"there (lines":["4"],"there *would*":["be"],"there a":["nice","way","way","better","way,","way","benefit","naming","way","better","way","strategy","more","more","way","way","pointfree","reason","better","different","particular","reason","reason","way","reason","way","better","common","better","nice","more","preferable","better","way","possibility/good","way","better","way","better","better","conflict","function","better"],"there accidentally.":["For"],"there an":["easy"],"there and":["often"],"there any":["shortcut","reason","way","drawbacks","particular","way","particular","direction","reason","reason","difference","other","way","good","stylistic"],"there anything":["better","better"],"there anywhere":["I"],"there appears":["to"],"there are":["many","often","less","no","any","leftovers","never","library","only","a","a","some","certainly","more","more","a","a","a","some","still","no","functions","neater","a","some","so","ordering","ordering","ordering","rules","no","plenty","a","also","subtle","always","any","nicer","zero","RULES","more","some","a","only","in","some","any","tools","higher","any","probably","a","no","some","some","a","no","blank","a","no","better","a","some","other","occasions","a","some","more","more","alternative","only","further","some","two","subtle","better","helpful","wildcard","other","much","still"],"there are,":["or"],"there aren't":["SnocList"],"there as":["well."],"there be":["some"],"there because":["the"],"there but":["I'm","decided"],"there could":["be","be"],"there didn't":["seem"],"there doesn't":["seem","seem"],"there don't":["do"],"there either,":["`fromIntegral`"],"there exists":["some"],"there from":["here"],"there has":["a","to","to"],"there have":["been"],"there in":["details"],"there is":["basically","also","no","a","a","no","another","absolutely","using","a","a","a","any","also","at","global","no","a","to","the","only","no","a","just","also","a","no","Alpha,","at","incorrect","a","just","no","a","a","no","whitespace","a","no","on","no","no","a","a","much","a","more","no","no","no","no","no","a","some","an","to","something","a","something","no","anything","more","dead","no","no","no","no","one","a","much","mostly","only","no","existing","running","no","much","no","one","a","no","nothing","a","still","a","`tails`","no","a","a","no","at","no","almost","a","no","no","not","a","no","a","no","a","64*2","no","a"],"there is,":["it"],"there isn't":["a","much","really","a","really","a","an","a"],"there makes":["sure"],"there may":["be"],"there might":["be","be","be"],"there much":["disadvantage)."],"there must":["be","not","be","be","be","be"],"there now":["are"],"there on":["my","my","#2"],"there other":["people?"],"there probably":["isn't,","isn't"],"there really":["no","isn't"],"there seems":["to","to"],"there should":["be","be","be","be","be","be","be","be","only"],"there since":["it's"],"there so":["any","that"],"there some":["community","way","defacto","kind"],"there something":["even"],"there still":["a"],"there such":["a"],"there than":["I"],"there that":["you","could","does"],"there to":["let"],"there tradeoffs":["involved"],"there type":["errors?"],"there usually":["a"],"there was":["a","already","a","a","particular","a","a","some","just","more","a","whitespace","a","a","a","a","no","an"],"there were":["more","a","so","a"],"there when":["you"],"there will":["be","be","be","be"],"there with":["the"],"there would":["be","be","be","be","be","be","it","maintain"],"there wouldn't":["be","be"],"there! Maybe":["when"],"there'd be":["a"],"there's Data.List.Split's":["`splitPlaces`."],"there's Text.Printf":["which"],"there's a":["small","great","need","briefer","way","way","better","library","commonly","function","much","little","reason","better","middle","middle","more","practical","way","lot","better","couple","TupleSections","better","reasonable","useful","more","wordsBy","list","way","mismatch.","bit","function","Functor","better","pointfree","simple","way","terser","list","good","better","better","closed-form","much","way","more","way","comment.","function","Functor","big","two","much","closed","better","more","single","compiler","where","little","warning:","conciser","closed","cleaner","better"],"there's absolutely":["nothing","nothing"],"there's actually":["a","a"],"there's also":["`fromListWith`","syntax"],"there's always":["something","one"],"there's an":["'x',","appropriate","esoteric"],"there's another":["constructor","way,"],"there's any":["need"],"there's are":["intermediate,"],"there's at":["least","least"],"there's basically":["no"],"there's generally":["a"],"there's just":["a"],"there's maybe":["one"],"there's more":["than","to","than"],"there's much":["in"],"there's never":["uracil","a"],"there's no":["need","confusion","need","way","real","advantage","reason","version","concept","possibility","use","way","integer","test","need","need","need","space","disadvantage","reason","real","way","more","reason","way","need","way","risk"],"there's not":["a","a","too","much","a","a","a","a","much","much"],"there's nothing":["wrong","wrong","wrong","really","wrong","that","wrong","wrong","wrong","preventing"],"there's one":["or"],"there's only":["one","one","one","one"],"there's probably":["a","not","not","even","a"],"there's really":["no","no"],"there's some":["possible","small","quick","consolidation","free","nasty","package","maths","overridding"],"there's something":["I'm","I","to"],"there's two":["other"],"there's your":["problem\"."],"there) then":["you"],"there). So":["you"],"there, I":["can't"],"there, and":["```filter```","it's"],"there, as":["I"],"there, but":["I","not"],"there, is":["it"],"there, it":["may"],"there, most":["Haskell"],"there, so":["no"],"there, way":["simpler."],"there, you":["only"],"there. (and":["actually"],"there. All":["of"],"there. I":["had"],"there. If":["this"],"there. It":["didn't"],"there. It's":["suggesting"],"there. Lastly,":["guards"],"there. Nice":["approach!"],"there. See":["this"],"there. So":["you"],"there. Thanks":["for"],"there. These":["modules"],"there. You":["might","don't","would"],"there; part":["of"],"there; you":["only"],"there? I":["don't"],"there? In":["other"],"there? Put":["that"],"therefore I":["avoided"],"therefore a":["limit"],"therefore technically":["unsafe,"],"these \"functions\"":["to"],"these \"submitted-in-errors\".":["The"],"these (far":["more"],"these [scoring":["rules]"],"these anagrams:":["\"hamlet\""],"these are":["all","not","just","mostly","too","acceptable"],"these because":["I"],"these case":["there"],"these cases,":["for"],"these cases.":["What"],"these character":["classes"],"these clauses":["since"],"these common":["to"],"these concepts":["are"],"these conditions":["separately,"],"these constant":["factors"],"these constraints":["can"],"these days,":["unless","and"],"these definitions":["isn't"],"these do":["statements"],"these edge":["cases,"],"these equations":["in"],"these exercises":["(binary","so","originated","(I"],"these exercises,":["I"],"these exercises.":["I"],"these extra":["importable","functions?"],"these functions":["are","are","(by","should","from","should"],"these functions,":["it","since"],"these helpers":["are"],"these higher-level":["constructs,"],"these implementations":["less","require"],"these implementations,":["although"],"these in":["point-free"],"these inserts":["you","would"],"these into":["the"],"these is":["a"],"these issues":["are","better."],"these kinds":["of","of"],"these methods":["as","to"],"these minor":["style"],"these numbers":["are"],"these observations":["with"],"these occur":["in"],"these on":["the","my"],"these operations":["in","and"],"these operators,":["since"],"these optimizations":["with"],"these parentheses.":["Other"],"these point-free.":["`(.:)`'s"],"these predicates":["(except"],"these prime":["exercises"],"these problems":["with"],"these reviews.":["(I"],"these sequences":["so"],"these slides":["which"],"these sorts":["of","of"],"these take":["linear"],"these tasks?":[";)"],"these things.":["http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Char.html"],"these thunks":["takes","don't"],"these together,":["although"],"these two":["are","rules","rules","functions,"],"these types":["(they"],"these values":["exactly"],"these variables":["it"],"these versions":["of"],"these without":["just"],"these. Nearly":["every"],"they align":["more"],"they all":["obey","looked"],"they already":["exist"],"they appear":["to"],"they are":["very","the","not","mostly","the","from","short.","anagrams","needed,","supposed","often","not","isomorphic","not","only","top-level,","used.","not","inappropriate","evaluated","in","the","in","particular","actually","not","necessary).","exist","evaluated","equivalent,","interleaved","top-level","evaluated","needed.","not","supposed","not","mutex-like","fused,","one-character"],"they aren't":["anagrams.","much","highlighted"],"they arise.":["I"],"they be":["ordered"],"they both":["produce"],"they came":["from."],"they can":["make","be","go"],"they can't":["crash"],"they compile":["down"],"they could":["be","have"],"they diverged":["later)."],"they do":["while"],"they don't":["fulfil","with","count","seem","need","stack","mean","describe"],"they either":["ignore"],"they exists":["they"],"they expect":["an"],"they got":["compiled"],"they have":["good","the","two","more","no","Python","already","equal"],"they look":["like"],"they make":["the","this"],"they may":["be","be"],"they mean":["the"],"they might":["get","fit"],"they moved":["the"],"they must":["be"],"they only":["serve"],"they pass":["you"],"they pattern":["match"],"they probably":["know"],"they rarely":["creep"],"they read":["like"],"they really":["meant"],"they requiring":["building"],"they seem":["very","subtly"],"they should":["be","either","do","be","produce","have","be."],"they shouldn't":["really"],"they sometimes":["help..."],"they stand":["for"],"they take":["the"],"they tell":["intention"],"they think":["about"],"they use":["last,","same"],"they want":["to."],"they were":["syntactic","already","thinking","really","palindromes.","all","algorithmically","a","asking","very"],"they will":["have","only","wait"],"they won't":["typically","be"],"they work":["since","for"],"they work,":["so"],"they would":["be","cause"],"they'd be":["shorter"],"they're all":["uppercase,","quite"],"they're bigger,":["you"],"they're both":["correct."],"they're defined":["is","specifically"],"they're equivalent":["in","here."],"they're fun":[":D"],"they're functionally":["equivalent."],"they're going":["to"],"they're imported":["by"],"they're interesting.":["I"],"they're just":["intermediate"],"they're localized":["to"],"they're lucky,":["documentation)"],"they're more":["familiar","future-proof,"],"they're not":["used","usually","used","that","really","necessary"],"they're not!)":["then"],"they're not.":["Feels"],"they're part":["of?"],"they're predicates":["or"],"they're probably":["best"],"they're quite":["minor."],"they're really":["both"],"they're so":["short"],"they're suboptimal":["for"],"they're terrible":["or"],"they're the":["only"],"they're under":["`where`"],"they're very":["specific"],"thing (`String`":["is"],"thing (this":["code"],"thing (unless":["you"],"thing @erik":["tends"],"thing I":["would","personally","would","would","don't","noticed","don't","could","find","like","thought","managed","haven't","can","learned","can","did"],"thing I'd":["note"],"thing I'm":["trying."],"thing I've":["noticed"],"thing about":["Haskell,"],"thing as":["your","not","'\\x","`head","`all`,","`not","currying.","`insertWith","a","you:","just","Arrays,","this","just","doing"],"thing back":["into","into"],"thing becomes":["extremely"],"thing behind":["the"],"thing bugging":["me"],"thing but":["nothing","in"],"thing comes":["up"],"thing could":["be"],"thing exists),":["how"],"thing for":["non-ASCII","you","Monad.","the","bonus"],"thing from":["a"],"thing here":["that","that","in","is"],"thing in":["my","one","here,","point","that","point-free","my","point-free","the","this","less","the","previous","learning","general."],"thing is":["going","that","to","that","a","kind","to","that","that","a"],"thing is,":["very","these"],"thing jumps":["out:"],"thing laziness":["can"],"thing left":["really","to"],"thing missing":["here","here","here"],"thing now),":["and"],"thing of":["`((…)","this"],"thing on":["line"],"thing out":["(with"],"thing regardless":["of"],"thing seems":["a"],"thing so":["the"],"thing that":["can","i","function","could","is","might","I","you"],"thing there.":["It"],"thing though,":["so"],"thing to":["do","make","think","do","do","consider","do.","consider","consider","consider","do","experiment","note","consider","generate","note","use","improve","note","do","do","note"],"thing together,":["we"],"thing totally":["down,"],"thing were":["added."],"thing with":["isLower,","a","isAlpha"],"thing without":["making","Arrow"],"thing worth":["mentioning","mentioning"],"thing would":["be"],"thing wouldn't":["be"],"thing you":["could've","could","can","can","can","can","can","can","could","can","could","could","can","could","could","could"],"thing your":["function"],"thing yourself":["with"],"thing) might":["be"],"thing, I":["suppose"],"thing, I'm":["using"],"thing, and":["there","in"],"thing, but":["I","String","I","I","it's","would","before"],"thing, consider":["using"],"thing, it's":["defined"],"thing, not":["what"],"thing, redundant":["brackets,"],"thing, since":["`String`"],"thing, there's":["absolutely","not","absolutely"],"thing, you":["can"],"thing. I":["agree"],"thing. I'm":["not"],"thing. If":["you're"],"thing. Is":["it"],"thing. It's":["doing"],"thing. Looks":["good","good"],"thing. See":["(http://lambda.haskell.org/platform/doc/current/ghc-doc/libraries/base-4.6.0.1/src/GHC-Base.html#map)."],"thing. This":["tends"],"thing. `foo":["\u003c$\u003e"],"thing.. or":["am"],"thing: you'll":["probably"],"things (except":["for"],"things -":["I"],"things I":["tried","hoped","was","have","tried"],"things a":["bit","bit."],"things about":["this"],"things are":["related.","anagrams","coming","cleaned","very","naturally"],"things around":["so","anywhere."],"things as":["distinct"],"things at":["once."],"things automatically":[":)"],"things better":["than"],"things blow":["up"],"things both":["easier"],"things by":["using"],"things clearer,":["it"],"things done":["outside"],"things down":["to"],"things easier":["for"],"things easy":["to"],"things easy,":["for"],"things from":["`Data.Map`"],"things hard":["to"],"things here":["that"],"things in":["there","Haskell","the","a","the"],"things into":["`where`","tuples,"],"things isolated":["and"],"things left":["to"],"things like":["numbers","`show","that","combine","`strip`","this","`not","weak","this.","```\"inventory:","parenthesis/brakets"],"things like,":["\"always"],"things looks":["fine"],"things more":["easily"],"things much":["simpler."],"things much.":["Maybe"],"things nicer":["as"],"things on":["the","the"],"things relevant":["to"],"things stand":["out"],"things surrounding":["Haskell,"],"things that":["you","aren't","are","we","(I","way","didn't"],"things the":["Haskell","functional","wrong"],"things this":["way,","way?"],"things to":["consider.","consider","recommend","consider","consider","note"],"things unless":["you"],"things unsaid":["so"],"things up":["a","a","a","a","just"],"things up.":["I","Death"],"things visible":["in"],"things were":["getting","do"],"things when":["splitting"],"things with":["parentheses"],"things without":["advicing"],"things work":["under","and"],"things work.":["GHC"],"things working":["and"],"things you":["could","can","can","can","can","would","(I)"],"things) if":["you"],"things), the":["other"],"things, and":["g^0==1","then"],"things, but":["in"],"things, maybe":["I"],"things, so":["I"],"things. (Likewise":["with"],"things. But":["this"],"things. It's":["simpler"],"things. The":["next"],"things? You":["can"],"think \"I":["know,"],"think \"but":["maybe"],"think (when":["n"],"think @jaiden":["said"],"think @mack":["is"],"think Direction":["is"],"think I":["was","can","would","like","called","was","just","should","found","should","like","misspelled","understand","agree","got","avoid","learned","finally","really","might","would've","like","might","need","understand","like","see","needed","can","like","\"fixed\"","quite","can.","cleaned","get","also","could","was","see","know","got","have","prefer","understand","would","get","agree","need","should","don't","need","have","will","have","have","can"],"think I'll":["change","keep","give","go","keep","leave","need","leave"],"think I'm":["gonna","misunderstanding","going","going","getting"],"think I've":["addressed","managed","used"],"think `FlexibleInstances`":["was"],"think `Int`":["is"],"think `[(nucleotide,1)":["|"],"think ```219```":["is"],"think ```dispatch```":["could"],"think ```filterString```":["can"],"think ```sort":["."],"think ```zs```":["might"],"think `create`":["should"],"think `echo`":["does"],"think `foldl`":["is"],"think `go":["3"],"think `grade`":["would"],"think `hash`":["is"],"think `incrementBalance`":["should"],"think `isCapitalIfLetter`":["would"],"think `isDelimiter`":["would"],"think `isDiag`":["might"],"think `isEmpty`":["could"],"think `length":["source"],"think `map":["toUpper`"],"think `mkRobot`":["with"],"think `null":["message"],"think `number":["\"\"`"],"think `orElse`":["is"],"think `prettyPrint`":["would"],"think `responseFor":["\"1234\"`"],"think `yelling`":["should"],"think a":["compiler","comment","good","where","little","bit","map","case","better"],"think about":["it.","it,","how","the","```last```","that","performance,","how","lazy","reorganizing","it,","the","too.","using","the","how","this.","it,","each","all","how","when","using","that","it,","how","how","how","that!","the","how","frequency","strictness,","how","them.","-","a","that.","that","each","`i`","this","it","what","it"],"think adding":["one"],"think all":["of","of"],"think anyone":["was"],"think asymptotic":["complexity"],"think backpermute":["will"],"think because":["you're"],"think being":["able"],"think best":["practice"],"think better?)":["solution"],"think both":["are","are"],"think but":["`bifunctors`"],"think coding":["style"],"think conventionally":["`MakeSchool`"],"think deeply":["about"],"think explicitly":["doing"],"think feels":["right."],"think for":["only","now","a","this","Data.Char"],"think good":["about"],"think grouping":["up"],"think guard":["really"],"think having":["them"],"think hlint":["suggests"],"think i":["already"],"think i'd":["rather"],"think if":["you","you","the","I"],"think in":["this","simple","some","those","a","terms","terms"],"think infix":["`mod`"],"think is":["bad.","what","better,","true","good."],"think it":["works","might","works","makes","looks","would","is","is","makes","wasn't...","wasn't...","would","would","will","may","will","becomes","would","would","makes","is","is","added","would","justifies","reads","would","ought","passes","is,","would","will","would","can","would","has","is","would","would","actually","can","would"],"think it'd":["read","make","be"],"think it's":["a","nicer","worth","more","necessary","better","way","necessary","good","cute.","terribly","necessary.","rather","necessary","more","not","quite","that","something","obvious.","elucidating","a","ok","better","possible","rather","more","not","great","considered","conceptually","useful...","starting","a","fairly","a","unreasonable","better","fine","more","easier","quite","interesting","best","possible","more","fine","safe","the","fine"],"think iteration":["2","2"],"think just":["one"],"think laziness":["doesn't"],"think lenses":["are"],"think line":["6"],"think lines":["3-6"],"think makes":["more"],"think most":["people","people"],"think not":["using"],"think of":["a","a","a","a","a","a","a","a","a","a","anything","a","a","a","a","a","it...","a","a","a","a","isSuffixOf","a","a","a","a","one.","a","using","a","a","a","a","another","using",":)","using","a","that.","how","a","a","anything","an","right","a","a","that,","a","a","a","to","a","a","is","a","a","it?","a","a","a","a","a","a","how","`all`","it","a","a","a","a","any","a","a","a","a","a","each","rewriting","incorrect","a","how","a","a","a","a","a","a","another","a","a","a","something"],"think pattern":["matching","matching"],"think pattern-matching":["makes"],"think performance":["is"],"think point":["free","free"],"think putting":["the"],"think so.":["When"],"think some":["predicates"],"think something":["went"],"think sometimes":["DRY"],"think such":["a"],"think that":["the","takes","`all","gives","previous","a","Data.List.Utils","should","using","just","the","you","moving","using","`$!`","this","there's","is","I","maybe","`Map.Map`","sometimes","normally","was","in","you","tests","in","solution","using","in","this","the","regex","TVar","types","`IntMap`","approach","in","I","GHC"],"think that's":["about","just","let","relevant","only","the","worthwhile"],"think the":["latest","intention","`MessageType`,","problem","double","function","whole","guard","best","qualified","comments","whitespace","count","reverse","interface","exercise","`Data.List","datatype","destructor","`resetName`","performance","only","mix","tests","`do","number","only","type","best","point","extra","original","\u003c0","`::Integer`","tail","following","reasons","argument","linear","idea","`return","constructor","type","names","test","README","only","mapLetter","problem","tests","expected","zipWith"],"think there":["should","is","should","is","should","must","are","might","anything","is"],"think there's":["a","a","generally","a","any","a","a"],"think these":["is"],"think they":["should","are"],"think they're":["terrible","interesting.","both"],"think this":["style","is","is","is","looks","is","could","is","one","is","function","is","is","was","is","will","is","would","is","is","is","looks","solution","is","is","version","is","is","is","is","might","solution","point-free","is","submission","would","ends","can","code","might","version","is","fixes"],"think those":["are"],"think to":["use","look"],"think too":["hard"],"think translating":["individual"],"think using":["Data.Text","`isSuffixOf`","a","`sort`","guards"],"think we're":["going"],"think were":["not"],"think what":["@ransom","characters"],"think words":["is"],"think would":["convey","be"],"think wrapping":["your"],"think you":["can","can","might","should","gain","could","can","could","should","can","don't","submitted","submitted","should","have","need","can","can","should","can","need","overcomplicated","should","could","can","are","can","can","could","already"],"think you'd":["be","want","have"],"think you'll":["find","find","find","also","find","find","find"],"think you're":["right","using","still","looking","fine"],"think you've":["nailed"],"think your":["point","re-mplementation","code"],"think!) Was":["it"],"think) clicked":["the"],"think) computed":["the"],"think) to":["`responseFor"],"think). Hope":["this"],"think, I":["haven't"],"think, and":["thanks"],"think, but":["here"],"think, is":["to","to"],"think, that":["my"],"think, this":["way"],"think. Is":["there"],"think. It":["validates","just"],"think. Plus":["it"],"think. You":["can"],"thinking I":["missed"],"thinking about":["introducing","how","the","it","isAggressive","responseFor","writing","efficiency","optimization,","doing","changing","this","that","how","characters","another"],"thinking at":["another"],"thinking earlier.":["Let"],"thinking here.":["I"],"thinking how":["best","to"],"thinking in":["folds."],"thinking it":["would"],"thinking more":["along"],"thinking of":["using","a","how","using"],"thinking outloud.":["Another"],"thinking take":["1"],"thinking that":["the"],"thinking there.":["(and"],"thinking to":["just","hide"],"thinking too":["much"],"thinking when":["I"],"thinking with":["the","`any`","making"],"thinking. Now":["I"],"thinking.. no":["time"],"thinking? I":["feel"],"thinks as":["it's"],"thinks, use":["`Data.Map.Strict`"],"third guard":["up"],"third in":["the"],"third of":["the"],"third value":["from"],"this \"float":["out\""],"this \"record":["syntax\""],"this \"thread-safe\"":["you"],"this (+1)":["without"],"this (e.g.":["`maybe`,"],"this (even":["though"],"this (foldr":["in"],"this (http://stackoverflow.com/questions/3728709/haskell-pattern-matching-how-to-use-constants-variable)":["but"],"this (maybe)":["made"],"this (my":["original"],"this (non-tail-recursive)":["recursion"],"this (note":["the"],"this (nothing":["wrong"],"this (shorter)":["version."],"this (sorry":["can't"],"this (there":["are"],"this (underspecified)":["problem"],"this (which":["fixes"],"this -":["is"],"this :)":["https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/robot-name/example.hs"],"this \u003cpre\u003edata":["Matrix"],"this \u003cpre\u003eunfoldr":["(\\x"],"this ?":["There"],"this API,":["there's"],"this I":["did","suspect","better","am"],"this I'm":["fairly"],"this MVar":["stuff"],"this Map":["without","without"],"this Metadata":["collector"],"this OK,":["or"],"this `(((…)":["+"],"this `Monad`":["instance:"],"this `Robot":["{"],"this `map":["(,1)`"],"this `pointfree`":["/"],"this `unSchool`":["rather"],"this `union`":["function"],"this a":["bit","lot","bit","bit","little","lot","little","tad","bit","tiny","larger","little","clean","little","bit","relic","bit","lot","bit","whole","bit","bit","bit","lot","[Difference","little","bit","lot","lot","little"],"this actually":["work?"],"this advantage":[":-/."],"this against":["my"],"this algorithm":["with","to","and","with"],"this algorithm,":["it's"],"this all":["looks","into","looks","says"],"this already,":["but"],"this also":["require","helps"],"this alternate":["but"],"this and":["evaluate","make"],"this answer":["from"],"this api":["is"],"this application":["on"],"this approach":["for","might","might","better.","though!","and","will","have","is"],"this approach,":["maybe","you","as"],"this approach?":["Feel"],"this arguably":["gives"],"this arithmetic":["a"],"this article":["[foldr,"],"this as":["\"Looks","I","a","an","you","the","`anagramsFor","\"Treat","a","a","a","short","is;","well?","a"],"this as-is":["since"],"this assumes":["invalid"],"this at":["all.","all","the"],"this bastard":["on"],"this be":["lazy","considered","simplified"],"this be,":["I"],"this because":["there"],"this becomes":["a"],"this before":["and"],"this before,":["but"],"this behavior":["is"],"this behaviour":["(like"],"this behind":["the"],"this better":["than","than","with"],"this big":["Text,"],"this bitwise":["I'm"],"this breaks":["out"],"this but":["I","ended","then","it's","it's"],"this by":["just","zipping","enabling","adding","mistake.","accident?","hand.","floating"],"this can":["be","be","overflow","be","be","be","help","be"],"this can't":["be"],"this case":["is","it's","with","the","it","it","I","because","it","there",":)","as","does","in","they're","it","you'd","I","it","I","here,","the","there","the","it","it","the","`map","you","is","extremely","as","prefix","because","you","that","(a","just",":-)","the","you're","when","though","because","you'd","is","is","you","where","I","but","you","the","so","the","it","since","if","under","you","I","expression.","though","it","the","since","it","and","several","I","I","`count`","with","there's","i"],"this case)":["should","so"],"this case),":["it's","but","if"],"this case).":["Same","Otherwise,"],"this case,":["`read`","via","so","I","explicit","it'd","or","I","just","`-1`),","it","encoding","`foldl'`.","the","however,","`square","`toRNA","`toRNA","it","it","maybe","it","but","and","but","but","but","I","the","I","try","since","it's","if","but","you","but","just","sorting","with","the","making","you","but","then","the","you","it"],"this case.":["I've","I","The","I","The","That","The","If"],"this challenge":["is"],"this chapter":["from","of","of","of","of"],"this chapter:":["http://learnyouahaskell.com/for-a-few-monads-more"],"this character":["as"],"this circumstance.":["Everything"],"this cleaner":["(particularly","as-is:","but"],"this code":["actually","but","fails","by","couldn't","more","I","is","sorely","looks","related","then","has","is","shorter.","wouldn't","Base","you","shorter.","actually","will","and","in","by","because","seem","has","a","should","is","with","can","is","shorter.","some"],"this code,":["`map","it","easily","since","one","it","but"],"this code.":["It","Did","I","I","Perhaps"],"this code;":["is"],"this come":["a"],"this comment":["in"],"this completely":["pointfree"],"this concept":["which"],"this concrete":["example"],"this considerations,":["the"],"this context.":["Not"],"this context?":["It's"],"this correctly":["you"],"this could":["be","be","be","be","benefit","be","look","be","also"],"this count":["directly"],"this data":["type","is"],"this day....":["but"],"this definitely":["feels","works"],"this definition":["of"],"this despite":["me"],"this deterministically":["using"],"this difference":["is"],"this difference.":["This"],"this dilemma":["with"],"this direction":["seemed"],"this does":["work,"],"this doesn't":["do","make","work","seem","seem","really","work"],"this done":["the","for"],"this easier":["to"],"this easy":["with"],"this easy,":["or"],"this edge":["case."],"this effectively":["cures"],"this efficient":["but"],"this efficiently":["is"],"this efficiently.":["Consider"],"this enabling":["is"],"this ends":["up"],"this entirely,":["check"],"this evaluate":["the"],"this even":["simpler"],"this ever":["happens."],"this example":["since","supplying","I","seems","may","like","I'm"],"this example,":["I","and"],"this exercise":["to","are","directly","uses","is","worked,","is","you","could","is","without","though","was","is","says","in","hurt","(all","isn't","where","at","as","using","wrong","is","is","I","was","is","it's","here","submit","could","uses","there's","wouldn't","where","would","you","is","using","I"],"this exercise's":["code?"],"this exercise,":["and","you","but","although","`sort","so","if","your","I'd","but","where"],"this exercise.":[":)","isQuestion","Why","While","Thanks","You","I"],"this exercise:":["http://s.mlkshk.com/r/97VP"],"this exercises":["definition"],"this expression":["simpler?"],"this fails":["6"],"this far":["though"],"this feeling":["that"],"this file":["is","at"],"this file:":["https://github.com/exercism/exercism.io/blob/master/lib/exercism/curriculum/haskell.rb"],"this fixes":["a"],"this float":["out","out","out","out","out"],"this for":["you","you","you).","the","the","better"],"this forcing":["entire"],"this from":["a","scratch."],"this function":["is","would","`isPermutationOf`,","?","always","instead.","is","O(n^2)","is","that","it","application.","will","using","composition","is","runs","since","accumulate"],"this function,":["and"],"this function.":["Also,","`unwords`"],"this functionality":["and"],"this game":["there"],"this gets":["the","extracted"],"this go":["around"],"this got":["longer,"],"this grade":["already"],"this guard":["``|"],"this had":["to"],"this has":["to"],"this has,":["imho,"],"this helper":["on"],"this helps":["you"],"this hint":["was"],"this hold":["you"],"this hour-long":["[video"],"this idea":["instead"],"this idea,":["but"],"this if":["you"],"this implementation":["has","aside,","is","some","does","of","simpler:","quite","will","is","simple","is"],"this implementation,":["or","an"],"this implementation.":["The","The","If"],"this implicitly)":["to"],"this implies":["that"],"this in":["one","a","a","constant","approximately","a","a","the","general","much","ghci,","my","ghci,","O(1)","this","constant","GHCi","practice?","about","a","a","much","a","GHCI?"],"this information":["would"],"this information?":["I"],"this input!":["I"],"this instance?":["I"],"this instead":["of"],"this internally":["(with"],"this into":["pointfree","account"],"this introduces":["some"],"this involved":["some"],"this involves":["`fromListWith`"],"this is":["great,","quite","good","boring","good","okay.","good.","fine","good.","simple","probably","a","cleaner.","good","a","a","nice","great,","because","because","otherwise","fairly","fine","good,","over-engineered,","my","good.","more","fine.","good.","good.","the","probably","a","probably","of","worth","easier","an","different","a","more","a","a","purely","cosmetic.","a","really","probably","a","a","readable.","acceptable","a","essentially","indeed","much","an","done.","simple,","Haskell's","a","quite","to","very","functionally","so","to","not","nice,","definitely","more","to","lighter","the","relative","fine?","what","a","canonical","very","one","basically","as","the","another","a","a","slightly","at","still","the","to","that","uncharted","to","for","a","just","actually","about","that","a","structured","a","refactored","also","good","really","more","the","crazy.","a","great,","the","that","the","a","a","to","incredibly","to","great.","that","as","one","quite","the","great,","starting","a","neat","the","the","a","helpful,","more","now","more","much,","the","to","that","to","on","that","a","really","a","a","to","a","as","one","an","so","just","a","partial","great,","a","`foldl'`","used","awfully","good","no","supposed","the","great","also","what","faster","a","special","the","a","great!","often","the","also","a","that","the","the","great.","that","not","still","probably","slower?","not","not","happening","nicer","exactly","lazy","what","O(n)","what","to","ugly","the","the","what","the","not","not","small","better","a","that","to"],"this is,":["as","look","other"],"this isn't":["one","adding","covered","a","recognized"],"this issue":["goes","when"],"this issue,":["same"],"this issue.":["That","For"],"this it":["would"],"this iteration":["that","I've","2","could"],"this iteration,":["I'm","I"],"this iteration?":["The"],"this iteratively":["in","in","in","in","in"],"this iteratively?":["There's"],"this just":["follows"],"this kind":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of"],"this last":["time:"],"this lazy":["version"],"this lazy-evaluation":["thing"],"this learned":["this"],"this less":["of"],"this library.":["I"],"this line":["is"],"this line.":["`last`"],"this list":["to","again.","will"],"this list,":["then","see"],"this little":["exercise."],"this logic":["the"],"this looked":["like"],"this looks":["quite","pretty","good,","good.","good","good","good.","pretty","fine.","good","good.","great","very","great.","great.","good","good","good","better","great","good.","good.","great.","pretty","good.","pretty","good.","great.","good.","good.","good.","great","good.","good","great.","good","good","good.","great","nice","good.","good.","good.","great,","about","pretty","good.","good","good.","like","great.","great.","great.","pretty","great!","great","good.","good","good","fine.","good,","any","good"],"this lower":["cases"],"this machine.":["In"],"this made":["me"],"this makes":["it"],"this many":["parentheses."],"this map":["are","from"],"this may":["well","not","not","be"],"this mean":["three"],"this means":["you","that","that","that","that","that","that"],"this meanwhile":["https://github.com/NICTA/course"],"this method":["could","doesn't","is"],"this might":["save","not","not","be","help","be","not","be"],"this module":["contained","is","ensure","it","is"],"this module,":["and"],"this month":["(let's"],"this more":["concise","simply","clearly.","efficiently","concisely,","simply","\"programmy\"","concisely","readable.","the","performant","efficiently","efficiently","succinctly.","efficiently"],"this mostly":["to"],"this much":["easier.","code.","simpler.","simpler","more","more","shorter","better"],"this needs":["a"],"this not":["pass","the"],"this number":["is","of"],"this on":["new","a"],"this once":["I"],"this one":["is","has,","function","looked","does","is","is:","I'm","is","is,","is","to","is","doesn't","for","since","than","is","as","hurt.","without","at","best.","using","`scoreLetter`","is","felt","is","later.","on","pretty","ground","(in","is","is","took","better,","is","with"],"this one!":["I"],"this one,":["and","and","so","would","someone"],"this one.":[":-)","I","I'm","I","It's"],"this one:":["http://exercism.io/submissions/e26979c9c9f2ed88aafdf10c","http://exercism.io/submissions/82f3ea9b17a566654d80cd91"],"this only":["happens"],"this operation":["takes"],"this optimization":["in","(in","(when","when","mechanically,","on","itself,","on","on"],"this optimization,":["for","for"],"this optimized":["code"],"this other":["than"],"this ought":["to"],"this out":["as-is"],"this out,":["but","so","uploaded"],"this overrides":["`mod`,"],"this page!":["I"],"this para":["sums"],"this part":[":-)"],"this particular":["issue).","case","solution","issue","case,","case","choice","function","task."],"this pass,":["thanks"],"this passed":["the"],"this passes":["the"],"this pattern":["of"],"this per":["@krista's"],"this point":["and"],"this point,":["I've","and"],"this point-free":["style","style"],"this point-free,":["but"],"this point.":["Maybe"],"this pointfree":["version,"],"this prettier":["but"],"this pretty":["ugly","efficiently)"],"this principle.":["I"],"this problem":["in","though,","don't","involve","much,","there","concise,","allows","in","with","is","was","(O(n","and","for","build","should","use","that","if","is","use","you","for","using","only","lends"],"this problem's":["notion"],"this problem,":["check","you","but","but"],"this problem.":["Data.List","Pushing","Seems","With","If"],"this process":["represents"],"this program":["a"],"this program,":["and"],"this program.":["So"],"this programmer":["for"],"this property":["is"],"this pupil\"":["then"],"this purpose":["I","rather","than","also"],"this purpose,":["because","especially","however,"],"this purpose.":["It","Also,","You'd"],"this question":["due"],"this quite":["a","a","a"],"this really":["a","helped"],"this reason,":["such"],"this recursive":["solution,"],"this related":["to"],"this relates":["to"],"this relevant":["to"],"this requires":["the"],"this return":["the"],"this revisions":["with"],"this right":["now):"],"this rule,":["such"],"this run":["a"],"this same":["style"],"this scenario":["is"],"this scenario.":["It"],"this scheme.":["It"],"this section":["of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","of","in","of","of","in","of","of","of"],"this seemed":["ok."],"this seems":["way","like","the","conceptually"],"this sequencing).":["Most"],"this short":["it's","it"],"this shorter":["and","and","with","by","although"],"this shorter.":["Note","Take","You"],"this should":["still","work","rather","be"],"this simple":["it"],"this simple,":["this"],"this simpler":["using","by","implementation"],"this simpler.":["There's"],"this simplifies":["extraction"],"this since":["you"],"this site":["processes","has","hates","I","doesn't"],"this situation":["is"],"this situation,":["then,"],"this slightly":["more"],"this small":["program"],"this snippet":["of"],"this so":["it"],"this solution":["we","is","is","because","is","much","is","a","works,","fine","looks","is","is.","is","it","to","in","should","is","handles","into","is"],"this solution,":["for"],"this solution.":["I"],"this solution..not":["sure"],"this solution;":["it"],"this some":["more."],"this sometime,":["and"],"this sort":["of","of","of","of","of","of","of","of","of","of","of"],"this specific":["case"],"this state,":["I"],"this step":["by"],"this still":["pass","suffers"],"this strategy":["of"],"this strictness":["stuff"],"this string":["concatenation"],"this stuff":["from"],"this stuff!":["I"],"this stuff.":["I"],"this style":["of","by","of","choice","for"],"this style.":["If"],"this submission":["if","depends","and","quite"],"this submission;":["doesn't"],"this such":["that","that"],"this symbol":["like"],"this syntax":["is"],"this takes":["up","some","up","a"],"this task":["is","it's","hiding","is","like","want","(but","better.","some","using","you","can","using","is","is","is","more"],"this task,":["and"],"this task.":["If","Code","`wordCount","Lazy"],"this test":["was","due","case"],"this than":["I"],"this that":["use","are","I","guarantees"],"this the":["first","first"],"this though.":["Nice"],"this through":["pattern"],"this time":["I","with","you"],"this time.":["People,","As"],"this to":["work","be","use","get","80","use","make","be","look:","create","allow","tell"],"this together":["so"],"this too":["much"],"this totally":["pointfree"],"this trick":["either."],"this two":["options."],"this type":["signatures","is","of"],"this unnecessary,":["and"],"this up":["thanks","rather","a","before","a","/"],"this up.":["You"],"this usage),":["consider"],"this usage).":["This"],"this use":["case","case,","case,","case.","case,","case"],"this useful,":["I"],"this using":["`any`","`foldl'`,","functionality","ShowS","division","only","just","just","the","either","only"],"this value":["will"],"this version":["of","and","using","much","is","is",":)","is","first.","actually","either.","better","of","is","will","has","ran"],"this version,":["using"],"this version.":["This","I"],"this very":["simple."],"this was":["a","it,","a","an","not","my","so","a","written,","in","another","successful","just","submitted:"],"this way":["means","will","(without","to","I","was","since","originally,","in","you","you'll","it","to","of","it","to","tlyou","will",":)","to","of","I","full"],"this way,":["it","but","but","which","but","it","but","you","and","you"],"this way.":["`foldr`","Otherwise"],"this week":["such"],"this weekend.":["Thanks"],"this were":["the"],"this what":["you","you"],"this when":["I"],"this where":["you"],"this who":["exercise"],"this will":["be","be","cause","probably","also","save","do","work","work","be","automalically","give","be","compile","not","simplify","be","work,","build"],"this with":["`fromListWith`,","`any`","`fromListWith`?","fromListWith?","`fromListWith`?","`fromListWith`?","`insertWith`.","`Maybe`","lists.","map","infix","Data.Attoparsec.Text","just","just","`fromListWith`","a","`map`","`map`","pattern","`map`.","`sort`","Text","`Maybe`","lists","explicit","`sum`","functions","a","such","higher","a","a","a","Data.Bits","less","optimizations","`sort`","less","5","a","`module","a","a","Criterion","just","two"],"this without":["a","map,","using","indexing","`isPunctuation`.","unsafePerformIO.","hard-coding","any","using","recursion.","using","using","that","lists","using","converting","`^`","`^`","having","using","`group`","Data.List","`group`","using","leaving","a","`specialChar`?","Data.Map?","the","any","having","exponentiation","a","`strip`","using"],"this work":["better,"],"this worked":["from"],"this works":["and","great","sounds","just"],"this works,":["look","look","especially"],"this works.":["It"],"this would":["be","be","be","be","be","definitely","be","not","be","be","be","save","save","be","be","be","be","be","be","be","be","read","simplify","be","be"],"this would've":["been"],"this wouldn't":["change"],"this you":["meant?","could","shave"],"this yourself),":["but"],"this! But":["I"],"this! This":["was"],"this! Will":["have"],"this), although":["with"],"this)? I":["found"],"this, I":["tried","prefer","used","needed","do","think"],"this, Parsec":["doesn't"],"this, `TVar`":["is"],"this, all":["of"],"this, although":["a"],"this, and":["Text.InterpolatedString.Perl6","merely"],"this, as":["searching","you","it"],"this, but":["I","short.","I","it's","now","otherwise","since","what","it","there's","haven't","I","I","sometimes","I"],"this, changing":["as"],"this, do":["you"],"this, except":["a"],"this, feels":["like"],"this, from":["greatest"],"this, it":["would"],"this, it'll":["be"],"this, it's":["simpler"],"this, just":["some"],"this, lisp?":[":)"],"this, nice":["work."],"this, no":["iteration"],"this, of":["course)"],"this, seems":["simpler"],"this, since":["Data.Map","the"],"this, so":["seems","thunk","I","the"],"this, then":["it"],"this, try":["implementing"],"this, usually":["Show"],"this, where":["generating"],"this, which":["made","will"],"this, without":["using"],"this, you":["can","should","could","should","can"],"this. (.-.":[")"],"this. Also,":["the"],"this. Aren't":["there"],"this. But":["just"],"this. Here":["I"],"this. Here's":["a"],"this. How":["did"],"this. I":["would","wonder","didn't"],"this. I'm":["just"],"this. It":["is"],"this. It's":["really","a","normal"],"this. Most":["solutions"],"this. Please":["ignore"],"this. Really":["starting"],"this. Since":["the","`yelling`"],"this. Thanks":["for","for"],"this. The":["`count`","problem"],"this. This":["is"],"this. You":["can"],"this.. but":["even"],"this.. wrong":["command,"],"this... (what":["probably"],"this... Awesome":["feedback."],"this... but":["my"],"this: `((length":["."],"this: `(incword":["(incword"],"this: `2:3:[n+m":["|"],"this: `WATCH":["OUT"],"this: `[(\"AEIO\",":["1),"],"this: ```(\\xs":["-\u003e"],"this: `map":["(id"],"this: `readDNA":["="],"this: `toRNA":["="],"this: `zip":["(sort"],"this: have":["one"],"this: no":["imports,"],"this; it":["seems"],"this? And":["is"],"this? Maybe":["should"],"this? Seems":["probably"],"this? There":["are"],"this? These":["are"],"this? What":["is"],"this? What's":["the"],"this?). Also":["the"],"thisIsCamelCase) by":["convention."],"this` button":["right"],"thks for":["the"],"thorn in":["my"],"thorough, but":["I"],"thoroughly unscientific":["unix"],"those (Char,":["Int)"],"those `+1`":["computations"],"those already":["comfortable"],"those and":["yield"],"those are":["more","very","the","the","not","real"],"those args.":["If"],"those auxiliary":["functions"],"those bindings":["in"],"those cases,":["but"],"those changes":["so"],"those comments..":["Those"],"those counts.":["`nucleotideCounts`"],"those crazy":["mathematicians"],"those dangerous":["constructors"],"those don't":["feed"],"those exercises":["are"],"those extra":["parens..."],"those functions":["in","would","for"],"those guards":["would","to"],"those handy":["pointers!"],"those haskell":["assignments."],"those help":["make"],"those imports":["to"],"those in":["`responseFor`.","*allAlphas*","mind"],"those initial":["values"],"those instructions":["I"],"those into":["a"],"those is":["cleaner."],"those isSilent":["and"],"those lines":["into","might"],"those lines,":["but"],"those modules,":["this"],"those once":["as"],"those packages":["installed"],"those parentheses.":["Function","You"],"those plus":["`mkNucleotide`"],"those rules":["into","can"],"those same":["characters."],"those semantics":["by"],"those terms,":["which"],"those that":["the","need"],"those thunks":["anyway"],"those thunks,":["and"],"those times":["though"],"those to":["those"],"those transformations.":["Maybe"],"those tuples,":["you"],"those two":["were","lines","things","functions.","for"],"those typeclasses":["work"],"those types.":["This"],"those warnings,":["but"],"those weird":["501s"],"those when":["I"],"those who":["have"],"those with":["an"],"those you":["may"],"those. As":["for"],"though (`appendNewline`":["maybe?),"],"though (although":["i'm"],"though (it":["does"],"though (the":["Map"],"though -":["seeing","I","we","you"],"though :D.":["thank"],"though I":["do","did","personally","used","realize","feel","think,","could","wasn't","wasn't","couldn't","don't","accept","don't","wish"],"though I'll":["try"],"though I'm":["not"],"though IORef":["would"],"though [1,1..]":["is"],"though `length":["."],"though `putMVar":["v"],"though and":["it"],"though because":["I","it"],"though for":["it"],"though how":["this","to"],"though it":["is","does","still","doesn't","may","is","is","passes"],"though it's":["wednesday,"],"though its":["lame"],"though less":["adorable:"],"though maybe":["I"],"though now":["that"],"though perhaps":["you'd"],"though so":["I'll","perhaps","I"],"though technically":["you"],"though that":["is","requires","has"],"though the":["tests","input","jury","tests","tests","failure","tests","Haskell"],"though there":["are","are","is"],"though they":["aren't","are","mean","are","are"],"though this":["code","is","is","isn't"],"though typically":["Haskellers"],"though we":["disagree"],"though you":["still","could","know","may"],"though, I":["think","don't","*am*"],"though, I'd":["recommend"],"though, I'm":["aware","just","just"],"though, although":["you"],"though, and":["then"],"though, but":["definitely","I'm"],"though, considering":["that","such"],"though, dealing":["with","with"],"though, does":["it"],"though, for":["encapsulation?"],"though, if":["they"],"though, in":["general","your"],"though, it's":["ugly","better","interesting,","typical"],"though, just":["a"],"though, kinda":["feels"],"though, looks":["good."],"though, maybe":["i"],"though, much":["cleaner"],"though, nice":["work.","work","work"],"though, since":["it's","it"],"though, so":["I'll","I'll","I","I","perhaps","there's","I","you're","I'll","even","it"],"though, something":["like"],"though, thanks":["for"],"though, these":["are","are"],"though, this":["is"],"though, though":["you"],"though, unless":["there's"],"though, very":["minor"],"though, which":["would"],"though, your":["hands"],"though. Also":["`fold`"],"though. Can":["you"],"though. Consider":["implementing"],"though. Could":["you"],"though. I":["had"],"though. I'd":["expect"],"though. I'm":["not","not"],"though. It":["does"],"though. Nice":["work."],"though. There":["are"],"though. They":["go"],"though. This":["is"],"though. `foldl'`":["is"],"though. so":["i"],"though... it's":["a"],"though? I":["guess","tried"],"thought I":["was.","would"],"thought I'd":["try","throw","use","mention","mention","have","have"],"thought `isAnagramOf`":["would"],"thought `isJibbersish`":["was"],"thought `putMVar`":["wouldn't"],"thought `reverse`":["was"],"thought `wordCount`'s":["definition"],"thought a":["lambda"],"thought about":["it","using","on","defining","using","point-free","using","using","`StateT","infinite","this","using","that."],"thought compiler":["would"],"thought enum":["should"],"thought foldl'":["was"],"thought guards":["would"],"thought haskell":["would"],"thought is":["that","maybe"],"thought it":["would","would","was","lacks","was","was","may","acceptable","made","would","was"],"thought might":["be"],"thought my":["`one`"],"thought of":["that!","doing","breaking","that.","building","it","that,","at","using","making","the","\"parsing\"","doing","as","Data.List.Split."],"thought on":["using","it"],"thought people":["would"],"thought so,":["but"],"thought that":["the","the","`mapAccumL`","`encoded","was","[x,","could","would"],"thought the":["return","same"],"thought there":["should"],"thought there'd":["be"],"thought things":["were"],"thought this":["is"],"thought to":["google","me."],"thought using":["`wordsBy`"],"thought was":["the","frequency"],"thought we":["can"],"thought you":["meant","were","were"],"thought, let's":["not"],"thought. Are":["we"],"thought... Well":["spotted,"],"thought...give me":["a"],"thoughts about":["whether"],"thoughts or":["suggestions"],"thread A":["does,"],"thread A.":["That's"],"thread B":["does:","is"],"thread does":["`readMVar"],"thread is":["preserved"],"thread that":["consumes","produced"],"thread the":["argument"],"thread-safe (I":["might"],"threading of":["the"],"threading the":["values"],"threads (a)":["and"],"threads A":["and","and"],"threads are":["merged"],"threads calling":["putMVar)"],"threads, that":["is"],"threads. It's":["usually"],"three (`isSilence`,":["`isShout`,"],"three `\u003c|\u003e`":["operators"],"three chapters":["on"],"three clauses":["of"],"three different":["character"],"three extra":["times."],"three guards":["you"],"three guards.":["Got"],"three of":["them,","them...","those"],"three pass-through":["cases."],"three predicates":["is"],"three recursive":["passes"],"three tests":["for"],"three times.":["A"],"three to":["local"],"three, last":["four."],"three, next":["three,"],"threshold, since":["it"],"threw exceptions":["were"],"thrilled with":["how","it.","the"],"through 'Learn":["You"],"through 4":["passes"],"through `hlint`":["before"],"through a":["lot"],"through again":["with"],"through all":["of"],"through characters":["you"],"through every":["element"],"through how":["it"],"through http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Char.html":["to"],"through it":["all","in"],"through numbers":["I've"],"through pack,":["so"],"through pattern":["matching,"],"through responseFor,":["I'd"],"through some":["of"],"through that":["book."],"through the":["history","trouble","prelude","sequence","Haskell","list,","checks","list","list.","list.","list","final","table","lookup","two","logic"],"through this":["hour-long"],"through to":["the"],"through with":["certainty."],"through\" semantics":["of"],"through) but":["a"],"through. Ah":["well,"],"throughout the":["code"],"throw a":["patch","descriptive","```seq```"],"throw an":["error","exception","error","error"],"throw efficiency":["out"],"throw exceptions":["in"],"throw that":["out"],"throwing `error`":["in"],"throwing an":["exception)"],"throwing errors":["seems"],"throwing it":["away,"],"throwing spaghetti":["on"],"thrown _and_":["the"],"thrown by":["`(!)`"],"throws an":["exception."],"thumb for":["when","a"],"thumb from":["http://www.haskell.org/haskellwiki/Stack_overflow","http://www.haskell.org/haskellwiki/Stack_overflow","http://www.haskell.org/haskellwiki/Stack_overflow"],"thumb is":["to"],"thumb to":["follow","use"],"thumb: larger":["scopes"],"thunk (unevaluated":["value)"],"thunk [here](http://lpaste.net/5764321645716045824)":["on"],"thunk [here](http://lpaste.net/96283)":["on"],"thunk `((((1)":["+"],"thunk `(((1":["+"],"thunk `(((…)":["+"],"thunk `1":["+"],"thunk `succ":["(succ"],"thunk creation":["to"],"thunk for":["`fingerprint","recursing","each"],"thunk in":["the"],"thunk inside":["an"],"thunk instead":["of"],"thunk leak":["as","(since","(Maybe","~~if","that"],"thunk leak,":["consider","try","consider"],"thunk leak.":["You","You"],"thunk leaks":["in","until"],"thunk like:":["```(insert"],"thunk of":["`1","`(((…)","`(insertWith"],"thunk only":["when"],"thunk takes":["up"],"thunk that":["looks","looks","looks","looks","adds","calculates","can","computes"],"thunk to":["be"],"thunk will":["be","still","be","be"],"thunk, 1":["+"],"thunk, not":["the"],"thunks (in":["other"],"thunks (unevaluated":["computations)"],"thunks `(((1":["+"],"thunks and":["it","it","it","it","it","build","have"],"thunks anyway":["if"],"thunks are":["evaluated.","created."],"thunks as":["an","well,"],"thunks at":["the"],"thunks because":["`l`"],"thunks before":["it"],"thunks consider":["using"],"thunks don't":["build-up"],"thunks from":["left"],"thunks get":["built"],"thunks in":["the","memory","this"],"thunks instead":["of","of"],"thunks it's":["not"],"thunks of":["`(((1)","`(((1"],"thunks part":["that's","is"],"thunks such":["as"],"thunks take":["up"],"thunks takes":["longer"],"thunks that":["look","describe","could","look","look","look","can","will","may","looks","have","look","look"],"thunks there.":["See"],"thunks there?":["In"],"thunks unless":["smth"],"thunks up":["to"],"thunks when":["the"],"thunks). The":["other"],"thunks, a":["bit"],"thunks, and":["use","it"],"thunks, keeps":["them","them"],"thunks, really":["that"],"thunks, since":["this"],"thunks, so":["you"],"thunks, then":["the"],"thunks, to":["avoid"],"thunks. If":["you"],"thunks. In":["other"],"thunks. Right":["folds"],"thunks. Thanks":["for"],"thunks. Using":["`foldl'`"],"thunks. With":["`fromListWith`"],"thunks. You":["could"],"thus ```map":["toLower"],"thus `toRNA`":["wouldn't"],"thus allowing":["you"],"thus far":["is"],"thus fmap":["by"],"thus it":["will"],"thus kept":["in"],"thus one":["parenthesis"],"thus removing":["the"],"thus return":["the"],"thus right":["part"],"thus the":["declarations","declarations","declarations","same"],"thus you":["have","keep"],"thus you'll":["have"],"thx, will":["fix."],"thymidine ::":["Nucleotide"],"thymidine =":["uracil","fromChar"],"thymidine and":["change"],"thymidine are":["just"],"thymidine with":["uracil,"],"thymidine, uracil":["::"],"thymidineToUracil nucleotide":["|"],"ticket to":["add"],"ticks as":["a"],"tidier and":["more"],"tidying up":["of"],"tighten this":["up."],"tightens it":["up"],"tighter than":["any","`&&`."],"tightly than":["the"],"tile has":["no"],"tile may":["be"],"tiles but":["wildcard"],"tiles in":["a"],"tiles so":["it"],"tiles worth":["0"],"tiles. Since":["the"],"tiles. Your":["implementation"],"time (I":["had"],"time (allocating":["these"],"time (consider":["generating"],"time (e.g.":["instead"],"time (linearithmic":["worst"],"time (or":["at"],"time (want":["to"],"time -":["and"],"time GHC":["is"],"time I":["tried","see","can't","tried","tried","tried"],"time I'd":["get"],"time I'm":["coming"],"time I've":["seen","seen","seen"],"time a":["single"],"time additional":["expressions"],"time algorithmically,":["the"],"time and":["then","get","since","space,","space"],"time as":["the"],"time becomes":["\"never\""],"time best":["case,"],"time by":["leveraging","building"],"time calculite":["```2^n```."],"time calling":["robotName."],"time complexity":["`O(gradesCount","as"],"time convincing":["GHC"],"time finding":["them..."],"time fitting":["more"],"time for":["impl","the","modern"],"time function":["in"],"time if":["you","you"],"time instead":["of","of"],"time into":["a","this"],"time is":["not","one"],"time it":["iterates"],"time it's":["requested.","read","called,"],"time looking":["into"],"time lookup":["is","without"],"time of":["my","O(n^2*m),"],"time on":["it,"],"time operation":["using"],"time or":["space"],"time performance":["you"],"time personally.":["Awesome"],"time program":["instead..."],"time should":["be"],"time than":["when"],"time that":["Haskell"],"time the":["input","lambda"],"time then.":["Good"],"time to":["throw","figure","do","move","provide","explore","time.","move","optimize","evaluate","read","evaluate","force","build","have","fully","explain","tackle","rebalance","evaluate),","evaluate),","upgrade","nitpick.","print","eventually","evaluate","ensure","make","figure","review","review"],"time tonight":["to"],"time wasn't":["fast"],"time with":["this","isYelling","Hoogle","a","pattern","just","the","the","just"],"time without":["too","the","Template"],"time wrestling":["with"],"time writing":["an"],"time you":["can","have","aren't","boot","want","boot","put","may","recurse","add"],"time). Everything":["else"],"time). Here":["is"],"time, -as":["it"],"time, Chapter":["7"],"time, and":["picking"],"time, because":["inner"],"time, both":["when"],"time, e.g.":["`upperCase"],"time, i.e.":["`Matrix"],"time, like":["this:"],"time, not":["just","constant"],"time, probably":["not"],"time, regardless":["of"],"time, the":["worst"],"time, trying":["to"],"time, unqualified":["but"],"time. As":["for"],"time. Btw":["is"],"time. But":["your"],"time. I":["still","will"],"time. I'm":["gonna"],"time. If":["the"],"time. It":["also"],"time. Not":["to"],"time. People,":["plz"],"time. Same":["for"],"time. That":["should"],"time. Then":["I"],"time. There":["are"],"time. With":["an"],"time. You":["wouldn't"],"time: `(lowerCaseBottleText":["."],"time? Consider":["using"],"time? I":["don't"],"time? Well":["that's"],"time?) and":["just"],"times (ignoring":["the"],"times (once":["for","per"],"times -":["the"],"times a":["char"],"times an":["`O(n)`"],"times and":["so"],"times as":["possible"],"times but":["I'm"],"times each":["nucleotide"],"times faster":["by"],"times for":["the"],"times if":["all","you"],"times in":["`anagramsFor`."],"times instead":["of"],"times it":["prints"],"times larger":["than"],"times or":["1"],"times per":["each"],"times proportional":["to"],"times slower":["using"],"times than":["it"],"times the":["space"],"times though":[":-)"],"times to":["calculate"],"times when":["you"],"times with":["the","other"],"times), since":["I"],"times, hence":["resulting"],"times, once":["for"],"times, or":["don't"],"times, that":["doesn't"],"times, you":["may","may"],"times. A":["`(String,"],"times. But":["I"],"times. Data.Map's":["functionality"],"times. If":["you're","you"],"times. It":["is"],"times. Note":["that"],"times. Once":["in"],"times. Remember":["that"],"times. Why":["would"],"times. With":["optimization"],"times... My":["first"],"times? Initially,":["and"],"timing issues":["(race"],"tiniest of":["nits"],"tinkering with":["it,"],"tiny bit":["more","nicer","more","more","of","shorter","of","of"],"tiny fractions":["of"],"tiny nit":["to"],"tiny nit...":["shouldn't"],"tiny part":["of"],"tiny program":["like"],"tiny thing:":["you'll"],"tiny) bound":["on"],"tiny, but":["one"],"tip -":["I"],"tip :)":["I"],"tip about":["fromListWith,","iteration","ShowS.","using"],"tip in":["the"],"tip on":["`newtype`","the"],"tip with":["Multi"],"tip! Couldn't":["have"],"tip! Is":["the"],"tip! See":["my"],"tip, I":["wasn't"],"tip, instead":["of"],"tips :)":["Is"],"tips @ressie!":["I've"],"tips have":["made"],"tips how":["to"],"tips on":["eta-reducability."],"tips, I":["will"],"tips, looks":["better"],"tips, really":["you"],"tirelessly explaining":["them"],"tlyou may":["want"],"to \"\"":["is"],"to \"all":["not\","],"to \"anagramsFor":["="],"to \"brute-forcing\"":["the"],"to \"fool\"":["the"],"to \"grok\"":["laziness"],"to \"invoke\"":["`not`,"],"to \"pattern":["matches"],"to \"pull\"":["out"],"to \"robot-name\".":["But"],"to \"run\"":["a"],"to \"time\"":["the"],"to \"use\"":["r"],"to \"zip":["from"],"to 'U'":["case."],"to 'Z'":["rather"],"to 'z'":["and"],"to (Map),":["if"],"to (but":["not","not"],"to (for":["better"],"to (somewhat)":["absorb"],"to (would":["like"],"to **change**":["the"],"to *always*":["write"],"to *only*":["CGAT"],"to -":["`square"],"to 0":["in","would","and"],"to 0.":["This"],"to 1":["line.","and"],"to 1,":["which"],"to 1..7":[":)"],"to 12":["digits"],"to 13,":["with"],"to 2,":["etc."],"to 2-4":["comparisons"],"to 26":["comparisons","comparisons"],"to 3*3*3=27":["bits"],"to 5":["elements."],"to 5,":["etc.)."],"to 6,":["-2"],"to 80":["columns."],"to 9.":["I"],"to \u003ccode\u003etoRNA\u003c/code\u003e":["and"],"to \u003cgasp\u003ethe":["Java"],"to \u003cpre\u003etestCase":["\"rows"],"to ?]":["add"],"to @adonis":["to"],"to @brendan,":["@brendan,"],"to @eddie":["for"],"to @jaydon":["for"],"to @megane":["for"],"to @peggie,":["who"],"to @susana's,":["so"],"to ASCII?":["`isLower`"],"to As":["and"],"to BST":["(Maybe"],"to Bob's":["behavior."],"to Bob?":["There"],"to Bob](https://github.com/kytrinyx/exercism.io/blob/master/assignments/haskell/bob/example.hs)":["uses"],"to Bs":["and"],"to C":["byte"],"to DNA":["or"],"to Data.Char's":["functionality,"],"to Data.List.Split":["`chunksOf`."],"to Data.Map":["being","being"],"to Data.Map's":["value-lazy"],"to Data.Map.Strict":["would","for"],"to Data.Map.Strict.":["I'm"],"to Data.Text":["or","and"],"to Data.Text.strip":["-"],"to Double":["and","or"],"to Functor":["the"],"to GHC)":["It's"],"to Haskell":["I'm","and","and","developers","98's","so","-","and","I'm","and","so","myself","programmers.","as"],"to Haskell's":["non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","non-strict","`foldl`"],"to Haskell,":["please","I","so","and","and","coming"],"to I,j":["pair."],"to Int":["and","yourself."],"to Int.":["However","I.e."],"to Integer":["and"],"to Integer,":["now"],"to LambdaBot.":["I"],"to MVars.":["MVars"],"to Map":["as"],"to MissingH,":["seems"],"to Monad's":["`\u003e\u003e=`"],"to Nucleotide":["DNA"],"to O(n":["log"],"to O(number":["of"],"to Prelude":["are"],"to Prelude's":["`error`"],"to Python's":["[translate](http://docs.python.org/2/library/string.html#string.translate)"],"to Scoring\"":["[here]"],"to Strings.":["For"],"to Twisol":["for"],"to Vector":["for"],"to WHNF":["beforehand.","form"],"to WHNF,":["so"],"to [avoid":["explicit"],"to [my":["solution](http://exercism.io/submissions/522b834ec4120de916000090)."],"to [use":["Data.List.insert"],"to [x],":["which"],"to `$!`":["instead"],"to `(!!":["n-1)`"],"to `((((1)":["+"],"to `((==)":["x)`."],"to `(++)":["a"],"to `(,1)`":["with"],"to `(.)":["."],"to `(1)":["+"],"to `(==)":["'on'"],"to `(\\b":["-\u003e"],"to `(\\w":["-\u003e"],"to `(\\x":["-\u003e"],"to `(`":["not"],"to `(count":["+"],"to `(flip":["(Map.findWithDefault"],"to `(not":["."],"to `.`":["but"],"to `0`.":["However,"],"to `1`":["and"],"to `\u003c$\u003e`.":["It"],"to `ClassyPrelude`":["though."],"to `Data.Char.isUpper`,":["and"],"to `Data.Map`":["so"],"to `Data.Vector`":["and"],"to `Deque":["\u003c$\u003e"],"to `E.throw":["."],"to `Int`":["but"],"to `Integer`":["but"],"to `List`":["seems"],"to `M.toList`":["the"],"to `Map`.":["I"],"to `Num`":["here"],"to `O(log":["gradesCount"],"to `String`":["is"],"to `T.pack`":["once"],"to `Text`":["and"],"to `True":["&amp;&amp;"],"to `[(Grade,":["[Student])]`"],"to `[10,":["9,"],"to `[2..n]`":["only"],"to `[Char]`.":["They"],"to `[b,":["b-1"],"to `\\w":["-\u003e"],"to `\\x":["-\u003e"],"to `^`,":["always"],"to ```Data.Map.Strict```.":["Lazy"],"to ```O(n^2)```":["(your"],"to ```O(n^2)```,":["and"],"to ```anagramsFor```":["?"],"to ```endsWith```.":["In"],"to ```import":["qualified"],"to ```mapMaybe":["f```."],"to ```sep```.":["Doesn't"],"to ```zip```":["can"],"to `a`,":["which"],"to `all":["isSpace`","isUpper`,","f","isSpace`.","f`,"],"to `allCaps`":["but"],"to `all`":["in"],"to `all`,":["but"],"to `all`.":["this"],"to `anagram":["="],"to `anagramsFor`":["if","since","since","and","without","without"],"to `anagramsFor`'s":["where"],"to `anagramsFor`.":["One","A","GHC"],"to `any":["isNotSomething`"],"to `any`":["and"],"to `atomically`":["is"],"to `catMaybes":["."],"to `ceiling`.":["Seems"],"to `concat":["$"],"to `concatMap":["(++\"\\n\")`"],"to `f":["(a,","\u003c$\u003e","p1`.","a","="],"to `filter":["id`","id`."],"to `first`":["from","from"],"to `flip":["elem`"],"to `fmap":["sort`"],"to `fmap`":["adding"],"to `fold'`":["to"],"to `foldl'`":["but","so"],"to `foldl`,":["although"],"to `foldr":["incrWord"],"to `foldr`":["isn't"],"to `foldr`?":["(to"],"to `foo":["++"],"to `fromEnum":["(a","(a"],"to `fromListWith`":["(which","and","without","was","(as"],"to `fromListWith`,":["but"],"to `fromList`":["that"],"to `fromList`,":["since"],"to `fromMaybe`":["to"],"to `fst`":["and"],"to `g":["(f"],"to `go":["(b:bs)"],"to `go`":["function"],"to `h8`)":["for"],"to `id`":["for","and"],"to `import":["Data.Map.Strict","Data.Map.Strict`","Data.Map.Strict`.","Data.Map.Strict`","qualified","Data.Map"],"to `insertIncrement`":["there"],"to `insertWith`,":["which"],"to `isAnagramOf`,":["to"],"to `isDigit`":["though,"],"to `isQuestion":["\"\""],"to `isShouty`":["starts"],"to `isSilence`":["coming"],"to `isSilent":["="],"to `isSpace`,":["whose"],"to `l":["t"],"to `last`":["for"],"to `length`":["in","which"],"to `let`,":["so"],"to `m":["\u003e\u003e="],"to `map":["(\\x","$","(fmap","f`,"],"to `mapLetter`?":["It"],"to `map`":["(or","in","matters,"],"to `maxBound::Char`":["of"],"to `maximum`":["from"],"to `maybe":["d","bar"],"to `module":["Bob","Bob"],"to `n`,":["as"],"to `newName`":["would"],"to `nextWeekday`":["you"],"to `normalizeWords`,":["which"],"to `not":[".","null","(null"],"to `not`":["(as"],"to `not`,":["and"],"to `not`.":["`[Char]`"],"to `nucleotideCounts`?":["HINT:"],"to `null`,":["but"],"to `numerals'`,":["you"],"to `printf":["\"'%c'\""],"to `q`":["when"],"to `r":["/="],"to `randomRIO`":["in"],"to `randomRs`":["are"],"to `readMVar`":["(apart"],"to `readStatement`,":["and"],"to `replicate":["mult`."],"to `replicateM":["n"],"to `repr`":["in"],"to `responseFor":["s`."],"to `responseFor`":["will"],"to `responseFor`,":["so"],"to `responseFor`.":["That","That"],"to `responseTo`":["in"],"to `return":["bal`","bal`"],"to `reverse":["['a'..'z']`"],"to `reverseLinkedList`":["is"],"to `runLengthEncode`":["and"],"to `s`":["in","(in","in"],"to `sentence`":["rather"],"to `silence":["="],"to `sum":["xs`."],"to `tToU`.":["Would"],"to `titleCase`":["or"],"to `toEnum`":["and"],"to `toRNA":["="],"to `toRNA`":["(this","since","using"],"to `toUpper`,":["and"],"to `total`":["that"],"to `total`,":["it"],"to `transcribe`,":["though,"],"to `unlines":["list`","(map","xs`","(map"],"to `unlines`":["now"],"to `unlines`,":["and"],"to `unwords`":["but"],"to `valid`":["and"],"to `w',":["x'`,"],"to `where`":["and"],"to `word`":["here."],"to `x`":["are","once"],"to a":["string,","list","regex.","prompt","top-level","single","strict","newtype","Haskell","lesser","single","list.","canonical","sum.","single","new","variable","list","conditional","Haskell","tally","dependently","String.","predicate","short","different","`foldr`","variable","map","single-line","variable","list","function","working","good","nice","simpler","local","fully","chain","Weekday.","smaller","plain","map","newer","complete","lambda","buildup","level","Double","fromListWith","bitset","stack","list.","shared","exactly","list","lambda","blank","similar","function","simplier","value.","single","little","```where```","union-find","variable"],"to abstract":["it","these","`map","the","over"],"to abstractions":["that"],"to accept":["the"],"to access":["the","element"],"to accomplish":["this","this,","the","some","the","this","additional","this","this","additional","it","this","the","this","this"],"to accumulate":["a","results,","the"],"to achieve":["this","much","better","an","the","such","by","that?"],"to actually":["evaluate","get","be","apply","learn","do"],"to adapt.":["I"],"to add":["a","type","the","the","an","an","a","another","a","new","one","an","a","the","the","somewhere","brackets?","some","tests","an","parentheses","a","\"looks","that","fixed","fixed","this","an","type","mappings","`\"\\n\"`","a","an","some","them"],"to adding":["always"],"to additional":["complexity"],"to address":["this"],"to admit":["this","this"],"to admit,":["I'm"],"to advice,":["but"],"to after":["a"],"to agree":["with","to","completely"],"to all":["of","of","of","the","of","of","of","be","helper","the","of"],"to all,":["but"],"to alleviate":["the"],"to allocate":["O(n)","memory","all"],"to allow":["the","you","`fromList`","strings"],"to almost":["not"],"to already":["be"],"to also":["explicitly","import","be"],"to always":["have","have","keep","provide"],"to an":["output)","arbitrary","identifier","extra","efficient","operator","Int.","operator","Int","error"],"to analyze":["your"],"to and":["from","that's","that's","from","then","it","no","fro."],"to annotate":["top-level"],"to another":["font","type","in","function,"],"to answer":["your"],"to any":["positional"],"to anything":["this"],"to applicative,":["or"],"to apply":["to","this","a","a","your","it","this","it"],"to approach":["things","it"],"to argue":["otherwise."],"to as":["`(+)"],"to ask":["(but","for","questions","for","tips."],"to asks":["tips,"],"to assimilate":["66"],"to assume":["that","that","the"],"to at":["least","least"],"to attach":["type","type"],"to attempt":["this"],"to attoparsec":["combinators,"],"to avoid":["checking","using","the","possible","accidental","the","using","creating","the","this","regexes.","reversing","repeating","the","explicit","(the","repeating","using","all","using","recomputing","sorting,","dumb","`do`?","[explicit","it.","the","the","and","a","the","the","re-searching","explicit","those","traversing","the","the","that","going","this","the","building","that","any","unnecessary","this","some","name","this","this","this","it.","introducing","libraries","non-exhaustive","having","that"],"to barely":["modify"],"to basically":["the"],"to be":["more","closer","a","simpler,","confusing","concise,","pointless.","quite","an","the","at","a","implemented","a","cool","explicit","explicit","guarded","terser","able","well","identified","code","shouting.","lazy,","a","more","the","used","using","empty,","the","a","a","explicit","wrapped","more","a","an","a","```word```","each","optimal,","clever","clear","computed","smiled","partial,","a","absolutely","done.","slower","gained","created","wrapped","passed","a","distinct","\"000\",","\"(000)","a","qualified","consistent","the","a","a","written","interpreted","a","exported,","how","used","grouped,","faster","good","a","a","computed,","a","necessary","introduced","storing","used","indented","unnecessary.","really","more","included","exported","situational...","point-free","true.","evaluated,","counted---this","in","written","implemented","a","missed.","stored","the","part","more","treated","`(a","more","computed","strict,","interchangeable","updated","large","updated,","pretty","case-insensitive.","absolutely","explicit","raised","using","more","(hopefully)","a","considered","a","there,","concise.","very","done","written","the","strict).","slightly","traversed","the","`where","words","there!","infix","careful","maintained,","an","exact).","the","read","pushing","much","easier","simpler","the","a","picked","compared","considered.","sure","able","atomic,","pretty","tail","strict","a","as","succinct","allocated","the","a","too","performed","in","an","the","there","wrapped","flippant,","useful","in","efficient.","using","done","materialized","readable","a","non-empty?","a","more","placed","part","there","on","just","unused","`null`","a","simpler,","divisors,","a","longer","unused.","a","reevaluated","evaluated","better","constructed.","traversed","an","just","explicit.","boxed","unused","empty.","this","a","adjacent","a","in","somewhere","evaluated?","a","a","parallelized","using\u003ccode\u003eunlines\u003c/code\u003e?","compiled","referencing","used","evaluated","deriving","honest","converted?","able","optimized","passed","constrained","cheating","about","genuinely","connected","producing","worth","evaluated,","evaluated.","6","a","fully","a","hit","a","iterative.","worried","aware","familar","`Num","consumed","total","in","most","`foldMap","kinda","computed,","total","partial...","explicit.","sure","using","cleaned","as","an","(getting","evaluated.","useful","made","something","working","able","meaningful,","easier","explicit","fully","your","value-strict","more","efficient,"],"to be,":["especially","`not","you","especially","`mod`","can"],"to be.":["Given","Consider","Fixing","You","I'll"],"to be?)":["-"],"to become":["a","empty.","enamored"],"to bed,":["so"],"to begin":["with.","with,"],"to behave":["identically","at"],"to believe":["there's"],"to benchmark":["the","or","factorising"],"to better":["convey","code,"],"to bind":["or","something","some","the","it","early","`length"],"to bite":["me,"],"to boot!":["I"],"to both":["better","try","of","functional","of","of","input"],"to bother":["with","you,"],"to bounce":["between"],"to break":["the","it","away","things","it","string"],"to bring":["in","out"],"to brute":["force","force"],"to bugs":["in"],"to build":["a","the","a","a","a","a","the","a","a","a","a","the","a","up","a","the","up","the","the","the","up","up","the","that","the","a","a","up","up","this","a","the","the","it","the","a","a","the","the","a","a","a","a","up","a","the","`scoreTable`","up","the","the","the","a","a","up","the","the","the","`nucleotideCounts`","a","a","strings.","a","an","Map","this","meaningful","map","full","a","a","a","all","a","tying","tying","a","values,","map,","up","a"],"to built":["list."],"to but":["might"],"to cabal":["install"],"to cache":["the","the"],"to calclutate":["all"],"to calculate":["the","monthStart…","the","`toLower","`toLower`","the","everyone's","primes","the","square","total,","it.","this,","how","an"],"to calculate.":["Where"],"to call":["this","number","them","yelling","init","atomically,","it","this"],"to call.":["If"],"to capitalize":["to"],"to capture":["both"],"to care":["that"],"to carry":["the","any","it","result","stdgen."],"to catch":["everything","that","the","or","an","that"],"to cater":["for"],"to cause":["an","your","a"],"to chain":["`Either`s"],"to change":["your","the","its","name","this","the","so","your","the","is","this.","your","the","`import","that","the","`nucleotide`","the","fundamentally).","the","the","behavior","values","my"],"to check":["for","for","if","for","for","for","the","isLower","isUpper","if","for","the","for","for","for","for","if","for","the","the","to","both","between","for","`isSpace`","for","if","if","a","to","matching,","it...","it","for","the","tests","the","whether","something","for"],"to check.":["isSuffixOf"],"to choose":["declarative","a","a"],"to clamp":["down"],"to clarify":["your","more","that","its"],"to clarify,":["I"],"to classify":["characters.","chars."],"to clean":["it","things","up","it","up","up"],"to cleanly":["separate"],"to close":["non-empty","over"],"to closing":["non-zero"],"to code":["(e.g.","up","it","the","construction.","points"],"to codify":["what"],"to coding":["in"],"to collect":["metadata"],"to combine":["the","some","operations,","conditions,","it","monadic","this","values","filters."],"to come":["up","with","up","up","back","in","back","across","up","up","back","back-","up"],"to coming":["up"],"to comment":["on","from","on"],"to commit":["most"],"to common":["readability"],"to compare":["word","\"apple\"","against","the","the","case","lower-case"],"to compare?":["It"],"to compile":["down"],"to complain":[":-)","about","about","about"],"to complete":["this","the","this","this","this","this","this","this"],"to completely":["discount."],"to complex":["idea"],"to complicate":["code."],"to compose":["two","than","functions."],"to compose,":["e.g."],"to comprehend.":["But"],"to compress":["the"],"to compute":["the","the","a","`total`","`normalize","nx","`squareSize`,"],"to computing":["the"],"to concatenate":["the","all"],"to condense":["the"],"to confirm,":["`fromListWith`"],"to consider":["using","either","moving","using","here.","using","``\"?\"","using","is","here:","wrapping","is","is","is","using","is","here","using","that","in","yourself","\"using"],"to consider:":["`filter"],"to consolidate":["three"],"to constant":["space."],"to construct":["that","this","a","any"],"to contain":["U's.","an"],"to context":["in"],"to continue":["writing","pursuing","going"],"to control":["it,"],"to convert":["toRNA","from","`String`","it","it","to","it,","the","0..6","`Int","my","from","back","it","the","number","a","boolean","bool","`Bool`s"],"to convey":["the"],"to convince":["myself","either"],"to cope":["with"],"to copy":["paste","the"],"to correct":["one"],"to correctly":["order"],"to count":["just","all","the"],"to count,":["although"],"to count.":["Ie","So"],"to cover":["the"],"to crack":["a"],"to crack!":["To"],"to crash":["on","(not"],"to crash).":["The"],"to crash.":["If"],"to create":["a","that","the","a","a","a","an","a","such","a","a","a","a","a","your","something","a","a","multiple","several","bindings"],"to created":["tyed","tyed"],"to current":["value"],"to deal":["with","with","with","with","with","with","with","with","with"],"to debate:":["in"],"to decide":["the","if","when","when"],"to decipher":["it."],"to declare":["it"],"to deconstruct":["the"],"to deduce":["what","which"],"to default":["to"],"to define":["`fromSchool`","it","another","this","the","that","only","`list`","a","`spaceChars`.","the","this","it","a","fields","possible","`isNil","it","it,","`classify`","a"],"to deforestation":["you'll"],"to delete":["a","these","those"],"to demonstrate":["how","the"],"to denote":["function"],"to depend":["on"],"to derive":["some","Enum"],"to describe":["\"the"],"to desugar":["to"],"to detect":["this"],"to determine":["where","whether","whether","this.","is","which","what's","what"],"to differentiate":["operators"],"to dig":["into"],"to digits":["without"],"to directly":["find"],"to disagree":["on"],"to discard":["some"],"to discount":["the"],"to discover":["why","that","it"],"to discuss":["about"],"to display":["responses"],"to distinguish":["between"],"to dive":["deeper"],"to divide":["it"],"to do":["it","it","this","it.","it","something","(an","it","this","this","this","this","this,","it.","it","it","this","it","the","with","something","in","`map","this","that.","First.","in","prepare","the","it,","the","yelling,","`not","some","the","this","this","this","it","that","this","this","was","it,","this","this.","with","this","this","that","that?","proper","the","that","it","it","about","this","the","inserts","your","that","so,","this","regarding","this","this","something","this","that.","it","function","(due","the","this","so.","backticks","`sum","your","your","the","the","it,","it","it","with","with","this","without","it","the","the","it","this","that","this","a","this","the","this","a","this","it.","already","this","a","here.","here.","the","with","the","most","it","it,","a","something","all","this","this","that","this","this","it","this","it","the","a","that","with","this","this","`(id","that,","this?","it?","all","this","O(1)","the","map","strict","all","that.","with","many","this:","it","since","something","these","something","that","so.","this","anything","that","a","it","`import","it","this","the","it","this","with","`reverse","this","both","that.","a","that","it,","this","with","it,","those","anything.","`flip","all","the","that","multi-line","so","the","a","a","just","more","it","so.","this","the","with","the","that","this","a","it,","it.","the","this","these","that.","automatic","it","98","9","Haskell,","that","the","this","is","this","a","it","all","this","with","with","`toWeekday`","a","a","this...","this","this","a","if","it","this","this","a","things","it","it","this","it.","`f(","`nucleotideCounts`","`fromListWith","qualified","a","this","is","that?","with","this","this..","with","this","things","this","with","that","that","the","any","it","it)","a","with","this","with","it","the","what","anything","a","the","something","here.","this","in","something","it","with","in","this","it","any","an","things.","something","away","with","it","`genName`","this?","with","it.","with","here.","this","this",":)","that","the","a","with","with","a","the","this","this","this,","qualified","is","it","something","this","any","this","and","it","this","it","that","with","it","only","that","this","this","anything","it","it.","it,","it","with","the","the","it.","the","it","with","it","\u003cpre\u003e...f3","it..","with","a","this","argument","this.","it","it","that.)","that","that","it","```sorted```.","that","it","that.","both","it","*something*","would","this.","this,","this","a","it","that","the"],"to do).":["Using"],"to do,":["just","due","because","so","I"],"to do.":["If","You","You're"],"to do..":["and"],"to do?":["I"],"to document":["why"],"to doing":["so.","so.","it","this","it"],"to draw":["the"],"to drink":["so"],"to drop":["the","the","some","the"],"to each":["element"],"to early":["terminate"],"to easily":["enumerate","express"],"to easily-understood":["code"],"to edit":["`mkRobot`"],"to edit,":["but"],"to effectively":["use","pit"],"to efficiently":["re-used"],"to either":["define","use","use","move","version,","match","use","1-","pass"],"to eliminate":["the","the","`isThymine`","a","parentheses:","unnecessary","the","all","the","the","the","the"],"to eliminate),":["function"],"to embed":["the"],"to emphasize":["that","that","that"],"to empty":["lists","chunks."],"to emulate":["mutable","it"],"to enable":["the","TupleSections","the","`{-#","it.","that"],"to encapsulate":["the","logic","the","this"],"to encode":["it","the","most"],"to encourage":["that","code"],"to end":["with"],"to enforce":["invariants,","the","the","it."],"to ensure":["that","that","that","that","haskell","that","the","that","that","that","that","strictness.","that","that","the","that","that","that","that","that","that"],"to entrepum's":["comments"],"to enums,":["doing"],"to error":["out"],"to escape":["from","the","backticks...)","the","from"],"to eta":["reduce"],"to eta-reduce":["the","some","`\\y","functions","the"],"to etrepum":["for"],"to evaluate":["them).","that","it","it","lower","when","it","it","values","and","when","it","the","when","entire","it","enough","element,","the"],"to evaluate),":["these","which"],"to even":["have"],"to evens":["sender)"],"to eventually":["force"],"to ever":["compare","be","do"],"to every":["guard.","function...","line"],"to everything":["as"],"to exactly":["the"],"to exclude":["invalid"],"to execute":["that","that","that","that","that","(measuring"],"to exist,":["however"],"to existing":["higher-order"],"to expect":["to","people"],"to experiment":["with","a","a"],"to explain":["it","this"],"to explanations":["of"],"to explicitly":["import","export","export","export","import","export","import","mess","export","import","import","export","export","export","export","declare","export/import,","export","import","import","export","name","use","fuse","use","export","export","do","specify","bind","export","export","export","import","list","export","export","annotate","add","have","check","operate","export","read"],"to explore":["what"],"to export":["`responseFor`,","`wordCount`,","only","only","it","only","straight","only","STM","`responseFor`?"],"to export,":["i.e."],"to exported":["functions."],"to expose":["`insert'`","Functor"],"to express":["the","what","the","isQuestion","the","`anagramsFor`.","this","that","the","a","`map","`map","`isShout`","that","`map","the","`wasShouted`","this","this","the","`g`","it","this"],"to expression":["in"],"to extend":["in","this"],"to extract":["that","any"],"to extrapolate":["the"],"to factor":["the","that","the","out","out","this","out","out"],"to factorization!":[":)"],"to fairly":["generic"],"to fall":["through"],"to feed":["into","both"],"to fetch":["the"],"to fiddling":["with"],"to fight":["which"],"to figure":["out","out","evaluation","this","out","out","out","out","out","out","out,","out","out","out","out","out","this","out","out"],"to figuring":["out"],"to fill":["in"],"to filter":["out","it","incorrect","out","down,"],"to finally":["get"],"to find":["it.","the","something","so","an","a","a","a","any","this","out","things","the","even","it","a","the","nice","a","\"Monad","how","simple","ways","the","something","a","a"],"to find.":["Just"],"to finish":["up","this!"],"to fit":["in","the","the"],"to fix":["the","that","here.","if","this","the","this","this","mine","the","the","a","my"],"to fixed":["digest"],"to flatten":["this"],"to flip":["it","the"],"to float":["out","out"],"to focus":["on"],"to folder":["purely"],"to folder..":["and"],"to foldr":["will"],"to follow":["a","if","such","when","through"],"to follow.":["There's","Flip"],"to fool":["the"],"to force":["the","the","this","the","the","bearing"],"to formulate":["it"],"to free":["dead"],"to from":["="],"to fromList":["and"],"to fully":["grasp","explain","evaluate"],"to function":["in"],"to function,":["that"],"to functions":["in","which"],"to fuse":["the","these"],"to fusion":["optimisations)."],"to fusion,":["so"],"to generalize":["the","to","for","`lookupPlants`","it","this","approach,"],"to generate":["the","that","the","the","the","a","a","the","primes","all","a","name","the","the","5","the"],"to get":["this","it","around","the","the","Bob","into.","intermediate","the","the","newer","used","rid","the","rid","rid","values","the","people","rid","the","a","my","something","from","an","that","a","the","it","exported","the","exported","a","round","a","too","rid","in","rid","all","rid","rid","rid","it","at","the","it","the","a","from","the","rid","optimized","sublists","around","the","correct","correct","more","used","used","rid","others","something","the","to","all","correct,","started.","started.","HUnit","rid","to","rid","a","it","the","rid","around","more","the","there","better","garbage","in","rid","a","started","`Control.Monad.liftM2`","rid","rid","more","resetName","over","the","the","the","into","put","good","the","the","rid","`op`","back","rid","into.","rid","the","rid","into.","for"],"to getting":["the"],"to give":["you","the","each","a","all","them","`responseFor`","`phrase","`str`","up","helper","another","a","you","a","feedback","a","an"],"to glue":["up"],"to go":["down","(sum,","overboard","looking","for","back","though,","in","in","from","this","down","about","word","all"],"to go,":["given","look"],"to go.":["Thank","I"],"to google":["for","for","for."],"to google.":["Thanks"],"to grasp":["when"],"to greatly":["simplify"],"to grips":["with..."],"to grok":["at","at"],"to grok,":["don't"],"to grok.":["There"],"to group":["the","all","things","`isAlpha","stuff","all"],"to guarantee":["the","bad","`word`","that","that","that","that","that","that","that"],"to guards,":["but"],"to hack":["on"],"to handle":["such","it.","the","errors","the","that","an","all","the","three","the","this","the","the","the","this","the","errors,","an"],"to happen":["would","at"],"to hard":["code"],"to hard-code":["the"],"to haskell":[":-p","so","yet,","and","from"],"to haskell's":["non-strict"],"to have":["the","\"separated-word\"","a","a","type","code","error","in","the","the","an","partial","a","Bearing","different","those","nothing","type","the","type","it","an","little","guards","a","spaces","the","convert","as","a","two","higher","something","them","it","`isShouting`","well-defined","some","to","a","a","any","duplicate","made","`foo","the","guards","a","a","reached","very","a","DNA","to","a","a","`unlines","a","a","as","an","the","to","type","a","a","higher","a","a","scoreLetter","only","all","a","another","the","an","worse","it","decent","better","a","`toLower'","to","more","a","better","a","things","more","the","only","rows","`(++)`","certain","composable","it,","patten","mutable","mutable","the","less","list","take","total","to","a","a","an","that","problems","solutions","an"],"to having":["them","to"],"to hear":["if","thoughts","about"],"to help":["me",":)","you","with","you","you"],"to help.":[":)"],"to here":["from"],"to hide":["it","the","explicit","away"],"to highest,":["but"],"to highlight":["quirks,","an","any"],"to hint":["at"],"to how":["I","I","I","`fromListWith`","the","unused","this"],"to hurt":["other"],"to ident":["the"],"to identify":["different"],"to idiomatic,":["though"],"to ignore":["those"],"to illustrate":["a"],"to impact":["on"],"to impair":["readability"],"to impatience":["haha."],"to imperative":["languages."],"to implement":["`silence`?","`yelling`","silence","simple","silence","shouting","`upperCase`.","a","```total```","those","```isQuestion```","`genericSlices`","with","`nucleotideCounts`","`isQuestion`","`prettyPrint`","column","them","Enum","a","an","this","`analyze`.","`isQuestion`","`datum`","a","mine:","the","the","`decimalPlaceToRoman`","this","hasUpper.","turning","all","`map","this","`silence`.","`splitWords`","`wordCount`'s","`isDelimiter`?","this","`empty`","this","`nucleotideCounts`.","this","`day`","`scoreWord`","using","`nucleotideCounts`","getWords.","`nucleotideCounts`","this","them","things","`cipher`","it","this","this","them","`isNucleotide`","this,","that.","this","this","this","`ciphertext`.","them","`insert`.","`incrementBalance`","them","this","well.(and","a","invalid","this","this","it","this.","this","this","`verse`","`nucleotideCounts`","this","`silence`","the","`toDecimal`"],"to implement,":["but"],"to implementing":["`foldl`"],"to implicitly":["export"],"to implies":["when"],"to imply":["`nucleotide_toRNA`"],"to import":["the","it","STM","the","instances","regexy","more","Data.Map.Strict","from","Data.Map.Strict","Data.Map,","Data.Map","your","Data.Map.Strict","Data.Map.Strict","from","`Data.Map`","Data.Map.Strict","Data.Map.Strict","from","Data.List","from","it","from","Data.Map.Strict","containers","data.list","functions","`Data.Map.Strict`"],"to improve":["this","V2?","the","the","this","this","only","my","the","here","things","it"],"to improve,":["but","Thanks!"],"to in":["a","this","`nsForBottles`."],"to include":["an","Map","coverage","and","type","information","spitting","that."],"to indent":["properly","after","your","all","the","by","the","everything","the"],"to infect":["people"],"to infer":["that.","it","type"],"to inline":["it","it."],"to inner":["vecot"],"to input":["`x`"],"to insert":["pupils","pupils"],"to insertWith":["somehow,"],"to install":["these","it)."],"to int":["function,","you"],"to integer":["calculation"],"to integers":["and"],"to interleave":["a"],"to intermediate":["values."],"to interpret":["this","it"],"to interpreted":["code)"],"to introduce":["Data.Set","a","a","indirection","power?Code"],"to ints":["since"],"to invest":["my"],"to investigate":["what","yourself?"],"to involve":["external"],"to isShout":["is"],"to isSilence,":["or"],"to it":["later","though","with","but","=)","(so","but",":)","(the","than","than","as","than"],"to it's":["certainly"],"to it,":["in","and","but","isn't"],"to iterate":["through","over"],"to iteration":["#2…"],"to iteratively":["build"],"to its":["usage","strict","implementation,"],"to itself":["on"],"to join":["them","sequences"],"to just":["clone","`Map`.","use","define","using","use","stick","use","`sequence`.","use","use","make","use","use","use","use","use","think","say","have","have","start","use","`f`.","use","use","use","`f`,","import","store","skip"],"to keep":["lines","the","the","type","the","the","in","it","the","it","the","the","it","this","the","note","the","track","the","a","a","intermediate","original","things","normalize","it","additional","in","this"],"to kick":["that","out"],"to know":["that","if","to","exactly","what","for","if","if","how","all","seems","what","the","what","something","what","(actually","what","if","if","about","how","that","what","anything","`splitAt`","if","these","if","about","the","the"],"to know!":["Thanks!"],"to know,":["thanks.","thanks."],"to know.":["Thanks","I","And","I'll","I'll"],"to largest":["until"],"to launch":["a"],"to laziness":["in"],"to laziness,":["but"],"to laziness.":["As"],"to lazy":["evaluation.","evaluation"],"to lead":["you"],"to leaf":["the"],"to learn":["and","to","so","about","haskell","a","so","about","this","the","the",":-)","more","a","Haddock.","by","here","about","how","to","stuff","Haskell","about","more","more"],"to learn.":["And"],"to learn/use":["more"],"to learning":["about"],"to leave":["unused","list","it","them","that","them","the","it","it","them"],"to left":["iteratively.","and"],"to left\"":["though,","is"],"to left,":["instead"],"to less":["boxing,"],"to let":["you","the"],"to lift":["it"],"to limit":["the","the","the"],"to line":["everything","up"],"to link":["it"],"to list":["comprehensions","will","(almost)","is","can"],"to list.":["I"],"to lists":["at"],"to load":["up","the"],"to local":["scope"],"to localscope":["of"],"to look":["in","through","at","more","for","in","at","for","up","up.","at","at","to","at","for","at","at","in","at","like","at","pretty","up","something","at","at","at","for","them","at","good."],"to look:":["`module"],"to lookup":["another"],"to lose":["that."],"to lots":["of"],"to lower":["and","or","each"],"to lowercase":["the","only","the"],"to lowercase,":["it"],"to maintain":["strictness"],"to maintain,":["has"],"to make":["shouty","screaming","this","this","isSilence","it","this","insertion","the","sure","it","it","a","it","it","predicate","this","`question`","sure","`isQuestion`","verseComponents","that","it","toRNA","this","that","it","it","this","it","`sorted`","the","some","it","`isSuffixOf`","the","subscriberNumber","anagramOf","anagram","the","this","sure","a","`hammingDistance`","those","another","grade","a","it","toEnum","Schedule","this","it","functions","display","it","this","the","it","a","it","`Robot`","isQuestion","`anagram`","`anagram`","a","this","sure","it","this","it","here","them","them","the","it","sure","`scoreByLetter`","that","this","a","the","them","intent","the","`add`","`grade`","it","it","`resetName`","this","`mkName`","this","`grade`","`countWords`","this","it","matters","those","other","that","`allergies`","this","this","this","this","to","it","for","a","count","it.","these","`total`","it","it","`total`","a","that","sure","the","anything","this","any","`isAllergicTo`","`scoreLetter`","`cleaned`","this","trailing","me","it","a","this","your","the","the","the","any","the","this","sure","them","it","matters","the","any","it","the","the","an","some","it","`mapSorted`","it","that","it","efficient","code","it","STM","these","that","task","solution","this","it","solution","it","something","`sameSorting`","it","this","of","it","a","that","sure,","it","implementation","them","it","code","incrementBalance","the","it","code","code","this","code","it","that","the","the","sure","the","`replaceChar","it","this"],"to making":["it"],"to manage":["space","space"],"to manipulate":["dates"],"to manually":["`insertWith`","do","sum","force"],"to map":["a","(++)","on","them","a","that"],"to map,":["but"],"to match":["the","some","a","`isQuestion`","the","the","any","the","on"],"to match.":["Otherwise,","If"],"to matter,":["but"],"to may":["fix"],"to me":["other","now.","a","(so","though.","either.","that","that","though.","throwing","because","```unify```,","that","than","right","like","(given","but","offhand.","here.","-","considering","like","the","as","that","to","the","that"],"to me!":["I","In","I'll","You"],"to me)...":["how"],"to me,":["though","my","although","since","though","but","I","you","meaning","though.","where","but","but","but","very","here's","although","unless"],"to me.":["What","One","Code","I","You","I","The","You","I","One","tiny","Any","You","Thanks","You","However,","Kinda","I","The","For"],"to me...":["but"],"to me?":["I"],"to mean":["`\\x","something"],"to mean?":["Hmm,"],"to measure":["once","it"],"to mechanically":["do"],"to memoize":["this"],"to memory":[":)","fragmentation"],"to mentally":["parse"],"to mention":["he","that","that","to"],"to merge":["two"],"to mess":["RNA"],"to me…":["but"],"to mind":["the"],"to minimize":["the","using"],"to misconceptions":["when"],"to miss":["one"],"to mix":["monadic"],"to modify":["later","the"],"to modify/debug":["it,"],"to more":["advanced","concisely","'write"],"to most":["significant,"],"to move":["on,","the","into","sing","the","on","these","on!","`isAnagram`","on","local","around","`(show","in","the"],"to msg":["size"],"to much":["more","larger"],"to multiple":["arguments)."],"to multiply":["`n*m`"],"to my":["previous","pointfree","eyes.","v1","suite","toolbox","numerals","100rd","attempt","limited","to-dos!","solution","eye."],"to n":["for"],"to name":["a","the","the","your","the","something","the","variables","fields","it"],"to naming":["it's"],"to narrow":["down"],"to nearest":["b).","(0.5"],"to neaten":["up"],"to need":["a","a","the","a","a"],"to never":["do"],"to nf":["(please"],"to nitpick":["I'd","here!"],"to non-strict":["evaluation)"],"to normal":["form"],"to normalize":["for","the","the","the"],"to not":["use","put","do","use","be","spent","exceed","have","be","bother","use"],"to note":["is","that","that","is","here","here,","that","in"],"to notice":["that"],"to nucleotideCounts":["once."],"to numbers":["(see"],"to observe":["that","though."],"to obtain":["a"],"to occur":["due"],"to offer":["any"],"to omit":["this.","the","parens","type","the","```str```","the"],"to omitting":["`null"],"to one":["`splitPlaces`","of","equation).","resource","arg,","coordinate","`Maybe","if"],"to one-liners,":["most"],"to only":["export","compute","libraries","consider","process","consider","handle","the"],"to operate":["on","on","on"],"to operator":["on"],"to optimise":["for"],"to optimize":["the","for","away","your","it.","it","that","this,","this","cases","the"],"to optimize,":["as"],"to other":["people's","functions,","letters","languages)"],"to outer":["filter."],"to outsmart":["the"],"to pack":["the"],"to pack/unpack":["in"],"to parameterize":["nucleotide"],"to parameters":["you"],"to pare":["things"],"to parentheses,":["there"],"to parse":["each","a","some","and","on","them"],"to parse,":["you"],"to parse.":["Really"],"to pass":["Data.List.insert","the","the","that","around","it","the","string","above","its","them","tests,","everything","two","the"],"to passes":["over"],"to pattern":["match","match","match","match","matching","match","match"],"to pattern-match":["something"],"to people.":["i'm"],"to perform":["an","the","arbitrary","these","fusion","calculations"],"to permitting":["any"],"to phrase":["`yelling`,"],"to pick":["but","a","totally","is","here:","here","out"],"to pick.":["This","This"],"to place":["spaces","them"],"to play":["about","with","with","with","with","with"],"to point":["free","free.","free","out","to","out","people","out"],"to point-free":["code","style","(this","style):","form,","with"],"to point-free.":["For"],"to pointfree":["`capitalise`","style:","style"],"to pointfree-land.":["'Tis"],"to pointfree.":["Sure,"],"to popular":["belief,"],"to post":["this"],"to practice":["for"],"to precisely":["the"],"to precomputing":["`lowerWord`"],"to prefer":["using","using","reducing","using","the","this","`mkRobot`"],"to preference,":["but"],"to prefix":["the"],"to prevent":["this","potential","confusion.","from","repeat","repeated","a","a","that"],"to previous":["version"],"to primeFactors":["should"],"to prioritize":["readability."],"to problematic":["scenarios."],"to proceed":["anyways"],"to procuce":["something"],"to produce":["them.","that","a","output.","some","some"],"to programmatically":["handle"],"to progress":["without"],"to project,":["like"],"to properly":["write","parse"],"to prove":["it","anything","extendability."],"to provide":["the","some","a","them","pure","simple","simple","simple"],"to pull":["things","template","out"],"to push":["back","them"],"to put":["the","the","the","the","type","ones","it","a","the","pieces","some","digits","it","the","them","the","whitespace","whitespace","the","a","exercism.io","the","a","`where`","`where`","`(century)`","the","my","the","up","`translateNucleotide`"],"to quantitize":["the"],"to raise":["would","an"],"to range":["check"],"to re-bind":["names,"],"to re-implement":["it."],"to reach":["for"],"to read":["expression","/","than","through","(although","is","your","more","and","and","and","compared","than","through","and","\"Learn","more","`verse`)","using","some","up","and","the","it,","and","the","rather","and","about","up","on","it","depends","up","than","`sort","because","if","how","up","Simon","about,","about","that","and","before","at"],"to read,":["and","but...","parse","but","and","and","so","since","yeah."],"to read.":["but","You","Not","I","Maybe","Thanks"],"to read/maintain":["by"],"to readMVar":["and"],"to readability":["and"],"to reading":["the","the"],"to realize":["that"],"to really":["review","get","compact","use"],"to reason":["about.","about,","about.","through","about,"],"to rebalance":["them"],"to receive":["the"],"to recommend":["it"],"to record":["fields,"],"to recover":["from"],"to recurse":["on"],"to redefine":["the"],"to reduce":["usage","it,","the","duplication,","duplication.","the","the","the"],"to refactor":["the","your","nucleotideCounts","it","`isShouting`","this","`isAnagramOf`","`anagram`","it","`anagramsFor`","to"],"to refer":["to","to","to"],"to reference":["it"],"to reflect":["your"],"to reformat":["code"],"to reformatting":["the"],"to refresh":["my"],"to regexes":["for"],"to reignite":["our"],"to reimplement":["the"],"to reinvent":["the"],"to reject":["such"],"to rely":["on","on"],"to remember":["how","to","that.","the","the","what","this","the","which","the"],"to remove":["it","one,","the","this","the","redundant","`(a","some","the","the","them.","`x`","the","parentheses","the","all","as","all","the","the","everything","```k'```","a","the","a","a","the","it,","if","code","it"],"to rename":["it"],"to reordering.":["Multiple"],"to repeat":["on","common","things","common","the","the","`orbitalPeriod`","`scoreLetter`","it","the"],"to repeatedly":["fall"],"to replace":["those","`(id","`(\\s","all","your","that.","`toEnum","`(\\x","it","text","anything","any"],"to represent":["the","Nucleotide","the","the","1","such","a","an","answers","all","invalid","a"],"to represent.":["Likewise,"],"to require":["the","recursion","the","readers","your"],"to resend":["latest"],"to resolve":["an"],"to respond,":["and"],"to responseFor":["to"],"to restate":["it","`rows`","slices/consecutives,"],"to restrict":["the","(specialize)"],"to restricting":["it"],"to result":["in","of","substract"],"to result,":["substract"],"to rethink":["them"],"to retrieve":["the","bad"],"to return":["Bool.","a","identities.","`(String,","the","`\"000\"`.","Bool","a","a","an","unsorted","a","a","a","1","sorted","`[Maybe","`Either","a","what","something"],"to return,":["also","like"],"to return.":["This"],"to reuse":["the","`nucleotideCounts`"],"to reverse":["the"],"to review":["this","my","my"],"to revisit":["this"],"to rewrite":["allCaps","that","it","`incrementBalance`","them","this","all","this."],"to right":["and","without","and"],"to risk":["confusing"],"to roll":["the","my"],"to roughly":["the"],"to run":["the","this","tests,","the","with","all","action","into","concurrent"],"to run.":["If"],"to sanitize":["the","out:"],"to satisfy":["that","the","the","the","the"],"to save":["some","an"],"to say":["'if","about","anyway.","that","that","else","I","without","that","the","here!","that","in"],"to say,":["is","this"],"to say.":["You"],"to scan":["the","the","the"],"to scan.":["Overall,"],"to score":["all","a"],"to screw":["up,"],"to scroll":["horizontally"],"to search":["for","for","as","dependencies","much."],"to see":["everything","isFoo","code","where","type","if","functions","how","how","some","where","individual","if","the","how","right","what","if","it","how","if","Youda","if","what","if","`wordCount","if","if","which","how","primes","just","how","anywhere,","if","you","spaces","`scoreLetter`","if","if","things","signatures","if","the","`not","`\\w","if","how","type","what","it","functions","it","it","if","how","`not","`String`","qualified","chr","whether","that","warnings","how","all","what","how","the"],"to seeing":["it"],"to select":["the","a","a"],"to separate":["arguments,","function","parsing","a","the"],"to serialization":["is"],"to setup":["cabal-sandbox,"],"to share":["a","work"],"to shift":["it","the"],"to shoehorn":["my"],"to shorten":["`Data.Map.Map`","things","this"],"to show":["that","you.","how","in","up","that","you","that","number","the"],"to sidestep":["the"],"to significantly":["alter"],"to signify":["something?"],"to simple":["if/else","(imho).","problems"],"to simplify":["checking","a","some","your","your","this","`isSilent`.","your","`isShouting`,","your","your","the","this","your","the","your","your","`prettyPrint`","line","the","it.","the","this","```addWord```","things?","this","`sing`.","the","it?","the","the","this","this"],"to simply":["get","prepend","apply","say","change"],"to sing":["backwards,"],"to single":["out","that"],"to skip":["unnecessary"],"to slim":["down"],"to smallest":["order)"],"to smallest.":["You"],"to so":["this"],"to solve":["it","working","this","this,","in","it.","this","this","this","the","this","with","this","this","this","this","this","this)?","this","it","this","it?","this","task","this"],"to solving":["this"],"to some":["of","continuous","deforestation","parsing"],"to something":["too","more","that","very","like","better."],"to something,":["you","and"],"to sort":["the","the","directly","when","and","&","every"],"to sorting":["of"],"to speak":["for"],"to special":["case","case"],"to specify":["the","using","LANGUAGE","type"],"to spell":["out"],"to spend":["some","a"],"to spit":["out"],"to split":["a","a","the","up","String","into","the","the","on","filters","on","quoted","the","this","the","the","using"],"to spoil":["too"],"to spot":["where"],"to spread":["out"],"to sqrt":["n,"],"to square":["is"],"to stack":["overflow","overflows"],"to start":["in","this","looking.","the","with.","with","(and","thinking","implementing","on","with","them"],"to start.":["Even"],"to stay":["in"],"to steal":["it"],"to step":["one.","1."],"to stick":["with","out","to","with","with","to","to","with","to"],"to still":["write","import","be"],"to stop":["here!","comparing","searching","and","itrrations,"],"to store":["`canonicalize","the","all","it).","`toUpper","it","all","grades,","two","either","matrix.","sizes","matrix.","matrix."],"to strict":["evaluation","versions","rather"],"to strictness":["issues,"],"to strictness.":["`fromListWith","`foldl`"],"to string,":["moreover"],"to stub":["out"],"to study":["a","on"],"to stumble":["upon"],"to style":["and"],"to submission":["4,"],"to submit":["a","this,","iteration","a","a","a","this"],"to subtle":["timing"],"to suffer":["`bstValue`"],"to suggest":["using","an","using","that","that"],"to supply":["those"],"to support":["`Read`.","an","other","my","that"],"to suppress":["a"],"to swap":["letters"],"to switch":["to","in"],"to syntax":["extensions"],"to tack":["on"],"to tackle":["on","that"],"to take":["a","it","care","a","a","place","a","some","another","a","the","a","that","a","a","advantage","O(n)","some","another"],"to talk":["in","about","about","about"],"to target":["once"],"to taste,":["but:"],"to teach":["people"],"to tell":["me","me","the","people","it","if","you","if"],"to tell,":["Haskell"],"to test":["simple","`a","that","is","if","runtime","in","file","this","all","is"],"to test,":["in"],"to tests,":["\"What"],"to text":["just"],"to thank":["for","for"],"to that":["by","classification—","datatype.","going","enumeration?","one.","point.","style","process."],"to that,":["the"],"to the":["same","docs,","next","\"monomorphism","local","spec,","first","following:","following:","model","correct","top-level","expected","spec.","following:","fact","following:","First","functions.","following:","list)","string.","individual","actual","where","tuple","extent","map;","internals","below?","set","set","definition.","`not`.","following:","list","same","previous","result?","first","length","API.","functions","Haskell","keys","next.","lambda","Haskell","\"official\"","strong","tail.","next","spec","one-pass","given","decimal","store","`all","clarity","top","list,","Map","compiler","word-count","front","responseFor","`responseFor`","function","more","solution","smallest","`foldl'`),","value-lazy","original","\"double","monadic","day","cases","function","most","book","end","bottler.","containers","associativity","problem","following:","decimal","binary","use","list","first","original","Functor","user","rest","top","first","`foldr`'s","use","use","reader","next","exclusion","detriment","conclusion","'otherwise'","predicate","whole","problem","best","bottom.","longer","last","point","given","correct","Weekday","input","start","left","semantics","overall","way","README's","fact","rounding","`('C':'M':)`","wrong","function","chase","Functor","solution.","bank","way","tokenization),","last","`=`","length","input","float-out","entire","right","right).","`otherwise`","appropriate","top","`|\u003e`","lazy","first","space","values","way","MVar.","thunk","confusion.","value.","code","deficiencies","clunkiness","gist","spacing.","5th","5th","2nd?\"","2nd","5th","5th","memory","same","next","precedence","output?","map","4-spaces","chapter","other...","description,","corrected","repo.","equation","`map`","folowing","many","next,","wikipedia","road","end","problem","next","first","recursive","recursive","function","same","top","thunk","top","final","top","terminology","power","next","correct","13th","0","Haskell","first","docs","5th","replace","line","game","appropriate","principle"],"to their":["respective","(personal)","best","values...","own"],"to them":["but"],"to these":["slides"],"to think":["the","\"but","of","deeply","about...","it","it","about","there","about","about","in","about","about","a","in","about","of","what","the","about","that"],"to this":["problem)",":)","problem","sort","problem","function","without","chapter","exercise","rule,","problem","section","later.","point,","code,","problem,","problem","point,","that","problem","exercise?","problem.","case.","problem","(underspecified)","explanation.","problem","problem.","exercise","exercise","predicate\"","one.","solution","later.","idea):","problem","part","task","function","is","one:"],"to this!":["But"],"to this),":["although"],"to this,":["then"],"to this.":["It's"],"to this?).":["Also"],"to those":["(Char,","functions."],"to throw":["efficiency"],"to thunk":["leak,","leak"],"to tighten":["this"],"to time":["additional"],"to to":["step"],"to tokenize":["the","words"],"to top-level":["functions","definitions"],"to totally":["pointfree"],"to trace":["things"],"to track":["one","additions"],"to transcribe":["one"],"to transform":["the","your","them"],"to transform,":["as"],"to translate":["from","an"],"to traverse":["the","and","the","the","it","the","the","and","the","the","the","only","the","structure","the","the","the","the"],"to treat":["multiline","this","all"],"to trigger":["silence!"],"to trim":["the"],"to try":["and","that.","something","implementing","using","to","and","to","out","the","using","something","and","for","and","and","with","rewriting","and","re-implementing","writing","and","very","a","to","to","and","to","check","different","to","and","to"],"to turn":["`School`","a","`(&&)`","True","on"],"to tweak":["it"],"to type":["them","`Integer'","`Integer'","encode","`Map.Map`","even","`Integer'*","`not","Integer'","that","`Integer'"],"to type,":["less"],"to unboxed":["vectors."],"to undate":["it.."],"to understand":["that","at","if","Haskell's","expression","a","how","how","why","what","how","so","it.","that","how","the","how","at","if","test","this","the","both"],"to understand,":["I'd","but"],"to understand.":["You're","Please","But"],"to unfoldr":["be"],"to unify":["the","the"],"to union":["together,"],"to unique.":["I"],"to unlock":["the"],"to unpack":["it"],"to unpush":["it."],"to up":["my"],"to update":["internals","containers","tests,"],"to updated":["test"],"to upgrade":["my","to","for"],"to upper":["to","by"],"to upper,":["negatives","positive"],"to uracil":["if"],"to use":["`any`","the","shorter","explicit","`|","operators","a","pattern","[fromListWith](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html#v:fromListWith).","any/all?","`==`","a","`fromListWith`","splitAt","the","\"isLower\"","dropWhile,","separate","`all","an","guards","a","an","a","`import","a","functions","the","`read`,","the","Data.Map","for","`fromListWith`,","Data.Map","it.","the","this","type","the","`wordsBy`","a","the","the","a","`filter`","a","a","`fromListWith`","`fromListWith`","explicit","zip","a","a","the","`fromList`","a","other","them","guards","the","`fromListWith`.","`String`","an","the","`(:[])`?","better","for","`all`","for","`foldl'`","a","more","both","fmap","`toAscList`","```isLower```","\"where\"","a","that.","BangPatterns","`isSuffixOf`","Control.Monad.Writer.Strict,","`map","`fromListWith`,","pattern","`concatMap`","MonadLoops","a","`getMap`,","Control.Arrow's","the","Bounded","QuasiQuotes","`intercalate`","a","map","the","the","the","the","an","for","parens","concatMap","the","the","this:","`newtype","a","`split`","the","`sum`","explicit","a","Maybe","`null`.","MissingH","it...","functions","`sum`","`insertWith`.","any","typeclasses","`map`","a","lens","bottom","the","is","`foldl'`,","than","a","regexps","two!","it.","the","`any`","a","the","`fromListWith`","explicit","`xs`","specific","a","`insertWithKey`,","`foldl'`","`atomicWriteIORef`","higher-level","newtype","guards","`fromListWith`","explicit","Text.Parsec.Token","for","`isSuffixOf`","an","when","it.","`all`","`all`","Data.List.Split","`foldl'`","`fromListWith`","that","`wordsBy`","`lens`","higher-order","something","`fromListWith`,","`seq`.","`foldl'`,","`foldl'`","`fromListWith`","and","`isSuffixOf`","that","a","words","to","it.","the","higher","`M.map`","`wordsBy`,","`wordsBy`.","`newtype`","`let","point-free","haskell","in","a","something","record","them","`foldl'`","fromListWith","Control.Applicative","something","them.","a","here.","a","`fromListWith`","higher","`not`","the","`undefined`","(such","something","as","an","record","the","`foldr`","any","`List.map`","`foldr`","is","`unionWith`","GND","Either","Data.Map.Strict","`foldl'`","`/=`","an","a","Data.Vector,","qualified","List.map","any","`sort`,","[`liftA2`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Control-Applicative.html#v:liftA2)","a","Data.Map","it","this","point-free","`String`","for","names","higher","`fromEnum","`zipWith`","`newStdGen`","two","two,","`fromListWith`","repeated","arithmetic","Data.Map.Strict","`C`","the","`foldr`","a","Data.Map","`acc`","a","Functor,","the","it.","Data.Map.Strict's","`count","`import","a","`insertWith'`","it","in","it","`wordsBy`,","three","`where`","`printf`","it","library","`fromEnum`","the","`concat`","either","the","days","`foldl'`","map.","`reverse`","an","here.","`length`","a","Data.Array,","Data.Map.Strict's","parentheses,","`$`","parentheses","the","Double","the","`foldl'`","Applicative,","the","an","higher","`elem`","pattern","the","String","built","the","`concat`","transpose...","the","`_`","STM","`foldl'`","`find`.","in","a","explicit","here","`printf`","`L.filter`","pattern","a","Data.List's","Data.Map.Strict.","Data.Map.Strict","higher","parentheses","`case`","the","`fromListWith`","the","(Row,","it","the","Arrow","a","one","let...","some","a","as","guards.","here","for","`Map.fromListWith`","`wordsBy`","and","arrows","'channels'","`","guards","MWC","lambda","`MVar`s.","```State```","`$`","MVar","Functor","fewer","correctly","type","putMVar","only","`Data.Map.Strict`","more","`null`","here,","short","Data.Map.Strict","```repeat","Text,","Text","it","`map`,","2.","`atomically`","blocked","them","Data.Map.Strict","`foldl'`","`newtype`","`string`","Data.Map.Strict","following","the","parentheses","`null`","names","Data.Map.Strict","insert","guards","`wordsBy","Data.List.Split.wordsBy","as","a","DMS","to","here","short","mutable","smalltalk","a","Map.","the","`mod`","a","Data.Vector.","Bool","0","ListLike","unwords","simple","higher","`foldl'`","something","sum","the","`(f.).`","fromEnum,","Data.IntMap.Strict","guards","'all'","`where`","some","`guard`","`return`","fewer","pattern","`replicateM`","`isUpper`?","`foldl'`","Data.Map.Strict.","an","sqrtInt","math","a","`map`","only","`(x:xs)`","head","left","just","strict","full","qualified","a","Maybe","data","use","cons-reverse","right","the","just","basic","guards","the","more","strict","`head`","incremental","`filter","HashMap","U","```foldl```/```foldr```","`let`","both","```filter```.","```show","something","a","`permutations`","functions","an","competing","TVars","`modifyTVar'`","only","bits","`fromEnum`","foldl'","built","it","```fromLIstWith```","the","for","Data.Map.Strict,","that","is","too,","`fromListWith`.","`foldl'`","`foldl'`","`Prelude.`","the","here,","unwords","the","higher","`Data.List.Split`","`Data.Map`","them.","```length```","```M.fromListWith```","for","direct","`isSuffixOf`"],"to use)":["shorthand"],"to use,":["you","because","in","`foldl'`","and"],"to use.":["If","I'd","Ugh."],"to use/don't":["care"],"to using":["if","`fromListWith`","a","newtype","`where`","regular","Text","`show`","a","a","a","`foldr`","monads","it","Text","`words","`take","`if`","`TVar`s,","a","something","regular,"],"to utilize":["Set,","Map"],"to validate":["the"],"to values.":["Pattern"],"to variable(s)":["such"],"to variables":["in","so"],"to vary":["the"],"to verify":["post-condition","that","my"],"to wade":["through"],"to wait":["until","all"],"to want":["to","to"],"to warn":["about"],"to weak-head":["normal","normal","normal"],"to what":["the","you","you","you've","you're","`atomically`","you"],"to what's":["on"],"to where":["I","clause,","part,"],"to whether":["the"],"to which":["name","form"],"to whichever":["element"],"to whip":["up"],"to why":["`foldl`","and"],"to without":["much"],"to word-count":["probably"],"to work":["also.","just","well,","out","with","out","with","out","out","-","that","fine","until","with","through","out","on","out","with","for","with","out"],"to work,":["what"],"to work.":["The"],"to worry":["about","about","about","about"],"to wrap":["`toUpper`","and","your","argument","a"],"to write":["silence","a","```isYelling```","`foldr","`nucleoCounts`","canonical","replaceThymine","a","a","than","those","an","the","that","Haddock","`isSuffixOf`","```isShouting```","simple","the","out","this","`t2u`","`any","`not","sum","it.","it","idiomatic","both","`not","when","a","up","the","a","it","`f(x)`","code","out","`comments`.","it","comments","`(\\w","`capitalise","this","it","`filter","a","`String`","`anagramsFor`","this","this","`count`?","`reverse","it","`toRNA`","`mkRobot`","`toRNA`","it","their","Python","anagramsFor","functions","`isAnagramOf`","functions","`where`","`wordCounters`","type","`nucleotideCounts`","`flip","a","just","it?","this","isAnagram","`initList`","the","benchmarks","this","`f","code","a","small","that","`(\\a","`sum`","`question(ys)`,","code","your","are","`flip","`normalizeWords`.","the","total","out","the","transform","the","a","though.","in","total","`mkRobot`","a","it","`slices`","this","tests","a","`\\x","line","a","`\\x","`isNucleotide`","the","`f","`start`","that","`zipWords`","an","benchmark","`anagramsFor`","it","out","predicate","`count`","`elem`","inserts","an","this","that","that","more","`\\c","it","failing","withPeriod","something","`sorted`.","`zip","`f(x)`","`silence`","it","a","your","`getDigits`?","in"],"to writing...":["\u003cgasp"],"to xs.":["It's"],"to yield":["the","two"],"to you":["2","question","select"],"to you,":["I","if"],"to your":["\"shouting\"","module.","program,","code:","zero","helper","`wordsWhen`,","preference.","advice.","`~/.ghci`","troll","previous","module"],"to yours,":["and"],"to zeros":["by"],"to zip":["the"],"to zipping":["with"],"to, `\u003c$\u003e`":["and"],"to, although":["I"],"to, because":["it"],"to, if":["one"],"to, so":["it's"],"to, there":["is"],"to, you":["can"],"to. Almost":["literally"],"to. Also,":["I"],"to. Another":["strategy"],"to. Going":["to"],"to. I":["suppose","don't"],"to. Pretty":["sure"],"to. With":["good"],"to. You'll":["find"],"to. `verse":["a"],"to. you":["should"],"to/from int.":["You"],"to/from strings":["bring"],"to: ```[(\"a\",":["2),"],"to? I":["don't"],"toAscList before":["you"],"toAscList function.":["Also"],"toAscList to":["express"],"toAscList. Nice":["work!"],"toBinary =":["mapM"],"toDNA 'A'":["="],"toDNA 'C'":["="],"toDNA 'G'":["="],"toDNA 'T'":["="],"toDNA ::":["Char"],"toDecimal \"130\"":["="],"toDecimal \"1a0\"":["=0"],"toDecimal \"carrot1\"":["`"],"toEnum $":["x"],"toEnum (at":["least"],"toEnum [0..7]`":["instead"],"toEnum a":["total"],"toEnum but":["I"],"toEnum, so":["why"],"toList (Node":["l"],"toList (SnocList":["xs)"],"toList (reverseLinkedList":["$"],"toList ::":["Node"],"toList for":["free.","free,"],"toList however":["if"],"toList if":["it"],"toList l":["++"],"toList m,":["letter"],"toList may":["be"],"toList to":["exported"],"toList` instead":["of"],"toList`, as":["you"],"toLower $":["string)`"],"toLower &&&":["const"],"toLower .":["filter","replace"],"toLower a```":["is"],"toLower anagram":["}"],"toLower and":["replace","sorting"],"toLower are":["superfluous."],"toLower in":["the"],"toLower isn't":["calculated"],"toLower le,":["s))`"],"toLower letter`":["are"],"toLower s)`":["is"],"toLower s1`":["and"],"toLower w)`":["is"],"toLower w)`,":["either"],"toLower w.":["I"],"toLower w`":["even"],"toLower word)`,":["although"],"toLower word1`":["be"],"toLower word;":["a"],"toLower word`":["and","and","will"],"toLower x":["in"],"toLower x`":["and","do"],"toLower xs`":["and"],"toLower xs```":["twice"],"toLower' b`.":["That's"],"toLower' s)":["&&"],"toLower' x":["and","will"],"toLower) --":["w/o"],"toLower) .":["wordsBy"],"toLower) w)`,":["pulling"],"toLower) w`":["could"],"toLower) ys`.":["The"],"toLower))` using":["`first`"],"toLower)` aren't":["necessary,"],"toLower)` or":["`delete"],"toLower)` over":["it?"],"toLower)` since":["`(,)"],"toLower)` using":["sweet"],"toLower)`, although":["I'm"],"toLowerStr)`. I":["would"],"toLower` (backticks":["were"],"toLower` ,":["but"],"toLower` =":["`flip"],"toLower` and":["then","`sort`"],"toLower` are":["not","superfluous.","superfluous"],"toLower` aren't":["necessary,"],"toLower` before":["the"],"toLower` can":["be"],"toLower` entirely":["out"],"toLower` equivalent":["to"],"toLower` first":["and"],"toLower` into":["its","its","its","its"],"toLower` is":["computed","just"],"toLower` its":["own"],"toLower` out":["into"],"toLower` to":["be","the"],"toLower`, but":["that's"],"toLower`. I":["guess"],"toLower`. It":["might"],"toLower``` must":["evaluate"],"toLower``` the":["initial"],"toMap looks":["unnecessary"],"toRN (numeral,":["value)"],"toRNA ('T':xs)":["="],"toRNA (x:xs)":["=","="],"toRNA ::":["String","String","String","String","String","String","DNA","String","[DNABase]","[Nucleotide]"],"toRNA =":["map","map","fmap","map","map","map","map","map","map","map","map","map","map","map","map","map","map","map"],"toRNA []":["=","="],"toRNA a":["partial"],"toRNA from":["the","first"],"toRNA function":["will"],"toRNA function.":["I"],"toRNA in":["point","pointfree"],"toRNA it's":["acceptable"],"toRNA should":["have"],"toRNA to":["point"],"toRNA xs":["="],"toRNA? I":["tried"],"toRNAc ::":["DNABase"],"toRNAc because,":["of"],"toRNAc will":["have"],"toUpper (take":["1"],"toUpper char":["=="],"toUpper k````":["?"],"toUpper letter,":["score)"],"toUpper letter`":["(with"],"toUpper onlyAlpha`,":["`strip"],"toUpper return":["for"],"toUpper s":["==","=="],"toUpper s`":["could"],"toUpper str)`":["is"],"toUpper str)`.":[":)"],"toUpper txt`":["really"],"toUpper ws`":["is"],"toUpper, isAlpha,":["any"],"toUpper. If":["you"],"toUpper` and":["dodge"],"toUpper` is":["easier"],"toWeights (x:xs)":["="],"toWeights []":["="],"to] would've":["helped."],"to]` is":["much"],"to]` which":["is"],"to]` will":["allow"],"to]`, `map`":["and"],"to]`, but":["everything"],"to]`. For":["example:"],"to` School`.":["The"],"to` just":["like"],"to` responseFor`.":["That"],"toast\"```. That's":["not"],"today on":["how"],"today, but":["it"],"together (`++`":["works"],"together (and":["if"],"together -":["don't"],"together from":["such"],"together half":["from"],"together in":["`x:xs`,"],"together since":["nested"],"together so":["that"],"together this":["is"],"together to":["avoid"],"together until":["necessary"],"together with":["the","B8"],"together you":["get"],"together, although":["there's"],"together, consider":["the"],"together, or":["even"],"together, so":["you"],"together, they":["should"],"together, we":["still"],"together. Any":["suggestions"],"together. For":["example"],"together. Looks":["great!"],"together? There":["were"],"token $":["phrase"],"token ::":["String"],"token =":["words"],"token list":["slightly)."],"tokenization code.":["Consider"],"tokenization easy,":["this"],"tokenization), I":["left"],"tokenization, you'd":["want"],"tokenize the":["input."],"tokenize with":["Data.List.Split's"],"tokens that":["should"],"told me":["about","that","about","in","that"],"tolerant of":["`undefined`s"],"tomorrow morning":["to"],"tomorrow. For":["the"],"ton better":["to"],"ton from":["you."],"ton of":["sense,","++","other","`++`.","memory"],"tonight to":["really"],"tons beef,":["1234"],"tons of":["time)."],"too \"complicated\"":["for"],"too (in":["`anagramsFor`)!"],"too -":["for"],"too --":["you"],"too :)":["this"],"too and":["just"],"too arcane":["for"],"too bad":["`toRNA`","in"],"too bad.":["The"],"too basic.":["I"],"too big":["from","you'll","of"],"too broad.":["If"],"too caught":["up"],"too clever,":["but"],"too complex":["to",":)"],"too complex,":["you"],"too complicated":["and","for","implementation"],"too complicated,":["e.g."],"too complicated.":["How"],"too concerned":["about","about"],"too confident":["of"],"too confusing":["though"],"too cryptic":["and"],"too cute":["for"],"too cutesy":[":)"],"too deeply":["(depending"],"too difficult":["for"],"too drowsy":["to"],"too easy":["to","to"],"too efficient,":["as"],"too familiar":["with"],"too far":["but","and","on"],"too few.":["In"],"too generic":["or"],"too happy":["with"],"too hard":["about","to","to","to"],"too important":["either"],"too important.":["I'm"],"too lazy":["to","at"],"too long":["on"],"too long.":["But"],"too many":["type","symbols","times","thunks","new","spacers","workarounds."],"too much":["into","since","--","time","!","braces,","effort.","of","further","repetition,","reason","about","difficulty.","of","about","flips.","of","of","of","hardcoding.","comments","going","unnecessary","worse","trouble","here)"],"too obscure":["but"],"too of":["course!"],"too often":["we"],"too old":["to"],"too quickly,":["it's"],"too specialized":["for"],"too specific":["to"],"too specific,":["but"],"too subtle.":["It's"],"too think":["this"],"too tried":["the"],"too trivial":["compared"],"too ultimate,":["then"],"too uninteresting":["to"],"too unwieldy":["as"],"too used":["to"],"too verbose":["but","for"],"too wordy":["it"],"too), but":["any","it's"],"too, I":["seem"],"too, `sequence`":["is"],"too, although":["they're"],"too, as":["there"],"too, but":["I","I","I","that"],"too, by":["the"],"too, for":["what"],"too, of":["course)."],"too, run":["`:set"],"too, search":["for"],"too, since":["you"],"too, so":["that","maybe"],"too, they're":["not"],"too, though":["I"],"too, to":["avoid"],"too, try":["`:browse"],"too, you":["could"],"too. (The":["two"],"too. I":["would"],"too. If":["`s`"],"too. My":["preference"],"too. This":["solution"],"took a":["`Robot`","slightly","different","look","more","(very)"],"took advantage":["of"],"took for":["me"],"took me":["a","more","a","a","quite","a","to","a","a"],"took out":["the"],"took that":["out"],"took the":["time","shortest","time","easy"],"took them":["out"],"took too":["long"],"took your":["advice","suggestions,","suggestions"],"tool and":["as"],"tool called":["[hlint](http://community.haskell.org/~ndm/hlint/)."],"tool doesn't":["update"],"tool for":["benchmarking"],"tool, it":["can"],"tools that":["would"],"top (`zTop`":["here)."],"top concern":["this"],"top down":["is"],"top if":["you"],"top is":["\"containers-0.5.0.0\".","importing,"],"top level":["functions.","leads","functions,","definitions","definition.","function","and","functions","functions","definition.","definitions,","of","definitions,","of","definitions.","of","of","definitions","bindings","function","of","definitions","functions","functions","functions.","functions","definition,","definitions.","definition"],"top level,":["instead","it","currently","because"],"top of":["your","the","the","the"],"top then":["it"],"top to":["bottom","bottom."],"top were":["checked"],"top with":["helper"],"top, then":["you"],"top-level `anagramsFor`.":["Since"],"top-level `f'`":["that"],"top-level `wordCount`":["point"],"top-level based":["on"],"top-level binding":["(in","signature"],"top-level bindings":["should","should","will","should","are","should","have","that","should","should","should","to","exist,","should","should"],"top-level bindings,":["and","they"],"top-level bindings.":["hlint","To","Bindings"],"top-level declarations":["should"],"top-level definition":["I","and"],"top-level definition,":["I","since"],"top-level definitions":["into","a"],"top-level function":["at","it","of","it","that"],"top-level function,":["I","but","you","and"],"top-level function.":["There's","If"],"top-level functions":["unless","here","and","should","(exported","in","you","should","while","to"],"top-level functions.":["If","You"],"top-level in":["a"],"top-level scope":["for","and"],"top-level signature":["since"],"top-level signatures":["are"],"top-level so":["it"],"top-level stuff":["in"],"top-level unless":["it's"],"top-level, `defaultParts`":["and"],"top-level. Everything":["else"],"top-right and":["then","then"],"top. Basically":["the"],"top. I":["guess"],"top. That":["way"],"topic I'd":["suggest"],"topic of":["concurrency"],"topic. It's":["still"],"tops, will":["cleanup"],"tortuous than":["last"],"tossed the":["pointfree"],"total (34":["if"],"total =":["sum"],"total because":["it"],"total before":["I"],"total can":["be"],"total function":["for","would","like","though.","if"],"total function)":["if"],"total function).":["Map"],"total function,":["as","so","it"],"total function.":["(You"],"total function?":["do"],"total functions":["when","when"],"total if":["at"],"total length":["of"],"total maps":["as"],"total n00b":["with"],"total overkill":["for"],"total sense":["to"],"total so":["that"],"total without":["building"],"total, because":["isSilence"],"total, if":["I"],"total, like":["you"],"total, so":["if","it"],"total, why":["not"],"totally abandoned":["the"],"totally acceptable,":["just"],"totally agree":["with","on"],"totally an":["overkill"],"totally appropriate":["for"],"totally different":["abstractions.","function."],"totally down,":["but"],"totally fine":["to"],"totally fine.":["(In"],"totally forgot":["about","about","about"],"totally gratuitous.":["I"],"totally grok":["monads"],"totally lost":["myself"],"totally missed":["the","that.","an"],"totally necessary":["since"],"totally pointfree":["it:","if"],"totally subjective":["style"],"totally sure":["how"],"totally unintuitive":["names,"],"totally unnecessary":["as"],"totally up":["to"],"totally worth":["it."],"touching the":["identifier."],"tough nut":["to"],"toward keeping":["the"],"toward the":["top","bottom"],"towards better":["readability."],"towards difference,":["so"],"towards implementing":["this"],"towards infinity":["is"],"towards it,":["@arlie."],"towards reusing":["`count`,"],"towards simple":["pattern"],"towards such":["language"],"towards that":["(assuming"],"towards the":["Haskell"],"toy problems":["that"],"toying with":["a"],"to…\", and":["I"],"trace \"calculating\"":["$"],"trace \"sort":["w\""],"trace is":["not"],"trace on":["`scoreWord`,"],"trace things":["in"],"trace through":["it"],"track (I":["think!)"],"track additions":["for"],"track here.":["I"],"track of":["the","the","where"],"track one":["variable"],"track to":["coming","a"],"track where":["that"],"track? sorry":["about"],"trade off":["to","between"],"trade-off I'm":["just"],"trade-off that":["I"],"trade-offs considered.":[":)"],"traded out":["for"],"tradeoff in":["readability,"],"tradeoff is":["that","totally"],"tradeoff no":["longer"],"tradeoff. (Unless":["you're"],"tradeoffs involved":["in"],"tradeoffs with":["pattern"],"traditional imperative":["deque"],"traditional solution":["to"],"trail back":["to"],"trailing \\n":["on"],"trailing comma":["typo."],"trailing newline":["after"],"trailing newline,":["but","so"],"trailing space":["in"],"trailing space?":["Applying"],"trailing white":["space."],"trailing/leading backslashes":["do"],"tranks @rosendo.":["I"],"trans x":["|"],"transaction and":["then"],"transaction because":["it"],"transaction for":["`incrementBalance`"],"transaction in":["the"],"transaction should":["be"],"transaction was":["somehow"],"transaction we":["always"],"transaction will":["be"],"transaction, however":["if"],"transactional memory,":["its"],"transactions -":["you"],"transactions can":["run"],"transactions work,":["that"],"transactions\" article":["of"],"transcribe 'T'":["=","="],"transcribe ::":["Char","DNA","Char"],"transcribe T":["="],"transcribe c":["=","="],"transcribe function":["isn't","to"],"transcribe if":["you"],"transcribe one":["character"],"transcribe see:":["http://en.wikipedia.org/wiki/Complementarity_(molecular_biology)"],"transcribe x":["="],"transcribeThymidineToUracil 'T'":["="],"transcribeThymidineToUracil ::":["Char"],"transcribeThymidineToUracil nucleotide":["="],"transcribe`. The":["rest"],"transcribing the":["*rules*"],"transcription and":["`map`"],"transcription works.":["The"],"transform 'T'":["="],"transform `add":["g"],"transform and":["equality"],"transform as":["a"],"transform c":["="],"transform could":["also"],"transform instead":["of"],"transform it":["using"],"transform m":["="],"transform operation":["in"],"transform the":["whole"],"transform them":["to"],"transform would":["be"],"transform x":["="],"transform your":["data"],"transform, as":["it"],"transform, but":["this"],"transformThymadine 'T'":["="],"transformThymadine c":["="],"transformation along":["the"],"transformation directly":["on"],"transformation is":["also","also"],"transformation of":["a"],"transformation simply":["means"],"transformation to":["your","make"],"transformation, but":["with"],"transformation, where":["you"],"transformation. The":["biological"],"transformations (case":["normalization"],"transformations and":["converting"],"transformations by":["hand"],"transformations done":["to"],"transformations. Maybe":["an"],"transformed first":["element"],"transformed into":["something"],"transformed the":["lambda"],"transformed them,":["but"],"transformer to":["only"],"transformer will":["work"],"transformers. [Guard":["syntax](http://en.wikibooks.org/wiki/Haskell/Control_structures#if_and_guards_revisited)"],"transforming functions":["to"],"transforming the":["code","input"],"translate 'T'":["="],"translate a":["="],"translate an":["invalid"],"translate any":["Char"],"translate from":["`Response`"],"translate function":["into"],"translate it":["to"],"translate that":["to"],"translate words":["that"],"translateDNA 'T'":["="],"translateDNA nuc":["="],"translateDNA x":["="],"translateToRNA 'T'":["="],"translateToRNA ::":["Char"],"translateToRNA n":["="],"translate` would":["be"],"translate`. That's":["just"],"translated by":["the"],"translated it":["to"],"translated to":["a"],"translates into":["roughly"],"translates to":["the"],"translating individual":["nucleotides"],"translation of":["my","a","ebnf"],"translations are":["a"],"transparent than":["`shift"],"transpose .":["map","map"],"transpose seems":["not"],"transpose that's":["super"],"transpose, not":["sure"],"transposeVs (V.map":["V.tail"],"transpose` is":["really"],"trap in":["this","refactoring"],"trap, you":["shouldn't"],"trash character":["should"],"traveresed by":["the"],"traversable usage":["here."],"traversal in":["a"],"traversal issue":["but"],"traversal of":["the"],"traversal rather":["than"],"traversal. And":["since"],"traversals (one":["for"],"traversals vs":["one"],"traverse and":["consume","allocate"],"traverse it":["only","four"],"traverse list":["only","multiple"],"traverse only":["once."],"traverse our":["list"],"traverse sequence":["once"],"traverse structure":["a"],"traverse the":["strand","whole","sequence","whole","entire","input","entire","input","strand","whole","whole","entire","whole","whole","entire","entire","entire","list","input"],"traversed .":["_2"],"traversed and":["it"],"traversed before":["any"],"traversed by":["the"],"traversed first,":["creating"],"traversed only":["once,"],"traversed to":["build"],"traversed. A":["convenient"],"traverses a":["list"],"traverses all":["the"],"traverses dna":["strand"],"traverses the":["list"],"traverses. But":["this"],"traversing the":["whole","input,","DNA","lookup","input"],"treat a":["number"],"treat all":["of","chars","that"],"treat invalid":["character"],"treat it":["like"],"treat multiline":["strings"],"treat non-alphabetic":["characters.","characters.","characters.","characters."],"treat them":["separately."],"treat this":["sort"],"treated as":["`otherwise`","a","valid."],"treated like":["spaces"],"treating incrementing":["a"],"treatment and":["act"],"treatment he":["has"],"treatment of":["each"],"treatment? Simply":["deleting"],"tree allow":["for"],"tree functions":["more"],"tree is":["required,"],"tree to":["have"],"tree without":["knowing"],"tree wrong":["or"],"tree, AFAIR":["all"],"tree, so":["that"],"tree. The":["alternative"],"trees and":["give","have"],"tremendous waste":["of"],"tri` as":["simply"],"triagonal matrices)":["but"],"trial division":["with"],"trial divisions.":["However,"],"trial-and-compiler-error and":["not"],"triangle that":["would"],"triangle whose":["number"],"triangle with":["sides","zero"],"trick allowes":["to"],"trick can":["be"],"trick either.":["`[1..3]"],"trick for":["isShouting","this"],"trick fromEnum":["into"],"trick here":["that","if","is"],"trick hidden":["inside:"],"trick in":["`lookupPlants`"],"trick is":["necessary.","to","that","to","to"],"trick of":["STM"],"trick others":["have"],"trick that":["you","many","some","I"],"trick there":["is"],"trick to":["make","make","the","reduce","solving","solve","make","`reverseLinkedList`","use"],"trick with":["mapping","randomRIO."],"trick you":["could","could"],"trick, I":["didn't"],"trick, and":["I'm"],"trick, but":["I've"],"trick, it":["opens"],"trick, or":["to"],"trick, took":["me"],"trick, you":["shouldn't"],"trick. I":["suppose"],"trick. Nice":["work"],"tricks I":["used"],"tricks that":["you"],"tricks), while":["you're"],"tricks. Its":["not"],"tricks. The":["GHC"],"tricky and":["has"],"tricky but":["`fmap"],"tricky part":["is"],"tricky since":["there's"],"tricky this":["way,"],"tricky to":["come","do","write"],"tricky!\", \"really":["tricky\"]]"],"tricky!\",\"really tricky\"]]":["@=?"],"tricky!\\\" \\\"really":["tricky\\\"\"","tricky\\\"\""],"tricky, not":["being"],"tricky. Here's":["the"],"tricky. I":["know"],"tried MonadLoops":["etc."],"tried `bit`":["in"],"tried `toDecimal'`":["one"],"tried a":["single","few"],"tried an":["approach"],"tried another":["pattern"],"tried both":["functions,"],"tried came":["as"],"tried creating":["a"],"tried doing":["that","that,"],"tried everything":["execpt"],"tried extracting":["a","`(n"],"tried first":["and"],"tried functions":["like"],"tried grouping":["your"],"tried in":["sequence,"],"tried is":["adding"],"tried it":["started","with","with","slightly","on"],"tried making":["isShouting"],"tried one":["after"],"tried reading":["for"],"tried searching":["hoogle"],"tried simplifying":["it."],"tried some":["stuff","different"],"tried something":["like"],"tried the":["recursive","method"],"tried tinkering":["with"],"tried to":["use","create","use","look","follow","use","simplify","make","use","do","implement","write","limit","limit","work","remove","implement","eliminate","do","bind","simplify","get","make","be","be","abstract","implement","refactor","find","rewrite","implement","install","use","import"],"tried using":["Vim","it","it,","`Either"],"tried very":["simple"],"tried with":["uncurry","splitPlaces."],"tried writing":["a"],"tried your":["code","code"],"tries different":["predicates/booleans."],"tries in":["C."],"tries ot":["perform"],"tries to":["execute","execute","execute","execute","execute","determine","evaluate"],"trigger silence!":["Most"],"trim function":["without"],"trim function,":["so"],"trim isn't":["really"],"trim the":["string."],"trim too.":["Thanks."],"trimNum into":["a"],"trimmed before":["processing."],"trimmed of":["leading"],"trimming all":["input."],"trinary, octal,":["or"],"tripled depending":["on"],"trippling extension":["correctly.."],"trivial String":["-\u003e"],"trivial case":["of"],"trivial compared":["to"],"trivial enough":["to"],"trivial in":["Ruby..."],"trivial pre-computations":["for"],"trivial that":["you"],"trivial things":[":)."],"trivial, but":["it's"],"trivial. There's":["a"],"trivial; I":["wonder"],"trivially perform":["an"],"troll problem":[";)"],"trouble (not":["that"],"trouble I":["suppose,"],"trouble for":["me."],"trouble in":["a"],"trouble of":["doing","looking","converting","converting"],"trouble than":["it's"],"trouble to":["have"],"trouble understanding":["it"],"trouble with":["the","the","it."],"trouble working":["out"],"trouble\" I":["mean"],"trouble, let's":["see..."],"trouble.** Can":["you"],"troubleshooting stuff":["until"],"troubleshooting, or":["should"],"true I":["don't"],"true because":["it"],"true for":["any"],"true in":["parralel"],"true meaning":["though"],"true that":["`letterSet`","`sorted`","I"],"true)\" seems":["natural,"],"true), to":["catch"],"true, `all":["isSpace`"],"true, if":["I"],"true, it":["would"],"true, mean":["`calculating`"],"true, returns":["the"],"true, so":["there"],"true, thanks":["for"],"true. But":["bringing"],"true. I":["guess"],"true. It":["didn't"],"truly did":["fuse"],"truly just":["replacing"],"truly random":["key"],"truly very":["impressed."],"trumps optimization":["every"],"truncate ...":["--"],"truncate, round`?":["The"],"try I":["get"],"try `:browse":["Prelude`."],"try `Data.Map`":["for"],"try `Data.Set`?":["Set"],"try `[begin,begin-1..end]`":["(is"],"try `last`":["for"],"try `permutations":["\"aaaaaaaaaaaab\"`"],"try `unlines`.":["Otherwise,"],"try a":["different","version","different","different"],"try an":["approach"],"try and":["do","write","fix","get","fix","write","use","make","use","refactor","remove","solve","use","grasp","rewrite","learn","remember","figure","fix","build"],"try building":["it"],"try check":["execution"],"try checking":["a"],"try different":["syntax,"],"try doing":["this","this","the"],"try for":["isSilence","the"],"try implementing":["that","this","this"],"try is":["not"],"try it":["and","out","again","out.","that"],"try making":["types"],"try moving":["the"],"try only":["odd"],"try out":["STM"],"try pattern":["matching"],"try re-implementing":["this"],"try reordering":["the"],"try rewriting":["`isAnagramOf`","it"],"try running":["_hlint_"],"try running:":["```anagramsFor"],"try searching":["for"],"try something":["like:","different"],"try specifying":["which"],"try start":["with:"],"try that":["out.","out","in","out"],"try the":["`any`","language","fold"],"try this":["without","in","one"],"try to":["do","use","find","use","minimize","refactor","keep","make","think","use","find","find","simplify","use","use","use","be","resolve","avoid","avoid","simplify","use","talk","do","improve","get","type","ignore","**change**","think","refactor.","roll","think","read","get","do","solve","do","upgrade","take","read","make","have","avoid","use","optimize","break","implement","illustrate","resend","restate","eliminate","think","use","simplify","find","reformat","only","give","solve","play","search","build","write","use","find","think","add","use","invest","make","some","run","make","minimize","generalize","improve,","do","use","undate","eliminate","do","find","investigate","use","use","use","use","understand","find","use","implement"],"try tomorrow.":["For"],"try using":["`replace`","`all`","`any`?","guards","`splitAt`","[`null`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:null)","`foldl'`.","`any`","`wordsBy`","`unlines`","Applicative","`sum`","`modifyMVar`","strict","`zipWith`","`unlines`"],"try very":["hard"],"try with":["`Data.List.Split`.","a","shifting"],"try wrapping":["this"],"try write":["`foldr`"],"try writing":["it"],"try/catch implementation":["is"],"try/catch you":["don't"],"tryParse x":["\u003c|\u003e"],"tryParse y)":["ops\u003c/pre\u003e"],"tryPutMVar on":["line"],"tryTrimFirstDigit and":["validateLength"],"trying hard":["to"],"trying it":["but"],"trying out.":["I"],"trying the":["obvious"],"trying to":["do","be","show","do","hint","write","be","remember","bind","define","figure","cleanly","concatenate","move","learn","do","achieve.","put","filter","do.","determine","stick","focus","learn","learn","use","write","infect","solve","slim","keep","get","catch","write","keep","calculate","make","stick","figure","make","figure","do,","store","figure","do","do.","generate","figure","pare","build","encode","implement","restate","split","optimize","figure","do","figure","do?","understand","find","use","use"],"trying. It":["seems"],"tthen go":["xs"],"tuple `insertWord":["w"],"tuple and":["`uncurry`","uncurry."],"tuple are":["strictly"],"tuple at":["all"],"tuple before":["the"],"tuple boxing":["&"],"tuple constructor":["and"],"tuple creation":["away.","when"],"tuple expansion":["(or"],"tuple for":["the","return."],"tuple in":["someone","WHNF?","a"],"tuple is":["contiguous","the","in"],"tuple section":["and","`(,","as"],"tuple section,":["but"],"tuple section:":["use"],"tuple will":["likely"],"tuple with":["`1`?","the"],"tuple won't":["be"],"tuple would":["also"],"tuple, but":["the"],"tuple, line":["14"],"tuple, sorts":["that,"],"tuples and":["just"],"tuples are":["likely"],"tuples aren't":["the"],"tuples before":["passing"],"tuples from":["strict"],"tuples maybe)":["instead"],"tuples up":["to"],"tuples, but":["the"],"tuples, not":["that"],"tuples, then":["sums"],"tuples, why":["not"],"tuples, you":["could"],"tuples. Not":["realising"],"tuples. Thanks":["for"],"tuples. With":["the"],"turn True":["into"],"turn `(&&)`":["from"],"turn `School`":["into"],"turn a":["character","function","boolean"],"turn is":["equivalent"],"turn it":["into","into"],"turn on":["-Wall","OverloadedStrings."],"turn out":["to"],"turn ugly":["(bit"],"turn your":["`not"],"turn, worrying":["about"],"turned on":["is"],"turned out":["to"],"turning in":["terms"],"turning the":["word"],"turns a":["`String`"],"turns into":["this:"],"turns out":["there","that","that","I","ok","to","I"],"tutorial which":["was"],"tvar)[1] the":["basic"],"tweak it":["at","for"],"tweaked what":["you"],"twice (worst":["case)"],"twice I":["would"],"twice as":["much","fast"],"twice for":["every","every"],"twice in":["all","that"],"twice to":["generate"],"twice vs":["calling"],"twice, but":["this","decided"],"twice, call":["`split`"],"twice, then":["using"],"twice, whereas":["it"],"twice. If":["you"],"twice. Really,":["you"],"twice. Using":["`Text`"],"twice. You":["should"],"twice... but":["I"],"twice: once":["qualified"],"twice? I":["think"],"twice? In":["this"],"twice? Makes":["it"],"twisol -":["I"],"twisol, I":["removed"],"twitter at":["the"],"two Data.Map":["symbols,"],"two IO":["Strings"],"two `filter`":["operations"],"two `splitAt`":["to"],"two `splitAt`'s":["in"],"two additional":["library"],"two and":["you"],"two are":["equivalent"],"two argument":["function"],"two arguments":["-","when","to"],"two arguments.":["The","So"],"two arrays.":["Otherwise"],"two atomic":["operations:"],"two back":["slashes"],"two backslashes":["you"],"two birds":["with"],"two blank":["lines"],"two branches":["could"],"two cases":["of"],"two cases.":["Your","I'm"],"two changes":["for"],"two clauses":["in"],"two conditions":["without","were"],"two deep'":["so"],"two different":["modules,","strings","cases","values.","warnings"],"two dimentional":["data?"],"two elements":["anyway.)","long"],"two equations":["using"],"two equations.":["One"],"two extra":["iterations"],"two fields":["for"],"two filters":["with","will"],"two for":["reference"],"two from":["Data.Char"],"two functions":["for","to","that"],"two functions,":["you"],"two functions:":["display"],"two good":["ways"],"two guards":["in","that","a","is"],"two guards,":["I"],"two implementations.":["It's"],"two import":["Data.Char."],"two in":["there?"],"two inputs":["you"],"two inputs,":["a"],"two instances":["of"],"two into":["one?"],"two issues":["here"],"two keys":["together"],"two kids":["in"],"two letters,":["one"],"two lines":["using","after","nicer.","of"],"two lines)":["only"],"two lines.":["However","Here's"],"two lists":["if"],"two lists.":["This"],"two maps":["together"],"two methods":["in"],"two neighbors":["will"],"two node":["case!"],"two nucleotides":["and"],"two numbers":["from","by"],"two on":["line"],"two operations":["yourself,"],"two options.":["I"],"two other":["ways"],"two parameters":["are"],"two passes":["of","to"],"two passes.":["You"],"two people":["with","with"],"two point-free":["(which"],"two predicates":["in","out"],"two reasons":["for"],"two regions":["and"],"two reverses.":["That's"],"two rules":["aren't","aren't"],"two school":["types"],"two seconds":["to"],"two separate":["bindings"],"two space":["leaks","indent;"],"two spaces":["(you","not","rather","instead"],"two strings":["which","and","and","`a`"],"two strings,":["but"],"two suggestions,":["I've"],"two supporting":["functions"],"two terms":["is"],"two terms,":["why"],"two tests.":["Apparently"],"two that":["come"],"two things":["are","as"],"two threads":["(a)","A","A"],"two traversals":["(one","vs"],"two tricks":["I"],"two two-argument":["functions"],"two uppercase":["letters,"],"two uses":["of"],"two values":["for"],"two versions":["because","you've","of","of"],"two ways":["to","that"],"two weeks":["to"],"two weird":["signatures,"],"two were":["not"],"two will":["be"],"two words":["in","are"],"two words,":["returns"],"two! A":["solution"],"two). Take":["a"],"two, but":["marginally"],"two, due":["to"],"two, which":["cleans"],"two-argument functions":["in","you"],"two-argument version":["of"],"two. Just":["like"],"two? You":["may"],"txt ==":["'?'`"],"txt` really":["the"],"tyed data":["structure,","structure,"],"tying `translateNucleotide`":["more"],"tying i.e.":["recursive"],"tying myself":["up"],"tying the":["knot","knot"],"type (Data.Map.Base.Map).":["It's"],"type *String":["-&gt;"],"type -":["but"],"type I.e.:":["`splitPlaces"],"type Integer'":["(Integral"],"type String":["=","-&gt;"],"type Uniform":["is"],"type `(.).(.)":["::"],"type `::":["Integer`"],"type `Char":["-\u003e","-\u003e"],"type `EitherT":["String"],"type `IORef'":["with"],"type `Int":["-\u003e"],"type `Map.Map`":["all"],"type `Maybe":["(N"],"type `Response`":["and"],"type `School`":["-&gt;"],"type `State":["MyState"],"type `String":["-\u003e"],"type `String`":["-&gt;","over","you"],"type `Uniform`":["is"],"type `[String]`":["(it"],"type `m":["a`"],"type `not":["(isLetter"],"type a":["must","is"],"type alias":["for","that","for","for","for"],"type alias)":["and"],"type aliases":["for"],"type and":["then","it","is","then"],"type annotation":["off","for","to","I","avoids","to"],"type annotations":["were","pretty"],"type annotations,":["but"],"type as":["an","`Node","well.","Data.Map,"],"type b":["do"],"type before":["using"],"type but":["the","always","guarantees"],"type buys":["you"],"type by":["the"],"type came":["from"],"type check,":["so"],"type checking":["stuff."],"type class":["instances","as"],"type classes,":["an"],"type constructor":["`Map`"],"type constructors":["in"],"type conversion":["dubiously","in"],"type declaration":["syntax"],"type declaration.)":["Although"],"type declarations":["to","I","for","for"],"type definition":["Char"],"type doesn't":["escape","logically"],"type driven":["dude"],"type encode":["Responses"],"type encoded":["my"],"type encoding.":["Seems"],"type errors.":["Is"],"type even":["a"],"type for":["the","statements.","sqrt","the","the","the","the","`(^)`","`count`"],"type here":["is"],"type if":["the"],"type implementing":["`Show`."],"type in":["`toRNA`'s","the","addition"],"type inferencer":["work"],"type instead":["of","of","of","of","of"],"type into":["another"],"type is":["a","wrong.","the","the","the","the","exactly","exactly","shared.","overkill","exactly","exactly","the","better.","used."],"type isn't":["the"],"type it":["should","automatically.."],"type it's":["common","aliasing"],"type itself":["is","and"],"type just":["like","to"],"type level":["naturals"],"type level.":["The"],"type like":["this"],"type looks":["like"],"type makes":["sense"],"type mismatch":["errors."],"type name":["in"],"type of":["prompt,","response.","that","response,","`sqrt`","response.","`x`","monad","`all`","assignment","the","BankAccount","problem?","the","Robot,","`^`","the","daysInGigasecond","nucleotide,","x","`acc`"],"type out":["and"],"type outside":["the"],"type parameter?":["As"],"type parameters.":["But"],"type represent":["the"],"type safe,":["but"],"type safety":["now,","(at"],"type safety,":["but"],"type sections)":["monad."],"type separately,":["although"],"type sig":["for"],"type sig...":["I"],"type signature":["of","should","in","and","and","for","is","for","aids","in","can","of","for","on","you'd","here","for","or","(like","in","(`responseFor","(`responseFor","to","since","since","of","for","for","to","since","`(b","since","here","for","for","and","`return","from","can","(and","on","is","to","`IORef","in","of","since","in","right","above","in","of","nit.","right"],"type signature!),":["and"],"type signature,":["but","use","that's","but","since","you","and","and","the"],"type signature.":["Otherwise","You","You","Otherwise","Other"],"type signature:":["main","main"],"type signatures":["for","for","from","for","on","for","on","for","being","on","from","for","within","to","to","(`Map`,","is","for","for","is","for","are","for",":p","for","(not","in","could","for","(e.g.","for","(in","on","as","(which","to","to","explicitly,","for","like"],"type signatures)":["of"],"type signatures,":["you","e.g.","but","you","not","`::`","but","including","and"],"type signatures.":["Since","it","It","It","Thanks!","The","This","I","Everything","This","If","Also,"],"type sigs":["looks"],"type since":["I"],"type so":["that"],"type spec":["on","for"],"type specs":["for"],"type such":["as"],"type suggested":["by"],"type synonym":["(`type`)","and","for","for","here"],"type synonym,":["I"],"type synonyms":["now"],"type system":["(and","or","is","more","to","more.","and"],"type system,":["but","you'd"],"type than":["`String`"],"type that":["`Data.Map`","fits","really","has","solves","you","only","is"],"type that's":["an"],"type them":["out."],"type then":["you"],"type to":["carry","make","represent","pass","encapsulate","define","be","Nucleotide"],"type uses":["```String```s"],"type was":["readed"],"type when":["you"],"type while":["selectively"],"type will":["be"],"type without":["any"],"type would":["lose"],"type you":["would","see:"],"type you're":["returning","required"],"type's `==`":["needs"],"type* for":["the"],"type, I":["don't"],"type, after":["all,"],"type, but":["I","Data.Map.Strict"],"type, different":["strictness"],"type, is":["that"],"type, less":["\"clutter\")"],"type, so":["I"],"type, such":["as"],"type, using":["Data.Vector.`"],"type, you":["need"],"type, your":["code"],"type-inferencer to":["do"],"type-safety (only":["allowing"],"type. (You":["probably"],"type. And":["along"],"type. I":["wanted","guess"],"type. LYaH":["covers"],"type. One":["reason"],"type. That's":["idea"],"type. This":["would","means"],"typeclass Num.":["This"],"typeclass `HasDigits`":["to"],"typeclass and":["the"],"typeclass approach":["I"],"typeclass for":["String","this","this"],"typeclass in":["order"],"typeclass instance":["for"],"typeclass instances":["and"],"typeclass or":["just"],"typeclass so":["you"],"typeclass that":["gets","would","does"],"typeclass to":["convert"],"typeclass tricks":["that"],"typeclass was":["totally"],"typeclass will":["still"],"typeclass you":["can"],"typeclass, I've":["never"],"typeclass. In":["the"],"typeclass. The":["show"],"typeclass. There":["are"],"typeclasses are":["implemented"],"typeclasses at":["all."],"typeclasses because":["of"],"typeclasses for":["this"],"typeclasses work":["on"],"typeclasses, functions":["and"],"typeclasses, not":["sure"],"typeclasses. Although":["in"],"typeclassopedia for":["the"],"typed `Robot":["-\u003e"],"typed in":["Haskell"],"typed language.":[":P."],"types (besides":["the"],"types (but":["just"],"types (that's":["the"],"types (they":["are"],"types I":["used"],"types and":["functions","using","the","couldn't"],"types are":["wrong","constructed","easy","simply","just"],"types as":["well."],"types at":["all."],"types btw,":["would"],"types explicitly":["spelled"],"types for":["DNA","grades"],"types in":["your"],"types instead":["of"],"types it":["is"],"types like":["X,"],"types of":["`either`","whitespace","the","nucleotides.","characters"],"types simply":["aren't"],"types so":["now"],"types that":["are"],"types there.":["You"],"types to":["avoid","top-level"],"types will":["help"],"types wouldn't":["match"],"types, after":["all."],"types, doesn't":["it?"],"types, leaving":["this"],"types, so":["toRNAc"],"types. Can't":["say"],"types. In":["a"],"types. Looks":["great!"],"types. Nonetheless,":["the"],"types. The":["idiomatic"],"types. This":["is"],"typical Haskell":["style"],"typical example:":["http://hackage.haskell.org/package/containers-0.5.3.1/docs/src/Data-Map-Base.html#lookup"],"typical fold":["situation,"],"typical for":["people","Haskell"],"typical implementation":["of"],"typical in":["Haskell","Haskell."],"typical module":["definition"],"typical name":["for"],"typical to":["break","use","do","do","keep","export","see"],"typical usage":["of"],"typically Haskellers":["prefer"],"typically an":["implementation"],"typically called":["a"],"typically defined":["in"],"typically done":["here"],"typically done,":["because"],"typically get":["parentheses"],"typically result":["in"],"typically something":["like"],"typically there":["would"],"typically use":["unnecessary","the"],"typically used":["instead"],"typically written":["as","in"],"typing are":["very"],"typo. I":["didn't"],"typo... and":["doesn't"],"typos in":["this"],"ub 1.320440":["us,"],"ub 1.326522":["us,"],"ub 10.14804":["us,"],"ub 15.02281":["ns,"],"ub 218.3281":["ns,"],"ub 237.6315":["ns,"],"ub 505.8640":["ns,"],"ub 567.9838":["ns,"],"ub 7.219372":["us,"],"ub 7.724408":["us,"],"ub 7.994604":["us,"],"ub 79.17362":["ns,"],"uber coder,":["I"],"ubuntu 12":["doesn't"],"ubuntu to":["get"],"uglier because":["I"],"ugly (bit":["arithmetic,"],"ugly and":["in","certainly","unneeded.","hard","if","inneficient."],"ugly as":["sin"],"ugly but":["I"],"ugly code":["though"],"ugly code.":["I'm"],"ugly due":["to"],"ugly if,":["and"],"ugly it":["looks"],"ugly like":["that"],"ugly looking":["``WordCount"],"ugly regex":["stuff."],"ugly right":["now"],"ugly solution,":["but"],"ugly thing":["could"],"ugly to":["me."],"ugly without":["a"],"ugly, but":["I"],"ugly, you":["can"],"ugly-looking \"nucleotideCounts":["::"],"ugly. Any":["better"],"ugly. But":["I"],"ugly. I":["also","had"],"ugly. So":["which"],"ugly.. seems":["it's"],"ugly... functions":["like"],"ugly... or":["at"],"ugly? You":["can"],"uh, type":["buys"],"ultimate hint":["(sorry"],"ultimate, then":["you"],"ultimately I":["think"],"ultimately compile":["down"],"ultimately deemed":["too"],"ultimately is":["pretty"],"un-satisfyable condition":["(e.g."],"unBankAccount ::":["MVar"],"unDeque ::":["TMVar"],"unNucleotide ::":["Char"],"unSchool ::":["M.Map","Map","Map"],"unSchool) .":["findWithDefault"],"unType ::":["Char}","Type"],"unable to":["do","come","figure"],"unambiguous even":["if"],"unary. I":["wish"],"unaware of":["the"],"unboxing. `filter":["(=="],"uncertain about":["in","the"],"unchanged, but":["I"],"unchanged. True":["type-safety"],"uncharted territory":["as"],"uncommon case":["isn't"],"uncommon for":["me"],"uncommon in":["Haskell"],"uncommon operator":["makes"],"uncommon to":["want","also","use"],"uncommon type.":["And"],"unconstrained exporting;":["I'm"],"unconverting from":["the"],"uncurry (&&)":["(not"],"uncurry (&amp;&amp;)":["."],"uncurry (***)":[".:"],"uncurry (/=)":["as"],"uncurry PhoneNumber":["$"],"uncurry have":["a"],"uncurry popped":["up,"],"undefined \"\"":["=="],"undefined)]) !":["'a'","'a'"],"undefined]) ==":["1`."],"undefined` to":["get"],"under \"alternative":["and"],"under `Map`,":["and"],"under `toRNA`":["in"],"under `where`":["and"],"under a":["single","`where`","`where`","`where`"],"under any":["circumstance,"],"under recent":["ghc,"],"under the":["impression","hood","`where`","where","hood:","covers.","where","where","impression","hood","impression","impression","same","main"],"under what":["circumstances"],"under your":["responseFor"],"underlying concepts":["simple"],"underlying order":["of"],"underlying representation":["to"],"underneath the":["module"],"underscore can":["also"],"underscore if":["it's"],"underscore or":["prepend"],"underscore_separated, since":["this"],"underscore_separated, which":["makes"],"underscores are":["not"],"understand \"show\"":["to"],"understand (hence":["the"],"understand -":["are"],"understand Haskell":["at"],"understand Haskell's":["arrays"],"understand `const`":["(sort"],"understand a":["little"],"understand all":["the"],"understand and":["can","assimilate"],"understand at":["a","first"],"understand both":["forms"],"understand correctly":["given"],"understand expression":["just"],"understand how":["to","Haskell's","a","`[1..dv]","the","the","thunks","`anaGramOfX`","things","it","Map.fromListWith,"],"understand if":["that","it's","all"],"understand it":["to"],"understand it),":["and"],"understand it...":["For"],"understand much":["about"],"understand now,":["that's"],"understand second":["question."],"understand so":["seemed"],"understand strictness.":["Although"],"understand test":["code."],"understand that":["than","constraint.","using","optimization","using","the","guards,","if","`fmap`","you're"],"understand the":["code","question?","code","'space","Random","eta","song","considerations","output","theory","issues","implications","issue"],"understand then":["why"],"understand these":["issues"],"understand this":["trick","exercise","better."],"understand what":["you","the","it's","was","was","you're","`ignore","you","lines","exactly"],"understand what's":["going","going","happening","going"],"understand whether":["or"],"understand why":["this","the","foldl","it's","uracil","this"],"understand you":["correctly"],"understand you...":["but"],"understand your":["concern","original","point","reasoning"],"understand, I'd":["love"],"understand, but":["`normalizeWords`"],"understand. Because":["placement"],"understand. But":["as"],"understand. Could":["you"],"understand. Of":["course"],"understand. Please":["delete"],"understand. They":["follow"],"understand. You're":["right"],"understandability over":["terseness."],"understandable a":["possible"],"understandable) approach":["versus"],"understandable, at":["least"],"understanding Monads":["goes,"],"understanding from":["these"],"understanding is":["that","that"],"understanding it":["correctly?","either"],"understanding of":["that,","IO","the","the","what","monads","the","Haskell,","how","what's","how","solution"],"understanding the":["problem","abstraction","trail"],"understanding why":["some"],"understanding with":["garden."],"understood :D.":["but"],"understood doubling":["or"],"understood from":["your"],"understood how":["your"],"understood stream":["fusion"],"understood that":["way."],"understood this":["one"],"understood when":["reading"],"unecessary in":["this"],"unequal elements,":["so"],"unequipped to":["find"],"unescape value":["or"],"unevaluated and":["it"],"unevaluated arguments),":["so"],"unevaluated expression":["that"],"unevaluated thunk":["inside"],"unevaluated thunks":["and","that","that"],"unevaluated thunks.":["Using"],"unevaluated, and":["very"],"unexpected hiatus,":["I"],"unexpected input,":["versus"],"unexpectedly if":["the"],"unfamiliar things":["stand"],"unfamiliar with":["`newtype`"],"unfolding) else":["we'd","we'd"],"unfoldr (\\a":["-\u003e"],"unfoldr be":["`::"],"unfortunate that":["the"],"unfortunately multiset":["doesn't"],"unfortunately the":["default"],"unfortunately to":["get"],"unfortunately, I'll":["probably"],"unfortunately. Using":["explicit"],"unhappy with":["my"],"unhelpful from":["a"],"uni and":["sometimes"],"unicode I'm":["quite"],"unicode code":["points,"],"unicode in":["less"],"unicode, which":["gets"],"unicode. Two":["(or"],"uniform way":["(in"],"unify ist":["so"],"unify the":["two","two","checks"],"unify x":["y`"],"unify y`,":["but"],"unify) x":["y``,"],"unimportant style":["note"],"unimportant: if":["you"],"unindented two":["spaces"],"uninteresting queries":["beginning"],"uninteresting to":["solve"],"uninteresting, so":["I"],"unintuitive names,":["doesn't"],"unintuitive than":["your"],"unintuitive to":["me."],"union and":["fromListWith?"],"union or":["to"],"union to":["achieve"],"union together,":["consider"],"union will":["work"],"union with":["`baseMap`."],"union-find data":["structure."],"union. Even":["if"],"unique items":["in"],"unique student":["identifier"],"unique words":["in"],"unique words),":["whatever"],"unique, not":["different"],"unique. I":["new"],"unique... Strugging":["with"],"uniqueness of":["the"],"uniques we":["have"],"unit (`MVar":["()`))"],"unit called":["Data.String.Utils,"],"unit test":["requires."],"unit tests":["pass","for","would","don't","require"],"unit tests,":["though.","or"],"unit to":["me,"],"unittests, but":["I"],"universally suboptimal":["since"],"universe in":["which"],"unix `time`":["command"],"unless (null":["w)"],"unless I'm":["mistaken?","reading"],"unless any":["element"],"unless anybody":["has"],"unless instruction":["restrict"],"unless it's":["obvious.","really","exported","required","too"],"unless lazines":["is"],"unless necessary,":["but"],"unless necessary.":["For"],"unless smth":["will"],"unless specialization":["is"],"unless the":["input","final","pattern","spec"],"unless there's":["a","something","some"],"unless they":["are"],"unless we're":["really,"],"unless you":["modified","are","have","can","can","want","are","want","wait"],"unless you're":["explicitly","doing","using","sure","coming"],"unless you've":["reduced"],"unlike `isAlpha`.":["It"],"unlike if":["I"],"unlike my":["previous"],"unlikely event":["that"],"unlikely to":["have"],"unlikely). Almost":["all"],"unlined for":["merging"],"unlines $":["map","map"],"unlines (l:ls)":["="],"unlines ::":["[String]"],"unlines []":["="],"unlines [firstCouplet,":["secondCouplet]`"],"unlines and":["map"],"unlines functionality":["to"],"unlines in":["verse"],"unlines is":["defined"],"unlines it":["will"],"unlines which":["tacks"],"unlock the":["next"],"unlock, but":["you"],"unneccessarily complicated.":["it"],"unnecessarily complicated":["and"],"unnecessarily inside":["the"],"unnecessarily when":["writing"],"unnecessary (and":["don't"],"unnecessary (it's":["duplicate"],"unnecessary `Just":["_`/`Nothing`"],"unnecessary `T.pack`":["in"],"unnecessary `fromListWith`":["-"],"unnecessary anagrams":["generated"],"unnecessary and":["problematic","here's"],"unnecessary as":["long","well,"],"unnecessary complicated":["but"],"unnecessary complicated,":["try"],"unnecessary complicated.":["You"],"unnecessary computation":["and"],"unnecessary here.":["I'm"],"unnecessary import,":["take"],"unnecessary in":["this"],"unnecessary introduction":["of"],"unnecessary parentheses":["in"],"unnecessary parentheses,":["and"],"unnecessary parentheses.":["The"],"unnecessary parentheses;":["that's"],"unnecessary since":["it"],"unnecessary step":["and"],"unnecessary thunks.":["If"],"unnecessary to":["manually","list"],"unnecessary too,":["but"],"unnecessary traverses.":["But"],"unnecessary, and":["your","that"],"unnecessary, function":["application"],"unnecessary, since":["function"],"unnecessary. I":["tried"],"unnecessary. Otherwise":["great."],"unnecessary. There's":["no"],"unnecessary. With":["the"],"unnecessary. You":["might"],"unneeded. A":["left"],"unnesessary overcompication":["as"],"unobservable whether":["or"],"unoptimized), but":["after"],"unordered-containers if":["you"],"unpack it":["again"],"unpack pragma":["on"],"unpacking `robotB`,":["there's"],"unpush it.":["Code"],"unqualified (this":["is"],"unqualified but":["restricted","limited"],"unqualified so":["you"],"unreadable brackets":["and"],"unreadable, just":["that"],"unreasonable to":["expect","expect"],"unrelated function":["for"],"unrelated to":["`a`,","the"],"unsafe (and":["the"],"unsafe functions,":["but"],"unsafe, but":["I"],"unsafeCoerce in":["the"],"unsafePerformIO. I":["think"],"unsaid so":["that"],"unsatisfactory due":["to"],"unscientific unix":["`time`"],"unsigned numbers":["were"],"unsolicited pull":["request"],"unsolvable, but":["those"],"unsorted list":["in"],"unsorted versions":["version"],"unstream.stream so":["they"],"unstuck my":["brain."],"unsure about.":["Is"],"unsure how":["to"],"unsure of":["which"],"unsure style-wise":["about"],"unsure this":["is"],"until ('mod'":["k"],"until I":["discovered...","actually","finally","have","was","get","understand"],"until after":["I"],"until all":["of","of"],"until before":["the"],"until both":["(a)"],"until finding":["the"],"until it":["finds","doesn't.","has","reaches","produces"],"until it's":["forced,","forced.","completely","done"],"until necessary":["for"],"until now":[":)"],"until one":["of"],"until that":["value","is"],"until the":["readability","value","value","end","final"],"until value":["is"],"until you":["told","read","get","end","change","will"],"unused `None`":["to"],"unused `import`":["statements)."],"unused `isSquare`":["function."],"unused and":["not","it"],"unused code":["as"],"unused here,":["as"],"unused import":["here","here."],"unused imports":["from","now","in","&"],"unused imports.":["Also,","it","Also,"],"unused in":["the","an"],"unused variable":["`_`?"],"unused variables":["are"],"unused' =":["all"],"unused, I":["wanted"],"unused, if":["you"],"unused, since":["the"],"unused. Otherwise":["this"],"unused. You":["should"],"unusual case;":["in"],"unusual to":["me."],"unusual, because":["you"],"unusual, typically":["there"],"unwieldy as":["it"],"unwieldy, while":["the"],"unwords .":["map"],"unwords and":["unlines"],"unwords instead":["of"],"unwords map":[","],"unwrap Schools,":["since"],"unwrapping a":["real"],"unwrapping but":["I'm"],"unwrapping, but":["`zipWith"],"up \"short":["cut"],"up (higher":["precedence"],"up (look":["at"],"up -":["I"],"up /":["clarifications"],"up GHCI":["and"],"up N":["nested"],"up O(1)":["space."],"up O(n)":["storage","memory"],"up Prelude":["http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html"],"up WAY":["more"],"up _Real":["World"],"up _this_":["code"],"up `isNoResponse`":["too."],"up `lastFour`":["at"],"up `phoneNumberFromString`":["a"],"up `punctuation`":["in"],"up `resetName`":["in"],"up a":["bunch","little","call","stack.","descending","solution","lot","thunk","series","chain","lot","bunch","map","map.","lot","lot","bit:","lot","bit","lot","bit.","value-strict","bit.","bit","bit.","lot","list","big","lot","lot","piece","large","new","thunk","dead","little.","value-strict","bit","huge","huge","ton","thunk,","lot","better","version","huge"],"up additional":["avenues"],"up all":["of","four"],"up and":["optimized","couldn't","chose"],"up as":["`('C':'M':","the"],"up before":["I"],"up being":["equivalent","a","to","confused","more","constructed","the","longer","slightly"],"up building":["a","nested"],"up bunches":["of"],"up by":["only","using","the"],"up causing":["trouble"],"up characters":["in"],"up code":["that"],"up delimited":["lists,"],"up doing":["a"],"up each":["word"],"up easily":["with"],"up every":["time."],"up far":["less"],"up finding":["a"],"up following":["the"],"up from":["moving"],"up front":["cost"],"up front.":["For"],"up functions":["(and"],"up happening":["is"],"up having":["to"],"up if":["it's","you","you"],"up imports.":["Makes"],"up in":["programming","a","an","places","the","the","the","ghci","the","the","knots"],"up into":["the","your"],"up isn't":["value-strict:"],"up just":["a"],"up letters":["worth"],"up like":["that,"],"up linear":["space"],"up long":["lines"],"up looking":["something","something"],"up matching":["list"],"up messageResponse,":["but"],"up methods":["by"],"up more":["space","memory","space"],"up most":["of","of"],"up my":["line","code"],"up nested":["parentheses."],"up not":["using"],"up now":["and"],"up of":["meetupDay","simple,","values,"],"up on":["the","applicative","the","an","Control.Arrow),","IO","twitter","the","Haskell,","the","folds","that.","that.","it.","that"],"up one":["nucleotide"],"up operation":["is"],"up pattern":["matching"],"up pursuing":["to"],"up quite":["a"],"up rather":["ugly","easily"],"up replacing":["a"],"up reversing":["the"],"up running":["at"],"up scanning":["the"],"up several":["times"],"up so":["that"],"up some":["algorithms"],"up something":["that"],"up stirngs":["with"],"up thanks":["to"],"up that":["whole"],"up the":["imports","imports.","map?","example","input","keys","precedence","default","record","first","guards","date","Map","grains","Functor","source","values","whole","counts","orbital","associativity","guard's"],"up they":["are"],"up thinking":["in"],"up thunks":["there.","everywhere."],"up thunks.":["Thanks"],"up to":["O(n","show","whichever","the","n","sqrt","12","taste,","use","5","26","26","\u003cpre\u003etestCase","you,","the","you."],"up too":["confusing."],"up trying":["to"],"up under":["the"],"up until":["now"],"up user-entered":["phone"],"up using":["`foldlstrict`","`fromListWith","Applicative","an","ghci....","gregorianMonthLength","O(n)","fromEnum"],"up very":["quickly."],"up was":["just"],"up what":["it","you're"],"up when":["looking"],"up with":["a","a","a","a","something","unreadable","some","a","anything","this","horrible","better","anything","`48`.","`[1..3]","the","zero.","after","a","a","the","\"thread","a","a","a","just","this","another","anything","an","a","one","something","a","the","a","a","\"two\""],"up with,":["until"],"up with.":["and"],"up wordCount":["to"],"up your":["long"],"up! But,":["I"],"up, a":["random","random"],"up, and":["i"],"up, but":["there's"],"up, not":["too"],"up, please":["feel"],"up. And":["I"],"up. Can't":["think"],"up. Death":["to"],"up. I":["wasn't"],"up. Something":["like"],"up. Very":["good"],"up. You":["could","only"],"up? It":["looks"],"upCase y)`":["aren't"],"upcases all":["of"],"update containers":["without"],"update even":["though"],"update for":["me."],"update from":["thread"],"update internals":["without"],"update it":["to"],"update its":["list"],"update test":["suites"],"update tests,":["as"],"update that":["portion."],"update the":["gem,","where"],"update this":["when"],"update with":["String."],"update. Thanks":[":)"],"update; cabal":["install"],"updateCount x":["m)"],"updated balance,":["and"],"updated comment,":["don't"],"updated couple":["of"],"updated in":["lock-step,"],"updated my":["submission","code"],"updated test":["cases","for"],"updated tests.":["Feel"],"updated the":["code.","balance"],"updated to":["this","a"],"updated with":["`(+)"],"updated, but":["if"],"updated. I've":["filed"],"updates to":["test"],"updating a":["count"],"updating in":["case"],"updating of":["map."],"upgrade for":["that,"],"upgrade my":["ubuntu"],"upgrade to":["a"],"upgrade your":["exercism"],"upgrade, but":["in"],"uploaded a":["new","newer"],"uploaded for":["that."],"uploaded prematurely.":["It"],"uploaded this":["one"],"upon a":["request."],"upon generally.":["It"],"upon it":[":-)","after"],"upon. The":["downside"],"upper bound":["for","(regardless","(and"],"upper bounded":["by","by"],"upper by":["convention)"],"upper case*":["-"],"upper case.":["That","You"],"upper to":["lower"],"upper, negatives":["works"],"upper, positive":["to"],"uppercase alphabetic":["characters,"],"uppercase any":["character,"],"uppercase is":["used"],"uppercase letter":["and"],"uppercase letter)":["&&"],"uppercase letter,":["otherwise"],"uppercase letters,":["not"],"uppercase letters.":["elem"],"uppercase or":["not","lowercase,"],"uppercase, so":["you"],"upside is":["that"],"uracil ::":["Nucleotide","Nucleotide"],"uracil =":["fromChar","fromChar"],"uracil and":["thymidine"],"uracil if":["it"],"uracil in":["DNA,"],"uracil is":["the","in"],"uracil, then":["there"],"uracil, thymidine":["::"],"uracil_ test,":["but"],"urge that":["you"],"urged to":["be"],"urgent because":["it's"],"us a":["powerful"],"us from":["having"],"us how":["many"],"us to":["convert","parameterize"],"us, I":["found"],"us, ci":["0.950","0.950","0.950","0.950","0.950","0.950"],"us, lb":["7.593824","7.101970","7.968814","10.07447","1.321476","1.254422"],"us, ub":["7.724408","7.219372","7.994604","10.14804","1.326522","1.320440"],"usBijection =":["(==)"],"usable as":["a"],"usage O(n)":["instead"],"usage and":["scope"],"usage here":["is"],"usage is":["nice.","legitimate,","key","O(1)","a","infix","called","on"],"usage of":["`isSuffixOf`","TupleSections,","`Alternative`,","Monoids,","the","helper","foldr","Data.Text","the","Data.Map","common","guards","Data.ByteString","non-strict","Parsec","Data.List.Split's","`map","lazy","```nub```,","the","`reverse`.","list"],"usage when":["you"],"usage you":["really"],"usage), consider":["using"],"usage). This":["is"],"usage, because":["this"],"usage. The":["running"],"use \"LLNNN\"":["as"],"use \"where\"":["as"],"use 'T'":["to"],"use 'all":["isSpace'"],"use 'all'":["and"],"use 'channels'":["notion"],"use (Row,":["Col)"],"use (such":["as"],"use (toLower'":["x"],"use (with":["help"],"use *any":["type*"],"use 0":["for"],"use 18bits.":["But"],"use :info":["in"],"use \u003c$\u003e":["from"],"use ADT":["to"],"use Applicative's":["liftA2","`\u003c|\u003e`"],"use Applicative,":["because","so"],"use Arrow":["here."],"use BangPatterns":["or","(the"],"use Bool":["as"],"use Bounded":["and"],"use Control.Applicative":["operators","to","operators"],"use Control.Applicative's":["fmap"],"use Control.Arrow's":["`&amp;&amp;&amp;`"],"use Control.Arrow,":["like"],"use Control.Monad.Writer.Strict,":["I"],"use DMS":["for"],"use Data.Array,":["which"],"use Data.Char.toLower":["either"],"use Data.IntMap":["as"],"use Data.IntMap.Strict":["its"],"use Data.List's":["`splitAt`"],"use Data.List.Split":["function","`wordsBy`."],"use Data.List.Split's":["`wordsBy`","`wordsBy`","`wordsBy`,"],"use Data.List.Split.words":["by,"],"use Data.List.Split.wordsBy":["instead"],"use Data.Map":["and","but","?","instead","or"],"use Data.Map.Strict":["instead","instead","instead.","with","and","for","has","instead","here.","instead,","version","to","on","instead,","instead","instead","but"],"use Data.Map.Strict's":["`fromListWith`","version"],"use Data.Map.Strict,":["for"],"use Data.Map.Strict.":["You","Since"],"use Data.Text":["which"],"use Data.Vector,":["but"],"use Data.Vector.":["Unboxed"],"use Double":["over"],"use Either":["rather","Integer"],"use Functor":["typeclass?","and"],"use Functor,":["Applicative,"],"use GND":["given"],"use HashMap":["from"],"use List.map":["or"],"use ListLike":["type"],"use MVar":["or","+"],"use MVars":["or"],"use MWC":["or"],"use Map.fromListWith":["which"],"use Map/IntMap":["to"],"use Maybe":["instead","to"],"use MissingH":["!"],"use MonadLoops":["but"],"use Planet":["as"],"use QuasiQuotes":["for"],"use RandomRIO":["like"],"use STM":["though"],"use Show":["for"],"use String":["when"],"use System.Random's":["`randomRIO`"],"use TVars":["and"],"use Text":["in","is"],"use Text,":["try"],"use Text.Parsec.Token":["and"],"use U":["inside."],"use V.map":["etc"],"use [`fromListWith`](http://hackage.haskell.org/package/containers-0.5.3.1/docs/Data-Map-Strict.html#v:fromListWith)":["here"],"use [`isAlphaNum`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Char.html#v:isAlphaNum)":["instead"],"use [`liftA2`](http://hackage.haskell.org/package/base-4.6.0.1/docs/Control-Applicative.html#v:liftA2)":["to"],"use [b,b-1,..,a]":["function"],"use [fromListWith](http://hackage.haskell.org/packages/archive/containers/latest/doc/html/Data-Map-Lazy.html#v:fromListWith).":["It's"],"use [hoogle](http://www.haskell.org/hoogle/)":["all"],"use [n,n-1..m]":["this"],"use _strict_":["maps."],"use `":["(definition)"],"use `\",":["\","],"use `$`":["after","once","rather"],"use `&&`":["there's","and"],"use `(!)`":["instead"],"use `(+)`":["as"],"use `(++)`":["in"],"use `(^2)`":["instead"],"use `(area,":["rest)"],"use `(f.).`":["here"],"use `(not":["."],"use `(x:xs)`":["instead"],"use `.|.`":["(binary"],"use `/=`":["and","instead"],"use `==`":["anywhere"],"use `\u003e=\u003e`":["could"],"use `Applicative`":["a"],"use `Bool`":["and"],"use `C`":["instead"],"use `Data.Bits.testBit`":["to"],"use `Data.Char.isSpace`":["instead","instead","on"],"use `Data.Function.on`":["combinator"],"use `Data.List.Split.wordsBy`":["instead"],"use `Data.List.Split`":["and"],"use `Data.List.Split`'s":["`splitPlaces`"],"use `Data.Map.Strict.fromListWith`":["instead"],"use `Data.Map.Strict.insertWith`":["instead."],"use `Data.Map.Strict`":["instead","instead,"],"use `Data.Map.Strict`)":["but"],"use `Data.Map.map`":["to"],"use `Data.Map`":["instead."],"use `Int`":["then"],"use `L.filter`":["when"],"use `List.map`":["or"],"use `M.fromListWith`":["which","instead"],"use `M.map`":["as"],"use `M.toAscList`":["to"],"use `M.toList":["oldData`"],"use `MVar`s.":["This"],"use `Map.fromListWith`":["instead,","to"],"use `Map.insertWith`":["not"],"use `Map`":["functions"],"use `Maybe":["(Int"],"use `MoveLeft`,":["`MoveRight`"],"use `OtherMessage`":["explicitly"],"use `String`":["in","instead","for","rather"],"use `System.Random`":["there"],"use `T.last`":["to"],"use `TupleSections`":["language"],"use `[a,a-1,..b]`":["you"],"use `[minBound..]`":["too"],"use `[x,":["x-1"],"use `_`":["instead"],"use ```Data.List.Split.wordsBy```":["with"],"use ```Data.Set```":["instead"],"use ```M.fromListWith```":["instead"],"use ```Map.insertWith```.":["You"],"use ```Maybe``).":["But"],"use ```State```":["Monad"],"use ```enumFromTo```":["in"],"use ```filter```.":["You"],"use ```foldl'```":["instead","which"],"use ```foldl```/```foldr```":["in"],"use ```fromLIstWith```":["but"],"use ```isLower```":["properly:)"],"use ```isYelling```":["instead"],"use ```length```":["and"],"use ```newStdGen":["\u003e\u003e="],"use ```repeat":["0```"],"use ```show":["c```"],"use ```unlines```":["to"],"use ```wordsBy```":["in","from"],"use `acc`":["on"],"use `addDays`":["to"],"use `all":["(not","(not"],"use `all`":["to","in","or","or","instead"],"use `and`":["or"],"use `any":["isLetter"],"use `any`":["and","to","or","rather","combinatorial,"],"use `ap`":["from"],"use `atomicWriteIORef`":["instead"],"use `atomically`":["or"],"use `case`":["which"],"use `chunksOf`":["from"],"use `concatMap`":["and"],"use `concat`":["on","for","or"],"use `count":["."],"use `count`":[":)","at","to","if","inside"],"use `data":["Tree"],"use `digitToInt`":["from"],"use `dna`":["at"],"use `dna`,":["not"],"use `elem`":["or"],"use `endswith`":["or"],"use `error":["::"],"use `exercism":["peek`"],"use `filter":["id`.","(not","(liftA2","pred1"],"use `filter`":["rather","with"],"use `findWithDefault`":["and"],"use `find`.":["Once"],"use `flip":["(M.findWithDefault"],"use `flip`":["or","but"],"use `fmap":["$","(map"],"use `foldl'`":["from","from","from","instead.","from","from","to","(which","or","from","in","from","from","and","instead","for","instead.","for","and","from","instead","from","instead","instead.","from","and","from"],"use `foldl'`,":["which","but"],"use `foldl`":["as"],"use `foldl`,":["always","always","`fromList`,","always"],"use `foldl`.":["You"],"use `foldr`":["because","to","to","instead"],"use `fromEnum":["'0'`","'0'`."],"use `fromEnum`":["instead","and","to","to","instead","/"],"use `fromListWith`":["but","rather","because","and","from","with","instead","instead","which","or","to","instead,","which","from","and","from","without","which"],"use `fromListWith`,":["but","using","which"],"use `fromListWith`.":["Consider"],"use `fromList`":["if","or"],"use `gen`":["directly."],"use `getBalance`":["in"],"use `getMap`,":["you"],"use `getStdGen`":["instead"],"use `guard`":["function"],"use `head`":["instead","and","and"],"use `import":["qualified","qualified"],"use `insertWith'`":["here","which"],"use `insertWithKey`,":["you"],"use `insertWith`":["to","or"],"use `insertWith`,":["`fromListWith`"],"use `insertWith`.":["I"],"use `intercalate`":["and"],"use `isAllergicTo`":["in","in"],"use `isAlphaNum`":["from"],"use `isLetter`":["or"],"use `isSilent`,":["which"],"use `isSuffixOf`":["from","from","from","from","from"],"use `isUpper`":["and"],"use `last":["txt"],"use `last`":["in"],"use `last`,":["using"],"use `len":["=="],"use `length`":["here","at"],"use `length`,":["so"],"use `lens`":["here..."],"use `let":["…"],"use `let`":["and"],"use `liftA2":["."],"use `liftM2`":["instead"],"use `ls`":["and"],"use `map":["canonicalize`","(,0)","verse`","toEnum"],"use `mapM`":["here","function.","to"],"use `map`":["and","here.","then","in","and","here?"],"use `map`,":["but","not"],"use `minBound`":["and"],"use `mod`":["or"],"use `modifyTVar'`":["in"],"use `newStdGen`":["twice,"],"use `newtype":["Robot"],"use `newtype`":["and","and","instead"],"use `none":["isLower`."],"use `not":[".","null"],"use `not`":["and"],"use `nub`,":["it"],"use `null`":["or","instead"],"use `permutations`":["-"],"use `printf`":["more","from"],"use `process`":["to"],"use `putMVar`":["in"],"use `randomRIO`":["instead,","and","so"],"use `randomR`":["instead."],"use `read`,":["for"],"use `reads`":["function","it"],"use `replicateM`":["in","from"],"use `return":["$!`."],"use `return`":["in","rather"],"use `reverse":["[m..n]`"],"use `reverse`":["or"],"use `romans`":["as"],"use `runIdentity`":["in"],"use `s'":["="],"use `safeToEnum`":["for"],"use `second`":["from"],"use `seq`":["or"],"use `seq`,":["`$!`,","but"],"use `seq`.":["It"],"use `show":["c`,","x`","c`"],"use `show`":["at"],"use `sort`":["to","from"],"use `sort`,":["so"],"use `span`":["instead?"],"use `specialChar`":["to"],"use `splitAt":["10`"],"use `splitAt`":["instead","and"],"use `split`":["first","in"],"use `sqrt`":["with"],"use `str`":["so"],"use `string`":["argument"],"use `sum`":["and","and"],"use `tails`":["function,"],"use `testBit`":["to"],"use `toAscList`":["to","that"],"use `undefined`":["or"],"use `unfoldr`":["instead."],"use `unionWith`":["at"],"use `unlines`":["instead","to","and"],"use `unwords`":["instead","instead","instead"],"use `void`":["from"],"use `where":["t"],"use `where`":["on","on","vs","where","on"],"use `wordsBy":["(not"],"use `wordsBy`":["from","from","from","from"],"use `wordsBy`,":["I","you"],"use `wordsby`":["to"],"use `xs`":["everywhere"],"use `zip":["xs","nucleotide"],"use `zipWith":["(/=)`","($)"],"use `zipWith`":["to","instead","to","instead","instead","to"],"use `zip`":["on"],"use `|":["otherwise"],"use a":["more","bottom","qualified","Set.","strict","strict","function","strict","strict","strict","strict","strict","parser","tuple","combinator","`Map","Data.Set","strict","qualified","different","bit","strict","function","`where`","where","single","fold","data","Maybe","lot","single","Prelude.foldl,","little","constant","Map","strict","combinator,","destructor","guard","lambda","lot","lot","lot","lazy","list","trick","case","non-std","map","list","qualified","type","list","combinator","better","MVar","custom","mutable","left","left","datatype","strict","value-strict","Char","concat","different","small","difference","lambda","lazy","lambda","list","curried","2-space","table","lot","type","lambda","HashMap","mutable","list","list","list","qualified","modified","new","hashtable","fold..","guard)","better"],"use algo":["that"],"use alongside":["with"],"use alternative":["and"],"use alternative,":["but"],"use an":["accumulator-strict","simpler","operator","explicit","already","atomic","ADT","awkward","inlined","as","association","accumulator,","accumulator","implementation","operator","indentation","approach"],"use and":["it","call","a","faster."],"use another":["function","approach,"],"use any":["data","language","non-standard","Data.List","of","folding"],"use anything":["but","not"],"use appropriately":["named"],"use arithmetic":["rather","to","to","to"],"use arrows":["or","for"],"use as":["in","to","well,","it"],"use bang-patterns":["to"],"use basic":["mutable"],"use better":["named","structure"],"use bits":["of"],"use blocked":["operations"],"use boolean":["expressions"],"use both":["`fmap`","in","at"],"use bottom":["to"],"use built":["in","in"],"use by":["anagramsFor."],"use bytestring":["though?"],"use case":["or","than","you","for","(or","really).","you"],"use case,":["the","it","otherwise"],"use cases":["for","for","are"],"use closer":["to"],"use competing":["typeclasses"],"use composition.":["I"],"use concat":["and"],"use concatMap":["and"],"use cons-reverse":["scheme"],"use constant":["space"],"use correctly":["and"],"use custom":["gurads"],"use data":["types."],"use days":["rather"],"use desugared":["`map"],"use different":["variable"],"use direct":["recursion"],"use dropWhile,":["instead"],"use either":["because","`f'`"],"use equality":["to"],"use even":["more,"],"use explicit":["lists","imports,","exports","import","imports","recursion","recursion","recursion","recursion.","recursion","recursion","recursion","list","exports"],"use extra":["parentheses"],"use facilities":["of"],"use fewer":["operations","combinators","parens"],"use filter":["instead","with"],"use fix":["from"],"use fixed":["point","point"],"use fmap":["instead"],"use fold":["function"],"use foldl":["in"],"use foldl'":[":)","(from","if"],"use foldl',":["otherwise","otherwise","otherwise"],"use foldr":["to","to"],"use folds":["for"],"use following":["pattern:","representation:"],"use for":["any","`a`","any","shouting","the","any","this,","the","this","benchmarking","building","qualified","`unlines`","foldl","this.","this,"],"use from":["other"],"use fromEnum":["function"],"use fromEnum,":["then"],"use fromListWith":["here."],"use full":["names"],"use function":["guards","from"],"use functionality":["present"],"use functions":["to","like","from","from","from"],"use guard":["clauses"],"use guards":["instead","in","to","to","for","in","and","in","instead","instead","than"],"use has":["been"],"use haskell":["lazy"],"use head":["and","inside"],"use here":["is","?","is","can","is"],"use here,":["but","you","in"],"use here.":["It's"],"use higher":["order","order","level","level","level","level","order","level"],"use higher-level":["stuff"],"use higher-order":["functions"],"use imperative":["stuff"],"use import":["qualified."],"use improvement.":["Another"],"use in":["`silence`.","Haskell,","the","a","a","fold","`sanitize`.","code"],"use incremental":["right"],"use infix":["still","with"],"use insert":["with"],"use instead":["of","of","of","of","of","of","of"],"use is":["on","inconsistent","a","a"],"use isBlank":["from"],"use isSpace":["for","from"],"use isSuffixOf":["from"],"use it":["because","twice,","twice,","as","anywhere,","eventually","once).","in","in","twice.","would","in","on","in","in","in","now","in","here....","in","somehow","once,","in","where","in",":relaxed:","sometimes","in"],"use it),":["so"],"use it.":["Seem","Please","Doing"],"use just":["`Vector","to"],"use lambda":["instead"],"use last,":["so"],"use laziness":["only"],"use lazy":["or","Map"],"use left":["folding,","folding"],"use lens":["if","for"],"use lenses":["or"],"use less":["spaces"],"use let":["or","bindings."],"use let...":["in"],"use library":["routines"],"use linear":["stack"],"use list":["in","in","comprehentions"],"use m":["instead"],"use many":["insert","superfluous"],"use map":["and","instead","but","union","instead"],"use mapM,":["i.e.:"],"use mapping":["(i,j)"],"use math":["only","to"],"use methods":["like"],"use modifyTVar":["to"],"use more":["than","general","descriptive","lines","whitespace","whitespace","ram","pattern","guards"],"use mutable":["variables."],"use names":["for","like","for"],"use newtype":["and","when","rather"],"use no":["optimizations"],"use non-standard":["libraries?"],"use notable":["variables"],"use of":["record","`groupBy`.","`filter`","guards","Array","`Set`.","the","`last`","`elem`.)","Data.Text","import","`(+)`","`words`,","`foldl`","`all`","`all`","guards.","guards.","appropriately","Applicative's","Bounded","the","the","pattern","a","a","an","`tryTakeMVar`","`sequenceA`.","it?","it","`bar'","`print'","`bar'","`print'","`Maybe`","`show`","Data.Time.Calendar.WeekDate.toWeekDate.","`foldl'`","`foldl'`","Data.Text","mutable","guards","most","lists.","`$`.","scanl.","toAscList.","helper","regular","Data.Map.","`randomRIO`","`foldr`","`wordsBy`","`insertWith`","`fromListWith`,","`liftA2","`seq`","monads)","`foldl`","Data.Map","Data.Map","`foldr`","a","a","`zipWith`.","`\u003c$\u003e`","points-free","`zipWith`,","`\u003e\u003e=`","`wordsBy`","`unlines`","a","naming","fusion.","`concatMap`","infix","two","`!`","`group`","overloaded","`unwords`","```Data.Set```","`zipWith`,","`transpose`","`\u003c|\u003e`","`decimal`","^`","`randomRIO`","`length`.","`splitPlaces'","`insertWith'`.","`sequence`","`mapM`","`toAscList`","`map`.","Applicative"],"use of)":["a"],"use often,":["especially"],"use on":["my"],"use one":["or","function","of:"],"use only":["one","`Data.Map`","Data.Map.Strict","guards,","one","Data.Map","Data.Map","Data.Map","```Prelude```"],"use operators":["like"],"use or":["Array"],"use other":["error","functions"],"use otherwise?":["To"],"use parens":["around","only"],"use parentheses":["around","around","around"],"use parentheses,":["function"],"use pattern":["matching","matching","matching","matching","matching,","matching","matching.","matching","matching?","matching","matching","guards,","match"],"use pipe":["operator)"],"use plain":["old"],"use point-free":["style","form."],"use previously":["found"],"use printf":["in"],"use pure":["math","math","math","math","math","math"],"use putMVar":["instead"],"use qualified":["imports.","module","imports.","imports.","imports).","imports,","imports.","import","import","names"],"use quotRem":["to","instead"],"use randomRIO":["and"],"use read":["better"],"use record":["syntax","syntax","syntax"],"use recursion.":["No?"],"use regexps":["for"],"use regular":["expressions.\""],"use repeated":["`\u003c|\u003e`"],"use right":["folding"],"use same":["values"],"use section":["notation.","notation"],"use separate":["function"],"use short":["names","named"],"use shorter":["variable"],"use simple":["pattern","arithmetic"],"use smalltalk":["like"],"use so":["many"],"use some":["higher-order","help","combinators","method"],"use something":["like","like","that","like","that","like","more","simpler?","like","like","like"],"use sort":["on"],"use specific":["compiler"],"use splitAt":["but"],"use sqrt,":["since"],"use sqrtInt":["on"],"use strict":["left","left","versions","version","version","left","structures","version"],"use string":["literals"],"use such":["instead"],"use sum":["with","instread"],"use swapMVar":["then"],"use syntax":["sugar"],"use tail":["recursion"],"use text":["wherever"],"use than":["`insertWith`","just"],"use that":["fact","as","in","from","consistently.","information","modules","as","in","in","instead.","definition.","function","directly.","tip"],"use that,":["plus"],"use that.":["I'd","Something"],"use the":["prelude.","constants,","`String`","higher","power","type","`read`","strict","`Data.List.Split`","type","list","one","constant","same","two-argument","second.)","previously","fact","more","`any`","`a","same","Applicative","`TupleSections`","Enum","existing","`TupleSections`","PharseHeard","function","`(++)`","TupleSections","simpler","Char","`Show`","state","`all`","function","length","Map","`maybe`","version","\"map\"","higher-level","\"map\"","functions","same","binding","name","fact","strict","TupleSections","one","expression","State","convenient","TupleSections","`fromEnum`","same","Data.List.Split","fact","public","Enum","version","`join`.","builtins","TupleSections","exponent","`lookup`","`Data.Bits`","`.`","type","Enum","Map","lazy","Data.List.Split","booleans","School","composition","fmap","`choice`","same","map","time","`.`","strict","data","same","returned","strict","`enumFromThenTo`","splitWhen"],"use their":["values"],"use them":["instead.)","all","in","at","here.","it","instead?"],"use them.":["I"],"use this":["kind","same","function","style.","to","idea","for"],"use three":["of"],"use to":["make","make","build","make","make","DNA","identify","make","simplify","classify","it","ensure","make","make","make","make","simplify","simplify","make","simplify","build","do","write","make","get"],"use toAscList":["to"],"use too,":["by"],"use top-level":["bindings"],"use tuples":["from"],"use two":["Data.Map","`splitAt`'s","separate"],"use two!":["A"],"use two,":["but"],"use type":["signatures.","signatures.","instead"],"use typeclasses":["for"],"use types":["that"],"use union":["and"],"use unnecessary":["parentheses."],"use unwords":["instead","function."],"use use":["`Maybe"],"use was":["why"],"use when":["building"],"use where":["clauses","clauses"],"use whitespace":["rather"],"use withMVar":["for"],"use words":["then"],"use words).":["I"],"use words,":["do"],"use wordsBy":["from","from"],"use your":["own","suggestion"],"use zip":["as"],"use zipwith":["and"],"use) shorthand":["for"],"use, I":["understand"],"use, `foldl'`":["is"],"use, and":["generally"],"use, because":["of"],"use, here's":["the"],"use, in":["this"],"use, it":["has"],"use, or":["use"],"use, rather":["than"],"use, you":["should"],"use-case pretty":["exactly,"],"use. Do":["you"],"use. I":["more"],"use. I'd":["also"],"use. If":["the"],"use. In":["other"],"use. You":["already"],"use/don't care":["about"],"use: import":["Data.List()"],"use` ceiling`":["in"],"usecase and":["environment"],"used (e.g.":["ShowS)."],"used (for":["implementing"],"used Data.List.Split":["just"],"used Data.Time.Calendar.WeekDate.toWeekDate":["for"],"used ErrorT?":["I"],"used Haskell":["style,"],"used Haskell's":["list"],"used MVar":["instead"],"used Ruby":["or"],"used [criterion][1]":["to"],"used `(&amp;&amp;&amp;)`":["here."],"used `/=`":["you"],"used `\u003c$\u003e`":["(which"],"used `Data.Map.Strict`,":["eh?"],"used `Data.Maybe.fromJust":["."],"used `Data.Time.Calendar`":["and"],"used `Int`":["instead"],"used `MVar`s":["not"],"used `Text.Regex.Posix`":["to"],"used `[n,n-1..m]`":["as"],"used ```Data.Map.Strict```":["here,"],"used `all`,":["but"],"used `filter`":["and"],"used `foldWithIndex`":["from"],"used `fromListWith`":["and"],"used `fromList`":["and"],"used `fst`":["and"],"used `isLower`":["to"],"used `isSuffixOf`":["instead","as"],"used `last`":["for"],"used `map`.":[":)"],"used `maybe`":["instead."],"used `randomRIO`":["to","for"],"used `where`":["in"],"used `wordsBy":["(not"],"used `words`":["instead"],"used `zipWith":["($)"],"used a":["list","`map`","smart","lot","single","list","guard","flat","lot","`case`","Map","scary","case","lambda","particular","(tail-)recursive"],"used an":["MVar","`UArray`"],"used and":["`filter`","(again)","defined,"],"used any,":["all"],"used anything":["more"],"used anywhere":["else:"],"used approach":["that"],"used around":["`swapMVar`"],"used as":["an","an"],"used at":["the"],"used backpermute":["to"],"used because":["it's"],"used beyond":["the"],"used by":["`toRNA`,","at","millions"],"used curry":["and"],"used data":["structures"],"used e.g.":["all"],"used either":["in"],"used either.":["Don't"],"used elsewhere":["in"],"used explicitly":["when"],"used extensively":["inside"],"used for":["any","anything","counts","anything,","counts","this","other","that","purposes","grouping,","this","similar","composition","both","an","counting","newtypes.","that","counting.","interpreted"],"used formatting":["for"],"used from":["the"],"used function":["of","composition"],"used here":["was","for?","handles","once"],"used here,":["but"],"used here.":["`foldl`"],"used i":["molecular"],"used in":["my","`responseFor`.","wordCount","my","place","the","my","responseFor's","`wordCount`","scenarios","a","`readOct`","only","rev","concatMap","Haddock","`all`","`resetName`.","filter,","a","`incrementBalance`.","those","the","my","my","Haskell:","one"],"used incorrectly.":["For"],"used infix":["here"],"used inside":["lambdas."],"used instead":["of","of","of","of","of","of","of","of","of","of","of"],"used internally":["by","and"],"used internally,":["it"],"used is":["to","actually"],"used isAlphaNum":["-"],"used it":["before","in","in","correctly","correctly"],"used it...":["and"],"used just":["a"],"used mostly":["for"],"used newtype":["so"],"used non-atomic":["`writeIORef`"],"used not":["in"],"used now.":["Also"],"used null":["instead"],"used on":["line"],"used once":["and"],"used once.":["Is","It's"],"used one":["time","character"],"used only":["in"],"used outside":["of"],"used over":["and"],"used pattern":["matching","matching"],"used pretty":["rarely."],"used primes":["in"],"used quotes":["here"],"used record":["syntax"],"used rule:":["`(n;"],"used slightly":["another"],"used somewhere":["in"],"used strategies":["with"],"used subtraction…":["but"],"used such":["that"],"used testBit":["instead."],"used than":["`assocs`","`let`,"],"used the":["\"on\"","`elem`","custom","standard","Data.List.Ordered","null","correct","\"pointfree\"","date-math","thoroughly","other"],"used them":["before."],"used this":["to"],"used though,":["so"],"used to":["achieve","eliminate","imperative","group","implement","get","make","reading","after","make","do","it.","their","make","them.","a","implement","do","writing...","build","\u003cgasp\u003ethe","haskell","it.","`\u003c$\u003e`.","it?)","build","reading","that","express","coding","it,","using","seeing","be","check","narrow","prevent","prevent","abstract","either"],"used to,":["`\u003c$\u003e`"],"used to.":["I"],"used together":["in"],"used twice":["I"],"used two":["additional"],"used unless":["there's"],"used when":["one","more"],"used whenever":["possible"],"used wherever":["Monads"],"used with":["large","discretion."],"used would":["be"],"used your":["`TupleSections`","hint"],"used, `import":["Prelude"],"used, `map":["(id"],"used, although":["the"],"used, and":["easier"],"used, but":["are"],"used, e.g.":["variables"],"used, it":["could"],"used, just":["like"],"used, so":["can"],"used. For":["example"],"used. It":["doesn't"],"used. Otherwise,":["this"],"used. The":["`otherwise`"],"useful \"modular\"":["purpose"],"useful as":["well."],"useful combinators":["for"],"useful comments":["on"],"useful exercise":["to","to","to"],"useful for":["network","spotting","grouping.","that","returning","that","this"],"useful from":["time"],"useful function":["for","that"],"useful functionality":["for"],"useful functions":["in","in"],"useful functions,":["e.g."],"useful helper":["method"],"useful here":[":)","as","too,"],"useful here.":["Thanks"],"useful higher-order":["function"],"useful idea,":["but"],"useful in":["the","day-to-day","`prettyPrint`","slices.","demonstrating","some","theory"],"useful information,":["thanks"],"useful isAnagram":["would"],"useful mental":["model"],"useful on":["its"],"useful package":["to"],"useful purpose.":["Another"],"useful since":["everything"],"useful starting":["point."],"useful stuff,":["so"],"useful tips":[":)","have"],"useful to":["have","make","search","have","know,","complete","complete","accomplish"],"useful tool,":["thanks!"],"useful when":["describing"],"useful work":["without"],"useful! I":["achieved"],"useful, I":["think"],"useful, as":["well"],"useful, like":["`insertWith`"],"useful, lol.":["Does"],"useful. Much":["appreciated!"],"useful. `lookup`":["does"],"useful: [multiline":["string"],"useful: `Data.List.isSuffixOf`":["and"],"useful: `mod":["(-1)"],"usefull for":["you.."],"usefull to":["complete"],"usefull when":["viewing"],"usefullness of":["the"],"usefulness of":["`StatementType`"],"usefulness to":["other"],"useless `null":["s`"],"useless for":["that"],"useless until":["I"],"useless, and":["providing"],"uselfull to":["complete"],"useore advanced":["techniques"],"useore optimal":["datastructure?"],"user and":["yet","your"],"user are":["reviewing"],"user asks":["you"],"user doesn't":["have"],"user has":["been"],"user know":["what"],"user knows":["there"],"user might":["not"],"user should":["take"],"user to":["check"],"user-entered phone":["numbers"],"user. I":["installed"],"users and":["my"],"users would":["do"],"uses \"reverse\",":["which"],"uses Data.Array":["as"],"uses IO":["anyway,"],"uses Int,":["and"],"uses Integer,":["otherwise"],"uses MonadPlus":["with"],"uses Monday":["="],"uses Node":["|"],"uses O(1)":["in","memory."],"uses O(N)":["memory"],"uses O(n)":["memory"],"uses Parsec":["or"],"uses Text":["more."],"uses Text.map,":["and"],"uses ```String```s":["to"],"uses `filter`":["instead","instead"],"uses `foldl'`":["so"],"uses `lookup`":["instead"],"uses `parListChunk":["num"],"uses `str`":["which"],"uses a":["very","strict","`Map`","strict","lazy","strict","strict","strict","strict","fold","strict","strict"],"uses an":["enum","inlined","inlined","association"],"uses and":["how"],"uses constant":["space"],"uses divMod":["to"],"uses explicit":["recursion","recursion"],"uses foldlStrict":["internally,"],"uses in":["the"],"uses juxtaposition":["(`f"],"uses less":["code."],"uses linear":["representation"],"uses list":["comprehensions","of"],"uses many":["function"],"uses of":["partial","`digits`"],"uses old":["version"],"uses one":["less"],"uses pattern":["matching:"],"uses pinned":["memory,"],"uses readHex":["from"],"uses shorter":["names","names"],"uses some":["typeclass"],"uses strict":["evaluation,"],"uses the":["isXyz","`s`","existing","wordsBy","`all`","`+`"],"uses them":["only"],"uses them.":["That"],"uses this":["quite","data"],"uses too":["much"],"uses unstream.stream":["so"],"uses way":["less"],"uses, is":["way"],"uses. The":["trick"],"uses. i":["don't"],"using \"isSuffixOf\"":["would"],"using 'words',":["but"],"using (++)":["really"],"using *findWithDefault*":["(or"],"using 2":["space,"],"using 2/4":["spaces"],"using \u003c*":["in"],"using \u003ccode\u003enot":["(null"],"using Applicative":["because","operators","operators"],"using Arrow":["(I"],"using BangPatterns":["and"],"using C.isSpace":["rather"],"using Control.Applicative":["in"],"using Control.Arrow's":["`&amp;&amp;&amp;`"],"using Control.Lens":["or"],"using Criterion":["so"],"using Data.Bits)":["and"],"using Data.Bits,":["`shiftL`"],"using Data.Char":["and"],"using Data.List's":["`splitAt`"],"using Data.List.Split's":["`wordsBy`","`wordsBy`","`wordsBy`","wordsBy,","`wordsBy`"],"using Data.List.Split,":["as"],"using Data.List.foldl'.":["An"],"using Data.Map":["by","instead","to","or","(value-lazy)"],"using Data.Map's":["`fromListWith`.","`fromListWith`."],"using Data.Map.Strict":["instead","instead.","and","instead,","instead","instead","instead.","to","to","and","and"],"using Data.Map.Strict,":["but"],"using Data.Map.Strict.map,":["then"],"using Data.Map.Strict?":["Will"],"using Data.Set":["instead"],"using Data.String.Utils.replace,":["but"],"using Data.Text":["is","for","for"],"using Emacs":["there's","ghc-mod"],"using Exercism":["to"],"using First":["newtype"],"using GHCi":["version"],"using Haskell's":["declarative"],"using I*n+j.":["Also"],"using IORef":["here."],"using IORef,":["MVar"],"using Int,":["but"],"using Left":["and"],"using Map":["at","but"],"using Maybe":["and","Phone","as"],"using Maybe.":["It"],"using O(1)":["storage"],"using O(n)":["space"],"using OverloadedStrings":["you"],"using PM,":["thanks"],"using Parsec,":["but"],"using Parsec.":["When"],"using STM,":["almost"],"using Set":["over"],"using ShowS":["(which"],"using String":["anyway","for"],"using String,":["it's"],"using Text":["instead","is","here"],"using Text.":["In"],"using Text.map":["will"],"using ViewPatterns":["and"],"using Vim":["or"],"using [`null`](http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:null)":["instead"],"using `!`":["directly"],"using `$`":["vs"],"using `&&`":["at"],"using `($)`":["to"],"using `(,1)`":["instead"],"using `(.)`":["but"],"using `(.)`\"":["is"],"using `(not":[".","."],"using `++`":["all"],"using `.`":["instead","operator"],"using `.`,":["consider"],"using `/=`":["instead"],"using `2:[3,5..]`":["for"],"using `==`?":["Hint:"],"using `\u003e=`":["and"],"using `\u003e\u003e=`":["instead"],"using `BankAccount":["(MVar"],"using `Bool`":["instead"],"using `ByteString`s?":["The"],"using `Char`s":["as"],"using `Data.Bits`":["now"],"using `Data.ByteString`":["is"],"using `Data.Function.on`":["combinator"],"using `Data.List.Split.wordsBy`":["with"],"using `Data.List.splitAt`":["to"],"using `Data.List.transpose`":["if"],"using `Data.Map.Strict`":["is"],"using `Data.Map.fromListWith`":["here,"],"using `Data.Map`":["and","functions"],"using `Data.Map`.":["I"],"using `Data.Set`":["to"],"using `Data.Text`":["is"],"using `Either":["String"],"using `Int`":["instead"],"using `List`/`Char`":["operations"],"using `M.foldlWithKey'`":["or"],"using `MVar`s":["I"],"using `Map.fromListWith`":["to","instead.","instead…"],"using `Map.insertWith`":["to"],"using `Map`":["functions?"],"using `NFData`":["so"],"using `Show`":["to"],"using `String`":["is"],"using `TVar`s,":["after"],"using `Text.Printf.printf`,":["not"],"using `Text`":["over"],"using `Vector":["(Vector"],"using `[(String,":["Int)]`"],"using `[Char]`":["rather"],"using `[]`":["and"],"using `[from,":["from"],"using `[from,from-1":[".."],"using `[i,":["i-1"],"using `[start,":["pred"],"using `[x,x-1":[".."],"using `_`":["instead"],"using `_`.":["What"],"using ```(+)```":["function"],"using ```2:[3,5..]```":["I"],"using ```filter```,":["and"],"using ```fromListWith```":["applied","from"],"using ```import```":["statement"],"using ```insertWith```":["from"],"using ```isLower```":["from"],"using ```map```.":["It"],"using ```newtype":["School"],"using ```not":["."],"using ```nub```":["on"],"using ```rem```":["instead"],"using ```wordsBy```":["and"],"using `aFun`":["and"],"using `all`":["and","to","+","in","(or","or","seems","and/or","to","makes","to","in","and/or","and/or","and","instead","in"],"using `all`,":["and"],"using `all`.":["The"],"using `alter`":["instead"],"using `any":["::"],"using `anyChar`":["and"],"using `any`":["and/or","or","and/or","and","and","and/or","and/or","or","and/or","and/or","and"],"using `any`,":["which"],"using `case`":["instead","to"],"using `case`,":["something"],"using `case`.":["See"],"using `concatMap":["f`"],"using `concat`":["or"],"using `countElem`":["for"],"using `count`":["in","to","in","to"],"using `digitToInt`":["you"],"using `do`":["in"],"using `do`.":["You'd"],"using `enumFromThenTo`":["(or","syntax"],"using `filter":["('elem'"],"using `filter`":["and","and"],"using `filter`,":["`length`,"],"using `filter`.":["Think"],"using `findWithDefault`":["for"],"using `first`":["from"],"using `flip":["const`"],"using `flip`":["by"],"using `fmap":["(amt"],"using `fmap`":["(or"],"using `foldl'`":["in","but","explicitly.","from","instead","from","in","from","for","instead","instead.","from","from"],"using `foldl'`,":["but","although"],"using `foldl'`.":["You","Nice"],"using `foldlStrict`":["under"],"using `foldl`":["with","and","unless"],"using `foldlstrict`":["with"],"using `foldr1":["(&&)"],"using `foldr`":["to","is","is","is","is","is","was","here.","to"],"using `foldr`,":["as"],"using `fromEnum`,":["`(/=)`","which"],"using `fromListWith":["(+)`"],"using `fromListWith`":["since","proven","for","to","-","on","instead","is","from","instead","for"],"using `fromListWith`,":["and","but","but"],"using `fromListWith`.":["You","I"],"using `groupBy`,":["`group`,"],"using `group`,":["`sort`,"],"using `guard`":["from"],"using `if`":["here,"],"using `import":["Data.Time.Calendar.WeekDate"],"using `insertWith":["(+)`","(+)`"],"using `insertWith`":["(but","or","inside","from"],"using `insertWith`.":["It's"],"using `intercalate":["\""],"using `isAlphaNum`":["as"],"using `isJibberish`":["for"],"using `isLower`,":["nice!"],"using `isSuffixOf":["\"?\"`,"],"using `isSuffixOf`":["is","as","to"],"using `isSuffixOf`,":["and","provided"],"using `k`":["directly"],"using `last`":["in",":)","is"],"using `length":["."],"using `length`":["in"],"using `loeb`":["to","to"],"using `mapM":["randomRIO"],"using `map`":["and","and","to","and","and","with","instead","and","as"],"using `map`,":["the"],"using `map`?":["It"],"using `mod`.":["Specifically,"],"using `modifyMVar`":["to"],"using `modifyTVar'`":["instead"],"using `modifyTVar`":["only.","can"],"using `module":["Anagram"],"using `newType`":["lead"],"using `newtype":["Dna"],"using `newtype`":["by","instead"],"using `not":["(null","(null"],"using `not`":["somewhere.","+"],"using `null`.":["For"],"using `on`":["from"],"using `primes`":["is","so","(~10"],"using `printf`":["was"],"using `randomRIO`":["would","instead"],"using `randomRIO`,":["I"],"using `remain`":["and"],"using `repeatUpdate`":["you"],"using `replace`":["function"],"using `return`":["for"],"using `reverse`":["and"],"using `rn`":["on"],"using `show":["c`"],"using `show`":["on","over"],"using `show`,":["really"],"using `sort`":["makes","in"],"using `splitAt`":["to","in"],"using `splitAt`.":["You"],"using `splitWhen`,":["you"],"using `sqrt`":["in"],"using `strip`":["or","to"],"using `sum`":["instead","and"],"using `take":["n"],"using `take`":["and"],"using `testBit`":["from","to"],"using `type`":["but"],"using `uncurry`":["and"],"using `unionWith`":["to"],"using `unlines`":["there","instead","and","and","and"],"using `unlines`.":["That"],"using `unsafePerformIO`.":["This"],"using `unwords`":["will"],"using `where`":["here?","or","is","would"],"using `where`,":["but"],"using `words":["."],"using `wordsBy`":["from","from","from","from","from","from","from","from","and","was"],"using `words`,":["but"],"using `zipWith`":["on"],"using `zipWith`,":["it"],"using `|":["guard"],"using `||`":["or","also"],"using a":["lambda","map","handy","custom","lambda,","different","set","Map","qualified","list","partial","function","function","combination","transform","list","`$`","regex","fold,","foldr","string","map","regular","lambda.","higher","Map","Map","map.","guard","left","manual","strict","newtype","function","standard","Map","more","guard","compiler","non-strict","left","few","simpler","strict","larger","different","custom","good","name","strict","list","case","`Control.Arrow`","Data.Array","list","table","list","list","`case`","lookup","Data.Map","`case`","list","map?","composition","lambda.","type","Map","`case`","Strict","\u003ccode\u003elet\u003c/code\u003e","`case`","`where`","different","flattened","function","higher","vim","difference"],"using accumulator":["in"],"using all":["function.","the","the"],"using alternative":["instance"],"using an":["`[(Int,","explicit","infix","older","at-pattern,","`UArray`","explicit","old","explicit","extensions,","argument","array","outdated","older","algorithmically","explicit","operator","inline","existing","old"],"using another":["operator","data","function"],"using any/all":["without"],"using anything":["terribly","from","from","outside"],"using are.":["This"],"using arithmetic":["is","instead"],"using binary":["operators?"],"using binomial":["coefficients"],"using boolean":["logical"],"using both":["```unwords```"],"using brackets":["in"],"using built-in":["list"],"using bytestring":["short"],"using code":["style"],"using count":["to"],"using data.map.strict":["to"],"using default":["null,"],"using difference":["lists,"],"using division":["when"],"using division,":["e.g."],"using do":["blocks"],"using doesn't":["need"],"using either":[".","```qualified```","State","guards"],"using enum":["instance"],"using error":["checking"],"using exercism,":["so"],"using explicit":["import","imports.","recursion,","imports"],"using exponentiation.":["Basically"],"using extensions":["for"],"using fewer":["comparisons,","case"],"using filter":["instead","but","(not"],"using fold,":["I"],"using foldM":["doesn't"],"using foldl'":["and","instead."],"using from":["there"],"using fromEnum":["and"],"using fromEnum/toEnum":["rather"],"using fromListWith":["(+).","(+),","for","from"],"using fromListWith.":["fromListWith"],"using function":["composition.","composition"],"using functionality":["from","from","from"],"using functions":["that","from"],"using ghci....":["Honestly,"],"using gregorianMonthLength":["instead"],"using guard":["expressions"],"using guards":["(as","instead","instead","is","and","here.","or","for",":)","might"],"using guards.":["Usually","To"],"using haskell-mode":["with"],"using head":["even"],"using higher":["order","level","level"],"using higher-order":["functions--they're"],"using homebrew":["on"],"using in":["an","your"],"using infix":["notation"],"using insert":["at"],"using int":["is"],"using is":["`unfoldr`"],"using isAlphaNum":["to"],"using isAnagram":["in"],"using isPunctuation,":["then"],"using it":["here?","for","in","with","in","in","from","more","and","like","as","here,","is","in","the","in"],"using it,":["we","but"],"using iteration":["instead"],"using its":["argument"],"using just":["arithmetic","`fromListWith`","arithmetic","simple","boolean","`foldl'`","`foldl'`","the","`M.findWithDefault`."],"using language":["extensions"],"using last,":["because"],"using lazy":["version","version"],"using left":["fold"],"using length,":["group,"],"using lens":["everywhere"],"using less":["of"],"using liftM2":["to"],"using lists":["and","at","versus","or","at",":)","for","at"],"using lists,":["it's"],"using lookup,":["so"],"using map":["vers","instead,"],"using map.":["But","I"],"using map/filter/zip/etc.":["rather"],"using math":["only.`"],"using mod":["4."],"using module-internal":["functions"],"using monads":["and"],"using monads.":["Using"],"using more":["named","things"],"using mutable":["refs."],"using natural":["number"],"using nested":["functions."],"using newtype":["is"],"using no":["higher"],"using normal":["functions","guards."],"using old":["value."],"using on":["the"],"using one":["in","of","to","dimention"],"using only":["a","the","zipWith,","functionality","functionality","one","one","functions","arithmetic,","purely","`Data.Map`","state","arithmetic,"],"using other":["functions","languages"],"using outside":["packages..."],"using parsec":["in"],"using partial":["functions"],"using pattern":["matching","matching,","matching","matching,","matching","matching:","matching","match","matching","matching"],"using permutation,":["try"],"using point-free":["notation."],"using pointfree":["style"],"using potentially":["crashy"],"using prefix":["notation:"],"using pure":["math"],"using qualified":["names"],"using quotRem?":["Sounds"],"using randomRIO":["is"],"using randomRs.":["This"],"using record":["syntax","syntax","syntax,","syntax"],"using recursion":["to","I"],"using recursion,":["would"],"using regex":["at"],"using regexes.":["Standard"],"using regular":["lists/strings?","expressions!"],"using regular,":["non-extended"],"using replace":["truly"],"using right":["now\"..."],"using runghc":["7.6.2"],"using second":["tip."],"using section":["syntax"],"using separate":["guards"],"using show":["instance"],"using show,":["since"],"using smart":["constructors."],"using some":["functions","external","kind","functionality","other","sort","predefined"],"using something":["old","like","like","like","opaque.","more"],"using sort":["and"],"using sort,":["the"],"using sorting":["in"],"using strict":["map"],"using string":["manipulations","literals","templating"],"using strip":["to"],"using such":["style"],"using sweet":["`Control.Arrow`"],"using syntactic":["constructs"],"using that":["in","value"],"using that.":["I"],"using the":["`where`","language","TupleSections","guards,","`Data.Char`","extra","M","`.`","pattern","parser","function","function","fact","function","Enum","same","range","map","TupleSections","predicates","line","nondeterministic","`STRICT_2_OF_4`","```C.toUpper","same","specialized","range","Data.List.Split","Haskell","type","type","monospace","state","code","functions","`fromEnum`","same","`State`","split","`Either`","Enum","`fromListWith`","Enum","value","\"prime\"","native","built-in","integer","list","fact","data","type","`{-#","same","rule:","4","`==`","same","already","```grade```"],"using them":["since"],"using them.":["The","Otherwise"],"using these":["on","kinds"],"using this":["method"],"using those":["in"],"using toUpper,":["isAlpha,"],"using too":["much"],"using two":["passes."],"using type":["aliases","annotations,"],"using typeclasses":["at"],"using union":["with"],"using union.":["Even"],"using unsafe":["functions,"],"using up":["a"],"using values":["that"],"using words":["from"],"using wordsBy":["from"],"using your":["code"],"using zeroCounts,":["then"],"using, and":["look"],"using, but":["most"],"using. Also":["using"],"using. It":["felt"],"using\u003ccode\u003eunlines\u003c/code\u003e? I'm":["already"],"usual convention.":["This","Or,"],"usual deadlock":["problems"],"usual left-associative":["rule"],"usual rule-of-thumb,":["although"],"usual some":["excellent"],"usual, so":["it's"],"usually I":["end"],"usually Show":["instances"],"usually a":["little","separate","specific","predicate."],"usually an":["issue),","issue"],"usually appears":["to"],"usually assume":["that"],"usually bad":["practice"],"usually be":["avoided,"],"usually best":["to","to"],"usually better":["to","expressed"],"usually both":["smaller"],"usually do":["it","with"],"usually do,":["but"],"usually does.":["thank"],"usually don't":["think"],"usually done":["in","for"],"usually expect.":["It's"],"usually find":["it"],"usually folds":["are"],"usually function":["names"],"usually goes":["on"],"usually good,":["but"],"usually have":["to"],"usually implemented":["with"],"usually indent":["the"],"usually indented":["2-4"],"usually is":["to"],"usually it":["result"],"usually it's":["preferred"],"usually just":["do"],"usually like":["to","to"],"usually looks":["like"],"usually named":["#"],"usually necessary":["to"],"usually negligible.":["This"],"usually no":["penalty"],"usually not":["the"],"usually only":["use","top-level"],"usually prefer":["to"],"usually preferable":["to","to"],"usually preferred":["to"],"usually put":["the","my"],"usually remember!":["Will"],"usually run":["my"],"usually see":["`Maybe","the"],"usually shouldn't":["be"],"usually suspicious":["of"],"usually the":["sorts","most"],"usually there's":["a"],"usually they":["look"],"usually try":["to"],"usually urged":["to"],"usually use":["it."],"usually used":["for"],"usually when":["you"],"usually works.":["You'd"],"usually write":["everything"],"usually written":["as","as","as","`toUpper","`bottlesOfBeer","as"],"usually..I knew":["there"],"utilising ```wordsBy```.":["Have"],"utility function":["or"],"utility functions":["not"],"utility in":["a"],"utility of":["compartmentalization"],"utilize Map":["to"],"utilize Set,":["check"],"utilize a":["strict"],"utilizing the":["RNA"],"utmost importance":["for"],"v (PrimState":["m)"],"v 2`":["it","was"],"v \u003c-":["newEmptyMVar"],"v =":["[]"],"v `divMod`":["c"],"v `seq`":["(Map.insert"],"v e,":["Ord"],"v map))":["Map.empty"],"v1 $":["insert","insert","insert","insert","insert","insert","insert","insert"],"v1 of":["this"],"v2 $":["…","…","…","…","…","…","…","…"],"v3 in":["readability/performance."],"v3 with":["the"],"v3, you":["should"],"v` and":["another"],"v` case,":["even"],"v` is":["a"],"v` shouldn't":["be"],"v` to":["sidestep","return"],"val ::":["a"],"val back":["into"],"valiant covering":["and"],"valid 'shouting'":["strings"],"valid (only":["\"ACGT\")."],"valid DNA":["nucleotides","string"],"valid cases":["and"],"valid chars":["and"],"valid dna":["sequence."],"valid handle":["it,"],"valid input":["of"],"valid into":["one"],"valid matches":["are"],"valid nucleotide":["(even"],"valid or":["not."],"valid phone":["number"],"valid question":["to"],"valid range":["to"],"valid results":["in"],"valid separator":["should"],"valid syntax":["to"],"valid syntax,":["you","all"],"valid syntax.":["Also"],"valid the":["following"],"valid to":["leave"],"valid triangle":["that"],"valid variable":["character"],"valid, and":["throw"],"valid. However":["I"],"valid. I":["have"],"validNucleotide =":["(`Set.member`","(`elem`"],"validNucleotide test":["by"],"validNucleotide, some":["people"],"validate function":["to"],"validate nucleotide":["characters"],"validate the":["input."],"validate this":["exercise."],"validate were":["more"],"validateLength into":["one"],"validates all":["its"],"validating the":["input","input"],"validation is":["not","not"],"validation test":["made"],"validation; from":["the"],"validations, but":["couldn't"],"value (for":["strict"],"value *out*":["of"],"value -":["what"],"value 1":["if","even"],"value `None`.":["And"],"value `year`,":["and"],"value accumulating":["function,","function"],"value and":["the","will","get","get","return","this","test","thunk","a"],"value around,":["but"],"value back":["in"],"value being":["stored","inserted"],"value can":["be"],"value contained":["by"],"value for":["all","`normalize","some","non","prime,"],"value from":["right):","\u003cvalue\u003e","the","your"],"value if":["there's","and"],"value in":["the","the","single","the","the","the","a","context.","the","map","map"],"value inside":["the","computational"],"value instead":["of"],"value into":["WHNF,"],"value is":["forced.","forced.","forced,","needed.","never","forced.","the","returned","forced)","evaluated","forced","forced"],"value laziness":["means"],"value lazy":["as"],"value lazy,":["so"],"value like":["you"],"value multiple":["times?"],"value of":["`o","the","`all","the","the","`old","`n`","`acct`","the","the","every","nucleotide","maybe"],"value or":["parse"],"value out":["will","of"],"value outer":["filter"],"value outside":["of"],"value p1":["passes"],"value result":["of"],"value should":["be"],"value so":["it","you"],"value strict":["so","versions","version"],"value strict,":["which"],"value strictness":["issue.","problem","issue","is"],"value such":["that"],"value that":["gets","you","you've"],"value to":["be","add","`(count","result,","the"],"value will":["be","be","be"],"value with":["custom","suspended"],"value would":["look"],"value\" if":["there"],"value) n":["="],"value) pairs.":["This"],"value) that":["stores"],"value)` is":["often"],"value, `(+1)":["\u003c$\u003e"],"value, `xs`":["for"],"value, and":["when"],"value, but":["nothing"],"value, if":["it"],"value, so":["you","why"],"value, then":["I"],"value, where":["Data.Map.Strict"],"value, which":["I"],"value-laziness of":["Data.Map","Data.Map"],"value-lazy Map":["implementation"],"value-lazy here,":["and"],"value-lazy implementation,":["which"],"value-lazy implementation.":["For"],"value-lazy map":["is"],"value-lazy or":["value-strict"],"value-lazy so":["this","this","the","`fromListWith`","if","it","using"],"value-lazy the":["`length","`(+)`"],"value-lazy variant.":["Updating"],"value-lazy version":["of","is"],"value-lazy you":["really"],"value-lazy, it's":["much"],"value-lazy, so":["you","once","they","this","this"],"value-lazy, this":["code"],"value-lazy, which":["is"],"value-lazy, you":["are"],"value-lazy. Changing":["the"],"value-lazy. Check":["out"],"value-lazy. For":["a","more"],"value-lazy. In":["order","order"],"value-lazy. The":["data"],"value-lazy. To":["get"],"value-strict (I":["suppose"],"value-strict Map":["for"],"value-strict `Map`":["here."],"value-strict is":["important"],"value-strict map":["so","so"],"value-strict map,":["it"],"value-strict respectively.":["Value-strict"],"value-strict so":["you"],"value-strict version":["of"],"value-strict version.":["For"],"value-strict versions":["of","of"],"value-strict versions.":["The"],"value-strict, so":["the"],"value-strict, you":["can"],"value-strict. Check":["the"],"value-strict. If":["you"],"value. Can":["you"],"value. For":["example:"],"value. How":["all"],"value. It's":["good"],"value. Not":["using"],"value. On":["a"],"value. This":["works"],"value\u003cpre\u003eisYell xs":["="],"value? I'm":["curious"],"valuePairs` and":["maybe"],"valued aesthetic":["quality"],"valued chars":["implicit."],"valued will":["be"],"values (not":["only"],"values (often":["used"],"values (such":["as"],"values (this":["makes"],"values (value:value-based-on-the-1st-neighbours:value-based-on-the-2nd-neigh...)":["this","this"],"values (which":["you"],"values along":["with"],"values and":["had","give"],"values are":["forced?","put","forced","always","non-strict","functors,","not","not"],"values as":["a","a"],"values as-is,":["since"],"values at":["least"],"values can":["be"],"values defined":["inside"],"values exactly":["without"],"values for":["your","adding","each","non-appearing"],"values from":["generator."],"values having":["the"],"values in":["sorted,","this","the","the","Data.Map","Data.Map","Data.Map","the","the","test"],"values instead":["of"],"values into":["WHNF.","one","two"],"values lazily":["here."],"values more":["closely"],"values need":["to"],"values of":["type","`letters`","`n`","```True```"],"values on":["the","insert","the"],"values out":["of"],"values so":["you","you","you","you"],"values that":["go","I","doesn't","should"],"values there":["would"],"values through.":["Ah"],"values to":["the","be","WHNF,"],"values unless":["the"],"values using":["those?"],"values which":["do"],"values will":["be","be"],"values you":["are","end"],"values\". Stuff":["like"],"values), ```Data.Map```":["would"],"values, as":["a"],"values, but":["this","this"],"values, instead":["of"],"values, like":["\"IV\","],"values, not":["only"],"values, so":["it","this"],"values, some":["don't"],"values, there":["is"],"values, whereas":["if"],"values. Either":["keep"],"values. Here's":["an"],"values. I":["don't"],"values. It":["will"],"values. Pattern":["matching"],"values. The":["`Text`","non-recursive"],"values. This":["led","is"],"values? Or":["am"],"van use":["such"],"vanilla function":["composition?"],"vanilla setup,":["but"],"var/function for":["`shouting`,"],"variable (S).":["The"],"variable Am":["(`Am","(`M"],"variable As":["(`As","(`S"],"variable Bs":["(`Bs","(`S"],"variable `grade`":["shadows"],"variable `isLong`":["or"],"variable `possibleAnagrams`":["in"],"variable `word`":["in"],"variable and":["a","separate","function"],"variable as":["you"],"variable as-is,":["but"],"variable binding":["for","in","so","doesn't","or"],"variable bindings":["for","really","that","to","to"],"variable but":["I","it's"],"variable character":["your"],"variable entirely:":["`anagramsFor"],"variable for":["`length","`numbers","(only)"],"variable from":["responseFor.","the","the"],"variable in":["a","all","guards.","a","data"],"variable inside":["your"],"variable is":["on"],"variable just":["didn't"],"variable name":["`s`,"],"variable names":["(`f`","are","for","in","in","(easier","you","are","which"],"variable names,":["since"],"variable names.":["Will"],"variable naming":["in"],"variable on":["the"],"variable since":["you"],"variable so":["that","that","`.`"],"variable that":["explicitly","may","is"],"variable that's":["on"],"variable to":["get"],"variable with":["underscore"],"variable you":["can"],"variable(s) such":["that"],"variable, and":["you"],"variable. Eta":["reduced"],"variable. There's":["no"],"variable/function names":["and"],"variables (IORef)":["and"],"variables (either":["of"],"variables /":["functions."],"variables `likeThis`":["instead"],"variables and":["functions","is"],"variables are":["given"],"variables at":["all,"],"variables easier":["(and"],"variables for":["lower"],"variables in":["the","code"],"variables inside":["your"],"variables is":["the","to"],"variables it":["would"],"variables of":["that"],"variables so":["that"],"variables that":["end","aren't","are"],"variables to":["make"],"variables, so":["you"],"variables/functions would":["help"],"variables… the":["current"],"variance introduced":["by","by"],"variance is":["moderately","moderately"],"variant --":["with"],"variant do":["not"],"variant has":["very"],"variant here,":["foldl'"],"variant in":["a"],"variant of":["this","functions","structure","left","```M.Map```,","```Data.Map```,"],"variant point-free":["by"],"variant, I":["think."],"variant. Updating":["the"],"variants are":["essentially"],"variants on":["lists."],"variations on":["\"offset\"."],"various combinators":["that"],"various common":["folds"],"various conditions":["to"],"various lines":["and"],"various places":["because"],"various popular":["libraries,"],"various scripts,":["Roman"],"various things":["surrounding"],"various ways":["to"],"vars feel":["like"],"vars or":["the"],"vars. I":["did"],"vary quite":["a"],"vary the":["number"],"vastly different":["behavior."],"vastly the":["hardest"],"ve calculated":["length"],"vecot and":["then"],"vector Api":["a"],"vector is":["highly"],"vector library":["works","support"],"vector of":["vectors"],"vector parameter":["where"],"vector-fixed package":["and"],"vectors because":["of"],"vectors may":["be"],"veering quite":["far"],"verbatim. It's":["probably"],"verbiage in":["`isAllergicTo`."],"verbose and":["ugly.","more"],"verbose but":["it"],"verbose for":["me."],"verbose than":["I"],"verbose then":["you"],"verbose to":["write"],"verbose using":["a"],"verbose, and":["perhaps"],"verbose, but":["that's"],"verbosity for":["more"],"verbs (such":["as"],"verify my":["knowledge."],"verify post-condition":["(mainly"],"verify that":["they","no"],"vers with":["a"],"verse $":["versesToSing"],"verse 0":["="],"verse [b,":["b-a,"],"verse [from,":["from-1"],"verse [from..to]`":["is"],"verse a":["++"],"verse and":["sing"],"verse but":["this"],"verse for":["0"],"verse function":["by"],"verse function.":["Is"],"verse happens":["if"],"verse n":["++"],"verse to":["compress"],"verse using":["`unlines`"],"verse) .)":[".","."],"verse) `compose2`":["revlist"],"verse, but":["it"],"verse. It's":["back."],"verse...` since":["otherwise"],"verseComponents return":["a"],"verseComponents separate":["functions."],"versePartTwo i`:":["function"],"verse` I":["think"],"verse` on":["that"],"verse` with":["`enumFromThenTo"],"versed in":["Scrabble,"],"verses after":["manually"],"verses and":["use","concatenation"],"verses go":["in"],"verses without":["`reverse`"],"verses, but":["I"],"versesToSing start":["end`."],"version (I'd":["use"],"version (although":["it's"],"version (using":["time"],"version (which,":["I"],"version -":["all"],"version 0.5,":["replaced"],"version 1":["still"],"version 2":["and"],"version 7.6.3:":["http://www.haskell.org/ghc/"],"version AppError":["e"],"version I":["meant,"],"version `foldl'`":["from"],"version `modifyTVar'`":["in"],"version above,":["which"],"version actually":["reads"],"version and":["binary","it","the","`snd`","hopefully","the"],"version as":["per","others"],"version because":["something"],"version being":["better"],"version better":["however,","than"],"version better.":["(for"],"version but":["I"],"version coming":["up..."],"version doesn't":["use","force"],"version either.":["I'm"],"version even":["more"],"version first.":["I"],"version forces":["accumulator,"],"version from":["Data.Map.Strict.","Data.Map.Strict"],"version has":["all","the","a"],"version here,":["as","the"],"version in":["your","your","GHC's","thanks","your","tests."],"version is":["here","much","probably","that","that","concise,","more","stores","positively","only","O(","a","not","shorter.","written","faster","outdated","good"],"version it":["doesn't"],"version left":["in"],"version like":["that."],"version look":["like?"],"version looks":["a","good","and"],"version much":["more","better."],"version of":["`words`","the","question?","isShouting","`or`?","`isSuffixOf`","this","`replace`","the","the","the","the","your","`convert`","`(+)`","the","`fromListWith`","`a'`","`isSeparator`","Scrabble","Map's","this","`(.)`","collections,","shout?","that","this","the","`f`","`f`.","`\\xs@(x:more)","`fromListWith`.","`justIf`","containers","this","`isQuestion`","a","the","`foldl`","function","string,","`fromListWith`","vector","Map,","map","map,","Data.Map","robot","robot","robot.","Map","the","Map","Map","map","the","all","map","folding","`xs`","function","Data.Map","map","Data.Map","`tallyWord`","Map.","this","maybe","the","GHC","Haskell"],"version or":["not."],"version prevents":["this"],"version qualified":["then"],"version ran":["at"],"version removed":["a"],"version seems":["to"],"version some":["other"],"version soon":["after"],"version that":["uses","it","uses","is","uses","works","uses"],"version that's":["just"],"version the":["`invalid`"],"version though":["I'll"],"version to":["avoid"],"version using":["function","it","`Data.Bits`","`map`,","replace"],"version was":["using","fairly"],"version were":["made,"],"version where":["I've","it"],"version will":["not"],"version with":["inlined","`fromListWith`,","those","those","type","Unboxed","a","mutable","\"insertWith\"","more"],"version without":["external"],"version would":["be","be","work","`map","be","probably"],"version you":["have"],"version, I":["suppose,"],"version, and":["I","tried"],"version, but":["all","that's"],"version, it":["seems"],"version, since":["you"],"version, that":["I"],"version, they":["were"],"version, things":["are"],"version, using":["pattern"],"version, which":["I"],"version, without":["optimization"],"version. (Although":["it"],"version. But":["I'm"],"version. Changed":["to"],"version. For":["this"],"version. Having":["point"],"version. I":["rewrote","hope","am","assumed","think"],"version. If":["you"],"version. Less":["keen"],"version. Sorry":["for"],"version. This":["way","is"],"version. Well":["done!"],"version. see":["`Revision"],"version.. I'll":["add"],"version: it's":["much"],"version? Should":["we"],"version? or":["something"],"versions -":["I"],"versions I":["preferred"],"versions because":["I'm"],"versions before":["adding"],"versions instead.":["You"],"versions of":["`a`.","all","those","`containers`","`x`","the","the","s","string","this","common","GHC","`insertWith`"],"versions passed":["all"],"versions probably":["run"],"versions they":["moved"],"versions version":["to"],"versions you've":["done"],"versions, not":["\"to"],"versions. Keeps":["all"],"versions. The":["`length`","current"],"versus a":["single"],"versus mapping":["over"],"versus something":["like"],"versus the":["O(n)"],"versus what":["you"],"versus yours":["which"],"very \"discoverable\"":["-"],"very Haskell-y.":["Neither","How"],"very accessible)":["explanation"],"very ambiguous":["and"],"very bad":["performance","complexity."],"very beautiful":["and"],"very carefully":["read"],"very cheap":[":)"],"very clear":["how","what","what"],"very clearly":["represent"],"very clunky":["and"],"very common":["though.","modules","idiom","to"],"very commonly":["used","used"],"very compact":["representation,"],"very complex":["sort"],"very complicated":["semantics"],"very concise":["way,"],"very concise.":["Maybe"],"very concisely":["with"],"very cool,":["I"],"very cool.":["Looks"],"very curious":["to"],"very dark":["haskell"],"very declarative.":["Saying"],"very descriptive":["name,"],"very different":["from","going"],"very difficult.":["The"],"very directly":["from"],"very easily":["write","avoid"],"very easy":["way","to","to","in","(I'm"],"very efficient":["(`add`","when"],"very efficient,":["as"],"very efficient.":["`((\"\""],"very enamoured":["of"],"very far":["with"],"very fast":["algorithm","lookup,"],"very fast.":["This"],"very first":["character","lines"],"very fixed":["small"],"very fond":["of"],"very fragile.":["And"],"very generic.":["I'm"],"very gentle":["if"],"very good":["style","idea.","suggestion","way","practice,","reason","advice,","signatures","point","at","way","error","choice"],"very good.":["Another"],"very handy":["with"],"very happy":["about"],"very hard":["to","to"],"very haskell-y":[":)"],"very haskellian...)":[":-)"],"very helpful":["(see","about"],"very helpful.":["I'm"],"very high":["precedence","level,"],"very highly":["recommend"],"very impressed.":["I've"],"very inefficient":["way","because","to","due","to","because","(linear","for","because"],"very inefficient).":["Consider"],"very inefficient.":["You"],"very interesting":["point,","reading.","though."],"very interesting,":["although"],"very interesting.":["I","The"],"very large":["inputs),"],"very least,":["I"],"very likely":["to"],"very local":["to"],"very long":["String,"],"very low":["precedence"],"very minor":["nits.","and"],"very much":["like","dislike","for","again.","for","like","nested.","for","a","like","with","overkill"],"very much!":["It"],"very much,":["but"],"very neat":["(IMO)","trick"],"very neatly":["by","using"],"very new":["to","to","to"],"very newbie":["in"],"very nice":["clean","-","solution.","-","first","first","solution,","explanation","approach","formatting","but","way.","approach"],"very nice!":["Is"],"very nice.":["Not"],"very nicely":[":-)"],"very noticeable":["if"],"very obvious,":["and"],"very organized.":["I've"],"very picky":["nit"],"very pythonic":["(or"],"very quickly.":["Is"],"very readable":["of","code,","or"],"very readable,":["which","so"],"very readable.":["And"],"very restrictive":["manner..."],"very same":["trick"],"very sensible":["to","definition"],"very short":["names,"],"very similar":["to","to","to","to","issue","to","problem."],"very similar,":["can"],"very similar.":["This"],"very simple":["matter","too,","code","case","way"],"very simplified":["approach"],"very simply":["as","with"],"very slightly":["sped"],"very slow":["algorithm.","relative"],"very slow,":["`unique`"],"very small":["nits","scope"],"very smart":["to"],"very sorry":["for"],"very specialized...":["seemingly"],"very specific":["anyway.","permutation","case"],"very straightforward":["path...","solution."],"very strange":["implementation"],"very strange,":["so"],"very subjective":["on","style"],"very succinct":["-"],"very sure":["about"],"very true,":["thanks"],"very true.":["I"],"very typical":["name"],"very ugly.":["So"],"very uncommon":["type."],"very useful":["tips","stuff,","when","in","here.","here"],"very useful.":["Much"],"very visually":["pleasing"],"very well":["in","known,"],"very well,":["but"],"via Control.Arrow":["??`"],"via `error`":["is"],"via `module":["DNA"],"via a":["linked","fold"],"via apt-get":["on"],"via cabal.":["Just"],"via folding":["with"],"via hoogle:":["http://www.haskell.org/hoogle/?hoogle=%5BString%5D+-%3E+String"],"via the":["application"],"via trial-and-compiler-error":["and"],"via two":["methodologies:"],"via use":["of"],"view as":["being"],"view my":["first"],"view you":["may"],"view. Variables":["and"],"viewing changes":["in"],"viewing code":["within"],"viewing other's":["code"],"vim integration":["script"],"vim user.":["I"],"vim, and":["next","I'm"],"vim-hdevtools, but":["I"],"virtue of":["not"],"visible in":["a","a"],"visible only":["in"],"visible spot":["for"],"visible structures":["should"],"visible to":["the"],"visual representation":["of","of"],"visually pleasing":[";-)."],"visually, but":["I"],"vn $":["M.empty`"],"vn empty.":["When","When","When","When"],"vn empty`":["and"],"vn empty`.":["When","A"],"voice =":["null"],"voice ==":["'?'`"],"voice` or":["even"],"void .":["forkIO"],"void can":["make"],"void that":["lambda"],"voluntarily just":["uses"],"vote for":["pattern"],"vs \"last\".":["I"],"vs \"m":["x\""],"vs \"make":["program"],"vs `.`":["to"],"vs `all`:":["True,"],"vs `let`;":["is"],"vs calling":["`sort`"],"vs guards;":["I"],"vs knowing":["about"],"vs lazy":["when"],"vs one":["in"],"vs the":["map:","strict"],"vs ~1":["sec)"],"vs. Where](http://www.haskell.org/haskellwiki/Let_vs._Where)":["after"],"vs. `(sort":["."],"vs. column":["major"],"vs. the":["more"],"w .":["filter"],"w /=":["a","a"],"w \u003c-":["wordsBy"],"w =":["map","map","map","[(w,","filter"],"w ==":["sort","a).","sort","sort","sort"],"w being":["computed"],"w\" (sort":["w)"],"w' &&":["(sort"],"w' =":["normalize","..."],"w' in":["lambda?"],"w' will":["be"],"w' x":["&&"],"w) $":["tell"],"w) =":["toWeekDate"],"w) ==":["sort"],"w) `mod`":["7"],"w))`, to":["only"],"w)` is":["evaluated"],"w)` vs.":["`(sort"],"w)` without":["even"],"w)`, either":["is"],"w)`, pulling":["the"],"w. I":["was"],"w/o big-O":["notation:"],"w/o guards,":["you"],"w/o introduction":["of"],"w/o optimizations).":["Seems"],"w0 1":["M.empty))"],"w1 (f":["w2"],"w1 /=":["w2"],"w1 1":["(insertWith","(Map.insertWith"],"w1 =":["let"],"w1 ==":["length"],"w1 _1)`.":["When"],"w1 in":["w1'"],"w1' =":["sortAndLower"],"w1' ==":["sortAndLower"],"w1` are":["computed"],"w1` is":["only"],"w2 &&":["w1"],"w2 (f":["w3"],"w2 1":["(insertWith","(Map.insertWith"],"w3 (f":["w4"],"w3 1":["(…"],"w4 …)))))`":["and"],"w\u003c/code\u003e on":["line"],"w` are":["evaluated"],"w` could":["also"],"w` even":["though"],"w` in":["the"],"w` makes":["sense"],"w` with":["```toEnum"],"w` you":["can"],"w`, although":["I"],"wacky pretty":["quickly."],"wade through":["the"],"wait all":["night"],"wait for":["that).","more"],"wait until":["that","I"],"wait, getting":["a"],"waited for":["nits"],"waiting hopelessly":["for"],"waits the":["MVar"],"walking each":["list"],"walking the":["entire"],"walks the":["array"],"wall and":["seeing"],"wall\")`. Not":["a"],"wall, \",":["bottles"],"wall, no":["more"],"wand to":["go"],"want Data.Map.Strict":["for"],"want Float":["or"],"want `School`":["to"],"want `deriving":["(Enum,"],"want `foldl'`'s":["accumulator"],"want `isDigit`":["instead"],"want a":["Map","more","left","value-strict","Char","readable","strict","value-strict","left","spoiler):","left","String.","spoiler,","helper"],"want and":["bench"],"want any":["information"],"want anyone":["(including"],"want as":["long"],"want but":["generates"],"want by":["dropping"],"want changed,":["and"],"want default":["solution"],"want for":["a","`liftM2`"],"want from":["document"],"want here,":["you"],"want here.":["The"],"want is":["this:"],"want it":["to,","to","to.","to","to,","(for"],"want me":["to"],"want modified":["(and"],"want more":["feedback"],"want my":["`Enum`"],"want some":["extra","hints,"],"want sorted":["output."],"want strict":["values"],"want the":["result","next","bearing","strict"],"want then":["I"],"want to":["consider","remove","swap","use","use","see","use","pass","continue","consider","crack","do","consider","use","write","find","use","limit","discuss","use","try","consider","test","try","keep","consider","write","take","export","rename","cheat.","submit","pull","use","try","write","exclude","count","improve","change","move","use","use","manually","know","do","use","pattern","consider","keep","return.","stick","stick","import","check","remove","consider","stick","use","involve","be","do","use","submit","give","avoid","use","make","go","change","take","express","sanitize","use","ever","consider","move","make","point","take","use","use","note","look","bind","use","check","think","do","start","make","use","change","use","learn","write","eliminate","get","have","take","stick","use","use","score","write","do","use","use","use","take","reignite","tell","switch","talk","use","do","use","use","learn","add.","load","use","import","code","use","import","try","do","use","split","use","use","compare","be","keep","ensure","think","try","ensure","add","take","use","ensure","make","work","add","write","use","range","see","submit","dive","build","run","be","use","need","use","make","use","use","keep","achieve","use","try","review","use","accomplish","eta-reduce","rewrite","benchmark","use","use","use","try","start","continue","read","keep","pass","consider","get","use","use","accomplish","expose","export","move","use","see","introduce","```import","look","define","use","deal","use","remove.","just","error","emphasize","do",":)"],"want to.":["I","`verse"],"want with":["`School`,"],"want you":["could","to"],"want your":["function"],"want, and":["treat"],"want, ie.":["mapping"],"want, just":["use"],"want. For":["example,"],"want. It's":["a"],"want. Most":["solutions"],"want/need to.":["With"],"want: read":["."],"wanted **something**":["posted."],"wanted `hexCharToInt`":["to"],"wanted a":["plain","solution","fully"],"wanted encapsulation":["without"],"wanted it":["seems.","finished."],"wanted look":["at"],"wanted one":["then"],"wanted something":["short"],"wanted the":["count"],"wanted to":["use","go.","use","it's","compute","do","try","avoid","avoid","be","be","do","use","escape","make","be","play","make","write","make","get","say.","encourage","put","play","try","point","calculate.","post","implement","try","show","optimize","let","try","see","point","use","make","play","guarantee","write","provide","outsmart","try","try","avoid","use","get"],"wanted to,":["there"],"wanted you":["could"],"wanted. Interesting":["thing"],"wanting to":["be"],"wants `readsPrec`":["to"],"wants the":["result"],"wants to":["prioritize","do.","do."],"warn about":["instancing"],"warn me":["that"],"warn of":["redundant"],"warn that":["it's"],"warn you":["about","about","about"],"warned about":["that."],"warning (since":["`^`"],"warning about":["that","an","with","non-exhaustive"],"warning for":["this","this","it)."],"warning go":["away"],"warning here":["for"],"warning if":["it's"],"warning in":["`squareSize`"],"warning is":["like"],"warning since":["the"],"warning that":["my"],"warning with":["this","-Wall"],"warning without":["the"],"warning you":["mentioned"],"warning, but":["only"],"warning, in":["order"],"warning. I":["think"],"warnings about":["incomplete","incomplete","unused"],"warnings are":["already"],"warnings enabled?":["(`-Wall`"],"warnings for":["your"],"warnings in":["case"],"warnings on":["non-exhaustive"],"warnings when":["I"],"warnings, but":["I'm"],"warnings, unlike":["if"],"warns you":["about:"],"warts 'n'":["all"],"wary of":["flip."],"was \u003cpre\u003ereducedN":["="],"was I":["wasn't"],"was Just.":["Then"],"was [added](https://github.com/kytrinyx/exercism.io/commit/2476edf358c563f7e84a899c86011a6a71070954)":["only"],"was [searching":["for"],"was `null":["rest'`"],"was a":["language","time","bit","thorn","side","library","name","member","complexity","little","frustrating","good","way","misunderstanding","bit","function","great","reason","little","little","good","great","cakewalk.","little","big","crazy","bit","lot","better","bit","catalyst","superfluous","`safeToEnum`...","reference","strict","way","way","little","reason","list","typo.","really","different","remnant"],"was able":["to","to","to"],"was actually":["comments"],"was added,":["that"],"was after..":["I've"],"was already":["an","scanned"],"was also":["not","wasted","thinking","thinking"],"was always":["under"],"was an":["improvement","unsolicited","accident,","invalid"],"was annoyed":["by"],"was another":["instance"],"was arguing":["for"],"was at":["pains"],"was aware":["of"],"was based":["on"],"was being":["exported.","responded","a","used.","used"],"was best":["practice.","in"],"was better":["to"],"was better,":["it"],"was better.":["It"],"was blinded":["by"],"was both":["in"],"was called":["something"],"was called.":["It's"],"was cargo":["culting"],"was changed":["this"],"was clearer.":["I"],"was comfortable":["with"],"was commented":["on"],"was compiling":["in"],"was completely":["unequipped","lost,"],"was composing":["the"],"was confused":["on"],"was dead":["code,"],"was defined":["in"],"was described":["in","in"],"was developed":["as"],"was disappointed":["that"],"was dissatisfied":["with"],"was divisible":["by"],"was doing":["`sort","that","`intercalate"],"was doing.":["Probably"],"was done":["to","this","via","and","that"],"was done,":["and"],"was driven":["by"],"was driving":["at"],"was even":["valid"],"was ever":["modified"],"was exactly":["what","the"],"was expected":["you"],"was expecting":["to"],"was fairly":["short,","unreadable"],"was fed":["in,"],"was fine":["too."],"was fixated":["on"],"was found,":["can"],"was frequency":["map"],"was from":["https://www.haskell.org/haskellwiki/Fold."],"was fun":["to","to"],"was getting":["myself","that,","a"],"was giving":["me"],"was going":["through","to","to","to","to","on.","on","on.","nuts","to","to"],"was gonna":["handle"],"was good":["style","to"],"was great,":["but"],"was happy":["with","because"],"was horribly":["slow,"],"was ignoring":["the"],"was important":["that"],"was imported":["from."],"was impossiblt":["to"],"was in":["my","error.","a","the","Haskell.","the"],"was indeed":["cleaner,"],"was it":["either)."],"was it,":["and"],"was juggling":["the"],"was just":["curious.","my","using","relieved","overly","what","looking","thinking","a","going","porting","teasing","the","lucky","awful;","thinking","going","looking","an"],"was kind":["of","of","of"],"was lazy":["to"],"was left":["over"],"was looking":["for","for","for","for,","at","for","around","for.","for"],"was lucky":["that"],"was maddeningly":["close,"],"was made":["easier"],"was maybe":["better"],"was meaningful":["and"],"was mistaken":["-"],"was moderately":["more"],"was more":["expressive","or","to","idiomatic"],"was most":["uncertain"],"was much":["simpler","more"],"was my":["original","approach","first"],"was n":["characters/bytes"],"was necessarily":["the"],"was necessary":["to"],"was nice":["because"],"was no":["need"],"was not":["really","such","insanely","aware","able","the","something","incremented","exhaustive."],"was null":["or"],"was obvious,":["I'm"],"was okay":["since"],"was once":["you"],"was one":["of"],"was optimized":["a"],"was optimizing":["for"],"was originally":["porting"],"was overkill":["when"],"was overkill,":["and"],"was overkill;":["this"],"was particular":["test"],"was partly":["due"],"was passed,":["so"],"was planning":["to"],"was pointed":["out"],"was ported":["from"],"was porting":["it"],"was possible":["to","to"],"was pretty":["relaxing","annoying,","much"],"was probably":["not","just","taking","being"],"was questing":["for"],"was quite":["good"],"was readed":["from"],"was reading":["too","a","that"],"was really":["cool!","itching","nice,"],"was recently":["taught,"],"was recommended":["to"],"was referring":["to","to."],"was relavent.":["Also,"],"was returning":["whitespace/other"],"was semantically":["clearer,"],"was shown":["to","on"],"was simplified":["considerably"],"was slightly":["faster.","shorter"],"was so":["obvious..","easy.","simple,"],"was some":["kind"],"was somehow":["aborted),"],"was someone":["on"],"was something":["nice"],"was somewhat":["discouraged","tempted","satisfying"],"was sorted":["incorrectly."],"was starting":["to"],"was strict,":["otherwise"],"was structured":["that"],"was stuck":["on"],"was successful":["or"],"was super":["heavy."],"was supposed":["to","to"],"was sure":["it"],"was surprised":["at"],"was talking":["about"],"was that":["`s","`toLower`","we","values"],"was the":["wrong","where","exercise","first","point","part","following:","function","last"],"was then":["lift(?)"],"was thinking":["at","about","about","more","of","earlier.","with","to","when","to","about"],"was third":["in"],"was to":["help","encapsulate","have","make","implement","be","show","allow"],"was too":["lazy","ultimate,"],"was totally":["gratuitous."],"was troubleshooting":["stuff"],"was trying":["to","to","to","to","to","to","to","to","to","to","to","to"],"was ugly":["as"],"was ultimately":["deemed"],"was unable":["to"],"was unaware":["of"],"was under":["the","the","the"],"was unfamiliar":["with"],"was unsure":["about."],"was updated":["to"],"was uploaded":["prematurely."],"was using":["string","`Bool`","an","an","\u003c*"],"was vastly":["the"],"was very":["clear","helpful","cluttered."],"was when":["I"],"was whitespace":["after"],"was why":["I"],"was wondering":["how","how","if","about","if","about","how","how","what","why","whether"],"was wondering,":["how"],"was writing":["this,","this","from","from"],"was written":["in"],"was written,":["the"],"was wrong":["about",":)"],"was't in":["the"],"was, and":["I"],"was, that":["`Map.insertWith"],"was. I":["only"],"was. Still,":["I"],"wasShouted msg":["="],"wasn't \"meant\"":["to"],"wasn't a":["top-level","leap","very"],"wasn't actually":["suggesting"],"wasn't any":["faster"],"wasn't aware":["of","of","of","that"],"wasn't buying":["me"],"wasn't explicit":["but"],"wasn't familiar":["with","with"],"wasn't fast":["enough"],"wasn't going":["to"],"wasn't installed.":["With"],"wasn't making":["a"],"wasn't much":["fond"],"wasn't on":["completely"],"wasn't paying":["enough"],"wasn't pointless":["-"],"wasn't quite":["clear"],"wasn't really":["happy","sure"],"wasn't referring":["to"],"wasn't so":["ugly,"],"wasn't specified":["that"],"wasn't sure":["how","how","if","of","how","if","if","how","how.","how","what","why","as","if","about"],"wasn't that":["much"],"wasn't there":["when"],"wasn't too":["happy","bad."],"wasn't using":["`unlines`."],"wasn't value":["strict..."],"wasn't working":["in"],"wasn't worth":["it"],"waste of":["time,"],"wasted work.":["It's"],"wasteful to":["build"],"wasteful, it's":["a"],"wastes a":["lot"],"watch your":["memory"],"way (a":["complex"],"way (better":["algorithm"],"way (in":["this"],"way (not":["really"],"way (without":["using"],"way -":["to"],"way :)":["Something","very"],"way Haskell":["solutions"],"way Haskell's":["non-strict"],"way I":["chose","would've","can","know","wrote","could","don't"],"way I've":["done","found"],"way `reverse`":["traverses"],"way `robotName`":["reads"],"way `shouting`":["is"],"way `unlines`":["and"],"way a":["general","bad"],"way and":["that","incrementing","see"],"way around":["that","this","it","this","this"],"way around).":["Note"],"way around,":["the","since"],"way as":["the","a","any","`a"],"way because":["I"],"way better":["than"],"way better,":["thanks!"],"way but":["I","didn't","they"],"way database":["transactions"],"way either,":["I"],"way ended":["up"],"way for":["errors","`Teenth`","the","doing","fun"],"way from":["Data.Map"],"way full":["list"],"way if":["you"],"way implement":["advance,"],"way imports":["are"],"way in":["all","Haskell."],"way instead":["of"],"way is":["that","to","to","better","to","to","to","to","fine.","`all","to","fine","to","to","to","probably"],"way it":["takes","would","is","should","is","looks","would"],"way it'd":["be"],"way it's":["used"],"way less":["memory."],"way looks":["better"],"way means":["that"],"way might":["be"],"way more":["neat.","efficient","complicated","complicated","descriptive."],"way myself":["in"],"way non-strict":["evaluation"],"way of":["getting","expressing","doing","utilizing","doing","getting","doing","thinking","thinking","sorting","setting","thinking","putting","thinking!","exposing","doing","writing","writing","saying","simply","naming","representing","writing","rewriting","using","writing","handling","declaring","using","working","defining"],"way only":["because"],"way or":["the","the"],"way originally,":["but"],"way out":["with"],"way out.":["It's"],"way pickSchedule":["reads"],"way round":["you"],"way seems":["easier"],"way since":["it's"],"way so":["that"],"way step":["size"],"way test":["cases"],"way than":["```a","this","concatenating"],"way that":["you","this","this","your","it","you","your","I","I","you","it","resetName","most","you","the","only","something","guarantees","you","the","it","you","you'll","you","s","will","you'll"],"way that'll":["make"],"way that's":["not"],"way the":["API","Map","values","tests","questions","main"],"way their":["role","usage","scope","scope"],"way then":["you"],"way this":["is"],"way through":["that"],"way tlyou":["may"],"way to":["use","write","do","use","implement","omit","build","construct","make","implement","do","do","implement","express","make","where","solve","do","encapsulate","do","implement","write","get","build","build","do","simplify","insert","[use","unify","handle","do","write","generate","build","build","write","do","do","do","do","build","build","split","build","do","do","write","not","write","build","do","do","unpush","perform","do","phrase","do","do","emulate","do","do","do","improve","generate","do","implement","express","do","express","express","go.","do","handle","do","pick","do","do","do","write","check","accumulate","express","write","do","implement","be","do","get","go","remove","formulate","avoid","do","do","simplify","do","handle","ensure","do","display","calculate","condense","do","do","do","do","do","wrap","solve","do","do","do","do","fix","solve","get","build","do","fix","split","check","represent","split","solve","provide","do","generate","implement","start","express","have","build","do","do","import","build","solve","do","build","find","write","select","do","fix","do","implement","build","check","neaten","think","do","implement","pointfree","do","express","build","do","get","apply","discover","apply","solve","define","directly","write","do","combine","avoid","write","make","implement","how","make","prove","show","make","do","do","make","write","write","do","solve","do","avoid","fix","implement","go,","optimize","write","do","implement","go.","do","learn.","go","build","go.","build","do","convert","greatly","memoize","make","do","rewrite?","produce","make","make","the","deal","significantly","do","write","do","do","write","see","see","do","do","do","do","do","check","approach","solve","check","do","try","build","avoid","remove","do","implement","normalize","normalize","programmatically","write","solve","get","do","make","\"fool\"","do","implement","reverse","do","do","write","force","do","implement","determine","learn/use","write","express","encapsulate","generalize","write","implement","count,","get","write","add","abstract","do","do","be","do","get","ensure","make","do","achieve","solve","make","write","quantitize","get","infer","go...","implement","signify","implement","build","build","fix","fix","implement","do","simplify","write","place","do","simplify","see","do","handle","do","may","handle","filter","split","return","accomplish","get","be","the","go","remember","do","implement","reduce","split","deal","do","write","combine","do","generalize","map","go","do","generate","implement","write","implement","do","add","simplify","do","write","implement","implement","write","handle","generate","do","write","do","implement","achieve","tokenize","utilize"],"way too":["trivial.","trivial","complicated.","arcane","much"],"way towards":["better"],"way up":["to"],"way using":["no","a"],"way was":["great,","better."],"way we're":["using"],"way where":["`letters"],"way will":["make","be"],"way with":["`filter","a","`zipWith3`","`seq`"],"way works":["fine."],"way would":["be","use","be","be","be"],"way you":["can","were","know","can","can","wouldn't","don't","suggest.","get","could","can","would","can","write","avoid","think","wrote","stay","constructed.","don't","could"],"way you'll":["write"],"way you're":["doing","using","not","going"],"way you've":["explicitly"],"way!\" @=?":["responseFor","responseFor","responseFor","responseFor"],"way!\", you":["might"],"way!\"` needs":["to"],"way!\"` should":["end"],"way\" I":["mean"],"way\" response":["once."],"way). Is":["this"],"way). This":["is"],"way, I":["don't","still"],"way, I've":["been","read"],"way, `fromListWith`":["is"],"way, and":["I'm","I","thanks"],"way, but":["this","I","forcing","there's","if","it's","I","definitely","problem","I"],"way, changing":["as"],"way, checkout":["the"],"way, it":["looks","would've"],"way, just":["syntax","thought"],"way, like":["you"],"way, look":["good"],"way, not":["independent."],"way, since":["it's"],"way, so":["concise","your"],"way, such":["as"],"way, where":["`foldl'`"],"way, which":["wasn't","is"],"way, while":["still"],"way, you":["would","need"],"way. (Yes,":["this"],"way. And":["it"],"way. I":["just","wouldn't","had"],"way. If":["you"],"way. Is":["that"],"way. It's":["a"],"way. Map:":["when"],"way. Otherwise":["this"],"way. The":["Text","solution","return"],"way. This":["is"],"way. `foldr`":["is"],"way. `wordsWhen":["(…)"],"way.\"), (isAllUpper,":["\"Woah,"],"way... except":["with"],"way... the":["logic"],"way? I":["haven't"],"way? It's":["something"],"way? Surely":["it"],"ways -":["for"],"ways I":["found"],"ways are:":["throw"],"ways around":["that,"],"ways due":["to"],"ways for":["synonym"],"ways of":["detecting","doing","doing"],"ways that":["I"],"ways to":["do","iteratively","write","construct","do","do","do","write","solve","make","implement","tighten","write","make","write","do","express","do","do","write","handle","make","have"],"ways you":["could"],"ways, although":["I"],"ways, such":["as"],"ways. That,":["of"],"wdNum -":["stNum`"],"wdNum else":["wdNum"],"wdNum then":["7"],"we always":["need","will"],"we apply":["constuctor"],"we are":["pretty","only","not","solving","using","playing","checking."],"we as":["programmers"],"we avoid":["this"],"we basically":["saying"],"we be":["sure"],"we can":["save","see","properly","sing","close","do","get"],"we can't":["return","do"],"we could":["play","export"],"we determined":["that"],"we disagree":["on"],"we discount":["the"],"we don't":["usually","need","have","need","have"],"we either":["need"],"we end":["up"],"we fold":["over"],"we gain":["much."],"we got":["memoization","a"],"we had":["four","function","just"],"we have":["`containers-0.5.0.0:Data.Map.Base.Map","`Maybe`","to","to","better","a","emoji","the","a","to","the","`mx","a","first"],"we ignore":["when"],"we iterate":["through"],"we keep":["a"],"we know":["that","that's","that"],"we might":["as"],"we need":["to","to","to","to","9","it"],"we only":["care"],"we put":["the"],"we should":["add","specify","resort"],"we spoken":["about"],"we still":["have"],"we switch":["off","off"],"we talk":["about"],"we traverse":["our"],"we understand":["that"],"we use":["the","the"],"we want":["to"],"we were":["waiting"],"we will":["need","force","need","evaluate","run","run","pay"],"we write":["components"],"we'd get":["an","an"],"we'll see":[":)"],"we're free":["to"],"we're given,":["that's"],"we're going":["to"],"we're nitpicking)":[":)"],"we're really":["just"],"we're really,":["really,"],"we're using":["it,"],"we're working":["with"],"we've gained":["much."],"weak head":["normal"],"weak-head normal":["form.","form","form)","form","form,","form),","form,","form.","form","form","form)."],"weather of":["trying"],"webpage that":["managed"],"website. One":["more"],"wednesday =":["3"],"wednesday of":["this"],"wednesday, it":["feels"],"week calculations":["(it"],"week given":["a"],"week of":["something,","the"],"week reading":["all"],"week such":["that"],"weekDays list":["and"],"weekday .":["fromGregorian"],"weekday given":["a"],"weekday to":["the"],"weekday year":["month"],"weekday\" included":["lazily"],"weekday. You":["shouldn't"],"weekdayEnum year":["month"],"weekdays an":["instance"],"weekend. Thanks":["for"],"weeks I'm":["really"],"weeks ago,":["and"],"weeks between":["this"],"weeks to":["(somewhat)"],"weird 501s":["that"],"weird coming":["from"],"weird in":["some"],"weird input":["like"],"weird on":["`tToU`,"],"weird signatures,":["wasn't"],"weird stuff":["with"],"weird style":["of"],"weird syntax":["errors."],"weird that":["```bstValue```","you're"],"weird to":["have","see","say"],"weird too,":["but"],"weird, filtering":["out"],"weird, man.":["Am"],"weird; what":["is"],"weirdly I've":["come"],"weirdness. Try":["compiling"],"welcome -":["as"],"welcome. Also,":["I"],"welcome. E.g.,":["should"],"well (would":["be"],"well -":["there"],"well I":["felt"],"well `liftA2":["(&&)"],"well and":["is"],"well as":["toUpper.","the","`enumFromThenTo`","I","a","a"],"well be":["a","left"],"well but":["otherwise"],"well defined":["what"],"well documented":["that","that","that"],"well enough":["to"],"well enough.":["It"],"well for":["many","it"],"well implemented,":["but"],"well in":["most","`toPlant`.","this"],"well keep":["that"],"well known":["IMHO."],"well known,":["so"],"well regarded":["strength"],"well throw":["a"],"well to":["clean","prevent","easily","try"],"well typed":["in"],"well with":["`\"my","the"],"well without":["worrying"],"well you're":["going"],"well) would":["look"],"well, `enumFrom":["minBound`"],"well, although":["you"],"well, and":["would"],"well, but":["otherwise","I","what","otherwise"],"well, for":["this"],"well, good":["to"],"well, if":["you"],"well, it":["was"],"well, most":["Haskell"],"well, saves":["the"],"well, since":["it","it"],"well, skipping":["all"],"well, still":["getting"],"well, such":["as"],"well, there's":["always"],"well, you":["have"],"well-defined interfaces.":["You"],"well-formed DNA":["string."],"well-specified and":["is"],"well-written and":["much"],"well. But":["I"],"well. I":["don't","will","already","prefered","figured"],"well. On":["the"],"well. The":["compiler"],"well. What":["do"],"well. `show`":["has"],"well. i":["won't"],"well.(and it":["will"],"well? I":["couldn't"],"well? What":["about"],"well… it":["is"],"went a":["bit"],"went ahead":["and","and","and"],"went and":["searched"],"went back":["and","&"],"went for":["the","that.","the","bonus"],"went from":["`O(log"],"went nuts,":["but"],"went through":["the"],"went which":["what"],"went with":["`(String,","sorting,","my","a"],"went wrong":["here,"],"went wrong,":["or"],"went. It":["was"],"were a":["holdover","lot","cleaner"],"were actually":["trying","manipulating"],"were algorithmically":["identical..."],"were all":["written","expressed"],"were already":["almost","sanitized."],"were applying":["your"],"were asking":["about","for"],"were automatically":["inferred"],"were aware":["of"],"were capitalized":["and"],"were changed":["or"],"were checked":["already."],"were chosen":["for"],"were cleaner,":["but"],"were code":["golfing…"],"were compiling":["or"],"were converted":["to"],"were counted.":["Could"],"were do":["be"],"were doing":["the"],"were done":["in"],"were expected":["to"],"were faster)":["it"],"were fully":["lowercased"],"were getting":["too"],"were going":["to"],"were happening":["yesterday"],"were interested":["in"],"were just":["a"],"were left":["after"],"were lifted":["out"],"were longer":["I'd"],"were looking":["worse,"],"were made,":["so"],"were mangled":["above"],"were mini-projects":["in"],"were more":["or","conditionals,","elegant,"],"were most":["helpful"],"were no":["longer","particular"],"were not":["present,","developed","also"],"were on":["the"],"were only":["used"],"were palindromes.":["This"],"were passed.":["One"],"were passing":["inputs"],"were ported":["from"],"were posed":["like"],"were possible":["to"],"were presumably":["ported"],"were pushing":["me"],"were really":["useful."],"were referring":["to?","to","to"],"were removed,":["using"],"were right":["about"],"were saying":["about"],"were self":["explanatory"],"were so":["inclined,","many."],"were some":["ways"],"were suggesting":["writing"],"were supported":["better."],"were syntactic":["overkill"],"were the":["start","body"],"were they":["would"],"were thinking":["here."],"were thinking?":["I"],"were to":["remove","check","refactor","use","check"],"were too":["big"],"were trying":["to"],"were two":["strings"],"were unnecessary":["too."],"were using":["`foldr`","on","Data.Map.Strict.map,","it."],"were very":["ambiguous","useful."],"were waiting":["hopelessly"],"were when":["I"],"were working":["on"],"were written":["in"],"were, you":["could"],"were. I'm":["only"],"weren't deceiving":["me"],"weren't happy":["about"],"weren't much":["better."],"weren't you":["the"],"what \"eta-reduce\"":["means"],"what \"stage\"":["of"],"what *are*":["the"],"what @ransom":["means"],"what I":["saw","came","usually","had","thought","was","needed","was","am","want:","had","did","wanted","want,","needed.","wanted","try","need.","favor","prefer.","was","mean","can","like","can","meant","was","was","needed","did","can","was","need.","have?","was","needed.","came","understood","need.","mean.","mean","was"],"what I'm":["trying"],"what I've":["seen","written","seen"],"what Monads":["are"],"what Random":["facilities"],"what T":["and"],"what WHNF":["means,"],"what Youda":["condition"],"what [the":["docs"],"what `++`":["has"],"what `ShowS`":["was"],"what `[n,":["n-1..."],"what `atomically`":["means."],"what `foldl'`":["does,"],"what `ignore":["non"],"what `isEmpty`":["would"],"what `n`":["and"],"what `numerals":["(-1)`"],"what `unique`":["does,"],"what a":["function","function","single","typical","valid"],"what about":["input","(Data.Vector","`total`?"],"what all":["of"],"what am":["I","I"],"what an":["entire"],"what are":["known"],"what arrows":["are"],"what as":["I"],"what benefits":["you"],"what bob_test.hs":["looks"],"what characters":["*should*","do"],"what circumstances":["should"],"what could":["be"],"what did":["you"],"what do":["you","you","you"],"what does":["the","*isAnagram*"],"what each":["condition","condition","guard"],"what ends":["up"],"what etrepeum":["meant"],"what exactly":["you","is","you're","do","it"],"what exercises":["to"],"what fun":["would"],"what ghc":["can"],"what goes":["in"],"what happened":["to"],"what happens":["here","when","behind"],"what haskell-mode":["in"],"what i'd":["like."],"what idiomatic":["Haskell"],"what if":["someone","some","it","there","the","I"],"what information":["they"],"what instance":["of"],"what instances":["of"],"what is":["the","the","the","happening.","the","the","the","this,","going","considered","going","the","easier","the","the","wanted.","the","going"],"what isAll":["does"],"what isAnagramOf":["means,"],"what isn't":["a"],"what it":["going","actually","is","took","looks","does.","does","looks","does,","does.","looks","does","is","seemed","means","absolutely","looked","updated","means","says"],"what it's":["worth,","worth.","getting","already","doing!"],"what kind":["of"],"what left":["fold"],"what libraries":["are"],"what lines":["20-22"],"what looks":["better"],"what makes":["a"],"what map":["for."],"what mine":["looks","looks"],"what modules":["I"],"what my":["implementation"],"what new":["representation"],"what on":["the","you"],"what one":["would"],"what pattern":["matching"],"what problems":["I"],"what purpose":["does"],"what should":["be","I"],"what silence":["looks"],"what sticks":["rather"],"what suggestions":["they"],"what suits":["you"],"what test":["cases"],"what that":["looks","might","input","was","`return`","might","line","means."],"what the":["spec","origin","spec","name","performance","compiler","type","issue","type","keys","problem","precedence","type","fixity","source","exercises","optimizer","convention","optimizer","Map","fixity","precedence","situation","Functor","purpose","\"strictness","fixity","hell","key","code","`\u003c$\u003e`","second","lambda","function","best","correct","problem","new","order","`&&&`","`LANGUAGE`","type","next","additional","symbols","function","precedence","precedence"],"what there":["is"],"what they":["were","should","got.","stand","do"],"what this":["`pointfree`","strictness","is"],"what thread":["A","B"],"what to":["do","do","comment.","google","google","do","look","advice,","make","optimize,","do..","try."],"what type":["it"],"what typeclasses":["are"],"what used":["to"],"what version":["you"],"what was":["going","going","going"],"what we":["want","are"],"what went":["wrong,"],"what will":["be","happen"],"what would":["appear","be","be"],"what you":["were","suggest,","want,","think,","want","wanted?","meant","mean","are","mean","have","want","intended","want","are","are","said","are","want.","want.","mean...","mean!","were","think!","do","need","meant","think?","would","were","said.","want.","wrote,","were","mean!","meant.","did","mean.","wrote","have","mean,","mean","think,","think.","think","think!","would","think","think!","reckon!","think!","think!","had","don't","want","mean","meant","said,","actually","mean.","want","mean","mean.","would","mean","mean"],"what you'd":["expect"],"what you're":["trying","really","trying","really","storing","doing","putting","exporting.","trying","really","doing,","doing","trying","doing","saying","saying","talking","saying."],"what you've":["done","written","said."],"what your":["`collate`","suggesting.","n"],"what's *not*":["a"],"what's `all":["isSpace"],"what's a":["different","question"],"what's available":["in"],"what's available...":["or"],"what's better":["-"],"what's called":["an"],"what's considered":["good"],"what's going":["on.","on","on","on","on.","on!","on.","on.","on.","on","on,","on"],"what's happening":["clearer","if"],"what's most":["important"],"what's now":["`count'`"],"what's on":["the"],"what's supposed":["to"],"what's the":["longest","reason","fromListWith"],"what's up":["with"],"what, the":["worst"],"what-have-you -":["I'm"],"whatever Int":["it"],"whatever binding":["you"],"whatever concrete":["type"],"whatever data":["it"],"whatever it":["is"],"whatever space":["it"],"whatever` is":["`acc`?"],"whateverday of":["the","the"],"whatnot. I":["found"],"whatsoever that":["your"],"whatsoever with":["it"],"whatsoever. Always":["use"],"wheel for":["the"],"wheel with":["my"],"wheel, especially":["in"],"wheel. As":["far"],"wheel? It's":["already"],"when 11":["digits\""],"when A":["and"],"when I":["built","wrote","did","use","looked","was","realized","wasn't","ported","implemented","get","was","ran","copied","forget","say","saw","ran","should","did","first","was","get","write","was","load","wrote","get","open","tried","was","was","fully","get","time","got","wrote","get","did","make","tried"],"when I'll":["address","reach"],"when I've":["written","checked"],"when Map.insertWith":["could"],"when O(1)":["space"],"when `all":["f"],"when `anaGrams`":["is"],"when `foo":["="],"when `fromListWith`":["uses"],"when `isSomething`":["and"],"when `n":["\u003c"],"when `nucleotideCounts`":["apparently"],"when `null":["message`"],"when `x":["/="],"when a":["program","non-bit","statement"],"when accesses":["so"],"when account":["is"],"when adding":["the"],"when all":["that's","you","it","valid"],"when an":["empty"],"when arguments":["are"],"when as":["you'll"],"when bank":["is"],"when benchmarked":["with"],"when building":["a"],"when called":["to"],"when compiled":["with"],"when compiled.":["There's"],"when confronted":["with","with"],"when constructing":["the"],"when deciding":["between"],"when describing":["algorithms"],"when developing":["an"],"when doing":["folds","so..."],"when done":["within"],"when evaluating":["but"],"when evaluation":["is"],"when everything":["is"],"when first":["attempting"],"when full.":["Consider"],"when function":["application"],"when given":["the"],"when half":["that"],"when i":["don't"],"when implementing":["`anagramsFor`"],"when importing":["very"],"when in":["actuality","Rome,","fact"],"when interpreted":["with"],"when is":["a"],"when it":["is","is","only","hits","would","does","is","is","could","leaves","is","is","will","helps","builds","doesn't"],"when it's":["sensible","executed.","necessary","forced","actually","exactly","some","not"],"when its":["used"],"when lazy":["evaluation"],"when looking":["for"],"when modern":["Haskell"],"when more":["than"],"when necessary":["except"],"when necessary,":["or"],"when normalized":["(`\"madnessandthenillumination\"`),"],"when not":["using","necessary","viewing"],"when one":["believes","reaches"],"when optimizations":["are"],"when outer":["filter"],"when possible.":["Could"],"when reading":["this","top-to-bottom."],"when reading.":["Is"],"when sampled":["repeatedly..."],"when shoving":["it"],"when skimming":["code."],"when splitting":["the"],"when str":["is"],"when suggesting":["the"],"when talking":["so"],"when testing":["for"],"when that":["clearly","happens"],"when the":["value","other","value","value","function","same","right","same","elements","zip","answer","string","account","predominant","result","lambda","first","common","higher","operators"],"when there":["are","is","is"],"when there's":["no","an","only","no","really"],"when they":["already","aren't","are","shouldn't","arise.","work"],"when they're":["the"],"when this":["function","difference"],"when to":["choose","include","omit","use","more","use","use","use"],"when troubleshooting,":["or"],"when trying":["to"],"when used":["correctly."],"when using":["quotRem?","Parsec.","some","`fromListWith`","`2:[3,5..]`"],"when viewing":["changes"],"when we":["put","talk","will"],"when writing":["IORefs","the"],"when written":["in"],"when you":["scan","must","really","encounter","said","have","try","can","are","are","don't","force","examine","use","can","are","are","use","access","evaluate","eventually","do","really","should","need","make","are","could","force","could","functions","have","know","can","consider","return","have","did","might","multiply","wrote","have","import","force","can","come","want","want","import","need","are","do","are","are","have","fail","write","work","have"],"when you're":["using","writing","done.","using","designing","adding","mainly","mainly","dealing","dealing","not"],"when you've":["got","found"],"when, of":["course,"],"when/how to":["be"],"whenever else":["you"],"whenever possible":[":)","instead"],"whenever we":["write"],"whenever you":["find","have"],"where (area,":["(first,"],"where (lowXs,":["lowSortedXs)"],"where (v',":["t)"],"where (x,":["remain)"],"where 0..3":["is"],"where A":["reads"],"where Array":["is"],"where Data.Map.Strict":["uses"],"where False":["is","stands"],"where GHC":["will"],"where I":["wanted","wrote","used","generated","then","know","am","forgot","couldn't","was"],"where I'd":["expect"],"where I've":["done","used"],"where Int's":["maxBound"],"where N":["is"],"where `(x)`":["is"],"where `_`":["represents"],"where ```++```":["would"],"where `do`":["syntax"],"where `f'`":["is"],"where `f`":["is"],"where `foldl'`":["would"],"where `foldl`":["does"],"where `fromListWith`":["would"],"where `fst`":["is"],"where `ifNull":["d"],"where `length":["."],"where `letters":["word`"],"where `lowerCaseBottleText":["(next"],"where `map`":["would"],"where `type":["MyState"],"where `unwords`":["is"],"where `word1`":["is"],"where `x":[":"],"where `…`":["is"],"where a":["function","bit","crawled","roman"],"where all":["the","of"],"where alphas":["="],"where an":["eta-reduction","argument"],"where and":["inline","Text"],"where answering":["whether"],"where applicatives":["and"],"where appropriate":["in"],"where binding,":["they"],"where block":["in","inside","and"],"where block,":["and"],"where block.":["You","But","I"],"where bugs":["me,"],"where bytestring":["is"],"where can":["only"],"where children'":["="],"where clause":["on","instead","to","out","instead","instead","instead","to","of","and","you","of","instead","of","(e.g.","of","of","of","is","and","or","so","instead","since","but","for","of","because","again..","it's","in","for","than","of","for","and","but"],"where clause,":["like","or","but","this","a"],"where clause.":["I","or","The","See","See","I"],"where clauses":["for","it's","that"],"where clauses.":["Maybe","Come"],"where difference":["lists"],"where do":["you","you"],"where early":["failure"],"where everyone":["knows"],"where everything":["came"],"where f":["c"],"where ff":["=","=","="],"where filter'":["c"],"where functions":["out"],"where generating":["all"],"where go":["'T'","ly"],"where idea":["of"],"where in":["the","a"],"where instead":["of"],"where is":["more","generally"],"where isQuiet":["="],"where it":["is","was","takes","should","did","would","obfuscates","is","makes","does","won't","divided","fits"],"where it's":["obvious","actually","shoe-horned","possible,","forced,"],"where keyword,":["layout","layout","layout"],"where len":["=","="],"where list":["comprehensions"],"where loop":["and"],"where lowered":["="],"where meaning":["is"],"where modified":["textual"],"where my":["parameters"],"where n":["&gt;","is","is"],"where non-illegal":["type"],"where nonSpace":["="],"where none":["p"],"where operating":["on"],"where parentheses":["are"],"where part,":["less"],"where r":["="],"where replace":["'T'"],"where rows":["="],"where s":["and"],"where s'":["="],"where s1'":["="],"where section,":["so"],"where should":["I","you"],"where shouting":["="],"where something":["is"],"where square":["n"],"where swapMVar":["is"],"where table":["="],"where that":["comes","type"],"where the":["implementation","`fromLIstWith`","last","first","first","ord","strictness","above","sublist","former","complicated","trick","former","output","optimizer","size"],"where there":["is"],"where there's":["only"],"where they":["pattern","are","are"],"where things":["are"],"where this":["is","would"],"where to":["extract","start.","look","look","start.","put","draw","use"],"where trans":["x"],"where transcribing":["the"],"where updated":["couple"],"where w'":["=","="],"where works":["are"],"where x":["and"],"where you":["can","don't","could","return","get","don't","want","can","actually","don't","can","currently","are","use","can","want","remove","want","use","can","specify"],"where you'd":["like"],"where you're":["returning","doing"],"where your":["default","other"],"where, I":["pretty"],"where, and":["let."],"where, which":["is"],"where; I'm":["pretty"],"where` -":["I"],"where` clauses":["have"],"where` then":["only"],"where` to":["only"],"where` would":["only","be"],"where`) because":["the"],"where`. It's":["also"],"where`. Looks":["good"],"where`. This":["way"],"where``` clause,":["like"],"whereas I":["only"],"whereas for":["`String`"],"whereas if":["I"],"whereas it":["would"],"wheres on":["a"],"wherever Monads":["are."],"wherever it's":["possible"],"whether I":["understand","was","should","should"],"whether ```(isAnagram":["subject)```"],"whether `all`":["is"],"whether `toUpper`":["would"],"whether a":["char"],"whether all":["of"],"whether convention":["is"],"whether each":["character"],"whether i":["prefer"],"whether it":["might","is","would","turns"],"whether it's":["correct","a"],"whether one":["word"],"whether or":["not","not","not","not","not","not","not","not","not"],"whether that":["actually","can"],"whether that's":["with","possible"],"whether the":["input","program","string","difference","value","result","accumulator"],"whether there":["was","is","is"],"whether they":["are"],"whether this":["exercise"],"whether to":["use","trigger","keep","explicitly"],"whether tying":["`translateNucleotide`"],"whether you":["use","want","can","use","want"],"whether you're":["left","using"],"which GHC":["does"],"which I":["could","felt","just","just","don't","believe","found","think","found","think","suppose","will","find","found","was","think","assume","think","sum?","think","suppose","think"],"which I've":["covered","implemented","managed"],"which TVars":["are"],"which `isSpace`":["returns"],"which accomplishes":["the"],"which actually":["does"],"which adds":["up"],"which all":["you"],"which already":["contains"],"which approach":["is"],"which are":["also","already","not","used","total,","generic","a"],"which argument":["you"],"which avoids":["a"],"which basically":["means"],"which behaves":["like"],"which builds":["another,"],"which can":["be","also","cause","make","occur","be"],"which case":["I","don't"],"which cases":["this"],"which causes":["a"],"which changes":["the"],"which check":["only"],"which child":["generated"],"which cleans":["things"],"which comes":["from"],"which completely":["eliminated"],"which constructor":["you"],"which contradicts":["the"],"which converts":["a"],"which could":["conceivably","be","be","provide"],"which cover":["some"],"which covers":["both"],"which data-structure":["you"],"which defeats":["the"],"which didn't":["feel"],"which do":["you","not"],"which does":["this","this","not","this","this","a","the"],"which doesn't":["seem","seem","seem","seem","index"],"which editor":["you're"],"which explains":["this"],"which failed":["pretty"],"which fails,":["because"],"which for":["functions"],"which forces":["`k`","the"],"which form":["I"],"which functions":["are","to","you"],"which gets":["handled","rid"],"which given":["a"],"which gives":["you"],"which gracefully":["handles"],"which had":["the"],"which handles":["empty"],"which has":["a","really","similar","key","type","the","value-strict","value-strict","severe","a","better"],"which helps":["you"],"which in":["turn","this","this","this"],"which include":["one"],"which inserts":["an"],"which internally":["uses"],"which is":["often","often","the","often","less","also","often","in","often","often","O(1)","part","why","a","better","a","coincidentally","also","basically","more","more","the","like","crazy","why","no","simple","what","not","more","also","entirely","longer,","even","what","not,","more","spent","more","a","accumulator-strict,","without","a","a","O(1).","not","why","in","the","oddly","fine","yet","more","the","awful.","equivalent","efficient","good","the","the","not","likely","very","actually","O(n).","basically","useful!","why","what","what","a","why","both","equivalent","a","way","cool.","represented","nice.","how","much","most","why","correct,","about","identical","rather"],"which isn't":["what","too","very","clear"],"which it":["is","will","was"],"which just":["leverages"],"which lets":["you"],"which looks":["to","a","a","nicer","like","better."],"which made":["the","it"],"which makes":["me","some","would","me","sense","it","me"],"which may":["help","allow"],"which means":["you","it","an","refactoring"],"which might":["be","be","look","make"],"which name":["you"],"which not":["always"],"which obviously":["takes"],"which of":["these","the"],"which one":["should","is","I"],"which optimizations":["are"],"which parts":["are"],"which point":["you"],"which probably":["doesn't"],"which reduces":["the"],"which refer":["to"],"which response":["was"],"which return":["False"],"which returns":["a","the"],"which rewrites":["the","the"],"which seems":["counterintuitive","pretty","to","to","a","rather"],"which should":["do","reflect","make","make","make","make","remove","give"],"which simplifies":["the","code"],"which sometimes":["helps..."],"which sounds":["like"],"which specific":["case"],"which specifically":["does"],"which style":["you"],"which tacks":["on"],"which take":["up","up"],"which takes":["care","a","up","longer","up","linear"],"which terms":["are"],"which the":["tests","alphabet"],"which traverses":["dna"],"which use":["an"],"which uses":["a","a","an","less","a"],"which version":["of"],"which was":["a","at","giving"],"which wasn't":["explicit"],"which way":["was"],"which were":["presumably"],"which what":["[the"],"which will":["blow","make","only","return","save","evaluate","help","iterate","make","give","be","not","get"],"which work":["nicely"],"which would":["ultimately","reduce","give","screw","result","save","let","make","remove","allow","be","do","only","be","be","be","just","save","allow","make","save","get","probably","make","simply","let","allow","make","allocate","make","eliminate","be","give","require","be","make"],"which would,":["if"],"which you":["can","can","could","do","can","can","prefer.","could","should","worked","should","could","could","can","can","can"],"which you'll":["find"],"whichever element":["you're"],"whichever one":["you"],"whichever you":["think"],"while 1":["pass"],"while I":["didn't","get"],"while I'm":["hacking"],"while `String`":["is"],"while `[n..m]`":["won't"],"while `any`":["lower"],"while `liftA2":["."],"while `resetName`":["is"],"while being":["relatively"],"while foldling":["it;"],"while getting":["my"],"while improving":["the"],"while in":["tail-recursive"],"while iterating":["over"],"while keeping":["it"],"while lazy":["ones"],"while not":["repeating"],"while playing":["around"],"while reading":["[this","responseFor,"],"while reducing":["the"],"while returning":["the","the"],"while selectively":["restricting"],"while since":["I"],"while sometimes":["a"],"while staying":["elegant."],"while still":["keeping","hopefully"],"while testing":["but"],"while the":["function"],"while this":["version"],"while to":["see","get","look","figure","understand","understand"],"while verse":["for"],"while you":["were"],"while you're":["using"],"while, and":["a"],"while, but":["this"],"while, make":["a"],"whip up":["something","a"],"whitespace (newlines),":["use"],"whitespace after":["a"],"whitespace and":["add","where"],"whitespace around":["`::`."],"whitespace between":["the","these","a","separate"],"whitespace characters":["from"],"whitespace doesn't":["line"],"whitespace except":["in"],"whitespace in":["the"],"whitespace instead":["of"],"whitespace is":["a","still"],"whitespace on":["the","lines","line","both"],"whitespace or":["not,"],"whitespace rather":["than"],"whitespace that":["won't"],"whitespace to":["be"],"whitespace\" post":["by"],"whitespace. If":["I"],"whitespace. Take":["a"],"whitespace/other values":["along"],"whitespaces would":["be"],"whitespaces, like":["```not"],"whitespaces. Just":["checking"],"who are":["used"],"who both":["add"],"who doesn't":["love"],"who exercise":["may"],"who have":["solved","properly"],"who knows?":["The"],"who likes":["putting"],"who managed":["to"],"who may":["not"],"who suggested":["that"],"who told":["me"],"who's execution":["cannot"],"who's fault":["it"],"whoa, crazytown.":["Is"],"whole ```Map```":["every"],"whole ``sanitized``)":["implementation"],"whole `map":["(head"],"whole `responseFor`":["function,"],"whole books":["have"],"whole bunch":["of","of"],"whole chain":["of"],"whole concat":["operation"],"whole different":["scale."],"whole empty/nonempty":["case"],"whole equation":["not","is"],"whole expression":["in","is"],"whole function":["point-free,","is"],"whole import":["at"],"whole input":["list","map","must","string."],"whole list":["where","into","anyway.","needs","to","to","in"],"whole list,":["even"],"whole lot":["shorter","shorter","shorter"],"whole module":["name","really,"],"whole monoid":["thing"],"whole new":["language"],"whole nucleotide":["string"],"whole order":["of"],"whole package":[":)."],"whole program":["is"],"whole range":["of"],"whole rest":["of"],"whole right":["side"],"whole sequence":["for"],"whole solution.":["Instead"],"whole space.":["they"],"whole string":["is","before","(consider"],"whole table?":["Seems"],"whole thing":["from","in","in","as","in","in","together,","in","but","as","first.","here","(this"],"wholeheartedly agree":["with"],"whoops, just":["glazed"],"whoops, that":["shouldn't"],"whoops. thanks":["for"],"whose name":["clearly"],"whose number":["of"],"whose predicate":["handles"],"why GHC":["complains"],"why Hoogle":["makes"],"why I":["said","didn't","decided","didn't","gave","asked","had","did","thought","didn't","make","choose","had","did","left","get","keep","didn't","thought"],"why I've":["introduced"],"why Prelude.map?":["Is"],"why `:`":["is"],"why `assocs`":["instead"],"why `c":["=="],"why `foldMap`":["(basically"],"why `foldl'`":["isn't"],"why `foldl`":["is","exists","exists"],"why `foldr`":["is","is"],"why `mapWords`":["having"],"why `sort`":["*and*"],"why all":["those"],"why and":["how"],"why are":["you"],"why avoiding":["the"],"why comments":["are"],"why did":["you","you"],"why didn't":["you"],"why do":["you","we","we","some","you","you","you","you"],"why does":["`Just"],"why doing":["`10^(fromIntegral"],"why foldl":["is"],"why foldr":["overflows","overflows","overflows","overflows","overflows"],"why generate":["a"],"why have":["a"],"why hdevtools":["did"],"why higher":["level"],"why i":["did","need"],"why is":["`foldl'`","`all`"],"why isn't":["it"],"why it":["will","matters","works","has"],"why it's":["```anagram```","in","a"],"why lazy":["evaluated"],"why markup":["isn't","isn't"],"why my":["space/tab","`resetName`"],"why not":["use","use","check","just","`(d","make","just","`foldl'`","`255`","pattern","`data","use","use","simpy"],"why reducing":["`comps'`"],"why reinvent":["the"],"why restrict":["yourself","the"],"why so":["many"],"why some":["things"],"why sorting":["helps"],"why strictness":["is"],"why such":["a","usage"],"why take":["the"],"why text":["is"],"why that":["is,","is—"],"why the":["partial","partiality","algorithm","problem","exercise","syntax","bit","`flatten`"],"why there":["aren't"],"why there's":["a"],"why they":["should"],"why they're":["suboptimal"],"why this":["isn't","works,","is,","works,","is","ought","is","is","doesn't","might"],"why uracil":["is"],"why use":["`map"],"why uses":["of"],"why using":["a"],"why we":["can't"],"why you":["decided","would","want","needed","went","see","don't","chose","would","want","need"],"why you're":["doing","checking"],"why your":["suggestion"],"why. It's":["amazing"],"wich is":["redundant,"],"wide open":["so"],"widely accepted":["though,"],"widely using":["code"],"wider use":["than"],"width, so":["that"],"wiki and":["ghci"],"wiki article":["about","http://www.haskell.org/haskellwiki/Stack_overflow"],"wiki entry":["about","also"],"wiki has":["a"],"wiki page,":["I"],"wiki pages":["on"],"wiki that":["is"],"wiki to":["get"],"wiki, but":["not"],"wikipedia description":["and"],"wikipedia example.":["and"],"wild with":["type"],"wildcard letter":["that"],"wildcard pattern":["to","match"],"wildcard that":["counts"],"wildcard tile":["has"],"will (I'm":["assuming)"],"will I":["come"],"will Maybe":["(tree"],"will `sort":["a'`"],"will accept":["plenty"],"will actually":["end","work"],"will add":["that"],"will add.":["I'm"],"will admit":["looks"],"will advice":["more.."],"will all":["become"],"will allocate":["entire"],"will allow":["you","you","to","you","you","you","you","you","to"],"will also":["be","render","give","produce","simplify","be"],"will always":["have","be","scan","be","be"],"will automalically":["create"],"will be":["truncated.","a","simplified.","more","caught","shorter.","like","much","a","a","better","correlated","simple","as","ugly","done","different","better!","the","forced,","transformed","thunks","regarded","checked","thunks","a","evaluated","longer","unnecessary.","thunks","about","flush","put","memoized,","3.5,","evaluated","run","cheap","read","flush","slower","a","better","used","a","divisors.","evaluated","`min","evaluated","a","considered.","an","evaluated","a","more","evaluated","run","even","blocked,","better,","kept","nice","the","collecting","called","forced","accessed,","leaked","measurably","in","evaluated","cleaner.","explicitly","evaluated","more","accessed","processes","visible","exported.","no","treated","infered","instantiated","approximated","faster","near","reversed,","easier","uglier.","evaluated","a","evaluated","usefull","easier","very","very","gratefully","sorted","iterative","sorted","more","pretty","sorted","shorter:)","solved","run","another","run","memoized.","perfect","evaluated","result","less","normalized","better.","simplest","much","interesting","iterative","easier","normalized","executed","build","harder","more","evaluated","as","more","fuzed","0.","1,","2,","note","simpler.","a","using","a","better","consulted","effective."],"will become":["much","trivial."],"will bind":["but"],"will block":["when"],"will block,":["that"],"will blow":["up"],"will break.":["Otherwise"],"will build":["up","up","up","up","up","up","up"],"will call":["error"],"will cause":["a","a"],"will change":["'C'","it.","things"],"will check":["every"],"will choke":["on"],"will choose":["not"],"will cleanup":["code."],"will come":["before","back"],"will compile":["into"],"will compile.":["How"],"will construct":["a"],"will correspond":["to"],"will cover":["it"],"will crash":["on"],"will create":["a","a"],"will deadlock":["in"],"will default":["to"],"will define":["that"],"will definitely":["go","work,"],"will discard":["all"],"will do":["this","this","this","this","this","a","the","the","just","it","so","the","that","this,","the","this","correct","this","the"],"will do,":["thanks!","an"],"will end":["up","up"],"will ensure":["that"],"will equals":["to"],"will escape":["the"],"will evaluate":["at","it","to","only","them,","only","to"],"will even":["crash."],"will eventually":["work,"],"will execute":["fast"],"will explain":["the"],"will fail":["on","if","if","(there","if","if"],"will figure":["this"],"will fit":["in","better."],"will fix":["that"],"will fold":["the"],"will force":["the","evaluation","the","thunk"],"will forget":["quickly"],"will fuse":["into"],"will generate":["a","all","a","a"],"will get":["a","Nothing,","a","past"],"will give":["you","you","you","a","you"],"will go":["through","away."],"will guarantee":["that","that"],"will handle":["the"],"will happen":["separately.","if"],"will have":["to","to","to","three","type","to","to","different","proper","another","to","a","a","already","signature","to","O(n^2)","O(n)","better","same","the","to","better","a","zero","to","no","blank","a","toList","access","a","the"],"will help":["you","you","you","here","you,","you"],"will hold":["only"],"will immediately":["return","call"],"will implement":["full"],"will improve":["something."],"will in":["the"],"will incorrectly":["consider"],"will insert":["a"],"will investigate":["type"],"will iterate":["over"],"will iteratively":["generate"],"will just":["cause","fall","reset","keep"],"will lead":["to"],"will leave":["off","0..6"],"will left":["inside."],"will let":["you"],"will likely":["have","get"],"will lint":["the"],"will look":["into","into","better.","like","at","better.","slightly","very","like:","simpler","like"],"will look.":["I"],"will make":["`responseFor`","your","the","your","the","a","your","it","this","a","many","differect","function","code","it","it","yoi"],"will manifest":["only"],"will map":["them","the"],"will match":["anything"],"will may":["work","lead"],"will need":["to","to","to","to","to","to"],"will never":["see","contain","be","have"],"will no":["longer"],"will not":["work","distinguish","force","work.","have","need","change","be","automatically","cover","contain","reverse","work","pass.","be","run.","work","allow","be","have","be"],"will now":[":)"],"will often":["do"],"will only":["work","be","be","ever","evaluate","ever","be","evaluate","traverse"],"will optimize":["it"],"will overflow":["the"],"will pass,":["and","then"],"will pay":["for"],"will perform":["better."],"will point":["out"],"will prevent":["me"],"will probably":["want","revise","get","figure","run","be","turn"],"will quickly":["turn"],"will quote":["the","the"],"will re-write":["to"],"will read":["that","the"],"will realize":["that"],"will recognize":["`\"a,b\"`"],"will recommend":["these"],"will recurse":["forever"],"will remember":["work"],"will remove":["lot"],"will require":["stack","value,","slightly","non-tailsafe"],"will result":["in","in"],"will return":["a","`0..6`,","the","`True`","a","1","`\\220ML\\196\\220TS`","`Left","the","`\"Bob\"`'s"],"will reverse":["all"],"will revise":["after"],"will run":["out","out","out","out","out","faster","until","inner","inner"],"will save":["you","you","you","you"],"will scan":["the","`ws'`","s","the"],"will see":["there"],"will shoehorn":["everything"],"will simplify":["understanding","code.","solution.","a"],"will solve":["this"],"will sort":["that."],"will split":["on"],"will still":["work","look","be","be","take"],"will stop":["compiling"],"will stop.":["This"],"will store":["a","`(((1","a"],"will suffice":["to"],"will take":["a","the","some","O(n)","a","a","the","a","a","a"],"will terminate":["at"],"will the":["String"],"will think":["about"],"will throw":["an"],"will translate":["words"],"will traverse":["the","the","it"],"will treat":["it"],"will try":["to","to","again.","later.","to","to","with","to","to","to","to","to","pattern"],"will typically":["result"],"will update.":["Thanks"],"will use":["tail","a","fewer","18bits.","notable","`[a,a-1,..b]`","`foldl'`.","[b,b-1,..,a]","Data.Map.Strict."],"will using":["`newType`"],"will wait":["until","for"],"will want":["to","to","to","to","to","to"],"will warn":["you","me"],"will work":["out","for","with","fast","in","for","for","once","better.","with","with","here","in","with","with","with","for","not"],"will work,":["thanks","but"],"will wrap":["the"],"will write":["`String`"],"will zip":["lists"],"will, in":["this"],"will, since":["you"],"willing to":["enable","cabal","make"],"win is":["obfuscation,"],"win or":["not?"],"win since":["it"],"win, but":["neither"],"window in":["favor"],"window size":["="],"windows around":["me"],"windows under":["recent"],"wise to":["me","use"],"wish I":["knew","could","could"],"wish `showIntegral`":["wasn't"],"wish it":["were"],"wish there":["was","were"],"wish to":["use","export,"],"wish unsigned":["numbers"],"wish validate":["were"],"with \"bottle(s)\"":["as"],"with \"fromListWith\".":["But"],"with \"insertWith\"":["looks"],"with \"thread":["blocked"],"with \"two\"":["maps:"],"with 'U'":["so","and","in"],"with 'all'.":["I"],"with 's'":["such"],"with 'trim'":["function."],"with *normalization*":["function"],"with -":["though"],"with -1":["or"],"with -O":["or"],"with -O2":["-fllvm.","of"],"with -Wall":["on).","on"],"with -Werror,":["to"],"with 2":["and","any/all","spaces.","and","spaces","spaces?","spaces."],"with 4":["spaces"],"with 5":["or"],"with 7.4,":["but"],"with \u003ccode\u003eunwords\u003c/code\u003e.":["Mind"],"with \u003ccode\u003ewordsBy\u003c/code\u003e":["it"],"with @delpha":["—"],"with @jerry":["-"],"with @joany,":["other"],"with @johnnie":["that"],"with @kevin.":["It's"],"with @krystina,":["I"],"with @lindsay.":["The"],"with @quincy.":["Leaving"],"with @skye's":["best"],"with @spencer":["about"],"with @troy":["about"],"with ASCII,":["but"],"with B8":["for"],"with BangPatterns,":["`seq`"],"with CONS-list":["(Strings)."],"with Carsten,":["I"],"with ClassyPrelude,":["because"],"with Clojure":["and"],"with Concurrent's":["MVar"],"with Control.Applicative.":["I"],"with Control.Arrow":["you"],"with Control.Arrow's":["first"],"with Criterion":["...","and","([benchmark"],"with DNA,":["so"],"with Data.Attoparsec.Text":["(only"],"with Data.Bits":["is"],"with Data.List":["being"],"with Data.List.Split":["and"],"with Data.List.Split's":["`wordsBy`,","`wordsBy`."],"with Data.Map":["and"],"with Data.Map,":["and"],"with Data.Map.Strict,":["or"],"with Data.Map.Strict.":["I've"],"with Data.Set":["didn't"],"with Data.Text":["even"],"with Double":["precision"],"with GHCi":["is","will"],"with Gaelan,":["the"],"with Gaelan:":["extracting"],"with Git":["yet."],"with HSpec)":["without"],"with Haskell":["platform.","Platform,","syntax","Platform,","Platform.","Platform"],"with Haskell's":["non-strict","laziness,","`Maybe`"],"with Haskell,":["it's","and","but","so"],"with Hoogle":["to"],"with IO":["and"],"with IO-based":["state"],"with Levenshtein":["distance"],"with MVar":["(Maybe"],"with Map":["functions"],"with Map.fromListWith":["list"],"with Maps":["was"],"with Maybe":["and"],"with Maybe.":["I"],"with MonadPlus's":["`msum`"],"with Multi":["line"],"with Nothing":["and"],"with Parsec":["and","or"],"with PhoneNumber":["should"],"with Prelude":["(the","one:"],"with RNA":["and"],"with Ruby,":["not"],"with StateT":["trying"],"with String":["it's","in","all"],"with Text":["given"],"with Text.Printf":["call?"],"with TupleSections":["or"],"with Twisol":["here."],"with U\"":["solution"],"with Unboxed":["arrays."],"with `\"my":["number"],"with `&&&`,":["`uncurry`"],"with `'a'`":["should","should"],"with `(!a,":["!b)"],"with `(+)":["old_value"],"with `(String,":["(String,"],"with `(not":["."],"with `++`":["so"],"with `++`.":["Is"],"with `-Wall`":["it","you"],"with `-XTupleSections`?":["That"],"with `.|.":["1`."],"with `0`":["or"],"with `1`?":["And"],"with `48`.":["I"],"with `=\u003c\u003c`.":["That"],"with `=`":["rather"],"with `Char`s.":["That's"],"with `Data.List.Split`.":["I"],"with `Data.List`)":["you"],"with `Data.Map.Strict`,":["the"],"with `Data.Map.fromListWith`":["or"],"with `Data.Map`":["when"],"with `Data.Map`,":["but"],"with `Data.Map`s":["`fromListWith`."],"with `Data.Set`":["but"],"with `IntMap`.":["Thanks"],"with `M.insertWith`":["so"],"with `Map`":["(and"],"with `Maybe`":["instead","and"],"with `Prelude.`":["distracting."],"with `Prelude.`,":["since"],"with `S.toList`":["--"],"with `School`,":["then"],"with `String`,":["I"],"with `Text`.":["You"],"with `[(Key,":["Value)]`"],"with `[1..3]":["\u003e\u003e="],"with `[String]":["-\u003e"],"with `[n]`":["you"],"with `_`":["will"],"with ```((,1))```":["and"],"with ```(\\=)```":["as"],"with ```Data.Char```,":["```Data.List```"],"with ```add```,":["but"],"with ```all```":["or"],"with ```isLower```":["and"],"with ```take```":["and"],"with ```toEnum":["(w"],"with ```unwords```":["in"],"with `a":["="],"with `add`,":["it's"],"with `all":["(not"],"with `all`":["and/or","instead."],"with `all`)":["and"],"with `all`,":["preferring"],"with `all`.":["`length"],"with `any":["isAlpha"],"with `any`":["and/or","and","to","or","or","in"],"with `any`,":["so"],"with `any`.":["We","it","With"],"with `areaCode`":["and"],"with `cabal":["update;"],"with `checksum`.":["It"],"with `concatMap":["(take"],"with `concatMap`":["you"],"with `elem`;":["just"],"with `enumFromThenTo":["n"],"with `f":["\u003c$\u003e"],"with `filter":["."],"with `findWithDefault`":["instead"],"with `findWithDefault`.":["Or"],"with `flip":["elem`!","zip"],"with `fmap`":["or","since"],"with `fmap`ing":["over"],"with `foldM`,":["then"],"with `foldl'`":["and","directly","from","so"],"with `foldl'`,":["still"],"with `foldl'`.":["You"],"with `foldl`,":["but"],"with `foldr1`.":["I"],"with `foldr`":["is"],"with `fromEnum":["'0'`."],"with `fromEnum`":["/","and"],"with `fromListWith`":["without","(or","for","is","or"],"with `fromListWith`,":["I","but","which"],"with `fromListWith`?":["The","It","Hint:"],"with `fromList`":["or"],"with `generateName`":["as"],"with `ghc":["-Wall`","--make"],"with `ghc-pkg":["list"],"with `go`":["as","in"],"with `guard`":["is"],"with `hash`":["as"],"with `head`":["and"],"with `id`":["for"],"with `insertWith":["(+)`."],"with `insertWith'`":["that"],"with `insertWith`":["does","performs","function"],"with `insertWith`)":["is"],"with `insertWith`,":["which","but"],"with `insertWith`.":["In"],"with `isAlphaNum`,":["which"],"with `isEquilateral`":["and"],"with `isLower`,":["it's"],"with `isSuffixOf`":["from"],"with `isUpper":["c`."],"with `isUpper`":["and"],"with `last`:":["the"],"with `length`":["and","or"],"with `loeb`":["only,","only,"],"with `map":["(,1)`","toLower`.","(,"],"with `map`":["than","instead","and","than","and","as"],"with `map`,":["`foldr`","not"],"with `map`.":["The"],"with `maybeToList`":["and"],"with `mkName":["::"],"with `mod`),":["and"],"with `modifyTVar`":["I"],"with `module":["WordCount"],"with `newTVarIO`":["and"],"with `newtype`":["from"],"with `normalise":["."],"with `normalize`":["(and"],"with `not":["(null","(null"],"with `not`":["+"],"with `nucleotide`":["or"],"with `null`":["instead"],"with `on`":["from"],"with `ord`":["and"],"with `own`":["operator:"],"with `possiblePrimes`":["and"],"with `quotRem`":["or"],"with `quotRem`).":["I"],"with `readMVar`":["and"],"with `readTVarIO`":["--"],"with `repeat`.":["(`TupleSections`"],"with `scanl`.":["For"],"with `seq":["foldResult"],"with `seq`":["or","but"],"with `seq`,":["parallelism,"],"with `sequence`,":["`mapM`"],"with `shiftL":["acc"],"with `sort":["la"],"with `sort`":["instead.","and","from"],"with `span`":["and"],"with `sum`":["and","instead","and"],"with `take`":["..."],"with `toAscList`.":["Then"],"with `unSchool`":["instead"],"with `uncurry`?":["Also,"],"with `undefined`":["or"],"with `unfoldr`.":["Not"],"with `unlines`,":["`map`,"],"with `when`":["(because"],"with `word`":["too."],"with `wordsBy`":["from"],"with `zipWith":["($)"],"with `zipWith3`":["without"],"with `zipWith`.":["Using"],"with `zip`":["then"],"with `{-#":["RULES","LANGUAGE"],"with a":["much","function","list","question","period,","`Read`","character","point-free","way","concise","function","fold?","chain","group","fold","function","smart","smart","better","let","combining","one","mere","dedicated","letterSet","separate","fold","simple","bit","`fromListWith`.","list:","$","default.","constant","lazy","non-strict","map","nested","list","map","problem,","string","mutable","Map,","default","case","DFA","combining","tad","stack","map)","strict","tuple","recursive","predicate.","list","`zipWith`","separate","`case`","single","tuple","higher","hypothetical","combining","list","much","strict","closure,","`case`","memoising","tuple,","`case`","strict","fold","standard","finite","list","function","type.","lot","`let`","type","`foldr`","lookup","`not","`printf`.","list","list","list","single","function","definitive","Char","syntax","left","type","few","`foldl'`.","lot","dilemma:","call","fold.","different","derived","standard","bit","strict-value","shorter","better","couple","`where`?","function","predefined","thunk","list","list","small","currently","more","pattern","map.","map.","way","list","more","map.","small","\"Warning:","bit","function","little","good","type","catch-all,","normal","`[(Integer-\u003eInteger)]`?","list","single","conversion","simple","function","list","type","built","nice","better","nice","function","reasonable","very"],"with abstract":["data"],"with accepting":["invalid","bad"],"with added":["Pointfree"],"with after":["`readTVar`ing"],"with all":["caps.","the","your","that","Monad","standard","the"],"with almost":["the"],"with alphanumeric":["strings."],"with an":["inline","`otherwise","article","empty","empty","exception.","outcome,","uppercase","explicit","arbitrary","empty","empty","empty","extra","unused","infinite","exclamation","approach","empty","association","internal","[operator","uncommon","invalid","n","implementation","interesting","elegant","error,","appropriate"],"with anagramming,":["or"],"with anagrams.":["Consider"],"with and":["which"],"with another":["from","evaluation","problem"],"with any":["base","intermediary","MonadPlus","attempt"],"with anything":["nicer.","better","that","shorter."],"with anything,":["but"],"with arithmetic":["or","(no","and","rather"],"with better":["names"],"with big-O":["notation"],"with binary":["values."],"with binding":["`letters`"],"with boolean":["constructors"],"with both":["ors"],"with both,":["but"],"with bottom":["values)."],"with build's":["unfolding)","unfolding)"],"with calling":["this"],"with candidate,":["so"],"with case,":["but"],"with chars":["as"],"with chunks":["for"],"with compiler":["extension"],"with complex":["monad"],"with composition":["or"],"with conjunction":["or"],"with counts":["as"],"with creation":["of"],"with criterion,":["but"],"with current":["API."],"with custom":["scoring"],"with date":["and"],"with declaring":["letters."],"with demorgan's":["law"],"with different":["types","code.","level"],"with doing":["it","this"],"with double":["score."],"with doubling":["and"],"with dropWhile":["if"],"with emphasis":["on"],"with empty":["instead","input).","case...","input,","input","input."],"with enough":["masochism."],"with error":["checking","description,"],"with escaping":["and"],"with etrepum's":["comments."],"with evaluated":["value"],"with every":["multiplication"],"with exercism":["binary"],"with explicit":["function","recursion","recursion.","vars.","arithmetic"],"with external":["modules."],"with eyes,":["not"],"with feedback":["would"],"with fewer":["than","imports","checks"],"with filter,":["but"],"with finite":["input"],"with foldl":["you"],"with foldl'":["and"],"with folds":["is"],"with fromListWith":["not","that"],"with fromListWith?":["No"],"with function":["application"],"with function,":["or"],"with functions":["instead","that","from","requiring","allowed","from"],"with garrets":["nitpick"],"with getting":["data"],"with goodies":[":]"],"with guard":["clauses.","clauses","syntax?"],"with guards":["or","for","you","is","is","instead;","having"],"with guards,":["e.g."],"with haskell":["idioms,"],"with haskell-mode-exts":["and"],"with haskell-platform":["using"],"with having":["it","no","exactly"],"with helper":["functions"],"with higher":["order","level","level"],"with horrible":["unreadable"],"with how":["to","to","the","I","my","you","it"],"with id,":["I"],"with identical":["names,"],"with idiomatic":["Haskell,"],"with implementing":["things"],"with importing":["`splitOn`"],"with imports,":["e.g."],"with in":["Haskell."],"with incorrect":["characters"],"with infinite":["lists.","lists","lists,"],"with infix":["notation,","notation.","notation"],"with initial":["value"],"with inlined":["functions"],"with inserted":["element)"],"with inserting.":["The"],"with integral":["numbers?"],"with is":["using"],"with isAlpha":["and"],"with isLower,":["which"],"with isYelling":["-"],"with it":["(but",";)","some.","allocates","(even","since","it"],"with it,":["in","to","you"],"with it.":["Perhaps","I","Using"],"with its":["build/fold","build/fold","ecosystem","chain","RULES"],"with just":["one","`map`,",":","a","four","arithmetic,","one","`fromList`,","arithmetic","`sum`","one","Control.Monad:","writing","`takeWhile`","a","another","some","packages","`mapM","`(f","arithmetic,","keep","`\u003c=`,","`(/=)`","`Data.List`"],"with lambda":["lifting,"],"with large":["enough","words","input","enough","word"],"with later":["tasks!"],"with layout":["linearization"],"with laziness":["but"],"with lazy":["semantics,","language"],"with left":["fold."],"with length":["calculation"],"with length,":["which"],"with less":["repetition.","indentation.","repetition","code","code.","code.","code","code.","code,","code.","helper"],"with liftM":["instead"],"with line":["#9,"],"with linearizing":["matrix"],"with lines":["13-14?"],"with links](http://www.haskell.org/haskellwiki/Software_transactional_memory)":["to"],"with lists":["(not",":)","of"],"with lists,":["due"],"with lists.":["The"],"with loeb":["only","only"],"with lowerCamelCase":["rather"],"with lowercasing":["the"],"with making":["this","it","```sep```"],"with manual":["sequencing."],"with many":["incorrect"],"with map":["than","to"],"with mapping":["argument"],"with matching":["against"],"with matrices":["(e.g."],"with maybe":["then"],"with me":["while","you"],"with me,":["I"],"with me.":["i'll"],"with memoization).":["Also"],"with mine":["where"],"with minimal":["cost"],"with mkRobot,":["and"],"with module":["functions"],"with monads,":["and"],"with monads/functors":["could"],"with more":["than","than","than","than","than","optimisations,","arguments","sane"],"with most":["of"],"with much":["better"],"with multiple":["guards,","guard"],"with mutable":["variables"],"with my":["code:","implementation.","``range``","alternate","previous","implementation","`quotedWords`"],"with new":["test","parameters"],"with newtypes":["then","(I"],"with nice":["diagrams"],"with no":["type","type","type","type","backtracking,","union","parentheses","temporary","optimizations","indentation.","explicit","chance","loss","parentheses.","`readTVar`"],"with non-empty":["input,"],"with non-operator":["functions"],"with non-strictness":["is","here"],"with not":["explicitly"],"with nucleotides":["this"],"with number":["220,"],"with numbers":["of"],"with omitting":["it"],"with on":["the"],"with one":["`pack`","argument","stone","constructor.","of","```where```:","answer","`map`"],"with only":["one","a","a","four","one"],"with operator":["sections"],"with optimizations":["on.","turned","on","on,","on","on."],"with ord":["and"],"with ordinary":["mutexes"],"with other":["things)","functions","methods.","exported"],"with parallelism":["and"],"with parentheses":["because","on"],"with parentheses.":["You"],"with parsers),":["but"],"with pattern":["matching","matching!","matching,","matching","matching","matching.","matching"],"with plain":["`Maybe`"],"with point":["form,","about"],"with point-free":["style,"],"with pointfree":["fever"],"with powers":["of"],"with pragmas":["at"],"with prelude":["and"],"with prepending":["to"],"with printf":["but"],"with private":["data"],"with pure":["math?"],"with questions,":["and"],"with randomRIO.":["Seems"],"with readability":["and","by"],"with record":["syntax."],"with recursion":["but:"],"with regard":["to","to","to","to"],"with regex":["```[A-Z]{2}[1-9][0-9]{2}```,"],"with regexes":["but"],"with repeat":["1"],"with repeated":["concatenation"],"with respect":["to","to"],"with reverse,":["but"],"with roman":["numerals."],"with separating":["the"],"with sequencing":["takes"],"with short":["names"],"with shorter":["names."],"with shouting":["and"],"with sides":["of"],"with similar":["problems"],"with simple":["signatures"],"with sing":["having"],"with single":["count"],"with size":["O(n)"],"with small":["input,"],"with so":["little"],"with solution":["which"],"with some":["simple","big","invalid","other","type","arithmetic,","tricks),","hash"],"with something":["this","else.","equivalent","such","simple","like","like:","like","like","that's","similar","like"],"with somewhat":["gruesome"],"with sorting,":["therefore"],"with space":["leaks","leaks"],"with spaces":["around"],"with spaces.":["`mapFunc`"],"with splitPlaces.":["All"],"with splitting":["up"],"with standard":["functions","function"],"with starting":["from"],"with stream-based":["IO."],"with strict":["evaluation","evaluation),"],"with strictly":["(such","here,"],"with strictness":["it's"],"with strings":["this","if"],"with strings?":["How/where"],"with structural":["induction."],"with stuff":["like"],"with such":["a"],"with sufficiently":["large","large","large"],"with suspended":["computation"],"with terser":["names"],"with test":["cases!"],"with text":["since"],"with that":["idea.","you","it","as","API"],"with that.":["I","I'm"],"with the":["same","generator.","language","need","`TupleSections`","spirit","result","language.","tests.","exception","use","empty","same","same","use","internal","string","weird","poorly","KindSignatures","[String]","conditional","other","others.","`shout`","other","others.","-","state...","different","lowest","accumulator[1]","capsLock","implicit","definition","more","do","exercise","type","following","double","very","intercalate","second","above","way","same","overall","provided","Functor","appropriate","functionality","typeclasses.","map","type","later","responses","`succ","latest","Prelude","algorithm,","shouted","grade","&&","qualified","other","capitalization","type","prelude,","Haskell","fixes","`\u003c$\u003e`","State","type","names","current","necessary","Haskell","redundant","current","design","variable","guards","`valid`","Maybe","rest","size","Strict","type","(admittedly","`count`","comments","introduction","values","additional","smallest","fact","extra","whitespace.","list","tail","hint","new","angle","`error`","boolean","style,","quick","language","balancing","`downCaseFirst`","`where`","double","subset","type","right","fact","Haskell","least","variable","whole","type","above","`mapMaybe`","MVar","verses,","eletter","API","README,","new","tests","old","import...","rest.","basic","use","lazy","rightmost","invalid","isShout","verse","speed","signature","`id`","mutability,\"","problem,","fixity","big","other","formatting","right","qualified","list,","rest","comments"],"with their":["difficulty","example"],"with them":["(with"],"with them,":["but"],"with them.":["A"],"with these":["observations","exercises?","features."],"with this":["code","one,","as-is","code","version","problem.","solution;","recursive","implementation","code","version","implementation.","would","implementation","implementation","kind","one","alternate","code,","task.","as-is.","style","at","one,","though.","exercise,","approach","simpler","approach","way","is","MVar","but","code.","task.","to"],"with this,":["just","but"],"with this.":["I","But"],"with this;":["it"],"with those":["improvements.","changes"],"with those.":["As"],"with three":["`\u003c|\u003e`"],"with to":["complex"],"with toList":["however"],"with tuples,":["why"],"with two":["changes","back","guards,"],"with type":["*String","String","signature","synonyms","classes.","`::"],"with types":["and"],"with uncurry":["(/=)"],"with underscore":["or"],"with understanding":["the"],"with unicode":["characters."],"with union":["or"],"with uniques":["we"],"with unlines":["it"],"with unreadable":["code."],"with unused":["`import`"],"with unwanted":["pairs]\u003c/pre\u003e?"],"with up":["front."],"with uracil,":["then"],"with usage":["of"],"with using":["```isLower```","count","`count`","`enumFromThenTo`","the","Data.Map"],"with vastly":["different"],"with verse":[";)"],"with very":["short"],"with w":["being"],"with what":["the","you","you","you're","you"],"with where":["statements"],"with whether":["you're"],"with whichever":["one","you"],"with whitespaces,":["like"],"with with":["unused"],"with wordsBy,":["but"],"with writing":["your"],"with you":["that","on","nit."],"with your":["guard","solution.","(not","suggestions.","point.","comment","own","display","data","types.","current","decision,","code.","current","tips."],"with yours":["advices","suggests..","though):"],"with zero":["equal"],"with zero.":["`unfoldr`"],"with zip":["needing"],"with zip.":["This"],"with zipWith:":["`sum."],"with, but":["the"],"with, until":["I"],"with. I'd":["be"],"with. Maybe":["something"],"with. The":["parens"],"with. and":["starting"],"with... now":["that"],"with/without the":["long"],"with; thanks":["for"],"with\u003cpre\u003efactors reducedN":["(k+1)"],"withMVar for":["the"],"withPeriod as":["a"],"withStrand ::":["String"],"within `where`":["bindings,"],"within a":["reasonable"],"within an":["80"],"within haskell":["community."],"within my":["abilities"],"within the":["scope"],"without (to":["me)"],"without Data.Char":["would"],"without Data.List":["at"],"without Data.Map?":["There's"],"without Template":["Haskell."],"without `^`":["or","using"],"without ```sort```":["and"],"without ```sumsOfSquares```":["&"],"without `do`":["syntax.","syntax,"],"without `group`":["or","or"],"without `isDigit`":["using"],"without `isPunctuation`.":["It'll"],"without `reverse`":["using"],"without `runIdentity`":["because"],"without `specialChar`?":["What"],"without `strip`":["at"],"without `transpose`":["which"],"without `unionWith`.":["Pass"],"without `union`":["would"],"without a":["regex","null","sort.","`filter`.","strict","do","map.","parser.","Map?","manual"],"without actual":["parsing."],"without actually":["implementing"],"without adding":["much"],"without advicing":["my"],"without altering":["the"],"without an":["implementation"],"without any":["fromEnum","sort","error","explicit","guards.","whitespace.","explicit","guards.","real","Lefts","intermediary","loss","pattern","lists","other","lists?","predefined","context","need"],"without arrows.":["I"],"without binding":["it,"],"without breaking":["any"],"without building":["up","of","any"],"without calculating":["any"],"without causing":["unintended"],"without changing":["it's","the"],"without checking":["for","balance","the"],"without consuming":["the"],"without converting":["to","number","`to/fromList`."],"without creating":["any"],"without degenerating":["into"],"without dependencies":["outside"],"without do":["syntax"],"without either":["appending"],"without evaluating":["the"],"without even":["traversing","knowing","needing","using"],"without ever":["forcing"],"without exponentiation":["or"],"without external":["modules"],"without feeling":["like"],"without fully":["re-understanding"],"without generalizing":["it"],"without guarding":["on"],"without guards":["would"],"without hard-coding":["the"],"without having":["to","to","to","an","the","to","to","to","them","seen"],"without here,":["but"],"without import":["doesn't"],"without imports":["and"],"without incurring":["significant"],"without indexing":["would"],"without intermediate":["maps.","`foldr"],"without introducing":["types.","`thousands`,"],"without it":["I'd","actual"],"without it)":["and"],"without it,":["but"],"without just":["creating"],"without knowing":["the","what","what"],"without leaving":["String"],"without list":["allocation."],"without lists":["at"],"without looking":["at"],"without making":["a"],"without manually":["removing"],"without map,":["`any`"],"without me":["having"],"without much":["more","overhead","trouble,"],"without my":["code"],"without non-alpha":["or"],"without optimization":["here."],"without optimizations,":["interpreting"],"without outside":["tools."],"without parentheses":["since"],"without pattern":["matching","matching"],"without problems":["with"],"without processing":["the"],"without real":["gain.","allocation."],"without really":["thinking."],"without recursion.":["Think"],"without reference":["to"],"without relying":["on","on"],"without repeating":["`isNucleotide`","`c`"],"without requiring":["the","a"],"without retry":["is"],"without sacrificing":["expresiveness."],"without saving":["first"],"without signatures":["under"],"without syntax":["extensions."],"without that":["last","`var"],"without the":["`filter`?","explicitness","`response`","prefix.","lambda","reverse","ugly","concat,","use","special-case","`M.map`,","qualified","nested","hints","extension.","additional","`if`.","pen","`$`","maybe's.","`do`).","last","need","'s',"],"without them":["at","having"],"without them,":["especially"],"without this":["line."],"without too":["much","much","much"],"without unsafePerformIO.":["I"],"without use":["of"],"without using":["```Data.Text```?","a","`strip`","the","`==`?","a","typeclasses","Control.Lens","regex","`map`.","`foldr1","length,","`M.map`.","`groupBy`,","lists","an","lists","`unsafePerformIO`.","`count`","lists,","composition).","`++`?","`&&`","`do`","MVars?","something","```++```?","`show`,","`fromListWith`.","`group`,","lists"],"without worrying":["that","about"],"without writing":["ugly","so"],"without yet":["having"],"without you":["having"],"without your":["eyes"],"wn 1":["empty))))`."],"won't accomplish":["such"],"won't be":["used","much","surprising","able","computed.","too","able","having","top-level","included"],"won't benefit":["from"],"won't build":["up"],"won't change":["anything,"],"won't create":["space"],"won't do":["the"],"won't ever":["let","be"],"won't export":["everything."],"won't fix":["strictness"],"won't give":["you"],"won't have":["any","empty","that","to","to","to","to","reached","to"],"won't know":["for"],"won't matter":["whether"],"won't matter.":["However"],"won't need":["the","`fromMaybe`","the","any","to","`^`,","`liftM2`,","any","to","to","a","the","anything"],"won't pass":["the"],"won't pick":["nits"],"won't pretend":["that"],"won't put":["them"],"won't take":["up","up","forever."],"won't tell":["me"],"won't typically":["use"],"won't want":["for"],"won't work":["at","because"],"won't write":["that"],"won't, because":["ghc"],"wonder If":["I'll"],"wonder about":["the","defining"],"wonder how":["many","to","fast"],"wonder if":["there's","(repeat","stream","it","there","my","you","there's","you","it","it's","there","there's"],"wonder whether":["it"],"wonder which":["is"],"wonder why":["there"],"wondered also":["whether"],"wondered whether":["I"],"wondered why":["I"],"wonderful. I":["was","had"],"wondering about":["the","that!"],"wondering how":["best","clean","useful","to","if","to"],"wondering if":["laziness","there","there's","`as","there's","there","you","changing"],"wondering it":["aloud"],"wondering what":["to"],"wondering whether":["tying"],"wondering why":["reducing"],"wondering, how":["to"],"wondering, where":["do"],"wondering. That":["warning"],"wonders for":["code"],"wonky with":["functions"],"wonky. You're":["recursing"],"word 'split'":["and"],"word -":["but"],"word 1":["m`,"],"word 1`":["will"],"word :":["list`."],"word =":["filter","filter","…","filter"],"word ==)":["."],"word `expression`,":["i.e."],"word `reverse`":["reminds"],"word anagram":["=","="],"word and":["count-of-one","then"],"word as":["its","the","you"],"word at":["a"],"word but":["negligible"],"word by":["word,"],"word count":["map,","using","map"],"word for":["that"],"word from":["the","being"],"word in":["scrabble"],"word instead":["of"],"word into":["a","a"],"word is":["an","a","an","an","composed","punctuation."],"word lists":["(anything"],"word never":["changes..."],"word only":["once?"],"word or":["phrase","phrase,"],"word split":["was"],"word splitter":["using"],"word than":["`capitalize`..."],"word that":["one"],"word to":["variable(s)"],"word tokenization":["easy,"],"word will":["be"],"word with":["candidate,"],"word\" using":["all"],"word' ==":["sort"],"word' is":["computed"],"word)` rather":["than"],"word)`, although":["it"],"word)`. Also,":["function"],"word, and":["compare","the","have","to"],"word, but":["this"],"word, tallying":["up"],"word, that's":["a"],"word, which":["will"],"word-count example.":["So"],"word-count exercise":["was"],"word-count probably":["wasn't"],"word-count to":["implement"],"word-count, Data.Map.Strict":["should"],"word-count, but":["you"],"word-counts exercise":["is"],"word. Something":["like"],"word. The":["constant"],"word. `Data.Char`":["has"],"word. a":["set"],"word1` be":["fully"],"word1` is":["evaluated"],"word; a":["="],"wordBy function":["that"],"wordCollection =":["words"],"wordCount )":["where`"],"wordCount ::":["String","String","String","String"],"wordCount =":["fromListWith","foldl'","M.fromListWith"],"wordCount message":["="],"wordCount more":["sensical"],"wordCount on":["a"],"wordCount phrase":["="],"wordCount to":["use"],"wordCount using":["either"],"wordCount, any":["advice"],"wordCount. Looking":["at"],"wordCounters .":["map"],"word` and":["`sort","`sort"],"word` in":["`anagramsFor`),"],"word` is":["evaluated"],"word` to":["a"],"word` will":["be"],"worded, it":["seems"],"wordier solution":["with"],"wordier. I'm":["not"],"words $":["strip"],"words (repeat":["1))`"],"words (the":["tokens"],"words .":["map","sanitize`","lowerCase","map","map"],"words after":["the"],"words and":["I","count"],"words are":["anagram","split","rarely"],"words as":["you"],"words assuming":["you"],"words at":["the"],"words by":["may"],"words doesn't":["matter,"],"words from":["a"],"words function":["that"],"words in":["the","this","the","each","the","it"],"words into":["a","a","memory"],"words is":["kind"],"words it's":["a"],"words like":["\"apple\"","\"apple\""],"words of":["maximum"],"words on":["every"],"words once":["to"],"words out":["of"],"words so":["that"],"words that":["are"],"words then":["it","just"],"words to":["it","be","be"],"words with":["single"],"words would":["probably"],"words you":["could"],"words\" would":["be"],"words\". It":["is,"],"words' and":["'are"],"words) .":["lines","lines)"],"words), whatever":["space"],"words). I":["think"],"words)` isn't":["calculated"],"words, `foldr`":["is"],"words, `hasLetter`":["looks"],"words, and":["all","it"],"words, as":["a"],"words, do":["you"],"words, it":["should"],"words, maps":["into"],"words, perform":["an"],"words, returns":["whether"],"words, say":["a"],"words, should":["I"],"words, try":["this"],"words, which":["not"],"words, you":["can","can","don't"],"words, you're":["going"],"words. Actually,":["try"],"words. Instead":["of"],"words. There":["are"],"words: a":["space"],"words? See":["[alphagram](http://en.wikipedia.org/wiki/Alphagram)."],"wordsBy (not":[".","."],"wordsBy (…)":["."],"wordsBy based":["on"],"wordsBy from":["Data.List.Split","Data.List.Split","Data.List.Split"],"wordsBy function":["and","in","that"],"wordsBy function.":["Guess"],"wordsBy is":["indeed"],"wordsBy isSpace`":["-"],"wordsBy suggested":["in"],"wordsBy, but":["this","try","Data.List.Split"],"wordsBy, so":["I'll"],"wordsFrom .":["normalize"],"words` or":["something"],"words` will":["do"],"words` would":["be"],"words` you":["can"],"words`, since":["Data.Map"],"words``` so":["it"],"words… it":["may"],"wordy implementations":["are"],"wordy it":["seems."],"wordy, but":["following"],"work -":["what"],"work :)":["Even"],"work all":["twice,"],"work and":["others","are"],"work around":["the"],"work as":["is","foldr,"],"work at":["all.","basically"],"work because":["the","`n","`isAnagram`","you"],"work best":["with"],"work better":["as","that"],"work better,":["you","or"],"work but":["I'm"],"work differently":["at"],"work done":["for","by"],"work equally":["well.","well"],"work fast":["enough."],"work fine":["too.","as"],"work for":["your","isShouting","no","you.","some","a","this","any","any","any","the","testing","you","infinite","me."],"work great,":["you'd"],"work here":["as"],"work if":["I","two","valued","`(+2)`"],"work in":["this","my","this","some","left-to-right","Windows","constant","ghci),","this"],"work inside":["`atomically`"],"work involved":["to"],"work is":["good,","`go`"],"work isn't":["even","useful"],"work it":["out?"],"work it's":["already"],"work just":["fine,","fine.","as"],"work like":["this.","this."],"work needed":["to"],"work nicely":["(thought"],"work not":["worse"],"work of":["recursing"],"work on":["non-empty","any","String.","String.","the","the","than","line","infinite"],"work once":["you"],"work only":["once."],"work out":["the","great.","how","the","the","the","how","how","that","how","how","what","the","how","how","how","than"],"work over":["data"],"work perfectly":["fine,"],"work quite":["like"],"work since":["the"],"work that":["out."],"work the":["same","same"],"work through":["some"],"work to":["do","the"],"work under":["the"],"work until":["it"],"work up":["a"],"work well":["in","here."],"work well,":["for"],"work when":["you"],"work with":["`flip","`Text`?","`Text`.","Haskell","any","PhoneNumber","an","matrices","Arrows.","different","any","counts","the","the","a","functions","`zipWith`.","`loeb`","`loeb`","characters.","current","many","nucleotides","`foldr1`.","7.4,"],"work without":["consuming"],"work would":["be"],"work you":["have"],"work you've":["put"],"work! You're":["`illogical`"],"work\" trade-off":["that"],"work, although":["pqueue"],"work, because":["I"],"work, but":["the","think"],"work, hence":["I"],"work, it":["can"],"work, it's":["almost"],"work, not":["sure"],"work, so":["I"],"work, that":["might"],"work, what":["you"],"work, which":["would"],"work. GHC":["is"],"work. How":["could"],"work. I":["feel","would","like"],"work. It":["looks"],"work. It's":["slightly"],"work. Maybe":["the"],"work. The":["`School`","other","right"],"work. Therefore":["it'd"],"work. You":["can","need"],"work? Also,":["will"],"work? At":["my"],"work? Unless":["the"],"work? [Eggs":[".."],"workaround to":["get"],"worked around.":["You"],"worked for":["all","everything"],"worked from":["a"],"worked if":["you"],"worked out":["how","how"],"worked so":["well"],"worked well":["as"],"worked with":["ASCII,"],"worked, I'm":["not"],"worked. I":["wouldn't"],"worked. That":["way"],"worked. however,":["it"],"working a":["bit"],"working and":["then"],"working as":["expected"],"working at":["a","full-speed.","all!"],"working example":["(you"],"working fine":["up"],"working for":["me.","alphabetic","me"],"working in":["reverse","sublime."],"working it":["out."],"working now":["but"],"working now,":["must"],"working on":["another","this"],"working out":["how","how","how"],"working solution":["(given","before","by"],"working sometimes,":["that's"],"working through":["'Learn"],"working with":["strings","the","the","String","powers","text","infinite","newtypes"],"working, or":["why"],"working, so":["I"],"working. If":["there","it"],"workings of":["`garden`"],"works (":["I"],"works I":["very"],"works I'd":["suggest"],"works a":["bit"],"works and":["kinda","why","looks","there's","has","what","may","what"],"works are":["easy"],"works as":["the","well,"],"works basically":["the"],"works because":["multiplication"],"works better":["in"],"works both":["as"],"works but":["`fail`","seems","I","an","it"],"works by":["accident"],"works elementwise.":["HEAD"],"works everywhere,":["even"],"works fine":["if","too.","here:","in","though."],"works fine.":["I"],"works for":["the","me.","every","non-empty","ASCII","all","any","64-square"],"works from":["left","a"],"works great":["so","with"],"works here":["(or"],"works in":["Haskell:","Haskell","Haskell:","Haskell,","Haskell,","Elixir","one","Haskell","windows","math"],"works is":["also","subtle,","this","this"],"works just":["as","fine","fine","fine","as"],"works like":["that.","that","an"],"works of":["course"],"works on":["`Enum`","a","a","GHC","Integral"],"works only":["if"],"works or":["why"],"works perfect":["with"],"works perfectly.":["Thanks"],"works really":["startled"],"works slightly":["different"],"works sounds":["about"],"works too,":["of"],"works totally":["fine."],"works well":["for"],"works well.":["I"],"works which":["should","should","should","should"],"works with":["infinite","any"],"works without":["`runIdentity`"],"works would":["be"],"works, I":["highly","highly","highly","highly","highly","highly","highly","highly","suggest","highly"],"works, and":["how","it's"],"works, but":["I","I","this","the","using","the"],"works, check":["out","out","out","out","out","out","out","out","out"],"works, especially":["as"],"works, it":["would"],"works, it's":["not"],"works, look":["at","at"],"works, see":["this"],"works, so":["some"],"works, which":["may"],"works. Dealing":["with"],"works. For":["example,"],"works. Given":["your"],"works. I":["doubt"],"works. If":["I"],"works. It":["gets"],"works. Like":["I"],"works. The":["README"],"works. Waiting":["for"],"works. You":["can"],"works. You'd":["implement"],"world environment,":["I"],"world of":["curly"],"world, but":["it"],"world\u003c/gasp\u003e in":["which"],"worried about":["whether","reverse","performance."],"worried about.":["And"],"worried that":["there's"],"worries. That":["sounds"],"worry about":["it","it,","it,","performance","big-Oh","what","this"],"worry is":["that"],"worry much":["about"],"worry that":["changing"],"worry too":["much","much"],"worrying about":["its","the"],"worrying that":["the"],"worse Data.Map":["is"],"worse because":["it"],"worse behavior":["than"],"worse than":["the","that.","`f`","`(\u003c*\u003e)`/`ap`."],"worse then":["just","if-then-else,"],"worse to":["use"],"worse with":["regard"],"worse) to":["write"],"worse, not":["sure"],"worse. Also":["the"],"worst case":["would","for","is","while","for","for"],"worst haskell":["code"],"worst it'll":["crash"],"worst part":["for"],"worth 0":["points,"],"worth 1":["point"],"worth checking":["for"],"worth considering":["one"],"worth defining":["it"],"worth getting":["used"],"worth implementing":["(and"],"worth in":["this"],"worth it":["just","to"],"worth it,":["but","even"],"worth looking":["at"],"worth mentioning":["here","somewhere","here"],"worth noting":["that"],"worth putting":["signatures"],"worth the":["effort","hassle.","trouble.","trouble.**","trouble\"","same","extra","effort","extra","hassle,","effort"],"worth thinking":["about","about"],"worth to":["use"],"worth too":["many"],"worth trying":["out."],"worth unpacking":["`robotB`,"],"worth, this":["code"],"worth. I":["imagine"],"worthwhile -":["as"],"worthwhile for":["this"],"worthwhile just":["to"],"worthwhile to":["write"],"worthwhile. I'll":["have"],"would *also*":["do"],"would I":["think","know","define"],"would `map":["(,0)"],"would accept":["this."],"would act":["both"],"would actually":["be","be"],"would add":["spaces"],"would agree":["with"],"would aid":["readability."],"would allocate":["the"],"would allow":["Haskell","you","you","you","you","map","you","you","you"],"would almost":["certainly"],"would already":["have"],"would also":["make","import","help","consider","suggest","be","be","make","indicate","put","be","suggest","be","read","either","write"],"would always":["yield","prefer"],"would and":["will","will"],"would appear":["to"],"would apply":["a"],"would appreciate":["a"],"would argue":["that"],"would assume":["that"],"would be":["simpler","preferable,","stream","the","nice,","perfect.","verbose","simpler","a","nice","unecessary","descructering","simpler","to","to","to","to","-","appreciated.","easier","to","transcription.","a","any","a","something","`canonical","interesting","tricky","to","better","useful","potential","much","to","split","a","nice","clearer","enough.","acceptable","clearer,","to","appreciated!","to","a","clearer","`not","nice","nice","the","forced","to","`not","hard","good","a","a","to","a","another","more","more","more","more","able","to","nice.","to","clear","fine","how","to","equivalent","fine","`on","a","almost","to","customary","simpler.","more","easy.","a","an","even","disinclined","shorter","to","easier","`isSuffixOf`","to","a","fine,","a","a","using","the","the","a","a","nice","clearer","sufficient.","a","more","to","to","a","much","a","much","more","ok","a","more","to","to","shorter","hard","nice","good","acceptable","more","to","a","to","to","better","whether","part","a","much","more","better","avoiding","to","to","clearer","stated","to","less","a","more","the","better","a","nice","caught","nicer","to","harder","to","interested","to","the","to","on","somewhere","clearer.","pretty","much","a","common","equivalent","to","to","possible","even","to","very","a","better","to","to","to","to","like","to","worth","clearer","difficult","a","a","to","to","a","a","to","to","better","nice","better","a","possible","to","used","if","if","the","a","more","more","no","a","more","more","so","wrong.","to","to","easy","faster","better","to","welcome...","a","`sum`","better","more","better","calculated","printed","to","stream","your","1,","26","more","better","written","called","to","worse","to","O(1).","to","necessary.","even","something","to","`fromGregorian","math...","cleaner","to","to","much","difficult","nice","clearer","a","to","sufficiently","wrong).","better","to","appropriate","to","called","interpreted","even","useful","using","less","a","to","helpful,","a","an","to","a","very","more","the","to","to","to","O(n).","to","shorter","to","a","to","to","a","named","welcome","built","able","in","a","to","much","a","to","a","to","to","style.","more","just","harder","a","more","simpler","shorter","best","closed","open.","ideal","to","a","a","more","even","`fromList`.","a","the","a","adequately","a","to","a","nicer","to","a","better.","less","appreciated.","able","somewhat","very","to","slightly","better,","awfully","a","nice","better","nice","like","a","nice","nice.","a","both","more","to","way","a","very","tempted","to","faster","to","more","to","useful.","good","called","important.","to","better","to","clearer","a","used,","easier","nicer"],"would blow":["up"],"would break":["down"],"would catch":["this"],"would cause":["the","confusion"],"would certainly":["be","use"],"would change":["here","your","the","the","`rle`"],"would choose":["different"],"would compare":["speed-wise."],"would compile.":["Where"],"would convey":["better"],"would could":["have"],"would crash":["the"],"would create":["a"],"would currently":["crash"],"would curry":["the"],"would de-clunkify":["my"],"would define":["a"],"would definitely":["come"],"would depend":["on"],"would detect":["OtherMessage"],"would do":["is","it","the","in","the","fine,","an","an","an","his","if","(IIRC)."],"would dwarf":["it,"],"would earn":["a"],"would easily":["do"],"would either":["convert"],"would eliminate":["line","the","the"],"would encourage":["you"],"would end":["up","up","up"],"would expect":["a","a","areaCode","those","to","it","it","`prettyPrint","given","it","that","it","the"],"would explicitly":["import","give"],"would expose":["the"],"would fail":["for","for","on","wasn't","this","if"],"would fail,":["because"],"would filter":["on"],"would find":["the"],"would fix":["that."],"would flip":["the"],"would force":["`n`."],"would further":["improve"],"would fuse":["the"],"would get":["an","rid","all","rid","a"],"would give":["me","you","the","me","me"],"would go":["with"],"would group":["all"],"would guarantee":["that"],"would have":["written,","a","a","been","dropped","a","to","never","`prettyPrint'`","gone","to","to","been","scanned","a","everything","a","save","looked","ensured","to","been","preferred","to","been","to","been","to","to","the","some","it...","been","to","seen","been","to","been","liked","the","type","used"],"would help":["people","quite","me","with"],"would highly":["recommend","recommend"],"would i":["write"],"would if":["the"],"would improve":["on","on","readability."],"would indent":["`detectShout`'s"],"would infer":["it,"],"would inline":["the"],"would interact":["with"],"would it":["want","make","be","mean"],"would just":["get","reintroduce","return","call","use"],"would keep":["spaces"],"would know":["how"],"would lean":["toward"],"would learn":["a"],"would let":["you","you","you","you","you","you","you"],"would like":["to","CAPS?","to","idiom","to","to"],"would like,":["you"],"would like.":["I"],"would likely":["yield","be"],"would look":["cleaner","like,","a","like","like:","like","like","like","nicer","nicer."],"would loop":["the"],"would lose":["most"],"would love":["comments"],"would maintain":["sorted"],"would make":["this","`grade`","the","the","the","`count`","the","`resetName`","`splitPhone`","this","`add`","`toTuple`","the","this","it","the","would","would","this","`(,1)`","this","`grade`","`grade`","the","this","your","this","the","it","them","this","your","this","sense","it","it","the","`toList`","the","it","sing","that"],"would male":["some"],"would mean":["duplication"],"would much":["rather"],"would need":["an","something","to","to","a","to","a"],"would never":["be"],"would nice":["to"],"would normally":["look","expect"],"would not":["use","compile,","be","have","look","use","be"],"would obviously":["be"],"would of":["course"],"would often":["be","be"],"would only":["export","need","be","have","allow","have","be","provide","be"],"would optimize":["that"],"would outweigh":["the"],"would parse":["a"],"would pass":["over","your","it"],"would perform":["this"],"would personally":["go"],"would pick":["on"],"would potentially":["eliminate"],"would prefer":["to","to","to","to","to","using","this:","to"],"would prevent":["having"],"would probably":["make","make","also","be","only","just","be","be","be","be","go","be","put","use","be","be","be","change","use","have","be","add","use","be","also","tell","be"],"would produce":["the"],"would put":["responseFor"],"would rather":["stick"],"would read":["better","a","nicer","closer"],"would really":["love"],"would recommend":["using","using","writing","creating","to","to","using","that","just","taking"],"would reduce":["your"],"would refer":["to"],"would remove":["the","the","above."],"would replace":["an"],"would require":["zipping","two","a","another","Hashable"],"would result":["more","in","in"],"would rid":["the"],"would ruin":["this"],"would save":["you","the","a","you","you","you","you","a","you","you"],"would say":["a","it","this"],"would screw":["with"],"would see":["that"],"would seem":["to"],"would separate":["`orbital"],"would seriously":["propose"],"would show":["thunk"],"would simplify":["the"],"would simply":["take","be","evaluate","be"],"would sound":["better"],"would start":["to","getting"],"would stay":["the"],"would still":["be","want","be","end"],"would submit":["the"],"would suffice":["while"],"would suggest":["that","replacing","reading","not","is","using","using","putting","trying","different"],"would take":["care"],"would tend":["to"],"would test":["odd"],"would that":["have","work"],"would there":["be"],"would this":["be","be"],"would thus":["return"],"would transform":["`add"],"would try":["to","to","making"],"would ultimately":["compile"],"would use":["`zip","`String`","Control.Arrow,","a","quotRem","a","`MoveLeft`,","a","infix","`System.Random`","`OtherMessage`","a","a","Data.Map.Strict","an","linear"],"would want":["to","to","to"],"would want:":["read"],"would warn":["you"],"would wholeheartedly":["agree"],"would work":["better","fine","perfectly","in","the","equally","for","because","better,","just","with","the"],"would work?":["[Eggs"],"would write":["`wordCount`","it","isSentenceChar","helper","this","this","isAnagram","`not","`silence"],"would you":["read","also","have","use","say?","rather","need","suggest","have"],"would zip":["the"],"would've been":["sufficient","cheaper","sufficient.","a","a","shorter","able"],"would've counted":["differently"],"would've figured":["it"],"would've gone":["with"],"would've helped.":["initially"],"would've never":["thought"],"would've sufficed.":["In"],"would've used":["`maybe`","a"],"would've written":["it"],"would, if":["true,"],"would. The":["best","fix"],"wouldn't \"abstract\"":["it"],"wouldn't \"think":["about"],"wouldn't accidentally":["export"],"wouldn't be":["onerous","using","stripped.","the","so","surprised","too","picked","able","again?","necessary.","as","such","a","too","so"],"wouldn't been":["easier.."],"wouldn't bother":["using","with"],"wouldn't bothering":["exposing"],"wouldn't change":["the"],"wouldn't do":["the","anything."],"wouldn't even":["say","know"],"wouldn't expect":["to"],"wouldn't expose":["the"],"wouldn't get":["any","caught","a"],"wouldn't have":["made","a","so","the","by","to","a"],"wouldn't include":["it."],"wouldn't it":["normally","make"],"wouldn't kill":["me."],"wouldn't know":["what"],"wouldn't make":["that","sense,"],"wouldn't match":["obviously."],"wouldn't necessarily":["say","make"],"wouldn't need":["the","to","to","a","to","to","to","the","both"],"wouldn't pass":["the"],"wouldn't permit":["that"],"wouldn't really":["need"],"wouldn't recommend":["exporting"],"wouldn't say":["that"],"wouldn't use":["extra","Show","so","equality"],"wouldn't want":["to"],"wouldn't work":["great,","with","with"],"wouldn't worry":["much"],"wouldn't write":["them.","`error\"invalid\"`"],"wouldn't. I've":["chosen"],"wouly say":["\"no"],"wound up":["using"],"wow this":["one"],"wow! thanks":["a"],"wow...I don't":["think"],"wrap Char":["or"],"wrap `toUpper`":["in"],"wrap a":["single"],"wrap and":["unwrap"],"wrap argument":["in"],"wrap the":["whole","output"],"wrap your":["head"],"wrap-around. That":["said,"],"wrapped (countWords":["empty)"],"wrapped function":["over"],"wrapped in":["parens","parentheses","a"],"wrapped my":["mind"],"wrapped up":["in"],"wrapped value,":["`(+1)","which","so"],"wrapper around":["`null`,","just"],"wrapper is":["a"],"wrapper to":["make"],"wrapping School":["up"],"wrapping and":["unwrapping","unwrapping","unwrapping,","unwrapping"],"wrapping another":["type."],"wrapping it":["in"],"wrapping my":["head"],"wrapping the":["equality","whole","input","tuple"],"wrapping this":["to"],"wrapping your":["predicates"],"wrapping/unwrapping overhead":["of"],"wraps another":["type"],"wraps in":["a"],"wrestling with":["how","types"],"write \"classify\"":["with"],"write \"there":["isn't"],"write 9-10":["lines"],"write \u003ccode\u003euracil":["="],"write Haddock":["comments"],"write Python":["in"],"write S":["from","from"],"write `&&":["not"],"write `(,1)`":["instead","which"],"write `(==)":["'on'"],"write `(\\a":["-\u003e"],"write `(\\w":["-\u003e"],"write `(\\x":["-&gt;","-\u003e","-\u003e"],"write `(not":["."],"write `Foldable`":["instance,"],"write `Map.insertWith":["(+)`"],"write `Map`":["instead"],"write `String":["-\u003e"],"write `String`":["instead","rather"],"write `[startDay":[".."],"write `\\c":["-\u003e"],"write `\\x":["-\u003e","-\u003e"],"write `_":["-\u003e"],"write ```isShouting```":["with"],"write ```isYelling```":["with"],"write `addWord`":["in"],"write `anagramsFor`":["in","in"],"write `any":["$"],"write `capitalise":["="],"write `complement`":["with"],"write `count`":["in"],"write `count`?":["Why"],"write `elem`":["infix"],"write `error\"invalid\"`":["even"],"write `f":["x`","x`","=","=","$","a"],"write `f(x)`":["you","or"],"write `filter":["isAlpha"],"write `filterFunction`":["in"],"write `flip":["f","(,)"],"write `foldr":["(\\x"],"write `foldr`":["version"],"write `fromList`":["in"],"write `getDigits`?":["You"],"write `head":["(reverse"],"write `initList`":["would"],"write `intercalate":["\"\\n\""],"write `isAnagramOf`":["such"],"write `isNucleotide`":["in"],"write `isSuffixOf`":["as"],"write `let":["j"],"write `letters":["/="],"write `liftA2":["(==)"],"write `map":["(,1)`,","(\\(s,","(\\x","(\\x"],"write `mkRobot`":["with","and"],"write `normalizeWords`.":["Consider"],"write `not":["(isAlpha","(null","(any",".","(any"],"write `nucleoCounts`":["with"],"write `nucleotideCounts`":["but"],"write `obitalPeriods`":["as"],"write `p":["x"],"write `plant`":["with"],"write `pling,":["plang,"],"write `question(ys)`,":["`question"],"write `readDNA`":["like"],"write `removeNoString":["speak`"],"write `removeSilience`":["as"],"write `replace":["="],"write `return":["."],"write `reverse":["[m..n]`"],"write `robotName`":["in"],"write `silence":["="],"write `silence`":["using"],"write `slices`":["that"],"write `sorted`.":["Using"],"write `split`":["a"],"write `start`":["such"],"write `sum`":[":)"],"write `t2u`":["using"],"write `toRNA`":["in","in","in"],"write `token`":["a"],"write `unwords":["[a,b,c..]`"],"write `where`":["on"],"write `wordCount`":["and","in"],"write `wordCounters`":["without"],"write `yelling`":["a"],"write `zip":["(map"],"write `zipDNA`":["in"],"write `zipWords`":["in"],"write a":["custom","comment","filter.","custom","`showProtein`","big","simple","version","type","helper","custom","type","type","capable","version","much","function","billion","much","parser","function","function","insertion","constant","lambda.","HLint"],"write all":["this"],"write allCaps":["with"],"write an":["`Alternative`","instance","efficient","algorithm:","easy","example","axample,"],"write anagramsFor":["in"],"write any":["function"],"write are":["all"],"write benchmark":[":)"],"write benchmarks":["to"],"write both":["`digitToInt`"],"write canonical":["in"],"write clearer":["type"],"write code":["for","that's","where","with"],"write code,":["since"],"write comments":["in"],"write components":["for"],"write conversion":["in"],"write could":["change"],"write eg.":["mkRobot"],"write everything":["I'm"],"write failing":["tests"],"write filter":["as"],"write function":["as"],"write functions":["of","in"],"write helper":["function"],"write idiomatic":["code."],"write in":["point-free","terms","a"],"write inserts":["with"],"write isAnagram":["in","in"],"write isQuestioning":["in"],"write isSentenceChar":["as"],"write it":["to","to","the","point","in","in","out","in","like","with",";)","yourself","`hammingDistance`","point-free,","in","is","as","even","in","in","in","off","as","in","In","out.","shorter.","more","in"],"write it.":["I"],"write just":["`Map`"],"write less":["code","code"],"write line":["11?","8"],"write more":["\"obviously","optimized"],"write much":["simplier"],"write operators":["in"],"write out":["a","the","the","`someFun'`","a"],"write predicate":["in"],"write replaceThymine":["as"],"write responseFor":["as"],"write show":["instance"],"write silence":["and"],"write simple":["functions"],"write small":["total"],"write some":["tests.","piece"],"write something":["like","like","like"],"write sum":["based"],"write tests":["for"],"write than":["\"function-per-line\""],"write that":["in","filter","very","list","lambda","combinator","fast?","fast),"],"write the":["silence","inferior","whole","count","whole","top-level","other","rest,","code","latter","other","others","tests"],"write their":["type"],"write them":["only"],"write things.":["(Likewise"],"write this":[":","as","with","using","in","pointfree.","sort","as","would","code.","code","in","without","task"],"write those":["signatures."],"write though.":["Can"],"write toRNA":["pointfree-style:"],"write total":["functions","functions"],"write transform":["would"],"write try":["and"],"write type":["signatures","signatures"],"write up":["until"],"write when":["using"],"write withPeriod":["as"],"write wordCount":["using"],"write wordsBy":["based"],"write your":["own","own","own","own"],"write-only code,":["but"],"writeIORef nr`.":["You"],"writeTVar .":["name"],"writeTVar acct":["bal"],"writers to":["the"],"writing \u003ccode\u003e[Char]\u003c/code\u003e":["because","I'll"],"writing \u003cpre\u003eisAsking":["str"],"writing IORefs":["(either"],"writing `==`":["as"],"writing `[Eggs..]`,":["it"],"writing `[x,":["x"],"writing `f(x)`":["instead"],"writing `isSep`":["in"],"writing `isShouted`":["in"],"writing `nucleotidesCounts`":["is"],"writing `shout`":["in"],"writing `tally`,":["check"],"writing a":["ton","shorter"],"writing after":["a"],"writing an":["instance"],"writing another":["function"],"writing cycle":["[True,"],"writing from":["phone","phone"],"writing functions":["as"],"writing in":["a"],"writing isShouting":["in"],"writing it":["this","out","this","in","with"],"writing my":["solution","own"],"writing on":["it"],"writing out":["the"],"writing point-free":["code"],"writing so":["much"],"writing something":["more","that"],"writing the":["same","code,","code,","boolean","submission,","code…","new"],"writing this":[":)","kind"],"writing this,":["I"],"writing this.":["Really"],"writing ugly":["code"],"writing your":["`words'`","own."],"writing... \u003cgasp":["/\u003e..."],"written `(r":["-\u003e)`"],"written `(x:xs)`":["(except"],"written ```concatMap":["f```."],"written `bottlesOfBeer":["(n-1)`."],"written `first":["(map"],"written `toUpper":["b"],"written a":["scrabble","named"],"written about,":["but"],"written against":["the"],"written and":["how"],"written as":["`[a,","`[startFrom,","`[x,","`[from,","`(++)","`PhoneNumber","`not","`String`.","just","`C.toUpper","`not","`(,","`String`","`uncurry","`map","`map","`String`,","`[minBound..]`.","`sort","`\"ATCG\"`","`x","just","`null","`cipher","`map","`map","`all","just","`return","`not","a","just","`or","`map","`size","`\"\"`","`replicate","`repeat","`[max,max-1..`","`f","`[Eggs..]`","`sum"],"written dnaToRna":["a"],"written for":["Ruby,"],"written force":["you"],"written if":["one"],"written in":["quite","point-free","clearer","point-free","a","camel","a","prefix","poitfree","the","a","point"],"written infix,":["but"],"written it":["like:"],"written like":["this..."],"written more":["clearly","concisely","concisely"],"written much":["more","more"],"written on":["line","one"],"written somewhat":["more"],"written tail-recursive?":["This"],"written that":["way"],"written toRNA":["in"],"written uses":["a"],"written using":["normal","`modifyMVar`.","a"],"written very":["neatly"],"written what's":["now"],"written with":["whitespaces,","operator","a","spaces"],"written, I":["just"],"written, but":["looks"],"written, the":["test"],"written, though":["technically"],"written. Any":["and"],"written. I'm":["slowly"],"written. It":["requires"],"wrong -":["where"],"wrong :)":["you'll"],"wrong :-)":["Why"],"wrong @jesus":["is"],"wrong about":["Data.Text.replace"],"wrong also.":["Is"],"wrong and":["I","use"],"wrong choice":["here.","here.","here.","of"],"wrong choice.":["http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#sec_par-eval-whnf"],"wrong command,":["sorry.","please"],"wrong command..":["please"],"wrong file":["here","here"],"wrong fold":["for","for","for","for","to","to"],"wrong function":["to","to"],"wrong here,":["I"],"wrong implementation":["to"],"wrong in":["the"],"wrong is":["because"],"wrong kind":["of"],"wrong one":["initially"],"wrong or":["something?"],"wrong order":["and"],"wrong place?":["They"],"wrong questions":[":)"],"wrong response":["to"],"wrong solution":["to"],"wrong the":["first"],"wrong thing":["for","in"],"wrong too":[";)"],"wrong track":["(I"],"wrong way":["to","to","to","to","to","to","to","to","to","to","to","to"],"wrong with":["doing","this.","this.","this,","this.","it.","matching","using","binding","this","declaring","the","this","the","how","what","this","how","this","what","what","this.","this.","yours","it.","this","`go`"],"wrong, I":["always"],"wrong, as":["rows"],"wrong, because":["two"],"wrong, it":["was"],"wrong, or":["who's"],"wrong, you":["should"],"wrong. I":["get"],"wrong. Sorry":["what"],"wrong. With":["`String"],"wrong. You":["actually"],"wrote (":["all"],"wrote `T.last`":["did"],"wrote ```and":["$"],"wrote `fromBool":["x"],"wrote a":["single"],"wrote acronym,":["read"],"wrote can":["be"],"wrote it":["without","in","with","prefix","to","that"],"wrote of":["course"],"wrote tallyWord":["point-free"],"wrote that":["I'd"],"wrote the":["```lowerWord```","function","verse","code","outer","code,"],"wrote this":["to","using","though.","completely"],"wrote this.":["Here"],"wrote your":["predicates"],"wrote, it's":["also"],"ws =":["map","filter","[x|","(lowered,"],"ws, not(":["isSpace("],"ws` if":["you"],"ws` is":["equivalent"],"ws` or":["even"],"x \"\\n\\r":["\\t\\v\\xA0\\x2002\")`"],"x $":["repeat"],"x &&":["s''","f","is","sameSorting"],"x &lt;-":["xs"],"x (SnocList":["xs)"],"x (a,b)":["="],"x )`,":["most"],"x *":["2)","2"],"x +":["1)","(if"],"x ++":["\"","\"\\n\"`","b`","bar`"],"x -":["1","1","s`","1)`.","ord","1"],"x --":["you've","this"],"x -\u003e":["return","force","Map.alter"],"x ..":["y]`."],"x /=":["y)`","y","y","0`","w'","toLower'","y`"],"x 2":["matrix?"],"x 4":["or"],"x :":["acc)","acc)","map","xs`.","xs```","toRNA","\u003cthunk\u003e`"],"x \u003c-":["a","a","ws,","st,","m","newRobot","xs]`"],"x \u003c\u003e":["ff","ff"],"x \u003c|\u003e":["y","tryParse","Just"],"x =":["42","\"Fine.","\"Woah,","\"Sure.\"","x","..","M.fromList","maybe","maybe","show","(last","s'","snd","go","True`","g","g","…","…","…","…","randomRIO","[x]`","if","mod","…`","(x,","y.","f","guard","let","x","year","year","x","fmap","reLower","reUpper","reDigit","x","g","if"],"x ==":["'T'","y","'T'","'T'","'T'","'?'`","'1'","\"oops\"","\"\"","'?'","c)`","unify","\"\"```","'?'`","sort","y`","'T'","'T'","[]`","y","0`","sort","y`","0`\u003c/pre\u003e","0","True```"],"x \u003e\u003e":["Just"],"x \u003e\u003e=":["f`"],"x [('T',":["'U')])","'U')])"],"x []":["[]"],"x _)":["x"],"x `elem`":["\"GACTU\""],"x `mod`":["4"],"x acc":["[]"],"x and":["y","sort"],"x apply":["y\","],"x back":["to"],"x bottle":["/"],"x else":["Nothing"],"x id":["(lookup","(lookup"],"x in":["xs:","reversed(xs):","(lx,"],"x is":["divisible","`(String,"],"x m)":["ls"],"x numeral),":["remain)"],"x r)":["=","=","="],"x such":["that..._"],"x then":["True","Just","show","1","1"],"x to":["where"],"x will":["be"],"x x":["o","xx"],"x y":["-\u003e","=","="],"x y)":["xs","`"],"x y)`":["are"],"x y)`.":["By"],"x y`":["or","is"],"x y``,":["which"],"x {-":["[1,2,3,4,5]"],"x |":["silence","x","silence","guard","x\u003c-[6,12..],","isAlphaNum","x"],"x |\u003e":["f"],"x ||":["isUpper","isAlpha"],"x\". This":["is"],"x' will":["left"],"x'`, and":["for"],"x) $":["(...)"],"x) (repeat":["1)`","(snd"],"x) +":["y)","y)"],"x) ++":["b`","bar`"],"x) .":["fst)"],"x) :":["toRNA","acc)"],"x) =":["charToRna","Just","f","x"],"x) ==":["\"?\"","'?'\"","sort","sort"],"x) [1..]`":["means"],"x) []',":["it"],"x) [])'":["to"],"x) [conditions]`":["and"],"x) `mod`":["10```"],"x) empty":["$"],"x) then":["1","Nothing"],"x) ||":["isUpper"],"x)))` as":["`uncurry"],"x))`. Functions":["have"],"x)\u003c/pre\u003e Maybe":["this"],"x)` appear":["deceivingly"],"x)` aren't":["necessary,"],"x)` is":["more"],"x)` with":["a"],"x)`, since":["Bool"],"x)`. But":["you"],"x)`. Very":["simple."],"x*g^1 +":["y)"],"x*g^2 +":["y*g^1"],"x, g":["x)","x)`."],"x, n))":["xs`."],"x, tail":["x)\u003c/pre\u003e"],"x, using":["I*n+j."],"x-1 ..":["y]`","y]`","y]","y]`"],"x..._. There":["is"],"x1 \u003c-":["resetRobot"],"x1 ==":["x2,"],"x1: \u003cthunk\u003e`":["again."],"x2, y1":["=="],"x:xs =":["...:"],"x\u003c-[6,12..], f":["\u003c-"],"x] ++":["xs`"],"x] |":["x"],"x])` is":["equal"],"x]` onto":["`acc`,"],"x` (especially":["since"],"x` after":["using"],"x` and":["`f","`sort","`fmap"],"x` applies":["function"],"x` aren't":["necessary"],"x` as":["`f`."],"x` but":["in"],"x` can":["be"],"x` case":["is"],"x` comparison.":["I"],"x` could":["be"],"x` do":["in"],"x` equivalent":["to"],"x` if":["you"],"x` in":["the","`number`"],"x` instead.":["If"],"x` is":["computed","equivalent","only","not","here","evaluated","easier","evaluated","equivalent"],"x` it's":["effectively"],"x` may":["be"],"x` multiple":["times,"],"x` not":["`f(x)`."],"x` on":["line"],"x` only":["once."],"x` or":["`f","if","`f"],"x` seems":["strange."],"x` should":["probably"],"x` to":["transform"],"x` with":["`(not"],"x` would":["be"],"x` yields":["the"],"x` you":["can't","can","can"],"x`, `Nothing":["\u003c|\u003e"],"x`, the":["`*"],"x`. Essentially":["the"],"x`. If":["you're"],"x`. Perhaps":["add"],"x`. So":["when"],"x`... if":["`f`"],"x``` is":["a","False."],"xor. `False":["\\="],"xs &&":["last","not","all","all","not","all","all"],"xs &gt;":["0`"],"xs (repeat":["1)`","n)`"],"xs ++":["\"\\n\"`","\"\\n\"`","[\".\"]"],"xs -":["n)","n)"],"xs =":["last","any","build","build","any","any","…","undefined","caps","take","any","any","lowWord"],"xs ==":["1`","\"\"`","'?'`","'?'`","xs`.","xs`.","xs`"],"xs \u003e":["0`"],"xs ]`":["is"],"xs n'":["else"],"xs x":["="],"xs) &amp;&amp;":["null"],"xs) (map":["g"],"xs) =":["SnocList","reverse"],"xs)), you":["can"],"xs))``` ?":["At"],"xs)` because":["length","you"],"xs)` is":["O(1)","equivalent"],"xs)` stuff":["in"],"xs)` using":["a"],"xs)` which":["is"],"xs)` will":["be"],"xs)` with":["one"],"xs)`, but":["nobody"],"xs)`. I":["removed"],"xs)`? If":["it's"],"xs, length":["xs)),"],"xs. It's":["not"],"xs. map":["f","f"],"xs]` then":["you"],"xs` and":["`drop","`sort"],"xs` in":["the"],"xs` is":["actually","more","written","equivalent"],"xs` since":["TupleSections"],"xs` to":["be","a"],"xs` which":["is"],"xs` with":["`any`"],"xs` would":["be"],"xs`, and":["it's"],"xs`, you":["could"],"xs`. Doesn't":["make"],"xs`. I":["would"],"xs`. It's":["obviously"],"xs`? I":["was"],"xs``` check,":["but"],"xs``` form":["in"],"xs``` twice":["in"],"xxx ==":["0`"],"y &&":["null"],"y -":["&gt;"],"y -&gt;":["if"],"y -\u003e":["f","insertWith","acc","tryParse"],"y 1":["x)"],"y \u003c\u003e":["ff"],"y =":["x","False`","True`","(\\a","gx","x`,","y`.","toEnum","y`"],"y are":["identical"],"y m":["13`)"],"y m`":["to"],"y r)":["="],"y so":["that"],"y then":["0","0","1"],"y {-":["[x,x]"],"y |":["y"],"y\", since":["`&amp;lt$&gt;`"],"y) &&":["null"],"y) +":["z","z","z"],"y) `":["is"],"y) ops\u003c/pre\u003e":["GHC"],"y)` are":["never"],"y)` aren't":["necessary"],"y)` because":["otherwise"],"y)` is":["just"],"y)`. By":["removing"],"y*g^1 +":["z*g^0"],"y, ..)":["as"],"y. Now":["I"],"y1 ==":["y2,"],"y2, …":["]`"],"y2` but":["different"],"y] would":["fail"],"y]` for":["a"],"y]` or":["more","even"],"y]` to":["make","generate"],"y]`. Other":["than"],"y` also":["you"],"y` doesn't":["need"],"y` is":["`replicate","going","not","equivalent"],"y` or":["``((==)","`Nothing`)."],"y` since":["function"],"y` the":["right"],"y` to":["`((==)"],"y`, but":["I'm"],"y``, which":["are"],"ya'll can":["help"],"yeah -":["I'd"],"yeah I":["see.","completely","probably","guess"],"yeah should":["have"],"yeah that":["makes","looks","seems"],"yeah you're":["right"],"yeah, I'm":["not"],"yeah, `foldl'`":["was"],"yeah, `tails`,":["that's"],"yeah, duh,":["the"],"yeah, for":["the"],"yeah, it's":["kinda"],"yeah, string":["typing"],"yeah, thanks!":["I"],"yeah, that's":["true,"],"yeah, this":["may"],"yeah, with":["unlines"],"yeah. Looks":["like"],"yeah... I":["just"],"yeah... it":["looks"],"year 4`,":["since"],"year =":["(mod","divisibleBy"],"year `mod`":["x","x"],"year if":["the"],"year month":["=","day","=","$","-"],"year should":["not"],"year that":["is","is","is"],"year was":["divisible"],"years Monad":["will"],"years not":["100."],"years which":["is"],"years), i.e.":["xor."],"years, except":["every"],"yelling =":["\"Woah...\"","..."],"yelling guard":["before"],"yelling in":["place"],"yelling twice.":["Using"],"yelling with":["`all`"],"yelling x":["="],"yelling, but":["i"],"yep! thanks":["for"],"yep, forgot":["about"],"yes I":["can","meant","see."],"yes it":["looks"],"yes that":["answers"],"yes they":["are"],"yes, @noemi":["you"],"yes, I":["suppose","wasn't","think","see","could","find","could"],"yes, I'll":["fix"],"yes, `_`":["will"],"yes, but":["it"],"yes, didn't":["even"],"yes, good":["point!","point"],"yes, i'm":["just"],"yes, if":["a"],"yes, it":["does"],"yes, just":["use"],"yes, was":["writing"],"yes, you":["can","should've"],"yes. (At":["least"],"yes. Guess":["you"],"yes. It's":["pretty"],"yes... I":["suppose","see"],"yesterday so":["thanks"],"yesterday, so":["there"],"yesterday.. the":["difference"],"yet (Exercism":["policy),"],"yet (it's":["really"],"yet (mine":["doesn't),"],"yet `isQuestion`":["clearly"],"yet another":["thing"],"yet but":["want"],"yet divined":["how"],"yet have":["the","as"],"yet having":["read"],"yet though,":["so"],"yet to":["learn","see"],"yet understand":["much"],"yet use":["the"],"yet wrapped":["my"],"yet, Hoogle":["is"],"yet, I":["think"],"yet, but":["I'm"],"yet, do":["the"],"yet, just":["use"],"yet, so":["I"],"yet, time":["to"],"yet, use":["higher"],"yet, you":["can"],"yet. Better":["documentation"],"yet. I":["didn't","know"],"yield a":["```Maybe```.","value."],"yield better":["algorithmic"],"yield pairs":["of"],"yield the":["same"],"yield two":["values"],"yielded nothing":["that"],"yields ```True```.":["So"],"yields the":["same"],"yields true,":["so"],"yikes :)":["I'd"],"yml not":["the"],"yo do":["it."],"yoi r":["structure"],"you \"just":["dive"],"you (I":["think)"],"you (I)":["don't"],"you (Integer":["is"],"you (if":["you"],"you (similarly":["to"],"you (with":["optimizations"],"you *do*":["want.","want"],"you *realy*":["want"],"you *were*":["going"],"you 2":["spaces"],"you 50.":["In"],"you @arthur,":["I"],"you @presley!":["It"],"you @trey":["and"],"you Haskell":["for"],"you _really_":["don't"],"you `(dv,":["rm)`"],"you ```wordsBy```":["it."],"you `import":["Data.List","A`"],"you `map":["toLower`"],"you `reverse`":["a"],"you `toLower`":["before"],"you a":["Haskell","little","line,","little","warning","warning","`liftA2`.","trailing","haskell","few","warning","few","haskell.","`toEnum`","collecting","place"],"you abandoned":["pattern"],"you able":["to"],"you about":["this","this.","it)."],"you about:":["\"This"],"you access":["it"],"you accessors":["for"],"you achieve":["the"],"you actually":["need","have","want","meant.","need,"],"you add":["an","a"],"you added":["a","the","another"],"you agree":["with"],"you algorithm":["isn't"],"you allocations.":["You'd"],"you allow":["empty"],"you already":["have","have","have","used","accounted","did","did","know","stopped","invented","know"],"you also":["don't","reorder","might","add","get"],"you an":["import","import","ultimate"],"you and":["the"],"you any":["efficiency"],"you apply":["to","this"],"you are":["going","completely","right,","rolling","importing","quiet","generating","using.","doing","using","doing","doing","saying","really","using","returning","so","looking","looking","exporting.","in","a","only","extracting","shadowing","using","running","doing","really","storing","trying","building","actually","inserting","inserting","used","building","initially","importing","using","basically","expecting","storing","storing","using","referring","right,","using","instead","right.","importing,","applying","calculating","storing","in","absolutely","using","not","mapping","writing","right,","interested","using","using","indenting","testing,","calculating","defining","doing","using","getting","keeping","keeping","collecting","not","not","about","right.","keeping","missing","checking","right,","right,"],"you are!":["Thanks","I"],"you aren't":["doing","combining","exporting","going","exporting"],"you aren't).":["I"],"you as":["a"],"you asked":["that"],"you avoid":["it","the","that","having"],"you aware":["of"],"you basically":["rewrote","want"],"you be":["a"],"you because":["it"],"you begin":["every"],"you believe":["is"],"you better":["cache"],"you better.":["Also"],"you bind":["`filter","`w'`"],"you bogus":["DNA."],"you boot":["them","them"],"you build":["a","a","*is*"],"you buy":["that"],"you call":["it"],"you can":["try","figure","be","check","expect","use","either","use","use","make","make","remove","access","write","use","have","because","just","use","write","void","use","replace","import","use","just","review","generally","see","use","simplify","move","remove","simplify","get","safely","add","rewrite","make","get","avoid","implement","see","rewrite","find","choose","sort","wrap","use","implement","get","use","use","just","write","access","access","see","save","do","use","explicitly","add","see","have","see","do","get","get","specify","see","also","replace","remove","pattern","use","come","get","replace","replace","tell","sort","separate","get","do","still","get","`filter`","pick","write","just","build","just","simplify","obsure","make","get","use.","contrive","just","do","do","use","count","often","count","eta-reduce","simply","do","pattern","simplify","write","get","simplify","see","do","just","use","do","parse","use","write","get","ensure","define","solve","simplify","make","fix","fix","be","get","only","only","stop","fix","fix","do","avoid","imagine","imagine","get","be","index","be","actually","write","use","make","write","imagine","get","think","check","write","be","then","calculate","do","do","do","see","make","be","use","easily","do","define","even","even","build","also","avoid","probably","be","use","make","simplify","simply","apply","see","import","do","use","use","calculate","use","force","simply","already","make","use","do","do?","remove","do","simply","do","simply","easily","make","be","do","calculate","take,","use","write","browse","use","use","be","use","use","write","dodge","write","get","see","write","use","do","use","simply","be","always","add","write","often","get.","use","simply","avoid","write","do","easily","write","prove","easily","make","calculate","do","expect","prove","make","see,","get","guarantee","use","also","do","do","write","construct","use","just","be","write","use","do","do","get","use","take","just","use","write","figure","use","run","find","do","specify","try","guess","solve","just","inspect","add","use","leave","do","just","express","get","guarantee","have","work","guarantee","just","guarantee","very","eta-reduce","get","do","read","simply","rewrite","simply","eliminate","just","(functions","define","do","come","use.","accurately","do","use","further","guarantee","see","pattern","index","do","do","do","do","use","just","take","avoid","consider","start","write","probably","guarantee","guarantee","use","get","exploit","reuse","use","use","introduce","try","benchmark","start","gather","use","find","use","use","mix","guarantee","just","use","use","give","write","calculate","see.","do.","rewrite","thing","put","derive","use","implement","consider","easily","get","extract","modify","have","have","even","with","implement","use","almost","compose","just","rewrite","make","rewrite","write","rewrite","use","reopen","use","factor","have","use","optimize","use","use","even","use","use","do","create","make","combine","use","write","use","use","drill","view","simply","do","use","also","leave","test","eta","use","avoid","come","simply","do","make","just","write","just","use","do","efficiently","use","```map","do"],"you can't":["find","possibly","pattern","do","return","make","talk","use","use","accurately","use"],"you cannot":["just"],"you care":["about","about"],"you cared":["about"],"you chain":["shift"],"you change":["your","your","it","it","concatMap","the","the"],"you check":["for","the","their"],"you choose":["characters","to","to","to","fewer","Strict","to"],"you chose":["another","to","`foldl`"],"you chunk":["lists"],"you clarify":["that?"],"you close":["an","your"],"you code":["not"],"you coined!":["While"],"you combine":["them?"],"you come":["with","up","at","up","up"],"you commented,":["very"],"you compact":["code"],"you compile":["with","with"],"you compose":["`filter`"],"you consider":["a","writing","using","what","that","a"],"you considered":["using","not","something","that","using","a","something","using","`foldl`","using"],"you convert":["integer"],"you correct":["all"],"you correctly":["you"],"you could":["use","use,","use","use","separate","separate","rephrase","re-write","use","use","build","also","use","name","always","make","use","do","use","use","just","use","improve","use","do","do","do","derive","rewrite","get","express","have","get","read","do","inline","replace","use","use","terminate","just","make","use","use","use","think","just","remove","still","just","do","combine","simplify","write","find","count","rewrite","store","remove","give","make","calculate","ever","do","just","use","_zip_","pattern","rewrite","use","do","write","clean","just","use","just","do","take","leave","use","eta-reduce","use","avoid","use","mix","consider","consider","use","write","simplify","rename","use","simply","use","get","use","just","do","use","change","import","join","simply","do","define","just","define","look","translate","of","fix","use","accomplish","just","have","use","easily","say","implement","say","also","do","simply","have","have","define","do","improve","use","return","use","also","write","construct","do","replace","just","\"[eta","eliminate","implement","just","take","just","do","write","use","do","generate","do","use","implement","use","alternatively","write","gain","simply","use","terminate","improve","do","use","simply","go","write","use","choose","do","implement","use","use","write:","remove","convert","use","do","choose","use","use","even","do","move","rewrite","simplify","save","perform","perform","use","indent","put","use","introduce","also","avoid","approach","write","use","handle","use","use","eta","probably","use","import","use","also"],"you could've":["used","just","done","made):"],"you could.":["You"],"you count":["with"],"you create":["2-tuples","a","with"],"you currently":["have"],"you datatype":["to","to"],"you decide":["to","Mercury","to"],"you decided":["to"],"you define":["the","a","`mapHead`","it","the","the"],"you defined":["it"],"you derive":["Enumerable.","Bounded","Bounded,","Enum,"],"you derived":["`show`,"],"you detailed":["explanation"],"you did":["pretty","with","`fromListWith","want","the","the","an","though,","ask","not","in"],"you did,":["it's"],"you didn't":["consider","just","rely","import","want","have","make","want","already","use"],"you dig":["deeper"],"you disallow":["them"],"you divided":["the"],"you do":["a","a","a","not","(consider","import","`:info","not","this","things","not","it","fix","force","use,","have","a","a","a","a","```wordCount```","the","the","the","a","a","have","this","a","this","this","not","not","not","take","that"],"you do,":["you"],"you do.":["It"],"you don't":["need","have","have","like","have","have","accidently","have","have","need","need","really","have","need","have","want","actually","need.","need,","have","have","have","evaluate","really","want","have","mind","need","want","have","really","have","need","need","need","got","have","accidentally","want","really","expect","need","need","use","have","need","get","need","need","have","need","need","want","want","need","compile","need","have","have","need","want","need","need","need","have","need","need","like","like","use","need","need","need","need","have","have","need","need","mind","need","notice","need","need","need","build","actually","like","need","consider","know"],"you don't,":["and"],"you dropping":["first"],"you either":["need","do"],"you elaborate":["on"],"you eleminate":["this?"],"you enable":["the","the","`{-#","`{-#","`{-#","the","the"],"you encode":["the"],"you encounter":["a"],"you end":["up","up","up","up","up","up","up"],"you enough":["for","of"],"you ensure":["the"],"you etrepum":["for"],"you evaluate":["it","a","the"],"you even":["may"],"you eventually":["evaluate","ask"],"you ever":["force"],"you every":["time"],"you exactly":["mean"],"you examine":["the"],"you expect":["to","to"],"you explain":["this","it","a","`return`","what","how"],"you explain?":["You"],"you explained":["in"],"you explicitly":["`import"],"you express":["your","all","```difference```","```difference```"],"you extract":["the"],"you factor":["out"],"you fail":["to"],"you familar":["with"],"you familiar":["with"],"you fancy":[":)"],"you feel":["like","otherwise?"],"you figure":["out","out"],"you figure?":["`\u003c$\u003e`"],"you find":["a","some","easiest","out","that","a","a","a","a","the","different","an","it","qualified"],"you first,":["and"],"you fixed":["the"],"you flip":["the"],"you follow":["the"],"you for":["the","all","your","pointing","your","feedback!","your","that","trying","a","some","the","articulating","the","the","taking","feedback.","the","taking","taking"],"you force":["it","it,","all","it"],"you found":["this"],"you from":["dealing","building","much","pattern","using","additional","code","cluttering","having"],"you functions":["such"],"you fuse":["tryTrimFirstDigit"],"you gain":["much","by"],"you gaze":["long"],"you generalize":["your"],"you generate":["fewer"],"you get":["O(n","something","the","empty","rid","Eq,","used","the","a","your","the","going,","this","to","access","the","1010","`Just","`Just","for","a","the","rid","rid"],"you give":["that","me","it","me","it","a","it"],"you go":["though","though.","too","with","for"],"you google":["for"],"you grow":["in"],"you had":["something","written","it","this","to","a","parentheses","this","a","a","used","in"],"you handle":["the"],"you hardly":["have"],"you have":["to","here","too","any","to","there","only","in","something","to","`any`,","to","to","to","to","two","multiple","it","trouble","time,","written","done","no","done","to","to","stated","implemented","a","to","`isNaN`,","stated","to","in","a","Bearing","`toEnum`,","a","some","with","`f","`f","those","an","the","to","the","a","them","to","a","already","`count`","to","to","to","done","sides","to","provided","for","`anagramsFor","optimizations","a","chosen.","longer","right","an","two","guaranteed","`Just","now","a","a","to","toy","done","two","implementation","two","thunk","to","everything","dependency","a","to","no","unused","is","2D","n*m","a","to","the","thunk","a","an","code","to","the","HLint?","```sort","a"],"you have.":["You"],"you haven't":["seen","been","checked","already.","seen","seen"],"you having":["to"],"you help":["me"],"you if":["you"],"you imagine":["a","any"],"you implement":["isBlank","map","the","`g`","`isBlank`"],"you implemented":["`luhnDigits`."],"you import":["some","Control.Applicative),","Control.Applicative","`import","both"],"you imported":["`(\u003c$\u003e)`"],"you in":["this","any","this","the"],"you incline":["towards"],"you included":["a","the","that"],"you indent":["the"],"you inlined":["it"],"you insert":["a","something"],"you insist":["on"],"you intended":["and"],"you introduce":["such"],"you introduces":["a"],"you invert":["the"],"you just":["need","need","wanted","look","care","used","blew","need","send","change","need"],"you keep":["all"],"you keeping":["thunks"],"you know":["how","that","of","a","whether","that","that","where","all","how","that","it's","about","about","they","that","that","how","if","why","that","why","that","that","is","that","that","that","what","what"],"you know,":["why"],"you leave":["out","```nub```"],"you left":["two"],"you leverage":["the"],"you lifted":["`checkAnagram"],"you like":["to","to","about","where","best.","semantic","by","pointfree","point-free","it","point","like","it.","it.","it:"],"you like,":["which","you"],"you likely":["haven't","wouldn't","want"],"you linked":["to"],"you load":["the"],"you look":["carefully","up","at","carefully","up","at","at"],"you looked":["at","at","at"],"you love":["hearing"],"you made":["about"],"you make":["it","an","this","`wordsWhen`","it","sense","this","it","```anagramsFor","indent"],"you manually":["lookup"],"you map":["the"],"you massage":["your"],"you match":["the","on"],"you may":["create","reduce","find","write","find","find","want","want","replace","use","try","try","use","simplify","assume","use","not","use","use","choose","rewrite","try","import","refactor","want","see","use","write","have","run","use","drop","notice","use","try","want","find","process","eta-reduce","define","want","want","write","apply","try","useore","try","use","notice","want","extract","use","want","use","choose","find","use","write","use","use","use","number","achive","1).","change","choose","use","map","avoid","take","use","use","think","want","use","write","want","use","do","not","use","like","use","use","use","use","use","assume","like","use","use","use","rewrite","use","define","break","want","look","use","use","use","find","want","want","find","use","want"],"you mean":["```all","like","now,","Data.List.last,","by","something","without","by","by","by","special","make","like","looking","it's","like","that","now","by","using","that","the","by","the","'increase'","by","copy","by","`comps`","`isUpper`","-","generalizing","by","sequence?","without","under","about","about"],"you mean!":[":)"],"you mean,":["I'm"],"you mean.":["I","I"],"you mean...":["it"],"you meant":["in","by","you","`words","by"],"you meant.":["There"],"you meant?":["I"],"you measure":["the","the"],"you mention":["that"],"you mentioned":["it.","it).","makes"],"you might":["consider.","use","also","want","move","explicitly","be","inline","like","like","try","want","consider","just","be","get","say","notice","be","like","also","deadlock","make","consider","get","want","even","express","consider","want","express","want","also","have","create","find","use","want","refactor","want","expect:","do","like,","see","run","end","have","want","find","want","want","prefer","want"],"you mind":["elaborating","explaining","taking"],"you missed":["the"],"you modified":["the"],"you move":["the","your","all"],"you moved":["your","all"],"you much":["in",":)"],"you much.":["It's"],"you multiply":["the","binary"],"you must":["work","take"],"you need":["to","less","to","to","to","more","the","a","to","`rnaNucleotides`","to","it","to.","to","to",":P","to","to","to","to","to","a","to","to.","to","to","to","`atomically`","to","to","it.","`import","to","just","to","to","to","to","to","to","to","`hasPrime`","primes","to","to","only","to","to","first","flexible","to","to","invalid","to","to","to","to","beforeahead","to","```{-#","to","to","some"],"you need,":["there's"],"you needed":["an","a"],"you nest":["enough"],"you never":["need","need"],"you not":["just"],"you notice":["that"],"you noticed":["that"],"you noticed,":["but"],"you often":["end","`incrementBalance`"],"you on":["the","the"],"you once":["again!"],"you only":["use","have","need","need","need","have","wanted","use","have","play","need","wanted","need","use","need","see","need","want","care"],"you opened":["an"],"you optimize":["this?"],"you ordered":["the"],"you overcomplicated":["things"],"you pass":["the","the","to","anything"],"you picked":["good"],"you place":["an","yelling","`.`","the"],"you play":["around"],"you please":["advise","explain","explain"],"you point":["it","me","me","me"],"you pointed":["out,"],"you pop":["open"],"you post":["your"],"you prefer":["\"a","this"],"you prefer,":["you"],"you probably":["wouldn't","already","shouldn't","will,","won't","want","know","want"],"you process":["the"],"you propose.":["Looks"],"you proposing":["that"],"you provide":["a","more"],"you provided":["I've"],"you put":["them","it,","more","some","`toRNA`","isSilence","the","your","`where`","`where`","`where`","the","the","into","`where`"],"you qualifying":["`map`"],"you question":["how"],"you ran":["the"],"you rarely":["see"],"you rather":["read","than"],"you re-order":["the"],"you read":["`(++)","chapters","it"],"you really":["wanted","don't","need","wanted","dislike","need","only","wanted","need","don't","don't","should","want","want","just","want","insist","ought","love","should","want","just","want","want","wanted","want"],"you recommend?":["It"],"you recurse":["you're"],"you reduce":["the","`[Maybe"],"you refactor":["it,","your"],"you refer":["to"],"you reference":["the"],"you referring":["to"],"you remove":["an","a"],"you rename":["the"],"you reordered":["your"],"you require":["additional"],"you restrict":["type"],"you return":["\"Fine.","result.","a"],"you rewrite":["code","code","code"],"you ruled":["out"],"you run":["it,","ghc","```wordCount```","`filter","the","out","this","wordCount"],"you said":["\"eta-reduction\"?","avoid","**That"],"you said,":["they're","it","it's","it","and"],"you said.":["Boy"],"you sanitize":["it"],"you say,":["`String`"],"you scan":["the"],"you see":["no","how","the","`foldl'`","final","that","function"],"you see:":["`a"],"you seem":["to"],"you seen":["`Data.Map.fromListWith`?","the"],"you select":["first"],"you sent":["to"],"you separate":["the","the","the","concerns","your"],"you separated":["each"],"you shadow":["your"],"you shave":["17"],"you should":["write","probably","not","try","take","consider","find","look","use","use","probably","be","have","do","probably","really","let","always","go","be","just","never","set","use","really","get","always","try","start","be","write","be","try","use","consider","import","be","look","import","try","import","be","be","be","only","be","consider","have","be","be","consider","check","use","use","have","always","be","put","get","look","just","get","built","get","be","go","export","go","implement","use","be","use","be","be","probably","be","be","be","also","pointfree","be","always","almost","import","use","try","use","try","probably","use","have","probably","only","probably","be","probably","be"],"you should've":["been","been","used"],"you shouldn't":["need","need","do","even","use","use","really","use","need","use","use","need","need","need","need"],"you show":["me"],"you simplified":["the"],"you simplify":["the","the","`weekDayDiff`)","it?"],"you so":["desire,","opposed","it's"],"you solution":["looks"],"you solve":["this"],"you solved":["it"],"you some":["grouping"],"you sort":["out","the"],"you specify":["only"],"you split":["out","the"],"you spoke":["of"],"you start":["the"],"you started":["the"],"you stay":["inside"],"you stick":["with","with"],"you still":["want","want","have","want","traverse","have"],"you strict":["will"],"you strip":["all"],"you submit":["the","this"],"you submitted":["the","the","the"],"you suggest":["more","@karl?","any"],"you suggest,":["but","it"],"you suggested":["in","but"],"you suggested,":["and","but"],"you suggested.":["Let","Thanks"],"you supply":["your"],"you sure":["just"],"you suspect":["an"],"you switch":["the","some","to"],"you switched":["to"],"you take":["that"],"you tell":["me","me","me","if","me"],"you test":["if"],"you test.":["All"],"you that":["`foldl`","in","`unfoldr`","it's"],"you the":["location","trouble","trouble","trouble","one","trouble","boilerplate","desired","type","full","perfect"],"you think":["of","of","of","of","of","of","of","you","of","about","of","of","of","of","of","of","you","of","of","would","of","of","of","of","about","these","of","I","of","of","this","of","good","of","about","of","of","of","of","the","about","of","I","of","of","it","of","it's","of","of","of","@chaya.","@gunnar!","about","of","of","of","of","of","of","of","that","this","of","there","of","of","of","of","of","of?","it","about","of","of","of","of","of","of","of","of","feels","of","of","of","of"],"you think,":["and","@bethany!"],"you this,":["but"],"you those":["functions"],"you thought":["about","about","about"],"you to":["keep","drop","give","replace","replace","update","handle","try","make","put","use","eta-reduce","do","eliminate","grok,","avoid","do","use","express","omit","build","give","do","simplify","simplify","make","use","this","define","the","have","mess","do","thunk","allocate","translate"],"you told":["me","me","me"],"you tons":["of"],"you took":["the","the"],"you traverse":["the","list"],"you treat":["a","invalid"],"you tried":["grouping","something"],"you try":["`Data.Set`?","to","and","to","this","and","an","to","using","to","to","`permutations","to"],"you trying":["to"],"you understand":["why","what's"],"you up":["to","soon.","from"],"you use":["closer","more","the","guards?","from","`show","`$`","to","a","section","`isSuffixOf`","isSuffixOf","the","some","`foldl'`","it","Data.List.Split's","it","this","foldr","map","`case`","`liftA2","it","`unlines`","`Int`","`data","a","`insertWith`,","Data.Map.Strict:","MVar","_strict_","printf","\"LLNNN\"","`foldl`.","and","Data.Map","`map`,","it","explicit","`/=`","`safeToEnum`","`&&`","`map`","for","Data.List.Split's","the","`romans`","the","a","`randomRIO`","`where","in","swapMVar","`\u003e=\u003e`","`return`","the","that","it","following","strict","```Data.List.Split.wordsBy```","it","arithmetic","already."],"you use,":["or"],"you use.":["I"],"you used":["`quotRem`.","`(&amp;&amp;&amp;)`","a","a","`M.findWithDefault`.","in","the","`fromList`","a","`fst`","`Data.Maybe.fromJust","`isLower`.","`zipWith`","`/=`","`[n,n-1..m]`","`randomRIO`","record"],"you useore":["optimal"],"you using":["anything","-O2?","fromEnum/toEnum","qualified","```newtype"],"you usually":["expect."],"you value,":["if"],"you value-strict":["versions."],"you van":["use"],"you ve":["calculated"],"you very":["much","much","much!","much","much","much."],"you wait":["hours."],"you wand":["to"],"you want":["to","to","with","to","modified","to","to","from","to","to.","to","to","your","to","to","a","it","to","here.","to","to","for","it","to","you","the","to","to","a","it","to.","to","to","to","to","a","a","to","to","to","to","to","to","to","to","to","Float","to","but","some","to","to","is","to","to","me","a","a","the","to","to","to","to","to","to","to","a","to","to","to","changed,","to.","to","to","here.","as","by","to","a","and","then","some","to","to","`foldl'`'s"],"you want,":["just","and"],"you want.":["For","It's"],"you want/need":["to."],"you wanted":["to","to","to","to","you","to","to.","to","to","to","to","to,","a","encapsulation","to","something"],"you went":["through","with","for"],"you were":["thinking?","actually","using","using","on","to","trying","code","so","to","applying","asking","going","doing","using","saying","to","compiling","interested","to","working","right","actually","using","suggesting.","referring","to","aware","referring","referring","suggesting"],"you were,":["you"],"you weren't":["happy"],"you will":["see","always","scan","want","want","probably","need","need","want","want","want","not","implement","have","make","evaluate","use","have","use","try","have","not","simplify","use","use","get","not","generate"],"you wish":["to","to"],"you with":["a","optimizations","an"],"you without":["import?"],"you won't":["need","export","need","need","need","need","have","need","need","have","need","be","be","have","need","have","have"],"you work":["with","with","with"],"you worked":["around."],"you would":["like,","like","have","only","have","change","have","save","write","do","like.","have","end","create","never","use","want","use","need","prefer","have","have","expect","want","have","probably","have","see","have","remove","flip","do","prefer","zip","like","want","have","be","have","prefer","know"],"you wouldn't":["need","write","need","have","need","need","get","need","need","accidentally","have","have"],"you write":["things.","`map","`(\\x","try","already!","`(,1)`","a","it","more","it","it","`map","a","it","some","`toRNA`"],"you wrote":["your","this","the","`T.last`","of","the","the"],"you wrote,":["it's"],"you! I":["was","thought","am"],"you! New":["version"],"you! Nothing":["unidiomatic?"],"you! That's":["excellent"],"you'd add":["1"],"you'd be":["better"],"you'd do":["the"],"you'd expect":["to"],"you'd get":["a","`Silence`","the"],"you'd have":["to","an","to"],"you'd just":["have","have","redefine"],"you'd like":["that","to","an","to","a","a"],"you'd move":["things"],"you'd need":["to","to","to"],"you'd prefer":["the","to"],"you'd probably":["just","want","run"],"you'd really":["have"],"you'd simply":["just"],"you'd specify":["the"],"you'd typically":["use"],"you'd use":["`count`."],"you'd want":["a","to","to","to","to","to","to","to","to"],"you'll allow":["that"],"you'll also":["find","have"],"you'll be":["accumulating","looking","able","able","running","building"],"you'll build":["map","a"],"you'll change":["algorithm","score"],"you'll check":["type"],"you'll do":["something"],"you'll end":["this"],"you'll error":["out,"],"you'll exit":["with"],"you'll find":["it's","over","some","that","a","this","it","useful.","it","it's"],"you'll get":["a","what"],"you'll have":["to","to","to","a","no","no","a","to","toList","tail-recursive","liner","less"],"you'll have:":["`(not"],"you'll look":["to"],"you'll move":["them"],"you'll need":["tryPutMVar","`map","to"],"you'll not":["be","need","need"],"you'll notice":["that","that"],"you'll only":["access"],"you'll probably":["just"],"you'll quickly":["see"],"you'll see":["that","some"],"you'll test":["only"],"you'll traverse":["list"],"you'll try":["only"],"you'll use":["a"],"you'll want":["to","to"],"you'll write":["code"],"you're able":["to"],"you're absolutely":["right"],"you're adding":["integers"],"you're already":["using","using","using,"],"you're also":["converting"],"you're becoming":["my"],"you're better":["off","off"],"you're building":["a","up","up"],"you're calculating":["the"],"you're calling":["`[(Grade,","map"],"you're checking":["that","for","for","for"],"you're coming":["from"],"you're composing":["two"],"you're concerned":["about"],"you're confused":["about","about","about","about"],"you're constructing":["a"],"you're correct":["about"],"you're curious":["though:"],"you're dealing":["with","with"],"you're defining":["the"],"you're definitely":["on"],"you're designing":["the"],"you're doing":["string","compared","and","it","weird","any","with","here:","some","in","IO","any","the","from"],"you're doing,":["and"],"you're done.":["Why"],"you're duplicating":["functionality"],"you're explicitly":["forcing"],"you're exporting":["more","every"],"you're exporting.":["Here,","I"],"you're exposing":["a"],"you're feeling":["point-free."],"you're finding":["it"],"you're fine":["without"],"you're generating":["a"],"you're going":["to","to","to","for","about","to"],"you're gonna":["like"],"you're guaranteed":["that"],"you're handling":["`verse"],"you're having":["trouble"],"you're ignoring":["the"],"you're interested":["in","in"],"you're just":["starting","picking"],"you're left":["with"],"you're looking":["up","for","for","for.","for","for","for","for","for","for","for"],"you're mainly":["concerned","concerned"],"you're missing":["for"],"you're not":["already,","using","even","using","really","accumulating","matching","wrapping","creating","comfortable","sure","already","creating","forcing","dealing"],"you're okay":["with"],"you're only":["calling","nesting"],"you're optimizing":["for"],"you're passing":["`phrase`"],"you're probably":["doing","right,"],"you're putting":["down"],"you're reading":["papers"],"you're really":["courageous)","testing","trying","saying"],"you're recursively":["building"],"you're reimplementing":["with"],"you're required":["to"],"you're returning":["is","a","a","a"],"you're returning),":["and"],"you're right":["that","that","given","your","that","about"],"you're right!":["Haha..."],"you're right,":["it's","it's","of","this","the","I"],"you're right.":["I","I","the","I'll","I"],"you're running":["through"],"you're saying":["now,","now,","`matrix"],"you're set":["on"],"you're shadowing":["that"],"you're solution":["looks"],"you're starting":["the","the"],"you're stepping":["through"],"you're still":["in","indenting"],"you're storing":["in"],"you're suggesting":["to"],"you're sure":["you"],"you're talking":["about"],"you're testing":["if"],"you're thinking":["about"],"you're treating":["incrementing"],"you're trying":["to","to","to","to","to","to","to"],"you're using":["Emacs","less","it","anything","doesn't","from","only","monads.","Data.Bits)","it","Data.Map.Strict","it","are.","the","Data.Map","a","insert","the","the","a","something","guards","Maybe","values","(++)","an"],"you're using,":["but"],"you're willing":["to","to"],"you're working":["at","with","on"],"you're writing":["the"],"you've almost":["done"],"you've already":["moved","moved","checked"],"you've checked":["that"],"you've created":["a"],"you've defined":["what"],"you've done":["actual","is","here","so"],"you've explicitly":["spelt"],"you've figured":["out"],"you've found":["nearest"],"you've got":["an","`all","a","13"],"you've imported":["non-strict"],"you've introduced":["line"],"you've just":["placed,"],"you've moved":["on"],"you've nailed":["it."],"you've no":["idea"],"you've put":["into"],"you've reduced":["it"],"you've reminded":["me"],"you've said.":["Unfortunately,"],"you've thought":["on"],"you've used":["is","a","`map`."],"you've written":["on","uses"],"you). Take":["a"],"you, I":["learned","usually"],"you, assuming":["you"],"you, because":["the"],"you, but":["you","some"],"you, here's":["an"],"you, if":["you"],"you, that":["simplifies"],"you, to":["argue"],"you, which":["reduces"],"you, will":["just"],"you, with":["emphasis"],"you, without":["any"],"you, you":["can","may"],"you. I":["haven't","thought","used","wonder","just","think","actually","ended"],"you. I'll":["try"],"you. If":["you"],"you. In":["fact,"],"you. The":["only","same"],"you... but":["I'll"],"you: `Data.Set`":["didn't"],"your \"chill":["out\"","out\"","out\""],"your \"shouting\"":["guard"],"your 'subsequences'`":["do."],"your (not":["so"],"your API":["explicitly."],"your API,":["so"],"your Bob":["yet"],"your Bob.hs":["file:"],"your Data.Map.Lazy":["that"],"your Either":["transformer"],"your Haskell":["you"],"your Robot":["type."],"your `=`":["signs"],"your `=`s":["under"],"your `Control.Monad`":["import?"],"your `MultiwayIf`":["comment,"],"your `School`":["data"],"your `TupleSections`":["suggestion"],"your ```add```":["function."],"your `collate`":["does,"],"your `countInternal`":["is"],"your `countUp`":["works"],"your `count`":["function.","function"],"your `guard`":["example"],"your `isAlpha`":["check."],"your `isUpper`":["variant"],"your `let`s":["hard"],"your `mapSnd`":["function,"],"your `module`":["line"],"your `myInsert`":["is"],"your `next`":["already"],"your `normalize`":["and"],"your `not":["$"],"your `nucleotideCounts`":["does"],"your `parts`,":["you"],"your `randomName`":["function"],"your `shouting`":["do"],"your `splitIntoAlphaWords`":["function"],"your `take`s":["and"],"your `toList`":["implementation"],"your `toRNA`":["function"],"your `verse`":["to"],"your `weekDayDiff`":["function"],"your `when`":["and","function."],"your `words'`":["function,"],"your `wordsWhen`,":["so"],"your `~/.ghci`":["file."],"your advice":["regarding","@geraldine,"],"your advice,":["I've"],"your advice.":["Check"],"your algorithm":["with"],"your algorithm,":["so"],"your all":["caps"],"your allupper":["function,"],"your anagramsFor":["implementation."],"your approach":["of","without","to","in"],"your approach,":["using"],"your are":["really"],"your attempt":["to"],"your base":["monad"],"your boat,":["too"],"your bob_test.hs,":["please?"],"your bottler":["to"],"your call!":["The"],"your case":["expression"],"your case,":["I"],"your cases":["however."],"your chain":["of"],"your checks":["a"],"your choice":["of"],"your classification":["code"],"your code":["will","does","looks","will","and","from","will","is","considerably;","with","a","and","underneath","a","filters","doesn't","less","with","to","and","fits","-","does","because","(not","will","just","to","here)","easier","and","can't","is","and","and","to","could","seems","more","clearer,","works","with","will","a","with","might","and","builds"],"your code,":["however.","I've"],"your code.":["Some"],"your code:":["https://gist.github.com/etrepum/6409738"],"your comment":["to","should","is","about","to","until","after"],"your comment,":["but","I"],"your comment.":["But",":)","I"],"your commented":["out"],"your comments":["and","and","and"],"your comments,":["you","I","@ahmed"],"your comments.":["I"],"your concern":["regarding","was"],"your concerns":["about"],"your constant":["feedback."],"your continued":["super-helpful"],"your countOne":["method"],"your current":["algorithm","implementation","solution","solution,","naming"],"your data":["to","that","declaration,","structure"],"your decision,":["@rhea."],"your default":["is"],"your definition":["to","of","of"],"your definitions":["based","symmetric."],"your display":["function,"],"your example,":["`calculating`"],"your exercism":["gem,"],"your explanation":["is","@lucienne","is"],"your exports":["by"],"your eyes":["having"],"your feedback":["=)"],"your feedback!":["I"],"your feedback,":["but"],"your feedback.":["I","I"],"your feedback;":["I'm"],"your file":["so","and"],"your filtering":["logic"],"your first":["dialogue.","guard","`Map`","nitpick,","version","one,","tool,"],"your fold":["function"],"your friend":["you"],"your function":["to","to","does","type","calls","declarations"],"your functions":["and","from"],"your functions.":["That's"],"your generators":["of"],"your gist":["(thanks"],"your gist.":["The"],"your go-inspired":["avatar"],"your great":["nitpicks"],"your guard":["for","conditions","conditions","conditions","conditions","clauses"],"your guards":["and","could","together","but"],"your hands":["are"],"your head":["when","around."],"your help":["that","man,"],"your help!":["The"],"your helper":["functions.","functions.","functions"],"your helpers":["instead"],"your hint":["at","and"],"your implementation":["is","encodes","better","of","does","of","choices.","of","much",":)","will"],"your implementation,":["you"],"your import":["to","to","to","to"],"your import,":["use"],"your imports'":["code"],"your indentation":["by"],"your inner":["functions,"],"your input":["will"],"your install":["doesn't"],"your instinct":["too,"],"your intention":["with"],"your internal":["functions"],"your invalid":["is"],"your it/one":["expression"],"your last":["version,","iteration","version"],"your life":["easier"],"your line":["count."],"your list":["to","traversal"],"your long":["string"],"your lookup":["table","table"],"your main":["function"],"your map":["insertions."],"your map,":["it","you"],"your mapping":["function."],"your matrix":["you"],"your memory":["usage."],"your mercy":["to"],"your module":["interface.","has","statement","will","was"],"your module,":["so","otherwise","otherwise","since","and"],"your module.":["For","Right"],"your modules":["qualified"],"your n":["is."],"your nit":["confused"],"your nitpick":["and"],"your notice!":["Just"],"your nucleotide-count":["solution"],"your one":["and"],"your one,":["but"],"your opinions":["on"],"your original":["nit,","suggestion","code"],"your other":["conditions","predicate"],"your output":["code"],"your own":["feedback","set","splitting","criterion.","filtering","function","code","function","typeclass","function","data,","custom"],"your own.":["For","[This"],"your parameters,":["such"],"your point":["in","about","regarding","holds"],"your point.":["I","I"],"your pointers":["should"],"your pointers,":["@susan,"],"your points":["about","of"],"your possible":["primes"],"your predicate":["is","functions","is"],"your predicates":["in","as","in","because","have","to"],"your preference.":["As"],"your previous":["recommendation","revision","solution","solution)."],"your problem":[";)"],"your program":["would","run","with","to"],"your program,":["you'd","they"],"your programming":["hat","language)."],"your prompt":["nitpick"],"your quasi-imperative":["tail"],"your question":["yourself."],"your questions":["can"],"your rationale":["for","for"],"your re-mplementation":["of"],"your reader":["to"],"your reasoning":[":-)"],"your reasoning,":["you"],"your recommendation).":[":S"],"your response":["is","should"],"your responseFor":["function","function"],"your restatement":["of"],"your robot":["is"],"your second":["O(n*log(n))","nitpick,"],"your second,":["amusingly"],"your second.":["You'll"],"your shout":["test"],"your solution":["for","O(n^2)","(with","but","more","for",":-)).","requires","it's","is","has","is","will","temporarily"],"your solution.":["If","I've","You"],"your sort":["function."],"your sorting":["and","suggestion."],"your square":["brackets,"],"your strategy":["for"],"your strictness":["issue"],"your strip":["function"],"your submission":["by"],"your suggestion":["of","though,","looked"],"your suggestion,":["the"],"your suggestion.":["Have","Have"],"your suggestions":["in","(I","except"],"your suggestions,":["they","and"],"your test":["functions"],"your text":["editor…"],"your third":["guard"],"your thoughts":[":)"],"your time.":[":)"],"your token":["list"],"your tokenization":["code."],"your top":["level"],"your top-level":["definitions"],"your troll":["problem"],"your type":["signatures,","then"],"your type-based":["approach."],"your usage":["of"],"your use":["of","of","of","of"],"your validation;":["from"],"your variant":["in"],"your version":["better","above,","is","and"],"your versions":["probably"],"your way":["then"],"your way.":["(Yes,"],"your where":["clause"],"your whole":["solution."],"your word.":["a"],"your wordsBy,":["but"],"your zero":["and"],"your's predicate":["is"],"your_one in":["Haskell"],"yours and":["mine."],"yours beats":["it"],"yours is":["made"],"yours suggests..":["thanks"],"yours which":["just"],"yours, and":["was"],"yours, you":["do"],"yourself (see":["GHC's"],"yourself :)":["See"],"yourself a":["lot."],"yourself as":["well."],"yourself here.":["There"],"yourself in":["order"],"yourself quite":["easily"],"yourself to":["ASCII?"],"yourself using":["it"],"yourself with":["`concatMap`.","structural"],"yourself you":["could"],"yourself! It's":["difficult"],"yourself), but":["the"],"yourself). The":["implementation"],"yourself, or":["use"],"yourself, the":["benefits","implementations"],"yourself. A":["guard"],"yourself. The":["reason"],"yourself. `elem`":["works"],"ys) =":["map"],"ys` will":["do"],"ys`. The":["type"],"z =":["--","--","f"],"z then":["True"],"z x":["="],"z) x":["\u003c|\u003e"],"z*g^0 =":["--"],"zero and":["one"],"zero doesn't":["exist?"],"zero equal":["sides\""],"zero excuses":["for"],"zero is":["added"],"zero occurrences":["in"],"zero to":["the"],"zero values":["for"],"zero, or":["you"],"zero, so":["maybe"],"zero, you":["don't"],"zero. If":["we"],"zero. `unfoldr`":["would"],"zeroCounts, then":["you"],"zeros are":["not"],"zeros by":["prepending"],"zeros in":["there."],"zeros list":["to"],"zhanrnl for":["you"],"zhanrnl, I've":["changed"],"zhanrnl: thanks.":["I've"],"zip \"ACGT\"":["(repeat"],"zip (fst":["x)"],"zip (repeat":["1))","1)`","1)","1)","1)","1)`.","1)`"],"zip (sort":["children)"],"zip .":["fmap"],"zip [1,":["1"],"zip a":["b`","(repeat"],"zip as":["in"],"zip children'":["cups"],"zip filter":["length"],"zip lists":["until"],"zip needing":["two"],"zip s":["(repeat"],"zip s1":["s2`."],"zip strand":["(repeat"],"zip the":["lists","input"],"zip to":["be"],"zip, but":["it"],"zip. This":["all"],"zipPairs =":["flip"],"zipWith ((fromEnum":[".)",".)",".)",".)",".)",".)",".)."],"zipWith (/=)":["a","xs","xs"],"zipWith (==)":["str","str"],"zipWith (\\x":["y"],"zipWith (flip":["(,))"],"zipWith (fromEnum":["`comp2`"],"zipWith instead":["of"],"zipWith solutions":["I"],"zipWith, /=,":["fromEnum"],"zipWith, fromEnum":["and"],"zipWith: `sum.":["zipWith"],"zipWithOne .":["tokenize\u003c/pre\u003e"],"zipWords =":["(`zip`","map"],"zip`, but":["decided"],"zipped list":["of"],"zipping each":["word"],"zipping it":["with"],"zipping the":["sequence"],"zipping two":["lists"],"zipping with":["`map","`repeat`."],"zipwith and":["cycle"],"zs `V.cons`":["transposeVs"],"zs)\u003c/pre\u003ewhich makes":["me"],"{ a::Int,":["b"],"{ bstValue":["::","::"],"{ dqhd":["::"],"{ foo(a+1);":["}"],"{ getMap":["=","="],"{ matrixCells":["::"],"{ name":["::","::"],"{ nodeValue":["::","::"],"{ prev":["::"],"{ records":["=","::"],"{ return":["a;}","a;}"],"{ rows":["::"],"{ unBankAccount":["::"],"{ unDeque":["::"],"{ unNucleotide":["::"],"{ unSchool":["::","::","::"],"{ unType":["::"],"{ w":["="],"{- M.toList":["x"],"{- This":["is"],"{- [1,2,3,4,5]":["]`,"],"{- [x,x]":[","],"{-# INLINABLE":["fromListWith","fromListWithKey"],"{-# LANGUAGE":["TupleSections","TupleSections","TupleSections","TupleSections"],"{-# UNPACK":["#-}"],"{Id, String,":["()}`"],"{name ::":["String}"],"{unNucleotide =":["'a'}"],"| \"double\"":["`isPrefixOf`"],"| ((==":["'?')"],"| ((all":["isUpper)"],"| (all":["(not"],"| (as,":["b)"],"| (chars,":["score)"],"| (cs,":["s)"],"| (l,":["n)"],"| (score,":["letters)","letters)","chars)"],"| /O(n*log":["n)/."],"| 01":["|"],"| 11":["and"],"| A":["|","|"],"| Aggression":["|"],"| C":["|","|","|"],"| DnaA":["|"],"| DnaG":["|"],"| G":["|","|","|","|","|"],"| Leaf":["approach.","approach"],"| Node":["{"],"| Q":["]"],"| Question":["|","|","|","|"],"| Short`":["you"],"| Shout":["|","|","|"],"| Silence":["|","|","|"],"| T":["deriving","|","|"],"| True`":["and"],"| U":["deriving"],"| U`":["and"],"| _":["\u003c-"],"| a":["=="],"| all":["isSpace","(`elem`"],"| any":["isUpper"],"| c":["==","==","`elem`","\u003c-","\u003e"],"| endswith":["\"?\""],"| filter":["(not"],"| first":["=="],"| grep":["containers`."],"| guard":["="],"| guard0":["="],"| guard1":["=","="],"| guard2":["=","="],"| i":["*"],"| isAlphaNum":["x"],"| isDigit":["x"],"| isLower":["x"],"| isNucleotides":["c"],"| isPunctuation":["c"],"| isQuestion":["s"],"| isQuiet":["="],"| isSilence":["m","s"],"| isSpace":["x"],"| isSymbol":["c"],"| isUpper":["x"],"| isYelling":["s"],"| k\u003e=":["digit"],"| l":["\u003c-","\u003c-"],"| last":["x","msg"],"| len":["=="],"| n":["\u003c-","`seq`","\u003c-","\u003c=","`mod`","\u003c-","\u003c","\u003c-"],"| nucleotide":["==","\u003c-"],"| null":["s"],"| odd":["x"],"| otherwise":["=","=","=","=","=","=","=","=","=","=","==","=","=&gt;","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","=","="],"| p":["==","==","\u003c-"],"| predicate1":["param"],"| predicate2":["param"],"| question":["x"],"| shout":["x","x","x"],"| shouting":["="],"| silence":["x","=","=","x","x"],"| t":["=="],"| w":["\u003c-"],"| wasShouted":["msg"],"| x":["==","&lt;-","=","`elem`","\u003c-","\u003c-"],"| x\u003c-[6,12..],":["f"],"| y":["{-"],"| yelling":["x","="],"| …":["msg","=","="],"|\u003e f":["="],"|| 'c=='A'":["="],"|| (divisibleBy":["4"],"|| False":["=="],"|| all":["isSpace","isSpace"],"|| b":["||"],"|| c":["=='G'","||"],"|| d`":["could"],"|| e":["a`"],"|| is":["always"],"|| isAlpha":["x`."],"|| isNumber":["is"],"|| isSpace":["c`.","c"],"|| isUpper":["c`.","c)","x)`","x`","l`","c)`","a`"],"|| leap":["&&"],"|| mod":["400"],"|| not":["(isLetter"],"||, thus":["one"],"||` everything":["here"],"} $":["property"],"} deriving":["(Show,","(Show)","(Eq)\u003c/pre\u003e"],"} in":["w"],"}\u003c/pre\u003e Everything":["is"],"}` implicitly":["declares"],"}`, which":["would"],"}`. For":["a"],"}`. I":["see"],"~1 sec)":["when"],"~2 years":["which"],"~N instead":["of"],"~~if you":["often"],"η-reduction (thanks":["to"],"η-reduction (this":["terminology","terminology"],"η-reduction). Simply":["remove"],"η-reduction). This":["transformation"],"λ: :info":["(\u003e\u003e=)","(.)"],"λ\u003e (+1)":["`fmap`","."],"λ\u003e (Just":["1)"],"λ\u003e :info":["(++)","(/)","(||)","(==)"],"λ\u003e :t":["(^)","addDays","div","(^)","(.^)"],"λ\u003e Nucleotide":["'a'","'a'"],"λ\u003e data":["Nucleotide","Nucleotide"],"λ\u003e foldr":["(\\x"],"λ\u003e fromEnum":["False","True"],"λ\u003e let":["(.^)"],"λ\u003e map":["(\\x"],"λ\u003e reads":["\""],"– Note":["that"],"– `toAscList`":["is"],"– an":["Int"],"– another":["strategy"],"– however,":["in"],"– note":["the"],"– the":["right","question"],"– you're":["right"],"— pull":["that"],"— they're":["identical!"],"“punctuation” for":["this"],"… #-}`":["pragmas,"],"… $":["insert","insert","insert","insert","insert","insert","insert","insert"],"… ++":["\""],"… =":["undefined","undefined"],"… Gotta":["love"],"… ]`":["(perhaps"],"… else":["if"],"… in":["…`"],"… msg":["="],"…\". Here's":["what"],"…\". When":["a"],"…) +":["1`","1`","1`","1)]`.","1`","1`.","1)]","1`","1`.","1`","1`","1`","1`","1`","1)`,","1`","1`"],"…)))))` and":["it"],"…)))`. You'll":["still"],"…))` instead":["of"],"…))` which":["is","takes"],"…)` (the":["parentheses"],"…)` can":["be"],"…)` looks":["like"],"…], char":["\u003c-","\u003c-"],"…` and":["simply","`go"],"…` are":["overlapping,"],"…` as":["a"],"…` for":["`genName`."],"…` instead":["of","of","of"],"…` instead,":["although"],"…` is":["equivalent"],"…` to":["be"],"…` with":["a"],"…`, but":["with"],"→ (Strand":["p"],"→ Maybe":["r"],"→ r)":["→"],"我 which":["will"]},"prefix_len":2}